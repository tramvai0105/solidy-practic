LavaPack.loadBundle([
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\account-import-strategies\\index.js", {"../../../shared/modules/hexstring-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\hexstring-utils.ts","../lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","@ethersproject/hdnode":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@ethersproject\\hdnode\\lib\\index.js","ethereumjs-util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethereumjs-util\\dist.browser\\index.js","ethereumjs-wallet":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethereumjs-wallet\\index.js","ethereumjs-wallet/thirdparty":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethereumjs-wallet\\thirdparty.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Caccount-import-strategies%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _hdnode = require("@ethersproject/hdnode");
var _ethereumjsUtil = require("ethereumjs-util");
var _ethereumjsWallet = _interopRequireDefault(require("ethereumjs-wallet"));
var _thirdparty = _interopRequireDefault(require("ethereumjs-wallet/thirdparty"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _hexstringUtils = require("../../../shared/modules/hexstring-utils");
var _util = require("../lib/util");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const accountImporter = {
  async importAccount(strategy, args) {
    const importer = this.strategies[strategy];
    const privateKeyHex = importer(...args);
    return privateKeyHex;
  },
  strategies: {
    'Private Key': privateKey => {
      if (!privateKey) {
        throw new Error('Cannot import an empty key.'); // It should never get here, because this should be stopped in the UI
      }

      // Check if the user has entered an SRP by mistake instead of a private key
      if ((0, _hdnode.isValidMnemonic)(privateKey.trim())) {
        throw new Error(`t('importAccountErrorIsSRP')`);
      }
      const trimmedPrivateKey = privateKey.replace(/\s+/gu, ''); // Remove all whitespace

      const prefixedPrivateKey = (0, _util.addHexPrefix)(trimmedPrivateKey);
      let buffer;
      try {
        buffer = (0, _ethereumjsUtil.toBuffer)(prefixedPrivateKey);
      } catch (e) {
        throw new Error(`t('importAccountErrorNotHexadecimal')`);
      }
      try {
        if (!(0, _ethereumjsUtil.isValidPrivate)(buffer) || (0, _ethereumjsUtil.getBinarySize)(prefixedPrivateKey) !== 64 + '0x'.length // Fixes issue #17719 -- isValidPrivate() will let a key of 63 hex digits through without complaining, this line ensures 64 hex digits + '0x' = 66 digits
        ) {
          throw new Error(`t('importAccountErrorNotAValidPrivateKey')`);
        }
      } catch (e) {
        throw new Error(`t('importAccountErrorNotAValidPrivateKey')`);
      }
      const strippedPrivateKey = (0, _hexstringUtils.stripHexPrefix)(prefixedPrivateKey);
      return strippedPrivateKey;
    },
    'JSON File': (input, password) => {
      let wallet;
      try {
        wallet = _thirdparty.default.fromEtherWallet(input, password);
      } catch (e) {
        _loglevel.default.debug('Attempt to import as EtherWallet format failed, trying V3');
        wallet = _ethereumjsWallet.default.fromV3(input, password, true);
      }
      return walletToPrivateKey(wallet);
    }
  }
};
function walletToPrivateKey(wallet) {
  const privateKeyBuffer = wallet.getPrivateKey();
  return (0, _ethereumjsUtil.bufferToHex)(privateKeyBuffer);
}
var _default = accountImporter;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\account-import-strategies\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\constants\\contracts.ts", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Cconstants%5Ccontracts.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SINGLE_CALL_BALANCES_ADDRESS_SEPOLIA = exports.SINGLE_CALL_BALANCES_ADDRESS_POLYGON = exports.SINGLE_CALL_BALANCES_ADDRESS_OPTIMISM = exports.SINGLE_CALL_BALANCES_ADDRESS_GOERLI = exports.SINGLE_CALL_BALANCES_ADDRESS_FANTOM = exports.SINGLE_CALL_BALANCES_ADDRESS_BSC = exports.SINGLE_CALL_BALANCES_ADDRESS_AVALANCHE = exports.SINGLE_CALL_BALANCES_ADDRESS_ARBITRUM = exports.SINGLE_CALL_BALANCES_ADDRESS = void 0;
const SINGLE_CALL_BALANCES_ADDRESS = '0xb1f8e55c7f64d203c1400b9d8555d050f94adf39';
exports.SINGLE_CALL_BALANCES_ADDRESS = SINGLE_CALL_BALANCES_ADDRESS;
const SINGLE_CALL_BALANCES_ADDRESS_GOERLI = '0x9788C4E93f9002a7ad8e72633b11E8d1ecd51f9b';
// TODO(SEPOLIA) There is currently no balance call address for Sepolia
exports.SINGLE_CALL_BALANCES_ADDRESS_GOERLI = SINGLE_CALL_BALANCES_ADDRESS_GOERLI;
const SINGLE_CALL_BALANCES_ADDRESS_SEPOLIA = '';
exports.SINGLE_CALL_BALANCES_ADDRESS_SEPOLIA = SINGLE_CALL_BALANCES_ADDRESS_SEPOLIA;
const SINGLE_CALL_BALANCES_ADDRESS_BSC = '0x2352c63A83f9Fd126af8676146721Fa00924d7e4';
exports.SINGLE_CALL_BALANCES_ADDRESS_BSC = SINGLE_CALL_BALANCES_ADDRESS_BSC;
const SINGLE_CALL_BALANCES_ADDRESS_OPTIMISM = '0xB1c568e9C3E6bdaf755A60c7418C269eb11524FC';
exports.SINGLE_CALL_BALANCES_ADDRESS_OPTIMISM = SINGLE_CALL_BALANCES_ADDRESS_OPTIMISM;
const SINGLE_CALL_BALANCES_ADDRESS_POLYGON = '0x2352c63A83f9Fd126af8676146721Fa00924d7e4';
exports.SINGLE_CALL_BALANCES_ADDRESS_POLYGON = SINGLE_CALL_BALANCES_ADDRESS_POLYGON;
const SINGLE_CALL_BALANCES_ADDRESS_AVALANCHE = '0xD023D153a0DFa485130ECFdE2FAA7e612EF94818';
exports.SINGLE_CALL_BALANCES_ADDRESS_AVALANCHE = SINGLE_CALL_BALANCES_ADDRESS_AVALANCHE;
const SINGLE_CALL_BALANCES_ADDRESS_FANTOM = '0x07f697424ABe762bB808c109860c04eA488ff92B';
exports.SINGLE_CALL_BALANCES_ADDRESS_FANTOM = SINGLE_CALL_BALANCES_ADDRESS_FANTOM;
const SINGLE_CALL_BALANCES_ADDRESS_ARBITRUM = '0x151E24A486D7258dd7C33Fb67E4bB01919B7B32c';
exports.SINGLE_CALL_BALANCES_ADDRESS_ARBITRUM = SINGLE_CALL_BALANCES_ADDRESS_ARBITRUM;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\constants\\contracts.ts",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\alert.js", {"../../../shared/constants/alerts":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\alerts.ts","@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Calert.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _obsStore = require("@metamask/obs-store");
var _alerts = require("../../../shared/constants/alerts");
/**
 * @typedef {object} AlertControllerInitState
 * @property {object} alertEnabledness - A map of alerts IDs to booleans, where
 * `true` indicates that the alert is enabled and shown, and `false` the opposite.
 * @property {object} unconnectedAccountAlertShownOrigins - A map of origin
 * strings to booleans indicating whether the "switch to connected" alert has
 * been shown (`true`) or otherwise (`false`).
 */
/**
 * @typedef {object} AlertControllerOptions
 * @property {AlertControllerInitState} initState - The initial controller state
 */
const defaultState = {
  alertEnabledness: _alerts.TOGGLEABLE_ALERT_TYPES.reduce((alertEnabledness, alertType) => {
    alertEnabledness[alertType] = true;
    return alertEnabledness;
  }, {}),
  unconnectedAccountAlertShownOrigins: {},
  web3ShimUsageOrigins: {}
};

/**
 * Controller responsible for maintaining alert-related state.
 */
class AlertController {
  /**
   * @param {AlertControllerOptions} [opts] - Controller configuration parameters
   */
  constructor(opts = {}) {
    const {
      initState = {},
      preferencesStore
    } = opts;
    const state = {
      ...defaultState,
      alertEnabledness: {
        ...defaultState.alertEnabledness,
        ...initState.alertEnabledness
      }
    };
    this.store = new _obsStore.ObservableStore(state);
    this.selectedAddress = preferencesStore.getState().selectedAddress;
    preferencesStore.subscribe(({
      selectedAddress
    }) => {
      const currentState = this.store.getState();
      if (currentState.unconnectedAccountAlertShownOrigins && this.selectedAddress !== selectedAddress) {
        this.selectedAddress = selectedAddress;
        this.store.updateState({
          unconnectedAccountAlertShownOrigins: {}
        });
      }
    });
  }
  setAlertEnabledness(alertId, enabledness) {
    let {
      alertEnabledness
    } = this.store.getState();
    alertEnabledness = {
      ...alertEnabledness
    };
    alertEnabledness[alertId] = enabledness;
    this.store.updateState({
      alertEnabledness
    });
  }

  /**
   * Sets the "switch to connected" alert as shown for the given origin
   *
   * @param {string} origin - The origin the alert has been shown for
   */
  setUnconnectedAccountAlertShown(origin) {
    let {
      unconnectedAccountAlertShownOrigins
    } = this.store.getState();
    unconnectedAccountAlertShownOrigins = {
      ...unconnectedAccountAlertShownOrigins
    };
    unconnectedAccountAlertShownOrigins[origin] = true;
    this.store.updateState({
      unconnectedAccountAlertShownOrigins
    });
  }

  /**
   * Gets the web3 shim usage state for the given origin.
   *
   * @param {string} origin - The origin to get the web3 shim usage state for.
   * @returns {undefined | 1 | 2} The web3 shim usage state for the given
   * origin, or undefined.
   */
  getWeb3ShimUsageState(origin) {
    return this.store.getState().web3ShimUsageOrigins[origin];
  }

  /**
   * Sets the web3 shim usage state for the given origin to RECORDED.
   *
   * @param {string} origin - The origin the that used the web3 shim.
   */
  setWeb3ShimUsageRecorded(origin) {
    this._setWeb3ShimUsageState(origin, _alerts.Web3ShimUsageAlertStates.recorded);
  }

  /**
   * Sets the web3 shim usage state for the given origin to DISMISSED.
   *
   * @param {string} origin - The origin that the web3 shim notification was
   * dismissed for.
   */
  setWeb3ShimUsageAlertDismissed(origin) {
    this._setWeb3ShimUsageState(origin, _alerts.Web3ShimUsageAlertStates.dismissed);
  }

  /**
   * @private
   * @param {string} origin - The origin to set the state for.
   * @param {number} value - The state value to set.
   */
  _setWeb3ShimUsageState(origin, value) {
    let {
      web3ShimUsageOrigins
    } = this.store.getState();
    web3ShimUsageOrigins = {
      ...web3ShimUsageOrigins
    };
    web3ShimUsageOrigins[origin] = value;
    this.store.updateState({
      web3ShimUsageOrigins
    });
  }
}
exports.default = AlertController;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\alert.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\app-state.js", {"../../../shared/constants/alarms":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\alarms.js","../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../shared/constants/time":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\time.ts","../../../shared/modules/mv3.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\mv3.utils.js","../../../ui/helpers/utils/build-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\build-types.js","../metamask-controller":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\metamask-controller.js","@metamask/controller-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\controller-utils\\dist\\index.js","@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js","events":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\browserify\\node_modules\\events\\events.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js","uuid":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\uuid\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Capp-state.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _events = _interopRequireDefault(require("events"));
var _obsStore = require("@metamask/obs-store");
var _uuid = require("uuid");
var _loglevel = _interopRequireDefault(require("loglevel"));
var _controllerUtils = require("@metamask/controller-utils");
var _metamaskController = require("../metamask-controller");
var _time = require("../../../shared/constants/time");
var _alarms = require("../../../shared/constants/alarms");
var _mv = require("../../../shared/modules/mv3.utils");
var _buildTypes = require("../../../ui/helpers/utils/build-types");
var _app = require("../../../shared/constants/app");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class AppStateController extends _events.default {
  /**
   * @param {object} opts
   */
  constructor(opts = {}) {
    const {
      addUnlockListener,
      isUnlocked,
      initState,
      onInactiveTimeout,
      preferencesStore,
      qrHardwareStore,
      messenger
    } = opts;
    super();
    this.onInactiveTimeout = onInactiveTimeout || (() => undefined);
    this.store = new _obsStore.ObservableStore({
      timeoutMinutes: 0,
      connectedStatusPopoverHasBeenShown: true,
      defaultHomeActiveTabName: null,
      browserEnvironment: {},
      popupGasPollTokens: [],
      notificationGasPollTokens: [],
      fullScreenGasPollTokens: [],
      recoveryPhraseReminderHasBeenShown: false,
      recoveryPhraseReminderLastShown: new Date().getTime(),
      outdatedBrowserWarningLastShown: new Date().getTime(),
      nftsDetectionNoticeDismissed: false,
      showTestnetMessageInDropdown: true,
      showBetaHeader: (0, _buildTypes.isBeta)(),
      showProductTour: true,
      trezorModel: null,
      currentPopupId: undefined,
      ...initState,
      qrHardware: {},
      nftsDropdownState: {},
      usedNetworks: {
        '0x1': true,
        '0x5': true,
        '0x539': true
      },
      serviceWorkerLastActiveTime: 0
    });
    this.timer = null;
    this.isUnlocked = isUnlocked;
    this.waitingForUnlock = [];
    addUnlockListener(this.handleUnlock.bind(this));
    preferencesStore.subscribe(({
      preferences
    }) => {
      const currentState = this.store.getState();
      if (currentState.timeoutMinutes !== preferences.autoLockTimeLimit) {
        this._setInactiveTimeout(preferences.autoLockTimeLimit);
      }
    });
    qrHardwareStore.subscribe(state => {
      this.store.updateState({
        qrHardware: state
      });
    });
    const {
      preferences
    } = preferencesStore.getState();
    this._setInactiveTimeout(preferences.autoLockTimeLimit);
    this.messagingSystem = messenger;
    this._approvalRequestId = null;
  }

  /**
   * Get a Promise that resolves when the extension is unlocked.
   * This Promise will never reject.
   *
   * @param {boolean} shouldShowUnlockRequest - Whether the extension notification
   * popup should be opened.
   * @returns {Promise<void>} A promise that resolves when the extension is
   * unlocked, or immediately if the extension is already unlocked.
   */
  getUnlockPromise(shouldShowUnlockRequest) {
    return new Promise(resolve => {
      if (this.isUnlocked()) {
        resolve();
      } else {
        this.waitForUnlock(resolve, shouldShowUnlockRequest);
      }
    });
  }

  /**
   * Adds a Promise's resolve function to the waitingForUnlock queue.
   * Also opens the extension popup if specified.
   *
   * @param {Promise.resolve} resolve - A Promise's resolve function that will
   * be called when the extension is unlocked.
   * @param {boolean} shouldShowUnlockRequest - Whether the extension notification
   * popup should be opened.
   */
  waitForUnlock(resolve, shouldShowUnlockRequest) {
    this.waitingForUnlock.push({
      resolve
    });
    this.emit(_metamaskController.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE);
    if (shouldShowUnlockRequest) {
      this._requestApproval();
    }
  }

  /**
   * Drains the waitingForUnlock queue, resolving all the related Promises.
   */
  handleUnlock() {
    if (this.waitingForUnlock.length > 0) {
      while (this.waitingForUnlock.length > 0) {
        this.waitingForUnlock.shift().resolve();
      }
      this.emit(_metamaskController.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE);
    }
    this._acceptApproval();
  }

  /**
   * Sets the default home tab
   *
   * @param {string} [defaultHomeActiveTabName] - the tab name
   */
  setDefaultHomeActiveTabName(defaultHomeActiveTabName) {
    this.store.updateState({
      defaultHomeActiveTabName
    });
  }

  /**
   * Record that the user has seen the connected status info popover
   */
  setConnectedStatusPopoverHasBeenShown() {
    this.store.updateState({
      connectedStatusPopoverHasBeenShown: true
    });
  }

  /**
   * Record that the user has been shown the recovery phrase reminder.
   */
  setRecoveryPhraseReminderHasBeenShown() {
    this.store.updateState({
      recoveryPhraseReminderHasBeenShown: true
    });
  }

  /**
   * Record the timestamp of the last time the user has seen the recovery phrase reminder
   *
   * @param {number} lastShown - timestamp when user was last shown the reminder.
   */
  setRecoveryPhraseReminderLastShown(lastShown) {
    this.store.updateState({
      recoveryPhraseReminderLastShown: lastShown
    });
  }

  /**
   * Record the timestamp of the last time the user has acceoted the terms of use
   *
   * @param {number} lastAgreed - timestamp when user last accepted the terms of use
   */
  setTermsOfUseLastAgreed(lastAgreed) {
    this.store.updateState({
      termsOfUseLastAgreed: lastAgreed
    });
  }

  /**
   * Record the timestamp of the last time the user has seen the outdated browser warning
   *
   * @param {number} lastShown - Timestamp (in milliseconds) of when the user was last shown the warning.
   */
  setOutdatedBrowserWarningLastShown(lastShown) {
    this.store.updateState({
      outdatedBrowserWarningLastShown: lastShown
    });
  }

  /**
   * Sets the last active time to the current time.
   */
  setLastActiveTime() {
    this._resetTimer();
  }

  /**
   * Sets the inactive timeout for the app
   *
   * @private
   * @param {number} timeoutMinutes - The inactive timeout in minutes.
   */
  _setInactiveTimeout(timeoutMinutes) {
    this.store.updateState({
      timeoutMinutes
    });
    this._resetTimer();
  }

  /**
   * Resets the internal inactive timer
   *
   * If the {@code timeoutMinutes} state is falsy (i.e., zero) then a new
   * timer will not be created.
   *
   * @private
   */
  /* eslint-disable no-undef */
  _resetTimer() {
    const {
      timeoutMinutes
    } = this.store.getState();
    if (this.timer) {
      clearTimeout(this.timer);
    } else if (_mv.isManifestV3) {
      chrome.alarms.clear(_alarms.AUTO_LOCK_TIMEOUT_ALARM);
    }
    if (!timeoutMinutes) {
      return;
    }
    if (_mv.isManifestV3) {
      chrome.alarms.create(_alarms.AUTO_LOCK_TIMEOUT_ALARM, {
        delayInMinutes: timeoutMinutes,
        periodInMinutes: timeoutMinutes
      });
      chrome.alarms.onAlarm.addListener(alarmInfo => {
        if (alarmInfo.name === _alarms.AUTO_LOCK_TIMEOUT_ALARM) {
          this.onInactiveTimeout();
          chrome.alarms.clear(_alarms.AUTO_LOCK_TIMEOUT_ALARM);
        }
      });
    } else {
      this.timer = setTimeout(() => this.onInactiveTimeout(), timeoutMinutes * _time.MINUTE);
    }
  }

  /**
   * Sets the current browser and OS environment
   *
   * @param os
   * @param browser
   */
  setBrowserEnvironment(os, browser) {
    this.store.updateState({
      browserEnvironment: {
        os,
        browser
      }
    });
  }

  /**
   * Adds a pollingToken for a given environmentType
   *
   * @param pollingToken
   * @param pollingTokenType
   */
  addPollingToken(pollingToken, pollingTokenType) {
    if (pollingTokenType !== _app.POLLING_TOKEN_ENVIRONMENT_TYPES[_app.ENVIRONMENT_TYPE_BACKGROUND]) {
      const prevState = this.store.getState()[pollingTokenType];
      this.store.updateState({
        [pollingTokenType]: [...prevState, pollingToken]
      });
    }
  }

  /**
   * removes a pollingToken for a given environmentType
   *
   * @param pollingToken
   * @param pollingTokenType
   */
  removePollingToken(pollingToken, pollingTokenType) {
    if (pollingTokenType !== _app.POLLING_TOKEN_ENVIRONMENT_TYPES[_app.ENVIRONMENT_TYPE_BACKGROUND]) {
      const prevState = this.store.getState()[pollingTokenType];
      this.store.updateState({
        [pollingTokenType]: prevState.filter(token => token !== pollingToken)
      });
    }
  }

  /**
   * clears all pollingTokens
   */
  clearPollingTokens() {
    this.store.updateState({
      popupGasPollTokens: [],
      notificationGasPollTokens: [],
      fullScreenGasPollTokens: []
    });
  }

  /**
   * Sets whether the testnet dismissal link should be shown in the network dropdown
   *
   * @param showTestnetMessageInDropdown
   */
  setShowTestnetMessageInDropdown(showTestnetMessageInDropdown) {
    this.store.updateState({
      showTestnetMessageInDropdown
    });
  }

  /**
   * Sets whether the beta notification heading on the home page
   *
   * @param showBetaHeader
   */
  setShowBetaHeader(showBetaHeader) {
    this.store.updateState({
      showBetaHeader
    });
  }

  /**
   * Sets whether the product tour should be shown
   *
   * @param showProductTour
   */
  setShowProductTour(showProductTour) {
    this.store.updateState({
      showProductTour
    });
  }

  /**
   * Sets a property indicating the model of the user's Trezor hardware wallet
   *
   * @param trezorModel - The Trezor model.
   */
  setTrezorModel(trezorModel) {
    this.store.updateState({
      trezorModel
    });
  }

  /**
   * A setter for the `nftsDropdownState` property
   *
   * @param nftsDropdownState
   */
  updateNftDropDownState(nftsDropdownState) {
    this.store.updateState({
      nftsDropdownState
    });
  }

  /**
   * Updates the array of the first time used networks
   *
   * @param chainId
   * @returns {void}
   */
  setFirstTimeUsedNetwork(chainId) {
    const currentState = this.store.getState();
    const {
      usedNetworks
    } = currentState;
    usedNetworks[chainId] = true;
    this.store.updateState({
      usedNetworks
    });
  }

  /**
   * A setter for the currentPopupId which indicates the id of popup window that's currently active
   *
   * @param currentPopupId
   */
  setCurrentPopupId(currentPopupId) {
    this.store.updateState({
      currentPopupId
    });
  }

  /**
   * A getter to retrieve currentPopupId saved in the appState
   */
  getCurrentPopupId() {
    return this.store.getState().currentPopupId;
  }
  setServiceWorkerLastActiveTime(serviceWorkerLastActiveTime) {
    this.store.updateState({
      serviceWorkerLastActiveTime
    });
  }
  _requestApproval() {
    this._approvalRequestId = (0, _uuid.v4)();
    this.messagingSystem.call('ApprovalController:addRequest', {
      id: this._approvalRequestId,
      origin: _app.ORIGIN_METAMASK,
      type: _controllerUtils.ApprovalType.Unlock
    }, true).catch(() => {
      // Intentionally ignored as promise not currently used
    });
  }
  _acceptApproval() {
    if (!this._approvalRequestId) {
      _loglevel.default.error('Attempted to accept missing unlock approval request');
      return;
    }
    try {
      this.messagingSystem.call('ApprovalController:acceptRequest', this._approvalRequestId);
    } catch (error) {
      _loglevel.default.error('Failed to accept transaction approval request', error);
    }
    this._approvalRequestId = null;
  }
}
exports.default = AppStateController;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\app-state.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\backup.js", {"../../../shared/modules/string-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\string-utils.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cbackup.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _stringUtils = require("../../../shared/modules/string-utils");
class BackupController {
  constructor(opts = {}) {
    const {
      preferencesController,
      addressBookController,
      networkController,
      trackMetaMetricsEvent
    } = opts;
    this.preferencesController = preferencesController;
    this.addressBookController = addressBookController;
    this.networkController = networkController;
    this._trackMetaMetricsEvent = trackMetaMetricsEvent;
  }
  async restoreUserData(jsonString) {
    const existingPreferences = this.preferencesController.store.getState();
    const {
      preferences,
      addressBook,
      network
    } = JSON.parse(jsonString);
    if (preferences) {
      preferences.identities = existingPreferences.identities;
      preferences.lostIdentities = existingPreferences.lostIdentities;
      preferences.selectedAddress = existingPreferences.selectedAddress;
      this.preferencesController.store.updateState(preferences);
    }
    if (addressBook) {
      this.addressBookController.update(addressBook, true);
    }
    if (network) {
      this.networkController.store.updateState(network);
    }
    if (preferences || addressBook || network) {
      this._trackMetaMetricsEvent({
        event: 'User Data Imported',
        category: 'Backup'
      });
    }
  }
  async backupUserData() {
    const userData = {
      preferences: {
        ...this.preferencesController.store.getState()
      },
      addressBook: {
        ...this.addressBookController.state
      },
      network: {
        networkConfigurations: this.networkController.store.getState().networkConfigurations
      }
    };

    /**
     * We can remove these properties since we will won't be restoring identities from backup
     */
    delete userData.preferences.identities;
    delete userData.preferences.lostIdentities;
    delete userData.preferences.selectedAddress;
    const result = JSON.stringify(userData);
    const date = new Date();
    const prefixZero = num => (0, _stringUtils.prependZero)(num, 2);

    /*
     * userData.YYYY_MM_DD_HH_mm_SS e.g userData.2022_01_13_13_45_56
     * */
    const userDataFileName = `MetaMaskUserData.${date.getFullYear()}_${prefixZero(date.getMonth() + 1)}_${prefixZero(date.getDay())}_${prefixZero(date.getHours())}_${prefixZero(date.getMinutes())}_${prefixZero(date.getDay())}.json`;
    return {
      fileName: userDataFileName,
      data: result
    };
  }
}
exports.default = BackupController;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\backup.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\cached-balances.js", {"@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Ccached-balances.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _obsStore = require("@metamask/obs-store");
/**
 * @typedef {object} CachedBalancesOptions
 * @property {object} accountTracker An {@code AccountTracker} reference
 * @property {Function} getCurrentChainId A function to get the current chain id
 * @property {object} initState The initial controller state
 */
/**
 * Background controller responsible for maintaining
 * a cache of account balances in local storage
 */
class CachedBalancesController {
  /**
   * Creates a new controller instance
   *
   * @param {CachedBalancesOptions} [opts] - Controller configuration parameters
   */
  constructor(opts = {}) {
    const {
      accountTracker,
      getCurrentChainId
    } = opts;
    this.accountTracker = accountTracker;
    this.getCurrentChainId = getCurrentChainId;
    const initState = {
      cachedBalances: {},
      ...opts.initState
    };
    this.store = new _obsStore.ObservableStore(initState);
    this._registerUpdates();
  }

  /**
   * Updates the cachedBalances property for the current chain. Cached balances will be updated to those in the passed accounts
   * if balances in the passed accounts are truthy.
   *
   * @param {object} obj - The the recently updated accounts object for the current chain
   * @param obj.accounts
   * @returns {Promise<void>}
   */
  async updateCachedBalances({
    accounts
  }) {
    const chainId = this.getCurrentChainId();
    const balancesToCache = await this._generateBalancesToCache(accounts, chainId);
    this.store.updateState({
      cachedBalances: balancesToCache
    });
  }
  _generateBalancesToCache(newAccounts, chainId) {
    const {
      cachedBalances
    } = this.store.getState();
    const currentChainBalancesToCache = {
      ...cachedBalances[chainId]
    };
    Object.keys(newAccounts).forEach(accountID => {
      const account = newAccounts[accountID];
      if (account.balance) {
        currentChainBalancesToCache[accountID] = account.balance;
      }
    });
    const balancesToCache = {
      ...cachedBalances,
      [chainId]: currentChainBalancesToCache
    };
    return balancesToCache;
  }

  /**
   * Removes cachedBalances
   */

  clearCachedBalances() {
    this.store.updateState({
      cachedBalances: {}
    });
  }

  /**
   * Sets up listeners and subscriptions which should trigger an update of cached balances. These updates will
   * happen when the current account changes. Which happens on block updates, as well as on network and account
   * selections.
   *
   * @private
   */
  _registerUpdates() {
    const update = this.updateCachedBalances.bind(this);
    this.accountTracker.store.subscribe(update);
  }
}
exports.default = CachedBalancesController;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\cached-balances.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\decrypt-message.ts", {"../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../shared/modules/hexstring-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\hexstring-utils.ts","@metamask/base-controller":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\base-controller\\dist\\index.js","@metamask/controller-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\controller-utils\\dist\\index.js","@metamask/message-manager":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\message-manager\\dist\\index.js","buffer":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\browserify\\node_modules\\buffer\\index.js","events":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\browserify\\node_modules\\events\\events.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cdecrypt-message.ts
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultState = exports.default = void 0;
var _events = _interopRequireDefault(require("events"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _messageManager = require("@metamask/message-manager");
var _baseController = require("@metamask/base-controller");
var _controllerUtils = require("@metamask/controller-utils");
var _metametrics = require("../../../shared/constants/metametrics");
var _hexstringUtils = require("../../../shared/modules/hexstring-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const controllerName = 'DecryptMessageController';
const stateMetadata = {
  unapprovedDecryptMsgs: {
    persist: false,
    anonymous: false
  },
  unapprovedDecryptMsgCount: {
    persist: false,
    anonymous: false
  }
};
const getDefaultState = () => ({
  unapprovedDecryptMsgs: {},
  unapprovedDecryptMsgCount: 0
});
exports.getDefaultState = getDefaultState;
/**
 * Controller for decrypt signing requests requiring user approval.
 */
class DecryptMessageController extends _baseController.BaseControllerV2 {
  /**
   * Construct a DecryptMessage controller.
   *
   * @param options - The controller options.
   * @param options.getState - Callback to retrieve all user state.
   * @param options.keyringController - An instance of a keyring controller used to decrypt message
   * @param options.messenger - A reference to the messaging system.
   * @param options.metricsEvent - A function for emitting a metric event.
   */
  constructor({
    getState,
    keyringController,
    metricsEvent,
    messenger
  }) {
    super({
      metadata: stateMetadata,
      messenger,
      name: controllerName,
      state: getDefaultState()
    });
    _defineProperty(this, "hub", void 0);
    _defineProperty(this, "_getState", void 0);
    _defineProperty(this, "_keyringController", void 0);
    _defineProperty(this, "_metricsEvent", void 0);
    _defineProperty(this, "_decryptMessageManager", void 0);
    this._getState = getState;
    this._keyringController = keyringController;
    this._metricsEvent = metricsEvent;
    this.hub = new _events.default();
    this._decryptMessageManager = new _messageManager.DecryptMessageManager(undefined, undefined, undefined, ['decrypted']);
    this._decryptMessageManager.hub.on('updateBadge', () => {
      this.hub.emit('updateBadge');
    });
    this._decryptMessageManager.hub.on('unapprovedMessage', messageParams => {
      this._requestApproval(messageParams);
    });
    this._subscribeToMessageState(this._decryptMessageManager, (state, newMessages, messageCount) => {
      state.unapprovedDecryptMsgs = newMessages;
      state.unapprovedDecryptMsgCount = messageCount;
    });
  }

  /**
   * A getter for the number of 'unapproved' Messages in the DecryptMessageManager.
   *
   * @returns The number of 'unapproved' Messages in the DecryptMessageManager.
   */
  get unapprovedDecryptMsgCount() {
    return this._decryptMessageManager.getUnapprovedMessagesCount();
  }

  /**
   * Reset the controller state to the initial state.
   */
  resetState() {
    this.update(() => getDefaultState());
  }

  /**
   * Clears all unapproved messages from memory.
   */
  clearUnapproved() {
    this._decryptMessageManager.update({
      unapprovedMessages: {},
      unapprovedMessagesCount: 0
    });
  }

  /**
   * Called when a dapp uses the eth_decrypt method
   *
   * @param messageParams - The params passed to eth_decrypt.
   * @param req - The original request, containing the origin.
   * @returns Promise resolving to the raw data of the signature request.
   */
  async newRequestDecryptMessage(messageParams, req) {
    return this._decryptMessageManager.addUnapprovedMessageAsync(messageParams, req);
  }

  /**
   * Signifies a user's approval to decrypt a message in queue.
   * Triggers decrypt, and the callback function from newUnsignedDecryptMessage.
   *
   * @param messageParams - The params of the message to decrypt & return to the Dapp.
   * @returns A full state update.
   */
  async decryptMessage(messageParams) {
    const messageId = messageParams.metamaskId;
    try {
      const cleanMessageParams = await this._decryptMessageManager.approveMessage(messageParams);
      cleanMessageParams.data = this._parseMessageData(cleanMessageParams.data);
      const rawMessage = await this._keyringController.decryptMessage(cleanMessageParams);
      this._decryptMessageManager.setMessageStatusAndResult(messageId, rawMessage, 'decrypted');
      this._acceptApproval(messageId);
    } catch (error) {
      _loglevel.default.info('MetaMaskController - eth_decrypt failed.', error);
      this._cancelAbstractMessage(this._decryptMessageManager, messageId);
      throw error;
    }
    return this._getState();
  }

  /**
   * Only decrypt message and don't touch transaction state
   *
   * @param messageParams - The params of the message to decrypt.
   * @returns A full state update.
   */
  async decryptMessageInline(messageParams) {
    const messageId = messageParams.metamaskId;
    messageParams.data = this._parseMessageData(messageParams.data);
    const rawMessage = await this._keyringController.decryptMessage(messageParams);
    this._decryptMessageManager.setResult(messageId, rawMessage);
    return this._getState();
  }

  /**
   * Used to cancel a eth_decrypt type message.
   *
   * @param messageId - The ID of the message to cancel.
   * @returns A full state update.
   */
  cancelDecryptMessage(messageId) {
    this._decryptMessageManager.rejectMessage(messageId);
    this._rejectApproval(messageId);
    return this._getState();
  }

  /**
   * Reject all unapproved messages of any type.
   *
   * @param reason - A message to indicate why.
   */
  rejectUnapproved(reason) {
    Object.keys(this._decryptMessageManager.getUnapprovedMessages()).forEach(messageId => {
      this._cancelAbstractMessage(this._decryptMessageManager, messageId, reason);
    });
  }
  _acceptApproval(messageId) {
    this.messagingSystem.call('ApprovalController:acceptRequest', messageId);
  }
  _cancelAbstractMessage(messageManager, messageId, reason) {
    if (reason) {
      this._metricsEvent({
        event: reason,
        category: _metametrics.MetaMetricsEventCategory.Messages,
        properties: {
          action: 'Decrypt Message Request'
        }
      });
    }
    messageManager.rejectMessage(messageId);
    this._rejectApproval(messageId);
    return this._getState();
  }
  _subscribeToMessageState(messageManager, updateState) {
    messageManager.subscribe(state => {
      const newMessages = this._migrateMessages(state.unapprovedMessages);
      this.update(draftState => {
        updateState(draftState, newMessages, state.unapprovedMessagesCount);
      });
    });
  }
  _migrateMessages(coreMessages) {
    const stateMessages = {};
    for (const messageId of Object.keys(coreMessages)) {
      const coreMessage = coreMessages[messageId];
      const stateMessage = this._migrateMessage(coreMessage);
      stateMessages[messageId] = stateMessage;
    }
    return stateMessages;
  }
  _migrateMessage(coreMessage) {
    const {
      messageParams,
      ...coreMessageData
    } = coreMessage;
    const stateMessage = {
      ...coreMessageData,
      rawSig: coreMessage.rawSig,
      msgParams: messageParams,
      origin: messageParams.origin
    };
    return stateMessage;
  }
  _requestApproval(messageParams) {
    const id = messageParams.metamaskId;
    const origin = messageParams.origin || _controllerUtils.ORIGIN_METAMASK;
    try {
      this.messagingSystem.call('ApprovalController:addRequest', {
        id,
        origin,
        type: _controllerUtils.ApprovalType.EthDecrypt
      }, true);
    } catch (error) {
      _loglevel.default.info('Error adding request to approval controller', error);
    }
  }
  _parseMessageData(data) {
    const stripped = (0, _hexstringUtils.stripHexPrefix)(data);
    const buff = Buffer.from(stripped, 'hex');
    return JSON.parse(buff.toString('utf8'));
  }
  _rejectApproval(messageId) {
    try {
      this.messagingSystem.call('ApprovalController:rejectRequest', messageId, 'Cancel');
    } catch (error) {
      _loglevel.default.info('Error rejecting request to approval controller', error);
    }
  }
}
exports.default = DecryptMessageController;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\decrypt-message.ts",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\detect-tokens.js", {"../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../shared/constants/time":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\time.ts","../../../shared/constants/tokens":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\tokens.js","../../../shared/constants/transaction":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\transaction.ts","../../../shared/modules/network.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\network.utils.ts","../../../shared/modules/string-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\string-utils.ts","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cdetect-tokens.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _loglevel = require("loglevel");
var _time = require("../../../shared/constants/time");
var _network = require("../../../shared/constants/network");
var _tokens = require("../../../shared/constants/tokens");
var _network2 = require("../../../shared/modules/network.utils");
var _stringUtils = require("../../../shared/modules/string-utils");
var _transaction = require("../../../shared/constants/transaction");
var _metametrics = require("../../../shared/constants/metametrics");
// By default, poll every 3 minutes
const DEFAULT_INTERVAL = _time.MINUTE * 3;

/**
 * A controller that polls for token exchange
 * rates based on a user's current token list
 */
class DetectTokensController {
  /**
   * Creates a DetectTokensController
   *
   * @param {object} [config] - Options to configure controller
   * @param config.interval
   * @param config.preferences
   * @param config.network
   * @param config.keyringMemStore
   * @param config.tokenList
   * @param config.tokensController
   * @param config.assetsContractController
   * @param config.trackMetaMetricsEvent
   */
  constructor({
    interval = DEFAULT_INTERVAL,
    preferences,
    network,
    keyringMemStore,
    tokenList,
    tokensController,
    assetsContractController = null,
    trackMetaMetricsEvent
  } = {}) {
    var _this$preferences, _this$preferences2, _this$tokensControlle, _this$tokensControlle2, _this$tokensControlle3;
    this.assetsContractController = assetsContractController;
    this.tokensController = tokensController;
    this.preferences = preferences;
    this.interval = interval;
    this.network = network;
    this.keyringMemStore = keyringMemStore;
    this.tokenList = tokenList;
    this.useTokenDetection = (_this$preferences = this.preferences) === null || _this$preferences === void 0 ? void 0 : _this$preferences.store.getState().useTokenDetection;
    this.selectedAddress = (_this$preferences2 = this.preferences) === null || _this$preferences2 === void 0 ? void 0 : _this$preferences2.store.getState().selectedAddress;
    this.tokenAddresses = (_this$tokensControlle = this.tokensController) === null || _this$tokensControlle === void 0 ? void 0 : _this$tokensControlle.state.tokens.map(token => {
      return token.address;
    });
    this.hiddenTokens = (_this$tokensControlle2 = this.tokensController) === null || _this$tokensControlle2 === void 0 ? void 0 : _this$tokensControlle2.state.ignoredTokens;
    this.detectedTokens = (_this$tokensControlle3 = this.tokensController) === null || _this$tokensControlle3 === void 0 ? void 0 : _this$tokensControlle3.state.detectedTokens;
    this.chainId = this.getChainIdFromNetworkStore(network);
    this._trackMetaMetricsEvent = trackMetaMetricsEvent;
    preferences === null || preferences === void 0 ? void 0 : preferences.store.subscribe(({
      selectedAddress,
      useTokenDetection
    }) => {
      if (this.selectedAddress !== selectedAddress || this.useTokenDetection !== useTokenDetection) {
        this.selectedAddress = selectedAddress;
        this.useTokenDetection = useTokenDetection;
        this.restartTokenDetection({
          selectedAddress
        });
      }
    });
    tokensController === null || tokensController === void 0 ? void 0 : tokensController.subscribe(({
      tokens = [],
      ignoredTokens = [],
      detectedTokens = []
    }) => {
      this.tokenAddresses = tokens.map(token => {
        return token.address;
      });
      this.hiddenTokens = ignoredTokens;
      this.detectedTokens = detectedTokens;
    });
  }

  /**
   * For each token in the tokenlist provided by the TokenListController, check selectedAddress balance.
   *
   * @param options
   * @param options.selectedAddress - the selectedAddress against which to detect for token balances
   * @param options.chainId - the chainId against which to detect for token balances
   */
  async detectNewTokens({
    selectedAddress,
    chainId
  } = {}) {
    const addressAgainstWhichToDetect = selectedAddress ?? this.selectedAddress;
    const chainIdAgainstWhichToDetect = chainId ?? this.getChainIdFromNetworkStore(this._network);
    if (!this.isActive) {
      return;
    }
    if (!(0, _network2.isTokenDetectionEnabledForNetwork)(chainIdAgainstWhichToDetect)) {
      return;
    }
    if (!this.useTokenDetection && chainIdAgainstWhichToDetect !== _network.CHAIN_IDS.MAINNET) {
      return;
    }
    const isTokenDetectionInactiveInMainnet = !this.useTokenDetection && chainIdAgainstWhichToDetect === _network.CHAIN_IDS.MAINNET;
    const {
      tokenList
    } = this._tokenList.state;
    const tokenListUsed = isTokenDetectionInactiveInMainnet ? _tokens.STATIC_MAINNET_TOKEN_LIST : tokenList;
    const tokensToDetect = [];
    for (const tokenAddress in tokenListUsed) {
      if (!this.tokenAddresses.find(address => (0, _stringUtils.isEqualCaseInsensitive)(address, tokenAddress)) && !this.hiddenTokens.find(address => (0, _stringUtils.isEqualCaseInsensitive)(address, tokenAddress)) && !this.detectedTokens.find(({
        address
      }) => (0, _stringUtils.isEqualCaseInsensitive)(address, tokenAddress))) {
        tokensToDetect.push(tokenAddress);
      }
    }
    const sliceOfTokensToDetect = [tokensToDetect.slice(0, 1000), tokensToDetect.slice(1000, tokensToDetect.length - 1)];
    for (const tokensSlice of sliceOfTokensToDetect) {
      let result;
      try {
        result = await this.assetsContractController.getBalancesInSingleCall(addressAgainstWhichToDetect, tokensSlice);
      } catch (error) {
        (0, _loglevel.warn)(`MetaMask - DetectTokensController single call balance fetch failed`, error);
        return;
      }
      const tokensWithBalance = [];
      const eventTokensDetails = [];
      if (result) {
        const nonZeroTokenAddresses = Object.keys(result);
        for (const nonZeroTokenAddress of nonZeroTokenAddresses) {
          const {
            address,
            symbol,
            decimals
          } = tokenListUsed[nonZeroTokenAddress];
          eventTokensDetails.push(`${symbol} - ${address}`);
          tokensWithBalance.push({
            address,
            symbol,
            decimals
          });
        }
        if (tokensWithBalance.length > 0) {
          this._trackMetaMetricsEvent({
            event: _metametrics.MetaMetricsEventName.TokenDetected,
            category: _metametrics.MetaMetricsEventCategory.Wallet,
            properties: {
              tokens: eventTokensDetails,
              token_standard: _transaction.TokenStandard.ERC20,
              asset_type: _transaction.AssetType.token
            }
          });
          await this.tokensController.addDetectedTokens(tokensWithBalance, {
            selectedAddress: addressAgainstWhichToDetect,
            chainId: chainIdAgainstWhichToDetect
          });
        }
      }
    }
  }

  /**
   * Restart token detection polling period and call detectNewTokens
   * in case of address change or user session initialization.
   *
   * @param options
   * @param options.selectedAddress - the selectedAddress against which to detect for token balances
   * @param options.chainId - the chainId against which to detect for token balances
   */
  restartTokenDetection({
    selectedAddress,
    chainId
  } = {}) {
    const addressAgainstWhichToDetect = selectedAddress ?? this.selectedAddress;
    const chainIdAgainstWhichToDetect = chainId ?? this.chainId;
    if (!(this.isActive && addressAgainstWhichToDetect)) {
      return;
    }
    this.detectNewTokens({
      selectedAddress: addressAgainstWhichToDetect,
      chainId: chainIdAgainstWhichToDetect
    });
    this.interval = DEFAULT_INTERVAL;
  }
  getChainIdFromNetworkStore(network) {
    return network === null || network === void 0 ? void 0 : network.store.getState().providerConfig.chainId;
  }

  /* eslint-disable accessor-pairs */
  /**
   * @type {number}
   */
  set interval(interval) {
    this._handle && clearInterval(this._handle);
    if (!interval) {
      return;
    }
    this._handle = setInterval(() => {
      this.detectNewTokens();
    }, interval);
  }

  /**
   * @type {object}
   */
  set network(network) {
    if (!network) {
      return;
    }
    this._network = network;
    this._network.store.subscribe(() => {
      if (this.chainId !== this.getChainIdFromNetworkStore(network)) {
        const chainId = this.getChainIdFromNetworkStore(network);
        this.chainId = chainId;
        this.restartTokenDetection({
          chainId: this.chainId
        });
      }
    });
  }

  /**
   * In setter when isUnlocked is updated to true, detectNewTokens and restart polling
   *
   * @type {object}
   */
  set keyringMemStore(keyringMemStore) {
    if (!keyringMemStore) {
      return;
    }
    this._keyringMemStore = keyringMemStore;
    this._keyringMemStore.subscribe(({
      isUnlocked
    }) => {
      if (this.isUnlocked !== isUnlocked) {
        this.isUnlocked = isUnlocked;
        if (isUnlocked) {
          this.restartTokenDetection();
        }
      }
    });
  }

  /**
   * @type {object}
   */
  set tokenList(tokenList) {
    if (!tokenList) {
      return;
    }
    this._tokenList = tokenList;
  }

  /**
   * Internal isActive state
   *
   * @type {object}
   */
  get isActive() {
    return this.isOpen && this.isUnlocked;
  }
  /* eslint-enable accessor-pairs */
}
exports.default = DetectTokensController;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\detect-tokens.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\encryption-public-key.ts", {"../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../shared/constants/keyring":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\keyring.ts","../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","@metamask/base-controller":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\base-controller\\dist\\index.js","@metamask/message-manager":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\message-manager\\dist\\index.js","events":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\browserify\\node_modules\\events\\events.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cencryption-public-key.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _events = _interopRequireDefault(require("events"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _messageManager = require("@metamask/message-manager");
var _baseController = require("@metamask/base-controller");
var _metametrics = require("../../../shared/constants/metametrics");
var _keyring = require("../../../shared/constants/keyring");
var _app = require("../../../shared/constants/app");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const controllerName = 'EncryptionPublicKeyController';
const methodNameGetEncryptionPublicKey = 'eth_getEncryptionPublicKey';
const stateMetadata = {
  unapprovedEncryptionPublicKeyMsgs: {
    persist: false,
    anonymous: false
  },
  unapprovedEncryptionPublicKeyMsgCount: {
    persist: false,
    anonymous: false
  }
};
const getDefaultState = () => ({
  unapprovedEncryptionPublicKeyMsgs: {},
  unapprovedEncryptionPublicKeyMsgCount: 0
});
/**
 * Controller for requesting encryption public key requests requiring user approval.
 */
class EncryptionPublicKeyController extends _baseController.BaseControllerV2 {
  /**
   * Construct a EncryptionPublicKey controller.
   *
   * @param options - The controller options.
   * @param options.messenger - The restricted controller messenger for the EncryptionPublicKey controller.
   * @param options.keyringController - An instance of a keyring controller used to extract the encryption public key.
   * @param options.getState - Callback to retrieve all user state.
   * @param options.metricsEvent - A function for emitting a metric event.
   */
  constructor({
    messenger,
    keyringController,
    getState,
    metricsEvent
  }) {
    super({
      name: controllerName,
      metadata: stateMetadata,
      messenger,
      state: getDefaultState()
    });
    _defineProperty(this, "hub", void 0);
    _defineProperty(this, "_keyringController", void 0);
    _defineProperty(this, "_getState", void 0);
    _defineProperty(this, "_encryptionPublicKeyManager", void 0);
    _defineProperty(this, "_metricsEvent", void 0);
    this._keyringController = keyringController;
    this._getState = getState;
    this._metricsEvent = metricsEvent;
    this.hub = new _events.default();
    this._encryptionPublicKeyManager = new _messageManager.EncryptionPublicKeyManager(undefined, undefined, undefined, ['received']);
    this._encryptionPublicKeyManager.hub.on('updateBadge', () => {
      this.hub.emit('updateBadge');
    });
    this._encryptionPublicKeyManager.hub.on('unapprovedMessage', msgParams => {
      this._requestApproval(msgParams, methodNameGetEncryptionPublicKey);
    });
    this._subscribeToMessageState(this._encryptionPublicKeyManager, (state, newMessages, messageCount) => {
      state.unapprovedEncryptionPublicKeyMsgs = newMessages;
      state.unapprovedEncryptionPublicKeyMsgCount = messageCount;
    });
  }

  /**
   * A getter for the number of 'unapproved' Messages in this.messages
   *
   * @returns The number of 'unapproved' Messages in this.messages
   */
  get unapprovedMsgCount() {
    return this._encryptionPublicKeyManager.getUnapprovedMessagesCount();
  }

  /**
   * Reset the controller state to the initial state.
   */
  resetState() {
    this.update(() => getDefaultState());
  }

  /**
   * Called when a Dapp uses the eth_getEncryptionPublicKey method, to request user approval.
   *
   * @param address - The address from the encryption public key will be extracted.
   * @param [req] - The original request, containing the origin.
   */
  async newRequestEncryptionPublicKey(address, req) {
    const keyring = await this._keyringController.getKeyringForAccount(address);
    switch (keyring.type) {
      case _keyring.KeyringType.ledger:
        {
          return new Promise((_, reject) => {
            reject(new Error('Ledger does not support eth_getEncryptionPublicKey.'));
          });
        }
      case _keyring.KeyringType.trezor:
        {
          return new Promise((_, reject) => {
            reject(new Error('Trezor does not support eth_getEncryptionPublicKey.'));
          });
        }
      case _keyring.KeyringType.lattice:
        {
          return new Promise((_, reject) => {
            reject(new Error('Lattice does not support eth_getEncryptionPublicKey.'));
          });
        }
      case _keyring.KeyringType.qr:
        {
          return Promise.reject(new Error('QR hardware does not support eth_getEncryptionPublicKey.'));
        }
      default:
        {
          return this._encryptionPublicKeyManager.addUnapprovedMessageAsync({
            from: address
          }, req);
        }
    }
  }

  /**
   * Signifies a user's approval to receiving encryption public key in queue.
   *
   * @param msgParams - The params of the message to receive & return to the Dapp.
   * @returns A full state update.
   */
  async encryptionPublicKey(msgParams) {
    _loglevel.default.info('MetaMaskController - encryptionPublicKey');
    const messageId = msgParams.metamaskId;
    // sets the status op the message to 'approved'
    // and removes the metamaskId for decryption
    try {
      const cleanMessageParams = await this._encryptionPublicKeyManager.approveMessage(msgParams);

      // EncryptionPublicKey message
      const publicKey = await this._keyringController.getEncryptionPublicKey(cleanMessageParams.from);

      // tells the listener that the message has been processed
      // and can be returned to the dapp
      this._encryptionPublicKeyManager.setMessageStatusAndResult(messageId, publicKey, 'received');
      this._acceptApproval(messageId);
      return this._getState();
    } catch (error) {
      _loglevel.default.info('MetaMaskController - eth_getEncryptionPublicKey failed.', error);
      this._cancelAbstractMessage(this._encryptionPublicKeyManager, messageId);
      throw error;
    }
  }

  /**
   * Used to cancel a message submitted via eth_getEncryptionPublicKey.
   *
   * @param msgId - The id of the message to cancel.
   */
  cancelEncryptionPublicKey(msgId) {
    return this._cancelAbstractMessage(this._encryptionPublicKeyManager, msgId);
  }

  /**
   * Reject all unapproved messages of any type.
   *
   * @param reason - A message to indicate why.
   */
  rejectUnapproved(reason) {
    Object.keys(this._encryptionPublicKeyManager.getUnapprovedMessages()).forEach(messageId => {
      this._cancelAbstractMessage(this._encryptionPublicKeyManager, messageId, reason);
    });
  }

  /**
   * Clears all unapproved messages from memory.
   */
  clearUnapproved() {
    this._encryptionPublicKeyManager.update({
      unapprovedMessages: {},
      unapprovedMessagesCount: 0
    });
  }
  _cancelAbstractMessage(messageManager, messageId, reason) {
    if (reason) {
      this._metricsEvent({
        event: reason,
        category: _metametrics.MetaMetricsEventCategory.Messages,
        properties: {
          action: 'Encryption public key Request'
        }
      });
    }
    messageManager.rejectMessage(messageId);
    this._rejectApproval(messageId);
    return this._getState();
  }
  _subscribeToMessageState(messageManager, updateState) {
    messageManager.subscribe(state => {
      const newMessages = this._migrateMessages(state.unapprovedMessages);
      this.update(draftState => {
        updateState(draftState, newMessages, state.unapprovedMessagesCount);
      });
    });
  }
  _migrateMessages(coreMessages) {
    const stateMessages = {};
    for (const messageId of Object.keys(coreMessages)) {
      const coreMessage = coreMessages[messageId];
      const stateMessage = this._migrateMessage(coreMessage);
      stateMessages[messageId] = stateMessage;
    }
    return stateMessages;
  }
  _migrateMessage(coreMessage) {
    const {
      messageParams,
      ...coreMessageData
    } = coreMessage;

    // Core message managers use messageParams but frontend uses msgParams with lots of references
    const stateMessage = {
      ...coreMessageData,
      rawSig: coreMessage.rawSig,
      msgParams: messageParams.from,
      origin: messageParams.origin
    };
    return stateMessage;
  }
  _requestApproval(msgParams, type) {
    const id = msgParams.metamaskId;
    const origin = msgParams.origin || _app.ORIGIN_METAMASK;
    this.messagingSystem.call('ApprovalController:addRequest', {
      id,
      origin,
      type
    }, true).catch(() => {
      // Intentionally ignored as promise not currently used
    });
  }
  _acceptApproval(messageId) {
    this.messagingSystem.call('ApprovalController:acceptRequest', messageId);
  }
  _rejectApproval(messageId) {
    this.messagingSystem.call('ApprovalController:rejectRequest', messageId, 'Cancel');
  }
}
exports.default = EncryptionPublicKeyController;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\encryption-public-key.ts",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\ens\\ens.js", {"../../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","@ethersproject/providers":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@ethersproject\\providers\\lib\\index.js","ethereum-ens-network-map":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethereum-ens-network-map\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cens%5Cens.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _providers = require("@ethersproject/providers");
var _ethereumEnsNetworkMap = _interopRequireDefault(require("ethereum-ens-network-map"));
var _network = require("../../../../shared/constants/network");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Ens {
  static getNetworkEnsSupport(network) {
    return Boolean(_ethereumEnsNetworkMap.default[network]);
  }
  constructor({
    network,
    provider
  } = {}) {
    const networkName = _network.NETWORK_ID_TO_ETHERS_NETWORK_NAME_MAP[network];
    const ensAddress = _ethereumEnsNetworkMap.default[network];
    const ethProvider = new _providers.Web3Provider(provider, {
      chainId: parseInt(network, 10),
      name: networkName,
      ensAddress
    });
    this._ethProvider = ethProvider;
  }
  lookup(ensName) {
    return this._ethProvider.resolveName(ensName);
  }
  reverse(address) {
    return this._ethProvider.lookupAddress(address);
  }
}
exports.default = Ens;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\ens\\ens.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\ens\\index.js", {"../../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../../shared/modules/hexstring-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\hexstring-utils.ts","./ens":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\ens\\ens.js","@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js","punycode/punycode":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\punycode\\punycode.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cens%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _punycode = _interopRequireDefault(require("punycode/punycode"));
var _obsStore = require("@metamask/obs-store");
var _loglevel = _interopRequireDefault(require("loglevel"));
var _network = require("../../../../shared/constants/network");
var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");
var _ens = _interopRequireDefault(require("./ens"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';
const ZERO_X_ERROR_ADDRESS = '0x';
class EnsController {
  constructor({
    ens,
    provider,
    onNetworkDidChange,
    getCurrentChainId
  } = {}) {
    const initState = {
      ensResolutionsByAddress: {}
    };
    this._ens = ens;
    if (!this._ens) {
      const chainId = getCurrentChainId();
      const network = _network.CHAIN_ID_TO_NETWORK_ID_MAP[chainId];
      if (_ens.default.getNetworkEnsSupport(network)) {
        this._ens = new _ens.default({
          network,
          provider
        });
      }
    }
    this.store = new _obsStore.ObservableStore(initState);
    this.resetState = () => {
      this.store.updateState(initState);
    };
    onNetworkDidChange(() => {
      this.store.putState(initState);
      const chainId = getCurrentChainId();
      const network = _network.CHAIN_ID_TO_NETWORK_ID_MAP[chainId];
      if (_ens.default.getNetworkEnsSupport(network)) {
        this._ens = new _ens.default({
          network,
          provider
        });
      } else {
        delete this._ens;
      }
    });
  }
  reverseResolveAddress(address) {
    return this._reverseResolveAddress((0, _hexstringUtils.toChecksumHexAddress)(address));
  }
  async _reverseResolveAddress(address) {
    if (!this._ens) {
      return undefined;
    }
    const state = this.store.getState();
    if (state.ensResolutionsByAddress[address]) {
      return state.ensResolutionsByAddress[address];
    }
    let domain;
    try {
      domain = await this._ens.reverse(address);
    } catch (error) {
      _loglevel.default.debug(error);
      return undefined;
    }
    let registeredAddress;
    try {
      registeredAddress = await this._ens.lookup(domain);
    } catch (error) {
      _loglevel.default.debug(error);
      return undefined;
    }
    if (registeredAddress === ZERO_ADDRESS || registeredAddress === ZERO_X_ERROR_ADDRESS) {
      return undefined;
    }
    if ((0, _hexstringUtils.toChecksumHexAddress)(registeredAddress) !== address) {
      return undefined;
    }
    this._updateResolutionsByAddress(address, _punycode.default.toASCII(domain));
    return domain;
  }
  _updateResolutionsByAddress(address, domain) {
    const oldState = this.store.getState();
    this.store.putState({
      ensResolutionsByAddress: {
        ...oldState.ensResolutionsByAddress,
        [address]: domain
      }
    });
  }
}
exports.default = EnsController;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\ens\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\incoming-transactions.js", {"../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../shared/constants/transaction":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\transaction.ts","../../../shared/modules/conversion.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\conversion.utils.ts","../../../shared/modules/fetch-with-timeout":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\fetch-with-timeout.ts","../../../shared/modules/random-id":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\random-id.js","../lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js","bn.js":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\bn.js\\lib\\bn.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cincoming-transactions.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _obsStore = require("@metamask/obs-store");
var _loglevel = _interopRequireDefault(require("loglevel"));
var _bn = _interopRequireDefault(require("bn.js"));
var _randomId = _interopRequireDefault(require("../../../shared/modules/random-id"));
var _util = require("../lib/util");
var _fetchWithTimeout = _interopRequireDefault(require("../../../shared/modules/fetch-with-timeout"));
var _transaction = require("../../../shared/constants/transaction");
var _network = require("../../../shared/constants/network");
var _conversion = require("../../../shared/modules/conversion.utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const fetchWithTimeout = (0, _fetchWithTimeout.default)();

/**
 * @typedef {__import__('../../../shared/constants/transaction').TransactionMeta} TransactionMeta
 */

/**
 * A transaction object in the format returned by the Etherscan API.
 *
 * Note that this is not an exhaustive type definiton; only the properties we use are defined
 *
 * @typedef {object} EtherscanTransaction
 * @property {string} blockNumber - The number of the block this transaction was found in, in decimal
 * @property {string} from - The hex-prefixed address of the sender
 * @property {string} gas - The gas limit, in decimal GWEI
 * @property {string} [gasPrice] - The gas price, in decimal WEI
 * @property {string} [maxFeePerGas] - The maximum fee per gas, inclusive of tip, in decimal WEI
 * @property {string} [maxPriorityFeePerGas] - The maximum tip per gas in decimal WEI
 * @property {string} hash - The hex-prefixed transaction hash
 * @property {string} isError - Whether the transaction was confirmed or failed (0 for confirmed, 1 for failed)
 * @property {string} nonce - The transaction nonce, in decimal
 * @property {string} timeStamp - The timestamp for the transaction, in seconds
 * @property {string} to - The hex-prefixed address of the recipient
 * @property {string} value - The amount of ETH sent in this transaction, in decimal WEI
 */

/**
 * This controller is responsible for retrieving incoming transactions. Etherscan is polled once every block to check
 * for new incoming transactions for the current selected account on the current network
 *
 * Note that only Etherscan-compatible networks are supported. We will not attempt to retrieve incoming transactions
 * on non-compatible custom RPC endpoints.
 */
class IncomingTransactionsController {
  constructor(opts = {}) {
    const {
      blockTracker,
      onNetworkDidChange,
      getCurrentChainId,
      preferencesController,
      onboardingController
    } = opts;
    this.blockTracker = blockTracker;
    this.getCurrentChainId = getCurrentChainId;
    this.preferencesController = preferencesController;
    this.onboardingController = onboardingController;
    this._onLatestBlock = async newBlockNumberHex => {
      const selectedAddress = this.preferencesController.getSelectedAddress();
      const newBlockNumberDec = parseInt(newBlockNumberHex, 16);
      await this._update(selectedAddress, newBlockNumberDec);
    };
    const incomingTxLastFetchedBlockByChainId = Object.keys(_network.ETHERSCAN_SUPPORTED_NETWORKS).reduce((network, chainId) => {
      network[chainId] = null;
      return network;
    }, {});
    const initState = {
      incomingTransactions: {},
      incomingTxLastFetchedBlockByChainId,
      ...opts.initState
    };
    this.store = new _obsStore.ObservableStore(initState);
    this.preferencesController.store.subscribe((0, _util.previousValueComparator)((prevState, currState) => {
      const {
        featureFlags: {
          showIncomingTransactions: prevShowIncomingTransactions
        } = {}
      } = prevState;
      const {
        featureFlags: {
          showIncomingTransactions: currShowIncomingTransactions
        } = {}
      } = currState;
      if (currShowIncomingTransactions === prevShowIncomingTransactions) {
        return;
      }
      if (prevShowIncomingTransactions && !currShowIncomingTransactions) {
        this.stop();
        return;
      }
      this.start();
    }, this.preferencesController.store.getState()));
    this.preferencesController.store.subscribe((0, _util.previousValueComparator)(async (prevState, currState) => {
      const {
        selectedAddress: prevSelectedAddress
      } = prevState;
      const {
        selectedAddress: currSelectedAddress
      } = currState;
      if (currSelectedAddress === prevSelectedAddress) {
        return;
      }
      await this._update(currSelectedAddress);
    }, this.preferencesController.store.getState()));
    this.onboardingController.store.subscribe((0, _util.previousValueComparator)(async (prevState, currState) => {
      const {
        completedOnboarding: prevCompletedOnboarding
      } = prevState;
      const {
        completedOnboarding: currCompletedOnboarding
      } = currState;
      if (!prevCompletedOnboarding && currCompletedOnboarding) {
        const address = this.preferencesController.getSelectedAddress();
        await this._update(address);
      }
    }, this.onboardingController.store.getState()));
    onNetworkDidChange(async () => {
      const address = this.preferencesController.getSelectedAddress();
      await this._update(address);
    });
  }
  start() {
    const {
      featureFlags = {}
    } = this.preferencesController.store.getState();
    const {
      showIncomingTransactions
    } = featureFlags;
    if (!showIncomingTransactions) {
      return;
    }
    this.blockTracker.removeListener('latest', this._onLatestBlock);
    this.blockTracker.addListener('latest', this._onLatestBlock);
  }
  stop() {
    this.blockTracker.removeListener('latest', this._onLatestBlock);
  }

  /**
   * Determines the correct block number to begin looking for new transactions
   * from, fetches the transactions and then saves them and the next block
   * number to begin fetching from in state. Block numbers and transactions are
   * stored per chainId.
   *
   * @private
   * @param {string} address - address to lookup transactions for
   * @param {number} [newBlockNumberDec] - block number to begin fetching from
   */
  async _update(address, newBlockNumberDec) {
    const {
      completedOnboarding
    } = this.onboardingController.store.getState();
    const chainId = this.getCurrentChainId();
    if (!Object.hasOwnProperty.call(_network.ETHERSCAN_SUPPORTED_NETWORKS, chainId) || !address || !completedOnboarding) {
      return;
    }
    try {
      const currentState = this.store.getState();
      const currentBlock = parseInt(this.blockTracker.getCurrentBlock(), 16);
      const mostRecentlyFetchedBlock = currentState.incomingTxLastFetchedBlockByChainId[chainId];
      const blockToFetchFrom = mostRecentlyFetchedBlock ?? newBlockNumberDec ?? currentBlock;
      const newIncomingTxs = await this._getNewIncomingTransactions(address, blockToFetchFrom, chainId);
      let newMostRecentlyFetchedBlock = blockToFetchFrom;
      newIncomingTxs.forEach(tx => {
        if (tx.blockNumber && parseInt(newMostRecentlyFetchedBlock, 10) < parseInt(tx.blockNumber, 10)) {
          newMostRecentlyFetchedBlock = parseInt(tx.blockNumber, 10);
        }
      });
      this.store.updateState({
        incomingTxLastFetchedBlockByChainId: {
          ...currentState.incomingTxLastFetchedBlockByChainId,
          [chainId]: newMostRecentlyFetchedBlock + 1
        },
        incomingTransactions: newIncomingTxs.reduce((transactions, tx) => {
          transactions[tx.hash] = tx;
          return transactions;
        }, {
          ...currentState.incomingTransactions
        })
      });
    } catch (err) {
      _loglevel.default.error(err);
    }
  }

  /**
   * fetches transactions for the given address and chain, via etherscan, then
   * processes the data into the necessary shape for usage in this controller.
   *
   * @private
   * @param {string} [address] - Address to fetch transactions for
   * @param {number} [fromBlock] - Block to look for transactions at
   * @param {string} [chainId] - The chainId for the current network
   * @returns {TransactionMeta[]}
   */
  async _getNewIncomingTransactions(address, fromBlock, chainId) {
    const etherscanDomain = _network.ETHERSCAN_SUPPORTED_NETWORKS[chainId].domain;
    const etherscanSubdomain = _network.ETHERSCAN_SUPPORTED_NETWORKS[chainId].subdomain;
    const apiUrl = `https://${etherscanSubdomain}.${etherscanDomain}`;
    let url = `${apiUrl}/api?module=account&action=txlist&address=${address}&tag=latest&page=1`;
    if (fromBlock) {
      url += `&startBlock=${parseInt(fromBlock, 10)}`;
    }
    const response = await fetchWithTimeout(url);
    const {
      status,
      result
    } = await response.json();
    let newIncomingTxs = [];
    if (status === '1' && Array.isArray(result) && result.length > 0) {
      const remoteTxList = {};
      const remoteTxs = [];
      result.forEach(tx => {
        if (!remoteTxList[tx.hash]) {
          remoteTxs.push(this._normalizeTxFromEtherscan(tx, chainId));
          remoteTxList[tx.hash] = 1;
        }
      });
      newIncomingTxs = remoteTxs.filter(tx => {
        var _tx$txParams, _tx$txParams$to;
        return ((_tx$txParams = tx.txParams) === null || _tx$txParams === void 0 ? void 0 : (_tx$txParams$to = _tx$txParams.to) === null || _tx$txParams$to === void 0 ? void 0 : _tx$txParams$to.toLowerCase()) === address.toLowerCase();
      });
      newIncomingTxs.sort((a, b) => a.time < b.time ? -1 : 1);
    }
    return newIncomingTxs;
  }

  /**
   * Transmutes a EtherscanTransaction into a TransactionMeta
   *
   * @param {EtherscanTransaction} etherscanTransaction - the transaction to normalize
   * @param {string} chainId - The chainId of the current network
   * @returns {TransactionMeta}
   */
  _normalizeTxFromEtherscan(etherscanTransaction, chainId) {
    const time = parseInt(etherscanTransaction.timeStamp, 10) * 1000;
    const status = etherscanTransaction.isError === '0' ? _transaction.TransactionStatus.confirmed : _transaction.TransactionStatus.failed;
    const txParams = {
      from: etherscanTransaction.from,
      gas: (0, _conversion.bnToHex)(new _bn.default(etherscanTransaction.gas)),
      nonce: (0, _conversion.bnToHex)(new _bn.default(etherscanTransaction.nonce)),
      to: etherscanTransaction.to,
      value: (0, _conversion.bnToHex)(new _bn.default(etherscanTransaction.value))
    };
    if (etherscanTransaction.gasPrice) {
      txParams.gasPrice = (0, _conversion.bnToHex)(new _bn.default(etherscanTransaction.gasPrice));
    } else if (etherscanTransaction.maxFeePerGas) {
      txParams.maxFeePerGas = (0, _conversion.bnToHex)(new _bn.default(etherscanTransaction.maxFeePerGas));
      txParams.maxPriorityFeePerGas = (0, _conversion.bnToHex)(new _bn.default(etherscanTransaction.maxPriorityFeePerGas));
    }
    return {
      blockNumber: etherscanTransaction.blockNumber,
      id: (0, _randomId.default)(),
      chainId,
      metamaskNetworkId: _network.ETHERSCAN_SUPPORTED_NETWORKS[chainId].networkId,
      status,
      time,
      txParams,
      hash: etherscanTransaction.hash,
      type: _transaction.TransactionType.incoming
    };
  }
}
exports.default = IncomingTransactionsController;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\incoming-transactions.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\metametrics.js", {"../../../shared/constants/alarms":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\alarms.js","../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../shared/constants/time":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\time.ts","../../../shared/modules/mv3.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\mv3.utils.js","../lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js","buffer":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\browserify\\node_modules\\buffer\\index.js","ethereumjs-util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethereumjs-util\\dist.browser\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","uuid":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\uuid\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cmetametrics.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lodash = require("lodash");
var _obsStore = require("@metamask/obs-store");
var _ethereumjsUtil = require("ethereumjs-util");
var _uuid = require("uuid");
var _app = require("../../../shared/constants/app");
var _metametrics = require("../../../shared/constants/metametrics");
var _time = require("../../../shared/constants/time");
var _mv = require("../../../shared/modules/mv3.utils");
var _alarms = require("../../../shared/constants/alarms");
var _util = require("../lib/util");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const EXTENSION_UNINSTALL_URL = 'https://metamask.io/uninstalled';
const defaultCaptureException = err => {
  // throw error on clean stack so its captured by platform integrations (eg sentry)
  // but does not interrupt the call stack
  setTimeout(() => {
    throw err;
  });
};

// The function is used to build a unique messageId for segment messages
// It uses actionId and uniqueIdentifier from event if present
const buildUniqueMessageId = args => {
  const messageIdParts = [];
  if (args.uniqueIdentifier) {
    messageIdParts.push(args.uniqueIdentifier);
  }
  if (args.actionId) {
    messageIdParts.push(args.actionId);
  }
  if (messageIdParts.length && args.isDuplicateAnonymizedEvent) {
    messageIdParts.push('0x000');
  }
  if (messageIdParts.length) {
    return messageIdParts.join('-');
  }
  return (0, _util.generateRandomId)();
};
const exceptionsToFilter = {
  [`You must pass either an "anonymousId" or a "userId".`]: true
};

/**
 * @typedef {__import__('../../../shared/constants/metametrics').MetaMetricsContext} MetaMetricsContext
 * @typedef {__import__('../../../shared/constants/metametrics').MetaMetricsEventPayload} MetaMetricsEventPayload
 * @typedef {__import__('../../../shared/constants/metametrics').MetaMetricsEventOptions} MetaMetricsEventOptions
 * @typedef {__import__('../../../shared/constants/metametrics').SegmentEventPayload} SegmentEventPayload
 * @typedef {__import__('../../../shared/constants/metametrics').SegmentInterface} SegmentInterface
 * @typedef {__import__('../../../shared/constants/metametrics').MetaMetricsPagePayload} MetaMetricsPagePayload
 * @typedef {__import__('../../../shared/constants/metametrics').MetaMetricsPageOptions} MetaMetricsPageOptions
 * @typedef {__import__('../../../shared/constants/metametrics').MetaMetricsEventFragment} MetaMetricsEventFragment
 * @typedef {__import__('../../../shared/constants/metametrics').MetaMetricsTraits} MetaMetricsTraits
 */

/**
 * @typedef {object} MetaMetricsControllerState
 * @property {string} [metaMetricsId] - The user's metaMetricsId that will be
 *  attached to all non-anonymized event payloads
 * @property {boolean} [participateInMetaMetrics] - The user's preference for
 *  participating in the MetaMetrics analytics program. This setting controls
 *  whether or not events are tracked
 * @property {{[string]: MetaMetricsEventFragment}} [fragments] - Object keyed
 *  by UUID with stored fragments as values.
 * @property {Array} [eventsBeforeMetricsOptIn] - Array of queued events added before
 *  a user opts into metrics.
 * @property {object} [traits] - Traits that are not derived from other state keys.
 * @property {Record<string any>} [previousUserTraits] - The user traits the last
 *  time they were computed.
 */

class MetaMetricsController {
  /**
   * @param {object} options
   * @param {object} options.segment - an instance of analytics for tracking
   *  events that conform to the new MetaMetrics tracking plan.
   * @param {object} options.preferencesStore - The preferences controller store, used
   *  to access and subscribe to preferences that will be attached to events
   * @param {Function} options.onNetworkDidChange - Used to attach a listener to the
   *  networkDidChange event emitted by the networkController
   * @param {Function} options.getCurrentChainId - Gets the current chain id from the
   *  network controller
   * @param {string} options.version - The version of the extension
   * @param {string} options.environment - The environment the extension is running in
   * @param {string} options.extension - webextension-polyfill
   * @param {MetaMetricsControllerState} options.initState - State to initialized with
   * @param options.captureException
   */
  constructor({
    segment,
    preferencesStore,
    onNetworkDidChange,
    getCurrentChainId,
    version,
    environment,
    initState,
    extension,
    captureException = defaultCaptureException
  }) {
    /**
     * Returns an array of all of the NFTs the user
     * possesses across all networks and accounts.
     *
     * @param {object} allNfts
     * @returns {[]}
     */
    _defineProperty(this, "_getAllNFTsFlattened", (0, _lodash.memoize)((allNfts = {}) => {
      return Object.values(allNfts).reduce((result, chainNFTs) => {
        return result.concat(...Object.values(chainNFTs));
      }, []);
    }));
    /**
     * Segment accepts any data type value. We have special logic to validate arrays.
     *
     * @param {*} value
     * @returns {boolean}
     */
    _defineProperty(this, "_isValidTraitArray", value => {
      return Array.isArray(value) && (value.every(element => {
        return typeof element === 'string';
      }) || value.every(element => {
        return typeof element === 'boolean';
      }) || value.every(element => {
        return typeof element === 'number';
      }));
    });
    /**
     * Returns true if the value is an accepted date type
     *
     * @param {*} value
     * @returns {boolean}
     */
    _defineProperty(this, "_isValidTraitDate", value => {
      return Object.prototype.toString.call(value) === '[object Date]';
    });
    this._captureException = err => {
      // This is a temporary measure. Currently there are errors flooding sentry due to a problem in how we are tracking anonymousId
      // We intend on removing this as soon as we understand how to correctly solve that problem.
      if (!exceptionsToFilter[err.message]) {
        captureException(err);
      }
    };
    const prefState = preferencesStore.getState();
    this.chainId = getCurrentChainId();
    this.locale = prefState.currentLocale.replace('_', '-');
    this.version = environment === 'production' ? version : `${version}-${environment}`;
    this.extension = extension;
    this.environment = environment;
    const abandonedFragments = (0, _lodash.omitBy)(initState === null || initState === void 0 ? void 0 : initState.fragments, 'persist');
    const segmentApiCalls = (initState === null || initState === void 0 ? void 0 : initState.segmentApiCalls) || {};
    this.store = new _obsStore.ObservableStore({
      participateInMetaMetrics: null,
      metaMetricsId: null,
      eventsBeforeMetricsOptIn: [],
      traits: {},
      ...initState,
      fragments: {
        ...(initState === null || initState === void 0 ? void 0 : initState.fragments)
      },
      segmentApiCalls: {
        ...segmentApiCalls
      }
    });
    preferencesStore.subscribe(({
      currentLocale
    }) => {
      this.locale = currentLocale.replace('_', '-');
    });
    onNetworkDidChange(() => {
      this.chainId = getCurrentChainId();
    });
    this.segment = segment;

    // Track abandoned fragments that weren't properly cleaned up.
    // Abandoned fragments are those that were stored in persistent memory
    // and are available at controller instance creation, but do not have the
    // 'persist' flag set. This means anytime the extension is unlocked, any
    // fragments that are not marked as persistent will be purged and the
    // failure event will be emitted.
    Object.values(abandonedFragments).forEach(fragment => {
      this.finalizeEventFragment(fragment.id, {
        abandoned: true
      });
    });

    // Code below submits any pending segmentApiCalls to Segment if/when the controller is re-instantiated
    if (_mv.isManifestV3) {
      Object.values(segmentApiCalls).forEach(({
        eventType,
        payload
      }) => {
        this._submitSegmentAPICall(eventType, payload);
      });
    }

    // Close out event fragments that were created but not progressed. An
    // interval is used to routinely check if a fragment has not been updated
    // within the fragment's timeout window. When creating a new event fragment
    // a timeout can be specified that will cause an abandoned event to be
    // tracked if the event isn't progressed within that amount of time.
    if (_mv.isManifestV3) {
      /* eslint-disable no-undef */
      chrome.alarms.getAll(alarms => {
        const hasAlarm = (0, _util.checkAlarmExists)(alarms, _alarms.METAMETRICS_FINALIZE_EVENT_FRAGMENT_ALARM);
        if (!hasAlarm) {
          chrome.alarms.create(_alarms.METAMETRICS_FINALIZE_EVENT_FRAGMENT_ALARM, {
            delayInMinutes: 1,
            periodInMinutes: 1
          });
        }
      });
      chrome.alarms.onAlarm.addListener(alarmInfo => {
        if (alarmInfo.name === _alarms.METAMETRICS_FINALIZE_EVENT_FRAGMENT_ALARM) {
          this.finalizeAbandonedFragments();
        }
      });
    } else {
      setInterval(() => {
        this.finalizeAbandonedFragments();
      }, _time.SECOND * 30);
    }
  }
  finalizeAbandonedFragments() {
    Object.values(this.store.getState().fragments).forEach(fragment => {
      if (fragment.timeout && Date.now() - fragment.lastUpdated / 1000 > fragment.timeout) {
        this.finalizeEventFragment(fragment.id, {
          abandoned: true
        });
      }
    });
  }
  generateMetaMetricsId() {
    return (0, _ethereumjsUtil.bufferToHex)((0, _ethereumjsUtil.keccak)(Buffer.from(String(Date.now()) + String(Math.round(Math.random() * Number.MAX_SAFE_INTEGER)))));
  }

  /**
   * Create an event fragment in state and returns the event fragment object.
   *
   * @param {MetaMetricsEventFragment} options - Fragment settings and properties
   *  to initiate the fragment with.
   * @returns {MetaMetricsEventFragment}
   */
  createEventFragment(options) {
    if (!options.successEvent || !options.category) {
      throw new Error(`Must specify success event and category. Success event was: ${options.event}. Category was: ${options.category}. Payload keys were: ${Object.keys(options)}. ${typeof options.properties === 'object' ? `Payload property keys were: ${Object.keys(options.properties)}` : ''}`);
    }
    const {
      fragments
    } = this.store.getState();
    const id = options.uniqueIdentifier ?? (0, _uuid.v4)();
    const fragment = {
      id,
      ...options,
      lastUpdated: Date.now()
    };
    this.store.updateState({
      fragments: {
        ...fragments,
        [id]: fragment
      }
    });
    if (options.initialEvent) {
      this.trackEvent({
        event: fragment.initialEvent,
        category: fragment.category,
        properties: fragment.properties,
        sensitiveProperties: fragment.sensitiveProperties,
        page: fragment.page,
        referrer: fragment.referrer,
        revenue: fragment.revenue,
        value: fragment.value,
        currency: fragment.currency,
        environmentType: fragment.environmentType,
        actionId: options.actionId,
        uniqueIdentifier: options.uniqueIdentifier
      });
    }
    return fragment;
  }

  /**
   * Returns the fragment stored in memory with provided id or undefined if it
   * does not exist.
   *
   * @param {string} id - id of fragment to retrieve
   * @returns {[MetaMetricsEventFragment]}
   */
  getEventFragmentById(id) {
    const {
      fragments
    } = this.store.getState();
    const fragment = fragments[id];
    return fragment;
  }

  /**
   * Updates an event fragment in state
   *
   * @param {string} id - The fragment id to update
   * @param {MetaMetricsEventFragment} payload - Fragment settings and
   *  properties to initiate the fragment with.
   */
  updateEventFragment(id, payload) {
    const {
      fragments
    } = this.store.getState();
    const fragment = fragments[id];
    if (!fragment) {
      throw new Error(`Event fragment with id ${id} does not exist.`);
    }
    this.store.updateState({
      fragments: {
        ...fragments,
        [id]: (0, _lodash.merge)(fragments[id], {
          ...payload,
          lastUpdated: Date.now()
        })
      }
    });
  }

  /**
   * Finalizes a fragment, tracking either a success event or failure Event
   * and then removes the fragment from state.
   *
   * @param {string} id - UUID of the event fragment to be closed
   * @param {object} options
   * @param {boolean} [options.abandoned] - if true track the failure
   *  event instead of the success event
   * @param {MetaMetricsContext.page} [options.page] - page the final event
   *  occurred on. This will override whatever is set on the fragment
   * @param {MetaMetricsContext.referrer} [options.referrer] - Dapp that
   *  originated the fragment. This is for fallback only, the fragment referrer
   *  property will take precedence.
   */
  finalizeEventFragment(id, {
    abandoned = false,
    page,
    referrer
  } = {}) {
    const fragment = this.store.getState().fragments[id];
    if (!fragment) {
      throw new Error(`Funnel with id ${id} does not exist.`);
    }
    const eventName = abandoned ? fragment.failureEvent : fragment.successEvent;
    this.trackEvent({
      event: eventName,
      category: fragment.category,
      properties: fragment.properties,
      sensitiveProperties: fragment.sensitiveProperties,
      page: page ?? fragment.page,
      referrer: fragment.referrer ?? referrer,
      revenue: fragment.revenue,
      value: fragment.value,
      currency: fragment.currency,
      environmentType: fragment.environmentType,
      actionId: fragment.actionId,
      // We append success or failure to the unique-identifier so that the
      // messageId can still be idempotent, but so that it differs from the
      // initial event fired. The initial event was preventing new events from
      // making it to mixpanel because they were using the same unique ID as
      // the events processed in other parts of the fragment lifecycle.
      uniqueIdentifier: fragment.uniqueIdentifier ? `${fragment.uniqueIdentifier}-${abandoned ? 'failure' : 'success'}` : undefined
    });
    const {
      fragments
    } = this.store.getState();
    delete fragments[id];
    this.store.updateState({
      fragments
    });
  }

  /**
   * Calls this._identify with validated metaMetricsId and user traits if user is participating
   * in the MetaMetrics analytics program
   *
   * @param {object} userTraits
   */
  identify(userTraits) {
    const {
      metaMetricsId,
      participateInMetaMetrics
    } = this.state;
    if (!participateInMetaMetrics || !metaMetricsId || !userTraits) {
      return;
    }
    if (typeof userTraits !== 'object') {
      console.warn(`MetaMetricsController#identify: userTraits parameter must be an object. Received type: ${typeof userTraits}`);
      return;
    }
    const allValidTraits = this._buildValidTraits(userTraits);
    this._identify(allValidTraits);
  }

  // It sets an uninstall URL ("Sorry to see you go!" page),
  // which is opened if a user uninstalls the extension.
  updateExtensionUninstallUrl(participateInMetaMetrics, metaMetricsId) {
    const query = {};
    if (participateInMetaMetrics) {
      // We only want to track these things if a user opted into metrics.
      query.mmi = Buffer.from(metaMetricsId).toString('base64');
      query.env = this.environment;
      query.av = this.version;
    }
    const queryString = new URLSearchParams(query);

    // this.extension not currently defined in tests
    if (this.extension && this.extension.runtime) {
      this.extension.runtime.setUninstallURL(`${EXTENSION_UNINSTALL_URL}?${queryString}`);
    }
  }

  /**
   * Setter for the `participateInMetaMetrics` property
   *
   * @param {boolean} participateInMetaMetrics - Whether or not the user wants
   *  to participate in MetaMetrics
   * @returns {string|null} the string of the new metametrics id, or null
   *  if not set
   */
  setParticipateInMetaMetrics(participateInMetaMetrics) {
    let {
      metaMetricsId
    } = this.state;
    if (participateInMetaMetrics && !metaMetricsId) {
      metaMetricsId = this.generateMetaMetricsId();
    } else if (participateInMetaMetrics === false) {
      metaMetricsId = null;
    }
    this.store.updateState({
      participateInMetaMetrics,
      metaMetricsId
    });
    if (participateInMetaMetrics) {
      this.trackEventsAfterMetricsOptIn();
      this.clearEventsAfterMetricsOptIn();
    }
    this.updateExtensionUninstallUrl(participateInMetaMetrics, metaMetricsId);
    return metaMetricsId;
  }
  get state() {
    return this.store.getState();
  }

  /**
   * track a page view with Segment
   *
   * @param {MetaMetricsPagePayload} payload - details of the page viewed
   * @param {MetaMetricsPageOptions} [options] - options for handling the page
   *  view
   */
  trackPage({
    name,
    params,
    environmentType,
    page,
    referrer,
    actionId
  }, options) {
    try {
      if (this.state.participateInMetaMetrics === false) {
        return;
      }
      if (this.state.participateInMetaMetrics === null && !(options !== null && options !== void 0 && options.isOptInPath)) {
        return;
      }
      const {
        metaMetricsId
      } = this.state;
      const idTrait = metaMetricsId ? 'userId' : 'anonymousId';
      const idValue = metaMetricsId ?? _metametrics.METAMETRICS_ANONYMOUS_ID;
      this._submitSegmentAPICall('page', {
        messageId: buildUniqueMessageId({
          actionId
        }),
        [idTrait]: idValue,
        name,
        properties: {
          params,
          locale: this.locale,
          chain_id: this.chainId,
          environment_type: environmentType
        },
        context: this._buildContext(referrer, page)
      });
    } catch (err) {
      this._captureException(err);
    }
  }

  /**
   * submits a metametrics event, not waiting for it to complete or allowing its error to bubble up
   *
   * @param {MetaMetricsEventPayload} payload - details of the event
   * @param {MetaMetricsEventOptions} [options] - options for handling/routing the event
   */
  trackEvent(payload, options) {
    // validation is not caught and handled
    this.validatePayload(payload);
    this.submitEvent(payload, options).catch(err => this._captureException(err));
  }

  /**
   * submits (or queues for submission) a metametrics event, performing necessary payload manipulation and
   * routing the event to the appropriate segment source. Will split events
   * with sensitiveProperties into two events, tracking the sensitiveProperties
   * with the anonymousId only.
   *
   * @param {MetaMetricsEventPayload} payload - details of the event
   * @param {MetaMetricsEventOptions} [options] - options for handling/routing the event
   * @returns {Promise<void>}
   */
  async submitEvent(payload, options) {
    this.validatePayload(payload);
    if (!this.state.participateInMetaMetrics && !(options !== null && options !== void 0 && options.isOptIn)) {
      return;
    }

    // We might track multiple events if sensitiveProperties is included, this array will hold
    // the promises returned from this._track.
    const events = [];
    if (payload.sensitiveProperties) {
      // sensitiveProperties will only be tracked using the anonymousId property and generic id
      // If the event options already specify to exclude the metaMetricsId we throw an error as
      // a signal to the developer that the event was implemented incorrectly
      if ((options === null || options === void 0 ? void 0 : options.excludeMetaMetricsId) === true) {
        throw new Error('sensitiveProperties was specified in an event payload that also set the excludeMetaMetricsId flag');
      }
      const combinedProperties = (0, _lodash.merge)(payload.sensitiveProperties, payload.properties);
      events.push(this._track(this._buildEventPayload({
        ...payload,
        properties: combinedProperties,
        isDuplicateAnonymizedEvent: true
      }), {
        ...options,
        excludeMetaMetricsId: true
      }));
    }
    events.push(this._track(this._buildEventPayload(payload), options));
    await Promise.all(events);
  }

  /**
   * validates a metametrics event
   *
   * @param {MetaMetricsEventPayload} payload - details of the event
   */
  validatePayload(payload) {
    // event and category are required fields for all payloads
    if (!payload.event || !payload.category) {
      throw new Error(`Must specify event and category. Event was: ${payload.event}. Category was: ${payload.category}. Payload keys were: ${Object.keys(payload)}. ${typeof payload.properties === 'object' ? `Payload property keys were: ${Object.keys(payload.properties)}` : ''}`);
    }
  }
  handleMetaMaskStateUpdate(newState) {
    const userTraits = this._buildUserTraitsObject(newState);
    if (userTraits) {
      this.identify(userTraits);
    }
  }

  // Track all queued events after a user opted into metrics.
  trackEventsAfterMetricsOptIn() {
    const {
      eventsBeforeMetricsOptIn
    } = this.store.getState();
    eventsBeforeMetricsOptIn.forEach(eventBeforeMetricsOptIn => {
      this.trackEvent(eventBeforeMetricsOptIn);
    });
  }

  // Once we track queued events after a user opts into metrics, we want to clear the event queue.
  clearEventsAfterMetricsOptIn() {
    this.store.updateState({
      eventsBeforeMetricsOptIn: []
    });
  }

  // It adds an event into a queue, which is only tracked if a user opts into metrics.
  addEventBeforeMetricsOptIn(event) {
    const prevState = this.store.getState().eventsBeforeMetricsOptIn;
    this.store.updateState({
      eventsBeforeMetricsOptIn: [...prevState, event]
    });
  }

  // Add or update traits for tracking.
  updateTraits(newTraits) {
    const {
      traits
    } = this.store.getState();
    this.store.updateState({
      traits: {
        ...traits,
        ...newTraits
      }
    });
  }

  /** PRIVATE METHODS */

  /**
   * Build the context object to attach to page and track events.
   *
   * @private
   * @param {Pick<MetaMetricsContext, 'referrer'>} [referrer] - dapp origin that initialized
   *  the notification window.
   * @param {Pick<MetaMetricsContext, 'page'>} [page] - page object describing the current
   *  view of the extension. Defaults to the background-process object.
   * @returns {MetaMetricsContext}
   */
  _buildContext(referrer, page = _metametrics.METAMETRICS_BACKGROUND_PAGE_OBJECT) {
    return {
      app: {
        name: 'MetaMask Extension',
        version: this.version
      },
      userAgent: window.navigator.userAgent,
      page,
      referrer
    };
  }

  /**
   * Build's the event payload, processing all fields into a format that can be
   * fed to Segment's track method
   *
   * @private
   * @param {
   *  Omit<MetaMetricsEventPayload, 'sensitiveProperties'>
   * } rawPayload - raw payload provided to trackEvent
   * @returns {SegmentEventPayload} formatted event payload for segment
   */
  _buildEventPayload(rawPayload) {
    const {
      event,
      properties,
      revenue,
      value,
      currency,
      category,
      page,
      referrer,
      environmentType = _app.ENVIRONMENT_TYPE_BACKGROUND
    } = rawPayload;
    return {
      event,
      messageId: buildUniqueMessageId(rawPayload),
      properties: {
        // These values are omitted from properties because they have special meaning
        // in segment. https://segment.com/docs/connections/spec/track/#properties.
        // to avoid accidentally using these inappropriately, you must add them as top
        // level properties on the event payload. We also exclude locale to prevent consumers
        // from overwriting this context level property. We track it as a property
        // because not all destinations map locale from context.
        ...(0, _lodash.omit)(properties, ['revenue', 'locale', 'currency', 'value']),
        revenue,
        value,
        currency,
        category,
        locale: this.locale,
        chain_id: (properties === null || properties === void 0 ? void 0 : properties.chain_id) ?? this.chainId,
        environment_type: environmentType
      },
      context: this._buildContext(referrer, page)
    };
  }

  /**
   * This method generates the MetaMetrics user traits object, omitting any
   * traits that have not changed since the last invocation of this method.
   *
   * @param {object} metamaskState - Full metamask state object.
   * @returns {MetaMetricsTraits | null} traits that have changed since last update
   */
  _buildUserTraitsObject(metamaskState) {
    const {
      traits,
      previousUserTraits
    } = this.store.getState();
    /** @type {MetaMetricsTraits} */
    const currentTraits = {
      [_metametrics.MetaMetricsUserTrait.AddressBookEntries]: (0, _lodash.sum)(Object.values(metamaskState.addressBook).map(_lodash.size)),
      [_metametrics.MetaMetricsUserTrait.InstallDateExt]: traits[_metametrics.MetaMetricsUserTrait.InstallDateExt] || '',
      [_metametrics.MetaMetricsUserTrait.LedgerConnectionType]: metamaskState.ledgerTransportType,
      [_metametrics.MetaMetricsUserTrait.NetworksAdded]: Object.values(metamaskState.networkConfigurations).map(networkConfiguration => networkConfiguration.chainId),
      [_metametrics.MetaMetricsUserTrait.NetworksWithoutTicker]: Object.values(metamaskState.networkConfigurations).filter(({
        ticker
      }) => !ticker).map(({
        chainId
      }) => chainId),
      [_metametrics.MetaMetricsUserTrait.NftAutodetectionEnabled]: metamaskState.useNftDetection,
      [_metametrics.MetaMetricsUserTrait.NumberOfAccounts]: Object.values(metamaskState.identities).length,
      [_metametrics.MetaMetricsUserTrait.NumberOfNftCollections]: this._getAllUniqueNFTAddressesLength(metamaskState.allNfts),
      [_metametrics.MetaMetricsUserTrait.NumberOfNfts]: this._getAllNFTsFlattened(metamaskState.allNfts).length,
      [_metametrics.MetaMetricsUserTrait.NumberOfTokens]: this._getNumberOfTokens(metamaskState),
      [_metametrics.MetaMetricsUserTrait.OpenseaApiEnabled]: metamaskState.openSeaEnabled,
      [_metametrics.MetaMetricsUserTrait.ThreeBoxEnabled]: false,
      // deprecated, hard-coded as false
      [_metametrics.MetaMetricsUserTrait.Theme]: metamaskState.theme || 'default',
      [_metametrics.MetaMetricsUserTrait.TokenDetectionEnabled]: metamaskState.useTokenDetection,
      [_metametrics.MetaMetricsUserTrait.SecurityProviders]: metamaskState.transactionSecurityCheckEnabled ? ['opensea'] : []
    };
    if (!previousUserTraits) {
      this.store.updateState({
        previousUserTraits: currentTraits
      });
      return currentTraits;
    }
    if (previousUserTraits && !(0, _lodash.isEqual)(previousUserTraits, currentTraits)) {
      const updates = (0, _lodash.pickBy)(currentTraits, (v, k) => !(0, _lodash.isEqual)(previousUserTraits[k], v));
      this.store.updateState({
        previousUserTraits: currentTraits
      });
      return updates;
    }
    return null;
  }

  /**
   * Returns a new object of all valid user traits. For dates, we transform them into ISO-8601 timestamp strings.
   *
   * @see {@link https://segment.com/docs/connections/spec/common/#timestamps}
   * @param {object} userTraits
   * @returns {object}
   */
  _buildValidTraits(userTraits) {
    return Object.entries(userTraits).reduce((validTraits, [key, value]) => {
      if (this._isValidTraitDate(value)) {
        validTraits[key] = value.toISOString();
      } else if (this._isValidTrait(value)) {
        validTraits[key] = value;
      } else {
        console.warn(`MetaMetricsController: "${key}" value is not a valid trait type`);
      }
      return validTraits;
    }, {});
  }
  /**
   * Returns the number of unique NFT addresses the user
   * possesses across all networks and accounts.
   *
   * @param {object} allNfts
   * @returns {number}
   */
  _getAllUniqueNFTAddressesLength(allNfts = {}) {
    const allNFTAddresses = this._getAllNFTsFlattened(allNfts).map(nft => nft.address);
    const uniqueAddresses = new Set(allNFTAddresses);
    return uniqueAddresses.size;
  }

  /**
   * @param {object} metamaskState
   * @returns number of unique token addresses
   */
  _getNumberOfTokens(metamaskState) {
    return Object.values(metamaskState.allTokens).reduce((result, accountsByChain) => {
      return result + (0, _lodash.sum)(Object.values(accountsByChain).map(_lodash.size));
    }, 0);
  }

  /**
   * Calls segment.identify with given user traits
   *
   * @see {@link https://segment.com/docs/connections/sources/catalog/libraries/server/node/#identify}
   * @private
   * @param {object} userTraits
   */
  _identify(userTraits) {
    const {
      metaMetricsId
    } = this.state;
    if (!userTraits || Object.keys(userTraits).length === 0) {
      console.warn('MetaMetricsController#_identify: No userTraits found');
      return;
    }
    try {
      this._submitSegmentAPICall('identify', {
        userId: metaMetricsId,
        traits: userTraits
      });
    } catch (err) {
      this._captureException(err);
    }
  }

  /**
   * Validates the trait value. Segment accepts any data type. We are adding validation here to
   * support data types for our Segment destination(s) e.g. MixPanel
   *
   * @param {*} value
   * @returns {boolean}
   */
  _isValidTrait(value) {
    const type = typeof value;
    return type === 'string' || type === 'boolean' || type === 'number' || this._isValidTraitArray(value) || this._isValidTraitDate(value);
  }
  /**
   * Perform validation on the payload and update the id type to use before
   * sending to Segment. Also examines the options to route and handle the
   * event appropriately.
   *
   * @private
   * @param {SegmentEventPayload} payload - properties to attach to event
   * @param {MetaMetricsEventOptions} [options] - options for routing and
   *  handling the event
   * @returns {Promise<void>}
   */
  _track(payload, options) {
    const {
      isOptIn,
      metaMetricsId: metaMetricsIdOverride,
      matomoEvent,
      flushImmediately
    } = options || {};
    let idType = 'userId';
    let idValue = this.state.metaMetricsId;
    let excludeMetaMetricsId = (options === null || options === void 0 ? void 0 : options.excludeMetaMetricsId) ?? false;
    // This is carried over from the old implementation, and will likely need
    // to be updated to work with the new tracking plan. I think we should use
    // a config setting for this instead of trying to match the event name
    const isSendFlow = Boolean(payload.event.match(/^send|^confirm/iu));
    if (isSendFlow) {
      excludeMetaMetricsId = true;
    }
    // If we are tracking sensitive data we will always use the anonymousId
    // property as well as our METAMETRICS_ANONYMOUS_ID. This prevents us from
    // associating potentially identifiable information with a specific id.
    // During the opt in flow we will track all events, but do so with the
    // anonymous id. The one exception to that rule is after the user opts in
    // to MetaMetrics. When that happens we receive back the user's new
    // MetaMetrics id before it is fully persisted to state. To avoid a race
    // condition we explicitly pass the new id to the track method. In that
    // case we will track the opt in event to the user's id. In all other cases
    // we use the metaMetricsId from state.
    if (excludeMetaMetricsId || isOptIn && !metaMetricsIdOverride) {
      idType = 'anonymousId';
      idValue = _metametrics.METAMETRICS_ANONYMOUS_ID;
    } else if (isOptIn && metaMetricsIdOverride) {
      idValue = metaMetricsIdOverride;
    }
    payload[idType] = idValue;

    // If this is an event on the old matomo schema, add a key to the payload
    // to designate it as such
    if (matomoEvent === true) {
      payload.properties.legacy_event = true;
    }

    // Promises will only resolve when the event is sent to segment. For any
    // event that relies on this promise being fulfilled before performing UI
    // updates, or otherwise delaying user interaction, supply the
    // 'flushImmediately' flag to the trackEvent method.
    return new Promise((resolve, reject) => {
      const callback = err => {
        if (err) {
          // The error that segment gives us has some manipulation done to it
          // that seemingly breaks with lockdown enabled. Creating a new error
          // here prevents the system from freezing when the network request to
          // segment fails for any reason.
          const safeError = new Error(err.message);
          safeError.stack = err.stack;
          return reject(safeError);
        }
        return resolve();
      };
      this._submitSegmentAPICall('track', payload, callback);
      if (flushImmediately) {
        this.segment.flush();
      }
    });
  }

  // Method below submits the request to analytics SDK.
  // It will also add event to controller store
  // and pass a callback to remove it from store once request is submitted to segment
  // Saving segmentApiCalls in controller store in MV3 ensures that events are tracked
  // even if service worker terminates before events are submiteed to segment.
  _submitSegmentAPICall(eventType, payload, callback) {
    const {
      metaMetricsId,
      participateInMetaMetrics
    } = this.state;
    if (!participateInMetaMetrics || !metaMetricsId) {
      return;
    }
    const messageId = payload.messageId || (0, _util.generateRandomId)();
    let timestamp = new Date();
    if (payload.timestamp) {
      const payloadDate = new Date(payload.timestamp);
      if ((0, _util.isValidDate)(payloadDate)) {
        timestamp = payloadDate;
      }
    }
    const modifiedPayload = {
      ...payload,
      messageId,
      timestamp
    };
    this.store.updateState({
      segmentApiCalls: {
        ...this.store.getState().segmentApiCalls,
        [messageId]: {
          eventType,
          payload: {
            ...modifiedPayload,
            timestamp: modifiedPayload.timestamp.toString()
          }
        }
      }
    });
    const modifiedCallback = result => {
      const {
        segmentApiCalls
      } = this.store.getState();
      delete segmentApiCalls[messageId];
      this.store.updateState({
        segmentApiCalls
      });
      return callback === null || callback === void 0 ? void 0 : callback(result);
    };
    this.segment[eventType](modifiedPayload, modifiedCallback);
  }
}
exports.default = MetaMetricsController;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\metametrics.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\network\\create-network-client.ts", {"../../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../../shared/constants/time":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\time.ts","@metamask/eth-json-rpc-infura":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\eth-json-rpc-infura\\dist\\index.js","@metamask/eth-json-rpc-middleware":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\eth-json-rpc-middleware\\dist\\index.js","@metamask/eth-json-rpc-provider":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\eth-json-rpc-provider\\dist\\index.js","eth-block-tracker/dist":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-block-tracker\\dist\\index.js","json-rpc-engine":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\json-rpc-engine\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cnetwork%5Ccreate-network-client.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NetworkClientType = void 0;
exports.createNetworkClient = createNetworkClient;
var _jsonRpcEngine = require("json-rpc-engine");
var _ethJsonRpcMiddleware = require("@metamask/eth-json-rpc-middleware");
var _ethJsonRpcProvider = require("@metamask/eth-json-rpc-provider");
var _ethJsonRpcInfura = require("@metamask/eth-json-rpc-infura");
var _dist = require("eth-block-tracker/dist");
var _time = require("../../../../shared/constants/time");
var _network = require("../../../../shared/constants/network");
let NetworkClientType = /*#__PURE__*/function (NetworkClientType) {
  NetworkClientType["Custom"] = "custom";
  NetworkClientType["Infura"] = "infura";
  return NetworkClientType;
}({});
exports.NetworkClientType = NetworkClientType;
/**
 * Create a JSON RPC network client for a specific network.
 *
 * @param networkConfig - The network configuration.
 * @returns
 */
function createNetworkClient(networkConfig) {
  const rpcApiMiddleware = networkConfig.type === NetworkClientType.Infura ? (0, _ethJsonRpcInfura.createInfuraMiddleware)({
    network: networkConfig.network,
    projectId: networkConfig.infuraProjectId,
    maxAttempts: 5,
    source: 'metamask'
  }) : (0, _ethJsonRpcMiddleware.createFetchMiddleware)({
    btoa: global.btoa,
    fetch: global.fetch,
    rpcUrl: networkConfig.rpcUrl
  });
  const rpcProvider = (0, _ethJsonRpcProvider.providerFromMiddleware)(rpcApiMiddleware);
  const blockTrackerOpts = false && networkConfig.type === 'custom' ? {
    pollingInterval: _time.SECOND
  } : {};
  const blockTracker = new _dist.PollingBlockTracker({
    ...blockTrackerOpts,
    provider: rpcProvider
  });
  const networkMiddleware = networkConfig.type === NetworkClientType.Infura ? createInfuraNetworkMiddleware({
    blockTracker,
    network: networkConfig.network,
    rpcProvider,
    rpcApiMiddleware
  }) : createCustomNetworkMiddleware({
    blockTracker,
    chainId: networkConfig.chainId,
    rpcApiMiddleware
  });
  const engine = new _jsonRpcEngine.JsonRpcEngine();
  engine.push(networkMiddleware);
  const provider = (0, _ethJsonRpcProvider.providerFromEngine)(engine);
  return {
    provider,
    blockTracker
  };
}
function createInfuraNetworkMiddleware({
  blockTracker,
  network,
  rpcProvider,
  rpcApiMiddleware
}) {
  return (0, _jsonRpcEngine.mergeMiddleware)([createNetworkAndChainIdMiddleware({
    network
  }), (0, _ethJsonRpcMiddleware.createBlockCacheMiddleware)({
    blockTracker
  }), (0, _ethJsonRpcMiddleware.createInflightCacheMiddleware)(), (0, _ethJsonRpcMiddleware.createBlockRefMiddleware)({
    blockTracker,
    provider: rpcProvider
  }), (0, _ethJsonRpcMiddleware.createRetryOnEmptyMiddleware)({
    blockTracker,
    provider: rpcProvider
  }), (0, _ethJsonRpcMiddleware.createBlockTrackerInspectorMiddleware)({
    blockTracker
  }), rpcApiMiddleware]);
}
function createNetworkAndChainIdMiddleware({
  network
}) {
  if (!_network.BUILT_IN_INFURA_NETWORKS[network]) {
    throw new Error(`createInfuraClient - unknown network "${network}"`);
  }
  const {
    chainId,
    networkId
  } = _network.BUILT_IN_INFURA_NETWORKS[network];
  return (0, _jsonRpcEngine.createScaffoldMiddleware)({
    eth_chainId: chainId,
    net_version: networkId
  });
}
const createChainIdMiddleware = chainId => {
  return (req, res, next, end) => {
    if (req.method === 'eth_chainId') {
      res.result = chainId;
      return end();
    }
    return next();
  };
};
function createCustomNetworkMiddleware({
  blockTracker,
  chainId,
  rpcApiMiddleware
}) {
  const testMiddlewares = false ? [createEstimateGasDelayTestMiddleware()] : [];
  return (0, _jsonRpcEngine.mergeMiddleware)([...testMiddlewares, createChainIdMiddleware(chainId), (0, _ethJsonRpcMiddleware.createBlockRefRewriteMiddleware)({
    blockTracker
  }), (0, _ethJsonRpcMiddleware.createBlockCacheMiddleware)({
    blockTracker
  }), (0, _ethJsonRpcMiddleware.createInflightCacheMiddleware)(), (0, _ethJsonRpcMiddleware.createBlockTrackerInspectorMiddleware)({
    blockTracker
  }), rpcApiMiddleware]);
}

/**
 * For use in tests only.
 * Adds a delay to `eth_estimateGas` calls.
 */
function createEstimateGasDelayTestMiddleware() {
  return (0, _jsonRpcEngine.createAsyncMiddleware)(async (req, _, next) => {
    if (req.method === 'eth_estimateGas') {
      await new Promise(resolve => setTimeout(resolve, _time.SECOND * 2));
    }
    return next();
  });
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\network\\create-network-client.ts",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\network\\index.ts", {"./network-controller":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\network\\network-controller.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cnetwork%5Cindex.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _networkController = require("./network-controller");
Object.keys(_networkController).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _networkController[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _networkController[key];
    }
  });
});

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\network\\index.ts",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\network\\network-controller.ts", {"../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../../shared/modules/conversion.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\conversion.utils.ts","../../../../shared/modules/error":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\error.ts","../../../../shared/modules/network.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\network.utils.ts","./create-network-client":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\network\\create-network-client.ts","@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js","@metamask/swappable-obj-proxy":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\swappable-obj-proxy\\dist\\index.js","@metamask/utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\utils\\dist\\index.js","assert":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\browserify\\node_modules\\assert\\assert.js","eth-query":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-query\\index.js","eth-rpc-errors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-rpc-errors\\dist\\index.js","events":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\browserify\\node_modules\\events\\events.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js","uuid":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\uuid\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cnetwork%5Cnetwork-controller.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NetworkControllerEventType = exports.NetworkController = void 0;
var _assert = require("assert");
var _events = _interopRequireDefault(require("events"));
var _obsStore = require("@metamask/obs-store");
var _loglevel = _interopRequireDefault(require("loglevel"));
var _swappableObjProxy = require("@metamask/swappable-obj-proxy");
var _ethQuery = _interopRequireDefault(require("eth-query"));
var _uuid = require("uuid");
var _utils = require("@metamask/utils");
var _ethRpcErrors = require("eth-rpc-errors");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _network = require("../../../../shared/constants/network");
var _network2 = require("../../../../shared/modules/network.utils");
var _metametrics = require("../../../../shared/constants/metametrics");
var _error = require("../../../../shared/modules/error");
var _createNetworkClient = require("./create-network-client");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
/**
 * The name of NetworkController.
 */
const name = 'NetworkController';

/**
 * A block header object that `eth_getBlockByNumber` returns. Note that this
 * type does not specify all of the properties present within the block header;
 * within NetworkController, we are only interested in `baseFeePerGas`.
 */

/**
 * Encodes a few pieces of information:
 *
 * - Whether or not a provider is configured for an Infura network or a
 * non-Infura network.
 * - If an Infura network, then which network.
 * - If a non-Infura network, then whether the network exists locally or
 * remotely.
 *
 * Primarily used to build the network client and check the availability of a
 * network.
 */

/**
 * The network ID of a network.
 */

/**
 * The ID of a network configuration.
 */

/**
 * The chain ID of a network.
 */
/**
 * The set of event types that NetworkController can publish via its messenger.
 */
let NetworkControllerEventType = /*#__PURE__*/function (NetworkControllerEventType) {
  NetworkControllerEventType["NetworkDidChange"] = "NetworkController:networkDidChange";
  NetworkControllerEventType["NetworkWillChange"] = "NetworkController:networkWillChange";
  NetworkControllerEventType["InfuraIsBlocked"] = "NetworkController:infuraIsBlocked";
  NetworkControllerEventType["InfuraIsUnblocked"] = "NetworkController:infuraIsUnblocked";
  return NetworkControllerEventType;
}({});
/**
 * `networkWillChange` is published when the current network is about to be
 * switched, but the new provider has not been created and no state changes have
 * occurred yet.
 */
/**
 * `networkDidChange` is published after a provider has been created for a newly
 * switched network (but before the network has been confirmed to be available).
 */
/**
 * `infuraIsBlocked` is published after the network is switched to an Infura
 * network, but when Infura returns an error blocking the user based on their
 * location.
 */
/**
 * `infuraIsBlocked` is published either after the network is switched to an
 * Infura network and Infura does not return an error blocking the user based on
 * their location, or the network is switched to a non-Infura network.
 */
/**
 * The set of events that the NetworkController messenger can publish.
 */
/**
 * The messenger that the NetworkController uses to publish events.
 */
/**
 * Information used to set up the middleware stack for a particular kind of
 * network. Currently has overlap with `NetworkConfiguration`, although the
 * two will be merged down the road.
 */
/**
 * The contents of the `networkId` store.
 */
/**
 * Information about the network not held by any other part of state. Currently
 * only used to capture whether a network supports EIP-1559.
 */
/**
 * A "network configuration" represents connection data directly provided by
 * users via the wallet UI for a custom network (we already have this
 * information for networks that come pre-shipped with the wallet). Ultimately
 * used to set up the middleware stack so that the wallet can make requests to
 * the network. Currently has overlap with `ProviderConfiguration`, although the
 * two will be merged down the road.
 */
/**
 * A set of network configurations, keyed by ID.
 */
/**
 * The state that NetworkController holds after combining its individual stores.
 */
/**
 * The options that NetworkController takes.
 */
exports.NetworkControllerEventType = NetworkControllerEventType;
/**
 * Type guard for determining whether the given value is an error object with a
 * `code` property, such as an instance of Error.
 *
 * TODO: Move this to @metamask/utils
 *
 * @param error - The object to check.
 * @returns True if `error` has a `code`, false otherwise.
 */
function isErrorWithCode(error) {
  return typeof error === 'object' && error !== null && 'code' in error;
}

/**
 * Convert the given value into a valid network ID. The ID is accepted
 * as either a number, a decimal string, or a 0x-prefixed hex string.
 *
 * @param value - The network ID to convert, in an unknown format.
 * @returns A valid network ID (as a decimal string)
 * @throws If the given value cannot be safely parsed.
 */
function convertNetworkId(value) {
  if (typeof value === 'number' && !Number.isNaN(value)) {
    return `${value}`;
  } else if ((0, _utils.isStrictHexString)(value)) {
    return (0, _conversion.hexToDecimal)(value);
  } else if (typeof value === 'string' && /^\d+$/u.test(value)) {
    return value;
  }
  throw new Error(`Cannot parse as a valid network ID: '${value}'`);
}

/**
 * Builds the default provider config used to initialize the network controller.
 */
function buildDefaultProviderConfigState() {
  if (false) {
    return {
      type: _network.NETWORK_TYPES.RPC,
      rpcUrl: 'http://localhost:8545',
      chainId: '0x539',
      nickname: 'Localhost 8545',
      ticker: 'ETH'
    };
  } else if (true || "development" === 'test') {
    return {
      type: _network.NETWORK_TYPES.GOERLI,
      chainId: _network.CHAIN_IDS.GOERLI,
      ticker: _network.TEST_NETWORK_TICKER_MAP[_network.NETWORK_TYPES.GOERLI]
    };
  }
  return {
    type: _network.NETWORK_TYPES.MAINNET,
    chainId: _network.CHAIN_IDS.MAINNET,
    ticker: 'ETH'
  };
}

/**
 * Builds the default network ID state used to initialize the network
 * controller.
 */
function buildDefaultNetworkIdState() {
  return null;
}

/**
 * Builds the default network status state used to initialize the network
 * controller.
 */
function buildDefaultNetworkStatusState() {
  return _network.NetworkStatus.Unknown;
}

/**
 * Builds the default network details state used to initialize the
 * network controller.
 */
function buildDefaultNetworkDetailsState() {
  return {
    EIPS: {
      1559: undefined
    }
  };
}

/**
 * Builds the default network configurations state used to initialize the
 * network controller.
 */
function buildDefaultNetworkConfigurationsState() {
  return {};
}

/**
 * Builds the default state for the network controller.
 *
 * @returns The default network controller state.
 */
function buildDefaultState() {
  return {
    providerConfig: buildDefaultProviderConfigState(),
    networkId: buildDefaultNetworkIdState(),
    networkStatus: buildDefaultNetworkStatusState(),
    networkDetails: buildDefaultNetworkDetailsState(),
    networkConfigurations: buildDefaultNetworkConfigurationsState()
  };
}

/**
 * Returns whether the given argument is a type that our Infura middleware
 * recognizes. We can't calculate this inline because the usual type of `type`,
 * which we get from the provider config, is not a subset of the type of
 * `INFURA_PROVIDER_TYPES`, but rather a superset, and therefore we cannot make
 * a proper comparison without TypeScript complaining. However, if we downcast
 * both variables, then we are able to achieve this. As a bonus, this function
 * also types the given argument as a `BuiltInInfuraNetwork` assuming that the
 * check succeeds.
 *
 * @param type - A type to compare.
 * @returns True or false, depending on whether the given type is one that our
 * Infura middleware recognizes.
 */
function isInfuraProviderType(type) {
  const infuraProviderTypes = _network.INFURA_PROVIDER_TYPES;
  return infuraProviderTypes.includes(type);
}

/**
 * The network controller creates and manages the "provider" object which allows
 * our code and external dapps to make requests to a network. The requests are
 * filtered through a set of middleware (provided by
 * [`eth-json-rpc-middleware`][1]) which not only performs the HTTP request to
 * the appropriate RPC endpoint but also uses caching to limit duplicate
 * requests to Infura and smoothens interactions with the blockchain in general.
 *
 * [1]: https://github.com/MetaMask/eth-json-rpc-middleware
 */
var _messenger = /*#__PURE__*/new WeakMap();
var _previousProviderConfig = /*#__PURE__*/new WeakMap();
var _provider = /*#__PURE__*/new WeakMap();
var _blockTracker = /*#__PURE__*/new WeakMap();
var _providerProxy = /*#__PURE__*/new WeakMap();
var _blockTrackerProxy = /*#__PURE__*/new WeakMap();
var _infuraProjectId = /*#__PURE__*/new WeakMap();
var _trackMetaMetricsEvent = /*#__PURE__*/new WeakMap();
var _getLatestBlock = /*#__PURE__*/new WeakSet();
var _getNetworkId = /*#__PURE__*/new WeakSet();
var _resetNetworkId = /*#__PURE__*/new WeakSet();
var _resetNetworkStatus = /*#__PURE__*/new WeakSet();
var _resetNetworkDetails = /*#__PURE__*/new WeakSet();
var _setProviderConfig = /*#__PURE__*/new WeakSet();
var _determineEIP1559Compatibility = /*#__PURE__*/new WeakSet();
var _switchNetwork = /*#__PURE__*/new WeakSet();
var _configureProvider = /*#__PURE__*/new WeakSet();
var _configureInfuraProvider = /*#__PURE__*/new WeakSet();
var _configureStandardProvider = /*#__PURE__*/new WeakSet();
var _setProviderAndBlockTracker = /*#__PURE__*/new WeakSet();
class NetworkController extends _events.default {
  /**
   * Constructs a network controller.
   *
   * @param options - Options for this constructor.
   * @param options.messenger - The NetworkController messenger.
   * @param options.state - Initial controller state.
   * @param options.infuraProjectId - The Infura project ID.
   * @param options.trackMetaMetricsEvent - A method to forward events to the
   * {@link MetaMetricsController}.
   */
  constructor({
    messenger,
    state = {},
    infuraProjectId: _infuraProjectId2,
    trackMetaMetricsEvent
  }) {
    super();
    /**
     * Given a provider and a block tracker, updates any proxies pointing to
     * these objects that have been previously set, or initializes any proxies
     * that have not been previously set.
     *
     * @param args - The arguments.
     * @param args.provider - The provider.
     * @param args.blockTracker - The block tracker.
     */
    _classPrivateMethodInitSpec(this, _setProviderAndBlockTracker);
    /**
     * Creates a network client (a stack of middleware along with a provider and
     * block tracker) to talk to a non-Infura-supported network.
     *
     * @param rpcUrl - The URL of the RPC endpoint that represents the network.
     * @param chainId - The chain ID of the network (as per EIP-155).
     */
    _classPrivateMethodInitSpec(this, _configureStandardProvider);
    /**
     * Creates a network client (a stack of middleware along with a provider and
     * block tracker) to talk to an Infura-supported network.
     *
     * @param args - The arguments.
     * @param args.type - The shortname of the Infura network (see
     * {@link NETWORK_TYPES}).
     * @param args.infuraProjectId - An Infura API key. ("Project ID" is a
     * now-obsolete term we've retained for backward compatibility.)
     */
    _classPrivateMethodInitSpec(this, _configureInfuraProvider);
    /**
     * Creates a network client (a stack of middleware along with a provider and
     * block tracker) to talk to a network.
     *
     * @param args - The arguments.
     * @param args.type - The shortname of an Infura-supported network (see
     * {@link NETWORK_TYPES}).
     * @param args.rpcUrl - The URL of the RPC endpoint that represents the
     * network. Only used for non-Infura networks.
     * @param args.chainId - The chain ID of the network (as per EIP-155). Only
     * used for non-Infura-supported networks (as we already know the chain ID of
     * any Infura-supported network).
     * @throws if the `type` if not a known Infura-supported network.
     */
    _classPrivateMethodInitSpec(this, _configureProvider);
    /**
     * Executes a series of steps to change the current network:
     *
     * 1. Notifies subscribers that the network is about to change.
     * 2. Clears state associated with the current network.
     * 3. Creates a new network client along with a provider for the desired
     * network.
     * 4. Notifies subscribes that the network has changed.
     *
     * @param providerConfig - The provider configuration object that specifies
     * the new network.
     */
    _classPrivateMethodInitSpec(this, _switchNetwork);
    /**
     * Retrieves the latest block from the currently selected network; if the
     * block has a `baseFeePerGas` property, then we know that the network
     * supports EIP-1559; otherwise it doesn't.
     *
     * @param provider - A provider, which is guaranteed to be available.
     * @returns A promise that resolves to true if the network supports EIP-1559
     * and false otherwise.
     */
    _classPrivateMethodInitSpec(this, _determineEIP1559Compatibility);
    /**
     * Stores the given provider configuration representing a network in state,
     * then uses it to create a new provider for that network.
     *
     * @param providerConfig - The provider configuration.
     */
    _classPrivateMethodInitSpec(this, _setProviderConfig);
    /**
     * Clears details previously stored for the network.
     */
    _classPrivateMethodInitSpec(this, _resetNetworkDetails);
    /**
     * Resets network status to the default ("unknown").
     */
    _classPrivateMethodInitSpec(this, _resetNetworkStatus);
    /**
     * Clears the stored network ID.
     */
    _classPrivateMethodInitSpec(this, _resetNetworkId);
    /**
     * Fetches the network ID for the network.
     *
     * @param provider - A provider, which is guaranteed to be available.
     * @returns A promise that either resolves to the network ID, or rejects with
     * an error.
     */
    _classPrivateMethodInitSpec(this, _getNetworkId);
    /**
     * Fetches the latest block for the network.
     *
     * @param provider - A provider, which is guaranteed to be available.
     * @returns A promise that either resolves to the block header or null if
     * there is no latest block, or rejects with an error.
     */
    _classPrivateMethodInitSpec(this, _getLatestBlock);
    /**
     * The messenger that NetworkController uses to publish events.
     */
    _classPrivateFieldInitSpec(this, _messenger, {
      writable: true,
      value: void 0
    });
    /**
     * Observable store containing the provider configuration for the previously
     * configured network.
     */
    _classPrivateFieldInitSpec(this, _previousProviderConfig, {
      writable: true,
      value: void 0
    });
    /**
     * Observable store containing a combination of data from all of the
     * individual stores.
     */
    _defineProperty(this, "store", void 0);
    _classPrivateFieldInitSpec(this, _provider, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _blockTracker, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _providerProxy, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _blockTrackerProxy, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _infuraProjectId, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _trackMetaMetricsEvent, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldSet(this, _messenger, messenger);
    this.store = new _obsStore.ObservableStore({
      ...buildDefaultState(),
      ...state
    });
    _classPrivateFieldSet(this, _previousProviderConfig, this.store.getState().providerConfig);

    // provider and block tracker
    _classPrivateFieldSet(this, _provider, null);
    _classPrivateFieldSet(this, _blockTracker, null);

    // provider and block tracker proxies - because the network changes
    _classPrivateFieldSet(this, _providerProxy, null);
    _classPrivateFieldSet(this, _blockTrackerProxy, null);
    if (!_infuraProjectId2 || typeof _infuraProjectId2 !== 'string') {
      throw new Error('Invalid Infura project ID');
    }
    _classPrivateFieldSet(this, _infuraProjectId, _infuraProjectId2);
    _classPrivateFieldSet(this, _trackMetaMetricsEvent, trackMetaMetricsEvent);
  }

  /**
   * Deactivates the controller, stopping any ongoing polling.
   *
   * In-progress requests will not be aborted.
   */
  async destroy() {
    var _classPrivateFieldGet2;
    await ((_classPrivateFieldGet2 = _classPrivateFieldGet(this, _blockTracker)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.destroy());
  }

  /**
   * Creates the provider and block tracker for the configured network,
   * using the provider to gather details about the network.
   */
  async initializeProvider() {
    const {
      type,
      rpcUrl,
      chainId
    } = this.store.getState().providerConfig;
    _classPrivateMethodGet(this, _configureProvider, _configureProvider2).call(this, {
      type,
      rpcUrl,
      chainId
    });
    await this.lookupNetwork();
  }

  /**
   * Returns the proxies wrapping the currently set provider and block tracker.
   */
  getProviderAndBlockTracker() {
    const provider = _classPrivateFieldGet(this, _providerProxy);
    const blockTracker = _classPrivateFieldGet(this, _blockTrackerProxy);
    return {
      provider,
      blockTracker
    };
  }

  /**
   * Determines whether the network supports EIP-1559 by checking whether the
   * latest block has a `baseFeePerGas` property, then updates state
   * appropriately.
   *
   * @returns A promise that resolves to true if the network supports EIP-1559
   * and false otherwise.
   */
  async getEIP1559Compatibility() {
    const {
      EIPS
    } = this.store.getState().networkDetails;
    // NOTE: This isn't necessary anymore because the block cache middleware
    // already prevents duplicate requests from taking place
    if (EIPS[1559] !== undefined) {
      return EIPS[1559];
    }
    const {
      provider
    } = this.getProviderAndBlockTracker();
    if (!provider) {
      // Really we should throw an error if a provider hasn't been initialized
      // yet, but that might have undesirable repercussions, so return false for
      // now
      return false;
    }
    const supportsEIP1559 = await _classPrivateMethodGet(this, _determineEIP1559Compatibility, _determineEIP1559Compatibility2).call(this, provider);
    const {
      networkDetails
    } = this.store.getState();
    this.store.updateState({
      networkDetails: {
        ...networkDetails,
        EIPS: {
          ...networkDetails.EIPS,
          1559: supportsEIP1559
        }
      }
    });
    return supportsEIP1559;
  }

  /**
   * Performs side effects after switching to a network. If the network is
   * available, updates the network state with the network ID of the network and
   * stores whether the network supports EIP-1559; otherwise clears said
   * information about the network that may have been previously stored.
   *
   * @fires infuraIsBlocked if the network is Infura-supported and is blocking
   * requests.
   * @fires infuraIsUnblocked if the network is Infura-supported and is not
   * blocking requests, or if the network is not Infura-supported.
   */
  async lookupNetwork() {
    const {
      chainId,
      type
    } = this.store.getState().providerConfig;
    const {
      provider
    } = this.getProviderAndBlockTracker();
    let networkChanged = false;
    let networkId = null;
    let supportsEIP1559 = false;
    let networkStatus;
    if (provider === null) {
      _loglevel.default.warn('NetworkController - lookupNetwork aborted due to missing provider');
      return;
    }
    if (!chainId) {
      _loglevel.default.warn('NetworkController - lookupNetwork aborted due to missing chainId');
      _classPrivateMethodGet(this, _resetNetworkId, _resetNetworkId2).call(this);
      _classPrivateMethodGet(this, _resetNetworkStatus, _resetNetworkStatus2).call(this);
      _classPrivateMethodGet(this, _resetNetworkDetails, _resetNetworkDetails2).call(this);
      return;
    }
    const isInfura = isInfuraProviderType(type);
    const listener = () => {
      networkChanged = true;
      _classPrivateFieldGet(this, _messenger).unsubscribe(NetworkControllerEventType.NetworkDidChange, listener);
    };
    _classPrivateFieldGet(this, _messenger).subscribe(NetworkControllerEventType.NetworkDidChange, listener);
    try {
      const results = await Promise.all([_classPrivateMethodGet(this, _getNetworkId, _getNetworkId2).call(this, provider), _classPrivateMethodGet(this, _determineEIP1559Compatibility, _determineEIP1559Compatibility2).call(this, provider)]);
      const possibleNetworkId = results[0];
      networkId = convertNetworkId(possibleNetworkId);
      supportsEIP1559 = results[1];
      networkStatus = _network.NetworkStatus.Available;
    } catch (error) {
      if (isErrorWithCode(error)) {
        let responseBody;
        if (isInfura && (0, _error.isErrorWithMessage)(error)) {
          try {
            responseBody = JSON.parse(error.message);
          } catch {
            // error.message must not be JSON
          }
        }
        if ((0, _utils.isPlainObject)(responseBody) && responseBody.error === _network.INFURA_BLOCKED_KEY) {
          networkStatus = _network.NetworkStatus.Blocked;
        } else if (error.code === _ethRpcErrors.errorCodes.rpc.internal) {
          networkStatus = _network.NetworkStatus.Unknown;
        } else {
          networkStatus = _network.NetworkStatus.Unavailable;
        }
      } else {
        _loglevel.default.warn('NetworkController - could not determine network status', error);
        networkStatus = _network.NetworkStatus.Unknown;
      }
    }
    if (networkChanged) {
      // If the network has changed, then `lookupNetwork` either has been or is
      // in the process of being called, so we don't need to go further.
      return;
    }
    _classPrivateFieldGet(this, _messenger).unsubscribe(NetworkControllerEventType.NetworkDidChange, listener);
    this.store.updateState({
      networkStatus
    });
    if (networkStatus === _network.NetworkStatus.Available) {
      const {
        networkDetails
      } = this.store.getState();
      this.store.updateState({
        networkId,
        networkDetails: {
          ...networkDetails,
          EIPS: {
            ...networkDetails.EIPS,
            1559: supportsEIP1559
          }
        }
      });
    } else {
      _classPrivateMethodGet(this, _resetNetworkId, _resetNetworkId2).call(this);
      _classPrivateMethodGet(this, _resetNetworkDetails, _resetNetworkDetails2).call(this);
    }
    if (isInfura) {
      if (networkStatus === _network.NetworkStatus.Available) {
        _classPrivateFieldGet(this, _messenger).publish(NetworkControllerEventType.InfuraIsUnblocked);
      } else if (networkStatus === _network.NetworkStatus.Blocked) {
        _classPrivateFieldGet(this, _messenger).publish(NetworkControllerEventType.InfuraIsBlocked);
      }
    } else {
      // Always publish infuraIsUnblocked regardless of network status to
      // prevent consumers from being stuck in a blocked state if they were
      // previously connected to an Infura network that was blocked
      _classPrivateFieldGet(this, _messenger).publish(NetworkControllerEventType.InfuraIsUnblocked);
    }
  }

  /**
   * Switches to the network specified by a network configuration.
   *
   * @param networkConfigurationId - The unique identifier that refers to a
   * previously added network configuration.
   * @returns The URL of the RPC endpoint representing the newly switched
   * network.
   */
  async setActiveNetwork(networkConfigurationId) {
    const targetNetwork = this.store.getState().networkConfigurations[networkConfigurationId];
    if (!targetNetwork) {
      throw new Error(`networkConfigurationId ${networkConfigurationId} does not match a configured networkConfiguration`);
    }
    await _classPrivateMethodGet(this, _setProviderConfig, _setProviderConfig2).call(this, {
      type: _network.NETWORK_TYPES.RPC,
      ...targetNetwork
    });
    return targetNetwork.rpcUrl;
  }

  /**
   * Switches to an Infura-supported network.
   *
   * @param type - The shortname of the network.
   * @throws if the `type` is "rpc" or if it is not a known Infura-supported
   * network.
   */
  async setProviderType(type) {
    _assert.strict.notStrictEqual(type, _network.NETWORK_TYPES.RPC, `NetworkController - cannot call "setProviderType" with type "${_network.NETWORK_TYPES.RPC}". Use "setActiveNetwork"`);
    _assert.strict.ok(isInfuraProviderType(type), `Unknown Infura provider type "${type}".`);
    const network = _network.BUILT_IN_INFURA_NETWORKS[type];
    await _classPrivateMethodGet(this, _setProviderConfig, _setProviderConfig2).call(this, {
      type,
      rpcUrl: undefined,
      chainId: network.chainId,
      ticker: 'ticker' in network ? network.ticker : 'ETH',
      nickname: undefined,
      rpcPrefs: {
        blockExplorerUrl: network.blockExplorerUrl
      }
    });
  }

  /**
   * Re-initializes the provider and block tracker for the current network.
   */
  async resetConnection() {
    await _classPrivateMethodGet(this, _setProviderConfig, _setProviderConfig2).call(this, this.store.getState().providerConfig);
  }

  /**
   * Switches to the previous network, assuming that the current network is
   * different than the initial network (if it is, then this is equivalent to
   * calling `resetConnection`).
   */
  async rollbackToPreviousProvider() {
    const config = _classPrivateFieldGet(this, _previousProviderConfig);
    this.store.updateState({
      providerConfig: config
    });
    await _classPrivateMethodGet(this, _switchNetwork, _switchNetwork2).call(this, config);
  }
  /**
   * Network Configuration management functions
   */
  /**
   * Updates an existing network configuration matching the same RPC URL as the
   * given network configuration; otherwise adds the network configuration.
   * Following the upsert, the `trackMetaMetricsEvent` callback specified
   * via the NetworkController constructor will be called to (presumably) create
   * a MetaMetrics event.
   *
   * @param networkConfiguration - The network configuration to upsert.
   * @param networkConfiguration.chainId - The chain ID of the network as per
   * EIP-155.
   * @param networkConfiguration.ticker - The shortname of the currency used by
   * the network.
   * @param networkConfiguration.nickname - The user-customizable name of the
   * network.
   * @param networkConfiguration.rpcPrefs - User-customizable details for the
   * network.
   * @param networkConfiguration.rpcUrl - The URL of the RPC endpoint.
   * @param additionalArgs - Additional arguments.
   * @param additionalArgs.setActive - Switches to the network specified by
   * the given network configuration following the upsert.
   * @param additionalArgs.referrer - The site from which the call originated,
   * or 'metamask' for internal calls; used for event metrics.
   * @param additionalArgs.source - Where the metric event originated (i.e. from
   * a dapp or from the network form); used for event metrics.
   * @throws if the `chainID` does not match EIP-155 or is too large.
   * @throws if `rpcUrl` is not a valid URL.
   * @returns The ID for the added or updated network configuration.
   */
  async upsertNetworkConfiguration({
    rpcUrl,
    chainId,
    ticker,
    nickname,
    rpcPrefs
  }, {
    setActive = false,
    referrer,
    source
  }) {
    var _Object$values$find;
    _assert.strict.ok((0, _network2.isPrefixedFormattedHexString)(chainId), `Invalid chain ID "${chainId}": invalid hex string.`);
    _assert.strict.ok((0, _network2.isSafeChainId)(parseInt(chainId, 16)), `Invalid chain ID "${chainId}": numerical value greater than max safe value.`);
    if (!rpcUrl) {
      throw new Error('An rpcUrl is required to add or update network configuration');
    }
    if (!referrer || !source) {
      throw new Error('referrer and source are required arguments for adding or updating a network configuration');
    }
    try {
      // eslint-disable-next-line no-new
      new URL(rpcUrl);
    } catch (e) {
      if ((0, _error.isErrorWithMessage)(e) && e.message.includes('Invalid URL')) {
        throw new Error('rpcUrl must be a valid URL');
      }
    }
    if (!ticker) {
      throw new Error('A ticker is required to add or update networkConfiguration');
    }
    const {
      networkConfigurations
    } = this.store.getState();
    const newNetworkConfiguration = {
      rpcUrl,
      chainId,
      ticker,
      nickname,
      rpcPrefs
    };
    const oldNetworkConfigurationId = (_Object$values$find = Object.values(networkConfigurations).find(networkConfiguration => {
      var _networkConfiguration;
      return ((_networkConfiguration = networkConfiguration.rpcUrl) === null || _networkConfiguration === void 0 ? void 0 : _networkConfiguration.toLowerCase()) === (rpcUrl === null || rpcUrl === void 0 ? void 0 : rpcUrl.toLowerCase());
    })) === null || _Object$values$find === void 0 ? void 0 : _Object$values$find.id;
    const newNetworkConfigurationId = oldNetworkConfigurationId || (0, _uuid.v4)();
    this.store.updateState({
      networkConfigurations: {
        ...networkConfigurations,
        [newNetworkConfigurationId]: {
          ...newNetworkConfiguration,
          id: newNetworkConfigurationId
        }
      }
    });
    if (!oldNetworkConfigurationId) {
      _classPrivateFieldGet(this, _trackMetaMetricsEvent).call(this, {
        event: 'Custom Network Added',
        category: _metametrics.MetaMetricsEventCategory.Network,
        referrer: {
          url: referrer
        },
        properties: {
          chain_id: chainId,
          symbol: ticker,
          source
        }
      });
    }
    if (setActive) {
      await this.setActiveNetwork(newNetworkConfigurationId);
    }
    return newNetworkConfigurationId;
  }

  /**
   * Removes a network configuration from state.
   *
   * @param networkConfigurationId - The unique id for the network configuration
   * to remove.
   */
  removeNetworkConfiguration(networkConfigurationId) {
    if (!this.store.getState().networkConfigurations[networkConfigurationId]) {
      throw new Error(`networkConfigurationId ${networkConfigurationId} does not match a configured networkConfiguration`);
    }
    const networkConfigurations = {
      ...this.store.getState().networkConfigurations
    };
    delete networkConfigurations[networkConfigurationId];
    this.store.updateState({
      networkConfigurations
    });
  }
}
exports.NetworkController = NetworkController;
function _getLatestBlock2(provider) {
  return new Promise((resolve, reject) => {
    const ethQuery = new _ethQuery.default(provider);
    ethQuery.sendAsync({
      method: 'eth_getBlockByNumber',
      params: ['latest', false]
    }, (...args) => {
      if (args[0] === null) {
        resolve(args[1]);
      } else {
        reject(args[0]);
      }
    });
  });
}
async function _getNetworkId2(provider) {
  const ethQuery = new _ethQuery.default(provider);
  return await new Promise((resolve, reject) => {
    ethQuery.sendAsync({
      method: 'net_version'
    }, (...args) => {
      if (args[0] === null) {
        resolve(args[1]);
      } else {
        reject(args[0]);
      }
    });
  });
}
function _resetNetworkId2() {
  this.store.updateState({
    networkId: buildDefaultNetworkIdState()
  });
}
function _resetNetworkStatus2() {
  this.store.updateState({
    networkStatus: buildDefaultNetworkStatusState()
  });
}
function _resetNetworkDetails2() {
  this.store.updateState({
    networkDetails: buildDefaultNetworkDetailsState()
  });
}
async function _setProviderConfig2(providerConfig) {
  _classPrivateFieldSet(this, _previousProviderConfig, this.store.getState().providerConfig);
  this.store.updateState({
    providerConfig
  });
  await _classPrivateMethodGet(this, _switchNetwork, _switchNetwork2).call(this, providerConfig);
}
async function _determineEIP1559Compatibility2(provider) {
  const latestBlock = await _classPrivateMethodGet(this, _getLatestBlock, _getLatestBlock2).call(this, provider);
  return (latestBlock === null || latestBlock === void 0 ? void 0 : latestBlock.baseFeePerGas) !== undefined;
}
async function _switchNetwork2(providerConfig) {
  _classPrivateFieldGet(this, _messenger).publish(NetworkControllerEventType.NetworkWillChange);
  _classPrivateMethodGet(this, _resetNetworkId, _resetNetworkId2).call(this);
  _classPrivateMethodGet(this, _resetNetworkStatus, _resetNetworkStatus2).call(this);
  _classPrivateMethodGet(this, _resetNetworkDetails, _resetNetworkDetails2).call(this);
  _classPrivateMethodGet(this, _configureProvider, _configureProvider2).call(this, providerConfig);
  _classPrivateFieldGet(this, _messenger).publish(NetworkControllerEventType.NetworkDidChange);
  await this.lookupNetwork();
}
function _configureProvider2({
  type,
  rpcUrl,
  chainId
}) {
  const isInfura = isInfuraProviderType(type);
  if (isInfura) {
    // infura type-based endpoints
    _classPrivateMethodGet(this, _configureInfuraProvider, _configureInfuraProvider2).call(this, {
      type,
      infuraProjectId: _classPrivateFieldGet(this, _infuraProjectId)
    });
  } else if (type === _network.NETWORK_TYPES.RPC && rpcUrl) {
    // url-based rpc endpoints
    _classPrivateMethodGet(this, _configureStandardProvider, _configureStandardProvider2).call(this, rpcUrl, chainId);
  } else {
    throw new Error(`NetworkController - #configureProvider - unknown type "${type}"`);
  }
}
function _configureInfuraProvider2({
  type,
  infuraProjectId
}) {
  _loglevel.default.info('NetworkController - #configureInfuraProvider', type);
  const {
    provider,
    blockTracker
  } = (0, _createNetworkClient.createNetworkClient)({
    network: type,
    infuraProjectId,
    type: _createNetworkClient.NetworkClientType.Infura
  });
  _classPrivateMethodGet(this, _setProviderAndBlockTracker, _setProviderAndBlockTracker2).call(this, {
    provider,
    blockTracker
  });
}
function _configureStandardProvider2(rpcUrl, chainId) {
  _loglevel.default.info('NetworkController - #configureStandardProvider', rpcUrl);
  const {
    provider,
    blockTracker
  } = (0, _createNetworkClient.createNetworkClient)({
    chainId,
    rpcUrl,
    type: _createNetworkClient.NetworkClientType.Custom
  });
  _classPrivateMethodGet(this, _setProviderAndBlockTracker, _setProviderAndBlockTracker2).call(this, {
    provider,
    blockTracker
  });
}
function _setProviderAndBlockTracker2({
  provider,
  blockTracker
}) {
  // update or initialize proxies
  if (_classPrivateFieldGet(this, _providerProxy)) {
    _classPrivateFieldGet(this, _providerProxy).setTarget(provider);
  } else {
    _classPrivateFieldSet(this, _providerProxy, (0, _swappableObjProxy.createSwappableProxy)(provider));
  }
  if (_classPrivateFieldGet(this, _blockTrackerProxy)) {
    _classPrivateFieldGet(this, _blockTrackerProxy).setTarget(blockTracker);
  } else {
    _classPrivateFieldSet(this, _blockTrackerProxy, (0, _swappableObjProxy.createEventEmitterProxy)(blockTracker, {
      eventFilter: 'skipInternal'
    }));
  }
  // set new provider and blockTracker
  _classPrivateFieldSet(this, _provider, provider);
  _classPrivateFieldSet(this, _blockTracker, blockTracker);
}


      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\network\\network-controller.ts",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\onboarding.js", {"@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Conboarding.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _obsStore = require("@metamask/obs-store");
var _loglevel = _interopRequireDefault(require("loglevel"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * @typedef {object} InitState
 * @property {boolean} seedPhraseBackedUp Indicates whether the user has completed the seed phrase backup challenge
 * @property {boolean} completedOnboarding Indicates whether the user has completed the onboarding flow
 */

/**
 * @typedef {object} OnboardingOptions
 * @property {InitState} initState The initial controller state
 */
/**
 * Controller responsible for maintaining
 * state related to onboarding
 */
class OnboardingController {
  /**
   * Creates a new controller instance
   *
   * @param {OnboardingOptions} [opts] - Controller configuration parameters
   */
  constructor(opts = {}) {
    /**
     * Registering a site as having initiated onboarding
     *
     * @param {string} location - The location of the site registering
     * @param {string} tabId - The id of the tab registering
     */
    _defineProperty(this, "registerOnboarding", async (location, tabId) => {
      if (this.store.getState().completedOnboarding) {
        _loglevel.default.debug('Ignoring registerOnboarding; user already onboarded');
        return;
      }
      const onboardingTabs = {
        ...this.store.getState().onboardingTabs
      };
      if (!onboardingTabs[location] || onboardingTabs[location] !== tabId) {
        _loglevel.default.debug(`Registering onboarding tab at location '${location}' with tabId '${tabId}'`);
        onboardingTabs[location] = tabId;
        this.store.updateState({
          onboardingTabs
        });
      }
    });
    const initialTransientState = {
      onboardingTabs: {}
    };
    const initState = {
      seedPhraseBackedUp: null,
      firstTimeFlowType: null,
      completedOnboarding: false,
      ...opts.initState,
      ...initialTransientState
    };
    this.store = new _obsStore.ObservableStore(initState);
  }
  setSeedPhraseBackedUp(newSeedPhraseBackUpState) {
    this.store.updateState({
      seedPhraseBackedUp: newSeedPhraseBackUpState
    });
  }

  // /**
  //  * Sets the completedOnboarding state to true, indicating that the user has completed the
  //  * onboarding process.
  //  */
  async completeOnboarding() {
    this.store.updateState({
      completedOnboarding: true
    });
    return true;
  }

  /**
   * Setter for the `firstTimeFlowType` property
   *
   * @param {string} type - Indicates the type of first time flow - create or import - the user wishes to follow
   */
  setFirstTimeFlowType(type) {
    this.store.updateState({
      firstTimeFlowType: type
    });
  }
}
exports.default = OnboardingController;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\onboarding.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\permissions\\background-api.js", {"../../../../shared/constants/permissions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\permissions.ts","nanoid":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\nanoid\\index.browser.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cpermissions%5Cbackground-api.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPermissionBackgroundApiMethods = getPermissionBackgroundApiMethods;
var _nanoid = _interopRequireDefault(require("nanoid"));
var _permissions = require("../../../../shared/constants/permissions");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function getPermissionBackgroundApiMethods(permissionController) {
  return {
    addPermittedAccount: (origin, account) => {
      const existing = permissionController.getCaveat(origin, _permissions.RestrictedMethods.eth_accounts, _permissions.CaveatTypes.restrictReturnedAccounts);
      if (existing.value.includes(account)) {
        return;
      }
      permissionController.updateCaveat(origin, _permissions.RestrictedMethods.eth_accounts, _permissions.CaveatTypes.restrictReturnedAccounts, [...existing.value, account]);
    },
    removePermittedAccount: (origin, account) => {
      const existing = permissionController.getCaveat(origin, _permissions.RestrictedMethods.eth_accounts, _permissions.CaveatTypes.restrictReturnedAccounts);
      if (!existing.value.includes(account)) {
        return;
      }
      const remainingAccounts = existing.value.filter(existingAccount => existingAccount !== account);
      if (remainingAccounts.length === 0) {
        permissionController.revokePermission(origin, _permissions.RestrictedMethods.eth_accounts);
      } else {
        permissionController.updateCaveat(origin, _permissions.RestrictedMethods.eth_accounts, _permissions.CaveatTypes.restrictReturnedAccounts, remainingAccounts);
      }
    },
    requestAccountsPermissionWithId: async origin => {
      const id = (0, _nanoid.default)();
      permissionController.requestPermissions({
        origin
      }, {
        eth_accounts: {}
      }, {
        id
      });
      return id;
    }
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\permissions\\background-api.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\permissions\\caveat-mutators.js", {"../../../../shared/constants/permissions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\permissions.ts","@metamask/permission-controller":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\permission-controller\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cpermissions%5Ccaveat-mutators.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CaveatMutatorFactories = void 0;
var _permissionController = require("@metamask/permission-controller");
var _permissions = require("../../../../shared/constants/permissions");
/**
 * Factories that construct caveat mutator functions that are passed to
 * PermissionController.updatePermissionsByCaveat.
 */
const CaveatMutatorFactories = {
  [_permissions.CaveatTypes.restrictReturnedAccounts]: {
    removeAccount
  }
};

/**
 * Removes the target account from the value arrays of all
 * `restrictReturnedAccounts` caveats. No-ops if the target account is not in
 * the array, and revokes the parent permission if it's the only account in
 * the array.
 *
 * @param {string} targetAccount - The address of the account to remove from
 * all accounts permissions.
 * @param {string[]} existingAccounts - The account address array from the
 * account permissions.
 */
exports.CaveatMutatorFactories = CaveatMutatorFactories;
function removeAccount(targetAccount, existingAccounts) {
  const newAccounts = existingAccounts.filter(address => address !== targetAccount);
  if (newAccounts.length === existingAccounts.length) {
    return {
      operation: _permissionController.CaveatMutatorOperation.noop
    };
  } else if (newAccounts.length > 0) {
    return {
      operation: _permissionController.CaveatMutatorOperation.updateValue,
      value: newAccounts
    };
  }
  return {
    operation: _permissionController.CaveatMutatorOperation.revokePermission
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\permissions\\caveat-mutators.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\permissions\\enums.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cpermissions%5Cenums.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WALLET_PREFIX = exports.NOTIFICATION_NAMES = exports.LOG_METHOD_TYPES = exports.LOG_LIMIT = exports.LOG_IGNORE_METHODS = void 0;
const WALLET_PREFIX = 'wallet_';
exports.WALLET_PREFIX = WALLET_PREFIX;
const NOTIFICATION_NAMES = {
  accountsChanged: 'metamask_accountsChanged',
  unlockStateChanged: 'metamask_unlockStateChanged',
  chainChanged: 'metamask_chainChanged'
};
exports.NOTIFICATION_NAMES = NOTIFICATION_NAMES;
const LOG_IGNORE_METHODS = ['wallet_registerOnboarding', 'wallet_watchAsset'];
exports.LOG_IGNORE_METHODS = LOG_IGNORE_METHODS;
const LOG_METHOD_TYPES = {
  restricted: 'restricted',
  internal: 'internal'
};

/**
 * The permission activity log size limit.
 */
exports.LOG_METHOD_TYPES = LOG_METHOD_TYPES;
const LOG_LIMIT = 100;
exports.LOG_LIMIT = LOG_LIMIT;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\permissions\\enums.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\permissions\\index.js", {"./background-api":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\permissions\\background-api.js","./caveat-mutators":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\permissions\\caveat-mutators.js","./enums":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\permissions\\enums.js","./permission-log":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\permissions\\permission-log.js","./selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\permissions\\selectors.js","./specifications":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\permissions\\specifications.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cpermissions%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _caveatMutators = require("./caveat-mutators");
Object.keys(_caveatMutators).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _caveatMutators[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _caveatMutators[key];
    }
  });
});
var _backgroundApi = require("./background-api");
Object.keys(_backgroundApi).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _backgroundApi[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _backgroundApi[key];
    }
  });
});
var _enums = require("./enums");
Object.keys(_enums).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _enums[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _enums[key];
    }
  });
});
var _permissionLog = require("./permission-log");
Object.keys(_permissionLog).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _permissionLog[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _permissionLog[key];
    }
  });
});
var _specifications = require("./specifications");
Object.keys(_specifications).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _specifications[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _specifications[key];
    }
  });
});
var _selectors = require("./selectors");
Object.keys(_selectors).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _selectors[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _selectors[key];
    }
  });
});

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\permissions\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\permissions\\permission-log.js", {"../../../../shared/constants/permissions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\permissions.ts","./enums":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\permissions\\enums.js","@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cpermissions%5Cpermission-log.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PermissionLogController = void 0;
var _obsStore = require("@metamask/obs-store");
var _permissions = require("../../../../shared/constants/permissions");
var _enums = require("./enums");
/**
 * Controller with middleware for logging requests and responses to restricted
 * and permissions-related methods.
 */
class PermissionLogController {
  /**
   * @param {{ restrictedMethods: Set<string>, initState: Record<string, unknown> }} options - Options bag.
   */
  constructor({
    restrictedMethods,
    initState
  }) {
    this.restrictedMethods = restrictedMethods;
    this.store = new _obsStore.ObservableStore({
      permissionHistory: {},
      permissionActivityLog: [],
      ...initState
    });
  }

  /**
   * Get the restricted method activity log.
   *
   * @returns {Array<object>} The activity log.
   */
  getActivityLog() {
    return this.store.getState().permissionActivityLog;
  }

  /**
   * Update the restricted method activity log.
   *
   * @param {Array<object>} logs - The new activity log array.
   */
  updateActivityLog(logs) {
    this.store.updateState({
      permissionActivityLog: logs
    });
  }

  /**
   * Get the permission history log.
   *
   * @returns {object} The permissions history log.
   */
  getHistory() {
    return this.store.getState().permissionHistory;
  }

  /**
   * Update the permission history log.
   *
   * @param {object} history - The new permissions history log object.
   */
  updateHistory(history) {
    this.store.updateState({
      permissionHistory: history
    });
  }

  /**
   * Updates the exposed account history for the given origin.
   * Sets the 'last seen' time to Date.now() for the given accounts.
   * Does **not** update the 'lastApproved' time for the permission itself.
   * Returns if the accounts array is empty.
   *
   * @param {string} origin - The origin that the accounts are exposed to.
   * @param {Array<string>} accounts - The accounts.
   */
  updateAccountsHistory(origin, accounts) {
    if (accounts.length === 0) {
      return;
    }
    const accountToTimeMap = getAccountToTimeMap(accounts, Date.now());
    this.commitNewHistory(origin, {
      eth_accounts: {
        accounts: accountToTimeMap
      }
    });
  }

  /**
   * Create a permissions log middleware. Records permissions activity and history:
   *
   * Activity: requests and responses for restricted and most wallet_ methods.
   *
   * History: for each origin, the last time a permission was granted, including
   * which accounts were exposed, if any.
   *
   * @returns {JsonRpcEngineMiddleware} The permissions log middleware.
   */
  createMiddleware() {
    return (req, res, next, _end) => {
      let activityEntry, requestedMethods;
      const {
        origin,
        method
      } = req;
      const isInternal = method.startsWith(_enums.WALLET_PREFIX);

      // we only log certain methods
      if (!_enums.LOG_IGNORE_METHODS.includes(method) && (isInternal || this.restrictedMethods.has(method))) {
        activityEntry = this.logRequest(req, isInternal);
        if (method === `${_enums.WALLET_PREFIX}requestPermissions`) {
          // get the corresponding methods from the requested permissions so
          // that we can record permissions history
          requestedMethods = this.getRequestedMethods(req);
        }
      } else if (method === 'eth_requestAccounts') {
        // eth_requestAccounts is a special case; we need to extract the accounts
        // from it
        activityEntry = this.logRequest(req, isInternal);
        requestedMethods = ['eth_accounts'];
      } else {
        // no-op
        next();
        return;
      }

      // call next with a return handler for capturing the response
      next(cb => {
        const time = Date.now();
        this.logResponse(activityEntry, res, time);
        if (requestedMethods && !res.error && res.result) {
          // any permissions or accounts changes will be recorded on the response,
          // so we only log permissions history here
          this.logPermissionsHistory(requestedMethods, origin, res.result, time, method === 'eth_requestAccounts');
        }
        cb();
      });
    };
  }

  /**
   * Creates and commits an activity log entry, without response data.
   *
   * @param {object} request - The request object.
   * @param {boolean} isInternal - Whether the request is internal.
   */
  logRequest(request, isInternal) {
    const activityEntry = {
      id: request.id,
      method: request.method,
      methodType: isInternal ? _enums.LOG_METHOD_TYPES.internal : _enums.LOG_METHOD_TYPES.restricted,
      origin: request.origin,
      requestTime: Date.now(),
      responseTime: null,
      success: null
    };
    this.commitNewActivity(activityEntry);
    return activityEntry;
  }

  /**
   * Adds response data to an existing activity log entry.
   * Entry assumed already committed (i.e., in the log).
   *
   * @param {object} entry - The entry to add a response to.
   * @param {object} response - The response object.
   * @param {number} time - Output from Date.now()
   */
  logResponse(entry, response, time) {
    if (!entry || !response) {
      return;
    }

    // The JSON-RPC 2.0 specification defines "success" by the presence of
    // either the "result" or "error" property. The specification forbids
    // both properties from being present simultaneously, and our JSON-RPC
    // stack is spec-compliant at the time of writing.
    entry.success = Object.hasOwnProperty.call(response, 'result');
    entry.responseTime = time;
  }

  /**
   * Commit a new entry to the activity log.
   * Removes the oldest entry from the log if it exceeds the log limit.
   *
   * @param {object} entry - The activity log entry.
   */
  commitNewActivity(entry) {
    const logs = this.getActivityLog();

    // add new entry to end of log
    logs.push(entry);

    // remove oldest log if exceeding size limit
    if (logs.length > _enums.LOG_LIMIT) {
      logs.shift();
    }
    this.updateActivityLog(logs);
  }

  /**
   * Create new permissions history log entries, if any, and commit them.
   *
   * @param {Array<string>} requestedMethods - The method names corresponding to the requested permissions.
   * @param {string} origin - The origin of the permissions request.
   * @param {Array<IOcapLdCapability} result - The permissions request response.result.
   * @param {string} time - The time of the request, i.e. Date.now().
   * @param {boolean} isEthRequestAccounts - Whether the permissions request was 'eth_requestAccounts'.
   */
  logPermissionsHistory(requestedMethods, origin, result, time, isEthRequestAccounts) {
    let accounts, newEntries;
    if (isEthRequestAccounts) {
      accounts = result;
      const accountToTimeMap = getAccountToTimeMap(accounts, time);
      newEntries = {
        eth_accounts: {
          accounts: accountToTimeMap,
          lastApproved: time
        }
      };
    } else {
      // Records new "lastApproved" times for the granted permissions, if any.
      // Special handling for eth_accounts, in order to record the time the
      // accounts were last seen or approved by the origin.
      newEntries = result.map(perm => {
        if (perm.parentCapability === 'eth_accounts') {
          accounts = this.getAccountsFromPermission(perm);
        }
        return perm.parentCapability;
      }).reduce((acc, method) => {
        // all approved permissions will be included in the response,
        // not just the newly requested ones
        if (requestedMethods.includes(method)) {
          if (method === 'eth_accounts') {
            const accountToTimeMap = getAccountToTimeMap(accounts, time);
            acc[method] = {
              lastApproved: time,
              accounts: accountToTimeMap
            };
          } else {
            acc[method] = {
              lastApproved: time
            };
          }
        }
        return acc;
      }, {});
    }
    if (Object.keys(newEntries).length > 0) {
      this.commitNewHistory(origin, newEntries);
    }
  }

  /**
   * Commit new entries to the permissions history log.
   * Merges the history for the given origin, overwriting existing entries
   * with the same key (permission name).
   *
   * @param {string} origin - The requesting origin.
   * @param {object} newEntries - The new entries to commit.
   */
  commitNewHistory(origin, newEntries) {
    // a simple merge updates most permissions
    const history = this.getHistory();
    const newOriginHistory = {
      ...history[origin],
      ...newEntries
    };

    // eth_accounts requires special handling, because of information
    // we store about the accounts
    const existingEthAccountsEntry = history[origin] && history[origin].eth_accounts;
    const newEthAccountsEntry = newEntries.eth_accounts;
    if (existingEthAccountsEntry && newEthAccountsEntry) {
      // we may intend to update just the accounts, not the permission
      // itself
      const lastApproved = newEthAccountsEntry.lastApproved || existingEthAccountsEntry.lastApproved;

      // merge old and new eth_accounts history entries
      newOriginHistory.eth_accounts = {
        lastApproved,
        accounts: {
          ...existingEthAccountsEntry.accounts,
          ...newEthAccountsEntry.accounts
        }
      };
    }
    history[origin] = newOriginHistory;
    this.updateHistory(history);
  }

  /**
   * Get all requested methods from a permissions request.
   *
   * @param {object} request - The request object.
   * @returns {Array<string>} The names of the requested permissions.
   */
  getRequestedMethods(request) {
    if (!request.params || !request.params[0] || typeof request.params[0] !== 'object' || Array.isArray(request.params[0])) {
      return null;
    }
    return Object.keys(request.params[0]);
  }

  /**
   * Get the permitted accounts from an eth_accounts permissions object.
   * Returns an empty array if the permission is not eth_accounts.
   *
   * @param {object} perm - The permissions object.
   * @returns {Array<string>} The permitted accounts.
   */
  getAccountsFromPermission(perm) {
    if (perm.parentCapability !== 'eth_accounts' || !perm.caveats) {
      return [];
    }
    const accounts = new Set();
    for (const caveat of perm.caveats) {
      if (caveat.type === _permissions.CaveatTypes.restrictReturnedAccounts && Array.isArray(caveat.value)) {
        for (const value of caveat.value) {
          accounts.add(value);
        }
      }
    }
    return [...accounts];
  }
}

// helper functions

/**
 * Get a map from account addresses to the given time.
 *
 * @param {Array<string>} accounts - An array of addresses.
 * @param {number} time - A time, e.g. Date.now().
 * @returns {object} A string:number map of addresses to time.
 */
exports.PermissionLogController = PermissionLogController;
function getAccountToTimeMap(accounts, time) {
  return accounts.reduce((acc, account) => ({
    ...acc,
    [account]: time
  }), {});
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\permissions\\permission-log.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\permissions\\selectors.js", {"../../../../shared/constants/permissions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\permissions.ts","reselect":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\reselect\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cpermissions%5Cselectors.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPermittedAccountsByOrigin = exports.getChangedAccounts = void 0;
var _reselect = require("reselect");
var _permissions = require("../../../../shared/constants/permissions");
/**
 * This file contains selectors for PermissionController selector event
 * subscriptions, used to detect whenever a subject's accounts change so that
 * we can notify the subject via the `accountsChanged` provider event.
 */
/**
 * @param {Record<string, Record<string, unknown>>} state - The
 * PermissionController state.
 * @returns {Record<string, unknown>} The PermissionController subjects.
 */
const getSubjects = state => state.subjects;

/**
 * Get the permitted accounts for each subject, keyed by origin.
 * The values of the returned map are immutable values from the
 * PermissionController state.
 *
 * @returns {Map<string, string[]>} The current origin:accounts[] map.
 */
const getPermittedAccountsByOrigin = (0, _reselect.createSelector)(getSubjects, subjects => {
  return Object.values(subjects).reduce((originToAccountsMap, subject) => {
    var _subject$permissions, _subject$permissions$;
    const caveat = (_subject$permissions = subject.permissions) === null || _subject$permissions === void 0 ? void 0 : (_subject$permissions$ = _subject$permissions.eth_accounts) === null || _subject$permissions$ === void 0 ? void 0 : _subject$permissions$.caveats.find(({
      type
    }) => type === _permissions.CaveatTypes.restrictReturnedAccounts);
    if (caveat) {
      originToAccountsMap.set(subject.origin, caveat.value);
    }
    return originToAccountsMap;
  }, new Map());
});

/**
 * Given the current and previous exposed accounts for each PermissionController
 * subject, returns a new map containing all accounts that have changed.
 * The values of each map must be immutable values directly from the
 * PermissionController state, or an empty array instantiated in this
 * function.
 *
 * @param {Map<string, string[]>} newAccountsMap - The new origin:accounts[] map.
 * @param {Map<string, string[]>} [previousAccountsMap] - The previous origin:accounts[] map.
 * @returns {Map<string, string[]>} The origin:accounts[] map of changed accounts.
 */
exports.getPermittedAccountsByOrigin = getPermittedAccountsByOrigin;
const getChangedAccounts = (newAccountsMap, previousAccountsMap) => {
  if (previousAccountsMap === undefined) {
    return newAccountsMap;
  }
  const changedAccounts = new Map();
  if (newAccountsMap === previousAccountsMap) {
    return changedAccounts;
  }
  const newOrigins = new Set([...newAccountsMap.keys()]);
  for (const origin of previousAccountsMap.keys()) {
    const newAccounts = newAccountsMap.get(origin) ?? [];

    // The values of these maps are references to immutable values, which is why
    // a strict equality check is enough for diffing. The values are either from
    // PermissionController state, or an empty array initialized in the previous
    // call to this function. `newAccountsMap` will never contain any empty
    // arrays.
    if (previousAccountsMap.get(origin) !== newAccounts) {
      changedAccounts.set(origin, newAccounts);
    }
    newOrigins.delete(origin);
  }

  // By now, newOrigins is either empty or contains some number of previously
  // unencountered origins, and all of their accounts have "changed".
  for (const origin of newOrigins.keys()) {
    changedAccounts.set(origin, newAccountsMap.get(origin));
  }
  return changedAccounts;
};
exports.getChangedAccounts = getChangedAccounts;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\permissions\\selectors.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\permissions\\specifications.js", {"../../../../shared/constants/permissions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\permissions.ts","@metamask/permission-controller":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\permission-controller\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cpermissions%5Cspecifications.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unrestrictedMethods = exports.getPermissionSpecifications = exports.getCaveatSpecifications = void 0;
var _permissionController = require("@metamask/permission-controller");
var _permissions = require("../../../../shared/constants/permissions");
/**
 * This file contains the specifications of the permissions and caveats
 * that are recognized by our permission system. See the PermissionController
 * README in @metamask/controllers for details.
 */
/**
 * The "keys" of all of permissions recognized by the PermissionController.
 * Permission keys and names have distinct meanings in the permission system.
 */
const PermissionKeys = Object.freeze({
  ..._permissions.RestrictedMethods
});

/**
 * Factory functions for all caveat types recognized by the
 * PermissionController.
 */
const CaveatFactories = Object.freeze({
  [_permissions.CaveatTypes.restrictReturnedAccounts]: accounts => {
    return {
      type: _permissions.CaveatTypes.restrictReturnedAccounts,
      value: accounts
    };
  }
});

/**
 * A PreferencesController identity object.
 *
 * @typedef {object} Identity
 * @property {string} address - The address of the identity.
 * @property {string} name - The name of the identity.
 * @property {number} [lastSelected] - Unix timestamp of when the identity was
 * last selected in the UI.
 */

/**
 * Gets the specifications for all caveats that will be recognized by the
 * PermissionController.
 *
 * @param {{
 *   getIdentities: () => Record<string, Identity>,
 * }} options - Options bag.
 */
const getCaveatSpecifications = ({
  getIdentities
}) => {
  return {
    [_permissions.CaveatTypes.restrictReturnedAccounts]: {
      type: _permissions.CaveatTypes.restrictReturnedAccounts,
      decorator: (method, caveat) => {
        return async args => {
          const result = await method(args);
          return result.filter(account => caveat.value.includes(account)).slice(0, 1);
        };
      },
      validator: (caveat, _origin, _target) => validateCaveatAccounts(caveat.value, getIdentities)
    }
  };
};

/**
 * Gets the specifications for all permissions that will be recognized by the
 * PermissionController.
 *
 * @param {{
 *   getAllAccounts: () => Promise<string[]>,
 *   getIdentities: () => Record<string, Identity>,
 * }} options - Options bag.
 * @param options.getAllAccounts - A function that returns all Ethereum accounts
 * in the current MetaMask instance.
 * @param options.getIdentities - A function that returns the
 * `PreferencesController` identity objects for all Ethereum accounts in the
 * @param options.captureKeyringTypesWithMissingIdentities - A function that
 * captures extra error information about the "Missing identity for address"
 * error.
 * current MetaMask instance.
 */
exports.getCaveatSpecifications = getCaveatSpecifications;
const getPermissionSpecifications = ({
  getAllAccounts,
  getIdentities,
  captureKeyringTypesWithMissingIdentities
}) => {
  return {
    [PermissionKeys.eth_accounts]: {
      permissionType: _permissionController.PermissionType.RestrictedMethod,
      targetKey: PermissionKeys.eth_accounts,
      allowedCaveats: [_permissions.CaveatTypes.restrictReturnedAccounts],
      factory: (permissionOptions, requestData) => {
        if (Array.isArray(permissionOptions.caveats)) {
          throw new Error(`${PermissionKeys.eth_accounts} error: Received unexpected caveats. Any permitted caveats will be added automatically.`);
        }

        // This value will be further validated as part of the caveat.
        if (!requestData.approvedAccounts) {
          throw new Error(`${PermissionKeys.eth_accounts} error: No approved accounts specified.`);
        }
        return (0, _permissionController.constructPermission)({
          ...permissionOptions,
          caveats: [CaveatFactories[_permissions.CaveatTypes.restrictReturnedAccounts](requestData.approvedAccounts)]
        });
      },
      methodImplementation: async _args => {
        const accounts = await getAllAccounts();
        const identities = getIdentities();
        return accounts.sort((firstAddress, secondAddress) => {
          if (!identities[firstAddress]) {
            captureKeyringTypesWithMissingIdentities(identities, accounts);
            throw new Error(`Missing identity for address: "${firstAddress}".`);
          } else if (!identities[secondAddress]) {
            captureKeyringTypesWithMissingIdentities(identities, accounts);
            throw new Error(`Missing identity for address: "${secondAddress}".`);
          } else if (identities[firstAddress].lastSelected === identities[secondAddress].lastSelected) {
            return 0;
          } else if (identities[firstAddress].lastSelected === undefined) {
            return 1;
          } else if (identities[secondAddress].lastSelected === undefined) {
            return -1;
          }
          return identities[secondAddress].lastSelected - identities[firstAddress].lastSelected;
        });
      },
      validator: (permission, _origin, _target) => {
        const {
          caveats
        } = permission;
        if (!caveats || caveats.length !== 1 || caveats[0].type !== _permissions.CaveatTypes.restrictReturnedAccounts) {
          throw new Error(`${PermissionKeys.eth_accounts} error: Invalid caveats. There must be a single caveat of type "${_permissions.CaveatTypes.restrictReturnedAccounts}".`);
        }
      }
    }
  };
};

/**
 * Validates the accounts associated with a caveat. In essence, ensures that
 * the accounts value is an array of non-empty strings, and that each string
 * corresponds to a PreferencesController identity.
 *
 * @param {string[]} accounts - The accounts associated with the caveat.
 * @param {() => Record<string, Identity>} getIdentities - Gets all
 * PreferencesController identities.
 */
exports.getPermissionSpecifications = getPermissionSpecifications;
function validateCaveatAccounts(accounts, getIdentities) {
  if (!Array.isArray(accounts) || accounts.length === 0) {
    throw new Error(`${PermissionKeys.eth_accounts} error: Expected non-empty array of Ethereum addresses.`);
  }
  const identities = getIdentities();
  accounts.forEach(address => {
    if (!address || typeof address !== 'string') {
      throw new Error(`${PermissionKeys.eth_accounts} error: Expected an array of Ethereum addresses. Received: "${address}".`);
    }
    if (!identities[address]) {
      throw new Error(`${PermissionKeys.eth_accounts} error: Received unrecognized address: "${address}".`);
    }
  });
}

/**
 * All unrestricted methods recognized by the PermissionController.
 * Unrestricted methods are ignored by the permission system, but every
 * JSON-RPC request seen by the permission system must correspond to a
 * restricted or unrestricted method, or the request will be rejected with a
 * "method not found" error.
 */
const unrestrictedMethods = Object.freeze(['eth_blockNumber', 'eth_call', 'eth_chainId', 'eth_coinbase', 'eth_decrypt', 'eth_estimateGas', 'eth_feeHistory', 'eth_gasPrice', 'eth_getBalance', 'eth_getBlockByHash', 'eth_getBlockByNumber', 'eth_getBlockTransactionCountByHash', 'eth_getBlockTransactionCountByNumber', 'eth_getCode', 'eth_getEncryptionPublicKey', 'eth_getFilterChanges', 'eth_getFilterLogs', 'eth_getLogs', 'eth_getProof', 'eth_getStorageAt', 'eth_getTransactionByBlockHashAndIndex', 'eth_getTransactionByBlockNumberAndIndex', 'eth_getTransactionByHash', 'eth_getTransactionCount', 'eth_getTransactionReceipt', 'eth_getUncleByBlockHashAndIndex', 'eth_getUncleByBlockNumberAndIndex', 'eth_getUncleCountByBlockHash', 'eth_getUncleCountByBlockNumber', 'eth_getWork', 'eth_hashrate', 'eth_mining', 'eth_newBlockFilter', 'eth_newFilter', 'eth_newPendingTransactionFilter', 'eth_protocolVersion', 'eth_sendRawTransaction', 'eth_sendTransaction', 'eth_sign', 'eth_signTypedData', 'eth_signTypedData_v1', 'eth_signTypedData_v3', 'eth_signTypedData_v4', 'eth_submitHashrate', 'eth_submitWork', 'eth_syncing', 'eth_uninstallFilter', 'metamask_getProviderState', 'metamask_watchAsset', 'net_listening', 'net_peerCount', 'net_version', 'personal_ecRecover', 'personal_sign', 'wallet_watchAsset', 'web3_clientVersion', 'web3_sha3']);
exports.unrestrictedMethods = unrestrictedMethods;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\permissions\\specifications.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\preferences.js", {"../../../shared/constants/hardware-wallets":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\hardware-wallets.ts","../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../shared/constants/preferences":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\preferences.ts","@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js","eth-sig-util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-sig-util\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cpreferences.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _obsStore = require("@metamask/obs-store");
var _ethSigUtil = require("eth-sig-util");
var _network = require("../../../shared/constants/network");
var _hardwareWallets = require("../../../shared/constants/hardware-wallets");
var _preferences = require("../../../shared/constants/preferences");
class PreferencesController {
  /**
   *
   * @typedef {object} PreferencesController
   * @param {object} opts - Overrides the defaults for the initial state of this.store
   * @property {object} store The stored object containing a users preferences, stored in local storage
   * @property {boolean} store.useBlockie The users preference for blockie identicons within the UI
   * @property {boolean} store.useNonceField The users preference for nonce field within the UI
   * @property {object} store.featureFlags A key-boolean map, where keys refer to features and booleans to whether the
   * user wishes to see that feature.
   *
   * Feature flags can be set by the global function `setPreference(feature, enabled)`, and so should not expose any sensitive behavior.
   * @property {object} store.knownMethodData Contains all data methods known by the user
   * @property {string} store.currentLocale The preferred language locale key
   * @property {string} store.selectedAddress A hex string that matches the currently selected address in the app
   */
  constructor(opts = {}) {
    const initState = {
      useBlockie: false,
      useNonceField: false,
      usePhishDetect: true,
      dismissSeedBackUpReminder: false,
      disabledRpcMethodPreferences: {
        eth_sign: false
      },
      useMultiAccountBalanceChecker: true,
      // set to true means the dynamic list from the API is being used
      // set to false will be using the static list from contract-metadata
      useTokenDetection: false,
      useNftDetection: false,
      useCurrencyRateCheck: true,
      openSeaEnabled: false,
      advancedGasFee: null,
      // WARNING: Do not use feature flags for security-sensitive things.
      // Feature flag toggling is available in the global namespace
      // for convenient testing of pre-release features, and should never
      // perform sensitive operations.
      featureFlags: {
        showIncomingTransactions: true
      },
      knownMethodData: {},
      currentLocale: opts.initLangCode,
      identities: {},
      lostIdentities: {},
      forgottenPassword: false,
      preferences: {
        autoLockTimeLimit: undefined,
        showFiatInTestnets: false,
        showTestNetworks: false,
        useNativeCurrencyAsPrimaryCurrency: true,
        hideZeroBalanceTokens: false
      },
      // ENS decentralized website resolution
      ipfsGateway: _network.IPFS_DEFAULT_GATEWAY_URL,
      infuraBlocked: null,
      ledgerTransportType: window.navigator.hid ? _hardwareWallets.LedgerTransportTypes.webhid : _hardwareWallets.LedgerTransportTypes.u2f,
      transactionSecurityCheckEnabled: false,
      theme: _preferences.ThemeType.os,
      ...opts.initState
    };
    this._onInfuraIsBlocked = opts.onInfuraIsBlocked;
    this._onInfuraIsUnblocked = opts.onInfuraIsUnblocked;
    this.store = new _obsStore.ObservableStore(initState);
    this.store.setMaxListeners(13);
    this.tokenListController = opts.tokenListController;
    this._subscribeToInfuraAvailability();
    global.setPreference = (key, value) => {
      return this.setFeatureFlag(key, value);
    };
  }
  // PUBLIC METHODS

  /**
   * Sets the {@code forgottenPassword} state property
   *
   * @param {boolean} forgottenPassword - whether or not the user has forgotten their password
   */
  setPasswordForgotten(forgottenPassword) {
    this.store.updateState({
      forgottenPassword
    });
  }

  /**
   * Setter for the `useBlockie` property
   *
   * @param {boolean} val - Whether or not the user prefers blockie indicators
   */
  setUseBlockie(val) {
    this.store.updateState({
      useBlockie: val
    });
  }

  /**
   * Setter for the `useNonceField` property
   *
   * @param {boolean} val - Whether or not the user prefers to set nonce
   */
  setUseNonceField(val) {
    this.store.updateState({
      useNonceField: val
    });
  }

  /**
   * Setter for the `usePhishDetect` property
   *
   * @param {boolean} val - Whether or not the user prefers phishing domain protection
   */
  setUsePhishDetect(val) {
    this.store.updateState({
      usePhishDetect: val
    });
  }

  /**
   * Setter for the `useMultiAccountBalanceChecker` property
   *
   * @param {boolean} val - Whether or not the user prefers to turn off/on all security settings
   */
  setUseMultiAccountBalanceChecker(val) {
    this.store.updateState({
      useMultiAccountBalanceChecker: val
    });
  }

  /**
   * Setter for the `useTokenDetection` property
   *
   * @param {boolean} val - Whether or not the user prefers to use the static token list or dynamic token list from the API
   */
  setUseTokenDetection(val) {
    this.store.updateState({
      useTokenDetection: val
    });
    this.tokenListController.updatePreventPollingOnNetworkRestart(!val);
    if (val) {
      this.tokenListController.start();
    } else {
      this.tokenListController.clearingTokenListData();
      this.tokenListController.stop();
    }
  }

  /**
   * Setter for the `useNftDetection` property
   *
   * @param {boolean} useNftDetection - Whether or not the user prefers to autodetect NFTs.
   */
  setUseNftDetection(useNftDetection) {
    this.store.updateState({
      useNftDetection
    });
  }

  /**
   * Setter for the `useCurrencyRateCheck` property
   *
   * @param {boolean} val - Whether or not the user prefers to use currency rate check for ETH and tokens.
   */
  setUseCurrencyRateCheck(val) {
    this.store.updateState({
      useCurrencyRateCheck: val
    });
  }

  /**
   * Setter for the `openSeaEnabled` property
   *
   * @param {boolean} openSeaEnabled - Whether or not the user prefers to use the OpenSea API for NFTs data.
   */
  setOpenSeaEnabled(openSeaEnabled) {
    this.store.updateState({
      openSeaEnabled
    });
  }

  /**
   * Setter for the `advancedGasFee` property
   *
   * @param {object} val - holds the maxBaseFee and PriorityFee that the user set as default advanced settings.
   */
  setAdvancedGasFee(val) {
    this.store.updateState({
      advancedGasFee: val
    });
  }

  /**
   * Setter for the `theme` property
   *
   * @param {string} val - 'default' or 'dark' value based on the mode selected by user.
   */
  setTheme(val) {
    this.store.updateState({
      theme: val
    });
  }

  /**
   * Setter for the `transactionSecurityCheckEnabled` property
   *
   * @param transactionSecurityCheckEnabled
   */
  setTransactionSecurityCheckEnabled(transactionSecurityCheckEnabled) {
    this.store.updateState({
      transactionSecurityCheckEnabled
    });
  }

  /**
   * Add new methodData to state, to avoid requesting this information again through Infura
   *
   * @param {string} fourBytePrefix - Four-byte method signature
   * @param {string} methodData - Corresponding data method
   */
  addKnownMethodData(fourBytePrefix, methodData) {
    const {
      knownMethodData
    } = this.store.getState();
    knownMethodData[fourBytePrefix] = methodData;
    this.store.updateState({
      knownMethodData
    });
  }

  /**
   * Setter for the `currentLocale` property
   *
   * @param {string} key - he preferred language locale key
   */
  setCurrentLocale(key) {
    const textDirection = ['ar', 'dv', 'fa', 'he', 'ku'].includes(key) ? 'rtl' : 'auto';
    this.store.updateState({
      currentLocale: key,
      textDirection
    });
    return textDirection;
  }

  /**
   * Updates identities to only include specified addresses. Removes identities
   * not included in addresses array
   *
   * @param {string[]} addresses - An array of hex addresses
   */
  setAddresses(addresses) {
    const oldIdentities = this.store.getState().identities;
    const identities = addresses.reduce((ids, address, index) => {
      const oldId = oldIdentities[address] || {};
      ids[address] = {
        name: `Account ${index + 1}`,
        address,
        ...oldId
      };
      return ids;
    }, {});
    this.store.updateState({
      identities
    });
  }

  /**
   * Removes an address from state
   *
   * @param {string} address - A hex address
   * @returns {string} the address that was removed
   */
  removeAddress(address) {
    const {
      identities
    } = this.store.getState();
    if (!identities[address]) {
      throw new Error(`${address} can't be deleted cause it was not found`);
    }
    delete identities[address];
    this.store.updateState({
      identities
    });

    // If the selected account is no longer valid,
    // select an arbitrary other account:
    if (address === this.getSelectedAddress()) {
      const [selected] = Object.keys(identities);
      this.setSelectedAddress(selected);
    }
    return address;
  }

  /**
   * Adds addresses to the identities object without removing identities
   *
   * @param {string[]} addresses - An array of hex addresses
   */
  addAddresses(addresses) {
    const {
      identities
    } = this.store.getState();
    addresses.forEach(address => {
      // skip if already exists
      if (identities[address]) {
        return;
      }
      // add missing identity
      const identityCount = Object.keys(identities).length;
      identities[address] = {
        name: `Account ${identityCount + 1}`,
        address
      };
    });
    this.store.updateState({
      identities
    });
  }

  /**
   * Synchronizes identity entries with known accounts.
   * Removes any unknown identities, and returns the resulting selected address.
   *
   * @param {Array<string>} addresses - known to the vault.
   * @returns {Promise<string>} selectedAddress the selected address.
   */
  syncAddresses(addresses) {
    if (!Array.isArray(addresses) || addresses.length === 0) {
      throw new Error('Expected non-empty array of addresses. Error #11201');
    }
    const {
      identities,
      lostIdentities
    } = this.store.getState();
    const newlyLost = {};
    Object.keys(identities).forEach(identity => {
      if (!addresses.includes(identity)) {
        newlyLost[identity] = identities[identity];
        delete identities[identity];
      }
    });

    // Identities are no longer present.
    if (Object.keys(newlyLost).length > 0) {
      // store lost accounts
      Object.keys(newlyLost).forEach(key => {
        lostIdentities[key] = newlyLost[key];
      });
    }
    this.store.updateState({
      identities,
      lostIdentities
    });
    this.addAddresses(addresses);

    // If the selected account is no longer valid,
    // select an arbitrary other account:
    let selected = this.getSelectedAddress();
    if (!addresses.includes(selected)) {
      [selected] = addresses;
      this.setSelectedAddress(selected);
    }
    return selected;
  }

  /**
   * Setter for the `selectedAddress` property
   *
   * @param {string} _address - A new hex address for an account
   */
  setSelectedAddress(_address) {
    const address = (0, _ethSigUtil.normalize)(_address);
    const {
      identities
    } = this.store.getState();
    const selectedIdentity = identities[address];
    if (!selectedIdentity) {
      throw new Error(`Identity for '${address} not found`);
    }
    selectedIdentity.lastSelected = Date.now();
    this.store.updateState({
      identities,
      selectedAddress: address
    });
  }

  /**
   * Getter for the `selectedAddress` property
   *
   * @returns {string} The hex address for the currently selected account
   */
  getSelectedAddress() {
    return this.store.getState().selectedAddress;
  }

  /**
   * Sets a custom label for an account
   *
   * @param {string} account - the account to set a label for
   * @param {string} label - the custom label for the account
   * @returns {Promise<string>}
   */
  async setAccountLabel(account, label) {
    if (!account) {
      throw new Error(`setAccountLabel requires a valid address, got ${String(account)}`);
    }
    const address = (0, _ethSigUtil.normalize)(account);
    const {
      identities
    } = this.store.getState();
    identities[address] = identities[address] || {};
    identities[address].name = label;
    this.store.updateState({
      identities
    });
    return label;
  }

  /**
   * Updates the `featureFlags` property, which is an object. One property within that object will be set to a boolean.
   *
   * @param {string} feature - A key that corresponds to a UI feature.
   * @param {boolean} activated - Indicates whether or not the UI feature should be displayed
   * @returns {Promise<object>} Promises a new object; the updated featureFlags object.
   */
  async setFeatureFlag(feature, activated) {
    const currentFeatureFlags = this.store.getState().featureFlags;
    const updatedFeatureFlags = {
      ...currentFeatureFlags,
      [feature]: activated
    };
    this.store.updateState({
      featureFlags: updatedFeatureFlags
    });
    return updatedFeatureFlags;
  }

  /**
   * Updates the `preferences` property, which is an object. These are user-controlled features
   * found in the settings page.
   *
   * @param {string} preference - The preference to enable or disable.
   * @param {boolean} value - Indicates whether or not the preference should be enabled or disabled.
   * @returns {Promise<object>} Promises a new object; the updated preferences object.
   */
  async setPreference(preference, value) {
    const currentPreferences = this.getPreferences();
    const updatedPreferences = {
      ...currentPreferences,
      [preference]: value
    };
    this.store.updateState({
      preferences: updatedPreferences
    });
    return updatedPreferences;
  }

  /**
   * A getter for the `preferences` property
   *
   * @returns {object} A key-boolean map of user-selected preferences.
   */
  getPreferences() {
    return this.store.getState().preferences;
  }

  /**
   * A getter for the `ipfsGateway` property
   *
   * @returns {string} The current IPFS gateway domain
   */
  getIpfsGateway() {
    return this.store.getState().ipfsGateway;
  }

  /**
   * A setter for the `ipfsGateway` property
   *
   * @param {string} domain - The new IPFS gateway domain
   * @returns {Promise<string>} A promise of the update IPFS gateway domain
   */
  async setIpfsGateway(domain) {
    this.store.updateState({
      ipfsGateway: domain
    });
    return domain;
  }

  /**
   * A setter for the `ledgerTransportType` property.
   *
   * @param {string} ledgerTransportType - Either 'ledgerLive', 'webhid' or 'u2f'
   * @returns {string} The transport type that was set.
   */
  setLedgerTransportPreference(ledgerTransportType) {
    this.store.updateState({
      ledgerTransportType
    });
    return ledgerTransportType;
  }

  /**
   * A getter for the `ledgerTransportType` property.
   *
   * @returns {string} The current preferred Ledger transport type.
   */
  getLedgerTransportPreference() {
    return this.store.getState().ledgerTransportType;
  }

  /**
   * A setter for the user preference to dismiss the seed phrase backup reminder
   *
   * @param {bool} dismissSeedBackUpReminder - User preference for dismissing the back up reminder.
   */
  async setDismissSeedBackUpReminder(dismissSeedBackUpReminder) {
    await this.store.updateState({
      dismissSeedBackUpReminder
    });
  }

  /**
   * A setter for the user preference to enable/disable rpc methods
   *
   * @param {string} methodName - The RPC method name to change the setting of
   * @param {bool} isEnabled - true to enable the rpc method
   */
  async setDisabledRpcMethodPreference(methodName, isEnabled) {
    const currentRpcMethodPreferences = this.store.getState().disabledRpcMethodPreferences;
    const updatedRpcMethodPreferences = {
      ...currentRpcMethodPreferences,
      [methodName]: isEnabled
    };
    this.store.updateState({
      disabledRpcMethodPreferences: updatedRpcMethodPreferences
    });
  }
  getRpcMethodPreferences() {
    return this.store.getState().disabledRpcMethodPreferences;
  }

  //
  // PRIVATE METHODS
  //

  _subscribeToInfuraAvailability() {
    this._onInfuraIsBlocked(() => {
      this._setInfuraBlocked(true);
    });
    this._onInfuraIsUnblocked(() => {
      this._setInfuraBlocked(false);
    });
  }

  /**
   *
   * A setter for the `infuraBlocked` property
   *
   * @param {boolean} isBlocked - Bool indicating whether Infura is blocked
   */
  _setInfuraBlocked(isBlocked) {
    const {
      infuraBlocked
    } = this.store.getState();
    if (infuraBlocked === isBlocked) {
      return;
    }
    this.store.updateState({
      infuraBlocked: isBlocked
    });
  }
}
exports.default = PreferencesController;


      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\preferences.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\swaps.js", {"../../../shared/constants/common":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\common.ts","../../../shared/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\gas.ts","../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../shared/constants/smartTransactions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\smartTransactions.js","../../../shared/constants/swaps":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\swaps.ts","../../../shared/constants/time":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\time.ts","../../../shared/lib/fetch-with-cache":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\lib\\fetch-with-cache.js","../../../shared/lib/swaps-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\lib\\swaps-utils.js","../../../shared/lib/transactions-controller-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\lib\\transactions-controller-utils.js","../../../shared/modules/Numeric":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\Numeric.ts","../../../shared/modules/conversion.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\conversion.utils.ts","../../../shared/modules/string-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\string-utils.ts","../../../shared/modules/swaps.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\swaps.utils.js","../../../ui/helpers/utils/optimism/fetchEstimatedL1Fee":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\optimism\\fetchEstimatedL1Fee.js","@ethersproject/contracts":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@ethersproject\\contracts\\lib\\index.js","@ethersproject/providers":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@ethersproject\\providers\\lib\\index.js","@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js","bignumber.js":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\bignumber.js\\bignumber.js","human-standard-token-abi":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\human-standard-token-abi\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Cswaps.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utils = exports.default = void 0;
var _providers = require("@ethersproject/providers");
var _contracts = require("@ethersproject/contracts");
var _loglevel = _interopRequireDefault(require("loglevel"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _obsStore = require("@metamask/obs-store");
var _lodash = require("lodash");
var _humanStandardTokenAbi = _interopRequireDefault(require("human-standard-token-abi"));
var _conversion = require("../../../shared/modules/conversion.utils");
var _swaps = require("../../../shared/constants/swaps");
var _gas = require("../../../shared/constants/gas");
var _network = require("../../../shared/constants/network");
var _smartTransactions = require("../../../shared/constants/smartTransactions");
var _swaps2 = require("../../../shared/modules/swaps.utils");
var _swapsUtils = require("../../../shared/lib/swaps-utils");
var _fetchWithCache = _interopRequireDefault(require("../../../shared/lib/fetch-with-cache"));
var _time = require("../../../shared/constants/time");
var _stringUtils = require("../../../shared/modules/string-utils");
var _transactionsControllerUtils = require("../../../shared/lib/transactions-controller-utils");
var _fetchEstimatedL1Fee = _interopRequireDefault(require("../../../ui/helpers/utils/optimism/fetchEstimatedL1Fee"));
var _Numeric = require("../../../shared/modules/Numeric");
var _common = require("../../../shared/constants/common");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// The MAX_GAS_LIMIT is a number that is higher than the maximum gas costs we have observed on any aggregator
const MAX_GAS_LIMIT = 2500000;

// To ensure that our serves are not spammed if MetaMask is left idle, we limit the number of fetches for quotes that are made on timed intervals.
// 3 seems to be an appropriate balance of giving users the time they need when MetaMask is not left idle, and turning polling off when it is.
const POLL_COUNT_LIMIT = 3;

// If for any reason the MetaSwap API fails to provide a refresh time,
// provide a reasonable fallback to avoid further errors
const FALLBACK_QUOTE_REFRESH_TIME = _time.MINUTE;
function calculateGasEstimateWithRefund(maxGas = MAX_GAS_LIMIT, estimatedRefund = 0, estimatedGas = 0) {
  const maxGasMinusRefund = new _bignumber.default(maxGas, 10).minus(estimatedRefund, 10);
  const isMaxGasMinusRefundNegative = maxGasMinusRefund.lt(0);
  const gasEstimateWithRefund = !isMaxGasMinusRefundNegative && maxGasMinusRefund.lt(estimatedGas, 16) ? `0x${maxGasMinusRefund.toString(16)}` : estimatedGas;
  return gasEstimateWithRefund;
}
const initialState = {
  swapsState: {
    quotes: {},
    quotesPollingLimitEnabled: false,
    fetchParams: null,
    tokens: null,
    tradeTxId: null,
    approveTxId: null,
    quotesLastFetched: null,
    customMaxGas: '',
    customGasPrice: null,
    customMaxFeePerGas: null,
    customMaxPriorityFeePerGas: null,
    swapsUserFeeLevel: '',
    selectedAggId: null,
    customApproveTxData: '',
    errorKey: '',
    topAggId: null,
    routeState: '',
    swapsFeatureIsLive: true,
    saveFetchedQuotes: false,
    swapsQuoteRefreshTime: FALLBACK_QUOTE_REFRESH_TIME,
    swapsQuotePrefetchingRefreshTime: FALLBACK_QUOTE_REFRESH_TIME,
    swapsStxBatchStatusRefreshTime: _smartTransactions.FALLBACK_SMART_TRANSACTIONS_REFRESH_TIME,
    swapsStxGetTransactionsRefreshTime: _smartTransactions.FALLBACK_SMART_TRANSACTIONS_REFRESH_TIME,
    swapsStxMaxFeeMultiplier: _smartTransactions.FALLBACK_SMART_TRANSACTIONS_MAX_FEE_MULTIPLIER,
    swapsFeatureFlags: {}
  }
};
class SwapsController {
  constructor({
    getBufferedGasLimit,
    networkController,
    provider,
    getProviderConfig,
    getTokenRatesState,
    fetchTradesInfo = _swapsUtils.fetchTradesInfo,
    getCurrentChainId,
    getEIP1559GasFeeEstimates,
    onNetworkStateChange
  }) {
    this.store = new _obsStore.ObservableStore({
      swapsState: {
        ...initialState.swapsState
      }
    });
    this.resetState = () => {
      this.store.updateState({
        swapsState: {
          ...initialState.swapsState
        }
      });
    };
    this._fetchTradesInfo = fetchTradesInfo;
    this._getCurrentChainId = getCurrentChainId;
    this._getEIP1559GasFeeEstimates = getEIP1559GasFeeEstimates;
    this.getBufferedGasLimit = getBufferedGasLimit;
    this.getTokenRatesState = getTokenRatesState;
    this.pollCount = 0;
    this.getProviderConfig = getProviderConfig;
    this.indexOfNewestCallInFlight = 0;
    this.ethersProvider = new _providers.Web3Provider(provider);
    this._currentNetworkId = networkController.store.getState().networkId;
    onNetworkStateChange(() => {
      const {
        networkId,
        networkStatus
      } = networkController.store.getState();
      if (networkStatus === _network.NetworkStatus.Available && networkId !== this._currentNetworkId) {
        this._currentNetworkId = networkId;
        this.ethersProvider = new _providers.Web3Provider(provider);
      }
    });
  }
  async fetchSwapsNetworkConfig(chainId) {
    const response = await (0, _fetchWithCache.default)((0, _swapsUtils.getBaseApi)('network', chainId), {
      method: 'GET'
    }, {
      cacheRefreshTime: 600000
    });
    const {
      refreshRates,
      parameters = {}
    } = response || {};
    if (!refreshRates || typeof refreshRates.quotes !== 'number' || typeof refreshRates.quotesPrefetching !== 'number') {
      throw new Error(`MetaMask - invalid response for refreshRates: ${response}`);
    }
    // We presently use milliseconds in the UI.
    return {
      quotes: refreshRates.quotes * 1000,
      quotesPrefetching: refreshRates.quotesPrefetching * 1000,
      stxGetTransactions: refreshRates.stxGetTransactions * 1000,
      stxBatchStatus: refreshRates.stxBatchStatus * 1000,
      stxStatusDeadline: refreshRates.stxStatusDeadline,
      stxMaxFeeMultiplier: parameters.stxMaxFeeMultiplier
    };
  }

  // Sets the network config from the MetaSwap API.
  async _setSwapsNetworkConfig() {
    var _swapsNetworkConfig, _swapsNetworkConfig2, _swapsNetworkConfig3, _swapsNetworkConfig4, _swapsNetworkConfig5, _swapsNetworkConfig6;
    const chainId = this._getCurrentChainId();
    let swapsNetworkConfig;
    try {
      swapsNetworkConfig = await this.fetchSwapsNetworkConfig(chainId);
    } catch (e) {
      console.error('Request for Swaps network config failed: ', e);
    }
    const {
      swapsState: latestSwapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...latestSwapsState,
        swapsQuoteRefreshTime: ((_swapsNetworkConfig = swapsNetworkConfig) === null || _swapsNetworkConfig === void 0 ? void 0 : _swapsNetworkConfig.quotes) || FALLBACK_QUOTE_REFRESH_TIME,
        swapsQuotePrefetchingRefreshTime: ((_swapsNetworkConfig2 = swapsNetworkConfig) === null || _swapsNetworkConfig2 === void 0 ? void 0 : _swapsNetworkConfig2.quotesPrefetching) || FALLBACK_QUOTE_REFRESH_TIME,
        swapsStxGetTransactionsRefreshTime: ((_swapsNetworkConfig3 = swapsNetworkConfig) === null || _swapsNetworkConfig3 === void 0 ? void 0 : _swapsNetworkConfig3.stxGetTransactions) || _smartTransactions.FALLBACK_SMART_TRANSACTIONS_REFRESH_TIME,
        swapsStxBatchStatusRefreshTime: ((_swapsNetworkConfig4 = swapsNetworkConfig) === null || _swapsNetworkConfig4 === void 0 ? void 0 : _swapsNetworkConfig4.stxBatchStatus) || _smartTransactions.FALLBACK_SMART_TRANSACTIONS_REFRESH_TIME,
        swapsStxStatusDeadline: ((_swapsNetworkConfig5 = swapsNetworkConfig) === null || _swapsNetworkConfig5 === void 0 ? void 0 : _swapsNetworkConfig5.stxStatusDeadline) || _smartTransactions.FALLBACK_SMART_TRANSACTIONS_DEADLINE,
        swapsStxMaxFeeMultiplier: ((_swapsNetworkConfig6 = swapsNetworkConfig) === null || _swapsNetworkConfig6 === void 0 ? void 0 : _swapsNetworkConfig6.stxMaxFeeMultiplier) || _smartTransactions.FALLBACK_SMART_TRANSACTIONS_MAX_FEE_MULTIPLIER
      }
    });
  }

  // Once quotes are fetched, we poll for new ones to keep the quotes up to date. Market and aggregator contract conditions can change fast enough
  // that quotes will no longer be available after 1 or 2 minutes. When fetchAndSetQuotes is first called, it receives fetch parameters that are stored in
  // state. These stored parameters are used on subsequent calls made during polling.
  // Note: we stop polling after 3 requests, until new quotes are explicitly asked for. The logic that enforces that maximum is in the body of fetchAndSetQuotes
  pollForNewQuotes() {
    const {
      swapsState: {
        swapsQuoteRefreshTime,
        swapsQuotePrefetchingRefreshTime,
        quotesPollingLimitEnabled
      }
    } = this.store.getState();
    // swapsQuoteRefreshTime is used on the View Quote page, swapsQuotePrefetchingRefreshTime is used on the Build Quote page.
    const quotesRefreshRateInMs = quotesPollingLimitEnabled ? swapsQuoteRefreshTime : swapsQuotePrefetchingRefreshTime;
    this.pollingTimeout = setTimeout(() => {
      var _swapsState$fetchPara;
      const {
        swapsState
      } = this.store.getState();
      this.fetchAndSetQuotes(swapsState.fetchParams, (_swapsState$fetchPara = swapsState.fetchParams) === null || _swapsState$fetchPara === void 0 ? void 0 : _swapsState$fetchPara.metaData, true);
    }, quotesRefreshRateInMs);
  }
  stopPollingForQuotes() {
    if (this.pollingTimeout) {
      clearTimeout(this.pollingTimeout);
    }
  }
  async fetchAndSetQuotes(fetchParams, fetchParamsMetaData = {}, isPolledRequest) {
    const {
      chainId
    } = fetchParamsMetaData;
    const {
      swapsState: {
        quotesPollingLimitEnabled,
        saveFetchedQuotes
      }
    } = this.store.getState();
    if (!fetchParams) {
      return null;
    }
    // Every time we get a new request that is not from the polling, we reset the poll count so we can poll for up to three more sets of quotes with these new params.
    if (!isPolledRequest) {
      this.pollCount = 0;
    }

    // If there are any pending poll requests, clear them so that they don't get call while this new fetch is in process
    clearTimeout(this.pollingTimeout);
    if (!isPolledRequest) {
      this.setSwapsErrorKey('');
    }
    const indexOfCurrentCall = this.indexOfNewestCallInFlight + 1;
    this.indexOfNewestCallInFlight = indexOfCurrentCall;
    if (!saveFetchedQuotes) {
      this.setSaveFetchedQuotes(true);
    }
    let [newQuotes] = await Promise.all([this._fetchTradesInfo(fetchParams, {
      ...fetchParamsMetaData
    }), this._setSwapsNetworkConfig()]);
    const {
      swapsState: {
        saveFetchedQuotes: saveFetchedQuotesAfterResponse
      }
    } = this.store.getState();

    // If saveFetchedQuotesAfterResponse is false, it means a user left Swaps (we cleaned the state)
    // and we don't want to set any API response with quotes into state.
    if (!saveFetchedQuotesAfterResponse) {
      return [{},
      // quotes
      null // selectedAggId
      ];
    }

    newQuotes = (0, _lodash.mapValues)(newQuotes, quote => ({
      ...quote,
      sourceTokenInfo: fetchParamsMetaData.sourceTokenInfo,
      destinationTokenInfo: fetchParamsMetaData.destinationTokenInfo
    }));
    if (chainId === _network.CHAIN_IDS.OPTIMISM && Object.values(newQuotes).length > 0) {
      await Promise.all(Object.values(newQuotes).map(async quote => {
        if (quote.trade) {
          const multiLayerL1TradeFeeTotal = await (0, _fetchEstimatedL1Fee.default)(chainId, {
            txParams: quote.trade,
            chainId
          }, this.ethersProvider);
          quote.multiLayerL1TradeFeeTotal = multiLayerL1TradeFeeTotal;
        }
        return quote;
      }));
    }
    const quotesLastFetched = Date.now();
    let approvalRequired = false;
    if (!(0, _swaps2.isSwapsDefaultTokenAddress)(fetchParams.sourceToken, chainId) && Object.values(newQuotes).length) {
      const allowance = await this._getERC20Allowance(fetchParams.sourceToken, fetchParams.fromAddress, chainId);
      const [firstQuote] = Object.values(newQuotes);

      // For a user to be able to swap a token, they need to have approved the MetaSwap contract to withdraw that token.
      // _getERC20Allowance() returns the amount of the token they have approved for withdrawal. If that amount is greater
      // than 0, it means that approval has already occurred and is not needed. Otherwise, for tokens to be swapped, a new
      // call of the ERC-20 approve method is required.
      approvalRequired = firstQuote.approvalNeeded && allowance.eq(0) && firstQuote.aggregator !== 'wrappedNative';
      if (!approvalRequired) {
        newQuotes = (0, _lodash.mapValues)(newQuotes, quote => ({
          ...quote,
          approvalNeeded: null
        }));
      } else if (!isPolledRequest) {
        const {
          gasLimit: approvalGas
        } = await this.timedoutGasReturn(firstQuote.approvalNeeded);
        newQuotes = (0, _lodash.mapValues)(newQuotes, quote => ({
          ...quote,
          approvalNeeded: {
            ...quote.approvalNeeded,
            gas: approvalGas || _swaps.DEFAULT_ERC20_APPROVE_GAS
          }
        }));
      }
    }
    let topAggId = null;

    // We can reduce time on the loading screen by only doing this after the
    // loading screen and best quote have rendered.
    if (!approvalRequired && !(fetchParams !== null && fetchParams !== void 0 && fetchParams.balanceError)) {
      newQuotes = await this.getAllQuotesWithGasEstimates(newQuotes);
    }
    if (Object.values(newQuotes).length === 0) {
      this.setSwapsErrorKey(_swaps.QUOTES_NOT_AVAILABLE_ERROR);
    } else {
      const [_topAggId, quotesWithSavingsAndFeeData] = await this._findTopQuoteAndCalculateSavings(newQuotes);
      topAggId = _topAggId;
      newQuotes = quotesWithSavingsAndFeeData;
    }

    // If a newer call has been made, don't update state with old information
    // Prevents timing conflicts between fetches
    if (this.indexOfNewestCallInFlight !== indexOfCurrentCall) {
      throw new Error(_swaps.SWAPS_FETCH_ORDER_CONFLICT);
    }
    const {
      swapsState
    } = this.store.getState();
    let {
      selectedAggId
    } = swapsState;
    if (!newQuotes[selectedAggId]) {
      selectedAggId = null;
    }
    this.store.updateState({
      swapsState: {
        ...swapsState,
        quotes: newQuotes,
        fetchParams: {
          ...fetchParams,
          metaData: fetchParamsMetaData
        },
        quotesLastFetched,
        selectedAggId,
        topAggId
      }
    });
    if (quotesPollingLimitEnabled) {
      // We only want to do up to a maximum of three requests from polling if polling limit is enabled.
      // Otherwise we won't increase pollCount, so polling will run without a limit.
      this.pollCount += 1;
    }
    if (!quotesPollingLimitEnabled || this.pollCount < POLL_COUNT_LIMIT + 1) {
      this.pollForNewQuotes();
    } else {
      this.resetPostFetchState();
      this.setSwapsErrorKey(_swaps.QUOTES_EXPIRED_ERROR);
      return null;
    }
    return [newQuotes, topAggId];
  }
  safeRefetchQuotes() {
    const {
      swapsState
    } = this.store.getState();
    if (!this.pollingTimeout && swapsState.fetchParams) {
      this.fetchAndSetQuotes(swapsState.fetchParams);
    }
  }
  setSelectedQuoteAggId(selectedAggId) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        selectedAggId
      }
    });
  }
  setSwapsTokens(tokens) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        tokens
      }
    });
  }
  clearSwapsQuotes() {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        quotes: {}
      }
    });
  }
  setSwapsErrorKey(errorKey) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        errorKey
      }
    });
  }
  async getAllQuotesWithGasEstimates(quotes) {
    const quoteGasData = await Promise.all(Object.values(quotes).map(async quote => {
      const {
        gasLimit,
        simulationFails
      } = await this.timedoutGasReturn(quote.trade);
      return [gasLimit, simulationFails, quote.aggregator];
    }));
    const newQuotes = {};
    quoteGasData.forEach(([gasLimit, simulationFails, aggId]) => {
      if (gasLimit && !simulationFails) {
        const gasEstimateWithRefund = calculateGasEstimateWithRefund(quotes[aggId].maxGas, quotes[aggId].estimatedRefund, gasLimit);
        newQuotes[aggId] = {
          ...quotes[aggId],
          gasEstimate: gasLimit,
          gasEstimateWithRefund
        };
      } else if (quotes[aggId].approvalNeeded) {
        // If gas estimation fails, but an ERC-20 approve is needed, then we do not add any estimate property to the quote object
        // Such quotes will rely on the maxGas and averageGas properties from the api
        newQuotes[aggId] = quotes[aggId];
      }
      // If gas estimation fails and no approval is needed, then we filter that quote out, so that it is not shown to the user
    });

    return newQuotes;
  }
  timedoutGasReturn(tradeTxParams) {
    return new Promise(resolve => {
      let gasTimedOut = false;
      const gasTimeout = setTimeout(() => {
        gasTimedOut = true;
        resolve({
          gasLimit: null,
          simulationFails: true
        });
      }, _time.SECOND * 5);

      // Remove gas from params that will be passed to the `estimateGas` call
      // Including it can cause the estimate to fail if the actual gas needed
      // exceeds the passed gas
      const tradeTxParamsForGasEstimate = {
        data: tradeTxParams.data,
        from: tradeTxParams.from,
        to: tradeTxParams.to,
        value: tradeTxParams.value
      };
      this.getBufferedGasLimit({
        txParams: tradeTxParamsForGasEstimate
      }, 1).then(({
        gasLimit,
        simulationFails
      }) => {
        if (!gasTimedOut) {
          clearTimeout(gasTimeout);
          resolve({
            gasLimit,
            simulationFails
          });
        }
      }).catch(e => {
        _loglevel.default.error(e);
        if (!gasTimedOut) {
          clearTimeout(gasTimeout);
          resolve({
            gasLimit: null,
            simulationFails: true
          });
        }
      });
    });
  }
  async setInitialGasEstimate(initialAggId) {
    const {
      swapsState
    } = this.store.getState();
    const quoteToUpdate = {
      ...swapsState.quotes[initialAggId]
    };
    const {
      gasLimit: newGasEstimate,
      simulationFails
    } = await this.timedoutGasReturn(quoteToUpdate.trade);
    if (newGasEstimate && !simulationFails) {
      const gasEstimateWithRefund = calculateGasEstimateWithRefund(quoteToUpdate.maxGas, quoteToUpdate.estimatedRefund, newGasEstimate);
      quoteToUpdate.gasEstimate = newGasEstimate;
      quoteToUpdate.gasEstimateWithRefund = gasEstimateWithRefund;
    }
    this.store.updateState({
      swapsState: {
        ...swapsState,
        quotes: {
          ...swapsState.quotes,
          [initialAggId]: quoteToUpdate
        }
      }
    });
  }
  setApproveTxId(approveTxId) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        approveTxId
      }
    });
  }
  setTradeTxId(tradeTxId) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        tradeTxId
      }
    });
  }
  setQuotesLastFetched(quotesLastFetched) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        quotesLastFetched
      }
    });
  }
  setSwapsTxGasPrice(gasPrice) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        customGasPrice: gasPrice
      }
    });
  }
  setSwapsTxMaxFeePerGas(maxFeePerGas) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        customMaxFeePerGas: maxFeePerGas
      }
    });
  }
  setSwapsUserFeeLevel(swapsUserFeeLevel) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        swapsUserFeeLevel
      }
    });
  }
  setSwapsQuotesPollingLimitEnabled(quotesPollingLimitEnabled) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        quotesPollingLimitEnabled
      }
    });
  }
  setSwapsTxMaxFeePriorityPerGas(maxPriorityFeePerGas) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        customMaxPriorityFeePerGas: maxPriorityFeePerGas
      }
    });
  }
  setSwapsTxGasLimit(gasLimit) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        customMaxGas: gasLimit
      }
    });
  }
  setCustomApproveTxData(data) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        customApproveTxData: data
      }
    });
  }
  setBackgroundSwapRouteState(routeState) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        routeState
      }
    });
  }
  setSaveFetchedQuotes(status) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        saveFetchedQuotes: status
      }
    });
  }
  setSwapsLiveness(swapsLiveness) {
    const {
      swapsState
    } = this.store.getState();
    const {
      swapsFeatureIsLive
    } = swapsLiveness;
    this.store.updateState({
      swapsState: {
        ...swapsState,
        swapsFeatureIsLive
      }
    });
  }
  setSwapsFeatureFlags(swapsFeatureFlags) {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...swapsState,
        swapsFeatureFlags
      }
    });
  }
  resetPostFetchState() {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...initialState.swapsState,
        tokens: swapsState.tokens,
        fetchParams: swapsState.fetchParams,
        swapsFeatureIsLive: swapsState.swapsFeatureIsLive,
        swapsQuoteRefreshTime: swapsState.swapsQuoteRefreshTime,
        swapsQuotePrefetchingRefreshTime: swapsState.swapsQuotePrefetchingRefreshTime,
        swapsFeatureFlags: swapsState.swapsFeatureFlags
      }
    });
    clearTimeout(this.pollingTimeout);
  }
  resetSwapsState() {
    const {
      swapsState
    } = this.store.getState();
    this.store.updateState({
      swapsState: {
        ...initialState.swapsState,
        swapsQuoteRefreshTime: swapsState.swapsQuoteRefreshTime,
        swapsQuotePrefetchingRefreshTime: swapsState.swapsQuotePrefetchingRefreshTime
      }
    });
    clearTimeout(this.pollingTimeout);
  }
  async _findTopQuoteAndCalculateSavings(quotes = {}) {
    const {
      contractExchangeRates: tokenConversionRates
    } = this.getTokenRatesState();
    const {
      swapsState: {
        customGasPrice,
        customMaxPriorityFeePerGas
      }
    } = this.store.getState();
    const chainId = this._getCurrentChainId();
    const numQuotes = Object.keys(quotes).length;
    if (!numQuotes) {
      return {};
    }
    const newQuotes = (0, _lodash.cloneDeep)(quotes);
    const {
      gasFeeEstimates,
      gasEstimateType
    } = await this._getEIP1559GasFeeEstimates();
    let usedGasPrice = '0x0';
    if (gasEstimateType === _gas.GasEstimateTypes.feeMarket) {
      const {
        high: {
          suggestedMaxPriorityFeePerGas
        },
        estimatedBaseFee
      } = gasFeeEstimates;
      const suggestedMaxPriorityFeePerGasInHexWEI = (0, _conversion.decGWEIToHexWEI)(suggestedMaxPriorityFeePerGas);
      const estimatedBaseFeeNumeric = new _Numeric.Numeric(estimatedBaseFee, 10, _common.EtherDenomination.GWEI).toDenomination(_common.EtherDenomination.WEI);
      usedGasPrice = new _Numeric.Numeric(customMaxPriorityFeePerGas || suggestedMaxPriorityFeePerGasInHexWEI, 16).add(estimatedBaseFeeNumeric).round(6).toString();
    } else if (gasEstimateType === _gas.GasEstimateTypes.legacy) {
      usedGasPrice = customGasPrice || (0, _conversion.decGWEIToHexWEI)(gasFeeEstimates.high);
    } else if (gasEstimateType === _gas.GasEstimateTypes.ethGasPrice) {
      usedGasPrice = customGasPrice || (0, _conversion.decGWEIToHexWEI)(gasFeeEstimates.gasPrice);
    }
    let topAggId = null;
    let overallValueOfBestQuoteForSorting = null;
    Object.values(newQuotes).forEach(quote => {
      const {
        aggregator,
        approvalNeeded,
        averageGas,
        destinationAmount = 0,
        destinationToken,
        destinationTokenInfo,
        gasEstimateWithRefund,
        sourceAmount,
        sourceToken,
        trade,
        fee: metaMaskFee,
        multiLayerL1TradeFeeTotal
      } = quote;
      const tradeGasLimitForCalculation = gasEstimateWithRefund ? new _bignumber.default(gasEstimateWithRefund, 16) : new _bignumber.default(averageGas || MAX_GAS_LIMIT, 10);
      const totalGasLimitForCalculation = tradeGasLimitForCalculation.plus((approvalNeeded === null || approvalNeeded === void 0 ? void 0 : approvalNeeded.gas) || '0x0', 16).toString(16);
      let gasTotalInWeiHex = (0, _transactionsControllerUtils.calcGasTotal)(totalGasLimitForCalculation, usedGasPrice);
      if (multiLayerL1TradeFeeTotal !== null) {
        gasTotalInWeiHex = (0, _conversion.sumHexes)(gasTotalInWeiHex || '0x0', multiLayerL1TradeFeeTotal || '0x0');
      }

      // trade.value is a sum of different values depending on the transaction.
      // It always includes any external fees charged by the quote source. In
      // addition, if the source asset is the selected chain's default token, trade.value
      // includes the amount of that token.
      const totalWeiCost = new _Numeric.Numeric(gasTotalInWeiHex, 16, _common.EtherDenomination.WEI).add(new _Numeric.Numeric(trade.value, 16, _common.EtherDenomination.WEI));
      const totalEthCost = totalWeiCost.toDenomination(_common.EtherDenomination.ETH).round(6).value;

      // The total fee is aggregator/exchange fees plus gas fees.
      // If the swap is from the selected chain's default token, subtract
      // the sourceAmount from the total cost. Otherwise, the total fee
      // is simply trade.value plus gas fees.
      const ethFee = (0, _swaps2.isSwapsDefaultTokenAddress)(sourceToken, chainId) ? totalWeiCost.minus(new _Numeric.Numeric(sourceAmount, 10)).toDenomination(_common.EtherDenomination.ETH).round(6).value : totalEthCost;
      const decimalAdjustedDestinationAmount = (0, _transactionsControllerUtils.calcTokenAmount)(destinationAmount, destinationTokenInfo.decimals);
      const tokenPercentageOfPreFeeDestAmount = new _bignumber.default(100, 10).minus(metaMaskFee, 10).div(100);
      const destinationAmountBeforeMetaMaskFee = decimalAdjustedDestinationAmount.div(tokenPercentageOfPreFeeDestAmount);
      const metaMaskFeeInTokens = destinationAmountBeforeMetaMaskFee.minus(decimalAdjustedDestinationAmount);
      const tokenConversionRate = tokenConversionRates[Object.keys(tokenConversionRates).find(tokenAddress => (0, _stringUtils.isEqualCaseInsensitive)(tokenAddress, destinationToken))];
      const conversionRateForSorting = tokenConversionRate || 1;
      const ethValueOfTokens = decimalAdjustedDestinationAmount.times(conversionRateForSorting.toString(10), 10);
      const conversionRateForCalculations = (0, _swaps2.isSwapsDefaultTokenAddress)(destinationToken, chainId) ? 1 : tokenConversionRate;
      const overallValueOfQuoteForSorting = conversionRateForCalculations === undefined ? ethValueOfTokens : ethValueOfTokens.minus(ethFee, 10);
      quote.ethFee = ethFee.toString(10);
      if (conversionRateForCalculations !== undefined) {
        quote.ethValueOfTokens = ethValueOfTokens.toString(10);
        quote.overallValueOfQuote = overallValueOfQuoteForSorting.toString(10);
        quote.metaMaskFeeInEth = metaMaskFeeInTokens.times(conversionRateForCalculations.toString(10)).toString(10);
      }
      if (overallValueOfBestQuoteForSorting === null || overallValueOfQuoteForSorting.gt(overallValueOfBestQuoteForSorting)) {
        topAggId = aggregator;
        overallValueOfBestQuoteForSorting = overallValueOfQuoteForSorting;
      }
    });
    const isBest = (0, _swaps2.isSwapsDefaultTokenAddress)(newQuotes[topAggId].destinationToken, chainId) || Boolean(tokenConversionRates[Object.keys(tokenConversionRates).find(tokenAddress => {
      var _newQuotes$topAggId;
      return (0, _stringUtils.isEqualCaseInsensitive)(tokenAddress, (_newQuotes$topAggId = newQuotes[topAggId]) === null || _newQuotes$topAggId === void 0 ? void 0 : _newQuotes$topAggId.destinationToken);
    })]);
    let savings = null;
    if (isBest) {
      const bestQuote = newQuotes[topAggId];
      savings = {};
      const {
        ethFee: medianEthFee,
        metaMaskFeeInEth: medianMetaMaskFee,
        ethValueOfTokens: medianEthValueOfTokens
      } = getMedianEthValueQuote(Object.values(newQuotes));

      // Performance savings are calculated as:
      //   (ethValueOfTokens for the best trade) - (ethValueOfTokens for the media trade)
      savings.performance = new _bignumber.default(bestQuote.ethValueOfTokens, 10).minus(medianEthValueOfTokens, 10);

      // Fee savings are calculated as:
      //   (fee for the median trade) - (fee for the best trade)
      savings.fee = new _bignumber.default(medianEthFee).minus(bestQuote.ethFee, 10);
      savings.metaMaskFee = bestQuote.metaMaskFeeInEth;

      // Total savings are calculated as:
      //   performance savings + fee savings - metamask fee
      savings.total = savings.performance.plus(savings.fee).minus(savings.metaMaskFee).toString(10);
      savings.performance = savings.performance.toString(10);
      savings.fee = savings.fee.toString(10);
      savings.medianMetaMaskFee = medianMetaMaskFee;
      newQuotes[topAggId].isBestQuote = true;
      newQuotes[topAggId].savings = savings;
    }
    return [topAggId, newQuotes];
  }
  async _getERC20Allowance(contractAddress, walletAddress, chainId) {
    const contract = new _contracts.Contract(contractAddress, _humanStandardTokenAbi.default, this.ethersProvider);
    return await contract.allowance(walletAddress, _swaps.SWAPS_CHAINID_CONTRACT_ADDRESS_MAP[chainId]);
  }
}

/**
 * Calculates the median overallValueOfQuote of a sample of quotes.
 *
 * @param {Array} _quotes - A sample of quote objects with overallValueOfQuote, ethFee, metaMaskFeeInEth, and ethValueOfTokens properties
 * @returns {object} An object with the ethValueOfTokens, ethFee, and metaMaskFeeInEth of the quote with the median overallValueOfQuote
 */
exports.default = SwapsController;
function getMedianEthValueQuote(_quotes) {
  if (!Array.isArray(_quotes) || _quotes.length === 0) {
    throw new Error('Expected non-empty array param.');
  }
  const quotes = [..._quotes];
  quotes.sort((quoteA, quoteB) => {
    const overallValueOfQuoteA = new _bignumber.default(quoteA.overallValueOfQuote, 10);
    const overallValueOfQuoteB = new _bignumber.default(quoteB.overallValueOfQuote, 10);
    if (overallValueOfQuoteA.equals(overallValueOfQuoteB)) {
      return 0;
    }
    return overallValueOfQuoteA.lessThan(overallValueOfQuoteB) ? -1 : 1;
  });
  if (quotes.length % 2 === 1) {
    // return middle values
    const medianOverallValue = quotes[(quotes.length - 1) / 2].overallValueOfQuote;
    const quotesMatchingMedianQuoteValue = quotes.filter(quote => medianOverallValue === quote.overallValueOfQuote);
    return meansOfQuotesFeesAndValue(quotesMatchingMedianQuoteValue);
  }

  // return mean of middle two values
  const upperIndex = quotes.length / 2;
  const lowerIndex = upperIndex - 1;
  const overallValueAtUpperIndex = quotes[upperIndex].overallValueOfQuote;
  const overallValueAtLowerIndex = quotes[lowerIndex].overallValueOfQuote;
  const quotesMatchingUpperIndexValue = quotes.filter(quote => overallValueAtUpperIndex === quote.overallValueOfQuote);
  const quotesMatchingLowerIndexValue = quotes.filter(quote => overallValueAtLowerIndex === quote.overallValueOfQuote);
  const feesAndValueAtUpperIndex = meansOfQuotesFeesAndValue(quotesMatchingUpperIndexValue);
  const feesAndValueAtLowerIndex = meansOfQuotesFeesAndValue(quotesMatchingLowerIndexValue);
  return {
    ethFee: new _bignumber.default(feesAndValueAtUpperIndex.ethFee, 10).plus(feesAndValueAtLowerIndex.ethFee, 10).dividedBy(2).toString(10),
    metaMaskFeeInEth: new _bignumber.default(feesAndValueAtUpperIndex.metaMaskFeeInEth, 10).plus(feesAndValueAtLowerIndex.metaMaskFeeInEth, 10).dividedBy(2).toString(10),
    ethValueOfTokens: new _bignumber.default(feesAndValueAtUpperIndex.ethValueOfTokens, 10).plus(feesAndValueAtLowerIndex.ethValueOfTokens, 10).dividedBy(2).toString(10)
  };
}

/**
 * Calculates the arithmetic mean for each of three properties - ethFee, metaMaskFeeInEth and ethValueOfTokens - across
 * an array of objects containing those properties.
 *
 * @param {Array} quotes - A sample of quote objects with overallValueOfQuote, ethFee, metaMaskFeeInEth and
 * ethValueOfTokens properties
 * @returns {object} An object with the arithmetic mean each of the ethFee, metaMaskFeeInEth and ethValueOfTokens of
 * the passed quote objects
 */
function meansOfQuotesFeesAndValue(quotes) {
  const feeAndValueSumsAsBigNumbers = quotes.reduce((feeAndValueSums, quote) => ({
    ethFee: feeAndValueSums.ethFee.plus(quote.ethFee, 10),
    metaMaskFeeInEth: feeAndValueSums.metaMaskFeeInEth.plus(quote.metaMaskFeeInEth, 10),
    ethValueOfTokens: feeAndValueSums.ethValueOfTokens.plus(quote.ethValueOfTokens, 10)
  }), {
    ethFee: new _bignumber.default(0, 10),
    metaMaskFeeInEth: new _bignumber.default(0, 10),
    ethValueOfTokens: new _bignumber.default(0, 10)
  });
  return {
    ethFee: feeAndValueSumsAsBigNumbers.ethFee.div(quotes.length, 10).toString(10),
    metaMaskFeeInEth: feeAndValueSumsAsBigNumbers.metaMaskFeeInEth.div(quotes.length, 10).toString(10),
    ethValueOfTokens: feeAndValueSumsAsBigNumbers.ethValueOfTokens.div(quotes.length, 10).toString(10)
  };
}
const utils = {
  getMedianEthValueQuote,
  meansOfQuotesFeesAndValue
};
exports.utils = utils;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\swaps.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\transactions\\index.js", {"../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../../shared/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\gas.ts","../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../../shared/constants/transaction":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\transaction.ts","../../../../shared/lib/transactions-controller-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\lib\\transactions-controller-utils.js","../../../../shared/modules/Numeric":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\Numeric.ts","../../../../shared/modules/conversion.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\conversion.utils.ts","../../../../shared/modules/swaps.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\swaps.utils.js","../../../../shared/modules/transaction.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\transaction.utils.js","../../lib/cleanErrorStack":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\cleanErrorStack.js","../../lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","../../metamask-controller":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\metamask-controller.js","./lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\transactions\\lib\\util.js","./pending-tx-tracker":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\transactions\\pending-tx-tracker.js","./tx-gas-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\transactions\\tx-gas-utils.js","./tx-state-manager":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\transactions\\tx-state-manager.js","@ethereumjs/common":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@ethereumjs\\common\\dist\\index.js","@ethereumjs/tx":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@ethereumjs\\tx\\dist\\index.js","@metamask/controller-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\controller-utils\\dist\\index.js","@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js","@metamask/safe-event-emitter":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\safe-event-emitter\\index.js","bignumber.js":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\bignumber.js\\bignumber.js","eth-rpc-errors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-rpc-errors\\dist\\index.js","ethereumjs-util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethereumjs-util\\dist.browser\\index.js","ethjs-query":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethjs-query\\lib\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js","nonce-tracker":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\nonce-tracker\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Ctransactions%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _safeEventEmitter = _interopRequireDefault(require("@metamask/safe-event-emitter"));
var _obsStore = require("@metamask/obs-store");
var _ethereumjsUtil = require("ethereumjs-util");
var _ethjsQuery = _interopRequireDefault(require("ethjs-query"));
var _ethRpcErrors = require("eth-rpc-errors");
var _common = require("@ethereumjs/common");
var _tx = require("@ethereumjs/tx");
var _controllerUtils = require("@metamask/controller-utils");
var _nonceTracker = _interopRequireDefault(require("nonce-tracker"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _lodash = require("lodash");
var _cleanErrorStack = _interopRequireDefault(require("../../lib/cleanErrorStack"));
var _util = require("../../lib/util");
var _transaction = require("../../../../shared/constants/transaction");
var _metamaskController = require("../../metamask-controller");
var _gas = require("../../../../shared/constants/gas");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _swaps = require("../../../../shared/modules/swaps.utils");
var _metametrics = require("../../../../shared/constants/metametrics");
var _network = require("../../../../shared/constants/network");
var _transaction2 = require("../../../../shared/modules/transaction.utils");
var _app = require("../../../../shared/constants/app");
var _transactionsControllerUtils = require("../../../../shared/lib/transactions-controller-utils");
var _Numeric = require("../../../../shared/modules/Numeric");
var _txStateManager = _interopRequireDefault(require("./tx-state-manager"));
var _txGasUtils = _interopRequireDefault(require("./tx-gas-utils"));
var _pendingTxTracker = _interopRequireDefault(require("./pending-tx-tracker"));
var txUtils = _interopRequireWildcard(require("./lib/util"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const MAX_MEMSTORE_TX_LIST_SIZE = 100; // Number of transactions (by unique nonces) to keep in memory
const UPDATE_POST_TX_BALANCE_TIMEOUT = 5000;
const SWAP_TRANSACTION_TYPES = [_transaction.TransactionType.swap, _transaction.TransactionType.swapApproval];

// Only certain types of transactions should be allowed to be specified when
// adding a new unapproved transaction.
const VALID_UNAPPROVED_TRANSACTION_TYPES = [...SWAP_TRANSACTION_TYPES, _transaction.TransactionType.simpleSend, _transaction.TransactionType.tokenMethodTransfer, _transaction.TransactionType.tokenMethodTransferFrom, _transaction.TransactionType.contractInteraction];

/**
 * @typedef {__import__('../../../../shared/constants/transaction').TransactionMeta} TransactionMeta
 * @typedef {__import__('../../../../shared/constants/gas').TxGasFees} TxGasFees
 */

const METRICS_STATUS_FAILED = 'failed on-chain';

/**
 * @typedef {object} CustomGasSettings
 * @property {string} [gas] - The gas limit to use for the transaction
 * @property {string} [gasPrice] - The gasPrice to use for a legacy transaction
 * @property {string} [maxFeePerGas] - The maximum amount to pay per gas on a
 *  EIP-1559 transaction
 * @property {string} [maxPriorityFeePerGas] - The maximum amount of paid fee
 *  to be distributed to miner in an EIP-1559 transaction
 */

/**
 * Transaction Controller is an aggregate of sub-controllers and trackers
 * composing them in a way to be exposed to the metamask controller
 *
 * - `txStateManager
 * responsible for the state of a transaction and
 * storing the transaction
 * - pendingTxTracker
 * watching blocks for transactions to be include
 * and emitting confirmed events
 * - txGasUtil
 * gas calculations and safety buffering
 * - nonceTracker
 * calculating nonces
 *
 * @param {object} opts
 * @param {object} opts.initState - initial transaction list default is an empty array
 * @param {Function} opts.getNetworkId - Get the current network ID.
 * @param {Function} opts.getNetworkStatus - Get the current network status.
 * @param {Function} opts.onNetworkStateChange - Subscribe to network state change events.
 * @param {object} opts.blockTracker - An instance of eth-blocktracker
 * @param {object} opts.provider - A network provider.
 * @param {Function} opts.signTransaction - function the signs an @ethereumjs/tx
 * @param {object} opts.getPermittedAccounts - get accounts that an origin has permissions for
 * @param {Function} opts.signTransaction - ethTx signer that returns a rawTx
 * @param {number} [opts.txHistoryLimit] - number *optional* for limiting how many transactions are in state
 * @param {object} opts.preferencesStore
 */

class TransactionController extends _safeEventEmitter.default {
  constructor(opts) {
    super();
    this.getNetworkId = opts.getNetworkId;
    this.getNetworkStatus = opts.getNetworkStatus;
    this._getCurrentChainId = opts.getCurrentChainId;
    this.getProviderConfig = opts.getProviderConfig;
    this._getCurrentNetworkEIP1559Compatibility = opts.getCurrentNetworkEIP1559Compatibility;
    this._getCurrentAccountEIP1559Compatibility = opts.getCurrentAccountEIP1559Compatibility;
    this.preferencesStore = opts.preferencesStore || new _obsStore.ObservableStore({});
    this.provider = opts.provider;
    this.getPermittedAccounts = opts.getPermittedAccounts;
    this.blockTracker = opts.blockTracker;
    this.signEthTx = opts.signTransaction;
    this.inProcessOfSigning = new Set();
    this._trackMetaMetricsEvent = opts.trackMetaMetricsEvent;
    this._getParticipateInMetrics = opts.getParticipateInMetrics;
    this._getEIP1559GasFeeEstimates = opts.getEIP1559GasFeeEstimates;
    this.createEventFragment = opts.createEventFragment;
    this.updateEventFragment = opts.updateEventFragment;
    this.finalizeEventFragment = opts.finalizeEventFragment;
    this.getEventFragmentById = opts.getEventFragmentById;
    this.getDeviceModel = opts.getDeviceModel;
    this.getAccountType = opts.getAccountType;
    this.getTokenStandardAndDetails = opts.getTokenStandardAndDetails;
    this.securityProviderRequest = opts.securityProviderRequest;
    this.messagingSystem = opts.messenger;
    this.memStore = new _obsStore.ObservableStore({});
    this.resetState = () => {
      this._updateMemstore();
    };
    this.query = new _ethjsQuery.default(this.provider);
    this.txGasUtil = new _txGasUtils.default(this.provider);
    this._mapMethods();
    this.txStateManager = new _txStateManager.default({
      initState: opts.initState,
      txHistoryLimit: opts.txHistoryLimit,
      getNetworkId: this.getNetworkId,
      getNetworkStatus: this.getNetworkStatus,
      getCurrentChainId: opts.getCurrentChainId
    });
    this.store = this.txStateManager.store;
    this.nonceTracker = new _nonceTracker.default({
      provider: this.provider,
      blockTracker: this.blockTracker,
      getPendingTransactions: (...args) => {
        const pendingTransactions = this.txStateManager.getPendingTransactions(...args);
        const externalPendingTransactions = opts.getExternalPendingTransactions(...args);
        return [...pendingTransactions, ...externalPendingTransactions];
      },
      getConfirmedTransactions: this.txStateManager.getConfirmedTransactions.bind(this.txStateManager)
    });
    this.pendingTxTracker = new _pendingTxTracker.default({
      provider: this.provider,
      nonceTracker: this.nonceTracker,
      publishTransaction: rawTx => this.query.sendRawTransaction(rawTx),
      getPendingTransactions: () => {
        const pending = this.txStateManager.getPendingTransactions();
        const approved = this.txStateManager.getApprovedTransactions();
        return [...pending, ...approved];
      },
      approveTransaction: this.approveTransaction.bind(this),
      getCompletedTransactions: this.txStateManager.getConfirmedTransactions.bind(this.txStateManager)
    });
    this.txStateManager.store.subscribe(() => this.emit(_metamaskController.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE));
    this._setupListeners();
    // memstore is computed from a few different stores
    this._updateMemstore();
    this.txStateManager.store.subscribe(() => this._updateMemstore());
    opts.onNetworkStateChange(() => {
      this._onBootCleanUp();
      this._updateMemstore();
    });

    // request state update to finalize initialization
    this._updatePendingTxsAfterFirstBlock();
    this._onBootCleanUp();
  }

  /**
   * Gets the current chainId in the network store as a number, returning 0 if
   * the chainId parses to NaN.
   *
   * @returns {number} The numerical chainId.
   */
  getChainId() {
    const networkStatus = this.getNetworkStatus();
    const chainId = this._getCurrentChainId();
    const integerChainId = parseInt(chainId, 16);
    if (networkStatus !== _network.NetworkStatus.Available || Number.isNaN(integerChainId)) {
      return 0;
    }
    return integerChainId;
  }
  async getEIP1559Compatibility(fromAddress) {
    const currentNetworkIsCompatible = await this._getCurrentNetworkEIP1559Compatibility();
    const fromAccountIsCompatible = await this._getCurrentAccountEIP1559Compatibility(fromAddress);
    return currentNetworkIsCompatible && fromAccountIsCompatible;
  }

  /**
   * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for
   * specifying which chain, network, hardfork and EIPs to support for
   * a transaction. By referencing this configuration, and analyzing the fields
   * specified in txParams, `@ethereumjs/tx` is able to determine which EIP-2718
   * transaction type to use.
   *
   * @param fromAddress
   * @returns {Common} common configuration object
   */
  async getCommonConfiguration(fromAddress) {
    const {
      type,
      nickname: name
    } = this.getProviderConfig();
    const supportsEIP1559 = await this.getEIP1559Compatibility(fromAddress);

    // This logic below will have to be updated each time a hardfork happens
    // that carries with it a new Transaction type. It is inconsequential for
    // hardforks that do not include new types.
    const hardfork = supportsEIP1559 ? _common.Hardfork.London : _common.Hardfork.Berlin;

    // type will be one of our default network names or 'rpc'. the default
    // network names are sufficient configuration, simply pass the name as the
    // chain argument in the constructor.
    if (type !== _network.NETWORK_TYPES.RPC && type !== _network.NETWORK_TYPES.SEPOLIA) {
      return new _common.Common({
        chain: type,
        hardfork
      });
    }

    // For 'rpc' we need to use the same basic configuration as mainnet, since
    // we only support EVM compatible chains, and then override the
    // name, chainId and networkId properties. This is done using the
    // `forCustomChain` static method on the Common class.
    const chainId = parseInt(this._getCurrentChainId(), 16);
    const networkStatus = this.getNetworkStatus();
    const networkId = this.getNetworkId();
    return _common.Common.custom({
      name,
      chainId,
      // It is improbable for a transaction to be signed while the network
      // is loading for two reasons.
      // 1. Pending, unconfirmed transactions are wiped on network change
      // 2. The UI is unusable (loading indicator) when network is loading.
      // setting the networkId to 0 is for type safety and to explicity lead
      // the transaction to failing if a user is able to get to this branch
      // on a custom network that requires valid network id. I have not ran
      // into this limitation on any network I have attempted, even when
      // hardcoding networkId to 'loading'.
      networkId: networkStatus === _network.NetworkStatus.Available ? parseInt(networkId, 10) : 0,
      hardfork
    });
  }

  /**
   * Adds a tx to the txlist
   *
   * @param txMeta
   * @fires ${txMeta.id}:unapproved
   */
  addTransaction(txMeta) {
    this.txStateManager.addTransaction(txMeta);
    this.emit(`${txMeta.id}:unapproved`, txMeta);
    this._trackTransactionMetricsEvent(txMeta, _transaction.TransactionMetaMetricsEvent.added, txMeta.actionId);
  }

  /**
   * Wipes the transactions for a given account
   *
   * @param {string} address - hex string of the from address for txs being removed
   */
  wipeTransactions(address) {
    this.txStateManager.wipeTransactions(address);
  }

  /**
   * Add a new unapproved transaction to the pipeline
   *
   * @returns {Promise<string>} the hash of the transaction after being submitted to the network
   * @param {object} txParams - txParams for the transaction
   * @param {object} opts - with the key origin to put the origin on the txMeta
   */
  async newUnapprovedTransaction(txParams, opts = {}) {
    _loglevel.default.debug(`MetaMaskController newUnapprovedTransaction ${JSON.stringify(txParams)}`);
    const initialTxMeta = await this.addUnapprovedTransaction(opts.method, txParams, opts.origin, undefined, undefined, opts.id);

    // listen for tx completion (success, fail)
    return new Promise((resolve, reject) => {
      this.txStateManager.once(`${initialTxMeta.id}:finished`, finishedTxMeta => {
        switch (finishedTxMeta.status) {
          case _transaction.TransactionStatus.submitted:
            return resolve(finishedTxMeta.hash);
          case _transaction.TransactionStatus.rejected:
            return reject((0, _cleanErrorStack.default)(_ethRpcErrors.ethErrors.provider.userRejectedRequest('MetaMask Tx Signature: User denied transaction signature.')));
          case _transaction.TransactionStatus.failed:
            return reject((0, _cleanErrorStack.default)(_ethRpcErrors.ethErrors.rpc.internal(finishedTxMeta.err.message)));
          default:
            return reject((0, _cleanErrorStack.default)(_ethRpcErrors.ethErrors.rpc.internal(`MetaMask Tx Signature: Unknown problem: ${JSON.stringify(finishedTxMeta.txParams)}`)));
        }
      });
    });
  }

  /**
   * Creates approvals for all unapproved transactions in the txStateManager.
   *
   * @returns {Promise<void>}
   */
  async initApprovals() {
    const unapprovedTxs = this.txStateManager.getUnapprovedTxList();
    return Promise.all(Object.values(unapprovedTxs).map(txMeta => this._requestApproval(txMeta, {
      shouldShowRequest: false
    })));
  }

  // ====================================================================================================================================================

  /**
   * @param {number} txId
   * @returns {TransactionMeta} the txMeta who matches the given id if none found
   * for the network returns undefined
   */
  _getTransaction(txId) {
    const {
      transactions
    } = this.store.getState();
    return transactions[txId];
  }

  /**
   * @param {number} txId
   * @returns {boolean}
   */
  _isUnapprovedTransaction(txId) {
    return this.txStateManager.getTransaction(txId).status === _transaction.TransactionStatus.unapproved;
  }

  /**
   * @param {number} txId
   * @param {string} fnName
   */
  _throwErrorIfNotUnapprovedTx(txId, fnName) {
    if (!this._isUnapprovedTransaction(txId)) {
      throw new Error(`TransactionsController: Can only call ${fnName} on an unapproved transaction.
         Current tx status: ${this.txStateManager.getTransaction(txId).status}`);
    }
  }
  _updateTransaction(txId, proposedUpdate, note) {
    const txMeta = this.txStateManager.getTransaction(txId);
    const updated = (0, _lodash.merge)(txMeta, proposedUpdate);
    this.txStateManager.updateTransaction(updated, note);
  }

  /**
   * updates the params that are editible in the send edit flow
   *
   * @param {string} txId - transaction id
   * @param {object} previousGasParams - holds the parameter to update
   * @param {string} previousGasParams.maxFeePerGas
   * @param {string} previousGasParams.maxPriorityFeePerGas
   * @param {string} previousGasParams.gasLimit
   * @returns {TransactionMeta} the txMeta of the updated transaction
   */
  updatePreviousGasParams(txId, {
    maxFeePerGas,
    maxPriorityFeePerGas,
    gasLimit
  }) {
    const previousGasParams = {
      previousGas: {
        maxFeePerGas,
        maxPriorityFeePerGas,
        gasLimit
      }
    };

    // only update what is defined
    previousGasParams.previousGas = (0, _lodash.pickBy)(previousGasParams.previousGas);
    const note = `Update Previous Gas for ${txId}`;
    this._updateTransaction(txId, previousGasParams, note);
    return this._getTransaction(txId);
  }

  /**
   *
   * @param {string} txId - transaction id
   * @param {object} editableParams - holds the eip1559 fees parameters
   * @param {object} editableParams.data
   * @param {string} editableParams.from
   * @param {string} editableParams.to
   * @param {string} editableParams.value
   * @param {string} editableParams.gas
   * @param {string} editableParams.gasPrice
   * @returns {TransactionMeta} the txMeta of the updated transaction
   */
  async updateEditableParams(txId, {
    data,
    from,
    to,
    value,
    gas,
    gasPrice
  }) {
    this._throwErrorIfNotUnapprovedTx(txId, 'updateEditableParams');
    const editableParams = {
      txParams: {
        data,
        from,
        to,
        value,
        gas,
        gasPrice
      }
    };

    // only update what is defined
    editableParams.txParams = (0, _lodash.pickBy)(editableParams.txParams, prop => prop !== undefined);

    // update transaction type in case it has changes
    const transactionBeforeEdit = this._getTransaction(txId);
    const {
      type
    } = await (0, _transaction2.determineTransactionType)({
      ...transactionBeforeEdit.txParams,
      ...editableParams.txParams
    }, this.query);
    editableParams.type = type;
    const note = `Update Editable Params for ${txId}`;
    this._updateTransaction(txId, editableParams, note);
    return this._getTransaction(txId);
  }

  /**
   * updates the gas fees of the transaction with id if the transaction state is unapproved
   *
   * @param {string} txId - transaction id
   * @param {TxGasFees} txGasFees - holds the gas fees parameters
   * @returns {TransactionMeta} the txMeta of the updated transaction
   */
  updateTransactionGasFees(txId, {
    gas,
    gasLimit,
    gasPrice,
    maxPriorityFeePerGas,
    maxFeePerGas,
    estimateUsed,
    estimateSuggested,
    defaultGasEstimates,
    originalGasEstimate,
    userEditedGasLimit,
    userFeeLevel
  }) {
    this._throwErrorIfNotUnapprovedTx(txId, 'updateTransactionGasFees');
    let txGasFees = {
      txParams: {
        gas,
        gasLimit,
        gasPrice,
        maxPriorityFeePerGas,
        maxFeePerGas
      },
      estimateUsed,
      estimateSuggested,
      defaultGasEstimates,
      originalGasEstimate,
      userEditedGasLimit,
      userFeeLevel
    };

    // only update what is defined
    txGasFees.txParams = (0, _lodash.pickBy)(txGasFees.txParams);
    txGasFees = (0, _lodash.pickBy)(txGasFees);
    const note = `Update Transaction Gas Fees for ${txId}`;
    this._updateTransaction(txId, txGasFees, note);
    return this._getTransaction(txId);
  }

  /**
   * updates the estimate base fees of the transaction with id if the transaction state is unapproved
   *
   * @param {string} txId - transaction id
   * @param {object} txEstimateBaseFees - holds the estimate base fees parameters
   * @param {string} txEstimateBaseFees.estimatedBaseFee
   * @param {string} txEstimateBaseFees.decEstimatedBaseFee
   * @returns {TransactionMeta} the txMeta of the updated transaction
   */
  updateTransactionEstimatedBaseFee(txId, {
    estimatedBaseFee,
    decEstimatedBaseFee
  }) {
    this._throwErrorIfNotUnapprovedTx(txId, 'updateTransactionEstimatedBaseFee');
    let txEstimateBaseFees = {
      estimatedBaseFee,
      decEstimatedBaseFee
    };
    // only update what is defined
    txEstimateBaseFees = (0, _lodash.pickBy)(txEstimateBaseFees);
    const note = `Update Transaction Estimated Base Fees for ${txId}`;
    this._updateTransaction(txId, txEstimateBaseFees, note);
    return this._getTransaction(txId);
  }

  /**
   * updates a swap approval transaction with provided metadata and source token symbol
   *  if the transaction state is unapproved.
   *
   * @param {string} txId
   * @param {object} swapApprovalTransaction - holds the metadata and token symbol
   * @param {string} swapApprovalTransaction.type
   * @param {string} swapApprovalTransaction.sourceTokenSymbol
   * @returns {TransactionMeta} the txMeta of the updated transaction
   */
  updateSwapApprovalTransaction(txId, {
    type,
    sourceTokenSymbol
  }) {
    this._throwErrorIfNotUnapprovedTx(txId, 'updateSwapApprovalTransaction');
    let swapApprovalTransaction = {
      type,
      sourceTokenSymbol
    };
    // only update what is defined
    swapApprovalTransaction = (0, _lodash.pickBy)(swapApprovalTransaction);
    const note = `Update Swap Approval Transaction for ${txId}`;
    this._updateTransaction(txId, swapApprovalTransaction, note);
    return this._getTransaction(txId);
  }

  /**
   * updates a swap transaction with provided metadata and source token symbol
   *  if the transaction state is unapproved.
   *
   * @param {string} txId
   * @param {object} swapTransaction - holds the metadata
   * @param {string} swapTransaction.sourceTokenSymbol
   * @param {string} swapTransaction.destinationTokenSymbol
   * @param {string} swapTransaction.type
   * @param {string} swapTransaction.destinationTokenDecimals
   * @param {string} swapTransaction.destinationTokenAddress
   * @param {string} swapTransaction.swapMetaData
   * @param {string} swapTransaction.swapTokenValue
   * @param {string} swapTransaction.estimatedBaseFee
   * @param {string} swapTransaction.approvalTxId
   * @returns {TransactionMeta} the txMeta of the updated transaction
   */
  updateSwapTransaction(txId, {
    sourceTokenSymbol,
    destinationTokenSymbol,
    type,
    destinationTokenDecimals,
    destinationTokenAddress,
    swapMetaData,
    swapTokenValue,
    estimatedBaseFee,
    approvalTxId
  }) {
    this._throwErrorIfNotUnapprovedTx(txId, 'updateSwapTransaction');
    let swapTransaction = {
      sourceTokenSymbol,
      destinationTokenSymbol,
      type,
      destinationTokenDecimals,
      destinationTokenAddress,
      swapMetaData,
      swapTokenValue,
      estimatedBaseFee,
      approvalTxId
    };

    // only update what is defined
    swapTransaction = (0, _lodash.pickBy)(swapTransaction);
    const note = `Update Swap Transaction for ${txId}`;
    this._updateTransaction(txId, swapTransaction, note);
    return this._getTransaction(txId);
  }

  /**
   * updates a transaction's user settings only if the transaction state is unapproved
   *
   * @param {string} txId
   * @param {object} userSettings - holds the metadata
   * @param {string} userSettings.userEditedGasLimit
   * @param {string} userSettings.userFeeLevel
   * @returns {TransactionMeta} the txMeta of the updated transaction
   */
  updateTransactionUserSettings(txId, {
    userEditedGasLimit,
    userFeeLevel
  }) {
    this._throwErrorIfNotUnapprovedTx(txId, 'updateTransactionUserSettings');
    let userSettings = {
      userEditedGasLimit,
      userFeeLevel
    };
    // only update what is defined
    userSettings = (0, _lodash.pickBy)(userSettings);
    const note = `Update User Settings for ${txId}`;
    this._updateTransaction(txId, userSettings, note);
    return this._getTransaction(txId);
  }

  /**
   * append new sendFlowHistory to the transaction with id if the transaction
   * state is unapproved. Returns the updated transaction.
   *
   * @param {string} txId - transaction id
   * @param {number} currentSendFlowHistoryLength - sendFlowHistory entries currently
   * @param {Array<{ entry: string, timestamp: number }>} sendFlowHistory -
   *  history to add to the sendFlowHistory property of txMeta.
   * @returns {TransactionMeta} the txMeta of the updated transaction
   */
  updateTransactionSendFlowHistory(txId, currentSendFlowHistoryLength, sendFlowHistory) {
    var _txMeta$sendFlowHisto;
    this._throwErrorIfNotUnapprovedTx(txId, 'updateTransactionSendFlowHistory');
    const txMeta = this._getTransaction(txId);
    if (currentSendFlowHistoryLength === ((txMeta === null || txMeta === void 0 ? void 0 : (_txMeta$sendFlowHisto = txMeta.sendFlowHistory) === null || _txMeta$sendFlowHisto === void 0 ? void 0 : _txMeta$sendFlowHisto.length) || 0)) {
      // only update what is defined
      const note = `Update sendFlowHistory for ${txId}`;
      this.txStateManager.updateTransaction({
        ...txMeta,
        sendFlowHistory: [...((txMeta === null || txMeta === void 0 ? void 0 : txMeta.sendFlowHistory) ?? []), ...sendFlowHistory]
      }, note);
    }
    return this._getTransaction(txId);
  }
  async addTransactionGasDefaults(txMeta) {
    const contractCode = await (0, _transaction2.determineTransactionContractCode)(txMeta.txParams, this.query);
    let updateTxMeta = txMeta;
    try {
      updateTxMeta = await this.addTxGasDefaults(txMeta, contractCode);
    } catch (error) {
      _loglevel.default.warn(error);
      updateTxMeta = this.txStateManager.getTransaction(txMeta.id);
      updateTxMeta.loadingDefaults = false;
      this.txStateManager.updateTransaction(txMeta, 'Failed to calculate gas defaults.');
      throw error;
    }
    updateTxMeta.loadingDefaults = false;

    // The history note used here 'Added new unapproved transaction.' is confusing update call only updated the gas defaults.
    // We need to improve `this.addTransaction` to accept history note and change note here.
    this.txStateManager.updateTransaction(updateTxMeta, 'Added new unapproved transaction.');
    return updateTxMeta;
  }

  // ====================================================================================================================================================

  /**
   * Validates and generates a txMeta with defaults and puts it in txStateManager
   * store.
   *
   * actionId is used to uniquely identify a request to create a transaction.
   * Only 1 transaction will be created for multiple requests with same actionId.
   * actionId is fix used for making this action idempotent to deal with scenario when
   * action is invoked multiple times with same parameters in MV3 due to service worker re-activation.
   *
   * @param txMethodType
   * @param txParams
   * @param origin
   * @param transactionType
   * @param sendFlowHistory
   * @param actionId
   * @returns {txMeta}
   */
  async addUnapprovedTransaction(txMethodType, txParams, origin, transactionType, sendFlowHistory = [], actionId) {
    if (transactionType !== undefined && !VALID_UNAPPROVED_TRANSACTION_TYPES.includes(transactionType)) {
      throw new Error(`TransactionController - invalid transactionType value: ${transactionType}`);
    }

    // If a transaction is found with the same actionId, do not create a new speed-up transaction.
    if (actionId) {
      let existingTxMeta = this.txStateManager.getTransactionWithActionId(actionId);
      if (existingTxMeta) {
        this.emit('newUnapprovedTx', existingTxMeta);
        existingTxMeta = await this.addTransactionGasDefaults(existingTxMeta);
        this._requestApproval(existingTxMeta);
        return existingTxMeta;
      }
    }

    // validate
    const normalizedTxParams = txUtils.normalizeTxParams(txParams);
    const eip1559Compatibility = await this.getEIP1559Compatibility();
    txUtils.validateTxParams(normalizedTxParams, eip1559Compatibility);

    /**
     * `generateTxMeta` adds the default txMeta properties to the passed object.
     * These include the tx's `id`. As we use the id for determining order of
     * txes in the tx-state-manager, it is necessary to call the asynchronous
     * method `determineTransactionType` after `generateTxMeta`.
     */
    let txMeta = this.txStateManager.generateTxMeta({
      txParams: normalizedTxParams,
      origin,
      sendFlowHistory
    });

    // Add actionId to txMeta to check if same actionId is seen again
    // IF request to create transaction with same actionId is submitted again, new transaction will not be added for it.
    if (actionId) {
      txMeta.actionId = actionId;
    }
    if (origin === _app.ORIGIN_METAMASK) {
      // Assert the from address is the selected address
      if (normalizedTxParams.from !== this.getSelectedAddress()) {
        throw _ethRpcErrors.ethErrors.rpc.internal({
          message: `Internally initiated transaction is using invalid account.`,
          data: {
            origin,
            fromAddress: normalizedTxParams.from,
            selectedAddress: this.getSelectedAddress()
          }
        });
      }
    } else {
      // Assert that the origin has permissions to initiate transactions from
      // the specified address
      const permittedAddresses = await this.getPermittedAccounts(origin);
      if (!permittedAddresses.includes(normalizedTxParams.from)) {
        throw _ethRpcErrors.ethErrors.provider.unauthorized({
          data: {
            origin
          }
        });
      }
    }
    const {
      type
    } = await (0, _transaction2.determineTransactionType)(normalizedTxParams, this.query);
    txMeta.type = transactionType || type;

    // ensure value
    txMeta.txParams.value = txMeta.txParams.value ? (0, _util.addHexPrefix)(txMeta.txParams.value) : '0x0';
    if (txMethodType && this.securityProviderRequest) {
      const securityProviderResponse = await this.securityProviderRequest(txMeta, txMethodType);
      txMeta.securityProviderResponse = securityProviderResponse;
    }
    this.addTransaction(txMeta);
    this.emit('newUnapprovedTx', txMeta);
    txMeta = await this.addTransactionGasDefaults(txMeta);
    this._requestApproval(txMeta);
    return txMeta;
  }

  /**
   * Adds the tx gas defaults: gas && gasPrice
   *
   * @param {object} txMeta - the txMeta object
   * @param getCodeResponse
   * @returns {Promise<object>} resolves with txMeta
   */
  async addTxGasDefaults(txMeta, getCodeResponse) {
    const eip1559Compatibility = txMeta.txParams.type !== _transaction.TransactionEnvelopeType.legacy && (await this.getEIP1559Compatibility());
    const {
      gasPrice: defaultGasPrice,
      maxFeePerGas: defaultMaxFeePerGas,
      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas
    } = await this._getDefaultGasFees(txMeta, eip1559Compatibility);
    const {
      gasLimit: defaultGasLimit,
      simulationFails
    } = await this._getDefaultGasLimit(txMeta, getCodeResponse);

    // eslint-disable-next-line no-param-reassign
    txMeta = this.txStateManager.getTransaction(txMeta.id);
    if (simulationFails) {
      txMeta.simulationFails = simulationFails;
    }
    if (eip1559Compatibility) {
      const advancedGasFeeDefaultValues = this.getAdvancedGasFee();
      if (Boolean(advancedGasFeeDefaultValues) && !SWAP_TRANSACTION_TYPES.includes(txMeta.type)) {
        txMeta.userFeeLevel = _gas.CUSTOM_GAS_ESTIMATE;
        txMeta.txParams.maxFeePerGas = (0, _conversion.decGWEIToHexWEI)(advancedGasFeeDefaultValues.maxBaseFee);
        txMeta.txParams.maxPriorityFeePerGas = (0, _conversion.decGWEIToHexWEI)(advancedGasFeeDefaultValues.priorityFee);
      } else if (txMeta.txParams.gasPrice && !txMeta.txParams.maxFeePerGas && !txMeta.txParams.maxPriorityFeePerGas) {
        // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas
        //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.
        txMeta.txParams.maxFeePerGas = txMeta.txParams.gasPrice;
        txMeta.txParams.maxPriorityFeePerGas = txMeta.txParams.gasPrice;
        if (txMeta.origin === _app.ORIGIN_METAMASK) {
          txMeta.userFeeLevel = _gas.CUSTOM_GAS_ESTIMATE;
        } else {
          txMeta.userFeeLevel = _gas.PriorityLevels.dAppSuggested;
        }
      } else {
        if (defaultMaxFeePerGas && defaultMaxPriorityFeePerGas && !txMeta.txParams.maxFeePerGas && !txMeta.txParams.maxPriorityFeePerGas || txMeta.origin === _app.ORIGIN_METAMASK) {
          txMeta.userFeeLevel = _gas.GasRecommendations.medium;
        } else {
          txMeta.userFeeLevel = _gas.PriorityLevels.dAppSuggested;
        }
        if (defaultMaxFeePerGas && !txMeta.txParams.maxFeePerGas) {
          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas
          // with the one returned by the gasFeeController, if that is available.
          txMeta.txParams.maxFeePerGas = defaultMaxFeePerGas;
        }
        if (defaultMaxPriorityFeePerGas && !txMeta.txParams.maxPriorityFeePerGas) {
          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas
          // with the one returned by the gasFeeController, if that is available.
          txMeta.txParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;
        }
        if (defaultGasPrice && !txMeta.txParams.maxFeePerGas) {
          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available
          // from the gasFeeController, then we set maxFeePerGas to the defaultGasPrice, assuming it is
          // available.
          txMeta.txParams.maxFeePerGas = defaultGasPrice;
        }
        if (txMeta.txParams.maxFeePerGas && !txMeta.txParams.maxPriorityFeePerGas) {
          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is
          // available from the gasFeeController, then we set maxPriorityFeePerGas to
          // txMeta.txParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas
          // set by the dapp, or the maxFeePerGas from the controller.
          txMeta.txParams.maxPriorityFeePerGas = txMeta.txParams.maxFeePerGas;
        }
      }

      // We remove the gasPrice param entirely when on an eip1559 compatible network

      delete txMeta.txParams.gasPrice;
    } else {
      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params
      // when not on a EIP1559 compatible network

      delete txMeta.txParams.maxPriorityFeePerGas;
      delete txMeta.txParams.maxFeePerGas;
    }

    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are
    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest
    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas
    // were available from either the dapp or the network.
    if (defaultGasPrice && !txMeta.txParams.gasPrice && !txMeta.txParams.maxPriorityFeePerGas && !txMeta.txParams.maxFeePerGas) {
      txMeta.txParams.gasPrice = defaultGasPrice;
    }
    if (defaultGasLimit && !txMeta.txParams.gas) {
      txMeta.txParams.gas = defaultGasLimit;
      txMeta.originalGasEstimate = defaultGasLimit;
    }
    txMeta.defaultGasEstimates = {
      estimateType: txMeta.userFeeLevel,
      gas: txMeta.txParams.gas,
      gasPrice: txMeta.txParams.gasPrice,
      maxFeePerGas: txMeta.txParams.maxFeePerGas,
      maxPriorityFeePerGas: txMeta.txParams.maxPriorityFeePerGas
    };
    return txMeta;
  }

  /**
   * Gets default gas fees, or returns `undefined` if gas fees are already set
   *
   * @param {object} txMeta - The txMeta object
   * @param eip1559Compatibility
   * @returns {Promise<string|undefined>} The default gas price
   */
  async _getDefaultGasFees(txMeta, eip1559Compatibility) {
    if (!eip1559Compatibility && txMeta.txParams.gasPrice || eip1559Compatibility && txMeta.txParams.maxFeePerGas && txMeta.txParams.maxPriorityFeePerGas) {
      return {};
    }
    try {
      const {
        gasFeeEstimates,
        gasEstimateType
      } = await this._getEIP1559GasFeeEstimates();
      if (eip1559Compatibility && gasEstimateType === _gas.GasEstimateTypes.feeMarket) {
        const {
          medium: {
            suggestedMaxPriorityFeePerGas,
            suggestedMaxFeePerGas
          } = {}
        } = gasFeeEstimates;
        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {
          return {
            maxFeePerGas: (0, _conversion.decGWEIToHexWEI)(suggestedMaxFeePerGas),
            maxPriorityFeePerGas: (0, _conversion.decGWEIToHexWEI)(suggestedMaxPriorityFeePerGas)
          };
        }
      } else if (gasEstimateType === _gas.GasEstimateTypes.legacy) {
        // The LEGACY type includes low, medium and high estimates of
        // gas price values.
        return {
          gasPrice: (0, _conversion.decGWEIToHexWEI)(gasFeeEstimates.medium)
        };
      } else if (gasEstimateType === _gas.GasEstimateTypes.ethGasPrice) {
        // The ETH_GASPRICE type just includes a single gas price property,
        // which we can assume was retrieved from eth_gasPrice
        return {
          gasPrice: (0, _conversion.decGWEIToHexWEI)(gasFeeEstimates.gasPrice)
        };
      }
    } catch (e) {
      console.error(e);
    }
    const gasPrice = await this.query.gasPrice();
    return {
      gasPrice: gasPrice && (0, _util.addHexPrefix)(gasPrice.toString(16))
    };
  }

  /**
   * Gets default gas limit, or debug information about why gas estimate failed.
   *
   * @param {object} txMeta - The txMeta object
   * @returns {Promise<object>} Object containing the default gas limit, or the simulation failure object
   */
  async _getDefaultGasLimit(txMeta) {
    const chainId = this._getCurrentChainId();
    const customNetworkGasBuffer = _network.CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP[chainId];
    const chainType = (0, _util.getChainType)(chainId);
    if (txMeta.txParams.gas) {
      return {};
    } else if (txMeta.txParams.to && txMeta.type === _transaction.TransactionType.simpleSend && chainType !== 'custom' && !txMeta.txParams.data) {
      // This is a standard ether simple send, gas requirement is exactly 21k
      return {
        gasLimit: _gas.GAS_LIMITS.SIMPLE
      };
    }
    const {
      blockGasLimit,
      estimatedGasHex,
      simulationFails
    } = await this.txGasUtil.analyzeGasUsage(txMeta);

    // add additional gas buffer to our estimation for safety
    const gasLimit = this.txGasUtil.addGasBuffer((0, _util.addHexPrefix)(estimatedGasHex), blockGasLimit, customNetworkGasBuffer);
    return {
      gasLimit,
      simulationFails
    };
  }

  /**
   * Given a TransactionMeta object, generate new gas params such that if the
   * transaction was an EIP1559 transaction, it only has EIP1559 gas fields,
   * otherwise it only has gasPrice. Will use whatever custom values are
   * specified in customGasSettings, or falls back to incrementing by a percent
   * which is defined by specifying a numerator. 11 is a 10% bump, 12 would be
   * a 20% bump, and so on.
   *
   * @param {TransactionMeta} originalTxMeta - Original transaction to use as
   *  base
   * @param {CustomGasSettings} [customGasSettings] - overrides for the gas
   *  fields to use instead of the multiplier
   * @param {number} [incrementNumerator] - Numerator from which to generate a
   *  percentage bump of gas price. E.g 11 would be a 10% bump over base.
   * @returns {{ newGasParams: CustomGasSettings, previousGasParams: CustomGasSettings }}
   */
  generateNewGasParams(originalTxMeta, customGasSettings = {}, incrementNumerator = 11) {
    const {
      txParams
    } = originalTxMeta;
    const previousGasParams = {};
    const newGasParams = {};
    if (customGasSettings.gasLimit) {
      newGasParams.gas = (customGasSettings === null || customGasSettings === void 0 ? void 0 : customGasSettings.gas) ?? _gas.GAS_LIMITS.SIMPLE;
    }
    if (customGasSettings.estimateSuggested) {
      newGasParams.estimateSuggested = customGasSettings.estimateSuggested;
    }
    if (customGasSettings.estimateUsed) {
      newGasParams.estimateUsed = customGasSettings.estimateUsed;
    }
    if ((0, _transaction2.isEIP1559Transaction)(originalTxMeta)) {
      previousGasParams.maxFeePerGas = txParams.maxFeePerGas;
      previousGasParams.maxPriorityFeePerGas = txParams.maxPriorityFeePerGas;
      newGasParams.maxFeePerGas = (customGasSettings === null || customGasSettings === void 0 ? void 0 : customGasSettings.maxFeePerGas) || (0, _conversion.bnToHex)((0, _util.BnMultiplyByFraction)((0, _util.hexToBn)(txParams.maxFeePerGas), incrementNumerator, 10));
      newGasParams.maxPriorityFeePerGas = (customGasSettings === null || customGasSettings === void 0 ? void 0 : customGasSettings.maxPriorityFeePerGas) || (0, _conversion.bnToHex)((0, _util.BnMultiplyByFraction)((0, _util.hexToBn)(txParams.maxPriorityFeePerGas), incrementNumerator, 10));
    } else {
      previousGasParams.gasPrice = txParams.gasPrice;
      newGasParams.gasPrice = (customGasSettings === null || customGasSettings === void 0 ? void 0 : customGasSettings.gasPrice) || (0, _conversion.bnToHex)((0, _util.BnMultiplyByFraction)((0, _util.hexToBn)(txParams.gasPrice), incrementNumerator, 10));
    }
    return {
      previousGasParams,
      newGasParams
    };
  }

  /**
   * Creates a new approved transaction to attempt to cancel a previously submitted transaction. The
   * new transaction contains the same nonce as the previous, is a basic ETH transfer of 0x value to
   * the sender's address, and has a higher gasPrice than that of the previous transaction.
   *
   * @param {number} originalTxId - the id of the txMeta that you want to attempt to cancel
   * @param {CustomGasSettings} [customGasSettings] - overrides to use for gas
   *  params instead of allowing this method to generate them
   * @param options
   * @param options.estimatedBaseFee
   * @param options.actionId
   * @returns {txMeta}
   */
  async createCancelTransaction(originalTxId, customGasSettings, {
    estimatedBaseFee,
    actionId
  } = {}) {
    // If transaction is found for same action id, do not create a new cancel transaction.
    if (actionId) {
      const existingTxMeta = this.txStateManager.getTransactionWithActionId(actionId);
      if (existingTxMeta) {
        return existingTxMeta;
      }
    }
    const originalTxMeta = this.txStateManager.getTransaction(originalTxId);
    const {
      txParams
    } = originalTxMeta;
    const {
      from,
      nonce
    } = txParams;
    const {
      previousGasParams,
      newGasParams
    } = this.generateNewGasParams(originalTxMeta, {
      ...customGasSettings,
      // We want to override the previous transactions gasLimit because it
      // will now be a simple send instead of whatever it was before such
      // as a token transfer or contract call.
      gasLimit: customGasSettings.gasLimit || _gas.GAS_LIMITS.SIMPLE
    });
    const newTxMeta = this.txStateManager.generateTxMeta({
      txParams: {
        from,
        to: from,
        nonce,
        value: '0x0',
        ...newGasParams
      },
      previousGasParams,
      loadingDefaults: false,
      status: _transaction.TransactionStatus.approved,
      type: _transaction.TransactionType.cancel,
      actionId
    });
    if (estimatedBaseFee) {
      newTxMeta.estimatedBaseFee = estimatedBaseFee;
    }
    this.addTransaction(newTxMeta);
    await this.approveTransaction(newTxMeta.id, actionId, {
      hasApprovalRequest: false
    });
    return newTxMeta;
  }

  /**
   * Creates a new approved transaction to attempt to speed up a previously submitted transaction. The
   * new transaction contains the same nonce as the previous. By default, the new transaction will use
   * the same gas limit and a 10% higher gas price, though it is possible to set a custom value for
   * each instead.
   *
   * @param {number} originalTxId - the id of the txMeta that you want to speed up
   * @param {CustomGasSettings} [customGasSettings] - overrides to use for gas
   *  params instead of allowing this method to generate them
   * @param options
   * @param options.estimatedBaseFee
   * @param options.actionId
   * @returns {txMeta}
   */
  async createSpeedUpTransaction(originalTxId, customGasSettings, {
    estimatedBaseFee,
    actionId
  } = {}) {
    // If transaction is found for same action id, do not create a new speed-up transaction.
    if (actionId) {
      const existingTxMeta = this.txStateManager.getTransactionWithActionId(actionId);
      if (existingTxMeta) {
        return existingTxMeta;
      }
    }
    const originalTxMeta = this.txStateManager.getTransaction(originalTxId);
    const {
      txParams
    } = originalTxMeta;
    const {
      previousGasParams,
      newGasParams
    } = this.generateNewGasParams(originalTxMeta, customGasSettings);
    const newTxMeta = this.txStateManager.generateTxMeta({
      txParams: {
        ...txParams,
        ...newGasParams
      },
      previousGasParams,
      loadingDefaults: false,
      status: _transaction.TransactionStatus.approved,
      type: _transaction.TransactionType.retry,
      originalType: originalTxMeta.type,
      actionId
    });
    if (estimatedBaseFee) {
      newTxMeta.estimatedBaseFee = estimatedBaseFee;
    }
    this.addTransaction(newTxMeta);
    await this.approveTransaction(newTxMeta.id, actionId, {
      hasApprovalRequest: false
    });
    return newTxMeta;
  }

  /**
   * updates the txMeta in the txStateManager
   *
   * @param {object} txMeta - the updated txMeta
   */
  async updateTransaction(txMeta) {
    this.txStateManager.updateTransaction(txMeta, 'confTx: user updated transaction');
  }

  /**
   * updates and approves the transaction
   *
   * @param {object} txMeta
   * @param {string} actionId
   */
  async updateAndApproveTransaction(txMeta, actionId) {
    this.txStateManager.updateTransaction(txMeta, 'confTx: user approved transaction');
    await this.approveTransaction(txMeta.id, actionId);
  }

  /**
   * sets the tx status to approved
   * auto fills the nonce
   * signs the transaction
   * publishes the transaction
   * if any of these steps fails the tx status will be set to failed
   *
   * @param {number} txId - the tx's Id
   * @param {string} actionId - actionId passed from UI
   * @param opts - options object
   * @param opts.hasApprovalRequest - whether the transaction has an approval request
   */
  async approveTransaction(txId, actionId, {
    hasApprovalRequest = true
  } = {}) {
    // TODO: Move this safety out of this function.
    // Since this transaction is async,
    // we need to keep track of what is currently being signed,
    // So that we do not increment nonce + resubmit something
    // that is already being incremented & signed.
    const txMeta = this.txStateManager.getTransaction(txId);
    if (this.inProcessOfSigning.has(txId)) {
      return;
    }
    this.inProcessOfSigning.add(txId);
    let nonceLock;
    try {
      // approve
      this.txStateManager.setTxStatusApproved(txId);
      if (hasApprovalRequest) {
        this._acceptApproval(txMeta);
      }
      // get next nonce
      const fromAddress = txMeta.txParams.from;
      // wait for a nonce
      let {
        customNonceValue
      } = txMeta;
      customNonceValue = Number(customNonceValue);
      nonceLock = await this.nonceTracker.getNonceLock(fromAddress);
      // add nonce to txParams
      // if txMeta has previousGasParams then it is a retry at same nonce with
      // higher gas settings and therefor the nonce should not be recalculated
      const nonce = txMeta.previousGasParams ? txMeta.txParams.nonce : nonceLock.nextNonce;
      const customOrNonce = customNonceValue === 0 ? customNonceValue : customNonceValue || nonce;
      txMeta.txParams.nonce = (0, _util.addHexPrefix)(customOrNonce.toString(16));
      // add nonce debugging information to txMeta
      txMeta.nonceDetails = nonceLock.nonceDetails;
      if (customNonceValue) {
        txMeta.nonceDetails.customNonceValue = customNonceValue;
      }
      this.txStateManager.updateTransaction(txMeta, 'transactions#approveTransaction');
      // sign transaction
      const rawTx = await this.signTransaction(txId);
      await this.publishTransaction(txId, rawTx, actionId);
      this._trackTransactionMetricsEvent(txMeta, _transaction.TransactionMetaMetricsEvent.approved, actionId);
      // must set transaction to submitted/failed before releasing lock
      nonceLock.releaseLock();
    } catch (err) {
      // this is try-catch wrapped so that we can guarantee that the nonceLock is released
      try {
        this._failTransaction(txId, err, actionId);
      } catch (err2) {
        _loglevel.default.error(err2);
      }
      // must set transaction to submitted/failed before releasing lock
      if (nonceLock) {
        nonceLock.releaseLock();
      }
      // continue with error chain
      throw err;
    } finally {
      this.inProcessOfSigning.delete(txId);
    }
  }
  async approveTransactionsWithSameNonce(listOfTxParams = []) {
    if (listOfTxParams.length === 0) {
      return '';
    }
    const initialTx = listOfTxParams[0];
    const common = await this.getCommonConfiguration(initialTx.from);
    const initialTxAsEthTx = _tx.TransactionFactory.fromTxData(initialTx, {
      common
    });
    const initialTxAsSerializedHex = (0, _ethereumjsUtil.bufferToHex)(initialTxAsEthTx.serialize());
    if (this.inProcessOfSigning.has(initialTxAsSerializedHex)) {
      return '';
    }
    this.inProcessOfSigning.add(initialTxAsSerializedHex);
    let rawTxes, nonceLock;
    try {
      // TODO: we should add a check to verify that all transactions have the same from address
      const fromAddress = initialTx.from;
      nonceLock = await this.nonceTracker.getNonceLock(fromAddress);
      const nonce = nonceLock.nextNonce;
      rawTxes = await Promise.all(listOfTxParams.map(txParams => {
        txParams.nonce = (0, _util.addHexPrefix)(nonce.toString(16));
        return this.signExternalTransaction(txParams);
      }));
    } catch (err) {
      _loglevel.default.error(err);
      // must set transaction to submitted/failed before releasing lock
      // continue with error chain
      throw err;
    } finally {
      if (nonceLock) {
        nonceLock.releaseLock();
      }
      this.inProcessOfSigning.delete(initialTxAsSerializedHex);
    }
    return rawTxes;
  }
  async signExternalTransaction(_txParams) {
    const normalizedTxParams = txUtils.normalizeTxParams(_txParams);
    // add network/chain id
    const chainId = this.getChainId();
    const type = (0, _transaction2.isEIP1559Transaction)({
      txParams: normalizedTxParams
    }) ? _transaction.TransactionEnvelopeType.feeMarket : _transaction.TransactionEnvelopeType.legacy;
    const txParams = {
      ...normalizedTxParams,
      type,
      gasLimit: normalizedTxParams.gas,
      chainId: new _Numeric.Numeric(chainId, 10).toPrefixedHexString()
    };
    // sign tx
    const fromAddress = txParams.from;
    const common = await this.getCommonConfiguration(fromAddress);
    const unsignedEthTx = _tx.TransactionFactory.fromTxData(txParams, {
      common
    });
    const signedEthTx = await this.signEthTx(unsignedEthTx, fromAddress);
    const rawTx = (0, _ethereumjsUtil.bufferToHex)(signedEthTx.serialize());
    return rawTx;
  }

  /**
   * adds the chain id and signs the transaction and set the status to signed
   *
   * @param {number} txId - the tx's Id
   * @returns {string} rawTx
   */
  async signTransaction(txId) {
    const txMeta = this.txStateManager.getTransaction(txId);
    // add network/chain id
    const chainId = this.getChainId();
    const type = (0, _transaction2.isEIP1559Transaction)(txMeta) ? _transaction.TransactionEnvelopeType.feeMarket : _transaction.TransactionEnvelopeType.legacy;
    const txParams = {
      ...txMeta.txParams,
      type,
      chainId,
      gasLimit: txMeta.txParams.gas
    };
    // sign tx
    const fromAddress = txParams.from;
    const common = await this.getCommonConfiguration(txParams.from);
    const unsignedEthTx = _tx.TransactionFactory.fromTxData(txParams, {
      common
    });
    const signedEthTx = await this.signEthTx(unsignedEthTx, fromAddress);

    // add r,s,v values for provider request purposes see createMetamaskMiddleware
    // and JSON rpc standard for further explanation
    txMeta.r = (0, _util.addHexPrefix)(signedEthTx.r.toString(16));
    txMeta.s = (0, _util.addHexPrefix)(signedEthTx.s.toString(16));
    txMeta.v = (0, _util.addHexPrefix)(signedEthTx.v.toString(16));
    this.txStateManager.updateTransaction(txMeta, 'transactions#signTransaction: add r, s, v values');

    // set state to signed
    this.txStateManager.setTxStatusSigned(txMeta.id);
    const rawTx = (0, _ethereumjsUtil.bufferToHex)(signedEthTx.serialize());
    return rawTx;
  }

  /**
   * publishes the raw tx and sets the txMeta to submitted
   *
   * @param {number} txId - the tx's Id
   * @param {string} rawTx - the hex string of the serialized signed transaction
   * @returns {Promise<void>}
   * @param {number} actionId - actionId passed from UI
   */
  async publishTransaction(txId, rawTx, actionId) {
    const txMeta = this.txStateManager.getTransaction(txId);
    txMeta.rawTx = rawTx;
    if (txMeta.type === _transaction.TransactionType.swap) {
      const preTxBalance = await this.query.getBalance(txMeta.txParams.from);
      txMeta.preTxBalance = preTxBalance.toString(16);
    }
    this.txStateManager.updateTransaction(txMeta, 'transactions#publishTransaction');
    let txHash;
    try {
      txHash = await this.query.sendRawTransaction(rawTx);
    } catch (error) {
      if (error.message.toLowerCase().includes('known transaction')) {
        txHash = (0, _ethereumjsUtil.keccak)((0, _ethereumjsUtil.toBuffer)((0, _util.addHexPrefix)(rawTx), 'hex')).toString('hex');
        txHash = (0, _util.addHexPrefix)(txHash);
      } else {
        throw error;
      }
    }
    this.setTxHash(txId, txHash);
    this.txStateManager.setTxStatusSubmitted(txId);
    this._trackTransactionMetricsEvent(txMeta, _transaction.TransactionMetaMetricsEvent.submitted, actionId);
  }
  async updatePostTxBalance({
    txMeta,
    txId,
    numberOfAttempts = 6
  }) {
    const postTxBalance = await this.query.getBalance(txMeta.txParams.from);
    const latestTxMeta = this.txStateManager.getTransaction(txId);
    const approvalTxMeta = latestTxMeta.approvalTxId ? this.txStateManager.getTransaction(latestTxMeta.approvalTxId) : null;
    latestTxMeta.postTxBalance = postTxBalance.toString(16);
    const isDefaultTokenAddress = (0, _swaps.isSwapsDefaultTokenAddress)(txMeta.destinationTokenAddress, txMeta.chainId);
    if (isDefaultTokenAddress && txMeta.preTxBalance === latestTxMeta.postTxBalance && numberOfAttempts > 0) {
      setTimeout(() => {
        // If postTxBalance is the same as preTxBalance, try it again.
        this.updatePostTxBalance({
          txMeta,
          txId,
          numberOfAttempts: numberOfAttempts - 1
        });
      }, UPDATE_POST_TX_BALANCE_TIMEOUT);
    } else {
      this.txStateManager.updateTransaction(latestTxMeta, 'transactions#confirmTransaction - add postTxBalance');
      this._trackSwapsMetrics(latestTxMeta, approvalTxMeta);
    }
  }

  /**
   * Sets the status of the transaction to confirmed and sets the status of nonce duplicates as
   * dropped if the txParams have data it will fetch the txReceipt
   *
   * @param {number} txId - The tx's ID
   * @param txReceipt
   * @param baseFeePerGas
   * @param blockTimestamp
   * @returns {Promise<void>}
   */
  async confirmTransaction(txId, txReceipt, baseFeePerGas, blockTimestamp) {
    // get the txReceipt before marking the transaction confirmed
    // to ensure the receipt is gotten before the ui revives the tx
    const txMeta = this.txStateManager.getTransaction(txId);
    if (!txMeta) {
      return;
    }
    try {
      const gasUsed = txUtils.normalizeTxReceiptGasUsed(txReceipt.gasUsed);
      txMeta.txReceipt = {
        ...txReceipt,
        gasUsed
      };
      if (baseFeePerGas) {
        txMeta.baseFeePerGas = baseFeePerGas;
      }
      if (blockTimestamp) {
        txMeta.blockTimestamp = blockTimestamp;
      }
      this.txStateManager.setTxStatusConfirmed(txId);
      this._markNonceDuplicatesDropped(txId);
      const {
        submittedTime
      } = txMeta;
      const metricsParams = {
        gas_used: gasUsed
      };
      if (submittedTime) {
        metricsParams.completion_time = this._getTransactionCompletionTime(submittedTime);
      }
      if (txReceipt.status === '0x0') {
        metricsParams.status = METRICS_STATUS_FAILED;
        // metricsParams.error = TODO: figure out a way to get the on-chain failure reason
      }

      this._trackTransactionMetricsEvent(txMeta, _transaction.TransactionMetaMetricsEvent.finalized, undefined, metricsParams);
      this.txStateManager.updateTransaction(txMeta, 'transactions#confirmTransaction - add txReceipt');
      if (txMeta.type === _transaction.TransactionType.swap) {
        await this.updatePostTxBalance({
          txMeta,
          txId
        });
      }
    } catch (err) {
      _loglevel.default.error(err);
    }
  }
  async confirmExternalTransaction(txMeta, txReceipt, baseFeePerGas) {
    // add external transaction
    await this.txStateManager.addExternalTransaction(txMeta);
    if (!txMeta) {
      return;
    }
    const txId = txMeta.id;
    try {
      const gasUsed = txUtils.normalizeTxReceiptGasUsed(txReceipt.gasUsed);
      txMeta.txReceipt = {
        ...txReceipt,
        gasUsed
      };
      if (baseFeePerGas) {
        txMeta.baseFeePerGas = baseFeePerGas;
      }
      this.txStateManager.setTxStatusConfirmed(txId);
      this._markNonceDuplicatesDropped(txId);
      const {
        submittedTime
      } = txMeta;
      const metricsParams = {
        gas_used: gasUsed
      };
      if (submittedTime) {
        metricsParams.completion_time = this._getTransactionCompletionTime(submittedTime);
      }
      if (txReceipt.status === '0x0') {
        metricsParams.status = METRICS_STATUS_FAILED;
        // metricsParams.error = TODO: figure out a way to get the on-chain failure reason
      }

      this._trackTransactionMetricsEvent(txMeta, _transaction.TransactionMetaMetricsEvent.finalized, undefined, metricsParams);
      this.txStateManager.updateTransaction(txMeta, 'transactions#confirmTransaction - add txReceipt');
      if (txMeta.type === _transaction.TransactionType.swap) {
        await this.updatePostTxBalance({
          txMeta,
          txId
        });
      }
    } catch (err) {
      _loglevel.default.error(err);
    }
  }

  /**
   * Convenience method for the ui thats sets the transaction to rejected
   *
   * @param {number} txId - the tx's Id
   * @param {string} actionId - actionId passed from UI
   * @returns {Promise<void>}
   */
  async cancelTransaction(txId, actionId) {
    const txMeta = this.txStateManager.getTransaction(txId);
    this.txStateManager.setTxStatusRejected(txId);
    this._rejectApproval(txMeta);
    this._trackTransactionMetricsEvent(txMeta, _transaction.TransactionMetaMetricsEvent.rejected, actionId);
  }

  /**
   * Sets the txHas on the txMeta
   *
   * @param {number} txId - the tx's Id
   * @param {string} txHash - the hash for the txMeta
   */
  setTxHash(txId, txHash) {
    // Add the tx hash to the persisted meta-tx object
    const txMeta = this.txStateManager.getTransaction(txId);
    txMeta.hash = txHash;
    this.txStateManager.updateTransaction(txMeta, 'transactions#setTxHash');
  }

  /**
   * Convenience method for the UI to easily create event fragments when the
   * fragment does not exist in state.
   *
   * @param {number} transactionId - The transaction id to create the event
   *  fragment for
   * @param {valueOf<TransactionMetaMetricsEvent>} event - event type to create
   * @param {string} actionId - actionId passed from UI
   */
  async createTransactionEventFragment(transactionId, event, actionId) {
    const txMeta = this.txStateManager.getTransaction(transactionId);
    const {
      properties,
      sensitiveProperties
    } = await this._buildEventFragmentProperties(txMeta);
    this._createTransactionEventFragment(txMeta, event, properties, sensitiveProperties, actionId);
  }

  //
  //           PRIVATE METHODS
  //
  /** maps methods for convenience*/
  _mapMethods() {
    /** @returns {object} the state in transaction controller */
    this.getState = () => this.memStore.getState();

    /** @returns {string} the user selected address */
    this.getSelectedAddress = () => this.preferencesStore.getState().selectedAddress;

    /** @returns {Array} transactions whos status is unapproved */
    this.getUnapprovedTxCount = () => Object.keys(this.txStateManager.getUnapprovedTxList()).length;

    /**
     * @returns {number} number of transactions that have the status submitted
     * @param {string} account - hex prefixed account
     */
    this.getPendingTxCount = account => this.txStateManager.getPendingTransactions(account).length;

    /**
     * see txStateManager
     *
     * @param opts
     */
    this.getTransactions = opts => this.txStateManager.getTransactions(opts);

    /** @returns {object} the saved default values for advancedGasFee */
    this.getAdvancedGasFee = () => this.preferencesStore.getState().advancedGasFee;
  }

  // called once on startup
  async _updatePendingTxsAfterFirstBlock() {
    // wait for first block so we know we're ready
    await this.blockTracker.getLatestBlock();
    // get status update for all pending transactions (for the current network)
    await this.pendingTxTracker.updatePendingTxs();
  }

  /**
   * If transaction controller was rebooted with transactions that are uncompleted
   * in steps of the transaction signing or user confirmation process it will either
   * transition txMetas to a failed state or try to redo those tasks.
   */

  _onBootCleanUp() {
    this.txStateManager.getTransactions({
      searchCriteria: {
        status: _transaction.TransactionStatus.unapproved,
        loadingDefaults: true
      }
    }).forEach(tx => {
      this.addTxGasDefaults(tx).then(txMeta => {
        txMeta.loadingDefaults = false;
        this.txStateManager.updateTransaction(txMeta, 'transactions: gas estimation for tx on boot');
      }).catch(error => {
        const txMeta = this.txStateManager.getTransaction(tx.id);
        txMeta.loadingDefaults = false;
        this.txStateManager.updateTransaction(txMeta, 'failed to estimate gas during boot cleanup.');
        this._failTransaction(txMeta.id, error);
      });
    });
    this.txStateManager.getTransactions({
      searchCriteria: {
        status: _transaction.TransactionStatus.approved
      }
    }).forEach(txMeta => {
      // Line below will try to publish transaction which is in
      // APPROVED state at the time of controller bootup
      this.approveTransaction(txMeta.id);
    });
  }

  /**
   * is called in constructor applies the listeners for pendingTxTracker txStateManager
   * and blockTracker
   */
  _setupListeners() {
    this.txStateManager.on('tx:status-update', this.emit.bind(this, 'tx:status-update'));
    this._setupBlockTrackerListener();
    this.pendingTxTracker.on('tx:warning', txMeta => {
      this.txStateManager.updateTransaction(txMeta, 'transactions/pending-tx-tracker#event: tx:warning');
    });
    this.pendingTxTracker.on('tx:failed', (txId, error) => {
      this._failTransaction(txId, error);
    });
    this.pendingTxTracker.on('tx:confirmed', (txId, transactionReceipt, baseFeePerGas, blockTimestamp) => this.confirmTransaction(txId, transactionReceipt, baseFeePerGas, blockTimestamp));
    this.pendingTxTracker.on('tx:dropped', txId => {
      this._dropTransaction(txId);
    });
    this.pendingTxTracker.on('tx:block-update', (txMeta, latestBlockNumber) => {
      if (!txMeta.firstRetryBlockNumber) {
        txMeta.firstRetryBlockNumber = latestBlockNumber;
        this.txStateManager.updateTransaction(txMeta, 'transactions/pending-tx-tracker#event: tx:block-update');
      }
    });
    this.pendingTxTracker.on('tx:retry', txMeta => {
      if (!('retryCount' in txMeta)) {
        txMeta.retryCount = 0;
      }
      txMeta.retryCount += 1;
      this.txStateManager.updateTransaction(txMeta, 'transactions/pending-tx-tracker#event: tx:retry');
    });
  }

  /**
   * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions
   * in the list have the same nonce
   *
   * @param {number} txId - the txId of the transaction that has been confirmed in a block
   */
  _markNonceDuplicatesDropped(txId) {
    // get the confirmed transactions nonce and from address
    const txMeta = this.txStateManager.getTransaction(txId);
    const {
      nonce,
      from
    } = txMeta.txParams;
    const sameNonceTxs = this.txStateManager.getTransactions({
      searchCriteria: {
        nonce,
        from
      }
    });
    if (!sameNonceTxs.length) {
      return;
    }
    // mark all same nonce transactions as dropped and give i a replacedBy hash
    sameNonceTxs.forEach(otherTxMeta => {
      if (otherTxMeta.id === txId) {
        return;
      }
      otherTxMeta.replacedBy = txMeta.hash;
      otherTxMeta.replacedById = txMeta.id;
      this.txStateManager.updateTransaction(txMeta, 'transactions/pending-tx-tracker#event: tx:confirmed reference to confirmed txHash with same nonce');
      // Drop any transaction that wasn't previously failed (off chain failure)
      if (otherTxMeta.status !== _transaction.TransactionStatus.failed) {
        this._dropTransaction(otherTxMeta.id);
      }
    });
  }
  _setupBlockTrackerListener() {
    let listenersAreActive = false;
    const latestBlockHandler = this._onLatestBlock.bind(this);
    const {
      blockTracker,
      txStateManager
    } = this;
    txStateManager.on('tx:status-update', updateSubscription);
    updateSubscription();
    function updateSubscription() {
      const pendingTxs = txStateManager.getPendingTransactions();
      if (!listenersAreActive && pendingTxs.length > 0) {
        blockTracker.on('latest', latestBlockHandler);
        listenersAreActive = true;
      } else if (listenersAreActive && !pendingTxs.length) {
        blockTracker.removeListener('latest', latestBlockHandler);
        listenersAreActive = false;
      }
    }
  }
  async _onLatestBlock(blockNumber) {
    try {
      await this.pendingTxTracker.updatePendingTxs();
    } catch (err) {
      _loglevel.default.error(err);
    }
    try {
      await this.pendingTxTracker.resubmitPendingTxs(blockNumber);
    } catch (err) {
      _loglevel.default.error(err);
    }
  }

  /**
   * Updates the memStore in transaction controller
   */
  _updateMemstore() {
    const unapprovedTxs = this.txStateManager.getUnapprovedTxList();
    const currentNetworkTxList = this.txStateManager.getTransactions({
      limit: MAX_MEMSTORE_TX_LIST_SIZE
    });
    this.memStore.updateState({
      unapprovedTxs,
      currentNetworkTxList
    });
  }
  _calculateTransactionsCost(txMeta, approvalTxMeta) {
    let approvalGasCost = '0x0';
    if (approvalTxMeta !== null && approvalTxMeta !== void 0 && approvalTxMeta.txReceipt) {
      approvalGasCost = (0, _transactionsControllerUtils.calcGasTotal)(approvalTxMeta.txReceipt.gasUsed, approvalTxMeta.txReceipt.effectiveGasPrice);
    }
    const tradeGasCost = (0, _transactionsControllerUtils.calcGasTotal)(txMeta.txReceipt.gasUsed, txMeta.txReceipt.effectiveGasPrice);
    const tradeAndApprovalGasCost = new _bignumber.default(tradeGasCost, 16).plus(approvalGasCost, 16).toString(16);
    return {
      approvalGasCostInEth: Number((0, _conversion.hexWEIToDecETH)(approvalGasCost)),
      tradeGasCostInEth: Number((0, _conversion.hexWEIToDecETH)(tradeGasCost)),
      tradeAndApprovalGasCostInEth: Number((0, _conversion.hexWEIToDecETH)(tradeAndApprovalGasCost))
    };
  }
  _trackSwapsMetrics(txMeta, approvalTxMeta) {
    if (this._getParticipateInMetrics() && txMeta.swapMetaData) {
      if (txMeta.txReceipt.status === '0x0') {
        this._trackMetaMetricsEvent({
          event: 'Swap Failed',
          sensitiveProperties: {
            ...txMeta.swapMetaData
          },
          category: _metametrics.MetaMetricsEventCategory.Swaps
        });
      } else {
        const tokensReceived = (0, _transactionsControllerUtils.getSwapsTokensReceivedFromTxMeta)(txMeta.destinationTokenSymbol, txMeta, txMeta.destinationTokenAddress, txMeta.txParams.from, txMeta.destinationTokenDecimals, approvalTxMeta, txMeta.chainId);
        const quoteVsExecutionRatio = tokensReceived ? `${new _bignumber.default(tokensReceived, 10).div(txMeta.swapMetaData.token_to_amount, 10).times(100).round(2)}%` : null;
        const estimatedVsUsedGasRatio = txMeta.txReceipt.gasUsed && txMeta.swapMetaData.estimated_gas ? `${new _bignumber.default(txMeta.txReceipt.gasUsed, 16).div(txMeta.swapMetaData.estimated_gas, 10).times(100).round(2)}%` : null;
        const transactionsCost = this._calculateTransactionsCost(txMeta, approvalTxMeta);
        this._trackMetaMetricsEvent({
          event: 'Swap Completed',
          category: _metametrics.MetaMetricsEventCategory.Swaps,
          sensitiveProperties: {
            ...txMeta.swapMetaData,
            token_to_amount_received: tokensReceived,
            quote_vs_executionRatio: quoteVsExecutionRatio,
            estimated_vs_used_gasRatio: estimatedVsUsedGasRatio,
            approval_gas_cost_in_eth: transactionsCost.approvalGasCostInEth,
            trade_gas_cost_in_eth: transactionsCost.tradeGasCostInEth,
            trade_and_approval_gas_cost_in_eth: transactionsCost.tradeAndApprovalGasCostInEth
          }
        });
      }
    }
  }

  /**
   * The allowance amount in relation to the dapp proposed amount for specific token
   *
   * @param {string} transactionApprovalAmountType - The transaction approval amount type
   * @param {string} originalApprovalAmount - The original approval amount is the originally dapp proposed token amount
   * @param {string} finalApprovalAmount - The final approval amount is the chosen amount which will be the same as the
   * originally dapp proposed token amount if the user does not edit the amount or will be a custom token amount set by the user
   */
  _allowanceAmountInRelationToDappProposedValue(transactionApprovalAmountType, originalApprovalAmount, finalApprovalAmount) {
    if (transactionApprovalAmountType === _transaction.TransactionApprovalAmountType.custom && originalApprovalAmount && finalApprovalAmount) {
      return `${new _bignumber.default(originalApprovalAmount, 10).div(finalApprovalAmount, 10).times(100).round(2)}`;
    }
    return null;
  }

  /**
   * The allowance amount in relation to the balance for that specific token
   *
   * @param {string} transactionApprovalAmountType - The transaction approval amount type
   * @param {string} dappProposedTokenAmount - The dapp proposed token amount
   * @param {string} currentTokenBalance - The balance of the token that is being send
   */
  _allowanceAmountInRelationToTokenBalance(transactionApprovalAmountType, dappProposedTokenAmount, currentTokenBalance) {
    if ((transactionApprovalAmountType === _transaction.TransactionApprovalAmountType.custom || transactionApprovalAmountType === _transaction.TransactionApprovalAmountType.dappProposed) && dappProposedTokenAmount && currentTokenBalance) {
      return `${new _bignumber.default(dappProposedTokenAmount, 16).div(currentTokenBalance, 10).times(100).round(2)}`;
    }
    return null;
  }
  async _buildEventFragmentProperties(txMeta, extraParams) {
    const {
      type,
      time,
      status,
      chainId,
      origin: referrer,
      txParams: {
        gasPrice,
        gas: gasLimit,
        maxFeePerGas,
        maxPriorityFeePerGas,
        estimateSuggested,
        estimateUsed
      },
      defaultGasEstimates,
      originalType,
      replacedById,
      metamaskNetworkId: network,
      customTokenAmount,
      dappProposedTokenAmount,
      currentTokenBalance,
      originalApprovalAmount,
      finalApprovalAmount,
      contractMethodName,
      securityProviderResponse
    } = txMeta;
    const source = referrer === _app.ORIGIN_METAMASK ? 'user' : 'dapp';
    const {
      assetType,
      tokenStandard
    } = await (0, _transaction2.determineTransactionAssetType)(txMeta, this.query, this.getTokenStandardAndDetails);
    const gasParams = {};
    if ((0, _transaction2.isEIP1559Transaction)(txMeta)) {
      gasParams.max_fee_per_gas = maxFeePerGas;
      gasParams.max_priority_fee_per_gas = maxPriorityFeePerGas;
    } else {
      gasParams.gas_price = gasPrice;
    }
    if (defaultGasEstimates) {
      const {
        estimateType
      } = defaultGasEstimates;
      if (estimateType) {
        gasParams.default_estimate = estimateType;
        let defaultMaxFeePerGas = txMeta.defaultGasEstimates.maxFeePerGas;
        let defaultMaxPriorityFeePerGas = txMeta.defaultGasEstimates.maxPriorityFeePerGas;
        if ([_gas.GasRecommendations.low, _gas.GasRecommendations.medium, _gas.GasRecommendations.high].includes(estimateType)) {
          var _gasFeeEstimates$esti, _gasFeeEstimates$esti3;
          const {
            gasFeeEstimates
          } = await this._getEIP1559GasFeeEstimates();
          if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && (_gasFeeEstimates$esti = gasFeeEstimates[estimateType]) !== null && _gasFeeEstimates$esti !== void 0 && _gasFeeEstimates$esti.suggestedMaxFeePerGas) {
            var _gasFeeEstimates$esti2;
            defaultMaxFeePerGas = (_gasFeeEstimates$esti2 = gasFeeEstimates[estimateType]) === null || _gasFeeEstimates$esti2 === void 0 ? void 0 : _gasFeeEstimates$esti2.suggestedMaxFeePerGas;
            gasParams.default_max_fee_per_gas = defaultMaxFeePerGas;
          }
          if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && (_gasFeeEstimates$esti3 = gasFeeEstimates[estimateType]) !== null && _gasFeeEstimates$esti3 !== void 0 && _gasFeeEstimates$esti3.suggestedMaxPriorityFeePerGas) {
            var _gasFeeEstimates$esti4;
            defaultMaxPriorityFeePerGas = (_gasFeeEstimates$esti4 = gasFeeEstimates[estimateType]) === null || _gasFeeEstimates$esti4 === void 0 ? void 0 : _gasFeeEstimates$esti4.suggestedMaxPriorityFeePerGas;
            gasParams.default_max_priority_fee_per_gas = defaultMaxPriorityFeePerGas;
          }
        }
      }
      if (txMeta.defaultGasEstimates.gas) {
        gasParams.default_gas = txMeta.defaultGasEstimates.gas;
      }
      if (txMeta.defaultGasEstimates.gasPrice) {
        gasParams.default_gas_price = txMeta.defaultGasEstimates.gasPrice;
      }
    }
    if (estimateSuggested) {
      gasParams.estimate_suggested = estimateSuggested;
    }
    if (estimateUsed) {
      gasParams.estimate_used = estimateUsed;
    }
    if (extraParams !== null && extraParams !== void 0 && extraParams.gas_used) {
      gasParams.gas_used = extraParams.gas_used;
    }
    const gasParamsInGwei = this._getGasValuesInGWEI(gasParams);
    let eip1559Version = '0';
    if (txMeta.txParams.maxFeePerGas) {
      eip1559Version = '2';
    }
    const contractInteractionTypes = [_transaction.TransactionType.contractInteraction, _transaction.TransactionType.tokenMethodApprove, _transaction.TransactionType.tokenMethodSafeTransferFrom, _transaction.TransactionType.tokenMethodSetApprovalForAll, _transaction.TransactionType.tokenMethodTransfer, _transaction.TransactionType.tokenMethodTransferFrom, _transaction.TransactionType.smart, _transaction.TransactionType.swap, _transaction.TransactionType.swapApproval].includes(type);
    const contractMethodNames = {
      APPROVE: 'Approve'
    };
    let transactionApprovalAmountType;
    let transactionContractMethod;
    let transactionApprovalAmountVsProposedRatio;
    let transactionApprovalAmountVsBalanceRatio;
    let transactionType = _transaction.TransactionType.simpleSend;
    if (type === _transaction.TransactionType.cancel) {
      transactionType = _transaction.TransactionType.cancel;
    } else if (type === _transaction.TransactionType.retry) {
      transactionType = originalType;
    } else if (type === _transaction.TransactionType.deployContract) {
      transactionType = _transaction.TransactionType.deployContract;
    } else if (contractInteractionTypes) {
      transactionType = _transaction.TransactionType.contractInteraction;
      transactionContractMethod = contractMethodName;
      if (transactionContractMethod === contractMethodNames.APPROVE && tokenStandard === _transaction.TokenStandard.ERC20) {
        if (dappProposedTokenAmount === '0' || customTokenAmount === '0') {
          transactionApprovalAmountType = _transaction.TransactionApprovalAmountType.revoke;
        } else if (customTokenAmount) {
          transactionApprovalAmountType = _transaction.TransactionApprovalAmountType.custom;
        } else if (dappProposedTokenAmount) {
          transactionApprovalAmountType = _transaction.TransactionApprovalAmountType.dappProposed;
        }
        transactionApprovalAmountVsProposedRatio = this._allowanceAmountInRelationToDappProposedValue(transactionApprovalAmountType, originalApprovalAmount, finalApprovalAmount);
        transactionApprovalAmountVsBalanceRatio = this._allowanceAmountInRelationToTokenBalance(transactionApprovalAmountType, dappProposedTokenAmount, currentTokenBalance);
      }
    }
    const replacedTxMeta = this._getTransaction(replacedById);
    const TRANSACTION_REPLACEMENT_METHODS = {
      RETRY: _transaction.TransactionType.retry,
      CANCEL: _transaction.TransactionType.cancel,
      SAME_NONCE: 'other'
    };
    let transactionReplaced;
    if (extraParams !== null && extraParams !== void 0 && extraParams.dropped) {
      transactionReplaced = TRANSACTION_REPLACEMENT_METHODS.SAME_NONCE;
      if ((replacedTxMeta === null || replacedTxMeta === void 0 ? void 0 : replacedTxMeta.type) === _transaction.TransactionType.cancel) {
        transactionReplaced = TRANSACTION_REPLACEMENT_METHODS.CANCEL;
      } else if ((replacedTxMeta === null || replacedTxMeta === void 0 ? void 0 : replacedTxMeta.type) === _transaction.TransactionType.retry) {
        transactionReplaced = TRANSACTION_REPLACEMENT_METHODS.RETRY;
      }
    }
    let uiCustomizations;
    if ((securityProviderResponse === null || securityProviderResponse === void 0 ? void 0 : securityProviderResponse.flagAsDangerous) === 1) {
      uiCustomizations = ['flagged_as_malicious'];
    } else if ((securityProviderResponse === null || securityProviderResponse === void 0 ? void 0 : securityProviderResponse.flagAsDangerous) === 2) {
      uiCustomizations = ['flagged_as_safety_unknown'];
    } else {
      uiCustomizations = null;
    }
    let properties = {
      chain_id: chainId,
      referrer,
      source,
      network,
      eip_1559_version: eip1559Version,
      gas_edit_type: 'none',
      gas_edit_attempted: 'none',
      account_type: await this.getAccountType(this.getSelectedAddress()),
      device_model: await this.getDeviceModel(this.getSelectedAddress()),
      asset_type: assetType,
      token_standard: tokenStandard,
      transaction_type: transactionType,
      transaction_speed_up: type === _transaction.TransactionType.retry,
      ui_customizations: uiCustomizations
    };
    if (transactionContractMethod === contractMethodNames.APPROVE) {
      properties = {
        ...properties,
        transaction_approval_amount_type: transactionApprovalAmountType
      };
    }
    let sensitiveProperties = {
      status,
      transaction_envelope_type: (0, _transaction2.isEIP1559Transaction)(txMeta) ? _transactionsControllerUtils.TRANSACTION_ENVELOPE_TYPE_NAMES.FEE_MARKET : _transactionsControllerUtils.TRANSACTION_ENVELOPE_TYPE_NAMES.LEGACY,
      first_seen: time,
      gas_limit: gasLimit,
      transaction_contract_method: transactionContractMethod,
      transaction_replaced: transactionReplaced,
      ...extraParams,
      ...gasParamsInGwei
    };
    if (transactionContractMethod === contractMethodNames.APPROVE) {
      sensitiveProperties = {
        ...sensitiveProperties,
        transaction_approval_amount_vs_balance_ratio: transactionApprovalAmountVsBalanceRatio,
        transaction_approval_amount_vs_proposed_ratio: transactionApprovalAmountVsProposedRatio
      };
    }
    return {
      properties,
      sensitiveProperties
    };
  }

  /**
   * Helper method that checks for the presence of an existing fragment by id
   * appropriate for the type of event that triggered fragment creation. If the
   * appropriate fragment exists, then nothing is done. If it does not exist a
   * new event fragment is created with the appropriate payload.
   *
   * @param {TransactionMeta} txMeta - Transaction meta object
   * @param {TransactionMetaMetricsEvent} event - The event type that
   *  triggered fragment creation
   * @param {object} properties - properties to include in the fragment
   * @param {object} [sensitiveProperties] - sensitive properties to include in
   * @param {object} [actionId] - actionId passed from UI
   *  the fragment
   */
  _createTransactionEventFragment(txMeta, event, properties, sensitiveProperties, actionId) {
    const isSubmitted = [_transaction.TransactionMetaMetricsEvent.finalized, _transaction.TransactionMetaMetricsEvent.submitted].includes(event);
    const uniqueIdentifier = `transaction-${isSubmitted ? 'submitted' : 'added'}-${txMeta.id}`;
    const fragment = this.getEventFragmentById(uniqueIdentifier);
    if (typeof fragment !== 'undefined') {
      return;
    }
    switch (event) {
      // When a transaction is added to the controller, we know that the user
      // will be presented with a confirmation screen. The user will then
      // either confirm or reject that transaction. Each has an associated
      // event we want to track. While we don't necessarily need an event
      // fragment to model this, having one allows us to record additional
      // properties onto the event from the UI. For example, when the user
      // edits the transactions gas params we can record that property and
      // then get analytics on the number of transactions in which gas edits
      // occur.
      case _transaction.TransactionMetaMetricsEvent.added:
        this.createEventFragment({
          category: _metametrics.MetaMetricsEventCategory.Transactions,
          initialEvent: _transaction.TransactionMetaMetricsEvent.added,
          successEvent: _transaction.TransactionMetaMetricsEvent.approved,
          failureEvent: _transaction.TransactionMetaMetricsEvent.rejected,
          properties,
          sensitiveProperties,
          persist: true,
          uniqueIdentifier,
          actionId
        });
        break;
      // If for some reason an approval or rejection occurs without the added
      // fragment existing in memory, we create the added fragment but without
      // the initialEvent firing. This is to prevent possible duplication of
      // events. A good example why this might occur is if the user had
      // unapproved transactions in memory when updating to the version that
      // includes this change. A migration would have also helped here but this
      // implementation hardens against other possible bugs where a fragment
      // does not exist.
      case _transaction.TransactionMetaMetricsEvent.approved:
      case _transaction.TransactionMetaMetricsEvent.rejected:
        this.createEventFragment({
          category: _metametrics.MetaMetricsEventCategory.Transactions,
          successEvent: _transaction.TransactionMetaMetricsEvent.approved,
          failureEvent: _transaction.TransactionMetaMetricsEvent.rejected,
          properties,
          sensitiveProperties,
          persist: true,
          uniqueIdentifier,
          actionId
        });
        break;
      // When a transaction is submitted it will always result in updating
      // to a finalized state (dropped, failed, confirmed) -- eventually.
      // However having a fragment started at this stage allows augmenting
      // analytics data with user interactions such as speeding up and
      // canceling the transactions. From this controllers perspective a new
      // transaction with a new id is generated for speed up and cancel
      // transactions, but from the UI we could augment the previous ID with
      // supplemental data to show user intent. Such as when they open the
      // cancel UI but don't submit. We can record that this happened and add
      // properties to the transaction event.
      case _transaction.TransactionMetaMetricsEvent.submitted:
        this.createEventFragment({
          category: _metametrics.MetaMetricsEventCategory.Transactions,
          initialEvent: _transaction.TransactionMetaMetricsEvent.submitted,
          successEvent: _transaction.TransactionMetaMetricsEvent.finalized,
          properties,
          sensitiveProperties,
          persist: true,
          uniqueIdentifier,
          actionId
        });
        break;
      // If for some reason a transaction is finalized without the submitted
      // fragment existing in memory, we create the submitted fragment but
      // without the initialEvent firing. This is to prevent possible
      // duplication of events. A good example why this might occur is if th
      // user had pending transactions in memory when updating to the version
      // that includes this change. A migration would have also helped here but
      // this implementation hardens against other possible bugs where a
      // fragment does not exist.
      case _transaction.TransactionMetaMetricsEvent.finalized:
        this.createEventFragment({
          category: _metametrics.MetaMetricsEventCategory.Transactions,
          successEvent: _transaction.TransactionMetaMetricsEvent.finalized,
          properties,
          sensitiveProperties,
          persist: true,
          uniqueIdentifier,
          actionId
        });
        break;
      default:
        break;
    }
  }

  /**
   * Extracts relevant properties from a transaction meta
   * object and uses them to create and send metrics for various transaction
   * events.
   *
   * @param {object} txMeta - the txMeta object
   * @param {TransactionMetaMetricsEvent} event - the name of the transaction event
   * @param {string} actionId - actionId passed from UI
   * @param {object} extraParams - optional props and values to include in sensitiveProperties
   */
  async _trackTransactionMetricsEvent(txMeta, event, actionId, extraParams = {}) {
    if (!txMeta) {
      return;
    }
    const {
      properties,
      sensitiveProperties
    } = await this._buildEventFragmentProperties(txMeta, extraParams);

    // Create event fragments for event types that spawn fragments, and ensure
    // existence of fragments for event types that act upon them.
    this._createTransactionEventFragment(txMeta, event, properties, sensitiveProperties, actionId);
    let id;
    switch (event) {
      // If the user approves a transaction, finalize the transaction added
      // event fragment.
      case _transaction.TransactionMetaMetricsEvent.approved:
        id = `transaction-added-${txMeta.id}`;
        this.updateEventFragment(id, {
          properties,
          sensitiveProperties
        });
        this.finalizeEventFragment(id);
        break;
      // If the user rejects a transaction, finalize the transaction added
      // event fragment. with the abandoned flag set.
      case _transaction.TransactionMetaMetricsEvent.rejected:
        id = `transaction-added-${txMeta.id}`;
        this.updateEventFragment(id, {
          properties,
          sensitiveProperties
        });
        this.finalizeEventFragment(id, {
          abandoned: true
        });
        break;
      // When a transaction is finalized, also finalize the transaction
      // submitted event fragment.
      case _transaction.TransactionMetaMetricsEvent.finalized:
        id = `transaction-submitted-${txMeta.id}`;
        this.updateEventFragment(id, {
          properties,
          sensitiveProperties
        });
        this.finalizeEventFragment(`transaction-submitted-${txMeta.id}`);
        break;
      default:
        break;
    }
  }
  _getTransactionCompletionTime(submittedTime) {
    return Math.round((Date.now() - submittedTime) / 1000).toString();
  }
  _getGasValuesInGWEI(gasParams) {
    const gasValuesInGwei = {};
    for (const param in gasParams) {
      if ((0, _ethereumjsUtil.isHexString)(gasParams[param])) {
        gasValuesInGwei[param] = (0, _conversion.hexWEIToDecGWEI)(gasParams[param]);
      } else {
        gasValuesInGwei[param] = gasParams[param];
      }
    }
    return gasValuesInGwei;
  }
  _failTransaction(txId, error, actionId) {
    this.txStateManager.setTxStatusFailed(txId, error);
    const txMeta = this.txStateManager.getTransaction(txId);
    this._trackTransactionMetricsEvent(txMeta, _transaction.TransactionMetaMetricsEvent.finalized, actionId, {
      error: error.message
    });
  }
  _dropTransaction(txId) {
    this.txStateManager.setTxStatusDropped(txId);
    const txMeta = this.txStateManager.getTransaction(txId);
    this._trackTransactionMetricsEvent(txMeta, _transaction.TransactionMetaMetricsEvent.finalized, undefined, {
      dropped: true
    });
  }
  async _requestApproval(txMeta, {
    shouldShowRequest
  } = {
    shouldShowRequest: true
  }) {
    const id = this._getApprovalId(txMeta);
    const {
      origin
    } = txMeta;
    const type = _controllerUtils.ApprovalType.Transaction;
    const requestData = {
      txId: txMeta.id
    };
    return this.messagingSystem.call('ApprovalController:addRequest', {
      id,
      origin,
      type,
      requestData
    }, shouldShowRequest).catch(() => {
      // Intentionally ignored as promise not currently used
    });
  }
  _acceptApproval(txMeta) {
    const id = this._getApprovalId(txMeta);
    try {
      this.messagingSystem.call('ApprovalController:acceptRequest', id);
    } catch (error) {
      _loglevel.default.error('Failed to accept transaction approval request', error);
    }
  }
  _rejectApproval(txMeta) {
    const id = this._getApprovalId(txMeta);
    try {
      this.messagingSystem.call('ApprovalController:rejectRequest', id, new Error('Rejected'));
    } catch (error) {
      _loglevel.default.error('Failed to reject transaction approval request', error);
    }
  }
  _getApprovalId(txMeta) {
    return String(txMeta.id);
  }
}
exports.default = TransactionController;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\transactions\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\transactions\\lib\\tx-state-history-helpers.js", {"fast-json-patch":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\fast-json-patch\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Ctransactions%5Clib%5Ctx-state-history-helpers.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateHistoryEntry = generateHistoryEntry;
exports.migrateFromSnapshotsToDiffs = migrateFromSnapshotsToDiffs;
exports.replayHistory = replayHistory;
exports.snapshotFromTxMeta = snapshotFromTxMeta;
var _fastJsonPatch = _interopRequireDefault(require("fast-json-patch"));
var _lodash = require("lodash");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * converts non-initial history entries into diffs
 *
 * @param {Array} longHistory
 * @returns {Array}
 */
function migrateFromSnapshotsToDiffs(longHistory) {
  return longHistory
  // convert non-initial history entries into diffs
  .map((entry, index) => {
    if (index === 0) {
      return entry;
    }
    return generateHistoryEntry(longHistory[index - 1], entry);
  });
}

/**
 * Generates an array of history objects sense the previous state.
 * The object has the keys
 * op (the operation performed),
 * path (the key and if a nested object then each key will be separated with a `/`)
 * value
 * with the first entry having the note and a timestamp when the change took place
 *
 * @param {object} previousState - the previous state of the object
 * @param {object} newState - the update object
 * @param {string} [note] - a optional note for the state change
 * @returns {Array}
 */
function generateHistoryEntry(previousState, newState, note) {
  const entry = _fastJsonPatch.default.compare(previousState, newState);
  // Add a note to the first op, since it breaks if we append it to the entry
  if (entry[0]) {
    if (note) {
      entry[0].note = note;
    }
    entry[0].timestamp = Date.now();
  }
  return entry;
}

/**
 * Recovers previous txMeta state obj
 *
 * @param _shortHistory
 * @returns {object}
 */
function replayHistory(_shortHistory) {
  const shortHistory = (0, _lodash.cloneDeep)(_shortHistory);
  return shortHistory.reduce((val, entry) => _fastJsonPatch.default.applyPatch(val, entry).newDocument);
}

/**
 * Snapshot {@code txMeta}
 *
 * @param {object} txMeta - the tx metadata object
 * @returns {object} a deep clone without history
 */
function snapshotFromTxMeta(txMeta) {
  const shallow = {
    ...txMeta
  };
  delete shallow.history;
  return (0, _lodash.cloneDeep)(shallow);
}


      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\transactions\\lib\\tx-state-history-helpers.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\transactions\\lib\\util.js", {"../../../../../shared/constants/transaction":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\transaction.ts","../../../../../shared/modules/hexstring-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\hexstring-utils.ts","../../../../../shared/modules/transaction.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\transaction.utils.js","../../../lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","@ethersproject/abi":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@ethersproject\\abi\\lib\\index.js","eth-rpc-errors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-rpc-errors\\dist\\index.js","human-standard-token-abi":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\human-standard-token-abi\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Ctransactions%5Clib%5Cutil.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFinalStates = getFinalStates;
exports.normalizeAndValidateTxParams = normalizeAndValidateTxParams;
exports.normalizeTxParams = normalizeTxParams;
exports.normalizeTxReceiptGasUsed = normalizeTxReceiptGasUsed;
exports.validateConfirmedExternalTransaction = void 0;
exports.validateFrom = validateFrom;
exports.validateInputData = validateInputData;
exports.validateRecipient = validateRecipient;
exports.validateTxParams = validateTxParams;
var _ethRpcErrors = require("eth-rpc-errors");
var _abi = require("@ethersproject/abi");
var _humanStandardTokenAbi = _interopRequireDefault(require("human-standard-token-abi"));
var _util = require("../../../lib/util");
var _transaction = require("../../../../../shared/constants/transaction");
var _transaction2 = require("../../../../../shared/modules/transaction.utils");
var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const normalizers = {
  from: _util.addHexPrefix,
  to: (to, lowerCase) => lowerCase ? (0, _util.addHexPrefix)(to).toLowerCase() : (0, _util.addHexPrefix)(to),
  nonce: _util.addHexPrefix,
  value: _util.addHexPrefix,
  data: _util.addHexPrefix,
  gas: _util.addHexPrefix,
  gasPrice: _util.addHexPrefix,
  maxFeePerGas: _util.addHexPrefix,
  maxPriorityFeePerGas: _util.addHexPrefix,
  type: _util.addHexPrefix,
  estimateSuggested: estimate => estimate,
  estimateUsed: estimate => estimate
};
function normalizeAndValidateTxParams(txParams, lowerCase = true) {
  const normalizedTxParams = normalizeTxParams(txParams, lowerCase);
  validateTxParams(normalizedTxParams);
  return normalizedTxParams;
}

/**
 * Normalizes the given txParams
 *
 * @param {object} txParams - The transaction params
 * @param {boolean} [lowerCase] - Whether to lowercase the 'to' address.
 * Default: true
 * @returns {object} the normalized tx params
 */
function normalizeTxParams(txParams, lowerCase = true) {
  // apply only keys in the normalizers
  const normalizedTxParams = {};
  for (const key in normalizers) {
    if (txParams[key]) {
      normalizedTxParams[key] = normalizers[key](txParams[key], lowerCase);
    }
  }
  return normalizedTxParams;
}

/**
 * Given two fields, ensure that the second field is not included in txParams,
 * and if it is throw an invalidParams error.
 *
 * @param {object} txParams - the transaction parameters object
 * @param {string} fieldBeingValidated - the current field being validated
 * @param {string} mutuallyExclusiveField - the field to ensure is not provided
 * @throws {ethErrors.rpc.invalidParams} Throws if mutuallyExclusiveField is
 *  present in txParams.
 */
function ensureMutuallyExclusiveFieldsNotProvided(txParams, fieldBeingValidated, mutuallyExclusiveField) {
  if (typeof txParams[mutuallyExclusiveField] !== 'undefined') {
    throw _ethRpcErrors.ethErrors.rpc.invalidParams(`Invalid transaction params: specified ${fieldBeingValidated} but also included ${mutuallyExclusiveField}, these cannot be mixed`);
  }
}

/**
 * Ensures that the provided value for field is a string, throws an
 * invalidParams error if field is not a string.
 *
 * @param {object} txParams - the transaction parameters object
 * @param {string} field - the current field being validated
 * @throws {ethErrors.rpc.invalidParams} Throws if field is not a string
 */
function ensureFieldIsString(txParams, field) {
  if (typeof txParams[field] !== 'string') {
    throw _ethRpcErrors.ethErrors.rpc.invalidParams(`Invalid transaction params: ${field} is not a string. got: (${txParams[field]})`);
  }
}

/**
 * Ensures that the provided txParams has the proper 'type' specified for the
 * given field, if it is provided. If types do not match throws an
 * invalidParams error.
 *
 * @param {object} txParams - the transaction parameters object
 * @param {'gasPrice' | 'maxFeePerGas' | 'maxPriorityFeePerGas'} field - the
 *  current field being validated
 * @throws {ethErrors.rpc.invalidParams} Throws if type does not match the
 *  expectations for provided field.
 */
function ensureProperTransactionEnvelopeTypeProvided(txParams, field) {
  switch (field) {
    case 'maxFeePerGas':
    case 'maxPriorityFeePerGas':
      if (txParams.type && txParams.type !== _transaction.TransactionEnvelopeType.feeMarket) {
        throw _ethRpcErrors.ethErrors.rpc.invalidParams(`Invalid transaction envelope type: specified type "${txParams.type}" but including maxFeePerGas and maxPriorityFeePerGas requires type: "${_transaction.TransactionEnvelopeType.feeMarket}"`);
      }
      break;
    case 'gasPrice':
    default:
      if (txParams.type && txParams.type === _transaction.TransactionEnvelopeType.feeMarket) {
        throw _ethRpcErrors.ethErrors.rpc.invalidParams(`Invalid transaction envelope type: specified type "${txParams.type}" but included a gasPrice instead of maxFeePerGas and maxPriorityFeePerGas`);
      }
  }
}

/**
 * Validates the given tx parameters
 *
 * @param {object} txParams - the tx params
 * @param {boolean} eip1559Compatibility - whether or not the current network supports EIP-1559 transactions
 * @throws {Error} if the tx params contains invalid fields
 */
function validateTxParams(txParams, eip1559Compatibility = true) {
  if (!txParams || typeof txParams !== 'object' || Array.isArray(txParams)) {
    throw _ethRpcErrors.ethErrors.rpc.invalidParams('Invalid transaction params: must be an object.');
  }
  if (!txParams.to && !txParams.data) {
    throw _ethRpcErrors.ethErrors.rpc.invalidParams('Invalid transaction params: must specify "data" for contract deployments, or "to" (and optionally "data") for all other types of transactions.');
  }
  if ((0, _transaction2.isEIP1559Transaction)({
    txParams
  }) && !eip1559Compatibility) {
    throw _ethRpcErrors.ethErrors.rpc.invalidParams('Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559');
  }
  Object.entries(txParams).forEach(([key, value]) => {
    // validate types
    switch (key) {
      case 'from':
        validateFrom(txParams);
        break;
      case 'to':
        validateRecipient(txParams);
        break;
      case 'gasPrice':
        ensureProperTransactionEnvelopeTypeProvided(txParams, 'gasPrice');
        ensureMutuallyExclusiveFieldsNotProvided(txParams, 'gasPrice', 'maxFeePerGas');
        ensureMutuallyExclusiveFieldsNotProvided(txParams, 'gasPrice', 'maxPriorityFeePerGas');
        ensureFieldIsString(txParams, 'gasPrice');
        break;
      case 'maxFeePerGas':
        ensureProperTransactionEnvelopeTypeProvided(txParams, 'maxFeePerGas');
        ensureMutuallyExclusiveFieldsNotProvided(txParams, 'maxFeePerGas', 'gasPrice');
        ensureFieldIsString(txParams, 'maxFeePerGas');
        break;
      case 'maxPriorityFeePerGas':
        ensureProperTransactionEnvelopeTypeProvided(txParams, 'maxPriorityFeePerGas');
        ensureMutuallyExclusiveFieldsNotProvided(txParams, 'maxPriorityFeePerGas', 'gasPrice');
        ensureFieldIsString(txParams, 'maxPriorityFeePerGas');
        break;
      case 'value':
        ensureFieldIsString(txParams, 'value');
        if (value.toString().includes('-')) {
          throw _ethRpcErrors.ethErrors.rpc.invalidParams(`Invalid transaction value "${value}": not a positive number.`);
        }
        if (value.toString().includes('.')) {
          throw _ethRpcErrors.ethErrors.rpc.invalidParams(`Invalid transaction value of "${value}": number must be in wei.`);
        }
        if (!value.match(/^0x[a-fA-F0-9]+$/u)) {
          throw _ethRpcErrors.ethErrors.rpc.invalidParams(`Invalid transaction value of "${value}": not a valid hex string.`);
        }
        break;
      case 'chainId':
        if (typeof value !== 'number' && typeof value !== 'string') {
          throw _ethRpcErrors.ethErrors.rpc.invalidParams(`Invalid transaction params: ${key} is not a Number or hex string. got: (${value})`);
        }
        break;
      case 'data':
        validateInputData(value);
        ensureFieldIsString(txParams, 'data');
        break;
      default:
        ensureFieldIsString(txParams, key);
    }
  });
}

/**
 *
 * @param {*} value
 */
function validateInputData(value) {
  if (value !== null) {
    // Validate the input data
    const hstInterface = new _abi.Interface(_humanStandardTokenAbi.default);
    try {
      hstInterface.parseTransaction({
        data: value
      });
    } catch (e) {
      // Throw an invalidParams error if BUFFER_OVERRUN
      /* eslint require-unicode-regexp: off */
      if (e.message.match(/BUFFER_OVERRUN/)) {
        throw _ethRpcErrors.ethErrors.rpc.invalidParams(`Invalid transaction params: data out-of-bounds, BUFFER_OVERRUN.`);
      }
    }
  }
}

/**
 * Validates the {@code from} field in the given tx params
 *
 * @param {object} txParams
 * @throws {Error} if the from address isn't valid
 */
function validateFrom(txParams) {
  if (!(typeof txParams.from === 'string')) {
    throw _ethRpcErrors.ethErrors.rpc.invalidParams(`Invalid "from" address "${txParams.from}": not a string.`);
  }
  if (!(0, _hexstringUtils.isValidHexAddress)(txParams.from, {
    allowNonPrefixed: false
  })) {
    throw _ethRpcErrors.ethErrors.rpc.invalidParams('Invalid "from" address.');
  }
}

/**
 * Validates the {@code to} field in the given tx params
 *
 * @param {object} txParams - the tx params
 * @returns {object} the tx params
 * @throws {Error} if the recipient is invalid OR there isn't tx data
 */
function validateRecipient(txParams) {
  if (txParams.to === '0x' || txParams.to === null) {
    if (txParams.data) {
      delete txParams.to;
    } else {
      throw _ethRpcErrors.ethErrors.rpc.invalidParams('Invalid "to" address.');
    }
  } else if (txParams.to !== undefined && !(0, _hexstringUtils.isValidHexAddress)(txParams.to, {
    allowNonPrefixed: false
  })) {
    throw _ethRpcErrors.ethErrors.rpc.invalidParams('Invalid "to" address.');
  }
  return txParams;
}
const validateConfirmedExternalTransaction = ({
  txMeta,
  pendingTransactions,
  confirmedTransactions
} = {}) => {
  if (!txMeta || !txMeta.txParams) {
    throw _ethRpcErrors.ethErrors.rpc.invalidParams('"txMeta" or "txMeta.txParams" is missing');
  }
  if (txMeta.status !== _transaction.TransactionStatus.confirmed) {
    throw _ethRpcErrors.ethErrors.rpc.invalidParams('External transaction status should be "confirmed"');
  }
  const externalTxNonce = txMeta.txParams.nonce;
  if (pendingTransactions && pendingTransactions.length > 0) {
    const foundPendingTxByNonce = pendingTransactions.find(el => {
      var _el$txParams;
      return ((_el$txParams = el.txParams) === null || _el$txParams === void 0 ? void 0 : _el$txParams.nonce) === externalTxNonce;
    });
    if (foundPendingTxByNonce) {
      throw _ethRpcErrors.ethErrors.rpc.invalidParams('External transaction nonce should not be in pending txs');
    }
  }
  if (confirmedTransactions && confirmedTransactions.length > 0) {
    const foundConfirmedTxByNonce = confirmedTransactions.find(el => {
      var _el$txParams2;
      return ((_el$txParams2 = el.txParams) === null || _el$txParams2 === void 0 ? void 0 : _el$txParams2.nonce) === externalTxNonce;
    });
    if (foundConfirmedTxByNonce) {
      throw _ethRpcErrors.ethErrors.rpc.invalidParams('External transaction nonce should not be in confirmed txs');
    }
  }
};

/**
 * Returns a list of final states
 *
 * @returns {string[]} the states that can be considered final states
 */
exports.validateConfirmedExternalTransaction = validateConfirmedExternalTransaction;
function getFinalStates() {
  return [_transaction.TransactionStatus.rejected,
  // the user has responded no!
  _transaction.TransactionStatus.confirmed,
  // the tx has been included in a block.
  _transaction.TransactionStatus.failed,
  // the tx failed for some reason, included on tx data.
  _transaction.TransactionStatus.dropped // the tx nonce was already used
  ];
}

/**
 * Normalizes tx receipt gas used to be a hexadecimal string.
 * It seems that sometimes the numerical values being returned from
 * this.query.getTransactionReceipt are BN instances and not strings.
 *
 * @param {string or BN instance} gasUsed
 * @returns normalized gas used as hexadecimal string
 */
function normalizeTxReceiptGasUsed(gasUsed) {
  return typeof gasUsed === 'string' ? gasUsed : gasUsed.toString(16);
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\transactions\\lib\\util.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\transactions\\pending-tx-tracker.js", {"../../../../shared/constants/transaction":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\transaction.ts","./tx-state-manager":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\transactions\\tx-state-manager.js","@metamask/safe-event-emitter":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\safe-event-emitter\\index.js","ethjs-query":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethjs-query\\lib\\index.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Ctransactions%5Cpending-tx-tracker.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _safeEventEmitter = _interopRequireDefault(require("@metamask/safe-event-emitter"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _ethjsQuery = _interopRequireDefault(require("ethjs-query"));
var _transaction = require("../../../../shared/constants/transaction");
var _txStateManager = require("./tx-state-manager");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Event emitter utility class for tracking the transactions as they
 * go from a pending state to a confirmed (mined in a block) state.
 *
 * As well as continues broadcast while in the pending state.
 */
class PendingTransactionTracker extends _safeEventEmitter.default {
  /**
   * @param {object} config - Configuration.
   * @param {Function} config.approveTransaction - Approves a transaction.
   * @param {Function} config.confirmTransaction - Set a transaction as confirmed.
   * @param {Function} config.getCompletedTransactions - Returns completed transactions.
   * @param {Function} config.getPendingTransactions - Returns an array of pending transactions,
   * @param {object} config.nonceTracker - see nonce tracker
   * @param {object} config.provider - A network provider.
   * @param {object} config.query - An EthQuery instance.
   * @param {Function} config.publishTransaction - Publishes a raw transaction,
   */
  constructor(config) {
    super();
    /**
     * We wait this many blocks before emitting a 'tx:dropped' event
     *
     * This is because we could be talking to a node that is out of sync.
     *
     * @type {number}
     */
    _defineProperty(this, "DROPPED_BUFFER_COUNT", 3);
    /**
     * A map of transaction hashes to the number of blocks we've seen
     * since first considering it dropped
     *
     * @type {Map<string, number>}
     */
    _defineProperty(this, "droppedBlocksBufferByHash", new Map());
    this.query = config.query || new _ethjsQuery.default(config.provider);
    this.nonceTracker = config.nonceTracker;
    this.getPendingTransactions = config.getPendingTransactions;
    this.getCompletedTransactions = config.getCompletedTransactions;
    this.publishTransaction = config.publishTransaction;
    this.approveTransaction = config.approveTransaction;
    this.confirmTransaction = config.confirmTransaction;
  }

  /**
   * checks the network for signed txs and releases the nonce global lock if it is
   */
  async updatePendingTxs() {
    // in order to keep the nonceTracker accurate we block it while updating pending transactions
    const nonceGlobalLock = await this.nonceTracker.getGlobalLock();
    try {
      const pendingTxs = this.getPendingTransactions();
      await Promise.all(pendingTxs.map(txMeta => this._checkPendingTx(txMeta)));
    } catch (err) {
      _loglevel.default.error('PendingTransactionTracker - Error updating pending transactions');
      _loglevel.default.error(err);
    }
    nonceGlobalLock.releaseLock();
  }

  /**
   * Resubmits each pending transaction
   *
   * @param {string} blockNumber - the latest block number in hex
   * @fires tx:warning
   * @returns {Promise<void>}
   */
  async resubmitPendingTxs(blockNumber) {
    const pending = this.getPendingTransactions();
    if (!pending.length) {
      return;
    }
    for (const txMeta of pending) {
      try {
        await this._resubmitTx(txMeta, blockNumber);
      } catch (err) {
        var _err$value, _err$value$message;
        const errorMessage = ((_err$value = err.value) === null || _err$value === void 0 ? void 0 : (_err$value$message = _err$value.message) === null || _err$value$message === void 0 ? void 0 : _err$value$message.toLowerCase()) || err.message.toLowerCase();
        const isKnownTx =
        // geth
        errorMessage.includes('replacement transaction underpriced') || errorMessage.includes('known transaction') ||
        // parity
        errorMessage.includes('gas price too low to replace') || errorMessage.includes('transaction with the same hash was already imported') ||
        // other
        errorMessage.includes('gateway timeout') || errorMessage.includes('nonce too low');
        // ignore resubmit warnings, return early
        if (isKnownTx) {
          return;
        }
        // encountered real error - transition to error state
        txMeta.warning = {
          error: errorMessage,
          message: _txStateManager.ERROR_SUBMITTING
        };
        this.emit('tx:warning', txMeta, err);
      }
    }
  }

  /**
   * Attempts to resubmit the given transaction with exponential backoff
   *
   * Will only attempt to retry the given tx every {@code 2**(txMeta.retryCount)} blocks.
   *
   * @param {object} txMeta - the transaction metadata
   * @param {string} latestBlockNumber - the latest block number in hex
   * @returns {Promise<string|undefined>} the tx hash if retried
   * @fires tx:block-update
   * @fires tx:retry
   * @private
   */
  async _resubmitTx(txMeta, latestBlockNumber) {
    if (!txMeta.firstRetryBlockNumber) {
      this.emit('tx:block-update', txMeta, latestBlockNumber);
    }
    const firstRetryBlockNumber = txMeta.firstRetryBlockNumber || latestBlockNumber;
    const txBlockDistance = Number.parseInt(latestBlockNumber, 16) - Number.parseInt(firstRetryBlockNumber, 16);
    const retryCount = txMeta.retryCount || 0;

    // Exponential backoff to limit retries at publishing (capped at ~15 minutes between retries)
    if (txBlockDistance < Math.min(50, Math.pow(2, retryCount))) {
      return undefined;
    }

    // Only auto-submit already-signed txs:
    if (!('rawTx' in txMeta)) {
      return this.approveTransaction(txMeta.id);
    }
    const {
      rawTx
    } = txMeta;
    const txHash = await this.publishTransaction(rawTx);

    // Increment successful tries:
    this.emit('tx:retry', txMeta);
    return txHash;
  }

  /**
   * Query the network to see if the given {@code txMeta} has been included in a block
   *
   * @param {object} txMeta - the transaction metadata
   * @returns {Promise<void>}
   * @fires tx:confirmed
   * @fires tx:dropped
   * @fires tx:failed
   * @fires tx:warning
   * @private
   */

  async _checkPendingTx(txMeta) {
    const txHash = txMeta.hash;
    const txId = txMeta.id;

    // Only check submitted txs
    if (txMeta.status !== _transaction.TransactionStatus.submitted) {
      return;
    }

    // extra check in case there was an uncaught error during the
    // signature and submission process

    let hasNoHash = !txHash;
    if (hasNoHash) {
      const noTxHashErr = new Error('We had an error while submitting this transaction, please try again.');
      noTxHashErr.name = 'NoTxHashError';
      this.emit('tx:failed', txId, noTxHashErr);
      return;
    }
    if (await this._checkIfNonceIsTaken(txMeta)) {
      this.emit('tx:dropped', txId);
      return;
    }
    try {
      const transactionReceipt = await this.query.getTransactionReceipt(txHash);
      if (transactionReceipt !== null && transactionReceipt !== void 0 && transactionReceipt.blockNumber) {
        const {
          baseFeePerGas,
          timestamp: blockTimestamp
        } = await this.query.getBlockByHash(transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockHash, false);
        this.emit('tx:confirmed', txId, transactionReceipt, baseFeePerGas, blockTimestamp);
        return;
      }
    } catch (err) {
      txMeta.warning = {
        error: err.message,
        message: 'There was a problem loading this transaction.'
      };
      this.emit('tx:warning', txMeta, err);
      return;
    }
    if (await this._checkIfTxWasDropped(txMeta)) {
      this.emit('tx:dropped', txId);
    }
  }

  /**
   * Checks whether the nonce in the given {@code txMeta} is behind the network nonce
   *
   * @param {object} txMeta - the transaction metadata
   * @returns {Promise<boolean>}
   * @private
   */
  async _checkIfTxWasDropped(txMeta) {
    const {
      hash: txHash,
      txParams: {
        nonce,
        from
      }
    } = txMeta;
    const networkNextNonce = await this.query.getTransactionCount(from);
    if (parseInt(nonce, 16) >= networkNextNonce.toNumber()) {
      return false;
    }
    if (!this.droppedBlocksBufferByHash.has(txHash)) {
      this.droppedBlocksBufferByHash.set(txHash, 0);
    }
    const currentBlockBuffer = this.droppedBlocksBufferByHash.get(txHash);
    if (currentBlockBuffer < this.DROPPED_BUFFER_COUNT) {
      this.droppedBlocksBufferByHash.set(txHash, currentBlockBuffer + 1);
      return false;
    }
    this.droppedBlocksBufferByHash.delete(txHash);
    return true;
  }

  /**
   * Checks whether the nonce in the given {@code txMeta} is correct against the local set of transactions
   *
   * @param {object} txMeta - the transaction metadata
   * @returns {Promise<boolean>}
   * @private
   */
  async _checkIfNonceIsTaken(txMeta) {
    const address = txMeta.txParams.from;
    const completed = this.getCompletedTransactions(address);
    return completed.some(
    // This is called while the transaction is in-flight, so it is possible that the
    // list of completed transactions now includes the transaction we were looking at
    // and if that is the case, don't consider the transaction to have taken its own nonce
    other => !(other.id === txMeta.id) && other.txParams.nonce === txMeta.txParams.nonce);
  }
}
exports.default = PendingTransactionTracker;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\transactions\\pending-tx-tracker.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\transactions\\tx-gas-utils.js", {"../../../../shared/modules/conversion.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\conversion.utils.ts","../../lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","ethereumjs-util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethereumjs-util\\dist.browser\\index.js","ethjs-query":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethjs-query\\lib\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Ctransactions%5Ctx-gas-utils.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ethjsQuery = _interopRequireDefault(require("ethjs-query"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _ethereumjsUtil = require("ethereumjs-util");
var _lodash = require("lodash");
var _util = require("../../lib/util");
var _conversion = require("../../../../shared/modules/conversion.utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Result of gas analysis, including either a gas estimate for a successful analysis, or
 * debug information for a failed analysis.
 *
 * @typedef {object} GasAnalysisResult
 * @property {string} blockGasLimit - The gas limit of the block used for the analysis
 * @property {string} estimatedGasHex - The estimated gas, in hexadecimal
 * @property {object} simulationFails - Debug information about why an analysis failed
 */
/**
 * tx-gas-utils are gas utility methods for Transaction manager
 * its passed ethquery
 * and used to do things like calculate gas of a tx.
 *
 * @param {object} provider - A network provider.
 */
class TxGasUtil {
  constructor(provider) {
    this.query = new _ethjsQuery.default(provider);
  }

  /**
   * @param {object} txMeta - the txMeta object
   * @returns {GasAnalysisResult} The result of the gas analysis
   */
  async analyzeGasUsage(txMeta) {
    const block = await this.query.getBlockByNumber('latest', false);

    // fallback to block gasLimit
    const blockGasLimitBN = (0, _util.hexToBn)(block.gasLimit);
    const saferGasLimitBN = (0, _util.BnMultiplyByFraction)(blockGasLimitBN, 19, 20);
    let estimatedGasHex = (0, _conversion.bnToHex)(saferGasLimitBN);
    let simulationFails;
    try {
      estimatedGasHex = await this.estimateTxGas(txMeta);
    } catch (error) {
      _loglevel.default.warn(error);
      simulationFails = {
        reason: error.message,
        errorKey: error.errorKey,
        debug: {
          blockNumber: block.number,
          blockGasLimit: block.gasLimit
        }
      };
    }
    return {
      blockGasLimit: block.gasLimit,
      estimatedGasHex,
      simulationFails
    };
  }

  /**
   * Estimates the tx's gas usage
   *
   * @param {object} txMeta - the txMeta object
   * @returns {string} the estimated gas limit as a hex string
   */
  async estimateTxGas(txMeta) {
    const txParams = (0, _lodash.cloneDeep)(txMeta.txParams);

    // `eth_estimateGas` can fail if the user has insufficient balance for the
    // value being sent, or for the gas cost. We don't want to check their
    // balance here, we just want the gas estimate. The gas price is removed
    // to skip those balance checks. We check balance elsewhere. We also delete
    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.
    delete txParams.gasPrice;
    delete txParams.maxFeePerGas;
    delete txParams.maxPriorityFeePerGas;

    // estimate tx gas requirements
    return await this.query.estimateGas(txParams);
  }

  /**
   * Adds a gas buffer with out exceeding the block gas limit
   *
   * @param {string} initialGasLimitHex - the initial gas limit to add the buffer too
   * @param {string} blockGasLimitHex - the block gas limit
   * @param multiplier
   * @returns {string} the buffered gas limit as a hex string
   */
  addGasBuffer(initialGasLimitHex, blockGasLimitHex, multiplier = 1.5) {
    const initialGasLimitBn = (0, _util.hexToBn)(initialGasLimitHex);
    const blockGasLimitBn = (0, _util.hexToBn)(blockGasLimitHex);
    const upperGasLimitBn = blockGasLimitBn.muln(0.9);
    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);

    // if initialGasLimit is above blockGasLimit, dont modify it
    if (initialGasLimitBn.gt(upperGasLimitBn)) {
      return (0, _conversion.bnToHex)(initialGasLimitBn);
    }
    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit
    if (bufferedGasLimitBn.lt(upperGasLimitBn)) {
      return (0, _conversion.bnToHex)(bufferedGasLimitBn);
    }
    // otherwise use blockGasLimit
    return (0, _conversion.bnToHex)(upperGasLimitBn);
  }
  async getBufferedGasLimit(txMeta, multiplier) {
    const {
      blockGasLimit,
      estimatedGasHex,
      simulationFails
    } = await this.analyzeGasUsage(txMeta);
    // add additional gas buffer to our estimation for safety
    const gasLimit = this.addGasBuffer((0, _ethereumjsUtil.addHexPrefix)(estimatedGasHex), blockGasLimit, multiplier);
    return {
      gasLimit,
      simulationFails
    };
  }
}
exports.default = TxGasUtil;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\transactions\\tx-gas-utils.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\transactions\\tx-state-manager.js", {"../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../../shared/constants/transaction":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\transaction.ts","../../../../shared/modules/random-id":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\random-id.js","../../../../shared/modules/transaction.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\transaction.utils.js","../../metamask-controller":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\metamask-controller.js","./lib/tx-state-history-helpers":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\transactions\\lib\\tx-state-history-helpers.js","./lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\controllers\\transactions\\lib\\util.js","@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js","@metamask/safe-event-emitter":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\safe-event-emitter\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Ccontrollers%5Ctransactions%5Ctx-state-manager.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ERROR_SUBMITTING = void 0;
var _safeEventEmitter = _interopRequireDefault(require("@metamask/safe-event-emitter"));
var _obsStore = require("@metamask/obs-store");
var _loglevel = _interopRequireDefault(require("loglevel"));
var _lodash = require("lodash");
var _randomId = _interopRequireDefault(require("../../../../shared/modules/random-id"));
var _transaction = require("../../../../shared/constants/transaction");
var _metamaskController = require("../../metamask-controller");
var _transaction2 = require("../../../../shared/modules/transaction.utils");
var _app = require("../../../../shared/constants/app");
var _network = require("../../../../shared/constants/network");
var _txStateHistoryHelpers = require("./lib/tx-state-history-helpers");
var _util = require("./lib/util");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ERROR_SUBMITTING = 'There was an error when resubmitting this transaction.';
/**
 * TransactionStatuses reimported from the shared transaction constants file
 *
 * @typedef {__import__(
 *  '../../../../shared/constants/transaction'
 * ).TransactionStatusString} TransactionStatusString
 */

/**
 * @typedef {__import__('../../../../shared/constants/transaction').TxParams} TxParams
 */

/**
 * @typedef {__import__(
 *  '../../../../shared/constants/transaction'
 * ).TransactionMeta} TransactionMeta
 */

/**
 * @typedef {object} TransactionState
 * @property {Record<string, TransactionMeta>} transactions - TransactionMeta
 *  keyed by the transaction's id.
 */

/**
 * TransactionStateManager is responsible for the state of a transaction and
 * storing the transaction. It also has some convenience methods for finding
 * subsets of transactions.
 *
 * @param {object} opts
 * @param {TransactionState} [opts.initState={ transactions: {} }] - initial
 *  transactions list keyed by id
 * @param {number} [opts.txHistoryLimit] - limit for how many finished
 *  transactions can hang around in state
 * @param {Function} opts.getNetworkId - Get the current network Id.
 * @param {Function} opts.getNetworkStatus - Get the current network status.
 */
exports.ERROR_SUBMITTING = ERROR_SUBMITTING;
class TransactionStateManager extends _safeEventEmitter.default {
  constructor({
    initState,
    txHistoryLimit,
    getNetworkId,
    getNetworkStatus,
    getCurrentChainId
  }) {
    super();
    this.store = new _obsStore.ObservableStore({
      transactions: {},
      ...initState
    });
    this.txHistoryLimit = txHistoryLimit;
    this.getNetworkId = getNetworkId;
    this.getNetworkStatus = getNetworkStatus;
    this.getCurrentChainId = getCurrentChainId;
  }

  /**
   * Generates a TransactionMeta object consisting of the fields required for
   * use throughout the extension. The argument here will override everything
   * in the resulting transaction meta.
   *
   * TODO: Don't overwrite everything?
   *
   * @param {Partial<TransactionMeta>} opts - the object to use when
   *  overwriting default keys of the TransactionMeta
   * @returns {TransactionMeta} the default txMeta object
   */
  generateTxMeta(opts = {}) {
    var _opts$txParams;
    const networkId = this.getNetworkId();
    const networkStatus = this.getNetworkStatus();
    const chainId = this.getCurrentChainId();
    if (networkStatus !== _network.NetworkStatus.Available) {
      throw new Error('MetaMask is having trouble connecting to the network');
    }
    let dappSuggestedGasFees = null;

    // If we are dealing with a transaction suggested by a dapp and not
    // an internally created metamask transaction, we need to keep record of
    // the originally submitted gasParams.
    if (opts.txParams && typeof opts.origin === 'string' && opts.origin !== _app.ORIGIN_METAMASK) {
      if (typeof opts.txParams.gasPrice !== 'undefined') {
        dappSuggestedGasFees = {
          gasPrice: opts.txParams.gasPrice
        };
      } else if (typeof opts.txParams.maxFeePerGas !== 'undefined' || typeof opts.txParams.maxPriorityFeePerGas !== 'undefined') {
        dappSuggestedGasFees = {
          maxPriorityFeePerGas: opts.txParams.maxPriorityFeePerGas,
          maxFeePerGas: opts.txParams.maxFeePerGas
        };
      }
      if (typeof opts.txParams.gas !== 'undefined') {
        dappSuggestedGasFees = {
          ...dappSuggestedGasFees,
          gas: opts.txParams.gas
        };
      }
    }
    return {
      id: (0, _randomId.default)(),
      time: new Date().getTime(),
      status: _transaction.TransactionStatus.unapproved,
      metamaskNetworkId: networkId,
      originalGasEstimate: (_opts$txParams = opts.txParams) === null || _opts$txParams === void 0 ? void 0 : _opts$txParams.gas,
      userEditedGasLimit: false,
      chainId,
      loadingDefaults: true,
      dappSuggestedGasFees,
      sendFlowHistory: [],
      ...opts
    };
  }

  /**
   * Get an object containing all unapproved transactions for the current
   * network. This is the only transaction fetching method that returns an
   * object, so it doesn't use getTransactions like everything else.
   *
   * @returns {Record<string, TransactionMeta>} Unapproved transactions keyed
   *  by id
   */
  getUnapprovedTxList() {
    const chainId = this.getCurrentChainId();
    const networkId = this.getNetworkId();
    return (0, _lodash.pickBy)(this.store.getState().transactions, transaction => transaction.status === _transaction.TransactionStatus.unapproved && (0, _transaction2.transactionMatchesNetwork)(transaction, chainId, networkId));
  }

  /**
   * Get all approved transactions for the current network. If an address is
   * provided, the list will be further refined to only those transactions
   * originating from the supplied address.
   *
   * @param {string} [address] - hex prefixed address to find transactions for.
   * @returns {TransactionMeta[]} the filtered list of transactions
   */
  getApprovedTransactions(address) {
    const searchCriteria = {
      status: _transaction.TransactionStatus.approved
    };
    if (address) {
      searchCriteria.from = address;
    }
    return this.getTransactions({
      searchCriteria
    });
  }

  /**
   * Get all pending transactions for the current network. If an address is
   * provided, the list will be further refined to only those transactions
   * originating from the supplied address.
   *
   * @param {string} [address] - hex prefixed address to find transactions for.
   * @returns {TransactionMeta[]} the filtered list of transactions
   */
  getPendingTransactions(address) {
    const searchCriteria = {
      status: _transaction.TransactionStatus.submitted
    };
    if (address) {
      searchCriteria.from = address;
    }
    return this.getTransactions({
      searchCriteria
    });
  }

  /**
   * Get all confirmed transactions for the current network. If an address is
   * provided, the list will be further refined to only those transactions
   * originating from the supplied address.
   *
   * @param {string} [address] - hex prefixed address to find transactions for.
   * @returns {TransactionMeta[]} the filtered list of transactions
   */
  getConfirmedTransactions(address) {
    const searchCriteria = {
      status: _transaction.TransactionStatus.confirmed
    };
    if (address) {
      searchCriteria.from = address;
    }
    return this.getTransactions({
      searchCriteria
    });
  }

  /**
   * Get transaction with provided.
   *
   * @param {string} [actionId]
   * @returns {TransactionMeta} the filtered transaction
   */
  getTransactionWithActionId(actionId) {
    return (0, _lodash.values)((0, _lodash.pickBy)(this.store.getState().transactions, transaction => transaction.actionId === actionId))[0];
  }

  /**
   * Adds the txMeta to the list of transactions in the store.
   * if the list is over txHistoryLimit it will remove a transaction that
   * is in its final state.
   * it will also add the key `history` to the txMeta with the snap shot of
   * the original object
   *
   * @param {TransactionMeta} txMeta - The TransactionMeta object to add.
   * @returns {TransactionMeta} The same TransactionMeta, but with validated
   *  txParams and transaction history.
   */
  addTransaction(txMeta) {
    // normalize and validate txParams if present
    if (txMeta.txParams) {
      txMeta.txParams = (0, _util.normalizeAndValidateTxParams)(txMeta.txParams, false);
    }
    this.once(`${txMeta.id}:signed`, () => {
      this.removeAllListeners(`${txMeta.id}:rejected`);
    });
    this.once(`${txMeta.id}:rejected`, () => {
      this.removeAllListeners(`${txMeta.id}:signed`);
    });
    // initialize history
    txMeta.history = [];
    // capture initial snapshot of txMeta for history
    const snapshot = (0, _txStateHistoryHelpers.snapshotFromTxMeta)(txMeta);
    txMeta.history.push(snapshot);
    const transactions = this.getTransactions({
      filterToCurrentNetwork: false
    });
    const {
      txHistoryLimit
    } = this;

    // checks if the length of the tx history is longer then desired persistence
    // limit and then if it is removes the oldest confirmed or rejected tx.
    // Pending or unapproved transactions will not be removed by this
    // operation. For safety of presenting a fully functional transaction UI
    // representation, this function will not break apart transactions with the
    // same nonce, per network. Not accounting for transactions of the same
    // nonce and network combo can result in confusing or broken experiences
    // in the UI.
    //
    // TODO: we are already limiting what we send to the UI, and in the future
    // we will send UI only collected groups of transactions *per page* so at
    // some point in the future, this persistence limit can be adjusted. When
    // we do that I think we should figure out a better storage solution for
    // transaction history entries.
    const nonceNetworkSet = new Set();
    const txsToDelete = transactions.reverse().filter(tx => {
      const {
        nonce,
        from
      } = tx.txParams;
      const {
        chainId,
        metamaskNetworkId,
        status
      } = tx;
      const key = `${nonce}-${chainId ?? metamaskNetworkId}-${from}`;
      if (nonceNetworkSet.has(key)) {
        return false;
      } else if (nonceNetworkSet.size < txHistoryLimit - 1 || (0, _util.getFinalStates)().includes(status) === false) {
        nonceNetworkSet.add(key);
        return false;
      }
      return true;
    }).map(tx => tx.id);
    this._deleteTransactions(txsToDelete);
    this._addTransactionsToState([txMeta]);
    return txMeta;
  }
  addExternalTransaction(txMeta) {
    var _txMeta$txParams;
    const fromAddress = txMeta === null || txMeta === void 0 ? void 0 : (_txMeta$txParams = txMeta.txParams) === null || _txMeta$txParams === void 0 ? void 0 : _txMeta$txParams.from;
    const confirmedTransactions = this.getConfirmedTransactions(fromAddress);
    const pendingTransactions = this.getPendingTransactions(fromAddress);
    (0, _util.validateConfirmedExternalTransaction)({
      txMeta,
      pendingTransactions,
      confirmedTransactions
    });
    this._addTransactionsToState([txMeta]);
    return txMeta;
  }

  /**
   * @param {number} txId
   * @returns {TransactionMeta} the txMeta who matches the given id if none found
   * for the network returns undefined
   */
  getTransaction(txId) {
    const {
      transactions
    } = this.store.getState();
    return transactions[txId];
  }

  /**
   * updates the txMeta in the list and adds a history entry
   *
   * @param {object} txMeta - the txMeta to update
   * @param {string} [note] - a note about the update for history
   */
  updateTransaction(txMeta, note) {
    // normalize and validate txParams if present
    if (txMeta.txParams) {
      try {
        txMeta.txParams = (0, _util.normalizeAndValidateTxParams)(txMeta.txParams, false);
      } catch (error) {
        if (txMeta.warning.message === ERROR_SUBMITTING) {
          this.setTxStatusFailed(txMeta.id, error);
        } else {
          throw error;
        }
        return;
      }
    }
    this._updateTransactionHistory(txMeta, note);
  }
  _updateTransactionHistory(txMeta, note) {
    // create txMeta snapshot for history
    const currentState = (0, _txStateHistoryHelpers.snapshotFromTxMeta)(txMeta);
    // recover previous tx state obj
    const previousState = (0, _txStateHistoryHelpers.replayHistory)(txMeta.history);
    // generate history entry and add to history
    const entry = (0, _txStateHistoryHelpers.generateHistoryEntry)(previousState, currentState, note);
    if (entry.length) {
      txMeta.history.push(entry);
    }

    // commit txMeta to state
    const txId = txMeta.id;
    this.store.updateState({
      transactions: {
        ...this.store.getState().transactions,
        [txId]: txMeta
      }
    });
  }

  /**
   * SearchCriteria can search in any key in TxParams or the base
   * TransactionMeta. This type represents any key on either of those two
   * types.
   *
   * @typedef {TxParams[keyof TxParams] | TransactionMeta[keyof TransactionMeta]} SearchableKeys
   */

  /**
   * Predicates can either be strict values, which is shorthand for using
   * strict equality, or a method that receives he value of the specified key
   * and returns a boolean.
   *
   * @typedef {(v: unknown) => boolean | unknown} FilterPredicate
   */

  /**
   * Retrieve a list of transactions from state. By default this will return
   * the full list of Transactions for the currently selected chain/network.
   * Additional options can be provided to change what is included in the final
   * list.
   *
   * @param opts - options to change filter behavior
   * @param {Record<SearchableKeys, FilterPredicate>} [opts.searchCriteria] -
   *  an object with keys that match keys in TransactionMeta or TxParams, and
   *  values that are predicates. Predicates can either be strict values,
   *  which is shorthand for using strict equality, or a method that receives
   *  the value of the specified key and returns a boolean. The transaction
   *  list will be filtered to only those items that the predicate returns
   *  truthy for. **HINT**: `err: undefined` is like looking for a tx with no
   *  err. so you can also search txs that don't have something as well by
   *  setting the value as undefined.
   * @param {TransactionMeta[]} [opts.initialList] - If provided the filtering
   *  will occur on the provided list. By default this will be the full list
   *  from state sorted by time ASC.
   * @param {boolean} [opts.filterToCurrentNetwork] - Filter transaction
   *  list to only those that occurred on the current chain or network.
   *  Defaults to true.
   * @param {number} [opts.limit] - limit the number of transactions returned
   *  to N unique nonces.
   * @returns {TransactionMeta[]} The TransactionMeta objects that all provided
   *  predicates return truthy for.
   */
  getTransactions({
    searchCriteria = {},
    initialList,
    filterToCurrentNetwork = true,
    limit
  } = {}) {
    const chainId = this.getCurrentChainId();
    const networkId = this.getNetworkId();
    // searchCriteria is an object that might have values that aren't predicate
    // methods. When providing any other value type (string, number, etc), we
    // consider this shorthand for "check the value at key for strict equality
    // with the provided value". To conform this object to be only methods, we
    // mapValues (lodash) such that every value on the object is a method that
    // returns a boolean.
    const predicateMethods = (0, _lodash.mapValues)(searchCriteria, predicate => {
      return typeof predicate === 'function' ? predicate : v => v === predicate;
    });

    // If an initial list is provided we need to change it back into an object
    // first, so that it matches the shape of our state. This is done by the
    // lodash keyBy method. This is the edge case for this method, typically
    // initialList will be undefined.
    const transactionsToFilter = initialList ? (0, _lodash.keyBy)(initialList, 'id') : this.store.getState().transactions;

    // Combine sortBy and pickBy to transform our state object into an array of
    // matching transactions that are sorted by time.
    const filteredTransactions = (0, _lodash.sortBy)((0, _lodash.pickBy)(transactionsToFilter, transaction => {
      // default matchesCriteria to the value of transactionMatchesNetwork
      // when filterToCurrentNetwork is true.
      if (filterToCurrentNetwork && (0, _transaction2.transactionMatchesNetwork)(transaction, chainId, networkId) === false) {
        return false;
      }
      // iterate over the predicateMethods keys to check if the transaction
      // matches the searchCriteria
      for (const [key, predicate] of Object.entries(predicateMethods)) {
        // We return false early as soon as we know that one of the specified
        // search criteria do not match the transaction. This prevents
        // needlessly checking all criteria when we already know the criteria
        // are not fully satisfied. We check both txParams and the base
        // object as predicate keys can be either.
        if (key in transaction.txParams) {
          if (predicate(transaction.txParams[key]) === false) {
            return false;
          }
        } else if (predicate(transaction[key]) === false) {
          return false;
        }
      }
      return true;
    }), 'time');
    if (limit !== undefined) {
      // We need to have all transactions of a given nonce in order to display
      // necessary details in the UI. We use the size of this set to determine
      // whether we have reached the limit provided, thus ensuring that all
      // transactions of nonces we include will be sent to the UI.
      const nonces = new Set();
      const txs = [];
      // By default, the transaction list we filter from is sorted by time ASC.
      // To ensure that filtered results prefers the newest transactions we
      // iterate from right to left, inserting transactions into front of a new
      // array. The original order is preserved, but we ensure that newest txs
      // are preferred.
      for (let i = filteredTransactions.length - 1; i > -1; i--) {
        const txMeta = filteredTransactions[i];
        const {
          nonce
        } = txMeta.txParams;
        if (!nonces.has(nonce)) {
          if (nonces.size < limit) {
            nonces.add(nonce);
          } else {
            continue;
          }
        }
        // Push transaction into the beginning of our array to ensure the
        // original order is preserved.
        txs.unshift(txMeta);
      }
      return txs;
    }
    return filteredTransactions;
  }

  /**
   * Update status of the TransactionMeta with provided id to 'rejected'.
   * After setting the status, the TransactionMeta is deleted from state.
   *
   * TODO: Should we show historically rejected transactions somewhere in the
   * UI? Seems like it could be valuable for information purposes. Of course
   * only after limit issues are reduced.
   *
   * @param {number} txId - the target TransactionMeta's Id
   */
  setTxStatusRejected(txId) {
    this._setTransactionStatus(txId, _transaction.TransactionStatus.rejected);
    this._deleteTransaction(txId);
  }

  /**
   * Update status of the TransactionMeta with provided id to 'unapproved'
   *
   * @param {number} txId - the target TransactionMeta's Id
   */
  setTxStatusUnapproved(txId) {
    this._setTransactionStatus(txId, _transaction.TransactionStatus.unapproved);
  }

  /**
   * Update status of the TransactionMeta with provided id to 'approved'
   *
   * @param {number} txId - the target TransactionMeta's Id
   */
  setTxStatusApproved(txId) {
    this._setTransactionStatus(txId, _transaction.TransactionStatus.approved);
  }

  /**
   * Update status of the TransactionMeta with provided id to 'signed'
   *
   * @param {number} txId - the target TransactionMeta's Id
   */
  setTxStatusSigned(txId) {
    this._setTransactionStatus(txId, _transaction.TransactionStatus.signed);
  }

  /**
   * Update status of the TransactionMeta with provided id to 'submitted'
   * and sets the 'submittedTime' property with the current Unix epoch time.
   *
   * @param {number} txId - the target TransactionMeta's Id
   */
  setTxStatusSubmitted(txId) {
    const txMeta = this.getTransaction(txId);
    txMeta.submittedTime = new Date().getTime();
    this.updateTransaction(txMeta, 'txStateManager - add submitted time stamp');
    this._setTransactionStatus(txId, _transaction.TransactionStatus.submitted);
  }

  /**
   * Update status of the TransactionMeta with provided id to 'confirmed'
   *
   * @param {number} txId - the target TransactionMeta's Id
   */
  setTxStatusConfirmed(txId) {
    this._setTransactionStatus(txId, _transaction.TransactionStatus.confirmed);
  }

  /**
   * Update status of the TransactionMeta with provided id to 'dropped'
   *
   * @param {number} txId - the target TransactionMeta's Id
   */
  setTxStatusDropped(txId) {
    this._setTransactionStatus(txId, _transaction.TransactionStatus.dropped);
  }

  /**
   * Update status of the TransactionMeta with provided id to 'failed' and put
   * the error on the TransactionMeta object.
   *
   * @param {number} txId - the target TransactionMeta's Id
   * @param {Error} err - error object
   */
  setTxStatusFailed(txId, err) {
    var _error$message;
    const error = err || new Error('Internal metamask failure');
    const txMeta = this.getTransaction(txId);
    txMeta.err = {
      message: ((_error$message = error.message) === null || _error$message === void 0 ? void 0 : _error$message.toString()) || error.toString(),
      rpc: error.value,
      stack: error.stack
    };
    this._updateTransactionHistory(txMeta, 'transactions:tx-state-manager#fail - add error');
    this._setTransactionStatus(txId, _transaction.TransactionStatus.failed);
  }

  /**
   * Removes all transactions for the given address on the current network.
   *
   * @param {string} address - hex string of the from address on the txParams
   *  to remove
   */
  wipeTransactions(address) {
    // network only tx
    const {
      transactions
    } = this.store.getState();
    const chainId = this.getCurrentChainId();
    const networkId = this.getNetworkId();

    // Update state
    this.store.updateState({
      transactions: (0, _lodash.omitBy)(transactions, transaction => transaction.txParams.from === address && (0, _transaction2.transactionMatchesNetwork)(transaction, chainId, networkId))
    });
  }

  /**
   * Filters out the unapproved transactions from state
   */
  clearUnapprovedTxs() {
    this.store.updateState({
      transactions: (0, _lodash.omitBy)(this.store.getState().transactions, transaction => transaction.status === _transaction.TransactionStatus.unapproved)
    });
  }

  //
  //           PRIVATE METHODS
  //

  /**
   * Updates a transaction's status in state, and then emits events that are
   * subscribed to elsewhere. See below for best guesses on where and how these
   * events are received.
   *
   * @param {number} txId - the TransactionMeta Id
   * @param {TransactionStatusString} status - the status to set on the
   *  TransactionMeta
   * @fires txMeta.id:txMeta.status - every time a transaction's status changes
   *  we emit the change passing along the id. This does not appear to be used
   *  outside of this file, which only listens to this to unsubscribe listeners
   *  of :rejected and :signed statuses when the inverse status changes. Likely
   *  safe to drop.
   * @fires tx:status-update - every time a transaction's status changes we
   *  emit this event and pass txId and status. This event is subscribed to in
   *  the TransactionController and re-broadcast by the TransactionController.
   *  It is used internally within the TransactionController to try and update
   *  pending transactions on each new block (from blockTracker). It's also
   *  subscribed to in metamask-controller to display a browser notification on
   *  confirmed or failed transactions.
   * @fires txMeta.id:finished - When a transaction moves to a finished state
   *  this event is emitted, which is used in the TransactionController to pass
   *  along details of the transaction to the dapp that suggested them. This
   *  pattern is replicated across all of the message managers and can likely
   *  be supplemented or replaced by the ApprovalController.
   * @fires updateBadge - When the number of transactions changes in state,
   *  the badge in the browser extension bar should be updated to reflect the
   *  number of pending transactions. This particular emit doesn't appear to
   *  bubble up anywhere that is actually used. TransactionController emits
   *  this *anytime the state changes*, so this is probably superfluous.
   */
  _setTransactionStatus(txId, status) {
    const txMeta = this.getTransaction(txId);
    if (!txMeta) {
      return;
    }
    txMeta.status = status;
    try {
      this._updateTransactionHistory(txMeta, `txStateManager: setting status to ${status}`);
      this.emit(`${txMeta.id}:${status}`, txId);
      this.emit(`tx:status-update`, txId, status);
      if ([_transaction.TransactionStatus.submitted, _transaction.TransactionStatus.rejected, _transaction.TransactionStatus.failed].includes(status)) {
        this.emit(`${txMeta.id}:finished`, txMeta);
      }
      this.emit(_metamaskController.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE);
    } catch (error) {
      _loglevel.default.error(error);
    }
  }

  /**
   * Adds one or more transactions into state. This is not intended for
   * external use.
   *
   * @private
   * @param {TransactionMeta[]} transactions - the list of transactions to save
   */
  _addTransactionsToState(transactions) {
    this.store.updateState({
      transactions: transactions.reduce((result, newTx) => {
        result[newTx.id] = newTx;
        return result;
      }, this.store.getState().transactions)
    });
  }

  /**
   * removes one transaction from state. This is not intended for external use.
   *
   * @private
   * @param {number} targetTransactionId - the transaction to delete
   */
  _deleteTransaction(targetTransactionId) {
    const {
      transactions
    } = this.store.getState();
    delete transactions[targetTransactionId];
    this.store.updateState({
      transactions
    });
  }

  /**
   * removes multiple transaction from state. This is not intended for external use.
   *
   * @private
   * @param {number[]} targetTransactionIds - the transactions to delete
   */
  _deleteTransactions(targetTransactionIds) {
    const {
      transactions
    } = this.store.getState();
    targetTransactionIds.forEach(transactionId => {
      delete transactions[transactionId];
    });
    this.store.updateState({
      transactions
    });
  }
}
exports.default = TransactionStateManager;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\controllers\\transactions\\tx-state-manager.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\detect-multiple-instances.js", {"../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","./lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","webextension-polyfill":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Cdetect-multiple-instances.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onMessageReceived = exports.checkForMultipleVersionsRunning = void 0;
var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));
var _app = require("../../shared/constants/app");
var _util = require("./lib/util");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Sets up two-way communication between the
 * mainline version of extension and Flask build
 * in order to detect & warn if there are two different
 * versions running simultaneously.
 */

const MESSAGE_TEXT = 'isRunning';
const showWarning = () => console.warn('Warning! You have multiple instances of MetaMask running!');

/**
 * Handles the ping message sent from other extension.
 * Displays console warning if it's active.
 *
 * @param message - The message received from the other extension
 */
const onMessageReceived = message => {
  if (message === MESSAGE_TEXT) {
    showWarning();
  }
};

/**
 * Sends the ping message sent to other extensions to detect whether it's active or not.
 */
exports.onMessageReceived = onMessageReceived;
const checkForMultipleVersionsRunning = async () => {
  if ((0, _util.getPlatform)() !== _app.PLATFORM_CHROME && (0, _util.getPlatform)() !== _app.PLATFORM_FIREFOX) {
    return;
  }
  const buildIds = (0, _util.getPlatform)() === _app.PLATFORM_CHROME ? _app.CHROME_BUILD_IDS : _app.FIREFOX_BUILD_IDS;
  const thisBuild = _webextensionPolyfill.default.runtime.id;
  for (const id of buildIds) {
    if (id !== thisBuild) {
      try {
        await _webextensionPolyfill.default.runtime.sendMessage(id, MESSAGE_TEXT);
      } catch (error) {
        // Should do nothing if receiving end was not reached (no other instances running)
      }
    }
  }
};
exports.checkForMultipleVersionsRunning = checkForMultipleVersionsRunning;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\detect-multiple-instances.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\first-time-state.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Cfirst-time-state.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
/**
 * @typedef {object} FirstTimeState
 * @property {object} config Initial configuration parameters
 * @property {object} NetworkController Network controller state
 */

/**
 * @type {FirstTimeState}
 */
const initialState = {
  config: {}
};
var _default = initialState;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\first-time-state.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\ComposableObservableStore.js", {"@metamask/base-controller":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\base-controller\\dist\\index.js","@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5CComposableObservableStore.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _obsStore = require("@metamask/obs-store");
var _baseController = require("@metamask/base-controller");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * @typedef {__import__('@metamask/base-controller').ControllerMessenger} ControllerMessenger
 */
/**
 * An ObservableStore that can composes a flat
 * structure of child stores based on configuration
 */
class ComposableObservableStore extends _obsStore.ObservableStore {
  /**
   * Create a new store
   *
   * @param {object} options
   * @param {object} [options.config] - Map of internal state keys to child stores
   * @param {ControllerMessenger} options.controllerMessenger - The controller
   *   messenger, used for subscribing to events from BaseControllerV2-based
   *   controllers.
   * @param {object} [options.state] - The initial store state
   * @param {boolean} [options.persist] - Whether or not to apply the persistence for v2 controllers
   */
  constructor({
    config,
    controllerMessenger,
    state,
    persist
  }) {
    super(state);
    /**
     * Describes which stores are being composed. The key is the name of the
     * store, and the value is either an ObserableStore, or a controller that
     * extends one of the two base controllers in the `@metamask/base-controller`
     * package.
     *
     * @type {Record<string, object>}
     */
    _defineProperty(this, "config", {});
    this.persist = persist;
    this.controllerMessenger = controllerMessenger;
    if (config) {
      this.updateStructure(config);
    }
  }

  /**
   * Composes a new internal store subscription structure
   *
   * @param {Record<string, object>} config - Describes which stores are being
   *   composed. The key is the name of the store, and the value is either an
   *   ObserableStore, or a controller that extends one of the two base
   *   controllers in the `@metamask/base-controller` package.
   */
  updateStructure(config) {
    this.config = config;
    this.removeAllListeners();
    for (const key of Object.keys(config)) {
      if (!config[key]) {
        throw new Error(`Undefined '${key}'`);
      }
      const store = config[key];
      if (store.subscribe) {
        config[key].subscribe(state => {
          this.updateState({
            [key]: state
          });
        });
      } else {
        this.controllerMessenger.subscribe(`${store.name}:stateChange`, state => {
          let updatedState = state;
          if (this.persist) {
            updatedState = (0, _baseController.getPersistentState)(state, config[key].metadata);
          }
          this.updateState({
            [key]: updatedState
          });
        });
      }
    }
  }

  /**
   * Merges all child store state into a single object rather than
   * returning an object keyed by child store class name
   *
   * @returns {object} Object containing merged child store state
   */
  getFlatState() {
    if (!this.config) {
      return {};
    }
    let flatState = {};
    for (const key of Object.keys(this.config)) {
      const controller = this.config[key];
      const state = controller.getState ? controller.getState() : controller.state;
      flatState = {
        ...flatState,
        ...state
      };
    }
    return flatState;
  }
}
exports.default = ComposableObservableStore;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\ComposableObservableStore.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\account-tracker.js", {"../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../constants/contracts":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\constants\\contracts.ts","./util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","@ethersproject/contracts":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@ethersproject\\contracts\\lib\\index.js","@ethersproject/providers":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@ethersproject\\providers\\lib\\index.js","@metamask/obs-store":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\obs-store\\dist\\index.js","eth-query":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-query\\index.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js","pify":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\pify\\index.js","single-call-balance-checker-abi":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\single-call-balance-checker-abi\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Caccount-tracker.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ethQuery = _interopRequireDefault(require("eth-query"));
var _obsStore = require("@metamask/obs-store");
var _loglevel = _interopRequireDefault(require("loglevel"));
var _pify = _interopRequireDefault(require("pify"));
var _providers = require("@ethersproject/providers");
var _contracts = require("@ethersproject/contracts");
var _singleCallBalanceCheckerAbi = _interopRequireDefault(require("single-call-balance-checker-abi"));
var _network = require("../../../shared/constants/network");
var _contracts2 = require("../constants/contracts");
var _util = require("./util");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* Account Tracker
 *
 * This module is responsible for tracking any number of accounts
 * and caching their current balances & transaction counts.
 *
 * It also tracks transaction hashes, and checks their inclusion status
 * on each new block.
 */

/**
 * This module is responsible for tracking any number of accounts and caching their current balances & transaction
 * counts.
 *
 * It also tracks transaction hashes, and checks their inclusion status on each new block.
 *
 * @typedef {object} AccountTracker
 * @property {object} store The stored object containing all accounts to track, as well as the current block's gas limit.
 * @property {object} store.accounts The accounts currently stored in this AccountTracker
 * @property {string} store.currentBlockGasLimit A hex string indicating the gas limit of the current block
 * @property {object} _provider A provider needed to create the EthQuery instance used within this AccountTracker.
 * @property {EthQuery} _query An EthQuery instance used to access account information from the blockchain
 * @property {BlockTracker} _blockTracker A BlockTracker instance. Needed to ensure that accounts and their info updates
 * when a new block is created.
 * @property {object} _currentBlockNumber Reference to a property on the _blockTracker: the number (i.e. an id) of the the current block
 */
class AccountTracker {
  /**
   * @param {object} opts - Options for initializing the controller
   * @param {object} opts.provider - An EIP-1193 provider instance that uses the current global network
   * @param {object} opts.blockTracker - A block tracker, which emits events for each new block
   * @param {Function} opts.getCurrentChainId - A function that returns the `chainId` for the current global network
   * @param {Function} opts.getNetworkIdentifier - A function that returns the current network
   */
  constructor(opts = {}) {
    const initState = {
      accounts: {},
      currentBlockGasLimit: ''
    };
    this.store = new _obsStore.ObservableStore({
      ...initState,
      ...opts.initState
    });
    this.resetState = () => {
      this.store.updateState(initState);
    };
    this._provider = opts.provider;
    this._query = (0, _pify.default)(new _ethQuery.default(this._provider));
    this._blockTracker = opts.blockTracker;
    // blockTracker.currentBlock may be null
    this._currentBlockNumber = this._blockTracker.getCurrentBlock();
    this._blockTracker.once('latest', blockNumber => {
      this._currentBlockNumber = blockNumber;
    });
    // bind function for easier listener syntax
    this._updateForBlock = this._updateForBlock.bind(this);
    this.getCurrentChainId = opts.getCurrentChainId;
    this.getNetworkIdentifier = opts.getNetworkIdentifier;
    this.preferencesController = opts.preferencesController;
    this.onboardingController = opts.onboardingController;
    this.onboardingController.store.subscribe((0, _util.previousValueComparator)(async (prevState, currState) => {
      const {
        completedOnboarding: prevCompletedOnboarding
      } = prevState;
      const {
        completedOnboarding: currCompletedOnboarding
      } = currState;
      if (!prevCompletedOnboarding && currCompletedOnboarding) {
        this._updateAccounts();
      }
    }, this.onboardingController.store.getState()));
    this.preferencesController.store.subscribe((0, _util.previousValueComparator)(async (prevState, currState) => {
      const {
        selectedAddress: prevSelectedAddress
      } = prevState;
      const {
        selectedAddress: currSelectedAddress,
        useMultiAccountBalanceChecker
      } = currState;
      if (prevSelectedAddress !== currSelectedAddress && !useMultiAccountBalanceChecker) {
        this._updateAccounts();
      }
    }, this.onboardingController.store.getState()));
    this.ethersProvider = new _providers.Web3Provider(this._provider);
  }
  start() {
    // remove first to avoid double add
    this._blockTracker.removeListener('latest', this._updateForBlock);
    // add listener
    this._blockTracker.addListener('latest', this._updateForBlock);
    // fetch account balances
    this._updateAccounts();
  }
  stop() {
    // remove listener
    this._blockTracker.removeListener('latest', this._updateForBlock);
  }

  /**
   * Ensures that the locally stored accounts are in sync with a set of accounts stored externally to this
   * AccountTracker.
   *
   * Once this AccountTracker's accounts are up to date with those referenced by the passed addresses, each
   * of these accounts are given an updated balance via EthQuery.
   *
   * @param {Array} addresses - The array of hex addresses for accounts with which this AccountTracker's accounts should be
   * in sync
   */
  syncWithAddresses(addresses) {
    const {
      accounts
    } = this.store.getState();
    const locals = Object.keys(accounts);
    const accountsToAdd = [];
    addresses.forEach(upstream => {
      if (!locals.includes(upstream)) {
        accountsToAdd.push(upstream);
      }
    });
    const accountsToRemove = [];
    locals.forEach(local => {
      if (!addresses.includes(local)) {
        accountsToRemove.push(local);
      }
    });
    this.addAccounts(accountsToAdd);
    this.removeAccount(accountsToRemove);
  }

  /**
   * Adds new addresses to track the balances of
   * given a balance as long this._currentBlockNumber is defined.
   *
   * @param {Array} addresses - An array of hex addresses of new accounts to track
   */
  addAccounts(addresses) {
    const {
      accounts
    } = this.store.getState();
    // add initial state for addresses
    addresses.forEach(address => {
      accounts[address] = {};
    });
    // save accounts state
    this.store.updateState({
      accounts
    });
    // fetch balances for the accounts if there is block number ready
    if (!this._currentBlockNumber) {
      return;
    }
    this._updateAccounts();
  }

  /**
   * Removes accounts from being tracked
   *
   * @param {Array} addresses - An array of hex addresses to stop tracking.
   */
  removeAccount(addresses) {
    const {
      accounts
    } = this.store.getState();
    // remove each state object
    addresses.forEach(address => {
      delete accounts[address];
    });
    // save accounts state
    this.store.updateState({
      accounts
    });
  }

  /**
   * Removes all addresses and associated balances
   */

  clearAccounts() {
    this.store.updateState({
      accounts: {}
    });
  }

  /**
   * Given a block, updates this AccountTracker's currentBlockGasLimit, and then updates each local account's balance
   * via EthQuery
   *
   * @private
   * @param {number} blockNumber - the block number to update to.
   * @fires 'block' The updated state, if all account updates are successful
   */
  async _updateForBlock(blockNumber) {
    this._currentBlockNumber = blockNumber;

    // block gasLimit polling shouldn't be in account-tracker shouldn't be here...
    const currentBlock = await this._query.getBlockByNumber(blockNumber, false);
    if (!currentBlock) {
      return;
    }
    const currentBlockGasLimit = currentBlock.gasLimit;
    this.store.updateState({
      currentBlockGasLimit
    });
    try {
      await this._updateAccounts();
    } catch (err) {
      _loglevel.default.error(err);
    }
  }

  /**
   * balanceChecker is deployed on main eth (test)nets and requires a single call
   * for all other networks, calls this._updateAccount for each account in this.store
   *
   * @returns {Promise} after all account balances updated
   */
  async _updateAccounts() {
    const {
      completedOnboarding
    } = this.onboardingController.store.getState();
    if (!completedOnboarding) {
      return;
    }
    const {
      useMultiAccountBalanceChecker
    } = this.preferencesController.store.getState();
    let addresses = [];
    if (useMultiAccountBalanceChecker) {
      const {
        accounts
      } = this.store.getState();
      addresses = Object.keys(accounts);
    } else {
      const selectedAddress = this.preferencesController.getSelectedAddress();
      addresses = [selectedAddress];
    }
    const chainId = this.getCurrentChainId();
    const networkId = this.getNetworkIdentifier();
    const rpcUrl = 'http://127.0.0.1:8545';
    if (networkId === _network.LOCALHOST_RPC_URL || networkId === rpcUrl) {
      await Promise.all(addresses.map(this._updateAccount.bind(this)));
    } else {
      switch (chainId) {
        case _network.CHAIN_IDS.MAINNET:
          await this._updateAccountsViaBalanceChecker(addresses, _contracts2.SINGLE_CALL_BALANCES_ADDRESS);
          break;
        case _network.CHAIN_IDS.GOERLI:
          await this._updateAccountsViaBalanceChecker(addresses, _contracts2.SINGLE_CALL_BALANCES_ADDRESS_GOERLI);
          break;
        case _network.CHAIN_IDS.SEPOLIA:
          await this._updateAccountsViaBalanceChecker(addresses, _contracts2.SINGLE_CALL_BALANCES_ADDRESS_SEPOLIA);
          break;
        case _network.CHAIN_IDS.BSC:
          await this._updateAccountsViaBalanceChecker(addresses, _contracts2.SINGLE_CALL_BALANCES_ADDRESS_BSC);
          break;
        case _network.CHAIN_IDS.OPTIMISM:
          await this._updateAccountsViaBalanceChecker(addresses, _contracts2.SINGLE_CALL_BALANCES_ADDRESS_OPTIMISM);
          break;
        case _network.CHAIN_IDS.POLYGON:
          await this._updateAccountsViaBalanceChecker(addresses, _contracts2.SINGLE_CALL_BALANCES_ADDRESS_POLYGON);
          break;
        case _network.CHAIN_IDS.AVALANCHE:
          await this._updateAccountsViaBalanceChecker(addresses, _contracts2.SINGLE_CALL_BALANCES_ADDRESS_AVALANCHE);
          break;
        case _network.CHAIN_IDS.FANTOM:
          await this._updateAccountsViaBalanceChecker(addresses, _contracts2.SINGLE_CALL_BALANCES_ADDRESS_FANTOM);
          break;
        case _network.CHAIN_IDS.ARBITRUM:
          await this._updateAccountsViaBalanceChecker(addresses, _contracts2.SINGLE_CALL_BALANCES_ADDRESS_ARBITRUM);
          break;
        default:
          await Promise.all(addresses.map(this._updateAccount.bind(this)));
      }
    }
  }

  /**
   * Updates the current balance of an account.
   *
   * @private
   * @param {string} address - A hex address of a the account to be updated
   * @returns {Promise} after the account balance is updated
   */
  async _updateAccount(address) {
    const {
      useMultiAccountBalanceChecker
    } = this.preferencesController.store.getState();
    let balance = '0x0';

    // query balance
    try {
      balance = await this._query.getBalance(address);
    } catch (error) {
      var _error$data, _error$data$request;
      if (((_error$data = error.data) === null || _error$data === void 0 ? void 0 : (_error$data$request = _error$data.request) === null || _error$data$request === void 0 ? void 0 : _error$data$request.method) !== 'eth_getBalance') {
        throw error;
      }
    }
    const result = {
      address,
      balance
    };
    // update accounts state
    const {
      accounts
    } = this.store.getState();
    // only populate if the entry is still present
    if (!accounts[address]) {
      return;
    }
    let newAccounts = accounts;
    if (!useMultiAccountBalanceChecker) {
      newAccounts = {};
      Object.keys(accounts).forEach(accountAddress => {
        if (address !== accountAddress) {
          newAccounts[accountAddress] = {
            address: accountAddress,
            balance: null
          };
        }
      });
    }
    newAccounts[address] = result;
    this.store.updateState({
      accounts: newAccounts
    });
  }

  /**
   * Updates current address balances from balanceChecker deployed contract instance
   *
   * @param {*} addresses
   * @param {*} deployedContractAddress
   */
  async _updateAccountsViaBalanceChecker(addresses, deployedContractAddress) {
    const {
      accounts
    } = this.store.getState();
    const newAccounts = {};
    Object.keys(accounts).forEach(address => {
      if (!addresses.includes(address)) {
        newAccounts[address] = {
          address,
          balance: null
        };
      }
    });
    this.ethersProvider = new _providers.Web3Provider(this._provider);
    const ethContract = await new _contracts.Contract(deployedContractAddress, _singleCallBalanceCheckerAbi.default, this.ethersProvider);
    const ethBalance = ['0x0000000000000000000000000000000000000000'];
    try {
      const balances = await ethContract.balances(addresses, ethBalance);
      addresses.forEach((address, index) => {
        const balance = balances[index] ? balances[index].toHexString() : '0x0';
        newAccounts[address] = {
          address,
          balance
        };
      });
      this.store.updateState({
        accounts: newAccounts
      });
    } catch (error) {
      _loglevel.default.warn(`MetaMask - Account Tracker single call balance fetch failed`, error);
      Promise.all(addresses.map(this._updateAccount.bind(this)));
    }
  }
}
exports.default = AccountTracker;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\account-tracker.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\cleanErrorStack.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5CcleanErrorStack.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cleanErrorStack;
/**
 * Returns error without stack trace for better UI display
 *
 * @param {Error} err - error
 * @returns {Error} Error with clean stack trace.
 */
function cleanErrorStack(err) {
  let {
    name
  } = err;
  name = name === undefined ? 'Error' : String(name);
  let msg = err.message;
  msg = msg === undefined ? '' : String(msg);
  if (name === '') {
    err.stack = err.message;
  } else if (msg === '') {
    err.stack = err.name;
  } else if (!err.stack) {
    err.stack = `${err.name}: ${err.message}`;
  }
  return err;
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\cleanErrorStack.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\createDupeReqFilterMiddleware.js", {"loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5CcreateDupeReqFilterMiddleware.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDupeReqFilterMiddleware;
var _loglevel = _interopRequireDefault(require("loglevel"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Returns a middleware that filters out requests already seen
 *
 * @returns {Function}
 */
function createDupeReqFilterMiddleware() {
  const processedRequestId = [];
  return function filterDuplicateRequestMiddleware( /** @type {any} */req, /** @type {any} */_res, /** @type {Function} */next, /** @type {Function} */end) {
    if (processedRequestId.indexOf(req.id) >= 0) {
      _loglevel.default.info(`RPC request with id ${req.id} already seen.`);
      return end();
    }
    processedRequestId.push(req.id);
    return next();
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\createDupeReqFilterMiddleware.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\createLoggerMiddleware.js", {"loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5CcreateLoggerMiddleware.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createLoggerMiddleware;
var _loglevel = _interopRequireDefault(require("loglevel"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Returns a middleware that logs RPC activity
 *
 * @param {{ origin: string }} opts - The middleware options
 * @returns {Function}
 */
function createLoggerMiddleware(opts) {
  return function loggerMiddleware( /** @type {any} */req, /** @type {any} */res, /** @type {Function} */next) {
    next(( /** @type {Function} */cb) => {
      if (res.error) {
        _loglevel.default.error('Error in RPC response:\n', res);
      }
      if (req.isMetamaskInternal) {
        return;
      }
      _loglevel.default.info(`RPC (${opts.origin}):`, req, '->', res);
      cb();
    });
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\createLoggerMiddleware.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\createMetaRPCHandler.js", {"../../../shared/modules/mv3.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\mv3.utils.js","eth-rpc-errors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-rpc-errors\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5CcreateMetaRPCHandler.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ethRpcErrors = require("eth-rpc-errors");
var _mv = require("../../../shared/modules/mv3.utils");
const createMetaRPCHandler = (api, outStream, store, localStoreApiWrapper) => {
  return async data => {
    if (outStream._writableState.ended) {
      return;
    }
    if (!api[data.method]) {
      outStream.write({
        jsonrpc: '2.0',
        error: _ethRpcErrors.ethErrors.rpc.methodNotFound({
          message: `${data.method} not found`
        }),
        id: data.id
      });
      return;
    }
    let result;
    let error;
    try {
      result = await api[data.method](...data.params);
    } catch (err) {
      error = err;
    } finally {
      if (_mv.isManifestV3 && store && data.method !== 'getState') {
        localStoreApiWrapper.set(store.getState());
      }
    }
    if (outStream._writableState.ended) {
      if (error) {
        console.error(error);
      }
      return;
    }
    if (error) {
      outStream.write({
        jsonrpc: '2.0',
        error: (0, _ethRpcErrors.serializeError)(error, {
          shouldIncludeStack: true
        }),
        id: data.id
      });
    } else {
      outStream.write({
        jsonrpc: '2.0',
        result,
        id: data.id
      });
    }
  };
};
var _default = createMetaRPCHandler;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\createMetaRPCHandler.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\createMetamaskMiddleware.js", {"./middleware/pending":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\middleware\\pending.js","@metamask/eth-json-rpc-middleware":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\eth-json-rpc-middleware\\dist\\index.js","json-rpc-engine":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\json-rpc-engine\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5CcreateMetamaskMiddleware.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMetamaskMiddleware;
var _jsonRpcEngine = require("json-rpc-engine");
var _ethJsonRpcMiddleware = require("@metamask/eth-json-rpc-middleware");
var _pending = require("./middleware/pending");
function createMetamaskMiddleware({
  version,
  getAccounts,
  processTransaction,
  processEthSignMessage,
  processTypedMessage,
  processTypedMessageV3,
  processTypedMessageV4,
  processPersonalMessage,
  processDecryptMessage,
  processEncryptionPublicKey,
  getPendingNonce,
  getPendingTransactionByHash
}) {
  const metamaskMiddleware = (0, _jsonRpcEngine.mergeMiddleware)([(0, _jsonRpcEngine.createScaffoldMiddleware)({
    eth_syncing: false,
    web3_clientVersion: `MetaMask/v${version}`
  }), (0, _ethJsonRpcMiddleware.createWalletMiddleware)({
    getAccounts,
    processTransaction,
    processEthSignMessage,
    processTypedMessage,
    processTypedMessageV3,
    processTypedMessageV4,
    processPersonalMessage,
    processDecryptMessage,
    processEncryptionPublicKey
  }), (0, _pending.createPendingNonceMiddleware)({
    getPendingNonce
  }), (0, _pending.createPendingTxMiddleware)({
    getPendingTransactionByHash
  })]);
  return metamaskMiddleware;
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\createMetamaskMiddleware.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\createOnboardingMiddleware.js", {"loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js","webextension-polyfill":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5CcreateOnboardingMiddleware.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOnboardingMiddleware;
var _loglevel = _interopRequireDefault(require("loglevel"));
var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Returns a middleware that intercepts `wallet_registerOnboarding` messages
 *
 * @param {{ location: string, registerOnboarding: Function }} opts - The middleware options
 * @returns {(req: any, res: any, next: Function, end: Function) => void}
 */
function createOnboardingMiddleware({
  location,
  registerOnboarding
}) {
  return async function originMiddleware(req, res, next, end) {
    try {
      if (req.method !== 'wallet_registerOnboarding') {
        next();
        return;
      }
      if (req.tabId && req.tabId !== _webextensionPolyfill.default.tabs.TAB_ID_NONE) {
        await registerOnboarding(location, req.tabId);
      } else {
        _loglevel.default.debug(`'wallet_registerOnboarding' message from ${location} ignored due to missing tabId`);
      }
      res.result = true;
      end();
    } catch (error) {
      end(error);
    }
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\createOnboardingMiddleware.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\createOriginMiddleware.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5CcreateOriginMiddleware.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createOriginMiddleware;
/**
 * Returns a middleware that appends the DApp origin to request
 *
 * @param {{ origin: string }} opts - The middleware options
 * @returns {Function}
 */
function createOriginMiddleware(opts) {
  return function originMiddleware( /** @type {any} */req, /** @type {any} */_, /** @type {Function} */next) {
    req.origin = opts.origin;
    next();
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\createOriginMiddleware.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\createRPCMethodTrackingMiddleware.js", {"../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../shared/constants/time":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\time.ts","../../../shared/constants/transaction":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\transaction.ts","@metamask/controller-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\controller-utils\\dist\\index.js","eth-rpc-errors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-rpc-errors\\dist\\index.js","ethereumjs-util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethereumjs-util\\dist.browser\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5CcreateRPCMethodTrackingMiddleware.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRPCMethodTrackingMiddleware;
var _ethRpcErrors = require("eth-rpc-errors");
var _controllerUtils = require("@metamask/controller-utils");
var _ethereumjsUtil = require("ethereumjs-util");
var _app = require("../../../shared/constants/app");
var _transaction = require("../../../shared/constants/transaction");
var _time = require("../../../shared/constants/time");
var _metametrics = require("../../../shared/constants/metametrics");
/**
 * These types determine how the method tracking middleware handles incoming
 * requests based on the method name. There are three options right now but
 * the types could be expanded to cover other options in the future.
 */
const RATE_LIMIT_TYPES = {
  RATE_LIMITED: 'rate_limited',
  BLOCKED: 'blocked',
  NON_RATE_LIMITED: 'non_rate_limited'
};

/**
 * This object maps a method name to a RATE_LIMIT_TYPE. If not in this map the
 * default is 'RATE_LIMITED'
 */
const RATE_LIMIT_MAP = {
  [_app.MESSAGE_TYPE.ETH_SIGN]: RATE_LIMIT_TYPES.NON_RATE_LIMITED,
  [_app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA]: RATE_LIMIT_TYPES.NON_RATE_LIMITED,
  [_app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA_V3]: RATE_LIMIT_TYPES.NON_RATE_LIMITED,
  [_app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA_V4]: RATE_LIMIT_TYPES.NON_RATE_LIMITED,
  [_app.MESSAGE_TYPE.PERSONAL_SIGN]: RATE_LIMIT_TYPES.NON_RATE_LIMITED,
  [_app.MESSAGE_TYPE.ETH_DECRYPT]: RATE_LIMIT_TYPES.NON_RATE_LIMITED,
  [_app.MESSAGE_TYPE.ETH_GET_ENCRYPTION_PUBLIC_KEY]: RATE_LIMIT_TYPES.NON_RATE_LIMITED,
  [_app.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS]: RATE_LIMIT_TYPES.RATE_LIMITED,
  [_app.MESSAGE_TYPE.WALLET_REQUEST_PERMISSIONS]: RATE_LIMIT_TYPES.RATE_LIMITED,
  [_app.MESSAGE_TYPE.SEND_METADATA]: RATE_LIMIT_TYPES.BLOCKED,
  [_app.MESSAGE_TYPE.GET_PROVIDER_STATE]: RATE_LIMIT_TYPES.BLOCKED
};

/**
 * For events with user interaction (approve / reject | cancel) this map will
 * return an object with APPROVED, REJECTED, REQUESTED, and FAILED keys that map to the
 * appropriate event names.
 */
const EVENT_NAME_MAP = {
  [_app.MESSAGE_TYPE.ETH_SIGN]: {
    APPROVED: _metametrics.MetaMetricsEventName.SignatureApproved,
    FAILED: _metametrics.MetaMetricsEventName.SignatureFailed,
    REJECTED: _metametrics.MetaMetricsEventName.SignatureRejected,
    REQUESTED: _metametrics.MetaMetricsEventName.SignatureRequested
  },
  [_app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA]: {
    APPROVED: _metametrics.MetaMetricsEventName.SignatureApproved,
    REJECTED: _metametrics.MetaMetricsEventName.SignatureRejected,
    REQUESTED: _metametrics.MetaMetricsEventName.SignatureRequested
  },
  [_app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA_V3]: {
    APPROVED: _metametrics.MetaMetricsEventName.SignatureApproved,
    REJECTED: _metametrics.MetaMetricsEventName.SignatureRejected,
    REQUESTED: _metametrics.MetaMetricsEventName.SignatureRequested
  },
  [_app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA_V4]: {
    APPROVED: _metametrics.MetaMetricsEventName.SignatureApproved,
    REJECTED: _metametrics.MetaMetricsEventName.SignatureRejected,
    REQUESTED: _metametrics.MetaMetricsEventName.SignatureRequested
  },
  [_app.MESSAGE_TYPE.PERSONAL_SIGN]: {
    APPROVED: _metametrics.MetaMetricsEventName.SignatureApproved,
    REJECTED: _metametrics.MetaMetricsEventName.SignatureRejected,
    REQUESTED: _metametrics.MetaMetricsEventName.SignatureRequested
  },
  [_app.MESSAGE_TYPE.ETH_DECRYPT]: {
    APPROVED: _metametrics.MetaMetricsEventName.DecryptionApproved,
    REJECTED: _metametrics.MetaMetricsEventName.DecryptionRejected,
    REQUESTED: _metametrics.MetaMetricsEventName.DecryptionRequested
  },
  [_app.MESSAGE_TYPE.ETH_GET_ENCRYPTION_PUBLIC_KEY]: {
    APPROVED: _metametrics.MetaMetricsEventName.EncryptionPublicKeyApproved,
    REJECTED: _metametrics.MetaMetricsEventName.EncryptionPublicKeyRejected,
    REQUESTED: _metametrics.MetaMetricsEventName.EncryptionPublicKeyRequested
  },
  [_app.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS]: {
    APPROVED: _metametrics.MetaMetricsEventName.PermissionsApproved,
    REJECTED: _metametrics.MetaMetricsEventName.PermissionsRejected,
    REQUESTED: _metametrics.MetaMetricsEventName.PermissionsRequested
  },
  [_app.MESSAGE_TYPE.WALLET_REQUEST_PERMISSIONS]: {
    APPROVED: _metametrics.MetaMetricsEventName.PermissionsApproved,
    REJECTED: _metametrics.MetaMetricsEventName.PermissionsRejected,
    REQUESTED: _metametrics.MetaMetricsEventName.PermissionsRequested
  }
};
const rateLimitTimeouts = {};

/**
 * Returns a middleware that tracks inpage_provider usage using sampling for
 * each type of event except those that require user interaction, such as
 * signature requests
 *
 * @param {object} opts - options for the rpc method tracking middleware
 * @param {Function} opts.trackEvent - trackEvent method from
 *  MetaMetricsController
 * @param {Function} opts.getMetricsState - get the state of
 *  MetaMetricsController
 * @param {number} [opts.rateLimitSeconds] - number of seconds to wait before
 *  allowing another set of events to be tracked.
 * @param opts.securityProviderRequest
 * @returns {Function}
 */
function createRPCMethodTrackingMiddleware({
  trackEvent,
  getMetricsState,
  rateLimitSeconds = 60 * 5,
  securityProviderRequest
}) {
  return async function rpcMethodTrackingMiddleware( /** @type {any} */req, /** @type {any} */res, /** @type {Function} */next) {
    const {
      origin,
      method
    } = req;

    // Determine what type of rate limit to apply based on method
    const rateLimitType = RATE_LIMIT_MAP[method] ?? RATE_LIMIT_TYPES.RATE_LIMITED;

    // If the rateLimitType is RATE_LIMITED check the rateLimitTimeouts
    const rateLimited = rateLimitType === RATE_LIMIT_TYPES.RATE_LIMITED && typeof rateLimitTimeouts[method] !== 'undefined';

    // Get the participateInMetaMetrics state to determine if we should track
    // anything. This is extra redundancy because this value is checked in
    // the metametrics controller's trackEvent method as well.
    const userParticipatingInMetaMetrics = getMetricsState().participateInMetaMetrics === true;

    // Get the event type, each of which has APPROVED, REJECTED and REQUESTED
    // keys for the various events in the flow.
    const eventType = EVENT_NAME_MAP[method];
    const eventProperties = {};

    // Boolean variable that reduces code duplication and increases legibility
    const shouldTrackEvent =
    // Don't track if the request came from our own UI or background
    origin !== _app.ORIGIN_METAMASK &&
    // Don't track if this is a blocked method
    rateLimitType !== RATE_LIMIT_TYPES.BLOCKED &&
    // Don't track if the rate limit has been hit
    rateLimited === false &&
    // Don't track if the user isn't participating in metametrics
    userParticipatingInMetaMetrics === true;
    if (shouldTrackEvent) {
      // We track an initial "requested" event as soon as the dapp calls the
      // provider method. For the events not special cased this is the only
      // event that will be fired and the event name will be
      // 'Provider Method Called'.
      const event = eventType ? eventType.REQUESTED : _metametrics.MetaMetricsEventName.ProviderMethodCalled;
      if (event === _metametrics.MetaMetricsEventName.SignatureRequested) {
        var _req$params, _req$params6;
        eventProperties.signature_type = method;

        // In personal messages the first param is data while in typed messages second param is data
        // if condition below is added to ensure that the right params are captured as data and address.
        let data;
        let from;
        if ((0, _ethereumjsUtil.isValidAddress)(req === null || req === void 0 ? void 0 : (_req$params = req.params) === null || _req$params === void 0 ? void 0 : _req$params[1])) {
          var _req$params2, _req$params3;
          data = req === null || req === void 0 ? void 0 : (_req$params2 = req.params) === null || _req$params2 === void 0 ? void 0 : _req$params2[0];
          from = req === null || req === void 0 ? void 0 : (_req$params3 = req.params) === null || _req$params3 === void 0 ? void 0 : _req$params3[1];
        } else {
          var _req$params4, _req$params5;
          data = req === null || req === void 0 ? void 0 : (_req$params4 = req.params) === null || _req$params4 === void 0 ? void 0 : _req$params4[1];
          from = req === null || req === void 0 ? void 0 : (_req$params5 = req.params) === null || _req$params5 === void 0 ? void 0 : _req$params5[0];
        }
        const paramsExamplePassword = req === null || req === void 0 ? void 0 : (_req$params6 = req.params) === null || _req$params6 === void 0 ? void 0 : _req$params6[2];
        const msgData = {
          msgParams: {
            ...paramsExamplePassword,
            from,
            data,
            origin
          },
          status: _transaction.TransactionStatus.unapproved,
          type: req.method
        };
        try {
          const securityProviderResponse = await securityProviderRequest(msgData, req.method);
          if ((securityProviderResponse === null || securityProviderResponse === void 0 ? void 0 : securityProviderResponse.flagAsDangerous) === 1) {
            eventProperties.ui_customizations = [_metametrics.MetaMetricsEventUiCustomization.FlaggedAsMalicious];
          } else if ((securityProviderResponse === null || securityProviderResponse === void 0 ? void 0 : securityProviderResponse.flagAsDangerous) === 2) {
            eventProperties.ui_customizations = [_metametrics.MetaMetricsEventUiCustomization.FlaggedAsSafetyUnknown];
          }
          if (method === _app.MESSAGE_TYPE.PERSONAL_SIGN) {
            const {
              isSIWEMessage
            } = (0, _controllerUtils.detectSIWE)({
              data
            });
            if (isSIWEMessage) {
              eventProperties.ui_customizations = (eventProperties.ui_customizations || []).concat(_metametrics.MetaMetricsEventUiCustomization.Siwe);
            }
          }
        } catch (e) {
          console.warn(`createRPCMethodTrackingMiddleware: Error calling securityProviderRequest - ${e}`);
        }
      } else {
        eventProperties.method = method;
      }
      trackEvent({
        event,
        category: _metametrics.MetaMetricsEventCategory.InpageProvider,
        referrer: {
          url: origin
        },
        properties: eventProperties
      });
      rateLimitTimeouts[method] = setTimeout(() => {
        delete rateLimitTimeouts[method];
      }, _time.SECOND * rateLimitSeconds);
    }
    next(async callback => {
      var _res$error, _res$error2;
      if (shouldTrackEvent === false || typeof eventType === 'undefined') {
        return callback();
      }

      // The rpc error methodNotFound implies that 'eth_sign' is disabled in Advanced Settings
      const isDisabledEthSignAdvancedSetting = method === _app.MESSAGE_TYPE.ETH_SIGN && ((_res$error = res.error) === null || _res$error === void 0 ? void 0 : _res$error.code) === _ethRpcErrors.errorCodes.rpc.methodNotFound;
      const isDisabledRPCMethod = isDisabledEthSignAdvancedSetting;
      let event;
      if (isDisabledRPCMethod) {
        event = eventType.FAILED;
        eventProperties.error = res.error;
      } else if (((_res$error2 = res.error) === null || _res$error2 === void 0 ? void 0 : _res$error2.code) === _ethRpcErrors.errorCodes.provider.userRejectedRequest) {
        event = eventType.REJECTED;
      } else {
        event = eventType.APPROVED;
      }
      trackEvent({
        event,
        category: _metametrics.MetaMetricsEventCategory.InpageProvider,
        referrer: {
          url: origin
        },
        properties: eventProperties
      });
      return callback();
    });
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\createRPCMethodTrackingMiddleware.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\createStreamSink.js", {"promise-to-callback":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\promise-to-callback\\index.js","readable-stream":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\readable-stream\\readable-browser.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5CcreateStreamSink.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createStreamSink;
var _readableStream = require("readable-stream");
var _promiseToCallback = _interopRequireDefault(require("promise-to-callback"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class AsyncWritableStream extends _readableStream.Writable {
  constructor(asyncWriteFn, _opts) {
    const opts = {
      objectMode: true,
      ..._opts
    };
    super(opts);
    this._asyncWriteFn = asyncWriteFn;
  }

  // write from incoming stream to state
  _write(chunk, encoding, callback) {
    (0, _promiseToCallback.default)(this._asyncWriteFn(chunk, encoding))(callback);
  }
}
function createStreamSink(asyncWriteFn, _opts) {
  return new AsyncWritableStream(asyncWriteFn, _opts);
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\createStreamSink.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\createTabIdMiddleware.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5CcreateTabIdMiddleware.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createTabIdMiddleware;
/**
 * Returns a middleware that appends the DApp TabId to the request
 *
 * @param {{ tabId: number }} opts - The middleware options
 * @returns {Function}
 */
function createTabIdMiddleware(opts) {
  return function tabIdMiddleware( /** @type {any} */req, /** @type {any} */_, /** @type {Function} */next) {
    req.tabId = opts.tabId;
    next();
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\createTabIdMiddleware.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\ens-ipfs\\contracts\\registry.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Cens-ipfs%5Ccontracts%5Cregistry.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const abi = [{
  constant: true,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }],
  name: 'resolver',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }],
  name: 'owner',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }, {
    name: 'label',
    type: 'bytes32'
  }, {
    name: 'owner',
    type: 'address'
  }],
  name: 'setSubnodeOwner',
  outputs: [],
  payable: false,
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }, {
    name: 'ttl',
    type: 'uint64'
  }],
  name: 'setTTL',
  outputs: [],
  payable: false,
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }],
  name: 'ttl',
  outputs: [{
    name: '',
    type: 'uint64'
  }],
  payable: false,
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }, {
    name: 'resolver',
    type: 'address'
  }],
  name: 'setResolver',
  outputs: [],
  payable: false,
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }, {
    name: 'owner',
    type: 'address'
  }],
  name: 'setOwner',
  outputs: [],
  payable: false,
  type: 'function'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'node',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'owner',
    type: 'address'
  }],
  name: 'Transfer',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'node',
    type: 'bytes32'
  }, {
    indexed: true,
    name: 'label',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'owner',
    type: 'address'
  }],
  name: 'NewOwner',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'node',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'resolver',
    type: 'address'
  }],
  name: 'NewResolver',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'node',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'ttl',
    type: 'uint64'
  }],
  name: 'NewTTL',
  type: 'event'
}];
var _default = abi;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\ens-ipfs\\contracts\\registry.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\ens-ipfs\\contracts\\resolver.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Cens-ipfs%5Ccontracts%5Cresolver.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const abi = [{
  constant: false,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }, {
    name: 'hash',
    type: 'bytes32'
  }],
  name: 'setContent',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }],
  name: 'content',
  outputs: [{
    name: '',
    type: 'bytes32'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'interfaceID',
    type: 'bytes4'
  }],
  name: 'supportsInterface',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'pure',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }, {
    name: 'key',
    type: 'string'
  }, {
    name: 'value',
    type: 'string'
  }],
  name: 'setText',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }, {
    name: 'contentTypes',
    type: 'uint256'
  }],
  name: 'ABI',
  outputs: [{
    name: 'contentType',
    type: 'uint256'
  }, {
    name: 'data',
    type: 'bytes'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }, {
    name: 'x',
    type: 'bytes32'
  }, {
    name: 'y',
    type: 'bytes32'
  }],
  name: 'setPubkey',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }, {
    name: 'hash',
    type: 'bytes'
  }],
  name: 'setContenthash',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }],
  name: 'addr',
  outputs: [{
    name: '',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }, {
    name: 'key',
    type: 'string'
  }],
  name: 'text',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }, {
    name: 'contentType',
    type: 'uint256'
  }, {
    name: 'data',
    type: 'bytes'
  }],
  name: 'setABI',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }],
  name: 'name',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }, {
    name: 'name',
    type: 'string'
  }],
  name: 'setName',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }],
  name: 'contenthash',
  outputs: [{
    name: '',
    type: 'bytes'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }],
  name: 'pubkey',
  outputs: [{
    name: 'x',
    type: 'bytes32'
  }, {
    name: 'y',
    type: 'bytes32'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: 'node',
    type: 'bytes32'
  }, {
    name: 'addr',
    type: 'address'
  }],
  name: 'setAddr',
  outputs: [],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    name: 'ensAddr',
    type: 'address'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'node',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'a',
    type: 'address'
  }],
  name: 'AddrChanged',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'node',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'name',
    type: 'string'
  }],
  name: 'NameChanged',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'node',
    type: 'bytes32'
  }, {
    indexed: true,
    name: 'contentType',
    type: 'uint256'
  }],
  name: 'ABIChanged',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'node',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'x',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'y',
    type: 'bytes32'
  }],
  name: 'PubkeyChanged',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'node',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'indexedKey',
    type: 'string'
  }, {
    indexed: false,
    name: 'key',
    type: 'string'
  }],
  name: 'TextChanged',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'node',
    type: 'bytes32'
  }, {
    indexed: false,
    name: 'hash',
    type: 'bytes'
  }],
  name: 'ContenthashChanged',
  type: 'event'
}];
var _default = abi;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\ens-ipfs\\contracts\\resolver.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\ens-ipfs\\resolver.js", {"./contracts/registry":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\ens-ipfs\\contracts\\registry.js","./contracts/resolver":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\ens-ipfs\\contracts\\resolver.js","@ensdomains/content-hash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@ensdomains\\content-hash\\src\\index.js","eth-ens-namehash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-ens-namehash\\index.js","ethjs-contract":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethjs-contract\\lib\\index.js","ethjs-query":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethjs-query\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Cens-ipfs%5Cresolver.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveEnsToIpfsContentId;
var _ethEnsNamehash = _interopRequireDefault(require("eth-ens-namehash"));
var _ethjsQuery = _interopRequireDefault(require("ethjs-query"));
var _ethjsContract = _interopRequireDefault(require("ethjs-contract"));
var _contentHash = _interopRequireDefault(require("@ensdomains/content-hash"));
var _registry = _interopRequireDefault(require("./contracts/registry"));
var _resolver = _interopRequireDefault(require("./contracts/resolver"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
async function resolveEnsToIpfsContentId({
  provider,
  name
}) {
  const eth = new _ethjsQuery.default(provider);
  const hash = _ethEnsNamehash.default.hash(name);
  const contract = new _ethjsContract.default(eth);
  // lookup registry
  const chainId = Number.parseInt(await eth.net_version(), 10);
  const registryAddress = getRegistryForChainId(chainId);
  if (!registryAddress) {
    throw new Error(`EnsIpfsResolver - no known ens-ipfs registry for chainId "${chainId}"`);
  }
  const Registry = contract(_registry.default).at(registryAddress);
  // lookup resolver
  const resolverLookupResult = await Registry.resolver(hash);
  const resolverAddress = resolverLookupResult[0];
  if (hexValueIsEmpty(resolverAddress)) {
    throw new Error(`EnsIpfsResolver - no resolver found for name "${name}"`);
  }
  const Resolver = contract(_resolver.default).at(resolverAddress);
  const isEIP1577Compliant = await Resolver.supportsInterface('0xbc1c58d1');
  const isLegacyResolver = await Resolver.supportsInterface('0xd8389dc5');
  if (isEIP1577Compliant[0]) {
    const contentLookupResult = await Resolver.contenthash(hash);
    const rawContentHash = contentLookupResult[0];
    let decodedContentHash = _contentHash.default.decode(rawContentHash);
    const type = _contentHash.default.getCodec(rawContentHash);
    if (type === 'ipfs-ns' || type === 'ipns-ns') {
      decodedContentHash = _contentHash.default.helpers.cidV0ToV1Base32(decodedContentHash);
    }
    return {
      type,
      hash: decodedContentHash
    };
  }
  if (isLegacyResolver[0]) {
    // lookup content id
    const contentLookupResult = await Resolver.content(hash);
    const content = contentLookupResult[0];
    if (hexValueIsEmpty(content)) {
      throw new Error(`EnsIpfsResolver - no content ID found for name "${name}"`);
    }
    return {
      type: 'swarm-ns',
      hash: content.slice(2)
    };
  }
  throw new Error(`EnsIpfsResolver - the resolver for name "${name}" is not standard, it should either supports contenthash() or content()`);
}
function hexValueIsEmpty(value) {
  return [undefined, null, '0x', '0x0', '0x0000000000000000000000000000000000000000000000000000000000000000'].includes(value);
}

/**
 * Returns the registry address for the given chain ID
 *
 * @param {number} chainId - the chain ID
 * @returns {string|null} the registry address if known, null otherwise
 */
function getRegistryForChainId(chainId) {
  switch (chainId) {
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      // Mainnet and Goerli, respectively, use the same address
      return '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e';
    default:
      return null;
  }
}


      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\ens-ipfs\\resolver.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\ens-ipfs\\setup.js", {"../../../../shared/modules/fetch-with-timeout":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\fetch-with-timeout.ts","./resolver":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\ens-ipfs\\resolver.js","base32-encode":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\base32-encode\\index.js","base64-js":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\base64-js\\index.js","webextension-polyfill":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Cens-ipfs%5Csetup.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = setupEnsIpfsResolver;
var _base32Encode = _interopRequireDefault(require("base32-encode"));
var _base64Js = _interopRequireDefault(require("base64-js"));
var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));
var _fetchWithTimeout = _interopRequireDefault(require("../../../../shared/modules/fetch-with-timeout"));
var _resolver = _interopRequireDefault(require("./resolver"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const fetchWithTimeout = (0, _fetchWithTimeout.default)();
const supportedTopLevelDomains = ['eth'];
function setupEnsIpfsResolver({
  provider,
  getCurrentChainId,
  getIpfsGateway
}) {
  // install listener
  const urlPatterns = supportedTopLevelDomains.map(tld => `*://*.${tld}/*`);
  _webextensionPolyfill.default.webRequest.onErrorOccurred.addListener(webRequestDidFail, {
    urls: urlPatterns,
    types: ['main_frame']
  });

  // return api object
  return {
    // uninstall listener
    remove() {
      _webextensionPolyfill.default.webRequest.onErrorOccurred.removeListener(webRequestDidFail);
    }
  };
  async function webRequestDidFail(details) {
    const {
      tabId,
      url
    } = details;
    // ignore requests that are not associated with tabs
    // only attempt ENS resolution on mainnet
    if (tabId === -1 || getCurrentChainId() !== '0x1') {
      return;
    }
    // parse ens name
    const {
      hostname: name,
      pathname,
      search,
      hash: fragment
    } = new URL(url);
    const domainParts = name.split('.');
    const topLevelDomain = domainParts[domainParts.length - 1];
    // if unsupported TLD, abort
    if (!supportedTopLevelDomains.includes(topLevelDomain)) {
      return;
    }
    // otherwise attempt resolve
    attemptResolve({
      tabId,
      name,
      pathname,
      search,
      fragment
    });
  }
  async function attemptResolve({
    tabId,
    name,
    pathname,
    search,
    fragment
  }) {
    const ipfsGateway = getIpfsGateway();
    _webextensionPolyfill.default.tabs.update(tabId, {
      url: `loading.html`
    });
    let url = `https://app.ens.domains/name/${name}`;
    try {
      const {
        type,
        hash
      } = await (0, _resolver.default)({
        provider,
        name
      });
      if (type === 'ipfs-ns' || type === 'ipns-ns') {
        const resolvedUrl = `https://${hash}.${type.slice(0, 4)}.${ipfsGateway}${pathname}${search || ''}${fragment || ''}`;
        try {
          // check if ipfs gateway has result
          const response = await fetchWithTimeout(resolvedUrl, {
            method: 'HEAD'
          });
          if (response.status === 200) {
            url = resolvedUrl;
          }
        } catch (err) {
          console.warn(err);
        }
      } else if (type === 'swarm-ns') {
        url = `https://swarm-gateways.net/bzz:/${hash}${pathname}${search || ''}${fragment || ''}`;
      } else if (type === 'onion' || type === 'onion3') {
        url = `http://${hash}.onion${pathname}${search || ''}${fragment || ''}`;
      } else if (type === 'zeronet') {
        url = `http://127.0.0.1:43110/${hash}${pathname}${search || ''}${fragment || ''}`;
      } else if (type === 'skynet-ns') {
        const padded = hash.padEnd(hash.length + 4 - hash.length % 4, '=');
        const decoded = _base64Js.default.toByteArray(padded);
        const options = {
          padding: false
        };
        const base32EncodedSkylink = (0, _base32Encode.default)(decoded, 'RFC4648-HEX', options).toLowerCase();
        url = `https://${base32EncodedSkylink}.siasky.net${pathname}${search || ''}${fragment || ''}`;
      }
    } catch (err) {
      console.warn(err);
    } finally {
      _webextensionPolyfill.default.tabs.update(tabId, {
        url
      });
    }
  }
}


      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\ens-ipfs\\setup.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\getObjStructure.js", {"lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5CgetObjStructure.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getObjStructure;
var _lodash = require("lodash");
// This will create an object that represents the structure of the given object
// it replaces all values with the result of their type

// {
//   "data": {
//     "CurrencyController": {
//       "conversionDate": "number",
//       "conversionRate": "number",
//       "currentCurrency": "string"
//     }
// }
/**
 * Creates an object that represents the structure of the given object. It replaces all values with the result of their
 * type.
 *
 * @param {object} obj - The object for which a 'structure' will be returned. Usually a plain object and not a class.
 * @returns {object} The "mapped" version of a deep clone of the passed object, with each non-object property value
 * replaced with the javascript type of that value.
 */
function getObjStructure(obj) {
  const structure = (0, _lodash.cloneDeep)(obj);
  return deepMap(structure, value => {
    return value === null ? 'null' : typeof value;
  });
}

/**
 * Modifies all the properties and deeply nested of a passed object. Iterates recursively over all nested objects and
 * their properties, and covers the entire depth of the object. At each property value which is not an object is modified.
 *
 * @param {object} target - The object to modify
 * @param {Function} visit - The modifier to apply to each non-object property value
 * @returns {object} The modified object
 */
function deepMap(target = {}, visit) {
  Object.entries(target).forEach(([key, value]) => {
    if (typeof value === 'object' && value !== null) {
      target[key] = deepMap(value, visit);
    } else {
      target[key] = visit(value);
    }
  });
  return target;
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\getObjStructure.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\local-store.js", {"../../../shared/modules/browser-runtime.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\browser-runtime.utils.js","@sentry/browser":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@sentry\\browser\\dist\\index.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js","webextension-polyfill":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Clocal-store.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _browser = require("@sentry/browser");
var _browserRuntime = require("../../../shared/modules/browser-runtime.utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * A wrapper around the extension's storage local API
 */
class ExtensionStore {
  constructor() {
    this.isSupported = Boolean(_webextensionPolyfill.default.storage.local);
    if (!this.isSupported) {
      _loglevel.default.error('Storage local API not available.');
    }
    // we use this flag to avoid flooding sentry with a ton of errors:
    // once data persistence fails once and it flips true we don't send further
    // data persistence errors to sentry
    this.dataPersistenceFailing = false;
  }
  setMetadata(initMetaData) {
    this.metadata = initMetaData;
  }
  async set(state) {
    if (!this.isSupported) {
      throw new Error('Metamask- cannot persist state to local store as this browser does not support this action');
    }
    if (!state) {
      throw new Error('MetaMask - updated state is missing');
    }
    if (!this.metadata) {
      throw new Error('MetaMask - metadata must be set on instance of ExtensionStore before calling "set"');
    }
    try {
      // we format the data for storage as an object with the "data" key for the controller state object
      // and the "meta" key for a metadata object containing a version number that tracks how the data shape
      // has changed using migrations to adapt to backwards incompatible changes
      await this._set({
        data: state,
        meta: this.metadata
      });
      if (this.dataPersistenceFailing) {
        this.dataPersistenceFailing = false;
      }
    } catch (err) {
      if (!this.dataPersistenceFailing) {
        this.dataPersistenceFailing = true;
        (0, _browser.captureException)(err);
      }
      _loglevel.default.error('error setting state in local store:', err);
    }
  }

  /**
   * Returns all of the keys currently saved
   *
   * @returns {Promise<*>}
   */
  async get() {
    if (!this.isSupported) {
      return undefined;
    }
    const result = await this._get();
    // extension.storage.local always returns an obj
    // if the object is empty, treat it as undefined
    if (isEmpty(result)) {
      return undefined;
    }
    return result;
  }

  /**
   * Returns all of the keys currently saved
   *
   * @private
   * @returns {object} the key-value map from local storage
   */
  _get() {
    const {
      local
    } = _webextensionPolyfill.default.storage;
    return new Promise((resolve, reject) => {
      local.get(null).then(( /** @type {any} */result) => {
        const err = (0, _browserRuntime.checkForLastError)();
        if (err) {
          reject(err);
        } else {
          resolve(result);
        }
      });
    });
  }

  /**
   * Sets the key in local state
   *
   * @param {object} obj - The key to set
   * @returns {Promise<void>}
   * @private
   */
  _set(obj) {
    const {
      local
    } = _webextensionPolyfill.default.storage;
    return new Promise((resolve, reject) => {
      local.set(obj).then(() => {
        const err = (0, _browserRuntime.checkForLastError)();
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  }
}

/**
 * Returns whether or not the given object contains no keys
 *
 * @param {object} obj - The object to check
 * @returns {boolean}
 */
exports.default = ExtensionStore;
function isEmpty(obj) {
  return Object.keys(obj).length === 0;
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\local-store.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\middleware\\pending.js", {"../util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","json-rpc-engine":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\json-rpc-engine\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Cmiddleware%5Cpending.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPendingNonceMiddleware = createPendingNonceMiddleware;
exports.createPendingTxMiddleware = createPendingTxMiddleware;
var _jsonRpcEngine = require("json-rpc-engine");
var _util = require("../util");
function createPendingNonceMiddleware({
  getPendingNonce
}) {
  return (0, _jsonRpcEngine.createAsyncMiddleware)(async (req, res, next) => {
    const {
      method,
      params
    } = req;
    if (method !== 'eth_getTransactionCount') {
      next();
      return;
    }
    const [param, blockRef] = params;
    if (blockRef !== 'pending') {
      next();
      return;
    }
    res.result = await getPendingNonce(param);
  });
}
function createPendingTxMiddleware({
  getPendingTransactionByHash
}) {
  return (0, _jsonRpcEngine.createAsyncMiddleware)(async (req, res, next) => {
    const {
      method,
      params
    } = req;
    if (method !== 'eth_getTransactionByHash') {
      next();
      return;
    }
    const [hash] = params;
    const txMeta = getPendingTransactionByHash(hash);
    if (!txMeta) {
      next();
      return;
    }
    res.result = (0, _util.formatTxMetaForRpcResult)(txMeta);
  });
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\middleware\\pending.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\migrator\\index.js", {"events":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\browserify\\node_modules\\events\\events.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Cmigrator%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _events = _interopRequireDefault(require("events"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * @typedef {object} Migration
 * @property {number} version - The migration version
 * @property {Function} migrate - Returns a promise of the migrated data
 */
/**
 * @typedef {object} MigratorOptions
 * @property {Array<Migration>} [migrations] - The list of migrations to apply
 * @property {number} [defaultVersion] - The version to use in the initial state
 */
class Migrator extends _events.default {
  /**
   * @param {MigratorOptions} opts
   */
  constructor(opts = {}) {
    super();
    const migrations = opts.migrations || [];
    // sort migrations by version
    this.migrations = migrations.sort((a, b) => a.version - b.version);
    // grab migration with highest version
    const lastMigration = this.migrations.slice(-1)[0];
    // use specified defaultVersion or highest migration version
    this.defaultVersion = opts.defaultVersion || lastMigration && lastMigration.version || 0;
  }

  // run all pending migrations on meta in place
  async migrateData(versionedData = this.generateInitialState()) {
    // get all migrations that have not yet been run
    const pendingMigrations = this.migrations.filter(migrationIsPending);

    // perform each migration
    for (const migration of pendingMigrations) {
      try {
        // attempt migration and validate
        const migratedData = await migration.migrate(versionedData);
        if (!migratedData.data) {
          throw new Error('Migrator - migration returned empty data');
        }
        if (migratedData.version !== undefined && migratedData.meta.version !== migration.version) {
          throw new Error('Migrator - Migration did not update version number correctly');
        }
        // accept the migration as good
        // eslint-disable-next-line no-param-reassign
        versionedData = migratedData;
      } catch (err) {
        // rewrite error message to add context without clobbering stack
        const originalErrorMessage = err.message;
        err.message = `MetaMask Migration Error #${migration.version}: ${originalErrorMessage}`;
        // emit error instead of throw so as to not break the run (gracefully fail)
        this.emit('error', err);
        // stop migrating and use state as is
        return versionedData;
      }
    }
    return versionedData;

    /**
     * Returns whether or not the migration is pending
     *
     * A migration is considered "pending" if it has a higher
     * version number than the current version.
     *
     * @param {Migration} migration
     * @returns {boolean}
     */
    function migrationIsPending(migration) {
      return migration.version > versionedData.meta.version;
    }
  }

  /**
   * Returns the initial state for the migrator
   *
   * @param {object} [data] - The data for the initial state
   * @returns {{meta: {version: number}, data: any}}
   */
  generateInitialState(data) {
    return {
      meta: {
        version: this.defaultVersion
      },
      data
    };
  }
}
exports.default = Migrator;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\migrator\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\network-store.js", {"../../../shared/modules/fetch-with-timeout":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\fetch-with-timeout.ts","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Cnetwork-store.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _loglevel = _interopRequireDefault(require("loglevel"));
var _fetchWithTimeout = _interopRequireDefault(require("../../../shared/modules/fetch-with-timeout"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const fetchWithTimeout = (0, _fetchWithTimeout.default)();
const FIXTURE_SERVER_HOST = 'localhost';
const FIXTURE_SERVER_PORT = 12345;
const FIXTURE_SERVER_URL = `http://${FIXTURE_SERVER_HOST}:${FIXTURE_SERVER_PORT}/state.json`;

/**
 * A read-only network-based storage wrapper
 */
class ReadOnlyNetworkStore {
  constructor() {
    /**
     * Declares this store as compatible with the current browser
     */
    _defineProperty(this, "isSupported", true);
    this._initialized = false;
    this._initializing = this._init();
    this._state = undefined;
  }
  /**
   * Initializes by loading state from the network
   */
  async _init() {
    try {
      const response = await fetchWithTimeout(FIXTURE_SERVER_URL);
      if (response.ok) {
        this._state = await response.json();
      }
    } catch (error) {
      _loglevel.default.debug(`Error loading network state: '${error.message}'`);
    } finally {
      this._initialized = true;
    }
  }

  /**
   * Returns state
   *
   * @returns {Promise<object>}
   */
  async get() {
    if (!this._initialized) {
      await this._initializing;
    }
    return this._state;
  }

  /**
   * Set metadata/version state
   *
   * @param {object} metadata - The metadata/version data to set
   */
  setMetadata(metadata) {
    this.metadata = metadata;
  }

  /**
   * Set state
   *
   * @param {object} state - The state to set
   */
  async set(state) {
    if (!this.isSupported) {
      throw new Error('Metamask- cannot persist state to local store as this browser does not support this action');
    }
    if (!state) {
      throw new Error('MetaMask - updated state is missing');
    }
    if (!this.metadata) {
      throw new Error('MetaMask - metadata must be set on instance of ExtensionStore before calling "set"');
    }
    if (!this._initialized) {
      await this._initializing;
    }
    this._state = {
      data: state,
      meta: this._metadata
    };
  }
}
exports.default = ReadOnlyNetworkStore;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\network-store.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\notification-manager.js", {"../platforms/extension":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\platforms\\extension.js","@metamask/safe-event-emitter":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\safe-event-emitter\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Cnotification-manager.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NOTIFICATION_MANAGER_EVENTS = void 0;
var _safeEventEmitter = _interopRequireDefault(require("@metamask/safe-event-emitter"));
var _extension = _interopRequireDefault(require("../platforms/extension"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const NOTIFICATION_HEIGHT = 620;
const NOTIFICATION_WIDTH = 360;
const NOTIFICATION_MANAGER_EVENTS = {
  POPUP_CLOSED: 'onPopupClosed'
};

/**
 * A collection of methods for controlling the showing and hiding of the notification popup.
 */
exports.NOTIFICATION_MANAGER_EVENTS = NOTIFICATION_MANAGER_EVENTS;
class NotificationManager extends _safeEventEmitter.default {
  constructor() {
    super();
    this.platform = new _extension.default();
    this.platform.addOnRemovedListener(this._onWindowClosed.bind(this));
  }

  /**
   * Mark the notification popup as having been automatically closed.
   *
   * This lets us differentiate between the cases where we close the
   * notification popup v.s. when the user closes the popup window directly.
   */
  markAsAutomaticallyClosed() {
    this._popupAutomaticallyClosed = true;
  }

  /**
   * Either brings an existing MetaMask notification window into focus, or creates a new notification window. New
   * notification windows are given a 'popup' type.
   *
   * @param {Function} setCurrentPopupId - setter of current popup id from appStateController
   * @param {number} currentPopupId - id of current opened metamask popup window
   */
  async showPopup(setCurrentPopupId, currentPopupId) {
    this._popupId = currentPopupId;
    this._setCurrentPopupId = setCurrentPopupId;
    const popup = await this._getPopup(currentPopupId);
    // Bring focus to chrome popup
    if (popup) {
      // bring focus to existing chrome popup
      await this.platform.focusWindow(popup.id);
    } else {
      // create new notification popup
      let left = 0;
      let top = 0;
      try {
        const lastFocused = await this.platform.getLastFocusedWindow();
        // Position window in top right corner of lastFocused window.
        top = lastFocused.top;
        left = lastFocused.left + (lastFocused.width - NOTIFICATION_WIDTH);
      } catch (_) {
        // The following properties are more than likely 0, due to being
        // opened from the background chrome process for the extension that
        // has no physical dimensions
        const {
          screenX,
          screenY,
          outerWidth
        } = window;
        top = Math.max(screenY, 0);
        left = Math.max(screenX + (outerWidth - NOTIFICATION_WIDTH), 0);
      }
      const popupWindow = await this.platform.openWindow({
        url: 'notification.html',
        type: 'popup',
        width: NOTIFICATION_WIDTH,
        height: NOTIFICATION_HEIGHT,
        left,
        top
      });

      // Firefox currently ignores left/top for create, but it works for update
      if (popupWindow.left !== left && popupWindow.state !== 'fullscreen') {
        await this.platform.updateWindowPosition(popupWindow.id, left, top);
      }
      // pass new created popup window id to appController setter
      // and store the id to private variable this._popupId for future access
      this._setCurrentPopupId(popupWindow.id);
      this._popupId = popupWindow.id;
    }
  }
  _onWindowClosed(windowId) {
    if (windowId === this._popupId) {
      this._setCurrentPopupId(undefined);
      this._popupId = undefined;
      this.emit(NOTIFICATION_MANAGER_EVENTS.POPUP_CLOSED, {
        automaticallyClosed: this._popupAutomaticallyClosed
      });
      this._popupAutomaticallyClosed = undefined;
    }
  }

  /**
   * Checks all open MetaMask windows, and returns the first one it finds that is a notification window (i.e. has the
   * type 'popup')
   *
   * @private
   */
  async _getPopup() {
    const windows = await this.platform.getAllWindows();
    return this._getPopupIn(windows);
  }

  /**
   * Given an array of windows, returns the 'popup' that has been opened by MetaMask, or null if no such window exists.
   *
   * @private
   * @param {Array} windows - An array of objects containing data about the open MetaMask extension windows.
   */
  _getPopupIn(windows) {
    return windows ? windows.find(win => {
      // Returns notification popup
      return win && win.type === 'popup' && win.id === this._popupId;
    }) : null;
  }
}
exports.default = NotificationManager;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\notification-manager.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\createMethodMiddleware.js", {"../../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","./handlers":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\index.js","@metamask/permission-controller":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\permission-controller\\dist\\index.js","@metamask/rpc-methods/dist/utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\rpc-methods\\dist\\utils.js","eth-rpc-errors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-rpc-errors\\dist\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Crpc-method-middleware%5CcreateMethodMiddleware.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMethodMiddleware = createMethodMiddleware;
var _permissionController = require("@metamask/permission-controller");
var _utils = require("@metamask/rpc-methods/dist/utils");
var _ethRpcErrors = require("eth-rpc-errors");
var _lodash = require("lodash");
var _network = require("../../../../shared/constants/network");
var _handlers = _interopRequireDefault(require("./handlers"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const allHandlers = [..._handlers.default, ..._permissionController.permissionRpcMethods.handlers];
const handlerMap = allHandlers.reduce((map, handler) => {
  for (const methodName of handler.methodNames) {
    map.set(methodName, handler);
  }
  return map;
}, new Map());
const expectedHookNames = Array.from(new Set((0, _lodash.flatten)(allHandlers.map(({
  hookNames
}) => Object.keys(hookNames)))).values());

/**
 * Creates a json-rpc-engine middleware of RPC method implementations.
 *
 * Handlers consume functions that hook into the background, and only depend
 * on their signatures, not e.g. controller internals.
 *
 * @param {Record<string, unknown>} hooks - Required "hooks" into our
 * controllers.
 * @returns {(req: object, res: object, next: Function, end: Function) => void}
 */
function createMethodMiddleware(hooks) {
  // Fail immediately if we forgot to provide any expected hooks.
  const missingHookNames = expectedHookNames.filter(hookName => !Object.hasOwnProperty.call(hooks, hookName));
  if (missingHookNames.length > 0) {
    throw new Error(`Missing expected hooks:\n\n${missingHookNames.join('\n')}\n`);
  }
  return async function methodMiddleware(req, res, next, end) {
    // Reject unsupported methods.
    if (_network.UNSUPPORTED_RPC_METHODS.has(req.method)) {
      return end(_ethRpcErrors.ethErrors.rpc.methodNotSupported());
    }
    const handler = handlerMap.get(req.method);
    if (handler) {
      const {
        implementation,
        hookNames
      } = handler;
      try {
        // Implementations may or may not be async, so we must await them.
        return await implementation(req, res, next, end, (0, _utils.selectHooks)(hooks, hookNames));
      } catch (error) {
        console.error(error);
        return end(error);
      }
    }
    return next();
  };
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\rpc-method-middleware\\createMethodMiddleware.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\add-ethereum-chain.js", {"../../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../../../shared/modules/network.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\network.utils.ts","@metamask/controller-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\controller-utils\\dist\\index.js","eth-rpc-errors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-rpc-errors\\dist\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","valid-url":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\valid-url\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Crpc-method-middleware%5Chandlers%5Cadd-ethereum-chain.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ethRpcErrors = require("eth-rpc-errors");
var _validUrl = _interopRequireDefault(require("valid-url"));
var _lodash = require("lodash");
var _controllerUtils = require("@metamask/controller-utils");
var _app = require("../../../../../shared/constants/app");
var _network = require("../../../../../shared/modules/network.utils");
var _metametrics = require("../../../../../shared/constants/metametrics");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const addEthereumChain = {
  methodNames: [_app.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN],
  implementation: addEthereumChainHandler,
  hookNames: {
    upsertNetworkConfiguration: true,
    getCurrentChainId: true,
    getCurrentRpcUrl: true,
    findNetworkConfigurationBy: true,
    setActiveNetwork: true,
    requestUserApproval: true
  }
};
var _default = addEthereumChain;
exports.default = _default;
async function addEthereumChainHandler(req, res, _next, end, {
  upsertNetworkConfiguration,
  getCurrentChainId,
  getCurrentRpcUrl,
  findNetworkConfigurationBy,
  setActiveNetwork,
  requestUserApproval
}) {
  var _req$params;
  if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params[0]) || typeof req.params[0] !== 'object') {
    return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
      message: `Expected single, object parameter. Received:\n${JSON.stringify(req.params)}`
    }));
  }
  const {
    origin
  } = req;
  const {
    chainId,
    chainName = null,
    blockExplorerUrls = null,
    nativeCurrency = null,
    rpcUrls
  } = req.params[0];
  const otherKeys = Object.keys((0, _lodash.omit)(req.params[0], ['chainId', 'chainName', 'blockExplorerUrls', 'iconUrls', 'rpcUrls', 'nativeCurrency']));
  if (otherKeys.length > 0) {
    return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
      message: `Received unexpected keys on object parameter. Unsupported keys:\n${otherKeys}`
    }));
  }
  const isLocalhost = strUrl => {
    try {
      const url = new URL(strUrl);
      return url.hostname === 'localhost' || url.hostname === '127.0.0.1';
    } catch (error) {
      return false;
    }
  };
  const firstValidRPCUrl = Array.isArray(rpcUrls) ? rpcUrls.find(rpcUrl => isLocalhost(rpcUrl) || _validUrl.default.isHttpsUri(rpcUrl)) : null;
  const firstValidBlockExplorerUrl = blockExplorerUrls !== null && Array.isArray(blockExplorerUrls) ? blockExplorerUrls.find(blockExplorerUrl => isLocalhost(blockExplorerUrl) || _validUrl.default.isHttpsUri(blockExplorerUrl)) : null;
  if (!firstValidRPCUrl) {
    return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
      message: `Expected an array with at least one valid string HTTPS url 'rpcUrls', Received:\n${rpcUrls}`
    }));
  }
  if (blockExplorerUrls !== null && !firstValidBlockExplorerUrl) {
    return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
      message: `Expected null or array with at least one valid string HTTPS URL 'blockExplorerUrl'. Received: ${blockExplorerUrls}`
    }));
  }
  const _chainId = typeof chainId === 'string' && chainId.toLowerCase();
  if (!(0, _network.isPrefixedFormattedHexString)(_chainId)) {
    return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
      message: `Expected 0x-prefixed, unpadded, non-zero hexadecimal string 'chainId'. Received:\n${chainId}`
    }));
  }
  if (!(0, _network.isSafeChainId)(parseInt(_chainId, 16))) {
    return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
      message: `Invalid chain ID "${_chainId}": numerical value greater than max safe value. Received:\n${chainId}`
    }));
  }
  const existingNetwork = findNetworkConfigurationBy({
    chainId: _chainId
  });

  // if the request is to add a network that is already added and configured
  // with the same RPC gateway we shouldn't try to add it again.
  if (existingNetwork && existingNetwork.rpcUrl === firstValidRPCUrl) {
    // If the network already exists, the request is considered successful
    res.result = null;
    const currentChainId = getCurrentChainId();
    const currentRpcUrl = getCurrentRpcUrl();

    // If the current chainId and rpcUrl matches that of the incoming request
    // We don't need to proceed further.
    if (currentChainId === _chainId && currentRpcUrl === firstValidRPCUrl) {
      return end();
    }

    // If this network is already added with but is not the currently selected network
    // Ask the user to switch the network
    try {
      await requestUserApproval({
        origin,
        type: _controllerUtils.ApprovalType.SwitchEthereumChain,
        requestData: {
          rpcUrl: existingNetwork.rpcUrl,
          chainId: existingNetwork.chainId,
          nickname: existingNetwork.nickname,
          ticker: existingNetwork.ticker
        }
      });
      await setActiveNetwork(existingNetwork.id);
      res.result = null;
    } catch (error) {
      // For the purposes of this method, it does not matter if the user
      // declines to switch the selected network. However, other errors indicate
      // that something is wrong.
      if (error.code !== _ethRpcErrors.errorCodes.provider.userRejectedRequest) {
        return end(error);
      }
    }
    return end();
  }
  if (typeof chainName !== 'string' || !chainName) {
    return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
      message: `Expected non-empty string 'chainName'. Received:\n${chainName}`
    }));
  }
  const _chainName = chainName.length > 100 ? chainName.substring(0, 100) : chainName;
  if (nativeCurrency !== null) {
    if (typeof nativeCurrency !== 'object' || Array.isArray(nativeCurrency)) {
      return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
        message: `Expected null or object 'nativeCurrency'. Received:\n${nativeCurrency}`
      }));
    }
    if (nativeCurrency.decimals !== 18) {
      return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
        message: `Expected the number 18 for 'nativeCurrency.decimals' when 'nativeCurrency' is provided. Received: ${nativeCurrency.decimals}`
      }));
    }
    if (!nativeCurrency.symbol || typeof nativeCurrency.symbol !== 'string') {
      return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
        message: `Expected a string 'nativeCurrency.symbol'. Received: ${nativeCurrency.symbol}`
      }));
    }
  }
  const ticker = (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || _app.UNKNOWN_TICKER_SYMBOL;
  if (ticker !== _app.UNKNOWN_TICKER_SYMBOL && (typeof ticker !== 'string' || ticker.length < 2 || ticker.length > 6)) {
    return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
      message: `Expected 2-6 character string 'nativeCurrency.symbol'. Received:\n${ticker}`
    }));
  }
  // if the chainId is the same as an existing network but the ticker is different we want to block this action
  // as it is potentially malicious and confusing
  if (existingNetwork && existingNetwork.chainId === _chainId && existingNetwork.ticker !== ticker) {
    return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
      message: `nativeCurrency.symbol does not match currency symbol for a network the user already has added with the same chainId. Received:\n${ticker}`
    }));
  }
  let networkConfigurationId;
  try {
    await requestUserApproval({
      origin,
      type: _controllerUtils.ApprovalType.AddEthereumChain,
      requestData: {
        chainId: _chainId,
        rpcPrefs: {
          blockExplorerUrl: firstValidBlockExplorerUrl
        },
        chainName: _chainName,
        rpcUrl: firstValidRPCUrl,
        ticker
      }
    });
    networkConfigurationId = await upsertNetworkConfiguration({
      chainId: _chainId,
      rpcPrefs: {
        blockExplorerUrl: firstValidBlockExplorerUrl
      },
      nickname: _chainName,
      rpcUrl: firstValidRPCUrl,
      ticker
    }, {
      source: _metametrics.MetaMetricsNetworkEventSource.Dapp,
      referrer: origin
    });

    // Once the network has been added, the requested is considered successful
    res.result = null;
  } catch (error) {
    return end(error);
  }

  // Ask the user to switch the network
  try {
    await requestUserApproval({
      origin,
      type: _controllerUtils.ApprovalType.SwitchEthereumChain,
      requestData: {
        rpcUrl: firstValidRPCUrl,
        chainId: _chainId,
        nickname: _chainName,
        ticker,
        networkConfigurationId
      }
    });
    await setActiveNetwork(networkConfigurationId);
  } catch (error) {
    // For the purposes of this method, it does not matter if the user
    // declines to switch the selected network. However, other errors indicate
    // that something is wrong.
    if (error.code !== _ethRpcErrors.errorCodes.provider.userRejectedRequest) {
      return end(error);
    }
  }
  return end();
}


      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\rpc-method-middleware\\handlers\\add-ethereum-chain.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\eth-accounts.js", {"../../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Crpc-method-middleware%5Chandlers%5Ceth-accounts.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _app = require("../../../../../shared/constants/app");
/**
 * A wrapper for `eth_accounts` that returns an empty array when permission is denied.
 */

const requestEthereumAccounts = {
  methodNames: [_app.MESSAGE_TYPE.ETH_ACCOUNTS],
  implementation: ethAccountsHandler,
  hookNames: {
    getAccounts: true
  }
};
var _default = requestEthereumAccounts;
/**
 * @typedef {Record<string, Function>} EthAccountsOptions
 * @property {Function} getAccounts - Gets the accounts for the requesting
 * origin.
 */
/**
 *
 * @param {__import__('json-rpc-engine').JsonRpcRequest<unknown>} _req - The JSON-RPC request object.
 * @param {__import__('json-rpc-engine').JsonRpcResponse<true>} res - The JSON-RPC response object.
 * @param {Function} _next - The json-rpc-engine 'next' callback.
 * @param {Function} end - The json-rpc-engine 'end' callback.
 * @param {EthAccountsOptions} options - The RPC method hooks.
 */
exports.default = _default;
async function ethAccountsHandler(_req, res, _next, end, {
  getAccounts
}) {
  res.result = await getAccounts();
  return end();
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\rpc-method-middleware\\handlers\\eth-accounts.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\get-provider-state.js", {"../../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Crpc-method-middleware%5Chandlers%5Cget-provider-state.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _app = require("../../../../../shared/constants/app");
/**
 * This RPC method gets background state relevant to the provider.
 * The background sends RPC notifications on state changes, but the provider
 * first requests state on initialization.
 */

const getProviderState = {
  methodNames: [_app.MESSAGE_TYPE.GET_PROVIDER_STATE],
  implementation: getProviderStateHandler,
  hookNames: {
    getProviderState: true
  }
};
var _default = getProviderState;
/**
 * @typedef {object} ProviderStateHandlerResult
 * @property {string} chainId - The current chain ID.
 * @property {boolean} isUnlocked - Whether the extension is unlocked or not.
 * @property {string} networkVersion - The current network ID.
 */
/**
 * @typedef {object} ProviderStateHandlerOptions
 * @property {() => ProviderStateHandlerResult} getProviderState - A function that
 * gets the current provider state.
 */
/**
 * @param {__import__('json-rpc-engine').JsonRpcRequest<[]>} req - The JSON-RPC request object.
 * @param {__import__('json-rpc-engine').JsonRpcResponse<ProviderStateHandlerResult>} res - The JSON-RPC response object.
 * @param {Function} _next - The json-rpc-engine 'next' callback.
 * @param {Function} end - The json-rpc-engine 'end' callback.
 * @param {ProviderStateHandlerOptions} options
 */
exports.default = _default;
async function getProviderStateHandler(req, res, _next, end, {
  getProviderState: _getProviderState
}) {
  res.result = {
    ...(await _getProviderState(req.origin))
  };
  return end();
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\rpc-method-middleware\\handlers\\get-provider-state.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\index.js", {"./add-ethereum-chain":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\add-ethereum-chain.js","./eth-accounts":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\eth-accounts.js","./get-provider-state":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\get-provider-state.js","./log-web3-shim-usage":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\log-web3-shim-usage.js","./request-accounts":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\request-accounts.js","./send-metadata":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\send-metadata.js","./switch-ethereum-chain":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\switch-ethereum-chain.js","./watch-asset":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\watch-asset.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Crpc-method-middleware%5Chandlers%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _addEthereumChain = _interopRequireDefault(require("./add-ethereum-chain"));
var _ethAccounts = _interopRequireDefault(require("./eth-accounts"));
var _getProviderState = _interopRequireDefault(require("./get-provider-state"));
var _logWeb3ShimUsage = _interopRequireDefault(require("./log-web3-shim-usage"));
var _requestAccounts = _interopRequireDefault(require("./request-accounts"));
var _sendMetadata = _interopRequireDefault(require("./send-metadata"));
var _switchEthereumChain = _interopRequireDefault(require("./switch-ethereum-chain"));
var _watchAsset = _interopRequireDefault(require("./watch-asset"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const handlers = [_addEthereumChain.default, _ethAccounts.default, _getProviderState.default, _logWeb3ShimUsage.default, _requestAccounts.default, _sendMetadata.default, _switchEthereumChain.default, _watchAsset.default];
var _default = handlers;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\rpc-method-middleware\\handlers\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\log-web3-shim-usage.js", {"../../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Crpc-method-middleware%5Chandlers%5Clog-web3-shim-usage.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _app = require("../../../../../shared/constants/app");
var _metametrics = require("../../../../../shared/constants/metametrics");
/**
 * This RPC method is called by the inpage provider whenever it detects the
 * accessing of a non-existent property on our window.web3 shim.
 * We collect this data to understand which sites are breaking due to the
 * removal of our window.web3.
 */

const logWeb3ShimUsage = {
  methodNames: [_app.MESSAGE_TYPE.LOG_WEB3_SHIM_USAGE],
  implementation: logWeb3ShimUsageHandler,
  hookNames: {
    sendMetrics: true,
    getWeb3ShimUsageState: true,
    setWeb3ShimUsageRecorded: true
  }
};
var _default = logWeb3ShimUsage;
/**
 * @typedef {object} LogWeb3ShimUsageOptions
 * @property {Function} sendMetrics - A function that registers a metrics event.
 * @property {Function} getWeb3ShimUsageState - A function that gets web3 shim
 * usage state for the given origin.
 * @property {Function} setWeb3ShimUsageRecorded - A function that records web3 shim
 * usage for a particular origin.
 */
/**
 * @param {__import__('json-rpc-engine').JsonRpcRequest<unknown>} req - The JSON-RPC request object.
 * @param {__import__('json-rpc-engine').JsonRpcResponse<true>} res - The JSON-RPC response object.
 * @param {Function} _next - The json-rpc-engine 'next' callback.
 * @param {Function} end - The json-rpc-engine 'end' callback.
 * @param {LogWeb3ShimUsageOptions} options
 */
exports.default = _default;
function logWeb3ShimUsageHandler(req, res, _next, end, {
  sendMetrics,
  getWeb3ShimUsageState,
  setWeb3ShimUsageRecorded
}) {
  const {
    origin
  } = req;
  if (getWeb3ShimUsageState(origin) === undefined) {
    setWeb3ShimUsageRecorded(origin);
    sendMetrics({
      event: `Website Accessed window.web3 Shim`,
      category: _metametrics.MetaMetricsEventCategory.InpageProvider,
      referrer: {
        url: origin
      }
    }, {
      excludeMetaMetricsId: true
    });
  }
  res.result = true;
  return end();
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\rpc-method-middleware\\handlers\\log-web3-shim-usage.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\request-accounts.js", {"../../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","eth-rpc-errors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-rpc-errors\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Crpc-method-middleware%5Chandlers%5Crequest-accounts.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ethRpcErrors = require("eth-rpc-errors");
var _app = require("../../../../../shared/constants/app");
/**
 * This method attempts to retrieve the Ethereum accounts available to the
 * requester, or initiate a request for account access if none are currently
 * available. It is essentially a wrapper of wallet_requestPermissions that
 * only errors if the user rejects the request. We maintain the method for
 * backwards compatibility reasons.
 */

const requestEthereumAccounts = {
  methodNames: [_app.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS],
  implementation: requestEthereumAccountsHandler,
  hookNames: {
    origin: true,
    getAccounts: true,
    getUnlockPromise: true,
    hasPermission: true,
    requestAccountsPermission: true
  }
};
var _default = requestEthereumAccounts; // Used to rate-limit pending requests to one per origin
exports.default = _default;
const locks = new Set();

/**
 * @typedef {Record<string, string | Function>} RequestEthereumAccountsOptions
 * @property {string} origin - The requesting origin.
 * @property {Function} getAccounts - Gets the accounts for the requesting
 * origin.
 * @property {Function} getUnlockPromise - Gets a promise that resolves when
 * the extension unlocks.
 * @property {Function} hasPermission - Returns whether the requesting origin
 * has the specified permission.
 * @property {Function} requestAccountsPermission - Requests the `eth_accounts`
 * permission for the requesting origin.
 */

/**
 *
 * @param {__import__('json-rpc-engine').JsonRpcRequest<unknown>} _req - The JSON-RPC request object.
 * @param {__import__('json-rpc-engine').JsonRpcResponse<true>} res - The JSON-RPC response object.
 * @param {Function} _next - The json-rpc-engine 'next' callback.
 * @param {Function} end - The json-rpc-engine 'end' callback.
 * @param {RequestEthereumAccountsOptions} options - The RPC method hooks.
 */
async function requestEthereumAccountsHandler(_req, res, _next, end, {
  origin,
  getAccounts,
  getUnlockPromise,
  hasPermission,
  requestAccountsPermission
}) {
  if (locks.has(origin)) {
    res.error = _ethRpcErrors.ethErrors.rpc.resourceUnavailable(`Already processing ${_app.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS}. Please wait.`);
    return end();
  }
  if (hasPermission(_app.MESSAGE_TYPE.ETH_ACCOUNTS)) {
    // We wait for the extension to unlock in this case only, because permission
    // requests are handled when the extension is unlocked, regardless of the
    // lock state when they were received.
    try {
      locks.add(origin);
      await getUnlockPromise(true);
      res.result = await getAccounts();
      end();
    } catch (error) {
      end(error);
    } finally {
      locks.delete(origin);
    }
    return undefined;
  }

  // If no accounts, request the accounts permission
  try {
    await requestAccountsPermission();
  } catch (err) {
    res.error = err;
    return end();
  }

  // Get the approved accounts
  const accounts = await getAccounts();
  /* istanbul ignore else: too hard to induce, see below comment */
  if (accounts.length > 0) {
    res.result = accounts;
  } else {
    // This should never happen, because it should be caught in the
    // above catch clause
    res.error = _ethRpcErrors.ethErrors.rpc.internal('Accounts unexpectedly unavailable. Please report this bug.');
  }
  return end();
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\rpc-method-middleware\\handlers\\request-accounts.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\send-metadata.js", {"../../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","eth-rpc-errors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-rpc-errors\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Crpc-method-middleware%5Chandlers%5Csend-metadata.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ethRpcErrors = require("eth-rpc-errors");
var _app = require("../../../../../shared/constants/app");
/**
 * This internal method is used by our external provider to send metadata about
 * permission subjects so that we can e.g. display a proper name and icon in
 * our UI.
 */

const sendMetadata = {
  methodNames: [_app.MESSAGE_TYPE.SEND_METADATA],
  implementation: sendMetadataHandler,
  hookNames: {
    addSubjectMetadata: true,
    subjectType: true
  }
};
var _default = sendMetadata;
/**
 * @typedef {Record<string, Function>} SendMetadataOptions
 * @property {Function} addSubjectMetadata - A function that records subject
 * metadata, bound to the requesting origin.
 * @property {string} subjectType - The type of the requesting origin / subject.
 */
/**
 * @param {__import__('json-rpc-engine').JsonRpcRequest<unknown>} req - The JSON-RPC request object.
 * @param {__import__('json-rpc-engine').JsonRpcResponse<true>} res - The JSON-RPC response object.
 * @param {Function} _next - The json-rpc-engine 'next' callback.
 * @param {Function} end - The json-rpc-engine 'end' callback.
 * @param {SendMetadataOptions} options
 */
exports.default = _default;
function sendMetadataHandler(req, res, _next, end, {
  addSubjectMetadata,
  subjectType
}) {
  const {
    origin,
    params
  } = req;
  if (params && typeof params === 'object' && !Array.isArray(params)) {
    const {
      icon = null,
      name = null,
      ...remainingParams
    } = params;
    addSubjectMetadata({
      ...remainingParams,
      iconUrl: icon,
      name,
      subjectType,
      origin
    });
  } else {
    return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
      data: params
    }));
  }
  res.result = true;
  return end();
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\rpc-method-middleware\\handlers\\send-metadata.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\switch-ethereum-chain.js", {"../../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../../../shared/modules/network.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\network.utils.ts","@metamask/controller-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\controller-utils\\dist\\index.js","eth-rpc-errors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-rpc-errors\\dist\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Crpc-method-middleware%5Chandlers%5Cswitch-ethereum-chain.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ethRpcErrors = require("eth-rpc-errors");
var _lodash = require("lodash");
var _controllerUtils = require("@metamask/controller-utils");
var _app = require("../../../../../shared/constants/app");
var _network = require("../../../../../shared/constants/network");
var _network2 = require("../../../../../shared/modules/network.utils");
const switchEthereumChain = {
  methodNames: [_app.MESSAGE_TYPE.SWITCH_ETHEREUM_CHAIN],
  implementation: switchEthereumChainHandler,
  hookNames: {
    getCurrentChainId: true,
    findNetworkConfigurationBy: true,
    setProviderType: true,
    setActiveNetwork: true,
    requestUserApproval: true
  }
};
var _default = switchEthereumChain;
exports.default = _default;
function findExistingNetwork(chainId, findNetworkConfigurationBy) {
  if (Object.values(_network.BUILT_IN_INFURA_NETWORKS).map(({
    chainId: id
  }) => id).includes(chainId)) {
    return {
      chainId,
      ticker: _network.CURRENCY_SYMBOLS.ETH,
      nickname: _network.NETWORK_TO_NAME_MAP[chainId],
      rpcUrl: _network.CHAIN_ID_TO_RPC_URL_MAP[chainId],
      type: _network.CHAIN_ID_TO_TYPE_MAP[chainId]
    };
  }
  return findNetworkConfigurationBy({
    chainId
  });
}
async function switchEthereumChainHandler(req, res, _next, end, {
  getCurrentChainId,
  findNetworkConfigurationBy,
  setProviderType,
  setActiveNetwork,
  requestUserApproval
}) {
  var _req$params;
  if (!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params[0]) || typeof req.params[0] !== 'object') {
    return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
      message: `Expected single, object parameter. Received:\n${JSON.stringify(req.params)}`
    }));
  }
  const {
    origin
  } = req;
  const {
    chainId
  } = req.params[0];
  const otherKeys = Object.keys((0, _lodash.omit)(req.params[0], ['chainId']));
  if (otherKeys.length > 0) {
    return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
      message: `Received unexpected keys on object parameter. Unsupported keys:\n${otherKeys}`
    }));
  }
  const _chainId = typeof chainId === 'string' && chainId.toLowerCase();
  if (!(0, _network2.isPrefixedFormattedHexString)(_chainId)) {
    return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
      message: `Expected 0x-prefixed, unpadded, non-zero hexadecimal string 'chainId'. Received:\n${chainId}`
    }));
  }
  if (!(0, _network2.isSafeChainId)(parseInt(_chainId, 16))) {
    return end(_ethRpcErrors.ethErrors.rpc.invalidParams({
      message: `Invalid chain ID "${_chainId}": numerical value greater than max safe value. Received:\n${chainId}`
    }));
  }
  const requestData = findExistingNetwork(_chainId, findNetworkConfigurationBy);
  if (requestData) {
    const currentChainId = getCurrentChainId();
    if (currentChainId === _chainId) {
      res.result = null;
      return end();
    }
    try {
      const approvedRequestData = await requestUserApproval({
        origin,
        type: _controllerUtils.ApprovalType.SwitchEthereumChain,
        requestData
      });
      if (Object.values(_network.BUILT_IN_INFURA_NETWORKS).map(({
        chainId: id
      }) => id).includes(chainId)) {
        await setProviderType(approvedRequestData.type);
      } else {
        await setActiveNetwork(approvedRequestData.id);
      }
      res.result = null;
    } catch (error) {
      return end(error);
    }
    return end();
  }
  return end(_ethRpcErrors.ethErrors.provider.custom({
    code: 4902,
    // To-be-standardized "unrecognized chain ID" error
    message: `Unrecognized chain ID "${chainId}". Try adding the chain using ${_app.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN} first.`
  }));
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\rpc-method-middleware\\handlers\\switch-ethereum-chain.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\handlers\\watch-asset.js", {"../../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","eth-rpc-errors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-rpc-errors\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Crpc-method-middleware%5Chandlers%5Cwatch-asset.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ethRpcErrors = require("eth-rpc-errors");
var _app = require("../../../../../shared/constants/app");
const watchAsset = {
  methodNames: [_app.MESSAGE_TYPE.WATCH_ASSET, _app.MESSAGE_TYPE.WATCH_ASSET_LEGACY],
  implementation: watchAssetHandler,
  hookNames: {
    handleWatchAssetRequest: true
  }
};
var _default = watchAsset;
/**
 * @typedef {object} WatchAssetOptions
 * @property {Function} handleWatchAssetRequest - The wallet_watchAsset method implementation.
 */
/**
 * @typedef {object} WatchAssetParam
 * @property {string} type - The type of the asset to watch.
 * @property {object} options - Watch options for the asset.
 */
/**
 * @param {__import__('json-rpc-engine').JsonRpcRequest<WatchAssetParam>} req - The JSON-RPC request object.
 * @param {__import__('json-rpc-engine').JsonRpcResponse<true>} res - The JSON-RPC response object.
 * @param {Function} _next - The json-rpc-engine 'next' callback.
 * @param {Function} end - The json-rpc-engine 'end' callback.
 * @param {WatchAssetOptions} options
 */
exports.default = _default;
async function watchAssetHandler(req, res, _next, end, {
  handleWatchAssetRequest
}) {
  try {
    const {
      options: asset,
      type
    } = req.params;
    const handleWatchAssetResult = await handleWatchAssetRequest(asset, type);
    await handleWatchAssetResult.result;
    res.result = true;
    return end();
  } catch (error) {
    if (error.message === 'User rejected to watch the asset.') {
      return end(_ethRpcErrors.ethErrors.provider.userRejectedRequest());
    }
    return end(error);
  }
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\rpc-method-middleware\\handlers\\watch-asset.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\index.js", {"./createMethodMiddleware":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\rpc-method-middleware\\createMethodMiddleware.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Crpc-method-middleware%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _createMethodMiddleware = require("./createMethodMiddleware");
Object.keys(_createMethodMiddleware).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _createMethodMiddleware[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _createMethodMiddleware[key];
    }
  });
});

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\rpc-method-middleware\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\security-provider-helpers.ts", {"../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../shared/modules/fetch-with-timeout":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\fetch-with-timeout.ts"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Csecurity-provider-helpers.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.securityProviderCheck = securityProviderCheck;
var _fetchWithTimeout = _interopRequireDefault(require("../../../shared/modules/fetch-with-timeout"));
var _app = require("../../../shared/constants/app");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const fetchWithTimeout = (0, _fetchWithTimeout.default)();
async function securityProviderCheck(requestData, methodName, chainId, currentLocale) {
  let dataToValidate;
  // Core message managers use messageParams but frontend uses msgParams with lots of references
  const params = requestData.msgParams || requestData.messageParams;
  if (methodName === _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA) {
    dataToValidate = {
      host_name: params === null || params === void 0 ? void 0 : params.origin,
      rpc_method_name: methodName,
      chain_id: chainId,
      data: params === null || params === void 0 ? void 0 : params.data,
      currentLocale
    };
  } else if (methodName === _app.MESSAGE_TYPE.ETH_SIGN || methodName === _app.MESSAGE_TYPE.PERSONAL_SIGN) {
    dataToValidate = {
      host_name: params === null || params === void 0 ? void 0 : params.origin,
      rpc_method_name: methodName,
      chain_id: chainId,
      data: {
        signer_address: params === null || params === void 0 ? void 0 : params.from,
        msg_to_sign: params === null || params === void 0 ? void 0 : params.data
      },
      currentLocale
    };
  } else {
    var _requestData$txParams, _requestData$txParams2, _requestData$txParams3, _requestData$txParams4, _requestData$txParams5, _requestData$txParams6;
    dataToValidate = {
      host_name: requestData.origin,
      rpc_method_name: methodName,
      chain_id: chainId,
      data: {
        from_address: (_requestData$txParams = requestData.txParams) === null || _requestData$txParams === void 0 ? void 0 : _requestData$txParams.from,
        to_address: (_requestData$txParams2 = requestData.txParams) === null || _requestData$txParams2 === void 0 ? void 0 : _requestData$txParams2.to,
        gas: (_requestData$txParams3 = requestData.txParams) === null || _requestData$txParams3 === void 0 ? void 0 : _requestData$txParams3.gas,
        gasPrice: (_requestData$txParams4 = requestData.txParams) === null || _requestData$txParams4 === void 0 ? void 0 : _requestData$txParams4.gasPrice,
        value: (_requestData$txParams5 = requestData.txParams) === null || _requestData$txParams5 === void 0 ? void 0 : _requestData$txParams5.value,
        data: (_requestData$txParams6 = requestData.txParams) === null || _requestData$txParams6 === void 0 ? void 0 : _requestData$txParams6.data
      },
      currentLocale
    };
  }
  const response = await fetchWithTimeout('https://proxy.metafi.codefi.network/opensea/security/v1/validate', {
    method: 'POST',
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(dataToValidate)
  });
  return await response.json();
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\security-provider-helpers.ts",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\seed-phrase-verifier.js", {"../../../shared/constants/keyring":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\keyring.ts","@metamask/eth-keyring-controller":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\eth-keyring-controller\\index.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Cseed-phrase-verifier.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ethKeyringController = require("@metamask/eth-keyring-controller");
var _loglevel = _interopRequireDefault(require("loglevel"));
var _keyring = require("../../../shared/constants/keyring");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const seedPhraseVerifier = {
  /**
   * Verifies if the seed words can restore the accounts.
   *
   * Key notes:
   * - The seed words can recreate the primary keyring and the accounts belonging to it.
   * - The created accounts in the primary keyring are always the same.
   * - The keyring always creates the accounts in the same sequence.
   *
   * @param {Array} createdAccounts - The accounts to restore
   * @param {Buffer} seedPhrase - The seed words to verify, encoded as a Buffer
   * @returns {Promise<void>}
   */
  async verifyAccounts(createdAccounts, seedPhrase) {
    if (!createdAccounts || createdAccounts.length < 1) {
      throw new Error('No created accounts defined.');
    }
    const keyringController = new _ethKeyringController.KeyringController({});
    const keyringBuilder = keyringController.getKeyringBuilderForType(_keyring.KeyringType.hdKeyTree);
    const keyring = keyringBuilder();
    const opts = {
      mnemonic: seedPhrase,
      numberOfAccounts: createdAccounts.length
    };
    await keyring.deserialize(opts);
    const restoredAccounts = await keyring.getAccounts();
    _loglevel.default.debug(`Created accounts: ${JSON.stringify(createdAccounts)}`);
    _loglevel.default.debug(`Restored accounts: ${JSON.stringify(restoredAccounts)}`);
    if (restoredAccounts.length !== createdAccounts.length) {
      // this should not happen...
      throw new Error('Wrong number of accounts');
    }
    for (let i = 0; i < restoredAccounts.length; i++) {
      if (restoredAccounts[i].toLowerCase() !== createdAccounts[i].toLowerCase()) {
        throw new Error(`Not identical accounts! Original: ${createdAccounts[i]}, Restored: ${restoredAccounts[i]}`);
      }
    }
  }
};
var _default = seedPhraseVerifier;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\seed-phrase-verifier.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\segment\\analytics.js", {"../util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","@segment/loosely-validate-event":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@segment\\loosely-validate-event\\index.js","buffer":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\browserify\\node_modules\\buffer\\index.js","is-retry-allowed":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\is-retry-allowed\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","remove-trailing-slash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\remove-trailing-slash\\index.js","timers":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\timers-browserify\\main.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Csegment%5Canalytics.js
      return function (require, module, exports) {
(function (Buffer,setImmediate){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _removeTrailingSlash = _interopRequireDefault(require("remove-trailing-slash"));
var _looselyValidateEvent = _interopRequireDefault(require("@segment/loosely-validate-event"));
var _lodash = require("lodash");
var _isRetryAllowed = _interopRequireDefault(require("is-retry-allowed"));
var _util = require("../util");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const noop = () => ({});

// Method below is inspired from axios-retry https://github.com/softonic/axios-retry
function isNetworkError(error) {
  return !error.response && Boolean(error.code) &&
  // Prevents retrying cancelled requests
  error.code !== 'ECONNABORTED' &&
  // Prevents retrying timed out requests
  (0, _isRetryAllowed.default)(error); // Prevents retrying unsafe errors
}

class Analytics {
  /**
   * Initialize a new `Analytics` with Segment project's `writeKey` and an
   * optional dictionary of `options`.
   *
   * @param {string} writeKey
   * @param {object} [options] - (optional)
   * @property {number} [flushAt] (default: 20)
   * @property {number} [flushInterval] (default: 10000)
   * @property {string} [host] (default: 'https://api.segment.io')
   */
  constructor(writeKey, options = {}) {
    this.writeKey = writeKey;
    this.host = (0, _removeTrailingSlash.default)(options.host || 'https://api.segment.io');
    this.flushInterval = options.flushInterval || 10000;
    this.flushAt = options.flushAt || Math.max(options.flushAt, 1) || 20;
    this.queue = [];
    this.path = '/v1/batch';
    this.maxQueueSize = 1024 * 450;
    this.flushed = false;
    this.retryCount = 3;
    Object.defineProperty(this, 'enable', {
      configurable: false,
      writable: false,
      enumerable: true,
      value: true
    });
  }
  _validate(message, type) {
    (0, _looselyValidateEvent.default)(message, type);
  }
  _message(type, message, callback) {
    this._validate(message, type);
    this.enqueue(type, message, callback);
    return this;
  }

  /**
   * Send an identify `message`.
   *
   * @param {object} message
   * @param {Function} [callback] - (optional)
   * @returns {Analytics}
   */
  identify(message, callback) {
    return this._message('identify', message, callback);
  }

  /**
   * Send a track `message`.
   *
   * @param {object} message
   * @param {Function} [callback] - (optional)
   * @returns {Analytics}
   */
  track(message, callback) {
    return this._message('track', message, callback);
  }

  /**
   * Send a page `message`.
   *
   * @param {object} message
   * @param {Function} [callback] - (optional)
   * @returns {Analytics}
   */
  page(message, callback) {
    return this._message('page', message, callback);
  }

  /**
   * Add a `message` of type `type` to the queue and
   * check whether it should be flushed.
   *
   * @param {string} type
   * @param {object} msg
   * @param {Function} [callback] - (optional)
   */
  enqueue(type, msg, callback = noop) {
    if (!this.enable) {
      setImmediate(callback);
      return;
    }
    const message = {
      ...msg,
      type
    };

    // Specifying library here helps segment to understand structure of request.
    // Currently segment seems to support these source libraries only.
    message.context = {
      ...message.context,
      library: {
        name: 'analytics-node'
      }
    };
    if (!message.timestamp) {
      message.timestamp = new Date();
    }
    if (!message.messageId) {
      message.messageId = (0, _util.generateRandomId)();
    }
    if (message.anonymousId && !(0, _lodash.isString)(message.anonymousId)) {
      message.anonymousId = JSON.stringify(message.anonymousId);
    }
    if (message.userId && !(0, _lodash.isString)(message.userId)) {
      message.userId = JSON.stringify(message.userId);
    }
    this.queue.push({
      message,
      callback
    });
    if (!this.flushed) {
      this.flushed = true;
      this.flush();
      return;
    }
    const hasReachedFlushAt = this.queue.length >= this.flushAt;
    const hasReachedQueueSize = this.queue.reduce((acc, item) => acc + JSON.stringify(item).length, 0) >= this.maxQueueSize;
    if (hasReachedFlushAt || hasReachedQueueSize) {
      this.flush();
    }
    if (this.flushInterval && !this.timer) {
      this.timer = setTimeout(this.flush.bind(this), this.flushInterval);
    }
  }

  /**
   * Flush the current queue
   *
   * @param {Function} [callback] - (optional)
   */
  flush(callback = noop) {
    if (!this.enable) {
      setImmediate(callback);
      return Promise.resolve();
    }
    if (this.timer) {
      clearTimeout(this.timer);
      this.timer = null;
    }
    if (!this.queue.length) {
      setImmediate(callback);
      return Promise.resolve();
    }
    const items = this.queue.splice(0, this.flushAt);
    const callbacks = items.map(item => item.callback);
    const messages = items.map(item => item.message);
    const data = {
      batch: messages,
      timestamp: new Date(),
      sentAt: new Date()
    };
    const done = err => {
      setImmediate(() => {
        callbacks.forEach(fn => fn(err, data));
        callback(err, data);
      });
    };
    const headers = {
      Authorization: `Basic ${Buffer.from(this.writeKey, 'utf8').toString('base64')}`
    };
    return this._sendRequest(`${this.host}${this.path}`, {
      method: 'POST',
      body: JSON.stringify(data),
      headers
    }, done, 0);
  }
  _retryRequest(url, body, done, retryNo) {
    const delay = Math.pow(2, retryNo) * 100;
    setTimeout(() => {
      this._sendRequest(url, body, done, retryNo + 1);
    }, delay);
  }
  async _sendRequest(url, body, done, retryNo) {
    return fetch(url, body).then(async response => {
      if (response.ok) {
        done();
      } else if (this._isErrorRetryable({
        response
      }) && retryNo <= this.retryCount) {
        this._retryRequest(url, body, done, retryNo);
      } else {
        const error = new Error(response.statusText);
        done(error);
      }
    }).catch(error => {
      if (this._isErrorRetryable(error) && retryNo <= this.retryCount) {
        this._retryRequest(url, body, done, retryNo);
      } else {
        done(error);
      }
    });
  }
  _isErrorRetryable(error) {
    // Retry Network Errors.
    if (isNetworkError(error)) {
      return true;
    }
    if (!error.response) {
      // Cannot determine if the request can be retried
      return false;
    }

    // Retry Server Errors (5xx).
    if (error.response.status >= 500 && error.response.status <= 599) {
      return true;
    }

    // Retry if rate limited.
    if (error.response.status === 429) {
      return true;
    }
    return false;
  }
}
exports.default = Analytics;

}).call(this)}).call(this,require("buffer").Buffer,require("timers").setImmediate)

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\segment\\analytics.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\segment\\index.js", {"../../../../shared/constants/time":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\time.ts","./analytics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\segment\\analytics.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Clib%5Csegment%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.segment = exports.createSegmentMock = void 0;
var _time = require("../../../../shared/constants/time");
var _analytics = _interopRequireDefault(require("./analytics"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SEGMENT_WRITE_KEY = "" ?? null;
const SEGMENT_HOST = null ?? null;

// flushAt controls how many events are sent to segment at once. Segment will
// hold onto a queue of events until it hits this number, then it sends them as
// a batch. This setting defaults to 20, but in development we likely want to
// see events in real time for debugging, so this is set to 1 to disable the
// queueing mechanism.
const SEGMENT_FLUSH_AT = "development" === 'production' ? undefined : 1;

// flushInterval controls how frequently the queue is flushed to segment.
// This happens regardless of the size of the queue. The default setting is
// 10,000ms (10 seconds). This default is rather high, though thankfully
// using the background process as our event handler means we don't have to
// deal with short lived sessions that happen faster than the interval
// e.g confirmations. This is set to 5,000ms (5 seconds) arbitrarily with the
// intent of having a value less than 10 seconds.
const SEGMENT_FLUSH_INTERVAL = _time.SECOND * 5;

/**
 * Creates a mock segment module for usage in test environments. This is used
 * when building the application in test mode to catch event calls and prevent
 * them from being sent to segment. It is also used in unit tests to mock and
 * spy on the methods to ensure proper behavior
 *
 * @param {number} flushAt - number of events to queue before sending to segment
 * @returns {SegmentInterface}
 */
const createSegmentMock = (flushAt = SEGMENT_FLUSH_AT) => {
  const segmentMock = {
    // Internal queue to keep track of events and properly mimic segment's
    // queueing behavior.
    queue: [],
    /**
     * Used to immediately send all queued events and reset the queue to zero.
     * For our purposes this simply triggers the callback method registered with
     * the event.
     */
    flush() {
      segmentMock.queue.forEach(([_, callback]) => {
        callback();
      });
      segmentMock.queue = [];
    },
    /**
     * Track an event and add it to the queue. If the queue size reaches the
     * flushAt threshold, flush the queue.
     *
     * @param payload
     * @param callback
     */
    track(payload, callback = () => undefined) {
      segmentMock.queue.push([payload, callback]);
      if (segmentMock.queue.length >= flushAt) {
        segmentMock.flush();
      }
    },
    /**
     * A true NOOP, these methods are either not used or do not await callback
     * and therefore require no functionality.
     */
    page() {
      // noop
    },
    identify() {
      // noop
    }
  };
  return segmentMock;
};
exports.createSegmentMock = createSegmentMock;
const segment = SEGMENT_WRITE_KEY ? new _analytics.default(SEGMENT_WRITE_KEY, {
  host: SEGMENT_HOST,
  flushAt: SEGMENT_FLUSH_AT,
  flushInterval: SEGMENT_FLUSH_INTERVAL
}) : createSegmentMock(SEGMENT_FLUSH_AT, SEGMENT_FLUSH_INTERVAL);
exports.segment = segment;

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\lib\\segment\\index.js",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zY3JpcHRzL2FjY291bnQtaW1wb3J0LXN0cmF0ZWdpZXMvaW5kZXguanMiLCJhcHAvc2NyaXB0cy9jb25zdGFudHMvY29udHJhY3RzLnRzIiwiYXBwL3NjcmlwdHMvY29udHJvbGxlcnMvYWxlcnQuanMiLCJhcHAvc2NyaXB0cy9jb250cm9sbGVycy9hcHAtc3RhdGUuanMiLCJhcHAvc2NyaXB0cy9jb250cm9sbGVycy9iYWNrdXAuanMiLCJhcHAvc2NyaXB0cy9jb250cm9sbGVycy9jYWNoZWQtYmFsYW5jZXMuanMiLCJhcHAvc2NyaXB0cy9jb250cm9sbGVycy9kZWNyeXB0LW1lc3NhZ2UudHMiLCJhcHAvc2NyaXB0cy9jb250cm9sbGVycy9kZXRlY3QtdG9rZW5zLmpzIiwiYXBwL3NjcmlwdHMvY29udHJvbGxlcnMvZW5jcnlwdGlvbi1wdWJsaWMta2V5LnRzIiwiYXBwL3NjcmlwdHMvY29udHJvbGxlcnMvZW5zL2Vucy5qcyIsImFwcC9zY3JpcHRzL2NvbnRyb2xsZXJzL2Vucy9pbmRleC5qcyIsImFwcC9zY3JpcHRzL2NvbnRyb2xsZXJzL2luY29taW5nLXRyYW5zYWN0aW9ucy5qcyIsImFwcC9zY3JpcHRzL2NvbnRyb2xsZXJzL21ldGFtZXRyaWNzLmpzIiwiYXBwL3NjcmlwdHMvY29udHJvbGxlcnMvbmV0d29yay9jcmVhdGUtbmV0d29yay1jbGllbnQudHMiLCJhcHAvc2NyaXB0cy9jb250cm9sbGVycy9uZXR3b3JrL2luZGV4LnRzIiwiYXBwL3NjcmlwdHMvY29udHJvbGxlcnMvbmV0d29yay9uZXR3b3JrLWNvbnRyb2xsZXIudHMiLCJhcHAvc2NyaXB0cy9jb250cm9sbGVycy9vbmJvYXJkaW5nLmpzIiwiYXBwL3NjcmlwdHMvY29udHJvbGxlcnMvcGVybWlzc2lvbnMvYmFja2dyb3VuZC1hcGkuanMiLCJhcHAvc2NyaXB0cy9jb250cm9sbGVycy9wZXJtaXNzaW9ucy9jYXZlYXQtbXV0YXRvcnMuanMiLCJhcHAvc2NyaXB0cy9jb250cm9sbGVycy9wZXJtaXNzaW9ucy9lbnVtcy5qcyIsImFwcC9zY3JpcHRzL2NvbnRyb2xsZXJzL3Blcm1pc3Npb25zL2luZGV4LmpzIiwiYXBwL3NjcmlwdHMvY29udHJvbGxlcnMvcGVybWlzc2lvbnMvcGVybWlzc2lvbi1sb2cuanMiLCJhcHAvc2NyaXB0cy9jb250cm9sbGVycy9wZXJtaXNzaW9ucy9zZWxlY3RvcnMuanMiLCJhcHAvc2NyaXB0cy9jb250cm9sbGVycy9wZXJtaXNzaW9ucy9zcGVjaWZpY2F0aW9ucy5qcyIsImFwcC9zY3JpcHRzL2NvbnRyb2xsZXJzL3ByZWZlcmVuY2VzLmpzIiwiYXBwL3NjcmlwdHMvY29udHJvbGxlcnMvc3dhcHMuanMiLCJhcHAvc2NyaXB0cy9jb250cm9sbGVycy90cmFuc2FjdGlvbnMvaW5kZXguanMiLCJhcHAvc2NyaXB0cy9jb250cm9sbGVycy90cmFuc2FjdGlvbnMvbGliL3R4LXN0YXRlLWhpc3RvcnktaGVscGVycy5qcyIsImFwcC9zY3JpcHRzL2NvbnRyb2xsZXJzL3RyYW5zYWN0aW9ucy9saWIvdXRpbC5qcyIsImFwcC9zY3JpcHRzL2NvbnRyb2xsZXJzL3RyYW5zYWN0aW9ucy9wZW5kaW5nLXR4LXRyYWNrZXIuanMiLCJhcHAvc2NyaXB0cy9jb250cm9sbGVycy90cmFuc2FjdGlvbnMvdHgtZ2FzLXV0aWxzLmpzIiwiYXBwL3NjcmlwdHMvY29udHJvbGxlcnMvdHJhbnNhY3Rpb25zL3R4LXN0YXRlLW1hbmFnZXIuanMiLCJhcHAvc2NyaXB0cy9kZXRlY3QtbXVsdGlwbGUtaW5zdGFuY2VzLmpzIiwiYXBwL3NjcmlwdHMvZmlyc3QtdGltZS1zdGF0ZS5qcyIsImFwcC9zY3JpcHRzL2xpYi9Db21wb3NhYmxlT2JzZXJ2YWJsZVN0b3JlLmpzIiwiYXBwL3NjcmlwdHMvbGliL2FjY291bnQtdHJhY2tlci5qcyIsImFwcC9zY3JpcHRzL2xpYi9jbGVhbkVycm9yU3RhY2suanMiLCJhcHAvc2NyaXB0cy9saWIvY3JlYXRlRHVwZVJlcUZpbHRlck1pZGRsZXdhcmUuanMiLCJhcHAvc2NyaXB0cy9saWIvY3JlYXRlTG9nZ2VyTWlkZGxld2FyZS5qcyIsImFwcC9zY3JpcHRzL2xpYi9jcmVhdGVNZXRhUlBDSGFuZGxlci5qcyIsImFwcC9zY3JpcHRzL2xpYi9jcmVhdGVNZXRhbWFza01pZGRsZXdhcmUuanMiLCJhcHAvc2NyaXB0cy9saWIvY3JlYXRlT25ib2FyZGluZ01pZGRsZXdhcmUuanMiLCJhcHAvc2NyaXB0cy9saWIvY3JlYXRlT3JpZ2luTWlkZGxld2FyZS5qcyIsImFwcC9zY3JpcHRzL2xpYi9jcmVhdGVSUENNZXRob2RUcmFja2luZ01pZGRsZXdhcmUuanMiLCJhcHAvc2NyaXB0cy9saWIvY3JlYXRlU3RyZWFtU2luay5qcyIsImFwcC9zY3JpcHRzL2xpYi9jcmVhdGVUYWJJZE1pZGRsZXdhcmUuanMiLCJhcHAvc2NyaXB0cy9saWIvZW5zLWlwZnMvY29udHJhY3RzL3JlZ2lzdHJ5LmpzIiwiYXBwL3NjcmlwdHMvbGliL2Vucy1pcGZzL2NvbnRyYWN0cy9yZXNvbHZlci5qcyIsImFwcC9zY3JpcHRzL2xpYi9lbnMtaXBmcy9yZXNvbHZlci5qcyIsImFwcC9zY3JpcHRzL2xpYi9lbnMtaXBmcy9zZXR1cC5qcyIsImFwcC9zY3JpcHRzL2xpYi9nZXRPYmpTdHJ1Y3R1cmUuanMiLCJhcHAvc2NyaXB0cy9saWIvbG9jYWwtc3RvcmUuanMiLCJhcHAvc2NyaXB0cy9saWIvbWlkZGxld2FyZS9wZW5kaW5nLmpzIiwiYXBwL3NjcmlwdHMvbGliL21pZ3JhdG9yL2luZGV4LmpzIiwiYXBwL3NjcmlwdHMvbGliL25ldHdvcmstc3RvcmUuanMiLCJhcHAvc2NyaXB0cy9saWIvbm90aWZpY2F0aW9uLW1hbmFnZXIuanMiLCJhcHAvc2NyaXB0cy9saWIvcnBjLW1ldGhvZC1taWRkbGV3YXJlL2NyZWF0ZU1ldGhvZE1pZGRsZXdhcmUuanMiLCJhcHAvc2NyaXB0cy9saWIvcnBjLW1ldGhvZC1taWRkbGV3YXJlL2hhbmRsZXJzL2FkZC1ldGhlcmV1bS1jaGFpbi5qcyIsImFwcC9zY3JpcHRzL2xpYi9ycGMtbWV0aG9kLW1pZGRsZXdhcmUvaGFuZGxlcnMvZXRoLWFjY291bnRzLmpzIiwiYXBwL3NjcmlwdHMvbGliL3JwYy1tZXRob2QtbWlkZGxld2FyZS9oYW5kbGVycy9nZXQtcHJvdmlkZXItc3RhdGUuanMiLCJhcHAvc2NyaXB0cy9saWIvcnBjLW1ldGhvZC1taWRkbGV3YXJlL2hhbmRsZXJzL2luZGV4LmpzIiwiYXBwL3NjcmlwdHMvbGliL3JwYy1tZXRob2QtbWlkZGxld2FyZS9oYW5kbGVycy9sb2ctd2ViMy1zaGltLXVzYWdlLmpzIiwiYXBwL3NjcmlwdHMvbGliL3JwYy1tZXRob2QtbWlkZGxld2FyZS9oYW5kbGVycy9yZXF1ZXN0LWFjY291bnRzLmpzIiwiYXBwL3NjcmlwdHMvbGliL3JwYy1tZXRob2QtbWlkZGxld2FyZS9oYW5kbGVycy9zZW5kLW1ldGFkYXRhLmpzIiwiYXBwL3NjcmlwdHMvbGliL3JwYy1tZXRob2QtbWlkZGxld2FyZS9oYW5kbGVycy9zd2l0Y2gtZXRoZXJldW0tY2hhaW4uanMiLCJhcHAvc2NyaXB0cy9saWIvcnBjLW1ldGhvZC1taWRkbGV3YXJlL2hhbmRsZXJzL3dhdGNoLWFzc2V0LmpzIiwiYXBwL3NjcmlwdHMvbGliL3JwYy1tZXRob2QtbWlkZGxld2FyZS9pbmRleC5qcyIsImFwcC9zY3JpcHRzL2xpYi9zZWN1cml0eS1wcm92aWRlci1oZWxwZXJzLnRzIiwiYXBwL3NjcmlwdHMvbGliL3NlZWQtcGhyYXNlLXZlcmlmaWVyLmpzIiwiYXBwL3NjcmlwdHMvbGliL3NlZ21lbnQvYW5hbHl0aWNzLmpzIiwiYXBwL3NjcmlwdHMvbGliL3NlZ21lbnQvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBO0FBQ0EsSUFBQSxlQUFBLEdBQUEsT0FBQTtBQU1BLElBQUEsaUJBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLFdBQUEsR0FBQSxz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QUFBLENBQUE7QUFDQSxJQUFBLGdCQUFBLE9BQUEsQ0FBQSxnQkFBQSxDQUFBLENBQUE7QUFHQSxJQUFBLGNBQUEsT0FBQSxDQUFBLDZDQUFBLENBQUEsQ0FBQTtBQUNBLElBQUEsV0FBQSxPQUFBLENBQUEsc0NBQUEsQ0FBQSxDQUFBO0FBVUEsSUFBQSxZQUFBLE9BQUEsQ0FBQSwwQ0FBQSxDQUFBLENBQUE7QUFJQSxJQUFBLGVBQUEsT0FBQSxDQUFBLDBDQUFBLENBQUEsQ0FBQTtBQUlBLElBQUEsU0FBQSxPQUFBLENBQUEsa0NBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSx1QkFBQSxPQUFBLENBQUEseUJBQUEsQ0FBQSxDQUFBO0FBR2lDLHFDQUFBLEVBQUEsT0FBQSxHQUFBLElBQUEsR0FBQSxXQUFBLEdBQUEsR0FBQSxHQUFBLEVBQUEsU0FBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBO0FBQUEsc0RBQUEsRUFBQSwwQkFBQSxDQUFBLEdBQUEsRUFBQSxVQUFBLENBQUEsQ0FBQSxDQUFBLFVBQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUE7QUFBQSwwQ0FBQSxFQUFBLE1BQUEsY0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxFQUFBLEVBQUEsTUFBQSxlQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLE9BQUEsS0FBQSxFQUFBLFlBQUEsSUFBQSxFQUFBLGNBQUEsSUFBQSxFQUFBLFVBQUEsSUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsS0FBQSxDQUFBLEVBQUEsQ0FBQSxPQUFBLEdBQUEsQ0FBQSxFQUFBO0FBQUEsNkJBQUEsRUFBQSxJQUFBLE1BQUEsWUFBQSxDQUFBLEdBQUEsRUFBQSxRQUFBLENBQUEsQ0FBQSxDQUFBLE9BQUEsT0FBQSxHQUFBLEtBQUEsUUFBQSxHQUFBLEdBQUEsR0FBQSxNQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQTtBQUFBLG1DQUFBLEVBQUEsSUFBQSxPQUFBLEtBQUEsS0FBQSxRQUFBLElBQUEsS0FBQSxLQUFBLElBQUEsRUFBQSxPQUFBLEtBQUEsQ0FBQSxDQUFBLElBQUEsT0FBQSxLQUFBLENBQUEsTUFBQSxZQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsSUFBQSxLQUFBLFNBQUEsRUFBQSxFQUFBLElBQUEsTUFBQSxJQUFBLEtBQUEsQ0FBQSxLQUFBLEVBQUEsSUFBQSxJQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxPQUFBLEdBQUEsS0FBQSxRQUFBLEVBQUEsT0FBQSxHQUFBLENBQUEsQ0FBQSxNQUFBLElBQUEsU0FBQSxDQUFBLDhDQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsT0FBQSxDQUFBLElBQUEsS0FBQSxRQUFBLEdBQUEsTUFBQSxHQUFBLE1BQUEsRUFBQSxLQUFBLENBQUEsQ0FBQSxFQUFBO0FBQUEsNERBQUEsRUFBQSwwQkFBQSxDQUFBLEdBQUEsRUFBQSxVQUFBLENBQUEsQ0FBQSxDQUFBLFVBQUEsSUFBQSxDQUFBLEdBQUEsRUFBQSxLQUFBLENBQUEsQ0FBQSxFQUFBO0FBQUEsNERBQUEsRUFBQSxJQUFBLGlCQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxFQUFBLE1BQUEsSUFBQSxTQUFBLENBQUEsZ0VBQUEsQ0FBQSxDQUFBLEVBQUEsRUFBQTtBQUFBLDBEQUFBLEVBQUEsSUFBQSxDQUFBLFVBQUEsSUFBQSxDQUFBLFFBQUEsQ0FBQSxFQUFBLEVBQUEsTUFBQSxJQUFBLFNBQUEsQ0FBQSxnREFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUE7QUFBQSxxREFBQSxFQUFBLElBQUEsYUFBQSw0QkFBQSxDQUFBLFFBQUEsRUFBQSxVQUFBLEVBQUEsS0FBQSxDQUFBLENBQUEsQ0FBQSxPQUFBLHdCQUFBLENBQUEsUUFBQSxFQUFBLFVBQUEsQ0FBQSxDQUFBLEVBQUE7QUFBQSx3REFBQSxFQUFBLElBQUEsVUFBQSxJQUFBLEVBQUEsRUFBQSxPQUFBLFVBQUEsSUFBQSxLQUFBLENBQUEsUUFB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Ozs7Ozs7SUFaQSwyQkFBQSxDQUFBLElBQUEsRUFBQSxrQkFBQSxDQUFBLENBQUE7Ozs7SUFUQSwyQkFBQSxDQUFBLElBQUEsRUFBQSxvQkFBQSxDQUFBLENBQUE7Ozs7SUFUQSwyQkFBQSxDQUFBLElBQUEsRUFBQSxtQkFBQSxDQUFBLENBQUE7Ozs7SUFUQSwyQkFBQSxDQUFBLElBQUEsRUFBQSxlQUFBLENBQUEsQ0FBQTs7Ozs7Ozs7SUF2QkEsMkJBQUEsQ0FBQSxJQUFBLEVBQUEsYUFBQSxDQUFBLENBQUE7Ozs7Ozs7O0lBdkJBLDJCQUFBLENBQUEsSUFBQSxFQUFBLGVBQUEsQ0FBQSxDQUFBOzs7O0lBM1ZBLDBCQUFBLENBQUEsSUFBQSxFQUFBLFVBQUEsRUFBQTtNQUFBLFVBQUEsSUFBQTtNQUFBLE9BQUEsS0FBQSxDQUFBO0tBQUEsQ0FBQSxDQUFBOzs7OztJQUtBLDBCQUFBLENBQUEsSUFBQSxFQUFBLHVCQUFBLEVBQUE7TUFBQSxVQUFBLElBQUE7TUFBQSxPQUFBLEtBQUEsQ0FBQTtLQUFBLENBQUEsQ0FBQTs7Ozs7SUFNQSxlQUFBLENBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLENBQUEsQ0FBQSxDQUFBO0lBQUEsMEJBQUEsQ0FBQSxJQUFBLEVBQUEsU0FBQSxFQUFBO01BQUEsVUFBQSxJQUFBO01BQUEsT0FBQSxLQUFBLENBQUE7S0FBQSxDQUFBLENBQUE7SUFBQSwwQkFBQSxDQUFBLElBQUEsRUFBQSxhQUFBLEVBQUE7TUFBQSxVQUFBLElBQUE7TUFBQSxPQUFBLEtBQUEsQ0FBQTtLQUFBLENBQUEsQ0FBQTtJQUFBLDBCQUFBLENBQUEsSUFBQSxFQUFBLGNBQUEsRUFBQTtNQUFBLFVBQUEsSUFBQTtNQUFBLE9BQUEsS0FBQSxDQUFBO0tBQUEsQ0FBQSxDQUFBO0lBQUEsMEJBQUEsQ0FBQSxJQUFBLEVBQUEsa0JBQUEsRUFBQTtNQUFBLFVBQUEsSUFBQTtNQUFBLE9BQUEsS0FBQSxDQUFBO0tBQUEsQ0FBQSxDQUFBO0lBQUEsMEJBQUEsQ0FBQSxJQUFBLEVBQUEsZ0JBQUEsRUFB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QUFBLE9BQUEsTUFBQSxDQUFBLEdBQUE7SUFBQTtFQUFBO0FBQUE7QUFDQSxJQUFBLGNBQUEsR0FBQSxPQUFBO0FBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxjQUFBLEVBQUEsT0FBQSxXQUFBLEdBQUE7RUFBQSxJQUFBLEdBQUEsa0JBQUEsR0FBQTtFQUFBLElBQUEsR0FBQSxJQUFBLE9BQUEsSUFBQSxPQUFBLENBQUEsR0FBQSxNQUFBLGNBQUEsQ0FBQSxHQUFBO0VBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsR0FBQTtJQUFBLFVBQUE7SUFBQSxHQUFBLFdBQUEsQ0FBQTtNQUFBLE9BQUEsY0FBQSxDQUFBLEdBQUE7SUFBQTtFQUFBO0FBQUE7QUFDQSxJQUFBLGVBQUEsR0FBQSxPQUFBO0FBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxlQUFBLEVBQUEsT0FBQSxXQUFBLEdBQUE7RUFBQSxJQUFBLEdBQUEsa0JBQUEsR0FBQTtFQUFBLElBQUEsR0FBQSxJQUFBLE9BQUEsSUFBQSxPQUFBLENBQUEsR0FBQSxNQUFBLGVBQUEsQ0FBQSxHQUFBO0VBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsR0FBQTtJQUFBLFVBQUE7SUFBQSxHQUFBLFdBQUEsQ0FBQTtNQUFBLE9BQUEsZUFBQSxDQUFBLEdBQUE7SUFBQTtFQUFBO0FBQUE7QUFDQSxJQUFBLFVBQUEsR0FBQSxPQUFBO0FBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxVQUFBLEVBQUEsT0FBQSxXQUFBLEdBQUE7RUFBQSxJQUFBLEdBQUEsa0JBQUEsR0FBQTtFQUFBLElBQUEsR0FBQSxJQUFBLE9BQUEsSUFBQSxPQUFBLENBQUEsR0FBQSxNQUFBLFVBQUEsQ0FBQSxHQUFBO0VBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsR0FBQTtJQUFBLFVBQUE7SUFBQSxHQUFBLFdBQUEsQ0FBQTtNQUFBLE9BQUEsVUFBQSxDQUFBLEdBQUE7SUFBQTtFQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTEEsSUFBQSxTQUFB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T0FBQTtBQUNBLElBQUEsU0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsT0FBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLGdCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxLQUFBLEdBQUEsT0FBQTtBQU1BLElBQUEsWUFBQSxHQUFBLE9BQUE7QUFRQSxJQUFBLG1CQUFBLEdBQUEsT0FBQTtBQUNBLElBQUEsSUFBQSxHQUFBLE9BQUE7QUFPQSxJQUFBLFdBQUEsR0FBQSxPQUFBO0FBTUEsSUFBQSxNQUFBLEdBQUEsT0FBQTtBQUNBLElBQUEsWUFBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLFFBQUEsR0FBQSxPQUFBO0FBS0EsSUFBQSxhQUFBLEdBQUEsT0FBQTtBQU1BLElBQUEsSUFBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLDRCQUFBLEdBQUEsT0FBQTtBQUtBLElBQUEsUUFBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLGVBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLFdBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLGlCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxPQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQXNDLFNBQUEseUJBQUEsV0FBQSxlQUFBLE9BQUEsa0NBQUEsaUJBQUEsT0FBQSxPQUFBLFFBQUEsZ0JBQUEsT0FBQSxPQUFBLFlBQUEsd0JBQUEsWUFBQSxDQUFBLFdBQUEsV0FBQSxXQUFBLEdBQUEsZ0JBQUEsR0FBQSxpQkFBQSxLQUFBLFdBQUE7QUFBQSxTQUFBLHdCQUFBLEdBQUEsRUFBQSxXQUFBLFNBQUEsV0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsVUFBQSxXQUFBLEdBQUEsUUFBQSxHQUFBLG9CQUFBLEdBQUEsd0JBQUEsR0FBQSw0QkFBQSxPQUFBLEVBQUEsR0FBQSxVQUFBLEtBQUEsR0FBQSx3QkFBQSxDQUFBLFdBQUEsT0FBQSxL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ZW1vbmljIH0gZnJvbSAnQGV0aGVyc3Byb2plY3QvaGRub2RlJztcbmltcG9ydCB7XG4gIGJ1ZmZlclRvSGV4LFxuICBnZXRCaW5hcnlTaXplLFxuICBpc1ZhbGlkUHJpdmF0ZSxcbiAgdG9CdWZmZXIsXG59IGZyb20gJ2V0aGVyZXVtanMtdXRpbCc7XG5pbXBvcnQgV2FsbGV0IGZyb20gJ2V0aGVyZXVtanMtd2FsbGV0JztcbmltcG9ydCBpbXBvcnRlcnMgZnJvbSAnZXRoZXJldW1qcy13YWxsZXQvdGhpcmRwYXJ0eSc7XG5pbXBvcnQgbG9nIGZyb20gJ2xvZ2xldmVsJztcbmltcG9ydCB7IHN0cmlwSGV4UHJlZml4IH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvaGV4c3RyaW5nLXV0aWxzJztcbmltcG9ydCB7IGFkZEhleFByZWZpeCB9IGZyb20gJy4uL2xpYi91dGlsJztcblxuY29uc3QgYWNjb3VudEltcG9ydGVyID0ge1xuICBhc3luYyBpbXBvcnRBY2NvdW50KHN0cmF0ZWd5LCBhcmdzKSB7XG4gICAgY29uc3QgaW1wb3J0ZXIgPSB0aGlzLnN0cmF0ZWdpZXNbc3RyYXRlZ3ldO1xuICAgIGNvbnN0IHByaXZhdGVLZXlIZXggPSBpbXBvcnRlciguLi5hcmdzKTtcbiAgICByZXR1cm4gcHJpdmF0ZUtleUhleDtcbiAgfSxcblxuICBzdHJhdGVnaWVzOiB7XG4gICAgJ1ByaXZhdGUgS2V5JzogKHByaXZhdGVLZXkpID0+IHtcbiAgICAgIGlmICghcHJpdmF0ZUtleSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBpbXBvcnQgYW4gZW1wdHkga2V5LicpOyAvLyBJdCBzaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIGJlY2F1c2UgdGhpcyBzaG91bGQgYmUgc3RvcHBlZCBpbiB0aGUgVUlcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIHVzZXIgaGFzIGVudGVyZWQgYW4gU1JQIGJ5IG1pc3Rha2UgaW5zdGVhZCBvZiBhIHByaXZhdGUga2V5XG4gICAgICBpZiAoaXNWYWxpZE1uZW1vbmljKHByaXZhdGVLZXkudHJpbSgpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHQoJ2ltcG9ydEFjY291bnRFcnJvcklzU1JQJylgKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdHJpbW1lZFByaXZhdGVLZXkgPSBwcml2YXRlS2V5LnJlcGxhY2UoL1xccysvZ3UsICcnKTsgLy8gUmVtb3ZlIGFsbCB3aGl0ZXNwYWNlXG5cbiAgICAgIGNvbnN0IHByZWZpeGVkUHJpdmF0ZUtleSA9IGFkZEhleFByZWZpeCh0cmltbWVkUHJpdmF0ZUtleSk7XG4gICAgICBsZXQgYnVmZmVyO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYnVmZmVyID0gdG9CdWZmZXIocHJlZml4ZWRQcml2YXRlS2V5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0KCdpbXBvcnRBY2NvdW50RXJyb3JOb3RIZXhhZGVjaW1hbCcpYCk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhaXNWYWxpZFByaXZhdGUoYnVmZmVyKSB8fFxuICAgICAgICAgIGdldEJpbmFyeVNpemUocHJlZml4ZWRQcml2YXRlS2V5KSAhPT0gNjQgKyAnMHgnLmxlbmd0aCAvLyBGaXhlcyBpc3N1ZSAjMTc3MTkgLS0gaXNWYWxpZFByaXZhdGUoKSB3aWxsIGxldCBhIGtleSBvZiA2MyBoZXggZGlnaXRzIHRocm91Z2ggd2l0aG91dCBjb21wbGFpbmluZywgdGhpcyBsaW5lIGVuc3VyZXMgNjQgaGV4IGRpZ2l0cyArICcweCcgPSA2NiBkaWdpdHNcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0KCdpbXBvcnRBY2NvdW50RXJyb3JOb3RBVmFsaWRQcml2YXRlS2V5JylgKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHQoJ2ltcG9ydEFjY291bnRFcnJvck5vdEFWYWxpZFByaXZhdGVLZXknKWApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzdHJpcHBlZFByaXZhdGVLZXkgPSBzdHJpcEhleFByZWZpeChwcmVmaXhlZFByaXZhdGVLZXkpO1xuICAgICAgcmV0dXJuIHN0cmlwcGVkUHJpdmF0ZUtleTtcbiAgICB9LFxuICAgICdKU09OIEZpbGUnOiAoaW5wdXQsIHBhc3N3b3JkKSA9PiB7XG4gICAgICBsZXQgd2FsbGV0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgd2FsbGV0ID0gaW1wb3J0ZXJzLmZyb21FdGhlcldhbGxldChpbnB1dCwgcGFzc3dvcmQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cuZGVidWcoJ0F0dGVtcHQgdG8gaW1wb3J0IGFzIEV0aGVyV2FsbGV0IGZvcm1hdCBmYWlsZWQsIHRyeWluZyBWMycpO1xuICAgICAgICB3YWxsZXQgPSBXYWxsZXQuZnJvbVYzKGlucHV0LCBwYXNzd29yZCwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3YWxsZXRUb1ByaXZhdGVLZXkod2FsbGV0KTtcbiAgICB9LFxuICB9LFxufTtcblxuZnVuY3Rpb24gd2FsbGV0VG9Qcml2YXRlS2V5KHdhbGxldCkge1xuICBjb25zdCBwcml2YXRlS2V5QnVmZmVyID0gd2FsbGV0LmdldFByaXZhdGVLZXkoKTtcbiAgcmV0dXJuIGJ1ZmZlclRvSGV4KHByaXZhdGVLZXlCdWZmZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhY2NvdW50SW1wb3J0ZXI7XG4iLCJleHBvcnQgY29uc3QgU0lOR0xFX0NBTExfQkFMQU5DRVNfQUREUkVTUyA9XG4gICcweGIxZjhlNTVjN2Y2NGQyMDNjMTQwMGI5ZDg1NTVkMDUwZjk0YWRmMzknO1xuZXhwb3J0IGNvbnN0IFNJTkdMRV9DQUxMX0JBTEFOQ0VTX0FERFJFU1NfR09FUkxJID1cbiAgJzB4OTc4OEM0RTkzZjkwMDJhN2FkOGU3MjYzM2IxMUU4ZDFlY2Q1MWY5Yic7XG4vLyBUT0RPKFNFUE9MSUEpIFRoZXJlIGlzIGN1cnJlbnRseSBubyBiYWxhbmNlIGNhbGwgYWRkcmVzcyBmb3IgU2Vwb2xpYVxuZXhwb3J0IGNvbnN0IFNJTkdMRV9DQUxMX0JBTEFOQ0VTX0FERFJFU1NfU0VQT0xJQSA9ICcnO1xuZXhwb3J0IGNvbnN0IFNJTkdMRV9DQUxMX0JBTEFOQ0VTX0FERFJFU1NfQlNDID1cbiAgJzB4MjM1MmM2M0E4M2Y5RmQxMjZhZjg2NzYxNDY3MjFGYTAwOTI0ZDdlNCc7XG5leHBvcnQgY29uc3QgU0lOR0xFX0NBTExfQkFMQU5DRVNfQUREUkVTU19PUFRJTUlTTSA9XG4gICcweEIxYzU2OGU5QzNFNmJkYWY3NTVBNjBjNzQxOEMyNjllYjExNTI0RkMnO1xuZXhwb3J0IGNvbnN0IFNJTkdMRV9DQUxMX0JBTEFOQ0VTX0FERFJFU1NfUE9MWUdPTiA9XG4gICcweDIzNTJjNjNBODNmOUZkMTI2YWY4Njc2MTQ2NzIxRmEwMDkyNGQ3ZTQnO1xuZXhwb3J0IGNvbnN0IFNJTkdMRV9DQUxMX0JBTEFOQ0VTX0FERFJFU1NfQVZBTEFOQ0hFID1cbiAgJzB4RDAyM0QxNTNhMERGYTQ4NTEzMEVDRmRFMkZBQTdlNjEyRUY5NDgxOCc7XG5leHBvcnQgY29uc3QgU0lOR0xFX0NBTExfQkFMQU5DRVNfQUREUkVTU19GQU5UT00gPVxuICAnMHgwN2Y2OTc0MjRBQmU3NjJiQjgwOGMxMDk4NjBjMDRlQTQ4OGZmOTJCJztcbmV4cG9ydCBjb25zdCBTSU5HTEVfQ0FMTF9CQUxBTkNFU19BRERSRVNTX0FSQklUUlVNID1cbiAgJzB4MTUxRTI0QTQ4NkQ3MjU4ZGQ3QzMzRmI2N0U0YkIwMTkxOUI3QjMyYyc7XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlU3RvcmUgfSBmcm9tICdAbWV0YW1hc2svb2JzLXN0b3JlJztcbmltcG9ydCB7XG4gIFRPR0dMRUFCTEVfQUxFUlRfVFlQRVMsXG4gIFdlYjNTaGltVXNhZ2VBbGVydFN0YXRlcyxcbn0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9hbGVydHMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IEFsZXJ0Q29udHJvbGxlckluaXRTdGF0ZVxuICogQHByb3BlcnR5IHtvYmplY3R9IGFsZXJ0RW5hYmxlZG5lc3MgLSBBIG1hcCBvZiBhbGVydHMgSURzIHRvIGJvb2xlYW5zLCB3aGVyZVxuICogYHRydWVgIGluZGljYXRlcyB0aGF0IHRoZSBhbGVydCBpcyBlbmFibGVkIGFuZCBzaG93biwgYW5kIGBmYWxzZWAgdGhlIG9wcG9zaXRlLlxuICogQHByb3BlcnR5IHtvYmplY3R9IHVuY29ubmVjdGVkQWNjb3VudEFsZXJ0U2hvd25PcmlnaW5zIC0gQSBtYXAgb2Ygb3JpZ2luXG4gKiBzdHJpbmdzIHRvIGJvb2xlYW5zIGluZGljYXRpbmcgd2hldGhlciB0aGUgXCJzd2l0Y2ggdG8gY29ubmVjdGVkXCIgYWxlcnQgaGFzXG4gKiBiZWVuIHNob3duIChgdHJ1ZWApIG9yIG90aGVyd2lzZSAoYGZhbHNlYCkuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBBbGVydENvbnRyb2xsZXJPcHRpb25zXG4gKiBAcHJvcGVydHkge0FsZXJ0Q29udHJvbGxlckluaXRTdGF0ZX0gaW5pdFN0YXRlIC0gVGhlIGluaXRpYWwgY29udHJvbGxlciBzdGF0ZVxuICovXG5cbmNvbnN0IGRlZmF1bHRTdGF0ZSA9IHtcbiAgYWxlcnRFbmFibGVkbmVzczogVE9HR0xFQUJMRV9BTEVSVF9UWVBFUy5yZWR1Y2UoXG4gICAgKGFsZXJ0RW5hYmxlZG5lc3MsIGFsZXJ0VHlwZSkgPT4ge1xuICAgICAgYWxlcnRFbmFibGVkbmVzc1thbGVydFR5cGVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiBhbGVydEVuYWJsZWRuZXNzO1xuICAgIH0sXG4gICAge30sXG4gICksXG4gIHVuY29ubmVjdGVkQWNjb3VudEFsZXJ0U2hvd25PcmlnaW5zOiB7fSxcbiAgd2ViM1NoaW1Vc2FnZU9yaWdpbnM6IHt9LFxufTtcblxuLyoqXG4gKiBDb250cm9sbGVyIHJlc3BvbnNpYmxlIGZvciBtYWludGFpbmluZyBhbGVydC1yZWxhdGVkIHN0YXRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbGVydENvbnRyb2xsZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtBbGVydENvbnRyb2xsZXJPcHRpb25zfSBbb3B0c10gLSBDb250cm9sbGVyIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyc1xuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgY29uc3QgeyBpbml0U3RhdGUgPSB7fSwgcHJlZmVyZW5jZXNTdG9yZSB9ID0gb3B0cztcbiAgICBjb25zdCBzdGF0ZSA9IHtcbiAgICAgIC4uLmRlZmF1bHRTdGF0ZSxcbiAgICAgIGFsZXJ0RW5hYmxlZG5lc3M6IHtcbiAgICAgICAgLi4uZGVmYXVsdFN0YXRlLmFsZXJ0RW5hYmxlZG5lc3MsXG4gICAgICAgIC4uLmluaXRTdGF0ZS5hbGVydEVuYWJsZWRuZXNzLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgdGhpcy5zdG9yZSA9IG5ldyBPYnNlcnZhYmxlU3RvcmUoc3RhdGUpO1xuXG4gICAgdGhpcy5zZWxlY3RlZEFkZHJlc3MgPSBwcmVmZXJlbmNlc1N0b3JlLmdldFN0YXRlKCkuc2VsZWN0ZWRBZGRyZXNzO1xuXG4gICAgcHJlZmVyZW5jZXNTdG9yZS5zdWJzY3JpYmUoKHsgc2VsZWN0ZWRBZGRyZXNzIH0pID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgIGlmIChcbiAgICAgICAgY3VycmVudFN0YXRlLnVuY29ubmVjdGVkQWNjb3VudEFsZXJ0U2hvd25PcmlnaW5zICYmXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRBZGRyZXNzICE9PSBzZWxlY3RlZEFkZHJlc3NcbiAgICAgICkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkQWRkcmVzcyA9IHNlbGVjdGVkQWRkcmVzcztcbiAgICAgICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IHVuY29ubmVjdGVkQWNjb3VudEFsZXJ0U2hvd25PcmlnaW5zOiB7fSB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldEFsZXJ0RW5hYmxlZG5lc3MoYWxlcnRJZCwgZW5hYmxlZG5lc3MpIHtcbiAgICBsZXQgeyBhbGVydEVuYWJsZWRuZXNzIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgYWxlcnRFbmFibGVkbmVzcyA9IHsgLi4uYWxlcnRFbmFibGVkbmVzcyB9O1xuICAgIGFsZXJ0RW5hYmxlZG5lc3NbYWxlcnRJZF0gPSBlbmFibGVkbmVzcztcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgYWxlcnRFbmFibGVkbmVzcyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBcInN3aXRjaCB0byBjb25uZWN0ZWRcIiBhbGVydCBhcyBzaG93biBmb3IgdGhlIGdpdmVuIG9yaWdpblxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3JpZ2luIC0gVGhlIG9yaWdpbiB0aGUgYWxlcnQgaGFzIGJlZW4gc2hvd24gZm9yXG4gICAqL1xuICBzZXRVbmNvbm5lY3RlZEFjY291bnRBbGVydFNob3duKG9yaWdpbikge1xuICAgIGxldCB7IHVuY29ubmVjdGVkQWNjb3VudEFsZXJ0U2hvd25PcmlnaW5zIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgdW5jb25uZWN0ZWRBY2NvdW50QWxlcnRTaG93bk9yaWdpbnMgPSB7XG4gICAgICAuLi51bmNvbm5lY3RlZEFjY291bnRBbGVydFNob3duT3JpZ2lucyxcbiAgICB9O1xuICAgIHVuY29ubmVjdGVkQWNjb3VudEFsZXJ0U2hvd25PcmlnaW5zW29yaWdpbl0gPSB0cnVlO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyB1bmNvbm5lY3RlZEFjY291bnRBbGVydFNob3duT3JpZ2lucyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB3ZWIzIHNoaW0gdXNhZ2Ugc3RhdGUgZm9yIHRoZSBnaXZlbiBvcmlnaW4uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcmlnaW4gLSBUaGUgb3JpZ2luIHRvIGdldCB0aGUgd2ViMyBzaGltIHVzYWdlIHN0YXRlIGZvci5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZCB8IDEgfCAyfSBUaGUgd2ViMyBzaGltIHVzYWdlIHN0YXRlIGZvciB0aGUgZ2l2ZW5cbiAgICogb3JpZ2luLCBvciB1bmRlZmluZWQuXG4gICAqL1xuICBnZXRXZWIzU2hpbVVzYWdlU3RhdGUob3JpZ2luKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS53ZWIzU2hpbVVzYWdlT3JpZ2luc1tvcmlnaW5dO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHdlYjMgc2hpbSB1c2FnZSBzdGF0ZSBmb3IgdGhlIGdpdmVuIG9yaWdpbiB0byBSRUNPUkRFRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpbiAtIFRoZSBvcmlnaW4gdGhlIHRoYXQgdXNlZCB0aGUgd2ViMyBzaGltLlxuICAgKi9cbiAgc2V0V2ViM1NoaW1Vc2FnZVJlY29yZGVkKG9yaWdpbikge1xuICAgIHRoaXMuX3NldFdlYjNTaGltVXNhZ2VTdGF0ZShvcmlnaW4sIFdlYjNTaGltVXNhZ2VBbGVydFN0YXRlcy5yZWNvcmRlZCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgd2ViMyBzaGltIHVzYWdlIHN0YXRlIGZvciB0aGUgZ2l2ZW4gb3JpZ2luIHRvIERJU01JU1NFRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpbiAtIFRoZSBvcmlnaW4gdGhhdCB0aGUgd2ViMyBzaGltIG5vdGlmaWNhdGlvbiB3YXNcbiAgICogZGlzbWlzc2VkIGZvci5cbiAgICovXG4gIHNldFdlYjNTaGltVXNhZ2VBbGVydERpc21pc3NlZChvcmlnaW4pIHtcbiAgICB0aGlzLl9zZXRXZWIzU2hpbVVzYWdlU3RhdGUob3JpZ2luLCBXZWIzU2hpbVVzYWdlQWxlcnRTdGF0ZXMuZGlzbWlzc2VkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3JpZ2luIC0gVGhlIG9yaWdpbiB0byBzZXQgdGhlIHN0YXRlIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHN0YXRlIHZhbHVlIHRvIHNldC5cbiAgICovXG4gIF9zZXRXZWIzU2hpbVVzYWdlU3RhdGUob3JpZ2luLCB2YWx1ZSkge1xuICAgIGxldCB7IHdlYjNTaGltVXNhZ2VPcmlnaW5zIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgd2ViM1NoaW1Vc2FnZU9yaWdpbnMgPSB7XG4gICAgICAuLi53ZWIzU2hpbVVzYWdlT3JpZ2lucyxcbiAgICB9O1xuICAgIHdlYjNTaGltVXNhZ2VPcmlnaW5zW29yaWdpbl0gPSB2YWx1ZTtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgd2ViM1NoaW1Vc2FnZU9yaWdpbnMgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IE9ic2VydmFibGVTdG9yZSB9IGZyb20gJ0BtZXRhbWFzay9vYnMtc3RvcmUnO1xuaW1wb3J0IHsgdjQgYXMgdXVpZCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5pbXBvcnQgeyBBcHByb3ZhbFR5cGUgfSBmcm9tICdAbWV0YW1hc2svY29udHJvbGxlci11dGlscyc7XG5pbXBvcnQgeyBNRVRBTUFTS19DT05UUk9MTEVSX0VWRU5UUyB9IGZyb20gJy4uL21ldGFtYXNrLWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgTUlOVVRFIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy90aW1lJztcbmltcG9ydCB7IEFVVE9fTE9DS19USU1FT1VUX0FMQVJNIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9hbGFybXMnO1xuaW1wb3J0IHsgaXNNYW5pZmVzdFYzIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvbXYzLnV0aWxzJztcbmltcG9ydCB7IGlzQmV0YSB9IGZyb20gJy4uLy4uLy4uL3VpL2hlbHBlcnMvdXRpbHMvYnVpbGQtdHlwZXMnO1xuaW1wb3J0IHtcbiAgRU5WSVJPTk1FTlRfVFlQRV9CQUNLR1JPVU5ELFxuICBQT0xMSU5HX1RPS0VOX0VOVklST05NRU5UX1RZUEVTLFxuICBPUklHSU5fTUVUQU1BU0ssXG59IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvYXBwJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwU3RhdGVDb250cm9sbGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBjb25zdCB7XG4gICAgICBhZGRVbmxvY2tMaXN0ZW5lcixcbiAgICAgIGlzVW5sb2NrZWQsXG4gICAgICBpbml0U3RhdGUsXG4gICAgICBvbkluYWN0aXZlVGltZW91dCxcbiAgICAgIHByZWZlcmVuY2VzU3RvcmUsXG4gICAgICBxckhhcmR3YXJlU3RvcmUsXG4gICAgICBtZXNzZW5nZXIsXG4gICAgfSA9IG9wdHM7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMub25JbmFjdGl2ZVRpbWVvdXQgPSBvbkluYWN0aXZlVGltZW91dCB8fCAoKCkgPT4gdW5kZWZpbmVkKTtcbiAgICB0aGlzLnN0b3JlID0gbmV3IE9ic2VydmFibGVTdG9yZSh7XG4gICAgICB0aW1lb3V0TWludXRlczogMCxcbiAgICAgIGNvbm5lY3RlZFN0YXR1c1BvcG92ZXJIYXNCZWVuU2hvd246IHRydWUsXG4gICAgICBkZWZhdWx0SG9tZUFjdGl2ZVRhYk5hbWU6IG51bGwsXG4gICAgICBicm93c2VyRW52aXJvbm1lbnQ6IHt9LFxuICAgICAgcG9wdXBHYXNQb2xsVG9rZW5zOiBbXSxcbiAgICAgIG5vdGlmaWNhdGlvbkdhc1BvbGxUb2tlbnM6IFtdLFxuICAgICAgZnVsbFNjcmVlbkdhc1BvbGxUb2tlbnM6IFtdLFxuICAgICAgcmVjb3ZlcnlQaHJhc2VSZW1pbmRlckhhc0JlZW5TaG93bjogZmFsc2UsXG4gICAgICByZWNvdmVyeVBocmFzZVJlbWluZGVyTGFzdFNob3duOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgIG91dGRhdGVkQnJvd3Nlcldhcm5pbmdMYXN0U2hvd246IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgbmZ0c0RldGVjdGlvbk5vdGljZURpc21pc3NlZDogZmFsc2UsXG4gICAgICBzaG93VGVzdG5ldE1lc3NhZ2VJbkRyb3Bkb3duOiB0cnVlLFxuICAgICAgc2hvd0JldGFIZWFkZXI6IGlzQmV0YSgpLFxuICAgICAgc2hvd1Byb2R1Y3RUb3VyOiB0cnVlLFxuICAgICAgdHJlem9yTW9kZWw6IG51bGwsXG4gICAgICBjdXJyZW50UG9wdXBJZDogdW5kZWZpbmVkLFxuICAgICAgLi4uaW5pdFN0YXRlLFxuICAgICAgcXJIYXJkd2FyZToge30sXG4gICAgICBuZnRzRHJvcGRvd25TdGF0ZToge30sXG4gICAgICB1c2VkTmV0d29ya3M6IHtcbiAgICAgICAgJzB4MSc6IHRydWUsXG4gICAgICAgICcweDUnOiB0cnVlLFxuICAgICAgICAnMHg1MzknOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIHNlcnZpY2VXb3JrZXJMYXN0QWN0aXZlVGltZTogMCxcbiAgICB9KTtcbiAgICB0aGlzLnRpbWVyID0gbnVsbDtcblxuICAgIHRoaXMuaXNVbmxvY2tlZCA9IGlzVW5sb2NrZWQ7XG4gICAgdGhpcy53YWl0aW5nRm9yVW5sb2NrID0gW107XG4gICAgYWRkVW5sb2NrTGlzdGVuZXIodGhpcy5oYW5kbGVVbmxvY2suYmluZCh0aGlzKSk7XG5cbiAgICBwcmVmZXJlbmNlc1N0b3JlLnN1YnNjcmliZSgoeyBwcmVmZXJlbmNlcyB9KSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgICBpZiAoY3VycmVudFN0YXRlLnRpbWVvdXRNaW51dGVzICE9PSBwcmVmZXJlbmNlcy5hdXRvTG9ja1RpbWVMaW1pdCkge1xuICAgICAgICB0aGlzLl9zZXRJbmFjdGl2ZVRpbWVvdXQocHJlZmVyZW5jZXMuYXV0b0xvY2tUaW1lTGltaXQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcXJIYXJkd2FyZVN0b3JlLnN1YnNjcmliZSgoc3RhdGUpID0+IHtcbiAgICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyBxckhhcmR3YXJlOiBzdGF0ZSB9KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgcHJlZmVyZW5jZXMgfSA9IHByZWZlcmVuY2VzU3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB0aGlzLl9zZXRJbmFjdGl2ZVRpbWVvdXQocHJlZmVyZW5jZXMuYXV0b0xvY2tUaW1lTGltaXQpO1xuXG4gICAgdGhpcy5tZXNzYWdpbmdTeXN0ZW0gPSBtZXNzZW5nZXI7XG4gICAgdGhpcy5fYXBwcm92YWxSZXF1ZXN0SWQgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBleHRlbnNpb24gaXMgdW5sb2NrZWQuXG4gICAqIFRoaXMgUHJvbWlzZSB3aWxsIG5ldmVyIHJlamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBzaG91bGRTaG93VW5sb2NrUmVxdWVzdCAtIFdoZXRoZXIgdGhlIGV4dGVuc2lvbiBub3RpZmljYXRpb25cbiAgICogcG9wdXAgc2hvdWxkIGJlIG9wZW5lZC5cbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGV4dGVuc2lvbiBpc1xuICAgKiB1bmxvY2tlZCwgb3IgaW1tZWRpYXRlbHkgaWYgdGhlIGV4dGVuc2lvbiBpcyBhbHJlYWR5IHVubG9ja2VkLlxuICAgKi9cbiAgZ2V0VW5sb2NrUHJvbWlzZShzaG91bGRTaG93VW5sb2NrUmVxdWVzdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNVbmxvY2tlZCgpKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud2FpdEZvclVubG9jayhyZXNvbHZlLCBzaG91bGRTaG93VW5sb2NrUmVxdWVzdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIFByb21pc2UncyByZXNvbHZlIGZ1bmN0aW9uIHRvIHRoZSB3YWl0aW5nRm9yVW5sb2NrIHF1ZXVlLlxuICAgKiBBbHNvIG9wZW5zIHRoZSBleHRlbnNpb24gcG9wdXAgaWYgc3BlY2lmaWVkLlxuICAgKlxuICAgKiBAcGFyYW0ge1Byb21pc2UucmVzb2x2ZX0gcmVzb2x2ZSAtIEEgUHJvbWlzZSdzIHJlc29sdmUgZnVuY3Rpb24gdGhhdCB3aWxsXG4gICAqIGJlIGNhbGxlZCB3aGVuIHRoZSBleHRlbnNpb24gaXMgdW5sb2NrZWQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkU2hvd1VubG9ja1JlcXVlc3QgLSBXaGV0aGVyIHRoZSBleHRlbnNpb24gbm90aWZpY2F0aW9uXG4gICAqIHBvcHVwIHNob3VsZCBiZSBvcGVuZWQuXG4gICAqL1xuICB3YWl0Rm9yVW5sb2NrKHJlc29sdmUsIHNob3VsZFNob3dVbmxvY2tSZXF1ZXN0KSB7XG4gICAgdGhpcy53YWl0aW5nRm9yVW5sb2NrLnB1c2goeyByZXNvbHZlIH0pO1xuICAgIHRoaXMuZW1pdChNRVRBTUFTS19DT05UUk9MTEVSX0VWRU5UUy5VUERBVEVfQkFER0UpO1xuICAgIGlmIChzaG91bGRTaG93VW5sb2NrUmVxdWVzdCkge1xuICAgICAgdGhpcy5fcmVxdWVzdEFwcHJvdmFsKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERyYWlucyB0aGUgd2FpdGluZ0ZvclVubG9jayBxdWV1ZSwgcmVzb2x2aW5nIGFsbCB0aGUgcmVsYXRlZCBQcm9taXNlcy5cbiAgICovXG4gIGhhbmRsZVVubG9jaygpIHtcbiAgICBpZiAodGhpcy53YWl0aW5nRm9yVW5sb2NrLmxlbmd0aCA+IDApIHtcbiAgICAgIHdoaWxlICh0aGlzLndhaXRpbmdGb3JVbmxvY2subGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLndhaXRpbmdGb3JVbmxvY2suc2hpZnQoKS5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmVtaXQoTUVUQU1BU0tfQ09OVFJPTExFUl9FVkVOVFMuVVBEQVRFX0JBREdFKTtcbiAgICB9XG5cbiAgICB0aGlzLl9hY2NlcHRBcHByb3ZhbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGRlZmF1bHQgaG9tZSB0YWJcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtkZWZhdWx0SG9tZUFjdGl2ZVRhYk5hbWVdIC0gdGhlIHRhYiBuYW1lXG4gICAqL1xuICBzZXREZWZhdWx0SG9tZUFjdGl2ZVRhYk5hbWUoZGVmYXVsdEhvbWVBY3RpdmVUYWJOYW1lKSB7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICBkZWZhdWx0SG9tZUFjdGl2ZVRhYk5hbWUsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVjb3JkIHRoYXQgdGhlIHVzZXIgaGFzIHNlZW4gdGhlIGNvbm5lY3RlZCBzdGF0dXMgaW5mbyBwb3BvdmVyXG4gICAqL1xuICBzZXRDb25uZWN0ZWRTdGF0dXNQb3BvdmVySGFzQmVlblNob3duKCkge1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgY29ubmVjdGVkU3RhdHVzUG9wb3Zlckhhc0JlZW5TaG93bjogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWNvcmQgdGhhdCB0aGUgdXNlciBoYXMgYmVlbiBzaG93biB0aGUgcmVjb3ZlcnkgcGhyYXNlIHJlbWluZGVyLlxuICAgKi9cbiAgc2V0UmVjb3ZlcnlQaHJhc2VSZW1pbmRlckhhc0JlZW5TaG93bigpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIHJlY292ZXJ5UGhyYXNlUmVtaW5kZXJIYXNCZWVuU2hvd246IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVjb3JkIHRoZSB0aW1lc3RhbXAgb2YgdGhlIGxhc3QgdGltZSB0aGUgdXNlciBoYXMgc2VlbiB0aGUgcmVjb3ZlcnkgcGhyYXNlIHJlbWluZGVyXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsYXN0U2hvd24gLSB0aW1lc3RhbXAgd2hlbiB1c2VyIHdhcyBsYXN0IHNob3duIHRoZSByZW1pbmRlci5cbiAgICovXG4gIHNldFJlY292ZXJ5UGhyYXNlUmVtaW5kZXJMYXN0U2hvd24obGFzdFNob3duKSB7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICByZWNvdmVyeVBocmFzZVJlbWluZGVyTGFzdFNob3duOiBsYXN0U2hvd24sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVjb3JkIHRoZSB0aW1lc3RhbXAgb2YgdGhlIGxhc3QgdGltZSB0aGUgdXNlciBoYXMgYWNjZW90ZWQgdGhlIHRlcm1zIG9mIHVzZVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGFzdEFncmVlZCAtIHRpbWVzdGFtcCB3aGVuIHVzZXIgbGFzdCBhY2NlcHRlZCB0aGUgdGVybXMgb2YgdXNlXG4gICAqL1xuICBzZXRUZXJtc09mVXNlTGFzdEFncmVlZChsYXN0QWdyZWVkKSB7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICB0ZXJtc09mVXNlTGFzdEFncmVlZDogbGFzdEFncmVlZCxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWNvcmQgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbGFzdCB0aW1lIHRoZSB1c2VyIGhhcyBzZWVuIHRoZSBvdXRkYXRlZCBicm93c2VyIHdhcm5pbmdcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxhc3RTaG93biAtIFRpbWVzdGFtcCAoaW4gbWlsbGlzZWNvbmRzKSBvZiB3aGVuIHRoZSB1c2VyIHdhcyBsYXN0IHNob3duIHRoZSB3YXJuaW5nLlxuICAgKi9cbiAgc2V0T3V0ZGF0ZWRCcm93c2VyV2FybmluZ0xhc3RTaG93bihsYXN0U2hvd24pIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIG91dGRhdGVkQnJvd3Nlcldhcm5pbmdMYXN0U2hvd246IGxhc3RTaG93bixcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBsYXN0IGFjdGl2ZSB0aW1lIHRvIHRoZSBjdXJyZW50IHRpbWUuXG4gICAqL1xuICBzZXRMYXN0QWN0aXZlVGltZSgpIHtcbiAgICB0aGlzLl9yZXNldFRpbWVyKCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgaW5hY3RpdmUgdGltZW91dCBmb3IgdGhlIGFwcFxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gdGltZW91dE1pbnV0ZXMgLSBUaGUgaW5hY3RpdmUgdGltZW91dCBpbiBtaW51dGVzLlxuICAgKi9cbiAgX3NldEluYWN0aXZlVGltZW91dCh0aW1lb3V0TWludXRlcykge1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgdGltZW91dE1pbnV0ZXMsXG4gICAgfSk7XG5cbiAgICB0aGlzLl9yZXNldFRpbWVyKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBpbnRlcm5hbCBpbmFjdGl2ZSB0aW1lclxuICAgKlxuICAgKiBJZiB0aGUge0Bjb2RlIHRpbWVvdXRNaW51dGVzfSBzdGF0ZSBpcyBmYWxzeSAoaS5lLiwgemVybykgdGhlbiBhIG5ld1xuICAgKiB0aW1lciB3aWxsIG5vdCBiZSBjcmVhdGVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbiAgX3Jlc2V0VGltZXIoKSB7XG4gICAgY29uc3QgeyB0aW1lb3V0TWludXRlcyB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICB9IGVsc2UgaWYgKGlzTWFuaWZlc3RWMykge1xuICAgICAgY2hyb21lLmFsYXJtcy5jbGVhcihBVVRPX0xPQ0tfVElNRU9VVF9BTEFSTSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aW1lb3V0TWludXRlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc01hbmlmZXN0VjMpIHtcbiAgICAgIGNocm9tZS5hbGFybXMuY3JlYXRlKEFVVE9fTE9DS19USU1FT1VUX0FMQVJNLCB7XG4gICAgICAgIGRlbGF5SW5NaW51dGVzOiB0aW1lb3V0TWludXRlcyxcbiAgICAgICAgcGVyaW9kSW5NaW51dGVzOiB0aW1lb3V0TWludXRlcyxcbiAgICAgIH0pO1xuICAgICAgY2hyb21lLmFsYXJtcy5vbkFsYXJtLmFkZExpc3RlbmVyKChhbGFybUluZm8pID0+IHtcbiAgICAgICAgaWYgKGFsYXJtSW5mby5uYW1lID09PSBBVVRPX0xPQ0tfVElNRU9VVF9BTEFSTSkge1xuICAgICAgICAgIHRoaXMub25JbmFjdGl2ZVRpbWVvdXQoKTtcbiAgICAgICAgICBjaHJvbWUuYWxhcm1zLmNsZWFyKEFVVE9fTE9DS19USU1FT1VUX0FMQVJNKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KFxuICAgICAgICAoKSA9PiB0aGlzLm9uSW5hY3RpdmVUaW1lb3V0KCksXG4gICAgICAgIHRpbWVvdXRNaW51dGVzICogTUlOVVRFLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgY3VycmVudCBicm93c2VyIGFuZCBPUyBlbnZpcm9ubWVudFxuICAgKlxuICAgKiBAcGFyYW0gb3NcbiAgICogQHBhcmFtIGJyb3dzZXJcbiAgICovXG4gIHNldEJyb3dzZXJFbnZpcm9ubWVudChvcywgYnJvd3Nlcikge1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyBicm93c2VyRW52aXJvbm1lbnQ6IHsgb3MsIGJyb3dzZXIgfSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgcG9sbGluZ1Rva2VuIGZvciBhIGdpdmVuIGVudmlyb25tZW50VHlwZVxuICAgKlxuICAgKiBAcGFyYW0gcG9sbGluZ1Rva2VuXG4gICAqIEBwYXJhbSBwb2xsaW5nVG9rZW5UeXBlXG4gICAqL1xuICBhZGRQb2xsaW5nVG9rZW4ocG9sbGluZ1Rva2VuLCBwb2xsaW5nVG9rZW5UeXBlKSB7XG4gICAgaWYgKFxuICAgICAgcG9sbGluZ1Rva2VuVHlwZSAhPT1cbiAgICAgIFBPTExJTkdfVE9LRU5fRU5WSVJPTk1FTlRfVFlQRVNbRU5WSVJPTk1FTlRfVFlQRV9CQUNLR1JPVU5EXVxuICAgICkge1xuICAgICAgY29uc3QgcHJldlN0YXRlID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpW3BvbGxpbmdUb2tlblR5cGVdO1xuICAgICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICAgIFtwb2xsaW5nVG9rZW5UeXBlXTogWy4uLnByZXZTdGF0ZSwgcG9sbGluZ1Rva2VuXSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiByZW1vdmVzIGEgcG9sbGluZ1Rva2VuIGZvciBhIGdpdmVuIGVudmlyb25tZW50VHlwZVxuICAgKlxuICAgKiBAcGFyYW0gcG9sbGluZ1Rva2VuXG4gICAqIEBwYXJhbSBwb2xsaW5nVG9rZW5UeXBlXG4gICAqL1xuICByZW1vdmVQb2xsaW5nVG9rZW4ocG9sbGluZ1Rva2VuLCBwb2xsaW5nVG9rZW5UeXBlKSB7XG4gICAgaWYgKFxuICAgICAgcG9sbGluZ1Rva2VuVHlwZSAhPT1cbiAgICAgIFBPTExJTkdfVE9LRU5fRU5WSVJPTk1FTlRfVFlQRVNbRU5WSVJPTk1FTlRfVFlQRV9CQUNLR1JPVU5EXVxuICAgICkge1xuICAgICAgY29uc3QgcHJldlN0YXRlID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpW3BvbGxpbmdUb2tlblR5cGVdO1xuICAgICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICAgIFtwb2xsaW5nVG9rZW5UeXBlXTogcHJldlN0YXRlLmZpbHRlcigodG9rZW4pID0+IHRva2VuICE9PSBwb2xsaW5nVG9rZW4pLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIGNsZWFycyBhbGwgcG9sbGluZ1Rva2Vuc1xuICAgKi9cbiAgY2xlYXJQb2xsaW5nVG9rZW5zKCkge1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgcG9wdXBHYXNQb2xsVG9rZW5zOiBbXSxcbiAgICAgIG5vdGlmaWNhdGlvbkdhc1BvbGxUb2tlbnM6IFtdLFxuICAgICAgZnVsbFNjcmVlbkdhc1BvbGxUb2tlbnM6IFtdLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgd2hldGhlciB0aGUgdGVzdG5ldCBkaXNtaXNzYWwgbGluayBzaG91bGQgYmUgc2hvd24gaW4gdGhlIG5ldHdvcmsgZHJvcGRvd25cbiAgICpcbiAgICogQHBhcmFtIHNob3dUZXN0bmV0TWVzc2FnZUluRHJvcGRvd25cbiAgICovXG4gIHNldFNob3dUZXN0bmV0TWVzc2FnZUluRHJvcGRvd24oc2hvd1Rlc3RuZXRNZXNzYWdlSW5Ecm9wZG93bikge1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyBzaG93VGVzdG5ldE1lc3NhZ2VJbkRyb3Bkb3duIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgd2hldGhlciB0aGUgYmV0YSBub3RpZmljYXRpb24gaGVhZGluZyBvbiB0aGUgaG9tZSBwYWdlXG4gICAqXG4gICAqIEBwYXJhbSBzaG93QmV0YUhlYWRlclxuICAgKi9cbiAgc2V0U2hvd0JldGFIZWFkZXIoc2hvd0JldGFIZWFkZXIpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgc2hvd0JldGFIZWFkZXIgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIHRoZSBwcm9kdWN0IHRvdXIgc2hvdWxkIGJlIHNob3duXG4gICAqXG4gICAqIEBwYXJhbSBzaG93UHJvZHVjdFRvdXJcbiAgICovXG4gIHNldFNob3dQcm9kdWN0VG91cihzaG93UHJvZHVjdFRvdXIpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgc2hvd1Byb2R1Y3RUb3VyIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYSBwcm9wZXJ0eSBpbmRpY2F0aW5nIHRoZSBtb2RlbCBvZiB0aGUgdXNlcidzIFRyZXpvciBoYXJkd2FyZSB3YWxsZXRcbiAgICpcbiAgICogQHBhcmFtIHRyZXpvck1vZGVsIC0gVGhlIFRyZXpvciBtb2RlbC5cbiAgICovXG4gIHNldFRyZXpvck1vZGVsKHRyZXpvck1vZGVsKSB7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IHRyZXpvck1vZGVsIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc2V0dGVyIGZvciB0aGUgYG5mdHNEcm9wZG93blN0YXRlYCBwcm9wZXJ0eVxuICAgKlxuICAgKiBAcGFyYW0gbmZ0c0Ryb3Bkb3duU3RhdGVcbiAgICovXG4gIHVwZGF0ZU5mdERyb3BEb3duU3RhdGUobmZ0c0Ryb3Bkb3duU3RhdGUpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIG5mdHNEcm9wZG93blN0YXRlLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGFycmF5IG9mIHRoZSBmaXJzdCB0aW1lIHVzZWQgbmV0d29ya3NcbiAgICpcbiAgICogQHBhcmFtIGNoYWluSWRcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBzZXRGaXJzdFRpbWVVc2VkTmV0d29yayhjaGFpbklkKSB7XG4gICAgY29uc3QgY3VycmVudFN0YXRlID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IHsgdXNlZE5ldHdvcmtzIH0gPSBjdXJyZW50U3RhdGU7XG4gICAgdXNlZE5ldHdvcmtzW2NoYWluSWRdID0gdHJ1ZTtcblxuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyB1c2VkTmV0d29ya3MgfSk7XG4gIH1cblxuICAvKipcbiAgICogQSBzZXR0ZXIgZm9yIHRoZSBjdXJyZW50UG9wdXBJZCB3aGljaCBpbmRpY2F0ZXMgdGhlIGlkIG9mIHBvcHVwIHdpbmRvdyB0aGF0J3MgY3VycmVudGx5IGFjdGl2ZVxuICAgKlxuICAgKiBAcGFyYW0gY3VycmVudFBvcHVwSWRcbiAgICovXG4gIHNldEN1cnJlbnRQb3B1cElkKGN1cnJlbnRQb3B1cElkKSB7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICBjdXJyZW50UG9wdXBJZCxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGdldHRlciB0byByZXRyaWV2ZSBjdXJyZW50UG9wdXBJZCBzYXZlZCBpbiB0aGUgYXBwU3RhdGVcbiAgICovXG4gIGdldEN1cnJlbnRQb3B1cElkKCkge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLmdldFN0YXRlKCkuY3VycmVudFBvcHVwSWQ7XG4gIH1cblxuICBzZXRTZXJ2aWNlV29ya2VyTGFzdEFjdGl2ZVRpbWUoc2VydmljZVdvcmtlckxhc3RBY3RpdmVUaW1lKSB7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICBzZXJ2aWNlV29ya2VyTGFzdEFjdGl2ZVRpbWUsXG4gICAgfSk7XG4gIH1cblxuICBfcmVxdWVzdEFwcHJvdmFsKCkge1xuICAgIHRoaXMuX2FwcHJvdmFsUmVxdWVzdElkID0gdXVpZCgpO1xuXG4gICAgdGhpcy5tZXNzYWdpbmdTeXN0ZW1cbiAgICAgIC5jYWxsKFxuICAgICAgICAnQXBwcm92YWxDb250cm9sbGVyOmFkZFJlcXVlc3QnLFxuICAgICAgICB7XG4gICAgICAgICAgaWQ6IHRoaXMuX2FwcHJvdmFsUmVxdWVzdElkLFxuICAgICAgICAgIG9yaWdpbjogT1JJR0lOX01FVEFNQVNLLFxuICAgICAgICAgIHR5cGU6IEFwcHJvdmFsVHlwZS5VbmxvY2ssXG4gICAgICAgIH0sXG4gICAgICAgIHRydWUsXG4gICAgICApXG4gICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAvLyBJbnRlbnRpb25hbGx5IGlnbm9yZWQgYXMgcHJvbWlzZSBub3QgY3VycmVudGx5IHVzZWRcbiAgICAgIH0pO1xuICB9XG5cbiAgX2FjY2VwdEFwcHJvdmFsKCkge1xuICAgIGlmICghdGhpcy5fYXBwcm92YWxSZXF1ZXN0SWQpIHtcbiAgICAgIGxvZy5lcnJvcignQXR0ZW1wdGVkIHRvIGFjY2VwdCBtaXNzaW5nIHVubG9jayBhcHByb3ZhbCByZXF1ZXN0Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICB0aGlzLm1lc3NhZ2luZ1N5c3RlbS5jYWxsKFxuICAgICAgICAnQXBwcm92YWxDb250cm9sbGVyOmFjY2VwdFJlcXVlc3QnLFxuICAgICAgICB0aGlzLl9hcHByb3ZhbFJlcXVlc3RJZCxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZy5lcnJvcignRmFpbGVkIHRvIGFjY2VwdCB0cmFuc2FjdGlvbiBhcHByb3ZhbCByZXF1ZXN0JywgZXJyb3IpO1xuICAgIH1cblxuICAgIHRoaXMuX2FwcHJvdmFsUmVxdWVzdElkID0gbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgcHJlcGVuZFplcm8gfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9zdHJpbmctdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYWNrdXBDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgY29uc3Qge1xuICAgICAgcHJlZmVyZW5jZXNDb250cm9sbGVyLFxuICAgICAgYWRkcmVzc0Jvb2tDb250cm9sbGVyLFxuICAgICAgbmV0d29ya0NvbnRyb2xsZXIsXG4gICAgICB0cmFja01ldGFNZXRyaWNzRXZlbnQsXG4gICAgfSA9IG9wdHM7XG5cbiAgICB0aGlzLnByZWZlcmVuY2VzQ29udHJvbGxlciA9IHByZWZlcmVuY2VzQ29udHJvbGxlcjtcbiAgICB0aGlzLmFkZHJlc3NCb29rQ29udHJvbGxlciA9IGFkZHJlc3NCb29rQ29udHJvbGxlcjtcbiAgICB0aGlzLm5ldHdvcmtDb250cm9sbGVyID0gbmV0d29ya0NvbnRyb2xsZXI7XG4gICAgdGhpcy5fdHJhY2tNZXRhTWV0cmljc0V2ZW50ID0gdHJhY2tNZXRhTWV0cmljc0V2ZW50O1xuICB9XG5cbiAgYXN5bmMgcmVzdG9yZVVzZXJEYXRhKGpzb25TdHJpbmcpIHtcbiAgICBjb25zdCBleGlzdGluZ1ByZWZlcmVuY2VzID0gdGhpcy5wcmVmZXJlbmNlc0NvbnRyb2xsZXIuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCB7IHByZWZlcmVuY2VzLCBhZGRyZXNzQm9vaywgbmV0d29yayB9ID0gSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcbiAgICBpZiAocHJlZmVyZW5jZXMpIHtcbiAgICAgIHByZWZlcmVuY2VzLmlkZW50aXRpZXMgPSBleGlzdGluZ1ByZWZlcmVuY2VzLmlkZW50aXRpZXM7XG4gICAgICBwcmVmZXJlbmNlcy5sb3N0SWRlbnRpdGllcyA9IGV4aXN0aW5nUHJlZmVyZW5jZXMubG9zdElkZW50aXRpZXM7XG4gICAgICBwcmVmZXJlbmNlcy5zZWxlY3RlZEFkZHJlc3MgPSBleGlzdGluZ1ByZWZlcmVuY2VzLnNlbGVjdGVkQWRkcmVzcztcblxuICAgICAgdGhpcy5wcmVmZXJlbmNlc0NvbnRyb2xsZXIuc3RvcmUudXBkYXRlU3RhdGUocHJlZmVyZW5jZXMpO1xuICAgIH1cblxuICAgIGlmIChhZGRyZXNzQm9vaykge1xuICAgICAgdGhpcy5hZGRyZXNzQm9va0NvbnRyb2xsZXIudXBkYXRlKGFkZHJlc3NCb29rLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAobmV0d29yaykge1xuICAgICAgdGhpcy5uZXR3b3JrQ29udHJvbGxlci5zdG9yZS51cGRhdGVTdGF0ZShuZXR3b3JrKTtcbiAgICB9XG5cbiAgICBpZiAocHJlZmVyZW5jZXMgfHwgYWRkcmVzc0Jvb2sgfHwgbmV0d29yaykge1xuICAgICAgdGhpcy5fdHJhY2tNZXRhTWV0cmljc0V2ZW50KHtcbiAgICAgICAgZXZlbnQ6ICdVc2VyIERhdGEgSW1wb3J0ZWQnLFxuICAgICAgICBjYXRlZ29yeTogJ0JhY2t1cCcsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBiYWNrdXBVc2VyRGF0YSgpIHtcbiAgICBjb25zdCB1c2VyRGF0YSA9IHtcbiAgICAgIHByZWZlcmVuY2VzOiB7IC4uLnRoaXMucHJlZmVyZW5jZXNDb250cm9sbGVyLnN0b3JlLmdldFN0YXRlKCkgfSxcbiAgICAgIGFkZHJlc3NCb29rOiB7IC4uLnRoaXMuYWRkcmVzc0Jvb2tDb250cm9sbGVyLnN0YXRlIH0sXG4gICAgICBuZXR3b3JrOiB7XG4gICAgICAgIG5ldHdvcmtDb25maWd1cmF0aW9uczpcbiAgICAgICAgICB0aGlzLm5ldHdvcmtDb250cm9sbGVyLnN0b3JlLmdldFN0YXRlKCkubmV0d29ya0NvbmZpZ3VyYXRpb25zLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogV2UgY2FuIHJlbW92ZSB0aGVzZSBwcm9wZXJ0aWVzIHNpbmNlIHdlIHdpbGwgd29uJ3QgYmUgcmVzdG9yaW5nIGlkZW50aXRpZXMgZnJvbSBiYWNrdXBcbiAgICAgKi9cbiAgICBkZWxldGUgdXNlckRhdGEucHJlZmVyZW5jZXMuaWRlbnRpdGllcztcbiAgICBkZWxldGUgdXNlckRhdGEucHJlZmVyZW5jZXMubG9zdElkZW50aXRpZXM7XG4gICAgZGVsZXRlIHVzZXJEYXRhLnByZWZlcmVuY2VzLnNlbGVjdGVkQWRkcmVzcztcblxuICAgIGNvbnN0IHJlc3VsdCA9IEpTT04uc3RyaW5naWZ5KHVzZXJEYXRhKTtcblxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuXG4gICAgY29uc3QgcHJlZml4WmVybyA9IChudW0pID0+IHByZXBlbmRaZXJvKG51bSwgMik7XG5cbiAgICAvKlxuICAgICAqIHVzZXJEYXRhLllZWVlfTU1fRERfSEhfbW1fU1MgZS5nIHVzZXJEYXRhLjIwMjJfMDFfMTNfMTNfNDVfNTZcbiAgICAgKiAqL1xuICAgIGNvbnN0IHVzZXJEYXRhRmlsZU5hbWUgPSBgTWV0YU1hc2tVc2VyRGF0YS4ke2RhdGUuZ2V0RnVsbFllYXIoKX1fJHtwcmVmaXhaZXJvKFxuICAgICAgZGF0ZS5nZXRNb250aCgpICsgMSxcbiAgICApfV8ke3ByZWZpeFplcm8oZGF0ZS5nZXREYXkoKSl9XyR7cHJlZml4WmVybyhkYXRlLmdldEhvdXJzKCkpfV8ke3ByZWZpeFplcm8oXG4gICAgICBkYXRlLmdldE1pbnV0ZXMoKSxcbiAgICApfV8ke3ByZWZpeFplcm8oZGF0ZS5nZXREYXkoKSl9Lmpzb25gO1xuXG4gICAgcmV0dXJuIHsgZmlsZU5hbWU6IHVzZXJEYXRhRmlsZU5hbWUsIGRhdGE6IHJlc3VsdCB9O1xuICB9XG59XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlU3RvcmUgfSBmcm9tICdAbWV0YW1hc2svb2JzLXN0b3JlJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBDYWNoZWRCYWxhbmNlc09wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBhY2NvdW50VHJhY2tlciBBbiB7QGNvZGUgQWNjb3VudFRyYWNrZXJ9IHJlZmVyZW5jZVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0Q3VycmVudENoYWluSWQgQSBmdW5jdGlvbiB0byBnZXQgdGhlIGN1cnJlbnQgY2hhaW4gaWRcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBpbml0U3RhdGUgVGhlIGluaXRpYWwgY29udHJvbGxlciBzdGF0ZVxuICovXG5cbi8qKlxuICogQmFja2dyb3VuZCBjb250cm9sbGVyIHJlc3BvbnNpYmxlIGZvciBtYWludGFpbmluZ1xuICogYSBjYWNoZSBvZiBhY2NvdW50IGJhbGFuY2VzIGluIGxvY2FsIHN0b3JhZ2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FjaGVkQmFsYW5jZXNDb250cm9sbGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgY29udHJvbGxlciBpbnN0YW5jZVxuICAgKlxuICAgKiBAcGFyYW0ge0NhY2hlZEJhbGFuY2VzT3B0aW9uc30gW29wdHNdIC0gQ29udHJvbGxlciBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IHsgYWNjb3VudFRyYWNrZXIsIGdldEN1cnJlbnRDaGFpbklkIH0gPSBvcHRzO1xuXG4gICAgdGhpcy5hY2NvdW50VHJhY2tlciA9IGFjY291bnRUcmFja2VyO1xuICAgIHRoaXMuZ2V0Q3VycmVudENoYWluSWQgPSBnZXRDdXJyZW50Q2hhaW5JZDtcblxuICAgIGNvbnN0IGluaXRTdGF0ZSA9IHsgY2FjaGVkQmFsYW5jZXM6IHt9LCAuLi5vcHRzLmluaXRTdGF0ZSB9O1xuICAgIHRoaXMuc3RvcmUgPSBuZXcgT2JzZXJ2YWJsZVN0b3JlKGluaXRTdGF0ZSk7XG5cbiAgICB0aGlzLl9yZWdpc3RlclVwZGF0ZXMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBjYWNoZWRCYWxhbmNlcyBwcm9wZXJ0eSBmb3IgdGhlIGN1cnJlbnQgY2hhaW4uIENhY2hlZCBiYWxhbmNlcyB3aWxsIGJlIHVwZGF0ZWQgdG8gdGhvc2UgaW4gdGhlIHBhc3NlZCBhY2NvdW50c1xuICAgKiBpZiBiYWxhbmNlcyBpbiB0aGUgcGFzc2VkIGFjY291bnRzIGFyZSB0cnV0aHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvYmogLSBUaGUgdGhlIHJlY2VudGx5IHVwZGF0ZWQgYWNjb3VudHMgb2JqZWN0IGZvciB0aGUgY3VycmVudCBjaGFpblxuICAgKiBAcGFyYW0gb2JqLmFjY291bnRzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgYXN5bmMgdXBkYXRlQ2FjaGVkQmFsYW5jZXMoeyBhY2NvdW50cyB9KSB7XG4gICAgY29uc3QgY2hhaW5JZCA9IHRoaXMuZ2V0Q3VycmVudENoYWluSWQoKTtcbiAgICBjb25zdCBiYWxhbmNlc1RvQ2FjaGUgPSBhd2FpdCB0aGlzLl9nZW5lcmF0ZUJhbGFuY2VzVG9DYWNoZShcbiAgICAgIGFjY291bnRzLFxuICAgICAgY2hhaW5JZCxcbiAgICApO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgY2FjaGVkQmFsYW5jZXM6IGJhbGFuY2VzVG9DYWNoZSxcbiAgICB9KTtcbiAgfVxuXG4gIF9nZW5lcmF0ZUJhbGFuY2VzVG9DYWNoZShuZXdBY2NvdW50cywgY2hhaW5JZCkge1xuICAgIGNvbnN0IHsgY2FjaGVkQmFsYW5jZXMgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBjdXJyZW50Q2hhaW5CYWxhbmNlc1RvQ2FjaGUgPSB7IC4uLmNhY2hlZEJhbGFuY2VzW2NoYWluSWRdIH07XG5cbiAgICBPYmplY3Qua2V5cyhuZXdBY2NvdW50cykuZm9yRWFjaCgoYWNjb3VudElEKSA9PiB7XG4gICAgICBjb25zdCBhY2NvdW50ID0gbmV3QWNjb3VudHNbYWNjb3VudElEXTtcblxuICAgICAgaWYgKGFjY291bnQuYmFsYW5jZSkge1xuICAgICAgICBjdXJyZW50Q2hhaW5CYWxhbmNlc1RvQ2FjaGVbYWNjb3VudElEXSA9IGFjY291bnQuYmFsYW5jZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBiYWxhbmNlc1RvQ2FjaGUgPSB7XG4gICAgICAuLi5jYWNoZWRCYWxhbmNlcyxcbiAgICAgIFtjaGFpbklkXTogY3VycmVudENoYWluQmFsYW5jZXNUb0NhY2hlLFxuICAgIH07XG5cbiAgICByZXR1cm4gYmFsYW5jZXNUb0NhY2hlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgY2FjaGVkQmFsYW5jZXNcbiAgICovXG5cbiAgY2xlYXJDYWNoZWRCYWxhbmNlcygpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgY2FjaGVkQmFsYW5jZXM6IHt9IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdXAgbGlzdGVuZXJzIGFuZCBzdWJzY3JpcHRpb25zIHdoaWNoIHNob3VsZCB0cmlnZ2VyIGFuIHVwZGF0ZSBvZiBjYWNoZWQgYmFsYW5jZXMuIFRoZXNlIHVwZGF0ZXMgd2lsbFxuICAgKiBoYXBwZW4gd2hlbiB0aGUgY3VycmVudCBhY2NvdW50IGNoYW5nZXMuIFdoaWNoIGhhcHBlbnMgb24gYmxvY2sgdXBkYXRlcywgYXMgd2VsbCBhcyBvbiBuZXR3b3JrIGFuZCBhY2NvdW50XG4gICAqIHNlbGVjdGlvbnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVnaXN0ZXJVcGRhdGVzKCkge1xuICAgIGNvbnN0IHVwZGF0ZSA9IHRoaXMudXBkYXRlQ2FjaGVkQmFsYW5jZXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLmFjY291bnRUcmFja2VyLnN0b3JlLnN1YnNjcmliZSh1cGRhdGUpO1xuICB9XG59XG4iLCJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgbG9nIGZyb20gJ2xvZ2xldmVsJztcbmltcG9ydCB7XG4gIERlY3J5cHRNZXNzYWdlTWFuYWdlcixcbiAgRGVjcnlwdE1lc3NhZ2VQYXJhbXMsXG4gIERlY3J5cHRNZXNzYWdlUGFyYW1zTWV0YW1hc2ssXG59IGZyb20gJ0BtZXRhbWFzay9tZXNzYWdlLW1hbmFnZXInO1xuaW1wb3J0IHsgS2V5cmluZ0NvbnRyb2xsZXIgfSBmcm9tICdAbWV0YW1hc2svZXRoLWtleXJpbmctY29udHJvbGxlcic7XG5pbXBvcnQge1xuICBBYnN0cmFjdE1lc3NhZ2UsXG4gIEFic3RyYWN0TWVzc2FnZU1hbmFnZXIsXG4gIEFic3RyYWN0TWVzc2FnZVBhcmFtcyxcbiAgQWJzdHJhY3RNZXNzYWdlUGFyYW1zTWV0YW1hc2ssXG4gIE1lc3NhZ2VNYW5hZ2VyU3RhdGUsXG4gIE9yaWdpbmFsUmVxdWVzdCxcbn0gZnJvbSAnQG1ldGFtYXNrL21lc3NhZ2UtbWFuYWdlci9kaXN0L0Fic3RyYWN0TWVzc2FnZU1hbmFnZXInO1xuaW1wb3J0IHtcbiAgQmFzZUNvbnRyb2xsZXJWMixcbiAgUmVzdHJpY3RlZENvbnRyb2xsZXJNZXNzZW5nZXIsXG59IGZyb20gJ0BtZXRhbWFzay9iYXNlLWNvbnRyb2xsZXInO1xuaW1wb3J0IHtcbiAgQWNjZXB0UmVxdWVzdCxcbiAgQWRkQXBwcm92YWxSZXF1ZXN0LFxuICBSZWplY3RSZXF1ZXN0LFxufSBmcm9tICdAbWV0YW1hc2svYXBwcm92YWwtY29udHJvbGxlcic7XG5pbXBvcnQgeyBBcHByb3ZhbFR5cGUsIE9SSUdJTl9NRVRBTUFTSyB9IGZyb20gJ0BtZXRhbWFzay9jb250cm9sbGVyLXV0aWxzJztcbmltcG9ydCB7IFBhdGNoIH0gZnJvbSAnaW1tZXInO1xuaW1wb3J0IHsgTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5IH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9tZXRhbWV0cmljcyc7XG5pbXBvcnQgeyBzdHJpcEhleFByZWZpeCB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL2hleHN0cmluZy11dGlscyc7XG5cbmNvbnN0IGNvbnRyb2xsZXJOYW1lID0gJ0RlY3J5cHRNZXNzYWdlQ29udHJvbGxlcic7XG5cbmNvbnN0IHN0YXRlTWV0YWRhdGEgPSB7XG4gIHVuYXBwcm92ZWREZWNyeXB0TXNnczogeyBwZXJzaXN0OiBmYWxzZSwgYW5vbnltb3VzOiBmYWxzZSB9LFxuICB1bmFwcHJvdmVkRGVjcnlwdE1zZ0NvdW50OiB7IHBlcnNpc3Q6IGZhbHNlLCBhbm9ueW1vdXM6IGZhbHNlIH0sXG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RGVmYXVsdFN0YXRlID0gKCkgPT4gKHtcbiAgdW5hcHByb3ZlZERlY3J5cHRNc2dzOiB7fSxcbiAgdW5hcHByb3ZlZERlY3J5cHRNc2dDb3VudDogMCxcbn0pO1xuXG5leHBvcnQgdHlwZSBDb3JlTWVzc2FnZSA9IEFic3RyYWN0TWVzc2FnZSAmIHtcbiAgbWVzc2FnZVBhcmFtczogQWJzdHJhY3RNZXNzYWdlUGFyYW1zO1xufTtcblxuZXhwb3J0IHR5cGUgU3RhdGVNZXNzYWdlID0gUmVxdWlyZWQ8XG4gIE9taXQ8QWJzdHJhY3RNZXNzYWdlLCAnc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlJz5cbj47XG5cbmV4cG9ydCB0eXBlIERlY3J5cHRNZXNzYWdlQ29udHJvbGxlclN0YXRlID0ge1xuICB1bmFwcHJvdmVkRGVjcnlwdE1zZ3M6IFJlY29yZDxzdHJpbmcsIFN0YXRlTWVzc2FnZT47XG4gIHVuYXBwcm92ZWREZWNyeXB0TXNnQ291bnQ6IG51bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIEdldERlY3J5cHRNZXNzYWdlU3RhdGUgPSB7XG4gIHR5cGU6IGAke3R5cGVvZiBjb250cm9sbGVyTmFtZX06Z2V0U3RhdGVgO1xuICBoYW5kbGVyOiAoKSA9PiBEZWNyeXB0TWVzc2FnZUNvbnRyb2xsZXJTdGF0ZTtcbn07XG5cbmV4cG9ydCB0eXBlIERlY3J5cHRNZXNzYWdlU3RhdGVDaGFuZ2UgPSB7XG4gIHR5cGU6IGAke3R5cGVvZiBjb250cm9sbGVyTmFtZX06c3RhdGVDaGFuZ2VgO1xuICBwYXlsb2FkOiBbRGVjcnlwdE1lc3NhZ2VDb250cm9sbGVyU3RhdGUsIFBhdGNoW11dO1xufTtcblxuZXhwb3J0IHR5cGUgRGVjcnlwdE1lc3NhZ2VDb250cm9sbGVyQWN0aW9ucyA9IEdldERlY3J5cHRNZXNzYWdlU3RhdGU7XG5cbmV4cG9ydCB0eXBlIERlY3J5cHRNZXNzYWdlQ29udHJvbGxlckV2ZW50cyA9IERlY3J5cHRNZXNzYWdlU3RhdGVDaGFuZ2U7XG5cbnR5cGUgQWxsb3dlZEFjdGlvbnMgPSBBZGRBcHByb3ZhbFJlcXVlc3QgfCBBY2NlcHRSZXF1ZXN0IHwgUmVqZWN0UmVxdWVzdDtcblxuZXhwb3J0IHR5cGUgRGVjcnlwdE1lc3NhZ2VDb250cm9sbGVyTWVzc2VuZ2VyID0gUmVzdHJpY3RlZENvbnRyb2xsZXJNZXNzZW5nZXI8XG4gIHR5cGVvZiBjb250cm9sbGVyTmFtZSxcbiAgRGVjcnlwdE1lc3NhZ2VDb250cm9sbGVyQWN0aW9ucyB8IEFsbG93ZWRBY3Rpb25zLFxuICBEZWNyeXB0TWVzc2FnZUNvbnRyb2xsZXJFdmVudHMsXG4gIEFsbG93ZWRBY3Rpb25zWyd0eXBlJ10sXG4gIG5ldmVyXG4+O1xuXG5leHBvcnQgdHlwZSBEZWNyeXB0TWVzc2FnZUNvbnRyb2xsZXJPcHRpb25zID0ge1xuICBnZXRTdGF0ZTogKCkgPT4gYW55O1xuICBrZXlyaW5nQ29udHJvbGxlcjogS2V5cmluZ0NvbnRyb2xsZXI7XG4gIG1lc3NlbmdlcjogRGVjcnlwdE1lc3NhZ2VDb250cm9sbGVyTWVzc2VuZ2VyO1xuICBtZXRyaWNzRXZlbnQ6IChwYXlsb2FkOiBhbnksIG9wdGlvbnM/OiBhbnkpID0+IHZvaWQ7XG59O1xuXG4vKipcbiAqIENvbnRyb2xsZXIgZm9yIGRlY3J5cHQgc2lnbmluZyByZXF1ZXN0cyByZXF1aXJpbmcgdXNlciBhcHByb3ZhbC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVjcnlwdE1lc3NhZ2VDb250cm9sbGVyIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJWMjxcbiAgdHlwZW9mIGNvbnRyb2xsZXJOYW1lLFxuICBEZWNyeXB0TWVzc2FnZUNvbnRyb2xsZXJTdGF0ZSxcbiAgRGVjcnlwdE1lc3NhZ2VDb250cm9sbGVyTWVzc2VuZ2VyXG4+IHtcbiAgaHViOiBFdmVudEVtaXR0ZXI7XG5cbiAgcHJpdmF0ZSBfZ2V0U3RhdGU6ICgpID0+IGFueTtcblxuICBwcml2YXRlIF9rZXlyaW5nQ29udHJvbGxlcjogS2V5cmluZ0NvbnRyb2xsZXI7XG5cbiAgcHJpdmF0ZSBfbWV0cmljc0V2ZW50OiAocGF5bG9hZDogYW55LCBvcHRpb25zPzogYW55KSA9PiB2b2lkO1xuXG4gIHByaXZhdGUgX2RlY3J5cHRNZXNzYWdlTWFuYWdlcjogRGVjcnlwdE1lc3NhZ2VNYW5hZ2VyO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBEZWNyeXB0TWVzc2FnZSBjb250cm9sbGVyLlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBjb250cm9sbGVyIG9wdGlvbnMuXG4gICAqIEBwYXJhbSBvcHRpb25zLmdldFN0YXRlIC0gQ2FsbGJhY2sgdG8gcmV0cmlldmUgYWxsIHVzZXIgc3RhdGUuXG4gICAqIEBwYXJhbSBvcHRpb25zLmtleXJpbmdDb250cm9sbGVyIC0gQW4gaW5zdGFuY2Ugb2YgYSBrZXlyaW5nIGNvbnRyb2xsZXIgdXNlZCB0byBkZWNyeXB0IG1lc3NhZ2VcbiAgICogQHBhcmFtIG9wdGlvbnMubWVzc2VuZ2VyIC0gQSByZWZlcmVuY2UgdG8gdGhlIG1lc3NhZ2luZyBzeXN0ZW0uXG4gICAqIEBwYXJhbSBvcHRpb25zLm1ldHJpY3NFdmVudCAtIEEgZnVuY3Rpb24gZm9yIGVtaXR0aW5nIGEgbWV0cmljIGV2ZW50LlxuICAgKi9cbiAgY29uc3RydWN0b3Ioe1xuICAgIGdldFN0YXRlLFxuICAgIGtleXJpbmdDb250cm9sbGVyLFxuICAgIG1ldHJpY3NFdmVudCxcbiAgICBtZXNzZW5nZXIsXG4gIH06IERlY3J5cHRNZXNzYWdlQ29udHJvbGxlck9wdGlvbnMpIHtcbiAgICBzdXBlcih7XG4gICAgICBtZXRhZGF0YTogc3RhdGVNZXRhZGF0YSxcbiAgICAgIG1lc3NlbmdlcixcbiAgICAgIG5hbWU6IGNvbnRyb2xsZXJOYW1lLFxuICAgICAgc3RhdGU6IGdldERlZmF1bHRTdGF0ZSgpLFxuICAgIH0pO1xuICAgIHRoaXMuX2dldFN0YXRlID0gZ2V0U3RhdGU7XG4gICAgdGhpcy5fa2V5cmluZ0NvbnRyb2xsZXIgPSBrZXlyaW5nQ29udHJvbGxlcjtcbiAgICB0aGlzLl9tZXRyaWNzRXZlbnQgPSBtZXRyaWNzRXZlbnQ7XG5cbiAgICB0aGlzLmh1YiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHRoaXMuX2RlY3J5cHRNZXNzYWdlTWFuYWdlciA9IG5ldyBEZWNyeXB0TWVzc2FnZU1hbmFnZXIoXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBbJ2RlY3J5cHRlZCddLFxuICAgICk7XG5cbiAgICB0aGlzLl9kZWNyeXB0TWVzc2FnZU1hbmFnZXIuaHViLm9uKCd1cGRhdGVCYWRnZScsICgpID0+IHtcbiAgICAgIHRoaXMuaHViLmVtaXQoJ3VwZGF0ZUJhZGdlJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9kZWNyeXB0TWVzc2FnZU1hbmFnZXIuaHViLm9uKFxuICAgICAgJ3VuYXBwcm92ZWRNZXNzYWdlJyxcbiAgICAgIChtZXNzYWdlUGFyYW1zOiBBYnN0cmFjdE1lc3NhZ2VQYXJhbXNNZXRhbWFzaykgPT4ge1xuICAgICAgICB0aGlzLl9yZXF1ZXN0QXBwcm92YWwobWVzc2FnZVBhcmFtcyk7XG4gICAgICB9LFxuICAgICk7XG5cbiAgICB0aGlzLl9zdWJzY3JpYmVUb01lc3NhZ2VTdGF0ZShcbiAgICAgIHRoaXMuX2RlY3J5cHRNZXNzYWdlTWFuYWdlcixcbiAgICAgIChzdGF0ZSwgbmV3TWVzc2FnZXMsIG1lc3NhZ2VDb3VudCkgPT4ge1xuICAgICAgICBzdGF0ZS51bmFwcHJvdmVkRGVjcnlwdE1zZ3MgPSBuZXdNZXNzYWdlcztcbiAgICAgICAgc3RhdGUudW5hcHByb3ZlZERlY3J5cHRNc2dDb3VudCA9IG1lc3NhZ2VDb3VudDtcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGdldHRlciBmb3IgdGhlIG51bWJlciBvZiAndW5hcHByb3ZlZCcgTWVzc2FnZXMgaW4gdGhlIERlY3J5cHRNZXNzYWdlTWFuYWdlci5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiAndW5hcHByb3ZlZCcgTWVzc2FnZXMgaW4gdGhlIERlY3J5cHRNZXNzYWdlTWFuYWdlci5cbiAgICovXG4gIGdldCB1bmFwcHJvdmVkRGVjcnlwdE1zZ0NvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2RlY3J5cHRNZXNzYWdlTWFuYWdlci5nZXRVbmFwcHJvdmVkTWVzc2FnZXNDb3VudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSBjb250cm9sbGVyIHN0YXRlIHRvIHRoZSBpbml0aWFsIHN0YXRlLlxuICAgKi9cbiAgcmVzZXRTdGF0ZSgpIHtcbiAgICB0aGlzLnVwZGF0ZSgoKSA9PiBnZXREZWZhdWx0U3RhdGUoKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIGFsbCB1bmFwcHJvdmVkIG1lc3NhZ2VzIGZyb20gbWVtb3J5LlxuICAgKi9cbiAgY2xlYXJVbmFwcHJvdmVkKCkge1xuICAgIHRoaXMuX2RlY3J5cHRNZXNzYWdlTWFuYWdlci51cGRhdGUoe1xuICAgICAgdW5hcHByb3ZlZE1lc3NhZ2VzOiB7fSxcbiAgICAgIHVuYXBwcm92ZWRNZXNzYWdlc0NvdW50OiAwLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGEgZGFwcCB1c2VzIHRoZSBldGhfZGVjcnlwdCBtZXRob2RcbiAgICpcbiAgICogQHBhcmFtIG1lc3NhZ2VQYXJhbXMgLSBUaGUgcGFyYW1zIHBhc3NlZCB0byBldGhfZGVjcnlwdC5cbiAgICogQHBhcmFtIHJlcSAtIFRoZSBvcmlnaW5hbCByZXF1ZXN0LCBjb250YWluaW5nIHRoZSBvcmlnaW4uXG4gICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSByYXcgZGF0YSBvZiB0aGUgc2lnbmF0dXJlIHJlcXVlc3QuXG4gICAqL1xuICBhc3luYyBuZXdSZXF1ZXN0RGVjcnlwdE1lc3NhZ2UoXG4gICAgbWVzc2FnZVBhcmFtczogRGVjcnlwdE1lc3NhZ2VQYXJhbXMsXG4gICAgcmVxOiBPcmlnaW5hbFJlcXVlc3QsXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX2RlY3J5cHRNZXNzYWdlTWFuYWdlci5hZGRVbmFwcHJvdmVkTWVzc2FnZUFzeW5jKFxuICAgICAgbWVzc2FnZVBhcmFtcyxcbiAgICAgIHJlcSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpZ25pZmllcyBhIHVzZXIncyBhcHByb3ZhbCB0byBkZWNyeXB0IGEgbWVzc2FnZSBpbiBxdWV1ZS5cbiAgICogVHJpZ2dlcnMgZGVjcnlwdCwgYW5kIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBmcm9tIG5ld1Vuc2lnbmVkRGVjcnlwdE1lc3NhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSBtZXNzYWdlUGFyYW1zIC0gVGhlIHBhcmFtcyBvZiB0aGUgbWVzc2FnZSB0byBkZWNyeXB0ICYgcmV0dXJuIHRvIHRoZSBEYXBwLlxuICAgKiBAcmV0dXJucyBBIGZ1bGwgc3RhdGUgdXBkYXRlLlxuICAgKi9cbiAgYXN5bmMgZGVjcnlwdE1lc3NhZ2UobWVzc2FnZVBhcmFtczogRGVjcnlwdE1lc3NhZ2VQYXJhbXNNZXRhbWFzaykge1xuICAgIGNvbnN0IG1lc3NhZ2VJZCA9IG1lc3NhZ2VQYXJhbXMubWV0YW1hc2tJZCBhcyBzdHJpbmc7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNsZWFuTWVzc2FnZVBhcmFtcyA9XG4gICAgICAgIGF3YWl0IHRoaXMuX2RlY3J5cHRNZXNzYWdlTWFuYWdlci5hcHByb3ZlTWVzc2FnZShtZXNzYWdlUGFyYW1zKTtcblxuICAgICAgY2xlYW5NZXNzYWdlUGFyYW1zLmRhdGEgPSB0aGlzLl9wYXJzZU1lc3NhZ2VEYXRhKGNsZWFuTWVzc2FnZVBhcmFtcy5kYXRhKTtcbiAgICAgIGNvbnN0IHJhd01lc3NhZ2UgPSBhd2FpdCB0aGlzLl9rZXlyaW5nQ29udHJvbGxlci5kZWNyeXB0TWVzc2FnZShcbiAgICAgICAgY2xlYW5NZXNzYWdlUGFyYW1zLFxuICAgICAgKTtcblxuICAgICAgdGhpcy5fZGVjcnlwdE1lc3NhZ2VNYW5hZ2VyLnNldE1lc3NhZ2VTdGF0dXNBbmRSZXN1bHQoXG4gICAgICAgIG1lc3NhZ2VJZCxcbiAgICAgICAgcmF3TWVzc2FnZSxcbiAgICAgICAgJ2RlY3J5cHRlZCcsXG4gICAgICApO1xuICAgICAgdGhpcy5fYWNjZXB0QXBwcm92YWwobWVzc2FnZUlkKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nLmluZm8oJ01ldGFNYXNrQ29udHJvbGxlciAtIGV0aF9kZWNyeXB0IGZhaWxlZC4nLCBlcnJvcik7XG4gICAgICB0aGlzLl9jYW5jZWxBYnN0cmFjdE1lc3NhZ2UodGhpcy5fZGVjcnlwdE1lc3NhZ2VNYW5hZ2VyLCBtZXNzYWdlSWQpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9nZXRTdGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9ubHkgZGVjcnlwdCBtZXNzYWdlIGFuZCBkb24ndCB0b3VjaCB0cmFuc2FjdGlvbiBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0gbWVzc2FnZVBhcmFtcyAtIFRoZSBwYXJhbXMgb2YgdGhlIG1lc3NhZ2UgdG8gZGVjcnlwdC5cbiAgICogQHJldHVybnMgQSBmdWxsIHN0YXRlIHVwZGF0ZS5cbiAgICovXG4gIGFzeW5jIGRlY3J5cHRNZXNzYWdlSW5saW5lKG1lc3NhZ2VQYXJhbXM6IERlY3J5cHRNZXNzYWdlUGFyYW1zTWV0YW1hc2spIHtcbiAgICBjb25zdCBtZXNzYWdlSWQgPSBtZXNzYWdlUGFyYW1zLm1ldGFtYXNrSWQgYXMgc3RyaW5nO1xuICAgIG1lc3NhZ2VQYXJhbXMuZGF0YSA9IHRoaXMuX3BhcnNlTWVzc2FnZURhdGEobWVzc2FnZVBhcmFtcy5kYXRhKTtcbiAgICBjb25zdCByYXdNZXNzYWdlID0gYXdhaXQgdGhpcy5fa2V5cmluZ0NvbnRyb2xsZXIuZGVjcnlwdE1lc3NhZ2UoXG4gICAgICBtZXNzYWdlUGFyYW1zLFxuICAgICk7XG5cbiAgICB0aGlzLl9kZWNyeXB0TWVzc2FnZU1hbmFnZXIuc2V0UmVzdWx0KG1lc3NhZ2VJZCwgcmF3TWVzc2FnZSk7XG5cbiAgICByZXR1cm4gdGhpcy5fZ2V0U3RhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGNhbmNlbCBhIGV0aF9kZWNyeXB0IHR5cGUgbWVzc2FnZS5cbiAgICpcbiAgICogQHBhcmFtIG1lc3NhZ2VJZCAtIFRoZSBJRCBvZiB0aGUgbWVzc2FnZSB0byBjYW5jZWwuXG4gICAqIEByZXR1cm5zIEEgZnVsbCBzdGF0ZSB1cGRhdGUuXG4gICAqL1xuICBjYW5jZWxEZWNyeXB0TWVzc2FnZShtZXNzYWdlSWQ6IHN0cmluZykge1xuICAgIHRoaXMuX2RlY3J5cHRNZXNzYWdlTWFuYWdlci5yZWplY3RNZXNzYWdlKG1lc3NhZ2VJZCk7XG4gICAgdGhpcy5fcmVqZWN0QXBwcm92YWwobWVzc2FnZUlkKTtcbiAgICByZXR1cm4gdGhpcy5fZ2V0U3RhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWplY3QgYWxsIHVuYXBwcm92ZWQgbWVzc2FnZXMgb2YgYW55IHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSByZWFzb24gLSBBIG1lc3NhZ2UgdG8gaW5kaWNhdGUgd2h5LlxuICAgKi9cbiAgcmVqZWN0VW5hcHByb3ZlZChyZWFzb24/OiBzdHJpbmcpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLl9kZWNyeXB0TWVzc2FnZU1hbmFnZXIuZ2V0VW5hcHByb3ZlZE1lc3NhZ2VzKCkpLmZvckVhY2goXG4gICAgICAobWVzc2FnZUlkKSA9PiB7XG4gICAgICAgIHRoaXMuX2NhbmNlbEFic3RyYWN0TWVzc2FnZShcbiAgICAgICAgICB0aGlzLl9kZWNyeXB0TWVzc2FnZU1hbmFnZXIsXG4gICAgICAgICAgbWVzc2FnZUlkLFxuICAgICAgICAgIHJlYXNvbixcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgX2FjY2VwdEFwcHJvdmFsKG1lc3NhZ2VJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5tZXNzYWdpbmdTeXN0ZW0uY2FsbCgnQXBwcm92YWxDb250cm9sbGVyOmFjY2VwdFJlcXVlc3QnLCBtZXNzYWdlSWQpO1xuICB9XG5cbiAgcHJpdmF0ZSBfY2FuY2VsQWJzdHJhY3RNZXNzYWdlKFxuICAgIG1lc3NhZ2VNYW5hZ2VyOiBBYnN0cmFjdE1lc3NhZ2VNYW5hZ2VyPFxuICAgICAgQWJzdHJhY3RNZXNzYWdlLFxuICAgICAgQWJzdHJhY3RNZXNzYWdlUGFyYW1zLFxuICAgICAgQWJzdHJhY3RNZXNzYWdlUGFyYW1zTWV0YW1hc2tcbiAgICA+LFxuICAgIG1lc3NhZ2VJZDogc3RyaW5nLFxuICAgIHJlYXNvbj86IHN0cmluZyxcbiAgKSB7XG4gICAgaWYgKHJlYXNvbikge1xuICAgICAgdGhpcy5fbWV0cmljc0V2ZW50KHtcbiAgICAgICAgZXZlbnQ6IHJlYXNvbixcbiAgICAgICAgY2F0ZWdvcnk6IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeS5NZXNzYWdlcyxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIGFjdGlvbjogJ0RlY3J5cHQgTWVzc2FnZSBSZXF1ZXN0JyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIG1lc3NhZ2VNYW5hZ2VyLnJlamVjdE1lc3NhZ2UobWVzc2FnZUlkKTtcbiAgICB0aGlzLl9yZWplY3RBcHByb3ZhbChtZXNzYWdlSWQpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2dldFN0YXRlKCk7XG4gIH1cblxuICBwcml2YXRlIF9zdWJzY3JpYmVUb01lc3NhZ2VTdGF0ZShcbiAgICBtZXNzYWdlTWFuYWdlcjogQWJzdHJhY3RNZXNzYWdlTWFuYWdlcjxcbiAgICAgIEFic3RyYWN0TWVzc2FnZSxcbiAgICAgIEFic3RyYWN0TWVzc2FnZVBhcmFtcyxcbiAgICAgIEFic3RyYWN0TWVzc2FnZVBhcmFtc01ldGFtYXNrXG4gICAgPixcbiAgICB1cGRhdGVTdGF0ZTogKFxuICAgICAgc3RhdGU6IERlY3J5cHRNZXNzYWdlQ29udHJvbGxlclN0YXRlLFxuICAgICAgbmV3TWVzc2FnZXM6IFJlY29yZDxzdHJpbmcsIFN0YXRlTWVzc2FnZT4sXG4gICAgICBtZXNzYWdlQ291bnQ6IG51bWJlcixcbiAgICApID0+IHZvaWQsXG4gICkge1xuICAgIG1lc3NhZ2VNYW5hZ2VyLnN1YnNjcmliZSgoc3RhdGU6IE1lc3NhZ2VNYW5hZ2VyU3RhdGU8QWJzdHJhY3RNZXNzYWdlPikgPT4ge1xuICAgICAgY29uc3QgbmV3TWVzc2FnZXMgPSB0aGlzLl9taWdyYXRlTWVzc2FnZXMoXG4gICAgICAgIHN0YXRlLnVuYXBwcm92ZWRNZXNzYWdlcyBhcyBhbnksXG4gICAgICApO1xuICAgICAgdGhpcy51cGRhdGUoKGRyYWZ0U3RhdGUpID0+IHtcbiAgICAgICAgdXBkYXRlU3RhdGUoZHJhZnRTdGF0ZSwgbmV3TWVzc2FnZXMsIHN0YXRlLnVuYXBwcm92ZWRNZXNzYWdlc0NvdW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfbWlncmF0ZU1lc3NhZ2VzKFxuICAgIGNvcmVNZXNzYWdlczogUmVjb3JkPHN0cmluZywgQ29yZU1lc3NhZ2U+LFxuICApOiBSZWNvcmQ8c3RyaW5nLCBTdGF0ZU1lc3NhZ2U+IHtcbiAgICBjb25zdCBzdGF0ZU1lc3NhZ2VzOiBSZWNvcmQ8c3RyaW5nLCBTdGF0ZU1lc3NhZ2U+ID0ge307XG5cbiAgICBmb3IgKGNvbnN0IG1lc3NhZ2VJZCBvZiBPYmplY3Qua2V5cyhjb3JlTWVzc2FnZXMpKSB7XG4gICAgICBjb25zdCBjb3JlTWVzc2FnZSA9IGNvcmVNZXNzYWdlc1ttZXNzYWdlSWRdO1xuICAgICAgY29uc3Qgc3RhdGVNZXNzYWdlID0gdGhpcy5fbWlncmF0ZU1lc3NhZ2UoY29yZU1lc3NhZ2UpO1xuICAgICAgc3RhdGVNZXNzYWdlc1ttZXNzYWdlSWRdID0gc3RhdGVNZXNzYWdlO1xuICAgIH1cblxuICAgIHJldHVybiBzdGF0ZU1lc3NhZ2VzO1xuICB9XG5cbiAgcHJpdmF0ZSBfbWlncmF0ZU1lc3NhZ2UoY29yZU1lc3NhZ2U6IENvcmVNZXNzYWdlKTogU3RhdGVNZXNzYWdlIHtcbiAgICBjb25zdCB7IG1lc3NhZ2VQYXJhbXMsIC4uLmNvcmVNZXNzYWdlRGF0YSB9ID0gY29yZU1lc3NhZ2U7XG5cbiAgICBjb25zdCBzdGF0ZU1lc3NhZ2UgPSB7XG4gICAgICAuLi5jb3JlTWVzc2FnZURhdGEsXG4gICAgICByYXdTaWc6IGNvcmVNZXNzYWdlLnJhd1NpZyBhcyBzdHJpbmcsXG4gICAgICBtc2dQYXJhbXM6IG1lc3NhZ2VQYXJhbXMsXG4gICAgICBvcmlnaW46IG1lc3NhZ2VQYXJhbXMub3JpZ2luLFxuICAgIH07XG5cbiAgICByZXR1cm4gc3RhdGVNZXNzYWdlO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVxdWVzdEFwcHJvdmFsKG1lc3NhZ2VQYXJhbXM6IEFic3RyYWN0TWVzc2FnZVBhcmFtc01ldGFtYXNrKSB7XG4gICAgY29uc3QgaWQgPSBtZXNzYWdlUGFyYW1zLm1ldGFtYXNrSWQgYXMgc3RyaW5nO1xuICAgIGNvbnN0IG9yaWdpbiA9IG1lc3NhZ2VQYXJhbXMub3JpZ2luIHx8IE9SSUdJTl9NRVRBTUFTSztcbiAgICB0cnkge1xuICAgICAgdGhpcy5tZXNzYWdpbmdTeXN0ZW0uY2FsbChcbiAgICAgICAgJ0FwcHJvdmFsQ29udHJvbGxlcjphZGRSZXF1ZXN0JyxcbiAgICAgICAge1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIG9yaWdpbixcbiAgICAgICAgICB0eXBlOiBBcHByb3ZhbFR5cGUuRXRoRGVjcnlwdCxcbiAgICAgICAgfSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZy5pbmZvKCdFcnJvciBhZGRpbmcgcmVxdWVzdCB0byBhcHByb3ZhbCBjb250cm9sbGVyJywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3BhcnNlTWVzc2FnZURhdGEoZGF0YTogc3RyaW5nKSB7XG4gICAgY29uc3Qgc3RyaXBwZWQgPSBzdHJpcEhleFByZWZpeChkYXRhKTtcbiAgICBjb25zdCBidWZmID0gQnVmZmVyLmZyb20oc3RyaXBwZWQsICdoZXgnKTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShidWZmLnRvU3RyaW5nKCd1dGY4JykpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVqZWN0QXBwcm92YWwobWVzc2FnZUlkOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5tZXNzYWdpbmdTeXN0ZW0uY2FsbChcbiAgICAgICAgJ0FwcHJvdmFsQ29udHJvbGxlcjpyZWplY3RSZXF1ZXN0JyxcbiAgICAgICAgbWVzc2FnZUlkLFxuICAgICAgICAnQ2FuY2VsJyxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZy5pbmZvKCdFcnJvciByZWplY3RpbmcgcmVxdWVzdCB0byBhcHByb3ZhbCBjb250cm9sbGVyJywgZXJyb3IpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgd2FybiB9IGZyb20gJ2xvZ2xldmVsJztcbmltcG9ydCB7IE1JTlVURSB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdGltZSc7XG5pbXBvcnQgeyBDSEFJTl9JRFMgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL25ldHdvcmsnO1xuaW1wb3J0IHsgU1RBVElDX01BSU5ORVRfVE9LRU5fTElTVCB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdG9rZW5zJztcbmltcG9ydCB7IGlzVG9rZW5EZXRlY3Rpb25FbmFibGVkRm9yTmV0d29yayB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL25ldHdvcmsudXRpbHMnO1xuaW1wb3J0IHsgaXNFcXVhbENhc2VJbnNlbnNpdGl2ZSB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL3N0cmluZy11dGlscyc7XG5pbXBvcnQge1xuICBBc3NldFR5cGUsXG4gIFRva2VuU3RhbmRhcmQsXG59IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHtcbiAgTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5LFxuICBNZXRhTWV0cmljc0V2ZW50TmFtZSxcbn0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9tZXRhbWV0cmljcyc7XG5cbi8vIEJ5IGRlZmF1bHQsIHBvbGwgZXZlcnkgMyBtaW51dGVzXG5jb25zdCBERUZBVUxUX0lOVEVSVkFMID0gTUlOVVRFICogMztcblxuLyoqXG4gKiBBIGNvbnRyb2xsZXIgdGhhdCBwb2xscyBmb3IgdG9rZW4gZXhjaGFuZ2VcbiAqIHJhdGVzIGJhc2VkIG9uIGEgdXNlcidzIGN1cnJlbnQgdG9rZW4gbGlzdFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZXRlY3RUb2tlbnNDb250cm9sbGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBEZXRlY3RUb2tlbnNDb250cm9sbGVyXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbY29uZmlnXSAtIE9wdGlvbnMgdG8gY29uZmlndXJlIGNvbnRyb2xsZXJcbiAgICogQHBhcmFtIGNvbmZpZy5pbnRlcnZhbFxuICAgKiBAcGFyYW0gY29uZmlnLnByZWZlcmVuY2VzXG4gICAqIEBwYXJhbSBjb25maWcubmV0d29ya1xuICAgKiBAcGFyYW0gY29uZmlnLmtleXJpbmdNZW1TdG9yZVxuICAgKiBAcGFyYW0gY29uZmlnLnRva2VuTGlzdFxuICAgKiBAcGFyYW0gY29uZmlnLnRva2Vuc0NvbnRyb2xsZXJcbiAgICogQHBhcmFtIGNvbmZpZy5hc3NldHNDb250cmFjdENvbnRyb2xsZXJcbiAgICogQHBhcmFtIGNvbmZpZy50cmFja01ldGFNZXRyaWNzRXZlbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBpbnRlcnZhbCA9IERFRkFVTFRfSU5URVJWQUwsXG4gICAgcHJlZmVyZW5jZXMsXG4gICAgbmV0d29yayxcbiAgICBrZXlyaW5nTWVtU3RvcmUsXG4gICAgdG9rZW5MaXN0LFxuICAgIHRva2Vuc0NvbnRyb2xsZXIsXG4gICAgYXNzZXRzQ29udHJhY3RDb250cm9sbGVyID0gbnVsbCxcbiAgICB0cmFja01ldGFNZXRyaWNzRXZlbnQsXG4gIH0gPSB7fSkge1xuICAgIHRoaXMuYXNzZXRzQ29udHJhY3RDb250cm9sbGVyID0gYXNzZXRzQ29udHJhY3RDb250cm9sbGVyO1xuICAgIHRoaXMudG9rZW5zQ29udHJvbGxlciA9IHRva2Vuc0NvbnRyb2xsZXI7XG4gICAgdGhpcy5wcmVmZXJlbmNlcyA9IHByZWZlcmVuY2VzO1xuICAgIHRoaXMuaW50ZXJ2YWwgPSBpbnRlcnZhbDtcbiAgICB0aGlzLm5ldHdvcmsgPSBuZXR3b3JrO1xuICAgIHRoaXMua2V5cmluZ01lbVN0b3JlID0ga2V5cmluZ01lbVN0b3JlO1xuICAgIHRoaXMudG9rZW5MaXN0ID0gdG9rZW5MaXN0O1xuICAgIHRoaXMudXNlVG9rZW5EZXRlY3Rpb24gPVxuICAgICAgdGhpcy5wcmVmZXJlbmNlcz8uc3RvcmUuZ2V0U3RhdGUoKS51c2VUb2tlbkRldGVjdGlvbjtcbiAgICB0aGlzLnNlbGVjdGVkQWRkcmVzcyA9IHRoaXMucHJlZmVyZW5jZXM/LnN0b3JlLmdldFN0YXRlKCkuc2VsZWN0ZWRBZGRyZXNzO1xuICAgIHRoaXMudG9rZW5BZGRyZXNzZXMgPSB0aGlzLnRva2Vuc0NvbnRyb2xsZXI/LnN0YXRlLnRva2Vucy5tYXAoKHRva2VuKSA9PiB7XG4gICAgICByZXR1cm4gdG9rZW4uYWRkcmVzcztcbiAgICB9KTtcbiAgICB0aGlzLmhpZGRlblRva2VucyA9IHRoaXMudG9rZW5zQ29udHJvbGxlcj8uc3RhdGUuaWdub3JlZFRva2VucztcbiAgICB0aGlzLmRldGVjdGVkVG9rZW5zID0gdGhpcy50b2tlbnNDb250cm9sbGVyPy5zdGF0ZS5kZXRlY3RlZFRva2VucztcbiAgICB0aGlzLmNoYWluSWQgPSB0aGlzLmdldENoYWluSWRGcm9tTmV0d29ya1N0b3JlKG5ldHdvcmspO1xuICAgIHRoaXMuX3RyYWNrTWV0YU1ldHJpY3NFdmVudCA9IHRyYWNrTWV0YU1ldHJpY3NFdmVudDtcblxuICAgIHByZWZlcmVuY2VzPy5zdG9yZS5zdWJzY3JpYmUoKHsgc2VsZWN0ZWRBZGRyZXNzLCB1c2VUb2tlbkRldGVjdGlvbiB9KSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRBZGRyZXNzICE9PSBzZWxlY3RlZEFkZHJlc3MgfHxcbiAgICAgICAgdGhpcy51c2VUb2tlbkRldGVjdGlvbiAhPT0gdXNlVG9rZW5EZXRlY3Rpb25cbiAgICAgICkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkQWRkcmVzcyA9IHNlbGVjdGVkQWRkcmVzcztcbiAgICAgICAgdGhpcy51c2VUb2tlbkRldGVjdGlvbiA9IHVzZVRva2VuRGV0ZWN0aW9uO1xuICAgICAgICB0aGlzLnJlc3RhcnRUb2tlbkRldGVjdGlvbih7IHNlbGVjdGVkQWRkcmVzcyB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0b2tlbnNDb250cm9sbGVyPy5zdWJzY3JpYmUoXG4gICAgICAoeyB0b2tlbnMgPSBbXSwgaWdub3JlZFRva2VucyA9IFtdLCBkZXRlY3RlZFRva2VucyA9IFtdIH0pID0+IHtcbiAgICAgICAgdGhpcy50b2tlbkFkZHJlc3NlcyA9IHRva2Vucy5tYXAoKHRva2VuKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRva2VuLmFkZHJlc3M7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmhpZGRlblRva2VucyA9IGlnbm9yZWRUb2tlbnM7XG4gICAgICAgIHRoaXMuZGV0ZWN0ZWRUb2tlbnMgPSBkZXRlY3RlZFRva2VucztcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3IgZWFjaCB0b2tlbiBpbiB0aGUgdG9rZW5saXN0IHByb3ZpZGVkIGJ5IHRoZSBUb2tlbkxpc3RDb250cm9sbGVyLCBjaGVjayBzZWxlY3RlZEFkZHJlc3MgYmFsYW5jZS5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHBhcmFtIG9wdGlvbnMuc2VsZWN0ZWRBZGRyZXNzIC0gdGhlIHNlbGVjdGVkQWRkcmVzcyBhZ2FpbnN0IHdoaWNoIHRvIGRldGVjdCBmb3IgdG9rZW4gYmFsYW5jZXNcbiAgICogQHBhcmFtIG9wdGlvbnMuY2hhaW5JZCAtIHRoZSBjaGFpbklkIGFnYWluc3Qgd2hpY2ggdG8gZGV0ZWN0IGZvciB0b2tlbiBiYWxhbmNlc1xuICAgKi9cbiAgYXN5bmMgZGV0ZWN0TmV3VG9rZW5zKHsgc2VsZWN0ZWRBZGRyZXNzLCBjaGFpbklkIH0gPSB7fSkge1xuICAgIGNvbnN0IGFkZHJlc3NBZ2FpbnN0V2hpY2hUb0RldGVjdCA9IHNlbGVjdGVkQWRkcmVzcyA/PyB0aGlzLnNlbGVjdGVkQWRkcmVzcztcbiAgICBjb25zdCBjaGFpbklkQWdhaW5zdFdoaWNoVG9EZXRlY3QgPVxuICAgICAgY2hhaW5JZCA/PyB0aGlzLmdldENoYWluSWRGcm9tTmV0d29ya1N0b3JlKHRoaXMuX25ldHdvcmspO1xuICAgIGlmICghdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWlzVG9rZW5EZXRlY3Rpb25FbmFibGVkRm9yTmV0d29yayhjaGFpbklkQWdhaW5zdFdoaWNoVG9EZXRlY3QpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChcbiAgICAgICF0aGlzLnVzZVRva2VuRGV0ZWN0aW9uICYmXG4gICAgICBjaGFpbklkQWdhaW5zdFdoaWNoVG9EZXRlY3QgIT09IENIQUlOX0lEUy5NQUlOTkVUXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaXNUb2tlbkRldGVjdGlvbkluYWN0aXZlSW5NYWlubmV0ID1cbiAgICAgICF0aGlzLnVzZVRva2VuRGV0ZWN0aW9uICYmXG4gICAgICBjaGFpbklkQWdhaW5zdFdoaWNoVG9EZXRlY3QgPT09IENIQUlOX0lEUy5NQUlOTkVUO1xuICAgIGNvbnN0IHsgdG9rZW5MaXN0IH0gPSB0aGlzLl90b2tlbkxpc3Quc3RhdGU7XG5cbiAgICBjb25zdCB0b2tlbkxpc3RVc2VkID0gaXNUb2tlbkRldGVjdGlvbkluYWN0aXZlSW5NYWlubmV0XG4gICAgICA/IFNUQVRJQ19NQUlOTkVUX1RPS0VOX0xJU1RcbiAgICAgIDogdG9rZW5MaXN0O1xuXG4gICAgY29uc3QgdG9rZW5zVG9EZXRlY3QgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHRva2VuQWRkcmVzcyBpbiB0b2tlbkxpc3RVc2VkKSB7XG4gICAgICBpZiAoXG4gICAgICAgICF0aGlzLnRva2VuQWRkcmVzc2VzLmZpbmQoKGFkZHJlc3MpID0+XG4gICAgICAgICAgaXNFcXVhbENhc2VJbnNlbnNpdGl2ZShhZGRyZXNzLCB0b2tlbkFkZHJlc3MpLFxuICAgICAgICApICYmXG4gICAgICAgICF0aGlzLmhpZGRlblRva2Vucy5maW5kKChhZGRyZXNzKSA9PlxuICAgICAgICAgIGlzRXF1YWxDYXNlSW5zZW5zaXRpdmUoYWRkcmVzcywgdG9rZW5BZGRyZXNzKSxcbiAgICAgICAgKSAmJlxuICAgICAgICAhdGhpcy5kZXRlY3RlZFRva2Vucy5maW5kKCh7IGFkZHJlc3MgfSkgPT5cbiAgICAgICAgICBpc0VxdWFsQ2FzZUluc2Vuc2l0aXZlKGFkZHJlc3MsIHRva2VuQWRkcmVzcyksXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICB0b2tlbnNUb0RldGVjdC5wdXNoKHRva2VuQWRkcmVzcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHNsaWNlT2ZUb2tlbnNUb0RldGVjdCA9IFtcbiAgICAgIHRva2Vuc1RvRGV0ZWN0LnNsaWNlKDAsIDEwMDApLFxuICAgICAgdG9rZW5zVG9EZXRlY3Quc2xpY2UoMTAwMCwgdG9rZW5zVG9EZXRlY3QubGVuZ3RoIC0gMSksXG4gICAgXTtcbiAgICBmb3IgKGNvbnN0IHRva2Vuc1NsaWNlIG9mIHNsaWNlT2ZUb2tlbnNUb0RldGVjdCkge1xuICAgICAgbGV0IHJlc3VsdDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IHRoaXMuYXNzZXRzQ29udHJhY3RDb250cm9sbGVyLmdldEJhbGFuY2VzSW5TaW5nbGVDYWxsKFxuICAgICAgICAgIGFkZHJlc3NBZ2FpbnN0V2hpY2hUb0RldGVjdCxcbiAgICAgICAgICB0b2tlbnNTbGljZSxcbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgYE1ldGFNYXNrIC0gRGV0ZWN0VG9rZW5zQ29udHJvbGxlciBzaW5nbGUgY2FsbCBiYWxhbmNlIGZldGNoIGZhaWxlZGAsXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdG9rZW5zV2l0aEJhbGFuY2UgPSBbXTtcbiAgICAgIGNvbnN0IGV2ZW50VG9rZW5zRGV0YWlscyA9IFtdO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBjb25zdCBub25aZXJvVG9rZW5BZGRyZXNzZXMgPSBPYmplY3Qua2V5cyhyZXN1bHQpO1xuICAgICAgICBmb3IgKGNvbnN0IG5vblplcm9Ub2tlbkFkZHJlc3Mgb2Ygbm9uWmVyb1Rva2VuQWRkcmVzc2VzKSB7XG4gICAgICAgICAgY29uc3QgeyBhZGRyZXNzLCBzeW1ib2wsIGRlY2ltYWxzIH0gPVxuICAgICAgICAgICAgdG9rZW5MaXN0VXNlZFtub25aZXJvVG9rZW5BZGRyZXNzXTtcblxuICAgICAgICAgIGV2ZW50VG9rZW5zRGV0YWlscy5wdXNoKGAke3N5bWJvbH0gLSAke2FkZHJlc3N9YCk7XG5cbiAgICAgICAgICB0b2tlbnNXaXRoQmFsYW5jZS5wdXNoKHtcbiAgICAgICAgICAgIGFkZHJlc3MsXG4gICAgICAgICAgICBzeW1ib2wsXG4gICAgICAgICAgICBkZWNpbWFscyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b2tlbnNXaXRoQmFsYW5jZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5fdHJhY2tNZXRhTWV0cmljc0V2ZW50KHtcbiAgICAgICAgICAgIGV2ZW50OiBNZXRhTWV0cmljc0V2ZW50TmFtZS5Ub2tlbkRldGVjdGVkLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeS5XYWxsZXQsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIHRva2VuczogZXZlbnRUb2tlbnNEZXRhaWxzLFxuICAgICAgICAgICAgICB0b2tlbl9zdGFuZGFyZDogVG9rZW5TdGFuZGFyZC5FUkMyMCxcbiAgICAgICAgICAgICAgYXNzZXRfdHlwZTogQXNzZXRUeXBlLnRva2VuLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhd2FpdCB0aGlzLnRva2Vuc0NvbnRyb2xsZXIuYWRkRGV0ZWN0ZWRUb2tlbnModG9rZW5zV2l0aEJhbGFuY2UsIHtcbiAgICAgICAgICAgIHNlbGVjdGVkQWRkcmVzczogYWRkcmVzc0FnYWluc3RXaGljaFRvRGV0ZWN0LFxuICAgICAgICAgICAgY2hhaW5JZDogY2hhaW5JZEFnYWluc3RXaGljaFRvRGV0ZWN0LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RhcnQgdG9rZW4gZGV0ZWN0aW9uIHBvbGxpbmcgcGVyaW9kIGFuZCBjYWxsIGRldGVjdE5ld1Rva2Vuc1xuICAgKiBpbiBjYXNlIG9mIGFkZHJlc3MgY2hhbmdlIG9yIHVzZXIgc2Vzc2lvbiBpbml0aWFsaXphdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHBhcmFtIG9wdGlvbnMuc2VsZWN0ZWRBZGRyZXNzIC0gdGhlIHNlbGVjdGVkQWRkcmVzcyBhZ2FpbnN0IHdoaWNoIHRvIGRldGVjdCBmb3IgdG9rZW4gYmFsYW5jZXNcbiAgICogQHBhcmFtIG9wdGlvbnMuY2hhaW5JZCAtIHRoZSBjaGFpbklkIGFnYWluc3Qgd2hpY2ggdG8gZGV0ZWN0IGZvciB0b2tlbiBiYWxhbmNlc1xuICAgKi9cbiAgcmVzdGFydFRva2VuRGV0ZWN0aW9uKHsgc2VsZWN0ZWRBZGRyZXNzLCBjaGFpbklkIH0gPSB7fSkge1xuICAgIGNvbnN0IGFkZHJlc3NBZ2FpbnN0V2hpY2hUb0RldGVjdCA9IHNlbGVjdGVkQWRkcmVzcyA/PyB0aGlzLnNlbGVjdGVkQWRkcmVzcztcbiAgICBjb25zdCBjaGFpbklkQWdhaW5zdFdoaWNoVG9EZXRlY3QgPSBjaGFpbklkID8/IHRoaXMuY2hhaW5JZDtcbiAgICBpZiAoISh0aGlzLmlzQWN0aXZlICYmIGFkZHJlc3NBZ2FpbnN0V2hpY2hUb0RldGVjdCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kZXRlY3ROZXdUb2tlbnMoe1xuICAgICAgc2VsZWN0ZWRBZGRyZXNzOiBhZGRyZXNzQWdhaW5zdFdoaWNoVG9EZXRlY3QsXG4gICAgICBjaGFpbklkOiBjaGFpbklkQWdhaW5zdFdoaWNoVG9EZXRlY3QsXG4gICAgfSk7XG4gICAgdGhpcy5pbnRlcnZhbCA9IERFRkFVTFRfSU5URVJWQUw7XG4gIH1cblxuICBnZXRDaGFpbklkRnJvbU5ldHdvcmtTdG9yZShuZXR3b3JrKSB7XG4gICAgcmV0dXJuIG5ldHdvcms/LnN0b3JlLmdldFN0YXRlKCkucHJvdmlkZXJDb25maWcuY2hhaW5JZDtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlIGFjY2Vzc29yLXBhaXJzICovXG4gIC8qKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgc2V0IGludGVydmFsKGludGVydmFsKSB7XG4gICAgdGhpcy5faGFuZGxlICYmIGNsZWFySW50ZXJ2YWwodGhpcy5faGFuZGxlKTtcbiAgICBpZiAoIWludGVydmFsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2hhbmRsZSA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMuZGV0ZWN0TmV3VG9rZW5zKCk7XG4gICAgfSwgaW50ZXJ2YWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqL1xuICBzZXQgbmV0d29yayhuZXR3b3JrKSB7XG4gICAgaWYgKCFuZXR3b3JrKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX25ldHdvcmsgPSBuZXR3b3JrO1xuICAgIHRoaXMuX25ldHdvcmsuc3RvcmUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmNoYWluSWQgIT09IHRoaXMuZ2V0Q2hhaW5JZEZyb21OZXR3b3JrU3RvcmUobmV0d29yaykpIHtcbiAgICAgICAgY29uc3QgY2hhaW5JZCA9IHRoaXMuZ2V0Q2hhaW5JZEZyb21OZXR3b3JrU3RvcmUobmV0d29yayk7XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgICAgIHRoaXMucmVzdGFydFRva2VuRGV0ZWN0aW9uKHsgY2hhaW5JZDogdGhpcy5jaGFpbklkIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluIHNldHRlciB3aGVuIGlzVW5sb2NrZWQgaXMgdXBkYXRlZCB0byB0cnVlLCBkZXRlY3ROZXdUb2tlbnMgYW5kIHJlc3RhcnQgcG9sbGluZ1xuICAgKlxuICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgKi9cbiAgc2V0IGtleXJpbmdNZW1TdG9yZShrZXlyaW5nTWVtU3RvcmUpIHtcbiAgICBpZiAoIWtleXJpbmdNZW1TdG9yZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9rZXlyaW5nTWVtU3RvcmUgPSBrZXlyaW5nTWVtU3RvcmU7XG4gICAgdGhpcy5fa2V5cmluZ01lbVN0b3JlLnN1YnNjcmliZSgoeyBpc1VubG9ja2VkIH0pID0+IHtcbiAgICAgIGlmICh0aGlzLmlzVW5sb2NrZWQgIT09IGlzVW5sb2NrZWQpIHtcbiAgICAgICAgdGhpcy5pc1VubG9ja2VkID0gaXNVbmxvY2tlZDtcbiAgICAgICAgaWYgKGlzVW5sb2NrZWQpIHtcbiAgICAgICAgICB0aGlzLnJlc3RhcnRUb2tlbkRldGVjdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge29iamVjdH1cbiAgICovXG4gIHNldCB0b2tlbkxpc3QodG9rZW5MaXN0KSB7XG4gICAgaWYgKCF0b2tlbkxpc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fdG9rZW5MaXN0ID0gdG9rZW5MaXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVybmFsIGlzQWN0aXZlIHN0YXRlXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqL1xuICBnZXQgaXNBY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNPcGVuICYmIHRoaXMuaXNVbmxvY2tlZDtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIGFjY2Vzc29yLXBhaXJzICovXG59XG4iLCJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgbG9nIGZyb20gJ2xvZ2xldmVsJztcbmltcG9ydCB7XG4gIEVuY3J5cHRpb25QdWJsaWNLZXlNYW5hZ2VyLFxuICBFbmNyeXB0aW9uUHVibGljS2V5UGFyYW1zTWV0YW1hc2ssXG59IGZyb20gJ0BtZXRhbWFzay9tZXNzYWdlLW1hbmFnZXInO1xuaW1wb3J0IHsgS2V5cmluZ0NvbnRyb2xsZXIgfSBmcm9tICdAbWV0YW1hc2svZXRoLWtleXJpbmctY29udHJvbGxlcic7XG5pbXBvcnQge1xuICBBYnN0cmFjdE1lc3NhZ2VNYW5hZ2VyLFxuICBBYnN0cmFjdE1lc3NhZ2UsXG4gIE1lc3NhZ2VNYW5hZ2VyU3RhdGUsXG4gIEFic3RyYWN0TWVzc2FnZVBhcmFtcyxcbiAgQWJzdHJhY3RNZXNzYWdlUGFyYW1zTWV0YW1hc2ssXG4gIE9yaWdpbmFsUmVxdWVzdCxcbn0gZnJvbSAnQG1ldGFtYXNrL21lc3NhZ2UtbWFuYWdlci9kaXN0L0Fic3RyYWN0TWVzc2FnZU1hbmFnZXInO1xuaW1wb3J0IHtcbiAgQmFzZUNvbnRyb2xsZXJWMixcbiAgUmVzdHJpY3RlZENvbnRyb2xsZXJNZXNzZW5nZXIsXG59IGZyb20gJ0BtZXRhbWFzay9iYXNlLWNvbnRyb2xsZXInO1xuaW1wb3J0IHsgUGF0Y2ggfSBmcm9tICdpbW1lcic7XG5pbXBvcnQge1xuICBBY2NlcHRSZXF1ZXN0LFxuICBBZGRBcHByb3ZhbFJlcXVlc3QsXG4gIFJlamVjdFJlcXVlc3QsXG59IGZyb20gJ0BtZXRhbWFzay9hcHByb3ZhbC1jb250cm9sbGVyJztcbmltcG9ydCB7IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeSB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbWV0YW1ldHJpY3MnO1xuaW1wb3J0IHsgS2V5cmluZ1R5cGUgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2tleXJpbmcnO1xuaW1wb3J0IHsgT1JJR0lOX01FVEFNQVNLIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9hcHAnO1xuXG5jb25zdCBjb250cm9sbGVyTmFtZSA9ICdFbmNyeXB0aW9uUHVibGljS2V5Q29udHJvbGxlcic7XG5jb25zdCBtZXRob2ROYW1lR2V0RW5jcnlwdGlvblB1YmxpY0tleSA9ICdldGhfZ2V0RW5jcnlwdGlvblB1YmxpY0tleSc7XG5cbmNvbnN0IHN0YXRlTWV0YWRhdGEgPSB7XG4gIHVuYXBwcm92ZWRFbmNyeXB0aW9uUHVibGljS2V5TXNnczogeyBwZXJzaXN0OiBmYWxzZSwgYW5vbnltb3VzOiBmYWxzZSB9LFxuICB1bmFwcHJvdmVkRW5jcnlwdGlvblB1YmxpY0tleU1zZ0NvdW50OiB7IHBlcnNpc3Q6IGZhbHNlLCBhbm9ueW1vdXM6IGZhbHNlIH0sXG59O1xuXG5jb25zdCBnZXREZWZhdWx0U3RhdGUgPSAoKSA9PiAoe1xuICB1bmFwcHJvdmVkRW5jcnlwdGlvblB1YmxpY0tleU1zZ3M6IHt9LFxuICB1bmFwcHJvdmVkRW5jcnlwdGlvblB1YmxpY0tleU1zZ0NvdW50OiAwLFxufSk7XG5cbmV4cG9ydCB0eXBlIENvcmVNZXNzYWdlID0gQWJzdHJhY3RNZXNzYWdlICYge1xuICBtZXNzYWdlUGFyYW1zOiBBYnN0cmFjdE1lc3NhZ2VQYXJhbXM7XG59O1xuXG5leHBvcnQgdHlwZSBTdGF0ZU1lc3NhZ2UgPSBSZXF1aXJlZDxcbiAgT21pdDxBYnN0cmFjdE1lc3NhZ2UsICdzZWN1cml0eVByb3ZpZGVyUmVzcG9uc2UnPlxuPiAmIHtcbiAgbXNnUGFyYW1zOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBFbmNyeXB0aW9uUHVibGljS2V5Q29udHJvbGxlclN0YXRlID0ge1xuICB1bmFwcHJvdmVkRW5jcnlwdGlvblB1YmxpY0tleU1zZ3M6IFJlY29yZDxzdHJpbmcsIFN0YXRlTWVzc2FnZT47XG4gIHVuYXBwcm92ZWRFbmNyeXB0aW9uUHVibGljS2V5TXNnQ291bnQ6IG51bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIEdldEVuY3J5cHRpb25QdWJsaWNLZXlTdGF0ZSA9IHtcbiAgdHlwZTogYCR7dHlwZW9mIGNvbnRyb2xsZXJOYW1lfTpnZXRTdGF0ZWA7XG4gIGhhbmRsZXI6ICgpID0+IEVuY3J5cHRpb25QdWJsaWNLZXlDb250cm9sbGVyU3RhdGU7XG59O1xuXG5leHBvcnQgdHlwZSBFbmNyeXB0aW9uUHVibGljS2V5U3RhdGVDaGFuZ2UgPSB7XG4gIHR5cGU6IGAke3R5cGVvZiBjb250cm9sbGVyTmFtZX06c3RhdGVDaGFuZ2VgO1xuICBwYXlsb2FkOiBbRW5jcnlwdGlvblB1YmxpY0tleUNvbnRyb2xsZXJTdGF0ZSwgUGF0Y2hbXV07XG59O1xuXG5leHBvcnQgdHlwZSBFbmNyeXB0aW9uUHVibGljS2V5Q29udHJvbGxlckFjdGlvbnMgPSBHZXRFbmNyeXB0aW9uUHVibGljS2V5U3RhdGU7XG5cbmV4cG9ydCB0eXBlIEVuY3J5cHRpb25QdWJsaWNLZXlDb250cm9sbGVyRXZlbnRzID1cbiAgRW5jcnlwdGlvblB1YmxpY0tleVN0YXRlQ2hhbmdlO1xuXG50eXBlIEFsbG93ZWRBY3Rpb25zID0gQWRkQXBwcm92YWxSZXF1ZXN0IHwgQWNjZXB0UmVxdWVzdCB8IFJlamVjdFJlcXVlc3Q7XG5cbmV4cG9ydCB0eXBlIEVuY3J5cHRpb25QdWJsaWNLZXlDb250cm9sbGVyTWVzc2VuZ2VyID1cbiAgUmVzdHJpY3RlZENvbnRyb2xsZXJNZXNzZW5nZXI8XG4gICAgdHlwZW9mIGNvbnRyb2xsZXJOYW1lLFxuICAgIEVuY3J5cHRpb25QdWJsaWNLZXlDb250cm9sbGVyQWN0aW9ucyB8IEFsbG93ZWRBY3Rpb25zLFxuICAgIEVuY3J5cHRpb25QdWJsaWNLZXlDb250cm9sbGVyRXZlbnRzLFxuICAgIEFsbG93ZWRBY3Rpb25zWyd0eXBlJ10sXG4gICAgbmV2ZXJcbiAgPjtcblxuZXhwb3J0IHR5cGUgRW5jcnlwdGlvblB1YmxpY0tleUNvbnRyb2xsZXJPcHRpb25zID0ge1xuICBtZXNzZW5nZXI6IEVuY3J5cHRpb25QdWJsaWNLZXlDb250cm9sbGVyTWVzc2VuZ2VyO1xuICBrZXlyaW5nQ29udHJvbGxlcjogS2V5cmluZ0NvbnRyb2xsZXI7XG4gIGdldFN0YXRlOiAoKSA9PiBhbnk7XG4gIG1ldHJpY3NFdmVudDogKHBheWxvYWQ6IGFueSwgb3B0aW9ucz86IGFueSkgPT4gdm9pZDtcbn07XG5cbi8qKlxuICogQ29udHJvbGxlciBmb3IgcmVxdWVzdGluZyBlbmNyeXB0aW9uIHB1YmxpYyBrZXkgcmVxdWVzdHMgcmVxdWlyaW5nIHVzZXIgYXBwcm92YWwuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVuY3J5cHRpb25QdWJsaWNLZXlDb250cm9sbGVyIGV4dGVuZHMgQmFzZUNvbnRyb2xsZXJWMjxcbiAgdHlwZW9mIGNvbnRyb2xsZXJOYW1lLFxuICBFbmNyeXB0aW9uUHVibGljS2V5Q29udHJvbGxlclN0YXRlLFxuICBFbmNyeXB0aW9uUHVibGljS2V5Q29udHJvbGxlck1lc3NlbmdlclxuPiB7XG4gIGh1YjogRXZlbnRFbWl0dGVyO1xuXG4gIHByaXZhdGUgX2tleXJpbmdDb250cm9sbGVyOiBLZXlyaW5nQ29udHJvbGxlcjtcblxuICBwcml2YXRlIF9nZXRTdGF0ZTogKCkgPT4gYW55O1xuXG4gIHByaXZhdGUgX2VuY3J5cHRpb25QdWJsaWNLZXlNYW5hZ2VyOiBFbmNyeXB0aW9uUHVibGljS2V5TWFuYWdlcjtcblxuICBwcml2YXRlIF9tZXRyaWNzRXZlbnQ6IChwYXlsb2FkOiBhbnksIG9wdGlvbnM/OiBhbnkpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIEVuY3J5cHRpb25QdWJsaWNLZXkgY29udHJvbGxlci5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgY29udHJvbGxlciBvcHRpb25zLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5tZXNzZW5nZXIgLSBUaGUgcmVzdHJpY3RlZCBjb250cm9sbGVyIG1lc3NlbmdlciBmb3IgdGhlIEVuY3J5cHRpb25QdWJsaWNLZXkgY29udHJvbGxlci5cbiAgICogQHBhcmFtIG9wdGlvbnMua2V5cmluZ0NvbnRyb2xsZXIgLSBBbiBpbnN0YW5jZSBvZiBhIGtleXJpbmcgY29udHJvbGxlciB1c2VkIHRvIGV4dHJhY3QgdGhlIGVuY3J5cHRpb24gcHVibGljIGtleS5cbiAgICogQHBhcmFtIG9wdGlvbnMuZ2V0U3RhdGUgLSBDYWxsYmFjayB0byByZXRyaWV2ZSBhbGwgdXNlciBzdGF0ZS5cbiAgICogQHBhcmFtIG9wdGlvbnMubWV0cmljc0V2ZW50IC0gQSBmdW5jdGlvbiBmb3IgZW1pdHRpbmcgYSBtZXRyaWMgZXZlbnQuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbWVzc2VuZ2VyLFxuICAgIGtleXJpbmdDb250cm9sbGVyLFxuICAgIGdldFN0YXRlLFxuICAgIG1ldHJpY3NFdmVudCxcbiAgfTogRW5jcnlwdGlvblB1YmxpY0tleUNvbnRyb2xsZXJPcHRpb25zKSB7XG4gICAgc3VwZXIoe1xuICAgICAgbmFtZTogY29udHJvbGxlck5hbWUsXG4gICAgICBtZXRhZGF0YTogc3RhdGVNZXRhZGF0YSxcbiAgICAgIG1lc3NlbmdlcixcbiAgICAgIHN0YXRlOiBnZXREZWZhdWx0U3RhdGUoKSxcbiAgICB9KTtcblxuICAgIHRoaXMuX2tleXJpbmdDb250cm9sbGVyID0ga2V5cmluZ0NvbnRyb2xsZXI7XG4gICAgdGhpcy5fZ2V0U3RhdGUgPSBnZXRTdGF0ZTtcbiAgICB0aGlzLl9tZXRyaWNzRXZlbnQgPSBtZXRyaWNzRXZlbnQ7XG5cbiAgICB0aGlzLmh1YiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB0aGlzLl9lbmNyeXB0aW9uUHVibGljS2V5TWFuYWdlciA9IG5ldyBFbmNyeXB0aW9uUHVibGljS2V5TWFuYWdlcihcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIFsncmVjZWl2ZWQnXSxcbiAgICApO1xuXG4gICAgdGhpcy5fZW5jcnlwdGlvblB1YmxpY0tleU1hbmFnZXIuaHViLm9uKCd1cGRhdGVCYWRnZScsICgpID0+IHtcbiAgICAgIHRoaXMuaHViLmVtaXQoJ3VwZGF0ZUJhZGdlJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9lbmNyeXB0aW9uUHVibGljS2V5TWFuYWdlci5odWIub24oXG4gICAgICAndW5hcHByb3ZlZE1lc3NhZ2UnLFxuICAgICAgKG1zZ1BhcmFtczogQWJzdHJhY3RNZXNzYWdlUGFyYW1zTWV0YW1hc2spID0+IHtcbiAgICAgICAgdGhpcy5fcmVxdWVzdEFwcHJvdmFsKG1zZ1BhcmFtcywgbWV0aG9kTmFtZUdldEVuY3J5cHRpb25QdWJsaWNLZXkpO1xuICAgICAgfSxcbiAgICApO1xuXG4gICAgdGhpcy5fc3Vic2NyaWJlVG9NZXNzYWdlU3RhdGUoXG4gICAgICB0aGlzLl9lbmNyeXB0aW9uUHVibGljS2V5TWFuYWdlcixcbiAgICAgIChzdGF0ZSwgbmV3TWVzc2FnZXMsIG1lc3NhZ2VDb3VudCkgPT4ge1xuICAgICAgICBzdGF0ZS51bmFwcHJvdmVkRW5jcnlwdGlvblB1YmxpY0tleU1zZ3MgPSBuZXdNZXNzYWdlcztcbiAgICAgICAgc3RhdGUudW5hcHByb3ZlZEVuY3J5cHRpb25QdWJsaWNLZXlNc2dDb3VudCA9IG1lc3NhZ2VDb3VudDtcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGdldHRlciBmb3IgdGhlIG51bWJlciBvZiAndW5hcHByb3ZlZCcgTWVzc2FnZXMgaW4gdGhpcy5tZXNzYWdlc1xuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mICd1bmFwcHJvdmVkJyBNZXNzYWdlcyBpbiB0aGlzLm1lc3NhZ2VzXG4gICAqL1xuICBnZXQgdW5hcHByb3ZlZE1zZ0NvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2VuY3J5cHRpb25QdWJsaWNLZXlNYW5hZ2VyLmdldFVuYXBwcm92ZWRNZXNzYWdlc0NvdW50KCk7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgdGhlIGNvbnRyb2xsZXIgc3RhdGUgdG8gdGhlIGluaXRpYWwgc3RhdGUuXG4gICAqL1xuICByZXNldFN0YXRlKCkge1xuICAgIHRoaXMudXBkYXRlKCgpID0+IGdldERlZmF1bHRTdGF0ZSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIERhcHAgdXNlcyB0aGUgZXRoX2dldEVuY3J5cHRpb25QdWJsaWNLZXkgbWV0aG9kLCB0byByZXF1ZXN0IHVzZXIgYXBwcm92YWwuXG4gICAqXG4gICAqIEBwYXJhbSBhZGRyZXNzIC0gVGhlIGFkZHJlc3MgZnJvbSB0aGUgZW5jcnlwdGlvbiBwdWJsaWMga2V5IHdpbGwgYmUgZXh0cmFjdGVkLlxuICAgKiBAcGFyYW0gW3JlcV0gLSBUaGUgb3JpZ2luYWwgcmVxdWVzdCwgY29udGFpbmluZyB0aGUgb3JpZ2luLlxuICAgKi9cbiAgYXN5bmMgbmV3UmVxdWVzdEVuY3J5cHRpb25QdWJsaWNLZXkoXG4gICAgYWRkcmVzczogc3RyaW5nLFxuICAgIHJlcTogT3JpZ2luYWxSZXF1ZXN0LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGtleXJpbmcgPSBhd2FpdCB0aGlzLl9rZXlyaW5nQ29udHJvbGxlci5nZXRLZXlyaW5nRm9yQWNjb3VudChhZGRyZXNzKTtcblxuICAgIHN3aXRjaCAoa2V5cmluZy50eXBlKSB7XG4gICAgICBjYXNlIEtleXJpbmdUeXBlLmxlZGdlcjoge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4ge1xuICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgIG5ldyBFcnJvcignTGVkZ2VyIGRvZXMgbm90IHN1cHBvcnQgZXRoX2dldEVuY3J5cHRpb25QdWJsaWNLZXkuJyksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgS2V5cmluZ1R5cGUudHJlem9yOiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgbmV3IEVycm9yKCdUcmV6b3IgZG9lcyBub3Qgc3VwcG9ydCBldGhfZ2V0RW5jcnlwdGlvblB1YmxpY0tleS4nKSxcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY2FzZSBLZXlyaW5nVHlwZS5sYXR0aWNlOiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgbmV3IEVycm9yKCdMYXR0aWNlIGRvZXMgbm90IHN1cHBvcnQgZXRoX2dldEVuY3J5cHRpb25QdWJsaWNLZXkuJyksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgS2V5cmluZ1R5cGUucXI6IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgICAgIG5ldyBFcnJvcignUVIgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBldGhfZ2V0RW5jcnlwdGlvblB1YmxpY0tleS4nKSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5jcnlwdGlvblB1YmxpY0tleU1hbmFnZXIuYWRkVW5hcHByb3ZlZE1lc3NhZ2VBc3luYyhcbiAgICAgICAgICB7IGZyb206IGFkZHJlc3MgfSxcbiAgICAgICAgICByZXEsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNpZ25pZmllcyBhIHVzZXIncyBhcHByb3ZhbCB0byByZWNlaXZpbmcgZW5jcnlwdGlvbiBwdWJsaWMga2V5IGluIHF1ZXVlLlxuICAgKlxuICAgKiBAcGFyYW0gbXNnUGFyYW1zIC0gVGhlIHBhcmFtcyBvZiB0aGUgbWVzc2FnZSB0byByZWNlaXZlICYgcmV0dXJuIHRvIHRoZSBEYXBwLlxuICAgKiBAcmV0dXJucyBBIGZ1bGwgc3RhdGUgdXBkYXRlLlxuICAgKi9cbiAgYXN5bmMgZW5jcnlwdGlvblB1YmxpY0tleShtc2dQYXJhbXM6IEVuY3J5cHRpb25QdWJsaWNLZXlQYXJhbXNNZXRhbWFzaykge1xuICAgIGxvZy5pbmZvKCdNZXRhTWFza0NvbnRyb2xsZXIgLSBlbmNyeXB0aW9uUHVibGljS2V5Jyk7XG4gICAgY29uc3QgbWVzc2FnZUlkID0gbXNnUGFyYW1zLm1ldGFtYXNrSWQgYXMgc3RyaW5nO1xuICAgIC8vIHNldHMgdGhlIHN0YXR1cyBvcCB0aGUgbWVzc2FnZSB0byAnYXBwcm92ZWQnXG4gICAgLy8gYW5kIHJlbW92ZXMgdGhlIG1ldGFtYXNrSWQgZm9yIGRlY3J5cHRpb25cbiAgICB0cnkge1xuICAgICAgY29uc3QgY2xlYW5NZXNzYWdlUGFyYW1zID1cbiAgICAgICAgYXdhaXQgdGhpcy5fZW5jcnlwdGlvblB1YmxpY0tleU1hbmFnZXIuYXBwcm92ZU1lc3NhZ2UobXNnUGFyYW1zKTtcblxuICAgICAgLy8gRW5jcnlwdGlvblB1YmxpY0tleSBtZXNzYWdlXG4gICAgICBjb25zdCBwdWJsaWNLZXkgPSBhd2FpdCB0aGlzLl9rZXlyaW5nQ29udHJvbGxlci5nZXRFbmNyeXB0aW9uUHVibGljS2V5KFxuICAgICAgICBjbGVhbk1lc3NhZ2VQYXJhbXMuZnJvbSxcbiAgICAgICk7XG5cbiAgICAgIC8vIHRlbGxzIHRoZSBsaXN0ZW5lciB0aGF0IHRoZSBtZXNzYWdlIGhhcyBiZWVuIHByb2Nlc3NlZFxuICAgICAgLy8gYW5kIGNhbiBiZSByZXR1cm5lZCB0byB0aGUgZGFwcFxuICAgICAgdGhpcy5fZW5jcnlwdGlvblB1YmxpY0tleU1hbmFnZXIuc2V0TWVzc2FnZVN0YXR1c0FuZFJlc3VsdChcbiAgICAgICAgbWVzc2FnZUlkLFxuICAgICAgICBwdWJsaWNLZXksXG4gICAgICAgICdyZWNlaXZlZCcsXG4gICAgICApO1xuXG4gICAgICB0aGlzLl9hY2NlcHRBcHByb3ZhbChtZXNzYWdlSWQpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fZ2V0U3RhdGUoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nLmluZm8oXG4gICAgICAgICdNZXRhTWFza0NvbnRyb2xsZXIgLSBldGhfZ2V0RW5jcnlwdGlvblB1YmxpY0tleSBmYWlsZWQuJyxcbiAgICAgICAgZXJyb3IsXG4gICAgICApO1xuICAgICAgdGhpcy5fY2FuY2VsQWJzdHJhY3RNZXNzYWdlKHRoaXMuX2VuY3J5cHRpb25QdWJsaWNLZXlNYW5hZ2VyLCBtZXNzYWdlSWQpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gY2FuY2VsIGEgbWVzc2FnZSBzdWJtaXR0ZWQgdmlhIGV0aF9nZXRFbmNyeXB0aW9uUHVibGljS2V5LlxuICAgKlxuICAgKiBAcGFyYW0gbXNnSWQgLSBUaGUgaWQgb2YgdGhlIG1lc3NhZ2UgdG8gY2FuY2VsLlxuICAgKi9cbiAgY2FuY2VsRW5jcnlwdGlvblB1YmxpY0tleShtc2dJZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbmNlbEFic3RyYWN0TWVzc2FnZSh0aGlzLl9lbmNyeXB0aW9uUHVibGljS2V5TWFuYWdlciwgbXNnSWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlamVjdCBhbGwgdW5hcHByb3ZlZCBtZXNzYWdlcyBvZiBhbnkgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHJlYXNvbiAtIEEgbWVzc2FnZSB0byBpbmRpY2F0ZSB3aHkuXG4gICAqL1xuICByZWplY3RVbmFwcHJvdmVkKHJlYXNvbj86IHN0cmluZykge1xuICAgIE9iamVjdC5rZXlzKFxuICAgICAgdGhpcy5fZW5jcnlwdGlvblB1YmxpY0tleU1hbmFnZXIuZ2V0VW5hcHByb3ZlZE1lc3NhZ2VzKCksXG4gICAgKS5mb3JFYWNoKChtZXNzYWdlSWQpID0+IHtcbiAgICAgIHRoaXMuX2NhbmNlbEFic3RyYWN0TWVzc2FnZShcbiAgICAgICAgdGhpcy5fZW5jcnlwdGlvblB1YmxpY0tleU1hbmFnZXIsXG4gICAgICAgIG1lc3NhZ2VJZCxcbiAgICAgICAgcmVhc29uLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgYWxsIHVuYXBwcm92ZWQgbWVzc2FnZXMgZnJvbSBtZW1vcnkuXG4gICAqL1xuICBjbGVhclVuYXBwcm92ZWQoKSB7XG4gICAgdGhpcy5fZW5jcnlwdGlvblB1YmxpY0tleU1hbmFnZXIudXBkYXRlKHtcbiAgICAgIHVuYXBwcm92ZWRNZXNzYWdlczoge30sXG4gICAgICB1bmFwcHJvdmVkTWVzc2FnZXNDb3VudDogMCxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX2NhbmNlbEFic3RyYWN0TWVzc2FnZShcbiAgICBtZXNzYWdlTWFuYWdlcjogQWJzdHJhY3RNZXNzYWdlTWFuYWdlcjxcbiAgICAgIEFic3RyYWN0TWVzc2FnZSxcbiAgICAgIEFic3RyYWN0TWVzc2FnZVBhcmFtcyxcbiAgICAgIEFic3RyYWN0TWVzc2FnZVBhcmFtc01ldGFtYXNrXG4gICAgPixcbiAgICBtZXNzYWdlSWQ6IHN0cmluZyxcbiAgICByZWFzb24/OiBzdHJpbmcsXG4gICkge1xuICAgIGlmIChyZWFzb24pIHtcbiAgICAgIHRoaXMuX21ldHJpY3NFdmVudCh7XG4gICAgICAgIGV2ZW50OiByZWFzb24sXG4gICAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuTWVzc2FnZXMsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBhY3Rpb246ICdFbmNyeXB0aW9uIHB1YmxpYyBrZXkgUmVxdWVzdCcsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBtZXNzYWdlTWFuYWdlci5yZWplY3RNZXNzYWdlKG1lc3NhZ2VJZCk7XG4gICAgdGhpcy5fcmVqZWN0QXBwcm92YWwobWVzc2FnZUlkKTtcblxuICAgIHJldHVybiB0aGlzLl9nZXRTdGF0ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfc3Vic2NyaWJlVG9NZXNzYWdlU3RhdGUoXG4gICAgbWVzc2FnZU1hbmFnZXI6IEFic3RyYWN0TWVzc2FnZU1hbmFnZXI8XG4gICAgICBBYnN0cmFjdE1lc3NhZ2UsXG4gICAgICBBYnN0cmFjdE1lc3NhZ2VQYXJhbXMsXG4gICAgICBBYnN0cmFjdE1lc3NhZ2VQYXJhbXNNZXRhbWFza1xuICAgID4sXG4gICAgdXBkYXRlU3RhdGU6IChcbiAgICAgIHN0YXRlOiBFbmNyeXB0aW9uUHVibGljS2V5Q29udHJvbGxlclN0YXRlLFxuICAgICAgbmV3TWVzc2FnZXM6IFJlY29yZDxzdHJpbmcsIFN0YXRlTWVzc2FnZT4sXG4gICAgICBtZXNzYWdlQ291bnQ6IG51bWJlcixcbiAgICApID0+IHZvaWQsXG4gICkge1xuICAgIG1lc3NhZ2VNYW5hZ2VyLnN1YnNjcmliZSgoc3RhdGU6IE1lc3NhZ2VNYW5hZ2VyU3RhdGU8QWJzdHJhY3RNZXNzYWdlPikgPT4ge1xuICAgICAgY29uc3QgbmV3TWVzc2FnZXMgPSB0aGlzLl9taWdyYXRlTWVzc2FnZXMoXG4gICAgICAgIHN0YXRlLnVuYXBwcm92ZWRNZXNzYWdlcyBhcyBhbnksXG4gICAgICApO1xuICAgICAgdGhpcy51cGRhdGUoKGRyYWZ0U3RhdGUpID0+IHtcbiAgICAgICAgdXBkYXRlU3RhdGUoZHJhZnRTdGF0ZSwgbmV3TWVzc2FnZXMsIHN0YXRlLnVuYXBwcm92ZWRNZXNzYWdlc0NvdW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfbWlncmF0ZU1lc3NhZ2VzKFxuICAgIGNvcmVNZXNzYWdlczogUmVjb3JkPHN0cmluZywgQ29yZU1lc3NhZ2U+LFxuICApOiBSZWNvcmQ8c3RyaW5nLCBTdGF0ZU1lc3NhZ2U+IHtcbiAgICBjb25zdCBzdGF0ZU1lc3NhZ2VzOiBSZWNvcmQ8c3RyaW5nLCBTdGF0ZU1lc3NhZ2U+ID0ge307XG5cbiAgICBmb3IgKGNvbnN0IG1lc3NhZ2VJZCBvZiBPYmplY3Qua2V5cyhjb3JlTWVzc2FnZXMpKSB7XG4gICAgICBjb25zdCBjb3JlTWVzc2FnZSA9IGNvcmVNZXNzYWdlc1ttZXNzYWdlSWRdO1xuICAgICAgY29uc3Qgc3RhdGVNZXNzYWdlID0gdGhpcy5fbWlncmF0ZU1lc3NhZ2UoY29yZU1lc3NhZ2UpO1xuICAgICAgc3RhdGVNZXNzYWdlc1ttZXNzYWdlSWRdID0gc3RhdGVNZXNzYWdlO1xuICAgIH1cblxuICAgIHJldHVybiBzdGF0ZU1lc3NhZ2VzO1xuICB9XG5cbiAgcHJpdmF0ZSBfbWlncmF0ZU1lc3NhZ2UoY29yZU1lc3NhZ2U6IENvcmVNZXNzYWdlKTogU3RhdGVNZXNzYWdlIHtcbiAgICBjb25zdCB7IG1lc3NhZ2VQYXJhbXMsIC4uLmNvcmVNZXNzYWdlRGF0YSB9ID0gY29yZU1lc3NhZ2U7XG5cbiAgICAvLyBDb3JlIG1lc3NhZ2UgbWFuYWdlcnMgdXNlIG1lc3NhZ2VQYXJhbXMgYnV0IGZyb250ZW5kIHVzZXMgbXNnUGFyYW1zIHdpdGggbG90cyBvZiByZWZlcmVuY2VzXG4gICAgY29uc3Qgc3RhdGVNZXNzYWdlID0ge1xuICAgICAgLi4uY29yZU1lc3NhZ2VEYXRhLFxuICAgICAgcmF3U2lnOiBjb3JlTWVzc2FnZS5yYXdTaWcgYXMgc3RyaW5nLFxuICAgICAgbXNnUGFyYW1zOiBtZXNzYWdlUGFyYW1zLmZyb20sXG4gICAgICBvcmlnaW46IG1lc3NhZ2VQYXJhbXMub3JpZ2luLFxuICAgIH07XG5cbiAgICByZXR1cm4gc3RhdGVNZXNzYWdlO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVxdWVzdEFwcHJvdmFsKFxuICAgIG1zZ1BhcmFtczogQWJzdHJhY3RNZXNzYWdlUGFyYW1zTWV0YW1hc2ssXG4gICAgdHlwZTogc3RyaW5nLFxuICApIHtcbiAgICBjb25zdCBpZCA9IG1zZ1BhcmFtcy5tZXRhbWFza0lkIGFzIHN0cmluZztcbiAgICBjb25zdCBvcmlnaW4gPSBtc2dQYXJhbXMub3JpZ2luIHx8IE9SSUdJTl9NRVRBTUFTSztcblxuICAgIHRoaXMubWVzc2FnaW5nU3lzdGVtXG4gICAgICAuY2FsbChcbiAgICAgICAgJ0FwcHJvdmFsQ29udHJvbGxlcjphZGRSZXF1ZXN0JyxcbiAgICAgICAge1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIG9yaWdpbixcbiAgICAgICAgICB0eXBlLFxuICAgICAgICB9LFxuICAgICAgICB0cnVlLFxuICAgICAgKVxuICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgLy8gSW50ZW50aW9uYWxseSBpZ25vcmVkIGFzIHByb21pc2Ugbm90IGN1cnJlbnRseSB1c2VkXG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX2FjY2VwdEFwcHJvdmFsKG1lc3NhZ2VJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5tZXNzYWdpbmdTeXN0ZW0uY2FsbCgnQXBwcm92YWxDb250cm9sbGVyOmFjY2VwdFJlcXVlc3QnLCBtZXNzYWdlSWQpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVqZWN0QXBwcm92YWwobWVzc2FnZUlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLm1lc3NhZ2luZ1N5c3RlbS5jYWxsKFxuICAgICAgJ0FwcHJvdmFsQ29udHJvbGxlcjpyZWplY3RSZXF1ZXN0JyxcbiAgICAgIG1lc3NhZ2VJZCxcbiAgICAgICdDYW5jZWwnLFxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFdlYjNQcm92aWRlciB9IGZyb20gJ0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycyc7XG5pbXBvcnQgZW5zTmV0d29ya01hcCBmcm9tICdldGhlcmV1bS1lbnMtbmV0d29yay1tYXAnO1xuaW1wb3J0IHsgTkVUV09SS19JRF9UT19FVEhFUlNfTkVUV09SS19OQU1FX01BUCB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbmV0d29yayc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVucyB7XG4gIHN0YXRpYyBnZXROZXR3b3JrRW5zU3VwcG9ydChuZXR3b3JrKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oZW5zTmV0d29ya01hcFtuZXR3b3JrXSk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcih7IG5ldHdvcmssIHByb3ZpZGVyIH0gPSB7fSkge1xuICAgIGNvbnN0IG5ldHdvcmtOYW1lID0gTkVUV09SS19JRF9UT19FVEhFUlNfTkVUV09SS19OQU1FX01BUFtuZXR3b3JrXTtcbiAgICBjb25zdCBlbnNBZGRyZXNzID0gZW5zTmV0d29ya01hcFtuZXR3b3JrXTtcbiAgICBjb25zdCBldGhQcm92aWRlciA9IG5ldyBXZWIzUHJvdmlkZXIocHJvdmlkZXIsIHtcbiAgICAgIGNoYWluSWQ6IHBhcnNlSW50KG5ldHdvcmssIDEwKSxcbiAgICAgIG5hbWU6IG5ldHdvcmtOYW1lLFxuICAgICAgZW5zQWRkcmVzcyxcbiAgICB9KTtcbiAgICB0aGlzLl9ldGhQcm92aWRlciA9IGV0aFByb3ZpZGVyO1xuICB9XG5cbiAgbG9va3VwKGVuc05hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fZXRoUHJvdmlkZXIucmVzb2x2ZU5hbWUoZW5zTmFtZSk7XG4gIH1cblxuICByZXZlcnNlKGFkZHJlc3MpIHtcbiAgICByZXR1cm4gdGhpcy5fZXRoUHJvdmlkZXIubG9va3VwQWRkcmVzcyhhZGRyZXNzKTtcbiAgfVxufVxuIiwiaW1wb3J0IHB1bnljb2RlIGZyb20gJ3B1bnljb2RlL3B1bnljb2RlJztcbmltcG9ydCB7IE9ic2VydmFibGVTdG9yZSB9IGZyb20gJ0BtZXRhbWFzay9vYnMtc3RvcmUnO1xuaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5pbXBvcnQgeyBDSEFJTl9JRF9UT19ORVRXT1JLX0lEX01BUCB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbmV0d29yayc7XG5pbXBvcnQgeyB0b0NoZWNrc3VtSGV4QWRkcmVzcyB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL2hleHN0cmluZy11dGlscyc7XG5pbXBvcnQgRW5zIGZyb20gJy4vZW5zJztcblxuY29uc3QgWkVST19BRERSRVNTID0gJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCc7XG5jb25zdCBaRVJPX1hfRVJST1JfQUREUkVTUyA9ICcweCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVuc0NvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3Rvcih7IGVucywgcHJvdmlkZXIsIG9uTmV0d29ya0RpZENoYW5nZSwgZ2V0Q3VycmVudENoYWluSWQgfSA9IHt9KSB7XG4gICAgY29uc3QgaW5pdFN0YXRlID0ge1xuICAgICAgZW5zUmVzb2x1dGlvbnNCeUFkZHJlc3M6IHt9LFxuICAgIH07XG5cbiAgICB0aGlzLl9lbnMgPSBlbnM7XG4gICAgaWYgKCF0aGlzLl9lbnMpIHtcbiAgICAgIGNvbnN0IGNoYWluSWQgPSBnZXRDdXJyZW50Q2hhaW5JZCgpO1xuICAgICAgY29uc3QgbmV0d29yayA9IENIQUlOX0lEX1RPX05FVFdPUktfSURfTUFQW2NoYWluSWRdO1xuICAgICAgaWYgKEVucy5nZXROZXR3b3JrRW5zU3VwcG9ydChuZXR3b3JrKSkge1xuICAgICAgICB0aGlzLl9lbnMgPSBuZXcgRW5zKHtcbiAgICAgICAgICBuZXR3b3JrLFxuICAgICAgICAgIHByb3ZpZGVyLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnN0b3JlID0gbmV3IE9ic2VydmFibGVTdG9yZShpbml0U3RhdGUpO1xuXG4gICAgdGhpcy5yZXNldFN0YXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZShpbml0U3RhdGUpO1xuICAgIH07XG5cbiAgICBvbk5ldHdvcmtEaWRDaGFuZ2UoKCkgPT4ge1xuICAgICAgdGhpcy5zdG9yZS5wdXRTdGF0ZShpbml0U3RhdGUpO1xuICAgICAgY29uc3QgY2hhaW5JZCA9IGdldEN1cnJlbnRDaGFpbklkKCk7XG4gICAgICBjb25zdCBuZXR3b3JrID0gQ0hBSU5fSURfVE9fTkVUV09SS19JRF9NQVBbY2hhaW5JZF07XG4gICAgICBpZiAoRW5zLmdldE5ldHdvcmtFbnNTdXBwb3J0KG5ldHdvcmspKSB7XG4gICAgICAgIHRoaXMuX2VucyA9IG5ldyBFbnMoe1xuICAgICAgICAgIG5ldHdvcmssXG4gICAgICAgICAgcHJvdmlkZXIsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2VucztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldmVyc2VSZXNvbHZlQWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JldmVyc2VSZXNvbHZlQWRkcmVzcyh0b0NoZWNrc3VtSGV4QWRkcmVzcyhhZGRyZXNzKSk7XG4gIH1cblxuICBhc3luYyBfcmV2ZXJzZVJlc29sdmVBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICBpZiAoIXRoaXMuX2Vucykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBpZiAoc3RhdGUuZW5zUmVzb2x1dGlvbnNCeUFkZHJlc3NbYWRkcmVzc10pIHtcbiAgICAgIHJldHVybiBzdGF0ZS5lbnNSZXNvbHV0aW9uc0J5QWRkcmVzc1thZGRyZXNzXTtcbiAgICB9XG5cbiAgICBsZXQgZG9tYWluO1xuICAgIHRyeSB7XG4gICAgICBkb21haW4gPSBhd2FpdCB0aGlzLl9lbnMucmV2ZXJzZShhZGRyZXNzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nLmRlYnVnKGVycm9yKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgbGV0IHJlZ2lzdGVyZWRBZGRyZXNzO1xuICAgIHRyeSB7XG4gICAgICByZWdpc3RlcmVkQWRkcmVzcyA9IGF3YWl0IHRoaXMuX2Vucy5sb29rdXAoZG9tYWluKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nLmRlYnVnKGVycm9yKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgcmVnaXN0ZXJlZEFkZHJlc3MgPT09IFpFUk9fQUREUkVTUyB8fFxuICAgICAgcmVnaXN0ZXJlZEFkZHJlc3MgPT09IFpFUk9fWF9FUlJPUl9BRERSRVNTXG4gICAgKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICh0b0NoZWNrc3VtSGV4QWRkcmVzcyhyZWdpc3RlcmVkQWRkcmVzcykgIT09IGFkZHJlc3MpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdGhpcy5fdXBkYXRlUmVzb2x1dGlvbnNCeUFkZHJlc3MoYWRkcmVzcywgcHVueWNvZGUudG9BU0NJSShkb21haW4pKTtcbiAgICByZXR1cm4gZG9tYWluO1xuICB9XG5cbiAgX3VwZGF0ZVJlc29sdXRpb25zQnlBZGRyZXNzKGFkZHJlc3MsIGRvbWFpbikge1xuICAgIGNvbnN0IG9sZFN0YXRlID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHRoaXMuc3RvcmUucHV0U3RhdGUoe1xuICAgICAgZW5zUmVzb2x1dGlvbnNCeUFkZHJlc3M6IHtcbiAgICAgICAgLi4ub2xkU3RhdGUuZW5zUmVzb2x1dGlvbnNCeUFkZHJlc3MsXG4gICAgICAgIFthZGRyZXNzXTogZG9tYWluLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZVN0b3JlIH0gZnJvbSAnQG1ldGFtYXNrL29icy1zdG9yZSc7XG5pbXBvcnQgbG9nIGZyb20gJ2xvZ2xldmVsJztcbmltcG9ydCBCTiBmcm9tICdibi5qcyc7XG5pbXBvcnQgY3JlYXRlSWQgZnJvbSAnLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvcmFuZG9tLWlkJztcbmltcG9ydCB7IHByZXZpb3VzVmFsdWVDb21wYXJhdG9yIH0gZnJvbSAnLi4vbGliL3V0aWwnO1xuaW1wb3J0IGdldEZldGNoV2l0aFRpbWVvdXQgZnJvbSAnLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvZmV0Y2gtd2l0aC10aW1lb3V0JztcblxuaW1wb3J0IHtcbiAgVHJhbnNhY3Rpb25UeXBlLFxuICBUcmFuc2FjdGlvblN0YXR1cyxcbn0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy90cmFuc2FjdGlvbic7XG5pbXBvcnQgeyBFVEhFUlNDQU5fU1VQUE9SVEVEX05FVFdPUktTIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9uZXR3b3JrJztcbmltcG9ydCB7IGJuVG9IZXggfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9jb252ZXJzaW9uLnV0aWxzJztcblxuY29uc3QgZmV0Y2hXaXRoVGltZW91dCA9IGdldEZldGNoV2l0aFRpbWVvdXQoKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL3RyYW5zYWN0aW9uJykuVHJhbnNhY3Rpb25NZXRhfSBUcmFuc2FjdGlvbk1ldGFcbiAqL1xuXG4vKipcbiAqIEEgdHJhbnNhY3Rpb24gb2JqZWN0IGluIHRoZSBmb3JtYXQgcmV0dXJuZWQgYnkgdGhlIEV0aGVyc2NhbiBBUEkuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgaXMgbm90IGFuIGV4aGF1c3RpdmUgdHlwZSBkZWZpbml0b247IG9ubHkgdGhlIHByb3BlcnRpZXMgd2UgdXNlIGFyZSBkZWZpbmVkXG4gKlxuICogQHR5cGVkZWYge29iamVjdH0gRXRoZXJzY2FuVHJhbnNhY3Rpb25cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBibG9ja051bWJlciAtIFRoZSBudW1iZXIgb2YgdGhlIGJsb2NrIHRoaXMgdHJhbnNhY3Rpb24gd2FzIGZvdW5kIGluLCBpbiBkZWNpbWFsXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZnJvbSAtIFRoZSBoZXgtcHJlZml4ZWQgYWRkcmVzcyBvZiB0aGUgc2VuZGVyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZ2FzIC0gVGhlIGdhcyBsaW1pdCwgaW4gZGVjaW1hbCBHV0VJXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2dhc1ByaWNlXSAtIFRoZSBnYXMgcHJpY2UsIGluIGRlY2ltYWwgV0VJXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW21heEZlZVBlckdhc10gLSBUaGUgbWF4aW11bSBmZWUgcGVyIGdhcywgaW5jbHVzaXZlIG9mIHRpcCwgaW4gZGVjaW1hbCBXRUlcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbWF4UHJpb3JpdHlGZWVQZXJHYXNdIC0gVGhlIG1heGltdW0gdGlwIHBlciBnYXMgaW4gZGVjaW1hbCBXRUlcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBoYXNoIC0gVGhlIGhleC1wcmVmaXhlZCB0cmFuc2FjdGlvbiBoYXNoXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaXNFcnJvciAtIFdoZXRoZXIgdGhlIHRyYW5zYWN0aW9uIHdhcyBjb25maXJtZWQgb3IgZmFpbGVkICgwIGZvciBjb25maXJtZWQsIDEgZm9yIGZhaWxlZClcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBub25jZSAtIFRoZSB0cmFuc2FjdGlvbiBub25jZSwgaW4gZGVjaW1hbFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHRpbWVTdGFtcCAtIFRoZSB0aW1lc3RhbXAgZm9yIHRoZSB0cmFuc2FjdGlvbiwgaW4gc2Vjb25kc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHRvIC0gVGhlIGhleC1wcmVmaXhlZCBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBhbW91bnQgb2YgRVRIIHNlbnQgaW4gdGhpcyB0cmFuc2FjdGlvbiwgaW4gZGVjaW1hbCBXRUlcbiAqL1xuXG4vKipcbiAqIFRoaXMgY29udHJvbGxlciBpcyByZXNwb25zaWJsZSBmb3IgcmV0cmlldmluZyBpbmNvbWluZyB0cmFuc2FjdGlvbnMuIEV0aGVyc2NhbiBpcyBwb2xsZWQgb25jZSBldmVyeSBibG9jayB0byBjaGVja1xuICogZm9yIG5ldyBpbmNvbWluZyB0cmFuc2FjdGlvbnMgZm9yIHRoZSBjdXJyZW50IHNlbGVjdGVkIGFjY291bnQgb24gdGhlIGN1cnJlbnQgbmV0d29ya1xuICpcbiAqIE5vdGUgdGhhdCBvbmx5IEV0aGVyc2Nhbi1jb21wYXRpYmxlIG5ldHdvcmtzIGFyZSBzdXBwb3J0ZWQuIFdlIHdpbGwgbm90IGF0dGVtcHQgdG8gcmV0cmlldmUgaW5jb21pbmcgdHJhbnNhY3Rpb25zXG4gKiBvbiBub24tY29tcGF0aWJsZSBjdXN0b20gUlBDIGVuZHBvaW50cy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5jb21pbmdUcmFuc2FjdGlvbnNDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgY29uc3Qge1xuICAgICAgYmxvY2tUcmFja2VyLFxuICAgICAgb25OZXR3b3JrRGlkQ2hhbmdlLFxuICAgICAgZ2V0Q3VycmVudENoYWluSWQsXG4gICAgICBwcmVmZXJlbmNlc0NvbnRyb2xsZXIsXG4gICAgICBvbmJvYXJkaW5nQ29udHJvbGxlcixcbiAgICB9ID0gb3B0cztcbiAgICB0aGlzLmJsb2NrVHJhY2tlciA9IGJsb2NrVHJhY2tlcjtcbiAgICB0aGlzLmdldEN1cnJlbnRDaGFpbklkID0gZ2V0Q3VycmVudENoYWluSWQ7XG4gICAgdGhpcy5wcmVmZXJlbmNlc0NvbnRyb2xsZXIgPSBwcmVmZXJlbmNlc0NvbnRyb2xsZXI7XG4gICAgdGhpcy5vbmJvYXJkaW5nQ29udHJvbGxlciA9IG9uYm9hcmRpbmdDb250cm9sbGVyO1xuXG4gICAgdGhpcy5fb25MYXRlc3RCbG9jayA9IGFzeW5jIChuZXdCbG9ja051bWJlckhleCkgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0ZWRBZGRyZXNzID0gdGhpcy5wcmVmZXJlbmNlc0NvbnRyb2xsZXIuZ2V0U2VsZWN0ZWRBZGRyZXNzKCk7XG4gICAgICBjb25zdCBuZXdCbG9ja051bWJlckRlYyA9IHBhcnNlSW50KG5ld0Jsb2NrTnVtYmVySGV4LCAxNik7XG4gICAgICBhd2FpdCB0aGlzLl91cGRhdGUoc2VsZWN0ZWRBZGRyZXNzLCBuZXdCbG9ja051bWJlckRlYyk7XG4gICAgfTtcblxuICAgIGNvbnN0IGluY29taW5nVHhMYXN0RmV0Y2hlZEJsb2NrQnlDaGFpbklkID0gT2JqZWN0LmtleXMoXG4gICAgICBFVEhFUlNDQU5fU1VQUE9SVEVEX05FVFdPUktTLFxuICAgICkucmVkdWNlKChuZXR3b3JrLCBjaGFpbklkKSA9PiB7XG4gICAgICBuZXR3b3JrW2NoYWluSWRdID0gbnVsbDtcbiAgICAgIHJldHVybiBuZXR3b3JrO1xuICAgIH0sIHt9KTtcblxuICAgIGNvbnN0IGluaXRTdGF0ZSA9IHtcbiAgICAgIGluY29taW5nVHJhbnNhY3Rpb25zOiB7fSxcbiAgICAgIGluY29taW5nVHhMYXN0RmV0Y2hlZEJsb2NrQnlDaGFpbklkLFxuICAgICAgLi4ub3B0cy5pbml0U3RhdGUsXG4gICAgfTtcbiAgICB0aGlzLnN0b3JlID0gbmV3IE9ic2VydmFibGVTdG9yZShpbml0U3RhdGUpO1xuXG4gICAgdGhpcy5wcmVmZXJlbmNlc0NvbnRyb2xsZXIuc3RvcmUuc3Vic2NyaWJlKFxuICAgICAgcHJldmlvdXNWYWx1ZUNvbXBhcmF0b3IoKHByZXZTdGF0ZSwgY3VyclN0YXRlKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBmZWF0dXJlRmxhZ3M6IHtcbiAgICAgICAgICAgIHNob3dJbmNvbWluZ1RyYW5zYWN0aW9uczogcHJldlNob3dJbmNvbWluZ1RyYW5zYWN0aW9ucyxcbiAgICAgICAgICB9ID0ge30sXG4gICAgICAgIH0gPSBwcmV2U3RhdGU7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBmZWF0dXJlRmxhZ3M6IHtcbiAgICAgICAgICAgIHNob3dJbmNvbWluZ1RyYW5zYWN0aW9uczogY3VyclNob3dJbmNvbWluZ1RyYW5zYWN0aW9ucyxcbiAgICAgICAgICB9ID0ge30sXG4gICAgICAgIH0gPSBjdXJyU3RhdGU7XG5cbiAgICAgICAgaWYgKGN1cnJTaG93SW5jb21pbmdUcmFuc2FjdGlvbnMgPT09IHByZXZTaG93SW5jb21pbmdUcmFuc2FjdGlvbnMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJldlNob3dJbmNvbWluZ1RyYW5zYWN0aW9ucyAmJiAhY3VyclNob3dJbmNvbWluZ1RyYW5zYWN0aW9ucykge1xuICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICAgIH0sIHRoaXMucHJlZmVyZW5jZXNDb250cm9sbGVyLnN0b3JlLmdldFN0YXRlKCkpLFxuICAgICk7XG5cbiAgICB0aGlzLnByZWZlcmVuY2VzQ29udHJvbGxlci5zdG9yZS5zdWJzY3JpYmUoXG4gICAgICBwcmV2aW91c1ZhbHVlQ29tcGFyYXRvcihhc3luYyAocHJldlN0YXRlLCBjdXJyU3RhdGUpID0+IHtcbiAgICAgICAgY29uc3QgeyBzZWxlY3RlZEFkZHJlc3M6IHByZXZTZWxlY3RlZEFkZHJlc3MgfSA9IHByZXZTdGF0ZTtcbiAgICAgICAgY29uc3QgeyBzZWxlY3RlZEFkZHJlc3M6IGN1cnJTZWxlY3RlZEFkZHJlc3MgfSA9IGN1cnJTdGF0ZTtcblxuICAgICAgICBpZiAoY3VyclNlbGVjdGVkQWRkcmVzcyA9PT0gcHJldlNlbGVjdGVkQWRkcmVzcykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLl91cGRhdGUoY3VyclNlbGVjdGVkQWRkcmVzcyk7XG4gICAgICB9LCB0aGlzLnByZWZlcmVuY2VzQ29udHJvbGxlci5zdG9yZS5nZXRTdGF0ZSgpKSxcbiAgICApO1xuXG4gICAgdGhpcy5vbmJvYXJkaW5nQ29udHJvbGxlci5zdG9yZS5zdWJzY3JpYmUoXG4gICAgICBwcmV2aW91c1ZhbHVlQ29tcGFyYXRvcihhc3luYyAocHJldlN0YXRlLCBjdXJyU3RhdGUpID0+IHtcbiAgICAgICAgY29uc3QgeyBjb21wbGV0ZWRPbmJvYXJkaW5nOiBwcmV2Q29tcGxldGVkT25ib2FyZGluZyB9ID0gcHJldlN0YXRlO1xuICAgICAgICBjb25zdCB7IGNvbXBsZXRlZE9uYm9hcmRpbmc6IGN1cnJDb21wbGV0ZWRPbmJvYXJkaW5nIH0gPSBjdXJyU3RhdGU7XG4gICAgICAgIGlmICghcHJldkNvbXBsZXRlZE9uYm9hcmRpbmcgJiYgY3VyckNvbXBsZXRlZE9uYm9hcmRpbmcpIHtcbiAgICAgICAgICBjb25zdCBhZGRyZXNzID0gdGhpcy5wcmVmZXJlbmNlc0NvbnRyb2xsZXIuZ2V0U2VsZWN0ZWRBZGRyZXNzKCk7XG4gICAgICAgICAgYXdhaXQgdGhpcy5fdXBkYXRlKGFkZHJlc3MpO1xuICAgICAgICB9XG4gICAgICB9LCB0aGlzLm9uYm9hcmRpbmdDb250cm9sbGVyLnN0b3JlLmdldFN0YXRlKCkpLFxuICAgICk7XG5cbiAgICBvbk5ldHdvcmtEaWRDaGFuZ2UoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYWRkcmVzcyA9IHRoaXMucHJlZmVyZW5jZXNDb250cm9sbGVyLmdldFNlbGVjdGVkQWRkcmVzcygpO1xuICAgICAgYXdhaXQgdGhpcy5fdXBkYXRlKGFkZHJlc3MpO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgY29uc3QgeyBmZWF0dXJlRmxhZ3MgPSB7fSB9ID0gdGhpcy5wcmVmZXJlbmNlc0NvbnRyb2xsZXIuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCB7IHNob3dJbmNvbWluZ1RyYW5zYWN0aW9ucyB9ID0gZmVhdHVyZUZsYWdzO1xuXG4gICAgaWYgKCFzaG93SW5jb21pbmdUcmFuc2FjdGlvbnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmJsb2NrVHJhY2tlci5yZW1vdmVMaXN0ZW5lcignbGF0ZXN0JywgdGhpcy5fb25MYXRlc3RCbG9jayk7XG4gICAgdGhpcy5ibG9ja1RyYWNrZXIuYWRkTGlzdGVuZXIoJ2xhdGVzdCcsIHRoaXMuX29uTGF0ZXN0QmxvY2spO1xuICB9XG5cbiAgc3RvcCgpIHtcbiAgICB0aGlzLmJsb2NrVHJhY2tlci5yZW1vdmVMaXN0ZW5lcignbGF0ZXN0JywgdGhpcy5fb25MYXRlc3RCbG9jayk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgY29ycmVjdCBibG9jayBudW1iZXIgdG8gYmVnaW4gbG9va2luZyBmb3IgbmV3IHRyYW5zYWN0aW9uc1xuICAgKiBmcm9tLCBmZXRjaGVzIHRoZSB0cmFuc2FjdGlvbnMgYW5kIHRoZW4gc2F2ZXMgdGhlbSBhbmQgdGhlIG5leHQgYmxvY2tcbiAgICogbnVtYmVyIHRvIGJlZ2luIGZldGNoaW5nIGZyb20gaW4gc3RhdGUuIEJsb2NrIG51bWJlcnMgYW5kIHRyYW5zYWN0aW9ucyBhcmVcbiAgICogc3RvcmVkIHBlciBjaGFpbklkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzcyAtIGFkZHJlc3MgdG8gbG9va3VwIHRyYW5zYWN0aW9ucyBmb3JcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtuZXdCbG9ja051bWJlckRlY10gLSBibG9jayBudW1iZXIgdG8gYmVnaW4gZmV0Y2hpbmcgZnJvbVxuICAgKi9cbiAgYXN5bmMgX3VwZGF0ZShhZGRyZXNzLCBuZXdCbG9ja051bWJlckRlYykge1xuICAgIGNvbnN0IHsgY29tcGxldGVkT25ib2FyZGluZyB9ID0gdGhpcy5vbmJvYXJkaW5nQ29udHJvbGxlci5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IGNoYWluSWQgPSB0aGlzLmdldEN1cnJlbnRDaGFpbklkKCk7XG4gICAgaWYgKFxuICAgICAgIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKEVUSEVSU0NBTl9TVVBQT1JURURfTkVUV09SS1MsIGNoYWluSWQpIHx8XG4gICAgICAhYWRkcmVzcyB8fFxuICAgICAgIWNvbXBsZXRlZE9uYm9hcmRpbmdcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRCbG9jayA9IHBhcnNlSW50KHRoaXMuYmxvY2tUcmFja2VyLmdldEN1cnJlbnRCbG9jaygpLCAxNik7XG5cbiAgICAgIGNvbnN0IG1vc3RSZWNlbnRseUZldGNoZWRCbG9jayA9XG4gICAgICAgIGN1cnJlbnRTdGF0ZS5pbmNvbWluZ1R4TGFzdEZldGNoZWRCbG9ja0J5Q2hhaW5JZFtjaGFpbklkXTtcbiAgICAgIGNvbnN0IGJsb2NrVG9GZXRjaEZyb20gPVxuICAgICAgICBtb3N0UmVjZW50bHlGZXRjaGVkQmxvY2sgPz8gbmV3QmxvY2tOdW1iZXJEZWMgPz8gY3VycmVudEJsb2NrO1xuXG4gICAgICBjb25zdCBuZXdJbmNvbWluZ1R4cyA9IGF3YWl0IHRoaXMuX2dldE5ld0luY29taW5nVHJhbnNhY3Rpb25zKFxuICAgICAgICBhZGRyZXNzLFxuICAgICAgICBibG9ja1RvRmV0Y2hGcm9tLFxuICAgICAgICBjaGFpbklkLFxuICAgICAgKTtcblxuICAgICAgbGV0IG5ld01vc3RSZWNlbnRseUZldGNoZWRCbG9jayA9IGJsb2NrVG9GZXRjaEZyb207XG5cbiAgICAgIG5ld0luY29taW5nVHhzLmZvckVhY2goKHR4KSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eC5ibG9ja051bWJlciAmJlxuICAgICAgICAgIHBhcnNlSW50KG5ld01vc3RSZWNlbnRseUZldGNoZWRCbG9jaywgMTApIDxcbiAgICAgICAgICAgIHBhcnNlSW50KHR4LmJsb2NrTnVtYmVyLCAxMClcbiAgICAgICAgKSB7XG4gICAgICAgICAgbmV3TW9zdFJlY2VudGx5RmV0Y2hlZEJsb2NrID0gcGFyc2VJbnQodHguYmxvY2tOdW1iZXIsIDEwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgICBpbmNvbWluZ1R4TGFzdEZldGNoZWRCbG9ja0J5Q2hhaW5JZDoge1xuICAgICAgICAgIC4uLmN1cnJlbnRTdGF0ZS5pbmNvbWluZ1R4TGFzdEZldGNoZWRCbG9ja0J5Q2hhaW5JZCxcbiAgICAgICAgICBbY2hhaW5JZF06IG5ld01vc3RSZWNlbnRseUZldGNoZWRCbG9jayArIDEsXG4gICAgICAgIH0sXG4gICAgICAgIGluY29taW5nVHJhbnNhY3Rpb25zOiBuZXdJbmNvbWluZ1R4cy5yZWR1Y2UoXG4gICAgICAgICAgKHRyYW5zYWN0aW9ucywgdHgpID0+IHtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uc1t0eC5oYXNoXSA9IHR4O1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9ucztcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC4uLmN1cnJlbnRTdGF0ZS5pbmNvbWluZ1RyYW5zYWN0aW9ucyxcbiAgICAgICAgICB9LFxuICAgICAgICApLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cuZXJyb3IoZXJyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogZmV0Y2hlcyB0cmFuc2FjdGlvbnMgZm9yIHRoZSBnaXZlbiBhZGRyZXNzIGFuZCBjaGFpbiwgdmlhIGV0aGVyc2NhbiwgdGhlblxuICAgKiBwcm9jZXNzZXMgdGhlIGRhdGEgaW50byB0aGUgbmVjZXNzYXJ5IHNoYXBlIGZvciB1c2FnZSBpbiB0aGlzIGNvbnRyb2xsZXIuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbYWRkcmVzc10gLSBBZGRyZXNzIHRvIGZldGNoIHRyYW5zYWN0aW9ucyBmb3JcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tQmxvY2tdIC0gQmxvY2sgdG8gbG9vayBmb3IgdHJhbnNhY3Rpb25zIGF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhaW5JZF0gLSBUaGUgY2hhaW5JZCBmb3IgdGhlIGN1cnJlbnQgbmV0d29ya1xuICAgKiBAcmV0dXJucyB7VHJhbnNhY3Rpb25NZXRhW119XG4gICAqL1xuICBhc3luYyBfZ2V0TmV3SW5jb21pbmdUcmFuc2FjdGlvbnMoYWRkcmVzcywgZnJvbUJsb2NrLCBjaGFpbklkKSB7XG4gICAgY29uc3QgZXRoZXJzY2FuRG9tYWluID0gRVRIRVJTQ0FOX1NVUFBPUlRFRF9ORVRXT1JLU1tjaGFpbklkXS5kb21haW47XG4gICAgY29uc3QgZXRoZXJzY2FuU3ViZG9tYWluID0gRVRIRVJTQ0FOX1NVUFBPUlRFRF9ORVRXT1JLU1tjaGFpbklkXS5zdWJkb21haW47XG5cbiAgICBjb25zdCBhcGlVcmwgPSBgaHR0cHM6Ly8ke2V0aGVyc2NhblN1YmRvbWFpbn0uJHtldGhlcnNjYW5Eb21haW59YDtcbiAgICBsZXQgdXJsID0gYCR7YXBpVXJsfS9hcGk/bW9kdWxlPWFjY291bnQmYWN0aW9uPXR4bGlzdCZhZGRyZXNzPSR7YWRkcmVzc30mdGFnPWxhdGVzdCZwYWdlPTFgO1xuXG4gICAgaWYgKGZyb21CbG9jaykge1xuICAgICAgdXJsICs9IGAmc3RhcnRCbG9jaz0ke3BhcnNlSW50KGZyb21CbG9jaywgMTApfWA7XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2hXaXRoVGltZW91dCh1cmwpO1xuICAgIGNvbnN0IHsgc3RhdHVzLCByZXN1bHQgfSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBsZXQgbmV3SW5jb21pbmdUeHMgPSBbXTtcbiAgICBpZiAoc3RhdHVzID09PSAnMScgJiYgQXJyYXkuaXNBcnJheShyZXN1bHQpICYmIHJlc3VsdC5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCByZW1vdGVUeExpc3QgPSB7fTtcbiAgICAgIGNvbnN0IHJlbW90ZVR4cyA9IFtdO1xuICAgICAgcmVzdWx0LmZvckVhY2goKHR4KSA9PiB7XG4gICAgICAgIGlmICghcmVtb3RlVHhMaXN0W3R4Lmhhc2hdKSB7XG4gICAgICAgICAgcmVtb3RlVHhzLnB1c2godGhpcy5fbm9ybWFsaXplVHhGcm9tRXRoZXJzY2FuKHR4LCBjaGFpbklkKSk7XG4gICAgICAgICAgcmVtb3RlVHhMaXN0W3R4Lmhhc2hdID0gMTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIG5ld0luY29taW5nVHhzID0gcmVtb3RlVHhzLmZpbHRlcihcbiAgICAgICAgKHR4KSA9PiB0eC50eFBhcmFtcz8udG8/LnRvTG93ZXJDYXNlKCkgPT09IGFkZHJlc3MudG9Mb3dlckNhc2UoKSxcbiAgICAgICk7XG4gICAgICBuZXdJbmNvbWluZ1R4cy5zb3J0KChhLCBiKSA9PiAoYS50aW1lIDwgYi50aW1lID8gLTEgOiAxKSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdJbmNvbWluZ1R4cztcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc211dGVzIGEgRXRoZXJzY2FuVHJhbnNhY3Rpb24gaW50byBhIFRyYW5zYWN0aW9uTWV0YVxuICAgKlxuICAgKiBAcGFyYW0ge0V0aGVyc2NhblRyYW5zYWN0aW9ufSBldGhlcnNjYW5UcmFuc2FjdGlvbiAtIHRoZSB0cmFuc2FjdGlvbiB0byBub3JtYWxpemVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNoYWluSWQgLSBUaGUgY2hhaW5JZCBvZiB0aGUgY3VycmVudCBuZXR3b3JrXG4gICAqIEByZXR1cm5zIHtUcmFuc2FjdGlvbk1ldGF9XG4gICAqL1xuICBfbm9ybWFsaXplVHhGcm9tRXRoZXJzY2FuKGV0aGVyc2NhblRyYW5zYWN0aW9uLCBjaGFpbklkKSB7XG4gICAgY29uc3QgdGltZSA9IHBhcnNlSW50KGV0aGVyc2NhblRyYW5zYWN0aW9uLnRpbWVTdGFtcCwgMTApICogMTAwMDtcbiAgICBjb25zdCBzdGF0dXMgPVxuICAgICAgZXRoZXJzY2FuVHJhbnNhY3Rpb24uaXNFcnJvciA9PT0gJzAnXG4gICAgICAgID8gVHJhbnNhY3Rpb25TdGF0dXMuY29uZmlybWVkXG4gICAgICAgIDogVHJhbnNhY3Rpb25TdGF0dXMuZmFpbGVkO1xuICAgIGNvbnN0IHR4UGFyYW1zID0ge1xuICAgICAgZnJvbTogZXRoZXJzY2FuVHJhbnNhY3Rpb24uZnJvbSxcbiAgICAgIGdhczogYm5Ub0hleChuZXcgQk4oZXRoZXJzY2FuVHJhbnNhY3Rpb24uZ2FzKSksXG4gICAgICBub25jZTogYm5Ub0hleChuZXcgQk4oZXRoZXJzY2FuVHJhbnNhY3Rpb24ubm9uY2UpKSxcbiAgICAgIHRvOiBldGhlcnNjYW5UcmFuc2FjdGlvbi50byxcbiAgICAgIHZhbHVlOiBiblRvSGV4KG5ldyBCTihldGhlcnNjYW5UcmFuc2FjdGlvbi52YWx1ZSkpLFxuICAgIH07XG5cbiAgICBpZiAoZXRoZXJzY2FuVHJhbnNhY3Rpb24uZ2FzUHJpY2UpIHtcbiAgICAgIHR4UGFyYW1zLmdhc1ByaWNlID0gYm5Ub0hleChuZXcgQk4oZXRoZXJzY2FuVHJhbnNhY3Rpb24uZ2FzUHJpY2UpKTtcbiAgICB9IGVsc2UgaWYgKGV0aGVyc2NhblRyYW5zYWN0aW9uLm1heEZlZVBlckdhcykge1xuICAgICAgdHhQYXJhbXMubWF4RmVlUGVyR2FzID0gYm5Ub0hleChcbiAgICAgICAgbmV3IEJOKGV0aGVyc2NhblRyYW5zYWN0aW9uLm1heEZlZVBlckdhcyksXG4gICAgICApO1xuICAgICAgdHhQYXJhbXMubWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBiblRvSGV4KFxuICAgICAgICBuZXcgQk4oZXRoZXJzY2FuVHJhbnNhY3Rpb24ubWF4UHJpb3JpdHlGZWVQZXJHYXMpLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYmxvY2tOdW1iZXI6IGV0aGVyc2NhblRyYW5zYWN0aW9uLmJsb2NrTnVtYmVyLFxuICAgICAgaWQ6IGNyZWF0ZUlkKCksXG4gICAgICBjaGFpbklkLFxuICAgICAgbWV0YW1hc2tOZXR3b3JrSWQ6IEVUSEVSU0NBTl9TVVBQT1JURURfTkVUV09SS1NbY2hhaW5JZF0ubmV0d29ya0lkLFxuICAgICAgc3RhdHVzLFxuICAgICAgdGltZSxcbiAgICAgIHR4UGFyYW1zLFxuICAgICAgaGFzaDogZXRoZXJzY2FuVHJhbnNhY3Rpb24uaGFzaCxcbiAgICAgIHR5cGU6IFRyYW5zYWN0aW9uVHlwZS5pbmNvbWluZyxcbiAgICB9O1xuICB9XG59XG4iLCJpbXBvcnQge1xuICBpc0VxdWFsLFxuICBtZW1vaXplLFxuICBtZXJnZSxcbiAgb21pdCxcbiAgb21pdEJ5LFxuICBwaWNrQnksXG4gIHNpemUsXG4gIHN1bSxcbn0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IE9ic2VydmFibGVTdG9yZSB9IGZyb20gJ0BtZXRhbWFzay9vYnMtc3RvcmUnO1xuaW1wb3J0IHsgYnVmZmVyVG9IZXgsIGtlY2NhayB9IGZyb20gJ2V0aGVyZXVtanMtdXRpbCc7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCB7IEVOVklST05NRU5UX1RZUEVfQkFDS0dST1VORCB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvYXBwJztcbmltcG9ydCB7XG4gIE1FVEFNRVRSSUNTX0FOT05ZTU9VU19JRCxcbiAgTUVUQU1FVFJJQ1NfQkFDS0dST1VORF9QQUdFX09CSkVDVCxcbiAgTWV0YU1ldHJpY3NVc2VyVHJhaXQsXG59IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbWV0YW1ldHJpY3MnO1xuaW1wb3J0IHsgU0VDT05EIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy90aW1lJztcbmltcG9ydCB7IGlzTWFuaWZlc3RWMyB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL212My51dGlscyc7XG5pbXBvcnQgeyBNRVRBTUVUUklDU19GSU5BTElaRV9FVkVOVF9GUkFHTUVOVF9BTEFSTSB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvYWxhcm1zJztcbmltcG9ydCB7IGNoZWNrQWxhcm1FeGlzdHMsIGdlbmVyYXRlUmFuZG9tSWQsIGlzVmFsaWREYXRlIH0gZnJvbSAnLi4vbGliL3V0aWwnO1xuXG5jb25zdCBFWFRFTlNJT05fVU5JTlNUQUxMX1VSTCA9ICdodHRwczovL21ldGFtYXNrLmlvL3VuaW5zdGFsbGVkJztcblxuY29uc3QgZGVmYXVsdENhcHR1cmVFeGNlcHRpb24gPSAoZXJyKSA9PiB7XG4gIC8vIHRocm93IGVycm9yIG9uIGNsZWFuIHN0YWNrIHNvIGl0cyBjYXB0dXJlZCBieSBwbGF0Zm9ybSBpbnRlZ3JhdGlvbnMgKGVnIHNlbnRyeSlcbiAgLy8gYnV0IGRvZXMgbm90IGludGVycnVwdCB0aGUgY2FsbCBzdGFja1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICB0aHJvdyBlcnI7XG4gIH0pO1xufTtcblxuLy8gVGhlIGZ1bmN0aW9uIGlzIHVzZWQgdG8gYnVpbGQgYSB1bmlxdWUgbWVzc2FnZUlkIGZvciBzZWdtZW50IG1lc3NhZ2VzXG4vLyBJdCB1c2VzIGFjdGlvbklkIGFuZCB1bmlxdWVJZGVudGlmaWVyIGZyb20gZXZlbnQgaWYgcHJlc2VudFxuY29uc3QgYnVpbGRVbmlxdWVNZXNzYWdlSWQgPSAoYXJncykgPT4ge1xuICBjb25zdCBtZXNzYWdlSWRQYXJ0cyA9IFtdO1xuICBpZiAoYXJncy51bmlxdWVJZGVudGlmaWVyKSB7XG4gICAgbWVzc2FnZUlkUGFydHMucHVzaChhcmdzLnVuaXF1ZUlkZW50aWZpZXIpO1xuICB9XG4gIGlmIChhcmdzLmFjdGlvbklkKSB7XG4gICAgbWVzc2FnZUlkUGFydHMucHVzaChhcmdzLmFjdGlvbklkKTtcbiAgfVxuICBpZiAobWVzc2FnZUlkUGFydHMubGVuZ3RoICYmIGFyZ3MuaXNEdXBsaWNhdGVBbm9ueW1pemVkRXZlbnQpIHtcbiAgICBtZXNzYWdlSWRQYXJ0cy5wdXNoKCcweDAwMCcpO1xuICB9XG4gIGlmIChtZXNzYWdlSWRQYXJ0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbWVzc2FnZUlkUGFydHMuam9pbignLScpO1xuICB9XG4gIHJldHVybiBnZW5lcmF0ZVJhbmRvbUlkKCk7XG59O1xuXG5jb25zdCBleGNlcHRpb25zVG9GaWx0ZXIgPSB7XG4gIFtgWW91IG11c3QgcGFzcyBlaXRoZXIgYW4gXCJhbm9ueW1vdXNJZFwiIG9yIGEgXCJ1c2VySWRcIi5gXTogdHJ1ZSxcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9tZXRhbWV0cmljcycpLk1ldGFNZXRyaWNzQ29udGV4dH0gTWV0YU1ldHJpY3NDb250ZXh0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL21ldGFtZXRyaWNzJykuTWV0YU1ldHJpY3NFdmVudFBheWxvYWR9IE1ldGFNZXRyaWNzRXZlbnRQYXlsb2FkXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL21ldGFtZXRyaWNzJykuTWV0YU1ldHJpY3NFdmVudE9wdGlvbnN9IE1ldGFNZXRyaWNzRXZlbnRPcHRpb25zXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL21ldGFtZXRyaWNzJykuU2VnbWVudEV2ZW50UGF5bG9hZH0gU2VnbWVudEV2ZW50UGF5bG9hZFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9tZXRhbWV0cmljcycpLlNlZ21lbnRJbnRlcmZhY2V9IFNlZ21lbnRJbnRlcmZhY2VcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbWV0YW1ldHJpY3MnKS5NZXRhTWV0cmljc1BhZ2VQYXlsb2FkfSBNZXRhTWV0cmljc1BhZ2VQYXlsb2FkXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL21ldGFtZXRyaWNzJykuTWV0YU1ldHJpY3NQYWdlT3B0aW9uc30gTWV0YU1ldHJpY3NQYWdlT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9tZXRhbWV0cmljcycpLk1ldGFNZXRyaWNzRXZlbnRGcmFnbWVudH0gTWV0YU1ldHJpY3NFdmVudEZyYWdtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL21ldGFtZXRyaWNzJykuTWV0YU1ldHJpY3NUcmFpdHN9IE1ldGFNZXRyaWNzVHJhaXRzXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBNZXRhTWV0cmljc0NvbnRyb2xsZXJTdGF0ZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFttZXRhTWV0cmljc0lkXSAtIFRoZSB1c2VyJ3MgbWV0YU1ldHJpY3NJZCB0aGF0IHdpbGwgYmVcbiAqICBhdHRhY2hlZCB0byBhbGwgbm9uLWFub255bWl6ZWQgZXZlbnQgcGF5bG9hZHNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3BhcnRpY2lwYXRlSW5NZXRhTWV0cmljc10gLSBUaGUgdXNlcidzIHByZWZlcmVuY2UgZm9yXG4gKiAgcGFydGljaXBhdGluZyBpbiB0aGUgTWV0YU1ldHJpY3MgYW5hbHl0aWNzIHByb2dyYW0uIFRoaXMgc2V0dGluZyBjb250cm9sc1xuICogIHdoZXRoZXIgb3Igbm90IGV2ZW50cyBhcmUgdHJhY2tlZFxuICogQHByb3BlcnR5IHt7W3N0cmluZ106IE1ldGFNZXRyaWNzRXZlbnRGcmFnbWVudH19IFtmcmFnbWVudHNdIC0gT2JqZWN0IGtleWVkXG4gKiAgYnkgVVVJRCB3aXRoIHN0b3JlZCBmcmFnbWVudHMgYXMgdmFsdWVzLlxuICogQHByb3BlcnR5IHtBcnJheX0gW2V2ZW50c0JlZm9yZU1ldHJpY3NPcHRJbl0gLSBBcnJheSBvZiBxdWV1ZWQgZXZlbnRzIGFkZGVkIGJlZm9yZVxuICogIGEgdXNlciBvcHRzIGludG8gbWV0cmljcy5cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbdHJhaXRzXSAtIFRyYWl0cyB0aGF0IGFyZSBub3QgZGVyaXZlZCBmcm9tIG90aGVyIHN0YXRlIGtleXMuXG4gKiBAcHJvcGVydHkge1JlY29yZDxzdHJpbmcgYW55Pn0gW3ByZXZpb3VzVXNlclRyYWl0c10gLSBUaGUgdXNlciB0cmFpdHMgdGhlIGxhc3RcbiAqICB0aW1lIHRoZXkgd2VyZSBjb21wdXRlZC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXRhTWV0cmljc0NvbnRyb2xsZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMuc2VnbWVudCAtIGFuIGluc3RhbmNlIG9mIGFuYWx5dGljcyBmb3IgdHJhY2tpbmdcbiAgICogIGV2ZW50cyB0aGF0IGNvbmZvcm0gdG8gdGhlIG5ldyBNZXRhTWV0cmljcyB0cmFja2luZyBwbGFuLlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucy5wcmVmZXJlbmNlc1N0b3JlIC0gVGhlIHByZWZlcmVuY2VzIGNvbnRyb2xsZXIgc3RvcmUsIHVzZWRcbiAgICogIHRvIGFjY2VzcyBhbmQgc3Vic2NyaWJlIHRvIHByZWZlcmVuY2VzIHRoYXQgd2lsbCBiZSBhdHRhY2hlZCB0byBldmVudHNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy5vbk5ldHdvcmtEaWRDaGFuZ2UgLSBVc2VkIHRvIGF0dGFjaCBhIGxpc3RlbmVyIHRvIHRoZVxuICAgKiAgbmV0d29ya0RpZENoYW5nZSBldmVudCBlbWl0dGVkIGJ5IHRoZSBuZXR3b3JrQ29udHJvbGxlclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLmdldEN1cnJlbnRDaGFpbklkIC0gR2V0cyB0aGUgY3VycmVudCBjaGFpbiBpZCBmcm9tIHRoZVxuICAgKiAgbmV0d29yayBjb250cm9sbGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnZlcnNpb24gLSBUaGUgdmVyc2lvbiBvZiB0aGUgZXh0ZW5zaW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmVudmlyb25tZW50IC0gVGhlIGVudmlyb25tZW50IHRoZSBleHRlbnNpb24gaXMgcnVubmluZyBpblxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5leHRlbnNpb24gLSB3ZWJleHRlbnNpb24tcG9seWZpbGxcbiAgICogQHBhcmFtIHtNZXRhTWV0cmljc0NvbnRyb2xsZXJTdGF0ZX0gb3B0aW9ucy5pbml0U3RhdGUgLSBTdGF0ZSB0byBpbml0aWFsaXplZCB3aXRoXG4gICAqIEBwYXJhbSBvcHRpb25zLmNhcHR1cmVFeGNlcHRpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBzZWdtZW50LFxuICAgIHByZWZlcmVuY2VzU3RvcmUsXG4gICAgb25OZXR3b3JrRGlkQ2hhbmdlLFxuICAgIGdldEN1cnJlbnRDaGFpbklkLFxuICAgIHZlcnNpb24sXG4gICAgZW52aXJvbm1lbnQsXG4gICAgaW5pdFN0YXRlLFxuICAgIGV4dGVuc2lvbixcbiAgICBjYXB0dXJlRXhjZXB0aW9uID0gZGVmYXVsdENhcHR1cmVFeGNlcHRpb24sXG4gIH0pIHtcbiAgICB0aGlzLl9jYXB0dXJlRXhjZXB0aW9uID0gKGVycikgPT4ge1xuICAgICAgLy8gVGhpcyBpcyBhIHRlbXBvcmFyeSBtZWFzdXJlLiBDdXJyZW50bHkgdGhlcmUgYXJlIGVycm9ycyBmbG9vZGluZyBzZW50cnkgZHVlIHRvIGEgcHJvYmxlbSBpbiBob3cgd2UgYXJlIHRyYWNraW5nIGFub255bW91c0lkXG4gICAgICAvLyBXZSBpbnRlbmQgb24gcmVtb3ZpbmcgdGhpcyBhcyBzb29uIGFzIHdlIHVuZGVyc3RhbmQgaG93IHRvIGNvcnJlY3RseSBzb2x2ZSB0aGF0IHByb2JsZW0uXG4gICAgICBpZiAoIWV4Y2VwdGlvbnNUb0ZpbHRlcltlcnIubWVzc2FnZV0pIHtcbiAgICAgICAgY2FwdHVyZUV4Y2VwdGlvbihlcnIpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcHJlZlN0YXRlID0gcHJlZmVyZW5jZXNTdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHRoaXMuY2hhaW5JZCA9IGdldEN1cnJlbnRDaGFpbklkKCk7XG4gICAgdGhpcy5sb2NhbGUgPSBwcmVmU3RhdGUuY3VycmVudExvY2FsZS5yZXBsYWNlKCdfJywgJy0nKTtcbiAgICB0aGlzLnZlcnNpb24gPVxuICAgICAgZW52aXJvbm1lbnQgPT09ICdwcm9kdWN0aW9uJyA/IHZlcnNpb24gOiBgJHt2ZXJzaW9ufS0ke2Vudmlyb25tZW50fWA7XG4gICAgdGhpcy5leHRlbnNpb24gPSBleHRlbnNpb247XG4gICAgdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuXG4gICAgY29uc3QgYWJhbmRvbmVkRnJhZ21lbnRzID0gb21pdEJ5KGluaXRTdGF0ZT8uZnJhZ21lbnRzLCAncGVyc2lzdCcpO1xuICAgIGNvbnN0IHNlZ21lbnRBcGlDYWxscyA9IGluaXRTdGF0ZT8uc2VnbWVudEFwaUNhbGxzIHx8IHt9O1xuXG4gICAgdGhpcy5zdG9yZSA9IG5ldyBPYnNlcnZhYmxlU3RvcmUoe1xuICAgICAgcGFydGljaXBhdGVJbk1ldGFNZXRyaWNzOiBudWxsLFxuICAgICAgbWV0YU1ldHJpY3NJZDogbnVsbCxcbiAgICAgIGV2ZW50c0JlZm9yZU1ldHJpY3NPcHRJbjogW10sXG4gICAgICB0cmFpdHM6IHt9LFxuICAgICAgLi4uaW5pdFN0YXRlLFxuICAgICAgZnJhZ21lbnRzOiB7XG4gICAgICAgIC4uLmluaXRTdGF0ZT8uZnJhZ21lbnRzLFxuICAgICAgfSxcbiAgICAgIHNlZ21lbnRBcGlDYWxsczoge1xuICAgICAgICAuLi5zZWdtZW50QXBpQ2FsbHMsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgcHJlZmVyZW5jZXNTdG9yZS5zdWJzY3JpYmUoKHsgY3VycmVudExvY2FsZSB9KSA9PiB7XG4gICAgICB0aGlzLmxvY2FsZSA9IGN1cnJlbnRMb2NhbGUucmVwbGFjZSgnXycsICctJyk7XG4gICAgfSk7XG5cbiAgICBvbk5ldHdvcmtEaWRDaGFuZ2UoKCkgPT4ge1xuICAgICAgdGhpcy5jaGFpbklkID0gZ2V0Q3VycmVudENoYWluSWQoKTtcbiAgICB9KTtcbiAgICB0aGlzLnNlZ21lbnQgPSBzZWdtZW50O1xuXG4gICAgLy8gVHJhY2sgYWJhbmRvbmVkIGZyYWdtZW50cyB0aGF0IHdlcmVuJ3QgcHJvcGVybHkgY2xlYW5lZCB1cC5cbiAgICAvLyBBYmFuZG9uZWQgZnJhZ21lbnRzIGFyZSB0aG9zZSB0aGF0IHdlcmUgc3RvcmVkIGluIHBlcnNpc3RlbnQgbWVtb3J5XG4gICAgLy8gYW5kIGFyZSBhdmFpbGFibGUgYXQgY29udHJvbGxlciBpbnN0YW5jZSBjcmVhdGlvbiwgYnV0IGRvIG5vdCBoYXZlIHRoZVxuICAgIC8vICdwZXJzaXN0JyBmbGFnIHNldC4gVGhpcyBtZWFucyBhbnl0aW1lIHRoZSBleHRlbnNpb24gaXMgdW5sb2NrZWQsIGFueVxuICAgIC8vIGZyYWdtZW50cyB0aGF0IGFyZSBub3QgbWFya2VkIGFzIHBlcnNpc3RlbnQgd2lsbCBiZSBwdXJnZWQgYW5kIHRoZVxuICAgIC8vIGZhaWx1cmUgZXZlbnQgd2lsbCBiZSBlbWl0dGVkLlxuICAgIE9iamVjdC52YWx1ZXMoYWJhbmRvbmVkRnJhZ21lbnRzKS5mb3JFYWNoKChmcmFnbWVudCkgPT4ge1xuICAgICAgdGhpcy5maW5hbGl6ZUV2ZW50RnJhZ21lbnQoZnJhZ21lbnQuaWQsIHsgYWJhbmRvbmVkOiB0cnVlIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gQ29kZSBiZWxvdyBzdWJtaXRzIGFueSBwZW5kaW5nIHNlZ21lbnRBcGlDYWxscyB0byBTZWdtZW50IGlmL3doZW4gdGhlIGNvbnRyb2xsZXIgaXMgcmUtaW5zdGFudGlhdGVkXG4gICAgaWYgKGlzTWFuaWZlc3RWMykge1xuICAgICAgT2JqZWN0LnZhbHVlcyhzZWdtZW50QXBpQ2FsbHMpLmZvckVhY2goKHsgZXZlbnRUeXBlLCBwYXlsb2FkIH0pID0+IHtcbiAgICAgICAgdGhpcy5fc3VibWl0U2VnbWVudEFQSUNhbGwoZXZlbnRUeXBlLCBwYXlsb2FkKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENsb3NlIG91dCBldmVudCBmcmFnbWVudHMgdGhhdCB3ZXJlIGNyZWF0ZWQgYnV0IG5vdCBwcm9ncmVzc2VkLiBBblxuICAgIC8vIGludGVydmFsIGlzIHVzZWQgdG8gcm91dGluZWx5IGNoZWNrIGlmIGEgZnJhZ21lbnQgaGFzIG5vdCBiZWVuIHVwZGF0ZWRcbiAgICAvLyB3aXRoaW4gdGhlIGZyYWdtZW50J3MgdGltZW91dCB3aW5kb3cuIFdoZW4gY3JlYXRpbmcgYSBuZXcgZXZlbnQgZnJhZ21lbnRcbiAgICAvLyBhIHRpbWVvdXQgY2FuIGJlIHNwZWNpZmllZCB0aGF0IHdpbGwgY2F1c2UgYW4gYWJhbmRvbmVkIGV2ZW50IHRvIGJlXG4gICAgLy8gdHJhY2tlZCBpZiB0aGUgZXZlbnQgaXNuJ3QgcHJvZ3Jlc3NlZCB3aXRoaW4gdGhhdCBhbW91bnQgb2YgdGltZS5cbiAgICBpZiAoaXNNYW5pZmVzdFYzKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuICAgICAgY2hyb21lLmFsYXJtcy5nZXRBbGwoKGFsYXJtcykgPT4ge1xuICAgICAgICBjb25zdCBoYXNBbGFybSA9IGNoZWNrQWxhcm1FeGlzdHMoXG4gICAgICAgICAgYWxhcm1zLFxuICAgICAgICAgIE1FVEFNRVRSSUNTX0ZJTkFMSVpFX0VWRU5UX0ZSQUdNRU5UX0FMQVJNLFxuICAgICAgICApO1xuXG4gICAgICAgIGlmICghaGFzQWxhcm0pIHtcbiAgICAgICAgICBjaHJvbWUuYWxhcm1zLmNyZWF0ZShNRVRBTUVUUklDU19GSU5BTElaRV9FVkVOVF9GUkFHTUVOVF9BTEFSTSwge1xuICAgICAgICAgICAgZGVsYXlJbk1pbnV0ZXM6IDEsXG4gICAgICAgICAgICBwZXJpb2RJbk1pbnV0ZXM6IDEsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY2hyb21lLmFsYXJtcy5vbkFsYXJtLmFkZExpc3RlbmVyKChhbGFybUluZm8pID0+IHtcbiAgICAgICAgaWYgKGFsYXJtSW5mby5uYW1lID09PSBNRVRBTUVUUklDU19GSU5BTElaRV9FVkVOVF9GUkFHTUVOVF9BTEFSTSkge1xuICAgICAgICAgIHRoaXMuZmluYWxpemVBYmFuZG9uZWRGcmFnbWVudHMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgdGhpcy5maW5hbGl6ZUFiYW5kb25lZEZyYWdtZW50cygpO1xuICAgICAgfSwgU0VDT05EICogMzApO1xuICAgIH1cbiAgfVxuXG4gIGZpbmFsaXplQWJhbmRvbmVkRnJhZ21lbnRzKCkge1xuICAgIE9iamVjdC52YWx1ZXModGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmZyYWdtZW50cykuZm9yRWFjaCgoZnJhZ21lbnQpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgZnJhZ21lbnQudGltZW91dCAmJlxuICAgICAgICBEYXRlLm5vdygpIC0gZnJhZ21lbnQubGFzdFVwZGF0ZWQgLyAxMDAwID4gZnJhZ21lbnQudGltZW91dFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZmluYWxpemVFdmVudEZyYWdtZW50KGZyYWdtZW50LmlkLCB7IGFiYW5kb25lZDogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGdlbmVyYXRlTWV0YU1ldHJpY3NJZCgpIHtcbiAgICByZXR1cm4gYnVmZmVyVG9IZXgoXG4gICAgICBrZWNjYWsoXG4gICAgICAgIEJ1ZmZlci5mcm9tKFxuICAgICAgICAgIFN0cmluZyhEYXRlLm5vdygpKSArXG4gICAgICAgICAgICBTdHJpbmcoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpKSxcbiAgICAgICAgKSxcbiAgICAgICksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gZXZlbnQgZnJhZ21lbnQgaW4gc3RhdGUgYW5kIHJldHVybnMgdGhlIGV2ZW50IGZyYWdtZW50IG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtNZXRhTWV0cmljc0V2ZW50RnJhZ21lbnR9IG9wdGlvbnMgLSBGcmFnbWVudCBzZXR0aW5ncyBhbmQgcHJvcGVydGllc1xuICAgKiAgdG8gaW5pdGlhdGUgdGhlIGZyYWdtZW50IHdpdGguXG4gICAqIEByZXR1cm5zIHtNZXRhTWV0cmljc0V2ZW50RnJhZ21lbnR9XG4gICAqL1xuICBjcmVhdGVFdmVudEZyYWdtZW50KG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMuc3VjY2Vzc0V2ZW50IHx8ICFvcHRpb25zLmNhdGVnb3J5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBNdXN0IHNwZWNpZnkgc3VjY2VzcyBldmVudCBhbmQgY2F0ZWdvcnkuIFN1Y2Nlc3MgZXZlbnQgd2FzOiAke1xuICAgICAgICAgIG9wdGlvbnMuZXZlbnRcbiAgICAgICAgfS4gQ2F0ZWdvcnkgd2FzOiAke29wdGlvbnMuY2F0ZWdvcnl9LiBQYXlsb2FkIGtleXMgd2VyZTogJHtPYmplY3Qua2V5cyhcbiAgICAgICAgICBvcHRpb25zLFxuICAgICAgICApfS4gJHtcbiAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy5wcm9wZXJ0aWVzID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgPyBgUGF5bG9hZCBwcm9wZXJ0eSBrZXlzIHdlcmU6ICR7T2JqZWN0LmtleXMob3B0aW9ucy5wcm9wZXJ0aWVzKX1gXG4gICAgICAgICAgICA6ICcnXG4gICAgICAgIH1gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGZyYWdtZW50cyB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgY29uc3QgaWQgPSBvcHRpb25zLnVuaXF1ZUlkZW50aWZpZXIgPz8gdXVpZHY0KCk7XG4gICAgY29uc3QgZnJhZ21lbnQgPSB7XG4gICAgICBpZCxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBsYXN0VXBkYXRlZDogRGF0ZS5ub3coKSxcbiAgICB9O1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgZnJhZ21lbnRzOiB7XG4gICAgICAgIC4uLmZyYWdtZW50cyxcbiAgICAgICAgW2lkXTogZnJhZ21lbnQsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgaWYgKG9wdGlvbnMuaW5pdGlhbEV2ZW50KSB7XG4gICAgICB0aGlzLnRyYWNrRXZlbnQoe1xuICAgICAgICBldmVudDogZnJhZ21lbnQuaW5pdGlhbEV2ZW50LFxuICAgICAgICBjYXRlZ29yeTogZnJhZ21lbnQuY2F0ZWdvcnksXG4gICAgICAgIHByb3BlcnRpZXM6IGZyYWdtZW50LnByb3BlcnRpZXMsXG4gICAgICAgIHNlbnNpdGl2ZVByb3BlcnRpZXM6IGZyYWdtZW50LnNlbnNpdGl2ZVByb3BlcnRpZXMsXG4gICAgICAgIHBhZ2U6IGZyYWdtZW50LnBhZ2UsXG4gICAgICAgIHJlZmVycmVyOiBmcmFnbWVudC5yZWZlcnJlcixcbiAgICAgICAgcmV2ZW51ZTogZnJhZ21lbnQucmV2ZW51ZSxcbiAgICAgICAgdmFsdWU6IGZyYWdtZW50LnZhbHVlLFxuICAgICAgICBjdXJyZW5jeTogZnJhZ21lbnQuY3VycmVuY3ksXG4gICAgICAgIGVudmlyb25tZW50VHlwZTogZnJhZ21lbnQuZW52aXJvbm1lbnRUeXBlLFxuICAgICAgICBhY3Rpb25JZDogb3B0aW9ucy5hY3Rpb25JZCxcbiAgICAgICAgdW5pcXVlSWRlbnRpZmllcjogb3B0aW9ucy51bmlxdWVJZGVudGlmaWVyLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyYWdtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZyYWdtZW50IHN0b3JlZCBpbiBtZW1vcnkgd2l0aCBwcm92aWRlZCBpZCBvciB1bmRlZmluZWQgaWYgaXRcbiAgICogZG9lcyBub3QgZXhpc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGlkIG9mIGZyYWdtZW50IHRvIHJldHJpZXZlXG4gICAqIEByZXR1cm5zIHtbTWV0YU1ldHJpY3NFdmVudEZyYWdtZW50XX1cbiAgICovXG4gIGdldEV2ZW50RnJhZ21lbnRCeUlkKGlkKSB7XG4gICAgY29uc3QgeyBmcmFnbWVudHMgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgIGNvbnN0IGZyYWdtZW50ID0gZnJhZ21lbnRzW2lkXTtcblxuICAgIHJldHVybiBmcmFnbWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGFuIGV2ZW50IGZyYWdtZW50IGluIHN0YXRlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBmcmFnbWVudCBpZCB0byB1cGRhdGVcbiAgICogQHBhcmFtIHtNZXRhTWV0cmljc0V2ZW50RnJhZ21lbnR9IHBheWxvYWQgLSBGcmFnbWVudCBzZXR0aW5ncyBhbmRcbiAgICogIHByb3BlcnRpZXMgdG8gaW5pdGlhdGUgdGhlIGZyYWdtZW50IHdpdGguXG4gICAqL1xuICB1cGRhdGVFdmVudEZyYWdtZW50KGlkLCBwYXlsb2FkKSB7XG4gICAgY29uc3QgeyBmcmFnbWVudHMgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgIGNvbnN0IGZyYWdtZW50ID0gZnJhZ21lbnRzW2lkXTtcblxuICAgIGlmICghZnJhZ21lbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRXZlbnQgZnJhZ21lbnQgd2l0aCBpZCAke2lkfSBkb2VzIG5vdCBleGlzdC5gKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIGZyYWdtZW50czoge1xuICAgICAgICAuLi5mcmFnbWVudHMsXG4gICAgICAgIFtpZF06IG1lcmdlKGZyYWdtZW50c1tpZF0sIHtcbiAgICAgICAgICAuLi5wYXlsb2FkLFxuICAgICAgICAgIGxhc3RVcGRhdGVkOiBEYXRlLm5vdygpLFxuICAgICAgICB9KSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmluYWxpemVzIGEgZnJhZ21lbnQsIHRyYWNraW5nIGVpdGhlciBhIHN1Y2Nlc3MgZXZlbnQgb3IgZmFpbHVyZSBFdmVudFxuICAgKiBhbmQgdGhlbiByZW1vdmVzIHRoZSBmcmFnbWVudCBmcm9tIHN0YXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBVVUlEIG9mIHRoZSBldmVudCBmcmFnbWVudCB0byBiZSBjbG9zZWRcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hYmFuZG9uZWRdIC0gaWYgdHJ1ZSB0cmFjayB0aGUgZmFpbHVyZVxuICAgKiAgZXZlbnQgaW5zdGVhZCBvZiB0aGUgc3VjY2VzcyBldmVudFxuICAgKiBAcGFyYW0ge01ldGFNZXRyaWNzQ29udGV4dC5wYWdlfSBbb3B0aW9ucy5wYWdlXSAtIHBhZ2UgdGhlIGZpbmFsIGV2ZW50XG4gICAqICBvY2N1cnJlZCBvbi4gVGhpcyB3aWxsIG92ZXJyaWRlIHdoYXRldmVyIGlzIHNldCBvbiB0aGUgZnJhZ21lbnRcbiAgICogQHBhcmFtIHtNZXRhTWV0cmljc0NvbnRleHQucmVmZXJyZXJ9IFtvcHRpb25zLnJlZmVycmVyXSAtIERhcHAgdGhhdFxuICAgKiAgb3JpZ2luYXRlZCB0aGUgZnJhZ21lbnQuIFRoaXMgaXMgZm9yIGZhbGxiYWNrIG9ubHksIHRoZSBmcmFnbWVudCByZWZlcnJlclxuICAgKiAgcHJvcGVydHkgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gICAqL1xuICBmaW5hbGl6ZUV2ZW50RnJhZ21lbnQoaWQsIHsgYWJhbmRvbmVkID0gZmFsc2UsIHBhZ2UsIHJlZmVycmVyIH0gPSB7fSkge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmZyYWdtZW50c1tpZF07XG4gICAgaWYgKCFmcmFnbWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGdW5uZWwgd2l0aCBpZCAke2lkfSBkb2VzIG5vdCBleGlzdC5gKTtcbiAgICB9XG5cbiAgICBjb25zdCBldmVudE5hbWUgPSBhYmFuZG9uZWQgPyBmcmFnbWVudC5mYWlsdXJlRXZlbnQgOiBmcmFnbWVudC5zdWNjZXNzRXZlbnQ7XG5cbiAgICB0aGlzLnRyYWNrRXZlbnQoe1xuICAgICAgZXZlbnQ6IGV2ZW50TmFtZSxcbiAgICAgIGNhdGVnb3J5OiBmcmFnbWVudC5jYXRlZ29yeSxcbiAgICAgIHByb3BlcnRpZXM6IGZyYWdtZW50LnByb3BlcnRpZXMsXG4gICAgICBzZW5zaXRpdmVQcm9wZXJ0aWVzOiBmcmFnbWVudC5zZW5zaXRpdmVQcm9wZXJ0aWVzLFxuICAgICAgcGFnZTogcGFnZSA/PyBmcmFnbWVudC5wYWdlLFxuICAgICAgcmVmZXJyZXI6IGZyYWdtZW50LnJlZmVycmVyID8/IHJlZmVycmVyLFxuICAgICAgcmV2ZW51ZTogZnJhZ21lbnQucmV2ZW51ZSxcbiAgICAgIHZhbHVlOiBmcmFnbWVudC52YWx1ZSxcbiAgICAgIGN1cnJlbmN5OiBmcmFnbWVudC5jdXJyZW5jeSxcbiAgICAgIGVudmlyb25tZW50VHlwZTogZnJhZ21lbnQuZW52aXJvbm1lbnRUeXBlLFxuICAgICAgYWN0aW9uSWQ6IGZyYWdtZW50LmFjdGlvbklkLFxuICAgICAgLy8gV2UgYXBwZW5kIHN1Y2Nlc3Mgb3IgZmFpbHVyZSB0byB0aGUgdW5pcXVlLWlkZW50aWZpZXIgc28gdGhhdCB0aGVcbiAgICAgIC8vIG1lc3NhZ2VJZCBjYW4gc3RpbGwgYmUgaWRlbXBvdGVudCwgYnV0IHNvIHRoYXQgaXQgZGlmZmVycyBmcm9tIHRoZVxuICAgICAgLy8gaW5pdGlhbCBldmVudCBmaXJlZC4gVGhlIGluaXRpYWwgZXZlbnQgd2FzIHByZXZlbnRpbmcgbmV3IGV2ZW50cyBmcm9tXG4gICAgICAvLyBtYWtpbmcgaXQgdG8gbWl4cGFuZWwgYmVjYXVzZSB0aGV5IHdlcmUgdXNpbmcgdGhlIHNhbWUgdW5pcXVlIElEIGFzXG4gICAgICAvLyB0aGUgZXZlbnRzIHByb2Nlc3NlZCBpbiBvdGhlciBwYXJ0cyBvZiB0aGUgZnJhZ21lbnQgbGlmZWN5Y2xlLlxuICAgICAgdW5pcXVlSWRlbnRpZmllcjogZnJhZ21lbnQudW5pcXVlSWRlbnRpZmllclxuICAgICAgICA/IGAke2ZyYWdtZW50LnVuaXF1ZUlkZW50aWZpZXJ9LSR7YWJhbmRvbmVkID8gJ2ZhaWx1cmUnIDogJ3N1Y2Nlc3MnfWBcbiAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgfSk7XG4gICAgY29uc3QgeyBmcmFnbWVudHMgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBkZWxldGUgZnJhZ21lbnRzW2lkXTtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgZnJhZ21lbnRzIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIHRoaXMuX2lkZW50aWZ5IHdpdGggdmFsaWRhdGVkIG1ldGFNZXRyaWNzSWQgYW5kIHVzZXIgdHJhaXRzIGlmIHVzZXIgaXMgcGFydGljaXBhdGluZ1xuICAgKiBpbiB0aGUgTWV0YU1ldHJpY3MgYW5hbHl0aWNzIHByb2dyYW1cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHVzZXJUcmFpdHNcbiAgICovXG4gIGlkZW50aWZ5KHVzZXJUcmFpdHMpIHtcbiAgICBjb25zdCB7IG1ldGFNZXRyaWNzSWQsIHBhcnRpY2lwYXRlSW5NZXRhTWV0cmljcyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmICghcGFydGljaXBhdGVJbk1ldGFNZXRyaWNzIHx8ICFtZXRhTWV0cmljc0lkIHx8ICF1c2VyVHJhaXRzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdXNlclRyYWl0cyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYE1ldGFNZXRyaWNzQ29udHJvbGxlciNpZGVudGlmeTogdXNlclRyYWl0cyBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBvYmplY3QuIFJlY2VpdmVkIHR5cGU6ICR7dHlwZW9mIHVzZXJUcmFpdHN9YCxcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYWxsVmFsaWRUcmFpdHMgPSB0aGlzLl9idWlsZFZhbGlkVHJhaXRzKHVzZXJUcmFpdHMpO1xuXG4gICAgdGhpcy5faWRlbnRpZnkoYWxsVmFsaWRUcmFpdHMpO1xuICB9XG5cbiAgLy8gSXQgc2V0cyBhbiB1bmluc3RhbGwgVVJMIChcIlNvcnJ5IHRvIHNlZSB5b3UgZ28hXCIgcGFnZSksXG4gIC8vIHdoaWNoIGlzIG9wZW5lZCBpZiBhIHVzZXIgdW5pbnN0YWxscyB0aGUgZXh0ZW5zaW9uLlxuICB1cGRhdGVFeHRlbnNpb25Vbmluc3RhbGxVcmwocGFydGljaXBhdGVJbk1ldGFNZXRyaWNzLCBtZXRhTWV0cmljc0lkKSB7XG4gICAgY29uc3QgcXVlcnkgPSB7fTtcbiAgICBpZiAocGFydGljaXBhdGVJbk1ldGFNZXRyaWNzKSB7XG4gICAgICAvLyBXZSBvbmx5IHdhbnQgdG8gdHJhY2sgdGhlc2UgdGhpbmdzIGlmIGEgdXNlciBvcHRlZCBpbnRvIG1ldHJpY3MuXG4gICAgICBxdWVyeS5tbWkgPSBCdWZmZXIuZnJvbShtZXRhTWV0cmljc0lkKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICBxdWVyeS5lbnYgPSB0aGlzLmVudmlyb25tZW50O1xuICAgICAgcXVlcnkuYXYgPSB0aGlzLnZlcnNpb247XG4gICAgfVxuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhxdWVyeSk7XG5cbiAgICAvLyB0aGlzLmV4dGVuc2lvbiBub3QgY3VycmVudGx5IGRlZmluZWQgaW4gdGVzdHNcbiAgICBpZiAodGhpcy5leHRlbnNpb24gJiYgdGhpcy5leHRlbnNpb24ucnVudGltZSkge1xuICAgICAgdGhpcy5leHRlbnNpb24ucnVudGltZS5zZXRVbmluc3RhbGxVUkwoXG4gICAgICAgIGAke0VYVEVOU0lPTl9VTklOU1RBTExfVVJMfT8ke3F1ZXJ5U3RyaW5nfWAsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIHRoZSBgcGFydGljaXBhdGVJbk1ldGFNZXRyaWNzYCBwcm9wZXJ0eVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHBhcnRpY2lwYXRlSW5NZXRhTWV0cmljcyAtIFdoZXRoZXIgb3Igbm90IHRoZSB1c2VyIHdhbnRzXG4gICAqICB0byBwYXJ0aWNpcGF0ZSBpbiBNZXRhTWV0cmljc1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IHRoZSBzdHJpbmcgb2YgdGhlIG5ldyBtZXRhbWV0cmljcyBpZCwgb3IgbnVsbFxuICAgKiAgaWYgbm90IHNldFxuICAgKi9cbiAgc2V0UGFydGljaXBhdGVJbk1ldGFNZXRyaWNzKHBhcnRpY2lwYXRlSW5NZXRhTWV0cmljcykge1xuICAgIGxldCB7IG1ldGFNZXRyaWNzSWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKHBhcnRpY2lwYXRlSW5NZXRhTWV0cmljcyAmJiAhbWV0YU1ldHJpY3NJZCkge1xuICAgICAgbWV0YU1ldHJpY3NJZCA9IHRoaXMuZ2VuZXJhdGVNZXRhTWV0cmljc0lkKCk7XG4gICAgfSBlbHNlIGlmIChwYXJ0aWNpcGF0ZUluTWV0YU1ldHJpY3MgPT09IGZhbHNlKSB7XG4gICAgICBtZXRhTWV0cmljc0lkID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IHBhcnRpY2lwYXRlSW5NZXRhTWV0cmljcywgbWV0YU1ldHJpY3NJZCB9KTtcbiAgICBpZiAocGFydGljaXBhdGVJbk1ldGFNZXRyaWNzKSB7XG4gICAgICB0aGlzLnRyYWNrRXZlbnRzQWZ0ZXJNZXRyaWNzT3B0SW4oKTtcbiAgICAgIHRoaXMuY2xlYXJFdmVudHNBZnRlck1ldHJpY3NPcHRJbigpO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlRXh0ZW5zaW9uVW5pbnN0YWxsVXJsKHBhcnRpY2lwYXRlSW5NZXRhTWV0cmljcywgbWV0YU1ldHJpY3NJZCk7XG4gICAgcmV0dXJuIG1ldGFNZXRyaWNzSWQ7XG4gIH1cblxuICBnZXQgc3RhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB0cmFjayBhIHBhZ2UgdmlldyB3aXRoIFNlZ21lbnRcbiAgICpcbiAgICogQHBhcmFtIHtNZXRhTWV0cmljc1BhZ2VQYXlsb2FkfSBwYXlsb2FkIC0gZGV0YWlscyBvZiB0aGUgcGFnZSB2aWV3ZWRcbiAgICogQHBhcmFtIHtNZXRhTWV0cmljc1BhZ2VPcHRpb25zfSBbb3B0aW9uc10gLSBvcHRpb25zIGZvciBoYW5kbGluZyB0aGUgcGFnZVxuICAgKiAgdmlld1xuICAgKi9cbiAgdHJhY2tQYWdlKFxuICAgIHsgbmFtZSwgcGFyYW1zLCBlbnZpcm9ubWVudFR5cGUsIHBhZ2UsIHJlZmVycmVyLCBhY3Rpb25JZCB9LFxuICAgIG9wdGlvbnMsXG4gICkge1xuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5wYXJ0aWNpcGF0ZUluTWV0YU1ldHJpY3MgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnN0YXRlLnBhcnRpY2lwYXRlSW5NZXRhTWV0cmljcyA9PT0gbnVsbCAmJlxuICAgICAgICAhb3B0aW9ucz8uaXNPcHRJblBhdGhcbiAgICAgICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB7IG1ldGFNZXRyaWNzSWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgICBjb25zdCBpZFRyYWl0ID0gbWV0YU1ldHJpY3NJZCA/ICd1c2VySWQnIDogJ2Fub255bW91c0lkJztcbiAgICAgIGNvbnN0IGlkVmFsdWUgPSBtZXRhTWV0cmljc0lkID8/IE1FVEFNRVRSSUNTX0FOT05ZTU9VU19JRDtcbiAgICAgIHRoaXMuX3N1Ym1pdFNlZ21lbnRBUElDYWxsKCdwYWdlJywge1xuICAgICAgICBtZXNzYWdlSWQ6IGJ1aWxkVW5pcXVlTWVzc2FnZUlkKHsgYWN0aW9uSWQgfSksXG4gICAgICAgIFtpZFRyYWl0XTogaWRWYWx1ZSxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgICBsb2NhbGU6IHRoaXMubG9jYWxlLFxuICAgICAgICAgIGNoYWluX2lkOiB0aGlzLmNoYWluSWQsXG4gICAgICAgICAgZW52aXJvbm1lbnRfdHlwZTogZW52aXJvbm1lbnRUeXBlLFxuICAgICAgICB9LFxuICAgICAgICBjb250ZXh0OiB0aGlzLl9idWlsZENvbnRleHQocmVmZXJyZXIsIHBhZ2UpLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aGlzLl9jYXB0dXJlRXhjZXB0aW9uKGVycik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHN1Ym1pdHMgYSBtZXRhbWV0cmljcyBldmVudCwgbm90IHdhaXRpbmcgZm9yIGl0IHRvIGNvbXBsZXRlIG9yIGFsbG93aW5nIGl0cyBlcnJvciB0byBidWJibGUgdXBcbiAgICpcbiAgICogQHBhcmFtIHtNZXRhTWV0cmljc0V2ZW50UGF5bG9hZH0gcGF5bG9hZCAtIGRldGFpbHMgb2YgdGhlIGV2ZW50XG4gICAqIEBwYXJhbSB7TWV0YU1ldHJpY3NFdmVudE9wdGlvbnN9IFtvcHRpb25zXSAtIG9wdGlvbnMgZm9yIGhhbmRsaW5nL3JvdXRpbmcgdGhlIGV2ZW50XG4gICAqL1xuICB0cmFja0V2ZW50KHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICAvLyB2YWxpZGF0aW9uIGlzIG5vdCBjYXVnaHQgYW5kIGhhbmRsZWRcbiAgICB0aGlzLnZhbGlkYXRlUGF5bG9hZChwYXlsb2FkKTtcbiAgICB0aGlzLnN1Ym1pdEV2ZW50KHBheWxvYWQsIG9wdGlvbnMpLmNhdGNoKChlcnIpID0+XG4gICAgICB0aGlzLl9jYXB0dXJlRXhjZXB0aW9uKGVyciksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzdWJtaXRzIChvciBxdWV1ZXMgZm9yIHN1Ym1pc3Npb24pIGEgbWV0YW1ldHJpY3MgZXZlbnQsIHBlcmZvcm1pbmcgbmVjZXNzYXJ5IHBheWxvYWQgbWFuaXB1bGF0aW9uIGFuZFxuICAgKiByb3V0aW5nIHRoZSBldmVudCB0byB0aGUgYXBwcm9wcmlhdGUgc2VnbWVudCBzb3VyY2UuIFdpbGwgc3BsaXQgZXZlbnRzXG4gICAqIHdpdGggc2Vuc2l0aXZlUHJvcGVydGllcyBpbnRvIHR3byBldmVudHMsIHRyYWNraW5nIHRoZSBzZW5zaXRpdmVQcm9wZXJ0aWVzXG4gICAqIHdpdGggdGhlIGFub255bW91c0lkIG9ubHkuXG4gICAqXG4gICAqIEBwYXJhbSB7TWV0YU1ldHJpY3NFdmVudFBheWxvYWR9IHBheWxvYWQgLSBkZXRhaWxzIG9mIHRoZSBldmVudFxuICAgKiBAcGFyYW0ge01ldGFNZXRyaWNzRXZlbnRPcHRpb25zfSBbb3B0aW9uc10gLSBvcHRpb25zIGZvciBoYW5kbGluZy9yb3V0aW5nIHRoZSBldmVudFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIGFzeW5jIHN1Ym1pdEV2ZW50KHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnZhbGlkYXRlUGF5bG9hZChwYXlsb2FkKTtcblxuICAgIGlmICghdGhpcy5zdGF0ZS5wYXJ0aWNpcGF0ZUluTWV0YU1ldHJpY3MgJiYgIW9wdGlvbnM/LmlzT3B0SW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBXZSBtaWdodCB0cmFjayBtdWx0aXBsZSBldmVudHMgaWYgc2Vuc2l0aXZlUHJvcGVydGllcyBpcyBpbmNsdWRlZCwgdGhpcyBhcnJheSB3aWxsIGhvbGRcbiAgICAvLyB0aGUgcHJvbWlzZXMgcmV0dXJuZWQgZnJvbSB0aGlzLl90cmFjay5cbiAgICBjb25zdCBldmVudHMgPSBbXTtcblxuICAgIGlmIChwYXlsb2FkLnNlbnNpdGl2ZVByb3BlcnRpZXMpIHtcbiAgICAgIC8vIHNlbnNpdGl2ZVByb3BlcnRpZXMgd2lsbCBvbmx5IGJlIHRyYWNrZWQgdXNpbmcgdGhlIGFub255bW91c0lkIHByb3BlcnR5IGFuZCBnZW5lcmljIGlkXG4gICAgICAvLyBJZiB0aGUgZXZlbnQgb3B0aW9ucyBhbHJlYWR5IHNwZWNpZnkgdG8gZXhjbHVkZSB0aGUgbWV0YU1ldHJpY3NJZCB3ZSB0aHJvdyBhbiBlcnJvciBhc1xuICAgICAgLy8gYSBzaWduYWwgdG8gdGhlIGRldmVsb3BlciB0aGF0IHRoZSBldmVudCB3YXMgaW1wbGVtZW50ZWQgaW5jb3JyZWN0bHlcbiAgICAgIGlmIChvcHRpb25zPy5leGNsdWRlTWV0YU1ldHJpY3NJZCA9PT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ3NlbnNpdGl2ZVByb3BlcnRpZXMgd2FzIHNwZWNpZmllZCBpbiBhbiBldmVudCBwYXlsb2FkIHRoYXQgYWxzbyBzZXQgdGhlIGV4Y2x1ZGVNZXRhTWV0cmljc0lkIGZsYWcnLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjb21iaW5lZFByb3BlcnRpZXMgPSBtZXJnZShcbiAgICAgICAgcGF5bG9hZC5zZW5zaXRpdmVQcm9wZXJ0aWVzLFxuICAgICAgICBwYXlsb2FkLnByb3BlcnRpZXMsXG4gICAgICApO1xuXG4gICAgICBldmVudHMucHVzaChcbiAgICAgICAgdGhpcy5fdHJhY2soXG4gICAgICAgICAgdGhpcy5fYnVpbGRFdmVudFBheWxvYWQoe1xuICAgICAgICAgICAgLi4ucGF5bG9hZCxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IGNvbWJpbmVkUHJvcGVydGllcyxcbiAgICAgICAgICAgIGlzRHVwbGljYXRlQW5vbnltaXplZEV2ZW50OiB0cnVlLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHsgLi4ub3B0aW9ucywgZXhjbHVkZU1ldGFNZXRyaWNzSWQ6IHRydWUgfSxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZXZlbnRzLnB1c2godGhpcy5fdHJhY2sodGhpcy5fYnVpbGRFdmVudFBheWxvYWQocGF5bG9hZCksIG9wdGlvbnMpKTtcblxuICAgIGF3YWl0IFByb21pc2UuYWxsKGV2ZW50cyk7XG4gIH1cblxuICAvKipcbiAgICogdmFsaWRhdGVzIGEgbWV0YW1ldHJpY3MgZXZlbnRcbiAgICpcbiAgICogQHBhcmFtIHtNZXRhTWV0cmljc0V2ZW50UGF5bG9hZH0gcGF5bG9hZCAtIGRldGFpbHMgb2YgdGhlIGV2ZW50XG4gICAqL1xuICB2YWxpZGF0ZVBheWxvYWQocGF5bG9hZCkge1xuICAgIC8vIGV2ZW50IGFuZCBjYXRlZ29yeSBhcmUgcmVxdWlyZWQgZmllbGRzIGZvciBhbGwgcGF5bG9hZHNcbiAgICBpZiAoIXBheWxvYWQuZXZlbnQgfHwgIXBheWxvYWQuY2F0ZWdvcnkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYE11c3Qgc3BlY2lmeSBldmVudCBhbmQgY2F0ZWdvcnkuIEV2ZW50IHdhczogJHtcbiAgICAgICAgICBwYXlsb2FkLmV2ZW50XG4gICAgICAgIH0uIENhdGVnb3J5IHdhczogJHtwYXlsb2FkLmNhdGVnb3J5fS4gUGF5bG9hZCBrZXlzIHdlcmU6ICR7T2JqZWN0LmtleXMoXG4gICAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgKX0uICR7XG4gICAgICAgICAgdHlwZW9mIHBheWxvYWQucHJvcGVydGllcyA9PT0gJ29iamVjdCdcbiAgICAgICAgICAgID8gYFBheWxvYWQgcHJvcGVydHkga2V5cyB3ZXJlOiAke09iamVjdC5rZXlzKHBheWxvYWQucHJvcGVydGllcyl9YFxuICAgICAgICAgICAgOiAnJ1xuICAgICAgICB9YCxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlTWV0YU1hc2tTdGF0ZVVwZGF0ZShuZXdTdGF0ZSkge1xuICAgIGNvbnN0IHVzZXJUcmFpdHMgPSB0aGlzLl9idWlsZFVzZXJUcmFpdHNPYmplY3QobmV3U3RhdGUpO1xuICAgIGlmICh1c2VyVHJhaXRzKSB7XG4gICAgICB0aGlzLmlkZW50aWZ5KHVzZXJUcmFpdHMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRyYWNrIGFsbCBxdWV1ZWQgZXZlbnRzIGFmdGVyIGEgdXNlciBvcHRlZCBpbnRvIG1ldHJpY3MuXG4gIHRyYWNrRXZlbnRzQWZ0ZXJNZXRyaWNzT3B0SW4oKSB7XG4gICAgY29uc3QgeyBldmVudHNCZWZvcmVNZXRyaWNzT3B0SW4gfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBldmVudHNCZWZvcmVNZXRyaWNzT3B0SW4uZm9yRWFjaCgoZXZlbnRCZWZvcmVNZXRyaWNzT3B0SW4pID0+IHtcbiAgICAgIHRoaXMudHJhY2tFdmVudChldmVudEJlZm9yZU1ldHJpY3NPcHRJbik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBPbmNlIHdlIHRyYWNrIHF1ZXVlZCBldmVudHMgYWZ0ZXIgYSB1c2VyIG9wdHMgaW50byBtZXRyaWNzLCB3ZSB3YW50IHRvIGNsZWFyIHRoZSBldmVudCBxdWV1ZS5cbiAgY2xlYXJFdmVudHNBZnRlck1ldHJpY3NPcHRJbigpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIGV2ZW50c0JlZm9yZU1ldHJpY3NPcHRJbjogW10sXG4gICAgfSk7XG4gIH1cblxuICAvLyBJdCBhZGRzIGFuIGV2ZW50IGludG8gYSBxdWV1ZSwgd2hpY2ggaXMgb25seSB0cmFja2VkIGlmIGEgdXNlciBvcHRzIGludG8gbWV0cmljcy5cbiAgYWRkRXZlbnRCZWZvcmVNZXRyaWNzT3B0SW4oZXZlbnQpIHtcbiAgICBjb25zdCBwcmV2U3RhdGUgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZXZlbnRzQmVmb3JlTWV0cmljc09wdEluO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgZXZlbnRzQmVmb3JlTWV0cmljc09wdEluOiBbLi4ucHJldlN0YXRlLCBldmVudF0sXG4gICAgfSk7XG4gIH1cblxuICAvLyBBZGQgb3IgdXBkYXRlIHRyYWl0cyBmb3IgdHJhY2tpbmcuXG4gIHVwZGF0ZVRyYWl0cyhuZXdUcmFpdHMpIHtcbiAgICBjb25zdCB7IHRyYWl0cyB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgdHJhaXRzOiB7IC4uLnRyYWl0cywgLi4ubmV3VHJhaXRzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKiogUFJJVkFURSBNRVRIT0RTICovXG5cbiAgLyoqXG4gICAqIEJ1aWxkIHRoZSBjb250ZXh0IG9iamVjdCB0byBhdHRhY2ggdG8gcGFnZSBhbmQgdHJhY2sgZXZlbnRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1BpY2s8TWV0YU1ldHJpY3NDb250ZXh0LCAncmVmZXJyZXInPn0gW3JlZmVycmVyXSAtIGRhcHAgb3JpZ2luIHRoYXQgaW5pdGlhbGl6ZWRcbiAgICogIHRoZSBub3RpZmljYXRpb24gd2luZG93LlxuICAgKiBAcGFyYW0ge1BpY2s8TWV0YU1ldHJpY3NDb250ZXh0LCAncGFnZSc+fSBbcGFnZV0gLSBwYWdlIG9iamVjdCBkZXNjcmliaW5nIHRoZSBjdXJyZW50XG4gICAqICB2aWV3IG9mIHRoZSBleHRlbnNpb24uIERlZmF1bHRzIHRvIHRoZSBiYWNrZ3JvdW5kLXByb2Nlc3Mgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7TWV0YU1ldHJpY3NDb250ZXh0fVxuICAgKi9cbiAgX2J1aWxkQ29udGV4dChyZWZlcnJlciwgcGFnZSA9IE1FVEFNRVRSSUNTX0JBQ0tHUk9VTkRfUEFHRV9PQkpFQ1QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXBwOiB7XG4gICAgICAgIG5hbWU6ICdNZXRhTWFzayBFeHRlbnNpb24nLFxuICAgICAgICB2ZXJzaW9uOiB0aGlzLnZlcnNpb24sXG4gICAgICB9LFxuICAgICAgdXNlckFnZW50OiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgIHBhZ2UsXG4gICAgICByZWZlcnJlcixcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkJ3MgdGhlIGV2ZW50IHBheWxvYWQsIHByb2Nlc3NpbmcgYWxsIGZpZWxkcyBpbnRvIGEgZm9ybWF0IHRoYXQgY2FuIGJlXG4gICAqIGZlZCB0byBTZWdtZW50J3MgdHJhY2sgbWV0aG9kXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7XG4gICAqICBPbWl0PE1ldGFNZXRyaWNzRXZlbnRQYXlsb2FkLCAnc2Vuc2l0aXZlUHJvcGVydGllcyc+XG4gICAqIH0gcmF3UGF5bG9hZCAtIHJhdyBwYXlsb2FkIHByb3ZpZGVkIHRvIHRyYWNrRXZlbnRcbiAgICogQHJldHVybnMge1NlZ21lbnRFdmVudFBheWxvYWR9IGZvcm1hdHRlZCBldmVudCBwYXlsb2FkIGZvciBzZWdtZW50XG4gICAqL1xuICBfYnVpbGRFdmVudFBheWxvYWQocmF3UGF5bG9hZCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGV2ZW50LFxuICAgICAgcHJvcGVydGllcyxcbiAgICAgIHJldmVudWUsXG4gICAgICB2YWx1ZSxcbiAgICAgIGN1cnJlbmN5LFxuICAgICAgY2F0ZWdvcnksXG4gICAgICBwYWdlLFxuICAgICAgcmVmZXJyZXIsXG4gICAgICBlbnZpcm9ubWVudFR5cGUgPSBFTlZJUk9OTUVOVF9UWVBFX0JBQ0tHUk9VTkQsXG4gICAgfSA9IHJhd1BheWxvYWQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV2ZW50LFxuICAgICAgbWVzc2FnZUlkOiBidWlsZFVuaXF1ZU1lc3NhZ2VJZChyYXdQYXlsb2FkKSxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLy8gVGhlc2UgdmFsdWVzIGFyZSBvbWl0dGVkIGZyb20gcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgaGF2ZSBzcGVjaWFsIG1lYW5pbmdcbiAgICAgICAgLy8gaW4gc2VnbWVudC4gaHR0cHM6Ly9zZWdtZW50LmNvbS9kb2NzL2Nvbm5lY3Rpb25zL3NwZWMvdHJhY2svI3Byb3BlcnRpZXMuXG4gICAgICAgIC8vIHRvIGF2b2lkIGFjY2lkZW50YWxseSB1c2luZyB0aGVzZSBpbmFwcHJvcHJpYXRlbHksIHlvdSBtdXN0IGFkZCB0aGVtIGFzIHRvcFxuICAgICAgICAvLyBsZXZlbCBwcm9wZXJ0aWVzIG9uIHRoZSBldmVudCBwYXlsb2FkLiBXZSBhbHNvIGV4Y2x1ZGUgbG9jYWxlIHRvIHByZXZlbnQgY29uc3VtZXJzXG4gICAgICAgIC8vIGZyb20gb3ZlcndyaXRpbmcgdGhpcyBjb250ZXh0IGxldmVsIHByb3BlcnR5LiBXZSB0cmFjayBpdCBhcyBhIHByb3BlcnR5XG4gICAgICAgIC8vIGJlY2F1c2Ugbm90IGFsbCBkZXN0aW5hdGlvbnMgbWFwIGxvY2FsZSBmcm9tIGNvbnRleHQuXG4gICAgICAgIC4uLm9taXQocHJvcGVydGllcywgWydyZXZlbnVlJywgJ2xvY2FsZScsICdjdXJyZW5jeScsICd2YWx1ZSddKSxcbiAgICAgICAgcmV2ZW51ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGN1cnJlbmN5LFxuICAgICAgICBjYXRlZ29yeSxcbiAgICAgICAgbG9jYWxlOiB0aGlzLmxvY2FsZSxcbiAgICAgICAgY2hhaW5faWQ6IHByb3BlcnRpZXM/LmNoYWluX2lkID8/IHRoaXMuY2hhaW5JZCxcbiAgICAgICAgZW52aXJvbm1lbnRfdHlwZTogZW52aXJvbm1lbnRUeXBlLFxuICAgICAgfSxcbiAgICAgIGNvbnRleHQ6IHRoaXMuX2J1aWxkQ29udGV4dChyZWZlcnJlciwgcGFnZSksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBnZW5lcmF0ZXMgdGhlIE1ldGFNZXRyaWNzIHVzZXIgdHJhaXRzIG9iamVjdCwgb21pdHRpbmcgYW55XG4gICAqIHRyYWl0cyB0aGF0IGhhdmUgbm90IGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgaW52b2NhdGlvbiBvZiB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG1ldGFtYXNrU3RhdGUgLSBGdWxsIG1ldGFtYXNrIHN0YXRlIG9iamVjdC5cbiAgICogQHJldHVybnMge01ldGFNZXRyaWNzVHJhaXRzIHwgbnVsbH0gdHJhaXRzIHRoYXQgaGF2ZSBjaGFuZ2VkIHNpbmNlIGxhc3QgdXBkYXRlXG4gICAqL1xuICBfYnVpbGRVc2VyVHJhaXRzT2JqZWN0KG1ldGFtYXNrU3RhdGUpIHtcbiAgICBjb25zdCB7IHRyYWl0cywgcHJldmlvdXNVc2VyVHJhaXRzIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgLyoqIEB0eXBlIHtNZXRhTWV0cmljc1RyYWl0c30gKi9cbiAgICBjb25zdCBjdXJyZW50VHJhaXRzID0ge1xuICAgICAgW01ldGFNZXRyaWNzVXNlclRyYWl0LkFkZHJlc3NCb29rRW50cmllc106IHN1bShcbiAgICAgICAgT2JqZWN0LnZhbHVlcyhtZXRhbWFza1N0YXRlLmFkZHJlc3NCb29rKS5tYXAoc2l6ZSksXG4gICAgICApLFxuICAgICAgW01ldGFNZXRyaWNzVXNlclRyYWl0Lkluc3RhbGxEYXRlRXh0XTpcbiAgICAgICAgdHJhaXRzW01ldGFNZXRyaWNzVXNlclRyYWl0Lkluc3RhbGxEYXRlRXh0XSB8fCAnJyxcbiAgICAgIFtNZXRhTWV0cmljc1VzZXJUcmFpdC5MZWRnZXJDb25uZWN0aW9uVHlwZV06XG4gICAgICAgIG1ldGFtYXNrU3RhdGUubGVkZ2VyVHJhbnNwb3J0VHlwZSxcbiAgICAgIFtNZXRhTWV0cmljc1VzZXJUcmFpdC5OZXR3b3Jrc0FkZGVkXTogT2JqZWN0LnZhbHVlcyhcbiAgICAgICAgbWV0YW1hc2tTdGF0ZS5uZXR3b3JrQ29uZmlndXJhdGlvbnMsXG4gICAgICApLm1hcCgobmV0d29ya0NvbmZpZ3VyYXRpb24pID0+IG5ldHdvcmtDb25maWd1cmF0aW9uLmNoYWluSWQpLFxuICAgICAgW01ldGFNZXRyaWNzVXNlclRyYWl0Lk5ldHdvcmtzV2l0aG91dFRpY2tlcl06IE9iamVjdC52YWx1ZXMoXG4gICAgICAgIG1ldGFtYXNrU3RhdGUubmV0d29ya0NvbmZpZ3VyYXRpb25zLFxuICAgICAgKVxuICAgICAgICAuZmlsdGVyKCh7IHRpY2tlciB9KSA9PiAhdGlja2VyKVxuICAgICAgICAubWFwKCh7IGNoYWluSWQgfSkgPT4gY2hhaW5JZCksXG4gICAgICBbTWV0YU1ldHJpY3NVc2VyVHJhaXQuTmZ0QXV0b2RldGVjdGlvbkVuYWJsZWRdOlxuICAgICAgICBtZXRhbWFza1N0YXRlLnVzZU5mdERldGVjdGlvbixcbiAgICAgIFtNZXRhTWV0cmljc1VzZXJUcmFpdC5OdW1iZXJPZkFjY291bnRzXTogT2JqZWN0LnZhbHVlcyhcbiAgICAgICAgbWV0YW1hc2tTdGF0ZS5pZGVudGl0aWVzLFxuICAgICAgKS5sZW5ndGgsXG4gICAgICBbTWV0YU1ldHJpY3NVc2VyVHJhaXQuTnVtYmVyT2ZOZnRDb2xsZWN0aW9uc106XG4gICAgICAgIHRoaXMuX2dldEFsbFVuaXF1ZU5GVEFkZHJlc3Nlc0xlbmd0aChtZXRhbWFza1N0YXRlLmFsbE5mdHMpLFxuICAgICAgW01ldGFNZXRyaWNzVXNlclRyYWl0Lk51bWJlck9mTmZ0c106IHRoaXMuX2dldEFsbE5GVHNGbGF0dGVuZWQoXG4gICAgICAgIG1ldGFtYXNrU3RhdGUuYWxsTmZ0cyxcbiAgICAgICkubGVuZ3RoLFxuICAgICAgW01ldGFNZXRyaWNzVXNlclRyYWl0Lk51bWJlck9mVG9rZW5zXTpcbiAgICAgICAgdGhpcy5fZ2V0TnVtYmVyT2ZUb2tlbnMobWV0YW1hc2tTdGF0ZSksXG4gICAgICBbTWV0YU1ldHJpY3NVc2VyVHJhaXQuT3BlbnNlYUFwaUVuYWJsZWRdOiBtZXRhbWFza1N0YXRlLm9wZW5TZWFFbmFibGVkLFxuICAgICAgW01ldGFNZXRyaWNzVXNlclRyYWl0LlRocmVlQm94RW5hYmxlZF06IGZhbHNlLCAvLyBkZXByZWNhdGVkLCBoYXJkLWNvZGVkIGFzIGZhbHNlXG4gICAgICBbTWV0YU1ldHJpY3NVc2VyVHJhaXQuVGhlbWVdOiBtZXRhbWFza1N0YXRlLnRoZW1lIHx8ICdkZWZhdWx0JyxcbiAgICAgIFtNZXRhTWV0cmljc1VzZXJUcmFpdC5Ub2tlbkRldGVjdGlvbkVuYWJsZWRdOlxuICAgICAgICBtZXRhbWFza1N0YXRlLnVzZVRva2VuRGV0ZWN0aW9uLFxuICAgICAgW01ldGFNZXRyaWNzVXNlclRyYWl0LlNlY3VyaXR5UHJvdmlkZXJzXTpcbiAgICAgICAgbWV0YW1hc2tTdGF0ZS50cmFuc2FjdGlvblNlY3VyaXR5Q2hlY2tFbmFibGVkID8gWydvcGVuc2VhJ10gOiBbXSxcbiAgICB9O1xuXG4gICAgaWYgKCFwcmV2aW91c1VzZXJUcmFpdHMpIHtcbiAgICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyBwcmV2aW91c1VzZXJUcmFpdHM6IGN1cnJlbnRUcmFpdHMgfSk7XG4gICAgICByZXR1cm4gY3VycmVudFRyYWl0cztcbiAgICB9XG5cbiAgICBpZiAocHJldmlvdXNVc2VyVHJhaXRzICYmICFpc0VxdWFsKHByZXZpb3VzVXNlclRyYWl0cywgY3VycmVudFRyYWl0cykpIHtcbiAgICAgIGNvbnN0IHVwZGF0ZXMgPSBwaWNrQnkoXG4gICAgICAgIGN1cnJlbnRUcmFpdHMsXG4gICAgICAgICh2LCBrKSA9PiAhaXNFcXVhbChwcmV2aW91c1VzZXJUcmFpdHNba10sIHYpLFxuICAgICAgKTtcbiAgICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyBwcmV2aW91c1VzZXJUcmFpdHM6IGN1cnJlbnRUcmFpdHMgfSk7XG4gICAgICByZXR1cm4gdXBkYXRlcztcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IG9iamVjdCBvZiBhbGwgdmFsaWQgdXNlciB0cmFpdHMuIEZvciBkYXRlcywgd2UgdHJhbnNmb3JtIHRoZW0gaW50byBJU08tODYwMSB0aW1lc3RhbXAgc3RyaW5ncy5cbiAgICpcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9zZWdtZW50LmNvbS9kb2NzL2Nvbm5lY3Rpb25zL3NwZWMvY29tbW9uLyN0aW1lc3RhbXBzfVxuICAgKiBAcGFyYW0ge29iamVjdH0gdXNlclRyYWl0c1xuICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgKi9cbiAgX2J1aWxkVmFsaWRUcmFpdHModXNlclRyYWl0cykge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh1c2VyVHJhaXRzKS5yZWR1Y2UoKHZhbGlkVHJhaXRzLCBba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIGlmICh0aGlzLl9pc1ZhbGlkVHJhaXREYXRlKHZhbHVlKSkge1xuICAgICAgICB2YWxpZFRyYWl0c1trZXldID0gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5faXNWYWxpZFRyYWl0KHZhbHVlKSkge1xuICAgICAgICB2YWxpZFRyYWl0c1trZXldID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYE1ldGFNZXRyaWNzQ29udHJvbGxlcjogXCIke2tleX1cIiB2YWx1ZSBpcyBub3QgYSB2YWxpZCB0cmFpdCB0eXBlYCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWxpZFRyYWl0cztcbiAgICB9LCB7fSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiBhbGwgb2YgdGhlIE5GVHMgdGhlIHVzZXJcbiAgICogcG9zc2Vzc2VzIGFjcm9zcyBhbGwgbmV0d29ya3MgYW5kIGFjY291bnRzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gYWxsTmZ0c1xuICAgKiBAcmV0dXJucyB7W119XG4gICAqL1xuICBfZ2V0QWxsTkZUc0ZsYXR0ZW5lZCA9IG1lbW9pemUoKGFsbE5mdHMgPSB7fSkgPT4ge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKGFsbE5mdHMpLnJlZHVjZSgocmVzdWx0LCBjaGFpbk5GVHMpID0+IHtcbiAgICAgIHJldHVybiByZXN1bHQuY29uY2F0KC4uLk9iamVjdC52YWx1ZXMoY2hhaW5ORlRzKSk7XG4gICAgfSwgW10pO1xuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHVuaXF1ZSBORlQgYWRkcmVzc2VzIHRoZSB1c2VyXG4gICAqIHBvc3Nlc3NlcyBhY3Jvc3MgYWxsIG5ldHdvcmtzIGFuZCBhY2NvdW50cy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGFsbE5mdHNcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIF9nZXRBbGxVbmlxdWVORlRBZGRyZXNzZXNMZW5ndGgoYWxsTmZ0cyA9IHt9KSB7XG4gICAgY29uc3QgYWxsTkZUQWRkcmVzc2VzID0gdGhpcy5fZ2V0QWxsTkZUc0ZsYXR0ZW5lZChhbGxOZnRzKS5tYXAoXG4gICAgICAobmZ0KSA9PiBuZnQuYWRkcmVzcyxcbiAgICApO1xuICAgIGNvbnN0IHVuaXF1ZUFkZHJlc3NlcyA9IG5ldyBTZXQoYWxsTkZUQWRkcmVzc2VzKTtcbiAgICByZXR1cm4gdW5pcXVlQWRkcmVzc2VzLnNpemU7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IG1ldGFtYXNrU3RhdGVcbiAgICogQHJldHVybnMgbnVtYmVyIG9mIHVuaXF1ZSB0b2tlbiBhZGRyZXNzZXNcbiAgICovXG4gIF9nZXROdW1iZXJPZlRva2VucyhtZXRhbWFza1N0YXRlKSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMobWV0YW1hc2tTdGF0ZS5hbGxUb2tlbnMpLnJlZHVjZShcbiAgICAgIChyZXN1bHQsIGFjY291bnRzQnlDaGFpbikgPT4ge1xuICAgICAgICByZXR1cm4gcmVzdWx0ICsgc3VtKE9iamVjdC52YWx1ZXMoYWNjb3VudHNCeUNoYWluKS5tYXAoc2l6ZSkpO1xuICAgICAgfSxcbiAgICAgIDAsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyBzZWdtZW50LmlkZW50aWZ5IHdpdGggZ2l2ZW4gdXNlciB0cmFpdHNcbiAgICpcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9zZWdtZW50LmNvbS9kb2NzL2Nvbm5lY3Rpb25zL3NvdXJjZXMvY2F0YWxvZy9saWJyYXJpZXMvc2VydmVyL25vZGUvI2lkZW50aWZ5fVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge29iamVjdH0gdXNlclRyYWl0c1xuICAgKi9cbiAgX2lkZW50aWZ5KHVzZXJUcmFpdHMpIHtcbiAgICBjb25zdCB7IG1ldGFNZXRyaWNzSWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAoIXVzZXJUcmFpdHMgfHwgT2JqZWN0LmtleXModXNlclRyYWl0cykubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ01ldGFNZXRyaWNzQ29udHJvbGxlciNfaWRlbnRpZnk6IE5vIHVzZXJUcmFpdHMgZm91bmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5fc3VibWl0U2VnbWVudEFQSUNhbGwoJ2lkZW50aWZ5Jywge1xuICAgICAgICB1c2VySWQ6IG1ldGFNZXRyaWNzSWQsXG4gICAgICAgIHRyYWl0czogdXNlclRyYWl0cyxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhpcy5fY2FwdHVyZUV4Y2VwdGlvbihlcnIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgdGhlIHRyYWl0IHZhbHVlLiBTZWdtZW50IGFjY2VwdHMgYW55IGRhdGEgdHlwZS4gV2UgYXJlIGFkZGluZyB2YWxpZGF0aW9uIGhlcmUgdG9cbiAgICogc3VwcG9ydCBkYXRhIHR5cGVzIGZvciBvdXIgU2VnbWVudCBkZXN0aW5hdGlvbihzKSBlLmcuIE1peFBhbmVsXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBfaXNWYWxpZFRyYWl0KHZhbHVlKSB7XG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuICAgIHJldHVybiAoXG4gICAgICB0eXBlID09PSAnc3RyaW5nJyB8fFxuICAgICAgdHlwZSA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB0eXBlID09PSAnbnVtYmVyJyB8fFxuICAgICAgdGhpcy5faXNWYWxpZFRyYWl0QXJyYXkodmFsdWUpIHx8XG4gICAgICB0aGlzLl9pc1ZhbGlkVHJhaXREYXRlKHZhbHVlKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU2VnbWVudCBhY2NlcHRzIGFueSBkYXRhIHR5cGUgdmFsdWUuIFdlIGhhdmUgc3BlY2lhbCBsb2dpYyB0byB2YWxpZGF0ZSBhcnJheXMuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBfaXNWYWxpZFRyYWl0QXJyYXkgPSAodmFsdWUpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiZcbiAgICAgICh2YWx1ZS5ldmVyeSgoZWxlbWVudCkgPT4ge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnO1xuICAgICAgfSkgfHxcbiAgICAgICAgdmFsdWUuZXZlcnkoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIGVsZW1lbnQgPT09ICdib29sZWFuJztcbiAgICAgICAgfSkgfHxcbiAgICAgICAgdmFsdWUuZXZlcnkoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIGVsZW1lbnQgPT09ICdudW1iZXInO1xuICAgICAgICB9KSlcbiAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHZhbHVlIGlzIGFuIGFjY2VwdGVkIGRhdGUgdHlwZVxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgX2lzVmFsaWRUcmFpdERhdGUgPSAodmFsdWUpID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHZhbGlkYXRpb24gb24gdGhlIHBheWxvYWQgYW5kIHVwZGF0ZSB0aGUgaWQgdHlwZSB0byB1c2UgYmVmb3JlXG4gICAqIHNlbmRpbmcgdG8gU2VnbWVudC4gQWxzbyBleGFtaW5lcyB0aGUgb3B0aW9ucyB0byByb3V0ZSBhbmQgaGFuZGxlIHRoZVxuICAgKiBldmVudCBhcHByb3ByaWF0ZWx5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1NlZ21lbnRFdmVudFBheWxvYWR9IHBheWxvYWQgLSBwcm9wZXJ0aWVzIHRvIGF0dGFjaCB0byBldmVudFxuICAgKiBAcGFyYW0ge01ldGFNZXRyaWNzRXZlbnRPcHRpb25zfSBbb3B0aW9uc10gLSBvcHRpb25zIGZvciByb3V0aW5nIGFuZFxuICAgKiAgaGFuZGxpbmcgdGhlIGV2ZW50XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgX3RyYWNrKHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7XG4gICAgICBpc09wdEluLFxuICAgICAgbWV0YU1ldHJpY3NJZDogbWV0YU1ldHJpY3NJZE92ZXJyaWRlLFxuICAgICAgbWF0b21vRXZlbnQsXG4gICAgICBmbHVzaEltbWVkaWF0ZWx5LFxuICAgIH0gPSBvcHRpb25zIHx8IHt9O1xuICAgIGxldCBpZFR5cGUgPSAndXNlcklkJztcbiAgICBsZXQgaWRWYWx1ZSA9IHRoaXMuc3RhdGUubWV0YU1ldHJpY3NJZDtcbiAgICBsZXQgZXhjbHVkZU1ldGFNZXRyaWNzSWQgPSBvcHRpb25zPy5leGNsdWRlTWV0YU1ldHJpY3NJZCA/PyBmYWxzZTtcbiAgICAvLyBUaGlzIGlzIGNhcnJpZWQgb3ZlciBmcm9tIHRoZSBvbGQgaW1wbGVtZW50YXRpb24sIGFuZCB3aWxsIGxpa2VseSBuZWVkXG4gICAgLy8gdG8gYmUgdXBkYXRlZCB0byB3b3JrIHdpdGggdGhlIG5ldyB0cmFja2luZyBwbGFuLiBJIHRoaW5rIHdlIHNob3VsZCB1c2VcbiAgICAvLyBhIGNvbmZpZyBzZXR0aW5nIGZvciB0aGlzIGluc3RlYWQgb2YgdHJ5aW5nIHRvIG1hdGNoIHRoZSBldmVudCBuYW1lXG4gICAgY29uc3QgaXNTZW5kRmxvdyA9IEJvb2xlYW4ocGF5bG9hZC5ldmVudC5tYXRjaCgvXnNlbmR8XmNvbmZpcm0vaXUpKTtcbiAgICBpZiAoaXNTZW5kRmxvdykge1xuICAgICAgZXhjbHVkZU1ldGFNZXRyaWNzSWQgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBJZiB3ZSBhcmUgdHJhY2tpbmcgc2Vuc2l0aXZlIGRhdGEgd2Ugd2lsbCBhbHdheXMgdXNlIHRoZSBhbm9ueW1vdXNJZFxuICAgIC8vIHByb3BlcnR5IGFzIHdlbGwgYXMgb3VyIE1FVEFNRVRSSUNTX0FOT05ZTU9VU19JRC4gVGhpcyBwcmV2ZW50cyB1cyBmcm9tXG4gICAgLy8gYXNzb2NpYXRpbmcgcG90ZW50aWFsbHkgaWRlbnRpZmlhYmxlIGluZm9ybWF0aW9uIHdpdGggYSBzcGVjaWZpYyBpZC5cbiAgICAvLyBEdXJpbmcgdGhlIG9wdCBpbiBmbG93IHdlIHdpbGwgdHJhY2sgYWxsIGV2ZW50cywgYnV0IGRvIHNvIHdpdGggdGhlXG4gICAgLy8gYW5vbnltb3VzIGlkLiBUaGUgb25lIGV4Y2VwdGlvbiB0byB0aGF0IHJ1bGUgaXMgYWZ0ZXIgdGhlIHVzZXIgb3B0cyBpblxuICAgIC8vIHRvIE1ldGFNZXRyaWNzLiBXaGVuIHRoYXQgaGFwcGVucyB3ZSByZWNlaXZlIGJhY2sgdGhlIHVzZXIncyBuZXdcbiAgICAvLyBNZXRhTWV0cmljcyBpZCBiZWZvcmUgaXQgaXMgZnVsbHkgcGVyc2lzdGVkIHRvIHN0YXRlLiBUbyBhdm9pZCBhIHJhY2VcbiAgICAvLyBjb25kaXRpb24gd2UgZXhwbGljaXRseSBwYXNzIHRoZSBuZXcgaWQgdG8gdGhlIHRyYWNrIG1ldGhvZC4gSW4gdGhhdFxuICAgIC8vIGNhc2Ugd2Ugd2lsbCB0cmFjayB0aGUgb3B0IGluIGV2ZW50IHRvIHRoZSB1c2VyJ3MgaWQuIEluIGFsbCBvdGhlciBjYXNlc1xuICAgIC8vIHdlIHVzZSB0aGUgbWV0YU1ldHJpY3NJZCBmcm9tIHN0YXRlLlxuICAgIGlmIChleGNsdWRlTWV0YU1ldHJpY3NJZCB8fCAoaXNPcHRJbiAmJiAhbWV0YU1ldHJpY3NJZE92ZXJyaWRlKSkge1xuICAgICAgaWRUeXBlID0gJ2Fub255bW91c0lkJztcbiAgICAgIGlkVmFsdWUgPSBNRVRBTUVUUklDU19BTk9OWU1PVVNfSUQ7XG4gICAgfSBlbHNlIGlmIChpc09wdEluICYmIG1ldGFNZXRyaWNzSWRPdmVycmlkZSkge1xuICAgICAgaWRWYWx1ZSA9IG1ldGFNZXRyaWNzSWRPdmVycmlkZTtcbiAgICB9XG4gICAgcGF5bG9hZFtpZFR5cGVdID0gaWRWYWx1ZTtcblxuICAgIC8vIElmIHRoaXMgaXMgYW4gZXZlbnQgb24gdGhlIG9sZCBtYXRvbW8gc2NoZW1hLCBhZGQgYSBrZXkgdG8gdGhlIHBheWxvYWRcbiAgICAvLyB0byBkZXNpZ25hdGUgaXQgYXMgc3VjaFxuICAgIGlmIChtYXRvbW9FdmVudCA9PT0gdHJ1ZSkge1xuICAgICAgcGF5bG9hZC5wcm9wZXJ0aWVzLmxlZ2FjeV9ldmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gUHJvbWlzZXMgd2lsbCBvbmx5IHJlc29sdmUgd2hlbiB0aGUgZXZlbnQgaXMgc2VudCB0byBzZWdtZW50LiBGb3IgYW55XG4gICAgLy8gZXZlbnQgdGhhdCByZWxpZXMgb24gdGhpcyBwcm9taXNlIGJlaW5nIGZ1bGZpbGxlZCBiZWZvcmUgcGVyZm9ybWluZyBVSVxuICAgIC8vIHVwZGF0ZXMsIG9yIG90aGVyd2lzZSBkZWxheWluZyB1c2VyIGludGVyYWN0aW9uLCBzdXBwbHkgdGhlXG4gICAgLy8gJ2ZsdXNoSW1tZWRpYXRlbHknIGZsYWcgdG8gdGhlIHRyYWNrRXZlbnQgbWV0aG9kLlxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBjYWxsYmFjayA9IChlcnIpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIC8vIFRoZSBlcnJvciB0aGF0IHNlZ21lbnQgZ2l2ZXMgdXMgaGFzIHNvbWUgbWFuaXB1bGF0aW9uIGRvbmUgdG8gaXRcbiAgICAgICAgICAvLyB0aGF0IHNlZW1pbmdseSBicmVha3Mgd2l0aCBsb2NrZG93biBlbmFibGVkLiBDcmVhdGluZyBhIG5ldyBlcnJvclxuICAgICAgICAgIC8vIGhlcmUgcHJldmVudHMgdGhlIHN5c3RlbSBmcm9tIGZyZWV6aW5nIHdoZW4gdGhlIG5ldHdvcmsgcmVxdWVzdCB0b1xuICAgICAgICAgIC8vIHNlZ21lbnQgZmFpbHMgZm9yIGFueSByZWFzb24uXG4gICAgICAgICAgY29uc3Qgc2FmZUVycm9yID0gbmV3IEVycm9yKGVyci5tZXNzYWdlKTtcbiAgICAgICAgICBzYWZlRXJyb3Iuc3RhY2sgPSBlcnIuc3RhY2s7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChzYWZlRXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9zdWJtaXRTZWdtZW50QVBJQ2FsbCgndHJhY2snLCBwYXlsb2FkLCBjYWxsYmFjayk7XG4gICAgICBpZiAoZmx1c2hJbW1lZGlhdGVseSkge1xuICAgICAgICB0aGlzLnNlZ21lbnQuZmx1c2goKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIE1ldGhvZCBiZWxvdyBzdWJtaXRzIHRoZSByZXF1ZXN0IHRvIGFuYWx5dGljcyBTREsuXG4gIC8vIEl0IHdpbGwgYWxzbyBhZGQgZXZlbnQgdG8gY29udHJvbGxlciBzdG9yZVxuICAvLyBhbmQgcGFzcyBhIGNhbGxiYWNrIHRvIHJlbW92ZSBpdCBmcm9tIHN0b3JlIG9uY2UgcmVxdWVzdCBpcyBzdWJtaXR0ZWQgdG8gc2VnbWVudFxuICAvLyBTYXZpbmcgc2VnbWVudEFwaUNhbGxzIGluIGNvbnRyb2xsZXIgc3RvcmUgaW4gTVYzIGVuc3VyZXMgdGhhdCBldmVudHMgYXJlIHRyYWNrZWRcbiAgLy8gZXZlbiBpZiBzZXJ2aWNlIHdvcmtlciB0ZXJtaW5hdGVzIGJlZm9yZSBldmVudHMgYXJlIHN1Ym1pdGVlZCB0byBzZWdtZW50LlxuICBfc3VibWl0U2VnbWVudEFQSUNhbGwoZXZlbnRUeXBlLCBwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHsgbWV0YU1ldHJpY3NJZCwgcGFydGljaXBhdGVJbk1ldGFNZXRyaWNzIH0gPSB0aGlzLnN0YXRlO1xuICAgIGlmICghcGFydGljaXBhdGVJbk1ldGFNZXRyaWNzIHx8ICFtZXRhTWV0cmljc0lkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbWVzc2FnZUlkID0gcGF5bG9hZC5tZXNzYWdlSWQgfHwgZ2VuZXJhdGVSYW5kb21JZCgpO1xuICAgIGxldCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgIGlmIChwYXlsb2FkLnRpbWVzdGFtcCkge1xuICAgICAgY29uc3QgcGF5bG9hZERhdGUgPSBuZXcgRGF0ZShwYXlsb2FkLnRpbWVzdGFtcCk7XG4gICAgICBpZiAoaXNWYWxpZERhdGUocGF5bG9hZERhdGUpKSB7XG4gICAgICAgIHRpbWVzdGFtcCA9IHBheWxvYWREYXRlO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtb2RpZmllZFBheWxvYWQgPSB7IC4uLnBheWxvYWQsIG1lc3NhZ2VJZCwgdGltZXN0YW1wIH07XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICBzZWdtZW50QXBpQ2FsbHM6IHtcbiAgICAgICAgLi4udGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnNlZ21lbnRBcGlDYWxscyxcbiAgICAgICAgW21lc3NhZ2VJZF06IHtcbiAgICAgICAgICBldmVudFR5cGUsXG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgLi4ubW9kaWZpZWRQYXlsb2FkLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBtb2RpZmllZFBheWxvYWQudGltZXN0YW1wLnRvU3RyaW5nKCksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgY29uc3QgbW9kaWZpZWRDYWxsYmFjayA9IChyZXN1bHQpID0+IHtcbiAgICAgIGNvbnN0IHsgc2VnbWVudEFwaUNhbGxzIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgICBkZWxldGUgc2VnbWVudEFwaUNhbGxzW21lc3NhZ2VJZF07XG4gICAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgICAgc2VnbWVudEFwaUNhbGxzLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY2FsbGJhY2s/LihyZXN1bHQpO1xuICAgIH07XG4gICAgdGhpcy5zZWdtZW50W2V2ZW50VHlwZV0obW9kaWZpZWRQYXlsb2FkLCBtb2RpZmllZENhbGxiYWNrKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgY3JlYXRlQXN5bmNNaWRkbGV3YXJlLFxuICBjcmVhdGVTY2FmZm9sZE1pZGRsZXdhcmUsXG4gIEpzb25ScGNFbmdpbmUsXG4gIG1lcmdlTWlkZGxld2FyZSxcbiAgSnNvblJwY01pZGRsZXdhcmUsXG59IGZyb20gJ2pzb24tcnBjLWVuZ2luZSc7XG5pbXBvcnQge1xuICBjcmVhdGVCbG9ja0NhY2hlTWlkZGxld2FyZSxcbiAgY3JlYXRlQmxvY2tSZWZNaWRkbGV3YXJlLFxuICBjcmVhdGVCbG9ja1JlZlJld3JpdGVNaWRkbGV3YXJlLFxuICBjcmVhdGVCbG9ja1RyYWNrZXJJbnNwZWN0b3JNaWRkbGV3YXJlLFxuICBjcmVhdGVJbmZsaWdodENhY2hlTWlkZGxld2FyZSxcbiAgY3JlYXRlRmV0Y2hNaWRkbGV3YXJlLFxuICBjcmVhdGVSZXRyeU9uRW1wdHlNaWRkbGV3YXJlLFxufSBmcm9tICdAbWV0YW1hc2svZXRoLWpzb24tcnBjLW1pZGRsZXdhcmUnO1xuaW1wb3J0IHtcbiAgcHJvdmlkZXJGcm9tRW5naW5lLFxuICBwcm92aWRlckZyb21NaWRkbGV3YXJlLFxuICBTYWZlRXZlbnRFbWl0dGVyUHJvdmlkZXIsXG59IGZyb20gJ0BtZXRhbWFzay9ldGgtanNvbi1ycGMtcHJvdmlkZXInO1xuaW1wb3J0IHsgY3JlYXRlSW5mdXJhTWlkZGxld2FyZSB9IGZyb20gJ0BtZXRhbWFzay9ldGgtanNvbi1ycGMtaW5mdXJhJztcbmltcG9ydCB0eXBlIHsgSGV4IH0gZnJvbSAnQG1ldGFtYXNrL3V0aWxzL2Rpc3QnO1xuaW1wb3J0IHsgUG9sbGluZ0Jsb2NrVHJhY2tlciB9IGZyb20gJ2V0aC1ibG9jay10cmFja2VyL2Rpc3QnO1xuaW1wb3J0IHsgU0VDT05EIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy90aW1lJztcbmltcG9ydCB7XG4gIEJVSUxUX0lOX0lORlVSQV9ORVRXT1JLUyxcbiAgQnVpbHRJbkluZnVyYU5ldHdvcmssXG59IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbmV0d29yayc7XG5cbmV4cG9ydCBlbnVtIE5ldHdvcmtDbGllbnRUeXBlIHtcbiAgQ3VzdG9tID0gJ2N1c3RvbScsXG4gIEluZnVyYSA9ICdpbmZ1cmEnLFxufVxuXG50eXBlIEN1c3RvbU5ldHdvcmtDb25maWd1cmF0aW9uID0ge1xuICBjaGFpbklkOiBIZXg7XG4gIHJwY1VybDogc3RyaW5nO1xuICB0eXBlOiBOZXR3b3JrQ2xpZW50VHlwZS5DdXN0b207XG59O1xuXG50eXBlIEluZnVyYU5ldHdvcmtDb25maWd1cmF0aW9uID0ge1xuICBuZXR3b3JrOiBCdWlsdEluSW5mdXJhTmV0d29yaztcbiAgaW5mdXJhUHJvamVjdElkOiBzdHJpbmc7XG4gIHR5cGU6IE5ldHdvcmtDbGllbnRUeXBlLkluZnVyYTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgSlNPTiBSUEMgbmV0d29yayBjbGllbnQgZm9yIGEgc3BlY2lmaWMgbmV0d29yay5cbiAqXG4gKiBAcGFyYW0gbmV0d29ya0NvbmZpZyAtIFRoZSBuZXR3b3JrIGNvbmZpZ3VyYXRpb24uXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTmV0d29ya0NsaWVudChcbiAgbmV0d29ya0NvbmZpZzogQ3VzdG9tTmV0d29ya0NvbmZpZ3VyYXRpb24gfCBJbmZ1cmFOZXR3b3JrQ29uZmlndXJhdGlvbixcbik6IHsgcHJvdmlkZXI6IFNhZmVFdmVudEVtaXR0ZXJQcm92aWRlcjsgYmxvY2tUcmFja2VyOiBQb2xsaW5nQmxvY2tUcmFja2VyIH0ge1xuICBjb25zdCBycGNBcGlNaWRkbGV3YXJlID1cbiAgICBuZXR3b3JrQ29uZmlnLnR5cGUgPT09IE5ldHdvcmtDbGllbnRUeXBlLkluZnVyYVxuICAgICAgPyBjcmVhdGVJbmZ1cmFNaWRkbGV3YXJlKHtcbiAgICAgICAgICBuZXR3b3JrOiBuZXR3b3JrQ29uZmlnLm5ldHdvcmssXG4gICAgICAgICAgcHJvamVjdElkOiBuZXR3b3JrQ29uZmlnLmluZnVyYVByb2plY3RJZCxcbiAgICAgICAgICBtYXhBdHRlbXB0czogNSxcbiAgICAgICAgICBzb3VyY2U6ICdtZXRhbWFzaycsXG4gICAgICAgIH0pXG4gICAgICA6IGNyZWF0ZUZldGNoTWlkZGxld2FyZSh7XG4gICAgICAgICAgYnRvYTogZ2xvYmFsLmJ0b2EsXG4gICAgICAgICAgZmV0Y2g6IGdsb2JhbC5mZXRjaCxcbiAgICAgICAgICBycGNVcmw6IG5ldHdvcmtDb25maWcucnBjVXJsLFxuICAgICAgICB9KTtcblxuICBjb25zdCBycGNQcm92aWRlciA9IHByb3ZpZGVyRnJvbU1pZGRsZXdhcmUocnBjQXBpTWlkZGxld2FyZSk7XG5cbiAgY29uc3QgYmxvY2tUcmFja2VyT3B0cyA9XG4gICAgcHJvY2Vzcy5lbnYuSU5fVEVTVCAmJiBuZXR3b3JrQ29uZmlnLnR5cGUgPT09ICdjdXN0b20nXG4gICAgICA/IHsgcG9sbGluZ0ludGVydmFsOiBTRUNPTkQgfVxuICAgICAgOiB7fTtcbiAgY29uc3QgYmxvY2tUcmFja2VyID0gbmV3IFBvbGxpbmdCbG9ja1RyYWNrZXIoe1xuICAgIC4uLmJsb2NrVHJhY2tlck9wdHMsXG4gICAgcHJvdmlkZXI6IHJwY1Byb3ZpZGVyLFxuICB9KTtcblxuICBjb25zdCBuZXR3b3JrTWlkZGxld2FyZSA9XG4gICAgbmV0d29ya0NvbmZpZy50eXBlID09PSBOZXR3b3JrQ2xpZW50VHlwZS5JbmZ1cmFcbiAgICAgID8gY3JlYXRlSW5mdXJhTmV0d29ya01pZGRsZXdhcmUoe1xuICAgICAgICAgIGJsb2NrVHJhY2tlcixcbiAgICAgICAgICBuZXR3b3JrOiBuZXR3b3JrQ29uZmlnLm5ldHdvcmssXG4gICAgICAgICAgcnBjUHJvdmlkZXIsXG4gICAgICAgICAgcnBjQXBpTWlkZGxld2FyZSxcbiAgICAgICAgfSlcbiAgICAgIDogY3JlYXRlQ3VzdG9tTmV0d29ya01pZGRsZXdhcmUoe1xuICAgICAgICAgIGJsb2NrVHJhY2tlcixcbiAgICAgICAgICBjaGFpbklkOiBuZXR3b3JrQ29uZmlnLmNoYWluSWQsXG4gICAgICAgICAgcnBjQXBpTWlkZGxld2FyZSxcbiAgICAgICAgfSk7XG5cbiAgY29uc3QgZW5naW5lID0gbmV3IEpzb25ScGNFbmdpbmUoKTtcblxuICBlbmdpbmUucHVzaChuZXR3b3JrTWlkZGxld2FyZSk7XG5cbiAgY29uc3QgcHJvdmlkZXIgPSBwcm92aWRlckZyb21FbmdpbmUoZW5naW5lKTtcblxuICByZXR1cm4geyBwcm92aWRlciwgYmxvY2tUcmFja2VyIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUluZnVyYU5ldHdvcmtNaWRkbGV3YXJlKHtcbiAgYmxvY2tUcmFja2VyLFxuICBuZXR3b3JrLFxuICBycGNQcm92aWRlcixcbiAgcnBjQXBpTWlkZGxld2FyZSxcbn06IHtcbiAgYmxvY2tUcmFja2VyOiBQb2xsaW5nQmxvY2tUcmFja2VyO1xuICBuZXR3b3JrOiBCdWlsdEluSW5mdXJhTmV0d29yaztcbiAgcnBjUHJvdmlkZXI6IFNhZmVFdmVudEVtaXR0ZXJQcm92aWRlcjtcbiAgcnBjQXBpTWlkZGxld2FyZTogSnNvblJwY01pZGRsZXdhcmU8dW5rbm93biwgdW5rbm93bj47XG59KSB7XG4gIHJldHVybiBtZXJnZU1pZGRsZXdhcmUoW1xuICAgIGNyZWF0ZU5ldHdvcmtBbmRDaGFpbklkTWlkZGxld2FyZSh7IG5ldHdvcmsgfSksXG4gICAgY3JlYXRlQmxvY2tDYWNoZU1pZGRsZXdhcmUoeyBibG9ja1RyYWNrZXIgfSksXG4gICAgY3JlYXRlSW5mbGlnaHRDYWNoZU1pZGRsZXdhcmUoKSxcbiAgICBjcmVhdGVCbG9ja1JlZk1pZGRsZXdhcmUoeyBibG9ja1RyYWNrZXIsIHByb3ZpZGVyOiBycGNQcm92aWRlciB9KSxcbiAgICBjcmVhdGVSZXRyeU9uRW1wdHlNaWRkbGV3YXJlKHsgYmxvY2tUcmFja2VyLCBwcm92aWRlcjogcnBjUHJvdmlkZXIgfSksXG4gICAgY3JlYXRlQmxvY2tUcmFja2VySW5zcGVjdG9yTWlkZGxld2FyZSh7IGJsb2NrVHJhY2tlciB9KSxcbiAgICBycGNBcGlNaWRkbGV3YXJlLFxuICBdKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTmV0d29ya0FuZENoYWluSWRNaWRkbGV3YXJlKHtcbiAgbmV0d29yayxcbn06IHtcbiAgbmV0d29yazogQnVpbHRJbkluZnVyYU5ldHdvcms7XG59KSB7XG4gIGlmICghQlVJTFRfSU5fSU5GVVJBX05FVFdPUktTW25ldHdvcmtdKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBjcmVhdGVJbmZ1cmFDbGllbnQgLSB1bmtub3duIG5ldHdvcmsgXCIke25ldHdvcmt9XCJgKTtcbiAgfVxuXG4gIGNvbnN0IHsgY2hhaW5JZCwgbmV0d29ya0lkIH0gPSBCVUlMVF9JTl9JTkZVUkFfTkVUV09SS1NbbmV0d29ya107XG5cbiAgcmV0dXJuIGNyZWF0ZVNjYWZmb2xkTWlkZGxld2FyZSh7XG4gICAgZXRoX2NoYWluSWQ6IGNoYWluSWQsXG4gICAgbmV0X3ZlcnNpb246IG5ldHdvcmtJZCxcbiAgfSk7XG59XG5cbmNvbnN0IGNyZWF0ZUNoYWluSWRNaWRkbGV3YXJlID0gKFxuICBjaGFpbklkOiBzdHJpbmcsXG4pOiBKc29uUnBjTWlkZGxld2FyZTx1bmtub3duLCB1bmtub3duPiA9PiB7XG4gIHJldHVybiAocmVxLCByZXMsIG5leHQsIGVuZCkgPT4ge1xuICAgIGlmIChyZXEubWV0aG9kID09PSAnZXRoX2NoYWluSWQnKSB7XG4gICAgICByZXMucmVzdWx0ID0gY2hhaW5JZDtcbiAgICAgIHJldHVybiBlbmQoKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQoKTtcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUN1c3RvbU5ldHdvcmtNaWRkbGV3YXJlKHtcbiAgYmxvY2tUcmFja2VyLFxuICBjaGFpbklkLFxuICBycGNBcGlNaWRkbGV3YXJlLFxufToge1xuICBibG9ja1RyYWNrZXI6IFBvbGxpbmdCbG9ja1RyYWNrZXI7XG4gIGNoYWluSWQ6IHN0cmluZztcbiAgcnBjQXBpTWlkZGxld2FyZTogYW55O1xufSkge1xuICBjb25zdCB0ZXN0TWlkZGxld2FyZXMgPSBwcm9jZXNzLmVudi5JTl9URVNUXG4gICAgPyBbY3JlYXRlRXN0aW1hdGVHYXNEZWxheVRlc3RNaWRkbGV3YXJlKCldXG4gICAgOiBbXTtcblxuICByZXR1cm4gbWVyZ2VNaWRkbGV3YXJlKFtcbiAgICAuLi50ZXN0TWlkZGxld2FyZXMsXG4gICAgY3JlYXRlQ2hhaW5JZE1pZGRsZXdhcmUoY2hhaW5JZCksXG4gICAgY3JlYXRlQmxvY2tSZWZSZXdyaXRlTWlkZGxld2FyZSh7IGJsb2NrVHJhY2tlciB9KSxcbiAgICBjcmVhdGVCbG9ja0NhY2hlTWlkZGxld2FyZSh7IGJsb2NrVHJhY2tlciB9KSxcbiAgICBjcmVhdGVJbmZsaWdodENhY2hlTWlkZGxld2FyZSgpLFxuICAgIGNyZWF0ZUJsb2NrVHJhY2tlckluc3BlY3Rvck1pZGRsZXdhcmUoeyBibG9ja1RyYWNrZXIgfSksXG4gICAgcnBjQXBpTWlkZGxld2FyZSxcbiAgXSk7XG59XG5cbi8qKlxuICogRm9yIHVzZSBpbiB0ZXN0cyBvbmx5LlxuICogQWRkcyBhIGRlbGF5IHRvIGBldGhfZXN0aW1hdGVHYXNgIGNhbGxzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVFc3RpbWF0ZUdhc0RlbGF5VGVzdE1pZGRsZXdhcmUoKSB7XG4gIHJldHVybiBjcmVhdGVBc3luY01pZGRsZXdhcmUoYXN5bmMgKHJlcSwgXywgbmV4dCkgPT4ge1xuICAgIGlmIChyZXEubWV0aG9kID09PSAnZXRoX2VzdGltYXRlR2FzJykge1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgU0VDT05EICogMikpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dCgpO1xuICB9KTtcbn1cbiIsImV4cG9ydCAqIGZyb20gJy4vbmV0d29yay1jb250cm9sbGVyJztcbiIsImltcG9ydCB7IHN0cmljdCBhcyBhc3NlcnQgfSBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZVN0b3JlIH0gZnJvbSAnQG1ldGFtYXNrL29icy1zdG9yZSc7XG5pbXBvcnQgbG9nIGZyb20gJ2xvZ2xldmVsJztcbmltcG9ydCB7XG4gIGNyZWF0ZVN3YXBwYWJsZVByb3h5LFxuICBjcmVhdGVFdmVudEVtaXR0ZXJQcm94eSxcbiAgU3dhcHBhYmxlUHJveHksXG59IGZyb20gJ0BtZXRhbWFzay9zd2FwcGFibGUtb2JqLXByb3h5JztcbmltcG9ydCBFdGhRdWVyeSBmcm9tICdldGgtcXVlcnknO1xuaW1wb3J0IHsgUmVzdHJpY3RlZENvbnRyb2xsZXJNZXNzZW5nZXIgfSBmcm9tICdAbWV0YW1hc2svYmFzZS1jb250cm9sbGVyJztcbmltcG9ydCB7IHY0IGFzIHV1aWQgfSBmcm9tICd1dWlkJztcbmltcG9ydCB7IEhleCwgaXNQbGFpbk9iamVjdCwgaXNTdHJpY3RIZXhTdHJpbmcgfSBmcm9tICdAbWV0YW1hc2svdXRpbHMnO1xuaW1wb3J0IHsgZXJyb3JDb2RlcyB9IGZyb20gJ2V0aC1ycGMtZXJyb3JzJztcbmltcG9ydCB7IFNhZmVFdmVudEVtaXR0ZXJQcm92aWRlciB9IGZyb20gJ0BtZXRhbWFzay9ldGgtanNvbi1ycGMtcHJvdmlkZXInO1xuaW1wb3J0IHsgUG9sbGluZ0Jsb2NrVHJhY2tlciB9IGZyb20gJ2V0aC1ibG9jay10cmFja2VyJztcbmltcG9ydCB7IGhleFRvRGVjaW1hbCB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL2NvbnZlcnNpb24udXRpbHMnO1xuaW1wb3J0IHtcbiAgSU5GVVJBX1BST1ZJREVSX1RZUEVTLFxuICBJTkZVUkFfQkxPQ0tFRF9LRVksXG4gIFRFU1RfTkVUV09SS19USUNLRVJfTUFQLFxuICBDSEFJTl9JRFMsXG4gIE5FVFdPUktfVFlQRVMsXG4gIEJVSUxUX0lOX0lORlVSQV9ORVRXT1JLUyxcbiAgQnVpbHRJbkluZnVyYU5ldHdvcmssXG4gIE5ldHdvcmtTdGF0dXMsXG59IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbmV0d29yayc7XG5pbXBvcnQge1xuICBpc1ByZWZpeGVkRm9ybWF0dGVkSGV4U3RyaW5nLFxuICBpc1NhZmVDaGFpbklkLFxufSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9uZXR3b3JrLnV0aWxzJztcbmltcG9ydCB7XG4gIE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeSxcbiAgTWV0YU1ldHJpY3NFdmVudFBheWxvYWQsXG59IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbWV0YW1ldHJpY3MnO1xuaW1wb3J0IHsgaXNFcnJvcldpdGhNZXNzYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvZXJyb3InO1xuaW1wb3J0IHtcbiAgY3JlYXRlTmV0d29ya0NsaWVudCxcbiAgTmV0d29ya0NsaWVudFR5cGUsXG59IGZyb20gJy4vY3JlYXRlLW5ldHdvcmstY2xpZW50JztcblxuLyoqXG4gKiBUaGUgbmFtZSBvZiBOZXR3b3JrQ29udHJvbGxlci5cbiAqL1xuY29uc3QgbmFtZSA9ICdOZXR3b3JrQ29udHJvbGxlcic7XG5cbi8qKlxuICogQSBibG9jayBoZWFkZXIgb2JqZWN0IHRoYXQgYGV0aF9nZXRCbG9ja0J5TnVtYmVyYCByZXR1cm5zLiBOb3RlIHRoYXQgdGhpc1xuICogdHlwZSBkb2VzIG5vdCBzcGVjaWZ5IGFsbCBvZiB0aGUgcHJvcGVydGllcyBwcmVzZW50IHdpdGhpbiB0aGUgYmxvY2sgaGVhZGVyO1xuICogd2l0aGluIE5ldHdvcmtDb250cm9sbGVyLCB3ZSBhcmUgb25seSBpbnRlcmVzdGVkIGluIGBiYXNlRmVlUGVyR2FzYC5cbiAqL1xudHlwZSBCbG9jayA9IHtcbiAgYmFzZUZlZVBlckdhcz86IHVua25vd247XG59O1xuXG4vKipcbiAqIEVuY29kZXMgYSBmZXcgcGllY2VzIG9mIGluZm9ybWF0aW9uOlxuICpcbiAqIC0gV2hldGhlciBvciBub3QgYSBwcm92aWRlciBpcyBjb25maWd1cmVkIGZvciBhbiBJbmZ1cmEgbmV0d29yayBvciBhXG4gKiBub24tSW5mdXJhIG5ldHdvcmsuXG4gKiAtIElmIGFuIEluZnVyYSBuZXR3b3JrLCB0aGVuIHdoaWNoIG5ldHdvcmsuXG4gKiAtIElmIGEgbm9uLUluZnVyYSBuZXR3b3JrLCB0aGVuIHdoZXRoZXIgdGhlIG5ldHdvcmsgZXhpc3RzIGxvY2FsbHkgb3JcbiAqIHJlbW90ZWx5LlxuICpcbiAqIFByaW1hcmlseSB1c2VkIHRvIGJ1aWxkIHRoZSBuZXR3b3JrIGNsaWVudCBhbmQgY2hlY2sgdGhlIGF2YWlsYWJpbGl0eSBvZiBhXG4gKiBuZXR3b3JrLlxuICovXG5leHBvcnQgdHlwZSBQcm92aWRlclR5cGUgPSBCdWlsdEluSW5mdXJhTmV0d29yayB8IHR5cGVvZiBORVRXT1JLX1RZUEVTLlJQQztcblxuLyoqXG4gKiBUaGUgbmV0d29yayBJRCBvZiBhIG5ldHdvcmsuXG4gKi9cbnR5cGUgTmV0d29ya0lkID0gYCR7bnVtYmVyfWA7XG5cbi8qKlxuICogVGhlIElEIG9mIGEgbmV0d29yayBjb25maWd1cmF0aW9uLlxuICovXG50eXBlIE5ldHdvcmtDb25maWd1cmF0aW9uSWQgPSBzdHJpbmc7XG5cbi8qKlxuICogVGhlIGNoYWluIElEIG9mIGEgbmV0d29yay5cbiAqL1xudHlwZSBDaGFpbklkID0gSGV4O1xuXG4vKipcbiAqIFRoZSBzZXQgb2YgZXZlbnQgdHlwZXMgdGhhdCBOZXR3b3JrQ29udHJvbGxlciBjYW4gcHVibGlzaCB2aWEgaXRzIG1lc3Nlbmdlci5cbiAqL1xuZXhwb3J0IGVudW0gTmV0d29ya0NvbnRyb2xsZXJFdmVudFR5cGUge1xuICAvKipcbiAgICogQHNlZSB7QGxpbmsgTmV0d29ya0NvbnRyb2xsZXJOZXR3b3JrRGlkQ2hhbmdlRXZlbnR9XG4gICAqL1xuICBOZXR3b3JrRGlkQ2hhbmdlID0gJ05ldHdvcmtDb250cm9sbGVyOm5ldHdvcmtEaWRDaGFuZ2UnLFxuICAvKipcbiAgICogQHNlZSB7QGxpbmsgTmV0d29ya0NvbnRyb2xsZXJOZXR3b3JrV2lsbENoYW5nZUV2ZW50fVxuICAgKi9cbiAgTmV0d29ya1dpbGxDaGFuZ2UgPSAnTmV0d29ya0NvbnRyb2xsZXI6bmV0d29ya1dpbGxDaGFuZ2UnLFxuICAvKipcbiAgICogQHNlZSB7QGxpbmsgTmV0d29ya0NvbnRyb2xsZXJJbmZ1cmFJc0Jsb2NrZWRFdmVudH1cbiAgICovXG4gIEluZnVyYUlzQmxvY2tlZCA9ICdOZXR3b3JrQ29udHJvbGxlcjppbmZ1cmFJc0Jsb2NrZWQnLFxuICAvKipcbiAgICogQHNlZSB7QGxpbmsgTmV0d29ya0NvbnRyb2xsZXJJbmZ1cmFJc1VuYmxvY2tlZEV2ZW50fVxuICAgKi9cbiAgSW5mdXJhSXNVbmJsb2NrZWQgPSAnTmV0d29ya0NvbnRyb2xsZXI6aW5mdXJhSXNVbmJsb2NrZWQnLFxufVxuXG4vKipcbiAqIGBuZXR3b3JrV2lsbENoYW5nZWAgaXMgcHVibGlzaGVkIHdoZW4gdGhlIGN1cnJlbnQgbmV0d29yayBpcyBhYm91dCB0byBiZVxuICogc3dpdGNoZWQsIGJ1dCB0aGUgbmV3IHByb3ZpZGVyIGhhcyBub3QgYmVlbiBjcmVhdGVkIGFuZCBubyBzdGF0ZSBjaGFuZ2VzIGhhdmVcbiAqIG9jY3VycmVkIHlldC5cbiAqL1xuZXhwb3J0IHR5cGUgTmV0d29ya0NvbnRyb2xsZXJOZXR3b3JrV2lsbENoYW5nZUV2ZW50ID0ge1xuICB0eXBlOiBOZXR3b3JrQ29udHJvbGxlckV2ZW50VHlwZS5OZXR3b3JrV2lsbENoYW5nZTtcbiAgcGF5bG9hZDogW107XG59O1xuXG4vKipcbiAqIGBuZXR3b3JrRGlkQ2hhbmdlYCBpcyBwdWJsaXNoZWQgYWZ0ZXIgYSBwcm92aWRlciBoYXMgYmVlbiBjcmVhdGVkIGZvciBhIG5ld2x5XG4gKiBzd2l0Y2hlZCBuZXR3b3JrIChidXQgYmVmb3JlIHRoZSBuZXR3b3JrIGhhcyBiZWVuIGNvbmZpcm1lZCB0byBiZSBhdmFpbGFibGUpLlxuICovXG5leHBvcnQgdHlwZSBOZXR3b3JrQ29udHJvbGxlck5ldHdvcmtEaWRDaGFuZ2VFdmVudCA9IHtcbiAgdHlwZTogTmV0d29ya0NvbnRyb2xsZXJFdmVudFR5cGUuTmV0d29ya0RpZENoYW5nZTtcbiAgcGF5bG9hZDogW107XG59O1xuXG4vKipcbiAqIGBpbmZ1cmFJc0Jsb2NrZWRgIGlzIHB1Ymxpc2hlZCBhZnRlciB0aGUgbmV0d29yayBpcyBzd2l0Y2hlZCB0byBhbiBJbmZ1cmFcbiAqIG5ldHdvcmssIGJ1dCB3aGVuIEluZnVyYSByZXR1cm5zIGFuIGVycm9yIGJsb2NraW5nIHRoZSB1c2VyIGJhc2VkIG9uIHRoZWlyXG4gKiBsb2NhdGlvbi5cbiAqL1xuZXhwb3J0IHR5cGUgTmV0d29ya0NvbnRyb2xsZXJJbmZ1cmFJc0Jsb2NrZWRFdmVudCA9IHtcbiAgdHlwZTogTmV0d29ya0NvbnRyb2xsZXJFdmVudFR5cGUuSW5mdXJhSXNCbG9ja2VkO1xuICBwYXlsb2FkOiBbXTtcbn07XG5cbi8qKlxuICogYGluZnVyYUlzQmxvY2tlZGAgaXMgcHVibGlzaGVkIGVpdGhlciBhZnRlciB0aGUgbmV0d29yayBpcyBzd2l0Y2hlZCB0byBhblxuICogSW5mdXJhIG5ldHdvcmsgYW5kIEluZnVyYSBkb2VzIG5vdCByZXR1cm4gYW4gZXJyb3IgYmxvY2tpbmcgdGhlIHVzZXIgYmFzZWQgb25cbiAqIHRoZWlyIGxvY2F0aW9uLCBvciB0aGUgbmV0d29yayBpcyBzd2l0Y2hlZCB0byBhIG5vbi1JbmZ1cmEgbmV0d29yay5cbiAqL1xuZXhwb3J0IHR5cGUgTmV0d29ya0NvbnRyb2xsZXJJbmZ1cmFJc1VuYmxvY2tlZEV2ZW50ID0ge1xuICB0eXBlOiBOZXR3b3JrQ29udHJvbGxlckV2ZW50VHlwZS5JbmZ1cmFJc1VuYmxvY2tlZDtcbiAgcGF5bG9hZDogW107XG59O1xuXG4vKipcbiAqIFRoZSBzZXQgb2YgZXZlbnRzIHRoYXQgdGhlIE5ldHdvcmtDb250cm9sbGVyIG1lc3NlbmdlciBjYW4gcHVibGlzaC5cbiAqL1xuZXhwb3J0IHR5cGUgTmV0d29ya0NvbnRyb2xsZXJFdmVudCA9XG4gIHwgTmV0d29ya0NvbnRyb2xsZXJOZXR3b3JrRGlkQ2hhbmdlRXZlbnRcbiAgfCBOZXR3b3JrQ29udHJvbGxlck5ldHdvcmtXaWxsQ2hhbmdlRXZlbnRcbiAgfCBOZXR3b3JrQ29udHJvbGxlckluZnVyYUlzQmxvY2tlZEV2ZW50XG4gIHwgTmV0d29ya0NvbnRyb2xsZXJJbmZ1cmFJc1VuYmxvY2tlZEV2ZW50O1xuXG4vKipcbiAqIFRoZSBtZXNzZW5nZXIgdGhhdCB0aGUgTmV0d29ya0NvbnRyb2xsZXIgdXNlcyB0byBwdWJsaXNoIGV2ZW50cy5cbiAqL1xuZXhwb3J0IHR5cGUgTmV0d29ya0NvbnRyb2xsZXJNZXNzZW5nZXIgPSBSZXN0cmljdGVkQ29udHJvbGxlck1lc3NlbmdlcjxcbiAgdHlwZW9mIG5hbWUsXG4gIG5ldmVyLFxuICBOZXR3b3JrQ29udHJvbGxlckV2ZW50LFxuICBuZXZlcixcbiAgTmV0d29ya0NvbnRyb2xsZXJFdmVudFR5cGVcbj47XG5cbi8qKlxuICogSW5mb3JtYXRpb24gdXNlZCB0byBzZXQgdXAgdGhlIG1pZGRsZXdhcmUgc3RhY2sgZm9yIGEgcGFydGljdWxhciBraW5kIG9mXG4gKiBuZXR3b3JrLiBDdXJyZW50bHkgaGFzIG92ZXJsYXAgd2l0aCBgTmV0d29ya0NvbmZpZ3VyYXRpb25gLCBhbHRob3VnaCB0aGVcbiAqIHR3byB3aWxsIGJlIG1lcmdlZCBkb3duIHRoZSByb2FkLlxuICovXG5leHBvcnQgdHlwZSBQcm92aWRlckNvbmZpZ3VyYXRpb24gPSB7XG4gIC8qKlxuICAgKiBFaXRoZXIgYSB0eXBlIG9mIEluZnVyYSBuZXR3b3JrLCBcImxvY2FsaG9zdFwiIGZvciBhIGxvY2FsbHkgb3BlcmF0ZWRcbiAgICogbmV0d29yaywgb3IgXCJycGNcIiBmb3IgZXZlcnl0aGluZyBlbHNlLlxuICAgKi9cbiAgdHlwZTogUHJvdmlkZXJUeXBlO1xuICAvKipcbiAgICogVGhlIGNoYWluIElEIGFzIHBlciBFSVAtMTU1LlxuICAgKi9cbiAgY2hhaW5JZDogQ2hhaW5JZDtcbiAgLyoqXG4gICAqIFRoZSBVUkwgb2YgdGhlIFJQQyBlbmRwb2ludC4gT25seSB1c2VkIHdoZW4gYHR5cGVgIGlzIFwibG9jYWxob3N0XCIgb3IgXCJycGNcIi5cbiAgICovXG4gIHJwY1VybD86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBzaG9ydG5hbWUgb2YgdGhlIGN1cnJlbmN5IHVzZWQgYnkgdGhlIG5ldHdvcmsuXG4gICAqL1xuICB0aWNrZXI/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgdXNlci1jdXN0b21pemFibGUgbmFtZSBvZiB0aGUgbmV0d29yay5cbiAgICovXG4gIG5pY2tuYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogVXNlci1jdXN0b21pemFibGUgZGV0YWlscyBmb3IgdGhlIG5ldHdvcmsuXG4gICAqL1xuICBycGNQcmVmcz86IHtcbiAgICBibG9ja0V4cGxvcmVyVXJsPzogc3RyaW5nO1xuICB9O1xufTtcblxuLyoqXG4gKiBUaGUgY29udGVudHMgb2YgdGhlIGBuZXR3b3JrSWRgIHN0b3JlLlxuICovXG50eXBlIE5ldHdvcmtJZFN0YXRlID0gTmV0d29ya0lkIHwgbnVsbDtcblxuLyoqXG4gKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgbmV0d29yayBub3QgaGVsZCBieSBhbnkgb3RoZXIgcGFydCBvZiBzdGF0ZS4gQ3VycmVudGx5XG4gKiBvbmx5IHVzZWQgdG8gY2FwdHVyZSB3aGV0aGVyIGEgbmV0d29yayBzdXBwb3J0cyBFSVAtMTU1OS5cbiAqL1xudHlwZSBOZXR3b3JrRGV0YWlscyA9IHtcbiAgLyoqXG4gICAqIEVJUHMgc3VwcG9ydGVkIGJ5IHRoZSBuZXR3b3JrLlxuICAgKi9cbiAgRUlQUzoge1xuICAgIFtlaXBOdW1iZXI6IG51bWJlcl06IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gIH07XG4gIFtvdGhlclByb3BlcnR5OiBzdHJpbmddOiB1bmtub3duO1xufTtcblxuLyoqXG4gKiBBIFwibmV0d29yayBjb25maWd1cmF0aW9uXCIgcmVwcmVzZW50cyBjb25uZWN0aW9uIGRhdGEgZGlyZWN0bHkgcHJvdmlkZWQgYnlcbiAqIHVzZXJzIHZpYSB0aGUgd2FsbGV0IFVJIGZvciBhIGN1c3RvbSBuZXR3b3JrICh3ZSBhbHJlYWR5IGhhdmUgdGhpc1xuICogaW5mb3JtYXRpb24gZm9yIG5ldHdvcmtzIHRoYXQgY29tZSBwcmUtc2hpcHBlZCB3aXRoIHRoZSB3YWxsZXQpLiBVbHRpbWF0ZWx5XG4gKiB1c2VkIHRvIHNldCB1cCB0aGUgbWlkZGxld2FyZSBzdGFjayBzbyB0aGF0IHRoZSB3YWxsZXQgY2FuIG1ha2UgcmVxdWVzdHMgdG9cbiAqIHRoZSBuZXR3b3JrLiBDdXJyZW50bHkgaGFzIG92ZXJsYXAgd2l0aCBgUHJvdmlkZXJDb25maWd1cmF0aW9uYCwgYWx0aG91Z2ggdGhlXG4gKiB0d28gd2lsbCBiZSBtZXJnZWQgZG93biB0aGUgcm9hZC5cbiAqL1xudHlwZSBOZXR3b3JrQ29uZmlndXJhdGlvbiA9IHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIG5ldHdvcmsgY29uZmlndXJhdGlvbi4gVXNlZnVsIGZvciBzd2l0Y2hpbmcgdG8gYW5kXG4gICAqIHJlbW92aW5nIHNwZWNpZmljIG5ldHdvcmtzLlxuICAgKi9cbiAgaWQ6IE5ldHdvcmtDb25maWd1cmF0aW9uSWQ7XG4gIC8qKlxuICAgKiBUaGUgVVJMIG9mIHRoZSBSUEMgZW5kcG9pbnQuIE9ubHkgdXNlZCB3aGVuIGB0eXBlYCBpcyBcImxvY2FsaG9zdFwiIG9yIFwicnBjXCIuXG4gICAqL1xuICBycGNVcmw6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjaGFpbiBJRCBhcyBwZXIgRUlQLTE1NS5cbiAgICovXG4gIGNoYWluSWQ6IENoYWluSWQ7XG4gIC8qKlxuICAgKiBUaGUgc2hvcnRuYW1lIG9mIHRoZSBjdXJyZW5jeSB1c2VkIGZvciB0aGlzIG5ldHdvcmsuXG4gICAqL1xuICB0aWNrZXI6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSB1c2VyLWN1c3RvbWl6YWJsZSBuYW1lIG9mIHRoZSBuZXR3b3JrLlxuICAgKi9cbiAgbmlja25hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBVc2VyLWN1c3RvbWl6YWJsZSBkZXRhaWxzIGZvciB0aGUgbmV0d29yay5cbiAgICovXG4gIHJwY1ByZWZzPzoge1xuICAgIGJsb2NrRXhwbG9yZXJVcmw6IHN0cmluZztcbiAgfTtcbn07XG5cbi8qKlxuICogQSBzZXQgb2YgbmV0d29yayBjb25maWd1cmF0aW9ucywga2V5ZWQgYnkgSUQuXG4gKi9cbnR5cGUgTmV0d29ya0NvbmZpZ3VyYXRpb25zID0gUmVjb3JkPFxuICBOZXR3b3JrQ29uZmlndXJhdGlvbklkLFxuICBOZXR3b3JrQ29uZmlndXJhdGlvblxuPjtcblxuLyoqXG4gKiBUaGUgc3RhdGUgdGhhdCBOZXR3b3JrQ29udHJvbGxlciBob2xkcyBhZnRlciBjb21iaW5pbmcgaXRzIGluZGl2aWR1YWwgc3RvcmVzLlxuICovXG5leHBvcnQgdHlwZSBOZXR3b3JrQ29udHJvbGxlclN0YXRlID0ge1xuICBwcm92aWRlckNvbmZpZzogUHJvdmlkZXJDb25maWd1cmF0aW9uO1xuICBuZXR3b3JrSWQ6IE5ldHdvcmtJZFN0YXRlO1xuICBuZXR3b3JrU3RhdHVzOiBOZXR3b3JrU3RhdHVzO1xuICBuZXR3b3JrRGV0YWlsczogTmV0d29ya0RldGFpbHM7XG4gIG5ldHdvcmtDb25maWd1cmF0aW9uczogTmV0d29ya0NvbmZpZ3VyYXRpb25zO1xufTtcblxuLyoqXG4gKiBUaGUgb3B0aW9ucyB0aGF0IE5ldHdvcmtDb250cm9sbGVyIHRha2VzLlxuICovXG5leHBvcnQgdHlwZSBOZXR3b3JrQ29udHJvbGxlck9wdGlvbnMgPSB7XG4gIG1lc3NlbmdlcjogTmV0d29ya0NvbnRyb2xsZXJNZXNzZW5nZXI7XG4gIHN0YXRlPzoge1xuICAgIHByb3ZpZGVyQ29uZmlnPzogUHJvdmlkZXJDb25maWd1cmF0aW9uO1xuICAgIG5ldHdvcmtEZXRhaWxzPzogTmV0d29ya0RldGFpbHM7XG4gICAgbmV0d29ya0NvbmZpZ3VyYXRpb25zPzogTmV0d29ya0NvbmZpZ3VyYXRpb25zO1xuICB9O1xuICBpbmZ1cmFQcm9qZWN0SWQ6IHN0cmluZztcbiAgdHJhY2tNZXRhTWV0cmljc0V2ZW50OiAocGF5bG9hZDogTWV0YU1ldHJpY3NFdmVudFBheWxvYWQpID0+IHZvaWQ7XG59O1xuXG4vKipcbiAqIFR5cGUgZ3VhcmQgZm9yIGRldGVybWluaW5nIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGVycm9yIG9iamVjdCB3aXRoIGFcbiAqIGBjb2RlYCBwcm9wZXJ0eSwgc3VjaCBhcyBhbiBpbnN0YW5jZSBvZiBFcnJvci5cbiAqXG4gKiBUT0RPOiBNb3ZlIHRoaXMgdG8gQG1ldGFtYXNrL3V0aWxzXG4gKlxuICogQHBhcmFtIGVycm9yIC0gVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm5zIFRydWUgaWYgYGVycm9yYCBoYXMgYSBgY29kZWAsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNFcnJvcldpdGhDb2RlKGVycm9yOiB1bmtub3duKTogZXJyb3IgaXMgeyBjb2RlOiBzdHJpbmcgfCBudW1iZXIgfSB7XG4gIHJldHVybiB0eXBlb2YgZXJyb3IgPT09ICdvYmplY3QnICYmIGVycm9yICE9PSBudWxsICYmICdjb2RlJyBpbiBlcnJvcjtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGEgdmFsaWQgbmV0d29yayBJRC4gVGhlIElEIGlzIGFjY2VwdGVkXG4gKiBhcyBlaXRoZXIgYSBudW1iZXIsIGEgZGVjaW1hbCBzdHJpbmcsIG9yIGEgMHgtcHJlZml4ZWQgaGV4IHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgbmV0d29yayBJRCB0byBjb252ZXJ0LCBpbiBhbiB1bmtub3duIGZvcm1hdC5cbiAqIEByZXR1cm5zIEEgdmFsaWQgbmV0d29yayBJRCAoYXMgYSBkZWNpbWFsIHN0cmluZylcbiAqIEB0aHJvd3MgSWYgdGhlIGdpdmVuIHZhbHVlIGNhbm5vdCBiZSBzYWZlbHkgcGFyc2VkLlxuICovXG5mdW5jdGlvbiBjb252ZXJ0TmV0d29ya0lkKHZhbHVlOiB1bmtub3duKTogTmV0d29ya0lkIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIU51bWJlci5pc05hTih2YWx1ZSkpIHtcbiAgICByZXR1cm4gYCR7dmFsdWV9YDtcbiAgfSBlbHNlIGlmIChpc1N0cmljdEhleFN0cmluZyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gaGV4VG9EZWNpbWFsKHZhbHVlKSBhcyBOZXR3b3JrSWQ7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAvXlxcZCskL3UudGVzdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUgYXMgTmV0d29ya0lkO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHBhcnNlIGFzIGEgdmFsaWQgbmV0d29yayBJRDogJyR7dmFsdWV9J2ApO1xufVxuXG4vKipcbiAqIEJ1aWxkcyB0aGUgZGVmYXVsdCBwcm92aWRlciBjb25maWcgdXNlZCB0byBpbml0aWFsaXplIHRoZSBuZXR3b3JrIGNvbnRyb2xsZXIuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkRGVmYXVsdFByb3ZpZGVyQ29uZmlnU3RhdGUoKTogUHJvdmlkZXJDb25maWd1cmF0aW9uIHtcbiAgaWYgKHByb2Nlc3MuZW52LklOX1RFU1QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogTkVUV09SS19UWVBFUy5SUEMsXG4gICAgICBycGNVcmw6ICdodHRwOi8vbG9jYWxob3N0Ojg1NDUnLFxuICAgICAgY2hhaW5JZDogJzB4NTM5JyxcbiAgICAgIG5pY2tuYW1lOiAnTG9jYWxob3N0IDg1NDUnLFxuICAgICAgdGlja2VyOiAnRVRIJyxcbiAgICB9O1xuICB9IGVsc2UgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk1FVEFNQVNLX0RFQlVHIHx8XG4gICAgcHJvY2Vzcy5lbnYuTUVUQU1BU0tfRU5WSVJPTk1FTlQgPT09ICd0ZXN0J1xuICApIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogTkVUV09SS19UWVBFUy5HT0VSTEksXG4gICAgICBjaGFpbklkOiBDSEFJTl9JRFMuR09FUkxJLFxuICAgICAgdGlja2VyOiBURVNUX05FVFdPUktfVElDS0VSX01BUFtORVRXT1JLX1RZUEVTLkdPRVJMSV0sXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogTkVUV09SS19UWVBFUy5NQUlOTkVULFxuICAgIGNoYWluSWQ6IENIQUlOX0lEUy5NQUlOTkVULFxuICAgIHRpY2tlcjogJ0VUSCcsXG4gIH07XG59XG5cbi8qKlxuICogQnVpbGRzIHRoZSBkZWZhdWx0IG5ldHdvcmsgSUQgc3RhdGUgdXNlZCB0byBpbml0aWFsaXplIHRoZSBuZXR3b3JrXG4gKiBjb250cm9sbGVyLlxuICovXG5mdW5jdGlvbiBidWlsZERlZmF1bHROZXR3b3JrSWRTdGF0ZSgpOiBOZXR3b3JrSWRTdGF0ZSB7XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEJ1aWxkcyB0aGUgZGVmYXVsdCBuZXR3b3JrIHN0YXR1cyBzdGF0ZSB1c2VkIHRvIGluaXRpYWxpemUgdGhlIG5ldHdvcmtcbiAqIGNvbnRyb2xsZXIuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkRGVmYXVsdE5ldHdvcmtTdGF0dXNTdGF0ZSgpOiBOZXR3b3JrU3RhdHVzIHtcbiAgcmV0dXJuIE5ldHdvcmtTdGF0dXMuVW5rbm93bjtcbn1cblxuLyoqXG4gKiBCdWlsZHMgdGhlIGRlZmF1bHQgbmV0d29yayBkZXRhaWxzIHN0YXRlIHVzZWQgdG8gaW5pdGlhbGl6ZSB0aGVcbiAqIG5ldHdvcmsgY29udHJvbGxlci5cbiAqL1xuZnVuY3Rpb24gYnVpbGREZWZhdWx0TmV0d29ya0RldGFpbHNTdGF0ZSgpOiBOZXR3b3JrRGV0YWlscyB7XG4gIHJldHVybiB7XG4gICAgRUlQUzoge1xuICAgICAgMTU1OTogdW5kZWZpbmVkLFxuICAgIH0sXG4gIH07XG59XG5cbi8qKlxuICogQnVpbGRzIHRoZSBkZWZhdWx0IG5ldHdvcmsgY29uZmlndXJhdGlvbnMgc3RhdGUgdXNlZCB0byBpbml0aWFsaXplIHRoZVxuICogbmV0d29yayBjb250cm9sbGVyLlxuICovXG5mdW5jdGlvbiBidWlsZERlZmF1bHROZXR3b3JrQ29uZmlndXJhdGlvbnNTdGF0ZSgpOiBOZXR3b3JrQ29uZmlndXJhdGlvbnMge1xuICByZXR1cm4ge307XG59XG5cbi8qKlxuICogQnVpbGRzIHRoZSBkZWZhdWx0IHN0YXRlIGZvciB0aGUgbmV0d29yayBjb250cm9sbGVyLlxuICpcbiAqIEByZXR1cm5zIFRoZSBkZWZhdWx0IG5ldHdvcmsgY29udHJvbGxlciBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gYnVpbGREZWZhdWx0U3RhdGUoKSB7XG4gIHJldHVybiB7XG4gICAgcHJvdmlkZXJDb25maWc6IGJ1aWxkRGVmYXVsdFByb3ZpZGVyQ29uZmlnU3RhdGUoKSxcbiAgICBuZXR3b3JrSWQ6IGJ1aWxkRGVmYXVsdE5ldHdvcmtJZFN0YXRlKCksXG4gICAgbmV0d29ya1N0YXR1czogYnVpbGREZWZhdWx0TmV0d29ya1N0YXR1c1N0YXRlKCksXG4gICAgbmV0d29ya0RldGFpbHM6IGJ1aWxkRGVmYXVsdE5ldHdvcmtEZXRhaWxzU3RhdGUoKSxcbiAgICBuZXR3b3JrQ29uZmlndXJhdGlvbnM6IGJ1aWxkRGVmYXVsdE5ldHdvcmtDb25maWd1cmF0aW9uc1N0YXRlKCksXG4gIH07XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBhcmd1bWVudCBpcyBhIHR5cGUgdGhhdCBvdXIgSW5mdXJhIG1pZGRsZXdhcmVcbiAqIHJlY29nbml6ZXMuIFdlIGNhbid0IGNhbGN1bGF0ZSB0aGlzIGlubGluZSBiZWNhdXNlIHRoZSB1c3VhbCB0eXBlIG9mIGB0eXBlYCxcbiAqIHdoaWNoIHdlIGdldCBmcm9tIHRoZSBwcm92aWRlciBjb25maWcsIGlzIG5vdCBhIHN1YnNldCBvZiB0aGUgdHlwZSBvZlxuICogYElORlVSQV9QUk9WSURFUl9UWVBFU2AsIGJ1dCByYXRoZXIgYSBzdXBlcnNldCwgYW5kIHRoZXJlZm9yZSB3ZSBjYW5ub3QgbWFrZVxuICogYSBwcm9wZXIgY29tcGFyaXNvbiB3aXRob3V0IFR5cGVTY3JpcHQgY29tcGxhaW5pbmcuIEhvd2V2ZXIsIGlmIHdlIGRvd25jYXN0XG4gKiBib3RoIHZhcmlhYmxlcywgdGhlbiB3ZSBhcmUgYWJsZSB0byBhY2hpZXZlIHRoaXMuIEFzIGEgYm9udXMsIHRoaXMgZnVuY3Rpb25cbiAqIGFsc28gdHlwZXMgdGhlIGdpdmVuIGFyZ3VtZW50IGFzIGEgYEJ1aWx0SW5JbmZ1cmFOZXR3b3JrYCBhc3N1bWluZyB0aGF0IHRoZVxuICogY2hlY2sgc3VjY2VlZHMuXG4gKlxuICogQHBhcmFtIHR5cGUgLSBBIHR5cGUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIFRydWUgb3IgZmFsc2UsIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBnaXZlbiB0eXBlIGlzIG9uZSB0aGF0IG91clxuICogSW5mdXJhIG1pZGRsZXdhcmUgcmVjb2duaXplcy5cbiAqL1xuZnVuY3Rpb24gaXNJbmZ1cmFQcm92aWRlclR5cGUodHlwZTogc3RyaW5nKTogdHlwZSBpcyBCdWlsdEluSW5mdXJhTmV0d29yayB7XG4gIGNvbnN0IGluZnVyYVByb3ZpZGVyVHlwZXM6IHJlYWRvbmx5IHN0cmluZ1tdID0gSU5GVVJBX1BST1ZJREVSX1RZUEVTO1xuICByZXR1cm4gaW5mdXJhUHJvdmlkZXJUeXBlcy5pbmNsdWRlcyh0eXBlKTtcbn1cblxuLyoqXG4gKiBUaGUgbmV0d29yayBjb250cm9sbGVyIGNyZWF0ZXMgYW5kIG1hbmFnZXMgdGhlIFwicHJvdmlkZXJcIiBvYmplY3Qgd2hpY2ggYWxsb3dzXG4gKiBvdXIgY29kZSBhbmQgZXh0ZXJuYWwgZGFwcHMgdG8gbWFrZSByZXF1ZXN0cyB0byBhIG5ldHdvcmsuIFRoZSByZXF1ZXN0cyBhcmVcbiAqIGZpbHRlcmVkIHRocm91Z2ggYSBzZXQgb2YgbWlkZGxld2FyZSAocHJvdmlkZWQgYnlcbiAqIFtgZXRoLWpzb24tcnBjLW1pZGRsZXdhcmVgXVsxXSkgd2hpY2ggbm90IG9ubHkgcGVyZm9ybXMgdGhlIEhUVFAgcmVxdWVzdCB0b1xuICogdGhlIGFwcHJvcHJpYXRlIFJQQyBlbmRwb2ludCBidXQgYWxzbyB1c2VzIGNhY2hpbmcgdG8gbGltaXQgZHVwbGljYXRlXG4gKiByZXF1ZXN0cyB0byBJbmZ1cmEgYW5kIHNtb290aGVucyBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgYmxvY2tjaGFpbiBpbiBnZW5lcmFsLlxuICpcbiAqIFsxXTogaHR0cHM6Ly9naXRodWIuY29tL01ldGFNYXNrL2V0aC1qc29uLXJwYy1taWRkbGV3YXJlXG4gKi9cbmV4cG9ydCBjbGFzcyBOZXR3b3JrQ29udHJvbGxlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIC8qKlxuICAgKiBUaGUgbWVzc2VuZ2VyIHRoYXQgTmV0d29ya0NvbnRyb2xsZXIgdXNlcyB0byBwdWJsaXNoIGV2ZW50cy5cbiAgICovXG4gICNtZXNzZW5nZXI6IE5ldHdvcmtDb250cm9sbGVyTWVzc2VuZ2VyO1xuXG4gIC8qKlxuICAgKiBPYnNlcnZhYmxlIHN0b3JlIGNvbnRhaW5pbmcgdGhlIHByb3ZpZGVyIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBwcmV2aW91c2x5XG4gICAqIGNvbmZpZ3VyZWQgbmV0d29yay5cbiAgICovXG4gICNwcmV2aW91c1Byb3ZpZGVyQ29uZmlnOiBQcm92aWRlckNvbmZpZ3VyYXRpb247XG5cbiAgLyoqXG4gICAqIE9ic2VydmFibGUgc3RvcmUgY29udGFpbmluZyBhIGNvbWJpbmF0aW9uIG9mIGRhdGEgZnJvbSBhbGwgb2YgdGhlXG4gICAqIGluZGl2aWR1YWwgc3RvcmVzLlxuICAgKi9cbiAgc3RvcmU6IE9ic2VydmFibGVTdG9yZTxOZXR3b3JrQ29udHJvbGxlclN0YXRlPjtcblxuICAjcHJvdmlkZXI6IFNhZmVFdmVudEVtaXR0ZXJQcm92aWRlciB8IG51bGw7XG5cbiAgI2Jsb2NrVHJhY2tlcjogUG9sbGluZ0Jsb2NrVHJhY2tlciB8IG51bGw7XG5cbiAgI3Byb3ZpZGVyUHJveHk6IFN3YXBwYWJsZVByb3h5PFNhZmVFdmVudEVtaXR0ZXJQcm92aWRlcj4gfCBudWxsO1xuXG4gICNibG9ja1RyYWNrZXJQcm94eTogU3dhcHBhYmxlUHJveHk8UG9sbGluZ0Jsb2NrVHJhY2tlcj4gfCBudWxsO1xuXG4gICNpbmZ1cmFQcm9qZWN0SWQ6IE5ldHdvcmtDb250cm9sbGVyT3B0aW9uc1snaW5mdXJhUHJvamVjdElkJ107XG5cbiAgI3RyYWNrTWV0YU1ldHJpY3NFdmVudDogTmV0d29ya0NvbnRyb2xsZXJPcHRpb25zWyd0cmFja01ldGFNZXRyaWNzRXZlbnQnXTtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIG5ldHdvcmsgY29udHJvbGxlci5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGlzIGNvbnN0cnVjdG9yLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5tZXNzZW5nZXIgLSBUaGUgTmV0d29ya0NvbnRyb2xsZXIgbWVzc2VuZ2VyLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5zdGF0ZSAtIEluaXRpYWwgY29udHJvbGxlciBzdGF0ZS5cbiAgICogQHBhcmFtIG9wdGlvbnMuaW5mdXJhUHJvamVjdElkIC0gVGhlIEluZnVyYSBwcm9qZWN0IElELlxuICAgKiBAcGFyYW0gb3B0aW9ucy50cmFja01ldGFNZXRyaWNzRXZlbnQgLSBBIG1ldGhvZCB0byBmb3J3YXJkIGV2ZW50cyB0byB0aGVcbiAgICoge0BsaW5rIE1ldGFNZXRyaWNzQ29udHJvbGxlcn0uXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbWVzc2VuZ2VyLFxuICAgIHN0YXRlID0ge30sXG4gICAgaW5mdXJhUHJvamVjdElkLFxuICAgIHRyYWNrTWV0YU1ldHJpY3NFdmVudCxcbiAgfTogTmV0d29ya0NvbnRyb2xsZXJPcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuI21lc3NlbmdlciA9IG1lc3NlbmdlcjtcblxuICAgIHRoaXMuc3RvcmUgPSBuZXcgT2JzZXJ2YWJsZVN0b3JlKHtcbiAgICAgIC4uLmJ1aWxkRGVmYXVsdFN0YXRlKCksXG4gICAgICAuLi5zdGF0ZSxcbiAgICB9KTtcbiAgICB0aGlzLiNwcmV2aW91c1Byb3ZpZGVyQ29uZmlnID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnByb3ZpZGVyQ29uZmlnO1xuXG4gICAgLy8gcHJvdmlkZXIgYW5kIGJsb2NrIHRyYWNrZXJcbiAgICB0aGlzLiNwcm92aWRlciA9IG51bGw7XG4gICAgdGhpcy4jYmxvY2tUcmFja2VyID0gbnVsbDtcblxuICAgIC8vIHByb3ZpZGVyIGFuZCBibG9jayB0cmFja2VyIHByb3hpZXMgLSBiZWNhdXNlIHRoZSBuZXR3b3JrIGNoYW5nZXNcbiAgICB0aGlzLiNwcm92aWRlclByb3h5ID0gbnVsbDtcbiAgICB0aGlzLiNibG9ja1RyYWNrZXJQcm94eSA9IG51bGw7XG5cbiAgICBpZiAoIWluZnVyYVByb2plY3RJZCB8fCB0eXBlb2YgaW5mdXJhUHJvamVjdElkICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEluZnVyYSBwcm9qZWN0IElEJyk7XG4gICAgfVxuICAgIHRoaXMuI2luZnVyYVByb2plY3RJZCA9IGluZnVyYVByb2plY3RJZDtcbiAgICB0aGlzLiN0cmFja01ldGFNZXRyaWNzRXZlbnQgPSB0cmFja01ldGFNZXRyaWNzRXZlbnQ7XG4gIH1cblxuICAvKipcbiAgICogRGVhY3RpdmF0ZXMgdGhlIGNvbnRyb2xsZXIsIHN0b3BwaW5nIGFueSBvbmdvaW5nIHBvbGxpbmcuXG4gICAqXG4gICAqIEluLXByb2dyZXNzIHJlcXVlc3RzIHdpbGwgbm90IGJlIGFib3J0ZWQuXG4gICAqL1xuICBhc3luYyBkZXN0cm95KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuI2Jsb2NrVHJhY2tlcj8uZGVzdHJveSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIHByb3ZpZGVyIGFuZCBibG9jayB0cmFja2VyIGZvciB0aGUgY29uZmlndXJlZCBuZXR3b3JrLFxuICAgKiB1c2luZyB0aGUgcHJvdmlkZXIgdG8gZ2F0aGVyIGRldGFpbHMgYWJvdXQgdGhlIG5ldHdvcmsuXG4gICAqL1xuICBhc3luYyBpbml0aWFsaXplUHJvdmlkZXIoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgeyB0eXBlLCBycGNVcmwsIGNoYWluSWQgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5wcm92aWRlckNvbmZpZztcbiAgICB0aGlzLiNjb25maWd1cmVQcm92aWRlcih7IHR5cGUsIHJwY1VybCwgY2hhaW5JZCB9KTtcbiAgICBhd2FpdCB0aGlzLmxvb2t1cE5ldHdvcmsoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwcm94aWVzIHdyYXBwaW5nIHRoZSBjdXJyZW50bHkgc2V0IHByb3ZpZGVyIGFuZCBibG9jayB0cmFja2VyLlxuICAgKi9cbiAgZ2V0UHJvdmlkZXJBbmRCbG9ja1RyYWNrZXIoKToge1xuICAgIHByb3ZpZGVyOiBTd2FwcGFibGVQcm94eTxTYWZlRXZlbnRFbWl0dGVyUHJvdmlkZXI+IHwgbnVsbDtcbiAgICBibG9ja1RyYWNrZXI6IFN3YXBwYWJsZVByb3h5PFBvbGxpbmdCbG9ja1RyYWNrZXI+IHwgbnVsbDtcbiAgfSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLiNwcm92aWRlclByb3h5O1xuICAgIGNvbnN0IGJsb2NrVHJhY2tlciA9IHRoaXMuI2Jsb2NrVHJhY2tlclByb3h5O1xuICAgIHJldHVybiB7IHByb3ZpZGVyLCBibG9ja1RyYWNrZXIgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIG5ldHdvcmsgc3VwcG9ydHMgRUlQLTE1NTkgYnkgY2hlY2tpbmcgd2hldGhlciB0aGVcbiAgICogbGF0ZXN0IGJsb2NrIGhhcyBhIGBiYXNlRmVlUGVyR2FzYCBwcm9wZXJ0eSwgdGhlbiB1cGRhdGVzIHN0YXRlXG4gICAqIGFwcHJvcHJpYXRlbHkuXG4gICAqXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRydWUgaWYgdGhlIG5ldHdvcmsgc3VwcG9ydHMgRUlQLTE1NTlcbiAgICogYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGFzeW5jIGdldEVJUDE1NTlDb21wYXRpYmlsaXR5KCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHsgRUlQUyB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLm5ldHdvcmtEZXRhaWxzO1xuICAgIC8vIE5PVEU6IFRoaXMgaXNuJ3QgbmVjZXNzYXJ5IGFueW1vcmUgYmVjYXVzZSB0aGUgYmxvY2sgY2FjaGUgbWlkZGxld2FyZVxuICAgIC8vIGFscmVhZHkgcHJldmVudHMgZHVwbGljYXRlIHJlcXVlc3RzIGZyb20gdGFraW5nIHBsYWNlXG4gICAgaWYgKEVJUFNbMTU1OV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIEVJUFNbMTU1OV07XG4gICAgfVxuXG4gICAgY29uc3QgeyBwcm92aWRlciB9ID0gdGhpcy5nZXRQcm92aWRlckFuZEJsb2NrVHJhY2tlcigpO1xuICAgIGlmICghcHJvdmlkZXIpIHtcbiAgICAgIC8vIFJlYWxseSB3ZSBzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgYSBwcm92aWRlciBoYXNuJ3QgYmVlbiBpbml0aWFsaXplZFxuICAgICAgLy8geWV0LCBidXQgdGhhdCBtaWdodCBoYXZlIHVuZGVzaXJhYmxlIHJlcGVyY3Vzc2lvbnMsIHNvIHJldHVybiBmYWxzZSBmb3JcbiAgICAgIC8vIG5vd1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHN1cHBvcnRzRUlQMTU1OSA9IGF3YWl0IHRoaXMuI2RldGVybWluZUVJUDE1NTlDb21wYXRpYmlsaXR5KHByb3ZpZGVyKTtcbiAgICBjb25zdCB7IG5ldHdvcmtEZXRhaWxzIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICBuZXR3b3JrRGV0YWlsczoge1xuICAgICAgICAuLi5uZXR3b3JrRGV0YWlscyxcbiAgICAgICAgRUlQUzoge1xuICAgICAgICAgIC4uLm5ldHdvcmtEZXRhaWxzLkVJUFMsXG4gICAgICAgICAgMTU1OTogc3VwcG9ydHNFSVAxNTU5LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gc3VwcG9ydHNFSVAxNTU5O1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIHNpZGUgZWZmZWN0cyBhZnRlciBzd2l0Y2hpbmcgdG8gYSBuZXR3b3JrLiBJZiB0aGUgbmV0d29yayBpc1xuICAgKiBhdmFpbGFibGUsIHVwZGF0ZXMgdGhlIG5ldHdvcmsgc3RhdGUgd2l0aCB0aGUgbmV0d29yayBJRCBvZiB0aGUgbmV0d29yayBhbmRcbiAgICogc3RvcmVzIHdoZXRoZXIgdGhlIG5ldHdvcmsgc3VwcG9ydHMgRUlQLTE1NTk7IG90aGVyd2lzZSBjbGVhcnMgc2FpZFxuICAgKiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbmV0d29yayB0aGF0IG1heSBoYXZlIGJlZW4gcHJldmlvdXNseSBzdG9yZWQuXG4gICAqXG4gICAqIEBmaXJlcyBpbmZ1cmFJc0Jsb2NrZWQgaWYgdGhlIG5ldHdvcmsgaXMgSW5mdXJhLXN1cHBvcnRlZCBhbmQgaXMgYmxvY2tpbmdcbiAgICogcmVxdWVzdHMuXG4gICAqIEBmaXJlcyBpbmZ1cmFJc1VuYmxvY2tlZCBpZiB0aGUgbmV0d29yayBpcyBJbmZ1cmEtc3VwcG9ydGVkIGFuZCBpcyBub3RcbiAgICogYmxvY2tpbmcgcmVxdWVzdHMsIG9yIGlmIHRoZSBuZXR3b3JrIGlzIG5vdCBJbmZ1cmEtc3VwcG9ydGVkLlxuICAgKi9cbiAgYXN5bmMgbG9va3VwTmV0d29yaygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7IGNoYWluSWQsIHR5cGUgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5wcm92aWRlckNvbmZpZztcbiAgICBjb25zdCB7IHByb3ZpZGVyIH0gPSB0aGlzLmdldFByb3ZpZGVyQW5kQmxvY2tUcmFja2VyKCk7XG4gICAgbGV0IG5ldHdvcmtDaGFuZ2VkID0gZmFsc2U7XG4gICAgbGV0IG5ldHdvcmtJZDogTmV0d29ya0lkU3RhdGUgPSBudWxsO1xuICAgIGxldCBzdXBwb3J0c0VJUDE1NTkgPSBmYWxzZTtcbiAgICBsZXQgbmV0d29ya1N0YXR1czogTmV0d29ya1N0YXR1cztcblxuICAgIGlmIChwcm92aWRlciA9PT0gbnVsbCkge1xuICAgICAgbG9nLndhcm4oXG4gICAgICAgICdOZXR3b3JrQ29udHJvbGxlciAtIGxvb2t1cE5ldHdvcmsgYWJvcnRlZCBkdWUgdG8gbWlzc2luZyBwcm92aWRlcicsXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghY2hhaW5JZCkge1xuICAgICAgbG9nLndhcm4oXG4gICAgICAgICdOZXR3b3JrQ29udHJvbGxlciAtIGxvb2t1cE5ldHdvcmsgYWJvcnRlZCBkdWUgdG8gbWlzc2luZyBjaGFpbklkJyxcbiAgICAgICk7XG4gICAgICB0aGlzLiNyZXNldE5ldHdvcmtJZCgpO1xuICAgICAgdGhpcy4jcmVzZXROZXR3b3JrU3RhdHVzKCk7XG4gICAgICB0aGlzLiNyZXNldE5ldHdvcmtEZXRhaWxzKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaXNJbmZ1cmEgPSBpc0luZnVyYVByb3ZpZGVyVHlwZSh0eXBlKTtcblxuICAgIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgbmV0d29ya0NoYW5nZWQgPSB0cnVlO1xuICAgICAgdGhpcy4jbWVzc2VuZ2VyLnVuc3Vic2NyaWJlKFxuICAgICAgICBOZXR3b3JrQ29udHJvbGxlckV2ZW50VHlwZS5OZXR3b3JrRGlkQ2hhbmdlLFxuICAgICAgICBsaXN0ZW5lcixcbiAgICAgICk7XG4gICAgfTtcbiAgICB0aGlzLiNtZXNzZW5nZXIuc3Vic2NyaWJlKFxuICAgICAgTmV0d29ya0NvbnRyb2xsZXJFdmVudFR5cGUuTmV0d29ya0RpZENoYW5nZSxcbiAgICAgIGxpc3RlbmVyLFxuICAgICk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgdGhpcy4jZ2V0TmV0d29ya0lkKHByb3ZpZGVyKSxcbiAgICAgICAgdGhpcy4jZGV0ZXJtaW5lRUlQMTU1OUNvbXBhdGliaWxpdHkocHJvdmlkZXIpLFxuICAgICAgXSk7XG4gICAgICBjb25zdCBwb3NzaWJsZU5ldHdvcmtJZCA9IHJlc3VsdHNbMF07XG4gICAgICBuZXR3b3JrSWQgPSBjb252ZXJ0TmV0d29ya0lkKHBvc3NpYmxlTmV0d29ya0lkKTtcbiAgICAgIHN1cHBvcnRzRUlQMTU1OSA9IHJlc3VsdHNbMV07XG4gICAgICBuZXR3b3JrU3RhdHVzID0gTmV0d29ya1N0YXR1cy5BdmFpbGFibGU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChpc0Vycm9yV2l0aENvZGUoZXJyb3IpKSB7XG4gICAgICAgIGxldCByZXNwb25zZUJvZHk7XG4gICAgICAgIGlmIChpc0luZnVyYSAmJiBpc0Vycm9yV2l0aE1lc3NhZ2UoZXJyb3IpKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3BvbnNlQm9keSA9IEpTT04ucGFyc2UoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAvLyBlcnJvci5tZXNzYWdlIG11c3Qgbm90IGJlIEpTT05cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgaXNQbGFpbk9iamVjdChyZXNwb25zZUJvZHkpICYmXG4gICAgICAgICAgcmVzcG9uc2VCb2R5LmVycm9yID09PSBJTkZVUkFfQkxPQ0tFRF9LRVlcbiAgICAgICAgKSB7XG4gICAgICAgICAgbmV0d29ya1N0YXR1cyA9IE5ldHdvcmtTdGF0dXMuQmxvY2tlZDtcbiAgICAgICAgfSBlbHNlIGlmIChlcnJvci5jb2RlID09PSBlcnJvckNvZGVzLnJwYy5pbnRlcm5hbCkge1xuICAgICAgICAgIG5ldHdvcmtTdGF0dXMgPSBOZXR3b3JrU3RhdHVzLlVua25vd247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV0d29ya1N0YXR1cyA9IE5ldHdvcmtTdGF0dXMuVW5hdmFpbGFibGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy53YXJuKFxuICAgICAgICAgICdOZXR3b3JrQ29udHJvbGxlciAtIGNvdWxkIG5vdCBkZXRlcm1pbmUgbmV0d29yayBzdGF0dXMnLFxuICAgICAgICAgIGVycm9yLFxuICAgICAgICApO1xuICAgICAgICBuZXR3b3JrU3RhdHVzID0gTmV0d29ya1N0YXR1cy5Vbmtub3duO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXR3b3JrQ2hhbmdlZCkge1xuICAgICAgLy8gSWYgdGhlIG5ldHdvcmsgaGFzIGNoYW5nZWQsIHRoZW4gYGxvb2t1cE5ldHdvcmtgIGVpdGhlciBoYXMgYmVlbiBvciBpc1xuICAgICAgLy8gaW4gdGhlIHByb2Nlc3Mgb2YgYmVpbmcgY2FsbGVkLCBzbyB3ZSBkb24ndCBuZWVkIHRvIGdvIGZ1cnRoZXIuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI21lc3Nlbmdlci51bnN1YnNjcmliZShcbiAgICAgIE5ldHdvcmtDb250cm9sbGVyRXZlbnRUeXBlLk5ldHdvcmtEaWRDaGFuZ2UsXG4gICAgICBsaXN0ZW5lcixcbiAgICApO1xuXG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICBuZXR3b3JrU3RhdHVzLFxuICAgIH0pO1xuXG4gICAgaWYgKG5ldHdvcmtTdGF0dXMgPT09IE5ldHdvcmtTdGF0dXMuQXZhaWxhYmxlKSB7XG4gICAgICBjb25zdCB7IG5ldHdvcmtEZXRhaWxzIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgICAgbmV0d29ya0lkLFxuICAgICAgICBuZXR3b3JrRGV0YWlsczoge1xuICAgICAgICAgIC4uLm5ldHdvcmtEZXRhaWxzLFxuICAgICAgICAgIEVJUFM6IHtcbiAgICAgICAgICAgIC4uLm5ldHdvcmtEZXRhaWxzLkVJUFMsXG4gICAgICAgICAgICAxNTU5OiBzdXBwb3J0c0VJUDE1NTksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiNyZXNldE5ldHdvcmtJZCgpO1xuICAgICAgdGhpcy4jcmVzZXROZXR3b3JrRGV0YWlscygpO1xuICAgIH1cblxuICAgIGlmIChpc0luZnVyYSkge1xuICAgICAgaWYgKG5ldHdvcmtTdGF0dXMgPT09IE5ldHdvcmtTdGF0dXMuQXZhaWxhYmxlKSB7XG4gICAgICAgIHRoaXMuI21lc3Nlbmdlci5wdWJsaXNoKE5ldHdvcmtDb250cm9sbGVyRXZlbnRUeXBlLkluZnVyYUlzVW5ibG9ja2VkKTtcbiAgICAgIH0gZWxzZSBpZiAobmV0d29ya1N0YXR1cyA9PT0gTmV0d29ya1N0YXR1cy5CbG9ja2VkKSB7XG4gICAgICAgIHRoaXMuI21lc3Nlbmdlci5wdWJsaXNoKE5ldHdvcmtDb250cm9sbGVyRXZlbnRUeXBlLkluZnVyYUlzQmxvY2tlZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFsd2F5cyBwdWJsaXNoIGluZnVyYUlzVW5ibG9ja2VkIHJlZ2FyZGxlc3Mgb2YgbmV0d29yayBzdGF0dXMgdG9cbiAgICAgIC8vIHByZXZlbnQgY29uc3VtZXJzIGZyb20gYmVpbmcgc3R1Y2sgaW4gYSBibG9ja2VkIHN0YXRlIGlmIHRoZXkgd2VyZVxuICAgICAgLy8gcHJldmlvdXNseSBjb25uZWN0ZWQgdG8gYW4gSW5mdXJhIG5ldHdvcmsgdGhhdCB3YXMgYmxvY2tlZFxuICAgICAgdGhpcy4jbWVzc2VuZ2VyLnB1Ymxpc2goTmV0d29ya0NvbnRyb2xsZXJFdmVudFR5cGUuSW5mdXJhSXNVbmJsb2NrZWQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTd2l0Y2hlcyB0byB0aGUgbmV0d29yayBzcGVjaWZpZWQgYnkgYSBuZXR3b3JrIGNvbmZpZ3VyYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSBuZXR3b3JrQ29uZmlndXJhdGlvbklkIC0gVGhlIHVuaXF1ZSBpZGVudGlmaWVyIHRoYXQgcmVmZXJzIHRvIGFcbiAgICogcHJldmlvdXNseSBhZGRlZCBuZXR3b3JrIGNvbmZpZ3VyYXRpb24uXG4gICAqIEByZXR1cm5zIFRoZSBVUkwgb2YgdGhlIFJQQyBlbmRwb2ludCByZXByZXNlbnRpbmcgdGhlIG5ld2x5IHN3aXRjaGVkXG4gICAqIG5ldHdvcmsuXG4gICAqL1xuICBhc3luYyBzZXRBY3RpdmVOZXR3b3JrKG5ldHdvcmtDb25maWd1cmF0aW9uSWQ6IE5ldHdvcmtDb25maWd1cmF0aW9uSWQpIHtcbiAgICBjb25zdCB0YXJnZXROZXR3b3JrID1cbiAgICAgIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5uZXR3b3JrQ29uZmlndXJhdGlvbnNbbmV0d29ya0NvbmZpZ3VyYXRpb25JZF07XG5cbiAgICBpZiAoIXRhcmdldE5ldHdvcmspIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYG5ldHdvcmtDb25maWd1cmF0aW9uSWQgJHtuZXR3b3JrQ29uZmlndXJhdGlvbklkfSBkb2VzIG5vdCBtYXRjaCBhIGNvbmZpZ3VyZWQgbmV0d29ya0NvbmZpZ3VyYXRpb25gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLiNzZXRQcm92aWRlckNvbmZpZyh7XG4gICAgICB0eXBlOiBORVRXT1JLX1RZUEVTLlJQQyxcbiAgICAgIC4uLnRhcmdldE5ldHdvcmssXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGFyZ2V0TmV0d29yay5ycGNVcmw7XG4gIH1cblxuICAvKipcbiAgICogU3dpdGNoZXMgdG8gYW4gSW5mdXJhLXN1cHBvcnRlZCBuZXR3b3JrLlxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSAtIFRoZSBzaG9ydG5hbWUgb2YgdGhlIG5ldHdvcmsuXG4gICAqIEB0aHJvd3MgaWYgdGhlIGB0eXBlYCBpcyBcInJwY1wiIG9yIGlmIGl0IGlzIG5vdCBhIGtub3duIEluZnVyYS1zdXBwb3J0ZWRcbiAgICogbmV0d29yay5cbiAgICovXG4gIGFzeW5jIHNldFByb3ZpZGVyVHlwZSh0eXBlOiBzdHJpbmcpIHtcbiAgICBhc3NlcnQubm90U3RyaWN0RXF1YWwoXG4gICAgICB0eXBlLFxuICAgICAgTkVUV09SS19UWVBFUy5SUEMsXG4gICAgICBgTmV0d29ya0NvbnRyb2xsZXIgLSBjYW5ub3QgY2FsbCBcInNldFByb3ZpZGVyVHlwZVwiIHdpdGggdHlwZSBcIiR7TkVUV09SS19UWVBFUy5SUEN9XCIuIFVzZSBcInNldEFjdGl2ZU5ldHdvcmtcImAsXG4gICAgKTtcbiAgICBhc3NlcnQub2soXG4gICAgICBpc0luZnVyYVByb3ZpZGVyVHlwZSh0eXBlKSxcbiAgICAgIGBVbmtub3duIEluZnVyYSBwcm92aWRlciB0eXBlIFwiJHt0eXBlfVwiLmAsXG4gICAgKTtcbiAgICBjb25zdCBuZXR3b3JrID0gQlVJTFRfSU5fSU5GVVJBX05FVFdPUktTW3R5cGVdO1xuICAgIGF3YWl0IHRoaXMuI3NldFByb3ZpZGVyQ29uZmlnKHtcbiAgICAgIHR5cGUsXG4gICAgICBycGNVcmw6IHVuZGVmaW5lZCxcbiAgICAgIGNoYWluSWQ6IG5ldHdvcmsuY2hhaW5JZCxcbiAgICAgIHRpY2tlcjogJ3RpY2tlcicgaW4gbmV0d29yayA/IG5ldHdvcmsudGlja2VyIDogJ0VUSCcsXG4gICAgICBuaWNrbmFtZTogdW5kZWZpbmVkLFxuICAgICAgcnBjUHJlZnM6IHsgYmxvY2tFeHBsb3JlclVybDogbmV0d29yay5ibG9ja0V4cGxvcmVyVXJsIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmUtaW5pdGlhbGl6ZXMgdGhlIHByb3ZpZGVyIGFuZCBibG9jayB0cmFja2VyIGZvciB0aGUgY3VycmVudCBuZXR3b3JrLlxuICAgKi9cbiAgYXN5bmMgcmVzZXRDb25uZWN0aW9uKCkge1xuICAgIGF3YWl0IHRoaXMuI3NldFByb3ZpZGVyQ29uZmlnKHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5wcm92aWRlckNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogU3dpdGNoZXMgdG8gdGhlIHByZXZpb3VzIG5ldHdvcmssIGFzc3VtaW5nIHRoYXQgdGhlIGN1cnJlbnQgbmV0d29yayBpc1xuICAgKiBkaWZmZXJlbnQgdGhhbiB0aGUgaW5pdGlhbCBuZXR3b3JrIChpZiBpdCBpcywgdGhlbiB0aGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICogY2FsbGluZyBgcmVzZXRDb25uZWN0aW9uYCkuXG4gICAqL1xuICBhc3luYyByb2xsYmFja1RvUHJldmlvdXNQcm92aWRlcigpIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLiNwcmV2aW91c1Byb3ZpZGVyQ29uZmlnO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgcHJvdmlkZXJDb25maWc6IGNvbmZpZyxcbiAgICB9KTtcbiAgICBhd2FpdCB0aGlzLiNzd2l0Y2hOZXR3b3JrKGNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyB0aGUgbGF0ZXN0IGJsb2NrIGZvciB0aGUgbmV0d29yay5cbiAgICpcbiAgICogQHBhcmFtIHByb3ZpZGVyIC0gQSBwcm92aWRlciwgd2hpY2ggaXMgZ3VhcmFudGVlZCB0byBiZSBhdmFpbGFibGUuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IGVpdGhlciByZXNvbHZlcyB0byB0aGUgYmxvY2sgaGVhZGVyIG9yIG51bGwgaWZcbiAgICogdGhlcmUgaXMgbm8gbGF0ZXN0IGJsb2NrLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXG4gICAqL1xuICAjZ2V0TGF0ZXN0QmxvY2socHJvdmlkZXI6IFNhZmVFdmVudEVtaXR0ZXJQcm92aWRlcik6IFByb21pc2U8QmxvY2sgfCBudWxsPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGV0aFF1ZXJ5ID0gbmV3IEV0aFF1ZXJ5KHByb3ZpZGVyKTtcbiAgICAgIGV0aFF1ZXJ5LnNlbmRBc3luYzxbJ2xhdGVzdCcsIGZhbHNlXSwgQmxvY2sgfCBudWxsPihcbiAgICAgICAgeyBtZXRob2Q6ICdldGhfZ2V0QmxvY2tCeU51bWJlcicsIHBhcmFtczogWydsYXRlc3QnLCBmYWxzZV0gfSxcbiAgICAgICAgKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICBpZiAoYXJnc1swXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzb2x2ZShhcmdzWzFdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KGFyZ3NbMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyB0aGUgbmV0d29yayBJRCBmb3IgdGhlIG5ldHdvcmsuXG4gICAqXG4gICAqIEBwYXJhbSBwcm92aWRlciAtIEEgcHJvdmlkZXIsIHdoaWNoIGlzIGd1YXJhbnRlZWQgdG8gYmUgYXZhaWxhYmxlLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCBlaXRoZXIgcmVzb2x2ZXMgdG8gdGhlIG5ldHdvcmsgSUQsIG9yIHJlamVjdHMgd2l0aFxuICAgKiBhbiBlcnJvci5cbiAgICovXG4gIGFzeW5jICNnZXROZXR3b3JrSWQocHJvdmlkZXI6IFNhZmVFdmVudEVtaXR0ZXJQcm92aWRlcik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgZXRoUXVlcnkgPSBuZXcgRXRoUXVlcnkocHJvdmlkZXIpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBldGhRdWVyeS5zZW5kQXN5bmM8bmV2ZXJbXSwgc3RyaW5nPihcbiAgICAgICAgeyBtZXRob2Q6ICduZXRfdmVyc2lvbicgfSxcbiAgICAgICAgKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICBpZiAoYXJnc1swXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzb2x2ZShhcmdzWzFdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KGFyZ3NbMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBzdG9yZWQgbmV0d29yayBJRC5cbiAgICovXG4gICNyZXNldE5ldHdvcmtJZCgpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIG5ldHdvcmtJZDogYnVpbGREZWZhdWx0TmV0d29ya0lkU3RhdGUoKSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldHMgbmV0d29yayBzdGF0dXMgdG8gdGhlIGRlZmF1bHQgKFwidW5rbm93blwiKS5cbiAgICovXG4gICNyZXNldE5ldHdvcmtTdGF0dXMoKTogdm9pZCB7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICBuZXR3b3JrU3RhdHVzOiBidWlsZERlZmF1bHROZXR3b3JrU3RhdHVzU3RhdGUoKSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgZGV0YWlscyBwcmV2aW91c2x5IHN0b3JlZCBmb3IgdGhlIG5ldHdvcmsuXG4gICAqL1xuICAjcmVzZXROZXR3b3JrRGV0YWlscygpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIG5ldHdvcmtEZXRhaWxzOiBidWlsZERlZmF1bHROZXR3b3JrRGV0YWlsc1N0YXRlKCksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3RvcmVzIHRoZSBnaXZlbiBwcm92aWRlciBjb25maWd1cmF0aW9uIHJlcHJlc2VudGluZyBhIG5ldHdvcmsgaW4gc3RhdGUsXG4gICAqIHRoZW4gdXNlcyBpdCB0byBjcmVhdGUgYSBuZXcgcHJvdmlkZXIgZm9yIHRoYXQgbmV0d29yay5cbiAgICpcbiAgICogQHBhcmFtIHByb3ZpZGVyQ29uZmlnIC0gVGhlIHByb3ZpZGVyIGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICBhc3luYyAjc2V0UHJvdmlkZXJDb25maWcocHJvdmlkZXJDb25maWc6IFByb3ZpZGVyQ29uZmlndXJhdGlvbikge1xuICAgIHRoaXMuI3ByZXZpb3VzUHJvdmlkZXJDb25maWcgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkucHJvdmlkZXJDb25maWc7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IHByb3ZpZGVyQ29uZmlnIH0pO1xuICAgIGF3YWl0IHRoaXMuI3N3aXRjaE5ldHdvcmsocHJvdmlkZXJDb25maWcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgbGF0ZXN0IGJsb2NrIGZyb20gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBuZXR3b3JrOyBpZiB0aGVcbiAgICogYmxvY2sgaGFzIGEgYGJhc2VGZWVQZXJHYXNgIHByb3BlcnR5LCB0aGVuIHdlIGtub3cgdGhhdCB0aGUgbmV0d29ya1xuICAgKiBzdXBwb3J0cyBFSVAtMTU1OTsgb3RoZXJ3aXNlIGl0IGRvZXNuJ3QuXG4gICAqXG4gICAqIEBwYXJhbSBwcm92aWRlciAtIEEgcHJvdmlkZXIsIHdoaWNoIGlzIGd1YXJhbnRlZWQgdG8gYmUgYXZhaWxhYmxlLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0cnVlIGlmIHRoZSBuZXR3b3JrIHN1cHBvcnRzIEVJUC0xNTU5XG4gICAqIGFuZCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBhc3luYyAjZGV0ZXJtaW5lRUlQMTU1OUNvbXBhdGliaWxpdHkoXG4gICAgcHJvdmlkZXI6IFNhZmVFdmVudEVtaXR0ZXJQcm92aWRlcixcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgbGF0ZXN0QmxvY2sgPSBhd2FpdCB0aGlzLiNnZXRMYXRlc3RCbG9jayhwcm92aWRlcik7XG4gICAgcmV0dXJuIGxhdGVzdEJsb2NrPy5iYXNlRmVlUGVyR2FzICE9PSB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgYSBzZXJpZXMgb2Ygc3RlcHMgdG8gY2hhbmdlIHRoZSBjdXJyZW50IG5ldHdvcms6XG4gICAqXG4gICAqIDEuIE5vdGlmaWVzIHN1YnNjcmliZXJzIHRoYXQgdGhlIG5ldHdvcmsgaXMgYWJvdXQgdG8gY2hhbmdlLlxuICAgKiAyLiBDbGVhcnMgc3RhdGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBjdXJyZW50IG5ldHdvcmsuXG4gICAqIDMuIENyZWF0ZXMgYSBuZXcgbmV0d29yayBjbGllbnQgYWxvbmcgd2l0aCBhIHByb3ZpZGVyIGZvciB0aGUgZGVzaXJlZFxuICAgKiBuZXR3b3JrLlxuICAgKiA0LiBOb3RpZmllcyBzdWJzY3JpYmVzIHRoYXQgdGhlIG5ldHdvcmsgaGFzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSBwcm92aWRlckNvbmZpZyAtIFRoZSBwcm92aWRlciBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IHNwZWNpZmllc1xuICAgKiB0aGUgbmV3IG5ldHdvcmsuXG4gICAqL1xuICBhc3luYyAjc3dpdGNoTmV0d29yayhwcm92aWRlckNvbmZpZzogUHJvdmlkZXJDb25maWd1cmF0aW9uKSB7XG4gICAgdGhpcy4jbWVzc2VuZ2VyLnB1Ymxpc2goTmV0d29ya0NvbnRyb2xsZXJFdmVudFR5cGUuTmV0d29ya1dpbGxDaGFuZ2UpO1xuICAgIHRoaXMuI3Jlc2V0TmV0d29ya0lkKCk7XG4gICAgdGhpcy4jcmVzZXROZXR3b3JrU3RhdHVzKCk7XG4gICAgdGhpcy4jcmVzZXROZXR3b3JrRGV0YWlscygpO1xuICAgIHRoaXMuI2NvbmZpZ3VyZVByb3ZpZGVyKHByb3ZpZGVyQ29uZmlnKTtcbiAgICB0aGlzLiNtZXNzZW5nZXIucHVibGlzaChOZXR3b3JrQ29udHJvbGxlckV2ZW50VHlwZS5OZXR3b3JrRGlkQ2hhbmdlKTtcbiAgICBhd2FpdCB0aGlzLmxvb2t1cE5ldHdvcmsoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV0d29yayBjbGllbnQgKGEgc3RhY2sgb2YgbWlkZGxld2FyZSBhbG9uZyB3aXRoIGEgcHJvdmlkZXIgYW5kXG4gICAqIGJsb2NrIHRyYWNrZXIpIHRvIHRhbGsgdG8gYSBuZXR3b3JrLlxuICAgKlxuICAgKiBAcGFyYW0gYXJncyAtIFRoZSBhcmd1bWVudHMuXG4gICAqIEBwYXJhbSBhcmdzLnR5cGUgLSBUaGUgc2hvcnRuYW1lIG9mIGFuIEluZnVyYS1zdXBwb3J0ZWQgbmV0d29yayAoc2VlXG4gICAqIHtAbGluayBORVRXT1JLX1RZUEVTfSkuXG4gICAqIEBwYXJhbSBhcmdzLnJwY1VybCAtIFRoZSBVUkwgb2YgdGhlIFJQQyBlbmRwb2ludCB0aGF0IHJlcHJlc2VudHMgdGhlXG4gICAqIG5ldHdvcmsuIE9ubHkgdXNlZCBmb3Igbm9uLUluZnVyYSBuZXR3b3Jrcy5cbiAgICogQHBhcmFtIGFyZ3MuY2hhaW5JZCAtIFRoZSBjaGFpbiBJRCBvZiB0aGUgbmV0d29yayAoYXMgcGVyIEVJUC0xNTUpLiBPbmx5XG4gICAqIHVzZWQgZm9yIG5vbi1JbmZ1cmEtc3VwcG9ydGVkIG5ldHdvcmtzIChhcyB3ZSBhbHJlYWR5IGtub3cgdGhlIGNoYWluIElEIG9mXG4gICAqIGFueSBJbmZ1cmEtc3VwcG9ydGVkIG5ldHdvcmspLlxuICAgKiBAdGhyb3dzIGlmIHRoZSBgdHlwZWAgaWYgbm90IGEga25vd24gSW5mdXJhLXN1cHBvcnRlZCBuZXR3b3JrLlxuICAgKi9cbiAgI2NvbmZpZ3VyZVByb3ZpZGVyKHsgdHlwZSwgcnBjVXJsLCBjaGFpbklkIH06IFByb3ZpZGVyQ29uZmlndXJhdGlvbik6IHZvaWQge1xuICAgIGNvbnN0IGlzSW5mdXJhID0gaXNJbmZ1cmFQcm92aWRlclR5cGUodHlwZSk7XG4gICAgaWYgKGlzSW5mdXJhKSB7XG4gICAgICAvLyBpbmZ1cmEgdHlwZS1iYXNlZCBlbmRwb2ludHNcbiAgICAgIHRoaXMuI2NvbmZpZ3VyZUluZnVyYVByb3ZpZGVyKHtcbiAgICAgICAgdHlwZSxcbiAgICAgICAgaW5mdXJhUHJvamVjdElkOiB0aGlzLiNpbmZ1cmFQcm9qZWN0SWQsXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IE5FVFdPUktfVFlQRVMuUlBDICYmIHJwY1VybCkge1xuICAgICAgLy8gdXJsLWJhc2VkIHJwYyBlbmRwb2ludHNcbiAgICAgIHRoaXMuI2NvbmZpZ3VyZVN0YW5kYXJkUHJvdmlkZXIocnBjVXJsLCBjaGFpbklkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgTmV0d29ya0NvbnRyb2xsZXIgLSAjY29uZmlndXJlUHJvdmlkZXIgLSB1bmtub3duIHR5cGUgXCIke3R5cGV9XCJgLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldHdvcmsgY2xpZW50IChhIHN0YWNrIG9mIG1pZGRsZXdhcmUgYWxvbmcgd2l0aCBhIHByb3ZpZGVyIGFuZFxuICAgKiBibG9jayB0cmFja2VyKSB0byB0YWxrIHRvIGFuIEluZnVyYS1zdXBwb3J0ZWQgbmV0d29yay5cbiAgICpcbiAgICogQHBhcmFtIGFyZ3MgLSBUaGUgYXJndW1lbnRzLlxuICAgKiBAcGFyYW0gYXJncy50eXBlIC0gVGhlIHNob3J0bmFtZSBvZiB0aGUgSW5mdXJhIG5ldHdvcmsgKHNlZVxuICAgKiB7QGxpbmsgTkVUV09SS19UWVBFU30pLlxuICAgKiBAcGFyYW0gYXJncy5pbmZ1cmFQcm9qZWN0SWQgLSBBbiBJbmZ1cmEgQVBJIGtleS4gKFwiUHJvamVjdCBJRFwiIGlzIGFcbiAgICogbm93LW9ic29sZXRlIHRlcm0gd2UndmUgcmV0YWluZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuKVxuICAgKi9cbiAgI2NvbmZpZ3VyZUluZnVyYVByb3ZpZGVyKHtcbiAgICB0eXBlLFxuICAgIGluZnVyYVByb2plY3RJZCxcbiAgfToge1xuICAgIHR5cGU6IEJ1aWx0SW5JbmZ1cmFOZXR3b3JrO1xuICAgIGluZnVyYVByb2plY3RJZDogTmV0d29ya0NvbnRyb2xsZXJPcHRpb25zWydpbmZ1cmFQcm9qZWN0SWQnXTtcbiAgfSk6IHZvaWQge1xuICAgIGxvZy5pbmZvKCdOZXR3b3JrQ29udHJvbGxlciAtICNjb25maWd1cmVJbmZ1cmFQcm92aWRlcicsIHR5cGUpO1xuICAgIGNvbnN0IHsgcHJvdmlkZXIsIGJsb2NrVHJhY2tlciB9ID0gY3JlYXRlTmV0d29ya0NsaWVudCh7XG4gICAgICBuZXR3b3JrOiB0eXBlLFxuICAgICAgaW5mdXJhUHJvamVjdElkLFxuICAgICAgdHlwZTogTmV0d29ya0NsaWVudFR5cGUuSW5mdXJhLFxuICAgIH0pO1xuICAgIHRoaXMuI3NldFByb3ZpZGVyQW5kQmxvY2tUcmFja2VyKHsgcHJvdmlkZXIsIGJsb2NrVHJhY2tlciB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV0d29yayBjbGllbnQgKGEgc3RhY2sgb2YgbWlkZGxld2FyZSBhbG9uZyB3aXRoIGEgcHJvdmlkZXIgYW5kXG4gICAqIGJsb2NrIHRyYWNrZXIpIHRvIHRhbGsgdG8gYSBub24tSW5mdXJhLXN1cHBvcnRlZCBuZXR3b3JrLlxuICAgKlxuICAgKiBAcGFyYW0gcnBjVXJsIC0gVGhlIFVSTCBvZiB0aGUgUlBDIGVuZHBvaW50IHRoYXQgcmVwcmVzZW50cyB0aGUgbmV0d29yay5cbiAgICogQHBhcmFtIGNoYWluSWQgLSBUaGUgY2hhaW4gSUQgb2YgdGhlIG5ldHdvcmsgKGFzIHBlciBFSVAtMTU1KS5cbiAgICovXG4gICNjb25maWd1cmVTdGFuZGFyZFByb3ZpZGVyKHJwY1VybDogc3RyaW5nLCBjaGFpbklkOiBDaGFpbklkKTogdm9pZCB7XG4gICAgbG9nLmluZm8oJ05ldHdvcmtDb250cm9sbGVyIC0gI2NvbmZpZ3VyZVN0YW5kYXJkUHJvdmlkZXInLCBycGNVcmwpO1xuICAgIGNvbnN0IHsgcHJvdmlkZXIsIGJsb2NrVHJhY2tlciB9ID0gY3JlYXRlTmV0d29ya0NsaWVudCh7XG4gICAgICBjaGFpbklkLFxuICAgICAgcnBjVXJsLFxuICAgICAgdHlwZTogTmV0d29ya0NsaWVudFR5cGUuQ3VzdG9tLFxuICAgIH0pO1xuICAgIHRoaXMuI3NldFByb3ZpZGVyQW5kQmxvY2tUcmFja2VyKHsgcHJvdmlkZXIsIGJsb2NrVHJhY2tlciB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhIHByb3ZpZGVyIGFuZCBhIGJsb2NrIHRyYWNrZXIsIHVwZGF0ZXMgYW55IHByb3hpZXMgcG9pbnRpbmcgdG9cbiAgICogdGhlc2Ugb2JqZWN0cyB0aGF0IGhhdmUgYmVlbiBwcmV2aW91c2x5IHNldCwgb3IgaW5pdGlhbGl6ZXMgYW55IHByb3hpZXNcbiAgICogdGhhdCBoYXZlIG5vdCBiZWVuIHByZXZpb3VzbHkgc2V0LlxuICAgKlxuICAgKiBAcGFyYW0gYXJncyAtIFRoZSBhcmd1bWVudHMuXG4gICAqIEBwYXJhbSBhcmdzLnByb3ZpZGVyIC0gVGhlIHByb3ZpZGVyLlxuICAgKiBAcGFyYW0gYXJncy5ibG9ja1RyYWNrZXIgLSBUaGUgYmxvY2sgdHJhY2tlci5cbiAgICovXG4gICNzZXRQcm92aWRlckFuZEJsb2NrVHJhY2tlcih7XG4gICAgcHJvdmlkZXIsXG4gICAgYmxvY2tUcmFja2VyLFxuICB9OiB7XG4gICAgcHJvdmlkZXI6IFNhZmVFdmVudEVtaXR0ZXJQcm92aWRlcjtcbiAgICBibG9ja1RyYWNrZXI6IFBvbGxpbmdCbG9ja1RyYWNrZXI7XG4gIH0pOiB2b2lkIHtcbiAgICAvLyB1cGRhdGUgb3IgaW5pdGlhbGl6ZSBwcm94aWVzXG4gICAgaWYgKHRoaXMuI3Byb3ZpZGVyUHJveHkpIHtcbiAgICAgIHRoaXMuI3Byb3ZpZGVyUHJveHkuc2V0VGFyZ2V0KHByb3ZpZGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4jcHJvdmlkZXJQcm94eSA9IGNyZWF0ZVN3YXBwYWJsZVByb3h5KHByb3ZpZGVyKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuI2Jsb2NrVHJhY2tlclByb3h5KSB7XG4gICAgICB0aGlzLiNibG9ja1RyYWNrZXJQcm94eS5zZXRUYXJnZXQoYmxvY2tUcmFja2VyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4jYmxvY2tUcmFja2VyUHJveHkgPSBjcmVhdGVFdmVudEVtaXR0ZXJQcm94eShibG9ja1RyYWNrZXIsIHtcbiAgICAgICAgZXZlbnRGaWx0ZXI6ICdza2lwSW50ZXJuYWwnLFxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIHNldCBuZXcgcHJvdmlkZXIgYW5kIGJsb2NrVHJhY2tlclxuICAgIHRoaXMuI3Byb3ZpZGVyID0gcHJvdmlkZXI7XG4gICAgdGhpcy4jYmxvY2tUcmFja2VyID0gYmxvY2tUcmFja2VyO1xuICB9XG5cbiAgLyoqXG4gICAqIE5ldHdvcmsgQ29uZmlndXJhdGlvbiBtYW5hZ2VtZW50IGZ1bmN0aW9uc1xuICAgKi9cblxuICAvKipcbiAgICogVXBkYXRlcyBhbiBleGlzdGluZyBuZXR3b3JrIGNvbmZpZ3VyYXRpb24gbWF0Y2hpbmcgdGhlIHNhbWUgUlBDIFVSTCBhcyB0aGVcbiAgICogZ2l2ZW4gbmV0d29yayBjb25maWd1cmF0aW9uOyBvdGhlcndpc2UgYWRkcyB0aGUgbmV0d29yayBjb25maWd1cmF0aW9uLlxuICAgKiBGb2xsb3dpbmcgdGhlIHVwc2VydCwgdGhlIGB0cmFja01ldGFNZXRyaWNzRXZlbnRgIGNhbGxiYWNrIHNwZWNpZmllZFxuICAgKiB2aWEgdGhlIE5ldHdvcmtDb250cm9sbGVyIGNvbnN0cnVjdG9yIHdpbGwgYmUgY2FsbGVkIHRvIChwcmVzdW1hYmx5KSBjcmVhdGVcbiAgICogYSBNZXRhTWV0cmljcyBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIG5ldHdvcmtDb25maWd1cmF0aW9uIC0gVGhlIG5ldHdvcmsgY29uZmlndXJhdGlvbiB0byB1cHNlcnQuXG4gICAqIEBwYXJhbSBuZXR3b3JrQ29uZmlndXJhdGlvbi5jaGFpbklkIC0gVGhlIGNoYWluIElEIG9mIHRoZSBuZXR3b3JrIGFzIHBlclxuICAgKiBFSVAtMTU1LlxuICAgKiBAcGFyYW0gbmV0d29ya0NvbmZpZ3VyYXRpb24udGlja2VyIC0gVGhlIHNob3J0bmFtZSBvZiB0aGUgY3VycmVuY3kgdXNlZCBieVxuICAgKiB0aGUgbmV0d29yay5cbiAgICogQHBhcmFtIG5ldHdvcmtDb25maWd1cmF0aW9uLm5pY2tuYW1lIC0gVGhlIHVzZXItY3VzdG9taXphYmxlIG5hbWUgb2YgdGhlXG4gICAqIG5ldHdvcmsuXG4gICAqIEBwYXJhbSBuZXR3b3JrQ29uZmlndXJhdGlvbi5ycGNQcmVmcyAtIFVzZXItY3VzdG9taXphYmxlIGRldGFpbHMgZm9yIHRoZVxuICAgKiBuZXR3b3JrLlxuICAgKiBAcGFyYW0gbmV0d29ya0NvbmZpZ3VyYXRpb24ucnBjVXJsIC0gVGhlIFVSTCBvZiB0aGUgUlBDIGVuZHBvaW50LlxuICAgKiBAcGFyYW0gYWRkaXRpb25hbEFyZ3MgLSBBZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICogQHBhcmFtIGFkZGl0aW9uYWxBcmdzLnNldEFjdGl2ZSAtIFN3aXRjaGVzIHRvIHRoZSBuZXR3b3JrIHNwZWNpZmllZCBieVxuICAgKiB0aGUgZ2l2ZW4gbmV0d29yayBjb25maWd1cmF0aW9uIGZvbGxvd2luZyB0aGUgdXBzZXJ0LlxuICAgKiBAcGFyYW0gYWRkaXRpb25hbEFyZ3MucmVmZXJyZXIgLSBUaGUgc2l0ZSBmcm9tIHdoaWNoIHRoZSBjYWxsIG9yaWdpbmF0ZWQsXG4gICAqIG9yICdtZXRhbWFzaycgZm9yIGludGVybmFsIGNhbGxzOyB1c2VkIGZvciBldmVudCBtZXRyaWNzLlxuICAgKiBAcGFyYW0gYWRkaXRpb25hbEFyZ3Muc291cmNlIC0gV2hlcmUgdGhlIG1ldHJpYyBldmVudCBvcmlnaW5hdGVkIChpLmUuIGZyb21cbiAgICogYSBkYXBwIG9yIGZyb20gdGhlIG5ldHdvcmsgZm9ybSk7IHVzZWQgZm9yIGV2ZW50IG1ldHJpY3MuXG4gICAqIEB0aHJvd3MgaWYgdGhlIGBjaGFpbklEYCBkb2VzIG5vdCBtYXRjaCBFSVAtMTU1IG9yIGlzIHRvbyBsYXJnZS5cbiAgICogQHRocm93cyBpZiBgcnBjVXJsYCBpcyBub3QgYSB2YWxpZCBVUkwuXG4gICAqIEByZXR1cm5zIFRoZSBJRCBmb3IgdGhlIGFkZGVkIG9yIHVwZGF0ZWQgbmV0d29yayBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgYXN5bmMgdXBzZXJ0TmV0d29ya0NvbmZpZ3VyYXRpb24oXG4gICAge1xuICAgICAgcnBjVXJsLFxuICAgICAgY2hhaW5JZCxcbiAgICAgIHRpY2tlcixcbiAgICAgIG5pY2tuYW1lLFxuICAgICAgcnBjUHJlZnMsXG4gICAgfTogT21pdDxOZXR3b3JrQ29uZmlndXJhdGlvbiwgJ2lkJz4sXG4gICAge1xuICAgICAgc2V0QWN0aXZlID0gZmFsc2UsXG4gICAgICByZWZlcnJlcixcbiAgICAgIHNvdXJjZSxcbiAgICB9OiB7XG4gICAgICBzZXRBY3RpdmU/OiBib29sZWFuO1xuICAgICAgcmVmZXJyZXI6IHN0cmluZztcbiAgICAgIHNvdXJjZTogc3RyaW5nO1xuICAgIH0sXG4gICk6IFByb21pc2U8TmV0d29ya0NvbmZpZ3VyYXRpb25JZD4ge1xuICAgIGFzc2VydC5vayhcbiAgICAgIGlzUHJlZml4ZWRGb3JtYXR0ZWRIZXhTdHJpbmcoY2hhaW5JZCksXG4gICAgICBgSW52YWxpZCBjaGFpbiBJRCBcIiR7Y2hhaW5JZH1cIjogaW52YWxpZCBoZXggc3RyaW5nLmAsXG4gICAgKTtcbiAgICBhc3NlcnQub2soXG4gICAgICBpc1NhZmVDaGFpbklkKHBhcnNlSW50KGNoYWluSWQsIDE2KSksXG4gICAgICBgSW52YWxpZCBjaGFpbiBJRCBcIiR7Y2hhaW5JZH1cIjogbnVtZXJpY2FsIHZhbHVlIGdyZWF0ZXIgdGhhbiBtYXggc2FmZSB2YWx1ZS5gLFxuICAgICk7XG5cbiAgICBpZiAoIXJwY1VybCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQW4gcnBjVXJsIGlzIHJlcXVpcmVkIHRvIGFkZCBvciB1cGRhdGUgbmV0d29yayBjb25maWd1cmF0aW9uJyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFyZWZlcnJlciB8fCAhc291cmNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdyZWZlcnJlciBhbmQgc291cmNlIGFyZSByZXF1aXJlZCBhcmd1bWVudHMgZm9yIGFkZGluZyBvciB1cGRhdGluZyBhIG5ldHdvcmsgY29uZmlndXJhdGlvbicsXG4gICAgICApO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVVJMKHJwY1VybCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGlzRXJyb3JXaXRoTWVzc2FnZShlKSAmJiBlLm1lc3NhZ2UuaW5jbHVkZXMoJ0ludmFsaWQgVVJMJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdycGNVcmwgbXVzdCBiZSBhIHZhbGlkIFVSTCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGlja2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdBIHRpY2tlciBpcyByZXF1aXJlZCB0byBhZGQgb3IgdXBkYXRlIG5ldHdvcmtDb25maWd1cmF0aW9uJyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBuZXR3b3JrQ29uZmlndXJhdGlvbnMgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBuZXdOZXR3b3JrQ29uZmlndXJhdGlvbiA9IHtcbiAgICAgIHJwY1VybCxcbiAgICAgIGNoYWluSWQsXG4gICAgICB0aWNrZXIsXG4gICAgICBuaWNrbmFtZSxcbiAgICAgIHJwY1ByZWZzLFxuICAgIH07XG5cbiAgICBjb25zdCBvbGROZXR3b3JrQ29uZmlndXJhdGlvbklkID0gT2JqZWN0LnZhbHVlcyhuZXR3b3JrQ29uZmlndXJhdGlvbnMpLmZpbmQoXG4gICAgICAobmV0d29ya0NvbmZpZ3VyYXRpb24pID0+XG4gICAgICAgIG5ldHdvcmtDb25maWd1cmF0aW9uLnJwY1VybD8udG9Mb3dlckNhc2UoKSA9PT0gcnBjVXJsPy50b0xvd2VyQ2FzZSgpLFxuICAgICk/LmlkO1xuXG4gICAgY29uc3QgbmV3TmV0d29ya0NvbmZpZ3VyYXRpb25JZCA9IG9sZE5ldHdvcmtDb25maWd1cmF0aW9uSWQgfHwgdXVpZCgpO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgbmV0d29ya0NvbmZpZ3VyYXRpb25zOiB7XG4gICAgICAgIC4uLm5ldHdvcmtDb25maWd1cmF0aW9ucyxcbiAgICAgICAgW25ld05ldHdvcmtDb25maWd1cmF0aW9uSWRdOiB7XG4gICAgICAgICAgLi4ubmV3TmV0d29ya0NvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgaWQ6IG5ld05ldHdvcmtDb25maWd1cmF0aW9uSWQsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgaWYgKCFvbGROZXR3b3JrQ29uZmlndXJhdGlvbklkKSB7XG4gICAgICB0aGlzLiN0cmFja01ldGFNZXRyaWNzRXZlbnQoe1xuICAgICAgICBldmVudDogJ0N1c3RvbSBOZXR3b3JrIEFkZGVkJyxcbiAgICAgICAgY2F0ZWdvcnk6IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeS5OZXR3b3JrLFxuICAgICAgICByZWZlcnJlcjoge1xuICAgICAgICAgIHVybDogcmVmZXJyZXIsXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBjaGFpbl9pZDogY2hhaW5JZCxcbiAgICAgICAgICBzeW1ib2w6IHRpY2tlcixcbiAgICAgICAgICBzb3VyY2UsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoc2V0QWN0aXZlKSB7XG4gICAgICBhd2FpdCB0aGlzLnNldEFjdGl2ZU5ldHdvcmsobmV3TmV0d29ya0NvbmZpZ3VyYXRpb25JZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ld05ldHdvcmtDb25maWd1cmF0aW9uSWQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIG5ldHdvcmsgY29uZmlndXJhdGlvbiBmcm9tIHN0YXRlLlxuICAgKlxuICAgKiBAcGFyYW0gbmV0d29ya0NvbmZpZ3VyYXRpb25JZCAtIFRoZSB1bmlxdWUgaWQgZm9yIHRoZSBuZXR3b3JrIGNvbmZpZ3VyYXRpb25cbiAgICogdG8gcmVtb3ZlLlxuICAgKi9cbiAgcmVtb3ZlTmV0d29ya0NvbmZpZ3VyYXRpb24obmV0d29ya0NvbmZpZ3VyYXRpb25JZDogTmV0d29ya0NvbmZpZ3VyYXRpb25JZCkge1xuICAgIGlmICghdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLm5ldHdvcmtDb25maWd1cmF0aW9uc1tuZXR3b3JrQ29uZmlndXJhdGlvbklkXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgbmV0d29ya0NvbmZpZ3VyYXRpb25JZCAke25ldHdvcmtDb25maWd1cmF0aW9uSWR9IGRvZXMgbm90IG1hdGNoIGEgY29uZmlndXJlZCBuZXR3b3JrQ29uZmlndXJhdGlvbmAsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBuZXR3b3JrQ29uZmlndXJhdGlvbnMgPSB7XG4gICAgICAuLi50aGlzLnN0b3JlLmdldFN0YXRlKCkubmV0d29ya0NvbmZpZ3VyYXRpb25zLFxuICAgIH07XG4gICAgZGVsZXRlIG5ldHdvcmtDb25maWd1cmF0aW9uc1tuZXR3b3JrQ29uZmlndXJhdGlvbklkXTtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIG5ldHdvcmtDb25maWd1cmF0aW9ucyxcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZVN0b3JlIH0gZnJvbSAnQG1ldGFtYXNrL29icy1zdG9yZSc7XG5pbXBvcnQgbG9nIGZyb20gJ2xvZ2xldmVsJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBJbml0U3RhdGVcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2VlZFBocmFzZUJhY2tlZFVwIEluZGljYXRlcyB3aGV0aGVyIHRoZSB1c2VyIGhhcyBjb21wbGV0ZWQgdGhlIHNlZWQgcGhyYXNlIGJhY2t1cCBjaGFsbGVuZ2VcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY29tcGxldGVkT25ib2FyZGluZyBJbmRpY2F0ZXMgd2hldGhlciB0aGUgdXNlciBoYXMgY29tcGxldGVkIHRoZSBvbmJvYXJkaW5nIGZsb3dcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IE9uYm9hcmRpbmdPcHRpb25zXG4gKiBAcHJvcGVydHkge0luaXRTdGF0ZX0gaW5pdFN0YXRlIFRoZSBpbml0aWFsIGNvbnRyb2xsZXIgc3RhdGVcbiAqL1xuXG4vKipcbiAqIENvbnRyb2xsZXIgcmVzcG9uc2libGUgZm9yIG1haW50YWluaW5nXG4gKiBzdGF0ZSByZWxhdGVkIHRvIG9uYm9hcmRpbmdcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT25ib2FyZGluZ0NvbnRyb2xsZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBjb250cm9sbGVyIGluc3RhbmNlXG4gICAqXG4gICAqIEBwYXJhbSB7T25ib2FyZGluZ09wdGlvbnN9IFtvcHRzXSAtIENvbnRyb2xsZXIgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBjb25zdCBpbml0aWFsVHJhbnNpZW50U3RhdGUgPSB7XG4gICAgICBvbmJvYXJkaW5nVGFiczoge30sXG4gICAgfTtcbiAgICBjb25zdCBpbml0U3RhdGUgPSB7XG4gICAgICBzZWVkUGhyYXNlQmFja2VkVXA6IG51bGwsXG4gICAgICBmaXJzdFRpbWVGbG93VHlwZTogbnVsbCxcbiAgICAgIGNvbXBsZXRlZE9uYm9hcmRpbmc6IGZhbHNlLFxuICAgICAgLi4ub3B0cy5pbml0U3RhdGUsXG4gICAgICAuLi5pbml0aWFsVHJhbnNpZW50U3RhdGUsXG4gICAgfTtcbiAgICB0aGlzLnN0b3JlID0gbmV3IE9ic2VydmFibGVTdG9yZShpbml0U3RhdGUpO1xuICB9XG5cbiAgc2V0U2VlZFBocmFzZUJhY2tlZFVwKG5ld1NlZWRQaHJhc2VCYWNrVXBTdGF0ZSkge1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgc2VlZFBocmFzZUJhY2tlZFVwOiBuZXdTZWVkUGhyYXNlQmFja1VwU3RhdGUsXG4gICAgfSk7XG4gIH1cblxuICAvLyAvKipcbiAgLy8gICogU2V0cyB0aGUgY29tcGxldGVkT25ib2FyZGluZyBzdGF0ZSB0byB0cnVlLCBpbmRpY2F0aW5nIHRoYXQgdGhlIHVzZXIgaGFzIGNvbXBsZXRlZCB0aGVcbiAgLy8gICogb25ib2FyZGluZyBwcm9jZXNzLlxuICAvLyAgKi9cbiAgYXN5bmMgY29tcGxldGVPbmJvYXJkaW5nKCkge1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgY29tcGxldGVkT25ib2FyZGluZzogdHJ1ZSxcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIHRoZSBgZmlyc3RUaW1lRmxvd1R5cGVgIHByb3BlcnR5XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gSW5kaWNhdGVzIHRoZSB0eXBlIG9mIGZpcnN0IHRpbWUgZmxvdyAtIGNyZWF0ZSBvciBpbXBvcnQgLSB0aGUgdXNlciB3aXNoZXMgdG8gZm9sbG93XG4gICAqL1xuICBzZXRGaXJzdFRpbWVGbG93VHlwZSh0eXBlKSB7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IGZpcnN0VGltZUZsb3dUeXBlOiB0eXBlIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyaW5nIGEgc2l0ZSBhcyBoYXZpbmcgaW5pdGlhdGVkIG9uYm9hcmRpbmdcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIC0gVGhlIGxvY2F0aW9uIG9mIHRoZSBzaXRlIHJlZ2lzdGVyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0YWJJZCAtIFRoZSBpZCBvZiB0aGUgdGFiIHJlZ2lzdGVyaW5nXG4gICAqL1xuICByZWdpc3Rlck9uYm9hcmRpbmcgPSBhc3luYyAobG9jYXRpb24sIHRhYklkKSA9PiB7XG4gICAgaWYgKHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb21wbGV0ZWRPbmJvYXJkaW5nKSB7XG4gICAgICBsb2cuZGVidWcoJ0lnbm9yaW5nIHJlZ2lzdGVyT25ib2FyZGluZzsgdXNlciBhbHJlYWR5IG9uYm9hcmRlZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBvbmJvYXJkaW5nVGFicyA9IHsgLi4udGhpcy5zdG9yZS5nZXRTdGF0ZSgpLm9uYm9hcmRpbmdUYWJzIH07XG4gICAgaWYgKCFvbmJvYXJkaW5nVGFic1tsb2NhdGlvbl0gfHwgb25ib2FyZGluZ1RhYnNbbG9jYXRpb25dICE9PSB0YWJJZCkge1xuICAgICAgbG9nLmRlYnVnKFxuICAgICAgICBgUmVnaXN0ZXJpbmcgb25ib2FyZGluZyB0YWIgYXQgbG9jYXRpb24gJyR7bG9jYXRpb259JyB3aXRoIHRhYklkICcke3RhYklkfSdgLFxuICAgICAgKTtcbiAgICAgIG9uYm9hcmRpbmdUYWJzW2xvY2F0aW9uXSA9IHRhYklkO1xuICAgICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IG9uYm9hcmRpbmdUYWJzIH0pO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCBuYW5vaWQgZnJvbSAnbmFub2lkJztcbmltcG9ydCB7XG4gIENhdmVhdFR5cGVzLFxuICBSZXN0cmljdGVkTWV0aG9kcyxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9wZXJtaXNzaW9ucyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQZXJtaXNzaW9uQmFja2dyb3VuZEFwaU1ldGhvZHMocGVybWlzc2lvbkNvbnRyb2xsZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBhZGRQZXJtaXR0ZWRBY2NvdW50OiAob3JpZ2luLCBhY2NvdW50KSA9PiB7XG4gICAgICBjb25zdCBleGlzdGluZyA9IHBlcm1pc3Npb25Db250cm9sbGVyLmdldENhdmVhdChcbiAgICAgICAgb3JpZ2luLFxuICAgICAgICBSZXN0cmljdGVkTWV0aG9kcy5ldGhfYWNjb3VudHMsXG4gICAgICAgIENhdmVhdFR5cGVzLnJlc3RyaWN0UmV0dXJuZWRBY2NvdW50cyxcbiAgICAgICk7XG5cbiAgICAgIGlmIChleGlzdGluZy52YWx1ZS5pbmNsdWRlcyhhY2NvdW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHBlcm1pc3Npb25Db250cm9sbGVyLnVwZGF0ZUNhdmVhdChcbiAgICAgICAgb3JpZ2luLFxuICAgICAgICBSZXN0cmljdGVkTWV0aG9kcy5ldGhfYWNjb3VudHMsXG4gICAgICAgIENhdmVhdFR5cGVzLnJlc3RyaWN0UmV0dXJuZWRBY2NvdW50cyxcbiAgICAgICAgWy4uLmV4aXN0aW5nLnZhbHVlLCBhY2NvdW50XSxcbiAgICAgICk7XG4gICAgfSxcblxuICAgIHJlbW92ZVBlcm1pdHRlZEFjY291bnQ6IChvcmlnaW4sIGFjY291bnQpID0+IHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gcGVybWlzc2lvbkNvbnRyb2xsZXIuZ2V0Q2F2ZWF0KFxuICAgICAgICBvcmlnaW4sXG4gICAgICAgIFJlc3RyaWN0ZWRNZXRob2RzLmV0aF9hY2NvdW50cyxcbiAgICAgICAgQ2F2ZWF0VHlwZXMucmVzdHJpY3RSZXR1cm5lZEFjY291bnRzLFxuICAgICAgKTtcblxuICAgICAgaWYgKCFleGlzdGluZy52YWx1ZS5pbmNsdWRlcyhhY2NvdW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlbWFpbmluZ0FjY291bnRzID0gZXhpc3RpbmcudmFsdWUuZmlsdGVyKFxuICAgICAgICAoZXhpc3RpbmdBY2NvdW50KSA9PiBleGlzdGluZ0FjY291bnQgIT09IGFjY291bnQsXG4gICAgICApO1xuXG4gICAgICBpZiAocmVtYWluaW5nQWNjb3VudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHBlcm1pc3Npb25Db250cm9sbGVyLnJldm9rZVBlcm1pc3Npb24oXG4gICAgICAgICAgb3JpZ2luLFxuICAgICAgICAgIFJlc3RyaWN0ZWRNZXRob2RzLmV0aF9hY2NvdW50cyxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlcm1pc3Npb25Db250cm9sbGVyLnVwZGF0ZUNhdmVhdChcbiAgICAgICAgICBvcmlnaW4sXG4gICAgICAgICAgUmVzdHJpY3RlZE1ldGhvZHMuZXRoX2FjY291bnRzLFxuICAgICAgICAgIENhdmVhdFR5cGVzLnJlc3RyaWN0UmV0dXJuZWRBY2NvdW50cyxcbiAgICAgICAgICByZW1haW5pbmdBY2NvdW50cyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVxdWVzdEFjY291bnRzUGVybWlzc2lvbldpdGhJZDogYXN5bmMgKG9yaWdpbikgPT4ge1xuICAgICAgY29uc3QgaWQgPSBuYW5vaWQoKTtcbiAgICAgIHBlcm1pc3Npb25Db250cm9sbGVyLnJlcXVlc3RQZXJtaXNzaW9ucyhcbiAgICAgICAgeyBvcmlnaW4gfSxcbiAgICAgICAge1xuICAgICAgICAgIGV0aF9hY2NvdW50czoge30sXG4gICAgICAgIH0sXG4gICAgICAgIHsgaWQgfSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfSxcbiAgfTtcbn1cbiIsImltcG9ydCB7IENhdmVhdE11dGF0b3JPcGVyYXRpb24gfSBmcm9tICdAbWV0YW1hc2svcGVybWlzc2lvbi1jb250cm9sbGVyJztcbmltcG9ydCB7IENhdmVhdFR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9wZXJtaXNzaW9ucyc7XG5cbi8qKlxuICogRmFjdG9yaWVzIHRoYXQgY29uc3RydWN0IGNhdmVhdCBtdXRhdG9yIGZ1bmN0aW9ucyB0aGF0IGFyZSBwYXNzZWQgdG9cbiAqIFBlcm1pc3Npb25Db250cm9sbGVyLnVwZGF0ZVBlcm1pc3Npb25zQnlDYXZlYXQuXG4gKi9cbmV4cG9ydCBjb25zdCBDYXZlYXRNdXRhdG9yRmFjdG9yaWVzID0ge1xuICBbQ2F2ZWF0VHlwZXMucmVzdHJpY3RSZXR1cm5lZEFjY291bnRzXToge1xuICAgIHJlbW92ZUFjY291bnQsXG4gIH0sXG59O1xuXG4vKipcbiAqIFJlbW92ZXMgdGhlIHRhcmdldCBhY2NvdW50IGZyb20gdGhlIHZhbHVlIGFycmF5cyBvZiBhbGxcbiAqIGByZXN0cmljdFJldHVybmVkQWNjb3VudHNgIGNhdmVhdHMuIE5vLW9wcyBpZiB0aGUgdGFyZ2V0IGFjY291bnQgaXMgbm90IGluXG4gKiB0aGUgYXJyYXksIGFuZCByZXZva2VzIHRoZSBwYXJlbnQgcGVybWlzc2lvbiBpZiBpdCdzIHRoZSBvbmx5IGFjY291bnQgaW5cbiAqIHRoZSBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0QWNjb3VudCAtIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHRvIHJlbW92ZSBmcm9tXG4gKiBhbGwgYWNjb3VudHMgcGVybWlzc2lvbnMuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBleGlzdGluZ0FjY291bnRzIC0gVGhlIGFjY291bnQgYWRkcmVzcyBhcnJheSBmcm9tIHRoZVxuICogYWNjb3VudCBwZXJtaXNzaW9ucy5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQWNjb3VudCh0YXJnZXRBY2NvdW50LCBleGlzdGluZ0FjY291bnRzKSB7XG4gIGNvbnN0IG5ld0FjY291bnRzID0gZXhpc3RpbmdBY2NvdW50cy5maWx0ZXIoXG4gICAgKGFkZHJlc3MpID0+IGFkZHJlc3MgIT09IHRhcmdldEFjY291bnQsXG4gICk7XG5cbiAgaWYgKG5ld0FjY291bnRzLmxlbmd0aCA9PT0gZXhpc3RpbmdBY2NvdW50cy5sZW5ndGgpIHtcbiAgICByZXR1cm4geyBvcGVyYXRpb246IENhdmVhdE11dGF0b3JPcGVyYXRpb24ubm9vcCB9O1xuICB9IGVsc2UgaWYgKG5ld0FjY291bnRzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlcmF0aW9uOiBDYXZlYXRNdXRhdG9yT3BlcmF0aW9uLnVwZGF0ZVZhbHVlLFxuICAgICAgdmFsdWU6IG5ld0FjY291bnRzLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHsgb3BlcmF0aW9uOiBDYXZlYXRNdXRhdG9yT3BlcmF0aW9uLnJldm9rZVBlcm1pc3Npb24gfTtcbn1cbiIsImV4cG9ydCBjb25zdCBXQUxMRVRfUFJFRklYID0gJ3dhbGxldF8nO1xuXG5leHBvcnQgY29uc3QgTk9USUZJQ0FUSU9OX05BTUVTID0ge1xuICBhY2NvdW50c0NoYW5nZWQ6ICdtZXRhbWFza19hY2NvdW50c0NoYW5nZWQnLFxuICB1bmxvY2tTdGF0ZUNoYW5nZWQ6ICdtZXRhbWFza191bmxvY2tTdGF0ZUNoYW5nZWQnLFxuICBjaGFpbkNoYW5nZWQ6ICdtZXRhbWFza19jaGFpbkNoYW5nZWQnLFxufTtcblxuZXhwb3J0IGNvbnN0IExPR19JR05PUkVfTUVUSE9EUyA9IFtcbiAgJ3dhbGxldF9yZWdpc3Rlck9uYm9hcmRpbmcnLFxuICAnd2FsbGV0X3dhdGNoQXNzZXQnLFxuXTtcblxuZXhwb3J0IGNvbnN0IExPR19NRVRIT0RfVFlQRVMgPSB7XG4gIHJlc3RyaWN0ZWQ6ICdyZXN0cmljdGVkJyxcbiAgaW50ZXJuYWw6ICdpbnRlcm5hbCcsXG59O1xuXG4vKipcbiAqIFRoZSBwZXJtaXNzaW9uIGFjdGl2aXR5IGxvZyBzaXplIGxpbWl0LlxuICovXG5leHBvcnQgY29uc3QgTE9HX0xJTUlUID0gMTAwO1xuIiwiZXhwb3J0ICogZnJvbSAnLi9jYXZlYXQtbXV0YXRvcnMnO1xuZXhwb3J0ICogZnJvbSAnLi9iYWNrZ3JvdW5kLWFwaSc7XG5leHBvcnQgKiBmcm9tICcuL2VudW1zJztcbmV4cG9ydCAqIGZyb20gJy4vcGVybWlzc2lvbi1sb2cnO1xuZXhwb3J0ICogZnJvbSAnLi9zcGVjaWZpY2F0aW9ucyc7XG5leHBvcnQgKiBmcm9tICcuL3NlbGVjdG9ycyc7XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlU3RvcmUgfSBmcm9tICdAbWV0YW1hc2svb2JzLXN0b3JlJztcbmltcG9ydCB7IENhdmVhdFR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9wZXJtaXNzaW9ucyc7XG5pbXBvcnQge1xuICBMT0dfSUdOT1JFX01FVEhPRFMsXG4gIExPR19MSU1JVCxcbiAgTE9HX01FVEhPRF9UWVBFUyxcbiAgV0FMTEVUX1BSRUZJWCxcbn0gZnJvbSAnLi9lbnVtcyc7XG5cbi8qKlxuICogQ29udHJvbGxlciB3aXRoIG1pZGRsZXdhcmUgZm9yIGxvZ2dpbmcgcmVxdWVzdHMgYW5kIHJlc3BvbnNlcyB0byByZXN0cmljdGVkXG4gKiBhbmQgcGVybWlzc2lvbnMtcmVsYXRlZCBtZXRob2RzLlxuICovXG5leHBvcnQgY2xhc3MgUGVybWlzc2lvbkxvZ0NvbnRyb2xsZXIge1xuICAvKipcbiAgICogQHBhcmFtIHt7IHJlc3RyaWN0ZWRNZXRob2RzOiBTZXQ8c3RyaW5nPiwgaW5pdFN0YXRlOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB9fSBvcHRpb25zIC0gT3B0aW9ucyBiYWcuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IHJlc3RyaWN0ZWRNZXRob2RzLCBpbml0U3RhdGUgfSkge1xuICAgIHRoaXMucmVzdHJpY3RlZE1ldGhvZHMgPSByZXN0cmljdGVkTWV0aG9kcztcbiAgICB0aGlzLnN0b3JlID0gbmV3IE9ic2VydmFibGVTdG9yZSh7XG4gICAgICBwZXJtaXNzaW9uSGlzdG9yeToge30sXG4gICAgICBwZXJtaXNzaW9uQWN0aXZpdHlMb2c6IFtdLFxuICAgICAgLi4uaW5pdFN0YXRlLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcmVzdHJpY3RlZCBtZXRob2QgYWN0aXZpdHkgbG9nLlxuICAgKlxuICAgKiBAcmV0dXJucyB7QXJyYXk8b2JqZWN0Pn0gVGhlIGFjdGl2aXR5IGxvZy5cbiAgICovXG4gIGdldEFjdGl2aXR5TG9nKCkge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLmdldFN0YXRlKCkucGVybWlzc2lvbkFjdGl2aXR5TG9nO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgcmVzdHJpY3RlZCBtZXRob2QgYWN0aXZpdHkgbG9nLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PG9iamVjdD59IGxvZ3MgLSBUaGUgbmV3IGFjdGl2aXR5IGxvZyBhcnJheS5cbiAgICovXG4gIHVwZGF0ZUFjdGl2aXR5TG9nKGxvZ3MpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgcGVybWlzc2lvbkFjdGl2aXR5TG9nOiBsb2dzIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcGVybWlzc2lvbiBoaXN0b3J5IGxvZy5cbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH0gVGhlIHBlcm1pc3Npb25zIGhpc3RvcnkgbG9nLlxuICAgKi9cbiAgZ2V0SGlzdG9yeSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnBlcm1pc3Npb25IaXN0b3J5O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgcGVybWlzc2lvbiBoaXN0b3J5IGxvZy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGhpc3RvcnkgLSBUaGUgbmV3IHBlcm1pc3Npb25zIGhpc3RvcnkgbG9nIG9iamVjdC5cbiAgICovXG4gIHVwZGF0ZUhpc3RvcnkoaGlzdG9yeSkge1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyBwZXJtaXNzaW9uSGlzdG9yeTogaGlzdG9yeSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBleHBvc2VkIGFjY291bnQgaGlzdG9yeSBmb3IgdGhlIGdpdmVuIG9yaWdpbi5cbiAgICogU2V0cyB0aGUgJ2xhc3Qgc2VlbicgdGltZSB0byBEYXRlLm5vdygpIGZvciB0aGUgZ2l2ZW4gYWNjb3VudHMuXG4gICAqIERvZXMgKipub3QqKiB1cGRhdGUgdGhlICdsYXN0QXBwcm92ZWQnIHRpbWUgZm9yIHRoZSBwZXJtaXNzaW9uIGl0c2VsZi5cbiAgICogUmV0dXJucyBpZiB0aGUgYWNjb3VudHMgYXJyYXkgaXMgZW1wdHkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcmlnaW4gLSBUaGUgb3JpZ2luIHRoYXQgdGhlIGFjY291bnRzIGFyZSBleHBvc2VkIHRvLlxuICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGFjY291bnRzIC0gVGhlIGFjY291bnRzLlxuICAgKi9cbiAgdXBkYXRlQWNjb3VudHNIaXN0b3J5KG9yaWdpbiwgYWNjb3VudHMpIHtcbiAgICBpZiAoYWNjb3VudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYWNjb3VudFRvVGltZU1hcCA9IGdldEFjY291bnRUb1RpbWVNYXAoYWNjb3VudHMsIERhdGUubm93KCkpO1xuXG4gICAgdGhpcy5jb21taXROZXdIaXN0b3J5KG9yaWdpbiwge1xuICAgICAgZXRoX2FjY291bnRzOiB7XG4gICAgICAgIGFjY291bnRzOiBhY2NvdW50VG9UaW1lTWFwLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBwZXJtaXNzaW9ucyBsb2cgbWlkZGxld2FyZS4gUmVjb3JkcyBwZXJtaXNzaW9ucyBhY3Rpdml0eSBhbmQgaGlzdG9yeTpcbiAgICpcbiAgICogQWN0aXZpdHk6IHJlcXVlc3RzIGFuZCByZXNwb25zZXMgZm9yIHJlc3RyaWN0ZWQgYW5kIG1vc3Qgd2FsbGV0XyBtZXRob2RzLlxuICAgKlxuICAgKiBIaXN0b3J5OiBmb3IgZWFjaCBvcmlnaW4sIHRoZSBsYXN0IHRpbWUgYSBwZXJtaXNzaW9uIHdhcyBncmFudGVkLCBpbmNsdWRpbmdcbiAgICogd2hpY2ggYWNjb3VudHMgd2VyZSBleHBvc2VkLCBpZiBhbnkuXG4gICAqXG4gICAqIEByZXR1cm5zIHtKc29uUnBjRW5naW5lTWlkZGxld2FyZX0gVGhlIHBlcm1pc3Npb25zIGxvZyBtaWRkbGV3YXJlLlxuICAgKi9cbiAgY3JlYXRlTWlkZGxld2FyZSgpIHtcbiAgICByZXR1cm4gKHJlcSwgcmVzLCBuZXh0LCBfZW5kKSA9PiB7XG4gICAgICBsZXQgYWN0aXZpdHlFbnRyeSwgcmVxdWVzdGVkTWV0aG9kcztcbiAgICAgIGNvbnN0IHsgb3JpZ2luLCBtZXRob2QgfSA9IHJlcTtcbiAgICAgIGNvbnN0IGlzSW50ZXJuYWwgPSBtZXRob2Quc3RhcnRzV2l0aChXQUxMRVRfUFJFRklYKTtcblxuICAgICAgLy8gd2Ugb25seSBsb2cgY2VydGFpbiBtZXRob2RzXG4gICAgICBpZiAoXG4gICAgICAgICFMT0dfSUdOT1JFX01FVEhPRFMuaW5jbHVkZXMobWV0aG9kKSAmJlxuICAgICAgICAoaXNJbnRlcm5hbCB8fCB0aGlzLnJlc3RyaWN0ZWRNZXRob2RzLmhhcyhtZXRob2QpKVxuICAgICAgKSB7XG4gICAgICAgIGFjdGl2aXR5RW50cnkgPSB0aGlzLmxvZ1JlcXVlc3QocmVxLCBpc0ludGVybmFsKTtcblxuICAgICAgICBpZiAobWV0aG9kID09PSBgJHtXQUxMRVRfUFJFRklYfXJlcXVlc3RQZXJtaXNzaW9uc2ApIHtcbiAgICAgICAgICAvLyBnZXQgdGhlIGNvcnJlc3BvbmRpbmcgbWV0aG9kcyBmcm9tIHRoZSByZXF1ZXN0ZWQgcGVybWlzc2lvbnMgc29cbiAgICAgICAgICAvLyB0aGF0IHdlIGNhbiByZWNvcmQgcGVybWlzc2lvbnMgaGlzdG9yeVxuICAgICAgICAgIHJlcXVlc3RlZE1ldGhvZHMgPSB0aGlzLmdldFJlcXVlc3RlZE1ldGhvZHMocmVxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdldGhfcmVxdWVzdEFjY291bnRzJykge1xuICAgICAgICAvLyBldGhfcmVxdWVzdEFjY291bnRzIGlzIGEgc3BlY2lhbCBjYXNlOyB3ZSBuZWVkIHRvIGV4dHJhY3QgdGhlIGFjY291bnRzXG4gICAgICAgIC8vIGZyb20gaXRcbiAgICAgICAgYWN0aXZpdHlFbnRyeSA9IHRoaXMubG9nUmVxdWVzdChyZXEsIGlzSW50ZXJuYWwpO1xuICAgICAgICByZXF1ZXN0ZWRNZXRob2RzID0gWydldGhfYWNjb3VudHMnXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG5vLW9wXG4gICAgICAgIG5leHQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBjYWxsIG5leHQgd2l0aCBhIHJldHVybiBoYW5kbGVyIGZvciBjYXB0dXJpbmcgdGhlIHJlc3BvbnNlXG4gICAgICBuZXh0KChjYikgPT4ge1xuICAgICAgICBjb25zdCB0aW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5sb2dSZXNwb25zZShhY3Rpdml0eUVudHJ5LCByZXMsIHRpbWUpO1xuXG4gICAgICAgIGlmIChyZXF1ZXN0ZWRNZXRob2RzICYmICFyZXMuZXJyb3IgJiYgcmVzLnJlc3VsdCkge1xuICAgICAgICAgIC8vIGFueSBwZXJtaXNzaW9ucyBvciBhY2NvdW50cyBjaGFuZ2VzIHdpbGwgYmUgcmVjb3JkZWQgb24gdGhlIHJlc3BvbnNlLFxuICAgICAgICAgIC8vIHNvIHdlIG9ubHkgbG9nIHBlcm1pc3Npb25zIGhpc3RvcnkgaGVyZVxuICAgICAgICAgIHRoaXMubG9nUGVybWlzc2lvbnNIaXN0b3J5KFxuICAgICAgICAgICAgcmVxdWVzdGVkTWV0aG9kcyxcbiAgICAgICAgICAgIG9yaWdpbixcbiAgICAgICAgICAgIHJlcy5yZXN1bHQsXG4gICAgICAgICAgICB0aW1lLFxuICAgICAgICAgICAgbWV0aG9kID09PSAnZXRoX3JlcXVlc3RBY2NvdW50cycsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjYigpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCBjb21taXRzIGFuIGFjdGl2aXR5IGxvZyBlbnRyeSwgd2l0aG91dCByZXNwb25zZSBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcmVxdWVzdCAtIFRoZSByZXF1ZXN0IG9iamVjdC5cbiAgICogQHBhcmFtIHtib29sZWFufSBpc0ludGVybmFsIC0gV2hldGhlciB0aGUgcmVxdWVzdCBpcyBpbnRlcm5hbC5cbiAgICovXG4gIGxvZ1JlcXVlc3QocmVxdWVzdCwgaXNJbnRlcm5hbCkge1xuICAgIGNvbnN0IGFjdGl2aXR5RW50cnkgPSB7XG4gICAgICBpZDogcmVxdWVzdC5pZCxcbiAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICBtZXRob2RUeXBlOiBpc0ludGVybmFsXG4gICAgICAgID8gTE9HX01FVEhPRF9UWVBFUy5pbnRlcm5hbFxuICAgICAgICA6IExPR19NRVRIT0RfVFlQRVMucmVzdHJpY3RlZCxcbiAgICAgIG9yaWdpbjogcmVxdWVzdC5vcmlnaW4sXG4gICAgICByZXF1ZXN0VGltZTogRGF0ZS5ub3coKSxcbiAgICAgIHJlc3BvbnNlVGltZTogbnVsbCxcbiAgICAgIHN1Y2Nlc3M6IG51bGwsXG4gICAgfTtcbiAgICB0aGlzLmNvbW1pdE5ld0FjdGl2aXR5KGFjdGl2aXR5RW50cnkpO1xuICAgIHJldHVybiBhY3Rpdml0eUVudHJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgcmVzcG9uc2UgZGF0YSB0byBhbiBleGlzdGluZyBhY3Rpdml0eSBsb2cgZW50cnkuXG4gICAqIEVudHJ5IGFzc3VtZWQgYWxyZWFkeSBjb21taXR0ZWQgKGkuZS4sIGluIHRoZSBsb2cpLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZW50cnkgLSBUaGUgZW50cnkgdG8gYWRkIGEgcmVzcG9uc2UgdG8uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSAtIFRoZSByZXNwb25zZSBvYmplY3QuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lIC0gT3V0cHV0IGZyb20gRGF0ZS5ub3coKVxuICAgKi9cbiAgbG9nUmVzcG9uc2UoZW50cnksIHJlc3BvbnNlLCB0aW1lKSB7XG4gICAgaWYgKCFlbnRyeSB8fCAhcmVzcG9uc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUaGUgSlNPTi1SUEMgMi4wIHNwZWNpZmljYXRpb24gZGVmaW5lcyBcInN1Y2Nlc3NcIiBieSB0aGUgcHJlc2VuY2Ugb2ZcbiAgICAvLyBlaXRoZXIgdGhlIFwicmVzdWx0XCIgb3IgXCJlcnJvclwiIHByb3BlcnR5LiBUaGUgc3BlY2lmaWNhdGlvbiBmb3JiaWRzXG4gICAgLy8gYm90aCBwcm9wZXJ0aWVzIGZyb20gYmVpbmcgcHJlc2VudCBzaW11bHRhbmVvdXNseSwgYW5kIG91ciBKU09OLVJQQ1xuICAgIC8vIHN0YWNrIGlzIHNwZWMtY29tcGxpYW50IGF0IHRoZSB0aW1lIG9mIHdyaXRpbmcuXG4gICAgZW50cnkuc3VjY2VzcyA9IE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3BvbnNlLCAncmVzdWx0Jyk7XG4gICAgZW50cnkucmVzcG9uc2VUaW1lID0gdGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21taXQgYSBuZXcgZW50cnkgdG8gdGhlIGFjdGl2aXR5IGxvZy5cbiAgICogUmVtb3ZlcyB0aGUgb2xkZXN0IGVudHJ5IGZyb20gdGhlIGxvZyBpZiBpdCBleGNlZWRzIHRoZSBsb2cgbGltaXQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBlbnRyeSAtIFRoZSBhY3Rpdml0eSBsb2cgZW50cnkuXG4gICAqL1xuICBjb21taXROZXdBY3Rpdml0eShlbnRyeSkge1xuICAgIGNvbnN0IGxvZ3MgPSB0aGlzLmdldEFjdGl2aXR5TG9nKCk7XG5cbiAgICAvLyBhZGQgbmV3IGVudHJ5IHRvIGVuZCBvZiBsb2dcbiAgICBsb2dzLnB1c2goZW50cnkpO1xuXG4gICAgLy8gcmVtb3ZlIG9sZGVzdCBsb2cgaWYgZXhjZWVkaW5nIHNpemUgbGltaXRcbiAgICBpZiAobG9ncy5sZW5ndGggPiBMT0dfTElNSVQpIHtcbiAgICAgIGxvZ3Muc2hpZnQoKTtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZUFjdGl2aXR5TG9nKGxvZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBuZXcgcGVybWlzc2lvbnMgaGlzdG9yeSBsb2cgZW50cmllcywgaWYgYW55LCBhbmQgY29tbWl0IHRoZW0uXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gcmVxdWVzdGVkTWV0aG9kcyAtIFRoZSBtZXRob2QgbmFtZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcmVxdWVzdGVkIHBlcm1pc3Npb25zLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3JpZ2luIC0gVGhlIG9yaWdpbiBvZiB0aGUgcGVybWlzc2lvbnMgcmVxdWVzdC5cbiAgICogQHBhcmFtIHtBcnJheTxJT2NhcExkQ2FwYWJpbGl0eX0gcmVzdWx0IC0gVGhlIHBlcm1pc3Npb25zIHJlcXVlc3QgcmVzcG9uc2UucmVzdWx0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGltZSAtIFRoZSB0aW1lIG9mIHRoZSByZXF1ZXN0LCBpLmUuIERhdGUubm93KCkuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNFdGhSZXF1ZXN0QWNjb3VudHMgLSBXaGV0aGVyIHRoZSBwZXJtaXNzaW9ucyByZXF1ZXN0IHdhcyAnZXRoX3JlcXVlc3RBY2NvdW50cycuXG4gICAqL1xuICBsb2dQZXJtaXNzaW9uc0hpc3RvcnkoXG4gICAgcmVxdWVzdGVkTWV0aG9kcyxcbiAgICBvcmlnaW4sXG4gICAgcmVzdWx0LFxuICAgIHRpbWUsXG4gICAgaXNFdGhSZXF1ZXN0QWNjb3VudHMsXG4gICkge1xuICAgIGxldCBhY2NvdW50cywgbmV3RW50cmllcztcblxuICAgIGlmIChpc0V0aFJlcXVlc3RBY2NvdW50cykge1xuICAgICAgYWNjb3VudHMgPSByZXN1bHQ7XG4gICAgICBjb25zdCBhY2NvdW50VG9UaW1lTWFwID0gZ2V0QWNjb3VudFRvVGltZU1hcChhY2NvdW50cywgdGltZSk7XG5cbiAgICAgIG5ld0VudHJpZXMgPSB7XG4gICAgICAgIGV0aF9hY2NvdW50czoge1xuICAgICAgICAgIGFjY291bnRzOiBhY2NvdW50VG9UaW1lTWFwLFxuICAgICAgICAgIGxhc3RBcHByb3ZlZDogdGltZSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlY29yZHMgbmV3IFwibGFzdEFwcHJvdmVkXCIgdGltZXMgZm9yIHRoZSBncmFudGVkIHBlcm1pc3Npb25zLCBpZiBhbnkuXG4gICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciBldGhfYWNjb3VudHMsIGluIG9yZGVyIHRvIHJlY29yZCB0aGUgdGltZSB0aGVcbiAgICAgIC8vIGFjY291bnRzIHdlcmUgbGFzdCBzZWVuIG9yIGFwcHJvdmVkIGJ5IHRoZSBvcmlnaW4uXG4gICAgICBuZXdFbnRyaWVzID0gcmVzdWx0XG4gICAgICAgIC5tYXAoKHBlcm0pID0+IHtcbiAgICAgICAgICBpZiAocGVybS5wYXJlbnRDYXBhYmlsaXR5ID09PSAnZXRoX2FjY291bnRzJykge1xuICAgICAgICAgICAgYWNjb3VudHMgPSB0aGlzLmdldEFjY291bnRzRnJvbVBlcm1pc3Npb24ocGVybSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHBlcm0ucGFyZW50Q2FwYWJpbGl0eTtcbiAgICAgICAgfSlcbiAgICAgICAgLnJlZHVjZSgoYWNjLCBtZXRob2QpID0+IHtcbiAgICAgICAgICAvLyBhbGwgYXBwcm92ZWQgcGVybWlzc2lvbnMgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzcG9uc2UsXG4gICAgICAgICAgLy8gbm90IGp1c3QgdGhlIG5ld2x5IHJlcXVlc3RlZCBvbmVzXG4gICAgICAgICAgaWYgKHJlcXVlc3RlZE1ldGhvZHMuaW5jbHVkZXMobWV0aG9kKSkge1xuICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ2V0aF9hY2NvdW50cycpIHtcbiAgICAgICAgICAgICAgY29uc3QgYWNjb3VudFRvVGltZU1hcCA9IGdldEFjY291bnRUb1RpbWVNYXAoYWNjb3VudHMsIHRpbWUpO1xuXG4gICAgICAgICAgICAgIGFjY1ttZXRob2RdID0ge1xuICAgICAgICAgICAgICAgIGxhc3RBcHByb3ZlZDogdGltZSxcbiAgICAgICAgICAgICAgICBhY2NvdW50czogYWNjb3VudFRvVGltZU1hcCxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFjY1ttZXRob2RdID0geyBsYXN0QXBwcm92ZWQ6IHRpbWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7fSk7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKG5ld0VudHJpZXMpLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuY29tbWl0TmV3SGlzdG9yeShvcmlnaW4sIG5ld0VudHJpZXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb21taXQgbmV3IGVudHJpZXMgdG8gdGhlIHBlcm1pc3Npb25zIGhpc3RvcnkgbG9nLlxuICAgKiBNZXJnZXMgdGhlIGhpc3RvcnkgZm9yIHRoZSBnaXZlbiBvcmlnaW4sIG92ZXJ3cml0aW5nIGV4aXN0aW5nIGVudHJpZXNcbiAgICogd2l0aCB0aGUgc2FtZSBrZXkgKHBlcm1pc3Npb24gbmFtZSkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcmlnaW4gLSBUaGUgcmVxdWVzdGluZyBvcmlnaW4uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXdFbnRyaWVzIC0gVGhlIG5ldyBlbnRyaWVzIHRvIGNvbW1pdC5cbiAgICovXG4gIGNvbW1pdE5ld0hpc3Rvcnkob3JpZ2luLCBuZXdFbnRyaWVzKSB7XG4gICAgLy8gYSBzaW1wbGUgbWVyZ2UgdXBkYXRlcyBtb3N0IHBlcm1pc3Npb25zXG4gICAgY29uc3QgaGlzdG9yeSA9IHRoaXMuZ2V0SGlzdG9yeSgpO1xuICAgIGNvbnN0IG5ld09yaWdpbkhpc3RvcnkgPSB7XG4gICAgICAuLi5oaXN0b3J5W29yaWdpbl0sXG4gICAgICAuLi5uZXdFbnRyaWVzLFxuICAgIH07XG5cbiAgICAvLyBldGhfYWNjb3VudHMgcmVxdWlyZXMgc3BlY2lhbCBoYW5kbGluZywgYmVjYXVzZSBvZiBpbmZvcm1hdGlvblxuICAgIC8vIHdlIHN0b3JlIGFib3V0IHRoZSBhY2NvdW50c1xuICAgIGNvbnN0IGV4aXN0aW5nRXRoQWNjb3VudHNFbnRyeSA9XG4gICAgICBoaXN0b3J5W29yaWdpbl0gJiYgaGlzdG9yeVtvcmlnaW5dLmV0aF9hY2NvdW50cztcbiAgICBjb25zdCBuZXdFdGhBY2NvdW50c0VudHJ5ID0gbmV3RW50cmllcy5ldGhfYWNjb3VudHM7XG5cbiAgICBpZiAoZXhpc3RpbmdFdGhBY2NvdW50c0VudHJ5ICYmIG5ld0V0aEFjY291bnRzRW50cnkpIHtcbiAgICAgIC8vIHdlIG1heSBpbnRlbmQgdG8gdXBkYXRlIGp1c3QgdGhlIGFjY291bnRzLCBub3QgdGhlIHBlcm1pc3Npb25cbiAgICAgIC8vIGl0c2VsZlxuICAgICAgY29uc3QgbGFzdEFwcHJvdmVkID1cbiAgICAgICAgbmV3RXRoQWNjb3VudHNFbnRyeS5sYXN0QXBwcm92ZWQgfHxcbiAgICAgICAgZXhpc3RpbmdFdGhBY2NvdW50c0VudHJ5Lmxhc3RBcHByb3ZlZDtcblxuICAgICAgLy8gbWVyZ2Ugb2xkIGFuZCBuZXcgZXRoX2FjY291bnRzIGhpc3RvcnkgZW50cmllc1xuICAgICAgbmV3T3JpZ2luSGlzdG9yeS5ldGhfYWNjb3VudHMgPSB7XG4gICAgICAgIGxhc3RBcHByb3ZlZCxcbiAgICAgICAgYWNjb3VudHM6IHtcbiAgICAgICAgICAuLi5leGlzdGluZ0V0aEFjY291bnRzRW50cnkuYWNjb3VudHMsXG4gICAgICAgICAgLi4ubmV3RXRoQWNjb3VudHNFbnRyeS5hY2NvdW50cyxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaGlzdG9yeVtvcmlnaW5dID0gbmV3T3JpZ2luSGlzdG9yeTtcblxuICAgIHRoaXMudXBkYXRlSGlzdG9yeShoaXN0b3J5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHJlcXVlc3RlZCBtZXRob2RzIGZyb20gYSBwZXJtaXNzaW9ucyByZXF1ZXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcmVxdWVzdCAtIFRoZSByZXF1ZXN0IG9iamVjdC5cbiAgICogQHJldHVybnMge0FycmF5PHN0cmluZz59IFRoZSBuYW1lcyBvZiB0aGUgcmVxdWVzdGVkIHBlcm1pc3Npb25zLlxuICAgKi9cbiAgZ2V0UmVxdWVzdGVkTWV0aG9kcyhyZXF1ZXN0KSB7XG4gICAgaWYgKFxuICAgICAgIXJlcXVlc3QucGFyYW1zIHx8XG4gICAgICAhcmVxdWVzdC5wYXJhbXNbMF0gfHxcbiAgICAgIHR5cGVvZiByZXF1ZXN0LnBhcmFtc1swXSAhPT0gJ29iamVjdCcgfHxcbiAgICAgIEFycmF5LmlzQXJyYXkocmVxdWVzdC5wYXJhbXNbMF0pXG4gICAgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHJlcXVlc3QucGFyYW1zWzBdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHBlcm1pdHRlZCBhY2NvdW50cyBmcm9tIGFuIGV0aF9hY2NvdW50cyBwZXJtaXNzaW9ucyBvYmplY3QuXG4gICAqIFJldHVybnMgYW4gZW1wdHkgYXJyYXkgaWYgdGhlIHBlcm1pc3Npb24gaXMgbm90IGV0aF9hY2NvdW50cy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHBlcm0gLSBUaGUgcGVybWlzc2lvbnMgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXk8c3RyaW5nPn0gVGhlIHBlcm1pdHRlZCBhY2NvdW50cy5cbiAgICovXG4gIGdldEFjY291bnRzRnJvbVBlcm1pc3Npb24ocGVybSkge1xuICAgIGlmIChwZXJtLnBhcmVudENhcGFiaWxpdHkgIT09ICdldGhfYWNjb3VudHMnIHx8ICFwZXJtLmNhdmVhdHMpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBhY2NvdW50cyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IGNhdmVhdCBvZiBwZXJtLmNhdmVhdHMpIHtcbiAgICAgIGlmIChcbiAgICAgICAgY2F2ZWF0LnR5cGUgPT09IENhdmVhdFR5cGVzLnJlc3RyaWN0UmV0dXJuZWRBY2NvdW50cyAmJlxuICAgICAgICBBcnJheS5pc0FycmF5KGNhdmVhdC52YWx1ZSlcbiAgICAgICkge1xuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIGNhdmVhdC52YWx1ZSkge1xuICAgICAgICAgIGFjY291bnRzLmFkZCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFsuLi5hY2NvdW50c107XG4gIH1cbn1cblxuLy8gaGVscGVyIGZ1bmN0aW9uc1xuXG4vKipcbiAqIEdldCBhIG1hcCBmcm9tIGFjY291bnQgYWRkcmVzc2VzIHRvIHRoZSBnaXZlbiB0aW1lLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gYWNjb3VudHMgLSBBbiBhcnJheSBvZiBhZGRyZXNzZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZSAtIEEgdGltZSwgZS5nLiBEYXRlLm5vdygpLlxuICogQHJldHVybnMge29iamVjdH0gQSBzdHJpbmc6bnVtYmVyIG1hcCBvZiBhZGRyZXNzZXMgdG8gdGltZS5cbiAqL1xuZnVuY3Rpb24gZ2V0QWNjb3VudFRvVGltZU1hcChhY2NvdW50cywgdGltZSkge1xuICByZXR1cm4gYWNjb3VudHMucmVkdWNlKChhY2MsIGFjY291bnQpID0+ICh7IC4uLmFjYywgW2FjY291bnRdOiB0aW1lIH0pLCB7fSk7XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gJ3Jlc2VsZWN0JztcbmltcG9ydCB7IENhdmVhdFR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9wZXJtaXNzaW9ucyc7XG5cbi8qKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIHNlbGVjdG9ycyBmb3IgUGVybWlzc2lvbkNvbnRyb2xsZXIgc2VsZWN0b3IgZXZlbnRcbiAqIHN1YnNjcmlwdGlvbnMsIHVzZWQgdG8gZGV0ZWN0IHdoZW5ldmVyIGEgc3ViamVjdCdzIGFjY291bnRzIGNoYW5nZSBzbyB0aGF0XG4gKiB3ZSBjYW4gbm90aWZ5IHRoZSBzdWJqZWN0IHZpYSB0aGUgYGFjY291bnRzQ2hhbmdlZGAgcHJvdmlkZXIgZXZlbnQuXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIFJlY29yZDxzdHJpbmcsIHVua25vd24+Pn0gc3RhdGUgLSBUaGVcbiAqIFBlcm1pc3Npb25Db250cm9sbGVyIHN0YXRlLlxuICogQHJldHVybnMge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSBUaGUgUGVybWlzc2lvbkNvbnRyb2xsZXIgc3ViamVjdHMuXG4gKi9cbmNvbnN0IGdldFN1YmplY3RzID0gKHN0YXRlKSA9PiBzdGF0ZS5zdWJqZWN0cztcblxuLyoqXG4gKiBHZXQgdGhlIHBlcm1pdHRlZCBhY2NvdW50cyBmb3IgZWFjaCBzdWJqZWN0LCBrZXllZCBieSBvcmlnaW4uXG4gKiBUaGUgdmFsdWVzIG9mIHRoZSByZXR1cm5lZCBtYXAgYXJlIGltbXV0YWJsZSB2YWx1ZXMgZnJvbSB0aGVcbiAqIFBlcm1pc3Npb25Db250cm9sbGVyIHN0YXRlLlxuICpcbiAqIEByZXR1cm5zIHtNYXA8c3RyaW5nLCBzdHJpbmdbXT59IFRoZSBjdXJyZW50IG9yaWdpbjphY2NvdW50c1tdIG1hcC5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFBlcm1pdHRlZEFjY291bnRzQnlPcmlnaW4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0U3ViamVjdHMsXG4gIChzdWJqZWN0cykgPT4ge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHN1YmplY3RzKS5yZWR1Y2UoKG9yaWdpblRvQWNjb3VudHNNYXAsIHN1YmplY3QpID0+IHtcbiAgICAgIGNvbnN0IGNhdmVhdCA9IHN1YmplY3QucGVybWlzc2lvbnM/LmV0aF9hY2NvdW50cz8uY2F2ZWF0cy5maW5kKFxuICAgICAgICAoeyB0eXBlIH0pID0+IHR5cGUgPT09IENhdmVhdFR5cGVzLnJlc3RyaWN0UmV0dXJuZWRBY2NvdW50cyxcbiAgICAgICk7XG5cbiAgICAgIGlmIChjYXZlYXQpIHtcbiAgICAgICAgb3JpZ2luVG9BY2NvdW50c01hcC5zZXQoc3ViamVjdC5vcmlnaW4sIGNhdmVhdC52YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JpZ2luVG9BY2NvdW50c01hcDtcbiAgICB9LCBuZXcgTWFwKCkpO1xuICB9LFxuKTtcblxuLyoqXG4gKiBHaXZlbiB0aGUgY3VycmVudCBhbmQgcHJldmlvdXMgZXhwb3NlZCBhY2NvdW50cyBmb3IgZWFjaCBQZXJtaXNzaW9uQ29udHJvbGxlclxuICogc3ViamVjdCwgcmV0dXJucyBhIG5ldyBtYXAgY29udGFpbmluZyBhbGwgYWNjb3VudHMgdGhhdCBoYXZlIGNoYW5nZWQuXG4gKiBUaGUgdmFsdWVzIG9mIGVhY2ggbWFwIG11c3QgYmUgaW1tdXRhYmxlIHZhbHVlcyBkaXJlY3RseSBmcm9tIHRoZVxuICogUGVybWlzc2lvbkNvbnRyb2xsZXIgc3RhdGUsIG9yIGFuIGVtcHR5IGFycmF5IGluc3RhbnRpYXRlZCBpbiB0aGlzXG4gKiBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge01hcDxzdHJpbmcsIHN0cmluZ1tdPn0gbmV3QWNjb3VudHNNYXAgLSBUaGUgbmV3IG9yaWdpbjphY2NvdW50c1tdIG1hcC5cbiAqIEBwYXJhbSB7TWFwPHN0cmluZywgc3RyaW5nW10+fSBbcHJldmlvdXNBY2NvdW50c01hcF0gLSBUaGUgcHJldmlvdXMgb3JpZ2luOmFjY291bnRzW10gbWFwLlxuICogQHJldHVybnMge01hcDxzdHJpbmcsIHN0cmluZ1tdPn0gVGhlIG9yaWdpbjphY2NvdW50c1tdIG1hcCBvZiBjaGFuZ2VkIGFjY291bnRzLlxuICovXG5leHBvcnQgY29uc3QgZ2V0Q2hhbmdlZEFjY291bnRzID0gKG5ld0FjY291bnRzTWFwLCBwcmV2aW91c0FjY291bnRzTWFwKSA9PiB7XG4gIGlmIChwcmV2aW91c0FjY291bnRzTWFwID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbmV3QWNjb3VudHNNYXA7XG4gIH1cblxuICBjb25zdCBjaGFuZ2VkQWNjb3VudHMgPSBuZXcgTWFwKCk7XG4gIGlmIChuZXdBY2NvdW50c01hcCA9PT0gcHJldmlvdXNBY2NvdW50c01hcCkge1xuICAgIHJldHVybiBjaGFuZ2VkQWNjb3VudHM7XG4gIH1cblxuICBjb25zdCBuZXdPcmlnaW5zID0gbmV3IFNldChbLi4ubmV3QWNjb3VudHNNYXAua2V5cygpXSk7XG5cbiAgZm9yIChjb25zdCBvcmlnaW4gb2YgcHJldmlvdXNBY2NvdW50c01hcC5rZXlzKCkpIHtcbiAgICBjb25zdCBuZXdBY2NvdW50cyA9IG5ld0FjY291bnRzTWFwLmdldChvcmlnaW4pID8/IFtdO1xuXG4gICAgLy8gVGhlIHZhbHVlcyBvZiB0aGVzZSBtYXBzIGFyZSByZWZlcmVuY2VzIHRvIGltbXV0YWJsZSB2YWx1ZXMsIHdoaWNoIGlzIHdoeVxuICAgIC8vIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrIGlzIGVub3VnaCBmb3IgZGlmZmluZy4gVGhlIHZhbHVlcyBhcmUgZWl0aGVyIGZyb21cbiAgICAvLyBQZXJtaXNzaW9uQ29udHJvbGxlciBzdGF0ZSwgb3IgYW4gZW1wdHkgYXJyYXkgaW5pdGlhbGl6ZWQgaW4gdGhlIHByZXZpb3VzXG4gICAgLy8gY2FsbCB0byB0aGlzIGZ1bmN0aW9uLiBgbmV3QWNjb3VudHNNYXBgIHdpbGwgbmV2ZXIgY29udGFpbiBhbnkgZW1wdHlcbiAgICAvLyBhcnJheXMuXG4gICAgaWYgKHByZXZpb3VzQWNjb3VudHNNYXAuZ2V0KG9yaWdpbikgIT09IG5ld0FjY291bnRzKSB7XG4gICAgICBjaGFuZ2VkQWNjb3VudHMuc2V0KG9yaWdpbiwgbmV3QWNjb3VudHMpO1xuICAgIH1cblxuICAgIG5ld09yaWdpbnMuZGVsZXRlKG9yaWdpbik7XG4gIH1cblxuICAvLyBCeSBub3csIG5ld09yaWdpbnMgaXMgZWl0aGVyIGVtcHR5IG9yIGNvbnRhaW5zIHNvbWUgbnVtYmVyIG9mIHByZXZpb3VzbHlcbiAgLy8gdW5lbmNvdW50ZXJlZCBvcmlnaW5zLCBhbmQgYWxsIG9mIHRoZWlyIGFjY291bnRzIGhhdmUgXCJjaGFuZ2VkXCIuXG4gIGZvciAoY29uc3Qgb3JpZ2luIG9mIG5ld09yaWdpbnMua2V5cygpKSB7XG4gICAgY2hhbmdlZEFjY291bnRzLnNldChvcmlnaW4sIG5ld0FjY291bnRzTWFwLmdldChvcmlnaW4pKTtcbiAgfVxuICByZXR1cm4gY2hhbmdlZEFjY291bnRzO1xufTtcbiIsImltcG9ydCB7XG4gIGNvbnN0cnVjdFBlcm1pc3Npb24sXG4gIFBlcm1pc3Npb25UeXBlLFxufSBmcm9tICdAbWV0YW1hc2svcGVybWlzc2lvbi1jb250cm9sbGVyJztcbmltcG9ydCB7XG4gIENhdmVhdFR5cGVzLFxuICBSZXN0cmljdGVkTWV0aG9kcyxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9wZXJtaXNzaW9ucyc7XG5cbi8qKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBzcGVjaWZpY2F0aW9ucyBvZiB0aGUgcGVybWlzc2lvbnMgYW5kIGNhdmVhdHNcbiAqIHRoYXQgYXJlIHJlY29nbml6ZWQgYnkgb3VyIHBlcm1pc3Npb24gc3lzdGVtLiBTZWUgdGhlIFBlcm1pc3Npb25Db250cm9sbGVyXG4gKiBSRUFETUUgaW4gQG1ldGFtYXNrL2NvbnRyb2xsZXJzIGZvciBkZXRhaWxzLlxuICovXG5cbi8qKlxuICogVGhlIFwia2V5c1wiIG9mIGFsbCBvZiBwZXJtaXNzaW9ucyByZWNvZ25pemVkIGJ5IHRoZSBQZXJtaXNzaW9uQ29udHJvbGxlci5cbiAqIFBlcm1pc3Npb24ga2V5cyBhbmQgbmFtZXMgaGF2ZSBkaXN0aW5jdCBtZWFuaW5ncyBpbiB0aGUgcGVybWlzc2lvbiBzeXN0ZW0uXG4gKi9cbmNvbnN0IFBlcm1pc3Npb25LZXlzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIC4uLlJlc3RyaWN0ZWRNZXRob2RzLFxufSk7XG5cbi8qKlxuICogRmFjdG9yeSBmdW5jdGlvbnMgZm9yIGFsbCBjYXZlYXQgdHlwZXMgcmVjb2duaXplZCBieSB0aGVcbiAqIFBlcm1pc3Npb25Db250cm9sbGVyLlxuICovXG5jb25zdCBDYXZlYXRGYWN0b3JpZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgW0NhdmVhdFR5cGVzLnJlc3RyaWN0UmV0dXJuZWRBY2NvdW50c106IChhY2NvdW50cykgPT4ge1xuICAgIHJldHVybiB7IHR5cGU6IENhdmVhdFR5cGVzLnJlc3RyaWN0UmV0dXJuZWRBY2NvdW50cywgdmFsdWU6IGFjY291bnRzIH07XG4gIH0sXG59KTtcblxuLyoqXG4gKiBBIFByZWZlcmVuY2VzQ29udHJvbGxlciBpZGVudGl0eSBvYmplY3QuXG4gKlxuICogQHR5cGVkZWYge29iamVjdH0gSWRlbnRpdHlcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhZGRyZXNzIC0gVGhlIGFkZHJlc3Mgb2YgdGhlIGlkZW50aXR5LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgaWRlbnRpdHkuXG4gKiBAcHJvcGVydHkge251bWJlcn0gW2xhc3RTZWxlY3RlZF0gLSBVbml4IHRpbWVzdGFtcCBvZiB3aGVuIHRoZSBpZGVudGl0eSB3YXNcbiAqIGxhc3Qgc2VsZWN0ZWQgaW4gdGhlIFVJLlxuICovXG5cbi8qKlxuICogR2V0cyB0aGUgc3BlY2lmaWNhdGlvbnMgZm9yIGFsbCBjYXZlYXRzIHRoYXQgd2lsbCBiZSByZWNvZ25pemVkIGJ5IHRoZVxuICogUGVybWlzc2lvbkNvbnRyb2xsZXIuXG4gKlxuICogQHBhcmFtIHt7XG4gKiAgIGdldElkZW50aXRpZXM6ICgpID0+IFJlY29yZDxzdHJpbmcsIElkZW50aXR5PixcbiAqIH19IG9wdGlvbnMgLSBPcHRpb25zIGJhZy5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldENhdmVhdFNwZWNpZmljYXRpb25zID0gKHsgZ2V0SWRlbnRpdGllcyB9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgW0NhdmVhdFR5cGVzLnJlc3RyaWN0UmV0dXJuZWRBY2NvdW50c106IHtcbiAgICAgIHR5cGU6IENhdmVhdFR5cGVzLnJlc3RyaWN0UmV0dXJuZWRBY2NvdW50cyxcblxuICAgICAgZGVjb3JhdG9yOiAobWV0aG9kLCBjYXZlYXQpID0+IHtcbiAgICAgICAgcmV0dXJuIGFzeW5jIChhcmdzKSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbWV0aG9kKGFyZ3MpO1xuICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgICAgIC5maWx0ZXIoKGFjY291bnQpID0+IGNhdmVhdC52YWx1ZS5pbmNsdWRlcyhhY2NvdW50KSlcbiAgICAgICAgICAgIC5zbGljZSgwLCAxKTtcbiAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIHZhbGlkYXRvcjogKGNhdmVhdCwgX29yaWdpbiwgX3RhcmdldCkgPT5cbiAgICAgICAgdmFsaWRhdGVDYXZlYXRBY2NvdW50cyhjYXZlYXQudmFsdWUsIGdldElkZW50aXRpZXMpLFxuICAgIH0sXG5cbiAgfTtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgc3BlY2lmaWNhdGlvbnMgZm9yIGFsbCBwZXJtaXNzaW9ucyB0aGF0IHdpbGwgYmUgcmVjb2duaXplZCBieSB0aGVcbiAqIFBlcm1pc3Npb25Db250cm9sbGVyLlxuICpcbiAqIEBwYXJhbSB7e1xuICogICBnZXRBbGxBY2NvdW50czogKCkgPT4gUHJvbWlzZTxzdHJpbmdbXT4sXG4gKiAgIGdldElkZW50aXRpZXM6ICgpID0+IFJlY29yZDxzdHJpbmcsIElkZW50aXR5PixcbiAqIH19IG9wdGlvbnMgLSBPcHRpb25zIGJhZy5cbiAqIEBwYXJhbSBvcHRpb25zLmdldEFsbEFjY291bnRzIC0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYWxsIEV0aGVyZXVtIGFjY291bnRzXG4gKiBpbiB0aGUgY3VycmVudCBNZXRhTWFzayBpbnN0YW5jZS5cbiAqIEBwYXJhbSBvcHRpb25zLmdldElkZW50aXRpZXMgLSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAqIGBQcmVmZXJlbmNlc0NvbnRyb2xsZXJgIGlkZW50aXR5IG9iamVjdHMgZm9yIGFsbCBFdGhlcmV1bSBhY2NvdW50cyBpbiB0aGVcbiAqIEBwYXJhbSBvcHRpb25zLmNhcHR1cmVLZXlyaW5nVHlwZXNXaXRoTWlzc2luZ0lkZW50aXRpZXMgLSBBIGZ1bmN0aW9uIHRoYXRcbiAqIGNhcHR1cmVzIGV4dHJhIGVycm9yIGluZm9ybWF0aW9uIGFib3V0IHRoZSBcIk1pc3NpbmcgaWRlbnRpdHkgZm9yIGFkZHJlc3NcIlxuICogZXJyb3IuXG4gKiBjdXJyZW50IE1ldGFNYXNrIGluc3RhbmNlLlxuICovXG5leHBvcnQgY29uc3QgZ2V0UGVybWlzc2lvblNwZWNpZmljYXRpb25zID0gKHtcbiAgZ2V0QWxsQWNjb3VudHMsXG4gIGdldElkZW50aXRpZXMsXG4gIGNhcHR1cmVLZXlyaW5nVHlwZXNXaXRoTWlzc2luZ0lkZW50aXRpZXMsXG59KSA9PiB7XG4gIHJldHVybiB7XG4gICAgW1Blcm1pc3Npb25LZXlzLmV0aF9hY2NvdW50c106IHtcbiAgICAgIHBlcm1pc3Npb25UeXBlOiBQZXJtaXNzaW9uVHlwZS5SZXN0cmljdGVkTWV0aG9kLFxuICAgICAgdGFyZ2V0S2V5OiBQZXJtaXNzaW9uS2V5cy5ldGhfYWNjb3VudHMsXG4gICAgICBhbGxvd2VkQ2F2ZWF0czogW0NhdmVhdFR5cGVzLnJlc3RyaWN0UmV0dXJuZWRBY2NvdW50c10sXG5cbiAgICAgIGZhY3Rvcnk6IChwZXJtaXNzaW9uT3B0aW9ucywgcmVxdWVzdERhdGEpID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGVybWlzc2lvbk9wdGlvbnMuY2F2ZWF0cykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgJHtQZXJtaXNzaW9uS2V5cy5ldGhfYWNjb3VudHN9IGVycm9yOiBSZWNlaXZlZCB1bmV4cGVjdGVkIGNhdmVhdHMuIEFueSBwZXJtaXR0ZWQgY2F2ZWF0cyB3aWxsIGJlIGFkZGVkIGF1dG9tYXRpY2FsbHkuYCxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhpcyB2YWx1ZSB3aWxsIGJlIGZ1cnRoZXIgdmFsaWRhdGVkIGFzIHBhcnQgb2YgdGhlIGNhdmVhdC5cbiAgICAgICAgaWYgKCFyZXF1ZXN0RGF0YS5hcHByb3ZlZEFjY291bnRzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYCR7UGVybWlzc2lvbktleXMuZXRoX2FjY291bnRzfSBlcnJvcjogTm8gYXBwcm92ZWQgYWNjb3VudHMgc3BlY2lmaWVkLmAsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RQZXJtaXNzaW9uKHtcbiAgICAgICAgICAuLi5wZXJtaXNzaW9uT3B0aW9ucyxcbiAgICAgICAgICBjYXZlYXRzOiBbXG4gICAgICAgICAgICBDYXZlYXRGYWN0b3JpZXNbQ2F2ZWF0VHlwZXMucmVzdHJpY3RSZXR1cm5lZEFjY291bnRzXShcbiAgICAgICAgICAgICAgcmVxdWVzdERhdGEuYXBwcm92ZWRBY2NvdW50cyxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICBtZXRob2RJbXBsZW1lbnRhdGlvbjogYXN5bmMgKF9hcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgZ2V0QWxsQWNjb3VudHMoKTtcbiAgICAgICAgY29uc3QgaWRlbnRpdGllcyA9IGdldElkZW50aXRpZXMoKTtcblxuICAgICAgICByZXR1cm4gYWNjb3VudHMuc29ydCgoZmlyc3RBZGRyZXNzLCBzZWNvbmRBZGRyZXNzKSA9PiB7XG4gICAgICAgICAgaWYgKCFpZGVudGl0aWVzW2ZpcnN0QWRkcmVzc10pIHtcbiAgICAgICAgICAgIGNhcHR1cmVLZXlyaW5nVHlwZXNXaXRoTWlzc2luZ0lkZW50aXRpZXMoaWRlbnRpdGllcywgYWNjb3VudHMpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGlkZW50aXR5IGZvciBhZGRyZXNzOiBcIiR7Zmlyc3RBZGRyZXNzfVwiLmApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWlkZW50aXRpZXNbc2Vjb25kQWRkcmVzc10pIHtcbiAgICAgICAgICAgIGNhcHR1cmVLZXlyaW5nVHlwZXNXaXRoTWlzc2luZ0lkZW50aXRpZXMoaWRlbnRpdGllcywgYWNjb3VudHMpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgTWlzc2luZyBpZGVudGl0eSBmb3IgYWRkcmVzczogXCIke3NlY29uZEFkZHJlc3N9XCIuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGlkZW50aXRpZXNbZmlyc3RBZGRyZXNzXS5sYXN0U2VsZWN0ZWQgPT09XG4gICAgICAgICAgICBpZGVudGl0aWVzW3NlY29uZEFkZHJlc3NdLmxhc3RTZWxlY3RlZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSBlbHNlIGlmIChpZGVudGl0aWVzW2ZpcnN0QWRkcmVzc10ubGFzdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaWRlbnRpdGllc1tzZWNvbmRBZGRyZXNzXS5sYXN0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpZGVudGl0aWVzW3NlY29uZEFkZHJlc3NdLmxhc3RTZWxlY3RlZCAtXG4gICAgICAgICAgICBpZGVudGl0aWVzW2ZpcnN0QWRkcmVzc10ubGFzdFNlbGVjdGVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICB2YWxpZGF0b3I6IChwZXJtaXNzaW9uLCBfb3JpZ2luLCBfdGFyZ2V0KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgY2F2ZWF0cyB9ID0gcGVybWlzc2lvbjtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFjYXZlYXRzIHx8XG4gICAgICAgICAgY2F2ZWF0cy5sZW5ndGggIT09IDEgfHxcbiAgICAgICAgICBjYXZlYXRzWzBdLnR5cGUgIT09IENhdmVhdFR5cGVzLnJlc3RyaWN0UmV0dXJuZWRBY2NvdW50c1xuICAgICAgICApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgJHtQZXJtaXNzaW9uS2V5cy5ldGhfYWNjb3VudHN9IGVycm9yOiBJbnZhbGlkIGNhdmVhdHMuIFRoZXJlIG11c3QgYmUgYSBzaW5nbGUgY2F2ZWF0IG9mIHR5cGUgXCIke0NhdmVhdFR5cGVzLnJlc3RyaWN0UmV0dXJuZWRBY2NvdW50c31cIi5gLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbn07XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoZSBhY2NvdW50cyBhc3NvY2lhdGVkIHdpdGggYSBjYXZlYXQuIEluIGVzc2VuY2UsIGVuc3VyZXMgdGhhdFxuICogdGhlIGFjY291bnRzIHZhbHVlIGlzIGFuIGFycmF5IG9mIG5vbi1lbXB0eSBzdHJpbmdzLCBhbmQgdGhhdCBlYWNoIHN0cmluZ1xuICogY29ycmVzcG9uZHMgdG8gYSBQcmVmZXJlbmNlc0NvbnRyb2xsZXIgaWRlbnRpdHkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gYWNjb3VudHMgLSBUaGUgYWNjb3VudHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBjYXZlYXQuXG4gKiBAcGFyYW0geygpID0+IFJlY29yZDxzdHJpbmcsIElkZW50aXR5Pn0gZ2V0SWRlbnRpdGllcyAtIEdldHMgYWxsXG4gKiBQcmVmZXJlbmNlc0NvbnRyb2xsZXIgaWRlbnRpdGllcy5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVDYXZlYXRBY2NvdW50cyhhY2NvdW50cywgZ2V0SWRlbnRpdGllcykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYWNjb3VudHMpIHx8IGFjY291bnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGAke1Blcm1pc3Npb25LZXlzLmV0aF9hY2NvdW50c30gZXJyb3I6IEV4cGVjdGVkIG5vbi1lbXB0eSBhcnJheSBvZiBFdGhlcmV1bSBhZGRyZXNzZXMuYCxcbiAgICApO1xuICB9XG5cbiAgY29uc3QgaWRlbnRpdGllcyA9IGdldElkZW50aXRpZXMoKTtcbiAgYWNjb3VudHMuZm9yRWFjaCgoYWRkcmVzcykgPT4ge1xuICAgIGlmICghYWRkcmVzcyB8fCB0eXBlb2YgYWRkcmVzcyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYCR7UGVybWlzc2lvbktleXMuZXRoX2FjY291bnRzfSBlcnJvcjogRXhwZWN0ZWQgYW4gYXJyYXkgb2YgRXRoZXJldW0gYWRkcmVzc2VzLiBSZWNlaXZlZDogXCIke2FkZHJlc3N9XCIuYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpZGVudGl0aWVzW2FkZHJlc3NdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGAke1Blcm1pc3Npb25LZXlzLmV0aF9hY2NvdW50c30gZXJyb3I6IFJlY2VpdmVkIHVucmVjb2duaXplZCBhZGRyZXNzOiBcIiR7YWRkcmVzc31cIi5gLFxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEFsbCB1bnJlc3RyaWN0ZWQgbWV0aG9kcyByZWNvZ25pemVkIGJ5IHRoZSBQZXJtaXNzaW9uQ29udHJvbGxlci5cbiAqIFVucmVzdHJpY3RlZCBtZXRob2RzIGFyZSBpZ25vcmVkIGJ5IHRoZSBwZXJtaXNzaW9uIHN5c3RlbSwgYnV0IGV2ZXJ5XG4gKiBKU09OLVJQQyByZXF1ZXN0IHNlZW4gYnkgdGhlIHBlcm1pc3Npb24gc3lzdGVtIG11c3QgY29ycmVzcG9uZCB0byBhXG4gKiByZXN0cmljdGVkIG9yIHVucmVzdHJpY3RlZCBtZXRob2QsIG9yIHRoZSByZXF1ZXN0IHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCBhXG4gKiBcIm1ldGhvZCBub3QgZm91bmRcIiBlcnJvci5cbiAqL1xuZXhwb3J0IGNvbnN0IHVucmVzdHJpY3RlZE1ldGhvZHMgPSBPYmplY3QuZnJlZXplKFtcbiAgJ2V0aF9ibG9ja051bWJlcicsXG4gICdldGhfY2FsbCcsXG4gICdldGhfY2hhaW5JZCcsXG4gICdldGhfY29pbmJhc2UnLFxuICAnZXRoX2RlY3J5cHQnLFxuICAnZXRoX2VzdGltYXRlR2FzJyxcbiAgJ2V0aF9mZWVIaXN0b3J5JyxcbiAgJ2V0aF9nYXNQcmljZScsXG4gICdldGhfZ2V0QmFsYW5jZScsXG4gICdldGhfZ2V0QmxvY2tCeUhhc2gnLFxuICAnZXRoX2dldEJsb2NrQnlOdW1iZXInLFxuICAnZXRoX2dldEJsb2NrVHJhbnNhY3Rpb25Db3VudEJ5SGFzaCcsXG4gICdldGhfZ2V0QmxvY2tUcmFuc2FjdGlvbkNvdW50QnlOdW1iZXInLFxuICAnZXRoX2dldENvZGUnLFxuICAnZXRoX2dldEVuY3J5cHRpb25QdWJsaWNLZXknLFxuICAnZXRoX2dldEZpbHRlckNoYW5nZXMnLFxuICAnZXRoX2dldEZpbHRlckxvZ3MnLFxuICAnZXRoX2dldExvZ3MnLFxuICAnZXRoX2dldFByb29mJyxcbiAgJ2V0aF9nZXRTdG9yYWdlQXQnLFxuICAnZXRoX2dldFRyYW5zYWN0aW9uQnlCbG9ja0hhc2hBbmRJbmRleCcsXG4gICdldGhfZ2V0VHJhbnNhY3Rpb25CeUJsb2NrTnVtYmVyQW5kSW5kZXgnLFxuICAnZXRoX2dldFRyYW5zYWN0aW9uQnlIYXNoJyxcbiAgJ2V0aF9nZXRUcmFuc2FjdGlvbkNvdW50JyxcbiAgJ2V0aF9nZXRUcmFuc2FjdGlvblJlY2VpcHQnLFxuICAnZXRoX2dldFVuY2xlQnlCbG9ja0hhc2hBbmRJbmRleCcsXG4gICdldGhfZ2V0VW5jbGVCeUJsb2NrTnVtYmVyQW5kSW5kZXgnLFxuICAnZXRoX2dldFVuY2xlQ291bnRCeUJsb2NrSGFzaCcsXG4gICdldGhfZ2V0VW5jbGVDb3VudEJ5QmxvY2tOdW1iZXInLFxuICAnZXRoX2dldFdvcmsnLFxuICAnZXRoX2hhc2hyYXRlJyxcbiAgJ2V0aF9taW5pbmcnLFxuICAnZXRoX25ld0Jsb2NrRmlsdGVyJyxcbiAgJ2V0aF9uZXdGaWx0ZXInLFxuICAnZXRoX25ld1BlbmRpbmdUcmFuc2FjdGlvbkZpbHRlcicsXG4gICdldGhfcHJvdG9jb2xWZXJzaW9uJyxcbiAgJ2V0aF9zZW5kUmF3VHJhbnNhY3Rpb24nLFxuICAnZXRoX3NlbmRUcmFuc2FjdGlvbicsXG4gICdldGhfc2lnbicsXG4gICdldGhfc2lnblR5cGVkRGF0YScsXG4gICdldGhfc2lnblR5cGVkRGF0YV92MScsXG4gICdldGhfc2lnblR5cGVkRGF0YV92MycsXG4gICdldGhfc2lnblR5cGVkRGF0YV92NCcsXG4gICdldGhfc3VibWl0SGFzaHJhdGUnLFxuICAnZXRoX3N1Ym1pdFdvcmsnLFxuICAnZXRoX3N5bmNpbmcnLFxuICAnZXRoX3VuaW5zdGFsbEZpbHRlcicsXG4gICdtZXRhbWFza19nZXRQcm92aWRlclN0YXRlJyxcbiAgJ21ldGFtYXNrX3dhdGNoQXNzZXQnLFxuICAnbmV0X2xpc3RlbmluZycsXG4gICduZXRfcGVlckNvdW50JyxcbiAgJ25ldF92ZXJzaW9uJyxcbiAgJ3BlcnNvbmFsX2VjUmVjb3ZlcicsXG4gICdwZXJzb25hbF9zaWduJyxcbiAgJ3dhbGxldF93YXRjaEFzc2V0JyxcbiAgJ3dlYjNfY2xpZW50VmVyc2lvbicsXG4gICd3ZWIzX3NoYTMnLFxuXSk7XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlU3RvcmUgfSBmcm9tICdAbWV0YW1hc2svb2JzLXN0b3JlJztcbmltcG9ydCB7IG5vcm1hbGl6ZSBhcyBub3JtYWxpemVBZGRyZXNzIH0gZnJvbSAnZXRoLXNpZy11dGlsJztcbmltcG9ydCB7IElQRlNfREVGQVVMVF9HQVRFV0FZX1VSTCB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbmV0d29yayc7XG5pbXBvcnQgeyBMZWRnZXJUcmFuc3BvcnRUeXBlcyB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvaGFyZHdhcmUtd2FsbGV0cyc7XG5pbXBvcnQgeyBUaGVtZVR5cGUgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL3ByZWZlcmVuY2VzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlZmVyZW5jZXNDb250cm9sbGVyIHtcbiAgLyoqXG4gICAqXG4gICAqIEB0eXBlZGVmIHtvYmplY3R9IFByZWZlcmVuY2VzQ29udHJvbGxlclxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIE92ZXJyaWRlcyB0aGUgZGVmYXVsdHMgZm9yIHRoZSBpbml0aWFsIHN0YXRlIG9mIHRoaXMuc3RvcmVcbiAgICogQHByb3BlcnR5IHtvYmplY3R9IHN0b3JlIFRoZSBzdG9yZWQgb2JqZWN0IGNvbnRhaW5pbmcgYSB1c2VycyBwcmVmZXJlbmNlcywgc3RvcmVkIGluIGxvY2FsIHN0b3JhZ2VcbiAgICogQHByb3BlcnR5IHtib29sZWFufSBzdG9yZS51c2VCbG9ja2llIFRoZSB1c2VycyBwcmVmZXJlbmNlIGZvciBibG9ja2llIGlkZW50aWNvbnMgd2l0aGluIHRoZSBVSVxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IHN0b3JlLnVzZU5vbmNlRmllbGQgVGhlIHVzZXJzIHByZWZlcmVuY2UgZm9yIG5vbmNlIGZpZWxkIHdpdGhpbiB0aGUgVUlcbiAgICogQHByb3BlcnR5IHtvYmplY3R9IHN0b3JlLmZlYXR1cmVGbGFncyBBIGtleS1ib29sZWFuIG1hcCwgd2hlcmUga2V5cyByZWZlciB0byBmZWF0dXJlcyBhbmQgYm9vbGVhbnMgdG8gd2hldGhlciB0aGVcbiAgICogdXNlciB3aXNoZXMgdG8gc2VlIHRoYXQgZmVhdHVyZS5cbiAgICpcbiAgICogRmVhdHVyZSBmbGFncyBjYW4gYmUgc2V0IGJ5IHRoZSBnbG9iYWwgZnVuY3Rpb24gYHNldFByZWZlcmVuY2UoZmVhdHVyZSwgZW5hYmxlZClgLCBhbmQgc28gc2hvdWxkIG5vdCBleHBvc2UgYW55IHNlbnNpdGl2ZSBiZWhhdmlvci5cbiAgICogQHByb3BlcnR5IHtvYmplY3R9IHN0b3JlLmtub3duTWV0aG9kRGF0YSBDb250YWlucyBhbGwgZGF0YSBtZXRob2RzIGtub3duIGJ5IHRoZSB1c2VyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdG9yZS5jdXJyZW50TG9jYWxlIFRoZSBwcmVmZXJyZWQgbGFuZ3VhZ2UgbG9jYWxlIGtleVxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gc3RvcmUuc2VsZWN0ZWRBZGRyZXNzIEEgaGV4IHN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBhZGRyZXNzIGluIHRoZSBhcHBcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IGluaXRTdGF0ZSA9IHtcbiAgICAgIHVzZUJsb2NraWU6IGZhbHNlLFxuICAgICAgdXNlTm9uY2VGaWVsZDogZmFsc2UsXG4gICAgICB1c2VQaGlzaERldGVjdDogdHJ1ZSxcbiAgICAgIGRpc21pc3NTZWVkQmFja1VwUmVtaW5kZXI6IGZhbHNlLFxuICAgICAgZGlzYWJsZWRScGNNZXRob2RQcmVmZXJlbmNlczoge1xuICAgICAgICBldGhfc2lnbjogZmFsc2UsXG4gICAgICB9LFxuICAgICAgdXNlTXVsdGlBY2NvdW50QmFsYW5jZUNoZWNrZXI6IHRydWUsXG5cbiAgICAgIC8vIHNldCB0byB0cnVlIG1lYW5zIHRoZSBkeW5hbWljIGxpc3QgZnJvbSB0aGUgQVBJIGlzIGJlaW5nIHVzZWRcbiAgICAgIC8vIHNldCB0byBmYWxzZSB3aWxsIGJlIHVzaW5nIHRoZSBzdGF0aWMgbGlzdCBmcm9tIGNvbnRyYWN0LW1ldGFkYXRhXG4gICAgICB1c2VUb2tlbkRldGVjdGlvbjogZmFsc2UsXG4gICAgICB1c2VOZnREZXRlY3Rpb246IGZhbHNlLFxuICAgICAgdXNlQ3VycmVuY3lSYXRlQ2hlY2s6IHRydWUsXG4gICAgICBvcGVuU2VhRW5hYmxlZDogZmFsc2UsXG4gICAgICBhZHZhbmNlZEdhc0ZlZTogbnVsbCxcblxuICAgICAgLy8gV0FSTklORzogRG8gbm90IHVzZSBmZWF0dXJlIGZsYWdzIGZvciBzZWN1cml0eS1zZW5zaXRpdmUgdGhpbmdzLlxuICAgICAgLy8gRmVhdHVyZSBmbGFnIHRvZ2dsaW5nIGlzIGF2YWlsYWJsZSBpbiB0aGUgZ2xvYmFsIG5hbWVzcGFjZVxuICAgICAgLy8gZm9yIGNvbnZlbmllbnQgdGVzdGluZyBvZiBwcmUtcmVsZWFzZSBmZWF0dXJlcywgYW5kIHNob3VsZCBuZXZlclxuICAgICAgLy8gcGVyZm9ybSBzZW5zaXRpdmUgb3BlcmF0aW9ucy5cbiAgICAgIGZlYXR1cmVGbGFnczoge1xuICAgICAgICBzaG93SW5jb21pbmdUcmFuc2FjdGlvbnM6IHRydWUsXG4gICAgICB9LFxuICAgICAga25vd25NZXRob2REYXRhOiB7fSxcbiAgICAgIGN1cnJlbnRMb2NhbGU6IG9wdHMuaW5pdExhbmdDb2RlLFxuICAgICAgaWRlbnRpdGllczoge30sXG4gICAgICBsb3N0SWRlbnRpdGllczoge30sXG4gICAgICBmb3Jnb3R0ZW5QYXNzd29yZDogZmFsc2UsXG4gICAgICBwcmVmZXJlbmNlczoge1xuICAgICAgICBhdXRvTG9ja1RpbWVMaW1pdDogdW5kZWZpbmVkLFxuICAgICAgICBzaG93RmlhdEluVGVzdG5ldHM6IGZhbHNlLFxuICAgICAgICBzaG93VGVzdE5ldHdvcmtzOiBmYWxzZSxcbiAgICAgICAgdXNlTmF0aXZlQ3VycmVuY3lBc1ByaW1hcnlDdXJyZW5jeTogdHJ1ZSxcbiAgICAgICAgaGlkZVplcm9CYWxhbmNlVG9rZW5zOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICAvLyBFTlMgZGVjZW50cmFsaXplZCB3ZWJzaXRlIHJlc29sdXRpb25cbiAgICAgIGlwZnNHYXRld2F5OiBJUEZTX0RFRkFVTFRfR0FURVdBWV9VUkwsXG4gICAgICBpbmZ1cmFCbG9ja2VkOiBudWxsLFxuICAgICAgbGVkZ2VyVHJhbnNwb3J0VHlwZTogd2luZG93Lm5hdmlnYXRvci5oaWRcbiAgICAgICAgPyBMZWRnZXJUcmFuc3BvcnRUeXBlcy53ZWJoaWRcbiAgICAgICAgOiBMZWRnZXJUcmFuc3BvcnRUeXBlcy51MmYsXG4gICAgICB0cmFuc2FjdGlvblNlY3VyaXR5Q2hlY2tFbmFibGVkOiBmYWxzZSxcbiAgICAgIHRoZW1lOiBUaGVtZVR5cGUub3MsXG4gICAgICAuLi5vcHRzLmluaXRTdGF0ZSxcbiAgICB9O1xuXG4gICAgdGhpcy5fb25JbmZ1cmFJc0Jsb2NrZWQgPSBvcHRzLm9uSW5mdXJhSXNCbG9ja2VkO1xuICAgIHRoaXMuX29uSW5mdXJhSXNVbmJsb2NrZWQgPSBvcHRzLm9uSW5mdXJhSXNVbmJsb2NrZWQ7XG4gICAgdGhpcy5zdG9yZSA9IG5ldyBPYnNlcnZhYmxlU3RvcmUoaW5pdFN0YXRlKTtcbiAgICB0aGlzLnN0b3JlLnNldE1heExpc3RlbmVycygxMyk7XG4gICAgdGhpcy50b2tlbkxpc3RDb250cm9sbGVyID0gb3B0cy50b2tlbkxpc3RDb250cm9sbGVyO1xuXG4gICAgdGhpcy5fc3Vic2NyaWJlVG9JbmZ1cmFBdmFpbGFiaWxpdHkoKTtcblxuICAgIGdsb2JhbC5zZXRQcmVmZXJlbmNlID0gKGtleSwgdmFsdWUpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnNldEZlYXR1cmVGbGFnKGtleSwgdmFsdWUpO1xuICAgIH07XG4gIH1cbiAgLy8gUFVCTElDIE1FVEhPRFNcblxuICAvKipcbiAgICogU2V0cyB0aGUge0Bjb2RlIGZvcmdvdHRlblBhc3N3b3JkfSBzdGF0ZSBwcm9wZXJ0eVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmdvdHRlblBhc3N3b3JkIC0gd2hldGhlciBvciBub3QgdGhlIHVzZXIgaGFzIGZvcmdvdHRlbiB0aGVpciBwYXNzd29yZFxuICAgKi9cbiAgc2V0UGFzc3dvcmRGb3Jnb3R0ZW4oZm9yZ290dGVuUGFzc3dvcmQpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgZm9yZ290dGVuUGFzc3dvcmQgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciB0aGUgYHVzZUJsb2NraWVgIHByb3BlcnR5XG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsIC0gV2hldGhlciBvciBub3QgdGhlIHVzZXIgcHJlZmVycyBibG9ja2llIGluZGljYXRvcnNcbiAgICovXG4gIHNldFVzZUJsb2NraWUodmFsKSB7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IHVzZUJsb2NraWU6IHZhbCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIHRoZSBgdXNlTm9uY2VGaWVsZGAgcHJvcGVydHlcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWwgLSBXaGV0aGVyIG9yIG5vdCB0aGUgdXNlciBwcmVmZXJzIHRvIHNldCBub25jZVxuICAgKi9cbiAgc2V0VXNlTm9uY2VGaWVsZCh2YWwpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgdXNlTm9uY2VGaWVsZDogdmFsIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgdGhlIGB1c2VQaGlzaERldGVjdGAgcHJvcGVydHlcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWwgLSBXaGV0aGVyIG9yIG5vdCB0aGUgdXNlciBwcmVmZXJzIHBoaXNoaW5nIGRvbWFpbiBwcm90ZWN0aW9uXG4gICAqL1xuICBzZXRVc2VQaGlzaERldGVjdCh2YWwpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgdXNlUGhpc2hEZXRlY3Q6IHZhbCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgZm9yIHRoZSBgdXNlTXVsdGlBY2NvdW50QmFsYW5jZUNoZWNrZXJgIHByb3BlcnR5XG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsIC0gV2hldGhlciBvciBub3QgdGhlIHVzZXIgcHJlZmVycyB0byB0dXJuIG9mZi9vbiBhbGwgc2VjdXJpdHkgc2V0dGluZ3NcbiAgICovXG4gIHNldFVzZU11bHRpQWNjb3VudEJhbGFuY2VDaGVja2VyKHZhbCkge1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyB1c2VNdWx0aUFjY291bnRCYWxhbmNlQ2hlY2tlcjogdmFsIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgdGhlIGB1c2VUb2tlbkRldGVjdGlvbmAgcHJvcGVydHlcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWwgLSBXaGV0aGVyIG9yIG5vdCB0aGUgdXNlciBwcmVmZXJzIHRvIHVzZSB0aGUgc3RhdGljIHRva2VuIGxpc3Qgb3IgZHluYW1pYyB0b2tlbiBsaXN0IGZyb20gdGhlIEFQSVxuICAgKi9cbiAgc2V0VXNlVG9rZW5EZXRlY3Rpb24odmFsKSB7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IHVzZVRva2VuRGV0ZWN0aW9uOiB2YWwgfSk7XG4gICAgdGhpcy50b2tlbkxpc3RDb250cm9sbGVyLnVwZGF0ZVByZXZlbnRQb2xsaW5nT25OZXR3b3JrUmVzdGFydCghdmFsKTtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnRva2VuTGlzdENvbnRyb2xsZXIuc3RhcnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50b2tlbkxpc3RDb250cm9sbGVyLmNsZWFyaW5nVG9rZW5MaXN0RGF0YSgpO1xuICAgICAgdGhpcy50b2tlbkxpc3RDb250cm9sbGVyLnN0b3AoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciB0aGUgYHVzZU5mdERldGVjdGlvbmAgcHJvcGVydHlcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSB1c2VOZnREZXRlY3Rpb24gLSBXaGV0aGVyIG9yIG5vdCB0aGUgdXNlciBwcmVmZXJzIHRvIGF1dG9kZXRlY3QgTkZUcy5cbiAgICovXG4gIHNldFVzZU5mdERldGVjdGlvbih1c2VOZnREZXRlY3Rpb24pIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgdXNlTmZ0RGV0ZWN0aW9uIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgdGhlIGB1c2VDdXJyZW5jeVJhdGVDaGVja2AgcHJvcGVydHlcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWwgLSBXaGV0aGVyIG9yIG5vdCB0aGUgdXNlciBwcmVmZXJzIHRvIHVzZSBjdXJyZW5jeSByYXRlIGNoZWNrIGZvciBFVEggYW5kIHRva2Vucy5cbiAgICovXG4gIHNldFVzZUN1cnJlbmN5UmF0ZUNoZWNrKHZhbCkge1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyB1c2VDdXJyZW5jeVJhdGVDaGVjazogdmFsIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgdGhlIGBvcGVuU2VhRW5hYmxlZGAgcHJvcGVydHlcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBvcGVuU2VhRW5hYmxlZCAtIFdoZXRoZXIgb3Igbm90IHRoZSB1c2VyIHByZWZlcnMgdG8gdXNlIHRoZSBPcGVuU2VhIEFQSSBmb3IgTkZUcyBkYXRhLlxuICAgKi9cbiAgc2V0T3BlblNlYUVuYWJsZWQob3BlblNlYUVuYWJsZWQpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIG9wZW5TZWFFbmFibGVkLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHRlciBmb3IgdGhlIGBhZHZhbmNlZEdhc0ZlZWAgcHJvcGVydHlcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHZhbCAtIGhvbGRzIHRoZSBtYXhCYXNlRmVlIGFuZCBQcmlvcml0eUZlZSB0aGF0IHRoZSB1c2VyIHNldCBhcyBkZWZhdWx0IGFkdmFuY2VkIHNldHRpbmdzLlxuICAgKi9cbiAgc2V0QWR2YW5jZWRHYXNGZWUodmFsKSB7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IGFkdmFuY2VkR2FzRmVlOiB2YWwgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciB0aGUgYHRoZW1lYCBwcm9wZXJ0eVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsIC0gJ2RlZmF1bHQnIG9yICdkYXJrJyB2YWx1ZSBiYXNlZCBvbiB0aGUgbW9kZSBzZWxlY3RlZCBieSB1c2VyLlxuICAgKi9cbiAgc2V0VGhlbWUodmFsKSB7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IHRoZW1lOiB2YWwgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciB0aGUgYHRyYW5zYWN0aW9uU2VjdXJpdHlDaGVja0VuYWJsZWRgIHByb3BlcnR5XG4gICAqXG4gICAqIEBwYXJhbSB0cmFuc2FjdGlvblNlY3VyaXR5Q2hlY2tFbmFibGVkXG4gICAqL1xuICBzZXRUcmFuc2FjdGlvblNlY3VyaXR5Q2hlY2tFbmFibGVkKHRyYW5zYWN0aW9uU2VjdXJpdHlDaGVja0VuYWJsZWQpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIHRyYW5zYWN0aW9uU2VjdXJpdHlDaGVja0VuYWJsZWQsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIG5ldyBtZXRob2REYXRhIHRvIHN0YXRlLCB0byBhdm9pZCByZXF1ZXN0aW5nIHRoaXMgaW5mb3JtYXRpb24gYWdhaW4gdGhyb3VnaCBJbmZ1cmFcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvdXJCeXRlUHJlZml4IC0gRm91ci1ieXRlIG1ldGhvZCBzaWduYXR1cmVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZERhdGEgLSBDb3JyZXNwb25kaW5nIGRhdGEgbWV0aG9kXG4gICAqL1xuICBhZGRLbm93bk1ldGhvZERhdGEoZm91ckJ5dGVQcmVmaXgsIG1ldGhvZERhdGEpIHtcbiAgICBjb25zdCB7IGtub3duTWV0aG9kRGF0YSB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGtub3duTWV0aG9kRGF0YVtmb3VyQnl0ZVByZWZpeF0gPSBtZXRob2REYXRhO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyBrbm93bk1ldGhvZERhdGEgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciB0aGUgYGN1cnJlbnRMb2NhbGVgIHByb3BlcnR5XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBoZSBwcmVmZXJyZWQgbGFuZ3VhZ2UgbG9jYWxlIGtleVxuICAgKi9cbiAgc2V0Q3VycmVudExvY2FsZShrZXkpIHtcbiAgICBjb25zdCB0ZXh0RGlyZWN0aW9uID0gWydhcicsICdkdicsICdmYScsICdoZScsICdrdSddLmluY2x1ZGVzKGtleSlcbiAgICAgID8gJ3J0bCdcbiAgICAgIDogJ2F1dG8nO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgY3VycmVudExvY2FsZToga2V5LFxuICAgICAgdGV4dERpcmVjdGlvbixcbiAgICB9KTtcbiAgICByZXR1cm4gdGV4dERpcmVjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGlkZW50aXRpZXMgdG8gb25seSBpbmNsdWRlIHNwZWNpZmllZCBhZGRyZXNzZXMuIFJlbW92ZXMgaWRlbnRpdGllc1xuICAgKiBub3QgaW5jbHVkZWQgaW4gYWRkcmVzc2VzIGFycmF5XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGFkZHJlc3NlcyAtIEFuIGFycmF5IG9mIGhleCBhZGRyZXNzZXNcbiAgICovXG4gIHNldEFkZHJlc3NlcyhhZGRyZXNzZXMpIHtcbiAgICBjb25zdCBvbGRJZGVudGl0aWVzID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmlkZW50aXRpZXM7XG5cbiAgICBjb25zdCBpZGVudGl0aWVzID0gYWRkcmVzc2VzLnJlZHVjZSgoaWRzLCBhZGRyZXNzLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3Qgb2xkSWQgPSBvbGRJZGVudGl0aWVzW2FkZHJlc3NdIHx8IHt9O1xuICAgICAgaWRzW2FkZHJlc3NdID0geyBuYW1lOiBgQWNjb3VudCAke2luZGV4ICsgMX1gLCBhZGRyZXNzLCAuLi5vbGRJZCB9O1xuICAgICAgcmV0dXJuIGlkcztcbiAgICB9LCB7fSk7XG5cbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgaWRlbnRpdGllcyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuIGFkZHJlc3MgZnJvbSBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzcyAtIEEgaGV4IGFkZHJlc3NcbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIGFkZHJlc3MgdGhhdCB3YXMgcmVtb3ZlZFxuICAgKi9cbiAgcmVtb3ZlQWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgY29uc3QgeyBpZGVudGl0aWVzIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICBpZiAoIWlkZW50aXRpZXNbYWRkcmVzc10pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHthZGRyZXNzfSBjYW4ndCBiZSBkZWxldGVkIGNhdXNlIGl0IHdhcyBub3QgZm91bmRgKTtcbiAgICB9XG4gICAgZGVsZXRlIGlkZW50aXRpZXNbYWRkcmVzc107XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IGlkZW50aXRpZXMgfSk7XG5cbiAgICAvLyBJZiB0aGUgc2VsZWN0ZWQgYWNjb3VudCBpcyBubyBsb25nZXIgdmFsaWQsXG4gICAgLy8gc2VsZWN0IGFuIGFyYml0cmFyeSBvdGhlciBhY2NvdW50OlxuICAgIGlmIChhZGRyZXNzID09PSB0aGlzLmdldFNlbGVjdGVkQWRkcmVzcygpKSB7XG4gICAgICBjb25zdCBbc2VsZWN0ZWRdID0gT2JqZWN0LmtleXMoaWRlbnRpdGllcyk7XG4gICAgICB0aGlzLnNldFNlbGVjdGVkQWRkcmVzcyhzZWxlY3RlZCk7XG4gICAgfVxuICAgIHJldHVybiBhZGRyZXNzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYWRkcmVzc2VzIHRvIHRoZSBpZGVudGl0aWVzIG9iamVjdCB3aXRob3V0IHJlbW92aW5nIGlkZW50aXRpZXNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gYWRkcmVzc2VzIC0gQW4gYXJyYXkgb2YgaGV4IGFkZHJlc3Nlc1xuICAgKi9cbiAgYWRkQWRkcmVzc2VzKGFkZHJlc3Nlcykge1xuICAgIGNvbnN0IHsgaWRlbnRpdGllcyB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGFkZHJlc3Nlcy5mb3JFYWNoKChhZGRyZXNzKSA9PiB7XG4gICAgICAvLyBza2lwIGlmIGFscmVhZHkgZXhpc3RzXG4gICAgICBpZiAoaWRlbnRpdGllc1thZGRyZXNzXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBhZGQgbWlzc2luZyBpZGVudGl0eVxuICAgICAgY29uc3QgaWRlbnRpdHlDb3VudCA9IE9iamVjdC5rZXlzKGlkZW50aXRpZXMpLmxlbmd0aDtcblxuICAgICAgaWRlbnRpdGllc1thZGRyZXNzXSA9IHsgbmFtZTogYEFjY291bnQgJHtpZGVudGl0eUNvdW50ICsgMX1gLCBhZGRyZXNzIH07XG4gICAgfSk7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IGlkZW50aXRpZXMgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3luY2hyb25pemVzIGlkZW50aXR5IGVudHJpZXMgd2l0aCBrbm93biBhY2NvdW50cy5cbiAgICogUmVtb3ZlcyBhbnkgdW5rbm93biBpZGVudGl0aWVzLCBhbmQgcmV0dXJucyB0aGUgcmVzdWx0aW5nIHNlbGVjdGVkIGFkZHJlc3MuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gYWRkcmVzc2VzIC0ga25vd24gdG8gdGhlIHZhdWx0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBzZWxlY3RlZEFkZHJlc3MgdGhlIHNlbGVjdGVkIGFkZHJlc3MuXG4gICAqL1xuICBzeW5jQWRkcmVzc2VzKGFkZHJlc3Nlcykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhZGRyZXNzZXMpIHx8IGFkZHJlc3Nlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbm9uLWVtcHR5IGFycmF5IG9mIGFkZHJlc3Nlcy4gRXJyb3IgIzExMjAxJyk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBpZGVudGl0aWVzLCBsb3N0SWRlbnRpdGllcyB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgY29uc3QgbmV3bHlMb3N0ID0ge307XG4gICAgT2JqZWN0LmtleXMoaWRlbnRpdGllcykuZm9yRWFjaCgoaWRlbnRpdHkpID0+IHtcbiAgICAgIGlmICghYWRkcmVzc2VzLmluY2x1ZGVzKGlkZW50aXR5KSkge1xuICAgICAgICBuZXdseUxvc3RbaWRlbnRpdHldID0gaWRlbnRpdGllc1tpZGVudGl0eV07XG4gICAgICAgIGRlbGV0ZSBpZGVudGl0aWVzW2lkZW50aXR5XTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIElkZW50aXRpZXMgYXJlIG5vIGxvbmdlciBwcmVzZW50LlxuICAgIGlmIChPYmplY3Qua2V5cyhuZXdseUxvc3QpLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIHN0b3JlIGxvc3QgYWNjb3VudHNcbiAgICAgIE9iamVjdC5rZXlzKG5ld2x5TG9zdCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGxvc3RJZGVudGl0aWVzW2tleV0gPSBuZXdseUxvc3Rba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyBpZGVudGl0aWVzLCBsb3N0SWRlbnRpdGllcyB9KTtcbiAgICB0aGlzLmFkZEFkZHJlc3NlcyhhZGRyZXNzZXMpO1xuXG4gICAgLy8gSWYgdGhlIHNlbGVjdGVkIGFjY291bnQgaXMgbm8gbG9uZ2VyIHZhbGlkLFxuICAgIC8vIHNlbGVjdCBhbiBhcmJpdHJhcnkgb3RoZXIgYWNjb3VudDpcbiAgICBsZXQgc2VsZWN0ZWQgPSB0aGlzLmdldFNlbGVjdGVkQWRkcmVzcygpO1xuICAgIGlmICghYWRkcmVzc2VzLmluY2x1ZGVzKHNlbGVjdGVkKSkge1xuICAgICAgW3NlbGVjdGVkXSA9IGFkZHJlc3NlcztcbiAgICAgIHRoaXMuc2V0U2VsZWN0ZWRBZGRyZXNzKHNlbGVjdGVkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0dGVyIGZvciB0aGUgYHNlbGVjdGVkQWRkcmVzc2AgcHJvcGVydHlcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IF9hZGRyZXNzIC0gQSBuZXcgaGV4IGFkZHJlc3MgZm9yIGFuIGFjY291bnRcbiAgICovXG4gIHNldFNlbGVjdGVkQWRkcmVzcyhfYWRkcmVzcykge1xuICAgIGNvbnN0IGFkZHJlc3MgPSBub3JtYWxpemVBZGRyZXNzKF9hZGRyZXNzKTtcblxuICAgIGNvbnN0IHsgaWRlbnRpdGllcyB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IHNlbGVjdGVkSWRlbnRpdHkgPSBpZGVudGl0aWVzW2FkZHJlc3NdO1xuICAgIGlmICghc2VsZWN0ZWRJZGVudGl0eSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJZGVudGl0eSBmb3IgJyR7YWRkcmVzc30gbm90IGZvdW5kYCk7XG4gICAgfVxuXG4gICAgc2VsZWN0ZWRJZGVudGl0eS5sYXN0U2VsZWN0ZWQgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyBpZGVudGl0aWVzLCBzZWxlY3RlZEFkZHJlc3M6IGFkZHJlc3MgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0dGVyIGZvciB0aGUgYHNlbGVjdGVkQWRkcmVzc2AgcHJvcGVydHlcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGhleCBhZGRyZXNzIGZvciB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGFjY291bnRcbiAgICovXG4gIGdldFNlbGVjdGVkQWRkcmVzcygpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnNlbGVjdGVkQWRkcmVzcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGEgY3VzdG9tIGxhYmVsIGZvciBhbiBhY2NvdW50XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhY2NvdW50IC0gdGhlIGFjY291bnQgdG8gc2V0IGEgbGFiZWwgZm9yXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYWJlbCAtIHRoZSBjdXN0b20gbGFiZWwgZm9yIHRoZSBhY2NvdW50XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBhc3luYyBzZXRBY2NvdW50TGFiZWwoYWNjb3VudCwgbGFiZWwpIHtcbiAgICBpZiAoIWFjY291bnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYHNldEFjY291bnRMYWJlbCByZXF1aXJlcyBhIHZhbGlkIGFkZHJlc3MsIGdvdCAke1N0cmluZyhhY2NvdW50KX1gLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgYWRkcmVzcyA9IG5vcm1hbGl6ZUFkZHJlc3MoYWNjb3VudCk7XG4gICAgY29uc3QgeyBpZGVudGl0aWVzIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgaWRlbnRpdGllc1thZGRyZXNzXSA9IGlkZW50aXRpZXNbYWRkcmVzc10gfHwge307XG4gICAgaWRlbnRpdGllc1thZGRyZXNzXS5uYW1lID0gbGFiZWw7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IGlkZW50aXRpZXMgfSk7XG4gICAgcmV0dXJuIGxhYmVsO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGBmZWF0dXJlRmxhZ3NgIHByb3BlcnR5LCB3aGljaCBpcyBhbiBvYmplY3QuIE9uZSBwcm9wZXJ0eSB3aXRoaW4gdGhhdCBvYmplY3Qgd2lsbCBiZSBzZXQgdG8gYSBib29sZWFuLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmVhdHVyZSAtIEEga2V5IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBVSSBmZWF0dXJlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGFjdGl2YXRlZCAtIEluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0aGUgVUkgZmVhdHVyZSBzaG91bGQgYmUgZGlzcGxheWVkXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59IFByb21pc2VzIGEgbmV3IG9iamVjdDsgdGhlIHVwZGF0ZWQgZmVhdHVyZUZsYWdzIG9iamVjdC5cbiAgICovXG4gIGFzeW5jIHNldEZlYXR1cmVGbGFnKGZlYXR1cmUsIGFjdGl2YXRlZCkge1xuICAgIGNvbnN0IGN1cnJlbnRGZWF0dXJlRmxhZ3MgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZmVhdHVyZUZsYWdzO1xuICAgIGNvbnN0IHVwZGF0ZWRGZWF0dXJlRmxhZ3MgPSB7XG4gICAgICAuLi5jdXJyZW50RmVhdHVyZUZsYWdzLFxuICAgICAgW2ZlYXR1cmVdOiBhY3RpdmF0ZWQsXG4gICAgfTtcblxuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyBmZWF0dXJlRmxhZ3M6IHVwZGF0ZWRGZWF0dXJlRmxhZ3MgfSk7XG5cbiAgICByZXR1cm4gdXBkYXRlZEZlYXR1cmVGbGFncztcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBgcHJlZmVyZW5jZXNgIHByb3BlcnR5LCB3aGljaCBpcyBhbiBvYmplY3QuIFRoZXNlIGFyZSB1c2VyLWNvbnRyb2xsZWQgZmVhdHVyZXNcbiAgICogZm91bmQgaW4gdGhlIHNldHRpbmdzIHBhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmZXJlbmNlIC0gVGhlIHByZWZlcmVuY2UgdG8gZW5hYmxlIG9yIGRpc2FibGUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgLSBJbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdGhlIHByZWZlcmVuY2Ugc2hvdWxkIGJlIGVuYWJsZWQgb3IgZGlzYWJsZWQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59IFByb21pc2VzIGEgbmV3IG9iamVjdDsgdGhlIHVwZGF0ZWQgcHJlZmVyZW5jZXMgb2JqZWN0LlxuICAgKi9cbiAgYXN5bmMgc2V0UHJlZmVyZW5jZShwcmVmZXJlbmNlLCB2YWx1ZSkge1xuICAgIGNvbnN0IGN1cnJlbnRQcmVmZXJlbmNlcyA9IHRoaXMuZ2V0UHJlZmVyZW5jZXMoKTtcbiAgICBjb25zdCB1cGRhdGVkUHJlZmVyZW5jZXMgPSB7XG4gICAgICAuLi5jdXJyZW50UHJlZmVyZW5jZXMsXG4gICAgICBbcHJlZmVyZW5jZV06IHZhbHVlLFxuICAgIH07XG5cbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgcHJlZmVyZW5jZXM6IHVwZGF0ZWRQcmVmZXJlbmNlcyB9KTtcbiAgICByZXR1cm4gdXBkYXRlZFByZWZlcmVuY2VzO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgZ2V0dGVyIGZvciB0aGUgYHByZWZlcmVuY2VzYCBwcm9wZXJ0eVxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBBIGtleS1ib29sZWFuIG1hcCBvZiB1c2VyLXNlbGVjdGVkIHByZWZlcmVuY2VzLlxuICAgKi9cbiAgZ2V0UHJlZmVyZW5jZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5wcmVmZXJlbmNlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGdldHRlciBmb3IgdGhlIGBpcGZzR2F0ZXdheWAgcHJvcGVydHlcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGN1cnJlbnQgSVBGUyBnYXRld2F5IGRvbWFpblxuICAgKi9cbiAgZ2V0SXBmc0dhdGV3YXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5pcGZzR2F0ZXdheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNldHRlciBmb3IgdGhlIGBpcGZzR2F0ZXdheWAgcHJvcGVydHlcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRvbWFpbiAtIFRoZSBuZXcgSVBGUyBnYXRld2F5IGRvbWFpblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBBIHByb21pc2Ugb2YgdGhlIHVwZGF0ZSBJUEZTIGdhdGV3YXkgZG9tYWluXG4gICAqL1xuICBhc3luYyBzZXRJcGZzR2F0ZXdheShkb21haW4pIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgaXBmc0dhdGV3YXk6IGRvbWFpbiB9KTtcbiAgICByZXR1cm4gZG9tYWluO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc2V0dGVyIGZvciB0aGUgYGxlZGdlclRyYW5zcG9ydFR5cGVgIHByb3BlcnR5LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGVkZ2VyVHJhbnNwb3J0VHlwZSAtIEVpdGhlciAnbGVkZ2VyTGl2ZScsICd3ZWJoaWQnIG9yICd1MmYnXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB0cmFuc3BvcnQgdHlwZSB0aGF0IHdhcyBzZXQuXG4gICAqL1xuICBzZXRMZWRnZXJUcmFuc3BvcnRQcmVmZXJlbmNlKGxlZGdlclRyYW5zcG9ydFR5cGUpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgbGVkZ2VyVHJhbnNwb3J0VHlwZSB9KTtcbiAgICByZXR1cm4gbGVkZ2VyVHJhbnNwb3J0VHlwZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGdldHRlciBmb3IgdGhlIGBsZWRnZXJUcmFuc3BvcnRUeXBlYCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGN1cnJlbnQgcHJlZmVycmVkIExlZGdlciB0cmFuc3BvcnQgdHlwZS5cbiAgICovXG4gIGdldExlZGdlclRyYW5zcG9ydFByZWZlcmVuY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5sZWRnZXJUcmFuc3BvcnRUeXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc2V0dGVyIGZvciB0aGUgdXNlciBwcmVmZXJlbmNlIHRvIGRpc21pc3MgdGhlIHNlZWQgcGhyYXNlIGJhY2t1cCByZW1pbmRlclxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2x9IGRpc21pc3NTZWVkQmFja1VwUmVtaW5kZXIgLSBVc2VyIHByZWZlcmVuY2UgZm9yIGRpc21pc3NpbmcgdGhlIGJhY2sgdXAgcmVtaW5kZXIuXG4gICAqL1xuICBhc3luYyBzZXREaXNtaXNzU2VlZEJhY2tVcFJlbWluZGVyKGRpc21pc3NTZWVkQmFja1VwUmVtaW5kZXIpIHtcbiAgICBhd2FpdCB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIGRpc21pc3NTZWVkQmFja1VwUmVtaW5kZXIsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQSBzZXR0ZXIgZm9yIHRoZSB1c2VyIHByZWZlcmVuY2UgdG8gZW5hYmxlL2Rpc2FibGUgcnBjIG1ldGhvZHNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgLSBUaGUgUlBDIG1ldGhvZCBuYW1lIHRvIGNoYW5nZSB0aGUgc2V0dGluZyBvZlxuICAgKiBAcGFyYW0ge2Jvb2x9IGlzRW5hYmxlZCAtIHRydWUgdG8gZW5hYmxlIHRoZSBycGMgbWV0aG9kXG4gICAqL1xuICBhc3luYyBzZXREaXNhYmxlZFJwY01ldGhvZFByZWZlcmVuY2UobWV0aG9kTmFtZSwgaXNFbmFibGVkKSB7XG4gICAgY29uc3QgY3VycmVudFJwY01ldGhvZFByZWZlcmVuY2VzID1cbiAgICAgIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5kaXNhYmxlZFJwY01ldGhvZFByZWZlcmVuY2VzO1xuICAgIGNvbnN0IHVwZGF0ZWRScGNNZXRob2RQcmVmZXJlbmNlcyA9IHtcbiAgICAgIC4uLmN1cnJlbnRScGNNZXRob2RQcmVmZXJlbmNlcyxcbiAgICAgIFttZXRob2ROYW1lXTogaXNFbmFibGVkLFxuICAgIH07XG5cbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIGRpc2FibGVkUnBjTWV0aG9kUHJlZmVyZW5jZXM6IHVwZGF0ZWRScGNNZXRob2RQcmVmZXJlbmNlcyxcbiAgICB9KTtcbiAgfVxuXG4gIGdldFJwY01ldGhvZFByZWZlcmVuY2VzKCkge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZGlzYWJsZWRScGNNZXRob2RQcmVmZXJlbmNlcztcbiAgfVxuXG4gIC8vXG4gIC8vIFBSSVZBVEUgTUVUSE9EU1xuICAvL1xuXG4gIF9zdWJzY3JpYmVUb0luZnVyYUF2YWlsYWJpbGl0eSgpIHtcbiAgICB0aGlzLl9vbkluZnVyYUlzQmxvY2tlZCgoKSA9PiB7XG4gICAgICB0aGlzLl9zZXRJbmZ1cmFCbG9ja2VkKHRydWUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fb25JbmZ1cmFJc1VuYmxvY2tlZCgoKSA9PiB7XG4gICAgICB0aGlzLl9zZXRJbmZ1cmFCbG9ja2VkKGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBBIHNldHRlciBmb3IgdGhlIGBpbmZ1cmFCbG9ja2VkYCBwcm9wZXJ0eVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzQmxvY2tlZCAtIEJvb2wgaW5kaWNhdGluZyB3aGV0aGVyIEluZnVyYSBpcyBibG9ja2VkXG4gICAqL1xuICBfc2V0SW5mdXJhQmxvY2tlZChpc0Jsb2NrZWQpIHtcbiAgICBjb25zdCB7IGluZnVyYUJsb2NrZWQgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgIGlmIChpbmZ1cmFCbG9ja2VkID09PSBpc0Jsb2NrZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgaW5mdXJhQmxvY2tlZDogaXNCbG9ja2VkIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBXZWIzUHJvdmlkZXIgfSBmcm9tICdAZXRoZXJzcHJvamVjdC9wcm92aWRlcnMnO1xuaW1wb3J0IHsgQ29udHJhY3QgfSBmcm9tICdAZXRoZXJzcHJvamVjdC9jb250cmFjdHMnO1xuaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5pbXBvcnQgQmlnTnVtYmVyIGZyb20gJ2JpZ251bWJlci5qcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlU3RvcmUgfSBmcm9tICdAbWV0YW1hc2svb2JzLXN0b3JlJztcbmltcG9ydCB7IG1hcFZhbHVlcywgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBhYmkgZnJvbSAnaHVtYW4tc3RhbmRhcmQtdG9rZW4tYWJpJztcbmltcG9ydCB7XG4gIGRlY0dXRUlUb0hleFdFSSxcbiAgc3VtSGV4ZXMsXG59IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL2NvbnZlcnNpb24udXRpbHMnO1xuaW1wb3J0IHtcbiAgREVGQVVMVF9FUkMyMF9BUFBST1ZFX0dBUyxcbiAgUVVPVEVTX0VYUElSRURfRVJST1IsXG4gIFFVT1RFU19OT1RfQVZBSUxBQkxFX0VSUk9SLFxuICBTV0FQU19GRVRDSF9PUkRFUl9DT05GTElDVCxcbiAgU1dBUFNfQ0hBSU5JRF9DT05UUkFDVF9BRERSRVNTX01BUCxcbn0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9zd2Fwcyc7XG5pbXBvcnQgeyBHYXNFc3RpbWF0ZVR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9nYXMnO1xuaW1wb3J0IHsgQ0hBSU5fSURTLCBOZXR3b3JrU3RhdHVzIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9uZXR3b3JrJztcbmltcG9ydCB7XG4gIEZBTExCQUNLX1NNQVJUX1RSQU5TQUNUSU9OU19SRUZSRVNIX1RJTUUsXG4gIEZBTExCQUNLX1NNQVJUX1RSQU5TQUNUSU9OU19ERUFETElORSxcbiAgRkFMTEJBQ0tfU01BUlRfVFJBTlNBQ1RJT05TX01BWF9GRUVfTVVMVElQTElFUixcbn0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9zbWFydFRyYW5zYWN0aW9ucyc7XG5cbmltcG9ydCB7IGlzU3dhcHNEZWZhdWx0VG9rZW5BZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvc3dhcHMudXRpbHMnO1xuXG5pbXBvcnQge1xuICBmZXRjaFRyYWRlc0luZm8gYXMgZGVmYXVsdEZldGNoVHJhZGVzSW5mbyxcbiAgZ2V0QmFzZUFwaSxcbn0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2xpYi9zd2Fwcy11dGlscyc7XG5pbXBvcnQgZmV0Y2hXaXRoQ2FjaGUgZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2xpYi9mZXRjaC13aXRoLWNhY2hlJztcbmltcG9ydCB7IE1JTlVURSwgU0VDT05EIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy90aW1lJztcbmltcG9ydCB7IGlzRXF1YWxDYXNlSW5zZW5zaXRpdmUgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9zdHJpbmctdXRpbHMnO1xuaW1wb3J0IHtcbiAgY2FsY0dhc1RvdGFsLFxuICBjYWxjVG9rZW5BbW91bnQsXG59IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9saWIvdHJhbnNhY3Rpb25zLWNvbnRyb2xsZXItdXRpbHMnO1xuaW1wb3J0IGZldGNoRXN0aW1hdGVkTDFGZWUgZnJvbSAnLi4vLi4vLi4vdWkvaGVscGVycy91dGlscy9vcHRpbWlzbS9mZXRjaEVzdGltYXRlZEwxRmVlJztcblxuaW1wb3J0IHsgTnVtZXJpYyB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL051bWVyaWMnO1xuaW1wb3J0IHsgRXRoZXJEZW5vbWluYXRpb24gfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2NvbW1vbic7XG5cbi8vIFRoZSBNQVhfR0FTX0xJTUlUIGlzIGEgbnVtYmVyIHRoYXQgaXMgaGlnaGVyIHRoYW4gdGhlIG1heGltdW0gZ2FzIGNvc3RzIHdlIGhhdmUgb2JzZXJ2ZWQgb24gYW55IGFnZ3JlZ2F0b3JcbmNvbnN0IE1BWF9HQVNfTElNSVQgPSAyNTAwMDAwO1xuXG4vLyBUbyBlbnN1cmUgdGhhdCBvdXIgc2VydmVzIGFyZSBub3Qgc3BhbW1lZCBpZiBNZXRhTWFzayBpcyBsZWZ0IGlkbGUsIHdlIGxpbWl0IHRoZSBudW1iZXIgb2YgZmV0Y2hlcyBmb3IgcXVvdGVzIHRoYXQgYXJlIG1hZGUgb24gdGltZWQgaW50ZXJ2YWxzLlxuLy8gMyBzZWVtcyB0byBiZSBhbiBhcHByb3ByaWF0ZSBiYWxhbmNlIG9mIGdpdmluZyB1c2VycyB0aGUgdGltZSB0aGV5IG5lZWQgd2hlbiBNZXRhTWFzayBpcyBub3QgbGVmdCBpZGxlLCBhbmQgdHVybmluZyBwb2xsaW5nIG9mZiB3aGVuIGl0IGlzLlxuY29uc3QgUE9MTF9DT1VOVF9MSU1JVCA9IDM7XG5cbi8vIElmIGZvciBhbnkgcmVhc29uIHRoZSBNZXRhU3dhcCBBUEkgZmFpbHMgdG8gcHJvdmlkZSBhIHJlZnJlc2ggdGltZSxcbi8vIHByb3ZpZGUgYSByZWFzb25hYmxlIGZhbGxiYWNrIHRvIGF2b2lkIGZ1cnRoZXIgZXJyb3JzXG5jb25zdCBGQUxMQkFDS19RVU9URV9SRUZSRVNIX1RJTUUgPSBNSU5VVEU7XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUdhc0VzdGltYXRlV2l0aFJlZnVuZChcbiAgbWF4R2FzID0gTUFYX0dBU19MSU1JVCxcbiAgZXN0aW1hdGVkUmVmdW5kID0gMCxcbiAgZXN0aW1hdGVkR2FzID0gMCxcbikge1xuICBjb25zdCBtYXhHYXNNaW51c1JlZnVuZCA9IG5ldyBCaWdOdW1iZXIobWF4R2FzLCAxMCkubWludXMoXG4gICAgZXN0aW1hdGVkUmVmdW5kLFxuICAgIDEwLFxuICApO1xuICBjb25zdCBpc01heEdhc01pbnVzUmVmdW5kTmVnYXRpdmUgPSBtYXhHYXNNaW51c1JlZnVuZC5sdCgwKTtcblxuICBjb25zdCBnYXNFc3RpbWF0ZVdpdGhSZWZ1bmQgPVxuICAgICFpc01heEdhc01pbnVzUmVmdW5kTmVnYXRpdmUgJiYgbWF4R2FzTWludXNSZWZ1bmQubHQoZXN0aW1hdGVkR2FzLCAxNilcbiAgICAgID8gYDB4JHttYXhHYXNNaW51c1JlZnVuZC50b1N0cmluZygxNil9YFxuICAgICAgOiBlc3RpbWF0ZWRHYXM7XG5cbiAgcmV0dXJuIGdhc0VzdGltYXRlV2l0aFJlZnVuZDtcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICBzd2Fwc1N0YXRlOiB7XG4gICAgcXVvdGVzOiB7fSxcbiAgICBxdW90ZXNQb2xsaW5nTGltaXRFbmFibGVkOiBmYWxzZSxcbiAgICBmZXRjaFBhcmFtczogbnVsbCxcbiAgICB0b2tlbnM6IG51bGwsXG4gICAgdHJhZGVUeElkOiBudWxsLFxuICAgIGFwcHJvdmVUeElkOiBudWxsLFxuICAgIHF1b3Rlc0xhc3RGZXRjaGVkOiBudWxsLFxuICAgIGN1c3RvbU1heEdhczogJycsXG4gICAgY3VzdG9tR2FzUHJpY2U6IG51bGwsXG4gICAgY3VzdG9tTWF4RmVlUGVyR2FzOiBudWxsLFxuICAgIGN1c3RvbU1heFByaW9yaXR5RmVlUGVyR2FzOiBudWxsLFxuICAgIHN3YXBzVXNlckZlZUxldmVsOiAnJyxcbiAgICBzZWxlY3RlZEFnZ0lkOiBudWxsLFxuICAgIGN1c3RvbUFwcHJvdmVUeERhdGE6ICcnLFxuICAgIGVycm9yS2V5OiAnJyxcbiAgICB0b3BBZ2dJZDogbnVsbCxcbiAgICByb3V0ZVN0YXRlOiAnJyxcbiAgICBzd2Fwc0ZlYXR1cmVJc0xpdmU6IHRydWUsXG4gICAgc2F2ZUZldGNoZWRRdW90ZXM6IGZhbHNlLFxuICAgIHN3YXBzUXVvdGVSZWZyZXNoVGltZTogRkFMTEJBQ0tfUVVPVEVfUkVGUkVTSF9USU1FLFxuICAgIHN3YXBzUXVvdGVQcmVmZXRjaGluZ1JlZnJlc2hUaW1lOiBGQUxMQkFDS19RVU9URV9SRUZSRVNIX1RJTUUsXG4gICAgc3dhcHNTdHhCYXRjaFN0YXR1c1JlZnJlc2hUaW1lOiBGQUxMQkFDS19TTUFSVF9UUkFOU0FDVElPTlNfUkVGUkVTSF9USU1FLFxuICAgIHN3YXBzU3R4R2V0VHJhbnNhY3Rpb25zUmVmcmVzaFRpbWU6XG4gICAgICBGQUxMQkFDS19TTUFSVF9UUkFOU0FDVElPTlNfUkVGUkVTSF9USU1FLFxuICAgIHN3YXBzU3R4TWF4RmVlTXVsdGlwbGllcjogRkFMTEJBQ0tfU01BUlRfVFJBTlNBQ1RJT05TX01BWF9GRUVfTVVMVElQTElFUixcbiAgICBzd2Fwc0ZlYXR1cmVGbGFnczoge30sXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTd2Fwc0NvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgZ2V0QnVmZmVyZWRHYXNMaW1pdCxcbiAgICBuZXR3b3JrQ29udHJvbGxlcixcbiAgICBwcm92aWRlcixcbiAgICBnZXRQcm92aWRlckNvbmZpZyxcbiAgICBnZXRUb2tlblJhdGVzU3RhdGUsXG4gICAgZmV0Y2hUcmFkZXNJbmZvID0gZGVmYXVsdEZldGNoVHJhZGVzSW5mbyxcbiAgICBnZXRDdXJyZW50Q2hhaW5JZCxcbiAgICBnZXRFSVAxNTU5R2FzRmVlRXN0aW1hdGVzLFxuICAgIG9uTmV0d29ya1N0YXRlQ2hhbmdlLFxuICB9KSB7XG4gICAgdGhpcy5zdG9yZSA9IG5ldyBPYnNlcnZhYmxlU3RvcmUoe1xuICAgICAgc3dhcHNTdGF0ZTogeyAuLi5pbml0aWFsU3RhdGUuc3dhcHNTdGF0ZSB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5yZXNldFN0YXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IHN3YXBzU3RhdGU6IHsgLi4uaW5pdGlhbFN0YXRlLnN3YXBzU3RhdGUgfSB9KTtcbiAgICB9O1xuXG4gICAgdGhpcy5fZmV0Y2hUcmFkZXNJbmZvID0gZmV0Y2hUcmFkZXNJbmZvO1xuICAgIHRoaXMuX2dldEN1cnJlbnRDaGFpbklkID0gZ2V0Q3VycmVudENoYWluSWQ7XG4gICAgdGhpcy5fZ2V0RUlQMTU1OUdhc0ZlZUVzdGltYXRlcyA9IGdldEVJUDE1NTlHYXNGZWVFc3RpbWF0ZXM7XG5cbiAgICB0aGlzLmdldEJ1ZmZlcmVkR2FzTGltaXQgPSBnZXRCdWZmZXJlZEdhc0xpbWl0O1xuICAgIHRoaXMuZ2V0VG9rZW5SYXRlc1N0YXRlID0gZ2V0VG9rZW5SYXRlc1N0YXRlO1xuXG4gICAgdGhpcy5wb2xsQ291bnQgPSAwO1xuICAgIHRoaXMuZ2V0UHJvdmlkZXJDb25maWcgPSBnZXRQcm92aWRlckNvbmZpZztcblxuICAgIHRoaXMuaW5kZXhPZk5ld2VzdENhbGxJbkZsaWdodCA9IDA7XG5cbiAgICB0aGlzLmV0aGVyc1Byb3ZpZGVyID0gbmV3IFdlYjNQcm92aWRlcihwcm92aWRlcik7XG4gICAgdGhpcy5fY3VycmVudE5ldHdvcmtJZCA9IG5ldHdvcmtDb250cm9sbGVyLnN0b3JlLmdldFN0YXRlKCkubmV0d29ya0lkO1xuICAgIG9uTmV0d29ya1N0YXRlQ2hhbmdlKCgpID0+IHtcbiAgICAgIGNvbnN0IHsgbmV0d29ya0lkLCBuZXR3b3JrU3RhdHVzIH0gPSBuZXR3b3JrQ29udHJvbGxlci5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgaWYgKFxuICAgICAgICBuZXR3b3JrU3RhdHVzID09PSBOZXR3b3JrU3RhdHVzLkF2YWlsYWJsZSAmJlxuICAgICAgICBuZXR3b3JrSWQgIT09IHRoaXMuX2N1cnJlbnROZXR3b3JrSWRcbiAgICAgICkge1xuICAgICAgICB0aGlzLl9jdXJyZW50TmV0d29ya0lkID0gbmV0d29ya0lkO1xuICAgICAgICB0aGlzLmV0aGVyc1Byb3ZpZGVyID0gbmV3IFdlYjNQcm92aWRlcihwcm92aWRlcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBmZXRjaFN3YXBzTmV0d29ya0NvbmZpZyhjaGFpbklkKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaFdpdGhDYWNoZShcbiAgICAgIGdldEJhc2VBcGkoJ25ldHdvcmsnLCBjaGFpbklkKSxcbiAgICAgIHsgbWV0aG9kOiAnR0VUJyB9LFxuICAgICAgeyBjYWNoZVJlZnJlc2hUaW1lOiA2MDAwMDAgfSxcbiAgICApO1xuICAgIGNvbnN0IHsgcmVmcmVzaFJhdGVzLCBwYXJhbWV0ZXJzID0ge30gfSA9IHJlc3BvbnNlIHx8IHt9O1xuICAgIGlmIChcbiAgICAgICFyZWZyZXNoUmF0ZXMgfHxcbiAgICAgIHR5cGVvZiByZWZyZXNoUmF0ZXMucXVvdGVzICE9PSAnbnVtYmVyJyB8fFxuICAgICAgdHlwZW9mIHJlZnJlc2hSYXRlcy5xdW90ZXNQcmVmZXRjaGluZyAhPT0gJ251bWJlcidcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYE1ldGFNYXNrIC0gaW52YWxpZCByZXNwb25zZSBmb3IgcmVmcmVzaFJhdGVzOiAke3Jlc3BvbnNlfWAsXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBXZSBwcmVzZW50bHkgdXNlIG1pbGxpc2Vjb25kcyBpbiB0aGUgVUkuXG4gICAgcmV0dXJuIHtcbiAgICAgIHF1b3RlczogcmVmcmVzaFJhdGVzLnF1b3RlcyAqIDEwMDAsXG4gICAgICBxdW90ZXNQcmVmZXRjaGluZzogcmVmcmVzaFJhdGVzLnF1b3Rlc1ByZWZldGNoaW5nICogMTAwMCxcbiAgICAgIHN0eEdldFRyYW5zYWN0aW9uczogcmVmcmVzaFJhdGVzLnN0eEdldFRyYW5zYWN0aW9ucyAqIDEwMDAsXG4gICAgICBzdHhCYXRjaFN0YXR1czogcmVmcmVzaFJhdGVzLnN0eEJhdGNoU3RhdHVzICogMTAwMCxcbiAgICAgIHN0eFN0YXR1c0RlYWRsaW5lOiByZWZyZXNoUmF0ZXMuc3R4U3RhdHVzRGVhZGxpbmUsXG4gICAgICBzdHhNYXhGZWVNdWx0aXBsaWVyOiBwYXJhbWV0ZXJzLnN0eE1heEZlZU11bHRpcGxpZXIsXG4gICAgfTtcbiAgfVxuXG4gIC8vIFNldHMgdGhlIG5ldHdvcmsgY29uZmlnIGZyb20gdGhlIE1ldGFTd2FwIEFQSS5cbiAgYXN5bmMgX3NldFN3YXBzTmV0d29ya0NvbmZpZygpIHtcbiAgICBjb25zdCBjaGFpbklkID0gdGhpcy5fZ2V0Q3VycmVudENoYWluSWQoKTtcbiAgICBsZXQgc3dhcHNOZXR3b3JrQ29uZmlnO1xuICAgIHRyeSB7XG4gICAgICBzd2Fwc05ldHdvcmtDb25maWcgPSBhd2FpdCB0aGlzLmZldGNoU3dhcHNOZXR3b3JrQ29uZmlnKGNoYWluSWQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1JlcXVlc3QgZm9yIFN3YXBzIG5ldHdvcmsgY29uZmlnIGZhaWxlZDogJywgZSk7XG4gICAgfVxuICAgIGNvbnN0IHsgc3dhcHNTdGF0ZTogbGF0ZXN0U3dhcHNTdGF0ZSB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgc3dhcHNTdGF0ZToge1xuICAgICAgICAuLi5sYXRlc3RTd2Fwc1N0YXRlLFxuICAgICAgICBzd2Fwc1F1b3RlUmVmcmVzaFRpbWU6XG4gICAgICAgICAgc3dhcHNOZXR3b3JrQ29uZmlnPy5xdW90ZXMgfHwgRkFMTEJBQ0tfUVVPVEVfUkVGUkVTSF9USU1FLFxuICAgICAgICBzd2Fwc1F1b3RlUHJlZmV0Y2hpbmdSZWZyZXNoVGltZTpcbiAgICAgICAgICBzd2Fwc05ldHdvcmtDb25maWc/LnF1b3Rlc1ByZWZldGNoaW5nIHx8IEZBTExCQUNLX1FVT1RFX1JFRlJFU0hfVElNRSxcbiAgICAgICAgc3dhcHNTdHhHZXRUcmFuc2FjdGlvbnNSZWZyZXNoVGltZTpcbiAgICAgICAgICBzd2Fwc05ldHdvcmtDb25maWc/LnN0eEdldFRyYW5zYWN0aW9ucyB8fFxuICAgICAgICAgIEZBTExCQUNLX1NNQVJUX1RSQU5TQUNUSU9OU19SRUZSRVNIX1RJTUUsXG4gICAgICAgIHN3YXBzU3R4QmF0Y2hTdGF0dXNSZWZyZXNoVGltZTpcbiAgICAgICAgICBzd2Fwc05ldHdvcmtDb25maWc/LnN0eEJhdGNoU3RhdHVzIHx8XG4gICAgICAgICAgRkFMTEJBQ0tfU01BUlRfVFJBTlNBQ1RJT05TX1JFRlJFU0hfVElNRSxcbiAgICAgICAgc3dhcHNTdHhTdGF0dXNEZWFkbGluZTpcbiAgICAgICAgICBzd2Fwc05ldHdvcmtDb25maWc/LnN0eFN0YXR1c0RlYWRsaW5lIHx8XG4gICAgICAgICAgRkFMTEJBQ0tfU01BUlRfVFJBTlNBQ1RJT05TX0RFQURMSU5FLFxuICAgICAgICBzd2Fwc1N0eE1heEZlZU11bHRpcGxpZXI6XG4gICAgICAgICAgc3dhcHNOZXR3b3JrQ29uZmlnPy5zdHhNYXhGZWVNdWx0aXBsaWVyIHx8XG4gICAgICAgICAgRkFMTEJBQ0tfU01BUlRfVFJBTlNBQ1RJT05TX01BWF9GRUVfTVVMVElQTElFUixcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICAvLyBPbmNlIHF1b3RlcyBhcmUgZmV0Y2hlZCwgd2UgcG9sbCBmb3IgbmV3IG9uZXMgdG8ga2VlcCB0aGUgcXVvdGVzIHVwIHRvIGRhdGUuIE1hcmtldCBhbmQgYWdncmVnYXRvciBjb250cmFjdCBjb25kaXRpb25zIGNhbiBjaGFuZ2UgZmFzdCBlbm91Z2hcbiAgLy8gdGhhdCBxdW90ZXMgd2lsbCBubyBsb25nZXIgYmUgYXZhaWxhYmxlIGFmdGVyIDEgb3IgMiBtaW51dGVzLiBXaGVuIGZldGNoQW5kU2V0UXVvdGVzIGlzIGZpcnN0IGNhbGxlZCwgaXQgcmVjZWl2ZXMgZmV0Y2ggcGFyYW1ldGVycyB0aGF0IGFyZSBzdG9yZWQgaW5cbiAgLy8gc3RhdGUuIFRoZXNlIHN0b3JlZCBwYXJhbWV0ZXJzIGFyZSB1c2VkIG9uIHN1YnNlcXVlbnQgY2FsbHMgbWFkZSBkdXJpbmcgcG9sbGluZy5cbiAgLy8gTm90ZTogd2Ugc3RvcCBwb2xsaW5nIGFmdGVyIDMgcmVxdWVzdHMsIHVudGlsIG5ldyBxdW90ZXMgYXJlIGV4cGxpY2l0bHkgYXNrZWQgZm9yLiBUaGUgbG9naWMgdGhhdCBlbmZvcmNlcyB0aGF0IG1heGltdW0gaXMgaW4gdGhlIGJvZHkgb2YgZmV0Y2hBbmRTZXRRdW90ZXNcbiAgcG9sbEZvck5ld1F1b3RlcygpIHtcbiAgICBjb25zdCB7XG4gICAgICBzd2Fwc1N0YXRlOiB7XG4gICAgICAgIHN3YXBzUXVvdGVSZWZyZXNoVGltZSxcbiAgICAgICAgc3dhcHNRdW90ZVByZWZldGNoaW5nUmVmcmVzaFRpbWUsXG4gICAgICAgIHF1b3Rlc1BvbGxpbmdMaW1pdEVuYWJsZWQsXG4gICAgICB9LFxuICAgIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgLy8gc3dhcHNRdW90ZVJlZnJlc2hUaW1lIGlzIHVzZWQgb24gdGhlIFZpZXcgUXVvdGUgcGFnZSwgc3dhcHNRdW90ZVByZWZldGNoaW5nUmVmcmVzaFRpbWUgaXMgdXNlZCBvbiB0aGUgQnVpbGQgUXVvdGUgcGFnZS5cbiAgICBjb25zdCBxdW90ZXNSZWZyZXNoUmF0ZUluTXMgPSBxdW90ZXNQb2xsaW5nTGltaXRFbmFibGVkXG4gICAgICA/IHN3YXBzUXVvdGVSZWZyZXNoVGltZVxuICAgICAgOiBzd2Fwc1F1b3RlUHJlZmV0Y2hpbmdSZWZyZXNoVGltZTtcbiAgICB0aGlzLnBvbGxpbmdUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCB7IHN3YXBzU3RhdGUgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgIHRoaXMuZmV0Y2hBbmRTZXRRdW90ZXMoXG4gICAgICAgIHN3YXBzU3RhdGUuZmV0Y2hQYXJhbXMsXG4gICAgICAgIHN3YXBzU3RhdGUuZmV0Y2hQYXJhbXM/Lm1ldGFEYXRhLFxuICAgICAgICB0cnVlLFxuICAgICAgKTtcbiAgICB9LCBxdW90ZXNSZWZyZXNoUmF0ZUluTXMpO1xuICB9XG5cbiAgc3RvcFBvbGxpbmdGb3JRdW90ZXMoKSB7XG4gICAgaWYgKHRoaXMucG9sbGluZ1RpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBvbGxpbmdUaW1lb3V0KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmZXRjaEFuZFNldFF1b3RlcyhcbiAgICBmZXRjaFBhcmFtcyxcbiAgICBmZXRjaFBhcmFtc01ldGFEYXRhID0ge30sXG4gICAgaXNQb2xsZWRSZXF1ZXN0LFxuICApIHtcbiAgICBjb25zdCB7IGNoYWluSWQgfSA9IGZldGNoUGFyYW1zTWV0YURhdGE7XG4gICAgY29uc3Qge1xuICAgICAgc3dhcHNTdGF0ZTogeyBxdW90ZXNQb2xsaW5nTGltaXRFbmFibGVkLCBzYXZlRmV0Y2hlZFF1b3RlcyB9LFxuICAgIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICBpZiAoIWZldGNoUGFyYW1zKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gRXZlcnkgdGltZSB3ZSBnZXQgYSBuZXcgcmVxdWVzdCB0aGF0IGlzIG5vdCBmcm9tIHRoZSBwb2xsaW5nLCB3ZSByZXNldCB0aGUgcG9sbCBjb3VudCBzbyB3ZSBjYW4gcG9sbCBmb3IgdXAgdG8gdGhyZWUgbW9yZSBzZXRzIG9mIHF1b3RlcyB3aXRoIHRoZXNlIG5ldyBwYXJhbXMuXG4gICAgaWYgKCFpc1BvbGxlZFJlcXVlc3QpIHtcbiAgICAgIHRoaXMucG9sbENvdW50ID0gMDtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSBhcmUgYW55IHBlbmRpbmcgcG9sbCByZXF1ZXN0cywgY2xlYXIgdGhlbSBzbyB0aGF0IHRoZXkgZG9uJ3QgZ2V0IGNhbGwgd2hpbGUgdGhpcyBuZXcgZmV0Y2ggaXMgaW4gcHJvY2Vzc1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBvbGxpbmdUaW1lb3V0KTtcblxuICAgIGlmICghaXNQb2xsZWRSZXF1ZXN0KSB7XG4gICAgICB0aGlzLnNldFN3YXBzRXJyb3JLZXkoJycpO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGV4T2ZDdXJyZW50Q2FsbCA9IHRoaXMuaW5kZXhPZk5ld2VzdENhbGxJbkZsaWdodCArIDE7XG4gICAgdGhpcy5pbmRleE9mTmV3ZXN0Q2FsbEluRmxpZ2h0ID0gaW5kZXhPZkN1cnJlbnRDYWxsO1xuXG4gICAgaWYgKCFzYXZlRmV0Y2hlZFF1b3Rlcykge1xuICAgICAgdGhpcy5zZXRTYXZlRmV0Y2hlZFF1b3Rlcyh0cnVlKTtcbiAgICB9XG5cbiAgICBsZXQgW25ld1F1b3Rlc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLl9mZXRjaFRyYWRlc0luZm8oZmV0Y2hQYXJhbXMsIHtcbiAgICAgICAgLi4uZmV0Y2hQYXJhbXNNZXRhRGF0YSxcbiAgICAgIH0pLFxuICAgICAgdGhpcy5fc2V0U3dhcHNOZXR3b3JrQ29uZmlnKCksXG4gICAgXSk7XG5cbiAgICBjb25zdCB7XG4gICAgICBzd2Fwc1N0YXRlOiB7IHNhdmVGZXRjaGVkUXVvdGVzOiBzYXZlRmV0Y2hlZFF1b3Rlc0FmdGVyUmVzcG9uc2UgfSxcbiAgICB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgLy8gSWYgc2F2ZUZldGNoZWRRdW90ZXNBZnRlclJlc3BvbnNlIGlzIGZhbHNlLCBpdCBtZWFucyBhIHVzZXIgbGVmdCBTd2FwcyAod2UgY2xlYW5lZCB0aGUgc3RhdGUpXG4gICAgLy8gYW5kIHdlIGRvbid0IHdhbnQgdG8gc2V0IGFueSBBUEkgcmVzcG9uc2Ugd2l0aCBxdW90ZXMgaW50byBzdGF0ZS5cbiAgICBpZiAoIXNhdmVGZXRjaGVkUXVvdGVzQWZ0ZXJSZXNwb25zZSkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAge30sIC8vIHF1b3Rlc1xuICAgICAgICBudWxsLCAvLyBzZWxlY3RlZEFnZ0lkXG4gICAgICBdO1xuICAgIH1cblxuICAgIG5ld1F1b3RlcyA9IG1hcFZhbHVlcyhuZXdRdW90ZXMsIChxdW90ZSkgPT4gKHtcbiAgICAgIC4uLnF1b3RlLFxuICAgICAgc291cmNlVG9rZW5JbmZvOiBmZXRjaFBhcmFtc01ldGFEYXRhLnNvdXJjZVRva2VuSW5mbyxcbiAgICAgIGRlc3RpbmF0aW9uVG9rZW5JbmZvOiBmZXRjaFBhcmFtc01ldGFEYXRhLmRlc3RpbmF0aW9uVG9rZW5JbmZvLFxuICAgIH0pKTtcblxuICAgIGlmIChjaGFpbklkID09PSBDSEFJTl9JRFMuT1BUSU1JU00gJiYgT2JqZWN0LnZhbHVlcyhuZXdRdW90ZXMpLmxlbmd0aCA+IDApIHtcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICBPYmplY3QudmFsdWVzKG5ld1F1b3RlcykubWFwKGFzeW5jIChxdW90ZSkgPT4ge1xuICAgICAgICAgIGlmIChxdW90ZS50cmFkZSkge1xuICAgICAgICAgICAgY29uc3QgbXVsdGlMYXllckwxVHJhZGVGZWVUb3RhbCA9IGF3YWl0IGZldGNoRXN0aW1hdGVkTDFGZWUoXG4gICAgICAgICAgICAgIGNoYWluSWQsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eFBhcmFtczogcXVvdGUudHJhZGUsXG4gICAgICAgICAgICAgICAgY2hhaW5JZCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdGhpcy5ldGhlcnNQcm92aWRlcixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBxdW90ZS5tdWx0aUxheWVyTDFUcmFkZUZlZVRvdGFsID0gbXVsdGlMYXllckwxVHJhZGVGZWVUb3RhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHF1b3RlO1xuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgcXVvdGVzTGFzdEZldGNoZWQgPSBEYXRlLm5vdygpO1xuXG4gICAgbGV0IGFwcHJvdmFsUmVxdWlyZWQgPSBmYWxzZTtcbiAgICBpZiAoXG4gICAgICAhaXNTd2Fwc0RlZmF1bHRUb2tlbkFkZHJlc3MoZmV0Y2hQYXJhbXMuc291cmNlVG9rZW4sIGNoYWluSWQpICYmXG4gICAgICBPYmplY3QudmFsdWVzKG5ld1F1b3RlcykubGVuZ3RoXG4gICAgKSB7XG4gICAgICBjb25zdCBhbGxvd2FuY2UgPSBhd2FpdCB0aGlzLl9nZXRFUkMyMEFsbG93YW5jZShcbiAgICAgICAgZmV0Y2hQYXJhbXMuc291cmNlVG9rZW4sXG4gICAgICAgIGZldGNoUGFyYW1zLmZyb21BZGRyZXNzLFxuICAgICAgICBjaGFpbklkLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IFtmaXJzdFF1b3RlXSA9IE9iamVjdC52YWx1ZXMobmV3UXVvdGVzKTtcblxuICAgICAgLy8gRm9yIGEgdXNlciB0byBiZSBhYmxlIHRvIHN3YXAgYSB0b2tlbiwgdGhleSBuZWVkIHRvIGhhdmUgYXBwcm92ZWQgdGhlIE1ldGFTd2FwIGNvbnRyYWN0IHRvIHdpdGhkcmF3IHRoYXQgdG9rZW4uXG4gICAgICAvLyBfZ2V0RVJDMjBBbGxvd2FuY2UoKSByZXR1cm5zIHRoZSBhbW91bnQgb2YgdGhlIHRva2VuIHRoZXkgaGF2ZSBhcHByb3ZlZCBmb3Igd2l0aGRyYXdhbC4gSWYgdGhhdCBhbW91bnQgaXMgZ3JlYXRlclxuICAgICAgLy8gdGhhbiAwLCBpdCBtZWFucyB0aGF0IGFwcHJvdmFsIGhhcyBhbHJlYWR5IG9jY3VycmVkIGFuZCBpcyBub3QgbmVlZGVkLiBPdGhlcndpc2UsIGZvciB0b2tlbnMgdG8gYmUgc3dhcHBlZCwgYSBuZXdcbiAgICAgIC8vIGNhbGwgb2YgdGhlIEVSQy0yMCBhcHByb3ZlIG1ldGhvZCBpcyByZXF1aXJlZC5cbiAgICAgIGFwcHJvdmFsUmVxdWlyZWQgPVxuICAgICAgICBmaXJzdFF1b3RlLmFwcHJvdmFsTmVlZGVkICYmXG4gICAgICAgIGFsbG93YW5jZS5lcSgwKSAmJlxuICAgICAgICBmaXJzdFF1b3RlLmFnZ3JlZ2F0b3IgIT09ICd3cmFwcGVkTmF0aXZlJztcbiAgICAgIGlmICghYXBwcm92YWxSZXF1aXJlZCkge1xuICAgICAgICBuZXdRdW90ZXMgPSBtYXBWYWx1ZXMobmV3UXVvdGVzLCAocXVvdGUpID0+ICh7XG4gICAgICAgICAgLi4ucXVvdGUsXG4gICAgICAgICAgYXBwcm92YWxOZWVkZWQ6IG51bGwsXG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzUG9sbGVkUmVxdWVzdCkge1xuICAgICAgICBjb25zdCB7IGdhc0xpbWl0OiBhcHByb3ZhbEdhcyB9ID0gYXdhaXQgdGhpcy50aW1lZG91dEdhc1JldHVybihcbiAgICAgICAgICBmaXJzdFF1b3RlLmFwcHJvdmFsTmVlZGVkLFxuICAgICAgICApO1xuXG4gICAgICAgIG5ld1F1b3RlcyA9IG1hcFZhbHVlcyhuZXdRdW90ZXMsIChxdW90ZSkgPT4gKHtcbiAgICAgICAgICAuLi5xdW90ZSxcbiAgICAgICAgICBhcHByb3ZhbE5lZWRlZDoge1xuICAgICAgICAgICAgLi4ucXVvdGUuYXBwcm92YWxOZWVkZWQsXG4gICAgICAgICAgICBnYXM6IGFwcHJvdmFsR2FzIHx8IERFRkFVTFRfRVJDMjBfQVBQUk9WRV9HQVMsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCB0b3BBZ2dJZCA9IG51bGw7XG5cbiAgICAvLyBXZSBjYW4gcmVkdWNlIHRpbWUgb24gdGhlIGxvYWRpbmcgc2NyZWVuIGJ5IG9ubHkgZG9pbmcgdGhpcyBhZnRlciB0aGVcbiAgICAvLyBsb2FkaW5nIHNjcmVlbiBhbmQgYmVzdCBxdW90ZSBoYXZlIHJlbmRlcmVkLlxuICAgIGlmICghYXBwcm92YWxSZXF1aXJlZCAmJiAhZmV0Y2hQYXJhbXM/LmJhbGFuY2VFcnJvcikge1xuICAgICAgbmV3UXVvdGVzID0gYXdhaXQgdGhpcy5nZXRBbGxRdW90ZXNXaXRoR2FzRXN0aW1hdGVzKG5ld1F1b3Rlcyk7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC52YWx1ZXMobmV3UXVvdGVzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuc2V0U3dhcHNFcnJvcktleShRVU9URVNfTk9UX0FWQUlMQUJMRV9FUlJPUik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IFtfdG9wQWdnSWQsIHF1b3Rlc1dpdGhTYXZpbmdzQW5kRmVlRGF0YV0gPVxuICAgICAgICBhd2FpdCB0aGlzLl9maW5kVG9wUXVvdGVBbmRDYWxjdWxhdGVTYXZpbmdzKG5ld1F1b3Rlcyk7XG4gICAgICB0b3BBZ2dJZCA9IF90b3BBZ2dJZDtcbiAgICAgIG5ld1F1b3RlcyA9IHF1b3Rlc1dpdGhTYXZpbmdzQW5kRmVlRGF0YTtcbiAgICB9XG5cbiAgICAvLyBJZiBhIG5ld2VyIGNhbGwgaGFzIGJlZW4gbWFkZSwgZG9uJ3QgdXBkYXRlIHN0YXRlIHdpdGggb2xkIGluZm9ybWF0aW9uXG4gICAgLy8gUHJldmVudHMgdGltaW5nIGNvbmZsaWN0cyBiZXR3ZWVuIGZldGNoZXNcbiAgICBpZiAodGhpcy5pbmRleE9mTmV3ZXN0Q2FsbEluRmxpZ2h0ICE9PSBpbmRleE9mQ3VycmVudENhbGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihTV0FQU19GRVRDSF9PUkRFUl9DT05GTElDVCk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBzd2Fwc1N0YXRlIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgbGV0IHsgc2VsZWN0ZWRBZ2dJZCB9ID0gc3dhcHNTdGF0ZTtcbiAgICBpZiAoIW5ld1F1b3Rlc1tzZWxlY3RlZEFnZ0lkXSkge1xuICAgICAgc2VsZWN0ZWRBZ2dJZCA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICBzd2Fwc1N0YXRlOiB7XG4gICAgICAgIC4uLnN3YXBzU3RhdGUsXG4gICAgICAgIHF1b3RlczogbmV3UXVvdGVzLFxuICAgICAgICBmZXRjaFBhcmFtczogeyAuLi5mZXRjaFBhcmFtcywgbWV0YURhdGE6IGZldGNoUGFyYW1zTWV0YURhdGEgfSxcbiAgICAgICAgcXVvdGVzTGFzdEZldGNoZWQsXG4gICAgICAgIHNlbGVjdGVkQWdnSWQsXG4gICAgICAgIHRvcEFnZ0lkLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGlmIChxdW90ZXNQb2xsaW5nTGltaXRFbmFibGVkKSB7XG4gICAgICAvLyBXZSBvbmx5IHdhbnQgdG8gZG8gdXAgdG8gYSBtYXhpbXVtIG9mIHRocmVlIHJlcXVlc3RzIGZyb20gcG9sbGluZyBpZiBwb2xsaW5nIGxpbWl0IGlzIGVuYWJsZWQuXG4gICAgICAvLyBPdGhlcndpc2Ugd2Ugd29uJ3QgaW5jcmVhc2UgcG9sbENvdW50LCBzbyBwb2xsaW5nIHdpbGwgcnVuIHdpdGhvdXQgYSBsaW1pdC5cbiAgICAgIHRoaXMucG9sbENvdW50ICs9IDE7XG4gICAgfVxuXG4gICAgaWYgKCFxdW90ZXNQb2xsaW5nTGltaXRFbmFibGVkIHx8IHRoaXMucG9sbENvdW50IDwgUE9MTF9DT1VOVF9MSU1JVCArIDEpIHtcbiAgICAgIHRoaXMucG9sbEZvck5ld1F1b3RlcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlc2V0UG9zdEZldGNoU3RhdGUoKTtcbiAgICAgIHRoaXMuc2V0U3dhcHNFcnJvcktleShRVU9URVNfRVhQSVJFRF9FUlJPUik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gW25ld1F1b3RlcywgdG9wQWdnSWRdO1xuICB9XG5cbiAgc2FmZVJlZmV0Y2hRdW90ZXMoKSB7XG4gICAgY29uc3QgeyBzd2Fwc1N0YXRlIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgaWYgKCF0aGlzLnBvbGxpbmdUaW1lb3V0ICYmIHN3YXBzU3RhdGUuZmV0Y2hQYXJhbXMpIHtcbiAgICAgIHRoaXMuZmV0Y2hBbmRTZXRRdW90ZXMoc3dhcHNTdGF0ZS5mZXRjaFBhcmFtcyk7XG4gICAgfVxuICB9XG5cbiAgc2V0U2VsZWN0ZWRRdW90ZUFnZ0lkKHNlbGVjdGVkQWdnSWQpIHtcbiAgICBjb25zdCB7IHN3YXBzU3RhdGUgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgc3dhcHNTdGF0ZTogeyAuLi5zd2Fwc1N0YXRlLCBzZWxlY3RlZEFnZ0lkIH0gfSk7XG4gIH1cblxuICBzZXRTd2Fwc1Rva2Vucyh0b2tlbnMpIHtcbiAgICBjb25zdCB7IHN3YXBzU3RhdGUgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgc3dhcHNTdGF0ZTogeyAuLi5zd2Fwc1N0YXRlLCB0b2tlbnMgfSB9KTtcbiAgfVxuXG4gIGNsZWFyU3dhcHNRdW90ZXMoKSB7XG4gICAgY29uc3QgeyBzd2Fwc1N0YXRlIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IHN3YXBzU3RhdGU6IHsgLi4uc3dhcHNTdGF0ZSwgcXVvdGVzOiB7fSB9IH0pO1xuICB9XG5cbiAgc2V0U3dhcHNFcnJvcktleShlcnJvcktleSkge1xuICAgIGNvbnN0IHsgc3dhcHNTdGF0ZSB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyBzd2Fwc1N0YXRlOiB7IC4uLnN3YXBzU3RhdGUsIGVycm9yS2V5IH0gfSk7XG4gIH1cblxuICBhc3luYyBnZXRBbGxRdW90ZXNXaXRoR2FzRXN0aW1hdGVzKHF1b3Rlcykge1xuICAgIGNvbnN0IHF1b3RlR2FzRGF0YSA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgT2JqZWN0LnZhbHVlcyhxdW90ZXMpLm1hcChhc3luYyAocXVvdGUpID0+IHtcbiAgICAgICAgY29uc3QgeyBnYXNMaW1pdCwgc2ltdWxhdGlvbkZhaWxzIH0gPSBhd2FpdCB0aGlzLnRpbWVkb3V0R2FzUmV0dXJuKFxuICAgICAgICAgIHF1b3RlLnRyYWRlLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gW2dhc0xpbWl0LCBzaW11bGF0aW9uRmFpbHMsIHF1b3RlLmFnZ3JlZ2F0b3JdO1xuICAgICAgfSksXG4gICAgKTtcblxuICAgIGNvbnN0IG5ld1F1b3RlcyA9IHt9O1xuICAgIHF1b3RlR2FzRGF0YS5mb3JFYWNoKChbZ2FzTGltaXQsIHNpbXVsYXRpb25GYWlscywgYWdnSWRdKSA9PiB7XG4gICAgICBpZiAoZ2FzTGltaXQgJiYgIXNpbXVsYXRpb25GYWlscykge1xuICAgICAgICBjb25zdCBnYXNFc3RpbWF0ZVdpdGhSZWZ1bmQgPSBjYWxjdWxhdGVHYXNFc3RpbWF0ZVdpdGhSZWZ1bmQoXG4gICAgICAgICAgcXVvdGVzW2FnZ0lkXS5tYXhHYXMsXG4gICAgICAgICAgcXVvdGVzW2FnZ0lkXS5lc3RpbWF0ZWRSZWZ1bmQsXG4gICAgICAgICAgZ2FzTGltaXQsXG4gICAgICAgICk7XG5cbiAgICAgICAgbmV3UXVvdGVzW2FnZ0lkXSA9IHtcbiAgICAgICAgICAuLi5xdW90ZXNbYWdnSWRdLFxuICAgICAgICAgIGdhc0VzdGltYXRlOiBnYXNMaW1pdCxcbiAgICAgICAgICBnYXNFc3RpbWF0ZVdpdGhSZWZ1bmQsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKHF1b3Rlc1thZ2dJZF0uYXBwcm92YWxOZWVkZWQpIHtcbiAgICAgICAgLy8gSWYgZ2FzIGVzdGltYXRpb24gZmFpbHMsIGJ1dCBhbiBFUkMtMjAgYXBwcm92ZSBpcyBuZWVkZWQsIHRoZW4gd2UgZG8gbm90IGFkZCBhbnkgZXN0aW1hdGUgcHJvcGVydHkgdG8gdGhlIHF1b3RlIG9iamVjdFxuICAgICAgICAvLyBTdWNoIHF1b3RlcyB3aWxsIHJlbHkgb24gdGhlIG1heEdhcyBhbmQgYXZlcmFnZUdhcyBwcm9wZXJ0aWVzIGZyb20gdGhlIGFwaVxuICAgICAgICBuZXdRdW90ZXNbYWdnSWRdID0gcXVvdGVzW2FnZ0lkXTtcbiAgICAgIH1cbiAgICAgIC8vIElmIGdhcyBlc3RpbWF0aW9uIGZhaWxzIGFuZCBubyBhcHByb3ZhbCBpcyBuZWVkZWQsIHRoZW4gd2UgZmlsdGVyIHRoYXQgcXVvdGUgb3V0LCBzbyB0aGF0IGl0IGlzIG5vdCBzaG93biB0byB0aGUgdXNlclxuICAgIH0pO1xuICAgIHJldHVybiBuZXdRdW90ZXM7XG4gIH1cblxuICB0aW1lZG91dEdhc1JldHVybih0cmFkZVR4UGFyYW1zKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBsZXQgZ2FzVGltZWRPdXQgPSBmYWxzZTtcblxuICAgICAgY29uc3QgZ2FzVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBnYXNUaW1lZE91dCA9IHRydWU7XG4gICAgICAgIHJlc29sdmUoeyBnYXNMaW1pdDogbnVsbCwgc2ltdWxhdGlvbkZhaWxzOiB0cnVlIH0pO1xuICAgICAgfSwgU0VDT05EICogNSk7XG5cbiAgICAgIC8vIFJlbW92ZSBnYXMgZnJvbSBwYXJhbXMgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgYGVzdGltYXRlR2FzYCBjYWxsXG4gICAgICAvLyBJbmNsdWRpbmcgaXQgY2FuIGNhdXNlIHRoZSBlc3RpbWF0ZSB0byBmYWlsIGlmIHRoZSBhY3R1YWwgZ2FzIG5lZWRlZFxuICAgICAgLy8gZXhjZWVkcyB0aGUgcGFzc2VkIGdhc1xuICAgICAgY29uc3QgdHJhZGVUeFBhcmFtc0Zvckdhc0VzdGltYXRlID0ge1xuICAgICAgICBkYXRhOiB0cmFkZVR4UGFyYW1zLmRhdGEsXG4gICAgICAgIGZyb206IHRyYWRlVHhQYXJhbXMuZnJvbSxcbiAgICAgICAgdG86IHRyYWRlVHhQYXJhbXMudG8sXG4gICAgICAgIHZhbHVlOiB0cmFkZVR4UGFyYW1zLnZhbHVlLFxuICAgICAgfTtcblxuICAgICAgdGhpcy5nZXRCdWZmZXJlZEdhc0xpbWl0KHsgdHhQYXJhbXM6IHRyYWRlVHhQYXJhbXNGb3JHYXNFc3RpbWF0ZSB9LCAxKVxuICAgICAgICAudGhlbigoeyBnYXNMaW1pdCwgc2ltdWxhdGlvbkZhaWxzIH0pID0+IHtcbiAgICAgICAgICBpZiAoIWdhc1RpbWVkT3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoZ2FzVGltZW91dCk7XG4gICAgICAgICAgICByZXNvbHZlKHsgZ2FzTGltaXQsIHNpbXVsYXRpb25GYWlscyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgICBpZiAoIWdhc1RpbWVkT3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoZ2FzVGltZW91dCk7XG4gICAgICAgICAgICByZXNvbHZlKHsgZ2FzTGltaXQ6IG51bGwsIHNpbXVsYXRpb25GYWlsczogdHJ1ZSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgc2V0SW5pdGlhbEdhc0VzdGltYXRlKGluaXRpYWxBZ2dJZCkge1xuICAgIGNvbnN0IHsgc3dhcHNTdGF0ZSB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgY29uc3QgcXVvdGVUb1VwZGF0ZSA9IHsgLi4uc3dhcHNTdGF0ZS5xdW90ZXNbaW5pdGlhbEFnZ0lkXSB9O1xuXG4gICAgY29uc3QgeyBnYXNMaW1pdDogbmV3R2FzRXN0aW1hdGUsIHNpbXVsYXRpb25GYWlscyB9ID1cbiAgICAgIGF3YWl0IHRoaXMudGltZWRvdXRHYXNSZXR1cm4ocXVvdGVUb1VwZGF0ZS50cmFkZSk7XG5cbiAgICBpZiAobmV3R2FzRXN0aW1hdGUgJiYgIXNpbXVsYXRpb25GYWlscykge1xuICAgICAgY29uc3QgZ2FzRXN0aW1hdGVXaXRoUmVmdW5kID0gY2FsY3VsYXRlR2FzRXN0aW1hdGVXaXRoUmVmdW5kKFxuICAgICAgICBxdW90ZVRvVXBkYXRlLm1heEdhcyxcbiAgICAgICAgcXVvdGVUb1VwZGF0ZS5lc3RpbWF0ZWRSZWZ1bmQsXG4gICAgICAgIG5ld0dhc0VzdGltYXRlLFxuICAgICAgKTtcblxuICAgICAgcXVvdGVUb1VwZGF0ZS5nYXNFc3RpbWF0ZSA9IG5ld0dhc0VzdGltYXRlO1xuICAgICAgcXVvdGVUb1VwZGF0ZS5nYXNFc3RpbWF0ZVdpdGhSZWZ1bmQgPSBnYXNFc3RpbWF0ZVdpdGhSZWZ1bmQ7XG4gICAgfVxuXG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICBzd2Fwc1N0YXRlOiB7XG4gICAgICAgIC4uLnN3YXBzU3RhdGUsXG4gICAgICAgIHF1b3RlczogeyAuLi5zd2Fwc1N0YXRlLnF1b3RlcywgW2luaXRpYWxBZ2dJZF06IHF1b3RlVG9VcGRhdGUgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBzZXRBcHByb3ZlVHhJZChhcHByb3ZlVHhJZCkge1xuICAgIGNvbnN0IHsgc3dhcHNTdGF0ZSB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyBzd2Fwc1N0YXRlOiB7IC4uLnN3YXBzU3RhdGUsIGFwcHJvdmVUeElkIH0gfSk7XG4gIH1cblxuICBzZXRUcmFkZVR4SWQodHJhZGVUeElkKSB7XG4gICAgY29uc3QgeyBzd2Fwc1N0YXRlIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IHN3YXBzU3RhdGU6IHsgLi4uc3dhcHNTdGF0ZSwgdHJhZGVUeElkIH0gfSk7XG4gIH1cblxuICBzZXRRdW90ZXNMYXN0RmV0Y2hlZChxdW90ZXNMYXN0RmV0Y2hlZCkge1xuICAgIGNvbnN0IHsgc3dhcHNTdGF0ZSB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgc3dhcHNTdGF0ZTogeyAuLi5zd2Fwc1N0YXRlLCBxdW90ZXNMYXN0RmV0Y2hlZCB9LFxuICAgIH0pO1xuICB9XG5cbiAgc2V0U3dhcHNUeEdhc1ByaWNlKGdhc1ByaWNlKSB7XG4gICAgY29uc3QgeyBzd2Fwc1N0YXRlIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICBzd2Fwc1N0YXRlOiB7IC4uLnN3YXBzU3RhdGUsIGN1c3RvbUdhc1ByaWNlOiBnYXNQcmljZSB9LFxuICAgIH0pO1xuICB9XG5cbiAgc2V0U3dhcHNUeE1heEZlZVBlckdhcyhtYXhGZWVQZXJHYXMpIHtcbiAgICBjb25zdCB7IHN3YXBzU3RhdGUgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIHN3YXBzU3RhdGU6IHsgLi4uc3dhcHNTdGF0ZSwgY3VzdG9tTWF4RmVlUGVyR2FzOiBtYXhGZWVQZXJHYXMgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHNldFN3YXBzVXNlckZlZUxldmVsKHN3YXBzVXNlckZlZUxldmVsKSB7XG4gICAgY29uc3QgeyBzd2Fwc1N0YXRlIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICBzd2Fwc1N0YXRlOiB7IC4uLnN3YXBzU3RhdGUsIHN3YXBzVXNlckZlZUxldmVsIH0sXG4gICAgfSk7XG4gIH1cblxuICBzZXRTd2Fwc1F1b3Rlc1BvbGxpbmdMaW1pdEVuYWJsZWQocXVvdGVzUG9sbGluZ0xpbWl0RW5hYmxlZCkge1xuICAgIGNvbnN0IHsgc3dhcHNTdGF0ZSB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgc3dhcHNTdGF0ZTogeyAuLi5zd2Fwc1N0YXRlLCBxdW90ZXNQb2xsaW5nTGltaXRFbmFibGVkIH0sXG4gICAgfSk7XG4gIH1cblxuICBzZXRTd2Fwc1R4TWF4RmVlUHJpb3JpdHlQZXJHYXMobWF4UHJpb3JpdHlGZWVQZXJHYXMpIHtcbiAgICBjb25zdCB7IHN3YXBzU3RhdGUgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIHN3YXBzU3RhdGU6IHtcbiAgICAgICAgLi4uc3dhcHNTdGF0ZSxcbiAgICAgICAgY3VzdG9tTWF4UHJpb3JpdHlGZWVQZXJHYXM6IG1heFByaW9yaXR5RmVlUGVyR2FzLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHNldFN3YXBzVHhHYXNMaW1pdChnYXNMaW1pdCkge1xuICAgIGNvbnN0IHsgc3dhcHNTdGF0ZSB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoe1xuICAgICAgc3dhcHNTdGF0ZTogeyAuLi5zd2Fwc1N0YXRlLCBjdXN0b21NYXhHYXM6IGdhc0xpbWl0IH0sXG4gICAgfSk7XG4gIH1cblxuICBzZXRDdXN0b21BcHByb3ZlVHhEYXRhKGRhdGEpIHtcbiAgICBjb25zdCB7IHN3YXBzU3RhdGUgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIHN3YXBzU3RhdGU6IHsgLi4uc3dhcHNTdGF0ZSwgY3VzdG9tQXBwcm92ZVR4RGF0YTogZGF0YSB9LFxuICAgIH0pO1xuICB9XG5cbiAgc2V0QmFja2dyb3VuZFN3YXBSb3V0ZVN0YXRlKHJvdXRlU3RhdGUpIHtcbiAgICBjb25zdCB7IHN3YXBzU3RhdGUgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgc3dhcHNTdGF0ZTogeyAuLi5zd2Fwc1N0YXRlLCByb3V0ZVN0YXRlIH0gfSk7XG4gIH1cblxuICBzZXRTYXZlRmV0Y2hlZFF1b3RlcyhzdGF0dXMpIHtcbiAgICBjb25zdCB7IHN3YXBzU3RhdGUgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIHN3YXBzU3RhdGU6IHsgLi4uc3dhcHNTdGF0ZSwgc2F2ZUZldGNoZWRRdW90ZXM6IHN0YXR1cyB9LFxuICAgIH0pO1xuICB9XG5cbiAgc2V0U3dhcHNMaXZlbmVzcyhzd2Fwc0xpdmVuZXNzKSB7XG4gICAgY29uc3QgeyBzd2Fwc1N0YXRlIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgY29uc3QgeyBzd2Fwc0ZlYXR1cmVJc0xpdmUgfSA9IHN3YXBzTGl2ZW5lc3M7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICBzd2Fwc1N0YXRlOiB7IC4uLnN3YXBzU3RhdGUsIHN3YXBzRmVhdHVyZUlzTGl2ZSB9LFxuICAgIH0pO1xuICB9XG5cbiAgc2V0U3dhcHNGZWF0dXJlRmxhZ3Moc3dhcHNGZWF0dXJlRmxhZ3MpIHtcbiAgICBjb25zdCB7IHN3YXBzU3RhdGUgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIHN3YXBzU3RhdGU6IHsgLi4uc3dhcHNTdGF0ZSwgc3dhcHNGZWF0dXJlRmxhZ3MgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHJlc2V0UG9zdEZldGNoU3RhdGUoKSB7XG4gICAgY29uc3QgeyBzd2Fwc1N0YXRlIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICBzd2Fwc1N0YXRlOiB7XG4gICAgICAgIC4uLmluaXRpYWxTdGF0ZS5zd2Fwc1N0YXRlLFxuICAgICAgICB0b2tlbnM6IHN3YXBzU3RhdGUudG9rZW5zLFxuICAgICAgICBmZXRjaFBhcmFtczogc3dhcHNTdGF0ZS5mZXRjaFBhcmFtcyxcbiAgICAgICAgc3dhcHNGZWF0dXJlSXNMaXZlOiBzd2Fwc1N0YXRlLnN3YXBzRmVhdHVyZUlzTGl2ZSxcbiAgICAgICAgc3dhcHNRdW90ZVJlZnJlc2hUaW1lOiBzd2Fwc1N0YXRlLnN3YXBzUXVvdGVSZWZyZXNoVGltZSxcbiAgICAgICAgc3dhcHNRdW90ZVByZWZldGNoaW5nUmVmcmVzaFRpbWU6XG4gICAgICAgICAgc3dhcHNTdGF0ZS5zd2Fwc1F1b3RlUHJlZmV0Y2hpbmdSZWZyZXNoVGltZSxcbiAgICAgICAgc3dhcHNGZWF0dXJlRmxhZ3M6IHN3YXBzU3RhdGUuc3dhcHNGZWF0dXJlRmxhZ3MsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBvbGxpbmdUaW1lb3V0KTtcbiAgfVxuXG4gIHJlc2V0U3dhcHNTdGF0ZSgpIHtcbiAgICBjb25zdCB7IHN3YXBzU3RhdGUgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIHN3YXBzU3RhdGU6IHtcbiAgICAgICAgLi4uaW5pdGlhbFN0YXRlLnN3YXBzU3RhdGUsXG4gICAgICAgIHN3YXBzUXVvdGVSZWZyZXNoVGltZTogc3dhcHNTdGF0ZS5zd2Fwc1F1b3RlUmVmcmVzaFRpbWUsXG4gICAgICAgIHN3YXBzUXVvdGVQcmVmZXRjaGluZ1JlZnJlc2hUaW1lOlxuICAgICAgICAgIHN3YXBzU3RhdGUuc3dhcHNRdW90ZVByZWZldGNoaW5nUmVmcmVzaFRpbWUsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBvbGxpbmdUaW1lb3V0KTtcbiAgfVxuXG4gIGFzeW5jIF9maW5kVG9wUXVvdGVBbmRDYWxjdWxhdGVTYXZpbmdzKHF1b3RlcyA9IHt9KSB7XG4gICAgY29uc3QgeyBjb250cmFjdEV4Y2hhbmdlUmF0ZXM6IHRva2VuQ29udmVyc2lvblJhdGVzIH0gPVxuICAgICAgdGhpcy5nZXRUb2tlblJhdGVzU3RhdGUoKTtcbiAgICBjb25zdCB7XG4gICAgICBzd2Fwc1N0YXRlOiB7IGN1c3RvbUdhc1ByaWNlLCBjdXN0b21NYXhQcmlvcml0eUZlZVBlckdhcyB9LFxuICAgIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgY29uc3QgY2hhaW5JZCA9IHRoaXMuX2dldEN1cnJlbnRDaGFpbklkKCk7XG5cbiAgICBjb25zdCBudW1RdW90ZXMgPSBPYmplY3Qua2V5cyhxdW90ZXMpLmxlbmd0aDtcbiAgICBpZiAoIW51bVF1b3Rlcykge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIGNvbnN0IG5ld1F1b3RlcyA9IGNsb25lRGVlcChxdW90ZXMpO1xuXG4gICAgY29uc3QgeyBnYXNGZWVFc3RpbWF0ZXMsIGdhc0VzdGltYXRlVHlwZSB9ID1cbiAgICAgIGF3YWl0IHRoaXMuX2dldEVJUDE1NTlHYXNGZWVFc3RpbWF0ZXMoKTtcblxuICAgIGxldCB1c2VkR2FzUHJpY2UgPSAnMHgwJztcblxuICAgIGlmIChnYXNFc3RpbWF0ZVR5cGUgPT09IEdhc0VzdGltYXRlVHlwZXMuZmVlTWFya2V0KSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGhpZ2g6IHsgc3VnZ2VzdGVkTWF4UHJpb3JpdHlGZWVQZXJHYXMgfSxcbiAgICAgICAgZXN0aW1hdGVkQmFzZUZlZSxcbiAgICAgIH0gPSBnYXNGZWVFc3RpbWF0ZXM7XG5cbiAgICAgIGNvbnN0IHN1Z2dlc3RlZE1heFByaW9yaXR5RmVlUGVyR2FzSW5IZXhXRUkgPSBkZWNHV0VJVG9IZXhXRUkoXG4gICAgICAgIHN1Z2dlc3RlZE1heFByaW9yaXR5RmVlUGVyR2FzLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IGVzdGltYXRlZEJhc2VGZWVOdW1lcmljID0gbmV3IE51bWVyaWMoXG4gICAgICAgIGVzdGltYXRlZEJhc2VGZWUsXG4gICAgICAgIDEwLFxuICAgICAgICBFdGhlckRlbm9taW5hdGlvbi5HV0VJLFxuICAgICAgKS50b0Rlbm9taW5hdGlvbihFdGhlckRlbm9taW5hdGlvbi5XRUkpO1xuXG4gICAgICB1c2VkR2FzUHJpY2UgPSBuZXcgTnVtZXJpYyhcbiAgICAgICAgY3VzdG9tTWF4UHJpb3JpdHlGZWVQZXJHYXMgfHwgc3VnZ2VzdGVkTWF4UHJpb3JpdHlGZWVQZXJHYXNJbkhleFdFSSxcbiAgICAgICAgMTYsXG4gICAgICApXG4gICAgICAgIC5hZGQoZXN0aW1hdGVkQmFzZUZlZU51bWVyaWMpXG4gICAgICAgIC5yb3VuZCg2KVxuICAgICAgICAudG9TdHJpbmcoKTtcbiAgICB9IGVsc2UgaWYgKGdhc0VzdGltYXRlVHlwZSA9PT0gR2FzRXN0aW1hdGVUeXBlcy5sZWdhY3kpIHtcbiAgICAgIHVzZWRHYXNQcmljZSA9IGN1c3RvbUdhc1ByaWNlIHx8IGRlY0dXRUlUb0hleFdFSShnYXNGZWVFc3RpbWF0ZXMuaGlnaCk7XG4gICAgfSBlbHNlIGlmIChnYXNFc3RpbWF0ZVR5cGUgPT09IEdhc0VzdGltYXRlVHlwZXMuZXRoR2FzUHJpY2UpIHtcbiAgICAgIHVzZWRHYXNQcmljZSA9XG4gICAgICAgIGN1c3RvbUdhc1ByaWNlIHx8IGRlY0dXRUlUb0hleFdFSShnYXNGZWVFc3RpbWF0ZXMuZ2FzUHJpY2UpO1xuICAgIH1cblxuICAgIGxldCB0b3BBZ2dJZCA9IG51bGw7XG4gICAgbGV0IG92ZXJhbGxWYWx1ZU9mQmVzdFF1b3RlRm9yU29ydGluZyA9IG51bGw7XG5cbiAgICBPYmplY3QudmFsdWVzKG5ld1F1b3RlcykuZm9yRWFjaCgocXVvdGUpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgYWdncmVnYXRvcixcbiAgICAgICAgYXBwcm92YWxOZWVkZWQsXG4gICAgICAgIGF2ZXJhZ2VHYXMsXG4gICAgICAgIGRlc3RpbmF0aW9uQW1vdW50ID0gMCxcbiAgICAgICAgZGVzdGluYXRpb25Ub2tlbixcbiAgICAgICAgZGVzdGluYXRpb25Ub2tlbkluZm8sXG4gICAgICAgIGdhc0VzdGltYXRlV2l0aFJlZnVuZCxcbiAgICAgICAgc291cmNlQW1vdW50LFxuICAgICAgICBzb3VyY2VUb2tlbixcbiAgICAgICAgdHJhZGUsXG4gICAgICAgIGZlZTogbWV0YU1hc2tGZWUsXG4gICAgICAgIG11bHRpTGF5ZXJMMVRyYWRlRmVlVG90YWwsXG4gICAgICB9ID0gcXVvdGU7XG5cbiAgICAgIGNvbnN0IHRyYWRlR2FzTGltaXRGb3JDYWxjdWxhdGlvbiA9IGdhc0VzdGltYXRlV2l0aFJlZnVuZFxuICAgICAgICA/IG5ldyBCaWdOdW1iZXIoZ2FzRXN0aW1hdGVXaXRoUmVmdW5kLCAxNilcbiAgICAgICAgOiBuZXcgQmlnTnVtYmVyKGF2ZXJhZ2VHYXMgfHwgTUFYX0dBU19MSU1JVCwgMTApO1xuXG4gICAgICBjb25zdCB0b3RhbEdhc0xpbWl0Rm9yQ2FsY3VsYXRpb24gPSB0cmFkZUdhc0xpbWl0Rm9yQ2FsY3VsYXRpb25cbiAgICAgICAgLnBsdXMoYXBwcm92YWxOZWVkZWQ/LmdhcyB8fCAnMHgwJywgMTYpXG4gICAgICAgIC50b1N0cmluZygxNik7XG5cbiAgICAgIGxldCBnYXNUb3RhbEluV2VpSGV4ID0gY2FsY0dhc1RvdGFsKFxuICAgICAgICB0b3RhbEdhc0xpbWl0Rm9yQ2FsY3VsYXRpb24sXG4gICAgICAgIHVzZWRHYXNQcmljZSxcbiAgICAgICk7XG4gICAgICBpZiAobXVsdGlMYXllckwxVHJhZGVGZWVUb3RhbCAhPT0gbnVsbCkge1xuICAgICAgICBnYXNUb3RhbEluV2VpSGV4ID0gc3VtSGV4ZXMoXG4gICAgICAgICAgZ2FzVG90YWxJbldlaUhleCB8fCAnMHgwJyxcbiAgICAgICAgICBtdWx0aUxheWVyTDFUcmFkZUZlZVRvdGFsIHx8ICcweDAnLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyB0cmFkZS52YWx1ZSBpcyBhIHN1bSBvZiBkaWZmZXJlbnQgdmFsdWVzIGRlcGVuZGluZyBvbiB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICAvLyBJdCBhbHdheXMgaW5jbHVkZXMgYW55IGV4dGVybmFsIGZlZXMgY2hhcmdlZCBieSB0aGUgcXVvdGUgc291cmNlLiBJblxuICAgICAgLy8gYWRkaXRpb24sIGlmIHRoZSBzb3VyY2UgYXNzZXQgaXMgdGhlIHNlbGVjdGVkIGNoYWluJ3MgZGVmYXVsdCB0b2tlbiwgdHJhZGUudmFsdWVcbiAgICAgIC8vIGluY2x1ZGVzIHRoZSBhbW91bnQgb2YgdGhhdCB0b2tlbi5cbiAgICAgIGNvbnN0IHRvdGFsV2VpQ29zdCA9IG5ldyBOdW1lcmljKFxuICAgICAgICBnYXNUb3RhbEluV2VpSGV4LFxuICAgICAgICAxNixcbiAgICAgICAgRXRoZXJEZW5vbWluYXRpb24uV0VJLFxuICAgICAgKS5hZGQobmV3IE51bWVyaWModHJhZGUudmFsdWUsIDE2LCBFdGhlckRlbm9taW5hdGlvbi5XRUkpKTtcblxuICAgICAgY29uc3QgdG90YWxFdGhDb3N0ID0gdG90YWxXZWlDb3N0XG4gICAgICAgIC50b0Rlbm9taW5hdGlvbihFdGhlckRlbm9taW5hdGlvbi5FVEgpXG4gICAgICAgIC5yb3VuZCg2KS52YWx1ZTtcblxuICAgICAgLy8gVGhlIHRvdGFsIGZlZSBpcyBhZ2dyZWdhdG9yL2V4Y2hhbmdlIGZlZXMgcGx1cyBnYXMgZmVlcy5cbiAgICAgIC8vIElmIHRoZSBzd2FwIGlzIGZyb20gdGhlIHNlbGVjdGVkIGNoYWluJ3MgZGVmYXVsdCB0b2tlbiwgc3VidHJhY3RcbiAgICAgIC8vIHRoZSBzb3VyY2VBbW91bnQgZnJvbSB0aGUgdG90YWwgY29zdC4gT3RoZXJ3aXNlLCB0aGUgdG90YWwgZmVlXG4gICAgICAvLyBpcyBzaW1wbHkgdHJhZGUudmFsdWUgcGx1cyBnYXMgZmVlcy5cbiAgICAgIGNvbnN0IGV0aEZlZSA9IGlzU3dhcHNEZWZhdWx0VG9rZW5BZGRyZXNzKHNvdXJjZVRva2VuLCBjaGFpbklkKVxuICAgICAgICA/IHRvdGFsV2VpQ29zdFxuICAgICAgICAgICAgLm1pbnVzKG5ldyBOdW1lcmljKHNvdXJjZUFtb3VudCwgMTApKVxuICAgICAgICAgICAgLnRvRGVub21pbmF0aW9uKEV0aGVyRGVub21pbmF0aW9uLkVUSClcbiAgICAgICAgICAgIC5yb3VuZCg2KS52YWx1ZVxuICAgICAgICA6IHRvdGFsRXRoQ29zdDtcblxuICAgICAgY29uc3QgZGVjaW1hbEFkanVzdGVkRGVzdGluYXRpb25BbW91bnQgPSBjYWxjVG9rZW5BbW91bnQoXG4gICAgICAgIGRlc3RpbmF0aW9uQW1vdW50LFxuICAgICAgICBkZXN0aW5hdGlvblRva2VuSW5mby5kZWNpbWFscyxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHRva2VuUGVyY2VudGFnZU9mUHJlRmVlRGVzdEFtb3VudCA9IG5ldyBCaWdOdW1iZXIoMTAwLCAxMClcbiAgICAgICAgLm1pbnVzKG1ldGFNYXNrRmVlLCAxMClcbiAgICAgICAgLmRpdigxMDApO1xuICAgICAgY29uc3QgZGVzdGluYXRpb25BbW91bnRCZWZvcmVNZXRhTWFza0ZlZSA9XG4gICAgICAgIGRlY2ltYWxBZGp1c3RlZERlc3RpbmF0aW9uQW1vdW50LmRpdih0b2tlblBlcmNlbnRhZ2VPZlByZUZlZURlc3RBbW91bnQpO1xuICAgICAgY29uc3QgbWV0YU1hc2tGZWVJblRva2VucyA9IGRlc3RpbmF0aW9uQW1vdW50QmVmb3JlTWV0YU1hc2tGZWUubWludXMoXG4gICAgICAgIGRlY2ltYWxBZGp1c3RlZERlc3RpbmF0aW9uQW1vdW50LFxuICAgICAgKTtcblxuICAgICAgY29uc3QgdG9rZW5Db252ZXJzaW9uUmF0ZSA9XG4gICAgICAgIHRva2VuQ29udmVyc2lvblJhdGVzW1xuICAgICAgICAgIE9iamVjdC5rZXlzKHRva2VuQ29udmVyc2lvblJhdGVzKS5maW5kKCh0b2tlbkFkZHJlc3MpID0+XG4gICAgICAgICAgICBpc0VxdWFsQ2FzZUluc2Vuc2l0aXZlKHRva2VuQWRkcmVzcywgZGVzdGluYXRpb25Ub2tlbiksXG4gICAgICAgICAgKVxuICAgICAgICBdO1xuICAgICAgY29uc3QgY29udmVyc2lvblJhdGVGb3JTb3J0aW5nID0gdG9rZW5Db252ZXJzaW9uUmF0ZSB8fCAxO1xuXG4gICAgICBjb25zdCBldGhWYWx1ZU9mVG9rZW5zID0gZGVjaW1hbEFkanVzdGVkRGVzdGluYXRpb25BbW91bnQudGltZXMoXG4gICAgICAgIGNvbnZlcnNpb25SYXRlRm9yU29ydGluZy50b1N0cmluZygxMCksXG4gICAgICAgIDEwLFxuICAgICAgKTtcblxuICAgICAgY29uc3QgY29udmVyc2lvblJhdGVGb3JDYWxjdWxhdGlvbnMgPSBpc1N3YXBzRGVmYXVsdFRva2VuQWRkcmVzcyhcbiAgICAgICAgZGVzdGluYXRpb25Ub2tlbixcbiAgICAgICAgY2hhaW5JZCxcbiAgICAgIClcbiAgICAgICAgPyAxXG4gICAgICAgIDogdG9rZW5Db252ZXJzaW9uUmF0ZTtcblxuICAgICAgY29uc3Qgb3ZlcmFsbFZhbHVlT2ZRdW90ZUZvclNvcnRpbmcgPVxuICAgICAgICBjb252ZXJzaW9uUmF0ZUZvckNhbGN1bGF0aW9ucyA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyBldGhWYWx1ZU9mVG9rZW5zXG4gICAgICAgICAgOiBldGhWYWx1ZU9mVG9rZW5zLm1pbnVzKGV0aEZlZSwgMTApO1xuXG4gICAgICBxdW90ZS5ldGhGZWUgPSBldGhGZWUudG9TdHJpbmcoMTApO1xuXG4gICAgICBpZiAoY29udmVyc2lvblJhdGVGb3JDYWxjdWxhdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBxdW90ZS5ldGhWYWx1ZU9mVG9rZW5zID0gZXRoVmFsdWVPZlRva2Vucy50b1N0cmluZygxMCk7XG4gICAgICAgIHF1b3RlLm92ZXJhbGxWYWx1ZU9mUXVvdGUgPSBvdmVyYWxsVmFsdWVPZlF1b3RlRm9yU29ydGluZy50b1N0cmluZygxMCk7XG4gICAgICAgIHF1b3RlLm1ldGFNYXNrRmVlSW5FdGggPSBtZXRhTWFza0ZlZUluVG9rZW5zXG4gICAgICAgICAgLnRpbWVzKGNvbnZlcnNpb25SYXRlRm9yQ2FsY3VsYXRpb25zLnRvU3RyaW5nKDEwKSlcbiAgICAgICAgICAudG9TdHJpbmcoMTApO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIG92ZXJhbGxWYWx1ZU9mQmVzdFF1b3RlRm9yU29ydGluZyA9PT0gbnVsbCB8fFxuICAgICAgICBvdmVyYWxsVmFsdWVPZlF1b3RlRm9yU29ydGluZy5ndChvdmVyYWxsVmFsdWVPZkJlc3RRdW90ZUZvclNvcnRpbmcpXG4gICAgICApIHtcbiAgICAgICAgdG9wQWdnSWQgPSBhZ2dyZWdhdG9yO1xuICAgICAgICBvdmVyYWxsVmFsdWVPZkJlc3RRdW90ZUZvclNvcnRpbmcgPSBvdmVyYWxsVmFsdWVPZlF1b3RlRm9yU29ydGluZztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGlzQmVzdCA9XG4gICAgICBpc1N3YXBzRGVmYXVsdFRva2VuQWRkcmVzcyhcbiAgICAgICAgbmV3UXVvdGVzW3RvcEFnZ0lkXS5kZXN0aW5hdGlvblRva2VuLFxuICAgICAgICBjaGFpbklkLFxuICAgICAgKSB8fFxuICAgICAgQm9vbGVhbihcbiAgICAgICAgdG9rZW5Db252ZXJzaW9uUmF0ZXNbXG4gICAgICAgICAgT2JqZWN0LmtleXModG9rZW5Db252ZXJzaW9uUmF0ZXMpLmZpbmQoKHRva2VuQWRkcmVzcykgPT5cbiAgICAgICAgICAgIGlzRXF1YWxDYXNlSW5zZW5zaXRpdmUoXG4gICAgICAgICAgICAgIHRva2VuQWRkcmVzcyxcbiAgICAgICAgICAgICAgbmV3UXVvdGVzW3RvcEFnZ0lkXT8uZGVzdGluYXRpb25Ub2tlbixcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKVxuICAgICAgICBdLFxuICAgICAgKTtcblxuICAgIGxldCBzYXZpbmdzID0gbnVsbDtcblxuICAgIGlmIChpc0Jlc3QpIHtcbiAgICAgIGNvbnN0IGJlc3RRdW90ZSA9IG5ld1F1b3Rlc1t0b3BBZ2dJZF07XG5cbiAgICAgIHNhdmluZ3MgPSB7fTtcblxuICAgICAgY29uc3Qge1xuICAgICAgICBldGhGZWU6IG1lZGlhbkV0aEZlZSxcbiAgICAgICAgbWV0YU1hc2tGZWVJbkV0aDogbWVkaWFuTWV0YU1hc2tGZWUsXG4gICAgICAgIGV0aFZhbHVlT2ZUb2tlbnM6IG1lZGlhbkV0aFZhbHVlT2ZUb2tlbnMsXG4gICAgICB9ID0gZ2V0TWVkaWFuRXRoVmFsdWVRdW90ZShPYmplY3QudmFsdWVzKG5ld1F1b3RlcykpO1xuXG4gICAgICAvLyBQZXJmb3JtYW5jZSBzYXZpbmdzIGFyZSBjYWxjdWxhdGVkIGFzOlxuICAgICAgLy8gICAoZXRoVmFsdWVPZlRva2VucyBmb3IgdGhlIGJlc3QgdHJhZGUpIC0gKGV0aFZhbHVlT2ZUb2tlbnMgZm9yIHRoZSBtZWRpYSB0cmFkZSlcbiAgICAgIHNhdmluZ3MucGVyZm9ybWFuY2UgPSBuZXcgQmlnTnVtYmVyKGJlc3RRdW90ZS5ldGhWYWx1ZU9mVG9rZW5zLCAxMCkubWludXMoXG4gICAgICAgIG1lZGlhbkV0aFZhbHVlT2ZUb2tlbnMsXG4gICAgICAgIDEwLFxuICAgICAgKTtcblxuICAgICAgLy8gRmVlIHNhdmluZ3MgYXJlIGNhbGN1bGF0ZWQgYXM6XG4gICAgICAvLyAgIChmZWUgZm9yIHRoZSBtZWRpYW4gdHJhZGUpIC0gKGZlZSBmb3IgdGhlIGJlc3QgdHJhZGUpXG4gICAgICBzYXZpbmdzLmZlZSA9IG5ldyBCaWdOdW1iZXIobWVkaWFuRXRoRmVlKS5taW51cyhiZXN0UXVvdGUuZXRoRmVlLCAxMCk7XG5cbiAgICAgIHNhdmluZ3MubWV0YU1hc2tGZWUgPSBiZXN0UXVvdGUubWV0YU1hc2tGZWVJbkV0aDtcblxuICAgICAgLy8gVG90YWwgc2F2aW5ncyBhcmUgY2FsY3VsYXRlZCBhczpcbiAgICAgIC8vICAgcGVyZm9ybWFuY2Ugc2F2aW5ncyArIGZlZSBzYXZpbmdzIC0gbWV0YW1hc2sgZmVlXG4gICAgICBzYXZpbmdzLnRvdGFsID0gc2F2aW5ncy5wZXJmb3JtYW5jZVxuICAgICAgICAucGx1cyhzYXZpbmdzLmZlZSlcbiAgICAgICAgLm1pbnVzKHNhdmluZ3MubWV0YU1hc2tGZWUpXG4gICAgICAgIC50b1N0cmluZygxMCk7XG4gICAgICBzYXZpbmdzLnBlcmZvcm1hbmNlID0gc2F2aW5ncy5wZXJmb3JtYW5jZS50b1N0cmluZygxMCk7XG4gICAgICBzYXZpbmdzLmZlZSA9IHNhdmluZ3MuZmVlLnRvU3RyaW5nKDEwKTtcbiAgICAgIHNhdmluZ3MubWVkaWFuTWV0YU1hc2tGZWUgPSBtZWRpYW5NZXRhTWFza0ZlZTtcblxuICAgICAgbmV3UXVvdGVzW3RvcEFnZ0lkXS5pc0Jlc3RRdW90ZSA9IHRydWU7XG4gICAgICBuZXdRdW90ZXNbdG9wQWdnSWRdLnNhdmluZ3MgPSBzYXZpbmdzO1xuICAgIH1cblxuICAgIHJldHVybiBbdG9wQWdnSWQsIG5ld1F1b3Rlc107XG4gIH1cblxuICBhc3luYyBfZ2V0RVJDMjBBbGxvd2FuY2UoY29udHJhY3RBZGRyZXNzLCB3YWxsZXRBZGRyZXNzLCBjaGFpbklkKSB7XG4gICAgY29uc3QgY29udHJhY3QgPSBuZXcgQ29udHJhY3QoY29udHJhY3RBZGRyZXNzLCBhYmksIHRoaXMuZXRoZXJzUHJvdmlkZXIpO1xuICAgIHJldHVybiBhd2FpdCBjb250cmFjdC5hbGxvd2FuY2UoXG4gICAgICB3YWxsZXRBZGRyZXNzLFxuICAgICAgU1dBUFNfQ0hBSU5JRF9DT05UUkFDVF9BRERSRVNTX01BUFtjaGFpbklkXSxcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbWVkaWFuIG92ZXJhbGxWYWx1ZU9mUXVvdGUgb2YgYSBzYW1wbGUgb2YgcXVvdGVzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IF9xdW90ZXMgLSBBIHNhbXBsZSBvZiBxdW90ZSBvYmplY3RzIHdpdGggb3ZlcmFsbFZhbHVlT2ZRdW90ZSwgZXRoRmVlLCBtZXRhTWFza0ZlZUluRXRoLCBhbmQgZXRoVmFsdWVPZlRva2VucyBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCB0aGUgZXRoVmFsdWVPZlRva2VucywgZXRoRmVlLCBhbmQgbWV0YU1hc2tGZWVJbkV0aCBvZiB0aGUgcXVvdGUgd2l0aCB0aGUgbWVkaWFuIG92ZXJhbGxWYWx1ZU9mUXVvdGVcbiAqL1xuZnVuY3Rpb24gZ2V0TWVkaWFuRXRoVmFsdWVRdW90ZShfcXVvdGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShfcXVvdGVzKSB8fCBfcXVvdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbm9uLWVtcHR5IGFycmF5IHBhcmFtLicpO1xuICB9XG5cbiAgY29uc3QgcXVvdGVzID0gWy4uLl9xdW90ZXNdO1xuXG4gIHF1b3Rlcy5zb3J0KChxdW90ZUEsIHF1b3RlQikgPT4ge1xuICAgIGNvbnN0IG92ZXJhbGxWYWx1ZU9mUXVvdGVBID0gbmV3IEJpZ051bWJlcihxdW90ZUEub3ZlcmFsbFZhbHVlT2ZRdW90ZSwgMTApO1xuICAgIGNvbnN0IG92ZXJhbGxWYWx1ZU9mUXVvdGVCID0gbmV3IEJpZ051bWJlcihxdW90ZUIub3ZlcmFsbFZhbHVlT2ZRdW90ZSwgMTApO1xuICAgIGlmIChvdmVyYWxsVmFsdWVPZlF1b3RlQS5lcXVhbHMob3ZlcmFsbFZhbHVlT2ZRdW90ZUIpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIG92ZXJhbGxWYWx1ZU9mUXVvdGVBLmxlc3NUaGFuKG92ZXJhbGxWYWx1ZU9mUXVvdGVCKSA/IC0xIDogMTtcbiAgfSk7XG5cbiAgaWYgKHF1b3Rlcy5sZW5ndGggJSAyID09PSAxKSB7XG4gICAgLy8gcmV0dXJuIG1pZGRsZSB2YWx1ZXNcbiAgICBjb25zdCBtZWRpYW5PdmVyYWxsVmFsdWUgPVxuICAgICAgcXVvdGVzWyhxdW90ZXMubGVuZ3RoIC0gMSkgLyAyXS5vdmVyYWxsVmFsdWVPZlF1b3RlO1xuICAgIGNvbnN0IHF1b3Rlc01hdGNoaW5nTWVkaWFuUXVvdGVWYWx1ZSA9IHF1b3Rlcy5maWx0ZXIoXG4gICAgICAocXVvdGUpID0+IG1lZGlhbk92ZXJhbGxWYWx1ZSA9PT0gcXVvdGUub3ZlcmFsbFZhbHVlT2ZRdW90ZSxcbiAgICApO1xuICAgIHJldHVybiBtZWFuc09mUXVvdGVzRmVlc0FuZFZhbHVlKHF1b3Rlc01hdGNoaW5nTWVkaWFuUXVvdGVWYWx1ZSk7XG4gIH1cblxuICAvLyByZXR1cm4gbWVhbiBvZiBtaWRkbGUgdHdvIHZhbHVlc1xuICBjb25zdCB1cHBlckluZGV4ID0gcXVvdGVzLmxlbmd0aCAvIDI7XG4gIGNvbnN0IGxvd2VySW5kZXggPSB1cHBlckluZGV4IC0gMTtcblxuICBjb25zdCBvdmVyYWxsVmFsdWVBdFVwcGVySW5kZXggPSBxdW90ZXNbdXBwZXJJbmRleF0ub3ZlcmFsbFZhbHVlT2ZRdW90ZTtcbiAgY29uc3Qgb3ZlcmFsbFZhbHVlQXRMb3dlckluZGV4ID0gcXVvdGVzW2xvd2VySW5kZXhdLm92ZXJhbGxWYWx1ZU9mUXVvdGU7XG5cbiAgY29uc3QgcXVvdGVzTWF0Y2hpbmdVcHBlckluZGV4VmFsdWUgPSBxdW90ZXMuZmlsdGVyKFxuICAgIChxdW90ZSkgPT4gb3ZlcmFsbFZhbHVlQXRVcHBlckluZGV4ID09PSBxdW90ZS5vdmVyYWxsVmFsdWVPZlF1b3RlLFxuICApO1xuICBjb25zdCBxdW90ZXNNYXRjaGluZ0xvd2VySW5kZXhWYWx1ZSA9IHF1b3Rlcy5maWx0ZXIoXG4gICAgKHF1b3RlKSA9PiBvdmVyYWxsVmFsdWVBdExvd2VySW5kZXggPT09IHF1b3RlLm92ZXJhbGxWYWx1ZU9mUXVvdGUsXG4gICk7XG5cbiAgY29uc3QgZmVlc0FuZFZhbHVlQXRVcHBlckluZGV4ID0gbWVhbnNPZlF1b3Rlc0ZlZXNBbmRWYWx1ZShcbiAgICBxdW90ZXNNYXRjaGluZ1VwcGVySW5kZXhWYWx1ZSxcbiAgKTtcbiAgY29uc3QgZmVlc0FuZFZhbHVlQXRMb3dlckluZGV4ID0gbWVhbnNPZlF1b3Rlc0ZlZXNBbmRWYWx1ZShcbiAgICBxdW90ZXNNYXRjaGluZ0xvd2VySW5kZXhWYWx1ZSxcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIGV0aEZlZTogbmV3IEJpZ051bWJlcihmZWVzQW5kVmFsdWVBdFVwcGVySW5kZXguZXRoRmVlLCAxMClcbiAgICAgIC5wbHVzKGZlZXNBbmRWYWx1ZUF0TG93ZXJJbmRleC5ldGhGZWUsIDEwKVxuICAgICAgLmRpdmlkZWRCeSgyKVxuICAgICAgLnRvU3RyaW5nKDEwKSxcbiAgICBtZXRhTWFza0ZlZUluRXRoOiBuZXcgQmlnTnVtYmVyKFxuICAgICAgZmVlc0FuZFZhbHVlQXRVcHBlckluZGV4Lm1ldGFNYXNrRmVlSW5FdGgsXG4gICAgICAxMCxcbiAgICApXG4gICAgICAucGx1cyhmZWVzQW5kVmFsdWVBdExvd2VySW5kZXgubWV0YU1hc2tGZWVJbkV0aCwgMTApXG4gICAgICAuZGl2aWRlZEJ5KDIpXG4gICAgICAudG9TdHJpbmcoMTApLFxuICAgIGV0aFZhbHVlT2ZUb2tlbnM6IG5ldyBCaWdOdW1iZXIoXG4gICAgICBmZWVzQW5kVmFsdWVBdFVwcGVySW5kZXguZXRoVmFsdWVPZlRva2VucyxcbiAgICAgIDEwLFxuICAgIClcbiAgICAgIC5wbHVzKGZlZXNBbmRWYWx1ZUF0TG93ZXJJbmRleC5ldGhWYWx1ZU9mVG9rZW5zLCAxMClcbiAgICAgIC5kaXZpZGVkQnkoMilcbiAgICAgIC50b1N0cmluZygxMCksXG4gIH07XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYXJpdGhtZXRpYyBtZWFuIGZvciBlYWNoIG9mIHRocmVlIHByb3BlcnRpZXMgLSBldGhGZWUsIG1ldGFNYXNrRmVlSW5FdGggYW5kIGV0aFZhbHVlT2ZUb2tlbnMgLSBhY3Jvc3NcbiAqIGFuIGFycmF5IG9mIG9iamVjdHMgY29udGFpbmluZyB0aG9zZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHF1b3RlcyAtIEEgc2FtcGxlIG9mIHF1b3RlIG9iamVjdHMgd2l0aCBvdmVyYWxsVmFsdWVPZlF1b3RlLCBldGhGZWUsIG1ldGFNYXNrRmVlSW5FdGggYW5kXG4gKiBldGhWYWx1ZU9mVG9rZW5zIHByb3BlcnRpZXNcbiAqIEByZXR1cm5zIHtvYmplY3R9IEFuIG9iamVjdCB3aXRoIHRoZSBhcml0aG1ldGljIG1lYW4gZWFjaCBvZiB0aGUgZXRoRmVlLCBtZXRhTWFza0ZlZUluRXRoIGFuZCBldGhWYWx1ZU9mVG9rZW5zIG9mXG4gKiB0aGUgcGFzc2VkIHF1b3RlIG9iamVjdHNcbiAqL1xuZnVuY3Rpb24gbWVhbnNPZlF1b3Rlc0ZlZXNBbmRWYWx1ZShxdW90ZXMpIHtcbiAgY29uc3QgZmVlQW5kVmFsdWVTdW1zQXNCaWdOdW1iZXJzID0gcXVvdGVzLnJlZHVjZShcbiAgICAoZmVlQW5kVmFsdWVTdW1zLCBxdW90ZSkgPT4gKHtcbiAgICAgIGV0aEZlZTogZmVlQW5kVmFsdWVTdW1zLmV0aEZlZS5wbHVzKHF1b3RlLmV0aEZlZSwgMTApLFxuICAgICAgbWV0YU1hc2tGZWVJbkV0aDogZmVlQW5kVmFsdWVTdW1zLm1ldGFNYXNrRmVlSW5FdGgucGx1cyhcbiAgICAgICAgcXVvdGUubWV0YU1hc2tGZWVJbkV0aCxcbiAgICAgICAgMTAsXG4gICAgICApLFxuICAgICAgZXRoVmFsdWVPZlRva2VuczogZmVlQW5kVmFsdWVTdW1zLmV0aFZhbHVlT2ZUb2tlbnMucGx1cyhcbiAgICAgICAgcXVvdGUuZXRoVmFsdWVPZlRva2VucyxcbiAgICAgICAgMTAsXG4gICAgICApLFxuICAgIH0pLFxuICAgIHtcbiAgICAgIGV0aEZlZTogbmV3IEJpZ051bWJlcigwLCAxMCksXG4gICAgICBtZXRhTWFza0ZlZUluRXRoOiBuZXcgQmlnTnVtYmVyKDAsIDEwKSxcbiAgICAgIGV0aFZhbHVlT2ZUb2tlbnM6IG5ldyBCaWdOdW1iZXIoMCwgMTApLFxuICAgIH0sXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICBldGhGZWU6IGZlZUFuZFZhbHVlU3Vtc0FzQmlnTnVtYmVycy5ldGhGZWVcbiAgICAgIC5kaXYocXVvdGVzLmxlbmd0aCwgMTApXG4gICAgICAudG9TdHJpbmcoMTApLFxuICAgIG1ldGFNYXNrRmVlSW5FdGg6IGZlZUFuZFZhbHVlU3Vtc0FzQmlnTnVtYmVycy5tZXRhTWFza0ZlZUluRXRoXG4gICAgICAuZGl2KHF1b3Rlcy5sZW5ndGgsIDEwKVxuICAgICAgLnRvU3RyaW5nKDEwKSxcbiAgICBldGhWYWx1ZU9mVG9rZW5zOiBmZWVBbmRWYWx1ZVN1bXNBc0JpZ051bWJlcnMuZXRoVmFsdWVPZlRva2Vuc1xuICAgICAgLmRpdihxdW90ZXMubGVuZ3RoLCAxMClcbiAgICAgIC50b1N0cmluZygxMCksXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCB1dGlscyA9IHtcbiAgZ2V0TWVkaWFuRXRoVmFsdWVRdW90ZSxcbiAgbWVhbnNPZlF1b3Rlc0ZlZXNBbmRWYWx1ZSxcbn07XG4iLCJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ0BtZXRhbWFzay9zYWZlLWV2ZW50LWVtaXR0ZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZVN0b3JlIH0gZnJvbSAnQG1ldGFtYXNrL29icy1zdG9yZSc7XG5pbXBvcnQgeyBidWZmZXJUb0hleCwga2VjY2FrLCB0b0J1ZmZlciwgaXNIZXhTdHJpbmcgfSBmcm9tICdldGhlcmV1bWpzLXV0aWwnO1xuaW1wb3J0IEV0aFF1ZXJ5IGZyb20gJ2V0aGpzLXF1ZXJ5JztcbmltcG9ydCB7IGV0aEVycm9ycyB9IGZyb20gJ2V0aC1ycGMtZXJyb3JzJztcbmltcG9ydCB7IENvbW1vbiwgSGFyZGZvcmsgfSBmcm9tICdAZXRoZXJldW1qcy9jb21tb24nO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb25GYWN0b3J5IH0gZnJvbSAnQGV0aGVyZXVtanMvdHgnO1xuaW1wb3J0IHsgQXBwcm92YWxUeXBlIH0gZnJvbSAnQG1ldGFtYXNrL2NvbnRyb2xsZXItdXRpbHMnO1xuaW1wb3J0IE5vbmNlVHJhY2tlciBmcm9tICdub25jZS10cmFja2VyJztcbmltcG9ydCBsb2cgZnJvbSAnbG9nbGV2ZWwnO1xuaW1wb3J0IEJpZ051bWJlciBmcm9tICdiaWdudW1iZXIuanMnO1xuaW1wb3J0IHsgbWVyZ2UsIHBpY2tCeSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgY2xlYW5FcnJvclN0YWNrIGZyb20gJy4uLy4uL2xpYi9jbGVhbkVycm9yU3RhY2snO1xuaW1wb3J0IHtcbiAgaGV4VG9CbixcbiAgQm5NdWx0aXBseUJ5RnJhY3Rpb24sXG4gIGFkZEhleFByZWZpeCxcbiAgZ2V0Q2hhaW5UeXBlLFxufSBmcm9tICcuLi8uLi9saWIvdXRpbCc7XG5pbXBvcnQge1xuICBUcmFuc2FjdGlvblN0YXR1cyxcbiAgVHJhbnNhY3Rpb25UeXBlLFxuICBUb2tlblN0YW5kYXJkLFxuICBUcmFuc2FjdGlvbkVudmVsb3BlVHlwZSxcbiAgVHJhbnNhY3Rpb25NZXRhTWV0cmljc0V2ZW50LFxuICBUcmFuc2FjdGlvbkFwcHJvdmFsQW1vdW50VHlwZSxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy90cmFuc2FjdGlvbic7XG5pbXBvcnQgeyBNRVRBTUFTS19DT05UUk9MTEVSX0VWRU5UUyB9IGZyb20gJy4uLy4uL21ldGFtYXNrLWNvbnRyb2xsZXInO1xuaW1wb3J0IHtcbiAgR0FTX0xJTUlUUyxcbiAgR2FzRXN0aW1hdGVUeXBlcyxcbiAgR2FzUmVjb21tZW5kYXRpb25zLFxuICBDVVNUT01fR0FTX0VTVElNQVRFLFxuICBQcmlvcml0eUxldmVscyxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9nYXMnO1xuaW1wb3J0IHtcbiAgYm5Ub0hleCxcbiAgZGVjR1dFSVRvSGV4V0VJLFxuICBoZXhXRUlUb0RlY0VUSCxcbiAgaGV4V0VJVG9EZWNHV0VJLFxufSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9jb252ZXJzaW9uLnV0aWxzJztcbmltcG9ydCB7IGlzU3dhcHNEZWZhdWx0VG9rZW5BZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvc3dhcHMudXRpbHMnO1xuaW1wb3J0IHsgTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9tZXRhbWV0cmljcyc7XG5pbXBvcnQge1xuICBDSEFJTl9JRF9UT19HQVNfTElNSVRfQlVGRkVSX01BUCxcbiAgTkVUV09SS19UWVBFUyxcbiAgTmV0d29ya1N0YXR1cyxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9uZXR3b3JrJztcbmltcG9ydCB7XG4gIGRldGVybWluZVRyYW5zYWN0aW9uQXNzZXRUeXBlLFxuICBkZXRlcm1pbmVUcmFuc2FjdGlvbkNvbnRyYWN0Q29kZSxcbiAgZGV0ZXJtaW5lVHJhbnNhY3Rpb25UeXBlLFxuICBpc0VJUDE1NTlUcmFuc2FjdGlvbixcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvdHJhbnNhY3Rpb24udXRpbHMnO1xuaW1wb3J0IHsgT1JJR0lOX01FVEFNQVNLIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9hcHAnO1xuaW1wb3J0IHtcbiAgY2FsY0dhc1RvdGFsLFxuICBnZXRTd2Fwc1Rva2Vuc1JlY2VpdmVkRnJvbVR4TWV0YSxcbiAgVFJBTlNBQ1RJT05fRU5WRUxPUEVfVFlQRV9OQU1FUyxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2xpYi90cmFuc2FjdGlvbnMtY29udHJvbGxlci11dGlscyc7XG5pbXBvcnQgeyBOdW1lcmljIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvTnVtZXJpYyc7XG5pbXBvcnQgVHJhbnNhY3Rpb25TdGF0ZU1hbmFnZXIgZnJvbSAnLi90eC1zdGF0ZS1tYW5hZ2VyJztcbmltcG9ydCBUeEdhc1V0aWwgZnJvbSAnLi90eC1nYXMtdXRpbHMnO1xuaW1wb3J0IFBlbmRpbmdUcmFuc2FjdGlvblRyYWNrZXIgZnJvbSAnLi9wZW5kaW5nLXR4LXRyYWNrZXInO1xuaW1wb3J0ICogYXMgdHhVdGlscyBmcm9tICcuL2xpYi91dGlsJztcblxuY29uc3QgTUFYX01FTVNUT1JFX1RYX0xJU1RfU0laRSA9IDEwMDsgLy8gTnVtYmVyIG9mIHRyYW5zYWN0aW9ucyAoYnkgdW5pcXVlIG5vbmNlcykgdG8ga2VlcCBpbiBtZW1vcnlcbmNvbnN0IFVQREFURV9QT1NUX1RYX0JBTEFOQ0VfVElNRU9VVCA9IDUwMDA7XG5cbmNvbnN0IFNXQVBfVFJBTlNBQ1RJT05fVFlQRVMgPSBbXG4gIFRyYW5zYWN0aW9uVHlwZS5zd2FwLFxuICBUcmFuc2FjdGlvblR5cGUuc3dhcEFwcHJvdmFsLFxuXTtcblxuLy8gT25seSBjZXJ0YWluIHR5cGVzIG9mIHRyYW5zYWN0aW9ucyBzaG91bGQgYmUgYWxsb3dlZCB0byBiZSBzcGVjaWZpZWQgd2hlblxuLy8gYWRkaW5nIGEgbmV3IHVuYXBwcm92ZWQgdHJhbnNhY3Rpb24uXG5jb25zdCBWQUxJRF9VTkFQUFJPVkVEX1RSQU5TQUNUSU9OX1RZUEVTID0gW1xuICAuLi5TV0FQX1RSQU5TQUNUSU9OX1RZUEVTLFxuICBUcmFuc2FjdGlvblR5cGUuc2ltcGxlU2VuZCxcbiAgVHJhbnNhY3Rpb25UeXBlLnRva2VuTWV0aG9kVHJhbnNmZXIsXG4gIFRyYW5zYWN0aW9uVHlwZS50b2tlbk1ldGhvZFRyYW5zZmVyRnJvbSxcbiAgVHJhbnNhY3Rpb25UeXBlLmNvbnRyYWN0SW50ZXJhY3Rpb24sXG5dO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdHJhbnNhY3Rpb24nKS5UcmFuc2FjdGlvbk1ldGF9IFRyYW5zYWN0aW9uTWV0YVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9nYXMnKS5UeEdhc0ZlZXN9IFR4R2FzRmVlc1xuICovXG5cbmNvbnN0IE1FVFJJQ1NfU1RBVFVTX0ZBSUxFRCA9ICdmYWlsZWQgb24tY2hhaW4nO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IEN1c3RvbUdhc1NldHRpbmdzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2dhc10gLSBUaGUgZ2FzIGxpbWl0IHRvIHVzZSBmb3IgdGhlIHRyYW5zYWN0aW9uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2dhc1ByaWNlXSAtIFRoZSBnYXNQcmljZSB0byB1c2UgZm9yIGEgbGVnYWN5IHRyYW5zYWN0aW9uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW21heEZlZVBlckdhc10gLSBUaGUgbWF4aW11bSBhbW91bnQgdG8gcGF5IHBlciBnYXMgb24gYVxuICogIEVJUC0xNTU5IHRyYW5zYWN0aW9uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW21heFByaW9yaXR5RmVlUGVyR2FzXSAtIFRoZSBtYXhpbXVtIGFtb3VudCBvZiBwYWlkIGZlZVxuICogIHRvIGJlIGRpc3RyaWJ1dGVkIHRvIG1pbmVyIGluIGFuIEVJUC0xNTU5IHRyYW5zYWN0aW9uXG4gKi9cblxuLyoqXG4gKiBUcmFuc2FjdGlvbiBDb250cm9sbGVyIGlzIGFuIGFnZ3JlZ2F0ZSBvZiBzdWItY29udHJvbGxlcnMgYW5kIHRyYWNrZXJzXG4gKiBjb21wb3NpbmcgdGhlbSBpbiBhIHdheSB0byBiZSBleHBvc2VkIHRvIHRoZSBtZXRhbWFzayBjb250cm9sbGVyXG4gKlxuICogLSBgdHhTdGF0ZU1hbmFnZXJcbiAqIHJlc3BvbnNpYmxlIGZvciB0aGUgc3RhdGUgb2YgYSB0cmFuc2FjdGlvbiBhbmRcbiAqIHN0b3JpbmcgdGhlIHRyYW5zYWN0aW9uXG4gKiAtIHBlbmRpbmdUeFRyYWNrZXJcbiAqIHdhdGNoaW5nIGJsb2NrcyBmb3IgdHJhbnNhY3Rpb25zIHRvIGJlIGluY2x1ZGVcbiAqIGFuZCBlbWl0dGluZyBjb25maXJtZWQgZXZlbnRzXG4gKiAtIHR4R2FzVXRpbFxuICogZ2FzIGNhbGN1bGF0aW9ucyBhbmQgc2FmZXR5IGJ1ZmZlcmluZ1xuICogLSBub25jZVRyYWNrZXJcbiAqIGNhbGN1bGF0aW5nIG5vbmNlc1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cy5pbml0U3RhdGUgLSBpbml0aWFsIHRyYW5zYWN0aW9uIGxpc3QgZGVmYXVsdCBpcyBhbiBlbXB0eSBhcnJheVxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0cy5nZXROZXR3b3JrSWQgLSBHZXQgdGhlIGN1cnJlbnQgbmV0d29yayBJRC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdHMuZ2V0TmV0d29ya1N0YXR1cyAtIEdldCB0aGUgY3VycmVudCBuZXR3b3JrIHN0YXR1cy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdHMub25OZXR3b3JrU3RhdGVDaGFuZ2UgLSBTdWJzY3JpYmUgdG8gbmV0d29yayBzdGF0ZSBjaGFuZ2UgZXZlbnRzLlxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMuYmxvY2tUcmFja2VyIC0gQW4gaW5zdGFuY2Ugb2YgZXRoLWJsb2NrdHJhY2tlclxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMucHJvdmlkZXIgLSBBIG5ldHdvcmsgcHJvdmlkZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRzLnNpZ25UcmFuc2FjdGlvbiAtIGZ1bmN0aW9uIHRoZSBzaWducyBhbiBAZXRoZXJldW1qcy90eFxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMuZ2V0UGVybWl0dGVkQWNjb3VudHMgLSBnZXQgYWNjb3VudHMgdGhhdCBhbiBvcmlnaW4gaGFzIHBlcm1pc3Npb25zIGZvclxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0cy5zaWduVHJhbnNhY3Rpb24gLSBldGhUeCBzaWduZXIgdGhhdCByZXR1cm5zIGEgcmF3VHhcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy50eEhpc3RvcnlMaW1pdF0gLSBudW1iZXIgKm9wdGlvbmFsKiBmb3IgbGltaXRpbmcgaG93IG1hbnkgdHJhbnNhY3Rpb25zIGFyZSBpbiBzdGF0ZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMucHJlZmVyZW5jZXNTdG9yZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zYWN0aW9uQ29udHJvbGxlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZ2V0TmV0d29ya0lkID0gb3B0cy5nZXROZXR3b3JrSWQ7XG4gICAgdGhpcy5nZXROZXR3b3JrU3RhdHVzID0gb3B0cy5nZXROZXR3b3JrU3RhdHVzO1xuICAgIHRoaXMuX2dldEN1cnJlbnRDaGFpbklkID0gb3B0cy5nZXRDdXJyZW50Q2hhaW5JZDtcbiAgICB0aGlzLmdldFByb3ZpZGVyQ29uZmlnID0gb3B0cy5nZXRQcm92aWRlckNvbmZpZztcbiAgICB0aGlzLl9nZXRDdXJyZW50TmV0d29ya0VJUDE1NTlDb21wYXRpYmlsaXR5ID1cbiAgICAgIG9wdHMuZ2V0Q3VycmVudE5ldHdvcmtFSVAxNTU5Q29tcGF0aWJpbGl0eTtcbiAgICB0aGlzLl9nZXRDdXJyZW50QWNjb3VudEVJUDE1NTlDb21wYXRpYmlsaXR5ID1cbiAgICAgIG9wdHMuZ2V0Q3VycmVudEFjY291bnRFSVAxNTU5Q29tcGF0aWJpbGl0eTtcbiAgICB0aGlzLnByZWZlcmVuY2VzU3RvcmUgPSBvcHRzLnByZWZlcmVuY2VzU3RvcmUgfHwgbmV3IE9ic2VydmFibGVTdG9yZSh7fSk7XG4gICAgdGhpcy5wcm92aWRlciA9IG9wdHMucHJvdmlkZXI7XG4gICAgdGhpcy5nZXRQZXJtaXR0ZWRBY2NvdW50cyA9IG9wdHMuZ2V0UGVybWl0dGVkQWNjb3VudHM7XG4gICAgdGhpcy5ibG9ja1RyYWNrZXIgPSBvcHRzLmJsb2NrVHJhY2tlcjtcbiAgICB0aGlzLnNpZ25FdGhUeCA9IG9wdHMuc2lnblRyYW5zYWN0aW9uO1xuICAgIHRoaXMuaW5Qcm9jZXNzT2ZTaWduaW5nID0gbmV3IFNldCgpO1xuICAgIHRoaXMuX3RyYWNrTWV0YU1ldHJpY3NFdmVudCA9IG9wdHMudHJhY2tNZXRhTWV0cmljc0V2ZW50O1xuICAgIHRoaXMuX2dldFBhcnRpY2lwYXRlSW5NZXRyaWNzID0gb3B0cy5nZXRQYXJ0aWNpcGF0ZUluTWV0cmljcztcbiAgICB0aGlzLl9nZXRFSVAxNTU5R2FzRmVlRXN0aW1hdGVzID0gb3B0cy5nZXRFSVAxNTU5R2FzRmVlRXN0aW1hdGVzO1xuICAgIHRoaXMuY3JlYXRlRXZlbnRGcmFnbWVudCA9IG9wdHMuY3JlYXRlRXZlbnRGcmFnbWVudDtcbiAgICB0aGlzLnVwZGF0ZUV2ZW50RnJhZ21lbnQgPSBvcHRzLnVwZGF0ZUV2ZW50RnJhZ21lbnQ7XG4gICAgdGhpcy5maW5hbGl6ZUV2ZW50RnJhZ21lbnQgPSBvcHRzLmZpbmFsaXplRXZlbnRGcmFnbWVudDtcbiAgICB0aGlzLmdldEV2ZW50RnJhZ21lbnRCeUlkID0gb3B0cy5nZXRFdmVudEZyYWdtZW50QnlJZDtcbiAgICB0aGlzLmdldERldmljZU1vZGVsID0gb3B0cy5nZXREZXZpY2VNb2RlbDtcbiAgICB0aGlzLmdldEFjY291bnRUeXBlID0gb3B0cy5nZXRBY2NvdW50VHlwZTtcbiAgICB0aGlzLmdldFRva2VuU3RhbmRhcmRBbmREZXRhaWxzID0gb3B0cy5nZXRUb2tlblN0YW5kYXJkQW5kRGV0YWlscztcbiAgICB0aGlzLnNlY3VyaXR5UHJvdmlkZXJSZXF1ZXN0ID0gb3B0cy5zZWN1cml0eVByb3ZpZGVyUmVxdWVzdDtcbiAgICB0aGlzLm1lc3NhZ2luZ1N5c3RlbSA9IG9wdHMubWVzc2VuZ2VyO1xuXG4gICAgdGhpcy5tZW1TdG9yZSA9IG5ldyBPYnNlcnZhYmxlU3RvcmUoe30pO1xuXG4gICAgdGhpcy5yZXNldFN0YXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5fdXBkYXRlTWVtc3RvcmUoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5xdWVyeSA9IG5ldyBFdGhRdWVyeSh0aGlzLnByb3ZpZGVyKTtcblxuICAgIHRoaXMudHhHYXNVdGlsID0gbmV3IFR4R2FzVXRpbCh0aGlzLnByb3ZpZGVyKTtcbiAgICB0aGlzLl9tYXBNZXRob2RzKCk7XG4gICAgdGhpcy50eFN0YXRlTWFuYWdlciA9IG5ldyBUcmFuc2FjdGlvblN0YXRlTWFuYWdlcih7XG4gICAgICBpbml0U3RhdGU6IG9wdHMuaW5pdFN0YXRlLFxuICAgICAgdHhIaXN0b3J5TGltaXQ6IG9wdHMudHhIaXN0b3J5TGltaXQsXG4gICAgICBnZXROZXR3b3JrSWQ6IHRoaXMuZ2V0TmV0d29ya0lkLFxuICAgICAgZ2V0TmV0d29ya1N0YXR1czogdGhpcy5nZXROZXR3b3JrU3RhdHVzLFxuICAgICAgZ2V0Q3VycmVudENoYWluSWQ6IG9wdHMuZ2V0Q3VycmVudENoYWluSWQsXG4gICAgfSk7XG5cbiAgICB0aGlzLnN0b3JlID0gdGhpcy50eFN0YXRlTWFuYWdlci5zdG9yZTtcbiAgICB0aGlzLm5vbmNlVHJhY2tlciA9IG5ldyBOb25jZVRyYWNrZXIoe1xuICAgICAgcHJvdmlkZXI6IHRoaXMucHJvdmlkZXIsXG4gICAgICBibG9ja1RyYWNrZXI6IHRoaXMuYmxvY2tUcmFja2VyLFxuICAgICAgZ2V0UGVuZGluZ1RyYW5zYWN0aW9uczogKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgcGVuZGluZ1RyYW5zYWN0aW9ucyA9IHRoaXMudHhTdGF0ZU1hbmFnZXIuZ2V0UGVuZGluZ1RyYW5zYWN0aW9ucyhcbiAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBleHRlcm5hbFBlbmRpbmdUcmFuc2FjdGlvbnMgPSBvcHRzLmdldEV4dGVybmFsUGVuZGluZ1RyYW5zYWN0aW9ucyhcbiAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gWy4uLnBlbmRpbmdUcmFuc2FjdGlvbnMsIC4uLmV4dGVybmFsUGVuZGluZ1RyYW5zYWN0aW9uc107XG4gICAgICB9LFxuICAgICAgZ2V0Q29uZmlybWVkVHJhbnNhY3Rpb25zOlxuICAgICAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLmdldENvbmZpcm1lZFRyYW5zYWN0aW9ucy5iaW5kKHRoaXMudHhTdGF0ZU1hbmFnZXIpLFxuICAgIH0pO1xuXG4gICAgdGhpcy5wZW5kaW5nVHhUcmFja2VyID0gbmV3IFBlbmRpbmdUcmFuc2FjdGlvblRyYWNrZXIoe1xuICAgICAgcHJvdmlkZXI6IHRoaXMucHJvdmlkZXIsXG4gICAgICBub25jZVRyYWNrZXI6IHRoaXMubm9uY2VUcmFja2VyLFxuICAgICAgcHVibGlzaFRyYW5zYWN0aW9uOiAocmF3VHgpID0+IHRoaXMucXVlcnkuc2VuZFJhd1RyYW5zYWN0aW9uKHJhd1R4KSxcbiAgICAgIGdldFBlbmRpbmdUcmFuc2FjdGlvbnM6ICgpID0+IHtcbiAgICAgICAgY29uc3QgcGVuZGluZyA9IHRoaXMudHhTdGF0ZU1hbmFnZXIuZ2V0UGVuZGluZ1RyYW5zYWN0aW9ucygpO1xuICAgICAgICBjb25zdCBhcHByb3ZlZCA9IHRoaXMudHhTdGF0ZU1hbmFnZXIuZ2V0QXBwcm92ZWRUcmFuc2FjdGlvbnMoKTtcbiAgICAgICAgcmV0dXJuIFsuLi5wZW5kaW5nLCAuLi5hcHByb3ZlZF07XG4gICAgICB9LFxuICAgICAgYXBwcm92ZVRyYW5zYWN0aW9uOiB0aGlzLmFwcHJvdmVUcmFuc2FjdGlvbi5iaW5kKHRoaXMpLFxuICAgICAgZ2V0Q29tcGxldGVkVHJhbnNhY3Rpb25zOlxuICAgICAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLmdldENvbmZpcm1lZFRyYW5zYWN0aW9ucy5iaW5kKHRoaXMudHhTdGF0ZU1hbmFnZXIpLFxuICAgIH0pO1xuXG4gICAgdGhpcy50eFN0YXRlTWFuYWdlci5zdG9yZS5zdWJzY3JpYmUoKCkgPT5cbiAgICAgIHRoaXMuZW1pdChNRVRBTUFTS19DT05UUk9MTEVSX0VWRU5UUy5VUERBVEVfQkFER0UpLFxuICAgICk7XG4gICAgdGhpcy5fc2V0dXBMaXN0ZW5lcnMoKTtcbiAgICAvLyBtZW1zdG9yZSBpcyBjb21wdXRlZCBmcm9tIGEgZmV3IGRpZmZlcmVudCBzdG9yZXNcbiAgICB0aGlzLl91cGRhdGVNZW1zdG9yZSgpO1xuICAgIHRoaXMudHhTdGF0ZU1hbmFnZXIuc3RvcmUuc3Vic2NyaWJlKCgpID0+IHRoaXMuX3VwZGF0ZU1lbXN0b3JlKCkpO1xuICAgIG9wdHMub25OZXR3b3JrU3RhdGVDaGFuZ2UoKCkgPT4ge1xuICAgICAgdGhpcy5fb25Cb290Q2xlYW5VcCgpO1xuICAgICAgdGhpcy5fdXBkYXRlTWVtc3RvcmUoKTtcbiAgICB9KTtcblxuICAgIC8vIHJlcXVlc3Qgc3RhdGUgdXBkYXRlIHRvIGZpbmFsaXplIGluaXRpYWxpemF0aW9uXG4gICAgdGhpcy5fdXBkYXRlUGVuZGluZ1R4c0FmdGVyRmlyc3RCbG9jaygpO1xuICAgIHRoaXMuX29uQm9vdENsZWFuVXAoKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgY2hhaW5JZCBpbiB0aGUgbmV0d29yayBzdG9yZSBhcyBhIG51bWJlciwgcmV0dXJuaW5nIDAgaWZcbiAgICogdGhlIGNoYWluSWQgcGFyc2VzIHRvIE5hTi5cbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn0gVGhlIG51bWVyaWNhbCBjaGFpbklkLlxuICAgKi9cbiAgZ2V0Q2hhaW5JZCgpIHtcbiAgICBjb25zdCBuZXR3b3JrU3RhdHVzID0gdGhpcy5nZXROZXR3b3JrU3RhdHVzKCk7XG4gICAgY29uc3QgY2hhaW5JZCA9IHRoaXMuX2dldEN1cnJlbnRDaGFpbklkKCk7XG4gICAgY29uc3QgaW50ZWdlckNoYWluSWQgPSBwYXJzZUludChjaGFpbklkLCAxNik7XG4gICAgaWYgKFxuICAgICAgbmV0d29ya1N0YXR1cyAhPT0gTmV0d29ya1N0YXR1cy5BdmFpbGFibGUgfHxcbiAgICAgIE51bWJlci5pc05hTihpbnRlZ2VyQ2hhaW5JZClcbiAgICApIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gaW50ZWdlckNoYWluSWQ7XG4gIH1cblxuICBhc3luYyBnZXRFSVAxNTU5Q29tcGF0aWJpbGl0eShmcm9tQWRkcmVzcykge1xuICAgIGNvbnN0IGN1cnJlbnROZXR3b3JrSXNDb21wYXRpYmxlID1cbiAgICAgIGF3YWl0IHRoaXMuX2dldEN1cnJlbnROZXR3b3JrRUlQMTU1OUNvbXBhdGliaWxpdHkoKTtcbiAgICBjb25zdCBmcm9tQWNjb3VudElzQ29tcGF0aWJsZSA9XG4gICAgICBhd2FpdCB0aGlzLl9nZXRDdXJyZW50QWNjb3VudEVJUDE1NTlDb21wYXRpYmlsaXR5KGZyb21BZGRyZXNzKTtcbiAgICByZXR1cm4gY3VycmVudE5ldHdvcmtJc0NvbXBhdGlibGUgJiYgZnJvbUFjY291bnRJc0NvbXBhdGlibGU7XG4gIH1cblxuICAvKipcbiAgICogYEBldGhlcmV1bWpzL3R4YCB1c2VzIGBAZXRoZXJldW1qcy9jb21tb25gIGFzIGEgY29uZmlndXJhdGlvbiB0b29sIGZvclxuICAgKiBzcGVjaWZ5aW5nIHdoaWNoIGNoYWluLCBuZXR3b3JrLCBoYXJkZm9yayBhbmQgRUlQcyB0byBzdXBwb3J0IGZvclxuICAgKiBhIHRyYW5zYWN0aW9uLiBCeSByZWZlcmVuY2luZyB0aGlzIGNvbmZpZ3VyYXRpb24sIGFuZCBhbmFseXppbmcgdGhlIGZpZWxkc1xuICAgKiBzcGVjaWZpZWQgaW4gdHhQYXJhbXMsIGBAZXRoZXJldW1qcy90eGAgaXMgYWJsZSB0byBkZXRlcm1pbmUgd2hpY2ggRUlQLTI3MThcbiAgICogdHJhbnNhY3Rpb24gdHlwZSB0byB1c2UuXG4gICAqXG4gICAqIEBwYXJhbSBmcm9tQWRkcmVzc1xuICAgKiBAcmV0dXJucyB7Q29tbW9ufSBjb21tb24gY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICovXG4gIGFzeW5jIGdldENvbW1vbkNvbmZpZ3VyYXRpb24oZnJvbUFkZHJlc3MpIHtcbiAgICBjb25zdCB7IHR5cGUsIG5pY2tuYW1lOiBuYW1lIH0gPSB0aGlzLmdldFByb3ZpZGVyQ29uZmlnKCk7XG4gICAgY29uc3Qgc3VwcG9ydHNFSVAxNTU5ID0gYXdhaXQgdGhpcy5nZXRFSVAxNTU5Q29tcGF0aWJpbGl0eShmcm9tQWRkcmVzcyk7XG5cbiAgICAvLyBUaGlzIGxvZ2ljIGJlbG93IHdpbGwgaGF2ZSB0byBiZSB1cGRhdGVkIGVhY2ggdGltZSBhIGhhcmRmb3JrIGhhcHBlbnNcbiAgICAvLyB0aGF0IGNhcnJpZXMgd2l0aCBpdCBhIG5ldyBUcmFuc2FjdGlvbiB0eXBlLiBJdCBpcyBpbmNvbnNlcXVlbnRpYWwgZm9yXG4gICAgLy8gaGFyZGZvcmtzIHRoYXQgZG8gbm90IGluY2x1ZGUgbmV3IHR5cGVzLlxuICAgIGNvbnN0IGhhcmRmb3JrID0gc3VwcG9ydHNFSVAxNTU5ID8gSGFyZGZvcmsuTG9uZG9uIDogSGFyZGZvcmsuQmVybGluO1xuXG4gICAgLy8gdHlwZSB3aWxsIGJlIG9uZSBvZiBvdXIgZGVmYXVsdCBuZXR3b3JrIG5hbWVzIG9yICdycGMnLiB0aGUgZGVmYXVsdFxuICAgIC8vIG5ldHdvcmsgbmFtZXMgYXJlIHN1ZmZpY2llbnQgY29uZmlndXJhdGlvbiwgc2ltcGx5IHBhc3MgdGhlIG5hbWUgYXMgdGhlXG4gICAgLy8gY2hhaW4gYXJndW1lbnQgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgIGlmICh0eXBlICE9PSBORVRXT1JLX1RZUEVTLlJQQyAmJiB0eXBlICE9PSBORVRXT1JLX1RZUEVTLlNFUE9MSUEpIHtcbiAgICAgIHJldHVybiBuZXcgQ29tbW9uKHtcbiAgICAgICAgY2hhaW46IHR5cGUsXG4gICAgICAgIGhhcmRmb3JrLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRm9yICdycGMnIHdlIG5lZWQgdG8gdXNlIHRoZSBzYW1lIGJhc2ljIGNvbmZpZ3VyYXRpb24gYXMgbWFpbm5ldCwgc2luY2VcbiAgICAvLyB3ZSBvbmx5IHN1cHBvcnQgRVZNIGNvbXBhdGlibGUgY2hhaW5zLCBhbmQgdGhlbiBvdmVycmlkZSB0aGVcbiAgICAvLyBuYW1lLCBjaGFpbklkIGFuZCBuZXR3b3JrSWQgcHJvcGVydGllcy4gVGhpcyBpcyBkb25lIHVzaW5nIHRoZVxuICAgIC8vIGBmb3JDdXN0b21DaGFpbmAgc3RhdGljIG1ldGhvZCBvbiB0aGUgQ29tbW9uIGNsYXNzLlxuICAgIGNvbnN0IGNoYWluSWQgPSBwYXJzZUludCh0aGlzLl9nZXRDdXJyZW50Q2hhaW5JZCgpLCAxNik7XG4gICAgY29uc3QgbmV0d29ya1N0YXR1cyA9IHRoaXMuZ2V0TmV0d29ya1N0YXR1cygpO1xuICAgIGNvbnN0IG5ldHdvcmtJZCA9IHRoaXMuZ2V0TmV0d29ya0lkKCk7XG5cbiAgICByZXR1cm4gQ29tbW9uLmN1c3RvbSh7XG4gICAgICBuYW1lLFxuICAgICAgY2hhaW5JZCxcbiAgICAgIC8vIEl0IGlzIGltcHJvYmFibGUgZm9yIGEgdHJhbnNhY3Rpb24gdG8gYmUgc2lnbmVkIHdoaWxlIHRoZSBuZXR3b3JrXG4gICAgICAvLyBpcyBsb2FkaW5nIGZvciB0d28gcmVhc29ucy5cbiAgICAgIC8vIDEuIFBlbmRpbmcsIHVuY29uZmlybWVkIHRyYW5zYWN0aW9ucyBhcmUgd2lwZWQgb24gbmV0d29yayBjaGFuZ2VcbiAgICAgIC8vIDIuIFRoZSBVSSBpcyB1bnVzYWJsZSAobG9hZGluZyBpbmRpY2F0b3IpIHdoZW4gbmV0d29yayBpcyBsb2FkaW5nLlxuICAgICAgLy8gc2V0dGluZyB0aGUgbmV0d29ya0lkIHRvIDAgaXMgZm9yIHR5cGUgc2FmZXR5IGFuZCB0byBleHBsaWNpdHkgbGVhZFxuICAgICAgLy8gdGhlIHRyYW5zYWN0aW9uIHRvIGZhaWxpbmcgaWYgYSB1c2VyIGlzIGFibGUgdG8gZ2V0IHRvIHRoaXMgYnJhbmNoXG4gICAgICAvLyBvbiBhIGN1c3RvbSBuZXR3b3JrIHRoYXQgcmVxdWlyZXMgdmFsaWQgbmV0d29yayBpZC4gSSBoYXZlIG5vdCByYW5cbiAgICAgIC8vIGludG8gdGhpcyBsaW1pdGF0aW9uIG9uIGFueSBuZXR3b3JrIEkgaGF2ZSBhdHRlbXB0ZWQsIGV2ZW4gd2hlblxuICAgICAgLy8gaGFyZGNvZGluZyBuZXR3b3JrSWQgdG8gJ2xvYWRpbmcnLlxuICAgICAgbmV0d29ya0lkOlxuICAgICAgICBuZXR3b3JrU3RhdHVzID09PSBOZXR3b3JrU3RhdHVzLkF2YWlsYWJsZSA/IHBhcnNlSW50KG5ldHdvcmtJZCwgMTApIDogMCxcbiAgICAgIGhhcmRmb3JrLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSB0eCB0byB0aGUgdHhsaXN0XG4gICAqXG4gICAqIEBwYXJhbSB0eE1ldGFcbiAgICogQGZpcmVzICR7dHhNZXRhLmlkfTp1bmFwcHJvdmVkXG4gICAqL1xuICBhZGRUcmFuc2FjdGlvbih0eE1ldGEpIHtcbiAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLmFkZFRyYW5zYWN0aW9uKHR4TWV0YSk7XG4gICAgdGhpcy5lbWl0KGAke3R4TWV0YS5pZH06dW5hcHByb3ZlZGAsIHR4TWV0YSk7XG4gICAgdGhpcy5fdHJhY2tUcmFuc2FjdGlvbk1ldHJpY3NFdmVudChcbiAgICAgIHR4TWV0YSxcbiAgICAgIFRyYW5zYWN0aW9uTWV0YU1ldHJpY3NFdmVudC5hZGRlZCxcbiAgICAgIHR4TWV0YS5hY3Rpb25JZCxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFdpcGVzIHRoZSB0cmFuc2FjdGlvbnMgZm9yIGEgZ2l2ZW4gYWNjb3VudFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzcyAtIGhleCBzdHJpbmcgb2YgdGhlIGZyb20gYWRkcmVzcyBmb3IgdHhzIGJlaW5nIHJlbW92ZWRcbiAgICovXG4gIHdpcGVUcmFuc2FjdGlvbnMoYWRkcmVzcykge1xuICAgIHRoaXMudHhTdGF0ZU1hbmFnZXIud2lwZVRyYW5zYWN0aW9ucyhhZGRyZXNzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgdW5hcHByb3ZlZCB0cmFuc2FjdGlvbiB0byB0aGUgcGlwZWxpbmVcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gdGhlIGhhc2ggb2YgdGhlIHRyYW5zYWN0aW9uIGFmdGVyIGJlaW5nIHN1Ym1pdHRlZCB0byB0aGUgbmV0d29ya1xuICAgKiBAcGFyYW0ge29iamVjdH0gdHhQYXJhbXMgLSB0eFBhcmFtcyBmb3IgdGhlIHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gd2l0aCB0aGUga2V5IG9yaWdpbiB0byBwdXQgdGhlIG9yaWdpbiBvbiB0aGUgdHhNZXRhXG4gICAqL1xuICBhc3luYyBuZXdVbmFwcHJvdmVkVHJhbnNhY3Rpb24odHhQYXJhbXMsIG9wdHMgPSB7fSkge1xuICAgIGxvZy5kZWJ1ZyhcbiAgICAgIGBNZXRhTWFza0NvbnRyb2xsZXIgbmV3VW5hcHByb3ZlZFRyYW5zYWN0aW9uICR7SlNPTi5zdHJpbmdpZnkodHhQYXJhbXMpfWAsXG4gICAgKTtcblxuICAgIGNvbnN0IGluaXRpYWxUeE1ldGEgPSBhd2FpdCB0aGlzLmFkZFVuYXBwcm92ZWRUcmFuc2FjdGlvbihcbiAgICAgIG9wdHMubWV0aG9kLFxuICAgICAgdHhQYXJhbXMsXG4gICAgICBvcHRzLm9yaWdpbixcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIG9wdHMuaWQsXG4gICAgKTtcblxuICAgIC8vIGxpc3RlbiBmb3IgdHggY29tcGxldGlvbiAoc3VjY2VzcywgZmFpbClcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy50eFN0YXRlTWFuYWdlci5vbmNlKFxuICAgICAgICBgJHtpbml0aWFsVHhNZXRhLmlkfTpmaW5pc2hlZGAsXG4gICAgICAgIChmaW5pc2hlZFR4TWV0YSkgPT4ge1xuICAgICAgICAgIHN3aXRjaCAoZmluaXNoZWRUeE1ldGEuc3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIFRyYW5zYWN0aW9uU3RhdHVzLnN1Ym1pdHRlZDpcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZmluaXNoZWRUeE1ldGEuaGFzaCk7XG4gICAgICAgICAgICBjYXNlIFRyYW5zYWN0aW9uU3RhdHVzLnJlamVjdGVkOlxuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KFxuICAgICAgICAgICAgICAgIGNsZWFuRXJyb3JTdGFjayhcbiAgICAgICAgICAgICAgICAgIGV0aEVycm9ycy5wcm92aWRlci51c2VyUmVqZWN0ZWRSZXF1ZXN0KFxuICAgICAgICAgICAgICAgICAgICAnTWV0YU1hc2sgVHggU2lnbmF0dXJlOiBVc2VyIGRlbmllZCB0cmFuc2FjdGlvbiBzaWduYXR1cmUuJyxcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNhc2UgVHJhbnNhY3Rpb25TdGF0dXMuZmFpbGVkOlxuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KFxuICAgICAgICAgICAgICAgIGNsZWFuRXJyb3JTdGFjayhcbiAgICAgICAgICAgICAgICAgIGV0aEVycm9ycy5ycGMuaW50ZXJuYWwoZmluaXNoZWRUeE1ldGEuZXJyLm1lc3NhZ2UpLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KFxuICAgICAgICAgICAgICAgIGNsZWFuRXJyb3JTdGFjayhcbiAgICAgICAgICAgICAgICAgIGV0aEVycm9ycy5ycGMuaW50ZXJuYWwoXG4gICAgICAgICAgICAgICAgICAgIGBNZXRhTWFzayBUeCBTaWduYXR1cmU6IFVua25vd24gcHJvYmxlbTogJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hlZFR4TWV0YS50eFBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgKX1gLFxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhcHByb3ZhbHMgZm9yIGFsbCB1bmFwcHJvdmVkIHRyYW5zYWN0aW9ucyBpbiB0aGUgdHhTdGF0ZU1hbmFnZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgYXN5bmMgaW5pdEFwcHJvdmFscygpIHtcbiAgICBjb25zdCB1bmFwcHJvdmVkVHhzID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZXRVbmFwcHJvdmVkVHhMaXN0KCk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgT2JqZWN0LnZhbHVlcyh1bmFwcHJvdmVkVHhzKS5tYXAoKHR4TWV0YSkgPT5cbiAgICAgICAgdGhpcy5fcmVxdWVzdEFwcHJvdmFsKHR4TWV0YSwge1xuICAgICAgICAgIHNob3VsZFNob3dSZXF1ZXN0OiBmYWxzZSxcbiAgICAgICAgfSksXG4gICAgICApLFxuICAgICk7XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0eElkXG4gICAqIEByZXR1cm5zIHtUcmFuc2FjdGlvbk1ldGF9IHRoZSB0eE1ldGEgd2hvIG1hdGNoZXMgdGhlIGdpdmVuIGlkIGlmIG5vbmUgZm91bmRcbiAgICogZm9yIHRoZSBuZXR3b3JrIHJldHVybnMgdW5kZWZpbmVkXG4gICAqL1xuICBfZ2V0VHJhbnNhY3Rpb24odHhJZCkge1xuICAgIGNvbnN0IHsgdHJhbnNhY3Rpb25zIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uc1t0eElkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdHhJZFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIF9pc1VuYXBwcm92ZWRUcmFuc2FjdGlvbih0eElkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMudHhTdGF0ZU1hbmFnZXIuZ2V0VHJhbnNhY3Rpb24odHhJZCkuc3RhdHVzID09PVxuICAgICAgVHJhbnNhY3Rpb25TdGF0dXMudW5hcHByb3ZlZFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IHR4SWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZuTmFtZVxuICAgKi9cbiAgX3Rocm93RXJyb3JJZk5vdFVuYXBwcm92ZWRUeCh0eElkLCBmbk5hbWUpIHtcbiAgICBpZiAoIXRoaXMuX2lzVW5hcHByb3ZlZFRyYW5zYWN0aW9uKHR4SWQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBUcmFuc2FjdGlvbnNDb250cm9sbGVyOiBDYW4gb25seSBjYWxsICR7Zm5OYW1lfSBvbiBhbiB1bmFwcHJvdmVkIHRyYW5zYWN0aW9uLlxuICAgICAgICAgQ3VycmVudCB0eCBzdGF0dXM6ICR7dGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbih0eElkKS5zdGF0dXN9YCxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgX3VwZGF0ZVRyYW5zYWN0aW9uKHR4SWQsIHByb3Bvc2VkVXBkYXRlLCBub3RlKSB7XG4gICAgY29uc3QgdHhNZXRhID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbih0eElkKTtcbiAgICBjb25zdCB1cGRhdGVkID0gbWVyZ2UodHhNZXRhLCBwcm9wb3NlZFVwZGF0ZSk7XG4gICAgdGhpcy50eFN0YXRlTWFuYWdlci51cGRhdGVUcmFuc2FjdGlvbih1cGRhdGVkLCBub3RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1cGRhdGVzIHRoZSBwYXJhbXMgdGhhdCBhcmUgZWRpdGlibGUgaW4gdGhlIHNlbmQgZWRpdCBmbG93XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eElkIC0gdHJhbnNhY3Rpb24gaWRcbiAgICogQHBhcmFtIHtvYmplY3R9IHByZXZpb3VzR2FzUGFyYW1zIC0gaG9sZHMgdGhlIHBhcmFtZXRlciB0byB1cGRhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByZXZpb3VzR2FzUGFyYW1zLm1heEZlZVBlckdhc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJldmlvdXNHYXNQYXJhbXMubWF4UHJpb3JpdHlGZWVQZXJHYXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByZXZpb3VzR2FzUGFyYW1zLmdhc0xpbWl0XG4gICAqIEByZXR1cm5zIHtUcmFuc2FjdGlvbk1ldGF9IHRoZSB0eE1ldGEgb2YgdGhlIHVwZGF0ZWQgdHJhbnNhY3Rpb25cbiAgICovXG4gIHVwZGF0ZVByZXZpb3VzR2FzUGFyYW1zKFxuICAgIHR4SWQsXG4gICAgeyBtYXhGZWVQZXJHYXMsIG1heFByaW9yaXR5RmVlUGVyR2FzLCBnYXNMaW1pdCB9LFxuICApIHtcbiAgICBjb25zdCBwcmV2aW91c0dhc1BhcmFtcyA9IHtcbiAgICAgIHByZXZpb3VzR2FzOiB7XG4gICAgICAgIG1heEZlZVBlckdhcyxcbiAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXMsXG4gICAgICAgIGdhc0xpbWl0LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgLy8gb25seSB1cGRhdGUgd2hhdCBpcyBkZWZpbmVkXG4gICAgcHJldmlvdXNHYXNQYXJhbXMucHJldmlvdXNHYXMgPSBwaWNrQnkocHJldmlvdXNHYXNQYXJhbXMucHJldmlvdXNHYXMpO1xuICAgIGNvbnN0IG5vdGUgPSBgVXBkYXRlIFByZXZpb3VzIEdhcyBmb3IgJHt0eElkfWA7XG4gICAgdGhpcy5fdXBkYXRlVHJhbnNhY3Rpb24odHhJZCwgcHJldmlvdXNHYXNQYXJhbXMsIG5vdGUpO1xuICAgIHJldHVybiB0aGlzLl9nZXRUcmFuc2FjdGlvbih0eElkKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHhJZCAtIHRyYW5zYWN0aW9uIGlkXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBlZGl0YWJsZVBhcmFtcyAtIGhvbGRzIHRoZSBlaXAxNTU5IGZlZXMgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0ge29iamVjdH0gZWRpdGFibGVQYXJhbXMuZGF0YVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZWRpdGFibGVQYXJhbXMuZnJvbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZWRpdGFibGVQYXJhbXMudG9cbiAgICogQHBhcmFtIHtzdHJpbmd9IGVkaXRhYmxlUGFyYW1zLnZhbHVlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlZGl0YWJsZVBhcmFtcy5nYXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVkaXRhYmxlUGFyYW1zLmdhc1ByaWNlXG4gICAqIEByZXR1cm5zIHtUcmFuc2FjdGlvbk1ldGF9IHRoZSB0eE1ldGEgb2YgdGhlIHVwZGF0ZWQgdHJhbnNhY3Rpb25cbiAgICovXG4gIGFzeW5jIHVwZGF0ZUVkaXRhYmxlUGFyYW1zKHR4SWQsIHsgZGF0YSwgZnJvbSwgdG8sIHZhbHVlLCBnYXMsIGdhc1ByaWNlIH0pIHtcbiAgICB0aGlzLl90aHJvd0Vycm9ySWZOb3RVbmFwcHJvdmVkVHgodHhJZCwgJ3VwZGF0ZUVkaXRhYmxlUGFyYW1zJyk7XG5cbiAgICBjb25zdCBlZGl0YWJsZVBhcmFtcyA9IHtcbiAgICAgIHR4UGFyYW1zOiB7XG4gICAgICAgIGRhdGEsXG4gICAgICAgIGZyb20sXG4gICAgICAgIHRvLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgZ2FzLFxuICAgICAgICBnYXNQcmljZSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIC8vIG9ubHkgdXBkYXRlIHdoYXQgaXMgZGVmaW5lZFxuICAgIGVkaXRhYmxlUGFyYW1zLnR4UGFyYW1zID0gcGlja0J5KFxuICAgICAgZWRpdGFibGVQYXJhbXMudHhQYXJhbXMsXG4gICAgICAocHJvcCkgPT4gcHJvcCAhPT0gdW5kZWZpbmVkLFxuICAgICk7XG5cbiAgICAvLyB1cGRhdGUgdHJhbnNhY3Rpb24gdHlwZSBpbiBjYXNlIGl0IGhhcyBjaGFuZ2VzXG4gICAgY29uc3QgdHJhbnNhY3Rpb25CZWZvcmVFZGl0ID0gdGhpcy5fZ2V0VHJhbnNhY3Rpb24odHhJZCk7XG4gICAgY29uc3QgeyB0eXBlIH0gPSBhd2FpdCBkZXRlcm1pbmVUcmFuc2FjdGlvblR5cGUoXG4gICAgICB7XG4gICAgICAgIC4uLnRyYW5zYWN0aW9uQmVmb3JlRWRpdC50eFBhcmFtcyxcbiAgICAgICAgLi4uZWRpdGFibGVQYXJhbXMudHhQYXJhbXMsXG4gICAgICB9LFxuICAgICAgdGhpcy5xdWVyeSxcbiAgICApO1xuICAgIGVkaXRhYmxlUGFyYW1zLnR5cGUgPSB0eXBlO1xuXG4gICAgY29uc3Qgbm90ZSA9IGBVcGRhdGUgRWRpdGFibGUgUGFyYW1zIGZvciAke3R4SWR9YDtcblxuICAgIHRoaXMuX3VwZGF0ZVRyYW5zYWN0aW9uKHR4SWQsIGVkaXRhYmxlUGFyYW1zLCBub3RlKTtcbiAgICByZXR1cm4gdGhpcy5fZ2V0VHJhbnNhY3Rpb24odHhJZCk7XG4gIH1cblxuICAvKipcbiAgICogdXBkYXRlcyB0aGUgZ2FzIGZlZXMgb2YgdGhlIHRyYW5zYWN0aW9uIHdpdGggaWQgaWYgdGhlIHRyYW5zYWN0aW9uIHN0YXRlIGlzIHVuYXBwcm92ZWRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR4SWQgLSB0cmFuc2FjdGlvbiBpZFxuICAgKiBAcGFyYW0ge1R4R2FzRmVlc30gdHhHYXNGZWVzIC0gaG9sZHMgdGhlIGdhcyBmZWVzIHBhcmFtZXRlcnNcbiAgICogQHJldHVybnMge1RyYW5zYWN0aW9uTWV0YX0gdGhlIHR4TWV0YSBvZiB0aGUgdXBkYXRlZCB0cmFuc2FjdGlvblxuICAgKi9cbiAgdXBkYXRlVHJhbnNhY3Rpb25HYXNGZWVzKFxuICAgIHR4SWQsXG4gICAge1xuICAgICAgZ2FzLFxuICAgICAgZ2FzTGltaXQsXG4gICAgICBnYXNQcmljZSxcbiAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzLFxuICAgICAgbWF4RmVlUGVyR2FzLFxuICAgICAgZXN0aW1hdGVVc2VkLFxuICAgICAgZXN0aW1hdGVTdWdnZXN0ZWQsXG4gICAgICBkZWZhdWx0R2FzRXN0aW1hdGVzLFxuICAgICAgb3JpZ2luYWxHYXNFc3RpbWF0ZSxcbiAgICAgIHVzZXJFZGl0ZWRHYXNMaW1pdCxcbiAgICAgIHVzZXJGZWVMZXZlbCxcbiAgICB9LFxuICApIHtcbiAgICB0aGlzLl90aHJvd0Vycm9ySWZOb3RVbmFwcHJvdmVkVHgodHhJZCwgJ3VwZGF0ZVRyYW5zYWN0aW9uR2FzRmVlcycpO1xuXG4gICAgbGV0IHR4R2FzRmVlcyA9IHtcbiAgICAgIHR4UGFyYW1zOiB7XG4gICAgICAgIGdhcyxcbiAgICAgICAgZ2FzTGltaXQsXG4gICAgICAgIGdhc1ByaWNlLFxuICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhcyxcbiAgICAgICAgbWF4RmVlUGVyR2FzLFxuICAgICAgfSxcbiAgICAgIGVzdGltYXRlVXNlZCxcbiAgICAgIGVzdGltYXRlU3VnZ2VzdGVkLFxuICAgICAgZGVmYXVsdEdhc0VzdGltYXRlcyxcbiAgICAgIG9yaWdpbmFsR2FzRXN0aW1hdGUsXG4gICAgICB1c2VyRWRpdGVkR2FzTGltaXQsXG4gICAgICB1c2VyRmVlTGV2ZWwsXG4gICAgfTtcblxuICAgIC8vIG9ubHkgdXBkYXRlIHdoYXQgaXMgZGVmaW5lZFxuICAgIHR4R2FzRmVlcy50eFBhcmFtcyA9IHBpY2tCeSh0eEdhc0ZlZXMudHhQYXJhbXMpO1xuICAgIHR4R2FzRmVlcyA9IHBpY2tCeSh0eEdhc0ZlZXMpO1xuICAgIGNvbnN0IG5vdGUgPSBgVXBkYXRlIFRyYW5zYWN0aW9uIEdhcyBGZWVzIGZvciAke3R4SWR9YDtcbiAgICB0aGlzLl91cGRhdGVUcmFuc2FjdGlvbih0eElkLCB0eEdhc0ZlZXMsIG5vdGUpO1xuICAgIHJldHVybiB0aGlzLl9nZXRUcmFuc2FjdGlvbih0eElkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1cGRhdGVzIHRoZSBlc3RpbWF0ZSBiYXNlIGZlZXMgb2YgdGhlIHRyYW5zYWN0aW9uIHdpdGggaWQgaWYgdGhlIHRyYW5zYWN0aW9uIHN0YXRlIGlzIHVuYXBwcm92ZWRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR4SWQgLSB0cmFuc2FjdGlvbiBpZFxuICAgKiBAcGFyYW0ge29iamVjdH0gdHhFc3RpbWF0ZUJhc2VGZWVzIC0gaG9sZHMgdGhlIGVzdGltYXRlIGJhc2UgZmVlcyBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eEVzdGltYXRlQmFzZUZlZXMuZXN0aW1hdGVkQmFzZUZlZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHhFc3RpbWF0ZUJhc2VGZWVzLmRlY0VzdGltYXRlZEJhc2VGZWVcbiAgICogQHJldHVybnMge1RyYW5zYWN0aW9uTWV0YX0gdGhlIHR4TWV0YSBvZiB0aGUgdXBkYXRlZCB0cmFuc2FjdGlvblxuICAgKi9cbiAgdXBkYXRlVHJhbnNhY3Rpb25Fc3RpbWF0ZWRCYXNlRmVlKFxuICAgIHR4SWQsXG4gICAgeyBlc3RpbWF0ZWRCYXNlRmVlLCBkZWNFc3RpbWF0ZWRCYXNlRmVlIH0sXG4gICkge1xuICAgIHRoaXMuX3Rocm93RXJyb3JJZk5vdFVuYXBwcm92ZWRUeChcbiAgICAgIHR4SWQsXG4gICAgICAndXBkYXRlVHJhbnNhY3Rpb25Fc3RpbWF0ZWRCYXNlRmVlJyxcbiAgICApO1xuXG4gICAgbGV0IHR4RXN0aW1hdGVCYXNlRmVlcyA9IHsgZXN0aW1hdGVkQmFzZUZlZSwgZGVjRXN0aW1hdGVkQmFzZUZlZSB9O1xuICAgIC8vIG9ubHkgdXBkYXRlIHdoYXQgaXMgZGVmaW5lZFxuICAgIHR4RXN0aW1hdGVCYXNlRmVlcyA9IHBpY2tCeSh0eEVzdGltYXRlQmFzZUZlZXMpO1xuXG4gICAgY29uc3Qgbm90ZSA9IGBVcGRhdGUgVHJhbnNhY3Rpb24gRXN0aW1hdGVkIEJhc2UgRmVlcyBmb3IgJHt0eElkfWA7XG4gICAgdGhpcy5fdXBkYXRlVHJhbnNhY3Rpb24odHhJZCwgdHhFc3RpbWF0ZUJhc2VGZWVzLCBub3RlKTtcbiAgICByZXR1cm4gdGhpcy5fZ2V0VHJhbnNhY3Rpb24odHhJZCk7XG4gIH1cblxuICAvKipcbiAgICogdXBkYXRlcyBhIHN3YXAgYXBwcm92YWwgdHJhbnNhY3Rpb24gd2l0aCBwcm92aWRlZCBtZXRhZGF0YSBhbmQgc291cmNlIHRva2VuIHN5bWJvbFxuICAgKiAgaWYgdGhlIHRyYW5zYWN0aW9uIHN0YXRlIGlzIHVuYXBwcm92ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eElkXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzd2FwQXBwcm92YWxUcmFuc2FjdGlvbiAtIGhvbGRzIHRoZSBtZXRhZGF0YSBhbmQgdG9rZW4gc3ltYm9sXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzd2FwQXBwcm92YWxUcmFuc2FjdGlvbi50eXBlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzd2FwQXBwcm92YWxUcmFuc2FjdGlvbi5zb3VyY2VUb2tlblN5bWJvbFxuICAgKiBAcmV0dXJucyB7VHJhbnNhY3Rpb25NZXRhfSB0aGUgdHhNZXRhIG9mIHRoZSB1cGRhdGVkIHRyYW5zYWN0aW9uXG4gICAqL1xuICB1cGRhdGVTd2FwQXBwcm92YWxUcmFuc2FjdGlvbih0eElkLCB7IHR5cGUsIHNvdXJjZVRva2VuU3ltYm9sIH0pIHtcbiAgICB0aGlzLl90aHJvd0Vycm9ySWZOb3RVbmFwcHJvdmVkVHgodHhJZCwgJ3VwZGF0ZVN3YXBBcHByb3ZhbFRyYW5zYWN0aW9uJyk7XG5cbiAgICBsZXQgc3dhcEFwcHJvdmFsVHJhbnNhY3Rpb24gPSB7IHR5cGUsIHNvdXJjZVRva2VuU3ltYm9sIH07XG4gICAgLy8gb25seSB1cGRhdGUgd2hhdCBpcyBkZWZpbmVkXG4gICAgc3dhcEFwcHJvdmFsVHJhbnNhY3Rpb24gPSBwaWNrQnkoc3dhcEFwcHJvdmFsVHJhbnNhY3Rpb24pO1xuXG4gICAgY29uc3Qgbm90ZSA9IGBVcGRhdGUgU3dhcCBBcHByb3ZhbCBUcmFuc2FjdGlvbiBmb3IgJHt0eElkfWA7XG4gICAgdGhpcy5fdXBkYXRlVHJhbnNhY3Rpb24odHhJZCwgc3dhcEFwcHJvdmFsVHJhbnNhY3Rpb24sIG5vdGUpO1xuICAgIHJldHVybiB0aGlzLl9nZXRUcmFuc2FjdGlvbih0eElkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1cGRhdGVzIGEgc3dhcCB0cmFuc2FjdGlvbiB3aXRoIHByb3ZpZGVkIG1ldGFkYXRhIGFuZCBzb3VyY2UgdG9rZW4gc3ltYm9sXG4gICAqICBpZiB0aGUgdHJhbnNhY3Rpb24gc3RhdGUgaXMgdW5hcHByb3ZlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR4SWRcbiAgICogQHBhcmFtIHtvYmplY3R9IHN3YXBUcmFuc2FjdGlvbiAtIGhvbGRzIHRoZSBtZXRhZGF0YVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3dhcFRyYW5zYWN0aW9uLnNvdXJjZVRva2VuU3ltYm9sXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzd2FwVHJhbnNhY3Rpb24uZGVzdGluYXRpb25Ub2tlblN5bWJvbFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3dhcFRyYW5zYWN0aW9uLnR5cGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN3YXBUcmFuc2FjdGlvbi5kZXN0aW5hdGlvblRva2VuRGVjaW1hbHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN3YXBUcmFuc2FjdGlvbi5kZXN0aW5hdGlvblRva2VuQWRkcmVzc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gc3dhcFRyYW5zYWN0aW9uLnN3YXBNZXRhRGF0YVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3dhcFRyYW5zYWN0aW9uLnN3YXBUb2tlblZhbHVlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzd2FwVHJhbnNhY3Rpb24uZXN0aW1hdGVkQmFzZUZlZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3dhcFRyYW5zYWN0aW9uLmFwcHJvdmFsVHhJZFxuICAgKiBAcmV0dXJucyB7VHJhbnNhY3Rpb25NZXRhfSB0aGUgdHhNZXRhIG9mIHRoZSB1cGRhdGVkIHRyYW5zYWN0aW9uXG4gICAqL1xuICB1cGRhdGVTd2FwVHJhbnNhY3Rpb24oXG4gICAgdHhJZCxcbiAgICB7XG4gICAgICBzb3VyY2VUb2tlblN5bWJvbCxcbiAgICAgIGRlc3RpbmF0aW9uVG9rZW5TeW1ib2wsXG4gICAgICB0eXBlLFxuICAgICAgZGVzdGluYXRpb25Ub2tlbkRlY2ltYWxzLFxuICAgICAgZGVzdGluYXRpb25Ub2tlbkFkZHJlc3MsXG4gICAgICBzd2FwTWV0YURhdGEsXG4gICAgICBzd2FwVG9rZW5WYWx1ZSxcbiAgICAgIGVzdGltYXRlZEJhc2VGZWUsXG4gICAgICBhcHByb3ZhbFR4SWQsXG4gICAgfSxcbiAgKSB7XG4gICAgdGhpcy5fdGhyb3dFcnJvcklmTm90VW5hcHByb3ZlZFR4KHR4SWQsICd1cGRhdGVTd2FwVHJhbnNhY3Rpb24nKTtcblxuICAgIGxldCBzd2FwVHJhbnNhY3Rpb24gPSB7XG4gICAgICBzb3VyY2VUb2tlblN5bWJvbCxcbiAgICAgIGRlc3RpbmF0aW9uVG9rZW5TeW1ib2wsXG4gICAgICB0eXBlLFxuICAgICAgZGVzdGluYXRpb25Ub2tlbkRlY2ltYWxzLFxuICAgICAgZGVzdGluYXRpb25Ub2tlbkFkZHJlc3MsXG4gICAgICBzd2FwTWV0YURhdGEsXG4gICAgICBzd2FwVG9rZW5WYWx1ZSxcbiAgICAgIGVzdGltYXRlZEJhc2VGZWUsXG4gICAgICBhcHByb3ZhbFR4SWQsXG4gICAgfTtcblxuICAgIC8vIG9ubHkgdXBkYXRlIHdoYXQgaXMgZGVmaW5lZFxuICAgIHN3YXBUcmFuc2FjdGlvbiA9IHBpY2tCeShzd2FwVHJhbnNhY3Rpb24pO1xuXG4gICAgY29uc3Qgbm90ZSA9IGBVcGRhdGUgU3dhcCBUcmFuc2FjdGlvbiBmb3IgJHt0eElkfWA7XG4gICAgdGhpcy5fdXBkYXRlVHJhbnNhY3Rpb24odHhJZCwgc3dhcFRyYW5zYWN0aW9uLCBub3RlKTtcbiAgICByZXR1cm4gdGhpcy5fZ2V0VHJhbnNhY3Rpb24odHhJZCk7XG4gIH1cblxuICAvKipcbiAgICogdXBkYXRlcyBhIHRyYW5zYWN0aW9uJ3MgdXNlciBzZXR0aW5ncyBvbmx5IGlmIHRoZSB0cmFuc2FjdGlvbiBzdGF0ZSBpcyB1bmFwcHJvdmVkXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eElkXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB1c2VyU2V0dGluZ3MgLSBob2xkcyB0aGUgbWV0YWRhdGFcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJTZXR0aW5ncy51c2VyRWRpdGVkR2FzTGltaXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJTZXR0aW5ncy51c2VyRmVlTGV2ZWxcbiAgICogQHJldHVybnMge1RyYW5zYWN0aW9uTWV0YX0gdGhlIHR4TWV0YSBvZiB0aGUgdXBkYXRlZCB0cmFuc2FjdGlvblxuICAgKi9cbiAgdXBkYXRlVHJhbnNhY3Rpb25Vc2VyU2V0dGluZ3ModHhJZCwgeyB1c2VyRWRpdGVkR2FzTGltaXQsIHVzZXJGZWVMZXZlbCB9KSB7XG4gICAgdGhpcy5fdGhyb3dFcnJvcklmTm90VW5hcHByb3ZlZFR4KHR4SWQsICd1cGRhdGVUcmFuc2FjdGlvblVzZXJTZXR0aW5ncycpO1xuXG4gICAgbGV0IHVzZXJTZXR0aW5ncyA9IHsgdXNlckVkaXRlZEdhc0xpbWl0LCB1c2VyRmVlTGV2ZWwgfTtcbiAgICAvLyBvbmx5IHVwZGF0ZSB3aGF0IGlzIGRlZmluZWRcbiAgICB1c2VyU2V0dGluZ3MgPSBwaWNrQnkodXNlclNldHRpbmdzKTtcblxuICAgIGNvbnN0IG5vdGUgPSBgVXBkYXRlIFVzZXIgU2V0dGluZ3MgZm9yICR7dHhJZH1gO1xuICAgIHRoaXMuX3VwZGF0ZVRyYW5zYWN0aW9uKHR4SWQsIHVzZXJTZXR0aW5ncywgbm90ZSk7XG4gICAgcmV0dXJuIHRoaXMuX2dldFRyYW5zYWN0aW9uKHR4SWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIGFwcGVuZCBuZXcgc2VuZEZsb3dIaXN0b3J5IHRvIHRoZSB0cmFuc2FjdGlvbiB3aXRoIGlkIGlmIHRoZSB0cmFuc2FjdGlvblxuICAgKiBzdGF0ZSBpcyB1bmFwcHJvdmVkLiBSZXR1cm5zIHRoZSB1cGRhdGVkIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHhJZCAtIHRyYW5zYWN0aW9uIGlkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50U2VuZEZsb3dIaXN0b3J5TGVuZ3RoIC0gc2VuZEZsb3dIaXN0b3J5IGVudHJpZXMgY3VycmVudGx5XG4gICAqIEBwYXJhbSB7QXJyYXk8eyBlbnRyeTogc3RyaW5nLCB0aW1lc3RhbXA6IG51bWJlciB9Pn0gc2VuZEZsb3dIaXN0b3J5IC1cbiAgICogIGhpc3RvcnkgdG8gYWRkIHRvIHRoZSBzZW5kRmxvd0hpc3RvcnkgcHJvcGVydHkgb2YgdHhNZXRhLlxuICAgKiBAcmV0dXJucyB7VHJhbnNhY3Rpb25NZXRhfSB0aGUgdHhNZXRhIG9mIHRoZSB1cGRhdGVkIHRyYW5zYWN0aW9uXG4gICAqL1xuICB1cGRhdGVUcmFuc2FjdGlvblNlbmRGbG93SGlzdG9yeShcbiAgICB0eElkLFxuICAgIGN1cnJlbnRTZW5kRmxvd0hpc3RvcnlMZW5ndGgsXG4gICAgc2VuZEZsb3dIaXN0b3J5LFxuICApIHtcbiAgICB0aGlzLl90aHJvd0Vycm9ySWZOb3RVbmFwcHJvdmVkVHgodHhJZCwgJ3VwZGF0ZVRyYW5zYWN0aW9uU2VuZEZsb3dIaXN0b3J5Jyk7XG4gICAgY29uc3QgdHhNZXRhID0gdGhpcy5fZ2V0VHJhbnNhY3Rpb24odHhJZCk7XG5cbiAgICBpZiAoXG4gICAgICBjdXJyZW50U2VuZEZsb3dIaXN0b3J5TGVuZ3RoID09PSAodHhNZXRhPy5zZW5kRmxvd0hpc3Rvcnk/Lmxlbmd0aCB8fCAwKVxuICAgICkge1xuICAgICAgLy8gb25seSB1cGRhdGUgd2hhdCBpcyBkZWZpbmVkXG4gICAgICBjb25zdCBub3RlID0gYFVwZGF0ZSBzZW5kRmxvd0hpc3RvcnkgZm9yICR7dHhJZH1gO1xuXG4gICAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLnVwZGF0ZVRyYW5zYWN0aW9uKFxuICAgICAgICB7XG4gICAgICAgICAgLi4udHhNZXRhLFxuICAgICAgICAgIHNlbmRGbG93SGlzdG9yeTogW1xuICAgICAgICAgICAgLi4uKHR4TWV0YT8uc2VuZEZsb3dIaXN0b3J5ID8/IFtdKSxcbiAgICAgICAgICAgIC4uLnNlbmRGbG93SGlzdG9yeSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBub3RlLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2dldFRyYW5zYWN0aW9uKHR4SWQpO1xuICB9XG5cbiAgYXN5bmMgYWRkVHJhbnNhY3Rpb25HYXNEZWZhdWx0cyh0eE1ldGEpIHtcbiAgICBjb25zdCBjb250cmFjdENvZGUgPSBhd2FpdCBkZXRlcm1pbmVUcmFuc2FjdGlvbkNvbnRyYWN0Q29kZShcbiAgICAgIHR4TWV0YS50eFBhcmFtcyxcbiAgICAgIHRoaXMucXVlcnksXG4gICAgKTtcblxuICAgIGxldCB1cGRhdGVUeE1ldGEgPSB0eE1ldGE7XG4gICAgdHJ5IHtcbiAgICAgIHVwZGF0ZVR4TWV0YSA9IGF3YWl0IHRoaXMuYWRkVHhHYXNEZWZhdWx0cyh0eE1ldGEsIGNvbnRyYWN0Q29kZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZy53YXJuKGVycm9yKTtcbiAgICAgIHVwZGF0ZVR4TWV0YSA9IHRoaXMudHhTdGF0ZU1hbmFnZXIuZ2V0VHJhbnNhY3Rpb24odHhNZXRhLmlkKTtcbiAgICAgIHVwZGF0ZVR4TWV0YS5sb2FkaW5nRGVmYXVsdHMgPSBmYWxzZTtcbiAgICAgIHRoaXMudHhTdGF0ZU1hbmFnZXIudXBkYXRlVHJhbnNhY3Rpb24oXG4gICAgICAgIHR4TWV0YSxcbiAgICAgICAgJ0ZhaWxlZCB0byBjYWxjdWxhdGUgZ2FzIGRlZmF1bHRzLicsXG4gICAgICApO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuXG4gICAgdXBkYXRlVHhNZXRhLmxvYWRpbmdEZWZhdWx0cyA9IGZhbHNlO1xuXG4gICAgLy8gVGhlIGhpc3Rvcnkgbm90ZSB1c2VkIGhlcmUgJ0FkZGVkIG5ldyB1bmFwcHJvdmVkIHRyYW5zYWN0aW9uLicgaXMgY29uZnVzaW5nIHVwZGF0ZSBjYWxsIG9ubHkgdXBkYXRlZCB0aGUgZ2FzIGRlZmF1bHRzLlxuICAgIC8vIFdlIG5lZWQgdG8gaW1wcm92ZSBgdGhpcy5hZGRUcmFuc2FjdGlvbmAgdG8gYWNjZXB0IGhpc3Rvcnkgbm90ZSBhbmQgY2hhbmdlIG5vdGUgaGVyZS5cbiAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLnVwZGF0ZVRyYW5zYWN0aW9uKFxuICAgICAgdXBkYXRlVHhNZXRhLFxuICAgICAgJ0FkZGVkIG5ldyB1bmFwcHJvdmVkIHRyYW5zYWN0aW9uLicsXG4gICAgKTtcblxuICAgIHJldHVybiB1cGRhdGVUeE1ldGE7XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyBhbmQgZ2VuZXJhdGVzIGEgdHhNZXRhIHdpdGggZGVmYXVsdHMgYW5kIHB1dHMgaXQgaW4gdHhTdGF0ZU1hbmFnZXJcbiAgICogc3RvcmUuXG4gICAqXG4gICAqIGFjdGlvbklkIGlzIHVzZWQgdG8gdW5pcXVlbHkgaWRlbnRpZnkgYSByZXF1ZXN0IHRvIGNyZWF0ZSBhIHRyYW5zYWN0aW9uLlxuICAgKiBPbmx5IDEgdHJhbnNhY3Rpb24gd2lsbCBiZSBjcmVhdGVkIGZvciBtdWx0aXBsZSByZXF1ZXN0cyB3aXRoIHNhbWUgYWN0aW9uSWQuXG4gICAqIGFjdGlvbklkIGlzIGZpeCB1c2VkIGZvciBtYWtpbmcgdGhpcyBhY3Rpb24gaWRlbXBvdGVudCB0byBkZWFsIHdpdGggc2NlbmFyaW8gd2hlblxuICAgKiBhY3Rpb24gaXMgaW52b2tlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIHNhbWUgcGFyYW1ldGVycyBpbiBNVjMgZHVlIHRvIHNlcnZpY2Ugd29ya2VyIHJlLWFjdGl2YXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB0eE1ldGhvZFR5cGVcbiAgICogQHBhcmFtIHR4UGFyYW1zXG4gICAqIEBwYXJhbSBvcmlnaW5cbiAgICogQHBhcmFtIHRyYW5zYWN0aW9uVHlwZVxuICAgKiBAcGFyYW0gc2VuZEZsb3dIaXN0b3J5XG4gICAqIEBwYXJhbSBhY3Rpb25JZFxuICAgKiBAcmV0dXJucyB7dHhNZXRhfVxuICAgKi9cbiAgYXN5bmMgYWRkVW5hcHByb3ZlZFRyYW5zYWN0aW9uKFxuICAgIHR4TWV0aG9kVHlwZSxcbiAgICB0eFBhcmFtcyxcbiAgICBvcmlnaW4sXG4gICAgdHJhbnNhY3Rpb25UeXBlLFxuICAgIHNlbmRGbG93SGlzdG9yeSA9IFtdLFxuICAgIGFjdGlvbklkLFxuICApIHtcbiAgICBpZiAoXG4gICAgICB0cmFuc2FjdGlvblR5cGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgIVZBTElEX1VOQVBQUk9WRURfVFJBTlNBQ1RJT05fVFlQRVMuaW5jbHVkZXModHJhbnNhY3Rpb25UeXBlKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVHJhbnNhY3Rpb25Db250cm9sbGVyIC0gaW52YWxpZCB0cmFuc2FjdGlvblR5cGUgdmFsdWU6ICR7dHJhbnNhY3Rpb25UeXBlfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHJhbnNhY3Rpb24gaXMgZm91bmQgd2l0aCB0aGUgc2FtZSBhY3Rpb25JZCwgZG8gbm90IGNyZWF0ZSBhIG5ldyBzcGVlZC11cCB0cmFuc2FjdGlvbi5cbiAgICBpZiAoYWN0aW9uSWQpIHtcbiAgICAgIGxldCBleGlzdGluZ1R4TWV0YSA9XG4gICAgICAgIHRoaXMudHhTdGF0ZU1hbmFnZXIuZ2V0VHJhbnNhY3Rpb25XaXRoQWN0aW9uSWQoYWN0aW9uSWQpO1xuICAgICAgaWYgKGV4aXN0aW5nVHhNZXRhKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnbmV3VW5hcHByb3ZlZFR4JywgZXhpc3RpbmdUeE1ldGEpO1xuICAgICAgICBleGlzdGluZ1R4TWV0YSA9IGF3YWl0IHRoaXMuYWRkVHJhbnNhY3Rpb25HYXNEZWZhdWx0cyhleGlzdGluZ1R4TWV0YSk7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RBcHByb3ZhbChleGlzdGluZ1R4TWV0YSk7XG4gICAgICAgIHJldHVybiBleGlzdGluZ1R4TWV0YTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB2YWxpZGF0ZVxuICAgIGNvbnN0IG5vcm1hbGl6ZWRUeFBhcmFtcyA9IHR4VXRpbHMubm9ybWFsaXplVHhQYXJhbXModHhQYXJhbXMpO1xuICAgIGNvbnN0IGVpcDE1NTlDb21wYXRpYmlsaXR5ID0gYXdhaXQgdGhpcy5nZXRFSVAxNTU5Q29tcGF0aWJpbGl0eSgpO1xuXG4gICAgdHhVdGlscy52YWxpZGF0ZVR4UGFyYW1zKG5vcm1hbGl6ZWRUeFBhcmFtcywgZWlwMTU1OUNvbXBhdGliaWxpdHkpO1xuXG4gICAgLyoqXG4gICAgICogYGdlbmVyYXRlVHhNZXRhYCBhZGRzIHRoZSBkZWZhdWx0IHR4TWV0YSBwcm9wZXJ0aWVzIHRvIHRoZSBwYXNzZWQgb2JqZWN0LlxuICAgICAqIFRoZXNlIGluY2x1ZGUgdGhlIHR4J3MgYGlkYC4gQXMgd2UgdXNlIHRoZSBpZCBmb3IgZGV0ZXJtaW5pbmcgb3JkZXIgb2ZcbiAgICAgKiB0eGVzIGluIHRoZSB0eC1zdGF0ZS1tYW5hZ2VyLCBpdCBpcyBuZWNlc3NhcnkgdG8gY2FsbCB0aGUgYXN5bmNocm9ub3VzXG4gICAgICogbWV0aG9kIGBkZXRlcm1pbmVUcmFuc2FjdGlvblR5cGVgIGFmdGVyIGBnZW5lcmF0ZVR4TWV0YWAuXG4gICAgICovXG4gICAgbGV0IHR4TWV0YSA9IHRoaXMudHhTdGF0ZU1hbmFnZXIuZ2VuZXJhdGVUeE1ldGEoe1xuICAgICAgdHhQYXJhbXM6IG5vcm1hbGl6ZWRUeFBhcmFtcyxcbiAgICAgIG9yaWdpbixcbiAgICAgIHNlbmRGbG93SGlzdG9yeSxcbiAgICB9KTtcblxuICAgIC8vIEFkZCBhY3Rpb25JZCB0byB0eE1ldGEgdG8gY2hlY2sgaWYgc2FtZSBhY3Rpb25JZCBpcyBzZWVuIGFnYWluXG4gICAgLy8gSUYgcmVxdWVzdCB0byBjcmVhdGUgdHJhbnNhY3Rpb24gd2l0aCBzYW1lIGFjdGlvbklkIGlzIHN1Ym1pdHRlZCBhZ2FpbiwgbmV3IHRyYW5zYWN0aW9uIHdpbGwgbm90IGJlIGFkZGVkIGZvciBpdC5cbiAgICBpZiAoYWN0aW9uSWQpIHtcbiAgICAgIHR4TWV0YS5hY3Rpb25JZCA9IGFjdGlvbklkO1xuICAgIH1cblxuICAgIGlmIChvcmlnaW4gPT09IE9SSUdJTl9NRVRBTUFTSykge1xuICAgICAgLy8gQXNzZXJ0IHRoZSBmcm9tIGFkZHJlc3MgaXMgdGhlIHNlbGVjdGVkIGFkZHJlc3NcbiAgICAgIGlmIChub3JtYWxpemVkVHhQYXJhbXMuZnJvbSAhPT0gdGhpcy5nZXRTZWxlY3RlZEFkZHJlc3MoKSkge1xuICAgICAgICB0aHJvdyBldGhFcnJvcnMucnBjLmludGVybmFsKHtcbiAgICAgICAgICBtZXNzYWdlOiBgSW50ZXJuYWxseSBpbml0aWF0ZWQgdHJhbnNhY3Rpb24gaXMgdXNpbmcgaW52YWxpZCBhY2NvdW50LmAsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgb3JpZ2luLFxuICAgICAgICAgICAgZnJvbUFkZHJlc3M6IG5vcm1hbGl6ZWRUeFBhcmFtcy5mcm9tLFxuICAgICAgICAgICAgc2VsZWN0ZWRBZGRyZXNzOiB0aGlzLmdldFNlbGVjdGVkQWRkcmVzcygpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBc3NlcnQgdGhhdCB0aGUgb3JpZ2luIGhhcyBwZXJtaXNzaW9ucyB0byBpbml0aWF0ZSB0cmFuc2FjdGlvbnMgZnJvbVxuICAgICAgLy8gdGhlIHNwZWNpZmllZCBhZGRyZXNzXG4gICAgICBjb25zdCBwZXJtaXR0ZWRBZGRyZXNzZXMgPSBhd2FpdCB0aGlzLmdldFBlcm1pdHRlZEFjY291bnRzKG9yaWdpbik7XG4gICAgICBpZiAoIXBlcm1pdHRlZEFkZHJlc3Nlcy5pbmNsdWRlcyhub3JtYWxpemVkVHhQYXJhbXMuZnJvbSkpIHtcbiAgICAgICAgdGhyb3cgZXRoRXJyb3JzLnByb3ZpZGVyLnVuYXV0aG9yaXplZCh7IGRhdGE6IHsgb3JpZ2luIH0gfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgeyB0eXBlIH0gPSBhd2FpdCBkZXRlcm1pbmVUcmFuc2FjdGlvblR5cGUoXG4gICAgICBub3JtYWxpemVkVHhQYXJhbXMsXG4gICAgICB0aGlzLnF1ZXJ5LFxuICAgICk7XG4gICAgdHhNZXRhLnR5cGUgPSB0cmFuc2FjdGlvblR5cGUgfHwgdHlwZTtcblxuICAgIC8vIGVuc3VyZSB2YWx1ZVxuICAgIHR4TWV0YS50eFBhcmFtcy52YWx1ZSA9IHR4TWV0YS50eFBhcmFtcy52YWx1ZVxuICAgICAgPyBhZGRIZXhQcmVmaXgodHhNZXRhLnR4UGFyYW1zLnZhbHVlKVxuICAgICAgOiAnMHgwJztcblxuICAgIGlmICh0eE1ldGhvZFR5cGUgJiYgdGhpcy5zZWN1cml0eVByb3ZpZGVyUmVxdWVzdCkge1xuICAgICAgY29uc3Qgc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlID0gYXdhaXQgdGhpcy5zZWN1cml0eVByb3ZpZGVyUmVxdWVzdChcbiAgICAgICAgdHhNZXRhLFxuICAgICAgICB0eE1ldGhvZFR5cGUsXG4gICAgICApO1xuXG4gICAgICB0eE1ldGEuc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlID0gc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlO1xuICAgIH1cblxuICAgIHRoaXMuYWRkVHJhbnNhY3Rpb24odHhNZXRhKTtcbiAgICB0aGlzLmVtaXQoJ25ld1VuYXBwcm92ZWRUeCcsIHR4TWV0YSk7XG5cbiAgICB0eE1ldGEgPSBhd2FpdCB0aGlzLmFkZFRyYW5zYWN0aW9uR2FzRGVmYXVsdHModHhNZXRhKTtcbiAgICB0aGlzLl9yZXF1ZXN0QXBwcm92YWwodHhNZXRhKTtcblxuICAgIHJldHVybiB0eE1ldGE7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgdHggZ2FzIGRlZmF1bHRzOiBnYXMgJiYgZ2FzUHJpY2VcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHR4TWV0YSAtIHRoZSB0eE1ldGEgb2JqZWN0XG4gICAqIEBwYXJhbSBnZXRDb2RlUmVzcG9uc2VcbiAgICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gcmVzb2x2ZXMgd2l0aCB0eE1ldGFcbiAgICovXG4gIGFzeW5jIGFkZFR4R2FzRGVmYXVsdHModHhNZXRhLCBnZXRDb2RlUmVzcG9uc2UpIHtcbiAgICBjb25zdCBlaXAxNTU5Q29tcGF0aWJpbGl0eSA9XG4gICAgICB0eE1ldGEudHhQYXJhbXMudHlwZSAhPT0gVHJhbnNhY3Rpb25FbnZlbG9wZVR5cGUubGVnYWN5ICYmXG4gICAgICAoYXdhaXQgdGhpcy5nZXRFSVAxNTU5Q29tcGF0aWJpbGl0eSgpKTtcbiAgICBjb25zdCB7XG4gICAgICBnYXNQcmljZTogZGVmYXVsdEdhc1ByaWNlLFxuICAgICAgbWF4RmVlUGVyR2FzOiBkZWZhdWx0TWF4RmVlUGVyR2FzLFxuICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IGRlZmF1bHRNYXhQcmlvcml0eUZlZVBlckdhcyxcbiAgICB9ID0gYXdhaXQgdGhpcy5fZ2V0RGVmYXVsdEdhc0ZlZXModHhNZXRhLCBlaXAxNTU5Q29tcGF0aWJpbGl0eSk7XG4gICAgY29uc3QgeyBnYXNMaW1pdDogZGVmYXVsdEdhc0xpbWl0LCBzaW11bGF0aW9uRmFpbHMgfSA9XG4gICAgICBhd2FpdCB0aGlzLl9nZXREZWZhdWx0R2FzTGltaXQodHhNZXRhLCBnZXRDb2RlUmVzcG9uc2UpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdHhNZXRhID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbih0eE1ldGEuaWQpO1xuICAgIGlmIChzaW11bGF0aW9uRmFpbHMpIHtcbiAgICAgIHR4TWV0YS5zaW11bGF0aW9uRmFpbHMgPSBzaW11bGF0aW9uRmFpbHM7XG4gICAgfVxuXG4gICAgaWYgKGVpcDE1NTlDb21wYXRpYmlsaXR5KSB7XG4gICAgICBjb25zdCBhZHZhbmNlZEdhc0ZlZURlZmF1bHRWYWx1ZXMgPSB0aGlzLmdldEFkdmFuY2VkR2FzRmVlKCk7XG4gICAgICBpZiAoXG4gICAgICAgIEJvb2xlYW4oYWR2YW5jZWRHYXNGZWVEZWZhdWx0VmFsdWVzKSAmJlxuICAgICAgICAhU1dBUF9UUkFOU0FDVElPTl9UWVBFUy5pbmNsdWRlcyh0eE1ldGEudHlwZSlcbiAgICAgICkge1xuICAgICAgICB0eE1ldGEudXNlckZlZUxldmVsID0gQ1VTVE9NX0dBU19FU1RJTUFURTtcbiAgICAgICAgdHhNZXRhLnR4UGFyYW1zLm1heEZlZVBlckdhcyA9IGRlY0dXRUlUb0hleFdFSShcbiAgICAgICAgICBhZHZhbmNlZEdhc0ZlZURlZmF1bHRWYWx1ZXMubWF4QmFzZUZlZSxcbiAgICAgICAgKTtcbiAgICAgICAgdHhNZXRhLnR4UGFyYW1zLm1heFByaW9yaXR5RmVlUGVyR2FzID0gZGVjR1dFSVRvSGV4V0VJKFxuICAgICAgICAgIGFkdmFuY2VkR2FzRmVlRGVmYXVsdFZhbHVlcy5wcmlvcml0eUZlZSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHR4TWV0YS50eFBhcmFtcy5nYXNQcmljZSAmJlxuICAgICAgICAhdHhNZXRhLnR4UGFyYW1zLm1heEZlZVBlckdhcyAmJlxuICAgICAgICAhdHhNZXRhLnR4UGFyYW1zLm1heFByaW9yaXR5RmVlUGVyR2FzXG4gICAgICApIHtcbiAgICAgICAgLy8gSWYgdGhlIGRhcHAgaGFzIHN1Z2dlc3RlZCBhIGdhcyBwcmljZSwgYnV0IG5vIG1heEZlZVBlckdhcyBvciBtYXhQcmlvcml0eUZlZVBlckdhc1xuICAgICAgICAvLyAgdGhlbiB3ZSBzZXQgbWF4RmVlUGVyR2FzIGFuZCBtYXhQcmlvcml0eUZlZVBlckdhcyB0byB0aGUgc3VnZ2VzdGVkIGdhc1ByaWNlLlxuICAgICAgICB0eE1ldGEudHhQYXJhbXMubWF4RmVlUGVyR2FzID0gdHhNZXRhLnR4UGFyYW1zLmdhc1ByaWNlO1xuICAgICAgICB0eE1ldGEudHhQYXJhbXMubWF4UHJpb3JpdHlGZWVQZXJHYXMgPSB0eE1ldGEudHhQYXJhbXMuZ2FzUHJpY2U7XG4gICAgICAgIGlmICh0eE1ldGEub3JpZ2luID09PSBPUklHSU5fTUVUQU1BU0spIHtcbiAgICAgICAgICB0eE1ldGEudXNlckZlZUxldmVsID0gQ1VTVE9NX0dBU19FU1RJTUFURTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0eE1ldGEudXNlckZlZUxldmVsID0gUHJpb3JpdHlMZXZlbHMuZEFwcFN1Z2dlc3RlZDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChkZWZhdWx0TWF4RmVlUGVyR2FzICYmXG4gICAgICAgICAgICBkZWZhdWx0TWF4UHJpb3JpdHlGZWVQZXJHYXMgJiZcbiAgICAgICAgICAgICF0eE1ldGEudHhQYXJhbXMubWF4RmVlUGVyR2FzICYmXG4gICAgICAgICAgICAhdHhNZXRhLnR4UGFyYW1zLm1heFByaW9yaXR5RmVlUGVyR2FzKSB8fFxuICAgICAgICAgIHR4TWV0YS5vcmlnaW4gPT09IE9SSUdJTl9NRVRBTUFTS1xuICAgICAgICApIHtcbiAgICAgICAgICB0eE1ldGEudXNlckZlZUxldmVsID0gR2FzUmVjb21tZW5kYXRpb25zLm1lZGl1bTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0eE1ldGEudXNlckZlZUxldmVsID0gUHJpb3JpdHlMZXZlbHMuZEFwcFN1Z2dlc3RlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWZhdWx0TWF4RmVlUGVyR2FzICYmICF0eE1ldGEudHhQYXJhbXMubWF4RmVlUGVyR2FzKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRhcHAgaGFzIG5vdCBzZXQgdGhlIGdhc1ByaWNlIG9yIHRoZSBtYXhGZWVQZXJHYXMsIHRoZW4gd2Ugc2V0IG1heEZlZVBlckdhc1xuICAgICAgICAgIC8vIHdpdGggdGhlIG9uZSByZXR1cm5lZCBieSB0aGUgZ2FzRmVlQ29udHJvbGxlciwgaWYgdGhhdCBpcyBhdmFpbGFibGUuXG4gICAgICAgICAgdHhNZXRhLnR4UGFyYW1zLm1heEZlZVBlckdhcyA9IGRlZmF1bHRNYXhGZWVQZXJHYXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgZGVmYXVsdE1heFByaW9yaXR5RmVlUGVyR2FzICYmXG4gICAgICAgICAgIXR4TWV0YS50eFBhcmFtcy5tYXhQcmlvcml0eUZlZVBlckdhc1xuICAgICAgICApIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGFwcCBoYXMgbm90IHNldCB0aGUgZ2FzUHJpY2Ugb3IgdGhlIG1heFByaW9yaXR5RmVlUGVyR2FzLCB0aGVuIHdlIHNldCBtYXhQcmlvcml0eUZlZVBlckdhc1xuICAgICAgICAgIC8vIHdpdGggdGhlIG9uZSByZXR1cm5lZCBieSB0aGUgZ2FzRmVlQ29udHJvbGxlciwgaWYgdGhhdCBpcyBhdmFpbGFibGUuXG4gICAgICAgICAgdHhNZXRhLnR4UGFyYW1zLm1heFByaW9yaXR5RmVlUGVyR2FzID0gZGVmYXVsdE1heFByaW9yaXR5RmVlUGVyR2FzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZmF1bHRHYXNQcmljZSAmJiAhdHhNZXRhLnR4UGFyYW1zLm1heEZlZVBlckdhcykge1xuICAgICAgICAgIC8vIElmIHRoZSBkYXBwIGhhcyBub3Qgc2V0IHRoZSBnYXNQcmljZSBvciB0aGUgbWF4RmVlUGVyR2FzLCBhbmQgbm8gbWF4RmVlUGVyR2FzIGlzIGF2YWlsYWJsZVxuICAgICAgICAgIC8vIGZyb20gdGhlIGdhc0ZlZUNvbnRyb2xsZXIsIHRoZW4gd2Ugc2V0IG1heEZlZVBlckdhcyB0byB0aGUgZGVmYXVsdEdhc1ByaWNlLCBhc3N1bWluZyBpdCBpc1xuICAgICAgICAgIC8vIGF2YWlsYWJsZS5cbiAgICAgICAgICB0eE1ldGEudHhQYXJhbXMubWF4RmVlUGVyR2FzID0gZGVmYXVsdEdhc1ByaWNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR4TWV0YS50eFBhcmFtcy5tYXhGZWVQZXJHYXMgJiZcbiAgICAgICAgICAhdHhNZXRhLnR4UGFyYW1zLm1heFByaW9yaXR5RmVlUGVyR2FzXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIElmIHRoZSBkYXBwIGhhcyBub3Qgc2V0IHRoZSBnYXNQcmljZSBvciB0aGUgbWF4UHJpb3JpdHlGZWVQZXJHYXMsIGFuZCBubyBtYXhQcmlvcml0eUZlZVBlckdhcyBpc1xuICAgICAgICAgIC8vIGF2YWlsYWJsZSBmcm9tIHRoZSBnYXNGZWVDb250cm9sbGVyLCB0aGVuIHdlIHNldCBtYXhQcmlvcml0eUZlZVBlckdhcyB0b1xuICAgICAgICAgIC8vIHR4TWV0YS50eFBhcmFtcy5tYXhGZWVQZXJHYXMsIHdoaWNoIHdpbGwgZWl0aGVyIGJlIHRoZSBnYXNQcmljZSBmcm9tIHRoZSBjb250cm9sbGVyLCB0aGUgbWF4RmVlUGVyR2FzXG4gICAgICAgICAgLy8gc2V0IGJ5IHRoZSBkYXBwLCBvciB0aGUgbWF4RmVlUGVyR2FzIGZyb20gdGhlIGNvbnRyb2xsZXIuXG4gICAgICAgICAgdHhNZXRhLnR4UGFyYW1zLm1heFByaW9yaXR5RmVlUGVyR2FzID0gdHhNZXRhLnR4UGFyYW1zLm1heEZlZVBlckdhcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBXZSByZW1vdmUgdGhlIGdhc1ByaWNlIHBhcmFtIGVudGlyZWx5IHdoZW4gb24gYW4gZWlwMTU1OSBjb21wYXRpYmxlIG5ldHdvcmtcblxuICAgICAgZGVsZXRlIHR4TWV0YS50eFBhcmFtcy5nYXNQcmljZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2UgZW5zdXJlIHRoYXQgbWF4RmVlUGVyR2FzIGFuZCBtYXhQcmlvcml0eUZlZVBlckdhcyBhcmUgbm90IGluIHRoZSB0cmFuc2FjdGlvbiBwYXJhbXNcbiAgICAgIC8vIHdoZW4gbm90IG9uIGEgRUlQMTU1OSBjb21wYXRpYmxlIG5ldHdvcmtcblxuICAgICAgZGVsZXRlIHR4TWV0YS50eFBhcmFtcy5tYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICAgIGRlbGV0ZSB0eE1ldGEudHhQYXJhbXMubWF4RmVlUGVyR2FzO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGhhdmUgZ290dGVuIHRvIHRoaXMgcG9pbnQsIGFuZCBub25lIG9mIGdhc1ByaWNlLCBtYXhQcmlvcml0eUZlZVBlckdhcyBvciBtYXhGZWVQZXJHYXMgYXJlXG4gICAgLy8gc2V0IG9uIHR4UGFyYW1zLCBpdCBtZWFucyB0aGF0IGVpdGhlciB3ZSBhcmUgb24gYSBub24tRUlQMTU1OSBuZXR3b3JrIGFuZCB0aGUgZGFwcCBkaWRuJ3Qgc3VnZ2VzdFxuICAgIC8vIGEgZ2FzIHByaWNlLCBvciB3ZSBhcmUgb24gYW4gRUlQMTU1OSBuZXR3b3JrLCBhbmQgbm9uZSBvZiBnYXNQcmljZSwgbWF4UHJpb3JpdHlGZWVQZXJHYXMgb3IgbWF4RmVlUGVyR2FzXG4gICAgLy8gd2VyZSBhdmFpbGFibGUgZnJvbSBlaXRoZXIgdGhlIGRhcHAgb3IgdGhlIG5ldHdvcmsuXG4gICAgaWYgKFxuICAgICAgZGVmYXVsdEdhc1ByaWNlICYmXG4gICAgICAhdHhNZXRhLnR4UGFyYW1zLmdhc1ByaWNlICYmXG4gICAgICAhdHhNZXRhLnR4UGFyYW1zLm1heFByaW9yaXR5RmVlUGVyR2FzICYmXG4gICAgICAhdHhNZXRhLnR4UGFyYW1zLm1heEZlZVBlckdhc1xuICAgICkge1xuICAgICAgdHhNZXRhLnR4UGFyYW1zLmdhc1ByaWNlID0gZGVmYXVsdEdhc1ByaWNlO1xuICAgIH1cblxuICAgIGlmIChkZWZhdWx0R2FzTGltaXQgJiYgIXR4TWV0YS50eFBhcmFtcy5nYXMpIHtcbiAgICAgIHR4TWV0YS50eFBhcmFtcy5nYXMgPSBkZWZhdWx0R2FzTGltaXQ7XG4gICAgICB0eE1ldGEub3JpZ2luYWxHYXNFc3RpbWF0ZSA9IGRlZmF1bHRHYXNMaW1pdDtcbiAgICB9XG4gICAgdHhNZXRhLmRlZmF1bHRHYXNFc3RpbWF0ZXMgPSB7XG4gICAgICBlc3RpbWF0ZVR5cGU6IHR4TWV0YS51c2VyRmVlTGV2ZWwsXG4gICAgICBnYXM6IHR4TWV0YS50eFBhcmFtcy5nYXMsXG4gICAgICBnYXNQcmljZTogdHhNZXRhLnR4UGFyYW1zLmdhc1ByaWNlLFxuICAgICAgbWF4RmVlUGVyR2FzOiB0eE1ldGEudHhQYXJhbXMubWF4RmVlUGVyR2FzLFxuICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IHR4TWV0YS50eFBhcmFtcy5tYXhQcmlvcml0eUZlZVBlckdhcyxcbiAgICB9O1xuICAgIHJldHVybiB0eE1ldGE7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBkZWZhdWx0IGdhcyBmZWVzLCBvciByZXR1cm5zIGB1bmRlZmluZWRgIGlmIGdhcyBmZWVzIGFyZSBhbHJlYWR5IHNldFxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gdHhNZXRhIC0gVGhlIHR4TWV0YSBvYmplY3RcbiAgICogQHBhcmFtIGVpcDE1NTlDb21wYXRpYmlsaXR5XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZ3x1bmRlZmluZWQ+fSBUaGUgZGVmYXVsdCBnYXMgcHJpY2VcbiAgICovXG4gIGFzeW5jIF9nZXREZWZhdWx0R2FzRmVlcyh0eE1ldGEsIGVpcDE1NTlDb21wYXRpYmlsaXR5KSB7XG4gICAgaWYgKFxuICAgICAgKCFlaXAxNTU5Q29tcGF0aWJpbGl0eSAmJiB0eE1ldGEudHhQYXJhbXMuZ2FzUHJpY2UpIHx8XG4gICAgICAoZWlwMTU1OUNvbXBhdGliaWxpdHkgJiZcbiAgICAgICAgdHhNZXRhLnR4UGFyYW1zLm1heEZlZVBlckdhcyAmJlxuICAgICAgICB0eE1ldGEudHhQYXJhbXMubWF4UHJpb3JpdHlGZWVQZXJHYXMpXG4gICAgKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZ2FzRmVlRXN0aW1hdGVzLCBnYXNFc3RpbWF0ZVR5cGUgfSA9XG4gICAgICAgIGF3YWl0IHRoaXMuX2dldEVJUDE1NTlHYXNGZWVFc3RpbWF0ZXMoKTtcbiAgICAgIGlmIChcbiAgICAgICAgZWlwMTU1OUNvbXBhdGliaWxpdHkgJiZcbiAgICAgICAgZ2FzRXN0aW1hdGVUeXBlID09PSBHYXNFc3RpbWF0ZVR5cGVzLmZlZU1hcmtldFxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBtZWRpdW06IHsgc3VnZ2VzdGVkTWF4UHJpb3JpdHlGZWVQZXJHYXMsIHN1Z2dlc3RlZE1heEZlZVBlckdhcyB9ID0ge30sXG4gICAgICAgIH0gPSBnYXNGZWVFc3RpbWF0ZXM7XG5cbiAgICAgICAgaWYgKHN1Z2dlc3RlZE1heFByaW9yaXR5RmVlUGVyR2FzICYmIHN1Z2dlc3RlZE1heEZlZVBlckdhcykge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYXhGZWVQZXJHYXM6IGRlY0dXRUlUb0hleFdFSShzdWdnZXN0ZWRNYXhGZWVQZXJHYXMpLFxuICAgICAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IGRlY0dXRUlUb0hleFdFSShcbiAgICAgICAgICAgICAgc3VnZ2VzdGVkTWF4UHJpb3JpdHlGZWVQZXJHYXMsXG4gICAgICAgICAgICApLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZ2FzRXN0aW1hdGVUeXBlID09PSBHYXNFc3RpbWF0ZVR5cGVzLmxlZ2FjeSkge1xuICAgICAgICAvLyBUaGUgTEVHQUNZIHR5cGUgaW5jbHVkZXMgbG93LCBtZWRpdW0gYW5kIGhpZ2ggZXN0aW1hdGVzIG9mXG4gICAgICAgIC8vIGdhcyBwcmljZSB2YWx1ZXMuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZ2FzUHJpY2U6IGRlY0dXRUlUb0hleFdFSShnYXNGZWVFc3RpbWF0ZXMubWVkaXVtKSxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoZ2FzRXN0aW1hdGVUeXBlID09PSBHYXNFc3RpbWF0ZVR5cGVzLmV0aEdhc1ByaWNlKSB7XG4gICAgICAgIC8vIFRoZSBFVEhfR0FTUFJJQ0UgdHlwZSBqdXN0IGluY2x1ZGVzIGEgc2luZ2xlIGdhcyBwcmljZSBwcm9wZXJ0eSxcbiAgICAgICAgLy8gd2hpY2ggd2UgY2FuIGFzc3VtZSB3YXMgcmV0cmlldmVkIGZyb20gZXRoX2dhc1ByaWNlXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZ2FzUHJpY2U6IGRlY0dXRUlUb0hleFdFSShnYXNGZWVFc3RpbWF0ZXMuZ2FzUHJpY2UpLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2FzUHJpY2UgPSBhd2FpdCB0aGlzLnF1ZXJ5Lmdhc1ByaWNlKCk7XG5cbiAgICByZXR1cm4geyBnYXNQcmljZTogZ2FzUHJpY2UgJiYgYWRkSGV4UHJlZml4KGdhc1ByaWNlLnRvU3RyaW5nKDE2KSkgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGRlZmF1bHQgZ2FzIGxpbWl0LCBvciBkZWJ1ZyBpbmZvcm1hdGlvbiBhYm91dCB3aHkgZ2FzIGVzdGltYXRlIGZhaWxlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHR4TWV0YSAtIFRoZSB0eE1ldGEgb2JqZWN0XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPG9iamVjdD59IE9iamVjdCBjb250YWluaW5nIHRoZSBkZWZhdWx0IGdhcyBsaW1pdCwgb3IgdGhlIHNpbXVsYXRpb24gZmFpbHVyZSBvYmplY3RcbiAgICovXG4gIGFzeW5jIF9nZXREZWZhdWx0R2FzTGltaXQodHhNZXRhKSB7XG4gICAgY29uc3QgY2hhaW5JZCA9IHRoaXMuX2dldEN1cnJlbnRDaGFpbklkKCk7XG4gICAgY29uc3QgY3VzdG9tTmV0d29ya0dhc0J1ZmZlciA9IENIQUlOX0lEX1RPX0dBU19MSU1JVF9CVUZGRVJfTUFQW2NoYWluSWRdO1xuICAgIGNvbnN0IGNoYWluVHlwZSA9IGdldENoYWluVHlwZShjaGFpbklkKTtcblxuICAgIGlmICh0eE1ldGEudHhQYXJhbXMuZ2FzKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHR4TWV0YS50eFBhcmFtcy50byAmJlxuICAgICAgdHhNZXRhLnR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5zaW1wbGVTZW5kICYmXG4gICAgICBjaGFpblR5cGUgIT09ICdjdXN0b20nICYmXG4gICAgICAhdHhNZXRhLnR4UGFyYW1zLmRhdGFcbiAgICApIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBzdGFuZGFyZCBldGhlciBzaW1wbGUgc2VuZCwgZ2FzIHJlcXVpcmVtZW50IGlzIGV4YWN0bHkgMjFrXG4gICAgICByZXR1cm4geyBnYXNMaW1pdDogR0FTX0xJTUlUUy5TSU1QTEUgfTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGJsb2NrR2FzTGltaXQsIGVzdGltYXRlZEdhc0hleCwgc2ltdWxhdGlvbkZhaWxzIH0gPVxuICAgICAgYXdhaXQgdGhpcy50eEdhc1V0aWwuYW5hbHl6ZUdhc1VzYWdlKHR4TWV0YSk7XG5cbiAgICAvLyBhZGQgYWRkaXRpb25hbCBnYXMgYnVmZmVyIHRvIG91ciBlc3RpbWF0aW9uIGZvciBzYWZldHlcbiAgICBjb25zdCBnYXNMaW1pdCA9IHRoaXMudHhHYXNVdGlsLmFkZEdhc0J1ZmZlcihcbiAgICAgIGFkZEhleFByZWZpeChlc3RpbWF0ZWRHYXNIZXgpLFxuICAgICAgYmxvY2tHYXNMaW1pdCxcbiAgICAgIGN1c3RvbU5ldHdvcmtHYXNCdWZmZXIsXG4gICAgKTtcblxuICAgIHJldHVybiB7IGdhc0xpbWl0LCBzaW11bGF0aW9uRmFpbHMgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhIFRyYW5zYWN0aW9uTWV0YSBvYmplY3QsIGdlbmVyYXRlIG5ldyBnYXMgcGFyYW1zIHN1Y2ggdGhhdCBpZiB0aGVcbiAgICogdHJhbnNhY3Rpb24gd2FzIGFuIEVJUDE1NTkgdHJhbnNhY3Rpb24sIGl0IG9ubHkgaGFzIEVJUDE1NTkgZ2FzIGZpZWxkcyxcbiAgICogb3RoZXJ3aXNlIGl0IG9ubHkgaGFzIGdhc1ByaWNlLiBXaWxsIHVzZSB3aGF0ZXZlciBjdXN0b20gdmFsdWVzIGFyZVxuICAgKiBzcGVjaWZpZWQgaW4gY3VzdG9tR2FzU2V0dGluZ3MsIG9yIGZhbGxzIGJhY2sgdG8gaW5jcmVtZW50aW5nIGJ5IGEgcGVyY2VudFxuICAgKiB3aGljaCBpcyBkZWZpbmVkIGJ5IHNwZWNpZnlpbmcgYSBudW1lcmF0b3IuIDExIGlzIGEgMTAlIGJ1bXAsIDEyIHdvdWxkIGJlXG4gICAqIGEgMjAlIGJ1bXAsIGFuZCBzbyBvbi5cbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbk1ldGF9IG9yaWdpbmFsVHhNZXRhIC0gT3JpZ2luYWwgdHJhbnNhY3Rpb24gdG8gdXNlIGFzXG4gICAqICBiYXNlXG4gICAqIEBwYXJhbSB7Q3VzdG9tR2FzU2V0dGluZ3N9IFtjdXN0b21HYXNTZXR0aW5nc10gLSBvdmVycmlkZXMgZm9yIHRoZSBnYXNcbiAgICogIGZpZWxkcyB0byB1c2UgaW5zdGVhZCBvZiB0aGUgbXVsdGlwbGllclxuICAgKiBAcGFyYW0ge251bWJlcn0gW2luY3JlbWVudE51bWVyYXRvcl0gLSBOdW1lcmF0b3IgZnJvbSB3aGljaCB0byBnZW5lcmF0ZSBhXG4gICAqICBwZXJjZW50YWdlIGJ1bXAgb2YgZ2FzIHByaWNlLiBFLmcgMTEgd291bGQgYmUgYSAxMCUgYnVtcCBvdmVyIGJhc2UuXG4gICAqIEByZXR1cm5zIHt7IG5ld0dhc1BhcmFtczogQ3VzdG9tR2FzU2V0dGluZ3MsIHByZXZpb3VzR2FzUGFyYW1zOiBDdXN0b21HYXNTZXR0aW5ncyB9fVxuICAgKi9cbiAgZ2VuZXJhdGVOZXdHYXNQYXJhbXMoXG4gICAgb3JpZ2luYWxUeE1ldGEsXG4gICAgY3VzdG9tR2FzU2V0dGluZ3MgPSB7fSxcbiAgICBpbmNyZW1lbnROdW1lcmF0b3IgPSAxMSxcbiAgKSB7XG4gICAgY29uc3QgeyB0eFBhcmFtcyB9ID0gb3JpZ2luYWxUeE1ldGE7XG4gICAgY29uc3QgcHJldmlvdXNHYXNQYXJhbXMgPSB7fTtcbiAgICBjb25zdCBuZXdHYXNQYXJhbXMgPSB7fTtcbiAgICBpZiAoY3VzdG9tR2FzU2V0dGluZ3MuZ2FzTGltaXQpIHtcbiAgICAgIG5ld0dhc1BhcmFtcy5nYXMgPSBjdXN0b21HYXNTZXR0aW5ncz8uZ2FzID8/IEdBU19MSU1JVFMuU0lNUExFO1xuICAgIH1cblxuICAgIGlmIChjdXN0b21HYXNTZXR0aW5ncy5lc3RpbWF0ZVN1Z2dlc3RlZCkge1xuICAgICAgbmV3R2FzUGFyYW1zLmVzdGltYXRlU3VnZ2VzdGVkID0gY3VzdG9tR2FzU2V0dGluZ3MuZXN0aW1hdGVTdWdnZXN0ZWQ7XG4gICAgfVxuXG4gICAgaWYgKGN1c3RvbUdhc1NldHRpbmdzLmVzdGltYXRlVXNlZCkge1xuICAgICAgbmV3R2FzUGFyYW1zLmVzdGltYXRlVXNlZCA9IGN1c3RvbUdhc1NldHRpbmdzLmVzdGltYXRlVXNlZDtcbiAgICB9XG5cbiAgICBpZiAoaXNFSVAxNTU5VHJhbnNhY3Rpb24ob3JpZ2luYWxUeE1ldGEpKSB7XG4gICAgICBwcmV2aW91c0dhc1BhcmFtcy5tYXhGZWVQZXJHYXMgPSB0eFBhcmFtcy5tYXhGZWVQZXJHYXM7XG4gICAgICBwcmV2aW91c0dhc1BhcmFtcy5tYXhQcmlvcml0eUZlZVBlckdhcyA9IHR4UGFyYW1zLm1heFByaW9yaXR5RmVlUGVyR2FzO1xuICAgICAgbmV3R2FzUGFyYW1zLm1heEZlZVBlckdhcyA9XG4gICAgICAgIGN1c3RvbUdhc1NldHRpbmdzPy5tYXhGZWVQZXJHYXMgfHxcbiAgICAgICAgYm5Ub0hleChcbiAgICAgICAgICBCbk11bHRpcGx5QnlGcmFjdGlvbihcbiAgICAgICAgICAgIGhleFRvQm4odHhQYXJhbXMubWF4RmVlUGVyR2FzKSxcbiAgICAgICAgICAgIGluY3JlbWVudE51bWVyYXRvcixcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICBuZXdHYXNQYXJhbXMubWF4UHJpb3JpdHlGZWVQZXJHYXMgPVxuICAgICAgICBjdXN0b21HYXNTZXR0aW5ncz8ubWF4UHJpb3JpdHlGZWVQZXJHYXMgfHxcbiAgICAgICAgYm5Ub0hleChcbiAgICAgICAgICBCbk11bHRpcGx5QnlGcmFjdGlvbihcbiAgICAgICAgICAgIGhleFRvQm4odHhQYXJhbXMubWF4UHJpb3JpdHlGZWVQZXJHYXMpLFxuICAgICAgICAgICAgaW5jcmVtZW50TnVtZXJhdG9yLFxuICAgICAgICAgICAgMTAsXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJldmlvdXNHYXNQYXJhbXMuZ2FzUHJpY2UgPSB0eFBhcmFtcy5nYXNQcmljZTtcbiAgICAgIG5ld0dhc1BhcmFtcy5nYXNQcmljZSA9XG4gICAgICAgIGN1c3RvbUdhc1NldHRpbmdzPy5nYXNQcmljZSB8fFxuICAgICAgICBiblRvSGV4KFxuICAgICAgICAgIEJuTXVsdGlwbHlCeUZyYWN0aW9uKFxuICAgICAgICAgICAgaGV4VG9Cbih0eFBhcmFtcy5nYXNQcmljZSksXG4gICAgICAgICAgICBpbmNyZW1lbnROdW1lcmF0b3IsXG4gICAgICAgICAgICAxMCxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB7IHByZXZpb3VzR2FzUGFyYW1zLCBuZXdHYXNQYXJhbXMgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGFwcHJvdmVkIHRyYW5zYWN0aW9uIHRvIGF0dGVtcHQgdG8gY2FuY2VsIGEgcHJldmlvdXNseSBzdWJtaXR0ZWQgdHJhbnNhY3Rpb24uIFRoZVxuICAgKiBuZXcgdHJhbnNhY3Rpb24gY29udGFpbnMgdGhlIHNhbWUgbm9uY2UgYXMgdGhlIHByZXZpb3VzLCBpcyBhIGJhc2ljIEVUSCB0cmFuc2ZlciBvZiAweCB2YWx1ZSB0b1xuICAgKiB0aGUgc2VuZGVyJ3MgYWRkcmVzcywgYW5kIGhhcyBhIGhpZ2hlciBnYXNQcmljZSB0aGFuIHRoYXQgb2YgdGhlIHByZXZpb3VzIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gb3JpZ2luYWxUeElkIC0gdGhlIGlkIG9mIHRoZSB0eE1ldGEgdGhhdCB5b3Ugd2FudCB0byBhdHRlbXB0IHRvIGNhbmNlbFxuICAgKiBAcGFyYW0ge0N1c3RvbUdhc1NldHRpbmdzfSBbY3VzdG9tR2FzU2V0dGluZ3NdIC0gb3ZlcnJpZGVzIHRvIHVzZSBmb3IgZ2FzXG4gICAqICBwYXJhbXMgaW5zdGVhZCBvZiBhbGxvd2luZyB0aGlzIG1ldGhvZCB0byBnZW5lcmF0ZSB0aGVtXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEBwYXJhbSBvcHRpb25zLmVzdGltYXRlZEJhc2VGZWVcbiAgICogQHBhcmFtIG9wdGlvbnMuYWN0aW9uSWRcbiAgICogQHJldHVybnMge3R4TWV0YX1cbiAgICovXG4gIGFzeW5jIGNyZWF0ZUNhbmNlbFRyYW5zYWN0aW9uKFxuICAgIG9yaWdpbmFsVHhJZCxcbiAgICBjdXN0b21HYXNTZXR0aW5ncyxcbiAgICB7IGVzdGltYXRlZEJhc2VGZWUsIGFjdGlvbklkIH0gPSB7fSxcbiAgKSB7XG4gICAgLy8gSWYgdHJhbnNhY3Rpb24gaXMgZm91bmQgZm9yIHNhbWUgYWN0aW9uIGlkLCBkbyBub3QgY3JlYXRlIGEgbmV3IGNhbmNlbCB0cmFuc2FjdGlvbi5cbiAgICBpZiAoYWN0aW9uSWQpIHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nVHhNZXRhID1cbiAgICAgICAgdGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbldpdGhBY3Rpb25JZChhY3Rpb25JZCk7XG4gICAgICBpZiAoZXhpc3RpbmdUeE1ldGEpIHtcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nVHhNZXRhO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG9yaWdpbmFsVHhNZXRhID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbihvcmlnaW5hbFR4SWQpO1xuICAgIGNvbnN0IHsgdHhQYXJhbXMgfSA9IG9yaWdpbmFsVHhNZXRhO1xuICAgIGNvbnN0IHsgZnJvbSwgbm9uY2UgfSA9IHR4UGFyYW1zO1xuXG4gICAgY29uc3QgeyBwcmV2aW91c0dhc1BhcmFtcywgbmV3R2FzUGFyYW1zIH0gPSB0aGlzLmdlbmVyYXRlTmV3R2FzUGFyYW1zKFxuICAgICAgb3JpZ2luYWxUeE1ldGEsXG4gICAgICB7XG4gICAgICAgIC4uLmN1c3RvbUdhc1NldHRpbmdzLFxuICAgICAgICAvLyBXZSB3YW50IHRvIG92ZXJyaWRlIHRoZSBwcmV2aW91cyB0cmFuc2FjdGlvbnMgZ2FzTGltaXQgYmVjYXVzZSBpdFxuICAgICAgICAvLyB3aWxsIG5vdyBiZSBhIHNpbXBsZSBzZW5kIGluc3RlYWQgb2Ygd2hhdGV2ZXIgaXQgd2FzIGJlZm9yZSBzdWNoXG4gICAgICAgIC8vIGFzIGEgdG9rZW4gdHJhbnNmZXIgb3IgY29udHJhY3QgY2FsbC5cbiAgICAgICAgZ2FzTGltaXQ6IGN1c3RvbUdhc1NldHRpbmdzLmdhc0xpbWl0IHx8IEdBU19MSU1JVFMuU0lNUExFLFxuICAgICAgfSxcbiAgICApO1xuXG4gICAgY29uc3QgbmV3VHhNZXRhID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZW5lcmF0ZVR4TWV0YSh7XG4gICAgICB0eFBhcmFtczoge1xuICAgICAgICBmcm9tLFxuICAgICAgICB0bzogZnJvbSxcbiAgICAgICAgbm9uY2UsXG4gICAgICAgIHZhbHVlOiAnMHgwJyxcbiAgICAgICAgLi4ubmV3R2FzUGFyYW1zLFxuICAgICAgfSxcbiAgICAgIHByZXZpb3VzR2FzUGFyYW1zLFxuICAgICAgbG9hZGluZ0RlZmF1bHRzOiBmYWxzZSxcbiAgICAgIHN0YXR1czogVHJhbnNhY3Rpb25TdGF0dXMuYXBwcm92ZWQsXG4gICAgICB0eXBlOiBUcmFuc2FjdGlvblR5cGUuY2FuY2VsLFxuICAgICAgYWN0aW9uSWQsXG4gICAgfSk7XG5cbiAgICBpZiAoZXN0aW1hdGVkQmFzZUZlZSkge1xuICAgICAgbmV3VHhNZXRhLmVzdGltYXRlZEJhc2VGZWUgPSBlc3RpbWF0ZWRCYXNlRmVlO1xuICAgIH1cblxuICAgIHRoaXMuYWRkVHJhbnNhY3Rpb24obmV3VHhNZXRhKTtcbiAgICBhd2FpdCB0aGlzLmFwcHJvdmVUcmFuc2FjdGlvbihuZXdUeE1ldGEuaWQsIGFjdGlvbklkLCB7XG4gICAgICBoYXNBcHByb3ZhbFJlcXVlc3Q6IGZhbHNlLFxuICAgIH0pO1xuICAgIHJldHVybiBuZXdUeE1ldGE7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBhcHByb3ZlZCB0cmFuc2FjdGlvbiB0byBhdHRlbXB0IHRvIHNwZWVkIHVwIGEgcHJldmlvdXNseSBzdWJtaXR0ZWQgdHJhbnNhY3Rpb24uIFRoZVxuICAgKiBuZXcgdHJhbnNhY3Rpb24gY29udGFpbnMgdGhlIHNhbWUgbm9uY2UgYXMgdGhlIHByZXZpb3VzLiBCeSBkZWZhdWx0LCB0aGUgbmV3IHRyYW5zYWN0aW9uIHdpbGwgdXNlXG4gICAqIHRoZSBzYW1lIGdhcyBsaW1pdCBhbmQgYSAxMCUgaGlnaGVyIGdhcyBwcmljZSwgdGhvdWdoIGl0IGlzIHBvc3NpYmxlIHRvIHNldCBhIGN1c3RvbSB2YWx1ZSBmb3JcbiAgICogZWFjaCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gb3JpZ2luYWxUeElkIC0gdGhlIGlkIG9mIHRoZSB0eE1ldGEgdGhhdCB5b3Ugd2FudCB0byBzcGVlZCB1cFxuICAgKiBAcGFyYW0ge0N1c3RvbUdhc1NldHRpbmdzfSBbY3VzdG9tR2FzU2V0dGluZ3NdIC0gb3ZlcnJpZGVzIHRvIHVzZSBmb3IgZ2FzXG4gICAqICBwYXJhbXMgaW5zdGVhZCBvZiBhbGxvd2luZyB0aGlzIG1ldGhvZCB0byBnZW5lcmF0ZSB0aGVtXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEBwYXJhbSBvcHRpb25zLmVzdGltYXRlZEJhc2VGZWVcbiAgICogQHBhcmFtIG9wdGlvbnMuYWN0aW9uSWRcbiAgICogQHJldHVybnMge3R4TWV0YX1cbiAgICovXG4gIGFzeW5jIGNyZWF0ZVNwZWVkVXBUcmFuc2FjdGlvbihcbiAgICBvcmlnaW5hbFR4SWQsXG4gICAgY3VzdG9tR2FzU2V0dGluZ3MsXG4gICAgeyBlc3RpbWF0ZWRCYXNlRmVlLCBhY3Rpb25JZCB9ID0ge30sXG4gICkge1xuICAgIC8vIElmIHRyYW5zYWN0aW9uIGlzIGZvdW5kIGZvciBzYW1lIGFjdGlvbiBpZCwgZG8gbm90IGNyZWF0ZSBhIG5ldyBzcGVlZC11cCB0cmFuc2FjdGlvbi5cbiAgICBpZiAoYWN0aW9uSWQpIHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nVHhNZXRhID1cbiAgICAgICAgdGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbldpdGhBY3Rpb25JZChhY3Rpb25JZCk7XG4gICAgICBpZiAoZXhpc3RpbmdUeE1ldGEpIHtcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nVHhNZXRhO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG9yaWdpbmFsVHhNZXRhID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbihvcmlnaW5hbFR4SWQpO1xuICAgIGNvbnN0IHsgdHhQYXJhbXMgfSA9IG9yaWdpbmFsVHhNZXRhO1xuXG4gICAgY29uc3QgeyBwcmV2aW91c0dhc1BhcmFtcywgbmV3R2FzUGFyYW1zIH0gPSB0aGlzLmdlbmVyYXRlTmV3R2FzUGFyYW1zKFxuICAgICAgb3JpZ2luYWxUeE1ldGEsXG4gICAgICBjdXN0b21HYXNTZXR0aW5ncyxcbiAgICApO1xuXG4gICAgY29uc3QgbmV3VHhNZXRhID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZW5lcmF0ZVR4TWV0YSh7XG4gICAgICB0eFBhcmFtczoge1xuICAgICAgICAuLi50eFBhcmFtcyxcbiAgICAgICAgLi4ubmV3R2FzUGFyYW1zLFxuICAgICAgfSxcbiAgICAgIHByZXZpb3VzR2FzUGFyYW1zLFxuICAgICAgbG9hZGluZ0RlZmF1bHRzOiBmYWxzZSxcbiAgICAgIHN0YXR1czogVHJhbnNhY3Rpb25TdGF0dXMuYXBwcm92ZWQsXG4gICAgICB0eXBlOiBUcmFuc2FjdGlvblR5cGUucmV0cnksXG4gICAgICBvcmlnaW5hbFR5cGU6IG9yaWdpbmFsVHhNZXRhLnR5cGUsXG4gICAgICBhY3Rpb25JZCxcbiAgICB9KTtcblxuICAgIGlmIChlc3RpbWF0ZWRCYXNlRmVlKSB7XG4gICAgICBuZXdUeE1ldGEuZXN0aW1hdGVkQmFzZUZlZSA9IGVzdGltYXRlZEJhc2VGZWU7XG4gICAgfVxuXG4gICAgdGhpcy5hZGRUcmFuc2FjdGlvbihuZXdUeE1ldGEpO1xuICAgIGF3YWl0IHRoaXMuYXBwcm92ZVRyYW5zYWN0aW9uKG5ld1R4TWV0YS5pZCwgYWN0aW9uSWQsIHtcbiAgICAgIGhhc0FwcHJvdmFsUmVxdWVzdDogZmFsc2UsXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ld1R4TWV0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1cGRhdGVzIHRoZSB0eE1ldGEgaW4gdGhlIHR4U3RhdGVNYW5hZ2VyXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0eE1ldGEgLSB0aGUgdXBkYXRlZCB0eE1ldGFcbiAgICovXG4gIGFzeW5jIHVwZGF0ZVRyYW5zYWN0aW9uKHR4TWV0YSkge1xuICAgIHRoaXMudHhTdGF0ZU1hbmFnZXIudXBkYXRlVHJhbnNhY3Rpb24oXG4gICAgICB0eE1ldGEsXG4gICAgICAnY29uZlR4OiB1c2VyIHVwZGF0ZWQgdHJhbnNhY3Rpb24nLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogdXBkYXRlcyBhbmQgYXBwcm92ZXMgdGhlIHRyYW5zYWN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0eE1ldGFcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFjdGlvbklkXG4gICAqL1xuICBhc3luYyB1cGRhdGVBbmRBcHByb3ZlVHJhbnNhY3Rpb24odHhNZXRhLCBhY3Rpb25JZCkge1xuICAgIHRoaXMudHhTdGF0ZU1hbmFnZXIudXBkYXRlVHJhbnNhY3Rpb24oXG4gICAgICB0eE1ldGEsXG4gICAgICAnY29uZlR4OiB1c2VyIGFwcHJvdmVkIHRyYW5zYWN0aW9uJyxcbiAgICApO1xuICAgIGF3YWl0IHRoaXMuYXBwcm92ZVRyYW5zYWN0aW9uKHR4TWV0YS5pZCwgYWN0aW9uSWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldHMgdGhlIHR4IHN0YXR1cyB0byBhcHByb3ZlZFxuICAgKiBhdXRvIGZpbGxzIHRoZSBub25jZVxuICAgKiBzaWducyB0aGUgdHJhbnNhY3Rpb25cbiAgICogcHVibGlzaGVzIHRoZSB0cmFuc2FjdGlvblxuICAgKiBpZiBhbnkgb2YgdGhlc2Ugc3RlcHMgZmFpbHMgdGhlIHR4IHN0YXR1cyB3aWxsIGJlIHNldCB0byBmYWlsZWRcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHR4SWQgLSB0aGUgdHgncyBJZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWN0aW9uSWQgLSBhY3Rpb25JZCBwYXNzZWQgZnJvbSBVSVxuICAgKiBAcGFyYW0gb3B0cyAtIG9wdGlvbnMgb2JqZWN0XG4gICAqIEBwYXJhbSBvcHRzLmhhc0FwcHJvdmFsUmVxdWVzdCAtIHdoZXRoZXIgdGhlIHRyYW5zYWN0aW9uIGhhcyBhbiBhcHByb3ZhbCByZXF1ZXN0XG4gICAqL1xuICBhc3luYyBhcHByb3ZlVHJhbnNhY3Rpb24odHhJZCwgYWN0aW9uSWQsIHsgaGFzQXBwcm92YWxSZXF1ZXN0ID0gdHJ1ZSB9ID0ge30pIHtcbiAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgc2FmZXR5IG91dCBvZiB0aGlzIGZ1bmN0aW9uLlxuICAgIC8vIFNpbmNlIHRoaXMgdHJhbnNhY3Rpb24gaXMgYXN5bmMsXG4gICAgLy8gd2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIHdoYXQgaXMgY3VycmVudGx5IGJlaW5nIHNpZ25lZCxcbiAgICAvLyBTbyB0aGF0IHdlIGRvIG5vdCBpbmNyZW1lbnQgbm9uY2UgKyByZXN1Ym1pdCBzb21ldGhpbmdcbiAgICAvLyB0aGF0IGlzIGFscmVhZHkgYmVpbmcgaW5jcmVtZW50ZWQgJiBzaWduZWQuXG4gICAgY29uc3QgdHhNZXRhID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbih0eElkKTtcblxuXG4gICAgaWYgKHRoaXMuaW5Qcm9jZXNzT2ZTaWduaW5nLmhhcyh0eElkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmluUHJvY2Vzc09mU2lnbmluZy5hZGQodHhJZCk7XG4gICAgbGV0IG5vbmNlTG9jaztcbiAgICB0cnkge1xuICAgICAgLy8gYXBwcm92ZVxuICAgICAgdGhpcy50eFN0YXRlTWFuYWdlci5zZXRUeFN0YXR1c0FwcHJvdmVkKHR4SWQpO1xuICAgICAgaWYgKGhhc0FwcHJvdmFsUmVxdWVzdCkge1xuICAgICAgICB0aGlzLl9hY2NlcHRBcHByb3ZhbCh0eE1ldGEpO1xuICAgICAgfVxuICAgICAgLy8gZ2V0IG5leHQgbm9uY2VcbiAgICAgIGNvbnN0IGZyb21BZGRyZXNzID0gdHhNZXRhLnR4UGFyYW1zLmZyb207XG4gICAgICAvLyB3YWl0IGZvciBhIG5vbmNlXG4gICAgICBsZXQgeyBjdXN0b21Ob25jZVZhbHVlIH0gPSB0eE1ldGE7XG4gICAgICBjdXN0b21Ob25jZVZhbHVlID0gTnVtYmVyKGN1c3RvbU5vbmNlVmFsdWUpO1xuICAgICAgbm9uY2VMb2NrID0gYXdhaXQgdGhpcy5ub25jZVRyYWNrZXIuZ2V0Tm9uY2VMb2NrKGZyb21BZGRyZXNzKTtcbiAgICAgIC8vIGFkZCBub25jZSB0byB0eFBhcmFtc1xuICAgICAgLy8gaWYgdHhNZXRhIGhhcyBwcmV2aW91c0dhc1BhcmFtcyB0aGVuIGl0IGlzIGEgcmV0cnkgYXQgc2FtZSBub25jZSB3aXRoXG4gICAgICAvLyBoaWdoZXIgZ2FzIHNldHRpbmdzIGFuZCB0aGVyZWZvciB0aGUgbm9uY2Ugc2hvdWxkIG5vdCBiZSByZWNhbGN1bGF0ZWRcbiAgICAgIGNvbnN0IG5vbmNlID0gdHhNZXRhLnByZXZpb3VzR2FzUGFyYW1zXG4gICAgICAgID8gdHhNZXRhLnR4UGFyYW1zLm5vbmNlXG4gICAgICAgIDogbm9uY2VMb2NrLm5leHROb25jZTtcbiAgICAgIGNvbnN0IGN1c3RvbU9yTm9uY2UgPVxuICAgICAgICBjdXN0b21Ob25jZVZhbHVlID09PSAwID8gY3VzdG9tTm9uY2VWYWx1ZSA6IGN1c3RvbU5vbmNlVmFsdWUgfHwgbm9uY2U7XG5cbiAgICAgIHR4TWV0YS50eFBhcmFtcy5ub25jZSA9IGFkZEhleFByZWZpeChjdXN0b21Pck5vbmNlLnRvU3RyaW5nKDE2KSk7XG4gICAgICAvLyBhZGQgbm9uY2UgZGVidWdnaW5nIGluZm9ybWF0aW9uIHRvIHR4TWV0YVxuICAgICAgdHhNZXRhLm5vbmNlRGV0YWlscyA9IG5vbmNlTG9jay5ub25jZURldGFpbHM7XG4gICAgICBpZiAoY3VzdG9tTm9uY2VWYWx1ZSkge1xuICAgICAgICB0eE1ldGEubm9uY2VEZXRhaWxzLmN1c3RvbU5vbmNlVmFsdWUgPSBjdXN0b21Ob25jZVZhbHVlO1xuICAgICAgfVxuICAgICAgdGhpcy50eFN0YXRlTWFuYWdlci51cGRhdGVUcmFuc2FjdGlvbihcbiAgICAgICAgdHhNZXRhLFxuICAgICAgICAndHJhbnNhY3Rpb25zI2FwcHJvdmVUcmFuc2FjdGlvbicsXG4gICAgICApO1xuICAgICAgLy8gc2lnbiB0cmFuc2FjdGlvblxuICAgICAgY29uc3QgcmF3VHggPSBhd2FpdCB0aGlzLnNpZ25UcmFuc2FjdGlvbih0eElkKTtcbiAgICAgIGF3YWl0IHRoaXMucHVibGlzaFRyYW5zYWN0aW9uKHR4SWQsIHJhd1R4LCBhY3Rpb25JZCk7XG4gICAgICB0aGlzLl90cmFja1RyYW5zYWN0aW9uTWV0cmljc0V2ZW50KFxuICAgICAgICB0eE1ldGEsXG4gICAgICAgIFRyYW5zYWN0aW9uTWV0YU1ldHJpY3NFdmVudC5hcHByb3ZlZCxcbiAgICAgICAgYWN0aW9uSWQsXG4gICAgICApO1xuICAgICAgLy8gbXVzdCBzZXQgdHJhbnNhY3Rpb24gdG8gc3VibWl0dGVkL2ZhaWxlZCBiZWZvcmUgcmVsZWFzaW5nIGxvY2tcbiAgICAgIG5vbmNlTG9jay5yZWxlYXNlTG9jaygpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gdGhpcyBpcyB0cnktY2F0Y2ggd3JhcHBlZCBzbyB0aGF0IHdlIGNhbiBndWFyYW50ZWUgdGhhdCB0aGUgbm9uY2VMb2NrIGlzIHJlbGVhc2VkXG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl9mYWlsVHJhbnNhY3Rpb24odHhJZCwgZXJyLCBhY3Rpb25JZCk7XG4gICAgICB9IGNhdGNoIChlcnIyKSB7XG4gICAgICAgIGxvZy5lcnJvcihlcnIyKTtcbiAgICAgIH1cbiAgICAgIC8vIG11c3Qgc2V0IHRyYW5zYWN0aW9uIHRvIHN1Ym1pdHRlZC9mYWlsZWQgYmVmb3JlIHJlbGVhc2luZyBsb2NrXG4gICAgICBpZiAobm9uY2VMb2NrKSB7XG4gICAgICAgIG5vbmNlTG9jay5yZWxlYXNlTG9jaygpO1xuICAgICAgfVxuICAgICAgLy8gY29udGludWUgd2l0aCBlcnJvciBjaGFpblxuICAgICAgdGhyb3cgZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmluUHJvY2Vzc09mU2lnbmluZy5kZWxldGUodHhJZCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYXBwcm92ZVRyYW5zYWN0aW9uc1dpdGhTYW1lTm9uY2UobGlzdE9mVHhQYXJhbXMgPSBbXSkge1xuICAgIGlmIChsaXN0T2ZUeFBhcmFtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBjb25zdCBpbml0aWFsVHggPSBsaXN0T2ZUeFBhcmFtc1swXTtcbiAgICBjb25zdCBjb21tb24gPSBhd2FpdCB0aGlzLmdldENvbW1vbkNvbmZpZ3VyYXRpb24oaW5pdGlhbFR4LmZyb20pO1xuICAgIGNvbnN0IGluaXRpYWxUeEFzRXRoVHggPSBUcmFuc2FjdGlvbkZhY3RvcnkuZnJvbVR4RGF0YShpbml0aWFsVHgsIHtcbiAgICAgIGNvbW1vbixcbiAgICB9KTtcbiAgICBjb25zdCBpbml0aWFsVHhBc1NlcmlhbGl6ZWRIZXggPSBidWZmZXJUb0hleChpbml0aWFsVHhBc0V0aFR4LnNlcmlhbGl6ZSgpKTtcblxuICAgIGlmICh0aGlzLmluUHJvY2Vzc09mU2lnbmluZy5oYXMoaW5pdGlhbFR4QXNTZXJpYWxpemVkSGV4KSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICB0aGlzLmluUHJvY2Vzc09mU2lnbmluZy5hZGQoaW5pdGlhbFR4QXNTZXJpYWxpemVkSGV4KTtcbiAgICBsZXQgcmF3VHhlcywgbm9uY2VMb2NrO1xuICAgIHRyeSB7XG4gICAgICAvLyBUT0RPOiB3ZSBzaG91bGQgYWRkIGEgY2hlY2sgdG8gdmVyaWZ5IHRoYXQgYWxsIHRyYW5zYWN0aW9ucyBoYXZlIHRoZSBzYW1lIGZyb20gYWRkcmVzc1xuICAgICAgY29uc3QgZnJvbUFkZHJlc3MgPSBpbml0aWFsVHguZnJvbTtcbiAgICAgIG5vbmNlTG9jayA9IGF3YWl0IHRoaXMubm9uY2VUcmFja2VyLmdldE5vbmNlTG9jayhmcm9tQWRkcmVzcyk7XG4gICAgICBjb25zdCBub25jZSA9IG5vbmNlTG9jay5uZXh0Tm9uY2U7XG5cbiAgICAgIHJhd1R4ZXMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgbGlzdE9mVHhQYXJhbXMubWFwKCh0eFBhcmFtcykgPT4ge1xuICAgICAgICAgIHR4UGFyYW1zLm5vbmNlID0gYWRkSGV4UHJlZml4KG5vbmNlLnRvU3RyaW5nKDE2KSk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2lnbkV4dGVybmFsVHJhbnNhY3Rpb24odHhQYXJhbXMpO1xuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cuZXJyb3IoZXJyKTtcbiAgICAgIC8vIG11c3Qgc2V0IHRyYW5zYWN0aW9uIHRvIHN1Ym1pdHRlZC9mYWlsZWQgYmVmb3JlIHJlbGVhc2luZyBsb2NrXG4gICAgICAvLyBjb250aW51ZSB3aXRoIGVycm9yIGNoYWluXG4gICAgICB0aHJvdyBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChub25jZUxvY2spIHtcbiAgICAgICAgbm9uY2VMb2NrLnJlbGVhc2VMb2NrKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmluUHJvY2Vzc09mU2lnbmluZy5kZWxldGUoaW5pdGlhbFR4QXNTZXJpYWxpemVkSGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJhd1R4ZXM7XG4gIH1cblxuICBhc3luYyBzaWduRXh0ZXJuYWxUcmFuc2FjdGlvbihfdHhQYXJhbXMpIHtcbiAgICBjb25zdCBub3JtYWxpemVkVHhQYXJhbXMgPSB0eFV0aWxzLm5vcm1hbGl6ZVR4UGFyYW1zKF90eFBhcmFtcyk7XG4gICAgLy8gYWRkIG5ldHdvcmsvY2hhaW4gaWRcbiAgICBjb25zdCBjaGFpbklkID0gdGhpcy5nZXRDaGFpbklkKCk7XG4gICAgY29uc3QgdHlwZSA9IGlzRUlQMTU1OVRyYW5zYWN0aW9uKHsgdHhQYXJhbXM6IG5vcm1hbGl6ZWRUeFBhcmFtcyB9KVxuICAgICAgPyBUcmFuc2FjdGlvbkVudmVsb3BlVHlwZS5mZWVNYXJrZXRcbiAgICAgIDogVHJhbnNhY3Rpb25FbnZlbG9wZVR5cGUubGVnYWN5O1xuICAgIGNvbnN0IHR4UGFyYW1zID0ge1xuICAgICAgLi4ubm9ybWFsaXplZFR4UGFyYW1zLFxuICAgICAgdHlwZSxcbiAgICAgIGdhc0xpbWl0OiBub3JtYWxpemVkVHhQYXJhbXMuZ2FzLFxuICAgICAgY2hhaW5JZDogbmV3IE51bWVyaWMoY2hhaW5JZCwgMTApLnRvUHJlZml4ZWRIZXhTdHJpbmcoKSxcbiAgICB9O1xuICAgIC8vIHNpZ24gdHhcbiAgICBjb25zdCBmcm9tQWRkcmVzcyA9IHR4UGFyYW1zLmZyb207XG4gICAgY29uc3QgY29tbW9uID0gYXdhaXQgdGhpcy5nZXRDb21tb25Db25maWd1cmF0aW9uKGZyb21BZGRyZXNzKTtcbiAgICBjb25zdCB1bnNpZ25lZEV0aFR4ID0gVHJhbnNhY3Rpb25GYWN0b3J5LmZyb21UeERhdGEodHhQYXJhbXMsIHsgY29tbW9uIH0pO1xuICAgIGNvbnN0IHNpZ25lZEV0aFR4ID0gYXdhaXQgdGhpcy5zaWduRXRoVHgodW5zaWduZWRFdGhUeCwgZnJvbUFkZHJlc3MpO1xuXG4gICAgY29uc3QgcmF3VHggPSBidWZmZXJUb0hleChzaWduZWRFdGhUeC5zZXJpYWxpemUoKSk7XG4gICAgcmV0dXJuIHJhd1R4O1xuICB9XG5cbiAgLyoqXG4gICAqIGFkZHMgdGhlIGNoYWluIGlkIGFuZCBzaWducyB0aGUgdHJhbnNhY3Rpb24gYW5kIHNldCB0aGUgc3RhdHVzIHRvIHNpZ25lZFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdHhJZCAtIHRoZSB0eCdzIElkXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHJhd1R4XG4gICAqL1xuICBhc3luYyBzaWduVHJhbnNhY3Rpb24odHhJZCkge1xuICAgIGNvbnN0IHR4TWV0YSA9IHRoaXMudHhTdGF0ZU1hbmFnZXIuZ2V0VHJhbnNhY3Rpb24odHhJZCk7XG4gICAgLy8gYWRkIG5ldHdvcmsvY2hhaW4gaWRcbiAgICBjb25zdCBjaGFpbklkID0gdGhpcy5nZXRDaGFpbklkKCk7XG4gICAgY29uc3QgdHlwZSA9IGlzRUlQMTU1OVRyYW5zYWN0aW9uKHR4TWV0YSlcbiAgICAgID8gVHJhbnNhY3Rpb25FbnZlbG9wZVR5cGUuZmVlTWFya2V0XG4gICAgICA6IFRyYW5zYWN0aW9uRW52ZWxvcGVUeXBlLmxlZ2FjeTtcbiAgICBjb25zdCB0eFBhcmFtcyA9IHtcbiAgICAgIC4uLnR4TWV0YS50eFBhcmFtcyxcbiAgICAgIHR5cGUsXG4gICAgICBjaGFpbklkLFxuICAgICAgZ2FzTGltaXQ6IHR4TWV0YS50eFBhcmFtcy5nYXMsXG4gICAgfTtcbiAgICAvLyBzaWduIHR4XG4gICAgY29uc3QgZnJvbUFkZHJlc3MgPSB0eFBhcmFtcy5mcm9tO1xuICAgIGNvbnN0IGNvbW1vbiA9IGF3YWl0IHRoaXMuZ2V0Q29tbW9uQ29uZmlndXJhdGlvbih0eFBhcmFtcy5mcm9tKTtcbiAgICBjb25zdCB1bnNpZ25lZEV0aFR4ID0gVHJhbnNhY3Rpb25GYWN0b3J5LmZyb21UeERhdGEodHhQYXJhbXMsIHsgY29tbW9uIH0pO1xuICAgIGNvbnN0IHNpZ25lZEV0aFR4ID0gYXdhaXQgdGhpcy5zaWduRXRoVHgoXG4gICAgICB1bnNpZ25lZEV0aFR4LFxuICAgICAgZnJvbUFkZHJlc3MsXG4gICAgKTtcblxuXG4gICAgLy8gYWRkIHIscyx2IHZhbHVlcyBmb3IgcHJvdmlkZXIgcmVxdWVzdCBwdXJwb3NlcyBzZWUgY3JlYXRlTWV0YW1hc2tNaWRkbGV3YXJlXG4gICAgLy8gYW5kIEpTT04gcnBjIHN0YW5kYXJkIGZvciBmdXJ0aGVyIGV4cGxhbmF0aW9uXG4gICAgdHhNZXRhLnIgPSBhZGRIZXhQcmVmaXgoc2lnbmVkRXRoVHguci50b1N0cmluZygxNikpO1xuICAgIHR4TWV0YS5zID0gYWRkSGV4UHJlZml4KHNpZ25lZEV0aFR4LnMudG9TdHJpbmcoMTYpKTtcbiAgICB0eE1ldGEudiA9IGFkZEhleFByZWZpeChzaWduZWRFdGhUeC52LnRvU3RyaW5nKDE2KSk7XG5cbiAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLnVwZGF0ZVRyYW5zYWN0aW9uKFxuICAgICAgdHhNZXRhLFxuICAgICAgJ3RyYW5zYWN0aW9ucyNzaWduVHJhbnNhY3Rpb246IGFkZCByLCBzLCB2IHZhbHVlcycsXG4gICAgKTtcblxuICAgIC8vIHNldCBzdGF0ZSB0byBzaWduZWRcbiAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLnNldFR4U3RhdHVzU2lnbmVkKHR4TWV0YS5pZCk7XG4gICAgY29uc3QgcmF3VHggPSBidWZmZXJUb0hleChzaWduZWRFdGhUeC5zZXJpYWxpemUoKSk7XG4gICAgcmV0dXJuIHJhd1R4O1xuICB9XG5cbiAgLyoqXG4gICAqIHB1Ymxpc2hlcyB0aGUgcmF3IHR4IGFuZCBzZXRzIHRoZSB0eE1ldGEgdG8gc3VibWl0dGVkXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0eElkIC0gdGhlIHR4J3MgSWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJhd1R4IC0gdGhlIGhleCBzdHJpbmcgb2YgdGhlIHNlcmlhbGl6ZWQgc2lnbmVkIHRyYW5zYWN0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKiBAcGFyYW0ge251bWJlcn0gYWN0aW9uSWQgLSBhY3Rpb25JZCBwYXNzZWQgZnJvbSBVSVxuICAgKi9cbiAgYXN5bmMgcHVibGlzaFRyYW5zYWN0aW9uKHR4SWQsIHJhd1R4LCBhY3Rpb25JZCkge1xuICAgIGNvbnN0IHR4TWV0YSA9IHRoaXMudHhTdGF0ZU1hbmFnZXIuZ2V0VHJhbnNhY3Rpb24odHhJZCk7XG4gICAgdHhNZXRhLnJhd1R4ID0gcmF3VHg7XG4gICAgaWYgKHR4TWV0YS50eXBlID09PSBUcmFuc2FjdGlvblR5cGUuc3dhcCkge1xuICAgICAgY29uc3QgcHJlVHhCYWxhbmNlID0gYXdhaXQgdGhpcy5xdWVyeS5nZXRCYWxhbmNlKHR4TWV0YS50eFBhcmFtcy5mcm9tKTtcbiAgICAgIHR4TWV0YS5wcmVUeEJhbGFuY2UgPSBwcmVUeEJhbGFuY2UudG9TdHJpbmcoMTYpO1xuICAgIH1cbiAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLnVwZGF0ZVRyYW5zYWN0aW9uKFxuICAgICAgdHhNZXRhLFxuICAgICAgJ3RyYW5zYWN0aW9ucyNwdWJsaXNoVHJhbnNhY3Rpb24nLFxuICAgICk7XG4gICAgbGV0IHR4SGFzaDtcbiAgICB0cnkge1xuICAgICAgdHhIYXNoID0gYXdhaXQgdGhpcy5xdWVyeS5zZW5kUmF3VHJhbnNhY3Rpb24ocmF3VHgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IubWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdrbm93biB0cmFuc2FjdGlvbicpKSB7XG4gICAgICAgIHR4SGFzaCA9IGtlY2Nhayh0b0J1ZmZlcihhZGRIZXhQcmVmaXgocmF3VHgpLCAnaGV4JykpLnRvU3RyaW5nKCdoZXgnKTtcbiAgICAgICAgdHhIYXNoID0gYWRkSGV4UHJlZml4KHR4SGFzaCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zZXRUeEhhc2godHhJZCwgdHhIYXNoKTtcblxuICAgIHRoaXMudHhTdGF0ZU1hbmFnZXIuc2V0VHhTdGF0dXNTdWJtaXR0ZWQodHhJZCk7XG5cbiAgICB0aGlzLl90cmFja1RyYW5zYWN0aW9uTWV0cmljc0V2ZW50KFxuICAgICAgdHhNZXRhLFxuICAgICAgVHJhbnNhY3Rpb25NZXRhTWV0cmljc0V2ZW50LnN1Ym1pdHRlZCxcbiAgICAgIGFjdGlvbklkLFxuICAgICk7XG4gIH1cblxuICBhc3luYyB1cGRhdGVQb3N0VHhCYWxhbmNlKHsgdHhNZXRhLCB0eElkLCBudW1iZXJPZkF0dGVtcHRzID0gNiB9KSB7XG4gICAgY29uc3QgcG9zdFR4QmFsYW5jZSA9IGF3YWl0IHRoaXMucXVlcnkuZ2V0QmFsYW5jZSh0eE1ldGEudHhQYXJhbXMuZnJvbSk7XG4gICAgY29uc3QgbGF0ZXN0VHhNZXRhID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbih0eElkKTtcbiAgICBjb25zdCBhcHByb3ZhbFR4TWV0YSA9IGxhdGVzdFR4TWV0YS5hcHByb3ZhbFR4SWRcbiAgICAgID8gdGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbihsYXRlc3RUeE1ldGEuYXBwcm92YWxUeElkKVxuICAgICAgOiBudWxsO1xuICAgIGxhdGVzdFR4TWV0YS5wb3N0VHhCYWxhbmNlID0gcG9zdFR4QmFsYW5jZS50b1N0cmluZygxNik7XG4gICAgY29uc3QgaXNEZWZhdWx0VG9rZW5BZGRyZXNzID0gaXNTd2Fwc0RlZmF1bHRUb2tlbkFkZHJlc3MoXG4gICAgICB0eE1ldGEuZGVzdGluYXRpb25Ub2tlbkFkZHJlc3MsXG4gICAgICB0eE1ldGEuY2hhaW5JZCxcbiAgICApO1xuICAgIGlmIChcbiAgICAgIGlzRGVmYXVsdFRva2VuQWRkcmVzcyAmJlxuICAgICAgdHhNZXRhLnByZVR4QmFsYW5jZSA9PT0gbGF0ZXN0VHhNZXRhLnBvc3RUeEJhbGFuY2UgJiZcbiAgICAgIG51bWJlck9mQXR0ZW1wdHMgPiAwXG4gICAgKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgLy8gSWYgcG9zdFR4QmFsYW5jZSBpcyB0aGUgc2FtZSBhcyBwcmVUeEJhbGFuY2UsIHRyeSBpdCBhZ2Fpbi5cbiAgICAgICAgdGhpcy51cGRhdGVQb3N0VHhCYWxhbmNlKHtcbiAgICAgICAgICB0eE1ldGEsXG4gICAgICAgICAgdHhJZCxcbiAgICAgICAgICBudW1iZXJPZkF0dGVtcHRzOiBudW1iZXJPZkF0dGVtcHRzIC0gMSxcbiAgICAgICAgfSk7XG4gICAgICB9LCBVUERBVEVfUE9TVF9UWF9CQUxBTkNFX1RJTUVPVVQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLnVwZGF0ZVRyYW5zYWN0aW9uKFxuICAgICAgICBsYXRlc3RUeE1ldGEsXG4gICAgICAgICd0cmFuc2FjdGlvbnMjY29uZmlybVRyYW5zYWN0aW9uIC0gYWRkIHBvc3RUeEJhbGFuY2UnLFxuICAgICAgKTtcbiAgICAgIHRoaXMuX3RyYWNrU3dhcHNNZXRyaWNzKGxhdGVzdFR4TWV0YSwgYXBwcm92YWxUeE1ldGEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzdGF0dXMgb2YgdGhlIHRyYW5zYWN0aW9uIHRvIGNvbmZpcm1lZCBhbmQgc2V0cyB0aGUgc3RhdHVzIG9mIG5vbmNlIGR1cGxpY2F0ZXMgYXNcbiAgICogZHJvcHBlZCBpZiB0aGUgdHhQYXJhbXMgaGF2ZSBkYXRhIGl0IHdpbGwgZmV0Y2ggdGhlIHR4UmVjZWlwdFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdHhJZCAtIFRoZSB0eCdzIElEXG4gICAqIEBwYXJhbSB0eFJlY2VpcHRcbiAgICogQHBhcmFtIGJhc2VGZWVQZXJHYXNcbiAgICogQHBhcmFtIGJsb2NrVGltZXN0YW1wXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgYXN5bmMgY29uZmlybVRyYW5zYWN0aW9uKHR4SWQsIHR4UmVjZWlwdCwgYmFzZUZlZVBlckdhcywgYmxvY2tUaW1lc3RhbXApIHtcbiAgICAvLyBnZXQgdGhlIHR4UmVjZWlwdCBiZWZvcmUgbWFya2luZyB0aGUgdHJhbnNhY3Rpb24gY29uZmlybWVkXG4gICAgLy8gdG8gZW5zdXJlIHRoZSByZWNlaXB0IGlzIGdvdHRlbiBiZWZvcmUgdGhlIHVpIHJldml2ZXMgdGhlIHR4XG4gICAgY29uc3QgdHhNZXRhID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbih0eElkKTtcblxuICAgIGlmICghdHhNZXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGdhc1VzZWQgPSB0eFV0aWxzLm5vcm1hbGl6ZVR4UmVjZWlwdEdhc1VzZWQodHhSZWNlaXB0Lmdhc1VzZWQpO1xuXG4gICAgICB0eE1ldGEudHhSZWNlaXB0ID0ge1xuICAgICAgICAuLi50eFJlY2VpcHQsXG4gICAgICAgIGdhc1VzZWQsXG4gICAgICB9O1xuXG4gICAgICBpZiAoYmFzZUZlZVBlckdhcykge1xuICAgICAgICB0eE1ldGEuYmFzZUZlZVBlckdhcyA9IGJhc2VGZWVQZXJHYXM7XG4gICAgICB9XG4gICAgICBpZiAoYmxvY2tUaW1lc3RhbXApIHtcbiAgICAgICAgdHhNZXRhLmJsb2NrVGltZXN0YW1wID0gYmxvY2tUaW1lc3RhbXA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudHhTdGF0ZU1hbmFnZXIuc2V0VHhTdGF0dXNDb25maXJtZWQodHhJZCk7XG4gICAgICB0aGlzLl9tYXJrTm9uY2VEdXBsaWNhdGVzRHJvcHBlZCh0eElkKTtcblxuICAgICAgY29uc3QgeyBzdWJtaXR0ZWRUaW1lIH0gPSB0eE1ldGE7XG4gICAgICBjb25zdCBtZXRyaWNzUGFyYW1zID0geyBnYXNfdXNlZDogZ2FzVXNlZCB9O1xuXG4gICAgICBpZiAoc3VibWl0dGVkVGltZSkge1xuICAgICAgICBtZXRyaWNzUGFyYW1zLmNvbXBsZXRpb25fdGltZSA9XG4gICAgICAgICAgdGhpcy5fZ2V0VHJhbnNhY3Rpb25Db21wbGV0aW9uVGltZShzdWJtaXR0ZWRUaW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR4UmVjZWlwdC5zdGF0dXMgPT09ICcweDAnKSB7XG4gICAgICAgIG1ldHJpY3NQYXJhbXMuc3RhdHVzID0gTUVUUklDU19TVEFUVVNfRkFJTEVEO1xuICAgICAgICAvLyBtZXRyaWNzUGFyYW1zLmVycm9yID0gVE9ETzogZmlndXJlIG91dCBhIHdheSB0byBnZXQgdGhlIG9uLWNoYWluIGZhaWx1cmUgcmVhc29uXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RyYWNrVHJhbnNhY3Rpb25NZXRyaWNzRXZlbnQoXG4gICAgICAgIHR4TWV0YSxcbiAgICAgICAgVHJhbnNhY3Rpb25NZXRhTWV0cmljc0V2ZW50LmZpbmFsaXplZCxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICBtZXRyaWNzUGFyYW1zLFxuICAgICAgKTtcblxuICAgICAgdGhpcy50eFN0YXRlTWFuYWdlci51cGRhdGVUcmFuc2FjdGlvbihcbiAgICAgICAgdHhNZXRhLFxuICAgICAgICAndHJhbnNhY3Rpb25zI2NvbmZpcm1UcmFuc2FjdGlvbiAtIGFkZCB0eFJlY2VpcHQnLFxuICAgICAgKTtcblxuICAgICAgaWYgKHR4TWV0YS50eXBlID09PSBUcmFuc2FjdGlvblR5cGUuc3dhcCkge1xuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVBvc3RUeEJhbGFuY2Uoe1xuICAgICAgICAgIHR4TWV0YSxcbiAgICAgICAgICB0eElkLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy5lcnJvcihlcnIpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNvbmZpcm1FeHRlcm5hbFRyYW5zYWN0aW9uKHR4TWV0YSwgdHhSZWNlaXB0LCBiYXNlRmVlUGVyR2FzKSB7XG4gICAgLy8gYWRkIGV4dGVybmFsIHRyYW5zYWN0aW9uXG4gICAgYXdhaXQgdGhpcy50eFN0YXRlTWFuYWdlci5hZGRFeHRlcm5hbFRyYW5zYWN0aW9uKHR4TWV0YSk7XG5cbiAgICBpZiAoIXR4TWV0YSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHR4SWQgPSB0eE1ldGEuaWQ7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgZ2FzVXNlZCA9IHR4VXRpbHMubm9ybWFsaXplVHhSZWNlaXB0R2FzVXNlZCh0eFJlY2VpcHQuZ2FzVXNlZCk7XG5cbiAgICAgIHR4TWV0YS50eFJlY2VpcHQgPSB7XG4gICAgICAgIC4uLnR4UmVjZWlwdCxcbiAgICAgICAgZ2FzVXNlZCxcbiAgICAgIH07XG5cbiAgICAgIGlmIChiYXNlRmVlUGVyR2FzKSB7XG4gICAgICAgIHR4TWV0YS5iYXNlRmVlUGVyR2FzID0gYmFzZUZlZVBlckdhcztcbiAgICAgIH1cblxuICAgICAgdGhpcy50eFN0YXRlTWFuYWdlci5zZXRUeFN0YXR1c0NvbmZpcm1lZCh0eElkKTtcbiAgICAgIHRoaXMuX21hcmtOb25jZUR1cGxpY2F0ZXNEcm9wcGVkKHR4SWQpO1xuXG4gICAgICBjb25zdCB7IHN1Ym1pdHRlZFRpbWUgfSA9IHR4TWV0YTtcbiAgICAgIGNvbnN0IG1ldHJpY3NQYXJhbXMgPSB7IGdhc191c2VkOiBnYXNVc2VkIH07XG5cbiAgICAgIGlmIChzdWJtaXR0ZWRUaW1lKSB7XG4gICAgICAgIG1ldHJpY3NQYXJhbXMuY29tcGxldGlvbl90aW1lID1cbiAgICAgICAgICB0aGlzLl9nZXRUcmFuc2FjdGlvbkNvbXBsZXRpb25UaW1lKHN1Ym1pdHRlZFRpbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHhSZWNlaXB0LnN0YXR1cyA9PT0gJzB4MCcpIHtcbiAgICAgICAgbWV0cmljc1BhcmFtcy5zdGF0dXMgPSBNRVRSSUNTX1NUQVRVU19GQUlMRUQ7XG4gICAgICAgIC8vIG1ldHJpY3NQYXJhbXMuZXJyb3IgPSBUT0RPOiBmaWd1cmUgb3V0IGEgd2F5IHRvIGdldCB0aGUgb24tY2hhaW4gZmFpbHVyZSByZWFzb25cbiAgICAgIH1cblxuICAgICAgdGhpcy5fdHJhY2tUcmFuc2FjdGlvbk1ldHJpY3NFdmVudChcbiAgICAgICAgdHhNZXRhLFxuICAgICAgICBUcmFuc2FjdGlvbk1ldGFNZXRyaWNzRXZlbnQuZmluYWxpemVkLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIG1ldHJpY3NQYXJhbXMsXG4gICAgICApO1xuXG4gICAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLnVwZGF0ZVRyYW5zYWN0aW9uKFxuICAgICAgICB0eE1ldGEsXG4gICAgICAgICd0cmFuc2FjdGlvbnMjY29uZmlybVRyYW5zYWN0aW9uIC0gYWRkIHR4UmVjZWlwdCcsXG4gICAgICApO1xuXG4gICAgICBpZiAodHhNZXRhLnR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5zd2FwKSB7XG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlUG9zdFR4QmFsYW5jZSh7XG4gICAgICAgICAgdHhNZXRhLFxuICAgICAgICAgIHR4SWQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLmVycm9yKGVycik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgdGhlIHVpIHRoYXRzIHNldHMgdGhlIHRyYW5zYWN0aW9uIHRvIHJlamVjdGVkXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0eElkIC0gdGhlIHR4J3MgSWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFjdGlvbklkIC0gYWN0aW9uSWQgcGFzc2VkIGZyb20gVUlcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBhc3luYyBjYW5jZWxUcmFuc2FjdGlvbih0eElkLCBhY3Rpb25JZCkge1xuICAgIGNvbnN0IHR4TWV0YSA9IHRoaXMudHhTdGF0ZU1hbmFnZXIuZ2V0VHJhbnNhY3Rpb24odHhJZCk7XG4gICAgdGhpcy50eFN0YXRlTWFuYWdlci5zZXRUeFN0YXR1c1JlamVjdGVkKHR4SWQpO1xuICAgIHRoaXMuX3JlamVjdEFwcHJvdmFsKHR4TWV0YSk7XG4gICAgdGhpcy5fdHJhY2tUcmFuc2FjdGlvbk1ldHJpY3NFdmVudChcbiAgICAgIHR4TWV0YSxcbiAgICAgIFRyYW5zYWN0aW9uTWV0YU1ldHJpY3NFdmVudC5yZWplY3RlZCxcbiAgICAgIGFjdGlvbklkLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdHhIYXMgb24gdGhlIHR4TWV0YVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdHhJZCAtIHRoZSB0eCdzIElkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eEhhc2ggLSB0aGUgaGFzaCBmb3IgdGhlIHR4TWV0YVxuICAgKi9cbiAgc2V0VHhIYXNoKHR4SWQsIHR4SGFzaCkge1xuICAgIC8vIEFkZCB0aGUgdHggaGFzaCB0byB0aGUgcGVyc2lzdGVkIG1ldGEtdHggb2JqZWN0XG4gICAgY29uc3QgdHhNZXRhID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbih0eElkKTtcbiAgICB0eE1ldGEuaGFzaCA9IHR4SGFzaDtcbiAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLnVwZGF0ZVRyYW5zYWN0aW9uKHR4TWV0YSwgJ3RyYW5zYWN0aW9ucyNzZXRUeEhhc2gnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZW5pZW5jZSBtZXRob2QgZm9yIHRoZSBVSSB0byBlYXNpbHkgY3JlYXRlIGV2ZW50IGZyYWdtZW50cyB3aGVuIHRoZVxuICAgKiBmcmFnbWVudCBkb2VzIG5vdCBleGlzdCBpbiBzdGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRyYW5zYWN0aW9uSWQgLSBUaGUgdHJhbnNhY3Rpb24gaWQgdG8gY3JlYXRlIHRoZSBldmVudFxuICAgKiAgZnJhZ21lbnQgZm9yXG4gICAqIEBwYXJhbSB7dmFsdWVPZjxUcmFuc2FjdGlvbk1ldGFNZXRyaWNzRXZlbnQ+fSBldmVudCAtIGV2ZW50IHR5cGUgdG8gY3JlYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpb25JZCAtIGFjdGlvbklkIHBhc3NlZCBmcm9tIFVJXG4gICAqL1xuICBhc3luYyBjcmVhdGVUcmFuc2FjdGlvbkV2ZW50RnJhZ21lbnQodHJhbnNhY3Rpb25JZCwgZXZlbnQsIGFjdGlvbklkKSB7XG4gICAgY29uc3QgdHhNZXRhID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbklkKTtcbiAgICBjb25zdCB7IHByb3BlcnRpZXMsIHNlbnNpdGl2ZVByb3BlcnRpZXMgfSA9XG4gICAgICBhd2FpdCB0aGlzLl9idWlsZEV2ZW50RnJhZ21lbnRQcm9wZXJ0aWVzKHR4TWV0YSk7XG4gICAgdGhpcy5fY3JlYXRlVHJhbnNhY3Rpb25FdmVudEZyYWdtZW50KFxuICAgICAgdHhNZXRhLFxuICAgICAgZXZlbnQsXG4gICAgICBwcm9wZXJ0aWVzLFxuICAgICAgc2Vuc2l0aXZlUHJvcGVydGllcyxcbiAgICAgIGFjdGlvbklkLFxuICAgICk7XG4gIH1cblxuICAvL1xuICAvLyAgICAgICAgICAgUFJJVkFURSBNRVRIT0RTXG4gIC8vXG4gIC8qKiBtYXBzIG1ldGhvZHMgZm9yIGNvbnZlbmllbmNlKi9cbiAgX21hcE1ldGhvZHMoKSB7XG4gICAgLyoqIEByZXR1cm5zIHtvYmplY3R9IHRoZSBzdGF0ZSBpbiB0cmFuc2FjdGlvbiBjb250cm9sbGVyICovXG4gICAgdGhpcy5nZXRTdGF0ZSA9ICgpID0+IHRoaXMubWVtU3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgIC8qKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgdXNlciBzZWxlY3RlZCBhZGRyZXNzICovXG4gICAgdGhpcy5nZXRTZWxlY3RlZEFkZHJlc3MgPSAoKSA9PlxuICAgICAgdGhpcy5wcmVmZXJlbmNlc1N0b3JlLmdldFN0YXRlKCkuc2VsZWN0ZWRBZGRyZXNzO1xuXG4gICAgLyoqIEByZXR1cm5zIHtBcnJheX0gdHJhbnNhY3Rpb25zIHdob3Mgc3RhdHVzIGlzIHVuYXBwcm92ZWQgKi9cbiAgICB0aGlzLmdldFVuYXBwcm92ZWRUeENvdW50ID0gKCkgPT5cbiAgICAgIE9iamVjdC5rZXlzKHRoaXMudHhTdGF0ZU1hbmFnZXIuZ2V0VW5hcHByb3ZlZFR4TGlzdCgpKS5sZW5ndGg7XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBudW1iZXIgb2YgdHJhbnNhY3Rpb25zIHRoYXQgaGF2ZSB0aGUgc3RhdHVzIHN1Ym1pdHRlZFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhY2NvdW50IC0gaGV4IHByZWZpeGVkIGFjY291bnRcbiAgICAgKi9cbiAgICB0aGlzLmdldFBlbmRpbmdUeENvdW50ID0gKGFjY291bnQpID0+XG4gICAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLmdldFBlbmRpbmdUcmFuc2FjdGlvbnMoYWNjb3VudCkubGVuZ3RoO1xuXG4gICAgLyoqXG4gICAgICogc2VlIHR4U3RhdGVNYW5hZ2VyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0c1xuICAgICAqL1xuICAgIHRoaXMuZ2V0VHJhbnNhY3Rpb25zID0gKG9wdHMpID0+IHRoaXMudHhTdGF0ZU1hbmFnZXIuZ2V0VHJhbnNhY3Rpb25zKG9wdHMpO1xuXG4gICAgLyoqIEByZXR1cm5zIHtvYmplY3R9IHRoZSBzYXZlZCBkZWZhdWx0IHZhbHVlcyBmb3IgYWR2YW5jZWRHYXNGZWUgKi9cbiAgICB0aGlzLmdldEFkdmFuY2VkR2FzRmVlID0gKCkgPT5cbiAgICAgIHRoaXMucHJlZmVyZW5jZXNTdG9yZS5nZXRTdGF0ZSgpLmFkdmFuY2VkR2FzRmVlO1xuICB9XG5cbiAgLy8gY2FsbGVkIG9uY2Ugb24gc3RhcnR1cFxuICBhc3luYyBfdXBkYXRlUGVuZGluZ1R4c0FmdGVyRmlyc3RCbG9jaygpIHtcbiAgICAvLyB3YWl0IGZvciBmaXJzdCBibG9jayBzbyB3ZSBrbm93IHdlJ3JlIHJlYWR5XG4gICAgYXdhaXQgdGhpcy5ibG9ja1RyYWNrZXIuZ2V0TGF0ZXN0QmxvY2soKTtcbiAgICAvLyBnZXQgc3RhdHVzIHVwZGF0ZSBmb3IgYWxsIHBlbmRpbmcgdHJhbnNhY3Rpb25zIChmb3IgdGhlIGN1cnJlbnQgbmV0d29yaylcbiAgICBhd2FpdCB0aGlzLnBlbmRpbmdUeFRyYWNrZXIudXBkYXRlUGVuZGluZ1R4cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIHRyYW5zYWN0aW9uIGNvbnRyb2xsZXIgd2FzIHJlYm9vdGVkIHdpdGggdHJhbnNhY3Rpb25zIHRoYXQgYXJlIHVuY29tcGxldGVkXG4gICAqIGluIHN0ZXBzIG9mIHRoZSB0cmFuc2FjdGlvbiBzaWduaW5nIG9yIHVzZXIgY29uZmlybWF0aW9uIHByb2Nlc3MgaXQgd2lsbCBlaXRoZXJcbiAgICogdHJhbnNpdGlvbiB0eE1ldGFzIHRvIGEgZmFpbGVkIHN0YXRlIG9yIHRyeSB0byByZWRvIHRob3NlIHRhc2tzLlxuICAgKi9cblxuICBfb25Cb290Q2xlYW5VcCgpIHtcbiAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyXG4gICAgICAuZ2V0VHJhbnNhY3Rpb25zKHtcbiAgICAgICAgc2VhcmNoQ3JpdGVyaWE6IHtcbiAgICAgICAgICBzdGF0dXM6IFRyYW5zYWN0aW9uU3RhdHVzLnVuYXBwcm92ZWQsXG4gICAgICAgICAgbG9hZGluZ0RlZmF1bHRzOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICAgIC5mb3JFYWNoKCh0eCkgPT4ge1xuICAgICAgICB0aGlzLmFkZFR4R2FzRGVmYXVsdHModHgpXG4gICAgICAgICAgLnRoZW4oKHR4TWV0YSkgPT4ge1xuICAgICAgICAgICAgdHhNZXRhLmxvYWRpbmdEZWZhdWx0cyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy50eFN0YXRlTWFuYWdlci51cGRhdGVUcmFuc2FjdGlvbihcbiAgICAgICAgICAgICAgdHhNZXRhLFxuICAgICAgICAgICAgICAndHJhbnNhY3Rpb25zOiBnYXMgZXN0aW1hdGlvbiBmb3IgdHggb24gYm9vdCcsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHhNZXRhID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbih0eC5pZCk7XG4gICAgICAgICAgICB0eE1ldGEubG9hZGluZ0RlZmF1bHRzID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLnVwZGF0ZVRyYW5zYWN0aW9uKFxuICAgICAgICAgICAgICB0eE1ldGEsXG4gICAgICAgICAgICAgICdmYWlsZWQgdG8gZXN0aW1hdGUgZ2FzIGR1cmluZyBib290IGNsZWFudXAuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl9mYWlsVHJhbnNhY3Rpb24odHhNZXRhLmlkLCBlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgIHRoaXMudHhTdGF0ZU1hbmFnZXJcbiAgICAgIC5nZXRUcmFuc2FjdGlvbnMoe1xuICAgICAgICBzZWFyY2hDcml0ZXJpYToge1xuICAgICAgICAgIHN0YXR1czogVHJhbnNhY3Rpb25TdGF0dXMuYXBwcm92ZWQsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgLmZvckVhY2goKHR4TWV0YSkgPT4ge1xuXG4gICAgICAgICAgLy8gTGluZSBiZWxvdyB3aWxsIHRyeSB0byBwdWJsaXNoIHRyYW5zYWN0aW9uIHdoaWNoIGlzIGluXG4gICAgICAgICAgLy8gQVBQUk9WRUQgc3RhdGUgYXQgdGhlIHRpbWUgb2YgY29udHJvbGxlciBib290dXBcbiAgICAgICAgICB0aGlzLmFwcHJvdmVUcmFuc2FjdGlvbih0eE1ldGEuaWQpO1xuXG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBpcyBjYWxsZWQgaW4gY29uc3RydWN0b3IgYXBwbGllcyB0aGUgbGlzdGVuZXJzIGZvciBwZW5kaW5nVHhUcmFja2VyIHR4U3RhdGVNYW5hZ2VyXG4gICAqIGFuZCBibG9ja1RyYWNrZXJcbiAgICovXG4gIF9zZXR1cExpc3RlbmVycygpIHtcbiAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLm9uKFxuICAgICAgJ3R4OnN0YXR1cy11cGRhdGUnLFxuICAgICAgdGhpcy5lbWl0LmJpbmQodGhpcywgJ3R4OnN0YXR1cy11cGRhdGUnKSxcbiAgICApO1xuICAgIHRoaXMuX3NldHVwQmxvY2tUcmFja2VyTGlzdGVuZXIoKTtcbiAgICB0aGlzLnBlbmRpbmdUeFRyYWNrZXIub24oJ3R4Ondhcm5pbmcnLCAodHhNZXRhKSA9PiB7XG4gICAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLnVwZGF0ZVRyYW5zYWN0aW9uKFxuICAgICAgICB0eE1ldGEsXG4gICAgICAgICd0cmFuc2FjdGlvbnMvcGVuZGluZy10eC10cmFja2VyI2V2ZW50OiB0eDp3YXJuaW5nJyxcbiAgICAgICk7XG4gICAgfSk7XG4gICAgdGhpcy5wZW5kaW5nVHhUcmFja2VyLm9uKCd0eDpmYWlsZWQnLCAodHhJZCwgZXJyb3IpID0+IHtcbiAgICAgIHRoaXMuX2ZhaWxUcmFuc2FjdGlvbih0eElkLCBlcnJvcik7XG4gICAgfSk7XG4gICAgdGhpcy5wZW5kaW5nVHhUcmFja2VyLm9uKFxuICAgICAgJ3R4OmNvbmZpcm1lZCcsXG4gICAgICAodHhJZCwgdHJhbnNhY3Rpb25SZWNlaXB0LCBiYXNlRmVlUGVyR2FzLCBibG9ja1RpbWVzdGFtcCkgPT5cbiAgICAgICAgdGhpcy5jb25maXJtVHJhbnNhY3Rpb24oXG4gICAgICAgICAgdHhJZCxcbiAgICAgICAgICB0cmFuc2FjdGlvblJlY2VpcHQsXG4gICAgICAgICAgYmFzZUZlZVBlckdhcyxcbiAgICAgICAgICBibG9ja1RpbWVzdGFtcCxcbiAgICAgICAgKSxcbiAgICApO1xuICAgIHRoaXMucGVuZGluZ1R4VHJhY2tlci5vbigndHg6ZHJvcHBlZCcsICh0eElkKSA9PiB7XG4gICAgICB0aGlzLl9kcm9wVHJhbnNhY3Rpb24odHhJZCk7XG4gICAgfSk7XG4gICAgdGhpcy5wZW5kaW5nVHhUcmFja2VyLm9uKCd0eDpibG9jay11cGRhdGUnLCAodHhNZXRhLCBsYXRlc3RCbG9ja051bWJlcikgPT4ge1xuICAgICAgaWYgKCF0eE1ldGEuZmlyc3RSZXRyeUJsb2NrTnVtYmVyKSB7XG4gICAgICAgIHR4TWV0YS5maXJzdFJldHJ5QmxvY2tOdW1iZXIgPSBsYXRlc3RCbG9ja051bWJlcjtcbiAgICAgICAgdGhpcy50eFN0YXRlTWFuYWdlci51cGRhdGVUcmFuc2FjdGlvbihcbiAgICAgICAgICB0eE1ldGEsXG4gICAgICAgICAgJ3RyYW5zYWN0aW9ucy9wZW5kaW5nLXR4LXRyYWNrZXIjZXZlbnQ6IHR4OmJsb2NrLXVwZGF0ZScsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5wZW5kaW5nVHhUcmFja2VyLm9uKCd0eDpyZXRyeScsICh0eE1ldGEpID0+IHtcbiAgICAgIGlmICghKCdyZXRyeUNvdW50JyBpbiB0eE1ldGEpKSB7XG4gICAgICAgIHR4TWV0YS5yZXRyeUNvdW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHR4TWV0YS5yZXRyeUNvdW50ICs9IDE7XG4gICAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLnVwZGF0ZVRyYW5zYWN0aW9uKFxuICAgICAgICB0eE1ldGEsXG4gICAgICAgICd0cmFuc2FjdGlvbnMvcGVuZGluZy10eC10cmFja2VyI2V2ZW50OiB0eDpyZXRyeScsXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgb3RoZXIgdHhNZXRhIHN0YXR1c2VzIHRvIGRyb3BwZWQgaWYgdGhlIHR4TWV0YSB0aGF0IGhhcyBiZWVuIGNvbmZpcm1lZCBoYXMgb3RoZXIgdHJhbnNhY3Rpb25zXG4gICAqIGluIHRoZSBsaXN0IGhhdmUgdGhlIHNhbWUgbm9uY2VcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHR4SWQgLSB0aGUgdHhJZCBvZiB0aGUgdHJhbnNhY3Rpb24gdGhhdCBoYXMgYmVlbiBjb25maXJtZWQgaW4gYSBibG9ja1xuICAgKi9cbiAgX21hcmtOb25jZUR1cGxpY2F0ZXNEcm9wcGVkKHR4SWQpIHtcbiAgICAvLyBnZXQgdGhlIGNvbmZpcm1lZCB0cmFuc2FjdGlvbnMgbm9uY2UgYW5kIGZyb20gYWRkcmVzc1xuICAgIGNvbnN0IHR4TWV0YSA9IHRoaXMudHhTdGF0ZU1hbmFnZXIuZ2V0VHJhbnNhY3Rpb24odHhJZCk7XG4gICAgY29uc3QgeyBub25jZSwgZnJvbSB9ID0gdHhNZXRhLnR4UGFyYW1zO1xuICAgIGNvbnN0IHNhbWVOb25jZVR4cyA9IHRoaXMudHhTdGF0ZU1hbmFnZXIuZ2V0VHJhbnNhY3Rpb25zKHtcbiAgICAgIHNlYXJjaENyaXRlcmlhOiB7IG5vbmNlLCBmcm9tIH0sXG4gICAgfSk7XG4gICAgaWYgKCFzYW1lTm9uY2VUeHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIG1hcmsgYWxsIHNhbWUgbm9uY2UgdHJhbnNhY3Rpb25zIGFzIGRyb3BwZWQgYW5kIGdpdmUgaSBhIHJlcGxhY2VkQnkgaGFzaFxuICAgIHNhbWVOb25jZVR4cy5mb3JFYWNoKChvdGhlclR4TWV0YSkgPT4ge1xuICAgICAgaWYgKG90aGVyVHhNZXRhLmlkID09PSB0eElkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG90aGVyVHhNZXRhLnJlcGxhY2VkQnkgPSB0eE1ldGEuaGFzaDtcbiAgICAgIG90aGVyVHhNZXRhLnJlcGxhY2VkQnlJZCA9IHR4TWV0YS5pZDtcbiAgICAgIHRoaXMudHhTdGF0ZU1hbmFnZXIudXBkYXRlVHJhbnNhY3Rpb24oXG4gICAgICAgIHR4TWV0YSxcbiAgICAgICAgJ3RyYW5zYWN0aW9ucy9wZW5kaW5nLXR4LXRyYWNrZXIjZXZlbnQ6IHR4OmNvbmZpcm1lZCByZWZlcmVuY2UgdG8gY29uZmlybWVkIHR4SGFzaCB3aXRoIHNhbWUgbm9uY2UnLFxuICAgICAgKTtcbiAgICAgIC8vIERyb3AgYW55IHRyYW5zYWN0aW9uIHRoYXQgd2Fzbid0IHByZXZpb3VzbHkgZmFpbGVkIChvZmYgY2hhaW4gZmFpbHVyZSlcbiAgICAgIGlmIChvdGhlclR4TWV0YS5zdGF0dXMgIT09IFRyYW5zYWN0aW9uU3RhdHVzLmZhaWxlZCkge1xuICAgICAgICB0aGlzLl9kcm9wVHJhbnNhY3Rpb24ob3RoZXJUeE1ldGEuaWQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgX3NldHVwQmxvY2tUcmFja2VyTGlzdGVuZXIoKSB7XG4gICAgbGV0IGxpc3RlbmVyc0FyZUFjdGl2ZSA9IGZhbHNlO1xuICAgIGNvbnN0IGxhdGVzdEJsb2NrSGFuZGxlciA9IHRoaXMuX29uTGF0ZXN0QmxvY2suYmluZCh0aGlzKTtcbiAgICBjb25zdCB7IGJsb2NrVHJhY2tlciwgdHhTdGF0ZU1hbmFnZXIgfSA9IHRoaXM7XG5cbiAgICB0eFN0YXRlTWFuYWdlci5vbigndHg6c3RhdHVzLXVwZGF0ZScsIHVwZGF0ZVN1YnNjcmlwdGlvbik7XG4gICAgdXBkYXRlU3Vic2NyaXB0aW9uKCk7XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVTdWJzY3JpcHRpb24oKSB7XG4gICAgICBjb25zdCBwZW5kaW5nVHhzID0gdHhTdGF0ZU1hbmFnZXIuZ2V0UGVuZGluZ1RyYW5zYWN0aW9ucygpO1xuICAgICAgaWYgKCFsaXN0ZW5lcnNBcmVBY3RpdmUgJiYgcGVuZGluZ1R4cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGJsb2NrVHJhY2tlci5vbignbGF0ZXN0JywgbGF0ZXN0QmxvY2tIYW5kbGVyKTtcbiAgICAgICAgbGlzdGVuZXJzQXJlQWN0aXZlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzQXJlQWN0aXZlICYmICFwZW5kaW5nVHhzLmxlbmd0aCkge1xuICAgICAgICBibG9ja1RyYWNrZXIucmVtb3ZlTGlzdGVuZXIoJ2xhdGVzdCcsIGxhdGVzdEJsb2NrSGFuZGxlcik7XG4gICAgICAgIGxpc3RlbmVyc0FyZUFjdGl2ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vbkxhdGVzdEJsb2NrKGJsb2NrTnVtYmVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMucGVuZGluZ1R4VHJhY2tlci51cGRhdGVQZW5kaW5nVHhzKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cuZXJyb3IoZXJyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMucGVuZGluZ1R4VHJhY2tlci5yZXN1Ym1pdFBlbmRpbmdUeHMoYmxvY2tOdW1iZXIpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLmVycm9yKGVycik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIG1lbVN0b3JlIGluIHRyYW5zYWN0aW9uIGNvbnRyb2xsZXJcbiAgICovXG4gIF91cGRhdGVNZW1zdG9yZSgpIHtcbiAgICBjb25zdCB1bmFwcHJvdmVkVHhzID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZXRVbmFwcHJvdmVkVHhMaXN0KCk7XG4gICAgY29uc3QgY3VycmVudE5ldHdvcmtUeExpc3QgPSB0aGlzLnR4U3RhdGVNYW5hZ2VyLmdldFRyYW5zYWN0aW9ucyh7XG4gICAgICBsaW1pdDogTUFYX01FTVNUT1JFX1RYX0xJU1RfU0laRSxcbiAgICB9KTtcbiAgICB0aGlzLm1lbVN0b3JlLnVwZGF0ZVN0YXRlKHsgdW5hcHByb3ZlZFR4cywgY3VycmVudE5ldHdvcmtUeExpc3QgfSk7XG4gIH1cblxuICBfY2FsY3VsYXRlVHJhbnNhY3Rpb25zQ29zdCh0eE1ldGEsIGFwcHJvdmFsVHhNZXRhKSB7XG4gICAgbGV0IGFwcHJvdmFsR2FzQ29zdCA9ICcweDAnO1xuICAgIGlmIChhcHByb3ZhbFR4TWV0YT8udHhSZWNlaXB0KSB7XG4gICAgICBhcHByb3ZhbEdhc0Nvc3QgPSBjYWxjR2FzVG90YWwoXG4gICAgICAgIGFwcHJvdmFsVHhNZXRhLnR4UmVjZWlwdC5nYXNVc2VkLFxuICAgICAgICBhcHByb3ZhbFR4TWV0YS50eFJlY2VpcHQuZWZmZWN0aXZlR2FzUHJpY2UsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCB0cmFkZUdhc0Nvc3QgPSBjYWxjR2FzVG90YWwoXG4gICAgICB0eE1ldGEudHhSZWNlaXB0Lmdhc1VzZWQsXG4gICAgICB0eE1ldGEudHhSZWNlaXB0LmVmZmVjdGl2ZUdhc1ByaWNlLFxuICAgICk7XG4gICAgY29uc3QgdHJhZGVBbmRBcHByb3ZhbEdhc0Nvc3QgPSBuZXcgQmlnTnVtYmVyKHRyYWRlR2FzQ29zdCwgMTYpXG4gICAgICAucGx1cyhhcHByb3ZhbEdhc0Nvc3QsIDE2KVxuICAgICAgLnRvU3RyaW5nKDE2KTtcbiAgICByZXR1cm4ge1xuICAgICAgYXBwcm92YWxHYXNDb3N0SW5FdGg6IE51bWJlcihoZXhXRUlUb0RlY0VUSChhcHByb3ZhbEdhc0Nvc3QpKSxcbiAgICAgIHRyYWRlR2FzQ29zdEluRXRoOiBOdW1iZXIoaGV4V0VJVG9EZWNFVEgodHJhZGVHYXNDb3N0KSksXG4gICAgICB0cmFkZUFuZEFwcHJvdmFsR2FzQ29zdEluRXRoOiBOdW1iZXIoXG4gICAgICAgIGhleFdFSVRvRGVjRVRIKHRyYWRlQW5kQXBwcm92YWxHYXNDb3N0KSxcbiAgICAgICksXG4gICAgfTtcbiAgfVxuXG4gIF90cmFja1N3YXBzTWV0cmljcyh0eE1ldGEsIGFwcHJvdmFsVHhNZXRhKSB7XG4gICAgaWYgKHRoaXMuX2dldFBhcnRpY2lwYXRlSW5NZXRyaWNzKCkgJiYgdHhNZXRhLnN3YXBNZXRhRGF0YSkge1xuICAgICAgaWYgKHR4TWV0YS50eFJlY2VpcHQuc3RhdHVzID09PSAnMHgwJykge1xuICAgICAgICB0aGlzLl90cmFja01ldGFNZXRyaWNzRXZlbnQoe1xuICAgICAgICAgIGV2ZW50OiAnU3dhcCBGYWlsZWQnLFxuICAgICAgICAgIHNlbnNpdGl2ZVByb3BlcnRpZXM6IHsgLi4udHhNZXRhLnN3YXBNZXRhRGF0YSB9LFxuICAgICAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuU3dhcHMsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdG9rZW5zUmVjZWl2ZWQgPSBnZXRTd2Fwc1Rva2Vuc1JlY2VpdmVkRnJvbVR4TWV0YShcbiAgICAgICAgICB0eE1ldGEuZGVzdGluYXRpb25Ub2tlblN5bWJvbCxcbiAgICAgICAgICB0eE1ldGEsXG4gICAgICAgICAgdHhNZXRhLmRlc3RpbmF0aW9uVG9rZW5BZGRyZXNzLFxuICAgICAgICAgIHR4TWV0YS50eFBhcmFtcy5mcm9tLFxuICAgICAgICAgIHR4TWV0YS5kZXN0aW5hdGlvblRva2VuRGVjaW1hbHMsXG4gICAgICAgICAgYXBwcm92YWxUeE1ldGEsXG4gICAgICAgICAgdHhNZXRhLmNoYWluSWQsXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgcXVvdGVWc0V4ZWN1dGlvblJhdGlvID0gdG9rZW5zUmVjZWl2ZWRcbiAgICAgICAgICA/IGAke25ldyBCaWdOdW1iZXIodG9rZW5zUmVjZWl2ZWQsIDEwKVxuICAgICAgICAgICAgICAuZGl2KHR4TWV0YS5zd2FwTWV0YURhdGEudG9rZW5fdG9fYW1vdW50LCAxMClcbiAgICAgICAgICAgICAgLnRpbWVzKDEwMClcbiAgICAgICAgICAgICAgLnJvdW5kKDIpfSVgXG4gICAgICAgICAgOiBudWxsO1xuXG4gICAgICAgIGNvbnN0IGVzdGltYXRlZFZzVXNlZEdhc1JhdGlvID1cbiAgICAgICAgICB0eE1ldGEudHhSZWNlaXB0Lmdhc1VzZWQgJiYgdHhNZXRhLnN3YXBNZXRhRGF0YS5lc3RpbWF0ZWRfZ2FzXG4gICAgICAgICAgICA/IGAke25ldyBCaWdOdW1iZXIodHhNZXRhLnR4UmVjZWlwdC5nYXNVc2VkLCAxNilcbiAgICAgICAgICAgICAgICAuZGl2KHR4TWV0YS5zd2FwTWV0YURhdGEuZXN0aW1hdGVkX2dhcywgMTApXG4gICAgICAgICAgICAgICAgLnRpbWVzKDEwMClcbiAgICAgICAgICAgICAgICAucm91bmQoMil9JWBcbiAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICBjb25zdCB0cmFuc2FjdGlvbnNDb3N0ID0gdGhpcy5fY2FsY3VsYXRlVHJhbnNhY3Rpb25zQ29zdChcbiAgICAgICAgICB0eE1ldGEsXG4gICAgICAgICAgYXBwcm92YWxUeE1ldGEsXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5fdHJhY2tNZXRhTWV0cmljc0V2ZW50KHtcbiAgICAgICAgICBldmVudDogJ1N3YXAgQ29tcGxldGVkJyxcbiAgICAgICAgICBjYXRlZ29yeTogTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5LlN3YXBzLFxuICAgICAgICAgIHNlbnNpdGl2ZVByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIC4uLnR4TWV0YS5zd2FwTWV0YURhdGEsXG4gICAgICAgICAgICB0b2tlbl90b19hbW91bnRfcmVjZWl2ZWQ6IHRva2Vuc1JlY2VpdmVkLFxuICAgICAgICAgICAgcXVvdGVfdnNfZXhlY3V0aW9uUmF0aW86IHF1b3RlVnNFeGVjdXRpb25SYXRpbyxcbiAgICAgICAgICAgIGVzdGltYXRlZF92c191c2VkX2dhc1JhdGlvOiBlc3RpbWF0ZWRWc1VzZWRHYXNSYXRpbyxcbiAgICAgICAgICAgIGFwcHJvdmFsX2dhc19jb3N0X2luX2V0aDogdHJhbnNhY3Rpb25zQ29zdC5hcHByb3ZhbEdhc0Nvc3RJbkV0aCxcbiAgICAgICAgICAgIHRyYWRlX2dhc19jb3N0X2luX2V0aDogdHJhbnNhY3Rpb25zQ29zdC50cmFkZUdhc0Nvc3RJbkV0aCxcbiAgICAgICAgICAgIHRyYWRlX2FuZF9hcHByb3ZhbF9nYXNfY29zdF9pbl9ldGg6XG4gICAgICAgICAgICAgIHRyYW5zYWN0aW9uc0Nvc3QudHJhZGVBbmRBcHByb3ZhbEdhc0Nvc3RJbkV0aCxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIGFsbG93YW5jZSBhbW91bnQgaW4gcmVsYXRpb24gdG8gdGhlIGRhcHAgcHJvcG9zZWQgYW1vdW50IGZvciBzcGVjaWZpYyB0b2tlblxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhbnNhY3Rpb25BcHByb3ZhbEFtb3VudFR5cGUgLSBUaGUgdHJhbnNhY3Rpb24gYXBwcm92YWwgYW1vdW50IHR5cGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpbmFsQXBwcm92YWxBbW91bnQgLSBUaGUgb3JpZ2luYWwgYXBwcm92YWwgYW1vdW50IGlzIHRoZSBvcmlnaW5hbGx5IGRhcHAgcHJvcG9zZWQgdG9rZW4gYW1vdW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaW5hbEFwcHJvdmFsQW1vdW50IC0gVGhlIGZpbmFsIGFwcHJvdmFsIGFtb3VudCBpcyB0aGUgY2hvc2VuIGFtb3VudCB3aGljaCB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZVxuICAgKiBvcmlnaW5hbGx5IGRhcHAgcHJvcG9zZWQgdG9rZW4gYW1vdW50IGlmIHRoZSB1c2VyIGRvZXMgbm90IGVkaXQgdGhlIGFtb3VudCBvciB3aWxsIGJlIGEgY3VzdG9tIHRva2VuIGFtb3VudCBzZXQgYnkgdGhlIHVzZXJcbiAgICovXG4gIF9hbGxvd2FuY2VBbW91bnRJblJlbGF0aW9uVG9EYXBwUHJvcG9zZWRWYWx1ZShcbiAgICB0cmFuc2FjdGlvbkFwcHJvdmFsQW1vdW50VHlwZSxcbiAgICBvcmlnaW5hbEFwcHJvdmFsQW1vdW50LFxuICAgIGZpbmFsQXBwcm92YWxBbW91bnQsXG4gICkge1xuICAgIGlmIChcbiAgICAgIHRyYW5zYWN0aW9uQXBwcm92YWxBbW91bnRUeXBlID09PSBUcmFuc2FjdGlvbkFwcHJvdmFsQW1vdW50VHlwZS5jdXN0b20gJiZcbiAgICAgIG9yaWdpbmFsQXBwcm92YWxBbW91bnQgJiZcbiAgICAgIGZpbmFsQXBwcm92YWxBbW91bnRcbiAgICApIHtcbiAgICAgIHJldHVybiBgJHtuZXcgQmlnTnVtYmVyKG9yaWdpbmFsQXBwcm92YWxBbW91bnQsIDEwKVxuICAgICAgICAuZGl2KGZpbmFsQXBwcm92YWxBbW91bnQsIDEwKVxuICAgICAgICAudGltZXMoMTAwKVxuICAgICAgICAucm91bmQoMil9YDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGFsbG93YW5jZSBhbW91bnQgaW4gcmVsYXRpb24gdG8gdGhlIGJhbGFuY2UgZm9yIHRoYXQgc3BlY2lmaWMgdG9rZW5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRyYW5zYWN0aW9uQXBwcm92YWxBbW91bnRUeXBlIC0gVGhlIHRyYW5zYWN0aW9uIGFwcHJvdmFsIGFtb3VudCB0eXBlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXBwUHJvcG9zZWRUb2tlbkFtb3VudCAtIFRoZSBkYXBwIHByb3Bvc2VkIHRva2VuIGFtb3VudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY3VycmVudFRva2VuQmFsYW5jZSAtIFRoZSBiYWxhbmNlIG9mIHRoZSB0b2tlbiB0aGF0IGlzIGJlaW5nIHNlbmRcbiAgICovXG4gIF9hbGxvd2FuY2VBbW91bnRJblJlbGF0aW9uVG9Ub2tlbkJhbGFuY2UoXG4gICAgdHJhbnNhY3Rpb25BcHByb3ZhbEFtb3VudFR5cGUsXG4gICAgZGFwcFByb3Bvc2VkVG9rZW5BbW91bnQsXG4gICAgY3VycmVudFRva2VuQmFsYW5jZSxcbiAgKSB7XG4gICAgaWYgKFxuICAgICAgKHRyYW5zYWN0aW9uQXBwcm92YWxBbW91bnRUeXBlID09PSBUcmFuc2FjdGlvbkFwcHJvdmFsQW1vdW50VHlwZS5jdXN0b20gfHxcbiAgICAgICAgdHJhbnNhY3Rpb25BcHByb3ZhbEFtb3VudFR5cGUgPT09XG4gICAgICAgICAgVHJhbnNhY3Rpb25BcHByb3ZhbEFtb3VudFR5cGUuZGFwcFByb3Bvc2VkKSAmJlxuICAgICAgZGFwcFByb3Bvc2VkVG9rZW5BbW91bnQgJiZcbiAgICAgIGN1cnJlbnRUb2tlbkJhbGFuY2VcbiAgICApIHtcbiAgICAgIHJldHVybiBgJHtuZXcgQmlnTnVtYmVyKGRhcHBQcm9wb3NlZFRva2VuQW1vdW50LCAxNilcbiAgICAgICAgLmRpdihjdXJyZW50VG9rZW5CYWxhbmNlLCAxMClcbiAgICAgICAgLnRpbWVzKDEwMClcbiAgICAgICAgLnJvdW5kKDIpfWA7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgYXN5bmMgX2J1aWxkRXZlbnRGcmFnbWVudFByb3BlcnRpZXModHhNZXRhLCBleHRyYVBhcmFtcykge1xuICAgIGNvbnN0IHtcbiAgICAgIHR5cGUsXG4gICAgICB0aW1lLFxuICAgICAgc3RhdHVzLFxuICAgICAgY2hhaW5JZCxcbiAgICAgIG9yaWdpbjogcmVmZXJyZXIsXG4gICAgICB0eFBhcmFtczoge1xuICAgICAgICBnYXNQcmljZSxcbiAgICAgICAgZ2FzOiBnYXNMaW1pdCxcbiAgICAgICAgbWF4RmVlUGVyR2FzLFxuICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhcyxcbiAgICAgICAgZXN0aW1hdGVTdWdnZXN0ZWQsXG4gICAgICAgIGVzdGltYXRlVXNlZCxcbiAgICAgIH0sXG4gICAgICBkZWZhdWx0R2FzRXN0aW1hdGVzLFxuICAgICAgb3JpZ2luYWxUeXBlLFxuICAgICAgcmVwbGFjZWRCeUlkLFxuICAgICAgbWV0YW1hc2tOZXR3b3JrSWQ6IG5ldHdvcmssXG4gICAgICBjdXN0b21Ub2tlbkFtb3VudCxcbiAgICAgIGRhcHBQcm9wb3NlZFRva2VuQW1vdW50LFxuICAgICAgY3VycmVudFRva2VuQmFsYW5jZSxcbiAgICAgIG9yaWdpbmFsQXBwcm92YWxBbW91bnQsXG4gICAgICBmaW5hbEFwcHJvdmFsQW1vdW50LFxuICAgICAgY29udHJhY3RNZXRob2ROYW1lLFxuICAgICAgc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlLFxuICAgIH0gPSB0eE1ldGE7XG5cbiAgICBjb25zdCBzb3VyY2UgPSByZWZlcnJlciA9PT0gT1JJR0lOX01FVEFNQVNLID8gJ3VzZXInIDogJ2RhcHAnO1xuXG4gICAgY29uc3QgeyBhc3NldFR5cGUsIHRva2VuU3RhbmRhcmQgfSA9IGF3YWl0IGRldGVybWluZVRyYW5zYWN0aW9uQXNzZXRUeXBlKFxuICAgICAgdHhNZXRhLFxuICAgICAgdGhpcy5xdWVyeSxcbiAgICAgIHRoaXMuZ2V0VG9rZW5TdGFuZGFyZEFuZERldGFpbHMsXG4gICAgKTtcblxuICAgIGNvbnN0IGdhc1BhcmFtcyA9IHt9O1xuXG4gICAgaWYgKGlzRUlQMTU1OVRyYW5zYWN0aW9uKHR4TWV0YSkpIHtcbiAgICAgIGdhc1BhcmFtcy5tYXhfZmVlX3Blcl9nYXMgPSBtYXhGZWVQZXJHYXM7XG4gICAgICBnYXNQYXJhbXMubWF4X3ByaW9yaXR5X2ZlZV9wZXJfZ2FzID0gbWF4UHJpb3JpdHlGZWVQZXJHYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdhc1BhcmFtcy5nYXNfcHJpY2UgPSBnYXNQcmljZTtcbiAgICB9XG5cbiAgICBpZiAoZGVmYXVsdEdhc0VzdGltYXRlcykge1xuICAgICAgY29uc3QgeyBlc3RpbWF0ZVR5cGUgfSA9IGRlZmF1bHRHYXNFc3RpbWF0ZXM7XG4gICAgICBpZiAoZXN0aW1hdGVUeXBlKSB7XG4gICAgICAgIGdhc1BhcmFtcy5kZWZhdWx0X2VzdGltYXRlID0gZXN0aW1hdGVUeXBlO1xuICAgICAgICBsZXQgZGVmYXVsdE1heEZlZVBlckdhcyA9IHR4TWV0YS5kZWZhdWx0R2FzRXN0aW1hdGVzLm1heEZlZVBlckdhcztcbiAgICAgICAgbGV0IGRlZmF1bHRNYXhQcmlvcml0eUZlZVBlckdhcyA9XG4gICAgICAgICAgdHhNZXRhLmRlZmF1bHRHYXNFc3RpbWF0ZXMubWF4UHJpb3JpdHlGZWVQZXJHYXM7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIEdhc1JlY29tbWVuZGF0aW9ucy5sb3csXG4gICAgICAgICAgICBHYXNSZWNvbW1lbmRhdGlvbnMubWVkaXVtLFxuICAgICAgICAgICAgR2FzUmVjb21tZW5kYXRpb25zLmhpZ2gsXG4gICAgICAgICAgXS5pbmNsdWRlcyhlc3RpbWF0ZVR5cGUpXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IHsgZ2FzRmVlRXN0aW1hdGVzIH0gPSBhd2FpdCB0aGlzLl9nZXRFSVAxNTU5R2FzRmVlRXN0aW1hdGVzKCk7XG4gICAgICAgICAgaWYgKGdhc0ZlZUVzdGltYXRlcz8uW2VzdGltYXRlVHlwZV0/LnN1Z2dlc3RlZE1heEZlZVBlckdhcykge1xuICAgICAgICAgICAgZGVmYXVsdE1heEZlZVBlckdhcyA9XG4gICAgICAgICAgICAgIGdhc0ZlZUVzdGltYXRlc1tlc3RpbWF0ZVR5cGVdPy5zdWdnZXN0ZWRNYXhGZWVQZXJHYXM7XG4gICAgICAgICAgICBnYXNQYXJhbXMuZGVmYXVsdF9tYXhfZmVlX3Blcl9nYXMgPSBkZWZhdWx0TWF4RmVlUGVyR2FzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZ2FzRmVlRXN0aW1hdGVzPy5bZXN0aW1hdGVUeXBlXT8uc3VnZ2VzdGVkTWF4UHJpb3JpdHlGZWVQZXJHYXMpIHtcbiAgICAgICAgICAgIGRlZmF1bHRNYXhQcmlvcml0eUZlZVBlckdhcyA9XG4gICAgICAgICAgICAgIGdhc0ZlZUVzdGltYXRlc1tlc3RpbWF0ZVR5cGVdPy5zdWdnZXN0ZWRNYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICAgICAgICAgIGdhc1BhcmFtcy5kZWZhdWx0X21heF9wcmlvcml0eV9mZWVfcGVyX2dhcyA9XG4gICAgICAgICAgICAgIGRlZmF1bHRNYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR4TWV0YS5kZWZhdWx0R2FzRXN0aW1hdGVzLmdhcykge1xuICAgICAgICBnYXNQYXJhbXMuZGVmYXVsdF9nYXMgPSB0eE1ldGEuZGVmYXVsdEdhc0VzdGltYXRlcy5nYXM7XG4gICAgICB9XG4gICAgICBpZiAodHhNZXRhLmRlZmF1bHRHYXNFc3RpbWF0ZXMuZ2FzUHJpY2UpIHtcbiAgICAgICAgZ2FzUGFyYW1zLmRlZmF1bHRfZ2FzX3ByaWNlID0gdHhNZXRhLmRlZmF1bHRHYXNFc3RpbWF0ZXMuZ2FzUHJpY2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVzdGltYXRlU3VnZ2VzdGVkKSB7XG4gICAgICBnYXNQYXJhbXMuZXN0aW1hdGVfc3VnZ2VzdGVkID0gZXN0aW1hdGVTdWdnZXN0ZWQ7XG4gICAgfVxuXG4gICAgaWYgKGVzdGltYXRlVXNlZCkge1xuICAgICAgZ2FzUGFyYW1zLmVzdGltYXRlX3VzZWQgPSBlc3RpbWF0ZVVzZWQ7XG4gICAgfVxuXG4gICAgaWYgKGV4dHJhUGFyYW1zPy5nYXNfdXNlZCkge1xuICAgICAgZ2FzUGFyYW1zLmdhc191c2VkID0gZXh0cmFQYXJhbXMuZ2FzX3VzZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgZ2FzUGFyYW1zSW5Hd2VpID0gdGhpcy5fZ2V0R2FzVmFsdWVzSW5HV0VJKGdhc1BhcmFtcyk7XG5cbiAgICBsZXQgZWlwMTU1OVZlcnNpb24gPSAnMCc7XG4gICAgaWYgKHR4TWV0YS50eFBhcmFtcy5tYXhGZWVQZXJHYXMpIHtcbiAgICAgIGVpcDE1NTlWZXJzaW9uID0gJzInO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbnRyYWN0SW50ZXJhY3Rpb25UeXBlcyA9IFtcbiAgICAgIFRyYW5zYWN0aW9uVHlwZS5jb250cmFjdEludGVyYWN0aW9uLFxuICAgICAgVHJhbnNhY3Rpb25UeXBlLnRva2VuTWV0aG9kQXBwcm92ZSxcbiAgICAgIFRyYW5zYWN0aW9uVHlwZS50b2tlbk1ldGhvZFNhZmVUcmFuc2ZlckZyb20sXG4gICAgICBUcmFuc2FjdGlvblR5cGUudG9rZW5NZXRob2RTZXRBcHByb3ZhbEZvckFsbCxcbiAgICAgIFRyYW5zYWN0aW9uVHlwZS50b2tlbk1ldGhvZFRyYW5zZmVyLFxuICAgICAgVHJhbnNhY3Rpb25UeXBlLnRva2VuTWV0aG9kVHJhbnNmZXJGcm9tLFxuICAgICAgVHJhbnNhY3Rpb25UeXBlLnNtYXJ0LFxuICAgICAgVHJhbnNhY3Rpb25UeXBlLnN3YXAsXG4gICAgICBUcmFuc2FjdGlvblR5cGUuc3dhcEFwcHJvdmFsLFxuICAgIF0uaW5jbHVkZXModHlwZSk7XG5cbiAgICBjb25zdCBjb250cmFjdE1ldGhvZE5hbWVzID0ge1xuICAgICAgQVBQUk9WRTogJ0FwcHJvdmUnLFxuICAgIH07XG5cbiAgICBsZXQgdHJhbnNhY3Rpb25BcHByb3ZhbEFtb3VudFR5cGU7XG4gICAgbGV0IHRyYW5zYWN0aW9uQ29udHJhY3RNZXRob2Q7XG4gICAgbGV0IHRyYW5zYWN0aW9uQXBwcm92YWxBbW91bnRWc1Byb3Bvc2VkUmF0aW87XG4gICAgbGV0IHRyYW5zYWN0aW9uQXBwcm92YWxBbW91bnRWc0JhbGFuY2VSYXRpbztcbiAgICBsZXQgdHJhbnNhY3Rpb25UeXBlID0gVHJhbnNhY3Rpb25UeXBlLnNpbXBsZVNlbmQ7XG4gICAgaWYgKHR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5jYW5jZWwpIHtcbiAgICAgIHRyYW5zYWN0aW9uVHlwZSA9IFRyYW5zYWN0aW9uVHlwZS5jYW5jZWw7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBUcmFuc2FjdGlvblR5cGUucmV0cnkpIHtcbiAgICAgIHRyYW5zYWN0aW9uVHlwZSA9IG9yaWdpbmFsVHlwZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5kZXBsb3lDb250cmFjdCkge1xuICAgICAgdHJhbnNhY3Rpb25UeXBlID0gVHJhbnNhY3Rpb25UeXBlLmRlcGxveUNvbnRyYWN0O1xuICAgIH0gZWxzZSBpZiAoY29udHJhY3RJbnRlcmFjdGlvblR5cGVzKSB7XG4gICAgICB0cmFuc2FjdGlvblR5cGUgPSBUcmFuc2FjdGlvblR5cGUuY29udHJhY3RJbnRlcmFjdGlvbjtcbiAgICAgIHRyYW5zYWN0aW9uQ29udHJhY3RNZXRob2QgPSBjb250cmFjdE1ldGhvZE5hbWU7XG4gICAgICBpZiAoXG4gICAgICAgIHRyYW5zYWN0aW9uQ29udHJhY3RNZXRob2QgPT09IGNvbnRyYWN0TWV0aG9kTmFtZXMuQVBQUk9WRSAmJlxuICAgICAgICB0b2tlblN0YW5kYXJkID09PSBUb2tlblN0YW5kYXJkLkVSQzIwXG4gICAgICApIHtcbiAgICAgICAgaWYgKGRhcHBQcm9wb3NlZFRva2VuQW1vdW50ID09PSAnMCcgfHwgY3VzdG9tVG9rZW5BbW91bnQgPT09ICcwJykge1xuICAgICAgICAgIHRyYW5zYWN0aW9uQXBwcm92YWxBbW91bnRUeXBlID0gVHJhbnNhY3Rpb25BcHByb3ZhbEFtb3VudFR5cGUucmV2b2tlO1xuICAgICAgICB9IGVsc2UgaWYgKGN1c3RvbVRva2VuQW1vdW50KSB7XG4gICAgICAgICAgdHJhbnNhY3Rpb25BcHByb3ZhbEFtb3VudFR5cGUgPSBUcmFuc2FjdGlvbkFwcHJvdmFsQW1vdW50VHlwZS5jdXN0b207XG4gICAgICAgIH0gZWxzZSBpZiAoZGFwcFByb3Bvc2VkVG9rZW5BbW91bnQpIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbkFwcHJvdmFsQW1vdW50VHlwZSA9XG4gICAgICAgICAgICBUcmFuc2FjdGlvbkFwcHJvdmFsQW1vdW50VHlwZS5kYXBwUHJvcG9zZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNhY3Rpb25BcHByb3ZhbEFtb3VudFZzUHJvcG9zZWRSYXRpbyA9XG4gICAgICAgICAgdGhpcy5fYWxsb3dhbmNlQW1vdW50SW5SZWxhdGlvblRvRGFwcFByb3Bvc2VkVmFsdWUoXG4gICAgICAgICAgICB0cmFuc2FjdGlvbkFwcHJvdmFsQW1vdW50VHlwZSxcbiAgICAgICAgICAgIG9yaWdpbmFsQXBwcm92YWxBbW91bnQsXG4gICAgICAgICAgICBmaW5hbEFwcHJvdmFsQW1vdW50LFxuICAgICAgICAgICk7XG4gICAgICAgIHRyYW5zYWN0aW9uQXBwcm92YWxBbW91bnRWc0JhbGFuY2VSYXRpbyA9XG4gICAgICAgICAgdGhpcy5fYWxsb3dhbmNlQW1vdW50SW5SZWxhdGlvblRvVG9rZW5CYWxhbmNlKFxuICAgICAgICAgICAgdHJhbnNhY3Rpb25BcHByb3ZhbEFtb3VudFR5cGUsXG4gICAgICAgICAgICBkYXBwUHJvcG9zZWRUb2tlbkFtb3VudCxcbiAgICAgICAgICAgIGN1cnJlbnRUb2tlbkJhbGFuY2UsXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXBsYWNlZFR4TWV0YSA9IHRoaXMuX2dldFRyYW5zYWN0aW9uKHJlcGxhY2VkQnlJZCk7XG5cbiAgICBjb25zdCBUUkFOU0FDVElPTl9SRVBMQUNFTUVOVF9NRVRIT0RTID0ge1xuICAgICAgUkVUUlk6IFRyYW5zYWN0aW9uVHlwZS5yZXRyeSxcbiAgICAgIENBTkNFTDogVHJhbnNhY3Rpb25UeXBlLmNhbmNlbCxcbiAgICAgIFNBTUVfTk9OQ0U6ICdvdGhlcicsXG4gICAgfTtcblxuICAgIGxldCB0cmFuc2FjdGlvblJlcGxhY2VkO1xuICAgIGlmIChleHRyYVBhcmFtcz8uZHJvcHBlZCkge1xuICAgICAgdHJhbnNhY3Rpb25SZXBsYWNlZCA9IFRSQU5TQUNUSU9OX1JFUExBQ0VNRU5UX01FVEhPRFMuU0FNRV9OT05DRTtcbiAgICAgIGlmIChyZXBsYWNlZFR4TWV0YT8udHlwZSA9PT0gVHJhbnNhY3Rpb25UeXBlLmNhbmNlbCkge1xuICAgICAgICB0cmFuc2FjdGlvblJlcGxhY2VkID0gVFJBTlNBQ1RJT05fUkVQTEFDRU1FTlRfTUVUSE9EUy5DQU5DRUw7XG4gICAgICB9IGVsc2UgaWYgKHJlcGxhY2VkVHhNZXRhPy50eXBlID09PSBUcmFuc2FjdGlvblR5cGUucmV0cnkpIHtcbiAgICAgICAgdHJhbnNhY3Rpb25SZXBsYWNlZCA9IFRSQU5TQUNUSU9OX1JFUExBQ0VNRU5UX01FVEhPRFMuUkVUUlk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHVpQ3VzdG9taXphdGlvbnM7XG5cbiAgICBpZiAoc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlPy5mbGFnQXNEYW5nZXJvdXMgPT09IDEpIHtcbiAgICAgIHVpQ3VzdG9taXphdGlvbnMgPSBbJ2ZsYWdnZWRfYXNfbWFsaWNpb3VzJ107XG4gICAgfSBlbHNlIGlmIChzZWN1cml0eVByb3ZpZGVyUmVzcG9uc2U/LmZsYWdBc0Rhbmdlcm91cyA9PT0gMikge1xuICAgICAgdWlDdXN0b21pemF0aW9ucyA9IFsnZmxhZ2dlZF9hc19zYWZldHlfdW5rbm93biddO1xuICAgIH0gZWxzZSB7XG4gICAgICB1aUN1c3RvbWl6YXRpb25zID0gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgcHJvcGVydGllcyA9IHtcbiAgICAgIGNoYWluX2lkOiBjaGFpbklkLFxuICAgICAgcmVmZXJyZXIsXG4gICAgICBzb3VyY2UsXG4gICAgICBuZXR3b3JrLFxuICAgICAgZWlwXzE1NTlfdmVyc2lvbjogZWlwMTU1OVZlcnNpb24sXG4gICAgICBnYXNfZWRpdF90eXBlOiAnbm9uZScsXG4gICAgICBnYXNfZWRpdF9hdHRlbXB0ZWQ6ICdub25lJyxcbiAgICAgIGFjY291bnRfdHlwZTogYXdhaXQgdGhpcy5nZXRBY2NvdW50VHlwZSh0aGlzLmdldFNlbGVjdGVkQWRkcmVzcygpKSxcbiAgICAgIGRldmljZV9tb2RlbDogYXdhaXQgdGhpcy5nZXREZXZpY2VNb2RlbCh0aGlzLmdldFNlbGVjdGVkQWRkcmVzcygpKSxcbiAgICAgIGFzc2V0X3R5cGU6IGFzc2V0VHlwZSxcbiAgICAgIHRva2VuX3N0YW5kYXJkOiB0b2tlblN0YW5kYXJkLFxuICAgICAgdHJhbnNhY3Rpb25fdHlwZTogdHJhbnNhY3Rpb25UeXBlLFxuICAgICAgdHJhbnNhY3Rpb25fc3BlZWRfdXA6IHR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5yZXRyeSxcbiAgICAgIHVpX2N1c3RvbWl6YXRpb25zOiB1aUN1c3RvbWl6YXRpb25zLFxuICAgIH07XG5cbiAgICBpZiAodHJhbnNhY3Rpb25Db250cmFjdE1ldGhvZCA9PT0gY29udHJhY3RNZXRob2ROYW1lcy5BUFBST1ZFKSB7XG4gICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAuLi5wcm9wZXJ0aWVzLFxuICAgICAgICB0cmFuc2FjdGlvbl9hcHByb3ZhbF9hbW91bnRfdHlwZTogdHJhbnNhY3Rpb25BcHByb3ZhbEFtb3VudFR5cGUsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCBzZW5zaXRpdmVQcm9wZXJ0aWVzID0ge1xuICAgICAgc3RhdHVzLFxuICAgICAgdHJhbnNhY3Rpb25fZW52ZWxvcGVfdHlwZTogaXNFSVAxNTU5VHJhbnNhY3Rpb24odHhNZXRhKVxuICAgICAgICA/IFRSQU5TQUNUSU9OX0VOVkVMT1BFX1RZUEVfTkFNRVMuRkVFX01BUktFVFxuICAgICAgICA6IFRSQU5TQUNUSU9OX0VOVkVMT1BFX1RZUEVfTkFNRVMuTEVHQUNZLFxuICAgICAgZmlyc3Rfc2VlbjogdGltZSxcbiAgICAgIGdhc19saW1pdDogZ2FzTGltaXQsXG4gICAgICB0cmFuc2FjdGlvbl9jb250cmFjdF9tZXRob2Q6IHRyYW5zYWN0aW9uQ29udHJhY3RNZXRob2QsXG4gICAgICB0cmFuc2FjdGlvbl9yZXBsYWNlZDogdHJhbnNhY3Rpb25SZXBsYWNlZCxcbiAgICAgIC4uLmV4dHJhUGFyYW1zLFxuICAgICAgLi4uZ2FzUGFyYW1zSW5Hd2VpLFxuICAgIH07XG5cbiAgICBpZiAodHJhbnNhY3Rpb25Db250cmFjdE1ldGhvZCA9PT0gY29udHJhY3RNZXRob2ROYW1lcy5BUFBST1ZFKSB7XG4gICAgICBzZW5zaXRpdmVQcm9wZXJ0aWVzID0ge1xuICAgICAgICAuLi5zZW5zaXRpdmVQcm9wZXJ0aWVzLFxuICAgICAgICB0cmFuc2FjdGlvbl9hcHByb3ZhbF9hbW91bnRfdnNfYmFsYW5jZV9yYXRpbzpcbiAgICAgICAgICB0cmFuc2FjdGlvbkFwcHJvdmFsQW1vdW50VnNCYWxhbmNlUmF0aW8sXG4gICAgICAgIHRyYW5zYWN0aW9uX2FwcHJvdmFsX2Ftb3VudF92c19wcm9wb3NlZF9yYXRpbzpcbiAgICAgICAgICB0cmFuc2FjdGlvbkFwcHJvdmFsQW1vdW50VnNQcm9wb3NlZFJhdGlvLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBwcm9wZXJ0aWVzLCBzZW5zaXRpdmVQcm9wZXJ0aWVzIH07XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIG1ldGhvZCB0aGF0IGNoZWNrcyBmb3IgdGhlIHByZXNlbmNlIG9mIGFuIGV4aXN0aW5nIGZyYWdtZW50IGJ5IGlkXG4gICAqIGFwcHJvcHJpYXRlIGZvciB0aGUgdHlwZSBvZiBldmVudCB0aGF0IHRyaWdnZXJlZCBmcmFnbWVudCBjcmVhdGlvbi4gSWYgdGhlXG4gICAqIGFwcHJvcHJpYXRlIGZyYWdtZW50IGV4aXN0cywgdGhlbiBub3RoaW5nIGlzIGRvbmUuIElmIGl0IGRvZXMgbm90IGV4aXN0IGFcbiAgICogbmV3IGV2ZW50IGZyYWdtZW50IGlzIGNyZWF0ZWQgd2l0aCB0aGUgYXBwcm9wcmlhdGUgcGF5bG9hZC5cbiAgICpcbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbk1ldGF9IHR4TWV0YSAtIFRyYW5zYWN0aW9uIG1ldGEgb2JqZWN0XG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb25NZXRhTWV0cmljc0V2ZW50fSBldmVudCAtIFRoZSBldmVudCB0eXBlIHRoYXRcbiAgICogIHRyaWdnZXJlZCBmcmFnbWVudCBjcmVhdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcGVydGllcyAtIHByb3BlcnRpZXMgdG8gaW5jbHVkZSBpbiB0aGUgZnJhZ21lbnRcbiAgICogQHBhcmFtIHtvYmplY3R9IFtzZW5zaXRpdmVQcm9wZXJ0aWVzXSAtIHNlbnNpdGl2ZSBwcm9wZXJ0aWVzIHRvIGluY2x1ZGUgaW5cbiAgICogQHBhcmFtIHtvYmplY3R9IFthY3Rpb25JZF0gLSBhY3Rpb25JZCBwYXNzZWQgZnJvbSBVSVxuICAgKiAgdGhlIGZyYWdtZW50XG4gICAqL1xuICBfY3JlYXRlVHJhbnNhY3Rpb25FdmVudEZyYWdtZW50KFxuICAgIHR4TWV0YSxcbiAgICBldmVudCxcbiAgICBwcm9wZXJ0aWVzLFxuICAgIHNlbnNpdGl2ZVByb3BlcnRpZXMsXG4gICAgYWN0aW9uSWQsXG4gICkge1xuICAgIGNvbnN0IGlzU3VibWl0dGVkID0gW1xuICAgICAgVHJhbnNhY3Rpb25NZXRhTWV0cmljc0V2ZW50LmZpbmFsaXplZCxcbiAgICAgIFRyYW5zYWN0aW9uTWV0YU1ldHJpY3NFdmVudC5zdWJtaXR0ZWQsXG4gICAgXS5pbmNsdWRlcyhldmVudCk7XG4gICAgY29uc3QgdW5pcXVlSWRlbnRpZmllciA9IGB0cmFuc2FjdGlvbi0ke1xuICAgICAgaXNTdWJtaXR0ZWQgPyAnc3VibWl0dGVkJyA6ICdhZGRlZCdcbiAgICB9LSR7dHhNZXRhLmlkfWA7XG5cbiAgICBjb25zdCBmcmFnbWVudCA9IHRoaXMuZ2V0RXZlbnRGcmFnbWVudEJ5SWQodW5pcXVlSWRlbnRpZmllcik7XG4gICAgaWYgKHR5cGVvZiBmcmFnbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGV2ZW50KSB7XG4gICAgICAvLyBXaGVuIGEgdHJhbnNhY3Rpb24gaXMgYWRkZWQgdG8gdGhlIGNvbnRyb2xsZXIsIHdlIGtub3cgdGhhdCB0aGUgdXNlclxuICAgICAgLy8gd2lsbCBiZSBwcmVzZW50ZWQgd2l0aCBhIGNvbmZpcm1hdGlvbiBzY3JlZW4uIFRoZSB1c2VyIHdpbGwgdGhlblxuICAgICAgLy8gZWl0aGVyIGNvbmZpcm0gb3IgcmVqZWN0IHRoYXQgdHJhbnNhY3Rpb24uIEVhY2ggaGFzIGFuIGFzc29jaWF0ZWRcbiAgICAgIC8vIGV2ZW50IHdlIHdhbnQgdG8gdHJhY2suIFdoaWxlIHdlIGRvbid0IG5lY2Vzc2FyaWx5IG5lZWQgYW4gZXZlbnRcbiAgICAgIC8vIGZyYWdtZW50IHRvIG1vZGVsIHRoaXMsIGhhdmluZyBvbmUgYWxsb3dzIHVzIHRvIHJlY29yZCBhZGRpdGlvbmFsXG4gICAgICAvLyBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IGZyb20gdGhlIFVJLiBGb3IgZXhhbXBsZSwgd2hlbiB0aGUgdXNlclxuICAgICAgLy8gZWRpdHMgdGhlIHRyYW5zYWN0aW9ucyBnYXMgcGFyYW1zIHdlIGNhbiByZWNvcmQgdGhhdCBwcm9wZXJ0eSBhbmRcbiAgICAgIC8vIHRoZW4gZ2V0IGFuYWx5dGljcyBvbiB0aGUgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucyBpbiB3aGljaCBnYXMgZWRpdHNcbiAgICAgIC8vIG9jY3VyLlxuICAgICAgY2FzZSBUcmFuc2FjdGlvbk1ldGFNZXRyaWNzRXZlbnQuYWRkZWQ6XG4gICAgICAgIHRoaXMuY3JlYXRlRXZlbnRGcmFnbWVudCh7XG4gICAgICAgICAgY2F0ZWdvcnk6IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeS5UcmFuc2FjdGlvbnMsXG4gICAgICAgICAgaW5pdGlhbEV2ZW50OiBUcmFuc2FjdGlvbk1ldGFNZXRyaWNzRXZlbnQuYWRkZWQsXG4gICAgICAgICAgc3VjY2Vzc0V2ZW50OiBUcmFuc2FjdGlvbk1ldGFNZXRyaWNzRXZlbnQuYXBwcm92ZWQsXG4gICAgICAgICAgZmFpbHVyZUV2ZW50OiBUcmFuc2FjdGlvbk1ldGFNZXRyaWNzRXZlbnQucmVqZWN0ZWQsXG4gICAgICAgICAgcHJvcGVydGllcyxcbiAgICAgICAgICBzZW5zaXRpdmVQcm9wZXJ0aWVzLFxuICAgICAgICAgIHBlcnNpc3Q6IHRydWUsXG4gICAgICAgICAgdW5pcXVlSWRlbnRpZmllcixcbiAgICAgICAgICBhY3Rpb25JZCxcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gSWYgZm9yIHNvbWUgcmVhc29uIGFuIGFwcHJvdmFsIG9yIHJlamVjdGlvbiBvY2N1cnMgd2l0aG91dCB0aGUgYWRkZWRcbiAgICAgIC8vIGZyYWdtZW50IGV4aXN0aW5nIGluIG1lbW9yeSwgd2UgY3JlYXRlIHRoZSBhZGRlZCBmcmFnbWVudCBidXQgd2l0aG91dFxuICAgICAgLy8gdGhlIGluaXRpYWxFdmVudCBmaXJpbmcuIFRoaXMgaXMgdG8gcHJldmVudCBwb3NzaWJsZSBkdXBsaWNhdGlvbiBvZlxuICAgICAgLy8gZXZlbnRzLiBBIGdvb2QgZXhhbXBsZSB3aHkgdGhpcyBtaWdodCBvY2N1ciBpcyBpZiB0aGUgdXNlciBoYWRcbiAgICAgIC8vIHVuYXBwcm92ZWQgdHJhbnNhY3Rpb25zIGluIG1lbW9yeSB3aGVuIHVwZGF0aW5nIHRvIHRoZSB2ZXJzaW9uIHRoYXRcbiAgICAgIC8vIGluY2x1ZGVzIHRoaXMgY2hhbmdlLiBBIG1pZ3JhdGlvbiB3b3VsZCBoYXZlIGFsc28gaGVscGVkIGhlcmUgYnV0IHRoaXNcbiAgICAgIC8vIGltcGxlbWVudGF0aW9uIGhhcmRlbnMgYWdhaW5zdCBvdGhlciBwb3NzaWJsZSBidWdzIHdoZXJlIGEgZnJhZ21lbnRcbiAgICAgIC8vIGRvZXMgbm90IGV4aXN0LlxuICAgICAgY2FzZSBUcmFuc2FjdGlvbk1ldGFNZXRyaWNzRXZlbnQuYXBwcm92ZWQ6XG4gICAgICBjYXNlIFRyYW5zYWN0aW9uTWV0YU1ldHJpY3NFdmVudC5yZWplY3RlZDpcbiAgICAgICAgdGhpcy5jcmVhdGVFdmVudEZyYWdtZW50KHtcbiAgICAgICAgICBjYXRlZ29yeTogTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5LlRyYW5zYWN0aW9ucyxcbiAgICAgICAgICBzdWNjZXNzRXZlbnQ6IFRyYW5zYWN0aW9uTWV0YU1ldHJpY3NFdmVudC5hcHByb3ZlZCxcbiAgICAgICAgICBmYWlsdXJlRXZlbnQ6IFRyYW5zYWN0aW9uTWV0YU1ldHJpY3NFdmVudC5yZWplY3RlZCxcbiAgICAgICAgICBwcm9wZXJ0aWVzLFxuICAgICAgICAgIHNlbnNpdGl2ZVByb3BlcnRpZXMsXG4gICAgICAgICAgcGVyc2lzdDogdHJ1ZSxcbiAgICAgICAgICB1bmlxdWVJZGVudGlmaWVyLFxuICAgICAgICAgIGFjdGlvbklkLFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBXaGVuIGEgdHJhbnNhY3Rpb24gaXMgc3VibWl0dGVkIGl0IHdpbGwgYWx3YXlzIHJlc3VsdCBpbiB1cGRhdGluZ1xuICAgICAgLy8gdG8gYSBmaW5hbGl6ZWQgc3RhdGUgKGRyb3BwZWQsIGZhaWxlZCwgY29uZmlybWVkKSAtLSBldmVudHVhbGx5LlxuICAgICAgLy8gSG93ZXZlciBoYXZpbmcgYSBmcmFnbWVudCBzdGFydGVkIGF0IHRoaXMgc3RhZ2UgYWxsb3dzIGF1Z21lbnRpbmdcbiAgICAgIC8vIGFuYWx5dGljcyBkYXRhIHdpdGggdXNlciBpbnRlcmFjdGlvbnMgc3VjaCBhcyBzcGVlZGluZyB1cCBhbmRcbiAgICAgIC8vIGNhbmNlbGluZyB0aGUgdHJhbnNhY3Rpb25zLiBGcm9tIHRoaXMgY29udHJvbGxlcnMgcGVyc3BlY3RpdmUgYSBuZXdcbiAgICAgIC8vIHRyYW5zYWN0aW9uIHdpdGggYSBuZXcgaWQgaXMgZ2VuZXJhdGVkIGZvciBzcGVlZCB1cCBhbmQgY2FuY2VsXG4gICAgICAvLyB0cmFuc2FjdGlvbnMsIGJ1dCBmcm9tIHRoZSBVSSB3ZSBjb3VsZCBhdWdtZW50IHRoZSBwcmV2aW91cyBJRCB3aXRoXG4gICAgICAvLyBzdXBwbGVtZW50YWwgZGF0YSB0byBzaG93IHVzZXIgaW50ZW50LiBTdWNoIGFzIHdoZW4gdGhleSBvcGVuIHRoZVxuICAgICAgLy8gY2FuY2VsIFVJIGJ1dCBkb24ndCBzdWJtaXQuIFdlIGNhbiByZWNvcmQgdGhhdCB0aGlzIGhhcHBlbmVkIGFuZCBhZGRcbiAgICAgIC8vIHByb3BlcnRpZXMgdG8gdGhlIHRyYW5zYWN0aW9uIGV2ZW50LlxuICAgICAgY2FzZSBUcmFuc2FjdGlvbk1ldGFNZXRyaWNzRXZlbnQuc3VibWl0dGVkOlxuICAgICAgICB0aGlzLmNyZWF0ZUV2ZW50RnJhZ21lbnQoe1xuICAgICAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuVHJhbnNhY3Rpb25zLFxuICAgICAgICAgIGluaXRpYWxFdmVudDogVHJhbnNhY3Rpb25NZXRhTWV0cmljc0V2ZW50LnN1Ym1pdHRlZCxcbiAgICAgICAgICBzdWNjZXNzRXZlbnQ6IFRyYW5zYWN0aW9uTWV0YU1ldHJpY3NFdmVudC5maW5hbGl6ZWQsXG4gICAgICAgICAgcHJvcGVydGllcyxcbiAgICAgICAgICBzZW5zaXRpdmVQcm9wZXJ0aWVzLFxuICAgICAgICAgIHBlcnNpc3Q6IHRydWUsXG4gICAgICAgICAgdW5pcXVlSWRlbnRpZmllcixcbiAgICAgICAgICBhY3Rpb25JZCxcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gSWYgZm9yIHNvbWUgcmVhc29uIGEgdHJhbnNhY3Rpb24gaXMgZmluYWxpemVkIHdpdGhvdXQgdGhlIHN1Ym1pdHRlZFxuICAgICAgLy8gZnJhZ21lbnQgZXhpc3RpbmcgaW4gbWVtb3J5LCB3ZSBjcmVhdGUgdGhlIHN1Ym1pdHRlZCBmcmFnbWVudCBidXRcbiAgICAgIC8vIHdpdGhvdXQgdGhlIGluaXRpYWxFdmVudCBmaXJpbmcuIFRoaXMgaXMgdG8gcHJldmVudCBwb3NzaWJsZVxuICAgICAgLy8gZHVwbGljYXRpb24gb2YgZXZlbnRzLiBBIGdvb2QgZXhhbXBsZSB3aHkgdGhpcyBtaWdodCBvY2N1ciBpcyBpZiB0aFxuICAgICAgLy8gdXNlciBoYWQgcGVuZGluZyB0cmFuc2FjdGlvbnMgaW4gbWVtb3J5IHdoZW4gdXBkYXRpbmcgdG8gdGhlIHZlcnNpb25cbiAgICAgIC8vIHRoYXQgaW5jbHVkZXMgdGhpcyBjaGFuZ2UuIEEgbWlncmF0aW9uIHdvdWxkIGhhdmUgYWxzbyBoZWxwZWQgaGVyZSBidXRcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaGFyZGVucyBhZ2FpbnN0IG90aGVyIHBvc3NpYmxlIGJ1Z3Mgd2hlcmUgYVxuICAgICAgLy8gZnJhZ21lbnQgZG9lcyBub3QgZXhpc3QuXG4gICAgICBjYXNlIFRyYW5zYWN0aW9uTWV0YU1ldHJpY3NFdmVudC5maW5hbGl6ZWQ6XG4gICAgICAgIHRoaXMuY3JlYXRlRXZlbnRGcmFnbWVudCh7XG4gICAgICAgICAgY2F0ZWdvcnk6IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeS5UcmFuc2FjdGlvbnMsXG4gICAgICAgICAgc3VjY2Vzc0V2ZW50OiBUcmFuc2FjdGlvbk1ldGFNZXRyaWNzRXZlbnQuZmluYWxpemVkLFxuICAgICAgICAgIHByb3BlcnRpZXMsXG4gICAgICAgICAgc2Vuc2l0aXZlUHJvcGVydGllcyxcbiAgICAgICAgICBwZXJzaXN0OiB0cnVlLFxuICAgICAgICAgIHVuaXF1ZUlkZW50aWZpZXIsXG4gICAgICAgICAgYWN0aW9uSWQsXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFeHRyYWN0cyByZWxldmFudCBwcm9wZXJ0aWVzIGZyb20gYSB0cmFuc2FjdGlvbiBtZXRhXG4gICAqIG9iamVjdCBhbmQgdXNlcyB0aGVtIHRvIGNyZWF0ZSBhbmQgc2VuZCBtZXRyaWNzIGZvciB2YXJpb3VzIHRyYW5zYWN0aW9uXG4gICAqIGV2ZW50cy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHR4TWV0YSAtIHRoZSB0eE1ldGEgb2JqZWN0XG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb25NZXRhTWV0cmljc0V2ZW50fSBldmVudCAtIHRoZSBuYW1lIG9mIHRoZSB0cmFuc2FjdGlvbiBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWN0aW9uSWQgLSBhY3Rpb25JZCBwYXNzZWQgZnJvbSBVSVxuICAgKiBAcGFyYW0ge29iamVjdH0gZXh0cmFQYXJhbXMgLSBvcHRpb25hbCBwcm9wcyBhbmQgdmFsdWVzIHRvIGluY2x1ZGUgaW4gc2Vuc2l0aXZlUHJvcGVydGllc1xuICAgKi9cbiAgYXN5bmMgX3RyYWNrVHJhbnNhY3Rpb25NZXRyaWNzRXZlbnQoXG4gICAgdHhNZXRhLFxuICAgIGV2ZW50LFxuICAgIGFjdGlvbklkLFxuICAgIGV4dHJhUGFyYW1zID0ge30sXG4gICkge1xuICAgIGlmICghdHhNZXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHsgcHJvcGVydGllcywgc2Vuc2l0aXZlUHJvcGVydGllcyB9ID1cbiAgICAgIGF3YWl0IHRoaXMuX2J1aWxkRXZlbnRGcmFnbWVudFByb3BlcnRpZXModHhNZXRhLCBleHRyYVBhcmFtcyk7XG5cbiAgICAvLyBDcmVhdGUgZXZlbnQgZnJhZ21lbnRzIGZvciBldmVudCB0eXBlcyB0aGF0IHNwYXduIGZyYWdtZW50cywgYW5kIGVuc3VyZVxuICAgIC8vIGV4aXN0ZW5jZSBvZiBmcmFnbWVudHMgZm9yIGV2ZW50IHR5cGVzIHRoYXQgYWN0IHVwb24gdGhlbS5cbiAgICB0aGlzLl9jcmVhdGVUcmFuc2FjdGlvbkV2ZW50RnJhZ21lbnQoXG4gICAgICB0eE1ldGEsXG4gICAgICBldmVudCxcbiAgICAgIHByb3BlcnRpZXMsXG4gICAgICBzZW5zaXRpdmVQcm9wZXJ0aWVzLFxuICAgICAgYWN0aW9uSWQsXG4gICAgKTtcblxuICAgIGxldCBpZDtcblxuICAgIHN3aXRjaCAoZXZlbnQpIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIGFwcHJvdmVzIGEgdHJhbnNhY3Rpb24sIGZpbmFsaXplIHRoZSB0cmFuc2FjdGlvbiBhZGRlZFxuICAgICAgLy8gZXZlbnQgZnJhZ21lbnQuXG4gICAgICBjYXNlIFRyYW5zYWN0aW9uTWV0YU1ldHJpY3NFdmVudC5hcHByb3ZlZDpcbiAgICAgICAgaWQgPSBgdHJhbnNhY3Rpb24tYWRkZWQtJHt0eE1ldGEuaWR9YDtcbiAgICAgICAgdGhpcy51cGRhdGVFdmVudEZyYWdtZW50KGlkLCB7IHByb3BlcnRpZXMsIHNlbnNpdGl2ZVByb3BlcnRpZXMgfSk7XG4gICAgICAgIHRoaXMuZmluYWxpemVFdmVudEZyYWdtZW50KGlkKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBJZiB0aGUgdXNlciByZWplY3RzIGEgdHJhbnNhY3Rpb24sIGZpbmFsaXplIHRoZSB0cmFuc2FjdGlvbiBhZGRlZFxuICAgICAgLy8gZXZlbnQgZnJhZ21lbnQuIHdpdGggdGhlIGFiYW5kb25lZCBmbGFnIHNldC5cbiAgICAgIGNhc2UgVHJhbnNhY3Rpb25NZXRhTWV0cmljc0V2ZW50LnJlamVjdGVkOlxuICAgICAgICBpZCA9IGB0cmFuc2FjdGlvbi1hZGRlZC0ke3R4TWV0YS5pZH1gO1xuICAgICAgICB0aGlzLnVwZGF0ZUV2ZW50RnJhZ21lbnQoaWQsIHsgcHJvcGVydGllcywgc2Vuc2l0aXZlUHJvcGVydGllcyB9KTtcbiAgICAgICAgdGhpcy5maW5hbGl6ZUV2ZW50RnJhZ21lbnQoaWQsIHtcbiAgICAgICAgICBhYmFuZG9uZWQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIFdoZW4gYSB0cmFuc2FjdGlvbiBpcyBmaW5hbGl6ZWQsIGFsc28gZmluYWxpemUgdGhlIHRyYW5zYWN0aW9uXG4gICAgICAvLyBzdWJtaXR0ZWQgZXZlbnQgZnJhZ21lbnQuXG4gICAgICBjYXNlIFRyYW5zYWN0aW9uTWV0YU1ldHJpY3NFdmVudC5maW5hbGl6ZWQ6XG4gICAgICAgIGlkID0gYHRyYW5zYWN0aW9uLXN1Ym1pdHRlZC0ke3R4TWV0YS5pZH1gO1xuICAgICAgICB0aGlzLnVwZGF0ZUV2ZW50RnJhZ21lbnQoaWQsIHsgcHJvcGVydGllcywgc2Vuc2l0aXZlUHJvcGVydGllcyB9KTtcbiAgICAgICAgdGhpcy5maW5hbGl6ZUV2ZW50RnJhZ21lbnQoYHRyYW5zYWN0aW9uLXN1Ym1pdHRlZC0ke3R4TWV0YS5pZH1gKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBfZ2V0VHJhbnNhY3Rpb25Db21wbGV0aW9uVGltZShzdWJtaXR0ZWRUaW1lKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoKERhdGUubm93KCkgLSBzdWJtaXR0ZWRUaW1lKSAvIDEwMDApLnRvU3RyaW5nKCk7XG4gIH1cblxuICBfZ2V0R2FzVmFsdWVzSW5HV0VJKGdhc1BhcmFtcykge1xuICAgIGNvbnN0IGdhc1ZhbHVlc0luR3dlaSA9IHt9O1xuICAgIGZvciAoY29uc3QgcGFyYW0gaW4gZ2FzUGFyYW1zKSB7XG4gICAgICBpZiAoaXNIZXhTdHJpbmcoZ2FzUGFyYW1zW3BhcmFtXSkpIHtcbiAgICAgICAgZ2FzVmFsdWVzSW5Hd2VpW3BhcmFtXSA9IGhleFdFSVRvRGVjR1dFSShnYXNQYXJhbXNbcGFyYW1dKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdhc1ZhbHVlc0luR3dlaVtwYXJhbV0gPSBnYXNQYXJhbXNbcGFyYW1dO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ2FzVmFsdWVzSW5Hd2VpO1xuICB9XG5cbiAgX2ZhaWxUcmFuc2FjdGlvbih0eElkLCBlcnJvciwgYWN0aW9uSWQpIHtcbiAgICB0aGlzLnR4U3RhdGVNYW5hZ2VyLnNldFR4U3RhdHVzRmFpbGVkKHR4SWQsIGVycm9yKTtcbiAgICBjb25zdCB0eE1ldGEgPSB0aGlzLnR4U3RhdGVNYW5hZ2VyLmdldFRyYW5zYWN0aW9uKHR4SWQpO1xuICAgIHRoaXMuX3RyYWNrVHJhbnNhY3Rpb25NZXRyaWNzRXZlbnQoXG4gICAgICB0eE1ldGEsXG4gICAgICBUcmFuc2FjdGlvbk1ldGFNZXRyaWNzRXZlbnQuZmluYWxpemVkLFxuICAgICAgYWN0aW9uSWQsXG4gICAgICB7XG4gICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgX2Ryb3BUcmFuc2FjdGlvbih0eElkKSB7XG4gICAgdGhpcy50eFN0YXRlTWFuYWdlci5zZXRUeFN0YXR1c0Ryb3BwZWQodHhJZCk7XG4gICAgY29uc3QgdHhNZXRhID0gdGhpcy50eFN0YXRlTWFuYWdlci5nZXRUcmFuc2FjdGlvbih0eElkKTtcbiAgICB0aGlzLl90cmFja1RyYW5zYWN0aW9uTWV0cmljc0V2ZW50KFxuICAgICAgdHhNZXRhLFxuICAgICAgVHJhbnNhY3Rpb25NZXRhTWV0cmljc0V2ZW50LmZpbmFsaXplZCxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHtcbiAgICAgICAgZHJvcHBlZDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIF9yZXF1ZXN0QXBwcm92YWwoXG4gICAgdHhNZXRhLFxuICAgIHsgc2hvdWxkU2hvd1JlcXVlc3QgfSA9IHsgc2hvdWxkU2hvd1JlcXVlc3Q6IHRydWUgfSxcbiAgKSB7XG4gICAgY29uc3QgaWQgPSB0aGlzLl9nZXRBcHByb3ZhbElkKHR4TWV0YSk7XG4gICAgY29uc3QgeyBvcmlnaW4gfSA9IHR4TWV0YTtcbiAgICBjb25zdCB0eXBlID0gQXBwcm92YWxUeXBlLlRyYW5zYWN0aW9uO1xuICAgIGNvbnN0IHJlcXVlc3REYXRhID0geyB0eElkOiB0eE1ldGEuaWQgfTtcblxuICAgIHJldHVybiB0aGlzLm1lc3NhZ2luZ1N5c3RlbVxuICAgICAgLmNhbGwoXG4gICAgICAgICdBcHByb3ZhbENvbnRyb2xsZXI6YWRkUmVxdWVzdCcsXG4gICAgICAgIHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBvcmlnaW4sXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICByZXF1ZXN0RGF0YSxcbiAgICAgICAgfSxcbiAgICAgICAgc2hvdWxkU2hvd1JlcXVlc3QsXG4gICAgICApXG4gICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAvLyBJbnRlbnRpb25hbGx5IGlnbm9yZWQgYXMgcHJvbWlzZSBub3QgY3VycmVudGx5IHVzZWRcbiAgICAgIH0pO1xuICB9XG5cbiAgX2FjY2VwdEFwcHJvdmFsKHR4TWV0YSkge1xuICAgIGNvbnN0IGlkID0gdGhpcy5fZ2V0QXBwcm92YWxJZCh0eE1ldGEpO1xuXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubWVzc2FnaW5nU3lzdGVtLmNhbGwoJ0FwcHJvdmFsQ29udHJvbGxlcjphY2NlcHRSZXF1ZXN0JywgaWQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2cuZXJyb3IoJ0ZhaWxlZCB0byBhY2NlcHQgdHJhbnNhY3Rpb24gYXBwcm92YWwgcmVxdWVzdCcsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICBfcmVqZWN0QXBwcm92YWwodHhNZXRhKSB7XG4gICAgY29uc3QgaWQgPSB0aGlzLl9nZXRBcHByb3ZhbElkKHR4TWV0YSk7XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5tZXNzYWdpbmdTeXN0ZW0uY2FsbChcbiAgICAgICAgJ0FwcHJvdmFsQ29udHJvbGxlcjpyZWplY3RSZXF1ZXN0JyxcbiAgICAgICAgaWQsXG4gICAgICAgIG5ldyBFcnJvcignUmVqZWN0ZWQnKSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZy5lcnJvcignRmFpbGVkIHRvIHJlamVjdCB0cmFuc2FjdGlvbiBhcHByb3ZhbCByZXF1ZXN0JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRBcHByb3ZhbElkKHR4TWV0YSkge1xuICAgIHJldHVybiBTdHJpbmcodHhNZXRhLmlkKTtcbiAgfVxufVxuIiwiaW1wb3J0IGpzb25EaWZmZXIgZnJvbSAnZmFzdC1qc29uLXBhdGNoJztcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJ2xvZGFzaCc7XG5cbi8qKlxuICogY29udmVydHMgbm9uLWluaXRpYWwgaGlzdG9yeSBlbnRyaWVzIGludG8gZGlmZnNcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBsb25nSGlzdG9yeVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWlncmF0ZUZyb21TbmFwc2hvdHNUb0RpZmZzKGxvbmdIaXN0b3J5KSB7XG4gIHJldHVybiAoXG4gICAgbG9uZ0hpc3RvcnlcbiAgICAgIC8vIGNvbnZlcnQgbm9uLWluaXRpYWwgaGlzdG9yeSBlbnRyaWVzIGludG8gZGlmZnNcbiAgICAgIC5tYXAoKGVudHJ5LCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlSGlzdG9yeUVudHJ5KGxvbmdIaXN0b3J5W2luZGV4IC0gMV0sIGVudHJ5KTtcbiAgICAgIH0pXG4gICk7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGFuIGFycmF5IG9mIGhpc3Rvcnkgb2JqZWN0cyBzZW5zZSB0aGUgcHJldmlvdXMgc3RhdGUuXG4gKiBUaGUgb2JqZWN0IGhhcyB0aGUga2V5c1xuICogb3AgKHRoZSBvcGVyYXRpb24gcGVyZm9ybWVkKSxcbiAqIHBhdGggKHRoZSBrZXkgYW5kIGlmIGEgbmVzdGVkIG9iamVjdCB0aGVuIGVhY2gga2V5IHdpbGwgYmUgc2VwYXJhdGVkIHdpdGggYSBgL2ApXG4gKiB2YWx1ZVxuICogd2l0aCB0aGUgZmlyc3QgZW50cnkgaGF2aW5nIHRoZSBub3RlIGFuZCBhIHRpbWVzdGFtcCB3aGVuIHRoZSBjaGFuZ2UgdG9vayBwbGFjZVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2aW91c1N0YXRlIC0gdGhlIHByZXZpb3VzIHN0YXRlIG9mIHRoZSBvYmplY3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXdTdGF0ZSAtIHRoZSB1cGRhdGUgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gW25vdGVdIC0gYSBvcHRpb25hbCBub3RlIGZvciB0aGUgc3RhdGUgY2hhbmdlXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUhpc3RvcnlFbnRyeShwcmV2aW91c1N0YXRlLCBuZXdTdGF0ZSwgbm90ZSkge1xuICBjb25zdCBlbnRyeSA9IGpzb25EaWZmZXIuY29tcGFyZShwcmV2aW91c1N0YXRlLCBuZXdTdGF0ZSk7XG4gIC8vIEFkZCBhIG5vdGUgdG8gdGhlIGZpcnN0IG9wLCBzaW5jZSBpdCBicmVha3MgaWYgd2UgYXBwZW5kIGl0IHRvIHRoZSBlbnRyeVxuICBpZiAoZW50cnlbMF0pIHtcbiAgICBpZiAobm90ZSkge1xuICAgICAgZW50cnlbMF0ubm90ZSA9IG5vdGU7XG4gICAgfVxuICAgIGVudHJ5WzBdLnRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gIH1cbiAgcmV0dXJuIGVudHJ5O1xufVxuXG4vKipcbiAqIFJlY292ZXJzIHByZXZpb3VzIHR4TWV0YSBzdGF0ZSBvYmpcbiAqXG4gKiBAcGFyYW0gX3Nob3J0SGlzdG9yeVxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxheUhpc3RvcnkoX3Nob3J0SGlzdG9yeSkge1xuICBjb25zdCBzaG9ydEhpc3RvcnkgPSBjbG9uZURlZXAoX3Nob3J0SGlzdG9yeSk7XG4gIHJldHVybiBzaG9ydEhpc3RvcnkucmVkdWNlKFxuICAgICh2YWwsIGVudHJ5KSA9PiBqc29uRGlmZmVyLmFwcGx5UGF0Y2godmFsLCBlbnRyeSkubmV3RG9jdW1lbnQsXG4gICk7XG59XG5cbi8qKlxuICogU25hcHNob3Qge0Bjb2RlIHR4TWV0YX1cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gdHhNZXRhIC0gdGhlIHR4IG1ldGFkYXRhIG9iamVjdFxuICogQHJldHVybnMge29iamVjdH0gYSBkZWVwIGNsb25lIHdpdGhvdXQgaGlzdG9yeVxuICovXG5leHBvcnQgZnVuY3Rpb24gc25hcHNob3RGcm9tVHhNZXRhKHR4TWV0YSkge1xuICBjb25zdCBzaGFsbG93ID0geyAuLi50eE1ldGEgfTtcbiAgZGVsZXRlIHNoYWxsb3cuaGlzdG9yeTtcbiAgcmV0dXJuIGNsb25lRGVlcChzaGFsbG93KTtcbn1cbiIsImltcG9ydCB7IGV0aEVycm9ycyB9IGZyb20gJ2V0aC1ycGMtZXJyb3JzJztcbmltcG9ydCB7IEludGVyZmFjZSB9IGZyb20gJ0BldGhlcnNwcm9qZWN0L2FiaSc7XG5pbXBvcnQgYWJpIGZyb20gJ2h1bWFuLXN0YW5kYXJkLXRva2VuLWFiaSc7XG5pbXBvcnQgeyBhZGRIZXhQcmVmaXggfSBmcm9tICcuLi8uLi8uLi9saWIvdXRpbCc7XG5pbXBvcnQge1xuICBUcmFuc2FjdGlvbkVudmVsb3BlVHlwZSxcbiAgVHJhbnNhY3Rpb25TdGF0dXMsXG59IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgaXNFSVAxNTU5VHJhbnNhY3Rpb24gfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy90cmFuc2FjdGlvbi51dGlscyc7XG5pbXBvcnQgeyBpc1ZhbGlkSGV4QWRkcmVzcyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL2hleHN0cmluZy11dGlscyc7XG5cbmNvbnN0IG5vcm1hbGl6ZXJzID0ge1xuICBmcm9tOiBhZGRIZXhQcmVmaXgsXG4gIHRvOiAodG8sIGxvd2VyQ2FzZSkgPT5cbiAgICBsb3dlckNhc2UgPyBhZGRIZXhQcmVmaXgodG8pLnRvTG93ZXJDYXNlKCkgOiBhZGRIZXhQcmVmaXgodG8pLFxuICBub25jZTogYWRkSGV4UHJlZml4LFxuICB2YWx1ZTogYWRkSGV4UHJlZml4LFxuICBkYXRhOiBhZGRIZXhQcmVmaXgsXG4gIGdhczogYWRkSGV4UHJlZml4LFxuICBnYXNQcmljZTogYWRkSGV4UHJlZml4LFxuICBtYXhGZWVQZXJHYXM6IGFkZEhleFByZWZpeCxcbiAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IGFkZEhleFByZWZpeCxcbiAgdHlwZTogYWRkSGV4UHJlZml4LFxuICBlc3RpbWF0ZVN1Z2dlc3RlZDogKGVzdGltYXRlKSA9PiBlc3RpbWF0ZSxcbiAgZXN0aW1hdGVVc2VkOiAoZXN0aW1hdGUpID0+IGVzdGltYXRlLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUFuZFZhbGlkYXRlVHhQYXJhbXModHhQYXJhbXMsIGxvd2VyQ2FzZSA9IHRydWUpIHtcbiAgY29uc3Qgbm9ybWFsaXplZFR4UGFyYW1zID0gbm9ybWFsaXplVHhQYXJhbXModHhQYXJhbXMsIGxvd2VyQ2FzZSk7XG4gIHZhbGlkYXRlVHhQYXJhbXMobm9ybWFsaXplZFR4UGFyYW1zKTtcbiAgcmV0dXJuIG5vcm1hbGl6ZWRUeFBhcmFtcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemVzIHRoZSBnaXZlbiB0eFBhcmFtc1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0eFBhcmFtcyAtIFRoZSB0cmFuc2FjdGlvbiBwYXJhbXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2xvd2VyQ2FzZV0gLSBXaGV0aGVyIHRvIGxvd2VyY2FzZSB0aGUgJ3RvJyBhZGRyZXNzLlxuICogRGVmYXVsdDogdHJ1ZVxuICogQHJldHVybnMge29iamVjdH0gdGhlIG5vcm1hbGl6ZWQgdHggcGFyYW1zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVUeFBhcmFtcyh0eFBhcmFtcywgbG93ZXJDYXNlID0gdHJ1ZSkge1xuICAvLyBhcHBseSBvbmx5IGtleXMgaW4gdGhlIG5vcm1hbGl6ZXJzXG4gIGNvbnN0IG5vcm1hbGl6ZWRUeFBhcmFtcyA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBub3JtYWxpemVycykge1xuICAgIGlmICh0eFBhcmFtc1trZXldKSB7XG4gICAgICBub3JtYWxpemVkVHhQYXJhbXNba2V5XSA9IG5vcm1hbGl6ZXJzW2tleV0odHhQYXJhbXNba2V5XSwgbG93ZXJDYXNlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWRUeFBhcmFtcztcbn1cblxuLyoqXG4gKiBHaXZlbiB0d28gZmllbGRzLCBlbnN1cmUgdGhhdCB0aGUgc2Vjb25kIGZpZWxkIGlzIG5vdCBpbmNsdWRlZCBpbiB0eFBhcmFtcyxcbiAqIGFuZCBpZiBpdCBpcyB0aHJvdyBhbiBpbnZhbGlkUGFyYW1zIGVycm9yLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0eFBhcmFtcyAtIHRoZSB0cmFuc2FjdGlvbiBwYXJhbWV0ZXJzIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkQmVpbmdWYWxpZGF0ZWQgLSB0aGUgY3VycmVudCBmaWVsZCBiZWluZyB2YWxpZGF0ZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBtdXR1YWxseUV4Y2x1c2l2ZUZpZWxkIC0gdGhlIGZpZWxkIHRvIGVuc3VyZSBpcyBub3QgcHJvdmlkZWRcbiAqIEB0aHJvd3Mge2V0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtc30gVGhyb3dzIGlmIG11dHVhbGx5RXhjbHVzaXZlRmllbGQgaXNcbiAqICBwcmVzZW50IGluIHR4UGFyYW1zLlxuICovXG5mdW5jdGlvbiBlbnN1cmVNdXR1YWxseUV4Y2x1c2l2ZUZpZWxkc05vdFByb3ZpZGVkKFxuICB0eFBhcmFtcyxcbiAgZmllbGRCZWluZ1ZhbGlkYXRlZCxcbiAgbXV0dWFsbHlFeGNsdXNpdmVGaWVsZCxcbikge1xuICBpZiAodHlwZW9mIHR4UGFyYW1zW211dHVhbGx5RXhjbHVzaXZlRmllbGRdICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcyhcbiAgICAgIGBJbnZhbGlkIHRyYW5zYWN0aW9uIHBhcmFtczogc3BlY2lmaWVkICR7ZmllbGRCZWluZ1ZhbGlkYXRlZH0gYnV0IGFsc28gaW5jbHVkZWQgJHttdXR1YWxseUV4Y2x1c2l2ZUZpZWxkfSwgdGhlc2UgY2Fubm90IGJlIG1peGVkYCxcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRW5zdXJlcyB0aGF0IHRoZSBwcm92aWRlZCB2YWx1ZSBmb3IgZmllbGQgaXMgYSBzdHJpbmcsIHRocm93cyBhblxuICogaW52YWxpZFBhcmFtcyBlcnJvciBpZiBmaWVsZCBpcyBub3QgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHR4UGFyYW1zIC0gdGhlIHRyYW5zYWN0aW9uIHBhcmFtZXRlcnMgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgLSB0aGUgY3VycmVudCBmaWVsZCBiZWluZyB2YWxpZGF0ZWRcbiAqIEB0aHJvd3Mge2V0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtc30gVGhyb3dzIGlmIGZpZWxkIGlzIG5vdCBhIHN0cmluZ1xuICovXG5mdW5jdGlvbiBlbnN1cmVGaWVsZElzU3RyaW5nKHR4UGFyYW1zLCBmaWVsZCkge1xuICBpZiAodHlwZW9mIHR4UGFyYW1zW2ZpZWxkXSAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBldGhFcnJvcnMucnBjLmludmFsaWRQYXJhbXMoXG4gICAgICBgSW52YWxpZCB0cmFuc2FjdGlvbiBwYXJhbXM6ICR7ZmllbGR9IGlzIG5vdCBhIHN0cmluZy4gZ290OiAoJHt0eFBhcmFtc1tmaWVsZF19KWAsXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuc3VyZXMgdGhhdCB0aGUgcHJvdmlkZWQgdHhQYXJhbXMgaGFzIHRoZSBwcm9wZXIgJ3R5cGUnIHNwZWNpZmllZCBmb3IgdGhlXG4gKiBnaXZlbiBmaWVsZCwgaWYgaXQgaXMgcHJvdmlkZWQuIElmIHR5cGVzIGRvIG5vdCBtYXRjaCB0aHJvd3MgYW5cbiAqIGludmFsaWRQYXJhbXMgZXJyb3IuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHR4UGFyYW1zIC0gdGhlIHRyYW5zYWN0aW9uIHBhcmFtZXRlcnMgb2JqZWN0XG4gKiBAcGFyYW0geydnYXNQcmljZScgfCAnbWF4RmVlUGVyR2FzJyB8ICdtYXhQcmlvcml0eUZlZVBlckdhcyd9IGZpZWxkIC0gdGhlXG4gKiAgY3VycmVudCBmaWVsZCBiZWluZyB2YWxpZGF0ZWRcbiAqIEB0aHJvd3Mge2V0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtc30gVGhyb3dzIGlmIHR5cGUgZG9lcyBub3QgbWF0Y2ggdGhlXG4gKiAgZXhwZWN0YXRpb25zIGZvciBwcm92aWRlZCBmaWVsZC5cbiAqL1xuZnVuY3Rpb24gZW5zdXJlUHJvcGVyVHJhbnNhY3Rpb25FbnZlbG9wZVR5cGVQcm92aWRlZCh0eFBhcmFtcywgZmllbGQpIHtcbiAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgJ21heEZlZVBlckdhcyc6XG4gICAgY2FzZSAnbWF4UHJpb3JpdHlGZWVQZXJHYXMnOlxuICAgICAgaWYgKFxuICAgICAgICB0eFBhcmFtcy50eXBlICYmXG4gICAgICAgIHR4UGFyYW1zLnR5cGUgIT09IFRyYW5zYWN0aW9uRW52ZWxvcGVUeXBlLmZlZU1hcmtldFxuICAgICAgKSB7XG4gICAgICAgIHRocm93IGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcyhcbiAgICAgICAgICBgSW52YWxpZCB0cmFuc2FjdGlvbiBlbnZlbG9wZSB0eXBlOiBzcGVjaWZpZWQgdHlwZSBcIiR7dHhQYXJhbXMudHlwZX1cIiBidXQgaW5jbHVkaW5nIG1heEZlZVBlckdhcyBhbmQgbWF4UHJpb3JpdHlGZWVQZXJHYXMgcmVxdWlyZXMgdHlwZTogXCIke1RyYW5zYWN0aW9uRW52ZWxvcGVUeXBlLmZlZU1hcmtldH1cImAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdnYXNQcmljZSc6XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChcbiAgICAgICAgdHhQYXJhbXMudHlwZSAmJlxuICAgICAgICB0eFBhcmFtcy50eXBlID09PSBUcmFuc2FjdGlvbkVudmVsb3BlVHlwZS5mZWVNYXJrZXRcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBldGhFcnJvcnMucnBjLmludmFsaWRQYXJhbXMoXG4gICAgICAgICAgYEludmFsaWQgdHJhbnNhY3Rpb24gZW52ZWxvcGUgdHlwZTogc3BlY2lmaWVkIHR5cGUgXCIke3R4UGFyYW1zLnR5cGV9XCIgYnV0IGluY2x1ZGVkIGEgZ2FzUHJpY2UgaW5zdGVhZCBvZiBtYXhGZWVQZXJHYXMgYW5kIG1heFByaW9yaXR5RmVlUGVyR2FzYCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgZ2l2ZW4gdHggcGFyYW1ldGVyc1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0eFBhcmFtcyAtIHRoZSB0eCBwYXJhbXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZWlwMTU1OUNvbXBhdGliaWxpdHkgLSB3aGV0aGVyIG9yIG5vdCB0aGUgY3VycmVudCBuZXR3b3JrIHN1cHBvcnRzIEVJUC0xNTU5IHRyYW5zYWN0aW9uc1xuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSB0eCBwYXJhbXMgY29udGFpbnMgaW52YWxpZCBmaWVsZHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlVHhQYXJhbXModHhQYXJhbXMsIGVpcDE1NTlDb21wYXRpYmlsaXR5ID0gdHJ1ZSkge1xuICBpZiAoIXR4UGFyYW1zIHx8IHR5cGVvZiB0eFBhcmFtcyAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheSh0eFBhcmFtcykpIHtcbiAgICB0aHJvdyBldGhFcnJvcnMucnBjLmludmFsaWRQYXJhbXMoXG4gICAgICAnSW52YWxpZCB0cmFuc2FjdGlvbiBwYXJhbXM6IG11c3QgYmUgYW4gb2JqZWN0LicsXG4gICAgKTtcbiAgfVxuICBpZiAoIXR4UGFyYW1zLnRvICYmICF0eFBhcmFtcy5kYXRhKSB7XG4gICAgdGhyb3cgZXRoRXJyb3JzLnJwYy5pbnZhbGlkUGFyYW1zKFxuICAgICAgJ0ludmFsaWQgdHJhbnNhY3Rpb24gcGFyYW1zOiBtdXN0IHNwZWNpZnkgXCJkYXRhXCIgZm9yIGNvbnRyYWN0IGRlcGxveW1lbnRzLCBvciBcInRvXCIgKGFuZCBvcHRpb25hbGx5IFwiZGF0YVwiKSBmb3IgYWxsIG90aGVyIHR5cGVzIG9mIHRyYW5zYWN0aW9ucy4nLFxuICAgICk7XG4gIH1cbiAgaWYgKGlzRUlQMTU1OVRyYW5zYWN0aW9uKHsgdHhQYXJhbXMgfSkgJiYgIWVpcDE1NTlDb21wYXRpYmlsaXR5KSB7XG4gICAgdGhyb3cgZXRoRXJyb3JzLnJwYy5pbnZhbGlkUGFyYW1zKFxuICAgICAgJ0ludmFsaWQgdHJhbnNhY3Rpb24gcGFyYW1zOiBwYXJhbXMgc3BlY2lmeSBhbiBFSVAtMTU1OSB0cmFuc2FjdGlvbiBidXQgdGhlIGN1cnJlbnQgbmV0d29yayBkb2VzIG5vdCBzdXBwb3J0IEVJUC0xNTU5JyxcbiAgICApO1xuICB9XG5cbiAgT2JqZWN0LmVudHJpZXModHhQYXJhbXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIC8vIHZhbGlkYXRlIHR5cGVzXG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ2Zyb20nOlxuICAgICAgICB2YWxpZGF0ZUZyb20odHhQYXJhbXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvJzpcbiAgICAgICAgdmFsaWRhdGVSZWNpcGllbnQodHhQYXJhbXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2dhc1ByaWNlJzpcbiAgICAgICAgZW5zdXJlUHJvcGVyVHJhbnNhY3Rpb25FbnZlbG9wZVR5cGVQcm92aWRlZCh0eFBhcmFtcywgJ2dhc1ByaWNlJyk7XG4gICAgICAgIGVuc3VyZU11dHVhbGx5RXhjbHVzaXZlRmllbGRzTm90UHJvdmlkZWQoXG4gICAgICAgICAgdHhQYXJhbXMsXG4gICAgICAgICAgJ2dhc1ByaWNlJyxcbiAgICAgICAgICAnbWF4RmVlUGVyR2FzJyxcbiAgICAgICAgKTtcbiAgICAgICAgZW5zdXJlTXV0dWFsbHlFeGNsdXNpdmVGaWVsZHNOb3RQcm92aWRlZChcbiAgICAgICAgICB0eFBhcmFtcyxcbiAgICAgICAgICAnZ2FzUHJpY2UnLFxuICAgICAgICAgICdtYXhQcmlvcml0eUZlZVBlckdhcycsXG4gICAgICAgICk7XG4gICAgICAgIGVuc3VyZUZpZWxkSXNTdHJpbmcodHhQYXJhbXMsICdnYXNQcmljZScpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21heEZlZVBlckdhcyc6XG4gICAgICAgIGVuc3VyZVByb3BlclRyYW5zYWN0aW9uRW52ZWxvcGVUeXBlUHJvdmlkZWQodHhQYXJhbXMsICdtYXhGZWVQZXJHYXMnKTtcbiAgICAgICAgZW5zdXJlTXV0dWFsbHlFeGNsdXNpdmVGaWVsZHNOb3RQcm92aWRlZChcbiAgICAgICAgICB0eFBhcmFtcyxcbiAgICAgICAgICAnbWF4RmVlUGVyR2FzJyxcbiAgICAgICAgICAnZ2FzUHJpY2UnLFxuICAgICAgICApO1xuICAgICAgICBlbnN1cmVGaWVsZElzU3RyaW5nKHR4UGFyYW1zLCAnbWF4RmVlUGVyR2FzJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWF4UHJpb3JpdHlGZWVQZXJHYXMnOlxuICAgICAgICBlbnN1cmVQcm9wZXJUcmFuc2FjdGlvbkVudmVsb3BlVHlwZVByb3ZpZGVkKFxuICAgICAgICAgIHR4UGFyYW1zLFxuICAgICAgICAgICdtYXhQcmlvcml0eUZlZVBlckdhcycsXG4gICAgICAgICk7XG4gICAgICAgIGVuc3VyZU11dHVhbGx5RXhjbHVzaXZlRmllbGRzTm90UHJvdmlkZWQoXG4gICAgICAgICAgdHhQYXJhbXMsXG4gICAgICAgICAgJ21heFByaW9yaXR5RmVlUGVyR2FzJyxcbiAgICAgICAgICAnZ2FzUHJpY2UnLFxuICAgICAgICApO1xuICAgICAgICBlbnN1cmVGaWVsZElzU3RyaW5nKHR4UGFyYW1zLCAnbWF4UHJpb3JpdHlGZWVQZXJHYXMnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd2YWx1ZSc6XG4gICAgICAgIGVuc3VyZUZpZWxkSXNTdHJpbmcodHhQYXJhbXMsICd2YWx1ZScpO1xuICAgICAgICBpZiAodmFsdWUudG9TdHJpbmcoKS5pbmNsdWRlcygnLScpKSB7XG4gICAgICAgICAgdGhyb3cgZXRoRXJyb3JzLnJwYy5pbnZhbGlkUGFyYW1zKFxuICAgICAgICAgICAgYEludmFsaWQgdHJhbnNhY3Rpb24gdmFsdWUgXCIke3ZhbHVlfVwiOiBub3QgYSBwb3NpdGl2ZSBudW1iZXIuYCxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLnRvU3RyaW5nKCkuaW5jbHVkZXMoJy4nKSkge1xuICAgICAgICAgIHRocm93IGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcyhcbiAgICAgICAgICAgIGBJbnZhbGlkIHRyYW5zYWN0aW9uIHZhbHVlIG9mIFwiJHt2YWx1ZX1cIjogbnVtYmVyIG11c3QgYmUgaW4gd2VpLmAsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdmFsdWUubWF0Y2goL14weFthLWZBLUYwLTldKyQvdSkpIHtcbiAgICAgICAgICB0aHJvdyBldGhFcnJvcnMucnBjLmludmFsaWRQYXJhbXMoXG4gICAgICAgICAgICBgSW52YWxpZCB0cmFuc2FjdGlvbiB2YWx1ZSBvZiBcIiR7dmFsdWV9XCI6IG5vdCBhIHZhbGlkIGhleCBzdHJpbmcuYCxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY2hhaW5JZCc6XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aHJvdyBldGhFcnJvcnMucnBjLmludmFsaWRQYXJhbXMoXG4gICAgICAgICAgICBgSW52YWxpZCB0cmFuc2FjdGlvbiBwYXJhbXM6ICR7a2V5fSBpcyBub3QgYSBOdW1iZXIgb3IgaGV4IHN0cmluZy4gZ290OiAoJHt2YWx1ZX0pYCxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZGF0YSc6XG4gICAgICAgIHZhbGlkYXRlSW5wdXREYXRhKHZhbHVlKTtcbiAgICAgICAgZW5zdXJlRmllbGRJc1N0cmluZyh0eFBhcmFtcywgJ2RhdGEnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbnN1cmVGaWVsZElzU3RyaW5nKHR4UGFyYW1zLCBrZXkpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlSW5wdXREYXRhKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgIC8vIFZhbGlkYXRlIHRoZSBpbnB1dCBkYXRhXG4gICAgY29uc3QgaHN0SW50ZXJmYWNlID0gbmV3IEludGVyZmFjZShhYmkpO1xuICAgIHRyeSB7XG4gICAgICBoc3RJbnRlcmZhY2UucGFyc2VUcmFuc2FjdGlvbih7IGRhdGE6IHZhbHVlIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFRocm93IGFuIGludmFsaWRQYXJhbXMgZXJyb3IgaWYgQlVGRkVSX09WRVJSVU5cbiAgICAgIC8qIGVzbGludCByZXF1aXJlLXVuaWNvZGUtcmVnZXhwOiBvZmYgKi9cbiAgICAgIGlmIChlLm1lc3NhZ2UubWF0Y2goL0JVRkZFUl9PVkVSUlVOLykpIHtcbiAgICAgICAgdGhyb3cgZXRoRXJyb3JzLnJwYy5pbnZhbGlkUGFyYW1zKFxuICAgICAgICAgIGBJbnZhbGlkIHRyYW5zYWN0aW9uIHBhcmFtczogZGF0YSBvdXQtb2YtYm91bmRzLCBCVUZGRVJfT1ZFUlJVTi5gLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGUge0Bjb2RlIGZyb219IGZpZWxkIGluIHRoZSBnaXZlbiB0eCBwYXJhbXNcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gdHhQYXJhbXNcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgZnJvbSBhZGRyZXNzIGlzbid0IHZhbGlkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUZyb20odHhQYXJhbXMpIHtcbiAgaWYgKCEodHlwZW9mIHR4UGFyYW1zLmZyb20gPT09ICdzdHJpbmcnKSkge1xuICAgIHRocm93IGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcyhcbiAgICAgIGBJbnZhbGlkIFwiZnJvbVwiIGFkZHJlc3MgXCIke3R4UGFyYW1zLmZyb219XCI6IG5vdCBhIHN0cmluZy5gLFxuICAgICk7XG4gIH1cbiAgaWYgKCFpc1ZhbGlkSGV4QWRkcmVzcyh0eFBhcmFtcy5mcm9tLCB7IGFsbG93Tm9uUHJlZml4ZWQ6IGZhbHNlIH0pKSB7XG4gICAgdGhyb3cgZXRoRXJyb3JzLnJwYy5pbnZhbGlkUGFyYW1zKCdJbnZhbGlkIFwiZnJvbVwiIGFkZHJlc3MuJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhlIHtAY29kZSB0b30gZmllbGQgaW4gdGhlIGdpdmVuIHR4IHBhcmFtc1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0eFBhcmFtcyAtIHRoZSB0eCBwYXJhbXNcbiAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSB0eCBwYXJhbXNcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB0aGUgcmVjaXBpZW50IGlzIGludmFsaWQgT1IgdGhlcmUgaXNuJ3QgdHggZGF0YVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVSZWNpcGllbnQodHhQYXJhbXMpIHtcbiAgaWYgKHR4UGFyYW1zLnRvID09PSAnMHgnIHx8IHR4UGFyYW1zLnRvID09PSBudWxsKSB7XG4gICAgaWYgKHR4UGFyYW1zLmRhdGEpIHtcbiAgICAgIGRlbGV0ZSB0eFBhcmFtcy50bztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXRoRXJyb3JzLnJwYy5pbnZhbGlkUGFyYW1zKCdJbnZhbGlkIFwidG9cIiBhZGRyZXNzLicpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChcbiAgICB0eFBhcmFtcy50byAhPT0gdW5kZWZpbmVkICYmXG4gICAgIWlzVmFsaWRIZXhBZGRyZXNzKHR4UGFyYW1zLnRvLCB7IGFsbG93Tm9uUHJlZml4ZWQ6IGZhbHNlIH0pXG4gICkge1xuICAgIHRocm93IGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcygnSW52YWxpZCBcInRvXCIgYWRkcmVzcy4nKTtcbiAgfVxuICByZXR1cm4gdHhQYXJhbXM7XG59XG5cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUNvbmZpcm1lZEV4dGVybmFsVHJhbnNhY3Rpb24gPSAoe1xuICB0eE1ldGEsXG4gIHBlbmRpbmdUcmFuc2FjdGlvbnMsXG4gIGNvbmZpcm1lZFRyYW5zYWN0aW9ucyxcbn0gPSB7fSkgPT4ge1xuICBpZiAoIXR4TWV0YSB8fCAhdHhNZXRhLnR4UGFyYW1zKSB7XG4gICAgdGhyb3cgZXRoRXJyb3JzLnJwYy5pbnZhbGlkUGFyYW1zKFxuICAgICAgJ1widHhNZXRhXCIgb3IgXCJ0eE1ldGEudHhQYXJhbXNcIiBpcyBtaXNzaW5nJyxcbiAgICApO1xuICB9XG4gIGlmICh0eE1ldGEuc3RhdHVzICE9PSBUcmFuc2FjdGlvblN0YXR1cy5jb25maXJtZWQpIHtcbiAgICB0aHJvdyBldGhFcnJvcnMucnBjLmludmFsaWRQYXJhbXMoXG4gICAgICAnRXh0ZXJuYWwgdHJhbnNhY3Rpb24gc3RhdHVzIHNob3VsZCBiZSBcImNvbmZpcm1lZFwiJyxcbiAgICApO1xuICB9XG4gIGNvbnN0IGV4dGVybmFsVHhOb25jZSA9IHR4TWV0YS50eFBhcmFtcy5ub25jZTtcbiAgaWYgKHBlbmRpbmdUcmFuc2FjdGlvbnMgJiYgcGVuZGluZ1RyYW5zYWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgZm91bmRQZW5kaW5nVHhCeU5vbmNlID0gcGVuZGluZ1RyYW5zYWN0aW9ucy5maW5kKFxuICAgICAgKGVsKSA9PiBlbC50eFBhcmFtcz8ubm9uY2UgPT09IGV4dGVybmFsVHhOb25jZSxcbiAgICApO1xuICAgIGlmIChmb3VuZFBlbmRpbmdUeEJ5Tm9uY2UpIHtcbiAgICAgIHRocm93IGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcyhcbiAgICAgICAgJ0V4dGVybmFsIHRyYW5zYWN0aW9uIG5vbmNlIHNob3VsZCBub3QgYmUgaW4gcGVuZGluZyB0eHMnLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbmZpcm1lZFRyYW5zYWN0aW9ucyAmJiBjb25maXJtZWRUcmFuc2FjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGZvdW5kQ29uZmlybWVkVHhCeU5vbmNlID0gY29uZmlybWVkVHJhbnNhY3Rpb25zLmZpbmQoXG4gICAgICAoZWwpID0+IGVsLnR4UGFyYW1zPy5ub25jZSA9PT0gZXh0ZXJuYWxUeE5vbmNlLFxuICAgICk7XG4gICAgaWYgKGZvdW5kQ29uZmlybWVkVHhCeU5vbmNlKSB7XG4gICAgICB0aHJvdyBldGhFcnJvcnMucnBjLmludmFsaWRQYXJhbXMoXG4gICAgICAgICdFeHRlcm5hbCB0cmFuc2FjdGlvbiBub25jZSBzaG91bGQgbm90IGJlIGluIGNvbmZpcm1lZCB0eHMnLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhIGxpc3Qgb2YgZmluYWwgc3RhdGVzXG4gKlxuICogQHJldHVybnMge3N0cmluZ1tdfSB0aGUgc3RhdGVzIHRoYXQgY2FuIGJlIGNvbnNpZGVyZWQgZmluYWwgc3RhdGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaW5hbFN0YXRlcygpIHtcbiAgcmV0dXJuIFtcbiAgICBUcmFuc2FjdGlvblN0YXR1cy5yZWplY3RlZCwgLy8gdGhlIHVzZXIgaGFzIHJlc3BvbmRlZCBubyFcbiAgICBUcmFuc2FjdGlvblN0YXR1cy5jb25maXJtZWQsIC8vIHRoZSB0eCBoYXMgYmVlbiBpbmNsdWRlZCBpbiBhIGJsb2NrLlxuICAgIFRyYW5zYWN0aW9uU3RhdHVzLmZhaWxlZCwgLy8gdGhlIHR4IGZhaWxlZCBmb3Igc29tZSByZWFzb24sIGluY2x1ZGVkIG9uIHR4IGRhdGEuXG4gICAgVHJhbnNhY3Rpb25TdGF0dXMuZHJvcHBlZCwgLy8gdGhlIHR4IG5vbmNlIHdhcyBhbHJlYWR5IHVzZWRcbiAgXTtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemVzIHR4IHJlY2VpcHQgZ2FzIHVzZWQgdG8gYmUgYSBoZXhhZGVjaW1hbCBzdHJpbmcuXG4gKiBJdCBzZWVtcyB0aGF0IHNvbWV0aW1lcyB0aGUgbnVtZXJpY2FsIHZhbHVlcyBiZWluZyByZXR1cm5lZCBmcm9tXG4gKiB0aGlzLnF1ZXJ5LmdldFRyYW5zYWN0aW9uUmVjZWlwdCBhcmUgQk4gaW5zdGFuY2VzIGFuZCBub3Qgc3RyaW5ncy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZyBvciBCTiBpbnN0YW5jZX0gZ2FzVXNlZFxuICogQHJldHVybnMgbm9ybWFsaXplZCBnYXMgdXNlZCBhcyBoZXhhZGVjaW1hbCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVR4UmVjZWlwdEdhc1VzZWQoZ2FzVXNlZCkge1xuICByZXR1cm4gdHlwZW9mIGdhc1VzZWQgPT09ICdzdHJpbmcnID8gZ2FzVXNlZCA6IGdhc1VzZWQudG9TdHJpbmcoMTYpO1xufVxuIiwiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdAbWV0YW1hc2svc2FmZS1ldmVudC1lbWl0dGVyJztcbmltcG9ydCBsb2cgZnJvbSAnbG9nbGV2ZWwnO1xuaW1wb3J0IEV0aFF1ZXJ5IGZyb20gJ2V0aGpzLXF1ZXJ5JztcbmltcG9ydCB7IFRyYW5zYWN0aW9uU3RhdHVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy90cmFuc2FjdGlvbic7XG5pbXBvcnQgeyBFUlJPUl9TVUJNSVRUSU5HIH0gZnJvbSAnLi90eC1zdGF0ZS1tYW5hZ2VyJztcblxuLyoqXG4gKiBFdmVudCBlbWl0dGVyIHV0aWxpdHkgY2xhc3MgZm9yIHRyYWNraW5nIHRoZSB0cmFuc2FjdGlvbnMgYXMgdGhleVxuICogZ28gZnJvbSBhIHBlbmRpbmcgc3RhdGUgdG8gYSBjb25maXJtZWQgKG1pbmVkIGluIGEgYmxvY2spIHN0YXRlLlxuICpcbiAqIEFzIHdlbGwgYXMgY29udGludWVzIGJyb2FkY2FzdCB3aGlsZSBpbiB0aGUgcGVuZGluZyBzdGF0ZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGVuZGluZ1RyYW5zYWN0aW9uVHJhY2tlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIC8qKlxuICAgKiBXZSB3YWl0IHRoaXMgbWFueSBibG9ja3MgYmVmb3JlIGVtaXR0aW5nIGEgJ3R4OmRyb3BwZWQnIGV2ZW50XG4gICAqXG4gICAqIFRoaXMgaXMgYmVjYXVzZSB3ZSBjb3VsZCBiZSB0YWxraW5nIHRvIGEgbm9kZSB0aGF0IGlzIG91dCBvZiBzeW5jLlxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgRFJPUFBFRF9CVUZGRVJfQ09VTlQgPSAzO1xuXG4gIC8qKlxuICAgKiBBIG1hcCBvZiB0cmFuc2FjdGlvbiBoYXNoZXMgdG8gdGhlIG51bWJlciBvZiBibG9ja3Mgd2UndmUgc2VlblxuICAgKiBzaW5jZSBmaXJzdCBjb25zaWRlcmluZyBpdCBkcm9wcGVkXG4gICAqXG4gICAqIEB0eXBlIHtNYXA8c3RyaW5nLCBudW1iZXI+fVxuICAgKi9cbiAgZHJvcHBlZEJsb2Nrc0J1ZmZlckJ5SGFzaCA9IG5ldyBNYXAoKTtcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyAtIENvbmZpZ3VyYXRpb24uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbmZpZy5hcHByb3ZlVHJhbnNhY3Rpb24gLSBBcHByb3ZlcyBhIHRyYW5zYWN0aW9uLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWcuY29uZmlybVRyYW5zYWN0aW9uIC0gU2V0IGEgdHJhbnNhY3Rpb24gYXMgY29uZmlybWVkLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWcuZ2V0Q29tcGxldGVkVHJhbnNhY3Rpb25zIC0gUmV0dXJucyBjb21wbGV0ZWQgdHJhbnNhY3Rpb25zLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWcuZ2V0UGVuZGluZ1RyYW5zYWN0aW9ucyAtIFJldHVybnMgYW4gYXJyYXkgb2YgcGVuZGluZyB0cmFuc2FjdGlvbnMsXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcubm9uY2VUcmFja2VyIC0gc2VlIG5vbmNlIHRyYWNrZXJcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZy5wcm92aWRlciAtIEEgbmV0d29yayBwcm92aWRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZy5xdWVyeSAtIEFuIEV0aFF1ZXJ5IGluc3RhbmNlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25maWcucHVibGlzaFRyYW5zYWN0aW9uIC0gUHVibGlzaGVzIGEgcmF3IHRyYW5zYWN0aW9uLFxuICAgKi9cbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnF1ZXJ5ID0gY29uZmlnLnF1ZXJ5IHx8IG5ldyBFdGhRdWVyeShjb25maWcucHJvdmlkZXIpO1xuICAgIHRoaXMubm9uY2VUcmFja2VyID0gY29uZmlnLm5vbmNlVHJhY2tlcjtcbiAgICB0aGlzLmdldFBlbmRpbmdUcmFuc2FjdGlvbnMgPSBjb25maWcuZ2V0UGVuZGluZ1RyYW5zYWN0aW9ucztcbiAgICB0aGlzLmdldENvbXBsZXRlZFRyYW5zYWN0aW9ucyA9IGNvbmZpZy5nZXRDb21wbGV0ZWRUcmFuc2FjdGlvbnM7XG4gICAgdGhpcy5wdWJsaXNoVHJhbnNhY3Rpb24gPSBjb25maWcucHVibGlzaFRyYW5zYWN0aW9uO1xuICAgIHRoaXMuYXBwcm92ZVRyYW5zYWN0aW9uID0gY29uZmlnLmFwcHJvdmVUcmFuc2FjdGlvbjtcbiAgICB0aGlzLmNvbmZpcm1UcmFuc2FjdGlvbiA9IGNvbmZpZy5jb25maXJtVHJhbnNhY3Rpb247XG4gIH1cblxuICAvKipcbiAgICogY2hlY2tzIHRoZSBuZXR3b3JrIGZvciBzaWduZWQgdHhzIGFuZCByZWxlYXNlcyB0aGUgbm9uY2UgZ2xvYmFsIGxvY2sgaWYgaXQgaXNcbiAgICovXG4gIGFzeW5jIHVwZGF0ZVBlbmRpbmdUeHMoKSB7XG4gICAgLy8gaW4gb3JkZXIgdG8ga2VlcCB0aGUgbm9uY2VUcmFja2VyIGFjY3VyYXRlIHdlIGJsb2NrIGl0IHdoaWxlIHVwZGF0aW5nIHBlbmRpbmcgdHJhbnNhY3Rpb25zXG4gICAgY29uc3Qgbm9uY2VHbG9iYWxMb2NrID0gYXdhaXQgdGhpcy5ub25jZVRyYWNrZXIuZ2V0R2xvYmFsTG9jaygpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwZW5kaW5nVHhzID0gdGhpcy5nZXRQZW5kaW5nVHJhbnNhY3Rpb25zKCk7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgcGVuZGluZ1R4cy5tYXAoKHR4TWV0YSkgPT4gdGhpcy5fY2hlY2tQZW5kaW5nVHgodHhNZXRhKSksXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLmVycm9yKFxuICAgICAgICAnUGVuZGluZ1RyYW5zYWN0aW9uVHJhY2tlciAtIEVycm9yIHVwZGF0aW5nIHBlbmRpbmcgdHJhbnNhY3Rpb25zJyxcbiAgICAgICk7XG4gICAgICBsb2cuZXJyb3IoZXJyKTtcbiAgICB9XG4gICAgbm9uY2VHbG9iYWxMb2NrLnJlbGVhc2VMb2NrKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVzdWJtaXRzIGVhY2ggcGVuZGluZyB0cmFuc2FjdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYmxvY2tOdW1iZXIgLSB0aGUgbGF0ZXN0IGJsb2NrIG51bWJlciBpbiBoZXhcbiAgICogQGZpcmVzIHR4Ondhcm5pbmdcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBhc3luYyByZXN1Ym1pdFBlbmRpbmdUeHMoYmxvY2tOdW1iZXIpIHtcbiAgICBjb25zdCBwZW5kaW5nID0gdGhpcy5nZXRQZW5kaW5nVHJhbnNhY3Rpb25zKCk7XG4gICAgaWYgKCFwZW5kaW5nLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHR4TWV0YSBvZiBwZW5kaW5nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLl9yZXN1Ym1pdFR4KHR4TWV0YSwgYmxvY2tOdW1iZXIpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICAgICAgZXJyLnZhbHVlPy5tZXNzYWdlPy50b0xvd2VyQ2FzZSgpIHx8IGVyci5tZXNzYWdlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGlzS25vd25UeCA9XG4gICAgICAgICAgLy8gZ2V0aFxuICAgICAgICAgIGVycm9yTWVzc2FnZS5pbmNsdWRlcygncmVwbGFjZW1lbnQgdHJhbnNhY3Rpb24gdW5kZXJwcmljZWQnKSB8fFxuICAgICAgICAgIGVycm9yTWVzc2FnZS5pbmNsdWRlcygna25vd24gdHJhbnNhY3Rpb24nKSB8fFxuICAgICAgICAgIC8vIHBhcml0eVxuICAgICAgICAgIGVycm9yTWVzc2FnZS5pbmNsdWRlcygnZ2FzIHByaWNlIHRvbyBsb3cgdG8gcmVwbGFjZScpIHx8XG4gICAgICAgICAgZXJyb3JNZXNzYWdlLmluY2x1ZGVzKFxuICAgICAgICAgICAgJ3RyYW5zYWN0aW9uIHdpdGggdGhlIHNhbWUgaGFzaCB3YXMgYWxyZWFkeSBpbXBvcnRlZCcsXG4gICAgICAgICAgKSB8fFxuICAgICAgICAgIC8vIG90aGVyXG4gICAgICAgICAgZXJyb3JNZXNzYWdlLmluY2x1ZGVzKCdnYXRld2F5IHRpbWVvdXQnKSB8fFxuICAgICAgICAgIGVycm9yTWVzc2FnZS5pbmNsdWRlcygnbm9uY2UgdG9vIGxvdycpO1xuICAgICAgICAvLyBpZ25vcmUgcmVzdWJtaXQgd2FybmluZ3MsIHJldHVybiBlYXJseVxuICAgICAgICBpZiAoaXNLbm93blR4KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVuY291bnRlcmVkIHJlYWwgZXJyb3IgLSB0cmFuc2l0aW9uIHRvIGVycm9yIHN0YXRlXG4gICAgICAgIHR4TWV0YS53YXJuaW5nID0ge1xuICAgICAgICAgIGVycm9yOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgbWVzc2FnZTogRVJST1JfU1VCTUlUVElORyxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbWl0KCd0eDp3YXJuaW5nJywgdHhNZXRhLCBlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRlbXB0cyB0byByZXN1Ym1pdCB0aGUgZ2l2ZW4gdHJhbnNhY3Rpb24gd2l0aCBleHBvbmVudGlhbCBiYWNrb2ZmXG4gICAqXG4gICAqIFdpbGwgb25seSBhdHRlbXB0IHRvIHJldHJ5IHRoZSBnaXZlbiB0eCBldmVyeSB7QGNvZGUgMioqKHR4TWV0YS5yZXRyeUNvdW50KX0gYmxvY2tzLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gdHhNZXRhIC0gdGhlIHRyYW5zYWN0aW9uIG1ldGFkYXRhXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYXRlc3RCbG9ja051bWJlciAtIHRoZSBsYXRlc3QgYmxvY2sgbnVtYmVyIGluIGhleFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmd8dW5kZWZpbmVkPn0gdGhlIHR4IGhhc2ggaWYgcmV0cmllZFxuICAgKiBAZmlyZXMgdHg6YmxvY2stdXBkYXRlXG4gICAqIEBmaXJlcyB0eDpyZXRyeVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYXN5bmMgX3Jlc3VibWl0VHgodHhNZXRhLCBsYXRlc3RCbG9ja051bWJlcikge1xuICAgIGlmICghdHhNZXRhLmZpcnN0UmV0cnlCbG9ja051bWJlcikge1xuICAgICAgdGhpcy5lbWl0KCd0eDpibG9jay11cGRhdGUnLCB0eE1ldGEsIGxhdGVzdEJsb2NrTnVtYmVyKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaXJzdFJldHJ5QmxvY2tOdW1iZXIgPVxuICAgICAgdHhNZXRhLmZpcnN0UmV0cnlCbG9ja051bWJlciB8fCBsYXRlc3RCbG9ja051bWJlcjtcbiAgICBjb25zdCB0eEJsb2NrRGlzdGFuY2UgPVxuICAgICAgTnVtYmVyLnBhcnNlSW50KGxhdGVzdEJsb2NrTnVtYmVyLCAxNikgLVxuICAgICAgTnVtYmVyLnBhcnNlSW50KGZpcnN0UmV0cnlCbG9ja051bWJlciwgMTYpO1xuXG4gICAgY29uc3QgcmV0cnlDb3VudCA9IHR4TWV0YS5yZXRyeUNvdW50IHx8IDA7XG5cbiAgICAvLyBFeHBvbmVudGlhbCBiYWNrb2ZmIHRvIGxpbWl0IHJldHJpZXMgYXQgcHVibGlzaGluZyAoY2FwcGVkIGF0IH4xNSBtaW51dGVzIGJldHdlZW4gcmV0cmllcylcbiAgICBpZiAodHhCbG9ja0Rpc3RhbmNlIDwgTWF0aC5taW4oNTAsIE1hdGgucG93KDIsIHJldHJ5Q291bnQpKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cblxuICAgIC8vIE9ubHkgYXV0by1zdWJtaXQgYWxyZWFkeS1zaWduZWQgdHhzOlxuICAgIGlmICghKCdyYXdUeCcgaW4gdHhNZXRhKSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXBwcm92ZVRyYW5zYWN0aW9uKHR4TWV0YS5pZCk7XG4gICAgfVxuXG4gICAgY29uc3QgeyByYXdUeCB9ID0gdHhNZXRhO1xuICAgIGNvbnN0IHR4SGFzaCA9IGF3YWl0IHRoaXMucHVibGlzaFRyYW5zYWN0aW9uKHJhd1R4KTtcblxuICAgIC8vIEluY3JlbWVudCBzdWNjZXNzZnVsIHRyaWVzOlxuICAgIHRoaXMuZW1pdCgndHg6cmV0cnknLCB0eE1ldGEpO1xuICAgIHJldHVybiB0eEhhc2g7XG4gIH1cblxuICAvKipcbiAgICogUXVlcnkgdGhlIG5ldHdvcmsgdG8gc2VlIGlmIHRoZSBnaXZlbiB7QGNvZGUgdHhNZXRhfSBoYXMgYmVlbiBpbmNsdWRlZCBpbiBhIGJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0eE1ldGEgLSB0aGUgdHJhbnNhY3Rpb24gbWV0YWRhdGFcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqIEBmaXJlcyB0eDpjb25maXJtZWRcbiAgICogQGZpcmVzIHR4OmRyb3BwZWRcbiAgICogQGZpcmVzIHR4OmZhaWxlZFxuICAgKiBAZmlyZXMgdHg6d2FybmluZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICBhc3luYyBfY2hlY2tQZW5kaW5nVHgodHhNZXRhKSB7XG4gICAgY29uc3QgdHhIYXNoID0gdHhNZXRhLmhhc2g7XG4gICAgY29uc3QgdHhJZCA9IHR4TWV0YS5pZDtcblxuICAgIC8vIE9ubHkgY2hlY2sgc3VibWl0dGVkIHR4c1xuICAgIGlmICh0eE1ldGEuc3RhdHVzICE9PSBUcmFuc2FjdGlvblN0YXR1cy5zdWJtaXR0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBleHRyYSBjaGVjayBpbiBjYXNlIHRoZXJlIHdhcyBhbiB1bmNhdWdodCBlcnJvciBkdXJpbmcgdGhlXG4gICAgLy8gc2lnbmF0dXJlIGFuZCBzdWJtaXNzaW9uIHByb2Nlc3NcblxuICAgIGxldCBoYXNOb0hhc2ggPSAhdHhIYXNoO1xuXG5cbiAgICBpZiAoaGFzTm9IYXNoKSB7XG4gICAgICBjb25zdCBub1R4SGFzaEVyciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ1dlIGhhZCBhbiBlcnJvciB3aGlsZSBzdWJtaXR0aW5nIHRoaXMgdHJhbnNhY3Rpb24sIHBsZWFzZSB0cnkgYWdhaW4uJyxcbiAgICAgICk7XG4gICAgICBub1R4SGFzaEVyci5uYW1lID0gJ05vVHhIYXNoRXJyb3InO1xuICAgICAgdGhpcy5lbWl0KCd0eDpmYWlsZWQnLCB0eElkLCBub1R4SGFzaEVycik7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoYXdhaXQgdGhpcy5fY2hlY2tJZk5vbmNlSXNUYWtlbih0eE1ldGEpKSB7XG4gICAgICB0aGlzLmVtaXQoJ3R4OmRyb3BwZWQnLCB0eElkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdHJhbnNhY3Rpb25SZWNlaXB0ID0gYXdhaXQgdGhpcy5xdWVyeS5nZXRUcmFuc2FjdGlvblJlY2VpcHQodHhIYXNoKTtcbiAgICAgIGlmICh0cmFuc2FjdGlvblJlY2VpcHQ/LmJsb2NrTnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHsgYmFzZUZlZVBlckdhcywgdGltZXN0YW1wOiBibG9ja1RpbWVzdGFtcCB9ID1cbiAgICAgICAgICBhd2FpdCB0aGlzLnF1ZXJ5LmdldEJsb2NrQnlIYXNoKHRyYW5zYWN0aW9uUmVjZWlwdD8uYmxvY2tIYXNoLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5lbWl0KFxuICAgICAgICAgICd0eDpjb25maXJtZWQnLFxuICAgICAgICAgIHR4SWQsXG4gICAgICAgICAgdHJhbnNhY3Rpb25SZWNlaXB0LFxuICAgICAgICAgIGJhc2VGZWVQZXJHYXMsXG4gICAgICAgICAgYmxvY2tUaW1lc3RhbXAsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHR4TWV0YS53YXJuaW5nID0ge1xuICAgICAgICBlcnJvcjogZXJyLm1lc3NhZ2UsXG4gICAgICAgIG1lc3NhZ2U6ICdUaGVyZSB3YXMgYSBwcm9ibGVtIGxvYWRpbmcgdGhpcyB0cmFuc2FjdGlvbi4nLFxuICAgICAgfTtcbiAgICAgIHRoaXMuZW1pdCgndHg6d2FybmluZycsIHR4TWV0YSwgZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoYXdhaXQgdGhpcy5fY2hlY2tJZlR4V2FzRHJvcHBlZCh0eE1ldGEpKSB7XG4gICAgICB0aGlzLmVtaXQoJ3R4OmRyb3BwZWQnLCB0eElkKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIG5vbmNlIGluIHRoZSBnaXZlbiB7QGNvZGUgdHhNZXRhfSBpcyBiZWhpbmQgdGhlIG5ldHdvcmsgbm9uY2VcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHR4TWV0YSAtIHRoZSB0cmFuc2FjdGlvbiBtZXRhZGF0YVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFzeW5jIF9jaGVja0lmVHhXYXNEcm9wcGVkKHR4TWV0YSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGhhc2g6IHR4SGFzaCxcbiAgICAgIHR4UGFyYW1zOiB7IG5vbmNlLCBmcm9tIH0sXG4gICAgfSA9IHR4TWV0YTtcbiAgICBjb25zdCBuZXR3b3JrTmV4dE5vbmNlID0gYXdhaXQgdGhpcy5xdWVyeS5nZXRUcmFuc2FjdGlvbkNvdW50KGZyb20pO1xuXG4gICAgaWYgKHBhcnNlSW50KG5vbmNlLCAxNikgPj0gbmV0d29ya05leHROb25jZS50b051bWJlcigpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmRyb3BwZWRCbG9ja3NCdWZmZXJCeUhhc2guaGFzKHR4SGFzaCkpIHtcbiAgICAgIHRoaXMuZHJvcHBlZEJsb2Nrc0J1ZmZlckJ5SGFzaC5zZXQodHhIYXNoLCAwKTtcbiAgICB9XG5cbiAgICBjb25zdCBjdXJyZW50QmxvY2tCdWZmZXIgPSB0aGlzLmRyb3BwZWRCbG9ja3NCdWZmZXJCeUhhc2guZ2V0KHR4SGFzaCk7XG5cbiAgICBpZiAoY3VycmVudEJsb2NrQnVmZmVyIDwgdGhpcy5EUk9QUEVEX0JVRkZFUl9DT1VOVCkge1xuICAgICAgdGhpcy5kcm9wcGVkQmxvY2tzQnVmZmVyQnlIYXNoLnNldCh0eEhhc2gsIGN1cnJlbnRCbG9ja0J1ZmZlciArIDEpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuZHJvcHBlZEJsb2Nrc0J1ZmZlckJ5SGFzaC5kZWxldGUodHhIYXNoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciB0aGUgbm9uY2UgaW4gdGhlIGdpdmVuIHtAY29kZSB0eE1ldGF9IGlzIGNvcnJlY3QgYWdhaW5zdCB0aGUgbG9jYWwgc2V0IG9mIHRyYW5zYWN0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gdHhNZXRhIC0gdGhlIHRyYW5zYWN0aW9uIG1ldGFkYXRhXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYXN5bmMgX2NoZWNrSWZOb25jZUlzVGFrZW4odHhNZXRhKSB7XG4gICAgY29uc3QgYWRkcmVzcyA9IHR4TWV0YS50eFBhcmFtcy5mcm9tO1xuICAgIGNvbnN0IGNvbXBsZXRlZCA9IHRoaXMuZ2V0Q29tcGxldGVkVHJhbnNhY3Rpb25zKGFkZHJlc3MpO1xuICAgIHJldHVybiBjb21wbGV0ZWQuc29tZShcbiAgICAgIC8vIFRoaXMgaXMgY2FsbGVkIHdoaWxlIHRoZSB0cmFuc2FjdGlvbiBpcyBpbi1mbGlnaHQsIHNvIGl0IGlzIHBvc3NpYmxlIHRoYXQgdGhlXG4gICAgICAvLyBsaXN0IG9mIGNvbXBsZXRlZCB0cmFuc2FjdGlvbnMgbm93IGluY2x1ZGVzIHRoZSB0cmFuc2FjdGlvbiB3ZSB3ZXJlIGxvb2tpbmcgYXRcbiAgICAgIC8vIGFuZCBpZiB0aGF0IGlzIHRoZSBjYXNlLCBkb24ndCBjb25zaWRlciB0aGUgdHJhbnNhY3Rpb24gdG8gaGF2ZSB0YWtlbiBpdHMgb3duIG5vbmNlXG4gICAgICAob3RoZXIpID0+XG4gICAgICAgICEob3RoZXIuaWQgPT09IHR4TWV0YS5pZCkgJiZcbiAgICAgICAgb3RoZXIudHhQYXJhbXMubm9uY2UgPT09IHR4TWV0YS50eFBhcmFtcy5ub25jZSxcbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgRXRoUXVlcnkgZnJvbSAnZXRoanMtcXVlcnknO1xuaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5pbXBvcnQgeyBhZGRIZXhQcmVmaXggfSBmcm9tICdldGhlcmV1bWpzLXV0aWwnO1xuaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGhleFRvQm4sIEJuTXVsdGlwbHlCeUZyYWN0aW9uIH0gZnJvbSAnLi4vLi4vbGliL3V0aWwnO1xuaW1wb3J0IHsgYm5Ub0hleCB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL2NvbnZlcnNpb24udXRpbHMnO1xuXG4vKipcbiAqIFJlc3VsdCBvZiBnYXMgYW5hbHlzaXMsIGluY2x1ZGluZyBlaXRoZXIgYSBnYXMgZXN0aW1hdGUgZm9yIGEgc3VjY2Vzc2Z1bCBhbmFseXNpcywgb3JcbiAqIGRlYnVnIGluZm9ybWF0aW9uIGZvciBhIGZhaWxlZCBhbmFseXNpcy5cbiAqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBHYXNBbmFseXNpc1Jlc3VsdFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJsb2NrR2FzTGltaXQgLSBUaGUgZ2FzIGxpbWl0IG9mIHRoZSBibG9jayB1c2VkIGZvciB0aGUgYW5hbHlzaXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBlc3RpbWF0ZWRHYXNIZXggLSBUaGUgZXN0aW1hdGVkIGdhcywgaW4gaGV4YWRlY2ltYWxcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBzaW11bGF0aW9uRmFpbHMgLSBEZWJ1ZyBpbmZvcm1hdGlvbiBhYm91dCB3aHkgYW4gYW5hbHlzaXMgZmFpbGVkXG4gKi9cblxuLyoqXG4gKiB0eC1nYXMtdXRpbHMgYXJlIGdhcyB1dGlsaXR5IG1ldGhvZHMgZm9yIFRyYW5zYWN0aW9uIG1hbmFnZXJcbiAqIGl0cyBwYXNzZWQgZXRocXVlcnlcbiAqIGFuZCB1c2VkIHRvIGRvIHRoaW5ncyBsaWtlIGNhbGN1bGF0ZSBnYXMgb2YgYSB0eC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvdmlkZXIgLSBBIG5ldHdvcmsgcHJvdmlkZXIuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHhHYXNVdGlsIHtcbiAgY29uc3RydWN0b3IocHJvdmlkZXIpIHtcbiAgICB0aGlzLnF1ZXJ5ID0gbmV3IEV0aFF1ZXJ5KHByb3ZpZGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gdHhNZXRhIC0gdGhlIHR4TWV0YSBvYmplY3RcbiAgICogQHJldHVybnMge0dhc0FuYWx5c2lzUmVzdWx0fSBUaGUgcmVzdWx0IG9mIHRoZSBnYXMgYW5hbHlzaXNcbiAgICovXG4gIGFzeW5jIGFuYWx5emVHYXNVc2FnZSh0eE1ldGEpIHtcbiAgICBjb25zdCBibG9jayA9IGF3YWl0IHRoaXMucXVlcnkuZ2V0QmxvY2tCeU51bWJlcignbGF0ZXN0JywgZmFsc2UpO1xuXG4gICAgLy8gZmFsbGJhY2sgdG8gYmxvY2sgZ2FzTGltaXRcbiAgICBjb25zdCBibG9ja0dhc0xpbWl0Qk4gPSBoZXhUb0JuKGJsb2NrLmdhc0xpbWl0KTtcbiAgICBjb25zdCBzYWZlckdhc0xpbWl0Qk4gPSBCbk11bHRpcGx5QnlGcmFjdGlvbihibG9ja0dhc0xpbWl0Qk4sIDE5LCAyMCk7XG4gICAgbGV0IGVzdGltYXRlZEdhc0hleCA9IGJuVG9IZXgoc2FmZXJHYXNMaW1pdEJOKTtcbiAgICBsZXQgc2ltdWxhdGlvbkZhaWxzO1xuICAgIHRyeSB7XG4gICAgICBlc3RpbWF0ZWRHYXNIZXggPSBhd2FpdCB0aGlzLmVzdGltYXRlVHhHYXModHhNZXRhKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nLndhcm4oZXJyb3IpO1xuICAgICAgc2ltdWxhdGlvbkZhaWxzID0ge1xuICAgICAgICByZWFzb246IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIGVycm9yS2V5OiBlcnJvci5lcnJvcktleSxcbiAgICAgICAgZGVidWc6IHsgYmxvY2tOdW1iZXI6IGJsb2NrLm51bWJlciwgYmxvY2tHYXNMaW1pdDogYmxvY2suZ2FzTGltaXQgfSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGJsb2NrR2FzTGltaXQ6IGJsb2NrLmdhc0xpbWl0LFxuICAgICAgZXN0aW1hdGVkR2FzSGV4LFxuICAgICAgc2ltdWxhdGlvbkZhaWxzLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRXN0aW1hdGVzIHRoZSB0eCdzIGdhcyB1c2FnZVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gdHhNZXRhIC0gdGhlIHR4TWV0YSBvYmplY3RcbiAgICogQHJldHVybnMge3N0cmluZ30gdGhlIGVzdGltYXRlZCBnYXMgbGltaXQgYXMgYSBoZXggc3RyaW5nXG4gICAqL1xuICBhc3luYyBlc3RpbWF0ZVR4R2FzKHR4TWV0YSkge1xuICAgIGNvbnN0IHR4UGFyYW1zID0gY2xvbmVEZWVwKHR4TWV0YS50eFBhcmFtcyk7XG5cbiAgICAvLyBgZXRoX2VzdGltYXRlR2FzYCBjYW4gZmFpbCBpZiB0aGUgdXNlciBoYXMgaW5zdWZmaWNpZW50IGJhbGFuY2UgZm9yIHRoZVxuICAgIC8vIHZhbHVlIGJlaW5nIHNlbnQsIG9yIGZvciB0aGUgZ2FzIGNvc3QuIFdlIGRvbid0IHdhbnQgdG8gY2hlY2sgdGhlaXJcbiAgICAvLyBiYWxhbmNlIGhlcmUsIHdlIGp1c3Qgd2FudCB0aGUgZ2FzIGVzdGltYXRlLiBUaGUgZ2FzIHByaWNlIGlzIHJlbW92ZWRcbiAgICAvLyB0byBza2lwIHRob3NlIGJhbGFuY2UgY2hlY2tzLiBXZSBjaGVjayBiYWxhbmNlIGVsc2V3aGVyZS4gV2UgYWxzbyBkZWxldGVcbiAgICAvLyBtYXhGZWVQZXJHYXMgYW5kIG1heFByaW9yaXR5RmVlUGVyR2FzIHRvIHN1cHBvcnQgRUlQLTE1NTkgdHhzLlxuICAgIGRlbGV0ZSB0eFBhcmFtcy5nYXNQcmljZTtcbiAgICBkZWxldGUgdHhQYXJhbXMubWF4RmVlUGVyR2FzO1xuICAgIGRlbGV0ZSB0eFBhcmFtcy5tYXhQcmlvcml0eUZlZVBlckdhcztcblxuICAgIC8vIGVzdGltYXRlIHR4IGdhcyByZXF1aXJlbWVudHNcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5xdWVyeS5lc3RpbWF0ZUdhcyh0eFBhcmFtcyk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIGdhcyBidWZmZXIgd2l0aCBvdXQgZXhjZWVkaW5nIHRoZSBibG9jayBnYXMgbGltaXRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGluaXRpYWxHYXNMaW1pdEhleCAtIHRoZSBpbml0aWFsIGdhcyBsaW1pdCB0byBhZGQgdGhlIGJ1ZmZlciB0b29cbiAgICogQHBhcmFtIHtzdHJpbmd9IGJsb2NrR2FzTGltaXRIZXggLSB0aGUgYmxvY2sgZ2FzIGxpbWl0XG4gICAqIEBwYXJhbSBtdWx0aXBsaWVyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBidWZmZXJlZCBnYXMgbGltaXQgYXMgYSBoZXggc3RyaW5nXG4gICAqL1xuICBhZGRHYXNCdWZmZXIoaW5pdGlhbEdhc0xpbWl0SGV4LCBibG9ja0dhc0xpbWl0SGV4LCBtdWx0aXBsaWVyID0gMS41KSB7XG4gICAgY29uc3QgaW5pdGlhbEdhc0xpbWl0Qm4gPSBoZXhUb0JuKGluaXRpYWxHYXNMaW1pdEhleCk7XG4gICAgY29uc3QgYmxvY2tHYXNMaW1pdEJuID0gaGV4VG9CbihibG9ja0dhc0xpbWl0SGV4KTtcbiAgICBjb25zdCB1cHBlckdhc0xpbWl0Qm4gPSBibG9ja0dhc0xpbWl0Qm4ubXVsbigwLjkpO1xuICAgIGNvbnN0IGJ1ZmZlcmVkR2FzTGltaXRCbiA9IGluaXRpYWxHYXNMaW1pdEJuLm11bG4obXVsdGlwbGllcik7XG5cbiAgICAvLyBpZiBpbml0aWFsR2FzTGltaXQgaXMgYWJvdmUgYmxvY2tHYXNMaW1pdCwgZG9udCBtb2RpZnkgaXRcbiAgICBpZiAoaW5pdGlhbEdhc0xpbWl0Qm4uZ3QodXBwZXJHYXNMaW1pdEJuKSkge1xuICAgICAgcmV0dXJuIGJuVG9IZXgoaW5pdGlhbEdhc0xpbWl0Qm4pO1xuICAgIH1cbiAgICAvLyBpZiBidWZmZXJlZEdhc0xpbWl0IGlzIGJlbG93IGJsb2NrR2FzTGltaXQsIHVzZSBidWZmZXJlZEdhc0xpbWl0XG4gICAgaWYgKGJ1ZmZlcmVkR2FzTGltaXRCbi5sdCh1cHBlckdhc0xpbWl0Qm4pKSB7XG4gICAgICByZXR1cm4gYm5Ub0hleChidWZmZXJlZEdhc0xpbWl0Qm4pO1xuICAgIH1cbiAgICAvLyBvdGhlcndpc2UgdXNlIGJsb2NrR2FzTGltaXRcbiAgICByZXR1cm4gYm5Ub0hleCh1cHBlckdhc0xpbWl0Qm4pO1xuICB9XG5cbiAgYXN5bmMgZ2V0QnVmZmVyZWRHYXNMaW1pdCh0eE1ldGEsIG11bHRpcGxpZXIpIHtcbiAgICBjb25zdCB7IGJsb2NrR2FzTGltaXQsIGVzdGltYXRlZEdhc0hleCwgc2ltdWxhdGlvbkZhaWxzIH0gPVxuICAgICAgYXdhaXQgdGhpcy5hbmFseXplR2FzVXNhZ2UodHhNZXRhKTtcbiAgICAvLyBhZGQgYWRkaXRpb25hbCBnYXMgYnVmZmVyIHRvIG91ciBlc3RpbWF0aW9uIGZvciBzYWZldHlcbiAgICBjb25zdCBnYXNMaW1pdCA9IHRoaXMuYWRkR2FzQnVmZmVyKFxuICAgICAgYWRkSGV4UHJlZml4KGVzdGltYXRlZEdhc0hleCksXG4gICAgICBibG9ja0dhc0xpbWl0LFxuICAgICAgbXVsdGlwbGllcixcbiAgICApO1xuICAgIHJldHVybiB7IGdhc0xpbWl0LCBzaW11bGF0aW9uRmFpbHMgfTtcbiAgfVxufVxuIiwiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdAbWV0YW1hc2svc2FmZS1ldmVudC1lbWl0dGVyJztcbmltcG9ydCB7IE9ic2VydmFibGVTdG9yZSB9IGZyb20gJ0BtZXRhbWFzay9vYnMtc3RvcmUnO1xuaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5pbXBvcnQgeyB2YWx1ZXMsIGtleUJ5LCBtYXBWYWx1ZXMsIG9taXRCeSwgcGlja0J5LCBzb3J0QnkgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGNyZWF0ZUlkIGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL3JhbmRvbS1pZCc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvblN0YXR1cyB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgTUVUQU1BU0tfQ09OVFJPTExFUl9FVkVOVFMgfSBmcm9tICcuLi8uLi9tZXRhbWFzay1jb250cm9sbGVyJztcbmltcG9ydCB7IHRyYW5zYWN0aW9uTWF0Y2hlc05ldHdvcmsgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy90cmFuc2FjdGlvbi51dGlscyc7XG5pbXBvcnQgeyBPUklHSU5fTUVUQU1BU0sgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2FwcCc7XG5pbXBvcnQgeyBOZXR3b3JrU3RhdHVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9uZXR3b3JrJztcbmltcG9ydCB7XG4gIGdlbmVyYXRlSGlzdG9yeUVudHJ5LFxuICByZXBsYXlIaXN0b3J5LFxuICBzbmFwc2hvdEZyb21UeE1ldGEsXG59IGZyb20gJy4vbGliL3R4LXN0YXRlLWhpc3RvcnktaGVscGVycyc7XG5pbXBvcnQge1xuICBnZXRGaW5hbFN0YXRlcyxcbiAgbm9ybWFsaXplQW5kVmFsaWRhdGVUeFBhcmFtcyxcbiAgdmFsaWRhdGVDb25maXJtZWRFeHRlcm5hbFRyYW5zYWN0aW9uLFxufSBmcm9tICcuL2xpYi91dGlsJztcblxuZXhwb3J0IGNvbnN0IEVSUk9SX1NVQk1JVFRJTkcgPVxuICAnVGhlcmUgd2FzIGFuIGVycm9yIHdoZW4gcmVzdWJtaXR0aW5nIHRoaXMgdHJhbnNhY3Rpb24uJztcbi8qKlxuICogVHJhbnNhY3Rpb25TdGF0dXNlcyByZWltcG9ydGVkIGZyb20gdGhlIHNoYXJlZCB0cmFuc2FjdGlvbiBjb25zdGFudHMgZmlsZVxuICpcbiAqIEB0eXBlZGVmIHtpbXBvcnQoXG4gKiAgJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdHJhbnNhY3Rpb24nXG4gKiApLlRyYW5zYWN0aW9uU3RhdHVzU3RyaW5nfSBUcmFuc2FjdGlvblN0YXR1c1N0cmluZ1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy90cmFuc2FjdGlvbicpLlR4UGFyYW1zfSBUeFBhcmFtc1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydChcbiAqICAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy90cmFuc2FjdGlvbidcbiAqICkuVHJhbnNhY3Rpb25NZXRhfSBUcmFuc2FjdGlvbk1ldGFcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFRyYW5zYWN0aW9uU3RhdGVcbiAqIEBwcm9wZXJ0eSB7UmVjb3JkPHN0cmluZywgVHJhbnNhY3Rpb25NZXRhPn0gdHJhbnNhY3Rpb25zIC0gVHJhbnNhY3Rpb25NZXRhXG4gKiAga2V5ZWQgYnkgdGhlIHRyYW5zYWN0aW9uJ3MgaWQuXG4gKi9cblxuLyoqXG4gKiBUcmFuc2FjdGlvblN0YXRlTWFuYWdlciBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHN0YXRlIG9mIGEgdHJhbnNhY3Rpb24gYW5kXG4gKiBzdG9yaW5nIHRoZSB0cmFuc2FjdGlvbi4gSXQgYWxzbyBoYXMgc29tZSBjb252ZW5pZW5jZSBtZXRob2RzIGZvciBmaW5kaW5nXG4gKiBzdWJzZXRzIG9mIHRyYW5zYWN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0c1xuICogQHBhcmFtIHtUcmFuc2FjdGlvblN0YXRlfSBbb3B0cy5pbml0U3RhdGU9eyB0cmFuc2FjdGlvbnM6IHt9IH1dIC0gaW5pdGlhbFxuICogIHRyYW5zYWN0aW9ucyBsaXN0IGtleWVkIGJ5IGlkXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMudHhIaXN0b3J5TGltaXRdIC0gbGltaXQgZm9yIGhvdyBtYW55IGZpbmlzaGVkXG4gKiAgdHJhbnNhY3Rpb25zIGNhbiBoYW5nIGFyb3VuZCBpbiBzdGF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0cy5nZXROZXR3b3JrSWQgLSBHZXQgdGhlIGN1cnJlbnQgbmV0d29yayBJZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdHMuZ2V0TmV0d29ya1N0YXR1cyAtIEdldCB0aGUgY3VycmVudCBuZXR3b3JrIHN0YXR1cy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhbnNhY3Rpb25TdGF0ZU1hbmFnZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgaW5pdFN0YXRlLFxuICAgIHR4SGlzdG9yeUxpbWl0LFxuICAgIGdldE5ldHdvcmtJZCxcbiAgICBnZXROZXR3b3JrU3RhdHVzLFxuICAgIGdldEN1cnJlbnRDaGFpbklkLFxuICB9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuc3RvcmUgPSBuZXcgT2JzZXJ2YWJsZVN0b3JlKHtcbiAgICAgIHRyYW5zYWN0aW9uczoge30sXG4gICAgICAuLi5pbml0U3RhdGUsXG4gICAgfSk7XG4gICAgdGhpcy50eEhpc3RvcnlMaW1pdCA9IHR4SGlzdG9yeUxpbWl0O1xuICAgIHRoaXMuZ2V0TmV0d29ya0lkID0gZ2V0TmV0d29ya0lkO1xuICAgIHRoaXMuZ2V0TmV0d29ya1N0YXR1cyA9IGdldE5ldHdvcmtTdGF0dXM7XG4gICAgdGhpcy5nZXRDdXJyZW50Q2hhaW5JZCA9IGdldEN1cnJlbnRDaGFpbklkO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIFRyYW5zYWN0aW9uTWV0YSBvYmplY3QgY29uc2lzdGluZyBvZiB0aGUgZmllbGRzIHJlcXVpcmVkIGZvclxuICAgKiB1c2UgdGhyb3VnaG91dCB0aGUgZXh0ZW5zaW9uLiBUaGUgYXJndW1lbnQgaGVyZSB3aWxsIG92ZXJyaWRlIGV2ZXJ5dGhpbmdcbiAgICogaW4gdGhlIHJlc3VsdGluZyB0cmFuc2FjdGlvbiBtZXRhLlxuICAgKlxuICAgKiBUT0RPOiBEb24ndCBvdmVyd3JpdGUgZXZlcnl0aGluZz9cbiAgICpcbiAgICogQHBhcmFtIHtQYXJ0aWFsPFRyYW5zYWN0aW9uTWV0YT59IG9wdHMgLSB0aGUgb2JqZWN0IHRvIHVzZSB3aGVuXG4gICAqICBvdmVyd3JpdGluZyBkZWZhdWx0IGtleXMgb2YgdGhlIFRyYW5zYWN0aW9uTWV0YVxuICAgKiBAcmV0dXJucyB7VHJhbnNhY3Rpb25NZXRhfSB0aGUgZGVmYXVsdCB0eE1ldGEgb2JqZWN0XG4gICAqL1xuICBnZW5lcmF0ZVR4TWV0YShvcHRzID0ge30pIHtcbiAgICBjb25zdCBuZXR3b3JrSWQgPSB0aGlzLmdldE5ldHdvcmtJZCgpO1xuICAgIGNvbnN0IG5ldHdvcmtTdGF0dXMgPSB0aGlzLmdldE5ldHdvcmtTdGF0dXMoKTtcbiAgICBjb25zdCBjaGFpbklkID0gdGhpcy5nZXRDdXJyZW50Q2hhaW5JZCgpO1xuICAgIGlmIChuZXR3b3JrU3RhdHVzICE9PSBOZXR3b3JrU3RhdHVzLkF2YWlsYWJsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRhTWFzayBpcyBoYXZpbmcgdHJvdWJsZSBjb25uZWN0aW5nIHRvIHRoZSBuZXR3b3JrJyk7XG4gICAgfVxuXG4gICAgbGV0IGRhcHBTdWdnZXN0ZWRHYXNGZWVzID0gbnVsbDtcblxuICAgIC8vIElmIHdlIGFyZSBkZWFsaW5nIHdpdGggYSB0cmFuc2FjdGlvbiBzdWdnZXN0ZWQgYnkgYSBkYXBwIGFuZCBub3RcbiAgICAvLyBhbiBpbnRlcm5hbGx5IGNyZWF0ZWQgbWV0YW1hc2sgdHJhbnNhY3Rpb24sIHdlIG5lZWQgdG8ga2VlcCByZWNvcmQgb2ZcbiAgICAvLyB0aGUgb3JpZ2luYWxseSBzdWJtaXR0ZWQgZ2FzUGFyYW1zLlxuICAgIGlmIChcbiAgICAgIG9wdHMudHhQYXJhbXMgJiZcbiAgICAgIHR5cGVvZiBvcHRzLm9yaWdpbiA9PT0gJ3N0cmluZycgJiZcbiAgICAgIG9wdHMub3JpZ2luICE9PSBPUklHSU5fTUVUQU1BU0tcbiAgICApIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0cy50eFBhcmFtcy5nYXNQcmljZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZGFwcFN1Z2dlc3RlZEdhc0ZlZXMgPSB7XG4gICAgICAgICAgZ2FzUHJpY2U6IG9wdHMudHhQYXJhbXMuZ2FzUHJpY2UsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0eXBlb2Ygb3B0cy50eFBhcmFtcy5tYXhGZWVQZXJHYXMgIT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIHR5cGVvZiBvcHRzLnR4UGFyYW1zLm1heFByaW9yaXR5RmVlUGVyR2FzICE9PSAndW5kZWZpbmVkJ1xuICAgICAgKSB7XG4gICAgICAgIGRhcHBTdWdnZXN0ZWRHYXNGZWVzID0ge1xuICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiBvcHRzLnR4UGFyYW1zLm1heFByaW9yaXR5RmVlUGVyR2FzLFxuICAgICAgICAgIG1heEZlZVBlckdhczogb3B0cy50eFBhcmFtcy5tYXhGZWVQZXJHYXMsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0cy50eFBhcmFtcy5nYXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRhcHBTdWdnZXN0ZWRHYXNGZWVzID0ge1xuICAgICAgICAgIC4uLmRhcHBTdWdnZXN0ZWRHYXNGZWVzLFxuICAgICAgICAgIGdhczogb3B0cy50eFBhcmFtcy5nYXMsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBjcmVhdGVJZCgpLFxuICAgICAgdGltZTogbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICBzdGF0dXM6IFRyYW5zYWN0aW9uU3RhdHVzLnVuYXBwcm92ZWQsXG4gICAgICBtZXRhbWFza05ldHdvcmtJZDogbmV0d29ya0lkLFxuICAgICAgb3JpZ2luYWxHYXNFc3RpbWF0ZTogb3B0cy50eFBhcmFtcz8uZ2FzLFxuICAgICAgdXNlckVkaXRlZEdhc0xpbWl0OiBmYWxzZSxcbiAgICAgIGNoYWluSWQsXG4gICAgICBsb2FkaW5nRGVmYXVsdHM6IHRydWUsXG4gICAgICBkYXBwU3VnZ2VzdGVkR2FzRmVlcyxcbiAgICAgIHNlbmRGbG93SGlzdG9yeTogW10sXG4gICAgICAuLi5vcHRzLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB1bmFwcHJvdmVkIHRyYW5zYWN0aW9ucyBmb3IgdGhlIGN1cnJlbnRcbiAgICogbmV0d29yay4gVGhpcyBpcyB0aGUgb25seSB0cmFuc2FjdGlvbiBmZXRjaGluZyBtZXRob2QgdGhhdCByZXR1cm5zIGFuXG4gICAqIG9iamVjdCwgc28gaXQgZG9lc24ndCB1c2UgZ2V0VHJhbnNhY3Rpb25zIGxpa2UgZXZlcnl0aGluZyBlbHNlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UmVjb3JkPHN0cmluZywgVHJhbnNhY3Rpb25NZXRhPn0gVW5hcHByb3ZlZCB0cmFuc2FjdGlvbnMga2V5ZWRcbiAgICogIGJ5IGlkXG4gICAqL1xuICBnZXRVbmFwcHJvdmVkVHhMaXN0KCkge1xuICAgIGNvbnN0IGNoYWluSWQgPSB0aGlzLmdldEN1cnJlbnRDaGFpbklkKCk7XG4gICAgY29uc3QgbmV0d29ya0lkID0gdGhpcy5nZXROZXR3b3JrSWQoKTtcbiAgICByZXR1cm4gcGlja0J5KFxuICAgICAgdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnRyYW5zYWN0aW9ucyxcbiAgICAgICh0cmFuc2FjdGlvbikgPT5cbiAgICAgICAgdHJhbnNhY3Rpb24uc3RhdHVzID09PSBUcmFuc2FjdGlvblN0YXR1cy51bmFwcHJvdmVkICYmXG4gICAgICAgIHRyYW5zYWN0aW9uTWF0Y2hlc05ldHdvcmsodHJhbnNhY3Rpb24sIGNoYWluSWQsIG5ldHdvcmtJZCksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIGFwcHJvdmVkIHRyYW5zYWN0aW9ucyBmb3IgdGhlIGN1cnJlbnQgbmV0d29yay4gSWYgYW4gYWRkcmVzcyBpc1xuICAgKiBwcm92aWRlZCwgdGhlIGxpc3Qgd2lsbCBiZSBmdXJ0aGVyIHJlZmluZWQgdG8gb25seSB0aG9zZSB0cmFuc2FjdGlvbnNcbiAgICogb3JpZ2luYXRpbmcgZnJvbSB0aGUgc3VwcGxpZWQgYWRkcmVzcy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFthZGRyZXNzXSAtIGhleCBwcmVmaXhlZCBhZGRyZXNzIHRvIGZpbmQgdHJhbnNhY3Rpb25zIGZvci5cbiAgICogQHJldHVybnMge1RyYW5zYWN0aW9uTWV0YVtdfSB0aGUgZmlsdGVyZWQgbGlzdCBvZiB0cmFuc2FjdGlvbnNcbiAgICovXG4gIGdldEFwcHJvdmVkVHJhbnNhY3Rpb25zKGFkZHJlc3MpIHtcbiAgICBjb25zdCBzZWFyY2hDcml0ZXJpYSA9IHsgc3RhdHVzOiBUcmFuc2FjdGlvblN0YXR1cy5hcHByb3ZlZCB9O1xuICAgIGlmIChhZGRyZXNzKSB7XG4gICAgICBzZWFyY2hDcml0ZXJpYS5mcm9tID0gYWRkcmVzcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0VHJhbnNhY3Rpb25zKHsgc2VhcmNoQ3JpdGVyaWEgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCBwZW5kaW5nIHRyYW5zYWN0aW9ucyBmb3IgdGhlIGN1cnJlbnQgbmV0d29yay4gSWYgYW4gYWRkcmVzcyBpc1xuICAgKiBwcm92aWRlZCwgdGhlIGxpc3Qgd2lsbCBiZSBmdXJ0aGVyIHJlZmluZWQgdG8gb25seSB0aG9zZSB0cmFuc2FjdGlvbnNcbiAgICogb3JpZ2luYXRpbmcgZnJvbSB0aGUgc3VwcGxpZWQgYWRkcmVzcy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFthZGRyZXNzXSAtIGhleCBwcmVmaXhlZCBhZGRyZXNzIHRvIGZpbmQgdHJhbnNhY3Rpb25zIGZvci5cbiAgICogQHJldHVybnMge1RyYW5zYWN0aW9uTWV0YVtdfSB0aGUgZmlsdGVyZWQgbGlzdCBvZiB0cmFuc2FjdGlvbnNcbiAgICovXG4gIGdldFBlbmRpbmdUcmFuc2FjdGlvbnMoYWRkcmVzcykge1xuICAgIGNvbnN0IHNlYXJjaENyaXRlcmlhID0geyBzdGF0dXM6IFRyYW5zYWN0aW9uU3RhdHVzLnN1Ym1pdHRlZCB9O1xuICAgIGlmIChhZGRyZXNzKSB7XG4gICAgICBzZWFyY2hDcml0ZXJpYS5mcm9tID0gYWRkcmVzcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0VHJhbnNhY3Rpb25zKHsgc2VhcmNoQ3JpdGVyaWEgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCBjb25maXJtZWQgdHJhbnNhY3Rpb25zIGZvciB0aGUgY3VycmVudCBuZXR3b3JrLiBJZiBhbiBhZGRyZXNzIGlzXG4gICAqIHByb3ZpZGVkLCB0aGUgbGlzdCB3aWxsIGJlIGZ1cnRoZXIgcmVmaW5lZCB0byBvbmx5IHRob3NlIHRyYW5zYWN0aW9uc1xuICAgKiBvcmlnaW5hdGluZyBmcm9tIHRoZSBzdXBwbGllZCBhZGRyZXNzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2FkZHJlc3NdIC0gaGV4IHByZWZpeGVkIGFkZHJlc3MgdG8gZmluZCB0cmFuc2FjdGlvbnMgZm9yLlxuICAgKiBAcmV0dXJucyB7VHJhbnNhY3Rpb25NZXRhW119IHRoZSBmaWx0ZXJlZCBsaXN0IG9mIHRyYW5zYWN0aW9uc1xuICAgKi9cbiAgZ2V0Q29uZmlybWVkVHJhbnNhY3Rpb25zKGFkZHJlc3MpIHtcbiAgICBjb25zdCBzZWFyY2hDcml0ZXJpYSA9IHsgc3RhdHVzOiBUcmFuc2FjdGlvblN0YXR1cy5jb25maXJtZWQgfTtcbiAgICBpZiAoYWRkcmVzcykge1xuICAgICAgc2VhcmNoQ3JpdGVyaWEuZnJvbSA9IGFkZHJlc3M7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFRyYW5zYWN0aW9ucyh7IHNlYXJjaENyaXRlcmlhIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0cmFuc2FjdGlvbiB3aXRoIHByb3ZpZGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2FjdGlvbklkXVxuICAgKiBAcmV0dXJucyB7VHJhbnNhY3Rpb25NZXRhfSB0aGUgZmlsdGVyZWQgdHJhbnNhY3Rpb25cbiAgICovXG4gIGdldFRyYW5zYWN0aW9uV2l0aEFjdGlvbklkKGFjdGlvbklkKSB7XG4gICAgcmV0dXJuIHZhbHVlcyhcbiAgICAgIHBpY2tCeShcbiAgICAgICAgdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnRyYW5zYWN0aW9ucyxcbiAgICAgICAgKHRyYW5zYWN0aW9uKSA9PiB0cmFuc2FjdGlvbi5hY3Rpb25JZCA9PT0gYWN0aW9uSWQsXG4gICAgICApLFxuICAgIClbMF07XG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgdHhNZXRhIHRvIHRoZSBsaXN0IG9mIHRyYW5zYWN0aW9ucyBpbiB0aGUgc3RvcmUuXG4gICAqIGlmIHRoZSBsaXN0IGlzIG92ZXIgdHhIaXN0b3J5TGltaXQgaXQgd2lsbCByZW1vdmUgYSB0cmFuc2FjdGlvbiB0aGF0XG4gICAqIGlzIGluIGl0cyBmaW5hbCBzdGF0ZS5cbiAgICogaXQgd2lsbCBhbHNvIGFkZCB0aGUga2V5IGBoaXN0b3J5YCB0byB0aGUgdHhNZXRhIHdpdGggdGhlIHNuYXAgc2hvdCBvZlxuICAgKiB0aGUgb3JpZ2luYWwgb2JqZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7VHJhbnNhY3Rpb25NZXRhfSB0eE1ldGEgLSBUaGUgVHJhbnNhY3Rpb25NZXRhIG9iamVjdCB0byBhZGQuXG4gICAqIEByZXR1cm5zIHtUcmFuc2FjdGlvbk1ldGF9IFRoZSBzYW1lIFRyYW5zYWN0aW9uTWV0YSwgYnV0IHdpdGggdmFsaWRhdGVkXG4gICAqICB0eFBhcmFtcyBhbmQgdHJhbnNhY3Rpb24gaGlzdG9yeS5cbiAgICovXG4gIGFkZFRyYW5zYWN0aW9uKHR4TWV0YSkge1xuICAgIC8vIG5vcm1hbGl6ZSBhbmQgdmFsaWRhdGUgdHhQYXJhbXMgaWYgcHJlc2VudFxuICAgIGlmICh0eE1ldGEudHhQYXJhbXMpIHtcbiAgICAgIHR4TWV0YS50eFBhcmFtcyA9IG5vcm1hbGl6ZUFuZFZhbGlkYXRlVHhQYXJhbXModHhNZXRhLnR4UGFyYW1zLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgdGhpcy5vbmNlKGAke3R4TWV0YS5pZH06c2lnbmVkYCwgKCkgPT4ge1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoYCR7dHhNZXRhLmlkfTpyZWplY3RlZGApO1xuICAgIH0pO1xuICAgIHRoaXMub25jZShgJHt0eE1ldGEuaWR9OnJlamVjdGVkYCwgKCkgPT4ge1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoYCR7dHhNZXRhLmlkfTpzaWduZWRgKTtcbiAgICB9KTtcbiAgICAvLyBpbml0aWFsaXplIGhpc3RvcnlcbiAgICB0eE1ldGEuaGlzdG9yeSA9IFtdO1xuICAgIC8vIGNhcHR1cmUgaW5pdGlhbCBzbmFwc2hvdCBvZiB0eE1ldGEgZm9yIGhpc3RvcnlcbiAgICBjb25zdCBzbmFwc2hvdCA9IHNuYXBzaG90RnJvbVR4TWV0YSh0eE1ldGEpO1xuICAgIHR4TWV0YS5oaXN0b3J5LnB1c2goc25hcHNob3QpO1xuXG4gICAgY29uc3QgdHJhbnNhY3Rpb25zID0gdGhpcy5nZXRUcmFuc2FjdGlvbnMoe1xuICAgICAgZmlsdGVyVG9DdXJyZW50TmV0d29yazogZmFsc2UsXG4gICAgfSk7XG4gICAgY29uc3QgeyB0eEhpc3RvcnlMaW1pdCB9ID0gdGhpcztcblxuICAgIC8vIGNoZWNrcyBpZiB0aGUgbGVuZ3RoIG9mIHRoZSB0eCBoaXN0b3J5IGlzIGxvbmdlciB0aGVuIGRlc2lyZWQgcGVyc2lzdGVuY2VcbiAgICAvLyBsaW1pdCBhbmQgdGhlbiBpZiBpdCBpcyByZW1vdmVzIHRoZSBvbGRlc3QgY29uZmlybWVkIG9yIHJlamVjdGVkIHR4LlxuICAgIC8vIFBlbmRpbmcgb3IgdW5hcHByb3ZlZCB0cmFuc2FjdGlvbnMgd2lsbCBub3QgYmUgcmVtb3ZlZCBieSB0aGlzXG4gICAgLy8gb3BlcmF0aW9uLiBGb3Igc2FmZXR5IG9mIHByZXNlbnRpbmcgYSBmdWxseSBmdW5jdGlvbmFsIHRyYW5zYWN0aW9uIFVJXG4gICAgLy8gcmVwcmVzZW50YXRpb24sIHRoaXMgZnVuY3Rpb24gd2lsbCBub3QgYnJlYWsgYXBhcnQgdHJhbnNhY3Rpb25zIHdpdGggdGhlXG4gICAgLy8gc2FtZSBub25jZSwgcGVyIG5ldHdvcmsuIE5vdCBhY2NvdW50aW5nIGZvciB0cmFuc2FjdGlvbnMgb2YgdGhlIHNhbWVcbiAgICAvLyBub25jZSBhbmQgbmV0d29yayBjb21ibyBjYW4gcmVzdWx0IGluIGNvbmZ1c2luZyBvciBicm9rZW4gZXhwZXJpZW5jZXNcbiAgICAvLyBpbiB0aGUgVUkuXG4gICAgLy9cbiAgICAvLyBUT0RPOiB3ZSBhcmUgYWxyZWFkeSBsaW1pdGluZyB3aGF0IHdlIHNlbmQgdG8gdGhlIFVJLCBhbmQgaW4gdGhlIGZ1dHVyZVxuICAgIC8vIHdlIHdpbGwgc2VuZCBVSSBvbmx5IGNvbGxlY3RlZCBncm91cHMgb2YgdHJhbnNhY3Rpb25zICpwZXIgcGFnZSogc28gYXRcbiAgICAvLyBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUsIHRoaXMgcGVyc2lzdGVuY2UgbGltaXQgY2FuIGJlIGFkanVzdGVkLiBXaGVuXG4gICAgLy8gd2UgZG8gdGhhdCBJIHRoaW5rIHdlIHNob3VsZCBmaWd1cmUgb3V0IGEgYmV0dGVyIHN0b3JhZ2Ugc29sdXRpb24gZm9yXG4gICAgLy8gdHJhbnNhY3Rpb24gaGlzdG9yeSBlbnRyaWVzLlxuICAgIGNvbnN0IG5vbmNlTmV0d29ya1NldCA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCB0eHNUb0RlbGV0ZSA9IHRyYW5zYWN0aW9uc1xuICAgICAgLnJldmVyc2UoKVxuICAgICAgLmZpbHRlcigodHgpID0+IHtcbiAgICAgICAgY29uc3QgeyBub25jZSwgZnJvbSB9ID0gdHgudHhQYXJhbXM7XG4gICAgICAgIGNvbnN0IHsgY2hhaW5JZCwgbWV0YW1hc2tOZXR3b3JrSWQsIHN0YXR1cyB9ID0gdHg7XG4gICAgICAgIGNvbnN0IGtleSA9IGAke25vbmNlfS0ke2NoYWluSWQgPz8gbWV0YW1hc2tOZXR3b3JrSWR9LSR7ZnJvbX1gO1xuICAgICAgICBpZiAobm9uY2VOZXR3b3JrU2V0LmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIG5vbmNlTmV0d29ya1NldC5zaXplIDwgdHhIaXN0b3J5TGltaXQgLSAxIHx8XG4gICAgICAgICAgZ2V0RmluYWxTdGF0ZXMoKS5pbmNsdWRlcyhzdGF0dXMpID09PSBmYWxzZVxuICAgICAgICApIHtcbiAgICAgICAgICBub25jZU5ldHdvcmtTZXQuYWRkKGtleSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSlcbiAgICAgIC5tYXAoKHR4KSA9PiB0eC5pZCk7XG5cbiAgICB0aGlzLl9kZWxldGVUcmFuc2FjdGlvbnModHhzVG9EZWxldGUpO1xuICAgIHRoaXMuX2FkZFRyYW5zYWN0aW9uc1RvU3RhdGUoW3R4TWV0YV0pO1xuICAgIHJldHVybiB0eE1ldGE7XG4gIH1cblxuICBhZGRFeHRlcm5hbFRyYW5zYWN0aW9uKHR4TWV0YSkge1xuICAgIGNvbnN0IGZyb21BZGRyZXNzID0gdHhNZXRhPy50eFBhcmFtcz8uZnJvbTtcbiAgICBjb25zdCBjb25maXJtZWRUcmFuc2FjdGlvbnMgPSB0aGlzLmdldENvbmZpcm1lZFRyYW5zYWN0aW9ucyhmcm9tQWRkcmVzcyk7XG4gICAgY29uc3QgcGVuZGluZ1RyYW5zYWN0aW9ucyA9IHRoaXMuZ2V0UGVuZGluZ1RyYW5zYWN0aW9ucyhmcm9tQWRkcmVzcyk7XG4gICAgdmFsaWRhdGVDb25maXJtZWRFeHRlcm5hbFRyYW5zYWN0aW9uKHtcbiAgICAgIHR4TWV0YSxcbiAgICAgIHBlbmRpbmdUcmFuc2FjdGlvbnMsXG4gICAgICBjb25maXJtZWRUcmFuc2FjdGlvbnMsXG4gICAgfSk7XG4gICAgdGhpcy5fYWRkVHJhbnNhY3Rpb25zVG9TdGF0ZShbdHhNZXRhXSk7XG4gICAgcmV0dXJuIHR4TWV0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdHhJZFxuICAgKiBAcmV0dXJucyB7VHJhbnNhY3Rpb25NZXRhfSB0aGUgdHhNZXRhIHdobyBtYXRjaGVzIHRoZSBnaXZlbiBpZCBpZiBub25lIGZvdW5kXG4gICAqIGZvciB0aGUgbmV0d29yayByZXR1cm5zIHVuZGVmaW5lZFxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb24odHhJZCkge1xuICAgIGNvbnN0IHsgdHJhbnNhY3Rpb25zIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uc1t0eElkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1cGRhdGVzIHRoZSB0eE1ldGEgaW4gdGhlIGxpc3QgYW5kIGFkZHMgYSBoaXN0b3J5IGVudHJ5XG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0eE1ldGEgLSB0aGUgdHhNZXRhIHRvIHVwZGF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW25vdGVdIC0gYSBub3RlIGFib3V0IHRoZSB1cGRhdGUgZm9yIGhpc3RvcnlcbiAgICovXG4gIHVwZGF0ZVRyYW5zYWN0aW9uKHR4TWV0YSwgbm90ZSkge1xuICAgIC8vIG5vcm1hbGl6ZSBhbmQgdmFsaWRhdGUgdHhQYXJhbXMgaWYgcHJlc2VudFxuICAgIGlmICh0eE1ldGEudHhQYXJhbXMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHR4TWV0YS50eFBhcmFtcyA9IG5vcm1hbGl6ZUFuZFZhbGlkYXRlVHhQYXJhbXModHhNZXRhLnR4UGFyYW1zLCBmYWxzZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAodHhNZXRhLndhcm5pbmcubWVzc2FnZSA9PT0gRVJST1JfU1VCTUlUVElORykge1xuICAgICAgICAgIHRoaXMuc2V0VHhTdGF0dXNGYWlsZWQodHhNZXRhLmlkLCBlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fdXBkYXRlVHJhbnNhY3Rpb25IaXN0b3J5KHR4TWV0YSwgbm90ZSk7XG4gIH1cblxuICBfdXBkYXRlVHJhbnNhY3Rpb25IaXN0b3J5KHR4TWV0YSwgbm90ZSkge1xuICAgIC8vIGNyZWF0ZSB0eE1ldGEgc25hcHNob3QgZm9yIGhpc3RvcnlcbiAgICBjb25zdCBjdXJyZW50U3RhdGUgPSBzbmFwc2hvdEZyb21UeE1ldGEodHhNZXRhKTtcbiAgICAvLyByZWNvdmVyIHByZXZpb3VzIHR4IHN0YXRlIG9ialxuICAgIGNvbnN0IHByZXZpb3VzU3RhdGUgPSByZXBsYXlIaXN0b3J5KHR4TWV0YS5oaXN0b3J5KTtcbiAgICAvLyBnZW5lcmF0ZSBoaXN0b3J5IGVudHJ5IGFuZCBhZGQgdG8gaGlzdG9yeVxuICAgIGNvbnN0IGVudHJ5ID0gZ2VuZXJhdGVIaXN0b3J5RW50cnkocHJldmlvdXNTdGF0ZSwgY3VycmVudFN0YXRlLCBub3RlKTtcbiAgICBpZiAoZW50cnkubGVuZ3RoKSB7XG4gICAgICB0eE1ldGEuaGlzdG9yeS5wdXNoKGVudHJ5KTtcbiAgICB9XG5cbiAgICAvLyBjb21taXQgdHhNZXRhIHRvIHN0YXRlXG4gICAgY29uc3QgdHhJZCA9IHR4TWV0YS5pZDtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIHRyYW5zYWN0aW9uczoge1xuICAgICAgICAuLi50aGlzLnN0b3JlLmdldFN0YXRlKCkudHJhbnNhY3Rpb25zLFxuICAgICAgICBbdHhJZF06IHR4TWV0YSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2VhcmNoQ3JpdGVyaWEgY2FuIHNlYXJjaCBpbiBhbnkga2V5IGluIFR4UGFyYW1zIG9yIHRoZSBiYXNlXG4gICAqIFRyYW5zYWN0aW9uTWV0YS4gVGhpcyB0eXBlIHJlcHJlc2VudHMgYW55IGtleSBvbiBlaXRoZXIgb2YgdGhvc2UgdHdvXG4gICAqIHR5cGVzLlxuICAgKlxuICAgKiBAdHlwZWRlZiB7VHhQYXJhbXNba2V5b2YgVHhQYXJhbXNdIHwgVHJhbnNhY3Rpb25NZXRhW2tleW9mIFRyYW5zYWN0aW9uTWV0YV19IFNlYXJjaGFibGVLZXlzXG4gICAqL1xuXG4gIC8qKlxuICAgKiBQcmVkaWNhdGVzIGNhbiBlaXRoZXIgYmUgc3RyaWN0IHZhbHVlcywgd2hpY2ggaXMgc2hvcnRoYW5kIGZvciB1c2luZ1xuICAgKiBzdHJpY3QgZXF1YWxpdHksIG9yIGEgbWV0aG9kIHRoYXQgcmVjZWl2ZXMgaGUgdmFsdWUgb2YgdGhlIHNwZWNpZmllZCBrZXlcbiAgICogYW5kIHJldHVybnMgYSBib29sZWFuLlxuICAgKlxuICAgKiBAdHlwZWRlZiB7KHY6IHVua25vd24pID0+IGJvb2xlYW4gfCB1bmtub3dufSBGaWx0ZXJQcmVkaWNhdGVcbiAgICovXG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGEgbGlzdCBvZiB0cmFuc2FjdGlvbnMgZnJvbSBzdGF0ZS4gQnkgZGVmYXVsdCB0aGlzIHdpbGwgcmV0dXJuXG4gICAqIHRoZSBmdWxsIGxpc3Qgb2YgVHJhbnNhY3Rpb25zIGZvciB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGNoYWluL25ldHdvcmsuXG4gICAqIEFkZGl0aW9uYWwgb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgdG8gY2hhbmdlIHdoYXQgaXMgaW5jbHVkZWQgaW4gdGhlIGZpbmFsXG4gICAqIGxpc3QuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRzIC0gb3B0aW9ucyB0byBjaGFuZ2UgZmlsdGVyIGJlaGF2aW9yXG4gICAqIEBwYXJhbSB7UmVjb3JkPFNlYXJjaGFibGVLZXlzLCBGaWx0ZXJQcmVkaWNhdGU+fSBbb3B0cy5zZWFyY2hDcml0ZXJpYV0gLVxuICAgKiAgYW4gb2JqZWN0IHdpdGgga2V5cyB0aGF0IG1hdGNoIGtleXMgaW4gVHJhbnNhY3Rpb25NZXRhIG9yIFR4UGFyYW1zLCBhbmRcbiAgICogIHZhbHVlcyB0aGF0IGFyZSBwcmVkaWNhdGVzLiBQcmVkaWNhdGVzIGNhbiBlaXRoZXIgYmUgc3RyaWN0IHZhbHVlcyxcbiAgICogIHdoaWNoIGlzIHNob3J0aGFuZCBmb3IgdXNpbmcgc3RyaWN0IGVxdWFsaXR5LCBvciBhIG1ldGhvZCB0aGF0IHJlY2VpdmVzXG4gICAqICB0aGUgdmFsdWUgb2YgdGhlIHNwZWNpZmllZCBrZXkgYW5kIHJldHVybnMgYSBib29sZWFuLiBUaGUgdHJhbnNhY3Rpb25cbiAgICogIGxpc3Qgd2lsbCBiZSBmaWx0ZXJlZCB0byBvbmx5IHRob3NlIGl0ZW1zIHRoYXQgdGhlIHByZWRpY2F0ZSByZXR1cm5zXG4gICAqICB0cnV0aHkgZm9yLiAqKkhJTlQqKjogYGVycjogdW5kZWZpbmVkYCBpcyBsaWtlIGxvb2tpbmcgZm9yIGEgdHggd2l0aCBub1xuICAgKiAgZXJyLiBzbyB5b3UgY2FuIGFsc28gc2VhcmNoIHR4cyB0aGF0IGRvbid0IGhhdmUgc29tZXRoaW5nIGFzIHdlbGwgYnlcbiAgICogIHNldHRpbmcgdGhlIHZhbHVlIGFzIHVuZGVmaW5lZC5cbiAgICogQHBhcmFtIHtUcmFuc2FjdGlvbk1ldGFbXX0gW29wdHMuaW5pdGlhbExpc3RdIC0gSWYgcHJvdmlkZWQgdGhlIGZpbHRlcmluZ1xuICAgKiAgd2lsbCBvY2N1ciBvbiB0aGUgcHJvdmlkZWQgbGlzdC4gQnkgZGVmYXVsdCB0aGlzIHdpbGwgYmUgdGhlIGZ1bGwgbGlzdFxuICAgKiAgZnJvbSBzdGF0ZSBzb3J0ZWQgYnkgdGltZSBBU0MuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuZmlsdGVyVG9DdXJyZW50TmV0d29ya10gLSBGaWx0ZXIgdHJhbnNhY3Rpb25cbiAgICogIGxpc3QgdG8gb25seSB0aG9zZSB0aGF0IG9jY3VycmVkIG9uIHRoZSBjdXJyZW50IGNoYWluIG9yIG5ldHdvcmsuXG4gICAqICBEZWZhdWx0cyB0byB0cnVlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMubGltaXRdIC0gbGltaXQgdGhlIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgcmV0dXJuZWRcbiAgICogIHRvIE4gdW5pcXVlIG5vbmNlcy5cbiAgICogQHJldHVybnMge1RyYW5zYWN0aW9uTWV0YVtdfSBUaGUgVHJhbnNhY3Rpb25NZXRhIG9iamVjdHMgdGhhdCBhbGwgcHJvdmlkZWRcbiAgICogIHByZWRpY2F0ZXMgcmV0dXJuIHRydXRoeSBmb3IuXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbnMoe1xuICAgIHNlYXJjaENyaXRlcmlhID0ge30sXG4gICAgaW5pdGlhbExpc3QsXG4gICAgZmlsdGVyVG9DdXJyZW50TmV0d29yayA9IHRydWUsXG4gICAgbGltaXQsXG4gIH0gPSB7fSkge1xuICAgIGNvbnN0IGNoYWluSWQgPSB0aGlzLmdldEN1cnJlbnRDaGFpbklkKCk7XG4gICAgY29uc3QgbmV0d29ya0lkID0gdGhpcy5nZXROZXR3b3JrSWQoKTtcbiAgICAvLyBzZWFyY2hDcml0ZXJpYSBpcyBhbiBvYmplY3QgdGhhdCBtaWdodCBoYXZlIHZhbHVlcyB0aGF0IGFyZW4ndCBwcmVkaWNhdGVcbiAgICAvLyBtZXRob2RzLiBXaGVuIHByb3ZpZGluZyBhbnkgb3RoZXIgdmFsdWUgdHlwZSAoc3RyaW5nLCBudW1iZXIsIGV0YyksIHdlXG4gICAgLy8gY29uc2lkZXIgdGhpcyBzaG9ydGhhbmQgZm9yIFwiY2hlY2sgdGhlIHZhbHVlIGF0IGtleSBmb3Igc3RyaWN0IGVxdWFsaXR5XG4gICAgLy8gd2l0aCB0aGUgcHJvdmlkZWQgdmFsdWVcIi4gVG8gY29uZm9ybSB0aGlzIG9iamVjdCB0byBiZSBvbmx5IG1ldGhvZHMsIHdlXG4gICAgLy8gbWFwVmFsdWVzIChsb2Rhc2gpIHN1Y2ggdGhhdCBldmVyeSB2YWx1ZSBvbiB0aGUgb2JqZWN0IGlzIGEgbWV0aG9kIHRoYXRcbiAgICAvLyByZXR1cm5zIGEgYm9vbGVhbi5cbiAgICBjb25zdCBwcmVkaWNhdGVNZXRob2RzID0gbWFwVmFsdWVzKHNlYXJjaENyaXRlcmlhLCAocHJlZGljYXRlKSA9PiB7XG4gICAgICByZXR1cm4gdHlwZW9mIHByZWRpY2F0ZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHByZWRpY2F0ZVxuICAgICAgICA6ICh2KSA9PiB2ID09PSBwcmVkaWNhdGU7XG4gICAgfSk7XG5cbiAgICAvLyBJZiBhbiBpbml0aWFsIGxpc3QgaXMgcHJvdmlkZWQgd2UgbmVlZCB0byBjaGFuZ2UgaXQgYmFjayBpbnRvIGFuIG9iamVjdFxuICAgIC8vIGZpcnN0LCBzbyB0aGF0IGl0IG1hdGNoZXMgdGhlIHNoYXBlIG9mIG91ciBzdGF0ZS4gVGhpcyBpcyBkb25lIGJ5IHRoZVxuICAgIC8vIGxvZGFzaCBrZXlCeSBtZXRob2QuIFRoaXMgaXMgdGhlIGVkZ2UgY2FzZSBmb3IgdGhpcyBtZXRob2QsIHR5cGljYWxseVxuICAgIC8vIGluaXRpYWxMaXN0IHdpbGwgYmUgdW5kZWZpbmVkLlxuICAgIGNvbnN0IHRyYW5zYWN0aW9uc1RvRmlsdGVyID0gaW5pdGlhbExpc3RcbiAgICAgID8ga2V5QnkoaW5pdGlhbExpc3QsICdpZCcpXG4gICAgICA6IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS50cmFuc2FjdGlvbnM7XG5cbiAgICAvLyBDb21iaW5lIHNvcnRCeSBhbmQgcGlja0J5IHRvIHRyYW5zZm9ybSBvdXIgc3RhdGUgb2JqZWN0IGludG8gYW4gYXJyYXkgb2ZcbiAgICAvLyBtYXRjaGluZyB0cmFuc2FjdGlvbnMgdGhhdCBhcmUgc29ydGVkIGJ5IHRpbWUuXG4gICAgY29uc3QgZmlsdGVyZWRUcmFuc2FjdGlvbnMgPSBzb3J0QnkoXG4gICAgICBwaWNrQnkodHJhbnNhY3Rpb25zVG9GaWx0ZXIsICh0cmFuc2FjdGlvbikgPT4ge1xuICAgICAgICAvLyBkZWZhdWx0IG1hdGNoZXNDcml0ZXJpYSB0byB0aGUgdmFsdWUgb2YgdHJhbnNhY3Rpb25NYXRjaGVzTmV0d29ya1xuICAgICAgICAvLyB3aGVuIGZpbHRlclRvQ3VycmVudE5ldHdvcmsgaXMgdHJ1ZS5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGZpbHRlclRvQ3VycmVudE5ldHdvcmsgJiZcbiAgICAgICAgICB0cmFuc2FjdGlvbk1hdGNoZXNOZXR3b3JrKHRyYW5zYWN0aW9uLCBjaGFpbklkLCBuZXR3b3JrSWQpID09PSBmYWxzZVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBwcmVkaWNhdGVNZXRob2RzIGtleXMgdG8gY2hlY2sgaWYgdGhlIHRyYW5zYWN0aW9uXG4gICAgICAgIC8vIG1hdGNoZXMgdGhlIHNlYXJjaENyaXRlcmlhXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgcHJlZGljYXRlXSBvZiBPYmplY3QuZW50cmllcyhwcmVkaWNhdGVNZXRob2RzKSkge1xuICAgICAgICAgIC8vIFdlIHJldHVybiBmYWxzZSBlYXJseSBhcyBzb29uIGFzIHdlIGtub3cgdGhhdCBvbmUgb2YgdGhlIHNwZWNpZmllZFxuICAgICAgICAgIC8vIHNlYXJjaCBjcml0ZXJpYSBkbyBub3QgbWF0Y2ggdGhlIHRyYW5zYWN0aW9uLiBUaGlzIHByZXZlbnRzXG4gICAgICAgICAgLy8gbmVlZGxlc3NseSBjaGVja2luZyBhbGwgY3JpdGVyaWEgd2hlbiB3ZSBhbHJlYWR5IGtub3cgdGhlIGNyaXRlcmlhXG4gICAgICAgICAgLy8gYXJlIG5vdCBmdWxseSBzYXRpc2ZpZWQuIFdlIGNoZWNrIGJvdGggdHhQYXJhbXMgYW5kIHRoZSBiYXNlXG4gICAgICAgICAgLy8gb2JqZWN0IGFzIHByZWRpY2F0ZSBrZXlzIGNhbiBiZSBlaXRoZXIuXG4gICAgICAgICAgaWYgKGtleSBpbiB0cmFuc2FjdGlvbi50eFBhcmFtcykge1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZSh0cmFuc2FjdGlvbi50eFBhcmFtc1trZXldKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAocHJlZGljYXRlKHRyYW5zYWN0aW9uW2tleV0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSksXG4gICAgICAndGltZScsXG4gICAgKTtcbiAgICBpZiAobGltaXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gV2UgbmVlZCB0byBoYXZlIGFsbCB0cmFuc2FjdGlvbnMgb2YgYSBnaXZlbiBub25jZSBpbiBvcmRlciB0byBkaXNwbGF5XG4gICAgICAvLyBuZWNlc3NhcnkgZGV0YWlscyBpbiB0aGUgVUkuIFdlIHVzZSB0aGUgc2l6ZSBvZiB0aGlzIHNldCB0byBkZXRlcm1pbmVcbiAgICAgIC8vIHdoZXRoZXIgd2UgaGF2ZSByZWFjaGVkIHRoZSBsaW1pdCBwcm92aWRlZCwgdGh1cyBlbnN1cmluZyB0aGF0IGFsbFxuICAgICAgLy8gdHJhbnNhY3Rpb25zIG9mIG5vbmNlcyB3ZSBpbmNsdWRlIHdpbGwgYmUgc2VudCB0byB0aGUgVUkuXG4gICAgICBjb25zdCBub25jZXMgPSBuZXcgU2V0KCk7XG4gICAgICBjb25zdCB0eHMgPSBbXTtcbiAgICAgIC8vIEJ5IGRlZmF1bHQsIHRoZSB0cmFuc2FjdGlvbiBsaXN0IHdlIGZpbHRlciBmcm9tIGlzIHNvcnRlZCBieSB0aW1lIEFTQy5cbiAgICAgIC8vIFRvIGVuc3VyZSB0aGF0IGZpbHRlcmVkIHJlc3VsdHMgcHJlZmVycyB0aGUgbmV3ZXN0IHRyYW5zYWN0aW9ucyB3ZVxuICAgICAgLy8gaXRlcmF0ZSBmcm9tIHJpZ2h0IHRvIGxlZnQsIGluc2VydGluZyB0cmFuc2FjdGlvbnMgaW50byBmcm9udCBvZiBhIG5ld1xuICAgICAgLy8gYXJyYXkuIFRoZSBvcmlnaW5hbCBvcmRlciBpcyBwcmVzZXJ2ZWQsIGJ1dCB3ZSBlbnN1cmUgdGhhdCBuZXdlc3QgdHhzXG4gICAgICAvLyBhcmUgcHJlZmVycmVkLlxuICAgICAgZm9yIChsZXQgaSA9IGZpbHRlcmVkVHJhbnNhY3Rpb25zLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG4gICAgICAgIGNvbnN0IHR4TWV0YSA9IGZpbHRlcmVkVHJhbnNhY3Rpb25zW2ldO1xuICAgICAgICBjb25zdCB7IG5vbmNlIH0gPSB0eE1ldGEudHhQYXJhbXM7XG4gICAgICAgIGlmICghbm9uY2VzLmhhcyhub25jZSkpIHtcbiAgICAgICAgICBpZiAobm9uY2VzLnNpemUgPCBsaW1pdCkge1xuICAgICAgICAgICAgbm9uY2VzLmFkZChub25jZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBQdXNoIHRyYW5zYWN0aW9uIGludG8gdGhlIGJlZ2lubmluZyBvZiBvdXIgYXJyYXkgdG8gZW5zdXJlIHRoZVxuICAgICAgICAvLyBvcmlnaW5hbCBvcmRlciBpcyBwcmVzZXJ2ZWQuXG4gICAgICAgIHR4cy51bnNoaWZ0KHR4TWV0YSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHhzO1xuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyZWRUcmFuc2FjdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHN0YXR1cyBvZiB0aGUgVHJhbnNhY3Rpb25NZXRhIHdpdGggcHJvdmlkZWQgaWQgdG8gJ3JlamVjdGVkJy5cbiAgICogQWZ0ZXIgc2V0dGluZyB0aGUgc3RhdHVzLCB0aGUgVHJhbnNhY3Rpb25NZXRhIGlzIGRlbGV0ZWQgZnJvbSBzdGF0ZS5cbiAgICpcbiAgICogVE9ETzogU2hvdWxkIHdlIHNob3cgaGlzdG9yaWNhbGx5IHJlamVjdGVkIHRyYW5zYWN0aW9ucyBzb21ld2hlcmUgaW4gdGhlXG4gICAqIFVJPyBTZWVtcyBsaWtlIGl0IGNvdWxkIGJlIHZhbHVhYmxlIGZvciBpbmZvcm1hdGlvbiBwdXJwb3Nlcy4gT2YgY291cnNlXG4gICAqIG9ubHkgYWZ0ZXIgbGltaXQgaXNzdWVzIGFyZSByZWR1Y2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdHhJZCAtIHRoZSB0YXJnZXQgVHJhbnNhY3Rpb25NZXRhJ3MgSWRcbiAgICovXG4gIHNldFR4U3RhdHVzUmVqZWN0ZWQodHhJZCkge1xuICAgIHRoaXMuX3NldFRyYW5zYWN0aW9uU3RhdHVzKHR4SWQsIFRyYW5zYWN0aW9uU3RhdHVzLnJlamVjdGVkKTtcbiAgICB0aGlzLl9kZWxldGVUcmFuc2FjdGlvbih0eElkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgc3RhdHVzIG9mIHRoZSBUcmFuc2FjdGlvbk1ldGEgd2l0aCBwcm92aWRlZCBpZCB0byAndW5hcHByb3ZlZCdcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHR4SWQgLSB0aGUgdGFyZ2V0IFRyYW5zYWN0aW9uTWV0YSdzIElkXG4gICAqL1xuICBzZXRUeFN0YXR1c1VuYXBwcm92ZWQodHhJZCkge1xuICAgIHRoaXMuX3NldFRyYW5zYWN0aW9uU3RhdHVzKHR4SWQsIFRyYW5zYWN0aW9uU3RhdHVzLnVuYXBwcm92ZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBzdGF0dXMgb2YgdGhlIFRyYW5zYWN0aW9uTWV0YSB3aXRoIHByb3ZpZGVkIGlkIHRvICdhcHByb3ZlZCdcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHR4SWQgLSB0aGUgdGFyZ2V0IFRyYW5zYWN0aW9uTWV0YSdzIElkXG4gICAqL1xuICBzZXRUeFN0YXR1c0FwcHJvdmVkKHR4SWQpIHtcbiAgICB0aGlzLl9zZXRUcmFuc2FjdGlvblN0YXR1cyh0eElkLCBUcmFuc2FjdGlvblN0YXR1cy5hcHByb3ZlZCk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHN0YXR1cyBvZiB0aGUgVHJhbnNhY3Rpb25NZXRhIHdpdGggcHJvdmlkZWQgaWQgdG8gJ3NpZ25lZCdcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHR4SWQgLSB0aGUgdGFyZ2V0IFRyYW5zYWN0aW9uTWV0YSdzIElkXG4gICAqL1xuICBzZXRUeFN0YXR1c1NpZ25lZCh0eElkKSB7XG4gICAgdGhpcy5fc2V0VHJhbnNhY3Rpb25TdGF0dXModHhJZCwgVHJhbnNhY3Rpb25TdGF0dXMuc2lnbmVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgc3RhdHVzIG9mIHRoZSBUcmFuc2FjdGlvbk1ldGEgd2l0aCBwcm92aWRlZCBpZCB0byAnc3VibWl0dGVkJ1xuICAgKiBhbmQgc2V0cyB0aGUgJ3N1Ym1pdHRlZFRpbWUnIHByb3BlcnR5IHdpdGggdGhlIGN1cnJlbnQgVW5peCBlcG9jaCB0aW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdHhJZCAtIHRoZSB0YXJnZXQgVHJhbnNhY3Rpb25NZXRhJ3MgSWRcbiAgICovXG4gIHNldFR4U3RhdHVzU3VibWl0dGVkKHR4SWQpIHtcbiAgICBjb25zdCB0eE1ldGEgPSB0aGlzLmdldFRyYW5zYWN0aW9uKHR4SWQpO1xuICAgIHR4TWV0YS5zdWJtaXR0ZWRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgdGhpcy51cGRhdGVUcmFuc2FjdGlvbih0eE1ldGEsICd0eFN0YXRlTWFuYWdlciAtIGFkZCBzdWJtaXR0ZWQgdGltZSBzdGFtcCcpO1xuICAgIHRoaXMuX3NldFRyYW5zYWN0aW9uU3RhdHVzKHR4SWQsIFRyYW5zYWN0aW9uU3RhdHVzLnN1Ym1pdHRlZCk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHN0YXR1cyBvZiB0aGUgVHJhbnNhY3Rpb25NZXRhIHdpdGggcHJvdmlkZWQgaWQgdG8gJ2NvbmZpcm1lZCdcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHR4SWQgLSB0aGUgdGFyZ2V0IFRyYW5zYWN0aW9uTWV0YSdzIElkXG4gICAqL1xuICBzZXRUeFN0YXR1c0NvbmZpcm1lZCh0eElkKSB7XG4gICAgdGhpcy5fc2V0VHJhbnNhY3Rpb25TdGF0dXModHhJZCwgVHJhbnNhY3Rpb25TdGF0dXMuY29uZmlybWVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgc3RhdHVzIG9mIHRoZSBUcmFuc2FjdGlvbk1ldGEgd2l0aCBwcm92aWRlZCBpZCB0byAnZHJvcHBlZCdcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHR4SWQgLSB0aGUgdGFyZ2V0IFRyYW5zYWN0aW9uTWV0YSdzIElkXG4gICAqL1xuICBzZXRUeFN0YXR1c0Ryb3BwZWQodHhJZCkge1xuICAgIHRoaXMuX3NldFRyYW5zYWN0aW9uU3RhdHVzKHR4SWQsIFRyYW5zYWN0aW9uU3RhdHVzLmRyb3BwZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBzdGF0dXMgb2YgdGhlIFRyYW5zYWN0aW9uTWV0YSB3aXRoIHByb3ZpZGVkIGlkIHRvICdmYWlsZWQnIGFuZCBwdXRcbiAgICogdGhlIGVycm9yIG9uIHRoZSBUcmFuc2FjdGlvbk1ldGEgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdHhJZCAtIHRoZSB0YXJnZXQgVHJhbnNhY3Rpb25NZXRhJ3MgSWRcbiAgICogQHBhcmFtIHtFcnJvcn0gZXJyIC0gZXJyb3Igb2JqZWN0XG4gICAqL1xuICBzZXRUeFN0YXR1c0ZhaWxlZCh0eElkLCBlcnIpIHtcbiAgICBjb25zdCBlcnJvciA9IGVyciB8fCBuZXcgRXJyb3IoJ0ludGVybmFsIG1ldGFtYXNrIGZhaWx1cmUnKTtcblxuICAgIGNvbnN0IHR4TWV0YSA9IHRoaXMuZ2V0VHJhbnNhY3Rpb24odHhJZCk7XG4gICAgdHhNZXRhLmVyciA9IHtcbiAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2U/LnRvU3RyaW5nKCkgfHwgZXJyb3IudG9TdHJpbmcoKSxcbiAgICAgIHJwYzogZXJyb3IudmFsdWUsXG4gICAgICBzdGFjazogZXJyb3Iuc3RhY2ssXG4gICAgfTtcbiAgICB0aGlzLl91cGRhdGVUcmFuc2FjdGlvbkhpc3RvcnkoXG4gICAgICB0eE1ldGEsXG4gICAgICAndHJhbnNhY3Rpb25zOnR4LXN0YXRlLW1hbmFnZXIjZmFpbCAtIGFkZCBlcnJvcicsXG4gICAgKTtcblxuICAgIHRoaXMuX3NldFRyYW5zYWN0aW9uU3RhdHVzKHR4SWQsIFRyYW5zYWN0aW9uU3RhdHVzLmZhaWxlZCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgdHJhbnNhY3Rpb25zIGZvciB0aGUgZ2l2ZW4gYWRkcmVzcyBvbiB0aGUgY3VycmVudCBuZXR3b3JrLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkcmVzcyAtIGhleCBzdHJpbmcgb2YgdGhlIGZyb20gYWRkcmVzcyBvbiB0aGUgdHhQYXJhbXNcbiAgICogIHRvIHJlbW92ZVxuICAgKi9cbiAgd2lwZVRyYW5zYWN0aW9ucyhhZGRyZXNzKSB7XG4gICAgLy8gbmV0d29yayBvbmx5IHR4XG4gICAgY29uc3QgeyB0cmFuc2FjdGlvbnMgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBjaGFpbklkID0gdGhpcy5nZXRDdXJyZW50Q2hhaW5JZCgpO1xuICAgIGNvbnN0IG5ldHdvcmtJZCA9IHRoaXMuZ2V0TmV0d29ya0lkKCk7XG5cbiAgICAvLyBVcGRhdGUgc3RhdGVcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIHRyYW5zYWN0aW9uczogb21pdEJ5KFxuICAgICAgICB0cmFuc2FjdGlvbnMsXG4gICAgICAgICh0cmFuc2FjdGlvbikgPT5cbiAgICAgICAgICB0cmFuc2FjdGlvbi50eFBhcmFtcy5mcm9tID09PSBhZGRyZXNzICYmXG4gICAgICAgICAgdHJhbnNhY3Rpb25NYXRjaGVzTmV0d29yayh0cmFuc2FjdGlvbiwgY2hhaW5JZCwgbmV0d29ya0lkKSxcbiAgICAgICksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmlsdGVycyBvdXQgdGhlIHVuYXBwcm92ZWQgdHJhbnNhY3Rpb25zIGZyb20gc3RhdGVcbiAgICovXG4gIGNsZWFyVW5hcHByb3ZlZFR4cygpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIHRyYW5zYWN0aW9uczogb21pdEJ5KFxuICAgICAgICB0aGlzLnN0b3JlLmdldFN0YXRlKCkudHJhbnNhY3Rpb25zLFxuICAgICAgICAodHJhbnNhY3Rpb24pID0+IHRyYW5zYWN0aW9uLnN0YXR1cyA9PT0gVHJhbnNhY3Rpb25TdGF0dXMudW5hcHByb3ZlZCxcbiAgICAgICksXG4gICAgfSk7XG4gIH1cblxuICAvL1xuICAvLyAgICAgICAgICAgUFJJVkFURSBNRVRIT0RTXG4gIC8vXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSB0cmFuc2FjdGlvbidzIHN0YXR1cyBpbiBzdGF0ZSwgYW5kIHRoZW4gZW1pdHMgZXZlbnRzIHRoYXQgYXJlXG4gICAqIHN1YnNjcmliZWQgdG8gZWxzZXdoZXJlLiBTZWUgYmVsb3cgZm9yIGJlc3QgZ3Vlc3NlcyBvbiB3aGVyZSBhbmQgaG93IHRoZXNlXG4gICAqIGV2ZW50cyBhcmUgcmVjZWl2ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0eElkIC0gdGhlIFRyYW5zYWN0aW9uTWV0YSBJZFxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9uU3RhdHVzU3RyaW5nfSBzdGF0dXMgLSB0aGUgc3RhdHVzIHRvIHNldCBvbiB0aGVcbiAgICogIFRyYW5zYWN0aW9uTWV0YVxuICAgKiBAZmlyZXMgdHhNZXRhLmlkOnR4TWV0YS5zdGF0dXMgLSBldmVyeSB0aW1lIGEgdHJhbnNhY3Rpb24ncyBzdGF0dXMgY2hhbmdlc1xuICAgKiAgd2UgZW1pdCB0aGUgY2hhbmdlIHBhc3NpbmcgYWxvbmcgdGhlIGlkLiBUaGlzIGRvZXMgbm90IGFwcGVhciB0byBiZSB1c2VkXG4gICAqICBvdXRzaWRlIG9mIHRoaXMgZmlsZSwgd2hpY2ggb25seSBsaXN0ZW5zIHRvIHRoaXMgdG8gdW5zdWJzY3JpYmUgbGlzdGVuZXJzXG4gICAqICBvZiA6cmVqZWN0ZWQgYW5kIDpzaWduZWQgc3RhdHVzZXMgd2hlbiB0aGUgaW52ZXJzZSBzdGF0dXMgY2hhbmdlcy4gTGlrZWx5XG4gICAqICBzYWZlIHRvIGRyb3AuXG4gICAqIEBmaXJlcyB0eDpzdGF0dXMtdXBkYXRlIC0gZXZlcnkgdGltZSBhIHRyYW5zYWN0aW9uJ3Mgc3RhdHVzIGNoYW5nZXMgd2VcbiAgICogIGVtaXQgdGhpcyBldmVudCBhbmQgcGFzcyB0eElkIGFuZCBzdGF0dXMuIFRoaXMgZXZlbnQgaXMgc3Vic2NyaWJlZCB0byBpblxuICAgKiAgdGhlIFRyYW5zYWN0aW9uQ29udHJvbGxlciBhbmQgcmUtYnJvYWRjYXN0IGJ5IHRoZSBUcmFuc2FjdGlvbkNvbnRyb2xsZXIuXG4gICAqICBJdCBpcyB1c2VkIGludGVybmFsbHkgd2l0aGluIHRoZSBUcmFuc2FjdGlvbkNvbnRyb2xsZXIgdG8gdHJ5IGFuZCB1cGRhdGVcbiAgICogIHBlbmRpbmcgdHJhbnNhY3Rpb25zIG9uIGVhY2ggbmV3IGJsb2NrIChmcm9tIGJsb2NrVHJhY2tlcikuIEl0J3MgYWxzb1xuICAgKiAgc3Vic2NyaWJlZCB0byBpbiBtZXRhbWFzay1jb250cm9sbGVyIHRvIGRpc3BsYXkgYSBicm93c2VyIG5vdGlmaWNhdGlvbiBvblxuICAgKiAgY29uZmlybWVkIG9yIGZhaWxlZCB0cmFuc2FjdGlvbnMuXG4gICAqIEBmaXJlcyB0eE1ldGEuaWQ6ZmluaXNoZWQgLSBXaGVuIGEgdHJhbnNhY3Rpb24gbW92ZXMgdG8gYSBmaW5pc2hlZCBzdGF0ZVxuICAgKiAgdGhpcyBldmVudCBpcyBlbWl0dGVkLCB3aGljaCBpcyB1c2VkIGluIHRoZSBUcmFuc2FjdGlvbkNvbnRyb2xsZXIgdG8gcGFzc1xuICAgKiAgYWxvbmcgZGV0YWlscyBvZiB0aGUgdHJhbnNhY3Rpb24gdG8gdGhlIGRhcHAgdGhhdCBzdWdnZXN0ZWQgdGhlbS4gVGhpc1xuICAgKiAgcGF0dGVybiBpcyByZXBsaWNhdGVkIGFjcm9zcyBhbGwgb2YgdGhlIG1lc3NhZ2UgbWFuYWdlcnMgYW5kIGNhbiBsaWtlbHlcbiAgICogIGJlIHN1cHBsZW1lbnRlZCBvciByZXBsYWNlZCBieSB0aGUgQXBwcm92YWxDb250cm9sbGVyLlxuICAgKiBAZmlyZXMgdXBkYXRlQmFkZ2UgLSBXaGVuIHRoZSBudW1iZXIgb2YgdHJhbnNhY3Rpb25zIGNoYW5nZXMgaW4gc3RhdGUsXG4gICAqICB0aGUgYmFkZ2UgaW4gdGhlIGJyb3dzZXIgZXh0ZW5zaW9uIGJhciBzaG91bGQgYmUgdXBkYXRlZCB0byByZWZsZWN0IHRoZVxuICAgKiAgbnVtYmVyIG9mIHBlbmRpbmcgdHJhbnNhY3Rpb25zLiBUaGlzIHBhcnRpY3VsYXIgZW1pdCBkb2Vzbid0IGFwcGVhciB0b1xuICAgKiAgYnViYmxlIHVwIGFueXdoZXJlIHRoYXQgaXMgYWN0dWFsbHkgdXNlZC4gVHJhbnNhY3Rpb25Db250cm9sbGVyIGVtaXRzXG4gICAqICB0aGlzICphbnl0aW1lIHRoZSBzdGF0ZSBjaGFuZ2VzKiwgc28gdGhpcyBpcyBwcm9iYWJseSBzdXBlcmZsdW91cy5cbiAgICovXG4gIF9zZXRUcmFuc2FjdGlvblN0YXR1cyh0eElkLCBzdGF0dXMpIHtcbiAgICBjb25zdCB0eE1ldGEgPSB0aGlzLmdldFRyYW5zYWN0aW9uKHR4SWQpO1xuXG4gICAgaWYgKCF0eE1ldGEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0eE1ldGEuc3RhdHVzID0gc3RhdHVzO1xuICAgIHRyeSB7XG4gICAgICB0aGlzLl91cGRhdGVUcmFuc2FjdGlvbkhpc3RvcnkoXG4gICAgICAgIHR4TWV0YSxcbiAgICAgICAgYHR4U3RhdGVNYW5hZ2VyOiBzZXR0aW5nIHN0YXR1cyB0byAke3N0YXR1c31gLFxuICAgICAgKTtcbiAgICAgIHRoaXMuZW1pdChgJHt0eE1ldGEuaWR9OiR7c3RhdHVzfWAsIHR4SWQpO1xuICAgICAgdGhpcy5lbWl0KGB0eDpzdGF0dXMtdXBkYXRlYCwgdHhJZCwgc3RhdHVzKTtcbiAgICAgIGlmIChcbiAgICAgICAgW1xuICAgICAgICAgIFRyYW5zYWN0aW9uU3RhdHVzLnN1Ym1pdHRlZCxcbiAgICAgICAgICBUcmFuc2FjdGlvblN0YXR1cy5yZWplY3RlZCxcbiAgICAgICAgICBUcmFuc2FjdGlvblN0YXR1cy5mYWlsZWQsXG4gICAgICAgIF0uaW5jbHVkZXMoc3RhdHVzKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZW1pdChgJHt0eE1ldGEuaWR9OmZpbmlzaGVkYCwgdHhNZXRhKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZW1pdChNRVRBTUFTS19DT05UUk9MTEVSX0VWRU5UUy5VUERBVEVfQkFER0UpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2cuZXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG9uZSBvciBtb3JlIHRyYW5zYWN0aW9ucyBpbnRvIHN0YXRlLiBUaGlzIGlzIG5vdCBpbnRlbmRlZCBmb3JcbiAgICogZXh0ZXJuYWwgdXNlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1RyYW5zYWN0aW9uTWV0YVtdfSB0cmFuc2FjdGlvbnMgLSB0aGUgbGlzdCBvZiB0cmFuc2FjdGlvbnMgdG8gc2F2ZVxuICAgKi9cbiAgX2FkZFRyYW5zYWN0aW9uc1RvU3RhdGUodHJhbnNhY3Rpb25zKSB7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICB0cmFuc2FjdGlvbnM6IHRyYW5zYWN0aW9ucy5yZWR1Y2UoKHJlc3VsdCwgbmV3VHgpID0+IHtcbiAgICAgICAgcmVzdWx0W25ld1R4LmlkXSA9IG5ld1R4O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSwgdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnRyYW5zYWN0aW9ucyksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogcmVtb3ZlcyBvbmUgdHJhbnNhY3Rpb24gZnJvbSBzdGF0ZS4gVGhpcyBpcyBub3QgaW50ZW5kZWQgZm9yIGV4dGVybmFsIHVzZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRhcmdldFRyYW5zYWN0aW9uSWQgLSB0aGUgdHJhbnNhY3Rpb24gdG8gZGVsZXRlXG4gICAqL1xuICBfZGVsZXRlVHJhbnNhY3Rpb24odGFyZ2V0VHJhbnNhY3Rpb25JZCkge1xuICAgIGNvbnN0IHsgdHJhbnNhY3Rpb25zIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgZGVsZXRlIHRyYW5zYWN0aW9uc1t0YXJnZXRUcmFuc2FjdGlvbklkXTtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHtcbiAgICAgIHRyYW5zYWN0aW9ucyxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZW1vdmVzIG11bHRpcGxlIHRyYW5zYWN0aW9uIGZyb20gc3RhdGUuIFRoaXMgaXMgbm90IGludGVuZGVkIGZvciBleHRlcm5hbCB1c2UuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyW119IHRhcmdldFRyYW5zYWN0aW9uSWRzIC0gdGhlIHRyYW5zYWN0aW9ucyB0byBkZWxldGVcbiAgICovXG4gIF9kZWxldGVUcmFuc2FjdGlvbnModGFyZ2V0VHJhbnNhY3Rpb25JZHMpIHtcbiAgICBjb25zdCB7IHRyYW5zYWN0aW9ucyB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHRhcmdldFRyYW5zYWN0aW9uSWRzLmZvckVhY2goKHRyYW5zYWN0aW9uSWQpID0+IHtcbiAgICAgIGRlbGV0ZSB0cmFuc2FjdGlvbnNbdHJhbnNhY3Rpb25JZF07XG4gICAgfSk7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7XG4gICAgICB0cmFuc2FjdGlvbnMsXG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKlxuICogU2V0cyB1cCB0d28td2F5IGNvbW11bmljYXRpb24gYmV0d2VlbiB0aGVcbiAqIG1haW5saW5lIHZlcnNpb24gb2YgZXh0ZW5zaW9uIGFuZCBGbGFzayBidWlsZFxuICogaW4gb3JkZXIgdG8gZGV0ZWN0ICYgd2FybiBpZiB0aGVyZSBhcmUgdHdvIGRpZmZlcmVudFxuICogdmVyc2lvbnMgcnVubmluZyBzaW11bHRhbmVvdXNseS5cbiAqL1xuXG5pbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnO1xuaW1wb3J0IHtcbiAgUExBVEZPUk1fQ0hST01FLFxuICBQTEFURk9STV9GSVJFRk9YLFxuICBDSFJPTUVfQlVJTERfSURTLFxuICBGSVJFRk9YX0JVSUxEX0lEUyxcbn0gZnJvbSAnLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9hcHAnO1xuaW1wb3J0IHsgZ2V0UGxhdGZvcm0gfSBmcm9tICcuL2xpYi91dGlsJztcblxuY29uc3QgTUVTU0FHRV9URVhUID0gJ2lzUnVubmluZyc7XG5cbmNvbnN0IHNob3dXYXJuaW5nID0gKCkgPT5cbiAgY29uc29sZS53YXJuKCdXYXJuaW5nISBZb3UgaGF2ZSBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgTWV0YU1hc2sgcnVubmluZyEnKTtcblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBwaW5nIG1lc3NhZ2Ugc2VudCBmcm9tIG90aGVyIGV4dGVuc2lvbi5cbiAqIERpc3BsYXlzIGNvbnNvbGUgd2FybmluZyBpZiBpdCdzIGFjdGl2ZS5cbiAqXG4gKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHJlY2VpdmVkIGZyb20gdGhlIG90aGVyIGV4dGVuc2lvblxuICovXG5leHBvcnQgY29uc3Qgb25NZXNzYWdlUmVjZWl2ZWQgPSAobWVzc2FnZSkgPT4ge1xuICBpZiAobWVzc2FnZSA9PT0gTUVTU0FHRV9URVhUKSB7XG4gICAgc2hvd1dhcm5pbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZW5kcyB0aGUgcGluZyBtZXNzYWdlIHNlbnQgdG8gb3RoZXIgZXh0ZW5zaW9ucyB0byBkZXRlY3Qgd2hldGhlciBpdCdzIGFjdGl2ZSBvciBub3QuXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVja0Zvck11bHRpcGxlVmVyc2lvbnNSdW5uaW5nID0gYXN5bmMgKCkgPT4ge1xuICBpZiAoZ2V0UGxhdGZvcm0oKSAhPT0gUExBVEZPUk1fQ0hST01FICYmIGdldFBsYXRmb3JtKCkgIT09IFBMQVRGT1JNX0ZJUkVGT1gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYnVpbGRJZHMgPVxuICAgIGdldFBsYXRmb3JtKCkgPT09IFBMQVRGT1JNX0NIUk9NRSA/IENIUk9NRV9CVUlMRF9JRFMgOiBGSVJFRk9YX0JVSUxEX0lEUztcblxuICBjb25zdCB0aGlzQnVpbGQgPSBicm93c2VyLnJ1bnRpbWUuaWQ7XG5cbiAgZm9yIChjb25zdCBpZCBvZiBidWlsZElkcykge1xuICAgIGlmIChpZCAhPT0gdGhpc0J1aWxkKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBicm93c2VyLnJ1bnRpbWUuc2VuZE1lc3NhZ2UoaWQsIE1FU1NBR0VfVEVYVCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBTaG91bGQgZG8gbm90aGluZyBpZiByZWNlaXZpbmcgZW5kIHdhcyBub3QgcmVhY2hlZCAobm8gb3RoZXIgaW5zdGFuY2VzIHJ1bm5pbmcpXG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuIiwiLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBGaXJzdFRpbWVTdGF0ZVxuICogQHByb3BlcnR5IHtvYmplY3R9IGNvbmZpZyBJbml0aWFsIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyc1xuICogQHByb3BlcnR5IHtvYmplY3R9IE5ldHdvcmtDb250cm9sbGVyIE5ldHdvcmsgY29udHJvbGxlciBzdGF0ZVxuICovXG5cbi8qKlxuICogQHR5cGUge0ZpcnN0VGltZVN0YXRlfVxuICovXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gIGNvbmZpZzoge30sXG59O1xuZXhwb3J0IGRlZmF1bHQgaW5pdGlhbFN0YXRlO1xuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZVN0b3JlIH0gZnJvbSAnQG1ldGFtYXNrL29icy1zdG9yZSc7XG5pbXBvcnQgeyBnZXRQZXJzaXN0ZW50U3RhdGUgfSBmcm9tICdAbWV0YW1hc2svYmFzZS1jb250cm9sbGVyJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAbWV0YW1hc2svYmFzZS1jb250cm9sbGVyJykuQ29udHJvbGxlck1lc3Nlbmdlcn0gQ29udHJvbGxlck1lc3NlbmdlclxuICovXG5cbi8qKlxuICogQW4gT2JzZXJ2YWJsZVN0b3JlIHRoYXQgY2FuIGNvbXBvc2VzIGEgZmxhdFxuICogc3RydWN0dXJlIG9mIGNoaWxkIHN0b3JlcyBiYXNlZCBvbiBjb25maWd1cmF0aW9uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvc2FibGVPYnNlcnZhYmxlU3RvcmUgZXh0ZW5kcyBPYnNlcnZhYmxlU3RvcmUge1xuICAvKipcbiAgICogRGVzY3JpYmVzIHdoaWNoIHN0b3JlcyBhcmUgYmVpbmcgY29tcG9zZWQuIFRoZSBrZXkgaXMgdGhlIG5hbWUgb2YgdGhlXG4gICAqIHN0b3JlLCBhbmQgdGhlIHZhbHVlIGlzIGVpdGhlciBhbiBPYnNlcmFibGVTdG9yZSwgb3IgYSBjb250cm9sbGVyIHRoYXRcbiAgICogZXh0ZW5kcyBvbmUgb2YgdGhlIHR3byBiYXNlIGNvbnRyb2xsZXJzIGluIHRoZSBgQG1ldGFtYXNrL2Jhc2UtY29udHJvbGxlcmBcbiAgICogcGFja2FnZS5cbiAgICpcbiAgICogQHR5cGUge1JlY29yZDxzdHJpbmcsIG9iamVjdD59XG4gICAqL1xuICBjb25maWcgPSB7fTtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHN0b3JlXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5jb25maWddIC0gTWFwIG9mIGludGVybmFsIHN0YXRlIGtleXMgdG8gY2hpbGQgc3RvcmVzXG4gICAqIEBwYXJhbSB7Q29udHJvbGxlck1lc3Nlbmdlcn0gb3B0aW9ucy5jb250cm9sbGVyTWVzc2VuZ2VyIC0gVGhlIGNvbnRyb2xsZXJcbiAgICogICBtZXNzZW5nZXIsIHVzZWQgZm9yIHN1YnNjcmliaW5nIHRvIGV2ZW50cyBmcm9tIEJhc2VDb250cm9sbGVyVjItYmFzZWRcbiAgICogICBjb250cm9sbGVycy5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLnN0YXRlXSAtIFRoZSBpbml0aWFsIHN0b3JlIHN0YXRlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucGVyc2lzdF0gLSBXaGV0aGVyIG9yIG5vdCB0byBhcHBseSB0aGUgcGVyc2lzdGVuY2UgZm9yIHYyIGNvbnRyb2xsZXJzXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGNvbmZpZywgY29udHJvbGxlck1lc3Nlbmdlciwgc3RhdGUsIHBlcnNpc3QgfSkge1xuICAgIHN1cGVyKHN0YXRlKTtcbiAgICB0aGlzLnBlcnNpc3QgPSBwZXJzaXN0O1xuICAgIHRoaXMuY29udHJvbGxlck1lc3NlbmdlciA9IGNvbnRyb2xsZXJNZXNzZW5nZXI7XG4gICAgaWYgKGNvbmZpZykge1xuICAgICAgdGhpcy51cGRhdGVTdHJ1Y3R1cmUoY29uZmlnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29tcG9zZXMgYSBuZXcgaW50ZXJuYWwgc3RvcmUgc3Vic2NyaXB0aW9uIHN0cnVjdHVyZVxuICAgKlxuICAgKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIG9iamVjdD59IGNvbmZpZyAtIERlc2NyaWJlcyB3aGljaCBzdG9yZXMgYXJlIGJlaW5nXG4gICAqICAgY29tcG9zZWQuIFRoZSBrZXkgaXMgdGhlIG5hbWUgb2YgdGhlIHN0b3JlLCBhbmQgdGhlIHZhbHVlIGlzIGVpdGhlciBhblxuICAgKiAgIE9ic2VyYWJsZVN0b3JlLCBvciBhIGNvbnRyb2xsZXIgdGhhdCBleHRlbmRzIG9uZSBvZiB0aGUgdHdvIGJhc2VcbiAgICogICBjb250cm9sbGVycyBpbiB0aGUgYEBtZXRhbWFzay9iYXNlLWNvbnRyb2xsZXJgIHBhY2thZ2UuXG4gICAqL1xuICB1cGRhdGVTdHJ1Y3R1cmUoY29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhjb25maWcpKSB7XG4gICAgICBpZiAoIWNvbmZpZ1trZXldKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5kZWZpbmVkICcke2tleX0nYCk7XG4gICAgICB9XG4gICAgICBjb25zdCBzdG9yZSA9IGNvbmZpZ1trZXldO1xuICAgICAgaWYgKHN0b3JlLnN1YnNjcmliZSkge1xuICAgICAgICBjb25maWdba2V5XS5zdWJzY3JpYmUoKHN0YXRlKSA9PiB7XG4gICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSh7IFtrZXldOiBzdGF0ZSB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXJNZXNzZW5nZXIuc3Vic2NyaWJlKFxuICAgICAgICAgIGAke3N0b3JlLm5hbWV9OnN0YXRlQ2hhbmdlYCxcbiAgICAgICAgICAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGxldCB1cGRhdGVkU3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBlcnNpc3QpIHtcbiAgICAgICAgICAgICAgdXBkYXRlZFN0YXRlID0gZ2V0UGVyc2lzdGVudFN0YXRlKHN0YXRlLCBjb25maWdba2V5XS5tZXRhZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKHsgW2tleV06IHVwZGF0ZWRTdGF0ZSB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZXMgYWxsIGNoaWxkIHN0b3JlIHN0YXRlIGludG8gYSBzaW5nbGUgb2JqZWN0IHJhdGhlciB0aGFuXG4gICAqIHJldHVybmluZyBhbiBvYmplY3Qga2V5ZWQgYnkgY2hpbGQgc3RvcmUgY2xhc3MgbmFtZVxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBPYmplY3QgY29udGFpbmluZyBtZXJnZWQgY2hpbGQgc3RvcmUgc3RhdGVcbiAgICovXG4gIGdldEZsYXRTdGF0ZSgpIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGxldCBmbGF0U3RhdGUgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLmNvbmZpZykpIHtcbiAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSB0aGlzLmNvbmZpZ1trZXldO1xuICAgICAgY29uc3Qgc3RhdGUgPSBjb250cm9sbGVyLmdldFN0YXRlXG4gICAgICAgID8gY29udHJvbGxlci5nZXRTdGF0ZSgpXG4gICAgICAgIDogY29udHJvbGxlci5zdGF0ZTtcbiAgICAgIGZsYXRTdGF0ZSA9IHsgLi4uZmxhdFN0YXRlLCAuLi5zdGF0ZSB9O1xuICAgIH1cbiAgICByZXR1cm4gZmxhdFN0YXRlO1xuICB9XG59XG4iLCIvKiBBY2NvdW50IFRyYWNrZXJcbiAqXG4gKiBUaGlzIG1vZHVsZSBpcyByZXNwb25zaWJsZSBmb3IgdHJhY2tpbmcgYW55IG51bWJlciBvZiBhY2NvdW50c1xuICogYW5kIGNhY2hpbmcgdGhlaXIgY3VycmVudCBiYWxhbmNlcyAmIHRyYW5zYWN0aW9uIGNvdW50cy5cbiAqXG4gKiBJdCBhbHNvIHRyYWNrcyB0cmFuc2FjdGlvbiBoYXNoZXMsIGFuZCBjaGVja3MgdGhlaXIgaW5jbHVzaW9uIHN0YXR1c1xuICogb24gZWFjaCBuZXcgYmxvY2suXG4gKi9cblxuaW1wb3J0IEV0aFF1ZXJ5IGZyb20gJ2V0aC1xdWVyeSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGVTdG9yZSB9IGZyb20gJ0BtZXRhbWFzay9vYnMtc3RvcmUnO1xuaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5pbXBvcnQgcGlmeSBmcm9tICdwaWZ5JztcbmltcG9ydCB7IFdlYjNQcm92aWRlciB9IGZyb20gJ0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycyc7XG5pbXBvcnQgeyBDb250cmFjdCB9IGZyb20gJ0BldGhlcnNwcm9qZWN0L2NvbnRyYWN0cyc7XG5pbXBvcnQgU0lOR0xFX0NBTExfQkFMQU5DRVNfQUJJIGZyb20gJ3NpbmdsZS1jYWxsLWJhbGFuY2UtY2hlY2tlci1hYmknO1xuaW1wb3J0IHtcbiAgQ0hBSU5fSURTLFxuICBMT0NBTEhPU1RfUlBDX1VSTCxcbn0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9uZXR3b3JrJztcblxuaW1wb3J0IHtcbiAgU0lOR0xFX0NBTExfQkFMQU5DRVNfQUREUkVTUyxcbiAgU0lOR0xFX0NBTExfQkFMQU5DRVNfQUREUkVTU19HT0VSTEksXG4gIFNJTkdMRV9DQUxMX0JBTEFOQ0VTX0FERFJFU1NfU0VQT0xJQSxcbiAgU0lOR0xFX0NBTExfQkFMQU5DRVNfQUREUkVTU19CU0MsXG4gIFNJTkdMRV9DQUxMX0JBTEFOQ0VTX0FERFJFU1NfT1BUSU1JU00sXG4gIFNJTkdMRV9DQUxMX0JBTEFOQ0VTX0FERFJFU1NfUE9MWUdPTixcbiAgU0lOR0xFX0NBTExfQkFMQU5DRVNfQUREUkVTU19BVkFMQU5DSEUsXG4gIFNJTkdMRV9DQUxMX0JBTEFOQ0VTX0FERFJFU1NfRkFOVE9NLFxuICBTSU5HTEVfQ0FMTF9CQUxBTkNFU19BRERSRVNTX0FSQklUUlVNLFxufSBmcm9tICcuLi9jb25zdGFudHMvY29udHJhY3RzJztcbmltcG9ydCB7IHByZXZpb3VzVmFsdWVDb21wYXJhdG9yIH0gZnJvbSAnLi91dGlsJztcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBpcyByZXNwb25zaWJsZSBmb3IgdHJhY2tpbmcgYW55IG51bWJlciBvZiBhY2NvdW50cyBhbmQgY2FjaGluZyB0aGVpciBjdXJyZW50IGJhbGFuY2VzICYgdHJhbnNhY3Rpb25cbiAqIGNvdW50cy5cbiAqXG4gKiBJdCBhbHNvIHRyYWNrcyB0cmFuc2FjdGlvbiBoYXNoZXMsIGFuZCBjaGVja3MgdGhlaXIgaW5jbHVzaW9uIHN0YXR1cyBvbiBlYWNoIG5ldyBibG9jay5cbiAqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBBY2NvdW50VHJhY2tlclxuICogQHByb3BlcnR5IHtvYmplY3R9IHN0b3JlIFRoZSBzdG9yZWQgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGFjY291bnRzIHRvIHRyYWNrLCBhcyB3ZWxsIGFzIHRoZSBjdXJyZW50IGJsb2NrJ3MgZ2FzIGxpbWl0LlxuICogQHByb3BlcnR5IHtvYmplY3R9IHN0b3JlLmFjY291bnRzIFRoZSBhY2NvdW50cyBjdXJyZW50bHkgc3RvcmVkIGluIHRoaXMgQWNjb3VudFRyYWNrZXJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdG9yZS5jdXJyZW50QmxvY2tHYXNMaW1pdCBBIGhleCBzdHJpbmcgaW5kaWNhdGluZyB0aGUgZ2FzIGxpbWl0IG9mIHRoZSBjdXJyZW50IGJsb2NrXG4gKiBAcHJvcGVydHkge29iamVjdH0gX3Byb3ZpZGVyIEEgcHJvdmlkZXIgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgRXRoUXVlcnkgaW5zdGFuY2UgdXNlZCB3aXRoaW4gdGhpcyBBY2NvdW50VHJhY2tlci5cbiAqIEBwcm9wZXJ0eSB7RXRoUXVlcnl9IF9xdWVyeSBBbiBFdGhRdWVyeSBpbnN0YW5jZSB1c2VkIHRvIGFjY2VzcyBhY2NvdW50IGluZm9ybWF0aW9uIGZyb20gdGhlIGJsb2NrY2hhaW5cbiAqIEBwcm9wZXJ0eSB7QmxvY2tUcmFja2VyfSBfYmxvY2tUcmFja2VyIEEgQmxvY2tUcmFja2VyIGluc3RhbmNlLiBOZWVkZWQgdG8gZW5zdXJlIHRoYXQgYWNjb3VudHMgYW5kIHRoZWlyIGluZm8gdXBkYXRlc1xuICogd2hlbiBhIG5ldyBibG9jayBpcyBjcmVhdGVkLlxuICogQHByb3BlcnR5IHtvYmplY3R9IF9jdXJyZW50QmxvY2tOdW1iZXIgUmVmZXJlbmNlIHRvIGEgcHJvcGVydHkgb24gdGhlIF9ibG9ja1RyYWNrZXI6IHRoZSBudW1iZXIgKGkuZS4gYW4gaWQpIG9mIHRoZSB0aGUgY3VycmVudCBibG9ja1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY2NvdW50VHJhY2tlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIE9wdGlvbnMgZm9yIGluaXRpYWxpemluZyB0aGUgY29udHJvbGxlclxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0cy5wcm92aWRlciAtIEFuIEVJUC0xMTkzIHByb3ZpZGVyIGluc3RhbmNlIHRoYXQgdXNlcyB0aGUgY3VycmVudCBnbG9iYWwgbmV0d29ya1xuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0cy5ibG9ja1RyYWNrZXIgLSBBIGJsb2NrIHRyYWNrZXIsIHdoaWNoIGVtaXRzIGV2ZW50cyBmb3IgZWFjaCBuZXcgYmxvY2tcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0cy5nZXRDdXJyZW50Q2hhaW5JZCAtIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBgY2hhaW5JZGAgZm9yIHRoZSBjdXJyZW50IGdsb2JhbCBuZXR3b3JrXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wdHMuZ2V0TmV0d29ya0lkZW50aWZpZXIgLSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgY3VycmVudCBuZXR3b3JrXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBjb25zdCBpbml0U3RhdGUgPSB7XG4gICAgICBhY2NvdW50czoge30sXG4gICAgICBjdXJyZW50QmxvY2tHYXNMaW1pdDogJycsXG4gICAgfTtcbiAgICB0aGlzLnN0b3JlID0gbmV3IE9ic2VydmFibGVTdG9yZSh7IC4uLmluaXRTdGF0ZSwgLi4ub3B0cy5pbml0U3RhdGUgfSk7XG5cbiAgICB0aGlzLnJlc2V0U3RhdGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKGluaXRTdGF0ZSk7XG4gICAgfTtcblxuICAgIHRoaXMuX3Byb3ZpZGVyID0gb3B0cy5wcm92aWRlcjtcbiAgICB0aGlzLl9xdWVyeSA9IHBpZnkobmV3IEV0aFF1ZXJ5KHRoaXMuX3Byb3ZpZGVyKSk7XG4gICAgdGhpcy5fYmxvY2tUcmFja2VyID0gb3B0cy5ibG9ja1RyYWNrZXI7XG4gICAgLy8gYmxvY2tUcmFja2VyLmN1cnJlbnRCbG9jayBtYXkgYmUgbnVsbFxuICAgIHRoaXMuX2N1cnJlbnRCbG9ja051bWJlciA9IHRoaXMuX2Jsb2NrVHJhY2tlci5nZXRDdXJyZW50QmxvY2soKTtcbiAgICB0aGlzLl9ibG9ja1RyYWNrZXIub25jZSgnbGF0ZXN0JywgKGJsb2NrTnVtYmVyKSA9PiB7XG4gICAgICB0aGlzLl9jdXJyZW50QmxvY2tOdW1iZXIgPSBibG9ja051bWJlcjtcbiAgICB9KTtcbiAgICAvLyBiaW5kIGZ1bmN0aW9uIGZvciBlYXNpZXIgbGlzdGVuZXIgc3ludGF4XG4gICAgdGhpcy5fdXBkYXRlRm9yQmxvY2sgPSB0aGlzLl91cGRhdGVGb3JCbG9jay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ2V0Q3VycmVudENoYWluSWQgPSBvcHRzLmdldEN1cnJlbnRDaGFpbklkO1xuICAgIHRoaXMuZ2V0TmV0d29ya0lkZW50aWZpZXIgPSBvcHRzLmdldE5ldHdvcmtJZGVudGlmaWVyO1xuICAgIHRoaXMucHJlZmVyZW5jZXNDb250cm9sbGVyID0gb3B0cy5wcmVmZXJlbmNlc0NvbnRyb2xsZXI7XG4gICAgdGhpcy5vbmJvYXJkaW5nQ29udHJvbGxlciA9IG9wdHMub25ib2FyZGluZ0NvbnRyb2xsZXI7XG5cbiAgICB0aGlzLm9uYm9hcmRpbmdDb250cm9sbGVyLnN0b3JlLnN1YnNjcmliZShcbiAgICAgIHByZXZpb3VzVmFsdWVDb21wYXJhdG9yKGFzeW5jIChwcmV2U3RhdGUsIGN1cnJTdGF0ZSkgPT4ge1xuICAgICAgICBjb25zdCB7IGNvbXBsZXRlZE9uYm9hcmRpbmc6IHByZXZDb21wbGV0ZWRPbmJvYXJkaW5nIH0gPSBwcmV2U3RhdGU7XG4gICAgICAgIGNvbnN0IHsgY29tcGxldGVkT25ib2FyZGluZzogY3VyckNvbXBsZXRlZE9uYm9hcmRpbmcgfSA9IGN1cnJTdGF0ZTtcbiAgICAgICAgaWYgKCFwcmV2Q29tcGxldGVkT25ib2FyZGluZyAmJiBjdXJyQ29tcGxldGVkT25ib2FyZGluZykge1xuICAgICAgICAgIHRoaXMuX3VwZGF0ZUFjY291bnRzKCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMub25ib2FyZGluZ0NvbnRyb2xsZXIuc3RvcmUuZ2V0U3RhdGUoKSksXG4gICAgKTtcblxuICAgIHRoaXMucHJlZmVyZW5jZXNDb250cm9sbGVyLnN0b3JlLnN1YnNjcmliZShcbiAgICAgIHByZXZpb3VzVmFsdWVDb21wYXJhdG9yKGFzeW5jIChwcmV2U3RhdGUsIGN1cnJTdGF0ZSkgPT4ge1xuICAgICAgICBjb25zdCB7IHNlbGVjdGVkQWRkcmVzczogcHJldlNlbGVjdGVkQWRkcmVzcyB9ID0gcHJldlN0YXRlO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgc2VsZWN0ZWRBZGRyZXNzOiBjdXJyU2VsZWN0ZWRBZGRyZXNzLFxuICAgICAgICAgIHVzZU11bHRpQWNjb3VudEJhbGFuY2VDaGVja2VyLFxuICAgICAgICB9ID0gY3VyclN0YXRlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJldlNlbGVjdGVkQWRkcmVzcyAhPT0gY3VyclNlbGVjdGVkQWRkcmVzcyAmJlxuICAgICAgICAgICF1c2VNdWx0aUFjY291bnRCYWxhbmNlQ2hlY2tlclxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLl91cGRhdGVBY2NvdW50cygpO1xuICAgICAgICB9XG4gICAgICB9LCB0aGlzLm9uYm9hcmRpbmdDb250cm9sbGVyLnN0b3JlLmdldFN0YXRlKCkpLFxuICAgICk7XG4gICAgdGhpcy5ldGhlcnNQcm92aWRlciA9IG5ldyBXZWIzUHJvdmlkZXIodGhpcy5fcHJvdmlkZXIpO1xuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgLy8gcmVtb3ZlIGZpcnN0IHRvIGF2b2lkIGRvdWJsZSBhZGRcbiAgICB0aGlzLl9ibG9ja1RyYWNrZXIucmVtb3ZlTGlzdGVuZXIoJ2xhdGVzdCcsIHRoaXMuX3VwZGF0ZUZvckJsb2NrKTtcbiAgICAvLyBhZGQgbGlzdGVuZXJcbiAgICB0aGlzLl9ibG9ja1RyYWNrZXIuYWRkTGlzdGVuZXIoJ2xhdGVzdCcsIHRoaXMuX3VwZGF0ZUZvckJsb2NrKTtcbiAgICAvLyBmZXRjaCBhY2NvdW50IGJhbGFuY2VzXG4gICAgdGhpcy5fdXBkYXRlQWNjb3VudHMoKTtcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgLy8gcmVtb3ZlIGxpc3RlbmVyXG4gICAgdGhpcy5fYmxvY2tUcmFja2VyLnJlbW92ZUxpc3RlbmVyKCdsYXRlc3QnLCB0aGlzLl91cGRhdGVGb3JCbG9jayk7XG4gIH1cblxuICAvKipcbiAgICogRW5zdXJlcyB0aGF0IHRoZSBsb2NhbGx5IHN0b3JlZCBhY2NvdW50cyBhcmUgaW4gc3luYyB3aXRoIGEgc2V0IG9mIGFjY291bnRzIHN0b3JlZCBleHRlcm5hbGx5IHRvIHRoaXNcbiAgICogQWNjb3VudFRyYWNrZXIuXG4gICAqXG4gICAqIE9uY2UgdGhpcyBBY2NvdW50VHJhY2tlcidzIGFjY291bnRzIGFyZSB1cCB0byBkYXRlIHdpdGggdGhvc2UgcmVmZXJlbmNlZCBieSB0aGUgcGFzc2VkIGFkZHJlc3NlcywgZWFjaFxuICAgKiBvZiB0aGVzZSBhY2NvdW50cyBhcmUgZ2l2ZW4gYW4gdXBkYXRlZCBiYWxhbmNlIHZpYSBFdGhRdWVyeS5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gYWRkcmVzc2VzIC0gVGhlIGFycmF5IG9mIGhleCBhZGRyZXNzZXMgZm9yIGFjY291bnRzIHdpdGggd2hpY2ggdGhpcyBBY2NvdW50VHJhY2tlcidzIGFjY291bnRzIHNob3VsZCBiZVxuICAgKiBpbiBzeW5jXG4gICAqL1xuICBzeW5jV2l0aEFkZHJlc3NlcyhhZGRyZXNzZXMpIHtcbiAgICBjb25zdCB7IGFjY291bnRzIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgY29uc3QgbG9jYWxzID0gT2JqZWN0LmtleXMoYWNjb3VudHMpO1xuXG4gICAgY29uc3QgYWNjb3VudHNUb0FkZCA9IFtdO1xuICAgIGFkZHJlc3Nlcy5mb3JFYWNoKCh1cHN0cmVhbSkgPT4ge1xuICAgICAgaWYgKCFsb2NhbHMuaW5jbHVkZXModXBzdHJlYW0pKSB7XG4gICAgICAgIGFjY291bnRzVG9BZGQucHVzaCh1cHN0cmVhbSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2NvdW50c1RvUmVtb3ZlID0gW107XG4gICAgbG9jYWxzLmZvckVhY2goKGxvY2FsKSA9PiB7XG4gICAgICBpZiAoIWFkZHJlc3Nlcy5pbmNsdWRlcyhsb2NhbCkpIHtcbiAgICAgICAgYWNjb3VudHNUb1JlbW92ZS5wdXNoKGxvY2FsKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuYWRkQWNjb3VudHMoYWNjb3VudHNUb0FkZCk7XG4gICAgdGhpcy5yZW1vdmVBY2NvdW50KGFjY291bnRzVG9SZW1vdmUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgbmV3IGFkZHJlc3NlcyB0byB0cmFjayB0aGUgYmFsYW5jZXMgb2ZcbiAgICogZ2l2ZW4gYSBiYWxhbmNlIGFzIGxvbmcgdGhpcy5fY3VycmVudEJsb2NrTnVtYmVyIGlzIGRlZmluZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFkZHJlc3NlcyAtIEFuIGFycmF5IG9mIGhleCBhZGRyZXNzZXMgb2YgbmV3IGFjY291bnRzIHRvIHRyYWNrXG4gICAqL1xuICBhZGRBY2NvdW50cyhhZGRyZXNzZXMpIHtcbiAgICBjb25zdCB7IGFjY291bnRzIH0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgLy8gYWRkIGluaXRpYWwgc3RhdGUgZm9yIGFkZHJlc3Nlc1xuICAgIGFkZHJlc3Nlcy5mb3JFYWNoKChhZGRyZXNzKSA9PiB7XG4gICAgICBhY2NvdW50c1thZGRyZXNzXSA9IHt9O1xuICAgIH0pO1xuICAgIC8vIHNhdmUgYWNjb3VudHMgc3RhdGVcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgYWNjb3VudHMgfSk7XG4gICAgLy8gZmV0Y2ggYmFsYW5jZXMgZm9yIHRoZSBhY2NvdW50cyBpZiB0aGVyZSBpcyBibG9jayBudW1iZXIgcmVhZHlcbiAgICBpZiAoIXRoaXMuX2N1cnJlbnRCbG9ja051bWJlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVBY2NvdW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWNjb3VudHMgZnJvbSBiZWluZyB0cmFja2VkXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFkZHJlc3NlcyAtIEFuIGFycmF5IG9mIGhleCBhZGRyZXNzZXMgdG8gc3RvcCB0cmFja2luZy5cbiAgICovXG4gIHJlbW92ZUFjY291bnQoYWRkcmVzc2VzKSB7XG4gICAgY29uc3QgeyBhY2NvdW50cyB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIC8vIHJlbW92ZSBlYWNoIHN0YXRlIG9iamVjdFxuICAgIGFkZHJlc3Nlcy5mb3JFYWNoKChhZGRyZXNzKSA9PiB7XG4gICAgICBkZWxldGUgYWNjb3VudHNbYWRkcmVzc107XG4gICAgfSk7XG4gICAgLy8gc2F2ZSBhY2NvdW50cyBzdGF0ZVxuICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyBhY2NvdW50cyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBhZGRyZXNzZXMgYW5kIGFzc29jaWF0ZWQgYmFsYW5jZXNcbiAgICovXG5cbiAgY2xlYXJBY2NvdW50cygpIHtcbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgYWNjb3VudHM6IHt9IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgYmxvY2ssIHVwZGF0ZXMgdGhpcyBBY2NvdW50VHJhY2tlcidzIGN1cnJlbnRCbG9ja0dhc0xpbWl0LCBhbmQgdGhlbiB1cGRhdGVzIGVhY2ggbG9jYWwgYWNjb3VudCdzIGJhbGFuY2VcbiAgICogdmlhIEV0aFF1ZXJ5XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBibG9ja051bWJlciAtIHRoZSBibG9jayBudW1iZXIgdG8gdXBkYXRlIHRvLlxuICAgKiBAZmlyZXMgJ2Jsb2NrJyBUaGUgdXBkYXRlZCBzdGF0ZSwgaWYgYWxsIGFjY291bnQgdXBkYXRlcyBhcmUgc3VjY2Vzc2Z1bFxuICAgKi9cbiAgYXN5bmMgX3VwZGF0ZUZvckJsb2NrKGJsb2NrTnVtYmVyKSB7XG4gICAgdGhpcy5fY3VycmVudEJsb2NrTnVtYmVyID0gYmxvY2tOdW1iZXI7XG5cbiAgICAvLyBibG9jayBnYXNMaW1pdCBwb2xsaW5nIHNob3VsZG4ndCBiZSBpbiBhY2NvdW50LXRyYWNrZXIgc2hvdWxkbid0IGJlIGhlcmUuLi5cbiAgICBjb25zdCBjdXJyZW50QmxvY2sgPSBhd2FpdCB0aGlzLl9xdWVyeS5nZXRCbG9ja0J5TnVtYmVyKGJsb2NrTnVtYmVyLCBmYWxzZSk7XG4gICAgaWYgKCFjdXJyZW50QmxvY2spIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudEJsb2NrR2FzTGltaXQgPSBjdXJyZW50QmxvY2suZ2FzTGltaXQ7XG4gICAgdGhpcy5zdG9yZS51cGRhdGVTdGF0ZSh7IGN1cnJlbnRCbG9ja0dhc0xpbWl0IH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuX3VwZGF0ZUFjY291bnRzKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cuZXJyb3IoZXJyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogYmFsYW5jZUNoZWNrZXIgaXMgZGVwbG95ZWQgb24gbWFpbiBldGggKHRlc3QpbmV0cyBhbmQgcmVxdWlyZXMgYSBzaW5nbGUgY2FsbFxuICAgKiBmb3IgYWxsIG90aGVyIG5ldHdvcmtzLCBjYWxscyB0aGlzLl91cGRhdGVBY2NvdW50IGZvciBlYWNoIGFjY291bnQgaW4gdGhpcy5zdG9yZVxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gYWZ0ZXIgYWxsIGFjY291bnQgYmFsYW5jZXMgdXBkYXRlZFxuICAgKi9cbiAgYXN5bmMgX3VwZGF0ZUFjY291bnRzKCkge1xuICAgIGNvbnN0IHsgY29tcGxldGVkT25ib2FyZGluZyB9ID0gdGhpcy5vbmJvYXJkaW5nQ29udHJvbGxlci5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGlmICghY29tcGxldGVkT25ib2FyZGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IHVzZU11bHRpQWNjb3VudEJhbGFuY2VDaGVja2VyIH0gPVxuICAgICAgdGhpcy5wcmVmZXJlbmNlc0NvbnRyb2xsZXIuc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgIGxldCBhZGRyZXNzZXMgPSBbXTtcbiAgICBpZiAodXNlTXVsdGlBY2NvdW50QmFsYW5jZUNoZWNrZXIpIHtcbiAgICAgIGNvbnN0IHsgYWNjb3VudHMgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgICAgYWRkcmVzc2VzID0gT2JqZWN0LmtleXMoYWNjb3VudHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzZWxlY3RlZEFkZHJlc3MgPSB0aGlzLnByZWZlcmVuY2VzQ29udHJvbGxlci5nZXRTZWxlY3RlZEFkZHJlc3MoKTtcblxuICAgICAgYWRkcmVzc2VzID0gW3NlbGVjdGVkQWRkcmVzc107XG4gICAgfVxuXG4gICAgY29uc3QgY2hhaW5JZCA9IHRoaXMuZ2V0Q3VycmVudENoYWluSWQoKTtcbiAgICBjb25zdCBuZXR3b3JrSWQgPSB0aGlzLmdldE5ldHdvcmtJZGVudGlmaWVyKCk7XG4gICAgY29uc3QgcnBjVXJsID0gJ2h0dHA6Ly8xMjcuMC4wLjE6ODU0NSc7XG5cbiAgICBpZiAobmV0d29ya0lkID09PSBMT0NBTEhPU1RfUlBDX1VSTCB8fCBuZXR3b3JrSWQgPT09IHJwY1VybCkge1xuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoYWRkcmVzc2VzLm1hcCh0aGlzLl91cGRhdGVBY2NvdW50LmJpbmQodGhpcykpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChjaGFpbklkKSB7XG4gICAgICAgIGNhc2UgQ0hBSU5fSURTLk1BSU5ORVQ6XG4gICAgICAgICAgYXdhaXQgdGhpcy5fdXBkYXRlQWNjb3VudHNWaWFCYWxhbmNlQ2hlY2tlcihcbiAgICAgICAgICAgIGFkZHJlc3NlcyxcbiAgICAgICAgICAgIFNJTkdMRV9DQUxMX0JBTEFOQ0VTX0FERFJFU1MsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIENIQUlOX0lEUy5HT0VSTEk6XG4gICAgICAgICAgYXdhaXQgdGhpcy5fdXBkYXRlQWNjb3VudHNWaWFCYWxhbmNlQ2hlY2tlcihcbiAgICAgICAgICAgIGFkZHJlc3NlcyxcbiAgICAgICAgICAgIFNJTkdMRV9DQUxMX0JBTEFOQ0VTX0FERFJFU1NfR09FUkxJLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDSEFJTl9JRFMuU0VQT0xJQTpcbiAgICAgICAgICBhd2FpdCB0aGlzLl91cGRhdGVBY2NvdW50c1ZpYUJhbGFuY2VDaGVja2VyKFxuICAgICAgICAgICAgYWRkcmVzc2VzLFxuICAgICAgICAgICAgU0lOR0xFX0NBTExfQkFMQU5DRVNfQUREUkVTU19TRVBPTElBLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDSEFJTl9JRFMuQlNDOlxuICAgICAgICAgIGF3YWl0IHRoaXMuX3VwZGF0ZUFjY291bnRzVmlhQmFsYW5jZUNoZWNrZXIoXG4gICAgICAgICAgICBhZGRyZXNzZXMsXG4gICAgICAgICAgICBTSU5HTEVfQ0FMTF9CQUxBTkNFU19BRERSRVNTX0JTQyxcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ0hBSU5fSURTLk9QVElNSVNNOlxuICAgICAgICAgIGF3YWl0IHRoaXMuX3VwZGF0ZUFjY291bnRzVmlhQmFsYW5jZUNoZWNrZXIoXG4gICAgICAgICAgICBhZGRyZXNzZXMsXG4gICAgICAgICAgICBTSU5HTEVfQ0FMTF9CQUxBTkNFU19BRERSRVNTX09QVElNSVNNLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDSEFJTl9JRFMuUE9MWUdPTjpcbiAgICAgICAgICBhd2FpdCB0aGlzLl91cGRhdGVBY2NvdW50c1ZpYUJhbGFuY2VDaGVja2VyKFxuICAgICAgICAgICAgYWRkcmVzc2VzLFxuICAgICAgICAgICAgU0lOR0xFX0NBTExfQkFMQU5DRVNfQUREUkVTU19QT0xZR09OLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDSEFJTl9JRFMuQVZBTEFOQ0hFOlxuICAgICAgICAgIGF3YWl0IHRoaXMuX3VwZGF0ZUFjY291bnRzVmlhQmFsYW5jZUNoZWNrZXIoXG4gICAgICAgICAgICBhZGRyZXNzZXMsXG4gICAgICAgICAgICBTSU5HTEVfQ0FMTF9CQUxBTkNFU19BRERSRVNTX0FWQUxBTkNIRSxcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ0hBSU5fSURTLkZBTlRPTTpcbiAgICAgICAgICBhd2FpdCB0aGlzLl91cGRhdGVBY2NvdW50c1ZpYUJhbGFuY2VDaGVja2VyKFxuICAgICAgICAgICAgYWRkcmVzc2VzLFxuICAgICAgICAgICAgU0lOR0xFX0NBTExfQkFMQU5DRVNfQUREUkVTU19GQU5UT00sXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIENIQUlOX0lEUy5BUkJJVFJVTTpcbiAgICAgICAgICBhd2FpdCB0aGlzLl91cGRhdGVBY2NvdW50c1ZpYUJhbGFuY2VDaGVja2VyKFxuICAgICAgICAgICAgYWRkcmVzc2VzLFxuICAgICAgICAgICAgU0lOR0xFX0NBTExfQkFMQU5DRVNfQUREUkVTU19BUkJJVFJVTSxcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoYWRkcmVzc2VzLm1hcCh0aGlzLl91cGRhdGVBY2NvdW50LmJpbmQodGhpcykpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgY3VycmVudCBiYWxhbmNlIG9mIGFuIGFjY291bnQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gQSBoZXggYWRkcmVzcyBvZiBhIHRoZSBhY2NvdW50IHRvIGJlIHVwZGF0ZWRcbiAgICogQHJldHVybnMge1Byb21pc2V9IGFmdGVyIHRoZSBhY2NvdW50IGJhbGFuY2UgaXMgdXBkYXRlZFxuICAgKi9cbiAgYXN5bmMgX3VwZGF0ZUFjY291bnQoYWRkcmVzcykge1xuICAgIGNvbnN0IHsgdXNlTXVsdGlBY2NvdW50QmFsYW5jZUNoZWNrZXIgfSA9XG4gICAgICB0aGlzLnByZWZlcmVuY2VzQ29udHJvbGxlci5zdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgbGV0IGJhbGFuY2UgPSAnMHgwJztcblxuICAgIC8vIHF1ZXJ5IGJhbGFuY2VcbiAgICB0cnkge1xuICAgICAgYmFsYW5jZSA9IGF3YWl0IHRoaXMuX3F1ZXJ5LmdldEJhbGFuY2UoYWRkcmVzcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvci5kYXRhPy5yZXF1ZXN0Py5tZXRob2QgIT09ICdldGhfZ2V0QmFsYW5jZScpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0geyBhZGRyZXNzLCBiYWxhbmNlIH07XG4gICAgLy8gdXBkYXRlIGFjY291bnRzIHN0YXRlXG4gICAgY29uc3QgeyBhY2NvdW50cyB9ID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIC8vIG9ubHkgcG9wdWxhdGUgaWYgdGhlIGVudHJ5IGlzIHN0aWxsIHByZXNlbnRcbiAgICBpZiAoIWFjY291bnRzW2FkZHJlc3NdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IG5ld0FjY291bnRzID0gYWNjb3VudHM7XG4gICAgaWYgKCF1c2VNdWx0aUFjY291bnRCYWxhbmNlQ2hlY2tlcikge1xuICAgICAgbmV3QWNjb3VudHMgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKGFjY291bnRzKS5mb3JFYWNoKChhY2NvdW50QWRkcmVzcykgPT4ge1xuICAgICAgICBpZiAoYWRkcmVzcyAhPT0gYWNjb3VudEFkZHJlc3MpIHtcbiAgICAgICAgICBuZXdBY2NvdW50c1thY2NvdW50QWRkcmVzc10gPSB7XG4gICAgICAgICAgICBhZGRyZXNzOiBhY2NvdW50QWRkcmVzcyxcbiAgICAgICAgICAgIGJhbGFuY2U6IG51bGwsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmV3QWNjb3VudHNbYWRkcmVzc10gPSByZXN1bHQ7XG5cbiAgICB0aGlzLnN0b3JlLnVwZGF0ZVN0YXRlKHsgYWNjb3VudHM6IG5ld0FjY291bnRzIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgY3VycmVudCBhZGRyZXNzIGJhbGFuY2VzIGZyb20gYmFsYW5jZUNoZWNrZXIgZGVwbG95ZWQgY29udHJhY3QgaW5zdGFuY2VcbiAgICpcbiAgICogQHBhcmFtIHsqfSBhZGRyZXNzZXNcbiAgICogQHBhcmFtIHsqfSBkZXBsb3llZENvbnRyYWN0QWRkcmVzc1xuICAgKi9cbiAgYXN5bmMgX3VwZGF0ZUFjY291bnRzVmlhQmFsYW5jZUNoZWNrZXIoYWRkcmVzc2VzLCBkZXBsb3llZENvbnRyYWN0QWRkcmVzcykge1xuICAgIGNvbnN0IHsgYWNjb3VudHMgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBuZXdBY2NvdW50cyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGFjY291bnRzKS5mb3JFYWNoKChhZGRyZXNzKSA9PiB7XG4gICAgICBpZiAoIWFkZHJlc3Nlcy5pbmNsdWRlcyhhZGRyZXNzKSkge1xuICAgICAgICBuZXdBY2NvdW50c1thZGRyZXNzXSA9IHsgYWRkcmVzcywgYmFsYW5jZTogbnVsbCB9O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuZXRoZXJzUHJvdmlkZXIgPSBuZXcgV2ViM1Byb3ZpZGVyKHRoaXMuX3Byb3ZpZGVyKTtcblxuICAgIGNvbnN0IGV0aENvbnRyYWN0ID0gYXdhaXQgbmV3IENvbnRyYWN0KFxuICAgICAgZGVwbG95ZWRDb250cmFjdEFkZHJlc3MsXG4gICAgICBTSU5HTEVfQ0FMTF9CQUxBTkNFU19BQkksXG4gICAgICB0aGlzLmV0aGVyc1Byb3ZpZGVyLFxuICAgICk7XG4gICAgY29uc3QgZXRoQmFsYW5jZSA9IFsnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJ107XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgYmFsYW5jZXMgPSBhd2FpdCBldGhDb250cmFjdC5iYWxhbmNlcyhhZGRyZXNzZXMsIGV0aEJhbGFuY2UpO1xuXG4gICAgICBhZGRyZXNzZXMuZm9yRWFjaCgoYWRkcmVzcywgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgYmFsYW5jZSA9IGJhbGFuY2VzW2luZGV4XSA/IGJhbGFuY2VzW2luZGV4XS50b0hleFN0cmluZygpIDogJzB4MCc7XG4gICAgICAgIG5ld0FjY291bnRzW2FkZHJlc3NdID0geyBhZGRyZXNzLCBiYWxhbmNlIH07XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc3RvcmUudXBkYXRlU3RhdGUoeyBhY2NvdW50czogbmV3QWNjb3VudHMgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZy53YXJuKFxuICAgICAgICBgTWV0YU1hc2sgLSBBY2NvdW50IFRyYWNrZXIgc2luZ2xlIGNhbGwgYmFsYW5jZSBmZXRjaCBmYWlsZWRgLFxuICAgICAgICBlcnJvcixcbiAgICAgICk7XG4gICAgICBQcm9taXNlLmFsbChhZGRyZXNzZXMubWFwKHRoaXMuX3VwZGF0ZUFjY291bnQuYmluZCh0aGlzKSkpO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBSZXR1cm5zIGVycm9yIHdpdGhvdXQgc3RhY2sgdHJhY2UgZm9yIGJldHRlciBVSSBkaXNwbGF5XG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyIC0gZXJyb3JcbiAqIEByZXR1cm5zIHtFcnJvcn0gRXJyb3Igd2l0aCBjbGVhbiBzdGFjayB0cmFjZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xlYW5FcnJvclN0YWNrKGVycikge1xuICBsZXQgeyBuYW1lIH0gPSBlcnI7XG4gIG5hbWUgPSBuYW1lID09PSB1bmRlZmluZWQgPyAnRXJyb3InIDogU3RyaW5nKG5hbWUpO1xuXG4gIGxldCBtc2cgPSBlcnIubWVzc2FnZTtcbiAgbXNnID0gbXNnID09PSB1bmRlZmluZWQgPyAnJyA6IFN0cmluZyhtc2cpO1xuXG4gIGlmIChuYW1lID09PSAnJykge1xuICAgIGVyci5zdGFjayA9IGVyci5tZXNzYWdlO1xuICB9IGVsc2UgaWYgKG1zZyA9PT0gJycpIHtcbiAgICBlcnIuc3RhY2sgPSBlcnIubmFtZTtcbiAgfSBlbHNlIGlmICghZXJyLnN0YWNrKSB7XG4gICAgZXJyLnN0YWNrID0gYCR7ZXJyLm5hbWV9OiAke2Vyci5tZXNzYWdlfWA7XG4gIH1cblxuICByZXR1cm4gZXJyO1xufVxuIiwiaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5cbi8qKlxuICogUmV0dXJucyBhIG1pZGRsZXdhcmUgdGhhdCBmaWx0ZXJzIG91dCByZXF1ZXN0cyBhbHJlYWR5IHNlZW5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUR1cGVSZXFGaWx0ZXJNaWRkbGV3YXJlKCkge1xuICBjb25zdCBwcm9jZXNzZWRSZXF1ZXN0SWQgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpbHRlckR1cGxpY2F0ZVJlcXVlc3RNaWRkbGV3YXJlKFxuICAgIC8qKiBAdHlwZSB7YW55fSAqLyByZXEsXG4gICAgLyoqIEB0eXBlIHthbnl9ICovIF9yZXMsXG4gICAgLyoqIEB0eXBlIHtGdW5jdGlvbn0gKi8gbmV4dCxcbiAgICAvKiogQHR5cGUge0Z1bmN0aW9ufSAqLyBlbmQsXG4gICkge1xuICAgIGlmIChwcm9jZXNzZWRSZXF1ZXN0SWQuaW5kZXhPZihyZXEuaWQpID49IDApIHtcbiAgICAgIGxvZy5pbmZvKGBSUEMgcmVxdWVzdCB3aXRoIGlkICR7cmVxLmlkfSBhbHJlYWR5IHNlZW4uYCk7XG4gICAgICByZXR1cm4gZW5kKCk7XG4gICAgfVxuICAgIHByb2Nlc3NlZFJlcXVlc3RJZC5wdXNoKHJlcS5pZCk7XG4gICAgcmV0dXJuIG5leHQoKTtcbiAgfTtcbn1cbiIsImltcG9ydCBsb2cgZnJvbSAnbG9nbGV2ZWwnO1xuXG4vKipcbiAqIFJldHVybnMgYSBtaWRkbGV3YXJlIHRoYXQgbG9ncyBSUEMgYWN0aXZpdHlcbiAqXG4gKiBAcGFyYW0ge3sgb3JpZ2luOiBzdHJpbmcgfX0gb3B0cyAtIFRoZSBtaWRkbGV3YXJlIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTG9nZ2VyTWlkZGxld2FyZShvcHRzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBsb2dnZXJNaWRkbGV3YXJlKFxuICAgIC8qKiBAdHlwZSB7YW55fSAqLyByZXEsXG4gICAgLyoqIEB0eXBlIHthbnl9ICovIHJlcyxcbiAgICAvKiogQHR5cGUge0Z1bmN0aW9ufSAqLyBuZXh0LFxuICApIHtcbiAgICBuZXh0KCgvKiogQHR5cGUge0Z1bmN0aW9ufSAqLyBjYikgPT4ge1xuICAgICAgaWYgKHJlcy5lcnJvcikge1xuICAgICAgICBsb2cuZXJyb3IoJ0Vycm9yIGluIFJQQyByZXNwb25zZTpcXG4nLCByZXMpO1xuICAgICAgfVxuICAgICAgaWYgKHJlcS5pc01ldGFtYXNrSW50ZXJuYWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9nLmluZm8oYFJQQyAoJHtvcHRzLm9yaWdpbn0pOmAsIHJlcSwgJy0+JywgcmVzKTtcbiAgICAgIGNiKCk7XG4gICAgfSk7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBldGhFcnJvcnMsIHNlcmlhbGl6ZUVycm9yIH0gZnJvbSAnZXRoLXJwYy1lcnJvcnMnO1xuaW1wb3J0IHsgaXNNYW5pZmVzdFYzIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvbXYzLnV0aWxzJztcblxuY29uc3QgY3JlYXRlTWV0YVJQQ0hhbmRsZXIgPSAoYXBpLCBvdXRTdHJlYW0sIHN0b3JlLCBsb2NhbFN0b3JlQXBpV3JhcHBlcikgPT4ge1xuICByZXR1cm4gYXN5bmMgKGRhdGEpID0+IHtcbiAgICBpZiAob3V0U3RyZWFtLl93cml0YWJsZVN0YXRlLmVuZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghYXBpW2RhdGEubWV0aG9kXSkge1xuICAgICAgb3V0U3RyZWFtLndyaXRlKHtcbiAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgIGVycm9yOiBldGhFcnJvcnMucnBjLm1ldGhvZE5vdEZvdW5kKHtcbiAgICAgICAgICBtZXNzYWdlOiBgJHtkYXRhLm1ldGhvZH0gbm90IGZvdW5kYCxcbiAgICAgICAgfSksXG4gICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdDtcbiAgICBsZXQgZXJyb3I7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGFwaVtkYXRhLm1ldGhvZF0oLi4uZGF0YS5wYXJhbXMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZXJyb3IgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChpc01hbmlmZXN0VjMgJiYgc3RvcmUgJiYgZGF0YS5tZXRob2QgIT09ICdnZXRTdGF0ZScpIHtcbiAgICAgICAgbG9jYWxTdG9yZUFwaVdyYXBwZXIuc2V0KHN0b3JlLmdldFN0YXRlKCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvdXRTdHJlYW0uX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIG91dFN0cmVhbS53cml0ZSh7XG4gICAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgICBlcnJvcjogc2VyaWFsaXplRXJyb3IoZXJyb3IsIHsgc2hvdWxkSW5jbHVkZVN0YWNrOiB0cnVlIH0pLFxuICAgICAgICBpZDogZGF0YS5pZCxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRTdHJlYW0ud3JpdGUoe1xuICAgICAgICBqc29ucnBjOiAnMi4wJyxcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBpZDogZGF0YS5pZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU1ldGFSUENIYW5kbGVyO1xuIiwiaW1wb3J0IHsgY3JlYXRlU2NhZmZvbGRNaWRkbGV3YXJlLCBtZXJnZU1pZGRsZXdhcmUgfSBmcm9tICdqc29uLXJwYy1lbmdpbmUnO1xuaW1wb3J0IHsgY3JlYXRlV2FsbGV0TWlkZGxld2FyZSB9IGZyb20gJ0BtZXRhbWFzay9ldGgtanNvbi1ycGMtbWlkZGxld2FyZSc7XG5pbXBvcnQge1xuICBjcmVhdGVQZW5kaW5nTm9uY2VNaWRkbGV3YXJlLFxuICBjcmVhdGVQZW5kaW5nVHhNaWRkbGV3YXJlLFxufSBmcm9tICcuL21pZGRsZXdhcmUvcGVuZGluZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1ldGFtYXNrTWlkZGxld2FyZSh7XG4gIHZlcnNpb24sXG4gIGdldEFjY291bnRzLFxuICBwcm9jZXNzVHJhbnNhY3Rpb24sXG4gIHByb2Nlc3NFdGhTaWduTWVzc2FnZSxcbiAgcHJvY2Vzc1R5cGVkTWVzc2FnZSxcbiAgcHJvY2Vzc1R5cGVkTWVzc2FnZVYzLFxuICBwcm9jZXNzVHlwZWRNZXNzYWdlVjQsXG4gIHByb2Nlc3NQZXJzb25hbE1lc3NhZ2UsXG4gIHByb2Nlc3NEZWNyeXB0TWVzc2FnZSxcbiAgcHJvY2Vzc0VuY3J5cHRpb25QdWJsaWNLZXksXG4gIGdldFBlbmRpbmdOb25jZSxcbiAgZ2V0UGVuZGluZ1RyYW5zYWN0aW9uQnlIYXNoLFxufSkge1xuICBjb25zdCBtZXRhbWFza01pZGRsZXdhcmUgPSBtZXJnZU1pZGRsZXdhcmUoW1xuICAgIGNyZWF0ZVNjYWZmb2xkTWlkZGxld2FyZSh7XG4gICAgICBldGhfc3luY2luZzogZmFsc2UsXG4gICAgICB3ZWIzX2NsaWVudFZlcnNpb246IGBNZXRhTWFzay92JHt2ZXJzaW9ufWAsXG4gICAgfSksXG4gICAgY3JlYXRlV2FsbGV0TWlkZGxld2FyZSh7XG4gICAgICBnZXRBY2NvdW50cyxcbiAgICAgIHByb2Nlc3NUcmFuc2FjdGlvbixcbiAgICAgIHByb2Nlc3NFdGhTaWduTWVzc2FnZSxcbiAgICAgIHByb2Nlc3NUeXBlZE1lc3NhZ2UsXG4gICAgICBwcm9jZXNzVHlwZWRNZXNzYWdlVjMsXG4gICAgICBwcm9jZXNzVHlwZWRNZXNzYWdlVjQsXG4gICAgICBwcm9jZXNzUGVyc29uYWxNZXNzYWdlLFxuICAgICAgcHJvY2Vzc0RlY3J5cHRNZXNzYWdlLFxuICAgICAgcHJvY2Vzc0VuY3J5cHRpb25QdWJsaWNLZXksXG4gICAgfSksXG4gICAgY3JlYXRlUGVuZGluZ05vbmNlTWlkZGxld2FyZSh7IGdldFBlbmRpbmdOb25jZSB9KSxcbiAgICBjcmVhdGVQZW5kaW5nVHhNaWRkbGV3YXJlKHsgZ2V0UGVuZGluZ1RyYW5zYWN0aW9uQnlIYXNoIH0pLFxuICBdKTtcbiAgcmV0dXJuIG1ldGFtYXNrTWlkZGxld2FyZTtcbn1cbiIsImltcG9ydCBsb2cgZnJvbSAnbG9nbGV2ZWwnO1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsJztcblxuLyoqXG4gKiBSZXR1cm5zIGEgbWlkZGxld2FyZSB0aGF0IGludGVyY2VwdHMgYHdhbGxldF9yZWdpc3Rlck9uYm9hcmRpbmdgIG1lc3NhZ2VzXG4gKlxuICogQHBhcmFtIHt7IGxvY2F0aW9uOiBzdHJpbmcsIHJlZ2lzdGVyT25ib2FyZGluZzogRnVuY3Rpb24gfX0gb3B0cyAtIFRoZSBtaWRkbGV3YXJlIG9wdGlvbnNcbiAqIEByZXR1cm5zIHsocmVxOiBhbnksIHJlczogYW55LCBuZXh0OiBGdW5jdGlvbiwgZW5kOiBGdW5jdGlvbikgPT4gdm9pZH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlT25ib2FyZGluZ01pZGRsZXdhcmUoe1xuICBsb2NhdGlvbixcbiAgcmVnaXN0ZXJPbmJvYXJkaW5nLFxufSkge1xuICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gb3JpZ2luTWlkZGxld2FyZShyZXEsIHJlcywgbmV4dCwgZW5kKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChyZXEubWV0aG9kICE9PSAnd2FsbGV0X3JlZ2lzdGVyT25ib2FyZGluZycpIHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocmVxLnRhYklkICYmIHJlcS50YWJJZCAhPT0gYnJvd3Nlci50YWJzLlRBQl9JRF9OT05FKSB7XG4gICAgICAgIGF3YWl0IHJlZ2lzdGVyT25ib2FyZGluZyhsb2NhdGlvbiwgcmVxLnRhYklkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhcbiAgICAgICAgICBgJ3dhbGxldF9yZWdpc3Rlck9uYm9hcmRpbmcnIG1lc3NhZ2UgZnJvbSAke2xvY2F0aW9ufSBpZ25vcmVkIGR1ZSB0byBtaXNzaW5nIHRhYklkYCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJlcy5yZXN1bHQgPSB0cnVlO1xuICAgICAgZW5kKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGVuZChlcnJvcik7XG4gICAgfVxuICB9O1xufVxuIiwiLyoqXG4gKiBSZXR1cm5zIGEgbWlkZGxld2FyZSB0aGF0IGFwcGVuZHMgdGhlIERBcHAgb3JpZ2luIHRvIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge3sgb3JpZ2luOiBzdHJpbmcgfX0gb3B0cyAtIFRoZSBtaWRkbGV3YXJlIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlT3JpZ2luTWlkZGxld2FyZShvcHRzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBvcmlnaW5NaWRkbGV3YXJlKFxuICAgIC8qKiBAdHlwZSB7YW55fSAqLyByZXEsXG4gICAgLyoqIEB0eXBlIHthbnl9ICovIF8sXG4gICAgLyoqIEB0eXBlIHtGdW5jdGlvbn0gKi8gbmV4dCxcbiAgKSB7XG4gICAgcmVxLm9yaWdpbiA9IG9wdHMub3JpZ2luO1xuICAgIG5leHQoKTtcbiAgfTtcbn1cbiIsImltcG9ydCB7IGVycm9yQ29kZXMgfSBmcm9tICdldGgtcnBjLWVycm9ycyc7XG5pbXBvcnQgeyBkZXRlY3RTSVdFIH0gZnJvbSAnQG1ldGFtYXNrL2NvbnRyb2xsZXItdXRpbHMnO1xuaW1wb3J0IHsgaXNWYWxpZEFkZHJlc3MgfSBmcm9tICdldGhlcmV1bWpzLXV0aWwnO1xuXG5pbXBvcnQgeyBNRVNTQUdFX1RZUEUsIE9SSUdJTl9NRVRBTUFTSyB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvYXBwJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uU3RhdHVzIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy90cmFuc2FjdGlvbic7XG5pbXBvcnQgeyBTRUNPTkQgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL3RpbWUnO1xuXG5pbXBvcnQge1xuICBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnksXG4gIE1ldGFNZXRyaWNzRXZlbnROYW1lLFxuICBNZXRhTWV0cmljc0V2ZW50VWlDdXN0b21pemF0aW9uLFxufSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL21ldGFtZXRyaWNzJztcblxuLyoqXG4gKiBUaGVzZSB0eXBlcyBkZXRlcm1pbmUgaG93IHRoZSBtZXRob2QgdHJhY2tpbmcgbWlkZGxld2FyZSBoYW5kbGVzIGluY29taW5nXG4gKiByZXF1ZXN0cyBiYXNlZCBvbiB0aGUgbWV0aG9kIG5hbWUuIFRoZXJlIGFyZSB0aHJlZSBvcHRpb25zIHJpZ2h0IG5vdyBidXRcbiAqIHRoZSB0eXBlcyBjb3VsZCBiZSBleHBhbmRlZCB0byBjb3ZlciBvdGhlciBvcHRpb25zIGluIHRoZSBmdXR1cmUuXG4gKi9cbmNvbnN0IFJBVEVfTElNSVRfVFlQRVMgPSB7XG4gIFJBVEVfTElNSVRFRDogJ3JhdGVfbGltaXRlZCcsXG4gIEJMT0NLRUQ6ICdibG9ja2VkJyxcbiAgTk9OX1JBVEVfTElNSVRFRDogJ25vbl9yYXRlX2xpbWl0ZWQnLFxufTtcblxuLyoqXG4gKiBUaGlzIG9iamVjdCBtYXBzIGEgbWV0aG9kIG5hbWUgdG8gYSBSQVRFX0xJTUlUX1RZUEUuIElmIG5vdCBpbiB0aGlzIG1hcCB0aGVcbiAqIGRlZmF1bHQgaXMgJ1JBVEVfTElNSVRFRCdcbiAqL1xuY29uc3QgUkFURV9MSU1JVF9NQVAgPSB7XG4gIFtNRVNTQUdFX1RZUEUuRVRIX1NJR05dOiBSQVRFX0xJTUlUX1RZUEVTLk5PTl9SQVRFX0xJTUlURUQsXG4gIFtNRVNTQUdFX1RZUEUuRVRIX1NJR05fVFlQRURfREFUQV06IFJBVEVfTElNSVRfVFlQRVMuTk9OX1JBVEVfTElNSVRFRCxcbiAgW01FU1NBR0VfVFlQRS5FVEhfU0lHTl9UWVBFRF9EQVRBX1YzXTogUkFURV9MSU1JVF9UWVBFUy5OT05fUkFURV9MSU1JVEVELFxuICBbTUVTU0FHRV9UWVBFLkVUSF9TSUdOX1RZUEVEX0RBVEFfVjRdOiBSQVRFX0xJTUlUX1RZUEVTLk5PTl9SQVRFX0xJTUlURUQsXG4gIFtNRVNTQUdFX1RZUEUuUEVSU09OQUxfU0lHTl06IFJBVEVfTElNSVRfVFlQRVMuTk9OX1JBVEVfTElNSVRFRCxcbiAgW01FU1NBR0VfVFlQRS5FVEhfREVDUllQVF06IFJBVEVfTElNSVRfVFlQRVMuTk9OX1JBVEVfTElNSVRFRCxcbiAgW01FU1NBR0VfVFlQRS5FVEhfR0VUX0VOQ1JZUFRJT05fUFVCTElDX0tFWV06XG4gICAgUkFURV9MSU1JVF9UWVBFUy5OT05fUkFURV9MSU1JVEVELFxuICBbTUVTU0FHRV9UWVBFLkVUSF9SRVFVRVNUX0FDQ09VTlRTXTogUkFURV9MSU1JVF9UWVBFUy5SQVRFX0xJTUlURUQsXG4gIFtNRVNTQUdFX1RZUEUuV0FMTEVUX1JFUVVFU1RfUEVSTUlTU0lPTlNdOiBSQVRFX0xJTUlUX1RZUEVTLlJBVEVfTElNSVRFRCxcbiAgW01FU1NBR0VfVFlQRS5TRU5EX01FVEFEQVRBXTogUkFURV9MSU1JVF9UWVBFUy5CTE9DS0VELFxuICBbTUVTU0FHRV9UWVBFLkdFVF9QUk9WSURFUl9TVEFURV06IFJBVEVfTElNSVRfVFlQRVMuQkxPQ0tFRCxcbn07XG5cbi8qKlxuICogRm9yIGV2ZW50cyB3aXRoIHVzZXIgaW50ZXJhY3Rpb24gKGFwcHJvdmUgLyByZWplY3QgfCBjYW5jZWwpIHRoaXMgbWFwIHdpbGxcbiAqIHJldHVybiBhbiBvYmplY3Qgd2l0aCBBUFBST1ZFRCwgUkVKRUNURUQsIFJFUVVFU1RFRCwgYW5kIEZBSUxFRCBrZXlzIHRoYXQgbWFwIHRvIHRoZVxuICogYXBwcm9wcmlhdGUgZXZlbnQgbmFtZXMuXG4gKi9cbmNvbnN0IEVWRU5UX05BTUVfTUFQID0ge1xuICBbTUVTU0FHRV9UWVBFLkVUSF9TSUdOXToge1xuICAgIEFQUFJPVkVEOiBNZXRhTWV0cmljc0V2ZW50TmFtZS5TaWduYXR1cmVBcHByb3ZlZCxcbiAgICBGQUlMRUQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLlNpZ25hdHVyZUZhaWxlZCxcbiAgICBSRUpFQ1RFRDogTWV0YU1ldHJpY3NFdmVudE5hbWUuU2lnbmF0dXJlUmVqZWN0ZWQsXG4gICAgUkVRVUVTVEVEOiBNZXRhTWV0cmljc0V2ZW50TmFtZS5TaWduYXR1cmVSZXF1ZXN0ZWQsXG4gIH0sXG4gIFtNRVNTQUdFX1RZUEUuRVRIX1NJR05fVFlQRURfREFUQV06IHtcbiAgICBBUFBST1ZFRDogTWV0YU1ldHJpY3NFdmVudE5hbWUuU2lnbmF0dXJlQXBwcm92ZWQsXG4gICAgUkVKRUNURUQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLlNpZ25hdHVyZVJlamVjdGVkLFxuICAgIFJFUVVFU1RFRDogTWV0YU1ldHJpY3NFdmVudE5hbWUuU2lnbmF0dXJlUmVxdWVzdGVkLFxuICB9LFxuICBbTUVTU0FHRV9UWVBFLkVUSF9TSUdOX1RZUEVEX0RBVEFfVjNdOiB7XG4gICAgQVBQUk9WRUQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLlNpZ25hdHVyZUFwcHJvdmVkLFxuICAgIFJFSkVDVEVEOiBNZXRhTWV0cmljc0V2ZW50TmFtZS5TaWduYXR1cmVSZWplY3RlZCxcbiAgICBSRVFVRVNURUQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLlNpZ25hdHVyZVJlcXVlc3RlZCxcbiAgfSxcbiAgW01FU1NBR0VfVFlQRS5FVEhfU0lHTl9UWVBFRF9EQVRBX1Y0XToge1xuICAgIEFQUFJPVkVEOiBNZXRhTWV0cmljc0V2ZW50TmFtZS5TaWduYXR1cmVBcHByb3ZlZCxcbiAgICBSRUpFQ1RFRDogTWV0YU1ldHJpY3NFdmVudE5hbWUuU2lnbmF0dXJlUmVqZWN0ZWQsXG4gICAgUkVRVUVTVEVEOiBNZXRhTWV0cmljc0V2ZW50TmFtZS5TaWduYXR1cmVSZXF1ZXN0ZWQsXG4gIH0sXG4gIFtNRVNTQUdFX1RZUEUuUEVSU09OQUxfU0lHTl06IHtcbiAgICBBUFBST1ZFRDogTWV0YU1ldHJpY3NFdmVudE5hbWUuU2lnbmF0dXJlQXBwcm92ZWQsXG4gICAgUkVKRUNURUQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLlNpZ25hdHVyZVJlamVjdGVkLFxuICAgIFJFUVVFU1RFRDogTWV0YU1ldHJpY3NFdmVudE5hbWUuU2lnbmF0dXJlUmVxdWVzdGVkLFxuICB9LFxuICBbTUVTU0FHRV9UWVBFLkVUSF9ERUNSWVBUXToge1xuICAgIEFQUFJPVkVEOiBNZXRhTWV0cmljc0V2ZW50TmFtZS5EZWNyeXB0aW9uQXBwcm92ZWQsXG4gICAgUkVKRUNURUQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLkRlY3J5cHRpb25SZWplY3RlZCxcbiAgICBSRVFVRVNURUQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLkRlY3J5cHRpb25SZXF1ZXN0ZWQsXG4gIH0sXG4gIFtNRVNTQUdFX1RZUEUuRVRIX0dFVF9FTkNSWVBUSU9OX1BVQkxJQ19LRVldOiB7XG4gICAgQVBQUk9WRUQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLkVuY3J5cHRpb25QdWJsaWNLZXlBcHByb3ZlZCxcbiAgICBSRUpFQ1RFRDogTWV0YU1ldHJpY3NFdmVudE5hbWUuRW5jcnlwdGlvblB1YmxpY0tleVJlamVjdGVkLFxuICAgIFJFUVVFU1RFRDogTWV0YU1ldHJpY3NFdmVudE5hbWUuRW5jcnlwdGlvblB1YmxpY0tleVJlcXVlc3RlZCxcbiAgfSxcbiAgW01FU1NBR0VfVFlQRS5FVEhfUkVRVUVTVF9BQ0NPVU5UU106IHtcbiAgICBBUFBST1ZFRDogTWV0YU1ldHJpY3NFdmVudE5hbWUuUGVybWlzc2lvbnNBcHByb3ZlZCxcbiAgICBSRUpFQ1RFRDogTWV0YU1ldHJpY3NFdmVudE5hbWUuUGVybWlzc2lvbnNSZWplY3RlZCxcbiAgICBSRVFVRVNURUQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLlBlcm1pc3Npb25zUmVxdWVzdGVkLFxuICB9LFxuICBbTUVTU0FHRV9UWVBFLldBTExFVF9SRVFVRVNUX1BFUk1JU1NJT05TXToge1xuICAgIEFQUFJPVkVEOiBNZXRhTWV0cmljc0V2ZW50TmFtZS5QZXJtaXNzaW9uc0FwcHJvdmVkLFxuICAgIFJFSkVDVEVEOiBNZXRhTWV0cmljc0V2ZW50TmFtZS5QZXJtaXNzaW9uc1JlamVjdGVkLFxuICAgIFJFUVVFU1RFRDogTWV0YU1ldHJpY3NFdmVudE5hbWUuUGVybWlzc2lvbnNSZXF1ZXN0ZWQsXG4gIH0sXG59O1xuXG5jb25zdCByYXRlTGltaXRUaW1lb3V0cyA9IHt9O1xuXG4vKipcbiAqIFJldHVybnMgYSBtaWRkbGV3YXJlIHRoYXQgdHJhY2tzIGlucGFnZV9wcm92aWRlciB1c2FnZSB1c2luZyBzYW1wbGluZyBmb3JcbiAqIGVhY2ggdHlwZSBvZiBldmVudCBleGNlcHQgdGhvc2UgdGhhdCByZXF1aXJlIHVzZXIgaW50ZXJhY3Rpb24sIHN1Y2ggYXNcbiAqIHNpZ25hdHVyZSByZXF1ZXN0c1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gb3B0aW9ucyBmb3IgdGhlIHJwYyBtZXRob2QgdHJhY2tpbmcgbWlkZGxld2FyZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0cy50cmFja0V2ZW50IC0gdHJhY2tFdmVudCBtZXRob2QgZnJvbVxuICogIE1ldGFNZXRyaWNzQ29udHJvbGxlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0cy5nZXRNZXRyaWNzU3RhdGUgLSBnZXQgdGhlIHN0YXRlIG9mXG4gKiAgTWV0YU1ldHJpY3NDb250cm9sbGVyXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMucmF0ZUxpbWl0U2Vjb25kc10gLSBudW1iZXIgb2Ygc2Vjb25kcyB0byB3YWl0IGJlZm9yZVxuICogIGFsbG93aW5nIGFub3RoZXIgc2V0IG9mIGV2ZW50cyB0byBiZSB0cmFja2VkLlxuICogQHBhcmFtIG9wdHMuc2VjdXJpdHlQcm92aWRlclJlcXVlc3RcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUlBDTWV0aG9kVHJhY2tpbmdNaWRkbGV3YXJlKHtcbiAgdHJhY2tFdmVudCxcbiAgZ2V0TWV0cmljc1N0YXRlLFxuICByYXRlTGltaXRTZWNvbmRzID0gNjAgKiA1LFxuICBzZWN1cml0eVByb3ZpZGVyUmVxdWVzdCxcbn0pIHtcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIHJwY01ldGhvZFRyYWNraW5nTWlkZGxld2FyZShcbiAgICAvKiogQHR5cGUge2FueX0gKi8gcmVxLFxuICAgIC8qKiBAdHlwZSB7YW55fSAqLyByZXMsXG4gICAgLyoqIEB0eXBlIHtGdW5jdGlvbn0gKi8gbmV4dCxcbiAgKSB7XG4gICAgY29uc3QgeyBvcmlnaW4sIG1ldGhvZCB9ID0gcmVxO1xuXG4gICAgLy8gRGV0ZXJtaW5lIHdoYXQgdHlwZSBvZiByYXRlIGxpbWl0IHRvIGFwcGx5IGJhc2VkIG9uIG1ldGhvZFxuICAgIGNvbnN0IHJhdGVMaW1pdFR5cGUgPVxuICAgICAgUkFURV9MSU1JVF9NQVBbbWV0aG9kXSA/PyBSQVRFX0xJTUlUX1RZUEVTLlJBVEVfTElNSVRFRDtcblxuICAgIC8vIElmIHRoZSByYXRlTGltaXRUeXBlIGlzIFJBVEVfTElNSVRFRCBjaGVjayB0aGUgcmF0ZUxpbWl0VGltZW91dHNcbiAgICBjb25zdCByYXRlTGltaXRlZCA9XG4gICAgICByYXRlTGltaXRUeXBlID09PSBSQVRFX0xJTUlUX1RZUEVTLlJBVEVfTElNSVRFRCAmJlxuICAgICAgdHlwZW9mIHJhdGVMaW1pdFRpbWVvdXRzW21ldGhvZF0gIT09ICd1bmRlZmluZWQnO1xuXG4gICAgLy8gR2V0IHRoZSBwYXJ0aWNpcGF0ZUluTWV0YU1ldHJpY3Mgc3RhdGUgdG8gZGV0ZXJtaW5lIGlmIHdlIHNob3VsZCB0cmFja1xuICAgIC8vIGFueXRoaW5nLiBUaGlzIGlzIGV4dHJhIHJlZHVuZGFuY3kgYmVjYXVzZSB0aGlzIHZhbHVlIGlzIGNoZWNrZWQgaW5cbiAgICAvLyB0aGUgbWV0YW1ldHJpY3MgY29udHJvbGxlcidzIHRyYWNrRXZlbnQgbWV0aG9kIGFzIHdlbGwuXG4gICAgY29uc3QgdXNlclBhcnRpY2lwYXRpbmdJbk1ldGFNZXRyaWNzID1cbiAgICAgIGdldE1ldHJpY3NTdGF0ZSgpLnBhcnRpY2lwYXRlSW5NZXRhTWV0cmljcyA9PT0gdHJ1ZTtcblxuICAgIC8vIEdldCB0aGUgZXZlbnQgdHlwZSwgZWFjaCBvZiB3aGljaCBoYXMgQVBQUk9WRUQsIFJFSkVDVEVEIGFuZCBSRVFVRVNURURcbiAgICAvLyBrZXlzIGZvciB0aGUgdmFyaW91cyBldmVudHMgaW4gdGhlIGZsb3cuXG4gICAgY29uc3QgZXZlbnRUeXBlID0gRVZFTlRfTkFNRV9NQVBbbWV0aG9kXTtcblxuICAgIGNvbnN0IGV2ZW50UHJvcGVydGllcyA9IHt9O1xuXG4gICAgLy8gQm9vbGVhbiB2YXJpYWJsZSB0aGF0IHJlZHVjZXMgY29kZSBkdXBsaWNhdGlvbiBhbmQgaW5jcmVhc2VzIGxlZ2liaWxpdHlcbiAgICBjb25zdCBzaG91bGRUcmFja0V2ZW50ID1cbiAgICAgIC8vIERvbid0IHRyYWNrIGlmIHRoZSByZXF1ZXN0IGNhbWUgZnJvbSBvdXIgb3duIFVJIG9yIGJhY2tncm91bmRcbiAgICAgIG9yaWdpbiAhPT0gT1JJR0lOX01FVEFNQVNLICYmXG4gICAgICAvLyBEb24ndCB0cmFjayBpZiB0aGlzIGlzIGEgYmxvY2tlZCBtZXRob2RcbiAgICAgIHJhdGVMaW1pdFR5cGUgIT09IFJBVEVfTElNSVRfVFlQRVMuQkxPQ0tFRCAmJlxuICAgICAgLy8gRG9uJ3QgdHJhY2sgaWYgdGhlIHJhdGUgbGltaXQgaGFzIGJlZW4gaGl0XG4gICAgICByYXRlTGltaXRlZCA9PT0gZmFsc2UgJiZcbiAgICAgIC8vIERvbid0IHRyYWNrIGlmIHRoZSB1c2VyIGlzbid0IHBhcnRpY2lwYXRpbmcgaW4gbWV0YW1ldHJpY3NcbiAgICAgIHVzZXJQYXJ0aWNpcGF0aW5nSW5NZXRhTWV0cmljcyA9PT0gdHJ1ZTtcblxuICAgIGlmIChzaG91bGRUcmFja0V2ZW50KSB7XG4gICAgICAvLyBXZSB0cmFjayBhbiBpbml0aWFsIFwicmVxdWVzdGVkXCIgZXZlbnQgYXMgc29vbiBhcyB0aGUgZGFwcCBjYWxscyB0aGVcbiAgICAgIC8vIHByb3ZpZGVyIG1ldGhvZC4gRm9yIHRoZSBldmVudHMgbm90IHNwZWNpYWwgY2FzZWQgdGhpcyBpcyB0aGUgb25seVxuICAgICAgLy8gZXZlbnQgdGhhdCB3aWxsIGJlIGZpcmVkIGFuZCB0aGUgZXZlbnQgbmFtZSB3aWxsIGJlXG4gICAgICAvLyAnUHJvdmlkZXIgTWV0aG9kIENhbGxlZCcuXG4gICAgICBjb25zdCBldmVudCA9IGV2ZW50VHlwZVxuICAgICAgICA/IGV2ZW50VHlwZS5SRVFVRVNURURcbiAgICAgICAgOiBNZXRhTWV0cmljc0V2ZW50TmFtZS5Qcm92aWRlck1ldGhvZENhbGxlZDtcblxuICAgICAgaWYgKGV2ZW50ID09PSBNZXRhTWV0cmljc0V2ZW50TmFtZS5TaWduYXR1cmVSZXF1ZXN0ZWQpIHtcbiAgICAgICAgZXZlbnRQcm9wZXJ0aWVzLnNpZ25hdHVyZV90eXBlID0gbWV0aG9kO1xuXG4gICAgICAgIC8vIEluIHBlcnNvbmFsIG1lc3NhZ2VzIHRoZSBmaXJzdCBwYXJhbSBpcyBkYXRhIHdoaWxlIGluIHR5cGVkIG1lc3NhZ2VzIHNlY29uZCBwYXJhbSBpcyBkYXRhXG4gICAgICAgIC8vIGlmIGNvbmRpdGlvbiBiZWxvdyBpcyBhZGRlZCB0byBlbnN1cmUgdGhhdCB0aGUgcmlnaHQgcGFyYW1zIGFyZSBjYXB0dXJlZCBhcyBkYXRhIGFuZCBhZGRyZXNzLlxuICAgICAgICBsZXQgZGF0YTtcbiAgICAgICAgbGV0IGZyb207XG4gICAgICAgIGlmIChpc1ZhbGlkQWRkcmVzcyhyZXE/LnBhcmFtcz8uWzFdKSkge1xuICAgICAgICAgIGRhdGEgPSByZXE/LnBhcmFtcz8uWzBdO1xuICAgICAgICAgIGZyb20gPSByZXE/LnBhcmFtcz8uWzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEgPSByZXE/LnBhcmFtcz8uWzFdO1xuICAgICAgICAgIGZyb20gPSByZXE/LnBhcmFtcz8uWzBdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmFtc0V4YW1wbGVQYXNzd29yZCA9IHJlcT8ucGFyYW1zPy5bMl07XG5cbiAgICAgICAgY29uc3QgbXNnRGF0YSA9IHtcbiAgICAgICAgICBtc2dQYXJhbXM6IHtcbiAgICAgICAgICAgIC4uLnBhcmFtc0V4YW1wbGVQYXNzd29yZCxcbiAgICAgICAgICAgIGZyb20sXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgb3JpZ2luLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3RhdHVzOiBUcmFuc2FjdGlvblN0YXR1cy51bmFwcHJvdmVkLFxuICAgICAgICAgIHR5cGU6IHJlcS5tZXRob2QsXG4gICAgICAgIH07XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBzZWN1cml0eVByb3ZpZGVyUmVzcG9uc2UgPSBhd2FpdCBzZWN1cml0eVByb3ZpZGVyUmVxdWVzdChcbiAgICAgICAgICAgIG1zZ0RhdGEsXG4gICAgICAgICAgICByZXEubWV0aG9kLFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAoc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlPy5mbGFnQXNEYW5nZXJvdXMgPT09IDEpIHtcbiAgICAgICAgICAgIGV2ZW50UHJvcGVydGllcy51aV9jdXN0b21pemF0aW9ucyA9IFtcbiAgICAgICAgICAgICAgTWV0YU1ldHJpY3NFdmVudFVpQ3VzdG9taXphdGlvbi5GbGFnZ2VkQXNNYWxpY2lvdXMsXG4gICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlPy5mbGFnQXNEYW5nZXJvdXMgPT09IDIpIHtcbiAgICAgICAgICAgIGV2ZW50UHJvcGVydGllcy51aV9jdXN0b21pemF0aW9ucyA9IFtcbiAgICAgICAgICAgICAgTWV0YU1ldHJpY3NFdmVudFVpQ3VzdG9taXphdGlvbi5GbGFnZ2VkQXNTYWZldHlVbmtub3duLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobWV0aG9kID09PSBNRVNTQUdFX1RZUEUuUEVSU09OQUxfU0lHTikge1xuICAgICAgICAgICAgY29uc3QgeyBpc1NJV0VNZXNzYWdlIH0gPSBkZXRlY3RTSVdFKHsgZGF0YSB9KTtcbiAgICAgICAgICAgIGlmIChpc1NJV0VNZXNzYWdlKSB7XG4gICAgICAgICAgICAgIGV2ZW50UHJvcGVydGllcy51aV9jdXN0b21pemF0aW9ucyA9IChcbiAgICAgICAgICAgICAgICBldmVudFByb3BlcnRpZXMudWlfY3VzdG9taXphdGlvbnMgfHwgW11cbiAgICAgICAgICAgICAgKS5jb25jYXQoTWV0YU1ldHJpY3NFdmVudFVpQ3VzdG9taXphdGlvbi5TaXdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBgY3JlYXRlUlBDTWV0aG9kVHJhY2tpbmdNaWRkbGV3YXJlOiBFcnJvciBjYWxsaW5nIHNlY3VyaXR5UHJvdmlkZXJSZXF1ZXN0IC0gJHtlfWAsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXZlbnRQcm9wZXJ0aWVzLm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIH1cblxuICAgICAgdHJhY2tFdmVudCh7XG4gICAgICAgIGV2ZW50LFxuICAgICAgICBjYXRlZ29yeTogTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5LklucGFnZVByb3ZpZGVyLFxuICAgICAgICByZWZlcnJlcjoge1xuICAgICAgICAgIHVybDogb3JpZ2luLFxuICAgICAgICB9LFxuICAgICAgICBwcm9wZXJ0aWVzOiBldmVudFByb3BlcnRpZXMsXG4gICAgICB9KTtcblxuICAgICAgcmF0ZUxpbWl0VGltZW91dHNbbWV0aG9kXSA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBkZWxldGUgcmF0ZUxpbWl0VGltZW91dHNbbWV0aG9kXTtcbiAgICAgIH0sIFNFQ09ORCAqIHJhdGVMaW1pdFNlY29uZHMpO1xuICAgIH1cblxuICAgIG5leHQoYXN5bmMgKGNhbGxiYWNrKSA9PiB7XG4gICAgICBpZiAoc2hvdWxkVHJhY2tFdmVudCA9PT0gZmFsc2UgfHwgdHlwZW9mIGV2ZW50VHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBycGMgZXJyb3IgbWV0aG9kTm90Rm91bmQgaW1wbGllcyB0aGF0ICdldGhfc2lnbicgaXMgZGlzYWJsZWQgaW4gQWR2YW5jZWQgU2V0dGluZ3NcbiAgICAgIGNvbnN0IGlzRGlzYWJsZWRFdGhTaWduQWR2YW5jZWRTZXR0aW5nID1cbiAgICAgICAgbWV0aG9kID09PSBNRVNTQUdFX1RZUEUuRVRIX1NJR04gJiZcbiAgICAgICAgcmVzLmVycm9yPy5jb2RlID09PSBlcnJvckNvZGVzLnJwYy5tZXRob2ROb3RGb3VuZDtcblxuICAgICAgY29uc3QgaXNEaXNhYmxlZFJQQ01ldGhvZCA9IGlzRGlzYWJsZWRFdGhTaWduQWR2YW5jZWRTZXR0aW5nO1xuXG4gICAgICBsZXQgZXZlbnQ7XG4gICAgICBpZiAoaXNEaXNhYmxlZFJQQ01ldGhvZCkge1xuICAgICAgICBldmVudCA9IGV2ZW50VHlwZS5GQUlMRUQ7XG4gICAgICAgIGV2ZW50UHJvcGVydGllcy5lcnJvciA9IHJlcy5lcnJvcjtcbiAgICAgIH0gZWxzZSBpZiAocmVzLmVycm9yPy5jb2RlID09PSBlcnJvckNvZGVzLnByb3ZpZGVyLnVzZXJSZWplY3RlZFJlcXVlc3QpIHtcbiAgICAgICAgZXZlbnQgPSBldmVudFR5cGUuUkVKRUNURUQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBldmVudCA9IGV2ZW50VHlwZS5BUFBST1ZFRDtcbiAgICAgIH1cblxuICAgICAgdHJhY2tFdmVudCh7XG4gICAgICAgIGV2ZW50LFxuICAgICAgICBjYXRlZ29yeTogTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5LklucGFnZVByb3ZpZGVyLFxuICAgICAgICByZWZlcnJlcjoge1xuICAgICAgICAgIHVybDogb3JpZ2luLFxuICAgICAgICB9LFxuICAgICAgICBwcm9wZXJ0aWVzOiBldmVudFByb3BlcnRpZXMsXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBXcml0YWJsZSBhcyBXcml0YWJsZVN0cmVhbSB9IGZyb20gJ3JlYWRhYmxlLXN0cmVhbSc7XG5pbXBvcnQgcHJvbWlzZVRvQ2FsbGJhY2sgZnJvbSAncHJvbWlzZS10by1jYWxsYmFjayc7XG5cbmNsYXNzIEFzeW5jV3JpdGFibGVTdHJlYW0gZXh0ZW5kcyBXcml0YWJsZVN0cmVhbSB7XG4gIGNvbnN0cnVjdG9yKGFzeW5jV3JpdGVGbiwgX29wdHMpIHtcbiAgICBjb25zdCBvcHRzID0geyBvYmplY3RNb2RlOiB0cnVlLCAuLi5fb3B0cyB9O1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXMuX2FzeW5jV3JpdGVGbiA9IGFzeW5jV3JpdGVGbjtcbiAgfVxuXG4gIC8vIHdyaXRlIGZyb20gaW5jb21pbmcgc3RyZWFtIHRvIHN0YXRlXG4gIF93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgcHJvbWlzZVRvQ2FsbGJhY2sodGhpcy5fYXN5bmNXcml0ZUZuKGNodW5rLCBlbmNvZGluZykpKGNhbGxiYWNrKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHJlYW1TaW5rKGFzeW5jV3JpdGVGbiwgX29wdHMpIHtcbiAgcmV0dXJuIG5ldyBBc3luY1dyaXRhYmxlU3RyZWFtKGFzeW5jV3JpdGVGbiwgX29wdHMpO1xufVxuIiwiLyoqXG4gKiBSZXR1cm5zIGEgbWlkZGxld2FyZSB0aGF0IGFwcGVuZHMgdGhlIERBcHAgVGFiSWQgdG8gdGhlIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge3sgdGFiSWQ6IG51bWJlciB9fSBvcHRzIC0gVGhlIG1pZGRsZXdhcmUgb3B0aW9uc1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUYWJJZE1pZGRsZXdhcmUob3B0cykge1xuICByZXR1cm4gZnVuY3Rpb24gdGFiSWRNaWRkbGV3YXJlKFxuICAgIC8qKiBAdHlwZSB7YW55fSAqLyByZXEsXG4gICAgLyoqIEB0eXBlIHthbnl9ICovIF8sXG4gICAgLyoqIEB0eXBlIHtGdW5jdGlvbn0gKi8gbmV4dCxcbiAgKSB7XG4gICAgcmVxLnRhYklkID0gb3B0cy50YWJJZDtcbiAgICBuZXh0KCk7XG4gIH07XG59XG4iLCJjb25zdCBhYmkgPSBbXG4gIHtcbiAgICBjb25zdGFudDogdHJ1ZSxcbiAgICBpbnB1dHM6IFt7IG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH1dLFxuICAgIG5hbWU6ICdyZXNvbHZlcicsXG4gICAgb3V0cHV0czogW3sgbmFtZTogJycsIHR5cGU6ICdhZGRyZXNzJyB9XSxcbiAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICB9LFxuICB7XG4gICAgY29uc3RhbnQ6IHRydWUsXG4gICAgaW5wdXRzOiBbeyBuYW1lOiAnbm9kZScsIHR5cGU6ICdieXRlczMyJyB9XSxcbiAgICBuYW1lOiAnb3duZXInLFxuICAgIG91dHB1dHM6IFt7IG5hbWU6ICcnLCB0eXBlOiAnYWRkcmVzcycgfV0sXG4gICAgcGF5YWJsZTogZmFsc2UsXG4gICAgdHlwZTogJ2Z1bmN0aW9uJyxcbiAgfSxcbiAge1xuICAgIGNvbnN0YW50OiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHsgbmFtZTogJ25vZGUnLCB0eXBlOiAnYnl0ZXMzMicgfSxcbiAgICAgIHsgbmFtZTogJ2xhYmVsJywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgICB7IG5hbWU6ICdvd25lcicsIHR5cGU6ICdhZGRyZXNzJyB9LFxuICAgIF0sXG4gICAgbmFtZTogJ3NldFN1Ym5vZGVPd25lcicsXG4gICAgb3V0cHV0czogW10sXG4gICAgcGF5YWJsZTogZmFsc2UsXG4gICAgdHlwZTogJ2Z1bmN0aW9uJyxcbiAgfSxcbiAge1xuICAgIGNvbnN0YW50OiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHsgbmFtZTogJ25vZGUnLCB0eXBlOiAnYnl0ZXMzMicgfSxcbiAgICAgIHsgbmFtZTogJ3R0bCcsIHR5cGU6ICd1aW50NjQnIH0sXG4gICAgXSxcbiAgICBuYW1lOiAnc2V0VFRMJyxcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICB9LFxuICB7XG4gICAgY29uc3RhbnQ6IHRydWUsXG4gICAgaW5wdXRzOiBbeyBuYW1lOiAnbm9kZScsIHR5cGU6ICdieXRlczMyJyB9XSxcbiAgICBuYW1lOiAndHRsJyxcbiAgICBvdXRwdXRzOiBbeyBuYW1lOiAnJywgdHlwZTogJ3VpbnQ2NCcgfV0sXG4gICAgcGF5YWJsZTogZmFsc2UsXG4gICAgdHlwZTogJ2Z1bmN0aW9uJyxcbiAgfSxcbiAge1xuICAgIGNvbnN0YW50OiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHsgbmFtZTogJ25vZGUnLCB0eXBlOiAnYnl0ZXMzMicgfSxcbiAgICAgIHsgbmFtZTogJ3Jlc29sdmVyJywgdHlwZTogJ2FkZHJlc3MnIH0sXG4gICAgXSxcbiAgICBuYW1lOiAnc2V0UmVzb2x2ZXInLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHBheWFibGU6IGZhbHNlLFxuICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gIH0sXG4gIHtcbiAgICBjb25zdGFudDogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7IG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgICB7IG5hbWU6ICdvd25lcicsIHR5cGU6ICdhZGRyZXNzJyB9LFxuICAgIF0sXG4gICAgbmFtZTogJ3NldE93bmVyJyxcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHsgaW5kZXhlZDogdHJ1ZSwgbmFtZTogJ25vZGUnLCB0eXBlOiAnYnl0ZXMzMicgfSxcbiAgICAgIHsgaW5kZXhlZDogZmFsc2UsIG5hbWU6ICdvd25lcicsIHR5cGU6ICdhZGRyZXNzJyB9LFxuICAgIF0sXG4gICAgbmFtZTogJ1RyYW5zZmVyJyxcbiAgICB0eXBlOiAnZXZlbnQnLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHsgaW5kZXhlZDogdHJ1ZSwgbmFtZTogJ25vZGUnLCB0eXBlOiAnYnl0ZXMzMicgfSxcbiAgICAgIHsgaW5kZXhlZDogdHJ1ZSwgbmFtZTogJ2xhYmVsJywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgICB7IGluZGV4ZWQ6IGZhbHNlLCBuYW1lOiAnb3duZXInLCB0eXBlOiAnYWRkcmVzcycgfSxcbiAgICBdLFxuICAgIG5hbWU6ICdOZXdPd25lcicsXG4gICAgdHlwZTogJ2V2ZW50JyxcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7IGluZGV4ZWQ6IHRydWUsIG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgICB7IGluZGV4ZWQ6IGZhbHNlLCBuYW1lOiAncmVzb2x2ZXInLCB0eXBlOiAnYWRkcmVzcycgfSxcbiAgICBdLFxuICAgIG5hbWU6ICdOZXdSZXNvbHZlcicsXG4gICAgdHlwZTogJ2V2ZW50JyxcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7IGluZGV4ZWQ6IHRydWUsIG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgICB7IGluZGV4ZWQ6IGZhbHNlLCBuYW1lOiAndHRsJywgdHlwZTogJ3VpbnQ2NCcgfSxcbiAgICBdLFxuICAgIG5hbWU6ICdOZXdUVEwnLFxuICAgIHR5cGU6ICdldmVudCcsXG4gIH0sXG5dO1xuZXhwb3J0IGRlZmF1bHQgYWJpO1xuIiwiY29uc3QgYWJpID0gW1xuICB7XG4gICAgY29uc3RhbnQ6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAgeyBuYW1lOiAnbm9kZScsIHR5cGU6ICdieXRlczMyJyB9LFxuICAgICAgeyBuYW1lOiAnaGFzaCcsIHR5cGU6ICdieXRlczMyJyB9LFxuICAgIF0sXG4gICAgbmFtZTogJ3NldENvbnRlbnQnLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHBheWFibGU6IGZhbHNlLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogJ25vbnBheWFibGUnLFxuICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gIH0sXG4gIHtcbiAgICBjb25zdGFudDogdHJ1ZSxcbiAgICBpbnB1dHM6IFt7IG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH1dLFxuICAgIG5hbWU6ICdjb250ZW50JyxcbiAgICBvdXRwdXRzOiBbeyBuYW1lOiAnJywgdHlwZTogJ2J5dGVzMzInIH1dLFxuICAgIHBheWFibGU6IGZhbHNlLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogJ3ZpZXcnLFxuICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gIH0sXG4gIHtcbiAgICBjb25zdGFudDogdHJ1ZSxcbiAgICBpbnB1dHM6IFt7IG5hbWU6ICdpbnRlcmZhY2VJRCcsIHR5cGU6ICdieXRlczQnIH1dLFxuICAgIG5hbWU6ICdzdXBwb3J0c0ludGVyZmFjZScsXG4gICAgb3V0cHV0czogW3sgbmFtZTogJycsIHR5cGU6ICdib29sJyB9XSxcbiAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6ICdwdXJlJyxcbiAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICB9LFxuICB7XG4gICAgY29uc3RhbnQ6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAgeyBuYW1lOiAnbm9kZScsIHR5cGU6ICdieXRlczMyJyB9LFxuICAgICAgeyBuYW1lOiAna2V5JywgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgIHsgbmFtZTogJ3ZhbHVlJywgdHlwZTogJ3N0cmluZycgfSxcbiAgICBdLFxuICAgIG5hbWU6ICdzZXRUZXh0JyxcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6ICdub25wYXlhYmxlJyxcbiAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICB9LFxuICB7XG4gICAgY29uc3RhbnQ6IHRydWUsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7IG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgICB7IG5hbWU6ICdjb250ZW50VHlwZXMnLCB0eXBlOiAndWludDI1NicgfSxcbiAgICBdLFxuICAgIG5hbWU6ICdBQkknLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHsgbmFtZTogJ2NvbnRlbnRUeXBlJywgdHlwZTogJ3VpbnQyNTYnIH0sXG4gICAgICB7IG5hbWU6ICdkYXRhJywgdHlwZTogJ2J5dGVzJyB9LFxuICAgIF0sXG4gICAgcGF5YWJsZTogZmFsc2UsXG4gICAgc3RhdGVNdXRhYmlsaXR5OiAndmlldycsXG4gICAgdHlwZTogJ2Z1bmN0aW9uJyxcbiAgfSxcbiAge1xuICAgIGNvbnN0YW50OiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHsgbmFtZTogJ25vZGUnLCB0eXBlOiAnYnl0ZXMzMicgfSxcbiAgICAgIHsgbmFtZTogJ3gnLCB0eXBlOiAnYnl0ZXMzMicgfSxcbiAgICAgIHsgbmFtZTogJ3knLCB0eXBlOiAnYnl0ZXMzMicgfSxcbiAgICBdLFxuICAgIG5hbWU6ICdzZXRQdWJrZXknLFxuICAgIG91dHB1dHM6IFtdLFxuICAgIHBheWFibGU6IGZhbHNlLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogJ25vbnBheWFibGUnLFxuICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gIH0sXG4gIHtcbiAgICBjb25zdGFudDogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7IG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgICB7IG5hbWU6ICdoYXNoJywgdHlwZTogJ2J5dGVzJyB9LFxuICAgIF0sXG4gICAgbmFtZTogJ3NldENvbnRlbnRoYXNoJyxcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6ICdub25wYXlhYmxlJyxcbiAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICB9LFxuICB7XG4gICAgY29uc3RhbnQ6IHRydWUsXG4gICAgaW5wdXRzOiBbeyBuYW1lOiAnbm9kZScsIHR5cGU6ICdieXRlczMyJyB9XSxcbiAgICBuYW1lOiAnYWRkcicsXG4gICAgb3V0cHV0czogW3sgbmFtZTogJycsIHR5cGU6ICdhZGRyZXNzJyB9XSxcbiAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6ICd2aWV3JyxcbiAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICB9LFxuICB7XG4gICAgY29uc3RhbnQ6IHRydWUsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7IG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgICB7IG5hbWU6ICdrZXknLCB0eXBlOiAnc3RyaW5nJyB9LFxuICAgIF0sXG4gICAgbmFtZTogJ3RleHQnLFxuICAgIG91dHB1dHM6IFt7IG5hbWU6ICcnLCB0eXBlOiAnc3RyaW5nJyB9XSxcbiAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6ICd2aWV3JyxcbiAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICB9LFxuICB7XG4gICAgY29uc3RhbnQ6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAgeyBuYW1lOiAnbm9kZScsIHR5cGU6ICdieXRlczMyJyB9LFxuICAgICAgeyBuYW1lOiAnY29udGVudFR5cGUnLCB0eXBlOiAndWludDI1NicgfSxcbiAgICAgIHsgbmFtZTogJ2RhdGEnLCB0eXBlOiAnYnl0ZXMnIH0sXG4gICAgXSxcbiAgICBuYW1lOiAnc2V0QUJJJyxcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6ICdub25wYXlhYmxlJyxcbiAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICB9LFxuICB7XG4gICAgY29uc3RhbnQ6IHRydWUsXG4gICAgaW5wdXRzOiBbeyBuYW1lOiAnbm9kZScsIHR5cGU6ICdieXRlczMyJyB9XSxcbiAgICBuYW1lOiAnbmFtZScsXG4gICAgb3V0cHV0czogW3sgbmFtZTogJycsIHR5cGU6ICdzdHJpbmcnIH1dLFxuICAgIHBheWFibGU6IGZhbHNlLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogJ3ZpZXcnLFxuICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gIH0sXG4gIHtcbiAgICBjb25zdGFudDogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7IG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgICB7IG5hbWU6ICduYW1lJywgdHlwZTogJ3N0cmluZycgfSxcbiAgICBdLFxuICAgIG5hbWU6ICdzZXROYW1lJyxcbiAgICBvdXRwdXRzOiBbXSxcbiAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICBzdGF0ZU11dGFiaWxpdHk6ICdub25wYXlhYmxlJyxcbiAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICB9LFxuICB7XG4gICAgY29uc3RhbnQ6IHRydWUsXG4gICAgaW5wdXRzOiBbeyBuYW1lOiAnbm9kZScsIHR5cGU6ICdieXRlczMyJyB9XSxcbiAgICBuYW1lOiAnY29udGVudGhhc2gnLFxuICAgIG91dHB1dHM6IFt7IG5hbWU6ICcnLCB0eXBlOiAnYnl0ZXMnIH1dLFxuICAgIHBheWFibGU6IGZhbHNlLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogJ3ZpZXcnLFxuICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gIH0sXG4gIHtcbiAgICBjb25zdGFudDogdHJ1ZSxcbiAgICBpbnB1dHM6IFt7IG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH1dLFxuICAgIG5hbWU6ICdwdWJrZXknLFxuICAgIG91dHB1dHM6IFtcbiAgICAgIHsgbmFtZTogJ3gnLCB0eXBlOiAnYnl0ZXMzMicgfSxcbiAgICAgIHsgbmFtZTogJ3knLCB0eXBlOiAnYnl0ZXMzMicgfSxcbiAgICBdLFxuICAgIHBheWFibGU6IGZhbHNlLFxuICAgIHN0YXRlTXV0YWJpbGl0eTogJ3ZpZXcnLFxuICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gIH0sXG4gIHtcbiAgICBjb25zdGFudDogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7IG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgICB7IG5hbWU6ICdhZGRyJywgdHlwZTogJ2FkZHJlc3MnIH0sXG4gICAgXSxcbiAgICBuYW1lOiAnc2V0QWRkcicsXG4gICAgb3V0cHV0czogW10sXG4gICAgcGF5YWJsZTogZmFsc2UsXG4gICAgc3RhdGVNdXRhYmlsaXR5OiAnbm9ucGF5YWJsZScsXG4gICAgdHlwZTogJ2Z1bmN0aW9uJyxcbiAgfSxcbiAge1xuICAgIGlucHV0czogW3sgbmFtZTogJ2Vuc0FkZHInLCB0eXBlOiAnYWRkcmVzcycgfV0sXG4gICAgcGF5YWJsZTogZmFsc2UsXG4gICAgc3RhdGVNdXRhYmlsaXR5OiAnbm9ucGF5YWJsZScsXG4gICAgdHlwZTogJ2NvbnN0cnVjdG9yJyxcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7IGluZGV4ZWQ6IHRydWUsIG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgICB7IGluZGV4ZWQ6IGZhbHNlLCBuYW1lOiAnYScsIHR5cGU6ICdhZGRyZXNzJyB9LFxuICAgIF0sXG4gICAgbmFtZTogJ0FkZHJDaGFuZ2VkJyxcbiAgICB0eXBlOiAnZXZlbnQnLFxuICB9LFxuICB7XG4gICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICBpbnB1dHM6IFtcbiAgICAgIHsgaW5kZXhlZDogdHJ1ZSwgbmFtZTogJ25vZGUnLCB0eXBlOiAnYnl0ZXMzMicgfSxcbiAgICAgIHsgaW5kZXhlZDogZmFsc2UsIG5hbWU6ICduYW1lJywgdHlwZTogJ3N0cmluZycgfSxcbiAgICBdLFxuICAgIG5hbWU6ICdOYW1lQ2hhbmdlZCcsXG4gICAgdHlwZTogJ2V2ZW50JyxcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7IGluZGV4ZWQ6IHRydWUsIG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgICB7IGluZGV4ZWQ6IHRydWUsIG5hbWU6ICdjb250ZW50VHlwZScsIHR5cGU6ICd1aW50MjU2JyB9LFxuICAgIF0sXG4gICAgbmFtZTogJ0FCSUNoYW5nZWQnLFxuICAgIHR5cGU6ICdldmVudCcsXG4gIH0sXG4gIHtcbiAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgIGlucHV0czogW1xuICAgICAgeyBpbmRleGVkOiB0cnVlLCBuYW1lOiAnbm9kZScsIHR5cGU6ICdieXRlczMyJyB9LFxuICAgICAgeyBpbmRleGVkOiBmYWxzZSwgbmFtZTogJ3gnLCB0eXBlOiAnYnl0ZXMzMicgfSxcbiAgICAgIHsgaW5kZXhlZDogZmFsc2UsIG5hbWU6ICd5JywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgXSxcbiAgICBuYW1lOiAnUHVia2V5Q2hhbmdlZCcsXG4gICAgdHlwZTogJ2V2ZW50JyxcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7IGluZGV4ZWQ6IHRydWUsIG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgICB7IGluZGV4ZWQ6IGZhbHNlLCBuYW1lOiAnaW5kZXhlZEtleScsIHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICB7IGluZGV4ZWQ6IGZhbHNlLCBuYW1lOiAna2V5JywgdHlwZTogJ3N0cmluZycgfSxcbiAgICBdLFxuICAgIG5hbWU6ICdUZXh0Q2hhbmdlZCcsXG4gICAgdHlwZTogJ2V2ZW50JyxcbiAgfSxcbiAge1xuICAgIGFub255bW91czogZmFsc2UsXG4gICAgaW5wdXRzOiBbXG4gICAgICB7IGluZGV4ZWQ6IHRydWUsIG5hbWU6ICdub2RlJywgdHlwZTogJ2J5dGVzMzInIH0sXG4gICAgICB7IGluZGV4ZWQ6IGZhbHNlLCBuYW1lOiAnaGFzaCcsIHR5cGU6ICdieXRlcycgfSxcbiAgICBdLFxuICAgIG5hbWU6ICdDb250ZW50aGFzaENoYW5nZWQnLFxuICAgIHR5cGU6ICdldmVudCcsXG4gIH0sXG5dO1xuZXhwb3J0IGRlZmF1bHQgYWJpO1xuIiwiaW1wb3J0IG5hbWVoYXNoIGZyb20gJ2V0aC1lbnMtbmFtZWhhc2gnO1xuaW1wb3J0IEV0aCBmcm9tICdldGhqcy1xdWVyeSc7XG5pbXBvcnQgRXRoQ29udHJhY3QgZnJvbSAnZXRoanMtY29udHJhY3QnO1xuaW1wb3J0IGNvbnRlbnRIYXNoIGZyb20gJ0BlbnNkb21haW5zL2NvbnRlbnQtaGFzaCc7XG5pbXBvcnQgcmVnaXN0cnlBYmkgZnJvbSAnLi9jb250cmFjdHMvcmVnaXN0cnknO1xuaW1wb3J0IHJlc29sdmVyQWJpIGZyb20gJy4vY29udHJhY3RzL3Jlc29sdmVyJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZUVuc1RvSXBmc0NvbnRlbnRJZCh7IHByb3ZpZGVyLCBuYW1lIH0pIHtcbiAgY29uc3QgZXRoID0gbmV3IEV0aChwcm92aWRlcik7XG4gIGNvbnN0IGhhc2ggPSBuYW1laGFzaC5oYXNoKG5hbWUpO1xuICBjb25zdCBjb250cmFjdCA9IG5ldyBFdGhDb250cmFjdChldGgpO1xuICAvLyBsb29rdXAgcmVnaXN0cnlcbiAgY29uc3QgY2hhaW5JZCA9IE51bWJlci5wYXJzZUludChhd2FpdCBldGgubmV0X3ZlcnNpb24oKSwgMTApO1xuICBjb25zdCByZWdpc3RyeUFkZHJlc3MgPSBnZXRSZWdpc3RyeUZvckNoYWluSWQoY2hhaW5JZCk7XG4gIGlmICghcmVnaXN0cnlBZGRyZXNzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEVuc0lwZnNSZXNvbHZlciAtIG5vIGtub3duIGVucy1pcGZzIHJlZ2lzdHJ5IGZvciBjaGFpbklkIFwiJHtjaGFpbklkfVwiYCxcbiAgICApO1xuICB9XG4gIGNvbnN0IFJlZ2lzdHJ5ID0gY29udHJhY3QocmVnaXN0cnlBYmkpLmF0KHJlZ2lzdHJ5QWRkcmVzcyk7XG4gIC8vIGxvb2t1cCByZXNvbHZlclxuICBjb25zdCByZXNvbHZlckxvb2t1cFJlc3VsdCA9IGF3YWl0IFJlZ2lzdHJ5LnJlc29sdmVyKGhhc2gpO1xuICBjb25zdCByZXNvbHZlckFkZHJlc3MgPSByZXNvbHZlckxvb2t1cFJlc3VsdFswXTtcbiAgaWYgKGhleFZhbHVlSXNFbXB0eShyZXNvbHZlckFkZHJlc3MpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFbnNJcGZzUmVzb2x2ZXIgLSBubyByZXNvbHZlciBmb3VuZCBmb3IgbmFtZSBcIiR7bmFtZX1cImApO1xuICB9XG4gIGNvbnN0IFJlc29sdmVyID0gY29udHJhY3QocmVzb2x2ZXJBYmkpLmF0KHJlc29sdmVyQWRkcmVzcyk7XG5cbiAgY29uc3QgaXNFSVAxNTc3Q29tcGxpYW50ID0gYXdhaXQgUmVzb2x2ZXIuc3VwcG9ydHNJbnRlcmZhY2UoJzB4YmMxYzU4ZDEnKTtcbiAgY29uc3QgaXNMZWdhY3lSZXNvbHZlciA9IGF3YWl0IFJlc29sdmVyLnN1cHBvcnRzSW50ZXJmYWNlKCcweGQ4Mzg5ZGM1Jyk7XG4gIGlmIChpc0VJUDE1NzdDb21wbGlhbnRbMF0pIHtcbiAgICBjb25zdCBjb250ZW50TG9va3VwUmVzdWx0ID0gYXdhaXQgUmVzb2x2ZXIuY29udGVudGhhc2goaGFzaCk7XG4gICAgY29uc3QgcmF3Q29udGVudEhhc2ggPSBjb250ZW50TG9va3VwUmVzdWx0WzBdO1xuICAgIGxldCBkZWNvZGVkQ29udGVudEhhc2ggPSBjb250ZW50SGFzaC5kZWNvZGUocmF3Q29udGVudEhhc2gpO1xuICAgIGNvbnN0IHR5cGUgPSBjb250ZW50SGFzaC5nZXRDb2RlYyhyYXdDb250ZW50SGFzaCk7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2lwZnMtbnMnIHx8IHR5cGUgPT09ICdpcG5zLW5zJykge1xuICAgICAgZGVjb2RlZENvbnRlbnRIYXNoID1cbiAgICAgICAgY29udGVudEhhc2guaGVscGVycy5jaWRWMFRvVjFCYXNlMzIoZGVjb2RlZENvbnRlbnRIYXNoKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyB0eXBlLCBoYXNoOiBkZWNvZGVkQ29udGVudEhhc2ggfTtcbiAgfVxuICBpZiAoaXNMZWdhY3lSZXNvbHZlclswXSkge1xuICAgIC8vIGxvb2t1cCBjb250ZW50IGlkXG4gICAgY29uc3QgY29udGVudExvb2t1cFJlc3VsdCA9IGF3YWl0IFJlc29sdmVyLmNvbnRlbnQoaGFzaCk7XG4gICAgY29uc3QgY29udGVudCA9IGNvbnRlbnRMb29rdXBSZXN1bHRbMF07XG4gICAgaWYgKGhleFZhbHVlSXNFbXB0eShjb250ZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRW5zSXBmc1Jlc29sdmVyIC0gbm8gY29udGVudCBJRCBmb3VuZCBmb3IgbmFtZSBcIiR7bmFtZX1cImAsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4geyB0eXBlOiAnc3dhcm0tbnMnLCBoYXNoOiBjb250ZW50LnNsaWNlKDIpIH07XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIGBFbnNJcGZzUmVzb2x2ZXIgLSB0aGUgcmVzb2x2ZXIgZm9yIG5hbWUgXCIke25hbWV9XCIgaXMgbm90IHN0YW5kYXJkLCBpdCBzaG91bGQgZWl0aGVyIHN1cHBvcnRzIGNvbnRlbnRoYXNoKCkgb3IgY29udGVudCgpYCxcbiAgKTtcbn1cblxuZnVuY3Rpb24gaGV4VmFsdWVJc0VtcHR5KHZhbHVlKSB7XG4gIHJldHVybiBbXG4gICAgdW5kZWZpbmVkLFxuICAgIG51bGwsXG4gICAgJzB4JyxcbiAgICAnMHgwJyxcbiAgICAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgXS5pbmNsdWRlcyh2YWx1ZSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmVnaXN0cnkgYWRkcmVzcyBmb3IgdGhlIGdpdmVuIGNoYWluIElEXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGNoYWluSWQgLSB0aGUgY2hhaW4gSURcbiAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gdGhlIHJlZ2lzdHJ5IGFkZHJlc3MgaWYga25vd24sIG51bGwgb3RoZXJ3aXNlXG4gKi9cbmZ1bmN0aW9uIGdldFJlZ2lzdHJ5Rm9yQ2hhaW5JZChjaGFpbklkKSB7XG4gIHN3aXRjaCAoY2hhaW5JZCkge1xuICAgIGNhc2UgMTpcbiAgICBjYXNlIDM6XG4gICAgY2FzZSA0OlxuICAgIGNhc2UgNTpcbiAgICBjYXNlIDY6XG4gICAgICAvLyBNYWlubmV0IGFuZCBHb2VybGksIHJlc3BlY3RpdmVseSwgdXNlIHRoZSBzYW1lIGFkZHJlc3NcbiAgICAgIHJldHVybiAnMHgwMDAwMDAwMDAwMEMyRTA3NGVDNjlBMGRGYjI5OTdCQTZDN2QyZTFlJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCBiYXNlMzJFbmNvZGUgZnJvbSAnYmFzZTMyLWVuY29kZSc7XG5pbXBvcnQgYmFzZTY0IGZyb20gJ2Jhc2U2NC1qcyc7XG5pbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnO1xuXG5pbXBvcnQgZ2V0RmV0Y2hXaXRoVGltZW91dCBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9mZXRjaC13aXRoLXRpbWVvdXQnO1xuaW1wb3J0IHJlc29sdmVFbnNUb0lwZnNDb250ZW50SWQgZnJvbSAnLi9yZXNvbHZlcic7XG5cbmNvbnN0IGZldGNoV2l0aFRpbWVvdXQgPSBnZXRGZXRjaFdpdGhUaW1lb3V0KCk7XG5cbmNvbnN0IHN1cHBvcnRlZFRvcExldmVsRG9tYWlucyA9IFsnZXRoJ107XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldHVwRW5zSXBmc1Jlc29sdmVyKHtcbiAgcHJvdmlkZXIsXG4gIGdldEN1cnJlbnRDaGFpbklkLFxuICBnZXRJcGZzR2F0ZXdheSxcbn0pIHtcbiAgLy8gaW5zdGFsbCBsaXN0ZW5lclxuICBjb25zdCB1cmxQYXR0ZXJucyA9IHN1cHBvcnRlZFRvcExldmVsRG9tYWlucy5tYXAoKHRsZCkgPT4gYCo6Ly8qLiR7dGxkfS8qYCk7XG4gIGJyb3dzZXIud2ViUmVxdWVzdC5vbkVycm9yT2NjdXJyZWQuYWRkTGlzdGVuZXIod2ViUmVxdWVzdERpZEZhaWwsIHtcbiAgICB1cmxzOiB1cmxQYXR0ZXJucyxcbiAgICB0eXBlczogWydtYWluX2ZyYW1lJ10sXG4gIH0pO1xuXG4gIC8vIHJldHVybiBhcGkgb2JqZWN0XG4gIHJldHVybiB7XG4gICAgLy8gdW5pbnN0YWxsIGxpc3RlbmVyXG4gICAgcmVtb3ZlKCkge1xuICAgICAgYnJvd3Nlci53ZWJSZXF1ZXN0Lm9uRXJyb3JPY2N1cnJlZC5yZW1vdmVMaXN0ZW5lcih3ZWJSZXF1ZXN0RGlkRmFpbCk7XG4gICAgfSxcbiAgfTtcblxuICBhc3luYyBmdW5jdGlvbiB3ZWJSZXF1ZXN0RGlkRmFpbChkZXRhaWxzKSB7XG4gICAgY29uc3QgeyB0YWJJZCwgdXJsIH0gPSBkZXRhaWxzO1xuICAgIC8vIGlnbm9yZSByZXF1ZXN0cyB0aGF0IGFyZSBub3QgYXNzb2NpYXRlZCB3aXRoIHRhYnNcbiAgICAvLyBvbmx5IGF0dGVtcHQgRU5TIHJlc29sdXRpb24gb24gbWFpbm5ldFxuICAgIGlmICh0YWJJZCA9PT0gLTEgfHwgZ2V0Q3VycmVudENoYWluSWQoKSAhPT0gJzB4MScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gcGFyc2UgZW5zIG5hbWVcbiAgICBjb25zdCB7IGhvc3RuYW1lOiBuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoOiBmcmFnbWVudCB9ID0gbmV3IFVSTCh1cmwpO1xuICAgIGNvbnN0IGRvbWFpblBhcnRzID0gbmFtZS5zcGxpdCgnLicpO1xuICAgIGNvbnN0IHRvcExldmVsRG9tYWluID0gZG9tYWluUGFydHNbZG9tYWluUGFydHMubGVuZ3RoIC0gMV07XG4gICAgLy8gaWYgdW5zdXBwb3J0ZWQgVExELCBhYm9ydFxuICAgIGlmICghc3VwcG9ydGVkVG9wTGV2ZWxEb21haW5zLmluY2x1ZGVzKHRvcExldmVsRG9tYWluKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBvdGhlcndpc2UgYXR0ZW1wdCByZXNvbHZlXG4gICAgYXR0ZW1wdFJlc29sdmUoeyB0YWJJZCwgbmFtZSwgcGF0aG5hbWUsIHNlYXJjaCwgZnJhZ21lbnQgfSk7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBhdHRlbXB0UmVzb2x2ZSh7IHRhYklkLCBuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBmcmFnbWVudCB9KSB7XG4gICAgY29uc3QgaXBmc0dhdGV3YXkgPSBnZXRJcGZzR2F0ZXdheSgpO1xuXG4gICAgYnJvd3Nlci50YWJzLnVwZGF0ZSh0YWJJZCwgeyB1cmw6IGBsb2FkaW5nLmh0bWxgIH0pO1xuICAgIGxldCB1cmwgPSBgaHR0cHM6Ly9hcHAuZW5zLmRvbWFpbnMvbmFtZS8ke25hbWV9YDtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyB0eXBlLCBoYXNoIH0gPSBhd2FpdCByZXNvbHZlRW5zVG9JcGZzQ29udGVudElkKHtcbiAgICAgICAgcHJvdmlkZXIsXG4gICAgICAgIG5hbWUsXG4gICAgICB9KTtcbiAgICAgIGlmICh0eXBlID09PSAnaXBmcy1ucycgfHwgdHlwZSA9PT0gJ2lwbnMtbnMnKSB7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkVXJsID0gYGh0dHBzOi8vJHtoYXNofS4ke3R5cGUuc2xpY2UoXG4gICAgICAgICAgMCxcbiAgICAgICAgICA0LFxuICAgICAgICApfS4ke2lwZnNHYXRld2F5fSR7cGF0aG5hbWV9JHtzZWFyY2ggfHwgJyd9JHtmcmFnbWVudCB8fCAnJ31gO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIGNoZWNrIGlmIGlwZnMgZ2F0ZXdheSBoYXMgcmVzdWx0XG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaFdpdGhUaW1lb3V0KHJlc29sdmVkVXJsLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdIRUFEJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHVybCA9IHJlc29sdmVkVXJsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N3YXJtLW5zJykge1xuICAgICAgICB1cmwgPSBgaHR0cHM6Ly9zd2FybS1nYXRld2F5cy5uZXQvYnp6Oi8ke2hhc2h9JHtwYXRobmFtZX0ke1xuICAgICAgICAgIHNlYXJjaCB8fCAnJ1xuICAgICAgICB9JHtmcmFnbWVudCB8fCAnJ31gO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnb25pb24nIHx8IHR5cGUgPT09ICdvbmlvbjMnKSB7XG4gICAgICAgIHVybCA9IGBodHRwOi8vJHtoYXNofS5vbmlvbiR7cGF0aG5hbWV9JHtzZWFyY2ggfHwgJyd9JHtmcmFnbWVudCB8fCAnJ31gO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnemVyb25ldCcpIHtcbiAgICAgICAgdXJsID0gYGh0dHA6Ly8xMjcuMC4wLjE6NDMxMTAvJHtoYXNofSR7cGF0aG5hbWV9JHtzZWFyY2ggfHwgJyd9JHtcbiAgICAgICAgICBmcmFnbWVudCB8fCAnJ1xuICAgICAgICB9YDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3NreW5ldC1ucycpIHtcbiAgICAgICAgY29uc3QgcGFkZGVkID0gaGFzaC5wYWRFbmQoaGFzaC5sZW5ndGggKyA0IC0gKGhhc2gubGVuZ3RoICUgNCksICc9Jyk7XG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSBiYXNlNjQudG9CeXRlQXJyYXkocGFkZGVkKTtcblxuICAgICAgICBjb25zdCBvcHRpb25zID0geyBwYWRkaW5nOiBmYWxzZSB9O1xuICAgICAgICBjb25zdCBiYXNlMzJFbmNvZGVkU2t5bGluayA9IGJhc2UzMkVuY29kZShcbiAgICAgICAgICBkZWNvZGVkLFxuICAgICAgICAgICdSRkM0NjQ4LUhFWCcsXG4gICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB1cmwgPSBgaHR0cHM6Ly8ke2Jhc2UzMkVuY29kZWRTa3lsaW5rfS5zaWFza3kubmV0JHtwYXRobmFtZX0ke1xuICAgICAgICAgIHNlYXJjaCB8fCAnJ1xuICAgICAgICB9JHtmcmFnbWVudCB8fCAnJ31gO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGJyb3dzZXIudGFicy51cGRhdGUodGFiSWQsIHsgdXJsIH0pO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoJztcblxuLy8gVGhpcyB3aWxsIGNyZWF0ZSBhbiBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIGdpdmVuIG9iamVjdFxuLy8gaXQgcmVwbGFjZXMgYWxsIHZhbHVlcyB3aXRoIHRoZSByZXN1bHQgb2YgdGhlaXIgdHlwZVxuXG4vLyB7XG4vLyAgIFwiZGF0YVwiOiB7XG4vLyAgICAgXCJDdXJyZW5jeUNvbnRyb2xsZXJcIjoge1xuLy8gICAgICAgXCJjb252ZXJzaW9uRGF0ZVwiOiBcIm51bWJlclwiLFxuLy8gICAgICAgXCJjb252ZXJzaW9uUmF0ZVwiOiBcIm51bWJlclwiLFxuLy8gICAgICAgXCJjdXJyZW50Q3VycmVuY3lcIjogXCJzdHJpbmdcIlxuLy8gICAgIH1cbi8vIH1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgZ2l2ZW4gb2JqZWN0LiBJdCByZXBsYWNlcyBhbGwgdmFsdWVzIHdpdGggdGhlIHJlc3VsdCBvZiB0aGVpclxuICogdHlwZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqIC0gVGhlIG9iamVjdCBmb3Igd2hpY2ggYSAnc3RydWN0dXJlJyB3aWxsIGJlIHJldHVybmVkLiBVc3VhbGx5IGEgcGxhaW4gb2JqZWN0IGFuZCBub3QgYSBjbGFzcy5cbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSBcIm1hcHBlZFwiIHZlcnNpb24gb2YgYSBkZWVwIGNsb25lIG9mIHRoZSBwYXNzZWQgb2JqZWN0LCB3aXRoIGVhY2ggbm9uLW9iamVjdCBwcm9wZXJ0eSB2YWx1ZVxuICogcmVwbGFjZWQgd2l0aCB0aGUgamF2YXNjcmlwdCB0eXBlIG9mIHRoYXQgdmFsdWUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9ialN0cnVjdHVyZShvYmopIHtcbiAgY29uc3Qgc3RydWN0dXJlID0gY2xvbmVEZWVwKG9iaik7XG4gIHJldHVybiBkZWVwTWFwKHN0cnVjdHVyZSwgKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIHZhbHVlO1xuICB9KTtcbn1cblxuLyoqXG4gKiBNb2RpZmllcyBhbGwgdGhlIHByb3BlcnRpZXMgYW5kIGRlZXBseSBuZXN0ZWQgb2YgYSBwYXNzZWQgb2JqZWN0LiBJdGVyYXRlcyByZWN1cnNpdmVseSBvdmVyIGFsbCBuZXN0ZWQgb2JqZWN0cyBhbmRcbiAqIHRoZWlyIHByb3BlcnRpZXMsIGFuZCBjb3ZlcnMgdGhlIGVudGlyZSBkZXB0aCBvZiB0aGUgb2JqZWN0LiBBdCBlYWNoIHByb3BlcnR5IHZhbHVlIHdoaWNoIGlzIG5vdCBhbiBvYmplY3QgaXMgbW9kaWZpZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHRhcmdldCAtIFRoZSBvYmplY3QgdG8gbW9kaWZ5XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB2aXNpdCAtIFRoZSBtb2RpZmllciB0byBhcHBseSB0byBlYWNoIG5vbi1vYmplY3QgcHJvcGVydHkgdmFsdWVcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSBtb2RpZmllZCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZGVlcE1hcCh0YXJnZXQgPSB7fSwgdmlzaXQpIHtcbiAgT2JqZWN0LmVudHJpZXModGFyZ2V0KS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBkZWVwTWFwKHZhbHVlLCB2aXNpdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldFtrZXldID0gdmlzaXQodmFsdWUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0YXJnZXQ7XG59XG4iLCJpbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnO1xuaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5pbXBvcnQgeyBjYXB0dXJlRXhjZXB0aW9uIH0gZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbmltcG9ydCB7IGNoZWNrRm9yTGFzdEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvYnJvd3Nlci1ydW50aW1lLnV0aWxzJztcblxuLyoqXG4gKiBBIHdyYXBwZXIgYXJvdW5kIHRoZSBleHRlbnNpb24ncyBzdG9yYWdlIGxvY2FsIEFQSVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHRlbnNpb25TdG9yZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaXNTdXBwb3J0ZWQgPSBCb29sZWFuKGJyb3dzZXIuc3RvcmFnZS5sb2NhbCk7XG4gICAgaWYgKCF0aGlzLmlzU3VwcG9ydGVkKSB7XG4gICAgICBsb2cuZXJyb3IoJ1N0b3JhZ2UgbG9jYWwgQVBJIG5vdCBhdmFpbGFibGUuJyk7XG4gICAgfVxuICAgIC8vIHdlIHVzZSB0aGlzIGZsYWcgdG8gYXZvaWQgZmxvb2Rpbmcgc2VudHJ5IHdpdGggYSB0b24gb2YgZXJyb3JzOlxuICAgIC8vIG9uY2UgZGF0YSBwZXJzaXN0ZW5jZSBmYWlscyBvbmNlIGFuZCBpdCBmbGlwcyB0cnVlIHdlIGRvbid0IHNlbmQgZnVydGhlclxuICAgIC8vIGRhdGEgcGVyc2lzdGVuY2UgZXJyb3JzIHRvIHNlbnRyeVxuICAgIHRoaXMuZGF0YVBlcnNpc3RlbmNlRmFpbGluZyA9IGZhbHNlO1xuICB9XG5cbiAgc2V0TWV0YWRhdGEoaW5pdE1ldGFEYXRhKSB7XG4gICAgdGhpcy5tZXRhZGF0YSA9IGluaXRNZXRhRGF0YTtcbiAgfVxuXG4gIGFzeW5jIHNldChzdGF0ZSkge1xuICAgIGlmICghdGhpcy5pc1N1cHBvcnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnTWV0YW1hc2stIGNhbm5vdCBwZXJzaXN0IHN0YXRlIHRvIGxvY2FsIHN0b3JlIGFzIHRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoaXMgYWN0aW9uJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghc3RhdGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWV0YU1hc2sgLSB1cGRhdGVkIHN0YXRlIGlzIG1pc3NpbmcnKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLm1ldGFkYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdNZXRhTWFzayAtIG1ldGFkYXRhIG11c3QgYmUgc2V0IG9uIGluc3RhbmNlIG9mIEV4dGVuc2lvblN0b3JlIGJlZm9yZSBjYWxsaW5nIFwic2V0XCInLFxuICAgICAgKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIHdlIGZvcm1hdCB0aGUgZGF0YSBmb3Igc3RvcmFnZSBhcyBhbiBvYmplY3Qgd2l0aCB0aGUgXCJkYXRhXCIga2V5IGZvciB0aGUgY29udHJvbGxlciBzdGF0ZSBvYmplY3RcbiAgICAgIC8vIGFuZCB0aGUgXCJtZXRhXCIga2V5IGZvciBhIG1ldGFkYXRhIG9iamVjdCBjb250YWluaW5nIGEgdmVyc2lvbiBudW1iZXIgdGhhdCB0cmFja3MgaG93IHRoZSBkYXRhIHNoYXBlXG4gICAgICAvLyBoYXMgY2hhbmdlZCB1c2luZyBtaWdyYXRpb25zIHRvIGFkYXB0IHRvIGJhY2t3YXJkcyBpbmNvbXBhdGlibGUgY2hhbmdlc1xuICAgICAgYXdhaXQgdGhpcy5fc2V0KHsgZGF0YTogc3RhdGUsIG1ldGE6IHRoaXMubWV0YWRhdGEgfSk7XG4gICAgICBpZiAodGhpcy5kYXRhUGVyc2lzdGVuY2VGYWlsaW5nKSB7XG4gICAgICAgIHRoaXMuZGF0YVBlcnNpc3RlbmNlRmFpbGluZyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKCF0aGlzLmRhdGFQZXJzaXN0ZW5jZUZhaWxpbmcpIHtcbiAgICAgICAgdGhpcy5kYXRhUGVyc2lzdGVuY2VGYWlsaW5nID0gdHJ1ZTtcbiAgICAgICAgY2FwdHVyZUV4Y2VwdGlvbihlcnIpO1xuICAgICAgfVxuICAgICAgbG9nLmVycm9yKCdlcnJvciBzZXR0aW5nIHN0YXRlIGluIGxvY2FsIHN0b3JlOicsIGVycik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIG9mIHRoZSBrZXlzIGN1cnJlbnRseSBzYXZlZFxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTwqPn1cbiAgICovXG4gIGFzeW5jIGdldCgpIHtcbiAgICBpZiAoIXRoaXMuaXNTdXBwb3J0ZWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2dldCgpO1xuICAgIC8vIGV4dGVuc2lvbi5zdG9yYWdlLmxvY2FsIGFsd2F5cyByZXR1cm5zIGFuIG9ialxuICAgIC8vIGlmIHRoZSBvYmplY3QgaXMgZW1wdHksIHRyZWF0IGl0IGFzIHVuZGVmaW5lZFxuICAgIGlmIChpc0VtcHR5KHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbGwgb2YgdGhlIGtleXMgY3VycmVudGx5IHNhdmVkXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSBrZXktdmFsdWUgbWFwIGZyb20gbG9jYWwgc3RvcmFnZVxuICAgKi9cbiAgX2dldCgpIHtcbiAgICBjb25zdCB7IGxvY2FsIH0gPSBicm93c2VyLnN0b3JhZ2U7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxvY2FsLmdldChudWxsKS50aGVuKCgvKiogQHR5cGUge2FueX0gKi8gcmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnN0IGVyciA9IGNoZWNrRm9yTGFzdEVycm9yKCk7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGtleSBpbiBsb2NhbCBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gb2JqIC0gVGhlIGtleSB0byBzZXRcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0KG9iaikge1xuICAgIGNvbnN0IHsgbG9jYWwgfSA9IGJyb3dzZXIuc3RvcmFnZTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbG9jYWwuc2V0KG9iaikudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVyciA9IGNoZWNrRm9yTGFzdEVycm9yKCk7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgZ2l2ZW4gb2JqZWN0IGNvbnRhaW5zIG5vIGtleXNcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqIC0gVGhlIG9iamVjdCB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cbiIsImltcG9ydCB7IGNyZWF0ZUFzeW5jTWlkZGxld2FyZSB9IGZyb20gJ2pzb24tcnBjLWVuZ2luZSc7XG5pbXBvcnQgeyBmb3JtYXRUeE1ldGFGb3JScGNSZXN1bHQgfSBmcm9tICcuLi91dGlsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBlbmRpbmdOb25jZU1pZGRsZXdhcmUoeyBnZXRQZW5kaW5nTm9uY2UgfSkge1xuICByZXR1cm4gY3JlYXRlQXN5bmNNaWRkbGV3YXJlKGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIGNvbnN0IHsgbWV0aG9kLCBwYXJhbXMgfSA9IHJlcTtcbiAgICBpZiAobWV0aG9kICE9PSAnZXRoX2dldFRyYW5zYWN0aW9uQ291bnQnKSB7XG4gICAgICBuZXh0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IFtwYXJhbSwgYmxvY2tSZWZdID0gcGFyYW1zO1xuICAgIGlmIChibG9ja1JlZiAhPT0gJ3BlbmRpbmcnKSB7XG4gICAgICBuZXh0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcy5yZXN1bHQgPSBhd2FpdCBnZXRQZW5kaW5nTm9uY2UocGFyYW0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBlbmRpbmdUeE1pZGRsZXdhcmUoeyBnZXRQZW5kaW5nVHJhbnNhY3Rpb25CeUhhc2ggfSkge1xuICByZXR1cm4gY3JlYXRlQXN5bmNNaWRkbGV3YXJlKGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIGNvbnN0IHsgbWV0aG9kLCBwYXJhbXMgfSA9IHJlcTtcbiAgICBpZiAobWV0aG9kICE9PSAnZXRoX2dldFRyYW5zYWN0aW9uQnlIYXNoJykge1xuICAgICAgbmV4dCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBbaGFzaF0gPSBwYXJhbXM7XG4gICAgY29uc3QgdHhNZXRhID0gZ2V0UGVuZGluZ1RyYW5zYWN0aW9uQnlIYXNoKGhhc2gpO1xuICAgIGlmICghdHhNZXRhKSB7XG4gICAgICBuZXh0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcy5yZXN1bHQgPSBmb3JtYXRUeE1ldGFGb3JScGNSZXN1bHQodHhNZXRhKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gTWlncmF0aW9uXG4gKiBAcHJvcGVydHkge251bWJlcn0gdmVyc2lvbiAtIFRoZSBtaWdyYXRpb24gdmVyc2lvblxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gbWlncmF0ZSAtIFJldHVybnMgYSBwcm9taXNlIG9mIHRoZSBtaWdyYXRlZCBkYXRhXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBNaWdyYXRvck9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8TWlncmF0aW9uPn0gW21pZ3JhdGlvbnNdIC0gVGhlIGxpc3Qgb2YgbWlncmF0aW9ucyB0byBhcHBseVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtkZWZhdWx0VmVyc2lvbl0gLSBUaGUgdmVyc2lvbiB0byB1c2UgaW4gdGhlIGluaXRpYWwgc3RhdGVcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNaWdyYXRvciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge01pZ3JhdG9yT3B0aW9uc30gb3B0c1xuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICBjb25zdCBtaWdyYXRpb25zID0gb3B0cy5taWdyYXRpb25zIHx8IFtdO1xuICAgIC8vIHNvcnQgbWlncmF0aW9ucyBieSB2ZXJzaW9uXG4gICAgdGhpcy5taWdyYXRpb25zID0gbWlncmF0aW9ucy5zb3J0KChhLCBiKSA9PiBhLnZlcnNpb24gLSBiLnZlcnNpb24pO1xuICAgIC8vIGdyYWIgbWlncmF0aW9uIHdpdGggaGlnaGVzdCB2ZXJzaW9uXG4gICAgY29uc3QgbGFzdE1pZ3JhdGlvbiA9IHRoaXMubWlncmF0aW9ucy5zbGljZSgtMSlbMF07XG4gICAgLy8gdXNlIHNwZWNpZmllZCBkZWZhdWx0VmVyc2lvbiBvciBoaWdoZXN0IG1pZ3JhdGlvbiB2ZXJzaW9uXG4gICAgdGhpcy5kZWZhdWx0VmVyc2lvbiA9XG4gICAgICBvcHRzLmRlZmF1bHRWZXJzaW9uIHx8IChsYXN0TWlncmF0aW9uICYmIGxhc3RNaWdyYXRpb24udmVyc2lvbikgfHwgMDtcbiAgfVxuXG4gIC8vIHJ1biBhbGwgcGVuZGluZyBtaWdyYXRpb25zIG9uIG1ldGEgaW4gcGxhY2VcbiAgYXN5bmMgbWlncmF0ZURhdGEodmVyc2lvbmVkRGF0YSA9IHRoaXMuZ2VuZXJhdGVJbml0aWFsU3RhdGUoKSkge1xuICAgIC8vIGdldCBhbGwgbWlncmF0aW9ucyB0aGF0IGhhdmUgbm90IHlldCBiZWVuIHJ1blxuICAgIGNvbnN0IHBlbmRpbmdNaWdyYXRpb25zID0gdGhpcy5taWdyYXRpb25zLmZpbHRlcihtaWdyYXRpb25Jc1BlbmRpbmcpO1xuXG4gICAgLy8gcGVyZm9ybSBlYWNoIG1pZ3JhdGlvblxuICAgIGZvciAoY29uc3QgbWlncmF0aW9uIG9mIHBlbmRpbmdNaWdyYXRpb25zKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBhdHRlbXB0IG1pZ3JhdGlvbiBhbmQgdmFsaWRhdGVcbiAgICAgICAgY29uc3QgbWlncmF0ZWREYXRhID0gYXdhaXQgbWlncmF0aW9uLm1pZ3JhdGUodmVyc2lvbmVkRGF0YSk7XG4gICAgICAgIGlmICghbWlncmF0ZWREYXRhLmRhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pZ3JhdG9yIC0gbWlncmF0aW9uIHJldHVybmVkIGVtcHR5IGRhdGEnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgbWlncmF0ZWREYXRhLnZlcnNpb24gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgIG1pZ3JhdGVkRGF0YS5tZXRhLnZlcnNpb24gIT09IG1pZ3JhdGlvbi52ZXJzaW9uXG4gICAgICAgICkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdNaWdyYXRvciAtIE1pZ3JhdGlvbiBkaWQgbm90IHVwZGF0ZSB2ZXJzaW9uIG51bWJlciBjb3JyZWN0bHknLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWNjZXB0IHRoZSBtaWdyYXRpb24gYXMgZ29vZFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgdmVyc2lvbmVkRGF0YSA9IG1pZ3JhdGVkRGF0YTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyByZXdyaXRlIGVycm9yIG1lc3NhZ2UgdG8gYWRkIGNvbnRleHQgd2l0aG91dCBjbG9iYmVyaW5nIHN0YWNrXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsRXJyb3JNZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG4gICAgICAgIGVyci5tZXNzYWdlID0gYE1ldGFNYXNrIE1pZ3JhdGlvbiBFcnJvciAjJHttaWdyYXRpb24udmVyc2lvbn06ICR7b3JpZ2luYWxFcnJvck1lc3NhZ2V9YDtcbiAgICAgICAgLy8gZW1pdCBlcnJvciBpbnN0ZWFkIG9mIHRocm93IHNvIGFzIHRvIG5vdCBicmVhayB0aGUgcnVuIChncmFjZWZ1bGx5IGZhaWwpXG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAvLyBzdG9wIG1pZ3JhdGluZyBhbmQgdXNlIHN0YXRlIGFzIGlzXG4gICAgICAgIHJldHVybiB2ZXJzaW9uZWREYXRhO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2ZXJzaW9uZWREYXRhO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWlncmF0aW9uIGlzIHBlbmRpbmdcbiAgICAgKlxuICAgICAqIEEgbWlncmF0aW9uIGlzIGNvbnNpZGVyZWQgXCJwZW5kaW5nXCIgaWYgaXQgaGFzIGEgaGlnaGVyXG4gICAgICogdmVyc2lvbiBudW1iZXIgdGhhbiB0aGUgY3VycmVudCB2ZXJzaW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtNaWdyYXRpb259IG1pZ3JhdGlvblxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pZ3JhdGlvbklzUGVuZGluZyhtaWdyYXRpb24pIHtcbiAgICAgIHJldHVybiBtaWdyYXRpb24udmVyc2lvbiA+IHZlcnNpb25lZERhdGEubWV0YS52ZXJzaW9uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpbml0aWFsIHN0YXRlIGZvciB0aGUgbWlncmF0b3JcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IFtkYXRhXSAtIFRoZSBkYXRhIGZvciB0aGUgaW5pdGlhbCBzdGF0ZVxuICAgKiBAcmV0dXJucyB7e21ldGE6IHt2ZXJzaW9uOiBudW1iZXJ9LCBkYXRhOiBhbnl9fVxuICAgKi9cbiAgZ2VuZXJhdGVJbml0aWFsU3RhdGUoZGF0YSkge1xuICAgIHJldHVybiB7XG4gICAgICBtZXRhOiB7XG4gICAgICAgIHZlcnNpb246IHRoaXMuZGVmYXVsdFZlcnNpb24sXG4gICAgICB9LFxuICAgICAgZGF0YSxcbiAgICB9O1xuICB9XG59XG4iLCJpbXBvcnQgbG9nIGZyb20gJ2xvZ2xldmVsJztcbmltcG9ydCBnZXRGZXRjaFdpdGhUaW1lb3V0IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL2ZldGNoLXdpdGgtdGltZW91dCc7XG5cbmNvbnN0IGZldGNoV2l0aFRpbWVvdXQgPSBnZXRGZXRjaFdpdGhUaW1lb3V0KCk7XG5cbmNvbnN0IEZJWFRVUkVfU0VSVkVSX0hPU1QgPSAnbG9jYWxob3N0JztcbmNvbnN0IEZJWFRVUkVfU0VSVkVSX1BPUlQgPSAxMjM0NTtcbmNvbnN0IEZJWFRVUkVfU0VSVkVSX1VSTCA9IGBodHRwOi8vJHtGSVhUVVJFX1NFUlZFUl9IT1NUfToke0ZJWFRVUkVfU0VSVkVSX1BPUlR9L3N0YXRlLmpzb25gO1xuXG4vKipcbiAqIEEgcmVhZC1vbmx5IG5ldHdvcmstYmFzZWQgc3RvcmFnZSB3cmFwcGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWRPbmx5TmV0d29ya1N0b3JlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9pbml0aWFsaXppbmcgPSB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogRGVjbGFyZXMgdGhpcyBzdG9yZSBhcyBjb21wYXRpYmxlIHdpdGggdGhlIGN1cnJlbnQgYnJvd3NlclxuICAgKi9cbiAgaXNTdXBwb3J0ZWQgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBieSBsb2FkaW5nIHN0YXRlIGZyb20gdGhlIG5ldHdvcmtcbiAgICovXG4gIGFzeW5jIF9pbml0KCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoV2l0aFRpbWVvdXQoRklYVFVSRV9TRVJWRVJfVVJMKTtcbiAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nLmRlYnVnKGBFcnJvciBsb2FkaW5nIG5ldHdvcmsgc3RhdGU6ICcke2Vycm9yLm1lc3NhZ2V9J2ApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgc3RhdGVcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn1cbiAgICovXG4gIGFzeW5jIGdldCgpIHtcbiAgICBpZiAoIXRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICBhd2FpdCB0aGlzLl9pbml0aWFsaXppbmc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgbWV0YWRhdGEvdmVyc2lvbiBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbWV0YWRhdGEgLSBUaGUgbWV0YWRhdGEvdmVyc2lvbiBkYXRhIHRvIHNldFxuICAgKi9cbiAgc2V0TWV0YWRhdGEobWV0YWRhdGEpIHtcbiAgICB0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGE7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHN0YXRlXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIFRoZSBzdGF0ZSB0byBzZXRcbiAgICovXG4gIGFzeW5jIHNldChzdGF0ZSkge1xuICAgIGlmICghdGhpcy5pc1N1cHBvcnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnTWV0YW1hc2stIGNhbm5vdCBwZXJzaXN0IHN0YXRlIHRvIGxvY2FsIHN0b3JlIGFzIHRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoaXMgYWN0aW9uJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghc3RhdGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWV0YU1hc2sgLSB1cGRhdGVkIHN0YXRlIGlzIG1pc3NpbmcnKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLm1ldGFkYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdNZXRhTWFzayAtIG1ldGFkYXRhIG11c3QgYmUgc2V0IG9uIGluc3RhbmNlIG9mIEV4dGVuc2lvblN0b3JlIGJlZm9yZSBjYWxsaW5nIFwic2V0XCInLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgYXdhaXQgdGhpcy5faW5pdGlhbGl6aW5nO1xuICAgIH1cbiAgICB0aGlzLl9zdGF0ZSA9IHsgZGF0YTogc3RhdGUsIG1ldGE6IHRoaXMuX21ldGFkYXRhIH07XG4gIH1cbn1cbiIsImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnQG1ldGFtYXNrL3NhZmUtZXZlbnQtZW1pdHRlcic7XG5pbXBvcnQgRXh0ZW5zaW9uUGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm1zL2V4dGVuc2lvbic7XG5cbmNvbnN0IE5PVElGSUNBVElPTl9IRUlHSFQgPSA2MjA7XG5jb25zdCBOT1RJRklDQVRJT05fV0lEVEggPSAzNjA7XG5cbmV4cG9ydCBjb25zdCBOT1RJRklDQVRJT05fTUFOQUdFUl9FVkVOVFMgPSB7XG4gIFBPUFVQX0NMT1NFRDogJ29uUG9wdXBDbG9zZWQnLFxufTtcblxuLyoqXG4gKiBBIGNvbGxlY3Rpb24gb2YgbWV0aG9kcyBmb3IgY29udHJvbGxpbmcgdGhlIHNob3dpbmcgYW5kIGhpZGluZyBvZiB0aGUgbm90aWZpY2F0aW9uIHBvcHVwLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3RpZmljYXRpb25NYW5hZ2VyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnBsYXRmb3JtID0gbmV3IEV4dGVuc2lvblBsYXRmb3JtKCk7XG4gICAgdGhpcy5wbGF0Zm9ybS5hZGRPblJlbW92ZWRMaXN0ZW5lcih0aGlzLl9vbldpbmRvd0Nsb3NlZC5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXJrIHRoZSBub3RpZmljYXRpb24gcG9wdXAgYXMgaGF2aW5nIGJlZW4gYXV0b21hdGljYWxseSBjbG9zZWQuXG4gICAqXG4gICAqIFRoaXMgbGV0cyB1cyBkaWZmZXJlbnRpYXRlIGJldHdlZW4gdGhlIGNhc2VzIHdoZXJlIHdlIGNsb3NlIHRoZVxuICAgKiBub3RpZmljYXRpb24gcG9wdXAgdi5zLiB3aGVuIHRoZSB1c2VyIGNsb3NlcyB0aGUgcG9wdXAgd2luZG93IGRpcmVjdGx5LlxuICAgKi9cbiAgbWFya0FzQXV0b21hdGljYWxseUNsb3NlZCgpIHtcbiAgICB0aGlzLl9wb3B1cEF1dG9tYXRpY2FsbHlDbG9zZWQgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEVpdGhlciBicmluZ3MgYW4gZXhpc3RpbmcgTWV0YU1hc2sgbm90aWZpY2F0aW9uIHdpbmRvdyBpbnRvIGZvY3VzLCBvciBjcmVhdGVzIGEgbmV3IG5vdGlmaWNhdGlvbiB3aW5kb3cuIE5ld1xuICAgKiBub3RpZmljYXRpb24gd2luZG93cyBhcmUgZ2l2ZW4gYSAncG9wdXAnIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldEN1cnJlbnRQb3B1cElkIC0gc2V0dGVyIG9mIGN1cnJlbnQgcG9wdXAgaWQgZnJvbSBhcHBTdGF0ZUNvbnRyb2xsZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRQb3B1cElkIC0gaWQgb2YgY3VycmVudCBvcGVuZWQgbWV0YW1hc2sgcG9wdXAgd2luZG93XG4gICAqL1xuICBhc3luYyBzaG93UG9wdXAoc2V0Q3VycmVudFBvcHVwSWQsIGN1cnJlbnRQb3B1cElkKSB7XG4gICAgdGhpcy5fcG9wdXBJZCA9IGN1cnJlbnRQb3B1cElkO1xuICAgIHRoaXMuX3NldEN1cnJlbnRQb3B1cElkID0gc2V0Q3VycmVudFBvcHVwSWQ7XG4gICAgY29uc3QgcG9wdXAgPSBhd2FpdCB0aGlzLl9nZXRQb3B1cChjdXJyZW50UG9wdXBJZCk7XG4gICAgLy8gQnJpbmcgZm9jdXMgdG8gY2hyb21lIHBvcHVwXG4gICAgaWYgKHBvcHVwKSB7XG4gICAgICAvLyBicmluZyBmb2N1cyB0byBleGlzdGluZyBjaHJvbWUgcG9wdXBcbiAgICAgIGF3YWl0IHRoaXMucGxhdGZvcm0uZm9jdXNXaW5kb3cocG9wdXAuaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjcmVhdGUgbmV3IG5vdGlmaWNhdGlvbiBwb3B1cFxuICAgICAgbGV0IGxlZnQgPSAwO1xuICAgICAgbGV0IHRvcCA9IDA7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBsYXN0Rm9jdXNlZCA9IGF3YWl0IHRoaXMucGxhdGZvcm0uZ2V0TGFzdEZvY3VzZWRXaW5kb3coKTtcbiAgICAgICAgLy8gUG9zaXRpb24gd2luZG93IGluIHRvcCByaWdodCBjb3JuZXIgb2YgbGFzdEZvY3VzZWQgd2luZG93LlxuICAgICAgICB0b3AgPSBsYXN0Rm9jdXNlZC50b3A7XG4gICAgICAgIGxlZnQgPSBsYXN0Rm9jdXNlZC5sZWZ0ICsgKGxhc3RGb2N1c2VkLndpZHRoIC0gTk9USUZJQ0FUSU9OX1dJRFRIKTtcbiAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIGFyZSBtb3JlIHRoYW4gbGlrZWx5IDAsIGR1ZSB0byBiZWluZ1xuICAgICAgICAvLyBvcGVuZWQgZnJvbSB0aGUgYmFja2dyb3VuZCBjaHJvbWUgcHJvY2VzcyBmb3IgdGhlIGV4dGVuc2lvbiB0aGF0XG4gICAgICAgIC8vIGhhcyBubyBwaHlzaWNhbCBkaW1lbnNpb25zXG4gICAgICAgIGNvbnN0IHsgc2NyZWVuWCwgc2NyZWVuWSwgb3V0ZXJXaWR0aCB9ID0gd2luZG93O1xuICAgICAgICB0b3AgPSBNYXRoLm1heChzY3JlZW5ZLCAwKTtcbiAgICAgICAgbGVmdCA9IE1hdGgubWF4KHNjcmVlblggKyAob3V0ZXJXaWR0aCAtIE5PVElGSUNBVElPTl9XSURUSCksIDApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwb3B1cFdpbmRvdyA9IGF3YWl0IHRoaXMucGxhdGZvcm0ub3BlbldpbmRvdyh7XG4gICAgICAgIHVybDogJ25vdGlmaWNhdGlvbi5odG1sJyxcbiAgICAgICAgdHlwZTogJ3BvcHVwJyxcbiAgICAgICAgd2lkdGg6IE5PVElGSUNBVElPTl9XSURUSCxcbiAgICAgICAgaGVpZ2h0OiBOT1RJRklDQVRJT05fSEVJR0hULFxuICAgICAgICBsZWZ0LFxuICAgICAgICB0b3AsXG4gICAgICB9KTtcblxuICAgICAgLy8gRmlyZWZveCBjdXJyZW50bHkgaWdub3JlcyBsZWZ0L3RvcCBmb3IgY3JlYXRlLCBidXQgaXQgd29ya3MgZm9yIHVwZGF0ZVxuICAgICAgaWYgKHBvcHVwV2luZG93LmxlZnQgIT09IGxlZnQgJiYgcG9wdXBXaW5kb3cuc3RhdGUgIT09ICdmdWxsc2NyZWVuJykge1xuICAgICAgICBhd2FpdCB0aGlzLnBsYXRmb3JtLnVwZGF0ZVdpbmRvd1Bvc2l0aW9uKHBvcHVwV2luZG93LmlkLCBsZWZ0LCB0b3ApO1xuICAgICAgfVxuICAgICAgLy8gcGFzcyBuZXcgY3JlYXRlZCBwb3B1cCB3aW5kb3cgaWQgdG8gYXBwQ29udHJvbGxlciBzZXR0ZXJcbiAgICAgIC8vIGFuZCBzdG9yZSB0aGUgaWQgdG8gcHJpdmF0ZSB2YXJpYWJsZSB0aGlzLl9wb3B1cElkIGZvciBmdXR1cmUgYWNjZXNzXG4gICAgICB0aGlzLl9zZXRDdXJyZW50UG9wdXBJZChwb3B1cFdpbmRvdy5pZCk7XG4gICAgICB0aGlzLl9wb3B1cElkID0gcG9wdXBXaW5kb3cuaWQ7XG4gICAgfVxuICB9XG5cbiAgX29uV2luZG93Q2xvc2VkKHdpbmRvd0lkKSB7XG4gICAgaWYgKHdpbmRvd0lkID09PSB0aGlzLl9wb3B1cElkKSB7XG4gICAgICB0aGlzLl9zZXRDdXJyZW50UG9wdXBJZCh1bmRlZmluZWQpO1xuICAgICAgdGhpcy5fcG9wdXBJZCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZW1pdChOT1RJRklDQVRJT05fTUFOQUdFUl9FVkVOVFMuUE9QVVBfQ0xPU0VELCB7XG4gICAgICAgIGF1dG9tYXRpY2FsbHlDbG9zZWQ6IHRoaXMuX3BvcHVwQXV0b21hdGljYWxseUNsb3NlZCxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fcG9wdXBBdXRvbWF0aWNhbGx5Q2xvc2VkID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgYWxsIG9wZW4gTWV0YU1hc2sgd2luZG93cywgYW5kIHJldHVybnMgdGhlIGZpcnN0IG9uZSBpdCBmaW5kcyB0aGF0IGlzIGEgbm90aWZpY2F0aW9uIHdpbmRvdyAoaS5lLiBoYXMgdGhlXG4gICAqIHR5cGUgJ3BvcHVwJylcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFzeW5jIF9nZXRQb3B1cCgpIHtcbiAgICBjb25zdCB3aW5kb3dzID0gYXdhaXQgdGhpcy5wbGF0Zm9ybS5nZXRBbGxXaW5kb3dzKCk7XG4gICAgcmV0dXJuIHRoaXMuX2dldFBvcHVwSW4od2luZG93cyk7XG4gIH1cblxuICAvKipcbiAgICogR2l2ZW4gYW4gYXJyYXkgb2Ygd2luZG93cywgcmV0dXJucyB0aGUgJ3BvcHVwJyB0aGF0IGhhcyBiZWVuIG9wZW5lZCBieSBNZXRhTWFzaywgb3IgbnVsbCBpZiBubyBzdWNoIHdpbmRvdyBleGlzdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHdpbmRvd3MgLSBBbiBhcnJheSBvZiBvYmplY3RzIGNvbnRhaW5pbmcgZGF0YSBhYm91dCB0aGUgb3BlbiBNZXRhTWFzayBleHRlbnNpb24gd2luZG93cy5cbiAgICovXG4gIF9nZXRQb3B1cEluKHdpbmRvd3MpIHtcbiAgICByZXR1cm4gd2luZG93c1xuICAgICAgPyB3aW5kb3dzLmZpbmQoKHdpbikgPT4ge1xuICAgICAgICAgIC8vIFJldHVybnMgbm90aWZpY2F0aW9uIHBvcHVwXG4gICAgICAgICAgcmV0dXJuIHdpbiAmJiB3aW4udHlwZSA9PT0gJ3BvcHVwJyAmJiB3aW4uaWQgPT09IHRoaXMuX3BvcHVwSWQ7XG4gICAgICAgIH0pXG4gICAgICA6IG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCB7IHBlcm1pc3Npb25ScGNNZXRob2RzIH0gZnJvbSAnQG1ldGFtYXNrL3Blcm1pc3Npb24tY29udHJvbGxlcic7XG5pbXBvcnQgeyBzZWxlY3RIb29rcyB9IGZyb20gJ0BtZXRhbWFzay9ycGMtbWV0aG9kcy9kaXN0L3V0aWxzJztcbmltcG9ydCB7IGV0aEVycm9ycyB9IGZyb20gJ2V0aC1ycGMtZXJyb3JzJztcbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgVU5TVVBQT1JURURfUlBDX01FVEhPRFMgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL25ldHdvcmsnO1xuaW1wb3J0IGxvY2FsSGFuZGxlcnMgZnJvbSAnLi9oYW5kbGVycyc7XG5cbmNvbnN0IGFsbEhhbmRsZXJzID0gWy4uLmxvY2FsSGFuZGxlcnMsIC4uLnBlcm1pc3Npb25ScGNNZXRob2RzLmhhbmRsZXJzXTtcblxuY29uc3QgaGFuZGxlck1hcCA9IGFsbEhhbmRsZXJzLnJlZHVjZSgobWFwLCBoYW5kbGVyKSA9PiB7XG4gIGZvciAoY29uc3QgbWV0aG9kTmFtZSBvZiBoYW5kbGVyLm1ldGhvZE5hbWVzKSB7XG4gICAgbWFwLnNldChtZXRob2ROYW1lLCBoYW5kbGVyKTtcbiAgfVxuICByZXR1cm4gbWFwO1xufSwgbmV3IE1hcCgpKTtcblxuY29uc3QgZXhwZWN0ZWRIb29rTmFtZXMgPSBBcnJheS5mcm9tKFxuICBuZXcgU2V0KFxuICAgIGZsYXR0ZW4oYWxsSGFuZGxlcnMubWFwKCh7IGhvb2tOYW1lcyB9KSA9PiBPYmplY3Qua2V5cyhob29rTmFtZXMpKSksXG4gICkudmFsdWVzKCksXG4pO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBqc29uLXJwYy1lbmdpbmUgbWlkZGxld2FyZSBvZiBSUEMgbWV0aG9kIGltcGxlbWVudGF0aW9ucy5cbiAqXG4gKiBIYW5kbGVycyBjb25zdW1lIGZ1bmN0aW9ucyB0aGF0IGhvb2sgaW50byB0aGUgYmFja2dyb3VuZCwgYW5kIG9ubHkgZGVwZW5kXG4gKiBvbiB0aGVpciBzaWduYXR1cmVzLCBub3QgZS5nLiBjb250cm9sbGVyIGludGVybmFscy5cbiAqXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSBob29rcyAtIFJlcXVpcmVkIFwiaG9va3NcIiBpbnRvIG91clxuICogY29udHJvbGxlcnMuXG4gKiBAcmV0dXJucyB7KHJlcTogb2JqZWN0LCByZXM6IG9iamVjdCwgbmV4dDogRnVuY3Rpb24sIGVuZDogRnVuY3Rpb24pID0+IHZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNZXRob2RNaWRkbGV3YXJlKGhvb2tzKSB7XG4gIC8vIEZhaWwgaW1tZWRpYXRlbHkgaWYgd2UgZm9yZ290IHRvIHByb3ZpZGUgYW55IGV4cGVjdGVkIGhvb2tzLlxuICBjb25zdCBtaXNzaW5nSG9va05hbWVzID0gZXhwZWN0ZWRIb29rTmFtZXMuZmlsdGVyKFxuICAgIChob29rTmFtZSkgPT4gIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvb2tzLCBob29rTmFtZSksXG4gICk7XG4gIGlmIChtaXNzaW5nSG9va05hbWVzLmxlbmd0aCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgTWlzc2luZyBleHBlY3RlZCBob29rczpcXG5cXG4ke21pc3NpbmdIb29rTmFtZXMuam9pbignXFxuJyl9XFxuYCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIG1ldGhvZE1pZGRsZXdhcmUocmVxLCByZXMsIG5leHQsIGVuZCkge1xuICAgIC8vIFJlamVjdCB1bnN1cHBvcnRlZCBtZXRob2RzLlxuICAgIGlmIChVTlNVUFBPUlRFRF9SUENfTUVUSE9EUy5oYXMocmVxLm1ldGhvZCkpIHtcbiAgICAgIHJldHVybiBlbmQoZXRoRXJyb3JzLnJwYy5tZXRob2ROb3RTdXBwb3J0ZWQoKSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJNYXAuZ2V0KHJlcS5tZXRob2QpO1xuICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICBjb25zdCB7IGltcGxlbWVudGF0aW9uLCBob29rTmFtZXMgfSA9IGhhbmRsZXI7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBJbXBsZW1lbnRhdGlvbnMgbWF5IG9yIG1heSBub3QgYmUgYXN5bmMsIHNvIHdlIG11c3QgYXdhaXQgdGhlbS5cbiAgICAgICAgcmV0dXJuIGF3YWl0IGltcGxlbWVudGF0aW9uKFxuICAgICAgICAgIHJlcSxcbiAgICAgICAgICByZXMsXG4gICAgICAgICAgbmV4dCxcbiAgICAgICAgICBlbmQsXG4gICAgICAgICAgc2VsZWN0SG9va3MoaG9va3MsIGhvb2tOYW1lcyksXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGVuZChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQoKTtcbiAgfTtcbn1cblxuIiwiaW1wb3J0IHsgZXRoRXJyb3JzLCBlcnJvckNvZGVzIH0gZnJvbSAnZXRoLXJwYy1lcnJvcnMnO1xuaW1wb3J0IHZhbGlkVXJsIGZyb20gJ3ZhbGlkLXVybCc7XG5pbXBvcnQgeyBvbWl0IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEFwcHJvdmFsVHlwZSB9IGZyb20gJ0BtZXRhbWFzay9jb250cm9sbGVyLXV0aWxzJztcbmltcG9ydCB7XG4gIE1FU1NBR0VfVFlQRSxcbiAgVU5LTk9XTl9USUNLRVJfU1lNQk9MLFxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2FwcCc7XG5pbXBvcnQge1xuICBpc1ByZWZpeGVkRm9ybWF0dGVkSGV4U3RyaW5nLFxuICBpc1NhZmVDaGFpbklkLFxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9uZXR3b3JrLnV0aWxzJztcbmltcG9ydCB7IE1ldGFNZXRyaWNzTmV0d29ya0V2ZW50U291cmNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9tZXRhbWV0cmljcyc7XG5cbmNvbnN0IGFkZEV0aGVyZXVtQ2hhaW4gPSB7XG4gIG1ldGhvZE5hbWVzOiBbTUVTU0FHRV9UWVBFLkFERF9FVEhFUkVVTV9DSEFJTl0sXG4gIGltcGxlbWVudGF0aW9uOiBhZGRFdGhlcmV1bUNoYWluSGFuZGxlcixcbiAgaG9va05hbWVzOiB7XG4gICAgdXBzZXJ0TmV0d29ya0NvbmZpZ3VyYXRpb246IHRydWUsXG4gICAgZ2V0Q3VycmVudENoYWluSWQ6IHRydWUsXG4gICAgZ2V0Q3VycmVudFJwY1VybDogdHJ1ZSxcbiAgICBmaW5kTmV0d29ya0NvbmZpZ3VyYXRpb25CeTogdHJ1ZSxcbiAgICBzZXRBY3RpdmVOZXR3b3JrOiB0cnVlLFxuICAgIHJlcXVlc3RVc2VyQXBwcm92YWw6IHRydWUsXG4gIH0sXG59O1xuZXhwb3J0IGRlZmF1bHQgYWRkRXRoZXJldW1DaGFpbjtcblxuYXN5bmMgZnVuY3Rpb24gYWRkRXRoZXJldW1DaGFpbkhhbmRsZXIoXG4gIHJlcSxcbiAgcmVzLFxuICBfbmV4dCxcbiAgZW5kLFxuICB7XG4gICAgdXBzZXJ0TmV0d29ya0NvbmZpZ3VyYXRpb24sXG4gICAgZ2V0Q3VycmVudENoYWluSWQsXG4gICAgZ2V0Q3VycmVudFJwY1VybCxcbiAgICBmaW5kTmV0d29ya0NvbmZpZ3VyYXRpb25CeSxcbiAgICBzZXRBY3RpdmVOZXR3b3JrLFxuICAgIHJlcXVlc3RVc2VyQXBwcm92YWwsXG4gIH0sXG4pIHtcbiAgaWYgKCFyZXEucGFyYW1zPy5bMF0gfHwgdHlwZW9mIHJlcS5wYXJhbXNbMF0gIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGVuZChcbiAgICAgIGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcyh7XG4gICAgICAgIG1lc3NhZ2U6IGBFeHBlY3RlZCBzaW5nbGUsIG9iamVjdCBwYXJhbWV0ZXIuIFJlY2VpdmVkOlxcbiR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgcmVxLnBhcmFtcyxcbiAgICAgICAgKX1gLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHsgb3JpZ2luIH0gPSByZXE7XG5cbiAgY29uc3Qge1xuICAgIGNoYWluSWQsXG4gICAgY2hhaW5OYW1lID0gbnVsbCxcbiAgICBibG9ja0V4cGxvcmVyVXJscyA9IG51bGwsXG4gICAgbmF0aXZlQ3VycmVuY3kgPSBudWxsLFxuICAgIHJwY1VybHMsXG4gIH0gPSByZXEucGFyYW1zWzBdO1xuXG4gIGNvbnN0IG90aGVyS2V5cyA9IE9iamVjdC5rZXlzKFxuICAgIG9taXQocmVxLnBhcmFtc1swXSwgW1xuICAgICAgJ2NoYWluSWQnLFxuICAgICAgJ2NoYWluTmFtZScsXG4gICAgICAnYmxvY2tFeHBsb3JlclVybHMnLFxuICAgICAgJ2ljb25VcmxzJyxcbiAgICAgICdycGNVcmxzJyxcbiAgICAgICduYXRpdmVDdXJyZW5jeScsXG4gICAgXSksXG4gICk7XG5cbiAgaWYgKG90aGVyS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGVuZChcbiAgICAgIGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcyh7XG4gICAgICAgIG1lc3NhZ2U6IGBSZWNlaXZlZCB1bmV4cGVjdGVkIGtleXMgb24gb2JqZWN0IHBhcmFtZXRlci4gVW5zdXBwb3J0ZWQga2V5czpcXG4ke290aGVyS2V5c31gLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGlzTG9jYWxob3N0ID0gKHN0clVybCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHN0clVybCk7XG4gICAgICByZXR1cm4gdXJsLmhvc3RuYW1lID09PSAnbG9jYWxob3N0JyB8fCB1cmwuaG9zdG5hbWUgPT09ICcxMjcuMC4wLjEnO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGZpcnN0VmFsaWRSUENVcmwgPSBBcnJheS5pc0FycmF5KHJwY1VybHMpXG4gICAgPyBycGNVcmxzLmZpbmQoXG4gICAgICAgIChycGNVcmwpID0+IGlzTG9jYWxob3N0KHJwY1VybCkgfHwgdmFsaWRVcmwuaXNIdHRwc1VyaShycGNVcmwpLFxuICAgICAgKVxuICAgIDogbnVsbDtcblxuICBjb25zdCBmaXJzdFZhbGlkQmxvY2tFeHBsb3JlclVybCA9XG4gICAgYmxvY2tFeHBsb3JlclVybHMgIT09IG51bGwgJiYgQXJyYXkuaXNBcnJheShibG9ja0V4cGxvcmVyVXJscylcbiAgICAgID8gYmxvY2tFeHBsb3JlclVybHMuZmluZChcbiAgICAgICAgICAoYmxvY2tFeHBsb3JlclVybCkgPT5cbiAgICAgICAgICAgIGlzTG9jYWxob3N0KGJsb2NrRXhwbG9yZXJVcmwpIHx8XG4gICAgICAgICAgICB2YWxpZFVybC5pc0h0dHBzVXJpKGJsb2NrRXhwbG9yZXJVcmwpLFxuICAgICAgICApXG4gICAgICA6IG51bGw7XG5cbiAgaWYgKCFmaXJzdFZhbGlkUlBDVXJsKSB7XG4gICAgcmV0dXJuIGVuZChcbiAgICAgIGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcyh7XG4gICAgICAgIG1lc3NhZ2U6IGBFeHBlY3RlZCBhbiBhcnJheSB3aXRoIGF0IGxlYXN0IG9uZSB2YWxpZCBzdHJpbmcgSFRUUFMgdXJsICdycGNVcmxzJywgUmVjZWl2ZWQ6XFxuJHtycGNVcmxzfWAsXG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgaWYgKGJsb2NrRXhwbG9yZXJVcmxzICE9PSBudWxsICYmICFmaXJzdFZhbGlkQmxvY2tFeHBsb3JlclVybCkge1xuICAgIHJldHVybiBlbmQoXG4gICAgICBldGhFcnJvcnMucnBjLmludmFsaWRQYXJhbXMoe1xuICAgICAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgbnVsbCBvciBhcnJheSB3aXRoIGF0IGxlYXN0IG9uZSB2YWxpZCBzdHJpbmcgSFRUUFMgVVJMICdibG9ja0V4cGxvcmVyVXJsJy4gUmVjZWl2ZWQ6ICR7YmxvY2tFeHBsb3JlclVybHN9YCxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBjb25zdCBfY2hhaW5JZCA9IHR5cGVvZiBjaGFpbklkID09PSAnc3RyaW5nJyAmJiBjaGFpbklkLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKCFpc1ByZWZpeGVkRm9ybWF0dGVkSGV4U3RyaW5nKF9jaGFpbklkKSkge1xuICAgIHJldHVybiBlbmQoXG4gICAgICBldGhFcnJvcnMucnBjLmludmFsaWRQYXJhbXMoe1xuICAgICAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgMHgtcHJlZml4ZWQsIHVucGFkZGVkLCBub24temVybyBoZXhhZGVjaW1hbCBzdHJpbmcgJ2NoYWluSWQnLiBSZWNlaXZlZDpcXG4ke2NoYWluSWR9YCxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBpZiAoIWlzU2FmZUNoYWluSWQocGFyc2VJbnQoX2NoYWluSWQsIDE2KSkpIHtcbiAgICByZXR1cm4gZW5kKFxuICAgICAgZXRoRXJyb3JzLnJwYy5pbnZhbGlkUGFyYW1zKHtcbiAgICAgICAgbWVzc2FnZTogYEludmFsaWQgY2hhaW4gSUQgXCIke19jaGFpbklkfVwiOiBudW1lcmljYWwgdmFsdWUgZ3JlYXRlciB0aGFuIG1heCBzYWZlIHZhbHVlLiBSZWNlaXZlZDpcXG4ke2NoYWluSWR9YCxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBjb25zdCBleGlzdGluZ05ldHdvcmsgPSBmaW5kTmV0d29ya0NvbmZpZ3VyYXRpb25CeSh7IGNoYWluSWQ6IF9jaGFpbklkIH0pO1xuXG4gIC8vIGlmIHRoZSByZXF1ZXN0IGlzIHRvIGFkZCBhIG5ldHdvcmsgdGhhdCBpcyBhbHJlYWR5IGFkZGVkIGFuZCBjb25maWd1cmVkXG4gIC8vIHdpdGggdGhlIHNhbWUgUlBDIGdhdGV3YXkgd2Ugc2hvdWxkbid0IHRyeSB0byBhZGQgaXQgYWdhaW4uXG4gIGlmIChleGlzdGluZ05ldHdvcmsgJiYgZXhpc3RpbmdOZXR3b3JrLnJwY1VybCA9PT0gZmlyc3RWYWxpZFJQQ1VybCkge1xuICAgIC8vIElmIHRoZSBuZXR3b3JrIGFscmVhZHkgZXhpc3RzLCB0aGUgcmVxdWVzdCBpcyBjb25zaWRlcmVkIHN1Y2Nlc3NmdWxcbiAgICByZXMucmVzdWx0ID0gbnVsbDtcblxuICAgIGNvbnN0IGN1cnJlbnRDaGFpbklkID0gZ2V0Q3VycmVudENoYWluSWQoKTtcbiAgICBjb25zdCBjdXJyZW50UnBjVXJsID0gZ2V0Q3VycmVudFJwY1VybCgpO1xuXG4gICAgLy8gSWYgdGhlIGN1cnJlbnQgY2hhaW5JZCBhbmQgcnBjVXJsIG1hdGNoZXMgdGhhdCBvZiB0aGUgaW5jb21pbmcgcmVxdWVzdFxuICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gcHJvY2VlZCBmdXJ0aGVyLlxuICAgIGlmIChjdXJyZW50Q2hhaW5JZCA9PT0gX2NoYWluSWQgJiYgY3VycmVudFJwY1VybCA9PT0gZmlyc3RWYWxpZFJQQ1VybCkge1xuICAgICAgcmV0dXJuIGVuZCgpO1xuICAgIH1cblxuICAgIC8vIElmIHRoaXMgbmV0d29yayBpcyBhbHJlYWR5IGFkZGVkIHdpdGggYnV0IGlzIG5vdCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIG5ldHdvcmtcbiAgICAvLyBBc2sgdGhlIHVzZXIgdG8gc3dpdGNoIHRoZSBuZXR3b3JrXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHJlcXVlc3RVc2VyQXBwcm92YWwoe1xuICAgICAgICBvcmlnaW4sXG4gICAgICAgIHR5cGU6IEFwcHJvdmFsVHlwZS5Td2l0Y2hFdGhlcmV1bUNoYWluLFxuICAgICAgICByZXF1ZXN0RGF0YToge1xuICAgICAgICAgIHJwY1VybDogZXhpc3RpbmdOZXR3b3JrLnJwY1VybCxcbiAgICAgICAgICBjaGFpbklkOiBleGlzdGluZ05ldHdvcmsuY2hhaW5JZCxcbiAgICAgICAgICBuaWNrbmFtZTogZXhpc3RpbmdOZXR3b3JrLm5pY2tuYW1lLFxuICAgICAgICAgIHRpY2tlcjogZXhpc3RpbmdOZXR3b3JrLnRpY2tlcixcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBzZXRBY3RpdmVOZXR3b3JrKGV4aXN0aW5nTmV0d29yay5pZCk7XG4gICAgICByZXMucmVzdWx0ID0gbnVsbDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gRm9yIHRoZSBwdXJwb3NlcyBvZiB0aGlzIG1ldGhvZCwgaXQgZG9lcyBub3QgbWF0dGVyIGlmIHRoZSB1c2VyXG4gICAgICAvLyBkZWNsaW5lcyB0byBzd2l0Y2ggdGhlIHNlbGVjdGVkIG5ldHdvcmsuIEhvd2V2ZXIsIG90aGVyIGVycm9ycyBpbmRpY2F0ZVxuICAgICAgLy8gdGhhdCBzb21ldGhpbmcgaXMgd3JvbmcuXG4gICAgICBpZiAoZXJyb3IuY29kZSAhPT0gZXJyb3JDb2Rlcy5wcm92aWRlci51c2VyUmVqZWN0ZWRSZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiBlbmQoZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW5kKCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNoYWluTmFtZSAhPT0gJ3N0cmluZycgfHwgIWNoYWluTmFtZSkge1xuICAgIHJldHVybiBlbmQoXG4gICAgICBldGhFcnJvcnMucnBjLmludmFsaWRQYXJhbXMoe1xuICAgICAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgbm9uLWVtcHR5IHN0cmluZyAnY2hhaW5OYW1lJy4gUmVjZWl2ZWQ6XFxuJHtjaGFpbk5hbWV9YCxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbiAgY29uc3QgX2NoYWluTmFtZSA9XG4gICAgY2hhaW5OYW1lLmxlbmd0aCA+IDEwMCA/IGNoYWluTmFtZS5zdWJzdHJpbmcoMCwgMTAwKSA6IGNoYWluTmFtZTtcblxuICBpZiAobmF0aXZlQ3VycmVuY3kgIT09IG51bGwpIHtcbiAgICBpZiAodHlwZW9mIG5hdGl2ZUN1cnJlbmN5ICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG5hdGl2ZUN1cnJlbmN5KSkge1xuICAgICAgcmV0dXJuIGVuZChcbiAgICAgICAgZXRoRXJyb3JzLnJwYy5pbnZhbGlkUGFyYW1zKHtcbiAgICAgICAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgbnVsbCBvciBvYmplY3QgJ25hdGl2ZUN1cnJlbmN5Jy4gUmVjZWl2ZWQ6XFxuJHtuYXRpdmVDdXJyZW5jeX1gLFxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChuYXRpdmVDdXJyZW5jeS5kZWNpbWFscyAhPT0gMTgpIHtcbiAgICAgIHJldHVybiBlbmQoXG4gICAgICAgIGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcyh7XG4gICAgICAgICAgbWVzc2FnZTogYEV4cGVjdGVkIHRoZSBudW1iZXIgMTggZm9yICduYXRpdmVDdXJyZW5jeS5kZWNpbWFscycgd2hlbiAnbmF0aXZlQ3VycmVuY3knIGlzIHByb3ZpZGVkLiBSZWNlaXZlZDogJHtuYXRpdmVDdXJyZW5jeS5kZWNpbWFsc31gLFxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFuYXRpdmVDdXJyZW5jeS5zeW1ib2wgfHwgdHlwZW9mIG5hdGl2ZUN1cnJlbmN5LnN5bWJvbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBlbmQoXG4gICAgICAgIGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcyh7XG4gICAgICAgICAgbWVzc2FnZTogYEV4cGVjdGVkIGEgc3RyaW5nICduYXRpdmVDdXJyZW5jeS5zeW1ib2wnLiBSZWNlaXZlZDogJHtuYXRpdmVDdXJyZW5jeS5zeW1ib2x9YCxcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHRpY2tlciA9IG5hdGl2ZUN1cnJlbmN5Py5zeW1ib2wgfHwgVU5LTk9XTl9USUNLRVJfU1lNQk9MO1xuXG4gIGlmIChcbiAgICB0aWNrZXIgIT09IFVOS05PV05fVElDS0VSX1NZTUJPTCAmJlxuICAgICh0eXBlb2YgdGlja2VyICE9PSAnc3RyaW5nJyB8fCB0aWNrZXIubGVuZ3RoIDwgMiB8fCB0aWNrZXIubGVuZ3RoID4gNilcbiAgKSB7XG4gICAgcmV0dXJuIGVuZChcbiAgICAgIGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcyh7XG4gICAgICAgIG1lc3NhZ2U6IGBFeHBlY3RlZCAyLTYgY2hhcmFjdGVyIHN0cmluZyAnbmF0aXZlQ3VycmVuY3kuc3ltYm9sJy4gUmVjZWl2ZWQ6XFxuJHt0aWNrZXJ9YCxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbiAgLy8gaWYgdGhlIGNoYWluSWQgaXMgdGhlIHNhbWUgYXMgYW4gZXhpc3RpbmcgbmV0d29yayBidXQgdGhlIHRpY2tlciBpcyBkaWZmZXJlbnQgd2Ugd2FudCB0byBibG9jayB0aGlzIGFjdGlvblxuICAvLyBhcyBpdCBpcyBwb3RlbnRpYWxseSBtYWxpY2lvdXMgYW5kIGNvbmZ1c2luZ1xuICBpZiAoXG4gICAgZXhpc3RpbmdOZXR3b3JrICYmXG4gICAgZXhpc3RpbmdOZXR3b3JrLmNoYWluSWQgPT09IF9jaGFpbklkICYmXG4gICAgZXhpc3RpbmdOZXR3b3JrLnRpY2tlciAhPT0gdGlja2VyXG4gICkge1xuICAgIHJldHVybiBlbmQoXG4gICAgICBldGhFcnJvcnMucnBjLmludmFsaWRQYXJhbXMoe1xuICAgICAgICBtZXNzYWdlOiBgbmF0aXZlQ3VycmVuY3kuc3ltYm9sIGRvZXMgbm90IG1hdGNoIGN1cnJlbmN5IHN5bWJvbCBmb3IgYSBuZXR3b3JrIHRoZSB1c2VyIGFscmVhZHkgaGFzIGFkZGVkIHdpdGggdGhlIHNhbWUgY2hhaW5JZC4gUmVjZWl2ZWQ6XFxuJHt0aWNrZXJ9YCxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbiAgbGV0IG5ldHdvcmtDb25maWd1cmF0aW9uSWQ7XG4gIHRyeSB7XG4gICAgYXdhaXQgcmVxdWVzdFVzZXJBcHByb3ZhbCh7XG4gICAgICBvcmlnaW4sXG4gICAgICB0eXBlOiBBcHByb3ZhbFR5cGUuQWRkRXRoZXJldW1DaGFpbixcbiAgICAgIHJlcXVlc3REYXRhOiB7XG4gICAgICAgIGNoYWluSWQ6IF9jaGFpbklkLFxuICAgICAgICBycGNQcmVmczogeyBibG9ja0V4cGxvcmVyVXJsOiBmaXJzdFZhbGlkQmxvY2tFeHBsb3JlclVybCB9LFxuICAgICAgICBjaGFpbk5hbWU6IF9jaGFpbk5hbWUsXG4gICAgICAgIHJwY1VybDogZmlyc3RWYWxpZFJQQ1VybCxcbiAgICAgICAgdGlja2VyLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIG5ldHdvcmtDb25maWd1cmF0aW9uSWQgPSBhd2FpdCB1cHNlcnROZXR3b3JrQ29uZmlndXJhdGlvbihcbiAgICAgIHtcbiAgICAgICAgY2hhaW5JZDogX2NoYWluSWQsXG4gICAgICAgIHJwY1ByZWZzOiB7IGJsb2NrRXhwbG9yZXJVcmw6IGZpcnN0VmFsaWRCbG9ja0V4cGxvcmVyVXJsIH0sXG4gICAgICAgIG5pY2tuYW1lOiBfY2hhaW5OYW1lLFxuICAgICAgICBycGNVcmw6IGZpcnN0VmFsaWRSUENVcmwsXG4gICAgICAgIHRpY2tlcixcbiAgICAgIH0sXG4gICAgICB7IHNvdXJjZTogTWV0YU1ldHJpY3NOZXR3b3JrRXZlbnRTb3VyY2UuRGFwcCwgcmVmZXJyZXI6IG9yaWdpbiB9LFxuICAgICk7XG5cbiAgICAvLyBPbmNlIHRoZSBuZXR3b3JrIGhhcyBiZWVuIGFkZGVkLCB0aGUgcmVxdWVzdGVkIGlzIGNvbnNpZGVyZWQgc3VjY2Vzc2Z1bFxuICAgIHJlcy5yZXN1bHQgPSBudWxsO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBlbmQoZXJyb3IpO1xuICB9XG5cbiAgLy8gQXNrIHRoZSB1c2VyIHRvIHN3aXRjaCB0aGUgbmV0d29ya1xuICB0cnkge1xuICAgIGF3YWl0IHJlcXVlc3RVc2VyQXBwcm92YWwoe1xuICAgICAgb3JpZ2luLFxuICAgICAgdHlwZTogQXBwcm92YWxUeXBlLlN3aXRjaEV0aGVyZXVtQ2hhaW4sXG4gICAgICByZXF1ZXN0RGF0YToge1xuICAgICAgICBycGNVcmw6IGZpcnN0VmFsaWRSUENVcmwsXG4gICAgICAgIGNoYWluSWQ6IF9jaGFpbklkLFxuICAgICAgICBuaWNrbmFtZTogX2NoYWluTmFtZSxcbiAgICAgICAgdGlja2VyLFxuICAgICAgICBuZXR3b3JrQ29uZmlndXJhdGlvbklkLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBhd2FpdCBzZXRBY3RpdmVOZXR3b3JrKG5ldHdvcmtDb25maWd1cmF0aW9uSWQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIEZvciB0aGUgcHVycG9zZXMgb2YgdGhpcyBtZXRob2QsIGl0IGRvZXMgbm90IG1hdHRlciBpZiB0aGUgdXNlclxuICAgIC8vIGRlY2xpbmVzIHRvIHN3aXRjaCB0aGUgc2VsZWN0ZWQgbmV0d29yay4gSG93ZXZlciwgb3RoZXIgZXJyb3JzIGluZGljYXRlXG4gICAgLy8gdGhhdCBzb21ldGhpbmcgaXMgd3JvbmcuXG4gICAgaWYgKGVycm9yLmNvZGUgIT09IGVycm9yQ29kZXMucHJvdmlkZXIudXNlclJlamVjdGVkUmVxdWVzdCkge1xuICAgICAgcmV0dXJuIGVuZChlcnJvcik7XG4gICAgfVxuICB9XG4gIHJldHVybiBlbmQoKTtcbn1cbiIsImltcG9ydCB7IE1FU1NBR0VfVFlQRSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvYXBwJztcblxuLyoqXG4gKiBBIHdyYXBwZXIgZm9yIGBldGhfYWNjb3VudHNgIHRoYXQgcmV0dXJucyBhbiBlbXB0eSBhcnJheSB3aGVuIHBlcm1pc3Npb24gaXMgZGVuaWVkLlxuICovXG5cbmNvbnN0IHJlcXVlc3RFdGhlcmV1bUFjY291bnRzID0ge1xuICBtZXRob2ROYW1lczogW01FU1NBR0VfVFlQRS5FVEhfQUNDT1VOVFNdLFxuICBpbXBsZW1lbnRhdGlvbjogZXRoQWNjb3VudHNIYW5kbGVyLFxuICBob29rTmFtZXM6IHtcbiAgICBnZXRBY2NvdW50czogdHJ1ZSxcbiAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCByZXF1ZXN0RXRoZXJldW1BY2NvdW50cztcblxuLyoqXG4gKiBAdHlwZWRlZiB7UmVjb3JkPHN0cmluZywgRnVuY3Rpb24+fSBFdGhBY2NvdW50c09wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGdldEFjY291bnRzIC0gR2V0cyB0aGUgYWNjb3VudHMgZm9yIHRoZSByZXF1ZXN0aW5nXG4gKiBvcmlnaW4uXG4gKi9cblxuLyoqXG4gKlxuICogQHBhcmFtIHtpbXBvcnQoJ2pzb24tcnBjLWVuZ2luZScpLkpzb25ScGNSZXF1ZXN0PHVua25vd24+fSBfcmVxIC0gVGhlIEpTT04tUlBDIHJlcXVlc3Qgb2JqZWN0LlxuICogQHBhcmFtIHtpbXBvcnQoJ2pzb24tcnBjLWVuZ2luZScpLkpzb25ScGNSZXNwb25zZTx0cnVlPn0gcmVzIC0gVGhlIEpTT04tUlBDIHJlc3BvbnNlIG9iamVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IF9uZXh0IC0gVGhlIGpzb24tcnBjLWVuZ2luZSAnbmV4dCcgY2FsbGJhY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmQgLSBUaGUganNvbi1ycGMtZW5naW5lICdlbmQnIGNhbGxiYWNrLlxuICogQHBhcmFtIHtFdGhBY2NvdW50c09wdGlvbnN9IG9wdGlvbnMgLSBUaGUgUlBDIG1ldGhvZCBob29rcy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZXRoQWNjb3VudHNIYW5kbGVyKF9yZXEsIHJlcywgX25leHQsIGVuZCwgeyBnZXRBY2NvdW50cyB9KSB7XG4gIHJlcy5yZXN1bHQgPSBhd2FpdCBnZXRBY2NvdW50cygpO1xuICByZXR1cm4gZW5kKCk7XG59XG4iLCJpbXBvcnQgeyBNRVNTQUdFX1RZUEUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2FwcCc7XG5cbi8qKlxuICogVGhpcyBSUEMgbWV0aG9kIGdldHMgYmFja2dyb3VuZCBzdGF0ZSByZWxldmFudCB0byB0aGUgcHJvdmlkZXIuXG4gKiBUaGUgYmFja2dyb3VuZCBzZW5kcyBSUEMgbm90aWZpY2F0aW9ucyBvbiBzdGF0ZSBjaGFuZ2VzLCBidXQgdGhlIHByb3ZpZGVyXG4gKiBmaXJzdCByZXF1ZXN0cyBzdGF0ZSBvbiBpbml0aWFsaXphdGlvbi5cbiAqL1xuXG5jb25zdCBnZXRQcm92aWRlclN0YXRlID0ge1xuICBtZXRob2ROYW1lczogW01FU1NBR0VfVFlQRS5HRVRfUFJPVklERVJfU1RBVEVdLFxuICBpbXBsZW1lbnRhdGlvbjogZ2V0UHJvdmlkZXJTdGF0ZUhhbmRsZXIsXG4gIGhvb2tOYW1lczoge1xuICAgIGdldFByb3ZpZGVyU3RhdGU6IHRydWUsXG4gIH0sXG59O1xuZXhwb3J0IGRlZmF1bHQgZ2V0UHJvdmlkZXJTdGF0ZTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBQcm92aWRlclN0YXRlSGFuZGxlclJlc3VsdFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNoYWluSWQgLSBUaGUgY3VycmVudCBjaGFpbiBJRC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNVbmxvY2tlZCAtIFdoZXRoZXIgdGhlIGV4dGVuc2lvbiBpcyB1bmxvY2tlZCBvciBub3QuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmV0d29ya1ZlcnNpb24gLSBUaGUgY3VycmVudCBuZXR3b3JrIElELlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gUHJvdmlkZXJTdGF0ZUhhbmRsZXJPcHRpb25zXG4gKiBAcHJvcGVydHkgeygpID0+IFByb3ZpZGVyU3RhdGVIYW5kbGVyUmVzdWx0fSBnZXRQcm92aWRlclN0YXRlIC0gQSBmdW5jdGlvbiB0aGF0XG4gKiBnZXRzIHRoZSBjdXJyZW50IHByb3ZpZGVyIHN0YXRlLlxuICovXG5cbi8qKlxuICogQHBhcmFtIHtpbXBvcnQoJ2pzb24tcnBjLWVuZ2luZScpLkpzb25ScGNSZXF1ZXN0PFtdPn0gcmVxIC0gVGhlIEpTT04tUlBDIHJlcXVlc3Qgb2JqZWN0LlxuICogQHBhcmFtIHtpbXBvcnQoJ2pzb24tcnBjLWVuZ2luZScpLkpzb25ScGNSZXNwb25zZTxQcm92aWRlclN0YXRlSGFuZGxlclJlc3VsdD59IHJlcyAtIFRoZSBKU09OLVJQQyByZXNwb25zZSBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBfbmV4dCAtIFRoZSBqc29uLXJwYy1lbmdpbmUgJ25leHQnIGNhbGxiYWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5kIC0gVGhlIGpzb24tcnBjLWVuZ2luZSAnZW5kJyBjYWxsYmFjay5cbiAqIEBwYXJhbSB7UHJvdmlkZXJTdGF0ZUhhbmRsZXJPcHRpb25zfSBvcHRpb25zXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldFByb3ZpZGVyU3RhdGVIYW5kbGVyKFxuICByZXEsXG4gIHJlcyxcbiAgX25leHQsXG4gIGVuZCxcbiAgeyBnZXRQcm92aWRlclN0YXRlOiBfZ2V0UHJvdmlkZXJTdGF0ZSB9LFxuKSB7XG4gIHJlcy5yZXN1bHQgPSB7XG4gICAgLi4uKGF3YWl0IF9nZXRQcm92aWRlclN0YXRlKHJlcS5vcmlnaW4pKSxcbiAgfTtcbiAgcmV0dXJuIGVuZCgpO1xufVxuIiwiaW1wb3J0IGFkZEV0aGVyZXVtQ2hhaW4gZnJvbSAnLi9hZGQtZXRoZXJldW0tY2hhaW4nO1xuaW1wb3J0IGV0aEFjY291bnRzIGZyb20gJy4vZXRoLWFjY291bnRzJztcbmltcG9ydCBnZXRQcm92aWRlclN0YXRlIGZyb20gJy4vZ2V0LXByb3ZpZGVyLXN0YXRlJztcbmltcG9ydCBsb2dXZWIzU2hpbVVzYWdlIGZyb20gJy4vbG9nLXdlYjMtc2hpbS11c2FnZSc7XG5pbXBvcnQgcmVxdWVzdEFjY291bnRzIGZyb20gJy4vcmVxdWVzdC1hY2NvdW50cyc7XG5pbXBvcnQgc2VuZE1ldGFkYXRhIGZyb20gJy4vc2VuZC1tZXRhZGF0YSc7XG5pbXBvcnQgc3dpdGNoRXRoZXJldW1DaGFpbiBmcm9tICcuL3N3aXRjaC1ldGhlcmV1bS1jaGFpbic7XG5pbXBvcnQgd2F0Y2hBc3NldCBmcm9tICcuL3dhdGNoLWFzc2V0JztcblxuY29uc3QgaGFuZGxlcnMgPSBbXG4gIGFkZEV0aGVyZXVtQ2hhaW4sXG4gIGV0aEFjY291bnRzLFxuICBnZXRQcm92aWRlclN0YXRlLFxuICBsb2dXZWIzU2hpbVVzYWdlLFxuICByZXF1ZXN0QWNjb3VudHMsXG4gIHNlbmRNZXRhZGF0YSxcbiAgc3dpdGNoRXRoZXJldW1DaGFpbixcbiAgd2F0Y2hBc3NldCxcbl07XG5leHBvcnQgZGVmYXVsdCBoYW5kbGVycztcbiIsImltcG9ydCB7IE1FU1NBR0VfVFlQRSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvYXBwJztcbmltcG9ydCB7IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbWV0YW1ldHJpY3MnO1xuXG4vKipcbiAqIFRoaXMgUlBDIG1ldGhvZCBpcyBjYWxsZWQgYnkgdGhlIGlucGFnZSBwcm92aWRlciB3aGVuZXZlciBpdCBkZXRlY3RzIHRoZVxuICogYWNjZXNzaW5nIG9mIGEgbm9uLWV4aXN0ZW50IHByb3BlcnR5IG9uIG91ciB3aW5kb3cud2ViMyBzaGltLlxuICogV2UgY29sbGVjdCB0aGlzIGRhdGEgdG8gdW5kZXJzdGFuZCB3aGljaCBzaXRlcyBhcmUgYnJlYWtpbmcgZHVlIHRvIHRoZVxuICogcmVtb3ZhbCBvZiBvdXIgd2luZG93LndlYjMuXG4gKi9cblxuY29uc3QgbG9nV2ViM1NoaW1Vc2FnZSA9IHtcbiAgbWV0aG9kTmFtZXM6IFtNRVNTQUdFX1RZUEUuTE9HX1dFQjNfU0hJTV9VU0FHRV0sXG4gIGltcGxlbWVudGF0aW9uOiBsb2dXZWIzU2hpbVVzYWdlSGFuZGxlcixcbiAgaG9va05hbWVzOiB7XG4gICAgc2VuZE1ldHJpY3M6IHRydWUsXG4gICAgZ2V0V2ViM1NoaW1Vc2FnZVN0YXRlOiB0cnVlLFxuICAgIHNldFdlYjNTaGltVXNhZ2VSZWNvcmRlZDogdHJ1ZSxcbiAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCBsb2dXZWIzU2hpbVVzYWdlO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IExvZ1dlYjNTaGltVXNhZ2VPcHRpb25zXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBzZW5kTWV0cmljcyAtIEEgZnVuY3Rpb24gdGhhdCByZWdpc3RlcnMgYSBtZXRyaWNzIGV2ZW50LlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0V2ViM1NoaW1Vc2FnZVN0YXRlIC0gQSBmdW5jdGlvbiB0aGF0IGdldHMgd2ViMyBzaGltXG4gKiB1c2FnZSBzdGF0ZSBmb3IgdGhlIGdpdmVuIG9yaWdpbi5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHNldFdlYjNTaGltVXNhZ2VSZWNvcmRlZCAtIEEgZnVuY3Rpb24gdGhhdCByZWNvcmRzIHdlYjMgc2hpbVxuICogdXNhZ2UgZm9yIGEgcGFydGljdWxhciBvcmlnaW4uXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnanNvbi1ycGMtZW5naW5lJykuSnNvblJwY1JlcXVlc3Q8dW5rbm93bj59IHJlcSAtIFRoZSBKU09OLVJQQyByZXF1ZXN0IG9iamVjdC5cbiAqIEBwYXJhbSB7aW1wb3J0KCdqc29uLXJwYy1lbmdpbmUnKS5Kc29uUnBjUmVzcG9uc2U8dHJ1ZT59IHJlcyAtIFRoZSBKU09OLVJQQyByZXNwb25zZSBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBfbmV4dCAtIFRoZSBqc29uLXJwYy1lbmdpbmUgJ25leHQnIGNhbGxiYWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5kIC0gVGhlIGpzb24tcnBjLWVuZ2luZSAnZW5kJyBjYWxsYmFjay5cbiAqIEBwYXJhbSB7TG9nV2ViM1NoaW1Vc2FnZU9wdGlvbnN9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gbG9nV2ViM1NoaW1Vc2FnZUhhbmRsZXIoXG4gIHJlcSxcbiAgcmVzLFxuICBfbmV4dCxcbiAgZW5kLFxuICB7IHNlbmRNZXRyaWNzLCBnZXRXZWIzU2hpbVVzYWdlU3RhdGUsIHNldFdlYjNTaGltVXNhZ2VSZWNvcmRlZCB9LFxuKSB7XG4gIGNvbnN0IHsgb3JpZ2luIH0gPSByZXE7XG4gIGlmIChnZXRXZWIzU2hpbVVzYWdlU3RhdGUob3JpZ2luKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc2V0V2ViM1NoaW1Vc2FnZVJlY29yZGVkKG9yaWdpbik7XG5cbiAgICBzZW5kTWV0cmljcyhcbiAgICAgIHtcbiAgICAgICAgZXZlbnQ6IGBXZWJzaXRlIEFjY2Vzc2VkIHdpbmRvdy53ZWIzIFNoaW1gLFxuICAgICAgICBjYXRlZ29yeTogTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5LklucGFnZVByb3ZpZGVyLFxuICAgICAgICByZWZlcnJlcjoge1xuICAgICAgICAgIHVybDogb3JpZ2luLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZXhjbHVkZU1ldGFNZXRyaWNzSWQ6IHRydWUsXG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICByZXMucmVzdWx0ID0gdHJ1ZTtcbiAgcmV0dXJuIGVuZCgpO1xufVxuIiwiaW1wb3J0IHsgZXRoRXJyb3JzIH0gZnJvbSAnZXRoLXJwYy1lcnJvcnMnO1xuaW1wb3J0IHsgTUVTU0FHRV9UWVBFIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9hcHAnO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGF0dGVtcHRzIHRvIHJldHJpZXZlIHRoZSBFdGhlcmV1bSBhY2NvdW50cyBhdmFpbGFibGUgdG8gdGhlXG4gKiByZXF1ZXN0ZXIsIG9yIGluaXRpYXRlIGEgcmVxdWVzdCBmb3IgYWNjb3VudCBhY2Nlc3MgaWYgbm9uZSBhcmUgY3VycmVudGx5XG4gKiBhdmFpbGFibGUuIEl0IGlzIGVzc2VudGlhbGx5IGEgd3JhcHBlciBvZiB3YWxsZXRfcmVxdWVzdFBlcm1pc3Npb25zIHRoYXRcbiAqIG9ubHkgZXJyb3JzIGlmIHRoZSB1c2VyIHJlamVjdHMgdGhlIHJlcXVlc3QuIFdlIG1haW50YWluIHRoZSBtZXRob2QgZm9yXG4gKiBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSByZWFzb25zLlxuICovXG5cbmNvbnN0IHJlcXVlc3RFdGhlcmV1bUFjY291bnRzID0ge1xuICBtZXRob2ROYW1lczogW01FU1NBR0VfVFlQRS5FVEhfUkVRVUVTVF9BQ0NPVU5UU10sXG4gIGltcGxlbWVudGF0aW9uOiByZXF1ZXN0RXRoZXJldW1BY2NvdW50c0hhbmRsZXIsXG4gIGhvb2tOYW1lczoge1xuICAgIG9yaWdpbjogdHJ1ZSxcbiAgICBnZXRBY2NvdW50czogdHJ1ZSxcbiAgICBnZXRVbmxvY2tQcm9taXNlOiB0cnVlLFxuICAgIGhhc1Blcm1pc3Npb246IHRydWUsXG4gICAgcmVxdWVzdEFjY291bnRzUGVybWlzc2lvbjogdHJ1ZSxcbiAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCByZXF1ZXN0RXRoZXJldW1BY2NvdW50cztcblxuLy8gVXNlZCB0byByYXRlLWxpbWl0IHBlbmRpbmcgcmVxdWVzdHMgdG8gb25lIHBlciBvcmlnaW5cbmNvbnN0IGxvY2tzID0gbmV3IFNldCgpO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBGdW5jdGlvbj59IFJlcXVlc3RFdGhlcmV1bUFjY291bnRzT3B0aW9uc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IG9yaWdpbiAtIFRoZSByZXF1ZXN0aW5nIG9yaWdpbi5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGdldEFjY291bnRzIC0gR2V0cyB0aGUgYWNjb3VudHMgZm9yIHRoZSByZXF1ZXN0aW5nXG4gKiBvcmlnaW4uXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRVbmxvY2tQcm9taXNlIC0gR2V0cyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuXG4gKiB0aGUgZXh0ZW5zaW9uIHVubG9ja3MuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBoYXNQZXJtaXNzaW9uIC0gUmV0dXJucyB3aGV0aGVyIHRoZSByZXF1ZXN0aW5nIG9yaWdpblxuICogaGFzIHRoZSBzcGVjaWZpZWQgcGVybWlzc2lvbi5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHJlcXVlc3RBY2NvdW50c1Blcm1pc3Npb24gLSBSZXF1ZXN0cyB0aGUgYGV0aF9hY2NvdW50c2BcbiAqIHBlcm1pc3Npb24gZm9yIHRoZSByZXF1ZXN0aW5nIG9yaWdpbi5cbiAqL1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgnanNvbi1ycGMtZW5naW5lJykuSnNvblJwY1JlcXVlc3Q8dW5rbm93bj59IF9yZXEgLSBUaGUgSlNPTi1SUEMgcmVxdWVzdCBvYmplY3QuXG4gKiBAcGFyYW0ge2ltcG9ydCgnanNvbi1ycGMtZW5naW5lJykuSnNvblJwY1Jlc3BvbnNlPHRydWU+fSByZXMgLSBUaGUgSlNPTi1SUEMgcmVzcG9uc2Ugb2JqZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gX25leHQgLSBUaGUganNvbi1ycGMtZW5naW5lICduZXh0JyBjYWxsYmFjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVuZCAtIFRoZSBqc29uLXJwYy1lbmdpbmUgJ2VuZCcgY2FsbGJhY2suXG4gKiBAcGFyYW0ge1JlcXVlc3RFdGhlcmV1bUFjY291bnRzT3B0aW9uc30gb3B0aW9ucyAtIFRoZSBSUEMgbWV0aG9kIGhvb2tzLlxuICovXG5hc3luYyBmdW5jdGlvbiByZXF1ZXN0RXRoZXJldW1BY2NvdW50c0hhbmRsZXIoXG4gIF9yZXEsXG4gIHJlcyxcbiAgX25leHQsXG4gIGVuZCxcbiAge1xuICAgIG9yaWdpbixcbiAgICBnZXRBY2NvdW50cyxcbiAgICBnZXRVbmxvY2tQcm9taXNlLFxuICAgIGhhc1Blcm1pc3Npb24sXG4gICAgcmVxdWVzdEFjY291bnRzUGVybWlzc2lvbixcbiAgfSxcbikge1xuICBpZiAobG9ja3MuaGFzKG9yaWdpbikpIHtcbiAgICByZXMuZXJyb3IgPSBldGhFcnJvcnMucnBjLnJlc291cmNlVW5hdmFpbGFibGUoXG4gICAgICBgQWxyZWFkeSBwcm9jZXNzaW5nICR7TUVTU0FHRV9UWVBFLkVUSF9SRVFVRVNUX0FDQ09VTlRTfS4gUGxlYXNlIHdhaXQuYCxcbiAgICApO1xuICAgIHJldHVybiBlbmQoKTtcbiAgfVxuXG4gIGlmIChoYXNQZXJtaXNzaW9uKE1FU1NBR0VfVFlQRS5FVEhfQUNDT1VOVFMpKSB7XG4gICAgLy8gV2Ugd2FpdCBmb3IgdGhlIGV4dGVuc2lvbiB0byB1bmxvY2sgaW4gdGhpcyBjYXNlIG9ubHksIGJlY2F1c2UgcGVybWlzc2lvblxuICAgIC8vIHJlcXVlc3RzIGFyZSBoYW5kbGVkIHdoZW4gdGhlIGV4dGVuc2lvbiBpcyB1bmxvY2tlZCwgcmVnYXJkbGVzcyBvZiB0aGVcbiAgICAvLyBsb2NrIHN0YXRlIHdoZW4gdGhleSB3ZXJlIHJlY2VpdmVkLlxuICAgIHRyeSB7XG4gICAgICBsb2Nrcy5hZGQob3JpZ2luKTtcbiAgICAgIGF3YWl0IGdldFVubG9ja1Byb21pc2UodHJ1ZSk7XG4gICAgICByZXMucmVzdWx0ID0gYXdhaXQgZ2V0QWNjb3VudHMoKTtcbiAgICAgIGVuZCgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBlbmQoZXJyb3IpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBsb2Nrcy5kZWxldGUob3JpZ2luKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIElmIG5vIGFjY291bnRzLCByZXF1ZXN0IHRoZSBhY2NvdW50cyBwZXJtaXNzaW9uXG4gIHRyeSB7XG4gICAgYXdhaXQgcmVxdWVzdEFjY291bnRzUGVybWlzc2lvbigpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXMuZXJyb3IgPSBlcnI7XG4gICAgcmV0dXJuIGVuZCgpO1xuICB9XG5cbiAgLy8gR2V0IHRoZSBhcHByb3ZlZCBhY2NvdW50c1xuICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IGdldEFjY291bnRzKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlOiB0b28gaGFyZCB0byBpbmR1Y2UsIHNlZSBiZWxvdyBjb21tZW50ICovXG4gIGlmIChhY2NvdW50cy5sZW5ndGggPiAwKSB7XG4gICAgcmVzLnJlc3VsdCA9IGFjY291bnRzO1xuICB9IGVsc2Uge1xuICAgIC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiwgYmVjYXVzZSBpdCBzaG91bGQgYmUgY2F1Z2h0IGluIHRoZVxuICAgIC8vIGFib3ZlIGNhdGNoIGNsYXVzZVxuICAgIHJlcy5lcnJvciA9IGV0aEVycm9ycy5ycGMuaW50ZXJuYWwoXG4gICAgICAnQWNjb3VudHMgdW5leHBlY3RlZGx5IHVuYXZhaWxhYmxlLiBQbGVhc2UgcmVwb3J0IHRoaXMgYnVnLicsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBlbmQoKTtcbn1cbiIsImltcG9ydCB7IGV0aEVycm9ycyB9IGZyb20gJ2V0aC1ycGMtZXJyb3JzJztcbmltcG9ydCB7IE1FU1NBR0VfVFlQRSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvYXBwJztcblxuLyoqXG4gKiBUaGlzIGludGVybmFsIG1ldGhvZCBpcyB1c2VkIGJ5IG91ciBleHRlcm5hbCBwcm92aWRlciB0byBzZW5kIG1ldGFkYXRhIGFib3V0XG4gKiBwZXJtaXNzaW9uIHN1YmplY3RzIHNvIHRoYXQgd2UgY2FuIGUuZy4gZGlzcGxheSBhIHByb3BlciBuYW1lIGFuZCBpY29uIGluXG4gKiBvdXIgVUkuXG4gKi9cblxuY29uc3Qgc2VuZE1ldGFkYXRhID0ge1xuICBtZXRob2ROYW1lczogW01FU1NBR0VfVFlQRS5TRU5EX01FVEFEQVRBXSxcbiAgaW1wbGVtZW50YXRpb246IHNlbmRNZXRhZGF0YUhhbmRsZXIsXG4gIGhvb2tOYW1lczoge1xuICAgIGFkZFN1YmplY3RNZXRhZGF0YTogdHJ1ZSxcbiAgICBzdWJqZWN0VHlwZTogdHJ1ZSxcbiAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCBzZW5kTWV0YWRhdGE7XG5cbi8qKlxuICogQHR5cGVkZWYge1JlY29yZDxzdHJpbmcsIEZ1bmN0aW9uPn0gU2VuZE1ldGFkYXRhT3B0aW9uc1xuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gYWRkU3ViamVjdE1ldGFkYXRhIC0gQSBmdW5jdGlvbiB0aGF0IHJlY29yZHMgc3ViamVjdFxuICogbWV0YWRhdGEsIGJvdW5kIHRvIHRoZSByZXF1ZXN0aW5nIG9yaWdpbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdWJqZWN0VHlwZSAtIFRoZSB0eXBlIG9mIHRoZSByZXF1ZXN0aW5nIG9yaWdpbiAvIHN1YmplY3QuXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnanNvbi1ycGMtZW5naW5lJykuSnNvblJwY1JlcXVlc3Q8dW5rbm93bj59IHJlcSAtIFRoZSBKU09OLVJQQyByZXF1ZXN0IG9iamVjdC5cbiAqIEBwYXJhbSB7aW1wb3J0KCdqc29uLXJwYy1lbmdpbmUnKS5Kc29uUnBjUmVzcG9uc2U8dHJ1ZT59IHJlcyAtIFRoZSBKU09OLVJQQyByZXNwb25zZSBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBfbmV4dCAtIFRoZSBqc29uLXJwYy1lbmdpbmUgJ25leHQnIGNhbGxiYWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5kIC0gVGhlIGpzb24tcnBjLWVuZ2luZSAnZW5kJyBjYWxsYmFjay5cbiAqIEBwYXJhbSB7U2VuZE1ldGFkYXRhT3B0aW9uc30gb3B0aW9uc1xuICovXG5mdW5jdGlvbiBzZW5kTWV0YWRhdGFIYW5kbGVyKFxuICByZXEsXG4gIHJlcyxcbiAgX25leHQsXG4gIGVuZCxcbiAgeyBhZGRTdWJqZWN0TWV0YWRhdGEsIHN1YmplY3RUeXBlIH0sXG4pIHtcbiAgY29uc3QgeyBvcmlnaW4sIHBhcmFtcyB9ID0gcmVxO1xuICBpZiAocGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHBhcmFtcykpIHtcbiAgICBjb25zdCB7IGljb24gPSBudWxsLCBuYW1lID0gbnVsbCwgLi4ucmVtYWluaW5nUGFyYW1zIH0gPSBwYXJhbXM7XG5cbiAgICBhZGRTdWJqZWN0TWV0YWRhdGEoe1xuICAgICAgLi4ucmVtYWluaW5nUGFyYW1zLFxuICAgICAgaWNvblVybDogaWNvbixcbiAgICAgIG5hbWUsXG4gICAgICBzdWJqZWN0VHlwZSxcbiAgICAgIG9yaWdpbixcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZW5kKGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcyh7IGRhdGE6IHBhcmFtcyB9KSk7XG4gIH1cblxuICByZXMucmVzdWx0ID0gdHJ1ZTtcbiAgcmV0dXJuIGVuZCgpO1xufVxuIiwiaW1wb3J0IHsgZXRoRXJyb3JzIH0gZnJvbSAnZXRoLXJwYy1lcnJvcnMnO1xuaW1wb3J0IHsgb21pdCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBBcHByb3ZhbFR5cGUgfSBmcm9tICdAbWV0YW1hc2svY29udHJvbGxlci11dGlscyc7XG5pbXBvcnQgeyBNRVNTQUdFX1RZUEUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2FwcCc7XG5pbXBvcnQge1xuICBDSEFJTl9JRF9UT19UWVBFX01BUCxcbiAgTkVUV09SS19UT19OQU1FX01BUCxcbiAgQ0hBSU5fSURfVE9fUlBDX1VSTF9NQVAsXG4gIENVUlJFTkNZX1NZTUJPTFMsXG4gIEJVSUxUX0lOX0lORlVSQV9ORVRXT1JLUyxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9uZXR3b3JrJztcbmltcG9ydCB7XG4gIGlzUHJlZml4ZWRGb3JtYXR0ZWRIZXhTdHJpbmcsXG4gIGlzU2FmZUNoYWluSWQsXG59IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL25ldHdvcmsudXRpbHMnO1xuXG5jb25zdCBzd2l0Y2hFdGhlcmV1bUNoYWluID0ge1xuICBtZXRob2ROYW1lczogW01FU1NBR0VfVFlQRS5TV0lUQ0hfRVRIRVJFVU1fQ0hBSU5dLFxuICBpbXBsZW1lbnRhdGlvbjogc3dpdGNoRXRoZXJldW1DaGFpbkhhbmRsZXIsXG4gIGhvb2tOYW1lczoge1xuICAgIGdldEN1cnJlbnRDaGFpbklkOiB0cnVlLFxuICAgIGZpbmROZXR3b3JrQ29uZmlndXJhdGlvbkJ5OiB0cnVlLFxuICAgIHNldFByb3ZpZGVyVHlwZTogdHJ1ZSxcbiAgICBzZXRBY3RpdmVOZXR3b3JrOiB0cnVlLFxuICAgIHJlcXVlc3RVc2VyQXBwcm92YWw6IHRydWUsXG4gIH0sXG59O1xuZXhwb3J0IGRlZmF1bHQgc3dpdGNoRXRoZXJldW1DaGFpbjtcblxuZnVuY3Rpb24gZmluZEV4aXN0aW5nTmV0d29yayhjaGFpbklkLCBmaW5kTmV0d29ya0NvbmZpZ3VyYXRpb25CeSkge1xuICBpZiAoXG4gICAgT2JqZWN0LnZhbHVlcyhCVUlMVF9JTl9JTkZVUkFfTkVUV09SS1MpXG4gICAgICAubWFwKCh7IGNoYWluSWQ6IGlkIH0pID0+IGlkKVxuICAgICAgLmluY2x1ZGVzKGNoYWluSWQpXG4gICkge1xuICAgIHJldHVybiB7XG4gICAgICBjaGFpbklkLFxuICAgICAgdGlja2VyOiBDVVJSRU5DWV9TWU1CT0xTLkVUSCxcbiAgICAgIG5pY2tuYW1lOiBORVRXT1JLX1RPX05BTUVfTUFQW2NoYWluSWRdLFxuICAgICAgcnBjVXJsOiBDSEFJTl9JRF9UT19SUENfVVJMX01BUFtjaGFpbklkXSxcbiAgICAgIHR5cGU6IENIQUlOX0lEX1RPX1RZUEVfTUFQW2NoYWluSWRdLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gZmluZE5ldHdvcmtDb25maWd1cmF0aW9uQnkoeyBjaGFpbklkIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzd2l0Y2hFdGhlcmV1bUNoYWluSGFuZGxlcihcbiAgcmVxLFxuICByZXMsXG4gIF9uZXh0LFxuICBlbmQsXG4gIHtcbiAgICBnZXRDdXJyZW50Q2hhaW5JZCxcbiAgICBmaW5kTmV0d29ya0NvbmZpZ3VyYXRpb25CeSxcbiAgICBzZXRQcm92aWRlclR5cGUsXG4gICAgc2V0QWN0aXZlTmV0d29yayxcbiAgICByZXF1ZXN0VXNlckFwcHJvdmFsLFxuICB9LFxuKSB7XG4gIGlmICghcmVxLnBhcmFtcz8uWzBdIHx8IHR5cGVvZiByZXEucGFyYW1zWzBdICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBlbmQoXG4gICAgICBldGhFcnJvcnMucnBjLmludmFsaWRQYXJhbXMoe1xuICAgICAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgc2luZ2xlLCBvYmplY3QgcGFyYW1ldGVyLiBSZWNlaXZlZDpcXG4ke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIHJlcS5wYXJhbXMsXG4gICAgICAgICl9YCxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBjb25zdCB7IG9yaWdpbiB9ID0gcmVxO1xuXG4gIGNvbnN0IHsgY2hhaW5JZCB9ID0gcmVxLnBhcmFtc1swXTtcblxuICBjb25zdCBvdGhlcktleXMgPSBPYmplY3Qua2V5cyhvbWl0KHJlcS5wYXJhbXNbMF0sIFsnY2hhaW5JZCddKSk7XG5cbiAgaWYgKG90aGVyS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGVuZChcbiAgICAgIGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcyh7XG4gICAgICAgIG1lc3NhZ2U6IGBSZWNlaXZlZCB1bmV4cGVjdGVkIGtleXMgb24gb2JqZWN0IHBhcmFtZXRlci4gVW5zdXBwb3J0ZWQga2V5czpcXG4ke290aGVyS2V5c31gLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IF9jaGFpbklkID0gdHlwZW9mIGNoYWluSWQgPT09ICdzdHJpbmcnICYmIGNoYWluSWQudG9Mb3dlckNhc2UoKTtcblxuICBpZiAoIWlzUHJlZml4ZWRGb3JtYXR0ZWRIZXhTdHJpbmcoX2NoYWluSWQpKSB7XG4gICAgcmV0dXJuIGVuZChcbiAgICAgIGV0aEVycm9ycy5ycGMuaW52YWxpZFBhcmFtcyh7XG4gICAgICAgIG1lc3NhZ2U6IGBFeHBlY3RlZCAweC1wcmVmaXhlZCwgdW5wYWRkZWQsIG5vbi16ZXJvIGhleGFkZWNpbWFsIHN0cmluZyAnY2hhaW5JZCcuIFJlY2VpdmVkOlxcbiR7Y2hhaW5JZH1gLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIGlmICghaXNTYWZlQ2hhaW5JZChwYXJzZUludChfY2hhaW5JZCwgMTYpKSkge1xuICAgIHJldHVybiBlbmQoXG4gICAgICBldGhFcnJvcnMucnBjLmludmFsaWRQYXJhbXMoe1xuICAgICAgICBtZXNzYWdlOiBgSW52YWxpZCBjaGFpbiBJRCBcIiR7X2NoYWluSWR9XCI6IG51bWVyaWNhbCB2YWx1ZSBncmVhdGVyIHRoYW4gbWF4IHNhZmUgdmFsdWUuIFJlY2VpdmVkOlxcbiR7Y2hhaW5JZH1gLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHJlcXVlc3REYXRhID0gZmluZEV4aXN0aW5nTmV0d29yayhfY2hhaW5JZCwgZmluZE5ldHdvcmtDb25maWd1cmF0aW9uQnkpO1xuICBpZiAocmVxdWVzdERhdGEpIHtcbiAgICBjb25zdCBjdXJyZW50Q2hhaW5JZCA9IGdldEN1cnJlbnRDaGFpbklkKCk7XG4gICAgaWYgKGN1cnJlbnRDaGFpbklkID09PSBfY2hhaW5JZCkge1xuICAgICAgcmVzLnJlc3VsdCA9IG51bGw7XG4gICAgICByZXR1cm4gZW5kKCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBhcHByb3ZlZFJlcXVlc3REYXRhID0gYXdhaXQgcmVxdWVzdFVzZXJBcHByb3ZhbCh7XG4gICAgICAgIG9yaWdpbixcbiAgICAgICAgdHlwZTogQXBwcm92YWxUeXBlLlN3aXRjaEV0aGVyZXVtQ2hhaW4sXG4gICAgICAgIHJlcXVlc3REYXRhLFxuICAgICAgfSk7XG4gICAgICBpZiAoXG4gICAgICAgIE9iamVjdC52YWx1ZXMoQlVJTFRfSU5fSU5GVVJBX05FVFdPUktTKVxuICAgICAgICAgIC5tYXAoKHsgY2hhaW5JZDogaWQgfSkgPT4gaWQpXG4gICAgICAgICAgLmluY2x1ZGVzKGNoYWluSWQpXG4gICAgICApIHtcbiAgICAgICAgYXdhaXQgc2V0UHJvdmlkZXJUeXBlKGFwcHJvdmVkUmVxdWVzdERhdGEudHlwZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBzZXRBY3RpdmVOZXR3b3JrKGFwcHJvdmVkUmVxdWVzdERhdGEuaWQpO1xuICAgICAgfVxuICAgICAgcmVzLnJlc3VsdCA9IG51bGw7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBlbmQoZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gZW5kKCk7XG4gIH1cbiAgcmV0dXJuIGVuZChcbiAgICBldGhFcnJvcnMucHJvdmlkZXIuY3VzdG9tKHtcbiAgICAgIGNvZGU6IDQ5MDIsIC8vIFRvLWJlLXN0YW5kYXJkaXplZCBcInVucmVjb2duaXplZCBjaGFpbiBJRFwiIGVycm9yXG4gICAgICBtZXNzYWdlOiBgVW5yZWNvZ25pemVkIGNoYWluIElEIFwiJHtjaGFpbklkfVwiLiBUcnkgYWRkaW5nIHRoZSBjaGFpbiB1c2luZyAke01FU1NBR0VfVFlQRS5BRERfRVRIRVJFVU1fQ0hBSU59IGZpcnN0LmAsXG4gICAgfSksXG4gICk7XG59XG4iLCJpbXBvcnQgeyBldGhFcnJvcnMgfSBmcm9tICdldGgtcnBjLWVycm9ycyc7XG5pbXBvcnQgeyBNRVNTQUdFX1RZUEUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2FwcCc7XG5cbmNvbnN0IHdhdGNoQXNzZXQgPSB7XG4gIG1ldGhvZE5hbWVzOiBbTUVTU0FHRV9UWVBFLldBVENIX0FTU0VULCBNRVNTQUdFX1RZUEUuV0FUQ0hfQVNTRVRfTEVHQUNZXSxcbiAgaW1wbGVtZW50YXRpb246IHdhdGNoQXNzZXRIYW5kbGVyLFxuICBob29rTmFtZXM6IHtcbiAgICBoYW5kbGVXYXRjaEFzc2V0UmVxdWVzdDogdHJ1ZSxcbiAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCB3YXRjaEFzc2V0O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFdhdGNoQXNzZXRPcHRpb25zXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBoYW5kbGVXYXRjaEFzc2V0UmVxdWVzdCAtIFRoZSB3YWxsZXRfd2F0Y2hBc3NldCBtZXRob2QgaW1wbGVtZW50YXRpb24uXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBXYXRjaEFzc2V0UGFyYW1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUgb2YgdGhlIGFzc2V0IHRvIHdhdGNoLlxuICogQHByb3BlcnR5IHtvYmplY3R9IG9wdGlvbnMgLSBXYXRjaCBvcHRpb25zIGZvciB0aGUgYXNzZXQuXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnanNvbi1ycGMtZW5naW5lJykuSnNvblJwY1JlcXVlc3Q8V2F0Y2hBc3NldFBhcmFtPn0gcmVxIC0gVGhlIEpTT04tUlBDIHJlcXVlc3Qgb2JqZWN0LlxuICogQHBhcmFtIHtpbXBvcnQoJ2pzb24tcnBjLWVuZ2luZScpLkpzb25ScGNSZXNwb25zZTx0cnVlPn0gcmVzIC0gVGhlIEpTT04tUlBDIHJlc3BvbnNlIG9iamVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IF9uZXh0IC0gVGhlIGpzb24tcnBjLWVuZ2luZSAnbmV4dCcgY2FsbGJhY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmQgLSBUaGUganNvbi1ycGMtZW5naW5lICdlbmQnIGNhbGxiYWNrLlxuICogQHBhcmFtIHtXYXRjaEFzc2V0T3B0aW9uc30gb3B0aW9uc1xuICovXG5hc3luYyBmdW5jdGlvbiB3YXRjaEFzc2V0SGFuZGxlcihcbiAgcmVxLFxuICByZXMsXG4gIF9uZXh0LFxuICBlbmQsXG4gIHsgaGFuZGxlV2F0Y2hBc3NldFJlcXVlc3QgfSxcbikge1xuICB0cnkge1xuICAgIGNvbnN0IHsgb3B0aW9uczogYXNzZXQsIHR5cGUgfSA9IHJlcS5wYXJhbXM7XG4gICAgY29uc3QgaGFuZGxlV2F0Y2hBc3NldFJlc3VsdCA9IGF3YWl0IGhhbmRsZVdhdGNoQXNzZXRSZXF1ZXN0KGFzc2V0LCB0eXBlKTtcbiAgICBhd2FpdCBoYW5kbGVXYXRjaEFzc2V0UmVzdWx0LnJlc3VsdDtcbiAgICByZXMucmVzdWx0ID0gdHJ1ZTtcbiAgICByZXR1cm4gZW5kKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLm1lc3NhZ2UgPT09ICdVc2VyIHJlamVjdGVkIHRvIHdhdGNoIHRoZSBhc3NldC4nKSB7XG4gICAgICByZXR1cm4gZW5kKGV0aEVycm9ycy5wcm92aWRlci51c2VyUmVqZWN0ZWRSZXF1ZXN0KCkpO1xuICAgIH1cbiAgICByZXR1cm4gZW5kKGVycm9yKTtcbiAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSAnLi9jcmVhdGVNZXRob2RNaWRkbGV3YXJlJztcbiIsImltcG9ydCB7IEpzb24gfSBmcm9tICdAbWV0YW1hc2svdXRpbHMnO1xuaW1wb3J0IHsgTWVzc2FnZVBhcmFtcyB9IGZyb20gJ0BtZXRhbWFzay9tZXNzYWdlLW1hbmFnZXInO1xuaW1wb3J0IGdldEZldGNoV2l0aFRpbWVvdXQgZnJvbSAnLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvZmV0Y2gtd2l0aC10aW1lb3V0JztcbmltcG9ydCB7IE1FU1NBR0VfVFlQRSB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvYXBwJztcblxuY29uc3QgZmV0Y2hXaXRoVGltZW91dCA9IGdldEZldGNoV2l0aFRpbWVvdXQoKTtcblxuZXhwb3J0IHR5cGUgVHJhbnNhY3Rpb25SZXF1ZXN0RGF0YSA9IHtcbiAgdHhQYXJhbXM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICBtZXNzYWdlUGFyYW1zPzogbmV2ZXI7XG4gIG1zZ1BhcmFtcz86IG5ldmVyO1xufTtcblxuZXhwb3J0IHR5cGUgTWVzc2FnZVJlcXVlc3REYXRhID1cbiAgfCB7XG4gICAgICBtc2dQYXJhbXM6IE1lc3NhZ2VQYXJhbXM7XG4gICAgICB0eFBhcmFtcz86IG5ldmVyO1xuICAgICAgbWVzc2FnZVBhcmFtcz86IG5ldmVyO1xuICAgIH1cbiAgfCB7XG4gICAgICBtZXNzYWdlUGFyYW1zOiBNZXNzYWdlUGFyYW1zO1xuICAgICAgbXNnUGFyYW1zPzogbmV2ZXI7XG4gICAgICB0eFBhcmFtcz86IG5ldmVyO1xuICAgIH1cbiAgfCBUcmFuc2FjdGlvblJlcXVlc3REYXRhO1xuXG5leHBvcnQgdHlwZSBSZXF1ZXN0RGF0YSA9IHtcbiAgb3JpZ2luOiBzdHJpbmc7XG59ICYgTWVzc2FnZVJlcXVlc3REYXRhO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VjdXJpdHlQcm92aWRlckNoZWNrKFxuICByZXF1ZXN0RGF0YTogUmVxdWVzdERhdGEsXG4gIG1ldGhvZE5hbWU6IHN0cmluZyxcbiAgY2hhaW5JZDogc3RyaW5nLFxuICBjdXJyZW50TG9jYWxlOiBzdHJpbmcsXG4pOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIEpzb24+PiB7XG4gIGxldCBkYXRhVG9WYWxpZGF0ZTtcbiAgLy8gQ29yZSBtZXNzYWdlIG1hbmFnZXJzIHVzZSBtZXNzYWdlUGFyYW1zIGJ1dCBmcm9udGVuZCB1c2VzIG1zZ1BhcmFtcyB3aXRoIGxvdHMgb2YgcmVmZXJlbmNlc1xuICBjb25zdCBwYXJhbXMgPSByZXF1ZXN0RGF0YS5tc2dQYXJhbXMgfHwgcmVxdWVzdERhdGEubWVzc2FnZVBhcmFtcztcblxuICBpZiAobWV0aG9kTmFtZSA9PT0gTUVTU0FHRV9UWVBFLkVUSF9TSUdOX1RZUEVEX0RBVEEpIHtcbiAgICBkYXRhVG9WYWxpZGF0ZSA9IHtcbiAgICAgIGhvc3RfbmFtZTogcGFyYW1zPy5vcmlnaW4sXG4gICAgICBycGNfbWV0aG9kX25hbWU6IG1ldGhvZE5hbWUsXG4gICAgICBjaGFpbl9pZDogY2hhaW5JZCxcbiAgICAgIGRhdGE6IHBhcmFtcz8uZGF0YSxcbiAgICAgIGN1cnJlbnRMb2NhbGUsXG4gICAgfTtcbiAgfSBlbHNlIGlmIChcbiAgICBtZXRob2ROYW1lID09PSBNRVNTQUdFX1RZUEUuRVRIX1NJR04gfHxcbiAgICBtZXRob2ROYW1lID09PSBNRVNTQUdFX1RZUEUuUEVSU09OQUxfU0lHTlxuICApIHtcbiAgICBkYXRhVG9WYWxpZGF0ZSA9IHtcbiAgICAgIGhvc3RfbmFtZTogcGFyYW1zPy5vcmlnaW4sXG4gICAgICBycGNfbWV0aG9kX25hbWU6IG1ldGhvZE5hbWUsXG4gICAgICBjaGFpbl9pZDogY2hhaW5JZCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc2lnbmVyX2FkZHJlc3M6IHBhcmFtcz8uZnJvbSxcbiAgICAgICAgbXNnX3RvX3NpZ246IHBhcmFtcz8uZGF0YSxcbiAgICAgIH0sXG4gICAgICBjdXJyZW50TG9jYWxlLFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZGF0YVRvVmFsaWRhdGUgPSB7XG4gICAgICBob3N0X25hbWU6IHJlcXVlc3REYXRhLm9yaWdpbixcbiAgICAgIHJwY19tZXRob2RfbmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIGNoYWluX2lkOiBjaGFpbklkLFxuICAgICAgZGF0YToge1xuICAgICAgICBmcm9tX2FkZHJlc3M6IHJlcXVlc3REYXRhLnR4UGFyYW1zPy5mcm9tLFxuICAgICAgICB0b19hZGRyZXNzOiByZXF1ZXN0RGF0YS50eFBhcmFtcz8udG8sXG4gICAgICAgIGdhczogcmVxdWVzdERhdGEudHhQYXJhbXM/LmdhcyxcbiAgICAgICAgZ2FzUHJpY2U6IHJlcXVlc3REYXRhLnR4UGFyYW1zPy5nYXNQcmljZSxcbiAgICAgICAgdmFsdWU6IHJlcXVlc3REYXRhLnR4UGFyYW1zPy52YWx1ZSxcbiAgICAgICAgZGF0YTogcmVxdWVzdERhdGEudHhQYXJhbXM/LmRhdGEsXG4gICAgICB9LFxuICAgICAgY3VycmVudExvY2FsZSxcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgcmVzcG9uc2U6IFJlc3BvbnNlID0gYXdhaXQgZmV0Y2hXaXRoVGltZW91dChcbiAgICAnaHR0cHM6Ly9wcm94eS5tZXRhZmkuY29kZWZpLm5ldHdvcmsvb3BlbnNlYS9zZWN1cml0eS92MS92YWxpZGF0ZScsXG4gICAge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGFUb1ZhbGlkYXRlKSxcbiAgICB9LFxuICApO1xuICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xufVxuIiwiaW1wb3J0IHsgS2V5cmluZ0NvbnRyb2xsZXIgfSBmcm9tICdAbWV0YW1hc2svZXRoLWtleXJpbmctY29udHJvbGxlcic7XG5pbXBvcnQgbG9nIGZyb20gJ2xvZ2xldmVsJztcblxuaW1wb3J0IHsgS2V5cmluZ1R5cGUgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2tleXJpbmcnO1xuXG5jb25zdCBzZWVkUGhyYXNlVmVyaWZpZXIgPSB7XG4gIC8qKlxuICAgKiBWZXJpZmllcyBpZiB0aGUgc2VlZCB3b3JkcyBjYW4gcmVzdG9yZSB0aGUgYWNjb3VudHMuXG4gICAqXG4gICAqIEtleSBub3RlczpcbiAgICogLSBUaGUgc2VlZCB3b3JkcyBjYW4gcmVjcmVhdGUgdGhlIHByaW1hcnkga2V5cmluZyBhbmQgdGhlIGFjY291bnRzIGJlbG9uZ2luZyB0byBpdC5cbiAgICogLSBUaGUgY3JlYXRlZCBhY2NvdW50cyBpbiB0aGUgcHJpbWFyeSBrZXlyaW5nIGFyZSBhbHdheXMgdGhlIHNhbWUuXG4gICAqIC0gVGhlIGtleXJpbmcgYWx3YXlzIGNyZWF0ZXMgdGhlIGFjY291bnRzIGluIHRoZSBzYW1lIHNlcXVlbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBjcmVhdGVkQWNjb3VudHMgLSBUaGUgYWNjb3VudHMgdG8gcmVzdG9yZVxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gc2VlZFBocmFzZSAtIFRoZSBzZWVkIHdvcmRzIHRvIHZlcmlmeSwgZW5jb2RlZCBhcyBhIEJ1ZmZlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIGFzeW5jIHZlcmlmeUFjY291bnRzKGNyZWF0ZWRBY2NvdW50cywgc2VlZFBocmFzZSkge1xuICAgIGlmICghY3JlYXRlZEFjY291bnRzIHx8IGNyZWF0ZWRBY2NvdW50cy5sZW5ndGggPCAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGNyZWF0ZWQgYWNjb3VudHMgZGVmaW5lZC4nKTtcbiAgICB9XG5cbiAgICBjb25zdCBrZXlyaW5nQ29udHJvbGxlciA9IG5ldyBLZXlyaW5nQ29udHJvbGxlcih7fSk7XG4gICAgY29uc3Qga2V5cmluZ0J1aWxkZXIgPSBrZXlyaW5nQ29udHJvbGxlci5nZXRLZXlyaW5nQnVpbGRlckZvclR5cGUoXG4gICAgICBLZXlyaW5nVHlwZS5oZEtleVRyZWUsXG4gICAgKTtcbiAgICBjb25zdCBrZXlyaW5nID0ga2V5cmluZ0J1aWxkZXIoKTtcbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgbW5lbW9uaWM6IHNlZWRQaHJhc2UsXG4gICAgICBudW1iZXJPZkFjY291bnRzOiBjcmVhdGVkQWNjb3VudHMubGVuZ3RoLFxuICAgIH07XG5cbiAgICBhd2FpdCBrZXlyaW5nLmRlc2VyaWFsaXplKG9wdHMpO1xuICAgIGNvbnN0IHJlc3RvcmVkQWNjb3VudHMgPSBhd2FpdCBrZXlyaW5nLmdldEFjY291bnRzKCk7XG4gICAgbG9nLmRlYnVnKGBDcmVhdGVkIGFjY291bnRzOiAke0pTT04uc3RyaW5naWZ5KGNyZWF0ZWRBY2NvdW50cyl9YCk7XG4gICAgbG9nLmRlYnVnKGBSZXN0b3JlZCBhY2NvdW50czogJHtKU09OLnN0cmluZ2lmeShyZXN0b3JlZEFjY291bnRzKX1gKTtcblxuICAgIGlmIChyZXN0b3JlZEFjY291bnRzLmxlbmd0aCAhPT0gY3JlYXRlZEFjY291bnRzLmxlbmd0aCkge1xuICAgICAgLy8gdGhpcyBzaG91bGQgbm90IGhhcHBlbi4uLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXcm9uZyBudW1iZXIgb2YgYWNjb3VudHMnKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3RvcmVkQWNjb3VudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgcmVzdG9yZWRBY2NvdW50c1tpXS50b0xvd2VyQ2FzZSgpICE9PSBjcmVhdGVkQWNjb3VudHNbaV0udG9Mb3dlckNhc2UoKVxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgTm90IGlkZW50aWNhbCBhY2NvdW50cyEgT3JpZ2luYWw6ICR7Y3JlYXRlZEFjY291bnRzW2ldfSwgUmVzdG9yZWQ6ICR7cmVzdG9yZWRBY2NvdW50c1tpXX1gLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNlZWRQaHJhc2VWZXJpZmllcjtcbiIsImltcG9ydCByZW1vdmVTbGFzaCBmcm9tICdyZW1vdmUtdHJhaWxpbmctc2xhc2gnO1xuaW1wb3J0IGxvb3NlbHlWYWxpZGF0ZSBmcm9tICdAc2VnbWVudC9sb29zZWx5LXZhbGlkYXRlLWV2ZW50JztcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBpc1JldHJ5QWxsb3dlZCBmcm9tICdpcy1yZXRyeS1hbGxvd2VkJztcbmltcG9ydCB7IGdlbmVyYXRlUmFuZG9tSWQgfSBmcm9tICcuLi91dGlsJztcblxuY29uc3Qgbm9vcCA9ICgpID0+ICh7fSk7XG5cbi8vIE1ldGhvZCBiZWxvdyBpcyBpbnNwaXJlZCBmcm9tIGF4aW9zLXJldHJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9zb2Z0b25pYy9heGlvcy1yZXRyeVxuZnVuY3Rpb24gaXNOZXR3b3JrRXJyb3IoZXJyb3IpIHtcbiAgcmV0dXJuIChcbiAgICAhZXJyb3IucmVzcG9uc2UgJiZcbiAgICBCb29sZWFuKGVycm9yLmNvZGUpICYmIC8vIFByZXZlbnRzIHJldHJ5aW5nIGNhbmNlbGxlZCByZXF1ZXN0c1xuICAgIGVycm9yLmNvZGUgIT09ICdFQ09OTkFCT1JURUQnICYmIC8vIFByZXZlbnRzIHJldHJ5aW5nIHRpbWVkIG91dCByZXF1ZXN0c1xuICAgIGlzUmV0cnlBbGxvd2VkKGVycm9yKVxuICApOyAvLyBQcmV2ZW50cyByZXRyeWluZyB1bnNhZmUgZXJyb3JzXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuYWx5dGljcyB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGEgbmV3IGBBbmFseXRpY3NgIHdpdGggU2VnbWVudCBwcm9qZWN0J3MgYHdyaXRlS2V5YCBhbmQgYW5cbiAgICogb3B0aW9uYWwgZGljdGlvbmFyeSBvZiBgb3B0aW9uc2AuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB3cml0ZUtleVxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gKG9wdGlvbmFsKVxuICAgKiBAcHJvcGVydHkge251bWJlcn0gW2ZsdXNoQXRdIChkZWZhdWx0OiAyMClcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IFtmbHVzaEludGVydmFsXSAoZGVmYXVsdDogMTAwMDApXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaG9zdF0gKGRlZmF1bHQ6ICdodHRwczovL2FwaS5zZWdtZW50LmlvJylcbiAgICovXG4gIGNvbnN0cnVjdG9yKHdyaXRlS2V5LCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLndyaXRlS2V5ID0gd3JpdGVLZXk7XG5cbiAgICB0aGlzLmhvc3QgPSByZW1vdmVTbGFzaChvcHRpb25zLmhvc3QgfHwgJ2h0dHBzOi8vYXBpLnNlZ21lbnQuaW8nKTtcbiAgICB0aGlzLmZsdXNoSW50ZXJ2YWwgPSBvcHRpb25zLmZsdXNoSW50ZXJ2YWwgfHwgMTAwMDA7XG4gICAgdGhpcy5mbHVzaEF0ID0gb3B0aW9ucy5mbHVzaEF0IHx8IE1hdGgubWF4KG9wdGlvbnMuZmx1c2hBdCwgMSkgfHwgMjA7XG5cbiAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgdGhpcy5wYXRoID0gJy92MS9iYXRjaCc7XG4gICAgdGhpcy5tYXhRdWV1ZVNpemUgPSAxMDI0ICogNDUwO1xuICAgIHRoaXMuZmx1c2hlZCA9IGZhbHNlO1xuICAgIHRoaXMucmV0cnlDb3VudCA9IDM7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2VuYWJsZScsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICBfdmFsaWRhdGUobWVzc2FnZSwgdHlwZSkge1xuICAgIGxvb3NlbHlWYWxpZGF0ZShtZXNzYWdlLCB0eXBlKTtcbiAgfVxuXG4gIF9tZXNzYWdlKHR5cGUsIG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fdmFsaWRhdGUobWVzc2FnZSwgdHlwZSk7XG4gICAgdGhpcy5lbnF1ZXVlKHR5cGUsIG1lc3NhZ2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIGFuIGlkZW50aWZ5IGBtZXNzYWdlYC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG1lc3NhZ2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIChvcHRpb25hbClcbiAgICogQHJldHVybnMge0FuYWx5dGljc31cbiAgICovXG4gIGlkZW50aWZ5KG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lc3NhZ2UoJ2lkZW50aWZ5JywgbWVzc2FnZSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgYSB0cmFjayBgbWVzc2FnZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBtZXNzYWdlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSAob3B0aW9uYWwpXG4gICAqIEByZXR1cm5zIHtBbmFseXRpY3N9XG4gICAqL1xuICB0cmFjayhtZXNzYWdlLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLl9tZXNzYWdlKCd0cmFjaycsIG1lc3NhZ2UsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIGEgcGFnZSBgbWVzc2FnZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBtZXNzYWdlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSAob3B0aW9uYWwpXG4gICAqIEByZXR1cm5zIHtBbmFseXRpY3N9XG4gICAqL1xuICBwYWdlKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lc3NhZ2UoJ3BhZ2UnLCBtZXNzYWdlLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgYG1lc3NhZ2VgIG9mIHR5cGUgYHR5cGVgIHRvIHRoZSBxdWV1ZSBhbmRcbiAgICogY2hlY2sgd2hldGhlciBpdCBzaG91bGQgYmUgZmx1c2hlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogQHBhcmFtIHtvYmplY3R9IG1zZ1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gKG9wdGlvbmFsKVxuICAgKi9cbiAgZW5xdWV1ZSh0eXBlLCBtc2csIGNhbGxiYWNrID0gbm9vcCkge1xuICAgIGlmICghdGhpcy5lbmFibGUpIHtcbiAgICAgIHNldEltbWVkaWF0ZShjYWxsYmFjayk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbWVzc2FnZSA9IHsgLi4ubXNnLCB0eXBlIH07XG5cbiAgICAvLyBTcGVjaWZ5aW5nIGxpYnJhcnkgaGVyZSBoZWxwcyBzZWdtZW50IHRvIHVuZGVyc3RhbmQgc3RydWN0dXJlIG9mIHJlcXVlc3QuXG4gICAgLy8gQ3VycmVudGx5IHNlZ21lbnQgc2VlbXMgdG8gc3VwcG9ydCB0aGVzZSBzb3VyY2UgbGlicmFyaWVzIG9ubHkuXG4gICAgbWVzc2FnZS5jb250ZXh0ID0ge1xuICAgICAgLi4ubWVzc2FnZS5jb250ZXh0LFxuICAgICAgbGlicmFyeToge1xuICAgICAgICBuYW1lOiAnYW5hbHl0aWNzLW5vZGUnLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgaWYgKCFtZXNzYWdlLnRpbWVzdGFtcCkge1xuICAgICAgbWVzc2FnZS50aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgIH1cblxuICAgIGlmICghbWVzc2FnZS5tZXNzYWdlSWQpIHtcbiAgICAgIG1lc3NhZ2UubWVzc2FnZUlkID0gZ2VuZXJhdGVSYW5kb21JZCgpO1xuICAgIH1cblxuICAgIGlmIChtZXNzYWdlLmFub255bW91c0lkICYmICFpc1N0cmluZyhtZXNzYWdlLmFub255bW91c0lkKSkge1xuICAgICAgbWVzc2FnZS5hbm9ueW1vdXNJZCA9IEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UuYW5vbnltb3VzSWQpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS51c2VySWQgJiYgIWlzU3RyaW5nKG1lc3NhZ2UudXNlcklkKSkge1xuICAgICAgbWVzc2FnZS51c2VySWQgPSBKU09OLnN0cmluZ2lmeShtZXNzYWdlLnVzZXJJZCk7XG4gICAgfVxuICAgIHRoaXMucXVldWUucHVzaCh7IG1lc3NhZ2UsIGNhbGxiYWNrIH0pO1xuXG4gICAgaWYgKCF0aGlzLmZsdXNoZWQpIHtcbiAgICAgIHRoaXMuZmx1c2hlZCA9IHRydWU7XG4gICAgICB0aGlzLmZsdXNoKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaGFzUmVhY2hlZEZsdXNoQXQgPSB0aGlzLnF1ZXVlLmxlbmd0aCA+PSB0aGlzLmZsdXNoQXQ7XG4gICAgY29uc3QgaGFzUmVhY2hlZFF1ZXVlU2l6ZSA9XG4gICAgICB0aGlzLnF1ZXVlLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiBhY2MgKyBKU09OLnN0cmluZ2lmeShpdGVtKS5sZW5ndGgsIDApID49XG4gICAgICB0aGlzLm1heFF1ZXVlU2l6ZTtcbiAgICBpZiAoaGFzUmVhY2hlZEZsdXNoQXQgfHwgaGFzUmVhY2hlZFF1ZXVlU2l6ZSkge1xuICAgICAgdGhpcy5mbHVzaCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZsdXNoSW50ZXJ2YWwgJiYgIXRoaXMudGltZXIpIHtcbiAgICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuZmx1c2guYmluZCh0aGlzKSwgdGhpcy5mbHVzaEludGVydmFsKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmx1c2ggdGhlIGN1cnJlbnQgcXVldWVcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIChvcHRpb25hbClcbiAgICovXG4gIGZsdXNoKGNhbGxiYWNrID0gbm9vcCkge1xuICAgIGlmICghdGhpcy5lbmFibGUpIHtcbiAgICAgIHNldEltbWVkaWF0ZShjYWxsYmFjayk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICAgIHRoaXMudGltZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5xdWV1ZS5sZW5ndGgpIHtcbiAgICAgIHNldEltbWVkaWF0ZShjYWxsYmFjayk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLnF1ZXVlLnNwbGljZSgwLCB0aGlzLmZsdXNoQXQpO1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGl0ZW1zLm1hcCgoaXRlbSkgPT4gaXRlbS5jYWxsYmFjayk7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBpdGVtcy5tYXAoKGl0ZW0pID0+IGl0ZW0ubWVzc2FnZSk7XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgYmF0Y2g6IG1lc3NhZ2VzLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgc2VudEF0OiBuZXcgRGF0ZSgpLFxuICAgIH07XG5cbiAgICBjb25zdCBkb25lID0gKGVycikgPT4ge1xuICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgY2FsbGJhY2tzLmZvckVhY2goKGZuKSA9PiBmbihlcnIsIGRhdGEpKTtcbiAgICAgICAgY2FsbGJhY2soZXJyLCBkYXRhKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgQXV0aG9yaXphdGlvbjogYEJhc2ljICR7QnVmZmVyLmZyb20odGhpcy53cml0ZUtleSwgJ3V0ZjgnKS50b1N0cmluZyhcbiAgICAgICAgJ2Jhc2U2NCcsXG4gICAgICApfWAsXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLl9zZW5kUmVxdWVzdChcbiAgICAgIGAke3RoaXMuaG9zdH0ke3RoaXMucGF0aH1gLFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICB9LFxuICAgICAgZG9uZSxcbiAgICAgIDAsXG4gICAgKTtcbiAgfVxuXG4gIF9yZXRyeVJlcXVlc3QodXJsLCBib2R5LCBkb25lLCByZXRyeU5vKSB7XG4gICAgY29uc3QgZGVsYXkgPSBNYXRoLnBvdygyLCByZXRyeU5vKSAqIDEwMDtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuX3NlbmRSZXF1ZXN0KHVybCwgYm9keSwgZG9uZSwgcmV0cnlObyArIDEpO1xuICAgIH0sIGRlbGF5KTtcbiAgfVxuXG4gIGFzeW5jIF9zZW5kUmVxdWVzdCh1cmwsIGJvZHksIGRvbmUsIHJldHJ5Tm8pIHtcbiAgICByZXR1cm4gZmV0Y2godXJsLCBib2R5KVxuICAgICAgLnRoZW4oYXN5bmMgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICB0aGlzLl9pc0Vycm9yUmV0cnlhYmxlKHsgcmVzcG9uc2UgfSkgJiZcbiAgICAgICAgICByZXRyeU5vIDw9IHRoaXMucmV0cnlDb3VudFxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLl9yZXRyeVJlcXVlc3QodXJsLCBib2R5LCBkb25lLCByZXRyeU5vKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgICAgICAgICBkb25lKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuX2lzRXJyb3JSZXRyeWFibGUoZXJyb3IpICYmIHJldHJ5Tm8gPD0gdGhpcy5yZXRyeUNvdW50KSB7XG4gICAgICAgICAgdGhpcy5fcmV0cnlSZXF1ZXN0KHVybCwgYm9keSwgZG9uZSwgcmV0cnlObyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9uZShlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgX2lzRXJyb3JSZXRyeWFibGUoZXJyb3IpIHtcbiAgICAvLyBSZXRyeSBOZXR3b3JrIEVycm9ycy5cbiAgICBpZiAoaXNOZXR3b3JrRXJyb3IoZXJyb3IpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIWVycm9yLnJlc3BvbnNlKSB7XG4gICAgICAvLyBDYW5ub3QgZGV0ZXJtaW5lIGlmIHRoZSByZXF1ZXN0IGNhbiBiZSByZXRyaWVkXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gUmV0cnkgU2VydmVyIEVycm9ycyAoNXh4KS5cbiAgICBpZiAoZXJyb3IucmVzcG9uc2Uuc3RhdHVzID49IDUwMCAmJiBlcnJvci5yZXNwb25zZS5zdGF0dXMgPD0gNTk5KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBSZXRyeSBpZiByYXRlIGxpbWl0ZWQuXG4gICAgaWYgKGVycm9yLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDI5KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsImltcG9ydCB7IFNFQ09ORCB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdGltZSc7XG5pbXBvcnQgQW5hbHl0aWNzIGZyb20gJy4vYW5hbHl0aWNzJztcblxuY29uc3QgU0VHTUVOVF9XUklURV9LRVkgPSBwcm9jZXNzLmVudi5TRUdNRU5UX1dSSVRFX0tFWSA/PyBudWxsO1xuY29uc3QgU0VHTUVOVF9IT1NUID0gcHJvY2Vzcy5lbnYuU0VHTUVOVF9IT1NUID8/IG51bGw7XG5cbi8vIGZsdXNoQXQgY29udHJvbHMgaG93IG1hbnkgZXZlbnRzIGFyZSBzZW50IHRvIHNlZ21lbnQgYXQgb25jZS4gU2VnbWVudCB3aWxsXG4vLyBob2xkIG9udG8gYSBxdWV1ZSBvZiBldmVudHMgdW50aWwgaXQgaGl0cyB0aGlzIG51bWJlciwgdGhlbiBpdCBzZW5kcyB0aGVtIGFzXG4vLyBhIGJhdGNoLiBUaGlzIHNldHRpbmcgZGVmYXVsdHMgdG8gMjAsIGJ1dCBpbiBkZXZlbG9wbWVudCB3ZSBsaWtlbHkgd2FudCB0b1xuLy8gc2VlIGV2ZW50cyBpbiByZWFsIHRpbWUgZm9yIGRlYnVnZ2luZywgc28gdGhpcyBpcyBzZXQgdG8gMSB0byBkaXNhYmxlIHRoZVxuLy8gcXVldWVpbmcgbWVjaGFuaXNtLlxuY29uc3QgU0VHTUVOVF9GTFVTSF9BVCA9XG4gIHByb2Nlc3MuZW52Lk1FVEFNQVNLX0VOVklST05NRU5UID09PSAncHJvZHVjdGlvbicgPyB1bmRlZmluZWQgOiAxO1xuXG4vLyBmbHVzaEludGVydmFsIGNvbnRyb2xzIGhvdyBmcmVxdWVudGx5IHRoZSBxdWV1ZSBpcyBmbHVzaGVkIHRvIHNlZ21lbnQuXG4vLyBUaGlzIGhhcHBlbnMgcmVnYXJkbGVzcyBvZiB0aGUgc2l6ZSBvZiB0aGUgcXVldWUuIFRoZSBkZWZhdWx0IHNldHRpbmcgaXNcbi8vIDEwLDAwMG1zICgxMCBzZWNvbmRzKS4gVGhpcyBkZWZhdWx0IGlzIHJhdGhlciBoaWdoLCB0aG91Z2ggdGhhbmtmdWxseVxuLy8gdXNpbmcgdGhlIGJhY2tncm91bmQgcHJvY2VzcyBhcyBvdXIgZXZlbnQgaGFuZGxlciBtZWFucyB3ZSBkb24ndCBoYXZlIHRvXG4vLyBkZWFsIHdpdGggc2hvcnQgbGl2ZWQgc2Vzc2lvbnMgdGhhdCBoYXBwZW4gZmFzdGVyIHRoYW4gdGhlIGludGVydmFsXG4vLyBlLmcgY29uZmlybWF0aW9ucy4gVGhpcyBpcyBzZXQgdG8gNSwwMDBtcyAoNSBzZWNvbmRzKSBhcmJpdHJhcmlseSB3aXRoIHRoZVxuLy8gaW50ZW50IG9mIGhhdmluZyBhIHZhbHVlIGxlc3MgdGhhbiAxMCBzZWNvbmRzLlxuY29uc3QgU0VHTUVOVF9GTFVTSF9JTlRFUlZBTCA9IFNFQ09ORCAqIDU7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1vY2sgc2VnbWVudCBtb2R1bGUgZm9yIHVzYWdlIGluIHRlc3QgZW52aXJvbm1lbnRzLiBUaGlzIGlzIHVzZWRcbiAqIHdoZW4gYnVpbGRpbmcgdGhlIGFwcGxpY2F0aW9uIGluIHRlc3QgbW9kZSB0byBjYXRjaCBldmVudCBjYWxscyBhbmQgcHJldmVudFxuICogdGhlbSBmcm9tIGJlaW5nIHNlbnQgdG8gc2VnbWVudC4gSXQgaXMgYWxzbyB1c2VkIGluIHVuaXQgdGVzdHMgdG8gbW9jayBhbmRcbiAqIHNweSBvbiB0aGUgbWV0aG9kcyB0byBlbnN1cmUgcHJvcGVyIGJlaGF2aW9yXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGZsdXNoQXQgLSBudW1iZXIgb2YgZXZlbnRzIHRvIHF1ZXVlIGJlZm9yZSBzZW5kaW5nIHRvIHNlZ21lbnRcbiAqIEByZXR1cm5zIHtTZWdtZW50SW50ZXJmYWNlfVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlU2VnbWVudE1vY2sgPSAoZmx1c2hBdCA9IFNFR01FTlRfRkxVU0hfQVQpID0+IHtcbiAgY29uc3Qgc2VnbWVudE1vY2sgPSB7XG4gICAgLy8gSW50ZXJuYWwgcXVldWUgdG8ga2VlcCB0cmFjayBvZiBldmVudHMgYW5kIHByb3Blcmx5IG1pbWljIHNlZ21lbnQnc1xuICAgIC8vIHF1ZXVlaW5nIGJlaGF2aW9yLlxuICAgIHF1ZXVlOiBbXSxcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gaW1tZWRpYXRlbHkgc2VuZCBhbGwgcXVldWVkIGV2ZW50cyBhbmQgcmVzZXQgdGhlIHF1ZXVlIHRvIHplcm8uXG4gICAgICogRm9yIG91ciBwdXJwb3NlcyB0aGlzIHNpbXBseSB0cmlnZ2VycyB0aGUgY2FsbGJhY2sgbWV0aG9kIHJlZ2lzdGVyZWQgd2l0aFxuICAgICAqIHRoZSBldmVudC5cbiAgICAgKi9cbiAgICBmbHVzaCgpIHtcbiAgICAgIHNlZ21lbnRNb2NrLnF1ZXVlLmZvckVhY2goKFtfLCBjYWxsYmFja10pID0+IHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH0pO1xuICAgICAgc2VnbWVudE1vY2sucXVldWUgPSBbXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJhY2sgYW4gZXZlbnQgYW5kIGFkZCBpdCB0byB0aGUgcXVldWUuIElmIHRoZSBxdWV1ZSBzaXplIHJlYWNoZXMgdGhlXG4gICAgICogZmx1c2hBdCB0aHJlc2hvbGQsIGZsdXNoIHRoZSBxdWV1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXlsb2FkXG4gICAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAgICovXG4gICAgdHJhY2socGF5bG9hZCwgY2FsbGJhY2sgPSAoKSA9PiB1bmRlZmluZWQpIHtcbiAgICAgIHNlZ21lbnRNb2NrLnF1ZXVlLnB1c2goW3BheWxvYWQsIGNhbGxiYWNrXSk7XG5cbiAgICAgIGlmIChzZWdtZW50TW9jay5xdWV1ZS5sZW5ndGggPj0gZmx1c2hBdCkge1xuICAgICAgICBzZWdtZW50TW9jay5mbHVzaCgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBIHRydWUgTk9PUCwgdGhlc2UgbWV0aG9kcyBhcmUgZWl0aGVyIG5vdCB1c2VkIG9yIGRvIG5vdCBhd2FpdCBjYWxsYmFja1xuICAgICAqIGFuZCB0aGVyZWZvcmUgcmVxdWlyZSBubyBmdW5jdGlvbmFsaXR5LlxuICAgICAqL1xuICAgIHBhZ2UoKSB7XG4gICAgICAvLyBub29wXG4gICAgfSxcbiAgICBpZGVudGlmeSgpIHtcbiAgICAgIC8vIG5vb3BcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBzZWdtZW50TW9jaztcbn07XG5cbmV4cG9ydCBjb25zdCBzZWdtZW50ID0gU0VHTUVOVF9XUklURV9LRVlcbiAgPyBuZXcgQW5hbHl0aWNzKFNFR01FTlRfV1JJVEVfS0VZLCB7XG4gICAgICBob3N0OiBTRUdNRU5UX0hPU1QsXG4gICAgICBmbHVzaEF0OiBTRUdNRU5UX0ZMVVNIX0FULFxuICAgICAgZmx1c2hJbnRlcnZhbDogU0VHTUVOVF9GTFVTSF9JTlRFUlZBTCxcbiAgICB9KVxuICA6IGNyZWF0ZVNlZ21lbnRNb2NrKFNFR01FTlRfRkxVU0hfQVQsIFNFR01FTlRfRkxVU0hfSU5URVJWQUwpO1xuIl0sInByZUV4aXN0aW5nQ29tbWVudCI6Ii8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRndjQzl6WTNKcGNIUnpMMkZqWTI5MWJuUXRhVzF3YjNKMExYTjBjbUYwWldkcFpYTXZhVzVrWlhndWFuTWlMQ0poY0hBdmMyTnlhWEIwY3k5amIyNXpkR0Z1ZEhNdlkyOXVkSEpoWTNSekxuUnpJaXdpWVhCd0wzTmpjbWx3ZEhNdlkyOXVkSEp2Ykd4bGNuTXZZV3hsY25RdWFuTWlMQ0poY0hBdmMyTnlhWEIwY3k5amIyNTBjbTlzYkdWeWN5OWhjSEF0YzNSaGRHVXVhbk1pTENKaGNIQXZjMk55YVhCMGN5OWpiMjUwY205c2JHVnljeTlpWVdOcmRYQXVhbk1pTENKaGNIQXZjMk55YVhCMGN5OWpiMjUwY205c2JHVnljeTlqWVdOb1pXUXRZbUZzWVc1alpYTXVhbk1pTENKaGNIQXZjMk55YVhCMGN5OWpiMjUwY205c2JHVnljeTlrWldOeWVYQjBMVzFsYzNOaFoyVXVkSE1pTENKaGNIQXZjMk55YVhCMGN5OWpiMjUwY205c2JHVnljeTlrWlhSbFkzUXRkRzlyWlc1ekxtcHpJaXdpWVhCd0wzTmpjbWx3ZEhNdlkyOXVkSEp2Ykd4bGNuTXZaVzVqY25sd2RHbHZiaTF3ZFdKc2FXTXRhMlY1TG5Seklpd2lZWEJ3TDNOamNtbHdkSE12WTI5dWRISnZiR3hsY25NdlpXNXpMMlZ1Y3k1cWN5SXNJbUZ3Y0M5elkzSnBjSFJ6TDJOdmJuUnliMnhzWlhKekwyVnVjeTlwYm1SbGVDNXFjeUlzSW1Gd2NDOXpZM0pwY0hSekwyTnZiblJ5YjJ4c1pYSnpMMmx1WTI5dGFXNW5MWFJ5WVc1ellXTjBhVzl1Y3k1cWN5SXNJbUZ3Y0M5elkzSnBjSFJ6TDJOdmJuUnliMnhzWlhKekwyMWxkR0Z0WlhSeWFXTnpMbXB6SWl3aVlYQndMM05qY21sd2RITXZZMjl1ZEhKdmJHeGxjbk12Ym1WMGQyOXlheTlqY21WaGRHVXRibVYwZDI5eWF5MWpiR2xsYm5RdWRITWlMQ0poY0hBdmMyTnlhWEIwY3k5amIyNTBjbTlzYkdWeWN5OXVaWFIzYjNKckwybHVaR1Y0TG5Seklpd2lZWEJ3TDNOamNtbHdkSE12WTI5dWRISnZiR3hsY25NdmJtVjBkMjl5YXk5dVpYUjNiM0pyTFdOdmJuUnliMnhzWlhJdWRITWlMQ0poY0hBdmMyTnlhWEIwY3k5amIyNTBjbTlzYkdWeWN5OXZibUp2WVhKa2FXNW5MbXB6SWl3aVlYQndMM05qY21sd2RITXZZMjl1ZEhKdmJHeGxjbk12Y0dWeWJXbHpjMmx2Ym5NdlltRmphMmR5YjNWdVpDMWhjR2t1YW5NaUxDSmhjSEF2YzJOeWFYQjBjeTlqYjI1MGNtOXNiR1Z5Y3k5d1pYSnRhWE56YVc5dWN5OWpZWFpsWVhRdGJYVjBZWFJ2Y25NdWFuTWlMQ0poY0hBdmMyTnlhWEIwY3k5amIyNTBjbTlzYkdWeWN5OXdaWEp0YVhOemFXOXVjeTlsYm5WdGN5NXFjeUlzSW1Gd2NDOXpZM0pwY0hSekwyTnZiblJ5YjJ4c1pYSnpMM0JsY20xcGMzTnBiMjV6TDJsdVpHVjRMbXB6SWl3aVlYQndMM05qY21sd2RITXZZMjl1ZEhKdmJHeGxjbk12Y0dWeWJXbHpjMmx2Ym5NdmNHVnliV2x6YzJsdmJpMXNiMmN1YW5NaUxDSmhjSEF2YzJOeWFYQjBjeTlqYjI1MGNtOXNiR1Z5Y3k5d1pYSnRhWE56YVc5dWN5OXpaV3hsWTNSdmNuTXVhbk1pTENKaGNIQXZjMk55YVhCMGN5OWpiMjUwY205c2JHVnljeTl3WlhKdGFYTnphVzl1Y3k5emNHVmphV1pwWTJGMGFXOXVjeTVxY3lJc0ltRndjQzl6WTNKcGNIUnpMMk52Ym5SeWIyeHNaWEp6TDNCeVpXWmxjbVZ1WTJWekxtcHpJaXdpWVhCd0wzTmpjbWx3ZEhNdlkyOXVkSEp2Ykd4bGNuTXZjM2RoY0hNdWFuTWlMQ0poY0hBdmMyTnlhWEIwY3k5amIyNTBjbTlzYkdWeWN5OTBjbUZ1YzJGamRHbHZibk12YVc1a1pYZ3Vhbk1pTENKaGNIQXZjMk55YVhCMGN5OWpiMjUwY205c2JHVnljeTkwY21GdWMyRmpkR2x2Ym5NdmJHbGlMM1I0TFhOMFlYUmxMV2hwYzNSdmNua3RhR1ZzY0dWeWN5NXFjeUlzSW1Gd2NDOXpZM0pwY0hSekwyTnZiblJ5YjJ4c1pYSnpMM1J5WVc1ellXTjBhVzl1Y3k5c2FXSXZkWFJwYkM1cWN5SXNJbUZ3Y0M5elkzSnBjSFJ6TDJOdmJuUnliMnhzWlhKekwzUnlZVzV6WVdOMGFXOXVjeTl3Wlc1a2FXNW5MWFI0TFhSeVlXTnJaWEl1YW5NaUxDSmhjSEF2YzJOeWFYQjBjeTlqYjI1MGNtOXNiR1Z5Y3k5MGNtRnVjMkZqZEdsdmJuTXZkSGd0WjJGekxYVjBhV3h6TG1weklpd2lZWEJ3TDNOamNtbHdkSE12WTI5dWRISnZiR3hsY25NdmRISmhibk5oWTNScGIyNXpMM1I0TFhOMFlYUmxMVzFoYm1GblpYSXVhbk1pTENKaGNIQXZjMk55YVhCMGN5OWtaWFJsWTNRdGJYVnNkR2x3YkdVdGFXNXpkR0Z1WTJWekxtcHpJaXdpWVhCd0wzTmpjbWx3ZEhNdlptbHljM1F0ZEdsdFpTMXpkR0YwWlM1cWN5SXNJbUZ3Y0M5elkzSnBjSFJ6TDJ4cFlpOURiMjF3YjNOaFlteGxUMkp6WlhKMllXSnNaVk4wYjNKbExtcHpJaXdpWVhCd0wzTmpjbWx3ZEhNdmJHbGlMMkZqWTI5MWJuUXRkSEpoWTJ0bGNpNXFjeUlzSW1Gd2NDOXpZM0pwY0hSekwyeHBZaTlqYkdWaGJrVnljbTl5VTNSaFkyc3Vhbk1pTENKaGNIQXZjMk55YVhCMGN5OXNhV0l2WTNKbFlYUmxSSFZ3WlZKbGNVWnBiSFJsY2sxcFpHUnNaWGRoY21VdWFuTWlMQ0poY0hBdmMyTnlhWEIwY3k5c2FXSXZZM0psWVhSbFRHOW5aMlZ5VFdsa1pHeGxkMkZ5WlM1cWN5SXNJbUZ3Y0M5elkzSnBjSFJ6TDJ4cFlpOWpjbVZoZEdWTlpYUmhVbEJEU0dGdVpHeGxjaTVxY3lJc0ltRndjQzl6WTNKcGNIUnpMMnhwWWk5amNtVmhkR1ZOWlhSaGJXRnphMDFwWkdSc1pYZGhjbVV1YW5NaUxDSmhjSEF2YzJOeWFYQjBjeTlzYVdJdlkzSmxZWFJsVDI1aWIyRnlaR2x1WjAxcFpHUnNaWGRoY21VdWFuTWlMQ0poY0hBdmMyTnlhWEIwY3k5c2FXSXZZM0psWVhSbFQzSnBaMmx1VFdsa1pHeGxkMkZ5WlM1cWN5SXNJbUZ3Y0M5elkzSnBjSFJ6TDJ4cFlpOWpjbVZoZEdWU1VFTk5aWFJvYjJSVWNtRmphMmx1WjAxcFpHUnNaWGRoY21VdWFuTWlMQ0poY0hBdmMyTnlhWEIwY3k5c2FXSXZZM0psWVhSbFUzUnlaV0Z0VTJsdWF5NXFjeUlzSW1Gd2NDOXpZM0pwY0hSekwyeHBZaTlqY21WaGRHVlVZV0pKWkUxcFpHUnNaWGRoY21VdWFuTWlMQ0poY0hBdmMyTnlhWEIwY3k5c2FXSXZaVzV6TFdsd1puTXZZMjl1ZEhKaFkzUnpMM0psWjJsemRISjVMbXB6SWl3aVlYQndMM05qY21sd2RITXZiR2xpTDJWdWN5MXBjR1p6TDJOdmJuUnlZV04wY3k5eVpYTnZiSFpsY2k1cWN5SXNJbUZ3Y0M5elkzSnBjSFJ6TDJ4cFlpOWxibk10YVhCbWN5OXlaWE52YkhabGNpNXFjeUlzSW1Gd2NDOXpZM0pwY0hSekwyeHBZaTlsYm5NdGFYQm1jeTl6WlhSMWNDNXFjeUlzSW1Gd2NDOXpZM0pwY0hSekwyeHBZaTluWlhSUFltcFRkSEoxWTNSMWNtVXVhbk1pTENKaGNIQXZjMk55YVhCMGN5OXNhV0l2Ykc5allXd3RjM1J2Y21VdWFuTWlMQ0poY0hBdmMyTnlhWEIwY3k5c2FXSXZiV2xrWkd4bGQyRnlaUzl3Wlc1a2FXNW5MbXB6SWl3aVlYQndMM05qY21sd2RITXZiR2xpTDIxcFozSmhkRzl5TDJsdVpHVjRMbXB6SWl3aVlYQndMM05qY21sd2RITXZiR2xpTDI1bGRIZHZjbXN0YzNSdmNtVXVhbk1pTENKaGNIQXZjMk55YVhCMGN5OXNhV0l2Ym05MGFXWnBZMkYwYVc5dUxXMWhibUZuWlhJdWFuTWlMQ0poY0hBdmMyTnlhWEIwY3k5c2FXSXZjbkJqTFcxbGRHaHZaQzF0YVdSa2JHVjNZWEpsTDJOeVpXRjBaVTFsZEdodlpFMXBaR1JzWlhkaGNtVXVhbk1pTENKaGNIQXZjMk55YVhCMGN5OXNhV0l2Y25CakxXMWxkR2h2WkMxdGFXUmtiR1YzWVhKbEwyaGhibVJzWlhKekwyRmtaQzFsZEdobGNtVjFiUzFqYUdGcGJpNXFjeUlzSW1Gd2NDOXpZM0pwY0hSekwyeHBZaTl5Y0dNdGJXVjBhRzlrTFcxcFpHUnNaWGRoY21VdmFHRnVaR3hsY25NdlpYUm9MV0ZqWTI5MWJuUnpMbXB6SWl3aVlYQndMM05qY21sd2RITXZiR2xpTDNKd1l5MXRaWFJvYjJRdGJXbGtaR3hsZDJGeVpTOW9ZVzVrYkdWeWN5OW5aWFF0Y0hKdmRtbGtaWEl0YzNSaGRHVXVhbk1pTENKaGNIQXZjMk55YVhCMGN5OXNhV0l2Y25CakxXMWxkR2h2WkMxdGFXUmtiR1YzWVhKbEwyaGhibVJzWlhKekwybHVaR1Y0TG1weklpd2lZWEJ3TDNOamNtbHdkSE12YkdsaUwzSndZeTF0WlhSb2IyUXRiV2xrWkd4bGQyRnlaUzlvWVc1a2JHVnljeTlzYjJjdGQyVmlNeTF6YUdsdExYVnpZV2RsTG1weklpd2lZWEJ3TDNOamNtbHdkSE12YkdsaUwzSndZeTF0WlhSb2IyUXRiV2xrWkd4bGQyRnlaUzlvWVc1a2JHVnljeTl5WlhGMVpYTjBMV0ZqWTI5MWJuUnpMbXB6SWl3aVlYQndMM05qY21sd2RITXZiR2xpTDNKd1l5MXRaWFJvYjJRdGJXbGtaR3hsZDJGeVpTOW9ZVzVrYkdWeWN5OXpaVzVrTFcxbGRHRmtZWFJoTG1weklpd2lZWEJ3TDNOamNtbHdkSE12YkdsaUwzSndZeTF0WlhSb2IyUXRiV2xrWkd4bGQyRnlaUzlvWVc1a2JHVnljeTl6ZDJsMFkyZ3RaWFJvWlhKbGRXMHRZMmhoYVc0dWFuTWlMQ0poY0hBdmMyTnlhWEIwY3k5c2FXSXZjbkJqTFcxbGRHaHZaQzF0YVdSa2JHVjNZWEpsTDJoaGJtUnNaWEp6TDNkaGRHTm9MV0Z6YzJWMExtcHpJaXdpWVhCd0wzTmpjbWx3ZEhNdmJHbGlMM0p3WXkxdFpYUm9iMlF0Yldsa1pHeGxkMkZ5WlM5cGJtUmxlQzVxY3lJc0ltRndjQzl6WTNKcGNIUnpMMnhwWWk5elpXTjFjbWwwZVMxd2NtOTJhV1JsY2kxb1pXeHdaWEp6TG5Seklpd2lZWEJ3TDNOamNtbHdkSE12YkdsaUwzTmxaV1F0Y0doeVlYTmxMWFpsY21sbWFXVnlMbXB6SWl3aVlYQndMM05qY21sd2RITXZiR2xpTDNObFoyMWxiblF2WVc1aGJIbDBhV056TG1weklpd2lZWEJ3TDNOamNtbHdkSE12YkdsaUwzTmxaMjFsYm5RdmFXNWtaWGd1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdRVUZCUVN4SlFVRkJMRTlCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGxRVUZCTEVkQlFVRXNUMEZCUVR0QlFVMUJMRWxCUVVFc2FVSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGZEJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGTkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHVkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4TFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVFeVF5eFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGRk0wTXNUVUZCVFN4bFFVRmxMRWRCUVVjN1JVRkRkRUlzVFVGQlRTeGhRVUZoTEVOQlFVTXNVVUZCVVN4RlFVRkZMRWxCUVVrc1JVRkJSVHRKUVVOc1F5eE5RVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExGRkJRVkVzUTBGQlF6dEpRVU14UXl4TlFVRk5MR0ZCUVdFc1IwRkJSeXhSUVVGUkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdTVUZEZGtNc1QwRkJUeXhoUVVGaE8wVkJRM1JDTEVOQlFVTTdSVUZGUkN4VlFVRlZMRVZCUVVVN1NVRkRWaXhoUVVGaExFVkJRVWNzVlVGQlZTeEpRVUZMTzAxQlF6ZENMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVU3VVVGRFppeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMRFpDUVVFMlFpeERRVUZETEVOQlFVTXNRMEZCUXp0TlFVTnNSRHM3VFVGRlFUdE5RVU5CTEVsQlFVa3NTVUZCUVN4MVFrRkJaU3hGUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVN1VVRkRkRU1zVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUlN3NFFrRkJOa0lzUTBGQlF6dE5RVU5xUkR0TlFVVkJMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXpzN1RVRkZNMFFzVFVGQlRTeHJRa0ZCYTBJc1IwRkJSeXhKUVVGQkxHdENRVUZaTEVWQlFVTXNhVUpCUVdsQ0xFTkJRVU03VFVGRE1VUXNTVUZCU1N4TlFVRk5PMDFCUTFZc1NVRkJTVHRSUVVOR0xFMUJRVTBzUjBGQlJ5eEpRVUZCTEhkQ1FVRlJMRVZCUVVNc2EwSkJRV3RDTEVOQlFVTTdUVUZEZGtNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTzFGQlExWXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJSU3gxUTBGQmMwTXNRMEZCUXp0TlFVTXhSRHROUVVWQkxFbEJRVWs3VVVGRFJpeEpRVU5GTEVOQlFVTXNTVUZCUVN3NFFrRkJZeXhGUVVGRExFMUJRVTBzUTBGQlF5eEpRVU4yUWl4SlFVRkJMRFpDUVVGaExFVkJRVU1zYTBKQlFXdENMRU5CUVVNc1MwRkJTeXhGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXp0UlFVRkJMRVZCUTNaRU8xVkJRMEVzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUlN3MFEwRkJNa01zUTBGQlF6dFJRVU12UkR0TlFVTkdMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJUdFJRVU5XTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVVc05FTkJRVEpETEVOQlFVTTdUVUZETDBRN1RVRkZRU3hOUVVGTkxHdENRVUZyUWl4SFFVRkhMRWxCUVVFc09FSkJRV01zUlVGQlF5eHJRa0ZCYTBJc1EwRkJRenROUVVNM1JDeFBRVUZQTEd0Q1FVRnJRanRKUVVNelFpeERRVUZETzBsQlEwUXNWMEZCVnl4RlFVRkZMRU5CUVVNc1MwRkJTeXhGUVVGRkxGRkJRVkVzUzBGQlN6dE5RVU5vUXl4SlFVRkpMRTFCUVUwN1RVRkRWaXhKUVVGSk8xRkJRMFlzVFVGQlRTeEhRVUZITEcxQ1FVRlRMRU5CUVVNc1pVRkJaU3hEUVVGRExFdEJRVXNzUlVGQlJTeFJRVUZSTEVOQlFVTTdUVUZEY2tRc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTzFGQlExWXNhVUpCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zTWtSQlFUSkVMRU5CUVVNN1VVRkRkRVVzVFVGQlRTeEhRVUZITEhsQ1FVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUlVGQlJTeFJRVUZSTEVWQlFVVXNTVUZCU1N4RFFVRkRPMDFCUXk5RE8wMUJSVUVzVDBGQlR5eHJRa0ZCYTBJc1EwRkJReXhOUVVGTkxFTkJRVU03U1VGRGJrTTdSVUZEUmp0QlFVTkdMRU5CUVVNN1FVRkZSQ3hUUVVGVExHdENRVUZyUWl4RFFVRkRMRTFCUVUwc1JVRkJSVHRGUVVOc1F5eE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXp0RlFVTXZReXhQUVVGUExFbEJRVUVzTWtKQlFWY3NSVUZCUXl4blFrRkJaMElzUTBGQlF6dEJRVU4wUXp0QlFVRkRMRWxCUVVFc1VVRkJRU3hIUVVWakxHVkJRV1U3UVVGQlFTeFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRkZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRNVVYyUWl4TlFVRk5MRFJDUVVFMFFpeEhRVU4yUXl3MFEwRkJORU03UVVGQlF5eFBRVUZCTEVOQlFVRXNORUpCUVVFc1IwRkJRU3cwUWtGQlFUdEJRVU40UXl4TlFVRk5MRzFEUVVGdFF5eEhRVU01UXl3MFEwRkJORU03UVVGRE9VTTdRVUZCUVN4UFFVRkJMRU5CUVVFc2JVTkJRVUVzUjBGQlFTeHRRMEZCUVR0QlFVTlBMRTFCUVUwc2IwTkJRVzlETEVkQlFVY3NSVUZCUlR0QlFVRkRMRTlCUVVFc1EwRkJRU3h2UTBGQlFTeEhRVUZCTEc5RFFVRkJPMEZCUTJoRUxFMUJRVTBzWjBOQlFXZERMRWRCUXpORExEUkRRVUUwUXp0QlFVRkRMRTlCUVVFc1EwRkJRU3huUTBGQlFTeEhRVUZCTEdkRFFVRkJPMEZCUTNoRExFMUJRVTBzY1VOQlFYRkRMRWRCUTJoRUxEUkRRVUUwUXp0QlFVRkRMRTlCUVVFc1EwRkJRU3h4UTBGQlFTeEhRVUZCTEhGRFFVRkJPMEZCUTNoRExFMUJRVTBzYjBOQlFXOURMRWRCUXk5RExEUkRRVUUwUXp0QlFVRkRMRTlCUVVFc1EwRkJRU3h2UTBGQlFTeEhRVUZCTEc5RFFVRkJPMEZCUTNoRExFMUJRVTBzYzBOQlFYTkRMRWRCUTJwRUxEUkRRVUUwUXp0QlFVRkRMRTlCUVVFc1EwRkJRU3h6UTBGQlFTeEhRVUZCTEhORFFVRkJPMEZCUTNoRExFMUJRVTBzYlVOQlFXMURMRWRCUXpsRExEUkRRVUUwUXp0QlFVRkRMRTlCUVVFc1EwRkJRU3h0UTBGQlFTeEhRVUZCTEcxRFFVRkJPMEZCUTNoRExFMUJRVTBzY1VOQlFYRkRMRWRCUTJoRUxEUkRRVUUwUXp0QlFVRkRMRTlCUVVFc1EwRkJRU3h4UTBGQlFTeEhRVUZCTEhGRFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJwQ0wwTXNTVUZCUVN4VFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEU5QlFVRTdRVUZMUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRU3hOUVVGTkxGbEJRVmtzUjBGQlJ6dEZRVU51UWl4blFrRkJaMElzUlVGQlJTdzRRa0ZCYzBJc1EwRkJReXhOUVVGTkxFTkJRemRETEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzVTBGQlV5eExRVUZMTzBsQlF5OUNMR2RDUVVGblFpeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRWxCUVVrN1NVRkRiRU1zVDBGQlR5eG5Ra0ZCWjBJN1JVRkRla0lzUTBGQlF5eEZRVU5FTEVOQlFVTXNRMEZEU0N4RFFVRkRPMFZCUTBRc2JVTkJRVzFETEVWQlFVVXNRMEZCUXl4RFFVRkRPMFZCUTNaRExHOUNRVUZ2UWl4RlFVRkZMRU5CUVVNN1FVRkRla0lzUTBGQlF6czdRVUZGUkR0QlFVTkJPMEZCUTBFN1FVRkRaU3hOUVVGTkxHVkJRV1VzUTBGQlF6dEZRVU51UXp0QlFVTkdPMEZCUTBFN1JVRkRSU3hYUVVGWExFTkJRVU1zU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZPMGxCUTNKQ0xFMUJRVTA3VFVGQlJTeFRRVUZUTEVkQlFVY3NRMEZCUXl4RFFVRkRPMDFCUVVVN1NVRkJhVUlzUTBGQlF5eEhRVUZITEVsQlFVazdTVUZEYWtRc1RVRkJUU3hMUVVGTExFZEJRVWM3VFVGRFdpeEhRVUZITEZsQlFWazdUVUZEWml4blFrRkJaMElzUlVGQlJUdFJRVU5vUWl4SFFVRkhMRmxCUVZrc1EwRkJReXhuUWtGQlowSTdVVUZEYUVNc1IwRkJSeXhUUVVGVExFTkJRVU03VFVGRFpqdEpRVU5HTEVOQlFVTTdTVUZGUkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzZVVKQlFXVXNRMEZCUXl4TFFVRkxMRU5CUVVNN1NVRkZka01zU1VGQlNTeERRVUZETEdWQlFXVXNSMEZCUnl4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMR1ZCUVdVN1NVRkZiRVVzWjBKQlFXZENMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03VFVGQlJUdEpRVUZuUWl4RFFVRkRMRXRCUVVzN1RVRkRiRVFzVFVGQlRTeFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dE5RVU14UXl4SlFVTkZMRmxCUVZrc1EwRkJReXh0UTBGQmJVTXNTVUZEYUVRc1NVRkJTU3hEUVVGRExHVkJRV1VzUzBGQlN5eGxRVUZsTEVWQlEzaERPMUZCUTBFc1NVRkJTU3hEUVVGRExHVkJRV1VzUjBGQlJ5eGxRVUZsTzFGQlEzUkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETzFWQlFVVXNiVU5CUVcxRExFVkJRVVVzUTBGQlF6dFJRVUZGTEVOQlFVTXNRMEZCUXp0TlFVTnlSVHRKUVVOR0xFTkJRVU1zUTBGQlF6dEZRVU5LTzBWQlJVRXNiVUpCUVcxQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZkQlFWY3NSVUZCUlR0SlFVTjRReXhKUVVGSk8wMUJRVVU3U1VGQmFVSXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdTVUZEYUVRc1owSkJRV2RDTEVkQlFVYzdUVUZCUlN4SFFVRkhPMGxCUVdsQ0xFTkJRVU03U1VGRE1VTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NWMEZCVnp0SlFVTjJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXp0TlFVRkZPMGxCUVdsQ0xFTkJRVU1zUTBGQlF6dEZRVU01UXpzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNLMEpCUVN0Q0xFTkJRVU1zVFVGQlRTeEZRVUZGTzBsQlEzUkRMRWxCUVVrN1RVRkJSVHRKUVVGdlF5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU51UlN4dFEwRkJiVU1zUjBGQlJ6dE5RVU53UXl4SFFVRkhPMGxCUTB3c1EwRkJRenRKUVVORUxHMURRVUZ0UXl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFbEJRVWs3U1VGRGJFUXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU03VFVGQlJUdEpRVUZ2UXl4RFFVRkRMRU5CUVVNN1JVRkRha1U3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeHhRa0ZCY1VJc1EwRkJReXhOUVVGTkxFVkJRVVU3U1VGRE5VSXNUMEZCVHl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zVFVGQlRTeERRVUZETzBWQlF6TkVPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4M1FrRkJkMElzUTBGQlF5eE5RVUZOTEVWQlFVVTdTVUZETDBJc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRTFCUVUwc1JVRkJSU3huUTBGQmQwSXNRMEZCUXl4UlFVRlJMRU5CUVVNN1JVRkRlRVU3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzT0VKQlFUaENMRU5CUVVNc1RVRkJUU3hGUVVGRk8wbEJRM0pETEVsQlFVa3NRMEZCUXl4elFrRkJjMElzUTBGQlF5eE5RVUZOTEVWQlFVVXNaME5CUVhkQ0xFTkJRVU1zVTBGQlV5eERRVUZETzBWQlEzcEZPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4elFrRkJjMElzUTBGQlF5eE5RVUZOTEVWQlFVVXNTMEZCU3l4RlFVRkZPMGxCUTNCRExFbEJRVWs3VFVGQlJUdEpRVUZ4UWl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTndSQ3h2UWtGQmIwSXNSMEZCUnp0TlFVTnlRaXhIUVVGSE8wbEJRMHdzUTBGQlF6dEpRVU5FTEc5Q1FVRnZRaXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEV0QlFVczdTVUZEY0VNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFhRVUZYTEVOQlFVTTdUVUZCUlR0SlFVRnhRaXhEUVVGRExFTkJRVU03UlVGRGJFUTdRVUZEUmp0QlFVRkRMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzWlVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5xU1VRc1NVRkJRU3hQUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hUUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNTMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGTkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHZENRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2JVSkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4TFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRWRCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1NVRkJRU3hIUVVGQkxFOUJRVUU3UVVGSmRVTXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlJYaENMRTFCUVUwc2EwSkJRV3RDTEZOQlFWTXNaVUZCV1N4RFFVRkRPMFZCUXpORU8wRkJRMFk3UVVGRFFUdEZRVU5GTEZkQlFWY3NRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVU3U1VGRGNrSXNUVUZCVFR0TlFVTktMR2xDUVVGcFFqdE5RVU5xUWl4VlFVRlZPMDFCUTFZc1UwRkJVenROUVVOVUxHbENRVUZwUWp0TlFVTnFRaXhuUWtGQlowSTdUVUZEYUVJc1pVRkJaVHROUVVObU8wbEJRMFlzUTBGQlF5eEhRVUZITEVsQlFVazdTVUZEVWl4TFFVRkxMRU5CUVVNc1EwRkJRenRKUVVWUUxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhwUWtGQmFVSXNTMEZCU3l4TlFVRk5MRk5CUVZNc1EwRkJRenRKUVVNdlJDeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc2VVSkJRV1VzUTBGQlF6dE5RVU12UWl4alFVRmpMRVZCUVVVc1EwRkJRenROUVVOcVFpeHJRMEZCYTBNc1JVRkJSU3hKUVVGSk8wMUJRM2hETEhkQ1FVRjNRaXhGUVVGRkxFbEJRVWs3VFVGRE9VSXNhMEpCUVd0Q0xFVkJRVVVzUTBGQlF5eERRVUZETzAxQlEzUkNMR3RDUVVGclFpeEZRVUZGTEVWQlFVVTdUVUZEZEVJc2VVSkJRWGxDTEVWQlFVVXNSVUZCUlR0TlFVTTNRaXgxUWtGQmRVSXNSVUZCUlN4RlFVRkZPMDFCUXpOQ0xHdERRVUZyUXl4RlFVRkZMRXRCUVVzN1RVRkRla01zSzBKQlFTdENMRVZCUVVVc1NVRkJTU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMDFCUTNKRUxDdENRVUVyUWl4RlFVRkZMRWxCUVVrc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0TlFVTnlSQ3cwUWtGQk5FSXNSVUZCUlN4TFFVRkxPMDFCUTI1RExEUkNRVUUwUWl4RlFVRkZMRWxCUVVrN1RVRkRiRU1zWTBGQll5eEZRVUZGTEVsQlFVRXNhMEpCUVUwc1JVRkJReXhEUVVGRE8wMUJRM2hDTEdWQlFXVXNSVUZCUlN4SlFVRkpPMDFCUTNKQ0xGZEJRVmNzUlVGQlJTeEpRVUZKTzAxQlEycENMR05CUVdNc1JVRkJSU3hUUVVGVE8wMUJRM3BDTEVkQlFVY3NVMEZCVXp0TlFVTmFMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVU03VFVGRFpDeHBRa0ZCYVVJc1JVRkJSU3hEUVVGRExFTkJRVU03VFVGRGNrSXNXVUZCV1N4RlFVRkZPMUZCUTFvc1MwRkJTeXhGUVVGRkxFbEJRVWs3VVVGRFdDeExRVUZMTEVWQlFVVXNTVUZCU1R0UlFVTllMRTlCUVU4c1JVRkJSVHROUVVOWUxFTkJRVU03VFVGRFJDd3lRa0ZCTWtJc1JVRkJSVHRKUVVNdlFpeERRVUZETEVOQlFVTTdTVUZEUml4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWs3U1VGRmFrSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhWUVVGVk8wbEJRelZDTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eEZRVUZGTzBsQlF6RkNMR2xDUVVGcFFpeERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlJTOURMR2RDUVVGblFpeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMDFCUVVVN1NVRkJXU3hEUVVGRExFdEJRVXM3VFVGRE9VTXNUVUZCVFN4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0TlFVTXhReXhKUVVGSkxGbEJRVmtzUTBGQlF5eGpRVUZqTEV0QlFVc3NWMEZCVnl4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTzFGQlEycEZMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4WFFVRlhMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTTdUVUZEZWtRN1NVRkRSaXhEUVVGRExFTkJRVU03U1VGRlJpeGxRVUZsTEVOQlFVTXNVMEZCVXl4RFFVRkZMRXRCUVVzc1NVRkJTenROUVVOdVF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenRSUVVGRkxGVkJRVlVzUlVGQlJUdE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVTXZReXhEUVVGRExFTkJRVU03U1VGRlJpeE5RVUZOTzAxQlFVVTdTVUZCV1N4RFFVRkRMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkRia1FzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExGZEJRVmNzUTBGQlF5eHBRa0ZCYVVJc1EwRkJRenRKUVVWMlJDeEpRVUZKTEVOQlFVTXNaVUZCWlN4SFFVRkhMRk5CUVZNN1NVRkRhRU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhIUVVGSExFbEJRVWs3UlVGRGFFTTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc1owSkJRV2RDTEVOQlFVTXNkVUpCUVhWQ0xFVkJRVVU3U1VGRGVFTXNUMEZCVHl4SlFVRkpMRTlCUVU4c1EwRkJSU3hQUVVGUExFbEJRVXM3VFVGRE9VSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUlVGQlJUdFJRVU55UWl4UFFVRlBMRU5CUVVNc1EwRkJRenROUVVOWUxFTkJRVU1zVFVGQlRUdFJRVU5NTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhGUVVGRkxIVkNRVUYxUWl4RFFVRkRPMDFCUTNSRU8wbEJRMFlzUTBGQlF5eERRVUZETzBWQlEwbzdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc1lVRkJZU3hEUVVGRExFOUJRVThzUlVGQlJTeDFRa0ZCZFVJc1JVRkJSVHRKUVVNNVF5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zU1VGQlNTeERRVUZETzAxQlFVVTdTVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkRka01zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl3NFEwRkJNRUlzUTBGQlF5eFpRVUZaTEVOQlFVTTdTVUZEYkVRc1NVRkJTU3gxUWtGQmRVSXNSVUZCUlR0TlFVTXpRaXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenRKUVVONlFqdEZRVU5HT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRGUVVORkxGbEJRVmtzUTBGQlFTeEZRVUZITzBsQlEySXNTVUZCU1N4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1JVRkJSVHROUVVOd1F5eFBRVUZQTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RlFVRkZPMUZCUTNaRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMDFCUTNwRE8wMUJRMEVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl3NFEwRkJNRUlzUTBGQlF5eFpRVUZaTEVOQlFVTTdTVUZEY0VRN1NVRkZRU3hKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdSVUZEZUVJN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMREpDUVVFeVFpeERRVUZETEhkQ1FVRjNRaXhGUVVGRk8wbEJRM0JFTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRE8wMUJRM0pDTzBsQlEwWXNRMEZCUXl4RFFVRkRPMFZCUTBvN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBWQlEwVXNjVU5CUVhGRExFTkJRVUVzUlVGQlJ6dEpRVU4wUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF6dE5RVU55UWl4clEwRkJhME1zUlVGQlJUdEpRVU4wUXl4RFFVRkRMRU5CUVVNN1JVRkRTanM3UlVGRlFUdEJRVU5HTzBGQlEwRTdSVUZEUlN4eFEwRkJjVU1zUTBGQlFTeEZRVUZITzBsQlEzUkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETzAxQlEzSkNMR3REUVVGclF5eEZRVUZGTzBsQlEzUkRMRU5CUVVNc1EwRkJRenRGUVVOS096dEZRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRkRSU3hyUTBGQmEwTXNRMEZCUXl4VFFVRlRMRVZCUVVVN1NVRkROVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNN1RVRkRja0lzSzBKQlFTdENMRVZCUVVVN1NVRkRia01zUTBGQlF5eERRVUZETzBWQlEwbzdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEhWQ1FVRjFRaXhEUVVGRExGVkJRVlVzUlVGQlJUdEpRVU5zUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF6dE5RVU55UWl4dlFrRkJiMElzUlVGQlJUdEpRVU40UWl4RFFVRkRMRU5CUVVNN1JVRkRTanM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc2EwTkJRV3RETEVOQlFVTXNVMEZCVXl4RlFVRkZPMGxCUXpWRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPMDFCUTNKQ0xDdENRVUVyUWl4RlFVRkZPMGxCUTI1RExFTkJRVU1zUTBGQlF6dEZRVU5LT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRGUVVORkxHbENRVUZwUWl4RFFVRkJMRVZCUVVjN1NVRkRiRUlzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMFZCUTNCQ096dEZRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxHMUNRVUZ0UWl4RFFVRkRMR05CUVdNc1JVRkJSVHRKUVVOc1F5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenROUVVOeVFqdEpRVU5HTEVOQlFVTXNRMEZCUXp0SlFVVkdMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dEZRVU53UWpzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVN1JVRkRRU3hYUVVGWExFTkJRVUVzUlVGQlJ6dEpRVU5hTEUxQlFVMDdUVUZCUlR0SlFVRmxMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMGxCUldoRUxFbEJRVWtzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlR0TlFVTmtMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzBsQlF6RkNMRU5CUVVNc1RVRkJUU3hKUVVGSkxHZENRVUZaTEVWQlFVVTdUVUZEZGtJc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNLMEpCUVhWQ0xFTkJRVU03U1VGRE9VTTdTVUZGUVN4SlFVRkpMRU5CUVVNc1kwRkJZeXhGUVVGRk8wMUJRMjVDTzBsQlEwWTdTVUZGUVN4SlFVRkpMR2RDUVVGWkxFVkJRVVU3VFVGRGFFSXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zSzBKQlFYVkNMRVZCUVVVN1VVRkROVU1zWTBGQll5eEZRVUZGTEdOQlFXTTdVVUZET1VJc1pVRkJaU3hGUVVGRk8wMUJRMjVDTEVOQlFVTXNRMEZCUXp0TlFVTkdMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUlN4VFFVRlRMRWxCUVVzN1VVRkRMME1zU1VGQlNTeFRRVUZUTEVOQlFVTXNTVUZCU1N4TFFVRkxMQ3RDUVVGMVFpeEZRVUZGTzFWQlF6bERMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMVZCUTNoQ0xFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMQ3RDUVVGMVFpeERRVUZETzFGQlF6bERPMDFCUTBZc1EwRkJReXhEUVVGRE8wbEJRMG9zUTBGQlF5eE5RVUZOTzAxQlEwd3NTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhWUVVGVkxFTkJRM0pDTEUxQlFVMHNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTXNSVUZET1VJc1kwRkJZeXhIUVVGSExGbEJRMjVDTEVOQlFVTTdTVUZEU0R0RlFVTkdPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMSEZDUVVGeFFpeERRVUZETEVWQlFVVXNSVUZCUlN4UFFVRlBMRVZCUVVVN1NVRkRha01zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNN1RVRkJSU3hyUWtGQmEwSXNSVUZCUlR0UlFVRkZMRVZCUVVVN1VVRkJSVHROUVVGUk8wbEJRVVVzUTBGQlF5eERRVUZETzBWQlEycEZPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMR1ZCUVdVc1EwRkJReXhaUVVGWkxFVkJRVVVzWjBKQlFXZENMRVZCUVVVN1NVRkRPVU1zU1VGRFJTeG5Ra0ZCWjBJc1MwRkRhRUlzYjBOQlFTdENMRU5CUVVNc1owTkJRVEpDTEVOQlFVTXNSVUZETlVRN1RVRkRRU3hOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1RVRkRla1FzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNN1VVRkRja0lzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhEUVVGRExFZEJRVWNzVTBGQlV5eEZRVUZGTEZsQlFWazdUVUZEYWtRc1EwRkJReXhEUVVGRE8wbEJRMG83UlVGRFJqczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeHJRa0ZCYTBJc1EwRkJReXhaUVVGWkxFVkJRVVVzWjBKQlFXZENMRVZCUVVVN1NVRkRha1FzU1VGRFJTeG5Ra0ZCWjBJc1MwRkRhRUlzYjBOQlFTdENMRU5CUVVNc1owTkJRVEpDTEVOQlFVTXNSVUZETlVRN1RVRkRRU3hOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1RVRkRla1FzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNN1VVRkRja0lzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZGTEV0QlFVc3NTVUZCU3l4TFFVRkxMRXRCUVVzc1dVRkJXVHROUVVONFJTeERRVUZETEVOQlFVTTdTVUZEU2p0RlFVTkdPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEZRVU5GTEd0Q1FVRnJRaXhEUVVGQkxFVkJRVWM3U1VGRGJrSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU03VFVGRGNrSXNhMEpCUVd0Q0xFVkJRVVVzUlVGQlJUdE5RVU4wUWl4NVFrRkJlVUlzUlVGQlJTeEZRVUZGTzAxQlF6ZENMSFZDUVVGMVFpeEZRVUZGTzBsQlF6TkNMRU5CUVVNc1EwRkJRenRGUVVOS096dEZRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRkRSU3dyUWtGQkswSXNRMEZCUXl3MFFrRkJORUlzUlVGQlJUdEpRVU0xUkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF6dE5RVUZGTzBsQlFUWkNMRU5CUVVNc1EwRkJRenRGUVVNeFJEczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzYVVKQlFXbENMRU5CUVVNc1kwRkJZeXhGUVVGRk8wbEJRMmhETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRE8wMUJRVVU3U1VGQlpTeERRVUZETEVOQlFVTTdSVUZETlVNN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMR3RDUVVGclFpeERRVUZETEdWQlFXVXNSVUZCUlR0SlFVTnNReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXp0TlFVRkZPMGxCUVdkQ0xFTkJRVU1zUTBGQlF6dEZRVU0zUXpzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNZMEZCWXl4RFFVRkRMRmRCUVZjc1JVRkJSVHRKUVVNeFFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenROUVVGRk8wbEJRVmtzUTBGQlF5eERRVUZETzBWQlEzcERPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4elFrRkJjMElzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSVHRKUVVONFF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenROUVVOeVFqdEpRVU5HTEVOQlFVTXNRMEZCUXp0RlFVTktPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMSFZDUVVGMVFpeERRVUZETEU5QlFVOHNSVUZCUlR0SlFVTXZRaXhOUVVGTkxGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRekZETEUxQlFVMDdUVUZCUlR0SlFVRmhMRU5CUVVNc1IwRkJSeXhaUVVGWk8wbEJRM0pETEZsQlFWa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhKUVVGSk8wbEJSVFZDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRE8wMUJRVVU3U1VGQllTeERRVUZETEVOQlFVTTdSVUZETVVNN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMR2xDUVVGcFFpeERRVUZETEdOQlFXTXNSVUZCUlR0SlFVTm9ReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXp0TlFVTnlRanRKUVVOR0xFTkJRVU1zUTBGQlF6dEZRVU5LT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRGUVVORkxHbENRVUZwUWl4RFFVRkJMRVZCUVVjN1NVRkRiRUlzVDBGQlR5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zWTBGQll6dEZRVU0zUXp0RlFVVkJMRGhDUVVFNFFpeERRVUZETERKQ1FVRXlRaXhGUVVGRk8wbEJRekZFTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRE8wMUJRM0pDTzBsQlEwWXNRMEZCUXl4RFFVRkRPMFZCUTBvN1JVRkZRU3huUWtGQlowSXNRMEZCUVN4RlFVRkhPMGxCUTJwQ0xFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1IwRkJSeXhKUVVGQkxGRkJRVWtzUlVGQlF5eERRVUZETzBsQlJXaERMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRMnBDTEVsQlFVa3NRMEZEU0N3clFrRkJLMElzUlVGREwwSTdUVUZEUlN4RlFVRkZMRVZCUVVVc1NVRkJTU3hEUVVGRExHdENRVUZyUWp0TlFVTXpRaXhOUVVGTkxFVkJRVVVzYjBKQlFXVTdUVUZEZGtJc1NVRkJTU3hGUVVGRkxEWkNRVUZaTEVOQlFVTTdTVUZEY2tJc1EwRkJReXhGUVVORUxFbEJRMFlzUTBGQlF5eERRVU5CTEV0QlFVc3NRMEZCUXl4TlFVRk5PMDFCUTFnN1NVRkJRU3hEUVVORUxFTkJRVU03UlVGRFRqdEZRVVZCTEdWQlFXVXNRMEZCUVN4RlFVRkhPMGxCUTJoQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVU3VFVGRE5VSXNhVUpCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zY1VSQlFYRkVMRU5CUVVNN1RVRkRhRVU3U1VGRFJqdEpRVU5CTEVsQlFVazdUVUZEUml4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFbEJRVWtzUTBGRGRrSXNhME5CUVd0RExFVkJRMnhETEVsQlFVa3NRMEZCUXl4clFrRkRVQ3hEUVVGRE8wbEJRMGdzUTBGQlF5eERRVUZETEU5QlFVOHNTMEZCU3l4RlFVRkZPMDFCUTJRc2FVSkJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNLME5CUVN0RExFVkJRVVVzUzBGQlN5eERRVUZETzBsQlEyNUZPMGxCUlVFc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4SFFVRkhMRWxCUVVrN1JVRkRhRU03UVVGRFJqdEJRVUZETEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc2EwSkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGJHSkVMRWxCUVVFc1dVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRlpTeE5RVUZOTEdkQ1FVRm5RaXhEUVVGRE8wVkJRM0JETEZkQlFWY3NRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVU3U1VGRGNrSXNUVUZCVFR0TlFVTktMSEZDUVVGeFFqdE5RVU55UWl4eFFrRkJjVUk3VFVGRGNrSXNhVUpCUVdsQ08wMUJRMnBDTzBsQlEwWXNRMEZCUXl4SFFVRkhMRWxCUVVrN1NVRkZVaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRWRCUVVjc2NVSkJRWEZDTzBsQlEyeEVMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNSMEZCUnl4eFFrRkJjVUk3U1VGRGJFUXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEdsQ1FVRnBRanRKUVVNeFF5eEpRVUZKTEVOQlFVTXNjMEpCUVhOQ0xFZEJRVWNzY1VKQlFYRkNPMFZCUTNKRU8wVkJSVUVzVFVGQlRTeGxRVUZsTEVOQlFVTXNWVUZCVlN4RlFVRkZPMGxCUTJoRExFMUJRVTBzYlVKQlFXMUNMRWRCUVVjc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU4yUlN4TlFVRk5PMDFCUVVVc1YwRkJWenROUVVGRkxGZEJRVmM3VFVGQlJUdEpRVUZSTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF6dEpRVU53UlN4SlFVRkpMRmRCUVZjc1JVRkJSVHROUVVObUxGZEJRVmNzUTBGQlF5eFZRVUZWTEVkQlFVY3NiVUpCUVcxQ0xFTkJRVU1zVlVGQlZUdE5RVU4yUkN4WFFVRlhMRU5CUVVNc1kwRkJZeXhIUVVGSExHMUNRVUZ0UWl4RFFVRkRMR05CUVdNN1RVRkRMMFFzVjBGQlZ5eERRVUZETEdWQlFXVXNSMEZCUnl4dFFrRkJiVUlzUTBGQlF5eGxRVUZsTzAxQlJXcEZMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRExGZEJRVmNzUTBGQlF6dEpRVU16UkR0SlFVVkJMRWxCUVVrc1YwRkJWeXhGUVVGRk8wMUJRMllzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFMUJRVTBzUTBGQlF5eFhRVUZYTEVWQlFVVXNTVUZCU1N4RFFVRkRPMGxCUTNSRU8wbEJSVUVzU1VGQlNTeFBRVUZQTEVWQlFVVTdUVUZEV0N4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJReXhQUVVGUExFTkJRVU03U1VGRGJrUTdTVUZGUVN4SlFVRkpMRmRCUVZjc1NVRkJTU3hYUVVGWExFbEJRVWtzVDBGQlR5eEZRVUZGTzAxQlEzcERMRWxCUVVrc1EwRkJReXh6UWtGQmMwSXNRMEZCUXp0UlFVTXhRaXhMUVVGTExFVkJRVVVzYjBKQlFXOUNPMUZCUXpOQ0xGRkJRVkVzUlVGQlJUdE5RVU5hTEVOQlFVTXNRMEZCUXp0SlFVTktPMFZCUTBZN1JVRkZRU3hOUVVGTkxHTkJRV01zUTBGQlFTeEZRVUZITzBsQlEzSkNMRTFCUVUwc1VVRkJVU3hIUVVGSE8wMUJRMllzVjBGQlZ5eEZRVUZGTzFGQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJRenROUVVGRkxFTkJRVU03VFVGREwwUXNWMEZCVnl4RlFVRkZPMUZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNN1RVRkJUU3hEUVVGRE8wMUJRM0JFTEU5QlFVOHNSVUZCUlR0UlFVTlFMSEZDUVVGeFFpeEZRVU51UWl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU03VFVGRE5VTTdTVUZEUml4RFFVRkRPenRKUVVWRU8wRkJRMG83UVVGRFFUdEpRVU5KTEU5QlFVOHNVVUZCVVN4RFFVRkRMRmRCUVZjc1EwRkJReXhWUVVGVk8wbEJRM1JETEU5QlFVOHNVVUZCVVN4RFFVRkRMRmRCUVZjc1EwRkJReXhqUVVGak8wbEJRekZETEU5QlFVOHNVVUZCVVN4RFFVRkRMRmRCUVZjc1EwRkJReXhsUVVGbE8wbEJSVE5ETEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZETzBsQlJYWkRMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzU1VGQlNTeERRVUZETEVOQlFVTTdTVUZGZGtJc1RVRkJUU3hWUVVGVkxFZEJRVWtzUjBGQlJ5eEpRVUZMTEVsQlFVRXNkMEpCUVZjc1JVRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZET3p0SlFVVXZRenRCUVVOS08wRkJRMEU3U1VGRFNTeE5RVUZOTEdkQ1FVRm5RaXhIUVVGSkxHOUNRVUZ0UWl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVVVzU1VGQlJ5eFZRVUZWTEVOQlF6TkZMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlEzQkNMRU5CUVVVc1NVRkJSeXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVVc1NVRkJSeXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVVc1NVRkJSeXhWUVVGVkxFTkJRM3BGTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkRiRUlzUTBGQlJTeEpRVUZITEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlJTeFBRVUZOTzBsQlJYSkRMRTlCUVU4N1RVRkJSU3hSUVVGUkxFVkJRVVVzWjBKQlFXZENPMDFCUVVVc1NVRkJTU3hGUVVGRk8wbEJRVThzUTBGQlF6dEZRVU55UkR0QlFVTkdPMEZCUVVNc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeG5Ra0ZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTTVSVVFzU1VGQlFTeFRRVUZCTEVkQlFVRXNUMEZCUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTJVc1RVRkJUU3gzUWtGQmQwSXNRMEZCUXp0RlFVTTFRenRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNWMEZCVnl4RFFVRkRMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJUdEpRVU55UWl4TlFVRk5PMDFCUVVVc1kwRkJZenROUVVGRk8wbEJRV3RDTEVOQlFVTXNSMEZCUnl4SlFVRkpPMGxCUld4RUxFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NZMEZCWXp0SlFVTndReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRWRCUVVjc2FVSkJRV2xDTzBsQlJURkRMRTFCUVUwc1UwRkJVeXhIUVVGSE8wMUJRVVVzWTBGQll5eEZRVUZGTEVOQlFVTXNRMEZCUXp0TlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJRVlVzUTBGQlF6dEpRVU16UkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzZVVKQlFXVXNRMEZCUXl4VFFVRlRMRU5CUVVNN1NVRkZNME1zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03UlVGRGVrSTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRTFCUVUwc2IwSkJRVzlDTEVOQlFVTTdTVUZCUlR0RlFVRlRMRU5CUVVNc1JVRkJSVHRKUVVOMlF5eE5RVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXp0SlFVTjRReXhOUVVGTkxHVkJRV1VzUjBGQlJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4M1FrRkJkMElzUTBGRGVrUXNVVUZCVVN4RlFVTlNMRTlCUTBZc1EwRkJRenRKUVVORUxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPMDFCUTNKQ0xHTkJRV01zUlVGQlJUdEpRVU5zUWl4RFFVRkRMRU5CUVVNN1JVRkRTanRGUVVWQkxIZENRVUYzUWl4RFFVRkRMRmRCUVZjc1JVRkJSU3hQUVVGUExFVkJRVVU3U1VGRE4wTXNUVUZCVFR0TlFVRkZPMGxCUVdVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkRhRVFzVFVGQlRTd3lRa0ZCTWtJc1IwRkJSenROUVVGRkxFZEJRVWNzWTBGQll5eERRVUZETEU5QlFVODdTVUZCUlN4RFFVRkRPMGxCUld4RkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRkxGTkJRVk1zU1VGQlN6dE5RVU01UXl4TlFVRk5MRTlCUVU4c1IwRkJSeXhYUVVGWExFTkJRVU1zVTBGQlV5eERRVUZETzAxQlJYUkRMRWxCUVVrc1QwRkJUeXhEUVVGRExFOUJRVThzUlVGQlJUdFJRVU51UWl3eVFrRkJNa0lzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1QwRkJUenROUVVNeFJEdEpRVU5HTEVOQlFVTXNRMEZCUXp0SlFVTkdMRTFCUVUwc1pVRkJaU3hIUVVGSE8wMUJRM1JDTEVkQlFVY3NZMEZCWXp0TlFVTnFRaXhEUVVGRExFOUJRVThzUjBGQlJ6dEpRVU5pTEVOQlFVTTdTVUZGUkN4UFFVRlBMR1ZCUVdVN1JVRkRlRUk3TzBWQlJVRTdRVUZEUmp0QlFVTkJPenRGUVVWRkxHMUNRVUZ0UWl4RFFVRkJMRVZCUVVjN1NVRkRjRUlzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNN1RVRkJSU3hqUVVGakxFVkJRVVVzUTBGQlF6dEpRVUZGTEVOQlFVTXNRMEZCUXp0RlFVTm9SRHM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxHZENRVUZuUWl4RFFVRkJMRVZCUVVjN1NVRkRha0lzVFVGQlRTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1NVRkRia1FzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF6dEZRVU0zUXp0QlFVTkdPMEZCUVVNc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeDNRa0ZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRlRVpFTEVsQlFVRXNUMEZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNVMEZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNaVUZCUVN4SFFVRkJMRTlCUVVFN1FVRmpRU3hKUVVGQkxHVkJRVUVzUjBGQlFTeFBRVUZCTzBGQlUwRXNTVUZCUVN4blFrRkJRU3hIUVVGQkxFOUJRVUU3UVVGRlFTeEpRVUZCTEZsQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hsUVVGQkxFZEJRVUVzVDBGQlFUdEJRVUY1UlN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMR2RDUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEVWQlFVRXNTMEZCUVN4SlFVRkJMRWRCUVVFc1IwRkJRU3hqUVVGQkxFTkJRVUVzUjBGQlFTeFBRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRWxCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4SlFVRkJMRXRCUVVFc1JVRkJRU3hMUVVGQkxFVkJRVUVzVlVGQlFTeFJRVUZCTEZsQlFVRXNVVUZCUVN4UlFVRkJMRzlDUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTMEZCUVN4WFFVRkJMRWRCUVVFN1FVRkJRU3hUUVVGQkxHVkJRVUVzUjBGQlFTeFJRVUZCTEVkQlFVRXNSMEZCUVN4WlFVRkJMRU5CUVVFc1IwRkJRU3d5UWtGQlFTeEhRVUZCTEdkQ1FVRkJMRWRCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFUdEJRVUZCTEZOQlFVRXNZVUZCUVN4TFFVRkJMRVZCUVVFc1NVRkJRU3hsUVVGQkxFdEJRVUVzYVVKQlFVRXNTMEZCUVN4clFrRkJRU3hMUVVGQkxFMUJRVUVzU1VGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4TlFVRkJMRU5CUVVFc1YwRkJRU3hQUVVGQkxFbEJRVUVzUzBGQlFTeFRRVUZCTEZGQlFVRXNSMEZCUVN4SFFVRkJMRWxCUVVFc1EwRkJRU3hKUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTEVsQlFVRXNNa0pCUVVFc1IwRkJRU3h6UWtGQlFTeEhRVUZCTEZsQlFVRXNVMEZCUVN3MFJFRkJRU3hKUVVGQkxHZENRVUZCTEUxQlFVRXNSMEZCUVN4TlFVRkJMRVZCUVVFc1MwRkJRVHRCUVVWNlJTeE5RVUZOTEdOQlFXTXNSMEZCUnl3d1FrRkJNRUk3UVVGRmFrUXNUVUZCVFN4aFFVRmhMRWRCUVVjN1JVRkRjRUlzY1VKQlFYRkNMRVZCUVVVN1NVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN6dEpRVUZGTEZOQlFWTXNSVUZCUlR0RlFVRk5MRU5CUVVNN1JVRkRNMFFzZVVKQlFYbENMRVZCUVVVN1NVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN6dEpRVUZGTEZOQlFWTXNSVUZCUlR0RlFVRk5PMEZCUTJoRkxFTkJRVU03UVVGRlRTeE5RVUZOTEdWQlFXVXNSMEZCUnl4RFFVRkJMRTFCUVU4N1JVRkRjRU1zY1VKQlFYRkNMRVZCUVVVc1EwRkJReXhEUVVGRE8wVkJRM3BDTEhsQ1FVRjVRaXhGUVVGRk8wRkJRemRDTEVOQlFVTXNRMEZCUXp0QlFVRkRMRTlCUVVFc1EwRkJRU3hsUVVGQkxFZEJRVUVzWlVGQlFUdEJRVGhEU0R0QlFVTkJPMEZCUTBFN1FVRkRaU3hOUVVGTkxIZENRVUYzUWl4VFFVRlRMR2REUVVGblFpeERRVWx3UlR0RlFWZEJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRmRCUVZjc1EwRkJRenRKUVVOV0xGRkJRVkU3U1VGRFVpeHBRa0ZCYVVJN1NVRkRha0lzV1VGQldUdEpRVU5hTzBWQlF5dENMRU5CUVVNc1JVRkJSVHRKUVVOc1F5eExRVUZMTEVOQlFVTTdUVUZEU2l4UlFVRlJMRVZCUVVVc1lVRkJZVHROUVVOMlFpeFRRVUZUTzAxQlExUXNTVUZCU1N4RlFVRkZMR05CUVdNN1RVRkRjRUlzUzBGQlN5eEZRVUZGTEdWQlFXVXNRMEZCUXp0SlFVTjZRaXhEUVVGRExFTkJRVU03U1VGQlF5eGxRVUZCTzBsQlFVRXNaVUZCUVR0SlFVRkJMR1ZCUVVFN1NVRkJRU3hsUVVGQk8wbEJRVUVzWlVGQlFUdEpRVU5JTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1VVRkJVVHRKUVVONlFpeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFZEJRVWNzYVVKQlFXbENPMGxCUXpORExFbEJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NXVUZCV1R0SlFVVnFReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVsQlFVa3NaVUZCV1N4RFFVRkRMRU5CUVVNN1NVRkZOMElzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhIUVVGSExFbEJRVWtzY1VOQlFYRkNMRU5CUTNKRUxGTkJRVk1zUlVGRFZDeFRRVUZUTEVWQlExUXNVMEZCVXl4RlFVTlVMRU5CUVVNc1YwRkJWeXhEUVVOa0xFTkJRVU03U1VGRlJDeEpRVUZKTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4aFFVRmhMRVZCUVVVc1RVRkJUVHROUVVOMFJDeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU03U1VGRE9VSXNRMEZCUXl4RFFVRkRPMGxCUlVZc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRMmhETEcxQ1FVRnRRaXhGUVVOc1FpeGhRVUUwUXl4SlFVRkxPMDFCUTJoRUxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhoUVVGaExFTkJRVU03U1VGRGRFTXNRMEZEUml4RFFVRkRPMGxCUlVRc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4RFFVTXpRaXhKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRVZCUXpOQ0xFTkJRVU1zUzBGQlN5eEZRVUZGTEZkQlFWY3NSVUZCUlN4WlFVRlpMRXRCUVVzN1RVRkRjRU1zUzBGQlN5eERRVUZETEhGQ1FVRnhRaXhIUVVGSExGZEJRVmM3VFVGRGVrTXNTMEZCU3l4RFFVRkRMSGxDUVVGNVFpeEhRVUZITEZsQlFWazdTVUZEYUVRc1EwRkRSaXhEUVVGRE8wVkJRMGc3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxFbEJRVWtzZVVKQlFYbENMRU5CUVVFc1JVRkJWenRKUVVOMFF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4elFrRkJjMElzUTBGQlF5d3dRa0ZCTUVJc1EwRkJReXhEUVVGRE8wVkJRMnBGT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRGUVVORkxGVkJRVlVzUTBGQlFTeEZRVUZITzBsQlExZ3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxHVkJRV1VzUTBGQlF5eERRVUZETEVOQlFVTTdSVUZEZEVNN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBWQlEwVXNaVUZCWlN4RFFVRkJMRVZCUVVjN1NVRkRhRUlzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExFMUJRVTBzUTBGQlF6dE5RVU5xUXl4clFrRkJhMElzUlVGQlJTeERRVUZETEVOQlFVTTdUVUZEZEVJc2RVSkJRWFZDTEVWQlFVVTdTVUZETTBJc1EwRkJReXhEUVVGRE8wVkJRMG83TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeE5RVUZOTEhkQ1FVRjNRaXhEUVVNMVFpeGhRVUZ0UXl4RlFVTnVReXhIUVVGdlFpeEZRVU5JTzBsQlEycENMRTlCUVU4c1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMSGxDUVVGNVFpeERRVU14UkN4aFFVRmhMRVZCUTJJc1IwRkRSaXhEUVVGRE8wVkJRMGc3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeE5RVUZOTEdOQlFXTXNRMEZCUXl4aFFVRXlReXhGUVVGRk8wbEJRMmhGTEUxQlFVMHNVMEZCVXl4SFFVRkhMR0ZCUVdFc1EwRkJReXhWUVVGdlFqdEpRVU53UkN4SlFVRkpPMDFCUTBZc1RVRkJUU3hyUWtGQmEwSXNSMEZEZEVJc1RVRkJUU3hKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1kwRkJZeXhEUVVGRExHRkJRV0VzUTBGQlF6dE5RVVZxUlN4clFrRkJhMElzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFbEJRVWtzUTBGQlF6dE5RVU42UlN4TlFVRk5MRlZCUVZVc1IwRkJSeXhOUVVGTkxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhqUVVGakxFTkJRemRFTEd0Q1FVTkdMRU5CUVVNN1RVRkZSQ3hKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc2VVSkJRWGxDTEVOQlEyNUVMRk5CUVZNc1JVRkRWQ3hWUVVGVkxFVkJRMVlzVjBGRFJpeERRVUZETzAxQlEwUXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhUUVVGVExFTkJRVU03U1VGRGFrTXNRMEZCUXl4RFFVRkRMRTlCUVU4c1MwRkJTeXhGUVVGRk8wMUJRMlFzYVVKQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc01FTkJRVEJETEVWQlFVVXNTMEZCU3l4RFFVRkRPMDFCUXpORUxFbEJRVWtzUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXhKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRVZCUVVVc1UwRkJVeXhEUVVGRE8wMUJRMjVGTEUxQlFVMHNTMEZCU3p0SlFVTmlPMGxCUTBFc1QwRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdSVUZEZWtJN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc1RVRkJUU3h2UWtGQmIwSXNRMEZCUXl4aFFVRXlReXhGUVVGRk8wbEJRM1JGTEUxQlFVMHNVMEZCVXl4SFFVRkhMR0ZCUVdFc1EwRkJReXhWUVVGdlFqdEpRVU53UkN4aFFVRmhMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhoUVVGaExFTkJRVU1zU1VGQlNTeERRVUZETzBsQlF5OUVMRTFCUVUwc1ZVRkJWU3hIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExHTkJRV01zUTBGRE4wUXNZVUZEUml4RFFVRkRPMGxCUlVRc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRk5CUVZNc1EwRkJReXhUUVVGVExFVkJRVVVzVlVGQlZTeERRVUZETzBsQlJUVkVMRTlCUVU4c1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBWQlEzcENPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRzlDUVVGdlFpeERRVUZETEZOQlFXbENMRVZCUVVVN1NVRkRkRU1zU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExHRkJRV0VzUTBGQlF5eFRRVUZUTEVOQlFVTTdTVUZEY0VRc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eFRRVUZUTEVOQlFVTTdTVUZETDBJc1QwRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdSVUZEZWtJN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMR2RDUVVGblFpeERRVUZETEUxQlFXVXNSVUZCUlR0SlFVTm9ReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4elFrRkJjMElzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlEzSkZMRk5CUVZNc1NVRkJTenROUVVOaUxFbEJRVWtzUTBGQlF5eHpRa0ZCYzBJc1EwRkRla0lzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhGUVVNelFpeFRRVUZUTEVWQlExUXNUVUZEUml4RFFVRkRPMGxCUTBnc1EwRkRSaXhEUVVGRE8wVkJRMGc3UlVGRlVTeGxRVUZsTEVOQlFVTXNVMEZCYVVJc1JVRkJSVHRKUVVONlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1EwRkJReXhyUTBGQmEwTXNSVUZCUlN4VFFVRlRMRU5CUVVNN1JVRkRNVVU3UlVGRlVTeHpRa0ZCYzBJc1EwRkROVUlzWTBGSlF5eEZRVU5FTEZOQlFXbENMRVZCUTJwQ0xFMUJRV1VzUlVGRFpqdEpRVU5CTEVsQlFVa3NUVUZCVFN4RlFVRkZPMDFCUTFZc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF6dFJRVU5xUWl4TFFVRkxMRVZCUVVVc1RVRkJUVHRSUVVOaUxGRkJRVkVzUlVGQlJTeHhRMEZCZDBJc1EwRkJReXhSUVVGUk8xRkJRek5ETEZWQlFWVXNSVUZCUlR0VlFVTldMRTFCUVUwc1JVRkJSVHRSUVVOV08wMUJRMFlzUTBGQlF5eERRVUZETzBsQlEwbzdTVUZGUVN4alFVRmpMRU5CUVVNc1lVRkJZU3hEUVVGRExGTkJRVk1zUTBGQlF6dEpRVU4yUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExGTkJRVk1zUTBGQlF6dEpRVVV2UWl4UFFVRlBMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dEZRVU42UWp0RlFVVlJMSGRDUVVGM1FpeERRVU01UWl4alFVbERMRVZCUTBRc1YwRkpVeXhGUVVOVU8wbEJRMEVzWTBGQll5eERRVUZETEZOQlFWTXNRMEZCUlN4TFFVRXlReXhKUVVGTE8wMUJRM2hGTEUxQlFVMHNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZEZGtNc1MwRkJTeXhEUVVGRExHdENRVU5TTEVOQlFVTTdUVUZEUkN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRkxGVkJRVlVzU1VGQlN6dFJRVU14UWl4WFFVRlhMRU5CUVVNc1ZVRkJWU3hGUVVGRkxGZEJRVmNzUlVGQlJTeExRVUZMTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU03VFVGRGNrVXNRMEZCUXl4RFFVRkRPMGxCUTBvc1EwRkJReXhEUVVGRE8wVkJRMG83UlVGRlVTeG5Ra0ZCWjBJc1EwRkRkRUlzV1VGQmVVTXNSVUZEV0R0SlFVTTVRaXhOUVVGTkxHRkJRVEpETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUlhSRUxFdEJRVXNzVFVGQlRTeFRRVUZUTEVsQlFVa3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUlVGQlJUdE5RVU5xUkN4TlFVRk5MRmRCUVZjc1IwRkJSeXhaUVVGWkxFTkJRVU1zVTBGQlV5eERRVUZETzAxQlF6TkRMRTFCUVUwc1dVRkJXU3hIUVVGSExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNWMEZCVnl4RFFVRkRPMDFCUTNSRUxHRkJRV0VzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4WlFVRlpPMGxCUTNwRE8wbEJSVUVzVDBGQlR5eGhRVUZoTzBWQlEzUkNPMFZCUlZFc1pVRkJaU3hEUVVGRExGZEJRWGRDTEVWQlFXZENPMGxCUXpsRUxFMUJRVTA3VFVGQlJTeGhRVUZoTzAxQlFVVXNSMEZCUnp0SlFVRm5RaXhEUVVGRExFZEJRVWNzVjBGQlZ6dEpRVVY2UkN4TlFVRk5MRmxCUVZrc1IwRkJSenROUVVOdVFpeEhRVUZITEdWQlFXVTdUVUZEYkVJc1RVRkJUU3hGUVVGRkxGZEJRVmNzUTBGQlF5eE5RVUZuUWp0TlFVTndReXhUUVVGVExFVkJRVVVzWVVGQllUdE5RVU40UWl4TlFVRk5MRVZCUVVVc1lVRkJZU3hEUVVGRE8wbEJRM2hDTEVOQlFVTTdTVUZGUkN4UFFVRlBMRmxCUVZrN1JVRkRja0k3UlVGRlVTeG5Ra0ZCWjBJc1EwRkJReXhoUVVFMFF5eEZRVUZGTzBsQlEzSkZMRTFCUVUwc1JVRkJSU3hIUVVGSExHRkJRV0VzUTBGQlF5eFZRVUZ2UWp0SlFVTTNReXhOUVVGTkxFMUJRVTBzUjBGQlJ5eGhRVUZoTEVOQlFVTXNUVUZCVFN4SlFVRkpMR2REUVVGbE8wbEJRM1JFTEVsQlFVazdUVUZEUml4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFbEJRVWtzUTBGRGRrSXNLMEpCUVN0Q0xFVkJReTlDTzFGQlEwVXNSVUZCUlR0UlFVTkdMRTFCUVUwN1VVRkRUaXhKUVVGSkxFVkJRVVVzTmtKQlFWa3NRMEZCUXp0TlFVTnlRaXhEUVVGRExFVkJRMFFzU1VGRFJpeERRVUZETzBsQlEwZ3NRMEZCUXl4RFFVRkRMRTlCUVU4c1MwRkJTeXhGUVVGRk8wMUJRMlFzYVVKQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc05rTkJRVFpETEVWQlFVVXNTMEZCU3l4RFFVRkRPMGxCUTJoRk8wVkJRMFk3UlVGRlVTeHBRa0ZCYVVJc1EwRkJReXhKUVVGWkxFVkJRVVU3U1VGRGRFTXNUVUZCVFN4UlFVRlJMRWRCUVVjc1NVRkJRU3c0UWtGQll5eEZRVUZETEVsQlFVa3NRMEZCUXp0SlFVTnlReXhOUVVGTkxFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hMUVVGTExFTkJRVU03U1VGRGVrTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1JVRkRNVU03UlVGRlVTeGxRVUZsTEVOQlFVTXNVMEZCYVVJc1JVRkJSVHRKUVVONlF5eEpRVUZKTzAxQlEwWXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxFTkJRM1pDTEd0RFFVRnJReXhGUVVOc1F5eFRRVUZUTEVWQlExUXNVVUZEUml4RFFVRkRPMGxCUTBnc1EwRkJReXhEUVVGRExFOUJRVThzUzBGQlN5eEZRVUZGTzAxQlEyUXNhVUpCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zWjBSQlFXZEVMRVZCUVVVc1MwRkJTeXhEUVVGRE8wbEJRMjVGTzBWQlEwWTdRVUZEUmp0QlFVRkRMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzZDBKQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVONldVUXNTVUZCUVN4VFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzUzBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRkZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFBRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1UwRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZsQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3haUVVGQkxFZEJRVUVzVDBGQlFUdEJRVWxCTEVsQlFVRXNXVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkxRVHRCUVVOQkxFMUJRVTBzWjBKQlFXZENMRWRCUVVjc1dVRkJUU3hIUVVGSExFTkJRVU03TzBGQlJXNURPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMlVzVFVGQlRTeHpRa0ZCYzBJc1EwRkJRenRGUVVNeFF6dEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRmRCUVZjc1EwRkJRenRKUVVOV0xGRkJRVkVzUjBGQlJ5eG5Ra0ZCWjBJN1NVRkRNMElzVjBGQlZ6dEpRVU5ZTEU5QlFVODdTVUZEVUN4bFFVRmxPMGxCUTJZc1UwRkJVenRKUVVOVUxHZENRVUZuUWp0SlFVTm9RaXgzUWtGQmQwSXNSMEZCUnl4SlFVRkpPMGxCUXk5Q08wVkJRMFlzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZPMGxCUVVFc1NVRkJRU3hwUWtGQlFTeEZRVUZCTEd0Q1FVRkJMRVZCUVVFc2NVSkJRVUVzUlVGQlFTeHpRa0ZCUVN4RlFVRkJMSE5DUVVGQk8wbEJRMDRzU1VGQlNTeERRVUZETEhkQ1FVRjNRaXhIUVVGSExIZENRVUYzUWp0SlFVTjRSQ3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1owSkJRV2RDTzBsQlEzaERMRWxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzVjBGQlZ6dEpRVU01UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExGRkJRVkU3U1VGRGVFSXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhQUVVGUE8wbEJRM1JDTEVsQlFVa3NRMEZCUXl4bFFVRmxMRWRCUVVjc1pVRkJaVHRKUVVOMFF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRk5CUVZNN1NVRkRNVUlzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhKUVVGQkxHbENRVUZCTEVkQlEzQkNMRWxCUVVrc1EwRkJReXhYUVVGWExHTkJRVUVzYVVKQlFVRXNkVUpCUVdoQ0xHbENRVUZCTEVOQlFXdENMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEdsQ1FVRnBRanRKUVVOMFJDeEpRVUZKTEVOQlFVTXNaVUZCWlN4SlFVRkJMR3RDUVVGQkxFZEJRVWNzU1VGQlNTeERRVUZETEZkQlFWY3NZMEZCUVN4clFrRkJRU3gxUWtGQmFFSXNhMEpCUVVFc1EwRkJhMElzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1pVRkJaVHRKUVVONlJTeEpRVUZKTEVOQlFVTXNZMEZCWXl4SlFVRkJMSEZDUVVGQkxFZEJRVWNzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhqUVVGQkxIRkNRVUZCTEhWQ1FVRnlRaXh4UWtGQlFTeERRVUYxUWl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlJTeExRVUZMTEVsQlFVczdUVUZEZGtVc1QwRkJUeXhMUVVGTExFTkJRVU1zVDBGQlR6dEpRVU4wUWl4RFFVRkRMRU5CUVVNN1NVRkRSaXhKUVVGSkxFTkJRVU1zV1VGQldTeEpRVUZCTEhOQ1FVRkJMRWRCUVVjc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4alFVRkJMSE5DUVVGQkxIVkNRVUZ5UWl4elFrRkJRU3hEUVVGMVFpeExRVUZMTEVOQlFVTXNZVUZCWVR0SlFVTTVSQ3hKUVVGSkxFTkJRVU1zWTBGQll5eEpRVUZCTEhOQ1FVRkJMRWRCUVVjc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4alFVRkJMSE5DUVVGQkxIVkNRVUZ5UWl4elFrRkJRU3hEUVVGMVFpeExRVUZMTEVOQlFVTXNZMEZCWXp0SlFVTnFSU3hKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eFBRVUZQTEVOQlFVTTdTVUZEZGtRc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4SFFVRkhMSEZDUVVGeFFqdEpRVVZ1UkN4WFFVRlhMR0ZCUVZnc1YwRkJWeXgxUWtGQldDeFhRVUZYTEVOQlFVVXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wMUJRVVVzWlVGQlpUdE5RVUZGTzBsQlFXdENMRU5CUVVNc1MwRkJTenROUVVOMlJTeEpRVU5GTEVsQlFVa3NRMEZCUXl4bFFVRmxMRXRCUVVzc1pVRkJaU3hKUVVONFF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFdEJRVXNzYVVKQlFXbENMRVZCUXpWRE8xRkJRMEVzU1VGQlNTeERRVUZETEdWQlFXVXNSMEZCUnl4bFFVRmxPMUZCUTNSRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhwUWtGQmFVSTdVVUZETVVNc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRPMVZCUVVVN1VVRkJaMElzUTBGQlF5eERRVUZETzAxQlEycEVPMGxCUTBZc1EwRkJReXhEUVVGRE8wbEJRMFlzWjBKQlFXZENMR0ZCUVdoQ0xHZENRVUZuUWl4MVFrRkJhRUlzWjBKQlFXZENMRU5CUVVVc1UwRkJVeXhEUVVONlFpeERRVUZETzAxQlFVVXNUVUZCVFN4SFFVRkhMRVZCUVVVN1RVRkJSU3hoUVVGaExFZEJRVWNzUlVGQlJUdE5RVUZGTEdOQlFXTXNSMEZCUnp0SlFVRkhMRU5CUVVNc1MwRkJTenROUVVNMVJDeEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVVVzUzBGQlN5eEpRVUZMTzFGQlF6RkRMRTlCUVU4c1MwRkJTeXhEUVVGRExFOUJRVTg3VFVGRGRFSXNRMEZCUXl4RFFVRkRPMDFCUTBZc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eGhRVUZoTzAxQlEycERMRWxCUVVrc1EwRkJReXhqUVVGakxFZEJRVWNzWTBGQll6dEpRVU4wUXl4RFFVTkdMRU5CUVVNN1JVRkRTRHM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxFMUJRVTBzWlVGQlpTeERRVUZETzBsQlFVVXNaVUZCWlR0SlFVRkZPMFZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEZRVUZGTzBsQlEzWkVMRTFCUVUwc01rSkJRVEpDTEVkQlFVY3NaVUZCWlN4SlFVRkpMRWxCUVVrc1EwRkJReXhsUVVGbE8wbEJRek5GTEUxQlFVMHNNa0pCUVRKQ0xFZEJReTlDTEU5QlFVOHNTVUZCU1N4SlFVRkpMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJRenRKUVVNelJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSVHROUVVOc1FqdEpRVU5HTzBsQlEwRXNTVUZCU1N4RFFVRkRMRWxCUVVFc01rTkJRV2xETEVWQlFVTXNNa0pCUVRKQ0xFTkJRVU1zUlVGQlJUdE5RVU51UlR0SlFVTkdPMGxCUTBFc1NVRkRSU3hEUVVGRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1NVRkRka0lzTWtKQlFUSkNMRXRCUVVzc2EwSkJRVk1zUTBGQlF5eFBRVUZQTEVWQlEycEVPMDFCUTBFN1NVRkRSanRKUVVWQkxFMUJRVTBzYVVOQlFXbERMRWRCUTNKRExFTkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhKUVVOMlFpd3lRa0ZCTWtJc1MwRkJTeXhyUWtGQlV5eERRVUZETEU5QlFVODdTVUZEYmtRc1RVRkJUVHROUVVGRk8wbEJRVlVzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1MwRkJTenRKUVVVelF5eE5RVUZOTEdGQlFXRXNSMEZCUnl4cFEwRkJhVU1zUjBGRGJrUXNhVU5CUVhsQ0xFZEJRM3BDTEZOQlFWTTdTVUZGWWl4TlFVRk5MR05CUVdNc1IwRkJSeXhGUVVGRk8wbEJRM3BDTEV0QlFVc3NUVUZCVFN4WlFVRlpMRWxCUVVrc1lVRkJZU3hGUVVGRk8wMUJRM2hETEVsQlEwVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlJTeFBRVUZQTEVsQlEyaERMRWxCUVVFc2JVTkJRWE5DTEVWQlFVTXNUMEZCVHl4RlFVRkZMRmxCUVZrc1EwRkRPVU1zUTBGQlF5eEpRVU5FTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVVVzVDBGQlR5eEpRVU01UWl4SlFVRkJMRzFEUVVGelFpeEZRVUZETEU5QlFVOHNSVUZCUlN4WlFVRlpMRU5CUXpsRExFTkJRVU1zU1VGRFJDeERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGQlJUdE5RVUZSTEVOQlFVTXNTMEZEY0VNc1NVRkJRU3h0UTBGQmMwSXNSVUZCUXl4UFFVRlBMRVZCUVVVc1dVRkJXU3hEUVVNNVF5eERRVUZETEVWQlEwUTdVVUZEUVN4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF6dE5RVU51UXp0SlFVTkdPMGxCUTBFc1RVRkJUU3h4UWtGQmNVSXNSMEZCUnl4RFFVTTFRaXhqUVVGakxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1JVRkROMElzWTBGQll5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1kwRkJZeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZEZEVRN1NVRkRSQ3hMUVVGTExFMUJRVTBzVjBGQlZ5eEpRVUZKTEhGQ1FVRnhRaXhGUVVGRk8wMUJReTlETEVsQlFVa3NUVUZCVFR0TlFVTldMRWxCUVVrN1VVRkRSaXhOUVVGTkxFZEJRVWNzVFVGQlRTeEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zZFVKQlFYVkNMRU5CUTJ4RkxESkNRVUV5UWl4RlFVTXpRaXhYUVVOR0xFTkJRVU03VFVGRFNDeERRVUZETEVOQlFVTXNUMEZCVHl4TFFVRkxMRVZCUVVVN1VVRkRaQ3hKUVVGQkxHTkJRVWtzUlVGRFJDeHZSVUZCYlVVc1JVRkRjRVVzUzBGRFJpeERRVUZETzFGQlEwUTdUVUZEUmp0TlFVVkJMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NSVUZCUlR0TlFVTTFRaXhOUVVGTkxHdENRVUZyUWl4SFFVRkhMRVZCUVVVN1RVRkROMElzU1VGQlNTeE5RVUZOTEVWQlFVVTdVVUZEVml4TlFVRk5MSEZDUVVGeFFpeEhRVUZITEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJRMnBFTEV0QlFVc3NUVUZCVFN4dFFrRkJiVUlzU1VGQlNTeHhRa0ZCY1VJc1JVRkJSVHRWUVVOMlJDeE5RVUZOTzFsQlFVVXNUMEZCVHp0WlFVRkZMRTFCUVUwN1dVRkJSVHRWUVVGVExFTkJRVU1zUjBGRGFrTXNZVUZCWVN4RFFVRkRMRzFDUVVGdFFpeERRVUZETzFWQlJYQkRMR3RDUVVGclFpeERRVUZETEVsQlFVa3NRMEZCUlN4SFFVRkZMRTFCUVU4c1RVRkJTeXhQUVVGUkxFVkJRVU1zUTBGQlF6dFZRVVZxUkN4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVOQlFVTTdXVUZEY2tJc1QwRkJUenRaUVVOUUxFMUJRVTA3V1VGRFRqdFZRVU5HTEVOQlFVTXNRMEZCUXp0UlFVTktPMUZCUlVFc1NVRkJTU3hwUWtGQmFVSXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhGUVVGRk8xVkJRMmhETEVsQlFVa3NRMEZCUXl4elFrRkJjMElzUTBGQlF6dFpRVU14UWl4TFFVRkxMRVZCUVVVc2FVTkJRVzlDTEVOQlFVTXNZVUZCWVR0WlFVTjZReXhSUVVGUkxFVkJRVVVzY1VOQlFYZENMRU5CUVVNc1RVRkJUVHRaUVVONlF5eFZRVUZWTEVWQlFVVTdZMEZEVml4TlFVRk5MRVZCUVVVc2EwSkJRV3RDTzJOQlF6RkNMR05CUVdNc1JVRkJSU3d3UWtGQllTeERRVUZETEV0QlFVczdZMEZEYmtNc1ZVRkJWU3hGUVVGRkxITkNRVUZUTEVOQlFVTTdXVUZEZUVJN1ZVRkRSaXhEUVVGRExFTkJRVU03VlVGRFJpeE5RVUZOTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhwUWtGQmFVSXNSVUZCUlR0WlFVTXZSQ3hsUVVGbExFVkJRVVVzTWtKQlFUSkNPMWxCUXpWRExFOUJRVThzUlVGQlJUdFZRVU5ZTEVOQlFVTXNRMEZCUXp0UlFVTktPMDFCUTBZN1NVRkRSanRGUVVOR096dEZRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeHhRa0ZCY1VJc1EwRkJRenRKUVVGRkxHVkJRV1U3U1VGQlJUdEZRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkJSVHRKUVVOMlJDeE5RVUZOTERKQ1FVRXlRaXhIUVVGSExHVkJRV1VzU1VGQlNTeEpRVUZKTEVOQlFVTXNaVUZCWlR0SlFVTXpSU3hOUVVGTkxESkNRVUV5UWl4SFFVRkhMRTlCUVU4c1NVRkJTU3hKUVVGSkxFTkJRVU1zVDBGQlR6dEpRVU16UkN4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzU1VGQlNTd3lRa0ZCTWtJc1EwRkJReXhGUVVGRk8wMUJRMjVFTzBsQlEwWTdTVUZEUVN4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRE8wMUJRMjVDTEdWQlFXVXNSVUZCUlN3eVFrRkJNa0k3VFVGRE5VTXNUMEZCVHl4RlFVRkZPMGxCUTFnc1EwRkJReXhEUVVGRE8wbEJRMFlzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4blFrRkJaMEk3UlVGRGJFTTdSVUZGUVN3d1FrRkJNRUlzUTBGQlF5eFBRVUZQTEVWQlFVVTdTVUZEYkVNc1QwRkJUeXhQUVVGUExHRkJRVkFzVDBGQlR5eDFRa0ZCVUN4UFFVRlBMRU5CUVVVc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNZMEZCWXl4RFFVRkRMRTlCUVU4N1JVRkRla1E3TzBWQlJVRTdSVUZEUVR0QlFVTkdPMEZCUTBFN1JVRkRSU3hKUVVGSkxGRkJRVkVzUTBGQlF5eFJRVUZSTEVWQlFVVTdTVUZEY2tJc1NVRkJTU3hEUVVGRExFOUJRVThzU1VGQlNTeGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJRenRKUVVNelF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPMDFCUTJJN1NVRkRSanRKUVVOQkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NWMEZCVnl4RFFVRkRMRTFCUVUwN1RVRkRMMElzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMGxCUTNoQ0xFTkJRVU1zUlVGQlJTeFJRVUZSTEVOQlFVTTdSVUZEWkRzN1JVRkZRVHRCUVVOR08wRkJRMEU3UlVGRFJTeEpRVUZKTEU5QlFVOHNRMEZCUXl4UFFVRlBMRVZCUVVVN1NVRkRia0lzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlR0TlFVTmFPMGxCUTBZN1NVRkRRU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEU5QlFVODdTVUZEZGtJc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwN1RVRkRiRU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNUMEZCVHl4TFFVRkxMRWxCUVVrc1EwRkJReXd3UWtGQk1FSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSVHRSUVVNM1JDeE5RVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNUMEZCVHl4RFFVRkRPMUZCUTNoRUxFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NUMEZCVHp0UlFVTjBRaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNN1ZVRkJSU3hQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETzFGQlFWRXNRMEZCUXl4RFFVRkRPMDFCUTNaRU8wbEJRMFlzUTBGQlF5eERRVUZETzBWQlEwbzdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEVsQlFVa3NaVUZCWlN4RFFVRkRMR1ZCUVdVc1JVRkJSVHRKUVVOdVF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RlFVRkZPMDFCUTNCQ08wbEJRMFk3U1VGRFFTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzWlVGQlpUdEpRVU4yUXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1RVRkJSVHRKUVVGWExFTkJRVU1zUzBGQlN6dE5RVU5zUkN4SlFVRkpMRWxCUVVrc1EwRkJReXhWUVVGVkxFdEJRVXNzVlVGQlZTeEZRVUZGTzFGQlEyeERMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzVlVGQlZUdFJRVU0xUWl4SlFVRkpMRlZCUVZVc1JVRkJSVHRWUVVOa0xFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGRE8xRkJRemxDTzAxQlEwWTdTVUZEUml4RFFVRkRMRU5CUVVNN1JVRkRTanM3UlVGRlFUdEJRVU5HTzBGQlEwRTdSVUZEUlN4SlFVRkpMRk5CUVZNc1EwRkJReXhUUVVGVExFVkJRVVU3U1VGRGRrSXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSVHROUVVOa08wbEJRMFk3U1VGRFFTeEpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRk5CUVZNN1JVRkROMEk3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxFbEJRVWtzVVVGQlVTeERRVUZCTEVWQlFVYzdTVUZEWWl4UFFVRlBMRWxCUVVrc1EwRkJReXhOUVVGTkxFbEJRVWtzU1VGQlNTeERRVUZETEZWQlFWVTdSVUZEZGtNN1JVRkRRVHRCUVVOR08wRkJRVU1zVDBGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4elFrRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVNMVVrUXNTVUZCUVN4UFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4bFFVRkJMRWRCUVVFc1QwRkJRVHRCUVdGQkxFbEJRVUVzWlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZWUVN4SlFVRkJMRmxCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFJRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1NVRkJRU3hIUVVGQkxFOUJRVUU3UVVGQlowVXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlFVRXNVMEZCUVN4blFrRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeEZRVUZCTEV0QlFVRXNTVUZCUVN4SFFVRkJMRWRCUVVFc1kwRkJRU3hEUVVGQkxFZEJRVUVzVDBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4SlFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNTVUZCUVN4TFFVRkJMRVZCUVVFc1MwRkJRU3hGUVVGQkxGVkJRVUVzVVVGQlFTeFpRVUZCTEZGQlFVRXNVVUZCUVN4dlFrRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEV0QlFVRXNWMEZCUVN4SFFVRkJPMEZCUVVFc1UwRkJRU3hsUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEVkQlFVRXNXVUZCUVN4RFFVRkJMRWRCUVVFc01rSkJRVUVzUjBGQlFTeG5Ra0ZCUVN4SFFVRkJMRWRCUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEdGQlFVRXNTMEZCUVN4RlFVRkJMRWxCUVVFc1pVRkJRU3hMUVVGQkxHbENRVUZCTEV0QlFVRXNhMEpCUVVFc1MwRkJRU3hOUVVGQkxFbEJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNUVUZCUVN4RFFVRkJMRmRCUVVFc1QwRkJRU3hKUVVGQkxFdEJRVUVzVTBGQlFTeFJRVUZCTEVkQlFVRXNSMEZCUVN4SlFVRkJMRU5CUVVFc1NVRkJRU3hEUVVGQkxFdEJRVUVzUlVGQlFTeEpRVUZCTERKQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUjBGQlFTeFpRVUZCTEZOQlFVRXNORVJCUVVFc1NVRkJRU3huUWtGQlFTeE5RVUZCTEVkQlFVRXNUVUZCUVN4RlFVRkJMRXRCUVVFN1FVRkZhRVVzVFVGQlRTeGpRVUZqTEVkQlFVY3NLMEpCUVN0Q08wRkJRM1JFTEUxQlFVMHNaME5CUVdkRExFZEJRVWNzTkVKQlFUUkNPMEZCUlhKRkxFMUJRVTBzWVVGQllTeEhRVUZITzBWQlEzQkNMR2xEUVVGcFF5eEZRVUZGTzBsQlFVVXNUMEZCVHl4RlFVRkZMRXRCUVVzN1NVRkJSU3hUUVVGVExFVkJRVVU3UlVGQlRTeERRVUZETzBWQlEzWkZMSEZEUVVGeFF5eEZRVUZGTzBsQlFVVXNUMEZCVHl4RlFVRkZMRXRCUVVzN1NVRkJSU3hUUVVGVExFVkJRVVU3UlVGQlRUdEJRVU0xUlN4RFFVRkRPMEZCUlVRc1RVRkJUU3hsUVVGbExFZEJRVWNzUTBGQlFTeE5RVUZQTzBWQlF6ZENMR2xEUVVGcFF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0RlFVTnlReXh4UTBGQmNVTXNSVUZCUlR0QlFVTjZReXhEUVVGRExFTkJRVU03UVVGclJFWTdRVUZEUVR0QlFVTkJPMEZCUTJVc1RVRkJUU3cyUWtGQk5rSXNVMEZCVXl4blEwRkJaMElzUTBGSmVrVTdSVUZYUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4WFFVRlhMRU5CUVVNN1NVRkRWaXhUUVVGVE8wbEJRMVFzYVVKQlFXbENPMGxCUTJwQ0xGRkJRVkU3U1VGRFVqdEZRVU52UXl4RFFVRkRMRVZCUVVVN1NVRkRka01zUzBGQlN5eERRVUZETzAxQlEwb3NTVUZCU1N4RlFVRkZMR05CUVdNN1RVRkRjRUlzVVVGQlVTeEZRVUZGTEdGQlFXRTdUVUZEZGtJc1UwRkJVenROUVVOVUxFdEJRVXNzUlVGQlJTeGxRVUZsTEVOQlFVTTdTVUZEZWtJc1EwRkJReXhEUVVGRE8wbEJRVU1zWlVGQlFUdEpRVUZCTEdWQlFVRTdTVUZCUVN4bFFVRkJPMGxCUVVFc1pVRkJRVHRKUVVGQkxHVkJRVUU3U1VGRlNDeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFZEJRVWNzYVVKQlFXbENPMGxCUXpORExFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NVVUZCVVR0SlFVTjZRaXhKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEZsQlFWazdTVUZGYWtNc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEpRVUZKTEdWQlFWa3NRMEZCUXl4RFFVRkRPMGxCUXpkQ0xFbEJRVWtzUTBGQlF5d3lRa0ZCTWtJc1IwRkJSeXhKUVVGSkxEQkRRVUV3UWl4RFFVTXZSQ3hUUVVGVExFVkJRMVFzVTBGQlV5eEZRVU5VTEZOQlFWTXNSVUZEVkN4RFFVRkRMRlZCUVZVc1EwRkRZaXhEUVVGRE8wbEJSVVFzU1VGQlNTeERRVUZETERKQ1FVRXlRaXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNZVUZCWVN4RlFVRkZMRTFCUVUwN1RVRkRNMFFzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRE8wbEJRemxDTEVOQlFVTXNRMEZCUXp0SlFVVkdMRWxCUVVrc1EwRkJReXd5UWtGQk1rSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVOeVF5eHRRa0ZCYlVJc1JVRkRiRUlzVTBGQmQwTXNTVUZCU3p0TlFVTTFReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1UwRkJVeXhGUVVGRkxHZERRVUZuUXl4RFFVRkRPMGxCUTNCRkxFTkJRMFlzUTBGQlF6dEpRVVZFTEVsQlFVa3NRMEZCUXl4M1FrRkJkMElzUTBGRE0wSXNTVUZCU1N4RFFVRkRMREpDUVVFeVFpeEZRVU5vUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hYUVVGWExFVkJRVVVzV1VGQldTeExRVUZMTzAxQlEzQkRMRXRCUVVzc1EwRkJReXhwUTBGQmFVTXNSMEZCUnl4WFFVRlhPMDFCUTNKRUxFdEJRVXNzUTBGQlF5eHhRMEZCY1VNc1IwRkJSeXhaUVVGWk8wbEJRelZFTEVOQlEwWXNRMEZCUXp0RlFVTklPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4SlFVRkpMR3RDUVVGclFpeERRVUZCTEVWQlFWYzdTVUZETDBJc1QwRkJUeXhKUVVGSkxFTkJRVU1zTWtKQlFUSkNMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNRMEZCUXp0RlFVTjBSVHM3UlVGRlFUdEJRVU5HTzBGQlEwRTdSVUZEUlN4VlFVRlZMRU5CUVVFc1JVRkJSenRKUVVOWUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4bFFVRmxMRU5CUVVNc1EwRkJReXhEUVVGRE8wVkJRM1JET3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEUxQlFVMHNOa0pCUVRaQ0xFTkJRMnBETEU5QlFXVXNSVUZEWml4SFFVRnZRaXhGUVVOSU8wbEJRMnBDTEUxQlFVMHNUMEZCVHl4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRzlDUVVGdlFpeERRVUZETEU5QlFVOHNRMEZCUXp0SlFVVXpSU3hSUVVGUkxFOUJRVThzUTBGQlF5eEpRVUZKTzAxQlEyeENMRXRCUVVzc2IwSkJRVmNzUTBGQlF5eE5RVUZOTzFGQlFVVTdWVUZEZGtJc1QwRkJUeXhKUVVGSkxFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4TlFVRk5MRXRCUVVzN1dVRkRhRU1zVFVGQlRTeERRVU5LTEVsQlFVa3NTMEZCU3l4RFFVRkRMSEZFUVVGeFJDeERRVU5xUlN4RFFVRkRPMVZCUTBnc1EwRkJReXhEUVVGRE8xRkJRMG83VFVGRlFTeExRVUZMTEc5Q1FVRlhMRU5CUVVNc1RVRkJUVHRSUVVGRk8xVkJRM1pDTEU5QlFVOHNTVUZCU1N4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzVFVGQlRTeExRVUZMTzFsQlEyaERMRTFCUVUwc1EwRkRTaXhKUVVGSkxFdEJRVXNzUTBGQlF5eHhSRUZCY1VRc1EwRkRha1VzUTBGQlF6dFZRVU5JTEVOQlFVTXNRMEZCUXp0UlFVTktPMDFCUlVFc1MwRkJTeXh2UWtGQlZ5eERRVUZETEU5QlFVODdVVUZCUlR0VlFVTjRRaXhQUVVGUExFbEJRVWtzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1MwRkJTenRaUVVOb1F5eE5RVUZOTEVOQlEwb3NTVUZCU1N4TFFVRkxMRU5CUVVNc2MwUkJRWE5FTEVOQlEyeEZMRU5CUVVNN1ZVRkRTQ3hEUVVGRExFTkJRVU03VVVGRFNqdE5RVVZCTEV0QlFVc3NiMEpCUVZjc1EwRkJReXhGUVVGRk8xRkJRVVU3VlVGRGJrSXNUMEZCVHl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVOdVFpeEpRVUZKTEV0QlFVc3NRMEZCUXl3d1JFRkJNRVFzUTBGRGRFVXNRMEZCUXp0UlFVTklPMDFCUlVFN1VVRkJVenRWUVVOUUxFOUJRVThzU1VGQlNTeERRVUZETERKQ1FVRXlRaXhEUVVGRExIbENRVUY1UWl4RFFVTXZSRHRaUVVGRkxFbEJRVWtzUlVGQlJUdFZRVUZSTEVOQlFVTXNSVUZEYWtJc1IwRkRSaXhEUVVGRE8xRkJRMGc3U1VGRFJqdEZRVU5HT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEUxQlFVMHNiVUpCUVcxQ0xFTkJRVU1zVTBGQk5FTXNSVUZCUlR0SlFVTjBSU3hwUWtGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl3d1EwRkJNRU1zUTBGQlF6dEpRVU53UkN4TlFVRk5MRk5CUVZNc1IwRkJSeXhUUVVGVExFTkJRVU1zVlVGQmIwSTdTVUZEYUVRN1NVRkRRVHRKUVVOQkxFbEJRVWs3VFVGRFJpeE5RVUZOTEd0Q1FVRnJRaXhIUVVOMFFpeE5RVUZOTEVsQlFVa3NRMEZCUXl3eVFrRkJNa0lzUTBGQlF5eGpRVUZqTEVOQlFVTXNVMEZCVXl4RFFVRkRPenROUVVWc1JUdE5RVU5CTEUxQlFVMHNVMEZCVXl4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMSE5DUVVGelFpeERRVU53UlN4clFrRkJhMElzUTBGQlF5eEpRVU55UWl4RFFVRkRPenROUVVWRU8wMUJRMEU3VFVGRFFTeEpRVUZKTEVOQlFVTXNNa0pCUVRKQ0xFTkJRVU1zZVVKQlFYbENMRU5CUTNoRUxGTkJRVk1zUlVGRFZDeFRRVUZUTEVWQlExUXNWVUZEUml4RFFVRkRPMDFCUlVRc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eFRRVUZUTEVOQlFVTTdUVUZGTDBJc1QwRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdTVUZEZWtJc1EwRkJReXhEUVVGRExFOUJRVThzUzBGQlN5eEZRVUZGTzAxQlEyUXNhVUpCUVVjc1EwRkJReXhKUVVGSkxFTkJRMDRzZVVSQlFYbEVMRVZCUTNwRUxFdEJRMFlzUTBGQlF6dE5RVU5FTEVsQlFVa3NRMEZCUXl4elFrRkJjMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNNa0pCUVRKQ0xFVkJRVVVzVTBGQlV5eERRVUZETzAxQlEzaEZMRTFCUVUwc1MwRkJTenRKUVVOaU8wVkJRMFk3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxIbENRVUY1UWl4RFFVRkRMRXRCUVdFc1JVRkJSVHRKUVVOMlF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4elFrRkJjMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNNa0pCUVRKQ0xFVkJRVVVzUzBGQlN5eERRVUZETzBWQlF6ZEZPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4blFrRkJaMElzUTBGQlF5eE5RVUZsTEVWQlFVVTdTVUZEYUVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGRFZDeEpRVUZKTEVOQlFVTXNNa0pCUVRKQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1EwRkRla1FzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUlN4VFFVRlRMRWxCUVVzN1RVRkRka0lzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhEUVVONlFpeEpRVUZKTEVOQlFVTXNNa0pCUVRKQ0xFVkJRMmhETEZOQlFWTXNSVUZEVkN4TlFVTkdMRU5CUVVNN1NVRkRTQ3hEUVVGRExFTkJRVU03UlVGRFNqczdSVUZGUVR0QlFVTkdPMEZCUTBFN1JVRkRSU3hsUVVGbExFTkJRVUVzUlVGQlJ6dEpRVU5vUWl4SlFVRkpMRU5CUVVNc01rSkJRVEpDTEVOQlFVTXNUVUZCVFN4RFFVRkRPMDFCUTNSRExHdENRVUZyUWl4RlFVRkZMRU5CUVVNc1EwRkJRenROUVVOMFFpeDFRa0ZCZFVJc1JVRkJSVHRKUVVNelFpeERRVUZETEVOQlFVTTdSVUZEU2p0RlFVVlJMSE5DUVVGelFpeERRVU0xUWl4alFVbERMRVZCUTBRc1UwRkJhVUlzUlVGRGFrSXNUVUZCWlN4RlFVTm1PMGxCUTBFc1NVRkJTU3hOUVVGTkxFVkJRVVU3VFVGRFZpeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRPMUZCUTJwQ0xFdEJRVXNzUlVGQlJTeE5RVUZOTzFGQlEySXNVVUZCVVN4RlFVRkZMSEZEUVVGM1FpeERRVUZETEZGQlFWRTdVVUZETTBNc1ZVRkJWU3hGUVVGRk8xVkJRMVlzVFVGQlRTeEZRVUZGTzFGQlExWTdUVUZEUml4RFFVRkRMRU5CUVVNN1NVRkRTanRKUVVWQkxHTkJRV01zUTBGQlF5eGhRVUZoTEVOQlFVTXNVMEZCVXl4RFFVRkRPMGxCUTNaRExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNVMEZCVXl4RFFVRkRPMGxCUlM5Q0xFOUJRVThzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMFZCUTNwQ08wVkJSVkVzZDBKQlFYZENMRU5CUXpsQ0xHTkJTVU1zUlVGRFJDeFhRVWxUTEVWQlExUTdTVUZEUVN4alFVRmpMRU5CUVVNc1UwRkJVeXhEUVVGRkxFdEJRVEpETEVsQlFVczdUVUZEZUVVc1RVRkJUU3hYUVVGWExFZEJRVWNzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVOMlF5eExRVUZMTEVOQlFVTXNhMEpCUTFJc1EwRkJRenROUVVORUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVVXNWVUZCVlN4SlFVRkxPMUZCUXpGQ0xGZEJRVmNzUTBGQlF5eFZRVUZWTEVWQlFVVXNWMEZCVnl4RlFVRkZMRXRCUVVzc1EwRkJReXgxUWtGQmRVSXNRMEZCUXp0TlFVTnlSU3hEUVVGRExFTkJRVU03U1VGRFNpeERRVUZETEVOQlFVTTdSVUZEU2p0RlFVVlJMR2RDUVVGblFpeERRVU4wUWl4WlFVRjVReXhGUVVOWU8wbEJRemxDTEUxQlFVMHNZVUZCTWtNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRmRFUXNTMEZCU3l4TlFVRk5MRk5CUVZNc1NVRkJTU3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4RlFVRkZPMDFCUTJwRUxFMUJRVTBzVjBGQlZ5eEhRVUZITEZsQlFWa3NRMEZCUXl4VFFVRlRMRU5CUVVNN1RVRkRNME1zVFVGQlRTeFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhYUVVGWExFTkJRVU03VFVGRGRFUXNZVUZCWVN4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExGbEJRVms3U1VGRGVrTTdTVUZGUVN4UFFVRlBMR0ZCUVdFN1JVRkRkRUk3UlVGRlVTeGxRVUZsTEVOQlFVTXNWMEZCZDBJc1JVRkJaMEk3U1VGRE9VUXNUVUZCVFR0TlFVRkZMR0ZCUVdFN1RVRkJSU3hIUVVGSE8wbEJRV2RDTEVOQlFVTXNSMEZCUnl4WFFVRlhPenRKUVVWNlJEdEpRVU5CTEUxQlFVMHNXVUZCV1N4SFFVRkhPMDFCUTI1Q0xFZEJRVWNzWlVGQlpUdE5RVU5zUWl4TlFVRk5MRVZCUVVVc1YwRkJWeXhEUVVGRExFMUJRV2RDTzAxQlEzQkRMRk5CUVZNc1JVRkJSU3hoUVVGaExFTkJRVU1zU1VGQlNUdE5RVU0zUWl4TlFVRk5MRVZCUVVVc1lVRkJZU3hEUVVGRE8wbEJRM2hDTEVOQlFVTTdTVUZGUkN4UFFVRlBMRmxCUVZrN1JVRkRja0k3UlVGRlVTeG5Ra0ZCWjBJc1EwRkRkRUlzVTBGQmQwTXNSVUZEZUVNc1NVRkJXU3hGUVVOYU8wbEJRMEVzVFVGQlRTeEZRVUZGTEVkQlFVY3NVMEZCVXl4RFFVRkRMRlZCUVc5Q08wbEJRM3BETEUxQlFVMHNUVUZCVFN4SFFVRkhMRk5CUVZNc1EwRkJReXhOUVVGTkxFbEJRVWtzYjBKQlFXVTdTVUZGYkVRc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGRGFrSXNTVUZCU1N4RFFVTklMQ3RDUVVFclFpeEZRVU12UWp0TlFVTkZMRVZCUVVVN1RVRkRSaXhOUVVGTk8wMUJRMDQ3U1VGRFJpeERRVUZETEVWQlEwUXNTVUZEUml4RFFVRkRMRU5CUTBFc1MwRkJTeXhEUVVGRExFMUJRVTA3VFVGRFdEdEpRVUZCTEVOQlEwUXNRMEZCUXp0RlFVTk9PMFZCUlZFc1pVRkJaU3hEUVVGRExGTkJRV2xDTEVWQlFVVTdTVUZEZWtNc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVTXNhME5CUVd0RExFVkJRVVVzVTBGQlV5eERRVUZETzBWQlF6RkZPMFZCUlZFc1pVRkJaU3hEUVVGRExGTkJRV2xDTEVWQlFVVTdTVUZEZWtNc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlEzWkNMR3REUVVGclF5eEZRVU5zUXl4VFFVRlRMRVZCUTFRc1VVRkRSaXhEUVVGRE8wVkJRMGc3UVVGRFJqdEJRVUZETEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc05rSkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3TzBGREwxcEVMRWxCUVVFc1ZVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEhOQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UlFVRkJMRWRCUVVFc1QwRkJRVHRCUVVFMlJpeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGRk9VVXNUVUZCVFN4SFFVRkhMRU5CUVVNN1JVRkRka0lzVDBGQlR5eHZRa0ZCYjBJc1EwRkJReXhQUVVGUExFVkJRVVU3U1VGRGJrTXNUMEZCVHl4UFFVRlBMRU5CUVVNc09FSkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0RlFVTjRRenRGUVVWQkxGZEJRVmNzUTBGQlF6dEpRVUZGTEU5QlFVODdTVUZCUlR0RlFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJUdEpRVU4wUXl4TlFVRk5MRmRCUVZjc1IwRkJSeXc0UTBGQmNVTXNRMEZCUXl4UFFVRlBMRU5CUVVNN1NVRkRiRVVzVFVGQlRTeFZRVUZWTEVkQlFVY3NPRUpCUVdFc1EwRkJReXhQUVVGUExFTkJRVU03U1VGRGVrTXNUVUZCVFN4WFFVRlhMRWRCUVVjc1NVRkJTU3gxUWtGQldTeERRVUZETEZGQlFWRXNSVUZCUlR0TlFVTTNReXhQUVVGUExFVkJRVVVzVVVGQlVTeERRVUZETEU5QlFVOHNSVUZCUlN4RlFVRkZMRU5CUVVNN1RVRkRPVUlzU1VGQlNTeEZRVUZGTEZkQlFWYzdUVUZEYWtJN1NVRkRSaXhEUVVGRExFTkJRVU03U1VGRFJpeEpRVUZKTEVOQlFVTXNXVUZCV1N4SFFVRkhMRmRCUVZjN1JVRkRha003UlVGRlFTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RlFVRkZPMGxCUTJRc1QwRkJUeXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEZkQlFWY3NRMEZCUXl4UFFVRlBMRU5CUVVNN1JVRkRMME03UlVGRlFTeFBRVUZQTEVOQlFVTXNUMEZCVHl4RlFVRkZPMGxCUTJZc1QwRkJUeXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNN1JVRkRha1E3UVVGRFJqdEJRVUZETEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc1IwRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVNelFrUXNTVUZCUVN4VFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVTBGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeEpRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRWGRDTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUdEJRVVY0UWl4TlFVRk5MRmxCUVZrc1IwRkJSeXcwUTBGQk5FTTdRVUZEYWtVc1RVRkJUU3h2UWtGQmIwSXNSMEZCUnl4SlFVRkpPMEZCUld4Q0xFMUJRVTBzWVVGQllTeERRVUZETzBWQlEycERMRmRCUVZjc1EwRkJRenRKUVVGRkxFZEJRVWM3U1VGQlJTeFJRVUZSTzBsQlFVVXNhMEpCUVd0Q08wbEJRVVU3UlVGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRk8wbEJRM3BGTEUxQlFVMHNVMEZCVXl4SFFVRkhPMDFCUTJoQ0xIVkNRVUYxUWl4RlFVRkZMRU5CUVVNN1NVRkROVUlzUTBGQlF6dEpRVVZFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1IwRkJSenRKUVVObUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZPMDFCUTJRc1RVRkJUU3hQUVVGUExFZEJRVWNzYVVKQlFXbENMRU5CUVVNc1EwRkJRenROUVVOdVF5eE5RVUZOTEU5QlFVOHNSMEZCUnl4dFEwRkJNRUlzUTBGQlF5eFBRVUZQTEVOQlFVTTdUVUZEYmtRc1NVRkJTU3haUVVGSExFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3VVVGRGNrTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxGbEJRVWNzUTBGQlF6dFZRVU5zUWl4UFFVRlBPMVZCUTFBN1VVRkRSaXhEUVVGRExFTkJRVU03VFVGRFNqdEpRVU5HTzBsQlJVRXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxIbENRVUZsTEVOQlFVTXNVMEZCVXl4RFFVRkRPMGxCUlRORExFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NUVUZCVFR0TlFVTjBRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXl4VFFVRlRMRU5CUVVNN1NVRkRia01zUTBGQlF6dEpRVVZFTEd0Q1FVRnJRaXhEUVVGRExFMUJRVTA3VFVGRGRrSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zVTBGQlV5eERRVUZETzAxQlF6bENMRTFCUVUwc1QwRkJUeXhIUVVGSExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1RVRkRia01zVFVGQlRTeFBRVUZQTEVkQlFVY3NiVU5CUVRCQ0xFTkJRVU1zVDBGQlR5eERRVUZETzAxQlEyNUVMRWxCUVVrc1dVRkJSeXhEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRk8xRkJRM0pETEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3haUVVGSExFTkJRVU03VlVGRGJFSXNUMEZCVHp0VlFVTlFPMUZCUTBZc1EwRkJReXhEUVVGRE8wMUJRMG9zUTBGQlF5eE5RVUZOTzFGQlEwd3NUMEZCVHl4SlFVRkpMRU5CUVVNc1NVRkJTVHROUVVOc1FqdEpRVU5HTEVOQlFVTXNRMEZCUXp0RlFVTktPMFZCUlVFc2NVSkJRWEZDTEVOQlFVTXNUMEZCVHl4RlFVRkZPMGxCUXpkQ0xFOUJRVThzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExFbEJRVUVzYjBOQlFXOUNMRVZCUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UlVGRGJrVTdSVUZGUVN4TlFVRk5MSE5DUVVGelFpeERRVUZETEU5QlFVOHNSVUZCUlR0SlFVTndReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlR0TlFVTmtMRTlCUVU4c1UwRkJVenRKUVVOc1FqdEpRVVZCTEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdTVUZEYmtNc1NVRkJTU3hMUVVGTExFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3VFVGRE1VTXNUMEZCVHl4TFFVRkxMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNUMEZCVHl4RFFVRkRPMGxCUXk5RE8wbEJSVUVzU1VGQlNTeE5RVUZOTzBsQlExWXNTVUZCU1R0TlFVTkdMRTFCUVUwc1IwRkJSeXhOUVVGTkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJRenRKUVVNelF5eERRVUZETEVOQlFVTXNUMEZCVHl4TFFVRkxMRVZCUVVVN1RVRkRaQ3hwUWtGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNN1RVRkRhRUlzVDBGQlR5eFRRVUZUTzBsQlEyeENPMGxCUlVFc1NVRkJTU3hwUWtGQmFVSTdTVUZEY2tJc1NVRkJTVHROUVVOR0xHbENRVUZwUWl4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRPMGxCUTNCRUxFTkJRVU1zUTBGQlF5eFBRVUZQTEV0QlFVc3NSVUZCUlR0TlFVTmtMR2xDUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXp0TlFVTm9RaXhQUVVGUExGTkJRVk03U1VGRGJFSTdTVUZGUVN4SlFVTkZMR2xDUVVGcFFpeExRVUZMTEZsQlFWa3NTVUZEYkVNc2FVSkJRV2xDTEV0QlFVc3NiMEpCUVc5Q0xFVkJRekZETzAxQlEwRXNUMEZCVHl4VFFVRlRPMGxCUTJ4Q08wbEJSVUVzU1VGQlNTeEpRVUZCTEc5RFFVRnZRaXhGUVVGRExHbENRVUZwUWl4RFFVRkRMRXRCUVVzc1QwRkJUeXhGUVVGRk8wMUJRM1pFTEU5QlFVOHNVMEZCVXp0SlFVTnNRanRKUVVWQkxFbEJRVWtzUTBGQlF5d3lRa0ZCTWtJc1EwRkJReXhQUVVGUExFVkJRVVVzYVVKQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03U1VGRGJrVXNUMEZCVHl4TlFVRk5PMFZCUTJZN1JVRkZRU3d5UWtGQk1rSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1RVRkJUU3hGUVVGRk8wbEJRek5ETEUxQlFVMHNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdTVUZEZEVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTTdUVUZEYkVJc2RVSkJRWFZDTEVWQlFVVTdVVUZEZGtJc1IwRkJSeXhSUVVGUkxFTkJRVU1zZFVKQlFYVkNPMUZCUTI1RExFTkJRVU1zVDBGQlR5eEhRVUZITzAxQlEySTdTVUZEUml4RFFVRkRMRU5CUVVNN1JVRkRTanRCUVVOR08wRkJRVU1zVDBGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4aFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNaSFJDeEpRVUZCTEZOQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hUUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hIUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hUUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hMUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNhVUpCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZGUVN4SlFVRkJMRmxCUVVFc1IwRkJRU3hQUVVGQk8wRkJTVUVzU1VGQlFTeFJRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1YwRkJRU3hIUVVGQkxFOUJRVUU3UVVGQmJVVXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlJXNUZMRTFCUVUwc1owSkJRV2RDTEVkQlFVY3NTVUZCUVN4NVFrRkJiVUlzUlVGQlF5eERRVUZET3p0QlFVVTVRenRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEWlN4TlFVRk5MRGhDUVVFNFFpeERRVUZETzBWQlEyeEVMRmRCUVZjc1EwRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVTdTVUZEY2tJc1RVRkJUVHROUVVOS0xGbEJRVms3VFVGRFdpeHJRa0ZCYTBJN1RVRkRiRUlzYVVKQlFXbENPMDFCUTJwQ0xIRkNRVUZ4UWp0TlFVTnlRanRKUVVOR0xFTkJRVU1zUjBGQlJ5eEpRVUZKTzBsQlExSXNTVUZCU1N4RFFVRkRMRmxCUVZrc1IwRkJSeXhaUVVGWk8wbEJRMmhETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUjBGQlJ5eHBRa0ZCYVVJN1NVRkRNVU1zU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhIUVVGSExIRkNRVUZ4UWp0SlFVTnNSQ3hKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRWRCUVVjc2IwSkJRVzlDTzBsQlJXaEVMRWxCUVVrc1EwRkJReXhqUVVGakxFZEJRVWNzVFVGQlR5eHBRa0ZCYVVJc1NVRkJTenROUVVOcVJDeE5RVUZOTEdWQlFXVXNSMEZCUnl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF6dE5RVU4yUlN4TlFVRk5MR2xDUVVGcFFpeEhRVUZITEZGQlFWRXNRMEZCUXl4cFFrRkJhVUlzUlVGQlJTeEZRVUZGTEVOQlFVTTdUVUZEZWtRc1RVRkJUU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEdWQlFXVXNSVUZCUlN4cFFrRkJhVUlzUTBGQlF6dEpRVU40UkN4RFFVRkRPMGxCUlVRc1RVRkJUU3h0UTBGQmJVTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVOeVJDeHhRMEZEUml4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNTMEZCU3p0TlFVTTNRaXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NTVUZCU1R0TlFVTjJRaXhQUVVGUExFOUJRVTg3U1VGRGFFSXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJSVTRzVFVGQlRTeFRRVUZUTEVkQlFVYzdUVUZEYUVJc2IwSkJRVzlDTEVWQlFVVXNRMEZCUXl4RFFVRkRPMDFCUTNoQ0xHMURRVUZ0UXp0TlFVTnVReXhIUVVGSExFbEJRVWtzUTBGQlF6dEpRVU5XTEVOQlFVTTdTVUZEUkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzZVVKQlFXVXNRMEZCUXl4VFFVRlRMRU5CUVVNN1NVRkZNME1zU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlEzaERMRWxCUVVFc05rSkJRWFZDTEVWQlFVTXNRMEZCUXl4VFFVRlRMRVZCUVVVc1UwRkJVeXhMUVVGTE8wMUJRMmhFTEUxQlFVMDdVVUZEU2l4WlFVRlpMRVZCUVVVN1ZVRkRXaXgzUWtGQmQwSXNSVUZCUlR0UlFVTTFRaXhEUVVGRExFZEJRVWNzUTBGQlF6dE5RVU5RTEVOQlFVTXNSMEZCUnl4VFFVRlRPMDFCUTJJc1RVRkJUVHRSUVVOS0xGbEJRVmtzUlVGQlJUdFZRVU5hTEhkQ1FVRjNRaXhGUVVGRk8xRkJRelZDTEVOQlFVTXNSMEZCUnl4RFFVRkRPMDFCUTFBc1EwRkJReXhIUVVGSExGTkJRVk03VFVGRllpeEpRVUZKTERSQ1FVRTBRaXhMUVVGTExEUkNRVUUwUWl4RlFVRkZPMUZCUTJwRk8wMUJRMFk3VFVGRlFTeEpRVUZKTERSQ1FVRTBRaXhKUVVGSkxFTkJRVU1zTkVKQlFUUkNMRVZCUVVVN1VVRkRha1VzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTFnN1RVRkRSanROUVVWQkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0SlFVTmtMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlEyaEVMRU5CUVVNN1NVRkZSQ3hKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGRGVFTXNTVUZCUVN3MlFrRkJkVUlzUlVGQlF5eFBRVUZQTEZOQlFWTXNSVUZCUlN4VFFVRlRMRXRCUVVzN1RVRkRkRVFzVFVGQlRUdFJRVUZGTEdWQlFXVXNSVUZCUlR0TlFVRnZRaXhEUVVGRExFZEJRVWNzVTBGQlV6dE5RVU14UkN4TlFVRk5PMUZCUVVVc1pVRkJaU3hGUVVGRk8wMUJRVzlDTEVOQlFVTXNSMEZCUnl4VFFVRlRPMDFCUlRGRUxFbEJRVWtzYlVKQlFXMUNMRXRCUVVzc2JVSkJRVzFDTEVWQlFVVTdVVUZETDBNN1RVRkRSanROUVVOQkxFMUJRVTBzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4dFFrRkJiVUlzUTBGQlF6dEpRVU42UXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVU5vUkN4RFFVRkRPMGxCUlVRc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRM1pETEVsQlFVRXNOa0pCUVhWQ0xFVkJRVU1zVDBGQlR5eFRRVUZUTEVWQlFVVXNVMEZCVXl4TFFVRkxPMDFCUTNSRUxFMUJRVTA3VVVGQlJTeHRRa0ZCYlVJc1JVRkJSVHROUVVGM1FpeERRVUZETEVkQlFVY3NVMEZCVXp0TlFVTnNSU3hOUVVGTk8xRkJRVVVzYlVKQlFXMUNMRVZCUVVVN1RVRkJkMElzUTBGQlF5eEhRVUZITEZOQlFWTTdUVUZEYkVVc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4SlFVRkpMSFZDUVVGMVFpeEZRVUZGTzFGQlEzWkVMRTFCUVUwc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkRPMUZCUXk5RUxFMUJRVTBzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNN1RVRkROMEk3U1VGRFJpeERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVNdlF5eERRVUZETzBsQlJVUXNhMEpCUVd0Q0xFTkJRVU1zV1VGQldUdE5RVU0zUWl4TlFVRk5MRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXp0TlFVTXZSQ3hOUVVGTkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRPMGxCUXpkQ0xFTkJRVU1zUTBGQlF6dEZRVU5LTzBWQlJVRXNTMEZCU3l4RFFVRkJMRVZCUVVjN1NVRkRUaXhOUVVGTk8wMUJRVVVzV1VGQldTeEhRVUZITEVOQlFVTTdTVUZCUlN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU42UlN4TlFVRk5PMDFCUVVVN1NVRkJlVUlzUTBGQlF5eEhRVUZITEZsQlFWazdTVUZGYWtRc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4RlFVRkZPMDFCUXpkQ08wbEJRMFk3U1VGRlFTeEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMR05CUVdNc1EwRkJReXhSUVVGUkxFVkJRVVVzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXp0SlFVTXZSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF6dEZRVU01UkR0RlFVVkJMRWxCUVVrc1EwRkJRU3hGUVVGSE8wbEJRMHdzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4alFVRmpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTTdSVUZEYWtVN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeE5RVUZOTEU5QlFVOHNRMEZCUXl4UFFVRlBMRVZCUVVVc2FVSkJRV2xDTEVWQlFVVTdTVUZEZUVNc1RVRkJUVHROUVVGRk8wbEJRVzlDTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRekZGTEUxQlFVMHNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMGxCUTNoRExFbEJRMFVzUTBGQlF5eE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXh4UTBGQk5FSXNSVUZCUlN4UFFVRlBMRU5CUVVNc1NVRkRiRVVzUTBGQlF5eFBRVUZQTEVsQlExSXNRMEZCUXl4dFFrRkJiVUlzUlVGRGNFSTdUVUZEUVR0SlFVTkdPMGxCUTBFc1NVRkJTVHROUVVOR0xFMUJRVTBzV1VGQldTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03VFVGRE1VTXNUVUZCVFN4WlFVRlpMRWRCUVVjc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03VFVGRmRFVXNUVUZCVFN4M1FrRkJkMElzUjBGRE5VSXNXVUZCV1N4RFFVRkRMRzFEUVVGdFF5eERRVUZETEU5QlFVOHNRMEZCUXp0TlFVTXpSQ3hOUVVGTkxHZENRVUZuUWl4SFFVTndRaXgzUWtGQmQwSXNTVUZCU1N4cFFrRkJhVUlzU1VGQlNTeFpRVUZaTzAxQlJTOUVMRTFCUVUwc1kwRkJZeXhIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETERKQ1FVRXlRaXhEUVVNelJDeFBRVUZQTEVWQlExQXNaMEpCUVdkQ0xFVkJRMmhDTEU5QlEwWXNRMEZCUXp0TlFVVkVMRWxCUVVrc01rSkJRVEpDTEVkQlFVY3NaMEpCUVdkQ08wMUJSV3hFTEdOQlFXTXNRMEZCUXl4UFFVRlBMRU5CUVVVc1JVRkJSU3hKUVVGTE8xRkJRemRDTEVsQlEwVXNSVUZCUlN4RFFVRkRMRmRCUVZjc1NVRkRaQ3hSUVVGUkxFTkJRVU1zTWtKQlFUSkNMRVZCUVVVc1JVRkJSU3hEUVVGRExFZEJRM1pETEZGQlFWRXNRMEZCUXl4RlFVRkZMRU5CUVVNc1YwRkJWeXhGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVU01UWp0VlFVTkJMREpDUVVFeVFpeEhRVUZITEZGQlFWRXNRMEZCUXl4RlFVRkZMRU5CUVVNc1YwRkJWeXhGUVVGRkxFVkJRVVVzUTBGQlF6dFJRVU0xUkR0TlFVTkdMRU5CUVVNc1EwRkJRenROUVVWR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPMUZCUTNKQ0xHMURRVUZ0UXl4RlFVRkZPMVZCUTI1RExFZEJRVWNzV1VGQldTeERRVUZETEcxRFFVRnRRenRWUVVOdVJDeERRVUZETEU5QlFVOHNSMEZCUnl3eVFrRkJNa0lzUjBGQlJ6dFJRVU16UXl4RFFVRkRPMUZCUTBRc2IwSkJRVzlDTEVWQlFVVXNZMEZCWXl4RFFVRkRMRTFCUVUwc1EwRkRla01zUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlN4TFFVRkxPMVZCUTNCQ0xGbEJRVmtzUTBGQlF5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSVHRWUVVNeFFpeFBRVUZQTEZsQlFWazdVVUZEY2tJc1EwRkJReXhGUVVORU8xVkJRMFVzUjBGQlJ5eFpRVUZaTEVOQlFVTTdVVUZEYkVJc1EwRkRSanROUVVOR0xFTkJRVU1zUTBGQlF6dEpRVU5LTEVOQlFVTXNRMEZCUXl4UFFVRlBMRWRCUVVjc1JVRkJSVHROUVVOYUxHbENRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJRenRKUVVOb1FqdEZRVU5HT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc1RVRkJUU3d5UWtGQk1rSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1UwRkJVeXhGUVVGRkxFOUJRVThzUlVGQlJUdEpRVU0zUkN4TlFVRk5MR1ZCUVdVc1IwRkJSeXh4UTBGQk5FSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhOUVVGTk8wbEJRM0JGTEUxQlFVMHNhMEpCUVd0Q0xFZEJRVWNzY1VOQlFUUkNMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zVTBGQlV6dEpRVVV4UlN4TlFVRk5MRTFCUVUwc1IwRkJTU3hYUVVGVkxHdENRVUZ0UWl4SlFVRkhMR1ZCUVdkQ0xFVkJRVU03U1VGRGFrVXNTVUZCU1N4SFFVRkhMRWRCUVVrc1IwRkJSU3hOUVVGUExEWkRRVUUwUXl4UFFVRlJMRzlDUVVGdFFqdEpRVVV6Uml4SlFVRkpMRk5CUVZNc1JVRkJSVHROUVVOaUxFZEJRVWNzU1VGQlN5eGxRVUZqTEZGQlFWRXNRMEZCUXl4VFFVRlRMRVZCUVVVc1JVRkJSU3hEUVVGRkxFVkJRVU03U1VGRGFrUTdTVUZEUVN4TlFVRk5MRkZCUVZFc1IwRkJSeXhOUVVGTkxHZENRVUZuUWl4RFFVRkRMRWRCUVVjc1EwRkJRenRKUVVNMVF5eE5RVUZOTzAxQlFVVXNUVUZCVFR0TlFVRkZPMGxCUVU4c1EwRkJReXhIUVVGSExFMUJRVTBzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTJoRUxFbEJRVWtzWTBGQll5eEhRVUZITEVWQlFVVTdTVUZEZGtJc1NVRkJTU3hOUVVGTkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzVFVGQlRTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRVZCUVVVN1RVRkRhRVVzVFVGQlRTeFpRVUZaTEVkQlFVY3NRMEZCUXl4RFFVRkRPMDFCUTNaQ0xFMUJRVTBzVTBGQlV5eEhRVUZITEVWQlFVVTdUVUZEY0VJc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlJTeEZRVUZGTEVsQlFVczdVVUZEY2tJc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVN1ZVRkRNVUlzVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8xVkJRek5FTEZsQlFWa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF6dFJRVU16UWp0TlFVTkdMRU5CUVVNc1EwRkJRenROUVVWR0xHTkJRV01zUjBGQlJ5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVTTVRaXhGUVVGRk8xRkJRVUVzU1VGQlFTeFpRVUZCTEVWQlFVRXNaVUZCUVR0UlFVRkJMRTlCUVVzc1JVRkJRU3haUVVGQkxFZEJRVUVzUlVGQlJTeERRVUZETEZGQlFWRXNZMEZCUVN4WlFVRkJMSGRDUVVGQkxHVkJRVUVzUjBGQldDeFpRVUZCTEVOQlFXRXNSVUZCUlN4alFVRkJMR1ZCUVVFc2RVSkJRV1lzWlVGQlFTeERRVUZwUWl4WFFVRlhMRU5CUVVNc1EwRkJReXhOUVVGTExFOUJRVThzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0TlFVRkJMRU5CUTJ4RkxFTkJRVU03VFVGRFJDeGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUzBGQlRTeERRVUZETEVOQlFVTXNTVUZCU1N4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUlN4RFFVRkRPMGxCUXpORU8wbEJRMEVzVDBGQlR5eGpRVUZqTzBWQlEzWkNPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc2VVSkJRWGxDTEVOQlFVTXNiMEpCUVc5Q0xFVkJRVVVzVDBGQlR5eEZRVUZGTzBsQlEzWkVMRTFCUVUwc1NVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhUUVVGVExFVkJRVVVzUlVGQlJTeERRVUZETEVkQlFVY3NTVUZCU1R0SlFVTm9SU3hOUVVGTkxFMUJRVTBzUjBGRFZpeHZRa0ZCYjBJc1EwRkJReXhQUVVGUExFdEJRVXNzUjBGQlJ5eEhRVU5vUXl3NFFrRkJhVUlzUTBGQlF5eFRRVUZUTEVkQlF6TkNMRGhDUVVGcFFpeERRVUZETEUxQlFVMDdTVUZET1VJc1RVRkJUU3hSUVVGUkxFZEJRVWM3VFVGRFppeEpRVUZKTEVWQlFVVXNiMEpCUVc5Q0xFTkJRVU1zU1VGQlNUdE5RVU12UWl4SFFVRkhMRVZCUVVVc1NVRkJRU3h0UWtGQlR5eEZRVUZETEVsQlFVa3NWMEZCUlN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMDFCUXpsRExFdEJRVXNzUlVGQlJTeEpRVUZCTEcxQ1FVRlBMRVZCUVVNc1NVRkJTU3hYUVVGRkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03VFVGRGJFUXNSVUZCUlN4RlFVRkZMRzlDUVVGdlFpeERRVUZETEVWQlFVVTdUVUZETTBJc1MwRkJTeXhGUVVGRkxFbEJRVUVzYlVKQlFVOHNSVUZCUXl4SlFVRkpMRmRCUVVVc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4TFFVRkxMRU5CUVVNN1NVRkRia1FzUTBGQlF6dEpRVVZFTEVsQlFVa3NiMEpCUVc5Q0xFTkJRVU1zVVVGQlVTeEZRVUZGTzAxQlEycERMRkZCUVZFc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlFTeHRRa0ZCVHl4RlFVRkRMRWxCUVVrc1YwRkJSU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRM0JGTEVOQlFVTXNUVUZCVFN4SlFVRkpMRzlDUVVGdlFpeERRVUZETEZsQlFWa3NSVUZCUlR0TlFVTTFReXhSUVVGUkxFTkJRVU1zV1VGQldTeEhRVUZITEVsQlFVRXNiVUpCUVU4c1JVRkROMElzU1VGQlNTeFhRVUZGTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zV1VGQldTeERRVU14UXl4RFFVRkRPMDFCUTBRc1VVRkJVU3hEUVVGRExHOUNRVUZ2UWl4SFFVRkhMRWxCUVVFc2JVSkJRVThzUlVGRGNrTXNTVUZCU1N4WFFVRkZMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNiMEpCUVc5Q0xFTkJRMnhFTEVOQlFVTTdTVUZEU0R0SlFVVkJMRTlCUVU4N1RVRkRUQ3hYUVVGWExFVkJRVVVzYjBKQlFXOUNMRU5CUVVNc1YwRkJWenROUVVNM1F5eEZRVUZGTEVWQlFVVXNTVUZCUVN4cFFrRkJVU3hGUVVGRExFTkJRVU03VFVGRFpDeFBRVUZQTzAxQlExQXNhVUpCUVdsQ0xFVkJRVVVzY1VOQlFUUkNMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zVTBGQlV6dE5RVU5zUlN4TlFVRk5PMDFCUTA0c1NVRkJTVHROUVVOS0xGRkJRVkU3VFVGRFVpeEpRVUZKTEVWQlFVVXNiMEpCUVc5Q0xFTkJRVU1zU1VGQlNUdE5RVU12UWl4SlFVRkpMRVZCUVVVc05FSkJRV1VzUTBGQlF6dEpRVU40UWl4RFFVRkRPMFZCUTBnN1FVRkRSanRCUVVGRExFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNPRUpCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMmhVUkN4SlFVRkJMRTlCUVVFc1IwRkJRU3hQUVVGQk8wRkJWVUVzU1VGQlFTeFRRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1pVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEV0QlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hKUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNXVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkxRU3hKUVVGQkxFdEJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4SFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRXRCUVVFc1IwRkJRU3hQUVVGQk8wRkJRVGhGTEZOQlFVRXNaMEpCUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzUlVGQlFTeExRVUZCTEVsQlFVRXNSMEZCUVN4SFFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQkxFOUJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNTVUZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEVsQlFVRXNTMEZCUVN4RlFVRkJMRXRCUVVFc1JVRkJRU3hWUVVGQkxGRkJRVUVzV1VGQlFTeFJRVUZCTEZGQlFVRXNiMEpCUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeExRVUZCTEZkQlFVRXNSMEZCUVR0QlFVRkJMRk5CUVVFc1pVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeEhRVUZCTEZsQlFVRXNRMEZCUVN4SFFVRkJMREpDUVVGQkxFZEJRVUVzWjBKQlFVRXNSMEZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeGhRVUZCTEV0QlFVRXNSVUZCUVN4SlFVRkJMR1ZCUVVFc1MwRkJRU3hwUWtGQlFTeExRVUZCTEd0Q1FVRkJMRXRCUVVFc1RVRkJRU3hKUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEUxQlFVRXNRMEZCUVN4WFFVRkJMRTlCUVVFc1NVRkJRU3hMUVVGQkxGTkJRVUVzVVVGQlFTeEhRVUZCTEVkQlFVRXNTVUZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hMUVVGQkxFVkJRVUVzU1VGQlFTd3lRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFZEJRVUVzV1VGQlFTeFRRVUZCTERSRVFVRkJMRWxCUVVFc1owSkJRVUVzVFVGQlFTeEhRVUZCTEUxQlFVRXNSVUZCUVN4TFFVRkJPMEZCUlRsRkxFMUJRVTBzZFVKQlFYVkNMRWRCUVVjc2FVTkJRV2xETzBGQlJXcEZMRTFCUVUwc2RVSkJRWFZDTEVkQlFVa3NSMEZCUnl4SlFVRkxPMFZCUTNaRE8wVkJRMEU3UlVGRFFTeFZRVUZWTEVOQlFVTXNUVUZCVFR0SlFVTm1MRTFCUVUwc1IwRkJSenRGUVVOWUxFTkJRVU1zUTBGQlF6dEJRVU5LTEVOQlFVTTdPMEZCUlVRN1FVRkRRVHRCUVVOQkxFMUJRVTBzYjBKQlFXOUNMRWRCUVVrc1NVRkJTU3hKUVVGTE8wVkJRM0pETEUxQlFVMHNZMEZCWXl4SFFVRkhMRVZCUVVVN1JVRkRla0lzU1VGQlNTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVU3U1VGRGVrSXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1JVRkROVU03UlVGRFFTeEpRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVN1NVRkRha0lzWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRE8wVkJRM0JETzBWQlEwRXNTVUZCU1N4alFVRmpMRU5CUVVNc1RVRkJUU3hKUVVGSkxFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1JVRkJSVHRKUVVNMVJDeGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJRenRGUVVNNVFqdEZRVU5CTEVsQlFVa3NZMEZCWXl4RFFVRkRMRTFCUVUwc1JVRkJSVHRKUVVONlFpeFBRVUZQTEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRE8wVkJRMnBETzBWQlEwRXNUMEZCVHl4SlFVRkJMSE5DUVVGblFpeEZRVUZETEVOQlFVTTdRVUZETTBJc1EwRkJRenRCUVVWRUxFMUJRVTBzYTBKQlFXdENMRWRCUVVjN1JVRkRla0lzUTBGQlJTeHpSRUZCY1VRc1IwRkJSenRCUVVNMVJDeERRVUZET3p0QlFVVkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWbExFMUJRVTBzY1VKQlFYRkNMRU5CUVVNN1JVRkRla003UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRkRSU3hYUVVGWExFTkJRVU03U1VGRFZpeFBRVUZQTzBsQlExQXNaMEpCUVdkQ08wbEJRMmhDTEd0Q1FVRnJRanRKUVVOc1FpeHBRa0ZCYVVJN1NVRkRha0lzVDBGQlR6dEpRVU5RTEZkQlFWYzdTVUZEV0N4VFFVRlRPMGxCUTFRc1UwRkJVenRKUVVOVUxHZENRVUZuUWl4SFFVRkhPMFZCUTNKQ0xFTkJRVU1zUlVGQlJUdEpRV2x3UWtnN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdTVUZPUlN4bFFVRkJMQ3RDUVU5MVFpeEpRVUZCTEdWQlFVOHNSVUZCUXl4RFFVRkRMRTlCUVU4c1IwRkJSeXhEUVVGRExFTkJRVU1zUzBGQlN6dE5RVU12UXl4UFFVRlBMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1RVRkJUU3hGUVVGRkxGTkJRVk1zUzBGQlN6dFJRVU14UkN4UFFVRlBMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wMUJRMjVFTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNN1NVRkRVaXhEUVVGRExFTkJRVU03U1VFd1JVWTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wbEJURVVzWlVGQlFTdzJRa0ZOYzBJc1MwRkJTeXhKUVVGTE8wMUJRemxDTEU5QlEwVXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUzBGRGJrSXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJSU3hQUVVGUExFbEJRVXM3VVVGRGVFSXNUMEZCVHl4UFFVRlBMRTlCUVU4c1MwRkJTeXhSUVVGUk8wMUJRM0JETEVOQlFVTXNRMEZCUXl4SlFVTkJMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVVVzVDBGQlR5eEpRVUZMTzFGQlEzWkNMRTlCUVU4c1QwRkJUeXhQUVVGUExFdEJRVXNzVTBGQlV6dE5RVU55UXl4RFFVRkRMRU5CUVVNc1NVRkRSaXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZGTEU5QlFVOHNTVUZCU3p0UlFVTjJRaXhQUVVGUExFOUJRVThzVDBGQlR5eExRVUZMTEZGQlFWRTdUVUZEY0VNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRlZDeERRVUZETzBsQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wbEJURVVzWlVGQlFTdzBRa0ZOY1VJc1MwRkJTeXhKUVVGTE8wMUJRemRDTEU5QlFVOHNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMR1ZCUVdVN1NVRkRiRVVzUTBGQlF6dEpRV3gzUWtNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4SFFVRkpMRWRCUVVjc1NVRkJTenROUVVOb1F6dE5RVU5CTzAxQlEwRXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSVHRSUVVOd1F5eG5Ra0ZCWjBJc1EwRkJReXhIUVVGSExFTkJRVU03VFVGRGRrSTdTVUZEUml4RFFVRkRPMGxCUTBRc1RVRkJUU3hUUVVGVExFZEJRVWNzWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03U1VGRE4wTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMGxCUTJ4RExFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NVMEZCVXl4RFFVRkRMR0ZCUVdFc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NRMEZCUXp0SlFVTjJSQ3hKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVU5XTEZkQlFWY3NTMEZCU3l4WlFVRlpMRWRCUVVjc1QwRkJUeXhIUVVGSkxFZEJRVVVzVDBGQlVTeEpRVUZITEZkQlFWa3NSVUZCUXp0SlFVTjBSU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEZOQlFWTTdTVUZETVVJc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eFhRVUZYTzBsQlJUbENMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NTVUZCUVN4alFVRk5MRVZCUVVNc1UwRkJVeXhoUVVGVUxGTkJRVk1zZFVKQlFWUXNVMEZCVXl4RFFVRkZMRk5CUVZNc1JVRkJSU3hUUVVGVExFTkJRVU03U1VGRGJFVXNUVUZCVFN4bFFVRmxMRWRCUVVjc1EwRkJRU3hUUVVGVExHRkJRVlFzVTBGQlV5eDFRa0ZCVkN4VFFVRlRMRU5CUVVVc1pVRkJaU3hMUVVGSkxFTkJRVU1zUTBGQlF6dEpRVVY0UkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzZVVKQlFXVXNRMEZCUXp0TlFVTXZRaXgzUWtGQmQwSXNSVUZCUlN4SlFVRkpPMDFCUXpsQ0xHRkJRV0VzUlVGQlJTeEpRVUZKTzAxQlEyNUNMSGRDUVVGM1FpeEZRVUZGTEVWQlFVVTdUVUZETlVJc1RVRkJUU3hGUVVGRkxFTkJRVU1zUTBGQlF6dE5RVU5XTEVkQlFVY3NVMEZCVXp0TlFVTmFMRk5CUVZNc1JVRkJSVHRSUVVOVUxFbEJRVWNzVTBGQlV5eGhRVUZVTEZOQlFWTXNkVUpCUVZRc1UwRkJVeXhEUVVGRkxGTkJRVk03VFVGRGVrSXNRMEZCUXp0TlFVTkVMR1ZCUVdVc1JVRkJSVHRSUVVObUxFZEJRVWM3VFVGRFREdEpRVU5HTEVOQlFVTXNRMEZCUXp0SlFVVkdMR2RDUVVGblFpeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMDFCUVVVN1NVRkJZeXhEUVVGRExFdEJRVXM3VFVGRGFFUXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhoUVVGaExFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NSVUZCUlN4SFFVRkhMRU5CUVVNN1NVRkRMME1zUTBGQlF5eERRVUZETzBsQlJVWXNhMEpCUVd0Q0xFTkJRVU1zVFVGQlRUdE5RVU4yUWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1NVRkRjRU1zUTBGQlF5eERRVUZETzBsQlEwWXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhQUVVGUE96dEpRVVYwUWp0SlFVTkJPMGxCUTBFN1NVRkRRVHRKUVVOQk8wbEJRMEU3U1VGRFFTeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMR3RDUVVGclFpeERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkZMRkZCUVZFc1NVRkJTenROUVVOMFJDeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVXNSVUZCUlR0UlFVRkZMRk5CUVZNc1JVRkJSVHROUVVGTExFTkJRVU1zUTBGQlF6dEpRVU01UkN4RFFVRkRMRU5CUVVNN08wbEJSVVk3U1VGRFFTeEpRVUZKTEdkQ1FVRlpMRVZCUVVVN1RVRkRhRUlzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVUZGTEZOQlFWTTdVVUZCUlR0TlFVRlJMRU5CUVVNc1MwRkJTenRSUVVOcVJTeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zVTBGQlV5eEZRVUZGTEU5QlFVOHNRMEZCUXp0TlFVTm9SQ3hEUVVGRExFTkJRVU03U1VGRFNqczdTVUZGUVR0SlFVTkJPMGxCUTBFN1NVRkRRVHRKUVVOQk8wbEJRMEVzU1VGQlNTeG5Ra0ZCV1N4RlFVRkZPMDFCUTJoQ08wMUJRMEVzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVVc1RVRkJUU3hKUVVGTE8xRkJReTlDTEUxQlFVMHNVVUZCVVN4SFFVRkhMRWxCUVVFc2MwSkJRV2RDTEVWQlF5OUNMRTFCUVUwc1JVRkRUaXhwUkVGRFJpeERRVUZETzFGQlJVUXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSVHRWUVVOaUxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMR2xFUVVGNVF5eEZRVUZGTzFsQlF6bEVMR05CUVdNc1JVRkJSU3hEUVVGRE8xbEJRMnBDTEdWQlFXVXNSVUZCUlR0VlFVTnVRaXhEUVVGRExFTkJRVU03VVVGRFNqdE5RVU5HTEVOQlFVTXNRMEZCUXp0TlFVTkdMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUlN4VFFVRlRMRWxCUVVzN1VVRkRMME1zU1VGQlNTeFRRVUZUTEVOQlFVTXNTVUZCU1N4TFFVRkxMR2xFUVVGNVF5eEZRVUZGTzFWQlEyaEZMRWxCUVVrc1EwRkJReXd3UWtGQk1FSXNRMEZCUXl4RFFVRkRPMUZCUTI1RE8wMUJRMFlzUTBGQlF5eERRVUZETzBsQlEwb3NRMEZCUXl4TlFVRk5PMDFCUTB3c1YwRkJWeXhEUVVGRExFMUJRVTA3VVVGRGFFSXNTVUZCU1N4RFFVRkRMREJDUVVFd1FpeERRVUZETEVOQlFVTTdUVUZEYmtNc1EwRkJReXhGUVVGRkxGbEJRVTBzUjBGQlJ5eEZRVUZGTEVOQlFVTTdTVUZEYWtJN1JVRkRSanRGUVVWQkxEQkNRVUV3UWl4RFFVRkJMRVZCUVVjN1NVRkRNMElzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRkxGRkJRVkVzU1VGQlN6dE5RVU51UlN4SlFVTkZMRkZCUVZFc1EwRkJReXhQUVVGUExFbEJRMmhDTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExGRkJRVkVzUTBGQlF5eFhRVUZYTEVkQlFVY3NTVUZCU1N4SFFVRkhMRkZCUVZFc1EwRkJReXhQUVVGUExFVkJRek5FTzFGQlEwRXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZMRVZCUVVVN1ZVRkJSU3hUUVVGVExFVkJRVVU3VVVGQlN5eERRVUZETEVOQlFVTTdUVUZET1VRN1NVRkRSaXhEUVVGRExFTkJRVU03UlVGRFNqdEZRVVZCTEhGQ1FVRnhRaXhEUVVGQkxFVkJRVWM3U1VGRGRFSXNUMEZCVHl4SlFVRkJMREpDUVVGWExFVkJRMmhDTEVsQlFVRXNjMEpCUVUwc1JVRkRTaXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVU5VTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVU5vUWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1IwRkJSeXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkRPVVFzUTBGRFJpeERRVU5HTEVOQlFVTTdSVUZEU0RzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRzFDUVVGdFFpeERRVUZETEU5QlFVOHNSVUZCUlR0SlFVTXpRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZsQlFWa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFVkJRVVU3VFVGRE9VTXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkRXaXdyUkVGRFF5eFBRVUZQTEVOQlFVTXNTMEZEVkN4dFFrRkJhMElzVDBGQlR5eERRVUZETEZGQlFWTXNkMEpCUVhWQ0xFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlEzQkZMRTlCUTBZc1EwRkJSU3hMUVVOQkxFOUJRVThzVDBGQlR5eERRVUZETEZWQlFWVXNTMEZCU3l4UlFVRlJMRWRCUTJwRExDdENRVUU0UWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlFVVXNSVUZCUXl4SFFVTm9SU3hGUVVOTUxFVkJRMGdzUTBGQlF6dEpRVU5JTzBsQlJVRXNUVUZCVFR0TlFVRkZPMGxCUVZVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkZNME1zVFVGQlRTeEZRVUZGTEVkQlFVY3NUMEZCVHl4RFFVRkRMR2RDUVVGblFpeEpRVUZKTEVsQlFVRXNVVUZCVFN4RlFVRkRMRU5CUVVNN1NVRkRMME1zVFVGQlRTeFJRVUZSTEVkQlFVYzdUVUZEWml4RlFVRkZPMDFCUTBZc1IwRkJSeXhQUVVGUE8wMUJRMVlzVjBGQlZ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNN1NVRkRlRUlzUTBGQlF6dEpRVU5FTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRE8wMUJRM0pDTEZOQlFWTXNSVUZCUlR0UlFVTlVMRWRCUVVjc1UwRkJVenRSUVVOYUxFTkJRVU1zUlVGQlJTeEhRVUZITzAxQlExSTdTVUZEUml4RFFVRkRMRU5CUVVNN1NVRkZSaXhKUVVGSkxFOUJRVThzUTBGQlF5eFpRVUZaTEVWQlFVVTdUVUZEZUVJc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF6dFJRVU5rTEV0QlFVc3NSVUZCUlN4UlFVRlJMRU5CUVVNc1dVRkJXVHRSUVVNMVFpeFJRVUZSTEVWQlFVVXNVVUZCVVN4RFFVRkRMRkZCUVZFN1VVRkRNMElzVlVGQlZTeEZRVUZGTEZGQlFWRXNRMEZCUXl4VlFVRlZPMUZCUXk5Q0xHMUNRVUZ0UWl4RlFVRkZMRkZCUVZFc1EwRkJReXh0UWtGQmJVSTdVVUZEYWtRc1NVRkJTU3hGUVVGRkxGRkJRVkVzUTBGQlF5eEpRVUZKTzFGQlEyNUNMRkZCUVZFc1JVRkJSU3hSUVVGUkxFTkJRVU1zVVVGQlVUdFJRVU16UWl4UFFVRlBMRVZCUVVVc1VVRkJVU3hEUVVGRExFOUJRVTg3VVVGRGVrSXNTMEZCU3l4RlFVRkZMRkZCUVZFc1EwRkJReXhMUVVGTE8xRkJRM0pDTEZGQlFWRXNSVUZCUlN4UlFVRlJMRU5CUVVNc1VVRkJVVHRSUVVNelFpeGxRVUZsTEVWQlFVVXNVVUZCVVN4RFFVRkRMR1ZCUVdVN1VVRkRla01zVVVGQlVTeEZRVUZGTEU5QlFVOHNRMEZCUXl4UlFVRlJPMUZCUXpGQ0xHZENRVUZuUWl4RlFVRkZMRTlCUVU4c1EwRkJRenROUVVNMVFpeERRVUZETEVOQlFVTTdTVUZEU2p0SlFVVkJMRTlCUVU4c1VVRkJVVHRGUVVOcVFqczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEc5Q1FVRnZRaXhEUVVGRExFVkJRVVVzUlVGQlJUdEpRVU4yUWl4TlFVRk5PMDFCUVVVN1NVRkJWU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRKUVVVelF5eE5RVUZOTEZGQlFWRXNSMEZCUnl4VFFVRlRMRU5CUVVNc1JVRkJSU3hEUVVGRE8wbEJSVGxDTEU5QlFVOHNVVUZCVVR0RlFVTnFRanM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxHMUNRVUZ0UWl4RFFVRkRMRVZCUVVVc1JVRkJSU3hQUVVGUExFVkJRVVU3U1VGREwwSXNUVUZCVFR0TlFVRkZPMGxCUVZVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkZNME1zVFVGQlRTeFJRVUZSTEVkQlFVY3NVMEZCVXl4RFFVRkRMRVZCUVVVc1EwRkJRenRKUVVVNVFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPMDFCUTJJc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlJTd3dRa0ZCZVVJc1JVRkJSeXhyUWtGQmFVSXNRMEZCUXp0SlFVTnFSVHRKUVVWQkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPMDFCUTNKQ0xGTkJRVk1zUlVGQlJUdFJRVU5VTEVkQlFVY3NVMEZCVXp0UlFVTmFMRU5CUVVNc1JVRkJSU3hIUVVGSExFbEJRVUVzWVVGQlN5eEZRVUZETEZOQlFWTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSVHRWUVVONlFpeEhRVUZITEU5QlFVODdWVUZEVml4WFFVRlhMRVZCUVVVc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF6dFJRVU40UWl4RFFVRkRPMDFCUTBnN1NVRkRSaXhEUVVGRExFTkJRVU03UlVGRFNqczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzY1VKQlFYRkNMRU5CUVVNc1JVRkJSU3hGUVVGRk8wbEJRVVVzVTBGQlV5eEhRVUZITEV0QlFVczdTVUZCUlN4SlFVRkpPMGxCUVVVN1JVRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVTdTVUZEY0VVc1RVRkJUU3hSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlF5eEZRVUZGTEVOQlFVTTdTVUZEY0VRc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJUdE5RVU5pTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVVc2EwSkJRV2xDTEVWQlFVY3NhMEpCUVdsQ0xFTkJRVU03U1VGRGVrUTdTVUZGUVN4TlFVRk5MRk5CUVZNc1IwRkJSeXhUUVVGVExFZEJRVWNzVVVGQlVTeERRVUZETEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1dVRkJXVHRKUVVVelJTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRPMDFCUTJRc1MwRkJTeXhGUVVGRkxGTkJRVk03VFVGRGFFSXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJReXhSUVVGUk8wMUJRek5DTEZWQlFWVXNSVUZCUlN4UlFVRlJMRU5CUVVNc1ZVRkJWVHROUVVNdlFpeHRRa0ZCYlVJc1JVRkJSU3hSUVVGUkxFTkJRVU1zYlVKQlFXMUNPMDFCUTJwRUxFbEJRVWtzUlVGQlJTeEpRVUZKTEVsQlFVa3NVVUZCVVN4RFFVRkRMRWxCUVVrN1RVRkRNMElzVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXl4UlFVRlJMRWxCUVVrc1VVRkJVVHROUVVOMlF5eFBRVUZQTEVWQlFVVXNVVUZCVVN4RFFVRkRMRTlCUVU4N1RVRkRla0lzUzBGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4TFFVRkxPMDFCUTNKQ0xGRkJRVkVzUlVGQlJTeFJRVUZSTEVOQlFVTXNVVUZCVVR0TlFVTXpRaXhsUVVGbExFVkJRVVVzVVVGQlVTeERRVUZETEdWQlFXVTdUVUZEZWtNc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eFJRVUZSTzAxQlF6TkNPMDFCUTBFN1RVRkRRVHROUVVOQk8wMUJRMEU3VFVGRFFTeG5Ra0ZCWjBJc1JVRkJSU3hSUVVGUkxFTkJRVU1zWjBKQlFXZENMRWRCUTNSRExFZEJRVVVzVVVGQlVTeERRVUZETEdkQ1FVRnBRaXhKUVVGSExGTkJRVk1zUjBGQlJ5eFRRVUZUTEVkQlFVY3NVMEZCVlN4RlFVRkRMRWRCUTI1Rk8wbEJRMDRzUTBGQlF5eERRVUZETzBsQlEwWXNUVUZCVFR0TlFVRkZPMGxCUVZVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkRNME1zVDBGQlR5eFRRVUZUTEVOQlFVTXNSVUZCUlN4RFFVRkRPMGxCUTNCQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPMDFCUVVVN1NVRkJWU3hEUVVGRExFTkJRVU03UlVGRGRrTTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNVVUZCVVN4RFFVRkRMRlZCUVZVc1JVRkJSVHRKUVVOdVFpeE5RVUZOTzAxQlFVVXNZVUZCWVR0TlFVRkZPMGxCUVhsQ0xFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3p0SlFVVTVSQ3hKUVVGSkxFTkJRVU1zZDBKQlFYZENMRWxCUVVrc1EwRkJReXhoUVVGaExFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVTdUVUZET1VRN1NVRkRSanRKUVVOQkxFbEJRVWtzVDBGQlR5eFZRVUZWTEV0QlFVc3NVVUZCVVN4RlFVRkZPMDFCUTJ4RExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlExUXNNRVpCUVhsR0xFOUJRVThzVlVGQlZ5eEZRVU01Unl4RFFVRkRPMDFCUTBRN1NVRkRSanRKUVVWQkxFMUJRVTBzWTBGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eFZRVUZWTEVOQlFVTTdTVUZGZWtRc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eGpRVUZqTEVOQlFVTTdSVUZEYUVNN08wVkJSVUU3UlVGRFFUdEZRVU5CTERKQ1FVRXlRaXhEUVVGRExIZENRVUYzUWl4RlFVRkZMR0ZCUVdFc1JVRkJSVHRKUVVOdVJTeE5RVUZOTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRhRUlzU1VGQlNTeDNRa0ZCZDBJc1JVRkJSVHROUVVNMVFqdE5RVU5CTEV0QlFVc3NRMEZCUXl4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRE8wMUJRM3BFTEV0QlFVc3NRMEZCUXl4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmM3VFVGRE5VSXNTMEZCU3l4RFFVRkRMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR6dEpRVU42UWp0SlFVTkJMRTFCUVUwc1YwRkJWeXhIUVVGSExFbEJRVWtzWlVGQlpTeERRVUZETEV0QlFVc3NRMEZCUXpzN1NVRkZPVU03U1VGRFFTeEpRVUZKTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWxCUVVrc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eFBRVUZQTEVWQlFVVTdUVUZETlVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNaVUZCWlN4RFFVTnVReXhIUVVGRkxIVkNRVUYzUWl4SlFVRkhMRmRCUVZrc1JVRkROVU1zUTBGQlF6dEpRVU5JTzBWQlEwWTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMREpDUVVFeVFpeERRVUZETEhkQ1FVRjNRaXhGUVVGRk8wbEJRM0JFTEVsQlFVazdUVUZCUlR0SlFVRmpMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN6dEpRVU5zUXl4SlFVRkpMSGRDUVVGM1FpeEpRVUZKTEVOQlFVTXNZVUZCWVN4RlFVRkZPMDFCUXpsRExHRkJRV0VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUTBGQlF6dEpRVU01UXl4RFFVRkRMRTFCUVUwc1NVRkJTU3gzUWtGQmQwSXNTMEZCU3l4TFFVRkxMRVZCUVVVN1RVRkROME1zWVVGQllTeEhRVUZITEVsQlFVazdTVUZEZEVJN1NVRkRRU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXp0TlFVRkZMSGRDUVVGM1FqdE5RVUZGTzBsQlFXTXNRMEZCUXl4RFFVRkRPMGxCUTI1RkxFbEJRVWtzZDBKQlFYZENMRVZCUVVVN1RVRkROVUlzU1VGQlNTeERRVUZETERSQ1FVRTBRaXhEUVVGRExFTkJRVU03VFVGRGJrTXNTVUZCU1N4RFFVRkRMRFJDUVVFMFFpeERRVUZETEVOQlFVTTdTVUZEY2tNN1NVRkZRU3hKUVVGSkxFTkJRVU1zTWtKQlFUSkNMRU5CUVVNc2QwSkJRWGRDTEVWQlFVVXNZVUZCWVN4RFFVRkRPMGxCUTNwRkxFOUJRVThzWVVGQllUdEZRVU4wUWp0RlFVVkJMRWxCUVVrc1MwRkJTeXhEUVVGQkxFVkJRVWM3U1VGRFZpeFBRVUZQTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03UlVGRE9VSTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4VFFVRlRMRU5CUTFBN1NVRkJSU3hKUVVGSk8wbEJRVVVzVFVGQlRUdEpRVUZGTEdWQlFXVTdTVUZCUlN4SlFVRkpPMGxCUVVVc1VVRkJVVHRKUVVGRk8wVkJRVk1zUTBGQlF5eEZRVU16UkN4UFFVRlBMRVZCUTFBN1NVRkRRU3hKUVVGSk8wMUJRMFlzU1VGQlNTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMSGRDUVVGM1FpeExRVUZMTEV0QlFVc3NSVUZCUlR0UlFVTnFSRHROUVVOR08wMUJSVUVzU1VGRFJTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMSGRDUVVGM1FpeExRVUZMTEVsQlFVa3NTVUZETlVNc1JVRkJReXhQUVVGUExHRkJRVkFzVDBGQlR5eGxRVUZRTEU5QlFVOHNRMEZCUlN4WFFVRlhMRWRCUTNKQ08xRkJRMEU3VFVGRFJqdE5RVU5CTEUxQlFVMDdVVUZCUlR0TlFVRmpMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN6dE5RVU53UXl4TlFVRk5MRTlCUVU4c1IwRkJSeXhoUVVGaExFZEJRVWNzVVVGQlVTeEhRVUZITEdGQlFXRTdUVUZEZUVRc1RVRkJUU3hQUVVGUExFZEJRVWNzWVVGQllTeEpRVUZKTEhGRFFVRjNRanROUVVONlJDeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTzFGQlEycERMRk5CUVZNc1JVRkJSU3h2UWtGQmIwSXNRMEZCUXp0VlFVRkZPMUZCUVZNc1EwRkJReXhEUVVGRE8xRkJRemRETEVOQlFVTXNUMEZCVHl4SFFVRkhMRTlCUVU4N1VVRkRiRUlzU1VGQlNUdFJRVU5LTEZWQlFWVXNSVUZCUlR0VlFVTldMRTFCUVUwN1ZVRkRUaXhOUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZETEUxQlFVMDdWVUZEYmtJc1VVRkJVU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFBRVUZQTzFWQlEzUkNMR2RDUVVGblFpeEZRVUZGTzFGQlEzQkNMRU5CUVVNN1VVRkRSQ3hQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTVHROUVVNMVF5eERRVUZETEVOQlFVTTdTVUZEU2l4RFFVRkRMRU5CUVVNc1QwRkJUeXhIUVVGSExFVkJRVVU3VFVGRFdpeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUjBGQlJ5eERRVUZETzBsQlF6ZENPMFZCUTBZN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc1ZVRkJWU3hEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVTdTVUZETTBJN1NVRkRRU3hKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEU5QlFVOHNRMEZCUXp0SlFVTTNRaXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVVVzUjBGQlJ5eEpRVU16UXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNSMEZCUnl4RFFVTTFRaXhEUVVGRE8wVkJRMGc3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4TlFVRk5MRmRCUVZjc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTzBsQlEyeERMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zVDBGQlR5eERRVUZETzBsQlJUZENMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEhkQ1FVRjNRaXhKUVVGSkxFVkJRVU1zVDBGQlR5eGhRVUZRTEU5QlFVOHNaVUZCVUN4UFFVRlBMRU5CUVVVc1QwRkJUeXhIUVVGRk8wMUJRemRFTzBsQlEwWTdPMGxCUlVFN1NVRkRRVHRKUVVOQkxFMUJRVTBzVFVGQlRTeEhRVUZITEVWQlFVVTdTVUZGYWtJc1NVRkJTU3hQUVVGUExFTkJRVU1zYlVKQlFXMUNMRVZCUVVVN1RVRkRMMEk3VFVGRFFUdE5RVU5CTzAxQlEwRXNTVUZCU1N4RFFVRkJMRTlCUVU4c1lVRkJVQ3hQUVVGUExIVkNRVUZRTEU5QlFVOHNRMEZCUlN4dlFrRkJiMElzVFVGQlN5eEpRVUZKTEVWQlFVVTdVVUZETVVNc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGRFlpeHRSMEZEUml4RFFVRkRPMDFCUTBnN1RVRkZRU3hOUVVGTkxHdENRVUZyUWl4SFFVRkhMRWxCUVVFc1lVRkJTeXhGUVVNNVFpeFBRVUZQTEVOQlFVTXNiVUpCUVcxQ0xFVkJRek5DTEU5QlFVOHNRMEZCUXl4VlFVTldMRU5CUVVNN1RVRkZSQ3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVU5VTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUTFRc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRPMUZCUTNSQ0xFZEJRVWNzVDBGQlR6dFJRVU5XTEZWQlFWVXNSVUZCUlN4clFrRkJhMEk3VVVGRE9VSXNNRUpCUVRCQ0xFVkJRVVU3VFVGRE9VSXNRMEZCUXl4RFFVRkRMRVZCUTBZN1VVRkJSU3hIUVVGSExFOUJRVTg3VVVGQlJTeHZRa0ZCYjBJc1JVRkJSVHROUVVGTExFTkJRek5ETEVOQlEwWXNRMEZCUXp0SlFVTklPMGxCUlVFc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6dEpRVVZ1UlN4TlFVRk5MRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETzBWQlF6TkNPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4bFFVRmxMRU5CUVVNc1QwRkJUeXhGUVVGRk8wbEJRM1pDTzBsQlEwRXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RlFVRkZPMDFCUTNaRExFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlExb3NLME5CUTBNc1QwRkJUeXhEUVVGRExFdEJRMVFzYlVKQlFXdENMRTlCUVU4c1EwRkJReXhSUVVGVExIZENRVUYxUWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVOd1JTeFBRVU5HTEVOQlFVVXNTMEZEUVN4UFFVRlBMRTlCUVU4c1EwRkJReXhWUVVGVkxFdEJRVXNzVVVGQlVTeEhRVU5xUXl3clFrRkJPRUlzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRkxFVkJRVU1zUjBGRGFFVXNSVUZEVEN4RlFVTklMRU5CUVVNN1NVRkRTRHRGUVVOR08wVkJSVUVzZVVKQlFYbENMRU5CUVVNc1VVRkJVU3hGUVVGRk8wbEJRMnhETEUxQlFVMHNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXh6UWtGQmMwSXNRMEZCUXl4UlFVRlJMRU5CUVVNN1NVRkRlRVFzU1VGQlNTeFZRVUZWTEVWQlFVVTdUVUZEWkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGVkJRVlVzUTBGQlF6dEpRVU16UWp0RlFVTkdPenRGUVVWQk8wVkJRMEVzTkVKQlFUUkNMRU5CUVVFc1JVRkJSenRKUVVNM1FpeE5RVUZOTzAxQlFVVTdTVUZCZVVJc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkRNVVFzZDBKQlFYZENMRU5CUVVNc1QwRkJUeXhEUVVGRkxIVkNRVUYxUWl4SlFVRkxPMDFCUXpWRUxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU03U1VGRE1VTXNRMEZCUXl4RFFVRkRPMFZCUTBvN08wVkJSVUU3UlVGRFFTdzBRa0ZCTkVJc1EwRkJRU3hGUVVGSE8wbEJRemRDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRE8wMUJRM0pDTEhkQ1FVRjNRaXhGUVVGRk8wbEJRelZDTEVOQlFVTXNRMEZCUXp0RlFVTktPenRGUVVWQk8wVkJRMEVzTUVKQlFUQkNMRU5CUVVNc1MwRkJTeXhGUVVGRk8wbEJRMmhETEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4M1FrRkJkMEk3U1VGRGFFVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU03VFVGRGNrSXNkMEpCUVhkQ0xFVkJRVVVzUTBGQlF5eEhRVUZITEZOQlFWTXNSVUZCUlN4TFFVRkxPMGxCUTJoRUxFTkJRVU1zUTBGQlF6dEZRVU5LT3p0RlFVVkJPMFZCUTBFc1dVRkJXU3hEUVVGRExGTkJRVk1zUlVGQlJUdEpRVU4wUWl4TlFVRk5PMDFCUVVVN1NVRkJUeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRKUVVONFF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenROUVVOeVFpeE5RVUZOTEVWQlFVVTdVVUZCUlN4SFFVRkhMRTFCUVUwN1VVRkJSU3hIUVVGSE8wMUJRVlU3U1VGRGNFTXNRMEZCUXl4RFFVRkRPMFZCUTBvN08wVkJSVUU3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4aFFVRmhMRU5CUVVNc1VVRkJVU3hGUVVGRkxFbEJRVWtzUjBGQlJ5d3JRMEZCYTBNc1JVRkJSVHRKUVVOcVJTeFBRVUZQTzAxQlEwd3NSMEZCUnl4RlFVRkZPMUZCUTBnc1NVRkJTU3hGUVVGRkxHOUNRVUZ2UWp0UlFVTXhRaXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETzAxQlEyaENMRU5CUVVNN1RVRkRSQ3hUUVVGVExFVkJRVVVzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4VFFVRlRPMDFCUTNKRExFbEJRVWs3VFVGRFNqdEpRVU5HTEVOQlFVTTdSVUZEU0RzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxHdENRVUZyUWl4RFFVRkRMRlZCUVZVc1JVRkJSVHRKUVVNM1FpeE5RVUZOTzAxQlEwb3NTMEZCU3p0TlFVTk1MRlZCUVZVN1RVRkRWaXhQUVVGUE8wMUJRMUFzUzBGQlN6dE5RVU5NTEZGQlFWRTdUVUZEVWl4UlFVRlJPMDFCUTFJc1NVRkJTVHROUVVOS0xGRkJRVkU3VFVGRFVpeGxRVUZsTEVkQlFVYzdTVUZEY0VJc1EwRkJReXhIUVVGSExGVkJRVlU3U1VGRFpDeFBRVUZQTzAxQlEwd3NTMEZCU3p0TlFVTk1MRk5CUVZNc1JVRkJSU3h2UWtGQmIwSXNRMEZCUXl4VlFVRlZMRU5CUVVNN1RVRkRNME1zVlVGQlZTeEZRVUZGTzFGQlExWTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEVzUjBGQlJ5eEpRVUZCTEZsQlFVa3NSVUZCUXl4VlFVRlZMRVZCUVVVc1EwRkJReXhUUVVGVExFVkJRVVVzVVVGQlVTeEZRVUZGTEZWQlFWVXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRSUVVNdlJDeFBRVUZQTzFGQlExQXNTMEZCU3p0UlFVTk1MRkZCUVZFN1VVRkRVaXhSUVVGUk8xRkJRMUlzVFVGQlRTeEZRVUZGTEVsQlFVa3NRMEZCUXl4TlFVRk5PMUZCUTI1Q0xGRkJRVkVzUlVGQlJTeERRVUZCTEZWQlFWVXNZVUZCVml4VlFVRlZMSFZDUVVGV0xGVkJRVlVzUTBGQlJTeFJRVUZSTEV0QlFVa3NTVUZCU1N4RFFVRkRMRTlCUVU4N1VVRkRPVU1zWjBKQlFXZENMRVZCUVVVN1RVRkRjRUlzUTBGQlF6dE5RVU5FTEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTzBsQlF6VkRMRU5CUVVNN1JVRkRTRHM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxITkNRVUZ6UWl4RFFVRkRMR0ZCUVdFc1JVRkJSVHRKUVVOd1F5eE5RVUZOTzAxQlFVVXNUVUZCVFR0TlFVRkZPMGxCUVcxQ0xFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRelZFTzBsQlEwRXNUVUZCVFN4aFFVRmhMRWRCUVVjN1RVRkRjRUlzUTBGQlF5eHBRMEZCYjBJc1EwRkJReXhyUWtGQmEwSXNSMEZCUnl4SlFVRkJMRmRCUVVjc1JVRkROVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEZsQlFVa3NRMEZEYmtRc1EwRkJRenROUVVORUxFTkJRVU1zYVVOQlFXOUNMRU5CUVVNc1kwRkJZeXhIUVVOc1F5eE5RVUZOTEVOQlFVTXNhVU5CUVc5Q0xFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NSVUZCUlR0TlFVTnVSQ3hEUVVGRExHbERRVUZ2UWl4RFFVRkRMRzlDUVVGdlFpeEhRVU40UXl4aFFVRmhMRU5CUVVNc2JVSkJRVzFDTzAxQlEyNURMRU5CUVVNc2FVTkJRVzlDTEVOQlFVTXNZVUZCWVN4SFFVRkhMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRMnBFTEdGQlFXRXNRMEZCUXl4eFFrRkRhRUlzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUlN4dlFrRkJiMElzU1VGQlN5eHZRa0ZCYjBJc1EwRkJReXhQUVVGUExFTkJRVU03VFVGRE4wUXNRMEZCUXl4cFEwRkJiMElzUTBGQlF5eHhRa0ZCY1VJc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVU42UkN4aFFVRmhMRU5CUVVNc2NVSkJRMmhDTEVOQlFVTXNRMEZEUlN4TlFVRk5MRU5CUVVNc1EwRkJRenRSUVVGRk8wMUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUXk5Q0xFZEJRVWNzUTBGQlF5eERRVUZETzFGQlFVVTdUVUZCVVN4RFFVRkRMRXRCUVVzc1QwRkJUeXhEUVVGRE8wMUJRMmhETEVOQlFVTXNhVU5CUVc5Q0xFTkJRVU1zZFVKQlFYVkNMRWRCUXpORExHRkJRV0VzUTBGQlF5eGxRVUZsTzAxQlF5OUNMRU5CUVVNc2FVTkJRVzlDTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZEY0VRc1lVRkJZU3hEUVVGRExGVkJRMmhDTEVOQlFVTXNRMEZCUXl4TlFVRk5PMDFCUTFJc1EwRkJReXhwUTBGQmIwSXNRMEZCUXl4elFrRkJjMElzUjBGRE1VTXNTVUZCU1N4RFFVRkRMQ3RDUVVFclFpeERRVUZETEdGQlFXRXNRMEZCUXl4UFFVRlBMRU5CUVVNN1RVRkROMFFzUTBGQlF5eHBRMEZCYjBJc1EwRkJReXhaUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVNMVJDeGhRVUZoTEVOQlFVTXNUMEZEYUVJc1EwRkJReXhEUVVGRExFMUJRVTA3VFVGRFVpeERRVUZETEdsRFFVRnZRaXhEUVVGRExHTkJRV01zUjBGRGJFTXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEdGQlFXRXNRMEZCUXp0TlFVTjRReXhEUVVGRExHbERRVUZ2UWl4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEdGQlFXRXNRMEZCUXl4alFVRmpPMDFCUTNSRkxFTkJRVU1zYVVOQlFXOUNMRU5CUVVNc1pVRkJaU3hIUVVGSExFdEJRVXM3VFVGQlJUdE5RVU12UXl4RFFVRkRMR2xEUVVGdlFpeERRVUZETEV0QlFVc3NSMEZCUnl4aFFVRmhMRU5CUVVNc1MwRkJTeXhKUVVGSkxGTkJRVk03VFVGRE9VUXNRMEZCUXl4cFEwRkJiMElzUTBGQlF5eHhRa0ZCY1VJc1IwRkRla01zWVVGQllTeERRVUZETEdsQ1FVRnBRanROUVVOcVF5eERRVUZETEdsRFFVRnZRaXhEUVVGRExHbENRVUZwUWl4SFFVTnlReXhoUVVGaExFTkJRVU1zSzBKQlFTdENMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ6dEpRVU5zUlN4RFFVRkRPMGxCUlVRc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RlFVRkZPMDFCUTNaQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPMUZCUVVVc2EwSkJRV3RDTEVWQlFVVTdUVUZCWXl4RFFVRkRMRU5CUVVNN1RVRkROMFFzVDBGQlR5eGhRVUZoTzBsQlEzUkNPMGxCUlVFc1NVRkJTU3hyUWtGQmEwSXNTVUZCU1N4RFFVRkRMRWxCUVVFc1pVRkJUeXhGUVVGRExHdENRVUZyUWl4RlFVRkZMR0ZCUVdFc1EwRkJReXhGUVVGRk8wMUJRM0pGTEUxQlFVMHNUMEZCVHl4SFFVRkhMRWxCUVVFc1kwRkJUU3hGUVVOd1FpeGhRVUZoTEVWQlEySXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlFTeGxRVUZQTEVWQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVTTNReXhEUVVGRE8wMUJRMFFzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNN1VVRkJSU3hyUWtGQmEwSXNSVUZCUlR0TlFVRmpMRU5CUVVNc1EwRkJRenROUVVNM1JDeFBRVUZQTEU5QlFVODdTVUZEYUVJN1NVRkZRU3hQUVVGUExFbEJRVWs3UlVGRFlqczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEdsQ1FVRnBRaXhEUVVGRExGVkJRVlVzUlVGQlJUdEpRVU0xUWl4UFFVRlBMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEV0QlFVc3NRMEZCUXl4TFFVRkxPMDFCUTNSRkxFbEJRVWtzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzFGQlEycERMRmRCUVZjc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1RVRkRlRU1zUTBGQlF5eE5RVUZOTEVsQlFVa3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdFJRVU53UXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUzBGQlN6dE5RVU14UWl4RFFVRkRMRTFCUVUwN1VVRkRUQ3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVU5VTERKQ1FVRXdRaXhIUVVGSkxHMURRVU5xUXl4RFFVRkRPMDFCUTBnN1RVRkRRU3hQUVVGUExGZEJRVmM3U1VGRGNFSXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wVkJRMUk3UlVGbFFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxDdENRVUVyUWl4RFFVRkRMRTlCUVU4c1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJUdEpRVU0xUXl4TlFVRk5MR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVU16UkN4SFFVRkhMRWxCUVVzc1IwRkJSeXhEUVVGRExFOUJRMllzUTBGQlF6dEpRVU5FTEUxQlFVMHNaVUZCWlN4SFFVRkhMRWxCUVVrc1IwRkJSeXhEUVVGRExHVkJRV1VzUTBGQlF6dEpRVU5vUkN4UFFVRlBMR1ZCUVdVc1EwRkJReXhKUVVGSk8wVkJRemRDT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wVkJRMFVzYTBKQlFXdENMRU5CUVVNc1lVRkJZU3hGUVVGRk8wbEJRMmhETEU5QlFVOHNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVTnNSQ3hEUVVGRExFMUJRVTBzUlVGQlJTeGxRVUZsTEV0QlFVczdUVUZETTBJc1QwRkJUeXhOUVVGTkxFZEJRVWNzU1VGQlFTeFhRVUZITEVWQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNXVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkRMMFFzUTBGQlF5eEZRVU5FTEVOQlEwWXNRMEZCUXp0RlFVTklPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc1UwRkJVeXhEUVVGRExGVkJRVlVzUlVGQlJUdEpRVU53UWl4TlFVRk5PMDFCUVVVN1NVRkJZeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVczdTVUZGY0VNc1NVRkJTU3hEUVVGRExGVkJRVlVzU1VGQlNTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVWQlFVVTdUVUZEZGtRc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eHpSRUZCYzBRc1EwRkJRenROUVVOd1JUdEpRVU5HTzBsQlJVRXNTVUZCU1R0TlFVTkdMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4VlFVRlZMRVZCUVVVN1VVRkRja01zVFVGQlRTeEZRVUZGTEdGQlFXRTdVVUZEY2tJc1RVRkJUU3hGUVVGRk8wMUJRMVlzUTBGQlF5eERRVUZETzBsQlEwb3NRMEZCUXl4RFFVRkRMRTlCUVU4c1IwRkJSeXhGUVVGRk8wMUJRMW9zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFZEJRVWNzUTBGQlF6dEpRVU0zUWp0RlFVTkdPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc1lVRkJZU3hEUVVGRExFdEJRVXNzUlVGQlJUdEpRVU51UWl4TlFVRk5MRWxCUVVrc1IwRkJSeXhQUVVGUExFdEJRVXM3U1VGRmVrSXNUMEZEUlN4SlFVRkpMRXRCUVVzc1VVRkJVU3hKUVVOcVFpeEpRVUZKTEV0QlFVc3NVMEZCVXl4SlFVTnNRaXhKUVVGSkxFdEJRVXNzVVVGQlVTeEpRVU5xUWl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUXpsQ0xFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhMUVVGTExFTkJRVU03UlVGRmFrTTdSVUZwUTBFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxFMUJRVTBzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZPMGxCUTNaQ0xFMUJRVTA3VFVGRFNpeFBRVUZQTzAxQlExQXNZVUZCWVN4RlFVRkZMSEZDUVVGeFFqdE5RVU53UXl4WFFVRlhPMDFCUTFnN1NVRkRSaXhEUVVGRExFZEJRVWNzVDBGQlR5eEpRVUZKTEVOQlFVTXNRMEZCUXp0SlFVTnFRaXhKUVVGSkxFMUJRVTBzUjBGQlJ5eFJRVUZSTzBsQlEzSkNMRWxCUVVrc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNZVUZCWVR0SlFVTjBReXhKUVVGSkxHOUNRVUZ2UWl4SFFVRkhMRU5CUVVFc1QwRkJUeXhoUVVGUUxFOUJRVThzZFVKQlFWQXNUMEZCVHl4RFFVRkZMRzlDUVVGdlFpeExRVUZKTEV0QlFVczdTVUZEYWtVN1NVRkRRVHRKUVVOQk8wbEJRMEVzVFVGQlRTeFZRVUZWTEVkQlFVY3NUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03U1VGRGJrVXNTVUZCU1N4VlFVRlZMRVZCUVVVN1RVRkRaQ3h2UWtGQmIwSXNSMEZCUnl4SlFVRkpPMGxCUXpkQ08wbEJRMEU3U1VGRFFUdEpRVU5CTzBsQlEwRTdTVUZEUVR0SlFVTkJPMGxCUTBFN1NVRkRRVHRKUVVOQk8wbEJRMEU3U1VGRFFTeEpRVUZKTEc5Q1FVRnZRaXhKUVVGTExFOUJRVThzU1VGQlNTeERRVUZETEhGQ1FVRnpRaXhGUVVGRk8wMUJReTlFTEUxQlFVMHNSMEZCUnl4aFFVRmhPMDFCUTNSQ0xFOUJRVThzUjBGQlJ5eHhRMEZCZDBJN1NVRkRjRU1zUTBGQlF5eE5RVUZOTEVsQlFVa3NUMEZCVHl4SlFVRkpMSEZDUVVGeFFpeEZRVUZGTzAxQlF6TkRMRTlCUVU4c1IwRkJSeXh4UWtGQmNVSTdTVUZEYWtNN1NVRkRRU3hQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NUMEZCVHpzN1NVRkZla0k3U1VGRFFUdEpRVU5CTEVsQlFVa3NWMEZCVnl4TFFVRkxMRWxCUVVrc1JVRkJSVHROUVVONFFpeFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRMRmxCUVZrc1IwRkJSeXhKUVVGSk8wbEJRM2hET3p0SlFVVkJPMGxCUTBFN1NVRkRRVHRKUVVOQk8wbEJRMEVzVDBGQlR5eEpRVUZKTEU5QlFVOHNRMEZCUXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hOUVVGTkxFdEJRVXM3VFVGRGRFTXNUVUZCVFN4UlFVRlJMRWRCUVVrc1IwRkJSeXhKUVVGTE8xRkJRM2hDTEVsQlFVa3NSMEZCUnl4RlFVRkZPMVZCUTFBN1ZVRkRRVHRWUVVOQk8xVkJRMEU3VlVGRFFTeE5RVUZOTEZOQlFWTXNSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETzFWQlEzaERMRk5CUVZNc1EwRkJReXhMUVVGTExFZEJRVWNzUjBGQlJ5eERRVUZETEV0QlFVczdWVUZETTBJc1QwRkJUeXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETzFGQlF6RkNPMUZCUTBFc1QwRkJUeXhQUVVGUExFTkJRVU1zUTBGQlF6dE5RVU5zUWl4RFFVRkRPMDFCUlVRc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVVzVVVGQlVTeERRVUZETzAxQlEzUkVMRWxCUVVrc1owSkJRV2RDTEVWQlFVVTdVVUZEY0VJc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0TlFVTjBRanRKUVVOR0xFTkJRVU1zUTBGQlF6dEZRVU5LT3p0RlFVVkJPMFZCUTBFN1JVRkRRVHRGUVVOQk8wVkJRMEU3UlVGRFFTeHhRa0ZCY1VJc1EwRkJReXhUUVVGVExFVkJRVVVzVDBGQlR5eEZRVUZGTEZGQlFWRXNSVUZCUlR0SlFVTnNSQ3hOUVVGTk8wMUJRVVVzWVVGQllUdE5RVUZGTzBsQlFYbENMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN6dEpRVU01UkN4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVsQlFVa3NRMEZCUXl4aFFVRmhMRVZCUVVVN1RVRkRMME03U1VGRFJqdEpRVVZCTEUxQlFVMHNVMEZCVXl4SFFVRkhMRTlCUVU4c1EwRkJReXhUUVVGVExFbEJRVWtzU1VGQlFTeHpRa0ZCWjBJc1JVRkJReXhEUVVGRE8wbEJRM3BFTEVsQlFVa3NVMEZCVXl4SFFVRkhMRWxCUVVrc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRE1VSXNTVUZCU1N4UFFVRlBMRU5CUVVNc1UwRkJVeXhGUVVGRk8wMUJRM0pDTEUxQlFVMHNWMEZCVnl4SFFVRkhMRWxCUVVrc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTTdUVUZETDBNc1NVRkJTU3hKUVVGQkxHbENRVUZYTEVWQlFVTXNWMEZCVnl4RFFVRkRMRVZCUVVVN1VVRkROVUlzVTBGQlV5eEhRVUZITEZkQlFWYzdUVUZEZWtJN1NVRkRSanRKUVVOQkxFMUJRVTBzWlVGQlpTeEhRVUZITzAxQlFVVXNSMEZCUnl4UFFVRlBPMDFCUVVVc1UwRkJVenROUVVGRk8wbEJRVlVzUTBGQlF6dEpRVU0xUkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF6dE5RVU55UWl4bFFVRmxMRVZCUVVVN1VVRkRaaXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhsUVVGbE8xRkJRM2hETEVOQlFVTXNVMEZCVXl4SFFVRkhPMVZCUTFnc1UwRkJVenRWUVVOVUxFOUJRVThzUlVGQlJUdFpRVU5RTEVkQlFVY3NaVUZCWlR0WlFVTnNRaXhUUVVGVExFVkJRVVVzWlVGQlpTeERRVUZETEZOQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVNN1ZVRkRhRVE3VVVGRFJqdE5RVU5HTzBsQlEwWXNRMEZCUXl4RFFVRkRPMGxCUTBZc1RVRkJUU3huUWtGQlowSXNSMEZCU1N4TlFVRk5MRWxCUVVzN1RVRkRia01zVFVGQlRUdFJRVUZGTzAxQlFXZENMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMDFCUTJwRUxFOUJRVThzWlVGQlpTeERRVUZETEZOQlFWTXNRMEZCUXp0TlFVTnFReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXp0UlFVTnlRanROUVVOR0xFTkJRVU1zUTBGQlF6dE5RVU5HTEU5QlFVOHNVVUZCVVN4aFFVRlNMRkZCUVZFc2RVSkJRVklzVVVGQlVTeERRVUZITEUxQlFVMHNRMEZCUXp0SlFVTXpRaXhEUVVGRE8wbEJRMFFzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhsUVVGbExFVkJRVVVzWjBKQlFXZENMRU5CUVVNN1JVRkROVVE3UVVGRFJqdEJRVUZETEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc2NVSkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkROU3RDUkN4SlFVRkJMR05CUVVFc1IwRkJRU3hQUVVGQk8wRkJUMEVzU1VGQlFTeHhRa0ZCUVN4SFFVRkJMRTlCUVVFN1FVRlRRU3hKUVVGQkxHMUNRVUZCTEVkQlFVRXNUMEZCUVR0QlFVdEJMRWxCUVVFc2FVSkJRVUVzUjBGQlFTeFBRVUZCTzBGQlJVRXNTVUZCUVN4TFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzUzBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRkZCUVVFc1IwRkJRU3hQUVVGQk8wRkJSemhETEVsQlJXeERMR2xDUVVGcFFpd3dRa0ZCYWtJc2FVSkJRV2xDTzBWQlFXcENMR2xDUVVGcFFqdEZRVUZxUWl4cFFrRkJhVUk3UlVGQlFTeFBRVUZxUWl4cFFrRkJhVUk3UVVGQlFUdEJRVUZCTEU5QlFVRXNRMEZCUVN4cFFrRkJRU3hIUVVGQkxHbENRVUZCTzBGQmFVSTNRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEVHl4VFFVRlRMRzFDUVVGdFFpeERRVU5xUXl4aFFVRnpSU3hGUVVOTE8wVkJRek5GTEUxQlFVMHNaMEpCUVdkQ0xFZEJRM0JDTEdGQlFXRXNRMEZCUXl4SlFVRkpMRXRCUVVzc2FVSkJRV2xDTEVOQlFVTXNUVUZCVFN4SFFVTXpReXhKUVVGQkxIZERRVUZ6UWl4RlFVRkRPMGxCUTNKQ0xFOUJRVThzUlVGQlJTeGhRVUZoTEVOQlFVTXNUMEZCVHp0SlFVTTVRaXhUUVVGVExFVkJRVVVzWVVGQllTeERRVUZETEdWQlFXVTdTVUZEZUVNc1YwRkJWeXhGUVVGRkxFTkJRVU03U1VGRFpDeE5RVUZOTEVWQlFVVTdSVUZEVml4RFFVRkRMRU5CUVVNc1IwRkRSaXhKUVVGQkxESkRRVUZ4UWl4RlFVRkRPMGxCUTNCQ0xFbEJRVWtzUlVGQlJTeE5RVUZOTEVOQlFVTXNTVUZCU1R0SlFVTnFRaXhMUVVGTExFVkJRVVVzVFVGQlRTeERRVUZETEV0QlFVczdTVUZEYmtJc1RVRkJUU3hGUVVGRkxHRkJRV0VzUTBGQlF6dEZRVU40UWl4RFFVRkRMRU5CUVVNN1JVRkZVaXhOUVVGTkxGZEJRVmNzUjBGQlJ5eEpRVUZCTERCRFFVRnpRaXhGUVVGRExHZENRVUZuUWl4RFFVRkRPMFZCUlRWRUxFMUJRVTBzWjBKQlFXZENMRWRCUTNCQ0xFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4SlFVRkpMR0ZCUVdFc1EwRkJReXhKUVVGSkxFdEJRVXNzVVVGQlVTeEhRVU5zUkR0SlFVRkZMR1ZCUVdVc1JVRkJSVHRGUVVGUExFTkJRVU1zUjBGRE0wSXNRMEZCUXl4RFFVRkRPMFZCUTFJc1RVRkJUU3haUVVGWkxFZEJRVWNzU1VGQlNTeDVRa0ZCYlVJc1EwRkJRenRKUVVNelF5eEhRVUZITEdkQ1FVRm5RanRKUVVOdVFpeFJRVUZSTEVWQlFVVTdSVUZEV2l4RFFVRkRMRU5CUVVNN1JVRkZSaXhOUVVGTkxHbENRVUZwUWl4SFFVTnlRaXhoUVVGaExFTkJRVU1zU1VGQlNTeExRVUZMTEdsQ1FVRnBRaXhEUVVGRExFMUJRVTBzUjBGRE0wTXNOa0pCUVRaQ0xFTkJRVU03U1VGRE5VSXNXVUZCV1R0SlFVTmFMRTlCUVU4c1JVRkJSU3hoUVVGaExFTkJRVU1zVDBGQlR6dEpRVU01UWl4WFFVRlhPMGxCUTFnN1JVRkRSaXhEUVVGRExFTkJRVU1zUjBGRFJpdzJRa0ZCTmtJc1EwRkJRenRKUVVNMVFpeFpRVUZaTzBsQlExb3NUMEZCVHl4RlFVRkZMR0ZCUVdFc1EwRkJReXhQUVVGUE8wbEJRemxDTzBWQlEwWXNRMEZCUXl4RFFVRkRPMFZCUlZJc1RVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTdzBRa0ZCWVN4RFFVRkRMRU5CUVVNN1JVRkZiRU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF6dEZRVVU1UWl4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGQkxITkRRVUZyUWl4RlFVRkRMRTFCUVUwc1EwRkJRenRGUVVVelF5eFBRVUZQTzBsQlFVVXNVVUZCVVR0SlFVRkZPMFZCUVdFc1EwRkJRenRCUVVOdVF6dEJRVVZCTEZOQlFWTXNOa0pCUVRaQ0xFTkJRVU03UlVGRGNrTXNXVUZCV1R0RlFVTmFMRTlCUVU4N1JVRkRVQ3hYUVVGWE8wVkJRMWc3UVVGTlJpeERRVUZETEVWQlFVVTdSVUZEUkN4UFFVRlBMRWxCUVVFc09FSkJRV1VzUlVGQlF5eERRVU55UWl4cFEwRkJhVU1zUTBGQlF6dEpRVUZGTzBWQlFWRXNRMEZCUXl4RFFVRkRMRVZCUXpsRExFbEJRVUVzWjBSQlFUQkNMRVZCUVVNN1NVRkJSVHRGUVVGaExFTkJRVU1zUTBGQlF5eEZRVU0xUXl4SlFVRkJMRzFFUVVFMlFpeEZRVUZETEVOQlFVTXNSVUZETDBJc1NVRkJRU3c0UTBGQmQwSXNSVUZCUXp0SlFVRkZMRmxCUVZrN1NVRkJSU3hSUVVGUkxFVkJRVVU3UlVGQldTeERRVUZETEVOQlFVTXNSVUZEYWtVc1NVRkJRU3hyUkVGQk5FSXNSVUZCUXp0SlFVRkZMRmxCUVZrN1NVRkJSU3hSUVVGUkxFVkJRVVU3UlVGQldTeERRVUZETEVOQlFVTXNSVUZEY2tVc1NVRkJRU3d5UkVGQmNVTXNSVUZCUXp0SlFVRkZPMFZCUVdFc1EwRkJReXhEUVVGRExFVkJRM1pFTEdkQ1FVRm5RaXhEUVVOcVFpeERRVUZETzBGQlEwbzdRVUZGUVN4VFFVRlRMR2xEUVVGcFF5eERRVUZETzBWQlEzcERPMEZCUjBZc1EwRkJReXhGUVVGRk8wVkJRMFFzU1VGQlNTeERRVUZETEdsRFFVRjNRaXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTzBsQlEzUkRMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVVVzZVVOQlFYZERMRTlCUVZFc1IwRkJSU3hEUVVGRE8wVkJRM1JGTzBWQlJVRXNUVUZCVFR0SlFVRkZMRTlCUVU4N1NVRkJSVHRGUVVGVkxFTkJRVU1zUjBGQlJ5eHBRMEZCZDBJc1EwRkJReXhQUVVGUExFTkJRVU03UlVGRmFFVXNUMEZCVHl4SlFVRkJMSFZEUVVGM1FpeEZRVUZETzBsQlF6bENMRmRCUVZjc1JVRkJSU3hQUVVGUE8wbEJRM0JDTEZkQlFWY3NSVUZCUlR0RlFVTm1MRU5CUVVNc1EwRkJRenRCUVVOS08wRkJSVUVzVFVGQlRTeDFRa0ZCZFVJc1IwRkRNMElzVDBGQlpTeEpRVU41UWp0RlFVTjRReXhQUVVGUExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpMRVZCUVVVc1IwRkJSeXhMUVVGTE8wbEJRemxDTEVsQlFVa3NSMEZCUnl4RFFVRkRMRTFCUVUwc1MwRkJTeXhoUVVGaExFVkJRVVU3VFVGRGFFTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhQUVVGUE8wMUJRM0JDTEU5QlFVOHNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRaRHRKUVVOQkxFOUJRVThzU1VGQlNTeERRVUZETEVOQlFVTTdSVUZEWml4RFFVRkRPMEZCUTBnc1EwRkJRenRCUVVWRUxGTkJRVk1zTmtKQlFUWkNMRU5CUVVNN1JVRkRja01zV1VGQldUdEZRVU5hTEU5QlFVODdSVUZEVUR0QlFVdEdMRU5CUVVNc1JVRkJSVHRGUVVORUxFMUJRVTBzWlVGQlpTeEhRVUZITEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1QwRkJUeXhIUVVOMlF5eERRVUZETEc5RFFVRnZReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVU40UXl4RlFVRkZPMFZCUlU0c1QwRkJUeXhKUVVGQkxEaENRVUZsTEVWQlFVTXNRMEZEY2tJc1IwRkJSeXhsUVVGbExFVkJRMnhDTEhWQ1FVRjFRaXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVU5vUXl4SlFVRkJMSEZFUVVFclFpeEZRVUZETzBsQlFVVTdSVUZCWVN4RFFVRkRMRU5CUVVNc1JVRkRha1FzU1VGQlFTeG5SRUZCTUVJc1JVRkJRenRKUVVGRk8wVkJRV0VzUTBGQlF5eERRVUZETEVWQlF6VkRMRWxCUVVFc2JVUkJRVFpDTEVWQlFVTXNRMEZCUXl4RlFVTXZRaXhKUVVGQkxESkVRVUZ4UXl4RlFVRkRPMGxCUVVVN1JVRkJZU3hEUVVGRExFTkJRVU1zUlVGRGRrUXNaMEpCUVdkQ0xFTkJRMnBDTEVOQlFVTTdRVUZEU2pzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTXNiME5CUVc5RExFTkJRVUVzUlVGQlJ6dEZRVU01UXl4UFFVRlBMRWxCUVVFc2IwTkJRWEZDTEVWQlFVTXNUMEZCVHl4SFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRkxFbEJRVWtzUzBGQlN6dEpRVU51UkN4SlFVRkpMRWRCUVVjc1EwRkJReXhOUVVGTkxFdEJRVXNzYVVKQlFXbENMRVZCUVVVN1RVRkRjRU1zVFVGQlRTeEpRVUZKTEU5QlFVOHNRMEZCUlN4UFFVRlBMRWxCUVVzc1ZVRkJWU3hEUVVGRExFOUJRVThzUlVGQlJTeFpRVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRha1U3U1VGRFFTeFBRVUZQTEVsQlFVa3NRMEZCUXl4RFFVRkRPMFZCUTJZc1EwRkJReXhEUVVGRE8wRkJRMG83T3pzN096czdPenM3T3pzN096czdPenM3UVVNNVRFRXNTVUZCUVN4clFrRkJRU3hIUVVGQkxFOUJRVUU3UVVGQlFTeE5RVUZCTEVOQlFVRXNTVUZCUVN4RFFVRkJMR3RDUVVGQkxFVkJRVUVzVDBGQlFTeFhRVUZCTEVkQlFVRTdSVUZCUVN4SlFVRkJMRWRCUVVFc2EwSkJRVUVzUjBGQlFUdEZRVUZCTEVsQlFVRXNSMEZCUVN4SlFVRkJMRTlCUVVFc1NVRkJRU3hQUVVGQkxFTkJRVUVzUjBGQlFTeE5RVUZCTEd0Q1FVRkJMRU5CUVVFc1IwRkJRVHRGUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVOQlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN1NVRkJRU3hWUVVGQk8wbEJRVUVzUjBGQlFTeFhRVUZCTEVOQlFVRTdUVUZCUVN4UFFVRkJMR3RDUVVGQkxFTkJRVUVzUjBGQlFUdEpRVUZCTzBWQlFVRTdRVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTkJRU3hKUVVGQkxGVkJRVUVzVDBGQlFTeERRVUZCTEZGQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMRkZCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEZsQlFVRXNUMEZCUVN4RFFVRkJMSEZDUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5CTEVsQlFVRXNXVUZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeFZRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3h4UWtGQlFTeFBRVUZCTEVOQlFVRXNLMEpCUVVFc1EwRkJRU3hEUVVGQk8wRkJTMEVzU1VGQlFTeFpRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxGZEJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZGUVN4SlFVRkJMRkZCUVVFc1QwRkJRU3hEUVVGQkxFMUJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4VFFVRkJMRTlCUVVFc1EwRkJRU3hwUWtGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMR2RDUVVGQkxFOUJRVUVzUTBGQlFTeG5Ra0ZCUVN4RFFVRkJMRU5CUVVFN1FVRkhRU3hKUVVGQkxHTkJRVUVzVDBGQlFTeERRVUZCTERaRFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVOQkxFbEJRVUVzVjBGQlFTeFBRVUZCTEVOQlFVRXNjME5CUVVFc1EwRkJRU3hEUVVGQk8wRkJWVUVzU1VGQlFTeFpRVUZCTEU5QlFVRXNRMEZCUVN3d1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGSlFTeEpRVUZCTEdWQlFVRXNUMEZCUVN4RFFVRkJMREJEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVWxCTEVsQlFVRXNVMEZCUVN4UFFVRkJMRU5CUVVFc2EwTkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4MVFrRkJRU3hQUVVGQkxFTkJRVUVzZVVKQlFVRXNRMEZCUVN4RFFVRkJPMEZCUjJsRExIRkRRVUZCTEVWQlFVRXNUMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzUjBGQlFTeEhRVUZCTEVWQlFVRXNVMEZCUVN4SFFVRkJMRVZCUVVFc1EwRkJRU3hGUVVGQk8wRkJRVUVzYzBSQlFVRXNSVUZCUVN3d1FrRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeFZRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRlZCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeERRVUZCTEVWQlFVRTdRVUZCUVN3d1EwRkJRU3hGUVVGQkxFMUJRVUVzWTBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeEZRVUZCTEVWQlFVRXNUVUZCUVN4bFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzUlVGQlFTeEZRVUZCTEU5QlFVRXNTMEZCUVN4RlFVRkJMRmxCUVVFc1NVRkJRU3hGUVVGQkxHTkJRVUVzU1VGQlFTeEZRVUZCTEZWQlFVRXNTVUZCUVN4RlFVRkJMRU5CUVVFc1EwRkJRU3hGUVVGQkxFMUJRVUVzUlVGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFVkJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNRMEZCUVN4RlFVRkJPMEZCUVVFc05rSkJRVUVzUlVGQlFTeEpRVUZCTEUxQlFVRXNXVUZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hSUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEU5QlFVRXNUMEZCUVN4SFFVRkJMRXRCUVVFc1VVRkJRU3hIUVVGQkxFZEJRVUVzUjBGQlFTeE5RVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRU5CUVVFc1JVRkJRVHRCUVVGQkxHMURRVUZCTEVWQlFVRXNTVUZCUVN4UFFVRkJMRXRCUVVFc1MwRkJRU3hSUVVGQkxFbEJRVUVzUzBGQlFTeExRVUZCTEVsQlFVRXNSVUZCUVN4UFFVRkJMRXRCUVVFc1EwRkJRU3hEUVVGQkxFbEJRVUVzVDBGQlFTeExRVUZCTEVOQlFVRXNUVUZCUVN4WlFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQkxFbEJRVUVzU1VGQlFTeExRVUZCTEZOQlFVRXNSVUZCUVN4RlFVRkJMRWxCUVVFc1RVRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeExRVUZCTEVWQlFVRXNTVUZCUVN4SlFVRkJMRk5CUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzU1VGQlFTeFBRVUZCTEVkQlFVRXNTMEZCUVN4UlFVRkJMRVZCUVVFc1QwRkJRU3hIUVVGQkxFTkJRVUVzUTBGQlFTeE5RVUZCTEVsQlFVRXNVMEZCUVN4RFFVRkJMRGhEUVVGQkxFTkJRVUVzUTBGQlFTeEZRVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMRWxCUVVFc1MwRkJRU3hSUVVGQkxFZEJRVUVzVFVGQlFTeEhRVUZCTEUxQlFVRXNSVUZCUVN4TFFVRkJMRU5CUVVFc1EwRkJRU3hGUVVGQk8wRkJRVUVzTkVSQlFVRXNSVUZCUVN3d1FrRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeFZRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRlZCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeExRVUZCTEVOQlFVRXNRMEZCUVN4RlFVRkJPMEZCUVVFc05FUkJRVUVzUlVGQlFTeEpRVUZCTEdsQ1FVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUlVGQlFTeEZRVUZCTEUxQlFVRXNTVUZCUVN4VFFVRkJMRU5CUVVFc1owVkJRVUVzUTBGQlFTeERRVUZCTEVWQlFVRXNSVUZCUVR0QlFVRkJMREJFUVVGQkxFVkJRVUVzU1VGQlFTeERRVUZCTEZWQlFVRXNTVUZCUVN4RFFVRkJMRkZCUVVFc1EwRkJRU3hGUVVGQkxFVkJRVUVzVFVGQlFTeEpRVUZCTEZOQlFVRXNRMEZCUVN4blJFRkJRU3hEUVVGQkxFTkJRVUVzUlVGQlFTeERRVUZCTEU5QlFVRXNSVUZCUVN4RFFVRkJMRVZCUVVFN1FVRkJRU3h4UkVGQlFTeEZRVUZCTEVsQlFVRXNZVUZCUVN3MFFrRkJRU3hEUVVGQkxGRkJRVUVzUlVGQlFTeFZRVUZCTEVWQlFVRXNTMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hQUVVGQkxIZENRVUZCTEVOQlFVRXNVVUZCUVN4RlFVRkJMRlZCUVVFc1EwRkJRU3hEUVVGQkxFVkJRVUU3UVVGQlFTeDNSRUZCUVN4RlFVRkJMRWxCUVVFc1ZVRkJRU3hKUVVGQkxFVkJRVUVzUlVGQlFTeFBRVUZCTEZWQlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1VVRkJRU3hEUVVGQkxFTkJRVUVzUlVGQlFTeERRVUZCTEU5QlFVRXNWVUZCUVN4TlFVRkJMRU5CUVVFc1JVRkJRVHRCUVVGQkxEUkVRVUZCTEVWQlFVRXNTVUZCUVN4aFFVRkJMRFJDUVVGQkxFTkJRVUVzVVVGQlFTeEZRVUZCTEZWQlFVRXNSVUZCUVN4TFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQkxIZENRVUZCTEVOQlFVRXNVVUZCUVN4RlFVRkJMRlZCUVVFc1JVRkJRU3hMUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEU5QlFVRXNTMEZCUVN4RFFVRkJMRVZCUVVFN1FVRkJRU3h2UlVGQlFTeEZRVUZCTEVsQlFVRXNRMEZCUVN4VlFVRkJMRWxCUVVFc1EwRkJRU3hSUVVGQkxFTkJRVUVzUlVGQlFTeEZRVUZCTEUxQlFVRXNTVUZCUVN4VFFVRkJMRU5CUVVFc1pVRkJRU3hIUVVGQkxFMUJRVUVzUjBGQlFTeG5RMEZCUVN4RFFVRkJMRU5CUVVFc1JVRkJRU3hEUVVGQkxFOUJRVUVzVlVGQlFTeEpRVUZCTEVOQlFVRXNVVUZCUVN4RFFVRkJMRU5CUVVFc1JVRkJRVHRCUVVGQkxDdEVRVUZCTEVWQlFVRXNTVUZCUVN4VlFVRkJMRWxCUVVFc1JVRkJRU3hGUVVGQkxGVkJRVUVzU1VGQlFTeExRVUZCTEVOQlFVRXNVVUZCUVN4RlFVRkJMRXRCUVVFc1EwRkJRU3hEUVVGQkxFVkJRVUVzVFVGQlFTeEZRVUZCTEVsQlFVRXNRMEZCUVN4VlFVRkJMRk5CUVVFc1JVRkJRU3hGUVVGQkxFMUJRVUVzU1VGQlFTeFRRVUZCTEVOQlFVRXNNRU5CUVVFc1EwRkJRU3hEUVVGQkxFVkJRVUVzUTBGQlFTeFZRVUZCTEUxQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1JVRkJRU3hGUVVGQk96czdPMEZCUzJwRExFMUJRVTBzVDBGQlR5eHRRa0ZCYlVJc1EwRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUYzUTJoRExFbEJSMWtzTUVOQlFUQkNMSE5EUVVGQk8wVkJRVEZDTERCQ1FVRXdRaXhEUVVGQkxHdENRVUZCTEVOQlFVRXNSMEZCUVN4dlEwRkJRU3hEUVVGQk8wVkJRVEZDTERCQ1FVRXdRaXhEUVVGQkxHMUNRVUZCTEVOQlFVRXNSMEZCUVN4eFEwRkJRU3hEUVVGQk8wVkJRVEZDTERCQ1FVRXdRaXhEUVVGQkxHbENRVUZCTEVOQlFVRXNSMEZCUVN4dFEwRkJRU3hEUVVGQk8wVkJRVEZDTERCQ1FVRXdRaXhEUVVGQkxHMUNRVUZCTEVOQlFVRXNSMEZCUVN4eFEwRkJRU3hEUVVGQk8wVkJRVUVzVDBGQk1VSXNNRUpCUVRCQ0xFTkJRVUU3UTBGQlFTeERRVUZCTEVWQlFVRXNRMEZCUVN4RFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCTmt4MFF5eFBRVUZCTERKQ1FVRkJMRWRCUVVFc01FSkJRVUVzUTBGQlFUczdPenM3T3pzN096dEJRWFZDUVN4blEwRkJOa1U3UlVGRE0wVXNUMEZCVHl4UFFVRlBMRXRCUVVzc1MwRkJTeXhSUVVGUkxFbEJRVWtzUzBGQlN5eExRVUZMTEVsQlFVa3NTVUZCU1N4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGQk8wTkJRM1pGT3pzN096czdPenM3TzBGQlZVRXNhVU5CUVhGRU8wVkJRMjVFTEVsQlFVa3NUMEZCVHl4TFFVRkxMRXRCUVVzc1VVRkJVU3hKUVVGSkxFTkJRVU1zVFVGQlRTeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1NVRkRja1FzVDBGQlVTeERRVUZCTEVWQlFVVXNTMEZCVFN4RFFVRkJMRU5CUVVNc1EwRkJRVHRIUVVOc1FpeE5RVUZOTEVsQlFVa3NRMEZCUVN4RFFVRkJMRVZCUVVFc1RVRkJRU3hyUWtGQmFVSXNSVUZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSVHRKUVVOdVF5eFBRVUZQTEVOQlFVRXNRMEZCUVN4RlFVRkJMRmRCUVVFc1lVRkJXU3hGUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzBkQlF6TkNMRTFCUVUwc1NVRkJTU3hQUVVGUExFdEJRVXNzUzBGQlN5eFJRVUZSTEVsQlFVa3NVVUZCVVN4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVU3U1VGRE5VUXNUMEZCVHl4TFFVRkxMRU5CUVVFN1IwRkRaRHRGUVVOQkxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVVXNRMEZCUVN4eFEwRkJRU3hGUVVGMVF5eExRVUZOTEVOQlFVRXNRMEZCUVN4RFFVRkZMRU5CUVVNc1EwRkJRVHREUVVOdVJUczdPenM3UVVGTFFTd3lRMEZCYTBVN1JVRkRhRVVzU1VGQlNTeFBRVUZQTEVsQlFVa3NVVUZCVVN4RlFVRkZPMGxCUTNaQ0xFOUJRVTg3VFVGRFRDeE5RVUZOTEZGQlFVRXNZMEZCWVN4SlFVRkpPMDFCUTNaQ0xGRkJRVkVzZFVKQlFYVkNPMDFCUXk5Q0xGTkJRVk1zVDBGQlR6dE5RVU5vUWl4VlFVRlZMR2RDUVVGblFqdE5RVU14UWl4UlFVRlJMRXRCUVVFN1MwRkRWQ3hEUVVGQk8wZEJRMFlzVFVGQlRTeEpRVU5NTEU5QlFVOHNTVUZCU1N4bFFVRmxMRWxCUXpGQ0xFOUJRVThzU1VGQlNTeHhRa0ZCY1VJc1MwRkJTeXhOUVVGTkxFVkJRek5ETzBsQlEwRXNUMEZCVHp0TlFVTk1MRTFCUVUwc1VVRkJRU3hqUVVGaExFOUJRVTg3VFVGRE1VSXNVMEZCVXl4UlFVRkJMRlZCUVZNc1QwRkJUenROUVVONlFpeFJRVUZSTEZGQlFVRXNkMEpCUVhWQ0xFTkJRVU1zVVVGQlFTeGpRVUZoTEU5QlFVOHNRMEZCUVR0TFFVTnlSQ3hEUVVGQk8wZEJRMGc3UlVGRlFTeFBRVUZQTzBsQlEwd3NUVUZCVFN4UlFVRkJMR05CUVdFc1VVRkJVVHRKUVVNelFpeFRRVUZUTEZGQlFVRXNWVUZCVXl4UlFVRlJPMGxCUXpGQ0xGRkJRVkVzUzBGQlFUdEhRVU5VTEVOQlFVRTdRMEZEU0RzN096czdPMEZCVFVFc2MwTkJRWE5FTzBWQlEzQkVMRTlCUVU4c1NVRkJTU3hEUVVGQk8wTkJRMkk3T3pzN096dEJRVTFCTERCRFFVRjVSRHRGUVVOMlJDeFBRVUZQTEZGQlFVRXNZMEZCWVN4UlFVRlJMRU5CUVVFN1EwRkRPVUk3T3pzN096dEJRVTFCTERKRFFVRXlSRHRGUVVONlJDeFBRVUZQTzBsQlEwd3NUVUZCVFR0TlFVTktMRTFCUVUwc1UwRkJRVHRMUVVOU08wZEJRMFFzUTBGQlFUdERRVU5JT3pzN096czdRVUZOUVN4clJFRkJlVVU3UlVGRGRrVXNUMEZCVHl4RlFVRkZMRU5CUVVFN1EwRkRXRHM3T3pzN096dEJRVTlCTERaQ1FVRTJRanRGUVVNelFpeFBRVUZQTzBsQlEwd3NaMEpCUVdkQ0xDdENRVUVyUWl4RlFVRkZPMGxCUTJwRUxGZEJRVmNzTUVKQlFUQkNMRVZCUVVVN1NVRkRka01zWlVGQlpTdzRRa0ZCT0VJc1JVRkJSVHRKUVVNdlF5eG5Ra0ZCWjBJc0swSkJRU3RDTEVWQlFVVTdTVUZEYWtRc2RVSkJRWFZDTEhORFFVRnpReXhGUVVGRE8wZEJReTlFTEVOQlFVRTdRMEZEU0RzN096czdPenM3T3pzN096czdPenRCUVdkQ1FTeHZRMEZCTUVVN1JVRkRlRVVzVFVGQlRTeHpRa0ZCZVVNc1VVRkJRU3h6UWtGQmNVSXNRMEZCUVR0RlFVTndSU3hQUVVGUExHMUNRVUZ0UWl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVUU3UTBGRE0wTTdPenM3T3pzN096czdPenRCUVVWQkxFbEJRVUVzTUVKQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzZFVOQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzZVVKQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzTmtKQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzT0VKQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzYTBOQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzWjBOQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzYzBOQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzSzBKQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzTmtKQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzSzBKQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzYlVOQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzYjBOQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzYTBOQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzT0VOQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzT0VKQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzYTBOQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzZDBOQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzTUVOQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVVGQkxFbEJRVUVzTWtOQlFVRXNTVUZCUVN4UFFVRkJMRVZCUVVFc1EwRkJRVHRCUVZWUExHZERRVUZuUXl4UFFVRkJMRkZCUVZrc1EwRkJRenM3T3pzN096czdPenM3UlVGM1EyeEVMRmRCUVZjc1EwRkJRenM3U1VGRlZpeFJRVUZSTEVWQlFVVTdPenRIUVVkbExFVkJRVVU3U1VGRE0wSXNTMEZCU3l4RlFVRkZMRU5CUVVFN096czdPenM3T3pzN1NVRnZabFFzTWtKQlFVRXNRMEZCUVN4SlFVRkJMRVZCUVVFc01rSkJRVUVzUTBGQlFTeERRVUZCT3pzN096czdPenRKUVdwQ1FTd3lRa0ZCUVN4RFFVRkJMRWxCUVVFc1JVRkJRU3d3UWtGQlFTeERRVUZCTEVOQlFVRTdPenM3T3pzN096czdPMGxCTVVKQkxESkNRVUZCTEVOQlFVRXNTVUZCUVN4RlFVRkJMSGRDUVVGQkxFTkJRVUVzUTBGQlFUczdPenM3T3pzN096czdPenM3TzBsQmFFTkJMREpDUVVGQkxFTkJRVUVzU1VGQlFTeEZRVUZCTEd0Q1FVRkJMRU5CUVVFc1EwRkJRVHM3T3pzN096czdPenM3T3p0SlFYUkNRU3d5UWtGQlFTeERRVUZCTEVsQlFVRXNSVUZCUVN4alFVRkJMRU5CUVVFc1EwRkJRVHM3T3pzN096czdPenRKUVdoQ1FTd3lRa0ZCUVN4RFFVRkJMRWxCUVVFc1JVRkJRU3c0UWtGQlFTeERRVUZCTEVOQlFVRTdPenM3T3pzN1NVRmFRU3d5UWtGQlFTeERRVUZCTEVsQlFVRXNSVUZCUVN4clFrRkJRU3hEUVVGQkxFTkJRVUU3T3pzN1NVRlVRU3d5UWtGQlFTeERRVUZCTEVsQlFVRXNSVUZCUVN4dlFrRkJRU3hEUVVGQkxFTkJRVUU3T3pzN1NVRlVRU3d5UWtGQlFTeERRVUZCTEVsQlFVRXNSVUZCUVN4dFFrRkJRU3hEUVVGQkxFTkJRVUU3T3pzN1NVRlVRU3d5UWtGQlFTeERRVUZCTEVsQlFVRXNSVUZCUVN4bFFVRkJMRU5CUVVFc1EwRkJRVHM3T3pzN096czdTVUYyUWtFc01rSkJRVUVzUTBGQlFTeEpRVUZCTEVWQlFVRXNZVUZCUVN4RFFVRkJMRU5CUVVFN096czdPenM3TzBsQmRrSkJMREpDUVVGQkxFTkJRVUVzU1VGQlFTeEZRVUZCTEdWQlFVRXNRMEZCUVN4RFFVRkJPenM3TzBsQk0xWkJMREJDUVVGQkxFTkJRVUVzU1VGQlFTeEZRVUZCTEZWQlFVRXNSVUZCUVR0TlFVRkJMRlZCUVVFc1NVRkJRVHROUVVGQkxFOUJRVUVzUzBGQlFTeERRVUZCTzB0QlFVRXNRMEZCUVN4RFFVRkJPenM3T3p0SlFVdEJMREJDUVVGQkxFTkJRVUVzU1VGQlFTeEZRVUZCTEhWQ1FVRkJMRVZCUVVFN1RVRkJRU3hWUVVGQkxFbEJRVUU3VFVGQlFTeFBRVUZCTEV0QlFVRXNRMEZCUVR0TFFVRkJMRU5CUVVFc1EwRkJRVHM3T3pzN1NVRk5RU3hsUVVGQkxFTkJRVUVzU1VGQlFTeEZRVUZCTEU5QlFVRXNSVUZCUVN4TFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wbEJRVUVzTUVKQlFVRXNRMEZCUVN4SlFVRkJMRVZCUVVFc1UwRkJRU3hGUVVGQk8wMUJRVUVzVlVGQlFTeEpRVUZCTzAxQlFVRXNUMEZCUVN4TFFVRkJMRU5CUVVFN1MwRkJRU3hEUVVGQkxFTkJRVUU3U1VGQlFTd3dRa0ZCUVN4RFFVRkJMRWxCUVVFc1JVRkJRU3hoUVVGQkxFVkJRVUU3VFVGQlFTeFZRVUZCTEVsQlFVRTdUVUZCUVN4UFFVRkJMRXRCUVVFc1EwRkJRVHRMUVVGQkxFTkJRVUVzUTBGQlFUdEpRVUZCTERCQ1FVRkJMRU5CUVVFc1NVRkJRU3hGUVVGQkxHTkJRVUVzUlVGQlFUdE5RVUZCTEZWQlFVRXNTVUZCUVR0TlFVRkJMRTlCUVVFc1MwRkJRU3hEUVVGQk8wdEJRVUVzUTBGQlFTeERRVUZCTzBsQlFVRXNNRUpCUVVFc1EwRkJRU3hKUVVGQkxFVkJRVUVzYTBKQlFVRXNSVUZCUVR0TlFVRkJMRlZCUVVFc1NVRkJRVHROUVVGQkxFOUJRVUVzUzBGQlFTeERRVUZCTzB0QlFVRXNRMEZCUVN4RFFVRkJPMGxCUVVFc01FSkJRVUVzUTBGQlFTeEpRVUZCTEVWQlFVRXNaMEpCUVVFc1JVRkJRVHROUVVGQkxGVkJRVUVzU1VGQlFUdE5RVUZCTEU5QlFVRXNTMEZCUVN4RFFVRkJPMHRCUVVFc1EwRkJRU3hEUVVGQk8wbEJRVUVzTUVKQlFVRXNRMEZCUVN4SlFVRkJMRVZCUVVFc2MwSkJRVUVzUlVGQlFUdE5RVUZCTEZWQlFVRXNTVUZCUVR0TlFVRkJMRTlCUVVFc1MwRkJRU3hEUVVGQk8wdEJRVUVzUTBGQlFTeERRVUZCTzBsQmIwTkZMSEZDUVVGQkxFTkJRVUVzU1VGQlNTeEZRVUZCTEZWQlFVRXNSVUZCWXl4VFFVRlRMRU5CUVVFc1EwRkJRVHRKUVVVelFpeEpRVUZKTEUxQlFVMHNSMEZCUnl4SlFVRkpMRk5CUVVFc1owSkJRV1VzUTBGQlF6dE5RVU12UWl4SFFVRkhMR2xDUVVGcFFpeEZRVUZGTzAxQlEzUkNMRWRCUVVjc1MwRkJRVHRMUVVOS0xFTkJRVU1zUTBGQlFUdEpRVU5HTEhGQ1FVRkJMRU5CUVVFc1NVRkJTU3hGUVVGQkxIVkNRVUZCTEVWQlFUSkNMRWxCUVVrc1RVRkJUU3hUUVVGVExFVkJRVVVzWlVGQlpTeERRVUZCTEVOQlFVRTdPenRKUVVkdVJTeHhRa0ZCUVN4RFFVRkJMRWxCUVVrc1JVRkJRU3hUUVVGQkxFVkJRV0VzU1VGQlNTeERRVUZCTEVOQlFVRTdTVUZEY2tJc2NVSkJRVUVzUTBGQlFTeEpRVUZKTEVWQlFVRXNZVUZCUVN4RlFVRnBRaXhKUVVGSkxFTkJRVUVzUTBGQlFUczdPMGxCUjNwQ0xIRkNRVUZCTEVOQlFVRXNTVUZCU1N4RlFVRkJMR05CUVVFc1JVRkJhMElzU1VGQlNTeERRVUZCTEVOQlFVRTdTVUZETVVJc2NVSkJRVUVzUTBGQlFTeEpRVUZKTEVWQlFVRXNhMEpCUVVFc1JVRkJjMElzU1VGQlNTeERRVUZCTEVOQlFVRTdTVUZGT1VJc1NVRkJTU3hEUVVGRExHbENRVUZsTEVsQlFVa3NUMEZCVHl4cFFrRkJaU3hMUVVGTExGRkJRVkVzUlVGQlJUdE5RVU16UkN4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExESkNRVUV5UWl4RFFVRkRMRU5CUVVFN1MwRkRPVU03U1VGRFFTeHhRa0ZCUVN4RFFVRkJMRWxCUVVrc1JVRkJRU3huUWtGQlFTeEZRVUZ2UWl4cFFrRkJaU3hEUVVGQkxFTkJRVUU3U1VGRGRrTXNjVUpCUVVFc1EwRkJRU3hKUVVGSkxFVkJRVUVzYzBKQlFVRXNSVUZCTUVJc2NVSkJRWEZDTEVOQlFVRXNRMEZCUVR0SFFVTnlSRHM3T3pzN096dEZRVTlCTEdGQlFXRXNSMEZCYTBJN1NVRkJRU3hKUVVGQkxITkNRVUZCTEVOQlFVRTdTVUZETjBJc1QwRkJRU3hEUVVGQkxIbENRVUZCTEhGQ1FVRkJMRU5CUVUwc1NVRkJTU3hGUVVGQkxHRkJRVUVzUTBGQlFTeE5RVUZCTEVsQlFVRXNTVUZCUVN4elFrRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRktMSE5DUVVGQkxGRkJRVEpDTEVWQlFVVXNRMEZCUVN4RFFVRkJPMGRCUTNKRE96czdPenM3UlVGTlFTeDNRa0ZCZDBJc1IwRkJhMEk3U1VGRGVFTXNUVUZCVFRzN096dExRVUY1UWl4SFFVRkhMRWxCUVVrc1RVRkJUU3hUUVVGVExFVkJRVVVzWlVGQlpTeERRVUZCTzBsQlEzUkZMSE5DUVVGQkxFTkJRVUVzU1VGQlNTeEZRVUZCTEd0Q1FVRkJMRVZCUVVFc2JVSkJRVUVzUTBGQlFTeExRVUZCTEVOQlFVb3NTVUZCU1N4RlFVRnZRanROUVVGRkxFbEJRVWs3VFVGQlJTeE5RVUZOTzAxQlFVVXNUMEZCUVR0TFFVRlRMRU5CUVVFc1EwRkJRVHRKUVVOcVJDeE5RVUZOTEVsQlFVa3NZMEZCWXl4RlFVRkZMRU5CUVVFN1IwRkROVUk3T3pzN08wVkJTMEVzTUVKQlFUQkNMRWRCUjNoQ08wbEJRMEVzVFVGQlRTeFhRVUZSTEhGQ1FVRkJMRU5CUVVjc1NVRkJTU3hGUVVGQkxHTkJRVUVzUTBGQlpTeERRVUZCTzBsQlEzQkRMRTFCUVUwc1pVRkJXU3h4UWtGQlFTeERRVUZITEVsQlFVa3NSVUZCUVN4clFrRkJRU3hEUVVGdFFpeERRVUZCTzBsQlF6VkRMRTlCUVU4N1RVRkJSU3hSUVVGUk8wMUJRVVVzV1VGQlFUdExRVUZqTEVOQlFVRTdSMEZEYmtNN096czdPenM3T3pzN1JVRlZRU3cyUWtGQk5rSXNSMEZCY1VJN1NVRkRhRVFzVFVGQlRUczdTMEZCVVN4SFFVRkhMRWxCUVVrc1RVRkJUU3hUUVVGVExFVkJRVVVzWlVGQlpTeERRVUZCT3pzN1NVRkhja1FzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1UwRkJVeXhGUVVGRk8wMUJRelZDTEU5QlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk8wdEJRMjVDTzBsQlJVRXNUVUZCVFRzN1MwRkJXU3hIUVVGSExFbEJRVWtzTWtKQlFUSkNMRVZCUVVVc1EwRkJRVHRKUVVOMFJDeEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPenM3TzAxQlNXSXNUMEZCVHl4TFFVRkxMRU5CUVVFN1MwRkRaRHRKUVVWQkxFMUJRVTBzYTBKQlFXdENMRTFCUVVFc2MwSkJRVUVzUTBGQlRTeEpRVUZKTEVWQlFVRXNPRUpCUVVFc1JVRkJRU3dyUWtGQlFTeERRVUZCTEV0QlFVRXNRMEZCU2l4SlFVRkpMRVZCUVdkRExGRkJRVkVzUTBGQlF5eERRVUZCTzBsQlF6TkZMRTFCUVUwN08wdEJRV3RDTEVkQlFVY3NTVUZCU1N4TlFVRk5MRk5CUVZNc1JVRkJSU3hEUVVGQk8wbEJRMmhFTEVsQlFVa3NUVUZCVFN4WlFVRlpMRU5CUVVNN1RVRkRja0lzWjBKQlFXZENPMUZCUTJRc1IwRkJSeXhqUVVGak8xRkJRMnBDTEUxQlFVMDdWVUZEU2l4SFFVRkhMR05CUVdNc1MwRkJTenRWUVVOMFFpeE5RVUZOTEdWQlFVRTdVMEZEVWp0UFFVTkdPMHRCUTBRc1EwRkJReXhEUVVGQk8wbEJRMFlzVDBGQlR5eGxRVUZsTEVOQlFVRTdSMEZEZUVJN096czdPenM3T3pzN096czdSVUZoUVN4dFFrRkJiVUlzUjBGQmEwSTdTVUZEYmtNc1RVRkJUVHM3TzB0QlFXbENMRWRCUVVjc1NVRkJTU3hOUVVGTkxGTkJRVk1zUlVGQlJTeGxRVUZsTEVOQlFVRTdTVUZET1VRc1RVRkJUVHM3UzBGQldTeEhRVUZITEVsQlFVa3NNa0pCUVRKQ0xFVkJRVVVzUTBGQlFUdEpRVU4wUkN4SlFVRkpMR2xDUVVGcFFpeExRVUZMTEVOQlFVRTdTVUZETVVJc1NVRkJTU3haUVVFMFFpeEpRVUZKTEVOQlFVRTdTVUZEY0VNc1NVRkJTU3hyUWtGQmEwSXNTMEZCU3l4RFFVRkJPMGxCUXpOQ0xFbEJRVWtzWVVGQk5FSXNRMEZCUVR0SlFVVm9ReXhKUVVGSkxGRkJRVkVzUzBGQlN5eEpRVUZKTEVWQlFVVTdUVUZEY2tJc1UwRkJRU3hSUVVGSExFdEJRVXNzUTBGRFRpeHRSVUZEUml4RFFVRkRMRU5CUVVFN1RVRkRSQ3hQUVVGQk8wdEJRMFk3U1VGRlFTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZPMDFCUTFvc1UwRkJRU3hSUVVGSExFdEJRVXNzUTBGRFRpeHJSVUZEUml4RFFVRkRMRU5CUVVFN1RVRkRSQ3h6UWtGQlFTeERRVUZCTEVsQlFVa3NSVUZCUVN4bFFVRkJMRVZCUVVFc1owSkJRVUVzUTBGQlFTeExRVUZCTEVOQlFVb3NTVUZCU1N4RFFVRkJMRU5CUVVFN1RVRkRTaXh6UWtGQlFTeERRVUZCTEVsQlFVa3NSVUZCUVN4dFFrRkJRU3hGUVVGQkxHOUNRVUZCTEVOQlFVRXNTMEZCUVN4RFFVRktMRWxCUVVrc1EwRkJRU3hEUVVGQk8wMUJRMG9zYzBKQlFVRXNRMEZCUVN4SlFVRkpMRVZCUVVFc2IwSkJRVUVzUlVGQlFTeHhRa0ZCUVN4RFFVRkJMRXRCUVVFc1EwRkJTaXhKUVVGSkxFTkJRVUVzUTBGQlFUdE5RVU5LTEU5QlFVRTdTMEZEUmp0SlFVVkJMRTFCUVUwc1YwRkJWeXh2UWtGQmIwSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRKUVVVelF5eE5RVUZOTEZkQlFWY3NUVUZCVFR0TlFVTnlRaXhwUWtGQmFVSXNTVUZCU1N4RFFVRkJPMDFCUTNKQ0xIRkNRVUZCTEVOQlFVRXNTVUZCU1N4RlFVRkJMRlZCUVVFc1EwRkJRU3haUVVGMVFpeERRVU42UWl3d1FrRkJNRUlzYVVKQlFXbENMRVZCUXpORExGRkJRMFlzUTBGQlF5eERRVUZCTzB0QlEwWXNRMEZCUVR0SlFVTkVMSEZDUVVGQkxFTkJRVUVzU1VGQlNTeEZRVUZCTEZWQlFVRXNRMEZCUVN4VlFVRnhRaXhEUVVOMlFpd3dRa0ZCTUVJc2FVSkJRV2xDTEVWQlF6TkRMRkZCUTBZc1EwRkJReXhEUVVGQk8wbEJSVVFzU1VGQlNUdE5RVU5HTEUxQlFVMHNWVUZCVlN4TlFVRk5MRTlCUVU4c1NVRkJTU3hEUVVGRExFTkJRVUVzYzBKQlFVRXNRMEZEYUVNc1NVRkJTU3hGUVVGQkxHRkJRVUVzUlVGQlFTeGpRVUZCTEVOQlFVRXNTMEZCUVN4RFFVRktMRWxCUVVrc1JVRkJaU3hSUVVGUkxFTkJRVUVzUlVGQlFTeHpRa0ZCUVN4RFFVTXpRaXhKUVVGSkxFVkJRVUVzT0VKQlFVRXNSVUZCUVN3clFrRkJRU3hEUVVGQkxFdEJRVUVzUTBGQlNpeEpRVUZKTEVWQlFXZERMRkZCUVZFc1EwRkJRU3hEUVVNM1F5eERRVUZETEVOQlFVRTdUVUZEUml4TlFVRk5MRzlDUVVGdlFpeFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1RVRkRjRU1zV1VGQldTeG5Ra0ZCWjBJc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkJPMDFCUXk5RExHdENRVUZyUWl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3VFVGRE5VSXNaMEpCUVdkQ0xGRkJRVUVzWTBGQllTeFZRVUZWTEVOQlFVRTdTMEZEZUVNc1EwRkJReXhqUVVGak8wMUJRMlFzU1VGQlNTeGxRVUZsTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1VVRkRNVUlzU1VGQlNTeFpRVUZaTEVOQlFVRTdVVUZEYUVJc1NVRkJTU3hSUVVGUkxFbEJRVWtzUTBGQlFTeERRVUZCTEVWQlFVRXNUVUZCUVN4dFFrRkJhMElzUlVGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlR0VlFVTjZReXhKUVVGSk8xbEJRMFlzWlVGQlpTeEpRVUZKTEUxQlFVMHNRMEZCUXl4TFFVRkxMRkZCUVZFc1EwRkJReXhEUVVGQk8xZEJRM3BETEVOQlFVTXNUVUZCVFRzN1YwRkRUanRUUVVWS08xRkJSVUVzU1VGRFJTeERRVUZCTEVOQlFVRXNSVUZCUVN4TlFVRkJMR05CUVdFc1JVRkJReXhaUVVGWkxFTkJRVU1zU1VGRE0wSXNXVUZCV1N4TlFVRk5MRXRCUVVzc1VVRkJRU3h0UWtGQmEwSXNSVUZEZWtNN1ZVRkRRU3huUWtGQlowSXNVVUZCUVN4alFVRmhMRkZCUVZFc1EwRkJRVHRUUVVOMFF5eE5RVUZOTEVsQlFVa3NTMEZCU3l4TFFVRkxMRXRCUVVzc1lVRkJRU3hYUVVGVkxFbEJRVWtzVTBGQlV5eEZRVUZGTzFWQlEycEVMR2RDUVVGblFpeFJRVUZCTEdOQlFXRXNVVUZCVVN4RFFVRkJPMU5CUTNSRExFMUJRVTA3VlVGRFRDeG5Ra0ZCWjBJc1VVRkJRU3hqUVVGaExGbEJRVmtzUTBGQlFUdFRRVU16UXp0UFFVTkVMRTFCUVUwN1VVRkRUQ3hUUVVGQkxGRkJRVWNzUzBGQlN5eERRVU5PTEhkRVFVRjNSQ3hGUVVONFJDeExRVU5HTEVOQlFVTXNRMEZCUVR0UlFVTkVMR2RDUVVGblFpeFJRVUZCTEdOQlFXRXNVVUZCVVN4RFFVRkJPMDlCUTNaRE8wdEJRMFk3U1VGRlFTeEpRVUZKTEdOQlFXTXNSVUZCUlRzN08wMUJSMnhDTEU5QlFVRTdTMEZEUmp0SlFVTkJMSEZDUVVGQkxFTkJRVUVzU1VGQlNTeEZRVUZCTEZWQlFVRXNRMEZCUVN4WlFVRjFRaXhEUVVONlFpd3dRa0ZCTUVJc2FVSkJRV2xDTEVWQlF6TkRMRkZCUTBZc1EwRkJReXhEUVVGQk8wbEJSVVFzU1VGQlNTeE5RVUZOTEZsQlFWa3NRMEZCUXp0TlFVTnlRaXhoUVVGQk8wdEJRMFFzUTBGQlF5eERRVUZCTzBsQlJVWXNTVUZCU1N4aFFVRmhMRXRCUVVzc1VVRkJRU3hqUVVGaExGVkJRVlVzUlVGQlJUdE5RVU0zUXl4TlFVRk5PenRQUVVGclFpeEhRVUZITEVsQlFVa3NUVUZCVFN4VFFVRlRMRVZCUVVVc1EwRkJRVHROUVVOb1JDeEpRVUZKTEUxQlFVMHNXVUZCV1N4RFFVRkRPMUZCUTNKQ0xGTkJRVk03VVVGRFZDeG5Ra0ZCWjBJN1ZVRkRaQ3hIUVVGSExHTkJRV003VlVGRGFrSXNUVUZCVFR0WlFVTktMRWRCUVVjc1kwRkJZeXhMUVVGTE8xbEJRM1JDTEUxQlFVMHNaVUZCUVR0WFFVTlNPMU5CUTBZN1QwRkRSQ3hEUVVGRExFTkJRVUU3UzBGRFNDeE5RVUZOTzAxQlEwd3NjMEpCUVVFc1EwRkJRU3hKUVVGSkxFVkJRVUVzWlVGQlFTeEZRVUZCTEdkQ1FVRkJMRU5CUVVFc1MwRkJRU3hEUVVGS0xFbEJRVWtzUTBGQlFTeERRVUZCTzAxQlEwb3NjMEpCUVVFc1EwRkJRU3hKUVVGSkxFVkJRVUVzYjBKQlFVRXNSVUZCUVN4eFFrRkJRU3hEUVVGQkxFdEJRVUVzUTBGQlNpeEpRVUZKTEVOQlFVRXNRMEZCUVR0TFFVTk9PMGxCUlVFc1NVRkJTU3hSUVVGUkxFVkJRVVU3VFVGRFdpeEpRVUZKTEdGQlFXRXNTMEZCU3l4UlFVRkJMR05CUVdFc1ZVRkJWU3hGUVVGRk8xRkJRemRETEhGQ1FVRkJMRU5CUVVFc1NVRkJTU3hGUVVGQkxGVkJRVUVzUTBGQlFTeFJRVUZ0UWl4RFFVRkRMREJDUVVFd1FpeHJRa0ZCYTBJc1EwRkJReXhEUVVGQk8wOUJRM1JGTEUxQlFVMHNTVUZCU1N4aFFVRmhMRXRCUVVzc1VVRkJRU3hqUVVGaExGRkJRVkVzUlVGQlJUdFJRVU5zUkN4eFFrRkJRU3hEUVVGQkxFbEJRVWtzUlVGQlFTeFZRVUZCTEVOQlFVRXNVVUZCYlVJc1EwRkJReXd3UWtGQk1FSXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlFUdFBRVU55UlR0TFFVTkVMRTFCUVUwN096czdUVUZKVEN4eFFrRkJRU3hEUVVGQkxFbEJRVWtzUlVGQlFTeFZRVUZCTEVOQlFVRXNVVUZCYlVJc1EwRkJReXd3UWtGQk1FSXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlFUdExRVU4yUlR0SFFVTkdPenM3T3pzN096czdPMFZCVlVFc2MwSkJRWE5DTEhsQ1FVRnBSRHRKUVVOeVJTeE5RVUZOTEdkQ1FVTktMRWxCUVVrc1RVRkJUU3hUUVVGVExFVkJRVVVzYzBKQlFYTkNMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNRMEZCUVR0SlFVVnlSU3hKUVVGSkxFTkJRVU1zWVVGQllTeEZRVUZGTzAxQlEyeENMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRMW9zUTBGQlFTeDFRa0ZCUVN4RlFVRjVRaXh6UWtGQmRVSXNRMEZCUVN4cFJFRkJRU3hEUVVOdVJDeERRVUZETEVOQlFVRTdTMEZEU0R0SlFVVkJMRTFCUVVFc2MwSkJRVUVzUTBGQlRTeEpRVUZKTEVWQlFVRXNhMEpCUVVFc1JVRkJRU3h0UWtGQlFTeERRVUZCTEV0QlFVRXNRMEZCU2l4SlFVRkpMRVZCUVc5Q08wMUJRelZDTEUxQlFVMHNVVUZCUVN4alFVRmhMRWxCUVVrN1RVRkRka0lzUjBGQlJ5eGhRVUZCTzB0QlEwb3NRMEZCUXl4RFFVRkJPMGxCUlVZc1QwRkJUeXhoUVVGaExFOUJRVThzUTBGQlFUdEhRVU0zUWpzN096czdPenM3TzBWQlUwRXNjVUpCUVhGQ0xFOUJRV1U3U1VGRGJFTXNUMEZCUVN4UFFVRk5MR1ZCUVdVc1EwRkRia0lzU1VGQlNTeEZRVU5LTEZGQlFVRXNZMEZCWVN4SlFVRkpMRVZCUTJoQ0xFTkJRVUVzTmtSQlFVRXNSVUZCSzBRc1VVRkJRU3hqUVVGaExFbEJRVXNzUTBGQlFTeDVRa0ZCUVN4RFFVTndSaXhEUVVGRExFTkJRVUU3U1VGRFJDeFBRVUZCTEU5QlFVMHNSMEZCUnl4RFFVTlFMRzlDUVVGdlFpeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVTjZRaXhEUVVGQkxEaENRVUZCTEVWQlFXZERMRWxCUVVzc1EwRkJRU3hGUVVGQkxFTkJRM2hETEVOQlFVTXNRMEZCUVR0SlFVTkVMRTFCUVUwc1ZVRkJWU3hSUVVGQkxIbENRVUYzUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk8wbEJRemxETEUxQlFVRXNjMEpCUVVFc1EwRkJUU3hKUVVGSkxFVkJRVUVzYTBKQlFVRXNSVUZCUVN4dFFrRkJRU3hEUVVGQkxFdEJRVUVzUTBGQlNpeEpRVUZKTEVWQlFXOUNPMDFCUXpWQ0xFbEJRVWs3VFVGRFNpeFJRVUZSTEZOQlFWTTdUVUZEYWtJc1UwRkJVeXhQUVVGUExGRkJRVkU3VFVGRGVFSXNVVUZCVVN4UlFVRlJMRWxCUVVrc1QwRkJUeXhIUVVGSExFOUJRVThzVDBGQlR5eEhRVUZITEV0QlFVczdUVUZEY0VRc1ZVRkJWU3hUUVVGVE8wMUJRMjVDTEZWQlFWVTdVVUZCUlN4clFrRkJhMElzVDBGQlR5eHBRa0ZCUXp0UFFVRnBRanRMUVVONFJDeERRVUZETEVOQlFVRTdSMEZEU2pzN096czdSVUZMUVN4eFFrRkJjVUlzUjBGQlJ6dEpRVU4wUWl4TlFVRkJMSE5DUVVGQkxFTkJRVTBzU1VGQlNTeEZRVUZCTEd0Q1FVRkJMRVZCUVVFc2JVSkJRVUVzUTBGQlFTeExRVUZCTEVOQlFVb3NTVUZCU1N4RlFVRnZRaXhKUVVGSkxFMUJRVTBzVTBGQlV5eEZRVUZGTEdWQlFXVXNRMEZCUXl4RFFVRkJPMGRCUTNKRk96czdPenM3TzBWQlQwRXNaME5CUVdkRExFZEJRVWM3U1VGRGFrTXNUVUZCVFN4VFFVRk5MSEZDUVVGQkxFTkJRVWNzU1VGQlNTeEZRVUZCTEhWQ1FVRkJMRU5CUVhkQ0xFTkJRVUU3U1VGRE0wTXNTVUZCU1N4TlFVRk5MRmxCUVZrc1EwRkJRenROUVVOeVFpeG5Ra0ZCWjBJc1RVRkJRVHRMUVVOcVFpeERRVUZETEVOQlFVRTdTVUZEUml4TlFVRkJMSE5DUVVGQkxFTkJRVTBzU1VGQlNTeEZRVUZCTEdOQlFVRXNSVUZCUVN4bFFVRkJMRU5CUVVFc1MwRkJRU3hEUVVGS0xFbEJRVWtzUlVGQlowSXNUVUZCVFN4RFFVRkRMRU5CUVVFN1IwRkRia003T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wVkJNRkZCTEdkRFFVRm5ReXhEUVVNNVFqczdPenM3TzBkQlRXMURMRVZCUTI1RE8wbEJRMFVzV1VGQldTeExRVUZMT3pzN1IwRlBiRUlzUlVGRFowTTdTVUZCUVN4SlFVRkJMRzFDUVVGQkxFTkJRVUU3U1VGRGFrTXNUMEZCUVN4UFFVRk5MRWRCUVVjc1EwRkRVQ3hEUVVGQkxFTkJRVUVzUlVGQlFTeFRRVUZCTERaQ1FVRTBRaXhGUVVGRExFOUJRVThzUTBGQlF5eEZRVU53UXl4RFFVRkJMR3RDUVVGQkxFVkJRVzlDTEU5QlFWRXNRMEZCUVN4elFrRkJRU3hEUVVNdlFpeERRVUZETEVOQlFVRTdTVUZEUkN4UFFVRkJMRTlCUVUwc1IwRkJSeXhEUVVOUUxFTkJRVUVzUTBGQlFTeEZRVUZCTEZOQlFVRXNZMEZCWVN4RlFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNSVUZEYmtNc1EwRkJRU3hyUWtGQlFTeEZRVUZ2UWl4UFFVRlJMRU5CUVVFc0swTkJRVUVzUTBGREwwSXNRMEZCUXl4RFFVRkJPMGxCUlVRc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJUdE5RVU5ZTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUTJJc09FUkJRMFlzUTBGQlF5eERRVUZCTzB0QlEwZzdTVUZGUVN4SlFVRkpMRU5CUVVNc1VVRkJVU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTzAxQlEzaENMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRMklzTWtaQlEwWXNRMEZCUXl4RFFVRkJPMHRCUTBnN1NVRkZRU3hKUVVGSk96dE5RVVZHTEVsQlFVa3NSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGQk8wdEJRMmhDTEVOQlFVTXNWVUZCVlR0TlFVTldMRWxCUVVrc1EwRkJRU3hEUVVGQkxFVkJRVUVzVFVGQlFTeHRRa0ZCYTBJc1JVRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNVMEZCVXl4RFFVRkRMR0ZCUVdFc1EwRkJReXhGUVVGRk8xRkJRemxFTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc05FSkJRVFJDTEVOQlFVTXNRMEZCUVR0UFFVTXZRenRMUVVOR08wbEJSVUVzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlR0TlFVTllMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRMklzTkVSQlEwWXNRMEZCUXl4RFFVRkJPMHRCUTBnN1NVRkZRU3hOUVVGTk96dExRVUY1UWl4SFFVRkhMRWxCUVVrc1RVRkJUU3hUUVVGVExFVkJRVVVzUTBGQlFUdEpRVU4yUkN4TlFVRk5MREJDUVVFd1FqdE5RVU01UWl4TlFVRk5PMDFCUTA0c1QwRkJUenROUVVOUUxFMUJRVTA3VFVGRFRpeFJRVUZSTzAxQlExSXNVVUZCUVR0TFFVTkVMRU5CUVVFN1NVRkZSQ3hOUVVGTkxEUkNRVUY1UWl4RFFVRkJMSE5DUVVGSExFMUJRVTBzVDBGQlR5eERRVUZETEhGQ1FVRnhRaXhEUVVGRExFdEJRVXNzUTBGRGVFVXNkMEpCUVc5Q08wMUJRVUVzU1VGQlFTeHhRa0ZCUVN4RFFVRkJPMDFCUVVFc1QwRkRia0lzUTBGQlFTeERRVUZCTEhkQ1FVRkJMRzlDUVVGdlFpeFBRVUZQTEUxQlFVRXNTVUZCUVN4SlFVRkJMSEZDUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVROQ0xIRkNRVUZCTEZsQlFYZERMRVZCUVVVc1QwRkJTeXhOUVVGTkxFdEJRVUVzU1VGQlFTeEpRVUZPTEUxQlFVMHNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlRpeE5RVUZOTEZsQlFXRXNSVUZCUlN4RFFVRkJMRU5CUVVFN1MwRkRlRVVzUTBGQlF5eE5RVUZCTEVsQlFVRXNTVUZCUVN4dFFrRkJRU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVaHBReXh0UWtGQlFTeEhRVWMzUWl4RFFVRkJPMGxCUlV3c1RVRkJUU3cwUWtGQk5FSXNlVUpCUVhsQ0xFbEJRVWtzUTBGQlFTeERRVUZCTEVWQlFVRXNTMEZCUVN4SFFVRkpMRWRCUVVVc1EwRkJRVHRKUVVOeVJTeEpRVUZKTEUxQlFVMHNXVUZCV1N4RFFVRkRPMDFCUTNKQ0xIVkNRVUYxUWp0UlFVTnlRaXhIUVVGSExIRkNRVUZ4UWp0UlFVTjRRaXhEUVVGRExIbENRVUY1UWl4SFFVRkhPMVZCUXpOQ0xFZEJRVWNzZFVKQlFYVkNPMVZCUXpGQ0xFbEJRVWtzZVVKQlFVRTdVMEZEVGp0UFFVTkdPMHRCUTBRc1EwRkJReXhEUVVGQk8wbEJSVVlzU1VGQlNTeERRVUZETEhsQ1FVRjVRaXhGUVVGRk8wMUJRemxDTEhGQ1FVRkJMRU5CUVVFc1NVRkJTU3hGUVVGQkxITkNRVUZCTEVOQlFVRXNTMEZCUVN4RFFVRktMRWxCUVVrc1JVRkJkMEk3VVVGRE1VSXNUMEZCVHl4elFrRkJjMEk3VVVGRE4wSXNWVUZCVlN4WlFVRkJMSGxDUVVGM1FpeFJRVUZSTzFGQlF6RkRMRlZCUVZVN1ZVRkRVaXhMUVVGTExGRkJRVUU3VTBGRFRqdFJRVU5FTEZsQlFWazdWVUZEVml4VlFVRlZMRTlCUVU4N1ZVRkRha0lzVVVGQlVTeE5RVUZOTzFWQlEyUXNUVUZCUVR0VFFVTkdPMDlCUTBRc1EwRkJRU3hEUVVGQk8wdEJRMGc3U1VGRlFTeEpRVUZKTEZOQlFWTXNSVUZCUlR0TlFVTmlMRTFCUVUwc1NVRkJTU3hwUWtGQmFVSXNRMEZCUXl4NVFrRkJlVUlzUTBGQlF5eERRVUZCTzB0QlEzaEVPMGxCUlVFc1QwRkJUeXg1UWtGQmVVSXNRMEZCUVR0SFFVTnNRenM3T3pzN096czdSVUZSUVN3d1FrRkJNRUlzZVVKQlFXbEVPMGxCUTNwRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEUxQlFVMHNVMEZCVXl4RlFVRkZMSE5DUVVGelFpeERRVUZETEhOQ1FVRnpRaXhEUVVGRExFVkJRVVU3VFVGRGVFVXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkRXaXhEUVVGQkxIVkNRVUZCTEVWQlFYbENMSE5DUVVGMVFpeERRVUZCTEdsRVFVRkJMRU5CUTI1RUxFTkJRVU1zUTBGQlFUdExRVU5JTzBsQlEwRXNUVUZCVFN4M1FrRkJkMEk3VFVGRE5VSXNSMEZCUnl4SlFVRkpMRTFCUVUwc1UwRkJVeXhGUVVGRkxITkNRVUZETzB0QlF6RkNMRU5CUVVFN1NVRkRSQ3hQUVVGUExIRkNRVUZ4UWl4RFFVRkRMSE5DUVVGelFpeERRVUZETEVOQlFVRTdTVUZEY0VRc1NVRkJTU3hOUVVGTkxGbEJRVmtzUTBGQlF6dE5RVU55UWl4eFFrRkJRVHRMUVVORUxFTkJRVU1zUTBGQlFUdEhRVU5LTzBOQlEwWTdRVUZCUXl4UFFVRkJMR3RDUVVGQkxFZEJRVUVzYVVKQlFVRXNRMEZCUVR0QlFVRkJMRzlEUVRGWU5FVTdSVUZEZWtVc1QwRkJUeXhKUVVGSkxFOUJRVThzUTBGQlF5eHhRa0ZCY1VJN1NVRkRkRU1zVFVGQlRTeFhRVUZYTEVsQlFVa3NVMEZCUVN4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVUU3U1VGRGRrTXNVVUZCVVN4VlFVRlZMRU5CUTJoQ08wMUJRVVVzVVVGQlVTeHpRa0ZCYzBJN1RVRkJSU3hSUVVGUkxFTkJRVU1zVVVGQlVTeEZRVUZGTEV0QlFVc3NRMEZCUVR0TFFVRkhMRVZCUXpkRUxFTkJRVU1zVDBGQlR5eExRVUZMTzAxQlExZ3NTVUZCU1N4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzU1VGQlNTeEZRVUZGTzFGQlEzQkNMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0UFFVTnFRaXhOUVVGTk8xRkJRMHdzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8wOUJRMnBDTzB0QlJVb3NRMEZCUXl4RFFVRkJPMGRCUTBZc1EwRkJReXhEUVVGQk8wTkJRMG83UVVGQlF5eDNRMEZUZDBVN1JVRkRka1VzVFVGQlRTeFhRVUZYTEVsQlFVa3NVMEZCUVN4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVUU3UlVGRGRrTXNUMEZCVHl4TlFVRk5MRWxCUVVrc1QwRkJUeXhEUVVGRExIRkNRVUZ4UWp0SlFVTTFReXhSUVVGUkxGVkJRVlVzUTBGRGFFSTdUVUZCUlN4UlFVRlJMR0ZCUVVFN1MwRkJaU3hGUVVONlFpeERRVUZETEU5QlFVOHNTMEZCU3p0TlFVTllMRWxCUVVrc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVsQlFVa3NSVUZCUlR0UlFVTndRaXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1QwRkRha0lzVFVGQlRUdFJRVU5NTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdFBRVU5xUWp0TFFVVktMRU5CUVVNc1EwRkJRVHRIUVVOR0xFTkJRVU1zUTBGQlFUdERRVU5LTzBGQlFVTXNORUpCUzNWQ08wVkJRM1JDTEVsQlFVa3NUVUZCVFN4WlFVRlpMRU5CUVVNN1NVRkRja0lzVjBGQlZ5d3dRa0ZCTUVJc1JVRkJRenRIUVVOMlF5eERRVUZETEVOQlFVRTdRMEZEU2p0QlFVRkRMR2REUVVzeVFqdEZRVU14UWl4SlFVRkpMRTFCUVUwc1dVRkJXU3hEUVVGRE8wbEJRM0pDTEdWQlFXVXNPRUpCUVRoQ0xFVkJRVU03UjBGREwwTXNRMEZCUXl4RFFVRkJPME5CUTBvN1FVRkJReXhwUTBGTE5FSTdSVUZETTBJc1NVRkJTU3hOUVVGTkxGbEJRVmtzUTBGQlF6dEpRVU55UWl4blFrRkJaMElzSzBKQlFTdENMRVZCUVVNN1IwRkRha1FzUTBGQlF5eERRVUZCTzBOQlEwbzdRVUZCUXl4dFJFRlJLMFE3UlVGRE9VUXNjVUpCUVVFc1EwRkJRU3hKUVVGSkxFVkJRVUVzZFVKQlFVRXNSVUZCTWtJc1NVRkJTU3hOUVVGTkxGTkJRVk1zUlVGQlJTeGxRVUZsTEVOQlFVRXNRMEZCUVR0RlFVTnVSU3hKUVVGSkxFMUJRVTBzV1VGQldTeERRVUZETzBsQlFVVXNZMEZCUVR0SFFVRm5RaXhEUVVGRExFTkJRVUU3UlVGRE1VTXNUVUZCUVN4elFrRkJRU3hEUVVGTkxFbEJRVWtzUlVGQlFTeGpRVUZCTEVWQlFVRXNaVUZCUVN4RFFVRkJMRXRCUVVFc1EwRkJTaXhKUVVGSkxFVkJRV2RDTEdOQlFXTXNRMEZCUXl4RFFVRkJPME5CUXpORE8wRkJRVU1zZVVSQllXMUNPMFZCUTJ4Q0xFMUJRVTBzWTBGQll5eE5RVUZCTEhOQ1FVRkJMRU5CUVUwc1NVRkJTU3hGUVVGQkxHVkJRVUVzUlVGQlFTeG5Ra0ZCUVN4RFFVRkJMRXRCUVVFc1EwRkJTaXhKUVVGSkxFVkJRV2xDTEZGQlFWRXNRMEZCUXl4RFFVRkJPMFZCUTNoRUxFOUJRVThzUTBGQlFTeFhRVUZYTEV0QlFVRXNTVUZCUVN4SlFVRllMRmRCUVZjc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCV0N4WFFVRlhMR05CUVdVc1RVRkJTeXhUUVVGVExFTkJRVUU3UTBGRGFrUTdRVUZCUXl3clEwRmpNa1E3UlVGRE1VUXNjVUpCUVVFc1EwRkJRU3hKUVVGSkxFVkJRVUVzVlVGQlFTeERRVUZCTEZGQlFXMUNMRU5CUVVNc01FSkJRVEJDTEd0Q1FVRnJRaXhEUVVGRExFTkJRVUU3UlVGRGNrVXNjMEpCUVVFc1EwRkJRU3hKUVVGSkxFVkJRVUVzWlVGQlFTeEZRVUZCTEdkQ1FVRkJMRU5CUVVFc1MwRkJRU3hEUVVGS0xFbEJRVWtzUTBGQlFTeERRVUZCTzBWQlEwb3NjMEpCUVVFc1EwRkJRU3hKUVVGSkxFVkJRVUVzYlVKQlFVRXNSVUZCUVN4dlFrRkJRU3hEUVVGQkxFdEJRVUVzUTBGQlNpeEpRVUZKTEVOQlFVRXNRMEZCUVR0RlFVTktMSE5DUVVGQkxFTkJRVUVzU1VGQlNTeEZRVUZCTEc5Q1FVRkJMRVZCUVVFc2NVSkJRVUVzUTBGQlFTeExRVUZCTEVOQlFVb3NTVUZCU1N4RFFVRkJMRU5CUVVFN1JVRkRTaXh6UWtGQlFTeERRVUZCTEVsQlFVa3NSVUZCUVN4clFrRkJRU3hGUVVGQkxHMUNRVUZCTEVOQlFVRXNTMEZCUVN4RFFVRktMRWxCUVVrc1JVRkJiMElzWTBGQll5eERRVUZCTEVOQlFVRTdSVUZEZEVNc2NVSkJRVUVzUTBGQlFTeEpRVUZKTEVWQlFVRXNWVUZCUVN4RFFVRkJMRkZCUVcxQ0xFTkJRVU1zTUVKQlFUQkNMR2xDUVVGcFFpeERRVUZETEVOQlFVRTdSVUZEY0VVc1RVRkJUU3hKUVVGSkxHTkJRV01zUlVGQlJTeERRVUZCTzBOQlF6VkNPMEZCUVVNc05rSkJaMEpyUWpzN096dERRVUZuUkN4RlFVRlJPMFZCUTNwRkxFMUJRVTBzVjBGQlZ5eHZRa0ZCYjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlFUdEZRVU16UXl4SlFVRkpMRkZCUVZFc1JVRkJSVHM3U1VGRldpeHpRa0ZCUVN4RFFVRkJMRWxCUVVrc1JVRkJRU3gzUWtGQlFTeEZRVUZCTEhsQ1FVRkJMRU5CUVVFc1MwRkJRU3hEUVVGS0xFbEJRVWtzUlVGQk1FSTdUVUZETlVJc1NVRkJTVHROUVVOS0xHbENRVUZsTEhGQ1FVRkJMRU5CUVVVc1NVRkJTU3hGUVVGQkxHZENRVUZCTEVOQlFVRTdTMEZEZEVJc1EwRkJRU3hEUVVGQk8wZEJRMFlzVFVGQlRTeEpRVUZKTEVsQlFVa3NTMEZCU3l4UlFVRkJMR05CUVdFc1NVRkJTU3hKUVVGSkxFMUJRVTBzUlVGQlJUczdTVUZGTDBNc2MwSkJRVUVzUTBGQlFTeEpRVUZKTEVWQlFVRXNNRUpCUVVFc1JVRkJRU3d5UWtGQlFTeERRVUZCTEV0QlFVRXNRMEZCU2l4SlFVRkpMRVZCUVRSQ0xFMUJRVTBzUlVGQlJTeFBRVUZQTEVOQlFVRXNRMEZCUVR0SFFVTm9SQ3hOUVVGTk8wbEJRMHdzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZEV2l4RFFVRkJMSFZFUVVGQkxFVkJRWGxFTEVsQlFVc3NRMEZCUVN4RFFVRkJMRU5CUTJwRkxFTkJRVU1zUTBGQlFUdEhRVU5JTzBOQlEwWTdRVUZCUXl4dFEwRlpkMEk3T3p0RFFVMTRRaXhGUVVGUk8wVkJRMUFzVTBGQlFTeFJRVUZITEV0QlFVc3NRMEZCUXl3NFEwRkJPRU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUVR0RlFVTTVSQ3hOUVVGTk96czdSMEZCTUVJc1IwRkJSeXhEUVVGQkxFTkJRVUVzUlVGQlFTeHZRa0ZCUVN4dlFrRkJiVUlzUlVGQlF6dEpRVU55UkN4VFFVRlRMRWxCUVVrN1NVRkRZaXhsUVVGbE8wbEJRMllzVFVGQlRTeHZRa0ZCUVN4clFrRkJhVUlzVDBGQlF6dEhRVU42UWl4RFFVRkRMRU5CUVVFN1JVRkRSaXh6UWtGQlFTeERRVUZCTEVsQlFVa3NSVUZCUVN3eVFrRkJRU3hGUVVGQkxEUkNRVUZCTEVOQlFVRXNTMEZCUVN4RFFVRktMRWxCUVVrc1JVRkJOa0k3U1VGQlJTeFJRVUZSTzBsQlFVVXNXVUZCUVR0SFFVRmpMRU5CUVVFc1EwRkJRVHREUVVNM1JEdEJRVUZETEhORVFWTnJSVHRGUVVOcVJTeFRRVUZCTEZGQlFVY3NTMEZCU3l4RFFVRkRMR2RFUVVGblJDeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkJPMFZCUTJ4RkxFMUJRVTA3T3p0SFFVRXdRaXhIUVVGSExFTkJRVUVzUTBGQlFTeEZRVUZCTEc5Q1FVRkJMRzlDUVVGdFFpeEZRVUZETzBsQlEzSkVMRTlCUVU4N1NVRkRVQ3hOUVVGTk8wbEJRMDRzVFVGQlRTeHZRa0ZCUVN4clFrRkJhVUlzVDBGQlF6dEhRVU42UWl4RFFVRkRMRU5CUVVFN1JVRkRSaXh6UWtGQlFTeERRVUZCTEVsQlFVa3NSVUZCUVN3eVFrRkJRU3hGUVVGQkxEUkNRVUZCTEVOQlFVRXNTMEZCUVN4RFFVRktMRWxCUVVrc1JVRkJOa0k3U1VGQlJTeFJRVUZSTzBsQlFVVXNXVUZCUVR0SFFVRmpMRU5CUVVFc1EwRkJRVHREUVVNM1JEdEJRVUZETEhORFFWY3lRanM3TzBOQlRUTkNMRVZCUVZFN08wVkJSVkFzU1VGQlFTeHhRa0ZCUVN4RFFVRkpMRWxCUVVrc1JVRkJRU3hqUVVGQkxFTkJRVUVzUlVGQmFVSTdTVUZEZGtJc2NVSkJRVUVzUTBGQlFTeEpRVUZKTEVWQlFVRXNZMEZCUVN4RFFVRkJMRlZCUVhsQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVRTdSMEZEZUVNc1RVRkJUVHRKUVVOTUxIRkNRVUZCTEVOQlFVRXNTVUZCU1N4RlFVRkJMR05CUVVFc1JVRkJhMElzUTBGQlFTeERRVUZCTEVWQlFVRXNhMEpCUVVFc2NVSkJRVzlDTEVWQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVFc1EwRkJRVHRIUVVOMFJEdEZRVU5CTEVsQlFVRXNjVUpCUVVFc1EwRkJTU3hKUVVGSkxFVkJRVUVzYTBKQlFVRXNRMEZCUVN4RlFVRnhRanRKUVVNelFpeHhRa0ZCUVN4RFFVRkJMRWxCUVVrc1JVRkJRU3hyUWtGQlFTeERRVUZCTEZWQlFUWkNMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVUU3UjBGRGFFUXNUVUZCVFR0SlFVTk1MSEZDUVVGQkxFTkJRVUVzU1VGQlNTeEZRVUZCTEd0Q1FVRkJMRVZCUVhOQ0xFTkJRVUVzUTBGQlFTeEZRVUZCTEd0Q1FVRkJMSGRDUVVGMVFpeEZRVUZETEZsQlFWa3NSVUZCUlR0TlFVTTVSQ3hoUVVGaExHTkJRVUU3UzBGRFpDeERRVUZETEVOQlFVRXNRMEZCUVR0SFFVTktPenRGUVVWQkxIRkNRVUZCTEVOQlFVRXNTVUZCU1N4RlFVRkJMRk5CUVVFc1JVRkJZU3hSUVVGUkxFTkJRVUVzUTBGQlFUdEZRVU42UWl4eFFrRkJRU3hEUVVGQkxFbEJRVWtzUlVGQlFTeGhRVUZCTEVWQlFXbENMRmxCUVZrc1EwRkJRU3hEUVVGQk8wTkJRMjVET3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnNMMEpHTEVsQlFVRXNVMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGTkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJNa0lzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeG5Ra0ZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxFdEJRVUVzU1VGQlFTeEhRVUZCTEVkQlFVRXNZMEZCUVN4RFFVRkJMRWRCUVVFc1QwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzU1VGQlFTeExRVUZCTEVWQlFVRXNTMEZCUVN4RlFVRkJMRlZCUVVFc1VVRkJRU3haUVVGQkxGRkJRVUVzVVVGQlFTeHZRa0ZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFdEJRVUVzVjBGQlFTeEhRVUZCTzBGQlFVRXNVMEZCUVN4bFFVRkJMRWRCUVVFc1VVRkJRU3hIUVVGQkxFZEJRVUVzV1VGQlFTeERRVUZCTEVkQlFVRXNNa0pCUVVFc1IwRkJRU3huUWtGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMRWRCUVVFN1FVRkJRU3hUUVVGQkxHRkJRVUVzUzBGQlFTeEZRVUZCTEVsQlFVRXNaVUZCUVN4TFFVRkJMR2xDUVVGQkxFdEJRVUVzYTBKQlFVRXNTMEZCUVN4TlFVRkJMRWxCUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzVFVGQlFTeERRVUZCTEZkQlFVRXNUMEZCUVN4SlFVRkJMRXRCUVVFc1UwRkJRU3hSUVVGQkxFZEJRVUVzUjBGQlFTeEpRVUZCTEVOQlFVRXNTVUZCUVN4RFFVRkJMRXRCUVVFc1JVRkJRU3hKUVVGQkxESkNRVUZCTEVkQlFVRXNjMEpCUVVFc1IwRkJRU3haUVVGQkxGTkJRVUVzTkVSQlFVRXNTVUZCUVN4blFrRkJRU3hOUVVGQkxFZEJRVUVzVFVGQlFTeEZRVUZCTEV0QlFVRTdRVUZGTTBJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEyVXNUVUZCVFN4dlFrRkJiMElzUTBGQlF6dEZRVU40UXp0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzVjBGQlZ5eERRVUZETEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkJSVHRKUVhkRGRrSTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wbEJURVVzWlVGQlFTdzJRa0ZOY1VJc1QwRkJUeXhSUVVGUkxFVkJRVVVzUzBGQlN5eExRVUZMTzAxQlF6bERMRWxCUVVrc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTzFGQlF6ZERMR2xDUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEhGRVFVRnhSQ3hEUVVGRE8xRkJRMmhGTzAxQlEwWTdUVUZEUVN4TlFVRk5MR05CUVdNc1IwRkJSenRSUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRE8wMUJRV1VzUTBGQlF6dE5RVU5zUlN4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEdOQlFXTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhMUVVGTExFVkJRVVU3VVVGRGJrVXNhVUpCUVVjc1EwRkJReXhMUVVGTExFTkJRMDRzTWtOQlFUQkRMRkZCUVZNc2FVSkJRV2RDTEV0QlFVMHNSMEZETlVVc1EwRkJRenRSUVVORUxHTkJRV01zUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4TFFVRkxPMUZCUTJoRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPMVZCUVVVN1VVRkJaU3hEUVVGRExFTkJRVU03VFVGRE5VTTdTVUZEUml4RFFVRkRPMGxCTVVSRExFMUJRVTBzY1VKQlFYRkNMRWRCUVVjN1RVRkROVUlzWTBGQll5eEZRVUZGTEVOQlFVTTdTVUZEYmtJc1EwRkJRenRKUVVORUxFMUJRVTBzVTBGQlV5eEhRVUZITzAxQlEyaENMR3RDUVVGclFpeEZRVUZGTEVsQlFVazdUVUZEZUVJc2FVSkJRV2xDTEVWQlFVVXNTVUZCU1R0TlFVTjJRaXh0UWtGQmJVSXNSVUZCUlN4TFFVRkxPMDFCUXpGQ0xFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTTdUVUZEYWtJc1IwRkJSenRKUVVOTUxFTkJRVU03U1VGRFJDeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc2VVSkJRV1VzUTBGQlF5eFRRVUZUTEVOQlFVTTdSVUZETjBNN1JVRkZRU3h4UWtGQmNVSXNRMEZCUXl4M1FrRkJkMElzUlVGQlJUdEpRVU01UXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF6dE5RVU55UWl4clFrRkJhMElzUlVGQlJUdEpRVU4wUWl4RFFVRkRMRU5CUVVNN1JVRkRTanM3UlVGRlFUdEZRVU5CTzBWQlEwRTdSVUZEUVR0RlFVTkJMRTFCUVUwc2EwSkJRV3RDTEVOQlFVRXNSVUZCUnp0SlFVTjZRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXp0TlFVTnlRaXh0UWtGQmJVSXNSVUZCUlR0SlFVTjJRaXhEUVVGRExFTkJRVU03U1VGRFJpeFBRVUZQTEVsQlFVazdSVUZEWWpzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNiMEpCUVc5Q0xFTkJRVU1zU1VGQlNTeEZRVUZGTzBsQlEzcENMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETzAxQlFVVXNhVUpCUVdsQ0xFVkJRVVU3U1VGQlN5eERRVUZETEVOQlFVTTdSVUZEY2tRN1FVRnpRa1k3UVVGQlF5eFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRzlDUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRM0JHUkN4SlFVRkJMRTlCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRmxCUVVFc1IwRkJRU3hQUVVGQk8wRkJSMnRFTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUdEJRVVV6UXl4VFFVRlRMR2xEUVVGcFF5eERRVUZETEc5Q1FVRnZRaXhGUVVGRk8wVkJRM1JGTEU5QlFVODdTVUZEVEN4dFFrRkJiVUlzUlVGQlJTeERRVUZETEUxQlFVMHNSVUZCUlN4UFFVRlBMRXRCUVVzN1RVRkRlRU1zVFVGQlRTeFJRVUZSTEVkQlFVY3NiMEpCUVc5Q0xFTkJRVU1zVTBGQlV5eERRVU0zUXl4TlFVRk5MRVZCUTA0c09FSkJRV2xDTEVOQlFVTXNXVUZCV1N4RlFVTTVRaXgzUWtGQlZ5eERRVUZETEhkQ1FVTmtMRU5CUVVNN1RVRkZSQ3hKUVVGSkxGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRk8xRkJRM0JETzAxQlEwWTdUVUZGUVN4dlFrRkJiMElzUTBGQlF5eFpRVUZaTEVOQlF5OUNMRTFCUVUwc1JVRkRUaXc0UWtGQmFVSXNRMEZCUXl4WlFVRlpMRVZCUXpsQ0xIZENRVUZYTEVOQlFVTXNkMEpCUVhkQ0xFVkJRM0JETEVOQlFVTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1MwRkJTeXhGUVVGRkxFOUJRVThzUTBGRE4wSXNRMEZCUXp0SlFVTklMRU5CUVVNN1NVRkZSQ3h6UWtGQmMwSXNSVUZCUlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hQUVVGUExFdEJRVXM3VFVGRE0wTXNUVUZCVFN4UlFVRlJMRWRCUVVjc2IwSkJRVzlDTEVOQlFVTXNVMEZCVXl4RFFVTTNReXhOUVVGTkxFVkJRMDRzT0VKQlFXbENMRU5CUVVNc1dVRkJXU3hGUVVNNVFpeDNRa0ZCVnl4RFFVRkRMSGRDUVVOa0xFTkJRVU03VFVGRlJDeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFVVTdVVUZEY2tNN1RVRkRSanROUVVWQkxFMUJRVTBzYVVKQlFXbENMRWRCUVVjc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlF6VkRMR1ZCUVdVc1NVRkJTeXhsUVVGbExFdEJRVXNzVDBGRE0wTXNRMEZCUXp0TlFVVkVMRWxCUVVrc2FVSkJRV2xDTEVOQlFVTXNUVUZCVFN4TFFVRkxMRU5CUVVNc1JVRkJSVHRSUVVOc1F5eHZRa0ZCYjBJc1EwRkJReXhuUWtGQlowSXNRMEZEYmtNc1RVRkJUU3hGUVVOT0xEaENRVUZwUWl4RFFVRkRMRmxCUTNCQ0xFTkJRVU03VFVGRFNDeERRVUZETEUxQlFVMDdVVUZEVEN4dlFrRkJiMElzUTBGQlF5eFpRVUZaTEVOQlF5OUNMRTFCUVUwc1JVRkRUaXc0UWtGQmFVSXNRMEZCUXl4WlFVRlpMRVZCUXpsQ0xIZENRVUZYTEVOQlFVTXNkMEpCUVhkQ0xFVkJRM0JETEdsQ1FVTkdMRU5CUVVNN1RVRkRTRHRKUVVOR0xFTkJRVU03U1VGRlJDd3JRa0ZCSzBJc1JVRkJSU3hOUVVGUExFMUJRVTBzU1VGQlN6dE5RVU5xUkN4TlFVRk5MRVZCUVVVc1IwRkJSeXhKUVVGQkxHVkJRVTBzUlVGQlF5eERRVUZETzAxQlEyNUNMRzlDUVVGdlFpeERRVUZETEd0Q1FVRnJRaXhEUVVOeVF6dFJRVUZGTzAxQlFVOHNRMEZCUXl4RlFVTldPMUZCUTBVc1dVRkJXU3hGUVVGRkxFTkJRVU03VFVGRGFrSXNRMEZCUXl4RlFVTkVPMUZCUVVVN1RVRkJSeXhEUVVOUUxFTkJRVU03VFVGRFJDeFBRVUZQTEVWQlFVVTdTVUZEV0R0RlFVTkdMRU5CUVVNN1FVRkRTRHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOeVJVRXNTVUZCUVN4eFFrRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZsQlFVRXNSMEZCUVN4UFFVRkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFR5eE5RVUZOTEhOQ1FVRnpRaXhIUVVGSE8wVkJRM0JETEVOQlFVTXNkMEpCUVZjc1EwRkJReXgzUWtGQmQwSXNSMEZCUnp0SlFVTjBRenRGUVVOR08wRkJRMFlzUTBGQlF6czdRVUZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCVmtFc1QwRkJRU3hEUVVGQkxITkNRVUZCTEVkQlFVRXNjMEpCUVVFN1FVRlhRU3hUUVVGVExHRkJRV0VzUTBGQlF5eGhRVUZoTEVWQlFVVXNaMEpCUVdkQ0xFVkJRVVU3UlVGRGRFUXNUVUZCVFN4WFFVRlhMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNUVUZCVFN4RFFVTjRReXhQUVVGUExFbEJRVXNzVDBGQlR5eExRVUZMTEdGQlF6TkNMRU5CUVVNN1JVRkZSQ3hKUVVGSkxGZEJRVmNzUTBGQlF5eE5RVUZOTEV0QlFVc3NaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTzBsQlEyeEVMRTlCUVU4N1RVRkJSU3hUUVVGVExFVkJRVVVzTkVOQlFYTkNMRU5CUVVNN1NVRkJTeXhEUVVGRE8wVkJRMjVFTEVOQlFVTXNUVUZCVFN4SlFVRkpMRmRCUVZjc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTzBsQlEycERMRTlCUVU4N1RVRkRUQ3hUUVVGVExFVkJRVVVzTkVOQlFYTkNMRU5CUVVNc1YwRkJWenROUVVNM1F5eExRVUZMTEVWQlFVVTdTVUZEVkN4RFFVRkRPMFZCUTBnN1JVRkRRU3hQUVVGUE8wbEJRVVVzVTBGQlV5eEZRVUZGTERSRFFVRnpRaXhEUVVGRE8wVkJRV2xDTEVOQlFVTTdRVUZETDBRN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRkRU5QTEUxQlFVMHNZVUZCWVN4SFFVRkhMRk5CUVZNN1FVRkJReXhQUVVGQkxFTkJRVUVzWVVGQlFTeEhRVUZCTEdGQlFVRTdRVUZGYUVNc1RVRkJUU3hyUWtGQmEwSXNSMEZCUnp0RlFVTm9ReXhsUVVGbExFVkJRVVVzTUVKQlFUQkNPMFZCUXpORExHdENRVUZyUWl4RlFVRkZMRFpDUVVFMlFqdEZRVU5xUkN4WlFVRlpMRVZCUVVVN1FVRkRhRUlzUTBGQlF6dEJRVUZETEU5QlFVRXNRMEZCUVN4clFrRkJRU3hIUVVGQkxHdENRVUZCTzBGQlJVc3NUVUZCVFN4clFrRkJhMElzUjBGQlJ5eERRVU5vUXl3eVFrRkJNa0lzUlVGRE0wSXNiVUpCUVcxQ0xFTkJRM0JDTzBGQlFVTXNUMEZCUVN4RFFVRkJMR3RDUVVGQkxFZEJRVUVzYTBKQlFVRTdRVUZGU3l4TlFVRk5MR2RDUVVGblFpeEhRVUZITzBWQlF6bENMRlZCUVZVc1JVRkJSU3haUVVGWk8wVkJRM2hDTEZGQlFWRXNSVUZCUlR0QlFVTmFMRU5CUVVNN08wRkJSVVE3UVVGRFFUdEJRVU5CTzBGQlJrRXNUMEZCUVN4RFFVRkJMR2RDUVVGQkxFZEJRVUVzWjBKQlFVRTdRVUZIVHl4TlFVRk5MRk5CUVZNc1IwRkJSeXhIUVVGSE8wRkJRVU1zVDBGQlFTeERRVUZCTEZOQlFVRXNSMEZCUVN4VFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPMEZEY2tJM1FpeEpRVUZCTEdWQlFVRXNSMEZCUVN4UFFVRkJPMEZCUVVFc1RVRkJRU3hEUVVGQkxFbEJRVUVzUTBGQlFTeGxRVUZCTEVWQlFVRXNUMEZCUVN4WFFVRkJMRWRCUVVFN1JVRkJRU3hKUVVGQkxFZEJRVUVzYTBKQlFVRXNSMEZCUVR0RlFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFOUJRVUVzU1VGQlFTeFBRVUZCTEVOQlFVRXNSMEZCUVN4TlFVRkJMR1ZCUVVFc1EwRkJRU3hIUVVGQk8wVkJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRKUVVGQkxGVkJRVUU3U1VGQlFTeEhRVUZCTEZkQlFVRXNRMEZCUVR0TlFVRkJMRTlCUVVFc1pVRkJRU3hEUVVGQkxFZEJRVUU3U1VGQlFUdEZRVUZCTzBGQlFVRTdRVUZEUVN4SlFVRkJMR05CUVVFc1IwRkJRU3hQUVVGQk8wRkJRVUVzVFVGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4alFVRkJMRVZCUVVFc1QwRkJRU3hYUVVGQkxFZEJRVUU3UlVGQlFTeEpRVUZCTEVkQlFVRXNhMEpCUVVFc1IwRkJRVHRGUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEU5QlFVRXNTVUZCUVN4UFFVRkJMRU5CUVVFc1IwRkJRU3hOUVVGQkxHTkJRVUVzUTBGQlFTeEhRVUZCTzBWQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUdEpRVUZCTEZWQlFVRTdTVUZCUVN4SFFVRkJMRmRCUVVFc1EwRkJRVHROUVVGQkxFOUJRVUVzWTBGQlFTeERRVUZCTEVkQlFVRTdTVUZCUVR0RlFVRkJPMEZCUVVFN1FVRkRRU3hKUVVGQkxFMUJRVUVzUjBGQlFTeFBRVUZCTzBGQlFVRXNUVUZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hOUVVGQkxFVkJRVUVzVDBGQlFTeFhRVUZCTEVkQlFVRTdSVUZCUVN4SlFVRkJMRWRCUVVFc2EwSkJRVUVzUjBGQlFUdEZRVUZCTEVsQlFVRXNSMEZCUVN4SlFVRkJMRTlCUVVFc1NVRkJRU3hQUVVGQkxFTkJRVUVzUjBGQlFTeE5RVUZCTEUxQlFVRXNRMEZCUVN4SFFVRkJPMFZCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0SlFVRkJMRlZCUVVFN1NVRkJRU3hIUVVGQkxGZEJRVUVzUTBGQlFUdE5RVUZCTEU5QlFVRXNUVUZCUVN4RFFVRkJMRWRCUVVFN1NVRkJRVHRGUVVGQk8wRkJRVUU3UVVGRFFTeEpRVUZCTEdOQlFVRXNSMEZCUVN4UFFVRkJPMEZCUVVFc1RVRkJRU3hEUVVGQkxFbEJRVUVzUTBGQlFTeGpRVUZCTEVWQlFVRXNUMEZCUVN4WFFVRkJMRWRCUVVFN1JVRkJRU3hKUVVGQkxFZEJRVUVzYTBKQlFVRXNSMEZCUVR0RlFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFOUJRVUVzU1VGQlFTeFBRVUZCTEVOQlFVRXNSMEZCUVN4TlFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQk8wVkJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRKUVVGQkxGVkJRVUU3U1VGQlFTeEhRVUZCTEZkQlFVRXNRMEZCUVR0TlFVRkJMRTlCUVVFc1kwRkJRU3hEUVVGQkxFZEJRVUU3U1VGQlFUdEZRVUZCTzBGQlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRVUVzVFVGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4bFFVRkJMRVZCUVVFc1QwRkJRU3hYUVVGQkxFZEJRVUU3UlVGQlFTeEpRVUZCTEVkQlFVRXNhMEpCUVVFc1IwRkJRVHRGUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEU5QlFVRXNTVUZCUVN4UFFVRkJMRU5CUVVFc1IwRkJRU3hOUVVGQkxHVkJRVUVzUTBGQlFTeEhRVUZCTzBWQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUdEpRVUZCTEZWQlFVRTdTVUZCUVN4SFFVRkJMRmRCUVVFc1EwRkJRVHROUVVGQkxFOUJRVUVzWlVGQlFTeERRVUZCTEVkQlFVRTdTVUZCUVR0RlFVRkJPMEZCUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzUjBGQlFTeFBRVUZCTzBGQlFVRXNUVUZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hWUVVGQkxFVkJRVUVzVDBGQlFTeFhRVUZCTEVkQlFVRTdSVUZCUVN4SlFVRkJMRWRCUVVFc2EwSkJRVUVzUjBGQlFUdEZRVUZCTEVsQlFVRXNSMEZCUVN4SlFVRkJMRTlCUVVFc1NVRkJRU3hQUVVGQkxFTkJRVUVzUjBGQlFTeE5RVUZCTEZWQlFVRXNRMEZCUVN4SFFVRkJPMFZCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0SlFVRkJMRlZCUVVFN1NVRkJRU3hIUVVGQkxGZEJRVUVzUTBGQlFUdE5RVUZCTEU5QlFVRXNWVUZCUVN4RFFVRkJMRWRCUVVFN1NVRkJRVHRGUVVGQk8wRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFRFRXNTVUZCUVN4VFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzV1VGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTFCUVVFc1IwRkJRU3hQUVVGQk8wRkJUMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEVHl4TlFVRk5MSFZDUVVGMVFpeERRVUZETzBWQlEyNURPMEZCUTBZN1FVRkRRVHRGUVVORkxGZEJRVmNzUTBGQlF6dEpRVUZGTEdsQ1FVRnBRanRKUVVGRk8wVkJRVlVzUTBGQlF5eEZRVUZGTzBsQlF6VkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNSMEZCUnl4cFFrRkJhVUk3U1VGRE1VTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxIbENRVUZsTEVOQlFVTTdUVUZETDBJc2FVSkJRV2xDTEVWQlFVVXNRMEZCUXl4RFFVRkRPMDFCUTNKQ0xIRkNRVUZ4UWl4RlFVRkZMRVZCUVVVN1RVRkRla0lzUjBGQlJ6dEpRVU5NTEVOQlFVTXNRMEZCUXp0RlFVTktPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4alFVRmpMRU5CUVVFc1JVRkJSenRKUVVObUxFOUJRVThzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExIRkNRVUZ4UWp0RlFVTndSRHM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc2FVSkJRV2xDTEVOQlFVTXNTVUZCU1N4RlFVRkZPMGxCUTNSQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPMDFCUVVVc2NVSkJRWEZDTEVWQlFVVTdTVUZCU3l4RFFVRkRMRU5CUVVNN1JVRkRla1E3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxGVkJRVlVzUTBGQlFTeEZRVUZITzBsQlExZ3NUMEZCVHl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNhVUpCUVdsQ08wVkJRMmhFT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeGhRVUZoTEVOQlFVTXNUMEZCVHl4RlFVRkZPMGxCUTNKQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPMDFCUVVVc2FVSkJRV2xDTEVWQlFVVTdTVUZCVVN4RFFVRkRMRU5CUVVNN1JVRkRlRVE3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNjVUpCUVhGQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTEZGQlFWRXNSVUZCUlR0SlFVTjBReXhKUVVGSkxGRkJRVkVzUTBGQlF5eE5RVUZOTEV0QlFVc3NRMEZCUXl4RlFVRkZPMDFCUTNwQ08wbEJRMFk3U1VGRlFTeE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExHMUNRVUZ0UWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVVnNSU3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1RVRkJUU3hGUVVGRk8wMUJRelZDTEZsQlFWa3NSVUZCUlR0UlFVTmFMRkZCUVZFc1JVRkJSVHROUVVOYU8wbEJRMFlzUTBGQlF5eERRVUZETzBWQlEwbzdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRkRSU3huUWtGQlowSXNRMEZCUVN4RlFVRkhPMGxCUTJwQ0xFOUJRVThzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFdEJRVXM3VFVGREwwSXNTVUZCU1N4aFFVRmhMRVZCUVVVc1owSkJRV2RDTzAxQlEyNURMRTFCUVUwN1VVRkJSU3hOUVVGTk8xRkJRVVU3VFVGQlR5eERRVUZETEVkQlFVY3NSMEZCUnp0TlFVTTVRaXhOUVVGTkxGVkJRVlVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNWVUZCVlN4RFFVRkRMRzlDUVVGaExFTkJRVU03TzAxQlJXNUVPMDFCUTBFc1NVRkRSU3hEUVVGRExIbENRVUZyUWl4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGRGJrTXNWVUZCVlN4SlFVRkpMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUlVGRGJFUTdVVUZEUVN4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVWQlFVVXNWVUZCVlN4RFFVRkRPMUZCUldoRUxFbEJRVWtzVFVGQlRTeExRVUZOTEVkQlFVVXNiMEpCUVdNc2IwSkJRVzFDTEVWQlFVVTdWVUZEYmtRN1ZVRkRRVHRWUVVOQkxHZENRVUZuUWl4SFFVRkhMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4SFFVRkhMRU5CUVVNN1VVRkRiRVE3VFVGRFJpeERRVUZETEUxQlFVMHNTVUZCU1N4TlFVRk5MRXRCUVVzc2NVSkJRWEZDTEVWQlFVVTdVVUZETTBNN1VVRkRRVHRSUVVOQkxHRkJRV0VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1JVRkJSU3hWUVVGVkxFTkJRVU03VVVGRGFFUXNaMEpCUVdkQ0xFZEJRVWNzUTBGQlF5eGpRVUZqTEVOQlFVTTdUVUZEY2tNc1EwRkJReXhOUVVGTk8xRkJRMHc3VVVGRFFTeEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTk9PMDFCUTBZN08wMUJSVUU3VFVGRFFTeEpRVUZKTEVOQlFVVXNSVUZCUlN4SlFVRkxPMUZCUTFnc1RVRkJUU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTNaQ0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNZVUZCWVN4RlFVRkZMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU03VVVGRk1VTXNTVUZCU1N4blFrRkJaMElzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRWxCUVVrc1IwRkJSeXhEUVVGRExFMUJRVTBzUlVGQlJUdFZRVU5vUkR0VlFVTkJPMVZCUTBFc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVTjRRaXhuUWtGQlowSXNSVUZEYUVJc1RVRkJUU3hGUVVOT0xFZEJRVWNzUTBGQlF5eE5RVUZOTEVWQlExWXNTVUZCU1N4RlFVTktMRTFCUVUwc1MwRkJTeXh4UWtGRFlpeERRVUZETzFGQlEwZzdVVUZEUVN4RlFVRkZMRU5CUVVNc1EwRkJRenROUVVOT0xFTkJRVU1zUTBGQlF6dEpRVU5LTEVOQlFVTTdSVUZEU0RzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4VlFVRlZMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVlVzUlVGQlJUdEpRVU01UWl4TlFVRk5MR0ZCUVdFc1IwRkJSenROUVVOd1FpeEZRVUZGTEVWQlFVVXNUMEZCVHl4RFFVRkRMRVZCUVVVN1RVRkRaQ3hOUVVGTkxFVkJRVVVzVDBGQlR5eERRVUZETEUxQlFVMDdUVUZEZEVJc1ZVRkJWU3hGUVVGRkxGVkJRVlVzUjBGRGJFSXNkVUpCUVdkQ0xFTkJRVU1zVVVGQlVTeEhRVU42UWl4MVFrRkJaMElzUTBGQlF5eFZRVUZWTzAxQlF5OUNMRTFCUVUwc1JVRkJSU3hQUVVGUExFTkJRVU1zVFVGQlRUdE5RVU4wUWl4WFFVRlhMRVZCUVVVc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzAxQlEzWkNMRmxCUVZrc1JVRkJSU3hKUVVGSk8wMUJRMnhDTEU5QlFVOHNSVUZCUlR0SlFVTllMRU5CUVVNN1NVRkRSQ3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1lVRkJZU3hEUVVGRE8wbEJRM0pETEU5QlFVOHNZVUZCWVR0RlFVTjBRanM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzVjBGQlZ5eERRVUZETEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVc1NVRkJTU3hGUVVGRk8wbEJRMnBETEVsQlFVa3NRMEZCUXl4TFFVRkxMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVU3VFVGRGRrSTdTVUZEUmpzN1NVRkZRVHRKUVVOQk8wbEJRMEU3U1VGRFFUdEpRVU5CTEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1RVRkJUU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJRenRKUVVNNVJDeExRVUZMTEVOQlFVTXNXVUZCV1N4SFFVRkhMRWxCUVVrN1JVRkRNMEk3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzYVVKQlFXbENMRU5CUVVNc1MwRkJTeXhGUVVGRk8wbEJRM1pDTEUxQlFVMHNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6czdTVUZGYkVNN1NVRkRRU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXpzN1NVRkZhRUk3U1VGRFFTeEpRVUZKTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1owSkJRVk1zUlVGQlJUdE5RVU16UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03U1VGRFpEdEpRVVZCTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVOQlFVTTdSVUZET1VJN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzY1VKQlFYRkNMRU5CUTI1Q0xHZENRVUZuUWl4RlFVTm9RaXhOUVVGTkxFVkJRMDRzVFVGQlRTeEZRVU5PTEVsQlFVa3NSVUZEU2l4dlFrRkJiMElzUlVGRGNFSTdTVUZEUVN4SlFVRkpMRkZCUVZFc1JVRkJSU3hWUVVGVk8wbEJSWGhDTEVsQlFVa3NiMEpCUVc5Q0xFVkJRVVU3VFVGRGVFSXNVVUZCVVN4SFFVRkhMRTFCUVUwN1RVRkRha0lzVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXh0UWtGQmJVSXNRMEZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRE8wMUJSVFZFTEZWQlFWVXNSMEZCUnp0UlFVTllMRmxCUVZrc1JVRkJSVHRWUVVOYUxGRkJRVkVzUlVGQlJTeG5Ra0ZCWjBJN1ZVRkRNVUlzV1VGQldTeEZRVUZGTzFGQlEyaENPMDFCUTBZc1EwRkJRenRKUVVOSUxFTkJRVU1zVFVGQlRUdE5RVU5NTzAxQlEwRTdUVUZEUVR0TlFVTkJMRlZCUVZVc1IwRkJSeXhOUVVGTkxFTkJRMmhDTEVkQlFVY3NRMEZCUlN4SlFVRkpMRWxCUVVzN1VVRkRZaXhKUVVGSkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1MwRkJTeXhqUVVGakxFVkJRVVU3VlVGRE5VTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRha1E3VVVGRlFTeFBRVUZQTEVsQlFVa3NRMEZCUXl4blFrRkJaMEk3VFVGRE9VSXNRMEZCUXl4RFFVRkRMRU5CUTBRc1RVRkJUU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEUxQlFVMHNTMEZCU3p0UlFVTjJRanRSUVVOQk8xRkJRMEVzU1VGQlNTeG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVTdWVUZEY2tNc1NVRkJTU3hOUVVGTkxFdEJRVXNzWTBGQll5eEZRVUZGTzFsQlF6ZENMRTFCUVUwc1owSkJRV2RDTEVkQlFVY3NiVUpCUVcxQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXp0WlFVVTFSQ3hIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVYzdZMEZEV2l4WlFVRlpMRVZCUVVVc1NVRkJTVHRqUVVOc1FpeFJRVUZSTEVWQlFVVTdXVUZEV2l4RFFVRkRPMVZCUTBnc1EwRkJReXhOUVVGTk8xbEJRMHdzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhPMk5CUVVVc1dVRkJXU3hGUVVGRk8xbEJRVXNzUTBGQlF6dFZRVU4wUXp0UlFVTkdPMUZCUlVFc1QwRkJUeXhIUVVGSE8wMUJRMW9zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTFZN1NVRkZRU3hKUVVGSkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJUdE5RVU4wUXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUVUZCVFN4RlFVRkZMRlZCUVZVc1EwRkJRenRKUVVNelF6dEZRVU5HT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4blFrRkJaMElzUTBGQlF5eE5RVUZOTEVWQlFVVXNWVUZCVlN4RlFVRkZPMGxCUTI1RE8wbEJRMEVzVFVGQlRTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wbEJRMnBETEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWM3VFVGRGRrSXNSMEZCUnl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRE8wMUJRMnhDTEVkQlFVYzdTVUZEVEN4RFFVRkRPenRKUVVWRU8wbEJRMEU3U1VGRFFTeE5RVUZOTEhkQ1FVRjNRaXhIUVVNMVFpeFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEZsQlFWazdTVUZEYWtRc1RVRkJUU3h0UWtGQmJVSXNSMEZCUnl4VlFVRlZMRU5CUVVNc1dVRkJXVHRKUVVWdVJDeEpRVUZKTEhkQ1FVRjNRaXhKUVVGSkxHMUNRVUZ0UWl4RlFVRkZPMDFCUTI1RU8wMUJRMEU3VFVGRFFTeE5RVUZOTEZsQlFWa3NSMEZEYUVJc2JVSkJRVzFDTEVOQlFVTXNXVUZCV1N4SlFVTm9ReXgzUWtGQmQwSXNRMEZCUXl4WlFVRlpPenROUVVWMlF6dE5RVU5CTEdkQ1FVRm5RaXhEUVVGRExGbEJRVmtzUjBGQlJ6dFJRVU01UWl4WlFVRlpPMUZCUTFvc1VVRkJVU3hGUVVGRk8xVkJRMUlzUjBGQlJ5eDNRa0ZCZDBJc1EwRkJReXhSUVVGUk8xVkJRM0JETEVkQlFVY3NiVUpCUVcxQ0xFTkJRVU03VVVGRGVrSTdUVUZEUml4RFFVRkRPMGxCUTBnN1NVRkZRU3hQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NaMEpCUVdkQ08wbEJSV3hETEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRE8wVkJRemRDT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEcxQ1FVRnRRaXhEUVVGRExFOUJRVThzUlVGQlJUdEpRVU16UWl4SlFVTkZMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzU1VGRFppeERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRMnhDTEU5QlFVOHNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eFJRVUZSTEVsQlEzSkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVOb1F6dE5RVU5CTEU5QlFVOHNTVUZCU1R0SlFVTmlPMGxCUTBFc1QwRkJUeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRGRrTTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4NVFrRkJlVUlzUTBGQlF5eEpRVUZKTEVWQlFVVTdTVUZET1VJc1NVRkJTU3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRXRCUVVzc1kwRkJZeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlR0TlFVTTNSQ3hQUVVGUExFVkJRVVU3U1VGRFdEdEpRVVZCTEUxQlFVMHNVVUZCVVN4SFFVRkhMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRE1VSXNTMEZCU3l4TlFVRk5MRTFCUVUwc1NVRkJTU3hKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTzAxQlEycERMRWxCUTBVc1RVRkJUU3hEUVVGRExFbEJRVWtzUzBGQlN5eDNRa0ZCVnl4RFFVRkRMSGRDUVVGM1FpeEpRVU53UkN4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZETTBJN1VVRkRRU3hMUVVGTExFMUJRVTBzUzBGQlN5eEpRVUZKTEUxQlFVMHNRMEZCUXl4TFFVRkxMRVZCUVVVN1ZVRkRhRU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNN1VVRkRja0k3VFVGRFJqdEpRVU5HTzBsQlEwRXNUMEZCVHl4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRE8wVkJRM1JDTzBGQlEwWTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRk9RU3hQUVVGQkxFTkJRVUVzZFVKQlFVRXNSMEZCUVN4MVFrRkJRVHRCUVU5QkxGTkJRVk1zYlVKQlFXMUNMRU5CUVVNc1VVRkJVU3hGUVVGRkxFbEJRVWtzUlVGQlJUdEZRVU16UXl4UFFVRlBMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNUMEZCVHl4TlFVRk5PMGxCUVVVc1IwRkJSeXhIUVVGSE8wbEJRVVVzUTBGQlF5eFBRVUZQTEVkQlFVYzdSVUZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU0zUlRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnlXRUVzU1VGQlFTeFRRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1dVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEUxQlFVMHNWMEZCVnl4SFFVRkpMRXRCUVVzc1NVRkJTeXhMUVVGTExFTkJRVU1zVVVGQlVUczdRVUZGTjBNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEVHl4TlFVRk5MRFJDUVVFMFFpeEhRVUZITEVsQlFVRXNkMEpCUVdNc1JVRkRlRVFzVjBGQlZ5eEZRVU5XTEZGQlFWRXNTVUZCU3p0RlFVTmFMRTlCUVU4c1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXh0UWtGQmJVSXNSVUZCUlN4UFFVRlBMRXRCUVVzN1NVRkJRU3hKUVVGQkxHOUNRVUZCTEVWQlFVRXNjVUpCUVVFN1NVRkRkRVVzVFVGQlRTeE5RVUZOTEVsQlFVRXNiMEpCUVVFc1IwRkJSeXhQUVVGUExFTkJRVU1zVjBGQlZ5eGpRVUZCTEc5Q1FVRkJMSGRDUVVGQkxIRkNRVUZCTEVkQlFXNUNMRzlDUVVGQkxFTkJRWEZDTEZsQlFWa3NZMEZCUVN4eFFrRkJRU3gxUWtGQmFrTXNjVUpCUVVFc1EwRkJiVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZETlVRc1EwRkJRenROUVVGRk8wbEJRVXNzUTBGQlF5eExRVUZMTEVsQlFVa3NTMEZCU3l4M1FrRkJWeXhEUVVGRExIZENRVU55UXl4RFFVRkRPMGxCUlVRc1NVRkJTU3hOUVVGTkxFVkJRVVU3VFVGRFZpeHRRa0ZCYlVJc1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNSVUZCUlN4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRE8wbEJRM1pFTzBsQlEwRXNUMEZCVHl4dFFrRkJiVUk3UlVGRE5VSXNRMEZCUXl4RlFVRkZMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5tTEVOQlEwWXNRMEZCUXpzN1FVRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJWa0VzVDBGQlFTeERRVUZCTERSQ1FVRkJMRWRCUVVFc05FSkJRVUU3UVVGWFR5eE5RVUZOTEd0Q1FVRnJRaXhIUVVGSExFTkJRVU1zWTBGQll5eEZRVUZGTEcxQ1FVRnRRaXhMUVVGTE8wVkJRM3BGTEVsQlFVa3NiVUpCUVcxQ0xFdEJRVXNzVTBGQlV5eEZRVUZGTzBsQlEzSkRMRTlCUVU4c1kwRkJZenRGUVVOMlFqdEZRVVZCTEUxQlFVMHNaVUZCWlN4SFFVRkhMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU03UlVGRGFrTXNTVUZCU1N4alFVRmpMRXRCUVVzc2JVSkJRVzFDTEVWQlFVVTdTVUZETVVNc1QwRkJUeXhsUVVGbE8wVkJRM2hDTzBWQlJVRXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRmRFUXNTMEZCU3l4TlFVRk5MRTFCUVUwc1NVRkJTU3h0UWtGQmJVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhGUVVGRk8wbEJReTlETEUxQlFVMHNWMEZCVnl4SFFVRkhMR05CUVdNc1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NSVUZCUlRzN1NVRkZjRVE3U1VGRFFUdEpRVU5CTzBsQlEwRTdTVUZEUVR0SlFVTkJMRWxCUVVrc2JVSkJRVzFDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExGZEJRVmNzUlVGQlJUdE5RVU51UkN4bFFVRmxMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUlVGQlJTeFhRVUZYTEVOQlFVTTdTVUZETVVNN1NVRkZRU3hWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXp0RlFVTXpRanM3UlVGRlFUdEZRVU5CTzBWQlEwRXNTMEZCU3l4TlFVRk5MRTFCUVUwc1NVRkJTU3hWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNSVUZCUlR0SlFVTjBReXhsUVVGbExFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNSVUZCUlN4alFVRmpMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBWQlEzcEVPMFZCUTBFc1QwRkJUeXhsUVVGbE8wRkJRM2hDTEVOQlFVTTdRVUZCUXl4UFFVRkJMRU5CUVVFc2EwSkJRVUVzUjBGQlFTeHJRa0ZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnVSa1lzU1VGQlFTeHhRa0ZCUVN4SFFVRkJMRTlCUVVFN1FVRkpRU3hKUVVGQkxGbEJRVUVzUjBGQlFTeFBRVUZCTzBGQlMwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUVUZCVFN4alFVRmpMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF6dEZRVU51UXl4SFFVRkhPMEZCUTB3c1EwRkJReXhEUVVGRE96dEJRVVZHTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1RVRkJUU3hsUVVGbExFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXp0RlFVTndReXhEUVVGRExIZENRVUZYTEVOQlFVTXNkMEpCUVhkQ0xFZEJRVWtzVVVGQlVTeEpRVUZMTzBsQlEzQkVMRTlCUVU4N1RVRkJSU3hKUVVGSkxFVkJRVVVzZDBKQlFWY3NRMEZCUXl4M1FrRkJkMEk3VFVGQlJTeExRVUZMTEVWQlFVVTdTVUZCVXl4RFFVRkRPMFZCUTNoRk8wRkJRMFlzUTBGQlF5eERRVUZET3p0QlFVVkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTA4c1RVRkJUU3gxUWtGQmRVSXNSMEZCUnl4RFFVRkRPMFZCUVVVN1FVRkJZeXhEUVVGRExFdEJRVXM3UlVGRE5VUXNUMEZCVHp0SlFVTk1MRU5CUVVNc2QwSkJRVmNzUTBGQlF5eDNRa0ZCZDBJc1IwRkJSenROUVVOMFF5eEpRVUZKTEVWQlFVVXNkMEpCUVZjc1EwRkJReXgzUWtGQmQwSTdUVUZGTVVNc1UwRkJVeXhGUVVGRkxFTkJRVU1zVFVGQlRTeEZRVUZGTEUxQlFVMHNTMEZCU3p0UlFVTTNRaXhQUVVGUExFMUJRVThzU1VGQlNTeEpRVUZMTzFWQlEzSkNMRTFCUVUwc1RVRkJUU3hIUVVGSExFMUJRVTBzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXp0VlFVTnFReXhQUVVGUExFMUJRVTBzUTBGRFZpeE5RVUZOTEVOQlFVVXNUMEZCVHl4SlFVRkxMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUTI1RUxFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTJoQ0xFTkJRVU03VFVGRFNDeERRVUZETzAxQlJVUXNVMEZCVXl4RlFVRkZMRU5CUVVNc1RVRkJUU3hGUVVGRkxFOUJRVThzUlVGQlJTeFBRVUZQTEV0QlEyeERMSE5DUVVGelFpeERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRVZCUVVVc1lVRkJZVHRKUVVOMFJEdEZRVVZHTEVOQlFVTTdRVUZEU0N4RFFVRkRPenRCUVVWRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRm9Ra0VzVDBGQlFTeERRVUZCTEhWQ1FVRkJMRWRCUVVFc2RVSkJRVUU3UVVGcFFrOHNUVUZCVFN3eVFrRkJNa0lzUjBGQlJ5eERRVUZETzBWQlF6RkRMR05CUVdNN1JVRkRaQ3hoUVVGaE8wVkJRMkk3UVVGRFJpeERRVUZETEV0QlFVczdSVUZEU2l4UFFVRlBPMGxCUTB3c1EwRkJReXhqUVVGakxFTkJRVU1zV1VGQldTeEhRVUZITzAxQlF6ZENMR05CUVdNc1JVRkJSU3h2UTBGQll5eERRVUZETEdkQ1FVRm5RanROUVVNdlF5eFRRVUZUTEVWQlFVVXNZMEZCWXl4RFFVRkRMRmxCUVZrN1RVRkRkRU1zWTBGQll5eEZRVUZGTEVOQlFVTXNkMEpCUVZjc1EwRkJReXgzUWtGQmQwSXNRMEZCUXp0TlFVVjBSQ3hQUVVGUExFVkJRVVVzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hYUVVGWExFdEJRVXM3VVVGRE0wTXNTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRk8xVkJRelZETEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUTFvc1IwRkJSU3hqUVVGakxFTkJRVU1zV1VGQllTeDVSa0ZEYWtNc1EwRkJRenRSUVVOSU96dFJRVVZCTzFGQlEwRXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhuUWtGQlowSXNSVUZCUlR0VlFVTnFReXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVU5hTEVkQlFVVXNZMEZCWXl4RFFVRkRMRmxCUVdFc2VVTkJRMnBETEVOQlFVTTdVVUZEU0R0UlFVVkJMRTlCUVU4c1NVRkJRU3g1UTBGQmJVSXNSVUZCUXp0VlFVTjZRaXhIUVVGSExHbENRVUZwUWp0VlFVTndRaXhQUVVGUExFVkJRVVVzUTBGRFVDeGxRVUZsTEVOQlFVTXNkMEpCUVZjc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4RFFVTnVSQ3hYUVVGWExFTkJRVU1zWjBKQlEyUXNRMEZCUXp0UlFVVk1MRU5CUVVNc1EwRkJRenROUVVOS0xFTkJRVU03VFVGRlJDeHZRa0ZCYjBJc1JVRkJSU3hOUVVGUExFdEJRVXNzU1VGQlN6dFJRVU55UXl4TlFVRk5MRkZCUVZFc1IwRkJSeXhOUVVGTkxHTkJRV01zUTBGQlF5eERRVUZETzFGQlEzWkRMRTFCUVUwc1ZVRkJWU3hIUVVGSExHRkJRV0VzUTBGQlF5eERRVUZETzFGQlJXeERMRTlCUVU4c1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEZsQlFWa3NSVUZCUlN4aFFVRmhMRXRCUVVzN1ZVRkRjRVFzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4WlFVRlpMRU5CUVVNc1JVRkJSVHRaUVVNM1FpeDNRMEZCZDBNc1EwRkJReXhWUVVGVkxFVkJRVVVzVVVGQlVTeERRVUZETzFsQlF6bEVMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVVVzYTBOQlFXbERMRmxCUVdFc1NVRkJSeXhEUVVGRE8xVkJRM0pGTEVOQlFVTXNUVUZCVFN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExHRkJRV0VzUTBGQlF5eEZRVUZGTzFsQlEzSkRMSGREUVVGM1F5eERRVUZETEZWQlFWVXNSVUZCUlN4UlFVRlJMRU5CUVVNN1dVRkRPVVFzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZEV2l4clEwRkJhVU1zWVVGQll5eEpRVU5zUkN4RFFVRkRPMVZCUTBnc1EwRkJReXhOUVVGTkxFbEJRMHdzVlVGQlZTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRmxCUVZrc1MwRkRja01zVlVGQlZTeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRMRmxCUVZrc1JVRkRkRU03V1VGRFFTeFBRVUZQTEVOQlFVTTdWVUZEVml4RFFVRkRMRTFCUVUwc1NVRkJTU3hWUVVGVkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNXVUZCV1N4TFFVRkxMRk5CUVZNc1JVRkJSVHRaUVVNNVJDeFBRVUZQTEVOQlFVTTdWVUZEVml4RFFVRkRMRTFCUVUwc1NVRkJTU3hWUVVGVkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTXNXVUZCV1N4TFFVRkxMRk5CUVZNc1JVRkJSVHRaUVVNdlJDeFBRVUZQTEVOQlFVTXNRMEZCUXp0VlFVTllPMVZCUlVFc1QwRkRSU3hWUVVGVkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTXNXVUZCV1N4SFFVTjBReXhWUVVGVkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNXVUZCV1R0UlFVVjZReXhEUVVGRExFTkJRVU03VFVGRFNpeERRVUZETzAxQlJVUXNVMEZCVXl4RlFVRkZMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFOUJRVThzUlVGQlJTeFBRVUZQTEV0QlFVczdVVUZETTBNc1RVRkJUVHRWUVVGRk8xRkJRVkVzUTBGQlF5eEhRVUZITEZWQlFWVTdVVUZET1VJc1NVRkRSU3hEUVVGRExFOUJRVThzU1VGRFVpeFBRVUZQTEVOQlFVTXNUVUZCVFN4TFFVRkxMRU5CUVVNc1NVRkRjRUlzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1MwRkJTeXgzUWtGQlZ5eERRVUZETEhkQ1FVRjNRaXhGUVVONFJEdFZRVU5CTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUTFvc1IwRkJSU3hqUVVGakxFTkJRVU1zV1VGQllTeHRSVUZCYTBVc2QwSkJRVmNzUTBGQlF5eDNRa0ZCZVVJc1NVRkRlRWtzUTBGQlF6dFJRVU5JTzAxQlEwWTdTVUZEUmp0RlFVTkdMRU5CUVVNN1FVRkRTQ3hEUVVGRE96dEJRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVkpCTEU5QlFVRXNRMEZCUVN3eVFrRkJRU3hIUVVGQkxESkNRVUZCTzBGQlUwRXNVMEZCVXl4elFrRkJjMElzUTBGQlF5eFJRVUZSTEVWQlFVVXNZVUZCWVN4RlFVRkZPMFZCUTNaRUxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxGRkJRVkVzUTBGQlF5eE5RVUZOTEV0QlFVc3NRMEZCUXl4RlFVRkZPMGxCUTNKRUxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlExb3NSMEZCUlN4alFVRmpMRU5CUVVNc1dVRkJZU3g1UkVGRGFrTXNRMEZCUXp0RlFVTklPMFZCUlVFc1RVRkJUU3hWUVVGVkxFZEJRVWNzWVVGQllTeERRVUZETEVOQlFVTTdSVUZEYkVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlJTeFBRVUZQTEVsQlFVczdTVUZETlVJc1NVRkJTU3hEUVVGRExFOUJRVThzU1VGQlNTeFBRVUZQTEU5QlFVOHNTMEZCU3l4UlFVRlJMRVZCUVVVN1RVRkRNME1zVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZEV2l4SFFVRkZMR05CUVdNc1EwRkJReXhaUVVGaExDdEVRVUU0UkN4UFFVRlJMRWxCUTNaSExFTkJRVU03U1VGRFNEdEpRVVZCTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3VFVGRGVFSXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkRXaXhIUVVGRkxHTkJRV01zUTBGQlF5eFpRVUZoTERKRFFVRXdReXhQUVVGUkxFbEJRMjVHTEVOQlFVTTdTVUZEU0R0RlFVTkdMRU5CUVVNc1EwRkJRenRCUVVOS096dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMDhzVFVGQlRTeHRRa0ZCYlVJc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlF5OURMR2xDUVVGcFFpeEZRVU5xUWl4VlFVRlZMRVZCUTFZc1lVRkJZU3hGUVVOaUxHTkJRV01zUlVGRFpDeGhRVUZoTEVWQlEySXNhVUpCUVdsQ0xFVkJRMnBDTEdkQ1FVRm5RaXhGUVVOb1FpeGpRVUZqTEVWQlEyUXNaMEpCUVdkQ0xFVkJRMmhDTEc5Q1FVRnZRaXhGUVVOd1FpeHpRa0ZCYzBJc1JVRkRkRUlzYjBOQlFXOURMRVZCUTNCRExITkRRVUZ6UXl4RlFVTjBReXhoUVVGaExFVkJRMklzTkVKQlFUUkNMRVZCUXpWQ0xITkNRVUZ6UWl4RlFVTjBRaXh0UWtGQmJVSXNSVUZEYmtJc1lVRkJZU3hGUVVOaUxHTkJRV01zUlVGRFpDeHJRa0ZCYTBJc1JVRkRiRUlzZFVOQlFYVkRMRVZCUTNaRExIbERRVUY1UXl4RlFVTjZReXd3UWtGQk1FSXNSVUZETVVJc2VVSkJRWGxDTEVWQlEzcENMREpDUVVFeVFpeEZRVU16UWl4cFEwRkJhVU1zUlVGRGFrTXNiVU5CUVcxRExFVkJRMjVETERoQ1FVRTRRaXhGUVVNNVFpeG5RMEZCWjBNc1JVRkRhRU1zWVVGQllTeEZRVU5pTEdOQlFXTXNSVUZEWkN4WlFVRlpMRVZCUTFvc2IwSkJRVzlDTEVWQlEzQkNMR1ZCUVdVc1JVRkRaaXhwUTBGQmFVTXNSVUZEYWtNc2NVSkJRWEZDTEVWQlEzSkNMSGRDUVVGM1FpeEZRVU40UWl4eFFrRkJjVUlzUlVGRGNrSXNWVUZCVlN4RlFVTldMRzFDUVVGdFFpeEZRVU51UWl4elFrRkJjMElzUlVGRGRFSXNjMEpCUVhOQ0xFVkJRM1JDTEhOQ1FVRnpRaXhGUVVOMFFpeHZRa0ZCYjBJc1JVRkRjRUlzWjBKQlFXZENMRVZCUTJoQ0xHRkJRV0VzUlVGRFlpeHhRa0ZCY1VJc1JVRkRja0lzTWtKQlFUSkNMRVZCUXpOQ0xIRkNRVUZ4UWl4RlFVTnlRaXhsUVVGbExFVkJRMllzWlVGQlpTeEZRVU5tTEdGQlFXRXNSVUZEWWl4dlFrRkJiMElzUlVGRGNFSXNaVUZCWlN4RlFVTm1MRzFDUVVGdFFpeEZRVU51UWl4dlFrRkJiMElzUlVGRGNFSXNWMEZCVnl4RFFVTmFMRU5CUVVNN1FVRkJReXhQUVVGQkxFTkJRVUVzYlVKQlFVRXNSMEZCUVN4dFFrRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVNMVVVZ3NTVUZCUVN4WlFVRkJMRTlCUVVFc1EwRkJRU3h4UWtGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMR05CUVVFc1QwRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4WFFVRkJMRTlCUVVFc1EwRkJRU3h0UTBGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMRzFDUVVGQkxFOUJRVUVzUTBGQlFTdzBRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkRRU3hKUVVGQkxHVkJRVUVzVDBGQlFTeERRVUZCTEhWRFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVWbExEUkNRVUUwUWpzN096czdPenM3T3pzN096czdPenRGUVdkQ2VrTXNWMEZCVnl4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRk8wbEJRM0pDTEUxQlFVMHNXVUZCV1R0TlFVTm9RaXhaUVVGWkxFdEJRVXM3VFVGRGFrSXNaVUZCWlN4TFFVRkxPMDFCUTNCQ0xHZENRVUZuUWl4SlFVRkpPMDFCUTNCQ0xESkNRVUV5UWl4TFFVRkxPMDFCUTJoRExEaENRVUU0UWp0UlFVTTFRaXhWUVVGVkxFdEJRVUU3VDBGRFdEdE5RVU5FTEN0Q1FVRXJRaXhKUVVGSk96czdUVUZKYmtNc2JVSkJRVzFDTEV0QlFVczdUVUZEZUVJc2FVSkJRV2xDTEV0QlFVczdUVUZEZEVJc2MwSkJRWE5DTEVsQlFVazdUVUZETVVJc1owSkJRV2RDTEV0QlFVczdUVUZEY2tJc1owSkJRV2RDTEVsQlFVazdPenM3TzAxQlRYQkNMR05CUVdNN1VVRkRXaXd3UWtGQk1FSXNTVUZCUVR0UFFVTXpRanROUVVORUxHbENRVUZwUWl4RlFVRkZPMDFCUTI1Q0xHVkJRV1VzU1VGQlNTeGhRVUZoTzAxQlEyaERMRmxCUVZrc1JVRkJSVHROUVVOa0xHZENRVUZuUWl4RlFVRkZPMDFCUTJ4Q0xHMUNRVUZ0UWl4TFFVRkxPMDFCUTNoQ0xHRkJRV0U3VVVGRFdDeHRRa0ZCYlVJc1UwRkJVenRSUVVNMVFpeHZRa0ZCYjBJc1MwRkJTenRSUVVONlFpeHJRa0ZCYTBJc1MwRkJTenRSUVVOMlFpeHZRMEZCYjBNc1NVRkJTVHRSUVVONFF5eDFRa0ZCZFVJc1MwRkJRVHRQUVVONFFqczdUVUZGUkN4aFFVRmhMRkZCUVVFc2VVSkJRWGRDTzAxQlEzSkRMR1ZCUVdVc1NVRkJTVHROUVVOdVFpeHhRa0ZCY1VJc1RVRkJUU3hWUVVGVkxFbEJRVWtzUjBGRGNrTXNaMEpCUVVFc2NVSkJRVzlDTEU5QlFVOHNSMEZETTBJc1owSkJRVUVzY1VKQlFXOUNMRWxCUVVrN1RVRkROVUlzYVVOQlFXbERMRXRCUVVzN1RVRkRkRU1zVDBGQlR5eFpRVUZCTEZWQlFWTXNSMEZCUnp0TlFVTnVRaXhIUVVGSExFbEJRVWtzVlVGQlF6dExRVU5VTEVOQlFVRTdTVUZGUkN4SlFVRkpMRzFDUVVGdFFpeEhRVUZITEVsQlFVa3NhMEpCUVd0Q0xFTkJRVUU3U1VGRGFFUXNTVUZCU1N4eFFrRkJjVUlzUjBGQlJ5eEpRVUZKTEc5Q1FVRnZRaXhEUVVGQk8wbEJRM0JFTEVsQlFVa3NUVUZCVFN4SFFVRkhMRWxCUVVrc1UwRkJRU3huUWtGQlpTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkJPMGxCUXpORExFbEJRVWtzVFVGQlRTeG5Ra0ZCWjBJc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlFUdEpRVU01UWl4SlFVRkpMRzlDUVVGdlFpeEhRVUZITEVsQlFVa3NiMEpCUVc5Q0xFTkJRVUU3U1VGRmJrUXNTVUZCU1N3clFrRkJLMElzUlVGQlJTeERRVUZCTzBsQlJYSkRMRTFCUVUwc1kwRkJZeXhIUVVGSExHZENRVUZuUWp0TlFVTnlReXhQUVVGUExFbEJRVWtzWlVGQlpTeERRVUZETEVkQlFVY3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRVHRMUVVOMlF5eERRVUZCTzBkQlEwZzdPenM3T3pzN08wVkJVVUVzYjBKQlFXOUNMRzlDUVVGdlFqdEpRVU4wUXl4SlFVRkpMRTFCUVUwc1dVRkJXU3hEUVVGRE8wMUJRVVVzYVVKQlFVRTdTMEZCYlVJc1EwRkJReXhEUVVGQk8wZEJReTlET3pzN096czdPMFZCVDBFc1lVRkJZU3hOUVVGTk8wbEJRMnBDTEVsQlFVa3NUVUZCVFN4WlFVRlpMRU5CUVVNN1RVRkJSU3haUVVGWkxFZEJRVUU3UzBGQlN5eERRVUZETEVOQlFVRTdSMEZETjBNN096czdPenM3UlVGUFFTeG5Ra0ZCWjBJc1RVRkJUVHRKUVVOd1FpeEpRVUZKTEUxQlFVMHNXVUZCV1N4RFFVRkRPMDFCUVVVc1pVRkJaU3hIUVVGQk8wdEJRVXNzUTBGQlF5eERRVUZCTzBkQlEyaEVPenM3T3pzN08wVkJUMEVzYVVKQlFXbENMRTFCUVUwN1NVRkRja0lzU1VGQlNTeE5RVUZOTEZsQlFWa3NRMEZCUXp0TlFVRkZMR2RDUVVGblFpeEhRVUZCTzB0QlFVc3NRMEZCUXl4RFFVRkJPMGRCUTJwRU96czdPenM3TzBWQlQwRXNaME5CUVdkRExFMUJRVTA3U1VGRGNFTXNTVUZCU1N4TlFVRk5MRmxCUVZrc1EwRkJRenROUVVGRkxDdENRVUVyUWl4SFFVRkJPMHRCUVVzc1EwRkJReXhEUVVGQk8wZEJRMmhGT3pzN096czdPMFZCVDBFc2IwSkJRVzlDTEUxQlFVMDdTVUZEZUVJc1NVRkJTU3hOUVVGTkxGbEJRVmtzUTBGQlF6dE5RVUZGTEcxQ1FVRnRRaXhIUVVGQk8wdEJRVXNzUTBGQlF5eERRVUZCTzBsQlEyeEVMRWxCUVVrc2IwSkJRVzlDTEhGRFFVRnhReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdTVUZEYmtVc1NVRkJTU3hIUVVGSExFVkJRVVU3VFVGRFVDeEpRVUZKTEc5Q1FVRnZRaXhOUVVGTkxFVkJRVVVzUTBGQlFUdExRVU5xUXl4TlFVRk5PMDFCUTB3c1NVRkJTU3h2UWtGQmIwSXNjMEpCUVhOQ0xFVkJRVVVzUTBGQlFUdE5RVU5vUkN4SlFVRkpMRzlDUVVGdlFpeExRVUZMTEVWQlFVVXNRMEZCUVR0TFFVTnFRenRIUVVOR096czdPenM3TzBWQlQwRXNhMEpCUVd0Q0xHdENRVUZyUWp0SlFVTnNReXhKUVVGSkxFMUJRVTBzV1VGQldTeERRVUZETzAxQlFVVXNaVUZCUVR0TFFVRnBRaXhEUVVGRExFTkJRVUU3UjBGRE4wTTdPenM3T3pzN1JVRlBRU3gxUWtGQmRVSXNUVUZCVFR0SlFVTXpRaXhKUVVGSkxFMUJRVTBzV1VGQldTeERRVUZETzAxQlFVVXNjMEpCUVhOQ0xFZEJRVUU3UzBGQlN5eERRVUZETEVOQlFVRTdSMEZEZGtRN096czdPenM3UlVGUFFTeHBRa0ZCYVVJc2FVSkJRV2xDTzBsQlEyaERMRWxCUVVrc1RVRkJUU3haUVVGWkxFTkJRVU03VFVGRGNrSXNZMEZCUVR0TFFVTkVMRU5CUVVNc1EwRkJRVHRIUVVOS096czdPenM3TzBWQlQwRXNhVUpCUVdsQ0xFMUJRVTA3U1VGRGNrSXNTVUZCU1N4TlFVRk5MRmxCUVZrc1EwRkJRenROUVVGRkxHZENRVUZuUWl4SFFVRkJPMHRCUVVzc1EwRkJReXhEUVVGQk8wZEJRMnBFT3pzN096czdPMFZCVDBFc1VVRkJVU3hOUVVGTk8wbEJRMW9zU1VGQlNTeE5RVUZOTEZsQlFWa3NRMEZCUXp0TlFVRkZMRTlCUVU4c1IwRkJRVHRMUVVGTExFTkJRVU1zUTBGQlFUdEhRVU40UXpzN096czdPenRGUVU5QkxHdERRVUZyUXl4clEwRkJhME03U1VGRGJFVXNTVUZCU1N4TlFVRk5MRmxCUVZrc1EwRkJRenROUVVOeVFpd3JRa0ZCUVR0TFFVTkVMRU5CUVVNc1EwRkJRVHRIUVVOS096czdPenM3T3p0RlFWRkJMR3RDUVVGclFpdzJRa0ZCTmtJN1NVRkROME1zVFVGQlRUczdTMEZCYlVJc1IwRkJSeXhKUVVGSkxFMUJRVTBzVTBGQlV5eEZRVUZGTEVOQlFVRTdTVUZEYWtRc1pVRkJaU3hEUVVGRExHTkJRV01zUTBGQlF5eEhRVUZITEZWQlFWVXNRMEZCUVR0SlFVTTFReXhKUVVGSkxFMUJRVTBzV1VGQldTeERRVUZETzAxQlFVVXNaVUZCUVR0TFFVRnBRaXhEUVVGRExFTkJRVUU3UjBGRE4wTTdPenM3T3pzN1JVRlBRU3huUWtGQlowSXNUVUZCVFR0SlFVTndRaXhOUVVGTkxHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVU01UkN4TFFVRkxMRWRCUTB3c1RVRkJUU3hEUVVGQk8wbEJRMVlzU1VGQlNTeE5RVUZOTEZsQlFWa3NRMEZCUXp0TlFVTnlRaXhsUVVGbExFZEJRVWM3VFVGRGJFSXNZVUZCUVR0TFFVTkVMRU5CUVVNc1EwRkJRVHRKUVVOR0xFOUJRVThzWVVGQllTeERRVUZCTzBkQlEzUkNPenM3T3pzN096dEZRVkZCTEZsQlFWa3NXVUZCV1R0SlFVTjBRaXhOUVVGTkxHZENRVUZuUWl4SlFVRkpMRTFCUVUwc1UwRkJVeXhGUVVGRkxGZEJRVmNzUTBGQlFUdEpRVVYwUkN4TlFVRk5MR0ZCUVdFc1UwRkJVeXhQUVVGUExFTkJRVU1zZVVKQlFYbENPMDFCUXpORUxFMUJRVTBzVVVGQlVTeGhRVUZoTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGQk8wMUJRekZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSenRSUVVGRkxFMUJRVThzUTBGQlFTeFJRVUZCTEVWQlFWVXNTMEZCU3l4SFFVRkhMRU5CUVVVc1EwRkJRU3hEUVVGRE8xRkJRVVVzVDBGQlR6dFJRVUZGTEVkQlFVY3NTMEZCUVR0UFFVRlBMRU5CUVVFN1RVRkRiRVVzVDBGQlR5eEhRVUZITEVOQlFVRTdTMEZEV0N4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGQk8wbEJSVTRzU1VGQlNTeE5RVUZOTEZsQlFWa3NRMEZCUXp0TlFVRkZMRlZCUVVFN1MwRkJXU3hEUVVGRExFTkJRVUU3UjBGRGVFTTdPenM3T3pzN08wVkJVVUVzWVVGQllTeFZRVUZWTzBsQlEzSkNMRTFCUVUwN08wdEJRV01zUjBGQlJ5eEpRVUZKTEUxQlFVMHNVMEZCVXl4RlFVRkZMRU5CUVVFN1NVRkZOVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSVHROUVVONFFpeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkZMRU5CUVVFc1JVRkJSU3hQUVVGUkxFTkJRVUVzZDBOQlFVRXNRMEZCZVVNc1EwRkJReXhEUVVGQk8wdEJRM1pGTzBsQlEwRXNUMEZCVHl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3U1VGRE1VSXNTVUZCU1N4TlFVRk5MRmxCUVZrc1EwRkJRenROUVVGRkxGVkJRVUU3UzBGQldTeERRVUZETEVOQlFVRTdPenM3U1VGSmRFTXNTVUZCU1N4UFFVRlBMRXRCUVVzc1NVRkJTU3h0UWtGQmJVSXNSVUZCUlN4RlFVRkZPMDFCUTNwRExFMUJRVTBzVlVGQlZTeEhRVUZITEUxQlFVMHNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGQk8wMUJRekZETEVsQlFVa3NiVUpCUVcxQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVRTdTMEZEYmtNN1NVRkRRU3hQUVVGUExFOUJRVThzUTBGQlFUdEhRVU5vUWpzN096czdPenRGUVU5QkxGbEJRVmtzV1VGQldUdEpRVU4wUWl4TlFVRk5PenRMUVVGakxFZEJRVWNzU1VGQlNTeE5RVUZOTEZOQlFWTXNSVUZCUlN4RFFVRkJPMGxCUXpWRExGTkJRVk1zVVVGQlVTeERRVUZGTEZkQlFWazdPMDFCUlRkQ0xFbEJRVWtzVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZPMUZCUTNaQ0xFOUJRVUU3VDBGRFJqczdUVUZGUVN4TlFVRk5MR2RDUVVGblFpeE5RVUZOTEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGQk8wMUJSWEJFTEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSenRSUVVGRkxFMUJRVThzUTBGQlFTeFJRVUZCTEVWQlFWVXNZVUZCWVN4SFFVRkhMRU5CUVVVc1EwRkJRU3hEUVVGRE8xRkJRVVVzVDBGQlFUdFBRVUZUTEVOQlFVRTdTMEZEZUVVc1EwRkJReXhEUVVGQk8wbEJRMFlzU1VGQlNTeE5RVUZOTEZsQlFWa3NRMEZCUXp0TlFVRkZMRlZCUVVFN1MwRkJXU3hEUVVGRExFTkJRVUU3UjBGRGVFTTdPenM3T3pzN096dEZRVk5CTEdGQlFXRXNXVUZCV1R0SlFVTjJRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eFJRVUZSTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1UwRkJVeXhQUVVGUExFdEJRVXNzUTBGQlF5eEZRVUZGTzAxQlEzWkVMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zY1VSQlFYRkVMRU5CUVVNc1EwRkJRVHRMUVVONFJUdEpRVVZCTEUxQlFVMDdPenRMUVVFNFFpeEhRVUZITEVsQlFVa3NUVUZCVFN4VFFVRlRMRVZCUVVVc1EwRkJRVHRKUVVVMVJDeE5RVUZOTEZsQlFWa3NSVUZCUlN4RFFVRkJPMGxCUTNCQ0xFMUJRVTBzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4UlFVRlJMRU5CUVVVc1dVRkJZVHROUVVNMVF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4VFFVRlRMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVU3VVVGRGFrTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExGVkJRVlVzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUVR0UlFVTXhReXhQUVVGUExGVkJRVlVzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUVR0UFFVTTNRanRMUVVORUxFTkJRVU1zUTBGQlFUczdPMGxCUjBZc1NVRkJTU3hOUVVGTkxFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNUMEZCVHl4SFFVRkhMRU5CUVVNc1JVRkJSVHM3VFVGRmNrTXNUVUZCVFN4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlJTeFBRVUZSTzFGQlEzUkRMR05CUVdNc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1QwRkRja01zUTBGQlF5eERRVUZCTzB0QlEwbzdTVUZGUVN4SlFVRkpMRTFCUVUwc1dVRkJXU3hEUVVGRE8wMUJRVVVzVlVGQlZUdE5RVUZGTEdOQlFVRTdTMEZCWjBJc1EwRkJReXhEUVVGQk8wbEJRM1JFTEVsQlFVa3NZVUZCWVN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGQk96czdPMGxCU1RWQ0xFbEJRVWtzVjBGQlZ5eEpRVUZKTEcxQ1FVRnRRaXhGUVVGRkxFTkJRVUU3U1VGRGVFTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTzAxQlEycERMRlZCUVZVc1IwRkJSeXhUUVVGVExFTkJRVUU3VFVGRGRFSXNTVUZCU1N4dFFrRkJiVUlzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUVR0TFFVTnVRenRKUVVWQkxFOUJRVThzVVVGQlVTeERRVUZCTzBkQlEycENPenM3T3pzN08wVkJUMEVzYTBKQlFXdENMRmRCUVZjN1NVRkRNMElzVFVGQlRTeFZRVUZWTEVOQlFVRXNRMEZCUVN4RlFVRkJMRmRCUVVFc1ZVRkJaMElzUlVGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUVR0SlFVVXhReXhOUVVGTk96dExRVUZqTEVkQlFVY3NTVUZCU1N4TlFVRk5MRk5CUVZNc1JVRkJSU3hEUVVGQk8wbEJRelZETEUxQlFVMHNiVUpCUVcxQ0xGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVR0SlFVTTFReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRVZCUVVVN1RVRkRja0lzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUlN4RFFVRkJMR05CUVVFc1JVRkJaMElzVDBGQlVTeERRVUZCTEZWQlFVRXNRMEZCVnl4RFFVRkRMRU5CUVVFN1MwRkRka1E3U1VGRlFTeG5Ra0ZCWjBJc1lVRkJZU3hIUVVGSExFbEJRVWtzU1VGQlNTeEZRVUZGTEVOQlFVRTdTVUZETVVNc1NVRkJTU3hOUVVGTkxGbEJRVmtzUTBGQlF6dE5RVUZGTEZWQlFWVTdUVUZCUlN4cFFrRkJhVUlzVDBGQlFUdExRVUZUTEVOQlFVTXNRMEZCUVR0SFFVTnNSVHM3T3pzN096dEZRVTlCTEd0Q1FVRnJRaXhIUVVGSE8wbEJRMjVDTEU5QlFVOHNTVUZCU1N4TlFVRk5MRk5CUVZNc1JVRkJSU3huUWtGQlowSXNRMEZCUVR0SFFVTTVRenM3T3pzN096czdPMFZCVTBFc2NVSkJRWEZDTEdsQ1FVRnBRanRKUVVOd1F5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZPMDFCUTFvc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGRFdpeERRVUZCTERoRFFVRkJMRVZCUVdkRUxFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVVXNRMEZCUVN4RFFVTnVSU3hEUVVGRExFTkJRVUU3UzBGRFNEdEpRVU5CTEUxQlFVMHNWVUZCVlN4RFFVRkJMRU5CUVVFc1JVRkJRU3hYUVVGQkxGVkJRV2RDTEVWQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVFN1NVRkRla01zVFVGQlRUczdTMEZCWXl4SFFVRkhMRWxCUVVrc1RVRkJUU3hUUVVGVExFVkJRVVVzUTBGQlFUdEpRVU0xUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRVHRKUVVNdlF5eFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVUU3U1VGRGFFTXNTVUZCU1N4TlFVRk5MRmxCUVZrc1EwRkJRenROUVVGRkxGVkJRVUU3UzBGQldTeERRVUZETEVOQlFVRTdTVUZEZEVNc1QwRkJUeXhMUVVGTExFTkJRVUU3UjBGRFpEczdPenM3T3pzN08wVkJVMEVzYjBKQlFXOUNMSEZDUVVGeFFqdEpRVU4yUXl4TlFVRk5MSE5DUVVGelFpeEpRVUZKTEUxQlFVMHNVMEZCVXl4RlFVRkZMR0ZCUVdFc1EwRkJRVHRKUVVNNVJDeE5RVUZOTEhOQ1FVRnpRanROUVVNeFFpeEhRVUZITEcxQ1FVRnRRanROUVVOMFFpeERRVUZETEU5QlFVOHNSMEZCUnl4VFFVRkJPMHRCUTFvc1EwRkJRVHRKUVVWRUxFbEJRVWtzVFVGQlRTeFpRVUZaTEVOQlFVTTdUVUZCUlN4alFVRmpMRzFDUVVGQk8wdEJRWEZDTEVOQlFVTXNRMEZCUVR0SlFVVTNSQ3hQUVVGUExHMUNRVUZ0UWl4RFFVRkJPMGRCUXpWQ096czdPenM3T3pzN08wVkJWVUVzYlVKQlFXMUNMRzlDUVVGdlFqdEpRVU55UXl4TlFVRk5MSEZDUVVGeFFpeEpRVUZKTEdWQlFXVXNSVUZCUlN4RFFVRkJPMGxCUTJoRUxFMUJRVTBzY1VKQlFYRkNPMDFCUTNwQ0xFZEJRVWNzYTBKQlFXdENPMDFCUTNKQ0xFTkJRVU1zVlVGQlZTeEhRVUZITEV0QlFVRTdTMEZEWml4RFFVRkJPMGxCUlVRc1NVRkJTU3hOUVVGTkxGbEJRVmtzUTBGQlF6dE5RVUZGTEdGQlFXRXNhMEpCUVVFN1MwRkJiMElzUTBGQlF5eERRVUZCTzBsQlF6TkVMRTlCUVU4c2EwSkJRV3RDTEVOQlFVRTdSMEZETTBJN096czdPenM3UlVGUFFTeGpRVUZqTEVkQlFVYzdTVUZEWml4UFFVRlBMRWxCUVVrc1RVRkJUU3hUUVVGVExFVkJRVVVzV1VGQldTeERRVUZCTzBkQlF6RkRPenM3T3pzN08wVkJUMEVzWTBGQll5eEhRVUZITzBsQlEyWXNUMEZCVHl4SlFVRkpMRTFCUVUwc1UwRkJVeXhGUVVGRkxGbEJRVmtzUTBGQlFUdEhRVU14UXpzN096czdPenM3UlVGUlFTeHZRa0ZCYjBJc1UwRkJVenRKUVVNelFpeEpRVUZKTEUxQlFVMHNXVUZCV1N4RFFVRkRPMDFCUVVVc1lVRkJZU3hOUVVGQk8wdEJRVkVzUTBGQlF5eERRVUZCTzBsQlF5OURMRTlCUVU4c1RVRkJUU3hEUVVGQk8wZEJRMlk3T3pzN096czdPMFZCVVVFc05FSkJRVFJDTEhOQ1FVRnpRanRKUVVOb1JDeEpRVUZKTEUxQlFVMHNXVUZCV1N4RFFVRkRPMDFCUVVVc2JVSkJRVUU3UzBGQmNVSXNRMEZCUXl4RFFVRkJPMGxCUXk5RExFOUJRVThzYlVKQlFXMUNMRU5CUVVFN1IwRkROVUk3T3pzN096czdSVUZQUVN3MFFrRkJORUlzUjBGQlJ6dEpRVU0zUWl4UFFVRlBMRWxCUVVrc1RVRkJUU3hUUVVGVExFVkJRVVVzYjBKQlFXOUNMRU5CUVVFN1IwRkRiRVE3T3pzN096czdSVUZQUVN4clEwRkJhME1zTkVKQlFUUkNPMGxCUXpWRUxFMUJRVTBzU1VGQlNTeE5RVUZOTEZsQlFWa3NRMEZCUXp0TlFVTXpRaXg1UWtGQlFUdExRVU5FTEVOQlFVTXNRMEZCUVR0SFFVTktPenM3T3pzN096dEZRVkZCTEc5RFFVRnZReXgzUWtGQmQwSTdTVUZETVVRc1RVRkJUU3c0UWtGRFNpeEpRVUZKTEUxQlFVMHNVMEZCVXl4RlFVRkZMRFpDUVVFMlFpeERRVUZCTzBsQlEzQkVMRTFCUVUwc09FSkJRVGhDTzAxQlEyeERMRWRCUVVjc01rSkJRVEpDTzAxQlF6bENMRU5CUVVNc1ZVRkJWU3hIUVVGSExGTkJRVUU3UzBGRFppeERRVUZCTzBsQlJVUXNTVUZCU1N4TlFVRk5MRmxCUVZrc1EwRkJRenROUVVOeVFpdzRRa0ZCT0VJc01rSkJRVUU3UzBGREwwSXNRMEZCUXl4RFFVRkJPMGRCUTBvN1JVRkZRU3gxUWtGQmRVSXNSMEZCUnp0SlFVTjRRaXhQUVVGUExFbEJRVWtzVFVGQlRTeFRRVUZUTEVWQlFVVXNOa0pCUVRaQ0xFTkJRVUU3UjBGRE0wUTdPenM3T3p0RlFVMUJMRGhDUVVFNFFpeEhRVUZITzBsQlF5OUNMRWxCUVVrc2JVSkJRVzFDTEVOQlFVTXNUVUZCVFR0TlFVTTFRaXhKUVVGSkxHdENRVUZyUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk8wdEJRemRDTEVOQlFVTXNRMEZCUVR0SlFVVkdMRWxCUVVrc2NVSkJRWEZDTEVOQlFVTXNUVUZCVFR0TlFVTTVRaXhKUVVGSkxHdENRVUZyUWl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGQk8wdEJRemxDTEVOQlFVTXNRMEZCUVR0SFFVTktPenM3T3pzN096dEZRVkZCTEdsQ1FVRnBRaXhaUVVGWk8wbEJRek5DTEUxQlFVMDdPMHRCUVdsQ0xFZEJRVWNzU1VGQlNTeE5RVUZOTEZOQlFWTXNSVUZCUlN4RFFVRkJPMGxCUlM5RExFbEJRVWtzWVVGQllTeExRVUZMTEZOQlFWTXNSVUZCUlR0TlFVTXZRaXhQUVVGQk8wdEJRMFk3U1VGRlFTeEpRVUZKTEUxQlFVMHNXVUZCV1N4RFFVRkRPMDFCUVVVc1pVRkJaU3hUUVVGQk8wdEJRVmNzUTBGQlF5eERRVUZCTzBkQlEzUkVPME5CUTBZN1FVRkJReXhQUVVGQkxGRkJRVUVzUjBGQlFTeHhRa0ZCUVN4RFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVONGFFSkVMRWxCUVVFc1ZVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZWQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hUUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hUUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNUMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxITkNRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVbEJMRWxCUVVFc1RVRkJRU3hIUVVGQkxFOUJRVUU3UVVGUFFTeEpRVUZCTEVsQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hSUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNhMEpCUVVFc1IwRkJRU3hQUVVGQk8wRkJUVUVzU1VGQlFTeFBRVUZCTEVkQlFVRXNUMEZCUVR0QlFVVkJMRWxCUVVFc1YwRkJRU3hIUVVGQkxFOUJRVUU3UVVGSlFTeEpRVUZCTEdWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEV0QlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3haUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNORUpCUVVFc1IwRkJRU3hQUVVGQk8wRkJTVUVzU1VGQlFTeHZRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVVZCTEVsQlFVRXNVVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFOUJRVUVzUjBGQlFTeFBRVUZCTzBGQlFYRkZMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVVnlSVHRCUVVOQkxFMUJRVTBzWVVGQllTeEhRVUZITEU5QlFVODdPMEZCUlRkQ08wRkJRMEU3UVVGRFFTeE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExFTkJRVU03TzBGQlJURkNPMEZCUTBFN1FVRkRRU3hOUVVGTkxESkNRVUV5UWl4SFFVRkhMRmxCUVUwN1FVRkZNVU1zVTBGQlV5dzRRa0ZCT0VJc1EwRkRja01zVFVGQlRTeEhRVUZITEdGQlFXRXNSVUZEZEVJc1pVRkJaU3hIUVVGSExFTkJRVU1zUlVGRGJrSXNXVUZCV1N4SFFVRkhMRU5CUVVNc1JVRkRhRUk3UlVGRFFTeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExFbEJRVWtzYTBKQlFWTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVU4yUkN4bFFVRmxMRVZCUTJZc1JVRkRSaXhEUVVGRE8wVkJRMFFzVFVGQlRTd3lRa0ZCTWtJc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wVkJSVE5FTEUxQlFVMHNjVUpCUVhGQ0xFZEJRM3BDTEVOQlFVTXNNa0pCUVRKQ0xFbEJRVWtzYVVKQlFXbENMRU5CUVVNc1JVRkJSU3hEUVVGRExGbEJRVmtzUlVGQlJTeEZRVUZGTEVOQlFVTXNSMEZEYWtVc1MwRkJTU3hwUWtGQmFVSXNRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSU3hEUVVGRkxFVkJRVU1zUjBGRGNrTXNXVUZCV1R0RlFVVnNRaXhQUVVGUExIRkNRVUZ4UWp0QlFVTTVRanRCUVVWQkxFMUJRVTBzV1VGQldTeEhRVUZITzBWQlEyNUNMRlZCUVZVc1JVRkJSVHRKUVVOV0xFMUJRVTBzUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEVml4NVFrRkJlVUlzUlVGQlJTeExRVUZMTzBsQlEyaERMRmRCUVZjc1JVRkJSU3hKUVVGSk8wbEJRMnBDTEUxQlFVMHNSVUZCUlN4SlFVRkpPMGxCUTFvc1UwRkJVeXhGUVVGRkxFbEJRVWs3U1VGRFppeFhRVUZYTEVWQlFVVXNTVUZCU1R0SlFVTnFRaXhwUWtGQmFVSXNSVUZCUlN4SlFVRkpPMGxCUTNaQ0xGbEJRVmtzUlVGQlJTeEZRVUZGTzBsQlEyaENMR05CUVdNc1JVRkJSU3hKUVVGSk8wbEJRM0JDTEd0Q1FVRnJRaXhGUVVGRkxFbEJRVWs3U1VGRGVFSXNNRUpCUVRCQ0xFVkJRVVVzU1VGQlNUdEpRVU5vUXl4cFFrRkJhVUlzUlVGQlJTeEZRVUZGTzBsQlEzSkNMR0ZCUVdFc1JVRkJSU3hKUVVGSk8wbEJRMjVDTEcxQ1FVRnRRaXhGUVVGRkxFVkJRVVU3U1VGRGRrSXNVVUZCVVN4RlFVRkZMRVZCUVVVN1NVRkRXaXhSUVVGUkxFVkJRVVVzU1VGQlNUdEpRVU5rTEZWQlFWVXNSVUZCUlN4RlFVRkZPMGxCUTJRc2EwSkJRV3RDTEVWQlFVVXNTVUZCU1R0SlFVTjRRaXhwUWtGQmFVSXNSVUZCUlN4TFFVRkxPMGxCUTNoQ0xIRkNRVUZ4UWl4RlFVRkZMREpDUVVFeVFqdEpRVU5zUkN4blEwRkJaME1zUlVGQlJTd3lRa0ZCTWtJN1NVRkROMFFzT0VKQlFUaENMRVZCUVVVc01rUkJRWGRETzBsQlEzaEZMR3REUVVGclF5eEZRVU5vUXl3eVJFRkJkME03U1VGRE1VTXNkMEpCUVhkQ0xFVkJRVVVzYVVWQlFUaERPMGxCUTNoRkxHbENRVUZwUWl4RlFVRkZMRU5CUVVNN1JVRkRkRUk3UVVGRFJpeERRVUZETzBGQlJXTXNUVUZCVFN4bFFVRmxMRU5CUVVNN1JVRkRia01zVjBGQlZ5eERRVUZETzBsQlExWXNiVUpCUVcxQ08wbEJRMjVDTEdsQ1FVRnBRanRKUVVOcVFpeFJRVUZSTzBsQlExSXNhVUpCUVdsQ08wbEJRMnBDTEd0Q1FVRnJRanRKUVVOc1FpeGxRVUZsTEVkQlFVY3NNa0pCUVhOQ08wbEJRM2hETEdsQ1FVRnBRanRKUVVOcVFpeDVRa0ZCZVVJN1NVRkRla0k3UlVGRFJpeERRVUZETEVWQlFVVTdTVUZEUkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzZVVKQlFXVXNRMEZCUXp0TlFVTXZRaXhWUVVGVkxFVkJRVVU3VVVGQlJTeEhRVUZITEZsQlFWa3NRMEZCUXp0TlFVRlhPMGxCUXpORExFTkJRVU1zUTBGQlF6dEpRVVZHTEVsQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1RVRkJUVHROUVVOMFFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenRSUVVGRkxGVkJRVlVzUlVGQlJUdFZRVUZGTEVkQlFVY3NXVUZCV1N4RFFVRkRPMUZCUVZjN1RVRkJSU3hEUVVGRExFTkJRVU03U1VGRGVFVXNRMEZCUXp0SlFVVkVMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNSMEZCUnl4bFFVRmxPMGxCUTNaRExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1IwRkJSeXhwUWtGQmFVSTdTVUZETTBNc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4SFFVRkhMSGxDUVVGNVFqdEpRVVV6UkN4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVkQlFVY3NiVUpCUVcxQ08wbEJRemxETEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUjBGQlJ5eHJRa0ZCYTBJN1NVRkZOVU1zU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4RFFVRkRPMGxCUTJ4Q0xFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhwUWtGQmFVSTdTVUZGTVVNc1NVRkJTU3hEUVVGRExIbENRVUY1UWl4SFFVRkhMRU5CUVVNN1NVRkZiRU1zU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4SlFVRkpMSFZDUVVGWkxFTkJRVU1zVVVGQlVTeERRVUZETzBsQlEyaEVMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNSMEZCUnl4cFFrRkJhVUlzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhUUVVGVE8wbEJRM0pGTEc5Q1FVRnZRaXhEUVVGRExFMUJRVTA3VFVGRGVrSXNUVUZCVFR0UlFVRkZMRk5CUVZNN1VVRkJSVHROUVVGakxFTkJRVU1zUjBGQlJ5eHBRa0ZCYVVJc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdUVUZEZGtVc1NVRkRSU3hoUVVGaExFdEJRVXNzYzBKQlFXRXNRMEZCUXl4VFFVRlRMRWxCUTNwRExGTkJRVk1zUzBGQlN5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFVkJRM0JETzFGQlEwRXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEZOQlFWTTdVVUZEYkVNc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eEpRVUZKTEhWQ1FVRlpMRU5CUVVNc1VVRkJVU3hEUVVGRE8wMUJRMnhFTzBsQlEwWXNRMEZCUXl4RFFVRkRPMFZCUTBvN1JVRkZRU3hOUVVGTkxIVkNRVUYxUWl4RFFVRkRMRTlCUVU4c1JVRkJSVHRKUVVOeVF5eE5RVUZOTEZGQlFWRXNSMEZCUnl4TlFVRk5MRWxCUVVFc2RVSkJRV01zUlVGRGJrTXNTVUZCUVN4elFrRkJWU3hGUVVGRExGTkJRVk1zUlVGQlJTeFBRVUZQTEVOQlFVTXNSVUZET1VJN1RVRkJSU3hOUVVGTkxFVkJRVVU3U1VGQlRTeERRVUZETEVWQlEycENPMDFCUVVVc1owSkJRV2RDTEVWQlFVVTdTVUZCVHl4RFFVTTNRaXhEUVVGRE8wbEJRMFFzVFVGQlRUdE5RVUZGTEZsQlFWazdUVUZCUlN4VlFVRlZMRWRCUVVjc1EwRkJRenRKUVVGRkxFTkJRVU1zUjBGQlJ5eFJRVUZSTEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTNoRUxFbEJRMFVzUTBGQlF5eFpRVUZaTEVsQlEySXNUMEZCVHl4WlFVRlpMRU5CUVVNc1RVRkJUU3hMUVVGTExGRkJRVkVzU1VGRGRrTXNUMEZCVHl4WlFVRlpMRU5CUVVNc2FVSkJRV2xDTEV0QlFVc3NVVUZCVVN4RlFVTnNSRHROUVVOQkxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlExb3NhVVJCUVdkRUxGRkJRVk1zUlVGRE5VUXNRMEZCUXp0SlFVTklPMGxCUTBFN1NVRkRRU3hQUVVGUE8wMUJRMHdzVFVGQlRTeEZRVUZGTEZsQlFWa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTVHROUVVOc1F5eHBRa0ZCYVVJc1JVRkJSU3haUVVGWkxFTkJRVU1zYVVKQlFXbENMRWRCUVVjc1NVRkJTVHROUVVONFJDeHJRa0ZCYTBJc1JVRkJSU3haUVVGWkxFTkJRVU1zYTBKQlFXdENMRWRCUVVjc1NVRkJTVHROUVVNeFJDeGpRVUZqTEVWQlFVVXNXVUZCV1N4RFFVRkRMR05CUVdNc1IwRkJSeXhKUVVGSk8wMUJRMnhFTEdsQ1FVRnBRaXhGUVVGRkxGbEJRVmtzUTBGQlF5eHBRa0ZCYVVJN1RVRkRha1FzYlVKQlFXMUNMRVZCUVVVc1ZVRkJWU3hEUVVGRE8wbEJRMnhETEVOQlFVTTdSVUZEU0RzN1JVRkZRVHRGUVVOQkxFMUJRVTBzYzBKQlFYTkNMRU5CUVVFc1JVRkJSenRKUVVGQkxFbEJRVUVzYlVKQlFVRXNSVUZCUVN4dlFrRkJRU3hGUVVGQkxHOUNRVUZCTEVWQlFVRXNiMEpCUVVFc1JVRkJRU3h2UWtGQlFTeEZRVUZCTEc5Q1FVRkJPMGxCUXpkQ0xFMUJRVTBzVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETzBsQlEzcERMRWxCUVVrc2EwSkJRV3RDTzBsQlEzUkNMRWxCUVVrN1RVRkRSaXhyUWtGQmEwSXNSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4UFFVRlBMRU5CUVVNN1NVRkRiRVVzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZPMDFCUTFZc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5d3lRMEZCTWtNc1JVRkJSU3hEUVVGRExFTkJRVU03U1VGREwwUTdTVUZEUVN4TlFVRk5PMDFCUVVVc1ZVRkJWU3hGUVVGRk8wbEJRV2xDTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlF6bEVMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETzAxQlEzSkNMRlZCUVZVc1JVRkJSVHRSUVVOV0xFZEJRVWNzWjBKQlFXZENPMUZCUTI1Q0xIRkNRVUZ4UWl4RlFVTnVRaXhGUVVGQkxHMUNRVUZCTEVkQlFVRXNhMEpCUVd0Q0xHTkJRVUVzYlVKQlFVRXNkVUpCUVd4Q0xHMUNRVUZCTEVOQlFXOUNMRTFCUVUwc1MwRkJTU3d5UWtGQk1rSTdVVUZETTBRc1owTkJRV2RETEVWQlF6bENMRVZCUVVFc2IwSkJRVUVzUjBGQlFTeHJRa0ZCYTBJc1kwRkJRU3h2UWtGQlFTeDFRa0ZCYkVJc2IwSkJRVUVzUTBGQmIwSXNhVUpCUVdsQ0xFdEJRVWtzTWtKQlFUSkNPMUZCUTNSRkxHdERRVUZyUXl4RlFVTm9ReXhGUVVGQkxHOUNRVUZCTEVkQlFVRXNhMEpCUVd0Q0xHTkJRVUVzYjBKQlFVRXNkVUpCUVd4Q0xHOUNRVUZCTEVOQlFXOUNMR3RDUVVGclFpeExRVU4wUXl3eVJFRkJkME03VVVGRE1VTXNPRUpCUVRoQ0xFVkJRelZDTEVWQlFVRXNiMEpCUVVFc1IwRkJRU3hyUWtGQmEwSXNZMEZCUVN4dlFrRkJRU3gxUWtGQmJFSXNiMEpCUVVFc1EwRkJiMElzWTBGQll5eExRVU5zUXl3eVJFRkJkME03VVVGRE1VTXNjMEpCUVhOQ0xFVkJRM0JDTEVWQlFVRXNiMEpCUVVFc1IwRkJRU3hyUWtGQmEwSXNZMEZCUVN4dlFrRkJRU3gxUWtGQmJFSXNiMEpCUVVFc1EwRkJiMElzYVVKQlFXbENMRXRCUTNKRExIVkVRVUZ2UXp0UlFVTjBReXgzUWtGQmQwSXNSVUZEZEVJc1JVRkJRU3h2UWtGQlFTeEhRVUZCTEd0Q1FVRnJRaXhqUVVGQkxHOUNRVUZCTEhWQ1FVRnNRaXh2UWtGQlFTeERRVUZ2UWl4dFFrRkJiVUlzUzBGRGRrTTdUVUZEU2p0SlFVTkdMRU5CUVVNc1EwRkJRenRGUVVOS096dEZRVVZCTzBWQlEwRTdSVUZEUVR0RlFVTkJPMFZCUTBFc1owSkJRV2RDTEVOQlFVRXNSVUZCUnp0SlFVTnFRaXhOUVVGTk8wMUJRMG9zVlVGQlZTeEZRVUZGTzFGQlExWXNjVUpCUVhGQ08xRkJRM0pDTEdkRFFVRm5RenRSUVVOb1F6dE5RVU5HTzBsQlEwWXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdTVUZEZWtJN1NVRkRRU3hOUVVGTkxIRkNRVUZ4UWl4SFFVRkhMSGxDUVVGNVFpeEhRVU51UkN4eFFrRkJjVUlzUjBGRGNrSXNaME5CUVdkRE8wbEJRM0JETEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1ZVRkJWU3hEUVVGRExFMUJRVTA3VFVGQlFTeEpRVUZCTEhGQ1FVRkJPMDFCUTNKRExFMUJRVTA3VVVGQlJUdE5RVUZYTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzAxQlF6VkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZEY0VJc1ZVRkJWU3hEUVVGRExGZEJRVmNzUjBGQlFTeHhRa0ZCUVN4SFFVTjBRaXhWUVVGVkxFTkJRVU1zVjBGQlZ5eGpRVUZCTEhGQ1FVRkJMSFZDUVVGMFFpeHhRa0ZCUVN4RFFVRjNRaXhSUVVGUkxFVkJRMmhETEVsQlEwWXNRMEZCUXp0SlFVTklMRU5CUVVNc1JVRkJSU3h4UWtGQmNVSXNRMEZCUXp0RlFVTXpRanRGUVVWQkxHOUNRVUZ2UWl4RFFVRkJMRVZCUVVjN1NVRkRja0lzU1VGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZPMDFCUTNaQ0xGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRPMGxCUTI1RE8wVkJRMFk3UlVGRlFTeE5RVUZOTEdsQ1FVRnBRaXhEUVVOeVFpeFhRVUZYTEVWQlExZ3NiVUpCUVcxQ0xFZEJRVWNzUTBGQlF5eERRVUZETEVWQlEzaENMR1ZCUVdVc1JVRkRaanRKUVVOQkxFMUJRVTA3VFVGQlJUdEpRVUZSTEVOQlFVTXNSMEZCUnl4dFFrRkJiVUk3U1VGRGRrTXNUVUZCVFR0TlFVTktMRlZCUVZVc1JVRkJSVHRSUVVGRkxIbENRVUY1UWp0UlFVRkZPMDFCUVd0Q08wbEJRemRFTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlJYcENMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVU3VFVGRGFFSXNUMEZCVHl4SlFVRkpPMGxCUTJJN1NVRkRRVHRKUVVOQkxFbEJRVWtzUTBGQlF5eGxRVUZsTEVWQlFVVTdUVUZEY0VJc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eERRVUZETzBsQlEzQkNPenRKUVVWQk8wbEJRMEVzV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNN1NVRkZha01zU1VGQlNTeERRVUZETEdWQlFXVXNSVUZCUlR0TlFVTndRaXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1JVRkJSU3hEUVVGRE8wbEJRek5DTzBsQlJVRXNUVUZCVFN4clFrRkJhMElzUjBGQlJ5eEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFZEJRVWNzUTBGQlF6dEpRVU0zUkN4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVkQlFVY3NhMEpCUVd0Q08wbEJSVzVFTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUlVGQlJUdE5RVU4wUWl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNTVUZCU1N4RFFVRkRPMGxCUTJwRE8wbEJSVUVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRTFCUVUwc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVU5zUXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNWMEZCVnl4RlFVRkZPMDFCUTJwRExFZEJRVWM3U1VGRFRDeERRVUZETEVOQlFVTXNSVUZEUml4SlFVRkpMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNRMEZCUXl4RFFVTTVRaXhEUVVGRE8wbEJSVVlzVFVGQlRUdE5RVU5LTEZWQlFWVXNSVUZCUlR0UlFVRkZMR2xDUVVGcFFpeEZRVUZGTzAxQlFTdENPMGxCUTJ4RkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE96dEpRVVY2UWp0SlFVTkJPMGxCUTBFc1NVRkJTU3hEUVVGRExEaENRVUU0UWl4RlFVRkZPMDFCUTI1RExFOUJRVThzUTBGRFRDeERRVUZETEVOQlFVTTdUVUZCUlR0TlFVTktMRWxCUVVrc1EwRkJSVHROUVVGQkxFTkJRMUE3U1VGRFNEczdTVUZGUVN4VFFVRlRMRWRCUVVjc1NVRkJRU3hwUWtGQlV5eEZRVUZETEZOQlFWTXNSVUZCUnl4TFFVRkxMRXRCUVUwN1RVRkRNME1zUjBGQlJ5eExRVUZMTzAxQlExSXNaVUZCWlN4RlFVRkZMRzFDUVVGdFFpeERRVUZETEdWQlFXVTdUVUZEY0VRc2IwSkJRVzlDTEVWQlFVVXNiVUpCUVcxQ0xFTkJRVU03U1VGRE5VTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkZTQ3hKUVVGSkxFOUJRVThzUzBGQlN5eHJRa0ZCVXl4RFFVRkRMRkZCUVZFc1NVRkJTU3hOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFVkJRVVU3VFVGRGVrVXNUVUZCVFN4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVObUxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVThzUzBGQlN5eEpRVUZMTzFGQlF6VkRMRWxCUVVrc1MwRkJTeXhEUVVGRExFdEJRVXNzUlVGQlJUdFZRVU5tTEUxQlFVMHNlVUpCUVhsQ0xFZEJRVWNzVFVGQlRTeEpRVUZCTERSQ1FVRnRRaXhGUVVONlJDeFBRVUZQTEVWQlExQTdXVUZEUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhEUVVGRExFdEJRVXM3V1VGRGNrSTdWVUZEUml4RFFVRkRMRVZCUTBRc1NVRkJTU3hEUVVGRExHTkJRMUFzUTBGQlF6dFZRVU5FTEV0QlFVc3NRMEZCUXl4NVFrRkJlVUlzUjBGQlJ5eDVRa0ZCZVVJN1VVRkROMFE3VVVGRFFTeFBRVUZQTEV0QlFVczdUVUZEWkN4RFFVRkRMRU5CUTBnc1EwRkJRenRKUVVOSU8wbEJSVUVzVFVGQlRTeHBRa0ZCYVVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZGY0VNc1NVRkJTU3huUWtGQlowSXNSMEZCUnl4TFFVRkxPMGxCUXpWQ0xFbEJRMFVzUTBGQlF5eEpRVUZCTEd0RFFVRXdRaXhGUVVGRExGZEJRVmNzUTBGQlF5eFhRVUZYTEVWQlFVVXNUMEZCVHl4RFFVRkRMRWxCUXpkRUxFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hGUVVNdlFqdE5RVU5CTEUxQlFVMHNVMEZCVXl4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVTTNReXhYUVVGWExFTkJRVU1zVjBGQlZ5eEZRVU4yUWl4WFFVRlhMRU5CUVVNc1YwRkJWeXhGUVVOMlFpeFBRVU5HTEVOQlFVTTdUVUZEUkN4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNN08wMUJSVGRETzAxQlEwRTdUVUZEUVR0TlFVTkJPMDFCUTBFc1owSkJRV2RDTEVkQlEyUXNWVUZCVlN4RFFVRkRMR05CUVdNc1NVRkRla0lzVTBGQlV5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkRaaXhWUVVGVkxFTkJRVU1zVlVGQlZTeExRVUZMTEdWQlFXVTdUVUZETTBNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RlFVRkZPMUZCUTNKQ0xGTkJRVk1zUjBGQlJ5eEpRVUZCTEdsQ1FVRlRMRVZCUVVNc1UwRkJVeXhGUVVGSExFdEJRVXNzUzBGQlRUdFZRVU16UXl4SFFVRkhMRXRCUVVzN1ZVRkRVaXhqUVVGakxFVkJRVVU3VVVGRGJFSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1RVRkRUQ3hEUVVGRExFMUJRVTBzU1VGQlNTeERRVUZETEdWQlFXVXNSVUZCUlR0UlFVTXpRaXhOUVVGTk8xVkJRVVVzVVVGQlVTeEZRVUZGTzFGQlFWa3NRMEZCUXl4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVTTFSQ3hWUVVGVkxFTkJRVU1zWTBGRFlpeERRVUZETzFGQlJVUXNVMEZCVXl4SFFVRkhMRWxCUVVFc2FVSkJRVk1zUlVGQlF5eFRRVUZUTEVWQlFVY3NTMEZCU3l4TFFVRk5PMVZCUXpORExFZEJRVWNzUzBGQlN6dFZRVU5TTEdOQlFXTXNSVUZCUlR0WlFVTmtMRWRCUVVjc1MwRkJTeXhEUVVGRExHTkJRV003V1VGRGRrSXNSMEZCUnl4RlFVRkZMRmRCUVZjc1NVRkJTVHRWUVVOMFFqdFJRVU5HTEVOQlFVTXNRMEZCUXl4RFFVRkRPMDFCUTB3N1NVRkRSanRKUVVWQkxFbEJRVWtzVVVGQlVTeEhRVUZITEVsQlFVazdPMGxCUlc1Q08wbEJRMEU3U1VGRFFTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFbEJRVWtzUlVGQlF5eFhRVUZYTEdGQlFWZ3NWMEZCVnl4bFFVRllMRmRCUVZjc1EwRkJSU3haUVVGWkxFZEJRVVU3VFVGRGJrUXNVMEZCVXl4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExEUkNRVUUwUWl4RFFVRkRMRk5CUVZNc1EwRkJRenRKUVVOb1JUdEpRVVZCTEVsQlFVa3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eE5RVUZOTEV0QlFVc3NRMEZCUXl4RlFVRkZPMDFCUTNwRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhwUTBGQk1FSXNRMEZCUXp0SlFVTnVSQ3hEUVVGRExFMUJRVTA3VFVGRFRDeE5RVUZOTEVOQlFVTXNVMEZCVXl4RlFVRkZMREpDUVVFeVFpeERRVUZETEVkQlF6VkRMRTFCUVUwc1NVRkJTU3hEUVVGRExHZERRVUZuUXl4RFFVRkRMRk5CUVZNc1EwRkJRenROUVVONFJDeFJRVUZSTEVkQlFVY3NVMEZCVXp0TlFVTndRaXhUUVVGVExFZEJRVWNzTWtKQlFUSkNPMGxCUTNwRE96dEpRVVZCTzBsQlEwRTdTVUZEUVN4SlFVRkpMRWxCUVVrc1EwRkJReXg1UWtGQmVVSXNTMEZCU3l4clFrRkJhMElzUlVGQlJUdE5RVU42UkN4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExHbERRVUV3UWl4RFFVRkRPMGxCUXpkRE8wbEJSVUVzVFVGQlRUdE5RVUZGTzBsQlFWY3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdTVUZETlVNc1NVRkJTVHROUVVGRk8wbEJRV01zUTBGQlF5eEhRVUZITEZWQlFWVTdTVUZEYkVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eGhRVUZoTEVOQlFVTXNSVUZCUlR0TlFVTTNRaXhoUVVGaExFZEJRVWNzU1VGQlNUdEpRVU4wUWp0SlFVVkJMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETzAxQlEzSkNMRlZCUVZVc1JVRkJSVHRSUVVOV0xFZEJRVWNzVlVGQlZUdFJRVU5pTEUxQlFVMHNSVUZCUlN4VFFVRlRPMUZCUTJwQ0xGZEJRVmNzUlVGQlJUdFZRVUZGTEVkQlFVY3NWMEZCVnp0VlFVRkZMRkZCUVZFc1JVRkJSVHRSUVVGdlFpeERRVUZETzFGQlF6bEVMR2xDUVVGcFFqdFJRVU5xUWl4aFFVRmhPMUZCUTJJN1RVRkRSanRKUVVOR0xFTkJRVU1zUTBGQlF6dEpRVVZHTEVsQlFVa3NlVUpCUVhsQ0xFVkJRVVU3VFVGRE4wSTdUVUZEUVR0TlFVTkJMRWxCUVVrc1EwRkJReXhUUVVGVExFbEJRVWtzUTBGQlF6dEpRVU55UWp0SlFVVkJMRWxCUVVrc1EwRkJReXg1UWtGQmVVSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExHZENRVUZuUWl4SFFVRkhMRU5CUVVNc1JVRkJSVHROUVVOMlJTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dEpRVU42UWl4RFFVRkRMRTFCUVUwN1RVRkRUQ3hKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1EwRkJRenROUVVNeFFpeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zTWtKQlFXOUNMRU5CUVVNN1RVRkRNME1zVDBGQlR5eEpRVUZKTzBsQlEySTdTVUZGUVN4UFFVRlBMRU5CUVVNc1UwRkJVeXhGUVVGRkxGRkJRVkVzUTBGQlF6dEZRVU01UWp0RlFVVkJMR2xDUVVGcFFpeERRVUZCTEVWQlFVYzdTVUZEYkVJc1RVRkJUVHROUVVGRk8wbEJRVmNzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03U1VGRE5VTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFbEJRVWtzVlVGQlZTeERRVUZETEZkQlFWY3NSVUZCUlR0TlFVTnNSQ3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1ZVRkJWU3hEUVVGRExGZEJRVmNzUTBGQlF6dEpRVU5vUkR0RlFVTkdPMFZCUlVFc2NVSkJRWEZDTEVOQlFVTXNZVUZCWVN4RlFVRkZPMGxCUTI1RExFMUJRVTA3VFVGQlJUdEpRVUZYTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlF6VkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETzAxQlFVVXNWVUZCVlN4RlFVRkZPMUZCUVVVc1IwRkJSeXhWUVVGVk8xRkJRVVU3VFVGQll6dEpRVUZGTEVOQlFVTXNRMEZCUXp0RlFVTXhSVHRGUVVWQkxHTkJRV01zUTBGQlF5eE5RVUZOTEVWQlFVVTdTVUZEY2tJc1RVRkJUVHROUVVGRk8wbEJRVmNzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03U1VGRE5VTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU03VFVGQlJTeFZRVUZWTEVWQlFVVTdVVUZCUlN4SFFVRkhMRlZCUVZVN1VVRkJSVHROUVVGUE8wbEJRVVVzUTBGQlF5eERRVUZETzBWQlEyNUZPMFZCUlVFc1owSkJRV2RDTEVOQlFVRXNSVUZCUnp0SlFVTnFRaXhOUVVGTk8wMUJRVVU3U1VGQlZ5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU0xUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF6dE5RVUZGTEZWQlFWVXNSVUZCUlR0UlFVRkZMRWRCUVVjc1ZVRkJWVHRSUVVGRkxFMUJRVTBzUlVGQlJTeERRVUZETzAxQlFVVTdTVUZCUlN4RFFVRkRMRU5CUVVNN1JVRkRka1U3UlVGRlFTeG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFVkJRVVU3U1VGRGVrSXNUVUZCVFR0TlFVRkZPMGxCUVZjc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkROVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNN1RVRkJSU3hWUVVGVkxFVkJRVVU3VVVGQlJTeEhRVUZITEZWQlFWVTdVVUZCUlR0TlFVRlRPMGxCUVVVc1EwRkJReXhEUVVGRE8wVkJRM0pGTzBWQlJVRXNUVUZCVFN3MFFrRkJORUlzUTBGQlF5eE5RVUZOTEVWQlFVVTdTVUZEZWtNc1RVRkJUU3haUVVGWkxFZEJRVWNzVFVGQlRTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVTndReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGUExFdEJRVXNzU1VGQlN6dE5RVU42UXl4TlFVRk5PMUZCUVVVc1VVRkJVVHRSUVVGRk8wMUJRV2RDTEVOQlFVTXNSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZEYUVVc1MwRkJTeXhEUVVGRExFdEJRMUlzUTBGQlF6dE5RVU5FTEU5QlFVOHNRMEZCUXl4UlFVRlJMRVZCUVVVc1pVRkJaU3hGUVVGRkxFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTTdTVUZEZEVRc1EwRkJReXhEUVVOSUxFTkJRVU03U1VGRlJDeE5RVUZOTEZOQlFWTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRjRUlzV1VGQldTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxHVkJRV1VzUlVGQlJTeExRVUZMTEVOQlFVTXNTMEZCU3p0TlFVTXpSQ3hKUVVGSkxGRkJRVkVzU1VGQlNTeERRVUZETEdWQlFXVXNSVUZCUlR0UlFVTm9ReXhOUVVGTkxIRkNRVUZ4UWl4SFFVRkhMRGhDUVVFNFFpeERRVU14UkN4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zVFVGQlRTeEZRVU53UWl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zWlVGQlpTeEZRVU0zUWl4UlFVTkdMRU5CUVVNN1VVRkZSQ3hUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVYzdWVUZEYWtJc1IwRkJSeXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETzFWQlEyaENMRmRCUVZjc1JVRkJSU3hSUVVGUk8xVkJRM0pDTzFGQlEwWXNRMEZCUXp0TlFVTklMRU5CUVVNc1RVRkJUU3hKUVVGSkxFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4alFVRmpMRVZCUVVVN1VVRkRka003VVVGRFFUdFJRVU5CTEZOQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETzAxQlEyeERPMDFCUTBFN1NVRkRSaXhEUVVGRExFTkJRVU03TzBsQlEwWXNUMEZCVHl4VFFVRlRPMFZCUTJ4Q08wVkJSVUVzYVVKQlFXbENMRU5CUVVNc1lVRkJZU3hGUVVGRk8wbEJReTlDTEU5QlFVOHNTVUZCU1N4UFFVRlBMRU5CUVVVc1QwRkJUeXhKUVVGTE8wMUJRemxDTEVsQlFVa3NWMEZCVnl4SFFVRkhMRXRCUVVzN1RVRkZka0lzVFVGQlRTeFZRVUZWTEVkQlFVY3NWVUZCVlN4RFFVRkRMRTFCUVUwN1VVRkRiRU1zVjBGQlZ5eEhRVUZITEVsQlFVazdVVUZEYkVJc1QwRkJUeXhEUVVGRE8xVkJRVVVzVVVGQlVTeEZRVUZGTEVsQlFVazdWVUZCUlN4bFFVRmxMRVZCUVVVN1VVRkJTeXhEUVVGRExFTkJRVU03VFVGRGNFUXNRMEZCUXl4RlFVRkZMRmxCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03TzAxQlJXUTdUVUZEUVR0TlFVTkJPMDFCUTBFc1RVRkJUU3d5UWtGQk1rSXNSMEZCUnp0UlFVTnNReXhKUVVGSkxFVkJRVVVzWVVGQllTeERRVUZETEVsQlFVazdVVUZEZUVJc1NVRkJTU3hGUVVGRkxHRkJRV0VzUTBGQlF5eEpRVUZKTzFGQlEzaENMRVZCUVVVc1JVRkJSU3hoUVVGaExFTkJRVU1zUlVGQlJUdFJRVU53UWl4TFFVRkxMRVZCUVVVc1lVRkJZU3hEUVVGRE8wMUJRM1pDTEVOQlFVTTdUVUZGUkN4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTTdVVUZCUlN4UlFVRlJMRVZCUVVVN1RVRkJORUlzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVTnVSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVUZGTEZGQlFWRTdVVUZCUlR0TlFVRm5RaXhEUVVGRExFdEJRVXM3VVVGRGRrTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSVHRWUVVOb1FpeFpRVUZaTEVOQlFVTXNWVUZCVlN4RFFVRkRPMVZCUTNoQ0xFOUJRVThzUTBGQlF6dFpRVUZGTEZGQlFWRTdXVUZCUlR0VlFVRm5RaXhEUVVGRExFTkJRVU03VVVGRGVFTTdUVUZEUml4RFFVRkRMRU5CUVVNc1EwRkRSQ3hMUVVGTExFTkJRVVVzUTBGQlF5eEpRVUZMTzFGQlExb3NhVUpCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlExb3NTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSVHRWUVVOb1FpeFpRVUZaTEVOQlFVTXNWVUZCVlN4RFFVRkRPMVZCUTNoQ0xFOUJRVThzUTBGQlF6dFpRVUZGTEZGQlFWRXNSVUZCUlN4SlFVRkpPMWxCUVVVc1pVRkJaU3hGUVVGRk8xVkJRVXNzUTBGQlF5eERRVUZETzFGQlEzQkVPMDFCUTBZc1EwRkJReXhEUVVGRE8wbEJRMDRzUTBGQlF5eERRVUZETzBWQlEwbzdSVUZGUVN4TlFVRk5MSEZDUVVGeFFpeERRVUZETEZsQlFWa3NSVUZCUlR0SlFVTjRReXhOUVVGTk8wMUJRVVU3U1VGQlZ5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVVUxUXl4TlFVRk5MR0ZCUVdFc1IwRkJSenROUVVGRkxFZEJRVWNzVlVGQlZTeERRVUZETEUxQlFVMHNRMEZCUXl4WlFVRlpPMGxCUVVVc1EwRkJRenRKUVVVMVJDeE5RVUZOTzAxQlFVVXNVVUZCVVN4RlFVRkZMR05CUVdNN1RVRkJSVHRKUVVGblFpeERRVUZETEVkQlEycEVMRTFCUVUwc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMR0ZCUVdFc1EwRkJReXhMUVVGTExFTkJRVU03U1VGRmJrUXNTVUZCU1N4alFVRmpMRWxCUVVrc1EwRkJReXhsUVVGbExFVkJRVVU3VFVGRGRFTXNUVUZCVFN4eFFrRkJjVUlzUjBGQlJ5dzRRa0ZCT0VJc1EwRkRNVVFzWVVGQllTeERRVUZETEUxQlFVMHNSVUZEY0VJc1lVRkJZU3hEUVVGRExHVkJRV1VzUlVGRE4wSXNZMEZEUml4RFFVRkRPMDFCUlVRc1lVRkJZU3hEUVVGRExGZEJRVmNzUjBGQlJ5eGpRVUZqTzAxQlF6RkRMR0ZCUVdFc1EwRkJReXh4UWtGQmNVSXNSMEZCUnl4eFFrRkJjVUk3U1VGRE4wUTdTVUZGUVN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF6dE5RVU55UWl4VlFVRlZMRVZCUVVVN1VVRkRWaXhIUVVGSExGVkJRVlU3VVVGRFlpeE5RVUZOTEVWQlFVVTdWVUZCUlN4SFFVRkhMRlZCUVZVc1EwRkJReXhOUVVGTk8xVkJRVVVzUTBGQlF5eFpRVUZaTEVkQlFVYzdVVUZCWXp0TlFVTm9SVHRKUVVOR0xFTkJRVU1zUTBGQlF6dEZRVU5LTzBWQlJVRXNZMEZCWXl4RFFVRkRMRmRCUVZjc1JVRkJSVHRKUVVNeFFpeE5RVUZOTzAxQlFVVTdTVUZCVnl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTTFReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXp0TlFVRkZMRlZCUVZVc1JVRkJSVHRSUVVGRkxFZEJRVWNzVlVGQlZUdFJRVUZGTzAxQlFWazdTVUZCUlN4RFFVRkRMRU5CUVVNN1JVRkRlRVU3UlVGRlFTeFpRVUZaTEVOQlFVTXNVMEZCVXl4RlFVRkZPMGxCUTNSQ0xFMUJRVTA3VFVGQlJUdEpRVUZYTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlF6VkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETzAxQlFVVXNWVUZCVlN4RlFVRkZPMUZCUVVVc1IwRkJSeXhWUVVGVk8xRkJRVVU3VFVGQlZUdEpRVUZGTEVOQlFVTXNRMEZCUXp0RlFVTjBSVHRGUVVWQkxHOUNRVUZ2UWl4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTzBsQlEzUkRMRTFCUVUwN1RVRkJSVHRKUVVGWExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRelZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRE8wMUJRM0pDTEZWQlFWVXNSVUZCUlR0UlFVRkZMRWRCUVVjc1ZVRkJWVHRSUVVGRk8wMUJRV3RDTzBsQlEycEVMRU5CUVVNc1EwRkJRenRGUVVOS08wVkJSVUVzYTBKQlFXdENMRU5CUVVNc1VVRkJVU3hGUVVGRk8wbEJRek5DTEUxQlFVMDdUVUZCUlR0SlFVRlhMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMGxCUXpWRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPMDFCUTNKQ0xGVkJRVlVzUlVGQlJUdFJRVUZGTEVkQlFVY3NWVUZCVlR0UlFVRkZMR05CUVdNc1JVRkJSVHROUVVGVE8wbEJRM2hFTEVOQlFVTXNRMEZCUXp0RlFVTktPMFZCUlVFc2MwSkJRWE5DTEVOQlFVTXNXVUZCV1N4RlFVRkZPMGxCUTI1RExFMUJRVTA3VFVGQlJUdEpRVUZYTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlF6VkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETzAxQlEzSkNMRlZCUVZVc1JVRkJSVHRSUVVGRkxFZEJRVWNzVlVGQlZUdFJRVUZGTEd0Q1FVRnJRaXhGUVVGRk8wMUJRV0U3U1VGRGFFVXNRMEZCUXl4RFFVRkRPMFZCUTBvN1JVRkZRU3h2UWtGQmIwSXNRMEZCUXl4cFFrRkJhVUlzUlVGQlJUdEpRVU4wUXl4TlFVRk5PMDFCUVVVN1NVRkJWeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRKUVVNMVF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenROUVVOeVFpeFZRVUZWTEVWQlFVVTdVVUZCUlN4SFFVRkhMRlZCUVZVN1VVRkJSVHROUVVGclFqdEpRVU5xUkN4RFFVRkRMRU5CUVVNN1JVRkRTanRGUVVWQkxHbERRVUZwUXl4RFFVRkRMSGxDUVVGNVFpeEZRVUZGTzBsQlF6TkVMRTFCUVUwN1RVRkJSVHRKUVVGWExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRelZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRE8wMUJRM0pDTEZWQlFWVXNSVUZCUlR0UlFVRkZMRWRCUVVjc1ZVRkJWVHRSUVVGRk8wMUJRVEJDTzBsQlEzcEVMRU5CUVVNc1EwRkJRenRGUVVOS08wVkJSVUVzT0VKQlFUaENMRU5CUVVNc2IwSkJRVzlDTEVWQlFVVTdTVUZEYmtRc1RVRkJUVHROUVVGRk8wbEJRVmNzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03U1VGRE5VTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU03VFVGRGNrSXNWVUZCVlN4RlFVRkZPMUZCUTFZc1IwRkJSeXhWUVVGVk8xRkJRMklzTUVKQlFUQkNMRVZCUVVVN1RVRkRPVUk3U1VGRFJpeERRVUZETEVOQlFVTTdSVUZEU2p0RlFVVkJMR3RDUVVGclFpeERRVUZETEZGQlFWRXNSVUZCUlR0SlFVTXpRaXhOUVVGTk8wMUJRVVU3U1VGQlZ5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU0xUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF6dE5RVU55UWl4VlFVRlZMRVZCUVVVN1VVRkJSU3hIUVVGSExGVkJRVlU3VVVGQlJTeFpRVUZaTEVWQlFVVTdUVUZCVXp0SlFVTjBSQ3hEUVVGRExFTkJRVU03UlVGRFNqdEZRVVZCTEhOQ1FVRnpRaXhEUVVGRExFbEJRVWtzUlVGQlJUdEpRVU16UWl4TlFVRk5PMDFCUVVVN1NVRkJWeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRKUVVNMVF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenROUVVOeVFpeFZRVUZWTEVWQlFVVTdVVUZCUlN4SFFVRkhMRlZCUVZVN1VVRkJSU3h0UWtGQmJVSXNSVUZCUlR0TlFVRkxPMGxCUTNwRUxFTkJRVU1zUTBGQlF6dEZRVU5LTzBWQlJVRXNNa0pCUVRKQ0xFTkJRVU1zVlVGQlZTeEZRVUZGTzBsQlEzUkRMRTFCUVUwN1RVRkJSVHRKUVVGWExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRelZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRE8wMUJRVVVzVlVGQlZTeEZRVUZGTzFGQlFVVXNSMEZCUnl4VlFVRlZPMUZCUVVVN1RVRkJWenRKUVVGRkxFTkJRVU1zUTBGQlF6dEZRVU4yUlR0RlFVVkJMRzlDUVVGdlFpeERRVUZETEUxQlFVMHNSVUZCUlR0SlFVTXpRaXhOUVVGTk8wMUJRVVU3U1VGQlZ5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU0xUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF6dE5RVU55UWl4VlFVRlZMRVZCUVVVN1VVRkJSU3hIUVVGSExGVkJRVlU3VVVGQlJTeHBRa0ZCYVVJc1JVRkJSVHROUVVGUE8wbEJRM3BFTEVOQlFVTXNRMEZCUXp0RlFVTktPMFZCUlVFc1owSkJRV2RDTEVOQlFVTXNZVUZCWVN4RlFVRkZPMGxCUXpsQ0xFMUJRVTA3VFVGQlJUdEpRVUZYTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlF6VkRMRTFCUVUwN1RVRkJSVHRKUVVGdFFpeERRVUZETEVkQlFVY3NZVUZCWVR0SlFVTTFReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXp0TlFVTnlRaXhWUVVGVkxFVkJRVVU3VVVGQlJTeEhRVUZITEZWQlFWVTdVVUZCUlR0TlFVRnRRanRKUVVOc1JDeERRVUZETEVOQlFVTTdSVUZEU2p0RlFVVkJMRzlDUVVGdlFpeERRVUZETEdsQ1FVRnBRaXhGUVVGRk8wbEJRM1JETEUxQlFVMDdUVUZCUlR0SlFVRlhMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMGxCUXpWRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPMDFCUTNKQ0xGVkJRVlVzUlVGQlJUdFJRVUZGTEVkQlFVY3NWVUZCVlR0UlFVRkZPMDFCUVd0Q08wbEJRMnBFTEVOQlFVTXNRMEZCUXp0RlFVTktPMFZCUlVFc2JVSkJRVzFDTEVOQlFVRXNSVUZCUnp0SlFVTndRaXhOUVVGTk8wMUJRVVU3U1VGQlZ5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU0xUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF6dE5RVU55UWl4VlFVRlZMRVZCUVVVN1VVRkRWaXhIUVVGSExGbEJRVmtzUTBGQlF5eFZRVUZWTzFGQlF6RkNMRTFCUVUwc1JVRkJSU3hWUVVGVkxFTkJRVU1zVFVGQlRUdFJRVU42UWl4WFFVRlhMRVZCUVVVc1ZVRkJWU3hEUVVGRExGZEJRVmM3VVVGRGJrTXNhMEpCUVd0Q0xFVkJRVVVzVlVGQlZTeERRVUZETEd0Q1FVRnJRanRSUVVOcVJDeHhRa0ZCY1VJc1JVRkJSU3hWUVVGVkxFTkJRVU1zY1VKQlFYRkNPMUZCUTNaRUxHZERRVUZuUXl4RlFVTTVRaXhWUVVGVkxFTkJRVU1zWjBOQlFXZERPMUZCUXpkRExHbENRVUZwUWl4RlFVRkZMRlZCUVZVc1EwRkJRenROUVVOb1F6dEpRVU5HTEVOQlFVTXNRMEZCUXp0SlFVTkdMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETzBWQlEyNURPMFZCUlVFc1pVRkJaU3hEUVVGQkxFVkJRVWM3U1VGRGFFSXNUVUZCVFR0TlFVRkZPMGxCUVZjc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkROVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNN1RVRkRja0lzVlVGQlZTeEZRVUZGTzFGQlExWXNSMEZCUnl4WlFVRlpMRU5CUVVNc1ZVRkJWVHRSUVVNeFFpeHhRa0ZCY1VJc1JVRkJSU3hWUVVGVkxFTkJRVU1zY1VKQlFYRkNPMUZCUTNaRUxHZERRVUZuUXl4RlFVTTVRaXhWUVVGVkxFTkJRVU03VFVGRFpqdEpRVU5HTEVOQlFVTXNRMEZCUXp0SlFVTkdMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETzBWQlEyNURPMFZCUlVFc1RVRkJUU3huUTBGQlowTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVU3U1VGRGJFUXNUVUZCVFR0TlFVRkZMSEZDUVVGeFFpeEZRVUZGTzBsQlFYRkNMRU5CUVVNc1IwRkRia1FzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03U1VGRE0wSXNUVUZCVFR0TlFVTktMRlZCUVZVc1JVRkJSVHRSUVVGRkxHTkJRV003VVVGQlJUdE5RVUV5UWp0SlFVTXpSQ3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRKUVVONlFpeE5RVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXp0SlFVVjZReXhOUVVGTkxGTkJRVk1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFMUJRVTA3U1VGRE5VTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSVHROUVVOa0xFOUJRVThzUTBGQlF5eERRVUZETzBsQlExZzdTVUZGUVN4TlFVRk5MRk5CUVZNc1IwRkJSeXhKUVVGQkxHbENRVUZUTEVWQlFVTXNUVUZCVFN4RFFVRkRPMGxCUlc1RExFMUJRVTA3VFVGQlJTeGxRVUZsTzAxQlFVVTdTVUZCWjBJc1EwRkJReXhIUVVONFF5eE5RVUZOTEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eERRVUZETzBsQlJYcERMRWxCUVVrc1dVRkJXU3hIUVVGSExFdEJRVXM3U1VGRmVFSXNTVUZCU1N4bFFVRmxMRXRCUVVzc2NVSkJRV2RDTEVOQlFVTXNVMEZCVXl4RlFVRkZPMDFCUTJ4RUxFMUJRVTA3VVVGRFNpeEpRVUZKTEVWQlFVVTdWVUZCUlR0UlFVRTRRaXhEUVVGRE8xRkJRM1pETzAxQlEwWXNRMEZCUXl4SFFVRkhMR1ZCUVdVN1RVRkZia0lzVFVGQlRTeHhRMEZCY1VNc1IwRkJSeXhKUVVGQkxESkNRVUZsTEVWQlF6TkVMRFpDUVVOR0xFTkJRVU03VFVGRFJDeE5RVUZOTEhWQ1FVRjFRaXhIUVVGSExFbEJRVWtzWjBKQlFVOHNRMEZEZWtNc1owSkJRV2RDTEVWQlEyaENMRVZCUVVVc1JVRkRSaXg1UWtGQmFVSXNRMEZCUXl4SlFVTndRaXhEUVVGRExFTkJRVU1zWTBGQll5eERRVUZETEhsQ1FVRnBRaXhEUVVGRExFZEJRVWNzUTBGQlF6dE5RVVYyUXl4WlFVRlpMRWRCUVVjc1NVRkJTU3huUWtGQlR5eERRVU40UWl3d1FrRkJNRUlzU1VGQlNTeHhRMEZCY1VNc1JVRkRia1VzUlVGRFJpeERRVUZETEVOQlEwVXNSMEZCUnl4RFFVRkRMSFZDUVVGMVFpeERRVUZETEVOQlF6VkNMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGRFVpeFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTm1MRU5CUVVNc1RVRkJUU3hKUVVGSkxHVkJRV1VzUzBGQlN5eHhRa0ZCWjBJc1EwRkJReXhOUVVGTkxFVkJRVVU3VFVGRGRFUXNXVUZCV1N4SFFVRkhMR05CUVdNc1NVRkJTU3hKUVVGQkxESkNRVUZsTEVWQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1EwRkJRenRKUVVONFJTeERRVUZETEUxQlFVMHNTVUZCU1N4bFFVRmxMRXRCUVVzc2NVSkJRV2RDTEVOQlFVTXNWMEZCVnl4RlFVRkZPMDFCUXpORUxGbEJRVmtzUjBGRFZpeGpRVUZqTEVsQlFVa3NTVUZCUVN3eVFrRkJaU3hGUVVGRExHVkJRV1VzUTBGQlF5eFJRVUZSTEVOQlFVTTdTVUZETDBRN1NVRkZRU3hKUVVGSkxGRkJRVkVzUjBGQlJ5eEpRVUZKTzBsQlEyNUNMRWxCUVVrc2FVTkJRV2xETEVkQlFVY3NTVUZCU1R0SlFVVTFReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJSU3hMUVVGTExFbEJRVXM3VFVGRE1VTXNUVUZCVFR0UlFVTktMRlZCUVZVN1VVRkRWaXhqUVVGak8xRkJRMlFzVlVGQlZUdFJRVU5XTEdsQ1FVRnBRaXhIUVVGSExFTkJRVU03VVVGRGNrSXNaMEpCUVdkQ08xRkJRMmhDTEc5Q1FVRnZRanRSUVVOd1FpeHhRa0ZCY1VJN1VVRkRja0lzV1VGQldUdFJRVU5hTEZkQlFWYzdVVUZEV0N4TFFVRkxPMUZCUTB3c1IwRkJSeXhGUVVGRkxGZEJRVmM3VVVGRGFFSTdUVUZEUml4RFFVRkRMRWRCUVVjc1MwRkJTenROUVVWVUxFMUJRVTBzTWtKQlFUSkNMRWRCUVVjc2NVSkJRWEZDTEVkQlEzSkVMRWxCUVVrc2EwSkJRVk1zUTBGQlF5eHhRa0ZCY1VJc1JVRkJSU3hGUVVGRkxFTkJRVU1zUjBGRGVFTXNTVUZCU1N4clFrRkJVeXhEUVVGRExGVkJRVlVzU1VGQlNTeGhRVUZoTEVWQlFVVXNSVUZCUlN4RFFVRkRPMDFCUld4RUxFMUJRVTBzTWtKQlFUSkNMRWRCUVVjc01rSkJRVEpDTEVOQlF6VkVMRWxCUVVrc1EwRkJReXhEUVVGQkxHTkJRV01zWVVGQlpDeGpRVUZqTEhWQ1FVRmtMR05CUVdNc1EwRkJSU3hIUVVGSExFdEJRVWtzUzBGQlN5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVTjBReXhSUVVGUkxFTkJRVU1zUlVGQlJTeERRVUZETzAxQlJXWXNTVUZCU1N4blFrRkJaMElzUjBGQlJ5eEpRVUZCTEhsRFFVRlpMRVZCUTJwRExESkNRVUV5UWl4RlFVTXpRaXhaUVVOR0xFTkJRVU03VFVGRFJDeEpRVUZKTEhsQ1FVRjVRaXhMUVVGTExFbEJRVWtzUlVGQlJUdFJRVU4wUXl4blFrRkJaMElzUjBGQlJ5eEpRVUZCTEc5Q1FVRlJMRVZCUTNwQ0xHZENRVUZuUWl4SlFVRkpMRXRCUVVzc1JVRkRla0lzZVVKQlFYbENMRWxCUVVrc1MwRkRMMElzUTBGQlF6dE5RVU5JT3p0TlFVVkJPMDFCUTBFN1RVRkRRVHROUVVOQk8wMUJRMEVzVFVGQlRTeFpRVUZaTEVkQlFVY3NTVUZCU1N4blFrRkJUeXhEUVVNNVFpeG5Ra0ZCWjBJc1JVRkRhRUlzUlVGQlJTeEZRVU5HTEhsQ1FVRnBRaXhEUVVGRExFZEJRM0JDTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3huUWtGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRVZCUVVVc1JVRkJSU3hGUVVGRkxIbENRVUZwUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wMUJSVEZFTEUxQlFVMHNXVUZCV1N4SFFVRkhMRmxCUVZrc1EwRkRPVUlzWTBGQll5eERRVUZETEhsQ1FVRnBRaXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVU55UXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN6czdUVUZGYWtJN1RVRkRRVHROUVVOQk8wMUJRMEU3VFVGRFFTeE5RVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkJMR3REUVVFd1FpeEZRVUZETEZkQlFWY3NSVUZCUlN4UFFVRlBMRU5CUVVNc1IwRkRNMFFzV1VGQldTeERRVU5VTEV0QlFVc3NRMEZCUXl4SlFVRkpMR2RDUVVGUExFTkJRVU1zV1VGQldTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUTNCRExHTkJRV01zUTBGQlF5eDVRa0ZCYVVJc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGRGNrTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUjBGRGFrSXNXVUZCV1R0TlFVVm9RaXhOUVVGTkxHZERRVUZuUXl4SFFVRkhMRWxCUVVFc05FTkJRV1VzUlVGRGRFUXNhVUpCUVdsQ0xFVkJRMnBDTEc5Q1FVRnZRaXhEUVVGRExGRkJRM1pDTEVOQlFVTTdUVUZGUkN4TlFVRk5MR2xEUVVGcFF5eEhRVUZITEVsQlFVa3NhMEpCUVZNc1EwRkJReXhIUVVGSExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlF6ZEVMRXRCUVVzc1EwRkJReXhYUVVGWExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlEzUkNMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU03VFVGRFdDeE5RVUZOTEd0RFFVRnJReXhIUVVOMFF5eG5RMEZCWjBNc1EwRkJReXhIUVVGSExFTkJRVU1zYVVOQlFXbERMRU5CUVVNN1RVRkRla1VzVFVGQlRTeHRRa0ZCYlVJc1IwRkJSeXhyUTBGQmEwTXNRMEZCUXl4TFFVRkxMRU5CUTJ4RkxHZERRVU5HTEVOQlFVTTdUVUZGUkN4TlFVRk5MRzFDUVVGdFFpeEhRVU4yUWl4dlFrRkJiMElzUTBGRGJFSXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJSU3haUVVGWkxFbEJRMnhFTEVsQlFVRXNiVU5CUVhOQ0xFVkJRVU1zV1VGQldTeEZRVUZGTEdkQ1FVRm5RaXhEUVVOMlJDeERRVUZETEVOQlEwWTdUVUZEU0N4TlFVRk5MSGRDUVVGM1FpeEhRVUZITEcxQ1FVRnRRaXhKUVVGSkxFTkJRVU03VFVGRmVrUXNUVUZCVFN4blFrRkJaMElzUjBGQlJ5eG5RMEZCWjBNc1EwRkJReXhMUVVGTExFTkJRemRFTEhkQ1FVRjNRaXhEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZEY2tNc1JVRkRSaXhEUVVGRE8wMUJSVVFzVFVGQlRTdzJRa0ZCTmtJc1IwRkJSeXhKUVVGQkxHdERRVUV3UWl4RlFVTTVSQ3huUWtGQlowSXNSVUZEYUVJc1QwRkRSaXhEUVVGRExFZEJRMGNzUTBGQlF5eEhRVU5FTEcxQ1FVRnRRanROUVVWMlFpeE5RVUZOTERaQ1FVRTJRaXhIUVVOcVF5dzJRa0ZCTmtJc1MwRkJTeXhUUVVGVExFZEJRM1pETEdkQ1FVRm5RaXhIUVVOb1FpeG5Ra0ZCWjBJc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEZRVUZGTEVWQlFVVXNRMEZCUXp0TlFVVjRReXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSU3hEUVVGRE8wMUJSV3hETEVsQlFVa3NOa0pCUVRaQ0xFdEJRVXNzVTBGQlV5eEZRVUZGTzFGQlF5OURMRXRCUVVzc1EwRkJReXhuUWtGQlowSXNSMEZCUnl4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVOQlFVTXNSVUZCUlN4RFFVRkRPMUZCUTNSRUxFdEJRVXNzUTBGQlF5eHRRa0ZCYlVJc1IwRkJSeXcyUWtGQk5rSXNRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSU3hEUVVGRE8xRkJRM1JGTEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eHRRa0ZCYlVJc1EwRkRla01zUzBGQlN5eERRVUZETERaQ1FVRTJRaXhEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVTnFSQ3hSUVVGUkxFTkJRVU1zUlVGQlJTeERRVUZETzAxQlEycENPMDFCUlVFc1NVRkRSU3hwUTBGQmFVTXNTMEZCU3l4SlFVRkpMRWxCUXpGRExEWkNRVUUyUWl4RFFVRkRMRVZCUVVVc1EwRkJReXhwUTBGQmFVTXNRMEZCUXl4RlFVTnVSVHRSUVVOQkxGRkJRVkVzUjBGQlJ5eFZRVUZWTzFGQlEzSkNMR2xEUVVGcFF5eEhRVUZITERaQ1FVRTJRanROUVVOdVJUdEpRVU5HTEVOQlFVTXNRMEZCUXp0SlFVVkdMRTFCUVUwc1RVRkJUU3hIUVVOV0xFbEJRVUVzYTBOQlFUQkNMRVZCUTNoQ0xGTkJRVk1zUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4blFrRkJaMElzUlVGRGNFTXNUMEZEUml4RFFVRkRMRWxCUTBRc1QwRkJUeXhEUVVOTUxHOUNRVUZ2UWl4RFFVTnNRaXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZGTEZsQlFWazdUVUZCUVN4SlFVRkJMRzFDUVVGQk8wMUJRVUVzVDBGRGJFUXNTVUZCUVN4dFEwRkJjMElzUlVGRGNFSXNXVUZCV1N4SFFVRkJMRzFDUVVGQkxFZEJRMW9zVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4alFVRkJMRzFDUVVGQkxIVkNRVUZ1UWl4dFFrRkJRU3hEUVVGeFFpeG5Ra0ZEZGtJc1EwRkJRenRKUVVGQkxFTkJRMGdzUTBGQlF5eERRVVZNTEVOQlFVTTdTVUZGU0N4SlFVRkpMRTlCUVU4c1IwRkJSeXhKUVVGSk8wbEJSV3hDTEVsQlFVa3NUVUZCVFN4RlFVRkZPMDFCUTFZc1RVRkJUU3hUUVVGVExFZEJRVWNzVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXp0TlFVVnlReXhQUVVGUExFZEJRVWNzUTBGQlF5eERRVUZETzAxQlJWb3NUVUZCVFR0UlFVTktMRTFCUVUwc1JVRkJSU3haUVVGWk8xRkJRM0JDTEdkQ1FVRm5RaXhGUVVGRkxHbENRVUZwUWp0UlFVTnVReXhuUWtGQlowSXNSVUZCUlR0TlFVTndRaXhEUVVGRExFZEJRVWNzYzBKQlFYTkNMRU5CUVVNc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXpzN1RVRkZjRVE3VFVGRFFUdE5RVU5CTEU5QlFVOHNRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hyUWtGQlV5eERRVUZETEZOQlFWTXNRMEZCUXl4blFrRkJaMElzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUTNaRkxITkNRVUZ6UWl4RlFVTjBRaXhGUVVOR0xFTkJRVU03TzAxQlJVUTdUVUZEUVR0TlFVTkJMRTlCUVU4c1EwRkJReXhIUVVGSExFZEJRVWNzU1VGQlNTeHJRa0ZCVXl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RlFVRkZMRVZCUVVVc1EwRkJRenROUVVWeVJTeFBRVUZQTEVOQlFVTXNWMEZCVnl4SFFVRkhMRk5CUVZNc1EwRkJReXhuUWtGQlowSTdPMDFCUldoRU8wMUJRMEU3VFVGRFFTeFBRVUZQTEVOQlFVTXNTMEZCU3l4SFFVRkhMRTlCUVU4c1EwRkJReXhYUVVGWExFTkJRMmhETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRMnBDTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRekZDTEZGQlFWRXNRMEZCUXl4RlFVRkZMRU5CUVVNN1RVRkRaaXhQUVVGUExFTkJRVU1zVjBGQlZ5eEhRVUZITEU5QlFVOHNRMEZCUXl4WFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVVzUTBGQlF6dE5RVU4wUkN4UFFVRlBMRU5CUVVNc1IwRkJSeXhIUVVGSExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVc1EwRkJRenROUVVOMFF5eFBRVUZQTEVOQlFVTXNhVUpCUVdsQ0xFZEJRVWNzYVVKQlFXbENPMDFCUlRkRExGTkJRVk1zUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTVHROUVVOMFF5eFRRVUZUTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVTg3U1VGRGRrTTdTVUZGUVN4UFFVRlBMRU5CUVVNc1VVRkJVU3hGUVVGRkxGTkJRVk1zUTBGQlF6dEZRVU01UWp0RlFVVkJMRTFCUVUwc2EwSkJRV3RDTEVOQlFVTXNaVUZCWlN4RlFVRkZMR0ZCUVdFc1JVRkJSU3hQUVVGUExFVkJRVVU3U1VGRGFFVXNUVUZCVFN4UlFVRlJMRWRCUVVjc1NVRkJTU3h0UWtGQlVTeERRVUZETEdWQlFXVXNSVUZCUlN3NFFrRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTTdTVUZEZUVVc1QwRkJUeXhOUVVGTkxGRkJRVkVzUTBGQlF5eFRRVUZUTEVOQlF6ZENMR0ZCUVdFc1JVRkRZaXg1UTBGQmEwTXNRMEZCUXl4UFFVRlBMRU5CUXpWRExFTkJRVU03UlVGRFNEdEJRVU5HT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVXhCTEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc1pVRkJRVHRCUVUxQkxGTkJRVk1zYzBKQlFYTkNMRU5CUVVNc1QwRkJUeXhGUVVGRk8wVkJRM1pETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEU5QlFVOHNRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJReXhGUVVGRk8wbEJRMjVFTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc2FVTkJRV2xETEVOQlFVTTdSVUZEY0VRN1JVRkZRU3hOUVVGTkxFMUJRVTBzUjBGQlJ5eERRVUZETEVkQlFVY3NUMEZCVHl4RFFVRkRPMFZCUlROQ0xFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1RVRkJUU3hMUVVGTE8wbEJRemxDTEUxQlFVMHNiMEpCUVc5Q0xFZEJRVWNzU1VGQlNTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXh0UWtGQmJVSXNSVUZCUlN4RlFVRkZMRU5CUVVNN1NVRkRNVVVzVFVGQlRTeHZRa0ZCYjBJc1IwRkJSeXhKUVVGSkxHdENRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTEVWQlFVVXNRMEZCUXp0SlFVTXhSU3hKUVVGSkxHOUNRVUZ2UWl4RFFVRkRMRTFCUVUwc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4RlFVRkZPMDFCUTNKRUxFOUJRVThzUTBGQlF6dEpRVU5XTzBsQlEwRXNUMEZCVHl4dlFrRkJiMElzUTBGQlF5eFJRVUZSTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRPMFZCUTNKRkxFTkJRVU1zUTBGQlF6dEZRVVZHTEVsQlFVa3NUVUZCVFN4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzBsQlF6TkNPMGxCUTBFc1RVRkJUU3hyUWtGQmEwSXNSMEZEZEVJc1RVRkJUU3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zYlVKQlFXMUNPMGxCUTNKRUxFMUJRVTBzT0VKQlFUaENMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGRGFrUXNTMEZCU3l4SlFVRkxMR3RDUVVGclFpeExRVUZMTEV0QlFVc3NRMEZCUXl4dFFrRkRNVU1zUTBGQlF6dEpRVU5FTEU5QlFVOHNlVUpCUVhsQ0xFTkJRVU1zT0VKQlFUaENMRU5CUVVNN1JVRkRiRVU3TzBWQlJVRTdSVUZEUVN4TlFVRk5MRlZCUVZVc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTTdSVUZEY0VNc1RVRkJUU3hWUVVGVkxFZEJRVWNzVlVGQlZTeEhRVUZITEVOQlFVTTdSVUZGYWtNc1RVRkJUU3gzUWtGQmQwSXNSMEZCUnl4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zYlVKQlFXMUNPMFZCUTNaRkxFMUJRVTBzZDBKQlFYZENMRWRCUVVjc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEcxQ1FVRnRRanRGUVVWMlJTeE5RVUZOTERaQ1FVRTJRaXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlEyaEVMRXRCUVVzc1NVRkJTeXgzUWtGQmQwSXNTMEZCU3l4TFFVRkxMRU5CUVVNc2JVSkJRMmhFTEVOQlFVTTdSVUZEUkN4TlFVRk5MRFpDUVVFMlFpeEhRVUZITEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUTJoRUxFdEJRVXNzU1VGQlN5eDNRa0ZCZDBJc1MwRkJTeXhMUVVGTExFTkJRVU1zYlVKQlEyaEVMRU5CUVVNN1JVRkZSQ3hOUVVGTkxIZENRVUYzUWl4SFFVRkhMSGxDUVVGNVFpeERRVU40UkN3MlFrRkRSaXhEUVVGRE8wVkJRMFFzVFVGQlRTeDNRa0ZCZDBJc1IwRkJSeXg1UWtGQmVVSXNRMEZEZUVRc05rSkJRMFlzUTBGQlF6dEZRVVZFTEU5QlFVODdTVUZEVEN4TlFVRk5MRVZCUVVVc1NVRkJTU3hyUWtGQlV5eERRVUZETEhkQ1FVRjNRaXhEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZEZGtRc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGRGVrTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVOYUxGRkJRVkVzUTBGQlF5eEZRVUZGTEVOQlFVTTdTVUZEWml4blFrRkJaMElzUlVGQlJTeEpRVUZKTEd0Q1FVRlRMRU5CUXpkQ0xIZENRVUYzUWl4RFFVRkRMR2RDUVVGblFpeEZRVU42UXl4RlFVTkdMRU5CUVVNc1EwRkRSU3hKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUTI1RUxGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZEV2l4UlFVRlJMRU5CUVVNc1JVRkJSU3hEUVVGRE8wbEJRMllzWjBKQlFXZENMRVZCUVVVc1NVRkJTU3hyUWtGQlV5eERRVU0zUWl4M1FrRkJkMElzUTBGQlF5eG5Ra0ZCWjBJc1JVRkRla01zUlVGRFJpeERRVUZETEVOQlEwVXNTVUZCU1N4RFFVRkRMSGRDUVVGM1FpeERRVUZETEdkQ1FVRm5RaXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVU51UkN4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRMW9zVVVGQlVTeERRVUZETEVWQlFVVTdSVUZEYUVJc1EwRkJRenRCUVVOSU96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTXNlVUpCUVhsQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTzBWQlEzcERMRTFCUVUwc01rSkJRVEpDTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkRMME1zUTBGQlF5eGxRVUZsTEVWQlFVVXNTMEZCU3l4TlFVRk5PMGxCUXpOQ0xFMUJRVTBzUlVGQlJTeGxRVUZsTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEZRVUZGTEVWQlFVVXNRMEZCUXp0SlFVTnlSQ3huUWtGQlowSXNSVUZCUlN4bFFVRmxMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVTnlSQ3hMUVVGTExFTkJRVU1zWjBKQlFXZENMRVZCUTNSQ0xFVkJRMFlzUTBGQlF6dEpRVU5FTEdkQ1FVRm5RaXhGUVVGRkxHVkJRV1VzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhKUVVGSkxFTkJRM0pFTEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUlVGRGRFSXNSVUZEUmp0RlFVTkdMRU5CUVVNc1EwRkJReXhGUVVOR08wbEJRMFVzVFVGQlRTeEZRVUZGTEVsQlFVa3NhMEpCUVZNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETzBsQlF6VkNMR2RDUVVGblFpeEZRVUZGTEVsQlFVa3NhMEpCUVZNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETzBsQlEzUkRMR2RDUVVGblFpeEZRVUZGTEVsQlFVa3NhMEpCUVZNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJUdEZRVU4yUXl4RFFVTkdMRU5CUVVNN1JVRkZSQ3hQUVVGUE8wbEJRMHdzVFVGQlRTeEZRVUZGTERKQ1FVRXlRaXhEUVVGRExFMUJRVTBzUTBGRGRrTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlEzUkNMRkZCUVZFc1EwRkJReXhGUVVGRkxFTkJRVU03U1VGRFppeG5Ra0ZCWjBJc1JVRkJSU3d5UWtGQk1rSXNRMEZCUXl4blFrRkJaMElzUTBGRE0wUXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlEzUkNMRkZCUVZFc1EwRkJReXhGUVVGRkxFTkJRVU03U1VGRFppeG5Ra0ZCWjBJc1JVRkJSU3d5UWtGQk1rSXNRMEZCUXl4blFrRkJaMElzUTBGRE0wUXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlEzUkNMRkZCUVZFc1EwRkJReXhGUVVGRk8wVkJRMmhDTEVOQlFVTTdRVUZEU0R0QlFVVlBMRTFCUVUwc1MwRkJTeXhIUVVGSE8wVkJRMjVDTEhOQ1FVRnpRanRGUVVOMFFqdEJRVU5HTEVOQlFVTTdRVUZCUXl4UFFVRkJMRU5CUVVFc1MwRkJRU3hIUVVGQkxFdEJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGJtZERSaXhKUVVGQkxHbENRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFRRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1pVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZkQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdGQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hQUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNSMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHZENRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1lVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1UwRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1QwRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdkQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4TFFVRkJMRWRCUVVFc1QwRkJRVHRCUVUxQkxFbEJRVUVzV1VGQlFTeEhRVUZCTEU5QlFVRTdRVUZSUVN4SlFVRkJMRzFDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNTVUZCUVN4SFFVRkJMRTlCUVVFN1FVRlBRU3hKUVVGQkxGZEJRVUVzUjBGQlFTeFBRVUZCTzBGQlRVRXNTVUZCUVN4TlFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzV1VGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRkZCUVVFc1IwRkJRU3hQUVVGQk8wRkJTMEVzU1VGQlFTeGhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVMUJMRWxCUVVFc1NVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTERSQ1FVRkJMRWRCUVVFc1QwRkJRVHRCUVV0QkxFbEJRVUVzVVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRmRCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR2xDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hQUVVGQkxFZEJRVUVzZFVKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUVhORExGTkJRVUVzZVVKQlFVRXNWMEZCUVN4bFFVRkJMRTlCUVVFc2EwTkJRVUVzYVVKQlFVRXNUMEZCUVN4UFFVRkJMRkZCUVVFc1owSkJRVUVzVDBGQlFTeFBRVUZCTEZsQlFVRXNkMEpCUVVFc1dVRkJRU3hEUVVGQkxGZEJRVUVzVjBGQlFTeFhRVUZCTEVkQlFVRXNaMEpCUVVFc1IwRkJRU3hwUWtGQlFTeExRVUZCTEZkQlFVRTdRVUZCUVN4VFFVRkJMSGRDUVVGQkxFZEJRVUVzUlVGQlFTeFhRVUZCTEZOQlFVRXNWMEZCUVN4SlFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeFhRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMRzlDUVVGQkxFZEJRVUVzZDBKQlFVRXNSMEZCUVN3MFFrRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFTeFZRVUZCTEV0QlFVRXNSMEZCUVN4M1FrRkJRU3hEUVVGQkxGZEJRVUVzVDBGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hYUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1NVRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYTBKQlFVRXNUVUZCUVN4RFFVRkJMRk5CUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRk5CUVVFc1NVRkJRU3hIUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNZMEZCUVN4SlFVRkJMRXRCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzVFVGQlFTeEZRVUZCTEVkQlFVRXNSVUZCUVN4SlFVRkJMRmxCUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzUjBGQlFTeE5RVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeE5RVUZCTEZsQlFVRXNUVUZCUVR0QlFVRkJMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVVjBReXhOUVVGTkxIbENRVUY1UWl4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRM1pETEUxQlFVMHNPRUpCUVRoQ0xFZEJRVWNzU1VGQlNUdEJRVVV6UXl4TlFVRk5MSE5DUVVGelFpeEhRVUZITEVOQlF6ZENMRFJDUVVGbExFTkJRVU1zU1VGQlNTeEZRVU53UWl3MFFrRkJaU3hEUVVGRExGbEJRVmtzUTBGRE4wSTdPMEZCUlVRN1FVRkRRVHRCUVVOQkxFMUJRVTBzYTBOQlFXdERMRWRCUVVjc1EwRkRla01zUjBGQlJ5eHpRa0ZCYzBJc1JVRkRla0lzTkVKQlFXVXNRMEZCUXl4VlFVRlZMRVZCUXpGQ0xEUkNRVUZsTEVOQlFVTXNiVUpCUVcxQ0xFVkJRMjVETERSQ1FVRmxMRU5CUVVNc2RVSkJRWFZDTEVWQlEzWkRMRFJDUVVGbExFTkJRVU1zYlVKQlFXMUNMRU5CUTNCRE96dEJRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQkxFMUJRVTBzY1VKQlFYRkNMRWRCUVVjc2FVSkJRV2xDT3p0QlFVVXZRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJXVXNUVUZCVFN4eFFrRkJjVUlzVTBGQlV5eDVRa0ZCV1N4RFFVRkRPMFZCUXpsRUxGZEJRVmNzUTBGQlF5eEpRVUZKTEVWQlFVVTdTVUZEYUVJc1MwRkJTeXhEUVVGRExFTkJRVU03U1VGRFVDeEpRVUZKTEVOQlFVTXNXVUZCV1N4SFFVRkhMRWxCUVVrc1EwRkJReXhaUVVGWk8wbEJRM0pETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ08wbEJRemRETEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ08wbEJRMmhFTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ08wbEJReTlETEVsQlFVa3NRMEZCUXl4elEwRkJjME1zUjBGRGVrTXNTVUZCU1N4RFFVRkRMSEZEUVVGeFF6dEpRVU0xUXl4SlFVRkpMRU5CUVVNc2MwTkJRWE5ETEVkQlEzcERMRWxCUVVrc1EwRkJReXh4UTBGQmNVTTdTVUZETlVNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4SFFVRkhMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNTVUZCU1N4SlFVRkpMSGxDUVVGbExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEZUVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVR0SlFVTTNRaXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRWRCUVVjc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWp0SlFVTnlSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEVsQlFVa3NRMEZCUXl4WlFVRlpPMGxCUTNKRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMR1ZCUVdVN1NVRkRja01zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhIUVVGSExFbEJRVWtzUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEYmtNc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4SFFVRkhMRWxCUVVrc1EwRkJReXh4UWtGQmNVSTdTVUZEZUVRc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4SFFVRkhMRWxCUVVrc1EwRkJReXgxUWtGQmRVSTdTVUZETlVRc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4SFFVRkhMRWxCUVVrc1EwRkJReXg1UWtGQmVVSTdTVUZEYUVVc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4SFFVRkhMRWxCUVVrc1EwRkJReXh0UWtGQmJVSTdTVUZEYmtRc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4SFFVRkhMRWxCUVVrc1EwRkJReXh0UWtGQmJVSTdTVUZEYmtRc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4SFFVRkhMRWxCUVVrc1EwRkJReXh4UWtGQmNVSTdTVUZEZGtRc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4SFFVRkhMRWxCUVVrc1EwRkJReXh2UWtGQmIwSTdTVUZEY2tRc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eEpRVUZKTEVOQlFVTXNZMEZCWXp0SlFVTjZReXhKUVVGSkxFTkJRVU1zWTBGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4alFVRmpPMGxCUTNwRExFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zTUVKQlFUQkNPMGxCUTJwRkxFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNPMGxCUXpORUxFbEJRVWtzUTBGQlF5eGxRVUZsTEVkQlFVY3NTVUZCU1N4RFFVRkRMRk5CUVZNN1NVRkZja01zU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMSGxDUVVGbExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZGZGtNc1NVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eE5RVUZOTzAxQlEzUkNMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6dEpRVU40UWl4RFFVRkRPMGxCUlVRc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEcxQ1FVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dEpRVVY0UXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzYlVKQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRE8wbEJRemRETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRKUVVOc1FpeEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRWxCUVVrc2RVSkJRWFZDTEVOQlFVTTdUVUZEYUVRc1UwRkJVeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFRRVUZUTzAxQlEzcENMR05CUVdNc1JVRkJSU3hKUVVGSkxFTkJRVU1zWTBGQll6dE5RVU51UXl4WlFVRlpMRVZCUVVVc1NVRkJTU3hEUVVGRExGbEJRVms3VFVGREwwSXNaMEpCUVdkQ0xFVkJRVVVzU1VGQlNTeERRVUZETEdkQ1FVRm5RanROUVVOMlF5eHBRa0ZCYVVJc1JVRkJSU3hKUVVGSkxFTkJRVU03U1VGRE1VSXNRMEZCUXl4RFFVRkRPMGxCUlVZc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRXRCUVVzN1NVRkRkRU1zU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4SlFVRkpMSEZDUVVGWkxFTkJRVU03VFVGRGJrTXNVVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJReXhSUVVGUk8wMUJRM1pDTEZsQlFWa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1dVRkJXVHROUVVNdlFpeHpRa0ZCYzBJc1JVRkJSU3hEUVVGRExFZEJRVWNzU1VGQlNTeExRVUZMTzFGQlEyNURMRTFCUVUwc2JVSkJRVzFDTEVkQlFVY3NTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXh6UWtGQmMwSXNRMEZEY0VVc1IwRkJSeXhKUVVOTUxFTkJRVU03VVVGRFJDeE5RVUZOTERKQ1FVRXlRaXhIUVVGSExFbEJRVWtzUTBGQlF5dzRRa0ZCT0VJc1EwRkRja1VzUjBGQlJ5eEpRVU5NTEVOQlFVTTdVVUZEUkN4UFFVRlBMRU5CUVVNc1IwRkJSeXh0UWtGQmJVSXNSVUZCUlN4SFFVRkhMREpDUVVFeVFpeERRVUZETzAxQlEycEZMRU5CUVVNN1RVRkRSQ3gzUWtGQmQwSXNSVUZEZEVJc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdOQlFXTTdTVUZEZWtVc1EwRkJReXhEUVVGRE8wbEJSVVlzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhIUVVGSExFbEJRVWtzZVVKQlFYbENMRU5CUVVNN1RVRkRjRVFzVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJPMDFCUTNaQ0xGbEJRVmtzUlVGQlJTeEpRVUZKTEVOQlFVTXNXVUZCV1R0TlFVTXZRaXhyUWtGQmEwSXNSVUZCUnl4TFFVRkxMRWxCUVVzc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhMUVVGTExFTkJRVU03VFVGRGJrVXNjMEpCUVhOQ0xFVkJRVVVzUTBGQlFTeExRVUZOTzFGQlF6VkNMRTFCUVUwc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlF6dFJRVU0xUkN4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEhWQ1FVRjFRaXhEUVVGRExFTkJRVU03VVVGRE9VUXNUMEZCVHl4RFFVRkRMRWRCUVVjc1QwRkJUeXhGUVVGRkxFZEJRVWNzVVVGQlVTeERRVUZETzAxQlEyeERMRU5CUVVNN1RVRkRSQ3hyUWtGQmEwSXNSVUZCUlN4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJRenROUVVOMFJDeDNRa0ZCZDBJc1JVRkRkRUlzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4M1FrRkJkMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNN1NVRkRla1VzUTBGQlF5eERRVUZETzBsQlJVWXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlEyeERMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zT0VOQlFUQkNMRU5CUVVNc1dVRkJXU3hEUVVOdVJDeERRVUZETzBsQlEwUXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRE8wbEJRM1JDTzBsQlEwRXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRE8wbEJRM1JDTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMnBGTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eE5RVUZOTzAxQlF6bENMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dE5RVU55UWl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU03U1VGRGVFSXNRMEZCUXl4RFFVRkRPenRKUVVWR08wbEJRMEVzU1VGQlNTeERRVUZETEdkRFFVRm5ReXhEUVVGRExFTkJRVU03U1VGRGRrTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8wVkJSWFpDT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEZWQlFWVXNRMEZCUVN4RlFVRkhPMGxCUTFnc1RVRkJUU3hoUVVGaExFZEJRVWNzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03U1VGRE4wTXNUVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVNN1NVRkRla01zVFVGQlRTeGpRVUZqTEVkQlFVY3NVVUZCVVN4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRkxFTkJRVU03U1VGRE5VTXNTVUZEUlN4aFFVRmhMRXRCUVVzc2MwSkJRV0VzUTBGQlF5eFRRVUZUTEVsQlEzcERMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zWTBGQll5eERRVUZETEVWQlF6VkNPMDFCUTBFc1QwRkJUeXhEUVVGRE8wbEJRMVk3U1VGRFFTeFBRVUZQTEdOQlFXTTdSVUZEZGtJN1JVRkZRU3hOUVVGTkxIVkNRVUYxUWl4RFFVRkRMRmRCUVZjc1JVRkJSVHRKUVVONlF5eE5RVUZOTERCQ1FVRXdRaXhIUVVNNVFpeE5RVUZOTEVsQlFVa3NRMEZCUXl4elEwRkJjME1zUTBGQlF5eERRVUZETzBsQlEzSkVMRTFCUVUwc2RVSkJRWFZDTEVkQlF6TkNMRTFCUVUwc1NVRkJTU3hEUVVGRExITkRRVUZ6UXl4RFFVRkRMRmRCUVZjc1EwRkJRenRKUVVOb1JTeFBRVUZQTERCQ1FVRXdRaXhKUVVGSkxIVkNRVUYxUWp0RlFVTTVSRHM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEUxQlFVMHNjMEpCUVhOQ0xFTkJRVU1zVjBGQlZ5eEZRVUZGTzBsQlEzaERMRTFCUVUwN1RVRkJSU3hKUVVGSk8wMUJRVVVzVVVGQlVTeEZRVUZGTzBsQlFVc3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMGxCUTNwRUxFMUJRVTBzWlVGQlpTeEhRVUZITEUxQlFVMHNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEZkQlFWY3NRMEZCUXpzN1NVRkZka1U3U1VGRFFUdEpRVU5CTzBsQlEwRXNUVUZCVFN4UlFVRlJMRWRCUVVjc1pVRkJaU3hIUVVGSExHZENRVUZSTEVOQlFVTXNUVUZCVFN4SFFVRkhMR2RDUVVGUkxFTkJRVU1zVFVGQlRUczdTVUZGY0VVN1NVRkRRVHRKUVVOQk8wbEJRMEVzU1VGQlNTeEpRVUZKTEV0QlFVc3NjMEpCUVdFc1EwRkJReXhIUVVGSExFbEJRVWtzU1VGQlNTeExRVUZMTEhOQ1FVRmhMRU5CUVVNc1QwRkJUeXhGUVVGRk8wMUJRMmhGTEU5QlFVOHNTVUZCU1N4alFVRk5MRU5CUVVNN1VVRkRhRUlzUzBGQlN5eEZRVUZGTEVsQlFVazdVVUZEV0R0TlFVTkdMRU5CUVVNc1EwRkJRenRKUVVOS096dEpRVVZCTzBsQlEwRTdTVUZEUVR0SlFVTkJPMGxCUTBFc1RVRkJUU3hQUVVGUExFZEJRVWNzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRPMGxCUTNaRUxFMUJRVTBzWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETzBsQlF6ZERMRTFCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0SlFVVnlReXhQUVVGUExHTkJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTTdUVUZEYmtJc1NVRkJTVHROUVVOS0xFOUJRVTg3VFVGRFVEdE5RVU5CTzAxQlEwRTdUVUZEUVR0TlFVTkJPMDFCUTBFN1RVRkRRVHROUVVOQk8wMUJRMEU3VFVGRFFTeFRRVUZUTEVWQlExQXNZVUZCWVN4TFFVRkxMSE5DUVVGaExFTkJRVU1zVTBGQlV5eEhRVUZITEZGQlFWRXNRMEZCUXl4VFFVRlRMRVZCUVVVc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF6dE5RVU42UlR0SlFVTkdMRU5CUVVNc1EwRkJRenRGUVVOS096dEZRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxHTkJRV01zUTBGQlF5eE5RVUZOTEVWQlFVVTdTVUZEY2tJc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RFFVRkRPMGxCUXpGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVVXNSMEZCUlN4TlFVRk5MRU5CUVVNc1JVRkJSeXhoUVVGWkxFVkJRVVVzVFVGQlRTeERRVUZETzBsQlF6VkRMRWxCUVVrc1EwRkJReXcyUWtGQk5rSXNRMEZEYUVNc1RVRkJUU3hGUVVOT0xIZERRVUV5UWl4RFFVRkRMRXRCUVVzc1JVRkRha01zVFVGQlRTeERRVUZETEZGQlExUXNRMEZCUXp0RlFVTklPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVTdTVUZEZUVJc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhQUVVGUExFTkJRVU03UlVGREwwTTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4TlFVRk5MSGRDUVVGM1FpeERRVUZETEZGQlFWRXNSVUZCUlN4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVU3U1VGRGJFUXNhVUpCUVVjc1EwRkJReXhMUVVGTExFTkJRMDRzSzBOQlFUaERMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZGTEVWQlF6RkZMRU5CUVVNN1NVRkZSQ3hOUVVGTkxHRkJRV0VzUjBGQlJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4M1FrRkJkMElzUTBGRGRrUXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkRXQ3hSUVVGUkxFVkJRMUlzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZEV0N4VFFVRlRMRVZCUTFRc1UwRkJVeXhGUVVOVUxFbEJRVWtzUTBGQlF5eEZRVU5RTEVOQlFVTTdPMGxCUlVRN1NVRkRRU3hQUVVGUExFbEJRVWtzVDBGQlR5eERRVUZETEVOQlFVTXNUMEZCVHl4RlFVRkZMRTFCUVUwc1MwRkJTenROUVVOMFF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkRja0lzUjBGQlJTeGhRVUZoTEVOQlFVTXNSVUZCUnl4WFFVRlZMRVZCUXpkQ0xHTkJRV01zU1VGQlN6dFJRVU5zUWl4UlFVRlJMR05CUVdNc1EwRkJReXhOUVVGTk8xVkJRek5DTEV0QlFVc3NPRUpCUVdsQ0xFTkJRVU1zVTBGQlV6dFpRVU01UWl4UFFVRlBMRTlCUVU4c1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETzFWQlEzSkRMRXRCUVVzc09FSkJRV2xDTEVOQlFVTXNVVUZCVVR0WlFVTTNRaXhQUVVGUExFMUJRVTBzUTBGRFdDeEpRVUZCTEhkQ1FVRmxMRVZCUTJJc2RVSkJRVk1zUTBGQlF5eFJRVUZSTEVOQlFVTXNiVUpCUVcxQ0xFTkJRM0JETERKRVFVTkdMRU5CUTBZc1EwRkRSaXhEUVVGRE8xVkJRMGdzUzBGQlN5dzRRa0ZCYVVJc1EwRkJReXhOUVVGTk8xbEJRek5DTEU5QlFVOHNUVUZCVFN4RFFVTllMRWxCUVVFc2QwSkJRV1VzUlVGRFlpeDFRa0ZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFTkJRVU1zWTBGQll5eERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUTI1RUxFTkJRMFlzUTBGQlF6dFZRVU5JTzFsQlEwVXNUMEZCVHl4TlFVRk5MRU5CUTFnc1NVRkJRU3gzUWtGQlpTeEZRVU5pTEhWQ1FVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGRGJrSXNNa05CUVRCRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlEzWkVMR05CUVdNc1EwRkJReXhSUVVOcVFpeERRVUZGTEVWQlEwb3NRMEZEUml4RFFVTkdMRU5CUVVNN1VVRkRURHROUVVOR0xFTkJRMFlzUTBGQlF6dEpRVU5JTEVOQlFVTXNRMEZCUXp0RlFVTktPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4TlFVRk5MR0ZCUVdFc1EwRkJRU3hGUVVGSE8wbEJRM0JDTEUxQlFVMHNZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1EwRkJRenRKUVVNdlJDeFBRVUZQTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUTJoQ0xFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRkxFMUJRVTBzU1VGRGRFTXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEUxQlFVMHNSVUZCUlR0TlFVTTFRaXhwUWtGQmFVSXNSVUZCUlR0SlFVTnlRaXhEUVVGRExFTkJRMGdzUTBGRFJpeERRVUZETzBWQlEwZzdPMFZCUlVFN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMR1ZCUVdVc1EwRkJReXhKUVVGSkxFVkJRVVU3U1VGRGNFSXNUVUZCVFR0TlFVRkZPMGxCUVdFc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkRPVU1zVDBGQlR5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRPMFZCUXpOQ096dEZRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMFZCUTBVc2QwSkJRWGRDTEVOQlFVTXNTVUZCU1N4RlFVRkZPMGxCUXpkQ0xFOUJRMFVzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zVFVGQlRTeExRVU12UXl3NFFrRkJhVUlzUTBGQlF5eFZRVUZWTzBWQlJXaERPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBWQlEwVXNORUpCUVRSQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlR0SlFVTjZReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEhkQ1FVRjNRaXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzAxQlEzaERMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRMW9zZVVOQlFYZERMRTFCUVU4N1FVRkRlRVFzT0VKQlFUaENMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRTFCUVU4c1JVRkRlRVVzUTBGQlF6dEpRVU5JTzBWQlEwWTdSVUZGUVN4clFrRkJhMElzUTBGQlF5eEpRVUZKTEVWQlFVVXNZMEZCWXl4RlFVRkZMRWxCUVVrc1JVRkJSVHRKUVVNM1F5eE5RVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZEZGtRc1RVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlFTeGhRVUZMTEVWQlFVTXNUVUZCVFN4RlFVRkZMR05CUVdNc1EwRkJRenRKUVVNM1F5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMR2xDUVVGcFFpeERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNN1JVRkRkRVE3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4MVFrRkJkVUlzUTBGRGNrSXNTVUZCU1N4RlFVTktPMGxCUVVVc1dVRkJXVHRKUVVGRkxHOUNRVUZ2UWp0SlFVRkZPMFZCUVZNc1EwRkJReXhGUVVOb1JEdEpRVU5CTEUxQlFVMHNhVUpCUVdsQ0xFZEJRVWM3VFVGRGVFSXNWMEZCVnl4RlFVRkZPMUZCUTFnc1dVRkJXVHRSUVVOYUxHOUNRVUZ2UWp0UlFVTndRanROUVVOR08wbEJRMFlzUTBGQlF6czdTVUZGUkR0SlFVTkJMR2xDUVVGcFFpeERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkJMR05CUVUwc1JVRkJReXhwUWtGQmFVSXNRMEZCUXl4WFFVRlhMRU5CUVVNN1NVRkRja1VzVFVGQlRTeEpRVUZKTEVkQlFVa3NNa0pCUVRCQ0xFbEJRVXNzUlVGQlF6dEpRVU01UXl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNTVUZCU1N4RlFVRkZMR2xDUVVGcFFpeEZRVUZGTEVsQlFVa3NRMEZCUXp0SlFVTjBSQ3hQUVVGUExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNTVUZCU1N4RFFVRkRPMFZCUTI1RE96dEZRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRTFCUVUwc2IwSkJRVzlDTEVOQlFVTXNTVUZCU1N4RlFVRkZPMGxCUVVVc1NVRkJTVHRKUVVGRkxFbEJRVWs3U1VGQlJTeEZRVUZGTzBsQlFVVXNTMEZCU3p0SlFVRkZMRWRCUVVjN1NVRkJSVHRGUVVGVExFTkJRVU1zUlVGQlJUdEpRVU42UlN4SlFVRkpMRU5CUVVNc05FSkJRVFJDTEVOQlFVTXNTVUZCU1N4RlFVRkZMSE5DUVVGelFpeERRVUZETzBsQlJTOUVMRTFCUVUwc1kwRkJZeXhIUVVGSE8wMUJRM0pDTEZGQlFWRXNSVUZCUlR0UlFVTlNMRWxCUVVrN1VVRkRTaXhKUVVGSk8xRkJRMG9zUlVGQlJUdFJRVU5HTEV0QlFVczdVVUZEVEN4SFFVRkhPMUZCUTBnN1RVRkRSanRKUVVOR0xFTkJRVU03TzBsQlJVUTdTVUZEUVN4alFVRmpMRU5CUVVNc1VVRkJVU3hIUVVGSExFbEJRVUVzWTBGQlRTeEZRVU01UWl4alFVRmpMRU5CUVVNc1VVRkJVU3hGUVVOMFFpeEpRVUZKTEVsQlFVc3NTVUZCU1N4TFFVRkxMRk5CUTNKQ0xFTkJRVU03TzBsQlJVUTdTVUZEUVN4TlFVRk5MSEZDUVVGeFFpeEhRVUZITEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3hEUVVGRE8wbEJRM2hFTEUxQlFVMDdUVUZCUlR0SlFVRkxMRU5CUVVNc1IwRkJSeXhOUVVGTkxFbEJRVUVzYzBOQlFYZENMRVZCUXpkRE8wMUJRMFVzUjBGQlJ5eHhRa0ZCY1VJc1EwRkJReXhSUVVGUk8wMUJRMnBETEVkQlFVY3NZMEZCWXl4RFFVRkRPMGxCUTNCQ0xFTkJRVU1zUlVGRFJDeEpRVUZKTEVOQlFVTXNTMEZEVUN4RFFVRkRPMGxCUTBRc1kwRkJZeXhEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTzBsQlJURkNMRTFCUVUwc1NVRkJTU3hIUVVGSkxEaENRVUUyUWl4SlFVRkxMRVZCUVVNN1NVRkZha1FzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFbEJRVWtzUlVGQlJTeGpRVUZqTEVWQlFVVXNTVUZCU1N4RFFVRkRPMGxCUTI1RUxFOUJRVThzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNN1JVRkRia003TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeDNRa0ZCZDBJc1EwRkRkRUlzU1VGQlNTeEZRVU5LTzBsQlEwVXNSMEZCUnp0SlFVTklMRkZCUVZFN1NVRkRVaXhSUVVGUk8wbEJRMUlzYjBKQlFXOUNPMGxCUTNCQ0xGbEJRVms3U1VGRFdpeFpRVUZaTzBsQlExb3NhVUpCUVdsQ08wbEJRMnBDTEcxQ1FVRnRRanRKUVVOdVFpeHRRa0ZCYlVJN1NVRkRia0lzYTBKQlFXdENPMGxCUTJ4Q08wVkJRMFlzUTBGQlF5eEZRVU5FTzBsQlEwRXNTVUZCU1N4RFFVRkRMRFJDUVVFMFFpeERRVUZETEVsQlFVa3NSVUZCUlN3d1FrRkJNRUlzUTBGQlF6dEpRVVZ1UlN4SlFVRkpMRk5CUVZNc1IwRkJSenROUVVOa0xGRkJRVkVzUlVGQlJUdFJRVU5TTEVkQlFVYzdVVUZEU0N4UlFVRlJPMUZCUTFJc1VVRkJVVHRSUVVOU0xHOUNRVUZ2UWp0UlFVTndRanROUVVOR0xFTkJRVU03VFVGRFJDeFpRVUZaTzAxQlExb3NhVUpCUVdsQ08wMUJRMnBDTEcxQ1FVRnRRanROUVVOdVFpeHRRa0ZCYlVJN1RVRkRia0lzYTBKQlFXdENPMDFCUTJ4Q08wbEJRMFlzUTBGQlF6czdTVUZGUkR0SlFVTkJMRk5CUVZNc1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlFTeGpRVUZOTEVWQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJRenRKUVVNdlF5eFRRVUZUTEVkQlFVY3NTVUZCUVN4alFVRk5MRVZCUVVNc1UwRkJVeXhEUVVGRE8wbEJRemRDTEUxQlFVMHNTVUZCU1N4SFFVRkpMRzFEUVVGclF5eEpRVUZMTEVWQlFVTTdTVUZEZEVRc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hUUVVGVExFVkJRVVVzU1VGQlNTeERRVUZETzBsQlF6bERMRTlCUVU4c1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVTTdSVUZEYmtNN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzYVVOQlFXbERMRU5CUXk5Q0xFbEJRVWtzUlVGRFNqdEpRVUZGTEdkQ1FVRm5RanRKUVVGRk8wVkJRVzlDTEVOQlFVTXNSVUZEZWtNN1NVRkRRU3hKUVVGSkxFTkJRVU1zTkVKQlFUUkNMRU5CUXk5Q0xFbEJRVWtzUlVGRFNpeHRRMEZEUml4RFFVRkRPMGxCUlVRc1NVRkJTU3hyUWtGQmEwSXNSMEZCUnp0TlFVRkZMR2RDUVVGblFqdE5RVUZGTzBsQlFXOUNMRU5CUVVNN1NVRkRiRVU3U1VGRFFTeHJRa0ZCYTBJc1IwRkJSeXhKUVVGQkxHTkJRVTBzUlVGQlF5eHJRa0ZCYTBJc1EwRkJRenRKUVVVdlF5eE5RVUZOTEVsQlFVa3NSMEZCU1N3NFEwRkJOa01zU1VGQlN5eEZRVUZETzBsQlEycEZMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SlFVRkpMRVZCUVVVc2EwSkJRV3RDTEVWQlFVVXNTVUZCU1N4RFFVRkRPMGxCUTNaRUxFOUJRVThzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNN1JVRkRia003TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN3MlFrRkJOa0lzUTBGQlF5eEpRVUZKTEVWQlFVVTdTVUZCUlN4SlFVRkpPMGxCUVVVN1JVRkJhMElzUTBGQlF5eEZRVUZGTzBsQlF5OUVMRWxCUVVrc1EwRkJReXcwUWtGQk5FSXNRMEZCUXl4SlFVRkpMRVZCUVVVc0swSkJRU3RDTEVOQlFVTTdTVUZGZUVVc1NVRkJTU3gxUWtGQmRVSXNSMEZCUnp0TlFVRkZMRWxCUVVrN1RVRkJSVHRKUVVGclFpeERRVUZETzBsQlEzcEVPMGxCUTBFc2RVSkJRWFZDTEVkQlFVY3NTVUZCUVN4alFVRk5MRVZCUVVNc2RVSkJRWFZDTEVOQlFVTTdTVUZGZWtRc1RVRkJUU3hKUVVGSkxFZEJRVWtzZDBOQlFYVkRMRWxCUVVzc1JVRkJRenRKUVVNelJDeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zU1VGQlNTeEZRVUZGTEhWQ1FVRjFRaXhGUVVGRkxFbEJRVWtzUTBGQlF6dEpRVU0xUkN4UFFVRlBMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETzBWQlEyNURPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRkRSU3h4UWtGQmNVSXNRMEZEYmtJc1NVRkJTU3hGUVVOS08wbEJRMFVzYVVKQlFXbENPMGxCUTJwQ0xITkNRVUZ6UWp0SlFVTjBRaXhKUVVGSk8wbEJRMG9zZDBKQlFYZENPMGxCUTNoQ0xIVkNRVUYxUWp0SlFVTjJRaXhaUVVGWk8wbEJRMW9zWTBGQll6dEpRVU5rTEdkQ1FVRm5RanRKUVVOb1FqdEZRVU5HTEVOQlFVTXNSVUZEUkR0SlFVTkJMRWxCUVVrc1EwRkJReXcwUWtGQk5FSXNRMEZCUXl4SlFVRkpMRVZCUVVVc2RVSkJRWFZDTEVOQlFVTTdTVUZGYUVVc1NVRkJTU3hsUVVGbExFZEJRVWM3VFVGRGNFSXNhVUpCUVdsQ08wMUJRMnBDTEhOQ1FVRnpRanROUVVOMFFpeEpRVUZKTzAxQlEwb3NkMEpCUVhkQ08wMUJRM2hDTEhWQ1FVRjFRanROUVVOMlFpeFpRVUZaTzAxQlExb3NZMEZCWXp0TlFVTmtMR2RDUVVGblFqdE5RVU5vUWp0SlFVTkdMRU5CUVVNN08wbEJSVVE3U1VGRFFTeGxRVUZsTEVkQlFVY3NTVUZCUVN4alFVRk5MRVZCUVVNc1pVRkJaU3hEUVVGRE8wbEJSWHBETEUxQlFVMHNTVUZCU1N4SFFVRkpMQ3RDUVVFNFFpeEpRVUZMTEVWQlFVTTdTVUZEYkVRc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hsUVVGbExFVkJRVVVzU1VGQlNTeERRVUZETzBsQlEzQkVMRTlCUVU4c1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVTTdSVUZEYmtNN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzTmtKQlFUWkNMRU5CUVVNc1NVRkJTU3hGUVVGRk8wbEJRVVVzYTBKQlFXdENPMGxCUVVVN1JVRkJZU3hEUVVGRExFVkJRVVU3U1VGRGVFVXNTVUZCU1N4RFFVRkRMRFJDUVVFMFFpeERRVUZETEVsQlFVa3NSVUZCUlN3clFrRkJLMElzUTBGQlF6dEpRVVY0UlN4SlFVRkpMRmxCUVZrc1IwRkJSenROUVVGRkxHdENRVUZyUWp0TlFVRkZPMGxCUVdFc1EwRkJRenRKUVVOMlJEdEpRVU5CTEZsQlFWa3NSMEZCUnl4SlFVRkJMR05CUVUwc1JVRkJReXhaUVVGWkxFTkJRVU03U1VGRmJrTXNUVUZCVFN4SlFVRkpMRWRCUVVrc05FSkJRVEpDTEVsQlFVc3NSVUZCUXp0SlFVTXZReXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1NVRkJTU3hGUVVGRkxGbEJRVmtzUlVGQlJTeEpRVUZKTEVOQlFVTTdTVUZEYWtRc1QwRkJUeXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXp0RlFVTnVRenM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEdkRFFVRm5ReXhEUVVNNVFpeEpRVUZKTEVWQlEwb3NORUpCUVRSQ0xFVkJRelZDTEdWQlFXVXNSVUZEWmp0SlFVRkJMRWxCUVVFc2NVSkJRVUU3U1VGRFFTeEpRVUZKTEVOQlFVTXNORUpCUVRSQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEd0RFFVRnJReXhEUVVGRE8wbEJRek5GTEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETzBsQlJYcERMRWxCUTBVc05FSkJRVFJDTEUxQlFVMHNRMEZCUVN4TlFVRk5MR0ZCUVU0c1RVRkJUU3gzUWtGQlFTeHhRa0ZCUVN4SFFVRk9MRTFCUVUwc1EwRkJSU3hsUVVGbExHTkJRVUVzY1VKQlFVRXNkVUpCUVhaQ0xIRkNRVUZCTEVOQlFYbENMRTFCUVUwc1MwRkJTU3hEUVVGRExFTkJRVU1zUlVGRGRrVTdUVUZEUVR0TlFVTkJMRTFCUVUwc1NVRkJTU3hIUVVGSkxEaENRVUUyUWl4SlFVRkxMRVZCUVVNN1RVRkZha1FzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4cFFrRkJhVUlzUTBGRGJrTTdVVUZEUlN4SFFVRkhMRTFCUVUwN1VVRkRWQ3hsUVVGbExFVkJRVVVzUTBGRFppeEpRVUZKTEVOQlFVRXNUVUZCVFN4aFFVRk9MRTFCUVUwc2RVSkJRVTRzVFVGQlRTeERRVUZGTEdWQlFXVXNTMEZCU1N4RlFVRkZMRU5CUVVNc1JVRkRiRU1zUjBGQlJ5eGxRVUZsTzAxQlJYUkNMRU5CUVVNc1JVRkRSQ3hKUVVOR0xFTkJRVU03U1VGRFNEdEpRVU5CTEU5QlFVOHNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxFTkJRVU03UlVGRGJrTTdSVUZGUVN4TlFVRk5MSGxDUVVGNVFpeERRVUZETEUxQlFVMHNSVUZCUlR0SlFVTjBReXhOUVVGTkxGbEJRVmtzUjBGQlJ5eE5RVUZOTEVsQlFVRXNPRU5CUVdkRExFVkJRM3BFTEUxQlFVMHNRMEZCUXl4UlFVRlJMRVZCUTJZc1NVRkJTU3hEUVVGRExFdEJRMUFzUTBGQlF6dEpRVVZFTEVsQlFVa3NXVUZCV1N4SFFVRkhMRTFCUVUwN1NVRkRla0lzU1VGQlNUdE5RVU5HTEZsQlFWa3NSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4TlFVRk5MRVZCUVVVc1dVRkJXU3hEUVVGRE8wbEJRMnhGTEVOQlFVTXNRMEZCUXl4UFFVRlBMRXRCUVVzc1JVRkJSVHROUVVOa0xHbENRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenROUVVObUxGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMR05CUVdNc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeERRVUZETzAxQlF6VkVMRmxCUVZrc1EwRkJReXhsUVVGbExFZEJRVWNzUzBGQlN6dE5RVU53UXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHbENRVUZwUWl4RFFVTnVReXhOUVVGTkxFVkJRMDRzYlVOQlEwWXNRMEZCUXp0TlFVTkVMRTFCUVUwc1MwRkJTenRKUVVOaU8wbEJSVUVzV1VGQldTeERRVUZETEdWQlFXVXNSMEZCUnl4TFFVRkxPenRKUVVWd1F6dEpRVU5CTzBsQlEwRXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhwUWtGQmFVSXNRMEZEYmtNc1dVRkJXU3hGUVVOYUxHMURRVU5HTEVOQlFVTTdTVUZGUkN4UFFVRlBMRmxCUVZrN1JVRkRja0k3TzBWQlJVRTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRTFCUVUwc2QwSkJRWGRDTEVOQlF6VkNMRmxCUVZrc1JVRkRXaXhSUVVGUkxFVkJRMUlzVFVGQlRTeEZRVU5PTEdWQlFXVXNSVUZEWml4bFFVRmxMRWRCUVVjc1JVRkJSU3hGUVVOd1FpeFJRVUZSTEVWQlExSTdTVUZEUVN4SlFVTkZMR1ZCUVdVc1MwRkJTeXhUUVVGVExFbEJRemRDTEVOQlFVTXNhME5CUVd0RExFTkJRVU1zVVVGQlVTeERRVUZETEdWQlFXVXNRMEZCUXl4RlFVTTNSRHROUVVOQkxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlExb3NNRVJCUVhsRUxHVkJRV2RDTEVWQlF6VkZMRU5CUVVNN1NVRkRTRHM3U1VGRlFUdEpRVU5CTEVsQlFVa3NVVUZCVVN4RlFVRkZPMDFCUTFvc1NVRkJTU3hqUVVGakxFZEJRMmhDTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNVVUZCVVN4RFFVRkRPMDFCUXpGRUxFbEJRVWtzWTBGQll5eEZRVUZGTzFGQlEyeENMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRVZCUVVVc1kwRkJZeXhEUVVGRE8xRkJRelZETEdOQlFXTXNSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4alFVRmpMRU5CUVVNN1VVRkRja1VzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExHTkJRV01zUTBGQlF6dFJRVU55UXl4UFFVRlBMR05CUVdNN1RVRkRka0k3U1VGRFJqczdTVUZGUVR0SlFVTkJMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NUMEZCVHl4RFFVRkRMR2xDUVVGcFFpeERRVUZETEZGQlFWRXNRMEZCUXp0SlFVTTVSQ3hOUVVGTkxHOUNRVUZ2UWl4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMRU5CUVVNN1NVRkZha1VzVDBGQlR5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExHdENRVUZyUWl4RlFVRkZMRzlDUVVGdlFpeERRVUZET3p0SlFVVnNSVHRCUVVOS08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdTVUZEU1N4SlFVRkpMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdOQlFXTXNRMEZCUXp0TlFVTTVReXhSUVVGUkxFVkJRVVVzYTBKQlFXdENPMDFCUXpWQ0xFMUJRVTA3VFVGRFRqdEpRVU5HTEVOQlFVTXNRMEZCUXpzN1NVRkZSanRKUVVOQk8wbEJRMEVzU1VGQlNTeFJRVUZSTEVWQlFVVTdUVUZEV2l4TlFVRk5MRU5CUVVNc1VVRkJVU3hIUVVGSExGRkJRVkU3U1VGRE5VSTdTVUZGUVN4SlFVRkpMRTFCUVUwc1MwRkJTeXh2UWtGQlpTeEZRVUZGTzAxQlF6bENPMDFCUTBFc1NVRkJTU3hyUWtGQmEwSXNRMEZCUXl4SlFVRkpMRXRCUVVzc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVNc1JVRkJSVHRSUVVONlJDeE5RVUZOTEhWQ1FVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF6dFZRVU16UWl4UFFVRlBMRVZCUVVjc05FUkJRVEpFTzFWQlEzSkZMRWxCUVVrc1JVRkJSVHRaUVVOS0xFMUJRVTA3V1VGRFRpeFhRVUZYTEVWQlFVVXNhMEpCUVd0Q0xFTkJRVU1zU1VGQlNUdFpRVU53UXl4bFFVRmxMRVZCUVVVc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRPMVZCUXpORE8xRkJRMFlzUTBGQlF5eERRVUZETzAxQlEwbzdTVUZEUml4RFFVRkRMRTFCUVUwN1RVRkRURHROUVVOQk8wMUJRMEVzVFVGQlRTeHJRa0ZCYTBJc1IwRkJSeXhOUVVGTkxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhOUVVGTkxFTkJRVU03VFVGRGJFVXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEZGQlFWRXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlR0UlFVTjZSQ3hOUVVGTkxIVkNRVUZUTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmxCUVZrc1EwRkJRenRWUVVGRkxFbEJRVWtzUlVGQlJUdFpRVUZGTzFWQlFVODdVVUZCUlN4RFFVRkRMRU5CUVVNN1RVRkROMFE3U1VGRFJqdEpRVVZCTEUxQlFVMDdUVUZCUlR0SlFVRkxMRU5CUVVNc1IwRkJSeXhOUVVGTkxFbEJRVUVzYzBOQlFYZENMRVZCUXpkRExHdENRVUZyUWl4RlFVTnNRaXhKUVVGSkxFTkJRVU1zUzBGRFVDeERRVUZETzBsQlEwUXNUVUZCVFN4RFFVRkRMRWxCUVVrc1IwRkJSeXhsUVVGbExFbEJRVWtzU1VGQlNUczdTVUZGY2tNN1NVRkRRU3hOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUjBGRGVrTXNTVUZCUVN4clFrRkJXU3hGUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUTI1RExFdEJRVXM3U1VGRlZDeEpRVUZKTEZsQlFWa3NTVUZCU1N4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVWQlFVVTdUVUZEYUVRc1RVRkJUU3gzUWtGQmQwSXNSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZEYWtVc1RVRkJUU3hGUVVOT0xGbEJRMFlzUTBGQlF6dE5RVVZFTEUxQlFVMHNRMEZCUXl4M1FrRkJkMElzUjBGQlJ5eDNRa0ZCZDBJN1NVRkROVVE3U1VGRlFTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTFCUVUwc1EwRkJRenRKUVVNelFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTEUxQlFVMHNRMEZCUXp0SlFVVndReXhOUVVGTkxFZEJRVWNzVFVGQlRTeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zVFVGQlRTeERRVUZETzBsQlEzSkVMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4TlFVRk5MRU5CUVVNN1NVRkZOMElzVDBGQlR5eE5RVUZOTzBWQlEyWTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4TlFVRk5MR2RDUVVGblFpeERRVUZETEUxQlFVMHNSVUZCUlN4bFFVRmxMRVZCUVVVN1NVRkRPVU1zVFVGQlRTeHZRa0ZCYjBJc1IwRkRlRUlzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRXRCUVVzc2IwTkJRWFZDTEVOQlFVTXNUVUZCVFN4TFFVTjBSQ3hOUVVGTkxFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGVFTXNUVUZCVFR0TlFVTktMRkZCUVZFc1JVRkJSU3hsUVVGbE8wMUJRM3BDTEZsQlFWa3NSVUZCUlN4dFFrRkJiVUk3VFVGRGFrTXNiMEpCUVc5Q0xFVkJRVVU3U1VGRGVFSXNRMEZCUXl4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRTFCUVUwc1JVRkJSU3h2UWtGQmIwSXNRMEZCUXp0SlFVTXZSQ3hOUVVGTk8wMUJRVVVzVVVGQlVTeEZRVUZGTEdWQlFXVTdUVUZCUlR0SlFVRm5RaXhEUVVGRExFZEJRMnhFTEUxQlFVMHNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEUxQlFVMHNSVUZCUlN4bFFVRmxMRU5CUVVNN08wbEJSWHBFTzBsQlEwRXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zWTBGQll5eERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZMRU5CUVVNN1NVRkRkRVFzU1VGQlNTeGxRVUZsTEVWQlFVVTdUVUZEYmtJc1RVRkJUU3hEUVVGRExHVkJRV1VzUjBGQlJ5eGxRVUZsTzBsQlF6RkRPMGxCUlVFc1NVRkJTU3h2UWtGQmIwSXNSVUZCUlR0TlFVTjRRaXhOUVVGTkxESkNRVUV5UWl4SFFVRkhMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMDFCUXpWRUxFbEJRMFVzVDBGQlR5eERRVUZETERKQ1FVRXlRaXhEUVVGRExFbEJRM0JETEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkROME03VVVGRFFTeE5RVUZOTEVOQlFVTXNXVUZCV1N4SFFVRkhMSGRDUVVGdFFqdFJRVU42UXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExGbEJRVmtzUjBGQlJ5eEpRVUZCTERKQ1FVRmxMRVZCUXpWRExESkNRVUV5UWl4RFFVRkRMRlZCUXpsQ0xFTkJRVU03VVVGRFJDeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzlDUVVGdlFpeEhRVUZITEVsQlFVRXNNa0pCUVdVc1JVRkRjRVFzTWtKQlFUSkNMRU5CUVVNc1YwRkRPVUlzUTBGQlF6dE5RVU5JTEVOQlFVTXNUVUZCVFN4SlFVTk1MRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVTeEpRVU40UWl4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeEpRVU0zUWl4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zYjBKQlFXOUNMRVZCUTNKRE8xRkJRMEU3VVVGRFFUdFJRVU5CTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1dVRkJXU3hIUVVGSExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNVVUZCVVR0UlFVTjJSQ3hOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEc5Q1FVRnZRaXhIUVVGSExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNVVUZCVVR0UlFVTXZSQ3hKUVVGSkxFMUJRVTBzUTBGQlF5eE5RVUZOTEV0QlFVc3NiMEpCUVdVc1JVRkJSVHRWUVVOeVF5eE5RVUZOTEVOQlFVTXNXVUZCV1N4SFFVRkhMSGRDUVVGdFFqdFJRVU16UXl4RFFVRkRMRTFCUVUwN1ZVRkRUQ3hOUVVGTkxFTkJRVU1zV1VGQldTeEhRVUZITEcxQ1FVRmpMRU5CUVVNc1lVRkJZVHRSUVVOd1JEdE5RVU5HTEVOQlFVTXNUVUZCVFR0UlFVTk1MRWxCUTBjc2JVSkJRVzFDTEVsQlEyeENMREpDUVVFeVFpeEpRVU16UWl4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeEpRVU0zUWl4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zYjBKQlFXOUNMRWxCUTNaRExFMUJRVTBzUTBGQlF5eE5RVUZOTEV0QlFVc3NiMEpCUVdVc1JVRkRha003VlVGRFFTeE5RVUZOTEVOQlFVTXNXVUZCV1N4SFFVRkhMSFZDUVVGclFpeERRVUZETEUxQlFVMDdVVUZEYWtRc1EwRkJReXhOUVVGTk8xVkJRMHdzVFVGQlRTeERRVUZETEZsQlFWa3NSMEZCUnl4dFFrRkJZeXhEUVVGRExHRkJRV0U3VVVGRGNFUTdVVUZGUVN4SlFVRkpMRzFDUVVGdFFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhaUVVGWkxFVkJRVVU3VlVGRGVFUTdWVUZEUVR0VlFVTkJMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeEhRVUZITEcxQ1FVRnRRanRSUVVOd1JEdFJRVVZCTEVsQlEwVXNNa0pCUVRKQ0xFbEJRek5DTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXh2UWtGQmIwSXNSVUZEY2tNN1ZVRkRRVHRWUVVOQk8xVkJRMEVzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4dlFrRkJiMElzUjBGQlJ5d3lRa0ZCTWtJN1VVRkRjRVU3VVVGRlFTeEpRVUZKTEdWQlFXVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeEZRVUZGTzFWQlEzQkVPMVZCUTBFN1ZVRkRRVHRWUVVOQkxFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNXVUZCV1N4SFFVRkhMR1ZCUVdVN1VVRkRhRVE3VVVGRlFTeEpRVU5GTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1dVRkJXU3hKUVVNMVFpeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc2IwSkJRVzlDTEVWQlEzSkRPMVZCUTBFN1ZVRkRRVHRWUVVOQk8xVkJRMEU3VlVGRFFTeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzlDUVVGdlFpeEhRVUZITEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1dVRkJXVHRSUVVOeVJUdE5RVU5HT3p0TlFVVkJPenROUVVWQkxFOUJRVThzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4UlFVRlJPMGxCUTJwRExFTkJRVU1zVFVGQlRUdE5RVU5NTzAxQlEwRTdPMDFCUlVFc1QwRkJUeXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEc5Q1FVRnZRanROUVVNelF5eFBRVUZQTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1dVRkJXVHRKUVVOeVF6czdTVUZGUVR0SlFVTkJPMGxCUTBFN1NVRkRRVHRKUVVOQkxFbEJRMFVzWlVGQlpTeEpRVU5tTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhSUVVGUkxFbEJRM3BDTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXh2UWtGQmIwSXNTVUZEY2tNc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEZsQlFWa3NSVUZETjBJN1RVRkRRU3hOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEZGQlFWRXNSMEZCUnl4bFFVRmxPMGxCUXpWRE8wbEJSVUVzU1VGQlNTeGxRVUZsTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUlVGQlJUdE5RVU16UXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUjBGQlJ5eGxRVUZsTzAxQlEzSkRMRTFCUVUwc1EwRkJReXh0UWtGQmJVSXNSMEZCUnl4bFFVRmxPMGxCUXpsRE8wbEJRMEVzVFVGQlRTeERRVUZETEcxQ1FVRnRRaXhIUVVGSE8wMUJRek5DTEZsQlFWa3NSVUZCUlN4TlFVRk5MRU5CUVVNc1dVRkJXVHROUVVOcVF5eEhRVUZITEVWQlFVVXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSE8wMUJRM2hDTEZGQlFWRXNSVUZCUlN4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExGRkJRVkU3VFVGRGJFTXNXVUZCV1N4RlFVRkZMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldUdE5RVU14UXl4dlFrRkJiMElzUlVGQlJTeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRPMGxCUTNoRExFTkJRVU03U1VGRFJDeFBRVUZQTEUxQlFVMDdSVUZEWmpzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRTFCUVUwc2EwSkJRV3RDTEVOQlFVTXNUVUZCVFN4RlFVRkZMRzlDUVVGdlFpeEZRVUZGTzBsQlEzSkVMRWxCUTBjc1EwRkJReXh2UWtGQmIwSXNTVUZCU1N4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExGRkJRVkVzU1VGRGFrUXNiMEpCUVc5Q0xFbEJRMjVDTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1dVRkJXU3hKUVVNMVFpeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzlDUVVGeFFpeEZRVU4yUXp0TlFVTkJMRTlCUVU4c1EwRkJReXhEUVVGRE8wbEJRMWc3U1VGRlFTeEpRVUZKTzAxQlEwWXNUVUZCVFR0UlFVRkZMR1ZCUVdVN1VVRkJSVHROUVVGblFpeERRVUZETEVkQlEzaERMRTFCUVUwc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4RFFVRkRMRU5CUVVNN1RVRkRla01zU1VGRFJTeHZRa0ZCYjBJc1NVRkRjRUlzWlVGQlpTeExRVUZMTEhGQ1FVRm5RaXhEUVVGRExGTkJRVk1zUlVGRE9VTTdVVUZEUVN4TlFVRk5PMVZCUTBvc1RVRkJUU3hGUVVGRk8xbEJRVVVzTmtKQlFUWkNPMWxCUVVVN1ZVRkJjMElzUTBGQlF5eEhRVUZITEVOQlFVTTdVVUZEZEVVc1EwRkJReXhIUVVGSExHVkJRV1U3VVVGRmJrSXNTVUZCU1N3MlFrRkJOa0lzU1VGQlNTeHhRa0ZCY1VJc1JVRkJSVHRWUVVNeFJDeFBRVUZQTzFsQlEwd3NXVUZCV1N4RlFVRkZMRWxCUVVFc01rSkJRV1VzUlVGQlF5eHhRa0ZCY1VJc1EwRkJRenRaUVVOd1JDeHZRa0ZCYjBJc1JVRkJSU3hKUVVGQkxESkNRVUZsTEVWQlEyNURMRFpDUVVOR08xVkJRMFlzUTBGQlF6dFJRVU5JTzAxQlEwWXNRMEZCUXl4TlFVRk5MRWxCUVVrc1pVRkJaU3hMUVVGTExIRkNRVUZuUWl4RFFVRkRMRTFCUVUwc1JVRkJSVHRSUVVOMFJEdFJRVU5CTzFGQlEwRXNUMEZCVHp0VlFVTk1MRkZCUVZFc1JVRkJSU3hKUVVGQkxESkNRVUZsTEVWQlFVTXNaVUZCWlN4RFFVRkRMRTFCUVUwN1VVRkRiRVFzUTBGQlF6dE5RVU5JTEVOQlFVTXNUVUZCVFN4SlFVRkpMR1ZCUVdVc1MwRkJTeXh4UWtGQlowSXNRMEZCUXl4WFFVRlhMRVZCUVVVN1VVRkRNMFE3VVVGRFFUdFJRVU5CTEU5QlFVODdWVUZEVEN4UlFVRlJMRVZCUVVVc1NVRkJRU3d5UWtGQlpTeEZRVUZETEdWQlFXVXNRMEZCUXl4UlFVRlJPMUZCUTNCRUxFTkJRVU03VFVGRFNEdEpRVU5HTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSVHROUVVOV0xFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTJ4Q08wbEJSVUVzVFVGQlRTeFJRVUZSTEVkQlFVY3NUVUZCVFN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlJUVkRMRTlCUVU4N1RVRkJSU3hSUVVGUkxFVkJRVVVzVVVGQlVTeEpRVUZKTEVsQlFVRXNhMEpCUVZrc1JVRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVXNRMEZCUXp0SlFVRkZMRU5CUVVNN1JVRkRkRVU3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzVFVGQlRTeHRRa0ZCYlVJc1EwRkJReXhOUVVGTkxFVkJRVVU3U1VGRGFFTXNUVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVNN1NVRkRla01zVFVGQlRTeHpRa0ZCYzBJc1IwRkJSeXg1UTBGQlowTXNRMEZCUXl4UFFVRlBMRU5CUVVNN1NVRkRlRVVzVFVGQlRTeFRRVUZUTEVkQlFVY3NTVUZCUVN4clFrRkJXU3hGUVVGRExFOUJRVThzUTBGQlF6dEpRVVYyUXl4SlFVRkpMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eEZRVUZGTzAxQlEzWkNMRTlCUVU4c1EwRkJReXhEUVVGRE8wbEJRMWdzUTBGQlF5eE5RVUZOTEVsQlEwd3NUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRkxFbEJRMnhDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRXRCUVVzc05FSkJRV1VzUTBGQlF5eFZRVUZWTEVsQlF6RkRMRk5CUVZNc1MwRkJTeXhSUVVGUkxFbEJRM1JDTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRM0pDTzAxQlEwRTdUVUZEUVN4UFFVRlBPMUZCUVVVc1VVRkJVU3hGUVVGRkxHVkJRVlVzUTBGQlF6dE5RVUZQTEVOQlFVTTdTVUZEZUVNN1NVRkZRU3hOUVVGTk8wMUJRVVVzWVVGQllUdE5RVUZGTEdWQlFXVTdUVUZCUlR0SlFVRm5RaXhEUVVGRExFZEJRM1pFTEUxQlFVMHNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhsUVVGbExFTkJRVU1zVFVGQlRTeERRVUZET3p0SlFVVTVRenRKUVVOQkxFMUJRVTBzVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1dVRkJXU3hEUVVNeFF5eEpRVUZCTEd0Q1FVRlpMRVZCUVVNc1pVRkJaU3hEUVVGRExFVkJRemRDTEdGQlFXRXNSVUZEWWl4elFrRkRSaXhEUVVGRE8wbEJSVVFzVDBGQlR6dE5RVUZGTEZGQlFWRTdUVUZCUlR0SlFVRm5RaXhEUVVGRE8wVkJRM1JET3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNiMEpCUVc5Q0xFTkJRMnhDTEdOQlFXTXNSVUZEWkN4cFFrRkJhVUlzUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZEZEVJc2EwSkJRV3RDTEVkQlFVY3NSVUZCUlN4RlFVTjJRanRKUVVOQkxFMUJRVTA3VFVGQlJUdEpRVUZUTEVOQlFVTXNSMEZCUnl4alFVRmpPMGxCUTI1RExFMUJRVTBzYVVKQlFXbENMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRelZDTEUxQlFVMHNXVUZCV1N4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVOMlFpeEpRVUZKTEdsQ1FVRnBRaXhEUVVGRExGRkJRVkVzUlVGQlJUdE5RVU01UWl4WlFVRlpMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVUVzYVVKQlFXbENMR0ZCUVdwQ0xHbENRVUZwUWl4MVFrRkJha0lzYVVKQlFXbENMRU5CUVVVc1IwRkJSeXhMUVVGSkxHVkJRVlVzUTBGQlF5eE5RVUZOTzBsQlEyaEZPMGxCUlVFc1NVRkJTU3hwUWtGQmFVSXNRMEZCUXl4cFFrRkJhVUlzUlVGQlJUdE5RVU4yUXl4WlFVRlpMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zYVVKQlFXbENPMGxCUTNSRk8wbEJSVUVzU1VGQlNTeHBRa0ZCYVVJc1EwRkJReXhaUVVGWkxFVkJRVVU3VFVGRGJFTXNXVUZCV1N4RFFVRkRMRmxCUVZrc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXl4WlFVRlpPMGxCUXpWRU8wbEJSVUVzU1VGQlNTeEpRVUZCTEd0RFFVRnZRaXhGUVVGRExHTkJRV01zUTBGQlF5eEZRVUZGTzAxQlEzaERMR2xDUVVGcFFpeERRVUZETEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1dVRkJXVHROUVVOMFJDeHBRa0ZCYVVJc1EwRkJReXh2UWtGQmIwSXNSMEZCUnl4UlFVRlJMRU5CUVVNc2IwSkJRVzlDTzAxQlEzUkZMRmxCUVZrc1EwRkJReXhaUVVGWkxFZEJRM1pDTEVOQlFVRXNhVUpCUVdsQ0xHRkJRV3BDTEdsQ1FVRnBRaXgxUWtGQmFrSXNhVUpCUVdsQ0xFTkJRVVVzV1VGQldTeExRVU12UWl4SlFVRkJMRzFDUVVGUExFVkJRMHdzU1VGQlFTd3dRa0ZCYjBJc1JVRkRiRUlzU1VGQlFTeGhRVUZQTEVWQlFVTXNVVUZCVVN4RFFVRkRMRmxCUVZrc1EwRkJReXhGUVVNNVFpeHJRa0ZCYTBJc1JVRkRiRUlzUlVGRFJpeERRVU5HTEVOQlFVTTdUVUZEU0N4WlFVRlpMRU5CUVVNc2IwSkJRVzlDTEVkQlF5OUNMRU5CUVVFc2FVSkJRV2xDTEdGQlFXcENMR2xDUVVGcFFpeDFRa0ZCYWtJc2FVSkJRV2xDTEVOQlFVVXNiMEpCUVc5Q0xFdEJRM1pETEVsQlFVRXNiVUpCUVU4c1JVRkRUQ3hKUVVGQkxEQkNRVUZ2UWl4RlFVTnNRaXhKUVVGQkxHRkJRVThzUlVGQlF5eFJRVUZSTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUlVGRGRFTXNhMEpCUVd0Q0xFVkJRMnhDTEVWQlEwWXNRMEZEUml4RFFVRkRPMGxCUTB3c1EwRkJReXhOUVVGTk8wMUJRMHdzYVVKQlFXbENMRU5CUVVNc1VVRkJVU3hIUVVGSExGRkJRVkVzUTBGQlF5eFJRVUZSTzAxQlF6bERMRmxCUVZrc1EwRkJReXhSUVVGUkxFZEJRMjVDTEVOQlFVRXNhVUpCUVdsQ0xHRkJRV3BDTEdsQ1FVRnBRaXgxUWtGQmFrSXNhVUpCUVdsQ0xFTkJRVVVzVVVGQlVTeExRVU16UWl4SlFVRkJMRzFDUVVGUExFVkJRMHdzU1VGQlFTd3dRa0ZCYjBJc1JVRkRiRUlzU1VGQlFTeGhRVUZQTEVWQlFVTXNVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVNeFFpeHJRa0ZCYTBJc1JVRkRiRUlzUlVGRFJpeERRVU5HTEVOQlFVTTdTVUZEVER0SlFVVkJMRTlCUVU4N1RVRkJSU3hwUWtGQmFVSTdUVUZCUlR0SlFVRmhMRU5CUVVNN1JVRkROVU03TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRkRSU3hOUVVGTkxIVkNRVUYxUWl4RFFVTXpRaXhaUVVGWkxFVkJRMW9zYVVKQlFXbENMRVZCUTJwQ08wbEJRVVVzWjBKQlFXZENPMGxCUVVVN1JVRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVWQlEyNURPMGxCUTBFN1NVRkRRU3hKUVVGSkxGRkJRVkVzUlVGQlJUdE5RVU5hTEUxQlFVMHNZMEZCWXl4SFFVTnNRaXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETERCQ1FVRXdRaXhEUVVGRExGRkJRVkVzUTBGQlF6dE5RVU14UkN4SlFVRkpMR05CUVdNc1JVRkJSVHRSUVVOc1FpeFBRVUZQTEdOQlFXTTdUVUZEZGtJN1NVRkRSanRKUVVWQkxFMUJRVTBzWTBGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1kwRkJZeXhEUVVGRExGbEJRVmtzUTBGQlF6dEpRVU4yUlN4TlFVRk5PMDFCUVVVN1NVRkJVeXhEUVVGRExFZEJRVWNzWTBGQll6dEpRVU51UXl4TlFVRk5PMDFCUVVVc1NVRkJTVHROUVVGRk8wbEJRVTBzUTBGQlF5eEhRVUZITEZGQlFWRTdTVUZGYUVNc1RVRkJUVHROUVVGRkxHbENRVUZwUWp0TlFVRkZPMGxCUVdFc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkRia1VzWTBGQll5eEZRVU5rTzAxQlEwVXNSMEZCUnl4cFFrRkJhVUk3VFVGRGNFSTdUVUZEUVR0TlFVTkJPMDFCUTBFc1VVRkJVU3hGUVVGRkxHbENRVUZwUWl4RFFVRkRMRkZCUVZFc1NVRkJTU3hsUVVGVkxFTkJRVU03U1VGRGNrUXNRMEZEUml4RFFVRkRPMGxCUlVRc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4alFVRmpMRU5CUVVNN1RVRkRia1FzVVVGQlVTeEZRVUZGTzFGQlExSXNTVUZCU1R0UlFVTktMRVZCUVVVc1JVRkJSU3hKUVVGSk8xRkJRMUlzUzBGQlN6dFJRVU5NTEV0QlFVc3NSVUZCUlN4TFFVRkxPMUZCUTFvc1IwRkJSenROUVVOTUxFTkJRVU03VFVGRFJDeHBRa0ZCYVVJN1RVRkRha0lzWlVGQlpTeEZRVUZGTEV0QlFVczdUVUZEZEVJc1RVRkJUU3hGUVVGRkxEaENRVUZwUWl4RFFVRkRMRkZCUVZFN1RVRkRiRU1zU1VGQlNTeEZRVUZGTERSQ1FVRmxMRU5CUVVNc1RVRkJUVHROUVVNMVFqdEpRVU5HTEVOQlFVTXNRMEZCUXp0SlFVVkdMRWxCUVVrc1owSkJRV2RDTEVWQlFVVTdUVUZEY0VJc1UwRkJVeXhEUVVGRExHZENRVUZuUWl4SFFVRkhMR2RDUVVGblFqdEpRVU12UXp0SlFVVkJMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zVTBGQlV5eERRVUZETzBsQlF6bENMRTFCUVUwc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRk5CUVZNc1EwRkJReXhGUVVGRkxFVkJRVVVzVVVGQlVTeEZRVUZGTzAxQlEzQkVMR3RDUVVGclFpeEZRVUZGTzBsQlEzUkNMRU5CUVVNc1EwRkJRenRKUVVOR0xFOUJRVThzVTBGQlV6dEZRVU5zUWpzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNUVUZCVFN4M1FrRkJkMElzUTBGRE5VSXNXVUZCV1N4RlFVTmFMR2xDUVVGcFFpeEZRVU5xUWp0SlFVRkZMR2RDUVVGblFqdEpRVUZGTzBWQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVOdVF6dEpRVU5CTzBsQlEwRXNTVUZCU1N4UlFVRlJMRVZCUVVVN1RVRkRXaXhOUVVGTkxHTkJRV01zUjBGRGJFSXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXd3UWtGQk1FSXNRMEZCUXl4UlFVRlJMRU5CUVVNN1RVRkRNVVFzU1VGQlNTeGpRVUZqTEVWQlFVVTdVVUZEYkVJc1QwRkJUeXhqUVVGak8wMUJRM1pDTzBsQlEwWTdTVUZGUVN4TlFVRk5MR05CUVdNc1IwRkJSeXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdOQlFXTXNRMEZCUXl4WlFVRlpMRU5CUVVNN1NVRkRka1VzVFVGQlRUdE5RVUZGTzBsQlFWTXNRMEZCUXl4SFFVRkhMR05CUVdNN1NVRkZia01zVFVGQlRUdE5RVUZGTEdsQ1FVRnBRanROUVVGRk8wbEJRV0VzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGRGJrVXNZMEZCWXl4RlFVTmtMR2xDUVVOR0xFTkJRVU03U1VGRlJDeE5RVUZOTEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHTkJRV01zUTBGQlF6dE5RVU51UkN4UlFVRlJMRVZCUVVVN1VVRkRVaXhIUVVGSExGRkJRVkU3VVVGRFdDeEhRVUZITzAxQlEwd3NRMEZCUXp0TlFVTkVMR2xDUVVGcFFqdE5RVU5xUWl4bFFVRmxMRVZCUVVVc1MwRkJTenROUVVOMFFpeE5RVUZOTEVWQlFVVXNPRUpCUVdsQ0xFTkJRVU1zVVVGQlVUdE5RVU5zUXl4SlFVRkpMRVZCUVVVc05FSkJRV1VzUTBGQlF5eExRVUZMTzAxQlF6TkNMRmxCUVZrc1JVRkJSU3hqUVVGakxFTkJRVU1zU1VGQlNUdE5RVU5xUXp0SlFVTkdMRU5CUVVNc1EwRkJRenRKUVVWR0xFbEJRVWtzWjBKQlFXZENMRVZCUVVVN1RVRkRjRUlzVTBGQlV5eERRVUZETEdkQ1FVRm5RaXhIUVVGSExHZENRVUZuUWp0SlFVTXZRenRKUVVWQkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNVMEZCVXl4RFFVRkRPMGxCUXpsQ0xFMUJRVTBzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExGTkJRVk1zUTBGQlF5eEZRVUZGTEVWQlFVVXNVVUZCVVN4RlFVRkZPMDFCUTNCRUxHdENRVUZyUWl4RlFVRkZPMGxCUTNSQ0xFTkJRVU1zUTBGQlF6dEpRVU5HTEU5QlFVOHNVMEZCVXp0RlFVTnNRanM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc1RVRkJUU3hwUWtGQmFVSXNRMEZCUXl4TlFVRk5MRVZCUVVVN1NVRkRPVUlzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4cFFrRkJhVUlzUTBGRGJrTXNUVUZCVFN4RlFVTk9MR3REUVVOR0xFTkJRVU03UlVGRFNEczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeE5RVUZOTERKQ1FVRXlRaXhEUVVGRExFMUJRVTBzUlVGQlJTeFJRVUZSTEVWQlFVVTdTVUZEYkVRc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eHBRa0ZCYVVJc1EwRkRia01zVFVGQlRTeEZRVU5PTEcxRFFVTkdMRU5CUVVNN1NVRkRSQ3hOUVVGTkxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeEZRVUZGTEZGQlFWRXNRMEZCUXp0RlFVTndSRHM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4TlFVRk5MR3RDUVVGclFpeERRVUZETEVsQlFVa3NSVUZCUlN4UlFVRlJMRVZCUVVVN1NVRkJSU3hyUWtGQmEwSXNSMEZCUnp0RlFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJUdEpRVU16UlR0SlFVTkJPMGxCUTBFN1NVRkRRVHRKUVVOQk8wbEJRMEVzVFVGQlRTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETzBsQlIzWkVMRWxCUVVrc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJUdE5RVU55UXp0SlFVTkdPMGxCUTBFc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRGFrTXNTVUZCU1N4VFFVRlRPMGxCUTJJc1NVRkJTVHROUVVOR08wMUJRMEVzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eEpRVUZKTEVOQlFVTTdUVUZETjBNc1NVRkJTU3hyUWtGQmEwSXNSVUZCUlR0UlFVTjBRaXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEUxQlFVMHNRMEZCUXp0TlFVTTVRanROUVVOQk8wMUJRMEVzVFVGQlRTeFhRVUZYTEVkQlFVY3NUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSk8wMUJRM2hETzAxQlEwRXNTVUZCU1R0UlFVRkZPMDFCUVdsQ0xFTkJRVU1zUjBGQlJ5eE5RVUZOTzAxQlEycERMR2RDUVVGblFpeEhRVUZITEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUTBGQlF6dE5RVU16UXl4VFFVRlRMRWRCUVVjc1RVRkJUU3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEZsQlFWa3NRMEZCUXl4WFFVRlhMRU5CUVVNN1RVRkROMFE3VFVGRFFUdE5RVU5CTzAxQlEwRXNUVUZCVFN4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExHbENRVUZwUWl4SFFVTnNReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NSMEZEY2tJc1UwRkJVeXhEUVVGRExGTkJRVk03VFVGRGRrSXNUVUZCVFN4aFFVRmhMRWRCUTJwQ0xHZENRVUZuUWl4TFFVRkxMRU5CUVVNc1IwRkJSeXhuUWtGQlowSXNSMEZCUnl4blFrRkJaMElzU1VGQlNTeExRVUZMTzAxQlJYWkZMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eEhRVUZITEVsQlFVRXNhMEpCUVZrc1JVRkJReXhoUVVGaExFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMDFCUTJoRk8wMUJRMEVzVFVGQlRTeERRVUZETEZsQlFWa3NSMEZCUnl4VFFVRlRMRU5CUVVNc1dVRkJXVHROUVVNMVF5eEpRVUZKTEdkQ1FVRm5RaXhGUVVGRk8xRkJRM0JDTEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NaMEpCUVdkQ08wMUJRM3BFTzAxQlEwRXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhwUWtGQmFVSXNRMEZEYmtNc1RVRkJUU3hGUVVOT0xHbERRVU5HTEVOQlFVTTdUVUZEUkR0TlFVTkJMRTFCUVUwc1MwRkJTeXhIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNN1RVRkRPVU1zVFVGQlRTeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRU5CUVVNN1RVRkRjRVFzU1VGQlNTeERRVUZETERaQ1FVRTJRaXhEUVVOb1F5eE5RVUZOTEVWQlEwNHNkME5CUVRKQ0xFTkJRVU1zVVVGQlVTeEZRVU53UXl4UlFVTkdMRU5CUVVNN1RVRkRSRHROUVVOQkxGTkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0SlFVTjZRaXhEUVVGRExFTkJRVU1zVDBGQlR5eEhRVUZITEVWQlFVVTdUVUZEV2p0TlFVTkJMRWxCUVVrN1VVRkRSaXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1NVRkJTU3hGUVVGRkxFZEJRVWNzUlVGQlJTeFJRVUZSTEVOQlFVTTdUVUZETlVNc1EwRkJReXhEUVVGRExFOUJRVThzU1VGQlNTeEZRVUZGTzFGQlEySXNhVUpCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETzAxQlEycENPMDFCUTBFN1RVRkRRU3hKUVVGSkxGTkJRVk1zUlVGQlJUdFJRVU5pTEZOQlFWTXNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenROUVVONlFqdE5RVU5CTzAxQlEwRXNUVUZCVFN4SFFVRkhPMGxCUTFnc1EwRkJReXhUUVVGVE8wMUJRMUlzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZEZEVNN1JVRkRSanRGUVVWQkxFMUJRVTBzWjBOQlFXZERMRU5CUVVNc1kwRkJZeXhIUVVGSExFVkJRVVVzUlVGQlJUdEpRVU14UkN4SlFVRkpMR05CUVdNc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF5eEZRVUZGTzAxQlF5OUNMRTlCUVU4c1JVRkJSVHRKUVVOWU8wbEJSVUVzVFVGQlRTeFRRVUZUTEVkQlFVY3NZMEZCWXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOdVF5eE5RVUZOTEUxQlFVMHNSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXh6UWtGQmMwSXNRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRE8wbEJRMmhGTEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWNzYzBKQlFXdENMRU5CUVVNc1ZVRkJWU3hEUVVGRExGTkJRVk1zUlVGQlJUdE5RVU5vUlR0SlFVTkdMRU5CUVVNc1EwRkJRenRKUVVOR0xFMUJRVTBzZDBKQlFYZENMRWRCUVVjc1NVRkJRU3d5UWtGQlZ5eEZRVUZETEdkQ1FVRm5RaXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZGTVVVc1NVRkJTU3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExIZENRVUYzUWl4RFFVRkRMRVZCUVVVN1RVRkRla1FzVDBGQlR5eEZRVUZGTzBsQlExZzdTVUZEUVN4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMSGRDUVVGM1FpeERRVUZETzBsQlEzSkVMRWxCUVVrc1QwRkJUeXhGUVVGRkxGTkJRVk03U1VGRGRFSXNTVUZCU1R0TlFVTkdPMDFCUTBFc1RVRkJUU3hYUVVGWExFZEJRVWNzVTBGQlV5eERRVUZETEVsQlFVazdUVUZEYkVNc1UwRkJVeXhIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1YwRkJWeXhEUVVGRE8wMUJRemRFTEUxQlFVMHNTMEZCU3l4SFFVRkhMRk5CUVZNc1EwRkJReXhUUVVGVE8wMUJSV3BETEU5QlFVOHNSMEZCUnl4TlFVRk5MRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRM3BDTEdOQlFXTXNRMEZCUXl4SFFVRkhMRU5CUVVVc1VVRkJVU3hKUVVGTE8xRkJReTlDTEZGQlFWRXNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJRU3hyUWtGQldTeEZRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRGFrUXNUMEZCVHl4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNVVUZCVVN4RFFVRkRPMDFCUXk5RExFTkJRVU1zUTBGRFNDeERRVUZETzBsQlEwZ3NRMEZCUXl4RFFVRkRMRTlCUVU4c1IwRkJSeXhGUVVGRk8wMUJRMW9zYVVKQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRE8wMUJRMlE3VFVGRFFUdE5RVU5CTEUxQlFVMHNSMEZCUnp0SlFVTllMRU5CUVVNc1UwRkJVenROUVVOU0xFbEJRVWtzVTBGQlV5eEZRVUZGTzFGQlEySXNVMEZCVXl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8wMUJRM3BDTzAxQlEwRXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEUxQlFVMHNRMEZCUXl4M1FrRkJkMElzUTBGQlF6dEpRVU14UkR0SlFVTkJMRTlCUVU4c1QwRkJUenRGUVVOb1FqdEZRVVZCTEUxQlFVMHNkVUpCUVhWQ0xFTkJRVU1zVTBGQlV5eEZRVUZGTzBsQlEzWkRMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NUMEZCVHl4RFFVRkRMR2xDUVVGcFFpeERRVUZETEZOQlFWTXNRMEZCUXp0SlFVTXZSRHRKUVVOQkxFMUJRVTBzVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRKUVVOcVF5eE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkJMR3REUVVGdlFpeEZRVUZETzAxQlFVVXNVVUZCVVN4RlFVRkZPMGxCUVcxQ0xFTkJRVU1zUTBGQlF5eEhRVU12UkN4dlEwRkJkVUlzUTBGQlF5eFRRVUZUTEVkQlEycERMRzlEUVVGMVFpeERRVUZETEUxQlFVMDdTVUZEYkVNc1RVRkJUU3hSUVVGUkxFZEJRVWM3VFVGRFppeEhRVUZITEd0Q1FVRnJRanROUVVOeVFpeEpRVUZKTzAxQlEwb3NVVUZCVVN4RlFVRkZMR3RDUVVGclFpeERRVUZETEVkQlFVYzdUVUZEYUVNc1QwRkJUeXhGUVVGRkxFbEJRVWtzWjBKQlFVOHNRMEZCUXl4UFFVRlBMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zYlVKQlFXMUNMRU5CUVVNN1NVRkRlRVFzUTBGQlF6dEpRVU5FTzBsQlEwRXNUVUZCVFN4WFFVRlhMRWRCUVVjc1VVRkJVU3hEUVVGRExFbEJRVWs3U1VGRGFrTXNUVUZCVFN4TlFVRk5MRWRCUVVjc1RVRkJUU3hKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1YwRkJWeXhEUVVGRE8wbEJRemRFTEUxQlFVMHNZVUZCWVN4SFFVRkhMSE5DUVVGclFpeERRVUZETEZWQlFWVXNRMEZCUXl4UlFVRlJMRVZCUVVVN1RVRkJSVHRKUVVGUExFTkJRVU1zUTBGQlF6dEpRVU42UlN4TlFVRk5MRmRCUVZjc1IwRkJSeXhOUVVGTkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNZVUZCWVN4RlFVRkZMRmRCUVZjc1EwRkJRenRKUVVWd1JTeE5RVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkJMREpDUVVGWExFVkJRVU1zVjBGQlZ5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRiRVFzVDBGQlR5eExRVUZMTzBWQlEyUTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNUVUZCVFN4bFFVRmxMRU5CUVVNc1NVRkJTU3hGUVVGRk8wbEJRekZDTEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXp0SlFVTjJSRHRKUVVOQkxFMUJRVTBzVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRKUVVOcVF5eE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkJMR3REUVVGdlFpeEZRVUZETEUxQlFVMHNRMEZCUXl4SFFVTnlReXh2UTBGQmRVSXNRMEZCUXl4VFFVRlRMRWRCUTJwRExHOURRVUYxUWl4RFFVRkRMRTFCUVUwN1NVRkRiRU1zVFVGQlRTeFJRVUZSTEVkQlFVYzdUVUZEWml4SFFVRkhMRTFCUVUwc1EwRkJReXhSUVVGUk8wMUJRMnhDTEVsQlFVazdUVUZEU2l4UFFVRlBPMDFCUTFBc1VVRkJVU3hGUVVGRkxFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTTdTVUZETlVJc1EwRkJRenRKUVVORU8wbEJRMEVzVFVGQlRTeFhRVUZYTEVkQlFVY3NVVUZCVVN4RFFVRkRMRWxCUVVrN1NVRkRha01zVFVGQlRTeE5RVUZOTEVkQlFVY3NUVUZCVFN4SlFVRkpMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJRenRKUVVNdlJDeE5RVUZOTEdGQlFXRXNSMEZCUnl4elFrRkJhMElzUTBGQlF5eFZRVUZWTEVOQlFVTXNVVUZCVVN4RlFVRkZPMDFCUVVVN1NVRkJUeXhEUVVGRExFTkJRVU03U1VGRGVrVXNUVUZCVFN4WFFVRlhMRWRCUVVjc1RVRkJUU3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVU4wUXl4aFFVRmhMRVZCUTJJc1YwRkRSaXhEUVVGRE96dEpRVWRFTzBsQlEwRTdTVUZEUVN4TlFVRk5MRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVUVzYTBKQlFWa3NSVUZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTnVSQ3hOUVVGTkxFTkJRVU1zUTBGQlF5eEhRVUZITEVsQlFVRXNhMEpCUVZrc1JVRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVOdVJDeE5RVUZOTEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVFc2EwSkJRVmtzUlVGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEpRVVZ1UkN4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHbENRVUZwUWl4RFFVTnVReXhOUVVGTkxFVkJRMDRzYTBSQlEwWXNRMEZCUXpzN1NVRkZSRHRKUVVOQkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNRMEZCUXp0SlFVTm9SQ3hOUVVGTkxFdEJRVXNzUjBGQlJ5eEpRVUZCTERKQ1FVRlhMRVZCUVVNc1YwRkJWeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEYkVRc1QwRkJUeXhMUVVGTE8wVkJRMlE3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEUxQlFVMHNhMEpCUVd0Q0xFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVN1NVRkRPVU1zVFVGQlRTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETzBsQlEzWkVMRTFCUVUwc1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlN6dEpRVU53UWl4SlFVRkpMRTFCUVUwc1EwRkJReXhKUVVGSkxFdEJRVXNzTkVKQlFXVXNRMEZCUXl4SlFVRkpMRVZCUVVVN1RVRkRlRU1zVFVGQlRTeFpRVUZaTEVkQlFVY3NUVUZCVFN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJRenROUVVOMFJTeE5RVUZOTEVOQlFVTXNXVUZCV1N4SFFVRkhMRmxCUVZrc1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQlJTeERRVUZETzBsQlEycEVPMGxCUTBFc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eHBRa0ZCYVVJc1EwRkRia01zVFVGQlRTeEZRVU5PTEdsRFFVTkdMRU5CUVVNN1NVRkRSQ3hKUVVGSkxFMUJRVTA3U1VGRFZpeEpRVUZKTzAxQlEwWXNUVUZCVFN4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhMUVVGTExFTkJRVU03U1VGRGNrUXNRMEZCUXl4RFFVRkRMRTlCUVU4c1MwRkJTeXhGUVVGRk8wMUJRMlFzU1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFVkJRVVU3VVVGRE4wUXNUVUZCVFN4SFFVRkhMRWxCUVVFc2MwSkJRVTBzUlVGQlF5eEpRVUZCTEhkQ1FVRlJMRVZCUVVNc1NVRkJRU3hyUWtGQldTeEZRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXp0UlFVTnlSU3hOUVVGTkxFZEJRVWNzU1VGQlFTeHJRa0ZCV1N4RlFVRkRMRTFCUVUwc1EwRkJRenROUVVNdlFpeERRVUZETEUxQlFVMDdVVUZEVEN4TlFVRk5MRXRCUVVzN1RVRkRZanRKUVVOR08wbEJRMEVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRE8wbEJSVFZDTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNTVUZCU1N4RFFVRkRPMGxCUlRsRExFbEJRVWtzUTBGQlF5dzJRa0ZCTmtJc1EwRkRhRU1zVFVGQlRTeEZRVU5PTEhkRFFVRXlRaXhEUVVGRExGTkJRVk1zUlVGRGNrTXNVVUZEUml4RFFVRkRPMFZCUTBnN1JVRkZRU3hOUVVGTkxHMUNRVUZ0UWl4RFFVRkRPMGxCUVVVc1RVRkJUVHRKUVVGRkxFbEJRVWs3U1VGQlJTeG5Ra0ZCWjBJc1IwRkJSenRGUVVGRkxFTkJRVU1zUlVGQlJUdEpRVU5vUlN4TlFVRk5MR0ZCUVdFc1IwRkJSeXhOUVVGTkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETzBsQlEzWkZMRTFCUVUwc1dVRkJXU3hIUVVGSExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJRenRKUVVNM1JDeE5RVUZOTEdOQlFXTXNSMEZCUnl4WlFVRlpMRU5CUVVNc1dVRkJXU3hIUVVNMVF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMR05CUVdNc1EwRkJReXhaUVVGWkxFTkJRVU1zV1VGQldTeERRVUZETEVkQlF6ZEVMRWxCUVVrN1NVRkRVaXhaUVVGWkxFTkJRVU1zWVVGQllTeEhRVUZITEdGQlFXRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSU3hEUVVGRE8wbEJRM1pFTEUxQlFVMHNjVUpCUVhGQ0xFZEJRVWNzU1VGQlFTeHBRMEZCTUVJc1JVRkRkRVFzVFVGQlRTeERRVUZETEhWQ1FVRjFRaXhGUVVNNVFpeE5RVUZOTEVOQlFVTXNUMEZEVkN4RFFVRkRPMGxCUTBRc1NVRkRSU3h4UWtGQmNVSXNTVUZEY2tJc1RVRkJUU3hEUVVGRExGbEJRVmtzUzBGQlN5eFpRVUZaTEVOQlFVTXNZVUZCWVN4SlFVTnNSQ3huUWtGQlowSXNSMEZCUnl4RFFVRkRMRVZCUTNCQ08wMUJRMEVzVlVGQlZTeERRVUZETEUxQlFVMDdVVUZEWmp0UlFVTkJMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXp0VlFVTjJRaXhOUVVGTk8xVkJRMDRzU1VGQlNUdFZRVU5LTEdkQ1FVRm5RaXhGUVVGRkxHZENRVUZuUWl4SFFVRkhPMUZCUTNaRExFTkJRVU1zUTBGQlF6dE5RVU5LTEVOQlFVTXNSVUZCUlN3NFFrRkJPRUlzUTBGQlF6dEpRVU53UXl4RFFVRkRMRTFCUVUwN1RVRkRUQ3hKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdsQ1FVRnBRaXhEUVVOdVF5eFpRVUZaTEVWQlExb3NjVVJCUTBZc1EwRkJRenROUVVORUxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhaUVVGWkxFVkJRVVVzWTBGQll5eERRVUZETzBsQlEzWkVPMFZCUTBZN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeE5RVUZOTEd0Q1FVRnJRaXhEUVVGRExFbEJRVWtzUlVGQlJTeFRRVUZUTEVWQlFVVXNZVUZCWVN4RlFVRkZMR05CUVdNc1JVRkJSVHRKUVVOMlJUdEpRVU5CTzBsQlEwRXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRPMGxCUlhaRUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVTdUVUZEV0R0SlFVTkdPMGxCUlVFc1NVRkJTVHROUVVOR0xFMUJRVTBzVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXl4NVFrRkJlVUlzUTBGQlF5eFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRPMDFCUlhCRkxFMUJRVTBzUTBGQlF5eFRRVUZUTEVkQlFVYzdVVUZEYWtJc1IwRkJSeXhUUVVGVE8xRkJRMW83VFVGRFJpeERRVUZETzAxQlJVUXNTVUZCU1N4aFFVRmhMRVZCUVVVN1VVRkRha0lzVFVGQlRTeERRVUZETEdGQlFXRXNSMEZCUnl4aFFVRmhPMDFCUTNSRE8wMUJRMEVzU1VGQlNTeGpRVUZqTEVWQlFVVTdVVUZEYkVJc1RVRkJUU3hEUVVGRExHTkJRV01zUjBGQlJ5eGpRVUZqTzAxQlEzaERPMDFCUlVFc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhKUVVGSkxFTkJRVU03VFVGRE9VTXNTVUZCU1N4RFFVRkRMREpDUVVFeVFpeERRVUZETEVsQlFVa3NRMEZCUXp0TlFVVjBReXhOUVVGTk8xRkJRVVU3VFVGQll5eERRVUZETEVkQlFVY3NUVUZCVFR0TlFVTm9ReXhOUVVGTkxHRkJRV0VzUjBGQlJ6dFJRVUZGTEZGQlFWRXNSVUZCUlR0TlFVRlJMRU5CUVVNN1RVRkZNME1zU1VGQlNTeGhRVUZoTEVWQlFVVTdVVUZEYWtJc1lVRkJZU3hEUVVGRExHVkJRV1VzUjBGRE0wSXNTVUZCU1N4RFFVRkRMRFpDUVVFMlFpeERRVUZETEdGQlFXRXNRMEZCUXp0TlFVTnlSRHROUVVWQkxFbEJRVWtzVTBGQlV5eERRVUZETEUxQlFVMHNTMEZCU3l4TFFVRkxMRVZCUVVVN1VVRkRPVUlzWVVGQllTeERRVUZETEUxQlFVMHNSMEZCUnl4eFFrRkJjVUk3VVVGRE5VTTdUVUZEUmpzN1RVRkZRU3hKUVVGSkxFTkJRVU1zTmtKQlFUWkNMRU5CUTJoRExFMUJRVTBzUlVGRFRpeDNRMEZCTWtJc1EwRkJReXhUUVVGVExFVkJRM0pETEZOQlFWTXNSVUZEVkN4aFFVTkdMRU5CUVVNN1RVRkZSQ3hKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdsQ1FVRnBRaXhEUVVOdVF5eE5RVUZOTEVWQlEwNHNhVVJCUTBZc1EwRkJRenROUVVWRUxFbEJRVWtzVFVGQlRTeERRVUZETEVsQlFVa3NTMEZCU3l3MFFrRkJaU3hEUVVGRExFbEJRVWtzUlVGQlJUdFJRVU40UXl4TlFVRk5MRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXp0VlFVTTNRaXhOUVVGTk8xVkJRMDQ3VVVGRFJpeERRVUZETEVOQlFVTTdUVUZEU2p0SlFVTkdMRU5CUVVNc1EwRkJReXhQUVVGUExFZEJRVWNzUlVGQlJUdE5RVU5hTEdsQ1FVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF6dEpRVU5vUWp0RlFVTkdPMFZCUlVFc1RVRkJUU3d3UWtGQk1FSXNRMEZCUXl4TlFVRk5MRVZCUVVVc1UwRkJVeXhGUVVGRkxHRkJRV0VzUlVGQlJUdEpRVU5xUlR0SlFVTkJMRTFCUVUwc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXhOUVVGTkxFTkJRVU03U1VGRmVFUXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSVHROUVVOWU8wbEJRMFk3U1VGRlFTeE5RVUZOTEVsQlFVa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1JVRkJSVHRKUVVWMFFpeEpRVUZKTzAxQlEwWXNUVUZCVFN4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExIbENRVUY1UWl4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFTkJRVU03VFVGRmNFVXNUVUZCVFN4RFFVRkRMRk5CUVZNc1IwRkJSenRSUVVOcVFpeEhRVUZITEZOQlFWTTdVVUZEV2p0TlFVTkdMRU5CUVVNN1RVRkZSQ3hKUVVGSkxHRkJRV0VzUlVGQlJUdFJRVU5xUWl4TlFVRk5MRU5CUVVNc1lVRkJZU3hIUVVGSExHRkJRV0U3VFVGRGRFTTdUVUZGUVN4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRWxCUVVrc1EwRkJRenROUVVNNVF5eEpRVUZKTEVOQlFVTXNNa0pCUVRKQ0xFTkJRVU1zU1VGQlNTeERRVUZETzAxQlJYUkRMRTFCUVUwN1VVRkJSVHROUVVGakxFTkJRVU1zUjBGQlJ5eE5RVUZOTzAxQlEyaERMRTFCUVUwc1lVRkJZU3hIUVVGSE8xRkJRVVVzVVVGQlVTeEZRVUZGTzAxQlFWRXNRMEZCUXp0TlFVVXpReXhKUVVGSkxHRkJRV0VzUlVGQlJUdFJRVU5xUWl4aFFVRmhMRU5CUVVNc1pVRkJaU3hIUVVNelFpeEpRVUZKTEVOQlFVTXNOa0pCUVRaQ0xFTkJRVU1zWVVGQllTeERRVUZETzAxQlEzSkVPMDFCUlVFc1NVRkJTU3hUUVVGVExFTkJRVU1zVFVGQlRTeExRVUZMTEV0QlFVc3NSVUZCUlR0UlFVTTVRaXhoUVVGaExFTkJRVU1zVFVGQlRTeEhRVUZITEhGQ1FVRnhRanRSUVVNMVF6dE5RVU5HT3p0TlFVVkJMRWxCUVVrc1EwRkJReXcyUWtGQk5rSXNRMEZEYUVNc1RVRkJUU3hGUVVOT0xIZERRVUV5UWl4RFFVRkRMRk5CUVZNc1JVRkRja01zVTBGQlV5eEZRVU5VTEdGQlEwWXNRMEZCUXp0TlFVVkVMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zYVVKQlFXbENMRU5CUTI1RExFMUJRVTBzUlVGRFRpeHBSRUZEUml4RFFVRkRPMDFCUlVRc1NVRkJTU3hOUVVGTkxFTkJRVU1zU1VGQlNTeExRVUZMTERSQ1FVRmxMRU5CUVVNc1NVRkJTU3hGUVVGRk8xRkJRM2hETEUxQlFVMHNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETzFWQlF6ZENMRTFCUVUwN1ZVRkRUanRSUVVOR0xFTkJRVU1zUTBGQlF6dE5RVU5LTzBsQlEwWXNRMEZCUXl4RFFVRkRMRTlCUVU4c1IwRkJSeXhGUVVGRk8wMUJRMW9zYVVKQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRE8wbEJRMmhDTzBWQlEwWTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4TlFVRk5MR2xDUVVGcFFpeERRVUZETEVsQlFVa3NSVUZCUlN4UlFVRlJMRVZCUVVVN1NVRkRkRU1zVFVGQlRTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETzBsQlEzWkVMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1NVRkJTU3hEUVVGRE8wbEJRemRETEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1RVRkJUU3hEUVVGRE8wbEJRelZDTEVsQlFVa3NRMEZCUXl3MlFrRkJOa0lzUTBGRGFFTXNUVUZCVFN4RlFVTk9MSGREUVVFeVFpeERRVUZETEZGQlFWRXNSVUZEY0VNc1VVRkRSaXhEUVVGRE8wVkJRMGc3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzVTBGQlV5eERRVUZETEVsQlFVa3NSVUZCUlN4TlFVRk5MRVZCUVVVN1NVRkRkRUk3U1VGRFFTeE5RVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZEZGtRc1RVRkJUU3hEUVVGRExFbEJRVWtzUjBGQlJ5eE5RVUZOTzBsQlEzQkNMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1RVRkJUU3hGUVVGRkxIZENRVUYzUWl4RFFVRkRPMFZCUTNwRk96dEZRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEUxQlFVMHNPRUpCUVRoQ0xFTkJRVU1zWVVGQllTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVN1NVRkRia1VzVFVGQlRTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhqUVVGakxFTkJRVU1zWVVGQllTeERRVUZETzBsQlEyaEZMRTFCUVUwN1RVRkJSU3hWUVVGVk8wMUJRVVU3U1VGQmIwSXNRMEZCUXl4SFFVTjJReXhOUVVGTkxFbEJRVWtzUTBGQlF5dzJRa0ZCTmtJc1EwRkJReXhOUVVGTkxFTkJRVU03U1VGRGJFUXNTVUZCU1N4RFFVRkRMQ3RDUVVFclFpeERRVU5zUXl4TlFVRk5MRVZCUTA0c1MwRkJTeXhGUVVOTUxGVkJRVlVzUlVGRFZpeHRRa0ZCYlVJc1JVRkRia0lzVVVGRFJpeERRVUZETzBWQlEwZzdPMFZCUlVFN1JVRkRRVHRGUVVOQk8wVkJRMEU3UlVGRFFTeFhRVUZYTEVOQlFVRXNSVUZCUnp0SlFVTmFPMGxCUTBFc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03TzBsQlJUbERPMGxCUTBFc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4SFFVRkhMRTFCUTNoQ0xFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEdWQlFXVTdPMGxCUld4RU8wbEJRMEVzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhIUVVGSExFMUJRekZDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZOT3p0SlFVVXZSRHRCUVVOS08wRkJRMEU3UVVGRFFUdEpRVU5KTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUjBGQlNTeFBRVUZQTEVsQlF5OUNMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zVFVGQlRUczdTVUZGTlVRN1FVRkRTanRCUVVOQk8wRkJRMEU3UVVGRFFUdEpRVU5KTEVsQlFVa3NRMEZCUXl4bFFVRmxMRWRCUVVrc1NVRkJTU3hKUVVGTExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1EwRkJRenM3U1VGRk1VVTdTVUZEUVN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NUVUZEZGtJc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zWTBGQll6dEZRVU51UkRzN1JVRkZRVHRGUVVOQkxFMUJRVTBzWjBOQlFXZERMRU5CUVVFc1JVRkJSenRKUVVOMlF6dEpRVU5CTEUxQlFVMHNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dEpRVU40UXp0SlFVTkJMRTFCUVUwc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTTdSVUZEYUVRN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1JVRkZSU3hqUVVGakxFTkJRVUVzUlVGQlJ6dEpRVU5tTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUTJoQ0xHVkJRV1VzUTBGQlF6dE5RVU5tTEdOQlFXTXNSVUZCUlR0UlFVTmtMRTFCUVUwc1JVRkJSU3c0UWtGQmFVSXNRMEZCUXl4VlFVRlZPMUZCUTNCRExHVkJRV1VzUlVGQlJUdE5RVU51UWp0SlFVTkdMRU5CUVVNc1EwRkJReXhEUVVORUxFOUJRVThzUTBGQlJTeEZRVUZGTEVsQlFVczdUVUZEWml4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUTNSQ0xFbEJRVWtzUTBGQlJTeE5RVUZOTEVsQlFVczdVVUZEYUVJc1RVRkJUU3hEUVVGRExHVkJRV1VzUjBGQlJ5eExRVUZMTzFGQlF6bENMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zYVVKQlFXbENMRU5CUTI1RExFMUJRVTBzUlVGRFRpdzJRMEZEUml4RFFVRkRPMDFCUTBnc1EwRkJReXhEUVVGRExFTkJRMFFzUzBGQlN5eERRVUZGTEV0QlFVc3NTVUZCU3p0UlFVTm9RaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMR05CUVdNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETzFGQlEzaEVMRTFCUVUwc1EwRkJReXhsUVVGbExFZEJRVWNzUzBGQlN6dFJRVU01UWl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHbENRVUZwUWl4RFFVTnVReXhOUVVGTkxFVkJRMDRzTmtOQlEwWXNRMEZCUXp0UlFVTkVMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUTBGQlF6dE5RVU42UXl4RFFVRkRMRU5CUVVNN1NVRkRUaXhEUVVGRExFTkJRVU03U1VGRlNpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVTm9RaXhsUVVGbExFTkJRVU03VFVGRFppeGpRVUZqTEVWQlFVVTdVVUZEWkN4TlFVRk5MRVZCUVVVc09FSkJRV2xDTEVOQlFVTTdUVUZETlVJN1NVRkRSaXhEUVVGRExFTkJRVU1zUTBGRFJDeFBRVUZQTEVOQlFVVXNUVUZCVFN4SlFVRkxPMDFCUldwQ08wMUJRMEU3VFVGRFFTeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNRMEZCUXp0SlFVVjBReXhEUVVGRExFTkJRVU03UlVGRFRqczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRGUVVORkxHVkJRV1VzUTBGQlFTeEZRVUZITzBsQlEyaENMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUlVGQlJTeERRVU53UWl4clFrRkJhMElzUlVGRGJFSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEd0Q1FVRnJRaXhEUVVONlF5eERRVUZETzBsQlEwUXNTVUZCU1N4RFFVRkRMREJDUVVFd1FpeERRVUZETEVOQlFVTTdTVUZEYWtNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRVZCUVVVc1EwRkJReXhaUVVGWkxFVkJRVWNzVFVGQlRTeEpRVUZMTzAxQlEycEVMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zYVVKQlFXbENMRU5CUTI1RExFMUJRVTBzUlVGRFRpeHRSRUZEUml4RFFVRkRPMGxCUTBnc1EwRkJReXhEUVVGRE8wbEJRMFlzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFVkJRVVVzUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXl4SlFVRkpMRVZCUVVVc1MwRkJTeXhMUVVGTE8wMUJRM0pFTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRPMGxCUTNCRExFTkJRVU1zUTBGQlF6dEpRVU5HTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eEZRVUZGTEVOQlEzUkNMR05CUVdNc1JVRkRaQ3hEUVVGRExFbEJRVWtzUlVGQlJTeHJRa0ZCYTBJc1JVRkJSU3hoUVVGaExFVkJRVVVzWTBGQll5eExRVU4wUkN4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlEzSkNMRWxCUVVrc1JVRkRTaXhyUWtGQmEwSXNSVUZEYkVJc1lVRkJZU3hGUVVOaUxHTkJRMFlzUTBGRFNpeERRVUZETzBsQlEwUXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEVWQlFVVXNRMEZCUXl4WlFVRlpMRVZCUVVjc1NVRkJTU3hKUVVGTE8wMUJReTlETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZETjBJc1EwRkJReXhEUVVGRE8wbEJRMFlzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFVkJRVVVzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hEUVVGRExFMUJRVTBzUlVGQlJTeHBRa0ZCYVVJc1MwRkJTenROUVVONlJTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTzFGQlEycERMRTFCUVUwc1EwRkJReXh4UWtGQmNVSXNSMEZCUnl4cFFrRkJhVUk3VVVGRGFFUXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhwUWtGQmFVSXNRMEZEYmtNc1RVRkJUU3hGUVVOT0xIZEVRVU5HTEVOQlFVTTdUVUZEU0R0SlFVTkdMRU5CUVVNc1EwRkJRenRKUVVOR0xFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhGUVVGRkxFTkJRVU1zVlVGQlZTeEZRVUZITEUxQlFVMHNTVUZCU3p0TlFVTXZReXhKUVVGSkxFVkJRVVVzV1VGQldTeEpRVUZKTEUxQlFVMHNRMEZCUXl4RlFVRkZPMUZCUXpkQ0xFMUJRVTBzUTBGQlF5eFZRVUZWTEVkQlFVY3NRMEZCUXp0TlFVTjJRanROUVVOQkxFMUJRVTBzUTBGQlF5eFZRVUZWTEVsQlFVa3NRMEZCUXp0TlFVTjBRaXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdsQ1FVRnBRaXhEUVVOdVF5eE5RVUZOTEVWQlEwNHNhVVJCUTBZc1EwRkJRenRKUVVOSUxFTkJRVU1zUTBGQlF6dEZRVU5LT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTERKQ1FVRXlRaXhEUVVGRExFbEJRVWtzUlVGQlJUdEpRVU5vUXp0SlFVTkJMRTFCUVUwc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJRenRKUVVOMlJDeE5RVUZOTzAxQlFVVXNTMEZCU3p0TlFVRkZPMGxCUVVzc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlF5eFJRVUZSTzBsQlEzWkRMRTFCUVUwc1dVRkJXU3hIUVVGSExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNaVUZCWlN4RFFVRkRPMDFCUTNaRUxHTkJRV01zUlVGQlJUdFJRVUZGTEV0QlFVczdVVUZCUlR0TlFVRkxPMGxCUTJoRExFTkJRVU1zUTBGQlF6dEpRVU5HTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wMUJRM2hDTzBsQlEwWTdTVUZEUVR0SlFVTkJMRmxCUVZrc1EwRkJReXhQUVVGUExFTkJRVVVzVjBGQlZ5eEpRVUZMTzAxQlEzQkRMRWxCUVVrc1YwRkJWeXhEUVVGRExFVkJRVVVzUzBGQlN5eEpRVUZKTEVWQlFVVTdVVUZETTBJN1RVRkRSanROUVVOQkxGZEJRVmNzUTBGQlF5eFZRVUZWTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWxCUVVrN1RVRkRjRU1zVjBGQlZ5eERRVUZETEZsQlFWa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1JVRkJSVHROUVVOd1F5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMR2xDUVVGcFFpeERRVU51UXl4TlFVRk5MRVZCUTA0c2JVZEJRMFlzUTBGQlF6dE5RVU5FTzAxQlEwRXNTVUZCU1N4WFFVRlhMRU5CUVVNc1RVRkJUU3hMUVVGTExEaENRVUZwUWl4RFFVRkRMRTFCUVUwc1JVRkJSVHRSUVVOdVJDeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVjBGQlZ5eERRVUZETEVWQlFVVXNRMEZCUXp0TlFVTjJRenRKUVVOR0xFTkJRVU1zUTBGQlF6dEZRVU5LTzBWQlJVRXNNRUpCUVRCQ0xFTkJRVUVzUlVGQlJ6dEpRVU16UWl4SlFVRkpMR3RDUVVGclFpeEhRVUZITEV0QlFVczdTVUZET1VJc1RVRkJUU3hyUWtGQmEwSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZEZWtRc1RVRkJUVHROUVVGRkxGbEJRVms3VFVGQlJUdEpRVUZsTEVOQlFVTXNSMEZCUnl4SlFVRkpPMGxCUlRkRExHTkJRV01zUTBGQlF5eEZRVUZGTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVVzYTBKQlFXdENMRU5CUVVNN1NVRkRla1FzYTBKQlFXdENMRU5CUVVNc1EwRkJRenRKUVVWd1FpeFRRVUZUTEd0Q1FVRnJRaXhEUVVGQkxFVkJRVWM3VFVGRE5VSXNUVUZCVFN4VlFVRlZMRWRCUVVjc1kwRkJZeXhEUVVGRExITkNRVUZ6UWl4RFFVRkRMRU5CUVVNN1RVRkRNVVFzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhKUVVGSkxGVkJRVlVzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RlFVRkZPMUZCUTJoRUxGbEJRVmtzUTBGQlF5eEZRVUZGTEVOQlFVTXNVVUZCVVN4RlFVRkZMR3RDUVVGclFpeERRVUZETzFGQlF6ZERMR3RDUVVGclFpeEhRVUZITEVsQlFVazdUVUZETTBJc1EwRkJReXhOUVVGTkxFbEJRVWtzYTBKQlFXdENMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeEZRVUZGTzFGQlEyNUVMRmxCUVZrc1EwRkJReXhqUVVGakxFTkJRVU1zVVVGQlVTeEZRVUZGTEd0Q1FVRnJRaXhEUVVGRE8xRkJRM3BFTEd0Q1FVRnJRaXhIUVVGSExFdEJRVXM3VFVGRE5VSTdTVUZEUmp0RlFVTkdPMFZCUlVFc1RVRkJUU3hqUVVGakxFTkJRVU1zVjBGQlZ5eEZRVUZGTzBsQlEyaERMRWxCUVVrN1RVRkRSaXhOUVVGTkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPMGxCUTJoRUxFTkJRVU1zUTBGQlF5eFBRVUZQTEVkQlFVY3NSVUZCUlR0TlFVTmFMR2xDUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXp0SlFVTm9RanRKUVVOQkxFbEJRVWs3VFVGRFJpeE5RVUZOTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhYUVVGWExFTkJRVU03U1VGRE4wUXNRMEZCUXl4RFFVRkRMRTlCUVU4c1IwRkJSeXhGUVVGRk8wMUJRMW9zYVVKQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRE8wbEJRMmhDTzBWQlEwWTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wVkJRMFVzWlVGQlpTeERRVUZCTEVWQlFVYzdTVUZEYUVJc1RVRkJUU3hoUVVGaExFZEJRVWNzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZETzBsQlF5OUVMRTFCUVUwc2IwSkJRVzlDTEVkQlFVY3NTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhsUVVGbExFTkJRVU03VFVGREwwUXNTMEZCU3l4RlFVRkZPMGxCUTFRc1EwRkJReXhEUVVGRE8wbEJRMFlzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4WFFVRlhMRU5CUVVNN1RVRkJSU3hoUVVGaE8wMUJRVVU3U1VGQmNVSXNRMEZCUXl4RFFVRkRPMFZCUTNCRk8wVkJSVUVzTUVKQlFUQkNMRU5CUVVNc1RVRkJUU3hGUVVGRkxHTkJRV01zUlVGQlJUdEpRVU5xUkN4SlFVRkpMR1ZCUVdVc1IwRkJSeXhMUVVGTE8wbEJRek5DTEVsQlFVa3NZMEZCWXl4aFFVRmtMR05CUVdNc1pVRkJaQ3hqUVVGakxFTkJRVVVzVTBGQlV5eEZRVUZGTzAxQlF6ZENMR1ZCUVdVc1IwRkJSeXhKUVVGQkxIbERRVUZaTEVWQlF6VkNMR05CUVdNc1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlR5eEZRVU5vUXl4alFVRmpMRU5CUVVNc1UwRkJVeXhEUVVGRExHbENRVU16UWl4RFFVRkRPMGxCUTBnN1NVRkRRU3hOUVVGTkxGbEJRVmtzUjBGQlJ5eEpRVUZCTEhsRFFVRlpMRVZCUXk5Q0xFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNUMEZCVHl4RlFVTjRRaXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEdsQ1FVTnVRaXhEUVVGRE8wbEJRMFFzVFVGQlRTeDFRa0ZCZFVJc1IwRkJSeXhKUVVGSkxHdENRVUZUTEVOQlFVTXNXVUZCV1N4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVNMVJDeEpRVUZKTEVOQlFVTXNaVUZCWlN4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVONlFpeFJRVUZSTEVOQlFVTXNSVUZCUlN4RFFVRkRPMGxCUTJZc1QwRkJUenROUVVOTUxHOUNRVUZ2UWl4RlFVRkZMRTFCUVUwc1EwRkJReXhKUVVGQkxEQkNRVUZqTEVWQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN1RVRkROMFFzYVVKQlFXbENMRVZCUVVVc1RVRkJUU3hEUVVGRExFbEJRVUVzTUVKQlFXTXNSVUZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRenROUVVOMlJDdzBRa0ZCTkVJc1JVRkJSU3hOUVVGTkxFTkJRMnhETEVsQlFVRXNNRUpCUVdNc1JVRkJReXgxUWtGQmRVSXNRMEZEZUVNN1NVRkRSaXhEUVVGRE8wVkJRMGc3UlVGRlFTeHJRa0ZCYTBJc1EwRkJReXhOUVVGTkxFVkJRVVVzWTBGQll5eEZRVUZGTzBsQlEzcERMRWxCUVVrc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4RFFVRkRMRU5CUVVNc1NVRkJTU3hOUVVGTkxFTkJRVU1zV1VGQldTeEZRVUZGTzAxQlF6RkVMRWxCUVVrc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEV0QlFVc3NTMEZCU3l4RlFVRkZPMUZCUTNKRExFbEJRVWtzUTBGQlF5eHpRa0ZCYzBJc1EwRkJRenRWUVVNeFFpeExRVUZMTEVWQlFVVXNZVUZCWVR0VlFVTndRaXh0UWtGQmJVSXNSVUZCUlR0WlFVRkZMRWRCUVVjc1RVRkJUU3hEUVVGRE8xVkJRV0VzUTBGQlF6dFZRVU12UXl4UlFVRlJMRVZCUVVVc2NVTkJRWGRDTEVOQlFVTTdVVUZEY2tNc1EwRkJReXhEUVVGRE8wMUJRMG9zUTBGQlF5eE5RVUZOTzFGQlEwd3NUVUZCVFN4alFVRmpMRWRCUVVjc1NVRkJRU3cyUkVGQlowTXNSVUZEY2tRc1RVRkJUU3hEUVVGRExITkNRVUZ6UWl4RlFVTTNRaXhOUVVGTkxFVkJRMDRzVFVGQlRTeERRVUZETEhWQ1FVRjFRaXhGUVVNNVFpeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1JVRkRjRUlzVFVGQlRTeERRVUZETEhkQ1FVRjNRaXhGUVVNdlFpeGpRVUZqTEVWQlEyUXNUVUZCVFN4RFFVRkRMRTlCUTFRc1EwRkJRenRSUVVWRUxFMUJRVTBzY1VKQlFYRkNMRWRCUVVjc1kwRkJZeXhIUVVOMlF5eEhRVUZGTEVsQlFVa3NhMEpCUVZNc1EwRkJReXhqUVVGakxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlEycERMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEdWQlFXVXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkROVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVTldMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVVVzUjBGQlJTeEhRVU5rTEVsQlFVazdVVUZGVWl4TlFVRk5MSFZDUVVGMVFpeEhRVU16UWl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFOUJRVThzU1VGQlNTeE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMR0ZCUVdFc1IwRkRlRVFzUjBGQlJTeEpRVUZKTEd0Q1FVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUXpORExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMR0ZCUVdFc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGRE1VTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVOV0xFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVVXNSMEZCUlN4SFFVTmtMRWxCUVVrN1VVRkZWaXhOUVVGTkxHZENRVUZuUWl4SFFVRkhMRWxCUVVrc1EwRkJReXd3UWtGQk1FSXNRMEZEZEVRc1RVRkJUU3hGUVVOT0xHTkJRMFlzUTBGQlF6dFJRVVZFTEVsQlFVa3NRMEZCUXl4elFrRkJjMElzUTBGQlF6dFZRVU14UWl4TFFVRkxMRVZCUVVVc1owSkJRV2RDTzFWQlEzWkNMRkZCUVZFc1JVRkJSU3h4UTBGQmQwSXNRMEZCUXl4TFFVRkxPMVZCUTNoRExHMUNRVUZ0UWl4RlFVRkZPMWxCUTI1Q0xFZEJRVWNzVFVGQlRTeERRVUZETEZsQlFWazdXVUZEZEVJc2QwSkJRWGRDTEVWQlFVVXNZMEZCWXp0WlFVTjRReXgxUWtGQmRVSXNSVUZCUlN4eFFrRkJjVUk3V1VGRE9VTXNNRUpCUVRCQ0xFVkJRVVVzZFVKQlFYVkNPMWxCUTI1RUxIZENRVUYzUWl4RlFVRkZMR2RDUVVGblFpeERRVUZETEc5Q1FVRnZRanRaUVVNdlJDeHhRa0ZCY1VJc1JVRkJSU3huUWtGQlowSXNRMEZCUXl4cFFrRkJhVUk3V1VGRGVrUXNhME5CUVd0RExFVkJRMmhETEdkQ1FVRm5RaXhEUVVGRE8xVkJRM0pDTzFGQlEwWXNRMEZCUXl4RFFVRkRPMDFCUTBvN1NVRkRSanRGUVVOR096dEZRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTdzJRMEZCTmtNc1EwRkRNME1zTmtKQlFUWkNMRVZCUXpkQ0xITkNRVUZ6UWl4RlFVTjBRaXh0UWtGQmJVSXNSVUZEYmtJN1NVRkRRU3hKUVVORkxEWkNRVUUyUWl4TFFVRkxMREJEUVVFMlFpeERRVUZETEUxQlFVMHNTVUZEZEVVc2MwSkJRWE5DTEVsQlEzUkNMRzFDUVVGdFFpeEZRVU51UWp0TlFVTkJMRTlCUVZFc1IwRkJSU3hKUVVGSkxHdENRVUZUTEVOQlFVTXNjMEpCUVhOQ0xFVkJRVVVzUlVGQlJTeERRVUZETEVOQlEyaEVMRWRCUVVjc1EwRkJReXh0UWtGQmJVSXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkROVUlzUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVTldMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVVVzUlVGQlF6dEpRVU5tTzBsQlEwRXNUMEZCVHl4SlFVRkpPMFZCUTJJN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRkRSU3gzUTBGQmQwTXNRMEZEZEVNc05rSkJRVFpDTEVWQlF6ZENMSFZDUVVGMVFpeEZRVU4yUWl4dFFrRkJiVUlzUlVGRGJrSTdTVUZEUVN4SlFVTkZMRU5CUVVNc05rSkJRVFpDTEV0QlFVc3NNRU5CUVRaQ0xFTkJRVU1zVFVGQlRTeEpRVU55UlN3MlFrRkJOa0lzUzBGRE0wSXNNRU5CUVRaQ0xFTkJRVU1zV1VGQldTeExRVU01UXl4MVFrRkJkVUlzU1VGRGRrSXNiVUpCUVcxQ0xFVkJRMjVDTzAxQlEwRXNUMEZCVVN4SFFVRkZMRWxCUVVrc2EwSkJRVk1zUTBGQlF5eDFRa0ZCZFVJc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGRGFrUXNSMEZCUnl4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVTTFRaXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlExWXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJSU3hGUVVGRE8wbEJRMlk3U1VGRFFTeFBRVUZQTEVsQlFVazdSVUZEWWp0RlFVVkJMRTFCUVUwc05rSkJRVFpDTEVOQlFVTXNUVUZCVFN4RlFVRkZMRmRCUVZjc1JVRkJSVHRKUVVOMlJDeE5RVUZOTzAxQlEwb3NTVUZCU1R0TlFVTktMRWxCUVVrN1RVRkRTaXhOUVVGTk8wMUJRMDRzVDBGQlR6dE5RVU5RTEUxQlFVMHNSVUZCUlN4UlFVRlJPMDFCUTJoQ0xGRkJRVkVzUlVGQlJUdFJRVU5TTEZGQlFWRTdVVUZEVWl4SFFVRkhMRVZCUVVVc1VVRkJVVHRSUVVOaUxGbEJRVms3VVVGRFdpeHZRa0ZCYjBJN1VVRkRjRUlzYVVKQlFXbENPMUZCUTJwQ08wMUJRMFlzUTBGQlF6dE5RVU5FTEcxQ1FVRnRRanROUVVOdVFpeFpRVUZaTzAxQlExb3NXVUZCV1R0TlFVTmFMR2xDUVVGcFFpeEZRVUZGTEU5QlFVODdUVUZETVVJc2FVSkJRV2xDTzAxQlEycENMSFZDUVVGMVFqdE5RVU4yUWl4dFFrRkJiVUk3VFVGRGJrSXNjMEpCUVhOQ08wMUJRM1JDTEcxQ1FVRnRRanROUVVOdVFpeHJRa0ZCYTBJN1RVRkRiRUk3U1VGRFJpeERRVUZETEVkQlFVY3NUVUZCVFR0SlFVVldMRTFCUVUwc1RVRkJUU3hIUVVGSExGRkJRVkVzUzBGQlN5eHZRa0ZCWlN4SFFVRkhMRTFCUVUwc1IwRkJSeXhOUVVGTk8wbEJSVGRFTEUxQlFVMDdUVUZCUlN4VFFVRlRPMDFCUVVVN1NVRkJZeXhEUVVGRExFZEJRVWNzVFVGQlRTeEpRVUZCTERKRFFVRTJRaXhGUVVOMFJTeE5RVUZOTEVWQlEwNHNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkRWaXhKUVVGSkxFTkJRVU1zTUVKQlExQXNRMEZCUXp0SlFVVkVMRTFCUVUwc1UwRkJVeXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVVZ3UWl4SlFVRkpMRWxCUVVFc2EwTkJRVzlDTEVWQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVN1RVRkRhRU1zVTBGQlV5eERRVUZETEdWQlFXVXNSMEZCUnl4WlFVRlpPMDFCUTNoRExGTkJRVk1zUTBGQlF5eDNRa0ZCZDBJc1IwRkJSeXh2UWtGQmIwSTdTVUZETTBRc1EwRkJReXhOUVVGTk8wMUJRMHdzVTBGQlV5eERRVUZETEZOQlFWTXNSMEZCUnl4UlFVRlJPMGxCUTJoRE8wbEJSVUVzU1VGQlNTeHRRa0ZCYlVJc1JVRkJSVHROUVVOMlFpeE5RVUZOTzFGQlFVVTdUVUZCWVN4RFFVRkRMRWRCUVVjc2JVSkJRVzFDTzAxQlF6VkRMRWxCUVVrc1dVRkJXU3hGUVVGRk8xRkJRMmhDTEZOQlFWTXNRMEZCUXl4blFrRkJaMElzUjBGQlJ5eFpRVUZaTzFGQlEzcERMRWxCUVVrc2JVSkJRVzFDTEVkQlFVY3NUVUZCVFN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEZsQlFWazdVVUZEYWtVc1NVRkJTU3d5UWtGQk1rSXNSMEZETjBJc1RVRkJUU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRzlDUVVGdlFqdFJRVVZxUkN4SlFVTkZMRU5CUTBVc2RVSkJRV3RDTEVOQlFVTXNSMEZCUnl4RlFVTjBRaXgxUWtGQmEwSXNRMEZCUXl4TlFVRk5MRVZCUTNwQ0xIVkNRVUZyUWl4RFFVRkRMRWxCUVVrc1EwRkRlRUlzUTBGQlF5eFJRVUZSTEVOQlFVTXNXVUZCV1N4RFFVRkRMRVZCUTNoQ08xVkJRVUVzU1VGQlFTeHhRa0ZCUVN4RlFVRkJMSE5DUVVGQk8xVkJRMEVzVFVGQlRUdFpRVUZGTzFWQlFXZENMRU5CUVVNc1IwRkJSeXhOUVVGTkxFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1EwRkJReXhEUVVGRE8xVkJRMjVGTEVsQlFVa3NaVUZCWlN4aFFVRm1MR1ZCUVdVc1owSkJRVUVzY1VKQlFVRXNSMEZCWml4bFFVRmxMRU5CUVVjc1dVRkJXU3hEUVVGRExHTkJRVUVzY1VKQlFVRXNaVUZCTDBJc2NVSkJRVUVzUTBGQmFVTXNjVUpCUVhGQ0xFVkJRVVU3V1VGQlFTeEpRVUZCTEhOQ1FVRkJPMWxCUXpGRUxHMUNRVUZ0UWl4SlFVRkJMSE5DUVVGQkxFZEJRMnBDTEdWQlFXVXNRMEZCUXl4WlFVRlpMRU5CUVVNc1kwRkJRU3h6UWtGQlFTeDFRa0ZCTjBJc2MwSkJRVUVzUTBGQkswSXNjVUpCUVhGQ08xbEJRM1JFTEZOQlFWTXNRMEZCUXl4MVFrRkJkVUlzUjBGQlJ5eHRRa0ZCYlVJN1ZVRkRla1E3VlVGRFFTeEpRVUZKTEdWQlFXVXNZVUZCWml4bFFVRmxMR2RDUVVGQkxITkNRVUZCTEVkQlFXWXNaVUZCWlN4RFFVRkhMRmxCUVZrc1EwRkJReXhqUVVGQkxITkNRVUZCTEdWQlFTOUNMSE5DUVVGQkxFTkJRV2xETERaQ1FVRTJRaXhGUVVGRk8xbEJRVUVzU1VGQlFTeHpRa0ZCUVR0WlFVTnNSU3d5UWtGQk1rSXNTVUZCUVN4elFrRkJRU3hIUVVONlFpeGxRVUZsTEVOQlFVTXNXVUZCV1N4RFFVRkRMR05CUVVFc2MwSkJRVUVzZFVKQlFUZENMSE5DUVVGQkxFTkJRU3RDTERaQ1FVRTJRanRaUVVNNVJDeFRRVUZUTEVOQlFVTXNaME5CUVdkRExFZEJRM2hETERKQ1FVRXlRanRWUVVNdlFqdFJRVU5HTzAxQlEwWTdUVUZGUVN4SlFVRkpMRTFCUVUwc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4SFFVRkhMRVZCUVVVN1VVRkRiRU1zVTBGQlV5eERRVUZETEZkQlFWY3NSMEZCUnl4TlFVRk5MRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNSMEZCUnp0TlFVTjRSRHROUVVOQkxFbEJRVWtzVFVGQlRTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExGRkJRVkVzUlVGQlJUdFJRVU4yUXl4VFFVRlRMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NUVUZCVFN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEZGQlFWRTdUVUZEYmtVN1NVRkRSanRKUVVWQkxFbEJRVWtzYVVKQlFXbENMRVZCUVVVN1RVRkRja0lzVTBGQlV5eERRVUZETEd0Q1FVRnJRaXhIUVVGSExHbENRVUZwUWp0SlFVTnNSRHRKUVVWQkxFbEJRVWtzV1VGQldTeEZRVUZGTzAxQlEyaENMRk5CUVZNc1EwRkJReXhoUVVGaExFZEJRVWNzV1VGQldUdEpRVU40UXp0SlFVVkJMRWxCUVVrc1YwRkJWeXhoUVVGWUxGZEJRVmNzWlVGQldDeFhRVUZYTEVOQlFVVXNVVUZCVVN4RlFVRkZPMDFCUTNwQ0xGTkJRVk1zUTBGQlF5eFJRVUZSTEVkQlFVY3NWMEZCVnl4RFFVRkRMRkZCUVZFN1NVRkRNME03U1VGRlFTeE5RVUZOTEdWQlFXVXNSMEZCUnl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNVMEZCVXl4RFFVRkRPMGxCUlRORUxFbEJRVWtzWTBGQll5eEhRVUZITEVkQlFVYzdTVUZEZUVJc1NVRkJTU3hOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEZsQlFWa3NSVUZCUlR0TlFVTm9ReXhqUVVGakxFZEJRVWNzUjBGQlJ6dEpRVU4wUWp0SlFVVkJMRTFCUVUwc2QwSkJRWGRDTEVkQlFVY3NRMEZETDBJc05FSkJRV1VzUTBGQlF5eHRRa0ZCYlVJc1JVRkRia01zTkVKQlFXVXNRMEZCUXl4clFrRkJhMElzUlVGRGJFTXNORUpCUVdVc1EwRkJReXd5UWtGQk1rSXNSVUZETTBNc05FSkJRV1VzUTBGQlF5dzBRa0ZCTkVJc1JVRkROVU1zTkVKQlFXVXNRMEZCUXl4dFFrRkJiVUlzUlVGRGJrTXNORUpCUVdVc1EwRkJReXgxUWtGQmRVSXNSVUZEZGtNc05FSkJRV1VzUTBGQlF5eExRVUZMTEVWQlEzSkNMRFJDUVVGbExFTkJRVU1zU1VGQlNTeEZRVU53UWl3MFFrRkJaU3hEUVVGRExGbEJRVmtzUTBGRE4wSXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRE8wbEJSV2hDTEUxQlFVMHNiVUpCUVcxQ0xFZEJRVWM3VFVGRE1VSXNUMEZCVHl4RlFVRkZPMGxCUTFnc1EwRkJRenRKUVVWRUxFbEJRVWtzTmtKQlFUWkNPMGxCUTJwRExFbEJRVWtzZVVKQlFYbENPMGxCUXpkQ0xFbEJRVWtzZDBOQlFYZERPMGxCUXpWRExFbEJRVWtzZFVOQlFYVkRPMGxCUXpORExFbEJRVWtzWlVGQlpTeEhRVUZITERSQ1FVRmxMRU5CUVVNc1ZVRkJWVHRKUVVOb1JDeEpRVUZKTEVsQlFVa3NTMEZCU3l3MFFrRkJaU3hEUVVGRExFMUJRVTBzUlVGQlJUdE5RVU51UXl4bFFVRmxMRWRCUVVjc05FSkJRV1VzUTBGQlF5eE5RVUZOTzBsQlF6RkRMRU5CUVVNc1RVRkJUU3hKUVVGSkxFbEJRVWtzUzBGQlN5dzBRa0ZCWlN4RFFVRkRMRXRCUVVzc1JVRkJSVHROUVVONlF5eGxRVUZsTEVkQlFVY3NXVUZCV1R0SlFVTm9ReXhEUVVGRExFMUJRVTBzU1VGQlNTeEpRVUZKTEV0QlFVc3NORUpCUVdVc1EwRkJReXhqUVVGakxFVkJRVVU3VFVGRGJFUXNaVUZCWlN4SFFVRkhMRFJDUVVGbExFTkJRVU1zWTBGQll6dEpRVU5zUkN4RFFVRkRMRTFCUVUwc1NVRkJTU3gzUWtGQmQwSXNSVUZCUlR0TlFVTnVReXhsUVVGbExFZEJRVWNzTkVKQlFXVXNRMEZCUXl4dFFrRkJiVUk3VFVGRGNrUXNlVUpCUVhsQ0xFZEJRVWNzYTBKQlFXdENPMDFCUXpsRExFbEJRMFVzZVVKQlFYbENMRXRCUVVzc2JVSkJRVzFDTEVOQlFVTXNUMEZCVHl4SlFVTjZSQ3hoUVVGaExFdEJRVXNzTUVKQlFXRXNRMEZCUXl4TFFVRkxMRVZCUTNKRE8xRkJRMEVzU1VGQlNTeDFRa0ZCZFVJc1MwRkJTeXhIUVVGSExFbEJRVWtzYVVKQlFXbENMRXRCUVVzc1IwRkJSeXhGUVVGRk8xVkJRMmhGTERaQ1FVRTJRaXhIUVVGSExEQkRRVUUyUWl4RFFVRkRMRTFCUVUwN1VVRkRkRVVzUTBGQlF5eE5RVUZOTEVsQlFVa3NhVUpCUVdsQ0xFVkJRVVU3VlVGRE5VSXNOa0pCUVRaQ0xFZEJRVWNzTUVOQlFUWkNMRU5CUVVNc1RVRkJUVHRSUVVOMFJTeERRVUZETEUxQlFVMHNTVUZCU1N4MVFrRkJkVUlzUlVGQlJUdFZRVU5zUXl3MlFrRkJOa0lzUjBGRE0wSXNNRU5CUVRaQ0xFTkJRVU1zV1VGQldUdFJRVU01UXp0UlFVTkJMSGREUVVGM1F5eEhRVU4wUXl4SlFVRkpMRU5CUVVNc05rTkJRVFpETEVOQlEyaEVMRFpDUVVFMlFpeEZRVU0zUWl4elFrRkJjMElzUlVGRGRFSXNiVUpCUTBZc1EwRkJRenRSUVVOSUxIVkRRVUYxUXl4SFFVTnlReXhKUVVGSkxFTkJRVU1zZDBOQlFYZERMRU5CUXpORExEWkNRVUUyUWl4RlFVTTNRaXgxUWtGQmRVSXNSVUZEZGtJc2JVSkJRMFlzUTBGQlF6dE5RVU5NTzBsQlEwWTdTVUZGUVN4TlFVRk5MR05CUVdNc1IwRkJSeXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEZsQlFWa3NRMEZCUXp0SlFVVjZSQ3hOUVVGTkxDdENRVUVyUWl4SFFVRkhPMDFCUTNSRExFdEJRVXNzUlVGQlJTdzBRa0ZCWlN4RFFVRkRMRXRCUVVzN1RVRkROVUlzVFVGQlRTeEZRVUZGTERSQ1FVRmxMRU5CUVVNc1RVRkJUVHROUVVNNVFpeFZRVUZWTEVWQlFVVTdTVUZEWkN4RFFVRkRPMGxCUlVRc1NVRkJTU3h0UWtGQmJVSTdTVUZEZGtJc1NVRkJTU3hYUVVGWExHRkJRVmdzVjBGQlZ5eGxRVUZZTEZkQlFWY3NRMEZCUlN4UFFVRlBMRVZCUVVVN1RVRkRlRUlzYlVKQlFXMUNMRWRCUVVjc0swSkJRU3RDTEVOQlFVTXNWVUZCVlR0TlFVTm9SU3hKUVVGSkxFTkJRVUVzWTBGQll5eGhRVUZrTEdOQlFXTXNkVUpCUVdRc1kwRkJZeXhEUVVGRkxFbEJRVWtzVFVGQlN5dzBRa0ZCWlN4RFFVRkRMRTFCUVUwc1JVRkJSVHRSUVVOdVJDeHRRa0ZCYlVJc1IwRkJSeXdyUWtGQkswSXNRMEZCUXl4TlFVRk5PMDFCUXpsRUxFTkJRVU1zVFVGQlRTeEpRVUZKTEVOQlFVRXNZMEZCWXl4aFFVRmtMR05CUVdNc2RVSkJRV1FzWTBGQll5eERRVUZGTEVsQlFVa3NUVUZCU3l3MFFrRkJaU3hEUVVGRExFdEJRVXNzUlVGQlJUdFJRVU42UkN4dFFrRkJiVUlzUjBGQlJ5d3JRa0ZCSzBJc1EwRkJReXhMUVVGTE8wMUJRemRFTzBsQlEwWTdTVUZGUVN4SlFVRkpMR2RDUVVGblFqdEpRVVZ3UWl4SlFVRkpMRU5CUVVFc2QwSkJRWGRDTEdGQlFYaENMSGRDUVVGM1FpeDFRa0ZCZUVJc2QwSkJRWGRDTEVOQlFVVXNaVUZCWlN4TlFVRkxMRU5CUVVNc1JVRkJSVHROUVVOdVJDeG5Ra0ZCWjBJc1IwRkJSeXhEUVVGRExITkNRVUZ6UWl4RFFVRkRPMGxCUXpkRExFTkJRVU1zVFVGQlRTeEpRVUZKTEVOQlFVRXNkMEpCUVhkQ0xHRkJRWGhDTEhkQ1FVRjNRaXgxUWtGQmVFSXNkMEpCUVhkQ0xFTkJRVVVzWlVGQlpTeE5RVUZMTEVOQlFVTXNSVUZCUlR0TlFVTXhSQ3huUWtGQlowSXNSMEZCUnl4RFFVRkRMREpDUVVFeVFpeERRVUZETzBsQlEyeEVMRU5CUVVNc1RVRkJUVHROUVVOTUxHZENRVUZuUWl4SFFVRkhMRWxCUVVrN1NVRkRla0k3U1VGRlFTeEpRVUZKTEZWQlFWVXNSMEZCUnp0TlFVTm1MRkZCUVZFc1JVRkJSU3hQUVVGUE8wMUJRMnBDTEZGQlFWRTdUVUZEVWl4TlFVRk5PMDFCUTA0c1QwRkJUenROUVVOUUxHZENRVUZuUWl4RlFVRkZMR05CUVdNN1RVRkRhRU1zWVVGQllTeEZRVUZGTEUxQlFVMDdUVUZEY2tJc2EwSkJRV3RDTEVWQlFVVXNUVUZCVFR0TlFVTXhRaXhaUVVGWkxFVkJRVVVzVFVGQlRTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1RVRkRiRVVzV1VGQldTeEZRVUZGTEUxQlFVMHNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJReXhEUVVGRE8wMUJRMnhGTEZWQlFWVXNSVUZCUlN4VFFVRlRPMDFCUTNKQ0xHTkJRV01zUlVGQlJTeGhRVUZoTzAxQlF6ZENMR2RDUVVGblFpeEZRVUZGTEdWQlFXVTdUVUZEYWtNc2IwSkJRVzlDTEVWQlFVVXNTVUZCU1N4TFFVRkxMRFJDUVVGbExFTkJRVU1zUzBGQlN6dE5RVU53UkN4cFFrRkJhVUlzUlVGQlJUdEpRVU55UWl4RFFVRkRPMGxCUlVRc1NVRkJTU3g1UWtGQmVVSXNTMEZCU3l4dFFrRkJiVUlzUTBGQlF5eFBRVUZQTEVWQlFVVTdUVUZETjBRc1ZVRkJWU3hIUVVGSE8xRkJRMWdzUjBGQlJ5eFZRVUZWTzFGQlEySXNaME5CUVdkRExFVkJRVVU3VFVGRGNFTXNRMEZCUXp0SlFVTklPMGxCUlVFc1NVRkJTU3h0UWtGQmJVSXNSMEZCUnp0TlFVTjRRaXhOUVVGTk8wMUJRMDRzZVVKQlFYbENMRVZCUVVVc1NVRkJRU3hyUTBGQmIwSXNSVUZCUXl4TlFVRk5MRU5CUVVNc1IwRkRia1FzTkVSQlFTdENMRU5CUVVNc1ZVRkJWU3hIUVVNeFF5dzBSRUZCSzBJc1EwRkJReXhOUVVGTk8wMUJRekZETEZWQlFWVXNSVUZCUlN4SlFVRkpPMDFCUTJoQ0xGTkJRVk1zUlVGQlJTeFJRVUZSTzAxQlEyNUNMREpDUVVFeVFpeEZRVUZGTEhsQ1FVRjVRanROUVVOMFJDeHZRa0ZCYjBJc1JVRkJSU3h0UWtGQmJVSTdUVUZEZWtNc1IwRkJSeXhYUVVGWE8wMUJRMlFzUjBGQlJ6dEpRVU5NTEVOQlFVTTdTVUZGUkN4SlFVRkpMSGxDUVVGNVFpeExRVUZMTEcxQ1FVRnRRaXhEUVVGRExFOUJRVThzUlVGQlJUdE5RVU0zUkN4dFFrRkJiVUlzUjBGQlJ6dFJRVU53UWl4SFFVRkhMRzFDUVVGdFFqdFJRVU4wUWl3MFEwRkJORU1zUlVGRE1VTXNkVU5CUVhWRE8xRkJRM3BETERaRFFVRTJReXhGUVVNelF6dE5RVU5LTEVOQlFVTTdTVUZEU0R0SlFVVkJMRTlCUVU4N1RVRkJSU3hWUVVGVk8wMUJRVVU3U1VGQmIwSXNRMEZCUXp0RlFVTTFRenM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc0swSkJRU3RDTEVOQlF6ZENMRTFCUVUwc1JVRkRUaXhMUVVGTExFVkJRMHdzVlVGQlZTeEZRVU5XTEcxQ1FVRnRRaXhGUVVOdVFpeFJRVUZSTEVWQlExSTdTVUZEUVN4TlFVRk5MRmRCUVZjc1IwRkJSeXhEUVVOc1FpeDNRMEZCTWtJc1EwRkJReXhUUVVGVExFVkJRM0pETEhkRFFVRXlRaXhEUVVGRExGTkJRVk1zUTBGRGRFTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRE8wbEJRMnBDTEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWtzWlVGRGVFSXNWMEZCVnl4SFFVRkhMRmRCUVZjc1IwRkJSeXhQUVVNM1FpeEpRVUZITEUxQlFVMHNRMEZCUXl4RlFVRkhMRVZCUVVNN1NVRkZaaXhOUVVGTkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1NVRkROVVFzU1VGQlNTeFBRVUZQTEZGQlFWRXNTMEZCU3l4WFFVRlhMRVZCUVVVN1RVRkRia003U1VGRFJqdEpRVVZCTEZGQlFWRXNTMEZCU3p0TlFVTllPMDFCUTBFN1RVRkRRVHROUVVOQk8wMUJRMEU3VFVGRFFUdE5RVU5CTzAxQlEwRTdUVUZEUVR0TlFVTkJMRXRCUVVzc2QwTkJRVEpDTEVOQlFVTXNTMEZCU3p0UlFVTndReXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNN1ZVRkRka0lzVVVGQlVTeEZRVUZGTEhGRFFVRjNRaXhEUVVGRExGbEJRVms3VlVGREwwTXNXVUZCV1N4RlFVRkZMSGREUVVFeVFpeERRVUZETEV0QlFVczdWVUZETDBNc1dVRkJXU3hGUVVGRkxIZERRVUV5UWl4RFFVRkRMRkZCUVZFN1ZVRkRiRVFzV1VGQldTeEZRVUZGTEhkRFFVRXlRaXhEUVVGRExGRkJRVkU3VlVGRGJFUXNWVUZCVlR0VlFVTldMRzFDUVVGdFFqdFZRVU51UWl4UFFVRlBMRVZCUVVVc1NVRkJTVHRWUVVOaUxHZENRVUZuUWp0VlFVTm9RanRSUVVOR0xFTkJRVU1zUTBGQlF6dFJRVU5HTzAxQlEwWTdUVUZEUVR0TlFVTkJPMDFCUTBFN1RVRkRRVHROUVVOQk8wMUJRMEU3VFVGRFFUdE5RVU5CTEV0QlFVc3NkME5CUVRKQ0xFTkJRVU1zVVVGQlVUdE5RVU42UXl4TFFVRkxMSGREUVVFeVFpeERRVUZETEZGQlFWRTdVVUZEZGtNc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRPMVZCUTNaQ0xGRkJRVkVzUlVGQlJTeHhRMEZCZDBJc1EwRkJReXhaUVVGWk8xVkJReTlETEZsQlFWa3NSVUZCUlN4M1EwRkJNa0lzUTBGQlF5eFJRVUZSTzFWQlEyeEVMRmxCUVZrc1JVRkJSU3gzUTBGQk1rSXNRMEZCUXl4UlFVRlJPMVZCUTJ4RUxGVkJRVlU3VlVGRFZpeHRRa0ZCYlVJN1ZVRkRia0lzVDBGQlR5eEZRVUZGTEVsQlFVazdWVUZEWWl4blFrRkJaMEk3VlVGRGFFSTdVVUZEUml4RFFVRkRMRU5CUVVNN1VVRkRSanROUVVOR08wMUJRMEU3VFVGRFFUdE5RVU5CTzAxQlEwRTdUVUZEUVR0TlFVTkJPMDFCUTBFN1RVRkRRVHROUVVOQk8wMUJRMEVzUzBGQlN5eDNRMEZCTWtJc1EwRkJReXhUUVVGVE8xRkJRM2hETEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF6dFZRVU4yUWl4UlFVRlJMRVZCUVVVc2NVTkJRWGRDTEVOQlFVTXNXVUZCV1R0VlFVTXZReXhaUVVGWkxFVkJRVVVzZDBOQlFUSkNMRU5CUVVNc1UwRkJVenRWUVVOdVJDeFpRVUZaTEVWQlFVVXNkME5CUVRKQ0xFTkJRVU1zVTBGQlV6dFZRVU51UkN4VlFVRlZPMVZCUTFZc2JVSkJRVzFDTzFWQlEyNUNMRTlCUVU4c1JVRkJSU3hKUVVGSk8xVkJRMklzWjBKQlFXZENPMVZCUTJoQ08xRkJRMFlzUTBGQlF5eERRVUZETzFGQlEwWTdUVUZEUmp0TlFVTkJPMDFCUTBFN1RVRkRRVHROUVVOQk8wMUJRMEU3VFVGRFFUdE5RVU5CTzAxQlEwRXNTMEZCU3l4M1EwRkJNa0lzUTBGQlF5eFRRVUZUTzFGQlEzaERMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXp0VlFVTjJRaXhSUVVGUkxFVkJRVVVzY1VOQlFYZENMRU5CUVVNc1dVRkJXVHRWUVVNdlF5eFpRVUZaTEVWQlFVVXNkME5CUVRKQ0xFTkJRVU1zVTBGQlV6dFZRVU51UkN4VlFVRlZPMVZCUTFZc2JVSkJRVzFDTzFWQlEyNUNMRTlCUVU4c1JVRkJSU3hKUVVGSk8xVkJRMklzWjBKQlFXZENPMVZCUTJoQ08xRkJRMFlzUTBGQlF5eERRVUZETzFGQlEwWTdUVUZEUmp0UlFVTkZPMGxCUTBvN1JVRkRSanM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEUxQlFVMHNOa0pCUVRaQ0xFTkJRMnBETEUxQlFVMHNSVUZEVGl4TFFVRkxMRVZCUTB3c1VVRkJVU3hGUVVOU0xGZEJRVmNzUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZEYUVJN1NVRkRRU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTzAxQlExZzdTVUZEUmp0SlFVTkJMRTFCUVUwN1RVRkJSU3hWUVVGVk8wMUJRVVU3U1VGQmIwSXNRMEZCUXl4SFFVTjJReXhOUVVGTkxFbEJRVWtzUTBGQlF5dzJRa0ZCTmtJc1EwRkJReXhOUVVGTkxFVkJRVVVzVjBGQlZ5eERRVUZET3p0SlFVVXZSRHRKUVVOQk8wbEJRMEVzU1VGQlNTeERRVUZETEN0Q1FVRXJRaXhEUVVOc1F5eE5RVUZOTEVWQlEwNHNTMEZCU3l4RlFVTk1MRlZCUVZVc1JVRkRWaXh0UWtGQmJVSXNSVUZEYmtJc1VVRkRSaXhEUVVGRE8wbEJSVVFzU1VGQlNTeEZRVUZGTzBsQlJVNHNVVUZCVVN4TFFVRkxPMDFCUTFnN1RVRkRRVHROUVVOQkxFdEJRVXNzZDBOQlFUSkNMRU5CUVVNc1VVRkJVVHRSUVVOMlF5eEZRVUZGTEVkQlFVa3NjVUpCUVc5Q0xFMUJRVTBzUTBGQlF5eEZRVUZITEVWQlFVTTdVVUZEY2tNc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRVZCUVVVc1JVRkJSVHRWUVVGRkxGVkJRVlU3VlVGQlJUdFJRVUZ2UWl4RFFVRkRMRU5CUVVNN1VVRkRha1VzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFVkJRVVVzUTBGQlF6dFJRVU01UWp0TlFVTkdPMDFCUTBFN1RVRkRRU3hMUVVGTExIZERRVUV5UWl4RFFVRkRMRkZCUVZFN1VVRkRka01zUlVGQlJTeEhRVUZKTEhGQ1FVRnZRaXhOUVVGTkxFTkJRVU1zUlVGQlJ5eEZRVUZETzFGQlEzSkRMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RlFVRkZMRVZCUVVVN1ZVRkJSU3hWUVVGVk8xVkJRVVU3VVVGQmIwSXNRMEZCUXl4RFFVRkRPMUZCUTJwRkxFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhGUVVGRkxFVkJRVVU3VlVGRE4wSXNVMEZCVXl4RlFVRkZPMUZCUTJJc1EwRkJReXhEUVVGRE8xRkJRMFk3VFVGRFJqdE5RVU5CTzAxQlEwRXNTMEZCU3l4M1EwRkJNa0lzUTBGQlF5eFRRVUZUTzFGQlEzaERMRVZCUVVVc1IwRkJTU3g1UWtGQmQwSXNUVUZCVFN4RFFVRkRMRVZCUVVjc1JVRkJRenRSUVVONlF5eEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUlVGQlJTeEZRVUZGTzFWQlFVVXNWVUZCVlR0VlFVRkZPMUZCUVc5Q0xFTkJRVU1zUTBGQlF6dFJRVU5xUlN4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVVXNlVUpCUVhkQ0xFMUJRVTBzUTBGQlF5eEZRVUZITEVWQlFVTXNRMEZCUXp0UlFVTm9SVHROUVVOR08xRkJRMFU3U1VGRFNqdEZRVU5HTzBWQlJVRXNOa0pCUVRaQ0xFTkJRVU1zWVVGQllTeEZRVUZGTzBsQlF6TkRMRTlCUVU4c1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExHRkJRV0VzU1VGQlNTeEpRVUZKTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRGUVVOdVJUdEZRVVZCTEcxQ1FVRnRRaXhEUVVGRExGTkJRVk1zUlVGQlJUdEpRVU0zUWl4TlFVRk5MR1ZCUVdVc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRE1VSXNTMEZCU3l4TlFVRk5MRXRCUVVzc1NVRkJTU3hUUVVGVExFVkJRVVU3VFVGRE4wSXNTVUZCU1N4SlFVRkJMREpDUVVGWExFVkJRVU1zVTBGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVN1VVRkRha01zWlVGQlpTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRWxCUVVFc01rSkJRV1VzUlVGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1RVRkROVVFzUTBGQlF5eE5RVUZOTzFGQlEwd3NaVUZCWlN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTTdUVUZETTBNN1NVRkRSanRKUVVOQkxFOUJRVThzWlVGQlpUdEZRVU40UWp0RlFVVkJMR2RDUVVGblFpeERRVUZETEVsQlFVa3NSVUZCUlN4TFFVRkxMRVZCUVVVc1VVRkJVU3hGUVVGRk8wbEJRM1JETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1EwRkJRenRKUVVOc1JDeE5RVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZEZGtRc1NVRkJTU3hEUVVGRExEWkNRVUUyUWl4RFFVTm9ReXhOUVVGTkxFVkJRMDRzZDBOQlFUSkNMRU5CUVVNc1UwRkJVeXhGUVVOeVF5eFJRVUZSTEVWQlExSTdUVUZEUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGRE8wbEJRMllzUTBGRFJpeERRVUZETzBWQlEwZzdSVUZGUVN4blFrRkJaMElzUTBGQlF5eEpRVUZKTEVWQlFVVTdTVUZEY2tJc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRE5VTXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRPMGxCUTNaRUxFbEJRVWtzUTBGQlF5dzJRa0ZCTmtJc1EwRkRhRU1zVFVGQlRTeEZRVU5PTEhkRFFVRXlRaXhEUVVGRExGTkJRVk1zUlVGRGNrTXNVMEZCVXl4RlFVTlVPMDFCUTBVc1QwRkJUeXhGUVVGRk8wbEJRMWdzUTBGRFJpeERRVUZETzBWQlEwZzdSVUZGUVN4TlFVRk5MR2RDUVVGblFpeERRVU53UWl4TlFVRk5MRVZCUTA0N1NVRkJSVHRGUVVGclFpeERRVUZETEVkQlFVYzdTVUZCUlN4cFFrRkJhVUlzUlVGQlJUdEZRVUZMTEVOQlFVTXNSVUZEYmtRN1NVRkRRU3hOUVVGTkxFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTFCUVUwc1EwRkJRenRKUVVOMFF5eE5RVUZOTzAxQlFVVTdTVUZCVHl4RFFVRkRMRWRCUVVjc1RVRkJUVHRKUVVONlFpeE5RVUZOTEVsQlFVa3NSMEZCUnl3MlFrRkJXU3hEUVVGRExGZEJRVmM3U1VGRGNrTXNUVUZCVFN4WFFVRlhMRWRCUVVjN1RVRkJSU3hKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETzBsQlFVY3NRMEZCUXp0SlFVVjJReXhQUVVGUExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlEzaENMRWxCUVVrc1EwRkRTQ3dyUWtGQkswSXNSVUZETDBJN1RVRkRSU3hGUVVGRk8wMUJRMFlzVFVGQlRUdE5RVU5PTEVsQlFVazdUVUZEU2p0SlFVTkdMRU5CUVVNc1JVRkRSQ3hwUWtGRFJpeERRVUZETEVOQlEwRXNTMEZCU3l4RFFVRkRMRTFCUVUwN1RVRkRXRHRKUVVGQkxFTkJRMFFzUTBGQlF6dEZRVU5PTzBWQlJVRXNaVUZCWlN4RFFVRkRMRTFCUVUwc1JVRkJSVHRKUVVOMFFpeE5RVUZOTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFMUJRVTBzUTBGQlF6dEpRVVYwUXl4SlFVRkpPMDFCUTBZc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVTXNhME5CUVd0RExFVkJRVVVzUlVGQlJTeERRVUZETzBsQlEyNUZMRU5CUVVNc1EwRkJReXhQUVVGUExFdEJRVXNzUlVGQlJUdE5RVU5rTEdsQ1FVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExDdERRVUVyUXl4RlFVRkZMRXRCUVVzc1EwRkJRenRKUVVOdVJUdEZRVU5HTzBWQlJVRXNaVUZCWlN4RFFVRkRMRTFCUVUwc1JVRkJSVHRKUVVOMFFpeE5RVUZOTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFMUJRVTBzUTBGQlF6dEpRVVYwUXl4SlFVRkpPMDFCUTBZc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlEzWkNMR3REUVVGclF5eEZRVU5zUXl4RlFVRkZMRVZCUTBZc1NVRkJTU3hMUVVGTExFTkJRVU1zVlVGQlZTeERRVU4wUWl4RFFVRkRPMGxCUTBnc1EwRkJReXhEUVVGRExFOUJRVThzUzBGQlN5eEZRVUZGTzAxQlEyUXNhVUpCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zSzBOQlFTdERMRVZCUVVVc1MwRkJTeXhEUVVGRE8wbEJRMjVGTzBWQlEwWTdSVUZGUVN4alFVRmpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wbEJRM0pDTEU5QlFVOHNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU03UlVGRE1VSTdRVUZEUmp0QlFVRkRMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzY1VKQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRE5XNUdSQ3hKUVVGQkxHbENRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHbENRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFOUJRVUVzUTBGQlFTeFJRVUZCTEVOQlFVRXNRMEZCUVR0QlFVRnRReXh4UTBGQlFTeEZRVUZCTEU5QlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFZEJRVUVzUjBGQlFTeEZRVUZCTEZOQlFVRXNSMEZCUVN4RlFVRkJMRU5CUVVFc1JVRkJRVHM3T3pzN096dEJRVkUxUWl4clJFRkJhMFE3UlVGRGRrUXNUMEZEUlN4WFFVRkJPenROUVVWTkxFTkJRVU1zYTBKQlFXdENPMGxCUTNKQ0xFbEJRVWtzUzBGQlN5eExRVUZMTEVOQlFVTXNSVUZCUlR0TlFVTm1MRTlCUVU4c1MwRkJTeXhEUVVGQk8wdEJRMlE3U1VGRFFTeFBRVUZQTEc5Q1FVRnZRaXhEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVUU3UjBGRE0wUXNRMEZCUXl4RFFVRkJPME5CUlZJN096czdPenM3T3pzN096czdPenRCUVdWUExEWkVRVUUyUkR0RlFVTnNSU3hOUVVGTkxGRkJRVkVzWTBGQlFTeFJRVUZWTEZGQlFWRXNRMEZCUXl4aFFVRmhMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVUU3TzBWQlJYcEVMRWxCUVVrc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTzBsQlExb3NTVUZCU1N4SlFVRkpMRVZCUVVVN1RVRkRVaXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVFN1MwRkRkRUk3U1VGRFFTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRlZCUVZVc1IwRkJSeXhKUVVGSkxFbEJRVWtzUlVGQlJTeERRVUZCTzBkQlEycERPMFZCUTBFc1QwRkJUeXhMUVVGTExFTkJRVUU3UTBGRFpEczdPenM3T3pzN1FVRlJUeXh6UTBGQmMwTTdSVUZETTBNc1RVRkJUU3hsUVVGbExFTkJRVUVzUTBGQlFTeEZRVUZCTEU5QlFVRXNWVUZCVXl4RlFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGQk8wVkJRemRETEU5QlFVOHNXVUZCV1N4UFFVRlBMRU5CUTNoQ0xHZENRVUZuUWl4alFVRkJMRkZCUVZVc1YwRkJWeXhEUVVGRExFZEJRVWNzUlVGQlJTeExRVUZMTEVOQlFVTXNXVUZEYmtRc1EwRkJReXhEUVVGQk8wTkJRMGc3T3pzN096czdPMEZCVVU4c2IwTkJRVzlETzBWQlEzcERMRTFCUVUwc1ZVRkJWVHRKUVVGRkxFZEJRVWNzVFVGQlFUdEhRVUZSTEVOQlFVRTdSVUZETjBJc1QwRkJUeXhQUVVGUExGRkJRVkVzUTBGQlFUdEZRVU4wUWl4UFFVRlBMRU5CUVVFc1EwRkJRU3hGUVVGQkxFOUJRVUVzVlVGQlV5eEZRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkJPME5CUXpOQ096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRM1JGUVN4SlFVRkJMR0ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeEpRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2MwSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFdEJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4WlFVRkJMRWRCUVVFc1QwRkJRVHRCUVVsQkxFbEJRVUVzWVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRV3RHTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUdEJRVVZzUml4TlFVRk5MRmRCUVZjc1IwRkJSenRGUVVOc1FpeEpRVUZKTEVWQlFVVXNhMEpCUVZrN1JVRkRiRUlzUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRk5CUVZNc1MwRkRhRUlzVTBGQlV5eEhRVUZITEVsQlFVRXNhMEpCUVZrc1JVRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVFc2EwSkJRVmtzUlVGQlF5eEZRVUZGTEVOQlFVTTdSVUZETDBRc1MwRkJTeXhGUVVGRkxHdENRVUZaTzBWQlEyNUNMRXRCUVVzc1JVRkJSU3hyUWtGQldUdEZRVU51UWl4SlFVRkpMRVZCUVVVc2EwSkJRVms3UlVGRGJFSXNSMEZCUnl4RlFVRkZMR3RDUVVGWk8wVkJRMnBDTEZGQlFWRXNSVUZCUlN4clFrRkJXVHRGUVVOMFFpeFpRVUZaTEVWQlFVVXNhMEpCUVZrN1JVRkRNVUlzYjBKQlFXOUNMRVZCUVVVc2EwSkJRVms3UlVGRGJFTXNTVUZCU1N4RlFVRkZMR3RDUVVGWk8wVkJRMnhDTEdsQ1FVRnBRaXhGUVVGSExGRkJRVkVzU1VGQlN5eFJRVUZSTzBWQlEzcERMRmxCUVZrc1JVRkJSeXhSUVVGUkxFbEJRVXM3UVVGRE9VSXNRMEZCUXp0QlFVVk5MRk5CUVZNc05FSkJRVFJDTEVOQlFVTXNVVUZCVVN4RlFVRkZMRk5CUVZNc1IwRkJSeXhKUVVGSkxFVkJRVVU3UlVGRGRrVXNUVUZCVFN4clFrRkJhMElzUjBGQlJ5eHBRa0ZCYVVJc1EwRkJReXhSUVVGUkxFVkJRVVVzVTBGQlV5eERRVUZETzBWQlEycEZMR2RDUVVGblFpeERRVUZETEd0Q1FVRnJRaXhEUVVGRE8wVkJRM0JETEU5QlFVOHNhMEpCUVd0Q08wRkJRek5DT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEVHl4VFFVRlRMR2xDUVVGcFFpeERRVUZETEZGQlFWRXNSVUZCUlN4VFFVRlRMRWRCUVVjc1NVRkJTU3hGUVVGRk8wVkJRelZFTzBWQlEwRXNUVUZCVFN4clFrRkJhMElzUjBGQlJ5eERRVUZETEVOQlFVTTdSVUZETjBJc1MwRkJTeXhOUVVGTkxFZEJRVWNzU1VGQlNTeFhRVUZYTEVWQlFVVTdTVUZETjBJc1NVRkJTU3hSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVTdUVUZEYWtJc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1YwRkJWeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hUUVVGVExFTkJRVU03U1VGRGRFVTdSVUZEUmp0RlFVTkJMRTlCUVU4c2EwSkJRV3RDTzBGQlF6TkNPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV5eDNRMEZCZDBNc1EwRkRMME1zVVVGQlVTeEZRVU5TTEcxQ1FVRnRRaXhGUVVOdVFpeHpRa0ZCYzBJc1JVRkRkRUk3UlVGRFFTeEpRVUZKTEU5QlFVOHNVVUZCVVN4RFFVRkRMSE5DUVVGelFpeERRVUZETEV0QlFVc3NWMEZCVnl4RlFVRkZPMGxCUXpORUxFMUJRVTBzZFVKQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVNNVFpeDVRMEZCZDBNc2JVSkJRVzlDTEhOQ1FVRnhRaXh6UWtGQmRVSXNlVUpCUXpOSExFTkJRVU03UlVGRFNEdEJRVU5HT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRMRzFDUVVGdFFpeERRVUZETEZGQlFWRXNSVUZCUlN4TFFVRkxMRVZCUVVVN1JVRkROVU1zU1VGQlNTeFBRVUZQTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhSUVVGUkxFVkJRVVU3U1VGRGRrTXNUVUZCVFN4MVFrRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGhRVUZoTEVOQlF6bENMQ3RDUVVFNFFpeExRVUZOTERKQ1FVRXdRaXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZGTEVkQlEycEdMRU5CUVVNN1JVRkRTRHRCUVVOR096dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRMREpEUVVFeVF5eERRVUZETEZGQlFWRXNSVUZCUlN4TFFVRkxMRVZCUVVVN1JVRkRjRVVzVVVGQlVTeExRVUZMTzBsQlExZ3NTMEZCU3l4alFVRmpPMGxCUTI1Q0xFdEJRVXNzYzBKQlFYTkNPMDFCUTNwQ0xFbEJRMFVzVVVGQlVTeERRVUZETEVsQlFVa3NTVUZEWWl4UlFVRlJMRU5CUVVNc1NVRkJTU3hMUVVGTExHOURRVUYxUWl4RFFVRkRMRk5CUVZNc1JVRkRia1E3VVVGRFFTeE5RVUZOTEhWQ1FVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExHRkJRV0VzUTBGRE9VSXNjMFJCUVhGRUxGRkJRVkVzUTBGQlF5eEpRVUZMTEhsRlFVRjNSU3h2UTBGQmRVSXNRMEZCUXl4VFFVRlZMRWRCUTJoTUxFTkJRVU03VFVGRFNEdE5RVU5CTzBsQlEwWXNTMEZCU3l4VlFVRlZPMGxCUTJZN1RVRkRSU3hKUVVORkxGRkJRVkVzUTBGQlF5eEpRVUZKTEVsQlEySXNVVUZCVVN4RFFVRkRMRWxCUVVrc1MwRkJTeXh2UTBGQmRVSXNRMEZCUXl4VFFVRlRMRVZCUTI1RU8xRkJRMEVzVFVGQlRTeDFRa0ZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhoUVVGaExFTkJRemxDTEhORVFVRnhSQ3hSUVVGUkxFTkJRVU1zU1VGQlN5dzBSVUZEZEVVc1EwRkJRenROUVVOSU8wVkJRMG83UVVGRFJqczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5QTEZOQlFWTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEc5Q1FVRnZRaXhIUVVGSExFbEJRVWtzUlVGQlJUdEZRVU4wUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hKUVVGSkxFOUJRVThzVVVGQlVTeExRVUZMTEZGQlFWRXNTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTzBsQlEzaEZMRTFCUVUwc2RVSkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNZVUZCWVN4RFFVTXZRaXhuUkVGRFJpeERRVUZETzBWQlEwZzdSVUZEUVN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRVZCUVVVN1NVRkRiRU1zVFVGQlRTeDFRa0ZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhoUVVGaExFTkJReTlDTEdkS1FVTkdMRU5CUVVNN1JVRkRTRHRGUVVOQkxFbEJRVWtzU1VGQlFTeHJRMEZCYjBJc1JVRkJRenRKUVVGRk8wVkJRVk1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUlVGQlJUdEpRVU12UkN4TlFVRk5MSFZDUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEdGQlFXRXNRMEZETDBJc2MwaEJRMFlzUTBGQlF6dEZRVU5JTzBWQlJVRXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hMUVVGTExFTkJRVU1zUzBGQlN6dEpRVU5xUkR0SlFVTkJMRkZCUVZFc1IwRkJSenROUVVOVUxFdEJRVXNzVFVGQlRUdFJRVU5VTEZsQlFWa3NRMEZCUXl4UlFVRlJMRU5CUVVNN1VVRkRkRUk3VFVGRFJpeExRVUZMTEVsQlFVazdVVUZEVUN4cFFrRkJhVUlzUTBGQlF5eFJRVUZSTEVOQlFVTTdVVUZETTBJN1RVRkRSaXhMUVVGTExGVkJRVlU3VVVGRFlpd3lRMEZCTWtNc1EwRkJReXhSUVVGUkxFVkJRVVVzVlVGQlZTeERRVUZETzFGQlEycEZMSGREUVVGM1F5eERRVU4wUXl4UlFVRlJMRVZCUTFJc1ZVRkJWU3hGUVVOV0xHTkJRMFlzUTBGQlF6dFJRVU5FTEhkRFFVRjNReXhEUVVOMFF5eFJRVUZSTEVWQlExSXNWVUZCVlN4RlFVTldMSE5DUVVOR0xFTkJRVU03VVVGRFJDeHRRa0ZCYlVJc1EwRkJReXhSUVVGUkxFVkJRVVVzVlVGQlZTeERRVUZETzFGQlEzcERPMDFCUTBZc1MwRkJTeXhqUVVGak8xRkJRMnBDTERKRFFVRXlReXhEUVVGRExGRkJRVkVzUlVGQlJTeGpRVUZqTEVOQlFVTTdVVUZEY2tVc2QwTkJRWGRETEVOQlEzUkRMRkZCUVZFc1JVRkRVaXhqUVVGakxFVkJRMlFzVlVGRFJpeERRVUZETzFGQlEwUXNiVUpCUVcxQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEdOQlFXTXNRMEZCUXp0UlFVTTNRenROUVVOR0xFdEJRVXNzYzBKQlFYTkNPMUZCUTNwQ0xESkRRVUV5UXl4RFFVTjZReXhSUVVGUkxFVkJRMUlzYzBKQlEwWXNRMEZCUXp0UlFVTkVMSGREUVVGM1F5eERRVU4wUXl4UlFVRlJMRVZCUTFJc2MwSkJRWE5DTEVWQlEzUkNMRlZCUTBZc1EwRkJRenRSUVVORUxHMUNRVUZ0UWl4RFFVRkRMRkZCUVZFc1JVRkJSU3h6UWtGQmMwSXNRMEZCUXp0UlFVTnlSRHROUVVOR0xFdEJRVXNzVDBGQlR6dFJRVU5XTEcxQ1FVRnRRaXhEUVVGRExGRkJRVkVzUlVGQlJTeFBRVUZQTEVOQlFVTTdVVUZEZEVNc1NVRkJTU3hMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVU3VlVGRGJFTXNUVUZCVFN4MVFrRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGhRVUZoTEVOQlF6bENMRGhDUVVFMlFpeExRVUZOTERKQ1FVTjBReXhEUVVGRE8xRkJRMGc3VVVGRlFTeEpRVUZKTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlR0VlFVTnNReXhOUVVGTkxIVkNRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMR0ZCUVdFc1EwRkRPVUlzYVVOQlFXZERMRXRCUVUwc01rSkJRM3BETEVOQlFVTTdVVUZEU0R0UlFVVkJMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEcxQ1FVRnRRaXhEUVVGRExFVkJRVVU3VlVGRGNrTXNUVUZCVFN4MVFrRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGhRVUZoTEVOQlF6bENMR2xEUVVGblF5eExRVUZOTERSQ1FVTjZReXhEUVVGRE8xRkJRMGc3VVVGRFFUdE5RVU5HTEV0QlFVc3NVMEZCVXp0UlFVTmFMRWxCUVVrc1QwRkJUeXhMUVVGTExFdEJRVXNzVVVGQlVTeEpRVUZKTEU5QlFVOHNTMEZCU3l4TFFVRkxMRkZCUVZFc1JVRkJSVHRWUVVNeFJDeE5RVUZOTEhWQ1FVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExHRkJRV0VzUTBGRE9VSXNLMEpCUVRoQ0xFZEJRVWtzZVVOQlFYZERMRXRCUVUwc1IwRkRia1lzUTBGQlF6dFJRVU5JTzFGQlEwRTdUVUZEUml4TFFVRkxMRTFCUVUwN1VVRkRWQ3hwUWtGQmFVSXNRMEZCUXl4TFFVRkxMRU5CUVVNN1VVRkRlRUlzYlVKQlFXMUNMRU5CUVVNc1VVRkJVU3hGUVVGRkxFMUJRVTBzUTBGQlF6dFJRVU55UXp0TlFVTkdPMUZCUTBVc2JVSkJRVzFDTEVOQlFVTXNVVUZCVVN4RlFVRkZMRWRCUVVjc1EwRkJRenRKUVVOMFF6dEZRVU5HTEVOQlFVTXNRMEZCUXp0QlFVTktPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwOHNVMEZCVXl4cFFrRkJhVUlzUTBGQlF5eExRVUZMTEVWQlFVVTdSVUZEZGtNc1NVRkJTU3hMUVVGTExFdEJRVXNzU1VGQlNTeEZRVUZGTzBsQlEyeENPMGxCUTBFc1RVRkJUU3haUVVGWkxFZEJRVWNzU1VGQlNTeGpRVUZUTEVOQlFVTXNPRUpCUVVjc1EwRkJRenRKUVVOMlF5eEpRVUZKTzAxQlEwWXNXVUZCV1N4RFFVRkRMR2RDUVVGblFpeERRVUZETzFGQlFVVXNTVUZCU1N4RlFVRkZPMDFCUVUwc1EwRkJReXhEUVVGRE8wbEJRMmhFTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSVHROUVVOV08wMUJRMEU3VFVGRFFTeEpRVUZKTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRVZCUVVVN1VVRkRja01zVFVGQlRTeDFRa0ZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhoUVVGaExFTkJRemxDTEdsRlFVTklMRU5CUVVNN1RVRkRTRHRKUVVOR08wVkJRMFk3UVVGRFJqczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFR5eFRRVUZUTEZsQlFWa3NRMEZCUXl4UlFVRlJMRVZCUVVVN1JVRkRja01zU1VGQlNTeEZRVUZGTEU5QlFVOHNVVUZCVVN4RFFVRkRMRWxCUVVrc1MwRkJTeXhSUVVGUkxFTkJRVU1zUlVGQlJUdEpRVU40UXl4TlFVRk5MSFZDUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEdGQlFXRXNRMEZET1VJc01rSkJRVEJDTEZGQlFWRXNRMEZCUXl4SlFVRkxMR3RDUVVNelF5eERRVUZETzBWQlEwZzdSVUZEUVN4SlFVRkpMRU5CUVVNc1NVRkJRU3hwUTBGQmFVSXNSVUZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVGRk8wbEJRVVVzWjBKQlFXZENMRVZCUVVVN1JVRkJUU3hEUVVGRExFTkJRVU1zUlVGQlJUdEpRVU5zUlN4TlFVRk5MSFZDUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEdGQlFXRXNRMEZCUXl4NVFrRkJlVUlzUTBGQlF6dEZRVU01UkR0QlFVTkdPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTA4c1UwRkJVeXhwUWtGQmFVSXNRMEZCUXl4UlFVRlJMRVZCUVVVN1JVRkRNVU1zU1VGQlNTeFJRVUZSTEVOQlFVTXNSVUZCUlN4TFFVRkxMRWxCUVVrc1NVRkJTU3hSUVVGUkxFTkJRVU1zUlVGQlJTeExRVUZMTEVsQlFVa3NSVUZCUlR0SlFVTm9SQ3hKUVVGSkxGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVTdUVUZEYWtJc1QwRkJUeXhSUVVGUkxFTkJRVU1zUlVGQlJUdEpRVU53UWl4RFFVRkRMRTFCUVUwN1RVRkRUQ3hOUVVGTkxIVkNRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMR0ZCUVdFc1EwRkJReXgxUWtGQmRVSXNRMEZCUXp0SlFVTTFSRHRGUVVOR0xFTkJRVU1zVFVGQlRTeEpRVU5NTEZGQlFWRXNRMEZCUXl4RlFVRkZMRXRCUVVzc1UwRkJVeXhKUVVONlFpeERRVUZETEVsQlFVRXNhVU5CUVdsQ0xFVkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVXNSVUZCUlR0SlFVRkZMR2RDUVVGblFpeEZRVUZGTzBWQlFVMHNRMEZCUXl4RFFVRkRMRVZCUXpWRU8wbEJRMEVzVFVGQlRTeDFRa0ZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhoUVVGaExFTkJRVU1zZFVKQlFYVkNMRU5CUVVNN1JVRkROVVE3UlVGRFFTeFBRVUZQTEZGQlFWRTdRVUZEYWtJN1FVRkZUeXhOUVVGTkxHOURRVUZ2UXl4SFFVRkhMRU5CUVVNN1JVRkRia1FzVFVGQlRUdEZRVU5PTEcxQ1FVRnRRanRGUVVOdVFqdEJRVU5HTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1MwRkJTenRGUVVOVUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hGUVVGRk8wbEJReTlDTEUxQlFVMHNkVUpCUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zWVVGQllTeERRVU12UWl3d1EwRkRSaXhEUVVGRE8wVkJRMGc3UlVGRFFTeEpRVUZKTEUxQlFVMHNRMEZCUXl4TlFVRk5MRXRCUVVzc09FSkJRV2xDTEVOQlFVTXNVMEZCVXl4RlFVRkZPMGxCUTJwRUxFMUJRVTBzZFVKQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVNdlFpeHRSRUZEUml4RFFVRkRPMFZCUTBnN1JVRkRRU3hOUVVGTkxHVkJRV1VzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzN1JVRkROME1zU1VGQlNTeHRRa0ZCYlVJc1NVRkJTU3h0UWtGQmJVSXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhGUVVGRk8wbEJRM3BFTEUxQlFVMHNjVUpCUVhGQ0xFZEJRVWNzYlVKQlFXMUNMRU5CUVVNc1NVRkJTU3hEUVVOdVJDeEZRVUZGTzAxQlFVRXNTVUZCUVN4WlFVRkJPMDFCUVVFc1QwRkJTeXhGUVVGQkxGbEJRVUVzUjBGQlFTeEZRVUZGTEVOQlFVTXNVVUZCVVN4alFVRkJMRmxCUVVFc2RVSkJRVmdzV1VGQlFTeERRVUZoTEV0QlFVc3NUVUZCU3l4bFFVRmxPMGxCUVVFc1EwRkRhRVFzUTBGQlF6dEpRVU5FTEVsQlFVa3NjVUpCUVhGQ0xFVkJRVVU3VFVGRGVrSXNUVUZCVFN4MVFrRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGhRVUZoTEVOQlF5OUNMSGxFUVVOR0xFTkJRVU03U1VGRFNEdEZRVU5HTzBWQlEwRXNTVUZCU1N4eFFrRkJjVUlzU1VGQlNTeHhRa0ZCY1VJc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTzBsQlF6ZEVMRTFCUVUwc2RVSkJRWFZDTEVkQlFVY3NjVUpCUVhGQ0xFTkJRVU1zU1VGQlNTeERRVU4yUkN4RlFVRkZPMDFCUVVFc1NVRkJRU3hoUVVGQk8wMUJRVUVzVDBGQlN5eEZRVUZCTEdGQlFVRXNSMEZCUVN4RlFVRkZMRU5CUVVNc1VVRkJVU3hqUVVGQkxHRkJRVUVzZFVKQlFWZ3NZVUZCUVN4RFFVRmhMRXRCUVVzc1RVRkJTeXhsUVVGbE8wbEJRVUVzUTBGRGFFUXNRMEZCUXp0SlFVTkVMRWxCUVVrc2RVSkJRWFZDTEVWQlFVVTdUVUZETTBJc1RVRkJUU3gxUWtGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4aFFVRmhMRU5CUXk5Q0xESkVRVU5HTEVOQlFVTTdTVUZEU0R0RlFVTkdPMEZCUTBZc1EwRkJRenM3UVVGRlJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU2tFc1QwRkJRU3hEUVVGQkxHOURRVUZCTEVkQlFVRXNiME5CUVVFN1FVRkxUeXhUUVVGVExHTkJRV01zUTBGQlFTeEZRVUZITzBWQlF5OUNMRTlCUVU4c1EwRkRUQ3c0UWtGQmFVSXNRMEZCUXl4UlFVRlJPMFZCUVVVN1JVRkROVUlzT0VKQlFXbENMRU5CUVVNc1UwRkJVenRGUVVGRk8wVkJRemRDTERoQ1FVRnBRaXhEUVVGRExFMUJRVTA3UlVGQlJUdEZRVU14UWl3NFFrRkJhVUlzUTBGQlF5eFBRVUZQTEVOQlFVVTdSVUZCUVN4RFFVTTFRanRCUVVOSU96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFR5eFRRVUZUTEhsQ1FVRjVRaXhEUVVGRExFOUJRVThzUlVGQlJUdEZRVU5xUkN4UFFVRlBMRTlCUVU4c1QwRkJUeXhMUVVGTExGRkJRVkVzUjBGQlJ5eFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRkxFTkJRVU03UVVGRGNrVTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEY0ZkQkxFbEJRVUVzYVVKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZOQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZkQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZsQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hsUVVGQkxFZEJRVUVzVDBGQlFUdEJRVUZ6UkN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMR2RDUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEVWQlFVRXNTMEZCUVN4SlFVRkJMRWRCUVVFc1IwRkJRU3hqUVVGQkxFTkJRVUVzUjBGQlFTeFBRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRWxCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4SlFVRkJMRXRCUVVFc1JVRkJRU3hMUVVGQkxFVkJRVUVzVlVGQlFTeFJRVUZCTEZsQlFVRXNVVUZCUVN4UlFVRkJMRzlDUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTMEZCUVN4WFFVRkJMRWRCUVVFN1FVRkJRU3hUUVVGQkxHVkJRVUVzUjBGQlFTeFJRVUZCTEVkQlFVRXNSMEZCUVN4WlFVRkJMRU5CUVVFc1IwRkJRU3d5UWtGQlFTeEhRVUZCTEdkQ1FVRkJMRWRCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFUdEJRVUZCTEZOQlFVRXNZVUZCUVN4TFFVRkJMRVZCUVVFc1NVRkJRU3hsUVVGQkxFdEJRVUVzYVVKQlFVRXNTMEZCUVN4clFrRkJRU3hMUVVGQkxFMUJRVUVzU1VGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4TlFVRkJMRU5CUVVFc1YwRkJRU3hQUVVGQkxFbEJRVUVzUzBGQlFTeFRRVUZCTEZGQlFVRXNSMEZCUVN4SFFVRkJMRWxCUVVFc1EwRkJRU3hKUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTEVsQlFVRXNNa0pCUVVFc1IwRkJRU3h6UWtGQlFTeEhRVUZCTEZsQlFVRXNVMEZCUVN3MFJFRkJRU3hKUVVGQkxHZENRVUZCTEUxQlFVRXNSMEZCUVN4TlFVRkJMRVZCUVVFc1MwRkJRVHRCUVVWMFJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRaU3hOUVVGTkxIbENRVUY1UWl4VFFVRlRMSGxDUVVGWkxFTkJRVU03UlVGclFteEZPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRkRSU3hYUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTzBsQlEyeENMRXRCUVVzc1EwRkJReXhEUVVGRE8wbEJOMEpVTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wbEJUa1VzWlVGQlFTd3JRa0ZQZFVJc1EwRkJRenRKUVVWNFFqdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1NVRk1SU3hsUVVGQkxHOURRVTAwUWl4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJaVzVETEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExFdEJRVXNzU1VGQlNTeEpRVUZKTEcxQ1FVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF6dEpRVU14UkN4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExFMUJRVTBzUTBGQlF5eFpRVUZaTzBsQlEzWkRMRWxCUVVrc1EwRkJReXh6UWtGQmMwSXNSMEZCUnl4TlFVRk5MRU5CUVVNc2MwSkJRWE5DTzBsQlF6TkVMRWxCUVVrc1EwRkJReXgzUWtGQmQwSXNSMEZCUnl4TlFVRk5MRU5CUVVNc2QwSkJRWGRDTzBsQlF5OUVMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNSMEZCUnl4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTzBsQlEyNUVMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNSMEZCUnl4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTzBsQlEyNUVMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNSMEZCUnl4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTzBWQlEzSkVPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEZRVU5GTEUxQlFVMHNaMEpCUVdkQ0xFTkJRVUVzUlVGQlJ6dEpRVU4yUWp0SlFVTkJMRTFCUVUwc1pVRkJaU3hIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRKUVVNdlJDeEpRVUZKTzAxQlEwWXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRU5CUVVNN1RVRkRhRVFzVFVGQlRTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVTm1MRlZCUVZVc1EwRkJReXhIUVVGSExFTkJRVVVzVFVGQlRTeEpRVUZMTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRM3BFTEVOQlFVTTdTVUZEU0N4RFFVRkRMRU5CUVVNc1QwRkJUeXhIUVVGSExFVkJRVVU3VFVGRFdpeHBRa0ZCUnl4RFFVRkRMRXRCUVVzc1EwRkRVQ3hwUlVGRFJpeERRVUZETzAxQlEwUXNhVUpCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETzBsQlEyaENPMGxCUTBFc1pVRkJaU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzBWQlF5OUNPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc1RVRkJUU3hyUWtGQmEwSXNRMEZCUXl4WFFVRlhMRVZCUVVVN1NVRkRjRU1zVFVGQlRTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMSE5DUVVGelFpeERRVUZETEVOQlFVTTdTVUZETjBNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVWQlFVVTdUVUZEYmtJN1NVRkRSanRKUVVOQkxFdEJRVXNzVFVGQlRTeE5RVUZOTEVsQlFVa3NUMEZCVHl4RlFVRkZPMDFCUXpWQ0xFbEJRVWs3VVVGRFJpeE5RVUZOTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1RVRkJUU3hGUVVGRkxGZEJRVmNzUTBGQlF6dE5RVU0zUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhIUVVGSExFVkJRVVU3VVVGQlFTeEpRVUZCTEZWQlFVRXNSVUZCUVN4clFrRkJRVHRSUVVOYUxFMUJRVTBzV1VGQldTeEhRVU5vUWl4RlFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGSExFTkJRVU1zUzBGQlN5eGpRVUZCTEZWQlFVRXNkMEpCUVVFc2EwSkJRVUVzUjBGQlZDeFZRVUZCTEVOQlFWY3NUMEZCVHl4alFVRkJMR3RDUVVGQkxIVkNRVUZzUWl4clFrRkJRU3hEUVVGdlFpeFhRVUZYTEVOQlFVTXNRMEZCUXl4TFFVRkpMRWRCUVVjc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdVVUZEYUVVc1RVRkJUU3hUUVVGVE8xRkJRMkk3VVVGRFFTeFpRVUZaTEVOQlFVTXNVVUZCVVN4RFFVRkRMSEZEUVVGeFF5eERRVUZETEVsQlF6VkVMRmxCUVZrc1EwRkJReXhSUVVGUkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNN1VVRkRNVU03VVVGRFFTeFpRVUZaTEVOQlFVTXNVVUZCVVN4RFFVRkRMRGhDUVVFNFFpeERRVUZETEVsQlEzSkVMRmxCUVZrc1EwRkJReXhSUVVGUkxFTkJRMjVDTEhGRVFVTkdMRU5CUVVNN1VVRkRSRHRSUVVOQkxGbEJRVmtzUTBGQlF5eFJRVUZSTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zU1VGRGVFTXNXVUZCV1N4RFFVRkRMRkZCUVZFc1EwRkJReXhsUVVGbExFTkJRVU03VVVGRGVFTTdVVUZEUVN4SlFVRkpMRk5CUVZNc1JVRkJSVHRWUVVOaU8xRkJRMFk3VVVGRFFUdFJRVU5CTEUxQlFVMHNRMEZCUXl4UFFVRlBMRWRCUVVjN1ZVRkRaaXhMUVVGTExFVkJRVVVzV1VGQldUdFZRVU51UWl4UFFVRlBMRVZCUVVVN1VVRkRXQ3hEUVVGRE8xRkJRMFFzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVVc1RVRkJUU3hGUVVGRkxFZEJRVWNzUTBGQlF6dE5RVU4wUXp0SlFVTkdPMFZCUTBZN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNUVUZCVFN4WFFVRlhMRU5CUVVNc1RVRkJUU3hGUVVGRkxHbENRVUZwUWl4RlFVRkZPMGxCUXpORExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNjVUpCUVhGQ0xFVkJRVVU3VFVGRGFrTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNSVUZCUlN4TlFVRk5MRVZCUVVVc2FVSkJRV2xDTEVOQlFVTTdTVUZEZWtRN1NVRkZRU3hOUVVGTkxIRkNRVUZ4UWl4SFFVTjZRaXhOUVVGTkxFTkJRVU1zY1VKQlFYRkNMRWxCUVVrc2FVSkJRV2xDTzBsQlEyNUVMRTFCUVUwc1pVRkJaU3hIUVVOdVFpeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTEVWQlFVVXNRMEZCUXl4SFFVTjBReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFVkJRVVVzUTBGQlF6dEpRVVUxUXl4TlFVRk5MRlZCUVZVc1IwRkJSeXhOUVVGTkxFTkJRVU1zVlVGQlZTeEpRVUZKTEVOQlFVTTdPMGxCUlhwRE8wbEJRMEVzU1VGQlNTeGxRVUZsTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVU1zUlVGQlJUdE5RVU16UkN4UFFVRlBMRk5CUVZNN1NVRkRiRUk3TzBsQlIwRTdTVUZEUVN4SlFVRkpMRVZCUVVVc1QwRkJUeXhKUVVGSkxFMUJRVTBzUTBGQlF5eEZRVUZGTzAxQlEzaENMRTlCUVU4c1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxFTkJRVU03U1VGRE0wTTdTVUZGUVN4TlFVRk5PMDFCUVVVN1NVRkJUU3hEUVVGRExFZEJRVWNzVFVGQlRUdEpRVU40UWl4TlFVRk5MRTFCUVUwc1IwRkJSeXhOUVVGTkxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhMUVVGTExFTkJRVU03TzBsQlJXNUVPMGxCUTBFc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNUVUZCVFN4RFFVRkRPMGxCUXpkQ0xFOUJRVThzVFVGQlRUdEZRVU5tT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wVkJSVVVzVFVGQlRTeGxRVUZsTEVOQlFVTXNUVUZCVFN4RlFVRkZPMGxCUXpWQ0xFMUJRVTBzVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4SlFVRkpPMGxCUXpGQ0xFMUJRVTBzU1VGQlNTeEhRVUZITEUxQlFVMHNRMEZCUXl4RlFVRkZPenRKUVVWMFFqdEpRVU5CTEVsQlFVa3NUVUZCVFN4RFFVRkRMRTFCUVUwc1MwRkJTeXc0UWtGQmFVSXNRMEZCUXl4VFFVRlRMRVZCUVVVN1RVRkRha1E3U1VGRFJqczdTVUZGUVR0SlFVTkJPenRKUVVWQkxFbEJRVWtzVTBGQlV5eEhRVUZITEVOQlFVTXNUVUZCVFR0SlFVZDJRaXhKUVVGSkxGTkJRVk1zUlVGQlJUdE5RVU5pTEUxQlFVMHNWMEZCVnl4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVNelFpeHpSVUZEUml4RFFVRkRPMDFCUTBRc1YwRkJWeXhEUVVGRExFbEJRVWtzUjBGQlJ5eGxRVUZsTzAxQlEyeERMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4WFFVRlhMRU5CUVVNN1RVRkZla003U1VGRFJqdEpRVVZCTEVsQlFVa3NUVUZCVFN4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVN1RVRkRNME1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVVc1NVRkJTU3hEUVVGRE8wMUJRemRDTzBsQlEwWTdTVUZGUVN4SlFVRkpPMDFCUTBZc1RVRkJUU3hyUWtGQmEwSXNSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1RVRkJUU3hEUVVGRE8wMUJRM3BGTEVsQlFVa3NhMEpCUVd0Q0xHRkJRV3hDTEd0Q1FVRnJRaXhsUVVGc1FpeHJRa0ZCYTBJc1EwRkJSU3hYUVVGWExFVkJRVVU3VVVGRGJrTXNUVUZCVFR0VlFVRkZMR0ZCUVdFN1ZVRkJSU3hUUVVGVExFVkJRVVU3VVVGQlpTeERRVUZETEVkQlEyaEVMRTFCUVUwc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eGpRVUZqTEVOQlFVTXNhMEpCUVd0Q0xHRkJRV3hDTEd0Q1FVRnJRaXgxUWtGQmJFSXNhMEpCUVd0Q0xFTkJRVVVzVTBGQlV5eEZRVUZGTEV0QlFVc3NRMEZCUXp0UlFVVjJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVU5RTEdOQlFXTXNSVUZEWkN4SlFVRkpMRVZCUTBvc2EwSkJRV3RDTEVWQlEyeENMR0ZCUVdFc1JVRkRZaXhqUVVOR0xFTkJRVU03VVVGRFJEdE5RVU5HTzBsQlEwWXNRMEZCUXl4RFFVRkRMRTlCUVU4c1IwRkJSeXhGUVVGRk8wMUJRMW9zVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnp0UlFVTm1MRXRCUVVzc1JVRkJSU3hIUVVGSExFTkJRVU1zVDBGQlR6dFJRVU5zUWl4UFFVRlBMRVZCUVVVN1RVRkRXQ3hEUVVGRE8wMUJRMFFzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVVc1RVRkJUU3hGUVVGRkxFZEJRVWNzUTBGQlF6dE5RVU53UXp0SlFVTkdPMGxCUlVFc1NVRkJTU3hOUVVGTkxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJUdE5RVU16UXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUlVGQlJTeEpRVUZKTEVOQlFVTTdTVUZETDBJN1JVRkRSanM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxFMUJRVTBzYjBKQlFXOUNMRU5CUVVNc1RVRkJUU3hGUVVGRk8wbEJRMnBETEUxQlFVMDdUVUZEU2l4SlFVRkpMRVZCUVVVc1RVRkJUVHROUVVOYUxGRkJRVkVzUlVGQlJUdFJRVUZGTEV0QlFVczdVVUZCUlR0TlFVRkxPMGxCUXpGQ0xFTkJRVU1zUjBGQlJ5eE5RVUZOTzBsQlExWXNUVUZCVFN4blFrRkJaMElzUjBGQlJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNTVUZCU1N4RFFVRkRPMGxCUlc1RkxFbEJRVWtzVVVGQlVTeERRVUZETEV0QlFVc3NSVUZCUlN4RlFVRkZMRU5CUVVNc1NVRkJTU3huUWtGQlowSXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhGUVVGRk8wMUJRM1JFTEU5QlFVOHNTMEZCU3p0SlFVTmtPMGxCUlVFc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVTdUVUZETDBNc1NVRkJTU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF5OURPMGxCUlVFc1RVRkJUU3hyUWtGQmEwSXNSMEZCUnl4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJRenRKUVVWeVJTeEpRVUZKTEd0Q1FVRnJRaXhIUVVGSExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1JVRkJSVHROUVVOc1JDeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNSVUZCUlN4clFrRkJhMElzUjBGQlJ5eERRVUZETEVOQlFVTTdUVUZEYkVVc1QwRkJUeXhMUVVGTE8wbEJRMlE3U1VGRlFTeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXp0SlFVTTNReXhQUVVGUExFbEJRVWs3UlVGRFlqczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEUxQlFVMHNiMEpCUVc5Q0xFTkJRVU1zVFVGQlRTeEZRVUZGTzBsQlEycERMRTFCUVUwc1QwRkJUeXhIUVVGSExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1R0SlFVTndReXhOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zVDBGQlR5eERRVUZETzBsQlEzaEVMRTlCUVU4c1UwRkJVeXhEUVVGRExFbEJRVWs3U1VGRGJrSTdTVUZEUVR0SlFVTkJPMGxCUTBNc1MwRkJTeXhKUVVOS0xFVkJRVVVzUzBGQlN5eERRVUZETEVWQlFVVXNTMEZCU3l4TlFVRk5MRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRM3BDTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhMUVVGTExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZETjBNc1EwRkJRenRGUVVOSU8wRkJRMFk3UVVGQlF5eFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMSGxDUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRek5TUkN4SlFVRkJMRmRCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRk5CUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFBRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1MwRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZkQlFVRXNSMEZCUVN4UFFVRkJPMEZCUVhORkxGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRCUVVWMFJUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWbExFMUJRVTBzVTBGQlV5eERRVUZETzBWQlF6ZENMRmRCUVZjc1EwRkJReXhSUVVGUkxFVkJRVVU3U1VGRGNFSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxHMUNRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkRPMFZCUTNKRE96dEZRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMFZCUTBVc1RVRkJUU3hsUVVGbExFTkJRVU1zVFVGQlRTeEZRVUZGTzBsQlF6VkNMRTFCUVUwc1MwRkJTeXhIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVWQlFVVXNTMEZCU3l4RFFVRkRPenRKUVVWb1JUdEpRVU5CTEUxQlFVMHNaVUZCWlN4SFFVRkhMRWxCUVVFc1lVRkJUeXhGUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTTdTVUZETDBNc1RVRkJUU3hsUVVGbExFZEJRVWNzU1VGQlFTd3dRa0ZCYjBJc1JVRkJReXhsUVVGbExFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNRMEZCUXp0SlFVTnlSU3hKUVVGSkxHVkJRV1VzUjBGQlJ5eEpRVUZCTEcxQ1FVRlBMRVZCUVVNc1pVRkJaU3hEUVVGRE8wbEJRemxETEVsQlFVa3NaVUZCWlR0SlFVTnVRaXhKUVVGSk8wMUJRMFlzWlVGQlpTeEhRVUZITEUxQlFVMHNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhOUVVGTkxFTkJRVU03U1VGRGNFUXNRMEZCUXl4RFFVRkRMRTlCUVU4c1MwRkJTeXhGUVVGRk8wMUJRMlFzYVVKQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRE8wMUJRMllzWlVGQlpTeEhRVUZITzFGQlEyaENMRTFCUVUwc1JVRkJSU3hMUVVGTExFTkJRVU1zVDBGQlR6dFJRVU55UWl4UlFVRlJMRVZCUVVVc1MwRkJTeXhEUVVGRExGRkJRVkU3VVVGRGVFSXNTMEZCU3l4RlFVRkZPMVZCUVVVc1YwRkJWeXhGUVVGRkxFdEJRVXNzUTBGQlF5eE5RVUZOTzFWQlFVVXNZVUZCWVN4RlFVRkZMRXRCUVVzc1EwRkJRenRSUVVGVE8wMUJRM0JGTEVOQlFVTTdTVUZEU0R0SlFVVkJMRTlCUVU4N1RVRkRUQ3hoUVVGaExFVkJRVVVzUzBGQlN5eERRVUZETEZGQlFWRTdUVUZETjBJc1pVRkJaVHROUVVObU8wbEJRMFlzUTBGQlF6dEZRVU5JT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEUxQlFVMHNZVUZCWVN4RFFVRkRMRTFCUVUwc1JVRkJSVHRKUVVNeFFpeE5RVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkJMR2xDUVVGVExFVkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXpzN1NVRkZNME03U1VGRFFUdEpRVU5CTzBsQlEwRTdTVUZEUVR0SlFVTkJMRTlCUVU4c1VVRkJVU3hEUVVGRExGRkJRVkU3U1VGRGVFSXNUMEZCVHl4UlFVRlJMRU5CUVVNc1dVRkJXVHRKUVVNMVFpeFBRVUZQTEZGQlFWRXNRMEZCUXl4dlFrRkJiMEk3TzBsQlJYQkRPMGxCUTBFc1QwRkJUeXhOUVVGTkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRkZCUVZFc1EwRkJRenRGUVVNdlF6czdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNXVUZCV1N4RFFVRkRMR3RDUVVGclFpeEZRVUZGTEdkQ1FVRm5RaXhGUVVGRkxGVkJRVlVzUjBGQlJ5eEhRVUZITEVWQlFVVTdTVUZEYmtVc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4SlFVRkJMR0ZCUVU4c1JVRkJReXhyUWtGQmEwSXNRMEZCUXp0SlFVTnlSQ3hOUVVGTkxHVkJRV1VzUjBGQlJ5eEpRVUZCTEdGQlFVOHNSVUZCUXl4blFrRkJaMElzUTBGQlF6dEpRVU5xUkN4TlFVRk5MR1ZCUVdVc1IwRkJSeXhsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXp0SlFVTnFSQ3hOUVVGTkxHdENRVUZyUWl4SFFVRkhMR2xDUVVGcFFpeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNN08wbEJSVGRFTzBsQlEwRXNTVUZCU1N4cFFrRkJhVUlzUTBGQlF5eEZRVUZGTEVOQlFVTXNaVUZCWlN4RFFVRkRMRVZCUVVVN1RVRkRla01zVDBGQlR5eEpRVUZCTEcxQ1FVRlBMRVZCUVVNc2FVSkJRV2xDTEVOQlFVTTdTVUZEYmtNN1NVRkRRVHRKUVVOQkxFbEJRVWtzYTBKQlFXdENMRU5CUVVNc1JVRkJSU3hEUVVGRExHVkJRV1VzUTBGQlF5eEZRVUZGTzAxQlF6RkRMRTlCUVU4c1NVRkJRU3h0UWtGQlR5eEZRVUZETEd0Q1FVRnJRaXhEUVVGRE8wbEJRM0JETzBsQlEwRTdTVUZEUVN4UFFVRlBMRWxCUVVFc2JVSkJRVThzUlVGQlF5eGxRVUZsTEVOQlFVTTdSVUZEYWtNN1JVRkZRU3hOUVVGTkxHMUNRVUZ0UWl4RFFVRkRMRTFCUVUwc1JVRkJSU3hWUVVGVkxFVkJRVVU3U1VGRE5VTXNUVUZCVFR0TlFVRkZMR0ZCUVdFN1RVRkJSU3hsUVVGbE8wMUJRVVU3U1VGQlowSXNRMEZCUXl4SFFVTjJSQ3hOUVVGTkxFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNUVUZCVFN4RFFVRkRPMGxCUTNCRE8wbEJRMEVzVFVGQlRTeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkRhRU1zU1VGQlFTdzBRa0ZCV1N4RlFVRkRMR1ZCUVdVc1EwRkJReXhGUVVNM1FpeGhRVUZoTEVWQlEySXNWVUZEUml4RFFVRkRPMGxCUTBRc1QwRkJUenROUVVGRkxGRkJRVkU3VFVGQlJUdEpRVUZuUWl4RFFVRkRPMFZCUTNSRE8wRkJRMFk3UVVGQlF5eFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRk5CUVVFN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRka2hFTEVsQlFVRXNhVUpCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRk5CUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFRRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFBRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1UwRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1dVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEcxQ1FVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFJRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2MwSkJRVUVzUjBGQlFTeFBRVUZCTzBGQlMwRXNTVUZCUVN4TFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVsdlFpeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGRllpeE5RVUZOTEdkQ1FVRm5RaXhIUVVNelFpeDNSRUZCZDBRN1FVRkRNVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFWcEJMRTlCUVVFc1EwRkJRU3huUWtGQlFTeEhRVUZCTEdkQ1FVRkJPMEZCWVdVc1RVRkJUU3gxUWtGQmRVSXNVMEZCVXl4NVFrRkJXU3hEUVVGRE8wVkJRMmhGTEZkQlFWY3NRMEZCUXp0SlFVTldMRk5CUVZNN1NVRkRWQ3hqUVVGak8wbEJRMlFzV1VGQldUdEpRVU5hTEdkQ1FVRm5RanRKUVVOb1FqdEZRVU5HTEVOQlFVTXNSVUZCUlR0SlFVTkVMRXRCUVVzc1EwRkJReXhEUVVGRE8wbEJSVkFzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMSGxDUVVGbExFTkJRVU03VFVGREwwSXNXVUZCV1N4RlFVRkZMRU5CUVVNc1EwRkJRenROUVVOb1FpeEhRVUZITzBsQlEwd3NRMEZCUXl4RFFVRkRPMGxCUTBZc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eGpRVUZqTzBsQlEzQkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzV1VGQldUdEpRVU5vUXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NaMEpCUVdkQ08wbEJRM2hETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUjBGQlJ5eHBRa0ZCYVVJN1JVRkROVU03TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMR05CUVdNc1EwRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVTdTVUZCUVN4SlFVRkJMR05CUVVFN1NVRkRlRUlzVFVGQlRTeFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8wbEJRM0pETEUxQlFVMHNZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPMGxCUXpkRExFMUJRVTBzVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETzBsQlEzaERMRWxCUVVrc1lVRkJZU3hMUVVGTExITkNRVUZoTEVOQlFVTXNVMEZCVXl4RlFVRkZPMDFCUXpkRExFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNjMFJCUVhORUxFTkJRVU03U1VGRGVrVTdTVUZGUVN4SlFVRkpMRzlDUVVGdlFpeEhRVUZITEVsQlFVazdPMGxCUlM5Q08wbEJRMEU3U1VGRFFUdEpRVU5CTEVsQlEwVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkRZaXhQUVVGUExFbEJRVWtzUTBGQlF5eE5RVUZOTEV0QlFVc3NVVUZCVVN4SlFVTXZRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeExRVUZMTEc5Q1FVRmxMRVZCUXk5Q08wMUJRMEVzU1VGQlNTeFBRVUZQTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hMUVVGTExGZEJRVmNzUlVGQlJUdFJRVU5xUkN4dlFrRkJiMElzUjBGQlJ6dFZRVU55UWl4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dFJRVU14UWl4RFFVRkRPMDFCUTBnc1EwRkJReXhOUVVGTkxFbEJRMHdzVDBGQlR5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmxCUVZrc1MwRkJTeXhYUVVGWExFbEJRMnBFTEU5QlFVOHNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXh2UWtGQmIwSXNTMEZCU3l4WFFVRlhMRVZCUTNwRU8xRkJRMEVzYjBKQlFXOUNMRWRCUVVjN1ZVRkRja0lzYjBKQlFXOUNMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eHZRa0ZCYjBJN1ZVRkRlRVFzV1VGQldTeEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNN1VVRkRPVUlzUTBGQlF6dE5RVU5JTzAxQlJVRXNTVUZCU1N4UFFVRlBMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eExRVUZMTEZkQlFWY3NSVUZCUlR0UlFVTTFReXh2UWtGQmIwSXNSMEZCUnp0VlFVTnlRaXhIUVVGSExHOUNRVUZ2UWp0VlFVTjJRaXhIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXp0UlFVTnlRaXhEUVVGRE8wMUJRMGc3U1VGRFJqdEpRVVZCTEU5QlFVODdUVUZEVEN4RlFVRkZMRVZCUVVVc1NVRkJRU3hwUWtGQlVTeEZRVUZETEVOQlFVTTdUVUZEWkN4SlFVRkpMRVZCUVVVc1NVRkJTU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMDFCUXpGQ0xFMUJRVTBzUlVGQlJTdzRRa0ZCYVVJc1EwRkJReXhWUVVGVk8wMUJRM0JETEdsQ1FVRnBRaXhGUVVGRkxGTkJRVk03VFVGRE5VSXNiVUpCUVcxQ0xFZEJRVUVzWTBGQlFTeEhRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMR05CUVVFc1kwRkJRU3gxUWtGQllpeGpRVUZCTEVOQlFXVXNSMEZCUnp0TlFVTjJReXhyUWtGQmEwSXNSVUZCUlN4TFFVRkxPMDFCUTNwQ0xFOUJRVTg3VFVGRFVDeGxRVUZsTEVWQlFVVXNTVUZCU1R0TlFVTnlRaXh2UWtGQmIwSTdUVUZEY0VJc1pVRkJaU3hGUVVGRkxFVkJRVVU3VFVGRGJrSXNSMEZCUnp0SlFVTk1MRU5CUVVNN1JVRkRTRHM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzYlVKQlFXMUNMRU5CUVVFc1JVRkJSenRKUVVOd1FpeE5RVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXp0SlFVTjRReXhOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1NVRkRja01zVDBGQlR5eEpRVUZCTEdOQlFVMHNSVUZEV0N4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNXVUZCV1N4RlFVTnFReXhYUVVGWExFbEJRMVlzVjBGQlZ5eERRVUZETEUxQlFVMHNTMEZCU3l3NFFrRkJhVUlzUTBGQlF5eFZRVUZWTEVsQlEyNUVMRWxCUVVFc2RVTkJRWGxDTEVWQlFVTXNWMEZCVnl4RlFVRkZMRTlCUVU4c1JVRkJSU3hUUVVGVExFTkJRemRFTEVOQlFVTTdSVUZEU0RzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc2RVSkJRWFZDTEVOQlFVTXNUMEZCVHl4RlFVRkZPMGxCUXk5Q0xFMUJRVTBzWTBGQll5eEhRVUZITzAxQlFVVXNUVUZCVFN4RlFVRkZMRGhDUVVGcFFpeERRVUZETzBsQlFWTXNRMEZCUXp0SlFVTTNSQ3hKUVVGSkxFOUJRVThzUlVGQlJUdE5RVU5ZTEdOQlFXTXNRMEZCUXl4SlFVRkpMRWRCUVVjc1QwRkJUenRKUVVNdlFqdEpRVU5CTEU5QlFVOHNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJRenROUVVGRk8wbEJRV1VzUTBGQlF5eERRVUZETzBWQlEycEVPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRkRSU3h6UWtGQmMwSXNRMEZCUXl4UFFVRlBMRVZCUVVVN1NVRkRPVUlzVFVGQlRTeGpRVUZqTEVkQlFVYzdUVUZCUlN4TlFVRk5MRVZCUVVVc09FSkJRV2xDTEVOQlFVTTdTVUZCVlN4RFFVRkRPMGxCUXpsRUxFbEJRVWtzVDBGQlR5eEZRVUZGTzAxQlExZ3NZMEZCWXl4RFFVRkRMRWxCUVVrc1IwRkJSeXhQUVVGUE8wbEJReTlDTzBsQlEwRXNUMEZCVHl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRE8wMUJRVVU3U1VGQlpTeERRVUZETEVOQlFVTTdSVUZEYWtRN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxIZENRVUYzUWl4RFFVRkRMRTlCUVU4c1JVRkJSVHRKUVVOb1F5eE5RVUZOTEdOQlFXTXNSMEZCUnp0TlFVRkZMRTFCUVUwc1JVRkJSU3c0UWtGQmFVSXNRMEZCUXp0SlFVRlZMRU5CUVVNN1NVRkRPVVFzU1VGQlNTeFBRVUZQTEVWQlFVVTdUVUZEV0N4alFVRmpMRU5CUVVNc1NVRkJTU3hIUVVGSExFOUJRVTg3U1VGREwwSTdTVUZEUVN4UFFVRlBMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU03VFVGQlJUdEpRVUZsTEVOQlFVTXNRMEZCUXp0RlFVTnFSRHM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRkRSU3d3UWtGQk1FSXNRMEZCUXl4UlFVRlJMRVZCUVVVN1NVRkRia01zVDBGQlR5eEpRVUZCTEdOQlFVMHNSVUZEV0N4SlFVRkJMR05CUVUwc1JVRkRTaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1dVRkJXU3hGUVVOcVF5eFhRVUZYTEVsQlFVc3NWMEZCVnl4RFFVRkRMRkZCUVZFc1MwRkJTeXhSUVVNMVF5eERRVU5HTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1JVRkRUanM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNZMEZCWXl4RFFVRkRMRTFCUVUwc1JVRkJSVHRKUVVOeVFqdEpRVU5CTEVsQlFVa3NUVUZCVFN4RFFVRkRMRkZCUVZFc1JVRkJSVHROUVVOdVFpeE5RVUZOTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVFc2EwTkJRVFJDTEVWQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1JVRkJSU3hMUVVGTExFTkJRVU03U1VGRGVFVTdTVUZGUVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRkxFZEJRVVVzVFVGQlRTeERRVUZETEVWQlFVY3NVMEZCVVN4RlFVRkZMRTFCUVUwN1RVRkRja01zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRkxFZEJRVVVzVFVGQlRTeERRVUZETEVWQlFVY3NWMEZCVlN4RFFVRkRPMGxCUTJ4RUxFTkJRVU1zUTBGQlF6dEpRVU5HTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVVc1IwRkJSU3hOUVVGTkxFTkJRVU1zUlVGQlJ5eFhRVUZWTEVWQlFVVXNUVUZCVFR0TlFVTjJReXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVVc1IwRkJSU3hOUVVGTkxFTkJRVU1zUlVGQlJ5eFRRVUZSTEVOQlFVTTdTVUZEYUVRc1EwRkJReXhEUVVGRE8wbEJRMFk3U1VGRFFTeE5RVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhMRVZCUVVVN1NVRkRia0k3U1VGRFFTeE5RVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkJMSGxEUVVGclFpeEZRVUZETEUxQlFVMHNRMEZCUXp0SlFVTXpReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNN1NVRkZOMElzVFVGQlRTeFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJRenROUVVONFF5eHpRa0ZCYzBJc1JVRkJSVHRKUVVNeFFpeERRVUZETEVOQlFVTTdTVUZEUml4TlFVRk5PMDFCUVVVN1NVRkJaU3hEUVVGRExFZEJRVWNzU1VGQlNUczdTVUZGTDBJN1NVRkRRVHRKUVVOQk8wbEJRMEU3U1VGRFFUdEpRVU5CTzBsQlEwRTdTVUZEUVR0SlFVTkJPMGxCUTBFN1NVRkRRVHRKUVVOQk8wbEJRMEU3U1VGRFFUdEpRVU5CTEUxQlFVMHNaVUZCWlN4SFFVRkhMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRGFrTXNUVUZCVFN4WFFVRlhMRWRCUVVjc1dVRkJXU3hEUVVNM1FpeFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVTlVMRTFCUVUwc1EwRkJSU3hGUVVGRkxFbEJRVXM3VFVGRFpDeE5RVUZOTzFGQlFVVXNTMEZCU3p0UlFVRkZPMDFCUVVzc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eFJRVUZSTzAxQlEyNURMRTFCUVUwN1VVRkJSU3hQUVVGUE8xRkJRVVVzYVVKQlFXbENPMUZCUVVVN1RVRkJUeXhEUVVGRExFZEJRVWNzUlVGQlJUdE5RVU5xUkN4TlFVRk5MRWRCUVVjc1IwRkJTU3hIUVVGRkxFdEJRVTBzU1VGQlJ5eFBRVUZQTEVsQlFVa3NhVUpCUVd0Q0xFbEJRVWNzU1VGQlN5eEZRVUZETzAxQlF6bEVMRWxCUVVrc1pVRkJaU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlR0UlFVTTFRaXhQUVVGUExFdEJRVXM3VFVGRFpDeERRVUZETEUxQlFVMHNTVUZEVEN4bFFVRmxMRU5CUVVNc1NVRkJTU3hIUVVGSExHTkJRV01zUjBGQlJ5eERRVUZETEVsQlEzcERMRWxCUVVFc2IwSkJRV01zUlVGQlF5eERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFdEJRVXNzUlVGRE0wTTdVVUZEUVN4bFFVRmxMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF6dFJRVU40UWl4UFFVRlBMRXRCUVVzN1RVRkRaRHROUVVOQkxFOUJRVThzU1VGQlNUdEpRVU5pTEVOQlFVTXNRMEZCUXl4RFFVTkVMRWRCUVVjc1EwRkJSU3hGUVVGRkxFbEJRVXNzUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXp0SlFVVnlRaXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1YwRkJWeXhEUVVGRE8wbEJRM0pETEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMGxCUTNSRExFOUJRVThzVFVGQlRUdEZRVU5tTzBWQlJVRXNjMEpCUVhOQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTzBsQlFVRXNTVUZCUVN4blFrRkJRVHRKUVVNM1FpeE5RVUZOTEZkQlFWY3NSMEZCUnl4TlFVRk5MR0ZCUVU0c1RVRkJUU3gzUWtGQlFTeG5Ra0ZCUVN4SFFVRk9MRTFCUVUwc1EwRkJSU3hSUVVGUkxHTkJRVUVzWjBKQlFVRXNkVUpCUVdoQ0xHZENRVUZCTEVOQlFXdENMRWxCUVVrN1NVRkRNVU1zVFVGQlRTeHhRa0ZCY1VJc1IwRkJSeXhKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1YwRkJWeXhEUVVGRE8wbEJRM2hGTEUxQlFVMHNiVUpCUVcxQ0xFZEJRVWNzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExGZEJRVmNzUTBGQlF6dEpRVU53UlN4SlFVRkJMREJEUVVGdlF5eEZRVUZETzAxQlEyNURMRTFCUVUwN1RVRkRUaXh0UWtGQmJVSTdUVUZEYmtJN1NVRkRSaXhEUVVGRExFTkJRVU03U1VGRFJpeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVTjBReXhQUVVGUExFMUJRVTA3UlVGRFpqczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzWTBGQll5eERRVUZETEVsQlFVa3NSVUZCUlR0SlFVTnVRaXhOUVVGTk8wMUJRVVU3U1VGQllTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU01UXl4UFFVRlBMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU03UlVGRE0wSTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNhVUpCUVdsQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUlR0SlFVTTVRanRKUVVOQkxFbEJRVWtzVFVGQlRTeERRVUZETEZGQlFWRXNSVUZCUlR0TlFVTnVRaXhKUVVGSk8xRkJRMFlzVFVGQlRTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkJMR3REUVVFMFFpeEZRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRVZCUVVVc1MwRkJTeXhEUVVGRE8wMUJRM2hGTEVOQlFVTXNRMEZCUXl4UFFVRlBMRXRCUVVzc1JVRkJSVHRSUVVOa0xFbEJRVWtzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRXRCUVVzc1owSkJRV2RDTEVWQlFVVTdWVUZETDBNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eERRVUZETzFGQlF6RkRMRU5CUVVNc1RVRkJUVHRWUVVOTUxFMUJRVTBzUzBGQlN6dFJRVU5pTzFGQlJVRTdUVUZEUmp0SlFVTkdPMGxCUlVFc1NVRkJTU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMRTFCUVUwc1JVRkJSU3hKUVVGSkxFTkJRVU03UlVGRE9VTTdSVUZGUVN4NVFrRkJlVUlzUTBGQlF5eE5RVUZOTEVWQlFVVXNTVUZCU1N4RlFVRkZPMGxCUTNSRE8wbEJRMEVzVFVGQlRTeFpRVUZaTEVkQlFVY3NTVUZCUVN4NVEwRkJhMElzUlVGQlF5eE5RVUZOTEVOQlFVTTdTVUZETDBNN1NVRkRRU3hOUVVGTkxHRkJRV0VzUjBGQlJ5eEpRVUZCTEc5RFFVRmhMRVZCUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF6dEpRVU51UkR0SlFVTkJMRTFCUVUwc1MwRkJTeXhIUVVGSExFbEJRVUVzTWtOQlFXOUNMRVZCUVVNc1lVRkJZU3hGUVVGRkxGbEJRVmtzUlVGQlJTeEpRVUZKTEVOQlFVTTdTVUZEY2tVc1NVRkJTU3hMUVVGTExFTkJRVU1zVFVGQlRTeEZRVUZGTzAxQlEyaENMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0SlFVTTFRanM3U1VGRlFUdEpRVU5CTEUxQlFVMHNTVUZCU1N4SFFVRkhMRTFCUVUwc1EwRkJReXhGUVVGRk8wbEJRM1JDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRE8wMUJRM0pDTEZsQlFWa3NSVUZCUlR0UlFVTmFMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRmxCUVZrN1VVRkRja01zUTBGQlF5eEpRVUZKTEVkQlFVYzdUVUZEVmp0SlFVTkdMRU5CUVVNc1EwRkJRenRGUVVOS096dEZRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEZRVVZGTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEZRVVZGTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEdWQlFXVXNRMEZCUXp0SlFVTmtMR05CUVdNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRGJrSXNWMEZCVnp0SlFVTllMSE5DUVVGelFpeEhRVUZITEVsQlFVazdTVUZETjBJN1JVRkRSaXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVTdTVUZEVGl4TlFVRk5MRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenRKUVVONFF5eE5RVUZOTEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03U1VGRGNrTTdTVUZEUVR0SlFVTkJPMGxCUTBFN1NVRkRRVHRKUVVOQk8wbEJRMEVzVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhKUVVGQkxHbENRVUZUTEVWQlFVTXNZMEZCWXl4RlFVRkhMRk5CUVZNc1NVRkJTenROUVVOb1JTeFBRVUZQTEU5QlFVOHNVMEZCVXl4TFFVRkxMRlZCUVZVc1IwRkRiRU1zVTBGQlV5eEhRVU5TTEVOQlFVTXNTVUZCU3l4RFFVRkRMRXRCUVVzc1UwRkJVenRKUVVNMVFpeERRVUZETEVOQlFVTTdPMGxCUlVZN1NVRkRRVHRKUVVOQk8wbEJRMEU3U1VGRFFTeE5RVUZOTEc5Q1FVRnZRaXhIUVVGSExGZEJRVmNzUjBGRGNFTXNTVUZCUVN4aFFVRkxMRVZCUVVNc1YwRkJWeXhGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVU40UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNXVUZCV1RzN1NVRkZkRU03U1VGRFFUdEpRVU5CTEUxQlFVMHNiMEpCUVc5Q0xFZEJRVWNzU1VGQlFTeGpRVUZOTEVWQlEycERMRWxCUVVFc1kwRkJUU3hGUVVGRExHOUNRVUZ2UWl4RlFVRkhMRmRCUVZjc1NVRkJTenROUVVNMVF6dE5RVU5CTzAxQlEwRXNTVUZEUlN4elFrRkJjMElzU1VGRGRFSXNTVUZCUVN4MVEwRkJlVUlzUlVGQlF5eFhRVUZYTEVWQlFVVXNUMEZCVHl4RlFVRkZMRk5CUVZNc1EwRkJReXhMUVVGTExFdEJRVXNzUlVGRGNFVTdVVUZEUVN4UFFVRlBMRXRCUVVzN1RVRkRaRHROUVVOQk8wMUJRMEU3VFVGRFFTeExRVUZMTEUxQlFVMHNRMEZCUXl4SFFVRkhMRVZCUVVVc1UwRkJVeXhEUVVGRExFbEJRVWtzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4blFrRkJaMElzUTBGQlF5eEZRVUZGTzFGQlF5OUVPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFTeEpRVUZKTEVkQlFVY3NTVUZCU1N4WFFVRlhMRU5CUVVNc1VVRkJVU3hGUVVGRk8xVkJReTlDTEVsQlFVa3NVMEZCVXl4RFFVRkRMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTMEZCU3l4TFFVRkxMRVZCUVVVN1dVRkRiRVFzVDBGQlR5eExRVUZMTzFWQlEyUTdVVUZEUml4RFFVRkRMRTFCUVUwc1NVRkJTU3hUUVVGVExFTkJRVU1zVjBGQlZ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRXRCUVVzc1MwRkJTeXhGUVVGRk8xVkJRMmhFTEU5QlFVOHNTMEZCU3p0UlFVTmtPMDFCUTBZN1RVRkZRU3hQUVVGUExFbEJRVWs3U1VGRFlpeERRVUZETEVOQlFVTXNSVUZEUml4TlFVTkdMRU5CUVVNN1NVRkRSQ3hKUVVGSkxFdEJRVXNzUzBGQlN5eFRRVUZUTEVWQlFVVTdUVUZEZGtJN1RVRkRRVHROUVVOQk8wMUJRMEU3VFVGRFFTeE5RVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRE8wMUJRM2hDTEUxQlFVMHNSMEZCUnl4SFFVRkhMRVZCUVVVN1RVRkRaRHROUVVOQk8wMUJRMEU3VFVGRFFUdE5RVU5CTzAxQlEwRXNTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXh2UWtGQmIwSXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRSUVVONlJDeE5RVUZOTEUxQlFVMHNSMEZCUnl4dlFrRkJiMElzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZEVNc1RVRkJUVHRWUVVGRk8xRkJRVTBzUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl4UlFVRlJPMUZCUTJwRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRk8xVkJRM1JDTEVsQlFVa3NUVUZCVFN4RFFVRkRMRWxCUVVrc1IwRkJSeXhMUVVGTExFVkJRVVU3V1VGRGRrSXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU03VlVGRGJrSXNRMEZCUXl4TlFVRk5PMWxCUTB3N1ZVRkRSanRSUVVOR08xRkJRMEU3VVVGRFFUdFJRVU5CTEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRE8wMUJRM0pDTzAxQlEwRXNUMEZCVHl4SFFVRkhPMGxCUTFvN1NVRkRRU3hQUVVGUExHOUNRVUZ2UWp0RlFVTTNRanM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEcxQ1FVRnRRaXhEUVVGRExFbEJRVWtzUlVGQlJUdEpRVU40UWl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRGhDUVVGcFFpeERRVUZETEZGQlFWRXNRMEZCUXp0SlFVTTFSQ3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1NVRkJTU3hEUVVGRE8wVkJReTlDT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeHhRa0ZCY1VJc1EwRkJReXhKUVVGSkxFVkJRVVU3U1VGRE1VSXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVsQlFVa3NSVUZCUlN3NFFrRkJhVUlzUTBGQlF5eFZRVUZWTEVOQlFVTTdSVUZEYUVVN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRzFDUVVGdFFpeERRVUZETEVsQlFVa3NSVUZCUlR0SlFVTjRRaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1NVRkJTU3hGUVVGRkxEaENRVUZwUWl4RFFVRkRMRkZCUVZFc1EwRkJRenRGUVVNNVJEczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hGUVVGRk8wbEJRM1JDTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEpRVUZKTEVWQlFVVXNPRUpCUVdsQ0xFTkJRVU1zVFVGQlRTeERRVUZETzBWQlF6VkVPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRzlDUVVGdlFpeERRVUZETEVsQlFVa3NSVUZCUlR0SlFVTjZRaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJRenRKUVVONFF5eE5RVUZOTEVOQlFVTXNZVUZCWVN4SFFVRkhMRWxCUVVrc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0SlFVTXpReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1RVRkJUU3hGUVVGRkxESkRRVUV5UXl4RFFVRkRPMGxCUXpORkxFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhKUVVGSkxFVkJRVVVzT0VKQlFXbENMRU5CUVVNc1UwRkJVeXhEUVVGRE8wVkJReTlFT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeHZRa0ZCYjBJc1EwRkJReXhKUVVGSkxFVkJRVVU3U1VGRGVrSXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVsQlFVa3NSVUZCUlN3NFFrRkJhVUlzUTBGQlF5eFRRVUZUTEVOQlFVTTdSVUZETDBRN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMR3RDUVVGclFpeERRVUZETEVsQlFVa3NSVUZCUlR0SlFVTjJRaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1NVRkJTU3hGUVVGRkxEaENRVUZwUWl4RFFVRkRMRTlCUVU4c1EwRkJRenRGUVVNM1JEczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEdsQ1FVRnBRaXhEUVVGRExFbEJRVWtzUlVGQlJTeEhRVUZITEVWQlFVVTdTVUZCUVN4SlFVRkJMR05CUVVFN1NVRkRNMElzVFVGQlRTeExRVUZMTEVkQlFVY3NSMEZCUnl4SlFVRkpMRWxCUVVrc1MwRkJTeXhEUVVGRExESkNRVUV5UWl4RFFVRkRPMGxCUlRORUxFMUJRVTBzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRE8wbEJRM2hETEUxQlFVMHNRMEZCUXl4SFFVRkhMRWRCUVVjN1RVRkRXQ3hQUVVGUExFVkJRVVVzUlVGQlFTeGpRVUZCTEVkQlFVRXNTMEZCU3l4RFFVRkRMRTlCUVU4c1kwRkJRU3hqUVVGQkxIVkNRVUZpTEdOQlFVRXNRMEZCWlN4UlFVRlJMRU5CUVVNc1EwRkJReXhMUVVGSkxFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0TlFVTjBSQ3hIUVVGSExFVkJRVVVzUzBGQlN5eERRVUZETEV0QlFVczdUVUZEYUVJc1MwRkJTeXhGUVVGRkxFdEJRVXNzUTBGQlF6dEpRVU5tTEVOQlFVTTdTVUZEUkN4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlF6VkNMRTFCUVUwc1JVRkRUaXhuUkVGRFJpeERRVUZETzBsQlJVUXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVsQlFVa3NSVUZCUlN3NFFrRkJhVUlzUTBGQlF5eE5RVUZOTEVOQlFVTTdSVUZETlVRN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc1owSkJRV2RDTEVOQlFVTXNUMEZCVHl4RlFVRkZPMGxCUTNoQ08wbEJRMEVzVFVGQlRUdE5RVUZGTzBsQlFXRXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdTVUZET1VNc1RVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03U1VGRGVFTXNUVUZCVFN4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZET3p0SlFVVnlRenRKUVVOQkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPMDFCUTNKQ0xGbEJRVmtzUlVGQlJTeEpRVUZCTEdOQlFVMHNSVUZEYkVJc1dVRkJXU3hGUVVOWUxGZEJRVmNzU1VGRFZpeFhRVUZYTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1MwRkJTeXhQUVVGUExFbEJRM0pETEVsQlFVRXNkVU5CUVhsQ0xFVkJRVU1zVjBGQlZ5eEZRVUZGTEU5QlFVOHNSVUZCUlN4VFFVRlRMRU5CUXpkRU8wbEJRMFlzUTBGQlF5eERRVUZETzBWQlEwbzdPMFZCUlVFN1FVRkRSanRCUVVOQk8wVkJRMFVzYTBKQlFXdENMRU5CUVVFc1JVRkJSenRKUVVOdVFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenROUVVOeVFpeFpRVUZaTEVWQlFVVXNTVUZCUVN4alFVRk5MRVZCUTJ4Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhaUVVGWkxFVkJRMnBETEZkQlFWY3NTVUZCU3l4WFFVRlhMRU5CUVVNc1RVRkJUU3hMUVVGTExEaENRVUZwUWl4RFFVRkRMRlZCUXpWRU8wbEJRMFlzUTBGQlF5eERRVUZETzBWQlEwbzdPMFZCUlVFN1JVRkRRVHRGUVVOQk96dEZRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc2NVSkJRWEZDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTFCUVUwc1JVRkJSVHRKUVVOc1F5eE5RVUZOTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF6dEpRVVY0UXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wMUJRMWc3U1VGRFJqdEpRVVZCTEUxQlFVMHNRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUVHRKUVVOMFFpeEpRVUZKTzAxQlEwWXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeERRVU0xUWl4TlFVRk5MRVZCUTB3c2NVTkJRVzlETEUxQlFVOHNSVUZET1VNc1EwRkJRenROUVVORUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVVXNSMEZCUlN4TlFVRk5MRU5CUVVNc1JVRkJSeXhKUVVGSExFMUJRVThzUlVGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXp0TlFVTjZReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZGTEd0Q1FVRnBRaXhGUVVGRkxFbEJRVWtzUlVGQlJTeE5RVUZOTEVOQlFVTTdUVUZETTBNc1NVRkRSU3hEUVVORkxEaENRVUZwUWl4RFFVRkRMRk5CUVZNc1JVRkRNMElzT0VKQlFXbENMRU5CUVVNc1VVRkJVU3hGUVVNeFFpdzRRa0ZCYVVJc1EwRkJReXhOUVVGTkxFTkJRM3BDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVOc1FqdFJRVU5CTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVVc1IwRkJSU3hOUVVGTkxFTkJRVU1zUlVGQlJ5eFhRVUZWTEVWQlFVVXNUVUZCVFN4RFFVRkRPMDFCUXpWRE8wMUJRMEVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl3NFEwRkJNRUlzUTBGQlF5eFpRVUZaTEVOQlFVTTdTVUZEY0VRc1EwRkJReXhEUVVGRExFOUJRVThzUzBGQlN5eEZRVUZGTzAxQlEyUXNhVUpCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETzBsQlEyeENPMFZCUTBZN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRkRSU3gxUWtGQmRVSXNRMEZCUXl4WlFVRlpMRVZCUVVVN1NVRkRjRU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNN1RVRkRja0lzV1VGQldTeEZRVUZGTEZsQlFWa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhOUVVGTkxFVkJRVVVzUzBGQlN5eExRVUZMTzFGQlEyNUVMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NTMEZCU3p0UlFVTjRRaXhQUVVGUExFMUJRVTA3VFVGRFppeERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEZsQlFWazdTVUZEZGtNc1EwRkJReXhEUVVGRE8wVkJRMG83TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzYTBKQlFXdENMRU5CUVVNc2JVSkJRVzFDTEVWQlFVVTdTVUZEZEVNc1RVRkJUVHROUVVGRk8wbEJRV0VzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03U1VGRE9VTXNUMEZCVHl4WlFVRlpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTTdTVUZEZUVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFhRVUZYTEVOQlFVTTdUVUZEY2tJN1NVRkRSaXhEUVVGRExFTkJRVU03UlVGRFNqczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeHRRa0ZCYlVJc1EwRkJReXh2UWtGQmIwSXNSVUZCUlR0SlFVTjRReXhOUVVGTk8wMUJRVVU3U1VGQllTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU01UXl4dlFrRkJiMElzUTBGQlF5eFBRVUZQTEVOQlFVVXNZVUZCWVN4SlFVRkxPMDFCUXpsRExFOUJRVThzV1VGQldTeERRVUZETEdGQlFXRXNRMEZCUXp0SlFVTndReXhEUVVGRExFTkJRVU03U1VGRFJpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenROUVVOeVFqdEpRVU5HTEVOQlFVTXNRMEZCUXp0RlFVTktPMEZCUTBZN1FVRkJReXhQUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEhWQ1FVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNCMVFrUXNTVUZCUVN4eFFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1NVRkJRU3hIUVVGQkxFOUJRVUU3UVVGTlFTeEpRVUZCTEV0QlFVRXNSMEZCUVN4UFFVRkJPMEZCUVhsRExGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRCUVdSNlF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJWMEVzVFVGQlRTeFpRVUZaTEVkQlFVY3NWMEZCVnp0QlFVVm9ReXhOUVVGTkxGZEJRVmNzUjBGQlJ5eERRVUZCTEV0QlEyeENMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zTWtSQlFUSkVMRU5CUVVNN08wRkJSVE5GTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOUExFMUJRVTBzYVVKQlFXbENMRWRCUVVrc1QwRkJUeXhKUVVGTE8wVkJRelZETEVsQlFVa3NUMEZCVHl4TFFVRkxMRmxCUVZrc1JVRkJSVHRKUVVNMVFpeFhRVUZYTEVOQlFVTXNRMEZCUXp0RlFVTm1PMEZCUTBZc1EwRkJRenM3UVVGRlJEdEJRVU5CTzBGQlEwRTdRVUZHUVN4UFFVRkJMRU5CUVVFc2FVSkJRVUVzUjBGQlFTeHBRa0ZCUVR0QlFVZFBMRTFCUVUwc0swSkJRU3RDTEVkQlFVY3NUVUZCUVN4RFFVRkJMRXRCUVZrN1JVRkRla1FzU1VGQlNTeEpRVUZCTEdsQ1FVRlhMRVZCUVVNc1EwRkJReXhMUVVGTExHOUNRVUZsTEVsQlFVa3NTVUZCUVN4cFFrRkJWeXhGUVVGRExFTkJRVU1zUzBGQlN5eHhRa0ZCWjBJc1JVRkJSVHRKUVVNelJUdEZRVU5HTzBWQlEwRXNUVUZCVFN4UlFVRlJMRWRCUTFvc1NVRkJRU3hwUWtGQlZ5eEZRVUZETEVOQlFVTXNTMEZCU3l4dlFrRkJaU3hIUVVGSExIRkNRVUZuUWl4SFFVRkhMSE5DUVVGcFFqdEZRVVV4UlN4TlFVRk5MRk5CUVZNc1IwRkJSeXcyUWtGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZPMFZCUlhCRExFdEJRVXNzVFVGQlRTeEZRVUZGTEVsQlFVa3NVVUZCVVN4RlFVRkZPMGxCUTNwQ0xFbEJRVWtzUlVGQlJTeExRVUZMTEZOQlFWTXNSVUZCUlR0TlFVTndRaXhKUVVGSk8xRkJRMFlzVFVGQlRTdzJRa0ZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhYUVVGWExFTkJRVU1zUlVGQlJTeEZRVUZGTEZsQlFWa3NRMEZCUXp0TlFVTnlSQ3hEUVVGRExFTkJRVU1zVDBGQlR5eExRVUZMTEVWQlFVVTdVVUZEWkR0TlFVRkJPMGxCUlVvN1JVRkRSanRCUVVOR0xFTkJRVU03UVVGQlF5eFBRVUZCTEVOQlFVRXNLMEpCUVVFc1IwRkJRU3dyUWtGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU4wUkVZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hOUVVGTkxGbEJRVmtzUjBGQlJ6dEZRVU51UWl4TlFVRk5MRVZCUVVVc1EwRkJRenRCUVVOWUxFTkJRVU03UVVGQlF5eEpRVUZCTEZGQlFVRXNSMEZEWVN4WlFVRlpPMEZCUVVFc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeFJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlExb3pRaXhKUVVGQkxGTkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4bFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVFclJDeFRRVUZCTEdkQ1FVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzUzBGQlFTeEpRVUZCTEVkQlFVRXNSMEZCUVN4alFVRkJMRU5CUVVFc1IwRkJRU3hQUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeEpRVUZCTEV0QlFVRXNSVUZCUVN4TFFVRkJMRVZCUVVFc1ZVRkJRU3hSUVVGQkxGbEJRVUVzVVVGQlFTeFJRVUZCTEc5Q1FVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUzBGQlFTeFhRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMR1ZCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzUjBGQlFTeFpRVUZCTEVOQlFVRXNSMEZCUVN3eVFrRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzWVVGQlFTeExRVUZCTEVWQlFVRXNTVUZCUVN4bFFVRkJMRXRCUVVFc2FVSkJRVUVzUzBGQlFTeHJRa0ZCUVN4TFFVRkJMRTFCUVVFc1NVRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeE5RVUZCTEVOQlFVRXNWMEZCUVN4UFFVRkJMRWxCUVVFc1MwRkJRU3hUUVVGQkxGRkJRVUVzUjBGQlFTeEhRVUZCTEVsQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQkxFbEJRVUVzTWtKQlFVRXNSMEZCUVN4elFrRkJRU3hIUVVGQkxGbEJRVUVzVTBGQlFTdzBSRUZCUVN4SlFVRkJMR2RDUVVGQkxFMUJRVUVzUjBGQlFTeE5RVUZCTEVWQlFVRXNTMEZCUVR0QlFVVXZSRHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTmxMRTFCUVUwc2VVSkJRWGxDTEZOQlFWTXNlVUpCUVdVc1EwRkJRenRGUVZkeVJUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNWMEZCVnl4RFFVRkRPMGxCUVVVc1RVRkJUVHRKUVVGRkxHMUNRVUZ0UWp0SlFVRkZMRXRCUVVzN1NVRkJSVHRGUVVGUkxFTkJRVU1zUlVGQlJUdEpRVU16UkN4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRE8wbEJkRUprTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3U1VGUVJTeGxRVUZCTEdsQ1FWRlRMRU5CUVVNc1EwRkJRenRKUVdWVUxFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NUMEZCVHp0SlFVTjBRaXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRWRCUVVjc2JVSkJRVzFDTzBsQlF6bERMRWxCUVVrc1RVRkJUU3hGUVVGRk8wMUJRMVlzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4TlFVRk5MRU5CUVVNN1NVRkRPVUk3UlVGRFJqczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNaVUZCWlN4RFFVRkRMRTFCUVUwc1JVRkJSVHRKUVVOMFFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwN1NVRkRjRUlzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03U1VGRGVrSXNTMEZCU3l4TlFVRk5MRWRCUVVjc1NVRkJTU3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZPMDFCUTNKRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVN1VVRkRhRUlzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUlN4alFVRmhMRWRCUVVrc1IwRkJSU3hEUVVGRE8wMUJRM1pETzAxQlEwRXNUVUZCVFN4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF6dE5RVU42UWl4SlFVRkpMRXRCUVVzc1EwRkJReXhUUVVGVExFVkJRVVU3VVVGRGJrSXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlJTeExRVUZMTEVsQlFVczdWVUZETDBJc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF6dFpRVUZGTEVOQlFVTXNSMEZCUnl4SFFVRkhPMVZCUVUwc1EwRkJReXhEUVVGRE8xRkJRM0JETEVOQlFVTXNRMEZCUXp0TlFVTktMRU5CUVVNc1RVRkJUVHRSUVVOTUxFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhUUVVGVExFTkJReTlDTEVkQlFVVXNTMEZCU3l4RFFVRkRMRWxCUVVzc1kwRkJZU3hGUVVNeFFpeExRVUZMTEVsQlFVczdWVUZEVkN4SlFVRkpMRmxCUVZrc1IwRkJSeXhMUVVGTE8xVkJRM2hDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJSVHRaUVVOb1FpeFpRVUZaTEVkQlFVY3NTVUZCUVN4clEwRkJhMElzUlVGQlF5eExRVUZMTEVWQlFVVXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF6dFZRVU5vUlR0VlFVTkJMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU03V1VGQlJTeERRVUZETEVkQlFVY3NSMEZCUnp0VlFVRmhMRU5CUVVNc1EwRkJRenRSUVVNelF5eERRVU5HTEVOQlFVTTdUVUZEU0R0SlFVTkdPMFZCUTBZN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc1dVRkJXU3hEUVVGQkxFVkJRVWM3U1VGRFlpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSVHROUVVOb1FpeFBRVUZQTEVOQlFVTXNRMEZCUXp0SlFVTllPMGxCUTBFc1NVRkJTU3hUUVVGVExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlEyeENMRXRCUVVzc1RVRkJUU3hIUVVGSExFbEJRVWtzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVU3VFVGRE1VTXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTTdUVUZEYmtNc1RVRkJUU3hMUVVGTExFZEJRVWNzVlVGQlZTeERRVUZETEZGQlFWRXNSMEZETjBJc1ZVRkJWU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVkQlEzSkNMRlZCUVZVc1EwRkJReXhMUVVGTE8wMUJRM0JDTEZOQlFWTXNSMEZCUnp0UlFVRkZMRWRCUVVjc1UwRkJVenRSUVVGRkxFZEJRVWM3VFVGQlRTeERRVUZETzBsQlEzaERPMGxCUTBFc1QwRkJUeXhUUVVGVE8wVkJRMnhDTzBGQlEwWTdRVUZCUXl4UFFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxIbENRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzaEdSQ3hKUVVGQkxGTkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkZRU3hKUVVGQkxGTkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4TFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRFJDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hSUVVGQkxFZEJRVUVzVDBGQlFUdEJRVXRCTEVsQlFVRXNWMEZCUVN4SFFVRkJMRTlCUVVFN1FVRlhRU3hKUVVGQkxFdEJRVUVzUjBGQlFTeFBRVUZCTzBGQlFXbEVMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFXcERha1E3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVFMFFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFpTeE5RVUZOTEdOQlFXTXNRMEZCUXp0RlFVTnNRenRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRmRCUVZjc1EwRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVTdTVUZEY2tJc1RVRkJUU3hUUVVGVExFZEJRVWM3VFVGRGFFSXNVVUZCVVN4RlFVRkZMRU5CUVVNc1EwRkJRenROUVVOYUxHOUNRVUZ2UWl4RlFVRkZPMGxCUTNoQ0xFTkJRVU03U1VGRFJDeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc2VVSkJRV1VzUTBGQlF6dE5RVUZGTEVkQlFVY3NVMEZCVXp0TlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJRVlVzUTBGQlF5eERRVUZETzBsQlJYSkZMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzVFVGQlRUdE5RVU4wUWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF5eFRRVUZUTEVOQlFVTTdTVUZEYmtNc1EwRkJRenRKUVVWRUxFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFN1NVRkRPVUlzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4SlFVRkJMR0ZCUVVrc1JVRkJReXhKUVVGSkxHbENRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wbEJRMmhFTEVsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRExGbEJRVms3U1VGRGRFTTdTVUZEUVN4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVkQlFVY3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6dEpRVU12UkN4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVY3NWMEZCVnl4SlFVRkxPMDFCUTJwRUxFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1IwRkJSeXhYUVVGWE8wbEJRM2hETEVOQlFVTXNRMEZCUXp0SlFVTkdPMGxCUTBFc1NVRkJTU3hEUVVGRExHVkJRV1VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRGRFUXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEVsQlFVa3NRMEZCUXl4cFFrRkJhVUk3U1VGREwwTXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeEhRVUZITEVsQlFVa3NRMEZCUXl4dlFrRkJiMEk3U1VGRGNrUXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeEhRVUZITEVsQlFVa3NRMEZCUXl4eFFrRkJjVUk3U1VGRGRrUXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeEhRVUZITEVsQlFVa3NRMEZCUXl4dlFrRkJiMEk3U1VGRmNrUXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUTNaRExFbEJRVUVzTmtKQlFYVkNMRVZCUVVNc1QwRkJUeXhUUVVGVExFVkJRVVVzVTBGQlV5eExRVUZMTzAxQlEzUkVMRTFCUVUwN1VVRkJSU3h0UWtGQmJVSXNSVUZCUlR0TlFVRjNRaXhEUVVGRExFZEJRVWNzVTBGQlV6dE5RVU5zUlN4TlFVRk5PMUZCUVVVc2JVSkJRVzFDTEVWQlFVVTdUVUZCZDBJc1EwRkJReXhIUVVGSExGTkJRVk03VFVGRGJFVXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeEpRVUZKTEhWQ1FVRjFRaXhGUVVGRk8xRkJRM1pFTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRenROUVVONFFqdEpRVU5HTEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJReTlETEVOQlFVTTdTVUZGUkN4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkRlRU1zU1VGQlFTdzJRa0ZCZFVJc1JVRkJReXhQUVVGUExGTkJRVk1zUlVGQlJTeFRRVUZUTEV0QlFVczdUVUZEZEVRc1RVRkJUVHRSUVVGRkxHVkJRV1VzUlVGQlJUdE5RVUZ2UWl4RFFVRkRMRWRCUVVjc1UwRkJVenROUVVNeFJDeE5RVUZOTzFGQlEwb3NaVUZCWlN4RlFVRkZMRzFDUVVGdFFqdFJRVU53UXp0TlFVTkdMRU5CUVVNc1IwRkJSeXhUUVVGVE8wMUJRMklzU1VGRFJTeHRRa0ZCYlVJc1MwRkJTeXh0UWtGQmJVSXNTVUZETTBNc1EwRkJReXcyUWtGQk5rSXNSVUZET1VJN1VVRkRRU3hKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdUVUZEZUVJN1NVRkRSaXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVTXZReXhEUVVGRE8wbEJRMFFzU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4SlFVRkpMSFZDUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXp0RlFVTjRSRHRGUVVWQkxFdEJRVXNzUTBGQlFTeEZRVUZITzBsQlEwNDdTVUZEUVN4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExHTkJRV01zUTBGQlF5eFJRVUZSTEVWQlFVVXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJRenRKUVVOcVJUdEpRVU5CTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1YwRkJWeXhEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRPMGxCUXpsRU8wbEJRMEVzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMFZCUTNoQ08wVkJSVUVzU1VGQlNTeERRVUZCTEVWQlFVYzdTVUZEVER0SlFVTkJMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zWTBGQll5eERRVUZETEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRE8wVkJRMjVGT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc2FVSkJRV2xDTEVOQlFVTXNVMEZCVXl4RlFVRkZPMGxCUXpOQ0xFMUJRVTA3VFVGQlJUdEpRVUZUTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlF6RkRMRTFCUVUwc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMGxCUlhCRExFMUJRVTBzWVVGQllTeEhRVUZITEVWQlFVVTdTVUZEZUVJc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlJTeFJRVUZSTEVsQlFVczdUVUZET1VJc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVN1VVRkRPVUlzWVVGQllTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNN1RVRkRPVUk3U1VGRFJpeERRVUZETEVOQlFVTTdTVUZGUml4TlFVRk5MR2RDUVVGblFpeEhRVUZITEVWQlFVVTdTVUZETTBJc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlJTeExRVUZMTEVsQlFVczdUVUZEZUVJc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1VVRkRPVUlzWjBKQlFXZENMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dE5RVU01UWp0SlFVTkdMRU5CUVVNc1EwRkJRenRKUVVWR0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNZVUZCWVN4RFFVRkRPMGxCUXk5Q0xFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU03UlVGRGRFTTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNWMEZCVnl4RFFVRkRMRk5CUVZNc1JVRkJSVHRKUVVOeVFpeE5RVUZOTzAxQlFVVTdTVUZCVXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTXhRenRKUVVOQkxGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVVXNUMEZCVHl4SlFVRkxPMDFCUXpkQ0xGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRlRUlzUTBGQlF5eERRVUZETzBsQlEwWTdTVUZEUVN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF6dE5RVUZGTzBsQlFWTXNRMEZCUXl4RFFVRkRPMGxCUTNCRE8wbEJRMEVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUlVGQlJUdE5RVU0zUWp0SlFVTkdPMGxCUTBFc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETzBWQlEzaENPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4aFFVRmhMRU5CUVVNc1UwRkJVeXhGUVVGRk8wbEJRM1pDTEUxQlFVMDdUVUZCUlR0SlFVRlRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMGxCUXpGRE8wbEJRMEVzVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUlN4UFFVRlBMRWxCUVVzN1RVRkROMElzVDBGQlR5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRPMGxCUXpGQ0xFTkJRVU1zUTBGQlF6dEpRVU5HTzBsQlEwRXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU03VFVGQlJUdEpRVUZUTEVOQlFVTXNRMEZCUXp0RlFVTjBRenM3UlVGRlFUdEJRVU5HTzBGQlEwRTdPMFZCUlVVc1lVRkJZU3hEUVVGQkxFVkJRVWM3U1VGRFpDeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenROUVVGRkxGRkJRVkVzUlVGQlJTeERRVUZETzBsQlFVVXNRMEZCUXl4RFFVRkRPMFZCUXpGRE96dEZRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeE5RVUZOTEdWQlFXVXNRMEZCUXl4WFFVRlhMRVZCUVVVN1NVRkRha01zU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhIUVVGSExGZEJRVmM3TzBsQlJYUkRPMGxCUTBFc1RVRkJUU3haUVVGWkxFZEJRVWNzVFVGQlRTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZkQlFWY3NSVUZCUlN4TFFVRkxMRU5CUVVNN1NVRkRNMFVzU1VGQlNTeERRVUZETEZsQlFWa3NSVUZCUlR0TlFVTnFRanRKUVVOR08wbEJRMEVzVFVGQlRTeHZRa0ZCYjBJc1IwRkJSeXhaUVVGWkxFTkJRVU1zVVVGQlVUdEpRVU5zUkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF6dE5RVUZGTzBsQlFYRkNMRU5CUVVNc1EwRkJRenRKUVVWb1JDeEpRVUZKTzAxQlEwWXNUVUZCVFN4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU03U1VGRE9VSXNRMEZCUXl4RFFVRkRMRTlCUVU4c1IwRkJSeXhGUVVGRk8wMUJRMW9zYVVKQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRE8wbEJRMmhDTzBWQlEwWTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNUVUZCVFN4bFFVRmxMRU5CUVVFc1JVRkJSenRKUVVOMFFpeE5RVUZOTzAxQlFVVTdTVUZCYjBJc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdTVUZETVVVc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RlFVRkZPMDFCUTNoQ08wbEJRMFk3U1VGRFFTeE5RVUZOTzAxQlFVVTdTVUZCT0VJc1EwRkJReXhIUVVOeVF5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMGxCUlRkRExFbEJRVWtzVTBGQlV5eEhRVUZITEVWQlFVVTdTVUZEYkVJc1NVRkJTU3cyUWtGQk5rSXNSVUZCUlR0TlFVTnFReXhOUVVGTk8xRkJRVVU3VFVGQlV5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dE5RVVV4UXl4VFFVRlRMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTTdTVUZEYmtNc1EwRkJReXhOUVVGTk8wMUJRMHdzVFVGQlRTeGxRVUZsTEVkQlFVY3NTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03VFVGRmRrVXNVMEZCVXl4SFFVRkhMRU5CUVVNc1pVRkJaU3hEUVVGRE8wbEJReTlDTzBsQlJVRXNUVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1NVRkRlRU1zVFVGQlRTeFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVOQlFVTTdTVUZETjBNc1RVRkJUU3hOUVVGTkxFZEJRVWNzZFVKQlFYVkNPMGxCUlhSRExFbEJRVWtzVTBGQlV5eExRVUZMTERCQ1FVRnBRaXhKUVVGSkxGTkJRVk1zUzBGQlN5eE5RVUZOTEVWQlFVVTdUVUZETTBRc1RVRkJUU3hQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOc1JTeERRVUZETEUxQlFVMDdUVUZEVEN4UlFVRlJMRTlCUVU4N1VVRkRZaXhMUVVGTExHdENRVUZUTEVOQlFVTXNUMEZCVHp0VlFVTndRaXhOUVVGTkxFbEJRVWtzUTBGQlF5eG5RMEZCWjBNc1EwRkRla01zVTBGQlV5eEZRVU5VTEhkRFFVTkdMRU5CUVVNN1ZVRkRSRHRSUVVWR0xFdEJRVXNzYTBKQlFWTXNRMEZCUXl4TlFVRk5PMVZCUTI1Q0xFMUJRVTBzU1VGQlNTeERRVUZETEdkRFFVRm5ReXhEUVVONlF5eFRRVUZUTEVWQlExUXNLME5CUTBZc1EwRkJRenRWUVVORU8xRkJSVVlzUzBGQlN5eHJRa0ZCVXl4RFFVRkRMRTlCUVU4N1ZVRkRjRUlzVFVGQlRTeEpRVUZKTEVOQlFVTXNaME5CUVdkRExFTkJRM3BETEZOQlFWTXNSVUZEVkN4blJFRkRSaXhEUVVGRE8xVkJRMFE3VVVGRlJpeExRVUZMTEd0Q1FVRlRMRU5CUVVNc1IwRkJSenRWUVVOb1FpeE5RVUZOTEVsQlFVa3NRMEZCUXl4blEwRkJaME1zUTBGRGVrTXNVMEZCVXl4RlFVTlVMRFJEUVVOR0xFTkJRVU03VlVGRFJEdFJRVVZHTEV0QlFVc3NhMEpCUVZNc1EwRkJReXhSUVVGUk8xVkJRM0pDTEUxQlFVMHNTVUZCU1N4RFFVRkRMR2REUVVGblF5eERRVU42UXl4VFFVRlRMRVZCUTFRc2FVUkJRMFlzUTBGQlF6dFZRVU5FTzFGQlJVWXNTMEZCU3l4clFrRkJVeXhEUVVGRExFOUJRVTg3VlVGRGNFSXNUVUZCVFN4SlFVRkpMRU5CUVVNc1owTkJRV2RETEVOQlEzcERMRk5CUVZNc1JVRkRWQ3huUkVGRFJpeERRVUZETzFWQlEwUTdVVUZGUml4TFFVRkxMR3RDUVVGVExFTkJRVU1zVTBGQlV6dFZRVU4wUWl4TlFVRk5MRWxCUVVrc1EwRkJReXhuUTBGQlowTXNRMEZEZWtNc1UwRkJVeXhGUVVOVUxHdEVRVU5HTEVOQlFVTTdWVUZEUkR0UlFVVkdMRXRCUVVzc2EwSkJRVk1zUTBGQlF5eE5RVUZOTzFWQlEyNUNMRTFCUVUwc1NVRkJTU3hEUVVGRExHZERRVUZuUXl4RFFVTjZReXhUUVVGVExFVkJRMVFzSzBOQlEwWXNRMEZCUXp0VlFVTkVPMUZCUlVZc1MwRkJTeXhyUWtGQlV5eERRVUZETEZGQlFWRTdWVUZEY2tJc1RVRkJUU3hKUVVGSkxFTkJRVU1zWjBOQlFXZERMRU5CUTNwRExGTkJRVk1zUlVGRFZDeHBSRUZEUml4RFFVRkRPMVZCUTBRN1VVRkZSanRWUVVORkxFMUJRVTBzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03VFVGRGNFVTdTVUZEUmp0RlFVTkdPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc1RVRkJUU3hqUVVGakxFTkJRVU1zVDBGQlR5eEZRVUZGTzBsQlF6VkNMRTFCUVUwN1RVRkJSVHRKUVVFNFFpeERRVUZETEVkQlEzSkRMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03U1VGRk4wTXNTVUZCU1N4UFFVRlBMRWRCUVVjc1MwRkJTenM3U1VGRmJrSTdTVUZEUVN4SlFVRkpPMDFCUTBZc1QwRkJUeXhIUVVGSExFMUJRVTBzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRE8wbEJRMnBFTEVOQlFVTXNRMEZCUXl4UFFVRlBMRXRCUVVzc1JVRkJSVHROUVVGQkxFbEJRVUVzVjBGQlFTeEZRVUZCTEcxQ1FVRkJPMDFCUTJRc1NVRkJTU3hGUVVGQkxGZEJRVUVzUjBGQlFTeExRVUZMTEVOQlFVTXNTVUZCU1N4alFVRkJMRmRCUVVFc2QwSkJRVUVzYlVKQlFVRXNSMEZCVml4WFFVRkJMRU5CUVZrc1QwRkJUeXhqUVVGQkxHMUNRVUZCTEhWQ1FVRnVRaXh0UWtGQlFTeERRVUZ4UWl4TlFVRk5MRTFCUVVzc1owSkJRV2RDTEVWQlFVVTdVVUZEY0VRc1RVRkJUU3hMUVVGTE8wMUJRMkk3U1VGRFJqdEpRVVZCTEUxQlFVMHNUVUZCVFN4SFFVRkhPMDFCUVVVc1QwRkJUenROUVVGRk8wbEJRVkVzUTBGQlF6dEpRVU51UXp0SlFVTkJMRTFCUVUwN1RVRkJSVHRKUVVGVExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRekZETzBsQlEwRXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJUdE5RVU4wUWp0SlFVTkdPMGxCUlVFc1NVRkJTU3hYUVVGWExFZEJRVWNzVVVGQlVUdEpRVU14UWl4SlFVRkpMRU5CUVVNc05rSkJRVFpDTEVWQlFVVTdUVUZEYkVNc1YwRkJWeXhIUVVGSExFTkJRVU1zUTBGQlF6dE5RVU5vUWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUlN4alFVRmpMRWxCUVVzN1VVRkRhRVFzU1VGQlNTeFBRVUZQTEV0QlFVc3NZMEZCWXl4RlFVRkZPMVZCUXpsQ0xGZEJRVmNzUTBGQlF5eGpRVUZqTEVOQlFVTXNSMEZCUnp0WlFVTTFRaXhQUVVGUExFVkJRVVVzWTBGQll6dFpRVU4yUWl4UFFVRlBMRVZCUVVVN1ZVRkRXQ3hEUVVGRE8xRkJRMGc3VFVGRFJpeERRVUZETEVOQlFVTTdTVUZEU2p0SlFVVkJMRmRCUVZjc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eE5RVUZOTzBsQlJUZENMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETzAxQlFVVXNVVUZCVVN4RlFVRkZPMGxCUVZrc1EwRkJReXhEUVVGRE8wVkJRMjVFT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEUxQlFVMHNaME5CUVdkRExFTkJRVU1zVTBGQlV5eEZRVUZGTEhWQ1FVRjFRaXhGUVVGRk8wbEJRM3BGTEUxQlFVMDdUVUZCUlR0SlFVRlRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMGxCUXpGRExFMUJRVTBzVjBGQlZ5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTjBRaXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJSU3hQUVVGUExFbEJRVXM3VFVGRGVrTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFVVTdVVUZEYUVNc1YwRkJWeXhEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITzFWQlFVVXNUMEZCVHp0VlFVRkZMRTlCUVU4c1JVRkJSVHRSUVVGTExFTkJRVU03VFVGRGJrUTdTVUZEUml4RFFVRkRMRU5CUVVNN1NVRkRSaXhKUVVGSkxFTkJRVU1zWTBGQll5eEhRVUZITEVsQlFVa3NkVUpCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETzBsQlJYUkVMRTFCUVUwc1YwRkJWeXhIUVVGSExFMUJRVTBzU1VGQlNTeHRRa0ZCVVN4RFFVTndReXgxUWtGQmRVSXNSVUZEZGtJc2IwTkJRWGRDTEVWQlEzaENMRWxCUVVrc1EwRkJReXhqUVVOUUxFTkJRVU03U1VGRFJDeE5RVUZOTEZWQlFWVXNSMEZCUnl4RFFVRkRMRFJEUVVFMFF5eERRVUZETzBsQlJXcEZMRWxCUVVrN1RVRkRSaXhOUVVGTkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1UwRkJVeXhGUVVGRkxGVkJRVlVzUTBGQlF6dE5RVVZzUlN4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zVDBGQlR5eEZRVUZGTEV0QlFVc3NTMEZCU3p0UlFVTndReXhOUVVGTkxFOUJRVThzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1MwRkJTenRSUVVOMlJTeFhRVUZYTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjN1ZVRkJSU3hQUVVGUE8xVkJRVVU3VVVGQlVTeERRVUZETzAxQlF6ZERMRU5CUVVNc1EwRkJRenROUVVOR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPMUZCUVVVc1VVRkJVU3hGUVVGRk8wMUJRVmtzUTBGQlF5eERRVUZETzBsQlEyNUVMRU5CUVVNc1EwRkJReXhQUVVGUExFdEJRVXNzUlVGQlJUdE5RVU5rTEdsQ1FVRkhMRU5CUVVNc1NVRkJTU3hEUVVOTUxEWkVRVUUwUkN4RlFVTTNSQ3hMUVVOR0xFTkJRVU03VFVGRFJDeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU0xUkR0RlFVTkdPMEZCUTBZN1FVRkJReXhQUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEdOQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEYkdGRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTmxMRk5CUVZNc1pVRkJaU3hEUVVGRExFZEJRVWNzUlVGQlJUdEZRVU16UXl4SlFVRkpPMGxCUVVVN1JVRkJTeXhEUVVGRExFZEJRVWNzUjBGQlJ6dEZRVU5zUWl4SlFVRkpMRWRCUVVjc1NVRkJTU3hMUVVGTExGTkJRVk1zUjBGQlJ5eFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJRenRGUVVWc1JDeEpRVUZKTEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNc1QwRkJUenRGUVVOeVFpeEhRVUZITEVkQlFVY3NSMEZCUnl4TFFVRkxMRk5CUVZNc1IwRkJSeXhGUVVGRkxFZEJRVWNzVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXp0RlFVVXhReXhKUVVGSkxFbEJRVWtzUzBGQlN5eEZRVUZGTEVWQlFVVTdTVUZEWml4SFFVRkhMRU5CUVVNc1MwRkJTeXhIUVVGSExFZEJRVWNzUTBGQlF5eFBRVUZQTzBWQlEzcENMRU5CUVVNc1RVRkJUU3hKUVVGSkxFZEJRVWNzUzBGQlN5eEZRVUZGTEVWQlFVVTdTVUZEY2tJc1IwRkJSeXhEUVVGRExFdEJRVXNzUjBGQlJ5eEhRVUZITEVOQlFVTXNTVUZCU1R0RlFVTjBRaXhEUVVGRExFMUJRVTBzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRVZCUVVVN1NVRkRja0lzUjBGQlJ5eERRVUZETEV0QlFVc3NSMEZCU1N4SFFVRkZMRWRCUVVjc1EwRkJReXhKUVVGTExFdEJRVWtzUjBGQlJ5eERRVUZETEU5QlFWRXNSVUZCUXp0RlFVTXpRenRGUVVWQkxFOUJRVThzUjBGQlJ6dEJRVU5hT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzUkNRU3hKUVVGQkxGTkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJNa0lzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJSVE5DTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRaU3hUUVVGVExEWkNRVUUyUWl4RFFVRkJMRVZCUVVjN1JVRkRkRVFzVFVGQlRTeHJRa0ZCYTBJc1IwRkJSeXhGUVVGRk8wVkJRemRDTEU5QlFVOHNVMEZCVXl4blEwRkJaME1zUTBGQlFTeERRVU01UXl4clFrRkJiVUlzUjBGQlJ5eEZRVU4wUWl4clFrRkJiVUlzU1VGQlNTeEZRVU4yUWl4MVFrRkJkMElzU1VGQlNTeEZRVU0xUWl4MVFrRkJkMElzUjBGQlJ5eEZRVU16UWp0SlFVTkJMRWxCUVVrc2EwSkJRV3RDTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVTdUVUZETTBNc2FVSkJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVVXNkVUpCUVhOQ0xFZEJRVWNzUTBGQlF5eEZRVUZITEdkQ1FVRmxMRU5CUVVNN1RVRkRka1FzVDBGQlR5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTmtPMGxCUTBFc2EwSkJRV3RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU03U1VGREwwSXNUMEZCVHl4SlFVRkpMRU5CUVVNc1EwRkJRenRGUVVObUxFTkJRVU03UVVGRFNEczdPenM3T3pzN096czdPenM3T3pzN096czdRVU4wUWtFc1NVRkJRU3hUUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUVRKQ0xGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRCUVVVelFqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRaU3hUUVVGVExITkNRVUZ6UWl4RFFVRkRMRWxCUVVrc1JVRkJSVHRGUVVOdVJDeFBRVUZQTEZOQlFWTXNaMEpCUVdkQ0xFTkJRVUVzUTBGRE9VSXNhMEpCUVcxQ0xFZEJRVWNzUlVGRGRFSXNhMEpCUVcxQ0xFZEJRVWNzUlVGRGRFSXNkVUpCUVhkQ0xFbEJRVWtzUlVGRE5VSTdTVUZEUVN4SlFVRkpMRU5CUVVNc1JVRkJReXgxUWtGQmQwSXNSVUZCUlN4TFFVRkxPMDFCUTI1RExFbEJRVWtzUjBGQlJ5eERRVUZETEV0QlFVc3NSVUZCUlR0UlFVTmlMR2xDUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETERCQ1FVRXdRaXhGUVVGRkxFZEJRVWNzUTBGQlF6dE5RVU0xUXp0TlFVTkJMRWxCUVVrc1IwRkJSeXhEUVVGRExHdENRVUZyUWl4RlFVRkZPMUZCUXpGQ08wMUJRMFk3VFVGRFFTeHBRa0ZCUnl4RFFVRkRMRWxCUVVrc1EwRkJSU3hSUVVGUExFbEJRVWtzUTBGQlF5eE5RVUZQTEVsQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1NVRkJTU3hGUVVGRkxFZEJRVWNzUTBGQlF6dE5RVU5xUkN4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVOT0xFTkJRVU1zUTBGQlF6dEZRVU5LTEVOQlFVTTdRVUZEU0RzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTjZRa0VzU1VGQlFTeGhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1IwRkJRU3hIUVVGQkxFOUJRVUU3UVVGRlFTeE5RVUZOTEc5Q1FVRnZRaXhIUVVGSExFTkJRVU1zUjBGQlJ5eEZRVUZGTEZOQlFWTXNSVUZCUlN4TFFVRkxMRVZCUVVVc2IwSkJRVzlDTEV0QlFVczdSVUZETlVVc1QwRkJUeXhOUVVGUExFbEJRVWtzU1VGQlN6dEpRVU55UWl4SlFVRkpMRk5CUVZNc1EwRkJReXhqUVVGakxFTkJRVU1zUzBGQlN5eEZRVUZGTzAxQlEyeERPMGxCUTBZN1NVRkRRU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSVHROUVVOeVFpeFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRPMUZCUTJRc1QwRkJUeXhGUVVGRkxFdEJRVXM3VVVGRFpDeExRVUZMTEVWQlFVVXNkVUpCUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zWTBGQll5eERRVUZETzFWQlEyeERMRTlCUVU4c1JVRkJSeXhIUVVGRkxFbEJRVWtzUTBGQlF5eE5RVUZQTzFGQlF6RkNMRU5CUVVNc1EwRkJRenRSUVVOR0xFVkJRVVVzUlVGQlJTeEpRVUZKTEVOQlFVTTdUVUZEV0N4RFFVRkRMRU5CUVVNN1RVRkRSanRKUVVOR08wbEJSVUVzU1VGQlNTeE5RVUZOTzBsQlExWXNTVUZCU1N4TFFVRkxPMGxCUTFRc1NVRkJTVHROUVVOR0xFMUJRVTBzUjBGQlJ5eE5RVUZOTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRPMGxCUTJwRUxFTkJRVU1zUTBGQlF5eFBRVUZQTEVkQlFVY3NSVUZCUlR0TlFVTmFMRXRCUVVzc1IwRkJSeXhIUVVGSE8wbEJRMklzUTBGQlF5eFRRVUZUTzAxQlExSXNTVUZCU1N4blFrRkJXU3hKUVVGSkxFdEJRVXNzU1VGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4TFFVRkxMRlZCUVZVc1JVRkJSVHRSUVVOMlJDeHZRa0ZCYjBJc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1RVRkROVU03U1VGRFJqdEpRVVZCTEVsQlFVa3NVMEZCVXl4RFFVRkRMR05CUVdNc1EwRkJReXhMUVVGTExFVkJRVVU3VFVGRGJFTXNTVUZCU1N4TFFVRkxMRVZCUVVVN1VVRkRWQ3hQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXp0TlFVTjBRanROUVVOQk8wbEJRMFk3U1VGRlFTeEpRVUZKTEV0QlFVc3NSVUZCUlR0TlFVTlVMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU03VVVGRFpDeFBRVUZQTEVWQlFVVXNTMEZCU3p0UlFVTmtMRXRCUVVzc1JVRkJSU3hKUVVGQkxEUkNRVUZqTEVWQlFVTXNTMEZCU3l4RlFVRkZPMVZCUVVVc2EwSkJRV3RDTEVWQlFVVTdVVUZCU3l4RFFVRkRMRU5CUVVNN1VVRkRNVVFzUlVGQlJTeEZRVUZGTEVsQlFVa3NRMEZCUXp0TlFVTllMRU5CUVVNc1EwRkJRenRKUVVOS0xFTkJRVU1zVFVGQlRUdE5RVU5NTEZOQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNN1VVRkRaQ3hQUVVGUExFVkJRVVVzUzBGQlN6dFJRVU5rTEUxQlFVMDdVVUZEVGl4RlFVRkZMRVZCUVVVc1NVRkJTU3hEUVVGRE8wMUJRMWdzUTBGQlF5eERRVUZETzBsQlEwbzdSVUZEUml4RFFVRkRPMEZCUTBnc1EwRkJRenRCUVVGRExFbEJRVUVzVVVGQlFTeEhRVVZoTEc5Q1FVRnZRanRCUVVGQkxFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNVVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTjBSRzVETEVsQlFVRXNZMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxIRkNRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1VVRkJRU3hIUVVGQkxFOUJRVUU3UVVGTFpTeFRRVUZUTEhkQ1FVRjNRaXhEUVVGRE8wVkJReTlETEU5QlFVODdSVUZEVUN4WFFVRlhPMFZCUTFnc2EwSkJRV3RDTzBWQlEyeENMSEZDUVVGeFFqdEZRVU55UWl4dFFrRkJiVUk3UlVGRGJrSXNjVUpCUVhGQ08wVkJRM0pDTEhGQ1FVRnhRanRGUVVOeVFpeHpRa0ZCYzBJN1JVRkRkRUlzY1VKQlFYRkNPMFZCUTNKQ0xEQkNRVUV3UWp0RlFVTXhRaXhsUVVGbE8wVkJRMlk3UVVGRFJpeERRVUZETEVWQlFVVTdSVUZEUkN4TlFVRk5MR3RDUVVGclFpeEhRVUZITEVsQlFVRXNPRUpCUVdVc1JVRkJReXhEUVVONlF5eEpRVUZCTEhWRFFVRjNRaXhGUVVGRE8wbEJRM1pDTEZkQlFWY3NSVUZCUlN4TFFVRkxPMGxCUTJ4Q0xHdENRVUZyUWl4RlFVRkhMR0ZCUVZrc1QwRkJVVHRGUVVNelF5eERRVUZETEVOQlFVTXNSVUZEUml4SlFVRkJMRFJEUVVGelFpeEZRVUZETzBsQlEzSkNMRmRCUVZjN1NVRkRXQ3hyUWtGQmEwSTdTVUZEYkVJc2NVSkJRWEZDTzBsQlEzSkNMRzFDUVVGdFFqdEpRVU51UWl4eFFrRkJjVUk3U1VGRGNrSXNjVUpCUVhGQ08wbEJRM0pDTEhOQ1FVRnpRanRKUVVOMFFpeHhRa0ZCY1VJN1NVRkRja0k3UlVGRFJpeERRVUZETEVOQlFVTXNSVUZEUml4SlFVRkJMSEZEUVVFMFFpeEZRVUZETzBsQlFVVTdSVUZCWjBJc1EwRkJReXhEUVVGRExFVkJRMnBFTEVsQlFVRXNhME5CUVhsQ0xFVkJRVU03U1VGQlJUdEZRVUUwUWl4RFFVRkRMRU5CUVVNc1EwRkRNMFFzUTBGQlF6dEZRVU5HTEU5QlFVOHNhMEpCUVd0Q08wRkJRek5DT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzcERRU3hKUVVGQkxGTkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxIRkNRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRVFJETEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUdEJRVVUxUXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFpTeFRRVUZUTERCQ1FVRXdRaXhEUVVGRE8wVkJRMnBFTEZGQlFWRTdSVUZEVWp0QlFVTkdMRU5CUVVNc1JVRkJSVHRGUVVORUxFOUJRVThzWlVGQlpTeG5Ra0ZCWjBJc1EwRkJReXhIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SFFVRkhMRVZCUVVVN1NVRkRNVVFzU1VGQlNUdE5RVU5HTEVsQlFVa3NSMEZCUnl4RFFVRkRMRTFCUVUwc1MwRkJTeXd5UWtGQk1rSXNSVUZCUlR0UlFVTTVReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU5PTzAxQlEwWTdUVUZEUVN4SlFVRkpMRWRCUVVjc1EwRkJReXhMUVVGTExFbEJRVWtzUjBGQlJ5eERRVUZETEV0QlFVc3NTMEZCU3l3MlFrRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlFVVTdVVUZEZGtRc1RVRkJUU3hyUWtGQmEwSXNRMEZCUXl4UlFVRlJMRVZCUVVVc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF6dE5RVU12UXl4RFFVRkRMRTFCUVUwN1VVRkRUQ3hwUWtGQlJ5eERRVUZETEV0QlFVc3NRMEZEVGl3MFEwRkJNa01zVVVGQlV5d3JRa0ZEZGtRc1EwRkJRenROUVVOSU8wMUJRMEVzUjBGQlJ5eERRVUZETEUxQlFVMHNSMEZCUnl4SlFVRkpPMDFCUTJwQ0xFZEJRVWNzUTBGQlF5eERRVUZETzBsQlExQXNRMEZCUXl4RFFVRkRMRTlCUVU4c1MwRkJTeXhGUVVGRk8wMUJRMlFzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXp0SlFVTmFPMFZCUTBZc1EwRkJRenRCUVVOSU96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMmhEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFpTeFRRVUZUTEhOQ1FVRnpRaXhEUVVGRExFbEJRVWtzUlVGQlJUdEZRVU51UkN4UFFVRlBMRk5CUVZNc1owSkJRV2RDTEVOQlFVRXNRMEZET1VJc2EwSkJRVzFDTEVkQlFVY3NSVUZEZEVJc2EwSkJRVzFDTEVOQlFVTXNSVUZEY0VJc2RVSkJRWGRDTEVsQlFVa3NSVUZETlVJN1NVRkRRU3hIUVVGSExFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5PMGxCUTNoQ0xFbEJRVWtzUTBGQlF5eERRVUZETzBWQlExSXNRMEZCUXp0QlFVTklPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJaQkxFbEJRVUVzWVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR2RDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNaVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkZRU3hKUVVGQkxFbEJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4WlFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzUzBGQlFTeEhRVUZCTEU5QlFVRTdRVUZGUVN4SlFVRkJMRmxCUVVFc1IwRkJRU3hQUVVGQk8wRkJUVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTFCUVUwc1owSkJRV2RDTEVkQlFVYzdSVUZEZGtJc1dVRkJXU3hGUVVGRkxHTkJRV003UlVGRE5VSXNUMEZCVHl4RlFVRkZMRk5CUVZNN1JVRkRiRUlzWjBKQlFXZENMRVZCUVVVN1FVRkRjRUlzUTBGQlF6czdRVUZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFMUJRVTBzWTBGQll5eEhRVUZITzBWQlEzSkNMRU5CUVVNc2FVSkJRVmtzUTBGQlF5eFJRVUZSTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU1zWjBKQlFXZENPMFZCUXpGRUxFTkJRVU1zYVVKQlFWa3NRMEZCUXl4dFFrRkJiVUlzUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJReXhuUWtGQlowSTdSVUZEY2tVc1EwRkJReXhwUWtGQldTeERRVUZETEhOQ1FVRnpRaXhIUVVGSExHZENRVUZuUWl4RFFVRkRMR2RDUVVGblFqdEZRVU40UlN4RFFVRkRMR2xDUVVGWkxFTkJRVU1zYzBKQlFYTkNMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNaMEpCUVdkQ08wVkJRM2hGTEVOQlFVTXNhVUpCUVZrc1EwRkJReXhoUVVGaExFZEJRVWNzWjBKQlFXZENMRU5CUVVNc1owSkJRV2RDTzBWQlF5OUVMRU5CUVVNc2FVSkJRVmtzUTBGQlF5eFhRVUZYTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU1zWjBKQlFXZENPMFZCUXpkRUxFTkJRVU1zYVVKQlFWa3NRMEZCUXl3MlFrRkJOa0lzUjBGRGVrTXNaMEpCUVdkQ0xFTkJRVU1zWjBKQlFXZENPMFZCUTI1RExFTkJRVU1zYVVKQlFWa3NRMEZCUXl4dlFrRkJiMElzUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWk8wVkJRMnhGTEVOQlFVTXNhVUpCUVZrc1EwRkJReXd3UWtGQk1FSXNSMEZCUnl4blFrRkJaMElzUTBGQlF5eFpRVUZaTzBWQlEzaEZMRU5CUVVNc2FVSkJRVmtzUTBGQlF5eGhRVUZoTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU1zVDBGQlR6dEZRVU4wUkN4RFFVRkRMR2xDUVVGWkxFTkJRVU1zYTBKQlFXdENMRWRCUVVjc1owSkJRV2RDTEVOQlFVTTdRVUZEZEVRc1EwRkJRenM3UVVGRlJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1RVRkJUU3hqUVVGakxFZEJRVWM3UlVGRGNrSXNRMEZCUXl4cFFrRkJXU3hEUVVGRExGRkJRVkVzUjBGQlJ6dEpRVU4yUWl4UlFVRlJMRVZCUVVVc2FVTkJRVzlDTEVOQlFVTXNhVUpCUVdsQ08wbEJRMmhFTEUxQlFVMHNSVUZCUlN4cFEwRkJiMElzUTBGQlF5eGxRVUZsTzBsQlF6VkRMRkZCUVZFc1JVRkJSU3hwUTBGQmIwSXNRMEZCUXl4cFFrRkJhVUk3U1VGRGFFUXNVMEZCVXl4RlFVRkZMR2xEUVVGdlFpeERRVUZETzBWQlEyeERMRU5CUVVNN1JVRkRSQ3hEUVVGRExHbENRVUZaTEVOQlFVTXNiVUpCUVcxQ0xFZEJRVWM3U1VGRGJFTXNVVUZCVVN4RlFVRkZMR2xEUVVGdlFpeERRVUZETEdsQ1FVRnBRanRKUVVOb1JDeFJRVUZSTEVWQlFVVXNhVU5CUVc5Q0xFTkJRVU1zYVVKQlFXbENPMGxCUTJoRUxGTkJRVk1zUlVGQlJTeHBRMEZCYjBJc1EwRkJRenRGUVVOc1F5eERRVUZETzBWQlEwUXNRMEZCUXl4cFFrRkJXU3hEUVVGRExITkNRVUZ6UWl4SFFVRkhPMGxCUTNKRExGRkJRVkVzUlVGQlJTeHBRMEZCYjBJc1EwRkJReXhwUWtGQmFVSTdTVUZEYUVRc1VVRkJVU3hGUVVGRkxHbERRVUZ2UWl4RFFVRkRMR2xDUVVGcFFqdEpRVU5vUkN4VFFVRlRMRVZCUVVVc2FVTkJRVzlDTEVOQlFVTTdSVUZEYkVNc1EwRkJRenRGUVVORUxFTkJRVU1zYVVKQlFWa3NRMEZCUXl4elFrRkJjMElzUjBGQlJ6dEpRVU55UXl4UlFVRlJMRVZCUVVVc2FVTkJRVzlDTEVOQlFVTXNhVUpCUVdsQ08wbEJRMmhFTEZGQlFWRXNSVUZCUlN4cFEwRkJiMElzUTBGQlF5eHBRa0ZCYVVJN1NVRkRhRVFzVTBGQlV5eEZRVUZGTEdsRFFVRnZRaXhEUVVGRE8wVkJRMnhETEVOQlFVTTdSVUZEUkN4RFFVRkRMR2xDUVVGWkxFTkJRVU1zWVVGQllTeEhRVUZITzBsQlF6VkNMRkZCUVZFc1JVRkJSU3hwUTBGQmIwSXNRMEZCUXl4cFFrRkJhVUk3U1VGRGFFUXNVVUZCVVN4RlFVRkZMR2xEUVVGdlFpeERRVUZETEdsQ1FVRnBRanRKUVVOb1JDeFRRVUZUTEVWQlFVVXNhVU5CUVc5Q0xFTkJRVU03UlVGRGJFTXNRMEZCUXp0RlFVTkVMRU5CUVVNc2FVSkJRVmtzUTBGQlF5eFhRVUZYTEVkQlFVYzdTVUZETVVJc1VVRkJVU3hGUVVGRkxHbERRVUZ2UWl4RFFVRkRMR3RDUVVGclFqdEpRVU5xUkN4UlFVRlJMRVZCUVVVc2FVTkJRVzlDTEVOQlFVTXNhMEpCUVd0Q08wbEJRMnBFTEZOQlFWTXNSVUZCUlN4cFEwRkJiMElzUTBGQlF6dEZRVU5zUXl4RFFVRkRPMFZCUTBRc1EwRkJReXhwUWtGQldTeERRVUZETERaQ1FVRTJRaXhIUVVGSE8wbEJRelZETEZGQlFWRXNSVUZCUlN4cFEwRkJiMElzUTBGQlF5d3lRa0ZCTWtJN1NVRkRNVVFzVVVGQlVTeEZRVUZGTEdsRFFVRnZRaXhEUVVGRExESkNRVUV5UWp0SlFVTXhSQ3hUUVVGVExFVkJRVVVzYVVOQlFXOUNMRU5CUVVNN1JVRkRiRU1zUTBGQlF6dEZRVU5FTEVOQlFVTXNhVUpCUVZrc1EwRkJReXh2UWtGQmIwSXNSMEZCUnp0SlFVTnVReXhSUVVGUkxFVkJRVVVzYVVOQlFXOUNMRU5CUVVNc2JVSkJRVzFDTzBsQlEyeEVMRkZCUVZFc1JVRkJSU3hwUTBGQmIwSXNRMEZCUXl4dFFrRkJiVUk3U1VGRGJFUXNVMEZCVXl4RlFVRkZMR2xEUVVGdlFpeERRVUZETzBWQlEyeERMRU5CUVVNN1JVRkRSQ3hEUVVGRExHbENRVUZaTEVOQlFVTXNNRUpCUVRCQ0xFZEJRVWM3U1VGRGVrTXNVVUZCVVN4RlFVRkZMR2xEUVVGdlFpeERRVUZETEcxQ1FVRnRRanRKUVVOc1JDeFJRVUZSTEVWQlFVVXNhVU5CUVc5Q0xFTkJRVU1zYlVKQlFXMUNPMGxCUTJ4RUxGTkJRVk1zUlVGQlJTeHBRMEZCYjBJc1EwRkJRenRGUVVOc1F6dEJRVU5HTEVOQlFVTTdRVUZGUkN4TlFVRk5MR2xDUVVGcFFpeEhRVUZITEVOQlFVTXNRMEZCUXpzN1FVRkZOVUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTJVc1UwRkJVeXhwUTBGQmFVTXNRMEZCUXp0RlFVTjRSQ3hWUVVGVk8wVkJRMVlzWlVGQlpUdEZRVU5tTEdkQ1FVRm5RaXhIUVVGSExFVkJRVVVzUjBGQlJ5eERRVUZETzBWQlEzcENPMEZCUTBZc1EwRkJReXhGUVVGRk8wVkJRMFFzVDBGQlR5eGxRVUZsTERKQ1FVRXlRaXhEUVVGQkxFTkJReTlETEd0Q1FVRnRRaXhIUVVGSExFVkJRM1JDTEd0Q1FVRnRRaXhIUVVGSExFVkJRM1JDTEhWQ1FVRjNRaXhKUVVGSkxFVkJRelZDTzBsQlEwRXNUVUZCVFR0TlFVRkZMRTFCUVUwN1RVRkJSVHRKUVVGUExFTkJRVU1zUjBGQlJ5eEhRVUZIT3p0SlFVVTVRanRKUVVOQkxFMUJRVTBzWVVGQllTeEhRVU5xUWl4alFVRmpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzWjBKQlFXZENMRU5CUVVNc1dVRkJXVHM3U1VGRmVrUTdTVUZEUVN4TlFVRk5MRmRCUVZjc1IwRkRaaXhoUVVGaExFdEJRVXNzWjBKQlFXZENMRU5CUVVNc1dVRkJXU3hKUVVNdlF5eFBRVUZQTEdsQ1FVRnBRaXhEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEZkQlFWYzdPMGxCUld4RU8wbEJRMEU3U1VGRFFUdEpRVU5CTEUxQlFVMHNPRUpCUVRoQ0xFZEJRMnhETEdWQlFXVXNRMEZCUXl4RFFVRkRMRU5CUVVNc2QwSkJRWGRDTEV0QlFVc3NTVUZCU1RzN1NVRkZja1E3U1VGRFFUdEpRVU5CTEUxQlFVMHNVMEZCVXl4SFFVRkhMR05CUVdNc1EwRkJReXhOUVVGTkxFTkJRVU03U1VGRmVFTXNUVUZCVFN4bFFVRmxMRWRCUVVjc1EwRkJReXhEUVVGRE96dEpRVVV4UWp0SlFVTkJMRTFCUVUwc1owSkJRV2RDTzBsQlEzQkNPMGxCUTBFc1RVRkJUU3hMUVVGTExHOUNRVUZsTzBsQlF6RkNPMGxCUTBFc1lVRkJZU3hMUVVGTExHZENRVUZuUWl4RFFVRkRMRTlCUVU4N1NVRkRNVU03U1VGRFFTeFhRVUZYTEV0QlFVc3NTMEZCU3p0SlFVTnlRanRKUVVOQkxEaENRVUU0UWl4TFFVRkxMRWxCUVVrN1NVRkZla01zU1VGQlNTeG5Ra0ZCWjBJc1JVRkJSVHROUVVOd1FqdE5RVU5CTzAxQlEwRTdUVUZEUVR0TlFVTkJMRTFCUVUwc1MwRkJTeXhIUVVGSExGTkJRVk1zUjBGRGJrSXNVMEZCVXl4RFFVRkRMRk5CUVZNc1IwRkRia0lzYVVOQlFXOUNMRU5CUVVNc2IwSkJRVzlDTzAxQlJUZERMRWxCUVVrc1MwRkJTeXhMUVVGTExHbERRVUZ2UWl4RFFVRkRMR3RDUVVGclFpeEZRVUZGTzFGQlFVRXNTVUZCUVN4WFFVRkJMRVZCUVVFc1dVRkJRVHRSUVVOeVJDeGxRVUZsTEVOQlFVTXNZMEZCWXl4SFFVRkhMRTFCUVUwN08xRkJSWFpETzFGQlEwRTdVVUZEUVN4SlFVRkpMRWxCUVVrN1VVRkRVaXhKUVVGSkxFbEJRVWs3VVVGRFVpeEpRVUZKTEVsQlFVRXNPRUpCUVdNc1JVRkJReXhIUVVGSExHRkJRVWdzUjBGQlJ5eDNRa0ZCUVN4WFFVRkJMRWRCUVVnc1IwRkJSeXhEUVVGRkxFMUJRVTBzWTBGQlFTeFhRVUZCTEhWQ1FVRllMRmRCUVVFc1EwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTzFWQlFVRXNTVUZCUVN4WlFVRkJMRVZCUVVFc1dVRkJRVHRWUVVOd1F5eEpRVUZKTEVkQlFVY3NSMEZCUnl4aFFVRklMRWRCUVVjc2QwSkJRVUVzV1VGQlFTeEhRVUZJTEVkQlFVY3NRMEZCUlN4TlFVRk5MR05CUVVFc1dVRkJRU3gxUWtGQldDeFpRVUZCTEVOQlFXTXNRMEZCUXl4RFFVRkRPMVZCUTNaQ0xFbEJRVWtzUjBGQlJ5eEhRVUZITEdGQlFVZ3NSMEZCUnl4M1FrRkJRU3haUVVGQkxFZEJRVWdzUjBGQlJ5eERRVUZGTEUxQlFVMHNZMEZCUVN4WlFVRkJMSFZDUVVGWUxGbEJRVUVzUTBGQll5eERRVUZETEVOQlFVTTdVVUZEZWtJc1EwRkJReXhOUVVGTk8xVkJRVUVzU1VGQlFTeFpRVUZCTEVWQlFVRXNXVUZCUVR0VlFVTk1MRWxCUVVrc1IwRkJSeXhIUVVGSExHRkJRVWdzUjBGQlJ5eDNRa0ZCUVN4WlFVRkJMRWRCUVVnc1IwRkJSeXhEUVVGRkxFMUJRVTBzWTBGQlFTeFpRVUZCTEhWQ1FVRllMRmxCUVVFc1EwRkJZeXhEUVVGRExFTkJRVU03VlVGRGRrSXNTVUZCU1N4SFFVRkhMRWRCUVVjc1lVRkJTQ3hIUVVGSExIZENRVUZCTEZsQlFVRXNSMEZCU0N4SFFVRkhMRU5CUVVVc1RVRkJUU3hqUVVGQkxGbEJRVUVzZFVKQlFWZ3NXVUZCUVN4RFFVRmpMRU5CUVVNc1EwRkJRenRSUVVONlFqdFJRVU5CTEUxQlFVMHNjVUpCUVhGQ0xFZEJRVWNzUjBGQlJ5eGhRVUZJTEVkQlFVY3NkMEpCUVVFc1dVRkJRU3hIUVVGSUxFZEJRVWNzUTBGQlJTeE5RVUZOTEdOQlFVRXNXVUZCUVN4MVFrRkJXQ3haUVVGQkxFTkJRV01zUTBGQlF5eERRVUZETzFGQlJUbERMRTFCUVUwc1QwRkJUeXhIUVVGSE8xVkJRMlFzVTBGQlV5eEZRVUZGTzFsQlExUXNSMEZCUnl4eFFrRkJjVUk3V1VGRGVFSXNTVUZCU1R0WlFVTktMRWxCUVVrN1dVRkRTanRWUVVOR0xFTkJRVU03VlVGRFJDeE5RVUZOTEVWQlFVVXNPRUpCUVdsQ0xFTkJRVU1zVlVGQlZUdFZRVU53UXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRE8xRkJRMW9zUTBGQlF6dFJRVVZFTEVsQlFVazdWVUZEUml4TlFVRk5MSGRDUVVGM1FpeEhRVUZITEUxQlFVMHNkVUpCUVhWQ0xFTkJRelZFTEU5QlFVOHNSVUZEVUN4SFFVRkhMRU5CUVVNc1RVRkRUaXhEUVVGRE8xVkJSVVFzU1VGQlNTeERRVUZCTEhkQ1FVRjNRaXhoUVVGNFFpeDNRa0ZCZDBJc2RVSkJRWGhDTEhkQ1FVRjNRaXhEUVVGRkxHVkJRV1VzVFVGQlN5eERRVUZETEVWQlFVVTdXVUZEYmtRc1pVRkJaU3hEUVVGRExHbENRVUZwUWl4SFFVRkhMRU5CUTJ4RExEUkRRVUVyUWl4RFFVRkRMR3RDUVVGclFpeERRVU51UkR0VlFVTklMRU5CUVVNc1RVRkJUU3hKUVVGSkxFTkJRVUVzZDBKQlFYZENMR0ZCUVhoQ0xIZENRVUYzUWl4MVFrRkJlRUlzZDBKQlFYZENMRU5CUVVVc1pVRkJaU3hOUVVGTExFTkJRVU1zUlVGQlJUdFpRVU14UkN4bFFVRmxMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NRMEZEYkVNc05FTkJRU3RDTEVOQlFVTXNjMEpCUVhOQ0xFTkJRM1pFTzFWQlEwZzdWVUZGUVN4SlFVRkpMRTFCUVUwc1MwRkJTeXhwUWtGQldTeERRVUZETEdGQlFXRXNSVUZCUlR0WlFVTjZReXhOUVVGTk8yTkJRVVU3V1VGQll5eERRVUZETEVkQlFVY3NTVUZCUVN3eVFrRkJWU3hGUVVGRE8yTkJRVVU3V1VGQlN5eERRVUZETEVOQlFVTTdXVUZET1VNc1NVRkJTU3hoUVVGaExFVkJRVVU3WTBGRGFrSXNaVUZCWlN4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEVOQlEyeERMR1ZCUVdVc1EwRkJReXhwUWtGQmFVSXNTVUZCU1N4RlFVRkZMRVZCUTNaRExFMUJRVTBzUTBGQlF5dzBRMEZCSzBJc1EwRkJReXhKUVVGSkxFTkJRVU03V1VGRGFFUTdWVUZEUmp0UlFVTkdMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJUdFZRVU5XTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUTFRc09FVkJRVFpGTEVOQlFVVXNSVUZEYkVZc1EwRkJRenRSUVVOSU8wMUJRMFlzUTBGQlF5eE5RVUZOTzFGQlEwd3NaVUZCWlN4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTk8wMUJRMnBETzAxQlJVRXNWVUZCVlN4RFFVRkRPMUZCUTFRc1MwRkJTenRSUVVOTUxGRkJRVkVzUlVGQlJTeHhRMEZCZDBJc1EwRkJReXhqUVVGak8xRkJRMnBFTEZGQlFWRXNSVUZCUlR0VlFVTlNMRWRCUVVjc1JVRkJSVHRSUVVOUUxFTkJRVU03VVVGRFJDeFZRVUZWTEVWQlFVVTdUVUZEWkN4RFFVRkRMRU5CUVVNN1RVRkZSaXhwUWtGQmFVSXNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhWUVVGVkxFTkJRVU1zVFVGQlRUdFJRVU16UXl4UFFVRlBMR2xDUVVGcFFpeERRVUZETEUxQlFVMHNRMEZCUXp0TlFVTnNReXhEUVVGRExFVkJRVVVzV1VGQlRTeEhRVUZITEdkQ1FVRm5RaXhEUVVGRE8wbEJReTlDTzBsQlJVRXNTVUZCU1N4RFFVRkRMRTFCUVU4c1VVRkJVU3hKUVVGTE8wMUJRVUVzU1VGQlFTeFZRVUZCTEVWQlFVRXNWMEZCUVR0TlFVTjJRaXhKUVVGSkxHZENRVUZuUWl4TFFVRkxMRXRCUVVzc1NVRkJTU3hQUVVGUExGTkJRVk1zUzBGQlN5eFhRVUZYTEVWQlFVVTdVVUZEYkVVc1QwRkJUeXhSUVVGUkxFTkJRVU1zUTBGQlF6dE5RVU51UWpzN1RVRkZRVHROUVVOQkxFMUJRVTBzWjBOQlFXZERMRWRCUTNCRExFMUJRVTBzUzBGQlN5eHBRa0ZCV1N4RFFVRkRMRkZCUVZFc1NVRkRhRU1zUlVGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUnl4RFFVRkRMRXRCUVVzc1kwRkJRU3hWUVVGQkxIVkNRVUZVTEZWQlFVRXNRMEZCVnl4SlFVRkpMRTFCUVVzc2QwSkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNZMEZCWXp0TlFVVnVSQ3hOUVVGTkxHMUNRVUZ0UWl4SFFVRkhMR2REUVVGblF6dE5RVVUxUkN4SlFVRkpMRXRCUVVzN1RVRkRWQ3hKUVVGSkxHMUNRVUZ0UWl4RlFVRkZPMUZCUTNaQ0xFdEJRVXNzUjBGQlJ5eFRRVUZUTEVOQlFVTXNUVUZCVFR0UlFVTjRRaXhsUVVGbExFTkJRVU1zUzBGQlN5eEhRVUZITEVkQlFVY3NRMEZCUXl4TFFVRkxPMDFCUTI1RExFTkJRVU1zVFVGQlRTeEpRVUZKTEVWQlFVRXNWMEZCUVN4SFFVRkJMRWRCUVVjc1EwRkJReXhMUVVGTExHTkJRVUVzVjBGQlFTeDFRa0ZCVkN4WFFVRkJMRU5CUVZjc1NVRkJTU3hOUVVGTExIZENRVUZWTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTzFGQlEzUkZMRXRCUVVzc1IwRkJSeXhUUVVGVExFTkJRVU1zVVVGQlVUdE5RVU0xUWl4RFFVRkRMRTFCUVUwN1VVRkRUQ3hMUVVGTExFZEJRVWNzVTBGQlV5eERRVUZETEZGQlFWRTdUVUZETlVJN1RVRkZRU3hWUVVGVkxFTkJRVU03VVVGRFZDeExRVUZMTzFGQlEwd3NVVUZCVVN4RlFVRkZMSEZEUVVGM1FpeERRVUZETEdOQlFXTTdVVUZEYWtRc1VVRkJVU3hGUVVGRk8xVkJRMUlzUjBGQlJ5eEZRVUZGTzFGQlExQXNRMEZCUXp0UlFVTkVMRlZCUVZVc1JVRkJSVHROUVVOa0xFTkJRVU1zUTBGQlF6dE5RVVZHTEU5QlFVOHNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkRia0lzUTBGQlF5eERRVUZETzBWQlEwb3NRMEZCUXp0QlFVTklPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNKU1FTeEpRVUZCTEdWQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hyUWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVGdlJDeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGRmNFUXNUVUZCVFN4dFFrRkJiVUlzVTBGQlV5eDNRa0ZCWXl4RFFVRkRPMFZCUXk5RExGZEJRVmNzUTBGQlF5eFpRVUZaTEVWQlFVVXNTMEZCU3l4RlFVRkZPMGxCUXk5Q0xFMUJRVTBzU1VGQlNTeEhRVUZITzAxQlFVVXNWVUZCVlN4RlFVRkZMRWxCUVVrN1RVRkJSU3hIUVVGSE8wbEJRVTBzUTBGQlF6dEpRVU16UXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRE8wbEJRMWdzU1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4WlFVRlpPMFZCUTI1RE96dEZRVVZCTzBWQlEwRXNUVUZCVFN4RFFVRkRMRXRCUVVzc1JVRkJSU3hSUVVGUkxFVkJRVVVzVVVGQlVTeEZRVUZGTzBsQlEyaERMRWxCUVVFc01FSkJRV2xDTEVWQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhMUVVGTExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNN1JVRkRiRVU3UVVGRFJqdEJRVVZsTEZOQlFWTXNaMEpCUVdkQ0xFTkJRVU1zV1VGQldTeEZRVUZGTEV0QlFVc3NSVUZCUlR0RlFVTTFSQ3hQUVVGUExFbEJRVWtzYlVKQlFXMUNMRU5CUVVNc1dVRkJXU3hGUVVGRkxFdEJRVXNzUTBGQlF6dEJRVU55UkRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnNRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTJVc1UwRkJVeXh4UWtGQmNVSXNRMEZCUXl4SlFVRkpMRVZCUVVVN1JVRkRiRVFzVDBGQlR5eFRRVUZUTEdWQlFXVXNRMEZCUVN4RFFVTTNRaXhyUWtGQmJVSXNSMEZCUnl4RlFVTjBRaXhyUWtGQmJVSXNRMEZCUXl4RlFVTndRaXgxUWtGQmQwSXNTVUZCU1N4RlFVTTFRanRKUVVOQkxFZEJRVWNzUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzN1NVRkRkRUlzU1VGQlNTeERRVUZETEVOQlFVTTdSVUZEVWl4RFFVRkRPMEZCUTBnN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRaa0VzVFVGQlRTeEhRVUZITEVkQlFVY3NRMEZEVmp0RlFVTkZMRkZCUVZFc1JVRkJSU3hKUVVGSk8wVkJRMlFzVFVGQlRTeEZRVUZGTEVOQlFVTTdTVUZCUlN4SlFVRkpMRVZCUVVVc1RVRkJUVHRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNRMEZCUXp0RlFVTXpReXhKUVVGSkxFVkJRVVVzVlVGQlZUdEZRVU5vUWl4UFFVRlBMRVZCUVVVc1EwRkJRenRKUVVGRkxFbEJRVWtzUlVGQlJTeEZRVUZGTzBsQlFVVXNTVUZCU1N4RlFVRkZPMFZCUVZVc1EwRkJReXhEUVVGRE8wVkJRM2hETEU5QlFVOHNSVUZCUlN4TFFVRkxPMFZCUTJRc1NVRkJTU3hGUVVGRk8wRkJRMUlzUTBGQlF5eEZRVU5FTzBWQlEwVXNVVUZCVVN4RlFVRkZMRWxCUVVrN1JVRkRaQ3hOUVVGTkxFVkJRVVVzUTBGQlF6dEpRVUZGTEVsQlFVa3NSVUZCUlN4TlFVRk5PMGxCUVVVc1NVRkJTU3hGUVVGRk8wVkJRVlVzUTBGQlF5eERRVUZETzBWQlF6TkRMRWxCUVVrc1JVRkJSU3hQUVVGUE8wVkJRMklzVDBGQlR5eEZRVUZGTEVOQlFVTTdTVUZCUlN4SlFVRkpMRVZCUVVVc1JVRkJSVHRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNRMEZCUXp0RlFVTjRReXhQUVVGUExFVkJRVVVzUzBGQlN6dEZRVU5rTEVsQlFVa3NSVUZCUlR0QlFVTlNMRU5CUVVNc1JVRkRSRHRGUVVORkxGRkJRVkVzUlVGQlJTeExRVUZMTzBWQlEyWXNUVUZCVFN4RlFVRkZMRU5CUTA0N1NVRkJSU3hKUVVGSkxFVkJRVVVzVFVGQlRUdEpRVUZGTEVsQlFVa3NSVUZCUlR0RlFVRlZMRU5CUVVNc1JVRkRha003U1VGQlJTeEpRVUZKTEVWQlFVVXNUMEZCVHp0SlFVRkZMRWxCUVVrc1JVRkJSVHRGUVVGVkxFTkJRVU1zUlVGRGJFTTdTVUZCUlN4SlFVRkpMRVZCUVVVc1QwRkJUenRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNRMEZEYmtNN1JVRkRSQ3hKUVVGSkxFVkJRVVVzYVVKQlFXbENPMFZCUTNaQ0xFOUJRVThzUlVGQlJTeEZRVUZGTzBWQlExZ3NUMEZCVHl4RlFVRkZMRXRCUVVzN1JVRkRaQ3hKUVVGSkxFVkJRVVU3UVVGRFVpeERRVUZETEVWQlEwUTdSVUZEUlN4UlFVRlJMRVZCUVVVc1MwRkJTenRGUVVObUxFMUJRVTBzUlVGQlJTeERRVU5PTzBsQlFVVXNTVUZCU1N4RlFVRkZMRTFCUVUwN1NVRkJSU3hKUVVGSkxFVkJRVVU3UlVGQlZTeERRVUZETEVWQlEycERPMGxCUVVVc1NVRkJTU3hGUVVGRkxFdEJRVXM3U1VGQlJTeEpRVUZKTEVWQlFVVTdSVUZCVXl4RFFVRkRMRU5CUTJoRE8wVkJRMFFzU1VGQlNTeEZRVUZGTEZGQlFWRTdSVUZEWkN4UFFVRlBMRVZCUVVVc1JVRkJSVHRGUVVOWUxFOUJRVThzUlVGQlJTeExRVUZMTzBWQlEyUXNTVUZCU1N4RlFVRkZPMEZCUTFJc1EwRkJReXhGUVVORU8wVkJRMFVzVVVGQlVTeEZRVUZGTEVsQlFVazdSVUZEWkN4TlFVRk5MRVZCUVVVc1EwRkJRenRKUVVGRkxFbEJRVWtzUlVGQlJTeE5RVUZOTzBsQlFVVXNTVUZCU1N4RlFVRkZPMFZCUVZVc1EwRkJReXhEUVVGRE8wVkJRek5ETEVsQlFVa3NSVUZCUlN4TFFVRkxPMFZCUTFnc1QwRkJUeXhGUVVGRkxFTkJRVU03U1VGQlJTeEpRVUZKTEVWQlFVVXNSVUZCUlR0SlFVRkZMRWxCUVVrc1JVRkJSVHRGUVVGVExFTkJRVU1zUTBGQlF6dEZRVU4yUXl4UFFVRlBMRVZCUVVVc1MwRkJTenRGUVVOa0xFbEJRVWtzUlVGQlJUdEJRVU5TTEVOQlFVTXNSVUZEUkR0RlFVTkZMRkZCUVZFc1JVRkJSU3hMUVVGTE8wVkJRMllzVFVGQlRTeEZRVUZGTEVOQlEwNDdTVUZCUlN4SlFVRkpMRVZCUVVVc1RVRkJUVHRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNSVUZEYWtNN1NVRkJSU3hKUVVGSkxFVkJRVVVzVlVGQlZUdEpRVUZGTEVsQlFVa3NSVUZCUlR0RlFVRlZMRU5CUVVNc1EwRkRkRU03UlVGRFJDeEpRVUZKTEVWQlFVVXNZVUZCWVR0RlFVTnVRaXhQUVVGUExFVkJRVVVzUlVGQlJUdEZRVU5ZTEU5QlFVOHNSVUZCUlN4TFFVRkxPMFZCUTJRc1NVRkJTU3hGUVVGRk8wRkJRMUlzUTBGQlF5eEZRVU5FTzBWQlEwVXNVVUZCVVN4RlFVRkZMRXRCUVVzN1JVRkRaaXhOUVVGTkxFVkJRVVVzUTBGRFRqdEpRVUZGTEVsQlFVa3NSVUZCUlN4TlFVRk5PMGxCUVVVc1NVRkJTU3hGUVVGRk8wVkJRVlVzUTBGQlF5eEZRVU5xUXp0SlFVRkZMRWxCUVVrc1JVRkJSU3hQUVVGUE8wbEJRVVVzU1VGQlNTeEZRVUZGTzBWQlFWVXNRMEZCUXl4RFFVTnVRenRGUVVORUxFbEJRVWtzUlVGQlJTeFZRVUZWTzBWQlEyaENMRTlCUVU4c1JVRkJSU3hGUVVGRk8wVkJRMWdzVDBGQlR5eEZRVUZGTEV0QlFVczdSVUZEWkN4SlFVRkpMRVZCUVVVN1FVRkRVaXhEUVVGRExFVkJRMFE3UlVGRFJTeFRRVUZUTEVWQlFVVXNTMEZCU3p0RlFVTm9RaXhOUVVGTkxFVkJRVVVzUTBGRFRqdEpRVUZGTEU5QlFVOHNSVUZCUlN4SlFVRkpPMGxCUVVVc1NVRkJTU3hGUVVGRkxFMUJRVTA3U1VGQlJTeEpRVUZKTEVWQlFVVTdSVUZCVlN4RFFVRkRMRVZCUTJoRU8wbEJRVVVzVDBGQlR5eEZRVUZGTEV0QlFVczdTVUZCUlN4SlFVRkpMRVZCUVVVc1QwRkJUenRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNRMEZEYmtRN1JVRkRSQ3hKUVVGSkxFVkJRVVVzVlVGQlZUdEZRVU5vUWl4SlFVRkpMRVZCUVVVN1FVRkRVaXhEUVVGRExFVkJRMFE3UlVGRFJTeFRRVUZUTEVWQlFVVXNTMEZCU3p0RlFVTm9RaXhOUVVGTkxFVkJRVVVzUTBGRFRqdEpRVUZGTEU5QlFVOHNSVUZCUlN4SlFVRkpPMGxCUVVVc1NVRkJTU3hGUVVGRkxFMUJRVTA3U1VGQlJTeEpRVUZKTEVWQlFVVTdSVUZCVlN4RFFVRkRMRVZCUTJoRU8wbEJRVVVzVDBGQlR5eEZRVUZGTEVsQlFVazdTVUZCUlN4SlFVRkpMRVZCUVVVc1QwRkJUenRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNSVUZEYWtRN1NVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN6dEpRVUZGTEVsQlFVa3NSVUZCUlN4UFFVRlBPMGxCUVVVc1NVRkJTU3hGUVVGRk8wVkJRVlVzUTBGQlF5eERRVU51UkR0RlFVTkVMRWxCUVVrc1JVRkJSU3hWUVVGVk8wVkJRMmhDTEVsQlFVa3NSVUZCUlR0QlFVTlNMRU5CUVVNc1JVRkRSRHRGUVVORkxGTkJRVk1zUlVGQlJTeExRVUZMTzBWQlEyaENMRTFCUVUwc1JVRkJSU3hEUVVOT08wbEJRVVVzVDBGQlR5eEZRVUZGTEVsQlFVazdTVUZCUlN4SlFVRkpMRVZCUVVVc1RVRkJUVHRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNSVUZEYUVRN1NVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN6dEpRVUZGTEVsQlFVa3NSVUZCUlN4VlFVRlZPMGxCUVVVc1NVRkJTU3hGUVVGRk8wVkJRVlVzUTBGQlF5eERRVU4wUkR0RlFVTkVMRWxCUVVrc1JVRkJSU3hoUVVGaE8wVkJRMjVDTEVsQlFVa3NSVUZCUlR0QlFVTlNMRU5CUVVNc1JVRkRSRHRGUVVORkxGTkJRVk1zUlVGQlJTeExRVUZMTzBWQlEyaENMRTFCUVUwc1JVRkJSU3hEUVVOT08wbEJRVVVzVDBGQlR5eEZRVUZGTEVsQlFVazdTVUZCUlN4SlFVRkpMRVZCUVVVc1RVRkJUVHRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNSVUZEYUVRN1NVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN6dEpRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxPMGxCUVVVc1NVRkJTU3hGUVVGRk8wVkJRVk1zUTBGQlF5eERRVU5vUkR0RlFVTkVMRWxCUVVrc1JVRkJSU3hSUVVGUk8wVkJRMlFzU1VGQlNTeEZRVUZGTzBGQlExSXNRMEZCUXl4RFFVTkdPMEZCUVVNc1NVRkJRU3hSUVVGQkxFZEJRMkVzUjBGQlJ6dEJRVUZCTEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc1VVRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVNMVIyeENMRTFCUVUwc1IwRkJSeXhIUVVGSExFTkJRMVk3UlVGRFJTeFJRVUZSTEVWQlFVVXNTMEZCU3p0RlFVTm1MRTFCUVUwc1JVRkJSU3hEUVVOT08wbEJRVVVzU1VGQlNTeEZRVUZGTEUxQlFVMDdTVUZCUlN4SlFVRkpMRVZCUVVVN1JVRkJWU3hEUVVGRExFVkJRMnBETzBsQlFVVXNTVUZCU1N4RlFVRkZMRTFCUVUwN1NVRkJSU3hKUVVGSkxFVkJRVVU3UlVGQlZTeERRVUZETEVOQlEyeERPMFZCUTBRc1NVRkJTU3hGUVVGRkxGbEJRVms3UlVGRGJFSXNUMEZCVHl4RlFVRkZMRVZCUVVVN1JVRkRXQ3hQUVVGUExFVkJRVVVzUzBGQlN6dEZRVU5rTEdWQlFXVXNSVUZCUlN4WlFVRlpPMFZCUXpkQ0xFbEJRVWtzUlVGQlJUdEJRVU5TTEVOQlFVTXNSVUZEUkR0RlFVTkZMRkZCUVZFc1JVRkJSU3hKUVVGSk8wVkJRMlFzVFVGQlRTeEZRVUZGTEVOQlFVTTdTVUZCUlN4SlFVRkpMRVZCUVVVc1RVRkJUVHRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNRMEZCUXp0RlFVTXpReXhKUVVGSkxFVkJRVVVzVTBGQlV6dEZRVU5tTEU5QlFVOHNSVUZCUlN4RFFVRkRPMGxCUVVVc1NVRkJTU3hGUVVGRkxFVkJRVVU3U1VGQlJTeEpRVUZKTEVWQlFVVTdSVUZCVlN4RFFVRkRMRU5CUVVNN1JVRkRlRU1zVDBGQlR5eEZRVUZGTEV0QlFVczdSVUZEWkN4bFFVRmxMRVZCUVVVc1RVRkJUVHRGUVVOMlFpeEpRVUZKTEVWQlFVVTdRVUZEVWl4RFFVRkRMRVZCUTBRN1JVRkRSU3hSUVVGUkxFVkJRVVVzU1VGQlNUdEZRVU5rTEUxQlFVMHNSVUZCUlN4RFFVRkRPMGxCUVVVc1NVRkJTU3hGUVVGRkxHRkJRV0U3U1VGQlJTeEpRVUZKTEVWQlFVVTdSVUZCVXl4RFFVRkRMRU5CUVVNN1JVRkRha1FzU1VGQlNTeEZRVUZGTEcxQ1FVRnRRanRGUVVONlFpeFBRVUZQTEVWQlFVVXNRMEZCUXp0SlFVRkZMRWxCUVVrc1JVRkJSU3hGUVVGRk8wbEJRVVVzU1VGQlNTeEZRVUZGTzBWQlFVOHNRMEZCUXl4RFFVRkRPMFZCUTNKRExFOUJRVThzUlVGQlJTeExRVUZMTzBWQlEyUXNaVUZCWlN4RlFVRkZMRTFCUVUwN1JVRkRka0lzU1VGQlNTeEZRVUZGTzBGQlExSXNRMEZCUXl4RlFVTkVPMFZCUTBVc1VVRkJVU3hGUVVGRkxFdEJRVXM3UlVGRFppeE5RVUZOTEVWQlFVVXNRMEZEVGp0SlFVRkZMRWxCUVVrc1JVRkJSU3hOUVVGTk8wbEJRVVVzU1VGQlNTeEZRVUZGTzBWQlFWVXNRMEZCUXl4RlFVTnFRenRKUVVGRkxFbEJRVWtzUlVGQlJTeExRVUZMTzBsQlFVVXNTVUZCU1N4RlFVRkZPMFZCUVZNc1EwRkJReXhGUVVNdlFqdEpRVUZGTEVsQlFVa3NSVUZCUlN4UFFVRlBPMGxCUVVVc1NVRkJTU3hGUVVGRk8wVkJRVk1zUTBGQlF5eERRVU5zUXp0RlFVTkVMRWxCUVVrc1JVRkJSU3hUUVVGVE8wVkJRMllzVDBGQlR5eEZRVUZGTEVWQlFVVTdSVUZEV0N4UFFVRlBMRVZCUVVVc1MwRkJTenRGUVVOa0xHVkJRV1VzUlVGQlJTeFpRVUZaTzBWQlF6ZENMRWxCUVVrc1JVRkJSVHRCUVVOU0xFTkJRVU1zUlVGRFJEdEZRVU5GTEZGQlFWRXNSVUZCUlN4SlFVRkpPMFZCUTJRc1RVRkJUU3hGUVVGRkxFTkJRMDQ3U1VGQlJTeEpRVUZKTEVWQlFVVXNUVUZCVFR0SlFVRkZMRWxCUVVrc1JVRkJSVHRGUVVGVkxFTkJRVU1zUlVGRGFrTTdTVUZCUlN4SlFVRkpMRVZCUVVVc1kwRkJZenRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNRMEZETVVNN1JVRkRSQ3hKUVVGSkxFVkJRVVVzUzBGQlN6dEZRVU5ZTEU5QlFVOHNSVUZCUlN4RFFVTlFPMGxCUVVVc1NVRkJTU3hGUVVGRkxHRkJRV0U3U1VGQlJTeEpRVUZKTEVWQlFVVTdSVUZCVlN4RFFVRkRMRVZCUTNoRE8wbEJRVVVzU1VGQlNTeEZRVUZGTEUxQlFVMDdTVUZCUlN4SlFVRkpMRVZCUVVVN1JVRkJVU3hEUVVGRExFTkJRMmhETzBWQlEwUXNUMEZCVHl4RlFVRkZMRXRCUVVzN1JVRkRaQ3hsUVVGbExFVkJRVVVzVFVGQlRUdEZRVU4yUWl4SlFVRkpMRVZCUVVVN1FVRkRVaXhEUVVGRExFVkJRMFE3UlVGRFJTeFJRVUZSTEVWQlFVVXNTMEZCU3p0RlFVTm1MRTFCUVUwc1JVRkJSU3hEUVVOT08wbEJRVVVzU1VGQlNTeEZRVUZGTEUxQlFVMDdTVUZCUlN4SlFVRkpMRVZCUVVVN1JVRkJWU3hEUVVGRExFVkJRMnBETzBsQlFVVXNTVUZCU1N4RlFVRkZMRWRCUVVjN1NVRkJSU3hKUVVGSkxFVkJRVVU3UlVGQlZTeERRVUZETEVWQlF6bENPMGxCUVVVc1NVRkJTU3hGUVVGRkxFZEJRVWM3U1VGQlJTeEpRVUZKTEVWQlFVVTdSVUZCVlN4RFFVRkRMRU5CUXk5Q08wVkJRMFFzU1VGQlNTeEZRVUZGTEZkQlFWYzdSVUZEYWtJc1QwRkJUeXhGUVVGRkxFVkJRVVU3UlVGRFdDeFBRVUZQTEVWQlFVVXNTMEZCU3p0RlFVTmtMR1ZCUVdVc1JVRkJSU3haUVVGWk8wVkJRemRDTEVsQlFVa3NSVUZCUlR0QlFVTlNMRU5CUVVNc1JVRkRSRHRGUVVORkxGRkJRVkVzUlVGQlJTeExRVUZMTzBWQlEyWXNUVUZCVFN4RlFVRkZMRU5CUTA0N1NVRkJSU3hKUVVGSkxFVkJRVVVzVFVGQlRUdEpRVUZGTEVsQlFVa3NSVUZCUlR0RlFVRlZMRU5CUVVNc1JVRkRha003U1VGQlJTeEpRVUZKTEVWQlFVVXNUVUZCVFR0SlFVRkZMRWxCUVVrc1JVRkJSVHRGUVVGUkxFTkJRVU1zUTBGRGFFTTdSVUZEUkN4SlFVRkpMRVZCUVVVc1owSkJRV2RDTzBWQlEzUkNMRTlCUVU4c1JVRkJSU3hGUVVGRk8wVkJRMWdzVDBGQlR5eEZRVUZGTEV0QlFVczdSVUZEWkN4bFFVRmxMRVZCUVVVc1dVRkJXVHRGUVVNM1FpeEpRVUZKTEVWQlFVVTdRVUZEVWl4RFFVRkRMRVZCUTBRN1JVRkRSU3hSUVVGUkxFVkJRVVVzU1VGQlNUdEZRVU5rTEUxQlFVMHNSVUZCUlN4RFFVRkRPMGxCUVVVc1NVRkJTU3hGUVVGRkxFMUJRVTA3U1VGQlJTeEpRVUZKTEVWQlFVVTdSVUZCVlN4RFFVRkRMRU5CUVVNN1JVRkRNME1zU1VGQlNTeEZRVUZGTEUxQlFVMDdSVUZEV2l4UFFVRlBMRVZCUVVVc1EwRkJRenRKUVVGRkxFbEJRVWtzUlVGQlJTeEZRVUZGTzBsQlFVVXNTVUZCU1N4RlFVRkZPMFZCUVZVc1EwRkJReXhEUVVGRE8wVkJRM2hETEU5QlFVOHNSVUZCUlN4TFFVRkxPMFZCUTJRc1pVRkJaU3hGUVVGRkxFMUJRVTA3UlVGRGRrSXNTVUZCU1N4RlFVRkZPMEZCUTFJc1EwRkJReXhGUVVORU8wVkJRMFVzVVVGQlVTeEZRVUZGTEVsQlFVazdSVUZEWkN4TlFVRk5MRVZCUVVVc1EwRkRUanRKUVVGRkxFbEJRVWtzUlVGQlJTeE5RVUZOTzBsQlFVVXNTVUZCU1N4RlFVRkZPMFZCUVZVc1EwRkJReXhGUVVOcVF6dEpRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxPMGxCUVVVc1NVRkJTU3hGUVVGRk8wVkJRVk1zUTBGQlF5eERRVU5vUXp0RlFVTkVMRWxCUVVrc1JVRkJSU3hOUVVGTk8wVkJRMW9zVDBGQlR5eEZRVUZGTEVOQlFVTTdTVUZCUlN4SlFVRkpMRVZCUVVVc1JVRkJSVHRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZUTEVOQlFVTXNRMEZCUXp0RlFVTjJReXhQUVVGUExFVkJRVVVzUzBGQlN6dEZRVU5rTEdWQlFXVXNSVUZCUlN4TlFVRk5PMFZCUTNaQ0xFbEJRVWtzUlVGQlJUdEJRVU5TTEVOQlFVTXNSVUZEUkR0RlFVTkZMRkZCUVZFc1JVRkJSU3hMUVVGTE8wVkJRMllzVFVGQlRTeEZRVUZGTEVOQlEwNDdTVUZCUlN4SlFVRkpMRVZCUVVVc1RVRkJUVHRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNSVUZEYWtNN1NVRkJSU3hKUVVGSkxFVkJRVVVzWVVGQllUdEpRVUZGTEVsQlFVa3NSVUZCUlR0RlFVRlZMRU5CUVVNc1JVRkRlRU03U1VGQlJTeEpRVUZKTEVWQlFVVXNUVUZCVFR0SlFVRkZMRWxCUVVrc1JVRkJSVHRGUVVGUkxFTkJRVU1zUTBGRGFFTTdSVUZEUkN4SlFVRkpMRVZCUVVVc1VVRkJVVHRGUVVOa0xFOUJRVThzUlVGQlJTeEZRVUZGTzBWQlExZ3NUMEZCVHl4RlFVRkZMRXRCUVVzN1JVRkRaQ3hsUVVGbExFVkJRVVVzV1VGQldUdEZRVU0zUWl4SlFVRkpMRVZCUVVVN1FVRkRVaXhEUVVGRExFVkJRMFE3UlVGRFJTeFJRVUZSTEVWQlFVVXNTVUZCU1R0RlFVTmtMRTFCUVUwc1JVRkJSU3hEUVVGRE8wbEJRVVVzU1VGQlNTeEZRVUZGTEUxQlFVMDdTVUZCUlN4SlFVRkpMRVZCUVVVN1JVRkJWU3hEUVVGRExFTkJRVU03UlVGRE0wTXNTVUZCU1N4RlFVRkZMRTFCUVUwN1JVRkRXaXhQUVVGUExFVkJRVVVzUTBGQlF6dEpRVUZGTEVsQlFVa3NSVUZCUlN4RlFVRkZPMGxCUVVVc1NVRkJTU3hGUVVGRk8wVkJRVk1zUTBGQlF5eERRVUZETzBWQlEzWkRMRTlCUVU4c1JVRkJSU3hMUVVGTE8wVkJRMlFzWlVGQlpTeEZRVUZGTEUxQlFVMDdSVUZEZGtJc1NVRkJTU3hGUVVGRk8wRkJRMUlzUTBGQlF5eEZRVU5FTzBWQlEwVXNVVUZCVVN4RlFVRkZMRXRCUVVzN1JVRkRaaXhOUVVGTkxFVkJRVVVzUTBGRFRqdEpRVUZGTEVsQlFVa3NSVUZCUlN4TlFVRk5PMGxCUVVVc1NVRkJTU3hGUVVGRk8wVkJRVlVzUTBGQlF5eEZRVU5xUXp0SlFVRkZMRWxCUVVrc1JVRkJSU3hOUVVGTk8wbEJRVVVzU1VGQlNTeEZRVUZGTzBWQlFWTXNRMEZCUXl4RFFVTnFRenRGUVVORUxFbEJRVWtzUlVGQlJTeFRRVUZUTzBWQlEyWXNUMEZCVHl4RlFVRkZMRVZCUVVVN1JVRkRXQ3hQUVVGUExFVkJRVVVzUzBGQlN6dEZRVU5rTEdWQlFXVXNSVUZCUlN4WlFVRlpPMFZCUXpkQ0xFbEJRVWtzUlVGQlJUdEJRVU5TTEVOQlFVTXNSVUZEUkR0RlFVTkZMRkZCUVZFc1JVRkJSU3hKUVVGSk8wVkJRMlFzVFVGQlRTeEZRVUZGTEVOQlFVTTdTVUZCUlN4SlFVRkpMRVZCUVVVc1RVRkJUVHRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNRMEZCUXp0RlFVTXpReXhKUVVGSkxFVkJRVVVzWVVGQllUdEZRVU51UWl4UFFVRlBMRVZCUVVVc1EwRkJRenRKUVVGRkxFbEJRVWtzUlVGQlJTeEZRVUZGTzBsQlFVVXNTVUZCU1N4RlFVRkZPMFZCUVZFc1EwRkJReXhEUVVGRE8wVkJRM1JETEU5QlFVOHNSVUZCUlN4TFFVRkxPMFZCUTJRc1pVRkJaU3hGUVVGRkxFMUJRVTA3UlVGRGRrSXNTVUZCU1N4RlFVRkZPMEZCUTFJc1EwRkJReXhGUVVORU8wVkJRMFVzVVVGQlVTeEZRVUZGTEVsQlFVazdSVUZEWkN4TlFVRk5MRVZCUVVVc1EwRkJRenRKUVVGRkxFbEJRVWtzUlVGQlJTeE5RVUZOTzBsQlFVVXNTVUZCU1N4RlFVRkZPMFZCUVZVc1EwRkJReXhEUVVGRE8wVkJRek5ETEVsQlFVa3NSVUZCUlN4UlFVRlJPMFZCUTJRc1QwRkJUeXhGUVVGRkxFTkJRMUE3U1VGQlJTeEpRVUZKTEVWQlFVVXNSMEZCUnp0SlFVRkZMRWxCUVVrc1JVRkJSVHRGUVVGVkxFTkJRVU1zUlVGRE9VSTdTVUZCUlN4SlFVRkpMRVZCUVVVc1IwRkJSenRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNRMEZETDBJN1JVRkRSQ3hQUVVGUExFVkJRVVVzUzBGQlN6dEZRVU5rTEdWQlFXVXNSVUZCUlN4TlFVRk5PMFZCUTNaQ0xFbEJRVWtzUlVGQlJUdEJRVU5TTEVOQlFVTXNSVUZEUkR0RlFVTkZMRkZCUVZFc1JVRkJSU3hMUVVGTE8wVkJRMllzVFVGQlRTeEZRVUZGTEVOQlEwNDdTVUZCUlN4SlFVRkpMRVZCUVVVc1RVRkJUVHRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNSVUZEYWtNN1NVRkJSU3hKUVVGSkxFVkJRVVVzVFVGQlRUdEpRVUZGTEVsQlFVa3NSVUZCUlR0RlFVRlZMRU5CUVVNc1EwRkRiRU03UlVGRFJDeEpRVUZKTEVWQlFVVXNVMEZCVXp0RlFVTm1MRTlCUVU4c1JVRkJSU3hGUVVGRk8wVkJRMWdzVDBGQlR5eEZRVUZGTEV0QlFVczdSVUZEWkN4bFFVRmxMRVZCUVVVc1dVRkJXVHRGUVVNM1FpeEpRVUZKTEVWQlFVVTdRVUZEVWl4RFFVRkRMRVZCUTBRN1JVRkRSU3hOUVVGTkxFVkJRVVVzUTBGQlF6dEpRVUZGTEVsQlFVa3NSVUZCUlN4VFFVRlRPMGxCUVVVc1NVRkJTU3hGUVVGRk8wVkJRVlVzUTBGQlF5eERRVUZETzBWQlF6bERMRTlCUVU4c1JVRkJSU3hMUVVGTE8wVkJRMlFzWlVGQlpTeEZRVUZGTEZsQlFWazdSVUZETjBJc1NVRkJTU3hGUVVGRk8wRkJRMUlzUTBGQlF5eEZRVU5FTzBWQlEwVXNVMEZCVXl4RlFVRkZMRXRCUVVzN1JVRkRhRUlzVFVGQlRTeEZRVUZGTEVOQlEwNDdTVUZCUlN4UFFVRlBMRVZCUVVVc1NVRkJTVHRKUVVGRkxFbEJRVWtzUlVGQlJTeE5RVUZOTzBsQlFVVXNTVUZCU1N4RlFVRkZPMFZCUVZVc1EwRkJReXhGUVVOb1JEdEpRVUZGTEU5QlFVOHNSVUZCUlN4TFFVRkxPMGxCUVVVc1NVRkJTU3hGUVVGRkxFZEJRVWM3U1VGQlJTeEpRVUZKTEVWQlFVVTdSVUZCVlN4RFFVRkRMRU5CUXk5RE8wVkJRMFFzU1VGQlNTeEZRVUZGTEdGQlFXRTdSVUZEYmtJc1NVRkJTU3hGUVVGRk8wRkJRMUlzUTBGQlF5eEZRVU5FTzBWQlEwVXNVMEZCVXl4RlFVRkZMRXRCUVVzN1JVRkRhRUlzVFVGQlRTeEZRVUZGTEVOQlEwNDdTVUZCUlN4UFFVRlBMRVZCUVVVc1NVRkJTVHRKUVVGRkxFbEJRVWtzUlVGQlJTeE5RVUZOTzBsQlFVVXNTVUZCU1N4RlFVRkZPMFZCUVZVc1EwRkJReXhGUVVOb1JEdEpRVUZGTEU5QlFVOHNSVUZCUlN4TFFVRkxPMGxCUVVVc1NVRkJTU3hGUVVGRkxFMUJRVTA3U1VGQlJTeEpRVUZKTEVWQlFVVTdSVUZCVXl4RFFVRkRMRU5CUTJwRU8wVkJRMFFzU1VGQlNTeEZRVUZGTEdGQlFXRTdSVUZEYmtJc1NVRkJTU3hGUVVGRk8wRkJRMUlzUTBGQlF5eEZRVU5FTzBWQlEwVXNVMEZCVXl4RlFVRkZMRXRCUVVzN1JVRkRhRUlzVFVGQlRTeEZRVUZGTEVOQlEwNDdTVUZCUlN4UFFVRlBMRVZCUVVVc1NVRkJTVHRKUVVGRkxFbEJRVWtzUlVGQlJTeE5RVUZOTzBsQlFVVXNTVUZCU1N4RlFVRkZPMFZCUVZVc1EwRkJReXhGUVVOb1JEdEpRVUZGTEU5QlFVOHNSVUZCUlN4SlFVRkpPMGxCUVVVc1NVRkJTU3hGUVVGRkxHRkJRV0U3U1VGQlJTeEpRVUZKTEVWQlFVVTdSVUZCVlN4RFFVRkRMRU5CUTNoRU8wVkJRMFFzU1VGQlNTeEZRVUZGTEZsQlFWazdSVUZEYkVJc1NVRkJTU3hGUVVGRk8wRkJRMUlzUTBGQlF5eEZRVU5FTzBWQlEwVXNVMEZCVXl4RlFVRkZMRXRCUVVzN1JVRkRhRUlzVFVGQlRTeEZRVUZGTEVOQlEwNDdTVUZCUlN4UFFVRlBMRVZCUVVVc1NVRkJTVHRKUVVGRkxFbEJRVWtzUlVGQlJTeE5RVUZOTzBsQlFVVXNTVUZCU1N4RlFVRkZPMFZCUVZVc1EwRkJReXhGUVVOb1JEdEpRVUZGTEU5QlFVOHNSVUZCUlN4TFFVRkxPMGxCUVVVc1NVRkJTU3hGUVVGRkxFZEJRVWM3U1VGQlJTeEpRVUZKTEVWQlFVVTdSVUZCVlN4RFFVRkRMRVZCUXpsRE8wbEJRVVVzVDBGQlR5eEZRVUZGTEV0QlFVczdTVUZCUlN4SlFVRkpMRVZCUVVVc1IwRkJSenRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNRMEZETDBNN1JVRkRSQ3hKUVVGSkxFVkJRVVVzWlVGQlpUdEZRVU55UWl4SlFVRkpMRVZCUVVVN1FVRkRVaXhEUVVGRExFVkJRMFE3UlVGRFJTeFRRVUZUTEVWQlFVVXNTMEZCU3p0RlFVTm9RaXhOUVVGTkxFVkJRVVVzUTBGRFRqdEpRVUZGTEU5QlFVOHNSVUZCUlN4SlFVRkpPMGxCUVVVc1NVRkJTU3hGUVVGRkxFMUJRVTA3U1VGQlJTeEpRVUZKTEVWQlFVVTdSVUZCVlN4RFFVRkRMRVZCUTJoRU8wbEJRVVVzVDBGQlR5eEZRVUZGTEV0QlFVczdTVUZCUlN4SlFVRkpMRVZCUVVVc1dVRkJXVHRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZUTEVOQlFVTXNSVUZEZEVRN1NVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN6dEpRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxPMGxCUVVVc1NVRkJTU3hGUVVGRk8wVkJRVk1zUTBGQlF5eERRVU5vUkR0RlFVTkVMRWxCUVVrc1JVRkJSU3hoUVVGaE8wVkJRMjVDTEVsQlFVa3NSVUZCUlR0QlFVTlNMRU5CUVVNc1JVRkRSRHRGUVVORkxGTkJRVk1zUlVGQlJTeExRVUZMTzBWQlEyaENMRTFCUVUwc1JVRkJSU3hEUVVOT08wbEJRVVVzVDBGQlR5eEZRVUZGTEVsQlFVazdTVUZCUlN4SlFVRkpMRVZCUVVVc1RVRkJUVHRKUVVGRkxFbEJRVWtzUlVGQlJUdEZRVUZWTEVOQlFVTXNSVUZEYUVRN1NVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN6dEpRVUZGTEVsQlFVa3NSVUZCUlN4TlFVRk5PMGxCUVVVc1NVRkJTU3hGUVVGRk8wVkJRVkVzUTBGQlF5eERRVU5vUkR0RlFVTkVMRWxCUVVrc1JVRkJSU3h2UWtGQmIwSTdSVUZETVVJc1NVRkJTU3hGUVVGRk8wRkJRMUlzUTBGQlF5eERRVU5HTzBGQlFVTXNTVUZCUVN4UlFVRkJMRWRCUTJFc1IwRkJSenRCUVVGQkxFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNVVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTXpUMnhDTEVsQlFVRXNhMEpCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNhMEpCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEdOQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVR0QlFVTkJMRWxCUVVFc2FVSkJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1owSkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNNRUpCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEZsQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzYzBKQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkRRU3hKUVVGQkxGbEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc2MwSkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZCSzBNc2NVTkJRVUVzUlVGQlFTeFBRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hIUVVGQkxFZEJRVUVzUlVGQlFTeFRRVUZCTEVkQlFVRXNSVUZCUVN4RFFVRkJMRVZCUVVFN1FVRkZhRU1zZVVOQlFYbERPenM3UTBGQmEwSXNSVUZCUlR0RlFVTXhSU3hOUVVGTkxFMUJRVTBzU1VGQlNTeFhRVUZCTEZGQlFVY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRVHRGUVVNM1FpeE5RVUZOTEU5QlFVOHNaVUZCUVN4UlFVRlJMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlFUdEZRVU5vUXl4TlFVRk5MRmRCUVZjc1NVRkJTU3hqUVVGQkxGRkJRVmNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVRzN1JVRkZja01zVFVGQlRTeFZRVUZWTEUxQlFVMHNVMEZCVXl4RFFVRkRMRTFCUVUwc1IwRkJSeXhaUVVGWkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUVR0RlFVTTFSQ3hOUVVGTkxHdENRVUZyUWl4eFFrRkJjVUlzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVR0RlFVTjBSQ3hKUVVGSkxFTkJRVU1zWlVGQlpTeEZRVUZGTzBsQlEzQkNMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRMW9zUTBGQlFTd3dSRUZCUVN4RlFVRTBSQ3hQUVVGUkxFTkJRVUVzUTBGQlFTeERRVU4yUlN4RFFVRkRMRU5CUVVFN1IwRkRTRHRGUVVOQkxFMUJRVTBzVjBGQlZ5eFJRVUZSTEVOQlFVTXNVMEZCUVN4UlFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZCT3p0RlFVVXhSQ3hOUVVGTkxIVkNRVUYxUWl4TlFVRk5MRkZCUVZFc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZCTzBWQlF6RkVMRTFCUVUwc2EwSkJRV3RDTEc5Q1FVRnZRaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzBWQlF5OURMRWxCUVVrc1pVRkJaU3hEUVVGRExHVkJRV1VzUTBGQlF5eEZRVUZGTzBsQlEzQkRMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVVVzUTBGQlFTdzRRMEZCUVN4RlFVRm5SQ3hKUVVGTExFTkJRVUVzUTBGQlFTeERRVUZGTEVOQlFVTXNRMEZCUVR0SFFVTXpSVHRGUVVOQkxFMUJRVTBzVjBGQlZ5eFJRVUZSTEVOQlFVTXNVMEZCUVN4UlFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZCTzBWQlJURkVMRTFCUVUwc2NVSkJRWEZDTEUxQlFVMHNVVUZCVVN4clFrRkJhMElzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUVR0RlFVTjZSU3hOUVVGTkxHMUNRVUZ0UWl4TlFVRk5MRkZCUVZFc2EwSkJRV3RDTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVFN1JVRkRka1VzU1VGQlNTeHJRa0ZCYTBJc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJUdEpRVU42UWl4TlFVRk5MSE5DUVVGelFpeE5RVUZOTEZGQlFWRXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk8wbEJRelZFTEUxQlFVMHNhVUpCUVdsQ0xHMUNRVUZ0UWl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJRemRETEVsQlFVa3NjVUpCUVhGQ0xGbEJRVUVzVVVGQlZ5eFBRVUZQTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVFN1NVRkRNMFFzVFVGQlRTeFBRVUZQTEZsQlFVRXNVVUZCVnl4VFFVRlRMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVUU3U1VGRmFrUXNTVUZCU1N4SlFVRkpMRXRCUVVzc1UwRkJVeXhKUVVGSkxFbEJRVWtzUzBGQlN5eFRRVUZUTEVWQlFVVTdUVUZETlVNc2NVSkJRMFVzV1VGQlFTeFJRVUZYTEZGQlFWRXNaMEpCUVdkQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRVHRMUVVNelJEdEpRVVZCTEU5QlFVODdUVUZCUlN4SlFVRkpPMDFCUVVVc1RVRkJUU3hyUWtGQlFUdExRVUZ2UWl4RFFVRkJPMGRCUXpORE8wVkJRMEVzU1VGQlNTeG5Ra0ZCWjBJc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJUczdTVUZGZGtJc1RVRkJUU3h6UWtGQmMwSXNUVUZCVFN4UlFVRlJMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlFUdEpRVU40UkN4TlFVRk5MRlZCUVZVc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1NVRkRkRU1zU1VGQlNTeGxRVUZsTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVN1RVRkROVUlzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZEV2l4RFFVRkJMR2RFUVVGQkxFVkJRV3RFTEVsQlFVc3NRMEZCUVN4RFFVRkJMRU5CUXpGRUxFTkJRVU1zUTBGQlFUdExRVU5JTzBsQlEwRXNUMEZCVHp0TlFVRkZMRTFCUVUwc1ZVRkJWVHROUVVGRkxFMUJRVTBzVDBGQlR5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkJPMHRCUVVjc1EwRkJRVHRIUVVOeVJEdEZRVU5CTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUTFvc1EwRkJRU3g1UTBGQlFTeEZRVUV5UXl4SlFVRkxMRU5CUVVFc2RVVkJRVUVzUTBGRGJrUXNRMEZCUXl4RFFVRkJPME5CUTBnN1FVRkZRU3huUTBGQlowTTdSVUZET1VJc1QwRkJUeXhEUVVOTUxGTkJRVk1zUlVGRFZDeEpRVUZKTEVWQlEwb3NTVUZCU1N4RlFVTktMRXRCUVVzc1JVRkRUQ3h2UlVGQmIwVXNRMEZEY2tVc1UwRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzBOQlEyNUNPenM3T3pzN096dEJRVkZCTEhkRFFVRjNRenRGUVVOMFF5eFJRVUZSTEU5QlFVODdVMEZEVWl4RFFVRkRPMU5CUTBRc1EwRkJRenRUUVVORUxFTkJRVU03VTBGRFJDeERRVUZETzFOQlEwUXNRMEZCUXpzN1RVRkZTaXhQUVVGUExEUkRRVUUwUXl4RFFVRkJPenROUVVWdVJDeFBRVUZQTEVsQlFVa3NRMEZCUVR0SFFVTm1PME5CUTBZN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRM1pHUVN4SlFVRkJMR2RDUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR1ZCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEZsQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzVjBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVR0QlFVTkJMRWxCUVVFc2QwSkJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc2RVSkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZGUVN4SlFVRkJMRzlDUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMQ3REUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4WlFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEZsQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkJiVVFzY1VOQlFVRXNSVUZCUVN4UFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEhRVUZCTEVkQlFVRXNSVUZCUVN4VFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGQkxFVkJRVUU3UVVGRmJrUXNUVUZCVFN4dFFrRkJiVUlzUTBGQlFTeERRVUZCTEVWQlFVRXNhVUpCUVVFc1VVRkJiVUlzUjBGQlJTeERRVUZCTzBGQlJUbERMRTFCUVUwc01rSkJRVEpDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVFN1FVRkZla0lzT0VKQlFUaENPenM3TzBOQlNUVkRMRVZCUVVVN08wVkJSVVFzVFVGQlRTeGpRVUZqTEhkQ1FVRjNRaXhKUVVGSkxFTkJRVVVzVDBGQlV5eERRVUZCTEUxQlFVRXNSVUZCVVN4SFFVRkpMRU5CUVVFc1JVRkJRU3hEUVVGSExFTkJRVU1zUTBGQlFUdEZRVU16UlN4eFFrRkJRU3hSUVVGUExGZEJRVmNzWjBKQlFXZENMRmxCUVZrc1EwRkJReXhwUWtGQmFVSXNSVUZCUlR0SlFVTm9SU3hOUVVGTkxGZEJRVmM3U1VGRGFrSXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJRVHRIUVVOeVFpeERRVUZETEVOQlFVRTdPenRGUVVkR0xFOUJRVTg3TzBsQlJVd3NUVUZCVFN4SFFVRkhPMDFCUTFBc2NVSkJRVUVzVVVGQlR5eFhRVUZYTEdkQ1FVRm5RaXhsUVVGbExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRVHRMUVVOMFJUdEhRVU5FTEVOQlFVRTdSVUZGUkN3d1EwRkJNRU03U1VGRGVFTXNUVUZCVFRzN08wdEJRV01zUjBGQlJ5eFBRVUZQTEVOQlFVRTdPenRKUVVjNVFpeEpRVUZKTEV0QlFVc3NTMEZCU3l4RFFVRkRMRU5CUVVNc1NVRkJTU3hwUWtGQmFVSXNSVUZCUlN4TFFVRkxMRXRCUVVzc1JVRkJSVHROUVVOcVJDeFBRVUZCTzB0QlEwWTdPMGxCUlVFc1RVRkJUVHM3T3pzN1MwRkJiMFFzUjBGQlJ5eEpRVUZKTEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRKUVVONlJTeE5RVUZOTEdOQlFXTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVUU3U1VGRGJrTXNUVUZCVFN4cFFrRkJhVUlzVjBGQlZ5eERRVUZETEZkQlFWY3NUMEZCVHl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGQk96dEpRVVV4UkN4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEZOQlFWTXNRMEZCUXl4alFVRmpMRU5CUVVNc1JVRkJSVHROUVVOMFJDeFBRVUZCTzB0QlEwWTdPMGxCUlVFc1kwRkJZeXhEUVVGRE8wMUJRVVVzUzBGQlN6dE5RVUZGTEVsQlFVazdUVUZCUlN4UlFVRlJPMDFCUVVVc1RVRkJUVHROUVVGRkxGRkJRVUU3UzBGQlZTeERRVUZETEVOQlFVRTdSMEZETjBRN1JVRkZRU3c0UWtGQk9FSTdPenM3T3p0SFFVRXlReXhGUVVGRk8wbEJRM3BGTEUxQlFVMHNZMEZCWXl4alFVRmpMRVZCUVVVc1EwRkJRVHRKUVVWd1F5eHhRa0ZCUVN4UlFVRlBMRXRCUVVzc1QwRkJUeXhEUVVGRExFdEJRVXNzUlVGQlJUdE5RVUZGTEV0QlFVMHNRMEZCUVN4WlFVRkJMRU5CUVVFN1MwRkJaU3hEUVVGRExFTkJRVUU3U1VGRGJrUXNTVUZCU1N4TlFVRlBMRU5CUVVFc05rSkJRVUVzUlVGQkswSXNTVUZCU3l4RFFVRkJMRU5CUVVNc1EwRkJRVHRKUVVOb1JDeEpRVUZKTzAxQlEwWXNUVUZCVFRzN08wOUJRV01zUjBGQlJ5eE5RVUZOTEVOQlFVRXNRMEZCUVN4RlFVRkJMRk5CUVVFc1VVRkJlVUlzUlVGQlF6dFJRVU55UkN4UlFVRlJPMUZCUTFJc1NVRkJRVHRQUVVORUxFTkJRVU1zUTBGQlFUdE5RVU5HTEVsQlFVa3NTVUZCU1N4TFFVRkxMRk5CUVZNc1NVRkJTU3hKUVVGSkxFdEJRVXNzVTBGQlV5eEZRVUZGTzFGQlF6VkRMRTFCUVUwc1kwRkJaU3hEUVVGQkxGRkJRVUVzUlVGQlZTeEpRVUZMTEVOQlFVRXNRMEZCUVN4RlFVRkhMRWxCUVVrc1RVRkJUU3hEUVVNdlF5eERRVUZETEVWQlEwUXNRMEZEUml4RFFVRkZMRU5CUVVFc1EwRkJRU3hGUVVGSExGZEJRVmtzUTBGQlFTeEZRVUZGTEZGQlFWTXNRMEZCUVN4RlFVRkZMRTFCUVUwc1NVRkJTU3hGUVVGSExFTkJRVUVzUlVGQlJTeFJRVUZSTEVsQlFVa3NSVUZCUnl4RFFVRkJMRU5CUVVNc1EwRkJRVHRSUVVNM1JDeEpRVUZKT3p0VlFVVkdMRTFCUVUwc1YwRkJWeXhOUVVGTkxHZENRVUZuUWl4RFFVRkRMRmRCUVZjc1JVRkJSVHRaUVVOdVJDeFJRVUZSTEUxQlFVRTdWMEZEVkN4RFFVRkRMRU5CUVVFN1ZVRkRSaXhKUVVGSkxGRkJRVkVzVDBGQlR5eExRVUZMTEVkQlFVY3NSVUZCUlR0WlFVTXpRaXhOUVVGTkxGZEJRVmNzUTBGQlFUdFhRVU51UWp0VFFVTkVMRU5CUVVNc1dVRkJXVHRWUVVOYUxFOUJRVThzUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkJPMU5CUTI1Q08wOUJRMFFzVFVGQlRTeEpRVUZKTEVsQlFVa3NTMEZCU3l4VlFVRlZMRVZCUVVVN1VVRkRPVUlzVFVGQlR5eERRVUZCTEdkRFFVRkJMRVZCUVd0RExFbEJRVXNzUTBGQlFTeEZRVUZGTEZGQlFWTXNRMEZCUVN4RlFVTjJSQ3hOUVVGTkxFbEJRVWtzUlVGRFdDeERRVUZCTEVWQlFVVXNVVUZCVVN4SlFVRkpMRVZCUVVjc1EwRkJRU3hEUVVGRExFTkJRVUU3VDBGRGNFSXNUVUZCVFN4SlFVRkpMRWxCUVVrc1MwRkJTeXhQUVVGUExFbEJRVWtzU1VGQlNTeExRVUZMTEZGQlFWRXNSVUZCUlR0UlFVTm9SQ3hOUVVGUExFTkJRVUVzVDBGQlFTeEZRVUZUTEVsQlFVc3NRMEZCUVN4TlFVRkJMRVZCUVZFc1VVRkJVeXhEUVVGQkxFVkJRVVVzVFVGQlRTeEpRVUZKTEVWQlFVY3NRMEZCUVN4RlFVRkZMRkZCUVZFc1NVRkJTU3hGUVVGSExFTkJRVUVzUTBGQlF5eERRVUZCTzA5QlEzaEZMRTFCUVUwc1NVRkJTU3hKUVVGSkxFdEJRVXNzVTBGQlV5eEZRVUZGTzFGQlF6ZENMRTFCUVU4c1EwRkJRU3gxUWtGQlFTeEZRVUY1UWl4SlFVRkxMRU5CUVVFc1JVRkJSU3hSUVVGVExFTkJRVUVzUlVGQlJTeE5RVUZOTEVsQlFVa3NSVUZCUnl4RFFVRkJMRVZCUXpkRUxGRkJRVkVzU1VGQlNTeEZRVU5pTEVOQlFVRXNRMEZCUXl4RFFVRkJPMDlCUTBnc1RVRkJUU3hKUVVGSkxFbEJRVWtzUzBGQlN5eFhRVUZYTEVWQlFVVTdVVUZETDBJc1RVRkJUU3hUUVVGVExFbEJRVWtzVDBGQlR5eERRVUZETEVsQlFVa3NUMEZCVHl4SFFVRkhMRU5CUVVNc1IwRkJTU3hKUVVGSkxFOUJRVThzUjBGQlJ5eERRVUZGTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVFN1VVRkRjRVVzVFVGQlRTeFZRVUZWTEZOQlFVRXNVVUZCVFN4WlFVRlpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVUU3VVVGRk1VTXNUVUZCVFN4VlFVRlZPMVZCUVVVc1UwRkJVeXhMUVVGQk8xTkJRVThzUTBGQlFUdFJRVU5zUXl4TlFVRk5MSFZDUVVGMVFpeERRVUZCTEVOQlFVRXNSVUZCUVN4aFFVRkJMRkZCUVZrc1JVRkRka01zVDBGQlR5eEZRVU5RTEdGQlFXRXNSVUZEWWl4UFFVTkdMRU5CUVVNc1dVRkJXU3hGUVVGRkxFTkJRVUU3VVVGRFppeE5RVUZQTEVOQlFVRXNVVUZCUVN4RlFVRlZMRzlDUVVGeFFpeERRVUZCTEZkQlFVRXNSVUZCWVN4UlFVRlRMRU5CUVVFc1JVRkRNVVFzVFVGQlRTeEpRVUZKTEVWQlExZ3NRMEZCUVN4RlFVRkZMRkZCUVZFc1NVRkJTU3hGUVVGSExFTkJRVUVzUTBGQlF5eERRVUZCTzA5QlEzSkNPMHRCUTBRc1EwRkJReXhaUVVGWk8wMUJRMW9zVDBGQlR5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1MwRkRiRUlzVTBGQlV6dE5RVU5TTEhGQ1FVRkJMRkZCUVU4c1MwRkJTeXhQUVVGUExFTkJRVU1zUzBGQlN5eEZRVUZGTzFGQlFVVXNSMEZCUVR0UFFVRkxMRU5CUVVNc1EwRkJRVHRMUVVOeVF6dEhRVU5HTzBOQlEwWTdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUXpGSFFTeEpRVUZCTEU5QlFVRXNSMEZCUVN4UFFVRkJPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVObExGTkJRVk1zWlVGQlpTeERRVUZETEVkQlFVY3NSVUZCUlR0RlFVTXpReXhOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZCTEdsQ1FVRlRMRVZCUVVNc1IwRkJSeXhEUVVGRE8wVkJRMmhETEU5QlFVOHNUMEZCVHl4RFFVRkRMRk5CUVZNc1JVRkJSeXhMUVVGTExFbEJRVXM3U1VGRGJrTXNUMEZCVHl4TFFVRkxMRXRCUVVzc1NVRkJTU3hIUVVGSExFMUJRVTBzUjBGQlJ5eFBRVUZQTEV0QlFVczdSVUZETDBNc1EwRkJReXhEUVVGRE8wRkJRMG83TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVTdSVUZEYmtNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeExRVUZMTEVOQlFVTXNTMEZCU3p0SlFVTXZReXhKUVVGSkxFOUJRVThzUzBGQlN5eExRVUZMTEZGQlFWRXNTVUZCU1N4TFFVRkxMRXRCUVVzc1NVRkJTU3hGUVVGRk8wMUJReTlETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhQUVVGUExFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NRMEZCUXp0SlFVTnlReXhEUVVGRExFMUJRVTA3VFVGRFRDeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF6dEpRVU0xUWp0RlFVTkdMRU5CUVVNc1EwRkJRenRGUVVOR0xFOUJRVThzVFVGQlRUdEJRVU5tT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF6bERRU3hKUVVGQkxIRkNRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFRRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFJRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1pVRkJRU3hIUVVGQkxFOUJRVUU3UVVGQmEwWXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlJXeEdPMEZCUTBFN1FVRkRRVHRCUVVObExFMUJRVTBzWTBGQll5eERRVUZETzBWQlEyeERMRmRCUVZjc1EwRkJRU3hGUVVGSE8wbEJRMW9zU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4UFFVRlBMRU5CUVVNc05rSkJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRPMGxCUTJwRUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkZPMDFCUTNKQ0xHbENRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMR3REUVVGclF5eERRVUZETzBsQlF5OURPMGxCUTBFN1NVRkRRVHRKUVVOQk8wbEJRMEVzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhIUVVGSExFdEJRVXM3UlVGRGNrTTdSVUZGUVN4WFFVRlhMRU5CUVVNc1dVRkJXU3hGUVVGRk8wbEJRM2hDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1dVRkJXVHRGUVVNNVFqdEZRVVZCTEUxQlFVMHNSMEZCUnl4RFFVRkRMRXRCUVVzc1JVRkJSVHRKUVVObUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkZPMDFCUTNKQ0xFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlEySXNORVpCUTBZc1EwRkJRenRKUVVOSU8wbEJRMEVzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlR0TlFVTldMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zY1VOQlFYRkRMRU5CUVVNN1NVRkRlRVE3U1VGRFFTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSVHROUVVOc1FpeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVTmlMRzlHUVVOR0xFTkJRVU03U1VGRFNEdEpRVU5CTEVsQlFVazdUVUZEUmp0TlFVTkJPMDFCUTBFN1RVRkRRU3hOUVVGTkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdVVUZCUlN4SlFVRkpMRVZCUVVVc1MwRkJTenRSUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTTdUVUZCVXl4RFFVRkRMRU5CUVVNN1RVRkRja1FzU1VGQlNTeEpRVUZKTEVOQlFVTXNjMEpCUVhOQ0xFVkJRVVU3VVVGREwwSXNTVUZCU1N4RFFVRkRMSE5DUVVGelFpeEhRVUZITEV0QlFVczdUVUZEY2tNN1NVRkRSaXhEUVVGRExFTkJRVU1zVDBGQlR5eEhRVUZITEVWQlFVVTdUVUZEV2l4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RlFVRkZPMUZCUTJoRExFbEJRVWtzUTBGQlF5eHpRa0ZCYzBJc1IwRkJSeXhKUVVGSk8xRkJRMnhETEVsQlFVRXNlVUpCUVdkQ0xFVkJRVU1zUjBGQlJ5eERRVUZETzAxQlEzWkNPMDFCUTBFc2FVSkJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNjVU5CUVhGRExFVkJRVVVzUjBGQlJ5eERRVUZETzBsQlEzWkVPMFZCUTBZN08wVkJSVUU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRTFCUVUwc1IwRkJSeXhEUVVGQkxFVkJRVWM3U1VGRFZpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSVHROUVVOeVFpeFBRVUZQTEZOQlFWTTdTVUZEYkVJN1NVRkRRU3hOUVVGTkxFMUJRVTBzUjBGQlJ5eE5RVUZOTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVOb1F6dEpRVU5CTzBsQlEwRXNTVUZCU1N4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVU3VFVGRGJrSXNUMEZCVHl4VFFVRlRPMGxCUTJ4Q08wbEJRMEVzVDBGQlR5eE5RVUZOTzBWQlEyWTdPMFZCUlVFN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNTVUZCU1N4RFFVRkJMRVZCUVVjN1NVRkRUQ3hOUVVGTk8wMUJRVVU3U1VGQlRTeERRVUZETEVkQlFVY3NOa0pCUVU4c1EwRkJReXhQUVVGUE8wbEJRMnBETEU5QlFVOHNTVUZCU1N4UFFVRlBMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRVVVzVFVGQlRTeExRVUZMTzAxQlEzUkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVNc2EwSkJRVzFDTEUxQlFVMHNTMEZCU3p0UlFVTnNSQ3hOUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZCTEdsRFFVRnBRaXhGUVVGRExFTkJRVU03VVVGREwwSXNTVUZCU1N4SFFVRkhMRVZCUVVVN1ZVRkRVQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETzFGQlEySXNRMEZCUXl4TlFVRk5PMVZCUTB3c1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF6dFJRVU5xUWp0TlFVTkdMRU5CUVVNc1EwRkJRenRKUVVOS0xFTkJRVU1zUTBGQlF6dEZRVU5LT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSVHRKUVVOU0xFMUJRVTA3VFVGQlJUdEpRVUZOTEVOQlFVTXNSMEZCUnl3MlFrRkJUeXhEUVVGRExFOUJRVTg3U1VGRGFrTXNUMEZCVHl4SlFVRkpMRTlCUVU4c1EwRkJReXhEUVVGRExFOUJRVThzUlVGQlJTeE5RVUZOTEV0QlFVczdUVUZEZEVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUVHRSUVVONFFpeE5RVUZOTEVkQlFVY3NSMEZCUnl4SlFVRkJMR2xEUVVGcFFpeEZRVUZETEVOQlFVTTdVVUZETDBJc1NVRkJTU3hIUVVGSExFVkJRVVU3VlVGRFVDeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRPMUZCUTJJc1EwRkJReXhOUVVGTk8xVkJRMHdzVDBGQlR5eERRVUZETEVOQlFVTTdVVUZEV0R0TlFVTkdMRU5CUVVNc1EwRkJRenRKUVVOS0xFTkJRVU1zUTBGQlF6dEZRVU5LTzBGQlEwWTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlRFRXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hqUVVGQk8wRkJUVUVzVTBGQlV5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RlFVRkZPMFZCUTNCQ0xFOUJRVThzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF6dEJRVU4wUXpzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRNMGhCTEVsQlFVRXNZMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFdEJRVUVzUjBGQlFTeFBRVUZCTzBGQlJVOHNVMEZCVXl3MFFrRkJORUlzUTBGQlF6dEZRVUZGTzBGQlFXZENMRU5CUVVNc1JVRkJSVHRGUVVOb1JTeFBRVUZQTEVsQlFVRXNiME5CUVhGQ0xFVkJRVU1zVDBGQlR5eEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWxCUVVrc1MwRkJTenRKUVVOeVJDeE5RVUZOTzAxQlFVVXNUVUZCVFR0TlFVRkZPMGxCUVU4c1EwRkJReXhIUVVGSExFZEJRVWM3U1VGRE9VSXNTVUZCU1N4TlFVRk5MRXRCUVVzc2VVSkJRWGxDTEVWQlFVVTdUVUZEZUVNc1NVRkJTU3hEUVVGRExFTkJRVU03VFVGRFRqdEpRVU5HTzBsQlEwRXNUVUZCVFN4RFFVRkRMRXRCUVVzc1JVRkJSU3hSUVVGUkxFTkJRVU1zUjBGQlJ5eE5RVUZOTzBsQlEyaERMRWxCUVVrc1VVRkJVU3hMUVVGTExGTkJRVk1zUlVGQlJUdE5RVU14UWl4SlFVRkpMRU5CUVVNc1EwRkJRenROUVVOT08wbEJRMFk3U1VGRFFTeEhRVUZITEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1pVRkJaU3hEUVVGRExFdEJRVXNzUTBGQlF6dEZRVU16UXl4RFFVRkRMRU5CUVVNN1FVRkRTanRCUVVWUExGTkJRVk1zZVVKQlFYbENMRU5CUVVNN1JVRkJSVHRCUVVFMFFpeERRVUZETEVWQlFVVTdSVUZEZWtVc1QwRkJUeXhKUVVGQkxHOURRVUZ4UWl4RlFVRkRMRTlCUVU4c1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEV0QlFVczdTVUZEY2tRc1RVRkJUVHROUVVGRkxFMUJRVTA3VFVGQlJUdEpRVUZQTEVOQlFVTXNSMEZCUnl4SFFVRkhPMGxCUXpsQ0xFbEJRVWtzVFVGQlRTeExRVUZMTERCQ1FVRXdRaXhGUVVGRk8wMUJRM3BETEVsQlFVa3NRMEZCUXl4RFFVRkRPMDFCUTA0N1NVRkRSanRKUVVOQkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4TlFVRk5PMGxCUTNKQ0xFMUJRVTBzVFVGQlRTeEhRVUZITERKQ1FVRXlRaXhEUVVGRExFbEJRVWtzUTBGQlF6dEpRVU5vUkN4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wMUJRMWdzU1VGQlNTeERRVUZETEVOQlFVTTdUVUZEVGp0SlFVTkdPMGxCUTBFc1IwRkJSeXhEUVVGRExFMUJRVTBzUjBGQlJ5eEpRVUZCTERoQ1FVRjNRaXhGUVVGRExFMUJRVTBzUTBGQlF6dEZRVU12UXl4RFFVRkRMRU5CUVVNN1FVRkRTanM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOc1EwRXNTVUZCUVN4UFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFXdERMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVVnNRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWbExFMUJRVTBzVVVGQlVTeFRRVUZUTEdWQlFWa3NRMEZCUXp0RlFVTnFSRHRCUVVOR08wRkJRMEU3UlVGRFJTeFhRVUZYTEVOQlFVTXNTVUZCU1N4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRk8wbEJRM0pDTEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUTFBc1RVRkJUU3hWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNTVUZCU1N4RlFVRkZPMGxCUTNoRE8wbEJRMEVzU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1QwRkJUeXhIUVVGSExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTTdTVUZEYkVVN1NVRkRRU3hOUVVGTkxHRkJRV0VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnNSRHRKUVVOQkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlEycENMRWxCUVVrc1EwRkJReXhqUVVGakxFbEJRVXNzWVVGQllTeEpRVUZKTEdGQlFXRXNRMEZCUXl4UFFVRlJMRWxCUVVrc1EwRkJRenRGUVVONFJUczdSVUZGUVR0RlFVTkJMRTFCUVUwc1YwRkJWeXhEUVVGRExHRkJRV0VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlF5eEZRVUZGTzBsQlF6ZEVPMGxCUTBFc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFMUJRVTBzUTBGQlF5eHJRa0ZCYTBJc1EwRkJRenM3U1VGRmNFVTdTVUZEUVN4TFFVRkxMRTFCUVUwc1UwRkJVeXhKUVVGSkxHbENRVUZwUWl4RlFVRkZPMDFCUTNwRExFbEJRVWs3VVVGRFJqdFJRVU5CTEUxQlFVMHNXVUZCV1N4SFFVRkhMRTFCUVUwc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eGhRVUZoTEVOQlFVTTdVVUZETTBRc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVWQlFVVTdWVUZEZEVJc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5d3dRMEZCTUVNc1EwRkJRenRSUVVNM1JEdFJRVU5CTEVsQlEwVXNXVUZCV1N4RFFVRkRMRTlCUVU4c1MwRkJTeXhUUVVGVExFbEJRMnhETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhMUVVGTExGTkJRVk1zUTBGQlF5eFBRVUZQTEVWQlF5OURPMVZCUTBFc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGRFlpdzRSRUZEUml4RFFVRkRPMUZCUTBnN1VVRkRRVHRSUVVOQk8xRkJRMEVzWVVGQllTeEhRVUZITEZsQlFWazdUVUZET1VJc1EwRkJReXhEUVVGRExFOUJRVThzUjBGQlJ5eEZRVUZGTzFGQlExbzdVVUZEUVN4TlFVRk5MRzlDUVVGdlFpeEhRVUZITEVkQlFVY3NRMEZCUXl4UFFVRlBPMUZCUTNoRExFZEJRVWNzUTBGQlF5eFBRVUZQTEVkQlFVa3NOa0pCUVRSQ0xGTkJRVk1zUTBGQlF5eFBRVUZSTEV0QlFVa3NiMEpCUVhGQ0xFVkJRVU03VVVGRGRrWTdVVUZEUVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJTeEhRVUZITEVOQlFVTTdVVUZEZGtJN1VVRkRRU3hQUVVGUExHRkJRV0U3VFVGRGRFSTdTVUZEUmp0SlFVVkJMRTlCUVU4c1lVRkJZVHM3U1VGRmNFSTdRVUZEU2p0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBsQlEwa3NVMEZCVXl4clFrRkJhMElzUTBGQlF5eFRRVUZUTEVWQlFVVTdUVUZEY2tNc1QwRkJUeXhUUVVGVExFTkJRVU1zVDBGQlR5eEhRVUZITEdGQlFXRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUenRKUVVOMlJEdEZRVU5HT3p0RlFVVkJPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEc5Q1FVRnZRaXhEUVVGRExFbEJRVWtzUlVGQlJUdEpRVU42UWl4UFFVRlBPMDFCUTB3c1NVRkJTU3hGUVVGRk8xRkJRMG9zVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXp0TlFVTm9RaXhEUVVGRE8wMUJRMFE3U1VGRFJpeERRVUZETzBWQlEwZzdRVUZEUmp0QlFVRkRMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzVVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU12UmtRc1NVRkJRU3hUUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hwUWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVFMlJTeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEdkQ1FVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzUzBGQlFTeEpRVUZCTEVkQlFVRXNSMEZCUVN4alFVRkJMRU5CUVVFc1IwRkJRU3hQUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeEpRVUZCTEV0QlFVRXNSVUZCUVN4TFFVRkJMRVZCUVVFc1ZVRkJRU3hSUVVGQkxGbEJRVUVzVVVGQlFTeFJRVUZCTEc5Q1FVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUzBGQlFTeFhRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMR1ZCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzUjBGQlFTeFpRVUZCTEVOQlFVRXNSMEZCUVN3eVFrRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzWVVGQlFTeExRVUZCTEVWQlFVRXNTVUZCUVN4bFFVRkJMRXRCUVVFc2FVSkJRVUVzUzBGQlFTeHJRa0ZCUVN4TFFVRkJMRTFCUVVFc1NVRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeE5RVUZCTEVOQlFVRXNWMEZCUVN4UFFVRkJMRWxCUVVFc1MwRkJRU3hUUVVGQkxGRkJRVUVzUjBGQlFTeEhRVUZCTEVsQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQkxFbEJRVUVzTWtKQlFVRXNSMEZCUVN4elFrRkJRU3hIUVVGQkxGbEJRVUVzVTBGQlFTdzBSRUZCUVN4SlFVRkJMR2RDUVVGQkxFMUJRVUVzUjBGQlFTeE5RVUZCTEVWQlFVRXNTMEZCUVR0QlFVVTNSU3hOUVVGTkxHZENRVUZuUWl4SFFVRkhMRWxCUVVFc2VVSkJRVzFDTEVWQlFVTXNRMEZCUXp0QlFVVTVReXhOUVVGTkxHMUNRVUZ0UWl4SFFVRkhMRmRCUVZjN1FVRkRka01zVFVGQlRTeHRRa0ZCYlVJc1IwRkJSeXhMUVVGTE8wRkJRMnBETEUxQlFVMHNhMEpCUVd0Q0xFZEJRVWtzVlVGQlV5eHRRa0ZCYjBJc1NVRkJSeXh0UWtGQmIwSXNZVUZCV1RzN1FVRkZOVVk3UVVGRFFUdEJRVU5CTzBGQlEyVXNUVUZCVFN4dlFrRkJiMElzUTBGQlF6dEZRVU40UXl4WFFVRlhMRU5CUVVFc1JVRkJSenRKUVUxa08wRkJRMFk3UVVGRFFUdEpRVVpGTEdWQlFVRXNjMEpCUjJNc1NVRkJTVHRKUVZKb1FpeEpRVUZKTEVOQlFVTXNXVUZCV1N4SFFVRkhMRXRCUVVzN1NVRkRla0lzU1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03U1VGRGFrTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhUUVVGVE8wVkJRM3BDTzBWQlQwRTdRVUZEUmp0QlFVTkJPMFZCUTBVc1RVRkJUU3hMUVVGTExFTkJRVUVzUlVGQlJ6dEpRVU5hTEVsQlFVazdUVUZEUml4TlFVRk5MRkZCUVZFc1IwRkJSeXhOUVVGTkxHZENRVUZuUWl4RFFVRkRMR3RDUVVGclFpeERRVUZETzAxQlF6TkVMRWxCUVVrc1VVRkJVU3hEUVVGRExFVkJRVVVzUlVGQlJUdFJRVU5tTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdUVUZEY2tNN1NVRkRSaXhEUVVGRExFTkJRVU1zVDBGQlR5eExRVUZMTEVWQlFVVTdUVUZEWkN4cFFrRkJSeXhEUVVGRExFdEJRVXNzUTBGQlJTeHBRMEZCWjBNc1MwRkJTeXhEUVVGRExFOUJRVkVzUjBGQlJTeERRVUZETzBsQlF6bEVMRU5CUVVNc1UwRkJVenROUVVOU0xFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NTVUZCU1R0SlFVTXhRanRGUVVOR096dEZRVVZCTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRkRSU3hOUVVGTkxFZEJRVWNzUTBGQlFTeEZRVUZITzBsQlExWXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFVkJRVVU3VFVGRGRFSXNUVUZCVFN4SlFVRkpMRU5CUVVNc1lVRkJZVHRKUVVNeFFqdEpRVU5CTEU5QlFVOHNTVUZCU1N4RFFVRkRMRTFCUVUwN1JVRkRjRUk3TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxGZEJRVmNzUTBGQlF5eFJRVUZSTEVWQlFVVTdTVUZEY0VJc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eFJRVUZSTzBWQlF6RkNPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4TlFVRk5MRWRCUVVjc1EwRkJReXhMUVVGTExFVkJRVVU3U1VGRFppeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSVHROUVVOeVFpeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVTmlMRFJHUVVOR0xFTkJRVU03U1VGRFNEdEpRVU5CTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1RVRkRWaXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETEhGRFFVRnhReXhEUVVGRE8wbEJRM2hFTzBsQlEwRXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVU3VFVGRGJFSXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkRZaXh2UmtGRFJpeERRVUZETzBsQlEwZzdTVUZEUVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUlVGQlJUdE5RVU4wUWl4TlFVRk5MRWxCUVVrc1EwRkJReXhoUVVGaE8wbEJRekZDTzBsQlEwRXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSenROUVVGRkxFbEJRVWtzUlVGQlJTeExRVUZMTzAxQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJRenRKUVVGVkxFTkJRVU03UlVGRGNrUTdRVUZEUmp0QlFVRkRMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzYjBKQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEY2taRUxFbEJRVUVzYVVKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQmRVUXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlJYWkVMRTFCUVUwc2JVSkJRVzFDTEVkQlFVY3NSMEZCUnp0QlFVTXZRaXhOUVVGTkxHdENRVUZyUWl4SFFVRkhMRWRCUVVjN1FVRkZka0lzVFVGQlRTd3lRa0ZCTWtJc1IwRkJSenRGUVVONlF5eFpRVUZaTEVWQlFVVTdRVUZEYUVJc1EwRkJRenM3UVVGRlJEdEJRVU5CTzBGQlEwRTdRVUZHUVN4UFFVRkJMRU5CUVVFc01rSkJRVUVzUjBGQlFTd3lRa0ZCUVR0QlFVZGxMRTFCUVUwc2JVSkJRVzFDTEZOQlFWTXNlVUpCUVZrc1EwRkJRenRGUVVNMVJDeFhRVUZYTEVOQlFVRXNSVUZCUnp0SlFVTmFMRXRCUVVzc1EwRkJReXhEUVVGRE8wbEJRMUFzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMR3RDUVVGcFFpeERRVUZETEVOQlFVTTdTVUZEZGtNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRGUVVOeVJUczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeDVRa0ZCZVVJc1EwRkJRU3hGUVVGSE8wbEJRekZDTEVsQlFVa3NRMEZCUXl4NVFrRkJlVUlzUjBGQlJ5eEpRVUZKTzBWQlEzWkRPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMFZCUTBVc1RVRkJUU3hUUVVGVExFTkJRVU1zYVVKQlFXbENMRVZCUVVVc1kwRkJZeXhGUVVGRk8wbEJRMnBFTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1kwRkJZenRKUVVNNVFpeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFZEJRVWNzYVVKQlFXbENPMGxCUXpORExFMUJRVTBzUzBGQlN5eEhRVUZITEUxQlFVMHNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhqUVVGakxFTkJRVU03U1VGRGJFUTdTVUZEUVN4SlFVRkpMRXRCUVVzc1JVRkJSVHROUVVOVU8wMUJRMEVzVFVGQlRTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETzBsQlF6TkRMRU5CUVVNc1RVRkJUVHROUVVOTU8wMUJRMEVzU1VGQlNTeEpRVUZKTEVkQlFVY3NRMEZCUXp0TlFVTmFMRWxCUVVrc1IwRkJSeXhIUVVGSExFTkJRVU03VFVGRFdDeEpRVUZKTzFGQlEwWXNUVUZCVFN4WFFVRlhMRWRCUVVjc1RVRkJUU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFTkJRVU03VVVGRE9VUTdVVUZEUVN4SFFVRkhMRWRCUVVjc1YwRkJWeXhEUVVGRExFZEJRVWM3VVVGRGNrSXNTVUZCU1N4SFFVRkhMRmRCUVZjc1EwRkJReXhKUVVGSkxFbEJRVWtzVjBGQlZ5eERRVUZETEV0QlFVc3NSMEZCUnl4clFrRkJhMElzUTBGQlF6dE5RVU53UlN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3VVVGRFZqdFJRVU5CTzFGQlEwRTdVVUZEUVN4TlFVRk5PMVZCUVVVc1QwRkJUenRWUVVGRkxFOUJRVTg3VlVGQlJUdFJRVUZYTEVOQlFVTXNSMEZCUnl4TlFVRk5PMUZCUXk5RExFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRE1VSXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eEpRVUZKTEZWQlFWVXNSMEZCUnl4clFrRkJhMElzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0TlFVTnFSVHROUVVWQkxFMUJRVTBzVjBGQlZ5eEhRVUZITEUxQlFVMHNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhWUVVGVkxFTkJRVU03VVVGRGFrUXNSMEZCUnl4RlFVRkZMRzFDUVVGdFFqdFJRVU40UWl4SlFVRkpMRVZCUVVVc1QwRkJUenRSUVVOaUxFdEJRVXNzUlVGQlJTeHJRa0ZCYTBJN1VVRkRla0lzVFVGQlRTeEZRVUZGTEcxQ1FVRnRRanRSUVVNelFpeEpRVUZKTzFGQlEwbzdUVUZEUml4RFFVRkRMRU5CUVVNN08wMUJSVVk3VFVGRFFTeEpRVUZKTEZkQlFWY3NRMEZCUXl4SlFVRkpMRXRCUVVzc1NVRkJTU3hKUVVGSkxGZEJRVmNzUTBGQlF5eExRVUZMTEV0QlFVc3NXVUZCV1N4RlFVRkZPMUZCUTI1RkxFMUJRVTBzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFhRVUZYTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSU3hIUVVGSExFTkJRVU03VFVGRGNrVTdUVUZEUVR0TlFVTkJPMDFCUTBFc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGRkxFTkJRVU03VFVGRGRrTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhYUVVGWExFTkJRVU1zUlVGQlJUdEpRVU5vUXp0RlFVTkdPMFZCUlVFc1pVRkJaU3hEUVVGRExGRkJRVkVzUlVGQlJUdEpRVU40UWl4SlFVRkpMRkZCUVZFc1MwRkJTeXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTzAxQlF6bENMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4VFFVRlRMRU5CUVVNN1RVRkRiRU1zU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4VFFVRlRPMDFCUTNwQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNNa0pCUVRKQ0xFTkJRVU1zV1VGQldTeEZRVUZGTzFGQlEyeEVMRzFDUVVGdFFpeEZRVUZGTEVsQlFVa3NRMEZCUXp0TlFVTTFRaXhEUVVGRExFTkJRVU03VFVGRFJpeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFZEJRVWNzVTBGQlV6dEpRVU0xUXp0RlFVTkdPenRGUVVWQk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRTFCUVUwc1UwRkJVeXhEUVVGQkxFVkJRVWM3U1VGRGFFSXNUVUZCVFN4UFFVRlBMRWRCUVVjc1RVRkJUU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPMGxCUTI1RUxFOUJRVThzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4UFFVRlBMRU5CUVVNN1JVRkRiRU03TzBWQlJVRTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzVjBGQlZ5eERRVUZETEU5QlFVOHNSVUZCUlR0SlFVTnVRaXhQUVVGUExFOUJRVThzUjBGRFZpeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkZMRWRCUVVjc1NVRkJTenROUVVOd1FqdE5RVU5CTEU5QlFVOHNSMEZCUnl4SlFVRkpMRWRCUVVjc1EwRkJReXhKUVVGSkxFdEJRVXNzVDBGQlR5eEpRVUZKTEVkQlFVY3NRMEZCUXl4RlFVRkZMRXRCUVVzc1NVRkJTU3hEUVVGRExGRkJRVkU3U1VGRGFFVXNRMEZCUXl4RFFVRkRMRWRCUTBZc1NVRkJTVHRGUVVOV08wRkJRMFk3UVVGQlF5eFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRzFDUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRM1pJUkN4SlFVRkJMSEZDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNUVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHRkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRk5CUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZCZFVNc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPMEZCUlhaRExFMUJRVTBzVjBGQlZ5eEhRVUZITEVOQlFVTXNSMEZCUnl4cFFrRkJZU3hGUVVGRkxFZEJRVWNzTUVOQlFXOUNMRU5CUVVNc1VVRkJVU3hEUVVGRE8wRkJSWGhGTEUxQlFVMHNWVUZCVlN4SFFVRkhMRmRCUVZjc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNUMEZCVHl4TFFVRkxPMFZCUTNSRUxFdEJRVXNzVFVGQlRTeFZRVUZWTEVsQlFVa3NUMEZCVHl4RFFVRkRMRmRCUVZjc1JVRkJSVHRKUVVNMVF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVZVc1JVRkJSU3hQUVVGUExFTkJRVU03UlVGRE9VSTdSVUZEUVN4UFFVRlBMRWRCUVVjN1FVRkRXaXhEUVVGRExFVkJRVVVzU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUldJc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVOc1F5eEpRVUZKTEVkQlFVY3NRMEZEVEN4SlFVRkJMR1ZCUVU4c1JVRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdSVUZCUlR0QlFVRlZMRU5CUVVNc1MwRkJTeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUTNCRkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZEV0N4RFFVRkRPenRCUVVWRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMDhzVTBGQlV5eHpRa0ZCYzBJc1EwRkJReXhMUVVGTExFVkJRVVU3UlVGRE5VTTdSVUZEUVN4TlFVRk5MR2RDUVVGblFpeEhRVUZITEdsQ1FVRnBRaXhEUVVGRExFMUJRVTBzUTBGRE9VTXNVVUZCVVN4SlFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRkZCUVZFc1EwRkRNMFFzUTBGQlF6dEZRVU5FTEVsQlFVa3NaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSVUZCUlR0SlFVTXZRaXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVU5hTERoQ1FVRTJRaXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRkxFbEJRelZFTEVOQlFVTTdSVUZEU0R0RlFVVkJMRTlCUVU4c1pVRkJaU3huUWtGQlowSXNRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWtzUlVGQlJTeEhRVUZITEVWQlFVVTdTVUZETVVRN1NVRkRRU3hKUVVGSkxHZERRVUYxUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVTdUVUZETTBNc1QwRkJUeXhIUVVGSExFTkJRVU1zZFVKQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTJoRU8wbEJSVUVzVFVGQlRTeFBRVUZQTEVkQlFVY3NWVUZCVlN4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETzBsQlF6RkRMRWxCUVVrc1QwRkJUeXhGUVVGRk8wMUJRMWdzVFVGQlRUdFJRVUZGTEdOQlFXTTdVVUZCUlR0TlFVRlZMRU5CUVVNc1IwRkJSeXhQUVVGUE8wMUJRemRETEVsQlFVazdVVUZEUmp0UlFVTkJMRTlCUVU4c1RVRkJUU3hqUVVGakxFTkJRM3BDTEVkQlFVY3NSVUZEU0N4SFFVRkhMRVZCUTBnc1NVRkJTU3hGUVVOS0xFZEJRVWNzUlVGRFNDeEpRVUZCTEd0Q1FVRlhMRVZCUVVNc1MwRkJTeXhGUVVGRkxGTkJRVk1zUTBGRE9VSXNRMEZCUXp0TlFVTklMRU5CUVVNc1EwRkJReXhQUVVGUExFdEJRVXNzUlVGQlJUdFJRVU5rTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRE8xRkJRM0JDTEU5QlFVOHNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJRenROUVVOdVFqdEpRVU5HTzBsQlJVRXNUMEZCVHl4SlFVRkpMRU5CUVVNc1EwRkJRenRGUVVObUxFTkJRVU03UVVGRFNEczdPenM3T3pzN096czdPenM3T3pzN096czdRVU55UlVFc1NVRkJRU3huUWtGQlFTeFBRVUZCTEVOQlFVRXNaMEpCUVVFc1EwRkJRU3hEUVVGQk8wRkJRMEVzU1VGQlFTeFpRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxGZEJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1QwRkJRU3hEUVVGQkxGRkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4dFFrRkJRU3hQUVVGQkxFTkJRVUVzTkVKQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hQUVVGQkxFOUJRVUVzUTBGQlFTeHhRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkpRU3hKUVVGQkxGZEJRVUVzVDBGQlFTeERRVUZCTERaRFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVsQkxFbEJRVUVzWlVGQlFTeFBRVUZCTEVOQlFVRXNOa05CUVVFc1EwRkJRU3hEUVVGQk8wRkJRVFJHTEhGRFFVRkJMRVZCUVVFc1QwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNSMEZCUVN4SFFVRkJMRVZCUVVFc1UwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlFTeEZRVUZCTzBGQlJUVkdMRTFCUVUwc2JVSkJRVzFDTzBWQlEzWkNMR0ZCUVdFc1EwRkJReXhKUVVGQkxHRkJRVmtzYlVKQlFXMUNMRU5CUVVNN1JVRkRPVU1zWjBKQlFXZENMSFZDUVVGMVFqdEZRVU4yUXl4WFFVRlhPMGxCUTFRc05FSkJRVFJDTEVsQlFVazdTVUZEYUVNc2JVSkJRVzFDTEVsQlFVazdTVUZEZGtJc2EwSkJRV3RDTEVsQlFVazdTVUZEZEVJc05FSkJRVFJDTEVsQlFVazdTVUZEYUVNc2EwSkJRV3RDTEVsQlFVazdTVUZEZEVJc2NVSkJRWEZDTEVsQlFVRTdSMEZEZGtJN1EwRkRSQ3hEUVVGQk8wRkJRVU1zU1VGQlFTeFhRVU5oTEdkQ1FVRm5RaXhEUVVGQk8wRkJRVUVzVDBGQlFTeFJRVUZCTEVkQlFVRXNVVUZCUVN4RFFVRkJPMEZCUlM5Q0xEWkVRVXRGT3pzN096czdPME5CVDBNc1JVRkRSRHRGUVVGQkxFbEJRVUVzVjBGQlFTeERRVUZCTzBWQlEwRXNTVUZCU1N4RlFVRkJMRU5CUVVFc1kwRkJReXhIUVVGSExFOUJRVThzVFVGQlFTeEpRVUZCTEVsQlFVRXNWMEZCUVN4TFFVRkJMRXRCUVVFc1EwRkJRU3hKUVVGV0xGZEJRVUVzUTBGQllTeERRVUZETEVOQlFVTXNRMEZCUVN4SlFVRkpMRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NVVUZCVVN4RlFVRkZPMGxCUTNwRUxFOUJRVThzUjBGQlJ5eERRVU5TTEdGQlFVRXNWVUZCVXl4SlFVRkpMR05CUVdNc1EwRkJRenROUVVNeFFpeFRRVUZWTEVOQlFVRXNPRU5CUVVFc1JVRkJaMFFzU1VGQlNTeFZRVUZWTEVOQlEzUkZMRWRCUVVjc1QwRkRUQ3hEUVVGRkxFTkJRVUVzUTBGQlFUdExRVU5JTEVOQlEwZ3NRMEZCUXl4RFFVRkJPMGRCUTBnN1JVRkZRU3hOUVVGTk96dEhRVUZWTEVkQlFVY3NSMEZCUnl4RFFVRkJPMFZCUlhSQ0xFMUJRVTA3TzBsQlJVb3NXVUZCV1N4SlFVRkpPMGxCUTJoQ0xHOUNRVUZ2UWl4SlFVRkpPMGxCUTNoQ0xHbENRVUZwUWl4SlFVRkpPenRIUVVWMFFpeEhRVUZITEVkQlFVY3NUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8wVkJSV3BDTEUxQlFVMHNXVUZCV1N4TlFVRk5MRXRCUVVzc1EwRkRNMElzUTBGQlFTeERRVUZCTEVWQlFVRXNUMEZCUVN4TFFVRkpMRVZCUVVNc1IwRkJSeXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZEYkVJc1UwRkJVeXhGUVVOVUxGZEJRVmNzUlVGRFdDeHRRa0ZCYlVJc1JVRkRia0lzVlVGQlZTeEZRVU5XTEZOQlFWTXNSVUZEVkN4blFrRkJaMElzUTBGRGFrSXNRMEZEU0N4RFFVRkRMRU5CUVVFN1JVRkZSQ3hKUVVGSkxGTkJRVk1zVDBGQlR5eEhRVUZITEVOQlFVTXNSVUZCUlR0SlFVTjRRaXhQUVVGUExFZEJRVWNzUTBGRFVpeGhRVUZCTEZWQlFWTXNTVUZCU1N4alFVRmpMRU5CUVVNN1RVRkRNVUlzVTBGQlZTeERRVUZCTEdsRlFVRkJMRVZCUVcxRkxGTkJRVlVzUTBGQlFTeERRVUZCTzB0QlEzaEdMRU5CUTBnc1EwRkJReXhEUVVGQk8wZEJRMGc3UlVGRlFTeE5RVUZOTEdOQlFXVXNWVUZCVnp0SlFVTTVRaXhKUVVGSk8wMUJRMFlzVFVGQlRTeE5RVUZOTEVsQlFVa3NSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGQk8wMUJRek5DTEU5QlFVOHNSMEZCUnl4VFFVRlRMRXRCUVVzc1YwRkJWeXhKUVVGSkxFZEJRVWNzVTBGQlV5eExRVUZMTEZkQlFWY3NRMEZCUVR0TFFVTndSU3hEUVVGRExHTkJRV003VFVGRFpDeFBRVUZQTEV0QlFVc3NRMEZCUVR0TFFVTmtPMGRCUTBRc1EwRkJRVHRGUVVWRUxFMUJRVTBzYlVKQlFXMUNMRXRCUVVzc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVU16UXl4UFFVRlBMRXRCUVVzc1EwRkRWQ3hWUVVGWExGZEJRVmNzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4VFFVRkJMRkZCUVZFc1YwRkJWeXhEUVVGRExFMUJRVTBzUTBGREwwUXNRMEZCUXl4SFFVTkVMRWxCUVVrc1EwRkJRVHRGUVVWU0xFMUJRVTBzTmtKQlEwb3NhVUpCUVdsQ0xFdEJRVXNzU1VGQlNTeEpRVUZKTEV0QlFVc3NVVUZCVVN4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVkQlF6RkVMR2xDUVVGcFFpeExRVUZMTEVOQlEyNUNMRzlDUVVORExGZEJRVmNzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhKUVVNM1FpeFRRVUZCTEZGQlFWRXNWMEZCVnl4RFFVRkRMR2RDUVVGblFpeERRVU40UXl4RFFVRkRMRWRCUTBRc1NVRkJTU3hEUVVGQk8wVkJSVllzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhGUVVGRk8wbEJRM0pDTEU5QlFVOHNSMEZCUnl4RFFVTlNMR0ZCUVVFc1ZVRkJVeXhKUVVGSkxHTkJRV01zUTBGQlF6dE5RVU14UWl4VFFVRlZMRU5CUVVFc2FVWkJRVUVzUlVGQmJVWXNUMEZCVVN4RFFVRkJMRU5CUVVFN1MwRkRkRWNzUTBGRFNDeERRVUZETEVOQlFVRTdSMEZEU0R0RlFVVkJMRWxCUVVrc2FVSkJRV2xDTEV0QlFVc3NTVUZCU1N4SlFVRkpMRU5CUVVNc01FSkJRVEJDTEVWQlFVVTdTVUZETjBRc1QwRkJUeXhIUVVGSExFTkJRMUlzWVVGQlFTeFZRVUZUTEVsQlFVa3NZMEZCWXl4RFFVRkRPMDFCUXpGQ0xGTkJRVlVzUTBGQlFTdzRSa0ZCUVN4RlFVRm5SeXhwUWtGQmEwSXNRMEZCUVN4RFFVRkJPMHRCUXpkSUxFTkJRMGdzUTBGQlF5eERRVUZCTzBkQlEwZzdSVUZGUVN4TlFVRk5MRmRCUVZjc1QwRkJUeXhQUVVGUExFdEJRVXNzVVVGQlVTeEpRVUZKTEU5QlFVOHNXVUZCV1N4RlFVRkZMRU5CUVVFN1JVRkZja1VzU1VGQlNTeERRVUZETEVOQlFVRXNRMEZCUVN4RlFVRkJMRkZCUVVFc05rSkJRVFJDTEVWQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVN1NVRkRNME1zVDBGQlR5eEhRVUZITEVOQlExSXNZVUZCUVN4VlFVRlRMRWxCUVVrc1kwRkJZeXhEUVVGRE8wMUJRekZDTEZOQlFWVXNRMEZCUVN4clJrRkJRU3hGUVVGdlJpeFBRVUZSTEVOQlFVRXNRMEZCUVR0TFFVTjJSeXhEUVVOSUxFTkJRVU1zUTBGQlFUdEhRVU5JTzBWQlJVRXNTVUZCU1N4RFFVRkRMRU5CUVVFc1EwRkJRU3hGUVVGQkxGRkJRVUVzWTBGQllTeEZRVUZETEZGQlFWRXNRMEZCUXl4UlFVRlJMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJUdEpRVU14UXl4UFFVRlBMRWRCUVVjc1EwRkRVaXhoUVVGQkxGVkJRVk1zU1VGQlNTeGpRVUZqTEVOQlFVTTdUVUZETVVJc1UwRkJWU3hEUVVGQkxHdENRVUZCTEVWQlFXOUNMRkZCUVZNc1EwRkJRU3d5UkVGQlFTeEZRVUUyUkN4UFFVRlJMRU5CUVVFc1EwRkJRVHRMUVVNM1J5eERRVU5JTEVOQlFVTXNRMEZCUVR0SFFVTklPMFZCUlVFc1RVRkJUU3hyUWtGQmEwSXNNRUpCUVRCQ0xFTkJRVU03U1VGQlJTeFRRVUZUTEZGQlFVRTdSMEZCVlN4RFFVRkRMRU5CUVVFN096czdSVUZKZWtVc1NVRkJTU3hsUVVGbExFbEJRVWtzWlVGQlpTeFBRVUZQTEV0QlFVc3NaMEpCUVdkQ0xFVkJRVVU3TzBsQlJXeEZMRWRCUVVjc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlFUdEpRVVZxUWl4TlFVRk5MR2xDUVVGcFFpeHBRa0ZCYVVJc1JVRkJSU3hEUVVGQk8wbEJRekZETEUxQlFVMHNaMEpCUVdkQ0xHZENRVUZuUWl4RlFVRkZMRU5CUVVFN096czdTVUZKZUVNc1NVRkJTU3hqUVVGakxFdEJRVXNzVVVGQlVTeEpRVUZKTEdGQlFXRXNTMEZCU3l4blFrRkJaMElzUlVGQlJUdE5RVU55UlN4UFFVRlBMRWRCUVVjc1JVRkJSU3hEUVVGQk8wdEJRMlE3T3pzN1NVRkpRU3hKUVVGSk8wMUJRMFlzVFVGQlRTeHRRa0ZCYlVJc1EwRkJRenRSUVVONFFpeE5RVUZOTzFGQlEwNHNUVUZCVFN4blFrRkJRU3hoUVVGWkxHOUNRVUZ2UWp0UlFVTjBReXhoUVVGaE8xVkJRMWdzVVVGQlVTeGxRVUZsTEU5QlFVODdWVUZET1VJc1UwRkJVeXhsUVVGbExGRkJRVkU3VlVGRGFFTXNWVUZCVlN4bFFVRmxMRk5CUVZNN1ZVRkRiRU1zVVVGQlVTeGxRVUZsTEU5QlFVTTdVMEZETVVJN1QwRkRSQ3hEUVVGRExFTkJRVUU3VFVGRlJpeE5RVUZOTEdkQ1FVRm5RaXhEUVVGRExHVkJRV1VzUjBGQlJ5eERRVUZETEVOQlFVRTdUVUZETVVNc1IwRkJSeXhQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZCTzB0QlEyeENMRU5CUVVNc1kwRkJZenM3T3p0TlFVbGtMRWxCUVVrc1MwRkJTeXhMUVVGTExFdEJRVXNzWVVGQlFTeFhRVUZWTEZOQlFWTXNiMEpCUVc5Q0xFVkJRVVU3VVVGRE1VUXNUMEZCVHl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3VDBGRGJrSTdTMEZEUmp0SlFVTkJMRTlCUVU4c1IwRkJSeXhGUVVGRkxFTkJRVUU3UjBGRFpEdEZRVVZCTEVsQlFVa3NUMEZCVHl4VFFVRlRMRXRCUVVzc1VVRkJVU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTzBsQlF5OURMRTlCUVU4c1IwRkJSeXhEUVVOU0xHRkJRVUVzVlVGQlV5eEpRVUZKTEdOQlFXTXNRMEZCUXp0TlFVTXhRaXhUUVVGVkxFTkJRVUVzYTBSQlFVRXNSVUZCYjBRc1UwRkJWU3hEUVVGQkxFTkJRVUU3UzBGRGVrVXNRMEZEU0N4RFFVRkRMRU5CUVVFN1IwRkRTRHRGUVVOQkxFMUJRVTBzWVVGRFNpeFRRVUZUTEU5QlFVOHNSMEZCUnl4SFFVRkhMRWRCUVVjc1UwRkJVeXhWUVVGVkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4SFFVRkhMRk5CUVZNc1EwRkJRVHRGUVVWc1JTeEpRVUZKTEdOQlFXTXNTMEZCU3l4SlFVRkpMRVZCUVVVN1NVRkRNMElzU1VGQlNTeFBRVUZQTEdOQlFXTXNTMEZCU3l4UlFVRlJMRWxCUVVrc1MwRkJTeXhSUVVGUkxFTkJRVU1zWTBGQll5eERRVUZETEVWQlFVVTdUVUZEZGtVc1QwRkJUeXhIUVVGSExFTkJRMUlzWVVGQlFTeFZRVUZUTEVsQlFVa3NZMEZCWXl4RFFVRkRPMUZCUXpGQ0xGTkJRVlVzUTBGQlFTeHhSRUZCUVN4RlFVRjFSQ3hqUVVGbExFTkJRVUVzUTBGQlFUdFBRVU5xUml4RFFVTklMRU5CUVVNc1EwRkJRVHRMUVVOSU8wbEJRMEVzU1VGQlNTeGpRVUZqTEZOQlFWTXNTMEZCU3l4RlFVRkZMRVZCUVVVN1RVRkRiRU1zVDBGQlR5eEhRVUZITEVOQlExSXNZVUZCUVN4VlFVRlRMRWxCUVVrc1kwRkJZeXhEUVVGRE8xRkJRekZDTEZOQlFWVXNRMEZCUVN4clIwRkJRU3hGUVVGdlJ5eGpRVUZqTEZOQlFWVXNRMEZCUVN4RFFVRkJPMDlCUTNaSkxFTkJRMGdzUTBGQlF5eERRVUZCTzB0QlEwZzdTVUZGUVN4SlFVRkpMRU5CUVVNc1kwRkJZeXhQUVVGUExFbEJRVWtzVDBGQlR5eGpRVUZqTEU5QlFVOHNTMEZCU3l4UlFVRlJMRVZCUVVVN1RVRkRka1VzVDBGQlR5eEhRVUZITEVOQlExSXNZVUZCUVN4VlFVRlRMRWxCUVVrc1kwRkJZeXhEUVVGRE8xRkJRekZDTEZOQlFWVXNRMEZCUVN4eFJFRkJRU3hGUVVGMVJDeGpRVUZqTEU5QlFWRXNRMEZCUVN4RFFVRkJPMDlCUTNoR0xFTkJRMGdzUTBGQlF5eERRVUZCTzB0QlEwZzdSMEZEUmp0RlFVVkJMRTFCUVUwc1UwRkJVeXhEUVVGQkxHTkJRV01zUzBGQlFTeEpRVUZCTEVsQlFXUXNZMEZCWXl4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZrTEdOQlFXTXNUMEZCVVN4TFFVRkpMRWxCUVVFc2MwSkJRWEZDTEVOQlFVRTdSVUZGT1VRc1NVRkRSU3hOUVVGTkxFdEJRVXNzU1VGQlFTeHpRa0ZCY1VJc1MwRkRMMElzVDBGQlR5eE5RVUZOTEV0QlFVc3NVVUZCVVN4SlFVRkpMRTFCUVUwc1QwRkJUeXhIUVVGSExFTkJRVU1zU1VGQlNTeE5RVUZOTEU5QlFVOHNSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkRkRVU3U1VGRFFTeFBRVUZQTEVkQlFVY3NRMEZEVWl4aFFVRkJMRlZCUVZNc1NVRkJTU3hqUVVGakxFTkJRVU03VFVGRE1VSXNVMEZCVlN4RFFVRkJMR3RGUVVGQkxFVkJRVzlGTEUxQlFVOHNRMEZCUVN4RFFVRkJPMHRCUTNSR0xFTkJRMGdzUTBGQlF5eERRVUZCTzBkQlEwZzdPenRGUVVkQkxFbEJRMFVzWlVGQlpTeEpRVU5tTEdWQlFXVXNVVUZCVVN4TFFVRkxMRkZCUVZFc1NVRkRjRU1zWlVGQlpTeFBRVUZQTEV0QlFVc3NUVUZCVFN4RlFVTnFRenRKUVVOQkxFOUJRVThzUjBGQlJ5eERRVU5TTEdGQlFVRXNWVUZCVXl4SlFVRkpMR05CUVdNc1EwRkJRenROUVVNeFFpeFRRVUZWTEVOQlFVRXNaMGxCUVVFc1JVRkJhMGtzVFVGQlR5eERRVUZCTEVOQlFVRTdTMEZEY0Vvc1EwRkRTQ3hEUVVGRExFTkJRVUU3UjBGRFNEdEZRVU5CTEVsQlFVa3NjMEpCUVhOQ0xFTkJRVUU3UlVGRE1VSXNTVUZCU1R0SlFVTkdMRTFCUVUwc2JVSkJRVzFDTEVOQlFVTTdUVUZEZUVJc1RVRkJUVHROUVVOT0xFMUJRVTBzWjBKQlFVRXNZVUZCV1N4cFFrRkJhVUk3VFVGRGJrTXNZVUZCWVR0UlFVTllMRk5CUVZNc1VVRkJVVHRSUVVOcVFpeFZRVUZWTzFWQlFVVXNhMEpCUVd0Q0xEQkNRVUZCTzFOQlFUUkNPMUZCUXpGRUxGZEJRVmNzVlVGQlZUdFJRVU55UWl4UlFVRlJMR2RDUVVGblFqdFJRVU40UWl4TlFVRkJPMDlCUTBZN1MwRkRSQ3hEUVVGRExFTkJRVUU3U1VGRlJpeDVRa0ZCZVVJc1RVRkJUU3d3UWtGQk1FSXNRMEZEZGtRN1RVRkRSU3hUUVVGVExGRkJRVkU3VFVGRGFrSXNWVUZCVlR0UlFVRkZMR3RDUVVGclFpd3dRa0ZCUVR0UFFVRTBRanROUVVNeFJDeFZRVUZWTEZWQlFWVTdUVUZEY0VJc1VVRkJVU3huUWtGQlowSTdUVUZEZUVJc1RVRkJRVHRMUVVORUxFVkJRMFE3VFVGQlJTeFJRVUZSTEZsQlFVRXNPRUpCUVRaQ0xFdEJRVXM3VFVGQlJTeFZRVUZWTEUxQlFVRTdTMEZETVVRc1EwRkJReXhEUVVGQk96czdTVUZIUkN4SFFVRkhMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVUU3UjBGRGJFSXNRMEZCUXl4alFVRmpPMGxCUTJRc1QwRkJUeXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVRTdSMEZEYmtJN096dEZRVWRCTEVsQlFVazdTVUZEUml4TlFVRk5MRzFDUVVGdFFpeERRVUZETzAxQlEzaENMRTFCUVUwN1RVRkRUaXhOUVVGTkxHZENRVUZCTEdGQlFWa3NiMEpCUVc5Q08wMUJRM1JETEdGQlFXRTdVVUZEV0N4UlFVRlJMR2RDUVVGblFqdFJRVU40UWl4VFFVRlRMRkZCUVZFN1VVRkRha0lzVlVGQlZTeFZRVUZWTzFGQlEzQkNMRTFCUVUwN1VVRkRUaXh6UWtGQlFUdFBRVU5HTzB0QlEwUXNRMEZCUXl4RFFVRkJPMGxCUTBZc1RVRkJUU3huUWtGQlowSXNRMEZCUXl4elFrRkJjMElzUTBGQlF5eERRVUZCTzBkQlF5OURMRU5CUVVNc1kwRkJZenM3T3p0SlFVbGtMRWxCUVVrc1MwRkJTeXhMUVVGTExFdEJRVXNzWVVGQlFTeFhRVUZWTEZOQlFWTXNiMEpCUVc5Q0xFVkJRVVU3VFVGRE1VUXNUMEZCVHl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3UzBGRGJrSTdSMEZEUmp0RlFVTkJMRTlCUVU4c1IwRkJSeXhGUVVGRkxFTkJRVUU3UTBGRFpEczdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEZWxOQkxFbEJRVUVzU1VGQlFTeEhRVUZCTEU5QlFVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzVFVGQlRTeDFRa0ZCZFVJc1IwRkJSenRGUVVNNVFpeFhRVUZYTEVWQlFVVXNRMEZCUXl4cFFrRkJXU3hEUVVGRExGbEJRVmtzUTBGQlF6dEZRVU40UXl4alFVRmpMRVZCUVVVc2EwSkJRV3RDTzBWQlEyeERMRk5CUVZNc1JVRkJSVHRKUVVOVUxGZEJRVmNzUlVGQlJUdEZRVU5tTzBGQlEwWXNRMEZCUXp0QlFVRkRMRWxCUVVFc1VVRkJRU3hIUVVOaExIVkNRVUYxUWp0QlFVVjBRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVkJCTEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc1VVRkJRVHRCUVZGQkxHVkJRV1VzYTBKQlFXdENMRU5CUVVNc1NVRkJTU3hGUVVGRkxFZEJRVWNzUlVGQlJTeExRVUZMTEVWQlFVVXNSMEZCUnl4RlFVRkZPMFZCUVVVN1FVRkJXU3hEUVVGRExFVkJRVVU3UlVGRGVFVXNSMEZCUnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxGZEJRVmNzUTBGQlF5eERRVUZETzBWQlEyaERMRTlCUVU4c1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRFpEczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5vUTBFc1NVRkJRU3hKUVVGQkxFZEJRVUVzVDBGQlFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSenRGUVVOMlFpeFhRVUZYTEVWQlFVVXNRMEZCUXl4cFFrRkJXU3hEUVVGRExHdENRVUZyUWl4RFFVRkRPMFZCUXpsRExHTkJRV01zUlVGQlJTeDFRa0ZCZFVJN1JVRkRka01zVTBGQlV5eEZRVUZGTzBsQlExUXNaMEpCUVdkQ0xFVkJRVVU3UlVGRGNFSTdRVUZEUml4RFFVRkRPMEZCUVVNc1NVRkJRU3hSUVVGQkxFZEJRMkVzWjBKQlFXZENPMEZCUlM5Q08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVU1QkxFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNVVUZCUVR0QlFVOUJMR1ZCUVdVc2RVSkJRWFZDTEVOQlEzQkRMRWRCUVVjc1JVRkRTQ3hIUVVGSExFVkJRMGdzUzBGQlN5eEZRVU5NTEVkQlFVY3NSVUZEU0R0RlFVRkZMR2RDUVVGblFpeEZRVUZGTzBGQlFXdENMRU5CUVVNc1JVRkRka003UlVGRFFTeEhRVUZITEVOQlFVTXNUVUZCVFN4SFFVRkhPMGxCUTFnc1NVRkJTU3hOUVVGTkxHbENRVUZwUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU03UlVGRGVrTXNRMEZCUXp0RlFVTkVMRTlCUVU4c1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRFpEczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5vUkVFc1NVRkJRU3hwUWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzV1VGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzYVVKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdsQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4blFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1lVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2IwSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGZEJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJkVU1zVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJSWFpETEUxQlFVMHNVVUZCVVN4SFFVRkhMRU5CUTJZc2VVSkJRV2RDTEVWQlEyaENMRzlDUVVGWExFVkJRMWdzZVVKQlFXZENMRVZCUTJoQ0xIbENRVUZuUWl4RlFVTm9RaXgzUWtGQlpTeEZRVU5tTEhGQ1FVRlpMRVZCUTFvc05FSkJRVzFDTEVWQlEyNUNMRzFDUVVGVkxFTkJRMWc3UVVGQlF5eEpRVUZCTEZGQlFVRXNSMEZEWVN4UlFVRlJPMEZCUVVFc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeFJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEyNUNka0lzU1VGQlFTeEpRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1dVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSenRGUVVOMlFpeFhRVUZYTEVWQlFVVXNRMEZCUXl4cFFrRkJXU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRPMFZCUXk5RExHTkJRV01zUlVGQlJTeDFRa0ZCZFVJN1JVRkRka01zVTBGQlV5eEZRVUZGTzBsQlExUXNWMEZCVnl4RlFVRkZMRWxCUVVrN1NVRkRha0lzY1VKQlFYRkNMRVZCUVVVc1NVRkJTVHRKUVVNelFpeDNRa0ZCZDBJc1JVRkJSVHRGUVVNMVFqdEJRVU5HTEVOQlFVTTdRVUZCUXl4SlFVRkJMRkZCUVVFc1IwRkRZU3huUWtGQlowSTdRVUZGTDBJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlRrRXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hSUVVGQk8wRkJUMEVzVTBGQlV5eDFRa0ZCZFVJc1EwRkRPVUlzUjBGQlJ5eEZRVU5JTEVkQlFVY3NSVUZEU0N4TFFVRkxMRVZCUTB3c1IwRkJSeXhGUVVOSU8wVkJRVVVzVjBGQlZ6dEZRVUZGTEhGQ1FVRnhRanRGUVVGRk8wRkJRWGxDTEVOQlFVTXNSVUZEYUVVN1JVRkRRU3hOUVVGTk8wbEJRVVU3UlVGQlR5eERRVUZETEVkQlFVY3NSMEZCUnp0RlFVTjBRaXhKUVVGSkxIRkNRVUZ4UWl4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExGTkJRVk1zUlVGQlJUdEpRVU12UXl4M1FrRkJkMElzUTBGQlF5eE5RVUZOTEVOQlFVTTdTVUZGYUVNc1YwRkJWeXhEUVVOVU8wMUJRMFVzUzBGQlN5eEZRVUZITEcxRFFVRnJRenROUVVNeFF5eFJRVUZSTEVWQlFVVXNjVU5CUVhkQ0xFTkJRVU1zWTBGQll6dE5RVU5xUkN4UlFVRlJMRVZCUVVVN1VVRkRVaXhIUVVGSExFVkJRVVU3VFVGRFVEdEpRVU5HTEVOQlFVTXNSVUZEUkR0TlFVTkZMRzlDUVVGdlFpeEZRVUZGTzBsQlEzaENMRU5CUTBZc1EwRkJRenRGUVVOSU8wVkJSVUVzUjBGQlJ5eERRVUZETEUxQlFVMHNSMEZCUnl4SlFVRkpPMFZCUTJwQ0xFOUJRVThzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEWkRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTm9SVUVzU1VGQlFTeGhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1NVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeE5RVUZOTEhWQ1FVRjFRaXhIUVVGSE8wVkJRemxDTEZkQlFWY3NSVUZCUlN4RFFVRkRMR2xDUVVGWkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNN1JVRkRhRVFzWTBGQll5eEZRVUZGTERoQ1FVRTRRanRGUVVNNVF5eFRRVUZUTEVWQlFVVTdTVUZEVkN4TlFVRk5MRVZCUVVVc1NVRkJTVHRKUVVOYUxGZEJRVmNzUlVGQlJTeEpRVUZKTzBsQlEycENMR2RDUVVGblFpeEZRVUZGTEVsQlFVazdTVUZEZEVJc1lVRkJZU3hGUVVGRkxFbEJRVWs3U1VGRGJrSXNlVUpCUVhsQ0xFVkJRVVU3UlVGRE4wSTdRVUZEUml4RFFVRkRPMEZCUVVNc1NVRkJRU3hSUVVGQkxFZEJRMkVzZFVKQlFYVkNMRVZCUlhSRE8wRkJRVUVzVDBGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4UlFVRkJPMEZCUTBFc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXpzN1FVRkZka0k3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4bFFVRmxMRGhDUVVFNFFpeERRVU16UXl4SlFVRkpMRVZCUTBvc1IwRkJSeXhGUVVOSUxFdEJRVXNzUlVGRFRDeEhRVUZITEVWQlEwZzdSVUZEUlN4TlFVRk5PMFZCUTA0c1YwRkJWenRGUVVOWUxHZENRVUZuUWp0RlFVTm9RaXhoUVVGaE8wVkJRMkk3UVVGRFJpeERRVUZETEVWQlEwUTdSVUZEUVN4SlFVRkpMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVTdTVUZEY2tJc1IwRkJSeXhEUVVGRExFdEJRVXNzUjBGQlJ5eDFRa0ZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXh0UWtGQmJVSXNRMEZETVVNc2MwSkJRWEZDTEdsQ1FVRlpMRU5CUVVNc2IwSkJRWEZDTEdkQ1FVTXhSQ3hEUVVGRE8wbEJRMFFzVDBGQlR5eEhRVUZITEVOQlFVTXNRMEZCUXp0RlFVTmtPMFZCUlVFc1NVRkJTU3hoUVVGaExFTkJRVU1zYVVKQlFWa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1JVRkJSVHRKUVVNMVF6dEpRVU5CTzBsQlEwRTdTVUZEUVN4SlFVRkpPMDFCUTBZc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTTdUVUZEYWtJc1RVRkJUU3huUWtGQlowSXNRMEZCUXl4SlFVRkpMRU5CUVVNN1RVRkROVUlzUjBGQlJ5eERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRmRCUVZjc1EwRkJReXhEUVVGRE8wMUJRMmhETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUTFBc1EwRkJReXhEUVVGRExFOUJRVThzUzBGQlN5eEZRVUZGTzAxQlEyUXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJRenRKUVVOYUxFTkJRVU1zVTBGQlV6dE5RVU5TTEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRE8wbEJRM1JDTzBsQlEwRXNUMEZCVHl4VFFVRlRPMFZCUTJ4Q096dEZRVVZCTzBWQlEwRXNTVUZCU1R0SlFVTkdMRTFCUVUwc2VVSkJRWGxDTEVOQlFVTXNRMEZCUXp0RlFVTnVReXhEUVVGRExFTkJRVU1zVDBGQlR5eEhRVUZITEVWQlFVVTdTVUZEV2l4SFFVRkhMRU5CUVVNc1MwRkJTeXhIUVVGSExFZEJRVWM3U1VGRFppeFBRVUZQTEVkQlFVY3NRMEZCUXl4RFFVRkRPMFZCUTJRN08wVkJSVUU3UlVGRFFTeE5RVUZOTEZGQlFWRXNSMEZCUnl4TlFVRk5MRmRCUVZjc1EwRkJReXhEUVVGRE8wVkJRM0JETzBWQlEwRXNTVUZCU1N4UlFVRlJMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJUdEpRVU4yUWl4SFFVRkhMRU5CUVVNc1RVRkJUU3hIUVVGSExGRkJRVkU3UlVGRGRrSXNRMEZCUXl4TlFVRk5PMGxCUTB3N1NVRkRRVHRKUVVOQkxFZEJRVWNzUTBGQlF5eExRVUZMTEVkQlFVY3NkVUpCUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVU5vUXl3MFJFRkRSaXhEUVVGRE8wVkJRMGc3UlVGRlFTeFBRVUZQTEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTJRN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRNMGRCTEVsQlFVRXNZVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFbEJRVUVzUjBGQlFTeFBRVUZCTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeE5RVUZOTEZsQlFWa3NSMEZCUnp0RlFVTnVRaXhYUVVGWExFVkJRVVVzUTBGQlF5eHBRa0ZCV1N4RFFVRkRMR0ZCUVdFc1EwRkJRenRGUVVONlF5eGpRVUZqTEVWQlFVVXNiVUpCUVcxQ08wVkJRMjVETEZOQlFWTXNSVUZCUlR0SlFVTlVMR3RDUVVGclFpeEZRVUZGTEVsQlFVazdTVUZEZUVJc1YwRkJWeXhGUVVGRk8wVkJRMlk3UVVGRFJpeERRVUZETzBGQlFVTXNTVUZCUVN4UlFVRkJMRWRCUTJFc1dVRkJXVHRCUVVVelFqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVNUJMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzVVVGQlFUdEJRVTlCTEZOQlFWTXNiVUpCUVcxQ0xFTkJRekZDTEVkQlFVY3NSVUZEU0N4SFFVRkhMRVZCUTBnc1MwRkJTeXhGUVVOTUxFZEJRVWNzUlVGRFNEdEZRVUZGTEd0Q1FVRnJRanRGUVVGRk8wRkJRVmtzUTBGQlF5eEZRVU51UXp0RlFVTkJMRTFCUVUwN1NVRkJSU3hOUVVGTk8wbEJRVVU3UlVGQlR5eERRVUZETEVkQlFVY3NSMEZCUnp0RlFVTTVRaXhKUVVGSkxFMUJRVTBzU1VGQlNTeFBRVUZQTEUxQlFVMHNTMEZCU3l4UlFVRlJMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZPMGxCUTJ4RkxFMUJRVTA3VFVGQlJTeEpRVUZKTEVkQlFVY3NTVUZCU1R0TlFVRkZMRWxCUVVrc1IwRkJSeXhKUVVGSk8wMUJRVVVzUjBGQlJ6dEpRVUZuUWl4RFFVRkRMRWRCUVVjc1RVRkJUVHRKUVVVdlJDeHJRa0ZCYTBJc1EwRkJRenROUVVOcVFpeEhRVUZITEdWQlFXVTdUVUZEYkVJc1QwRkJUeXhGUVVGRkxFbEJRVWs3VFVGRFlpeEpRVUZKTzAxQlEwb3NWMEZCVnp0TlFVTllPMGxCUTBZc1EwRkJReXhEUVVGRE8wVkJRMG9zUTBGQlF5eE5RVUZOTzBsQlEwd3NUMEZCVHl4SFFVRkhMRU5CUVVNc2RVSkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNZVUZCWVN4RFFVRkRPMDFCUVVVc1NVRkJTU3hGUVVGRk8wbEJRVThzUTBGQlF5eERRVUZETEVOQlFVTTdSVUZETTBRN1JVRkZRU3hIUVVGSExFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVazdSVUZEYWtJc1QwRkJUeXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU5rT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzcEVRU3hKUVVGQkxHRkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWjBKQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hKUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNVVUZCUVN4SFFVRkJMRTlCUVVFN1FVRlBRU3hKUVVGQkxGTkJRVUVzUjBGQlFTeFBRVUZCTzBGQlMwRXNUVUZCVFN4dFFrRkJiVUlzUjBGQlJ6dEZRVU14UWl4WFFVRlhMRVZCUVVVc1EwRkJReXhwUWtGQldTeERRVUZETEhGQ1FVRnhRaXhEUVVGRE8wVkJRMnBFTEdOQlFXTXNSVUZCUlN3d1FrRkJNRUk3UlVGRE1VTXNVMEZCVXl4RlFVRkZPMGxCUTFRc2FVSkJRV2xDTEVWQlFVVXNTVUZCU1R0SlFVTjJRaXd3UWtGQk1FSXNSVUZCUlN4SlFVRkpPMGxCUTJoRExHVkJRV1VzUlVGQlJTeEpRVUZKTzBsQlEzSkNMR2RDUVVGblFpeEZRVUZGTEVsQlFVazdTVUZEZEVJc2JVSkJRVzFDTEVWQlFVVTdSVUZEZGtJN1FVRkRSaXhEUVVGRE8wRkJRVU1zU1VGQlFTeFJRVUZCTEVkQlEyRXNiVUpCUVcxQ08wRkJRVUVzVDBGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4UlFVRkJPMEZCUld4RExGTkJRVk1zYlVKQlFXMUNMRU5CUVVNc1QwRkJUeXhGUVVGRkxEQkNRVUV3UWl4RlFVRkZPMFZCUTJoRkxFbEJRMFVzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4cFEwRkJkMElzUTBGQlF5eERRVU53UXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVGRkxFOUJRVThzUlVGQlJUdEZRVUZITEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkROVUlzVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4RlFVTndRanRKUVVOQkxFOUJRVTg3VFVGRFRDeFBRVUZQTzAxQlExQXNUVUZCVFN4RlFVRkZMSGxDUVVGblFpeERRVUZETEVkQlFVYzdUVUZETlVJc1VVRkJVU3hGUVVGRkxEUkNRVUZ0UWl4RFFVRkRMRTlCUVU4c1EwRkJRenROUVVOMFF5eE5RVUZOTEVWQlFVVXNaME5CUVhWQ0xFTkJRVU1zVDBGQlR5eERRVUZETzAxQlEzaERMRWxCUVVrc1JVRkJSU3cyUWtGQmIwSXNRMEZCUXl4UFFVRlBPMGxCUTNCRExFTkJRVU03UlVGRFNEdEZRVVZCTEU5QlFVOHNNRUpCUVRCQ0xFTkJRVU03U1VGQlJUdEZRVUZSTEVOQlFVTXNRMEZCUXp0QlFVTm9SRHRCUVVWQkxHVkJRV1VzTUVKQlFUQkNMRU5CUTNaRExFZEJRVWNzUlVGRFNDeEhRVUZITEVWQlEwZ3NTMEZCU3l4RlFVTk1MRWRCUVVjc1JVRkRTRHRGUVVORkxHbENRVUZwUWp0RlFVTnFRaXd3UWtGQk1FSTdSVUZETVVJc1pVRkJaVHRGUVVObUxHZENRVUZuUWp0RlFVTm9RanRCUVVOR0xFTkJRVU1zUlVGRFJEdEZRVUZCTEVsQlFVRXNWMEZCUVR0RlFVTkJMRWxCUVVrc1IwRkJRU3hYUVVGQkxFZEJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNZMEZCUVN4WFFVRkJMR1ZCUVZZc1YwRkJRU3hEUVVGaExFTkJRVU1zUTBGQlF5eExRVUZKTEU5QlFVOHNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eFJRVUZSTEVWQlFVVTdTVUZEZWtRc1QwRkJUeXhIUVVGSExFTkJRMUlzZFVKQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVGRE8wMUJRekZDTEU5QlFVOHNSVUZCUnl4cFJFRkJaMFFzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZEZEVVc1IwRkJSeXhEUVVGRExFMUJRMDRzUTBGQlJUdEpRVU5LTEVOQlFVTXNRMEZEU0N4RFFVRkRPMFZCUTBnN1JVRkZRU3hOUVVGTk8wbEJRVVU3UlVGQlR5eERRVUZETEVkQlFVY3NSMEZCUnp0RlFVVjBRaXhOUVVGTk8wbEJRVVU3UlVGQlVTeERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRmFrTXNUVUZCVFN4VFFVRlRMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZCTEZsQlFVa3NSVUZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJRenRGUVVVdlJDeEpRVUZKTEZOQlFWTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhGUVVGRk8wbEJRM2hDTEU5QlFVOHNSMEZCUnl4RFFVTlNMSFZDUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEdGQlFXRXNRMEZCUXp0TlFVTXhRaXhQUVVGUExFVkJRVWNzYjBWQlFXMUZMRk5CUVZVN1NVRkRla1lzUTBGQlF5eERRVU5JTEVOQlFVTTdSVUZEU0R0RlFVVkJMRTFCUVUwc1VVRkJVU3hIUVVGSExFOUJRVThzVDBGQlR5eExRVUZMTEZGQlFWRXNTVUZCU1N4UFFVRlBMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03UlVGRmNrVXNTVUZCU1N4RFFVRkRMRWxCUVVFc2MwTkJRVFJDTEVWQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVN1NVRkRNME1zVDBGQlR5eEhRVUZITEVOQlExSXNkVUpCUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zWVVGQllTeERRVUZETzAxQlF6RkNMRTlCUVU4c1JVRkJSeXh4UmtGQmIwWXNUMEZCVVR0SlFVTjRSeXhEUVVGRExFTkJRMGdzUTBGQlF6dEZRVU5JTzBWQlJVRXNTVUZCU1N4RFFVRkRMRWxCUVVFc2RVSkJRV0VzUlVGQlF5eFJRVUZSTEVOQlFVTXNVVUZCVVN4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVU3U1VGRE1VTXNUMEZCVHl4SFFVRkhMRU5CUTFJc2RVSkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNZVUZCWVN4RFFVRkRPMDFCUXpGQ0xFOUJRVThzUlVGQlJ5eHhRa0ZCYjBJc1VVRkJVeXc0UkVGQk5rUXNUMEZCVVR0SlFVTTVSeXhEUVVGRExFTkJRMGdzUTBGQlF6dEZRVU5JTzBWQlJVRXNUVUZCVFN4WFFVRlhMRWRCUVVjc2JVSkJRVzFDTEVOQlFVTXNVVUZCVVN4RlFVRkZMREJDUVVFd1FpeERRVUZETzBWQlF6ZEZMRWxCUVVrc1YwRkJWeXhGUVVGRk8wbEJRMllzVFVGQlRTeGpRVUZqTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dEpRVU14UXl4SlFVRkpMR05CUVdNc1MwRkJTeXhSUVVGUkxFVkJRVVU3VFVGREwwSXNSMEZCUnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSk8wMUJRMnBDTEU5QlFVOHNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRaRHRKUVVOQkxFbEJRVWs3VFVGRFJpeE5RVUZOTEcxQ1FVRnRRaXhIUVVGSExFMUJRVTBzYlVKQlFXMUNMRU5CUVVNN1VVRkRjRVFzVFVGQlRUdFJRVU5PTEVsQlFVa3NSVUZCUlN3MlFrRkJXU3hEUVVGRExHMUNRVUZ0UWp0UlFVTjBRenROUVVOR0xFTkJRVU1zUTBGQlF6dE5RVU5HTEVsQlEwVXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhwUTBGQmQwSXNRMEZCUXl4RFFVTndReXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVUZGTEU5QlFVOHNSVUZCUlR0TlFVRkhMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGRE5VSXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVOd1FqdFJRVU5CTEUxQlFVMHNaVUZCWlN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVsQlFVa3NRMEZCUXp0TlFVTnFSQ3hEUVVGRExFMUJRVTA3VVVGRFRDeE5RVUZOTEdkQ1FVRm5RaXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRVZCUVVVc1EwRkJRenROUVVOb1JEdE5RVU5CTEVkQlFVY3NRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTVHRKUVVOdVFpeERRVUZETEVOQlFVTXNUMEZCVHl4TFFVRkxMRVZCUVVVN1RVRkRaQ3hQUVVGUExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTTdTVUZEYmtJN1NVRkRRU3hQUVVGUExFZEJRVWNzUTBGQlF5eERRVUZETzBWQlEyUTdSVUZEUVN4UFFVRlBMRWRCUVVjc1EwRkRVaXgxUWtGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNN1NVRkRlRUlzU1VGQlNTeEZRVUZGTEVsQlFVazdTVUZCUlR0SlFVTmFMRTlCUVU4c1JVRkJSeXd3UWtGQmVVSXNUMEZCVVN4cFEwRkJaME1zYVVKQlFWa3NRMEZCUXl4clFrRkJiVUk3UlVGRE4wY3NRMEZCUXl4RFFVTklMRU5CUVVNN1FVRkRTRHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVONFNVRXNTVUZCUVN4aFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzU1VGQlFTeEhRVUZCTEU5QlFVRTdRVUZGUVN4TlFVRk5MRlZCUVZVc1IwRkJSenRGUVVOcVFpeFhRVUZYTEVWQlFVVXNRMEZCUXl4cFFrRkJXU3hEUVVGRExGZEJRVmNzUlVGQlJTeHBRa0ZCV1N4RFFVRkRMR3RDUVVGclFpeERRVUZETzBWQlEzaEZMR05CUVdNc1JVRkJSU3hwUWtGQmFVSTdSVUZEYWtNc1UwRkJVeXhGUVVGRk8wbEJRMVFzZFVKQlFYVkNMRVZCUVVVN1JVRkRNMEk3UVVGRFJpeERRVUZETzBGQlFVTXNTVUZCUVN4UlFVRkJMRWRCUTJFc1ZVRkJWVHRCUVVWNlFqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVU1QkxFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNVVUZCUVR0QlFVOUJMR1ZCUVdVc2FVSkJRV2xDTEVOQlF6bENMRWRCUVVjc1JVRkRTQ3hIUVVGSExFVkJRMGdzUzBGQlN5eEZRVU5NTEVkQlFVY3NSVUZEU0R0RlFVRkZPMEZCUVhkQ0xFTkJRVU1zUlVGRE0wSTdSVUZEUVN4SlFVRkpPMGxCUTBZc1RVRkJUVHROUVVGRkxFOUJRVThzUlVGQlJTeExRVUZMTzAxQlFVVTdTVUZCU3l4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExFMUJRVTA3U1VGRE0wTXNUVUZCVFN4elFrRkJjMElzUjBGQlJ5eE5RVUZOTEhWQ1FVRjFRaXhEUVVGRExFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTTdTVUZEZWtVc1RVRkJUU3h6UWtGQmMwSXNRMEZCUXl4TlFVRk5PMGxCUTI1RExFZEJRVWNzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1R0SlFVTnFRaXhQUVVGUExFZEJRVWNzUTBGQlF5eERRVUZETzBWQlEyUXNRMEZCUXl4RFFVRkRMRTlCUVU4c1MwRkJTeXhGUVVGRk8wbEJRMlFzU1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4TFFVRkxMRzFEUVVGdFF5eEZRVUZGTzAxQlEzcEVMRTlCUVU4c1IwRkJSeXhEUVVGRExIVkNRVUZUTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTjBSRHRKUVVOQkxFOUJRVThzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXp0RlFVTnVRanRCUVVOR096czdPenM3T3pzN096czdPenM3T3pzN08wRkRha1JCTEVsQlFVRXNkVUpCUVVFc1IwRkJRU3hQUVVGQk8wRkJRVUVzVFVGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4MVFrRkJRU3hGUVVGQkxFOUJRVUVzVjBGQlFTeEhRVUZCTzBWQlFVRXNTVUZCUVN4SFFVRkJMR3RDUVVGQkxFZEJRVUU3UlVGQlFTeEpRVUZCTEVkQlFVRXNTVUZCUVN4UFFVRkJMRWxCUVVFc1QwRkJRU3hEUVVGQkxFZEJRVUVzVFVGQlFTeDFRa0ZCUVN4RFFVRkJMRWRCUVVFN1JVRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPMGxCUVVFc1ZVRkJRVHRKUVVGQkxFZEJRVUVzVjBGQlFTeERRVUZCTzAxQlFVRXNUMEZCUVN4MVFrRkJRU3hEUVVGQkxFZEJRVUU3U1VGQlFUdEZRVUZCTzBGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEUlVFc1NVRkJRU3hwUWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzU1VGQlFTeEhRVUZCTEU5QlFVRTdRVUZCTmtRc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPMEZCUlRkRUxFMUJRVTBzWjBKQlFXZENMRWRCUVVjc1NVRkJRU3g1UWtGQmJVSXNSVUZCUXl4RFFVRkRPMEZCZVVKMlF5eGxRVUZsTEhGQ1FVRnhRaXhEUVVONlF5eFhRVUYzUWl4RlFVTjRRaXhWUVVGclFpeEZRVU5zUWl4UFFVRmxMRVZCUTJZc1lVRkJjVUlzUlVGRFZUdEZRVU12UWl4SlFVRkpMR05CUVdNN1JVRkRiRUk3UlVGRFFTeE5RVUZOTEUxQlFVMHNSMEZCUnl4WFFVRlhMRU5CUVVNc1UwRkJVeXhKUVVGSkxGZEJRVmNzUTBGQlF5eGhRVUZoTzBWQlJXcEZMRWxCUVVrc1ZVRkJWU3hMUVVGTExHbENRVUZaTEVOQlFVTXNiVUpCUVcxQ0xFVkJRVVU3U1VGRGJrUXNZMEZCWXl4SFFVRkhPMDFCUTJZc1UwRkJVeXhGUVVGRkxFMUJRVTBzWVVGQlRpeE5RVUZOTEhWQ1FVRk9MRTFCUVUwc1EwRkJSU3hOUVVGTk8wMUJRM3BDTEdWQlFXVXNSVUZCUlN4VlFVRlZPMDFCUXpOQ0xGRkJRVkVzUlVGQlJTeFBRVUZQTzAxQlEycENMRWxCUVVrc1JVRkJSU3hOUVVGTkxHRkJRVTRzVFVGQlRTeDFRa0ZCVGl4TlFVRk5MRU5CUVVVc1NVRkJTVHROUVVOc1FqdEpRVU5HTEVOQlFVTTdSVUZEU0N4RFFVRkRMRTFCUVUwc1NVRkRUQ3hWUVVGVkxFdEJRVXNzYVVKQlFWa3NRMEZCUXl4UlFVRlJMRWxCUTNCRExGVkJRVlVzUzBGQlN5eHBRa0ZCV1N4RFFVRkRMR0ZCUVdFc1JVRkRla003U1VGRFFTeGpRVUZqTEVkQlFVYzdUVUZEWml4VFFVRlRMRVZCUVVVc1RVRkJUU3hoUVVGT0xFMUJRVTBzZFVKQlFVNHNUVUZCVFN4RFFVRkZMRTFCUVUwN1RVRkRla0lzWlVGQlpTeEZRVUZGTEZWQlFWVTdUVUZETTBJc1VVRkJVU3hGUVVGRkxFOUJRVTg3VFVGRGFrSXNTVUZCU1N4RlFVRkZPMUZCUTBvc1kwRkJZeXhGUVVGRkxFMUJRVTBzWVVGQlRpeE5RVUZOTEhWQ1FVRk9MRTFCUVUwc1EwRkJSU3hKUVVGSk8xRkJRelZDTEZkQlFWY3NSVUZCUlN4TlFVRk5MR0ZCUVU0c1RVRkJUU3gxUWtGQlRpeE5RVUZOTEVOQlFVVTdUVUZEZGtJc1EwRkJRenROUVVORU8wbEJRMFlzUTBGQlF6dEZRVU5JTEVOQlFVTXNUVUZCVFR0SlFVRkJMRWxCUVVFc2NVSkJRVUVzUlVGQlFTeHpRa0ZCUVN4RlFVRkJMSE5DUVVGQkxFVkJRVUVzYzBKQlFVRXNSVUZCUVN4elFrRkJRU3hGUVVGQkxITkNRVUZCTzBsQlEwd3NZMEZCWXl4SFFVRkhPMDFCUTJZc1UwRkJVeXhGUVVGRkxGZEJRVmNzUTBGQlF5eE5RVUZOTzAxQlF6ZENMR1ZCUVdVc1JVRkJSU3hWUVVGVk8wMUJRek5DTEZGQlFWRXNSVUZCUlN4UFFVRlBPMDFCUTJwQ0xFbEJRVWtzUlVGQlJUdFJRVU5LTEZsQlFWa3NSMEZCUVN4eFFrRkJRU3hIUVVGRkxGZEJRVmNzUTBGQlF5eFJRVUZSTEdOQlFVRXNjVUpCUVVFc2RVSkJRWEJDTEhGQ1FVRkJMRU5CUVhOQ0xFbEJRVWs3VVVGRGVFTXNWVUZCVlN4SFFVRkJMSE5DUVVGQkxFZEJRVVVzVjBGQlZ5eERRVUZETEZGQlFWRXNZMEZCUVN4elFrRkJRU3gxUWtGQmNFSXNjMEpCUVVFc1EwRkJjMElzUlVGQlJUdFJRVU53UXl4SFFVRkhMRWRCUVVFc2MwSkJRVUVzUjBGQlJTeFhRVUZYTEVOQlFVTXNVVUZCVVN4alFVRkJMSE5DUVVGQkxIVkNRVUZ3UWl4elFrRkJRU3hEUVVGelFpeEhRVUZITzFGQlF6bENMRkZCUVZFc1IwRkJRU3h6UWtGQlFTeEhRVUZGTEZkQlFWY3NRMEZCUXl4UlFVRlJMR05CUVVFc2MwSkJRVUVzZFVKQlFYQkNMSE5DUVVGQkxFTkJRWE5DTEZGQlFWRTdVVUZEZUVNc1MwRkJTeXhIUVVGQkxITkNRVUZCTEVkQlFVVXNWMEZCVnl4RFFVRkRMRkZCUVZFc1kwRkJRU3h6UWtGQlFTeDFRa0ZCY0VJc2MwSkJRVUVzUTBGQmMwSXNTMEZCU3p0UlFVTnNReXhKUVVGSkxFZEJRVUVzYzBKQlFVRXNSMEZCUlN4WFFVRlhMRU5CUVVNc1VVRkJVU3hqUVVGQkxITkNRVUZCTEhWQ1FVRndRaXh6UWtGQlFTeERRVUZ6UWp0TlFVTTVRaXhEUVVGRE8wMUJRMFE3U1VGRFJpeERRVUZETzBWQlEwZzdSVUZGUVN4TlFVRk5MRkZCUVd0Q0xFZEJRVWNzVFVGQlRTeG5Ra0ZCWjBJc1EwRkRMME1zYTBWQlFXdEZMRVZCUTJ4Rk8wbEJRMFVzVFVGQlRTeEZRVUZGTEUxQlFVMDdTVUZEWkN4UFFVRlBMRVZCUVVVN1RVRkRVQ3hOUVVGTkxFVkJRVVVzYTBKQlFXdENPMDFCUXpGQ0xHTkJRV01zUlVGQlJUdEpRVU5zUWl4RFFVRkRPMGxCUTBRc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNZMEZCWXp0RlFVTnlReXhEUVVOR0xFTkJRVU03UlVGRFJDeFBRVUZQTEUxQlFVMHNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRemxDT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF6TkdRU3hKUVVGQkxIRkNRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1UwRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVVkJMRWxCUVVFc1VVRkJRU3hIUVVGQkxFOUJRVUU3UVVGQlowVXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlJXaEZMRTFCUVUwc2EwSkJRV3RDTEVkQlFVYzdSVUZEZWtJN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzVFVGQlRTeGpRVUZqTEVOQlFVTXNaVUZCWlN4RlFVRkZMRlZCUVZVc1JVRkJSVHRKUVVOb1JDeEpRVUZKTEVOQlFVTXNaVUZCWlN4SlFVRkpMR1ZCUVdVc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTzAxQlEyeEVMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zT0VKQlFUaENMRU5CUVVNN1NVRkRha1E3U1VGRlFTeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExFbEJRVWtzZFVOQlFXbENMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGJrUXNUVUZCVFN4alFVRmpMRWRCUVVjc2FVSkJRV2xDTEVOQlFVTXNkMEpCUVhkQ0xFTkJReTlFTEc5Q1FVRlhMRU5CUVVNc1UwRkRaQ3hEUVVGRE8wbEJRMFFzVFVGQlRTeFBRVUZQTEVkQlFVY3NZMEZCWXl4RFFVRkRMRU5CUVVNN1NVRkRhRU1zVFVGQlRTeEpRVUZKTEVkQlFVYzdUVUZEV0N4UlFVRlJMRVZCUVVVc1ZVRkJWVHROUVVOd1FpeG5Ra0ZCWjBJc1JVRkJSU3hsUVVGbExFTkJRVU03U1VGRGNFTXNRMEZCUXp0SlFVVkVMRTFCUVUwc1QwRkJUeXhEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZETDBJc1RVRkJUU3huUWtGQlowSXNSMEZCUnl4TlFVRk5MRTlCUVU4c1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dEpRVU53UkN4cFFrRkJSeXhEUVVGRExFdEJRVXNzUTBGQlJTeHhRa0ZCYjBJc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eGxRVUZsTEVOQlFVVXNSVUZCUXl4RFFVRkRPMGxCUTJwRkxHbENRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkZMSE5DUVVGeFFpeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMR2RDUVVGblFpeERRVUZGTEVWQlFVTXNRMEZCUXp0SlFVVnVSU3hKUVVGSkxHZENRVUZuUWl4RFFVRkRMRTFCUVUwc1MwRkJTeXhsUVVGbExFTkJRVU1zVFVGQlRTeEZRVUZGTzAxQlEzUkVPMDFCUTBFc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5d3dRa0ZCTUVJc1EwRkJRenRKUVVNM1F6dEpRVVZCTEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdUVUZEYUVRc1NVRkRSU3huUWtGQlowSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eExRVUZMTEdWQlFXVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eEZRVU4wUlR0UlFVTkJMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRMW9zY1VOQlFXOURMR1ZCUVdVc1EwRkJReXhEUVVGRExFTkJRVVVzWlVGQll5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRExFTkJRVVVzUlVGRE5VWXNRMEZCUXp0TlFVTklPMGxCUTBZN1JVRkRSanRCUVVOR0xFTkJRVU03UVVGQlF5eEpRVUZCTEZGQlFVRXNSMEZGWVN4clFrRkJhMEk3UVVGQlFTeFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRkZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRM1pFYWtNc1NVRkJRU3h2UWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzY1VKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEU5QlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hsUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hMUVVGQkxFZEJRVUVzVDBGQlFUdEJRVUV5UXl4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZGTTBNc1RVRkJUU3hKUVVGSkxFZEJRVWNzUTBGQlFTeE5RVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRPenRCUVVWMlFqdEJRVU5CTEZOQlFWTXNZMEZCWXl4RFFVRkRMRXRCUVVzc1JVRkJSVHRGUVVNM1FpeFBRVU5GTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1NVRkRaaXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXp0RlFVRkpPMFZCUTNaQ0xFdEJRVXNzUTBGQlF5eEpRVUZKTEV0QlFVc3NZMEZCWXp0RlFVRkpPMFZCUTJwRExFbEJRVUVzZFVKQlFXTXNSVUZCUXl4TFFVRkxMRU5CUVVNc1EwRkRja0lzUTBGQlF6dEJRVU5NT3p0QlFVVmxMRTFCUVUwc1UwRkJVeXhEUVVGRE8wVkJRemRDTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNWMEZCVnl4RFFVRkRMRkZCUVZFc1JVRkJSU3hQUVVGUExFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVTdTVUZEYkVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eFJRVUZSTzBsQlJYaENMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlFTdzBRa0ZCVnl4RlFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFbEJRVWtzZDBKQlFYZENMRU5CUVVNN1NVRkRha1VzU1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4UFFVRlBMRU5CUVVNc1lVRkJZU3hKUVVGSkxFdEJRVXM3U1VGRGJrUXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU1zVDBGQlR5eEpRVUZKTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZPMGxCUlhCRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NSVUZCUlR0SlFVTm1MRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzVjBGQlZ6dEpRVU4yUWl4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExFbEJRVWtzUjBGQlJ5eEhRVUZITzBsQlF6bENMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzUzBGQlN6dEpRVU53UWl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExFTkJRVU03U1VGRmJrSXNUVUZCVFN4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFVkJRVVVzVVVGQlVTeEZRVUZGTzAxQlEzQkRMRmxCUVZrc1JVRkJSU3hMUVVGTE8wMUJRMjVDTEZGQlFWRXNSVUZCUlN4TFFVRkxPMDFCUTJZc1ZVRkJWU3hGUVVGRkxFbEJRVWs3VFVGRGFFSXNTMEZCU3l4RlFVRkZPMGxCUTFRc1EwRkJReXhEUVVGRE8wVkJRMG83UlVGRlFTeFRRVUZUTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWxCUVVrc1JVRkJSVHRKUVVOMlFpeEpRVUZCTERaQ1FVRmxMRVZCUVVNc1QwRkJUeXhGUVVGRkxFbEJRVWtzUTBGQlF6dEZRVU5vUXp0RlFVVkJMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzVDBGQlR5eEZRVUZGTEZGQlFWRXNSVUZCUlR0SlFVTm9ReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNN1NVRkROMElzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhGUVVGRkxGRkJRVkVzUTBGQlF6dEpRVU55UXl4UFFVRlBMRWxCUVVrN1JVRkRZanM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORkxGRkJRVkVzUTBGQlF5eFBRVUZQTEVWQlFVVXNVVUZCVVN4RlFVRkZPMGxCUXpGQ0xFOUJRVThzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4VlFVRlZMRVZCUVVVc1QwRkJUeXhGUVVGRkxGRkJRVkVzUTBGQlF6dEZRVU55UkRzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzVVVGQlVTeEZRVUZGTzBsQlEzWkNMRTlCUVU4c1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZMRkZCUVZFc1EwRkJRenRGUVVOc1JEczdSVUZGUVR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5GTEVsQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1VVRkJVU3hGUVVGRk8wbEJRM1JDTEU5QlFVOHNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFVkJRVVVzVDBGQlR5eEZRVUZGTEZGQlFWRXNRMEZCUXp0RlFVTnFSRHM3UlVGRlFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlN4SFFVRkhMRVZCUVVVc1VVRkJVU3hIUVVGSExFbEJRVWtzUlVGQlJUdEpRVU5zUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJUdE5RVU5vUWl4WlFVRlpMRU5CUVVNc1VVRkJVU3hEUVVGRE8wMUJRM1JDTzBsQlEwWTdTVUZGUVN4TlFVRk5MRTlCUVU4c1IwRkJSenROUVVGRkxFZEJRVWNzUjBGQlJ6dE5RVUZGTzBsQlFVc3NRMEZCUXpzN1NVRkZhRU03U1VGRFFUdEpRVU5CTEU5QlFVOHNRMEZCUXl4UFFVRlBMRWRCUVVjN1RVRkRhRUlzUjBGQlJ5eFBRVUZQTEVOQlFVTXNUMEZCVHp0TlFVTnNRaXhQUVVGUExFVkJRVVU3VVVGRFVDeEpRVUZKTEVWQlFVVTdUVUZEVWp0SlFVTkdMRU5CUVVNN1NVRkZSQ3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNSVUZCUlR0TlFVTjBRaXhQUVVGUExFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkRhRU03U1VGRlFTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1JVRkJSVHROUVVOMFFpeFBRVUZQTEVOQlFVTXNVMEZCVXl4SFFVRkhMRWxCUVVFc2MwSkJRV2RDTEVWQlFVTXNRMEZCUXp0SlFVTjRRenRKUVVWQkxFbEJRVWtzVDBGQlR5eERRVUZETEZkQlFWY3NTVUZCU1N4RFFVRkRMRWxCUVVFc1owSkJRVkVzUlVGQlF5eFBRVUZQTEVOQlFVTXNWMEZCVnl4RFFVRkRMRVZCUVVVN1RVRkRla1FzVDBGQlR5eERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eFhRVUZYTEVOQlFVTTdTVUZETTBRN1NVRkRRU3hKUVVGSkxFOUJRVThzUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4SlFVRkJMR2RDUVVGUkxFVkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZPMDFCUXk5RExFOUJRVThzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETzBsQlEycEVPMGxCUTBFc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTTdUVUZCUlN4UFFVRlBPMDFCUVVVN1NVRkJVeXhEUVVGRExFTkJRVU03U1VGRmRFTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVU3VFVGRGFrSXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSk8wMUJRMjVDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenROUVVOYU8wbEJRMFk3U1VGRlFTeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SlFVRkpMRWxCUVVrc1EwRkJReXhQUVVGUE8wbEJRek5FTEUxQlFVMHNiVUpCUVcxQ0xFZEJRM1pDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NTMEZCU3l4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRM1JGTEVsQlFVa3NRMEZCUXl4WlFVRlpPMGxCUTI1Q0xFbEJRVWtzYVVKQlFXbENMRWxCUVVrc2JVSkJRVzFDTEVWQlFVVTdUVUZETlVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBsQlEyUTdTVUZGUVN4SlFVRkpMRWxCUVVrc1EwRkJReXhoUVVGaExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZPMDFCUTNKRExFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU03U1VGRGNFVTdSVUZEUmpzN1JVRkZRVHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNTMEZCU3l4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFVkJRVVU3U1VGRGNrSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVU3VFVGRGFFSXNXVUZCV1N4RFFVRkRMRkZCUVZFc1EwRkJRenROUVVOMFFpeFBRVUZQTEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRKUVVNeFFqdEpRVVZCTEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHROUVVOa0xGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRPMDFCUTNoQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1R0SlFVTnVRanRKUVVWQkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1JVRkJSVHROUVVOMFFpeFpRVUZaTEVOQlFVTXNVVUZCVVN4RFFVRkRPMDFCUTNSQ0xFOUJRVThzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMGxCUXpGQ08wbEJSVUVzVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNN1NVRkRhRVFzVFVGQlRTeFRRVUZUTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJSU3hKUVVGSkxFbEJRVXNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXp0SlFVTndSQ3hOUVVGTkxGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkZMRWxCUVVrc1NVRkJTeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETzBsQlJXeEVMRTFCUVUwc1NVRkJTU3hIUVVGSE8wMUJRMWdzUzBGQlN5eEZRVUZGTEZGQlFWRTdUVUZEWml4VFFVRlRMRVZCUVVVc1NVRkJTU3hKUVVGSkxFTkJRVU1zUTBGQlF6dE5RVU55UWl4TlFVRk5MRVZCUVVVc1NVRkJTU3hKUVVGSkxFTkJRVU03U1VGRGJrSXNRMEZCUXp0SlFVVkVMRTFCUVUwc1NVRkJTU3hIUVVGSkxFZEJRVWNzU1VGQlN6dE5RVU53UWl4WlFVRlpMRU5CUVVNc1RVRkJUVHRSUVVOcVFpeFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkZMRVZCUVVVc1NVRkJTeXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTNoRExGRkJRVkVzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRPMDFCUTNKQ0xFTkJRVU1zUTBGQlF6dEpRVU5LTEVOQlFVTTdTVUZGUkN4TlFVRk5MRTlCUVU4c1IwRkJSenROUVVOa0xHRkJRV0VzUlVGQlJ5eFRRVUZSTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUTJwRkxGRkJRMFlzUTBGQlJUdEpRVU5LTEVOQlFVTTdTVUZGUkN4UFFVRlBMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRM0pDTEVkQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVzc1IwRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlN5eEZRVUZETEVWQlF6RkNPMDFCUTBVc1RVRkJUU3hGUVVGRkxFMUJRVTA3VFVGRFpDeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU03VFVGRE1VSTdTVUZEUml4RFFVRkRMRVZCUTBRc1NVRkJTU3hGUVVOS0xFTkJRMFlzUTBGQlF6dEZRVU5JTzBWQlJVRXNZVUZCWVN4RFFVRkRMRWRCUVVjc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEU5QlFVOHNSVUZCUlR0SlFVTjBReXhOUVVGTkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hQUVVGUExFTkJRVU1zUjBGQlJ5eEhRVUZITzBsQlEzaERMRlZCUVZVc1EwRkJReXhOUVVGTk8wMUJRMllzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SFFVRkhMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUlVGQlJTeFBRVUZQTEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUTJwRUxFTkJRVU1zUlVGQlJTeExRVUZMTEVOQlFVTTdSVUZEV0R0RlFVVkJMRTFCUVUwc1dVRkJXU3hEUVVGRExFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRTlCUVU4c1JVRkJSVHRKUVVNelF5eFBRVUZQTEV0QlFVc3NRMEZCUXl4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRM0JDTEVsQlFVa3NRMEZCUXl4TlFVRlBMRkZCUVZFc1NVRkJTenROUVVONFFpeEpRVUZKTEZGQlFWRXNRMEZCUXl4RlFVRkZMRVZCUVVVN1VVRkRaaXhKUVVGSkxFTkJRVU1zUTBGQlF6dE5RVU5TTEVOQlFVTXNUVUZCVFN4SlFVTk1MRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXp0UlFVRkZPMDFCUVZNc1EwRkJReXhEUVVGRExFbEJRM0JETEU5QlFVOHNTVUZCU1N4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVNeFFqdFJRVU5CTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRPMDFCUXpsRExFTkJRVU1zVFVGQlRUdFJRVU5NTEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eFZRVUZWTEVOQlFVTTdVVUZETlVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dE5RVU5pTzBsQlEwWXNRMEZCUXl4RFFVRkRMRU5CUTBRc1MwRkJTeXhEUVVGRkxFdEJRVXNzU1VGQlN6dE5RVU5vUWl4SlFVRkpMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hQUVVGUExFbEJRVWtzU1VGQlNTeERRVUZETEZWQlFWVXNSVUZCUlR0UlFVTXZSQ3hKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF6dE5RVU01UXl4RFFVRkRMRTFCUVUwN1VVRkRUQ3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzAxQlEySTdTVUZEUml4RFFVRkRMRU5CUVVNN1JVRkRUanRGUVVWQkxHbENRVUZwUWl4RFFVRkRMRXRCUVVzc1JVRkJSVHRKUVVOMlFqdEpRVU5CTEVsQlFVa3NZMEZCWXl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRk8wMUJRM3BDTEU5QlFVOHNTVUZCU1R0SlFVTmlPMGxCUlVFc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVWQlFVVTdUVUZEYmtJN1RVRkRRU3hQUVVGUExFdEJRVXM3U1VGRFpEczdTVUZGUVR0SlFVTkJMRWxCUVVrc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeEpRVUZKTEVkQlFVY3NSVUZCUlR0TlFVTm9SU3hQUVVGUExFbEJRVWs3U1VGRFlqczdTVUZGUVR0SlFVTkJMRWxCUVVrc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEV0QlFVc3NSMEZCUnl4RlFVRkZPMDFCUTJwRExFOUJRVThzU1VGQlNUdEpRVU5pTzBsQlJVRXNUMEZCVHl4TFFVRkxPMFZCUTJRN1FVRkRSanRCUVVGRExFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNVMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRM1pSUkN4SlFVRkJMRXRCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFZRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRVzlETEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUdEJRVVZ3UXl4TlFVRk5MR2xDUVVGcFFpeEhRVUZITEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc2FVSkJRV2xDTEVsQlFVa3NTVUZCU1R0QlFVTXZSQ3hOUVVGTkxGbEJRVmtzUjBGQlJ5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmxCUVZrc1NVRkJTU3hKUVVGSk96dEJRVVZ5UkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVFVGQlRTeG5Ra0ZCWjBJc1IwRkRjRUlzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4dlFrRkJiMElzUzBGQlN5eFpRVUZaTEVkQlFVY3NVMEZCVXl4SFFVRkhMRU5CUVVNN08wRkJSVzVGTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVFVGQlRTeHpRa0ZCYzBJc1IwRkJSeXhaUVVGTkxFZEJRVWNzUTBGQlF6czdRVUZGZWtNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTA4c1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4RFFVRkRMRTlCUVU4c1IwRkJSeXhuUWtGQlowSXNTMEZCU3p0RlFVTXZSQ3hOUVVGTkxGZEJRVmNzUjBGQlJ6dEpRVU5zUWp0SlFVTkJPMGxCUTBFc1MwRkJTeXhGUVVGRkxFVkJRVVU3U1VGRlZEdEJRVU5LTzBGQlEwRTdRVUZEUVR0QlFVTkJPMGxCUTBrc1MwRkJTeXhEUVVGQkxFVkJRVWM3VFVGRFRpeFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEZGQlFWRXNRMEZCUXl4TFFVRkxPMUZCUXpORExGRkJRVkVzUTBGQlF5eERRVUZETzAxQlExb3NRMEZCUXl4RFFVRkRPMDFCUTBZc1YwRkJWeXhEUVVGRExFdEJRVXNzUjBGQlJ5eEZRVUZGTzBsQlEzaENMRU5CUVVNN1NVRkZSRHRCUVVOS08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0SlFVTkpMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzVVVGQlVTeEhRVUZITEVOQlFVRXNTMEZCVFN4VFFVRlRMRVZCUVVVN1RVRkRla01zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdUVUZGTTBNc1NVRkJTU3hYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNTVUZCU1N4UFFVRlBMRVZCUVVVN1VVRkRka01zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMDFCUTNKQ08wbEJRMFlzUTBGQlF6dEpRVVZFTzBGQlEwbzdRVUZEUVR0QlFVTkJPMGxCUTBrc1NVRkJTU3hEUVVGQkxFVkJRVWM3VFVGRFREdEpRVUZCTEVOQlEwUTdTVUZEUkN4UlFVRlJMRU5CUVVFc1JVRkJSenROUVVOVU8wbEJRVUU3UlVGRlNpeERRVUZETzBWQlJVUXNUMEZCVHl4WFFVRlhPMEZCUTNCQ0xFTkJRVU03UVVGQlF5eFBRVUZCTEVOQlFVRXNhVUpCUVVFc1IwRkJRU3hwUWtGQlFUdEJRVVZMTEUxQlFVMHNUMEZCVHl4SFFVRkhMR2xDUVVGcFFpeEhRVU53UXl4SlFVRkpMR3RDUVVGVExFTkJRVU1zYVVKQlFXbENMRVZCUVVVN1JVRkRMMElzU1VGQlNTeEZRVUZGTEZsQlFWazdSVUZEYkVJc1QwRkJUeXhGUVVGRkxHZENRVUZuUWp0RlFVTjZRaXhoUVVGaExFVkJRVVU3UVVGRGFrSXNRMEZCUXl4RFFVRkRMRWRCUTBZc2FVSkJRV2xDTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzYzBKQlFYTkNMRU5CUVVNN1FVRkJReXhQUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEU5QlFVRWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3SUdselZtRnNhV1JOYm1WdGIyNXBZeUI5SUdaeWIyMGdKMEJsZEdobGNuTndjbTlxWldOMEwyaGtibTlrWlNjN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JpZFdabVpYSlViMGhsZUN4Y2JpQWdaMlYwUW1sdVlYSjVVMmw2WlN4Y2JpQWdhWE5XWVd4cFpGQnlhWFpoZEdVc1hHNGdJSFJ2UW5WbVptVnlMRnh1ZlNCbWNtOXRJQ2RsZEdobGNtVjFiV3B6TFhWMGFXd25PMXh1YVcxd2IzSjBJRmRoYkd4bGRDQm1jbTl0SUNkbGRHaGxjbVYxYldwekxYZGhiR3hsZENjN1hHNXBiWEJ2Y25RZ2FXMXdiM0owWlhKeklHWnliMjBnSjJWMGFHVnlaWFZ0YW5NdGQyRnNiR1YwTDNSb2FYSmtjR0Z5ZEhrbk8xeHVhVzF3YjNKMElHeHZaeUJtY205dElDZHNiMmRzWlhabGJDYzdYRzVwYlhCdmNuUWdleUJ6ZEhKcGNFaGxlRkJ5WldacGVDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwzTm9ZWEpsWkM5dGIyUjFiR1Z6TDJobGVITjBjbWx1WnkxMWRHbHNjeWM3WEc1cGJYQnZjblFnZXlCaFpHUklaWGhRY21WbWFYZ2dmU0JtY205dElDY3VMaTlzYVdJdmRYUnBiQ2M3WEc1Y2JtTnZibk4wSUdGalkyOTFiblJKYlhCdmNuUmxjaUE5SUh0Y2JpQWdZWE41Ym1NZ2FXMXdiM0owUVdOamIzVnVkQ2h6ZEhKaGRHVm5lU3dnWVhKbmN5a2dlMXh1SUNBZ0lHTnZibk4wSUdsdGNHOXlkR1Z5SUQwZ2RHaHBjeTV6ZEhKaGRHVm5hV1Z6VzNOMGNtRjBaV2Q1WFR0Y2JpQWdJQ0JqYjI1emRDQndjbWwyWVhSbFMyVjVTR1Y0SUQwZ2FXMXdiM0owWlhJb0xpNHVZWEpuY3lrN1hHNGdJQ0FnY21WMGRYSnVJSEJ5YVhaaGRHVkxaWGxJWlhnN1hHNGdJSDBzWEc1Y2JpQWdjM1J5WVhSbFoybGxjem9nZTF4dUlDQWdJQ2RRY21sMllYUmxJRXRsZVNjNklDaHdjbWwyWVhSbFMyVjVLU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9JWEJ5YVhaaGRHVkxaWGtwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkRFlXNXViM1FnYVcxd2IzSjBJR0Z1SUdWdGNIUjVJR3RsZVM0bktUc2dMeThnU1hRZ2MyaHZkV3hrSUc1bGRtVnlJR2RsZENCb1pYSmxMQ0JpWldOaGRYTmxJSFJvYVhNZ2MyaHZkV3hrSUdKbElITjBiM0J3WldRZ2FXNGdkR2hsSUZWSlhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZJRU5vWldOcklHbG1JSFJvWlNCMWMyVnlJR2hoY3lCbGJuUmxjbVZrSUdGdUlGTlNVQ0JpZVNCdGFYTjBZV3RsSUdsdWMzUmxZV1FnYjJZZ1lTQndjbWwyWVhSbElHdGxlVnh1SUNBZ0lDQWdhV1lnS0dselZtRnNhV1JOYm1WdGIyNXBZeWh3Y21sMllYUmxTMlY1TG5SeWFXMG9LU2twSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCMEtDZHBiWEJ2Y25SQlkyTnZkVzUwUlhKeWIzSkpjMU5TVUNjcFlDazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR052Ym5OMElIUnlhVzF0WldSUWNtbDJZWFJsUzJWNUlEMGdjSEpwZG1GMFpVdGxlUzV5WlhCc1lXTmxLQzljWEhNckwyZDFMQ0FuSnlrN0lDOHZJRkpsYlc5MlpTQmhiR3dnZDJocGRHVnpjR0ZqWlZ4dVhHNGdJQ0FnSUNCamIyNXpkQ0J3Y21WbWFYaGxaRkJ5YVhaaGRHVkxaWGtnUFNCaFpHUklaWGhRY21WbWFYZ29kSEpwYlcxbFpGQnlhWFpoZEdWTFpYa3BPMXh1SUNBZ0lDQWdiR1YwSUdKMVptWmxjanRjYmlBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lHSjFabVpsY2lBOUlIUnZRblZtWm1WeUtIQnlaV1pwZUdWa1VISnBkbUYwWlV0bGVTazdYRzRnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnZENnbmFXMXdiM0owUVdOamIzVnVkRVZ5Y205eVRtOTBTR1Y0WVdSbFkybHRZV3duS1dBcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJQ0FnSVdselZtRnNhV1JRY21sMllYUmxLR0oxWm1abGNpa2dmSHhjYmlBZ0lDQWdJQ0FnSUNCblpYUkNhVzVoY25sVGFYcGxLSEJ5WldacGVHVmtVSEpwZG1GMFpVdGxlU2tnSVQwOUlEWTBJQ3NnSnpCNEp5NXNaVzVuZEdnZ0x5OGdSbWw0WlhNZ2FYTnpkV1VnSXpFM056RTVJQzB0SUdselZtRnNhV1JRY21sMllYUmxLQ2tnZDJsc2JDQnNaWFFnWVNCclpYa2diMllnTmpNZ2FHVjRJR1JwWjJsMGN5QjBhSEp2ZFdkb0lIZHBkR2h2ZFhRZ1kyOXRjR3hoYVc1cGJtY3NJSFJvYVhNZ2JHbHVaU0JsYm5OMWNtVnpJRFkwSUdobGVDQmthV2RwZEhNZ0t5QW5NSGduSUQwZ05qWWdaR2xuYVhSelhHNGdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnZENnbmFXMXdiM0owUVdOamIzVnVkRVZ5Y205eVRtOTBRVlpoYkdsa1VISnBkbUYwWlV0bGVTY3BZQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQjBLQ2RwYlhCdmNuUkJZMk52ZFc1MFJYSnliM0pPYjNSQlZtRnNhV1JRY21sMllYUmxTMlY1SnlsZ0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdZMjl1YzNRZ2MzUnlhWEJ3WldSUWNtbDJZWFJsUzJWNUlEMGdjM1J5YVhCSVpYaFFjbVZtYVhnb2NISmxabWw0WldSUWNtbDJZWFJsUzJWNUtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCemRISnBjSEJsWkZCeWFYWmhkR1ZMWlhrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0FuU2xOUFRpQkdhV3hsSnpvZ0tHbHVjSFYwTENCd1lYTnpkMjl5WkNrZ1BUNGdlMXh1SUNBZ0lDQWdiR1YwSUhkaGJHeGxkRHRjYmlBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lIZGhiR3hsZENBOUlHbHRjRzl5ZEdWeWN5NW1jbTl0UlhSb1pYSlhZV3hzWlhRb2FXNXdkWFFzSUhCaGMzTjNiM0prS1R0Y2JpQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdiRzluTG1SbFluVm5LQ2RCZEhSbGJYQjBJSFJ2SUdsdGNHOXlkQ0JoY3lCRmRHaGxjbGRoYkd4bGRDQm1iM0p0WVhRZ1ptRnBiR1ZrTENCMGNubHBibWNnVmpNbktUdGNiaUFnSUNBZ0lDQWdkMkZzYkdWMElEMGdWMkZzYkdWMExtWnliMjFXTXlocGJuQjFkQ3dnY0dGemMzZHZjbVFzSUhSeWRXVXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkMkZzYkdWMFZHOVFjbWwyWVhSbFMyVjVLSGRoYkd4bGRDazdYRzRnSUNBZ2ZTeGNiaUFnZlN4Y2JuMDdYRzVjYm1aMWJtTjBhVzl1SUhkaGJHeGxkRlJ2VUhKcGRtRjBaVXRsZVNoM1lXeHNaWFFwSUh0Y2JpQWdZMjl1YzNRZ2NISnBkbUYwWlV0bGVVSjFabVpsY2lBOUlIZGhiR3hsZEM1blpYUlFjbWwyWVhSbFMyVjVLQ2s3WEc0Z0lISmxkSFZ5YmlCaWRXWm1aWEpVYjBobGVDaHdjbWwyWVhSbFMyVjVRblZtWm1WeUtUdGNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWVdOamIzVnVkRWx0Y0c5eWRHVnlPMXh1SWl3aVpYaHdiM0owSUdOdmJuTjBJRk5KVGtkTVJWOURRVXhNWDBKQlRFRk9RMFZUWDBGRVJGSkZVMU1nUFZ4dUlDQW5NSGhpTVdZNFpUVTFZemRtTmpSa01qQXpZekUwTURCaU9XUTROVFUxWkRBMU1HWTVOR0ZrWmpNNUp6dGNibVY0Y0c5eWRDQmpiMjV6ZENCVFNVNUhURVZmUTBGTVRGOUNRVXhCVGtORlUxOUJSRVJTUlZOVFgwZFBSVkpNU1NBOVhHNGdJQ2N3ZURrM09EaERORVU1TTJZNU1EQXlZVGRoWkRobE56STJNek5pTVRGRk9HUXhaV05rTlRGbU9XSW5PMXh1THk4Z1ZFOUVUeWhUUlZCUFRFbEJLU0JVYUdWeVpTQnBjeUJqZFhKeVpXNTBiSGtnYm04Z1ltRnNZVzVqWlNCallXeHNJR0ZrWkhKbGMzTWdabTl5SUZObGNHOXNhV0ZjYm1WNGNHOXlkQ0JqYjI1emRDQlRTVTVIVEVWZlEwRk1URjlDUVV4QlRrTkZVMTlCUkVSU1JWTlRYMU5GVUU5TVNVRWdQU0FuSnp0Y2JtVjRjRzl5ZENCamIyNXpkQ0JUU1U1SFRFVmZRMEZNVEY5Q1FVeEJUa05GVTE5QlJFUlNSVk5UWDBKVFF5QTlYRzRnSUNjd2VESXpOVEpqTmpOQk9ETm1PVVprTVRJMllXWTROamMyTVRRMk56SXhSbUV3TURreU5HUTNaVFFuTzF4dVpYaHdiM0owSUdOdmJuTjBJRk5KVGtkTVJWOURRVXhNWDBKQlRFRk9RMFZUWDBGRVJGSkZVMU5mVDFCVVNVMUpVMDBnUFZ4dUlDQW5NSGhDTVdNMU5qaGxPVU16UlRaaVpHRm1OelUxUVRZd1l6YzBNVGhETWpZNVpXSXhNVFV5TkVaREp6dGNibVY0Y0c5eWRDQmpiMjV6ZENCVFNVNUhURVZmUTBGTVRGOUNRVXhCVGtORlUxOUJSRVJTUlZOVFgxQlBURmxIVDA0Z1BWeHVJQ0FuTUhneU16VXlZell6UVRnelpqbEdaREV5Tm1GbU9EWTNOakUwTmpjeU1VWmhNREE1TWpSa04yVTBKenRjYm1WNGNHOXlkQ0JqYjI1emRDQlRTVTVIVEVWZlEwRk1URjlDUVV4QlRrTkZVMTlCUkVSU1JWTlRYMEZXUVV4QlRrTklSU0E5WEc0Z0lDY3dlRVF3TWpORU1UVXpZVEJFUm1FME9EVXhNekJGUTBaa1JUSkdRVUUzWlRZeE1rVkdPVFE0TVRnbk8xeHVaWGh3YjNKMElHTnZibk4wSUZOSlRrZE1SVjlEUVV4TVgwSkJURUZPUTBWVFgwRkVSRkpGVTFOZlJrRk9WRTlOSUQxY2JpQWdKekI0TURkbU5qazNOREkwUVVKbE56WXlZa0k0TURoak1UQTVPRFl3WXpBMFpVRTBPRGhtWmpreVFpYzdYRzVsZUhCdmNuUWdZMjl1YzNRZ1UwbE9SMHhGWDBOQlRFeGZRa0ZNUVU1RFJWTmZRVVJFVWtWVFUxOUJVa0pKVkZKVlRTQTlYRzRnSUNjd2VERTFNVVV5TkVFME9EWkVOekkxT0dSa04wTXpNMFppTmpkRk5HSkNNREU1TVRsQ04wSXpNbU1uTzF4dUlpd2lhVzF3YjNKMElIc2dUMkp6WlhKMllXSnNaVk4wYjNKbElIMGdabkp2YlNBblFHMWxkR0Z0WVhOckwyOWljeTF6ZEc5eVpTYzdYRzVwYlhCdmNuUWdlMXh1SUNCVVQwZEhURVZCUWt4RlgwRk1SVkpVWDFSWlVFVlRMRnh1SUNCWFpXSXpVMmhwYlZWellXZGxRV3hsY25SVGRHRjBaWE1zWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12WVd4bGNuUnpKenRjYmx4dUx5b3FYRzRnS2lCQWRIbHdaV1JsWmlCN2IySnFaV04wZlNCQmJHVnlkRU52Ym5SeWIyeHNaWEpKYm1sMFUzUmhkR1ZjYmlBcUlFQndjbTl3WlhKMGVTQjdiMkpxWldOMGZTQmhiR1Z5ZEVWdVlXSnNaV1J1WlhOeklDMGdRU0J0WVhBZ2IyWWdZV3hsY25SeklFbEVjeUIwYnlCaWIyOXNaV0Z1Y3l3Z2QyaGxjbVZjYmlBcUlHQjBjblZsWUNCcGJtUnBZMkYwWlhNZ2RHaGhkQ0IwYUdVZ1lXeGxjblFnYVhNZ1pXNWhZbXhsWkNCaGJtUWdjMmh2ZDI0c0lHRnVaQ0JnWm1Gc2MyVmdJSFJvWlNCdmNIQnZjMmwwWlM1Y2JpQXFJRUJ3Y205d1pYSjBlU0I3YjJKcVpXTjBmU0IxYm1OdmJtNWxZM1JsWkVGalkyOTFiblJCYkdWeWRGTm9iM2R1VDNKcFoybHVjeUF0SUVFZ2JXRndJRzltSUc5eWFXZHBibHh1SUNvZ2MzUnlhVzVuY3lCMGJ5QmliMjlzWldGdWN5QnBibVJwWTJGMGFXNW5JSGRvWlhSb1pYSWdkR2hsSUZ3aWMzZHBkR05vSUhSdklHTnZibTVsWTNSbFpGd2lJR0ZzWlhKMElHaGhjMXh1SUNvZ1ltVmxiaUJ6YUc5M2JpQW9ZSFJ5ZFdWZ0tTQnZjaUJ2ZEdobGNuZHBjMlVnS0dCbVlXeHpaV0FwTGx4dUlDb3ZYRzVjYmk4cUtseHVJQ29nUUhSNWNHVmtaV1lnZTI5aWFtVmpkSDBnUVd4bGNuUkRiMjUwY205c2JHVnlUM0IwYVc5dWMxeHVJQ29nUUhCeWIzQmxjblI1SUh0QmJHVnlkRU52Ym5SeWIyeHNaWEpKYm1sMFUzUmhkR1Y5SUdsdWFYUlRkR0YwWlNBdElGUm9aU0JwYm1sMGFXRnNJR052Ym5SeWIyeHNaWElnYzNSaGRHVmNiaUFxTDF4dVhHNWpiMjV6ZENCa1pXWmhkV3gwVTNSaGRHVWdQU0I3WEc0Z0lHRnNaWEowUlc1aFlteGxaRzVsYzNNNklGUlBSMGRNUlVGQ1RFVmZRVXhGVWxSZlZGbFFSVk11Y21Wa2RXTmxLRnh1SUNBZ0lDaGhiR1Z5ZEVWdVlXSnNaV1J1WlhOekxDQmhiR1Z5ZEZSNWNHVXBJRDArSUh0Y2JpQWdJQ0FnSUdGc1pYSjBSVzVoWW14bFpHNWxjM05iWVd4bGNuUlVlWEJsWFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZV3hsY25SRmJtRmliR1ZrYm1WemN6dGNiaUFnSUNCOUxGeHVJQ0FnSUh0OUxGeHVJQ0FwTEZ4dUlDQjFibU52Ym01bFkzUmxaRUZqWTI5MWJuUkJiR1Z5ZEZOb2IzZHVUM0pwWjJsdWN6b2dlMzBzWEc0Z0lIZGxZak5UYUdsdFZYTmhaMlZQY21sbmFXNXpPaUI3ZlN4Y2JuMDdYRzVjYmk4cUtseHVJQ29nUTI5dWRISnZiR3hsY2lCeVpYTndiMjV6YVdKc1pTQm1iM0lnYldGcGJuUmhhVzVwYm1jZ1lXeGxjblF0Y21Wc1lYUmxaQ0J6ZEdGMFpTNWNiaUFxTDF4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdRV3hsY25SRGIyNTBjbTlzYkdWeUlIdGNiaUFnTHlvcVhHNGdJQ0FxSUVCd1lYSmhiU0I3UVd4bGNuUkRiMjUwY205c2JHVnlUM0IwYVc5dWMzMGdXMjl3ZEhOZElDMGdRMjl1ZEhKdmJHeGxjaUJqYjI1bWFXZDFjbUYwYVc5dUlIQmhjbUZ0WlhSbGNuTmNiaUFnSUNvdlhHNGdJR052Ym5OMGNuVmpkRzl5S0c5d2RITWdQU0I3ZlNrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnYVc1cGRGTjBZWFJsSUQwZ2UzMHNJSEJ5WldabGNtVnVZMlZ6VTNSdmNtVWdmU0E5SUc5d2RITTdYRzRnSUNBZ1kyOXVjM1FnYzNSaGRHVWdQU0I3WEc0Z0lDQWdJQ0F1TGk1a1pXWmhkV3gwVTNSaGRHVXNYRzRnSUNBZ0lDQmhiR1Z5ZEVWdVlXSnNaV1J1WlhOek9pQjdYRzRnSUNBZ0lDQWdJQzR1TG1SbFptRjFiSFJUZEdGMFpTNWhiR1Z5ZEVWdVlXSnNaV1J1WlhOekxGeHVJQ0FnSUNBZ0lDQXVMaTVwYm1sMFUzUmhkR1V1WVd4bGNuUkZibUZpYkdWa2JtVnpjeXhjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdmVHRjYmx4dUlDQWdJSFJvYVhNdWMzUnZjbVVnUFNCdVpYY2dUMkp6WlhKMllXSnNaVk4wYjNKbEtITjBZWFJsS1R0Y2JseHVJQ0FnSUhSb2FYTXVjMlZzWldOMFpXUkJaR1J5WlhOeklEMGdjSEpsWm1WeVpXNWpaWE5UZEc5eVpTNW5aWFJUZEdGMFpTZ3BMbk5sYkdWamRHVmtRV1JrY21WemN6dGNibHh1SUNBZ0lIQnlaV1psY21WdVkyVnpVM1J2Y21VdWMzVmljMk55YVdKbEtDaDdJSE5sYkdWamRHVmtRV1JrY21WemN5QjlLU0E5UGlCN1hHNGdJQ0FnSUNCamIyNXpkQ0JqZFhKeVpXNTBVM1JoZEdVZ1BTQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2s3WEc0Z0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5SVGRHRjBaUzUxYm1OdmJtNWxZM1JsWkVGalkyOTFiblJCYkdWeWRGTm9iM2R1VDNKcFoybHVjeUFtSmx4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sYkdWamRHVmtRV1JrY21WemN5QWhQVDBnYzJWc1pXTjBaV1JCWkdSeVpYTnpYRzRnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaV3hsWTNSbFpFRmtaSEpsYzNNZ1BTQnpaV3hsWTNSbFpFRmtaSEpsYzNNN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZXlCMWJtTnZibTVsWTNSbFpFRmpZMjkxYm5SQmJHVnlkRk5vYjNkdVQzSnBaMmx1Y3pvZ2UzMGdmU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCelpYUkJiR1Z5ZEVWdVlXSnNaV1J1WlhOektHRnNaWEowU1dRc0lHVnVZV0pzWldSdVpYTnpLU0I3WEc0Z0lDQWdiR1YwSUhzZ1lXeGxjblJGYm1GaWJHVmtibVZ6Y3lCOUlEMGdkR2hwY3k1emRHOXlaUzVuWlhSVGRHRjBaU2dwTzF4dUlDQWdJR0ZzWlhKMFJXNWhZbXhsWkc1bGMzTWdQU0I3SUM0dUxtRnNaWEowUlc1aFlteGxaRzVsYzNNZ2ZUdGNiaUFnSUNCaGJHVnlkRVZ1WVdKc1pXUnVaWE56VzJGc1pYSjBTV1JkSUQwZ1pXNWhZbXhsWkc1bGMzTTdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3SUdGc1pYSjBSVzVoWW14bFpHNWxjM01nZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMlYwY3lCMGFHVWdYQ0p6ZDJsMFkyZ2dkRzhnWTI5dWJtVmpkR1ZrWENJZ1lXeGxjblFnWVhNZ2MyaHZkMjRnWm05eUlIUm9aU0JuYVhabGJpQnZjbWxuYVc1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHOXlhV2RwYmlBdElGUm9aU0J2Y21sbmFXNGdkR2hsSUdGc1pYSjBJR2hoY3lCaVpXVnVJSE5vYjNkdUlHWnZjbHh1SUNBZ0tpOWNiaUFnYzJWMFZXNWpiMjV1WldOMFpXUkJZMk52ZFc1MFFXeGxjblJUYUc5M2JpaHZjbWxuYVc0cElIdGNiaUFnSUNCc1pYUWdleUIxYm1OdmJtNWxZM1JsWkVGalkyOTFiblJCYkdWeWRGTm9iM2R1VDNKcFoybHVjeUI5SUQwZ2RHaHBjeTV6ZEc5eVpTNW5aWFJUZEdGMFpTZ3BPMXh1SUNBZ0lIVnVZMjl1Ym1WamRHVmtRV05qYjNWdWRFRnNaWEowVTJodmQyNVBjbWxuYVc1eklEMGdlMXh1SUNBZ0lDQWdMaTR1ZFc1amIyNXVaV04wWldSQlkyTnZkVzUwUVd4bGNuUlRhRzkzYms5eWFXZHBibk1zWEc0Z0lDQWdmVHRjYmlBZ0lDQjFibU52Ym01bFkzUmxaRUZqWTI5MWJuUkJiR1Z5ZEZOb2IzZHVUM0pwWjJsdWMxdHZjbWxuYVc1ZElEMGdkSEoxWlR0Y2JpQWdJQ0IwYUdsekxuTjBiM0psTG5Wd1pHRjBaVk4wWVhSbEtIc2dkVzVqYjI1dVpXTjBaV1JCWTJOdmRXNTBRV3hsY25SVGFHOTNiazl5YVdkcGJuTWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1IyVjBjeUIwYUdVZ2QyVmlNeUJ6YUdsdElIVnpZV2RsSUhOMFlYUmxJR1p2Y2lCMGFHVWdaMmwyWlc0Z2IzSnBaMmx1TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2IzSnBaMmx1SUMwZ1ZHaGxJRzl5YVdkcGJpQjBieUJuWlhRZ2RHaGxJSGRsWWpNZ2MyaHBiU0IxYzJGblpTQnpkR0YwWlNCbWIzSXVYRzRnSUNBcUlFQnlaWFIxY201eklIdDFibVJsWm1sdVpXUWdmQ0F4SUh3Z01uMGdWR2hsSUhkbFlqTWdjMmhwYlNCMWMyRm5aU0J6ZEdGMFpTQm1iM0lnZEdobElHZHBkbVZ1WEc0Z0lDQXFJRzl5YVdkcGJpd2diM0lnZFc1a1pXWnBibVZrTGx4dUlDQWdLaTljYmlBZ1oyVjBWMlZpTTFOb2FXMVZjMkZuWlZOMFlYUmxLRzl5YVdkcGJpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk4wYjNKbExtZGxkRk4wWVhSbEtDa3VkMlZpTTFOb2FXMVZjMkZuWlU5eWFXZHBibk5iYjNKcFoybHVYVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVFpYUnpJSFJvWlNCM1pXSXpJSE5vYVcwZ2RYTmhaMlVnYzNSaGRHVWdabTl5SUhSb1pTQm5hWFpsYmlCdmNtbG5hVzRnZEc4Z1VrVkRUMUpFUlVRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnZjbWxuYVc0Z0xTQlVhR1VnYjNKcFoybHVJSFJvWlNCMGFHRjBJSFZ6WldRZ2RHaGxJSGRsWWpNZ2MyaHBiUzVjYmlBZ0lDb3ZYRzRnSUhObGRGZGxZak5UYUdsdFZYTmhaMlZTWldOdmNtUmxaQ2h2Y21sbmFXNHBJSHRjYmlBZ0lDQjBhR2x6TGw5elpYUlhaV0l6VTJocGJWVnpZV2RsVTNSaGRHVW9iM0pwWjJsdUxDQlhaV0l6VTJocGJWVnpZV2RsUVd4bGNuUlRkR0YwWlhNdWNtVmpiM0prWldRcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sZEhNZ2RHaGxJSGRsWWpNZ2MyaHBiU0IxYzJGblpTQnpkR0YwWlNCbWIzSWdkR2hsSUdkcGRtVnVJRzl5YVdkcGJpQjBieUJFU1ZOTlNWTlRSVVF1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCdmNtbG5hVzRnTFNCVWFHVWdiM0pwWjJsdUlIUm9ZWFFnZEdobElIZGxZak1nYzJocGJTQnViM1JwWm1sallYUnBiMjRnZDJGelhHNGdJQ0FxSUdScGMyMXBjM05sWkNCbWIzSXVYRzRnSUNBcUwxeHVJQ0J6WlhSWFpXSXpVMmhwYlZWellXZGxRV3hsY25SRWFYTnRhWE56WldRb2IzSnBaMmx1S1NCN1hHNGdJQ0FnZEdocGN5NWZjMlYwVjJWaU0xTm9hVzFWYzJGblpWTjBZWFJsS0c5eWFXZHBiaXdnVjJWaU0xTm9hVzFWYzJGblpVRnNaWEowVTNSaGRHVnpMbVJwYzIxcGMzTmxaQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzl5YVdkcGJpQXRJRlJvWlNCdmNtbG5hVzRnZEc4Z2MyVjBJSFJvWlNCemRHRjBaU0JtYjNJdVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0IyWVd4MVpTQXRJRlJvWlNCemRHRjBaU0IyWVd4MVpTQjBieUJ6WlhRdVhHNGdJQ0FxTDF4dUlDQmZjMlYwVjJWaU0xTm9hVzFWYzJGblpWTjBZWFJsS0c5eWFXZHBiaXdnZG1Gc2RXVXBJSHRjYmlBZ0lDQnNaWFFnZXlCM1pXSXpVMmhwYlZWellXZGxUM0pwWjJsdWN5QjlJRDBnZEdocGN5NXpkRzl5WlM1blpYUlRkR0YwWlNncE8xeHVJQ0FnSUhkbFlqTlRhR2x0VlhOaFoyVlBjbWxuYVc1eklEMGdlMXh1SUNBZ0lDQWdMaTR1ZDJWaU0xTm9hVzFWYzJGblpVOXlhV2RwYm5Nc1hHNGdJQ0FnZlR0Y2JpQWdJQ0IzWldJelUyaHBiVlZ6WVdkbFQzSnBaMmx1YzF0dmNtbG5hVzVkSUQwZ2RtRnNkV1U3WEc0Z0lDQWdkR2hwY3k1emRHOXlaUzUxY0dSaGRHVlRkR0YwWlNoN0lIZGxZak5UYUdsdFZYTmhaMlZQY21sbmFXNXpJSDBwTzF4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ1JYWmxiblJGYldsMGRHVnlJR1p5YjIwZ0oyVjJaVzUwY3ljN1hHNXBiWEJ2Y25RZ2V5QlBZbk5sY25aaFlteGxVM1J2Y21VZ2ZTQm1jbTl0SUNkQWJXVjBZVzFoYzJzdmIySnpMWE4wYjNKbEp6dGNibWx0Y0c5eWRDQjdJSFkwSUdGeklIVjFhV1FnZlNCbWNtOXRJQ2QxZFdsa0p6dGNibWx0Y0c5eWRDQnNiMmNnWm5KdmJTQW5iRzluYkdWMlpXd25PMXh1YVcxd2IzSjBJSHNnUVhCd2NtOTJZV3hVZVhCbElIMGdabkp2YlNBblFHMWxkR0Z0WVhOckwyTnZiblJ5YjJ4c1pYSXRkWFJwYkhNbk8xeHVhVzF3YjNKMElIc2dUVVZVUVUxQlUwdGZRMDlPVkZKUFRFeEZVbDlGVmtWT1ZGTWdmU0JtY205dElDY3VMaTl0WlhSaGJXRnpheTFqYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN0lFMUpUbFZVUlNCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12ZEdsdFpTYzdYRzVwYlhCdmNuUWdleUJCVlZSUFgweFBRMHRmVkVsTlJVOVZWRjlCVEVGU1RTQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdllXeGhjbTF6Snp0Y2JtbHRjRzl5ZENCN0lHbHpUV0Z1YVdabGMzUldNeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMM05vWVhKbFpDOXRiMlIxYkdWekwyMTJNeTUxZEdsc2N5YzdYRzVwYlhCdmNuUWdleUJwYzBKbGRHRWdmU0JtY205dElDY3VMaTh1TGk4dUxpOTFhUzlvWld4d1pYSnpMM1YwYVd4ekwySjFhV3hrTFhSNWNHVnpKenRjYm1sdGNHOXlkQ0I3WEc0Z0lFVk9Wa2xTVDA1TlJVNVVYMVJaVUVWZlFrRkRTMGRTVDFWT1JDeGNiaUFnVUU5TVRFbE9SMTlVVDB0RlRsOUZUbFpKVWs5T1RVVk9WRjlVV1ZCRlV5eGNiaUFnVDFKSlIwbE9YMDFGVkVGTlFWTkxMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMMkZ3Y0NjN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUVGd2NGTjBZWFJsUTI5dWRISnZiR3hsY2lCbGVIUmxibVJ6SUVWMlpXNTBSVzFwZEhSbGNpQjdYRzRnSUM4cUtseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYjNCMGMxeHVJQ0FnS2k5Y2JpQWdZMjl1YzNSeWRXTjBiM0lvYjNCMGN5QTlJSHQ5S1NCN1hHNGdJQ0FnWTI5dWMzUWdlMXh1SUNBZ0lDQWdZV1JrVlc1c2IyTnJUR2x6ZEdWdVpYSXNYRzRnSUNBZ0lDQnBjMVZ1Ykc5amEyVmtMRnh1SUNBZ0lDQWdhVzVwZEZOMFlYUmxMRnh1SUNBZ0lDQWdiMjVKYm1GamRHbDJaVlJwYldWdmRYUXNYRzRnSUNBZ0lDQndjbVZtWlhKbGJtTmxjMU4wYjNKbExGeHVJQ0FnSUNBZ2NYSklZWEprZDJGeVpWTjBiM0psTEZ4dUlDQWdJQ0FnYldWemMyVnVaMlZ5TEZ4dUlDQWdJSDBnUFNCdmNIUnpPMXh1SUNBZ0lITjFjR1Z5S0NrN1hHNWNiaUFnSUNCMGFHbHpMbTl1U1c1aFkzUnBkbVZVYVcxbGIzVjBJRDBnYjI1SmJtRmpkR2wyWlZScGJXVnZkWFFnZkh3Z0tDZ3BJRDArSUhWdVpHVm1hVzVsWkNrN1hHNGdJQ0FnZEdocGN5NXpkRzl5WlNBOUlHNWxkeUJQWW5ObGNuWmhZbXhsVTNSdmNtVW9lMXh1SUNBZ0lDQWdkR2x0Wlc5MWRFMXBiblYwWlhNNklEQXNYRzRnSUNBZ0lDQmpiMjV1WldOMFpXUlRkR0YwZFhOUWIzQnZkbVZ5U0dGelFtVmxibE5vYjNkdU9pQjBjblZsTEZ4dUlDQWdJQ0FnWkdWbVlYVnNkRWh2YldWQlkzUnBkbVZVWVdKT1lXMWxPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ1luSnZkM05sY2tWdWRtbHliMjV0Wlc1ME9pQjdmU3hjYmlBZ0lDQWdJSEJ2Y0hWd1IyRnpVRzlzYkZSdmEyVnVjem9nVzEwc1hHNGdJQ0FnSUNCdWIzUnBabWxqWVhScGIyNUhZWE5RYjJ4c1ZHOXJaVzV6T2lCYlhTeGNiaUFnSUNBZ0lHWjFiR3hUWTNKbFpXNUhZWE5RYjJ4c1ZHOXJaVzV6T2lCYlhTeGNiaUFnSUNBZ0lISmxZMjkyWlhKNVVHaHlZWE5sVW1WdGFXNWtaWEpJWVhOQ1pXVnVVMmh2ZDI0NklHWmhiSE5sTEZ4dUlDQWdJQ0FnY21WamIzWmxjbmxRYUhKaGMyVlNaVzFwYm1SbGNreGhjM1JUYUc5M2Jqb2dibVYzSUVSaGRHVW9LUzVuWlhSVWFXMWxLQ2tzWEc0Z0lDQWdJQ0J2ZFhSa1lYUmxaRUp5YjNkelpYSlhZWEp1YVc1blRHRnpkRk5vYjNkdU9pQnVaWGNnUkdGMFpTZ3BMbWRsZEZScGJXVW9LU3hjYmlBZ0lDQWdJRzVtZEhORVpYUmxZM1JwYjI1T2IzUnBZMlZFYVhOdGFYTnpaV1E2SUdaaGJITmxMRnh1SUNBZ0lDQWdjMmh2ZDFSbGMzUnVaWFJOWlhOellXZGxTVzVFY205d1pHOTNiam9nZEhKMVpTeGNiaUFnSUNBZ0lITm9iM2RDWlhSaFNHVmhaR1Z5T2lCcGMwSmxkR0VvS1N4Y2JpQWdJQ0FnSUhOb2IzZFFjbTlrZFdOMFZHOTFjam9nZEhKMVpTeGNiaUFnSUNBZ0lIUnlaWHB2Y2sxdlpHVnNPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ1kzVnljbVZ1ZEZCdmNIVndTV1E2SUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0FnSUM0dUxtbHVhWFJUZEdGMFpTeGNiaUFnSUNBZ0lIRnlTR0Z5WkhkaGNtVTZJSHQ5TEZ4dUlDQWdJQ0FnYm1aMGMwUnliM0JrYjNkdVUzUmhkR1U2SUh0OUxGeHVJQ0FnSUNBZ2RYTmxaRTVsZEhkdmNtdHpPaUI3WEc0Z0lDQWdJQ0FnSUNjd2VERW5PaUIwY25WbExGeHVJQ0FnSUNBZ0lDQW5NSGcxSnpvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSnpCNE5UTTVKem9nZEhKMVpTeGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQnpaWEoyYVdObFYyOXlhMlZ5VEdGemRFRmpkR2wyWlZScGJXVTZJREFzWEc0Z0lDQWdmU2s3WEc0Z0lDQWdkR2hwY3k1MGFXMWxjaUE5SUc1MWJHdzdYRzVjYmlBZ0lDQjBhR2x6TG1selZXNXNiMk5yWldRZ1BTQnBjMVZ1Ykc5amEyVmtPMXh1SUNBZ0lIUm9hWE11ZDJGcGRHbHVaMFp2Y2xWdWJHOWpheUE5SUZ0ZE8xeHVJQ0FnSUdGa1pGVnViRzlqYTB4cGMzUmxibVZ5S0hSb2FYTXVhR0Z1Wkd4bFZXNXNiMk5yTG1KcGJtUW9kR2hwY3lrcE8xeHVYRzRnSUNBZ2NISmxabVZ5Wlc1alpYTlRkRzl5WlM1emRXSnpZM0pwWW1Vb0tIc2djSEpsWm1WeVpXNWpaWE1nZlNrZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzNRZ1kzVnljbVZ1ZEZOMFlYUmxJRDBnZEdocGN5NXpkRzl5WlM1blpYUlRkR0YwWlNncE8xeHVJQ0FnSUNBZ2FXWWdLR04xY25KbGJuUlRkR0YwWlM1MGFXMWxiM1YwVFdsdWRYUmxjeUFoUFQwZ2NISmxabVZ5Wlc1alpYTXVZWFYwYjB4dlkydFVhVzFsVEdsdGFYUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjMlYwU1c1aFkzUnBkbVZVYVcxbGIzVjBLSEJ5WldabGNtVnVZMlZ6TG1GMWRHOU1iMk5yVkdsdFpVeHBiV2wwS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUhGeVNHRnlaSGRoY21WVGRHOXlaUzV6ZFdKelkzSnBZbVVvS0hOMFlYUmxLU0E5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbk4wYjNKbExuVndaR0YwWlZOMFlYUmxLSHNnY1hKSVlYSmtkMkZ5WlRvZ2MzUmhkR1VnZlNrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCamIyNXpkQ0I3SUhCeVpXWmxjbVZ1WTJWeklIMGdQU0J3Y21WbVpYSmxibU5sYzFOMGIzSmxMbWRsZEZOMFlYUmxLQ2s3WEc0Z0lDQWdkR2hwY3k1ZmMyVjBTVzVoWTNScGRtVlVhVzFsYjNWMEtIQnlaV1psY21WdVkyVnpMbUYxZEc5TWIyTnJWR2x0WlV4cGJXbDBLVHRjYmx4dUlDQWdJSFJvYVhNdWJXVnpjMkZuYVc1blUzbHpkR1Z0SUQwZ2JXVnpjMlZ1WjJWeU8xeHVJQ0FnSUhSb2FYTXVYMkZ3Y0hKdmRtRnNVbVZ4ZFdWemRFbGtJRDBnYm5Wc2JEdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRZ1lTQlFjbTl0YVhObElIUm9ZWFFnY21WemIyeDJaWE1nZDJobGJpQjBhR1VnWlhoMFpXNXphVzl1SUdseklIVnViRzlqYTJWa0xseHVJQ0FnS2lCVWFHbHpJRkJ5YjIxcGMyVWdkMmxzYkNCdVpYWmxjaUJ5WldwbFkzUXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3WW05dmJHVmhibjBnYzJodmRXeGtVMmh2ZDFWdWJHOWphMUpsY1hWbGMzUWdMU0JYYUdWMGFHVnlJSFJvWlNCbGVIUmxibk5wYjI0Z2JtOTBhV1pwWTJGMGFXOXVYRzRnSUNBcUlIQnZjSFZ3SUhOb2IzVnNaQ0JpWlNCdmNHVnVaV1F1WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRRY205dGFYTmxQSFp2YVdRK2ZTQkJJSEJ5YjIxcGMyVWdkR2hoZENCeVpYTnZiSFpsY3lCM2FHVnVJSFJvWlNCbGVIUmxibk5wYjI0Z2FYTmNiaUFnSUNvZ2RXNXNiMk5yWldRc0lHOXlJR2x0YldWa2FXRjBaV3g1SUdsbUlIUm9aU0JsZUhSbGJuTnBiMjRnYVhNZ1lXeHlaV0ZrZVNCMWJteHZZMnRsWkM1Y2JpQWdJQ292WEc0Z0lHZGxkRlZ1Ykc5amExQnliMjFwYzJVb2MyaHZkV3hrVTJodmQxVnViRzlqYTFKbGNYVmxjM1FwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVwSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtbHpWVzVzYjJOclpXUW9LU2tnZTF4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0NrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbmRoYVhSR2IzSlZibXh2WTJzb2NtVnpiMngyWlN3Z2MyaHZkV3hrVTJodmQxVnViRzlqYTFKbGNYVmxjM1FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmtaSE1nWVNCUWNtOXRhWE5sSjNNZ2NtVnpiMngyWlNCbWRXNWpkR2x2YmlCMGJ5QjBhR1VnZDJGcGRHbHVaMFp2Y2xWdWJHOWpheUJ4ZFdWMVpTNWNiaUFnSUNvZ1FXeHpieUJ2Y0dWdWN5QjBhR1VnWlhoMFpXNXphVzl1SUhCdmNIVndJR2xtSUhOd1pXTnBabWxsWkM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdFFjbTl0YVhObExuSmxjMjlzZG1WOUlISmxjMjlzZG1VZ0xTQkJJRkJ5YjIxcGMyVW5jeUJ5WlhOdmJIWmxJR1oxYm1OMGFXOXVJSFJvWVhRZ2QybHNiRnh1SUNBZ0tpQmlaU0JqWVd4c1pXUWdkMmhsYmlCMGFHVWdaWGgwWlc1emFXOXVJR2x6SUhWdWJHOWphMlZrTGx4dUlDQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJSE5vYjNWc1pGTm9iM2RWYm14dlkydFNaWEYxWlhOMElDMGdWMmhsZEdobGNpQjBhR1VnWlhoMFpXNXphVzl1SUc1dmRHbG1hV05oZEdsdmJseHVJQ0FnS2lCd2IzQjFjQ0J6YUc5MWJHUWdZbVVnYjNCbGJtVmtMbHh1SUNBZ0tpOWNiaUFnZDJGcGRFWnZjbFZ1Ykc5amF5aHlaWE52YkhabExDQnphRzkxYkdSVGFHOTNWVzVzYjJOclVtVnhkV1Z6ZENrZ2UxeHVJQ0FnSUhSb2FYTXVkMkZwZEdsdVowWnZjbFZ1Ykc5amF5NXdkWE5vS0hzZ2NtVnpiMngyWlNCOUtUdGNiaUFnSUNCMGFHbHpMbVZ0YVhRb1RVVlVRVTFCVTB0ZlEwOU9WRkpQVEV4RlVsOUZWa1ZPVkZNdVZWQkVRVlJGWDBKQlJFZEZLVHRjYmlBZ0lDQnBaaUFvYzJodmRXeGtVMmh2ZDFWdWJHOWphMUpsY1hWbGMzUXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzSmxjWFZsYzNSQmNIQnliM1poYkNncE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkVjbUZwYm5NZ2RHaGxJSGRoYVhScGJtZEdiM0pWYm14dlkyc2djWFZsZFdVc0lISmxjMjlzZG1sdVp5QmhiR3dnZEdobElISmxiR0YwWldRZ1VISnZiV2x6WlhNdVhHNGdJQ0FxTDF4dUlDQm9ZVzVrYkdWVmJteHZZMnNvS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11ZDJGcGRHbHVaMFp2Y2xWdWJHOWpheTVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNCM2FHbHNaU0FvZEdocGN5NTNZV2wwYVc1blJtOXlWVzVzYjJOckxteGxibWQwYUNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNZV2wwYVc1blJtOXlWVzVzYjJOckxuTm9hV1owS0NrdWNtVnpiMngyWlNncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RHaHBjeTVsYldsMEtFMUZWRUZOUVZOTFgwTlBUbFJTVDB4TVJWSmZSVlpGVGxSVExsVlFSRUZVUlY5Q1FVUkhSU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1ZllXTmpaWEIwUVhCd2NtOTJZV3dvS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaWFJ6SUhSb1pTQmtaV1poZFd4MElHaHZiV1VnZEdGaVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJaR1ZtWVhWc2RFaHZiV1ZCWTNScGRtVlVZV0pPWVcxbFhTQXRJSFJvWlNCMFlXSWdibUZ0WlZ4dUlDQWdLaTljYmlBZ2MyVjBSR1ZtWVhWc2RFaHZiV1ZCWTNScGRtVlVZV0pPWVcxbEtHUmxabUYxYkhSSWIyMWxRV04wYVhabFZHRmlUbUZ0WlNrZ2UxeHVJQ0FnSUhSb2FYTXVjM1J2Y21VdWRYQmtZWFJsVTNSaGRHVW9lMXh1SUNBZ0lDQWdaR1ZtWVhWc2RFaHZiV1ZCWTNScGRtVlVZV0pPWVcxbExGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsWTI5eVpDQjBhR0YwSUhSb1pTQjFjMlZ5SUdoaGN5QnpaV1Z1SUhSb1pTQmpiMjV1WldOMFpXUWdjM1JoZEhWeklHbHVabThnY0c5d2IzWmxjbHh1SUNBZ0tpOWNiaUFnYzJWMFEyOXVibVZqZEdWa1UzUmhkSFZ6VUc5d2IzWmxja2hoYzBKbFpXNVRhRzkzYmlncElIdGNiaUFnSUNCMGFHbHpMbk4wYjNKbExuVndaR0YwWlZOMFlYUmxLSHRjYmlBZ0lDQWdJR052Ym01bFkzUmxaRk4wWVhSMWMxQnZjRzkyWlhKSVlYTkNaV1Z1VTJodmQyNDZJSFJ5ZFdVc1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZqYjNKa0lIUm9ZWFFnZEdobElIVnpaWElnYUdGeklHSmxaVzRnYzJodmQyNGdkR2hsSUhKbFkyOTJaWEo1SUhCb2NtRnpaU0J5WlcxcGJtUmxjaTVjYmlBZ0lDb3ZYRzRnSUhObGRGSmxZMjkyWlhKNVVHaHlZWE5sVW1WdGFXNWtaWEpJWVhOQ1pXVnVVMmh2ZDI0b0tTQjdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3WEc0Z0lDQWdJQ0J5WldOdmRtVnllVkJvY21GelpWSmxiV2x1WkdWeVNHRnpRbVZsYmxOb2IzZHVPaUIwY25WbExGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsWTI5eVpDQjBhR1VnZEdsdFpYTjBZVzF3SUc5bUlIUm9aU0JzWVhOMElIUnBiV1VnZEdobElIVnpaWElnYUdGeklITmxaVzRnZEdobElISmxZMjkyWlhKNUlIQm9jbUZ6WlNCeVpXMXBibVJsY2x4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2JHRnpkRk5vYjNkdUlDMGdkR2x0WlhOMFlXMXdJSGRvWlc0Z2RYTmxjaUIzWVhNZ2JHRnpkQ0J6YUc5M2JpQjBhR1VnY21WdGFXNWtaWEl1WEc0Z0lDQXFMMXh1SUNCelpYUlNaV052ZG1WeWVWQm9jbUZ6WlZKbGJXbHVaR1Z5VEdGemRGTm9iM2R1S0d4aGMzUlRhRzkzYmlrZ2UxeHVJQ0FnSUhSb2FYTXVjM1J2Y21VdWRYQmtZWFJsVTNSaGRHVW9lMXh1SUNBZ0lDQWdjbVZqYjNabGNubFFhSEpoYzJWU1pXMXBibVJsY2t4aGMzUlRhRzkzYmpvZ2JHRnpkRk5vYjNkdUxGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsWTI5eVpDQjBhR1VnZEdsdFpYTjBZVzF3SUc5bUlIUm9aU0JzWVhOMElIUnBiV1VnZEdobElIVnpaWElnYUdGeklHRmpZMlZ2ZEdWa0lIUm9aU0IwWlhKdGN5QnZaaUIxYzJWY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHeGhjM1JCWjNKbFpXUWdMU0IwYVcxbGMzUmhiWEFnZDJobGJpQjFjMlZ5SUd4aGMzUWdZV05qWlhCMFpXUWdkR2hsSUhSbGNtMXpJRzltSUhWelpWeHVJQ0FnS2k5Y2JpQWdjMlYwVkdWeWJYTlBabFZ6WlV4aGMzUkJaM0psWldRb2JHRnpkRUZuY21WbFpDa2dlMXh1SUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZTF4dUlDQWdJQ0FnZEdWeWJYTlBabFZ6WlV4aGMzUkJaM0psWldRNklHeGhjM1JCWjNKbFpXUXNYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WamIzSmtJSFJvWlNCMGFXMWxjM1JoYlhBZ2IyWWdkR2hsSUd4aGMzUWdkR2x0WlNCMGFHVWdkWE5sY2lCb1lYTWdjMlZsYmlCMGFHVWdiM1YwWkdGMFpXUWdZbkp2ZDNObGNpQjNZWEp1YVc1blhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQnNZWE4wVTJodmQyNGdMU0JVYVcxbGMzUmhiWEFnS0dsdUlHMXBiR3hwYzJWamIyNWtjeWtnYjJZZ2QyaGxiaUIwYUdVZ2RYTmxjaUIzWVhNZ2JHRnpkQ0J6YUc5M2JpQjBhR1VnZDJGeWJtbHVaeTVjYmlBZ0lDb3ZYRzRnSUhObGRFOTFkR1JoZEdWa1FuSnZkM05sY2xkaGNtNXBibWRNWVhOMFUyaHZkMjRvYkdGemRGTm9iM2R1S1NCN1hHNGdJQ0FnZEdocGN5NXpkRzl5WlM1MWNHUmhkR1ZUZEdGMFpTaDdYRzRnSUNBZ0lDQnZkWFJrWVhSbFpFSnliM2R6WlhKWFlYSnVhVzVuVEdGemRGTm9iM2R1T2lCc1lYTjBVMmh2ZDI0c1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMlYwY3lCMGFHVWdiR0Z6ZENCaFkzUnBkbVVnZEdsdFpTQjBieUIwYUdVZ1kzVnljbVZ1ZENCMGFXMWxMbHh1SUNBZ0tpOWNiaUFnYzJWMFRHRnpkRUZqZEdsMlpWUnBiV1VvS1NCN1hHNGdJQ0FnZEdocGN5NWZjbVZ6WlhSVWFXMWxjaWdwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTmxkSE1nZEdobElHbHVZV04wYVhabElIUnBiV1Z2ZFhRZ1ptOXlJSFJvWlNCaGNIQmNiaUFnSUNwY2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlIUnBiV1Z2ZFhSTmFXNTFkR1Z6SUMwZ1ZHaGxJR2x1WVdOMGFYWmxJSFJwYldWdmRYUWdhVzRnYldsdWRYUmxjeTVjYmlBZ0lDb3ZYRzRnSUY5elpYUkpibUZqZEdsMlpWUnBiV1Z2ZFhRb2RHbHRaVzkxZEUxcGJuVjBaWE1wSUh0Y2JpQWdJQ0IwYUdsekxuTjBiM0psTG5Wd1pHRjBaVk4wWVhSbEtIdGNiaUFnSUNBZ0lIUnBiV1Z2ZFhSTmFXNTFkR1Z6TEZ4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnZEdocGN5NWZjbVZ6WlhSVWFXMWxjaWdwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxjMlYwY3lCMGFHVWdhVzUwWlhKdVlXd2dhVzVoWTNScGRtVWdkR2x0WlhKY2JpQWdJQ3BjYmlBZ0lDb2dTV1lnZEdobElIdEFZMjlrWlNCMGFXMWxiM1YwVFdsdWRYUmxjMzBnYzNSaGRHVWdhWE1nWm1Gc2Mza2dLR2t1WlM0c0lIcGxjbThwSUhSb1pXNGdZU0J1WlhkY2JpQWdJQ29nZEdsdFpYSWdkMmxzYkNCdWIzUWdZbVVnWTNKbFlYUmxaQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ292WEc0Z0lDOHFJR1Z6YkdsdWRDMWthWE5oWW14bElHNXZMWFZ1WkdWbUlDb3ZYRzRnSUY5eVpYTmxkRlJwYldWeUtDa2dlMXh1SUNBZ0lHTnZibk4wSUhzZ2RHbHRaVzkxZEUxcGJuVjBaWE1nZlNBOUlIUm9hWE11YzNSdmNtVXVaMlYwVTNSaGRHVW9LVHRjYmx4dUlDQWdJR2xtSUNoMGFHbHpMblJwYldWeUtTQjdYRzRnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvZEdocGN5NTBhVzFsY2lrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNocGMwMWhibWxtWlhOMFZqTXBJSHRjYmlBZ0lDQWdJR05vY205dFpTNWhiR0Z5YlhNdVkyeGxZWElvUVZWVVQxOU1UME5MWDFSSlRVVlBWVlJmUVV4QlVrMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2doZEdsdFpXOTFkRTFwYm5WMFpYTXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9hWE5OWVc1cFptVnpkRll6S1NCN1hHNGdJQ0FnSUNCamFISnZiV1V1WVd4aGNtMXpMbU55WldGMFpTaEJWVlJQWDB4UFEwdGZWRWxOUlU5VlZGOUJURUZTVFN3Z2UxeHVJQ0FnSUNBZ0lDQmtaV3hoZVVsdVRXbHVkWFJsY3pvZ2RHbHRaVzkxZEUxcGJuVjBaWE1zWEc0Z0lDQWdJQ0FnSUhCbGNtbHZaRWx1VFdsdWRYUmxjem9nZEdsdFpXOTFkRTFwYm5WMFpYTXNYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJR05vY205dFpTNWhiR0Z5YlhNdWIyNUJiR0Z5YlM1aFpHUk1hWE4wWlc1bGNpZ29ZV3hoY20xSmJtWnZLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoYkdGeWJVbHVabTh1Ym1GdFpTQTlQVDBnUVZWVVQxOU1UME5MWDFSSlRVVlBWVlJmUVV4QlVrMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1U1c1aFkzUnBkbVZVYVcxbGIzVjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1kyaHliMjFsTG1Gc1lYSnRjeTVqYkdWaGNpaEJWVlJQWDB4UFEwdGZWRWxOUlU5VlZGOUJURUZTVFNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFHbHpMblJwYldWeUlEMGdjMlYwVkdsdFpXOTFkQ2hjYmlBZ0lDQWdJQ0FnS0NrZ1BUNGdkR2hwY3k1dmJrbHVZV04wYVhabFZHbHRaVzkxZENncExGeHVJQ0FnSUNBZ0lDQjBhVzFsYjNWMFRXbHVkWFJsY3lBcUlFMUpUbFZVUlN4Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTmxkSE1nZEdobElHTjFjbkpsYm5RZ1luSnZkM05sY2lCaGJtUWdUMU1nWlc1MmFYSnZibTFsYm5SY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElHOXpYRzRnSUNBcUlFQndZWEpoYlNCaWNtOTNjMlZ5WEc0Z0lDQXFMMXh1SUNCelpYUkNjbTkzYzJWeVJXNTJhWEp2Ym0xbGJuUW9iM01zSUdKeWIzZHpaWElwSUh0Y2JpQWdJQ0IwYUdsekxuTjBiM0psTG5Wd1pHRjBaVk4wWVhSbEtIc2dZbkp2ZDNObGNrVnVkbWx5YjI1dFpXNTBPaUI3SUc5ekxDQmljbTkzYzJWeUlIMGdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FXUmtjeUJoSUhCdmJHeHBibWRVYjJ0bGJpQm1iM0lnWVNCbmFYWmxiaUJsYm5acGNtOXViV1Z1ZEZSNWNHVmNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSEJ2Ykd4cGJtZFViMnRsYmx4dUlDQWdLaUJBY0dGeVlXMGdjRzlzYkdsdVoxUnZhMlZ1Vkhsd1pWeHVJQ0FnS2k5Y2JpQWdZV1JrVUc5c2JHbHVaMVJ2YTJWdUtIQnZiR3hwYm1kVWIydGxiaXdnY0c5c2JHbHVaMVJ2YTJWdVZIbHdaU2tnZTF4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUhCdmJHeHBibWRVYjJ0bGJsUjVjR1VnSVQwOVhHNGdJQ0FnSUNCUVQweE1TVTVIWDFSUFMwVk9YMFZPVmtsU1QwNU5SVTVVWDFSWlVFVlRXMFZPVmtsU1QwNU5SVTVVWDFSWlVFVmZRa0ZEUzBkU1QxVk9SRjFjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJR052Ym5OMElIQnlaWFpUZEdGMFpTQTlJSFJvYVhNdWMzUnZjbVV1WjJWMFUzUmhkR1VvS1Z0d2IyeHNhVzVuVkc5clpXNVVlWEJsWFR0Y2JpQWdJQ0FnSUhSb2FYTXVjM1J2Y21VdWRYQmtZWFJsVTNSaGRHVW9lMXh1SUNBZ0lDQWdJQ0JiY0c5c2JHbHVaMVJ2YTJWdVZIbHdaVjA2SUZzdUxpNXdjbVYyVTNSaGRHVXNJSEJ2Ykd4cGJtZFViMnRsYmwwc1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2djbVZ0YjNabGN5QmhJSEJ2Ykd4cGJtZFViMnRsYmlCbWIzSWdZU0JuYVhabGJpQmxiblpwY205dWJXVnVkRlI1Y0dWY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIQnZiR3hwYm1kVWIydGxibHh1SUNBZ0tpQkFjR0Z5WVcwZ2NHOXNiR2x1WjFSdmEyVnVWSGx3WlZ4dUlDQWdLaTljYmlBZ2NtVnRiM1psVUc5c2JHbHVaMVJ2YTJWdUtIQnZiR3hwYm1kVWIydGxiaXdnY0c5c2JHbHVaMVJ2YTJWdVZIbHdaU2tnZTF4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUhCdmJHeHBibWRVYjJ0bGJsUjVjR1VnSVQwOVhHNGdJQ0FnSUNCUVQweE1TVTVIWDFSUFMwVk9YMFZPVmtsU1QwNU5SVTVVWDFSWlVFVlRXMFZPVmtsU1QwNU5SVTVVWDFSWlVFVmZRa0ZEUzBkU1QxVk9SRjFjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJR052Ym5OMElIQnlaWFpUZEdGMFpTQTlJSFJvYVhNdWMzUnZjbVV1WjJWMFUzUmhkR1VvS1Z0d2IyeHNhVzVuVkc5clpXNVVlWEJsWFR0Y2JpQWdJQ0FnSUhSb2FYTXVjM1J2Y21VdWRYQmtZWFJsVTNSaGRHVW9lMXh1SUNBZ0lDQWdJQ0JiY0c5c2JHbHVaMVJ2YTJWdVZIbHdaVjA2SUhCeVpYWlRkR0YwWlM1bWFXeDBaWElvS0hSdmEyVnVLU0E5UGlCMGIydGxiaUFoUFQwZ2NHOXNiR2x1WjFSdmEyVnVLU3hjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCamJHVmhjbk1nWVd4c0lIQnZiR3hwYm1kVWIydGxibk5jYmlBZ0lDb3ZYRzRnSUdOc1pXRnlVRzlzYkdsdVoxUnZhMlZ1Y3lncElIdGNiaUFnSUNCMGFHbHpMbk4wYjNKbExuVndaR0YwWlZOMFlYUmxLSHRjYmlBZ0lDQWdJSEJ2Y0hWd1IyRnpVRzlzYkZSdmEyVnVjem9nVzEwc1hHNGdJQ0FnSUNCdWIzUnBabWxqWVhScGIyNUhZWE5RYjJ4c1ZHOXJaVzV6T2lCYlhTeGNiaUFnSUNBZ0lHWjFiR3hUWTNKbFpXNUhZWE5RYjJ4c1ZHOXJaVzV6T2lCYlhTeGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWlhSeklIZG9aWFJvWlhJZ2RHaGxJSFJsYzNSdVpYUWdaR2x6YldsemMyRnNJR3hwYm1zZ2MyaHZkV3hrSUdKbElITm9iM2R1SUdsdUlIUm9aU0J1WlhSM2IzSnJJR1J5YjNCa2IzZHVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0J6YUc5M1ZHVnpkRzVsZEUxbGMzTmhaMlZKYmtSeWIzQmtiM2R1WEc0Z0lDQXFMMXh1SUNCelpYUlRhRzkzVkdWemRHNWxkRTFsYzNOaFoyVkpia1J5YjNCa2IzZHVLSE5vYjNkVVpYTjBibVYwVFdWemMyRm5aVWx1UkhKdmNHUnZkMjRwSUh0Y2JpQWdJQ0IwYUdsekxuTjBiM0psTG5Wd1pHRjBaVk4wWVhSbEtIc2djMmh2ZDFSbGMzUnVaWFJOWlhOellXZGxTVzVFY205d1pHOTNiaUI5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaWFJ6SUhkb1pYUm9aWElnZEdobElHSmxkR0VnYm05MGFXWnBZMkYwYVc5dUlHaGxZV1JwYm1jZ2IyNGdkR2hsSUdodmJXVWdjR0ZuWlZ4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2MyaHZkMEpsZEdGSVpXRmtaWEpjYmlBZ0lDb3ZYRzRnSUhObGRGTm9iM2RDWlhSaFNHVmhaR1Z5S0hOb2IzZENaWFJoU0dWaFpHVnlLU0I3WEc0Z0lDQWdkR2hwY3k1emRHOXlaUzUxY0dSaGRHVlRkR0YwWlNoN0lITm9iM2RDWlhSaFNHVmhaR1Z5SUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sZEhNZ2QyaGxkR2hsY2lCMGFHVWdjSEp2WkhWamRDQjBiM1Z5SUhOb2IzVnNaQ0JpWlNCemFHOTNibHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnYzJodmQxQnliMlIxWTNSVWIzVnlYRzRnSUNBcUwxeHVJQ0J6WlhSVGFHOTNVSEp2WkhWamRGUnZkWElvYzJodmQxQnliMlIxWTNSVWIzVnlLU0I3WEc0Z0lDQWdkR2hwY3k1emRHOXlaUzUxY0dSaGRHVlRkR0YwWlNoN0lITm9iM2RRY205a2RXTjBWRzkxY2lCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWlhSeklHRWdjSEp2Y0dWeWRIa2dhVzVrYVdOaGRHbHVaeUIwYUdVZ2JXOWtaV3dnYjJZZ2RHaGxJSFZ6WlhJbmN5QlVjbVY2YjNJZ2FHRnlaSGRoY21VZ2QyRnNiR1YwWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCMGNtVjZiM0pOYjJSbGJDQXRJRlJvWlNCVWNtVjZiM0lnYlc5a1pXd3VYRzRnSUNBcUwxeHVJQ0J6WlhSVWNtVjZiM0pOYjJSbGJDaDBjbVY2YjNKTmIyUmxiQ2tnZTF4dUlDQWdJSFJvYVhNdWMzUnZjbVV1ZFhCa1lYUmxVM1JoZEdVb2V5QjBjbVY2YjNKTmIyUmxiQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJJSE5sZEhSbGNpQm1iM0lnZEdobElHQnVablJ6UkhKdmNHUnZkMjVUZEdGMFpXQWdjSEp2Y0dWeWRIbGNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJRzVtZEhORWNtOXdaRzkzYmxOMFlYUmxYRzRnSUNBcUwxeHVJQ0IxY0dSaGRHVk9ablJFY205d1JHOTNibE4wWVhSbEtHNW1kSE5FY205d1pHOTNibE4wWVhSbEtTQjdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3WEc0Z0lDQWdJQ0J1Wm5SelJISnZjR1J2ZDI1VGRHRjBaU3hjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVmNHUmhkR1Z6SUhSb1pTQmhjbkpoZVNCdlppQjBhR1VnWm1seWMzUWdkR2x0WlNCMWMyVmtJRzVsZEhkdmNtdHpYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0JqYUdGcGJrbGtYRzRnSUNBcUlFQnlaWFIxY201eklIdDJiMmxrZlZ4dUlDQWdLaTljYmlBZ2MyVjBSbWx5YzNSVWFXMWxWWE5sWkU1bGRIZHZjbXNvWTJoaGFXNUpaQ2tnZTF4dUlDQWdJR052Ym5OMElHTjFjbkpsYm5SVGRHRjBaU0E5SUhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tUdGNiaUFnSUNCamIyNXpkQ0I3SUhWelpXUk9aWFIzYjNKcmN5QjlJRDBnWTNWeWNtVnVkRk4wWVhSbE8xeHVJQ0FnSUhWelpXUk9aWFIzYjNKcmMxdGphR0ZwYmtsa1hTQTlJSFJ5ZFdVN1hHNWNiaUFnSUNCMGFHbHpMbk4wYjNKbExuVndaR0YwWlZOMFlYUmxLSHNnZFhObFpFNWxkSGR2Y210eklIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVFZ2MyVjBkR1Z5SUdadmNpQjBhR1VnWTNWeWNtVnVkRkJ2Y0hWd1NXUWdkMmhwWTJnZ2FXNWthV05oZEdWeklIUm9aU0JwWkNCdlppQndiM0IxY0NCM2FXNWtiM2NnZEdoaGRDZHpJR04xY25KbGJuUnNlU0JoWTNScGRtVmNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJR04xY25KbGJuUlFiM0IxY0Vsa1hHNGdJQ0FxTDF4dUlDQnpaWFJEZFhKeVpXNTBVRzl3ZFhCSlpDaGpkWEp5Wlc1MFVHOXdkWEJKWkNrZ2UxeHVJQ0FnSUhSb2FYTXVjM1J2Y21VdWRYQmtZWFJsVTNSaGRHVW9lMXh1SUNBZ0lDQWdZM1Z5Y21WdWRGQnZjSFZ3U1dRc1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRU0JuWlhSMFpYSWdkRzhnY21WMGNtbGxkbVVnWTNWeWNtVnVkRkJ2Y0hWd1NXUWdjMkYyWldRZ2FXNGdkR2hsSUdGd2NGTjBZWFJsWEc0Z0lDQXFMMXh1SUNCblpYUkRkWEp5Wlc1MFVHOXdkWEJKWkNncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXpkRzl5WlM1blpYUlRkR0YwWlNncExtTjFjbkpsYm5SUWIzQjFjRWxrTzF4dUlDQjlYRzVjYmlBZ2MyVjBVMlZ5ZG1salpWZHZjbXRsY2t4aGMzUkJZM1JwZG1WVWFXMWxLSE5sY25acFkyVlhiM0pyWlhKTVlYTjBRV04wYVhabFZHbHRaU2tnZTF4dUlDQWdJSFJvYVhNdWMzUnZjbVV1ZFhCa1lYUmxVM1JoZEdVb2UxeHVJQ0FnSUNBZ2MyVnlkbWxqWlZkdmNtdGxja3hoYzNSQlkzUnBkbVZVYVcxbExGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdYM0psY1hWbGMzUkJjSEJ5YjNaaGJDZ3BJSHRjYmlBZ0lDQjBhR2x6TGw5aGNIQnliM1poYkZKbGNYVmxjM1JKWkNBOUlIVjFhV1FvS1R0Y2JseHVJQ0FnSUhSb2FYTXViV1Z6YzJGbmFXNW5VM2x6ZEdWdFhHNGdJQ0FnSUNBdVkyRnNiQ2hjYmlBZ0lDQWdJQ0FnSjBGd2NISnZkbUZzUTI5dWRISnZiR3hsY2pwaFpHUlNaWEYxWlhOMEp5eGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUdsa09pQjBhR2x6TGw5aGNIQnliM1poYkZKbGNYVmxjM1JKWkN4Y2JpQWdJQ0FnSUNBZ0lDQnZjbWxuYVc0NklFOVNTVWRKVGw5TlJWUkJUVUZUU3l4Y2JpQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCQmNIQnliM1poYkZSNWNHVXVWVzVzYjJOckxGeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0IwY25WbExGeHVJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0xtTmhkR05vS0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1NXNTBaVzUwYVc5dVlXeHNlU0JwWjI1dmNtVmtJR0Z6SUhCeWIyMXBjMlVnYm05MElHTjFjbkpsYm5Sc2VTQjFjMlZrWEc0Z0lDQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lGOWhZMk5sY0hSQmNIQnliM1poYkNncElIdGNiaUFnSUNCcFppQW9JWFJvYVhNdVgyRndjSEp2ZG1Gc1VtVnhkV1Z6ZEVsa0tTQjdYRzRnSUNBZ0lDQnNiMmN1WlhKeWIzSW9KMEYwZEdWdGNIUmxaQ0IwYnlCaFkyTmxjSFFnYldsemMybHVaeUIxYm14dlkyc2dZWEJ3Y205MllXd2djbVZ4ZFdWemRDY3BPMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV0WlhOellXZHBibWRUZVhOMFpXMHVZMkZzYkNoY2JpQWdJQ0FnSUNBZ0owRndjSEp2ZG1Gc1EyOXVkSEp2Ykd4bGNqcGhZMk5sY0hSU1pYRjFaWE4wSnl4Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVhCd2NtOTJZV3hTWlhGMVpYTjBTV1FzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDBnWTJGMFkyZ2dLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQnNiMmN1WlhKeWIzSW9KMFpoYVd4bFpDQjBieUJoWTJObGNIUWdkSEpoYm5OaFkzUnBiMjRnWVhCd2NtOTJZV3dnY21WeGRXVnpkQ2NzSUdWeWNtOXlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TGw5aGNIQnliM1poYkZKbGNYVmxjM1JKWkNBOUlHNTFiR3c3WEc0Z0lIMWNibjFjYmlJc0ltbHRjRzl5ZENCN0lIQnlaWEJsYm1SYVpYSnZJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZjMmhoY21Wa0wyMXZaSFZzWlhNdmMzUnlhVzVuTFhWMGFXeHpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdRbUZqYTNWd1EyOXVkSEp2Ykd4bGNpQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtHOXdkSE1nUFNCN2ZTa2dlMXh1SUNBZ0lHTnZibk4wSUh0Y2JpQWdJQ0FnSUhCeVpXWmxjbVZ1WTJWelEyOXVkSEp2Ykd4bGNpeGNiaUFnSUNBZ0lHRmtaSEpsYzNOQ2IyOXJRMjl1ZEhKdmJHeGxjaXhjYmlBZ0lDQWdJRzVsZEhkdmNtdERiMjUwY205c2JHVnlMRnh1SUNBZ0lDQWdkSEpoWTJ0TlpYUmhUV1YwY21samMwVjJaVzUwTEZ4dUlDQWdJSDBnUFNCdmNIUnpPMXh1WEc0Z0lDQWdkR2hwY3k1d2NtVm1aWEpsYm1ObGMwTnZiblJ5YjJ4c1pYSWdQU0J3Y21WbVpYSmxibU5sYzBOdmJuUnliMnhzWlhJN1hHNGdJQ0FnZEdocGN5NWhaR1J5WlhOelFtOXZhME52Ym5SeWIyeHNaWElnUFNCaFpHUnlaWE56UW05dmEwTnZiblJ5YjJ4c1pYSTdYRzRnSUNBZ2RHaHBjeTV1WlhSM2IzSnJRMjl1ZEhKdmJHeGxjaUE5SUc1bGRIZHZjbXREYjI1MGNtOXNiR1Z5TzF4dUlDQWdJSFJvYVhNdVgzUnlZV05yVFdWMFlVMWxkSEpwWTNORmRtVnVkQ0E5SUhSeVlXTnJUV1YwWVUxbGRISnBZM05GZG1WdWREdGNiaUFnZlZ4dVhHNGdJR0Z6ZVc1aklISmxjM1J2Y21WVmMyVnlSR0YwWVNocWMyOXVVM1J5YVc1bktTQjdYRzRnSUNBZ1kyOXVjM1FnWlhocGMzUnBibWRRY21WbVpYSmxibU5sY3lBOUlIUm9hWE11Y0hKbFptVnlaVzVqWlhORGIyNTBjbTlzYkdWeUxuTjBiM0psTG1kbGRGTjBZWFJsS0NrN1hHNGdJQ0FnWTI5dWMzUWdleUJ3Y21WbVpYSmxibU5sY3l3Z1lXUmtjbVZ6YzBKdmIyc3NJRzVsZEhkdmNtc2dmU0E5SUVwVFQwNHVjR0Z5YzJVb2FuTnZibE4wY21sdVp5azdYRzRnSUNBZ2FXWWdLSEJ5WldabGNtVnVZMlZ6S1NCN1hHNGdJQ0FnSUNCd2NtVm1aWEpsYm1ObGN5NXBaR1Z1ZEdsMGFXVnpJRDBnWlhocGMzUnBibWRRY21WbVpYSmxibU5sY3k1cFpHVnVkR2wwYVdWek8xeHVJQ0FnSUNBZ2NISmxabVZ5Wlc1alpYTXViRzl6ZEVsa1pXNTBhWFJwWlhNZ1BTQmxlR2x6ZEdsdVoxQnlaV1psY21WdVkyVnpMbXh2YzNSSlpHVnVkR2wwYVdWek8xeHVJQ0FnSUNBZ2NISmxabVZ5Wlc1alpYTXVjMlZzWldOMFpXUkJaR1J5WlhOeklEMGdaWGhwYzNScGJtZFFjbVZtWlhKbGJtTmxjeTV6Wld4bFkzUmxaRUZrWkhKbGMzTTdYRzVjYmlBZ0lDQWdJSFJvYVhNdWNISmxabVZ5Wlc1alpYTkRiMjUwY205c2JHVnlMbk4wYjNKbExuVndaR0YwWlZOMFlYUmxLSEJ5WldabGNtVnVZMlZ6S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1lXUmtjbVZ6YzBKdmIyc3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVlXUmtjbVZ6YzBKdmIydERiMjUwY205c2JHVnlMblZ3WkdGMFpTaGhaR1J5WlhOelFtOXZheXdnZEhKMVpTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRzVsZEhkdmNtc3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWJtVjBkMjl5YTBOdmJuUnliMnhzWlhJdWMzUnZjbVV1ZFhCa1lYUmxVM1JoZEdVb2JtVjBkMjl5YXlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIQnlaV1psY21WdVkyVnpJSHg4SUdGa1pISmxjM05DYjI5cklIeDhJRzVsZEhkdmNtc3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzUnlZV05yVFdWMFlVMWxkSEpwWTNORmRtVnVkQ2g3WEc0Z0lDQWdJQ0FnSUdWMlpXNTBPaUFuVlhObGNpQkVZWFJoSUVsdGNHOXlkR1ZrSnl4Y2JpQWdJQ0FnSUNBZ1kyRjBaV2R2Y25rNklDZENZV05yZFhBbkxGeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdZWE41Ym1NZ1ltRmphM1Z3VlhObGNrUmhkR0VvS1NCN1hHNGdJQ0FnWTI5dWMzUWdkWE5sY2tSaGRHRWdQU0I3WEc0Z0lDQWdJQ0J3Y21WbVpYSmxibU5sY3pvZ2V5QXVMaTUwYUdsekxuQnlaV1psY21WdVkyVnpRMjl1ZEhKdmJHeGxjaTV6ZEc5eVpTNW5aWFJUZEdGMFpTZ3BJSDBzWEc0Z0lDQWdJQ0JoWkdSeVpYTnpRbTl2YXpvZ2V5QXVMaTUwYUdsekxtRmtaSEpsYzNOQ2IyOXJRMjl1ZEhKdmJHeGxjaTV6ZEdGMFpTQjlMRnh1SUNBZ0lDQWdibVYwZDI5eWF6b2dlMXh1SUNBZ0lDQWdJQ0J1WlhSM2IzSnJRMjl1Wm1sbmRYSmhkR2x2Ym5NNlhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1dVpYUjNiM0pyUTI5dWRISnZiR3hsY2k1emRHOXlaUzVuWlhSVGRHRjBaU2dwTG01bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dWN5eGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRmRsSUdOaGJpQnlaVzF2ZG1VZ2RHaGxjMlVnY0hKdmNHVnlkR2xsY3lCemFXNWpaU0IzWlNCM2FXeHNJSGR2YmlkMElHSmxJSEpsYzNSdmNtbHVaeUJwWkdWdWRHbDBhV1Z6SUdaeWIyMGdZbUZqYTNWd1hHNGdJQ0FnSUNvdlhHNGdJQ0FnWkdWc1pYUmxJSFZ6WlhKRVlYUmhMbkJ5WldabGNtVnVZMlZ6TG1sa1pXNTBhWFJwWlhNN1hHNGdJQ0FnWkdWc1pYUmxJSFZ6WlhKRVlYUmhMbkJ5WldabGNtVnVZMlZ6TG14dmMzUkpaR1Z1ZEdsMGFXVnpPMXh1SUNBZ0lHUmxiR1YwWlNCMWMyVnlSR0YwWVM1d2NtVm1aWEpsYm1ObGN5NXpaV3hsWTNSbFpFRmtaSEpsYzNNN1hHNWNiaUFnSUNCamIyNXpkQ0J5WlhOMWJIUWdQU0JLVTA5T0xuTjBjbWx1WjJsbWVTaDFjMlZ5UkdGMFlTazdYRzVjYmlBZ0lDQmpiMjV6ZENCa1lYUmxJRDBnYm1WM0lFUmhkR1VvS1R0Y2JseHVJQ0FnSUdOdmJuTjBJSEJ5WldacGVGcGxjbThnUFNBb2JuVnRLU0E5UGlCd2NtVndaVzVrV21WeWJ5aHVkVzBzSURJcE8xeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0tpQjFjMlZ5UkdGMFlTNVpXVmxaWDAxTlgwUkVYMGhJWDIxdFgxTlRJR1V1WnlCMWMyVnlSR0YwWVM0eU1ESXlYekF4WHpFelh6RXpYelExWHpVMlhHNGdJQ0FnSUNvZ0tpOWNiaUFnSUNCamIyNXpkQ0IxYzJWeVJHRjBZVVpwYkdWT1lXMWxJRDBnWUUxbGRHRk5ZWE5yVlhObGNrUmhkR0V1Skh0a1lYUmxMbWRsZEVaMWJHeFpaV0Z5S0NsOVh5UjdjSEpsWm1sNFdtVnlieWhjYmlBZ0lDQWdJR1JoZEdVdVoyVjBUVzl1ZEdnb0tTQXJJREVzWEc0Z0lDQWdLWDFmSkh0d2NtVm1hWGhhWlhKdktHUmhkR1V1WjJWMFJHRjVLQ2twZlY4a2UzQnlaV1pwZUZwbGNtOG9aR0YwWlM1blpYUkliM1Z5Y3lncEtYMWZKSHR3Y21WbWFYaGFaWEp2S0Z4dUlDQWdJQ0FnWkdGMFpTNW5aWFJOYVc1MWRHVnpLQ2tzWEc0Z0lDQWdLWDFmSkh0d2NtVm1hWGhhWlhKdktHUmhkR1V1WjJWMFJHRjVLQ2twZlM1cWMyOXVZRHRjYmx4dUlDQWdJSEpsZEhWeWJpQjdJR1pwYkdWT1lXMWxPaUIxYzJWeVJHRjBZVVpwYkdWT1lXMWxMQ0JrWVhSaE9pQnlaWE4xYkhRZ2ZUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSHNnVDJKelpYSjJZV0pzWlZOMGIzSmxJSDBnWm5KdmJTQW5RRzFsZEdGdFlYTnJMMjlpY3kxemRHOXlaU2M3WEc1Y2JpOHFLbHh1SUNvZ1FIUjVjR1ZrWldZZ2UyOWlhbVZqZEgwZ1EyRmphR1ZrUW1Gc1lXNWpaWE5QY0hScGIyNXpYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UyOWlhbVZqZEgwZ1lXTmpiM1Z1ZEZSeVlXTnJaWElnUVc0Z2UwQmpiMlJsSUVGalkyOTFiblJVY21GamEyVnlmU0J5WldabGNtVnVZMlZjYmlBcUlFQndjbTl3WlhKMGVTQjdSblZ1WTNScGIyNTlJR2RsZEVOMWNuSmxiblJEYUdGcGJrbGtJRUVnWm5WdVkzUnBiMjRnZEc4Z1oyVjBJSFJvWlNCamRYSnlaVzUwSUdOb1lXbHVJR2xrWEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMjlpYW1WamRIMGdhVzVwZEZOMFlYUmxJRlJvWlNCcGJtbDBhV0ZzSUdOdmJuUnliMnhzWlhJZ2MzUmhkR1ZjYmlBcUwxeHVYRzR2S2lwY2JpQXFJRUpoWTJ0bmNtOTFibVFnWTI5dWRISnZiR3hsY2lCeVpYTndiMjV6YVdKc1pTQm1iM0lnYldGcGJuUmhhVzVwYm1kY2JpQXFJR0VnWTJGamFHVWdiMllnWVdOamIzVnVkQ0JpWVd4aGJtTmxjeUJwYmlCc2IyTmhiQ0J6ZEc5eVlXZGxYRzRnS2k5Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRU5oWTJobFpFSmhiR0Z1WTJWelEyOXVkSEp2Ykd4bGNpQjdYRzRnSUM4cUtseHVJQ0FnS2lCRGNtVmhkR1Z6SUdFZ2JtVjNJR052Ym5SeWIyeHNaWElnYVc1emRHRnVZMlZjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0RFlXTm9aV1JDWVd4aGJtTmxjMDl3ZEdsdmJuTjlJRnR2Y0hSelhTQXRJRU52Ym5SeWIyeHNaWElnWTI5dVptbG5kWEpoZEdsdmJpQndZWEpoYldWMFpYSnpYRzRnSUNBcUwxeHVJQ0JqYjI1emRISjFZM1J2Y2lodmNIUnpJRDBnZTMwcElIdGNiaUFnSUNCamIyNXpkQ0I3SUdGalkyOTFiblJVY21GamEyVnlMQ0JuWlhSRGRYSnlaVzUwUTJoaGFXNUpaQ0I5SUQwZ2IzQjBjenRjYmx4dUlDQWdJSFJvYVhNdVlXTmpiM1Z1ZEZSeVlXTnJaWElnUFNCaFkyTnZkVzUwVkhKaFkydGxjanRjYmlBZ0lDQjBhR2x6TG1kbGRFTjFjbkpsYm5SRGFHRnBia2xrSUQwZ1oyVjBRM1Z5Y21WdWRFTm9ZV2x1U1dRN1hHNWNiaUFnSUNCamIyNXpkQ0JwYm1sMFUzUmhkR1VnUFNCN0lHTmhZMmhsWkVKaGJHRnVZMlZ6T2lCN2ZTd2dMaTR1YjNCMGN5NXBibWwwVTNSaGRHVWdmVHRjYmlBZ0lDQjBhR2x6TG5OMGIzSmxJRDBnYm1WM0lFOWljMlZ5ZG1GaWJHVlRkRzl5WlNocGJtbDBVM1JoZEdVcE8xeHVYRzRnSUNBZ2RHaHBjeTVmY21WbmFYTjBaWEpWY0dSaGRHVnpLQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1ZYQmtZWFJsY3lCMGFHVWdZMkZqYUdWa1FtRnNZVzVqWlhNZ2NISnZjR1Z5ZEhrZ1ptOXlJSFJvWlNCamRYSnlaVzUwSUdOb1lXbHVMaUJEWVdOb1pXUWdZbUZzWVc1alpYTWdkMmxzYkNCaVpTQjFjR1JoZEdWa0lIUnZJSFJvYjNObElHbHVJSFJvWlNCd1lYTnpaV1FnWVdOamIzVnVkSE5jYmlBZ0lDb2dhV1lnWW1Gc1lXNWpaWE1nYVc0Z2RHaGxJSEJoYzNObFpDQmhZMk52ZFc1MGN5QmhjbVVnZEhKMWRHaDVMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYjJKcUlDMGdWR2hsSUhSb1pTQnlaV05sYm5Sc2VTQjFjR1JoZEdWa0lHRmpZMjkxYm5SeklHOWlhbVZqZENCbWIzSWdkR2hsSUdOMWNuSmxiblFnWTJoaGFXNWNiaUFnSUNvZ1FIQmhjbUZ0SUc5aWFpNWhZMk52ZFc1MGMxeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1VISnZiV2x6WlR4MmIybGtQbjFjYmlBZ0lDb3ZYRzRnSUdGemVXNWpJSFZ3WkdGMFpVTmhZMmhsWkVKaGJHRnVZMlZ6S0hzZ1lXTmpiM1Z1ZEhNZ2ZTa2dlMXh1SUNBZ0lHTnZibk4wSUdOb1lXbHVTV1FnUFNCMGFHbHpMbWRsZEVOMWNuSmxiblJEYUdGcGJrbGtLQ2s3WEc0Z0lDQWdZMjl1YzNRZ1ltRnNZVzVqWlhOVWIwTmhZMmhsSUQwZ1lYZGhhWFFnZEdocGN5NWZaMlZ1WlhKaGRHVkNZV3hoYm1ObGMxUnZRMkZqYUdVb1hHNGdJQ0FnSUNCaFkyTnZkVzUwY3l4Y2JpQWdJQ0FnSUdOb1lXbHVTV1FzWEc0Z0lDQWdLVHRjYmlBZ0lDQjBhR2x6TG5OMGIzSmxMblZ3WkdGMFpWTjBZWFJsS0h0Y2JpQWdJQ0FnSUdOaFkyaGxaRUpoYkdGdVkyVnpPaUJpWVd4aGJtTmxjMVJ2UTJGamFHVXNYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JmWjJWdVpYSmhkR1ZDWVd4aGJtTmxjMVJ2UTJGamFHVW9ibVYzUVdOamIzVnVkSE1zSUdOb1lXbHVTV1FwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJR05oWTJobFpFSmhiR0Z1WTJWeklIMGdQU0IwYUdsekxuTjBiM0psTG1kbGRGTjBZWFJsS0NrN1hHNGdJQ0FnWTI5dWMzUWdZM1Z5Y21WdWRFTm9ZV2x1UW1Gc1lXNWpaWE5VYjBOaFkyaGxJRDBnZXlBdUxpNWpZV05vWldSQ1lXeGhibU5sYzF0amFHRnBia2xrWFNCOU8xeHVYRzRnSUNBZ1QySnFaV04wTG10bGVYTW9ibVYzUVdOamIzVnVkSE1wTG1admNrVmhZMmdvS0dGalkyOTFiblJKUkNrZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzNRZ1lXTmpiM1Z1ZENBOUlHNWxkMEZqWTI5MWJuUnpXMkZqWTI5MWJuUkpSRjA3WEc1Y2JpQWdJQ0FnSUdsbUlDaGhZMk52ZFc1MExtSmhiR0Z1WTJVcElIdGNiaUFnSUNBZ0lDQWdZM1Z5Y21WdWRFTm9ZV2x1UW1Gc1lXNWpaWE5VYjBOaFkyaGxXMkZqWTI5MWJuUkpSRjBnUFNCaFkyTnZkVzUwTG1KaGJHRnVZMlU3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lDQWdZMjl1YzNRZ1ltRnNZVzVqWlhOVWIwTmhZMmhsSUQwZ2UxeHVJQ0FnSUNBZ0xpNHVZMkZqYUdWa1FtRnNZVzVqWlhNc1hHNGdJQ0FnSUNCYlkyaGhhVzVKWkYwNklHTjFjbkpsYm5SRGFHRnBia0poYkdGdVkyVnpWRzlEWVdOb1pTeGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdKaGJHRnVZMlZ6Vkc5RFlXTm9aVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pXMXZkbVZ6SUdOaFkyaGxaRUpoYkdGdVkyVnpYRzRnSUNBcUwxeHVYRzRnSUdOc1pXRnlRMkZqYUdWa1FtRnNZVzVqWlhNb0tTQjdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3SUdOaFkyaGxaRUpoYkdGdVkyVnpPaUI3ZlNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWlhSeklIVndJR3hwYzNSbGJtVnljeUJoYm1RZ2MzVmljMk55YVhCMGFXOXVjeUIzYUdsamFDQnphRzkxYkdRZ2RISnBaMmRsY2lCaGJpQjFjR1JoZEdVZ2IyWWdZMkZqYUdWa0lHSmhiR0Z1WTJWekxpQlVhR1Z6WlNCMWNHUmhkR1Z6SUhkcGJHeGNiaUFnSUNvZ2FHRndjR1Z1SUhkb1pXNGdkR2hsSUdOMWNuSmxiblFnWVdOamIzVnVkQ0JqYUdGdVoyVnpMaUJYYUdsamFDQm9ZWEJ3Wlc1eklHOXVJR0pzYjJOcklIVndaR0YwWlhNc0lHRnpJSGRsYkd3Z1lYTWdiMjRnYm1WMGQyOXlheUJoYm1RZ1lXTmpiM1Z1ZEZ4dUlDQWdLaUJ6Wld4bFkzUnBiMjV6TGx4dUlDQWdLbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2k5Y2JpQWdYM0psWjJsemRHVnlWWEJrWVhSbGN5Z3BJSHRjYmlBZ0lDQmpiMjV6ZENCMWNHUmhkR1VnUFNCMGFHbHpMblZ3WkdGMFpVTmhZMmhsWkVKaGJHRnVZMlZ6TG1KcGJtUW9kR2hwY3lrN1hHNGdJQ0FnZEdocGN5NWhZMk52ZFc1MFZISmhZMnRsY2k1emRHOXlaUzV6ZFdKelkzSnBZbVVvZFhCa1lYUmxLVHRjYmlBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUVWMlpXNTBSVzFwZEhSbGNpQm1jbTl0SUNkbGRtVnVkSE1uTzF4dWFXMXdiM0owSUd4dlp5Qm1jbTl0SUNkc2IyZHNaWFpsYkNjN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JFWldOeWVYQjBUV1Z6YzJGblpVMWhibUZuWlhJc1hHNGdJRVJsWTNKNWNIUk5aWE56WVdkbFVHRnlZVzF6TEZ4dUlDQkVaV055ZVhCMFRXVnpjMkZuWlZCaGNtRnRjMDFsZEdGdFlYTnJMRnh1ZlNCbWNtOXRJQ2RBYldWMFlXMWhjMnN2YldWemMyRm5aUzF0WVc1aFoyVnlKenRjYm1sdGNHOXlkQ0I3SUV0bGVYSnBibWREYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuUUcxbGRHRnRZWE5yTDJWMGFDMXJaWGx5YVc1bkxXTnZiblJ5YjJ4c1pYSW5PMXh1YVcxd2IzSjBJSHRjYmlBZ1FXSnpkSEpoWTNSTlpYTnpZV2RsTEZ4dUlDQkJZbk4wY21GamRFMWxjM05oWjJWTllXNWhaMlZ5TEZ4dUlDQkJZbk4wY21GamRFMWxjM05oWjJWUVlYSmhiWE1zWEc0Z0lFRmljM1J5WVdOMFRXVnpjMkZuWlZCaGNtRnRjMDFsZEdGdFlYTnJMRnh1SUNCTlpYTnpZV2RsVFdGdVlXZGxjbE4wWVhSbExGeHVJQ0JQY21sbmFXNWhiRkpsY1hWbGMzUXNYRzU5SUdaeWIyMGdKMEJ0WlhSaGJXRnpheTl0WlhOellXZGxMVzFoYm1GblpYSXZaR2x6ZEM5QlluTjBjbUZqZEUxbGMzTmhaMlZOWVc1aFoyVnlKenRjYm1sdGNHOXlkQ0I3WEc0Z0lFSmhjMlZEYjI1MGNtOXNiR1Z5VmpJc1hHNGdJRkpsYzNSeWFXTjBaV1JEYjI1MGNtOXNiR1Z5VFdWemMyVnVaMlZ5TEZ4dWZTQm1jbTl0SUNkQWJXVjBZVzFoYzJzdlltRnpaUzFqYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN1hHNGdJRUZqWTJWd2RGSmxjWFZsYzNRc1hHNGdJRUZrWkVGd2NISnZkbUZzVW1WeGRXVnpkQ3hjYmlBZ1VtVnFaV04wVW1WeGRXVnpkQ3hjYm4wZ1puSnZiU0FuUUcxbGRHRnRZWE5yTDJGd2NISnZkbUZzTFdOdmJuUnliMnhzWlhJbk8xeHVhVzF3YjNKMElIc2dRWEJ3Y205MllXeFVlWEJsTENCUFVrbEhTVTVmVFVWVVFVMUJVMHNnZlNCbWNtOXRJQ2RBYldWMFlXMWhjMnN2WTI5dWRISnZiR3hsY2kxMWRHbHNjeWM3WEc1cGJYQnZjblFnZXlCUVlYUmphQ0I5SUdaeWIyMGdKMmx0YldWeUp6dGNibWx0Y0c5eWRDQjdJRTFsZEdGTlpYUnlhV056UlhabGJuUkRZWFJsWjI5eWVTQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmJXVjBZVzFsZEhKcFkzTW5PMXh1YVcxd2IzSjBJSHNnYzNSeWFYQklaWGhRY21WbWFYZ2dmU0JtY205dElDY3VMaTh1TGk4dUxpOXphR0Z5WldRdmJXOWtkV3hsY3k5b1pYaHpkSEpwYm1jdGRYUnBiSE1uTzF4dVhHNWpiMjV6ZENCamIyNTBjbTlzYkdWeVRtRnRaU0E5SUNkRVpXTnllWEIwVFdWemMyRm5aVU52Ym5SeWIyeHNaWEluTzF4dVhHNWpiMjV6ZENCemRHRjBaVTFsZEdGa1lYUmhJRDBnZTF4dUlDQjFibUZ3Y0hKdmRtVmtSR1ZqY25sd2RFMXpaM002SUhzZ2NHVnljMmx6ZERvZ1ptRnNjMlVzSUdGdWIyNTViVzkxY3pvZ1ptRnNjMlVnZlN4Y2JpQWdkVzVoY0hCeWIzWmxaRVJsWTNKNWNIUk5jMmREYjNWdWREb2dleUJ3WlhKemFYTjBPaUJtWVd4elpTd2dZVzV2Ym5sdGIzVnpPaUJtWVd4elpTQjlMRnh1ZlR0Y2JseHVaWGh3YjNKMElHTnZibk4wSUdkbGRFUmxabUYxYkhSVGRHRjBaU0E5SUNncElEMCtJQ2g3WEc0Z0lIVnVZWEJ3Y205MlpXUkVaV055ZVhCMFRYTm5jem9nZTMwc1hHNGdJSFZ1WVhCd2NtOTJaV1JFWldOeWVYQjBUWE5uUTI5MWJuUTZJREFzWEc1OUtUdGNibHh1Wlhod2IzSjBJSFI1Y0dVZ1EyOXlaVTFsYzNOaFoyVWdQU0JCWW5OMGNtRmpkRTFsYzNOaFoyVWdKaUI3WEc0Z0lHMWxjM05oWjJWUVlYSmhiWE02SUVGaWMzUnlZV04wVFdWemMyRm5aVkJoY21GdGN6dGNibjA3WEc1Y2JtVjRjRzl5ZENCMGVYQmxJRk4wWVhSbFRXVnpjMkZuWlNBOUlGSmxjWFZwY21Wa1BGeHVJQ0JQYldsMFBFRmljM1J5WVdOMFRXVnpjMkZuWlN3Z0ozTmxZM1Z5YVhSNVVISnZkbWxrWlhKU1pYTndiMjV6WlNjK1hHNCtPMXh1WEc1bGVIQnZjblFnZEhsd1pTQkVaV055ZVhCMFRXVnpjMkZuWlVOdmJuUnliMnhzWlhKVGRHRjBaU0E5SUh0Y2JpQWdkVzVoY0hCeWIzWmxaRVJsWTNKNWNIUk5jMmR6T2lCU1pXTnZjbVE4YzNSeWFXNW5MQ0JUZEdGMFpVMWxjM05oWjJVK08xeHVJQ0IxYm1Gd2NISnZkbVZrUkdWamNubHdkRTF6WjBOdmRXNTBPaUJ1ZFcxaVpYSTdYRzU5TzF4dVhHNWxlSEJ2Y25RZ2RIbHdaU0JIWlhSRVpXTnllWEIwVFdWemMyRm5aVk4wWVhSbElEMGdlMXh1SUNCMGVYQmxPaUJnSkh0MGVYQmxiMllnWTI5dWRISnZiR3hsY2s1aGJXVjlPbWRsZEZOMFlYUmxZRHRjYmlBZ2FHRnVaR3hsY2pvZ0tDa2dQVDRnUkdWamNubHdkRTFsYzNOaFoyVkRiMjUwY205c2JHVnlVM1JoZEdVN1hHNTlPMXh1WEc1bGVIQnZjblFnZEhsd1pTQkVaV055ZVhCMFRXVnpjMkZuWlZOMFlYUmxRMmhoYm1kbElEMGdlMXh1SUNCMGVYQmxPaUJnSkh0MGVYQmxiMllnWTI5dWRISnZiR3hsY2s1aGJXVjlPbk4wWVhSbFEyaGhibWRsWUR0Y2JpQWdjR0Y1Ykc5aFpEb2dXMFJsWTNKNWNIUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNsTjBZWFJsTENCUVlYUmphRnRkWFR0Y2JuMDdYRzVjYm1WNGNHOXlkQ0IwZVhCbElFUmxZM0o1Y0hSTlpYTnpZV2RsUTI5dWRISnZiR3hsY2tGamRHbHZibk1nUFNCSFpYUkVaV055ZVhCMFRXVnpjMkZuWlZOMFlYUmxPMXh1WEc1bGVIQnZjblFnZEhsd1pTQkVaV055ZVhCMFRXVnpjMkZuWlVOdmJuUnliMnhzWlhKRmRtVnVkSE1nUFNCRVpXTnllWEIwVFdWemMyRm5aVk4wWVhSbFEyaGhibWRsTzF4dVhHNTBlWEJsSUVGc2JHOTNaV1JCWTNScGIyNXpJRDBnUVdSa1FYQndjbTkyWVd4U1pYRjFaWE4wSUh3Z1FXTmpaWEIwVW1WeGRXVnpkQ0I4SUZKbGFtVmpkRkpsY1hWbGMzUTdYRzVjYm1WNGNHOXlkQ0IwZVhCbElFUmxZM0o1Y0hSTlpYTnpZV2RsUTI5dWRISnZiR3hsY2sxbGMzTmxibWRsY2lBOUlGSmxjM1J5YVdOMFpXUkRiMjUwY205c2JHVnlUV1Z6YzJWdVoyVnlQRnh1SUNCMGVYQmxiMllnWTI5dWRISnZiR3hsY2s1aGJXVXNYRzRnSUVSbFkzSjVjSFJOWlhOellXZGxRMjl1ZEhKdmJHeGxja0ZqZEdsdmJuTWdmQ0JCYkd4dmQyVmtRV04wYVc5dWN5eGNiaUFnUkdWamNubHdkRTFsYzNOaFoyVkRiMjUwY205c2JHVnlSWFpsYm5SekxGeHVJQ0JCYkd4dmQyVmtRV04wYVc5dWMxc25kSGx3WlNkZExGeHVJQ0J1WlhabGNseHVQanRjYmx4dVpYaHdiM0owSUhSNWNHVWdSR1ZqY25sd2RFMWxjM05oWjJWRGIyNTBjbTlzYkdWeVQzQjBhVzl1Y3lBOUlIdGNiaUFnWjJWMFUzUmhkR1U2SUNncElEMCtJR0Z1ZVR0Y2JpQWdhMlY1Y21sdVowTnZiblJ5YjJ4c1pYSTZJRXRsZVhKcGJtZERiMjUwY205c2JHVnlPMXh1SUNCdFpYTnpaVzVuWlhJNklFUmxZM0o1Y0hSTlpYTnpZV2RsUTI5dWRISnZiR3hsY2sxbGMzTmxibWRsY2p0Y2JpQWdiV1YwY21samMwVjJaVzUwT2lBb2NHRjViRzloWkRvZ1lXNTVMQ0J2Y0hScGIyNXpQem9nWVc1NUtTQTlQaUIyYjJsa08xeHVmVHRjYmx4dUx5b3FYRzRnS2lCRGIyNTBjbTlzYkdWeUlHWnZjaUJrWldOeWVYQjBJSE5wWjI1cGJtY2djbVZ4ZFdWemRITWdjbVZ4ZFdseWFXNW5JSFZ6WlhJZ1lYQndjbTkyWVd3dVhHNGdLaTljYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFUmxZM0o1Y0hSTlpYTnpZV2RsUTI5dWRISnZiR3hsY2lCbGVIUmxibVJ6SUVKaGMyVkRiMjUwY205c2JHVnlWakk4WEc0Z0lIUjVjR1Z2WmlCamIyNTBjbTlzYkdWeVRtRnRaU3hjYmlBZ1JHVmpjbmx3ZEUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5VTNSaGRHVXNYRzRnSUVSbFkzSjVjSFJOWlhOellXZGxRMjl1ZEhKdmJHeGxjazFsYzNObGJtZGxjbHh1UGlCN1hHNGdJR2gxWWpvZ1JYWmxiblJGYldsMGRHVnlPMXh1WEc0Z0lIQnlhWFpoZEdVZ1gyZGxkRk4wWVhSbE9pQW9LU0E5UGlCaGJuazdYRzVjYmlBZ2NISnBkbUYwWlNCZmEyVjVjbWx1WjBOdmJuUnliMnhzWlhJNklFdGxlWEpwYm1kRGIyNTBjbTlzYkdWeU8xeHVYRzRnSUhCeWFYWmhkR1VnWDIxbGRISnBZM05GZG1WdWREb2dLSEJoZVd4dllXUTZJR0Z1ZVN3Z2IzQjBhVzl1Y3o4NklHRnVlU2tnUFQ0Z2RtOXBaRHRjYmx4dUlDQndjbWwyWVhSbElGOWtaV055ZVhCMFRXVnpjMkZuWlUxaGJtRm5aWEk2SUVSbFkzSjVjSFJOWlhOellXZGxUV0Z1WVdkbGNqdGNibHh1SUNBdktpcGNiaUFnSUNvZ1EyOXVjM1J5ZFdOMElHRWdSR1ZqY25sd2RFMWxjM05oWjJVZ1kyOXVkSEp2Ykd4bGNpNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJRzl3ZEdsdmJuTWdMU0JVYUdVZ1kyOXVkSEp2Ykd4bGNpQnZjSFJwYjI1ekxseHVJQ0FnS2lCQWNHRnlZVzBnYjNCMGFXOXVjeTVuWlhSVGRHRjBaU0F0SUVOaGJHeGlZV05ySUhSdklISmxkSEpwWlhabElHRnNiQ0IxYzJWeUlITjBZWFJsTGx4dUlDQWdLaUJBY0dGeVlXMGdiM0IwYVc5dWN5NXJaWGx5YVc1blEyOXVkSEp2Ykd4bGNpQXRJRUZ1SUdsdWMzUmhibU5sSUc5bUlHRWdhMlY1Y21sdVp5QmpiMjUwY205c2JHVnlJSFZ6WldRZ2RHOGdaR1ZqY25sd2RDQnRaWE56WVdkbFhHNGdJQ0FxSUVCd1lYSmhiU0J2Y0hScGIyNXpMbTFsYzNObGJtZGxjaUF0SUVFZ2NtVm1aWEpsYm1ObElIUnZJSFJvWlNCdFpYTnpZV2RwYm1jZ2MzbHpkR1Z0TGx4dUlDQWdLaUJBY0dGeVlXMGdiM0IwYVc5dWN5NXRaWFJ5YVdOelJYWmxiblFnTFNCQklHWjFibU4wYVc5dUlHWnZjaUJsYldsMGRHbHVaeUJoSUcxbGRISnBZeUJsZG1WdWRDNWNiaUFnSUNvdlhHNGdJR052Ym5OMGNuVmpkRzl5S0h0Y2JpQWdJQ0JuWlhSVGRHRjBaU3hjYmlBZ0lDQnJaWGx5YVc1blEyOXVkSEp2Ykd4bGNpeGNiaUFnSUNCdFpYUnlhV056UlhabGJuUXNYRzRnSUNBZ2JXVnpjMlZ1WjJWeUxGeHVJQ0I5T2lCRVpXTnllWEIwVFdWemMyRm5aVU52Ym5SeWIyeHNaWEpQY0hScGIyNXpLU0I3WEc0Z0lDQWdjM1Z3WlhJb2UxeHVJQ0FnSUNBZ2JXVjBZV1JoZEdFNklITjBZWFJsVFdWMFlXUmhkR0VzWEc0Z0lDQWdJQ0J0WlhOelpXNW5aWElzWEc0Z0lDQWdJQ0J1WVcxbE9pQmpiMjUwY205c2JHVnlUbUZ0WlN4Y2JpQWdJQ0FnSUhOMFlYUmxPaUJuWlhSRVpXWmhkV3gwVTNSaGRHVW9LU3hjYmlBZ0lDQjlLVHRjYmlBZ0lDQjBhR2x6TGw5blpYUlRkR0YwWlNBOUlHZGxkRk4wWVhSbE8xeHVJQ0FnSUhSb2FYTXVYMnRsZVhKcGJtZERiMjUwY205c2JHVnlJRDBnYTJWNWNtbHVaME52Ym5SeWIyeHNaWEk3WEc0Z0lDQWdkR2hwY3k1ZmJXVjBjbWxqYzBWMlpXNTBJRDBnYldWMGNtbGpjMFYyWlc1ME8xeHVYRzRnSUNBZ2RHaHBjeTVvZFdJZ1BTQnVaWGNnUlhabGJuUkZiV2wwZEdWeUtDazdYRzVjYmlBZ0lDQjBhR2x6TGw5a1pXTnllWEIwVFdWemMyRm5aVTFoYm1GblpYSWdQU0J1WlhjZ1JHVmpjbmx3ZEUxbGMzTmhaMlZOWVc1aFoyVnlLRnh1SUNBZ0lDQWdkVzVrWldacGJtVmtMRnh1SUNBZ0lDQWdkVzVrWldacGJtVmtMRnh1SUNBZ0lDQWdkVzVrWldacGJtVmtMRnh1SUNBZ0lDQWdXeWRrWldOeWVYQjBaV1FuWFN4Y2JpQWdJQ0FwTzF4dVhHNGdJQ0FnZEdocGN5NWZaR1ZqY25sd2RFMWxjM05oWjJWTllXNWhaMlZ5TG1oMVlpNXZiaWduZFhCa1lYUmxRbUZrWjJVbkxDQW9LU0E5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbWgxWWk1bGJXbDBLQ2QxY0dSaGRHVkNZV1JuWlNjcE8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2RHaHBjeTVmWkdWamNubHdkRTFsYzNOaFoyVk5ZVzVoWjJWeUxtaDFZaTV2YmloY2JpQWdJQ0FnSUNkMWJtRndjSEp2ZG1Wa1RXVnpjMkZuWlNjc1hHNGdJQ0FnSUNBb2JXVnpjMkZuWlZCaGNtRnRjem9nUVdKemRISmhZM1JOWlhOellXZGxVR0Z5WVcxelRXVjBZVzFoYzJzcElEMCtJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVZ4ZFdWemRFRndjSEp2ZG1Gc0tHMWxjM05oWjJWUVlYSmhiWE1wTzF4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FwTzF4dVhHNGdJQ0FnZEdocGN5NWZjM1ZpYzJOeWFXSmxWRzlOWlhOellXZGxVM1JoZEdVb1hHNGdJQ0FnSUNCMGFHbHpMbDlrWldOeWVYQjBUV1Z6YzJGblpVMWhibUZuWlhJc1hHNGdJQ0FnSUNBb2MzUmhkR1VzSUc1bGQwMWxjM05oWjJWekxDQnRaWE56WVdkbFEyOTFiblFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdjM1JoZEdVdWRXNWhjSEJ5YjNabFpFUmxZM0o1Y0hSTmMyZHpJRDBnYm1WM1RXVnpjMkZuWlhNN1hHNGdJQ0FnSUNBZ0lITjBZWFJsTG5WdVlYQndjbTkyWldSRVpXTnllWEIwVFhOblEyOTFiblFnUFNCdFpYTnpZV2RsUTI5MWJuUTdYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVNCblpYUjBaWElnWm05eUlIUm9aU0J1ZFcxaVpYSWdiMllnSjNWdVlYQndjbTkyWldRbklFMWxjM05oWjJWeklHbHVJSFJvWlNCRVpXTnllWEIwVFdWemMyRm5aVTFoYm1GblpYSXVYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUZSb1pTQnVkVzFpWlhJZ2IyWWdKM1Z1WVhCd2NtOTJaV1FuSUUxbGMzTmhaMlZ6SUdsdUlIUm9aU0JFWldOeWVYQjBUV1Z6YzJGblpVMWhibUZuWlhJdVhHNGdJQ0FxTDF4dUlDQm5aWFFnZFc1aGNIQnliM1psWkVSbFkzSjVjSFJOYzJkRGIzVnVkQ2dwT2lCdWRXMWlaWElnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5a1pXTnllWEIwVFdWemMyRm5aVTFoYm1GblpYSXVaMlYwVlc1aGNIQnliM1psWkUxbGMzTmhaMlZ6UTI5MWJuUW9LVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pYTmxkQ0IwYUdVZ1kyOXVkSEp2Ykd4bGNpQnpkR0YwWlNCMGJ5QjBhR1VnYVc1cGRHbGhiQ0J6ZEdGMFpTNWNiaUFnSUNvdlhHNGdJSEpsYzJWMFUzUmhkR1VvS1NCN1hHNGdJQ0FnZEdocGN5NTFjR1JoZEdVb0tDa2dQVDRnWjJWMFJHVm1ZWFZzZEZOMFlYUmxLQ2twTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnNaV0Z5Y3lCaGJHd2dkVzVoY0hCeWIzWmxaQ0J0WlhOellXZGxjeUJtY205dElHMWxiVzl5ZVM1Y2JpQWdJQ292WEc0Z0lHTnNaV0Z5Vlc1aGNIQnliM1psWkNncElIdGNiaUFnSUNCMGFHbHpMbDlrWldOeWVYQjBUV1Z6YzJGblpVMWhibUZuWlhJdWRYQmtZWFJsS0h0Y2JpQWdJQ0FnSUhWdVlYQndjbTkyWldSTlpYTnpZV2RsY3pvZ2UzMHNYRzRnSUNBZ0lDQjFibUZ3Y0hKdmRtVmtUV1Z6YzJGblpYTkRiM1Z1ZERvZ01DeGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEWVd4c1pXUWdkMmhsYmlCaElHUmhjSEFnZFhObGN5QjBhR1VnWlhSb1gyUmxZM0o1Y0hRZ2JXVjBhRzlrWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCdFpYTnpZV2RsVUdGeVlXMXpJQzBnVkdobElIQmhjbUZ0Y3lCd1lYTnpaV1FnZEc4Z1pYUm9YMlJsWTNKNWNIUXVYRzRnSUNBcUlFQndZWEpoYlNCeVpYRWdMU0JVYUdVZ2IzSnBaMmx1WVd3Z2NtVnhkV1Z6ZEN3Z1kyOXVkR0ZwYm1sdVp5QjBhR1VnYjNKcFoybHVMbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QlFjbTl0YVhObElISmxjMjlzZG1sdVp5QjBieUIwYUdVZ2NtRjNJR1JoZEdFZ2IyWWdkR2hsSUhOcFoyNWhkSFZ5WlNCeVpYRjFaWE4wTGx4dUlDQWdLaTljYmlBZ1lYTjVibU1nYm1WM1VtVnhkV1Z6ZEVSbFkzSjVjSFJOWlhOellXZGxLRnh1SUNBZ0lHMWxjM05oWjJWUVlYSmhiWE02SUVSbFkzSjVjSFJOWlhOellXZGxVR0Z5WVcxekxGeHVJQ0FnSUhKbGNUb2dUM0pwWjJsdVlXeFNaWEYxWlhOMExGeHVJQ0FwT2lCUWNtOXRhWE5sUEhOMGNtbHVaejRnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5a1pXTnllWEIwVFdWemMyRm5aVTFoYm1GblpYSXVZV1JrVlc1aGNIQnliM1psWkUxbGMzTmhaMlZCYzNsdVl5aGNiaUFnSUNBZ0lHMWxjM05oWjJWUVlYSmhiWE1zWEc0Z0lDQWdJQ0J5WlhFc1hHNGdJQ0FnS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRhV2R1YVdacFpYTWdZU0IxYzJWeUozTWdZWEJ3Y205MllXd2dkRzhnWkdWamNubHdkQ0JoSUcxbGMzTmhaMlVnYVc0Z2NYVmxkV1V1WEc0Z0lDQXFJRlJ5YVdkblpYSnpJR1JsWTNKNWNIUXNJR0Z1WkNCMGFHVWdZMkZzYkdKaFkyc2dablZ1WTNScGIyNGdabkp2YlNCdVpYZFZibk5wWjI1bFpFUmxZM0o1Y0hSTlpYTnpZV2RsTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2JXVnpjMkZuWlZCaGNtRnRjeUF0SUZSb1pTQndZWEpoYlhNZ2IyWWdkR2hsSUcxbGMzTmhaMlVnZEc4Z1pHVmpjbmx3ZENBbUlISmxkSFZ5YmlCMGJ5QjBhR1VnUkdGd2NDNWNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ1FTQm1kV3hzSUhOMFlYUmxJSFZ3WkdGMFpTNWNiaUFnSUNvdlhHNGdJR0Z6ZVc1aklHUmxZM0o1Y0hSTlpYTnpZV2RsS0cxbGMzTmhaMlZRWVhKaGJYTTZJRVJsWTNKNWNIUk5aWE56WVdkbFVHRnlZVzF6VFdWMFlXMWhjMnNwSUh0Y2JpQWdJQ0JqYjI1emRDQnRaWE56WVdkbFNXUWdQU0J0WlhOellXZGxVR0Z5WVcxekxtMWxkR0Z0WVhOclNXUWdZWE1nYzNSeWFXNW5PMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQmpiR1ZoYmsxbGMzTmhaMlZRWVhKaGJYTWdQVnh1SUNBZ0lDQWdJQ0JoZDJGcGRDQjBhR2x6TGw5a1pXTnllWEIwVFdWemMyRm5aVTFoYm1GblpYSXVZWEJ3Y205MlpVMWxjM05oWjJVb2JXVnpjMkZuWlZCaGNtRnRjeWs3WEc1Y2JpQWdJQ0FnSUdOc1pXRnVUV1Z6YzJGblpWQmhjbUZ0Y3k1a1lYUmhJRDBnZEdocGN5NWZjR0Z5YzJWTlpYTnpZV2RsUkdGMFlTaGpiR1ZoYmsxbGMzTmhaMlZRWVhKaGJYTXVaR0YwWVNrN1hHNGdJQ0FnSUNCamIyNXpkQ0J5WVhkTlpYTnpZV2RsSUQwZ1lYZGhhWFFnZEdocGN5NWZhMlY1Y21sdVowTnZiblJ5YjJ4c1pYSXVaR1ZqY25sd2RFMWxjM05oWjJVb1hHNGdJQ0FnSUNBZ0lHTnNaV0Z1VFdWemMyRm5aVkJoY21GdGN5eGNiaUFnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJSFJvYVhNdVgyUmxZM0o1Y0hSTlpYTnpZV2RsVFdGdVlXZGxjaTV6WlhSTlpYTnpZV2RsVTNSaGRIVnpRVzVrVW1WemRXeDBLRnh1SUNBZ0lDQWdJQ0J0WlhOellXZGxTV1FzWEc0Z0lDQWdJQ0FnSUhKaGQwMWxjM05oWjJVc1hHNGdJQ0FnSUNBZ0lDZGtaV055ZVhCMFpXUW5MRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSFJvYVhNdVgyRmpZMlZ3ZEVGd2NISnZkbUZzS0cxbGMzTmhaMlZKWkNrN1hHNGdJQ0FnZlNCallYUmphQ0FvWlhKeWIzSXBJSHRjYmlBZ0lDQWdJR3h2Wnk1cGJtWnZLQ2ROWlhSaFRXRnphME52Ym5SeWIyeHNaWElnTFNCbGRHaGZaR1ZqY25sd2RDQm1ZV2xzWldRdUp5d2daWEp5YjNJcE8xeHVJQ0FnSUNBZ2RHaHBjeTVmWTJGdVkyVnNRV0p6ZEhKaFkzUk5aWE56WVdkbEtIUm9hWE11WDJSbFkzSjVjSFJOWlhOellXZGxUV0Z1WVdkbGNpd2diV1Z6YzJGblpVbGtLVHRjYmlBZ0lDQWdJSFJvY205M0lHVnljbTl5TzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWjJWMFUzUmhkR1VvS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlBibXg1SUdSbFkzSjVjSFFnYldWemMyRm5aU0JoYm1RZ1pHOXVKM1FnZEc5MVkyZ2dkSEpoYm5OaFkzUnBiMjRnYzNSaGRHVmNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJRzFsYzNOaFoyVlFZWEpoYlhNZ0xTQlVhR1VnY0dGeVlXMXpJRzltSUhSb1pTQnRaWE56WVdkbElIUnZJR1JsWTNKNWNIUXVYRzRnSUNBcUlFQnlaWFIxY201eklFRWdablZzYkNCemRHRjBaU0IxY0dSaGRHVXVYRzRnSUNBcUwxeHVJQ0JoYzNsdVl5QmtaV055ZVhCMFRXVnpjMkZuWlVsdWJHbHVaU2h0WlhOellXZGxVR0Z5WVcxek9pQkVaV055ZVhCMFRXVnpjMkZuWlZCaGNtRnRjMDFsZEdGdFlYTnJLU0I3WEc0Z0lDQWdZMjl1YzNRZ2JXVnpjMkZuWlVsa0lEMGdiV1Z6YzJGblpWQmhjbUZ0Y3k1dFpYUmhiV0Z6YTBsa0lHRnpJSE4wY21sdVp6dGNiaUFnSUNCdFpYTnpZV2RsVUdGeVlXMXpMbVJoZEdFZ1BTQjBhR2x6TGw5d1lYSnpaVTFsYzNOaFoyVkVZWFJoS0cxbGMzTmhaMlZRWVhKaGJYTXVaR0YwWVNrN1hHNGdJQ0FnWTI5dWMzUWdjbUYzVFdWemMyRm5aU0E5SUdGM1lXbDBJSFJvYVhNdVgydGxlWEpwYm1kRGIyNTBjbTlzYkdWeUxtUmxZM0o1Y0hSTlpYTnpZV2RsS0Z4dUlDQWdJQ0FnYldWemMyRm5aVkJoY21GdGN5eGNiaUFnSUNBcE8xeHVYRzRnSUNBZ2RHaHBjeTVmWkdWamNubHdkRTFsYzNOaFoyVk5ZVzVoWjJWeUxuTmxkRkpsYzNWc2RDaHRaWE56WVdkbFNXUXNJSEpoZDAxbGMzTmhaMlVwTzF4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyZGxkRk4wWVhSbEtDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhObFpDQjBieUJqWVc1alpXd2dZU0JsZEdoZlpHVmpjbmx3ZENCMGVYQmxJRzFsYzNOaFoyVXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0J0WlhOellXZGxTV1FnTFNCVWFHVWdTVVFnYjJZZ2RHaGxJRzFsYzNOaFoyVWdkRzhnWTJGdVkyVnNMbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QkJJR1oxYkd3Z2MzUmhkR1VnZFhCa1lYUmxMbHh1SUNBZ0tpOWNiaUFnWTJGdVkyVnNSR1ZqY25sd2RFMWxjM05oWjJVb2JXVnpjMkZuWlVsa09pQnpkSEpwYm1jcElIdGNiaUFnSUNCMGFHbHpMbDlrWldOeWVYQjBUV1Z6YzJGblpVMWhibUZuWlhJdWNtVnFaV04wVFdWemMyRm5aU2h0WlhOellXZGxTV1FwTzF4dUlDQWdJSFJvYVhNdVgzSmxhbVZqZEVGd2NISnZkbUZzS0cxbGMzTmhaMlZKWkNrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyZGxkRk4wWVhSbEtDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WcVpXTjBJR0ZzYkNCMWJtRndjSEp2ZG1Wa0lHMWxjM05oWjJWeklHOW1JR0Z1ZVNCMGVYQmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnY21WaGMyOXVJQzBnUVNCdFpYTnpZV2RsSUhSdklHbHVaR2xqWVhSbElIZG9lUzVjYmlBZ0lDb3ZYRzRnSUhKbGFtVmpkRlZ1WVhCd2NtOTJaV1FvY21WaGMyOXVQem9nYzNSeWFXNW5LU0I3WEc0Z0lDQWdUMkpxWldOMExtdGxlWE1vZEdocGN5NWZaR1ZqY25sd2RFMWxjM05oWjJWTllXNWhaMlZ5TG1kbGRGVnVZWEJ3Y205MlpXUk5aWE56WVdkbGN5Z3BLUzVtYjNKRllXTm9LRnh1SUNBZ0lDQWdLRzFsYzNOaFoyVkpaQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5allXNWpaV3hCWW5OMGNtRmpkRTFsYzNOaFoyVW9YRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaR1ZqY25sd2RFMWxjM05oWjJWTllXNWhaMlZ5TEZ4dUlDQWdJQ0FnSUNBZ0lHMWxjM05oWjJWSlpDeGNiaUFnSUNBZ0lDQWdJQ0J5WldGemIyNHNYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ2s3WEc0Z0lIMWNibHh1SUNCd2NtbDJZWFJsSUY5aFkyTmxjSFJCY0hCeWIzWmhiQ2h0WlhOellXZGxTV1E2SUhOMGNtbHVaeWtnZTF4dUlDQWdJSFJvYVhNdWJXVnpjMkZuYVc1blUzbHpkR1Z0TG1OaGJHd29KMEZ3Y0hKdmRtRnNRMjl1ZEhKdmJHeGxjanBoWTJObGNIUlNaWEYxWlhOMEp5d2diV1Z6YzJGblpVbGtLVHRjYmlBZ2ZWeHVYRzRnSUhCeWFYWmhkR1VnWDJOaGJtTmxiRUZpYzNSeVlXTjBUV1Z6YzJGblpTaGNiaUFnSUNCdFpYTnpZV2RsVFdGdVlXZGxjam9nUVdKemRISmhZM1JOWlhOellXZGxUV0Z1WVdkbGNqeGNiaUFnSUNBZ0lFRmljM1J5WVdOMFRXVnpjMkZuWlN4Y2JpQWdJQ0FnSUVGaWMzUnlZV04wVFdWemMyRm5aVkJoY21GdGN5eGNiaUFnSUNBZ0lFRmljM1J5WVdOMFRXVnpjMkZuWlZCaGNtRnRjMDFsZEdGdFlYTnJYRzRnSUNBZ1BpeGNiaUFnSUNCdFpYTnpZV2RsU1dRNklITjBjbWx1Wnl4Y2JpQWdJQ0J5WldGemIyNC9PaUJ6ZEhKcGJtY3NYRzRnSUNrZ2UxeHVJQ0FnSUdsbUlDaHlaV0Z6YjI0cElIdGNiaUFnSUNBZ0lIUm9hWE11WDIxbGRISnBZM05GZG1WdWRDaDdYRzRnSUNBZ0lDQWdJR1YyWlc1ME9pQnlaV0Z6YjI0c1hHNGdJQ0FnSUNBZ0lHTmhkR1ZuYjNKNU9pQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rdVRXVnpjMkZuWlhNc1hHNGdJQ0FnSUNBZ0lIQnliM0JsY25ScFpYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNCaFkzUnBiMjQ2SUNkRVpXTnllWEIwSUUxbGMzTmhaMlVnVW1WeGRXVnpkQ2NzWEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCdFpYTnpZV2RsVFdGdVlXZGxjaTV5WldwbFkzUk5aWE56WVdkbEtHMWxjM05oWjJWSlpDazdYRzRnSUNBZ2RHaHBjeTVmY21WcVpXTjBRWEJ3Y205MllXd29iV1Z6YzJGblpVbGtLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5blpYUlRkR0YwWlNncE8xeHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQmZjM1ZpYzJOeWFXSmxWRzlOWlhOellXZGxVM1JoZEdVb1hHNGdJQ0FnYldWemMyRm5aVTFoYm1GblpYSTZJRUZpYzNSeVlXTjBUV1Z6YzJGblpVMWhibUZuWlhJOFhHNGdJQ0FnSUNCQlluTjBjbUZqZEUxbGMzTmhaMlVzWEc0Z0lDQWdJQ0JCWW5OMGNtRmpkRTFsYzNOaFoyVlFZWEpoYlhNc1hHNGdJQ0FnSUNCQlluTjBjbUZqZEUxbGMzTmhaMlZRWVhKaGJYTk5aWFJoYldGemExeHVJQ0FnSUQ0c1hHNGdJQ0FnZFhCa1lYUmxVM1JoZEdVNklDaGNiaUFnSUNBZ0lITjBZWFJsT2lCRVpXTnllWEIwVFdWemMyRm5aVU52Ym5SeWIyeHNaWEpUZEdGMFpTeGNiaUFnSUNBZ0lHNWxkMDFsYzNOaFoyVnpPaUJTWldOdmNtUThjM1J5YVc1bkxDQlRkR0YwWlUxbGMzTmhaMlUrTEZ4dUlDQWdJQ0FnYldWemMyRm5aVU52ZFc1ME9pQnVkVzFpWlhJc1hHNGdJQ0FnS1NBOVBpQjJiMmxrTEZ4dUlDQXBJSHRjYmlBZ0lDQnRaWE56WVdkbFRXRnVZV2RsY2k1emRXSnpZM0pwWW1Vb0tITjBZWFJsT2lCTlpYTnpZV2RsVFdGdVlXZGxjbE4wWVhSbFBFRmljM1J5WVdOMFRXVnpjMkZuWlQ0cElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElHNWxkMDFsYzNOaFoyVnpJRDBnZEdocGN5NWZiV2xuY21GMFpVMWxjM05oWjJWektGeHVJQ0FnSUNBZ0lDQnpkR0YwWlM1MWJtRndjSEp2ZG1Wa1RXVnpjMkZuWlhNZ1lYTWdZVzU1TEZ4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbEtDaGtjbUZtZEZOMFlYUmxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lIVndaR0YwWlZOMFlYUmxLR1J5WVdaMFUzUmhkR1VzSUc1bGQwMWxjM05oWjJWekxDQnpkR0YwWlM1MWJtRndjSEp2ZG1Wa1RXVnpjMkZuWlhORGIzVnVkQ2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lIQnlhWFpoZEdVZ1gyMXBaM0poZEdWTlpYTnpZV2RsY3loY2JpQWdJQ0JqYjNKbFRXVnpjMkZuWlhNNklGSmxZMjl5WkR4emRISnBibWNzSUVOdmNtVk5aWE56WVdkbFBpeGNiaUFnS1RvZ1VtVmpiM0prUEhOMGNtbHVaeXdnVTNSaGRHVk5aWE56WVdkbFBpQjdYRzRnSUNBZ1kyOXVjM1FnYzNSaGRHVk5aWE56WVdkbGN6b2dVbVZqYjNKa1BITjBjbWx1Wnl3Z1UzUmhkR1ZOWlhOellXZGxQaUE5SUh0OU8xeHVYRzRnSUNBZ1ptOXlJQ2hqYjI1emRDQnRaWE56WVdkbFNXUWdiMllnVDJKcVpXTjBMbXRsZVhNb1kyOXlaVTFsYzNOaFoyVnpLU2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdZMjl5WlUxbGMzTmhaMlVnUFNCamIzSmxUV1Z6YzJGblpYTmJiV1Z6YzJGblpVbGtYVHRjYmlBZ0lDQWdJR052Ym5OMElITjBZWFJsVFdWemMyRm5aU0E5SUhSb2FYTXVYMjFwWjNKaGRHVk5aWE56WVdkbEtHTnZjbVZOWlhOellXZGxLVHRjYmlBZ0lDQWdJSE4wWVhSbFRXVnpjMkZuWlhOYmJXVnpjMkZuWlVsa1hTQTlJSE4wWVhSbFRXVnpjMkZuWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjM1JoZEdWTlpYTnpZV2RsY3p0Y2JpQWdmVnh1WEc0Z0lIQnlhWFpoZEdVZ1gyMXBaM0poZEdWTlpYTnpZV2RsS0dOdmNtVk5aWE56WVdkbE9pQkRiM0psVFdWemMyRm5aU2s2SUZOMFlYUmxUV1Z6YzJGblpTQjdYRzRnSUNBZ1kyOXVjM1FnZXlCdFpYTnpZV2RsVUdGeVlXMXpMQ0F1TGk1amIzSmxUV1Z6YzJGblpVUmhkR0VnZlNBOUlHTnZjbVZOWlhOellXZGxPMXh1WEc0Z0lDQWdZMjl1YzNRZ2MzUmhkR1ZOWlhOellXZGxJRDBnZTF4dUlDQWdJQ0FnTGk0dVkyOXlaVTFsYzNOaFoyVkVZWFJoTEZ4dUlDQWdJQ0FnY21GM1UybG5PaUJqYjNKbFRXVnpjMkZuWlM1eVlYZFRhV2NnWVhNZ2MzUnlhVzVuTEZ4dUlDQWdJQ0FnYlhOblVHRnlZVzF6T2lCdFpYTnpZV2RsVUdGeVlXMXpMRnh1SUNBZ0lDQWdiM0pwWjJsdU9pQnRaWE56WVdkbFVHRnlZVzF6TG05eWFXZHBiaXhjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdjbVYwZFhKdUlITjBZWFJsVFdWemMyRm5aVHRjYmlBZ2ZWeHVYRzRnSUhCeWFYWmhkR1VnWDNKbGNYVmxjM1JCY0hCeWIzWmhiQ2h0WlhOellXZGxVR0Z5WVcxek9pQkJZbk4wY21GamRFMWxjM05oWjJWUVlYSmhiWE5OWlhSaGJXRnpheWtnZTF4dUlDQWdJR052Ym5OMElHbGtJRDBnYldWemMyRm5aVkJoY21GdGN5NXRaWFJoYldGemEwbGtJR0Z6SUhOMGNtbHVaenRjYmlBZ0lDQmpiMjV6ZENCdmNtbG5hVzRnUFNCdFpYTnpZV2RsVUdGeVlXMXpMbTl5YVdkcGJpQjhmQ0JQVWtsSFNVNWZUVVZVUVUxQlUwczdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJSFJvYVhNdWJXVnpjMkZuYVc1blUzbHpkR1Z0TG1OaGJHd29YRzRnSUNBZ0lDQWdJQ2RCY0hCeWIzWmhiRU52Ym5SeWIyeHNaWEk2WVdSa1VtVnhkV1Z6ZENjc1hHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0JwWkN4Y2JpQWdJQ0FnSUNBZ0lDQnZjbWxuYVc0c1hHNGdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ1FYQndjbTkyWVd4VWVYQmxMa1YwYUVSbFkzSjVjSFFzWEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lIUnlkV1VzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDBnWTJGMFkyZ2dLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQnNiMmN1YVc1bWJ5Z25SWEp5YjNJZ1lXUmthVzVuSUhKbGNYVmxjM1FnZEc4Z1lYQndjbTkyWVd3Z1kyOXVkSEp2Ykd4bGNpY3NJR1Z5Y205eUtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQndjbWwyWVhSbElGOXdZWEp6WlUxbGMzTmhaMlZFWVhSaEtHUmhkR0U2SUhOMGNtbHVaeWtnZTF4dUlDQWdJR052Ym5OMElITjBjbWx3Y0dWa0lEMGdjM1J5YVhCSVpYaFFjbVZtYVhnb1pHRjBZU2s3WEc0Z0lDQWdZMjl1YzNRZ1luVm1aaUE5SUVKMVptWmxjaTVtY205dEtITjBjbWx3Y0dWa0xDQW5hR1Y0SnlrN1hHNGdJQ0FnY21WMGRYSnVJRXBUVDA0dWNHRnljMlVvWW5WbVppNTBiMU4wY21sdVp5Z25kWFJtT0NjcEtUdGNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdYM0psYW1WamRFRndjSEp2ZG1Gc0tHMWxjM05oWjJWSlpEb2djM1J5YVc1bktTQjdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJSFJvYVhNdWJXVnpjMkZuYVc1blUzbHpkR1Z0TG1OaGJHd29YRzRnSUNBZ0lDQWdJQ2RCY0hCeWIzWmhiRU52Ym5SeWIyeHNaWEk2Y21WcVpXTjBVbVZ4ZFdWemRDY3NYRzRnSUNBZ0lDQWdJRzFsYzNOaFoyVkpaQ3hjYmlBZ0lDQWdJQ0FnSjBOaGJtTmxiQ2NzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDBnWTJGMFkyZ2dLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQnNiMmN1YVc1bWJ5Z25SWEp5YjNJZ2NtVnFaV04wYVc1bklISmxjWFZsYzNRZ2RHOGdZWEJ3Y205MllXd2dZMjl1ZEhKdmJHeGxjaWNzSUdWeWNtOXlLVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0I3SUhkaGNtNGdmU0JtY205dElDZHNiMmRzWlhabGJDYzdYRzVwYlhCdmNuUWdleUJOU1U1VlZFVWdmU0JtY205dElDY3VMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwzUnBiV1VuTzF4dWFXMXdiM0owSUhzZ1EwaEJTVTVmU1VSVElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dmMyaGhjbVZrTDJOdmJuTjBZVzUwY3k5dVpYUjNiM0pySnp0Y2JtbHRjRzl5ZENCN0lGTlVRVlJKUTE5TlFVbE9Ua1ZVWDFSUFMwVk9YMHhKVTFRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5emFHRnlaV1F2WTI5dWMzUmhiblJ6TDNSdmEyVnVjeWM3WEc1cGJYQnZjblFnZXlCcGMxUnZhMlZ1UkdWMFpXTjBhVzl1Ulc1aFlteGxaRVp2Y2s1bGRIZHZjbXNnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6YUdGeVpXUXZiVzlrZFd4bGN5OXVaWFIzYjNKckxuVjBhV3h6Snp0Y2JtbHRjRzl5ZENCN0lHbHpSWEYxWVd4RFlYTmxTVzV6Wlc1emFYUnBkbVVnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6YUdGeVpXUXZiVzlrZFd4bGN5OXpkSEpwYm1jdGRYUnBiSE1uTzF4dWFXMXdiM0owSUh0Y2JpQWdRWE56WlhSVWVYQmxMRnh1SUNCVWIydGxibE4wWVc1a1lYSmtMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMM1J5WVc1ellXTjBhVzl1Snp0Y2JtbHRjRzl5ZENCN1hHNGdJRTFsZEdGTlpYUnlhV056UlhabGJuUkRZWFJsWjI5eWVTeGNiaUFnVFdWMFlVMWxkSEpwWTNORmRtVnVkRTVoYldVc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmJXVjBZVzFsZEhKcFkzTW5PMXh1WEc0dkx5QkNlU0JrWldaaGRXeDBMQ0J3YjJ4c0lHVjJaWEo1SURNZ2JXbHVkWFJsYzF4dVkyOXVjM1FnUkVWR1FWVk1WRjlKVGxSRlVsWkJUQ0E5SUUxSlRsVlVSU0FxSURNN1hHNWNiaThxS2x4dUlDb2dRU0JqYjI1MGNtOXNiR1Z5SUhSb1lYUWdjRzlzYkhNZ1ptOXlJSFJ2YTJWdUlHVjRZMmhoYm1kbFhHNGdLaUJ5WVhSbGN5QmlZWE5sWkNCdmJpQmhJSFZ6WlhJbmN5QmpkWEp5Wlc1MElIUnZhMlZ1SUd4cGMzUmNiaUFxTDF4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdSR1YwWldOMFZHOXJaVzV6UTI5dWRISnZiR3hsY2lCN1hHNGdJQzhxS2x4dUlDQWdLaUJEY21WaGRHVnpJR0VnUkdWMFpXTjBWRzlyWlc1elEyOXVkSEp2Ykd4bGNseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdXMk52Ym1acFoxMGdMU0JQY0hScGIyNXpJSFJ2SUdOdmJtWnBaM1Z5WlNCamIyNTBjbTlzYkdWeVhHNGdJQ0FxSUVCd1lYSmhiU0JqYjI1bWFXY3VhVzUwWlhKMllXeGNiaUFnSUNvZ1FIQmhjbUZ0SUdOdmJtWnBaeTV3Y21WbVpYSmxibU5sYzF4dUlDQWdLaUJBY0dGeVlXMGdZMjl1Wm1sbkxtNWxkSGR2Y210Y2JpQWdJQ29nUUhCaGNtRnRJR052Ym1acFp5NXJaWGx5YVc1blRXVnRVM1J2Y21WY2JpQWdJQ29nUUhCaGNtRnRJR052Ym1acFp5NTBiMnRsYmt4cGMzUmNiaUFnSUNvZ1FIQmhjbUZ0SUdOdmJtWnBaeTUwYjJ0bGJuTkRiMjUwY205c2JHVnlYRzRnSUNBcUlFQndZWEpoYlNCamIyNW1hV2N1WVhOelpYUnpRMjl1ZEhKaFkzUkRiMjUwY205c2JHVnlYRzRnSUNBcUlFQndZWEpoYlNCamIyNW1hV2N1ZEhKaFkydE5aWFJoVFdWMGNtbGpjMFYyWlc1MFhHNGdJQ0FxTDF4dUlDQmpiMjV6ZEhKMVkzUnZjaWg3WEc0Z0lDQWdhVzUwWlhKMllXd2dQU0JFUlVaQlZVeFVYMGxPVkVWU1ZrRk1MRnh1SUNBZ0lIQnlaV1psY21WdVkyVnpMRnh1SUNBZ0lHNWxkSGR2Y21zc1hHNGdJQ0FnYTJWNWNtbHVaMDFsYlZOMGIzSmxMRnh1SUNBZ0lIUnZhMlZ1VEdsemRDeGNiaUFnSUNCMGIydGxibk5EYjI1MGNtOXNiR1Z5TEZ4dUlDQWdJR0Z6YzJWMGMwTnZiblJ5WVdOMFEyOXVkSEp2Ykd4bGNpQTlJRzUxYkd3c1hHNGdJQ0FnZEhKaFkydE5aWFJoVFdWMGNtbGpjMFYyWlc1MExGeHVJQ0I5SUQwZ2UzMHBJSHRjYmlBZ0lDQjBhR2x6TG1GemMyVjBjME52Ym5SeVlXTjBRMjl1ZEhKdmJHeGxjaUE5SUdGemMyVjBjME52Ym5SeVlXTjBRMjl1ZEhKdmJHeGxjanRjYmlBZ0lDQjBhR2x6TG5SdmEyVnVjME52Ym5SeWIyeHNaWElnUFNCMGIydGxibk5EYjI1MGNtOXNiR1Z5TzF4dUlDQWdJSFJvYVhNdWNISmxabVZ5Wlc1alpYTWdQU0J3Y21WbVpYSmxibU5sY3p0Y2JpQWdJQ0IwYUdsekxtbHVkR1Z5ZG1Gc0lEMGdhVzUwWlhKMllXdzdYRzRnSUNBZ2RHaHBjeTV1WlhSM2IzSnJJRDBnYm1WMGQyOXlhenRjYmlBZ0lDQjBhR2x6TG10bGVYSnBibWROWlcxVGRHOXlaU0E5SUd0bGVYSnBibWROWlcxVGRHOXlaVHRjYmlBZ0lDQjBhR2x6TG5SdmEyVnVUR2x6ZENBOUlIUnZhMlZ1VEdsemREdGNiaUFnSUNCMGFHbHpMblZ6WlZSdmEyVnVSR1YwWldOMGFXOXVJRDFjYmlBZ0lDQWdJSFJvYVhNdWNISmxabVZ5Wlc1alpYTS9Mbk4wYjNKbExtZGxkRk4wWVhSbEtDa3VkWE5sVkc5clpXNUVaWFJsWTNScGIyNDdYRzRnSUNBZ2RHaHBjeTV6Wld4bFkzUmxaRUZrWkhKbGMzTWdQU0IwYUdsekxuQnlaV1psY21WdVkyVnpQeTV6ZEc5eVpTNW5aWFJUZEdGMFpTZ3BMbk5sYkdWamRHVmtRV1JrY21WemN6dGNiaUFnSUNCMGFHbHpMblJ2YTJWdVFXUmtjbVZ6YzJWeklEMGdkR2hwY3k1MGIydGxibk5EYjI1MGNtOXNiR1Z5UHk1emRHRjBaUzUwYjJ0bGJuTXViV0Z3S0NoMGIydGxiaWtnUFQ0Z2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSdmEyVnVMbUZrWkhKbGMzTTdYRzRnSUNBZ2ZTazdYRzRnSUNBZ2RHaHBjeTVvYVdSa1pXNVViMnRsYm5NZ1BTQjBhR2x6TG5SdmEyVnVjME52Ym5SeWIyeHNaWEkvTG5OMFlYUmxMbWxuYm05eVpXUlViMnRsYm5NN1hHNGdJQ0FnZEdocGN5NWtaWFJsWTNSbFpGUnZhMlZ1Y3lBOUlIUm9hWE11ZEc5clpXNXpRMjl1ZEhKdmJHeGxjajh1YzNSaGRHVXVaR1YwWldOMFpXUlViMnRsYm5NN1hHNGdJQ0FnZEdocGN5NWphR0ZwYmtsa0lEMGdkR2hwY3k1blpYUkRhR0ZwYmtsa1JuSnZiVTVsZEhkdmNtdFRkRzl5WlNodVpYUjNiM0pyS1R0Y2JpQWdJQ0IwYUdsekxsOTBjbUZqYTAxbGRHRk5aWFJ5YVdOelJYWmxiblFnUFNCMGNtRmphMDFsZEdGTlpYUnlhV056UlhabGJuUTdYRzVjYmlBZ0lDQndjbVZtWlhKbGJtTmxjejh1YzNSdmNtVXVjM1ZpYzJOeWFXSmxLQ2g3SUhObGJHVmpkR1ZrUVdSa2NtVnpjeXdnZFhObFZHOXJaVzVFWlhSbFkzUnBiMjRnZlNrZ1BUNGdlMXh1SUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sYkdWamRHVmtRV1JrY21WemN5QWhQVDBnYzJWc1pXTjBaV1JCWkdSeVpYTnpJSHg4WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWE5sVkc5clpXNUVaWFJsWTNScGIyNGdJVDA5SUhWelpWUnZhMlZ1UkdWMFpXTjBhVzl1WEc0Z0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6Wld4bFkzUmxaRUZrWkhKbGMzTWdQU0J6Wld4bFkzUmxaRUZrWkhKbGMzTTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYTmxWRzlyWlc1RVpYUmxZM1JwYjI0Z1BTQjFjMlZVYjJ0bGJrUmxkR1ZqZEdsdmJqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpYTjBZWEowVkc5clpXNUVaWFJsWTNScGIyNG9leUJ6Wld4bFkzUmxaRUZrWkhKbGMzTWdmU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lDQWdkRzlyWlc1elEyOXVkSEp2Ykd4bGNqOHVjM1ZpYzJOeWFXSmxLRnh1SUNBZ0lDQWdLSHNnZEc5clpXNXpJRDBnVzEwc0lHbG5ibTl5WldSVWIydGxibk1nUFNCYlhTd2daR1YwWldOMFpXUlViMnRsYm5NZ1BTQmJYU0I5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHOXJaVzVCWkdSeVpYTnpaWE1nUFNCMGIydGxibk11YldGd0tDaDBiMnRsYmlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYjJ0bGJpNWhaR1J5WlhOek8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW9hV1JrWlc1VWIydGxibk1nUFNCcFoyNXZjbVZrVkc5clpXNXpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUmxkR1ZqZEdWa1ZHOXJaVzV6SUQwZ1pHVjBaV04wWldSVWIydGxibk03WEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1JtOXlJR1ZoWTJnZ2RHOXJaVzRnYVc0Z2RHaGxJSFJ2YTJWdWJHbHpkQ0J3Y205MmFXUmxaQ0JpZVNCMGFHVWdWRzlyWlc1TWFYTjBRMjl1ZEhKdmJHeGxjaXdnWTJobFkyc2djMlZzWldOMFpXUkJaR1J5WlhOeklHSmhiR0Z1WTJVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQnZjSFJwYjI1elhHNGdJQ0FxSUVCd1lYSmhiU0J2Y0hScGIyNXpMbk5sYkdWamRHVmtRV1JrY21WemN5QXRJSFJvWlNCelpXeGxZM1JsWkVGa1pISmxjM01nWVdkaGFXNXpkQ0IzYUdsamFDQjBieUJrWlhSbFkzUWdabTl5SUhSdmEyVnVJR0poYkdGdVkyVnpYRzRnSUNBcUlFQndZWEpoYlNCdmNIUnBiMjV6TG1Ob1lXbHVTV1FnTFNCMGFHVWdZMmhoYVc1SlpDQmhaMkZwYm5OMElIZG9hV05vSUhSdklHUmxkR1ZqZENCbWIzSWdkRzlyWlc0Z1ltRnNZVzVqWlhOY2JpQWdJQ292WEc0Z0lHRnplVzVqSUdSbGRHVmpkRTVsZDFSdmEyVnVjeWg3SUhObGJHVmpkR1ZrUVdSa2NtVnpjeXdnWTJoaGFXNUpaQ0I5SUQwZ2UzMHBJSHRjYmlBZ0lDQmpiMjV6ZENCaFpHUnlaWE56UVdkaGFXNXpkRmRvYVdOb1ZHOUVaWFJsWTNRZ1BTQnpaV3hsWTNSbFpFRmtaSEpsYzNNZ1B6OGdkR2hwY3k1elpXeGxZM1JsWkVGa1pISmxjM003WEc0Z0lDQWdZMjl1YzNRZ1kyaGhhVzVKWkVGbllXbHVjM1JYYUdsamFGUnZSR1YwWldOMElEMWNiaUFnSUNBZ0lHTm9ZV2x1U1dRZ1B6OGdkR2hwY3k1blpYUkRhR0ZwYmtsa1JuSnZiVTVsZEhkdmNtdFRkRzl5WlNoMGFHbHpMbDl1WlhSM2IzSnJLVHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVhWE5CWTNScGRtVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tDRnBjMVJ2YTJWdVJHVjBaV04wYVc5dVJXNWhZbXhsWkVadmNrNWxkSGR2Y21zb1kyaGhhVzVKWkVGbllXbHVjM1JYYUdsamFGUnZSR1YwWldOMEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBaGRHaHBjeTUxYzJWVWIydGxia1JsZEdWamRHbHZiaUFtSmx4dUlDQWdJQ0FnWTJoaGFXNUpaRUZuWVdsdWMzUlhhR2xqYUZSdlJHVjBaV04wSUNFOVBTQkRTRUZKVGw5SlJGTXVUVUZKVGs1RlZGeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElHbHpWRzlyWlc1RVpYUmxZM1JwYjI1SmJtRmpkR2wyWlVsdVRXRnBibTVsZENBOVhHNGdJQ0FnSUNBaGRHaHBjeTUxYzJWVWIydGxia1JsZEdWamRHbHZiaUFtSmx4dUlDQWdJQ0FnWTJoaGFXNUpaRUZuWVdsdWMzUlhhR2xqYUZSdlJHVjBaV04wSUQwOVBTQkRTRUZKVGw5SlJGTXVUVUZKVGs1RlZEdGNiaUFnSUNCamIyNXpkQ0I3SUhSdmEyVnVUR2x6ZENCOUlEMGdkR2hwY3k1ZmRHOXJaVzVNYVhOMExuTjBZWFJsTzF4dVhHNGdJQ0FnWTI5dWMzUWdkRzlyWlc1TWFYTjBWWE5sWkNBOUlHbHpWRzlyWlc1RVpYUmxZM1JwYjI1SmJtRmpkR2wyWlVsdVRXRnBibTVsZEZ4dUlDQWdJQ0FnUHlCVFZFRlVTVU5mVFVGSlRrNUZWRjlVVDB0RlRsOU1TVk5VWEc0Z0lDQWdJQ0E2SUhSdmEyVnVUR2x6ZER0Y2JseHVJQ0FnSUdOdmJuTjBJSFJ2YTJWdWMxUnZSR1YwWldOMElEMGdXMTA3WEc0Z0lDQWdabTl5SUNoamIyNXpkQ0IwYjJ0bGJrRmtaSEpsYzNNZ2FXNGdkRzlyWlc1TWFYTjBWWE5sWkNrZ2UxeHVJQ0FnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdJQ0FoZEdocGN5NTBiMnRsYmtGa1pISmxjM05sY3k1bWFXNWtLQ2hoWkdSeVpYTnpLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lHbHpSWEYxWVd4RFlYTmxTVzV6Wlc1emFYUnBkbVVvWVdSa2NtVnpjeXdnZEc5clpXNUJaR1J5WlhOektTeGNiaUFnSUNBZ0lDQWdLU0FtSmx4dUlDQWdJQ0FnSUNBaGRHaHBjeTVvYVdSa1pXNVViMnRsYm5NdVptbHVaQ2dvWVdSa2NtVnpjeWtnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQnBjMFZ4ZFdGc1EyRnpaVWx1YzJWdWMybDBhWFpsS0dGa1pISmxjM01zSUhSdmEyVnVRV1JrY21WemN5a3NYRzRnSUNBZ0lDQWdJQ2tnSmlaY2JpQWdJQ0FnSUNBZ0lYUm9hWE11WkdWMFpXTjBaV1JVYjJ0bGJuTXVabWx1WkNnb2V5QmhaR1J5WlhOeklIMHBJRDArWEc0Z0lDQWdJQ0FnSUNBZ2FYTkZjWFZoYkVOaGMyVkpibk5sYm5OcGRHbDJaU2hoWkdSeVpYTnpMQ0IwYjJ0bGJrRmtaSEpsYzNNcExGeHVJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnZEc5clpXNXpWRzlFWlhSbFkzUXVjSFZ6YUNoMGIydGxia0ZrWkhKbGMzTXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0J6YkdsalpVOW1WRzlyWlc1elZHOUVaWFJsWTNRZ1BTQmJYRzRnSUNBZ0lDQjBiMnRsYm5OVWIwUmxkR1ZqZEM1emJHbGpaU2d3TENBeE1EQXdLU3hjYmlBZ0lDQWdJSFJ2YTJWdWMxUnZSR1YwWldOMExuTnNhV05sS0RFd01EQXNJSFJ2YTJWdWMxUnZSR1YwWldOMExteGxibWQwYUNBdElERXBMRnh1SUNBZ0lGMDdYRzRnSUNBZ1ptOXlJQ2hqYjI1emRDQjBiMnRsYm5OVGJHbGpaU0J2WmlCemJHbGpaVTltVkc5clpXNXpWRzlFWlhSbFkzUXBJSHRjYmlBZ0lDQWdJR3hsZENCeVpYTjFiSFE3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQmhkMkZwZENCMGFHbHpMbUZ6YzJWMGMwTnZiblJ5WVdOMFEyOXVkSEp2Ykd4bGNpNW5aWFJDWVd4aGJtTmxjMGx1VTJsdVoyeGxRMkZzYkNoY2JpQWdJQ0FnSUNBZ0lDQmhaR1J5WlhOelFXZGhhVzV6ZEZkb2FXTm9WRzlFWlhSbFkzUXNYRzRnSUNBZ0lDQWdJQ0FnZEc5clpXNXpVMnhwWTJVc1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlJR05oZEdOb0lDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQjNZWEp1S0Z4dUlDQWdJQ0FnSUNBZ0lHQk5aWFJoVFdGemF5QXRJRVJsZEdWamRGUnZhMlZ1YzBOdmJuUnliMnhzWlhJZ2MybHVaMnhsSUdOaGJHd2dZbUZzWVc1alpTQm1aWFJqYUNCbVlXbHNaV1JnTEZ4dUlDQWdJQ0FnSUNBZ0lHVnljbTl5TEZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHTnZibk4wSUhSdmEyVnVjMWRwZEdoQ1lXeGhibU5sSUQwZ1cxMDdYRzRnSUNBZ0lDQmpiMjV6ZENCbGRtVnVkRlJ2YTJWdWMwUmxkR0ZwYkhNZ1BTQmJYVHRjYmlBZ0lDQWdJR2xtSUNoeVpYTjFiSFFwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYm05dVdtVnliMVJ2YTJWdVFXUmtjbVZ6YzJWeklEMGdUMkpxWldOMExtdGxlWE1vY21WemRXeDBLVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaGpiMjV6ZENCdWIyNWFaWEp2Vkc5clpXNUJaR1J5WlhOeklHOW1JRzV2YmxwbGNtOVViMnRsYmtGa1pISmxjM05sY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OMElIc2dZV1JrY21WemN5d2djM2x0WW05c0xDQmtaV05wYldGc2N5QjlJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZhMlZ1VEdsemRGVnpaV1JiYm05dVdtVnliMVJ2YTJWdVFXUmtjbVZ6YzEwN1hHNWNiaUFnSUNBZ0lDQWdJQ0JsZG1WdWRGUnZhMlZ1YzBSbGRHRnBiSE11Y0hWemFDaGdKSHR6ZVcxaWIyeDlJQzBnSkh0aFpHUnlaWE56ZldBcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnZEc5clpXNXpWMmwwYUVKaGJHRnVZMlV1Y0hWemFDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNCaFpHUnlaWE56TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM2x0WW05c0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWamFXMWhiSE1zWEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9kRzlyWlc1elYybDBhRUpoYkdGdVkyVXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDNSeVlXTnJUV1YwWVUxbGRISnBZM05GZG1WdWRDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkRG9nVFdWMFlVMWxkSEpwWTNORmRtVnVkRTVoYldVdVZHOXJaVzVFWlhSbFkzUmxaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhkR1ZuYjNKNU9pQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rdVYyRnNiR1YwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0dWeWRHbGxjem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjJ0bGJuTTZJR1YyWlc1MFZHOXJaVzV6UkdWMFlXbHNjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzlyWlc1ZmMzUmhibVJoY21RNklGUnZhMlZ1VTNSaGJtUmhjbVF1UlZKRE1qQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnpjMlYwWDNSNWNHVTZJRUZ6YzJWMFZIbHdaUzUwYjJ0bGJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ1lYZGhhWFFnZEdocGN5NTBiMnRsYm5ORGIyNTBjbTlzYkdWeUxtRmtaRVJsZEdWamRHVmtWRzlyWlc1ektIUnZhMlZ1YzFkcGRHaENZV3hoYm1ObExDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpXeGxZM1JsWkVGa1pISmxjM002SUdGa1pISmxjM05CWjJGcGJuTjBWMmhwWTJoVWIwUmxkR1ZqZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVdsdVNXUTZJR05vWVdsdVNXUkJaMkZwYm5OMFYyaHBZMmhVYjBSbGRHVmpkQ3hjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhOMFlYSjBJSFJ2YTJWdUlHUmxkR1ZqZEdsdmJpQndiMnhzYVc1bklIQmxjbWx2WkNCaGJtUWdZMkZzYkNCa1pYUmxZM1JPWlhkVWIydGxibk5jYmlBZ0lDb2dhVzRnWTJGelpTQnZaaUJoWkdSeVpYTnpJR05vWVc1blpTQnZjaUIxYzJWeUlITmxjM05wYjI0Z2FXNXBkR2xoYkdsNllYUnBiMjR1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCdmNIUnBiMjV6WEc0Z0lDQXFJRUJ3WVhKaGJTQnZjSFJwYjI1ekxuTmxiR1ZqZEdWa1FXUmtjbVZ6Y3lBdElIUm9aU0J6Wld4bFkzUmxaRUZrWkhKbGMzTWdZV2RoYVc1emRDQjNhR2xqYUNCMGJ5QmtaWFJsWTNRZ1ptOXlJSFJ2YTJWdUlHSmhiR0Z1WTJWelhHNGdJQ0FxSUVCd1lYSmhiU0J2Y0hScGIyNXpMbU5vWVdsdVNXUWdMU0IwYUdVZ1kyaGhhVzVKWkNCaFoyRnBibk4wSUhkb2FXTm9JSFJ2SUdSbGRHVmpkQ0JtYjNJZ2RHOXJaVzRnWW1Gc1lXNWpaWE5jYmlBZ0lDb3ZYRzRnSUhKbGMzUmhjblJVYjJ0bGJrUmxkR1ZqZEdsdmJpaDdJSE5sYkdWamRHVmtRV1JrY21WemN5d2dZMmhoYVc1SlpDQjlJRDBnZTMwcElIdGNiaUFnSUNCamIyNXpkQ0JoWkdSeVpYTnpRV2RoYVc1emRGZG9hV05vVkc5RVpYUmxZM1FnUFNCelpXeGxZM1JsWkVGa1pISmxjM01nUHo4Z2RHaHBjeTV6Wld4bFkzUmxaRUZrWkhKbGMzTTdYRzRnSUNBZ1kyOXVjM1FnWTJoaGFXNUpaRUZuWVdsdWMzUlhhR2xqYUZSdlJHVjBaV04wSUQwZ1kyaGhhVzVKWkNBL1B5QjBhR2x6TG1Ob1lXbHVTV1E3WEc0Z0lDQWdhV1lnS0NFb2RHaHBjeTVwYzBGamRHbDJaU0FtSmlCaFpHUnlaWE56UVdkaGFXNXpkRmRvYVdOb1ZHOUVaWFJsWTNRcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdVpHVjBaV04wVG1WM1ZHOXJaVzV6S0h0Y2JpQWdJQ0FnSUhObGJHVmpkR1ZrUVdSa2NtVnpjem9nWVdSa2NtVnpjMEZuWVdsdWMzUlhhR2xqYUZSdlJHVjBaV04wTEZ4dUlDQWdJQ0FnWTJoaGFXNUpaRG9nWTJoaGFXNUpaRUZuWVdsdWMzUlhhR2xqYUZSdlJHVjBaV04wTEZ4dUlDQWdJSDBwTzF4dUlDQWdJSFJvYVhNdWFXNTBaWEoyWVd3Z1BTQkVSVVpCVlV4VVgwbE9WRVZTVmtGTU8xeHVJQ0I5WEc1Y2JpQWdaMlYwUTJoaGFXNUpaRVp5YjIxT1pYUjNiM0pyVTNSdmNtVW9ibVYwZDI5eWF5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYUjNiM0pyUHk1emRHOXlaUzVuWlhSVGRHRjBaU2dwTG5CeWIzWnBaR1Z5UTI5dVptbG5MbU5vWVdsdVNXUTdYRzRnSUgxY2JseHVJQ0F2S2lCbGMyeHBiblF0WkdsellXSnNaU0JoWTJObGMzTnZjaTF3WVdseWN5QXFMMXh1SUNBdktpcGNiaUFnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjYmlBZ0lDb3ZYRzRnSUhObGRDQnBiblJsY25aaGJDaHBiblJsY25aaGJDa2dlMXh1SUNBZ0lIUm9hWE11WDJoaGJtUnNaU0FtSmlCamJHVmhja2x1ZEdWeWRtRnNLSFJvYVhNdVgyaGhibVJzWlNrN1hHNGdJQ0FnYVdZZ0tDRnBiblJsY25aaGJDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxsOW9ZVzVrYkdVZ1BTQnpaWFJKYm5SbGNuWmhiQ2dvS1NBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6TG1SbGRHVmpkRTVsZDFSdmEyVnVjeWdwTzF4dUlDQWdJSDBzSUdsdWRHVnlkbUZzS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFkSGx3WlNCN2IySnFaV04wZlZ4dUlDQWdLaTljYmlBZ2MyVjBJRzVsZEhkdmNtc29ibVYwZDI5eWF5a2dlMXh1SUNBZ0lHbG1JQ2doYm1WMGQyOXlheWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMbDl1WlhSM2IzSnJJRDBnYm1WMGQyOXlhenRjYmlBZ0lDQjBhR2x6TGw5dVpYUjNiM0pyTG5OMGIzSmxMbk4xWW5OamNtbGlaU2dvS1NBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWphR0ZwYmtsa0lDRTlQU0IwYUdsekxtZGxkRU5vWVdsdVNXUkdjbTl0VG1WMGQyOXlhMU4wYjNKbEtHNWxkSGR2Y21zcEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHTm9ZV2x1U1dRZ1BTQjBhR2x6TG1kbGRFTm9ZV2x1U1dSR2NtOXRUbVYwZDI5eWExTjBiM0psS0c1bGRIZHZjbXNwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5vWVdsdVNXUWdQU0JqYUdGcGJrbGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxjM1JoY25SVWIydGxia1JsZEdWamRHbHZiaWg3SUdOb1lXbHVTV1E2SUhSb2FYTXVZMmhoYVc1SlpDQjlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCSmJpQnpaWFIwWlhJZ2QyaGxiaUJwYzFWdWJHOWphMlZrSUdseklIVndaR0YwWldRZ2RHOGdkSEoxWlN3Z1pHVjBaV04wVG1WM1ZHOXJaVzV6SUdGdVpDQnlaWE4wWVhKMElIQnZiR3hwYm1kY2JpQWdJQ3BjYmlBZ0lDb2dRSFI1Y0dVZ2UyOWlhbVZqZEgxY2JpQWdJQ292WEc0Z0lITmxkQ0JyWlhseWFXNW5UV1Z0VTNSdmNtVW9hMlY1Y21sdVowMWxiVk4wYjNKbEtTQjdYRzRnSUNBZ2FXWWdLQ0ZyWlhseWFXNW5UV1Z0VTNSdmNtVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NWZhMlY1Y21sdVowMWxiVk4wYjNKbElEMGdhMlY1Y21sdVowMWxiVk4wYjNKbE8xeHVJQ0FnSUhSb2FYTXVYMnRsZVhKcGJtZE5aVzFUZEc5eVpTNXpkV0p6WTNKcFltVW9LSHNnYVhOVmJteHZZMnRsWkNCOUtTQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTVwYzFWdWJHOWphMlZrSUNFOVBTQnBjMVZ1Ykc5amEyVmtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhWE5WYm14dlkydGxaQ0E5SUdselZXNXNiMk5yWldRN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwYzFWdWJHOWphMlZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpYTjBZWEowVkc5clpXNUVaWFJsWTNScGIyNG9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFQjBlWEJsSUh0dlltcGxZM1I5WEc0Z0lDQXFMMXh1SUNCelpYUWdkRzlyWlc1TWFYTjBLSFJ2YTJWdVRHbHpkQ2tnZTF4dUlDQWdJR2xtSUNnaGRHOXJaVzVNYVhOMEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdVgzUnZhMlZ1VEdsemRDQTlJSFJ2YTJWdVRHbHpkRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCSmJuUmxjbTVoYkNCcGMwRmpkR2wyWlNCemRHRjBaVnh1SUNBZ0tseHVJQ0FnS2lCQWRIbHdaU0I3YjJKcVpXTjBmVnh1SUNBZ0tpOWNiaUFnWjJWMElHbHpRV04wYVhabEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWx6VDNCbGJpQW1KaUIwYUdsekxtbHpWVzVzYjJOclpXUTdYRzRnSUgxY2JpQWdMeW9nWlhOc2FXNTBMV1Z1WVdKc1pTQmhZMk5sYzNOdmNpMXdZV2x5Y3lBcUwxeHVmVnh1SWl3aWFXMXdiM0owSUVWMlpXNTBSVzFwZEhSbGNpQm1jbTl0SUNkbGRtVnVkSE1uTzF4dWFXMXdiM0owSUd4dlp5Qm1jbTl0SUNkc2IyZHNaWFpsYkNjN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JGYm1OeWVYQjBhVzl1VUhWaWJHbGpTMlY1VFdGdVlXZGxjaXhjYmlBZ1JXNWpjbmx3ZEdsdmJsQjFZbXhwWTB0bGVWQmhjbUZ0YzAxbGRHRnRZWE5yTEZ4dWZTQm1jbTl0SUNkQWJXVjBZVzFoYzJzdmJXVnpjMkZuWlMxdFlXNWhaMlZ5Snp0Y2JtbHRjRzl5ZENCN0lFdGxlWEpwYm1kRGIyNTBjbTlzYkdWeUlIMGdabkp2YlNBblFHMWxkR0Z0WVhOckwyVjBhQzFyWlhseWFXNW5MV052Ym5SeWIyeHNaWEluTzF4dWFXMXdiM0owSUh0Y2JpQWdRV0p6ZEhKaFkzUk5aWE56WVdkbFRXRnVZV2RsY2l4Y2JpQWdRV0p6ZEhKaFkzUk5aWE56WVdkbExGeHVJQ0JOWlhOellXZGxUV0Z1WVdkbGNsTjBZWFJsTEZ4dUlDQkJZbk4wY21GamRFMWxjM05oWjJWUVlYSmhiWE1zWEc0Z0lFRmljM1J5WVdOMFRXVnpjMkZuWlZCaGNtRnRjMDFsZEdGdFlYTnJMRnh1SUNCUGNtbG5hVzVoYkZKbGNYVmxjM1FzWEc1OUlHWnliMjBnSjBCdFpYUmhiV0Z6YXk5dFpYTnpZV2RsTFcxaGJtRm5aWEl2WkdsemRDOUJZbk4wY21GamRFMWxjM05oWjJWTllXNWhaMlZ5Snp0Y2JtbHRjRzl5ZENCN1hHNGdJRUpoYzJWRGIyNTBjbTlzYkdWeVZqSXNYRzRnSUZKbGMzUnlhV04wWldSRGIyNTBjbTlzYkdWeVRXVnpjMlZ1WjJWeUxGeHVmU0JtY205dElDZEFiV1YwWVcxaGMyc3ZZbUZ6WlMxamIyNTBjbTlzYkdWeUp6dGNibWx0Y0c5eWRDQjdJRkJoZEdOb0lIMGdabkp2YlNBbmFXMXRaWEluTzF4dWFXMXdiM0owSUh0Y2JpQWdRV05qWlhCMFVtVnhkV1Z6ZEN4Y2JpQWdRV1JrUVhCd2NtOTJZV3hTWlhGMVpYTjBMRnh1SUNCU1pXcGxZM1JTWlhGMVpYTjBMRnh1ZlNCbWNtOXRJQ2RBYldWMFlXMWhjMnN2WVhCd2NtOTJZV3d0WTI5dWRISnZiR3hsY2ljN1hHNXBiWEJ2Y25RZ2V5Qk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5emFHRnlaV1F2WTI5dWMzUmhiblJ6TDIxbGRHRnRaWFJ5YVdOekp6dGNibWx0Y0c5eWRDQjdJRXRsZVhKcGJtZFVlWEJsSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2YzJoaGNtVmtMMk52Ym5OMFlXNTBjeTlyWlhseWFXNW5KenRjYm1sdGNHOXlkQ0I3SUU5U1NVZEpUbDlOUlZSQlRVRlRTeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZZWEJ3Snp0Y2JseHVZMjl1YzNRZ1kyOXVkSEp2Ykd4bGNrNWhiV1VnUFNBblJXNWpjbmx3ZEdsdmJsQjFZbXhwWTB0bGVVTnZiblJ5YjJ4c1pYSW5PMXh1WTI5dWMzUWdiV1YwYUc5a1RtRnRaVWRsZEVWdVkzSjVjSFJwYjI1UWRXSnNhV05MWlhrZ1BTQW5aWFJvWDJkbGRFVnVZM0o1Y0hScGIyNVFkV0pzYVdOTFpYa25PMXh1WEc1amIyNXpkQ0J6ZEdGMFpVMWxkR0ZrWVhSaElEMGdlMXh1SUNCMWJtRndjSEp2ZG1Wa1JXNWpjbmx3ZEdsdmJsQjFZbXhwWTB0bGVVMXpaM002SUhzZ2NHVnljMmx6ZERvZ1ptRnNjMlVzSUdGdWIyNTViVzkxY3pvZ1ptRnNjMlVnZlN4Y2JpQWdkVzVoY0hCeWIzWmxaRVZ1WTNKNWNIUnBiMjVRZFdKc2FXTkxaWGxOYzJkRGIzVnVkRG9nZXlCd1pYSnphWE4wT2lCbVlXeHpaU3dnWVc1dmJubHRiM1Z6T2lCbVlXeHpaU0I5TEZ4dWZUdGNibHh1WTI5dWMzUWdaMlYwUkdWbVlYVnNkRk4wWVhSbElEMGdLQ2tnUFQ0Z0tIdGNiaUFnZFc1aGNIQnliM1psWkVWdVkzSjVjSFJwYjI1UWRXSnNhV05MWlhsTmMyZHpPaUI3ZlN4Y2JpQWdkVzVoY0hCeWIzWmxaRVZ1WTNKNWNIUnBiMjVRZFdKc2FXTkxaWGxOYzJkRGIzVnVkRG9nTUN4Y2JuMHBPMXh1WEc1bGVIQnZjblFnZEhsd1pTQkRiM0psVFdWemMyRm5aU0E5SUVGaWMzUnlZV04wVFdWemMyRm5aU0FtSUh0Y2JpQWdiV1Z6YzJGblpWQmhjbUZ0Y3pvZ1FXSnpkSEpoWTNSTlpYTnpZV2RsVUdGeVlXMXpPMXh1ZlR0Y2JseHVaWGh3YjNKMElIUjVjR1VnVTNSaGRHVk5aWE56WVdkbElEMGdVbVZ4ZFdseVpXUThYRzRnSUU5dGFYUThRV0p6ZEhKaFkzUk5aWE56WVdkbExDQW5jMlZqZFhKcGRIbFFjbTkyYVdSbGNsSmxjM0J2Ym5ObEp6NWNiajRnSmlCN1hHNGdJRzF6WjFCaGNtRnRjem9nYzNSeWFXNW5PMXh1ZlR0Y2JseHVaWGh3YjNKMElIUjVjR1VnUlc1amNubHdkR2x2YmxCMVlteHBZMHRsZVVOdmJuUnliMnhzWlhKVGRHRjBaU0E5SUh0Y2JpQWdkVzVoY0hCeWIzWmxaRVZ1WTNKNWNIUnBiMjVRZFdKc2FXTkxaWGxOYzJkek9pQlNaV052Y21ROGMzUnlhVzVuTENCVGRHRjBaVTFsYzNOaFoyVStPMXh1SUNCMWJtRndjSEp2ZG1Wa1JXNWpjbmx3ZEdsdmJsQjFZbXhwWTB0bGVVMXpaME52ZFc1ME9pQnVkVzFpWlhJN1hHNTlPMXh1WEc1bGVIQnZjblFnZEhsd1pTQkhaWFJGYm1OeWVYQjBhVzl1VUhWaWJHbGpTMlY1VTNSaGRHVWdQU0I3WEc0Z0lIUjVjR1U2SUdBa2UzUjVjR1Z2WmlCamIyNTBjbTlzYkdWeVRtRnRaWDA2WjJWMFUzUmhkR1ZnTzF4dUlDQm9ZVzVrYkdWeU9pQW9LU0E5UGlCRmJtTnllWEIwYVc5dVVIVmliR2xqUzJWNVEyOXVkSEp2Ykd4bGNsTjBZWFJsTzF4dWZUdGNibHh1Wlhod2IzSjBJSFI1Y0dVZ1JXNWpjbmx3ZEdsdmJsQjFZbXhwWTB0bGVWTjBZWFJsUTJoaGJtZGxJRDBnZTF4dUlDQjBlWEJsT2lCZ0pIdDBlWEJsYjJZZ1kyOXVkSEp2Ykd4bGNrNWhiV1Y5T25OMFlYUmxRMmhoYm1kbFlEdGNiaUFnY0dGNWJHOWhaRG9nVzBWdVkzSjVjSFJwYjI1UWRXSnNhV05MWlhsRGIyNTBjbTlzYkdWeVUzUmhkR1VzSUZCaGRHTm9XMTFkTzF4dWZUdGNibHh1Wlhod2IzSjBJSFI1Y0dVZ1JXNWpjbmx3ZEdsdmJsQjFZbXhwWTB0bGVVTnZiblJ5YjJ4c1pYSkJZM1JwYjI1eklEMGdSMlYwUlc1amNubHdkR2x2YmxCMVlteHBZMHRsZVZOMFlYUmxPMXh1WEc1bGVIQnZjblFnZEhsd1pTQkZibU55ZVhCMGFXOXVVSFZpYkdsalMyVjVRMjl1ZEhKdmJHeGxja1YyWlc1MGN5QTlYRzRnSUVWdVkzSjVjSFJwYjI1UWRXSnNhV05MWlhsVGRHRjBaVU5vWVc1blpUdGNibHh1ZEhsd1pTQkJiR3h2ZDJWa1FXTjBhVzl1Y3lBOUlFRmtaRUZ3Y0hKdmRtRnNVbVZ4ZFdWemRDQjhJRUZqWTJWd2RGSmxjWFZsYzNRZ2ZDQlNaV3BsWTNSU1pYRjFaWE4wTzF4dVhHNWxlSEJ2Y25RZ2RIbHdaU0JGYm1OeWVYQjBhVzl1VUhWaWJHbGpTMlY1UTI5dWRISnZiR3hsY2sxbGMzTmxibWRsY2lBOVhHNGdJRkpsYzNSeWFXTjBaV1JEYjI1MGNtOXNiR1Z5VFdWemMyVnVaMlZ5UEZ4dUlDQWdJSFI1Y0dWdlppQmpiMjUwY205c2JHVnlUbUZ0WlN4Y2JpQWdJQ0JGYm1OeWVYQjBhVzl1VUhWaWJHbGpTMlY1UTI5dWRISnZiR3hsY2tGamRHbHZibk1nZkNCQmJHeHZkMlZrUVdOMGFXOXVjeXhjYmlBZ0lDQkZibU55ZVhCMGFXOXVVSFZpYkdsalMyVjVRMjl1ZEhKdmJHeGxja1YyWlc1MGN5eGNiaUFnSUNCQmJHeHZkMlZrUVdOMGFXOXVjMXNuZEhsd1pTZGRMRnh1SUNBZ0lHNWxkbVZ5WEc0Z0lENDdYRzVjYm1WNGNHOXlkQ0IwZVhCbElFVnVZM0o1Y0hScGIyNVFkV0pzYVdOTFpYbERiMjUwY205c2JHVnlUM0IwYVc5dWN5QTlJSHRjYmlBZ2JXVnpjMlZ1WjJWeU9pQkZibU55ZVhCMGFXOXVVSFZpYkdsalMyVjVRMjl1ZEhKdmJHeGxjazFsYzNObGJtZGxjanRjYmlBZ2EyVjVjbWx1WjBOdmJuUnliMnhzWlhJNklFdGxlWEpwYm1kRGIyNTBjbTlzYkdWeU8xeHVJQ0JuWlhSVGRHRjBaVG9nS0NrZ1BUNGdZVzU1TzF4dUlDQnRaWFJ5YVdOelJYWmxiblE2SUNod1lYbHNiMkZrT2lCaGJua3NJRzl3ZEdsdmJuTS9PaUJoYm5rcElEMCtJSFp2YVdRN1hHNTlPMXh1WEc0dktpcGNiaUFxSUVOdmJuUnliMnhzWlhJZ1ptOXlJSEpsY1hWbGMzUnBibWNnWlc1amNubHdkR2x2YmlCd2RXSnNhV01nYTJWNUlISmxjWFZsYzNSeklISmxjWFZwY21sdVp5QjFjMlZ5SUdGd2NISnZkbUZzTGx4dUlDb3ZYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCRmJtTnllWEIwYVc5dVVIVmliR2xqUzJWNVEyOXVkSEp2Ykd4bGNpQmxlSFJsYm1SeklFSmhjMlZEYjI1MGNtOXNiR1Z5VmpJOFhHNGdJSFI1Y0dWdlppQmpiMjUwY205c2JHVnlUbUZ0WlN4Y2JpQWdSVzVqY25sd2RHbHZibEIxWW14cFkwdGxlVU52Ym5SeWIyeHNaWEpUZEdGMFpTeGNiaUFnUlc1amNubHdkR2x2YmxCMVlteHBZMHRsZVVOdmJuUnliMnhzWlhKTlpYTnpaVzVuWlhKY2JqNGdlMXh1SUNCb2RXSTZJRVYyWlc1MFJXMXBkSFJsY2p0Y2JseHVJQ0J3Y21sMllYUmxJRjlyWlhseWFXNW5RMjl1ZEhKdmJHeGxjam9nUzJWNWNtbHVaME52Ym5SeWIyeHNaWEk3WEc1Y2JpQWdjSEpwZG1GMFpTQmZaMlYwVTNSaGRHVTZJQ2dwSUQwK0lHRnVlVHRjYmx4dUlDQndjbWwyWVhSbElGOWxibU55ZVhCMGFXOXVVSFZpYkdsalMyVjVUV0Z1WVdkbGNqb2dSVzVqY25sd2RHbHZibEIxWW14cFkwdGxlVTFoYm1GblpYSTdYRzVjYmlBZ2NISnBkbUYwWlNCZmJXVjBjbWxqYzBWMlpXNTBPaUFvY0dGNWJHOWhaRG9nWVc1NUxDQnZjSFJwYjI1elB6b2dZVzU1S1NBOVBpQjJiMmxrTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJEYjI1emRISjFZM1FnWVNCRmJtTnllWEIwYVc5dVVIVmliR2xqUzJWNUlHTnZiblJ5YjJ4c1pYSXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0J2Y0hScGIyNXpJQzBnVkdobElHTnZiblJ5YjJ4c1pYSWdiM0IwYVc5dWN5NWNiaUFnSUNvZ1FIQmhjbUZ0SUc5d2RHbHZibk11YldWemMyVnVaMlZ5SUMwZ1ZHaGxJSEpsYzNSeWFXTjBaV1FnWTI5dWRISnZiR3hsY2lCdFpYTnpaVzVuWlhJZ1ptOXlJSFJvWlNCRmJtTnllWEIwYVc5dVVIVmliR2xqUzJWNUlHTnZiblJ5YjJ4c1pYSXVYRzRnSUNBcUlFQndZWEpoYlNCdmNIUnBiMjV6TG10bGVYSnBibWREYjI1MGNtOXNiR1Z5SUMwZ1FXNGdhVzV6ZEdGdVkyVWdiMllnWVNCclpYbHlhVzVuSUdOdmJuUnliMnhzWlhJZ2RYTmxaQ0IwYnlCbGVIUnlZV04wSUhSb1pTQmxibU55ZVhCMGFXOXVJSEIxWW14cFl5QnJaWGt1WEc0Z0lDQXFJRUJ3WVhKaGJTQnZjSFJwYjI1ekxtZGxkRk4wWVhSbElDMGdRMkZzYkdKaFkyc2dkRzhnY21WMGNtbGxkbVVnWVd4c0lIVnpaWElnYzNSaGRHVXVYRzRnSUNBcUlFQndZWEpoYlNCdmNIUnBiMjV6TG0xbGRISnBZM05GZG1WdWRDQXRJRUVnWm5WdVkzUnBiMjRnWm05eUlHVnRhWFIwYVc1bklHRWdiV1YwY21saklHVjJaVzUwTGx4dUlDQWdLaTljYmlBZ1kyOXVjM1J5ZFdOMGIzSW9lMXh1SUNBZ0lHMWxjM05sYm1kbGNpeGNiaUFnSUNCclpYbHlhVzVuUTI5dWRISnZiR3hsY2l4Y2JpQWdJQ0JuWlhSVGRHRjBaU3hjYmlBZ0lDQnRaWFJ5YVdOelJYWmxiblFzWEc0Z0lIMDZJRVZ1WTNKNWNIUnBiMjVRZFdKc2FXTkxaWGxEYjI1MGNtOXNiR1Z5VDNCMGFXOXVjeWtnZTF4dUlDQWdJSE4xY0dWeUtIdGNiaUFnSUNBZ0lHNWhiV1U2SUdOdmJuUnliMnhzWlhKT1lXMWxMRnh1SUNBZ0lDQWdiV1YwWVdSaGRHRTZJSE4wWVhSbFRXVjBZV1JoZEdFc1hHNGdJQ0FnSUNCdFpYTnpaVzVuWlhJc1hHNGdJQ0FnSUNCemRHRjBaVG9nWjJWMFJHVm1ZWFZzZEZOMFlYUmxLQ2tzWEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0IwYUdsekxsOXJaWGx5YVc1blEyOXVkSEp2Ykd4bGNpQTlJR3RsZVhKcGJtZERiMjUwY205c2JHVnlPMXh1SUNBZ0lIUm9hWE11WDJkbGRGTjBZWFJsSUQwZ1oyVjBVM1JoZEdVN1hHNGdJQ0FnZEdocGN5NWZiV1YwY21samMwVjJaVzUwSUQwZ2JXVjBjbWxqYzBWMlpXNTBPMXh1WEc0Z0lDQWdkR2hwY3k1b2RXSWdQU0J1WlhjZ1JYWmxiblJGYldsMGRHVnlLQ2s3WEc0Z0lDQWdkR2hwY3k1ZlpXNWpjbmx3ZEdsdmJsQjFZbXhwWTB0bGVVMWhibUZuWlhJZ1BTQnVaWGNnUlc1amNubHdkR2x2YmxCMVlteHBZMHRsZVUxaGJtRm5aWElvWEc0Z0lDQWdJQ0IxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0IxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0IxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0JiSjNKbFkyVnBkbVZrSjEwc1hHNGdJQ0FnS1R0Y2JseHVJQ0FnSUhSb2FYTXVYMlZ1WTNKNWNIUnBiMjVRZFdKc2FXTkxaWGxOWVc1aFoyVnlMbWgxWWk1dmJpZ25kWEJrWVhSbFFtRmtaMlVuTENBb0tTQTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxtaDFZaTVsYldsMEtDZDFjR1JoZEdWQ1lXUm5aU2NwTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnZEdocGN5NWZaVzVqY25sd2RHbHZibEIxWW14cFkwdGxlVTFoYm1GblpYSXVhSFZpTG05dUtGeHVJQ0FnSUNBZ0ozVnVZWEJ3Y205MlpXUk5aWE56WVdkbEp5eGNiaUFnSUNBZ0lDaHRjMmRRWVhKaGJYTTZJRUZpYzNSeVlXTjBUV1Z6YzJGblpWQmhjbUZ0YzAxbGRHRnRZWE5yS1NBOVBpQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxjWFZsYzNSQmNIQnliM1poYkNodGMyZFFZWEpoYlhNc0lHMWxkR2h2WkU1aGJXVkhaWFJGYm1OeWVYQjBhVzl1VUhWaWJHbGpTMlY1S1R0Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnS1R0Y2JseHVJQ0FnSUhSb2FYTXVYM04xWW5OamNtbGlaVlJ2VFdWemMyRm5aVk4wWVhSbEtGeHVJQ0FnSUNBZ2RHaHBjeTVmWlc1amNubHdkR2x2YmxCMVlteHBZMHRsZVUxaGJtRm5aWElzWEc0Z0lDQWdJQ0FvYzNSaGRHVXNJRzVsZDAxbGMzTmhaMlZ6TENCdFpYTnpZV2RsUTI5MWJuUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2MzUmhkR1V1ZFc1aGNIQnliM1psWkVWdVkzSjVjSFJwYjI1UWRXSnNhV05MWlhsTmMyZHpJRDBnYm1WM1RXVnpjMkZuWlhNN1hHNGdJQ0FnSUNBZ0lITjBZWFJsTG5WdVlYQndjbTkyWldSRmJtTnllWEIwYVc5dVVIVmliR2xqUzJWNVRYTm5RMjkxYm5RZ1BTQnRaWE56WVdkbFEyOTFiblE3WEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FTQm5aWFIwWlhJZ1ptOXlJSFJvWlNCdWRXMWlaWElnYjJZZ0ozVnVZWEJ3Y205MlpXUW5JRTFsYzNOaFoyVnpJR2x1SUhSb2FYTXViV1Z6YzJGblpYTmNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnlibk1nVkdobElHNTFiV0psY2lCdlppQW5kVzVoY0hCeWIzWmxaQ2NnVFdWemMyRm5aWE1nYVc0Z2RHaHBjeTV0WlhOellXZGxjMXh1SUNBZ0tpOWNiaUFnWjJWMElIVnVZWEJ3Y205MlpXUk5jMmREYjNWdWRDZ3BPaUJ1ZFcxaVpYSWdlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlsYm1OeWVYQjBhVzl1VUhWaWJHbGpTMlY1VFdGdVlXZGxjaTVuWlhSVmJtRndjSEp2ZG1Wa1RXVnpjMkZuWlhORGIzVnVkQ2dwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxjMlYwSUhSb1pTQmpiMjUwY205c2JHVnlJSE4wWVhSbElIUnZJSFJvWlNCcGJtbDBhV0ZzSUhOMFlYUmxMbHh1SUNBZ0tpOWNiaUFnY21WelpYUlRkR0YwWlNncElIdGNiaUFnSUNCMGFHbHpMblZ3WkdGMFpTZ29LU0E5UGlCblpYUkVaV1poZFd4MFUzUmhkR1VvS1NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMkZzYkdWa0lIZG9aVzRnWVNCRVlYQndJSFZ6WlhNZ2RHaGxJR1YwYUY5blpYUkZibU55ZVhCMGFXOXVVSFZpYkdsalMyVjVJRzFsZEdodlpDd2dkRzhnY21WeGRXVnpkQ0IxYzJWeUlHRndjSEp2ZG1Gc0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdZV1JrY21WemN5QXRJRlJvWlNCaFpHUnlaWE56SUdaeWIyMGdkR2hsSUdWdVkzSjVjSFJwYjI0Z2NIVmliR2xqSUd0bGVTQjNhV3hzSUdKbElHVjRkSEpoWTNSbFpDNWNiaUFnSUNvZ1FIQmhjbUZ0SUZ0eVpYRmRJQzBnVkdobElHOXlhV2RwYm1Gc0lISmxjWFZsYzNRc0lHTnZiblJoYVc1cGJtY2dkR2hsSUc5eWFXZHBiaTVjYmlBZ0lDb3ZYRzRnSUdGemVXNWpJRzVsZDFKbGNYVmxjM1JGYm1OeWVYQjBhVzl1VUhWaWJHbGpTMlY1S0Z4dUlDQWdJR0ZrWkhKbGMzTTZJSE4wY21sdVp5eGNiaUFnSUNCeVpYRTZJRTl5YVdkcGJtRnNVbVZ4ZFdWemRDeGNiaUFnS1RvZ1VISnZiV2x6WlR4emRISnBibWMrSUh0Y2JpQWdJQ0JqYjI1emRDQnJaWGx5YVc1bklEMGdZWGRoYVhRZ2RHaHBjeTVmYTJWNWNtbHVaME52Ym5SeWIyeHNaWEl1WjJWMFMyVjVjbWx1WjBadmNrRmpZMjkxYm5Rb1lXUmtjbVZ6Y3lrN1hHNWNiaUFnSUNCemQybDBZMmdnS0d0bGVYSnBibWN1ZEhsd1pTa2dlMXh1SUNBZ0lDQWdZMkZ6WlNCTFpYbHlhVzVuVkhsd1pTNXNaV1JuWlhJNklIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2hmTENCeVpXcGxZM1FwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dSWEp5YjNJb0oweGxaR2RsY2lCa2IyVnpJRzV2ZENCemRYQndiM0owSUdWMGFGOW5aWFJGYm1OeWVYQjBhVzl1VUhWaWJHbGpTMlY1TGljcExGeHVJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQmpZWE5sSUV0bGVYSnBibWRVZVhCbExuUnlaWHB2Y2pvZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LRjhzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QkZjbkp2Y2lnblZISmxlbTl5SUdSdlpYTWdibTkwSUhOMWNIQnZjblFnWlhSb1gyZGxkRVZ1WTNKNWNIUnBiMjVRZFdKc2FXTkxaWGt1Snlrc1hHNGdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHTmhjMlVnUzJWNWNtbHVaMVI1Y0dVdWJHRjBkR2xqWlRvZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LRjhzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QkZjbkp2Y2lnblRHRjBkR2xqWlNCa2IyVnpJRzV2ZENCemRYQndiM0owSUdWMGFGOW5aWFJGYm1OeWVYQjBhVzl1VUhWaWJHbGpTMlY1TGljcExGeHVJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQmpZWE5sSUV0bGVYSnBibWRVZVhCbExuRnlPaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYW1WamRDaGNiaUFnSUNBZ0lDQWdJQ0J1WlhjZ1JYSnliM0lvSjFGU0lHaGhjbVIzWVhKbElHUnZaWE1nYm05MElITjFjSEJ2Y25RZ1pYUm9YMmRsZEVWdVkzSjVjSFJwYjI1UWRXSnNhV05MWlhrdUp5a3NYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdSbFptRjFiSFE2SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMlZ1WTNKNWNIUnBiMjVRZFdKc2FXTkxaWGxOWVc1aFoyVnlMbUZrWkZWdVlYQndjbTkyWldSTlpYTnpZV2RsUVhONWJtTW9YRzRnSUNBZ0lDQWdJQ0FnZXlCbWNtOXRPaUJoWkdSeVpYTnpJSDBzWEc0Z0lDQWdJQ0FnSUNBZ2NtVnhMRnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVGFXZHVhV1pwWlhNZ1lTQjFjMlZ5SjNNZ1lYQndjbTkyWVd3Z2RHOGdjbVZqWldsMmFXNW5JR1Z1WTNKNWNIUnBiMjRnY0hWaWJHbGpJR3RsZVNCcGJpQnhkV1YxWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElHMXpaMUJoY21GdGN5QXRJRlJvWlNCd1lYSmhiWE1nYjJZZ2RHaGxJRzFsYzNOaFoyVWdkRzhnY21WalpXbDJaU0FtSUhKbGRIVnliaUIwYnlCMGFHVWdSR0Z3Y0M1Y2JpQWdJQ29nUUhKbGRIVnlibk1nUVNCbWRXeHNJSE4wWVhSbElIVndaR0YwWlM1Y2JpQWdJQ292WEc0Z0lHRnplVzVqSUdWdVkzSjVjSFJwYjI1UWRXSnNhV05MWlhrb2JYTm5VR0Z5WVcxek9pQkZibU55ZVhCMGFXOXVVSFZpYkdsalMyVjVVR0Z5WVcxelRXVjBZVzFoYzJzcElIdGNiaUFnSUNCc2IyY3VhVzVtYnlnblRXVjBZVTFoYzJ0RGIyNTBjbTlzYkdWeUlDMGdaVzVqY25sd2RHbHZibEIxWW14cFkwdGxlU2NwTzF4dUlDQWdJR052Ym5OMElHMWxjM05oWjJWSlpDQTlJRzF6WjFCaGNtRnRjeTV0WlhSaGJXRnphMGxrSUdGeklITjBjbWx1Wnp0Y2JpQWdJQ0F2THlCelpYUnpJSFJvWlNCemRHRjBkWE1nYjNBZ2RHaGxJRzFsYzNOaFoyVWdkRzhnSjJGd2NISnZkbVZrSjF4dUlDQWdJQzh2SUdGdVpDQnlaVzF2ZG1WeklIUm9aU0J0WlhSaGJXRnphMGxrSUdadmNpQmtaV055ZVhCMGFXOXVYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR052Ym5OMElHTnNaV0Z1VFdWemMyRm5aVkJoY21GdGN5QTlYRzRnSUNBZ0lDQWdJR0YzWVdsMElIUm9hWE11WDJWdVkzSjVjSFJwYjI1UWRXSnNhV05MWlhsTllXNWhaMlZ5TG1Gd2NISnZkbVZOWlhOellXZGxLRzF6WjFCaGNtRnRjeWs3WEc1Y2JpQWdJQ0FnSUM4dklFVnVZM0o1Y0hScGIyNVFkV0pzYVdOTFpYa2diV1Z6YzJGblpWeHVJQ0FnSUNBZ1kyOXVjM1FnY0hWaWJHbGpTMlY1SUQwZ1lYZGhhWFFnZEdocGN5NWZhMlY1Y21sdVowTnZiblJ5YjJ4c1pYSXVaMlYwUlc1amNubHdkR2x2YmxCMVlteHBZMHRsZVNoY2JpQWdJQ0FnSUNBZ1kyeGxZVzVOWlhOellXZGxVR0Z5WVcxekxtWnliMjBzWEc0Z0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBdkx5QjBaV3hzY3lCMGFHVWdiR2x6ZEdWdVpYSWdkR2hoZENCMGFHVWdiV1Z6YzJGblpTQm9ZWE1nWW1WbGJpQndjbTlqWlhOelpXUmNiaUFnSUNBZ0lDOHZJR0Z1WkNCallXNGdZbVVnY21WMGRYSnVaV1FnZEc4Z2RHaGxJR1JoY0hCY2JpQWdJQ0FnSUhSb2FYTXVYMlZ1WTNKNWNIUnBiMjVRZFdKc2FXTkxaWGxOWVc1aFoyVnlMbk5sZEUxbGMzTmhaMlZUZEdGMGRYTkJibVJTWlhOMWJIUW9YRzRnSUNBZ0lDQWdJRzFsYzNOaFoyVkpaQ3hjYmlBZ0lDQWdJQ0FnY0hWaWJHbGpTMlY1TEZ4dUlDQWdJQ0FnSUNBbmNtVmpaV2wyWldRbkxGeHVJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdkR2hwY3k1ZllXTmpaWEIwUVhCd2NtOTJZV3dvYldWemMyRm5aVWxrS1R0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmRsZEZOMFlYUmxLQ2s3WEc0Z0lDQWdmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lHeHZaeTVwYm1adktGeHVJQ0FnSUNBZ0lDQW5UV1YwWVUxaGMydERiMjUwY205c2JHVnlJQzBnWlhSb1gyZGxkRVZ1WTNKNWNIUnBiMjVRZFdKc2FXTkxaWGtnWm1GcGJHVmtMaWNzWEc0Z0lDQWdJQ0FnSUdWeWNtOXlMRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSFJvYVhNdVgyTmhibU5sYkVGaWMzUnlZV04wVFdWemMyRm5aU2gwYUdsekxsOWxibU55ZVhCMGFXOXVVSFZpYkdsalMyVjVUV0Z1WVdkbGNpd2diV1Z6YzJGblpVbGtLVHRjYmlBZ0lDQWdJSFJvY205M0lHVnljbTl5TzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVmMyVmtJSFJ2SUdOaGJtTmxiQ0JoSUcxbGMzTmhaMlVnYzNWaWJXbDBkR1ZrSUhacFlTQmxkR2hmWjJWMFJXNWpjbmx3ZEdsdmJsQjFZbXhwWTB0bGVTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJRzF6WjBsa0lDMGdWR2hsSUdsa0lHOW1JSFJvWlNCdFpYTnpZV2RsSUhSdklHTmhibU5sYkM1Y2JpQWdJQ292WEc0Z0lHTmhibU5sYkVWdVkzSjVjSFJwYjI1UWRXSnNhV05MWlhrb2JYTm5TV1E2SUhOMGNtbHVaeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5allXNWpaV3hCWW5OMGNtRmpkRTFsYzNOaFoyVW9kR2hwY3k1ZlpXNWpjbmx3ZEdsdmJsQjFZbXhwWTB0bGVVMWhibUZuWlhJc0lHMXpaMGxrS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaV3BsWTNRZ1lXeHNJSFZ1WVhCd2NtOTJaV1FnYldWemMyRm5aWE1nYjJZZ1lXNTVJSFI1Y0dVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQnlaV0Z6YjI0Z0xTQkJJRzFsYzNOaFoyVWdkRzhnYVc1a2FXTmhkR1VnZDJoNUxseHVJQ0FnS2k5Y2JpQWdjbVZxWldOMFZXNWhjSEJ5YjNabFpDaHlaV0Z6YjI0L09pQnpkSEpwYm1jcElIdGNiaUFnSUNCUFltcGxZM1F1YTJWNWN5aGNiaUFnSUNBZ0lIUm9hWE11WDJWdVkzSjVjSFJwYjI1UWRXSnNhV05MWlhsTllXNWhaMlZ5TG1kbGRGVnVZWEJ3Y205MlpXUk5aWE56WVdkbGN5Z3BMRnh1SUNBZ0lDa3VabTl5UldGamFDZ29iV1Z6YzJGblpVbGtLU0E5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbDlqWVc1alpXeEJZbk4wY21GamRFMWxjM05oWjJVb1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJWdVkzSjVjSFJwYjI1UWRXSnNhV05MWlhsTllXNWhaMlZ5TEZ4dUlDQWdJQ0FnSUNCdFpYTnpZV2RsU1dRc1hHNGdJQ0FnSUNBZ0lISmxZWE52Yml4Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMnhsWVhKeklHRnNiQ0IxYm1Gd2NISnZkbVZrSUcxbGMzTmhaMlZ6SUdaeWIyMGdiV1Z0YjNKNUxseHVJQ0FnS2k5Y2JpQWdZMnhsWVhKVmJtRndjSEp2ZG1Wa0tDa2dlMXh1SUNBZ0lIUm9hWE11WDJWdVkzSjVjSFJwYjI1UWRXSnNhV05MWlhsTllXNWhaMlZ5TG5Wd1pHRjBaU2g3WEc0Z0lDQWdJQ0IxYm1Gd2NISnZkbVZrVFdWemMyRm5aWE02SUh0OUxGeHVJQ0FnSUNBZ2RXNWhjSEJ5YjNabFpFMWxjM05oWjJWelEyOTFiblE2SURBc1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQndjbWwyWVhSbElGOWpZVzVqWld4QlluTjBjbUZqZEUxbGMzTmhaMlVvWEc0Z0lDQWdiV1Z6YzJGblpVMWhibUZuWlhJNklFRmljM1J5WVdOMFRXVnpjMkZuWlUxaGJtRm5aWEk4WEc0Z0lDQWdJQ0JCWW5OMGNtRmpkRTFsYzNOaFoyVXNYRzRnSUNBZ0lDQkJZbk4wY21GamRFMWxjM05oWjJWUVlYSmhiWE1zWEc0Z0lDQWdJQ0JCWW5OMGNtRmpkRTFsYzNOaFoyVlFZWEpoYlhOTlpYUmhiV0Z6YTF4dUlDQWdJRDRzWEc0Z0lDQWdiV1Z6YzJGblpVbGtPaUJ6ZEhKcGJtY3NYRzRnSUNBZ2NtVmhjMjl1UHpvZ2MzUnlhVzVuTEZ4dUlDQXBJSHRjYmlBZ0lDQnBaaUFvY21WaGMyOXVLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOXRaWFJ5YVdOelJYWmxiblFvZTF4dUlDQWdJQ0FnSUNCbGRtVnVkRG9nY21WaGMyOXVMRnh1SUNBZ0lDQWdJQ0JqWVhSbFoyOXllVG9nVFdWMFlVMWxkSEpwWTNORmRtVnVkRU5oZEdWbmIzSjVMazFsYzNOaFoyVnpMRnh1SUNBZ0lDQWdJQ0J3Y205d1pYSjBhV1Z6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdZV04wYVc5dU9pQW5SVzVqY25sd2RHbHZiaUJ3ZFdKc2FXTWdhMlY1SUZKbGNYVmxjM1FuTEZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JXVnpjMkZuWlUxaGJtRm5aWEl1Y21WcVpXTjBUV1Z6YzJGblpTaHRaWE56WVdkbFNXUXBPMXh1SUNBZ0lIUm9hWE11WDNKbGFtVmpkRUZ3Y0hKdmRtRnNLRzFsYzNOaFoyVkpaQ2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZloyVjBVM1JoZEdVb0tUdGNiaUFnZlZ4dVhHNGdJSEJ5YVhaaGRHVWdYM04xWW5OamNtbGlaVlJ2VFdWemMyRm5aVk4wWVhSbEtGeHVJQ0FnSUcxbGMzTmhaMlZOWVc1aFoyVnlPaUJCWW5OMGNtRmpkRTFsYzNOaFoyVk5ZVzVoWjJWeVBGeHVJQ0FnSUNBZ1FXSnpkSEpoWTNSTlpYTnpZV2RsTEZ4dUlDQWdJQ0FnUVdKemRISmhZM1JOWlhOellXZGxVR0Z5WVcxekxGeHVJQ0FnSUNBZ1FXSnpkSEpoWTNSTlpYTnpZV2RsVUdGeVlXMXpUV1YwWVcxaGMydGNiaUFnSUNBK0xGeHVJQ0FnSUhWd1pHRjBaVk4wWVhSbE9pQW9YRzRnSUNBZ0lDQnpkR0YwWlRvZ1JXNWpjbmx3ZEdsdmJsQjFZbXhwWTB0bGVVTnZiblJ5YjJ4c1pYSlRkR0YwWlN4Y2JpQWdJQ0FnSUc1bGQwMWxjM05oWjJWek9pQlNaV052Y21ROGMzUnlhVzVuTENCVGRHRjBaVTFsYzNOaFoyVStMRnh1SUNBZ0lDQWdiV1Z6YzJGblpVTnZkVzUwT2lCdWRXMWlaWElzWEc0Z0lDQWdLU0E5UGlCMmIybGtMRnh1SUNBcElIdGNiaUFnSUNCdFpYTnpZV2RsVFdGdVlXZGxjaTV6ZFdKelkzSnBZbVVvS0hOMFlYUmxPaUJOWlhOellXZGxUV0Z1WVdkbGNsTjBZWFJsUEVGaWMzUnlZV04wVFdWemMyRm5aVDRwSUQwK0lIdGNiaUFnSUNBZ0lHTnZibk4wSUc1bGQwMWxjM05oWjJWeklEMGdkR2hwY3k1ZmJXbG5jbUYwWlUxbGMzTmhaMlZ6S0Z4dUlDQWdJQ0FnSUNCemRHRjBaUzUxYm1Gd2NISnZkbVZrVFdWemMyRm5aWE1nWVhNZ1lXNTVMRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsS0Noa2NtRm1kRk4wWVhSbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhWd1pHRjBaVk4wWVhSbEtHUnlZV1owVTNSaGRHVXNJRzVsZDAxbGMzTmhaMlZ6TENCemRHRjBaUzUxYm1Gd2NISnZkbVZrVFdWemMyRm5aWE5EYjNWdWRDazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUhCeWFYWmhkR1VnWDIxcFozSmhkR1ZOWlhOellXZGxjeWhjYmlBZ0lDQmpiM0psVFdWemMyRm5aWE02SUZKbFkyOXlaRHh6ZEhKcGJtY3NJRU52Y21WTlpYTnpZV2RsUGl4Y2JpQWdLVG9nVW1WamIzSmtQSE4wY21sdVp5d2dVM1JoZEdWTlpYTnpZV2RsUGlCN1hHNGdJQ0FnWTI5dWMzUWdjM1JoZEdWTlpYTnpZV2RsY3pvZ1VtVmpiM0prUEhOMGNtbHVaeXdnVTNSaGRHVk5aWE56WVdkbFBpQTlJSHQ5TzF4dVhHNGdJQ0FnWm05eUlDaGpiMjV6ZENCdFpYTnpZV2RsU1dRZ2IyWWdUMkpxWldOMExtdGxlWE1vWTI5eVpVMWxjM05oWjJWektTa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ1kyOXlaVTFsYzNOaFoyVWdQU0JqYjNKbFRXVnpjMkZuWlhOYmJXVnpjMkZuWlVsa1hUdGNiaUFnSUNBZ0lHTnZibk4wSUhOMFlYUmxUV1Z6YzJGblpTQTlJSFJvYVhNdVgyMXBaM0poZEdWTlpYTnpZV2RsS0dOdmNtVk5aWE56WVdkbEtUdGNiaUFnSUNBZ0lITjBZWFJsVFdWemMyRm5aWE5iYldWemMyRm5aVWxrWFNBOUlITjBZWFJsVFdWemMyRm5aVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2MzUmhkR1ZOWlhOellXZGxjenRjYmlBZ2ZWeHVYRzRnSUhCeWFYWmhkR1VnWDIxcFozSmhkR1ZOWlhOellXZGxLR052Y21WTlpYTnpZV2RsT2lCRGIzSmxUV1Z6YzJGblpTazZJRk4wWVhSbFRXVnpjMkZuWlNCN1hHNGdJQ0FnWTI5dWMzUWdleUJ0WlhOellXZGxVR0Z5WVcxekxDQXVMaTVqYjNKbFRXVnpjMkZuWlVSaGRHRWdmU0E5SUdOdmNtVk5aWE56WVdkbE8xeHVYRzRnSUNBZ0x5OGdRMjl5WlNCdFpYTnpZV2RsSUcxaGJtRm5aWEp6SUhWelpTQnRaWE56WVdkbFVHRnlZVzF6SUdKMWRDQm1jbTl1ZEdWdVpDQjFjMlZ6SUcxeloxQmhjbUZ0Y3lCM2FYUm9JR3h2ZEhNZ2IyWWdjbVZtWlhKbGJtTmxjMXh1SUNBZ0lHTnZibk4wSUhOMFlYUmxUV1Z6YzJGblpTQTlJSHRjYmlBZ0lDQWdJQzR1TG1OdmNtVk5aWE56WVdkbFJHRjBZU3hjYmlBZ0lDQWdJSEpoZDFOcFp6b2dZMjl5WlUxbGMzTmhaMlV1Y21GM1UybG5JR0Z6SUhOMGNtbHVaeXhjYmlBZ0lDQWdJRzF6WjFCaGNtRnRjem9nYldWemMyRm5aVkJoY21GdGN5NW1jbTl0TEZ4dUlDQWdJQ0FnYjNKcFoybHVPaUJ0WlhOellXZGxVR0Z5WVcxekxtOXlhV2RwYml4Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnY21WMGRYSnVJSE4wWVhSbFRXVnpjMkZuWlR0Y2JpQWdmVnh1WEc0Z0lIQnlhWFpoZEdVZ1gzSmxjWFZsYzNSQmNIQnliM1poYkNoY2JpQWdJQ0J0YzJkUVlYSmhiWE02SUVGaWMzUnlZV04wVFdWemMyRm5aVkJoY21GdGMwMWxkR0Z0WVhOckxGeHVJQ0FnSUhSNWNHVTZJSE4wY21sdVp5eGNiaUFnS1NCN1hHNGdJQ0FnWTI5dWMzUWdhV1FnUFNCdGMyZFFZWEpoYlhNdWJXVjBZVzFoYzJ0SlpDQmhjeUJ6ZEhKcGJtYzdYRzRnSUNBZ1kyOXVjM1FnYjNKcFoybHVJRDBnYlhOblVHRnlZVzF6TG05eWFXZHBiaUI4ZkNCUFVrbEhTVTVmVFVWVVFVMUJVMHM3WEc1Y2JpQWdJQ0IwYUdsekxtMWxjM05oWjJsdVoxTjVjM1JsYlZ4dUlDQWdJQ0FnTG1OaGJHd29YRzRnSUNBZ0lDQWdJQ2RCY0hCeWIzWmhiRU52Ym5SeWIyeHNaWEk2WVdSa1VtVnhkV1Z6ZENjc1hHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0JwWkN4Y2JpQWdJQ0FnSUNBZ0lDQnZjbWxuYVc0c1hHNGdJQ0FnSUNBZ0lDQWdkSGx3WlN4Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUNsY2JpQWdJQ0FnSUM1allYUmphQ2dvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQzh2SUVsdWRHVnVkR2x2Ym1Gc2JIa2dhV2R1YjNKbFpDQmhjeUJ3Y205dGFYTmxJRzV2ZENCamRYSnlaVzUwYkhrZ2RYTmxaRnh1SUNBZ0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCd2NtbDJZWFJsSUY5aFkyTmxjSFJCY0hCeWIzWmhiQ2h0WlhOellXZGxTV1E2SUhOMGNtbHVaeWtnZTF4dUlDQWdJSFJvYVhNdWJXVnpjMkZuYVc1blUzbHpkR1Z0TG1OaGJHd29KMEZ3Y0hKdmRtRnNRMjl1ZEhKdmJHeGxjanBoWTJObGNIUlNaWEYxWlhOMEp5d2diV1Z6YzJGblpVbGtLVHRjYmlBZ2ZWeHVYRzRnSUhCeWFYWmhkR1VnWDNKbGFtVmpkRUZ3Y0hKdmRtRnNLRzFsYzNOaFoyVkpaRG9nYzNSeWFXNW5LU0I3WEc0Z0lDQWdkR2hwY3k1dFpYTnpZV2RwYm1kVGVYTjBaVzB1WTJGc2JDaGNiaUFnSUNBZ0lDZEJjSEJ5YjNaaGJFTnZiblJ5YjJ4c1pYSTZjbVZxWldOMFVtVnhkV1Z6ZENjc1hHNGdJQ0FnSUNCdFpYTnpZV2RsU1dRc1hHNGdJQ0FnSUNBblEyRnVZMlZzSnl4Y2JpQWdJQ0FwTzF4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ2V5QlhaV0l6VUhKdmRtbGtaWElnZlNCbWNtOXRJQ2RBWlhSb1pYSnpjSEp2YW1WamRDOXdjbTkyYVdSbGNuTW5PMXh1YVcxd2IzSjBJR1Z1YzA1bGRIZHZjbXROWVhBZ1puSnZiU0FuWlhSb1pYSmxkVzB0Wlc1ekxXNWxkSGR2Y21zdGJXRndKenRjYm1sdGNHOXlkQ0I3SUU1RlZGZFBVa3RmU1VSZlZFOWZSVlJJUlZKVFgwNUZWRmRQVWt0ZlRrRk5SVjlOUVZBZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwyNWxkSGR2Y21zbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCRmJuTWdlMXh1SUNCemRHRjBhV01nWjJWMFRtVjBkMjl5YTBWdWMxTjFjSEJ2Y25Rb2JtVjBkMjl5YXlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJDYjI5c1pXRnVLR1Z1YzA1bGRIZHZjbXROWVhCYmJtVjBkMjl5YTEwcE8xeHVJQ0I5WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvZXlCdVpYUjNiM0pyTENCd2NtOTJhV1JsY2lCOUlEMGdlMzBwSUh0Y2JpQWdJQ0JqYjI1emRDQnVaWFIzYjNKclRtRnRaU0E5SUU1RlZGZFBVa3RmU1VSZlZFOWZSVlJJUlZKVFgwNUZWRmRQVWt0ZlRrRk5SVjlOUVZCYmJtVjBkMjl5YTEwN1hHNGdJQ0FnWTI5dWMzUWdaVzV6UVdSa2NtVnpjeUE5SUdWdWMwNWxkSGR2Y210TllYQmJibVYwZDI5eWExMDdYRzRnSUNBZ1kyOXVjM1FnWlhSb1VISnZkbWxrWlhJZ1BTQnVaWGNnVjJWaU0xQnliM1pwWkdWeUtIQnliM1pwWkdWeUxDQjdYRzRnSUNBZ0lDQmphR0ZwYmtsa09pQndZWEp6WlVsdWRDaHVaWFIzYjNKckxDQXhNQ2tzWEc0Z0lDQWdJQ0J1WVcxbE9pQnVaWFIzYjNKclRtRnRaU3hjYmlBZ0lDQWdJR1Z1YzBGa1pISmxjM01zWEc0Z0lDQWdmU2s3WEc0Z0lDQWdkR2hwY3k1ZlpYUm9VSEp2ZG1sa1pYSWdQU0JsZEdoUWNtOTJhV1JsY2p0Y2JpQWdmVnh1WEc0Z0lHeHZiMnQxY0NobGJuTk9ZVzFsS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyVjBhRkJ5YjNacFpHVnlMbkpsYzI5c2RtVk9ZVzFsS0dWdWMwNWhiV1VwTzF4dUlDQjlYRzVjYmlBZ2NtVjJaWEp6WlNoaFpHUnlaWE56S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyVjBhRkJ5YjNacFpHVnlMbXh2YjJ0MWNFRmtaSEpsYzNNb1lXUmtjbVZ6Y3lrN1hHNGdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQndkVzU1WTI5a1pTQm1jbTl0SUNkd2RXNTVZMjlrWlM5d2RXNTVZMjlrWlNjN1hHNXBiWEJ2Y25RZ2V5QlBZbk5sY25aaFlteGxVM1J2Y21VZ2ZTQm1jbTl0SUNkQWJXVjBZVzFoYzJzdmIySnpMWE4wYjNKbEp6dGNibWx0Y0c5eWRDQnNiMmNnWm5KdmJTQW5iRzluYkdWMlpXd25PMXh1YVcxd2IzSjBJSHNnUTBoQlNVNWZTVVJmVkU5ZlRrVlVWMDlTUzE5SlJGOU5RVkFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2WTI5dWMzUmhiblJ6TDI1bGRIZHZjbXNuTzF4dWFXMXdiM0owSUhzZ2RHOURhR1ZqYTNOMWJVaGxlRUZrWkhKbGMzTWdmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZiVzlrZFd4bGN5OW9aWGh6ZEhKcGJtY3RkWFJwYkhNbk8xeHVhVzF3YjNKMElFVnVjeUJtY205dElDY3VMMlZ1Y3ljN1hHNWNibU52Ym5OMElGcEZVazlmUVVSRVVrVlRVeUE5SUNjd2VEQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREFuTzF4dVkyOXVjM1FnV2tWU1QxOVlYMFZTVWs5U1gwRkVSRkpGVTFNZ1BTQW5NSGduTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJGYm5ORGIyNTBjbTlzYkdWeUlIdGNiaUFnWTI5dWMzUnlkV04wYjNJb2V5Qmxibk1zSUhCeWIzWnBaR1Z5TENCdmJrNWxkSGR2Y210RWFXUkRhR0Z1WjJVc0lHZGxkRU4xY25KbGJuUkRhR0ZwYmtsa0lIMGdQU0I3ZlNrZ2UxeHVJQ0FnSUdOdmJuTjBJR2x1YVhSVGRHRjBaU0E5SUh0Y2JpQWdJQ0FnSUdWdWMxSmxjMjlzZFhScGIyNXpRbmxCWkdSeVpYTnpPaUI3ZlN4Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnZEdocGN5NWZaVzV6SUQwZ1pXNXpPMXh1SUNBZ0lHbG1JQ2doZEdocGN5NWZaVzV6S1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0JqYUdGcGJrbGtJRDBnWjJWMFEzVnljbVZ1ZEVOb1lXbHVTV1FvS1R0Y2JpQWdJQ0FnSUdOdmJuTjBJRzVsZEhkdmNtc2dQU0JEU0VGSlRsOUpSRjlVVDE5T1JWUlhUMUpMWDBsRVgwMUJVRnRqYUdGcGJrbGtYVHRjYmlBZ0lDQWdJR2xtSUNoRmJuTXVaMlYwVG1WMGQyOXlhMFZ1YzFOMWNIQnZjblFvYm1WMGQyOXlheWtwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWlc1eklEMGdibVYzSUVWdWN5aDdYRzRnSUNBZ0lDQWdJQ0FnYm1WMGQyOXlheXhjYmlBZ0lDQWdJQ0FnSUNCd2NtOTJhV1JsY2l4Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTQTlJRzVsZHlCUFluTmxjblpoWW14bFUzUnZjbVVvYVc1cGRGTjBZWFJsS1R0Y2JseHVJQ0FnSUhSb2FYTXVjbVZ6WlhSVGRHRjBaU0E5SUNncElEMCtJSHRjYmlBZ0lDQWdJSFJvYVhNdWMzUnZjbVV1ZFhCa1lYUmxVM1JoZEdVb2FXNXBkRk4wWVhSbEtUdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2IyNU9aWFIzYjNKclJHbGtRMmhoYm1kbEtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjM1J2Y21VdWNIVjBVM1JoZEdVb2FXNXBkRk4wWVhSbEtUdGNiaUFnSUNBZ0lHTnZibk4wSUdOb1lXbHVTV1FnUFNCblpYUkRkWEp5Wlc1MFEyaGhhVzVKWkNncE8xeHVJQ0FnSUNBZ1kyOXVjM1FnYm1WMGQyOXlheUE5SUVOSVFVbE9YMGxFWDFSUFgwNUZWRmRQVWt0ZlNVUmZUVUZRVzJOb1lXbHVTV1JkTzF4dUlDQWdJQ0FnYVdZZ0tFVnVjeTVuWlhST1pYUjNiM0pyUlc1elUzVndjRzl5ZENodVpYUjNiM0pyS1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJuTWdQU0J1WlhjZ1JXNXpLSHRjYmlBZ0lDQWdJQ0FnSUNCdVpYUjNiM0pyTEZ4dUlDQWdJQ0FnSUNBZ0lIQnliM1pwWkdWeUxGeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR1JsYkdWMFpTQjBhR2x6TGw5bGJuTTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0J5WlhabGNuTmxVbVZ6YjJ4MlpVRmtaSEpsYzNNb1lXUmtjbVZ6Y3lrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWFpsY25ObFVtVnpiMngyWlVGa1pISmxjM01vZEc5RGFHVmphM04xYlVobGVFRmtaSEpsYzNNb1lXUmtjbVZ6Y3lrcE8xeHVJQ0I5WEc1Y2JpQWdZWE41Ym1NZ1gzSmxkbVZ5YzJWU1pYTnZiSFpsUVdSa2NtVnpjeWhoWkdSeVpYTnpLU0I3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbDlsYm5NcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdjM1JoZEdVZ1BTQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2s3WEc0Z0lDQWdhV1lnS0hOMFlYUmxMbVZ1YzFKbGMyOXNkWFJwYjI1elFubEJaR1J5WlhOelcyRmtaSEpsYzNOZEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2MzUmhkR1V1Wlc1elVtVnpiMngxZEdsdmJuTkNlVUZrWkhKbGMzTmJZV1JrY21WemMxMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JHVjBJR1J2YldGcGJqdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdaRzl0WVdsdUlEMGdZWGRoYVhRZ2RHaHBjeTVmWlc1ekxuSmxkbVZ5YzJVb1lXUmtjbVZ6Y3lrN1hHNGdJQ0FnZlNCallYUmphQ0FvWlhKeWIzSXBJSHRjYmlBZ0lDQWdJR3h2Wnk1a1pXSjFaeWhsY25KdmNpazdYRzRnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQnlaV2RwYzNSbGNtVmtRV1JrY21WemN6dGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdjbVZuYVhOMFpYSmxaRUZrWkhKbGMzTWdQU0JoZDJGcGRDQjBhR2x6TGw5bGJuTXViRzl2YTNWd0tHUnZiV0ZwYmlrN1hHNGdJQ0FnZlNCallYUmphQ0FvWlhKeWIzSXBJSHRjYmlBZ0lDQWdJR3h2Wnk1a1pXSjFaeWhsY25KdmNpazdYRzRnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lISmxaMmx6ZEdWeVpXUkJaR1J5WlhOeklEMDlQU0JhUlZKUFgwRkVSRkpGVTFNZ2ZIeGNiaUFnSUNBZ0lISmxaMmx6ZEdWeVpXUkJaR1J5WlhOeklEMDlQU0JhUlZKUFgxaGZSVkpTVDFKZlFVUkVVa1ZUVTF4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvZEc5RGFHVmphM04xYlVobGVFRmtaSEpsYzNNb2NtVm5hWE4wWlhKbFpFRmtaSEpsYzNNcElDRTlQU0JoWkdSeVpYTnpLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkVzVrWldacGJtVmtPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11WDNWd1pHRjBaVkpsYzI5c2RYUnBiMjV6UW5sQlpHUnlaWE56S0dGa1pISmxjM01zSUhCMWJubGpiMlJsTG5SdlFWTkRTVWtvWkc5dFlXbHVLU2s3WEc0Z0lDQWdjbVYwZFhKdUlHUnZiV0ZwYmp0Y2JpQWdmVnh1WEc0Z0lGOTFjR1JoZEdWU1pYTnZiSFYwYVc5dWMwSjVRV1JrY21WemN5aGhaR1J5WlhOekxDQmtiMjFoYVc0cElIdGNiaUFnSUNCamIyNXpkQ0J2YkdSVGRHRjBaU0E5SUhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tUdGNiaUFnSUNCMGFHbHpMbk4wYjNKbExuQjFkRk4wWVhSbEtIdGNiaUFnSUNBZ0lHVnVjMUpsYzI5c2RYUnBiMjV6UW5sQlpHUnlaWE56T2lCN1hHNGdJQ0FnSUNBZ0lDNHVMbTlzWkZOMFlYUmxMbVZ1YzFKbGMyOXNkWFJwYjI1elFubEJaR1J5WlhOekxGeHVJQ0FnSUNBZ0lDQmJZV1JrY21WemMxMDZJR1J2YldGcGJpeGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ2ZTazdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0I3SUU5aWMyVnlkbUZpYkdWVGRHOXlaU0I5SUdaeWIyMGdKMEJ0WlhSaGJXRnpheTl2WW5NdGMzUnZjbVVuTzF4dWFXMXdiM0owSUd4dlp5Qm1jbTl0SUNkc2IyZHNaWFpsYkNjN1hHNXBiWEJ2Y25RZ1FrNGdabkp2YlNBblltNHVhbk1uTzF4dWFXMXdiM0owSUdOeVpXRjBaVWxrSUdaeWIyMGdKeTR1THk0dUx5NHVMM05vWVhKbFpDOXRiMlIxYkdWekwzSmhibVJ2YlMxcFpDYzdYRzVwYlhCdmNuUWdleUJ3Y21WMmFXOTFjMVpoYkhWbFEyOXRjR0Z5WVhSdmNpQjlJR1p5YjIwZ0p5NHVMMnhwWWk5MWRHbHNKenRjYm1sdGNHOXlkQ0JuWlhSR1pYUmphRmRwZEdoVWFXMWxiM1YwSUdaeWIyMGdKeTR1THk0dUx5NHVMM05vWVhKbFpDOXRiMlIxYkdWekwyWmxkR05vTFhkcGRHZ3RkR2x0Wlc5MWRDYzdYRzVjYm1sdGNHOXlkQ0I3WEc0Z0lGUnlZVzV6WVdOMGFXOXVWSGx3WlN4Y2JpQWdWSEpoYm5OaFkzUnBiMjVUZEdGMGRYTXNYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZkSEpoYm5OaFkzUnBiMjRuTzF4dWFXMXdiM0owSUhzZ1JWUklSVkpUUTBGT1gxTlZVRkJQVWxSRlJGOU9SVlJYVDFKTFV5QjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmJtVjBkMjl5YXljN1hHNXBiWEJ2Y25RZ2V5QmlibFJ2U0dWNElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dmMyaGhjbVZrTDIxdlpIVnNaWE12WTI5dWRtVnljMmx2Ymk1MWRHbHNjeWM3WEc1Y2JtTnZibk4wSUdabGRHTm9WMmwwYUZScGJXVnZkWFFnUFNCblpYUkdaWFJqYUZkcGRHaFVhVzFsYjNWMEtDazdYRzVjYmk4cUtseHVJQ29nUUhSNWNHVmtaV1lnZTJsdGNHOXlkQ2duTGk0dkxpNHZMaTR2YzJoaGNtVmtMMk52Ym5OMFlXNTBjeTkwY21GdWMyRmpkR2x2YmljcExsUnlZVzV6WVdOMGFXOXVUV1YwWVgwZ1ZISmhibk5oWTNScGIyNU5aWFJoWEc0Z0tpOWNibHh1THlvcVhHNGdLaUJCSUhSeVlXNXpZV04wYVc5dUlHOWlhbVZqZENCcGJpQjBhR1VnWm05eWJXRjBJSEpsZEhWeWJtVmtJR0o1SUhSb1pTQkZkR2hsY25OallXNGdRVkJKTGx4dUlDcGNiaUFxSUU1dmRHVWdkR2hoZENCMGFHbHpJR2x6SUc1dmRDQmhiaUJsZUdoaGRYTjBhWFpsSUhSNWNHVWdaR1ZtYVc1cGRHOXVPeUJ2Ym14NUlIUm9aU0J3Y205d1pYSjBhV1Z6SUhkbElIVnpaU0JoY21VZ1pHVm1hVzVsWkZ4dUlDcGNiaUFxSUVCMGVYQmxaR1ZtSUh0dlltcGxZM1I5SUVWMGFHVnljMk5oYmxSeVlXNXpZV04wYVc5dVhHNGdLaUJBY0hKdmNHVnlkSGtnZTNOMGNtbHVaMzBnWW14dlkydE9kVzFpWlhJZ0xTQlVhR1VnYm5WdFltVnlJRzltSUhSb1pTQmliRzlqYXlCMGFHbHpJSFJ5WVc1ellXTjBhVzl1SUhkaGN5Qm1iM1Z1WkNCcGJpd2dhVzRnWkdWamFXMWhiRnh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlHWnliMjBnTFNCVWFHVWdhR1Y0TFhCeVpXWnBlR1ZrSUdGa1pISmxjM01nYjJZZ2RHaGxJSE5sYm1SbGNseHVJQ29nUUhCeWIzQmxjblI1SUh0emRISnBibWQ5SUdkaGN5QXRJRlJvWlNCbllYTWdiR2x0YVhRc0lHbHVJR1JsWTJsdFlXd2dSMWRGU1Z4dUlDb2dRSEJ5YjNCbGNuUjVJSHR6ZEhKcGJtZDlJRnRuWVhOUWNtbGpaVjBnTFNCVWFHVWdaMkZ6SUhCeWFXTmxMQ0JwYmlCa1pXTnBiV0ZzSUZkRlNWeHVJQ29nUUhCeWIzQmxjblI1SUh0emRISnBibWQ5SUZ0dFlYaEdaV1ZRWlhKSFlYTmRJQzBnVkdobElHMWhlR2x0ZFcwZ1ptVmxJSEJsY2lCbllYTXNJR2x1WTJ4MWMybDJaU0J2WmlCMGFYQXNJR2x1SUdSbFkybHRZV3dnVjBWSlhHNGdLaUJBY0hKdmNHVnlkSGtnZTNOMGNtbHVaMzBnVzIxaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGelhTQXRJRlJvWlNCdFlYaHBiWFZ0SUhScGNDQndaWElnWjJGeklHbHVJR1JsWTJsdFlXd2dWMFZKWEc0Z0tpQkFjSEp2Y0dWeWRIa2dlM04wY21sdVozMGdhR0Z6YUNBdElGUm9aU0JvWlhndGNISmxabWw0WldRZ2RISmhibk5oWTNScGIyNGdhR0Z6YUZ4dUlDb2dRSEJ5YjNCbGNuUjVJSHR6ZEhKcGJtZDlJR2x6UlhKeWIzSWdMU0JYYUdWMGFHVnlJSFJvWlNCMGNtRnVjMkZqZEdsdmJpQjNZWE1nWTI5dVptbHliV1ZrSUc5eUlHWmhhV3hsWkNBb01DQm1iM0lnWTI5dVptbHliV1ZrTENBeElHWnZjaUJtWVdsc1pXUXBYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UzTjBjbWx1WjMwZ2JtOXVZMlVnTFNCVWFHVWdkSEpoYm5OaFkzUnBiMjRnYm05dVkyVXNJR2x1SUdSbFkybHRZV3hjYmlBcUlFQndjbTl3WlhKMGVTQjdjM1J5YVc1bmZTQjBhVzFsVTNSaGJYQWdMU0JVYUdVZ2RHbHRaWE4wWVcxd0lHWnZjaUIwYUdVZ2RISmhibk5oWTNScGIyNHNJR2x1SUhObFkyOXVaSE5jYmlBcUlFQndjbTl3WlhKMGVTQjdjM1J5YVc1bmZTQjBieUF0SUZSb1pTQm9aWGd0Y0hKbFptbDRaV1FnWVdSa2NtVnpjeUJ2WmlCMGFHVWdjbVZqYVhCcFpXNTBYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UzTjBjbWx1WjMwZ2RtRnNkV1VnTFNCVWFHVWdZVzF2ZFc1MElHOW1JRVZVU0NCelpXNTBJR2x1SUhSb2FYTWdkSEpoYm5OaFkzUnBiMjRzSUdsdUlHUmxZMmx0WVd3Z1YwVkpYRzRnS2k5Y2JseHVMeW9xWEc0Z0tpQlVhR2x6SUdOdmJuUnliMnhzWlhJZ2FYTWdjbVZ6Y0c5dWMybGliR1VnWm05eUlISmxkSEpwWlhacGJtY2dhVzVqYjIxcGJtY2dkSEpoYm5OaFkzUnBiMjV6TGlCRmRHaGxjbk5qWVc0Z2FYTWdjRzlzYkdWa0lHOXVZMlVnWlhabGNua2dZbXh2WTJzZ2RHOGdZMmhsWTJ0Y2JpQXFJR1p2Y2lCdVpYY2dhVzVqYjIxcGJtY2dkSEpoYm5OaFkzUnBiMjV6SUdadmNpQjBhR1VnWTNWeWNtVnVkQ0J6Wld4bFkzUmxaQ0JoWTJOdmRXNTBJRzl1SUhSb1pTQmpkWEp5Wlc1MElHNWxkSGR2Y210Y2JpQXFYRzRnS2lCT2IzUmxJSFJvWVhRZ2IyNXNlU0JGZEdobGNuTmpZVzR0WTI5dGNHRjBhV0pzWlNCdVpYUjNiM0pyY3lCaGNtVWdjM1Z3Y0c5eWRHVmtMaUJYWlNCM2FXeHNJRzV2ZENCaGRIUmxiWEIwSUhSdklISmxkSEpwWlhabElHbHVZMjl0YVc1bklIUnlZVzV6WVdOMGFXOXVjMXh1SUNvZ2IyNGdibTl1TFdOdmJYQmhkR2xpYkdVZ1kzVnpkRzl0SUZKUVF5QmxibVJ3YjJsdWRITXVYRzRnS2k5Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRWx1WTI5dGFXNW5WSEpoYm5OaFkzUnBiMjV6UTI5dWRISnZiR3hsY2lCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0c5d2RITWdQU0I3ZlNrZ2UxeHVJQ0FnSUdOdmJuTjBJSHRjYmlBZ0lDQWdJR0pzYjJOclZISmhZMnRsY2l4Y2JpQWdJQ0FnSUc5dVRtVjBkMjl5YTBScFpFTm9ZVzVuWlN4Y2JpQWdJQ0FnSUdkbGRFTjFjbkpsYm5SRGFHRnBia2xrTEZ4dUlDQWdJQ0FnY0hKbFptVnlaVzVqWlhORGIyNTBjbTlzYkdWeUxGeHVJQ0FnSUNBZ2IyNWliMkZ5WkdsdVowTnZiblJ5YjJ4c1pYSXNYRzRnSUNBZ2ZTQTlJRzl3ZEhNN1hHNGdJQ0FnZEdocGN5NWliRzlqYTFSeVlXTnJaWElnUFNCaWJHOWphMVJ5WVdOclpYSTdYRzRnSUNBZ2RHaHBjeTVuWlhSRGRYSnlaVzUwUTJoaGFXNUpaQ0E5SUdkbGRFTjFjbkpsYm5SRGFHRnBia2xrTzF4dUlDQWdJSFJvYVhNdWNISmxabVZ5Wlc1alpYTkRiMjUwY205c2JHVnlJRDBnY0hKbFptVnlaVzVqWlhORGIyNTBjbTlzYkdWeU8xeHVJQ0FnSUhSb2FYTXViMjVpYjJGeVpHbHVaME52Ym5SeWIyeHNaWElnUFNCdmJtSnZZWEprYVc1blEyOXVkSEp2Ykd4bGNqdGNibHh1SUNBZ0lIUm9hWE11WDI5dVRHRjBaWE4wUW14dlkyc2dQU0JoYzNsdVl5QW9ibVYzUW14dlkydE9kVzFpWlhKSVpYZ3BJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSE5sYkdWamRHVmtRV1JrY21WemN5QTlJSFJvYVhNdWNISmxabVZ5Wlc1alpYTkRiMjUwY205c2JHVnlMbWRsZEZObGJHVmpkR1ZrUVdSa2NtVnpjeWdwTzF4dUlDQWdJQ0FnWTI5dWMzUWdibVYzUW14dlkydE9kVzFpWlhKRVpXTWdQU0J3WVhKelpVbHVkQ2h1WlhkQ2JHOWphMDUxYldKbGNraGxlQ3dnTVRZcE8xeHVJQ0FnSUNBZ1lYZGhhWFFnZEdocGN5NWZkWEJrWVhSbEtITmxiR1ZqZEdWa1FXUmtjbVZ6Y3l3Z2JtVjNRbXh2WTJ0T2RXMWlaWEpFWldNcE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCamIyNXpkQ0JwYm1OdmJXbHVaMVI0VEdGemRFWmxkR05vWldSQ2JHOWphMEo1UTJoaGFXNUpaQ0E5SUU5aWFtVmpkQzVyWlhsektGeHVJQ0FnSUNBZ1JWUklSVkpUUTBGT1gxTlZVRkJQVWxSRlJGOU9SVlJYVDFKTFV5eGNiaUFnSUNBcExuSmxaSFZqWlNnb2JtVjBkMjl5YXl3Z1kyaGhhVzVKWkNrZ1BUNGdlMXh1SUNBZ0lDQWdibVYwZDI5eWExdGphR0ZwYmtsa1hTQTlJRzUxYkd3N1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm1WMGQyOXlhenRjYmlBZ0lDQjlMQ0I3ZlNrN1hHNWNiaUFnSUNCamIyNXpkQ0JwYm1sMFUzUmhkR1VnUFNCN1hHNGdJQ0FnSUNCcGJtTnZiV2x1WjFSeVlXNXpZV04wYVc5dWN6b2dlMzBzWEc0Z0lDQWdJQ0JwYm1OdmJXbHVaMVI0VEdGemRFWmxkR05vWldSQ2JHOWphMEo1UTJoaGFXNUpaQ3hjYmlBZ0lDQWdJQzR1TG05d2RITXVhVzVwZEZOMFlYUmxMRnh1SUNBZ0lIMDdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTQTlJRzVsZHlCUFluTmxjblpoWW14bFUzUnZjbVVvYVc1cGRGTjBZWFJsS1R0Y2JseHVJQ0FnSUhSb2FYTXVjSEpsWm1WeVpXNWpaWE5EYjI1MGNtOXNiR1Z5TG5OMGIzSmxMbk4xWW5OamNtbGlaU2hjYmlBZ0lDQWdJSEJ5WlhacGIzVnpWbUZzZFdWRGIyMXdZWEpoZEc5eUtDaHdjbVYyVTNSaGRHVXNJR04xY25KVGRHRjBaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNBZ0lDQWdabVZoZEhWeVpVWnNZV2R6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YUc5M1NXNWpiMjFwYm1kVWNtRnVjMkZqZEdsdmJuTTZJSEJ5WlhaVGFHOTNTVzVqYjIxcGJtZFVjbUZ1YzJGamRHbHZibk1zWEc0Z0lDQWdJQ0FnSUNBZ2ZTQTlJSHQ5TEZ4dUlDQWdJQ0FnSUNCOUlEMGdjSEpsZGxOMFlYUmxPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdYRzRnSUNBZ0lDQWdJQ0FnWm1WaGRIVnlaVVpzWVdkek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemFHOTNTVzVqYjIxcGJtZFVjbUZ1YzJGamRHbHZibk02SUdOMWNuSlRhRzkzU1c1amIyMXBibWRVY21GdWMyRmpkR2x2Ym5Nc1hHNGdJQ0FnSUNBZ0lDQWdmU0E5SUh0OUxGeHVJQ0FnSUNBZ0lDQjlJRDBnWTNWeWNsTjBZWFJsTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hqZFhKeVUyaHZkMGx1WTI5dGFXNW5WSEpoYm5OaFkzUnBiMjV6SUQwOVBTQndjbVYyVTJodmQwbHVZMjl0YVc1blZISmhibk5oWTNScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0hCeVpYWlRhRzkzU1c1amIyMXBibWRVY21GdWMyRmpkR2x2Ym5NZ0ppWWdJV04xY25KVGFHOTNTVzVqYjIxcGJtZFVjbUZ1YzJGamRHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMGIzQW9LVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYSjBLQ2s3WEc0Z0lDQWdJQ0I5TENCMGFHbHpMbkJ5WldabGNtVnVZMlZ6UTI5dWRISnZiR3hsY2k1emRHOXlaUzVuWlhSVGRHRjBaU2dwS1N4Y2JpQWdJQ0FwTzF4dVhHNGdJQ0FnZEdocGN5NXdjbVZtWlhKbGJtTmxjME52Ym5SeWIyeHNaWEl1YzNSdmNtVXVjM1ZpYzJOeWFXSmxLRnh1SUNBZ0lDQWdjSEpsZG1sdmRYTldZV3gxWlVOdmJYQmhjbUYwYjNJb1lYTjVibU1nS0hCeVpYWlRkR0YwWlN3Z1kzVnljbE4wWVhSbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSHNnYzJWc1pXTjBaV1JCWkdSeVpYTnpPaUJ3Y21WMlUyVnNaV04wWldSQlpHUnlaWE56SUgwZ1BTQndjbVYyVTNSaGRHVTdYRzRnSUNBZ0lDQWdJR052Ym5OMElIc2djMlZzWldOMFpXUkJaR1J5WlhOek9pQmpkWEp5VTJWc1pXTjBaV1JCWkdSeVpYTnpJSDBnUFNCamRYSnlVM1JoZEdVN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dOMWNuSlRaV3hsWTNSbFpFRmtaSEpsYzNNZ1BUMDlJSEJ5WlhaVFpXeGxZM1JsWkVGa1pISmxjM01wSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZWGRoYVhRZ2RHaHBjeTVmZFhCa1lYUmxLR04xY25KVFpXeGxZM1JsWkVGa1pISmxjM01wTzF4dUlDQWdJQ0FnZlN3Z2RHaHBjeTV3Y21WbVpYSmxibU5sYzBOdmJuUnliMnhzWlhJdWMzUnZjbVV1WjJWMFUzUmhkR1VvS1Nrc1hHNGdJQ0FnS1R0Y2JseHVJQ0FnSUhSb2FYTXViMjVpYjJGeVpHbHVaME52Ym5SeWIyeHNaWEl1YzNSdmNtVXVjM1ZpYzJOeWFXSmxLRnh1SUNBZ0lDQWdjSEpsZG1sdmRYTldZV3gxWlVOdmJYQmhjbUYwYjNJb1lYTjVibU1nS0hCeVpYWlRkR0YwWlN3Z1kzVnljbE4wWVhSbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSHNnWTI5dGNHeGxkR1ZrVDI1aWIyRnlaR2x1WnpvZ2NISmxka052YlhCc1pYUmxaRTl1WW05aGNtUnBibWNnZlNBOUlIQnlaWFpUZEdGMFpUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QmpiMjF3YkdWMFpXUlBibUp2WVhKa2FXNW5PaUJqZFhKeVEyOXRjR3hsZEdWa1QyNWliMkZ5WkdsdVp5QjlJRDBnWTNWeWNsTjBZWFJsTzF4dUlDQWdJQ0FnSUNCcFppQW9JWEJ5WlhaRGIyMXdiR1YwWldSUGJtSnZZWEprYVc1bklDWW1JR04xY25KRGIyMXdiR1YwWldSUGJtSnZZWEprYVc1bktTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZV1JrY21WemN5QTlJSFJvYVhNdWNISmxabVZ5Wlc1alpYTkRiMjUwY205c2JHVnlMbWRsZEZObGJHVmpkR1ZrUVdSa2NtVnpjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lHRjNZV2wwSUhSb2FYTXVYM1Z3WkdGMFpTaGhaR1J5WlhOektUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU3dnZEdocGN5NXZibUp2WVhKa2FXNW5RMjl1ZEhKdmJHeGxjaTV6ZEc5eVpTNW5aWFJUZEdGMFpTZ3BLU3hjYmlBZ0lDQXBPMXh1WEc0Z0lDQWdiMjVPWlhSM2IzSnJSR2xrUTJoaGJtZGxLR0Z6ZVc1aklDZ3BJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR0ZrWkhKbGMzTWdQU0IwYUdsekxuQnlaV1psY21WdVkyVnpRMjl1ZEhKdmJHeGxjaTVuWlhSVFpXeGxZM1JsWkVGa1pISmxjM01vS1R0Y2JpQWdJQ0FnSUdGM1lXbDBJSFJvYVhNdVgzVndaR0YwWlNoaFpHUnlaWE56S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lITjBZWEowS0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnWm1WaGRIVnlaVVpzWVdkeklEMGdlMzBnZlNBOUlIUm9hWE11Y0hKbFptVnlaVzVqWlhORGIyNTBjbTlzYkdWeUxuTjBiM0psTG1kbGRGTjBZWFJsS0NrN1hHNGdJQ0FnWTI5dWMzUWdleUJ6YUc5M1NXNWpiMjFwYm1kVWNtRnVjMkZqZEdsdmJuTWdmU0E5SUdabFlYUjFjbVZHYkdGbmN6dGNibHh1SUNBZ0lHbG1JQ2doYzJodmQwbHVZMjl0YVc1blZISmhibk5oWTNScGIyNXpLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTVpYkc5amExUnlZV05yWlhJdWNtVnRiM1psVEdsemRHVnVaWElvSjJ4aGRHVnpkQ2NzSUhSb2FYTXVYMjl1VEdGMFpYTjBRbXh2WTJzcE8xeHVJQ0FnSUhSb2FYTXVZbXh2WTJ0VWNtRmphMlZ5TG1Ga1pFeHBjM1JsYm1WeUtDZHNZWFJsYzNRbkxDQjBhR2x6TGw5dmJreGhkR1Z6ZEVKc2IyTnJLVHRjYmlBZ2ZWeHVYRzRnSUhOMGIzQW9LU0I3WEc0Z0lDQWdkR2hwY3k1aWJHOWphMVJ5WVdOclpYSXVjbVZ0YjNabFRHbHpkR1Z1WlhJb0oyeGhkR1Z6ZENjc0lIUm9hWE11WDI5dVRHRjBaWE4wUW14dlkyc3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVSbGRHVnliV2x1WlhNZ2RHaGxJR052Y25KbFkzUWdZbXh2WTJzZ2JuVnRZbVZ5SUhSdklHSmxaMmx1SUd4dmIydHBibWNnWm05eUlHNWxkeUIwY21GdWMyRmpkR2x2Ym5OY2JpQWdJQ29nWm5KdmJTd2dabVYwWTJobGN5QjBhR1VnZEhKaGJuTmhZM1JwYjI1eklHRnVaQ0IwYUdWdUlITmhkbVZ6SUhSb1pXMGdZVzVrSUhSb1pTQnVaWGgwSUdKc2IyTnJYRzRnSUNBcUlHNTFiV0psY2lCMGJ5QmlaV2RwYmlCbVpYUmphR2x1WnlCbWNtOXRJR2x1SUhOMFlYUmxMaUJDYkc5amF5QnVkVzFpWlhKeklHRnVaQ0IwY21GdWMyRmpkR2x2Ym5NZ1lYSmxYRzRnSUNBcUlITjBiM0psWkNCd1pYSWdZMmhoYVc1SlpDNWNiaUFnSUNwY2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHRmtaSEpsYzNNZ0xTQmhaR1J5WlhOeklIUnZJR3h2YjJ0MWNDQjBjbUZ1YzJGamRHbHZibk1nWm05eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JiYm1WM1FteHZZMnRPZFcxaVpYSkVaV05kSUMwZ1lteHZZMnNnYm5WdFltVnlJSFJ2SUdKbFoybHVJR1psZEdOb2FXNW5JR1p5YjIxY2JpQWdJQ292WEc0Z0lHRnplVzVqSUY5MWNHUmhkR1VvWVdSa2NtVnpjeXdnYm1WM1FteHZZMnRPZFcxaVpYSkVaV01wSUh0Y2JpQWdJQ0JqYjI1emRDQjdJR052YlhCc1pYUmxaRTl1WW05aGNtUnBibWNnZlNBOUlIUm9hWE11YjI1aWIyRnlaR2x1WjBOdmJuUnliMnhzWlhJdWMzUnZjbVV1WjJWMFUzUmhkR1VvS1R0Y2JpQWdJQ0JqYjI1emRDQmphR0ZwYmtsa0lEMGdkR2hwY3k1blpYUkRkWEp5Wlc1MFEyaGhhVzVKWkNncE8xeHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDRlBZbXBsWTNRdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaEZWRWhGVWxORFFVNWZVMVZRVUU5U1ZFVkVYMDVGVkZkUFVrdFRMQ0JqYUdGcGJrbGtLU0I4ZkZ4dUlDQWdJQ0FnSVdGa1pISmxjM01nZkh4Y2JpQWdJQ0FnSUNGamIyMXdiR1YwWldSUGJtSnZZWEprYVc1blhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQmpkWEp5Wlc1MFUzUmhkR1VnUFNCMGFHbHpMbk4wYjNKbExtZGxkRk4wWVhSbEtDazdYRzRnSUNBZ0lDQmpiMjV6ZENCamRYSnlaVzUwUW14dlkyc2dQU0J3WVhKelpVbHVkQ2gwYUdsekxtSnNiMk5yVkhKaFkydGxjaTVuWlhSRGRYSnlaVzUwUW14dlkyc29LU3dnTVRZcE8xeHVYRzRnSUNBZ0lDQmpiMjV6ZENCdGIzTjBVbVZqWlc1MGJIbEdaWFJqYUdWa1FteHZZMnNnUFZ4dUlDQWdJQ0FnSUNCamRYSnlaVzUwVTNSaGRHVXVhVzVqYjIxcGJtZFVlRXhoYzNSR1pYUmphR1ZrUW14dlkydENlVU5vWVdsdVNXUmJZMmhoYVc1SlpGMDdYRzRnSUNBZ0lDQmpiMjV6ZENCaWJHOWphMVJ2Um1WMFkyaEdjbTl0SUQxY2JpQWdJQ0FnSUNBZ2JXOXpkRkpsWTJWdWRHeDVSbVYwWTJobFpFSnNiMk5ySUQ4L0lHNWxkMEpzYjJOclRuVnRZbVZ5UkdWaklEOC9JR04xY25KbGJuUkNiRzlqYXp0Y2JseHVJQ0FnSUNBZ1kyOXVjM1FnYm1WM1NXNWpiMjFwYm1kVWVITWdQU0JoZDJGcGRDQjBhR2x6TGw5blpYUk9aWGRKYm1OdmJXbHVaMVJ5WVc1ellXTjBhVzl1Y3loY2JpQWdJQ0FnSUNBZ1lXUmtjbVZ6Y3l4Y2JpQWdJQ0FnSUNBZ1lteHZZMnRVYjBabGRHTm9Sbkp2YlN4Y2JpQWdJQ0FnSUNBZ1kyaGhhVzVKWkN4Y2JpQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lHeGxkQ0J1WlhkTmIzTjBVbVZqWlc1MGJIbEdaWFJqYUdWa1FteHZZMnNnUFNCaWJHOWphMVJ2Um1WMFkyaEdjbTl0TzF4dVhHNGdJQ0FnSUNCdVpYZEpibU52YldsdVoxUjRjeTVtYjNKRllXTm9LQ2gwZUNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lDQWdkSGd1WW14dlkydE9kVzFpWlhJZ0ppWmNiaUFnSUNBZ0lDQWdJQ0J3WVhKelpVbHVkQ2h1WlhkTmIzTjBVbVZqWlc1MGJIbEdaWFJqYUdWa1FteHZZMnNzSURFd0tTQThYRzRnSUNBZ0lDQWdJQ0FnSUNCd1lYSnpaVWx1ZENoMGVDNWliRzlqYTA1MWJXSmxjaXdnTVRBcFhHNGdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUc1bGQwMXZjM1JTWldObGJuUnNlVVpsZEdOb1pXUkNiRzlqYXlBOUlIQmhjbk5sU1c1MEtIUjRMbUpzYjJOclRuVnRZbVZ5TENBeE1DazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNCMGFHbHpMbk4wYjNKbExuVndaR0YwWlZOMFlYUmxLSHRjYmlBZ0lDQWdJQ0FnYVc1amIyMXBibWRVZUV4aGMzUkdaWFJqYUdWa1FteHZZMnRDZVVOb1lXbHVTV1E2SUh0Y2JpQWdJQ0FnSUNBZ0lDQXVMaTVqZFhKeVpXNTBVM1JoZEdVdWFXNWpiMjFwYm1kVWVFeGhjM1JHWlhSamFHVmtRbXh2WTJ0Q2VVTm9ZV2x1U1dRc1hHNGdJQ0FnSUNBZ0lDQWdXMk5vWVdsdVNXUmRPaUJ1WlhkTmIzTjBVbVZqWlc1MGJIbEdaWFJqYUdWa1FteHZZMnNnS3lBeExGeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JwYm1OdmJXbHVaMVJ5WVc1ellXTjBhVzl1Y3pvZ2JtVjNTVzVqYjIxcGJtZFVlSE11Y21Wa2RXTmxLRnh1SUNBZ0lDQWdJQ0FnSUNoMGNtRnVjMkZqZEdsdmJuTXNJSFI0S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMkZqZEdsdmJuTmJkSGd1YUdGemFGMGdQU0IwZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjbUZ1YzJGamRHbHZibk03WEc0Z0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXVMaTVqZFhKeVpXNTBVM1JoZEdVdWFXNWpiMjFwYm1kVWNtRnVjMkZqZEdsdmJuTXNYRzRnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0tTeGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJQ0FnYkc5bkxtVnljbTl5S0dWeWNpazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJR1psZEdOb1pYTWdkSEpoYm5OaFkzUnBiMjV6SUdadmNpQjBhR1VnWjJsMlpXNGdZV1JrY21WemN5QmhibVFnWTJoaGFXNHNJSFpwWVNCbGRHaGxjbk5qWVc0c0lIUm9aVzVjYmlBZ0lDb2djSEp2WTJWemMyVnpJSFJvWlNCa1lYUmhJR2x1ZEc4Z2RHaGxJRzVsWTJWemMyRnllU0J6YUdGd1pTQm1iM0lnZFhOaFoyVWdhVzRnZEdocGN5QmpiMjUwY205c2JHVnlMbHh1SUNBZ0tseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMkZrWkhKbGMzTmRJQzBnUVdSa2NtVnpjeUIwYnlCbVpYUmphQ0IwY21GdWMyRmpkR2x2Ym5NZ1ptOXlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCYlpuSnZiVUpzYjJOclhTQXRJRUpzYjJOcklIUnZJR3h2YjJzZ1ptOXlJSFJ5WVc1ellXTjBhVzl1Y3lCaGRGeHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzJOb1lXbHVTV1JkSUMwZ1ZHaGxJR05vWVdsdVNXUWdabTl5SUhSb1pTQmpkWEp5Wlc1MElHNWxkSGR2Y210Y2JpQWdJQ29nUUhKbGRIVnlibk1nZTFSeVlXNXpZV04wYVc5dVRXVjBZVnRkZlZ4dUlDQWdLaTljYmlBZ1lYTjVibU1nWDJkbGRFNWxkMGx1WTI5dGFXNW5WSEpoYm5OaFkzUnBiMjV6S0dGa1pISmxjM01zSUdaeWIyMUNiRzlqYXl3Z1kyaGhhVzVKWkNrZ2UxeHVJQ0FnSUdOdmJuTjBJR1YwYUdWeWMyTmhia1J2YldGcGJpQTlJRVZVU0VWU1UwTkJUbDlUVlZCUVQxSlVSVVJmVGtWVVYwOVNTMU5iWTJoaGFXNUpaRjB1Wkc5dFlXbHVPMXh1SUNBZ0lHTnZibk4wSUdWMGFHVnljMk5oYmxOMVltUnZiV0ZwYmlBOUlFVlVTRVZTVTBOQlRsOVRWVkJRVDFKVVJVUmZUa1ZVVjA5U1MxTmJZMmhoYVc1SlpGMHVjM1ZpWkc5dFlXbHVPMXh1WEc0Z0lDQWdZMjl1YzNRZ1lYQnBWWEpzSUQwZ1lHaDBkSEJ6T2k4dkpIdGxkR2hsY25OallXNVRkV0prYjIxaGFXNTlMaVI3WlhSb1pYSnpZMkZ1Ukc5dFlXbHVmV0E3WEc0Z0lDQWdiR1YwSUhWeWJDQTlJR0FrZTJGd2FWVnliSDB2WVhCcFAyMXZaSFZzWlQxaFkyTnZkVzUwSm1GamRHbHZiajEwZUd4cGMzUW1ZV1JrY21WemN6MGtlMkZrWkhKbGMzTjlKblJoWnoxc1lYUmxjM1FtY0dGblpUMHhZRHRjYmx4dUlDQWdJR2xtSUNobWNtOXRRbXh2WTJzcElIdGNiaUFnSUNBZ0lIVnliQ0FyUFNCZ0puTjBZWEowUW14dlkyczlKSHR3WVhKelpVbHVkQ2htY205dFFteHZZMnNzSURFd0tYMWdPMXh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0J5WlhOd2IyNXpaU0E5SUdGM1lXbDBJR1psZEdOb1YybDBhRlJwYldWdmRYUW9kWEpzS1R0Y2JpQWdJQ0JqYjI1emRDQjdJSE4wWVhSMWN5d2djbVZ6ZFd4MElIMGdQU0JoZDJGcGRDQnlaWE53YjI1elpTNXFjMjl1S0NrN1hHNGdJQ0FnYkdWMElHNWxkMGx1WTI5dGFXNW5WSGh6SUQwZ1cxMDdYRzRnSUNBZ2FXWWdLSE4wWVhSMWN5QTlQVDBnSnpFbklDWW1JRUZ5Y21GNUxtbHpRWEp5WVhrb2NtVnpkV3gwS1NBbUppQnlaWE4xYkhRdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2NtVnRiM1JsVkhoTWFYTjBJRDBnZTMwN1hHNGdJQ0FnSUNCamIyNXpkQ0J5WlcxdmRHVlVlSE1nUFNCYlhUdGNiaUFnSUNBZ0lISmxjM1ZzZEM1bWIzSkZZV05vS0NoMGVDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWEpsYlc5MFpWUjRUR2x6ZEZ0MGVDNW9ZWE5vWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYlc5MFpWUjRjeTV3ZFhOb0tIUm9hWE11WDI1dmNtMWhiR2w2WlZSNFJuSnZiVVYwYUdWeWMyTmhiaWgwZUN3Z1kyaGhhVzVKWkNrcE8xeHVJQ0FnSUNBZ0lDQWdJSEpsYlc5MFpWUjRUR2x6ZEZ0MGVDNW9ZWE5vWFNBOUlERTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNCdVpYZEpibU52YldsdVoxUjRjeUE5SUhKbGJXOTBaVlI0Y3k1bWFXeDBaWElvWEc0Z0lDQWdJQ0FnSUNoMGVDa2dQVDRnZEhndWRIaFFZWEpoYlhNL0xuUnZQeTUwYjB4dmQyVnlRMkZ6WlNncElEMDlQU0JoWkdSeVpYTnpMblJ2VEc5M1pYSkRZWE5sS0Nrc1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2JtVjNTVzVqYjIxcGJtZFVlSE11YzI5eWRDZ29ZU3dnWWlrZ1BUNGdLR0V1ZEdsdFpTQThJR0l1ZEdsdFpTQS9JQzB4SURvZ01Ta3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYm1WM1NXNWpiMjFwYm1kVWVITTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVkhKaGJuTnRkWFJsY3lCaElFVjBhR1Z5YzJOaGJsUnlZVzV6WVdOMGFXOXVJR2x1ZEc4Z1lTQlVjbUZ1YzJGamRHbHZiazFsZEdGY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdEZkR2hsY25OallXNVVjbUZ1YzJGamRHbHZibjBnWlhSb1pYSnpZMkZ1VkhKaGJuTmhZM1JwYjI0Z0xTQjBhR1VnZEhKaGJuTmhZM1JwYjI0Z2RHOGdibTl5YldGc2FYcGxYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCamFHRnBia2xrSUMwZ1ZHaGxJR05vWVdsdVNXUWdiMllnZEdobElHTjFjbkpsYm5RZ2JtVjBkMjl5YTF4dUlDQWdLaUJBY21WMGRYSnVjeUI3VkhKaGJuTmhZM1JwYjI1TlpYUmhmVnh1SUNBZ0tpOWNiaUFnWDI1dmNtMWhiR2w2WlZSNFJuSnZiVVYwYUdWeWMyTmhiaWhsZEdobGNuTmpZVzVVY21GdWMyRmpkR2x2Yml3Z1kyaGhhVzVKWkNrZ2UxeHVJQ0FnSUdOdmJuTjBJSFJwYldVZ1BTQndZWEp6WlVsdWRDaGxkR2hsY25OallXNVVjbUZ1YzJGamRHbHZiaTUwYVcxbFUzUmhiWEFzSURFd0tTQXFJREV3TURBN1hHNGdJQ0FnWTI5dWMzUWdjM1JoZEhWeklEMWNiaUFnSUNBZ0lHVjBhR1Z5YzJOaGJsUnlZVzV6WVdOMGFXOXVMbWx6UlhKeWIzSWdQVDA5SUNjd0oxeHVJQ0FnSUNBZ0lDQS9JRlJ5WVc1ellXTjBhVzl1VTNSaGRIVnpMbU52Ym1acGNtMWxaRnh1SUNBZ0lDQWdJQ0E2SUZSeVlXNXpZV04wYVc5dVUzUmhkSFZ6TG1aaGFXeGxaRHRjYmlBZ0lDQmpiMjV6ZENCMGVGQmhjbUZ0Y3lBOUlIdGNiaUFnSUNBZ0lHWnliMjA2SUdWMGFHVnljMk5oYmxSeVlXNXpZV04wYVc5dUxtWnliMjBzWEc0Z0lDQWdJQ0JuWVhNNklHSnVWRzlJWlhnb2JtVjNJRUpPS0dWMGFHVnljMk5oYmxSeVlXNXpZV04wYVc5dUxtZGhjeWtwTEZ4dUlDQWdJQ0FnYm05dVkyVTZJR0p1Vkc5SVpYZ29ibVYzSUVKT0tHVjBhR1Z5YzJOaGJsUnlZVzV6WVdOMGFXOXVMbTV2Ym1ObEtTa3NYRzRnSUNBZ0lDQjBiem9nWlhSb1pYSnpZMkZ1VkhKaGJuTmhZM1JwYjI0dWRHOHNYRzRnSUNBZ0lDQjJZV3gxWlRvZ1ltNVViMGhsZUNodVpYY2dRazRvWlhSb1pYSnpZMkZ1VkhKaGJuTmhZM1JwYjI0dWRtRnNkV1VwS1N4Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnYVdZZ0tHVjBhR1Z5YzJOaGJsUnlZVzV6WVdOMGFXOXVMbWRoYzFCeWFXTmxLU0I3WEc0Z0lDQWdJQ0IwZUZCaGNtRnRjeTVuWVhOUWNtbGpaU0E5SUdKdVZHOUlaWGdvYm1WM0lFSk9LR1YwYUdWeWMyTmhibFJ5WVc1ellXTjBhVzl1TG1kaGMxQnlhV05sS1NrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNobGRHaGxjbk5qWVc1VWNtRnVjMkZqZEdsdmJpNXRZWGhHWldWUVpYSkhZWE1wSUh0Y2JpQWdJQ0FnSUhSNFVHRnlZVzF6TG0xaGVFWmxaVkJsY2tkaGN5QTlJR0p1Vkc5SVpYZ29YRzRnSUNBZ0lDQWdJRzVsZHlCQ1RpaGxkR2hsY25OallXNVVjbUZ1YzJGamRHbHZiaTV0WVhoR1pXVlFaWEpIWVhNcExGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lIUjRVR0Z5WVcxekxtMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpJRDBnWW01VWIwaGxlQ2hjYmlBZ0lDQWdJQ0FnYm1WM0lFSk9LR1YwYUdWeWMyTmhibFJ5WVc1ellXTjBhVzl1TG0xaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGektTeGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUdKc2IyTnJUblZ0WW1WeU9pQmxkR2hsY25OallXNVVjbUZ1YzJGamRHbHZiaTVpYkc5amEwNTFiV0psY2l4Y2JpQWdJQ0FnSUdsa09pQmpjbVZoZEdWSlpDZ3BMRnh1SUNBZ0lDQWdZMmhoYVc1SlpDeGNiaUFnSUNBZ0lHMWxkR0Z0WVhOclRtVjBkMjl5YTBsa09pQkZWRWhGVWxORFFVNWZVMVZRVUU5U1ZFVkVYMDVGVkZkUFVrdFRXMk5vWVdsdVNXUmRMbTVsZEhkdmNtdEpaQ3hjYmlBZ0lDQWdJSE4wWVhSMWN5eGNiaUFnSUNBZ0lIUnBiV1VzWEc0Z0lDQWdJQ0IwZUZCaGNtRnRjeXhjYmlBZ0lDQWdJR2hoYzJnNklHVjBhR1Z5YzJOaGJsUnlZVzV6WVdOMGFXOXVMbWhoYzJnc1hHNGdJQ0FnSUNCMGVYQmxPaUJVY21GdWMyRmpkR2x2YmxSNWNHVXVhVzVqYjIxcGJtY3NYRzRnSUNBZ2ZUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSHRjYmlBZ2FYTkZjWFZoYkN4Y2JpQWdiV1Z0YjJsNlpTeGNiaUFnYldWeVoyVXNYRzRnSUc5dGFYUXNYRzRnSUc5dGFYUkNlU3hjYmlBZ2NHbGphMEo1TEZ4dUlDQnphWHBsTEZ4dUlDQnpkVzBzWEc1OUlHWnliMjBnSjJ4dlpHRnphQ2M3WEc1cGJYQnZjblFnZXlCUFluTmxjblpoWW14bFUzUnZjbVVnZlNCbWNtOXRJQ2RBYldWMFlXMWhjMnN2YjJKekxYTjBiM0psSnp0Y2JtbHRjRzl5ZENCN0lHSjFabVpsY2xSdlNHVjRMQ0JyWldOallXc2dmU0JtY205dElDZGxkR2hsY21WMWJXcHpMWFYwYVd3bk8xeHVhVzF3YjNKMElIc2dkalFnWVhNZ2RYVnBaSFkwSUgwZ1puSnZiU0FuZFhWcFpDYzdYRzVwYlhCdmNuUWdleUJGVGxaSlVrOU9UVVZPVkY5VVdWQkZYMEpCUTB0SFVrOVZUa1FnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMMkZ3Y0NjN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JOUlZSQlRVVlVVa2xEVTE5QlRrOU9XVTFQVlZOZlNVUXNYRzRnSUUxRlZFRk5SVlJTU1VOVFgwSkJRMHRIVWs5VlRrUmZVRUZIUlY5UFFrcEZRMVFzWEc0Z0lFMWxkR0ZOWlhSeWFXTnpWWE5sY2xSeVlXbDBMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMMjFsZEdGdFpYUnlhV056Snp0Y2JtbHRjRzl5ZENCN0lGTkZRMDlPUkNCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12ZEdsdFpTYzdYRzVwYlhCdmNuUWdleUJwYzAxaGJtbG1aWE4wVmpNZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5emFHRnlaV1F2Ylc5a2RXeGxjeTl0ZGpNdWRYUnBiSE1uTzF4dWFXMXdiM0owSUhzZ1RVVlVRVTFGVkZKSlExTmZSa2xPUVV4SldrVmZSVlpGVGxSZlJsSkJSMDFGVGxSZlFVeEJVazBnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMMkZzWVhKdGN5YzdYRzVwYlhCdmNuUWdleUJqYUdWamEwRnNZWEp0UlhocGMzUnpMQ0JuWlc1bGNtRjBaVkpoYm1SdmJVbGtMQ0JwYzFaaGJHbGtSR0YwWlNCOUlHWnliMjBnSnk0dUwyeHBZaTkxZEdsc0p6dGNibHh1WTI5dWMzUWdSVmhVUlU1VFNVOU9YMVZPU1U1VFZFRk1URjlWVWt3Z1BTQW5hSFIwY0hNNkx5OXRaWFJoYldGemF5NXBieTkxYm1sdWMzUmhiR3hsWkNjN1hHNWNibU52Ym5OMElHUmxabUYxYkhSRFlYQjBkWEpsUlhoalpYQjBhVzl1SUQwZ0tHVnljaWtnUFQ0Z2UxeHVJQ0F2THlCMGFISnZkeUJsY25KdmNpQnZiaUJqYkdWaGJpQnpkR0ZqYXlCemJ5QnBkSE1nWTJGd2RIVnlaV1FnWW5rZ2NHeGhkR1p2Y20wZ2FXNTBaV2R5WVhScGIyNXpJQ2hsWnlCelpXNTBjbmtwWEc0Z0lDOHZJR0oxZENCa2IyVnpJRzV2ZENCcGJuUmxjbkoxY0hRZ2RHaGxJR05oYkd3Z2MzUmhZMnRjYmlBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hHNGdJQ0FnZEdoeWIzY2daWEp5TzF4dUlDQjlLVHRjYm4wN1hHNWNiaTh2SUZSb1pTQm1kVzVqZEdsdmJpQnBjeUIxYzJWa0lIUnZJR0oxYVd4a0lHRWdkVzVwY1hWbElHMWxjM05oWjJWSlpDQm1iM0lnYzJWbmJXVnVkQ0J0WlhOellXZGxjMXh1THk4Z1NYUWdkWE5sY3lCaFkzUnBiMjVKWkNCaGJtUWdkVzVwY1hWbFNXUmxiblJwWm1sbGNpQm1jbTl0SUdWMlpXNTBJR2xtSUhCeVpYTmxiblJjYm1OdmJuTjBJR0oxYVd4a1ZXNXBjWFZsVFdWemMyRm5aVWxrSUQwZ0tHRnlaM01wSUQwK0lIdGNiaUFnWTI5dWMzUWdiV1Z6YzJGblpVbGtVR0Z5ZEhNZ1BTQmJYVHRjYmlBZ2FXWWdLR0Z5WjNNdWRXNXBjWFZsU1dSbGJuUnBabWxsY2lrZ2UxeHVJQ0FnSUcxbGMzTmhaMlZKWkZCaGNuUnpMbkIxYzJnb1lYSm5jeTUxYm1seGRXVkpaR1Z1ZEdsbWFXVnlLVHRjYmlBZ2ZWeHVJQ0JwWmlBb1lYSm5jeTVoWTNScGIyNUpaQ2tnZTF4dUlDQWdJRzFsYzNOaFoyVkpaRkJoY25SekxuQjFjMmdvWVhKbmN5NWhZM1JwYjI1SlpDazdYRzRnSUgxY2JpQWdhV1lnS0cxbGMzTmhaMlZKWkZCaGNuUnpMbXhsYm1kMGFDQW1KaUJoY21kekxtbHpSSFZ3YkdsallYUmxRVzV2Ym5sdGFYcGxaRVYyWlc1MEtTQjdYRzRnSUNBZ2JXVnpjMkZuWlVsa1VHRnlkSE11Y0hWemFDZ25NSGd3TURBbktUdGNiaUFnZlZ4dUlDQnBaaUFvYldWemMyRm5aVWxrVUdGeWRITXViR1Z1WjNSb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUcxbGMzTmhaMlZKWkZCaGNuUnpMbXB2YVc0b0p5MG5LVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdaMlZ1WlhKaGRHVlNZVzVrYjIxSlpDZ3BPMXh1ZlR0Y2JseHVZMjl1YzNRZ1pYaGpaWEIwYVc5dWMxUnZSbWxzZEdWeUlEMGdlMXh1SUNCYllGbHZkU0J0ZFhOMElIQmhjM01nWldsMGFHVnlJR0Z1SUZ3aVlXNXZibmx0YjNWelNXUmNJaUJ2Y2lCaElGd2lkWE5sY2tsa1hDSXVZRjA2SUhSeWRXVXNYRzU5TzF4dVhHNHZLaXBjYmlBcUlFQjBlWEJsWkdWbUlIdHBiWEJ2Y25Rb0p5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmJXVjBZVzFsZEhKcFkzTW5LUzVOWlhSaFRXVjBjbWxqYzBOdmJuUmxlSFI5SUUxbGRHRk5aWFJ5YVdOelEyOXVkR1Y0ZEZ4dUlDb2dRSFI1Y0dWa1pXWWdlMmx0Y0c5eWRDZ25MaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OXRaWFJoYldWMGNtbGpjeWNwTGsxbGRHRk5aWFJ5YVdOelJYWmxiblJRWVhsc2IyRmtmU0JOWlhSaFRXVjBjbWxqYzBWMlpXNTBVR0Y1Ykc5aFpGeHVJQ29nUUhSNWNHVmtaV1lnZTJsdGNHOXlkQ2duTGk0dkxpNHZMaTR2YzJoaGNtVmtMMk52Ym5OMFlXNTBjeTl0WlhSaGJXVjBjbWxqY3ljcExrMWxkR0ZOWlhSeWFXTnpSWFpsYm5SUGNIUnBiMjV6ZlNCTlpYUmhUV1YwY21samMwVjJaVzUwVDNCMGFXOXVjMXh1SUNvZ1FIUjVjR1ZrWldZZ2UybHRjRzl5ZENnbkxpNHZMaTR2TGk0dmMyaGhjbVZrTDJOdmJuTjBZVzUwY3k5dFpYUmhiV1YwY21samN5Y3BMbE5sWjIxbGJuUkZkbVZ1ZEZCaGVXeHZZV1I5SUZObFoyMWxiblJGZG1WdWRGQmhlV3h2WVdSY2JpQXFJRUIwZVhCbFpHVm1JSHRwYlhCdmNuUW9KeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZiV1YwWVcxbGRISnBZM01uS1M1VFpXZHRaVzUwU1c1MFpYSm1ZV05sZlNCVFpXZHRaVzUwU1c1MFpYSm1ZV05sWEc0Z0tpQkFkSGx3WldSbFppQjdhVzF3YjNKMEtDY3VMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwyMWxkR0Z0WlhSeWFXTnpKeWt1VFdWMFlVMWxkSEpwWTNOUVlXZGxVR0Y1Ykc5aFpIMGdUV1YwWVUxbGRISnBZM05RWVdkbFVHRjViRzloWkZ4dUlDb2dRSFI1Y0dWa1pXWWdlMmx0Y0c5eWRDZ25MaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OXRaWFJoYldWMGNtbGpjeWNwTGsxbGRHRk5aWFJ5YVdOelVHRm5aVTl3ZEdsdmJuTjlJRTFsZEdGTlpYUnlhV056VUdGblpVOXdkR2x2Ym5OY2JpQXFJRUIwZVhCbFpHVm1JSHRwYlhCdmNuUW9KeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZiV1YwWVcxbGRISnBZM01uS1M1TlpYUmhUV1YwY21samMwVjJaVzUwUm5KaFoyMWxiblI5SUUxbGRHRk5aWFJ5YVdOelJYWmxiblJHY21GbmJXVnVkRnh1SUNvZ1FIUjVjR1ZrWldZZ2UybHRjRzl5ZENnbkxpNHZMaTR2TGk0dmMyaGhjbVZrTDJOdmJuTjBZVzUwY3k5dFpYUmhiV1YwY21samN5Y3BMazFsZEdGTlpYUnlhV056VkhKaGFYUnpmU0JOWlhSaFRXVjBjbWxqYzFSeVlXbDBjMXh1SUNvdlhHNWNiaThxS2x4dUlDb2dRSFI1Y0dWa1pXWWdlMjlpYW1WamRIMGdUV1YwWVUxbGRISnBZM05EYjI1MGNtOXNiR1Z5VTNSaGRHVmNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCYmJXVjBZVTFsZEhKcFkzTkpaRjBnTFNCVWFHVWdkWE5sY2lkeklHMWxkR0ZOWlhSeWFXTnpTV1FnZEdoaGRDQjNhV3hzSUdKbFhHNGdLaUFnWVhSMFlXTm9aV1FnZEc4Z1lXeHNJRzV2YmkxaGJtOXVlVzFwZW1Wa0lHVjJaVzUwSUhCaGVXeHZZV1J6WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMkp2YjJ4bFlXNTlJRnR3WVhKMGFXTnBjR0YwWlVsdVRXVjBZVTFsZEhKcFkzTmRJQzBnVkdobElIVnpaWEluY3lCd2NtVm1aWEpsYm1ObElHWnZjbHh1SUNvZ0lIQmhjblJwWTJsd1lYUnBibWNnYVc0Z2RHaGxJRTFsZEdGTlpYUnlhV056SUdGdVlXeDVkR2xqY3lCd2NtOW5jbUZ0TGlCVWFHbHpJSE5sZEhScGJtY2dZMjl1ZEhKdmJITmNiaUFxSUNCM2FHVjBhR1Z5SUc5eUlHNXZkQ0JsZG1WdWRITWdZWEpsSUhSeVlXTnJaV1JjYmlBcUlFQndjbTl3WlhKMGVTQjdlMXR6ZEhKcGJtZGRPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBSbkpoWjIxbGJuUjlmU0JiWm5KaFoyMWxiblJ6WFNBdElFOWlhbVZqZENCclpYbGxaRnh1SUNvZ0lHSjVJRlZWU1VRZ2QybDBhQ0J6ZEc5eVpXUWdabkpoWjIxbGJuUnpJR0Z6SUhaaGJIVmxjeTVjYmlBcUlFQndjbTl3WlhKMGVTQjdRWEp5WVhsOUlGdGxkbVZ1ZEhOQ1pXWnZjbVZOWlhSeWFXTnpUM0IwU1c1ZElDMGdRWEp5WVhrZ2IyWWdjWFZsZFdWa0lHVjJaVzUwY3lCaFpHUmxaQ0JpWldadmNtVmNiaUFxSUNCaElIVnpaWElnYjNCMGN5QnBiblJ2SUcxbGRISnBZM011WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMjlpYW1WamRIMGdXM1J5WVdsMGMxMGdMU0JVY21GcGRITWdkR2hoZENCaGNtVWdibTkwSUdSbGNtbDJaV1FnWm5KdmJTQnZkR2hsY2lCemRHRjBaU0JyWlhsekxseHVJQ29nUUhCeWIzQmxjblI1SUh0U1pXTnZjbVE4YzNSeWFXNW5JR0Z1ZVQ1OUlGdHdjbVYyYVc5MWMxVnpaWEpVY21GcGRITmRJQzBnVkdobElIVnpaWElnZEhKaGFYUnpJSFJvWlNCc1lYTjBYRzRnS2lBZ2RHbHRaU0IwYUdWNUlIZGxjbVVnWTI5dGNIVjBaV1F1WEc0Z0tpOWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1RXVjBZVTFsZEhKcFkzTkRiMjUwY205c2JHVnlJSHRjYmlBZ0x5b3FYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCdmNIUnBiMjV6WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnZjSFJwYjI1ekxuTmxaMjFsYm5RZ0xTQmhiaUJwYm5OMFlXNWpaU0J2WmlCaGJtRnNlWFJwWTNNZ1ptOXlJSFJ5WVdOcmFXNW5YRzRnSUNBcUlDQmxkbVZ1ZEhNZ2RHaGhkQ0JqYjI1bWIzSnRJSFJ2SUhSb1pTQnVaWGNnVFdWMFlVMWxkSEpwWTNNZ2RISmhZMnRwYm1jZ2NHeGhiaTVjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHOXdkR2x2Ym5NdWNISmxabVZ5Wlc1alpYTlRkRzl5WlNBdElGUm9aU0J3Y21WbVpYSmxibU5sY3lCamIyNTBjbTlzYkdWeUlITjBiM0psTENCMWMyVmtYRzRnSUNBcUlDQjBieUJoWTJObGMzTWdZVzVrSUhOMVluTmpjbWxpWlNCMGJ5QndjbVZtWlhKbGJtTmxjeUIwYUdGMElIZHBiR3dnWW1VZ1lYUjBZV05vWldRZ2RHOGdaWFpsYm5SelhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUc5d2RHbHZibk11YjI1T1pYUjNiM0pyUkdsa1EyaGhibWRsSUMwZ1ZYTmxaQ0IwYnlCaGRIUmhZMmdnWVNCc2FYTjBaVzVsY2lCMGJ5QjBhR1ZjYmlBZ0lDb2dJRzVsZEhkdmNtdEVhV1JEYUdGdVoyVWdaWFpsYm5RZ1pXMXBkSFJsWkNCaWVTQjBhR1VnYm1WMGQyOXlhME52Ym5SeWIyeHNaWEpjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdiM0IwYVc5dWN5NW5aWFJEZFhKeVpXNTBRMmhoYVc1SlpDQXRJRWRsZEhNZ2RHaGxJR04xY25KbGJuUWdZMmhoYVc0Z2FXUWdabkp2YlNCMGFHVmNiaUFnSUNvZ0lHNWxkSGR2Y21zZ1kyOXVkSEp2Ykd4bGNseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYjNCMGFXOXVjeTUyWlhKemFXOXVJQzBnVkdobElIWmxjbk5wYjI0Z2IyWWdkR2hsSUdWNGRHVnVjMmx2Ymx4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiM0IwYVc5dWN5NWxiblpwY205dWJXVnVkQ0F0SUZSb1pTQmxiblpwY205dWJXVnVkQ0IwYUdVZ1pYaDBaVzV6YVc5dUlHbHpJSEoxYm01cGJtY2dhVzVjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHOXdkR2x2Ym5NdVpYaDBaVzV6YVc5dUlDMGdkMlZpWlhoMFpXNXphVzl1TFhCdmJIbG1hV3hzWEc0Z0lDQXFJRUJ3WVhKaGJTQjdUV1YwWVUxbGRISnBZM05EYjI1MGNtOXNiR1Z5VTNSaGRHVjlJRzl3ZEdsdmJuTXVhVzVwZEZOMFlYUmxJQzBnVTNSaGRHVWdkRzhnYVc1cGRHbGhiR2w2WldRZ2QybDBhRnh1SUNBZ0tpQkFjR0Z5WVcwZ2IzQjBhVzl1Y3k1allYQjBkWEpsUlhoalpYQjBhVzl1WEc0Z0lDQXFMMXh1SUNCamIyNXpkSEoxWTNSdmNpaDdYRzRnSUNBZ2MyVm5iV1Z1ZEN4Y2JpQWdJQ0J3Y21WbVpYSmxibU5sYzFOMGIzSmxMRnh1SUNBZ0lHOXVUbVYwZDI5eWEwUnBaRU5vWVc1blpTeGNiaUFnSUNCblpYUkRkWEp5Wlc1MFEyaGhhVzVKWkN4Y2JpQWdJQ0IyWlhKemFXOXVMRnh1SUNBZ0lHVnVkbWx5YjI1dFpXNTBMRnh1SUNBZ0lHbHVhWFJUZEdGMFpTeGNiaUFnSUNCbGVIUmxibk5wYjI0c1hHNGdJQ0FnWTJGd2RIVnlaVVY0WTJWd2RHbHZiaUE5SUdSbFptRjFiSFJEWVhCMGRYSmxSWGhqWlhCMGFXOXVMRnh1SUNCOUtTQjdYRzRnSUNBZ2RHaHBjeTVmWTJGd2RIVnlaVVY0WTJWd2RHbHZiaUE5SUNobGNuSXBJRDArSUh0Y2JpQWdJQ0FnSUM4dklGUm9hWE1nYVhNZ1lTQjBaVzF3YjNKaGNua2diV1ZoYzNWeVpTNGdRM1Z5Y21WdWRHeDVJSFJvWlhKbElHRnlaU0JsY25KdmNuTWdabXh2YjJScGJtY2djMlZ1ZEhKNUlHUjFaU0IwYnlCaElIQnliMkpzWlcwZ2FXNGdhRzkzSUhkbElHRnlaU0IwY21GamEybHVaeUJoYm05dWVXMXZkWE5KWkZ4dUlDQWdJQ0FnTHk4Z1YyVWdhVzUwWlc1a0lHOXVJSEpsYlc5MmFXNW5JSFJvYVhNZ1lYTWdjMjl2YmlCaGN5QjNaU0IxYm1SbGNuTjBZVzVrSUdodmR5QjBieUJqYjNKeVpXTjBiSGtnYzI5c2RtVWdkR2hoZENCd2NtOWliR1Z0TGx4dUlDQWdJQ0FnYVdZZ0tDRmxlR05sY0hScGIyNXpWRzlHYVd4MFpYSmJaWEp5TG0xbGMzTmhaMlZkS1NCN1hHNGdJQ0FnSUNBZ0lHTmhjSFIxY21WRmVHTmxjSFJwYjI0b1pYSnlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lHTnZibk4wSUhCeVpXWlRkR0YwWlNBOUlIQnlaV1psY21WdVkyVnpVM1J2Y21VdVoyVjBVM1JoZEdVb0tUdGNiaUFnSUNCMGFHbHpMbU5vWVdsdVNXUWdQU0JuWlhSRGRYSnlaVzUwUTJoaGFXNUpaQ2dwTzF4dUlDQWdJSFJvYVhNdWJHOWpZV3hsSUQwZ2NISmxabE4wWVhSbExtTjFjbkpsYm5STWIyTmhiR1V1Y21Wd2JHRmpaU2duWHljc0lDY3RKeWs3WEc0Z0lDQWdkR2hwY3k1MlpYSnphVzl1SUQxY2JpQWdJQ0FnSUdWdWRtbHliMjV0Wlc1MElEMDlQU0FuY0hKdlpIVmpkR2x2YmljZ1B5QjJaWEp6YVc5dUlEb2dZQ1I3ZG1WeWMybHZibjB0Skh0bGJuWnBjbTl1YldWdWRIMWdPMXh1SUNBZ0lIUm9hWE11WlhoMFpXNXphVzl1SUQwZ1pYaDBaVzV6YVc5dU8xeHVJQ0FnSUhSb2FYTXVaVzUyYVhKdmJtMWxiblFnUFNCbGJuWnBjbTl1YldWdWREdGNibHh1SUNBZ0lHTnZibk4wSUdGaVlXNWtiMjVsWkVaeVlXZHRaVzUwY3lBOUlHOXRhWFJDZVNocGJtbDBVM1JoZEdVL0xtWnlZV2R0Wlc1MGN5d2dKM0JsY25OcGMzUW5LVHRjYmlBZ0lDQmpiMjV6ZENCelpXZHRaVzUwUVhCcFEyRnNiSE1nUFNCcGJtbDBVM1JoZEdVL0xuTmxaMjFsYm5SQmNHbERZV3hzY3lCOGZDQjdmVHRjYmx4dUlDQWdJSFJvYVhNdWMzUnZjbVVnUFNCdVpYY2dUMkp6WlhKMllXSnNaVk4wYjNKbEtIdGNiaUFnSUNBZ0lIQmhjblJwWTJsd1lYUmxTVzVOWlhSaFRXVjBjbWxqY3pvZ2JuVnNiQ3hjYmlBZ0lDQWdJRzFsZEdGTlpYUnlhV056U1dRNklHNTFiR3dzWEc0Z0lDQWdJQ0JsZG1WdWRITkNaV1p2Y21WTlpYUnlhV056VDNCMFNXNDZJRnRkTEZ4dUlDQWdJQ0FnZEhKaGFYUnpPaUI3ZlN4Y2JpQWdJQ0FnSUM0dUxtbHVhWFJUZEdGMFpTeGNiaUFnSUNBZ0lHWnlZV2R0Wlc1MGN6b2dlMXh1SUNBZ0lDQWdJQ0F1TGk1cGJtbDBVM1JoZEdVL0xtWnlZV2R0Wlc1MGN5eGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQnpaV2R0Wlc1MFFYQnBRMkZzYkhNNklIdGNiaUFnSUNBZ0lDQWdMaTR1YzJWbmJXVnVkRUZ3YVVOaGJHeHpMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJSEJ5WldabGNtVnVZMlZ6VTNSdmNtVXVjM1ZpYzJOeWFXSmxLQ2g3SUdOMWNuSmxiblJNYjJOaGJHVWdmU2tnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjeTVzYjJOaGJHVWdQU0JqZFhKeVpXNTBURzlqWVd4bExuSmxjR3hoWTJVb0oxOG5MQ0FuTFNjcE8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2IyNU9aWFIzYjNKclJHbGtRMmhoYm1kbEtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUhSb2FYTXVZMmhoYVc1SlpDQTlJR2RsZEVOMWNuSmxiblJEYUdGcGJrbGtLQ2s3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdkR2hwY3k1elpXZHRaVzUwSUQwZ2MyVm5iV1Z1ZER0Y2JseHVJQ0FnSUM4dklGUnlZV05ySUdGaVlXNWtiMjVsWkNCbWNtRm5iV1Z1ZEhNZ2RHaGhkQ0IzWlhKbGJpZDBJSEJ5YjNCbGNteDVJR05zWldGdVpXUWdkWEF1WEc0Z0lDQWdMeThnUVdKaGJtUnZibVZrSUdaeVlXZHRaVzUwY3lCaGNtVWdkR2h2YzJVZ2RHaGhkQ0IzWlhKbElITjBiM0psWkNCcGJpQndaWEp6YVhOMFpXNTBJRzFsYlc5eWVWeHVJQ0FnSUM4dklHRnVaQ0JoY21VZ1lYWmhhV3hoWW14bElHRjBJR052Ym5SeWIyeHNaWElnYVc1emRHRnVZMlVnWTNKbFlYUnBiMjRzSUdKMWRDQmtieUJ1YjNRZ2FHRjJaU0IwYUdWY2JpQWdJQ0F2THlBbmNHVnljMmx6ZENjZ1pteGhaeUJ6WlhRdUlGUm9hWE1nYldWaGJuTWdZVzU1ZEdsdFpTQjBhR1VnWlhoMFpXNXphVzl1SUdseklIVnViRzlqYTJWa0xDQmhibmxjYmlBZ0lDQXZMeUJtY21GbmJXVnVkSE1nZEdoaGRDQmhjbVVnYm05MElHMWhjbXRsWkNCaGN5QndaWEp6YVhOMFpXNTBJSGRwYkd3Z1ltVWdjSFZ5WjJWa0lHRnVaQ0IwYUdWY2JpQWdJQ0F2THlCbVlXbHNkWEpsSUdWMlpXNTBJSGRwYkd3Z1ltVWdaVzFwZEhSbFpDNWNiaUFnSUNCUFltcGxZM1F1ZG1Gc2RXVnpLR0ZpWVc1a2IyNWxaRVp5WVdkdFpXNTBjeWt1Wm05eVJXRmphQ2dvWm5KaFoyMWxiblFwSUQwK0lIdGNiaUFnSUNBZ0lIUm9hWE11Wm1sdVlXeHBlbVZGZG1WdWRFWnlZV2R0Wlc1MEtHWnlZV2R0Wlc1MExtbGtMQ0I3SUdGaVlXNWtiMjVsWkRvZ2RISjFaU0I5S1R0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUM4dklFTnZaR1VnWW1Wc2IzY2djM1ZpYldsMGN5QmhibmtnY0dWdVpHbHVaeUJ6WldkdFpXNTBRWEJwUTJGc2JITWdkRzhnVTJWbmJXVnVkQ0JwWmk5M2FHVnVJSFJvWlNCamIyNTBjbTlzYkdWeUlHbHpJSEpsTFdsdWMzUmhiblJwWVhSbFpGeHVJQ0FnSUdsbUlDaHBjMDFoYm1sbVpYTjBWak1wSUh0Y2JpQWdJQ0FnSUU5aWFtVmpkQzUyWVd4MVpYTW9jMlZuYldWdWRFRndhVU5oYkd4ektTNW1iM0pGWVdOb0tDaDdJR1YyWlc1MFZIbHdaU3dnY0dGNWJHOWhaQ0I5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTjFZbTFwZEZObFoyMWxiblJCVUVsRFlXeHNLR1YyWlc1MFZIbHdaU3dnY0dGNWJHOWhaQ2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCRGJHOXpaU0J2ZFhRZ1pYWmxiblFnWm5KaFoyMWxiblJ6SUhSb1lYUWdkMlZ5WlNCamNtVmhkR1ZrSUdKMWRDQnViM1FnY0hKdlozSmxjM05sWkM0Z1FXNWNiaUFnSUNBdkx5QnBiblJsY25aaGJDQnBjeUIxYzJWa0lIUnZJSEp2ZFhScGJtVnNlU0JqYUdWamF5QnBaaUJoSUdaeVlXZHRaVzUwSUdoaGN5QnViM1FnWW1WbGJpQjFjR1JoZEdWa1hHNGdJQ0FnTHk4Z2QybDBhR2x1SUhSb1pTQm1jbUZuYldWdWRDZHpJSFJwYldWdmRYUWdkMmx1Wkc5M0xpQlhhR1Z1SUdOeVpXRjBhVzVuSUdFZ2JtVjNJR1YyWlc1MElHWnlZV2R0Wlc1MFhHNGdJQ0FnTHk4Z1lTQjBhVzFsYjNWMElHTmhiaUJpWlNCemNHVmphV1pwWldRZ2RHaGhkQ0IzYVd4c0lHTmhkWE5sSUdGdUlHRmlZVzVrYjI1bFpDQmxkbVZ1ZENCMGJ5QmlaVnh1SUNBZ0lDOHZJSFJ5WVdOclpXUWdhV1lnZEdobElHVjJaVzUwSUdsemJpZDBJSEJ5YjJkeVpYTnpaV1FnZDJsMGFHbHVJSFJvWVhRZ1lXMXZkVzUwSUc5bUlIUnBiV1V1WEc0Z0lDQWdhV1lnS0dselRXRnVhV1psYzNSV015a2dlMXh1SUNBZ0lDQWdMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdibTh0ZFc1a1pXWWdLaTljYmlBZ0lDQWdJR05vY205dFpTNWhiR0Z5YlhNdVoyVjBRV3hzS0NoaGJHRnliWE1wSUQwK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FHRnpRV3hoY20wZ1BTQmphR1ZqYTBGc1lYSnRSWGhwYzNSektGeHVJQ0FnSUNBZ0lDQWdJR0ZzWVhKdGN5eGNiaUFnSUNBZ0lDQWdJQ0JOUlZSQlRVVlVVa2xEVTE5R1NVNUJURWxhUlY5RlZrVk9WRjlHVWtGSFRVVk9WRjlCVEVGU1RTeGNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9JV2hoYzBGc1lYSnRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyaHliMjFsTG1Gc1lYSnRjeTVqY21WaGRHVW9UVVZVUVUxRlZGSkpRMU5mUmtsT1FVeEpXa1ZmUlZaRlRsUmZSbEpCUjAxRlRsUmZRVXhCVWswc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJHRjVTVzVOYVc1MWRHVnpPaUF4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR1Z5YVc5a1NXNU5hVzUxZEdWek9pQXhMRnh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJR05vY205dFpTNWhiR0Z5YlhNdWIyNUJiR0Z5YlM1aFpHUk1hWE4wWlc1bGNpZ29ZV3hoY20xSmJtWnZLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoYkdGeWJVbHVabTh1Ym1GdFpTQTlQVDBnVFVWVVFVMUZWRkpKUTFOZlJrbE9RVXhKV2tWZlJWWkZUbFJmUmxKQlIwMUZUbFJmUVV4QlVrMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbVpwYm1Gc2FYcGxRV0poYm1SdmJtVmtSbkpoWjIxbGJuUnpLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J6WlhSSmJuUmxjblpoYkNnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabWx1WVd4cGVtVkJZbUZ1Wkc5dVpXUkdjbUZuYldWdWRITW9LVHRjYmlBZ0lDQWdJSDBzSUZORlEwOU9SQ0FxSURNd0tUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQm1hVzVoYkdsNlpVRmlZVzVrYjI1bFpFWnlZV2R0Wlc1MGN5Z3BJSHRjYmlBZ0lDQlBZbXBsWTNRdWRtRnNkV1Z6S0hSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tTNW1jbUZuYldWdWRITXBMbVp2Y2tWaFkyZ29LR1p5WVdkdFpXNTBLU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJR1p5WVdkdFpXNTBMblJwYldWdmRYUWdKaVpjYmlBZ0lDQWdJQ0FnUkdGMFpTNXViM2NvS1NBdElHWnlZV2R0Wlc1MExteGhjM1JWY0dSaGRHVmtJQzhnTVRBd01DQStJR1p5WVdkdFpXNTBMblJwYldWdmRYUmNiaUFnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtWnBibUZzYVhwbFJYWmxiblJHY21GbmJXVnVkQ2htY21GbmJXVnVkQzVwWkN3Z2V5QmhZbUZ1Wkc5dVpXUTZJSFJ5ZFdVZ2ZTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JuWlc1bGNtRjBaVTFsZEdGTlpYUnlhV056U1dRb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUdKMVptWmxjbFJ2U0dWNEtGeHVJQ0FnSUNBZ2EyVmpZMkZyS0Z4dUlDQWdJQ0FnSUNCQ2RXWm1aWEl1Wm5KdmJTaGNiaUFnSUNBZ0lDQWdJQ0JUZEhKcGJtY29SR0YwWlM1dWIzY29LU2tnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdVM1J5YVc1bktFMWhkR2d1Y205MWJtUW9UV0YwYUM1eVlXNWtiMjBvS1NBcUlFNTFiV0psY2k1TlFWaGZVMEZHUlY5SlRsUkZSMFZTS1Nrc1hHNGdJQ0FnSUNBZ0lDa3NYRzRnSUNBZ0lDQXBMRnh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxJR0Z1SUdWMlpXNTBJR1p5WVdkdFpXNTBJR2x1SUhOMFlYUmxJR0Z1WkNCeVpYUjFjbTV6SUhSb1pTQmxkbVZ1ZENCbWNtRm5iV1Z1ZENCdlltcGxZM1F1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEVaeVlXZHRaVzUwZlNCdmNIUnBiMjV6SUMwZ1JuSmhaMjFsYm5RZ2MyVjBkR2x1WjNNZ1lXNWtJSEJ5YjNCbGNuUnBaWE5jYmlBZ0lDb2dJSFJ2SUdsdWFYUnBZWFJsSUhSb1pTQm1jbUZuYldWdWRDQjNhWFJvTGx4dUlDQWdLaUJBY21WMGRYSnVjeUI3VFdWMFlVMWxkSEpwWTNORmRtVnVkRVp5WVdkdFpXNTBmVnh1SUNBZ0tpOWNiaUFnWTNKbFlYUmxSWFpsYm5SR2NtRm5iV1Z1ZENodmNIUnBiMjV6S1NCN1hHNGdJQ0FnYVdZZ0tDRnZjSFJwYjI1ekxuTjFZMk5sYzNORmRtVnVkQ0I4ZkNBaGIzQjBhVzl1Y3k1allYUmxaMjl5ZVNrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4dUlDQWdJQ0FnSUNCZ1RYVnpkQ0J6Y0dWamFXWjVJSE4xWTJObGMzTWdaWFpsYm5RZ1lXNWtJR05oZEdWbmIzSjVMaUJUZFdOalpYTnpJR1YyWlc1MElIZGhjem9nSkh0Y2JpQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxtVjJaVzUwWEc0Z0lDQWdJQ0FnSUgwdUlFTmhkR1ZuYjNKNUlIZGhjem9nSkh0dmNIUnBiMjV6TG1OaGRHVm5iM0o1ZlM0Z1VHRjViRzloWkNCclpYbHpJSGRsY21VNklDUjdUMkpxWldOMExtdGxlWE1vWEc0Z0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3l4Y2JpQWdJQ0FnSUNBZ0tYMHVJQ1I3WEc0Z0lDQWdJQ0FnSUNBZ2RIbHdaVzltSUc5d2RHbHZibk11Y0hKdmNHVnlkR2xsY3lBOVBUMGdKMjlpYW1WamRDZGNiaUFnSUNBZ0lDQWdJQ0FnSUQ4Z1lGQmhlV3h2WVdRZ2NISnZjR1Z5ZEhrZ2EyVjVjeUIzWlhKbE9pQWtlMDlpYW1WamRDNXJaWGx6S0c5d2RHbHZibk11Y0hKdmNHVnlkR2xsY3lsOVlGeHVJQ0FnSUNBZ0lDQWdJQ0FnT2lBbkoxeHVJQ0FnSUNBZ0lDQjlZQ3hjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2V5Qm1jbUZuYldWdWRITWdmU0E5SUhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tUdGNibHh1SUNBZ0lHTnZibk4wSUdsa0lEMGdiM0IwYVc5dWN5NTFibWx4ZFdWSlpHVnVkR2xtYVdWeUlEOC9JSFYxYVdSMk5DZ3BPMXh1SUNBZ0lHTnZibk4wSUdaeVlXZHRaVzUwSUQwZ2UxeHVJQ0FnSUNBZ2FXUXNYRzRnSUNBZ0lDQXVMaTV2Y0hScGIyNXpMRnh1SUNBZ0lDQWdiR0Z6ZEZWd1pHRjBaV1E2SUVSaGRHVXVibTkzS0Nrc1hHNGdJQ0FnZlR0Y2JpQWdJQ0IwYUdsekxuTjBiM0psTG5Wd1pHRjBaVk4wWVhSbEtIdGNiaUFnSUNBZ0lHWnlZV2R0Wlc1MGN6b2dlMXh1SUNBZ0lDQWdJQ0F1TGk1bWNtRm5iV1Z1ZEhNc1hHNGdJQ0FnSUNBZ0lGdHBaRjA2SUdaeVlXZHRaVzUwTEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtbHVhWFJwWVd4RmRtVnVkQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NTBjbUZqYTBWMlpXNTBLSHRjYmlBZ0lDQWdJQ0FnWlhabGJuUTZJR1p5WVdkdFpXNTBMbWx1YVhScFlXeEZkbVZ1ZEN4Y2JpQWdJQ0FnSUNBZ1kyRjBaV2R2Y25rNklHWnlZV2R0Wlc1MExtTmhkR1ZuYjNKNUxGeHVJQ0FnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUJtY21GbmJXVnVkQzV3Y205d1pYSjBhV1Z6TEZ4dUlDQWdJQ0FnSUNCelpXNXphWFJwZG1WUWNtOXdaWEowYVdWek9pQm1jbUZuYldWdWRDNXpaVzV6YVhScGRtVlFjbTl3WlhKMGFXVnpMRnh1SUNBZ0lDQWdJQ0J3WVdkbE9pQm1jbUZuYldWdWRDNXdZV2RsTEZ4dUlDQWdJQ0FnSUNCeVpXWmxjbkpsY2pvZ1puSmhaMjFsYm5RdWNtVm1aWEp5WlhJc1hHNGdJQ0FnSUNBZ0lISmxkbVZ1ZFdVNklHWnlZV2R0Wlc1MExuSmxkbVZ1ZFdVc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lCbWNtRm5iV1Z1ZEM1MllXeDFaU3hjYmlBZ0lDQWdJQ0FnWTNWeWNtVnVZM2s2SUdaeVlXZHRaVzUwTG1OMWNuSmxibU41TEZ4dUlDQWdJQ0FnSUNCbGJuWnBjbTl1YldWdWRGUjVjR1U2SUdaeVlXZHRaVzUwTG1WdWRtbHliMjV0Wlc1MFZIbHdaU3hjYmlBZ0lDQWdJQ0FnWVdOMGFXOXVTV1E2SUc5d2RHbHZibk11WVdOMGFXOXVTV1FzWEc0Z0lDQWdJQ0FnSUhWdWFYRjFaVWxrWlc1MGFXWnBaWEk2SUc5d2RHbHZibk11ZFc1cGNYVmxTV1JsYm5ScFptbGxjaXhjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQm1jbUZuYldWdWREdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJSFJvWlNCbWNtRm5iV1Z1ZENCemRHOXlaV1FnYVc0Z2JXVnRiM0o1SUhkcGRHZ2djSEp2ZG1sa1pXUWdhV1FnYjNJZ2RXNWtaV1pwYm1Wa0lHbG1JR2wwWEc0Z0lDQXFJR1J2WlhNZ2JtOTBJR1Y0YVhOMExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdhV1FnTFNCcFpDQnZaaUJtY21GbmJXVnVkQ0IwYnlCeVpYUnlhV1YyWlZ4dUlDQWdLaUJBY21WMGRYSnVjeUI3VzAxbGRHRk5aWFJ5YVdOelJYWmxiblJHY21GbmJXVnVkRjE5WEc0Z0lDQXFMMXh1SUNCblpYUkZkbVZ1ZEVaeVlXZHRaVzUwUW5sSlpDaHBaQ2tnZTF4dUlDQWdJR052Ym5OMElIc2dabkpoWjIxbGJuUnpJSDBnUFNCMGFHbHpMbk4wYjNKbExtZGxkRk4wWVhSbEtDazdYRzVjYmlBZ0lDQmpiMjV6ZENCbWNtRm5iV1Z1ZENBOUlHWnlZV2R0Wlc1MGMxdHBaRjA3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdabkpoWjIxbGJuUTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhCa1lYUmxjeUJoYmlCbGRtVnVkQ0JtY21GbmJXVnVkQ0JwYmlCemRHRjBaVnh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYVdRZ0xTQlVhR1VnWm5KaFoyMWxiblFnYVdRZ2RHOGdkWEJrWVhSbFhHNGdJQ0FxSUVCd1lYSmhiU0I3VFdWMFlVMWxkSEpwWTNORmRtVnVkRVp5WVdkdFpXNTBmU0J3WVhsc2IyRmtJQzBnUm5KaFoyMWxiblFnYzJWMGRHbHVaM01nWVc1a1hHNGdJQ0FxSUNCd2NtOXdaWEowYVdWeklIUnZJR2x1YVhScFlYUmxJSFJvWlNCbWNtRm5iV1Z1ZENCM2FYUm9MbHh1SUNBZ0tpOWNiaUFnZFhCa1lYUmxSWFpsYm5SR2NtRm5iV1Z1ZENocFpDd2djR0Y1Ykc5aFpDa2dlMXh1SUNBZ0lHTnZibk4wSUhzZ1puSmhaMjFsYm5SeklIMGdQU0IwYUdsekxuTjBiM0psTG1kbGRGTjBZWFJsS0NrN1hHNWNiaUFnSUNCamIyNXpkQ0JtY21GbmJXVnVkQ0E5SUdaeVlXZHRaVzUwYzF0cFpGMDdYRzVjYmlBZ0lDQnBaaUFvSVdaeVlXZHRaVzUwS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUVWMlpXNTBJR1p5WVdkdFpXNTBJSGRwZEdnZ2FXUWdKSHRwWkgwZ1pHOWxjeUJ1YjNRZ1pYaHBjM1F1WUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NXpkRzl5WlM1MWNHUmhkR1ZUZEdGMFpTaDdYRzRnSUNBZ0lDQm1jbUZuYldWdWRITTZJSHRjYmlBZ0lDQWdJQ0FnTGk0dVpuSmhaMjFsYm5SekxGeHVJQ0FnSUNBZ0lDQmJhV1JkT2lCdFpYSm5aU2htY21GbmJXVnVkSE5iYVdSZExDQjdYRzRnSUNBZ0lDQWdJQ0FnTGk0dWNHRjViRzloWkN4Y2JpQWdJQ0FnSUNBZ0lDQnNZWE4wVlhCa1lYUmxaRG9nUkdGMFpTNXViM2NvS1N4Y2JpQWdJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVacGJtRnNhWHBsY3lCaElHWnlZV2R0Wlc1MExDQjBjbUZqYTJsdVp5QmxhWFJvWlhJZ1lTQnpkV05qWlhOeklHVjJaVzUwSUc5eUlHWmhhV3gxY21VZ1JYWmxiblJjYmlBZ0lDb2dZVzVrSUhSb1pXNGdjbVZ0YjNabGN5QjBhR1VnWm5KaFoyMWxiblFnWm5KdmJTQnpkR0YwWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHbGtJQzBnVlZWSlJDQnZaaUIwYUdVZ1pYWmxiblFnWm5KaFoyMWxiblFnZEc4Z1ltVWdZMnh2YzJWa1hHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J2Y0hScGIyNXpYRzRnSUNBcUlFQndZWEpoYlNCN1ltOXZiR1ZoYm4wZ1cyOXdkR2x2Ym5NdVlXSmhibVJ2Ym1Wa1hTQXRJR2xtSUhSeWRXVWdkSEpoWTJzZ2RHaGxJR1poYVd4MWNtVmNiaUFnSUNvZ0lHVjJaVzUwSUdsdWMzUmxZV1FnYjJZZ2RHaGxJSE4xWTJObGMzTWdaWFpsYm5SY2JpQWdJQ29nUUhCaGNtRnRJSHROWlhSaFRXVjBjbWxqYzBOdmJuUmxlSFF1Y0dGblpYMGdXMjl3ZEdsdmJuTXVjR0ZuWlYwZ0xTQndZV2RsSUhSb1pTQm1hVzVoYkNCbGRtVnVkRnh1SUNBZ0tpQWdiMk5qZFhKeVpXUWdiMjR1SUZSb2FYTWdkMmxzYkNCdmRtVnljbWxrWlNCM2FHRjBaWFpsY2lCcGN5QnpaWFFnYjI0Z2RHaGxJR1p5WVdkdFpXNTBYRzRnSUNBcUlFQndZWEpoYlNCN1RXVjBZVTFsZEhKcFkzTkRiMjUwWlhoMExuSmxabVZ5Y21WeWZTQmJiM0IwYVc5dWN5NXlaV1psY25KbGNsMGdMU0JFWVhCd0lIUm9ZWFJjYmlBZ0lDb2dJRzl5YVdkcGJtRjBaV1FnZEdobElHWnlZV2R0Wlc1MExpQlVhR2x6SUdseklHWnZjaUJtWVd4c1ltRmpheUJ2Ym14NUxDQjBhR1VnWm5KaFoyMWxiblFnY21WbVpYSnlaWEpjYmlBZ0lDb2dJSEJ5YjNCbGNuUjVJSGRwYkd3Z2RHRnJaU0J3Y21WalpXUmxibU5sTGx4dUlDQWdLaTljYmlBZ1ptbHVZV3hwZW1WRmRtVnVkRVp5WVdkdFpXNTBLR2xrTENCN0lHRmlZVzVrYjI1bFpDQTlJR1poYkhObExDQndZV2RsTENCeVpXWmxjbkpsY2lCOUlEMGdlMzBwSUh0Y2JpQWdJQ0JqYjI1emRDQm1jbUZuYldWdWRDQTlJSFJvYVhNdWMzUnZjbVV1WjJWMFUzUmhkR1VvS1M1bWNtRm5iV1Z1ZEhOYmFXUmRPMXh1SUNBZ0lHbG1JQ2doWm5KaFoyMWxiblFwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnUm5WdWJtVnNJSGRwZEdnZ2FXUWdKSHRwWkgwZ1pHOWxjeUJ1YjNRZ1pYaHBjM1F1WUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdaWFpsYm5ST1lXMWxJRDBnWVdKaGJtUnZibVZrSUQ4Z1puSmhaMjFsYm5RdVptRnBiSFZ5WlVWMlpXNTBJRG9nWm5KaFoyMWxiblF1YzNWalkyVnpjMFYyWlc1ME8xeHVYRzRnSUNBZ2RHaHBjeTUwY21GamEwVjJaVzUwS0h0Y2JpQWdJQ0FnSUdWMlpXNTBPaUJsZG1WdWRFNWhiV1VzWEc0Z0lDQWdJQ0JqWVhSbFoyOXllVG9nWm5KaFoyMWxiblF1WTJGMFpXZHZjbmtzWEc0Z0lDQWdJQ0J3Y205d1pYSjBhV1Z6T2lCbWNtRm5iV1Z1ZEM1d2NtOXdaWEowYVdWekxGeHVJQ0FnSUNBZ2MyVnVjMmwwYVhabFVISnZjR1Z5ZEdsbGN6b2dabkpoWjIxbGJuUXVjMlZ1YzJsMGFYWmxVSEp2Y0dWeWRHbGxjeXhjYmlBZ0lDQWdJSEJoWjJVNklIQmhaMlVnUHo4Z1puSmhaMjFsYm5RdWNHRm5aU3hjYmlBZ0lDQWdJSEpsWm1WeWNtVnlPaUJtY21GbmJXVnVkQzV5WldabGNuSmxjaUEvUHlCeVpXWmxjbkpsY2l4Y2JpQWdJQ0FnSUhKbGRtVnVkV1U2SUdaeVlXZHRaVzUwTG5KbGRtVnVkV1VzWEc0Z0lDQWdJQ0IyWVd4MVpUb2dabkpoWjIxbGJuUXVkbUZzZFdVc1hHNGdJQ0FnSUNCamRYSnlaVzVqZVRvZ1puSmhaMjFsYm5RdVkzVnljbVZ1WTNrc1hHNGdJQ0FnSUNCbGJuWnBjbTl1YldWdWRGUjVjR1U2SUdaeVlXZHRaVzUwTG1WdWRtbHliMjV0Wlc1MFZIbHdaU3hjYmlBZ0lDQWdJR0ZqZEdsdmJrbGtPaUJtY21GbmJXVnVkQzVoWTNScGIyNUpaQ3hjYmlBZ0lDQWdJQzh2SUZkbElHRndjR1Z1WkNCemRXTmpaWE56SUc5eUlHWmhhV3gxY21VZ2RHOGdkR2hsSUhWdWFYRjFaUzFwWkdWdWRHbG1hV1Z5SUhOdklIUm9ZWFFnZEdobFhHNGdJQ0FnSUNBdkx5QnRaWE56WVdkbFNXUWdZMkZ1SUhOMGFXeHNJR0psSUdsa1pXMXdiM1JsYm5Rc0lHSjFkQ0J6YnlCMGFHRjBJR2wwSUdScFptWmxjbk1nWm5KdmJTQjBhR1ZjYmlBZ0lDQWdJQzh2SUdsdWFYUnBZV3dnWlhabGJuUWdabWx5WldRdUlGUm9aU0JwYm1sMGFXRnNJR1YyWlc1MElIZGhjeUJ3Y21WMlpXNTBhVzVuSUc1bGR5QmxkbVZ1ZEhNZ1puSnZiVnh1SUNBZ0lDQWdMeThnYldGcmFXNW5JR2wwSUhSdklHMXBlSEJoYm1Wc0lHSmxZMkYxYzJVZ2RHaGxlU0IzWlhKbElIVnphVzVuSUhSb1pTQnpZVzFsSUhWdWFYRjFaU0JKUkNCaGMxeHVJQ0FnSUNBZ0x5OGdkR2hsSUdWMlpXNTBjeUJ3Y205alpYTnpaV1FnYVc0Z2IzUm9aWElnY0dGeWRITWdiMllnZEdobElHWnlZV2R0Wlc1MElHeHBabVZqZVdOc1pTNWNiaUFnSUNBZ0lIVnVhWEYxWlVsa1pXNTBhV1pwWlhJNklHWnlZV2R0Wlc1MExuVnVhWEYxWlVsa1pXNTBhV1pwWlhKY2JpQWdJQ0FnSUNBZ1B5QmdKSHRtY21GbmJXVnVkQzUxYm1seGRXVkpaR1Z1ZEdsbWFXVnlmUzBrZTJGaVlXNWtiMjVsWkNBL0lDZG1ZV2xzZFhKbEp5QTZJQ2R6ZFdOalpYTnpKMzFnWEc0Z0lDQWdJQ0FnSURvZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUgwcE8xeHVJQ0FnSUdOdmJuTjBJSHNnWm5KaFoyMWxiblJ6SUgwZ1BTQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2s3WEc0Z0lDQWdaR1ZzWlhSbElHWnlZV2R0Wlc1MGMxdHBaRjA3WEc0Z0lDQWdkR2hwY3k1emRHOXlaUzUxY0dSaGRHVlRkR0YwWlNoN0lHWnlZV2R0Wlc1MGN5QjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRFlXeHNjeUIwYUdsekxsOXBaR1Z1ZEdsbWVTQjNhWFJvSUhaaGJHbGtZWFJsWkNCdFpYUmhUV1YwY21samMwbGtJR0Z1WkNCMWMyVnlJSFJ5WVdsMGN5QnBaaUIxYzJWeUlHbHpJSEJoY25ScFkybHdZWFJwYm1kY2JpQWdJQ29nYVc0Z2RHaGxJRTFsZEdGTlpYUnlhV056SUdGdVlXeDVkR2xqY3lCd2NtOW5jbUZ0WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCMWMyVnlWSEpoYVhSelhHNGdJQ0FxTDF4dUlDQnBaR1Z1ZEdsbWVTaDFjMlZ5VkhKaGFYUnpLU0I3WEc0Z0lDQWdZMjl1YzNRZ2V5QnRaWFJoVFdWMGNtbGpjMGxrTENCd1lYSjBhV05wY0dGMFpVbHVUV1YwWVUxbGRISnBZM01nZlNBOUlIUm9hWE11YzNSaGRHVTdYRzVjYmlBZ0lDQnBaaUFvSVhCaGNuUnBZMmx3WVhSbFNXNU5aWFJoVFdWMGNtbGpjeUI4ZkNBaGJXVjBZVTFsZEhKcFkzTkpaQ0I4ZkNBaGRYTmxjbFJ5WVdsMGN5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhWelpYSlVjbUZwZEhNZ0lUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b1hHNGdJQ0FnSUNBZ0lHQk5aWFJoVFdWMGNtbGpjME52Ym5SeWIyeHNaWElqYVdSbGJuUnBabms2SUhWelpYSlVjbUZwZEhNZ2NHRnlZVzFsZEdWeUlHMTFjM1FnWW1VZ1lXNGdiMkpxWldOMExpQlNaV05sYVhabFpDQjBlWEJsT2lBa2UzUjVjR1Z2WmlCMWMyVnlWSEpoYVhSemZXQXNYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJR0ZzYkZaaGJHbGtWSEpoYVhSeklEMGdkR2hwY3k1ZlluVnBiR1JXWVd4cFpGUnlZV2wwY3loMWMyVnlWSEpoYVhSektUdGNibHh1SUNBZ0lIUm9hWE11WDJsa1pXNTBhV1o1S0dGc2JGWmhiR2xrVkhKaGFYUnpLVHRjYmlBZ2ZWeHVYRzRnSUM4dklFbDBJSE5sZEhNZ1lXNGdkVzVwYm5OMFlXeHNJRlZTVENBb1hDSlRiM0p5ZVNCMGJ5QnpaV1VnZVc5MUlHZHZJVndpSUhCaFoyVXBMRnh1SUNBdkx5QjNhR2xqYUNCcGN5QnZjR1Z1WldRZ2FXWWdZU0IxYzJWeUlIVnVhVzV6ZEdGc2JITWdkR2hsSUdWNGRHVnVjMmx2Ymk1Y2JpQWdkWEJrWVhSbFJYaDBaVzV6YVc5dVZXNXBibk4wWVd4c1ZYSnNLSEJoY25ScFkybHdZWFJsU1c1TlpYUmhUV1YwY21samN5d2diV1YwWVUxbGRISnBZM05KWkNrZ2UxeHVJQ0FnSUdOdmJuTjBJSEYxWlhKNUlEMGdlMzA3WEc0Z0lDQWdhV1lnS0hCaGNuUnBZMmx3WVhSbFNXNU5aWFJoVFdWMGNtbGpjeWtnZTF4dUlDQWdJQ0FnTHk4Z1YyVWdiMjVzZVNCM1lXNTBJSFJ2SUhSeVlXTnJJSFJvWlhObElIUm9hVzVuY3lCcFppQmhJSFZ6WlhJZ2IzQjBaV1FnYVc1MGJ5QnRaWFJ5YVdOekxseHVJQ0FnSUNBZ2NYVmxjbmt1YlcxcElEMGdRblZtWm1WeUxtWnliMjBvYldWMFlVMWxkSEpwWTNOSlpDa3VkRzlUZEhKcGJtY29KMkpoYzJVMk5DY3BPMXh1SUNBZ0lDQWdjWFZsY25rdVpXNTJJRDBnZEdocGN5NWxiblpwY205dWJXVnVkRHRjYmlBZ0lDQWdJSEYxWlhKNUxtRjJJRDBnZEdocGN5NTJaWEp6YVc5dU8xeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1emRDQnhkV1Z5ZVZOMGNtbHVaeUE5SUc1bGR5QlZVa3hUWldGeVkyaFFZWEpoYlhNb2NYVmxjbmtwTzF4dVhHNGdJQ0FnTHk4Z2RHaHBjeTVsZUhSbGJuTnBiMjRnYm05MElHTjFjbkpsYm5Sc2VTQmtaV1pwYm1Wa0lHbHVJSFJsYzNSelhHNGdJQ0FnYVdZZ0tIUm9hWE11WlhoMFpXNXphVzl1SUNZbUlIUm9hWE11WlhoMFpXNXphVzl1TG5KMWJuUnBiV1VwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVaWGgwWlc1emFXOXVMbkoxYm5ScGJXVXVjMlYwVlc1cGJuTjBZV3hzVlZKTUtGeHVJQ0FnSUNBZ0lDQmdKSHRGV0ZSRlRsTkpUMDVmVlU1SlRsTlVRVXhNWDFWU1RIMC9KSHR4ZFdWeWVWTjBjbWx1WjMxZ0xGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMlYwZEdWeUlHWnZjaUIwYUdVZ1lIQmhjblJwWTJsd1lYUmxTVzVOWlhSaFRXVjBjbWxqYzJBZ2NISnZjR1Z5ZEhsY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdGliMjlzWldGdWZTQndZWEowYVdOcGNHRjBaVWx1VFdWMFlVMWxkSEpwWTNNZ0xTQlhhR1YwYUdWeUlHOXlJRzV2ZENCMGFHVWdkWE5sY2lCM1lXNTBjMXh1SUNBZ0tpQWdkRzhnY0dGeWRHbGphWEJoZEdVZ2FXNGdUV1YwWVUxbGRISnBZM05jYmlBZ0lDb2dRSEpsZEhWeWJuTWdlM04wY21sdVozeHVkV3hzZlNCMGFHVWdjM1J5YVc1bklHOW1JSFJvWlNCdVpYY2diV1YwWVcxbGRISnBZM01nYVdRc0lHOXlJRzUxYkd4Y2JpQWdJQ29nSUdsbUlHNXZkQ0J6WlhSY2JpQWdJQ292WEc0Z0lITmxkRkJoY25ScFkybHdZWFJsU1c1TlpYUmhUV1YwY21samN5aHdZWEowYVdOcGNHRjBaVWx1VFdWMFlVMWxkSEpwWTNNcElIdGNiaUFnSUNCc1pYUWdleUJ0WlhSaFRXVjBjbWxqYzBsa0lIMGdQU0IwYUdsekxuTjBZWFJsTzF4dUlDQWdJR2xtSUNod1lYSjBhV05wY0dGMFpVbHVUV1YwWVUxbGRISnBZM01nSmlZZ0lXMWxkR0ZOWlhSeWFXTnpTV1FwSUh0Y2JpQWdJQ0FnSUcxbGRHRk5aWFJ5YVdOelNXUWdQU0IwYUdsekxtZGxibVZ5WVhSbFRXVjBZVTFsZEhKcFkzTkpaQ2dwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvY0dGeWRHbGphWEJoZEdWSmJrMWxkR0ZOWlhSeWFXTnpJRDA5UFNCbVlXeHpaU2tnZTF4dUlDQWdJQ0FnYldWMFlVMWxkSEpwWTNOSlpDQTlJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdWMzUnZjbVV1ZFhCa1lYUmxVM1JoZEdVb2V5QndZWEowYVdOcGNHRjBaVWx1VFdWMFlVMWxkSEpwWTNNc0lHMWxkR0ZOWlhSeWFXTnpTV1FnZlNrN1hHNGdJQ0FnYVdZZ0tIQmhjblJwWTJsd1lYUmxTVzVOWlhSaFRXVjBjbWxqY3lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUwY21GamEwVjJaVzUwYzBGbWRHVnlUV1YwY21samMwOXdkRWx1S0NrN1hHNGdJQ0FnSUNCMGFHbHpMbU5zWldGeVJYWmxiblJ6UVdaMFpYSk5aWFJ5YVdOelQzQjBTVzRvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxuVndaR0YwWlVWNGRHVnVjMmx2YmxWdWFXNXpkR0ZzYkZWeWJDaHdZWEowYVdOcGNHRjBaVWx1VFdWMFlVMWxkSEpwWTNNc0lHMWxkR0ZOWlhSeWFXTnpTV1FwTzF4dUlDQWdJSEpsZEhWeWJpQnRaWFJoVFdWMGNtbGpjMGxrTzF4dUlDQjlYRzVjYmlBZ1oyVjBJSE4wWVhSbEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk4wYjNKbExtZGxkRk4wWVhSbEtDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nZEhKaFkyc2dZU0J3WVdkbElIWnBaWGNnZDJsMGFDQlRaV2R0Wlc1MFhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdUV1YwWVUxbGRISnBZM05RWVdkbFVHRjViRzloWkgwZ2NHRjViRzloWkNBdElHUmxkR0ZwYkhNZ2IyWWdkR2hsSUhCaFoyVWdkbWxsZDJWa1hHNGdJQ0FxSUVCd1lYSmhiU0I3VFdWMFlVMWxkSEpwWTNOUVlXZGxUM0IwYVc5dWMzMGdXMjl3ZEdsdmJuTmRJQzBnYjNCMGFXOXVjeUJtYjNJZ2FHRnVaR3hwYm1jZ2RHaGxJSEJoWjJWY2JpQWdJQ29nSUhacFpYZGNiaUFnSUNvdlhHNGdJSFJ5WVdOclVHRm5aU2hjYmlBZ0lDQjdJRzVoYldVc0lIQmhjbUZ0Y3l3Z1pXNTJhWEp2Ym0xbGJuUlVlWEJsTENCd1lXZGxMQ0J5WldabGNuSmxjaXdnWVdOMGFXOXVTV1FnZlN4Y2JpQWdJQ0J2Y0hScGIyNXpMRnh1SUNBcElIdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVjM1JoZEdVdWNHRnlkR2xqYVhCaGRHVkpiazFsZEdGTlpYUnlhV056SUQwOVBTQm1ZV3h6WlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkR0YwWlM1d1lYSjBhV05wY0dGMFpVbHVUV1YwWVUxbGRISnBZM01nUFQwOUlHNTFiR3dnSmlaY2JpQWdJQ0FnSUNBZ0lXOXdkR2x2Ym5NL0xtbHpUM0IwU1c1UVlYUm9YRzRnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZMjl1YzNRZ2V5QnRaWFJoVFdWMGNtbGpjMGxrSUgwZ1BTQjBhR2x6TG5OMFlYUmxPMXh1SUNBZ0lDQWdZMjl1YzNRZ2FXUlVjbUZwZENBOUlHMWxkR0ZOWlhSeWFXTnpTV1FnUHlBbmRYTmxja2xrSnlBNklDZGhibTl1ZVcxdmRYTkpaQ2M3WEc0Z0lDQWdJQ0JqYjI1emRDQnBaRlpoYkhWbElEMGdiV1YwWVUxbGRISnBZM05KWkNBL1B5Qk5SVlJCVFVWVVVrbERVMTlCVGs5T1dVMVBWVk5mU1VRN1hHNGdJQ0FnSUNCMGFHbHpMbDl6ZFdKdGFYUlRaV2R0Wlc1MFFWQkpRMkZzYkNnbmNHRm5aU2NzSUh0Y2JpQWdJQ0FnSUNBZ2JXVnpjMkZuWlVsa09pQmlkV2xzWkZWdWFYRjFaVTFsYzNOaFoyVkpaQ2g3SUdGamRHbHZia2xrSUgwcExGeHVJQ0FnSUNBZ0lDQmJhV1JVY21GcGRGMDZJR2xrVm1Gc2RXVXNYRzRnSUNBZ0lDQWdJRzVoYldVc1hHNGdJQ0FnSUNBZ0lIQnliM0JsY25ScFpYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNCd1lYSmhiWE1zWEc0Z0lDQWdJQ0FnSUNBZ2JHOWpZV3hsT2lCMGFHbHpMbXh2WTJGc1pTeGNiaUFnSUNBZ0lDQWdJQ0JqYUdGcGJsOXBaRG9nZEdocGN5NWphR0ZwYmtsa0xGeHVJQ0FnSUNBZ0lDQWdJR1Z1ZG1seWIyNXRaVzUwWDNSNWNHVTZJR1Z1ZG1seWIyNXRaVzUwVkhsd1pTeGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWTI5dWRHVjRkRG9nZEdocGN5NWZZblZwYkdSRGIyNTBaWGgwS0hKbFptVnljbVZ5TENCd1lXZGxLU3hjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmWTJGd2RIVnlaVVY0WTJWd2RHbHZiaWhsY25JcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQnpkV0p0YVhSeklHRWdiV1YwWVcxbGRISnBZM01nWlhabGJuUXNJRzV2ZENCM1lXbDBhVzVuSUdadmNpQnBkQ0IwYnlCamIyMXdiR1YwWlNCdmNpQmhiR3h2ZDJsdVp5QnBkSE1nWlhKeWIzSWdkRzhnWW5WaVlteGxJSFZ3WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEZCaGVXeHZZV1I5SUhCaGVXeHZZV1FnTFNCa1pYUmhhV3h6SUc5bUlIUm9aU0JsZG1WdWRGeHVJQ0FnS2lCQWNHRnlZVzBnZTAxbGRHRk5aWFJ5YVdOelJYWmxiblJQY0hScGIyNXpmU0JiYjNCMGFXOXVjMTBnTFNCdmNIUnBiMjV6SUdadmNpQm9ZVzVrYkdsdVp5OXliM1YwYVc1bklIUm9aU0JsZG1WdWRGeHVJQ0FnS2k5Y2JpQWdkSEpoWTJ0RmRtVnVkQ2h3WVhsc2IyRmtMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdMeThnZG1Gc2FXUmhkR2x2YmlCcGN5QnViM1FnWTJGMVoyaDBJR0Z1WkNCb1lXNWtiR1ZrWEc0Z0lDQWdkR2hwY3k1MllXeHBaR0YwWlZCaGVXeHZZV1FvY0dGNWJHOWhaQ2s3WEc0Z0lDQWdkR2hwY3k1emRXSnRhWFJGZG1WdWRDaHdZWGxzYjJGa0xDQnZjSFJwYjI1ektTNWpZWFJqYUNnb1pYSnlLU0E5UGx4dUlDQWdJQ0FnZEdocGN5NWZZMkZ3ZEhWeVpVVjRZMlZ3ZEdsdmJpaGxjbklwTEZ4dUlDQWdJQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ2MzVmliV2wwY3lBb2IzSWdjWFZsZFdWeklHWnZjaUJ6ZFdKdGFYTnphVzl1S1NCaElHMWxkR0Z0WlhSeWFXTnpJR1YyWlc1MExDQndaWEptYjNKdGFXNW5JRzVsWTJWemMyRnllU0J3WVhsc2IyRmtJRzFoYm1sd2RXeGhkR2x2YmlCaGJtUmNiaUFnSUNvZ2NtOTFkR2x1WnlCMGFHVWdaWFpsYm5RZ2RHOGdkR2hsSUdGd2NISnZjSEpwWVhSbElITmxaMjFsYm5RZ2MyOTFjbU5sTGlCWGFXeHNJSE53YkdsMElHVjJaVzUwYzF4dUlDQWdLaUIzYVhSb0lITmxibk5wZEdsMlpWQnliM0JsY25ScFpYTWdhVzUwYnlCMGQyOGdaWFpsYm5SekxDQjBjbUZqYTJsdVp5QjBhR1VnYzJWdWMybDBhWFpsVUhKdmNHVnlkR2xsYzF4dUlDQWdLaUIzYVhSb0lIUm9aU0JoYm05dWVXMXZkWE5KWkNCdmJteDVMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTAxbGRHRk5aWFJ5YVdOelJYWmxiblJRWVhsc2IyRmtmU0J3WVhsc2IyRmtJQzBnWkdWMFlXbHNjeUJ2WmlCMGFHVWdaWFpsYm5SY2JpQWdJQ29nUUhCaGNtRnRJSHROWlhSaFRXVjBjbWxqYzBWMlpXNTBUM0IwYVc5dWMzMGdXMjl3ZEdsdmJuTmRJQzBnYjNCMGFXOXVjeUJtYjNJZ2FHRnVaR3hwYm1jdmNtOTFkR2x1WnlCMGFHVWdaWFpsYm5SY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFCeWIyMXBjMlU4ZG05cFpENTlYRzRnSUNBcUwxeHVJQ0JoYzNsdVl5QnpkV0p0YVhSRmRtVnVkQ2h3WVhsc2IyRmtMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdkR2hwY3k1MllXeHBaR0YwWlZCaGVXeHZZV1FvY0dGNWJHOWhaQ2s3WEc1Y2JpQWdJQ0JwWmlBb0lYUm9hWE11YzNSaGRHVXVjR0Z5ZEdsamFYQmhkR1ZKYmsxbGRHRk5aWFJ5YVdOeklDWW1JQ0Z2Y0hScGIyNXpQeTVwYzA5d2RFbHVLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdWMlVnYldsbmFIUWdkSEpoWTJzZ2JYVnNkR2x3YkdVZ1pYWmxiblJ6SUdsbUlITmxibk5wZEdsMlpWQnliM0JsY25ScFpYTWdhWE1nYVc1amJIVmtaV1FzSUhSb2FYTWdZWEp5WVhrZ2QybHNiQ0JvYjJ4a1hHNGdJQ0FnTHk4Z2RHaGxJSEJ5YjIxcGMyVnpJSEpsZEhWeWJtVmtJR1p5YjIwZ2RHaHBjeTVmZEhKaFkyc3VYRzRnSUNBZ1kyOXVjM1FnWlhabGJuUnpJRDBnVzEwN1hHNWNiaUFnSUNCcFppQW9jR0Y1Ykc5aFpDNXpaVzV6YVhScGRtVlFjbTl3WlhKMGFXVnpLU0I3WEc0Z0lDQWdJQ0F2THlCelpXNXphWFJwZG1WUWNtOXdaWEowYVdWeklIZHBiR3dnYjI1c2VTQmlaU0IwY21GamEyVmtJSFZ6YVc1bklIUm9aU0JoYm05dWVXMXZkWE5KWkNCd2NtOXdaWEowZVNCaGJtUWdaMlZ1WlhKcFl5QnBaRnh1SUNBZ0lDQWdMeThnU1dZZ2RHaGxJR1YyWlc1MElHOXdkR2x2Ym5NZ1lXeHlaV0ZrZVNCemNHVmphV1o1SUhSdklHVjRZMngxWkdVZ2RHaGxJRzFsZEdGTlpYUnlhV056U1dRZ2QyVWdkR2h5YjNjZ1lXNGdaWEp5YjNJZ1lYTmNiaUFnSUNBZ0lDOHZJR0VnYzJsbmJtRnNJSFJ2SUhSb1pTQmtaWFpsYkc5d1pYSWdkR2hoZENCMGFHVWdaWFpsYm5RZ2QyRnpJR2x0Y0d4bGJXVnVkR1ZrSUdsdVkyOXljbVZqZEd4NVhHNGdJQ0FnSUNCcFppQW9iM0IwYVc5dWN6OHVaWGhqYkhWa1pVMWxkR0ZOWlhSeWFXTnpTV1FnUFQwOUlIUnlkV1VwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4dUlDQWdJQ0FnSUNBZ0lDZHpaVzV6YVhScGRtVlFjbTl3WlhKMGFXVnpJSGRoY3lCemNHVmphV1pwWldRZ2FXNGdZVzRnWlhabGJuUWdjR0Y1Ykc5aFpDQjBhR0YwSUdGc2MyOGdjMlYwSUhSb1pTQmxlR05zZFdSbFRXVjBZVTFsZEhKcFkzTkpaQ0JtYkdGbkp5eGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnWTI5dWMzUWdZMjl0WW1sdVpXUlFjbTl3WlhKMGFXVnpJRDBnYldWeVoyVW9YRzRnSUNBZ0lDQWdJSEJoZVd4dllXUXVjMlZ1YzJsMGFYWmxVSEp2Y0dWeWRHbGxjeXhjYmlBZ0lDQWdJQ0FnY0dGNWJHOWhaQzV3Y205d1pYSjBhV1Z6TEZ4dUlDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ1pYWmxiblJ6TG5CMWMyZ29YRzRnSUNBZ0lDQWdJSFJvYVhNdVgzUnlZV05yS0Z4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDJKMWFXeGtSWFpsYm5SUVlYbHNiMkZrS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzR1TG5CaGVXeHZZV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUJqYjIxaWFXNWxaRkJ5YjNCbGNuUnBaWE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBjMFIxY0d4cFkyRjBaVUZ1YjI1NWJXbDZaV1JGZG1WdWREb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQjlLU3hjYmlBZ0lDQWdJQ0FnSUNCN0lDNHVMbTl3ZEdsdmJuTXNJR1Y0WTJ4MVpHVk5aWFJoVFdWMGNtbGpjMGxrT2lCMGNuVmxJSDBzWEc0Z0lDQWdJQ0FnSUNrc1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdWMlpXNTBjeTV3ZFhOb0tIUm9hWE11WDNSeVlXTnJLSFJvYVhNdVgySjFhV3hrUlhabGJuUlFZWGxzYjJGa0tIQmhlV3h2WVdRcExDQnZjSFJwYjI1ektTazdYRzVjYmlBZ0lDQmhkMkZwZENCUWNtOXRhWE5sTG1Gc2JDaGxkbVZ1ZEhNcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJSFpoYkdsa1lYUmxjeUJoSUcxbGRHRnRaWFJ5YVdOeklHVjJaVzUwWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEZCaGVXeHZZV1I5SUhCaGVXeHZZV1FnTFNCa1pYUmhhV3h6SUc5bUlIUm9aU0JsZG1WdWRGeHVJQ0FnS2k5Y2JpQWdkbUZzYVdSaGRHVlFZWGxzYjJGa0tIQmhlV3h2WVdRcElIdGNiaUFnSUNBdkx5QmxkbVZ1ZENCaGJtUWdZMkYwWldkdmNua2dZWEpsSUhKbGNYVnBjbVZrSUdacFpXeGtjeUJtYjNJZ1lXeHNJSEJoZVd4dllXUnpYRzRnSUNBZ2FXWWdLQ0Z3WVhsc2IyRmtMbVYyWlc1MElIeDhJQ0Z3WVhsc2IyRmtMbU5oZEdWbmIzSjVLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0lDQWdJR0JOZFhOMElITndaV05wWm5rZ1pYWmxiblFnWVc1a0lHTmhkR1ZuYjNKNUxpQkZkbVZ1ZENCM1lYTTZJQ1I3WEc0Z0lDQWdJQ0FnSUNBZ2NHRjViRzloWkM1bGRtVnVkRnh1SUNBZ0lDQWdJQ0I5TGlCRFlYUmxaMjl5ZVNCM1lYTTZJQ1I3Y0dGNWJHOWhaQzVqWVhSbFoyOXllWDB1SUZCaGVXeHZZV1FnYTJWNWN5QjNaWEpsT2lBa2UwOWlhbVZqZEM1clpYbHpLRnh1SUNBZ0lDQWdJQ0FnSUhCaGVXeHZZV1FzWEc0Z0lDQWdJQ0FnSUNsOUxpQWtlMXh1SUNBZ0lDQWdJQ0FnSUhSNWNHVnZaaUJ3WVhsc2IyRmtMbkJ5YjNCbGNuUnBaWE1nUFQwOUlDZHZZbXBsWTNRblhHNGdJQ0FnSUNBZ0lDQWdJQ0EvSUdCUVlYbHNiMkZrSUhCeWIzQmxjblI1SUd0bGVYTWdkMlZ5WlRvZ0pIdFBZbXBsWTNRdWEyVjVjeWh3WVhsc2IyRmtMbkJ5YjNCbGNuUnBaWE1wZldCY2JpQWdJQ0FnSUNBZ0lDQWdJRG9nSnlkY2JpQWdJQ0FnSUNBZ2ZXQXNYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR2hoYm1Sc1pVMWxkR0ZOWVhOclUzUmhkR1ZWY0dSaGRHVW9ibVYzVTNSaGRHVXBJSHRjYmlBZ0lDQmpiMjV6ZENCMWMyVnlWSEpoYVhSeklEMGdkR2hwY3k1ZlluVnBiR1JWYzJWeVZISmhhWFJ6VDJKcVpXTjBLRzVsZDFOMFlYUmxLVHRjYmlBZ0lDQnBaaUFvZFhObGNsUnlZV2wwY3lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVwWkdWdWRHbG1lU2gxYzJWeVZISmhhWFJ6S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdkx5QlVjbUZqYXlCaGJHd2djWFZsZFdWa0lHVjJaVzUwY3lCaFpuUmxjaUJoSUhWelpYSWdiM0IwWldRZ2FXNTBieUJ0WlhSeWFXTnpMbHh1SUNCMGNtRmphMFYyWlc1MGMwRm1kR1Z5VFdWMGNtbGpjMDl3ZEVsdUtDa2dlMXh1SUNBZ0lHTnZibk4wSUhzZ1pYWmxiblJ6UW1WbWIzSmxUV1YwY21samMwOXdkRWx1SUgwZ1BTQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2s3WEc0Z0lDQWdaWFpsYm5SelFtVm1iM0psVFdWMGNtbGpjMDl3ZEVsdUxtWnZja1ZoWTJnb0tHVjJaVzUwUW1WbWIzSmxUV1YwY21samMwOXdkRWx1S1NBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6TG5SeVlXTnJSWFpsYm5Rb1pYWmxiblJDWldadmNtVk5aWFJ5YVdOelQzQjBTVzRwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5OGdUMjVqWlNCM1pTQjBjbUZqYXlCeGRXVjFaV1FnWlhabGJuUnpJR0ZtZEdWeUlHRWdkWE5sY2lCdmNIUnpJR2x1ZEc4Z2JXVjBjbWxqY3l3Z2QyVWdkMkZ1ZENCMGJ5QmpiR1ZoY2lCMGFHVWdaWFpsYm5RZ2NYVmxkV1V1WEc0Z0lHTnNaV0Z5UlhabGJuUnpRV1owWlhKTlpYUnlhV056VDNCMFNXNG9LU0I3WEc0Z0lDQWdkR2hwY3k1emRHOXlaUzUxY0dSaGRHVlRkR0YwWlNoN1hHNGdJQ0FnSUNCbGRtVnVkSE5DWldadmNtVk5aWFJ5YVdOelQzQjBTVzQ2SUZ0ZExGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeThnU1hRZ1lXUmtjeUJoYmlCbGRtVnVkQ0JwYm5SdklHRWdjWFZsZFdVc0lIZG9hV05vSUdseklHOXViSGtnZEhKaFkydGxaQ0JwWmlCaElIVnpaWElnYjNCMGN5QnBiblJ2SUcxbGRISnBZM011WEc0Z0lHRmtaRVYyWlc1MFFtVm1iM0psVFdWMGNtbGpjMDl3ZEVsdUtHVjJaVzUwS1NCN1hHNGdJQ0FnWTI5dWMzUWdjSEpsZGxOMFlYUmxJRDBnZEdocGN5NXpkRzl5WlM1blpYUlRkR0YwWlNncExtVjJaVzUwYzBKbFptOXlaVTFsZEhKcFkzTlBjSFJKYmp0Y2JpQWdJQ0IwYUdsekxuTjBiM0psTG5Wd1pHRjBaVk4wWVhSbEtIdGNiaUFnSUNBZ0lHVjJaVzUwYzBKbFptOXlaVTFsZEhKcFkzTlBjSFJKYmpvZ1d5NHVMbkJ5WlhaVGRHRjBaU3dnWlhabGJuUmRMRnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHk4Z1FXUmtJRzl5SUhWd1pHRjBaU0IwY21GcGRITWdabTl5SUhSeVlXTnJhVzVuTGx4dUlDQjFjR1JoZEdWVWNtRnBkSE1vYm1WM1ZISmhhWFJ6S1NCN1hHNGdJQ0FnWTI5dWMzUWdleUIwY21GcGRITWdmU0E5SUhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tUdGNiaUFnSUNCMGFHbHpMbk4wYjNKbExuVndaR0YwWlZOMFlYUmxLSHRjYmlBZ0lDQWdJSFJ5WVdsMGN6b2dleUF1TGk1MGNtRnBkSE1zSUM0dUxtNWxkMVJ5WVdsMGN5QjlMRnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcUlGQlNTVlpCVkVVZ1RVVlVTRTlFVXlBcUwxeHVYRzRnSUM4cUtseHVJQ0FnS2lCQ2RXbHNaQ0IwYUdVZ1kyOXVkR1Y0ZENCdlltcGxZM1FnZEc4Z1lYUjBZV05vSUhSdklIQmhaMlVnWVc1a0lIUnlZV05ySUdWMlpXNTBjeTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQnlhWFpoZEdWY2JpQWdJQ29nUUhCaGNtRnRJSHRRYVdOclBFMWxkR0ZOWlhSeWFXTnpRMjl1ZEdWNGRDd2dKM0psWm1WeWNtVnlKejU5SUZ0eVpXWmxjbkpsY2wwZ0xTQmtZWEJ3SUc5eWFXZHBiaUIwYUdGMElHbHVhWFJwWVd4cGVtVmtYRzRnSUNBcUlDQjBhR1VnYm05MGFXWnBZMkYwYVc5dUlIZHBibVJ2ZHk1Y2JpQWdJQ29nUUhCaGNtRnRJSHRRYVdOclBFMWxkR0ZOWlhSeWFXTnpRMjl1ZEdWNGRDd2dKM0JoWjJVblBuMGdXM0JoWjJWZElDMGdjR0ZuWlNCdlltcGxZM1FnWkdWelkzSnBZbWx1WnlCMGFHVWdZM1Z5Y21WdWRGeHVJQ0FnS2lBZ2RtbGxkeUJ2WmlCMGFHVWdaWGgwWlc1emFXOXVMaUJFWldaaGRXeDBjeUIwYnlCMGFHVWdZbUZqYTJkeWIzVnVaQzF3Y205alpYTnpJRzlpYW1WamRDNWNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UwMWxkR0ZOWlhSeWFXTnpRMjl1ZEdWNGRIMWNiaUFnSUNvdlhHNGdJRjlpZFdsc1pFTnZiblJsZUhRb2NtVm1aWEp5WlhJc0lIQmhaMlVnUFNCTlJWUkJUVVZVVWtsRFUxOUNRVU5MUjFKUFZVNUVYMUJCUjBWZlQwSktSVU5VS1NCN1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJR0Z3Y0RvZ2UxeHVJQ0FnSUNBZ0lDQnVZVzFsT2lBblRXVjBZVTFoYzJzZ1JYaDBaVzV6YVc5dUp5eGNiaUFnSUNBZ0lDQWdkbVZ5YzJsdmJqb2dkR2hwY3k1MlpYSnphVzl1TEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUhWelpYSkJaMlZ1ZERvZ2QybHVaRzkzTG01aGRtbG5ZWFJ2Y2k1MWMyVnlRV2RsYm5Rc1hHNGdJQ0FnSUNCd1lXZGxMRnh1SUNBZ0lDQWdjbVZtWlhKeVpYSXNYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJDZFdsc1pDZHpJSFJvWlNCbGRtVnVkQ0J3WVhsc2IyRmtMQ0J3Y205alpYTnphVzVuSUdGc2JDQm1hV1ZzWkhNZ2FXNTBieUJoSUdadmNtMWhkQ0IwYUdGMElHTmhiaUJpWlZ4dUlDQWdLaUJtWldRZ2RHOGdVMlZuYldWdWRDZHpJSFJ5WVdOcklHMWxkR2h2WkZ4dUlDQWdLbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2lCQWNHRnlZVzBnZTF4dUlDQWdLaUFnVDIxcGREeE5aWFJoVFdWMGNtbGpjMFYyWlc1MFVHRjViRzloWkN3Z0ozTmxibk5wZEdsMlpWQnliM0JsY25ScFpYTW5QbHh1SUNBZ0tpQjlJSEpoZDFCaGVXeHZZV1FnTFNCeVlYY2djR0Y1Ykc5aFpDQndjbTkyYVdSbFpDQjBieUIwY21GamEwVjJaVzUwWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRUWldkdFpXNTBSWFpsYm5SUVlYbHNiMkZrZlNCbWIzSnRZWFIwWldRZ1pYWmxiblFnY0dGNWJHOWhaQ0JtYjNJZ2MyVm5iV1Z1ZEZ4dUlDQWdLaTljYmlBZ1gySjFhV3hrUlhabGJuUlFZWGxzYjJGa0tISmhkMUJoZVd4dllXUXBJSHRjYmlBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNCbGRtVnVkQ3hjYmlBZ0lDQWdJSEJ5YjNCbGNuUnBaWE1zWEc0Z0lDQWdJQ0J5WlhabGJuVmxMRnh1SUNBZ0lDQWdkbUZzZFdVc1hHNGdJQ0FnSUNCamRYSnlaVzVqZVN4Y2JpQWdJQ0FnSUdOaGRHVm5iM0o1TEZ4dUlDQWdJQ0FnY0dGblpTeGNiaUFnSUNBZ0lISmxabVZ5Y21WeUxGeHVJQ0FnSUNBZ1pXNTJhWEp2Ym0xbGJuUlVlWEJsSUQwZ1JVNVdTVkpQVGsxRlRsUmZWRmxRUlY5Q1FVTkxSMUpQVlU1RUxGeHVJQ0FnSUgwZ1BTQnlZWGRRWVhsc2IyRmtPMXh1SUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNCbGRtVnVkQ3hjYmlBZ0lDQWdJRzFsYzNOaFoyVkpaRG9nWW5WcGJHUlZibWx4ZFdWTlpYTnpZV2RsU1dRb2NtRjNVR0Y1Ykc5aFpDa3NYRzRnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUM4dklGUm9aWE5sSUhaaGJIVmxjeUJoY21VZ2IyMXBkSFJsWkNCbWNtOXRJSEJ5YjNCbGNuUnBaWE1nWW1WallYVnpaU0IwYUdWNUlHaGhkbVVnYzNCbFkybGhiQ0J0WldGdWFXNW5YRzRnSUNBZ0lDQWdJQzh2SUdsdUlITmxaMjFsYm5RdUlHaDBkSEJ6T2k4dmMyVm5iV1Z1ZEM1amIyMHZaRzlqY3k5amIyNXVaV04wYVc5dWN5OXpjR1ZqTDNSeVlXTnJMeU53Y205d1pYSjBhV1Z6TGx4dUlDQWdJQ0FnSUNBdkx5QjBieUJoZG05cFpDQmhZMk5wWkdWdWRHRnNiSGtnZFhOcGJtY2dkR2hsYzJVZ2FXNWhjSEJ5YjNCeWFXRjBaV3g1TENCNWIzVWdiWFZ6ZENCaFpHUWdkR2hsYlNCaGN5QjBiM0JjYmlBZ0lDQWdJQ0FnTHk4Z2JHVjJaV3dnY0hKdmNHVnlkR2xsY3lCdmJpQjBhR1VnWlhabGJuUWdjR0Y1Ykc5aFpDNGdWMlVnWVd4emJ5QmxlR05zZFdSbElHeHZZMkZzWlNCMGJ5QndjbVYyWlc1MElHTnZibk4xYldWeWMxeHVJQ0FnSUNBZ0lDQXZMeUJtY205dElHOTJaWEozY21sMGFXNW5JSFJvYVhNZ1kyOXVkR1Y0ZENCc1pYWmxiQ0J3Y205d1pYSjBlUzRnVjJVZ2RISmhZMnNnYVhRZ1lYTWdZU0J3Y205d1pYSjBlVnh1SUNBZ0lDQWdJQ0F2THlCaVpXTmhkWE5sSUc1dmRDQmhiR3dnWkdWemRHbHVZWFJwYjI1eklHMWhjQ0JzYjJOaGJHVWdabkp2YlNCamIyNTBaWGgwTGx4dUlDQWdJQ0FnSUNBdUxpNXZiV2wwS0hCeWIzQmxjblJwWlhNc0lGc25jbVYyWlc1MVpTY3NJQ2RzYjJOaGJHVW5MQ0FuWTNWeWNtVnVZM2tuTENBbmRtRnNkV1VuWFNrc1hHNGdJQ0FnSUNBZ0lISmxkbVZ1ZFdVc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsTEZ4dUlDQWdJQ0FnSUNCamRYSnlaVzVqZVN4Y2JpQWdJQ0FnSUNBZ1kyRjBaV2R2Y25rc1hHNGdJQ0FnSUNBZ0lHeHZZMkZzWlRvZ2RHaHBjeTVzYjJOaGJHVXNYRzRnSUNBZ0lDQWdJR05vWVdsdVgybGtPaUJ3Y205d1pYSjBhV1Z6UHk1amFHRnBibDlwWkNBL1B5QjBhR2x6TG1Ob1lXbHVTV1FzWEc0Z0lDQWdJQ0FnSUdWdWRtbHliMjV0Wlc1MFgzUjVjR1U2SUdWdWRtbHliMjV0Wlc1MFZIbHdaU3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0JqYjI1MFpYaDBPaUIwYUdsekxsOWlkV2xzWkVOdmJuUmxlSFFvY21WbVpYSnlaWElzSUhCaFoyVXBMRnh1SUNBZ0lIMDdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVkdocGN5QnRaWFJvYjJRZ1oyVnVaWEpoZEdWeklIUm9aU0JOWlhSaFRXVjBjbWxqY3lCMWMyVnlJSFJ5WVdsMGN5QnZZbXBsWTNRc0lHOXRhWFIwYVc1bklHRnVlVnh1SUNBZ0tpQjBjbUZwZEhNZ2RHaGhkQ0JvWVhabElHNXZkQ0JqYUdGdVoyVmtJSE5wYm1ObElIUm9aU0JzWVhOMElHbHVkbTlqWVhScGIyNGdiMllnZEdocGN5QnRaWFJvYjJRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnRaWFJoYldGemExTjBZWFJsSUMwZ1JuVnNiQ0J0WlhSaGJXRnpheUJ6ZEdGMFpTQnZZbXBsWTNRdVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0TlpYUmhUV1YwY21samMxUnlZV2wwY3lCOElHNTFiR3g5SUhSeVlXbDBjeUIwYUdGMElHaGhkbVVnWTJoaGJtZGxaQ0J6YVc1alpTQnNZWE4wSUhWd1pHRjBaVnh1SUNBZ0tpOWNiaUFnWDJKMWFXeGtWWE5sY2xSeVlXbDBjMDlpYW1WamRDaHRaWFJoYldGemExTjBZWFJsS1NCN1hHNGdJQ0FnWTI5dWMzUWdleUIwY21GcGRITXNJSEJ5WlhacGIzVnpWWE5sY2xSeVlXbDBjeUI5SUQwZ2RHaHBjeTV6ZEc5eVpTNW5aWFJUZEdGMFpTZ3BPMXh1SUNBZ0lDOHFLaUJBZEhsd1pTQjdUV1YwWVUxbGRISnBZM05VY21GcGRITjlJQ292WEc0Z0lDQWdZMjl1YzNRZ1kzVnljbVZ1ZEZSeVlXbDBjeUE5SUh0Y2JpQWdJQ0FnSUZ0TlpYUmhUV1YwY21samMxVnpaWEpVY21GcGRDNUJaR1J5WlhOelFtOXZhMFZ1ZEhKcFpYTmRPaUJ6ZFcwb1hHNGdJQ0FnSUNBZ0lFOWlhbVZqZEM1MllXeDFaWE1vYldWMFlXMWhjMnRUZEdGMFpTNWhaR1J5WlhOelFtOXZheWt1YldGd0tITnBlbVVwTEZ4dUlDQWdJQ0FnS1N4Y2JpQWdJQ0FnSUZ0TlpYUmhUV1YwY21samMxVnpaWEpVY21GcGRDNUpibk4wWVd4c1JHRjBaVVY0ZEYwNlhHNGdJQ0FnSUNBZ0lIUnlZV2wwYzF0TlpYUmhUV1YwY21samMxVnpaWEpVY21GcGRDNUpibk4wWVd4c1JHRjBaVVY0ZEYwZ2ZId2dKeWNzWEc0Z0lDQWdJQ0JiVFdWMFlVMWxkSEpwWTNOVmMyVnlWSEpoYVhRdVRHVmtaMlZ5UTI5dWJtVmpkR2x2YmxSNWNHVmRPbHh1SUNBZ0lDQWdJQ0J0WlhSaGJXRnphMU4wWVhSbExteGxaR2RsY2xSeVlXNXpjRzl5ZEZSNWNHVXNYRzRnSUNBZ0lDQmJUV1YwWVUxbGRISnBZM05WYzJWeVZISmhhWFF1VG1WMGQyOXlhM05CWkdSbFpGMDZJRTlpYW1WamRDNTJZV3gxWlhNb1hHNGdJQ0FnSUNBZ0lHMWxkR0Z0WVhOclUzUmhkR1V1Ym1WMGQyOXlhME52Ym1acFozVnlZWFJwYjI1ekxGeHVJQ0FnSUNBZ0tTNXRZWEFvS0c1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dUtTQTlQaUJ1WlhSM2IzSnJRMjl1Wm1sbmRYSmhkR2x2Ymk1amFHRnBia2xrS1N4Y2JpQWdJQ0FnSUZ0TlpYUmhUV1YwY21samMxVnpaWEpVY21GcGRDNU9aWFIzYjNKcmMxZHBkR2h2ZFhSVWFXTnJaWEpkT2lCUFltcGxZM1F1ZG1Gc2RXVnpLRnh1SUNBZ0lDQWdJQ0J0WlhSaGJXRnphMU4wWVhSbExtNWxkSGR2Y210RGIyNW1hV2QxY21GMGFXOXVjeXhjYmlBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnTG1acGJIUmxjaWdvZXlCMGFXTnJaWElnZlNrZ1BUNGdJWFJwWTJ0bGNpbGNiaUFnSUNBZ0lDQWdMbTFoY0Nnb2V5QmphR0ZwYmtsa0lIMHBJRDArSUdOb1lXbHVTV1FwTEZ4dUlDQWdJQ0FnVzAxbGRHRk5aWFJ5YVdOelZYTmxjbFJ5WVdsMExrNW1kRUYxZEc5a1pYUmxZM1JwYjI1RmJtRmliR1ZrWFRwY2JpQWdJQ0FnSUNBZ2JXVjBZVzFoYzJ0VGRHRjBaUzUxYzJWT1puUkVaWFJsWTNScGIyNHNYRzRnSUNBZ0lDQmJUV1YwWVUxbGRISnBZM05WYzJWeVZISmhhWFF1VG5WdFltVnlUMlpCWTJOdmRXNTBjMTA2SUU5aWFtVmpkQzUyWVd4MVpYTW9YRzRnSUNBZ0lDQWdJRzFsZEdGdFlYTnJVM1JoZEdVdWFXUmxiblJwZEdsbGN5eGNiaUFnSUNBZ0lDa3ViR1Z1WjNSb0xGeHVJQ0FnSUNBZ1cwMWxkR0ZOWlhSeWFXTnpWWE5sY2xSeVlXbDBMazUxYldKbGNrOW1UbVowUTI5c2JHVmpkR2x2Ym5OZE9seHVJQ0FnSUNBZ0lDQjBhR2x6TGw5blpYUkJiR3hWYm1seGRXVk9SbFJCWkdSeVpYTnpaWE5NWlc1bmRHZ29iV1YwWVcxaGMydFRkR0YwWlM1aGJHeE9ablJ6S1N4Y2JpQWdJQ0FnSUZ0TlpYUmhUV1YwY21samMxVnpaWEpVY21GcGRDNU9kVzFpWlhKUFprNW1kSE5kT2lCMGFHbHpMbDluWlhSQmJHeE9SbFJ6Um14aGRIUmxibVZrS0Z4dUlDQWdJQ0FnSUNCdFpYUmhiV0Z6YTFOMFlYUmxMbUZzYkU1bWRITXNYRzRnSUNBZ0lDQXBMbXhsYm1kMGFDeGNiaUFnSUNBZ0lGdE5aWFJoVFdWMGNtbGpjMVZ6WlhKVWNtRnBkQzVPZFcxaVpYSlBabFJ2YTJWdWMxMDZYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyZGxkRTUxYldKbGNrOW1WRzlyWlc1ektHMWxkR0Z0WVhOclUzUmhkR1VwTEZ4dUlDQWdJQ0FnVzAxbGRHRk5aWFJ5YVdOelZYTmxjbFJ5WVdsMExrOXdaVzV6WldGQmNHbEZibUZpYkdWa1hUb2diV1YwWVcxaGMydFRkR0YwWlM1dmNHVnVVMlZoUlc1aFlteGxaQ3hjYmlBZ0lDQWdJRnROWlhSaFRXVjBjbWxqYzFWelpYSlVjbUZwZEM1VWFISmxaVUp2ZUVWdVlXSnNaV1JkT2lCbVlXeHpaU3dnTHk4Z1pHVndjbVZqWVhSbFpDd2dhR0Z5WkMxamIyUmxaQ0JoY3lCbVlXeHpaVnh1SUNBZ0lDQWdXMDFsZEdGTlpYUnlhV056VlhObGNsUnlZV2wwTGxSb1pXMWxYVG9nYldWMFlXMWhjMnRUZEdGMFpTNTBhR1Z0WlNCOGZDQW5aR1ZtWVhWc2RDY3NYRzRnSUNBZ0lDQmJUV1YwWVUxbGRISnBZM05WYzJWeVZISmhhWFF1Vkc5clpXNUVaWFJsWTNScGIyNUZibUZpYkdWa1hUcGNiaUFnSUNBZ0lDQWdiV1YwWVcxaGMydFRkR0YwWlM1MWMyVlViMnRsYmtSbGRHVmpkR2x2Yml4Y2JpQWdJQ0FnSUZ0TlpYUmhUV1YwY21samMxVnpaWEpVY21GcGRDNVRaV04xY21sMGVWQnliM1pwWkdWeWMxMDZYRzRnSUNBZ0lDQWdJRzFsZEdGdFlYTnJVM1JoZEdVdWRISmhibk5oWTNScGIyNVRaV04xY21sMGVVTm9aV05yUlc1aFlteGxaQ0EvSUZzbmIzQmxibk5sWVNkZElEb2dXMTBzWEc0Z0lDQWdmVHRjYmx4dUlDQWdJR2xtSUNnaGNISmxkbWx2ZFhOVmMyVnlWSEpoYVhSektTQjdYRzRnSUNBZ0lDQjBhR2x6TG5OMGIzSmxMblZ3WkdGMFpWTjBZWFJsS0hzZ2NISmxkbWx2ZFhOVmMyVnlWSEpoYVhSek9pQmpkWEp5Wlc1MFZISmhhWFJ6SUgwcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOMWNuSmxiblJVY21GcGRITTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSEJ5WlhacGIzVnpWWE5sY2xSeVlXbDBjeUFtSmlBaGFYTkZjWFZoYkNod2NtVjJhVzkxYzFWelpYSlVjbUZwZEhNc0lHTjFjbkpsYm5SVWNtRnBkSE1wS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0IxY0dSaGRHVnpJRDBnY0dsamEwSjVLRnh1SUNBZ0lDQWdJQ0JqZFhKeVpXNTBWSEpoYVhSekxGeHVJQ0FnSUNBZ0lDQW9kaXdnYXlrZ1BUNGdJV2x6UlhGMVlXd29jSEpsZG1sdmRYTlZjMlZ5VkhKaGFYUnpXMnRkTENCMktTeGNiaUFnSUNBZ0lDazdYRzRnSUNBZ0lDQjBhR2x6TG5OMGIzSmxMblZ3WkdGMFpWTjBZWFJsS0hzZ2NISmxkbWx2ZFhOVmMyVnlWSEpoYVhSek9pQmpkWEp5Wlc1MFZISmhhWFJ6SUgwcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhWd1pHRjBaWE03WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCaElHNWxkeUJ2WW1wbFkzUWdiMllnWVd4c0lIWmhiR2xrSUhWelpYSWdkSEpoYVhSekxpQkdiM0lnWkdGMFpYTXNJSGRsSUhSeVlXNXpabTl5YlNCMGFHVnRJR2x1ZEc4Z1NWTlBMVGcyTURFZ2RHbHRaWE4wWVcxd0lITjBjbWx1WjNNdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ6WldVZ2UwQnNhVzVySUdoMGRIQnpPaTh2YzJWbmJXVnVkQzVqYjIwdlpHOWpjeTlqYjI1dVpXTjBhVzl1Y3k5emNHVmpMMk52YlcxdmJpOGpkR2x0WlhOMFlXMXdjMzFjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlIVnpaWEpVY21GcGRITmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UyOWlhbVZqZEgxY2JpQWdJQ292WEc0Z0lGOWlkV2xzWkZaaGJHbGtWSEpoYVhSektIVnpaWEpVY21GcGRITXBJSHRjYmlBZ0lDQnlaWFIxY200Z1QySnFaV04wTG1WdWRISnBaWE1vZFhObGNsUnlZV2wwY3lrdWNtVmtkV05sS0NoMllXeHBaRlJ5WVdsMGN5d2dXMnRsZVN3Z2RtRnNkV1ZkS1NBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWZhWE5XWVd4cFpGUnlZV2wwUkdGMFpTaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lDQWdkbUZzYVdSVWNtRnBkSE5iYTJWNVhTQTlJSFpoYkhWbExuUnZTVk5QVTNSeWFXNW5LQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXVYMmx6Vm1Gc2FXUlVjbUZwZENoMllXeDFaU2twSUh0Y2JpQWdJQ0FnSUNBZ2RtRnNhV1JVY21GcGRITmJhMlY1WFNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtGeHVJQ0FnSUNBZ0lDQWdJR0JOWlhSaFRXVjBjbWxqYzBOdmJuUnliMnhzWlhJNklGd2lKSHRyWlhsOVhDSWdkbUZzZFdVZ2FYTWdibTkwSUdFZ2RtRnNhV1FnZEhKaGFYUWdkSGx3WldBc1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2RtRnNhV1JVY21GcGRITTdYRzRnSUNBZ2ZTd2dlMzBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ1lXNGdZWEp5WVhrZ2IyWWdZV3hzSUc5bUlIUm9aU0JPUmxSeklIUm9aU0IxYzJWeVhHNGdJQ0FxSUhCdmMzTmxjM05sY3lCaFkzSnZjM01nWVd4c0lHNWxkSGR2Y210eklHRnVaQ0JoWTJOdmRXNTBjeTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUdGc2JFNW1kSE5jYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMXRkZlZ4dUlDQWdLaTljYmlBZ1gyZGxkRUZzYkU1R1ZITkdiR0YwZEdWdVpXUWdQU0J0WlcxdmFYcGxLQ2hoYkd4T1puUnpJRDBnZTMwcElEMCtJSHRjYmlBZ0lDQnlaWFIxY200Z1QySnFaV04wTG5aaGJIVmxjeWhoYkd4T1puUnpLUzV5WldSMVkyVW9LSEpsYzNWc2RDd2dZMmhoYVc1T1JsUnpLU0E5UGlCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBMbU52Ym1OaGRDZ3VMaTVQWW1wbFkzUXVkbUZzZFdWektHTm9ZV2x1VGtaVWN5a3BPMXh1SUNBZ0lIMHNJRnRkS1R0Y2JpQWdmU2s3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdkR2hsSUc1MWJXSmxjaUJ2WmlCMWJtbHhkV1VnVGtaVUlHRmtaSEpsYzNObGN5QjBhR1VnZFhObGNseHVJQ0FnS2lCd2IzTnpaWE56WlhNZ1lXTnliM056SUdGc2JDQnVaWFIzYjNKcmN5QmhibVFnWVdOamIzVnVkSE11WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCaGJHeE9ablJ6WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHR1ZFcxaVpYSjlYRzRnSUNBcUwxeHVJQ0JmWjJWMFFXeHNWVzVwY1hWbFRrWlVRV1JrY21WemMyVnpUR1Z1WjNSb0tHRnNiRTVtZEhNZ1BTQjdmU2tnZTF4dUlDQWdJR052Ym5OMElHRnNiRTVHVkVGa1pISmxjM05sY3lBOUlIUm9hWE11WDJkbGRFRnNiRTVHVkhOR2JHRjBkR1Z1WldRb1lXeHNUbVowY3lrdWJXRndLRnh1SUNBZ0lDQWdLRzVtZENrZ1BUNGdibVowTG1Ga1pISmxjM01zWEc0Z0lDQWdLVHRjYmlBZ0lDQmpiMjV6ZENCMWJtbHhkV1ZCWkdSeVpYTnpaWE1nUFNCdVpYY2dVMlYwS0dGc2JFNUdWRUZrWkhKbGMzTmxjeWs3WEc0Z0lDQWdjbVYwZFhKdUlIVnVhWEYxWlVGa1pISmxjM05sY3k1emFYcGxPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J0WlhSaGJXRnphMU4wWVhSbFhHNGdJQ0FxSUVCeVpYUjFjbTV6SUc1MWJXSmxjaUJ2WmlCMWJtbHhkV1VnZEc5clpXNGdZV1JrY21WemMyVnpYRzRnSUNBcUwxeHVJQ0JmWjJWMFRuVnRZbVZ5VDJaVWIydGxibk1vYldWMFlXMWhjMnRUZEdGMFpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCUFltcGxZM1F1ZG1Gc2RXVnpLRzFsZEdGdFlYTnJVM1JoZEdVdVlXeHNWRzlyWlc1ektTNXlaV1IxWTJVb1hHNGdJQ0FnSUNBb2NtVnpkV3gwTENCaFkyTnZkVzUwYzBKNVEyaGhhVzRwSUQwK0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZENBcklITjFiU2hQWW1wbFkzUXVkbUZzZFdWektHRmpZMjkxYm5SelFubERhR0ZwYmlrdWJXRndLSE5wZW1VcEtUdGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQXdMRnh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTJGc2JITWdjMlZuYldWdWRDNXBaR1Z1ZEdsbWVTQjNhWFJvSUdkcGRtVnVJSFZ6WlhJZ2RISmhhWFJ6WEc0Z0lDQXFYRzRnSUNBcUlFQnpaV1VnZTBCc2FXNXJJR2gwZEhCek9pOHZjMlZuYldWdWRDNWpiMjB2Wkc5amN5OWpiMjV1WldOMGFXOXVjeTl6YjNWeVkyVnpMMk5oZEdGc2IyY3ZiR2xpY21GeWFXVnpMM05sY25abGNpOXViMlJsTHlOcFpHVnVkR2xtZVgxY2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlIVnpaWEpVY21GcGRITmNiaUFnSUNvdlhHNGdJRjlwWkdWdWRHbG1lU2gxYzJWeVZISmhhWFJ6S1NCN1hHNGdJQ0FnWTI5dWMzUWdleUJ0WlhSaFRXVjBjbWxqYzBsa0lIMGdQU0IwYUdsekxuTjBZWFJsTzF4dVhHNGdJQ0FnYVdZZ0tDRjFjMlZ5VkhKaGFYUnpJSHg4SUU5aWFtVmpkQzVyWlhsektIVnpaWEpVY21GcGRITXBMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ2ROWlhSaFRXVjBjbWxqYzBOdmJuUnliMnhzWlhJalgybGtaVzUwYVdaNU9pQk9ieUIxYzJWeVZISmhhWFJ6SUdadmRXNWtKeWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzTjFZbTFwZEZObFoyMWxiblJCVUVsRFlXeHNLQ2RwWkdWdWRHbG1lU2NzSUh0Y2JpQWdJQ0FnSUNBZ2RYTmxja2xrT2lCdFpYUmhUV1YwY21samMwbGtMRnh1SUNBZ0lDQWdJQ0IwY21GcGRITTZJSFZ6WlhKVWNtRnBkSE1zWEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNBZ0lIUm9hWE11WDJOaGNIUjFjbVZGZUdObGNIUnBiMjRvWlhKeUtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWbUZzYVdSaGRHVnpJSFJvWlNCMGNtRnBkQ0IyWVd4MVpTNGdVMlZuYldWdWRDQmhZMk5sY0hSeklHRnVlU0JrWVhSaElIUjVjR1V1SUZkbElHRnlaU0JoWkdScGJtY2dkbUZzYVdSaGRHbHZiaUJvWlhKbElIUnZYRzRnSUNBcUlITjFjSEJ2Y25RZ1pHRjBZU0IwZVhCbGN5Qm1iM0lnYjNWeUlGTmxaMjFsYm5RZ1pHVnpkR2x1WVhScGIyNG9jeWtnWlM1bkxpQk5hWGhRWVc1bGJGeHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdleXA5SUhaaGJIVmxYRzRnSUNBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZWeHVJQ0FnS2k5Y2JpQWdYMmx6Vm1Gc2FXUlVjbUZwZENoMllXeDFaU2tnZTF4dUlDQWdJR052Ym5OMElIUjVjR1VnUFNCMGVYQmxiMllnZG1Gc2RXVTdYRzVjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ2RIbHdaU0E5UFQwZ0ozTjBjbWx1WnljZ2ZIeGNiaUFnSUNBZ0lIUjVjR1VnUFQwOUlDZGliMjlzWldGdUp5QjhmRnh1SUNBZ0lDQWdkSGx3WlNBOVBUMGdKMjUxYldKbGNpY2dmSHhjYmlBZ0lDQWdJSFJvYVhNdVgybHpWbUZzYVdSVWNtRnBkRUZ5Y21GNUtIWmhiSFZsS1NCOGZGeHVJQ0FnSUNBZ2RHaHBjeTVmYVhOV1lXeHBaRlJ5WVdsMFJHRjBaU2gyWVd4MVpTbGNiaUFnSUNBcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sWjIxbGJuUWdZV05qWlhCMGN5QmhibmtnWkdGMFlTQjBlWEJsSUhaaGJIVmxMaUJYWlNCb1lYWmxJSE53WldOcFlXd2diRzluYVdNZ2RHOGdkbUZzYVdSaGRHVWdZWEp5WVhsekxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdleXA5SUhaaGJIVmxYRzRnSUNBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZWeHVJQ0FnS2k5Y2JpQWdYMmx6Vm1Gc2FXUlVjbUZwZEVGeWNtRjVJRDBnS0haaGJIVmxLU0E5UGlCN1hHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRUZ5Y21GNUxtbHpRWEp5WVhrb2RtRnNkV1VwSUNZbVhHNGdJQ0FnSUNBb2RtRnNkV1V1WlhabGNua29LR1ZzWlcxbGJuUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSNWNHVnZaaUJsYkdWdFpXNTBJRDA5UFNBbmMzUnlhVzVuSnp0Y2JpQWdJQ0FnSUgwcElIeDhYRzRnSUNBZ0lDQWdJSFpoYkhWbExtVjJaWEo1S0NobGJHVnRaVzUwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFI1Y0dWdlppQmxiR1Z0Wlc1MElEMDlQU0FuWW05dmJHVmhiaWM3WEc0Z0lDQWdJQ0FnSUgwcElIeDhYRzRnSUNBZ0lDQWdJSFpoYkhWbExtVjJaWEo1S0NobGJHVnRaVzUwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFI1Y0dWdlppQmxiR1Z0Wlc1MElEMDlQU0FuYm5WdFltVnlKenRjYmlBZ0lDQWdJQ0FnZlNrcFhHNGdJQ0FnS1R0Y2JpQWdmVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QjBjblZsSUdsbUlIUm9aU0IyWVd4MVpTQnBjeUJoYmlCaFkyTmxjSFJsWkNCa1lYUmxJSFI1Y0dWY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIc3FmU0IyWVd4MVpWeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4xY2JpQWdJQ292WEc0Z0lGOXBjMVpoYkdsa1ZISmhhWFJFWVhSbElEMGdLSFpoYkhWbEtTQTlQaUI3WEc0Z0lDQWdjbVYwZFhKdUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2gyWVd4MVpTa2dQVDA5SUNkYmIySnFaV04wSUVSaGRHVmRKenRjYmlBZ2ZUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1VHVnlabTl5YlNCMllXeHBaR0YwYVc5dUlHOXVJSFJvWlNCd1lYbHNiMkZrSUdGdVpDQjFjR1JoZEdVZ2RHaGxJR2xrSUhSNWNHVWdkRzhnZFhObElHSmxabTl5WlZ4dUlDQWdLaUJ6Wlc1a2FXNW5JSFJ2SUZObFoyMWxiblF1SUVGc2MyOGdaWGhoYldsdVpYTWdkR2hsSUc5d2RHbHZibk1nZEc4Z2NtOTFkR1VnWVc1a0lHaGhibVJzWlNCMGFHVmNiaUFnSUNvZ1pYWmxiblFnWVhCd2NtOXdjbWxoZEdWc2VTNWNiaUFnSUNwY2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb2dRSEJoY21GdElIdFRaV2R0Wlc1MFJYWmxiblJRWVhsc2IyRmtmU0J3WVhsc2IyRmtJQzBnY0hKdmNHVnlkR2xsY3lCMGJ5QmhkSFJoWTJnZ2RHOGdaWFpsYm5SY2JpQWdJQ29nUUhCaGNtRnRJSHROWlhSaFRXVjBjbWxqYzBWMlpXNTBUM0IwYVc5dWMzMGdXMjl3ZEdsdmJuTmRJQzBnYjNCMGFXOXVjeUJtYjNJZ2NtOTFkR2x1WnlCaGJtUmNiaUFnSUNvZ0lHaGhibVJzYVc1bklIUm9aU0JsZG1WdWRGeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1VISnZiV2x6WlR4MmIybGtQbjFjYmlBZ0lDb3ZYRzRnSUY5MGNtRmpheWh3WVhsc2IyRmtMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdZMjl1YzNRZ2UxeHVJQ0FnSUNBZ2FYTlBjSFJKYml4Y2JpQWdJQ0FnSUcxbGRHRk5aWFJ5YVdOelNXUTZJRzFsZEdGTlpYUnlhV056U1dSUGRtVnljbWxrWlN4Y2JpQWdJQ0FnSUcxaGRHOXRiMFYyWlc1MExGeHVJQ0FnSUNBZ1pteDFjMmhKYlcxbFpHbGhkR1ZzZVN4Y2JpQWdJQ0I5SUQwZ2IzQjBhVzl1Y3lCOGZDQjdmVHRjYmlBZ0lDQnNaWFFnYVdSVWVYQmxJRDBnSjNWelpYSkpaQ2M3WEc0Z0lDQWdiR1YwSUdsa1ZtRnNkV1VnUFNCMGFHbHpMbk4wWVhSbExtMWxkR0ZOWlhSeWFXTnpTV1E3WEc0Z0lDQWdiR1YwSUdWNFkyeDFaR1ZOWlhSaFRXVjBjbWxqYzBsa0lEMGdiM0IwYVc5dWN6OHVaWGhqYkhWa1pVMWxkR0ZOWlhSeWFXTnpTV1FnUHo4Z1ptRnNjMlU3WEc0Z0lDQWdMeThnVkdocGN5QnBjeUJqWVhKeWFXVmtJRzkyWlhJZ1puSnZiU0IwYUdVZ2IyeGtJR2x0Y0d4bGJXVnVkR0YwYVc5dUxDQmhibVFnZDJsc2JDQnNhV3RsYkhrZ2JtVmxaRnh1SUNBZ0lDOHZJSFJ2SUdKbElIVndaR0YwWldRZ2RHOGdkMjl5YXlCM2FYUm9JSFJvWlNCdVpYY2dkSEpoWTJ0cGJtY2djR3hoYmk0Z1NTQjBhR2x1YXlCM1pTQnphRzkxYkdRZ2RYTmxYRzRnSUNBZ0x5OGdZU0JqYjI1bWFXY2djMlYwZEdsdVp5Qm1iM0lnZEdocGN5QnBibk4wWldGa0lHOW1JSFJ5ZVdsdVp5QjBieUJ0WVhSamFDQjBhR1VnWlhabGJuUWdibUZ0WlZ4dUlDQWdJR052Ym5OMElHbHpVMlZ1WkVac2IzY2dQU0JDYjI5c1pXRnVLSEJoZVd4dllXUXVaWFpsYm5RdWJXRjBZMmdvTDE1elpXNWtmRjVqYjI1bWFYSnRMMmwxS1NrN1hHNGdJQ0FnYVdZZ0tHbHpVMlZ1WkVac2IzY3BJSHRjYmlBZ0lDQWdJR1Y0WTJ4MVpHVk5aWFJoVFdWMGNtbGpjMGxrSUQwZ2RISjFaVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdTV1lnZDJVZ1lYSmxJSFJ5WVdOcmFXNW5JSE5sYm5OcGRHbDJaU0JrWVhSaElIZGxJSGRwYkd3Z1lXeDNZWGx6SUhWelpTQjBhR1VnWVc1dmJubHRiM1Z6U1dSY2JpQWdJQ0F2THlCd2NtOXdaWEowZVNCaGN5QjNaV3hzSUdGeklHOTFjaUJOUlZSQlRVVlVVa2xEVTE5QlRrOU9XVTFQVlZOZlNVUXVJRlJvYVhNZ2NISmxkbVZ1ZEhNZ2RYTWdabkp2YlZ4dUlDQWdJQzh2SUdGemMyOWphV0YwYVc1bklIQnZkR1Z1ZEdsaGJHeDVJR2xrWlc1MGFXWnBZV0pzWlNCcGJtWnZjbTFoZEdsdmJpQjNhWFJvSUdFZ2MzQmxZMmxtYVdNZ2FXUXVYRzRnSUNBZ0x5OGdSSFZ5YVc1bklIUm9aU0J2Y0hRZ2FXNGdabXh2ZHlCM1pTQjNhV3hzSUhSeVlXTnJJR0ZzYkNCbGRtVnVkSE1zSUdKMWRDQmtieUJ6YnlCM2FYUm9JSFJvWlZ4dUlDQWdJQzh2SUdGdWIyNTViVzkxY3lCcFpDNGdWR2hsSUc5dVpTQmxlR05sY0hScGIyNGdkRzhnZEdoaGRDQnlkV3hsSUdseklHRm1kR1Z5SUhSb1pTQjFjMlZ5SUc5d2RITWdhVzVjYmlBZ0lDQXZMeUIwYnlCTlpYUmhUV1YwY21samN5NGdWMmhsYmlCMGFHRjBJR2hoY0hCbGJuTWdkMlVnY21WalpXbDJaU0JpWVdOcklIUm9aU0IxYzJWeUozTWdibVYzWEc0Z0lDQWdMeThnVFdWMFlVMWxkSEpwWTNNZ2FXUWdZbVZtYjNKbElHbDBJR2x6SUdaMWJHeDVJSEJsY25OcGMzUmxaQ0IwYnlCemRHRjBaUzRnVkc4Z1lYWnZhV1FnWVNCeVlXTmxYRzRnSUNBZ0x5OGdZMjl1WkdsMGFXOXVJSGRsSUdWNGNHeHBZMmwwYkhrZ2NHRnpjeUIwYUdVZ2JtVjNJR2xrSUhSdklIUm9aU0IwY21GamF5QnRaWFJvYjJRdUlFbHVJSFJvWVhSY2JpQWdJQ0F2THlCallYTmxJSGRsSUhkcGJHd2dkSEpoWTJzZ2RHaGxJRzl3ZENCcGJpQmxkbVZ1ZENCMGJ5QjBhR1VnZFhObGNpZHpJR2xrTGlCSmJpQmhiR3dnYjNSb1pYSWdZMkZ6WlhOY2JpQWdJQ0F2THlCM1pTQjFjMlVnZEdobElHMWxkR0ZOWlhSeWFXTnpTV1FnWm5KdmJTQnpkR0YwWlM1Y2JpQWdJQ0JwWmlBb1pYaGpiSFZrWlUxbGRHRk5aWFJ5YVdOelNXUWdmSHdnS0dselQzQjBTVzRnSmlZZ0lXMWxkR0ZOWlhSeWFXTnpTV1JQZG1WeWNtbGtaU2twSUh0Y2JpQWdJQ0FnSUdsa1ZIbHdaU0E5SUNkaGJtOXVlVzF2ZFhOSlpDYzdYRzRnSUNBZ0lDQnBaRlpoYkhWbElEMGdUVVZVUVUxRlZGSkpRMU5mUVU1UFRsbE5UMVZUWDBsRU8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTlBjSFJKYmlBbUppQnRaWFJoVFdWMGNtbGpjMGxrVDNabGNuSnBaR1VwSUh0Y2JpQWdJQ0FnSUdsa1ZtRnNkV1VnUFNCdFpYUmhUV1YwY21samMwbGtUM1psY25KcFpHVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhCaGVXeHZZV1JiYVdSVWVYQmxYU0E5SUdsa1ZtRnNkV1U3WEc1Y2JpQWdJQ0F2THlCSlppQjBhR2x6SUdseklHRnVJR1YyWlc1MElHOXVJSFJvWlNCdmJHUWdiV0YwYjIxdklITmphR1Z0WVN3Z1lXUmtJR0VnYTJWNUlIUnZJSFJvWlNCd1lYbHNiMkZrWEc0Z0lDQWdMeThnZEc4Z1pHVnphV2R1WVhSbElHbDBJR0Z6SUhOMVkyaGNiaUFnSUNCcFppQW9iV0YwYjIxdlJYWmxiblFnUFQwOUlIUnlkV1VwSUh0Y2JpQWdJQ0FnSUhCaGVXeHZZV1F1Y0hKdmNHVnlkR2xsY3k1c1pXZGhZM2xmWlhabGJuUWdQU0IwY25WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklGQnliMjFwYzJWeklIZHBiR3dnYjI1c2VTQnlaWE52YkhabElIZG9aVzRnZEdobElHVjJaVzUwSUdseklITmxiblFnZEc4Z2MyVm5iV1Z1ZEM0Z1JtOXlJR0Z1ZVZ4dUlDQWdJQzh2SUdWMlpXNTBJSFJvWVhRZ2NtVnNhV1Z6SUc5dUlIUm9hWE1nY0hKdmJXbHpaU0JpWldsdVp5Qm1kV3htYVd4c1pXUWdZbVZtYjNKbElIQmxjbVp2Y20xcGJtY2dWVWxjYmlBZ0lDQXZMeUIxY0dSaGRHVnpMQ0J2Y2lCdmRHaGxjbmRwYzJVZ1pHVnNZWGxwYm1jZ2RYTmxjaUJwYm5SbGNtRmpkR2x2Yml3Z2MzVndjR3g1SUhSb1pWeHVJQ0FnSUM4dklDZG1iSFZ6YUVsdGJXVmthV0YwWld4NUp5Qm1iR0ZuSUhSdklIUm9aU0IwY21GamEwVjJaVzUwSUcxbGRHaHZaQzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dUlDQWdJQ0FnWTI5dWMzUWdZMkZzYkdKaFkyc2dQU0FvWlhKeUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJVYUdVZ1pYSnliM0lnZEdoaGRDQnpaV2R0Wlc1MElHZHBkbVZ6SUhWeklHaGhjeUJ6YjIxbElHMWhibWx3ZFd4aGRHbHZiaUJrYjI1bElIUnZJR2wwWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkR2hoZENCelpXVnRhVzVuYkhrZ1luSmxZV3R6SUhkcGRHZ2diRzlqYTJSdmQyNGdaVzVoWW14bFpDNGdRM0psWVhScGJtY2dZU0J1WlhjZ1pYSnliM0pjYmlBZ0lDQWdJQ0FnSUNBdkx5Qm9aWEpsSUhCeVpYWmxiblJ6SUhSb1pTQnplWE4wWlcwZ1puSnZiU0JtY21WbGVtbHVaeUIzYUdWdUlIUm9aU0J1WlhSM2IzSnJJSEpsY1hWbGMzUWdkRzljYmlBZ0lDQWdJQ0FnSUNBdkx5QnpaV2R0Wlc1MElHWmhhV3h6SUdadmNpQmhibmtnY21WaGMyOXVMbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSE5oWm1WRmNuSnZjaUE5SUc1bGR5QkZjbkp2Y2lobGNuSXViV1Z6YzJGblpTazdYRzRnSUNBZ0lDQWdJQ0FnYzJGbVpVVnljbTl5TG5OMFlXTnJJRDBnWlhKeUxuTjBZV05yTzF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpXcGxZM1FvYzJGbVpVVnljbTl5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpiMngyWlNncE8xeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdkR2hwY3k1ZmMzVmliV2wwVTJWbmJXVnVkRUZRU1VOaGJHd29KM1J5WVdOckp5d2djR0Y1Ykc5aFpDd2dZMkZzYkdKaFkyc3BPMXh1SUNBZ0lDQWdhV1lnS0dac2RYTm9TVzF0WldScFlYUmxiSGtwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WldkdFpXNTBMbVpzZFhOb0tDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2THlCTlpYUm9iMlFnWW1Wc2IzY2djM1ZpYldsMGN5QjBhR1VnY21WeGRXVnpkQ0IwYnlCaGJtRnNlWFJwWTNNZ1UwUkxMbHh1SUNBdkx5QkpkQ0IzYVd4c0lHRnNjMjhnWVdSa0lHVjJaVzUwSUhSdklHTnZiblJ5YjJ4c1pYSWdjM1J2Y21WY2JpQWdMeThnWVc1a0lIQmhjM01nWVNCallXeHNZbUZqYXlCMGJ5QnlaVzF2ZG1VZ2FYUWdabkp2YlNCemRHOXlaU0J2Ym1ObElISmxjWFZsYzNRZ2FYTWdjM1ZpYldsMGRHVmtJSFJ2SUhObFoyMWxiblJjYmlBZ0x5OGdVMkYyYVc1bklITmxaMjFsYm5SQmNHbERZV3hzY3lCcGJpQmpiMjUwY205c2JHVnlJSE4wYjNKbElHbHVJRTFXTXlCbGJuTjFjbVZ6SUhSb1lYUWdaWFpsYm5SeklHRnlaU0IwY21GamEyVmtYRzRnSUM4dklHVjJaVzRnYVdZZ2MyVnlkbWxqWlNCM2IzSnJaWElnZEdWeWJXbHVZWFJsY3lCaVpXWnZjbVVnWlhabGJuUnpJR0Z5WlNCemRXSnRhWFJsWldRZ2RHOGdjMlZuYldWdWRDNWNiaUFnWDNOMVltMXBkRk5sWjIxbGJuUkJVRWxEWVd4c0tHVjJaVzUwVkhsd1pTd2djR0Y1Ykc5aFpDd2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHMWxkR0ZOWlhSeWFXTnpTV1FzSUhCaGNuUnBZMmx3WVhSbFNXNU5aWFJoVFdWMGNtbGpjeUI5SUQwZ2RHaHBjeTV6ZEdGMFpUdGNiaUFnSUNCcFppQW9JWEJoY25ScFkybHdZWFJsU1c1TlpYUmhUV1YwY21samN5QjhmQ0FoYldWMFlVMWxkSEpwWTNOSlpDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJRzFsYzNOaFoyVkpaQ0E5SUhCaGVXeHZZV1F1YldWemMyRm5aVWxrSUh4OElHZGxibVZ5WVhSbFVtRnVaRzl0U1dRb0tUdGNiaUFnSUNCc1pYUWdkR2x0WlhOMFlXMXdJRDBnYm1WM0lFUmhkR1VvS1R0Y2JpQWdJQ0JwWmlBb2NHRjViRzloWkM1MGFXMWxjM1JoYlhBcElIdGNiaUFnSUNBZ0lHTnZibk4wSUhCaGVXeHZZV1JFWVhSbElEMGdibVYzSUVSaGRHVW9jR0Y1Ykc5aFpDNTBhVzFsYzNSaGJYQXBPMXh1SUNBZ0lDQWdhV1lnS0dselZtRnNhV1JFWVhSbEtIQmhlV3h2WVdSRVlYUmxLU2tnZTF4dUlDQWdJQ0FnSUNCMGFXMWxjM1JoYlhBZ1BTQndZWGxzYjJGa1JHRjBaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjM1FnYlc5a2FXWnBaV1JRWVhsc2IyRmtJRDBnZXlBdUxpNXdZWGxzYjJGa0xDQnRaWE56WVdkbFNXUXNJSFJwYldWemRHRnRjQ0I5TzF4dUlDQWdJSFJvYVhNdWMzUnZjbVV1ZFhCa1lYUmxVM1JoZEdVb2UxeHVJQ0FnSUNBZ2MyVm5iV1Z1ZEVGd2FVTmhiR3h6T2lCN1hHNGdJQ0FnSUNBZ0lDNHVMblJvYVhNdWMzUnZjbVV1WjJWMFUzUmhkR1VvS1M1elpXZHRaVzUwUVhCcFEyRnNiSE1zWEc0Z0lDQWdJQ0FnSUZ0dFpYTnpZV2RsU1dSZE9pQjdYRzRnSUNBZ0lDQWdJQ0FnWlhabGJuUlVlWEJsTEZ4dUlDQWdJQ0FnSUNBZ0lIQmhlV3h2WVdRNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM0dUxtMXZaR2xtYVdWa1VHRjViRzloWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJwYldWemRHRnRjRG9nYlc5a2FXWnBaV1JRWVhsc2IyRmtMblJwYldWemRHRnRjQzUwYjFOMGNtbHVaeWdwTEZ4dUlDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJSDBwTzF4dUlDQWdJR052Ym5OMElHMXZaR2xtYVdWa1EyRnNiR0poWTJzZ1BTQW9jbVZ6ZFd4MEtTQTlQaUI3WEc0Z0lDQWdJQ0JqYjI1emRDQjdJSE5sWjIxbGJuUkJjR2xEWVd4c2N5QjlJRDBnZEdocGN5NXpkRzl5WlM1blpYUlRkR0YwWlNncE8xeHVJQ0FnSUNBZ1pHVnNaWFJsSUhObFoyMWxiblJCY0dsRFlXeHNjMXR0WlhOellXZGxTV1JkTzF4dUlDQWdJQ0FnZEdocGN5NXpkRzl5WlM1MWNHUmhkR1ZUZEdGMFpTaDdYRzRnSUNBZ0lDQWdJSE5sWjIxbGJuUkJjR2xEWVd4c2N5eGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHTmhiR3hpWVdOclB5NG9jbVZ6ZFd4MEtUdGNiaUFnSUNCOU8xeHVJQ0FnSUhSb2FYTXVjMlZuYldWdWRGdGxkbVZ1ZEZSNWNHVmRLRzF2WkdsbWFXVmtVR0Y1Ykc5aFpDd2diVzlrYVdacFpXUkRZV3hzWW1GamF5azdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0I3WEc0Z0lHTnlaV0YwWlVGemVXNWpUV2xrWkd4bGQyRnlaU3hjYmlBZ1kzSmxZWFJsVTJOaFptWnZiR1JOYVdSa2JHVjNZWEpsTEZ4dUlDQktjMjl1VW5CalJXNW5hVzVsTEZ4dUlDQnRaWEpuWlUxcFpHUnNaWGRoY21Vc1hHNGdJRXB6YjI1U2NHTk5hV1JrYkdWM1lYSmxMRnh1ZlNCbWNtOXRJQ2RxYzI5dUxYSndZeTFsYm1kcGJtVW5PMXh1YVcxd2IzSjBJSHRjYmlBZ1kzSmxZWFJsUW14dlkydERZV05vWlUxcFpHUnNaWGRoY21Vc1hHNGdJR055WldGMFpVSnNiMk5yVW1WbVRXbGtaR3hsZDJGeVpTeGNiaUFnWTNKbFlYUmxRbXh2WTJ0U1pXWlNaWGR5YVhSbFRXbGtaR3hsZDJGeVpTeGNiaUFnWTNKbFlYUmxRbXh2WTJ0VWNtRmphMlZ5U1c1emNHVmpkRzl5VFdsa1pHeGxkMkZ5WlN4Y2JpQWdZM0psWVhSbFNXNW1iR2xuYUhSRFlXTm9aVTFwWkdSc1pYZGhjbVVzWEc0Z0lHTnlaV0YwWlVabGRHTm9UV2xrWkd4bGQyRnlaU3hjYmlBZ1kzSmxZWFJsVW1WMGNubFBia1Z0Y0hSNVRXbGtaR3hsZDJGeVpTeGNibjBnWm5KdmJTQW5RRzFsZEdGdFlYTnJMMlYwYUMxcWMyOXVMWEp3WXkxdGFXUmtiR1YzWVhKbEp6dGNibWx0Y0c5eWRDQjdYRzRnSUhCeWIzWnBaR1Z5Um5KdmJVVnVaMmx1WlN4Y2JpQWdjSEp2ZG1sa1pYSkdjbTl0VFdsa1pHeGxkMkZ5WlN4Y2JpQWdVMkZtWlVWMlpXNTBSVzFwZEhSbGNsQnliM1pwWkdWeUxGeHVmU0JtY205dElDZEFiV1YwWVcxaGMyc3ZaWFJvTFdwemIyNHRjbkJqTFhCeWIzWnBaR1Z5Snp0Y2JtbHRjRzl5ZENCN0lHTnlaV0YwWlVsdVpuVnlZVTFwWkdSc1pYZGhjbVVnZlNCbWNtOXRJQ2RBYldWMFlXMWhjMnN2WlhSb0xXcHpiMjR0Y25CakxXbHVablZ5WVNjN1hHNXBiWEJ2Y25RZ2RIbHdaU0I3SUVobGVDQjlJR1p5YjIwZ0owQnRaWFJoYldGemF5OTFkR2xzY3k5a2FYTjBKenRjYm1sdGNHOXlkQ0I3SUZCdmJHeHBibWRDYkc5amExUnlZV05yWlhJZ2ZTQm1jbTl0SUNkbGRHZ3RZbXh2WTJzdGRISmhZMnRsY2k5a2FYTjBKenRjYm1sdGNHOXlkQ0I3SUZORlEwOU9SQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12ZEdsdFpTYzdYRzVwYlhCdmNuUWdlMXh1SUNCQ1ZVbE1WRjlKVGw5SlRrWlZVa0ZmVGtWVVYwOVNTMU1zWEc0Z0lFSjFhV3gwU1c1SmJtWjFjbUZPWlhSM2IzSnJMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2WTI5dWMzUmhiblJ6TDI1bGRIZHZjbXNuTzF4dVhHNWxlSEJ2Y25RZ1pXNTFiU0JPWlhSM2IzSnJRMnhwWlc1MFZIbHdaU0I3WEc0Z0lFTjFjM1J2YlNBOUlDZGpkWE4wYjIwbkxGeHVJQ0JKYm1aMWNtRWdQU0FuYVc1bWRYSmhKeXhjYm4xY2JseHVkSGx3WlNCRGRYTjBiMjFPWlhSM2IzSnJRMjl1Wm1sbmRYSmhkR2x2YmlBOUlIdGNiaUFnWTJoaGFXNUpaRG9nU0dWNE8xeHVJQ0J5Y0dOVmNtdzZJSE4wY21sdVp6dGNiaUFnZEhsd1pUb2dUbVYwZDI5eWEwTnNhV1Z1ZEZSNWNHVXVRM1Z6ZEc5dE8xeHVmVHRjYmx4dWRIbHdaU0JKYm1aMWNtRk9aWFIzYjNKclEyOXVabWxuZFhKaGRHbHZiaUE5SUh0Y2JpQWdibVYwZDI5eWF6b2dRblZwYkhSSmJrbHVablZ5WVU1bGRIZHZjbXM3WEc0Z0lHbHVablZ5WVZCeWIycGxZM1JKWkRvZ2MzUnlhVzVuTzF4dUlDQjBlWEJsT2lCT1pYUjNiM0pyUTJ4cFpXNTBWSGx3WlM1SmJtWjFjbUU3WEc1OU8xeHVYRzR2S2lwY2JpQXFJRU55WldGMFpTQmhJRXBUVDA0Z1VsQkRJRzVsZEhkdmNtc2dZMnhwWlc1MElHWnZjaUJoSUhOd1pXTnBabWxqSUc1bGRIZHZjbXN1WEc0Z0tseHVJQ29nUUhCaGNtRnRJRzVsZEhkdmNtdERiMjVtYVdjZ0xTQlVhR1VnYm1WMGQyOXlheUJqYjI1bWFXZDFjbUYwYVc5dUxseHVJQ29nUUhKbGRIVnlibk5jYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTnlaV0YwWlU1bGRIZHZjbXREYkdsbGJuUW9YRzRnSUc1bGRIZHZjbXREYjI1bWFXYzZJRU4xYzNSdmJVNWxkSGR2Y210RGIyNW1hV2QxY21GMGFXOXVJSHdnU1c1bWRYSmhUbVYwZDI5eWEwTnZibVpwWjNWeVlYUnBiMjRzWEc0cE9pQjdJSEJ5YjNacFpHVnlPaUJUWVdabFJYWmxiblJGYldsMGRHVnlVSEp2ZG1sa1pYSTdJR0pzYjJOclZISmhZMnRsY2pvZ1VHOXNiR2x1WjBKc2IyTnJWSEpoWTJ0bGNpQjlJSHRjYmlBZ1kyOXVjM1FnY25CalFYQnBUV2xrWkd4bGQyRnlaU0E5WEc0Z0lDQWdibVYwZDI5eWEwTnZibVpwWnk1MGVYQmxJRDA5UFNCT1pYUjNiM0pyUTJ4cFpXNTBWSGx3WlM1SmJtWjFjbUZjYmlBZ0lDQWdJRDhnWTNKbFlYUmxTVzVtZFhKaFRXbGtaR3hsZDJGeVpTaDdYRzRnSUNBZ0lDQWdJQ0FnYm1WMGQyOXlhem9nYm1WMGQyOXlhME52Ym1acFp5NXVaWFIzYjNKckxGeHVJQ0FnSUNBZ0lDQWdJSEJ5YjJwbFkzUkpaRG9nYm1WMGQyOXlhME52Ym1acFp5NXBibVoxY21GUWNtOXFaV04wU1dRc1hHNGdJQ0FnSUNBZ0lDQWdiV0Y0UVhSMFpXMXdkSE02SURVc1hHNGdJQ0FnSUNBZ0lDQWdjMjkxY21ObE9pQW5iV1YwWVcxaGMyc25MRnh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnT2lCamNtVmhkR1ZHWlhSamFFMXBaR1JzWlhkaGNtVW9lMXh1SUNBZ0lDQWdJQ0FnSUdKMGIyRTZJR2RzYjJKaGJDNWlkRzloTEZ4dUlDQWdJQ0FnSUNBZ0lHWmxkR05vT2lCbmJHOWlZV3d1Wm1WMFkyZ3NYRzRnSUNBZ0lDQWdJQ0FnY25CalZYSnNPaUJ1WlhSM2IzSnJRMjl1Wm1sbkxuSndZMVZ5YkN4Y2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ1kyOXVjM1FnY25CalVISnZkbWxrWlhJZ1BTQndjbTkyYVdSbGNrWnliMjFOYVdSa2JHVjNZWEpsS0hKd1kwRndhVTFwWkdSc1pYZGhjbVVwTzF4dVhHNGdJR052Ym5OMElHSnNiMk5yVkhKaFkydGxjazl3ZEhNZ1BWeHVJQ0FnSUhCeWIyTmxjM011Wlc1MkxrbE9YMVJGVTFRZ0ppWWdibVYwZDI5eWEwTnZibVpwWnk1MGVYQmxJRDA5UFNBblkzVnpkRzl0SjF4dUlDQWdJQ0FnUHlCN0lIQnZiR3hwYm1kSmJuUmxjblpoYkRvZ1UwVkRUMDVFSUgxY2JpQWdJQ0FnSURvZ2UzMDdYRzRnSUdOdmJuTjBJR0pzYjJOclZISmhZMnRsY2lBOUlHNWxkeUJRYjJ4c2FXNW5RbXh2WTJ0VWNtRmphMlZ5S0h0Y2JpQWdJQ0F1TGk1aWJHOWphMVJ5WVdOclpYSlBjSFJ6TEZ4dUlDQWdJSEJ5YjNacFpHVnlPaUJ5Y0dOUWNtOTJhV1JsY2l4Y2JpQWdmU2s3WEc1Y2JpQWdZMjl1YzNRZ2JtVjBkMjl5YTAxcFpHUnNaWGRoY21VZ1BWeHVJQ0FnSUc1bGRIZHZjbXREYjI1bWFXY3VkSGx3WlNBOVBUMGdUbVYwZDI5eWEwTnNhV1Z1ZEZSNWNHVXVTVzVtZFhKaFhHNGdJQ0FnSUNBL0lHTnlaV0YwWlVsdVpuVnlZVTVsZEhkdmNtdE5hV1JrYkdWM1lYSmxLSHRjYmlBZ0lDQWdJQ0FnSUNCaWJHOWphMVJ5WVdOclpYSXNYRzRnSUNBZ0lDQWdJQ0FnYm1WMGQyOXlhem9nYm1WMGQyOXlhME52Ym1acFp5NXVaWFIzYjNKckxGeHVJQ0FnSUNBZ0lDQWdJSEp3WTFCeWIzWnBaR1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lISndZMEZ3YVUxcFpHUnNaWGRoY21Vc1hHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQTZJR055WldGMFpVTjFjM1J2YlU1bGRIZHZjbXROYVdSa2JHVjNZWEpsS0h0Y2JpQWdJQ0FnSUNBZ0lDQmliRzlqYTFSeVlXTnJaWElzWEc0Z0lDQWdJQ0FnSUNBZ1kyaGhhVzVKWkRvZ2JtVjBkMjl5YTBOdmJtWnBaeTVqYUdGcGJrbGtMRnh1SUNBZ0lDQWdJQ0FnSUhKd1kwRndhVTFwWkdSc1pYZGhjbVVzWEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUdOdmJuTjBJR1Z1WjJsdVpTQTlJRzVsZHlCS2MyOXVVbkJqUlc1bmFXNWxLQ2s3WEc1Y2JpQWdaVzVuYVc1bExuQjFjMmdvYm1WMGQyOXlhMDFwWkdSc1pYZGhjbVVwTzF4dVhHNGdJR052Ym5OMElIQnliM1pwWkdWeUlEMGdjSEp2ZG1sa1pYSkdjbTl0Ulc1bmFXNWxLR1Z1WjJsdVpTazdYRzVjYmlBZ2NtVjBkWEp1SUhzZ2NISnZkbWxrWlhJc0lHSnNiMk5yVkhKaFkydGxjaUI5TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJqY21WaGRHVkpibVoxY21GT1pYUjNiM0pyVFdsa1pHeGxkMkZ5WlNoN1hHNGdJR0pzYjJOclZISmhZMnRsY2l4Y2JpQWdibVYwZDI5eWF5eGNiaUFnY25CalVISnZkbWxrWlhJc1hHNGdJSEp3WTBGd2FVMXBaR1JzWlhkaGNtVXNYRzU5T2lCN1hHNGdJR0pzYjJOclZISmhZMnRsY2pvZ1VHOXNiR2x1WjBKc2IyTnJWSEpoWTJ0bGNqdGNiaUFnYm1WMGQyOXlhem9nUW5WcGJIUkpia2x1Wm5WeVlVNWxkSGR2Y21zN1hHNGdJSEp3WTFCeWIzWnBaR1Z5T2lCVFlXWmxSWFpsYm5SRmJXbDBkR1Z5VUhKdmRtbGtaWEk3WEc0Z0lISndZMEZ3YVUxcFpHUnNaWGRoY21VNklFcHpiMjVTY0dOTmFXUmtiR1YzWVhKbFBIVnVhMjV2ZDI0c0lIVnVhMjV2ZDI0K08xeHVmU2tnZTF4dUlDQnlaWFIxY200Z2JXVnlaMlZOYVdSa2JHVjNZWEpsS0Z0Y2JpQWdJQ0JqY21WaGRHVk9aWFIzYjNKclFXNWtRMmhoYVc1SlpFMXBaR1JzWlhkaGNtVW9leUJ1WlhSM2IzSnJJSDBwTEZ4dUlDQWdJR055WldGMFpVSnNiMk5yUTJGamFHVk5hV1JrYkdWM1lYSmxLSHNnWW14dlkydFVjbUZqYTJWeUlIMHBMRnh1SUNBZ0lHTnlaV0YwWlVsdVpteHBaMmgwUTJGamFHVk5hV1JrYkdWM1lYSmxLQ2tzWEc0Z0lDQWdZM0psWVhSbFFteHZZMnRTWldaTmFXUmtiR1YzWVhKbEtIc2dZbXh2WTJ0VWNtRmphMlZ5TENCd2NtOTJhV1JsY2pvZ2NuQmpVSEp2ZG1sa1pYSWdmU2tzWEc0Z0lDQWdZM0psWVhSbFVtVjBjbmxQYmtWdGNIUjVUV2xrWkd4bGQyRnlaU2g3SUdKc2IyTnJWSEpoWTJ0bGNpd2djSEp2ZG1sa1pYSTZJSEp3WTFCeWIzWnBaR1Z5SUgwcExGeHVJQ0FnSUdOeVpXRjBaVUpzYjJOclZISmhZMnRsY2tsdWMzQmxZM1J2Y2sxcFpHUnNaWGRoY21Vb2V5QmliRzlqYTFSeVlXTnJaWElnZlNrc1hHNGdJQ0FnY25CalFYQnBUV2xrWkd4bGQyRnlaU3hjYmlBZ1hTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHTnlaV0YwWlU1bGRIZHZjbXRCYm1SRGFHRnBia2xrVFdsa1pHeGxkMkZ5WlNoN1hHNGdJRzVsZEhkdmNtc3NYRzU5T2lCN1hHNGdJRzVsZEhkdmNtczZJRUoxYVd4MFNXNUpibVoxY21GT1pYUjNiM0pyTzF4dWZTa2dlMXh1SUNCcFppQW9JVUpWU1V4VVgwbE9YMGxPUmxWU1FWOU9SVlJYVDFKTFUxdHVaWFIzYjNKclhTa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1kzSmxZWFJsU1c1bWRYSmhRMnhwWlc1MElDMGdkVzVyYm05M2JpQnVaWFIzYjNKcklGd2lKSHR1WlhSM2IzSnJmVndpWUNrN1hHNGdJSDFjYmx4dUlDQmpiMjV6ZENCN0lHTm9ZV2x1U1dRc0lHNWxkSGR2Y210SlpDQjlJRDBnUWxWSlRGUmZTVTVmU1U1R1ZWSkJYMDVGVkZkUFVrdFRXMjVsZEhkdmNtdGRPMXh1WEc0Z0lISmxkSFZ5YmlCamNtVmhkR1ZUWTJGbVptOXNaRTFwWkdSc1pYZGhjbVVvZTF4dUlDQWdJR1YwYUY5amFHRnBia2xrT2lCamFHRnBia2xrTEZ4dUlDQWdJRzVsZEY5MlpYSnphVzl1T2lCdVpYUjNiM0pyU1dRc1hHNGdJSDBwTzF4dWZWeHVYRzVqYjI1emRDQmpjbVZoZEdWRGFHRnBia2xrVFdsa1pHeGxkMkZ5WlNBOUlDaGNiaUFnWTJoaGFXNUpaRG9nYzNSeWFXNW5MRnh1S1RvZ1NuTnZibEp3WTAxcFpHUnNaWGRoY21VOGRXNXJibTkzYml3Z2RXNXJibTkzYmo0Z1BUNGdlMXh1SUNCeVpYUjFjbTRnS0hKbGNTd2djbVZ6TENCdVpYaDBMQ0JsYm1RcElEMCtJSHRjYmlBZ0lDQnBaaUFvY21WeExtMWxkR2h2WkNBOVBUMGdKMlYwYUY5amFHRnBia2xrSnlrZ2UxeHVJQ0FnSUNBZ2NtVnpMbkpsYzNWc2RDQTlJR05vWVdsdVNXUTdYRzRnSUNBZ0lDQnlaWFIxY200Z1pXNWtLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdVpYaDBLQ2s3WEc0Z0lIMDdYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQmpjbVZoZEdWRGRYTjBiMjFPWlhSM2IzSnJUV2xrWkd4bGQyRnlaU2g3WEc0Z0lHSnNiMk5yVkhKaFkydGxjaXhjYmlBZ1kyaGhhVzVKWkN4Y2JpQWdjbkJqUVhCcFRXbGtaR3hsZDJGeVpTeGNibjA2SUh0Y2JpQWdZbXh2WTJ0VWNtRmphMlZ5T2lCUWIyeHNhVzVuUW14dlkydFVjbUZqYTJWeU8xeHVJQ0JqYUdGcGJrbGtPaUJ6ZEhKcGJtYzdYRzRnSUhKd1kwRndhVTFwWkdSc1pYZGhjbVU2SUdGdWVUdGNibjBwSUh0Y2JpQWdZMjl1YzNRZ2RHVnpkRTFwWkdSc1pYZGhjbVZ6SUQwZ2NISnZZMlZ6Y3k1bGJuWXVTVTVmVkVWVFZGeHVJQ0FnSUQ4Z1cyTnlaV0YwWlVWemRHbHRZWFJsUjJGelJHVnNZWGxVWlhOMFRXbGtaR3hsZDJGeVpTZ3BYVnh1SUNBZ0lEb2dXMTA3WEc1Y2JpQWdjbVYwZFhKdUlHMWxjbWRsVFdsa1pHeGxkMkZ5WlNoYlhHNGdJQ0FnTGk0dWRHVnpkRTFwWkdSc1pYZGhjbVZ6TEZ4dUlDQWdJR055WldGMFpVTm9ZV2x1U1dSTmFXUmtiR1YzWVhKbEtHTm9ZV2x1U1dRcExGeHVJQ0FnSUdOeVpXRjBaVUpzYjJOclVtVm1VbVYzY21sMFpVMXBaR1JzWlhkaGNtVW9leUJpYkc5amExUnlZV05yWlhJZ2ZTa3NYRzRnSUNBZ1kzSmxZWFJsUW14dlkydERZV05vWlUxcFpHUnNaWGRoY21Vb2V5QmliRzlqYTFSeVlXTnJaWElnZlNrc1hHNGdJQ0FnWTNKbFlYUmxTVzVtYkdsbmFIUkRZV05vWlUxcFpHUnNaWGRoY21Vb0tTeGNiaUFnSUNCamNtVmhkR1ZDYkc5amExUnlZV05yWlhKSmJuTndaV04wYjNKTmFXUmtiR1YzWVhKbEtIc2dZbXh2WTJ0VWNtRmphMlZ5SUgwcExGeHVJQ0FnSUhKd1kwRndhVTFwWkdSc1pYZGhjbVVzWEc0Z0lGMHBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFWnZjaUIxYzJVZ2FXNGdkR1Z6ZEhNZ2IyNXNlUzVjYmlBcUlFRmtaSE1nWVNCa1pXeGhlU0IwYnlCZ1pYUm9YMlZ6ZEdsdFlYUmxSMkZ6WUNCallXeHNjeTVjYmlBcUwxeHVablZ1WTNScGIyNGdZM0psWVhSbFJYTjBhVzFoZEdWSFlYTkVaV3hoZVZSbGMzUk5hV1JrYkdWM1lYSmxLQ2tnZTF4dUlDQnlaWFIxY200Z1kzSmxZWFJsUVhONWJtTk5hV1JrYkdWM1lYSmxLR0Z6ZVc1aklDaHlaWEVzSUY4c0lHNWxlSFFwSUQwK0lIdGNiaUFnSUNCcFppQW9jbVZ4TG0xbGRHaHZaQ0E5UFQwZ0oyVjBhRjlsYzNScGJXRjBaVWRoY3ljcElIdGNiaUFnSUNBZ0lHRjNZV2wwSUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabEtTQTlQaUJ6WlhSVWFXMWxiM1YwS0hKbGMyOXNkbVVzSUZORlEwOU9SQ0FxSURJcEtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzVsZUhRb0tUdGNiaUFnZlNrN1hHNTlYRzRpTENKbGVIQnZjblFnS2lCbWNtOXRJQ2N1TDI1bGRIZHZjbXN0WTI5dWRISnZiR3hsY2ljN1hHNGlMQ0pwYlhCdmNuUWdleUJ6ZEhKcFkzUWdZWE1nWVhOelpYSjBJSDBnWm5KdmJTQW5ZWE56WlhKMEp6dGNibWx0Y0c5eWRDQkZkbVZ1ZEVWdGFYUjBaWElnWm5KdmJTQW5aWFpsYm5Sekp6dGNibWx0Y0c5eWRDQjdJRTlpYzJWeWRtRmliR1ZUZEc5eVpTQjlJR1p5YjIwZ0owQnRaWFJoYldGemF5OXZZbk10YzNSdmNtVW5PMXh1YVcxd2IzSjBJR3h2WnlCbWNtOXRJQ2RzYjJkc1pYWmxiQ2M3WEc1cGJYQnZjblFnZTF4dUlDQmpjbVZoZEdWVGQyRndjR0ZpYkdWUWNtOTRlU3hjYmlBZ1kzSmxZWFJsUlhabGJuUkZiV2wwZEdWeVVISnZlSGtzWEc0Z0lGTjNZWEJ3WVdKc1pWQnliM2g1TEZ4dWZTQm1jbTl0SUNkQWJXVjBZVzFoYzJzdmMzZGhjSEJoWW14bExXOWlhaTF3Y205NGVTYzdYRzVwYlhCdmNuUWdSWFJvVVhWbGNua2dabkp2YlNBblpYUm9MWEYxWlhKNUp6dGNibWx0Y0c5eWRDQjdJRkpsYzNSeWFXTjBaV1JEYjI1MGNtOXNiR1Z5VFdWemMyVnVaMlZ5SUgwZ1puSnZiU0FuUUcxbGRHRnRZWE5yTDJKaGMyVXRZMjl1ZEhKdmJHeGxjaWM3WEc1cGJYQnZjblFnZXlCMk5DQmhjeUIxZFdsa0lIMGdabkp2YlNBbmRYVnBaQ2M3WEc1cGJYQnZjblFnZXlCSVpYZ3NJR2x6VUd4aGFXNVBZbXBsWTNRc0lHbHpVM1J5YVdOMFNHVjRVM1J5YVc1bklIMGdabkp2YlNBblFHMWxkR0Z0WVhOckwzVjBhV3h6Snp0Y2JtbHRjRzl5ZENCN0lHVnljbTl5UTI5a1pYTWdmU0JtY205dElDZGxkR2d0Y25CakxXVnljbTl5Y3ljN1hHNXBiWEJ2Y25RZ2V5QlRZV1psUlhabGJuUkZiV2wwZEdWeVVISnZkbWxrWlhJZ2ZTQm1jbTl0SUNkQWJXVjBZVzFoYzJzdlpYUm9MV3B6YjI0dGNuQmpMWEJ5YjNacFpHVnlKenRjYm1sdGNHOXlkQ0I3SUZCdmJHeHBibWRDYkc5amExUnlZV05yWlhJZ2ZTQm1jbTl0SUNkbGRHZ3RZbXh2WTJzdGRISmhZMnRsY2ljN1hHNXBiWEJ2Y25RZ2V5Qm9aWGhVYjBSbFkybHRZV3dnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2Ylc5a2RXeGxjeTlqYjI1MlpYSnphVzl1TG5WMGFXeHpKenRjYm1sdGNHOXlkQ0I3WEc0Z0lFbE9SbFZTUVY5UVVrOVdTVVJGVWw5VVdWQkZVeXhjYmlBZ1NVNUdWVkpCWDBKTVQwTkxSVVJmUzBWWkxGeHVJQ0JVUlZOVVgwNUZWRmRQVWt0ZlZFbERTMFZTWDAxQlVDeGNiaUFnUTBoQlNVNWZTVVJUTEZ4dUlDQk9SVlJYVDFKTFgxUlpVRVZUTEZ4dUlDQkNWVWxNVkY5SlRsOUpUa1pWVWtGZlRrVlVWMDlTUzFNc1hHNGdJRUoxYVd4MFNXNUpibVoxY21GT1pYUjNiM0pyTEZ4dUlDQk9aWFIzYjNKclUzUmhkSFZ6TEZ4dWZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwyNWxkSGR2Y21zbk8xeHVhVzF3YjNKMElIdGNiaUFnYVhOUWNtVm1hWGhsWkVadmNtMWhkSFJsWkVobGVGTjBjbWx1Wnl4Y2JpQWdhWE5UWVdabFEyaGhhVzVKWkN4Y2JuMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyMXZaSFZzWlhNdmJtVjBkMjl5YXk1MWRHbHNjeWM3WEc1cGJYQnZjblFnZTF4dUlDQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rc1hHNGdJRTFsZEdGTlpYUnlhV056UlhabGJuUlFZWGxzYjJGa0xGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMMjFsZEdGdFpYUnlhV056Snp0Y2JtbHRjRzl5ZENCN0lHbHpSWEp5YjNKWGFYUm9UV1Z6YzJGblpTQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOXRiMlIxYkdWekwyVnljbTl5Snp0Y2JtbHRjRzl5ZENCN1hHNGdJR055WldGMFpVNWxkSGR2Y210RGJHbGxiblFzWEc0Z0lFNWxkSGR2Y210RGJHbGxiblJVZVhCbExGeHVmU0JtY205dElDY3VMMk55WldGMFpTMXVaWFIzYjNKckxXTnNhV1Z1ZENjN1hHNWNiaThxS2x4dUlDb2dWR2hsSUc1aGJXVWdiMllnVG1WMGQyOXlhME52Ym5SeWIyeHNaWEl1WEc0Z0tpOWNibU52Ym5OMElHNWhiV1VnUFNBblRtVjBkMjl5YTBOdmJuUnliMnhzWlhJbk8xeHVYRzR2S2lwY2JpQXFJRUVnWW14dlkyc2dhR1ZoWkdWeUlHOWlhbVZqZENCMGFHRjBJR0JsZEdoZloyVjBRbXh2WTJ0Q2VVNTFiV0psY21BZ2NtVjBkWEp1Y3k0Z1RtOTBaU0IwYUdGMElIUm9hWE5jYmlBcUlIUjVjR1VnWkc5bGN5QnViM1FnYzNCbFkybG1lU0JoYkd3Z2IyWWdkR2hsSUhCeWIzQmxjblJwWlhNZ2NISmxjMlZ1ZENCM2FYUm9hVzRnZEdobElHSnNiMk5ySUdobFlXUmxjanRjYmlBcUlIZHBkR2hwYmlCT1pYUjNiM0pyUTI5dWRISnZiR3hsY2l3Z2QyVWdZWEpsSUc5dWJIa2dhVzUwWlhKbGMzUmxaQ0JwYmlCZ1ltRnpaVVpsWlZCbGNrZGhjMkF1WEc0Z0tpOWNiblI1Y0dVZ1FteHZZMnNnUFNCN1hHNGdJR0poYzJWR1pXVlFaWEpIWVhNL09pQjFibXR1YjNkdU8xeHVmVHRjYmx4dUx5b3FYRzRnS2lCRmJtTnZaR1Z6SUdFZ1ptVjNJSEJwWldObGN5QnZaaUJwYm1admNtMWhkR2x2YmpwY2JpQXFYRzRnS2lBdElGZG9aWFJvWlhJZ2IzSWdibTkwSUdFZ2NISnZkbWxrWlhJZ2FYTWdZMjl1Wm1sbmRYSmxaQ0JtYjNJZ1lXNGdTVzVtZFhKaElHNWxkSGR2Y21zZ2IzSWdZVnh1SUNvZ2JtOXVMVWx1Wm5WeVlTQnVaWFIzYjNKckxseHVJQ29nTFNCSlppQmhiaUJKYm1aMWNtRWdibVYwZDI5eWF5d2dkR2hsYmlCM2FHbGphQ0J1WlhSM2IzSnJMbHh1SUNvZ0xTQkpaaUJoSUc1dmJpMUpibVoxY21FZ2JtVjBkMjl5YXl3Z2RHaGxiaUIzYUdWMGFHVnlJSFJvWlNCdVpYUjNiM0pySUdWNGFYTjBjeUJzYjJOaGJHeDVJRzl5WEc0Z0tpQnlaVzF2ZEdWc2VTNWNiaUFxWEc0Z0tpQlFjbWx0WVhKcGJIa2dkWE5sWkNCMGJ5QmlkV2xzWkNCMGFHVWdibVYwZDI5eWF5QmpiR2xsYm5RZ1lXNWtJR05vWldOcklIUm9aU0JoZG1GcGJHRmlhV3hwZEhrZ2IyWWdZVnh1SUNvZ2JtVjBkMjl5YXk1Y2JpQXFMMXh1Wlhod2IzSjBJSFI1Y0dVZ1VISnZkbWxrWlhKVWVYQmxJRDBnUW5WcGJIUkpia2x1Wm5WeVlVNWxkSGR2Y21zZ2ZDQjBlWEJsYjJZZ1RrVlVWMDlTUzE5VVdWQkZVeTVTVUVNN1hHNWNiaThxS2x4dUlDb2dWR2hsSUc1bGRIZHZjbXNnU1VRZ2IyWWdZU0J1WlhSM2IzSnJMbHh1SUNvdlhHNTBlWEJsSUU1bGRIZHZjbXRKWkNBOUlHQWtlMjUxYldKbGNuMWdPMXh1WEc0dktpcGNiaUFxSUZSb1pTQkpSQ0J2WmlCaElHNWxkSGR2Y21zZ1kyOXVabWxuZFhKaGRHbHZiaTVjYmlBcUwxeHVkSGx3WlNCT1pYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJrbGtJRDBnYzNSeWFXNW5PMXh1WEc0dktpcGNiaUFxSUZSb1pTQmphR0ZwYmlCSlJDQnZaaUJoSUc1bGRIZHZjbXN1WEc0Z0tpOWNiblI1Y0dVZ1EyaGhhVzVKWkNBOUlFaGxlRHRjYmx4dUx5b3FYRzRnS2lCVWFHVWdjMlYwSUc5bUlHVjJaVzUwSUhSNWNHVnpJSFJvWVhRZ1RtVjBkMjl5YTBOdmJuUnliMnhzWlhJZ1kyRnVJSEIxWW14cGMyZ2dkbWxoSUdsMGN5QnRaWE56Wlc1blpYSXVYRzRnS2k5Y2JtVjRjRzl5ZENCbGJuVnRJRTVsZEhkdmNtdERiMjUwY205c2JHVnlSWFpsYm5SVWVYQmxJSHRjYmlBZ0x5b3FYRzRnSUNBcUlFQnpaV1VnZTBCc2FXNXJJRTVsZEhkdmNtdERiMjUwY205c2JHVnlUbVYwZDI5eWEwUnBaRU5vWVc1blpVVjJaVzUwZlZ4dUlDQWdLaTljYmlBZ1RtVjBkMjl5YTBScFpFTm9ZVzVuWlNBOUlDZE9aWFIzYjNKclEyOXVkSEp2Ykd4bGNqcHVaWFIzYjNKclJHbGtRMmhoYm1kbEp5eGNiaUFnTHlvcVhHNGdJQ0FxSUVCelpXVWdlMEJzYVc1cklFNWxkSGR2Y210RGIyNTBjbTlzYkdWeVRtVjBkMjl5YTFkcGJHeERhR0Z1WjJWRmRtVnVkSDFjYmlBZ0lDb3ZYRzRnSUU1bGRIZHZjbXRYYVd4c1EyaGhibWRsSUQwZ0owNWxkSGR2Y210RGIyNTBjbTlzYkdWeU9tNWxkSGR2Y210WGFXeHNRMmhoYm1kbEp5eGNiaUFnTHlvcVhHNGdJQ0FxSUVCelpXVWdlMEJzYVc1cklFNWxkSGR2Y210RGIyNTBjbTlzYkdWeVNXNW1kWEpoU1hOQ2JHOWphMlZrUlhabGJuUjlYRzRnSUNBcUwxeHVJQ0JKYm1aMWNtRkpjMEpzYjJOclpXUWdQU0FuVG1WMGQyOXlhME52Ym5SeWIyeHNaWEk2YVc1bWRYSmhTWE5DYkc5amEyVmtKeXhjYmlBZ0x5b3FYRzRnSUNBcUlFQnpaV1VnZTBCc2FXNXJJRTVsZEhkdmNtdERiMjUwY205c2JHVnlTVzVtZFhKaFNYTlZibUpzYjJOclpXUkZkbVZ1ZEgxY2JpQWdJQ292WEc0Z0lFbHVablZ5WVVselZXNWliRzlqYTJWa0lEMGdKMDVsZEhkdmNtdERiMjUwY205c2JHVnlPbWx1Wm5WeVlVbHpWVzVpYkc5amEyVmtKeXhjYm4xY2JseHVMeW9xWEc0Z0tpQmdibVYwZDI5eWExZHBiR3hEYUdGdVoyVmdJR2x6SUhCMVlteHBjMmhsWkNCM2FHVnVJSFJvWlNCamRYSnlaVzUwSUc1bGRIZHZjbXNnYVhNZ1lXSnZkWFFnZEc4Z1ltVmNiaUFxSUhOM2FYUmphR1ZrTENCaWRYUWdkR2hsSUc1bGR5QndjbTkyYVdSbGNpQm9ZWE1nYm05MElHSmxaVzRnWTNKbFlYUmxaQ0JoYm1RZ2JtOGdjM1JoZEdVZ1kyaGhibWRsY3lCb1lYWmxYRzRnS2lCdlkyTjFjbkpsWkNCNVpYUXVYRzRnS2k5Y2JtVjRjRzl5ZENCMGVYQmxJRTVsZEhkdmNtdERiMjUwY205c2JHVnlUbVYwZDI5eWExZHBiR3hEYUdGdVoyVkZkbVZ1ZENBOUlIdGNiaUFnZEhsd1pUb2dUbVYwZDI5eWEwTnZiblJ5YjJ4c1pYSkZkbVZ1ZEZSNWNHVXVUbVYwZDI5eWExZHBiR3hEYUdGdVoyVTdYRzRnSUhCaGVXeHZZV1E2SUZ0ZE8xeHVmVHRjYmx4dUx5b3FYRzRnS2lCZ2JtVjBkMjl5YTBScFpFTm9ZVzVuWldBZ2FYTWdjSFZpYkdsemFHVmtJR0ZtZEdWeUlHRWdjSEp2ZG1sa1pYSWdhR0Z6SUdKbFpXNGdZM0psWVhSbFpDQm1iM0lnWVNCdVpYZHNlVnh1SUNvZ2MzZHBkR05vWldRZ2JtVjBkMjl5YXlBb1luVjBJR0psWm05eVpTQjBhR1VnYm1WMGQyOXlheUJvWVhNZ1ltVmxiaUJqYjI1bWFYSnRaV1FnZEc4Z1ltVWdZWFpoYVd4aFlteGxLUzVjYmlBcUwxeHVaWGh3YjNKMElIUjVjR1VnVG1WMGQyOXlhME52Ym5SeWIyeHNaWEpPWlhSM2IzSnJSR2xrUTJoaGJtZGxSWFpsYm5RZ1BTQjdYRzRnSUhSNWNHVTZJRTVsZEhkdmNtdERiMjUwY205c2JHVnlSWFpsYm5SVWVYQmxMazVsZEhkdmNtdEVhV1JEYUdGdVoyVTdYRzRnSUhCaGVXeHZZV1E2SUZ0ZE8xeHVmVHRjYmx4dUx5b3FYRzRnS2lCZ2FXNW1kWEpoU1hOQ2JHOWphMlZrWUNCcGN5QndkV0pzYVhOb1pXUWdZV1owWlhJZ2RHaGxJRzVsZEhkdmNtc2dhWE1nYzNkcGRHTm9aV1FnZEc4Z1lXNGdTVzVtZFhKaFhHNGdLaUJ1WlhSM2IzSnJMQ0JpZFhRZ2QyaGxiaUJKYm1aMWNtRWdjbVYwZFhKdWN5QmhiaUJsY25KdmNpQmliRzlqYTJsdVp5QjBhR1VnZFhObGNpQmlZWE5sWkNCdmJpQjBhR1ZwY2x4dUlDb2diRzlqWVhScGIyNHVYRzRnS2k5Y2JtVjRjRzl5ZENCMGVYQmxJRTVsZEhkdmNtdERiMjUwY205c2JHVnlTVzVtZFhKaFNYTkNiRzlqYTJWa1JYWmxiblFnUFNCN1hHNGdJSFI1Y0dVNklFNWxkSGR2Y210RGIyNTBjbTlzYkdWeVJYWmxiblJVZVhCbExrbHVablZ5WVVselFteHZZMnRsWkR0Y2JpQWdjR0Y1Ykc5aFpEb2dXMTA3WEc1OU8xeHVYRzR2S2lwY2JpQXFJR0JwYm1aMWNtRkpjMEpzYjJOclpXUmdJR2x6SUhCMVlteHBjMmhsWkNCbGFYUm9aWElnWVdaMFpYSWdkR2hsSUc1bGRIZHZjbXNnYVhNZ2MzZHBkR05vWldRZ2RHOGdZVzVjYmlBcUlFbHVablZ5WVNCdVpYUjNiM0pySUdGdVpDQkpibVoxY21FZ1pHOWxjeUJ1YjNRZ2NtVjBkWEp1SUdGdUlHVnljbTl5SUdKc2IyTnJhVzVuSUhSb1pTQjFjMlZ5SUdKaGMyVmtJRzl1WEc0Z0tpQjBhR1ZwY2lCc2IyTmhkR2x2Yml3Z2IzSWdkR2hsSUc1bGRIZHZjbXNnYVhNZ2MzZHBkR05vWldRZ2RHOGdZU0J1YjI0dFNXNW1kWEpoSUc1bGRIZHZjbXN1WEc0Z0tpOWNibVY0Y0c5eWRDQjBlWEJsSUU1bGRIZHZjbXREYjI1MGNtOXNiR1Z5U1c1bWRYSmhTWE5WYm1Kc2IyTnJaV1JGZG1WdWRDQTlJSHRjYmlBZ2RIbHdaVG9nVG1WMGQyOXlhME52Ym5SeWIyeHNaWEpGZG1WdWRGUjVjR1V1U1c1bWRYSmhTWE5WYm1Kc2IyTnJaV1E3WEc0Z0lIQmhlV3h2WVdRNklGdGRPMXh1ZlR0Y2JseHVMeW9xWEc0Z0tpQlVhR1VnYzJWMElHOW1JR1YyWlc1MGN5QjBhR0YwSUhSb1pTQk9aWFIzYjNKclEyOXVkSEp2Ykd4bGNpQnRaWE56Wlc1blpYSWdZMkZ1SUhCMVlteHBjMmd1WEc0Z0tpOWNibVY0Y0c5eWRDQjBlWEJsSUU1bGRIZHZjbXREYjI1MGNtOXNiR1Z5UlhabGJuUWdQVnh1SUNCOElFNWxkSGR2Y210RGIyNTBjbTlzYkdWeVRtVjBkMjl5YTBScFpFTm9ZVzVuWlVWMlpXNTBYRzRnSUh3Z1RtVjBkMjl5YTBOdmJuUnliMnhzWlhKT1pYUjNiM0pyVjJsc2JFTm9ZVzVuWlVWMlpXNTBYRzRnSUh3Z1RtVjBkMjl5YTBOdmJuUnliMnhzWlhKSmJtWjFjbUZKYzBKc2IyTnJaV1JGZG1WdWRGeHVJQ0I4SUU1bGRIZHZjbXREYjI1MGNtOXNiR1Z5U1c1bWRYSmhTWE5WYm1Kc2IyTnJaV1JGZG1WdWREdGNibHh1THlvcVhHNGdLaUJVYUdVZ2JXVnpjMlZ1WjJWeUlIUm9ZWFFnZEdobElFNWxkSGR2Y210RGIyNTBjbTlzYkdWeUlIVnpaWE1nZEc4Z2NIVmliR2x6YUNCbGRtVnVkSE11WEc0Z0tpOWNibVY0Y0c5eWRDQjBlWEJsSUU1bGRIZHZjbXREYjI1MGNtOXNiR1Z5VFdWemMyVnVaMlZ5SUQwZ1VtVnpkSEpwWTNSbFpFTnZiblJ5YjJ4c1pYSk5aWE56Wlc1blpYSThYRzRnSUhSNWNHVnZaaUJ1WVcxbExGeHVJQ0J1WlhabGNpeGNiaUFnVG1WMGQyOXlhME52Ym5SeWIyeHNaWEpGZG1WdWRDeGNiaUFnYm1WMlpYSXNYRzRnSUU1bGRIZHZjbXREYjI1MGNtOXNiR1Z5UlhabGJuUlVlWEJsWEc0K08xeHVYRzR2S2lwY2JpQXFJRWx1Wm05eWJXRjBhVzl1SUhWelpXUWdkRzhnYzJWMElIVndJSFJvWlNCdGFXUmtiR1YzWVhKbElITjBZV05ySUdadmNpQmhJSEJoY25ScFkzVnNZWElnYTJsdVpDQnZabHh1SUNvZ2JtVjBkMjl5YXk0Z1EzVnljbVZ1ZEd4NUlHaGhjeUJ2ZG1WeWJHRndJSGRwZEdnZ1lFNWxkSGR2Y210RGIyNW1hV2QxY21GMGFXOXVZQ3dnWVd4MGFHOTFaMmdnZEdobFhHNGdLaUIwZDI4Z2QybHNiQ0JpWlNCdFpYSm5aV1FnWkc5M2JpQjBhR1VnY205aFpDNWNiaUFxTDF4dVpYaHdiM0owSUhSNWNHVWdVSEp2ZG1sa1pYSkRiMjVtYVdkMWNtRjBhVzl1SUQwZ2UxeHVJQ0F2S2lwY2JpQWdJQ29nUldsMGFHVnlJR0VnZEhsd1pTQnZaaUJKYm1aMWNtRWdibVYwZDI5eWF5d2dYQ0pzYjJOaGJHaHZjM1JjSWlCbWIzSWdZU0JzYjJOaGJHeDVJRzl3WlhKaGRHVmtYRzRnSUNBcUlHNWxkSGR2Y21zc0lHOXlJRndpY25CalhDSWdabTl5SUdWMlpYSjVkR2hwYm1jZ1pXeHpaUzVjYmlBZ0lDb3ZYRzRnSUhSNWNHVTZJRkJ5YjNacFpHVnlWSGx3WlR0Y2JpQWdMeW9xWEc0Z0lDQXFJRlJvWlNCamFHRnBiaUJKUkNCaGN5QndaWElnUlVsUUxURTFOUzVjYmlBZ0lDb3ZYRzRnSUdOb1lXbHVTV1E2SUVOb1lXbHVTV1E3WEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR1VnVlZKTUlHOW1JSFJvWlNCU1VFTWdaVzVrY0c5cGJuUXVJRTl1YkhrZ2RYTmxaQ0IzYUdWdUlHQjBlWEJsWUNCcGN5QmNJbXh2WTJGc2FHOXpkRndpSUc5eUlGd2ljbkJqWENJdVhHNGdJQ0FxTDF4dUlDQnljR05WY213L09pQnpkSEpwYm1jN1hHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ2MyaHZjblJ1WVcxbElHOW1JSFJvWlNCamRYSnlaVzVqZVNCMWMyVmtJR0o1SUhSb1pTQnVaWFIzYjNKckxseHVJQ0FnS2k5Y2JpQWdkR2xqYTJWeVB6b2djM1J5YVc1bk8xeHVJQ0F2S2lwY2JpQWdJQ29nVkdobElIVnpaWEl0WTNWemRHOXRhWHBoWW14bElHNWhiV1VnYjJZZ2RHaGxJRzVsZEhkdmNtc3VYRzRnSUNBcUwxeHVJQ0J1YVdOcmJtRnRaVDg2SUhOMGNtbHVaenRjYmlBZ0x5b3FYRzRnSUNBcUlGVnpaWEl0WTNWemRHOXRhWHBoWW14bElHUmxkR0ZwYkhNZ1ptOXlJSFJvWlNCdVpYUjNiM0pyTGx4dUlDQWdLaTljYmlBZ2NuQmpVSEpsWm5NL09pQjdYRzRnSUNBZ1lteHZZMnRGZUhCc2IzSmxjbFZ5YkQ4NklITjBjbWx1Wnp0Y2JpQWdmVHRjYm4wN1hHNWNiaThxS2x4dUlDb2dWR2hsSUdOdmJuUmxiblJ6SUc5bUlIUm9aU0JnYm1WMGQyOXlhMGxrWUNCemRHOXlaUzVjYmlBcUwxeHVkSGx3WlNCT1pYUjNiM0pyU1dSVGRHRjBaU0E5SUU1bGRIZHZjbXRKWkNCOElHNTFiR3c3WEc1Y2JpOHFLbHh1SUNvZ1NXNW1iM0p0WVhScGIyNGdZV0p2ZFhRZ2RHaGxJRzVsZEhkdmNtc2dibTkwSUdobGJHUWdZbmtnWVc1NUlHOTBhR1Z5SUhCaGNuUWdiMllnYzNSaGRHVXVJRU4xY25KbGJuUnNlVnh1SUNvZ2IyNXNlU0IxYzJWa0lIUnZJR05oY0hSMWNtVWdkMmhsZEdobGNpQmhJRzVsZEhkdmNtc2djM1Z3Y0c5eWRITWdSVWxRTFRFMU5Ua3VYRzRnS2k5Y2JuUjVjR1VnVG1WMGQyOXlhMFJsZEdGcGJITWdQU0I3WEc0Z0lDOHFLbHh1SUNBZ0tpQkZTVkJ6SUhOMWNIQnZjblJsWkNCaWVTQjBhR1VnYm1WMGQyOXlheTVjYmlBZ0lDb3ZYRzRnSUVWSlVGTTZJSHRjYmlBZ0lDQmJaV2x3VG5WdFltVnlPaUJ1ZFcxaVpYSmRPaUJpYjI5c1pXRnVJSHdnZFc1a1pXWnBibVZrTzF4dUlDQjlPMXh1SUNCYmIzUm9aWEpRY205d1pYSjBlVG9nYzNSeWFXNW5YVG9nZFc1cmJtOTNianRjYm4wN1hHNWNiaThxS2x4dUlDb2dRU0JjSW01bGRIZHZjbXNnWTI5dVptbG5kWEpoZEdsdmJsd2lJSEpsY0hKbGMyVnVkSE1nWTI5dWJtVmpkR2x2YmlCa1lYUmhJR1JwY21WamRHeDVJSEJ5YjNacFpHVmtJR0o1WEc0Z0tpQjFjMlZ5Y3lCMmFXRWdkR2hsSUhkaGJHeGxkQ0JWU1NCbWIzSWdZU0JqZFhOMGIyMGdibVYwZDI5eWF5QW9kMlVnWVd4eVpXRmtlU0JvWVhabElIUm9hWE5jYmlBcUlHbHVabTl5YldGMGFXOXVJR1p2Y2lCdVpYUjNiM0pyY3lCMGFHRjBJR052YldVZ2NISmxMWE5vYVhCd1pXUWdkMmwwYUNCMGFHVWdkMkZzYkdWMEtTNGdWV3gwYVcxaGRHVnNlVnh1SUNvZ2RYTmxaQ0IwYnlCelpYUWdkWEFnZEdobElHMXBaR1JzWlhkaGNtVWdjM1JoWTJzZ2MyOGdkR2hoZENCMGFHVWdkMkZzYkdWMElHTmhiaUJ0WVd0bElISmxjWFZsYzNSeklIUnZYRzRnS2lCMGFHVWdibVYwZDI5eWF5NGdRM1Z5Y21WdWRHeDVJR2hoY3lCdmRtVnliR0Z3SUhkcGRHZ2dZRkJ5YjNacFpHVnlRMjl1Wm1sbmRYSmhkR2x2Ym1Bc0lHRnNkR2h2ZFdkb0lIUm9aVnh1SUNvZ2RIZHZJSGRwYkd3Z1ltVWdiV1Z5WjJWa0lHUnZkMjRnZEdobElISnZZV1F1WEc0Z0tpOWNiblI1Y0dVZ1RtVjBkMjl5YTBOdmJtWnBaM1Z5WVhScGIyNGdQU0I3WEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR1VnZFc1cGNYVmxJRWxFSUc5bUlIUm9aU0J1WlhSM2IzSnJJR052Ym1acFozVnlZWFJwYjI0dUlGVnpaV1oxYkNCbWIzSWdjM2RwZEdOb2FXNW5JSFJ2SUdGdVpGeHVJQ0FnS2lCeVpXMXZkbWx1WnlCemNHVmphV1pwWXlCdVpYUjNiM0pyY3k1Y2JpQWdJQ292WEc0Z0lHbGtPaUJPWlhSM2IzSnJRMjl1Wm1sbmRYSmhkR2x2Ymtsa08xeHVJQ0F2S2lwY2JpQWdJQ29nVkdobElGVlNUQ0J2WmlCMGFHVWdVbEJESUdWdVpIQnZhVzUwTGlCUGJteDVJSFZ6WldRZ2QyaGxiaUJnZEhsd1pXQWdhWE1nWENKc2IyTmhiR2h2YzNSY0lpQnZjaUJjSW5Kd1kxd2lMbHh1SUNBZ0tpOWNiaUFnY25CalZYSnNPaUJ6ZEhKcGJtYzdYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVWdZMmhoYVc0Z1NVUWdZWE1nY0dWeUlFVkpVQzB4TlRVdVhHNGdJQ0FxTDF4dUlDQmphR0ZwYmtsa09pQkRhR0ZwYmtsa08xeHVJQ0F2S2lwY2JpQWdJQ29nVkdobElITm9iM0owYm1GdFpTQnZaaUIwYUdVZ1kzVnljbVZ1WTNrZ2RYTmxaQ0JtYjNJZ2RHaHBjeUJ1WlhSM2IzSnJMbHh1SUNBZ0tpOWNiaUFnZEdsamEyVnlPaUJ6ZEhKcGJtYzdYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVWdkWE5sY2kxamRYTjBiMjFwZW1GaWJHVWdibUZ0WlNCdlppQjBhR1VnYm1WMGQyOXlheTVjYmlBZ0lDb3ZYRzRnSUc1cFkydHVZVzFsUHpvZ2MzUnlhVzVuTzF4dUlDQXZLaXBjYmlBZ0lDb2dWWE5sY2kxamRYTjBiMjFwZW1GaWJHVWdaR1YwWVdsc2N5Qm1iM0lnZEdobElHNWxkSGR2Y21zdVhHNGdJQ0FxTDF4dUlDQnljR05RY21WbWN6ODZJSHRjYmlBZ0lDQmliRzlqYTBWNGNHeHZjbVZ5VlhKc09pQnpkSEpwYm1jN1hHNGdJSDA3WEc1OU8xeHVYRzR2S2lwY2JpQXFJRUVnYzJWMElHOW1JRzVsZEhkdmNtc2dZMjl1Wm1sbmRYSmhkR2x2Ym5Nc0lHdGxlV1ZrSUdKNUlFbEVMbHh1SUNvdlhHNTBlWEJsSUU1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dWN5QTlJRkpsWTI5eVpEeGNiaUFnVG1WMGQyOXlhME52Ym1acFozVnlZWFJwYjI1SlpDeGNiaUFnVG1WMGQyOXlhME52Ym1acFozVnlZWFJwYjI1Y2JqNDdYRzVjYmk4cUtseHVJQ29nVkdobElITjBZWFJsSUhSb1lYUWdUbVYwZDI5eWEwTnZiblJ5YjJ4c1pYSWdhRzlzWkhNZ1lXWjBaWElnWTI5dFltbHVhVzVuSUdsMGN5QnBibVJwZG1sa2RXRnNJSE4wYjNKbGN5NWNiaUFxTDF4dVpYaHdiM0owSUhSNWNHVWdUbVYwZDI5eWEwTnZiblJ5YjJ4c1pYSlRkR0YwWlNBOUlIdGNiaUFnY0hKdmRtbGtaWEpEYjI1bWFXYzZJRkJ5YjNacFpHVnlRMjl1Wm1sbmRYSmhkR2x2Ymp0Y2JpQWdibVYwZDI5eWEwbGtPaUJPWlhSM2IzSnJTV1JUZEdGMFpUdGNiaUFnYm1WMGQyOXlhMU4wWVhSMWN6b2dUbVYwZDI5eWExTjBZWFIxY3p0Y2JpQWdibVYwZDI5eWEwUmxkR0ZwYkhNNklFNWxkSGR2Y210RVpYUmhhV3h6TzF4dUlDQnVaWFIzYjNKclEyOXVabWxuZFhKaGRHbHZibk02SUU1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dWN6dGNibjA3WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxJRzl3ZEdsdmJuTWdkR2hoZENCT1pYUjNiM0pyUTI5dWRISnZiR3hsY2lCMFlXdGxjeTVjYmlBcUwxeHVaWGh3YjNKMElIUjVjR1VnVG1WMGQyOXlhME52Ym5SeWIyeHNaWEpQY0hScGIyNXpJRDBnZTF4dUlDQnRaWE56Wlc1blpYSTZJRTVsZEhkdmNtdERiMjUwY205c2JHVnlUV1Z6YzJWdVoyVnlPMXh1SUNCemRHRjBaVDg2SUh0Y2JpQWdJQ0J3Y205MmFXUmxja052Ym1acFp6ODZJRkJ5YjNacFpHVnlRMjl1Wm1sbmRYSmhkR2x2Ymp0Y2JpQWdJQ0J1WlhSM2IzSnJSR1YwWVdsc2N6ODZJRTVsZEhkdmNtdEVaWFJoYVd4ek8xeHVJQ0FnSUc1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dWN6ODZJRTVsZEhkdmNtdERiMjVtYVdkMWNtRjBhVzl1Y3p0Y2JpQWdmVHRjYmlBZ2FXNW1kWEpoVUhKdmFtVmpkRWxrT2lCemRISnBibWM3WEc0Z0lIUnlZV05yVFdWMFlVMWxkSEpwWTNORmRtVnVkRG9nS0hCaGVXeHZZV1E2SUUxbGRHRk5aWFJ5YVdOelJYWmxiblJRWVhsc2IyRmtLU0E5UGlCMmIybGtPMXh1ZlR0Y2JseHVMeW9xWEc0Z0tpQlVlWEJsSUdkMVlYSmtJR1p2Y2lCa1pYUmxjbTFwYm1sdVp5QjNhR1YwYUdWeUlIUm9aU0JuYVhabGJpQjJZV3gxWlNCcGN5QmhiaUJsY25KdmNpQnZZbXBsWTNRZ2QybDBhQ0JoWEc0Z0tpQmdZMjlrWldBZ2NISnZjR1Z5ZEhrc0lITjFZMmdnWVhNZ1lXNGdhVzV6ZEdGdVkyVWdiMllnUlhKeWIzSXVYRzRnS2x4dUlDb2dWRTlFVHpvZ1RXOTJaU0IwYUdseklIUnZJRUJ0WlhSaGJXRnpheTkxZEdsc2MxeHVJQ3BjYmlBcUlFQndZWEpoYlNCbGNuSnZjaUF0SUZSb1pTQnZZbXBsWTNRZ2RHOGdZMmhsWTJzdVhHNGdLaUJBY21WMGRYSnVjeUJVY25WbElHbG1JR0JsY25KdmNtQWdhR0Z6SUdFZ1lHTnZaR1ZnTENCbVlXeHpaU0J2ZEdobGNuZHBjMlV1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR2x6UlhKeWIzSlhhWFJvUTI5a1pTaGxjbkp2Y2pvZ2RXNXJibTkzYmlrNklHVnljbTl5SUdseklIc2dZMjlrWlRvZ2MzUnlhVzVuSUh3Z2JuVnRZbVZ5SUgwZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHVnljbTl5SUQwOVBTQW5iMkpxWldOMEp5QW1KaUJsY25KdmNpQWhQVDBnYm5Wc2JDQW1KaUFuWTI5a1pTY2dhVzRnWlhKeWIzSTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyOXVkbVZ5ZENCMGFHVWdaMmwyWlc0Z2RtRnNkV1VnYVc1MGJ5QmhJSFpoYkdsa0lHNWxkSGR2Y21zZ1NVUXVJRlJvWlNCSlJDQnBjeUJoWTJObGNIUmxaRnh1SUNvZ1lYTWdaV2wwYUdWeUlHRWdiblZ0WW1WeUxDQmhJR1JsWTJsdFlXd2djM1J5YVc1bkxDQnZjaUJoSURCNExYQnlaV1pwZUdWa0lHaGxlQ0J6ZEhKcGJtY3VYRzRnS2x4dUlDb2dRSEJoY21GdElIWmhiSFZsSUMwZ1ZHaGxJRzVsZEhkdmNtc2dTVVFnZEc4Z1kyOXVkbVZ5ZEN3Z2FXNGdZVzRnZFc1cmJtOTNiaUJtYjNKdFlYUXVYRzRnS2lCQWNtVjBkWEp1Y3lCQklIWmhiR2xrSUc1bGRIZHZjbXNnU1VRZ0tHRnpJR0VnWkdWamFXMWhiQ0J6ZEhKcGJtY3BYRzRnS2lCQWRHaHliM2R6SUVsbUlIUm9aU0JuYVhabGJpQjJZV3gxWlNCallXNXViM1FnWW1VZ2MyRm1aV3g1SUhCaGNuTmxaQzVjYmlBcUwxeHVablZ1WTNScGIyNGdZMjl1ZG1WeWRFNWxkSGR2Y210SlpDaDJZV3gxWlRvZ2RXNXJibTkzYmlrNklFNWxkSGR2Y210SlpDQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ2RtRnNkV1VnUFQwOUlDZHVkVzFpWlhJbklDWW1JQ0ZPZFcxaVpYSXVhWE5PWVU0b2RtRnNkV1VwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR0FrZTNaaGJIVmxmV0E3WEc0Z0lIMGdaV3h6WlNCcFppQW9hWE5UZEhKcFkzUklaWGhUZEhKcGJtY29kbUZzZFdVcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdobGVGUnZSR1ZqYVcxaGJDaDJZV3gxWlNrZ1lYTWdUbVYwZDI5eWEwbGtPMXh1SUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ0ozTjBjbWx1WnljZ0ppWWdMMTVjWEdRckpDOTFMblJsYzNRb2RtRnNkV1VwS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbElHRnpJRTVsZEhkdmNtdEpaRHRjYmlBZ2ZWeHVJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRU5oYm01dmRDQndZWEp6WlNCaGN5QmhJSFpoYkdsa0lHNWxkSGR2Y21zZ1NVUTZJQ2NrZTNaaGJIVmxmU2RnS1R0Y2JuMWNibHh1THlvcVhHNGdLaUJDZFdsc1pITWdkR2hsSUdSbFptRjFiSFFnY0hKdmRtbGtaWElnWTI5dVptbG5JSFZ6WldRZ2RHOGdhVzVwZEdsaGJHbDZaU0IwYUdVZ2JtVjBkMjl5YXlCamIyNTBjbTlzYkdWeUxseHVJQ292WEc1bWRXNWpkR2x2YmlCaWRXbHNaRVJsWm1GMWJIUlFjbTkyYVdSbGNrTnZibVpwWjFOMFlYUmxLQ2s2SUZCeWIzWnBaR1Z5UTI5dVptbG5kWEpoZEdsdmJpQjdYRzRnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVKVGw5VVJWTlVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lIUjVjR1U2SUU1RlZGZFBVa3RmVkZsUVJWTXVVbEJETEZ4dUlDQWdJQ0FnY25CalZYSnNPaUFuYUhSMGNEb3ZMMnh2WTJGc2FHOXpkRG80TlRRMUp5eGNiaUFnSUNBZ0lHTm9ZV2x1U1dRNklDY3dlRFV6T1Njc1hHNGdJQ0FnSUNCdWFXTnJibUZ0WlRvZ0oweHZZMkZzYUc5emRDQTROVFExSnl4Y2JpQWdJQ0FnSUhScFkydGxjam9nSjBWVVNDY3NYRzRnSUNBZ2ZUdGNiaUFnZlNCbGJITmxJR2xtSUNoY2JpQWdJQ0J3Y205alpYTnpMbVZ1ZGk1TlJWUkJUVUZUUzE5RVJVSlZSeUI4ZkZ4dUlDQWdJSEJ5YjJObGMzTXVaVzUyTGsxRlZFRk5RVk5MWDBWT1ZrbFNUMDVOUlU1VUlEMDlQU0FuZEdWemRDZGNiaUFnS1NCN1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJSFI1Y0dVNklFNUZWRmRQVWt0ZlZGbFFSVk11UjA5RlVreEpMRnh1SUNBZ0lDQWdZMmhoYVc1SlpEb2dRMGhCU1U1ZlNVUlRMa2RQUlZKTVNTeGNiaUFnSUNBZ0lIUnBZMnRsY2pvZ1ZFVlRWRjlPUlZSWFQxSkxYMVJKUTB0RlVsOU5RVkJiVGtWVVYwOVNTMTlVV1ZCRlV5NUhUMFZTVEVsZExGeHVJQ0FnSUgwN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUhSNWNHVTZJRTVGVkZkUFVrdGZWRmxRUlZNdVRVRkpUazVGVkN4Y2JpQWdJQ0JqYUdGcGJrbGtPaUJEU0VGSlRsOUpSRk11VFVGSlRrNUZWQ3hjYmlBZ0lDQjBhV05yWlhJNklDZEZWRWduTEZ4dUlDQjlPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFSjFhV3hrY3lCMGFHVWdaR1ZtWVhWc2RDQnVaWFIzYjNKcklFbEVJSE4wWVhSbElIVnpaV1FnZEc4Z2FXNXBkR2xoYkdsNlpTQjBhR1VnYm1WMGQyOXlhMXh1SUNvZ1kyOXVkSEp2Ykd4bGNpNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1luVnBiR1JFWldaaGRXeDBUbVYwZDI5eWEwbGtVM1JoZEdVb0tUb2dUbVYwZDI5eWEwbGtVM1JoZEdVZ2UxeHVJQ0J5WlhSMWNtNGdiblZzYkR0Y2JuMWNibHh1THlvcVhHNGdLaUJDZFdsc1pITWdkR2hsSUdSbFptRjFiSFFnYm1WMGQyOXlheUJ6ZEdGMGRYTWdjM1JoZEdVZ2RYTmxaQ0IwYnlCcGJtbDBhV0ZzYVhwbElIUm9aU0J1WlhSM2IzSnJYRzRnS2lCamIyNTBjbTlzYkdWeUxseHVJQ292WEc1bWRXNWpkR2x2YmlCaWRXbHNaRVJsWm1GMWJIUk9aWFIzYjNKclUzUmhkSFZ6VTNSaGRHVW9LVG9nVG1WMGQyOXlhMU4wWVhSMWN5QjdYRzRnSUhKbGRIVnliaUJPWlhSM2IzSnJVM1JoZEhWekxsVnVhMjV2ZDI0N1hHNTlYRzVjYmk4cUtseHVJQ29nUW5WcGJHUnpJSFJvWlNCa1pXWmhkV3gwSUc1bGRIZHZjbXNnWkdWMFlXbHNjeUJ6ZEdGMFpTQjFjMlZrSUhSdklHbHVhWFJwWVd4cGVtVWdkR2hsWEc0Z0tpQnVaWFIzYjNKcklHTnZiblJ5YjJ4c1pYSXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHSjFhV3hrUkdWbVlYVnNkRTVsZEhkdmNtdEVaWFJoYVd4elUzUmhkR1VvS1RvZ1RtVjBkMjl5YTBSbGRHRnBiSE1nZTF4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUVWSlVGTTZJSHRjYmlBZ0lDQWdJREUxTlRrNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNCOUxGeHVJQ0I5TzF4dWZWeHVYRzR2S2lwY2JpQXFJRUoxYVd4a2N5QjBhR1VnWkdWbVlYVnNkQ0J1WlhSM2IzSnJJR052Ym1acFozVnlZWFJwYjI1eklITjBZWFJsSUhWelpXUWdkRzhnYVc1cGRHbGhiR2w2WlNCMGFHVmNiaUFxSUc1bGRIZHZjbXNnWTI5dWRISnZiR3hsY2k1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWW5WcGJHUkVaV1poZFd4MFRtVjBkMjl5YTBOdmJtWnBaM1Z5WVhScGIyNXpVM1JoZEdVb0tUb2dUbVYwZDI5eWEwTnZibVpwWjNWeVlYUnBiMjV6SUh0Y2JpQWdjbVYwZFhKdUlIdDlPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFSjFhV3hrY3lCMGFHVWdaR1ZtWVhWc2RDQnpkR0YwWlNCbWIzSWdkR2hsSUc1bGRIZHZjbXNnWTI5dWRISnZiR3hsY2k1Y2JpQXFYRzRnS2lCQWNtVjBkWEp1Y3lCVWFHVWdaR1ZtWVhWc2RDQnVaWFIzYjNKcklHTnZiblJ5YjJ4c1pYSWdjM1JoZEdVdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdKMWFXeGtSR1ZtWVhWc2RGTjBZWFJsS0NrZ2UxeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lIQnliM1pwWkdWeVEyOXVabWxuT2lCaWRXbHNaRVJsWm1GMWJIUlFjbTkyYVdSbGNrTnZibVpwWjFOMFlYUmxLQ2tzWEc0Z0lDQWdibVYwZDI5eWEwbGtPaUJpZFdsc1pFUmxabUYxYkhST1pYUjNiM0pyU1dSVGRHRjBaU2dwTEZ4dUlDQWdJRzVsZEhkdmNtdFRkR0YwZFhNNklHSjFhV3hrUkdWbVlYVnNkRTVsZEhkdmNtdFRkR0YwZFhOVGRHRjBaU2dwTEZ4dUlDQWdJRzVsZEhkdmNtdEVaWFJoYVd4ek9pQmlkV2xzWkVSbFptRjFiSFJPWlhSM2IzSnJSR1YwWVdsc2MxTjBZWFJsS0Nrc1hHNGdJQ0FnYm1WMGQyOXlhME52Ym1acFozVnlZWFJwYjI1ek9pQmlkV2xzWkVSbFptRjFiSFJPWlhSM2IzSnJRMjl1Wm1sbmRYSmhkR2x2Ym5OVGRHRjBaU2dwTEZ4dUlDQjlPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGSmxkSFZ5Ym5NZ2QyaGxkR2hsY2lCMGFHVWdaMmwyWlc0Z1lYSm5kVzFsYm5RZ2FYTWdZU0IwZVhCbElIUm9ZWFFnYjNWeUlFbHVablZ5WVNCdGFXUmtiR1YzWVhKbFhHNGdLaUJ5WldOdloyNXBlbVZ6TGlCWFpTQmpZVzRuZENCallXeGpkV3hoZEdVZ2RHaHBjeUJwYm14cGJtVWdZbVZqWVhWelpTQjBhR1VnZFhOMVlXd2dkSGx3WlNCdlppQmdkSGx3WldBc1hHNGdLaUIzYUdsamFDQjNaU0JuWlhRZ1puSnZiU0IwYUdVZ2NISnZkbWxrWlhJZ1kyOXVabWxuTENCcGN5QnViM1FnWVNCemRXSnpaWFFnYjJZZ2RHaGxJSFI1Y0dVZ2IyWmNiaUFxSUdCSlRrWlZVa0ZmVUZKUFZrbEVSVkpmVkZsUVJWTmdMQ0JpZFhRZ2NtRjBhR1Z5SUdFZ2MzVndaWEp6WlhRc0lHRnVaQ0IwYUdWeVpXWnZjbVVnZDJVZ1kyRnVibTkwSUcxaGEyVmNiaUFxSUdFZ2NISnZjR1Z5SUdOdmJYQmhjbWx6YjI0Z2QybDBhRzkxZENCVWVYQmxVMk55YVhCMElHTnZiWEJzWVdsdWFXNW5MaUJJYjNkbGRtVnlMQ0JwWmlCM1pTQmtiM2R1WTJGemRGeHVJQ29nWW05MGFDQjJZWEpwWVdKc1pYTXNJSFJvWlc0Z2QyVWdZWEpsSUdGaWJHVWdkRzhnWVdOb2FXVjJaU0IwYUdsekxpQkJjeUJoSUdKdmJuVnpMQ0IwYUdseklHWjFibU4wYVc5dVhHNGdLaUJoYkhOdklIUjVjR1Z6SUhSb1pTQm5hWFpsYmlCaGNtZDFiV1Z1ZENCaGN5QmhJR0JDZFdsc2RFbHVTVzVtZFhKaFRtVjBkMjl5YTJBZ1lYTnpkVzFwYm1jZ2RHaGhkQ0IwYUdWY2JpQXFJR05vWldOcklITjFZMk5sWldSekxseHVJQ3BjYmlBcUlFQndZWEpoYlNCMGVYQmxJQzBnUVNCMGVYQmxJSFJ2SUdOdmJYQmhjbVV1WEc0Z0tpQkFjbVYwZFhKdWN5QlVjblZsSUc5eUlHWmhiSE5sTENCa1pYQmxibVJwYm1jZ2IyNGdkMmhsZEdobGNpQjBhR1VnWjJsMlpXNGdkSGx3WlNCcGN5QnZibVVnZEdoaGRDQnZkWEpjYmlBcUlFbHVablZ5WVNCdGFXUmtiR1YzWVhKbElISmxZMjluYm1sNlpYTXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHbHpTVzVtZFhKaFVISnZkbWxrWlhKVWVYQmxLSFI1Y0dVNklITjBjbWx1WnlrNklIUjVjR1VnYVhNZ1FuVnBiSFJKYmtsdVpuVnlZVTVsZEhkdmNtc2dlMXh1SUNCamIyNXpkQ0JwYm1aMWNtRlFjbTkyYVdSbGNsUjVjR1Z6T2lCeVpXRmtiMjVzZVNCemRISnBibWRiWFNBOUlFbE9SbFZTUVY5UVVrOVdTVVJGVWw5VVdWQkZVenRjYmlBZ2NtVjBkWEp1SUdsdVpuVnlZVkJ5YjNacFpHVnlWSGx3WlhNdWFXNWpiSFZrWlhNb2RIbHdaU2s3WEc1OVhHNWNiaThxS2x4dUlDb2dWR2hsSUc1bGRIZHZjbXNnWTI5dWRISnZiR3hsY2lCamNtVmhkR1Z6SUdGdVpDQnRZVzVoWjJWeklIUm9aU0JjSW5CeWIzWnBaR1Z5WENJZ2IySnFaV04wSUhkb2FXTm9JR0ZzYkc5M2MxeHVJQ29nYjNWeUlHTnZaR1VnWVc1a0lHVjRkR1Z5Ym1Gc0lHUmhjSEJ6SUhSdklHMWhhMlVnY21WeGRXVnpkSE1nZEc4Z1lTQnVaWFIzYjNKckxpQlVhR1VnY21WeGRXVnpkSE1nWVhKbFhHNGdLaUJtYVd4MFpYSmxaQ0IwYUhKdmRXZG9JR0VnYzJWMElHOW1JRzFwWkdSc1pYZGhjbVVnS0hCeWIzWnBaR1ZrSUdKNVhHNGdLaUJiWUdWMGFDMXFjMjl1TFhKd1l5MXRhV1JrYkdWM1lYSmxZRjFiTVYwcElIZG9hV05vSUc1dmRDQnZibXg1SUhCbGNtWnZjbTF6SUhSb1pTQklWRlJRSUhKbGNYVmxjM1FnZEc5Y2JpQXFJSFJvWlNCaGNIQnliM0J5YVdGMFpTQlNVRU1nWlc1a2NHOXBiblFnWW5WMElHRnNjMjhnZFhObGN5QmpZV05vYVc1bklIUnZJR3hwYldsMElHUjFjR3hwWTJGMFpWeHVJQ29nY21WeGRXVnpkSE1nZEc4Z1NXNW1kWEpoSUdGdVpDQnpiVzl2ZEdobGJuTWdhVzUwWlhKaFkzUnBiMjV6SUhkcGRHZ2dkR2hsSUdKc2IyTnJZMmhoYVc0Z2FXNGdaMlZ1WlhKaGJDNWNiaUFxWEc0Z0tpQmJNVjA2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5TlpYUmhUV0Z6YXk5bGRHZ3Rhbk52YmkxeWNHTXRiV2xrWkd4bGQyRnlaVnh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVG1WMGQyOXlhME52Ym5SeWIyeHNaWElnWlhoMFpXNWtjeUJGZG1WdWRFVnRhWFIwWlhJZ2UxeHVJQ0F2S2lwY2JpQWdJQ29nVkdobElHMWxjM05sYm1kbGNpQjBhR0YwSUU1bGRIZHZjbXREYjI1MGNtOXNiR1Z5SUhWelpYTWdkRzhnY0hWaWJHbHphQ0JsZG1WdWRITXVYRzRnSUNBcUwxeHVJQ0FqYldWemMyVnVaMlZ5T2lCT1pYUjNiM0pyUTI5dWRISnZiR3hsY2sxbGMzTmxibWRsY2p0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVDJKelpYSjJZV0pzWlNCemRHOXlaU0JqYjI1MFlXbHVhVzVuSUhSb1pTQndjbTkyYVdSbGNpQmpiMjVtYVdkMWNtRjBhVzl1SUdadmNpQjBhR1VnY0hKbGRtbHZkWE5zZVZ4dUlDQWdLaUJqYjI1bWFXZDFjbVZrSUc1bGRIZHZjbXN1WEc0Z0lDQXFMMXh1SUNBamNISmxkbWx2ZFhOUWNtOTJhV1JsY2tOdmJtWnBaem9nVUhKdmRtbGtaWEpEYjI1bWFXZDFjbUYwYVc5dU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCUFluTmxjblpoWW14bElITjBiM0psSUdOdmJuUmhhVzVwYm1jZ1lTQmpiMjFpYVc1aGRHbHZiaUJ2WmlCa1lYUmhJR1p5YjIwZ1lXeHNJRzltSUhSb1pWeHVJQ0FnS2lCcGJtUnBkbWxrZFdGc0lITjBiM0psY3k1Y2JpQWdJQ292WEc0Z0lITjBiM0psT2lCUFluTmxjblpoWW14bFUzUnZjbVU4VG1WMGQyOXlhME52Ym5SeWIyeHNaWEpUZEdGMFpUNDdYRzVjYmlBZ0kzQnliM1pwWkdWeU9pQlRZV1psUlhabGJuUkZiV2wwZEdWeVVISnZkbWxrWlhJZ2ZDQnVkV3hzTzF4dVhHNGdJQ05pYkc5amExUnlZV05yWlhJNklGQnZiR3hwYm1kQ2JHOWphMVJ5WVdOclpYSWdmQ0J1ZFd4c08xeHVYRzRnSUNOd2NtOTJhV1JsY2xCeWIzaDVPaUJUZDJGd2NHRmliR1ZRY205NGVUeFRZV1psUlhabGJuUkZiV2wwZEdWeVVISnZkbWxrWlhJK0lId2diblZzYkR0Y2JseHVJQ0FqWW14dlkydFVjbUZqYTJWeVVISnZlSGs2SUZOM1lYQndZV0pzWlZCeWIzaDVQRkJ2Ykd4cGJtZENiRzlqYTFSeVlXTnJaWEkrSUh3Z2JuVnNiRHRjYmx4dUlDQWphVzVtZFhKaFVISnZhbVZqZEVsa09pQk9aWFIzYjNKclEyOXVkSEp2Ykd4bGNrOXdkR2x2Ym5OYkoybHVablZ5WVZCeWIycGxZM1JKWkNkZE8xeHVYRzRnSUNOMGNtRmphMDFsZEdGTlpYUnlhV056UlhabGJuUTZJRTVsZEhkdmNtdERiMjUwY205c2JHVnlUM0IwYVc5dWMxc25kSEpoWTJ0TlpYUmhUV1YwY21samMwVjJaVzUwSjEwN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOdmJuTjBjblZqZEhNZ1lTQnVaWFIzYjNKcklHTnZiblJ5YjJ4c1pYSXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0J2Y0hScGIyNXpJQzBnVDNCMGFXOXVjeUJtYjNJZ2RHaHBjeUJqYjI1emRISjFZM1J2Y2k1Y2JpQWdJQ29nUUhCaGNtRnRJRzl3ZEdsdmJuTXViV1Z6YzJWdVoyVnlJQzBnVkdobElFNWxkSGR2Y210RGIyNTBjbTlzYkdWeUlHMWxjM05sYm1kbGNpNWNiaUFnSUNvZ1FIQmhjbUZ0SUc5d2RHbHZibk11YzNSaGRHVWdMU0JKYm1sMGFXRnNJR052Ym5SeWIyeHNaWElnYzNSaGRHVXVYRzRnSUNBcUlFQndZWEpoYlNCdmNIUnBiMjV6TG1sdVpuVnlZVkJ5YjJwbFkzUkpaQ0F0SUZSb1pTQkpibVoxY21FZ2NISnZhbVZqZENCSlJDNWNiaUFnSUNvZ1FIQmhjbUZ0SUc5d2RHbHZibk11ZEhKaFkydE5aWFJoVFdWMGNtbGpjMFYyWlc1MElDMGdRU0J0WlhSb2IyUWdkRzhnWm05eWQyRnlaQ0JsZG1WdWRITWdkRzhnZEdobFhHNGdJQ0FxSUh0QWJHbHVheUJOWlhSaFRXVjBjbWxqYzBOdmJuUnliMnhzWlhKOUxseHVJQ0FnS2k5Y2JpQWdZMjl1YzNSeWRXTjBiM0lvZTF4dUlDQWdJRzFsYzNObGJtZGxjaXhjYmlBZ0lDQnpkR0YwWlNBOUlIdDlMRnh1SUNBZ0lHbHVablZ5WVZCeWIycGxZM1JKWkN4Y2JpQWdJQ0IwY21GamEwMWxkR0ZOWlhSeWFXTnpSWFpsYm5Rc1hHNGdJSDA2SUU1bGRIZHZjbXREYjI1MGNtOXNiR1Z5VDNCMGFXOXVjeWtnZTF4dUlDQWdJSE4xY0dWeUtDazdYRzVjYmlBZ0lDQjBhR2x6TGlOdFpYTnpaVzVuWlhJZ1BTQnRaWE56Wlc1blpYSTdYRzVjYmlBZ0lDQjBhR2x6TG5OMGIzSmxJRDBnYm1WM0lFOWljMlZ5ZG1GaWJHVlRkRzl5WlNoN1hHNGdJQ0FnSUNBdUxpNWlkV2xzWkVSbFptRjFiSFJUZEdGMFpTZ3BMRnh1SUNBZ0lDQWdMaTR1YzNSaGRHVXNYRzRnSUNBZ2ZTazdYRzRnSUNBZ2RHaHBjeTRqY0hKbGRtbHZkWE5RY205MmFXUmxja052Ym1acFp5QTlJSFJvYVhNdWMzUnZjbVV1WjJWMFUzUmhkR1VvS1M1d2NtOTJhV1JsY2tOdmJtWnBaenRjYmx4dUlDQWdJQzh2SUhCeWIzWnBaR1Z5SUdGdVpDQmliRzlqYXlCMGNtRmphMlZ5WEc0Z0lDQWdkR2hwY3k0amNISnZkbWxrWlhJZ1BTQnVkV3hzTzF4dUlDQWdJSFJvYVhNdUkySnNiMk5yVkhKaFkydGxjaUE5SUc1MWJHdzdYRzVjYmlBZ0lDQXZMeUJ3Y205MmFXUmxjaUJoYm1RZ1lteHZZMnNnZEhKaFkydGxjaUJ3Y205NGFXVnpJQzBnWW1WallYVnpaU0IwYUdVZ2JtVjBkMjl5YXlCamFHRnVaMlZ6WEc0Z0lDQWdkR2hwY3k0amNISnZkbWxrWlhKUWNtOTRlU0E5SUc1MWJHdzdYRzRnSUNBZ2RHaHBjeTRqWW14dlkydFVjbUZqYTJWeVVISnZlSGtnUFNCdWRXeHNPMXh1WEc0Z0lDQWdhV1lnS0NGcGJtWjFjbUZRY205cVpXTjBTV1FnZkh3Z2RIbHdaVzltSUdsdVpuVnlZVkJ5YjJwbFkzUkpaQ0FoUFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblNXNTJZV3hwWkNCSmJtWjFjbUVnY0hKdmFtVmpkQ0JKUkNjcE8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxpTnBibVoxY21GUWNtOXFaV04wU1dRZ1BTQnBibVoxY21GUWNtOXFaV04wU1dRN1hHNGdJQ0FnZEdocGN5NGpkSEpoWTJ0TlpYUmhUV1YwY21samMwVjJaVzUwSUQwZ2RISmhZMnROWlhSaFRXVjBjbWxqYzBWMlpXNTBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVSbFlXTjBhWFpoZEdWeklIUm9aU0JqYjI1MGNtOXNiR1Z5TENCemRHOXdjR2x1WnlCaGJua2diMjVuYjJsdVp5QndiMnhzYVc1bkxseHVJQ0FnS2x4dUlDQWdLaUJKYmkxd2NtOW5jbVZ6Y3lCeVpYRjFaWE4wY3lCM2FXeHNJRzV2ZENCaVpTQmhZbTl5ZEdWa0xseHVJQ0FnS2k5Y2JpQWdZWE41Ym1NZ1pHVnpkSEp2ZVNncE9pQlFjbTl0YVhObFBIWnZhV1ErSUh0Y2JpQWdJQ0JoZDJGcGRDQjBhR2x6TGlOaWJHOWphMVJ5WVdOclpYSS9MbVJsYzNSeWIza29LVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGNtVmhkR1Z6SUhSb1pTQndjbTkyYVdSbGNpQmhibVFnWW14dlkyc2dkSEpoWTJ0bGNpQm1iM0lnZEdobElHTnZibVpwWjNWeVpXUWdibVYwZDI5eWF5eGNiaUFnSUNvZ2RYTnBibWNnZEdobElIQnliM1pwWkdWeUlIUnZJR2RoZEdobGNpQmtaWFJoYVd4eklHRmliM1YwSUhSb1pTQnVaWFIzYjNKckxseHVJQ0FnS2k5Y2JpQWdZWE41Ym1NZ2FXNXBkR2xoYkdsNlpWQnliM1pwWkdWeUtDazZJRkJ5YjIxcGMyVThkbTlwWkQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnZEhsd1pTd2djbkJqVlhKc0xDQmphR0ZwYmtsa0lIMGdQU0IwYUdsekxuTjBiM0psTG1kbGRGTjBZWFJsS0NrdWNISnZkbWxrWlhKRGIyNW1hV2M3WEc0Z0lDQWdkR2hwY3k0alkyOXVabWxuZFhKbFVISnZkbWxrWlhJb2V5QjBlWEJsTENCeWNHTlZjbXdzSUdOb1lXbHVTV1FnZlNrN1hHNGdJQ0FnWVhkaGFYUWdkR2hwY3k1c2IyOXJkWEJPWlhSM2IzSnJLQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCMGFHVWdjSEp2ZUdsbGN5QjNjbUZ3Y0dsdVp5QjBhR1VnWTNWeWNtVnVkR3g1SUhObGRDQndjbTkyYVdSbGNpQmhibVFnWW14dlkyc2dkSEpoWTJ0bGNpNWNiaUFnSUNvdlhHNGdJR2RsZEZCeWIzWnBaR1Z5UVc1a1FteHZZMnRVY21GamEyVnlLQ2s2SUh0Y2JpQWdJQ0J3Y205MmFXUmxjam9nVTNkaGNIQmhZbXhsVUhKdmVIazhVMkZtWlVWMlpXNTBSVzFwZEhSbGNsQnliM1pwWkdWeVBpQjhJRzUxYkd3N1hHNGdJQ0FnWW14dlkydFVjbUZqYTJWeU9pQlRkMkZ3Y0dGaWJHVlFjbTk0ZVR4UWIyeHNhVzVuUW14dlkydFVjbUZqYTJWeVBpQjhJRzUxYkd3N1hHNGdJSDBnZTF4dUlDQWdJR052Ym5OMElIQnliM1pwWkdWeUlEMGdkR2hwY3k0amNISnZkbWxrWlhKUWNtOTRlVHRjYmlBZ0lDQmpiMjV6ZENCaWJHOWphMVJ5WVdOclpYSWdQU0IwYUdsekxpTmliRzlqYTFSeVlXTnJaWEpRY205NGVUdGNiaUFnSUNCeVpYUjFjbTRnZXlCd2NtOTJhV1JsY2l3Z1lteHZZMnRVY21GamEyVnlJSDA3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1JHVjBaWEp0YVc1bGN5QjNhR1YwYUdWeUlIUm9aU0J1WlhSM2IzSnJJSE4xY0hCdmNuUnpJRVZKVUMweE5UVTVJR0o1SUdOb1pXTnJhVzVuSUhkb1pYUm9aWElnZEdobFhHNGdJQ0FxSUd4aGRHVnpkQ0JpYkc5amF5Qm9ZWE1nWVNCZ1ltRnpaVVpsWlZCbGNrZGhjMkFnY0hKdmNHVnlkSGtzSUhSb1pXNGdkWEJrWVhSbGN5QnpkR0YwWlZ4dUlDQWdLaUJoY0hCeWIzQnlhV0YwWld4NUxseHVJQ0FnS2x4dUlDQWdLaUJBY21WMGRYSnVjeUJCSUhCeWIyMXBjMlVnZEdoaGRDQnlaWE52YkhabGN5QjBieUIwY25WbElHbG1JSFJvWlNCdVpYUjNiM0pySUhOMWNIQnZjblJ6SUVWSlVDMHhOVFU1WEc0Z0lDQXFJR0Z1WkNCbVlXeHpaU0J2ZEdobGNuZHBjMlV1WEc0Z0lDQXFMMXh1SUNCaGMzbHVZeUJuWlhSRlNWQXhOVFU1UTI5dGNHRjBhV0pwYkdsMGVTZ3BPaUJRY205dGFYTmxQR0p2YjJ4bFlXNCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lFVkpVRk1nZlNBOUlIUm9hWE11YzNSdmNtVXVaMlYwVTNSaGRHVW9LUzV1WlhSM2IzSnJSR1YwWVdsc2N6dGNiaUFnSUNBdkx5Qk9UMVJGT2lCVWFHbHpJR2x6YmlkMElHNWxZMlZ6YzJGeWVTQmhibmx0YjNKbElHSmxZMkYxYzJVZ2RHaGxJR0pzYjJOcklHTmhZMmhsSUcxcFpHUnNaWGRoY21WY2JpQWdJQ0F2THlCaGJISmxZV1I1SUhCeVpYWmxiblJ6SUdSMWNHeHBZMkYwWlNCeVpYRjFaWE4wY3lCbWNtOXRJSFJoYTJsdVp5QndiR0ZqWlZ4dUlDQWdJR2xtSUNoRlNWQlRXekUxTlRsZElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJGU1ZCVFd6RTFOVGxkTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElIc2djSEp2ZG1sa1pYSWdmU0E5SUhSb2FYTXVaMlYwVUhKdmRtbGtaWEpCYm1SQ2JHOWphMVJ5WVdOclpYSW9LVHRjYmlBZ0lDQnBaaUFvSVhCeWIzWnBaR1Z5S1NCN1hHNGdJQ0FnSUNBdkx5QlNaV0ZzYkhrZ2QyVWdjMmh2ZFd4a0lIUm9jbTkzSUdGdUlHVnljbTl5SUdsbUlHRWdjSEp2ZG1sa1pYSWdhR0Z6YmlkMElHSmxaVzRnYVc1cGRHbGhiR2w2WldSY2JpQWdJQ0FnSUM4dklIbGxkQ3dnWW5WMElIUm9ZWFFnYldsbmFIUWdhR0YyWlNCMWJtUmxjMmx5WVdKc1pTQnlaWEJsY21OMWMzTnBiMjV6TENCemJ5QnlaWFIxY200Z1ptRnNjMlVnWm05eVhHNGdJQ0FnSUNBdkx5QnViM2RjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQnpkWEJ3YjNKMGMwVkpVREUxTlRrZ1BTQmhkMkZwZENCMGFHbHpMaU5rWlhSbGNtMXBibVZGU1ZBeE5UVTVRMjl0Y0dGMGFXSnBiR2wwZVNod2NtOTJhV1JsY2lrN1hHNGdJQ0FnWTI5dWMzUWdleUJ1WlhSM2IzSnJSR1YwWVdsc2N5QjlJRDBnZEdocGN5NXpkRzl5WlM1blpYUlRkR0YwWlNncE8xeHVJQ0FnSUhSb2FYTXVjM1J2Y21VdWRYQmtZWFJsVTNSaGRHVW9lMXh1SUNBZ0lDQWdibVYwZDI5eWEwUmxkR0ZwYkhNNklIdGNiaUFnSUNBZ0lDQWdMaTR1Ym1WMGQyOXlhMFJsZEdGcGJITXNYRzRnSUNBZ0lDQWdJRVZKVUZNNklIdGNiaUFnSUNBZ0lDQWdJQ0F1TGk1dVpYUjNiM0pyUkdWMFlXbHNjeTVGU1ZCVExGeHVJQ0FnSUNBZ0lDQWdJREUxTlRrNklITjFjSEJ2Y25SelJVbFFNVFUxT1N4Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ2ZTazdYRzRnSUNBZ2NtVjBkWEp1SUhOMWNIQnZjblJ6UlVsUU1UVTFPVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCUVpYSm1iM0p0Y3lCemFXUmxJR1ZtWm1WamRITWdZV1owWlhJZ2MzZHBkR05vYVc1bklIUnZJR0VnYm1WMGQyOXlheTRnU1dZZ2RHaGxJRzVsZEhkdmNtc2dhWE5jYmlBZ0lDb2dZWFpoYVd4aFlteGxMQ0IxY0dSaGRHVnpJSFJvWlNCdVpYUjNiM0pySUhOMFlYUmxJSGRwZEdnZ2RHaGxJRzVsZEhkdmNtc2dTVVFnYjJZZ2RHaGxJRzVsZEhkdmNtc2dZVzVrWEc0Z0lDQXFJSE4wYjNKbGN5QjNhR1YwYUdWeUlIUm9aU0J1WlhSM2IzSnJJSE4xY0hCdmNuUnpJRVZKVUMweE5UVTVPeUJ2ZEdobGNuZHBjMlVnWTJ4bFlYSnpJSE5oYVdSY2JpQWdJQ29nYVc1bWIzSnRZWFJwYjI0Z1lXSnZkWFFnZEdobElHNWxkSGR2Y21zZ2RHaGhkQ0J0WVhrZ2FHRjJaU0JpWldWdUlIQnlaWFpwYjNWemJIa2djM1J2Y21Wa0xseHVJQ0FnS2x4dUlDQWdLaUJBWm1seVpYTWdhVzVtZFhKaFNYTkNiRzlqYTJWa0lHbG1JSFJvWlNCdVpYUjNiM0pySUdseklFbHVablZ5WVMxemRYQndiM0owWldRZ1lXNWtJR2x6SUdKc2IyTnJhVzVuWEc0Z0lDQXFJSEpsY1hWbGMzUnpMbHh1SUNBZ0tpQkFabWx5WlhNZ2FXNW1kWEpoU1hOVmJtSnNiMk5yWldRZ2FXWWdkR2hsSUc1bGRIZHZjbXNnYVhNZ1NXNW1kWEpoTFhOMWNIQnZjblJsWkNCaGJtUWdhWE1nYm05MFhHNGdJQ0FxSUdKc2IyTnJhVzVuSUhKbGNYVmxjM1J6TENCdmNpQnBaaUIwYUdVZ2JtVjBkMjl5YXlCcGN5QnViM1FnU1c1bWRYSmhMWE4xY0hCdmNuUmxaQzVjYmlBZ0lDb3ZYRzRnSUdGemVXNWpJR3h2YjJ0MWNFNWxkSGR2Y21zb0tUb2dVSEp2YldselpUeDJiMmxrUGlCN1hHNGdJQ0FnWTI5dWMzUWdleUJqYUdGcGJrbGtMQ0IwZVhCbElIMGdQU0IwYUdsekxuTjBiM0psTG1kbGRGTjBZWFJsS0NrdWNISnZkbWxrWlhKRGIyNW1hV2M3WEc0Z0lDQWdZMjl1YzNRZ2V5QndjbTkyYVdSbGNpQjlJRDBnZEdocGN5NW5aWFJRY205MmFXUmxja0Z1WkVKc2IyTnJWSEpoWTJ0bGNpZ3BPMXh1SUNBZ0lHeGxkQ0J1WlhSM2IzSnJRMmhoYm1kbFpDQTlJR1poYkhObE8xeHVJQ0FnSUd4bGRDQnVaWFIzYjNKclNXUTZJRTVsZEhkdmNtdEpaRk4wWVhSbElEMGdiblZzYkR0Y2JpQWdJQ0JzWlhRZ2MzVndjRzl5ZEhORlNWQXhOVFU1SUQwZ1ptRnNjMlU3WEc0Z0lDQWdiR1YwSUc1bGRIZHZjbXRUZEdGMGRYTTZJRTVsZEhkdmNtdFRkR0YwZFhNN1hHNWNiaUFnSUNCcFppQW9jSEp2ZG1sa1pYSWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR3h2Wnk1M1lYSnVLRnh1SUNBZ0lDQWdJQ0FuVG1WMGQyOXlhME52Ym5SeWIyeHNaWElnTFNCc2IyOXJkWEJPWlhSM2IzSnJJR0ZpYjNKMFpXUWdaSFZsSUhSdklHMXBjM05wYm1jZ2NISnZkbWxrWlhJbkxGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb0lXTm9ZV2x1U1dRcElIdGNiaUFnSUNBZ0lHeHZaeTUzWVhKdUtGeHVJQ0FnSUNBZ0lDQW5UbVYwZDI5eWEwTnZiblJ5YjJ4c1pYSWdMU0JzYjI5cmRYQk9aWFIzYjNKcklHRmliM0owWldRZ1pIVmxJSFJ2SUcxcGMzTnBibWNnWTJoaGFXNUpaQ2NzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJQ0FnZEdocGN5NGpjbVZ6WlhST1pYUjNiM0pyU1dRb0tUdGNiaUFnSUNBZ0lIUm9hWE11STNKbGMyVjBUbVYwZDI5eWExTjBZWFIxY3lncE8xeHVJQ0FnSUNBZ2RHaHBjeTRqY21WelpYUk9aWFIzYjNKclJHVjBZV2xzY3lncE8xeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElHbHpTVzVtZFhKaElEMGdhWE5KYm1aMWNtRlFjbTkyYVdSbGNsUjVjR1VvZEhsd1pTazdYRzVjYmlBZ0lDQmpiMjV6ZENCc2FYTjBaVzVsY2lBOUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUc1bGRIZHZjbXREYUdGdVoyVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lIUm9hWE11STIxbGMzTmxibWRsY2k1MWJuTjFZbk5qY21saVpTaGNiaUFnSUNBZ0lDQWdUbVYwZDI5eWEwTnZiblJ5YjJ4c1pYSkZkbVZ1ZEZSNWNHVXVUbVYwZDI5eWEwUnBaRU5vWVc1blpTeGNiaUFnSUNBZ0lDQWdiR2x6ZEdWdVpYSXNYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2RHaHBjeTRqYldWemMyVnVaMlZ5TG5OMVluTmpjbWxpWlNoY2JpQWdJQ0FnSUU1bGRIZHZjbXREYjI1MGNtOXNiR1Z5UlhabGJuUlVlWEJsTGs1bGRIZHZjbXRFYVdSRGFHRnVaMlVzWEc0Z0lDQWdJQ0JzYVhOMFpXNWxjaXhjYmlBZ0lDQXBPMXh1WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSEpsYzNWc2RITWdQU0JoZDJGcGRDQlFjbTl0YVhObExtRnNiQ2hiWEc0Z0lDQWdJQ0FnSUhSb2FYTXVJMmRsZEU1bGRIZHZjbXRKWkNod2NtOTJhV1JsY2lrc1hHNGdJQ0FnSUNBZ0lIUm9hWE11STJSbGRHVnliV2x1WlVWSlVERTFOVGxEYjIxd1lYUnBZbWxzYVhSNUtIQnliM1pwWkdWeUtTeGNiaUFnSUNBZ0lGMHBPMXh1SUNBZ0lDQWdZMjl1YzNRZ2NHOXpjMmxpYkdWT1pYUjNiM0pyU1dRZ1BTQnlaWE4xYkhSeld6QmRPMXh1SUNBZ0lDQWdibVYwZDI5eWEwbGtJRDBnWTI5dWRtVnlkRTVsZEhkdmNtdEpaQ2h3YjNOemFXSnNaVTVsZEhkdmNtdEpaQ2s3WEc0Z0lDQWdJQ0J6ZFhCd2IzSjBjMFZKVURFMU5Ua2dQU0J5WlhOMWJIUnpXekZkTzF4dUlDQWdJQ0FnYm1WMGQyOXlhMU4wWVhSMWN5QTlJRTVsZEhkdmNtdFRkR0YwZFhNdVFYWmhhV3hoWW14bE8xeHVJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNtOXlLU0I3WEc0Z0lDQWdJQ0JwWmlBb2FYTkZjbkp2Y2xkcGRHaERiMlJsS0dWeWNtOXlLU2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdjbVZ6Y0c5dWMyVkNiMlI1TzF4dUlDQWdJQ0FnSUNCcFppQW9hWE5KYm1aMWNtRWdKaVlnYVhORmNuSnZjbGRwZEdoTlpYTnpZV2RsS0dWeWNtOXlLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE53YjI1elpVSnZaSGtnUFNCS1UwOU9MbkJoY25ObEtHVnljbTl5TG0xbGMzTmhaMlVwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1pYSnliM0l1YldWemMyRm5aU0J0ZFhOMElHNXZkQ0JpWlNCS1UwOU9YRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lHbHpVR3hoYVc1UFltcGxZM1FvY21WemNHOXVjMlZDYjJSNUtTQW1KbHh1SUNBZ0lDQWdJQ0FnSUhKbGMzQnZibk5sUW05a2VTNWxjbkp2Y2lBOVBUMGdTVTVHVlZKQlgwSk1UME5MUlVSZlMwVlpYRzRnSUNBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHNWxkSGR2Y210VGRHRjBkWE1nUFNCT1pYUjNiM0pyVTNSaGRIVnpMa0pzYjJOclpXUTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWlhKeWIzSXVZMjlrWlNBOVBUMGdaWEp5YjNKRGIyUmxjeTV5Y0dNdWFXNTBaWEp1WVd3cElIdGNiaUFnSUNBZ0lDQWdJQ0J1WlhSM2IzSnJVM1JoZEhWeklEMGdUbVYwZDI5eWExTjBZWFIxY3k1VmJtdHViM2R1TzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lHNWxkSGR2Y210VGRHRjBkWE1nUFNCT1pYUjNiM0pyVTNSaGRIVnpMbFZ1WVhaaGFXeGhZbXhsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCc2IyY3VkMkZ5YmloY2JpQWdJQ0FnSUNBZ0lDQW5UbVYwZDI5eWEwTnZiblJ5YjJ4c1pYSWdMU0JqYjNWc1pDQnViM1FnWkdWMFpYSnRhVzVsSUc1bGRIZHZjbXNnYzNSaGRIVnpKeXhjYmlBZ0lDQWdJQ0FnSUNCbGNuSnZjaXhjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2JtVjBkMjl5YTFOMFlYUjFjeUE5SUU1bGRIZHZjbXRUZEdGMGRYTXVWVzVyYm05M2JqdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9ibVYwZDI5eWEwTm9ZVzVuWldRcElIdGNiaUFnSUNBZ0lDOHZJRWxtSUhSb1pTQnVaWFIzYjNKcklHaGhjeUJqYUdGdVoyVmtMQ0IwYUdWdUlHQnNiMjlyZFhCT1pYUjNiM0pyWUNCbGFYUm9aWElnYUdGeklHSmxaVzRnYjNJZ2FYTmNiaUFnSUNBZ0lDOHZJR2x1SUhSb1pTQndjbTlqWlhOeklHOW1JR0psYVc1bklHTmhiR3hsWkN3Z2MyOGdkMlVnWkc5dUozUWdibVZsWkNCMGJ5Qm5ieUJtZFhKMGFHVnlMbHh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxpTnRaWE56Wlc1blpYSXVkVzV6ZFdKelkzSnBZbVVvWEc0Z0lDQWdJQ0JPWlhSM2IzSnJRMjl1ZEhKdmJHeGxja1YyWlc1MFZIbHdaUzVPWlhSM2IzSnJSR2xrUTJoaGJtZGxMRnh1SUNBZ0lDQWdiR2x6ZEdWdVpYSXNYRzRnSUNBZ0tUdGNibHh1SUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZTF4dUlDQWdJQ0FnYm1WMGQyOXlhMU4wWVhSMWN5eGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHbG1JQ2h1WlhSM2IzSnJVM1JoZEhWeklEMDlQU0JPWlhSM2IzSnJVM1JoZEhWekxrRjJZV2xzWVdKc1pTa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2V5QnVaWFIzYjNKclJHVjBZV2xzY3lCOUlEMGdkR2hwY3k1emRHOXlaUzVuWlhSVGRHRjBaU2dwTzF4dUlDQWdJQ0FnZEdocGN5NXpkRzl5WlM1MWNHUmhkR1ZUZEdGMFpTaDdYRzRnSUNBZ0lDQWdJRzVsZEhkdmNtdEpaQ3hjYmlBZ0lDQWdJQ0FnYm1WMGQyOXlhMFJsZEdGcGJITTZJSHRjYmlBZ0lDQWdJQ0FnSUNBdUxpNXVaWFIzYjNKclJHVjBZV2xzY3l4Y2JpQWdJQ0FnSUNBZ0lDQkZTVkJUT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F1TGk1dVpYUjNiM0pyUkdWMFlXbHNjeTVGU1ZCVExGeHVJQ0FnSUNBZ0lDQWdJQ0FnTVRVMU9Ub2djM1Z3Y0c5eWRITkZTVkF4TlRVNUxGeHVJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NGpjbVZ6WlhST1pYUjNiM0pyU1dRb0tUdGNiaUFnSUNBZ0lIUm9hWE11STNKbGMyVjBUbVYwZDI5eWEwUmxkR0ZwYkhNb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9hWE5KYm1aMWNtRXBJSHRjYmlBZ0lDQWdJR2xtSUNodVpYUjNiM0pyVTNSaGRIVnpJRDA5UFNCT1pYUjNiM0pyVTNSaGRIVnpMa0YyWVdsc1lXSnNaU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMaU50WlhOelpXNW5aWEl1Y0hWaWJHbHphQ2hPWlhSM2IzSnJRMjl1ZEhKdmJHeGxja1YyWlc1MFZIbHdaUzVKYm1aMWNtRkpjMVZ1WW14dlkydGxaQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0c1bGRIZHZjbXRUZEdGMGRYTWdQVDA5SUU1bGRIZHZjbXRUZEdGMGRYTXVRbXh2WTJ0bFpDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxpTnRaWE56Wlc1blpYSXVjSFZpYkdsemFDaE9aWFIzYjNKclEyOXVkSEp2Ykd4bGNrVjJaVzUwVkhsd1pTNUpibVoxY21GSmMwSnNiMk5yWldRcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0F2THlCQmJIZGhlWE1nY0hWaWJHbHphQ0JwYm1aMWNtRkpjMVZ1WW14dlkydGxaQ0J5WldkaGNtUnNaWE56SUc5bUlHNWxkSGR2Y21zZ2MzUmhkSFZ6SUhSdlhHNGdJQ0FnSUNBdkx5QndjbVYyWlc1MElHTnZibk4xYldWeWN5Qm1jbTl0SUdKbGFXNW5JSE4wZFdOcklHbHVJR0VnWW14dlkydGxaQ0J6ZEdGMFpTQnBaaUIwYUdWNUlIZGxjbVZjYmlBZ0lDQWdJQzh2SUhCeVpYWnBiM1Z6YkhrZ1kyOXVibVZqZEdWa0lIUnZJR0Z1SUVsdVpuVnlZU0J1WlhSM2IzSnJJSFJvWVhRZ2QyRnpJR0pzYjJOclpXUmNiaUFnSUNBZ0lIUm9hWE11STIxbGMzTmxibWRsY2k1d2RXSnNhWE5vS0U1bGRIZHZjbXREYjI1MGNtOXNiR1Z5UlhabGJuUlVlWEJsTGtsdVpuVnlZVWx6Vlc1aWJHOWphMlZrS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UzZHBkR05vWlhNZ2RHOGdkR2hsSUc1bGRIZHZjbXNnYzNCbFkybG1hV1ZrSUdKNUlHRWdibVYwZDI5eWF5QmpiMjVtYVdkMWNtRjBhVzl1TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2JtVjBkMjl5YTBOdmJtWnBaM1Z5WVhScGIyNUpaQ0F0SUZSb1pTQjFibWx4ZFdVZ2FXUmxiblJwWm1sbGNpQjBhR0YwSUhKbFptVnljeUIwYnlCaFhHNGdJQ0FxSUhCeVpYWnBiM1Z6YkhrZ1lXUmtaV1FnYm1WMGQyOXlheUJqYjI1bWFXZDFjbUYwYVc5dUxseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCVWFHVWdWVkpNSUc5bUlIUm9aU0JTVUVNZ1pXNWtjRzlwYm5RZ2NtVndjbVZ6Wlc1MGFXNW5JSFJvWlNCdVpYZHNlU0J6ZDJsMFkyaGxaRnh1SUNBZ0tpQnVaWFIzYjNKckxseHVJQ0FnS2k5Y2JpQWdZWE41Ym1NZ2MyVjBRV04wYVhabFRtVjBkMjl5YXlodVpYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJrbGtPaUJPWlhSM2IzSnJRMjl1Wm1sbmRYSmhkR2x2Ymtsa0tTQjdYRzRnSUNBZ1kyOXVjM1FnZEdGeVoyVjBUbVYwZDI5eWF5QTlYRzRnSUNBZ0lDQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2t1Ym1WMGQyOXlhME52Ym1acFozVnlZWFJwYjI1elcyNWxkSGR2Y210RGIyNW1hV2QxY21GMGFXOXVTV1JkTzF4dVhHNGdJQ0FnYVdZZ0tDRjBZWEpuWlhST1pYUjNiM0pyS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWEc0Z0lDQWdJQ0FnSUdCdVpYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJrbGtJQ1I3Ym1WMGQyOXlhME52Ym1acFozVnlZWFJwYjI1SlpIMGdaRzlsY3lCdWIzUWdiV0YwWTJnZ1lTQmpiMjVtYVdkMWNtVmtJRzVsZEhkdmNtdERiMjVtYVdkMWNtRjBhVzl1WUN4Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWVhkaGFYUWdkR2hwY3k0amMyVjBVSEp2ZG1sa1pYSkRiMjVtYVdjb2UxeHVJQ0FnSUNBZ2RIbHdaVG9nVGtWVVYwOVNTMTlVV1ZCRlV5NVNVRU1zWEc0Z0lDQWdJQ0F1TGk1MFlYSm5aWFJPWlhSM2IzSnJMRnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlIUmhjbWRsZEU1bGRIZHZjbXN1Y25CalZYSnNPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZOM2FYUmphR1Z6SUhSdklHRnVJRWx1Wm5WeVlTMXpkWEJ3YjNKMFpXUWdibVYwZDI5eWF5NWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSFI1Y0dVZ0xTQlVhR1VnYzJodmNuUnVZVzFsSUc5bUlIUm9aU0J1WlhSM2IzSnJMbHh1SUNBZ0tpQkFkR2h5YjNkeklHbG1JSFJvWlNCZ2RIbHdaV0FnYVhNZ1hDSnljR05jSWlCdmNpQnBaaUJwZENCcGN5QnViM1FnWVNCcmJtOTNiaUJKYm1aMWNtRXRjM1Z3Y0c5eWRHVmtYRzRnSUNBcUlHNWxkSGR2Y21zdVhHNGdJQ0FxTDF4dUlDQmhjM2x1WXlCelpYUlFjbTkyYVdSbGNsUjVjR1VvZEhsd1pUb2djM1J5YVc1bktTQjdYRzRnSUNBZ1lYTnpaWEowTG01dmRGTjBjbWxqZEVWeGRXRnNLRnh1SUNBZ0lDQWdkSGx3WlN4Y2JpQWdJQ0FnSUU1RlZGZFBVa3RmVkZsUVJWTXVVbEJETEZ4dUlDQWdJQ0FnWUU1bGRIZHZjbXREYjI1MGNtOXNiR1Z5SUMwZ1kyRnVibTkwSUdOaGJHd2dYQ0p6WlhSUWNtOTJhV1JsY2xSNWNHVmNJaUIzYVhSb0lIUjVjR1VnWENJa2UwNUZWRmRQVWt0ZlZGbFFSVk11VWxCRGZWd2lMaUJWYzJVZ1hDSnpaWFJCWTNScGRtVk9aWFIzYjNKclhDSmdMRnh1SUNBZ0lDazdYRzRnSUNBZ1lYTnpaWEowTG05cktGeHVJQ0FnSUNBZ2FYTkpibVoxY21GUWNtOTJhV1JsY2xSNWNHVW9kSGx3WlNrc1hHNGdJQ0FnSUNCZ1ZXNXJibTkzYmlCSmJtWjFjbUVnY0hKdmRtbGtaWElnZEhsd1pTQmNJaVI3ZEhsd1pYMWNJaTVnTEZ4dUlDQWdJQ2s3WEc0Z0lDQWdZMjl1YzNRZ2JtVjBkMjl5YXlBOUlFSlZTVXhVWDBsT1gwbE9SbFZTUVY5T1JWUlhUMUpMVTF0MGVYQmxYVHRjYmlBZ0lDQmhkMkZwZENCMGFHbHpMaU56WlhSUWNtOTJhV1JsY2tOdmJtWnBaeWg3WEc0Z0lDQWdJQ0IwZVhCbExGeHVJQ0FnSUNBZ2NuQmpWWEpzT2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNCamFHRnBia2xrT2lCdVpYUjNiM0pyTG1Ob1lXbHVTV1FzWEc0Z0lDQWdJQ0IwYVdOclpYSTZJQ2QwYVdOclpYSW5JR2x1SUc1bGRIZHZjbXNnUHlCdVpYUjNiM0pyTG5ScFkydGxjaUE2SUNkRlZFZ25MRnh1SUNBZ0lDQWdibWxqYTI1aGJXVTZJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQWdJSEp3WTFCeVpXWnpPaUI3SUdKc2IyTnJSWGh3Ykc5eVpYSlZjbXc2SUc1bGRIZHZjbXN1WW14dlkydEZlSEJzYjNKbGNsVnliQ0I5TEZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxMV2x1YVhScFlXeHBlbVZ6SUhSb1pTQndjbTkyYVdSbGNpQmhibVFnWW14dlkyc2dkSEpoWTJ0bGNpQm1iM0lnZEdobElHTjFjbkpsYm5RZ2JtVjBkMjl5YXk1Y2JpQWdJQ292WEc0Z0lHRnplVzVqSUhKbGMyVjBRMjl1Ym1WamRHbHZiaWdwSUh0Y2JpQWdJQ0JoZDJGcGRDQjBhR2x6TGlOelpYUlFjbTkyYVdSbGNrTnZibVpwWnloMGFHbHpMbk4wYjNKbExtZGxkRk4wWVhSbEtDa3VjSEp2ZG1sa1pYSkRiMjVtYVdjcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk4zYVhSamFHVnpJSFJ2SUhSb1pTQndjbVYyYVc5MWN5QnVaWFIzYjNKckxDQmhjM04xYldsdVp5QjBhR0YwSUhSb1pTQmpkWEp5Wlc1MElHNWxkSGR2Y21zZ2FYTmNiaUFnSUNvZ1pHbG1abVZ5Wlc1MElIUm9ZVzRnZEdobElHbHVhWFJwWVd3Z2JtVjBkMjl5YXlBb2FXWWdhWFFnYVhNc0lIUm9aVzRnZEdocGN5QnBjeUJsY1hWcGRtRnNaVzUwSUhSdlhHNGdJQ0FxSUdOaGJHeHBibWNnWUhKbGMyVjBRMjl1Ym1WamRHbHZibUFwTGx4dUlDQWdLaTljYmlBZ1lYTjVibU1nY205c2JHSmhZMnRVYjFCeVpYWnBiM1Z6VUhKdmRtbGtaWElvS1NCN1hHNGdJQ0FnWTI5dWMzUWdZMjl1Wm1sbklEMGdkR2hwY3k0amNISmxkbWx2ZFhOUWNtOTJhV1JsY2tOdmJtWnBaenRjYmlBZ0lDQjBhR2x6TG5OMGIzSmxMblZ3WkdGMFpWTjBZWFJsS0h0Y2JpQWdJQ0FnSUhCeWIzWnBaR1Z5UTI5dVptbG5PaUJqYjI1bWFXY3NYRzRnSUNBZ2ZTazdYRzRnSUNBZ1lYZGhhWFFnZEdocGN5NGpjM2RwZEdOb1RtVjBkMjl5YXloamIyNW1hV2NwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFWmxkR05vWlhNZ2RHaGxJR3hoZEdWemRDQmliRzlqYXlCbWIzSWdkR2hsSUc1bGRIZHZjbXN1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCd2NtOTJhV1JsY2lBdElFRWdjSEp2ZG1sa1pYSXNJSGRvYVdOb0lHbHpJR2QxWVhKaGJuUmxaV1FnZEc4Z1ltVWdZWFpoYVd4aFlteGxMbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QkJJSEJ5YjIxcGMyVWdkR2hoZENCbGFYUm9aWElnY21WemIyeDJaWE1nZEc4Z2RHaGxJR0pzYjJOcklHaGxZV1JsY2lCdmNpQnVkV3hzSUdsbVhHNGdJQ0FxSUhSb1pYSmxJR2x6SUc1dklHeGhkR1Z6ZENCaWJHOWpheXdnYjNJZ2NtVnFaV04wY3lCM2FYUm9JR0Z1SUdWeWNtOXlMbHh1SUNBZ0tpOWNiaUFnSTJkbGRFeGhkR1Z6ZEVKc2IyTnJLSEJ5YjNacFpHVnlPaUJUWVdabFJYWmxiblJGYldsMGRHVnlVSEp2ZG1sa1pYSXBPaUJRY205dGFYTmxQRUpzYjJOcklId2diblZzYkQ0Z2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNnb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCbGRHaFJkV1Z5ZVNBOUlHNWxkeUJGZEdoUmRXVnllU2h3Y205MmFXUmxjaWs3WEc0Z0lDQWdJQ0JsZEdoUmRXVnllUzV6Wlc1a1FYTjVibU04V3lkc1lYUmxjM1FuTENCbVlXeHpaVjBzSUVKc2IyTnJJSHdnYm5Wc2JENG9YRzRnSUNBZ0lDQWdJSHNnYldWMGFHOWtPaUFuWlhSb1gyZGxkRUpzYjJOclFubE9kVzFpWlhJbkxDQndZWEpoYlhNNklGc25iR0YwWlhOMEp5d2dabUZzYzJWZElIMHNYRzRnSUNBZ0lDQWdJQ2d1TGk1aGNtZHpLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dGeVozTmJNRjBnUFQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9ZWEpuYzFzeFhTazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENoaGNtZHpXekJkS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFWmxkR05vWlhNZ2RHaGxJRzVsZEhkdmNtc2dTVVFnWm05eUlIUm9aU0J1WlhSM2IzSnJMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnY0hKdmRtbGtaWElnTFNCQklIQnliM1pwWkdWeUxDQjNhR2xqYUNCcGN5Qm5kV0Z5WVc1MFpXVmtJSFJ2SUdKbElHRjJZV2xzWVdKc1pTNWNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ1FTQndjbTl0YVhObElIUm9ZWFFnWldsMGFHVnlJSEpsYzI5c2RtVnpJSFJ2SUhSb1pTQnVaWFIzYjNKcklFbEVMQ0J2Y2lCeVpXcGxZM1J6SUhkcGRHaGNiaUFnSUNvZ1lXNGdaWEp5YjNJdVhHNGdJQ0FxTDF4dUlDQmhjM2x1WXlBaloyVjBUbVYwZDI5eWEwbGtLSEJ5YjNacFpHVnlPaUJUWVdabFJYWmxiblJGYldsMGRHVnlVSEp2ZG1sa1pYSXBPaUJRY205dGFYTmxQSE4wY21sdVp6NGdlMXh1SUNBZ0lHTnZibk4wSUdWMGFGRjFaWEo1SUQwZ2JtVjNJRVYwYUZGMVpYSjVLSEJ5YjNacFpHVnlLVHRjYmlBZ0lDQnlaWFIxY200Z1lYZGhhWFFnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ1BUNGdlMXh1SUNBZ0lDQWdaWFJvVVhWbGNua3VjMlZ1WkVGemVXNWpQRzVsZG1WeVcxMHNJSE4wY21sdVp6NG9YRzRnSUNBZ0lDQWdJSHNnYldWMGFHOWtPaUFuYm1WMFgzWmxjbk5wYjI0bklIMHNYRzRnSUNBZ0lDQWdJQ2d1TGk1aGNtZHpLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dGeVozTmJNRjBnUFQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9ZWEpuYzFzeFhTazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENoaGNtZHpXekJkS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnNaV0Z5Y3lCMGFHVWdjM1J2Y21Wa0lHNWxkSGR2Y21zZ1NVUXVYRzRnSUNBcUwxeHVJQ0FqY21WelpYUk9aWFIzYjNKclNXUW9LVG9nZG05cFpDQjdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3WEc0Z0lDQWdJQ0J1WlhSM2IzSnJTV1E2SUdKMWFXeGtSR1ZtWVhWc2RFNWxkSGR2Y210SlpGTjBZWFJsS0Nrc1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZ6WlhSeklHNWxkSGR2Y21zZ2MzUmhkSFZ6SUhSdklIUm9aU0JrWldaaGRXeDBJQ2hjSW5WdWEyNXZkMjVjSWlrdVhHNGdJQ0FxTDF4dUlDQWpjbVZ6WlhST1pYUjNiM0pyVTNSaGRIVnpLQ2s2SUhadmFXUWdlMXh1SUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZTF4dUlDQWdJQ0FnYm1WMGQyOXlhMU4wWVhSMWN6b2dZblZwYkdSRVpXWmhkV3gwVG1WMGQyOXlhMU4wWVhSMWMxTjBZWFJsS0Nrc1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMnhsWVhKeklHUmxkR0ZwYkhNZ2NISmxkbWx2ZFhOc2VTQnpkRzl5WldRZ1ptOXlJSFJvWlNCdVpYUjNiM0pyTGx4dUlDQWdLaTljYmlBZ0kzSmxjMlYwVG1WMGQyOXlhMFJsZEdGcGJITW9LVG9nZG05cFpDQjdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3WEc0Z0lDQWdJQ0J1WlhSM2IzSnJSR1YwWVdsc2N6b2dZblZwYkdSRVpXWmhkV3gwVG1WMGQyOXlhMFJsZEdGcGJITlRkR0YwWlNncExGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk4wYjNKbGN5QjBhR1VnWjJsMlpXNGdjSEp2ZG1sa1pYSWdZMjl1Wm1sbmRYSmhkR2x2YmlCeVpYQnlaWE5sYm5ScGJtY2dZU0J1WlhSM2IzSnJJR2x1SUhOMFlYUmxMRnh1SUNBZ0tpQjBhR1Z1SUhWelpYTWdhWFFnZEc4Z1kzSmxZWFJsSUdFZ2JtVjNJSEJ5YjNacFpHVnlJR1p2Y2lCMGFHRjBJRzVsZEhkdmNtc3VYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0J3Y205MmFXUmxja052Ym1acFp5QXRJRlJvWlNCd2NtOTJhV1JsY2lCamIyNW1hV2QxY21GMGFXOXVMbHh1SUNBZ0tpOWNiaUFnWVhONWJtTWdJM05sZEZCeWIzWnBaR1Z5UTI5dVptbG5LSEJ5YjNacFpHVnlRMjl1Wm1sbk9pQlFjbTkyYVdSbGNrTnZibVpwWjNWeVlYUnBiMjRwSUh0Y2JpQWdJQ0IwYUdsekxpTndjbVYyYVc5MWMxQnliM1pwWkdWeVEyOXVabWxuSUQwZ2RHaHBjeTV6ZEc5eVpTNW5aWFJUZEdGMFpTZ3BMbkJ5YjNacFpHVnlRMjl1Wm1sbk8xeHVJQ0FnSUhSb2FYTXVjM1J2Y21VdWRYQmtZWFJsVTNSaGRHVW9leUJ3Y205MmFXUmxja052Ym1acFp5QjlLVHRjYmlBZ0lDQmhkMkZwZENCMGFHbHpMaU56ZDJsMFkyaE9aWFIzYjNKcktIQnliM1pwWkdWeVEyOXVabWxuS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWFJ5YVdWMlpYTWdkR2hsSUd4aGRHVnpkQ0JpYkc5amF5Qm1jbTl0SUhSb1pTQmpkWEp5Wlc1MGJIa2djMlZzWldOMFpXUWdibVYwZDI5eWF6c2dhV1lnZEdobFhHNGdJQ0FxSUdKc2IyTnJJR2hoY3lCaElHQmlZWE5sUm1WbFVHVnlSMkZ6WUNCd2NtOXdaWEowZVN3Z2RHaGxiaUIzWlNCcmJtOTNJSFJvWVhRZ2RHaGxJRzVsZEhkdmNtdGNiaUFnSUNvZ2MzVndjRzl5ZEhNZ1JVbFFMVEUxTlRrN0lHOTBhR1Z5ZDJselpTQnBkQ0JrYjJWemJpZDBMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnY0hKdmRtbGtaWElnTFNCQklIQnliM1pwWkdWeUxDQjNhR2xqYUNCcGN5Qm5kV0Z5WVc1MFpXVmtJSFJ2SUdKbElHRjJZV2xzWVdKc1pTNWNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ1FTQndjbTl0YVhObElIUm9ZWFFnY21WemIyeDJaWE1nZEc4Z2RISjFaU0JwWmlCMGFHVWdibVYwZDI5eWF5QnpkWEJ3YjNKMGN5QkZTVkF0TVRVMU9WeHVJQ0FnS2lCaGJtUWdabUZzYzJVZ2IzUm9aWEozYVhObExseHVJQ0FnS2k5Y2JpQWdZWE41Ym1NZ0kyUmxkR1Z5YldsdVpVVkpVREUxTlRsRGIyMXdZWFJwWW1sc2FYUjVLRnh1SUNBZ0lIQnliM1pwWkdWeU9pQlRZV1psUlhabGJuUkZiV2wwZEdWeVVISnZkbWxrWlhJc1hHNGdJQ2s2SUZCeWIyMXBjMlU4WW05dmJHVmhiajRnZTF4dUlDQWdJR052Ym5OMElHeGhkR1Z6ZEVKc2IyTnJJRDBnWVhkaGFYUWdkR2hwY3k0aloyVjBUR0YwWlhOMFFteHZZMnNvY0hKdmRtbGtaWElwTzF4dUlDQWdJSEpsZEhWeWJpQnNZWFJsYzNSQ2JHOWphejh1WW1GelpVWmxaVkJsY2tkaGN5QWhQVDBnZFc1a1pXWnBibVZrTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFVjRaV04xZEdWeklHRWdjMlZ5YVdWeklHOW1JSE4wWlhCeklIUnZJR05vWVc1blpTQjBhR1VnWTNWeWNtVnVkQ0J1WlhSM2IzSnJPbHh1SUNBZ0tseHVJQ0FnS2lBeExpQk9iM1JwWm1sbGN5QnpkV0p6WTNKcFltVnljeUIwYUdGMElIUm9aU0J1WlhSM2IzSnJJR2x6SUdGaWIzVjBJSFJ2SUdOb1lXNW5aUzVjYmlBZ0lDb2dNaTRnUTJ4bFlYSnpJSE4wWVhSbElHRnpjMjlqYVdGMFpXUWdkMmwwYUNCMGFHVWdZM1Z5Y21WdWRDQnVaWFIzYjNKckxseHVJQ0FnS2lBekxpQkRjbVZoZEdWeklHRWdibVYzSUc1bGRIZHZjbXNnWTJ4cFpXNTBJR0ZzYjI1bklIZHBkR2dnWVNCd2NtOTJhV1JsY2lCbWIzSWdkR2hsSUdSbGMybHlaV1JjYmlBZ0lDb2dibVYwZDI5eWF5NWNiaUFnSUNvZ05DNGdUbTkwYVdacFpYTWdjM1ZpYzJOeWFXSmxjeUIwYUdGMElIUm9aU0J1WlhSM2IzSnJJR2hoY3lCamFHRnVaMlZrTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2NISnZkbWxrWlhKRGIyNW1hV2NnTFNCVWFHVWdjSEp2ZG1sa1pYSWdZMjl1Wm1sbmRYSmhkR2x2YmlCdlltcGxZM1FnZEdoaGRDQnpjR1ZqYVdacFpYTmNiaUFnSUNvZ2RHaGxJRzVsZHlCdVpYUjNiM0pyTGx4dUlDQWdLaTljYmlBZ1lYTjVibU1nSTNOM2FYUmphRTVsZEhkdmNtc29jSEp2ZG1sa1pYSkRiMjVtYVdjNklGQnliM1pwWkdWeVEyOXVabWxuZFhKaGRHbHZiaWtnZTF4dUlDQWdJSFJvYVhNdUkyMWxjM05sYm1kbGNpNXdkV0pzYVhOb0tFNWxkSGR2Y210RGIyNTBjbTlzYkdWeVJYWmxiblJVZVhCbExrNWxkSGR2Y210WGFXeHNRMmhoYm1kbEtUdGNiaUFnSUNCMGFHbHpMaU55WlhObGRFNWxkSGR2Y210SlpDZ3BPMXh1SUNBZ0lIUm9hWE11STNKbGMyVjBUbVYwZDI5eWExTjBZWFIxY3lncE8xeHVJQ0FnSUhSb2FYTXVJM0psYzJWMFRtVjBkMjl5YTBSbGRHRnBiSE1vS1R0Y2JpQWdJQ0IwYUdsekxpTmpiMjVtYVdkMWNtVlFjbTkyYVdSbGNpaHdjbTkyYVdSbGNrTnZibVpwWnlrN1hHNGdJQ0FnZEdocGN5NGpiV1Z6YzJWdVoyVnlMbkIxWW14cGMyZ29UbVYwZDI5eWEwTnZiblJ5YjJ4c1pYSkZkbVZ1ZEZSNWNHVXVUbVYwZDI5eWEwUnBaRU5vWVc1blpTazdYRzRnSUNBZ1lYZGhhWFFnZEdocGN5NXNiMjlyZFhCT1pYUjNiM0pyS0NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QmhJRzVsZEhkdmNtc2dZMnhwWlc1MElDaGhJSE4wWVdOcklHOW1JRzFwWkdSc1pYZGhjbVVnWVd4dmJtY2dkMmwwYUNCaElIQnliM1pwWkdWeUlHRnVaRnh1SUNBZ0tpQmliRzlqYXlCMGNtRmphMlZ5S1NCMGJ5QjBZV3hySUhSdklHRWdibVYwZDI5eWF5NWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJR0Z5WjNNZ0xTQlVhR1VnWVhKbmRXMWxiblJ6TGx4dUlDQWdLaUJBY0dGeVlXMGdZWEpuY3k1MGVYQmxJQzBnVkdobElITm9iM0owYm1GdFpTQnZaaUJoYmlCSmJtWjFjbUV0YzNWd2NHOXlkR1ZrSUc1bGRIZHZjbXNnS0hObFpWeHVJQ0FnS2lCN1FHeHBibXNnVGtWVVYwOVNTMTlVV1ZCRlUzMHBMbHh1SUNBZ0tpQkFjR0Z5WVcwZ1lYSm5jeTV5Y0dOVmNtd2dMU0JVYUdVZ1ZWSk1JRzltSUhSb1pTQlNVRU1nWlc1a2NHOXBiblFnZEdoaGRDQnlaWEJ5WlhObGJuUnpJSFJvWlZ4dUlDQWdLaUJ1WlhSM2IzSnJMaUJQYm14NUlIVnpaV1FnWm05eUlHNXZiaTFKYm1aMWNtRWdibVYwZDI5eWEzTXVYRzRnSUNBcUlFQndZWEpoYlNCaGNtZHpMbU5vWVdsdVNXUWdMU0JVYUdVZ1kyaGhhVzRnU1VRZ2IyWWdkR2hsSUc1bGRIZHZjbXNnS0dGeklIQmxjaUJGU1ZBdE1UVTFLUzRnVDI1c2VWeHVJQ0FnS2lCMWMyVmtJR1p2Y2lCdWIyNHRTVzVtZFhKaExYTjFjSEJ2Y25SbFpDQnVaWFIzYjNKcmN5QW9ZWE1nZDJVZ1lXeHlaV0ZrZVNCcmJtOTNJSFJvWlNCamFHRnBiaUJKUkNCdlpseHVJQ0FnS2lCaGJua2dTVzVtZFhKaExYTjFjSEJ2Y25SbFpDQnVaWFIzYjNKcktTNWNiaUFnSUNvZ1FIUm9jbTkzY3lCcFppQjBhR1VnWUhSNWNHVmdJR2xtSUc1dmRDQmhJR3R1YjNkdUlFbHVablZ5WVMxemRYQndiM0owWldRZ2JtVjBkMjl5YXk1Y2JpQWdJQ292WEc0Z0lDTmpiMjVtYVdkMWNtVlFjbTkyYVdSbGNpaDdJSFI1Y0dVc0lISndZMVZ5YkN3Z1kyaGhhVzVKWkNCOU9pQlFjbTkyYVdSbGNrTnZibVpwWjNWeVlYUnBiMjRwT2lCMmIybGtJSHRjYmlBZ0lDQmpiMjV6ZENCcGMwbHVablZ5WVNBOUlHbHpTVzVtZFhKaFVISnZkbWxrWlhKVWVYQmxLSFI1Y0dVcE8xeHVJQ0FnSUdsbUlDaHBjMGx1Wm5WeVlTa2dlMXh1SUNBZ0lDQWdMeThnYVc1bWRYSmhJSFI1Y0dVdFltRnpaV1FnWlc1a2NHOXBiblJ6WEc0Z0lDQWdJQ0IwYUdsekxpTmpiMjVtYVdkMWNtVkpibVoxY21GUWNtOTJhV1JsY2loN1hHNGdJQ0FnSUNBZ0lIUjVjR1VzWEc0Z0lDQWdJQ0FnSUdsdVpuVnlZVkJ5YjJwbFkzUkpaRG9nZEdocGN5NGphVzVtZFhKaFVISnZhbVZqZEVsa0xGeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsSUQwOVBTQk9SVlJYVDFKTFgxUlpVRVZUTGxKUVF5QW1KaUJ5Y0dOVmNtd3BJSHRjYmlBZ0lDQWdJQzh2SUhWeWJDMWlZWE5sWkNCeWNHTWdaVzVrY0c5cGJuUnpYRzRnSUNBZ0lDQjBhR2x6TGlOamIyNW1hV2QxY21WVGRHRnVaR0Z5WkZCeWIzWnBaR1Z5S0hKd1kxVnliQ3dnWTJoaGFXNUpaQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2JpQWdJQ0FnSUNBZ1lFNWxkSGR2Y210RGIyNTBjbTlzYkdWeUlDMGdJMk52Ym1acFozVnlaVkJ5YjNacFpHVnlJQzBnZFc1cmJtOTNiaUIwZVhCbElGd2lKSHQwZVhCbGZWd2lZQ3hjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOeVpXRjBaWE1nWVNCdVpYUjNiM0pySUdOc2FXVnVkQ0FvWVNCemRHRmpheUJ2WmlCdGFXUmtiR1YzWVhKbElHRnNiMjVuSUhkcGRHZ2dZU0J3Y205MmFXUmxjaUJoYm1SY2JpQWdJQ29nWW14dlkyc2dkSEpoWTJ0bGNpa2dkRzhnZEdGc2F5QjBieUJoYmlCSmJtWjFjbUV0YzNWd2NHOXlkR1ZrSUc1bGRIZHZjbXN1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCaGNtZHpJQzBnVkdobElHRnlaM1Z0Wlc1MGN5NWNiaUFnSUNvZ1FIQmhjbUZ0SUdGeVozTXVkSGx3WlNBdElGUm9aU0J6YUc5eWRHNWhiV1VnYjJZZ2RHaGxJRWx1Wm5WeVlTQnVaWFIzYjNKcklDaHpaV1ZjYmlBZ0lDb2dlMEJzYVc1cklFNUZWRmRQVWt0ZlZGbFFSVk45S1M1Y2JpQWdJQ29nUUhCaGNtRnRJR0Z5WjNNdWFXNW1kWEpoVUhKdmFtVmpkRWxrSUMwZ1FXNGdTVzVtZFhKaElFRlFTU0JyWlhrdUlDaGNJbEJ5YjJwbFkzUWdTVVJjSWlCcGN5QmhYRzRnSUNBcUlHNXZkeTF2WW5OdmJHVjBaU0IwWlhKdElIZGxKM1psSUhKbGRHRnBibVZrSUdadmNpQmlZV05yZDJGeVpDQmpiMjF3WVhScFltbHNhWFI1TGlsY2JpQWdJQ292WEc0Z0lDTmpiMjVtYVdkMWNtVkpibVoxY21GUWNtOTJhV1JsY2loN1hHNGdJQ0FnZEhsd1pTeGNiaUFnSUNCcGJtWjFjbUZRY205cVpXTjBTV1FzWEc0Z0lIMDZJSHRjYmlBZ0lDQjBlWEJsT2lCQ2RXbHNkRWx1U1c1bWRYSmhUbVYwZDI5eWF6dGNiaUFnSUNCcGJtWjFjbUZRY205cVpXTjBTV1E2SUU1bGRIZHZjbXREYjI1MGNtOXNiR1Z5VDNCMGFXOXVjMXNuYVc1bWRYSmhVSEp2YW1WamRFbGtKMTA3WEc0Z0lIMHBPaUIyYjJsa0lIdGNiaUFnSUNCc2IyY3VhVzVtYnlnblRtVjBkMjl5YTBOdmJuUnliMnhzWlhJZ0xTQWpZMjl1Wm1sbmRYSmxTVzVtZFhKaFVISnZkbWxrWlhJbkxDQjBlWEJsS1R0Y2JpQWdJQ0JqYjI1emRDQjdJSEJ5YjNacFpHVnlMQ0JpYkc5amExUnlZV05yWlhJZ2ZTQTlJR055WldGMFpVNWxkSGR2Y210RGJHbGxiblFvZTF4dUlDQWdJQ0FnYm1WMGQyOXlhem9nZEhsd1pTeGNiaUFnSUNBZ0lHbHVablZ5WVZCeWIycGxZM1JKWkN4Y2JpQWdJQ0FnSUhSNWNHVTZJRTVsZEhkdmNtdERiR2xsYm5SVWVYQmxMa2x1Wm5WeVlTeGNiaUFnSUNCOUtUdGNiaUFnSUNCMGFHbHpMaU56WlhSUWNtOTJhV1JsY2tGdVpFSnNiMk5yVkhKaFkydGxjaWg3SUhCeWIzWnBaR1Z5TENCaWJHOWphMVJ5WVdOclpYSWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1EzSmxZWFJsY3lCaElHNWxkSGR2Y21zZ1kyeHBaVzUwSUNoaElITjBZV05ySUc5bUlHMXBaR1JzWlhkaGNtVWdZV3h2Ym1jZ2QybDBhQ0JoSUhCeWIzWnBaR1Z5SUdGdVpGeHVJQ0FnS2lCaWJHOWpheUIwY21GamEyVnlLU0IwYnlCMFlXeHJJSFJ2SUdFZ2JtOXVMVWx1Wm5WeVlTMXpkWEJ3YjNKMFpXUWdibVYwZDI5eWF5NWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSEp3WTFWeWJDQXRJRlJvWlNCVlVrd2diMllnZEdobElGSlFReUJsYm1Sd2IybHVkQ0IwYUdGMElISmxjSEpsYzJWdWRITWdkR2hsSUc1bGRIZHZjbXN1WEc0Z0lDQXFJRUJ3WVhKaGJTQmphR0ZwYmtsa0lDMGdWR2hsSUdOb1lXbHVJRWxFSUc5bUlIUm9aU0J1WlhSM2IzSnJJQ2hoY3lCd1pYSWdSVWxRTFRFMU5Ta3VYRzRnSUNBcUwxeHVJQ0FqWTI5dVptbG5kWEpsVTNSaGJtUmhjbVJRY205MmFXUmxjaWh5Y0dOVmNtdzZJSE4wY21sdVp5d2dZMmhoYVc1SlpEb2dRMmhoYVc1SlpDazZJSFp2YVdRZ2UxeHVJQ0FnSUd4dlp5NXBibVp2S0NkT1pYUjNiM0pyUTI5dWRISnZiR3hsY2lBdElDTmpiMjVtYVdkMWNtVlRkR0Z1WkdGeVpGQnliM1pwWkdWeUp5d2djbkJqVlhKc0tUdGNiaUFnSUNCamIyNXpkQ0I3SUhCeWIzWnBaR1Z5TENCaWJHOWphMVJ5WVdOclpYSWdmU0E5SUdOeVpXRjBaVTVsZEhkdmNtdERiR2xsYm5Rb2UxeHVJQ0FnSUNBZ1kyaGhhVzVKWkN4Y2JpQWdJQ0FnSUhKd1kxVnliQ3hjYmlBZ0lDQWdJSFI1Y0dVNklFNWxkSGR2Y210RGJHbGxiblJVZVhCbExrTjFjM1J2YlN4Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0IwYUdsekxpTnpaWFJRY205MmFXUmxja0Z1WkVKc2IyTnJWSEpoWTJ0bGNpaDdJSEJ5YjNacFpHVnlMQ0JpYkc5amExUnlZV05yWlhJZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJsMlpXNGdZU0J3Y205MmFXUmxjaUJoYm1RZ1lTQmliRzlqYXlCMGNtRmphMlZ5TENCMWNHUmhkR1Z6SUdGdWVTQndjbTk0YVdWeklIQnZhVzUwYVc1bklIUnZYRzRnSUNBcUlIUm9aWE5sSUc5aWFtVmpkSE1nZEdoaGRDQm9ZWFpsSUdKbFpXNGdjSEpsZG1sdmRYTnNlU0J6WlhRc0lHOXlJR2x1YVhScFlXeHBlbVZ6SUdGdWVTQndjbTk0YVdWelhHNGdJQ0FxSUhSb1lYUWdhR0YyWlNCdWIzUWdZbVZsYmlCd2NtVjJhVzkxYzJ4NUlITmxkQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUdGeVozTWdMU0JVYUdVZ1lYSm5kVzFsYm5SekxseHVJQ0FnS2lCQWNHRnlZVzBnWVhKbmN5NXdjbTkyYVdSbGNpQXRJRlJvWlNCd2NtOTJhV1JsY2k1Y2JpQWdJQ29nUUhCaGNtRnRJR0Z5WjNNdVlteHZZMnRVY21GamEyVnlJQzBnVkdobElHSnNiMk5ySUhSeVlXTnJaWEl1WEc0Z0lDQXFMMXh1SUNBamMyVjBVSEp2ZG1sa1pYSkJibVJDYkc5amExUnlZV05yWlhJb2UxeHVJQ0FnSUhCeWIzWnBaR1Z5TEZ4dUlDQWdJR0pzYjJOclZISmhZMnRsY2l4Y2JpQWdmVG9nZTF4dUlDQWdJSEJ5YjNacFpHVnlPaUJUWVdabFJYWmxiblJGYldsMGRHVnlVSEp2ZG1sa1pYSTdYRzRnSUNBZ1lteHZZMnRVY21GamEyVnlPaUJRYjJ4c2FXNW5RbXh2WTJ0VWNtRmphMlZ5TzF4dUlDQjlLVG9nZG05cFpDQjdYRzRnSUNBZ0x5OGdkWEJrWVhSbElHOXlJR2x1YVhScFlXeHBlbVVnY0hKdmVHbGxjMXh1SUNBZ0lHbG1JQ2gwYUdsekxpTndjbTkyYVdSbGNsQnliM2g1S1NCN1hHNGdJQ0FnSUNCMGFHbHpMaU53Y205MmFXUmxjbEJ5YjNoNUxuTmxkRlJoY21kbGRDaHdjbTkyYVdSbGNpazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb2FYTXVJM0J5YjNacFpHVnlVSEp2ZUhrZ1BTQmpjbVZoZEdWVGQyRndjR0ZpYkdWUWNtOTRlU2h3Y205MmFXUmxjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gwYUdsekxpTmliRzlqYTFSeVlXTnJaWEpRY205NGVTa2dlMXh1SUNBZ0lDQWdkR2hwY3k0allteHZZMnRVY21GamEyVnlVSEp2ZUhrdWMyVjBWR0Z5WjJWMEtHSnNiMk5yVkhKaFkydGxjaWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9hWE11STJKc2IyTnJWSEpoWTJ0bGNsQnliM2g1SUQwZ1kzSmxZWFJsUlhabGJuUkZiV2wwZEdWeVVISnZlSGtvWW14dlkydFVjbUZqYTJWeUxDQjdYRzRnSUNBZ0lDQWdJR1YyWlc1MFJtbHNkR1Z5T2lBbmMydHBjRWx1ZEdWeWJtRnNKeXhjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJ6WlhRZ2JtVjNJSEJ5YjNacFpHVnlJR0Z1WkNCaWJHOWphMVJ5WVdOclpYSmNiaUFnSUNCMGFHbHpMaU53Y205MmFXUmxjaUE5SUhCeWIzWnBaR1Z5TzF4dUlDQWdJSFJvYVhNdUkySnNiMk5yVkhKaFkydGxjaUE5SUdKc2IyTnJWSEpoWTJ0bGNqdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJPWlhSM2IzSnJJRU52Ym1acFozVnlZWFJwYjI0Z2JXRnVZV2RsYldWdWRDQm1kVzVqZEdsdmJuTmNiaUFnSUNvdlhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZWd1pHRjBaWE1nWVc0Z1pYaHBjM1JwYm1jZ2JtVjBkMjl5YXlCamIyNW1hV2QxY21GMGFXOXVJRzFoZEdOb2FXNW5JSFJvWlNCellXMWxJRkpRUXlCVlVrd2dZWE1nZEdobFhHNGdJQ0FxSUdkcGRtVnVJRzVsZEhkdmNtc2dZMjl1Wm1sbmRYSmhkR2x2YmpzZ2IzUm9aWEozYVhObElHRmtaSE1nZEdobElHNWxkSGR2Y21zZ1kyOXVabWxuZFhKaGRHbHZiaTVjYmlBZ0lDb2dSbTlzYkc5M2FXNW5JSFJvWlNCMWNITmxjblFzSUhSb1pTQmdkSEpoWTJ0TlpYUmhUV1YwY21samMwVjJaVzUwWUNCallXeHNZbUZqYXlCemNHVmphV1pwWldSY2JpQWdJQ29nZG1saElIUm9aU0JPWlhSM2IzSnJRMjl1ZEhKdmJHeGxjaUJqYjI1emRISjFZM1J2Y2lCM2FXeHNJR0psSUdOaGJHeGxaQ0IwYnlBb2NISmxjM1Z0WVdKc2VTa2dZM0psWVhSbFhHNGdJQ0FxSUdFZ1RXVjBZVTFsZEhKcFkzTWdaWFpsYm5RdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQnVaWFIzYjNKclEyOXVabWxuZFhKaGRHbHZiaUF0SUZSb1pTQnVaWFIzYjNKcklHTnZibVpwWjNWeVlYUnBiMjRnZEc4Z2RYQnpaWEowTGx4dUlDQWdLaUJBY0dGeVlXMGdibVYwZDI5eWEwTnZibVpwWjNWeVlYUnBiMjR1WTJoaGFXNUpaQ0F0SUZSb1pTQmphR0ZwYmlCSlJDQnZaaUIwYUdVZ2JtVjBkMjl5YXlCaGN5QndaWEpjYmlBZ0lDb2dSVWxRTFRFMU5TNWNiaUFnSUNvZ1FIQmhjbUZ0SUc1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dUxuUnBZMnRsY2lBdElGUm9aU0J6YUc5eWRHNWhiV1VnYjJZZ2RHaGxJR04xY25KbGJtTjVJSFZ6WldRZ1lubGNiaUFnSUNvZ2RHaGxJRzVsZEhkdmNtc3VYRzRnSUNBcUlFQndZWEpoYlNCdVpYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJpNXVhV05yYm1GdFpTQXRJRlJvWlNCMWMyVnlMV04xYzNSdmJXbDZZV0pzWlNCdVlXMWxJRzltSUhSb1pWeHVJQ0FnS2lCdVpYUjNiM0pyTGx4dUlDQWdLaUJBY0dGeVlXMGdibVYwZDI5eWEwTnZibVpwWjNWeVlYUnBiMjR1Y25CalVISmxabk1nTFNCVmMyVnlMV04xYzNSdmJXbDZZV0pzWlNCa1pYUmhhV3h6SUdadmNpQjBhR1ZjYmlBZ0lDb2dibVYwZDI5eWF5NWNiaUFnSUNvZ1FIQmhjbUZ0SUc1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dUxuSndZMVZ5YkNBdElGUm9aU0JWVWt3Z2IyWWdkR2hsSUZKUVF5QmxibVJ3YjJsdWRDNWNiaUFnSUNvZ1FIQmhjbUZ0SUdGa1pHbDBhVzl1WVd4QmNtZHpJQzBnUVdSa2FYUnBiMjVoYkNCaGNtZDFiV1Z1ZEhNdVhHNGdJQ0FxSUVCd1lYSmhiU0JoWkdScGRHbHZibUZzUVhKbmN5NXpaWFJCWTNScGRtVWdMU0JUZDJsMFkyaGxjeUIwYnlCMGFHVWdibVYwZDI5eWF5QnpjR1ZqYVdacFpXUWdZbmxjYmlBZ0lDb2dkR2hsSUdkcGRtVnVJRzVsZEhkdmNtc2dZMjl1Wm1sbmRYSmhkR2x2YmlCbWIyeHNiM2RwYm1jZ2RHaGxJSFZ3YzJWeWRDNWNiaUFnSUNvZ1FIQmhjbUZ0SUdGa1pHbDBhVzl1WVd4QmNtZHpMbkpsWm1WeWNtVnlJQzBnVkdobElITnBkR1VnWm5KdmJTQjNhR2xqYUNCMGFHVWdZMkZzYkNCdmNtbG5hVzVoZEdWa0xGeHVJQ0FnS2lCdmNpQW5iV1YwWVcxaGMyc25JR1p2Y2lCcGJuUmxjbTVoYkNCallXeHNjenNnZFhObFpDQm1iM0lnWlhabGJuUWdiV1YwY21samN5NWNiaUFnSUNvZ1FIQmhjbUZ0SUdGa1pHbDBhVzl1WVd4QmNtZHpMbk52ZFhKalpTQXRJRmRvWlhKbElIUm9aU0J0WlhSeWFXTWdaWFpsYm5RZ2IzSnBaMmx1WVhSbFpDQW9hUzVsTGlCbWNtOXRYRzRnSUNBcUlHRWdaR0Z3Y0NCdmNpQm1jbTl0SUhSb1pTQnVaWFIzYjNKcklHWnZjbTBwT3lCMWMyVmtJR1p2Y2lCbGRtVnVkQ0J0WlhSeWFXTnpMbHh1SUNBZ0tpQkFkR2h5YjNkeklHbG1JSFJvWlNCZ1kyaGhhVzVKUkdBZ1pHOWxjeUJ1YjNRZ2JXRjBZMmdnUlVsUUxURTFOU0J2Y2lCcGN5QjBiMjhnYkdGeVoyVXVYRzRnSUNBcUlFQjBhSEp2ZDNNZ2FXWWdZSEp3WTFWeWJHQWdhWE1nYm05MElHRWdkbUZzYVdRZ1ZWSk1MbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QlVhR1VnU1VRZ1ptOXlJSFJvWlNCaFpHUmxaQ0J2Y2lCMWNHUmhkR1ZrSUc1bGRIZHZjbXNnWTI5dVptbG5kWEpoZEdsdmJpNWNiaUFnSUNvdlhHNGdJR0Z6ZVc1aklIVndjMlZ5ZEU1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dUtGeHVJQ0FnSUh0Y2JpQWdJQ0FnSUhKd1kxVnliQ3hjYmlBZ0lDQWdJR05vWVdsdVNXUXNYRzRnSUNBZ0lDQjBhV05yWlhJc1hHNGdJQ0FnSUNCdWFXTnJibUZ0WlN4Y2JpQWdJQ0FnSUhKd1kxQnlaV1p6TEZ4dUlDQWdJSDA2SUU5dGFYUThUbVYwZDI5eWEwTnZibVpwWjNWeVlYUnBiMjRzSUNkcFpDYytMRnh1SUNBZ0lIdGNiaUFnSUNBZ0lITmxkRUZqZEdsMlpTQTlJR1poYkhObExGeHVJQ0FnSUNBZ2NtVm1aWEp5WlhJc1hHNGdJQ0FnSUNCemIzVnlZMlVzWEc0Z0lDQWdmVG9nZTF4dUlDQWdJQ0FnYzJWMFFXTjBhWFpsUHpvZ1ltOXZiR1ZoYmp0Y2JpQWdJQ0FnSUhKbFptVnljbVZ5T2lCemRISnBibWM3WEc0Z0lDQWdJQ0J6YjNWeVkyVTZJSE4wY21sdVp6dGNiaUFnSUNCOUxGeHVJQ0FwT2lCUWNtOXRhWE5sUEU1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dVNXUStJSHRjYmlBZ0lDQmhjM05sY25RdWIyc29YRzRnSUNBZ0lDQnBjMUJ5WldacGVHVmtSbTl5YldGMGRHVmtTR1Y0VTNSeWFXNW5LR05vWVdsdVNXUXBMRnh1SUNBZ0lDQWdZRWx1ZG1Gc2FXUWdZMmhoYVc0Z1NVUWdYQ0lrZTJOb1lXbHVTV1I5WENJNklHbHVkbUZzYVdRZ2FHVjRJSE4wY21sdVp5NWdMRnh1SUNBZ0lDazdYRzRnSUNBZ1lYTnpaWEowTG05cktGeHVJQ0FnSUNBZ2FYTlRZV1psUTJoaGFXNUpaQ2h3WVhKelpVbHVkQ2hqYUdGcGJrbGtMQ0F4TmlrcExGeHVJQ0FnSUNBZ1lFbHVkbUZzYVdRZ1kyaGhhVzRnU1VRZ1hDSWtlMk5vWVdsdVNXUjlYQ0k2SUc1MWJXVnlhV05oYkNCMllXeDFaU0JuY21WaGRHVnlJSFJvWVc0Z2JXRjRJSE5oWm1VZ2RtRnNkV1V1WUN4Y2JpQWdJQ0FwTzF4dVhHNGdJQ0FnYVdZZ0tDRnljR05WY213cElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0owRnVJSEp3WTFWeWJDQnBjeUJ5WlhGMWFYSmxaQ0IwYnlCaFpHUWdiM0lnZFhCa1lYUmxJRzVsZEhkdmNtc2dZMjl1Wm1sbmRYSmhkR2x2Ymljc1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDZ2hjbVZtWlhKeVpYSWdmSHdnSVhOdmRYSmpaU2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FuY21WbVpYSnlaWElnWVc1a0lITnZkWEpqWlNCaGNtVWdjbVZ4ZFdseVpXUWdZWEpuZFcxbGJuUnpJR1p2Y2lCaFpHUnBibWNnYjNJZ2RYQmtZWFJwYm1jZ1lTQnVaWFIzYjNKcklHTnZibVpwWjNWeVlYUnBiMjRuTEZ4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMVzVsZDF4dUlDQWdJQ0FnYm1WM0lGVlNUQ2h5Y0dOVmNtd3BPMXh1SUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJR2xtSUNocGMwVnljbTl5VjJsMGFFMWxjM05oWjJVb1pTa2dKaVlnWlM1dFpYTnpZV2RsTG1sdVkyeDFaR1Z6S0NkSmJuWmhiR2xrSUZWU1RDY3BLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduY25CalZYSnNJRzExYzNRZ1ltVWdZU0IyWVd4cFpDQlZVa3duS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb0lYUnBZMnRsY2lrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4dUlDQWdJQ0FnSUNBblFTQjBhV05yWlhJZ2FYTWdjbVZ4ZFdseVpXUWdkRzhnWVdSa0lHOXlJSFZ3WkdGMFpTQnVaWFIzYjNKclEyOXVabWxuZFhKaGRHbHZiaWNzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElIc2dibVYwZDI5eWEwTnZibVpwWjNWeVlYUnBiMjV6SUgwZ1BTQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2s3WEc0Z0lDQWdZMjl1YzNRZ2JtVjNUbVYwZDI5eWEwTnZibVpwWjNWeVlYUnBiMjRnUFNCN1hHNGdJQ0FnSUNCeWNHTlZjbXdzWEc0Z0lDQWdJQ0JqYUdGcGJrbGtMRnh1SUNBZ0lDQWdkR2xqYTJWeUxGeHVJQ0FnSUNBZ2JtbGphMjVoYldVc1hHNGdJQ0FnSUNCeWNHTlFjbVZtY3l4Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWTI5dWMzUWdiMnhrVG1WMGQyOXlhME52Ym1acFozVnlZWFJwYjI1SlpDQTlJRTlpYW1WamRDNTJZV3gxWlhNb2JtVjBkMjl5YTBOdmJtWnBaM1Z5WVhScGIyNXpLUzVtYVc1a0tGeHVJQ0FnSUNBZ0tHNWxkSGR2Y210RGIyNW1hV2QxY21GMGFXOXVLU0E5UGx4dUlDQWdJQ0FnSUNCdVpYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJpNXljR05WY213L0xuUnZURzkzWlhKRFlYTmxLQ2tnUFQwOUlISndZMVZ5YkQ4dWRHOU1iM2RsY2tOaGMyVW9LU3hjYmlBZ0lDQXBQeTVwWkR0Y2JseHVJQ0FnSUdOdmJuTjBJRzVsZDA1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dVNXUWdQU0J2YkdST1pYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJrbGtJSHg4SUhWMWFXUW9LVHRjYmlBZ0lDQjBhR2x6TG5OMGIzSmxMblZ3WkdGMFpWTjBZWFJsS0h0Y2JpQWdJQ0FnSUc1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dWN6b2dlMXh1SUNBZ0lDQWdJQ0F1TGk1dVpYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJuTXNYRzRnSUNBZ0lDQWdJRnR1WlhkT1pYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJrbGtYVG9nZTF4dUlDQWdJQ0FnSUNBZ0lDNHVMbTVsZDA1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dUxGeHVJQ0FnSUNBZ0lDQWdJR2xrT2lCdVpYZE9aWFIzYjNKclEyOXVabWxuZFhKaGRHbHZia2xrTEZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHbG1JQ2doYjJ4a1RtVjBkMjl5YTBOdmJtWnBaM1Z5WVhScGIyNUpaQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NGpkSEpoWTJ0TlpYUmhUV1YwY21samMwVjJaVzUwS0h0Y2JpQWdJQ0FnSUNBZ1pYWmxiblE2SUNkRGRYTjBiMjBnVG1WMGQyOXlheUJCWkdSbFpDY3NYRzRnSUNBZ0lDQWdJR05oZEdWbmIzSjVPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBRMkYwWldkdmNua3VUbVYwZDI5eWF5eGNiaUFnSUNBZ0lDQWdjbVZtWlhKeVpYSTZJSHRjYmlBZ0lDQWdJQ0FnSUNCMWNtdzZJSEpsWm1WeWNtVnlMRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCd2NtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQWdJQ0FnWTJoaGFXNWZhV1E2SUdOb1lXbHVTV1FzWEc0Z0lDQWdJQ0FnSUNBZ2MzbHRZbTlzT2lCMGFXTnJaWElzWEc0Z0lDQWdJQ0FnSUNBZ2MyOTFjbU5sTEZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSE5sZEVGamRHbDJaU2tnZTF4dUlDQWdJQ0FnWVhkaGFYUWdkR2hwY3k1elpYUkJZM1JwZG1WT1pYUjNiM0pyS0c1bGQwNWxkSGR2Y210RGIyNW1hV2QxY21GMGFXOXVTV1FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGRPWlhSM2IzSnJRMjl1Wm1sbmRYSmhkR2x2Ymtsa08xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsYlc5MlpYTWdZU0J1WlhSM2IzSnJJR052Ym1acFozVnlZWFJwYjI0Z1puSnZiU0J6ZEdGMFpTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJRzVsZEhkdmNtdERiMjVtYVdkMWNtRjBhVzl1U1dRZ0xTQlVhR1VnZFc1cGNYVmxJR2xrSUdadmNpQjBhR1VnYm1WMGQyOXlheUJqYjI1bWFXZDFjbUYwYVc5dVhHNGdJQ0FxSUhSdklISmxiVzkyWlM1Y2JpQWdJQ292WEc0Z0lISmxiVzkyWlU1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dUtHNWxkSGR2Y210RGIyNW1hV2QxY21GMGFXOXVTV1E2SUU1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dVNXUXBJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tTNXVaWFIzYjNKclEyOXVabWxuZFhKaGRHbHZibk5iYm1WMGQyOXlhME52Ym1acFozVnlZWFJwYjI1SlpGMHBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNiaUFnSUNBZ0lDQWdZRzVsZEhkdmNtdERiMjVtYVdkMWNtRjBhVzl1U1dRZ0pIdHVaWFIzYjNKclEyOXVabWxuZFhKaGRHbHZia2xrZlNCa2IyVnpJRzV2ZENCdFlYUmphQ0JoSUdOdmJtWnBaM1Z5WldRZ2JtVjBkMjl5YTBOdmJtWnBaM1Z5WVhScGIyNWdMRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjM1FnYm1WMGQyOXlhME52Ym1acFozVnlZWFJwYjI1eklEMGdlMXh1SUNBZ0lDQWdMaTR1ZEdocGN5NXpkRzl5WlM1blpYUlRkR0YwWlNncExtNWxkSGR2Y210RGIyNW1hV2QxY21GMGFXOXVjeXhjYmlBZ0lDQjlPMXh1SUNBZ0lHUmxiR1YwWlNCdVpYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJuTmJibVYwZDI5eWEwTnZibVpwWjNWeVlYUnBiMjVKWkYwN1hHNGdJQ0FnZEdocGN5NXpkRzl5WlM1MWNHUmhkR1ZUZEdGMFpTaDdYRzRnSUNBZ0lDQnVaWFIzYjNKclEyOXVabWxuZFhKaGRHbHZibk1zWEc0Z0lDQWdmU2s3WEc0Z0lIMWNibjFjYmlJc0ltbHRjRzl5ZENCN0lFOWljMlZ5ZG1GaWJHVlRkRzl5WlNCOUlHWnliMjBnSjBCdFpYUmhiV0Z6YXk5dlluTXRjM1J2Y21Vbk8xeHVhVzF3YjNKMElHeHZaeUJtY205dElDZHNiMmRzWlhabGJDYzdYRzVjYmk4cUtseHVJQ29nUUhSNWNHVmtaV1lnZTI5aWFtVmpkSDBnU1c1cGRGTjBZWFJsWEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMkp2YjJ4bFlXNTlJSE5sWldSUWFISmhjMlZDWVdOclpXUlZjQ0JKYm1ScFkyRjBaWE1nZDJobGRHaGxjaUIwYUdVZ2RYTmxjaUJvWVhNZ1kyOXRjR3hsZEdWa0lIUm9aU0J6WldWa0lIQm9jbUZ6WlNCaVlXTnJkWEFnWTJoaGJHeGxibWRsWEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMkp2YjJ4bFlXNTlJR052YlhCc1pYUmxaRTl1WW05aGNtUnBibWNnU1c1a2FXTmhkR1Z6SUhkb1pYUm9aWElnZEdobElIVnpaWElnYUdGeklHTnZiWEJzWlhSbFpDQjBhR1VnYjI1aWIyRnlaR2x1WnlCbWJHOTNYRzRnS2k5Y2JseHVMeW9xWEc0Z0tpQkFkSGx3WldSbFppQjdiMkpxWldOMGZTQlBibUp2WVhKa2FXNW5UM0IwYVc5dWMxeHVJQ29nUUhCeWIzQmxjblI1SUh0SmJtbDBVM1JoZEdWOUlHbHVhWFJUZEdGMFpTQlVhR1VnYVc1cGRHbGhiQ0JqYjI1MGNtOXNiR1Z5SUhOMFlYUmxYRzRnS2k5Y2JseHVMeW9xWEc0Z0tpQkRiMjUwY205c2JHVnlJSEpsYzNCdmJuTnBZbXhsSUdadmNpQnRZV2x1ZEdGcGJtbHVaMXh1SUNvZ2MzUmhkR1VnY21Wc1lYUmxaQ0IwYnlCdmJtSnZZWEprYVc1blhHNGdLaTljYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFOXVZbTloY21ScGJtZERiMjUwY205c2JHVnlJSHRjYmlBZ0x5b3FYRzRnSUNBcUlFTnlaV0YwWlhNZ1lTQnVaWGNnWTI5dWRISnZiR3hsY2lCcGJuTjBZVzVqWlZ4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOXVZbTloY21ScGJtZFBjSFJwYjI1emZTQmJiM0IwYzEwZ0xTQkRiMjUwY205c2JHVnlJR052Ym1acFozVnlZWFJwYjI0Z2NHRnlZVzFsZEdWeWMxeHVJQ0FnS2k5Y2JpQWdZMjl1YzNSeWRXTjBiM0lvYjNCMGN5QTlJSHQ5S1NCN1hHNGdJQ0FnWTI5dWMzUWdhVzVwZEdsaGJGUnlZVzV6YVdWdWRGTjBZWFJsSUQwZ2UxeHVJQ0FnSUNBZ2IyNWliMkZ5WkdsdVoxUmhZbk02SUh0OUxGeHVJQ0FnSUgwN1hHNGdJQ0FnWTI5dWMzUWdhVzVwZEZOMFlYUmxJRDBnZTF4dUlDQWdJQ0FnYzJWbFpGQm9jbUZ6WlVKaFkydGxaRlZ3T2lCdWRXeHNMRnh1SUNBZ0lDQWdabWx5YzNSVWFXMWxSbXh2ZDFSNWNHVTZJRzUxYkd3c1hHNGdJQ0FnSUNCamIyMXdiR1YwWldSUGJtSnZZWEprYVc1bk9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUM0dUxtOXdkSE11YVc1cGRGTjBZWFJsTEZ4dUlDQWdJQ0FnTGk0dWFXNXBkR2xoYkZSeVlXNXphV1Z1ZEZOMFlYUmxMRnh1SUNBZ0lIMDdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTQTlJRzVsZHlCUFluTmxjblpoWW14bFUzUnZjbVVvYVc1cGRGTjBZWFJsS1R0Y2JpQWdmVnh1WEc0Z0lITmxkRk5sWldSUWFISmhjMlZDWVdOclpXUlZjQ2h1WlhkVFpXVmtVR2h5WVhObFFtRmphMVZ3VTNSaGRHVXBJSHRjYmlBZ0lDQjBhR2x6TG5OMGIzSmxMblZ3WkdGMFpWTjBZWFJsS0h0Y2JpQWdJQ0FnSUhObFpXUlFhSEpoYzJWQ1lXTnJaV1JWY0RvZ2JtVjNVMlZsWkZCb2NtRnpaVUpoWTJ0VmNGTjBZWFJsTEZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5OGdMeW9xWEc0Z0lDOHZJQ0FxSUZObGRITWdkR2hsSUdOdmJYQnNaWFJsWkU5dVltOWhjbVJwYm1jZ2MzUmhkR1VnZEc4Z2RISjFaU3dnYVc1a2FXTmhkR2x1WnlCMGFHRjBJSFJvWlNCMWMyVnlJR2hoY3lCamIyMXdiR1YwWldRZ2RHaGxYRzRnSUM4dklDQXFJRzl1WW05aGNtUnBibWNnY0hKdlkyVnpjeTVjYmlBZ0x5OGdJQ292WEc0Z0lHRnplVzVqSUdOdmJYQnNaWFJsVDI1aWIyRnlaR2x1WnlncElIdGNiaUFnSUNCMGFHbHpMbk4wYjNKbExuVndaR0YwWlZOMFlYUmxLSHRjYmlBZ0lDQWdJR052YlhCc1pYUmxaRTl1WW05aGNtUnBibWM2SUhSeWRXVXNYRzRnSUNBZ2ZTazdYRzRnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVTJWMGRHVnlJR1p2Y2lCMGFHVWdZR1pwY25OMFZHbHRaVVpzYjNkVWVYQmxZQ0J3Y205d1pYSjBlVnh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnZEhsd1pTQXRJRWx1WkdsallYUmxjeUIwYUdVZ2RIbHdaU0J2WmlCbWFYSnpkQ0IwYVcxbElHWnNiM2NnTFNCamNtVmhkR1VnYjNJZ2FXMXdiM0owSUMwZ2RHaGxJSFZ6WlhJZ2QybHphR1Z6SUhSdklHWnZiR3h2ZDF4dUlDQWdLaTljYmlBZ2MyVjBSbWx5YzNSVWFXMWxSbXh2ZDFSNWNHVW9kSGx3WlNrZ2UxeHVJQ0FnSUhSb2FYTXVjM1J2Y21VdWRYQmtZWFJsVTNSaGRHVW9leUJtYVhKemRGUnBiV1ZHYkc5M1ZIbHdaVG9nZEhsd1pTQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pXZHBjM1JsY21sdVp5QmhJSE5wZEdVZ1lYTWdhR0YyYVc1bklHbHVhWFJwWVhSbFpDQnZibUp2WVhKa2FXNW5YRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JzYjJOaGRHbHZiaUF0SUZSb1pTQnNiMk5oZEdsdmJpQnZaaUIwYUdVZ2MybDBaU0J5WldkcGMzUmxjbWx1WjF4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkR0ZpU1dRZ0xTQlVhR1VnYVdRZ2IyWWdkR2hsSUhSaFlpQnlaV2RwYzNSbGNtbHVaMXh1SUNBZ0tpOWNiaUFnY21WbmFYTjBaWEpQYm1KdllYSmthVzVuSUQwZ1lYTjVibU1nS0d4dlkyRjBhVzl1TENCMFlXSkpaQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2t1WTI5dGNHeGxkR1ZrVDI1aWIyRnlaR2x1WnlrZ2UxeHVJQ0FnSUNBZ2JHOW5MbVJsWW5WbktDZEpaMjV2Y21sdVp5QnlaV2RwYzNSbGNrOXVZbTloY21ScGJtYzdJSFZ6WlhJZ1lXeHlaV0ZrZVNCdmJtSnZZWEprWldRbktUdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdZMjl1YzNRZ2IyNWliMkZ5WkdsdVoxUmhZbk1nUFNCN0lDNHVMblJvYVhNdWMzUnZjbVV1WjJWMFUzUmhkR1VvS1M1dmJtSnZZWEprYVc1blZHRmljeUI5TzF4dUlDQWdJR2xtSUNnaGIyNWliMkZ5WkdsdVoxUmhZbk5iYkc5allYUnBiMjVkSUh4OElHOXVZbTloY21ScGJtZFVZV0p6VzJ4dlkyRjBhVzl1WFNBaFBUMGdkR0ZpU1dRcElIdGNiaUFnSUNBZ0lHeHZaeTVrWldKMVp5aGNiaUFnSUNBZ0lDQWdZRkpsWjJsemRHVnlhVzVuSUc5dVltOWhjbVJwYm1jZ2RHRmlJR0YwSUd4dlkyRjBhVzl1SUNja2UyeHZZMkYwYVc5dWZTY2dkMmwwYUNCMFlXSkpaQ0FuSkh0MFlXSkpaSDBuWUN4Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCdmJtSnZZWEprYVc1blZHRmljMXRzYjJOaGRHbHZibDBnUFNCMFlXSkpaRHRjYmlBZ0lDQWdJSFJvYVhNdWMzUnZjbVV1ZFhCa1lYUmxVM1JoZEdVb2V5QnZibUp2WVhKa2FXNW5WR0ZpY3lCOUtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1OVhHNGlMQ0pwYlhCdmNuUWdibUZ1YjJsa0lHWnliMjBnSjI1aGJtOXBaQ2M3WEc1cGJYQnZjblFnZTF4dUlDQkRZWFpsWVhSVWVYQmxjeXhjYmlBZ1VtVnpkSEpwWTNSbFpFMWxkR2h2WkhNc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZjR1Z5YldsemMybHZibk1uTzF4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1oyVjBVR1Z5YldsemMybHZia0poWTJ0bmNtOTFibVJCY0dsTlpYUm9iMlJ6S0hCbGNtMXBjM05wYjI1RGIyNTBjbTlzYkdWeUtTQjdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdZV1JrVUdWeWJXbDBkR1ZrUVdOamIzVnVkRG9nS0c5eWFXZHBiaXdnWVdOamIzVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ1kyOXVjM1FnWlhocGMzUnBibWNnUFNCd1pYSnRhWE56YVc5dVEyOXVkSEp2Ykd4bGNpNW5aWFJEWVhabFlYUW9YRzRnSUNBZ0lDQWdJRzl5YVdkcGJpeGNiaUFnSUNBZ0lDQWdVbVZ6ZEhKcFkzUmxaRTFsZEdodlpITXVaWFJvWDJGalkyOTFiblJ6TEZ4dUlDQWdJQ0FnSUNCRFlYWmxZWFJVZVhCbGN5NXlaWE4wY21samRGSmxkSFZ5Ym1Wa1FXTmpiM1Z1ZEhNc1hHNGdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQnBaaUFvWlhocGMzUnBibWN1ZG1Gc2RXVXVhVzVqYkhWa1pYTW9ZV05qYjNWdWRDa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J3WlhKdGFYTnphVzl1UTI5dWRISnZiR3hsY2k1MWNHUmhkR1ZEWVhabFlYUW9YRzRnSUNBZ0lDQWdJRzl5YVdkcGJpeGNiaUFnSUNBZ0lDQWdVbVZ6ZEhKcFkzUmxaRTFsZEdodlpITXVaWFJvWDJGalkyOTFiblJ6TEZ4dUlDQWdJQ0FnSUNCRFlYWmxZWFJVZVhCbGN5NXlaWE4wY21samRGSmxkSFZ5Ym1Wa1FXTmpiM1Z1ZEhNc1hHNGdJQ0FnSUNBZ0lGc3VMaTVsZUdsemRHbHVaeTUyWVd4MVpTd2dZV05qYjNWdWRGMHNYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnlaVzF2ZG1WUVpYSnRhWFIwWldSQlkyTnZkVzUwT2lBb2IzSnBaMmx1TENCaFkyTnZkVzUwS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCbGVHbHpkR2x1WnlBOUlIQmxjbTFwYzNOcGIyNURiMjUwY205c2JHVnlMbWRsZEVOaGRtVmhkQ2hjYmlBZ0lDQWdJQ0FnYjNKcFoybHVMRnh1SUNBZ0lDQWdJQ0JTWlhOMGNtbGpkR1ZrVFdWMGFHOWtjeTVsZEdoZllXTmpiM1Z1ZEhNc1hHNGdJQ0FnSUNBZ0lFTmhkbVZoZEZSNWNHVnpMbkpsYzNSeWFXTjBVbVYwZFhKdVpXUkJZMk52ZFc1MGN5eGNiaUFnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJR2xtSUNnaFpYaHBjM1JwYm1jdWRtRnNkV1V1YVc1amJIVmtaWE1vWVdOamIzVnVkQ2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCamIyNXpkQ0J5WlcxaGFXNXBibWRCWTJOdmRXNTBjeUE5SUdWNGFYTjBhVzVuTG5aaGJIVmxMbVpwYkhSbGNpaGNiaUFnSUNBZ0lDQWdLR1Y0YVhOMGFXNW5RV05qYjNWdWRDa2dQVDRnWlhocGMzUnBibWRCWTJOdmRXNTBJQ0U5UFNCaFkyTnZkVzUwTEZ4dUlDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ2FXWWdLSEpsYldGcGJtbHVaMEZqWTI5MWJuUnpMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQndaWEp0YVhOemFXOXVRMjl1ZEhKdmJHeGxjaTV5WlhadmEyVlFaWEp0YVhOemFXOXVLRnh1SUNBZ0lDQWdJQ0FnSUc5eWFXZHBiaXhjYmlBZ0lDQWdJQ0FnSUNCU1pYTjBjbWxqZEdWa1RXVjBhRzlrY3k1bGRHaGZZV05qYjNWdWRITXNYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J3WlhKdGFYTnphVzl1UTI5dWRISnZiR3hsY2k1MWNHUmhkR1ZEWVhabFlYUW9YRzRnSUNBZ0lDQWdJQ0FnYjNKcFoybHVMRnh1SUNBZ0lDQWdJQ0FnSUZKbGMzUnlhV04wWldSTlpYUm9iMlJ6TG1WMGFGOWhZMk52ZFc1MGN5eGNiaUFnSUNBZ0lDQWdJQ0JEWVhabFlYUlVlWEJsY3k1eVpYTjBjbWxqZEZKbGRIVnlibVZrUVdOamIzVnVkSE1zWEc0Z0lDQWdJQ0FnSUNBZ2NtVnRZV2x1YVc1blFXTmpiM1Z1ZEhNc1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lISmxjWFZsYzNSQlkyTnZkVzUwYzFCbGNtMXBjM05wYjI1WGFYUm9TV1E2SUdGemVXNWpJQ2h2Y21sbmFXNHBJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR2xrSUQwZ2JtRnViMmxrS0NrN1hHNGdJQ0FnSUNCd1pYSnRhWE56YVc5dVEyOXVkSEp2Ykd4bGNpNXlaWEYxWlhOMFVHVnliV2x6YzJsdmJuTW9YRzRnSUNBZ0lDQWdJSHNnYjNKcFoybHVJSDBzWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQmxkR2hmWVdOamIzVnVkSE02SUh0OUxGeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I3SUdsa0lIMHNYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHbGtPMXh1SUNBZ0lIMHNYRzRnSUgwN1hHNTlYRzRpTENKcGJYQnZjblFnZXlCRFlYWmxZWFJOZFhSaGRHOXlUM0JsY21GMGFXOXVJSDBnWm5KdmJTQW5RRzFsZEdGdFlYTnJMM0JsY20xcGMzTnBiMjR0WTI5dWRISnZiR3hsY2ljN1hHNXBiWEJ2Y25RZ2V5QkRZWFpsWVhSVWVYQmxjeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12Y0dWeWJXbHpjMmx2Ym5Nbk8xeHVYRzR2S2lwY2JpQXFJRVpoWTNSdmNtbGxjeUIwYUdGMElHTnZibk4wY25WamRDQmpZWFpsWVhRZ2JYVjBZWFJ2Y2lCbWRXNWpkR2x2Ym5NZ2RHaGhkQ0JoY21VZ2NHRnpjMlZrSUhSdlhHNGdLaUJRWlhKdGFYTnphVzl1UTI5dWRISnZiR3hsY2k1MWNHUmhkR1ZRWlhKdGFYTnphVzl1YzBKNVEyRjJaV0YwTGx4dUlDb3ZYRzVsZUhCdmNuUWdZMjl1YzNRZ1EyRjJaV0YwVFhWMFlYUnZja1poWTNSdmNtbGxjeUE5SUh0Y2JpQWdXME5oZG1WaGRGUjVjR1Z6TG5KbGMzUnlhV04wVW1WMGRYSnVaV1JCWTJOdmRXNTBjMTA2SUh0Y2JpQWdJQ0J5WlcxdmRtVkJZMk52ZFc1MExGeHVJQ0I5TEZ4dWZUdGNibHh1THlvcVhHNGdLaUJTWlcxdmRtVnpJSFJvWlNCMFlYSm5aWFFnWVdOamIzVnVkQ0JtY205dElIUm9aU0IyWVd4MVpTQmhjbkpoZVhNZ2IyWWdZV3hzWEc0Z0tpQmdjbVZ6ZEhKcFkzUlNaWFIxY201bFpFRmpZMjkxYm5SellDQmpZWFpsWVhSekxpQk9ieTF2Y0hNZ2FXWWdkR2hsSUhSaGNtZGxkQ0JoWTJOdmRXNTBJR2x6SUc1dmRDQnBibHh1SUNvZ2RHaGxJR0Z5Y21GNUxDQmhibVFnY21WMmIydGxjeUIwYUdVZ2NHRnlaVzUwSUhCbGNtMXBjM05wYjI0Z2FXWWdhWFFuY3lCMGFHVWdiMjVzZVNCaFkyTnZkVzUwSUdsdVhHNGdLaUIwYUdVZ1lYSnlZWGt1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSFJoY21kbGRFRmpZMjkxYm5RZ0xTQlVhR1VnWVdSa2NtVnpjeUJ2WmlCMGFHVWdZV05qYjNWdWRDQjBieUJ5WlcxdmRtVWdabkp2YlZ4dUlDb2dZV3hzSUdGalkyOTFiblJ6SUhCbGNtMXBjM05wYjI1ekxseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZGJYWDBnWlhocGMzUnBibWRCWTJOdmRXNTBjeUF0SUZSb1pTQmhZMk52ZFc1MElHRmtaSEpsYzNNZ1lYSnlZWGtnWm5KdmJTQjBhR1ZjYmlBcUlHRmpZMjkxYm5RZ2NHVnliV2x6YzJsdmJuTXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlISmxiVzkyWlVGalkyOTFiblFvZEdGeVoyVjBRV05qYjNWdWRDd2daWGhwYzNScGJtZEJZMk52ZFc1MGN5a2dlMXh1SUNCamIyNXpkQ0J1WlhkQlkyTnZkVzUwY3lBOUlHVjRhWE4wYVc1blFXTmpiM1Z1ZEhNdVptbHNkR1Z5S0Z4dUlDQWdJQ2hoWkdSeVpYTnpLU0E5UGlCaFpHUnlaWE56SUNFOVBTQjBZWEpuWlhSQlkyTnZkVzUwTEZ4dUlDQXBPMXh1WEc0Z0lHbG1JQ2h1WlhkQlkyTnZkVzUwY3k1c1pXNW5kR2dnUFQwOUlHVjRhWE4wYVc1blFXTmpiM1Z1ZEhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSHNnYjNCbGNtRjBhVzl1T2lCRFlYWmxZWFJOZFhSaGRHOXlUM0JsY21GMGFXOXVMbTV2YjNBZ2ZUdGNiaUFnZlNCbGJITmxJR2xtSUNodVpYZEJZMk52ZFc1MGN5NXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lHOXdaWEpoZEdsdmJqb2dRMkYyWldGMFRYVjBZWFJ2Y2s5d1pYSmhkR2x2Ymk1MWNHUmhkR1ZXWVd4MVpTeGNiaUFnSUNBZ0lIWmhiSFZsT2lCdVpYZEJZMk52ZFc1MGN5eGNiaUFnSUNCOU8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCN0lHOXdaWEpoZEdsdmJqb2dRMkYyWldGMFRYVjBZWFJ2Y2s5d1pYSmhkR2x2Ymk1eVpYWnZhMlZRWlhKdGFYTnphVzl1SUgwN1hHNTlYRzRpTENKbGVIQnZjblFnWTI5dWMzUWdWMEZNVEVWVVgxQlNSVVpKV0NBOUlDZDNZV3hzWlhSZkp6dGNibHh1Wlhod2IzSjBJR052Ym5OMElFNVBWRWxHU1VOQlZFbFBUbDlPUVUxRlV5QTlJSHRjYmlBZ1lXTmpiM1Z1ZEhORGFHRnVaMlZrT2lBbmJXVjBZVzFoYzJ0ZllXTmpiM1Z1ZEhORGFHRnVaMlZrSnl4Y2JpQWdkVzVzYjJOclUzUmhkR1ZEYUdGdVoyVmtPaUFuYldWMFlXMWhjMnRmZFc1c2IyTnJVM1JoZEdWRGFHRnVaMlZrSnl4Y2JpQWdZMmhoYVc1RGFHRnVaMlZrT2lBbmJXVjBZVzFoYzJ0ZlkyaGhhVzVEYUdGdVoyVmtKeXhjYm4wN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCTVQwZGZTVWRPVDFKRlgwMUZWRWhQUkZNZ1BTQmJYRzRnSUNkM1lXeHNaWFJmY21WbmFYTjBaWEpQYm1KdllYSmthVzVuSnl4Y2JpQWdKM2RoYkd4bGRGOTNZWFJqYUVGemMyVjBKeXhjYmwwN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCTVQwZGZUVVZVU0U5RVgxUlpVRVZUSUQwZ2UxeHVJQ0J5WlhOMGNtbGpkR1ZrT2lBbmNtVnpkSEpwWTNSbFpDY3NYRzRnSUdsdWRHVnlibUZzT2lBbmFXNTBaWEp1WVd3bkxGeHVmVHRjYmx4dUx5b3FYRzRnS2lCVWFHVWdjR1Z5YldsemMybHZiaUJoWTNScGRtbDBlU0JzYjJjZ2MybDZaU0JzYVcxcGRDNWNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJRXhQUjE5TVNVMUpWQ0E5SURFd01EdGNiaUlzSW1WNGNHOXlkQ0FxSUdaeWIyMGdKeTR2WTJGMlpXRjBMVzExZEdGMGIzSnpKenRjYm1WNGNHOXlkQ0FxSUdaeWIyMGdKeTR2WW1GamEyZHliM1Z1WkMxaGNHa25PMXh1Wlhod2IzSjBJQ29nWm5KdmJTQW5MaTlsYm5WdGN5YzdYRzVsZUhCdmNuUWdLaUJtY205dElDY3VMM0JsY20xcGMzTnBiMjR0Ykc5bkp6dGNibVY0Y0c5eWRDQXFJR1p5YjIwZ0p5NHZjM0JsWTJsbWFXTmhkR2x2Ym5Nbk8xeHVaWGh3YjNKMElDb2dabkp2YlNBbkxpOXpaV3hsWTNSdmNuTW5PMXh1SWl3aWFXMXdiM0owSUhzZ1QySnpaWEoyWVdKc1pWTjBiM0psSUgwZ1puSnZiU0FuUUcxbGRHRnRZWE5yTDI5aWN5MXpkRzl5WlNjN1hHNXBiWEJ2Y25RZ2V5QkRZWFpsWVhSVWVYQmxjeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12Y0dWeWJXbHpjMmx2Ym5Nbk8xeHVhVzF3YjNKMElIdGNiaUFnVEU5SFgwbEhUazlTUlY5TlJWUklUMFJUTEZ4dUlDQk1UMGRmVEVsTlNWUXNYRzRnSUV4UFIxOU5SVlJJVDBSZlZGbFFSVk1zWEc0Z0lGZEJURXhGVkY5UVVrVkdTVmdzWEc1OUlHWnliMjBnSnk0dlpXNTFiWE1uTzF4dVhHNHZLaXBjYmlBcUlFTnZiblJ5YjJ4c1pYSWdkMmwwYUNCdGFXUmtiR1YzWVhKbElHWnZjaUJzYjJkbmFXNW5JSEpsY1hWbGMzUnpJR0Z1WkNCeVpYTndiMjV6WlhNZ2RHOGdjbVZ6ZEhKcFkzUmxaRnh1SUNvZ1lXNWtJSEJsY20xcGMzTnBiMjV6TFhKbGJHRjBaV1FnYldWMGFHOWtjeTVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZCbGNtMXBjM05wYjI1TWIyZERiMjUwY205c2JHVnlJSHRjYmlBZ0x5b3FYRzRnSUNBcUlFQndZWEpoYlNCN2V5QnlaWE4wY21samRHVmtUV1YwYUc5a2N6b2dVMlYwUEhOMGNtbHVaejRzSUdsdWFYUlRkR0YwWlRvZ1VtVmpiM0prUEhOMGNtbHVaeXdnZFc1cmJtOTNiajRnZlgwZ2IzQjBhVzl1Y3lBdElFOXdkR2x2Ym5NZ1ltRm5MbHh1SUNBZ0tpOWNiaUFnWTI5dWMzUnlkV04wYjNJb2V5QnlaWE4wY21samRHVmtUV1YwYUc5a2N5d2dhVzVwZEZOMFlYUmxJSDBwSUh0Y2JpQWdJQ0IwYUdsekxuSmxjM1J5YVdOMFpXUk5aWFJvYjJSeklEMGdjbVZ6ZEhKcFkzUmxaRTFsZEdodlpITTdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTQTlJRzVsZHlCUFluTmxjblpoWW14bFUzUnZjbVVvZTF4dUlDQWdJQ0FnY0dWeWJXbHpjMmx2YmtocGMzUnZjbms2SUh0OUxGeHVJQ0FnSUNBZ2NHVnliV2x6YzJsdmJrRmpkR2wyYVhSNVRHOW5PaUJiWFN4Y2JpQWdJQ0FnSUM0dUxtbHVhWFJUZEdGMFpTeGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRZ2RHaGxJSEpsYzNSeWFXTjBaV1FnYldWMGFHOWtJR0ZqZEdsMmFYUjVJR3h2Wnk1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMEZ5Y21GNVBHOWlhbVZqZEQ1OUlGUm9aU0JoWTNScGRtbDBlU0JzYjJjdVhHNGdJQ0FxTDF4dUlDQm5aWFJCWTNScGRtbDBlVXh2WnlncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXpkRzl5WlM1blpYUlRkR0YwWlNncExuQmxjbTFwYzNOcGIyNUJZM1JwZG1sMGVVeHZaenRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVmNHUmhkR1VnZEdobElISmxjM1J5YVdOMFpXUWdiV1YwYUc5a0lHRmpkR2wyYVhSNUlHeHZaeTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0QmNuSmhlVHh2WW1wbFkzUStmU0JzYjJkeklDMGdWR2hsSUc1bGR5QmhZM1JwZG1sMGVTQnNiMmNnWVhKeVlYa3VYRzRnSUNBcUwxeHVJQ0IxY0dSaGRHVkJZM1JwZG1sMGVVeHZaeWhzYjJkektTQjdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3SUhCbGNtMXBjM05wYjI1QlkzUnBkbWwwZVV4dlp6b2diRzluY3lCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhRZ2RHaGxJSEJsY20xcGMzTnBiMjRnYUdsemRHOXllU0JzYjJjdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHR2WW1wbFkzUjlJRlJvWlNCd1pYSnRhWE56YVc5dWN5Qm9hWE4wYjNKNUlHeHZaeTVjYmlBZ0lDb3ZYRzRnSUdkbGRFaHBjM1J2Y25rb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tTNXdaWEp0YVhOemFXOXVTR2x6ZEc5eWVUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJWY0dSaGRHVWdkR2hsSUhCbGNtMXBjM05wYjI0Z2FHbHpkRzl5ZVNCc2IyY3VYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0JvYVhOMGIzSjVJQzBnVkdobElHNWxkeUJ3WlhKdGFYTnphVzl1Y3lCb2FYTjBiM0o1SUd4dlp5QnZZbXBsWTNRdVhHNGdJQ0FxTDF4dUlDQjFjR1JoZEdWSWFYTjBiM0o1S0docGMzUnZjbmtwSUh0Y2JpQWdJQ0IwYUdsekxuTjBiM0psTG5Wd1pHRjBaVk4wWVhSbEtIc2djR1Z5YldsemMybHZia2hwYzNSdmNuazZJR2hwYzNSdmNua2dmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1ZYQmtZWFJsY3lCMGFHVWdaWGh3YjNObFpDQmhZMk52ZFc1MElHaHBjM1J2Y25rZ1ptOXlJSFJvWlNCbmFYWmxiaUJ2Y21sbmFXNHVYRzRnSUNBcUlGTmxkSE1nZEdobElDZHNZWE4wSUhObFpXNG5JSFJwYldVZ2RHOGdSR0YwWlM1dWIzY29LU0JtYjNJZ2RHaGxJR2RwZG1WdUlHRmpZMjkxYm5SekxseHVJQ0FnS2lCRWIyVnpJQ29xYm05MEtpb2dkWEJrWVhSbElIUm9aU0FuYkdGemRFRndjSEp2ZG1Wa0p5QjBhVzFsSUdadmNpQjBhR1VnY0dWeWJXbHpjMmx2YmlCcGRITmxiR1l1WEc0Z0lDQXFJRkpsZEhWeWJuTWdhV1lnZEdobElHRmpZMjkxYm5SeklHRnljbUY1SUdseklHVnRjSFI1TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2IzSnBaMmx1SUMwZ1ZHaGxJRzl5YVdkcGJpQjBhR0YwSUhSb1pTQmhZMk52ZFc1MGN5QmhjbVVnWlhod2IzTmxaQ0IwYnk1Y2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVUeHpkSEpwYm1jK2ZTQmhZMk52ZFc1MGN5QXRJRlJvWlNCaFkyTnZkVzUwY3k1Y2JpQWdJQ292WEc0Z0lIVndaR0YwWlVGalkyOTFiblJ6U0dsemRHOXllU2h2Y21sbmFXNHNJR0ZqWTI5MWJuUnpLU0I3WEc0Z0lDQWdhV1lnS0dGalkyOTFiblJ6TG14bGJtZDBhQ0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJR0ZqWTI5MWJuUlViMVJwYldWTllYQWdQU0JuWlhSQlkyTnZkVzUwVkc5VWFXMWxUV0Z3S0dGalkyOTFiblJ6TENCRVlYUmxMbTV2ZHlncEtUdGNibHh1SUNBZ0lIUm9hWE11WTI5dGJXbDBUbVYzU0dsemRHOXllU2h2Y21sbmFXNHNJSHRjYmlBZ0lDQWdJR1YwYUY5aFkyTnZkVzUwY3pvZ2UxeHVJQ0FnSUNBZ0lDQmhZMk52ZFc1MGN6b2dZV05qYjNWdWRGUnZWR2x0WlUxaGNDeGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxJR0VnY0dWeWJXbHpjMmx2Ym5NZ2JHOW5JRzFwWkdSc1pYZGhjbVV1SUZKbFkyOXlaSE1nY0dWeWJXbHpjMmx2Ym5NZ1lXTjBhWFpwZEhrZ1lXNWtJR2hwYzNSdmNuazZYRzRnSUNBcVhHNGdJQ0FxSUVGamRHbDJhWFI1T2lCeVpYRjFaWE4wY3lCaGJtUWdjbVZ6Y0c5dWMyVnpJR1p2Y2lCeVpYTjBjbWxqZEdWa0lHRnVaQ0J0YjNOMElIZGhiR3hsZEY4Z2JXVjBhRzlrY3k1Y2JpQWdJQ3BjYmlBZ0lDb2dTR2x6ZEc5eWVUb2dabTl5SUdWaFkyZ2diM0pwWjJsdUxDQjBhR1VnYkdGemRDQjBhVzFsSUdFZ2NHVnliV2x6YzJsdmJpQjNZWE1nWjNKaGJuUmxaQ3dnYVc1amJIVmthVzVuWEc0Z0lDQXFJSGRvYVdOb0lHRmpZMjkxYm5SeklIZGxjbVVnWlhod2IzTmxaQ3dnYVdZZ1lXNTVMbHh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1NuTnZibEp3WTBWdVoybHVaVTFwWkdSc1pYZGhjbVY5SUZSb1pTQndaWEp0YVhOemFXOXVjeUJzYjJjZ2JXbGtaR3hsZDJGeVpTNWNiaUFnSUNvdlhHNGdJR055WldGMFpVMXBaR1JzWlhkaGNtVW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlDaHlaWEVzSUhKbGN5d2dibVY0ZEN3Z1gyVnVaQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2JHVjBJR0ZqZEdsMmFYUjVSVzUwY25rc0lISmxjWFZsYzNSbFpFMWxkR2h2WkhNN1hHNGdJQ0FnSUNCamIyNXpkQ0I3SUc5eWFXZHBiaXdnYldWMGFHOWtJSDBnUFNCeVpYRTdYRzRnSUNBZ0lDQmpiMjV6ZENCcGMwbHVkR1Z5Ym1Gc0lEMGdiV1YwYUc5a0xuTjBZWEowYzFkcGRHZ29WMEZNVEVWVVgxQlNSVVpKV0NrN1hHNWNiaUFnSUNBZ0lDOHZJSGRsSUc5dWJIa2diRzluSUdObGNuUmhhVzRnYldWMGFHOWtjMXh1SUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBaFRFOUhYMGxIVGs5U1JWOU5SVlJJVDBSVExtbHVZMngxWkdWektHMWxkR2h2WkNrZ0ppWmNiaUFnSUNBZ0lDQWdLR2x6U1c1MFpYSnVZV3dnZkh3Z2RHaHBjeTV5WlhOMGNtbGpkR1ZrVFdWMGFHOWtjeTVvWVhNb2JXVjBhRzlrS1NsY2JpQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQmhZM1JwZG1sMGVVVnVkSEo1SUQwZ2RHaHBjeTVzYjJkU1pYRjFaWE4wS0hKbGNTd2dhWE5KYm5SbGNtNWhiQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLRzFsZEdodlpDQTlQVDBnWUNSN1YwRk1URVZVWDFCU1JVWkpXSDF5WlhGMVpYTjBVR1Z5YldsemMybHZibk5nS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnWjJWMElIUm9aU0JqYjNKeVpYTndiMjVrYVc1bklHMWxkR2h2WkhNZ1puSnZiU0IwYUdVZ2NtVnhkV1Z6ZEdWa0lIQmxjbTFwYzNOcGIyNXpJSE52WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkR2hoZENCM1pTQmpZVzRnY21WamIzSmtJSEJsY20xcGMzTnBiMjV6SUdocGMzUnZjbmxjYmlBZ0lDQWdJQ0FnSUNCeVpYRjFaWE4wWldSTlpYUm9iMlJ6SUQwZ2RHaHBjeTVuWlhSU1pYRjFaWE4wWldSTlpYUm9iMlJ6S0hKbGNTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvYldWMGFHOWtJRDA5UFNBblpYUm9YM0psY1hWbGMzUkJZMk52ZFc1MGN5Y3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1pYUm9YM0psY1hWbGMzUkJZMk52ZFc1MGN5QnBjeUJoSUhOd1pXTnBZV3dnWTJGelpUc2dkMlVnYm1WbFpDQjBieUJsZUhSeVlXTjBJSFJvWlNCaFkyTnZkVzUwYzF4dUlDQWdJQ0FnSUNBdkx5Qm1jbTl0SUdsMFhHNGdJQ0FnSUNBZ0lHRmpkR2wyYVhSNVJXNTBjbmtnUFNCMGFHbHpMbXh2WjFKbGNYVmxjM1FvY21WeExDQnBjMGx1ZEdWeWJtRnNLVHRjYmlBZ0lDQWdJQ0FnY21WeGRXVnpkR1ZrVFdWMGFHOWtjeUE5SUZzblpYUm9YMkZqWTI5MWJuUnpKMTA3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0F2THlCdWJ5MXZjRnh1SUNBZ0lDQWdJQ0J1WlhoMEtDazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnWTJGc2JDQnVaWGgwSUhkcGRHZ2dZU0J5WlhSMWNtNGdhR0Z1Wkd4bGNpQm1iM0lnWTJGd2RIVnlhVzVuSUhSb1pTQnlaWE53YjI1elpWeHVJQ0FnSUNBZ2JtVjRkQ2dvWTJJcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkR2x0WlNBOUlFUmhkR1V1Ym05M0tDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJHOW5VbVZ6Y0c5dWMyVW9ZV04wYVhacGRIbEZiblJ5ZVN3Z2NtVnpMQ0IwYVcxbEtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2NtVnhkV1Z6ZEdWa1RXVjBhRzlrY3lBbUppQWhjbVZ6TG1WeWNtOXlJQ1ltSUhKbGN5NXlaWE4xYkhRcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCaGJua2djR1Z5YldsemMybHZibk1nYjNJZ1lXTmpiM1Z1ZEhNZ1kyaGhibWRsY3lCM2FXeHNJR0psSUhKbFkyOXlaR1ZrSUc5dUlIUm9aU0J5WlhOd2IyNXpaU3hjYmlBZ0lDQWdJQ0FnSUNBdkx5QnpieUIzWlNCdmJteDVJR3h2WnlCd1pYSnRhWE56YVc5dWN5Qm9hWE4wYjNKNUlHaGxjbVZjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbXh2WjFCbGNtMXBjM05wYjI1elNHbHpkRzl5ZVNoY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsY1hWbGMzUmxaRTFsZEdodlpITXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNtbG5hVzRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE11Y21WemRXeDBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHbHRaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWxkR2h2WkNBOVBUMGdKMlYwYUY5eVpYRjFaWE4wUVdOamIzVnVkSE1uTEZ4dUlDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTJJb0tUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMDdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxjeUJoYm1RZ1kyOXRiV2wwY3lCaGJpQmhZM1JwZG1sMGVTQnNiMmNnWlc1MGNua3NJSGRwZEdodmRYUWdjbVZ6Y0c5dWMyVWdaR0YwWVM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlISmxjWFZsYzNRZ0xTQlVhR1VnY21WeGRXVnpkQ0J2WW1wbFkzUXVYRzRnSUNBcUlFQndZWEpoYlNCN1ltOXZiR1ZoYm4wZ2FYTkpiblJsY201aGJDQXRJRmRvWlhSb1pYSWdkR2hsSUhKbGNYVmxjM1FnYVhNZ2FXNTBaWEp1WVd3dVhHNGdJQ0FxTDF4dUlDQnNiMmRTWlhGMVpYTjBLSEpsY1hWbGMzUXNJR2x6U1c1MFpYSnVZV3dwSUh0Y2JpQWdJQ0JqYjI1emRDQmhZM1JwZG1sMGVVVnVkSEo1SUQwZ2UxeHVJQ0FnSUNBZ2FXUTZJSEpsY1hWbGMzUXVhV1FzWEc0Z0lDQWdJQ0J0WlhSb2IyUTZJSEpsY1hWbGMzUXViV1YwYUc5a0xGeHVJQ0FnSUNBZ2JXVjBhRzlrVkhsd1pUb2dhWE5KYm5SbGNtNWhiRnh1SUNBZ0lDQWdJQ0EvSUV4UFIxOU5SVlJJVDBSZlZGbFFSVk11YVc1MFpYSnVZV3hjYmlBZ0lDQWdJQ0FnT2lCTVQwZGZUVVZVU0U5RVgxUlpVRVZUTG5KbGMzUnlhV04wWldRc1hHNGdJQ0FnSUNCdmNtbG5hVzQ2SUhKbGNYVmxjM1F1YjNKcFoybHVMRnh1SUNBZ0lDQWdjbVZ4ZFdWemRGUnBiV1U2SUVSaGRHVXVibTkzS0Nrc1hHNGdJQ0FnSUNCeVpYTndiMjV6WlZScGJXVTZJRzUxYkd3c1hHNGdJQ0FnSUNCemRXTmpaWE56T2lCdWRXeHNMRnh1SUNBZ0lIMDdYRzRnSUNBZ2RHaHBjeTVqYjIxdGFYUk9aWGRCWTNScGRtbDBlU2hoWTNScGRtbDBlVVZ1ZEhKNUtUdGNiaUFnSUNCeVpYUjFjbTRnWVdOMGFYWnBkSGxGYm5SeWVUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCWkdSeklISmxjM0J2Ym5ObElHUmhkR0VnZEc4Z1lXNGdaWGhwYzNScGJtY2dZV04wYVhacGRIa2diRzluSUdWdWRISjVMbHh1SUNBZ0tpQkZiblJ5ZVNCaGMzTjFiV1ZrSUdGc2NtVmhaSGtnWTI5dGJXbDBkR1ZrSUNocExtVXVMQ0JwYmlCMGFHVWdiRzluS1M1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHVnVkSEo1SUMwZ1ZHaGxJR1Z1ZEhKNUlIUnZJR0ZrWkNCaElISmxjM0J2Ym5ObElIUnZMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2NtVnpjRzl1YzJVZ0xTQlVhR1VnY21WemNHOXVjMlVnYjJKcVpXTjBMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2RHbHRaU0F0SUU5MWRIQjFkQ0JtY205dElFUmhkR1V1Ym05M0tDbGNiaUFnSUNvdlhHNGdJR3h2WjFKbGMzQnZibk5sS0dWdWRISjVMQ0J5WlhOd2IyNXpaU3dnZEdsdFpTa2dlMXh1SUNBZ0lHbG1JQ2doWlc1MGNua2dmSHdnSVhKbGMzQnZibk5sS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnVkdobElFcFRUMDR0VWxCRElESXVNQ0J6Y0dWamFXWnBZMkYwYVc5dUlHUmxabWx1WlhNZ1hDSnpkV05qWlhOelhDSWdZbmtnZEdobElIQnlaWE5sYm1ObElHOW1YRzRnSUNBZ0x5OGdaV2wwYUdWeUlIUm9aU0JjSW5KbGMzVnNkRndpSUc5eUlGd2laWEp5YjNKY0lpQndjbTl3WlhKMGVTNGdWR2hsSUhOd1pXTnBabWxqWVhScGIyNGdabTl5WW1sa2MxeHVJQ0FnSUM4dklHSnZkR2dnY0hKdmNHVnlkR2xsY3lCbWNtOXRJR0psYVc1bklIQnlaWE5sYm5RZ2MybHRkV3gwWVc1bGIzVnpiSGtzSUdGdVpDQnZkWElnU2xOUFRpMVNVRU5jYmlBZ0lDQXZMeUJ6ZEdGamF5QnBjeUJ6Y0dWakxXTnZiWEJzYVdGdWRDQmhkQ0IwYUdVZ2RHbHRaU0J2WmlCM2NtbDBhVzVuTGx4dUlDQWdJR1Z1ZEhKNUxuTjFZMk5sYzNNZ1BTQlBZbXBsWTNRdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHlaWE53YjI1elpTd2dKM0psYzNWc2RDY3BPMXh1SUNBZ0lHVnVkSEo1TG5KbGMzQnZibk5sVkdsdFpTQTlJSFJwYldVN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMjl0YldsMElHRWdibVYzSUdWdWRISjVJSFJ2SUhSb1pTQmhZM1JwZG1sMGVTQnNiMmN1WEc0Z0lDQXFJRkpsYlc5MlpYTWdkR2hsSUc5c1pHVnpkQ0JsYm5SeWVTQm1jbTl0SUhSb1pTQnNiMmNnYVdZZ2FYUWdaWGhqWldWa2N5QjBhR1VnYkc5bklHeHBiV2wwTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ1pXNTBjbmtnTFNCVWFHVWdZV04wYVhacGRIa2diRzluSUdWdWRISjVMbHh1SUNBZ0tpOWNiaUFnWTI5dGJXbDBUbVYzUVdOMGFYWnBkSGtvWlc1MGNua3BJSHRjYmlBZ0lDQmpiMjV6ZENCc2IyZHpJRDBnZEdocGN5NW5aWFJCWTNScGRtbDBlVXh2WnlncE8xeHVYRzRnSUNBZ0x5OGdZV1JrSUc1bGR5QmxiblJ5ZVNCMGJ5QmxibVFnYjJZZ2JHOW5YRzRnSUNBZ2JHOW5jeTV3ZFhOb0tHVnVkSEo1S1R0Y2JseHVJQ0FnSUM4dklISmxiVzkyWlNCdmJHUmxjM1FnYkc5bklHbG1JR1Y0WTJWbFpHbHVaeUJ6YVhwbElHeHBiV2wwWEc0Z0lDQWdhV1lnS0d4dlozTXViR1Z1WjNSb0lENGdURTlIWDB4SlRVbFVLU0I3WEc0Z0lDQWdJQ0JzYjJkekxuTm9hV1owS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NTFjR1JoZEdWQlkzUnBkbWwwZVV4dlp5aHNiMmR6S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRjbVZoZEdVZ2JtVjNJSEJsY20xcGMzTnBiMjV6SUdocGMzUnZjbmtnYkc5bklHVnVkSEpwWlhNc0lHbG1JR0Z1ZVN3Z1lXNWtJR052YlcxcGRDQjBhR1Z0TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1UEhOMGNtbHVaejU5SUhKbGNYVmxjM1JsWkUxbGRHaHZaSE1nTFNCVWFHVWdiV1YwYUc5a0lHNWhiV1Z6SUdOdmNuSmxjM0J2Ym1ScGJtY2dkRzhnZEdobElISmxjWFZsYzNSbFpDQndaWEp0YVhOemFXOXVjeTVjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHOXlhV2RwYmlBdElGUm9aU0J2Y21sbmFXNGdiMllnZEdobElIQmxjbTFwYzNOcGIyNXpJSEpsY1hWbGMzUXVYRzRnSUNBcUlFQndZWEpoYlNCN1FYSnlZWGs4U1U5allYQk1aRU5oY0dGaWFXeHBkSGw5SUhKbGMzVnNkQ0F0SUZSb1pTQndaWEp0YVhOemFXOXVjeUJ5WlhGMVpYTjBJSEpsYzNCdmJuTmxMbkpsYzNWc2RDNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhScGJXVWdMU0JVYUdVZ2RHbHRaU0J2WmlCMGFHVWdjbVZ4ZFdWemRDd2dhUzVsTGlCRVlYUmxMbTV2ZHlncExseHVJQ0FnS2lCQWNHRnlZVzBnZTJKdmIyeGxZVzU5SUdselJYUm9VbVZ4ZFdWemRFRmpZMjkxYm5SeklDMGdWMmhsZEdobGNpQjBhR1VnY0dWeWJXbHpjMmx2Ym5NZ2NtVnhkV1Z6ZENCM1lYTWdKMlYwYUY5eVpYRjFaWE4wUVdOamIzVnVkSE1uTGx4dUlDQWdLaTljYmlBZ2JHOW5VR1Z5YldsemMybHZibk5JYVhOMGIzSjVLRnh1SUNBZ0lISmxjWFZsYzNSbFpFMWxkR2h2WkhNc1hHNGdJQ0FnYjNKcFoybHVMRnh1SUNBZ0lISmxjM1ZzZEN4Y2JpQWdJQ0IwYVcxbExGeHVJQ0FnSUdselJYUm9VbVZ4ZFdWemRFRmpZMjkxYm5SekxGeHVJQ0FwSUh0Y2JpQWdJQ0JzWlhRZ1lXTmpiM1Z1ZEhNc0lHNWxkMFZ1ZEhKcFpYTTdYRzVjYmlBZ0lDQnBaaUFvYVhORmRHaFNaWEYxWlhOMFFXTmpiM1Z1ZEhNcElIdGNiaUFnSUNBZ0lHRmpZMjkxYm5SeklEMGdjbVZ6ZFd4ME8xeHVJQ0FnSUNBZ1kyOXVjM1FnWVdOamIzVnVkRlJ2VkdsdFpVMWhjQ0E5SUdkbGRFRmpZMjkxYm5SVWIxUnBiV1ZOWVhBb1lXTmpiM1Z1ZEhNc0lIUnBiV1VwTzF4dVhHNGdJQ0FnSUNCdVpYZEZiblJ5YVdWeklEMGdlMXh1SUNBZ0lDQWdJQ0JsZEdoZllXTmpiM1Z1ZEhNNklIdGNiaUFnSUNBZ0lDQWdJQ0JoWTJOdmRXNTBjem9nWVdOamIzVnVkRlJ2VkdsdFpVMWhjQ3hjYmlBZ0lDQWdJQ0FnSUNCc1lYTjBRWEJ3Y205MlpXUTZJSFJwYldVc1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBdkx5QlNaV052Y21SeklHNWxkeUJjSW14aGMzUkJjSEJ5YjNabFpGd2lJSFJwYldWeklHWnZjaUIwYUdVZ1ozSmhiblJsWkNCd1pYSnRhWE56YVc5dWN5d2dhV1lnWVc1NUxseHVJQ0FnSUNBZ0x5OGdVM0JsWTJsaGJDQm9ZVzVrYkdsdVp5Qm1iM0lnWlhSb1gyRmpZMjkxYm5SekxDQnBiaUJ2Y21SbGNpQjBieUJ5WldOdmNtUWdkR2hsSUhScGJXVWdkR2hsWEc0Z0lDQWdJQ0F2THlCaFkyTnZkVzUwY3lCM1pYSmxJR3hoYzNRZ2MyVmxiaUJ2Y2lCaGNIQnliM1psWkNCaWVTQjBhR1VnYjNKcFoybHVMbHh1SUNBZ0lDQWdibVYzUlc1MGNtbGxjeUE5SUhKbGMzVnNkRnh1SUNBZ0lDQWdJQ0F1YldGd0tDaHdaWEp0S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIQmxjbTB1Y0dGeVpXNTBRMkZ3WVdKcGJHbDBlU0E5UFQwZ0oyVjBhRjloWTJOdmRXNTBjeWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0ZqWTI5MWJuUnpJRDBnZEdocGN5NW5aWFJCWTJOdmRXNTBjMFp5YjIxUVpYSnRhWE56YVc5dUtIQmxjbTBwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3WlhKdExuQmhjbVZ1ZEVOaGNHRmlhV3hwZEhrN1hHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJQzV5WldSMVkyVW9LR0ZqWXl3Z2JXVjBhRzlrS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1lXeHNJR0Z3Y0hKdmRtVmtJSEJsY20xcGMzTnBiMjV6SUhkcGJHd2dZbVVnYVc1amJIVmtaV1FnYVc0Z2RHaGxJSEpsYzNCdmJuTmxMRnh1SUNBZ0lDQWdJQ0FnSUM4dklHNXZkQ0JxZFhOMElIUm9aU0J1Wlhkc2VTQnlaWEYxWlhOMFpXUWdiMjVsYzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhGMVpYTjBaV1JOWlhSb2IyUnpMbWx1WTJ4MVpHVnpLRzFsZEdodlpDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0WlhSb2IyUWdQVDA5SUNkbGRHaGZZV05qYjNWdWRITW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHRmpZMjkxYm5SVWIxUnBiV1ZOWVhBZ1BTQm5aWFJCWTJOdmRXNTBWRzlVYVcxbFRXRndLR0ZqWTI5MWJuUnpMQ0IwYVcxbEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmhZMk5iYldWMGFHOWtYU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1lYTjBRWEJ3Y205MlpXUTZJSFJwYldVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXTmpiM1Z1ZEhNNklHRmpZMjkxYm5SVWIxUnBiV1ZOWVhBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmhZMk5iYldWMGFHOWtYU0E5SUhzZ2JHRnpkRUZ3Y0hKdmRtVmtPaUIwYVcxbElIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGall6dGNiaUFnSUNBZ0lDQWdmU3dnZTMwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaFBZbXBsWTNRdWEyVjVjeWh1WlhkRmJuUnlhV1Z6S1M1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQjBhR2x6TG1OdmJXMXBkRTVsZDBocGMzUnZjbmtvYjNKcFoybHVMQ0J1WlhkRmJuUnlhV1Z6S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1EyOXRiV2wwSUc1bGR5QmxiblJ5YVdWeklIUnZJSFJvWlNCd1pYSnRhWE56YVc5dWN5Qm9hWE4wYjNKNUlHeHZaeTVjYmlBZ0lDb2dUV1Z5WjJWeklIUm9aU0JvYVhOMGIzSjVJR1p2Y2lCMGFHVWdaMmwyWlc0Z2IzSnBaMmx1TENCdmRtVnlkM0pwZEdsdVp5QmxlR2x6ZEdsdVp5QmxiblJ5YVdWelhHNGdJQ0FxSUhkcGRHZ2dkR2hsSUhOaGJXVWdhMlY1SUNod1pYSnRhWE56YVc5dUlHNWhiV1VwTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2IzSnBaMmx1SUMwZ1ZHaGxJSEpsY1hWbGMzUnBibWNnYjNKcFoybHVMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2JtVjNSVzUwY21sbGN5QXRJRlJvWlNCdVpYY2daVzUwY21sbGN5QjBieUJqYjIxdGFYUXVYRzRnSUNBcUwxeHVJQ0JqYjIxdGFYUk9aWGRJYVhOMGIzSjVLRzl5YVdkcGJpd2dibVYzUlc1MGNtbGxjeWtnZTF4dUlDQWdJQzh2SUdFZ2MybHRjR3hsSUcxbGNtZGxJSFZ3WkdGMFpYTWdiVzl6ZENCd1pYSnRhWE56YVc5dWMxeHVJQ0FnSUdOdmJuTjBJR2hwYzNSdmNua2dQU0IwYUdsekxtZGxkRWhwYzNSdmNua29LVHRjYmlBZ0lDQmpiMjV6ZENCdVpYZFBjbWxuYVc1SWFYTjBiM0o1SUQwZ2UxeHVJQ0FnSUNBZ0xpNHVhR2x6ZEc5eWVWdHZjbWxuYVc1ZExGeHVJQ0FnSUNBZ0xpNHVibVYzUlc1MGNtbGxjeXhjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdMeThnWlhSb1gyRmpZMjkxYm5SeklISmxjWFZwY21WeklITndaV05wWVd3Z2FHRnVaR3hwYm1jc0lHSmxZMkYxYzJVZ2IyWWdhVzVtYjNKdFlYUnBiMjVjYmlBZ0lDQXZMeUIzWlNCemRHOXlaU0JoWW05MWRDQjBhR1VnWVdOamIzVnVkSE5jYmlBZ0lDQmpiMjV6ZENCbGVHbHpkR2x1WjBWMGFFRmpZMjkxYm5SelJXNTBjbmtnUFZ4dUlDQWdJQ0FnYUdsemRHOXllVnR2Y21sbmFXNWRJQ1ltSUdocGMzUnZjbmxiYjNKcFoybHVYUzVsZEdoZllXTmpiM1Z1ZEhNN1hHNGdJQ0FnWTI5dWMzUWdibVYzUlhSb1FXTmpiM1Z1ZEhORmJuUnllU0E5SUc1bGQwVnVkSEpwWlhNdVpYUm9YMkZqWTI5MWJuUnpPMXh1WEc0Z0lDQWdhV1lnS0dWNGFYTjBhVzVuUlhSb1FXTmpiM1Z1ZEhORmJuUnllU0FtSmlCdVpYZEZkR2hCWTJOdmRXNTBjMFZ1ZEhKNUtTQjdYRzRnSUNBZ0lDQXZMeUIzWlNCdFlYa2dhVzUwWlc1a0lIUnZJSFZ3WkdGMFpTQnFkWE4wSUhSb1pTQmhZMk52ZFc1MGN5d2dibTkwSUhSb1pTQndaWEp0YVhOemFXOXVYRzRnSUNBZ0lDQXZMeUJwZEhObGJHWmNiaUFnSUNBZ0lHTnZibk4wSUd4aGMzUkJjSEJ5YjNabFpDQTlYRzRnSUNBZ0lDQWdJRzVsZDBWMGFFRmpZMjkxYm5SelJXNTBjbmt1YkdGemRFRndjSEp2ZG1Wa0lIeDhYRzRnSUNBZ0lDQWdJR1Y0YVhOMGFXNW5SWFJvUVdOamIzVnVkSE5GYm5SeWVTNXNZWE4wUVhCd2NtOTJaV1E3WEc1Y2JpQWdJQ0FnSUM4dklHMWxjbWRsSUc5c1pDQmhibVFnYm1WM0lHVjBhRjloWTJOdmRXNTBjeUJvYVhOMGIzSjVJR1Z1ZEhKcFpYTmNiaUFnSUNBZ0lHNWxkMDl5YVdkcGJraHBjM1J2Y25rdVpYUm9YMkZqWTI5MWJuUnpJRDBnZTF4dUlDQWdJQ0FnSUNCc1lYTjBRWEJ3Y205MlpXUXNYRzRnSUNBZ0lDQWdJR0ZqWTI5MWJuUnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0xpNHVaWGhwYzNScGJtZEZkR2hCWTJOdmRXNTBjMFZ1ZEhKNUxtRmpZMjkxYm5SekxGeHVJQ0FnSUNBZ0lDQWdJQzR1TG01bGQwVjBhRUZqWTI5MWJuUnpSVzUwY25rdVlXTmpiM1Z1ZEhNc1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHaHBjM1J2Y25sYmIzSnBaMmx1WFNBOUlHNWxkMDl5YVdkcGJraHBjM1J2Y25rN1hHNWNiaUFnSUNCMGFHbHpMblZ3WkdGMFpVaHBjM1J2Y25rb2FHbHpkRzl5ZVNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSMlYwSUdGc2JDQnlaWEYxWlhOMFpXUWdiV1YwYUc5a2N5Qm1jbTl0SUdFZ2NHVnliV2x6YzJsdmJuTWdjbVZ4ZFdWemRDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJSEpsY1hWbGMzUWdMU0JVYUdVZ2NtVnhkV1Z6ZENCdlltcGxZM1F1WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRCY25KaGVUeHpkSEpwYm1jK2ZTQlVhR1VnYm1GdFpYTWdiMllnZEdobElISmxjWFZsYzNSbFpDQndaWEp0YVhOemFXOXVjeTVjYmlBZ0lDb3ZYRzRnSUdkbGRGSmxjWFZsYzNSbFpFMWxkR2h2WkhNb2NtVnhkV1Z6ZENrZ2UxeHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDRnlaWEYxWlhOMExuQmhjbUZ0Y3lCOGZGeHVJQ0FnSUNBZ0lYSmxjWFZsYzNRdWNHRnlZVzF6V3pCZElIeDhYRzRnSUNBZ0lDQjBlWEJsYjJZZ2NtVnhkV1Z6ZEM1d1lYSmhiWE5iTUYwZ0lUMDlJQ2R2WW1wbFkzUW5JSHg4WEc0Z0lDQWdJQ0JCY25KaGVTNXBjMEZ5Y21GNUtISmxjWFZsYzNRdWNHRnlZVzF6V3pCZEtWeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJQWW1wbFkzUXVhMlY1Y3loeVpYRjFaWE4wTG5CaGNtRnRjMXN3WFNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSMlYwSUhSb1pTQndaWEp0YVhSMFpXUWdZV05qYjNWdWRITWdabkp2YlNCaGJpQmxkR2hmWVdOamIzVnVkSE1nY0dWeWJXbHpjMmx2Ym5NZ2IySnFaV04wTGx4dUlDQWdLaUJTWlhSMWNtNXpJR0Z1SUdWdGNIUjVJR0Z5Y21GNUlHbG1JSFJvWlNCd1pYSnRhWE56YVc5dUlHbHpJRzV2ZENCbGRHaGZZV05qYjNWdWRITXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J3WlhKdElDMGdWR2hsSUhCbGNtMXBjM05wYjI1eklHOWlhbVZqZEM1Y2JpQWdJQ29nUUhKbGRIVnlibk1nZTBGeWNtRjVQSE4wY21sdVp6NTlJRlJvWlNCd1pYSnRhWFIwWldRZ1lXTmpiM1Z1ZEhNdVhHNGdJQ0FxTDF4dUlDQm5aWFJCWTJOdmRXNTBjMFp5YjIxUVpYSnRhWE56YVc5dUtIQmxjbTBwSUh0Y2JpQWdJQ0JwWmlBb2NHVnliUzV3WVhKbGJuUkRZWEJoWW1sc2FYUjVJQ0U5UFNBblpYUm9YMkZqWTI5MWJuUnpKeUI4ZkNBaGNHVnliUzVqWVhabFlYUnpLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdXMTA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ1lXTmpiM1Z1ZEhNZ1BTQnVaWGNnVTJWMEtDazdYRzRnSUNBZ1ptOXlJQ2hqYjI1emRDQmpZWFpsWVhRZ2IyWWdjR1Z5YlM1allYWmxZWFJ6S1NCN1hHNGdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJR05oZG1WaGRDNTBlWEJsSUQwOVBTQkRZWFpsWVhSVWVYQmxjeTV5WlhOMGNtbGpkRkpsZEhWeWJtVmtRV05qYjNWdWRITWdKaVpjYmlBZ0lDQWdJQ0FnUVhKeVlYa3VhWE5CY25KaGVTaGpZWFpsWVhRdWRtRnNkV1VwWEc0Z0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hqYjI1emRDQjJZV3gxWlNCdlppQmpZWFpsWVhRdWRtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmhZMk52ZFc1MGN5NWhaR1FvZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCYkxpNHVZV05qYjNWdWRITmRPMXh1SUNCOVhHNTlYRzVjYmk4dklHaGxiSEJsY2lCbWRXNWpkR2x2Ym5OY2JseHVMeW9xWEc0Z0tpQkhaWFFnWVNCdFlYQWdabkp2YlNCaFkyTnZkVzUwSUdGa1pISmxjM05sY3lCMGJ5QjBhR1VnWjJsMlpXNGdkR2x0WlM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVQSE4wY21sdVp6NTlJR0ZqWTI5MWJuUnpJQzBnUVc0Z1lYSnlZWGtnYjJZZ1lXUmtjbVZ6YzJWekxseHVJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJSFJwYldVZ0xTQkJJSFJwYldVc0lHVXVaeTRnUkdGMFpTNXViM2NvS1M1Y2JpQXFJRUJ5WlhSMWNtNXpJSHR2WW1wbFkzUjlJRUVnYzNSeWFXNW5PbTUxYldKbGNpQnRZWEFnYjJZZ1lXUmtjbVZ6YzJWeklIUnZJSFJwYldVdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdkbGRFRmpZMjkxYm5SVWIxUnBiV1ZOWVhBb1lXTmpiM1Z1ZEhNc0lIUnBiV1VwSUh0Y2JpQWdjbVYwZFhKdUlHRmpZMjkxYm5SekxuSmxaSFZqWlNnb1lXTmpMQ0JoWTJOdmRXNTBLU0E5UGlBb2V5QXVMaTVoWTJNc0lGdGhZMk52ZFc1MFhUb2dkR2x0WlNCOUtTd2dlMzBwTzF4dWZWeHVJaXdpYVcxd2IzSjBJSHNnWTNKbFlYUmxVMlZzWldOMGIzSWdmU0JtY205dElDZHlaWE5sYkdWamRDYzdYRzVwYlhCdmNuUWdleUJEWVhabFlYUlVlWEJsY3lCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmNHVnliV2x6YzJsdmJuTW5PMXh1WEc0dktpcGNiaUFxSUZSb2FYTWdabWxzWlNCamIyNTBZV2x1Y3lCelpXeGxZM1J2Y25NZ1ptOXlJRkJsY20xcGMzTnBiMjVEYjI1MGNtOXNiR1Z5SUhObGJHVmpkRzl5SUdWMlpXNTBYRzRnS2lCemRXSnpZM0pwY0hScGIyNXpMQ0IxYzJWa0lIUnZJR1JsZEdWamRDQjNhR1Z1WlhabGNpQmhJSE4xWW1wbFkzUW5jeUJoWTJOdmRXNTBjeUJqYUdGdVoyVWdjMjhnZEdoaGRGeHVJQ29nZDJVZ1kyRnVJRzV2ZEdsbWVTQjBhR1VnYzNWaWFtVmpkQ0IyYVdFZ2RHaGxJR0JoWTJOdmRXNTBjME5vWVc1blpXUmdJSEJ5YjNacFpHVnlJR1YyWlc1MExseHVJQ292WEc1Y2JpOHFLbHh1SUNvZ1FIQmhjbUZ0SUh0U1pXTnZjbVE4YzNSeWFXNW5MQ0JTWldOdmNtUThjM1J5YVc1bkxDQjFibXR1YjNkdVBqNTlJSE4wWVhSbElDMGdWR2hsWEc0Z0tpQlFaWEp0YVhOemFXOXVRMjl1ZEhKdmJHeGxjaUJ6ZEdGMFpTNWNiaUFxSUVCeVpYUjFjbTV6SUh0U1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQbjBnVkdobElGQmxjbTFwYzNOcGIyNURiMjUwY205c2JHVnlJSE4xWW1wbFkzUnpMbHh1SUNvdlhHNWpiMjV6ZENCblpYUlRkV0pxWldOMGN5QTlJQ2h6ZEdGMFpTa2dQVDRnYzNSaGRHVXVjM1ZpYW1WamRITTdYRzVjYmk4cUtseHVJQ29nUjJWMElIUm9aU0J3WlhKdGFYUjBaV1FnWVdOamIzVnVkSE1nWm05eUlHVmhZMmdnYzNWaWFtVmpkQ3dnYTJWNVpXUWdZbmtnYjNKcFoybHVMbHh1SUNvZ1ZHaGxJSFpoYkhWbGN5QnZaaUIwYUdVZ2NtVjBkWEp1WldRZ2JXRndJR0Z5WlNCcGJXMTFkR0ZpYkdVZ2RtRnNkV1Z6SUdaeWIyMGdkR2hsWEc0Z0tpQlFaWEp0YVhOemFXOXVRMjl1ZEhKdmJHeGxjaUJ6ZEdGMFpTNWNiaUFxWEc0Z0tpQkFjbVYwZFhKdWN5QjdUV0Z3UEhOMGNtbHVaeXdnYzNSeWFXNW5XMTArZlNCVWFHVWdZM1Z5Y21WdWRDQnZjbWxuYVc0NllXTmpiM1Z1ZEhOYlhTQnRZWEF1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiMjV6ZENCblpYUlFaWEp0YVhSMFpXUkJZMk52ZFc1MGMwSjVUM0pwWjJsdUlEMGdZM0psWVhSbFUyVnNaV04wYjNJb1hHNGdJR2RsZEZOMVltcGxZM1J6TEZ4dUlDQW9jM1ZpYW1WamRITXBJRDArSUh0Y2JpQWdJQ0J5WlhSMWNtNGdUMkpxWldOMExuWmhiSFZsY3loemRXSnFaV04wY3lrdWNtVmtkV05sS0NodmNtbG5hVzVVYjBGalkyOTFiblJ6VFdGd0xDQnpkV0pxWldOMEtTQTlQaUI3WEc0Z0lDQWdJQ0JqYjI1emRDQmpZWFpsWVhRZ1BTQnpkV0pxWldOMExuQmxjbTFwYzNOcGIyNXpQeTVsZEdoZllXTmpiM1Z1ZEhNL0xtTmhkbVZoZEhNdVptbHVaQ2hjYmlBZ0lDQWdJQ0FnS0hzZ2RIbHdaU0I5S1NBOVBpQjBlWEJsSUQwOVBTQkRZWFpsWVhSVWVYQmxjeTV5WlhOMGNtbGpkRkpsZEhWeWJtVmtRV05qYjNWdWRITXNYRzRnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0JwWmlBb1kyRjJaV0YwS1NCN1hHNGdJQ0FnSUNBZ0lHOXlhV2RwYmxSdlFXTmpiM1Z1ZEhOTllYQXVjMlYwS0hOMVltcGxZM1F1YjNKcFoybHVMQ0JqWVhabFlYUXVkbUZzZFdVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUc5eWFXZHBibFJ2UVdOamIzVnVkSE5OWVhBN1hHNGdJQ0FnZlN3Z2JtVjNJRTFoY0NncEtUdGNiaUFnZlN4Y2JpazdYRzVjYmk4cUtseHVJQ29nUjJsMlpXNGdkR2hsSUdOMWNuSmxiblFnWVc1a0lIQnlaWFpwYjNWeklHVjRjRzl6WldRZ1lXTmpiM1Z1ZEhNZ1ptOXlJR1ZoWTJnZ1VHVnliV2x6YzJsdmJrTnZiblJ5YjJ4c1pYSmNiaUFxSUhOMVltcGxZM1FzSUhKbGRIVnlibk1nWVNCdVpYY2diV0Z3SUdOdmJuUmhhVzVwYm1jZ1lXeHNJR0ZqWTI5MWJuUnpJSFJvWVhRZ2FHRjJaU0JqYUdGdVoyVmtMbHh1SUNvZ1ZHaGxJSFpoYkhWbGN5QnZaaUJsWVdOb0lHMWhjQ0J0ZFhOMElHSmxJR2x0YlhWMFlXSnNaU0IyWVd4MVpYTWdaR2x5WldOMGJIa2dabkp2YlNCMGFHVmNiaUFxSUZCbGNtMXBjM05wYjI1RGIyNTBjbTlzYkdWeUlITjBZWFJsTENCdmNpQmhiaUJsYlhCMGVTQmhjbkpoZVNCcGJuTjBZVzUwYVdGMFpXUWdhVzRnZEdocGMxeHVJQ29nWm5WdVkzUnBiMjR1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHROWVhBOGMzUnlhVzVuTENCemRISnBibWRiWFQ1OUlHNWxkMEZqWTI5MWJuUnpUV0Z3SUMwZ1ZHaGxJRzVsZHlCdmNtbG5hVzQ2WVdOamIzVnVkSE5iWFNCdFlYQXVYRzRnS2lCQWNHRnlZVzBnZTAxaGNEeHpkSEpwYm1jc0lITjBjbWx1WjF0ZFBuMGdXM0J5WlhacGIzVnpRV05qYjNWdWRITk5ZWEJkSUMwZ1ZHaGxJSEJ5WlhacGIzVnpJRzl5YVdkcGJqcGhZMk52ZFc1MGMxdGRJRzFoY0M1Y2JpQXFJRUJ5WlhSMWNtNXpJSHROWVhBOGMzUnlhVzVuTENCemRISnBibWRiWFQ1OUlGUm9aU0J2Y21sbmFXNDZZV05qYjNWdWRITmJYU0J0WVhBZ2IyWWdZMmhoYm1kbFpDQmhZMk52ZFc1MGN5NWNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR2RsZEVOb1lXNW5aV1JCWTJOdmRXNTBjeUE5SUNodVpYZEJZMk52ZFc1MGMwMWhjQ3dnY0hKbGRtbHZkWE5CWTJOdmRXNTBjMDFoY0NrZ1BUNGdlMXh1SUNCcFppQW9jSEpsZG1sdmRYTkJZMk52ZFc1MGMwMWhjQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGQwRmpZMjkxYm5SelRXRndPMXh1SUNCOVhHNWNiaUFnWTI5dWMzUWdZMmhoYm1kbFpFRmpZMjkxYm5SeklEMGdibVYzSUUxaGNDZ3BPMXh1SUNCcFppQW9ibVYzUVdOamIzVnVkSE5OWVhBZ1BUMDlJSEJ5WlhacGIzVnpRV05qYjNWdWRITk5ZWEFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZMmhoYm1kbFpFRmpZMjkxYm5Sek8xeHVJQ0I5WEc1Y2JpQWdZMjl1YzNRZ2JtVjNUM0pwWjJsdWN5QTlJRzVsZHlCVFpYUW9XeTR1TG01bGQwRmpZMjkxYm5SelRXRndMbXRsZVhNb0tWMHBPMXh1WEc0Z0lHWnZjaUFvWTI5dWMzUWdiM0pwWjJsdUlHOW1JSEJ5WlhacGIzVnpRV05qYjNWdWRITk5ZWEF1YTJWNWN5Z3BLU0I3WEc0Z0lDQWdZMjl1YzNRZ2JtVjNRV05qYjNWdWRITWdQU0J1WlhkQlkyTnZkVzUwYzAxaGNDNW5aWFFvYjNKcFoybHVLU0EvUHlCYlhUdGNibHh1SUNBZ0lDOHZJRlJvWlNCMllXeDFaWE1nYjJZZ2RHaGxjMlVnYldGd2N5QmhjbVVnY21WbVpYSmxibU5sY3lCMGJ5QnBiVzExZEdGaWJHVWdkbUZzZFdWekxDQjNhR2xqYUNCcGN5QjNhSGxjYmlBZ0lDQXZMeUJoSUhOMGNtbGpkQ0JsY1hWaGJHbDBlU0JqYUdWamF5QnBjeUJsYm05MVoyZ2dabTl5SUdScFptWnBibWN1SUZSb1pTQjJZV3gxWlhNZ1lYSmxJR1ZwZEdobGNpQm1jbTl0WEc0Z0lDQWdMeThnVUdWeWJXbHpjMmx2YmtOdmJuUnliMnhzWlhJZ2MzUmhkR1VzSUc5eUlHRnVJR1Z0Y0hSNUlHRnljbUY1SUdsdWFYUnBZV3hwZW1Wa0lHbHVJSFJvWlNCd2NtVjJhVzkxYzF4dUlDQWdJQzh2SUdOaGJHd2dkRzhnZEdocGN5Qm1kVzVqZEdsdmJpNGdZRzVsZDBGalkyOTFiblJ6VFdGd1lDQjNhV3hzSUc1bGRtVnlJR052Ym5SaGFXNGdZVzU1SUdWdGNIUjVYRzRnSUNBZ0x5OGdZWEp5WVhsekxseHVJQ0FnSUdsbUlDaHdjbVYyYVc5MWMwRmpZMjkxYm5SelRXRndMbWRsZENodmNtbG5hVzRwSUNFOVBTQnVaWGRCWTJOdmRXNTBjeWtnZTF4dUlDQWdJQ0FnWTJoaGJtZGxaRUZqWTI5MWJuUnpMbk5sZENodmNtbG5hVzRzSUc1bGQwRmpZMjkxYm5SektUdGNiaUFnSUNCOVhHNWNiaUFnSUNCdVpYZFBjbWxuYVc1ekxtUmxiR1YwWlNodmNtbG5hVzRwTzF4dUlDQjlYRzVjYmlBZ0x5OGdRbmtnYm05M0xDQnVaWGRQY21sbmFXNXpJR2x6SUdWcGRHaGxjaUJsYlhCMGVTQnZjaUJqYjI1MFlXbHVjeUJ6YjIxbElHNTFiV0psY2lCdlppQndjbVYyYVc5MWMyeDVYRzRnSUM4dklIVnVaVzVqYjNWdWRHVnlaV1FnYjNKcFoybHVjeXdnWVc1a0lHRnNiQ0J2WmlCMGFHVnBjaUJoWTJOdmRXNTBjeUJvWVhabElGd2lZMmhoYm1kbFpGd2lMbHh1SUNCbWIzSWdLR052Ym5OMElHOXlhV2RwYmlCdlppQnVaWGRQY21sbmFXNXpMbXRsZVhNb0tTa2dlMXh1SUNBZ0lHTm9ZVzVuWldSQlkyTnZkVzUwY3k1elpYUW9iM0pwWjJsdUxDQnVaWGRCWTJOdmRXNTBjMDFoY0M1blpYUW9iM0pwWjJsdUtTazdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHTm9ZVzVuWldSQlkyTnZkVzUwY3p0Y2JuMDdYRzRpTENKcGJYQnZjblFnZTF4dUlDQmpiMjV6ZEhKMVkzUlFaWEp0YVhOemFXOXVMRnh1SUNCUVpYSnRhWE56YVc5dVZIbHdaU3hjYm4wZ1puSnZiU0FuUUcxbGRHRnRZWE5yTDNCbGNtMXBjM05wYjI0dFkyOXVkSEp2Ykd4bGNpYzdYRzVwYlhCdmNuUWdlMXh1SUNCRFlYWmxZWFJVZVhCbGN5eGNiaUFnVW1WemRISnBZM1JsWkUxbGRHaHZaSE1zWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmNHVnliV2x6YzJsdmJuTW5PMXh1WEc0dktpcGNiaUFxSUZSb2FYTWdabWxzWlNCamIyNTBZV2x1Y3lCMGFHVWdjM0JsWTJsbWFXTmhkR2x2Ym5NZ2IyWWdkR2hsSUhCbGNtMXBjM05wYjI1eklHRnVaQ0JqWVhabFlYUnpYRzRnS2lCMGFHRjBJR0Z5WlNCeVpXTnZaMjVwZW1Wa0lHSjVJRzkxY2lCd1pYSnRhWE56YVc5dUlITjVjM1JsYlM0Z1UyVmxJSFJvWlNCUVpYSnRhWE56YVc5dVEyOXVkSEp2Ykd4bGNseHVJQ29nVWtWQlJFMUZJR2x1SUVCdFpYUmhiV0Z6YXk5amIyNTBjbTlzYkdWeWN5Qm1iM0lnWkdWMFlXbHNjeTVjYmlBcUwxeHVYRzR2S2lwY2JpQXFJRlJvWlNCY0ltdGxlWE5jSWlCdlppQmhiR3dnYjJZZ2NHVnliV2x6YzJsdmJuTWdjbVZqYjJkdWFYcGxaQ0JpZVNCMGFHVWdVR1Z5YldsemMybHZia052Ym5SeWIyeHNaWEl1WEc0Z0tpQlFaWEp0YVhOemFXOXVJR3RsZVhNZ1lXNWtJRzVoYldWeklHaGhkbVVnWkdsemRHbHVZM1FnYldWaGJtbHVaM01nYVc0Z2RHaGxJSEJsY20xcGMzTnBiMjRnYzNsemRHVnRMbHh1SUNvdlhHNWpiMjV6ZENCUVpYSnRhWE56YVc5dVMyVjVjeUE5SUU5aWFtVmpkQzVtY21WbGVtVW9lMXh1SUNBdUxpNVNaWE4wY21samRHVmtUV1YwYUc5a2N5eGNibjBwTzF4dVhHNHZLaXBjYmlBcUlFWmhZM1J2Y25rZ1puVnVZM1JwYjI1eklHWnZjaUJoYkd3Z1kyRjJaV0YwSUhSNWNHVnpJSEpsWTI5bmJtbDZaV1FnWW5rZ2RHaGxYRzRnS2lCUVpYSnRhWE56YVc5dVEyOXVkSEp2Ykd4bGNpNWNiaUFxTDF4dVkyOXVjM1FnUTJGMlpXRjBSbUZqZEc5eWFXVnpJRDBnVDJKcVpXTjBMbVp5WldWNlpTaDdYRzRnSUZ0RFlYWmxZWFJVZVhCbGN5NXlaWE4wY21samRGSmxkSFZ5Ym1Wa1FXTmpiM1Z1ZEhOZE9pQW9ZV05qYjNWdWRITXBJRDArSUh0Y2JpQWdJQ0J5WlhSMWNtNGdleUIwZVhCbE9pQkRZWFpsWVhSVWVYQmxjeTV5WlhOMGNtbGpkRkpsZEhWeWJtVmtRV05qYjNWdWRITXNJSFpoYkhWbE9pQmhZMk52ZFc1MGN5QjlPMXh1SUNCOUxGeHVmU2s3WEc1Y2JpOHFLbHh1SUNvZ1FTQlFjbVZtWlhKbGJtTmxjME52Ym5SeWIyeHNaWElnYVdSbGJuUnBkSGtnYjJKcVpXTjBMbHh1SUNwY2JpQXFJRUIwZVhCbFpHVm1JSHR2WW1wbFkzUjlJRWxrWlc1MGFYUjVYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UzTjBjbWx1WjMwZ1lXUmtjbVZ6Y3lBdElGUm9aU0JoWkdSeVpYTnpJRzltSUhSb1pTQnBaR1Z1ZEdsMGVTNWNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCdVlXMWxJQzBnVkdobElHNWhiV1VnYjJZZ2RHaGxJR2xrWlc1MGFYUjVMbHh1SUNvZ1FIQnliM0JsY25SNUlIdHVkVzFpWlhKOUlGdHNZWE4wVTJWc1pXTjBaV1JkSUMwZ1ZXNXBlQ0IwYVcxbGMzUmhiWEFnYjJZZ2QyaGxiaUIwYUdVZ2FXUmxiblJwZEhrZ2QyRnpYRzRnS2lCc1lYTjBJSE5sYkdWamRHVmtJR2x1SUhSb1pTQlZTUzVjYmlBcUwxeHVYRzR2S2lwY2JpQXFJRWRsZEhNZ2RHaGxJSE53WldOcFptbGpZWFJwYjI1eklHWnZjaUJoYkd3Z1kyRjJaV0YwY3lCMGFHRjBJSGRwYkd3Z1ltVWdjbVZqYjJkdWFYcGxaQ0JpZVNCMGFHVmNiaUFxSUZCbGNtMXBjM05wYjI1RGIyNTBjbTlzYkdWeUxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2UxeHVJQ29nSUNCblpYUkpaR1Z1ZEdsMGFXVnpPaUFvS1NBOVBpQlNaV052Y21ROGMzUnlhVzVuTENCSlpHVnVkR2wwZVQ0c1hHNGdLaUI5ZlNCdmNIUnBiMjV6SUMwZ1QzQjBhVzl1Y3lCaVlXY3VYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0JuWlhSRFlYWmxZWFJUY0dWamFXWnBZMkYwYVc5dWN5QTlJQ2g3SUdkbGRFbGtaVzUwYVhScFpYTWdmU2tnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lGdERZWFpsWVhSVWVYQmxjeTV5WlhOMGNtbGpkRkpsZEhWeWJtVmtRV05qYjNWdWRITmRPaUI3WEc0Z0lDQWdJQ0IwZVhCbE9pQkRZWFpsWVhSVWVYQmxjeTV5WlhOMGNtbGpkRkpsZEhWeWJtVmtRV05qYjNWdWRITXNYRzVjYmlBZ0lDQWdJR1JsWTI5eVlYUnZjam9nS0cxbGRHaHZaQ3dnWTJGMlpXRjBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaGMzbHVZeUFvWVhKbmN5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUhKbGMzVnNkQ0E5SUdGM1lXbDBJRzFsZEdodlpDaGhjbWR6S1R0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXVabWxzZEdWeUtDaGhZMk52ZFc1MEtTQTlQaUJqWVhabFlYUXVkbUZzZFdVdWFXNWpiSFZrWlhNb1lXTmpiM1Z1ZENrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0F1YzJ4cFkyVW9NQ3dnTVNrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0IyWVd4cFpHRjBiM0k2SUNoallYWmxZWFFzSUY5dmNtbG5hVzRzSUY5MFlYSm5aWFFwSUQwK1hHNGdJQ0FnSUNBZ0lIWmhiR2xrWVhSbFEyRjJaV0YwUVdOamIzVnVkSE1vWTJGMlpXRjBMblpoYkhWbExDQm5aWFJKWkdWdWRHbDBhV1Z6S1N4Y2JpQWdJQ0I5TEZ4dVhHNGdJSDA3WEc1OU8xeHVYRzR2S2lwY2JpQXFJRWRsZEhNZ2RHaGxJSE53WldOcFptbGpZWFJwYjI1eklHWnZjaUJoYkd3Z2NHVnliV2x6YzJsdmJuTWdkR2hoZENCM2FXeHNJR0psSUhKbFkyOW5ibWw2WldRZ1lua2dkR2hsWEc0Z0tpQlFaWEp0YVhOemFXOXVRMjl1ZEhKdmJHeGxjaTVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlM3RjYmlBcUlDQWdaMlYwUVd4c1FXTmpiM1Z1ZEhNNklDZ3BJRDArSUZCeWIyMXBjMlU4YzNSeWFXNW5XMTArTEZ4dUlDb2dJQ0JuWlhSSlpHVnVkR2wwYVdWek9pQW9LU0E5UGlCU1pXTnZjbVE4YzNSeWFXNW5MQ0JKWkdWdWRHbDBlVDRzWEc0Z0tpQjlmU0J2Y0hScGIyNXpJQzBnVDNCMGFXOXVjeUJpWVdjdVhHNGdLaUJBY0dGeVlXMGdiM0IwYVc5dWN5NW5aWFJCYkd4QlkyTnZkVzUwY3lBdElFRWdablZ1WTNScGIyNGdkR2hoZENCeVpYUjFjbTV6SUdGc2JDQkZkR2hsY21WMWJTQmhZMk52ZFc1MGMxeHVJQ29nYVc0Z2RHaGxJR04xY25KbGJuUWdUV1YwWVUxaGMyc2dhVzV6ZEdGdVkyVXVYRzRnS2lCQWNHRnlZVzBnYjNCMGFXOXVjeTVuWlhSSlpHVnVkR2wwYVdWeklDMGdRU0JtZFc1amRHbHZiaUIwYUdGMElISmxkSFZ5Ym5NZ2RHaGxYRzRnS2lCZ1VISmxabVZ5Wlc1alpYTkRiMjUwY205c2JHVnlZQ0JwWkdWdWRHbDBlU0J2WW1wbFkzUnpJR1p2Y2lCaGJHd2dSWFJvWlhKbGRXMGdZV05qYjNWdWRITWdhVzRnZEdobFhHNGdLaUJBY0dGeVlXMGdiM0IwYVc5dWN5NWpZWEIwZFhKbFMyVjVjbWx1WjFSNWNHVnpWMmwwYUUxcGMzTnBibWRKWkdWdWRHbDBhV1Z6SUMwZ1FTQm1kVzVqZEdsdmJpQjBhR0YwWEc0Z0tpQmpZWEIwZFhKbGN5QmxlSFJ5WVNCbGNuSnZjaUJwYm1admNtMWhkR2x2YmlCaFltOTFkQ0IwYUdVZ1hDSk5hWE56YVc1bklHbGtaVzUwYVhSNUlHWnZjaUJoWkdSeVpYTnpYQ0pjYmlBcUlHVnljbTl5TGx4dUlDb2dZM1Z5Y21WdWRDQk5aWFJoVFdGemF5QnBibk4wWVc1alpTNWNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR2RsZEZCbGNtMXBjM05wYjI1VGNHVmphV1pwWTJGMGFXOXVjeUE5SUNoN1hHNGdJR2RsZEVGc2JFRmpZMjkxYm5SekxGeHVJQ0JuWlhSSlpHVnVkR2wwYVdWekxGeHVJQ0JqWVhCMGRYSmxTMlY1Y21sdVoxUjVjR1Z6VjJsMGFFMXBjM05wYm1kSlpHVnVkR2wwYVdWekxGeHVmU2tnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lGdFFaWEp0YVhOemFXOXVTMlY1Y3k1bGRHaGZZV05qYjNWdWRITmRPaUI3WEc0Z0lDQWdJQ0J3WlhKdGFYTnphVzl1Vkhsd1pUb2dVR1Z5YldsemMybHZibFI1Y0dVdVVtVnpkSEpwWTNSbFpFMWxkR2h2WkN4Y2JpQWdJQ0FnSUhSaGNtZGxkRXRsZVRvZ1VHVnliV2x6YzJsdmJrdGxlWE11WlhSb1gyRmpZMjkxYm5SekxGeHVJQ0FnSUNBZ1lXeHNiM2RsWkVOaGRtVmhkSE02SUZ0RFlYWmxZWFJVZVhCbGN5NXlaWE4wY21samRGSmxkSFZ5Ym1Wa1FXTmpiM1Z1ZEhOZExGeHVYRzRnSUNBZ0lDQm1ZV04wYjNKNU9pQW9jR1Z5YldsemMybHZiazl3ZEdsdmJuTXNJSEpsY1hWbGMzUkVZWFJoS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLSEJsY20xcGMzTnBiMjVQY0hScGIyNXpMbU5oZG1WaGRITXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdZQ1I3VUdWeWJXbHpjMmx2Ymt0bGVYTXVaWFJvWDJGalkyOTFiblJ6ZlNCbGNuSnZjam9nVW1WalpXbDJaV1FnZFc1bGVIQmxZM1JsWkNCallYWmxZWFJ6TGlCQmJua2djR1Z5YldsMGRHVmtJR05oZG1WaGRITWdkMmxzYkNCaVpTQmhaR1JsWkNCaGRYUnZiV0YwYVdOaGJHeDVMbUFzWEc0Z0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklGUm9hWE1nZG1Gc2RXVWdkMmxzYkNCaVpTQm1kWEowYUdWeUlIWmhiR2xrWVhSbFpDQmhjeUJ3WVhKMElHOW1JSFJvWlNCallYWmxZWFF1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hjbVZ4ZFdWemRFUmhkR0V1WVhCd2NtOTJaV1JCWTJOdmRXNTBjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJR0FrZTFCbGNtMXBjM05wYjI1TFpYbHpMbVYwYUY5aFkyTnZkVzUwYzMwZ1pYSnliM0k2SUU1dklHRndjSEp2ZG1Wa0lHRmpZMjkxYm5SeklITndaV05wWm1sbFpDNWdMRnh1SUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1YzNSeWRXTjBVR1Z5YldsemMybHZiaWg3WEc0Z0lDQWdJQ0FnSUNBZ0xpNHVjR1Z5YldsemMybHZiazl3ZEdsdmJuTXNYRzRnSUNBZ0lDQWdJQ0FnWTJGMlpXRjBjem9nVzF4dUlDQWdJQ0FnSUNBZ0lDQWdRMkYyWldGMFJtRmpkRzl5YVdWelcwTmhkbVZoZEZSNWNHVnpMbkpsYzNSeWFXTjBVbVYwZFhKdVpXUkJZMk52ZFc1MGMxMG9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjWFZsYzNSRVlYUmhMbUZ3Y0hKdmRtVmtRV05qYjNWdWRITXNYRzRnSUNBZ0lDQWdJQ0FnSUNBcExGeHVJQ0FnSUNBZ0lDQWdJRjBzWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdiV1YwYUc5a1NXMXdiR1Z0Wlc1MFlYUnBiMjQ2SUdGemVXNWpJQ2hmWVhKbmN5a2dQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JoWTJOdmRXNTBjeUE5SUdGM1lXbDBJR2RsZEVGc2JFRmpZMjkxYm5SektDazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHbGtaVzUwYVhScFpYTWdQU0JuWlhSSlpHVnVkR2wwYVdWektDazdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0ZqWTI5MWJuUnpMbk52Y25Rb0tHWnBjbk4wUVdSa2NtVnpjeXdnYzJWamIyNWtRV1JrY21WemN5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2doYVdSbGJuUnBkR2xsYzF0bWFYSnpkRUZrWkhKbGMzTmRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWEIwZFhKbFMyVjVjbWx1WjFSNWNHVnpWMmwwYUUxcGMzTnBibWRKWkdWdWRHbDBhV1Z6S0dsa1pXNTBhWFJwWlhNc0lHRmpZMjkxYm5SektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnVFdsemMybHVaeUJwWkdWdWRHbDBlU0JtYjNJZ1lXUmtjbVZ6Y3pvZ1hDSWtlMlpwY25OMFFXUmtjbVZ6YzMxY0lpNWdLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tDRnBaR1Z1ZEdsMGFXVnpXM05sWTI5dVpFRmtaSEpsYzNOZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYQjBkWEpsUzJWNWNtbHVaMVI1Y0dWelYybDBhRTFwYzNOcGJtZEpaR1Z1ZEdsMGFXVnpLR2xrWlc1MGFYUnBaWE1zSUdGalkyOTFiblJ6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1lFMXBjM05wYm1jZ2FXUmxiblJwZEhrZ1ptOXlJR0ZrWkhKbGMzTTZJRndpSkh0elpXTnZibVJCWkdSeVpYTnpmVndpTG1Bc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNCcFpHVnVkR2wwYVdWelcyWnBjbk4wUVdSa2NtVnpjMTB1YkdGemRGTmxiR1ZqZEdWa0lEMDlQVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXUmxiblJwZEdsbGMxdHpaV052Ym1SQlpHUnlaWE56WFM1c1lYTjBVMlZzWldOMFpXUmNiaUFnSUNBZ0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQXdPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FXUmxiblJwZEdsbGMxdG1hWEp6ZEVGa1pISmxjM05kTG14aGMzUlRaV3hsWTNSbFpDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdNVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHbGtaVzUwYVhScFpYTmJjMlZqYjI1a1FXUmtjbVZ6YzEwdWJHRnpkRk5sYkdWamRHVmtJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUF0TVR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV1JsYm5ScGRHbGxjMXR6WldOdmJtUkJaR1J5WlhOelhTNXNZWE4wVTJWc1pXTjBaV1FnTFZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1JsYm5ScGRHbGxjMXRtYVhKemRFRmtaSEpsYzNOZExteGhjM1JUWld4bFkzUmxaRnh1SUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnZG1Gc2FXUmhkRzl5T2lBb2NHVnliV2x6YzJsdmJpd2dYMjl5YVdkcGJpd2dYM1JoY21kbGRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUdOaGRtVmhkSE1nZlNBOUlIQmxjbTFwYzNOcGIyNDdYRzRnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWhZMkYyWldGMGN5QjhmRnh1SUNBZ0lDQWdJQ0FnSUdOaGRtVmhkSE11YkdWdVozUm9JQ0U5UFNBeElIeDhYRzRnSUNBZ0lDQWdJQ0FnWTJGMlpXRjBjMXN3WFM1MGVYQmxJQ0U5UFNCRFlYWmxZWFJVZVhCbGN5NXlaWE4wY21samRGSmxkSFZ5Ym1Wa1FXTmpiM1Z1ZEhOY2JpQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lDUjdVR1Z5YldsemMybHZia3RsZVhNdVpYUm9YMkZqWTI5MWJuUnpmU0JsY25KdmNqb2dTVzUyWVd4cFpDQmpZWFpsWVhSekxpQlVhR1Z5WlNCdGRYTjBJR0psSUdFZ2MybHVaMnhsSUdOaGRtVmhkQ0J2WmlCMGVYQmxJRndpSkh0RFlYWmxZWFJVZVhCbGN5NXlaWE4wY21samRGSmxkSFZ5Ym1Wa1FXTmpiM1Z1ZEhOOVhDSXVZQ3hjYmlBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lIMHNYRzRnSUgwN1hHNTlPMXh1WEc0dktpcGNiaUFxSUZaaGJHbGtZWFJsY3lCMGFHVWdZV05qYjNWdWRITWdZWE56YjJOcFlYUmxaQ0IzYVhSb0lHRWdZMkYyWldGMExpQkpiaUJsYzNObGJtTmxMQ0JsYm5OMWNtVnpJSFJvWVhSY2JpQXFJSFJvWlNCaFkyTnZkVzUwY3lCMllXeDFaU0JwY3lCaGJpQmhjbkpoZVNCdlppQnViMjR0Wlcxd2RIa2djM1J5YVc1bmN5d2dZVzVrSUhSb1lYUWdaV0ZqYUNCemRISnBibWRjYmlBcUlHTnZjbkpsYzNCdmJtUnpJSFJ2SUdFZ1VISmxabVZ5Wlc1alpYTkRiMjUwY205c2JHVnlJR2xrWlc1MGFYUjVMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1blcxMTlJR0ZqWTI5MWJuUnpJQzBnVkdobElHRmpZMjkxYm5SeklHRnpjMjlqYVdGMFpXUWdkMmwwYUNCMGFHVWdZMkYyWldGMExseHVJQ29nUUhCaGNtRnRJSHNvS1NBOVBpQlNaV052Y21ROGMzUnlhVzVuTENCSlpHVnVkR2wwZVQ1OUlHZGxkRWxrWlc1MGFYUnBaWE1nTFNCSFpYUnpJR0ZzYkZ4dUlDb2dVSEpsWm1WeVpXNWpaWE5EYjI1MGNtOXNiR1Z5SUdsa1pXNTBhWFJwWlhNdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhaaGJHbGtZWFJsUTJGMlpXRjBRV05qYjNWdWRITW9ZV05qYjNWdWRITXNJR2RsZEVsa1pXNTBhWFJwWlhNcElIdGNiaUFnYVdZZ0tDRkJjbkpoZVM1cGMwRnljbUY1S0dGalkyOTFiblJ6S1NCOGZDQmhZMk52ZFc1MGN5NXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0lDQmdKSHRRWlhKdGFYTnphVzl1UzJWNWN5NWxkR2hmWVdOamIzVnVkSE45SUdWeWNtOXlPaUJGZUhCbFkzUmxaQ0J1YjI0dFpXMXdkSGtnWVhKeVlYa2diMllnUlhSb1pYSmxkVzBnWVdSa2NtVnpjMlZ6TG1Bc1hHNGdJQ0FnS1R0Y2JpQWdmVnh1WEc0Z0lHTnZibk4wSUdsa1pXNTBhWFJwWlhNZ1BTQm5aWFJKWkdWdWRHbDBhV1Z6S0NrN1hHNGdJR0ZqWTI5MWJuUnpMbVp2Y2tWaFkyZ29LR0ZrWkhKbGMzTXBJRDArSUh0Y2JpQWdJQ0JwWmlBb0lXRmtaSEpsYzNNZ2ZId2dkSGx3Wlc5bUlHRmtaSEpsYzNNZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0lDQWdJR0FrZTFCbGNtMXBjM05wYjI1TFpYbHpMbVYwYUY5aFkyTnZkVzUwYzMwZ1pYSnliM0k2SUVWNGNHVmpkR1ZrSUdGdUlHRnljbUY1SUc5bUlFVjBhR1Z5WlhWdElHRmtaSEpsYzNObGN5NGdVbVZqWldsMlpXUTZJRndpSkh0aFpHUnlaWE56ZlZ3aUxtQXNYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2doYVdSbGJuUnBkR2xsYzF0aFpHUnlaWE56WFNrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4dUlDQWdJQ0FnSUNCZ0pIdFFaWEp0YVhOemFXOXVTMlY1Y3k1bGRHaGZZV05qYjNWdWRITjlJR1Z5Y205eU9pQlNaV05sYVhabFpDQjFibkpsWTI5bmJtbDZaV1FnWVdSa2NtVnpjem9nWENJa2UyRmtaSEpsYzNOOVhDSXVZQ3hjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1SUNCOUtUdGNibjFjYmx4dUx5b3FYRzRnS2lCQmJHd2dkVzV5WlhOMGNtbGpkR1ZrSUcxbGRHaHZaSE1nY21WamIyZHVhWHBsWkNCaWVTQjBhR1VnVUdWeWJXbHpjMmx2YmtOdmJuUnliMnhzWlhJdVhHNGdLaUJWYm5KbGMzUnlhV04wWldRZ2JXVjBhRzlrY3lCaGNtVWdhV2R1YjNKbFpDQmllU0IwYUdVZ2NHVnliV2x6YzJsdmJpQnplWE4wWlcwc0lHSjFkQ0JsZG1WeWVWeHVJQ29nU2xOUFRpMVNVRU1nY21WeGRXVnpkQ0J6WldWdUlHSjVJSFJvWlNCd1pYSnRhWE56YVc5dUlITjVjM1JsYlNCdGRYTjBJR052Y25KbGMzQnZibVFnZEc4Z1lWeHVJQ29nY21WemRISnBZM1JsWkNCdmNpQjFibkpsYzNSeWFXTjBaV1FnYldWMGFHOWtMQ0J2Y2lCMGFHVWdjbVZ4ZFdWemRDQjNhV3hzSUdKbElISmxhbVZqZEdWa0lIZHBkR2dnWVZ4dUlDb2dYQ0p0WlhSb2IyUWdibTkwSUdadmRXNWtYQ0lnWlhKeWIzSXVYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0IxYm5KbGMzUnlhV04wWldSTlpYUm9iMlJ6SUQwZ1QySnFaV04wTG1aeVpXVjZaU2hiWEc0Z0lDZGxkR2hmWW14dlkydE9kVzFpWlhJbkxGeHVJQ0FuWlhSb1gyTmhiR3duTEZ4dUlDQW5aWFJvWDJOb1lXbHVTV1FuTEZ4dUlDQW5aWFJvWDJOdmFXNWlZWE5sSnl4Y2JpQWdKMlYwYUY5a1pXTnllWEIwSnl4Y2JpQWdKMlYwYUY5bGMzUnBiV0YwWlVkaGN5Y3NYRzRnSUNkbGRHaGZabVZsU0dsemRHOXllU2NzWEc0Z0lDZGxkR2hmWjJGelVISnBZMlVuTEZ4dUlDQW5aWFJvWDJkbGRFSmhiR0Z1WTJVbkxGeHVJQ0FuWlhSb1gyZGxkRUpzYjJOclFubElZWE5vSnl4Y2JpQWdKMlYwYUY5blpYUkNiRzlqYTBKNVRuVnRZbVZ5Snl4Y2JpQWdKMlYwYUY5blpYUkNiRzlqYTFSeVlXNXpZV04wYVc5dVEyOTFiblJDZVVoaGMyZ25MRnh1SUNBblpYUm9YMmRsZEVKc2IyTnJWSEpoYm5OaFkzUnBiMjVEYjNWdWRFSjVUblZ0WW1WeUp5eGNiaUFnSjJWMGFGOW5aWFJEYjJSbEp5eGNiaUFnSjJWMGFGOW5aWFJGYm1OeWVYQjBhVzl1VUhWaWJHbGpTMlY1Snl4Y2JpQWdKMlYwYUY5blpYUkdhV3gwWlhKRGFHRnVaMlZ6Snl4Y2JpQWdKMlYwYUY5blpYUkdhV3gwWlhKTWIyZHpKeXhjYmlBZ0oyVjBhRjluWlhSTWIyZHpKeXhjYmlBZ0oyVjBhRjluWlhSUWNtOXZaaWNzWEc0Z0lDZGxkR2hmWjJWMFUzUnZjbUZuWlVGMEp5eGNiaUFnSjJWMGFGOW5aWFJVY21GdWMyRmpkR2x2YmtKNVFteHZZMnRJWVhOb1FXNWtTVzVrWlhnbkxGeHVJQ0FuWlhSb1gyZGxkRlJ5WVc1ellXTjBhVzl1UW5sQ2JHOWphMDUxYldKbGNrRnVaRWx1WkdWNEp5eGNiaUFnSjJWMGFGOW5aWFJVY21GdWMyRmpkR2x2YmtKNVNHRnphQ2NzWEc0Z0lDZGxkR2hmWjJWMFZISmhibk5oWTNScGIyNURiM1Z1ZENjc1hHNGdJQ2RsZEdoZloyVjBWSEpoYm5OaFkzUnBiMjVTWldObGFYQjBKeXhjYmlBZ0oyVjBhRjluWlhSVmJtTnNaVUo1UW14dlkydElZWE5vUVc1a1NXNWtaWGduTEZ4dUlDQW5aWFJvWDJkbGRGVnVZMnhsUW5sQ2JHOWphMDUxYldKbGNrRnVaRWx1WkdWNEp5eGNiaUFnSjJWMGFGOW5aWFJWYm1Oc1pVTnZkVzUwUW5sQ2JHOWphMGhoYzJnbkxGeHVJQ0FuWlhSb1gyZGxkRlZ1WTJ4bFEyOTFiblJDZVVKc2IyTnJUblZ0WW1WeUp5eGNiaUFnSjJWMGFGOW5aWFJYYjNKckp5eGNiaUFnSjJWMGFGOW9ZWE5vY21GMFpTY3NYRzRnSUNkbGRHaGZiV2x1YVc1bkp5eGNiaUFnSjJWMGFGOXVaWGRDYkc5amEwWnBiSFJsY2ljc1hHNGdJQ2RsZEdoZmJtVjNSbWxzZEdWeUp5eGNiaUFnSjJWMGFGOXVaWGRRWlc1a2FXNW5WSEpoYm5OaFkzUnBiMjVHYVd4MFpYSW5MRnh1SUNBblpYUm9YM0J5YjNSdlkyOXNWbVZ5YzJsdmJpY3NYRzRnSUNkbGRHaGZjMlZ1WkZKaGQxUnlZVzV6WVdOMGFXOXVKeXhjYmlBZ0oyVjBhRjl6Wlc1a1ZISmhibk5oWTNScGIyNG5MRnh1SUNBblpYUm9YM05wWjI0bkxGeHVJQ0FuWlhSb1gzTnBaMjVVZVhCbFpFUmhkR0VuTEZ4dUlDQW5aWFJvWDNOcFoyNVVlWEJsWkVSaGRHRmZkakVuTEZ4dUlDQW5aWFJvWDNOcFoyNVVlWEJsWkVSaGRHRmZkak1uTEZ4dUlDQW5aWFJvWDNOcFoyNVVlWEJsWkVSaGRHRmZkalFuTEZ4dUlDQW5aWFJvWDNOMVltMXBkRWhoYzJoeVlYUmxKeXhjYmlBZ0oyVjBhRjl6ZFdKdGFYUlhiM0pySnl4Y2JpQWdKMlYwYUY5emVXNWphVzVuSnl4Y2JpQWdKMlYwYUY5MWJtbHVjM1JoYkd4R2FXeDBaWEluTEZ4dUlDQW5iV1YwWVcxaGMydGZaMlYwVUhKdmRtbGtaWEpUZEdGMFpTY3NYRzRnSUNkdFpYUmhiV0Z6YTE5M1lYUmphRUZ6YzJWMEp5eGNiaUFnSjI1bGRGOXNhWE4wWlc1cGJtY25MRnh1SUNBbmJtVjBYM0JsWlhKRGIzVnVkQ2NzWEc0Z0lDZHVaWFJmZG1WeWMybHZiaWNzWEc0Z0lDZHdaWEp6YjI1aGJGOWxZMUpsWTI5MlpYSW5MRnh1SUNBbmNHVnljMjl1WVd4ZmMybG5iaWNzWEc0Z0lDZDNZV3hzWlhSZmQyRjBZMmhCYzNObGRDY3NYRzRnSUNkM1pXSXpYMk5zYVdWdWRGWmxjbk5wYjI0bkxGeHVJQ0FuZDJWaU0xOXphR0V6Snl4Y2JsMHBPMXh1SWl3aWFXMXdiM0owSUhzZ1QySnpaWEoyWVdKc1pWTjBiM0psSUgwZ1puSnZiU0FuUUcxbGRHRnRZWE5yTDI5aWN5MXpkRzl5WlNjN1hHNXBiWEJ2Y25RZ2V5QnViM0p0WVd4cGVtVWdZWE1nYm05eWJXRnNhWHBsUVdSa2NtVnpjeUI5SUdaeWIyMGdKMlYwYUMxemFXY3RkWFJwYkNjN1hHNXBiWEJ2Y25RZ2V5QkpVRVpUWDBSRlJrRlZURlJmUjBGVVJWZEJXVjlWVWt3Z2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5emFHRnlaV1F2WTI5dWMzUmhiblJ6TDI1bGRIZHZjbXNuTzF4dWFXMXdiM0owSUhzZ1RHVmtaMlZ5VkhKaGJuTndiM0owVkhsd1pYTWdmU0JtY205dElDY3VMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwyaGhjbVIzWVhKbExYZGhiR3hsZEhNbk8xeHVhVzF3YjNKMElIc2dWR2hsYldWVWVYQmxJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OXdjbVZtWlhKbGJtTmxjeWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRkJ5WldabGNtVnVZMlZ6UTI5dWRISnZiR3hsY2lCN1hHNGdJQzhxS2x4dUlDQWdLbHh1SUNBZ0tpQkFkSGx3WldSbFppQjdiMkpxWldOMGZTQlFjbVZtWlhKbGJtTmxjME52Ym5SeWIyeHNaWEpjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHOXdkSE1nTFNCUGRtVnljbWxrWlhNZ2RHaGxJR1JsWm1GMWJIUnpJR1p2Y2lCMGFHVWdhVzVwZEdsaGJDQnpkR0YwWlNCdlppQjBhR2x6TG5OMGIzSmxYRzRnSUNBcUlFQndjbTl3WlhKMGVTQjdiMkpxWldOMGZTQnpkRzl5WlNCVWFHVWdjM1J2Y21Wa0lHOWlhbVZqZENCamIyNTBZV2x1YVc1bklHRWdkWE5sY25NZ2NISmxabVZ5Wlc1alpYTXNJSE4wYjNKbFpDQnBiaUJzYjJOaGJDQnpkRzl5WVdkbFhHNGdJQ0FxSUVCd2NtOXdaWEowZVNCN1ltOXZiR1ZoYm4wZ2MzUnZjbVV1ZFhObFFteHZZMnRwWlNCVWFHVWdkWE5sY25NZ2NISmxabVZ5Wlc1alpTQm1iM0lnWW14dlkydHBaU0JwWkdWdWRHbGpiMjV6SUhkcGRHaHBiaUIwYUdVZ1ZVbGNiaUFnSUNvZ1FIQnliM0JsY25SNUlIdGliMjlzWldGdWZTQnpkRzl5WlM1MWMyVk9iMjVqWlVacFpXeGtJRlJvWlNCMWMyVnljeUJ3Y21WbVpYSmxibU5sSUdadmNpQnViMjVqWlNCbWFXVnNaQ0IzYVhSb2FXNGdkR2hsSUZWSlhHNGdJQ0FxSUVCd2NtOXdaWEowZVNCN2IySnFaV04wZlNCemRHOXlaUzVtWldGMGRYSmxSbXhoWjNNZ1FTQnJaWGt0WW05dmJHVmhiaUJ0WVhBc0lIZG9aWEpsSUd0bGVYTWdjbVZtWlhJZ2RHOGdabVZoZEhWeVpYTWdZVzVrSUdKdmIyeGxZVzV6SUhSdklIZG9aWFJvWlhJZ2RHaGxYRzRnSUNBcUlIVnpaWElnZDJsemFHVnpJSFJ2SUhObFpTQjBhR0YwSUdabFlYUjFjbVV1WEc0Z0lDQXFYRzRnSUNBcUlFWmxZWFIxY21VZ1pteGhaM01nWTJGdUlHSmxJSE5sZENCaWVTQjBhR1VnWjJ4dlltRnNJR1oxYm1OMGFXOXVJR0J6WlhSUWNtVm1aWEpsYm1ObEtHWmxZWFIxY21Vc0lHVnVZV0pzWldRcFlDd2dZVzVrSUhOdklITm9iM1ZzWkNCdWIzUWdaWGh3YjNObElHRnVlU0J6Wlc1emFYUnBkbVVnWW1Wb1lYWnBiM0l1WEc0Z0lDQXFJRUJ3Y205d1pYSjBlU0I3YjJKcVpXTjBmU0J6ZEc5eVpTNXJibTkzYmsxbGRHaHZaRVJoZEdFZ1EyOXVkR0ZwYm5NZ1lXeHNJR1JoZEdFZ2JXVjBhRzlrY3lCcmJtOTNiaUJpZVNCMGFHVWdkWE5sY2x4dUlDQWdLaUJBY0hKdmNHVnlkSGtnZTNOMGNtbHVaMzBnYzNSdmNtVXVZM1Z5Y21WdWRFeHZZMkZzWlNCVWFHVWdjSEpsWm1WeWNtVmtJR3hoYm1kMVlXZGxJR3h2WTJGc1pTQnJaWGxjYmlBZ0lDb2dRSEJ5YjNCbGNuUjVJSHR6ZEhKcGJtZDlJSE4wYjNKbExuTmxiR1ZqZEdWa1FXUmtjbVZ6Y3lCQklHaGxlQ0J6ZEhKcGJtY2dkR2hoZENCdFlYUmphR1Z6SUhSb1pTQmpkWEp5Wlc1MGJIa2djMlZzWldOMFpXUWdZV1JrY21WemN5QnBiaUIwYUdVZ1lYQndYRzRnSUNBcUwxeHVJQ0JqYjI1emRISjFZM1J2Y2lodmNIUnpJRDBnZTMwcElIdGNiaUFnSUNCamIyNXpkQ0JwYm1sMFUzUmhkR1VnUFNCN1hHNGdJQ0FnSUNCMWMyVkNiRzlqYTJsbE9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUhWelpVNXZibU5sUm1sbGJHUTZJR1poYkhObExGeHVJQ0FnSUNBZ2RYTmxVR2hwYzJoRVpYUmxZM1E2SUhSeWRXVXNYRzRnSUNBZ0lDQmthWE50YVhOelUyVmxaRUpoWTJ0VmNGSmxiV2x1WkdWeU9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUdScGMyRmliR1ZrVW5CalRXVjBhRzlrVUhKbFptVnlaVzVqWlhNNklIdGNiaUFnSUNBZ0lDQWdaWFJvWDNOcFoyNDZJR1poYkhObExGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lIVnpaVTExYkhScFFXTmpiM1Z1ZEVKaGJHRnVZMlZEYUdWamEyVnlPaUIwY25WbExGeHVYRzRnSUNBZ0lDQXZMeUJ6WlhRZ2RHOGdkSEoxWlNCdFpXRnVjeUIwYUdVZ1pIbHVZVzFwWXlCc2FYTjBJR1p5YjIwZ2RHaGxJRUZRU1NCcGN5QmlaV2x1WnlCMWMyVmtYRzRnSUNBZ0lDQXZMeUJ6WlhRZ2RHOGdabUZzYzJVZ2QybHNiQ0JpWlNCMWMybHVaeUIwYUdVZ2MzUmhkR2xqSUd4cGMzUWdabkp2YlNCamIyNTBjbUZqZEMxdFpYUmhaR0YwWVZ4dUlDQWdJQ0FnZFhObFZHOXJaVzVFWlhSbFkzUnBiMjQ2SUdaaGJITmxMRnh1SUNBZ0lDQWdkWE5sVG1aMFJHVjBaV04wYVc5dU9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUhWelpVTjFjbkpsYm1ONVVtRjBaVU5vWldOck9pQjBjblZsTEZ4dUlDQWdJQ0FnYjNCbGJsTmxZVVZ1WVdKc1pXUTZJR1poYkhObExGeHVJQ0FnSUNBZ1lXUjJZVzVqWldSSFlYTkdaV1U2SUc1MWJHd3NYRzVjYmlBZ0lDQWdJQzh2SUZkQlVrNUpUa2M2SUVSdklHNXZkQ0IxYzJVZ1ptVmhkSFZ5WlNCbWJHRm5jeUJtYjNJZ2MyVmpkWEpwZEhrdGMyVnVjMmwwYVhabElIUm9hVzVuY3k1Y2JpQWdJQ0FnSUM4dklFWmxZWFIxY21VZ1pteGhaeUIwYjJkbmJHbHVaeUJwY3lCaGRtRnBiR0ZpYkdVZ2FXNGdkR2hsSUdkc2IySmhiQ0J1WVcxbGMzQmhZMlZjYmlBZ0lDQWdJQzh2SUdadmNpQmpiMjUyWlc1cFpXNTBJSFJsYzNScGJtY2diMllnY0hKbExYSmxiR1ZoYzJVZ1ptVmhkSFZ5WlhNc0lHRnVaQ0J6YUc5MWJHUWdibVYyWlhKY2JpQWdJQ0FnSUM4dklIQmxjbVp2Y20wZ2MyVnVjMmwwYVhabElHOXdaWEpoZEdsdmJuTXVYRzRnSUNBZ0lDQm1aV0YwZFhKbFJteGhaM002SUh0Y2JpQWdJQ0FnSUNBZ2MyaHZkMGx1WTI5dGFXNW5WSEpoYm5OaFkzUnBiMjV6T2lCMGNuVmxMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJR3R1YjNkdVRXVjBhRzlrUkdGMFlUb2dlMzBzWEc0Z0lDQWdJQ0JqZFhKeVpXNTBURzlqWVd4bE9pQnZjSFJ6TG1sdWFYUk1ZVzVuUTI5a1pTeGNiaUFnSUNBZ0lHbGtaVzUwYVhScFpYTTZJSHQ5TEZ4dUlDQWdJQ0FnYkc5emRFbGtaVzUwYVhScFpYTTZJSHQ5TEZ4dUlDQWdJQ0FnWm05eVoyOTBkR1Z1VUdGemMzZHZjbVE2SUdaaGJITmxMRnh1SUNBZ0lDQWdjSEpsWm1WeVpXNWpaWE02SUh0Y2JpQWdJQ0FnSUNBZ1lYVjBiMHh2WTJ0VWFXMWxUR2x0YVhRNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lDQWdjMmh2ZDBacFlYUkpibFJsYzNSdVpYUnpPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdjMmh2ZDFSbGMzUk9aWFIzYjNKcmN6b2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lIVnpaVTVoZEdsMlpVTjFjbkpsYm1ONVFYTlFjbWx0WVhKNVEzVnljbVZ1WTNrNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdocFpHVmFaWEp2UW1Gc1lXNWpaVlJ2YTJWdWN6b2dabUZzYzJVc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0x5OGdSVTVUSUdSbFkyVnVkSEpoYkdsNlpXUWdkMlZpYzJsMFpTQnlaWE52YkhWMGFXOXVYRzRnSUNBZ0lDQnBjR1p6UjJGMFpYZGhlVG9nU1ZCR1UxOUVSVVpCVlV4VVgwZEJWRVZYUVZsZlZWSk1MRnh1SUNBZ0lDQWdhVzVtZFhKaFFteHZZMnRsWkRvZ2JuVnNiQ3hjYmlBZ0lDQWdJR3hsWkdkbGNsUnlZVzV6Y0c5eWRGUjVjR1U2SUhkcGJtUnZkeTV1WVhacFoyRjBiM0l1YUdsa1hHNGdJQ0FnSUNBZ0lEOGdUR1ZrWjJWeVZISmhibk53YjNKMFZIbHdaWE11ZDJWaWFHbGtYRzRnSUNBZ0lDQWdJRG9nVEdWa1oyVnlWSEpoYm5Od2IzSjBWSGx3WlhNdWRUSm1MRnh1SUNBZ0lDQWdkSEpoYm5OaFkzUnBiMjVUWldOMWNtbDBlVU5vWldOclJXNWhZbXhsWkRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0IwYUdWdFpUb2dWR2hsYldWVWVYQmxMbTl6TEZ4dUlDQWdJQ0FnTGk0dWIzQjBjeTVwYm1sMFUzUmhkR1VzWEc0Z0lDQWdmVHRjYmx4dUlDQWdJSFJvYVhNdVgyOXVTVzVtZFhKaFNYTkNiRzlqYTJWa0lEMGdiM0IwY3k1dmJrbHVablZ5WVVselFteHZZMnRsWkR0Y2JpQWdJQ0IwYUdsekxsOXZia2x1Wm5WeVlVbHpWVzVpYkc5amEyVmtJRDBnYjNCMGN5NXZia2x1Wm5WeVlVbHpWVzVpYkc5amEyVmtPMXh1SUNBZ0lIUm9hWE11YzNSdmNtVWdQU0J1WlhjZ1QySnpaWEoyWVdKc1pWTjBiM0psS0dsdWFYUlRkR0YwWlNrN1hHNGdJQ0FnZEdocGN5NXpkRzl5WlM1elpYUk5ZWGhNYVhOMFpXNWxjbk1vTVRNcE8xeHVJQ0FnSUhSb2FYTXVkRzlyWlc1TWFYTjBRMjl1ZEhKdmJHeGxjaUE5SUc5d2RITXVkRzlyWlc1TWFYTjBRMjl1ZEhKdmJHeGxjanRjYmx4dUlDQWdJSFJvYVhNdVgzTjFZbk5qY21saVpWUnZTVzVtZFhKaFFYWmhhV3hoWW1sc2FYUjVLQ2s3WEc1Y2JpQWdJQ0JuYkc5aVlXd3VjMlYwVUhKbFptVnlaVzVqWlNBOUlDaHJaWGtzSUhaaGJIVmxLU0E5UGlCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXpaWFJHWldGMGRYSmxSbXhoWnloclpYa3NJSFpoYkhWbEtUdGNiaUFnSUNCOU8xeHVJQ0I5WEc0Z0lDOHZJRkJWUWt4SlF5Qk5SVlJJVDBSVFhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZObGRITWdkR2hsSUh0QVkyOWtaU0JtYjNKbmIzUjBaVzVRWVhOemQyOXlaSDBnYzNSaGRHVWdjSEp2Y0dWeWRIbGNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0JtYjNKbmIzUjBaVzVRWVhOemQyOXlaQ0F0SUhkb1pYUm9aWElnYjNJZ2JtOTBJSFJvWlNCMWMyVnlJR2hoY3lCbWIzSm5iM1IwWlc0Z2RHaGxhWElnY0dGemMzZHZjbVJjYmlBZ0lDb3ZYRzRnSUhObGRGQmhjM04zYjNKa1JtOXlaMjkwZEdWdUtHWnZjbWR2ZEhSbGJsQmhjM04zYjNKa0tTQjdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3SUdadmNtZHZkSFJsYmxCaGMzTjNiM0prSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sZEhSbGNpQm1iM0lnZEdobElHQjFjMlZDYkc5amEybGxZQ0J3Y205d1pYSjBlVnh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTJKdmIyeGxZVzU5SUhaaGJDQXRJRmRvWlhSb1pYSWdiM0lnYm05MElIUm9aU0IxYzJWeUlIQnlaV1psY25NZ1lteHZZMnRwWlNCcGJtUnBZMkYwYjNKelhHNGdJQ0FxTDF4dUlDQnpaWFJWYzJWQ2JHOWphMmxsS0haaGJDa2dlMXh1SUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZXlCMWMyVkNiRzlqYTJsbE9pQjJZV3dnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMlYwZEdWeUlHWnZjaUIwYUdVZ1lIVnpaVTV2Ym1ObFJtbGxiR1JnSUhCeWIzQmxjblI1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1ltOXZiR1ZoYm4wZ2RtRnNJQzBnVjJobGRHaGxjaUJ2Y2lCdWIzUWdkR2hsSUhWelpYSWdjSEpsWm1WeWN5QjBieUJ6WlhRZ2JtOXVZMlZjYmlBZ0lDb3ZYRzRnSUhObGRGVnpaVTV2Ym1ObFJtbGxiR1FvZG1Gc0tTQjdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3SUhWelpVNXZibU5sUm1sbGJHUTZJSFpoYkNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWlhSMFpYSWdabTl5SUhSb1pTQmdkWE5sVUdocGMyaEVaWFJsWTNSZ0lIQnliM0JsY25SNVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdZbTl2YkdWaGJuMGdkbUZzSUMwZ1YyaGxkR2hsY2lCdmNpQnViM1FnZEdobElIVnpaWElnY0hKbFptVnljeUJ3YUdsemFHbHVaeUJrYjIxaGFXNGdjSEp2ZEdWamRHbHZibHh1SUNBZ0tpOWNiaUFnYzJWMFZYTmxVR2hwYzJoRVpYUmxZM1FvZG1Gc0tTQjdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3SUhWelpWQm9hWE5vUkdWMFpXTjBPaUIyWVd3Z2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVTJWMGRHVnlJR1p2Y2lCMGFHVWdZSFZ6WlUxMWJIUnBRV05qYjNWdWRFSmhiR0Z1WTJWRGFHVmphMlZ5WUNCd2NtOXdaWEowZVZ4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1OUlIWmhiQ0F0SUZkb1pYUm9aWElnYjNJZ2JtOTBJSFJvWlNCMWMyVnlJSEJ5WldabGNuTWdkRzhnZEhWeWJpQnZabVl2YjI0Z1lXeHNJSE5sWTNWeWFYUjVJSE5sZEhScGJtZHpYRzRnSUNBcUwxeHVJQ0J6WlhSVmMyVk5kV3gwYVVGalkyOTFiblJDWVd4aGJtTmxRMmhsWTJ0bGNpaDJZV3dwSUh0Y2JpQWdJQ0IwYUdsekxuTjBiM0psTG5Wd1pHRjBaVk4wWVhSbEtIc2dkWE5sVFhWc2RHbEJZMk52ZFc1MFFtRnNZVzVqWlVOb1pXTnJaWEk2SUhaaGJDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVFpYUjBaWElnWm05eUlIUm9aU0JnZFhObFZHOXJaVzVFWlhSbFkzUnBiMjVnSUhCeWIzQmxjblI1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1ltOXZiR1ZoYm4wZ2RtRnNJQzBnVjJobGRHaGxjaUJ2Y2lCdWIzUWdkR2hsSUhWelpYSWdjSEpsWm1WeWN5QjBieUIxYzJVZ2RHaGxJSE4wWVhScFl5QjBiMnRsYmlCc2FYTjBJRzl5SUdSNWJtRnRhV01nZEc5clpXNGdiR2x6ZENCbWNtOXRJSFJvWlNCQlVFbGNiaUFnSUNvdlhHNGdJSE5sZEZWelpWUnZhMlZ1UkdWMFpXTjBhVzl1S0haaGJDa2dlMXh1SUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZXlCMWMyVlViMnRsYmtSbGRHVmpkR2x2YmpvZ2RtRnNJSDBwTzF4dUlDQWdJSFJvYVhNdWRHOXJaVzVNYVhOMFEyOXVkSEp2Ykd4bGNpNTFjR1JoZEdWUWNtVjJaVzUwVUc5c2JHbHVaMDl1VG1WMGQyOXlhMUpsYzNSaGNuUW9JWFpoYkNrN1hHNGdJQ0FnYVdZZ0tIWmhiQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NTBiMnRsYmt4cGMzUkRiMjUwY205c2JHVnlMbk4wWVhKMEtDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkRzlyWlc1TWFYTjBRMjl1ZEhKdmJHeGxjaTVqYkdWaGNtbHVaMVJ2YTJWdVRHbHpkRVJoZEdFb0tUdGNiaUFnSUNBZ0lIUm9hWE11ZEc5clpXNU1hWE4wUTI5dWRISnZiR3hsY2k1emRHOXdLQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZObGRIUmxjaUJtYjNJZ2RHaGxJR0IxYzJWT1puUkVaWFJsWTNScGIyNWdJSEJ5YjNCbGNuUjVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3WW05dmJHVmhibjBnZFhObFRtWjBSR1YwWldOMGFXOXVJQzBnVjJobGRHaGxjaUJ2Y2lCdWIzUWdkR2hsSUhWelpYSWdjSEpsWm1WeWN5QjBieUJoZFhSdlpHVjBaV04wSUU1R1ZITXVYRzRnSUNBcUwxeHVJQ0J6WlhSVmMyVk9ablJFWlhSbFkzUnBiMjRvZFhObFRtWjBSR1YwWldOMGFXOXVLU0I3WEc0Z0lDQWdkR2hwY3k1emRHOXlaUzUxY0dSaGRHVlRkR0YwWlNoN0lIVnpaVTVtZEVSbGRHVmpkR2x2YmlCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWlhSMFpYSWdabTl5SUhSb1pTQmdkWE5sUTNWeWNtVnVZM2xTWVhSbFEyaGxZMnRnSUhCeWIzQmxjblI1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1ltOXZiR1ZoYm4wZ2RtRnNJQzBnVjJobGRHaGxjaUJ2Y2lCdWIzUWdkR2hsSUhWelpYSWdjSEpsWm1WeWN5QjBieUIxYzJVZ1kzVnljbVZ1WTNrZ2NtRjBaU0JqYUdWamF5Qm1iM0lnUlZSSUlHRnVaQ0IwYjJ0bGJuTXVYRzRnSUNBcUwxeHVJQ0J6WlhSVmMyVkRkWEp5Wlc1amVWSmhkR1ZEYUdWamF5aDJZV3dwSUh0Y2JpQWdJQ0IwYUdsekxuTjBiM0psTG5Wd1pHRjBaVk4wWVhSbEtIc2dkWE5sUTNWeWNtVnVZM2xTWVhSbFEyaGxZMnM2SUhaaGJDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVFpYUjBaWElnWm05eUlIUm9aU0JnYjNCbGJsTmxZVVZ1WVdKc1pXUmdJSEJ5YjNCbGNuUjVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3WW05dmJHVmhibjBnYjNCbGJsTmxZVVZ1WVdKc1pXUWdMU0JYYUdWMGFHVnlJRzl5SUc1dmRDQjBhR1VnZFhObGNpQndjbVZtWlhKeklIUnZJSFZ6WlNCMGFHVWdUM0JsYmxObFlTQkJVRWtnWm05eUlFNUdWSE1nWkdGMFlTNWNiaUFnSUNvdlhHNGdJSE5sZEU5d1pXNVRaV0ZGYm1GaWJHVmtLRzl3Wlc1VFpXRkZibUZpYkdWa0tTQjdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3WEc0Z0lDQWdJQ0J2Y0dWdVUyVmhSVzVoWW14bFpDeGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWlhSMFpYSWdabTl5SUhSb1pTQmdZV1IyWVc1alpXUkhZWE5HWldWZ0lIQnliM0JsY25SNVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQjJZV3dnTFNCb2IyeGtjeUIwYUdVZ2JXRjRRbUZ6WlVabFpTQmhibVFnVUhKcGIzSnBkSGxHWldVZ2RHaGhkQ0IwYUdVZ2RYTmxjaUJ6WlhRZ1lYTWdaR1ZtWVhWc2RDQmhaSFpoYm1ObFpDQnpaWFIwYVc1bmN5NWNiaUFnSUNvdlhHNGdJSE5sZEVGa2RtRnVZMlZrUjJGelJtVmxLSFpoYkNrZ2UxeHVJQ0FnSUhSb2FYTXVjM1J2Y21VdWRYQmtZWFJsVTNSaGRHVW9leUJoWkhaaGJtTmxaRWRoYzBabFpUb2dkbUZzSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sZEhSbGNpQm1iM0lnZEdobElHQjBhR1Z0WldBZ2NISnZjR1Z5ZEhsY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIWmhiQ0F0SUNka1pXWmhkV3gwSnlCdmNpQW5aR0Z5YXljZ2RtRnNkV1VnWW1GelpXUWdiMjRnZEdobElHMXZaR1VnYzJWc1pXTjBaV1FnWW5rZ2RYTmxjaTVjYmlBZ0lDb3ZYRzRnSUhObGRGUm9aVzFsS0haaGJDa2dlMXh1SUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZXlCMGFHVnRaVG9nZG1Gc0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZObGRIUmxjaUJtYjNJZ2RHaGxJR0IwY21GdWMyRmpkR2x2YmxObFkzVnlhWFI1UTJobFkydEZibUZpYkdWa1lDQndjbTl3WlhKMGVWeHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdkSEpoYm5OaFkzUnBiMjVUWldOMWNtbDBlVU5vWldOclJXNWhZbXhsWkZ4dUlDQWdLaTljYmlBZ2MyVjBWSEpoYm5OaFkzUnBiMjVUWldOMWNtbDBlVU5vWldOclJXNWhZbXhsWkNoMGNtRnVjMkZqZEdsdmJsTmxZM1Z5YVhSNVEyaGxZMnRGYm1GaWJHVmtLU0I3WEc0Z0lDQWdkR2hwY3k1emRHOXlaUzUxY0dSaGRHVlRkR0YwWlNoN1hHNGdJQ0FnSUNCMGNtRnVjMkZqZEdsdmJsTmxZM1Z5YVhSNVEyaGxZMnRGYm1GaWJHVmtMRnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVGa1pDQnVaWGNnYldWMGFHOWtSR0YwWVNCMGJ5QnpkR0YwWlN3Z2RHOGdZWFp2YVdRZ2NtVnhkV1Z6ZEdsdVp5QjBhR2x6SUdsdVptOXliV0YwYVc5dUlHRm5ZV2x1SUhSb2NtOTFaMmdnU1c1bWRYSmhYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JtYjNWeVFubDBaVkJ5WldacGVDQXRJRVp2ZFhJdFlubDBaU0J0WlhSb2IyUWdjMmxuYm1GMGRYSmxYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCdFpYUm9iMlJFWVhSaElDMGdRMjl5Y21WemNHOXVaR2x1WnlCa1lYUmhJRzFsZEdodlpGeHVJQ0FnS2k5Y2JpQWdZV1JrUzI1dmQyNU5aWFJvYjJSRVlYUmhLR1p2ZFhKQ2VYUmxVSEpsWm1sNExDQnRaWFJvYjJSRVlYUmhLU0I3WEc0Z0lDQWdZMjl1YzNRZ2V5QnJibTkzYmsxbGRHaHZaRVJoZEdFZ2ZTQTlJSFJvYVhNdWMzUnZjbVV1WjJWMFUzUmhkR1VvS1R0Y2JpQWdJQ0JyYm05M2JrMWxkR2h2WkVSaGRHRmJabTkxY2tKNWRHVlFjbVZtYVhoZElEMGdiV1YwYUc5a1JHRjBZVHRjYmlBZ0lDQjBhR2x6TG5OMGIzSmxMblZ3WkdGMFpWTjBZWFJsS0hzZ2EyNXZkMjVOWlhSb2IyUkVZWFJoSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sZEhSbGNpQm1iM0lnZEdobElHQmpkWEp5Wlc1MFRHOWpZV3hsWUNCd2NtOXdaWEowZVZ4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2EyVjVJQzBnYUdVZ2NISmxabVZ5Y21Wa0lHeGhibWQxWVdkbElHeHZZMkZzWlNCclpYbGNiaUFnSUNvdlhHNGdJSE5sZEVOMWNuSmxiblJNYjJOaGJHVW9hMlY1S1NCN1hHNGdJQ0FnWTI5dWMzUWdkR1Y0ZEVScGNtVmpkR2x2YmlBOUlGc25ZWEluTENBblpIWW5MQ0FuWm1FbkxDQW5hR1VuTENBbmEzVW5YUzVwYm1Oc2RXUmxjeWhyWlhrcFhHNGdJQ0FnSUNBL0lDZHlkR3duWEc0Z0lDQWdJQ0E2SUNkaGRYUnZKenRjYmlBZ0lDQjBhR2x6TG5OMGIzSmxMblZ3WkdGMFpWTjBZWFJsS0h0Y2JpQWdJQ0FnSUdOMWNuSmxiblJNYjJOaGJHVTZJR3RsZVN4Y2JpQWdJQ0FnSUhSbGVIUkVhWEpsWTNScGIyNHNYRzRnSUNBZ2ZTazdYRzRnSUNBZ2NtVjBkWEp1SUhSbGVIUkVhWEpsWTNScGIyNDdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhCa1lYUmxjeUJwWkdWdWRHbDBhV1Z6SUhSdklHOXViSGtnYVc1amJIVmtaU0J6Y0dWamFXWnBaV1FnWVdSa2NtVnpjMlZ6TGlCU1pXMXZkbVZ6SUdsa1pXNTBhWFJwWlhOY2JpQWdJQ29nYm05MElHbHVZMngxWkdWa0lHbHVJR0ZrWkhKbGMzTmxjeUJoY25KaGVWeHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVoxdGRmU0JoWkdSeVpYTnpaWE1nTFNCQmJpQmhjbkpoZVNCdlppQm9aWGdnWVdSa2NtVnpjMlZ6WEc0Z0lDQXFMMXh1SUNCelpYUkJaR1J5WlhOelpYTW9ZV1JrY21WemMyVnpLU0I3WEc0Z0lDQWdZMjl1YzNRZ2IyeGtTV1JsYm5ScGRHbGxjeUE5SUhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tTNXBaR1Z1ZEdsMGFXVnpPMXh1WEc0Z0lDQWdZMjl1YzNRZ2FXUmxiblJwZEdsbGN5QTlJR0ZrWkhKbGMzTmxjeTV5WldSMVkyVW9LR2xrY3l3Z1lXUmtjbVZ6Y3l3Z2FXNWtaWGdwSUQwK0lIdGNiaUFnSUNBZ0lHTnZibk4wSUc5c1pFbGtJRDBnYjJ4a1NXUmxiblJwZEdsbGMxdGhaR1J5WlhOelhTQjhmQ0I3ZlR0Y2JpQWdJQ0FnSUdsa2MxdGhaR1J5WlhOelhTQTlJSHNnYm1GdFpUb2dZRUZqWTI5MWJuUWdKSHRwYm1SbGVDQXJJREY5WUN3Z1lXUmtjbVZ6Y3l3Z0xpNHViMnhrU1dRZ2ZUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCcFpITTdYRzRnSUNBZ2ZTd2dlMzBwTzF4dVhHNGdJQ0FnZEdocGN5NXpkRzl5WlM1MWNHUmhkR1ZUZEdGMFpTaDdJR2xrWlc1MGFYUnBaWE1nZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZ0YjNabGN5QmhiaUJoWkdSeVpYTnpJR1p5YjIwZ2MzUmhkR1ZjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdGa1pISmxjM01nTFNCQklHaGxlQ0JoWkdSeVpYTnpYRzRnSUNBcUlFQnlaWFIxY201eklIdHpkSEpwYm1kOUlIUm9aU0JoWkdSeVpYTnpJSFJvWVhRZ2QyRnpJSEpsYlc5MlpXUmNiaUFnSUNvdlhHNGdJSEpsYlc5MlpVRmtaSEpsYzNNb1lXUmtjbVZ6Y3lrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnYVdSbGJuUnBkR2xsY3lCOUlEMGdkR2hwY3k1emRHOXlaUzVuWlhSVGRHRjBaU2dwTzF4dVhHNGdJQ0FnYVdZZ0tDRnBaR1Z1ZEdsMGFXVnpXMkZrWkhKbGMzTmRLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZQ1I3WVdSa2NtVnpjMzBnWTJGdUozUWdZbVVnWkdWc1pYUmxaQ0JqWVhWelpTQnBkQ0IzWVhNZ2JtOTBJR1p2ZFc1a1lDazdYRzRnSUNBZ2ZWeHVJQ0FnSUdSbGJHVjBaU0JwWkdWdWRHbDBhV1Z6VzJGa1pISmxjM05kTzF4dUlDQWdJSFJvYVhNdWMzUnZjbVV1ZFhCa1lYUmxVM1JoZEdVb2V5QnBaR1Z1ZEdsMGFXVnpJSDBwTzF4dVhHNGdJQ0FnTHk4Z1NXWWdkR2hsSUhObGJHVmpkR1ZrSUdGalkyOTFiblFnYVhNZ2JtOGdiRzl1WjJWeUlIWmhiR2xrTEZ4dUlDQWdJQzh2SUhObGJHVmpkQ0JoYmlCaGNtSnBkSEpoY25rZ2IzUm9aWElnWVdOamIzVnVkRHBjYmlBZ0lDQnBaaUFvWVdSa2NtVnpjeUE5UFQwZ2RHaHBjeTVuWlhSVFpXeGxZM1JsWkVGa1pISmxjM01vS1NrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnVzNObGJHVmpkR1ZrWFNBOUlFOWlhbVZqZEM1clpYbHpLR2xrWlc1MGFYUnBaWE1wTzF4dUlDQWdJQ0FnZEdocGN5NXpaWFJUWld4bFkzUmxaRUZrWkhKbGMzTW9jMlZzWldOMFpXUXBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWVdSa2NtVnpjenRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQlpHUnpJR0ZrWkhKbGMzTmxjeUIwYnlCMGFHVWdhV1JsYm5ScGRHbGxjeUJ2WW1wbFkzUWdkMmwwYUc5MWRDQnlaVzF2ZG1sdVp5QnBaR1Z1ZEdsMGFXVnpYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5XMTE5SUdGa1pISmxjM05sY3lBdElFRnVJR0Z5Y21GNUlHOW1JR2hsZUNCaFpHUnlaWE56WlhOY2JpQWdJQ292WEc0Z0lHRmtaRUZrWkhKbGMzTmxjeWhoWkdSeVpYTnpaWE1wSUh0Y2JpQWdJQ0JqYjI1emRDQjdJR2xrWlc1MGFYUnBaWE1nZlNBOUlIUm9hWE11YzNSdmNtVXVaMlYwVTNSaGRHVW9LVHRjYmlBZ0lDQmhaR1J5WlhOelpYTXVabTl5UldGamFDZ29ZV1JrY21WemN5a2dQVDRnZTF4dUlDQWdJQ0FnTHk4Z2MydHBjQ0JwWmlCaGJISmxZV1I1SUdWNGFYTjBjMXh1SUNBZ0lDQWdhV1lnS0dsa1pXNTBhWFJwWlhOYllXUmtjbVZ6YzEwcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0x5OGdZV1JrSUcxcGMzTnBibWNnYVdSbGJuUnBkSGxjYmlBZ0lDQWdJR052Ym5OMElHbGtaVzUwYVhSNVEyOTFiblFnUFNCUFltcGxZM1F1YTJWNWN5aHBaR1Z1ZEdsMGFXVnpLUzVzWlc1bmRHZzdYRzVjYmlBZ0lDQWdJR2xrWlc1MGFYUnBaWE5iWVdSa2NtVnpjMTBnUFNCN0lHNWhiV1U2SUdCQlkyTnZkVzUwSUNSN2FXUmxiblJwZEhsRGIzVnVkQ0FySURGOVlDd2dZV1JrY21WemN5QjlPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZXlCcFpHVnVkR2wwYVdWeklIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZONWJtTm9jbTl1YVhwbGN5QnBaR1Z1ZEdsMGVTQmxiblJ5YVdWeklIZHBkR2dnYTI1dmQyNGdZV05qYjNWdWRITXVYRzRnSUNBcUlGSmxiVzkyWlhNZ1lXNTVJSFZ1YTI1dmQyNGdhV1JsYm5ScGRHbGxjeXdnWVc1a0lISmxkSFZ5Ym5NZ2RHaGxJSEpsYzNWc2RHbHVaeUJ6Wld4bFkzUmxaQ0JoWkdSeVpYTnpMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTBGeWNtRjVQSE4wY21sdVp6NTlJR0ZrWkhKbGMzTmxjeUF0SUd0dWIzZHVJSFJ2SUhSb1pTQjJZWFZzZEM1Y2JpQWdJQ29nUUhKbGRIVnlibk1nZTFCeWIyMXBjMlU4YzNSeWFXNW5QbjBnYzJWc1pXTjBaV1JCWkdSeVpYTnpJSFJvWlNCelpXeGxZM1JsWkNCaFpHUnlaWE56TGx4dUlDQWdLaTljYmlBZ2MzbHVZMEZrWkhKbGMzTmxjeWhoWkdSeVpYTnpaWE1wSUh0Y2JpQWdJQ0JwWmlBb0lVRnljbUY1TG1selFYSnlZWGtvWVdSa2NtVnpjMlZ6S1NCOGZDQmhaR1J5WlhOelpYTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBWNGNHVmpkR1ZrSUc1dmJpMWxiWEIwZVNCaGNuSmhlU0J2WmlCaFpHUnlaWE56WlhNdUlFVnljbTl5SUNNeE1USXdNU2NwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElIc2dhV1JsYm5ScGRHbGxjeXdnYkc5emRFbGtaVzUwYVhScFpYTWdmU0E5SUhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tUdGNibHh1SUNBZ0lHTnZibk4wSUc1bGQyeDVURzl6ZENBOUlIdDlPMXh1SUNBZ0lFOWlhbVZqZEM1clpYbHpLR2xrWlc1MGFYUnBaWE1wTG1admNrVmhZMmdvS0dsa1pXNTBhWFI1S1NBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvSVdGa1pISmxjM05sY3k1cGJtTnNkV1JsY3locFpHVnVkR2wwZVNrcElIdGNiaUFnSUNBZ0lDQWdibVYzYkhsTWIzTjBXMmxrWlc1MGFYUjVYU0E5SUdsa1pXNTBhWFJwWlhOYmFXUmxiblJwZEhsZE8xeHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2FXUmxiblJwZEdsbGMxdHBaR1Z1ZEdsMGVWMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQXZMeUJKWkdWdWRHbDBhV1Z6SUdGeVpTQnVieUJzYjI1blpYSWdjSEpsYzJWdWRDNWNiaUFnSUNCcFppQW9UMkpxWldOMExtdGxlWE1vYm1WM2JIbE1iM04wS1M1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQXZMeUJ6ZEc5eVpTQnNiM04wSUdGalkyOTFiblJ6WEc0Z0lDQWdJQ0JQWW1wbFkzUXVhMlY1Y3lodVpYZHNlVXh2YzNRcExtWnZja1ZoWTJnb0tHdGxlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnNiM04wU1dSbGJuUnBkR2xsYzF0clpYbGRJRDBnYm1WM2JIbE1iM04wVzJ0bGVWMDdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TG5OMGIzSmxMblZ3WkdGMFpWTjBZWFJsS0hzZ2FXUmxiblJwZEdsbGN5d2diRzl6ZEVsa1pXNTBhWFJwWlhNZ2ZTazdYRzRnSUNBZ2RHaHBjeTVoWkdSQlpHUnlaWE56WlhNb1lXUmtjbVZ6YzJWektUdGNibHh1SUNBZ0lDOHZJRWxtSUhSb1pTQnpaV3hsWTNSbFpDQmhZMk52ZFc1MElHbHpJRzV2SUd4dmJtZGxjaUIyWVd4cFpDeGNiaUFnSUNBdkx5QnpaV3hsWTNRZ1lXNGdZWEppYVhSeVlYSjVJRzkwYUdWeUlHRmpZMjkxYm5RNlhHNGdJQ0FnYkdWMElITmxiR1ZqZEdWa0lEMGdkR2hwY3k1blpYUlRaV3hsWTNSbFpFRmtaSEpsYzNNb0tUdGNiaUFnSUNCcFppQW9JV0ZrWkhKbGMzTmxjeTVwYm1Oc2RXUmxjeWh6Wld4bFkzUmxaQ2twSUh0Y2JpQWdJQ0FnSUZ0elpXeGxZM1JsWkYwZ1BTQmhaR1J5WlhOelpYTTdYRzRnSUNBZ0lDQjBhR2x6TG5ObGRGTmxiR1ZqZEdWa1FXUmtjbVZ6Y3loelpXeGxZM1JsWkNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSE5sYkdWamRHVmtPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZObGRIUmxjaUJtYjNJZ2RHaGxJR0J6Wld4bFkzUmxaRUZrWkhKbGMzTmdJSEJ5YjNCbGNuUjVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JmWVdSa2NtVnpjeUF0SUVFZ2JtVjNJR2hsZUNCaFpHUnlaWE56SUdadmNpQmhiaUJoWTJOdmRXNTBYRzRnSUNBcUwxeHVJQ0J6WlhSVFpXeGxZM1JsWkVGa1pISmxjM01vWDJGa1pISmxjM01wSUh0Y2JpQWdJQ0JqYjI1emRDQmhaR1J5WlhOeklEMGdibTl5YldGc2FYcGxRV1JrY21WemN5aGZZV1JrY21WemN5azdYRzVjYmlBZ0lDQmpiMjV6ZENCN0lHbGtaVzUwYVhScFpYTWdmU0E5SUhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tUdGNiaUFnSUNCamIyNXpkQ0J6Wld4bFkzUmxaRWxrWlc1MGFYUjVJRDBnYVdSbGJuUnBkR2xsYzF0aFpHUnlaWE56WFR0Y2JpQWdJQ0JwWmlBb0lYTmxiR1ZqZEdWa1NXUmxiblJwZEhrcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1NXUmxiblJwZEhrZ1ptOXlJQ2NrZTJGa1pISmxjM045SUc1dmRDQm1iM1Z1WkdBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhObGJHVmpkR1ZrU1dSbGJuUnBkSGt1YkdGemRGTmxiR1ZqZEdWa0lEMGdSR0YwWlM1dWIzY29LVHRjYmlBZ0lDQjBhR2x6TG5OMGIzSmxMblZ3WkdGMFpWTjBZWFJsS0hzZ2FXUmxiblJwZEdsbGN5d2djMlZzWldOMFpXUkJaR1J5WlhOek9pQmhaR1J5WlhOeklIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVkbGRIUmxjaUJtYjNJZ2RHaGxJR0J6Wld4bFkzUmxaRUZrWkhKbGMzTmdJSEJ5YjNCbGNuUjVYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0emRISnBibWQ5SUZSb1pTQm9aWGdnWVdSa2NtVnpjeUJtYjNJZ2RHaGxJR04xY25KbGJuUnNlU0J6Wld4bFkzUmxaQ0JoWTJOdmRXNTBYRzRnSUNBcUwxeHVJQ0JuWlhSVFpXeGxZM1JsWkVGa1pISmxjM01vS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzUnZjbVV1WjJWMFUzUmhkR1VvS1M1elpXeGxZM1JsWkVGa1pISmxjM003WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVjBjeUJoSUdOMWMzUnZiU0JzWVdKbGJDQm1iM0lnWVc0Z1lXTmpiM1Z1ZEZ4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1lXTmpiM1Z1ZENBdElIUm9aU0JoWTJOdmRXNTBJSFJ2SUhObGRDQmhJR3hoWW1Wc0lHWnZjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JHRmlaV3dnTFNCMGFHVWdZM1Z6ZEc5dElHeGhZbVZzSUdadmNpQjBhR1VnWVdOamIzVnVkRnh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVSEp2YldselpUeHpkSEpwYm1jK2ZWeHVJQ0FnS2k5Y2JpQWdZWE41Ym1NZ2MyVjBRV05qYjNWdWRFeGhZbVZzS0dGalkyOTFiblFzSUd4aFltVnNLU0I3WEc0Z0lDQWdhV1lnS0NGaFkyTnZkVzUwS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWEc0Z0lDQWdJQ0FnSUdCelpYUkJZMk52ZFc1MFRHRmlaV3dnY21WeGRXbHlaWE1nWVNCMllXeHBaQ0JoWkdSeVpYTnpMQ0JuYjNRZ0pIdFRkSEpwYm1jb1lXTmpiM1Z1ZENsOVlDeGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVJQ0FnSUdOdmJuTjBJR0ZrWkhKbGMzTWdQU0J1YjNKdFlXeHBlbVZCWkdSeVpYTnpLR0ZqWTI5MWJuUXBPMXh1SUNBZ0lHTnZibk4wSUhzZ2FXUmxiblJwZEdsbGN5QjlJRDBnZEdocGN5NXpkRzl5WlM1blpYUlRkR0YwWlNncE8xeHVJQ0FnSUdsa1pXNTBhWFJwWlhOYllXUmtjbVZ6YzEwZ1BTQnBaR1Z1ZEdsMGFXVnpXMkZrWkhKbGMzTmRJSHg4SUh0OU8xeHVJQ0FnSUdsa1pXNTBhWFJwWlhOYllXUmtjbVZ6YzEwdWJtRnRaU0E5SUd4aFltVnNPMXh1SUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZXlCcFpHVnVkR2wwYVdWeklIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCc1lXSmxiRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVmNHUmhkR1Z6SUhSb1pTQmdabVZoZEhWeVpVWnNZV2R6WUNCd2NtOXdaWEowZVN3Z2QyaHBZMmdnYVhNZ1lXNGdiMkpxWldOMExpQlBibVVnY0hKdmNHVnlkSGtnZDJsMGFHbHVJSFJvWVhRZ2IySnFaV04wSUhkcGJHd2dZbVVnYzJWMElIUnZJR0VnWW05dmJHVmhiaTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdabFlYUjFjbVVnTFNCQklHdGxlU0IwYUdGMElHTnZjbkpsYzNCdmJtUnpJSFJ2SUdFZ1ZVa2dabVZoZEhWeVpTNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0aWIyOXNaV0Z1ZlNCaFkzUnBkbUYwWldRZ0xTQkpibVJwWTJGMFpYTWdkMmhsZEdobGNpQnZjaUJ1YjNRZ2RHaGxJRlZKSUdabFlYUjFjbVVnYzJodmRXeGtJR0psSUdScGMzQnNZWGxsWkZ4dUlDQWdLaUJBY21WMGRYSnVjeUI3VUhKdmJXbHpaVHh2WW1wbFkzUStmU0JRY205dGFYTmxjeUJoSUc1bGR5QnZZbXBsWTNRN0lIUm9aU0IxY0dSaGRHVmtJR1psWVhSMWNtVkdiR0ZuY3lCdlltcGxZM1F1WEc0Z0lDQXFMMXh1SUNCaGMzbHVZeUJ6WlhSR1pXRjBkWEpsUm14aFp5aG1aV0YwZFhKbExDQmhZM1JwZG1GMFpXUXBJSHRjYmlBZ0lDQmpiMjV6ZENCamRYSnlaVzUwUm1WaGRIVnlaVVpzWVdkeklEMGdkR2hwY3k1emRHOXlaUzVuWlhSVGRHRjBaU2dwTG1abFlYUjFjbVZHYkdGbmN6dGNiaUFnSUNCamIyNXpkQ0IxY0dSaGRHVmtSbVZoZEhWeVpVWnNZV2R6SUQwZ2UxeHVJQ0FnSUNBZ0xpNHVZM1Z5Y21WdWRFWmxZWFIxY21WR2JHRm5jeXhjYmlBZ0lDQWdJRnRtWldGMGRYSmxYVG9nWVdOMGFYWmhkR1ZrTEZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0IwYUdsekxuTjBiM0psTG5Wd1pHRjBaVk4wWVhSbEtIc2dabVZoZEhWeVpVWnNZV2R6T2lCMWNHUmhkR1ZrUm1WaGRIVnlaVVpzWVdkeklIMHBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlIVndaR0YwWldSR1pXRjBkWEpsUm14aFozTTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhCa1lYUmxjeUIwYUdVZ1lIQnlaV1psY21WdVkyVnpZQ0J3Y205d1pYSjBlU3dnZDJocFkyZ2dhWE1nWVc0Z2IySnFaV04wTGlCVWFHVnpaU0JoY21VZ2RYTmxjaTFqYjI1MGNtOXNiR1ZrSUdabFlYUjFjbVZ6WEc0Z0lDQXFJR1p2ZFc1a0lHbHVJSFJvWlNCelpYUjBhVzVuY3lCd1lXZGxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY0hKbFptVnlaVzVqWlNBdElGUm9aU0J3Y21WbVpYSmxibU5sSUhSdklHVnVZV0pzWlNCdmNpQmthWE5oWW14bExseHVJQ0FnS2lCQWNHRnlZVzBnZTJKdmIyeGxZVzU5SUhaaGJIVmxJQzBnU1c1a2FXTmhkR1Z6SUhkb1pYUm9aWElnYjNJZ2JtOTBJSFJvWlNCd2NtVm1aWEpsYm1ObElITm9iM1ZzWkNCaVpTQmxibUZpYkdWa0lHOXlJR1JwYzJGaWJHVmtMbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVSEp2YldselpUeHZZbXBsWTNRK2ZTQlFjbTl0YVhObGN5QmhJRzVsZHlCdlltcGxZM1E3SUhSb1pTQjFjR1JoZEdWa0lIQnlaV1psY21WdVkyVnpJRzlpYW1WamRDNWNiaUFnSUNvdlhHNGdJR0Z6ZVc1aklITmxkRkJ5WldabGNtVnVZMlVvY0hKbFptVnlaVzVqWlN3Z2RtRnNkV1VwSUh0Y2JpQWdJQ0JqYjI1emRDQmpkWEp5Wlc1MFVISmxabVZ5Wlc1alpYTWdQU0IwYUdsekxtZGxkRkJ5WldabGNtVnVZMlZ6S0NrN1hHNGdJQ0FnWTI5dWMzUWdkWEJrWVhSbFpGQnlaV1psY21WdVkyVnpJRDBnZTF4dUlDQWdJQ0FnTGk0dVkzVnljbVZ1ZEZCeVpXWmxjbVZ1WTJWekxGeHVJQ0FnSUNBZ1czQnlaV1psY21WdVkyVmRPaUIyWVd4MVpTeGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3SUhCeVpXWmxjbVZ1WTJWek9pQjFjR1JoZEdWa1VISmxabVZ5Wlc1alpYTWdmU2s3WEc0Z0lDQWdjbVYwZFhKdUlIVndaR0YwWldSUWNtVm1aWEpsYm1ObGN6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCSUdkbGRIUmxjaUJtYjNJZ2RHaGxJR0J3Y21WbVpYSmxibU5sYzJBZ2NISnZjR1Z5ZEhsY2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMjlpYW1WamRIMGdRU0JyWlhrdFltOXZiR1ZoYmlCdFlYQWdiMllnZFhObGNpMXpaV3hsWTNSbFpDQndjbVZtWlhKbGJtTmxjeTVjYmlBZ0lDb3ZYRzRnSUdkbGRGQnlaV1psY21WdVkyVnpLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2t1Y0hKbFptVnlaVzVqWlhNN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRU0JuWlhSMFpYSWdabTl5SUhSb1pTQmdhWEJtYzBkaGRHVjNZWGxnSUhCeWIzQmxjblI1WEc0Z0lDQXFYRzRnSUNBcUlFQnlaWFIxY201eklIdHpkSEpwYm1kOUlGUm9aU0JqZFhKeVpXNTBJRWxRUmxNZ1oyRjBaWGRoZVNCa2IyMWhhVzVjYmlBZ0lDb3ZYRzRnSUdkbGRFbHdabk5IWVhSbGQyRjVLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2t1YVhCbWMwZGhkR1YzWVhrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRU0J6WlhSMFpYSWdabTl5SUhSb1pTQmdhWEJtYzBkaGRHVjNZWGxnSUhCeWIzQmxjblI1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCa2IyMWhhVzRnTFNCVWFHVWdibVYzSUVsUVJsTWdaMkYwWlhkaGVTQmtiMjFoYVc1Y2JpQWdJQ29nUUhKbGRIVnlibk1nZTFCeWIyMXBjMlU4YzNSeWFXNW5QbjBnUVNCd2NtOXRhWE5sSUc5bUlIUm9aU0IxY0dSaGRHVWdTVkJHVXlCbllYUmxkMkY1SUdSdmJXRnBibHh1SUNBZ0tpOWNiaUFnWVhONWJtTWdjMlYwU1hCbWMwZGhkR1YzWVhrb1pHOXRZV2x1S1NCN1hHNGdJQ0FnZEdocGN5NXpkRzl5WlM1MWNHUmhkR1ZUZEdGMFpTaDdJR2x3Wm5OSFlYUmxkMkY1T2lCa2IyMWhhVzRnZlNrN1hHNGdJQ0FnY21WMGRYSnVJR1J2YldGcGJqdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCSUhObGRIUmxjaUJtYjNJZ2RHaGxJR0JzWldSblpYSlVjbUZ1YzNCdmNuUlVlWEJsWUNCd2NtOXdaWEowZVM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHeGxaR2RsY2xSeVlXNXpjRzl5ZEZSNWNHVWdMU0JGYVhSb1pYSWdKMnhsWkdkbGNreHBkbVVuTENBbmQyVmlhR2xrSnlCdmNpQW5kVEptSjF4dUlDQWdLaUJBY21WMGRYSnVjeUI3YzNSeWFXNW5mU0JVYUdVZ2RISmhibk53YjNKMElIUjVjR1VnZEdoaGRDQjNZWE1nYzJWMExseHVJQ0FnS2k5Y2JpQWdjMlYwVEdWa1oyVnlWSEpoYm5Od2IzSjBVSEpsWm1WeVpXNWpaU2hzWldSblpYSlVjbUZ1YzNCdmNuUlVlWEJsS1NCN1hHNGdJQ0FnZEdocGN5NXpkRzl5WlM1MWNHUmhkR1ZUZEdGMFpTaDdJR3hsWkdkbGNsUnlZVzV6Y0c5eWRGUjVjR1VnZlNrN1hHNGdJQ0FnY21WMGRYSnVJR3hsWkdkbGNsUnlZVzV6Y0c5eWRGUjVjR1U3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FTQm5aWFIwWlhJZ1ptOXlJSFJvWlNCZ2JHVmtaMlZ5VkhKaGJuTndiM0owVkhsd1pXQWdjSEp2Y0dWeWRIa3VYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0emRISnBibWQ5SUZSb1pTQmpkWEp5Wlc1MElIQnlaV1psY25KbFpDQk1aV1JuWlhJZ2RISmhibk53YjNKMElIUjVjR1V1WEc0Z0lDQXFMMXh1SUNCblpYUk1aV1JuWlhKVWNtRnVjM0J2Y25SUWNtVm1aWEpsYm1ObEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk4wYjNKbExtZGxkRk4wWVhSbEtDa3ViR1ZrWjJWeVZISmhibk53YjNKMFZIbHdaVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQklITmxkSFJsY2lCbWIzSWdkR2hsSUhWelpYSWdjSEpsWm1WeVpXNWpaU0IwYnlCa2FYTnRhWE56SUhSb1pTQnpaV1ZrSUhCb2NtRnpaU0JpWVdOcmRYQWdjbVZ0YVc1a1pYSmNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRpYjI5c2ZTQmthWE50YVhOelUyVmxaRUpoWTJ0VmNGSmxiV2x1WkdWeUlDMGdWWE5sY2lCd2NtVm1aWEpsYm1ObElHWnZjaUJrYVhOdGFYTnphVzVuSUhSb1pTQmlZV05ySUhWd0lISmxiV2x1WkdWeUxseHVJQ0FnS2k5Y2JpQWdZWE41Ym1NZ2MyVjBSR2x6YldsemMxTmxaV1JDWVdOclZYQlNaVzFwYm1SbGNpaGthWE50YVhOelUyVmxaRUpoWTJ0VmNGSmxiV2x1WkdWeUtTQjdYRzRnSUNBZ1lYZGhhWFFnZEdocGN5NXpkRzl5WlM1MWNHUmhkR1ZUZEdGMFpTaDdYRzRnSUNBZ0lDQmthWE50YVhOelUyVmxaRUpoWTJ0VmNGSmxiV2x1WkdWeUxGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUVnYzJWMGRHVnlJR1p2Y2lCMGFHVWdkWE5sY2lCd2NtVm1aWEpsYm1ObElIUnZJR1Z1WVdKc1pTOWthWE5oWW14bElISndZeUJ0WlhSb2IyUnpYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J0WlhSb2IyUk9ZVzFsSUMwZ1ZHaGxJRkpRUXlCdFpYUm9iMlFnYm1GdFpTQjBieUJqYUdGdVoyVWdkR2hsSUhObGRIUnBibWNnYjJaY2JpQWdJQ29nUUhCaGNtRnRJSHRpYjI5c2ZTQnBjMFZ1WVdKc1pXUWdMU0IwY25WbElIUnZJR1Z1WVdKc1pTQjBhR1VnY25CaklHMWxkR2h2WkZ4dUlDQWdLaTljYmlBZ1lYTjVibU1nYzJWMFJHbHpZV0pzWldSU2NHTk5aWFJvYjJSUWNtVm1aWEpsYm1ObEtHMWxkR2h2WkU1aGJXVXNJR2x6Ulc1aFlteGxaQ2tnZTF4dUlDQWdJR052Ym5OMElHTjFjbkpsYm5SU2NHTk5aWFJvYjJSUWNtVm1aWEpsYm1ObGN5QTlYRzRnSUNBZ0lDQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2t1WkdsellXSnNaV1JTY0dOTlpYUm9iMlJRY21WbVpYSmxibU5sY3p0Y2JpQWdJQ0JqYjI1emRDQjFjR1JoZEdWa1VuQmpUV1YwYUc5a1VISmxabVZ5Wlc1alpYTWdQU0I3WEc0Z0lDQWdJQ0F1TGk1amRYSnlaVzUwVW5CalRXVjBhRzlrVUhKbFptVnlaVzVqWlhNc1hHNGdJQ0FnSUNCYmJXVjBhRzlrVG1GdFpWMDZJR2x6Ulc1aFlteGxaQ3hjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdkR2hwY3k1emRHOXlaUzUxY0dSaGRHVlRkR0YwWlNoN1hHNGdJQ0FnSUNCa2FYTmhZbXhsWkZKd1kwMWxkR2h2WkZCeVpXWmxjbVZ1WTJWek9pQjFjR1JoZEdWa1VuQmpUV1YwYUc5a1VISmxabVZ5Wlc1alpYTXNYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JuWlhSU2NHTk5aWFJvYjJSUWNtVm1aWEpsYm1ObGN5Z3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6ZEc5eVpTNW5aWFJUZEdGMFpTZ3BMbVJwYzJGaWJHVmtVbkJqVFdWMGFHOWtVSEpsWm1WeVpXNWpaWE03WEc0Z0lIMWNibHh1SUNBdkwxeHVJQ0F2THlCUVVrbFdRVlJGSUUxRlZFaFBSRk5jYmlBZ0x5OWNibHh1SUNCZmMzVmljMk55YVdKbFZHOUpibVoxY21GQmRtRnBiR0ZpYVd4cGRIa29LU0I3WEc0Z0lDQWdkR2hwY3k1ZmIyNUpibVoxY21GSmMwSnNiMk5yWldRb0tDa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGN5NWZjMlYwU1c1bWRYSmhRbXh2WTJ0bFpDaDBjblZsS1R0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUhSb2FYTXVYMjl1U1c1bWRYSmhTWE5WYm1Kc2IyTnJaV1FvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdkR2hwY3k1ZmMyVjBTVzVtZFhKaFFteHZZMnRsWkNobVlXeHpaU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNwY2JpQWdJQ29nUVNCelpYUjBaWElnWm05eUlIUm9aU0JnYVc1bWRYSmhRbXh2WTJ0bFpHQWdjSEp2Y0dWeWRIbGNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0JwYzBKc2IyTnJaV1FnTFNCQ2IyOXNJR2x1WkdsallYUnBibWNnZDJobGRHaGxjaUJKYm1aMWNtRWdhWE1nWW14dlkydGxaRnh1SUNBZ0tpOWNiaUFnWDNObGRFbHVablZ5WVVKc2IyTnJaV1FvYVhOQ2JHOWphMlZrS1NCN1hHNGdJQ0FnWTI5dWMzUWdleUJwYm1aMWNtRkNiRzlqYTJWa0lIMGdQU0IwYUdsekxuTjBiM0psTG1kbGRGTjBZWFJsS0NrN1hHNWNiaUFnSUNCcFppQW9hVzVtZFhKaFFteHZZMnRsWkNBOVBUMGdhWE5DYkc5amEyVmtLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3SUdsdVpuVnlZVUpzYjJOclpXUTZJR2x6UW14dlkydGxaQ0I5S1R0Y2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElIc2dWMlZpTTFCeWIzWnBaR1Z5SUgwZ1puSnZiU0FuUUdWMGFHVnljM0J5YjJwbFkzUXZjSEp2ZG1sa1pYSnpKenRjYm1sdGNHOXlkQ0I3SUVOdmJuUnlZV04wSUgwZ1puSnZiU0FuUUdWMGFHVnljM0J5YjJwbFkzUXZZMjl1ZEhKaFkzUnpKenRjYm1sdGNHOXlkQ0JzYjJjZ1puSnZiU0FuYkc5bmJHVjJaV3duTzF4dWFXMXdiM0owSUVKcFowNTFiV0psY2lCbWNtOXRJQ2RpYVdkdWRXMWlaWEl1YW5Nbk8xeHVhVzF3YjNKMElIc2dUMkp6WlhKMllXSnNaVk4wYjNKbElIMGdabkp2YlNBblFHMWxkR0Z0WVhOckwyOWljeTF6ZEc5eVpTYzdYRzVwYlhCdmNuUWdleUJ0WVhCV1lXeDFaWE1zSUdOc2IyNWxSR1ZsY0NCOUlHWnliMjBnSjJ4dlpHRnphQ2M3WEc1cGJYQnZjblFnWVdKcElHWnliMjBnSjJoMWJXRnVMWE4wWVc1a1lYSmtMWFJ2YTJWdUxXRmlhU2M3WEc1cGJYQnZjblFnZTF4dUlDQmtaV05IVjBWSlZHOUlaWGhYUlVrc1hHNGdJSE4xYlVobGVHVnpMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6YUdGeVpXUXZiVzlrZFd4bGN5OWpiMjUyWlhKemFXOXVMblYwYVd4ekp6dGNibWx0Y0c5eWRDQjdYRzRnSUVSRlJrRlZURlJmUlZKRE1qQmZRVkJRVWs5V1JWOUhRVk1zWEc0Z0lGRlZUMVJGVTE5RldGQkpVa1ZFWDBWU1VrOVNMRnh1SUNCUlZVOVVSVk5mVGs5VVgwRldRVWxNUVVKTVJWOUZVbEpQVWl4Y2JpQWdVMWRCVUZOZlJrVlVRMGhmVDFKRVJWSmZRMDlPUmt4SlExUXNYRzRnSUZOWFFWQlRYME5JUVVsT1NVUmZRMDlPVkZKQlExUmZRVVJFVWtWVFUxOU5RVkFzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12YzNkaGNITW5PMXh1YVcxd2IzSjBJSHNnUjJGelJYTjBhVzFoZEdWVWVYQmxjeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZaMkZ6Snp0Y2JtbHRjRzl5ZENCN0lFTklRVWxPWDBsRVV5d2dUbVYwZDI5eWExTjBZWFIxY3lCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12Ym1WMGQyOXlheWM3WEc1cGJYQnZjblFnZTF4dUlDQkdRVXhNUWtGRFMxOVRUVUZTVkY5VVVrRk9VMEZEVkVsUFRsTmZVa1ZHVWtWVFNGOVVTVTFGTEZ4dUlDQkdRVXhNUWtGRFMxOVRUVUZTVkY5VVVrRk9VMEZEVkVsUFRsTmZSRVZCUkV4SlRrVXNYRzRnSUVaQlRFeENRVU5MWDFOTlFWSlVYMVJTUVU1VFFVTlVTVTlPVTE5TlFWaGZSa1ZGWDAxVlRGUkpVRXhKUlZJc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmMyMWhjblJVY21GdWMyRmpkR2x2Ym5Nbk8xeHVYRzVwYlhCdmNuUWdleUJwYzFOM1lYQnpSR1ZtWVhWc2RGUnZhMlZ1UVdSa2NtVnpjeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMM05vWVhKbFpDOXRiMlIxYkdWekwzTjNZWEJ6TG5WMGFXeHpKenRjYmx4dWFXMXdiM0owSUh0Y2JpQWdabVYwWTJoVWNtRmtaWE5KYm1adklHRnpJR1JsWm1GMWJIUkdaWFJqYUZSeVlXUmxjMGx1Wm04c1hHNGdJR2RsZEVKaGMyVkJjR2tzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1TDNOb1lYSmxaQzlzYVdJdmMzZGhjSE10ZFhScGJITW5PMXh1YVcxd2IzSjBJR1psZEdOb1YybDBhRU5oWTJobElHWnliMjBnSnk0dUx5NHVMeTR1TDNOb1lYSmxaQzlzYVdJdlptVjBZMmd0ZDJsMGFDMWpZV05vWlNjN1hHNXBiWEJ2Y25RZ2V5Qk5TVTVWVkVVc0lGTkZRMDlPUkNCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12ZEdsdFpTYzdYRzVwYlhCdmNuUWdleUJwYzBWeGRXRnNRMkZ6WlVsdWMyVnVjMmwwYVhabElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dmMyaGhjbVZrTDIxdlpIVnNaWE12YzNSeWFXNW5MWFYwYVd4ekp6dGNibWx0Y0c5eWRDQjdYRzRnSUdOaGJHTkhZWE5VYjNSaGJDeGNiaUFnWTJGc1kxUnZhMlZ1UVcxdmRXNTBMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6YUdGeVpXUXZiR2xpTDNSeVlXNXpZV04wYVc5dWN5MWpiMjUwY205c2JHVnlMWFYwYVd4ekp6dGNibWx0Y0c5eWRDQm1aWFJqYUVWemRHbHRZWFJsWkV3eFJtVmxJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMMmhsYkhCbGNuTXZkWFJwYkhNdmIzQjBhVzFwYzIwdlptVjBZMmhGYzNScGJXRjBaV1JNTVVabFpTYzdYRzVjYm1sdGNHOXlkQ0I3SUU1MWJXVnlhV01nZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6YUdGeVpXUXZiVzlrZFd4bGN5OU9kVzFsY21sakp6dGNibWx0Y0c5eWRDQjdJRVYwYUdWeVJHVnViMjFwYm1GMGFXOXVJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OWpiMjF0YjI0bk8xeHVYRzR2THlCVWFHVWdUVUZZWDBkQlUxOU1TVTFKVkNCcGN5QmhJRzUxYldKbGNpQjBhR0YwSUdseklHaHBaMmhsY2lCMGFHRnVJSFJvWlNCdFlYaHBiWFZ0SUdkaGN5QmpiM04wY3lCM1pTQm9ZWFpsSUc5aWMyVnlkbVZrSUc5dUlHRnVlU0JoWjJkeVpXZGhkRzl5WEc1amIyNXpkQ0JOUVZoZlIwRlRYMHhKVFVsVUlEMGdNalV3TURBd01EdGNibHh1THk4Z1ZHOGdaVzV6ZFhKbElIUm9ZWFFnYjNWeUlITmxjblpsY3lCaGNtVWdibTkwSUhOd1lXMXRaV1FnYVdZZ1RXVjBZVTFoYzJzZ2FYTWdiR1ZtZENCcFpHeGxMQ0IzWlNCc2FXMXBkQ0IwYUdVZ2JuVnRZbVZ5SUc5bUlHWmxkR05vWlhNZ1ptOXlJSEYxYjNSbGN5QjBhR0YwSUdGeVpTQnRZV1JsSUc5dUlIUnBiV1ZrSUdsdWRHVnlkbUZzY3k1Y2JpOHZJRE1nYzJWbGJYTWdkRzhnWW1VZ1lXNGdZWEJ3Y205d2NtbGhkR1VnWW1Gc1lXNWpaU0J2WmlCbmFYWnBibWNnZFhObGNuTWdkR2hsSUhScGJXVWdkR2hsZVNCdVpXVmtJSGRvWlc0Z1RXVjBZVTFoYzJzZ2FYTWdibTkwSUd4bFpuUWdhV1JzWlN3Z1lXNWtJSFIxY201cGJtY2djRzlzYkdsdVp5QnZabVlnZDJobGJpQnBkQ0JwY3k1Y2JtTnZibk4wSUZCUFRFeGZRMDlWVGxSZlRFbE5TVlFnUFNBek8xeHVYRzR2THlCSlppQm1iM0lnWVc1NUlISmxZWE52YmlCMGFHVWdUV1YwWVZOM1lYQWdRVkJKSUdaaGFXeHpJSFJ2SUhCeWIzWnBaR1VnWVNCeVpXWnlaWE5vSUhScGJXVXNYRzR2THlCd2NtOTJhV1JsSUdFZ2NtVmhjMjl1WVdKc1pTQm1ZV3hzWW1GamF5QjBieUJoZG05cFpDQm1kWEowYUdWeUlHVnljbTl5YzF4dVkyOXVjM1FnUmtGTVRFSkJRMHRmVVZWUFZFVmZVa1ZHVWtWVFNGOVVTVTFGSUQwZ1RVbE9WVlJGTzF4dVhHNW1kVzVqZEdsdmJpQmpZV3hqZFd4aGRHVkhZWE5GYzNScGJXRjBaVmRwZEdoU1pXWjFibVFvWEc0Z0lHMWhlRWRoY3lBOUlFMUJXRjlIUVZOZlRFbE5TVlFzWEc0Z0lHVnpkR2x0WVhSbFpGSmxablZ1WkNBOUlEQXNYRzRnSUdWemRHbHRZWFJsWkVkaGN5QTlJREFzWEc0cElIdGNiaUFnWTI5dWMzUWdiV0Y0UjJGelRXbHVkWE5TWldaMWJtUWdQU0J1WlhjZ1FtbG5UblZ0WW1WeUtHMWhlRWRoY3l3Z01UQXBMbTFwYm5WektGeHVJQ0FnSUdWemRHbHRZWFJsWkZKbFpuVnVaQ3hjYmlBZ0lDQXhNQ3hjYmlBZ0tUdGNiaUFnWTI5dWMzUWdhWE5OWVhoSFlYTk5hVzUxYzFKbFpuVnVaRTVsWjJGMGFYWmxJRDBnYldGNFIyRnpUV2x1ZFhOU1pXWjFibVF1YkhRb01DazdYRzVjYmlBZ1kyOXVjM1FnWjJGelJYTjBhVzFoZEdWWGFYUm9VbVZtZFc1a0lEMWNiaUFnSUNBaGFYTk5ZWGhIWVhOTmFXNTFjMUpsWm5WdVpFNWxaMkYwYVhabElDWW1JRzFoZUVkaGMwMXBiblZ6VW1WbWRXNWtMbXgwS0dWemRHbHRZWFJsWkVkaGN5d2dNVFlwWEc0Z0lDQWdJQ0EvSUdBd2VDUjdiV0Y0UjJGelRXbHVkWE5TWldaMWJtUXVkRzlUZEhKcGJtY29NVFlwZldCY2JpQWdJQ0FnSURvZ1pYTjBhVzFoZEdWa1IyRnpPMXh1WEc0Z0lISmxkSFZ5YmlCbllYTkZjM1JwYldGMFpWZHBkR2hTWldaMWJtUTdYRzU5WEc1Y2JtTnZibk4wSUdsdWFYUnBZV3hUZEdGMFpTQTlJSHRjYmlBZ2MzZGhjSE5UZEdGMFpUb2dlMXh1SUNBZ0lIRjFiM1JsY3pvZ2UzMHNYRzRnSUNBZ2NYVnZkR1Z6VUc5c2JHbHVaMHhwYldsMFJXNWhZbXhsWkRvZ1ptRnNjMlVzWEc0Z0lDQWdabVYwWTJoUVlYSmhiWE02SUc1MWJHd3NYRzRnSUNBZ2RHOXJaVzV6T2lCdWRXeHNMRnh1SUNBZ0lIUnlZV1JsVkhoSlpEb2diblZzYkN4Y2JpQWdJQ0JoY0hCeWIzWmxWSGhKWkRvZ2JuVnNiQ3hjYmlBZ0lDQnhkVzkwWlhOTVlYTjBSbVYwWTJobFpEb2diblZzYkN4Y2JpQWdJQ0JqZFhOMGIyMU5ZWGhIWVhNNklDY25MRnh1SUNBZ0lHTjFjM1J2YlVkaGMxQnlhV05sT2lCdWRXeHNMRnh1SUNBZ0lHTjFjM1J2YlUxaGVFWmxaVkJsY2tkaGN6b2diblZzYkN4Y2JpQWdJQ0JqZFhOMGIyMU5ZWGhRY21sdmNtbDBlVVpsWlZCbGNrZGhjem9nYm5Wc2JDeGNiaUFnSUNCemQyRndjMVZ6WlhKR1pXVk1aWFpsYkRvZ0p5Y3NYRzRnSUNBZ2MyVnNaV04wWldSQloyZEpaRG9nYm5Wc2JDeGNiaUFnSUNCamRYTjBiMjFCY0hCeWIzWmxWSGhFWVhSaE9pQW5KeXhjYmlBZ0lDQmxjbkp2Y2t0bGVUb2dKeWNzWEc0Z0lDQWdkRzl3UVdkblNXUTZJRzUxYkd3c1hHNGdJQ0FnY205MWRHVlRkR0YwWlRvZ0p5Y3NYRzRnSUNBZ2MzZGhjSE5HWldGMGRYSmxTWE5NYVhabE9pQjBjblZsTEZ4dUlDQWdJSE5oZG1WR1pYUmphR1ZrVVhWdmRHVnpPaUJtWVd4elpTeGNiaUFnSUNCemQyRndjMUYxYjNSbFVtVm1jbVZ6YUZScGJXVTZJRVpCVEV4Q1FVTkxYMUZWVDFSRlgxSkZSbEpGVTBoZlZFbE5SU3hjYmlBZ0lDQnpkMkZ3YzFGMWIzUmxVSEpsWm1WMFkyaHBibWRTWldaeVpYTm9WR2x0WlRvZ1JrRk1URUpCUTB0ZlVWVlBWRVZmVWtWR1VrVlRTRjlVU1UxRkxGeHVJQ0FnSUhOM1lYQnpVM1I0UW1GMFkyaFRkR0YwZFhOU1pXWnlaWE5vVkdsdFpUb2dSa0ZNVEVKQlEwdGZVMDFCVWxSZlZGSkJUbE5CUTFSSlQwNVRYMUpGUmxKRlUwaGZWRWxOUlN4Y2JpQWdJQ0J6ZDJGd2MxTjBlRWRsZEZSeVlXNXpZV04wYVc5dWMxSmxabkpsYzJoVWFXMWxPbHh1SUNBZ0lDQWdSa0ZNVEVKQlEwdGZVMDFCVWxSZlZGSkJUbE5CUTFSSlQwNVRYMUpGUmxKRlUwaGZWRWxOUlN4Y2JpQWdJQ0J6ZDJGd2MxTjBlRTFoZUVabFpVMTFiSFJwY0d4cFpYSTZJRVpCVEV4Q1FVTkxYMU5OUVZKVVgxUlNRVTVUUVVOVVNVOU9VMTlOUVZoZlJrVkZYMDFWVEZSSlVFeEpSVklzWEc0Z0lDQWdjM2RoY0hOR1pXRjBkWEpsUm14aFozTTZJSHQ5TEZ4dUlDQjlMRnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nVTNkaGNITkRiMjUwY205c2JHVnlJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9lMXh1SUNBZ0lHZGxkRUoxWm1abGNtVmtSMkZ6VEdsdGFYUXNYRzRnSUNBZ2JtVjBkMjl5YTBOdmJuUnliMnhzWlhJc1hHNGdJQ0FnY0hKdmRtbGtaWElzWEc0Z0lDQWdaMlYwVUhKdmRtbGtaWEpEYjI1bWFXY3NYRzRnSUNBZ1oyVjBWRzlyWlc1U1lYUmxjMU4wWVhSbExGeHVJQ0FnSUdabGRHTm9WSEpoWkdWelNXNW1ieUE5SUdSbFptRjFiSFJHWlhSamFGUnlZV1JsYzBsdVptOHNYRzRnSUNBZ1oyVjBRM1Z5Y21WdWRFTm9ZV2x1U1dRc1hHNGdJQ0FnWjJWMFJVbFFNVFUxT1VkaGMwWmxaVVZ6ZEdsdFlYUmxjeXhjYmlBZ0lDQnZiazVsZEhkdmNtdFRkR0YwWlVOb1lXNW5aU3hjYmlBZ2ZTa2dlMXh1SUNBZ0lIUm9hWE11YzNSdmNtVWdQU0J1WlhjZ1QySnpaWEoyWVdKc1pWTjBiM0psS0h0Y2JpQWdJQ0FnSUhOM1lYQnpVM1JoZEdVNklIc2dMaTR1YVc1cGRHbGhiRk4wWVhSbExuTjNZWEJ6VTNSaGRHVWdmU3hjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJSFJvYVhNdWNtVnpaWFJUZEdGMFpTQTlJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZXlCemQyRndjMU4wWVhSbE9pQjdJQzR1TG1sdWFYUnBZV3hUZEdGMFpTNXpkMkZ3YzFOMFlYUmxJSDBnZlNrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUhSb2FYTXVYMlpsZEdOb1ZISmhaR1Z6U1c1bWJ5QTlJR1psZEdOb1ZISmhaR1Z6U1c1bWJ6dGNiaUFnSUNCMGFHbHpMbDluWlhSRGRYSnlaVzUwUTJoaGFXNUpaQ0E5SUdkbGRFTjFjbkpsYm5SRGFHRnBia2xrTzF4dUlDQWdJSFJvYVhNdVgyZGxkRVZKVURFMU5UbEhZWE5HWldWRmMzUnBiV0YwWlhNZ1BTQm5aWFJGU1ZBeE5UVTVSMkZ6Um1WbFJYTjBhVzFoZEdWek8xeHVYRzRnSUNBZ2RHaHBjeTVuWlhSQ2RXWm1aWEpsWkVkaGMweHBiV2wwSUQwZ1oyVjBRblZtWm1WeVpXUkhZWE5NYVcxcGREdGNiaUFnSUNCMGFHbHpMbWRsZEZSdmEyVnVVbUYwWlhOVGRHRjBaU0E5SUdkbGRGUnZhMlZ1VW1GMFpYTlRkR0YwWlR0Y2JseHVJQ0FnSUhSb2FYTXVjRzlzYkVOdmRXNTBJRDBnTUR0Y2JpQWdJQ0IwYUdsekxtZGxkRkJ5YjNacFpHVnlRMjl1Wm1sbklEMGdaMlYwVUhKdmRtbGtaWEpEYjI1bWFXYzdYRzVjYmlBZ0lDQjBhR2x6TG1sdVpHVjRUMlpPWlhkbGMzUkRZV3hzU1c1R2JHbG5hSFFnUFNBd08xeHVYRzRnSUNBZ2RHaHBjeTVsZEdobGNuTlFjbTkyYVdSbGNpQTlJRzVsZHlCWFpXSXpVSEp2ZG1sa1pYSW9jSEp2ZG1sa1pYSXBPMXh1SUNBZ0lIUm9hWE11WDJOMWNuSmxiblJPWlhSM2IzSnJTV1FnUFNCdVpYUjNiM0pyUTI5dWRISnZiR3hsY2k1emRHOXlaUzVuWlhSVGRHRjBaU2dwTG01bGRIZHZjbXRKWkR0Y2JpQWdJQ0J2Yms1bGRIZHZjbXRUZEdGMFpVTm9ZVzVuWlNnb0tTQTlQaUI3WEc0Z0lDQWdJQ0JqYjI1emRDQjdJRzVsZEhkdmNtdEpaQ3dnYm1WMGQyOXlhMU4wWVhSMWN5QjlJRDBnYm1WMGQyOXlhME52Ym5SeWIyeHNaWEl1YzNSdmNtVXVaMlYwVTNSaGRHVW9LVHRjYmlBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ2JtVjBkMjl5YTFOMFlYUjFjeUE5UFQwZ1RtVjBkMjl5YTFOMFlYUjFjeTVCZG1GcGJHRmliR1VnSmlaY2JpQWdJQ0FnSUNBZ2JtVjBkMjl5YTBsa0lDRTlQU0IwYUdsekxsOWpkWEp5Wlc1MFRtVjBkMjl5YTBsa1hHNGdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEU1bGRIZHZjbXRKWkNBOUlHNWxkSGR2Y210SlpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGRHaGxjbk5RY205MmFXUmxjaUE5SUc1bGR5QlhaV0l6VUhKdmRtbGtaWElvY0hKdmRtbGtaWElwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1lYTjVibU1nWm1WMFkyaFRkMkZ3YzA1bGRIZHZjbXREYjI1bWFXY29ZMmhoYVc1SlpDa2dlMXh1SUNBZ0lHTnZibk4wSUhKbGMzQnZibk5sSUQwZ1lYZGhhWFFnWm1WMFkyaFhhWFJvUTJGamFHVW9YRzRnSUNBZ0lDQm5aWFJDWVhObFFYQnBLQ2R1WlhSM2IzSnJKeXdnWTJoaGFXNUpaQ2tzWEc0Z0lDQWdJQ0I3SUcxbGRHaHZaRG9nSjBkRlZDY2dmU3hjYmlBZ0lDQWdJSHNnWTJGamFHVlNaV1p5WlhOb1ZHbHRaVG9nTmpBd01EQXdJSDBzWEc0Z0lDQWdLVHRjYmlBZ0lDQmpiMjV6ZENCN0lISmxabkpsYzJoU1lYUmxjeXdnY0dGeVlXMWxkR1Z5Y3lBOUlIdDlJSDBnUFNCeVpYTndiMjV6WlNCOGZDQjdmVHRjYmlBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FoY21WbWNtVnphRkpoZEdWeklIeDhYRzRnSUNBZ0lDQjBlWEJsYjJZZ2NtVm1jbVZ6YUZKaGRHVnpMbkYxYjNSbGN5QWhQVDBnSjI1MWJXSmxjaWNnZkh4Y2JpQWdJQ0FnSUhSNWNHVnZaaUJ5WldaeVpYTm9VbUYwWlhNdWNYVnZkR1Z6VUhKbFptVjBZMmhwYm1jZ0lUMDlJQ2R1ZFcxaVpYSW5YRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lHQk5aWFJoVFdGemF5QXRJR2x1ZG1Gc2FXUWdjbVZ6Y0c5dWMyVWdabTl5SUhKbFpuSmxjMmhTWVhSbGN6b2dKSHR5WlhOd2IyNXpaWDFnTEZ4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnVjJVZ2NISmxjMlZ1ZEd4NUlIVnpaU0J0YVd4c2FYTmxZMjl1WkhNZ2FXNGdkR2hsSUZWSkxseHVJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0J4ZFc5MFpYTTZJSEpsWm5KbGMyaFNZWFJsY3k1eGRXOTBaWE1nS2lBeE1EQXdMRnh1SUNBZ0lDQWdjWFZ2ZEdWelVISmxabVYwWTJocGJtYzZJSEpsWm5KbGMyaFNZWFJsY3k1eGRXOTBaWE5RY21WbVpYUmphR2x1WnlBcUlERXdNREFzWEc0Z0lDQWdJQ0J6ZEhoSFpYUlVjbUZ1YzJGamRHbHZibk02SUhKbFpuSmxjMmhTWVhSbGN5NXpkSGhIWlhSVWNtRnVjMkZqZEdsdmJuTWdLaUF4TURBd0xGeHVJQ0FnSUNBZ2MzUjRRbUYwWTJoVGRHRjBkWE02SUhKbFpuSmxjMmhTWVhSbGN5NXpkSGhDWVhSamFGTjBZWFIxY3lBcUlERXdNREFzWEc0Z0lDQWdJQ0J6ZEhoVGRHRjBkWE5FWldGa2JHbHVaVG9nY21WbWNtVnphRkpoZEdWekxuTjBlRk4wWVhSMWMwUmxZV1JzYVc1bExGeHVJQ0FnSUNBZ2MzUjRUV0Y0Um1WbFRYVnNkR2x3YkdsbGNqb2djR0Z5WVcxbGRHVnljeTV6ZEhoTllYaEdaV1ZOZFd4MGFYQnNhV1Z5TEZ4dUlDQWdJSDA3WEc0Z0lIMWNibHh1SUNBdkx5QlRaWFJ6SUhSb1pTQnVaWFIzYjNKcklHTnZibVpwWnlCbWNtOXRJSFJvWlNCTlpYUmhVM2RoY0NCQlVFa3VYRzRnSUdGemVXNWpJRjl6WlhSVGQyRndjMDVsZEhkdmNtdERiMjVtYVdjb0tTQjdYRzRnSUNBZ1kyOXVjM1FnWTJoaGFXNUpaQ0E5SUhSb2FYTXVYMmRsZEVOMWNuSmxiblJEYUdGcGJrbGtLQ2s3WEc0Z0lDQWdiR1YwSUhOM1lYQnpUbVYwZDI5eWEwTnZibVpwWnp0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ2MzZGhjSE5PWlhSM2IzSnJRMjl1Wm1sbklEMGdZWGRoYVhRZ2RHaHBjeTVtWlhSamFGTjNZWEJ6VG1WMGQyOXlhME52Ym1acFp5aGphR0ZwYmtsa0tUdGNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NkU1pYRjFaWE4wSUdadmNpQlRkMkZ3Y3lCdVpYUjNiM0pySUdOdmJtWnBaeUJtWVdsc1pXUTZJQ2NzSUdVcE8xeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1emRDQjdJSE4zWVhCelUzUmhkR1U2SUd4aGRHVnpkRk4zWVhCelUzUmhkR1VnZlNBOUlIUm9hWE11YzNSdmNtVXVaMlYwVTNSaGRHVW9LVHRjYmlBZ0lDQjBhR2x6TG5OMGIzSmxMblZ3WkdGMFpWTjBZWFJsS0h0Y2JpQWdJQ0FnSUhOM1lYQnpVM1JoZEdVNklIdGNiaUFnSUNBZ0lDQWdMaTR1YkdGMFpYTjBVM2RoY0hOVGRHRjBaU3hjYmlBZ0lDQWdJQ0FnYzNkaGNITlJkVzkwWlZKbFpuSmxjMmhVYVcxbE9seHVJQ0FnSUNBZ0lDQWdJSE4zWVhCelRtVjBkMjl5YTBOdmJtWnBaejh1Y1hWdmRHVnpJSHg4SUVaQlRFeENRVU5MWDFGVlQxUkZYMUpGUmxKRlUwaGZWRWxOUlN4Y2JpQWdJQ0FnSUNBZ2MzZGhjSE5SZFc5MFpWQnlaV1psZEdOb2FXNW5VbVZtY21WemFGUnBiV1U2WEc0Z0lDQWdJQ0FnSUNBZ2MzZGhjSE5PWlhSM2IzSnJRMjl1Wm1sblB5NXhkVzkwWlhOUWNtVm1aWFJqYUdsdVp5QjhmQ0JHUVV4TVFrRkRTMTlSVlU5VVJWOVNSVVpTUlZOSVgxUkpUVVVzWEc0Z0lDQWdJQ0FnSUhOM1lYQnpVM1I0UjJWMFZISmhibk5oWTNScGIyNXpVbVZtY21WemFGUnBiV1U2WEc0Z0lDQWdJQ0FnSUNBZ2MzZGhjSE5PWlhSM2IzSnJRMjl1Wm1sblB5NXpkSGhIWlhSVWNtRnVjMkZqZEdsdmJuTWdmSHhjYmlBZ0lDQWdJQ0FnSUNCR1FVeE1Ra0ZEUzE5VFRVRlNWRjlVVWtGT1UwRkRWRWxQVGxOZlVrVkdVa1ZUU0Y5VVNVMUZMRnh1SUNBZ0lDQWdJQ0J6ZDJGd2MxTjBlRUpoZEdOb1UzUmhkSFZ6VW1WbWNtVnphRlJwYldVNlhHNGdJQ0FnSUNBZ0lDQWdjM2RoY0hOT1pYUjNiM0pyUTI5dVptbG5QeTV6ZEhoQ1lYUmphRk4wWVhSMWN5QjhmRnh1SUNBZ0lDQWdJQ0FnSUVaQlRFeENRVU5MWDFOTlFWSlVYMVJTUVU1VFFVTlVTVTlPVTE5U1JVWlNSVk5JWDFSSlRVVXNYRzRnSUNBZ0lDQWdJSE4zWVhCelUzUjRVM1JoZEhWelJHVmhaR3hwYm1VNlhHNGdJQ0FnSUNBZ0lDQWdjM2RoY0hOT1pYUjNiM0pyUTI5dVptbG5QeTV6ZEhoVGRHRjBkWE5FWldGa2JHbHVaU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lFWkJURXhDUVVOTFgxTk5RVkpVWDFSU1FVNVRRVU5VU1U5T1UxOUVSVUZFVEVsT1JTeGNiaUFnSUNBZ0lDQWdjM2RoY0hOVGRIaE5ZWGhHWldWTmRXeDBhWEJzYVdWeU9seHVJQ0FnSUNBZ0lDQWdJSE4zWVhCelRtVjBkMjl5YTBOdmJtWnBaejh1YzNSNFRXRjRSbVZsVFhWc2RHbHdiR2xsY2lCOGZGeHVJQ0FnSUNBZ0lDQWdJRVpCVEV4Q1FVTkxYMU5OUVZKVVgxUlNRVTVUUVVOVVNVOU9VMTlOUVZoZlJrVkZYMDFWVEZSSlVFeEpSVklzWEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5OGdUMjVqWlNCeGRXOTBaWE1nWVhKbElHWmxkR05vWldRc0lIZGxJSEJ2Ykd3Z1ptOXlJRzVsZHlCdmJtVnpJSFJ2SUd0bFpYQWdkR2hsSUhGMWIzUmxjeUIxY0NCMGJ5QmtZWFJsTGlCTllYSnJaWFFnWVc1a0lHRm5aM0psWjJGMGIzSWdZMjl1ZEhKaFkzUWdZMjl1WkdsMGFXOXVjeUJqWVc0Z1kyaGhibWRsSUdaaGMzUWdaVzV2ZFdkb1hHNGdJQzh2SUhSb1lYUWdjWFZ2ZEdWeklIZHBiR3dnYm04Z2JHOXVaMlZ5SUdKbElHRjJZV2xzWVdKc1pTQmhablJsY2lBeElHOXlJRElnYldsdWRYUmxjeTRnVjJobGJpQm1aWFJqYUVGdVpGTmxkRkYxYjNSbGN5QnBjeUJtYVhKemRDQmpZV3hzWldRc0lHbDBJSEpsWTJWcGRtVnpJR1psZEdOb0lIQmhjbUZ0WlhSbGNuTWdkR2hoZENCaGNtVWdjM1J2Y21Wa0lHbHVYRzRnSUM4dklITjBZWFJsTGlCVWFHVnpaU0J6ZEc5eVpXUWdjR0Z5WVcxbGRHVnljeUJoY21VZ2RYTmxaQ0J2YmlCemRXSnpaWEYxWlc1MElHTmhiR3h6SUcxaFpHVWdaSFZ5YVc1bklIQnZiR3hwYm1jdVhHNGdJQzh2SUU1dmRHVTZJSGRsSUhOMGIzQWdjRzlzYkdsdVp5QmhablJsY2lBeklISmxjWFZsYzNSekxDQjFiblJwYkNCdVpYY2djWFZ2ZEdWeklHRnlaU0JsZUhCc2FXTnBkR3g1SUdGemEyVmtJR1p2Y2k0Z1ZHaGxJR3h2WjJsaklIUm9ZWFFnWlc1bWIzSmpaWE1nZEdoaGRDQnRZWGhwYlhWdElHbHpJR2x1SUhSb1pTQmliMlI1SUc5bUlHWmxkR05vUVc1a1UyVjBVWFZ2ZEdWelhHNGdJSEJ2Ykd4R2IzSk9aWGRSZFc5MFpYTW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2UxeHVJQ0FnSUNBZ2MzZGhjSE5UZEdGMFpUb2dlMXh1SUNBZ0lDQWdJQ0J6ZDJGd2MxRjFiM1JsVW1WbWNtVnphRlJwYldVc1hHNGdJQ0FnSUNBZ0lITjNZWEJ6VVhWdmRHVlFjbVZtWlhSamFHbHVaMUpsWm5KbGMyaFVhVzFsTEZ4dUlDQWdJQ0FnSUNCeGRXOTBaWE5RYjJ4c2FXNW5UR2x0YVhSRmJtRmliR1ZrTEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0I5SUQwZ2RHaHBjeTV6ZEc5eVpTNW5aWFJUZEdGMFpTZ3BPMXh1SUNBZ0lDOHZJSE4zWVhCelVYVnZkR1ZTWldaeVpYTm9WR2x0WlNCcGN5QjFjMlZrSUc5dUlIUm9aU0JXYVdWM0lGRjFiM1JsSUhCaFoyVXNJSE4zWVhCelVYVnZkR1ZRY21WbVpYUmphR2x1WjFKbFpuSmxjMmhVYVcxbElHbHpJSFZ6WldRZ2IyNGdkR2hsSUVKMWFXeGtJRkYxYjNSbElIQmhaMlV1WEc0Z0lDQWdZMjl1YzNRZ2NYVnZkR1Z6VW1WbWNtVnphRkpoZEdWSmJrMXpJRDBnY1hWdmRHVnpVRzlzYkdsdVoweHBiV2wwUlc1aFlteGxaRnh1SUNBZ0lDQWdQeUJ6ZDJGd2MxRjFiM1JsVW1WbWNtVnphRlJwYldWY2JpQWdJQ0FnSURvZ2MzZGhjSE5SZFc5MFpWQnlaV1psZEdOb2FXNW5VbVZtY21WemFGUnBiV1U3WEc0Z0lDQWdkR2hwY3k1d2IyeHNhVzVuVkdsdFpXOTFkQ0E5SUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnZTF4dUlDQWdJQ0FnWTI5dWMzUWdleUJ6ZDJGd2MxTjBZWFJsSUgwZ1BTQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2s3WEc0Z0lDQWdJQ0IwYUdsekxtWmxkR05vUVc1a1UyVjBVWFZ2ZEdWektGeHVJQ0FnSUNBZ0lDQnpkMkZ3YzFOMFlYUmxMbVpsZEdOb1VHRnlZVzF6TEZ4dUlDQWdJQ0FnSUNCemQyRndjMU4wWVhSbExtWmxkR05vVUdGeVlXMXpQeTV0WlhSaFJHRjBZU3hjYmlBZ0lDQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZTd2djWFZ2ZEdWelVtVm1jbVZ6YUZKaGRHVkpiazF6S1R0Y2JpQWdmVnh1WEc0Z0lITjBiM0JRYjJ4c2FXNW5SbTl5VVhWdmRHVnpLQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbkJ2Ykd4cGJtZFVhVzFsYjNWMEtTQjdYRzRnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvZEdocGN5NXdiMnhzYVc1blZHbHRaVzkxZENrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1lYTjVibU1nWm1WMFkyaEJibVJUWlhSUmRXOTBaWE1vWEc0Z0lDQWdabVYwWTJoUVlYSmhiWE1zWEc0Z0lDQWdabVYwWTJoUVlYSmhiWE5OWlhSaFJHRjBZU0E5SUh0OUxGeHVJQ0FnSUdselVHOXNiR1ZrVW1WeGRXVnpkQ3hjYmlBZ0tTQjdYRzRnSUNBZ1kyOXVjM1FnZXlCamFHRnBia2xrSUgwZ1BTQm1aWFJqYUZCaGNtRnRjMDFsZEdGRVlYUmhPMXh1SUNBZ0lHTnZibk4wSUh0Y2JpQWdJQ0FnSUhOM1lYQnpVM1JoZEdVNklIc2djWFZ2ZEdWelVHOXNiR2x1WjB4cGJXbDBSVzVoWW14bFpDd2djMkYyWlVabGRHTm9aV1JSZFc5MFpYTWdmU3hjYmlBZ0lDQjlJRDBnZEdocGN5NXpkRzl5WlM1blpYUlRkR0YwWlNncE8xeHVYRzRnSUNBZ2FXWWdLQ0ZtWlhSamFGQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklFVjJaWEo1SUhScGJXVWdkMlVnWjJWMElHRWdibVYzSUhKbGNYVmxjM1FnZEdoaGRDQnBjeUJ1YjNRZ1puSnZiU0IwYUdVZ2NHOXNiR2x1Wnl3Z2QyVWdjbVZ6WlhRZ2RHaGxJSEJ2Ykd3Z1kyOTFiblFnYzI4Z2QyVWdZMkZ1SUhCdmJHd2dabTl5SUhWd0lIUnZJSFJvY21WbElHMXZjbVVnYzJWMGN5QnZaaUJ4ZFc5MFpYTWdkMmwwYUNCMGFHVnpaU0J1WlhjZ2NHRnlZVzF6TGx4dUlDQWdJR2xtSUNnaGFYTlFiMnhzWldSU1pYRjFaWE4wS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkJ2Ykd4RGIzVnVkQ0E5SURBN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1NXWWdkR2hsY21VZ1lYSmxJR0Z1ZVNCd1pXNWthVzVuSUhCdmJHd2djbVZ4ZFdWemRITXNJR05zWldGeUlIUm9aVzBnYzI4Z2RHaGhkQ0IwYUdWNUlHUnZiaWQwSUdkbGRDQmpZV3hzSUhkb2FXeGxJSFJvYVhNZ2JtVjNJR1psZEdOb0lHbHpJR2x1SUhCeWIyTmxjM05jYmlBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvZEdocGN5NXdiMnhzYVc1blZHbHRaVzkxZENrN1hHNWNiaUFnSUNCcFppQW9JV2x6VUc5c2JHVmtVbVZ4ZFdWemRDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1elpYUlRkMkZ3YzBWeWNtOXlTMlY1S0NjbktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0JwYm1SbGVFOW1RM1Z5Y21WdWRFTmhiR3dnUFNCMGFHbHpMbWx1WkdWNFQyWk9aWGRsYzNSRFlXeHNTVzVHYkdsbmFIUWdLeUF4TzF4dUlDQWdJSFJvYVhNdWFXNWtaWGhQWms1bGQyVnpkRU5oYkd4SmJrWnNhV2RvZENBOUlHbHVaR1Y0VDJaRGRYSnlaVzUwUTJGc2JEdGNibHh1SUNBZ0lHbG1JQ2doYzJGMlpVWmxkR05vWldSUmRXOTBaWE1wSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjMlYwVTJGMlpVWmxkR05vWldSUmRXOTBaWE1vZEhKMVpTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JHVjBJRnR1WlhkUmRXOTBaWE5kSUQwZ1lYZGhhWFFnVUhKdmJXbHpaUzVoYkd3b1cxeHVJQ0FnSUNBZ2RHaHBjeTVmWm1WMFkyaFVjbUZrWlhOSmJtWnZLR1psZEdOb1VHRnlZVzF6TENCN1hHNGdJQ0FnSUNBZ0lDNHVMbVpsZEdOb1VHRnlZVzF6VFdWMFlVUmhkR0VzWEc0Z0lDQWdJQ0I5S1N4Y2JpQWdJQ0FnSUhSb2FYTXVYM05sZEZOM1lYQnpUbVYwZDI5eWEwTnZibVpwWnlncExGeHVJQ0FnSUYwcE8xeHVYRzRnSUNBZ1kyOXVjM1FnZTF4dUlDQWdJQ0FnYzNkaGNITlRkR0YwWlRvZ2V5QnpZWFpsUm1WMFkyaGxaRkYxYjNSbGN6b2djMkYyWlVabGRHTm9aV1JSZFc5MFpYTkJablJsY2xKbGMzQnZibk5sSUgwc1hHNGdJQ0FnZlNBOUlIUm9hWE11YzNSdmNtVXVaMlYwVTNSaGRHVW9LVHRjYmx4dUlDQWdJQzh2SUVsbUlITmhkbVZHWlhSamFHVmtVWFZ2ZEdWelFXWjBaWEpTWlhOd2IyNXpaU0JwY3lCbVlXeHpaU3dnYVhRZ2JXVmhibk1nWVNCMWMyVnlJR3hsWm5RZ1UzZGhjSE1nS0hkbElHTnNaV0Z1WldRZ2RHaGxJSE4wWVhSbEtWeHVJQ0FnSUM4dklHRnVaQ0IzWlNCa2IyNG5kQ0IzWVc1MElIUnZJSE5sZENCaGJua2dRVkJKSUhKbGMzQnZibk5sSUhkcGRHZ2djWFZ2ZEdWeklHbHVkRzhnYzNSaGRHVXVYRzRnSUNBZ2FXWWdLQ0Z6WVhabFJtVjBZMmhsWkZGMWIzUmxjMEZtZEdWeVVtVnpjRzl1YzJVcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCYlhHNGdJQ0FnSUNBZ0lIdDlMQ0F2THlCeGRXOTBaWE5jYmlBZ0lDQWdJQ0FnYm5Wc2JDd2dMeThnYzJWc1pXTjBaV1JCWjJkSlpGeHVJQ0FnSUNBZ1hUdGNiaUFnSUNCOVhHNWNiaUFnSUNCdVpYZFJkVzkwWlhNZ1BTQnRZWEJXWVd4MVpYTW9ibVYzVVhWdmRHVnpMQ0FvY1hWdmRHVXBJRDArSUNoN1hHNGdJQ0FnSUNBdUxpNXhkVzkwWlN4Y2JpQWdJQ0FnSUhOdmRYSmpaVlJ2YTJWdVNXNW1iem9nWm1WMFkyaFFZWEpoYlhOTlpYUmhSR0YwWVM1emIzVnlZMlZVYjJ0bGJrbHVabThzWEc0Z0lDQWdJQ0JrWlhOMGFXNWhkR2x2YmxSdmEyVnVTVzVtYnpvZ1ptVjBZMmhRWVhKaGJYTk5aWFJoUkdGMFlTNWtaWE4wYVc1aGRHbHZibFJ2YTJWdVNXNW1ieXhjYmlBZ0lDQjlLU2s3WEc1Y2JpQWdJQ0JwWmlBb1kyaGhhVzVKWkNBOVBUMGdRMGhCU1U1ZlNVUlRMazlRVkVsTlNWTk5JQ1ltSUU5aWFtVmpkQzUyWVd4MVpYTW9ibVYzVVhWdmRHVnpLUzVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNCaGQyRnBkQ0JRY205dGFYTmxMbUZzYkNoY2JpQWdJQ0FnSUNBZ1QySnFaV04wTG5aaGJIVmxjeWh1WlhkUmRXOTBaWE1wTG0xaGNDaGhjM2x1WXlBb2NYVnZkR1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2NYVnZkR1V1ZEhKaFpHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUcxMWJIUnBUR0Y1WlhKTU1WUnlZV1JsUm1WbFZHOTBZV3dnUFNCaGQyRnBkQ0JtWlhSamFFVnpkR2x0WVhSbFpFd3hSbVZsS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYUdGcGJrbGtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGhRWVhKaGJYTTZJSEYxYjNSbExuUnlZV1JsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb1lXbHVTV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpYUm9aWEp6VUhKdmRtbGtaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NYVnZkR1V1YlhWc2RHbE1ZWGxsY2t3eFZISmhaR1ZHWldWVWIzUmhiQ0E5SUcxMWJIUnBUR0Y1WlhKTU1WUnlZV1JsUm1WbFZHOTBZV3c3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnhkVzkwWlR0Y2JpQWdJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUhGMWIzUmxjMHhoYzNSR1pYUmphR1ZrSUQwZ1JHRjBaUzV1YjNjb0tUdGNibHh1SUNBZ0lHeGxkQ0JoY0hCeWIzWmhiRkpsY1hWcGNtVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdJV2x6VTNkaGNITkVaV1poZFd4MFZHOXJaVzVCWkdSeVpYTnpLR1psZEdOb1VHRnlZVzF6TG5OdmRYSmpaVlJ2YTJWdUxDQmphR0ZwYmtsa0tTQW1KbHh1SUNBZ0lDQWdUMkpxWldOMExuWmhiSFZsY3lodVpYZFJkVzkwWlhNcExteGxibWQwYUZ4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdZV3hzYjNkaGJtTmxJRDBnWVhkaGFYUWdkR2hwY3k1ZloyVjBSVkpETWpCQmJHeHZkMkZ1WTJVb1hHNGdJQ0FnSUNBZ0lHWmxkR05vVUdGeVlXMXpMbk52ZFhKalpWUnZhMlZ1TEZ4dUlDQWdJQ0FnSUNCbVpYUmphRkJoY21GdGN5NW1jbTl0UVdSa2NtVnpjeXhjYmlBZ0lDQWdJQ0FnWTJoaGFXNUpaQ3hjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0JqYjI1emRDQmJabWx5YzNSUmRXOTBaVjBnUFNCUFltcGxZM1F1ZG1Gc2RXVnpLRzVsZDFGMWIzUmxjeWs3WEc1Y2JpQWdJQ0FnSUM4dklFWnZjaUJoSUhWelpYSWdkRzhnWW1VZ1lXSnNaU0IwYnlCemQyRndJR0VnZEc5clpXNHNJSFJvWlhrZ2JtVmxaQ0IwYnlCb1lYWmxJR0Z3Y0hKdmRtVmtJSFJvWlNCTlpYUmhVM2RoY0NCamIyNTBjbUZqZENCMGJ5QjNhWFJvWkhKaGR5QjBhR0YwSUhSdmEyVnVMbHh1SUNBZ0lDQWdMeThnWDJkbGRFVlNRekl3UVd4c2IzZGhibU5sS0NrZ2NtVjBkWEp1Y3lCMGFHVWdZVzF2ZFc1MElHOW1JSFJvWlNCMGIydGxiaUIwYUdWNUlHaGhkbVVnWVhCd2NtOTJaV1FnWm05eUlIZHBkR2hrY21GM1lXd3VJRWxtSUhSb1lYUWdZVzF2ZFc1MElHbHpJR2R5WldGMFpYSmNiaUFnSUNBZ0lDOHZJSFJvWVc0Z01Dd2dhWFFnYldWaGJuTWdkR2hoZENCaGNIQnliM1poYkNCb1lYTWdZV3h5WldGa2VTQnZZMk4xY25KbFpDQmhibVFnYVhNZ2JtOTBJRzVsWldSbFpDNGdUM1JvWlhKM2FYTmxMQ0JtYjNJZ2RHOXJaVzV6SUhSdklHSmxJSE4zWVhCd1pXUXNJR0VnYm1WM1hHNGdJQ0FnSUNBdkx5QmpZV3hzSUc5bUlIUm9aU0JGVWtNdE1qQWdZWEJ3Y205MlpTQnRaWFJvYjJRZ2FYTWdjbVZ4ZFdseVpXUXVYRzRnSUNBZ0lDQmhjSEJ5YjNaaGJGSmxjWFZwY21Wa0lEMWNiaUFnSUNBZ0lDQWdabWx5YzNSUmRXOTBaUzVoY0hCeWIzWmhiRTVsWldSbFpDQW1KbHh1SUNBZ0lDQWdJQ0JoYkd4dmQyRnVZMlV1WlhFb01Da2dKaVpjYmlBZ0lDQWdJQ0FnWm1seWMzUlJkVzkwWlM1aFoyZHlaV2RoZEc5eUlDRTlQU0FuZDNKaGNIQmxaRTVoZEdsMlpTYzdYRzRnSUNBZ0lDQnBaaUFvSVdGd2NISnZkbUZzVW1WeGRXbHlaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2JtVjNVWFZ2ZEdWeklEMGdiV0Z3Vm1Gc2RXVnpLRzVsZDFGMWIzUmxjeXdnS0hGMWIzUmxLU0E5UGlBb2UxeHVJQ0FnSUNBZ0lDQWdJQzR1TG5GMWIzUmxMRnh1SUNBZ0lDQWdJQ0FnSUdGd2NISnZkbUZzVG1WbFpHVmtPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ0lDQjlLU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0NGcGMxQnZiR3hsWkZKbGNYVmxjM1FwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCbllYTk1hVzFwZERvZ1lYQndjbTkyWVd4SFlYTWdmU0E5SUdGM1lXbDBJSFJvYVhNdWRHbHRaV1J2ZFhSSFlYTlNaWFIxY200b1hHNGdJQ0FnSUNBZ0lDQWdabWx5YzNSUmRXOTBaUzVoY0hCeWIzWmhiRTVsWldSbFpDeGNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCdVpYZFJkVzkwWlhNZ1BTQnRZWEJXWVd4MVpYTW9ibVYzVVhWdmRHVnpMQ0FvY1hWdmRHVXBJRDArSUNoN1hHNGdJQ0FnSUNBZ0lDQWdMaTR1Y1hWdmRHVXNYRzRnSUNBZ0lDQWdJQ0FnWVhCd2NtOTJZV3hPWldWa1pXUTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDNHVMbkYxYjNSbExtRndjSEp2ZG1Gc1RtVmxaR1ZrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaMkZ6T2lCaGNIQnliM1poYkVkaGN5QjhmQ0JFUlVaQlZVeFVYMFZTUXpJd1gwRlFVRkpQVmtWZlIwRlRMRnh1SUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lIMHBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnZEc5d1FXZG5TV1FnUFNCdWRXeHNPMXh1WEc0Z0lDQWdMeThnVjJVZ1kyRnVJSEpsWkhWalpTQjBhVzFsSUc5dUlIUm9aU0JzYjJGa2FXNW5JSE5qY21WbGJpQmllU0J2Ym14NUlHUnZhVzVuSUhSb2FYTWdZV1owWlhJZ2RHaGxYRzRnSUNBZ0x5OGdiRzloWkdsdVp5QnpZM0psWlc0Z1lXNWtJR0psYzNRZ2NYVnZkR1VnYUdGMlpTQnlaVzVrWlhKbFpDNWNiaUFnSUNCcFppQW9JV0Z3Y0hKdmRtRnNVbVZ4ZFdseVpXUWdKaVlnSVdabGRHTm9VR0Z5WVcxelB5NWlZV3hoYm1ObFJYSnliM0lwSUh0Y2JpQWdJQ0FnSUc1bGQxRjFiM1JsY3lBOUlHRjNZV2wwSUhSb2FYTXVaMlYwUVd4c1VYVnZkR1Z6VjJsMGFFZGhjMFZ6ZEdsdFlYUmxjeWh1WlhkUmRXOTBaWE1wTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoUFltcGxZM1F1ZG1Gc2RXVnpLRzVsZDFGMWIzUmxjeWt1YkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQjBhR2x6TG5ObGRGTjNZWEJ6UlhKeWIzSkxaWGtvVVZWUFZFVlRYMDVQVkY5QlZrRkpURUZDVEVWZlJWSlNUMUlwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCYlgzUnZjRUZuWjBsa0xDQnhkVzkwWlhOWGFYUm9VMkYyYVc1bmMwRnVaRVpsWlVSaGRHRmRJRDFjYmlBZ0lDQWdJQ0FnWVhkaGFYUWdkR2hwY3k1ZlptbHVaRlJ2Y0ZGMWIzUmxRVzVrUTJGc1kzVnNZWFJsVTJGMmFXNW5jeWh1WlhkUmRXOTBaWE1wTzF4dUlDQWdJQ0FnZEc5d1FXZG5TV1FnUFNCZmRHOXdRV2RuU1dRN1hHNGdJQ0FnSUNCdVpYZFJkVzkwWlhNZ1BTQnhkVzkwWlhOWGFYUm9VMkYyYVc1bmMwRnVaRVpsWlVSaGRHRTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdTV1lnWVNCdVpYZGxjaUJqWVd4c0lHaGhjeUJpWldWdUlHMWhaR1VzSUdSdmJpZDBJSFZ3WkdGMFpTQnpkR0YwWlNCM2FYUm9JRzlzWkNCcGJtWnZjbTFoZEdsdmJseHVJQ0FnSUM4dklGQnlaWFpsYm5SeklIUnBiV2x1WnlCamIyNW1iR2xqZEhNZ1ltVjBkMlZsYmlCbVpYUmphR1Z6WEc0Z0lDQWdhV1lnS0hSb2FYTXVhVzVrWlhoUFprNWxkMlZ6ZEVOaGJHeEpia1pzYVdkb2RDQWhQVDBnYVc1a1pYaFBaa04xY25KbGJuUkRZV3hzS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvVTFkQlVGTmZSa1ZVUTBoZlQxSkVSVkpmUTA5T1JreEpRMVFwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElIc2djM2RoY0hOVGRHRjBaU0I5SUQwZ2RHaHBjeTV6ZEc5eVpTNW5aWFJUZEdGMFpTZ3BPMXh1SUNBZ0lHeGxkQ0I3SUhObGJHVmpkR1ZrUVdkblNXUWdmU0E5SUhOM1lYQnpVM1JoZEdVN1hHNGdJQ0FnYVdZZ0tDRnVaWGRSZFc5MFpYTmJjMlZzWldOMFpXUkJaMmRKWkYwcElIdGNiaUFnSUNBZ0lITmxiR1ZqZEdWa1FXZG5TV1FnUFNCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZTF4dUlDQWdJQ0FnYzNkaGNITlRkR0YwWlRvZ2UxeHVJQ0FnSUNBZ0lDQXVMaTV6ZDJGd2MxTjBZWFJsTEZ4dUlDQWdJQ0FnSUNCeGRXOTBaWE02SUc1bGQxRjFiM1JsY3l4Y2JpQWdJQ0FnSUNBZ1ptVjBZMmhRWVhKaGJYTTZJSHNnTGk0dVptVjBZMmhRWVhKaGJYTXNJRzFsZEdGRVlYUmhPaUJtWlhSamFGQmhjbUZ0YzAxbGRHRkVZWFJoSUgwc1hHNGdJQ0FnSUNBZ0lIRjFiM1JsYzB4aGMzUkdaWFJqYUdWa0xGeHVJQ0FnSUNBZ0lDQnpaV3hsWTNSbFpFRm5aMGxrTEZ4dUlDQWdJQ0FnSUNCMGIzQkJaMmRKWkN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCcFppQW9jWFZ2ZEdWelVHOXNiR2x1WjB4cGJXbDBSVzVoWW14bFpDa2dlMXh1SUNBZ0lDQWdMeThnVjJVZ2IyNXNlU0IzWVc1MElIUnZJR1J2SUhWd0lIUnZJR0VnYldGNGFXMTFiU0J2WmlCMGFISmxaU0J5WlhGMVpYTjBjeUJtY205dElIQnZiR3hwYm1jZ2FXWWdjRzlzYkdsdVp5QnNhVzFwZENCcGN5QmxibUZpYkdWa0xseHVJQ0FnSUNBZ0x5OGdUM1JvWlhKM2FYTmxJSGRsSUhkdmJpZDBJR2x1WTNKbFlYTmxJSEJ2Ykd4RGIzVnVkQ3dnYzI4Z2NHOXNiR2x1WnlCM2FXeHNJSEoxYmlCM2FYUm9iM1YwSUdFZ2JHbHRhWFF1WEc0Z0lDQWdJQ0IwYUdsekxuQnZiR3hEYjNWdWRDQXJQU0F4TzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNnaGNYVnZkR1Z6VUc5c2JHbHVaMHhwYldsMFJXNWhZbXhsWkNCOGZDQjBhR2x6TG5CdmJHeERiM1Z1ZENBOElGQlBURXhmUTA5VlRsUmZURWxOU1ZRZ0t5QXhLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuQnZiR3hHYjNKT1pYZFJkVzkwWlhNb0tUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NXlaWE5sZEZCdmMzUkdaWFJqYUZOMFlYUmxLQ2s3WEc0Z0lDQWdJQ0IwYUdsekxuTmxkRk4zWVhCelJYSnliM0pMWlhrb1VWVlBWRVZUWDBWWVVFbFNSVVJmUlZKU1QxSXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlGdHVaWGRSZFc5MFpYTXNJSFJ2Y0VGblowbGtYVHRjYmlBZ2ZWeHVYRzRnSUhOaFptVlNaV1psZEdOb1VYVnZkR1Z6S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnYzNkaGNITlRkR0YwWlNCOUlEMGdkR2hwY3k1emRHOXlaUzVuWlhSVGRHRjBaU2dwTzF4dUlDQWdJR2xtSUNnaGRHaHBjeTV3YjJ4c2FXNW5WR2x0Wlc5MWRDQW1KaUJ6ZDJGd2MxTjBZWFJsTG1abGRHTm9VR0Z5WVcxektTQjdYRzRnSUNBZ0lDQjBhR2x6TG1abGRHTm9RVzVrVTJWMFVYVnZkR1Z6S0hOM1lYQnpVM1JoZEdVdVptVjBZMmhRWVhKaGJYTXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSE5sZEZObGJHVmpkR1ZrVVhWdmRHVkJaMmRKWkNoelpXeGxZM1JsWkVGblowbGtLU0I3WEc0Z0lDQWdZMjl1YzNRZ2V5QnpkMkZ3YzFOMFlYUmxJSDBnUFNCMGFHbHpMbk4wYjNKbExtZGxkRk4wWVhSbEtDazdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3SUhOM1lYQnpVM1JoZEdVNklIc2dMaTR1YzNkaGNITlRkR0YwWlN3Z2MyVnNaV04wWldSQloyZEpaQ0I5SUgwcE8xeHVJQ0I5WEc1Y2JpQWdjMlYwVTNkaGNITlViMnRsYm5Nb2RHOXJaVzV6S1NCN1hHNGdJQ0FnWTI5dWMzUWdleUJ6ZDJGd2MxTjBZWFJsSUgwZ1BTQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2s3WEc0Z0lDQWdkR2hwY3k1emRHOXlaUzUxY0dSaGRHVlRkR0YwWlNoN0lITjNZWEJ6VTNSaGRHVTZJSHNnTGk0dWMzZGhjSE5UZEdGMFpTd2dkRzlyWlc1eklIMGdmU2s3WEc0Z0lIMWNibHh1SUNCamJHVmhjbE4zWVhCelVYVnZkR1Z6S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnYzNkaGNITlRkR0YwWlNCOUlEMGdkR2hwY3k1emRHOXlaUzVuWlhSVGRHRjBaU2dwTzF4dUlDQWdJSFJvYVhNdWMzUnZjbVV1ZFhCa1lYUmxVM1JoZEdVb2V5QnpkMkZ3YzFOMFlYUmxPaUI3SUM0dUxuTjNZWEJ6VTNSaGRHVXNJSEYxYjNSbGN6b2dlMzBnZlNCOUtUdGNiaUFnZlZ4dVhHNGdJSE5sZEZOM1lYQnpSWEp5YjNKTFpYa29aWEp5YjNKTFpYa3BJSHRjYmlBZ0lDQmpiMjV6ZENCN0lITjNZWEJ6VTNSaGRHVWdmU0E5SUhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tUdGNiaUFnSUNCMGFHbHpMbk4wYjNKbExuVndaR0YwWlZOMFlYUmxLSHNnYzNkaGNITlRkR0YwWlRvZ2V5QXVMaTV6ZDJGd2MxTjBZWFJsTENCbGNuSnZja3RsZVNCOUlIMHBPMXh1SUNCOVhHNWNiaUFnWVhONWJtTWdaMlYwUVd4c1VYVnZkR1Z6VjJsMGFFZGhjMFZ6ZEdsdFlYUmxjeWh4ZFc5MFpYTXBJSHRjYmlBZ0lDQmpiMjV6ZENCeGRXOTBaVWRoYzBSaGRHRWdQU0JoZDJGcGRDQlFjbTl0YVhObExtRnNiQ2hjYmlBZ0lDQWdJRTlpYW1WamRDNTJZV3gxWlhNb2NYVnZkR1Z6S1M1dFlYQW9ZWE41Ym1NZ0tIRjFiM1JsS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIc2daMkZ6VEdsdGFYUXNJSE5wYlhWc1lYUnBiMjVHWVdsc2N5QjlJRDBnWVhkaGFYUWdkR2hwY3k1MGFXMWxaRzkxZEVkaGMxSmxkSFZ5YmloY2JpQWdJQ0FnSUNBZ0lDQnhkVzkwWlM1MGNtRmtaU3hjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0bllYTk1hVzFwZEN3Z2MybHRkV3hoZEdsdmJrWmhhV3h6TENCeGRXOTBaUzVoWjJkeVpXZGhkRzl5WFR0Y2JpQWdJQ0FnSUgwcExGeHVJQ0FnSUNrN1hHNWNiaUFnSUNCamIyNXpkQ0J1WlhkUmRXOTBaWE1nUFNCN2ZUdGNiaUFnSUNCeGRXOTBaVWRoYzBSaGRHRXVabTl5UldGamFDZ29XMmRoYzB4cGJXbDBMQ0J6YVcxMWJHRjBhVzl1Um1GcGJITXNJR0ZuWjBsa1hTa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tHZGhjMHhwYldsMElDWW1JQ0Z6YVcxMWJHRjBhVzl1Um1GcGJITXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaMkZ6UlhOMGFXMWhkR1ZYYVhSb1VtVm1kVzVrSUQwZ1kyRnNZM1ZzWVhSbFIyRnpSWE4wYVcxaGRHVlhhWFJvVW1WbWRXNWtLRnh1SUNBZ0lDQWdJQ0FnSUhGMWIzUmxjMXRoWjJkSlpGMHViV0Y0UjJGekxGeHVJQ0FnSUNBZ0lDQWdJSEYxYjNSbGMxdGhaMmRKWkYwdVpYTjBhVzFoZEdWa1VtVm1kVzVrTEZ4dUlDQWdJQ0FnSUNBZ0lHZGhjMHhwYldsMExGeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUc1bGQxRjFiM1JsYzF0aFoyZEpaRjBnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdMaTR1Y1hWdmRHVnpXMkZuWjBsa1hTeGNiaUFnSUNBZ0lDQWdJQ0JuWVhORmMzUnBiV0YwWlRvZ1oyRnpUR2x0YVhRc1hHNGdJQ0FnSUNBZ0lDQWdaMkZ6UlhOMGFXMWhkR1ZYYVhSb1VtVm1kVzVrTEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHhkVzkwWlhOYllXZG5TV1JkTG1Gd2NISnZkbUZzVG1WbFpHVmtLU0I3WEc0Z0lDQWdJQ0FnSUM4dklFbG1JR2RoY3lCbGMzUnBiV0YwYVc5dUlHWmhhV3h6TENCaWRYUWdZVzRnUlZKRExUSXdJR0Z3Y0hKdmRtVWdhWE1nYm1WbFpHVmtMQ0IwYUdWdUlIZGxJR1J2SUc1dmRDQmhaR1FnWVc1NUlHVnpkR2x0WVhSbElIQnliM0JsY25SNUlIUnZJSFJvWlNCeGRXOTBaU0J2WW1wbFkzUmNiaUFnSUNBZ0lDQWdMeThnVTNWamFDQnhkVzkwWlhNZ2QybHNiQ0J5Wld4NUlHOXVJSFJvWlNCdFlYaEhZWE1nWVc1a0lHRjJaWEpoWjJWSFlYTWdjSEp2Y0dWeWRHbGxjeUJtY205dElIUm9aU0JoY0dsY2JpQWdJQ0FnSUNBZ2JtVjNVWFZ2ZEdWelcyRm5aMGxrWFNBOUlIRjFiM1JsYzF0aFoyZEpaRjA3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0F2THlCSlppQm5ZWE1nWlhOMGFXMWhkR2x2YmlCbVlXbHNjeUJoYm1RZ2JtOGdZWEJ3Y205MllXd2dhWE1nYm1WbFpHVmtMQ0IwYUdWdUlIZGxJR1pwYkhSbGNpQjBhR0YwSUhGMWIzUmxJRzkxZEN3Z2MyOGdkR2hoZENCcGRDQnBjeUJ1YjNRZ2MyaHZkMjRnZEc4Z2RHaGxJSFZ6WlhKY2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzVVhWdmRHVnpPMXh1SUNCOVhHNWNiaUFnZEdsdFpXUnZkWFJIWVhOU1pYUjFjbTRvZEhKaFpHVlVlRkJoY21GdGN5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTa2dQVDRnZTF4dUlDQWdJQ0FnYkdWMElHZGhjMVJwYldWa1QzVjBJRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQWdJR052Ym5OMElHZGhjMVJwYldWdmRYUWdQU0J6WlhSVWFXMWxiM1YwS0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnWjJGelZHbHRaV1JQZFhRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0hzZ1oyRnpUR2x0YVhRNklHNTFiR3dzSUhOcGJYVnNZWFJwYjI1R1lXbHNjem9nZEhKMVpTQjlLVHRjYmlBZ0lDQWdJSDBzSUZORlEwOU9SQ0FxSURVcE8xeHVYRzRnSUNBZ0lDQXZMeUJTWlcxdmRtVWdaMkZ6SUdaeWIyMGdjR0Z5WVcxeklIUm9ZWFFnZDJsc2JDQmlaU0J3WVhOelpXUWdkRzhnZEdobElHQmxjM1JwYldGMFpVZGhjMkFnWTJGc2JGeHVJQ0FnSUNBZ0x5OGdTVzVqYkhWa2FXNW5JR2wwSUdOaGJpQmpZWFZ6WlNCMGFHVWdaWE4wYVcxaGRHVWdkRzhnWm1GcGJDQnBaaUIwYUdVZ1lXTjBkV0ZzSUdkaGN5QnVaV1ZrWldSY2JpQWdJQ0FnSUM4dklHVjRZMlZsWkhNZ2RHaGxJSEJoYzNObFpDQm5ZWE5jYmlBZ0lDQWdJR052Ym5OMElIUnlZV1JsVkhoUVlYSmhiWE5HYjNKSFlYTkZjM1JwYldGMFpTQTlJSHRjYmlBZ0lDQWdJQ0FnWkdGMFlUb2dkSEpoWkdWVWVGQmhjbUZ0Y3k1a1lYUmhMRnh1SUNBZ0lDQWdJQ0JtY205dE9pQjBjbUZrWlZSNFVHRnlZVzF6TG1aeWIyMHNYRzRnSUNBZ0lDQWdJSFJ2T2lCMGNtRmtaVlI0VUdGeVlXMXpMblJ2TEZ4dUlDQWdJQ0FnSUNCMllXeDFaVG9nZEhKaFpHVlVlRkJoY21GdGN5NTJZV3gxWlN4Y2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lIUm9hWE11WjJWMFFuVm1abVZ5WldSSFlYTk1hVzFwZENoN0lIUjRVR0Z5WVcxek9pQjBjbUZrWlZSNFVHRnlZVzF6Um05eVIyRnpSWE4wYVcxaGRHVWdmU3dnTVNsY2JpQWdJQ0FnSUNBZ0xuUm9aVzRvS0hzZ1oyRnpUR2x0YVhRc0lITnBiWFZzWVhScGIyNUdZV2xzY3lCOUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZuWVhOVWFXMWxaRTkxZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSlVhVzFsYjNWMEtHZGhjMVJwYldWdmRYUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoN0lHZGhjMHhwYldsMExDQnphVzExYkdGMGFXOXVSbUZwYkhNZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQXVZMkYwWTJnb0tHVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnNiMmN1WlhKeWIzSW9aU2s3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZuWVhOVWFXMWxaRTkxZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSlVhVzFsYjNWMEtHZGhjMVJwYldWdmRYUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoN0lHZGhjMHhwYldsME9pQnVkV3hzTENCemFXMTFiR0YwYVc5dVJtRnBiSE02SUhSeWRXVWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdGemVXNWpJSE5sZEVsdWFYUnBZV3hIWVhORmMzUnBiV0YwWlNocGJtbDBhV0ZzUVdkblNXUXBJSHRjYmlBZ0lDQmpiMjV6ZENCN0lITjNZWEJ6VTNSaGRHVWdmU0E5SUhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tUdGNibHh1SUNBZ0lHTnZibk4wSUhGMWIzUmxWRzlWY0dSaGRHVWdQU0I3SUM0dUxuTjNZWEJ6VTNSaGRHVXVjWFZ2ZEdWelcybHVhWFJwWVd4QloyZEpaRjBnZlR0Y2JseHVJQ0FnSUdOdmJuTjBJSHNnWjJGelRHbHRhWFE2SUc1bGQwZGhjMFZ6ZEdsdFlYUmxMQ0J6YVcxMWJHRjBhVzl1Um1GcGJITWdmU0E5WEc0Z0lDQWdJQ0JoZDJGcGRDQjBhR2x6TG5ScGJXVmtiM1YwUjJGelVtVjBkWEp1S0hGMWIzUmxWRzlWY0dSaGRHVXVkSEpoWkdVcE8xeHVYRzRnSUNBZ2FXWWdLRzVsZDBkaGMwVnpkR2x0WVhSbElDWW1JQ0Z6YVcxMWJHRjBhVzl1Um1GcGJITXBJSHRjYmlBZ0lDQWdJR052Ym5OMElHZGhjMFZ6ZEdsdFlYUmxWMmwwYUZKbFpuVnVaQ0E5SUdOaGJHTjFiR0YwWlVkaGMwVnpkR2x0WVhSbFYybDBhRkpsWm5WdVpDaGNiaUFnSUNBZ0lDQWdjWFZ2ZEdWVWIxVndaR0YwWlM1dFlYaEhZWE1zWEc0Z0lDQWdJQ0FnSUhGMWIzUmxWRzlWY0dSaGRHVXVaWE4wYVcxaGRHVmtVbVZtZFc1a0xGeHVJQ0FnSUNBZ0lDQnVaWGRIWVhORmMzUnBiV0YwWlN4Y2JpQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lIRjFiM1JsVkc5VmNHUmhkR1V1WjJGelJYTjBhVzFoZEdVZ1BTQnVaWGRIWVhORmMzUnBiV0YwWlR0Y2JpQWdJQ0FnSUhGMWIzUmxWRzlWY0dSaGRHVXVaMkZ6UlhOMGFXMWhkR1ZYYVhSb1VtVm1kVzVrSUQwZ1oyRnpSWE4wYVcxaGRHVlhhWFJvVW1WbWRXNWtPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZTF4dUlDQWdJQ0FnYzNkaGNITlRkR0YwWlRvZ2UxeHVJQ0FnSUNBZ0lDQXVMaTV6ZDJGd2MxTjBZWFJsTEZ4dUlDQWdJQ0FnSUNCeGRXOTBaWE02SUhzZ0xpNHVjM2RoY0hOVGRHRjBaUzV4ZFc5MFpYTXNJRnRwYm1sMGFXRnNRV2RuU1dSZE9pQnhkVzkwWlZSdlZYQmtZWFJsSUgwc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdjMlYwUVhCd2NtOTJaVlI0U1dRb1lYQndjbTkyWlZSNFNXUXBJSHRjYmlBZ0lDQmpiMjV6ZENCN0lITjNZWEJ6VTNSaGRHVWdmU0E5SUhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tUdGNiaUFnSUNCMGFHbHpMbk4wYjNKbExuVndaR0YwWlZOMFlYUmxLSHNnYzNkaGNITlRkR0YwWlRvZ2V5QXVMaTV6ZDJGd2MxTjBZWFJsTENCaGNIQnliM1psVkhoSlpDQjlJSDBwTzF4dUlDQjlYRzVjYmlBZ2MyVjBWSEpoWkdWVWVFbGtLSFJ5WVdSbFZIaEpaQ2tnZTF4dUlDQWdJR052Ym5OMElIc2djM2RoY0hOVGRHRjBaU0I5SUQwZ2RHaHBjeTV6ZEc5eVpTNW5aWFJUZEdGMFpTZ3BPMXh1SUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZXlCemQyRndjMU4wWVhSbE9pQjdJQzR1TG5OM1lYQnpVM1JoZEdVc0lIUnlZV1JsVkhoSlpDQjlJSDBwTzF4dUlDQjlYRzVjYmlBZ2MyVjBVWFZ2ZEdWelRHRnpkRVpsZEdOb1pXUW9jWFZ2ZEdWelRHRnpkRVpsZEdOb1pXUXBJSHRjYmlBZ0lDQmpiMjV6ZENCN0lITjNZWEJ6VTNSaGRHVWdmU0E5SUhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tUdGNiaUFnSUNCMGFHbHpMbk4wYjNKbExuVndaR0YwWlZOMFlYUmxLSHRjYmlBZ0lDQWdJSE4zWVhCelUzUmhkR1U2SUhzZ0xpNHVjM2RoY0hOVGRHRjBaU3dnY1hWdmRHVnpUR0Z6ZEVabGRHTm9aV1FnZlN4Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lITmxkRk4zWVhCelZIaEhZWE5RY21salpTaG5ZWE5RY21salpTa2dlMXh1SUNBZ0lHTnZibk4wSUhzZ2MzZGhjSE5UZEdGMFpTQjlJRDBnZEdocGN5NXpkRzl5WlM1blpYUlRkR0YwWlNncE8xeHVJQ0FnSUhSb2FYTXVjM1J2Y21VdWRYQmtZWFJsVTNSaGRHVW9lMXh1SUNBZ0lDQWdjM2RoY0hOVGRHRjBaVG9nZXlBdUxpNXpkMkZ3YzFOMFlYUmxMQ0JqZFhOMGIyMUhZWE5RY21salpUb2daMkZ6VUhKcFkyVWdmU3hjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUhObGRGTjNZWEJ6VkhoTllYaEdaV1ZRWlhKSFlYTW9iV0Y0Um1WbFVHVnlSMkZ6S1NCN1hHNGdJQ0FnWTI5dWMzUWdleUJ6ZDJGd2MxTjBZWFJsSUgwZ1BTQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2s3WEc0Z0lDQWdkR2hwY3k1emRHOXlaUzUxY0dSaGRHVlRkR0YwWlNoN1hHNGdJQ0FnSUNCemQyRndjMU4wWVhSbE9pQjdJQzR1TG5OM1lYQnpVM1JoZEdVc0lHTjFjM1J2YlUxaGVFWmxaVkJsY2tkaGN6b2diV0Y0Um1WbFVHVnlSMkZ6SUgwc1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQnpaWFJUZDJGd2MxVnpaWEpHWldWTVpYWmxiQ2h6ZDJGd2MxVnpaWEpHWldWTVpYWmxiQ2tnZTF4dUlDQWdJR052Ym5OMElIc2djM2RoY0hOVGRHRjBaU0I5SUQwZ2RHaHBjeTV6ZEc5eVpTNW5aWFJUZEdGMFpTZ3BPMXh1SUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZTF4dUlDQWdJQ0FnYzNkaGNITlRkR0YwWlRvZ2V5QXVMaTV6ZDJGd2MxTjBZWFJsTENCemQyRndjMVZ6WlhKR1pXVk1aWFpsYkNCOUxGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdjMlYwVTNkaGNITlJkVzkwWlhOUWIyeHNhVzVuVEdsdGFYUkZibUZpYkdWa0tIRjFiM1JsYzFCdmJHeHBibWRNYVcxcGRFVnVZV0pzWldRcElIdGNiaUFnSUNCamIyNXpkQ0I3SUhOM1lYQnpVM1JoZEdVZ2ZTQTlJSFJvYVhNdWMzUnZjbVV1WjJWMFUzUmhkR1VvS1R0Y2JpQWdJQ0IwYUdsekxuTjBiM0psTG5Wd1pHRjBaVk4wWVhSbEtIdGNiaUFnSUNBZ0lITjNZWEJ6VTNSaGRHVTZJSHNnTGk0dWMzZGhjSE5UZEdGMFpTd2djWFZ2ZEdWelVHOXNiR2x1WjB4cGJXbDBSVzVoWW14bFpDQjlMRnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnYzJWMFUzZGhjSE5VZUUxaGVFWmxaVkJ5YVc5eWFYUjVVR1Z5UjJGektHMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpLU0I3WEc0Z0lDQWdZMjl1YzNRZ2V5QnpkMkZ3YzFOMFlYUmxJSDBnUFNCMGFHbHpMbk4wYjNKbExtZGxkRk4wWVhSbEtDazdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3WEc0Z0lDQWdJQ0J6ZDJGd2MxTjBZWFJsT2lCN1hHNGdJQ0FnSUNBZ0lDNHVMbk4zWVhCelUzUmhkR1VzWEc0Z0lDQWdJQ0FnSUdOMWMzUnZiVTFoZUZCeWFXOXlhWFI1Um1WbFVHVnlSMkZ6T2lCdFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN5eGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0J6WlhSVGQyRndjMVI0UjJGelRHbHRhWFFvWjJGelRHbHRhWFFwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJSE4zWVhCelUzUmhkR1VnZlNBOUlIUm9hWE11YzNSdmNtVXVaMlYwVTNSaGRHVW9LVHRjYmlBZ0lDQjBhR2x6TG5OMGIzSmxMblZ3WkdGMFpWTjBZWFJsS0h0Y2JpQWdJQ0FnSUhOM1lYQnpVM1JoZEdVNklIc2dMaTR1YzNkaGNITlRkR0YwWlN3Z1kzVnpkRzl0VFdGNFIyRnpPaUJuWVhOTWFXMXBkQ0I5TEZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ2MyVjBRM1Z6ZEc5dFFYQndjbTkyWlZSNFJHRjBZU2hrWVhSaEtTQjdYRzRnSUNBZ1kyOXVjM1FnZXlCemQyRndjMU4wWVhSbElIMGdQU0IwYUdsekxuTjBiM0psTG1kbGRGTjBZWFJsS0NrN1hHNGdJQ0FnZEdocGN5NXpkRzl5WlM1MWNHUmhkR1ZUZEdGMFpTaDdYRzRnSUNBZ0lDQnpkMkZ3YzFOMFlYUmxPaUI3SUM0dUxuTjNZWEJ6VTNSaGRHVXNJR04xYzNSdmJVRndjSEp2ZG1WVWVFUmhkR0U2SUdSaGRHRWdmU3hjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUhObGRFSmhZMnRuY205MWJtUlRkMkZ3VW05MWRHVlRkR0YwWlNoeWIzVjBaVk4wWVhSbEtTQjdYRzRnSUNBZ1kyOXVjM1FnZXlCemQyRndjMU4wWVhSbElIMGdQU0IwYUdsekxuTjBiM0psTG1kbGRGTjBZWFJsS0NrN1hHNGdJQ0FnZEdocGN5NXpkRzl5WlM1MWNHUmhkR1ZUZEdGMFpTaDdJSE4zWVhCelUzUmhkR1U2SUhzZ0xpNHVjM2RoY0hOVGRHRjBaU3dnY205MWRHVlRkR0YwWlNCOUlIMHBPMXh1SUNCOVhHNWNiaUFnYzJWMFUyRjJaVVpsZEdOb1pXUlJkVzkwWlhNb2MzUmhkSFZ6S1NCN1hHNGdJQ0FnWTI5dWMzUWdleUJ6ZDJGd2MxTjBZWFJsSUgwZ1BTQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2s3WEc0Z0lDQWdkR2hwY3k1emRHOXlaUzUxY0dSaGRHVlRkR0YwWlNoN1hHNGdJQ0FnSUNCemQyRndjMU4wWVhSbE9pQjdJQzR1TG5OM1lYQnpVM1JoZEdVc0lITmhkbVZHWlhSamFHVmtVWFZ2ZEdWek9pQnpkR0YwZFhNZ2ZTeGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJSE5sZEZOM1lYQnpUR2wyWlc1bGMzTW9jM2RoY0hOTWFYWmxibVZ6Y3lrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnYzNkaGNITlRkR0YwWlNCOUlEMGdkR2hwY3k1emRHOXlaUzVuWlhSVGRHRjBaU2dwTzF4dUlDQWdJR052Ym5OMElIc2djM2RoY0hOR1pXRjBkWEpsU1hOTWFYWmxJSDBnUFNCemQyRndjMHhwZG1WdVpYTnpPMXh1SUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZTF4dUlDQWdJQ0FnYzNkaGNITlRkR0YwWlRvZ2V5QXVMaTV6ZDJGd2MxTjBZWFJsTENCemQyRndjMFpsWVhSMWNtVkpjMHhwZG1VZ2ZTeGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJSE5sZEZOM1lYQnpSbVZoZEhWeVpVWnNZV2R6S0hOM1lYQnpSbVZoZEhWeVpVWnNZV2R6S1NCN1hHNGdJQ0FnWTI5dWMzUWdleUJ6ZDJGd2MxTjBZWFJsSUgwZ1BTQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2s3WEc0Z0lDQWdkR2hwY3k1emRHOXlaUzUxY0dSaGRHVlRkR0YwWlNoN1hHNGdJQ0FnSUNCemQyRndjMU4wWVhSbE9pQjdJQzR1TG5OM1lYQnpVM1JoZEdVc0lITjNZWEJ6Um1WaGRIVnlaVVpzWVdkeklIMHNYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0J5WlhObGRGQnZjM1JHWlhSamFGTjBZWFJsS0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnYzNkaGNITlRkR0YwWlNCOUlEMGdkR2hwY3k1emRHOXlaUzVuWlhSVGRHRjBaU2dwTzF4dUlDQWdJSFJvYVhNdWMzUnZjbVV1ZFhCa1lYUmxVM1JoZEdVb2UxeHVJQ0FnSUNBZ2MzZGhjSE5UZEdGMFpUb2dlMXh1SUNBZ0lDQWdJQ0F1TGk1cGJtbDBhV0ZzVTNSaGRHVXVjM2RoY0hOVGRHRjBaU3hjYmlBZ0lDQWdJQ0FnZEc5clpXNXpPaUJ6ZDJGd2MxTjBZWFJsTG5SdmEyVnVjeXhjYmlBZ0lDQWdJQ0FnWm1WMFkyaFFZWEpoYlhNNklITjNZWEJ6VTNSaGRHVXVabVYwWTJoUVlYSmhiWE1zWEc0Z0lDQWdJQ0FnSUhOM1lYQnpSbVZoZEhWeVpVbHpUR2wyWlRvZ2MzZGhjSE5UZEdGMFpTNXpkMkZ3YzBabFlYUjFjbVZKYzB4cGRtVXNYRzRnSUNBZ0lDQWdJSE4zWVhCelVYVnZkR1ZTWldaeVpYTm9WR2x0WlRvZ2MzZGhjSE5UZEdGMFpTNXpkMkZ3YzFGMWIzUmxVbVZtY21WemFGUnBiV1VzWEc0Z0lDQWdJQ0FnSUhOM1lYQnpVWFZ2ZEdWUWNtVm1aWFJqYUdsdVoxSmxabkpsYzJoVWFXMWxPbHh1SUNBZ0lDQWdJQ0FnSUhOM1lYQnpVM1JoZEdVdWMzZGhjSE5SZFc5MFpWQnlaV1psZEdOb2FXNW5VbVZtY21WemFGUnBiV1VzWEc0Z0lDQWdJQ0FnSUhOM1lYQnpSbVZoZEhWeVpVWnNZV2R6T2lCemQyRndjMU4wWVhSbExuTjNZWEJ6Um1WaGRIVnlaVVpzWVdkekxGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNCOUtUdGNiaUFnSUNCamJHVmhjbFJwYldWdmRYUW9kR2hwY3k1d2IyeHNhVzVuVkdsdFpXOTFkQ2s3WEc0Z0lIMWNibHh1SUNCeVpYTmxkRk4zWVhCelUzUmhkR1VvS1NCN1hHNGdJQ0FnWTI5dWMzUWdleUJ6ZDJGd2MxTjBZWFJsSUgwZ1BTQjBhR2x6TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2s3WEc0Z0lDQWdkR2hwY3k1emRHOXlaUzUxY0dSaGRHVlRkR0YwWlNoN1hHNGdJQ0FnSUNCemQyRndjMU4wWVhSbE9pQjdYRzRnSUNBZ0lDQWdJQzR1TG1sdWFYUnBZV3hUZEdGMFpTNXpkMkZ3YzFOMFlYUmxMRnh1SUNBZ0lDQWdJQ0J6ZDJGd2MxRjFiM1JsVW1WbWNtVnphRlJwYldVNklITjNZWEJ6VTNSaGRHVXVjM2RoY0hOUmRXOTBaVkpsWm5KbGMyaFVhVzFsTEZ4dUlDQWdJQ0FnSUNCemQyRndjMUYxYjNSbFVISmxabVYwWTJocGJtZFNaV1p5WlhOb1ZHbHRaVHBjYmlBZ0lDQWdJQ0FnSUNCemQyRndjMU4wWVhSbExuTjNZWEJ6VVhWdmRHVlFjbVZtWlhSamFHbHVaMUpsWm5KbGMyaFVhVzFsTEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0JqYkdWaGNsUnBiV1Z2ZFhRb2RHaHBjeTV3YjJ4c2FXNW5WR2x0Wlc5MWRDazdYRzRnSUgxY2JseHVJQ0JoYzNsdVl5QmZabWx1WkZSdmNGRjFiM1JsUVc1a1EyRnNZM1ZzWVhSbFUyRjJhVzVuY3loeGRXOTBaWE1nUFNCN2ZTa2dlMXh1SUNBZ0lHTnZibk4wSUhzZ1kyOXVkSEpoWTNSRmVHTm9ZVzVuWlZKaGRHVnpPaUIwYjJ0bGJrTnZiblpsY25OcGIyNVNZWFJsY3lCOUlEMWNiaUFnSUNBZ0lIUm9hWE11WjJWMFZHOXJaVzVTWVhSbGMxTjBZWFJsS0NrN1hHNGdJQ0FnWTI5dWMzUWdlMXh1SUNBZ0lDQWdjM2RoY0hOVGRHRjBaVG9nZXlCamRYTjBiMjFIWVhOUWNtbGpaU3dnWTNWemRHOXRUV0Y0VUhKcGIzSnBkSGxHWldWUVpYSkhZWE1nZlN4Y2JpQWdJQ0I5SUQwZ2RHaHBjeTV6ZEc5eVpTNW5aWFJUZEdGMFpTZ3BPMXh1SUNBZ0lHTnZibk4wSUdOb1lXbHVTV1FnUFNCMGFHbHpMbDluWlhSRGRYSnlaVzUwUTJoaGFXNUpaQ2dwTzF4dVhHNGdJQ0FnWTI5dWMzUWdiblZ0VVhWdmRHVnpJRDBnVDJKcVpXTjBMbXRsZVhNb2NYVnZkR1Z6S1M1c1pXNW5kR2c3WEc0Z0lDQWdhV1lnS0NGdWRXMVJkVzkwWlhNcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCN2ZUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J1WlhkUmRXOTBaWE1nUFNCamJHOXVaVVJsWlhBb2NYVnZkR1Z6S1R0Y2JseHVJQ0FnSUdOdmJuTjBJSHNnWjJGelJtVmxSWE4wYVcxaGRHVnpMQ0JuWVhORmMzUnBiV0YwWlZSNWNHVWdmU0E5WEc0Z0lDQWdJQ0JoZDJGcGRDQjBhR2x6TGw5blpYUkZTVkF4TlRVNVIyRnpSbVZsUlhOMGFXMWhkR1Z6S0NrN1hHNWNiaUFnSUNCc1pYUWdkWE5sWkVkaGMxQnlhV05sSUQwZ0p6QjRNQ2M3WEc1Y2JpQWdJQ0JwWmlBb1oyRnpSWE4wYVcxaGRHVlVlWEJsSUQwOVBTQkhZWE5GYzNScGJXRjBaVlI1Y0dWekxtWmxaVTFoY210bGRDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2UxeHVJQ0FnSUNBZ0lDQm9hV2RvT2lCN0lITjFaMmRsYzNSbFpFMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpJSDBzWEc0Z0lDQWdJQ0FnSUdWemRHbHRZWFJsWkVKaGMyVkdaV1VzWEc0Z0lDQWdJQ0I5SUQwZ1oyRnpSbVZsUlhOMGFXMWhkR1Z6TzF4dVhHNGdJQ0FnSUNCamIyNXpkQ0J6ZFdkblpYTjBaV1JOWVhoUWNtbHZjbWwwZVVabFpWQmxja2RoYzBsdVNHVjRWMFZKSUQwZ1pHVmpSMWRGU1ZSdlNHVjRWMFZKS0Z4dUlDQWdJQ0FnSUNCemRXZG5aWE4wWldSTllYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN5eGNiaUFnSUNBZ0lDazdYRzRnSUNBZ0lDQmpiMjV6ZENCbGMzUnBiV0YwWldSQ1lYTmxSbVZsVG5WdFpYSnBZeUE5SUc1bGR5Qk9kVzFsY21saktGeHVJQ0FnSUNBZ0lDQmxjM1JwYldGMFpXUkNZWE5sUm1WbExGeHVJQ0FnSUNBZ0lDQXhNQ3hjYmlBZ0lDQWdJQ0FnUlhSb1pYSkVaVzV2YldsdVlYUnBiMjR1UjFkRlNTeGNiaUFnSUNBZ0lDa3VkRzlFWlc1dmJXbHVZWFJwYjI0b1JYUm9aWEpFWlc1dmJXbHVZWFJwYjI0dVYwVkpLVHRjYmx4dUlDQWdJQ0FnZFhObFpFZGhjMUJ5YVdObElEMGdibVYzSUU1MWJXVnlhV01vWEc0Z0lDQWdJQ0FnSUdOMWMzUnZiVTFoZUZCeWFXOXlhWFI1Um1WbFVHVnlSMkZ6SUh4OElITjFaMmRsYzNSbFpFMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpTVzVJWlhoWFJVa3NYRzRnSUNBZ0lDQWdJREUyTEZ4dUlDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBdVlXUmtLR1Z6ZEdsdFlYUmxaRUpoYzJWR1pXVk9kVzFsY21saktWeHVJQ0FnSUNBZ0lDQXVjbTkxYm1Rb05pbGNiaUFnSUNBZ0lDQWdMblJ2VTNSeWFXNW5LQ2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2huWVhORmMzUnBiV0YwWlZSNWNHVWdQVDA5SUVkaGMwVnpkR2x0WVhSbFZIbHdaWE11YkdWbllXTjVLU0I3WEc0Z0lDQWdJQ0IxYzJWa1IyRnpVSEpwWTJVZ1BTQmpkWE4wYjIxSFlYTlFjbWxqWlNCOGZDQmtaV05IVjBWSlZHOUlaWGhYUlVrb1oyRnpSbVZsUlhOMGFXMWhkR1Z6TG1ocFoyZ3BPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9aMkZ6UlhOMGFXMWhkR1ZVZVhCbElEMDlQU0JIWVhORmMzUnBiV0YwWlZSNWNHVnpMbVYwYUVkaGMxQnlhV05sS1NCN1hHNGdJQ0FnSUNCMWMyVmtSMkZ6VUhKcFkyVWdQVnh1SUNBZ0lDQWdJQ0JqZFhOMGIyMUhZWE5RY21salpTQjhmQ0JrWldOSFYwVkpWRzlJWlhoWFJVa29aMkZ6Um1WbFJYTjBhVzFoZEdWekxtZGhjMUJ5YVdObEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCc1pYUWdkRzl3UVdkblNXUWdQU0J1ZFd4c08xeHVJQ0FnSUd4bGRDQnZkbVZ5WVd4c1ZtRnNkV1ZQWmtKbGMzUlJkVzkwWlVadmNsTnZjblJwYm1jZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnVDJKcVpXTjBMblpoYkhWbGN5aHVaWGRSZFc5MFpYTXBMbVp2Y2tWaFkyZ29LSEYxYjNSbEtTQTlQaUI3WEc0Z0lDQWdJQ0JqYjI1emRDQjdYRzRnSUNBZ0lDQWdJR0ZuWjNKbFoyRjBiM0lzWEc0Z0lDQWdJQ0FnSUdGd2NISnZkbUZzVG1WbFpHVmtMRnh1SUNBZ0lDQWdJQ0JoZG1WeVlXZGxSMkZ6TEZ4dUlDQWdJQ0FnSUNCa1pYTjBhVzVoZEdsdmJrRnRiM1Z1ZENBOUlEQXNYRzRnSUNBZ0lDQWdJR1JsYzNScGJtRjBhVzl1Vkc5clpXNHNYRzRnSUNBZ0lDQWdJR1JsYzNScGJtRjBhVzl1Vkc5clpXNUpibVp2TEZ4dUlDQWdJQ0FnSUNCbllYTkZjM1JwYldGMFpWZHBkR2hTWldaMWJtUXNYRzRnSUNBZ0lDQWdJSE52ZFhKalpVRnRiM1Z1ZEN4Y2JpQWdJQ0FnSUNBZ2MyOTFjbU5sVkc5clpXNHNYRzRnSUNBZ0lDQWdJSFJ5WVdSbExGeHVJQ0FnSUNBZ0lDQm1aV1U2SUcxbGRHRk5ZWE5yUm1WbExGeHVJQ0FnSUNBZ0lDQnRkV3gwYVV4aGVXVnlUREZVY21Ga1pVWmxaVlJ2ZEdGc0xGeHVJQ0FnSUNBZ2ZTQTlJSEYxYjNSbE8xeHVYRzRnSUNBZ0lDQmpiMjV6ZENCMGNtRmtaVWRoYzB4cGJXbDBSbTl5UTJGc1kzVnNZWFJwYjI0Z1BTQm5ZWE5GYzNScGJXRjBaVmRwZEdoU1pXWjFibVJjYmlBZ0lDQWdJQ0FnUHlCdVpYY2dRbWxuVG5WdFltVnlLR2RoYzBWemRHbHRZWFJsVjJsMGFGSmxablZ1WkN3Z01UWXBYRzRnSUNBZ0lDQWdJRG9nYm1WM0lFSnBaMDUxYldKbGNpaGhkbVZ5WVdkbFIyRnpJSHg4SUUxQldGOUhRVk5mVEVsTlNWUXNJREV3S1R0Y2JseHVJQ0FnSUNBZ1kyOXVjM1FnZEc5MFlXeEhZWE5NYVcxcGRFWnZja05oYkdOMWJHRjBhVzl1SUQwZ2RISmhaR1ZIWVhOTWFXMXBkRVp2Y2tOaGJHTjFiR0YwYVc5dVhHNGdJQ0FnSUNBZ0lDNXdiSFZ6S0dGd2NISnZkbUZzVG1WbFpHVmtQeTVuWVhNZ2ZId2dKekI0TUNjc0lERTJLVnh1SUNBZ0lDQWdJQ0F1ZEc5VGRISnBibWNvTVRZcE8xeHVYRzRnSUNBZ0lDQnNaWFFnWjJGelZHOTBZV3hKYmxkbGFVaGxlQ0E5SUdOaGJHTkhZWE5VYjNSaGJDaGNiaUFnSUNBZ0lDQWdkRzkwWVd4SFlYTk1hVzFwZEVadmNrTmhiR04xYkdGMGFXOXVMRnh1SUNBZ0lDQWdJQ0IxYzJWa1IyRnpVSEpwWTJVc1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2FXWWdLRzExYkhScFRHRjVaWEpNTVZSeVlXUmxSbVZsVkc5MFlXd2dJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnWjJGelZHOTBZV3hKYmxkbGFVaGxlQ0E5SUhOMWJVaGxlR1Z6S0Z4dUlDQWdJQ0FnSUNBZ0lHZGhjMVJ2ZEdGc1NXNVhaV2xJWlhnZ2ZId2dKekI0TUNjc1hHNGdJQ0FnSUNBZ0lDQWdiWFZzZEdsTVlYbGxja3d4VkhKaFpHVkdaV1ZVYjNSaGJDQjhmQ0FuTUhnd0p5eGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z2RISmhaR1V1ZG1Gc2RXVWdhWE1nWVNCemRXMGdiMllnWkdsbVptVnlaVzUwSUhaaGJIVmxjeUJrWlhCbGJtUnBibWNnYjI0Z2RHaGxJSFJ5WVc1ellXTjBhVzl1TGx4dUlDQWdJQ0FnTHk4Z1NYUWdZV3gzWVhseklHbHVZMngxWkdWeklHRnVlU0JsZUhSbGNtNWhiQ0JtWldWeklHTm9ZWEpuWldRZ1lua2dkR2hsSUhGMWIzUmxJSE52ZFhKalpTNGdTVzVjYmlBZ0lDQWdJQzh2SUdGa1pHbDBhVzl1TENCcFppQjBhR1VnYzI5MWNtTmxJR0Z6YzJWMElHbHpJSFJvWlNCelpXeGxZM1JsWkNCamFHRnBiaWR6SUdSbFptRjFiSFFnZEc5clpXNHNJSFJ5WVdSbExuWmhiSFZsWEc0Z0lDQWdJQ0F2THlCcGJtTnNkV1JsY3lCMGFHVWdZVzF2ZFc1MElHOW1JSFJvWVhRZ2RHOXJaVzR1WEc0Z0lDQWdJQ0JqYjI1emRDQjBiM1JoYkZkbGFVTnZjM1FnUFNCdVpYY2dUblZ0WlhKcFl5aGNiaUFnSUNBZ0lDQWdaMkZ6Vkc5MFlXeEpibGRsYVVobGVDeGNiaUFnSUNBZ0lDQWdNVFlzWEc0Z0lDQWdJQ0FnSUVWMGFHVnlSR1Z1YjIxcGJtRjBhVzl1TGxkRlNTeGNiaUFnSUNBZ0lDa3VZV1JrS0c1bGR5Qk9kVzFsY21saktIUnlZV1JsTG5aaGJIVmxMQ0F4Tml3Z1JYUm9aWEpFWlc1dmJXbHVZWFJwYjI0dVYwVkpLU2s3WEc1Y2JpQWdJQ0FnSUdOdmJuTjBJSFJ2ZEdGc1JYUm9RMjl6ZENBOUlIUnZkR0ZzVjJWcFEyOXpkRnh1SUNBZ0lDQWdJQ0F1ZEc5RVpXNXZiV2x1WVhScGIyNG9SWFJvWlhKRVpXNXZiV2x1WVhScGIyNHVSVlJJS1Z4dUlDQWdJQ0FnSUNBdWNtOTFibVFvTmlrdWRtRnNkV1U3WEc1Y2JpQWdJQ0FnSUM4dklGUm9aU0IwYjNSaGJDQm1aV1VnYVhNZ1lXZG5jbVZuWVhSdmNpOWxlR05vWVc1blpTQm1aV1Z6SUhCc2RYTWdaMkZ6SUdabFpYTXVYRzRnSUNBZ0lDQXZMeUJKWmlCMGFHVWdjM2RoY0NCcGN5Qm1jbTl0SUhSb1pTQnpaV3hsWTNSbFpDQmphR0ZwYmlkeklHUmxabUYxYkhRZ2RHOXJaVzRzSUhOMVluUnlZV04wWEc0Z0lDQWdJQ0F2THlCMGFHVWdjMjkxY21ObFFXMXZkVzUwSUdaeWIyMGdkR2hsSUhSdmRHRnNJR052YzNRdUlFOTBhR1Z5ZDJselpTd2dkR2hsSUhSdmRHRnNJR1psWlZ4dUlDQWdJQ0FnTHk4Z2FYTWdjMmx0Y0d4NUlIUnlZV1JsTG5aaGJIVmxJSEJzZFhNZ1oyRnpJR1psWlhNdVhHNGdJQ0FnSUNCamIyNXpkQ0JsZEdoR1pXVWdQU0JwYzFOM1lYQnpSR1ZtWVhWc2RGUnZhMlZ1UVdSa2NtVnpjeWh6YjNWeVkyVlViMnRsYml3Z1kyaGhhVzVKWkNsY2JpQWdJQ0FnSUNBZ1B5QjBiM1JoYkZkbGFVTnZjM1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDNXRhVzUxY3lodVpYY2dUblZ0WlhKcFl5aHpiM1Z5WTJWQmJXOTFiblFzSURFd0tTbGNiaUFnSUNBZ0lDQWdJQ0FnSUM1MGIwUmxibTl0YVc1aGRHbHZiaWhGZEdobGNrUmxibTl0YVc1aGRHbHZiaTVGVkVncFhHNGdJQ0FnSUNBZ0lDQWdJQ0F1Y205MWJtUW9OaWt1ZG1Gc2RXVmNiaUFnSUNBZ0lDQWdPaUIwYjNSaGJFVjBhRU52YzNRN1hHNWNiaUFnSUNBZ0lHTnZibk4wSUdSbFkybHRZV3hCWkdwMWMzUmxaRVJsYzNScGJtRjBhVzl1UVcxdmRXNTBJRDBnWTJGc1kxUnZhMlZ1UVcxdmRXNTBLRnh1SUNBZ0lDQWdJQ0JrWlhOMGFXNWhkR2x2YmtGdGIzVnVkQ3hjYmlBZ0lDQWdJQ0FnWkdWemRHbHVZWFJwYjI1VWIydGxia2x1Wm04dVpHVmphVzFoYkhNc1hHNGdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQmpiMjV6ZENCMGIydGxibEJsY21ObGJuUmhaMlZQWmxCeVpVWmxaVVJsYzNSQmJXOTFiblFnUFNCdVpYY2dRbWxuVG5WdFltVnlLREV3TUN3Z01UQXBYRzRnSUNBZ0lDQWdJQzV0YVc1MWN5aHRaWFJoVFdGemEwWmxaU3dnTVRBcFhHNGdJQ0FnSUNBZ0lDNWthWFlvTVRBd0tUdGNiaUFnSUNBZ0lHTnZibk4wSUdSbGMzUnBibUYwYVc5dVFXMXZkVzUwUW1WbWIzSmxUV1YwWVUxaGMydEdaV1VnUFZ4dUlDQWdJQ0FnSUNCa1pXTnBiV0ZzUVdScWRYTjBaV1JFWlhOMGFXNWhkR2x2YmtGdGIzVnVkQzVrYVhZb2RHOXJaVzVRWlhKalpXNTBZV2RsVDJaUWNtVkdaV1ZFWlhOMFFXMXZkVzUwS1R0Y2JpQWdJQ0FnSUdOdmJuTjBJRzFsZEdGTllYTnJSbVZsU1c1VWIydGxibk1nUFNCa1pYTjBhVzVoZEdsdmJrRnRiM1Z1ZEVKbFptOXlaVTFsZEdGTllYTnJSbVZsTG0xcGJuVnpLRnh1SUNBZ0lDQWdJQ0JrWldOcGJXRnNRV1JxZFhOMFpXUkVaWE4wYVc1aGRHbHZia0Z0YjNWdWRDeGNiaUFnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJR052Ym5OMElIUnZhMlZ1UTI5dWRtVnljMmx2YmxKaGRHVWdQVnh1SUNBZ0lDQWdJQ0IwYjJ0bGJrTnZiblpsY25OcGIyNVNZWFJsYzF0Y2JpQWdJQ0FnSUNBZ0lDQlBZbXBsWTNRdWEyVjVjeWgwYjJ0bGJrTnZiblpsY25OcGIyNVNZWFJsY3lrdVptbHVaQ2dvZEc5clpXNUJaR1J5WlhOektTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTkZjWFZoYkVOaGMyVkpibk5sYm5OcGRHbDJaU2gwYjJ0bGJrRmtaSEpsYzNNc0lHUmxjM1JwYm1GMGFXOXVWRzlyWlc0cExGeHVJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnWFR0Y2JpQWdJQ0FnSUdOdmJuTjBJR052Ym5abGNuTnBiMjVTWVhSbFJtOXlVMjl5ZEdsdVp5QTlJSFJ2YTJWdVEyOXVkbVZ5YzJsdmJsSmhkR1VnZkh3Z01UdGNibHh1SUNBZ0lDQWdZMjl1YzNRZ1pYUm9WbUZzZFdWUFpsUnZhMlZ1Y3lBOUlHUmxZMmx0WVd4QlpHcDFjM1JsWkVSbGMzUnBibUYwYVc5dVFXMXZkVzUwTG5ScGJXVnpLRnh1SUNBZ0lDQWdJQ0JqYjI1MlpYSnphVzl1VW1GMFpVWnZjbE52Y25ScGJtY3VkRzlUZEhKcGJtY29NVEFwTEZ4dUlDQWdJQ0FnSUNBeE1DeGNiaUFnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJR052Ym5OMElHTnZiblpsY25OcGIyNVNZWFJsUm05eVEyRnNZM1ZzWVhScGIyNXpJRDBnYVhOVGQyRndjMFJsWm1GMWJIUlViMnRsYmtGa1pISmxjM01vWEc0Z0lDQWdJQ0FnSUdSbGMzUnBibUYwYVc5dVZHOXJaVzRzWEc0Z0lDQWdJQ0FnSUdOb1lXbHVTV1FzWEc0Z0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUQ4Z01WeHVJQ0FnSUNBZ0lDQTZJSFJ2YTJWdVEyOXVkbVZ5YzJsdmJsSmhkR1U3WEc1Y2JpQWdJQ0FnSUdOdmJuTjBJRzkyWlhKaGJHeFdZV3gxWlU5bVVYVnZkR1ZHYjNKVGIzSjBhVzVuSUQxY2JpQWdJQ0FnSUNBZ1kyOXVkbVZ5YzJsdmJsSmhkR1ZHYjNKRFlXeGpkV3hoZEdsdmJuTWdQVDA5SUhWdVpHVm1hVzVsWkZ4dUlDQWdJQ0FnSUNBZ0lEOGdaWFJvVm1Gc2RXVlBabFJ2YTJWdWMxeHVJQ0FnSUNBZ0lDQWdJRG9nWlhSb1ZtRnNkV1ZQWmxSdmEyVnVjeTV0YVc1MWN5aGxkR2hHWldVc0lERXdLVHRjYmx4dUlDQWdJQ0FnY1hWdmRHVXVaWFJvUm1WbElEMGdaWFJvUm1WbExuUnZVM1J5YVc1bktERXdLVHRjYmx4dUlDQWdJQ0FnYVdZZ0tHTnZiblpsY25OcGIyNVNZWFJsUm05eVEyRnNZM1ZzWVhScGIyNXpJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdjWFZ2ZEdVdVpYUm9WbUZzZFdWUFpsUnZhMlZ1Y3lBOUlHVjBhRlpoYkhWbFQyWlViMnRsYm5NdWRHOVRkSEpwYm1jb01UQXBPMXh1SUNBZ0lDQWdJQ0J4ZFc5MFpTNXZkbVZ5WVd4c1ZtRnNkV1ZQWmxGMWIzUmxJRDBnYjNabGNtRnNiRlpoYkhWbFQyWlJkVzkwWlVadmNsTnZjblJwYm1jdWRHOVRkSEpwYm1jb01UQXBPMXh1SUNBZ0lDQWdJQ0J4ZFc5MFpTNXRaWFJoVFdGemEwWmxaVWx1UlhSb0lEMGdiV1YwWVUxaGMydEdaV1ZKYmxSdmEyVnVjMXh1SUNBZ0lDQWdJQ0FnSUM1MGFXMWxjeWhqYjI1MlpYSnphVzl1VW1GMFpVWnZja05oYkdOMWJHRjBhVzl1Y3k1MGIxTjBjbWx1WnlneE1Da3BYRzRnSUNBZ0lDQWdJQ0FnTG5SdlUzUnlhVzVuS0RFd0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNCdmRtVnlZV3hzVm1Gc2RXVlBaa0psYzNSUmRXOTBaVVp2Y2xOdmNuUnBibWNnUFQwOUlHNTFiR3dnZkh4Y2JpQWdJQ0FnSUNBZ2IzWmxjbUZzYkZaaGJIVmxUMlpSZFc5MFpVWnZjbE52Y25ScGJtY3VaM1FvYjNabGNtRnNiRlpoYkhWbFQyWkNaWE4wVVhWdmRHVkdiM0pUYjNKMGFXNW5LVnh1SUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUhSdmNFRm5aMGxrSUQwZ1lXZG5jbVZuWVhSdmNqdGNiaUFnSUNBZ0lDQWdiM1psY21Gc2JGWmhiSFZsVDJaQ1pYTjBVWFZ2ZEdWR2IzSlRiM0owYVc1bklEMGdiM1psY21Gc2JGWmhiSFZsVDJaUmRXOTBaVVp2Y2xOdmNuUnBibWM3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JqYjI1emRDQnBjMEpsYzNRZ1BWeHVJQ0FnSUNBZ2FYTlRkMkZ3YzBSbFptRjFiSFJVYjJ0bGJrRmtaSEpsYzNNb1hHNGdJQ0FnSUNBZ0lHNWxkMUYxYjNSbGMxdDBiM0JCWjJkSlpGMHVaR1Z6ZEdsdVlYUnBiMjVVYjJ0bGJpeGNiaUFnSUNBZ0lDQWdZMmhoYVc1SlpDeGNiaUFnSUNBZ0lDa2dmSHhjYmlBZ0lDQWdJRUp2YjJ4bFlXNG9YRzRnSUNBZ0lDQWdJSFJ2YTJWdVEyOXVkbVZ5YzJsdmJsSmhkR1Z6VzF4dUlDQWdJQ0FnSUNBZ0lFOWlhbVZqZEM1clpYbHpLSFJ2YTJWdVEyOXVkbVZ5YzJsdmJsSmhkR1Z6S1M1bWFXNWtLQ2gwYjJ0bGJrRmtaSEpsYzNNcElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNCcGMwVnhkV0ZzUTJGelpVbHVjMlZ1YzJsMGFYWmxLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiMnRsYmtGa1pISmxjM01zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzVsZDFGMWIzUmxjMXQwYjNCQloyZEpaRjAvTG1SbGMzUnBibUYwYVc5dVZHOXJaVzRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBMRnh1SUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ1hTeGNiaUFnSUNBZ0lDazdYRzVjYmlBZ0lDQnNaWFFnYzJGMmFXNW5jeUE5SUc1MWJHdzdYRzVjYmlBZ0lDQnBaaUFvYVhOQ1pYTjBLU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQmlaWE4wVVhWdmRHVWdQU0J1WlhkUmRXOTBaWE5iZEc5d1FXZG5TV1JkTzF4dVhHNGdJQ0FnSUNCellYWnBibWR6SUQwZ2UzMDdYRzVjYmlBZ0lDQWdJR052Ym5OMElIdGNiaUFnSUNBZ0lDQWdaWFJvUm1WbE9pQnRaV1JwWVc1RmRHaEdaV1VzWEc0Z0lDQWdJQ0FnSUcxbGRHRk5ZWE5yUm1WbFNXNUZkR2c2SUcxbFpHbGhiazFsZEdGTllYTnJSbVZsTEZ4dUlDQWdJQ0FnSUNCbGRHaFdZV3gxWlU5bVZHOXJaVzV6T2lCdFpXUnBZVzVGZEdoV1lXeDFaVTltVkc5clpXNXpMRnh1SUNBZ0lDQWdmU0E5SUdkbGRFMWxaR2xoYmtWMGFGWmhiSFZsVVhWdmRHVW9UMkpxWldOMExuWmhiSFZsY3lodVpYZFJkVzkwWlhNcEtUdGNibHh1SUNBZ0lDQWdMeThnVUdWeVptOXliV0Z1WTJVZ2MyRjJhVzVuY3lCaGNtVWdZMkZzWTNWc1lYUmxaQ0JoY3pwY2JpQWdJQ0FnSUM4dklDQWdLR1YwYUZaaGJIVmxUMlpVYjJ0bGJuTWdabTl5SUhSb1pTQmlaWE4wSUhSeVlXUmxLU0F0SUNobGRHaFdZV3gxWlU5bVZHOXJaVzV6SUdadmNpQjBhR1VnYldWa2FXRWdkSEpoWkdVcFhHNGdJQ0FnSUNCellYWnBibWR6TG5CbGNtWnZjbTFoYm1ObElEMGdibVYzSUVKcFowNTFiV0psY2loaVpYTjBVWFZ2ZEdVdVpYUm9WbUZzZFdWUFpsUnZhMlZ1Y3l3Z01UQXBMbTFwYm5WektGeHVJQ0FnSUNBZ0lDQnRaV1JwWVc1RmRHaFdZV3gxWlU5bVZHOXJaVzV6TEZ4dUlDQWdJQ0FnSUNBeE1DeGNiaUFnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQzh2SUVabFpTQnpZWFpwYm1keklHRnlaU0JqWVd4amRXeGhkR1ZrSUdGek9seHVJQ0FnSUNBZ0x5OGdJQ0FvWm1WbElHWnZjaUIwYUdVZ2JXVmthV0Z1SUhSeVlXUmxLU0F0SUNobVpXVWdabTl5SUhSb1pTQmlaWE4wSUhSeVlXUmxLVnh1SUNBZ0lDQWdjMkYyYVc1bmN5NW1aV1VnUFNCdVpYY2dRbWxuVG5WdFltVnlLRzFsWkdsaGJrVjBhRVpsWlNrdWJXbHVkWE1vWW1WemRGRjFiM1JsTG1WMGFFWmxaU3dnTVRBcE8xeHVYRzRnSUNBZ0lDQnpZWFpwYm1kekxtMWxkR0ZOWVhOclJtVmxJRDBnWW1WemRGRjFiM1JsTG0xbGRHRk5ZWE5yUm1WbFNXNUZkR2c3WEc1Y2JpQWdJQ0FnSUM4dklGUnZkR0ZzSUhOaGRtbHVaM01nWVhKbElHTmhiR04xYkdGMFpXUWdZWE02WEc0Z0lDQWdJQ0F2THlBZ0lIQmxjbVp2Y20xaGJtTmxJSE5oZG1sdVozTWdLeUJtWldVZ2MyRjJhVzVuY3lBdElHMWxkR0Z0WVhOcklHWmxaVnh1SUNBZ0lDQWdjMkYyYVc1bmN5NTBiM1JoYkNBOUlITmhkbWx1WjNNdWNHVnlabTl5YldGdVkyVmNiaUFnSUNBZ0lDQWdMbkJzZFhNb2MyRjJhVzVuY3k1bVpXVXBYRzRnSUNBZ0lDQWdJQzV0YVc1MWN5aHpZWFpwYm1kekxtMWxkR0ZOWVhOclJtVmxLVnh1SUNBZ0lDQWdJQ0F1ZEc5VGRISnBibWNvTVRBcE8xeHVJQ0FnSUNBZ2MyRjJhVzVuY3k1d1pYSm1iM0p0WVc1alpTQTlJSE5oZG1sdVozTXVjR1Z5Wm05eWJXRnVZMlV1ZEc5VGRISnBibWNvTVRBcE8xeHVJQ0FnSUNBZ2MyRjJhVzVuY3k1bVpXVWdQU0J6WVhacGJtZHpMbVpsWlM1MGIxTjBjbWx1WnlneE1DazdYRzRnSUNBZ0lDQnpZWFpwYm1kekxtMWxaR2xoYmsxbGRHRk5ZWE5yUm1WbElEMGdiV1ZrYVdGdVRXVjBZVTFoYzJ0R1pXVTdYRzVjYmlBZ0lDQWdJRzVsZDFGMWIzUmxjMXQwYjNCQloyZEpaRjB1YVhOQ1pYTjBVWFZ2ZEdVZ1BTQjBjblZsTzF4dUlDQWdJQ0FnYm1WM1VYVnZkR1Z6VzNSdmNFRm5aMGxrWFM1ellYWnBibWR6SUQwZ2MyRjJhVzVuY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdXM1J2Y0VGblowbGtMQ0J1WlhkUmRXOTBaWE5kTzF4dUlDQjlYRzVjYmlBZ1lYTjVibU1nWDJkbGRFVlNRekl3UVd4c2IzZGhibU5sS0dOdmJuUnlZV04wUVdSa2NtVnpjeXdnZDJGc2JHVjBRV1JrY21WemN5d2dZMmhoYVc1SlpDa2dlMXh1SUNBZ0lHTnZibk4wSUdOdmJuUnlZV04wSUQwZ2JtVjNJRU52Ym5SeVlXTjBLR052Ym5SeVlXTjBRV1JrY21WemN5d2dZV0pwTENCMGFHbHpMbVYwYUdWeWMxQnliM1pwWkdWeUtUdGNiaUFnSUNCeVpYUjFjbTRnWVhkaGFYUWdZMjl1ZEhKaFkzUXVZV3hzYjNkaGJtTmxLRnh1SUNBZ0lDQWdkMkZzYkdWMFFXUmtjbVZ6Y3l4Y2JpQWdJQ0FnSUZOWFFWQlRYME5JUVVsT1NVUmZRMDlPVkZKQlExUmZRVVJFVWtWVFUxOU5RVkJiWTJoaGFXNUpaRjBzWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVOaGJHTjFiR0YwWlhNZ2RHaGxJRzFsWkdsaGJpQnZkbVZ5WVd4c1ZtRnNkV1ZQWmxGMWIzUmxJRzltSUdFZ2MyRnRjR3hsSUc5bUlIRjFiM1JsY3k1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0JmY1hWdmRHVnpJQzBnUVNCellXMXdiR1VnYjJZZ2NYVnZkR1VnYjJKcVpXTjBjeUIzYVhSb0lHOTJaWEpoYkd4V1lXeDFaVTltVVhWdmRHVXNJR1YwYUVabFpTd2diV1YwWVUxaGMydEdaV1ZKYmtWMGFDd2dZVzVrSUdWMGFGWmhiSFZsVDJaVWIydGxibk1nY0hKdmNHVnlkR2xsYzF4dUlDb2dRSEpsZEhWeWJuTWdlMjlpYW1WamRIMGdRVzRnYjJKcVpXTjBJSGRwZEdnZ2RHaGxJR1YwYUZaaGJIVmxUMlpVYjJ0bGJuTXNJR1YwYUVabFpTd2dZVzVrSUcxbGRHRk5ZWE5yUm1WbFNXNUZkR2dnYjJZZ2RHaGxJSEYxYjNSbElIZHBkR2dnZEdobElHMWxaR2xoYmlCdmRtVnlZV3hzVm1Gc2RXVlBabEYxYjNSbFhHNGdLaTljYm1aMWJtTjBhVzl1SUdkbGRFMWxaR2xoYmtWMGFGWmhiSFZsVVhWdmRHVW9YM0YxYjNSbGN5a2dlMXh1SUNCcFppQW9JVUZ5Y21GNUxtbHpRWEp5WVhrb1gzRjFiM1JsY3lrZ2ZId2dYM0YxYjNSbGN5NXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMFY0Y0dWamRHVmtJRzV2YmkxbGJYQjBlU0JoY25KaGVTQndZWEpoYlM0bktUdGNiaUFnZlZ4dVhHNGdJR052Ym5OMElIRjFiM1JsY3lBOUlGc3VMaTVmY1hWdmRHVnpYVHRjYmx4dUlDQnhkVzkwWlhNdWMyOXlkQ2dvY1hWdmRHVkJMQ0J4ZFc5MFpVSXBJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnZkbVZ5WVd4c1ZtRnNkV1ZQWmxGMWIzUmxRU0E5SUc1bGR5QkNhV2RPZFcxaVpYSW9jWFZ2ZEdWQkxtOTJaWEpoYkd4V1lXeDFaVTltVVhWdmRHVXNJREV3S1R0Y2JpQWdJQ0JqYjI1emRDQnZkbVZ5WVd4c1ZtRnNkV1ZQWmxGMWIzUmxRaUE5SUc1bGR5QkNhV2RPZFcxaVpYSW9jWFZ2ZEdWQ0xtOTJaWEpoYkd4V1lXeDFaVTltVVhWdmRHVXNJREV3S1R0Y2JpQWdJQ0JwWmlBb2IzWmxjbUZzYkZaaGJIVmxUMlpSZFc5MFpVRXVaWEYxWVd4ektHOTJaWEpoYkd4V1lXeDFaVTltVVhWdmRHVkNLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJREE3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdmRtVnlZV3hzVm1Gc2RXVlBabEYxYjNSbFFTNXNaWE56VkdoaGJpaHZkbVZ5WVd4c1ZtRnNkV1ZQWmxGMWIzUmxRaWtnUHlBdE1TQTZJREU3WEc0Z0lIMHBPMXh1WEc0Z0lHbG1JQ2h4ZFc5MFpYTXViR1Z1WjNSb0lDVWdNaUE5UFQwZ01Ta2dlMXh1SUNBZ0lDOHZJSEpsZEhWeWJpQnRhV1JrYkdVZ2RtRnNkV1Z6WEc0Z0lDQWdZMjl1YzNRZ2JXVmthV0Z1VDNabGNtRnNiRlpoYkhWbElEMWNiaUFnSUNBZ0lIRjFiM1JsYzFzb2NYVnZkR1Z6TG14bGJtZDBhQ0F0SURFcElDOGdNbDB1YjNabGNtRnNiRlpoYkhWbFQyWlJkVzkwWlR0Y2JpQWdJQ0JqYjI1emRDQnhkVzkwWlhOTllYUmphR2x1WjAxbFpHbGhibEYxYjNSbFZtRnNkV1VnUFNCeGRXOTBaWE11Wm1sc2RHVnlLRnh1SUNBZ0lDQWdLSEYxYjNSbEtTQTlQaUJ0WldScFlXNVBkbVZ5WVd4c1ZtRnNkV1VnUFQwOUlIRjFiM1JsTG05MlpYSmhiR3hXWVd4MVpVOW1VWFZ2ZEdVc1hHNGdJQ0FnS1R0Y2JpQWdJQ0J5WlhSMWNtNGdiV1ZoYm5OUFpsRjFiM1JsYzBabFpYTkJibVJXWVd4MVpTaHhkVzkwWlhOTllYUmphR2x1WjAxbFpHbGhibEYxYjNSbFZtRnNkV1VwTzF4dUlDQjlYRzVjYmlBZ0x5OGdjbVYwZFhKdUlHMWxZVzRnYjJZZ2JXbGtaR3hsSUhSM2J5QjJZV3gxWlhOY2JpQWdZMjl1YzNRZ2RYQndaWEpKYm1SbGVDQTlJSEYxYjNSbGN5NXNaVzVuZEdnZ0x5QXlPMXh1SUNCamIyNXpkQ0JzYjNkbGNrbHVaR1Y0SUQwZ2RYQndaWEpKYm1SbGVDQXRJREU3WEc1Y2JpQWdZMjl1YzNRZ2IzWmxjbUZzYkZaaGJIVmxRWFJWY0hCbGNrbHVaR1Y0SUQwZ2NYVnZkR1Z6VzNWd2NHVnlTVzVrWlhoZExtOTJaWEpoYkd4V1lXeDFaVTltVVhWdmRHVTdYRzRnSUdOdmJuTjBJRzkyWlhKaGJHeFdZV3gxWlVGMFRHOTNaWEpKYm1SbGVDQTlJSEYxYjNSbGMxdHNiM2RsY2tsdVpHVjRYUzV2ZG1WeVlXeHNWbUZzZFdWUFpsRjFiM1JsTzF4dVhHNGdJR052Ym5OMElIRjFiM1JsYzAxaGRHTm9hVzVuVlhCd1pYSkpibVJsZUZaaGJIVmxJRDBnY1hWdmRHVnpMbVpwYkhSbGNpaGNiaUFnSUNBb2NYVnZkR1VwSUQwK0lHOTJaWEpoYkd4V1lXeDFaVUYwVlhCd1pYSkpibVJsZUNBOVBUMGdjWFZ2ZEdVdWIzWmxjbUZzYkZaaGJIVmxUMlpSZFc5MFpTeGNiaUFnS1R0Y2JpQWdZMjl1YzNRZ2NYVnZkR1Z6VFdGMFkyaHBibWRNYjNkbGNrbHVaR1Y0Vm1Gc2RXVWdQU0J4ZFc5MFpYTXVabWxzZEdWeUtGeHVJQ0FnSUNoeGRXOTBaU2tnUFQ0Z2IzWmxjbUZzYkZaaGJIVmxRWFJNYjNkbGNrbHVaR1Y0SUQwOVBTQnhkVzkwWlM1dmRtVnlZV3hzVm1Gc2RXVlBabEYxYjNSbExGeHVJQ0FwTzF4dVhHNGdJR052Ym5OMElHWmxaWE5CYm1SV1lXeDFaVUYwVlhCd1pYSkpibVJsZUNBOUlHMWxZVzV6VDJaUmRXOTBaWE5HWldWelFXNWtWbUZzZFdVb1hHNGdJQ0FnY1hWdmRHVnpUV0YwWTJocGJtZFZjSEJsY2tsdVpHVjRWbUZzZFdVc1hHNGdJQ2s3WEc0Z0lHTnZibk4wSUdabFpYTkJibVJXWVd4MVpVRjBURzkzWlhKSmJtUmxlQ0E5SUcxbFlXNXpUMlpSZFc5MFpYTkdaV1Z6UVc1a1ZtRnNkV1VvWEc0Z0lDQWdjWFZ2ZEdWelRXRjBZMmhwYm1kTWIzZGxja2x1WkdWNFZtRnNkV1VzWEc0Z0lDazdYRzVjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0JsZEdoR1pXVTZJRzVsZHlCQ2FXZE9kVzFpWlhJb1ptVmxjMEZ1WkZaaGJIVmxRWFJWY0hCbGNrbHVaR1Y0TG1WMGFFWmxaU3dnTVRBcFhHNGdJQ0FnSUNBdWNHeDFjeWhtWldWelFXNWtWbUZzZFdWQmRFeHZkMlZ5U1c1a1pYZ3VaWFJvUm1WbExDQXhNQ2xjYmlBZ0lDQWdJQzVrYVhacFpHVmtRbmtvTWlsY2JpQWdJQ0FnSUM1MGIxTjBjbWx1WnlneE1Da3NYRzRnSUNBZ2JXVjBZVTFoYzJ0R1pXVkpia1YwYURvZ2JtVjNJRUpwWjA1MWJXSmxjaWhjYmlBZ0lDQWdJR1psWlhOQmJtUldZV3gxWlVGMFZYQndaWEpKYm1SbGVDNXRaWFJoVFdGemEwWmxaVWx1UlhSb0xGeHVJQ0FnSUNBZ01UQXNYRzRnSUNBZ0tWeHVJQ0FnSUNBZ0xuQnNkWE1vWm1WbGMwRnVaRlpoYkhWbFFYUk1iM2RsY2tsdVpHVjRMbTFsZEdGTllYTnJSbVZsU1c1RmRHZ3NJREV3S1Z4dUlDQWdJQ0FnTG1ScGRtbGtaV1JDZVNneUtWeHVJQ0FnSUNBZ0xuUnZVM1J5YVc1bktERXdLU3hjYmlBZ0lDQmxkR2hXWVd4MVpVOW1WRzlyWlc1ek9pQnVaWGNnUW1sblRuVnRZbVZ5S0Z4dUlDQWdJQ0FnWm1WbGMwRnVaRlpoYkhWbFFYUlZjSEJsY2tsdVpHVjRMbVYwYUZaaGJIVmxUMlpVYjJ0bGJuTXNYRzRnSUNBZ0lDQXhNQ3hjYmlBZ0lDQXBYRzRnSUNBZ0lDQXVjR3gxY3lobVpXVnpRVzVrVm1Gc2RXVkJkRXh2ZDJWeVNXNWtaWGd1WlhSb1ZtRnNkV1ZQWmxSdmEyVnVjeXdnTVRBcFhHNGdJQ0FnSUNBdVpHbDJhV1JsWkVKNUtESXBYRzRnSUNBZ0lDQXVkRzlUZEhKcGJtY29NVEFwTEZ4dUlDQjlPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFTmhiR04xYkdGMFpYTWdkR2hsSUdGeWFYUm9iV1YwYVdNZ2JXVmhiaUJtYjNJZ1pXRmphQ0J2WmlCMGFISmxaU0J3Y205d1pYSjBhV1Z6SUMwZ1pYUm9SbVZsTENCdFpYUmhUV0Z6YTBabFpVbHVSWFJvSUdGdVpDQmxkR2hXWVd4MVpVOW1WRzlyWlc1eklDMGdZV055YjNOelhHNGdLaUJoYmlCaGNuSmhlU0J2WmlCdlltcGxZM1J6SUdOdmJuUmhhVzVwYm1jZ2RHaHZjMlVnY0hKdmNHVnlkR2xsY3k1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0J4ZFc5MFpYTWdMU0JCSUhOaGJYQnNaU0J2WmlCeGRXOTBaU0J2WW1wbFkzUnpJSGRwZEdnZ2IzWmxjbUZzYkZaaGJIVmxUMlpSZFc5MFpTd2daWFJvUm1WbExDQnRaWFJoVFdGemEwWmxaVWx1UlhSb0lHRnVaRnh1SUNvZ1pYUm9WbUZzZFdWUFpsUnZhMlZ1Y3lCd2NtOXdaWEowYVdWelhHNGdLaUJBY21WMGRYSnVjeUI3YjJKcVpXTjBmU0JCYmlCdlltcGxZM1FnZDJsMGFDQjBhR1VnWVhKcGRHaHRaWFJwWXlCdFpXRnVJR1ZoWTJnZ2IyWWdkR2hsSUdWMGFFWmxaU3dnYldWMFlVMWhjMnRHWldWSmJrVjBhQ0JoYm1RZ1pYUm9WbUZzZFdWUFpsUnZhMlZ1Y3lCdlpseHVJQ29nZEdobElIQmhjM05sWkNCeGRXOTBaU0J2WW1wbFkzUnpYRzRnS2k5Y2JtWjFibU4wYVc5dUlHMWxZVzV6VDJaUmRXOTBaWE5HWldWelFXNWtWbUZzZFdVb2NYVnZkR1Z6S1NCN1hHNGdJR052Ym5OMElHWmxaVUZ1WkZaaGJIVmxVM1Z0YzBGelFtbG5UblZ0WW1WeWN5QTlJSEYxYjNSbGN5NXlaV1IxWTJVb1hHNGdJQ0FnS0dabFpVRnVaRlpoYkhWbFUzVnRjeXdnY1hWdmRHVXBJRDArSUNoN1hHNGdJQ0FnSUNCbGRHaEdaV1U2SUdabFpVRnVaRlpoYkhWbFUzVnRjeTVsZEdoR1pXVXVjR3gxY3loeGRXOTBaUzVsZEdoR1pXVXNJREV3S1N4Y2JpQWdJQ0FnSUcxbGRHRk5ZWE5yUm1WbFNXNUZkR2c2SUdabFpVRnVaRlpoYkhWbFUzVnRjeTV0WlhSaFRXRnphMFpsWlVsdVJYUm9MbkJzZFhNb1hHNGdJQ0FnSUNBZ0lIRjFiM1JsTG0xbGRHRk5ZWE5yUm1WbFNXNUZkR2dzWEc0Z0lDQWdJQ0FnSURFd0xGeHVJQ0FnSUNBZ0tTeGNiaUFnSUNBZ0lHVjBhRlpoYkhWbFQyWlViMnRsYm5NNklHWmxaVUZ1WkZaaGJIVmxVM1Z0Y3k1bGRHaFdZV3gxWlU5bVZHOXJaVzV6TG5Cc2RYTW9YRzRnSUNBZ0lDQWdJSEYxYjNSbExtVjBhRlpoYkhWbFQyWlViMnRsYm5Nc1hHNGdJQ0FnSUNBZ0lERXdMRnh1SUNBZ0lDQWdLU3hjYmlBZ0lDQjlLU3hjYmlBZ0lDQjdYRzRnSUNBZ0lDQmxkR2hHWldVNklHNWxkeUJDYVdkT2RXMWlaWElvTUN3Z01UQXBMRnh1SUNBZ0lDQWdiV1YwWVUxaGMydEdaV1ZKYmtWMGFEb2dibVYzSUVKcFowNTFiV0psY2lnd0xDQXhNQ2tzWEc0Z0lDQWdJQ0JsZEdoV1lXeDFaVTltVkc5clpXNXpPaUJ1WlhjZ1FtbG5UblZ0WW1WeUtEQXNJREV3S1N4Y2JpQWdJQ0I5TEZ4dUlDQXBPMXh1WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnWlhSb1JtVmxPaUJtWldWQmJtUldZV3gxWlZOMWJYTkJjMEpwWjA1MWJXSmxjbk11WlhSb1JtVmxYRzRnSUNBZ0lDQXVaR2wyS0hGMWIzUmxjeTVzWlc1bmRHZ3NJREV3S1Z4dUlDQWdJQ0FnTG5SdlUzUnlhVzVuS0RFd0tTeGNiaUFnSUNCdFpYUmhUV0Z6YTBabFpVbHVSWFJvT2lCbVpXVkJibVJXWVd4MVpWTjFiWE5CYzBKcFowNTFiV0psY25NdWJXVjBZVTFoYzJ0R1pXVkpia1YwYUZ4dUlDQWdJQ0FnTG1ScGRpaHhkVzkwWlhNdWJHVnVaM1JvTENBeE1DbGNiaUFnSUNBZ0lDNTBiMU4wY21sdVp5Z3hNQ2tzWEc0Z0lDQWdaWFJvVm1Gc2RXVlBabFJ2YTJWdWN6b2dabVZsUVc1a1ZtRnNkV1ZUZFcxelFYTkNhV2RPZFcxaVpYSnpMbVYwYUZaaGJIVmxUMlpVYjJ0bGJuTmNiaUFnSUNBZ0lDNWthWFlvY1hWdmRHVnpMbXhsYm1kMGFDd2dNVEFwWEc0Z0lDQWdJQ0F1ZEc5VGRISnBibWNvTVRBcExGeHVJQ0I5TzF4dWZWeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ2RYUnBiSE1nUFNCN1hHNGdJR2RsZEUxbFpHbGhia1YwYUZaaGJIVmxVWFZ2ZEdVc1hHNGdJRzFsWVc1elQyWlJkVzkwWlhOR1pXVnpRVzVrVm1Gc2RXVXNYRzU5TzF4dUlpd2lhVzF3YjNKMElFVjJaVzUwUlcxcGRIUmxjaUJtY205dElDZEFiV1YwWVcxaGMyc3ZjMkZtWlMxbGRtVnVkQzFsYldsMGRHVnlKenRjYm1sdGNHOXlkQ0I3SUU5aWMyVnlkbUZpYkdWVGRHOXlaU0I5SUdaeWIyMGdKMEJ0WlhSaGJXRnpheTl2WW5NdGMzUnZjbVVuTzF4dWFXMXdiM0owSUhzZ1luVm1abVZ5Vkc5SVpYZ3NJR3RsWTJOaGF5d2dkRzlDZFdabVpYSXNJR2x6U0dWNFUzUnlhVzVuSUgwZ1puSnZiU0FuWlhSb1pYSmxkVzFxY3kxMWRHbHNKenRjYm1sdGNHOXlkQ0JGZEdoUmRXVnllU0JtY205dElDZGxkR2hxY3kxeGRXVnllU2M3WEc1cGJYQnZjblFnZXlCbGRHaEZjbkp2Y25NZ2ZTQm1jbTl0SUNkbGRHZ3RjbkJqTFdWeWNtOXljeWM3WEc1cGJYQnZjblFnZXlCRGIyMXRiMjRzSUVoaGNtUm1iM0pySUgwZ1puSnZiU0FuUUdWMGFHVnlaWFZ0YW5NdlkyOXRiVzl1Snp0Y2JtbHRjRzl5ZENCN0lGUnlZVzV6WVdOMGFXOXVSbUZqZEc5eWVTQjlJR1p5YjIwZ0owQmxkR2hsY21WMWJXcHpMM1I0Snp0Y2JtbHRjRzl5ZENCN0lFRndjSEp2ZG1Gc1ZIbHdaU0I5SUdaeWIyMGdKMEJ0WlhSaGJXRnpheTlqYjI1MGNtOXNiR1Z5TFhWMGFXeHpKenRjYm1sdGNHOXlkQ0JPYjI1alpWUnlZV05yWlhJZ1puSnZiU0FuYm05dVkyVXRkSEpoWTJ0bGNpYzdYRzVwYlhCdmNuUWdiRzluSUdaeWIyMGdKMnh2WjJ4bGRtVnNKenRjYm1sdGNHOXlkQ0JDYVdkT2RXMWlaWElnWm5KdmJTQW5ZbWxuYm5WdFltVnlMbXB6Snp0Y2JtbHRjRzl5ZENCN0lHMWxjbWRsTENCd2FXTnJRbmtnZlNCbWNtOXRJQ2RzYjJSaGMyZ25PMXh1YVcxd2IzSjBJR05zWldGdVJYSnliM0pUZEdGamF5Qm1jbTl0SUNjdUxpOHVMaTlzYVdJdlkyeGxZVzVGY25KdmNsTjBZV05ySnp0Y2JtbHRjRzl5ZENCN1hHNGdJR2hsZUZSdlFtNHNYRzRnSUVKdVRYVnNkR2x3YkhsQ2VVWnlZV04wYVc5dUxGeHVJQ0JoWkdSSVpYaFFjbVZtYVhnc1hHNGdJR2RsZEVOb1lXbHVWSGx3WlN4Y2JuMGdabkp2YlNBbkxpNHZMaTR2YkdsaUwzVjBhV3duTzF4dWFXMXdiM0owSUh0Y2JpQWdWSEpoYm5OaFkzUnBiMjVUZEdGMGRYTXNYRzRnSUZSeVlXNXpZV04wYVc5dVZIbHdaU3hjYmlBZ1ZHOXJaVzVUZEdGdVpHRnlaQ3hjYmlBZ1ZISmhibk5oWTNScGIyNUZiblpsYkc5d1pWUjVjR1VzWEc0Z0lGUnlZVzV6WVdOMGFXOXVUV1YwWVUxbGRISnBZM05GZG1WdWRDeGNiaUFnVkhKaGJuTmhZM1JwYjI1QmNIQnliM1poYkVGdGIzVnVkRlI1Y0dVc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZkSEpoYm5OaFkzUnBiMjRuTzF4dWFXMXdiM0owSUhzZ1RVVlVRVTFCVTB0ZlEwOU9WRkpQVEV4RlVsOUZWa1ZPVkZNZ2ZTQm1jbTl0SUNjdUxpOHVMaTl0WlhSaGJXRnpheTFqYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN1hHNGdJRWRCVTE5TVNVMUpWRk1zWEc0Z0lFZGhjMFZ6ZEdsdFlYUmxWSGx3WlhNc1hHNGdJRWRoYzFKbFkyOXRiV1Z1WkdGMGFXOXVjeXhjYmlBZ1ExVlRWRTlOWDBkQlUxOUZVMVJKVFVGVVJTeGNiaUFnVUhKcGIzSnBkSGxNWlhabGJITXNYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12WjJGekp6dGNibWx0Y0c5eWRDQjdYRzRnSUdKdVZHOUlaWGdzWEc0Z0lHUmxZMGRYUlVsVWIwaGxlRmRGU1N4Y2JpQWdhR1Y0VjBWSlZHOUVaV05GVkVnc1hHNGdJR2hsZUZkRlNWUnZSR1ZqUjFkRlNTeGNibjBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2YzJoaGNtVmtMMjF2WkhWc1pYTXZZMjl1ZG1WeWMybHZiaTUxZEdsc2N5YzdYRzVwYlhCdmNuUWdleUJwYzFOM1lYQnpSR1ZtWVhWc2RGUnZhMlZ1UVdSa2NtVnpjeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNOb1lYSmxaQzl0YjJSMWJHVnpMM04zWVhCekxuVjBhV3h6Snp0Y2JtbHRjRzl5ZENCN0lFMWxkR0ZOWlhSeWFXTnpSWFpsYm5SRFlYUmxaMjl5ZVNCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmJXVjBZVzFsZEhKcFkzTW5PMXh1YVcxd2IzSjBJSHRjYmlBZ1EwaEJTVTVmU1VSZlZFOWZSMEZUWDB4SlRVbFVYMEpWUmtaRlVsOU5RVkFzWEc0Z0lFNUZWRmRQVWt0ZlZGbFFSVk1zWEc0Z0lFNWxkSGR2Y210VGRHRjBkWE1zWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmJtVjBkMjl5YXljN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JrWlhSbGNtMXBibVZVY21GdWMyRmpkR2x2YmtGemMyVjBWSGx3WlN4Y2JpQWdaR1YwWlhKdGFXNWxWSEpoYm5OaFkzUnBiMjVEYjI1MGNtRmpkRU52WkdVc1hHNGdJR1JsZEdWeWJXbHVaVlJ5WVc1ellXTjBhVzl1Vkhsd1pTeGNiaUFnYVhORlNWQXhOVFU1VkhKaGJuTmhZM1JwYjI0c1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOXRiMlIxYkdWekwzUnlZVzV6WVdOMGFXOXVMblYwYVd4ekp6dGNibWx0Y0c5eWRDQjdJRTlTU1VkSlRsOU5SVlJCVFVGVFN5QjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZZWEJ3Snp0Y2JtbHRjRzl5ZENCN1hHNGdJR05oYkdOSFlYTlViM1JoYkN4Y2JpQWdaMlYwVTNkaGNITlViMnRsYm5OU1pXTmxhWFpsWkVaeWIyMVVlRTFsZEdFc1hHNGdJRlJTUVU1VFFVTlVTVTlPWDBWT1ZrVk1UMUJGWDFSWlVFVmZUa0ZOUlZNc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOXNhV0l2ZEhKaGJuTmhZM1JwYjI1ekxXTnZiblJ5YjJ4c1pYSXRkWFJwYkhNbk8xeHVhVzF3YjNKMElIc2dUblZ0WlhKcFl5QjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOXRiMlIxYkdWekwwNTFiV1Z5YVdNbk8xeHVhVzF3YjNKMElGUnlZVzV6WVdOMGFXOXVVM1JoZEdWTllXNWhaMlZ5SUdaeWIyMGdKeTR2ZEhndGMzUmhkR1V0YldGdVlXZGxjaWM3WEc1cGJYQnZjblFnVkhoSFlYTlZkR2xzSUdaeWIyMGdKeTR2ZEhndFoyRnpMWFYwYVd4ekp6dGNibWx0Y0c5eWRDQlFaVzVrYVc1blZISmhibk5oWTNScGIyNVVjbUZqYTJWeUlHWnliMjBnSnk0dmNHVnVaR2x1WnkxMGVDMTBjbUZqYTJWeUp6dGNibWx0Y0c5eWRDQXFJR0Z6SUhSNFZYUnBiSE1nWm5KdmJTQW5MaTlzYVdJdmRYUnBiQ2M3WEc1Y2JtTnZibk4wSUUxQldGOU5SVTFUVkU5U1JWOVVXRjlNU1ZOVVgxTkpXa1VnUFNBeE1EQTdJQzh2SUU1MWJXSmxjaUJ2WmlCMGNtRnVjMkZqZEdsdmJuTWdLR0o1SUhWdWFYRjFaU0J1YjI1alpYTXBJSFJ2SUd0bFpYQWdhVzRnYldWdGIzSjVYRzVqYjI1emRDQlZVRVJCVkVWZlVFOVRWRjlVV0Y5Q1FVeEJUa05GWDFSSlRVVlBWVlFnUFNBMU1EQXdPMXh1WEc1amIyNXpkQ0JUVjBGUVgxUlNRVTVUUVVOVVNVOU9YMVJaVUVWVElEMGdXMXh1SUNCVWNtRnVjMkZqZEdsdmJsUjVjR1V1YzNkaGNDeGNiaUFnVkhKaGJuTmhZM1JwYjI1VWVYQmxMbk4zWVhCQmNIQnliM1poYkN4Y2JsMDdYRzVjYmk4dklFOXViSGtnWTJWeWRHRnBiaUIwZVhCbGN5QnZaaUIwY21GdWMyRmpkR2x2Ym5NZ2MyaHZkV3hrSUdKbElHRnNiRzkzWldRZ2RHOGdZbVVnYzNCbFkybG1hV1ZrSUhkb1pXNWNiaTh2SUdGa1pHbHVaeUJoSUc1bGR5QjFibUZ3Y0hKdmRtVmtJSFJ5WVc1ellXTjBhVzl1TGx4dVkyOXVjM1FnVmtGTVNVUmZWVTVCVUZCU1QxWkZSRjlVVWtGT1UwRkRWRWxQVGw5VVdWQkZVeUE5SUZ0Y2JpQWdMaTR1VTFkQlVGOVVVa0ZPVTBGRFZFbFBUbDlVV1ZCRlV5eGNiaUFnVkhKaGJuTmhZM1JwYjI1VWVYQmxMbk5wYlhCc1pWTmxibVFzWEc0Z0lGUnlZVzV6WVdOMGFXOXVWSGx3WlM1MGIydGxiazFsZEdodlpGUnlZVzV6Wm1WeUxGeHVJQ0JVY21GdWMyRmpkR2x2YmxSNWNHVXVkRzlyWlc1TlpYUm9iMlJVY21GdWMyWmxja1p5YjIwc1hHNGdJRlJ5WVc1ellXTjBhVzl1Vkhsd1pTNWpiMjUwY21GamRFbHVkR1Z5WVdOMGFXOXVMRnh1WFR0Y2JseHVMeW9xWEc0Z0tpQkFkSGx3WldSbFppQjdhVzF3YjNKMEtDY3VMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMM1J5WVc1ellXTjBhVzl1SnlrdVZISmhibk5oWTNScGIyNU5aWFJoZlNCVWNtRnVjMkZqZEdsdmJrMWxkR0ZjYmlBcUlFQjBlWEJsWkdWbUlIdHBiWEJ2Y25Rb0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZaMkZ6SnlrdVZIaEhZWE5HWldWemZTQlVlRWRoYzBabFpYTmNiaUFxTDF4dVhHNWpiMjV6ZENCTlJWUlNTVU5UWDFOVVFWUlZVMTlHUVVsTVJVUWdQU0FuWm1GcGJHVmtJRzl1TFdOb1lXbHVKenRjYmx4dUx5b3FYRzRnS2lCQWRIbHdaV1JsWmlCN2IySnFaV04wZlNCRGRYTjBiMjFIWVhOVFpYUjBhVzVuYzF4dUlDb2dRSEJ5YjNCbGNuUjVJSHR6ZEhKcGJtZDlJRnRuWVhOZElDMGdWR2hsSUdkaGN5QnNhVzFwZENCMGJ5QjFjMlVnWm05eUlIUm9aU0IwY21GdWMyRmpkR2x2Ymx4dUlDb2dRSEJ5YjNCbGNuUjVJSHR6ZEhKcGJtZDlJRnRuWVhOUWNtbGpaVjBnTFNCVWFHVWdaMkZ6VUhKcFkyVWdkRzhnZFhObElHWnZjaUJoSUd4bFoyRmplU0IwY21GdWMyRmpkR2x2Ymx4dUlDb2dRSEJ5YjNCbGNuUjVJSHR6ZEhKcGJtZDlJRnR0WVhoR1pXVlFaWEpIWVhOZElDMGdWR2hsSUcxaGVHbHRkVzBnWVcxdmRXNTBJSFJ2SUhCaGVTQndaWElnWjJGeklHOXVJR0ZjYmlBcUlDQkZTVkF0TVRVMU9TQjBjbUZ1YzJGamRHbHZibHh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlGdHRZWGhRY21sdmNtbDBlVVpsWlZCbGNrZGhjMTBnTFNCVWFHVWdiV0Y0YVcxMWJTQmhiVzkxYm5RZ2IyWWdjR0ZwWkNCbVpXVmNiaUFxSUNCMGJ5QmlaU0JrYVhOMGNtbGlkWFJsWkNCMGJ5QnRhVzVsY2lCcGJpQmhiaUJGU1ZBdE1UVTFPU0IwY21GdWMyRmpkR2x2Ymx4dUlDb3ZYRzVjYmk4cUtseHVJQ29nVkhKaGJuTmhZM1JwYjI0Z1EyOXVkSEp2Ykd4bGNpQnBjeUJoYmlCaFoyZHlaV2RoZEdVZ2IyWWdjM1ZpTFdOdmJuUnliMnhzWlhKeklHRnVaQ0IwY21GamEyVnljMXh1SUNvZ1kyOXRjRzl6YVc1bklIUm9aVzBnYVc0Z1lTQjNZWGtnZEc4Z1ltVWdaWGh3YjNObFpDQjBieUIwYUdVZ2JXVjBZVzFoYzJzZ1kyOXVkSEp2Ykd4bGNseHVJQ3BjYmlBcUlDMGdZSFI0VTNSaGRHVk5ZVzVoWjJWeVhHNGdLaUJ5WlhOd2IyNXphV0pzWlNCbWIzSWdkR2hsSUhOMFlYUmxJRzltSUdFZ2RISmhibk5oWTNScGIyNGdZVzVrWEc0Z0tpQnpkRzl5YVc1bklIUm9aU0IwY21GdWMyRmpkR2x2Ymx4dUlDb2dMU0J3Wlc1a2FXNW5WSGhVY21GamEyVnlYRzRnS2lCM1lYUmphR2x1WnlCaWJHOWphM01nWm05eUlIUnlZVzV6WVdOMGFXOXVjeUIwYnlCaVpTQnBibU5zZFdSbFhHNGdLaUJoYm1RZ1pXMXBkSFJwYm1jZ1kyOXVabWx5YldWa0lHVjJaVzUwYzF4dUlDb2dMU0IwZUVkaGMxVjBhV3hjYmlBcUlHZGhjeUJqWVd4amRXeGhkR2x2Ym5NZ1lXNWtJSE5oWm1WMGVTQmlkV1ptWlhKcGJtZGNiaUFxSUMwZ2JtOXVZMlZVY21GamEyVnlYRzRnS2lCallXeGpkV3hoZEdsdVp5QnViMjVqWlhOY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYjNCMGMxeHVJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJRzl3ZEhNdWFXNXBkRk4wWVhSbElDMGdhVzVwZEdsaGJDQjBjbUZ1YzJGamRHbHZiaUJzYVhOMElHUmxabUYxYkhRZ2FYTWdZVzRnWlcxd2RIa2dZWEp5WVhsY2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJRzl3ZEhNdVoyVjBUbVYwZDI5eWEwbGtJQzBnUjJWMElIUm9aU0JqZFhKeVpXNTBJRzVsZEhkdmNtc2dTVVF1WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQnZjSFJ6TG1kbGRFNWxkSGR2Y210VGRHRjBkWE1nTFNCSFpYUWdkR2hsSUdOMWNuSmxiblFnYm1WMGQyOXlheUJ6ZEdGMGRYTXVYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCdmNIUnpMbTl1VG1WMGQyOXlhMU4wWVhSbFEyaGhibWRsSUMwZ1UzVmljMk55YVdKbElIUnZJRzVsZEhkdmNtc2djM1JoZEdVZ1kyaGhibWRsSUdWMlpXNTBjeTVjYmlBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCdmNIUnpMbUpzYjJOclZISmhZMnRsY2lBdElFRnVJR2x1YzNSaGJtTmxJRzltSUdWMGFDMWliRzlqYTNSeVlXTnJaWEpjYmlBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCdmNIUnpMbkJ5YjNacFpHVnlJQzBnUVNCdVpYUjNiM0pySUhCeWIzWnBaR1Z5TGx4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdiM0IwY3k1emFXZHVWSEpoYm5OaFkzUnBiMjRnTFNCbWRXNWpkR2x2YmlCMGFHVWdjMmxuYm5NZ1lXNGdRR1YwYUdWeVpYVnRhbk12ZEhoY2JpQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnZjSFJ6TG1kbGRGQmxjbTFwZEhSbFpFRmpZMjkxYm5SeklDMGdaMlYwSUdGalkyOTFiblJ6SUhSb1lYUWdZVzRnYjNKcFoybHVJR2hoY3lCd1pYSnRhWE56YVc5dWN5Qm1iM0pjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHOXdkSE11YzJsbmJsUnlZVzV6WVdOMGFXOXVJQzBnWlhSb1ZIZ2djMmxuYm1WeUlIUm9ZWFFnY21WMGRYSnVjeUJoSUhKaGQxUjRYRzRnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnVzI5d2RITXVkSGhJYVhOMGIzSjVUR2x0YVhSZElDMGdiblZ0WW1WeUlDcHZjSFJwYjI1aGJDb2dabTl5SUd4cGJXbDBhVzVuSUdodmR5QnRZVzU1SUhSeVlXNXpZV04wYVc5dWN5QmhjbVVnYVc0Z2MzUmhkR1ZjYmlBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCdmNIUnpMbkJ5WldabGNtVnVZMlZ6VTNSdmNtVmNiaUFxTDF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJVY21GdWMyRmpkR2x2YmtOdmJuUnliMnhzWlhJZ1pYaDBaVzVrY3lCRmRtVnVkRVZ0YVhSMFpYSWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaHZjSFJ6S1NCN1hHNGdJQ0FnYzNWd1pYSW9LVHRjYmlBZ0lDQjBhR2x6TG1kbGRFNWxkSGR2Y210SlpDQTlJRzl3ZEhNdVoyVjBUbVYwZDI5eWEwbGtPMXh1SUNBZ0lIUm9hWE11WjJWMFRtVjBkMjl5YTFOMFlYUjFjeUE5SUc5d2RITXVaMlYwVG1WMGQyOXlhMU4wWVhSMWN6dGNiaUFnSUNCMGFHbHpMbDluWlhSRGRYSnlaVzUwUTJoaGFXNUpaQ0E5SUc5d2RITXVaMlYwUTNWeWNtVnVkRU5vWVdsdVNXUTdYRzRnSUNBZ2RHaHBjeTVuWlhSUWNtOTJhV1JsY2tOdmJtWnBaeUE5SUc5d2RITXVaMlYwVUhKdmRtbGtaWEpEYjI1bWFXYzdYRzRnSUNBZ2RHaHBjeTVmWjJWMFEzVnljbVZ1ZEU1bGRIZHZjbXRGU1ZBeE5UVTVRMjl0Y0dGMGFXSnBiR2wwZVNBOVhHNGdJQ0FnSUNCdmNIUnpMbWRsZEVOMWNuSmxiblJPWlhSM2IzSnJSVWxRTVRVMU9VTnZiWEJoZEdsaWFXeHBkSGs3WEc0Z0lDQWdkR2hwY3k1ZloyVjBRM1Z5Y21WdWRFRmpZMjkxYm5SRlNWQXhOVFU1UTI5dGNHRjBhV0pwYkdsMGVTQTlYRzRnSUNBZ0lDQnZjSFJ6TG1kbGRFTjFjbkpsYm5SQlkyTnZkVzUwUlVsUU1UVTFPVU52YlhCaGRHbGlhV3hwZEhrN1hHNGdJQ0FnZEdocGN5NXdjbVZtWlhKbGJtTmxjMU4wYjNKbElEMGdiM0IwY3k1d2NtVm1aWEpsYm1ObGMxTjBiM0psSUh4OElHNWxkeUJQWW5ObGNuWmhZbXhsVTNSdmNtVW9lMzBwTzF4dUlDQWdJSFJvYVhNdWNISnZkbWxrWlhJZ1BTQnZjSFJ6TG5CeWIzWnBaR1Z5TzF4dUlDQWdJSFJvYVhNdVoyVjBVR1Z5YldsMGRHVmtRV05qYjNWdWRITWdQU0J2Y0hSekxtZGxkRkJsY20xcGRIUmxaRUZqWTI5MWJuUnpPMXh1SUNBZ0lIUm9hWE11WW14dlkydFVjbUZqYTJWeUlEMGdiM0IwY3k1aWJHOWphMVJ5WVdOclpYSTdYRzRnSUNBZ2RHaHBjeTV6YVdkdVJYUm9WSGdnUFNCdmNIUnpMbk5wWjI1VWNtRnVjMkZqZEdsdmJqdGNiaUFnSUNCMGFHbHpMbWx1VUhKdlkyVnpjMDltVTJsbmJtbHVaeUE5SUc1bGR5QlRaWFFvS1R0Y2JpQWdJQ0IwYUdsekxsOTBjbUZqYTAxbGRHRk5aWFJ5YVdOelJYWmxiblFnUFNCdmNIUnpMblJ5WVdOclRXVjBZVTFsZEhKcFkzTkZkbVZ1ZER0Y2JpQWdJQ0IwYUdsekxsOW5aWFJRWVhKMGFXTnBjR0YwWlVsdVRXVjBjbWxqY3lBOUlHOXdkSE11WjJWMFVHRnlkR2xqYVhCaGRHVkpiazFsZEhKcFkzTTdYRzRnSUNBZ2RHaHBjeTVmWjJWMFJVbFFNVFUxT1VkaGMwWmxaVVZ6ZEdsdFlYUmxjeUE5SUc5d2RITXVaMlYwUlVsUU1UVTFPVWRoYzBabFpVVnpkR2x0WVhSbGN6dGNiaUFnSUNCMGFHbHpMbU55WldGMFpVVjJaVzUwUm5KaFoyMWxiblFnUFNCdmNIUnpMbU55WldGMFpVVjJaVzUwUm5KaFoyMWxiblE3WEc0Z0lDQWdkR2hwY3k1MWNHUmhkR1ZGZG1WdWRFWnlZV2R0Wlc1MElEMGdiM0IwY3k1MWNHUmhkR1ZGZG1WdWRFWnlZV2R0Wlc1ME8xeHVJQ0FnSUhSb2FYTXVabWx1WVd4cGVtVkZkbVZ1ZEVaeVlXZHRaVzUwSUQwZ2IzQjBjeTVtYVc1aGJHbDZaVVYyWlc1MFJuSmhaMjFsYm5RN1hHNGdJQ0FnZEdocGN5NW5aWFJGZG1WdWRFWnlZV2R0Wlc1MFFubEpaQ0E5SUc5d2RITXVaMlYwUlhabGJuUkdjbUZuYldWdWRFSjVTV1E3WEc0Z0lDQWdkR2hwY3k1blpYUkVaWFpwWTJWTmIyUmxiQ0E5SUc5d2RITXVaMlYwUkdWMmFXTmxUVzlrWld3N1hHNGdJQ0FnZEdocGN5NW5aWFJCWTJOdmRXNTBWSGx3WlNBOUlHOXdkSE11WjJWMFFXTmpiM1Z1ZEZSNWNHVTdYRzRnSUNBZ2RHaHBjeTVuWlhSVWIydGxibE4wWVc1a1lYSmtRVzVrUkdWMFlXbHNjeUE5SUc5d2RITXVaMlYwVkc5clpXNVRkR0Z1WkdGeVpFRnVaRVJsZEdGcGJITTdYRzRnSUNBZ2RHaHBjeTV6WldOMWNtbDBlVkJ5YjNacFpHVnlVbVZ4ZFdWemRDQTlJRzl3ZEhNdWMyVmpkWEpwZEhsUWNtOTJhV1JsY2xKbGNYVmxjM1E3WEc0Z0lDQWdkR2hwY3k1dFpYTnpZV2RwYm1kVGVYTjBaVzBnUFNCdmNIUnpMbTFsYzNObGJtZGxjanRjYmx4dUlDQWdJSFJvYVhNdWJXVnRVM1J2Y21VZ1BTQnVaWGNnVDJKelpYSjJZV0pzWlZOMGIzSmxLSHQ5S1R0Y2JseHVJQ0FnSUhSb2FYTXVjbVZ6WlhSVGRHRjBaU0E5SUNncElEMCtJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzVndaR0YwWlUxbGJYTjBiM0psS0NrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUhSb2FYTXVjWFZsY25rZ1BTQnVaWGNnUlhSb1VYVmxjbmtvZEdocGN5NXdjbTkyYVdSbGNpazdYRzVjYmlBZ0lDQjBhR2x6TG5SNFIyRnpWWFJwYkNBOUlHNWxkeUJVZUVkaGMxVjBhV3dvZEdocGN5NXdjbTkyYVdSbGNpazdYRzRnSUNBZ2RHaHBjeTVmYldGd1RXVjBhRzlrY3lncE8xeHVJQ0FnSUhSb2FYTXVkSGhUZEdGMFpVMWhibUZuWlhJZ1BTQnVaWGNnVkhKaGJuTmhZM1JwYjI1VGRHRjBaVTFoYm1GblpYSW9lMXh1SUNBZ0lDQWdhVzVwZEZOMFlYUmxPaUJ2Y0hSekxtbHVhWFJUZEdGMFpTeGNiaUFnSUNBZ0lIUjRTR2x6ZEc5eWVVeHBiV2wwT2lCdmNIUnpMblI0U0dsemRHOXllVXhwYldsMExGeHVJQ0FnSUNBZ1oyVjBUbVYwZDI5eWEwbGtPaUIwYUdsekxtZGxkRTVsZEhkdmNtdEpaQ3hjYmlBZ0lDQWdJR2RsZEU1bGRIZHZjbXRUZEdGMGRYTTZJSFJvYVhNdVoyVjBUbVYwZDI5eWExTjBZWFIxY3l4Y2JpQWdJQ0FnSUdkbGRFTjFjbkpsYm5SRGFHRnBia2xrT2lCdmNIUnpMbWRsZEVOMWNuSmxiblJEYUdGcGJrbGtMRnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdkR2hwY3k1emRHOXlaU0E5SUhSb2FYTXVkSGhUZEdGMFpVMWhibUZuWlhJdWMzUnZjbVU3WEc0Z0lDQWdkR2hwY3k1dWIyNWpaVlJ5WVdOclpYSWdQU0J1WlhjZ1RtOXVZMlZVY21GamEyVnlLSHRjYmlBZ0lDQWdJSEJ5YjNacFpHVnlPaUIwYUdsekxuQnliM1pwWkdWeUxGeHVJQ0FnSUNBZ1lteHZZMnRVY21GamEyVnlPaUIwYUdsekxtSnNiMk5yVkhKaFkydGxjaXhjYmlBZ0lDQWdJR2RsZEZCbGJtUnBibWRVY21GdWMyRmpkR2x2Ym5NNklDZ3VMaTVoY21kektTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJsYm1ScGJtZFVjbUZ1YzJGamRHbHZibk1nUFNCMGFHbHpMblI0VTNSaGRHVk5ZVzVoWjJWeUxtZGxkRkJsYm1ScGJtZFVjbUZ1YzJGamRHbHZibk1vWEc0Z0lDQWdJQ0FnSUNBZ0xpNHVZWEpuY3l4Y2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pYaDBaWEp1WVd4UVpXNWthVzVuVkhKaGJuTmhZM1JwYjI1eklEMGdiM0IwY3k1blpYUkZlSFJsY201aGJGQmxibVJwYm1kVWNtRnVjMkZqZEdsdmJuTW9YRzRnSUNBZ0lDQWdJQ0FnTGk0dVlYSm5jeXhjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZzdUxpNXdaVzVrYVc1blZISmhibk5oWTNScGIyNXpMQ0F1TGk1bGVIUmxjbTVoYkZCbGJtUnBibWRVY21GdWMyRmpkR2x2Ym5OZE8xeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lHZGxkRU52Ym1acGNtMWxaRlJ5WVc1ellXTjBhVzl1Y3pwY2JpQWdJQ0FnSUNBZ2RHaHBjeTUwZUZOMFlYUmxUV0Z1WVdkbGNpNW5aWFJEYjI1bWFYSnRaV1JVY21GdWMyRmpkR2x2Ym5NdVltbHVaQ2gwYUdsekxuUjRVM1JoZEdWTllXNWhaMlZ5S1N4Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUhSb2FYTXVjR1Z1WkdsdVoxUjRWSEpoWTJ0bGNpQTlJRzVsZHlCUVpXNWthVzVuVkhKaGJuTmhZM1JwYjI1VWNtRmphMlZ5S0h0Y2JpQWdJQ0FnSUhCeWIzWnBaR1Z5T2lCMGFHbHpMbkJ5YjNacFpHVnlMRnh1SUNBZ0lDQWdibTl1WTJWVWNtRmphMlZ5T2lCMGFHbHpMbTV2Ym1ObFZISmhZMnRsY2l4Y2JpQWdJQ0FnSUhCMVlteHBjMmhVY21GdWMyRmpkR2x2YmpvZ0tISmhkMVI0S1NBOVBpQjBhR2x6TG5GMVpYSjVMbk5sYm1SU1lYZFVjbUZ1YzJGamRHbHZiaWh5WVhkVWVDa3NYRzRnSUNBZ0lDQm5aWFJRWlc1a2FXNW5WSEpoYm5OaFkzUnBiMjV6T2lBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJsYm1ScGJtY2dQU0IwYUdsekxuUjRVM1JoZEdWTllXNWhaMlZ5TG1kbGRGQmxibVJwYm1kVWNtRnVjMkZqZEdsdmJuTW9LVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZWEJ3Y205MlpXUWdQU0IwYUdsekxuUjRVM1JoZEdWTllXNWhaMlZ5TG1kbGRFRndjSEp2ZG1Wa1ZISmhibk5oWTNScGIyNXpLQ2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJiTGk0dWNHVnVaR2x1Wnl3Z0xpNHVZWEJ3Y205MlpXUmRPMXh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJR0Z3Y0hKdmRtVlVjbUZ1YzJGamRHbHZiam9nZEdocGN5NWhjSEJ5YjNabFZISmhibk5oWTNScGIyNHVZbWx1WkNoMGFHbHpLU3hjYmlBZ0lDQWdJR2RsZEVOdmJYQnNaWFJsWkZSeVlXNXpZV04wYVc5dWN6cGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGVGTjBZWFJsVFdGdVlXZGxjaTVuWlhSRGIyNW1hWEp0WldSVWNtRnVjMkZqZEdsdmJuTXVZbWx1WkNoMGFHbHpMblI0VTNSaGRHVk5ZVzVoWjJWeUtTeGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lIUm9hWE11ZEhoVGRHRjBaVTFoYm1GblpYSXVjM1J2Y21VdWMzVmljMk55YVdKbEtDZ3BJRDArWEc0Z0lDQWdJQ0IwYUdsekxtVnRhWFFvVFVWVVFVMUJVMHRmUTA5T1ZGSlBURXhGVWw5RlZrVk9WRk11VlZCRVFWUkZYMEpCUkVkRktTeGNiaUFnSUNBcE8xeHVJQ0FnSUhSb2FYTXVYM05sZEhWd1RHbHpkR1Z1WlhKektDazdYRzRnSUNBZ0x5OGdiV1Z0YzNSdmNtVWdhWE1nWTI5dGNIVjBaV1FnWm5KdmJTQmhJR1psZHlCa2FXWm1aWEpsYm5RZ2MzUnZjbVZ6WEc0Z0lDQWdkR2hwY3k1ZmRYQmtZWFJsVFdWdGMzUnZjbVVvS1R0Y2JpQWdJQ0IwYUdsekxuUjRVM1JoZEdWTllXNWhaMlZ5TG5OMGIzSmxMbk4xWW5OamNtbGlaU2dvS1NBOVBpQjBhR2x6TGw5MWNHUmhkR1ZOWlcxemRHOXlaU2dwS1R0Y2JpQWdJQ0J2Y0hSekxtOXVUbVYwZDI5eWExTjBZWFJsUTJoaGJtZGxLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lIUm9hWE11WDI5dVFtOXZkRU5zWldGdVZYQW9LVHRjYmlBZ0lDQWdJSFJvYVhNdVgzVndaR0YwWlUxbGJYTjBiM0psS0NrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNBdkx5QnlaWEYxWlhOMElITjBZWFJsSUhWd1pHRjBaU0IwYnlCbWFXNWhiR2w2WlNCcGJtbDBhV0ZzYVhwaGRHbHZibHh1SUNBZ0lIUm9hWE11WDNWd1pHRjBaVkJsYm1ScGJtZFVlSE5CWm5SbGNrWnBjbk4wUW14dlkyc29LVHRjYmlBZ0lDQjBhR2x6TGw5dmJrSnZiM1JEYkdWaGJsVndLQ2s3WEc1Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhaWFJ6SUhSb1pTQmpkWEp5Wlc1MElHTm9ZV2x1U1dRZ2FXNGdkR2hsSUc1bGRIZHZjbXNnYzNSdmNtVWdZWE1nWVNCdWRXMWlaWElzSUhKbGRIVnlibWx1WnlBd0lHbG1YRzRnSUNBcUlIUm9aU0JqYUdGcGJrbGtJSEJoY25ObGN5QjBieUJPWVU0dVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHR1ZFcxaVpYSjlJRlJvWlNCdWRXMWxjbWxqWVd3Z1kyaGhhVzVKWkM1Y2JpQWdJQ292WEc0Z0lHZGxkRU5vWVdsdVNXUW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2JtVjBkMjl5YTFOMFlYUjFjeUE5SUhSb2FYTXVaMlYwVG1WMGQyOXlhMU4wWVhSMWN5Z3BPMXh1SUNBZ0lHTnZibk4wSUdOb1lXbHVTV1FnUFNCMGFHbHpMbDluWlhSRGRYSnlaVzUwUTJoaGFXNUpaQ2dwTzF4dUlDQWdJR052Ym5OMElHbHVkR1ZuWlhKRGFHRnBia2xrSUQwZ2NHRnljMlZKYm5Rb1kyaGhhVzVKWkN3Z01UWXBPMXh1SUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJRzVsZEhkdmNtdFRkR0YwZFhNZ0lUMDlJRTVsZEhkdmNtdFRkR0YwZFhNdVFYWmhhV3hoWW14bElIeDhYRzRnSUNBZ0lDQk9kVzFpWlhJdWFYTk9ZVTRvYVc1MFpXZGxja05vWVdsdVNXUXBYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z01EdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR2x1ZEdWblpYSkRhR0ZwYmtsa08xeHVJQ0I5WEc1Y2JpQWdZWE41Ym1NZ1oyVjBSVWxRTVRVMU9VTnZiWEJoZEdsaWFXeHBkSGtvWm5KdmJVRmtaSEpsYzNNcElIdGNiaUFnSUNCamIyNXpkQ0JqZFhKeVpXNTBUbVYwZDI5eWEwbHpRMjl0Y0dGMGFXSnNaU0E5WEc0Z0lDQWdJQ0JoZDJGcGRDQjBhR2x6TGw5blpYUkRkWEp5Wlc1MFRtVjBkMjl5YTBWSlVERTFOVGxEYjIxd1lYUnBZbWxzYVhSNUtDazdYRzRnSUNBZ1kyOXVjM1FnWm5KdmJVRmpZMjkxYm5SSmMwTnZiWEJoZEdsaWJHVWdQVnh1SUNBZ0lDQWdZWGRoYVhRZ2RHaHBjeTVmWjJWMFEzVnljbVZ1ZEVGalkyOTFiblJGU1ZBeE5UVTVRMjl0Y0dGMGFXSnBiR2wwZVNobWNtOXRRV1JrY21WemN5azdYRzRnSUNBZ2NtVjBkWEp1SUdOMWNuSmxiblJPWlhSM2IzSnJTWE5EYjIxd1lYUnBZbXhsSUNZbUlHWnliMjFCWTJOdmRXNTBTWE5EYjIxd1lYUnBZbXhsTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlHQkFaWFJvWlhKbGRXMXFjeTkwZUdBZ2RYTmxjeUJnUUdWMGFHVnlaWFZ0YW5NdlkyOXRiVzl1WUNCaGN5QmhJR052Ym1acFozVnlZWFJwYjI0Z2RHOXZiQ0JtYjNKY2JpQWdJQ29nYzNCbFkybG1lV2x1WnlCM2FHbGphQ0JqYUdGcGJpd2dibVYwZDI5eWF5d2dhR0Z5WkdadmNtc2dZVzVrSUVWSlVITWdkRzhnYzNWd2NHOXlkQ0JtYjNKY2JpQWdJQ29nWVNCMGNtRnVjMkZqZEdsdmJpNGdRbmtnY21WbVpYSmxibU5wYm1jZ2RHaHBjeUJqYjI1bWFXZDFjbUYwYVc5dUxDQmhibVFnWVc1aGJIbDZhVzVuSUhSb1pTQm1hV1ZzWkhOY2JpQWdJQ29nYzNCbFkybG1hV1ZrSUdsdUlIUjRVR0Z5WVcxekxDQmdRR1YwYUdWeVpYVnRhbk12ZEhoZ0lHbHpJR0ZpYkdVZ2RHOGdaR1YwWlhKdGFXNWxJSGRvYVdOb0lFVkpVQzB5TnpFNFhHNGdJQ0FxSUhSeVlXNXpZV04wYVc5dUlIUjVjR1VnZEc4Z2RYTmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnWm5KdmJVRmtaSEpsYzNOY2JpQWdJQ29nUUhKbGRIVnlibk1nZTBOdmJXMXZibjBnWTI5dGJXOXVJR052Ym1acFozVnlZWFJwYjI0Z2IySnFaV04wWEc0Z0lDQXFMMXh1SUNCaGMzbHVZeUJuWlhSRGIyMXRiMjVEYjI1bWFXZDFjbUYwYVc5dUtHWnliMjFCWkdSeVpYTnpLU0I3WEc0Z0lDQWdZMjl1YzNRZ2V5QjBlWEJsTENCdWFXTnJibUZ0WlRvZ2JtRnRaU0I5SUQwZ2RHaHBjeTVuWlhSUWNtOTJhV1JsY2tOdmJtWnBaeWdwTzF4dUlDQWdJR052Ym5OMElITjFjSEJ2Y25SelJVbFFNVFUxT1NBOUlHRjNZV2wwSUhSb2FYTXVaMlYwUlVsUU1UVTFPVU52YlhCaGRHbGlhV3hwZEhrb1puSnZiVUZrWkhKbGMzTXBPMXh1WEc0Z0lDQWdMeThnVkdocGN5QnNiMmRwWXlCaVpXeHZkeUIzYVd4c0lHaGhkbVVnZEc4Z1ltVWdkWEJrWVhSbFpDQmxZV05vSUhScGJXVWdZU0JvWVhKa1ptOXlheUJvWVhCd1pXNXpYRzRnSUNBZ0x5OGdkR2hoZENCallYSnlhV1Z6SUhkcGRHZ2dhWFFnWVNCdVpYY2dWSEpoYm5OaFkzUnBiMjRnZEhsd1pTNGdTWFFnYVhNZ2FXNWpiMjV6WlhGMVpXNTBhV0ZzSUdadmNseHVJQ0FnSUM4dklHaGhjbVJtYjNKcmN5QjBhR0YwSUdSdklHNXZkQ0JwYm1Oc2RXUmxJRzVsZHlCMGVYQmxjeTVjYmlBZ0lDQmpiMjV6ZENCb1lYSmtabTl5YXlBOUlITjFjSEJ2Y25SelJVbFFNVFUxT1NBL0lFaGhjbVJtYjNKckxreHZibVJ2YmlBNklFaGhjbVJtYjNKckxrSmxjbXhwYmp0Y2JseHVJQ0FnSUM4dklIUjVjR1VnZDJsc2JDQmlaU0J2Ym1VZ2IyWWdiM1Z5SUdSbFptRjFiSFFnYm1WMGQyOXlheUJ1WVcxbGN5QnZjaUFuY25Cakp5NGdkR2hsSUdSbFptRjFiSFJjYmlBZ0lDQXZMeUJ1WlhSM2IzSnJJRzVoYldWeklHRnlaU0J6ZFdabWFXTnBaVzUwSUdOdmJtWnBaM1Z5WVhScGIyNHNJSE5wYlhCc2VTQndZWE56SUhSb1pTQnVZVzFsSUdGeklIUm9aVnh1SUNBZ0lDOHZJR05vWVdsdUlHRnlaM1Z0Wlc1MElHbHVJSFJvWlNCamIyNXpkSEoxWTNSdmNpNWNiaUFnSUNCcFppQW9kSGx3WlNBaFBUMGdUa1ZVVjA5U1MxOVVXVkJGVXk1U1VFTWdKaVlnZEhsd1pTQWhQVDBnVGtWVVYwOVNTMTlVV1ZCRlV5NVRSVkJQVEVsQktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRU52YlcxdmJpaDdYRzRnSUNBZ0lDQWdJR05vWVdsdU9pQjBlWEJsTEZ4dUlDQWdJQ0FnSUNCb1lYSmtabTl5YXl4Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFWnZjaUFuY25Cakp5QjNaU0J1WldWa0lIUnZJSFZ6WlNCMGFHVWdjMkZ0WlNCaVlYTnBZeUJqYjI1bWFXZDFjbUYwYVc5dUlHRnpJRzFoYVc1dVpYUXNJSE5wYm1ObFhHNGdJQ0FnTHk4Z2QyVWdiMjVzZVNCemRYQndiM0owSUVWV1RTQmpiMjF3WVhScFlteGxJR05vWVdsdWN5d2dZVzVrSUhSb1pXNGdiM1psY25KcFpHVWdkR2hsWEc0Z0lDQWdMeThnYm1GdFpTd2dZMmhoYVc1SlpDQmhibVFnYm1WMGQyOXlhMGxrSUhCeWIzQmxjblJwWlhNdUlGUm9hWE1nYVhNZ1pHOXVaU0IxYzJsdVp5QjBhR1ZjYmlBZ0lDQXZMeUJnWm05eVEzVnpkRzl0UTJoaGFXNWdJSE4wWVhScFl5QnRaWFJvYjJRZ2IyNGdkR2hsSUVOdmJXMXZiaUJqYkdGemN5NWNiaUFnSUNCamIyNXpkQ0JqYUdGcGJrbGtJRDBnY0dGeWMyVkpiblFvZEdocGN5NWZaMlYwUTNWeWNtVnVkRU5vWVdsdVNXUW9LU3dnTVRZcE8xeHVJQ0FnSUdOdmJuTjBJRzVsZEhkdmNtdFRkR0YwZFhNZ1BTQjBhR2x6TG1kbGRFNWxkSGR2Y210VGRHRjBkWE1vS1R0Y2JpQWdJQ0JqYjI1emRDQnVaWFIzYjNKclNXUWdQU0IwYUdsekxtZGxkRTVsZEhkdmNtdEpaQ2dwTzF4dVhHNGdJQ0FnY21WMGRYSnVJRU52YlcxdmJpNWpkWE4wYjIwb2UxeHVJQ0FnSUNBZ2JtRnRaU3hjYmlBZ0lDQWdJR05vWVdsdVNXUXNYRzRnSUNBZ0lDQXZMeUJKZENCcGN5QnBiWEJ5YjJKaFlteGxJR1p2Y2lCaElIUnlZVzV6WVdOMGFXOXVJSFJ2SUdKbElITnBaMjVsWkNCM2FHbHNaU0IwYUdVZ2JtVjBkMjl5YTF4dUlDQWdJQ0FnTHk4Z2FYTWdiRzloWkdsdVp5Qm1iM0lnZEhkdklISmxZWE52Ym5NdVhHNGdJQ0FnSUNBdkx5QXhMaUJRWlc1a2FXNW5MQ0IxYm1OdmJtWnBjbTFsWkNCMGNtRnVjMkZqZEdsdmJuTWdZWEpsSUhkcGNHVmtJRzl1SUc1bGRIZHZjbXNnWTJoaGJtZGxYRzRnSUNBZ0lDQXZMeUF5TGlCVWFHVWdWVWtnYVhNZ2RXNTFjMkZpYkdVZ0tHeHZZV1JwYm1jZ2FXNWthV05oZEc5eUtTQjNhR1Z1SUc1bGRIZHZjbXNnYVhNZ2JHOWhaR2x1Wnk1Y2JpQWdJQ0FnSUM4dklITmxkSFJwYm1jZ2RHaGxJRzVsZEhkdmNtdEpaQ0IwYnlBd0lHbHpJR1p2Y2lCMGVYQmxJSE5oWm1WMGVTQmhibVFnZEc4Z1pYaHdiR2xqYVhSNUlHeGxZV1JjYmlBZ0lDQWdJQzh2SUhSb1pTQjBjbUZ1YzJGamRHbHZiaUIwYnlCbVlXbHNhVzVuSUdsbUlHRWdkWE5sY2lCcGN5QmhZbXhsSUhSdklHZGxkQ0IwYnlCMGFHbHpJR0p5WVc1amFGeHVJQ0FnSUNBZ0x5OGdiMjRnWVNCamRYTjBiMjBnYm1WMGQyOXlheUIwYUdGMElISmxjWFZwY21WeklIWmhiR2xrSUc1bGRIZHZjbXNnYVdRdUlFa2dhR0YyWlNCdWIzUWdjbUZ1WEc0Z0lDQWdJQ0F2THlCcGJuUnZJSFJvYVhNZ2JHbHRhWFJoZEdsdmJpQnZiaUJoYm5rZ2JtVjBkMjl5YXlCSklHaGhkbVVnWVhSMFpXMXdkR1ZrTENCbGRtVnVJSGRvWlc1Y2JpQWdJQ0FnSUM4dklHaGhjbVJqYjJScGJtY2dibVYwZDI5eWEwbGtJSFJ2SUNkc2IyRmthVzVuSnk1Y2JpQWdJQ0FnSUc1bGRIZHZjbXRKWkRwY2JpQWdJQ0FnSUNBZ2JtVjBkMjl5YTFOMFlYUjFjeUE5UFQwZ1RtVjBkMjl5YTFOMFlYUjFjeTVCZG1GcGJHRmliR1VnUHlCd1lYSnpaVWx1ZENodVpYUjNiM0pyU1dRc0lERXdLU0E2SURBc1hHNGdJQ0FnSUNCb1lYSmtabTl5YXl4Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJaR1J6SUdFZ2RIZ2dkRzhnZEdobElIUjRiR2x6ZEZ4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2RIaE5aWFJoWEc0Z0lDQXFJRUJtYVhKbGN5QWtlM1I0VFdWMFlTNXBaSDA2ZFc1aGNIQnliM1psWkZ4dUlDQWdLaTljYmlBZ1lXUmtWSEpoYm5OaFkzUnBiMjRvZEhoTlpYUmhLU0I3WEc0Z0lDQWdkR2hwY3k1MGVGTjBZWFJsVFdGdVlXZGxjaTVoWkdSVWNtRnVjMkZqZEdsdmJpaDBlRTFsZEdFcE8xeHVJQ0FnSUhSb2FYTXVaVzFwZENoZ0pIdDBlRTFsZEdFdWFXUjlPblZ1WVhCd2NtOTJaV1JnTENCMGVFMWxkR0VwTzF4dUlDQWdJSFJvYVhNdVgzUnlZV05yVkhKaGJuTmhZM1JwYjI1TlpYUnlhV056UlhabGJuUW9YRzRnSUNBZ0lDQjBlRTFsZEdFc1hHNGdJQ0FnSUNCVWNtRnVjMkZqZEdsdmJrMWxkR0ZOWlhSeWFXTnpSWFpsYm5RdVlXUmtaV1FzWEc0Z0lDQWdJQ0IwZUUxbGRHRXVZV04wYVc5dVNXUXNYRzRnSUNBZ0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJYYVhCbGN5QjBhR1VnZEhKaGJuTmhZM1JwYjI1eklHWnZjaUJoSUdkcGRtVnVJR0ZqWTI5MWJuUmNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR0ZrWkhKbGMzTWdMU0JvWlhnZ2MzUnlhVzVuSUc5bUlIUm9aU0JtY205dElHRmtaSEpsYzNNZ1ptOXlJSFI0Y3lCaVpXbHVaeUJ5WlcxdmRtVmtYRzRnSUNBcUwxeHVJQ0IzYVhCbFZISmhibk5oWTNScGIyNXpLR0ZrWkhKbGMzTXBJSHRjYmlBZ0lDQjBhR2x6TG5SNFUzUmhkR1ZOWVc1aFoyVnlMbmRwY0dWVWNtRnVjMkZqZEdsdmJuTW9ZV1JrY21WemN5azdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVdSa0lHRWdibVYzSUhWdVlYQndjbTkyWldRZ2RISmhibk5oWTNScGIyNGdkRzhnZEdobElIQnBjR1ZzYVc1bFhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRRY205dGFYTmxQSE4wY21sdVp6NTlJSFJvWlNCb1lYTm9JRzltSUhSb1pTQjBjbUZ1YzJGamRHbHZiaUJoWm5SbGNpQmlaV2x1WnlCemRXSnRhWFIwWldRZ2RHOGdkR2hsSUc1bGRIZHZjbXRjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlIUjRVR0Z5WVcxeklDMGdkSGhRWVhKaGJYTWdabTl5SUhSb1pTQjBjbUZ1YzJGamRHbHZibHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2IzQjBjeUF0SUhkcGRHZ2dkR2hsSUd0bGVTQnZjbWxuYVc0Z2RHOGdjSFYwSUhSb1pTQnZjbWxuYVc0Z2IyNGdkR2hsSUhSNFRXVjBZVnh1SUNBZ0tpOWNiaUFnWVhONWJtTWdibVYzVlc1aGNIQnliM1psWkZSeVlXNXpZV04wYVc5dUtIUjRVR0Z5WVcxekxDQnZjSFJ6SUQwZ2UzMHBJSHRjYmlBZ0lDQnNiMmN1WkdWaWRXY29YRzRnSUNBZ0lDQmdUV1YwWVUxaGMydERiMjUwY205c2JHVnlJRzVsZDFWdVlYQndjbTkyWldSVWNtRnVjMkZqZEdsdmJpQWtlMHBUVDA0dWMzUnlhVzVuYVdaNUtIUjRVR0Z5WVcxektYMWdMRnh1SUNBZ0lDazdYRzVjYmlBZ0lDQmpiMjV6ZENCcGJtbDBhV0ZzVkhoTlpYUmhJRDBnWVhkaGFYUWdkR2hwY3k1aFpHUlZibUZ3Y0hKdmRtVmtWSEpoYm5OaFkzUnBiMjRvWEc0Z0lDQWdJQ0J2Y0hSekxtMWxkR2h2WkN4Y2JpQWdJQ0FnSUhSNFVHRnlZVzF6TEZ4dUlDQWdJQ0FnYjNCMGN5NXZjbWxuYVc0c1hHNGdJQ0FnSUNCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNCdmNIUnpMbWxrTEZ4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0F2THlCc2FYTjBaVzRnWm05eUlIUjRJR052YlhCc1pYUnBiMjRnS0hOMVkyTmxjM01zSUdaaGFXd3BYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmlBZ0lDQWdJSFJvYVhNdWRIaFRkR0YwWlUxaGJtRm5aWEl1YjI1alpTaGNiaUFnSUNBZ0lDQWdZQ1I3YVc1cGRHbGhiRlI0VFdWMFlTNXBaSDA2Wm1sdWFYTm9aV1JnTEZ4dUlDQWdJQ0FnSUNBb1ptbHVhWE5vWldSVWVFMWxkR0VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLR1pwYm1semFHVmtWSGhOWlhSaExuTjBZWFIxY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQlVjbUZ1YzJGamRHbHZibE4wWVhSMWN5NXpkV0p0YVhSMFpXUTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYTnZiSFpsS0dacGJtbHphR1ZrVkhoTlpYUmhMbWhoYzJncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQlVjbUZ1YzJGamRHbHZibE4wWVhSMWN5NXlaV3BsWTNSbFpEcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGFtVmpkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdWaGJrVnljbTl5VTNSaFkyc29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsZEdoRmNuSnZjbk11Y0hKdmRtbGtaWEl1ZFhObGNsSmxhbVZqZEdWa1VtVnhkV1Z6ZENoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMDFsZEdGTllYTnJJRlI0SUZOcFoyNWhkSFZ5WlRvZ1ZYTmxjaUJrWlc1cFpXUWdkSEpoYm5OaFkzUnBiMjRnYzJsbmJtRjBkWEpsTGljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZSeVlXNXpZV04wYVc5dVUzUmhkSFZ6TG1aaGFXeGxaRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxhbVZqZENoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHVmhia1Z5Y205eVUzUmhZMnNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRHaEZjbkp2Y25NdWNuQmpMbWx1ZEdWeWJtRnNLR1pwYm1semFHVmtWSGhOWlhSaExtVnljaTV0WlhOellXZGxLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGFtVmpkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdWaGJrVnljbTl5VTNSaFkyc29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsZEdoRmNuSnZjbk11Y25CakxtbHVkR1Z5Ym1Gc0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JnVFdWMFlVMWhjMnNnVkhnZ1UybG5ibUYwZFhKbE9pQlZibXR1YjNkdUlIQnliMkpzWlcwNklDUjdTbE5QVGk1emRISnBibWRwWm5rb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sdWFYTm9aV1JVZUUxbGRHRXVkSGhRWVhKaGJYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsOVlDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnlaV0YwWlhNZ1lYQndjbTkyWVd4eklHWnZjaUJoYkd3Z2RXNWhjSEJ5YjNabFpDQjBjbUZ1YzJGamRHbHZibk1nYVc0Z2RHaGxJSFI0VTNSaGRHVk5ZVzVoWjJWeUxseHVJQ0FnS2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3VUhKdmJXbHpaVHgyYjJsa1BuMWNiaUFnSUNvdlhHNGdJR0Z6ZVc1aklHbHVhWFJCY0hCeWIzWmhiSE1vS1NCN1hHNGdJQ0FnWTI5dWMzUWdkVzVoY0hCeWIzWmxaRlI0Y3lBOUlIUm9hWE11ZEhoVGRHRjBaVTFoYm1GblpYSXVaMlYwVlc1aGNIQnliM1psWkZSNFRHbHpkQ2dwTzF4dUlDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExtRnNiQ2hjYmlBZ0lDQWdJRTlpYW1WamRDNTJZV3gxWlhNb2RXNWhjSEJ5YjNabFpGUjRjeWt1YldGd0tDaDBlRTFsZEdFcElEMCtYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxjWFZsYzNSQmNIQnliM1poYkNoMGVFMWxkR0VzSUh0Y2JpQWdJQ0FnSUNBZ0lDQnphRzkxYkdSVGFHOTNVbVZ4ZFdWemREb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lIMHBMRnh1SUNBZ0lDQWdLU3hjYmlBZ0lDQXBPMXh1SUNCOVhHNWNiaUFnTHk4Z1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2RIaEpaRnh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdWSEpoYm5OaFkzUnBiMjVOWlhSaGZTQjBhR1VnZEhoTlpYUmhJSGRvYnlCdFlYUmphR1Z6SUhSb1pTQm5hWFpsYmlCcFpDQnBaaUJ1YjI1bElHWnZkVzVrWEc0Z0lDQXFJR1p2Y2lCMGFHVWdibVYwZDI5eWF5QnlaWFIxY201eklIVnVaR1ZtYVc1bFpGeHVJQ0FnS2k5Y2JpQWdYMmRsZEZSeVlXNXpZV04wYVc5dUtIUjRTV1FwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJSFJ5WVc1ellXTjBhVzl1Y3lCOUlEMGdkR2hwY3k1emRHOXlaUzVuWlhSVGRHRjBaU2dwTzF4dUlDQWdJSEpsZEhWeWJpQjBjbUZ1YzJGamRHbHZibk5iZEhoSlpGMDdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJSFI0U1dSY2JpQWdJQ29nUUhKbGRIVnlibk1nZTJKdmIyeGxZVzU5WEc0Z0lDQXFMMXh1SUNCZmFYTlZibUZ3Y0hKdmRtVmtWSEpoYm5OaFkzUnBiMjRvZEhoSlpDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNCMGFHbHpMblI0VTNSaGRHVk5ZVzVoWjJWeUxtZGxkRlJ5WVc1ellXTjBhVzl1S0hSNFNXUXBMbk4wWVhSMWN5QTlQVDFjYmlBZ0lDQWdJRlJ5WVc1ellXTjBhVzl1VTNSaGRIVnpMblZ1WVhCd2NtOTJaV1JjYmlBZ0lDQXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0IwZUVsa1hHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JtYms1aGJXVmNiaUFnSUNvdlhHNGdJRjkwYUhKdmQwVnljbTl5U1daT2IzUlZibUZ3Y0hKdmRtVmtWSGdvZEhoSlpDd2dabTVPWVcxbEtTQjdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxsOXBjMVZ1WVhCd2NtOTJaV1JVY21GdWMyRmpkR2x2YmloMGVFbGtLU2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh1SUNBZ0lDQWdJQ0JnVkhKaGJuTmhZM1JwYjI1elEyOXVkSEp2Ykd4bGNqb2dRMkZ1SUc5dWJIa2dZMkZzYkNBa2UyWnVUbUZ0WlgwZ2IyNGdZVzRnZFc1aGNIQnliM1psWkNCMGNtRnVjMkZqZEdsdmJpNWNiaUFnSUNBZ0lDQWdJRU4xY25KbGJuUWdkSGdnYzNSaGRIVnpPaUFrZTNSb2FYTXVkSGhUZEdGMFpVMWhibUZuWlhJdVoyVjBWSEpoYm5OaFkzUnBiMjRvZEhoSlpDa3VjM1JoZEhWemZXQXNYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJRjkxY0dSaGRHVlVjbUZ1YzJGamRHbHZiaWgwZUVsa0xDQndjbTl3YjNObFpGVndaR0YwWlN3Z2JtOTBaU2tnZTF4dUlDQWdJR052Ym5OMElIUjRUV1YwWVNBOUlIUm9hWE11ZEhoVGRHRjBaVTFoYm1GblpYSXVaMlYwVkhKaGJuTmhZM1JwYjI0b2RIaEpaQ2s3WEc0Z0lDQWdZMjl1YzNRZ2RYQmtZWFJsWkNBOUlHMWxjbWRsS0hSNFRXVjBZU3dnY0hKdmNHOXpaV1JWY0dSaGRHVXBPMXh1SUNBZ0lIUm9hWE11ZEhoVGRHRjBaVTFoYm1GblpYSXVkWEJrWVhSbFZISmhibk5oWTNScGIyNG9kWEJrWVhSbFpDd2dibTkwWlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dkWEJrWVhSbGN5QjBhR1VnY0dGeVlXMXpJSFJvWVhRZ1lYSmxJR1ZrYVhScFlteGxJR2x1SUhSb1pTQnpaVzVrSUdWa2FYUWdabXh2ZDF4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2RIaEpaQ0F0SUhSeVlXNXpZV04wYVc5dUlHbGtYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCd2NtVjJhVzkxYzBkaGMxQmhjbUZ0Y3lBdElHaHZiR1J6SUhSb1pTQndZWEpoYldWMFpYSWdkRzhnZFhCa1lYUmxYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCd2NtVjJhVzkxYzBkaGMxQmhjbUZ0Y3k1dFlYaEdaV1ZRWlhKSFlYTmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhCeVpYWnBiM1Z6UjJGelVHRnlZVzF6TG0xaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGelhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J3Y21WMmFXOTFjMGRoYzFCaGNtRnRjeTVuWVhOTWFXMXBkRnh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdWSEpoYm5OaFkzUnBiMjVOWlhSaGZTQjBhR1VnZEhoTlpYUmhJRzltSUhSb1pTQjFjR1JoZEdWa0lIUnlZVzV6WVdOMGFXOXVYRzRnSUNBcUwxeHVJQ0IxY0dSaGRHVlFjbVYyYVc5MWMwZGhjMUJoY21GdGN5aGNiaUFnSUNCMGVFbGtMRnh1SUNBZ0lIc2diV0Y0Um1WbFVHVnlSMkZ6TENCdFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN5d2daMkZ6VEdsdGFYUWdmU3hjYmlBZ0tTQjdYRzRnSUNBZ1kyOXVjM1FnY0hKbGRtbHZkWE5IWVhOUVlYSmhiWE1nUFNCN1hHNGdJQ0FnSUNCd2NtVjJhVzkxYzBkaGN6b2dlMXh1SUNBZ0lDQWdJQ0J0WVhoR1pXVlFaWEpIWVhNc1hHNGdJQ0FnSUNBZ0lHMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpMRnh1SUNBZ0lDQWdJQ0JuWVhOTWFXMXBkQ3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdmVHRjYmx4dUlDQWdJQzh2SUc5dWJIa2dkWEJrWVhSbElIZG9ZWFFnYVhNZ1pHVm1hVzVsWkZ4dUlDQWdJSEJ5WlhacGIzVnpSMkZ6VUdGeVlXMXpMbkJ5WlhacGIzVnpSMkZ6SUQwZ2NHbGphMEo1S0hCeVpYWnBiM1Z6UjJGelVHRnlZVzF6TG5CeVpYWnBiM1Z6UjJGektUdGNiaUFnSUNCamIyNXpkQ0J1YjNSbElEMGdZRlZ3WkdGMFpTQlFjbVYyYVc5MWN5QkhZWE1nWm05eUlDUjdkSGhKWkgxZ08xeHVJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpWUnlZVzV6WVdOMGFXOXVLSFI0U1dRc0lIQnlaWFpwYjNWelIyRnpVR0Z5WVcxekxDQnViM1JsS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZloyVjBWSEpoYm5OaFkzUnBiMjRvZEhoSlpDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUjRTV1FnTFNCMGNtRnVjMkZqZEdsdmJpQnBaRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ1pXUnBkR0ZpYkdWUVlYSmhiWE1nTFNCb2IyeGtjeUIwYUdVZ1pXbHdNVFUxT1NCbVpXVnpJSEJoY21GdFpYUmxjbk5jYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHVmthWFJoWW14bFVHRnlZVzF6TG1SaGRHRmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdWa2FYUmhZbXhsVUdGeVlXMXpMbVp5YjIxY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR1ZrYVhSaFlteGxVR0Z5WVcxekxuUnZYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCbFpHbDBZV0pzWlZCaGNtRnRjeTUyWVd4MVpWeHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWldScGRHRmliR1ZRWVhKaGJYTXVaMkZ6WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmxaR2wwWVdKc1pWQmhjbUZ0Y3k1bllYTlFjbWxqWlZ4dUlDQWdLaUJBY21WMGRYSnVjeUI3VkhKaGJuTmhZM1JwYjI1TlpYUmhmU0IwYUdVZ2RIaE5aWFJoSUc5bUlIUm9aU0IxY0dSaGRHVmtJSFJ5WVc1ellXTjBhVzl1WEc0Z0lDQXFMMXh1SUNCaGMzbHVZeUIxY0dSaGRHVkZaR2wwWVdKc1pWQmhjbUZ0Y3loMGVFbGtMQ0I3SUdSaGRHRXNJR1p5YjIwc0lIUnZMQ0IyWVd4MVpTd2daMkZ6TENCbllYTlFjbWxqWlNCOUtTQjdYRzRnSUNBZ2RHaHBjeTVmZEdoeWIzZEZjbkp2Y2tsbVRtOTBWVzVoY0hCeWIzWmxaRlI0S0hSNFNXUXNJQ2QxY0dSaGRHVkZaR2wwWVdKc1pWQmhjbUZ0Y3ljcE8xeHVYRzRnSUNBZ1kyOXVjM1FnWldScGRHRmliR1ZRWVhKaGJYTWdQU0I3WEc0Z0lDQWdJQ0IwZUZCaGNtRnRjem9nZTF4dUlDQWdJQ0FnSUNCa1lYUmhMRnh1SUNBZ0lDQWdJQ0JtY205dExGeHVJQ0FnSUNBZ0lDQjBieXhjYmlBZ0lDQWdJQ0FnZG1Gc2RXVXNYRzRnSUNBZ0lDQWdJR2RoY3l4Y2JpQWdJQ0FnSUNBZ1oyRnpVSEpwWTJVc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUgwN1hHNWNiaUFnSUNBdkx5QnZibXg1SUhWd1pHRjBaU0IzYUdGMElHbHpJR1JsWm1sdVpXUmNiaUFnSUNCbFpHbDBZV0pzWlZCaGNtRnRjeTUwZUZCaGNtRnRjeUE5SUhCcFkydENlU2hjYmlBZ0lDQWdJR1ZrYVhSaFlteGxVR0Z5WVcxekxuUjRVR0Z5WVcxekxGeHVJQ0FnSUNBZ0tIQnliM0FwSUQwK0lIQnliM0FnSVQwOUlIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBcE8xeHVYRzRnSUNBZ0x5OGdkWEJrWVhSbElIUnlZVzV6WVdOMGFXOXVJSFI1Y0dVZ2FXNGdZMkZ6WlNCcGRDQm9ZWE1nWTJoaGJtZGxjMXh1SUNBZ0lHTnZibk4wSUhSeVlXNXpZV04wYVc5dVFtVm1iM0psUldScGRDQTlJSFJvYVhNdVgyZGxkRlJ5WVc1ellXTjBhVzl1S0hSNFNXUXBPMXh1SUNBZ0lHTnZibk4wSUhzZ2RIbHdaU0I5SUQwZ1lYZGhhWFFnWkdWMFpYSnRhVzVsVkhKaGJuTmhZM1JwYjI1VWVYQmxLRnh1SUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0F1TGk1MGNtRnVjMkZqZEdsdmJrSmxabTl5WlVWa2FYUXVkSGhRWVhKaGJYTXNYRzRnSUNBZ0lDQWdJQzR1TG1Wa2FYUmhZbXhsVUdGeVlXMXpMblI0VUdGeVlXMXpMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJSFJvYVhNdWNYVmxjbmtzWEc0Z0lDQWdLVHRjYmlBZ0lDQmxaR2wwWVdKc1pWQmhjbUZ0Y3k1MGVYQmxJRDBnZEhsd1pUdGNibHh1SUNBZ0lHTnZibk4wSUc1dmRHVWdQU0JnVlhCa1lYUmxJRVZrYVhSaFlteGxJRkJoY21GdGN5Qm1iM0lnSkh0MGVFbGtmV0E3WEc1Y2JpQWdJQ0IwYUdsekxsOTFjR1JoZEdWVWNtRnVjMkZqZEdsdmJpaDBlRWxrTENCbFpHbDBZV0pzWlZCaGNtRnRjeXdnYm05MFpTazdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmRsZEZSeVlXNXpZV04wYVc5dUtIUjRTV1FwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlIVndaR0YwWlhNZ2RHaGxJR2RoY3lCbVpXVnpJRzltSUhSb1pTQjBjbUZ1YzJGamRHbHZiaUIzYVhSb0lHbGtJR2xtSUhSb1pTQjBjbUZ1YzJGamRHbHZiaUJ6ZEdGMFpTQnBjeUIxYm1Gd2NISnZkbVZrWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCMGVFbGtJQzBnZEhKaGJuTmhZM1JwYjI0Z2FXUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0VWVFZGhjMFpsWlhOOUlIUjRSMkZ6Um1WbGN5QXRJR2h2YkdSeklIUm9aU0JuWVhNZ1ptVmxjeUJ3WVhKaGJXVjBaWEp6WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRVY21GdWMyRmpkR2x2YmsxbGRHRjlJSFJvWlNCMGVFMWxkR0VnYjJZZ2RHaGxJSFZ3WkdGMFpXUWdkSEpoYm5OaFkzUnBiMjVjYmlBZ0lDb3ZYRzRnSUhWd1pHRjBaVlJ5WVc1ellXTjBhVzl1UjJGelJtVmxjeWhjYmlBZ0lDQjBlRWxrTEZ4dUlDQWdJSHRjYmlBZ0lDQWdJR2RoY3l4Y2JpQWdJQ0FnSUdkaGMweHBiV2wwTEZ4dUlDQWdJQ0FnWjJGelVISnBZMlVzWEc0Z0lDQWdJQ0J0WVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3l4Y2JpQWdJQ0FnSUcxaGVFWmxaVkJsY2tkaGN5eGNiaUFnSUNBZ0lHVnpkR2x0WVhSbFZYTmxaQ3hjYmlBZ0lDQWdJR1Z6ZEdsdFlYUmxVM1ZuWjJWemRHVmtMRnh1SUNBZ0lDQWdaR1ZtWVhWc2RFZGhjMFZ6ZEdsdFlYUmxjeXhjYmlBZ0lDQWdJRzl5YVdkcGJtRnNSMkZ6UlhOMGFXMWhkR1VzWEc0Z0lDQWdJQ0IxYzJWeVJXUnBkR1ZrUjJGelRHbHRhWFFzWEc0Z0lDQWdJQ0IxYzJWeVJtVmxUR1YyWld3c1hHNGdJQ0FnZlN4Y2JpQWdLU0I3WEc0Z0lDQWdkR2hwY3k1ZmRHaHliM2RGY25KdmNrbG1UbTkwVlc1aGNIQnliM1psWkZSNEtIUjRTV1FzSUNkMWNHUmhkR1ZVY21GdWMyRmpkR2x2YmtkaGMwWmxaWE1uS1R0Y2JseHVJQ0FnSUd4bGRDQjBlRWRoYzBabFpYTWdQU0I3WEc0Z0lDQWdJQ0IwZUZCaGNtRnRjem9nZTF4dUlDQWdJQ0FnSUNCbllYTXNYRzRnSUNBZ0lDQWdJR2RoYzB4cGJXbDBMRnh1SUNBZ0lDQWdJQ0JuWVhOUWNtbGpaU3hjYmlBZ0lDQWdJQ0FnYldGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhNc1hHNGdJQ0FnSUNBZ0lHMWhlRVpsWlZCbGNrZGhjeXhjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0JsYzNScGJXRjBaVlZ6WldRc1hHNGdJQ0FnSUNCbGMzUnBiV0YwWlZOMVoyZGxjM1JsWkN4Y2JpQWdJQ0FnSUdSbFptRjFiSFJIWVhORmMzUnBiV0YwWlhNc1hHNGdJQ0FnSUNCdmNtbG5hVzVoYkVkaGMwVnpkR2x0WVhSbExGeHVJQ0FnSUNBZ2RYTmxja1ZrYVhSbFpFZGhjMHhwYldsMExGeHVJQ0FnSUNBZ2RYTmxja1psWlV4bGRtVnNMRnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQXZMeUJ2Ym14NUlIVndaR0YwWlNCM2FHRjBJR2x6SUdSbFptbHVaV1JjYmlBZ0lDQjBlRWRoYzBabFpYTXVkSGhRWVhKaGJYTWdQU0J3YVdOclFua29kSGhIWVhOR1pXVnpMblI0VUdGeVlXMXpLVHRjYmlBZ0lDQjBlRWRoYzBabFpYTWdQU0J3YVdOclFua29kSGhIWVhOR1pXVnpLVHRjYmlBZ0lDQmpiMjV6ZENCdWIzUmxJRDBnWUZWd1pHRjBaU0JVY21GdWMyRmpkR2x2YmlCSFlYTWdSbVZsY3lCbWIzSWdKSHQwZUVsa2ZXQTdYRzRnSUNBZ2RHaHBjeTVmZFhCa1lYUmxWSEpoYm5OaFkzUnBiMjRvZEhoSlpDd2dkSGhIWVhOR1pXVnpMQ0J1YjNSbEtUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZaMlYwVkhKaGJuTmhZM1JwYjI0b2RIaEpaQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ2RYQmtZWFJsY3lCMGFHVWdaWE4wYVcxaGRHVWdZbUZ6WlNCbVpXVnpJRzltSUhSb1pTQjBjbUZ1YzJGamRHbHZiaUIzYVhSb0lHbGtJR2xtSUhSb1pTQjBjbUZ1YzJGamRHbHZiaUJ6ZEdGMFpTQnBjeUIxYm1Gd2NISnZkbVZrWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCMGVFbGtJQzBnZEhKaGJuTmhZM1JwYjI0Z2FXUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhSNFJYTjBhVzFoZEdWQ1lYTmxSbVZsY3lBdElHaHZiR1J6SUhSb1pTQmxjM1JwYldGMFpTQmlZWE5sSUdabFpYTWdjR0Z5WVcxbGRHVnljMXh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2RIaEZjM1JwYldGMFpVSmhjMlZHWldWekxtVnpkR2x0WVhSbFpFSmhjMlZHWldWY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSFI0UlhOMGFXMWhkR1ZDWVhObFJtVmxjeTVrWldORmMzUnBiV0YwWldSQ1lYTmxSbVZsWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRVY21GdWMyRmpkR2x2YmsxbGRHRjlJSFJvWlNCMGVFMWxkR0VnYjJZZ2RHaGxJSFZ3WkdGMFpXUWdkSEpoYm5OaFkzUnBiMjVjYmlBZ0lDb3ZYRzRnSUhWd1pHRjBaVlJ5WVc1ellXTjBhVzl1UlhOMGFXMWhkR1ZrUW1GelpVWmxaU2hjYmlBZ0lDQjBlRWxrTEZ4dUlDQWdJSHNnWlhOMGFXMWhkR1ZrUW1GelpVWmxaU3dnWkdWalJYTjBhVzFoZEdWa1FtRnpaVVpsWlNCOUxGeHVJQ0FwSUh0Y2JpQWdJQ0IwYUdsekxsOTBhSEp2ZDBWeWNtOXlTV1pPYjNSVmJtRndjSEp2ZG1Wa1ZIZ29YRzRnSUNBZ0lDQjBlRWxrTEZ4dUlDQWdJQ0FnSjNWd1pHRjBaVlJ5WVc1ellXTjBhVzl1UlhOMGFXMWhkR1ZrUW1GelpVWmxaU2NzWEc0Z0lDQWdLVHRjYmx4dUlDQWdJR3hsZENCMGVFVnpkR2x0WVhSbFFtRnpaVVpsWlhNZ1BTQjdJR1Z6ZEdsdFlYUmxaRUpoYzJWR1pXVXNJR1JsWTBWemRHbHRZWFJsWkVKaGMyVkdaV1VnZlR0Y2JpQWdJQ0F2THlCdmJteDVJSFZ3WkdGMFpTQjNhR0YwSUdseklHUmxabWx1WldSY2JpQWdJQ0IwZUVWemRHbHRZWFJsUW1GelpVWmxaWE1nUFNCd2FXTnJRbmtvZEhoRmMzUnBiV0YwWlVKaGMyVkdaV1Z6S1R0Y2JseHVJQ0FnSUdOdmJuTjBJRzV2ZEdVZ1BTQmdWWEJrWVhSbElGUnlZVzV6WVdOMGFXOXVJRVZ6ZEdsdFlYUmxaQ0JDWVhObElFWmxaWE1nWm05eUlDUjdkSGhKWkgxZ08xeHVJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpWUnlZVzV6WVdOMGFXOXVLSFI0U1dRc0lIUjRSWE4wYVcxaGRHVkNZWE5sUm1WbGN5d2dibTkwWlNrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyZGxkRlJ5WVc1ellXTjBhVzl1S0hSNFNXUXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUhWd1pHRjBaWE1nWVNCemQyRndJR0Z3Y0hKdmRtRnNJSFJ5WVc1ellXTjBhVzl1SUhkcGRHZ2djSEp2ZG1sa1pXUWdiV1YwWVdSaGRHRWdZVzVrSUhOdmRYSmpaU0IwYjJ0bGJpQnplVzFpYjJ4Y2JpQWdJQ29nSUdsbUlIUm9aU0IwY21GdWMyRmpkR2x2YmlCemRHRjBaU0JwY3lCMWJtRndjSEp2ZG1Wa0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkSGhKWkZ4dUlDQWdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdjM2RoY0VGd2NISnZkbUZzVkhKaGJuTmhZM1JwYjI0Z0xTQm9iMnhrY3lCMGFHVWdiV1YwWVdSaGRHRWdZVzVrSUhSdmEyVnVJSE41YldKdmJGeHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYzNkaGNFRndjSEp2ZG1Gc1ZISmhibk5oWTNScGIyNHVkSGx3WlZ4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjM2RoY0VGd2NISnZkbUZzVkhKaGJuTmhZM1JwYjI0dWMyOTFjbU5sVkc5clpXNVRlVzFpYjJ4Y2JpQWdJQ29nUUhKbGRIVnlibk1nZTFSeVlXNXpZV04wYVc5dVRXVjBZWDBnZEdobElIUjRUV1YwWVNCdlppQjBhR1VnZFhCa1lYUmxaQ0IwY21GdWMyRmpkR2x2Ymx4dUlDQWdLaTljYmlBZ2RYQmtZWFJsVTNkaGNFRndjSEp2ZG1Gc1ZISmhibk5oWTNScGIyNG9kSGhKWkN3Z2V5QjBlWEJsTENCemIzVnlZMlZVYjJ0bGJsTjViV0p2YkNCOUtTQjdYRzRnSUNBZ2RHaHBjeTVmZEdoeWIzZEZjbkp2Y2tsbVRtOTBWVzVoY0hCeWIzWmxaRlI0S0hSNFNXUXNJQ2QxY0dSaGRHVlRkMkZ3UVhCd2NtOTJZV3hVY21GdWMyRmpkR2x2YmljcE8xeHVYRzRnSUNBZ2JHVjBJSE4zWVhCQmNIQnliM1poYkZSeVlXNXpZV04wYVc5dUlEMGdleUIwZVhCbExDQnpiM1Z5WTJWVWIydGxibE41YldKdmJDQjlPMXh1SUNBZ0lDOHZJRzl1YkhrZ2RYQmtZWFJsSUhkb1lYUWdhWE1nWkdWbWFXNWxaRnh1SUNBZ0lITjNZWEJCY0hCeWIzWmhiRlJ5WVc1ellXTjBhVzl1SUQwZ2NHbGphMEo1S0hOM1lYQkJjSEJ5YjNaaGJGUnlZVzV6WVdOMGFXOXVLVHRjYmx4dUlDQWdJR052Ym5OMElHNXZkR1VnUFNCZ1ZYQmtZWFJsSUZOM1lYQWdRWEJ3Y205MllXd2dWSEpoYm5OaFkzUnBiMjRnWm05eUlDUjdkSGhKWkgxZ08xeHVJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpWUnlZVzV6WVdOMGFXOXVLSFI0U1dRc0lITjNZWEJCY0hCeWIzWmhiRlJ5WVc1ellXTjBhVzl1TENCdWIzUmxLVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWjJWMFZISmhibk5oWTNScGIyNG9kSGhKWkNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dkWEJrWVhSbGN5QmhJSE4zWVhBZ2RISmhibk5oWTNScGIyNGdkMmwwYUNCd2NtOTJhV1JsWkNCdFpYUmhaR0YwWVNCaGJtUWdjMjkxY21ObElIUnZhMlZ1SUhONWJXSnZiRnh1SUNBZ0tpQWdhV1lnZEdobElIUnlZVzV6WVdOMGFXOXVJSE4wWVhSbElHbHpJSFZ1WVhCd2NtOTJaV1F1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCMGVFbGtYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCemQyRndWSEpoYm5OaFkzUnBiMjRnTFNCb2IyeGtjeUIwYUdVZ2JXVjBZV1JoZEdGY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSE4zWVhCVWNtRnVjMkZqZEdsdmJpNXpiM1Z5WTJWVWIydGxibE41YldKdmJGeHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYzNkaGNGUnlZVzV6WVdOMGFXOXVMbVJsYzNScGJtRjBhVzl1Vkc5clpXNVRlVzFpYjJ4Y2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSE4zWVhCVWNtRnVjMkZqZEdsdmJpNTBlWEJsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnpkMkZ3VkhKaGJuTmhZM1JwYjI0dVpHVnpkR2x1WVhScGIyNVViMnRsYmtSbFkybHRZV3h6WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnpkMkZ3VkhKaGJuTmhZM1JwYjI0dVpHVnpkR2x1WVhScGIyNVViMnRsYmtGa1pISmxjM05jYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlITjNZWEJVY21GdWMyRmpkR2x2Ymk1emQyRndUV1YwWVVSaGRHRmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhOM1lYQlVjbUZ1YzJGamRHbHZiaTV6ZDJGd1ZHOXJaVzVXWVd4MVpWeHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYzNkaGNGUnlZVzV6WVdOMGFXOXVMbVZ6ZEdsdFlYUmxaRUpoYzJWR1pXVmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhOM1lYQlVjbUZ1YzJGamRHbHZiaTVoY0hCeWIzWmhiRlI0U1dSY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFSeVlXNXpZV04wYVc5dVRXVjBZWDBnZEdobElIUjRUV1YwWVNCdlppQjBhR1VnZFhCa1lYUmxaQ0IwY21GdWMyRmpkR2x2Ymx4dUlDQWdLaTljYmlBZ2RYQmtZWFJsVTNkaGNGUnlZVzV6WVdOMGFXOXVLRnh1SUNBZ0lIUjRTV1FzWEc0Z0lDQWdlMXh1SUNBZ0lDQWdjMjkxY21ObFZHOXJaVzVUZVcxaWIyd3NYRzRnSUNBZ0lDQmtaWE4wYVc1aGRHbHZibFJ2YTJWdVUzbHRZbTlzTEZ4dUlDQWdJQ0FnZEhsd1pTeGNiaUFnSUNBZ0lHUmxjM1JwYm1GMGFXOXVWRzlyWlc1RVpXTnBiV0ZzY3l4Y2JpQWdJQ0FnSUdSbGMzUnBibUYwYVc5dVZHOXJaVzVCWkdSeVpYTnpMRnh1SUNBZ0lDQWdjM2RoY0UxbGRHRkVZWFJoTEZ4dUlDQWdJQ0FnYzNkaGNGUnZhMlZ1Vm1Gc2RXVXNYRzRnSUNBZ0lDQmxjM1JwYldGMFpXUkNZWE5sUm1WbExGeHVJQ0FnSUNBZ1lYQndjbTkyWVd4VWVFbGtMRnh1SUNBZ0lIMHNYRzRnSUNrZ2UxeHVJQ0FnSUhSb2FYTXVYM1JvY205M1JYSnliM0pKWms1dmRGVnVZWEJ3Y205MlpXUlVlQ2gwZUVsa0xDQW5kWEJrWVhSbFUzZGhjRlJ5WVc1ellXTjBhVzl1SnlrN1hHNWNiaUFnSUNCc1pYUWdjM2RoY0ZSeVlXNXpZV04wYVc5dUlEMGdlMXh1SUNBZ0lDQWdjMjkxY21ObFZHOXJaVzVUZVcxaWIyd3NYRzRnSUNBZ0lDQmtaWE4wYVc1aGRHbHZibFJ2YTJWdVUzbHRZbTlzTEZ4dUlDQWdJQ0FnZEhsd1pTeGNiaUFnSUNBZ0lHUmxjM1JwYm1GMGFXOXVWRzlyWlc1RVpXTnBiV0ZzY3l4Y2JpQWdJQ0FnSUdSbGMzUnBibUYwYVc5dVZHOXJaVzVCWkdSeVpYTnpMRnh1SUNBZ0lDQWdjM2RoY0UxbGRHRkVZWFJoTEZ4dUlDQWdJQ0FnYzNkaGNGUnZhMlZ1Vm1Gc2RXVXNYRzRnSUNBZ0lDQmxjM1JwYldGMFpXUkNZWE5sUm1WbExGeHVJQ0FnSUNBZ1lYQndjbTkyWVd4VWVFbGtMRnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQXZMeUJ2Ym14NUlIVndaR0YwWlNCM2FHRjBJR2x6SUdSbFptbHVaV1JjYmlBZ0lDQnpkMkZ3VkhKaGJuTmhZM1JwYjI0Z1BTQndhV05yUW5rb2MzZGhjRlJ5WVc1ellXTjBhVzl1S1R0Y2JseHVJQ0FnSUdOdmJuTjBJRzV2ZEdVZ1BTQmdWWEJrWVhSbElGTjNZWEFnVkhKaGJuTmhZM1JwYjI0Z1ptOXlJQ1I3ZEhoSlpIMWdPMXh1SUNBZ0lIUm9hWE11WDNWd1pHRjBaVlJ5WVc1ellXTjBhVzl1S0hSNFNXUXNJSE4zWVhCVWNtRnVjMkZqZEdsdmJpd2dibTkwWlNrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyZGxkRlJ5WVc1ellXTjBhVzl1S0hSNFNXUXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUhWd1pHRjBaWE1nWVNCMGNtRnVjMkZqZEdsdmJpZHpJSFZ6WlhJZ2MyVjBkR2x1WjNNZ2IyNXNlU0JwWmlCMGFHVWdkSEpoYm5OaFkzUnBiMjRnYzNSaGRHVWdhWE1nZFc1aGNIQnliM1psWkZ4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2RIaEpaRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2RYTmxjbE5sZEhScGJtZHpJQzBnYUc5c1pITWdkR2hsSUcxbGRHRmtZWFJoWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQjFjMlZ5VTJWMGRHbHVaM011ZFhObGNrVmthWFJsWkVkaGMweHBiV2wwWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQjFjMlZ5VTJWMGRHbHVaM011ZFhObGNrWmxaVXhsZG1Wc1hHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0VWNtRnVjMkZqZEdsdmJrMWxkR0Y5SUhSb1pTQjBlRTFsZEdFZ2IyWWdkR2hsSUhWd1pHRjBaV1FnZEhKaGJuTmhZM1JwYjI1Y2JpQWdJQ292WEc0Z0lIVndaR0YwWlZSeVlXNXpZV04wYVc5dVZYTmxjbE5sZEhScGJtZHpLSFI0U1dRc0lIc2dkWE5sY2tWa2FYUmxaRWRoYzB4cGJXbDBMQ0IxYzJWeVJtVmxUR1YyWld3Z2ZTa2dlMXh1SUNBZ0lIUm9hWE11WDNSb2NtOTNSWEp5YjNKSlprNXZkRlZ1WVhCd2NtOTJaV1JVZUNoMGVFbGtMQ0FuZFhCa1lYUmxWSEpoYm5OaFkzUnBiMjVWYzJWeVUyVjBkR2x1WjNNbktUdGNibHh1SUNBZ0lHeGxkQ0IxYzJWeVUyVjBkR2x1WjNNZ1BTQjdJSFZ6WlhKRlpHbDBaV1JIWVhOTWFXMXBkQ3dnZFhObGNrWmxaVXhsZG1Wc0lIMDdYRzRnSUNBZ0x5OGdiMjVzZVNCMWNHUmhkR1VnZDJoaGRDQnBjeUJrWldacGJtVmtYRzRnSUNBZ2RYTmxjbE5sZEhScGJtZHpJRDBnY0dsamEwSjVLSFZ6WlhKVFpYUjBhVzVuY3lrN1hHNWNiaUFnSUNCamIyNXpkQ0J1YjNSbElEMGdZRlZ3WkdGMFpTQlZjMlZ5SUZObGRIUnBibWR6SUdadmNpQWtlM1I0U1dSOVlEdGNiaUFnSUNCMGFHbHpMbDkxY0dSaGRHVlVjbUZ1YzJGamRHbHZiaWgwZUVsa0xDQjFjMlZ5VTJWMGRHbHVaM01zSUc1dmRHVXBPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDluWlhSVWNtRnVjMkZqZEdsdmJpaDBlRWxrS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQmhjSEJsYm1RZ2JtVjNJSE5sYm1SR2JHOTNTR2x6ZEc5eWVTQjBieUIwYUdVZ2RISmhibk5oWTNScGIyNGdkMmwwYUNCcFpDQnBaaUIwYUdVZ2RISmhibk5oWTNScGIyNWNiaUFnSUNvZ2MzUmhkR1VnYVhNZ2RXNWhjSEJ5YjNabFpDNGdVbVYwZFhKdWN5QjBhR1VnZFhCa1lYUmxaQ0IwY21GdWMyRmpkR2x2Ymk1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUjRTV1FnTFNCMGNtRnVjMkZqZEdsdmJpQnBaRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1kzVnljbVZ1ZEZObGJtUkdiRzkzU0dsemRHOXllVXhsYm1kMGFDQXRJSE5sYm1SR2JHOTNTR2x6ZEc5eWVTQmxiblJ5YVdWeklHTjFjbkpsYm5Sc2VWeHVJQ0FnS2lCQWNHRnlZVzBnZTBGeWNtRjVQSHNnWlc1MGNuazZJSE4wY21sdVp5d2dkR2x0WlhOMFlXMXdPaUJ1ZFcxaVpYSWdmVDU5SUhObGJtUkdiRzkzU0dsemRHOXllU0F0WEc0Z0lDQXFJQ0JvYVhOMGIzSjVJSFJ2SUdGa1pDQjBieUIwYUdVZ2MyVnVaRVpzYjNkSWFYTjBiM0o1SUhCeWIzQmxjblI1SUc5bUlIUjRUV1YwWVM1Y2JpQWdJQ29nUUhKbGRIVnlibk1nZTFSeVlXNXpZV04wYVc5dVRXVjBZWDBnZEdobElIUjRUV1YwWVNCdlppQjBhR1VnZFhCa1lYUmxaQ0IwY21GdWMyRmpkR2x2Ymx4dUlDQWdLaTljYmlBZ2RYQmtZWFJsVkhKaGJuTmhZM1JwYjI1VFpXNWtSbXh2ZDBocGMzUnZjbmtvWEc0Z0lDQWdkSGhKWkN4Y2JpQWdJQ0JqZFhKeVpXNTBVMlZ1WkVac2IzZElhWE4wYjNKNVRHVnVaM1JvTEZ4dUlDQWdJSE5sYm1SR2JHOTNTR2x6ZEc5eWVTeGNiaUFnS1NCN1hHNGdJQ0FnZEdocGN5NWZkR2h5YjNkRmNuSnZja2xtVG05MFZXNWhjSEJ5YjNabFpGUjRLSFI0U1dRc0lDZDFjR1JoZEdWVWNtRnVjMkZqZEdsdmJsTmxibVJHYkc5M1NHbHpkRzl5ZVNjcE8xeHVJQ0FnSUdOdmJuTjBJSFI0VFdWMFlTQTlJSFJvYVhNdVgyZGxkRlJ5WVc1ellXTjBhVzl1S0hSNFNXUXBPMXh1WEc0Z0lDQWdhV1lnS0Z4dUlDQWdJQ0FnWTNWeWNtVnVkRk5sYm1SR2JHOTNTR2x6ZEc5eWVVeGxibWQwYUNBOVBUMGdLSFI0VFdWMFlUOHVjMlZ1WkVac2IzZElhWE4wYjNKNVB5NXNaVzVuZEdnZ2ZId2dNQ2xjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJQzh2SUc5dWJIa2dkWEJrWVhSbElIZG9ZWFFnYVhNZ1pHVm1hVzVsWkZ4dUlDQWdJQ0FnWTI5dWMzUWdibTkwWlNBOUlHQlZjR1JoZEdVZ2MyVnVaRVpzYjNkSWFYTjBiM0o1SUdadmNpQWtlM1I0U1dSOVlEdGNibHh1SUNBZ0lDQWdkR2hwY3k1MGVGTjBZWFJsVFdGdVlXZGxjaTUxY0dSaGRHVlVjbUZ1YzJGamRHbHZiaWhjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDNHVMblI0VFdWMFlTeGNiaUFnSUNBZ0lDQWdJQ0J6Wlc1a1JteHZkMGhwYzNSdmNuazZJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDNHVMaWgwZUUxbGRHRS9Mbk5sYm1SR2JHOTNTR2x6ZEc5eWVTQS9QeUJiWFNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F1TGk1elpXNWtSbXh2ZDBocGMzUnZjbmtzWEc0Z0lDQWdJQ0FnSUNBZ1hTeGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnYm05MFpTeGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOW5aWFJVY21GdWMyRmpkR2x2YmloMGVFbGtLVHRjYmlBZ2ZWeHVYRzRnSUdGemVXNWpJR0ZrWkZSeVlXNXpZV04wYVc5dVIyRnpSR1ZtWVhWc2RITW9kSGhOWlhSaEtTQjdYRzRnSUNBZ1kyOXVjM1FnWTI5dWRISmhZM1JEYjJSbElEMGdZWGRoYVhRZ1pHVjBaWEp0YVc1bFZISmhibk5oWTNScGIyNURiMjUwY21GamRFTnZaR1VvWEc0Z0lDQWdJQ0IwZUUxbGRHRXVkSGhRWVhKaGJYTXNYRzRnSUNBZ0lDQjBhR2x6TG5GMVpYSjVMRnh1SUNBZ0lDazdYRzVjYmlBZ0lDQnNaWFFnZFhCa1lYUmxWSGhOWlhSaElEMGdkSGhOWlhSaE8xeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQjFjR1JoZEdWVWVFMWxkR0VnUFNCaGQyRnBkQ0IwYUdsekxtRmtaRlI0UjJGelJHVm1ZWFZzZEhNb2RIaE5aWFJoTENCamIyNTBjbUZqZEVOdlpHVXBPMXh1SUNBZ0lIMGdZMkYwWTJnZ0tHVnljbTl5S1NCN1hHNGdJQ0FnSUNCc2IyY3VkMkZ5YmlobGNuSnZjaWs3WEc0Z0lDQWdJQ0IxY0dSaGRHVlVlRTFsZEdFZ1BTQjBhR2x6TG5SNFUzUmhkR1ZOWVc1aFoyVnlMbWRsZEZSeVlXNXpZV04wYVc5dUtIUjRUV1YwWVM1cFpDazdYRzRnSUNBZ0lDQjFjR1JoZEdWVWVFMWxkR0V1Ykc5aFpHbHVaMFJsWm1GMWJIUnpJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQjBhR2x6TG5SNFUzUmhkR1ZOWVc1aFoyVnlMblZ3WkdGMFpWUnlZVzV6WVdOMGFXOXVLRnh1SUNBZ0lDQWdJQ0IwZUUxbGRHRXNYRzRnSUNBZ0lDQWdJQ2RHWVdsc1pXUWdkRzhnWTJGc1kzVnNZWFJsSUdkaGN5QmtaV1poZFd4MGN5NG5MRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSFJvY205M0lHVnljbTl5TzF4dUlDQWdJSDFjYmx4dUlDQWdJSFZ3WkdGMFpWUjRUV1YwWVM1c2IyRmthVzVuUkdWbVlYVnNkSE1nUFNCbVlXeHpaVHRjYmx4dUlDQWdJQzh2SUZSb1pTQm9hWE4wYjNKNUlHNXZkR1VnZFhObFpDQm9aWEpsSUNkQlpHUmxaQ0J1WlhjZ2RXNWhjSEJ5YjNabFpDQjBjbUZ1YzJGamRHbHZiaTRuSUdseklHTnZibVoxYzJsdVp5QjFjR1JoZEdVZ1kyRnNiQ0J2Ym14NUlIVndaR0YwWldRZ2RHaGxJR2RoY3lCa1pXWmhkV3gwY3k1Y2JpQWdJQ0F2THlCWFpTQnVaV1ZrSUhSdklHbHRjSEp2ZG1VZ1lIUm9hWE11WVdSa1ZISmhibk5oWTNScGIyNWdJSFJ2SUdGalkyVndkQ0JvYVhOMGIzSjVJRzV2ZEdVZ1lXNWtJR05vWVc1blpTQnViM1JsSUdobGNtVXVYRzRnSUNBZ2RHaHBjeTUwZUZOMFlYUmxUV0Z1WVdkbGNpNTFjR1JoZEdWVWNtRnVjMkZqZEdsdmJpaGNiaUFnSUNBZ0lIVndaR0YwWlZSNFRXVjBZU3hjYmlBZ0lDQWdJQ2RCWkdSbFpDQnVaWGNnZFc1aGNIQnliM1psWkNCMGNtRnVjMkZqZEdsdmJpNG5MRnh1SUNBZ0lDazdYRzVjYmlBZ0lDQnlaWFIxY200Z2RYQmtZWFJsVkhoTlpYUmhPMXh1SUNCOVhHNWNiaUFnTHk4Z1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQldZV3hwWkdGMFpYTWdZVzVrSUdkbGJtVnlZWFJsY3lCaElIUjRUV1YwWVNCM2FYUm9JR1JsWm1GMWJIUnpJR0Z1WkNCd2RYUnpJR2wwSUdsdUlIUjRVM1JoZEdWTllXNWhaMlZ5WEc0Z0lDQXFJSE4wYjNKbExseHVJQ0FnS2x4dUlDQWdLaUJoWTNScGIyNUpaQ0JwY3lCMWMyVmtJSFJ2SUhWdWFYRjFaV3g1SUdsa1pXNTBhV1o1SUdFZ2NtVnhkV1Z6ZENCMGJ5QmpjbVZoZEdVZ1lTQjBjbUZ1YzJGamRHbHZiaTVjYmlBZ0lDb2dUMjVzZVNBeElIUnlZVzV6WVdOMGFXOXVJSGRwYkd3Z1ltVWdZM0psWVhSbFpDQm1iM0lnYlhWc2RHbHdiR1VnY21WeGRXVnpkSE1nZDJsMGFDQnpZVzFsSUdGamRHbHZia2xrTGx4dUlDQWdLaUJoWTNScGIyNUpaQ0JwY3lCbWFYZ2dkWE5sWkNCbWIzSWdiV0ZyYVc1bklIUm9hWE1nWVdOMGFXOXVJR2xrWlcxd2IzUmxiblFnZEc4Z1pHVmhiQ0IzYVhSb0lITmpaVzVoY21sdklIZG9aVzVjYmlBZ0lDb2dZV04wYVc5dUlHbHpJR2x1ZG05clpXUWdiWFZzZEdsd2JHVWdkR2x0WlhNZ2QybDBhQ0J6WVcxbElIQmhjbUZ0WlhSbGNuTWdhVzRnVFZZeklHUjFaU0IwYnlCelpYSjJhV05sSUhkdmNtdGxjaUJ5WlMxaFkzUnBkbUYwYVc5dUxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdkSGhOWlhSb2IyUlVlWEJsWEc0Z0lDQXFJRUJ3WVhKaGJTQjBlRkJoY21GdGMxeHVJQ0FnS2lCQWNHRnlZVzBnYjNKcFoybHVYRzRnSUNBcUlFQndZWEpoYlNCMGNtRnVjMkZqZEdsdmJsUjVjR1ZjYmlBZ0lDb2dRSEJoY21GdElITmxibVJHYkc5M1NHbHpkRzl5ZVZ4dUlDQWdLaUJBY0dGeVlXMGdZV04wYVc5dVNXUmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UzUjRUV1YwWVgxY2JpQWdJQ292WEc0Z0lHRnplVzVqSUdGa1pGVnVZWEJ3Y205MlpXUlVjbUZ1YzJGamRHbHZiaWhjYmlBZ0lDQjBlRTFsZEdodlpGUjVjR1VzWEc0Z0lDQWdkSGhRWVhKaGJYTXNYRzRnSUNBZ2IzSnBaMmx1TEZ4dUlDQWdJSFJ5WVc1ellXTjBhVzl1Vkhsd1pTeGNiaUFnSUNCelpXNWtSbXh2ZDBocGMzUnZjbmtnUFNCYlhTeGNiaUFnSUNCaFkzUnBiMjVKWkN4Y2JpQWdLU0I3WEc0Z0lDQWdhV1lnS0Z4dUlDQWdJQ0FnZEhKaGJuTmhZM1JwYjI1VWVYQmxJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWmNiaUFnSUNBZ0lDRldRVXhKUkY5VlRrRlFVRkpQVmtWRVgxUlNRVTVUUVVOVVNVOU9YMVJaVUVWVExtbHVZMngxWkdWektIUnlZVzV6WVdOMGFXOXVWSGx3WlNsY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjYmlBZ0lDQWdJQ0FnWUZSeVlXNXpZV04wYVc5dVEyOXVkSEp2Ykd4bGNpQXRJR2x1ZG1Gc2FXUWdkSEpoYm5OaFkzUnBiMjVVZVhCbElIWmhiSFZsT2lBa2UzUnlZVzV6WVdOMGFXOXVWSGx3WlgxZ0xGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QkpaaUJoSUhSeVlXNXpZV04wYVc5dUlHbHpJR1p2ZFc1a0lIZHBkR2dnZEdobElITmhiV1VnWVdOMGFXOXVTV1FzSUdSdklHNXZkQ0JqY21WaGRHVWdZU0J1WlhjZ2MzQmxaV1F0ZFhBZ2RISmhibk5oWTNScGIyNHVYRzRnSUNBZ2FXWWdLR0ZqZEdsdmJrbGtLU0I3WEc0Z0lDQWdJQ0JzWlhRZ1pYaHBjM1JwYm1kVWVFMWxkR0VnUFZ4dUlDQWdJQ0FnSUNCMGFHbHpMblI0VTNSaGRHVk5ZVzVoWjJWeUxtZGxkRlJ5WVc1ellXTjBhVzl1VjJsMGFFRmpkR2x2Ymtsa0tHRmpkR2x2Ymtsa0tUdGNiaUFnSUNBZ0lHbG1JQ2hsZUdsemRHbHVaMVI0VFdWMFlTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnRhWFFvSjI1bGQxVnVZWEJ3Y205MlpXUlVlQ2NzSUdWNGFYTjBhVzVuVkhoTlpYUmhLVHRjYmlBZ0lDQWdJQ0FnWlhocGMzUnBibWRVZUUxbGRHRWdQU0JoZDJGcGRDQjBhR2x6TG1Ga1pGUnlZVzV6WVdOMGFXOXVSMkZ6UkdWbVlYVnNkSE1vWlhocGMzUnBibWRVZUUxbGRHRXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlaWEYxWlhOMFFYQndjbTkyWVd3b1pYaHBjM1JwYm1kVWVFMWxkR0VwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWlhocGMzUnBibWRVZUUxbGRHRTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdkbUZzYVdSaGRHVmNiaUFnSUNCamIyNXpkQ0J1YjNKdFlXeHBlbVZrVkhoUVlYSmhiWE1nUFNCMGVGVjBhV3h6TG01dmNtMWhiR2w2WlZSNFVHRnlZVzF6S0hSNFVHRnlZVzF6S1R0Y2JpQWdJQ0JqYjI1emRDQmxhWEF4TlRVNVEyOXRjR0YwYVdKcGJHbDBlU0E5SUdGM1lXbDBJSFJvYVhNdVoyVjBSVWxRTVRVMU9VTnZiWEJoZEdsaWFXeHBkSGtvS1R0Y2JseHVJQ0FnSUhSNFZYUnBiSE11ZG1Gc2FXUmhkR1ZVZUZCaGNtRnRjeWh1YjNKdFlXeHBlbVZrVkhoUVlYSmhiWE1zSUdWcGNERTFOVGxEYjIxd1lYUnBZbWxzYVhSNUtUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJR0JuWlc1bGNtRjBaVlI0VFdWMFlXQWdZV1JrY3lCMGFHVWdaR1ZtWVhWc2RDQjBlRTFsZEdFZ2NISnZjR1Z5ZEdsbGN5QjBieUIwYUdVZ2NHRnpjMlZrSUc5aWFtVmpkQzVjYmlBZ0lDQWdLaUJVYUdWelpTQnBibU5zZFdSbElIUm9aU0IwZUNkeklHQnBaR0F1SUVGeklIZGxJSFZ6WlNCMGFHVWdhV1FnWm05eUlHUmxkR1Z5YldsdWFXNW5JRzl5WkdWeUlHOW1YRzRnSUNBZ0lDb2dkSGhsY3lCcGJpQjBhR1VnZEhndGMzUmhkR1V0YldGdVlXZGxjaXdnYVhRZ2FYTWdibVZqWlhOellYSjVJSFJ2SUdOaGJHd2dkR2hsSUdGemVXNWphSEp2Ym05MWMxeHVJQ0FnSUNBcUlHMWxkR2h2WkNCZ1pHVjBaWEp0YVc1bFZISmhibk5oWTNScGIyNVVlWEJsWUNCaFpuUmxjaUJnWjJWdVpYSmhkR1ZVZUUxbGRHRmdMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHeGxkQ0IwZUUxbGRHRWdQU0IwYUdsekxuUjRVM1JoZEdWTllXNWhaMlZ5TG1kbGJtVnlZWFJsVkhoTlpYUmhLSHRjYmlBZ0lDQWdJSFI0VUdGeVlXMXpPaUJ1YjNKdFlXeHBlbVZrVkhoUVlYSmhiWE1zWEc0Z0lDQWdJQ0J2Y21sbmFXNHNYRzRnSUNBZ0lDQnpaVzVrUm14dmQwaHBjM1J2Y25rc1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNBdkx5QkJaR1FnWVdOMGFXOXVTV1FnZEc4Z2RIaE5aWFJoSUhSdklHTm9aV05ySUdsbUlITmhiV1VnWVdOMGFXOXVTV1FnYVhNZ2MyVmxiaUJoWjJGcGJseHVJQ0FnSUM4dklFbEdJSEpsY1hWbGMzUWdkRzhnWTNKbFlYUmxJSFJ5WVc1ellXTjBhVzl1SUhkcGRHZ2djMkZ0WlNCaFkzUnBiMjVKWkNCcGN5QnpkV0p0YVhSMFpXUWdZV2RoYVc0c0lHNWxkeUIwY21GdWMyRmpkR2x2YmlCM2FXeHNJRzV2ZENCaVpTQmhaR1JsWkNCbWIzSWdhWFF1WEc0Z0lDQWdhV1lnS0dGamRHbHZia2xrS1NCN1hHNGdJQ0FnSUNCMGVFMWxkR0V1WVdOMGFXOXVTV1FnUFNCaFkzUnBiMjVKWkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2IzSnBaMmx1SUQwOVBTQlBVa2xIU1U1ZlRVVlVRVTFCVTBzcElIdGNiaUFnSUNBZ0lDOHZJRUZ6YzJWeWRDQjBhR1VnWm5KdmJTQmhaR1J5WlhOeklHbHpJSFJvWlNCelpXeGxZM1JsWkNCaFpHUnlaWE56WEc0Z0lDQWdJQ0JwWmlBb2JtOXliV0ZzYVhwbFpGUjRVR0Z5WVcxekxtWnliMjBnSVQwOUlIUm9hWE11WjJWMFUyVnNaV04wWldSQlpHUnlaWE56S0NrcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ1pYUm9SWEp5YjNKekxuSndZeTVwYm5SbGNtNWhiQ2g3WEc0Z0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlRvZ1lFbHVkR1Z5Ym1Gc2JIa2dhVzVwZEdsaGRHVmtJSFJ5WVc1ellXTjBhVzl1SUdseklIVnphVzVuSUdsdWRtRnNhV1FnWVdOamIzVnVkQzVnTEZ4dUlDQWdJQ0FnSUNBZ0lHUmhkR0U2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl5YVdkcGJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUdaeWIyMUJaR1J5WlhOek9pQnViM0p0WVd4cGVtVmtWSGhRWVhKaGJYTXVabkp2YlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sYkdWamRHVmtRV1JrY21WemN6b2dkR2hwY3k1blpYUlRaV3hsWTNSbFpFRmtaSEpsYzNNb0tTeGNiaUFnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnTHk4Z1FYTnpaWEowSUhSb1lYUWdkR2hsSUc5eWFXZHBiaUJvWVhNZ2NHVnliV2x6YzJsdmJuTWdkRzhnYVc1cGRHbGhkR1VnZEhKaGJuTmhZM1JwYjI1eklHWnliMjFjYmlBZ0lDQWdJQzh2SUhSb1pTQnpjR1ZqYVdacFpXUWdZV1JrY21WemMxeHVJQ0FnSUNBZ1kyOXVjM1FnY0dWeWJXbDBkR1ZrUVdSa2NtVnpjMlZ6SUQwZ1lYZGhhWFFnZEdocGN5NW5aWFJRWlhKdGFYUjBaV1JCWTJOdmRXNTBjeWh2Y21sbmFXNHBPMXh1SUNBZ0lDQWdhV1lnS0NGd1pYSnRhWFIwWldSQlpHUnlaWE56WlhNdWFXNWpiSFZrWlhNb2JtOXliV0ZzYVhwbFpGUjRVR0Z5WVcxekxtWnliMjBwS1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUdWMGFFVnljbTl5Y3k1d2NtOTJhV1JsY2k1MWJtRjFkR2h2Y21sNlpXUW9leUJrWVhSaE9pQjdJRzl5YVdkcGJpQjlJSDBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElIc2dkSGx3WlNCOUlEMGdZWGRoYVhRZ1pHVjBaWEp0YVc1bFZISmhibk5oWTNScGIyNVVlWEJsS0Z4dUlDQWdJQ0FnYm05eWJXRnNhWHBsWkZSNFVHRnlZVzF6TEZ4dUlDQWdJQ0FnZEdocGN5NXhkV1Z5ZVN4Y2JpQWdJQ0FwTzF4dUlDQWdJSFI0VFdWMFlTNTBlWEJsSUQwZ2RISmhibk5oWTNScGIyNVVlWEJsSUh4OElIUjVjR1U3WEc1Y2JpQWdJQ0F2THlCbGJuTjFjbVVnZG1Gc2RXVmNiaUFnSUNCMGVFMWxkR0V1ZEhoUVlYSmhiWE11ZG1Gc2RXVWdQU0IwZUUxbGRHRXVkSGhRWVhKaGJYTXVkbUZzZFdWY2JpQWdJQ0FnSUQ4Z1lXUmtTR1Y0VUhKbFptbDRLSFI0VFdWMFlTNTBlRkJoY21GdGN5NTJZV3gxWlNsY2JpQWdJQ0FnSURvZ0p6QjRNQ2M3WEc1Y2JpQWdJQ0JwWmlBb2RIaE5aWFJvYjJSVWVYQmxJQ1ltSUhSb2FYTXVjMlZqZFhKcGRIbFFjbTkyYVdSbGNsSmxjWFZsYzNRcElIdGNiaUFnSUNBZ0lHTnZibk4wSUhObFkzVnlhWFI1VUhKdmRtbGtaWEpTWlhOd2IyNXpaU0E5SUdGM1lXbDBJSFJvYVhNdWMyVmpkWEpwZEhsUWNtOTJhV1JsY2xKbGNYVmxjM1FvWEc0Z0lDQWdJQ0FnSUhSNFRXVjBZU3hjYmlBZ0lDQWdJQ0FnZEhoTlpYUm9iMlJVZVhCbExGeHVJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdkSGhOWlhSaExuTmxZM1Z5YVhSNVVISnZkbWxrWlhKU1pYTndiMjV6WlNBOUlITmxZM1Z5YVhSNVVISnZkbWxrWlhKU1pYTndiMjV6WlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxtRmtaRlJ5WVc1ellXTjBhVzl1S0hSNFRXVjBZU2s3WEc0Z0lDQWdkR2hwY3k1bGJXbDBLQ2R1WlhkVmJtRndjSEp2ZG1Wa1ZIZ25MQ0IwZUUxbGRHRXBPMXh1WEc0Z0lDQWdkSGhOWlhSaElEMGdZWGRoYVhRZ2RHaHBjeTVoWkdSVWNtRnVjMkZqZEdsdmJrZGhjMFJsWm1GMWJIUnpLSFI0VFdWMFlTazdYRzRnSUNBZ2RHaHBjeTVmY21WeGRXVnpkRUZ3Y0hKdmRtRnNLSFI0VFdWMFlTazdYRzVjYmlBZ0lDQnlaWFIxY200Z2RIaE5aWFJoTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmtaSE1nZEdobElIUjRJR2RoY3lCa1pXWmhkV3gwY3pvZ1oyRnpJQ1ltSUdkaGMxQnlhV05sWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCMGVFMWxkR0VnTFNCMGFHVWdkSGhOWlhSaElHOWlhbVZqZEZ4dUlDQWdLaUJBY0dGeVlXMGdaMlYwUTI5a1pWSmxjM0J2Ym5ObFhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0UWNtOXRhWE5sUEc5aWFtVmpkRDU5SUhKbGMyOXNkbVZ6SUhkcGRHZ2dkSGhOWlhSaFhHNGdJQ0FxTDF4dUlDQmhjM2x1WXlCaFpHUlVlRWRoYzBSbFptRjFiSFJ6S0hSNFRXVjBZU3dnWjJWMFEyOWtaVkpsYzNCdmJuTmxLU0I3WEc0Z0lDQWdZMjl1YzNRZ1pXbHdNVFUxT1VOdmJYQmhkR2xpYVd4cGRIa2dQVnh1SUNBZ0lDQWdkSGhOWlhSaExuUjRVR0Z5WVcxekxuUjVjR1VnSVQwOUlGUnlZVzV6WVdOMGFXOXVSVzUyWld4dmNHVlVlWEJsTG14bFoyRmplU0FtSmx4dUlDQWdJQ0FnS0dGM1lXbDBJSFJvYVhNdVoyVjBSVWxRTVRVMU9VTnZiWEJoZEdsaWFXeHBkSGtvS1NrN1hHNGdJQ0FnWTI5dWMzUWdlMXh1SUNBZ0lDQWdaMkZ6VUhKcFkyVTZJR1JsWm1GMWJIUkhZWE5RY21salpTeGNiaUFnSUNBZ0lHMWhlRVpsWlZCbGNrZGhjem9nWkdWbVlYVnNkRTFoZUVabFpWQmxja2RoY3l4Y2JpQWdJQ0FnSUcxaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGek9pQmtaV1poZFd4MFRXRjRVSEpwYjNKcGRIbEdaV1ZRWlhKSFlYTXNYRzRnSUNBZ2ZTQTlJR0YzWVdsMElIUm9hWE11WDJkbGRFUmxabUYxYkhSSFlYTkdaV1Z6S0hSNFRXVjBZU3dnWldsd01UVTFPVU52YlhCaGRHbGlhV3hwZEhrcE8xeHVJQ0FnSUdOdmJuTjBJSHNnWjJGelRHbHRhWFE2SUdSbFptRjFiSFJIWVhOTWFXMXBkQ3dnYzJsdGRXeGhkR2x2YmtaaGFXeHpJSDBnUFZ4dUlDQWdJQ0FnWVhkaGFYUWdkR2hwY3k1ZloyVjBSR1ZtWVhWc2RFZGhjMHhwYldsMEtIUjRUV1YwWVN3Z1oyVjBRMjlrWlZKbGMzQnZibk5sS1R0Y2JseHVJQ0FnSUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCdWJ5MXdZWEpoYlMxeVpXRnpjMmxuYmx4dUlDQWdJSFI0VFdWMFlTQTlJSFJvYVhNdWRIaFRkR0YwWlUxaGJtRm5aWEl1WjJWMFZISmhibk5oWTNScGIyNG9kSGhOWlhSaExtbGtLVHRjYmlBZ0lDQnBaaUFvYzJsdGRXeGhkR2x2YmtaaGFXeHpLU0I3WEc0Z0lDQWdJQ0IwZUUxbGRHRXVjMmx0ZFd4aGRHbHZia1poYVd4eklEMGdjMmx0ZFd4aGRHbHZia1poYVd4ek8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaGxhWEF4TlRVNVEyOXRjR0YwYVdKcGJHbDBlU2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdZV1IyWVc1alpXUkhZWE5HWldWRVpXWmhkV3gwVm1Gc2RXVnpJRDBnZEdocGN5NW5aWFJCWkhaaGJtTmxaRWRoYzBabFpTZ3BPMXh1SUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNCQ2IyOXNaV0Z1S0dGa2RtRnVZMlZrUjJGelJtVmxSR1ZtWVhWc2RGWmhiSFZsY3lrZ0ppWmNiaUFnSUNBZ0lDQWdJVk5YUVZCZlZGSkJUbE5CUTFSSlQwNWZWRmxRUlZNdWFXNWpiSFZrWlhNb2RIaE5aWFJoTG5SNWNHVXBYRzRnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnZEhoTlpYUmhMblZ6WlhKR1pXVk1aWFpsYkNBOUlFTlZVMVJQVFY5SFFWTmZSVk5VU1UxQlZFVTdYRzRnSUNBZ0lDQWdJSFI0VFdWMFlTNTBlRkJoY21GdGN5NXRZWGhHWldWUVpYSkhZWE1nUFNCa1pXTkhWMFZKVkc5SVpYaFhSVWtvWEc0Z0lDQWdJQ0FnSUNBZ1lXUjJZVzVqWldSSFlYTkdaV1ZFWldaaGRXeDBWbUZzZFdWekxtMWhlRUpoYzJWR1pXVXNYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSNFRXVjBZUzUwZUZCaGNtRnRjeTV0WVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3lBOUlHUmxZMGRYUlVsVWIwaGxlRmRGU1NoY2JpQWdJQ0FnSUNBZ0lDQmhaSFpoYm1ObFpFZGhjMFpsWlVSbFptRjFiSFJXWVd4MVpYTXVjSEpwYjNKcGRIbEdaV1VzWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tGeHVJQ0FnSUNBZ0lDQjBlRTFsZEdFdWRIaFFZWEpoYlhNdVoyRnpVSEpwWTJVZ0ppWmNiaUFnSUNBZ0lDQWdJWFI0VFdWMFlTNTBlRkJoY21GdGN5NXRZWGhHWldWUVpYSkhZWE1nSmlaY2JpQWdJQ0FnSUNBZ0lYUjRUV1YwWVM1MGVGQmhjbUZ0Y3k1dFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGMxeHVJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUVsbUlIUm9aU0JrWVhCd0lHaGhjeUJ6ZFdkblpYTjBaV1FnWVNCbllYTWdjSEpwWTJVc0lHSjFkQ0J1YnlCdFlYaEdaV1ZRWlhKSFlYTWdiM0lnYldGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhOY2JpQWdJQ0FnSUNBZ0x5OGdJSFJvWlc0Z2QyVWdjMlYwSUcxaGVFWmxaVkJsY2tkaGN5QmhibVFnYldGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhNZ2RHOGdkR2hsSUhOMVoyZGxjM1JsWkNCbllYTlFjbWxqWlM1Y2JpQWdJQ0FnSUNBZ2RIaE5aWFJoTG5SNFVHRnlZVzF6TG0xaGVFWmxaVkJsY2tkaGN5QTlJSFI0VFdWMFlTNTBlRkJoY21GdGN5NW5ZWE5RY21salpUdGNiaUFnSUNBZ0lDQWdkSGhOWlhSaExuUjRVR0Z5WVcxekxtMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpJRDBnZEhoTlpYUmhMblI0VUdGeVlXMXpMbWRoYzFCeWFXTmxPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIaE5aWFJoTG05eWFXZHBiaUE5UFQwZ1QxSkpSMGxPWDAxRlZFRk5RVk5MS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkSGhOWlhSaExuVnpaWEpHWldWTVpYWmxiQ0E5SUVOVlUxUlBUVjlIUVZOZlJWTlVTVTFCVkVVN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdkSGhOWlhSaExuVnpaWEpHWldWTVpYWmxiQ0E5SUZCeWFXOXlhWFI1VEdWMlpXeHpMbVJCY0hCVGRXZG5aWE4wWldRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNBb1pHVm1ZWFZzZEUxaGVFWmxaVkJsY2tkaGN5QW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZEUxaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGeklDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBaGRIaE5aWFJoTG5SNFVHRnlZVzF6TG0xaGVFWmxaVkJsY2tkaGN5QW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lYUjRUV1YwWVM1MGVGQmhjbUZ0Y3k1dFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN5a2dmSHhjYmlBZ0lDQWdJQ0FnSUNCMGVFMWxkR0V1YjNKcFoybHVJRDA5UFNCUFVrbEhTVTVmVFVWVVFVMUJVMHRjYmlBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkSGhOWlhSaExuVnpaWEpHWldWTVpYWmxiQ0E5SUVkaGMxSmxZMjl0YldWdVpHRjBhVzl1Y3k1dFpXUnBkVzA3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RIaE5aWFJoTG5WelpYSkdaV1ZNWlhabGJDQTlJRkJ5YVc5eWFYUjVUR1YyWld4ekxtUkJjSEJUZFdkblpYTjBaV1E3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvWkdWbVlYVnNkRTFoZUVabFpWQmxja2RoY3lBbUppQWhkSGhOWlhSaExuUjRVR0Z5WVcxekxtMWhlRVpsWlZCbGNrZGhjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRWxtSUhSb1pTQmtZWEJ3SUdoaGN5QnViM1FnYzJWMElIUm9aU0JuWVhOUWNtbGpaU0J2Y2lCMGFHVWdiV0Y0Um1WbFVHVnlSMkZ6TENCMGFHVnVJSGRsSUhObGRDQnRZWGhHWldWUVpYSkhZWE5jYmlBZ0lDQWdJQ0FnSUNBdkx5QjNhWFJvSUhSb1pTQnZibVVnY21WMGRYSnVaV1FnWW5rZ2RHaGxJR2RoYzBabFpVTnZiblJ5YjJ4c1pYSXNJR2xtSUhSb1lYUWdhWE1nWVhaaGFXeGhZbXhsTGx4dUlDQWdJQ0FnSUNBZ0lIUjRUV1YwWVM1MGVGQmhjbUZ0Y3k1dFlYaEdaV1ZRWlhKSFlYTWdQU0JrWldaaGRXeDBUV0Y0Um1WbFVHVnlSMkZ6TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lHUmxabUYxYkhSTllYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN5QW1KbHh1SUNBZ0lDQWdJQ0FnSUNGMGVFMWxkR0V1ZEhoUVlYSmhiWE11YldGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhOY2JpQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdkR2hsSUdSaGNIQWdhR0Z6SUc1dmRDQnpaWFFnZEdobElHZGhjMUJ5YVdObElHOXlJSFJvWlNCdFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN5d2dkR2hsYmlCM1pTQnpaWFFnYldGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhOY2JpQWdJQ0FnSUNBZ0lDQXZMeUIzYVhSb0lIUm9aU0J2Ym1VZ2NtVjBkWEp1WldRZ1lua2dkR2hsSUdkaGMwWmxaVU52Ym5SeWIyeHNaWElzSUdsbUlIUm9ZWFFnYVhNZ1lYWmhhV3hoWW14bExseHVJQ0FnSUNBZ0lDQWdJSFI0VFdWMFlTNTBlRkJoY21GdGN5NXRZWGhRY21sdmNtbDBlVVpsWlZCbGNrZGhjeUE5SUdSbFptRjFiSFJOWVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoa1pXWmhkV3gwUjJGelVISnBZMlVnSmlZZ0lYUjRUV1YwWVM1MGVGQmhjbUZ0Y3k1dFlYaEdaV1ZRWlhKSFlYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QkpaaUIwYUdVZ1pHRndjQ0JvWVhNZ2JtOTBJSE5sZENCMGFHVWdaMkZ6VUhKcFkyVWdiM0lnZEdobElHMWhlRVpsWlZCbGNrZGhjeXdnWVc1a0lHNXZJRzFoZUVabFpWQmxja2RoY3lCcGN5QmhkbUZwYkdGaWJHVmNiaUFnSUNBZ0lDQWdJQ0F2THlCbWNtOXRJSFJvWlNCbllYTkdaV1ZEYjI1MGNtOXNiR1Z5TENCMGFHVnVJSGRsSUhObGRDQnRZWGhHWldWUVpYSkhZWE1nZEc4Z2RHaGxJR1JsWm1GMWJIUkhZWE5RY21salpTd2dZWE56ZFcxcGJtY2dhWFFnYVhOY2JpQWdJQ0FnSUNBZ0lDQXZMeUJoZG1GcGJHRmliR1V1WEc0Z0lDQWdJQ0FnSUNBZ2RIaE5aWFJoTG5SNFVHRnlZVzF6TG0xaGVFWmxaVkJsY2tkaGN5QTlJR1JsWm1GMWJIUkhZWE5RY21salpUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0IwZUUxbGRHRXVkSGhRWVhKaGJYTXViV0Y0Um1WbFVHVnlSMkZ6SUNZbVhHNGdJQ0FnSUNBZ0lDQWdJWFI0VFdWMFlTNTBlRkJoY21GdGN5NXRZWGhRY21sdmNtbDBlVVpsWlZCbGNrZGhjMXh1SUNBZ0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCMGFHVWdaR0Z3Y0NCb1lYTWdibTkwSUhObGRDQjBhR1VnWjJGelVISnBZMlVnYjNJZ2RHaGxJRzFoZUZCeWFXOXlhWFI1Um1WbFVHVnlSMkZ6TENCaGJtUWdibThnYldGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhNZ2FYTmNiaUFnSUNBZ0lDQWdJQ0F2THlCaGRtRnBiR0ZpYkdVZ1puSnZiU0IwYUdVZ1oyRnpSbVZsUTI5dWRISnZiR3hsY2l3Z2RHaGxiaUIzWlNCelpYUWdiV0Y0VUhKcGIzSnBkSGxHWldWUVpYSkhZWE1nZEc5Y2JpQWdJQ0FnSUNBZ0lDQXZMeUIwZUUxbGRHRXVkSGhRWVhKaGJYTXViV0Y0Um1WbFVHVnlSMkZ6TENCM2FHbGphQ0IzYVd4c0lHVnBkR2hsY2lCaVpTQjBhR1VnWjJGelVISnBZMlVnWm5KdmJTQjBhR1VnWTI5dWRISnZiR3hsY2l3Z2RHaGxJRzFoZUVabFpWQmxja2RoYzF4dUlDQWdJQ0FnSUNBZ0lDOHZJSE5sZENCaWVTQjBhR1VnWkdGd2NDd2diM0lnZEdobElHMWhlRVpsWlZCbGNrZGhjeUJtY205dElIUm9aU0JqYjI1MGNtOXNiR1Z5TGx4dUlDQWdJQ0FnSUNBZ0lIUjRUV1YwWVM1MGVGQmhjbUZ0Y3k1dFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN5QTlJSFI0VFdWMFlTNTBlRkJoY21GdGN5NXRZWGhHWldWUVpYSkhZWE03WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdWMlVnY21WdGIzWmxJSFJvWlNCbllYTlFjbWxqWlNCd1lYSmhiU0JsYm5ScGNtVnNlU0IzYUdWdUlHOXVJR0Z1SUdWcGNERTFOVGtnWTI5dGNHRjBhV0pzWlNCdVpYUjNiM0pyWEc1Y2JpQWdJQ0FnSUdSbGJHVjBaU0IwZUUxbGRHRXVkSGhRWVhKaGJYTXVaMkZ6VUhKcFkyVTdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUM4dklGZGxJR1Z1YzNWeVpTQjBhR0YwSUcxaGVFWmxaVkJsY2tkaGN5QmhibVFnYldGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhNZ1lYSmxJRzV2ZENCcGJpQjBhR1VnZEhKaGJuTmhZM1JwYjI0Z2NHRnlZVzF6WEc0Z0lDQWdJQ0F2THlCM2FHVnVJRzV2ZENCdmJpQmhJRVZKVURFMU5Ua2dZMjl0Y0dGMGFXSnNaU0J1WlhSM2IzSnJYRzVjYmlBZ0lDQWdJR1JsYkdWMFpTQjBlRTFsZEdFdWRIaFFZWEpoYlhNdWJXRjRVSEpwYjNKcGRIbEdaV1ZRWlhKSFlYTTdYRzRnSUNBZ0lDQmtaV3hsZEdVZ2RIaE5aWFJoTG5SNFVHRnlZVzF6TG0xaGVFWmxaVkJsY2tkaGN6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QkpaaUIzWlNCb1lYWmxJR2R2ZEhSbGJpQjBieUIwYUdseklIQnZhVzUwTENCaGJtUWdibTl1WlNCdlppQm5ZWE5RY21salpTd2diV0Y0VUhKcGIzSnBkSGxHWldWUVpYSkhZWE1nYjNJZ2JXRjRSbVZsVUdWeVIyRnpJR0Z5WlZ4dUlDQWdJQzh2SUhObGRDQnZiaUIwZUZCaGNtRnRjeXdnYVhRZ2JXVmhibk1nZEdoaGRDQmxhWFJvWlhJZ2QyVWdZWEpsSUc5dUlHRWdibTl1TFVWSlVERTFOVGtnYm1WMGQyOXlheUJoYm1RZ2RHaGxJR1JoY0hBZ1pHbGtiaWQwSUhOMVoyZGxjM1JjYmlBZ0lDQXZMeUJoSUdkaGN5QndjbWxqWlN3Z2IzSWdkMlVnWVhKbElHOXVJR0Z1SUVWSlVERTFOVGtnYm1WMGQyOXlheXdnWVc1a0lHNXZibVVnYjJZZ1oyRnpVSEpwWTJVc0lHMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpJRzl5SUcxaGVFWmxaVkJsY2tkaGMxeHVJQ0FnSUM4dklIZGxjbVVnWVhaaGFXeGhZbXhsSUdaeWIyMGdaV2wwYUdWeUlIUm9aU0JrWVhCd0lHOXlJSFJvWlNCdVpYUjNiM0pyTGx4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUdSbFptRjFiSFJIWVhOUWNtbGpaU0FtSmx4dUlDQWdJQ0FnSVhSNFRXVjBZUzUwZUZCaGNtRnRjeTVuWVhOUWNtbGpaU0FtSmx4dUlDQWdJQ0FnSVhSNFRXVjBZUzUwZUZCaGNtRnRjeTV0WVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3lBbUpseHVJQ0FnSUNBZ0lYUjRUV1YwWVM1MGVGQmhjbUZ0Y3k1dFlYaEdaV1ZRWlhKSFlYTmNiaUFnSUNBcElIdGNiaUFnSUNBZ0lIUjRUV1YwWVM1MGVGQmhjbUZ0Y3k1bllYTlFjbWxqWlNBOUlHUmxabUYxYkhSSFlYTlFjbWxqWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1pHVm1ZWFZzZEVkaGMweHBiV2wwSUNZbUlDRjBlRTFsZEdFdWRIaFFZWEpoYlhNdVoyRnpLU0I3WEc0Z0lDQWdJQ0IwZUUxbGRHRXVkSGhRWVhKaGJYTXVaMkZ6SUQwZ1pHVm1ZWFZzZEVkaGMweHBiV2wwTzF4dUlDQWdJQ0FnZEhoTlpYUmhMbTl5YVdkcGJtRnNSMkZ6UlhOMGFXMWhkR1VnUFNCa1pXWmhkV3gwUjJGelRHbHRhWFE3WEc0Z0lDQWdmVnh1SUNBZ0lIUjRUV1YwWVM1a1pXWmhkV3gwUjJGelJYTjBhVzFoZEdWeklEMGdlMXh1SUNBZ0lDQWdaWE4wYVcxaGRHVlVlWEJsT2lCMGVFMWxkR0V1ZFhObGNrWmxaVXhsZG1Wc0xGeHVJQ0FnSUNBZ1oyRnpPaUIwZUUxbGRHRXVkSGhRWVhKaGJYTXVaMkZ6TEZ4dUlDQWdJQ0FnWjJGelVISnBZMlU2SUhSNFRXVjBZUzUwZUZCaGNtRnRjeTVuWVhOUWNtbGpaU3hjYmlBZ0lDQWdJRzFoZUVabFpWQmxja2RoY3pvZ2RIaE5aWFJoTG5SNFVHRnlZVzF6TG0xaGVFWmxaVkJsY2tkaGN5eGNiaUFnSUNBZ0lHMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpPaUIwZUUxbGRHRXVkSGhRWVhKaGJYTXViV0Y0VUhKcGIzSnBkSGxHWldWUVpYSkhZWE1zWEc0Z0lDQWdmVHRjYmlBZ0lDQnlaWFIxY200Z2RIaE5aWFJoTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFZGxkSE1nWkdWbVlYVnNkQ0JuWVhNZ1ptVmxjeXdnYjNJZ2NtVjBkWEp1Y3lCZ2RXNWtaV1pwYm1Wa1lDQnBaaUJuWVhNZ1ptVmxjeUJoY21VZ1lXeHlaV0ZrZVNCelpYUmNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJSFI0VFdWMFlTQXRJRlJvWlNCMGVFMWxkR0VnYjJKcVpXTjBYRzRnSUNBcUlFQndZWEpoYlNCbGFYQXhOVFU1UTI5dGNHRjBhV0pwYkdsMGVWeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1VISnZiV2x6WlR4emRISnBibWQ4ZFc1a1pXWnBibVZrUG4wZ1ZHaGxJR1JsWm1GMWJIUWdaMkZ6SUhCeWFXTmxYRzRnSUNBcUwxeHVJQ0JoYzNsdVl5QmZaMlYwUkdWbVlYVnNkRWRoYzBabFpYTW9kSGhOWlhSaExDQmxhWEF4TlRVNVEyOXRjR0YwYVdKcGJHbDBlU2tnZTF4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUNnaFpXbHdNVFUxT1VOdmJYQmhkR2xpYVd4cGRIa2dKaVlnZEhoTlpYUmhMblI0VUdGeVlXMXpMbWRoYzFCeWFXTmxLU0I4ZkZ4dUlDQWdJQ0FnS0dWcGNERTFOVGxEYjIxd1lYUnBZbWxzYVhSNUlDWW1YRzRnSUNBZ0lDQWdJSFI0VFdWMFlTNTBlRkJoY21GdGN5NXRZWGhHWldWUVpYSkhZWE1nSmlaY2JpQWdJQ0FnSUNBZ2RIaE5aWFJoTG5SNFVHRnlZVzF6TG0xaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGektWeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUh0OU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCN0lHZGhjMFpsWlVWemRHbHRZWFJsY3l3Z1oyRnpSWE4wYVcxaGRHVlVlWEJsSUgwZ1BWeHVJQ0FnSUNBZ0lDQmhkMkZwZENCMGFHbHpMbDluWlhSRlNWQXhOVFU1UjJGelJtVmxSWE4wYVcxaGRHVnpLQ2s3WEc0Z0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lHVnBjREUxTlRsRGIyMXdZWFJwWW1sc2FYUjVJQ1ltWEc0Z0lDQWdJQ0FnSUdkaGMwVnpkR2x0WVhSbFZIbHdaU0E5UFQwZ1IyRnpSWE4wYVcxaGRHVlVlWEJsY3k1bVpXVk5ZWEpyWlhSY2JpQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNBZ0lDQWdiV1ZrYVhWdE9pQjdJSE4xWjJkbGMzUmxaRTFoZUZCeWFXOXlhWFI1Um1WbFVHVnlSMkZ6TENCemRXZG5aWE4wWldSTllYaEdaV1ZRWlhKSFlYTWdmU0E5SUh0OUxGeHVJQ0FnSUNBZ0lDQjlJRDBnWjJGelJtVmxSWE4wYVcxaGRHVnpPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkV2RuWlhOMFpXUk5ZWGhRY21sdmNtbDBlVVpsWlZCbGNrZGhjeUFtSmlCemRXZG5aWE4wWldSTllYaEdaV1ZRWlhKSFlYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiV0Y0Um1WbFVHVnlSMkZ6T2lCa1pXTkhWMFZKVkc5SVpYaFhSVWtvYzNWbloyVnpkR1ZrVFdGNFJtVmxVR1Z5UjJGektTeGNiaUFnSUNBZ0lDQWdJQ0FnSUcxaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGek9pQmtaV05IVjBWSlZHOUlaWGhYUlVrb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMVoyZGxjM1JsWkUxaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS1N4Y2JpQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dkaGMwVnpkR2x0WVhSbFZIbHdaU0E5UFQwZ1IyRnpSWE4wYVcxaGRHVlVlWEJsY3k1c1pXZGhZM2twSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdWR2hsSUV4RlIwRkRXU0IwZVhCbElHbHVZMngxWkdWeklHeHZkeXdnYldWa2FYVnRJR0Z1WkNCb2FXZG9JR1Z6ZEdsdFlYUmxjeUJ2Wmx4dUlDQWdJQ0FnSUNBdkx5Qm5ZWE1nY0hKcFkyVWdkbUZzZFdWekxseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJR2RoYzFCeWFXTmxPaUJrWldOSFYwVkpWRzlJWlhoWFJVa29aMkZ6Um1WbFJYTjBhVzFoZEdWekxtMWxaR2wxYlNrc1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2RoYzBWemRHbHRZWFJsVkhsd1pTQTlQVDBnUjJGelJYTjBhVzFoZEdWVWVYQmxjeTVsZEdoSFlYTlFjbWxqWlNrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJVYUdVZ1JWUklYMGRCVTFCU1NVTkZJSFI1Y0dVZ2FuVnpkQ0JwYm1Oc2RXUmxjeUJoSUhOcGJtZHNaU0JuWVhNZ2NISnBZMlVnY0hKdmNHVnlkSGtzWEc0Z0lDQWdJQ0FnSUM4dklIZG9hV05vSUhkbElHTmhiaUJoYzNOMWJXVWdkMkZ6SUhKbGRISnBaWFpsWkNCbWNtOXRJR1YwYUY5bllYTlFjbWxqWlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lHZGhjMUJ5YVdObE9pQmtaV05IVjBWSlZHOUlaWGhYUlVrb1oyRnpSbVZsUlhOMGFXMWhkR1Z6TG1kaGMxQnlhV05sS1N4Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0dVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJR2RoYzFCeWFXTmxJRDBnWVhkaGFYUWdkR2hwY3k1eGRXVnllUzVuWVhOUWNtbGpaU2dwTzF4dVhHNGdJQ0FnY21WMGRYSnVJSHNnWjJGelVISnBZMlU2SUdkaGMxQnlhV05sSUNZbUlHRmtaRWhsZUZCeVpXWnBlQ2huWVhOUWNtbGpaUzUwYjFOMGNtbHVaeWd4TmlrcElIMDdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJWMGN5QmtaV1poZFd4MElHZGhjeUJzYVcxcGRDd2diM0lnWkdWaWRXY2dhVzVtYjNKdFlYUnBiMjRnWVdKdmRYUWdkMmg1SUdkaGN5QmxjM1JwYldGMFpTQm1ZV2xzWldRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQjBlRTFsZEdFZ0xTQlVhR1VnZEhoTlpYUmhJRzlpYW1WamRGeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1VISnZiV2x6WlR4dlltcGxZM1ErZlNCUFltcGxZM1FnWTI5dWRHRnBibWx1WnlCMGFHVWdaR1ZtWVhWc2RDQm5ZWE1nYkdsdGFYUXNJRzl5SUhSb1pTQnphVzExYkdGMGFXOXVJR1poYVd4MWNtVWdiMkpxWldOMFhHNGdJQ0FxTDF4dUlDQmhjM2x1WXlCZloyVjBSR1ZtWVhWc2RFZGhjMHhwYldsMEtIUjRUV1YwWVNrZ2UxeHVJQ0FnSUdOdmJuTjBJR05vWVdsdVNXUWdQU0IwYUdsekxsOW5aWFJEZFhKeVpXNTBRMmhoYVc1SlpDZ3BPMXh1SUNBZ0lHTnZibk4wSUdOMWMzUnZiVTVsZEhkdmNtdEhZWE5DZFdabVpYSWdQU0JEU0VGSlRsOUpSRjlVVDE5SFFWTmZURWxOU1ZSZlFsVkdSa1ZTWDAxQlVGdGphR0ZwYmtsa1hUdGNiaUFnSUNCamIyNXpkQ0JqYUdGcGJsUjVjR1VnUFNCblpYUkRhR0ZwYmxSNWNHVW9ZMmhoYVc1SlpDazdYRzVjYmlBZ0lDQnBaaUFvZEhoTlpYUmhMblI0VUdGeVlXMXpMbWRoY3lrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUh0OU8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1hHNGdJQ0FnSUNCMGVFMWxkR0V1ZEhoUVlYSmhiWE11ZEc4Z0ppWmNiaUFnSUNBZ0lIUjRUV1YwWVM1MGVYQmxJRDA5UFNCVWNtRnVjMkZqZEdsdmJsUjVjR1V1YzJsdGNHeGxVMlZ1WkNBbUpseHVJQ0FnSUNBZ1kyaGhhVzVVZVhCbElDRTlQU0FuWTNWemRHOXRKeUFtSmx4dUlDQWdJQ0FnSVhSNFRXVjBZUzUwZUZCaGNtRnRjeTVrWVhSaFhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNBdkx5QlVhR2x6SUdseklHRWdjM1JoYm1SaGNtUWdaWFJvWlhJZ2MybHRjR3hsSUhObGJtUXNJR2RoY3lCeVpYRjFhWEpsYldWdWRDQnBjeUJsZUdGamRHeDVJREl4YTF4dUlDQWdJQ0FnY21WMGRYSnVJSHNnWjJGelRHbHRhWFE2SUVkQlUxOU1TVTFKVkZNdVUwbE5VRXhGSUgwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdleUJpYkc5amEwZGhjMHhwYldsMExDQmxjM1JwYldGMFpXUkhZWE5JWlhnc0lITnBiWFZzWVhScGIyNUdZV2xzY3lCOUlEMWNiaUFnSUNBZ0lHRjNZV2wwSUhSb2FYTXVkSGhIWVhOVmRHbHNMbUZ1WVd4NWVtVkhZWE5WYzJGblpTaDBlRTFsZEdFcE8xeHVYRzRnSUNBZ0x5OGdZV1JrSUdGa1pHbDBhVzl1WVd3Z1oyRnpJR0oxWm1abGNpQjBieUJ2ZFhJZ1pYTjBhVzFoZEdsdmJpQm1iM0lnYzJGbVpYUjVYRzRnSUNBZ1kyOXVjM1FnWjJGelRHbHRhWFFnUFNCMGFHbHpMblI0UjJGelZYUnBiQzVoWkdSSFlYTkNkV1ptWlhJb1hHNGdJQ0FnSUNCaFpHUklaWGhRY21WbWFYZ29aWE4wYVcxaGRHVmtSMkZ6U0dWNEtTeGNiaUFnSUNBZ0lHSnNiMk5yUjJGelRHbHRhWFFzWEc0Z0lDQWdJQ0JqZFhOMGIyMU9aWFIzYjNKclIyRnpRblZtWm1WeUxGeHVJQ0FnSUNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnZXlCbllYTk1hVzFwZEN3Z2MybHRkV3hoZEdsdmJrWmhhV3h6SUgwN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSMmwyWlc0Z1lTQlVjbUZ1YzJGamRHbHZiazFsZEdFZ2IySnFaV04wTENCblpXNWxjbUYwWlNCdVpYY2daMkZ6SUhCaGNtRnRjeUJ6ZFdOb0lIUm9ZWFFnYVdZZ2RHaGxYRzRnSUNBcUlIUnlZVzV6WVdOMGFXOXVJSGRoY3lCaGJpQkZTVkF4TlRVNUlIUnlZVzV6WVdOMGFXOXVMQ0JwZENCdmJteDVJR2hoY3lCRlNWQXhOVFU1SUdkaGN5Qm1hV1ZzWkhNc1hHNGdJQ0FxSUc5MGFHVnlkMmx6WlNCcGRDQnZibXg1SUdoaGN5Qm5ZWE5RY21salpTNGdWMmxzYkNCMWMyVWdkMmhoZEdWMlpYSWdZM1Z6ZEc5dElIWmhiSFZsY3lCaGNtVmNiaUFnSUNvZ2MzQmxZMmxtYVdWa0lHbHVJR04xYzNSdmJVZGhjMU5sZEhScGJtZHpMQ0J2Y2lCbVlXeHNjeUJpWVdOcklIUnZJR2x1WTNKbGJXVnVkR2x1WnlCaWVTQmhJSEJsY21ObGJuUmNiaUFnSUNvZ2QyaHBZMmdnYVhNZ1pHVm1hVzVsWkNCaWVTQnpjR1ZqYVdaNWFXNW5JR0VnYm5WdFpYSmhkRzl5TGlBeE1TQnBjeUJoSURFd0pTQmlkVzF3TENBeE1pQjNiM1ZzWkNCaVpWeHVJQ0FnS2lCaElESXdKU0JpZFcxd0xDQmhibVFnYzI4Z2IyNHVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VkhKaGJuTmhZM1JwYjI1TlpYUmhmU0J2Y21sbmFXNWhiRlI0VFdWMFlTQXRJRTl5YVdkcGJtRnNJSFJ5WVc1ellXTjBhVzl1SUhSdklIVnpaU0JoYzF4dUlDQWdLaUFnWW1GelpWeHVJQ0FnS2lCQWNHRnlZVzBnZTBOMWMzUnZiVWRoYzFObGRIUnBibWR6ZlNCYlkzVnpkRzl0UjJGelUyVjBkR2x1WjNOZElDMGdiM1psY25KcFpHVnpJR1p2Y2lCMGFHVWdaMkZ6WEc0Z0lDQXFJQ0JtYVdWc1pITWdkRzhnZFhObElHbHVjM1JsWVdRZ2IyWWdkR2hsSUcxMWJIUnBjR3hwWlhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJRnRwYm1OeVpXMWxiblJPZFcxbGNtRjBiM0pkSUMwZ1RuVnRaWEpoZEc5eUlHWnliMjBnZDJocFkyZ2dkRzhnWjJWdVpYSmhkR1VnWVZ4dUlDQWdLaUFnY0dWeVkyVnVkR0ZuWlNCaWRXMXdJRzltSUdkaGN5QndjbWxqWlM0Z1JTNW5JREV4SUhkdmRXeGtJR0psSUdFZ01UQWxJR0oxYlhBZ2IzWmxjaUJpWVhObExseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2V5QnVaWGRIWVhOUVlYSmhiWE02SUVOMWMzUnZiVWRoYzFObGRIUnBibWR6TENCd2NtVjJhVzkxYzBkaGMxQmhjbUZ0Y3pvZ1EzVnpkRzl0UjJGelUyVjBkR2x1WjNNZ2ZYMWNiaUFnSUNvdlhHNGdJR2RsYm1WeVlYUmxUbVYzUjJGelVHRnlZVzF6S0Z4dUlDQWdJRzl5YVdkcGJtRnNWSGhOWlhSaExGeHVJQ0FnSUdOMWMzUnZiVWRoYzFObGRIUnBibWR6SUQwZ2UzMHNYRzRnSUNBZ2FXNWpjbVZ0Wlc1MFRuVnRaWEpoZEc5eUlEMGdNVEVzWEc0Z0lDa2dlMXh1SUNBZ0lHTnZibk4wSUhzZ2RIaFFZWEpoYlhNZ2ZTQTlJRzl5YVdkcGJtRnNWSGhOWlhSaE8xeHVJQ0FnSUdOdmJuTjBJSEJ5WlhacGIzVnpSMkZ6VUdGeVlXMXpJRDBnZTMwN1hHNGdJQ0FnWTI5dWMzUWdibVYzUjJGelVHRnlZVzF6SUQwZ2UzMDdYRzRnSUNBZ2FXWWdLR04xYzNSdmJVZGhjMU5sZEhScGJtZHpMbWRoYzB4cGJXbDBLU0I3WEc0Z0lDQWdJQ0J1WlhkSFlYTlFZWEpoYlhNdVoyRnpJRDBnWTNWemRHOXRSMkZ6VTJWMGRHbHVaM00vTG1kaGN5QS9QeUJIUVZOZlRFbE5TVlJUTGxOSlRWQk1SVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWTNWemRHOXRSMkZ6VTJWMGRHbHVaM011WlhOMGFXMWhkR1ZUZFdkblpYTjBaV1FwSUh0Y2JpQWdJQ0FnSUc1bGQwZGhjMUJoY21GdGN5NWxjM1JwYldGMFpWTjFaMmRsYzNSbFpDQTlJR04xYzNSdmJVZGhjMU5sZEhScGJtZHpMbVZ6ZEdsdFlYUmxVM1ZuWjJWemRHVmtPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hqZFhOMGIyMUhZWE5UWlhSMGFXNW5jeTVsYzNScGJXRjBaVlZ6WldRcElIdGNiaUFnSUNBZ0lHNWxkMGRoYzFCaGNtRnRjeTVsYzNScGJXRjBaVlZ6WldRZ1BTQmpkWE4wYjIxSFlYTlRaWFIwYVc1bmN5NWxjM1JwYldGMFpWVnpaV1E3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dselJVbFFNVFUxT1ZSeVlXNXpZV04wYVc5dUtHOXlhV2RwYm1Gc1ZIaE5aWFJoS1NrZ2UxeHVJQ0FnSUNBZ2NISmxkbWx2ZFhOSFlYTlFZWEpoYlhNdWJXRjRSbVZsVUdWeVIyRnpJRDBnZEhoUVlYSmhiWE11YldGNFJtVmxVR1Z5UjJGek8xeHVJQ0FnSUNBZ2NISmxkbWx2ZFhOSFlYTlFZWEpoYlhNdWJXRjRVSEpwYjNKcGRIbEdaV1ZRWlhKSFlYTWdQU0IwZUZCaGNtRnRjeTV0WVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3p0Y2JpQWdJQ0FnSUc1bGQwZGhjMUJoY21GdGN5NXRZWGhHWldWUVpYSkhZWE1nUFZ4dUlDQWdJQ0FnSUNCamRYTjBiMjFIWVhOVFpYUjBhVzVuY3o4dWJXRjRSbVZsVUdWeVIyRnpJSHg4WEc0Z0lDQWdJQ0FnSUdKdVZHOUlaWGdvWEc0Z0lDQWdJQ0FnSUNBZ1FtNU5kV3gwYVhCc2VVSjVSbkpoWTNScGIyNG9YRzRnSUNBZ0lDQWdJQ0FnSUNCb1pYaFViMEp1S0hSNFVHRnlZVzF6TG0xaGVFWmxaVkJsY2tkaGN5a3NYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJtTnlaVzFsYm5ST2RXMWxjbUYwYjNJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F4TUN4Y2JpQWdJQ0FnSUNBZ0lDQXBMRnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnYm1WM1IyRnpVR0Z5WVcxekxtMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpJRDFjYmlBZ0lDQWdJQ0FnWTNWemRHOXRSMkZ6VTJWMGRHbHVaM00vTG0xaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGeklIeDhYRzRnSUNBZ0lDQWdJR0p1Vkc5SVpYZ29YRzRnSUNBZ0lDQWdJQ0FnUW01TmRXeDBhWEJzZVVKNVJuSmhZM1JwYjI0b1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvWlhoVWIwSnVLSFI0VUdGeVlXMXpMbTFoZUZCeWFXOXlhWFI1Um1WbFVHVnlSMkZ6S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1WTNKbGJXVnVkRTUxYldWeVlYUnZjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lERXdMRnh1SUNBZ0lDQWdJQ0FnSUNrc1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhCeVpYWnBiM1Z6UjJGelVHRnlZVzF6TG1kaGMxQnlhV05sSUQwZ2RIaFFZWEpoYlhNdVoyRnpVSEpwWTJVN1hHNGdJQ0FnSUNCdVpYZEhZWE5RWVhKaGJYTXVaMkZ6VUhKcFkyVWdQVnh1SUNBZ0lDQWdJQ0JqZFhOMGIyMUhZWE5UWlhSMGFXNW5jejh1WjJGelVISnBZMlVnZkh4Y2JpQWdJQ0FnSUNBZ1ltNVViMGhsZUNoY2JpQWdJQ0FnSUNBZ0lDQkNiazExYkhScGNHeDVRbmxHY21GamRHbHZiaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGxlRlJ2UW00b2RIaFFZWEpoYlhNdVoyRnpVSEpwWTJVcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1amNtVnRaVzUwVG5WdFpYSmhkRzl5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdNVEFzWEc0Z0lDQWdJQ0FnSUNBZ0tTeGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2V5QndjbVYyYVc5MWMwZGhjMUJoY21GdGN5d2dibVYzUjJGelVHRnlZVzF6SUgwN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRM0psWVhSbGN5QmhJRzVsZHlCaGNIQnliM1psWkNCMGNtRnVjMkZqZEdsdmJpQjBieUJoZEhSbGJYQjBJSFJ2SUdOaGJtTmxiQ0JoSUhCeVpYWnBiM1Z6YkhrZ2MzVmliV2wwZEdWa0lIUnlZVzV6WVdOMGFXOXVMaUJVYUdWY2JpQWdJQ29nYm1WM0lIUnlZVzV6WVdOMGFXOXVJR052Ym5SaGFXNXpJSFJvWlNCellXMWxJRzV2Ym1ObElHRnpJSFJvWlNCd2NtVjJhVzkxY3l3Z2FYTWdZU0JpWVhOcFl5QkZWRWdnZEhKaGJuTm1aWElnYjJZZ01IZ2dkbUZzZFdVZ2RHOWNiaUFnSUNvZ2RHaGxJSE5sYm1SbGNpZHpJR0ZrWkhKbGMzTXNJR0Z1WkNCb1lYTWdZU0JvYVdkb1pYSWdaMkZ6VUhKcFkyVWdkR2hoYmlCMGFHRjBJRzltSUhSb1pTQndjbVYyYVc5MWN5QjBjbUZ1YzJGamRHbHZiaTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUc5eWFXZHBibUZzVkhoSlpDQXRJSFJvWlNCcFpDQnZaaUIwYUdVZ2RIaE5aWFJoSUhSb1lYUWdlVzkxSUhkaGJuUWdkRzhnWVhSMFpXMXdkQ0IwYnlCallXNWpaV3hjYmlBZ0lDb2dRSEJoY21GdElIdERkWE4wYjIxSFlYTlRaWFIwYVc1bmMzMGdXMk4xYzNSdmJVZGhjMU5sZEhScGJtZHpYU0F0SUc5MlpYSnlhV1JsY3lCMGJ5QjFjMlVnWm05eUlHZGhjMXh1SUNBZ0tpQWdjR0Z5WVcxeklHbHVjM1JsWVdRZ2IyWWdZV3hzYjNkcGJtY2dkR2hwY3lCdFpYUm9iMlFnZEc4Z1oyVnVaWEpoZEdVZ2RHaGxiVnh1SUNBZ0tpQkFjR0Z5WVcwZ2IzQjBhVzl1YzF4dUlDQWdLaUJBY0dGeVlXMGdiM0IwYVc5dWN5NWxjM1JwYldGMFpXUkNZWE5sUm1WbFhHNGdJQ0FxSUVCd1lYSmhiU0J2Y0hScGIyNXpMbUZqZEdsdmJrbGtYRzRnSUNBcUlFQnlaWFIxY201eklIdDBlRTFsZEdGOVhHNGdJQ0FxTDF4dUlDQmhjM2x1WXlCamNtVmhkR1ZEWVc1alpXeFVjbUZ1YzJGamRHbHZiaWhjYmlBZ0lDQnZjbWxuYVc1aGJGUjRTV1FzWEc0Z0lDQWdZM1Z6ZEc5dFIyRnpVMlYwZEdsdVozTXNYRzRnSUNBZ2V5QmxjM1JwYldGMFpXUkNZWE5sUm1WbExDQmhZM1JwYjI1SlpDQjlJRDBnZTMwc1hHNGdJQ2tnZTF4dUlDQWdJQzh2SUVsbUlIUnlZVzV6WVdOMGFXOXVJR2x6SUdadmRXNWtJR1p2Y2lCellXMWxJR0ZqZEdsdmJpQnBaQ3dnWkc4Z2JtOTBJR055WldGMFpTQmhJRzVsZHlCallXNWpaV3dnZEhKaGJuTmhZM1JwYjI0dVhHNGdJQ0FnYVdZZ0tHRmpkR2x2Ymtsa0tTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCbGVHbHpkR2x1WjFSNFRXVjBZU0E5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkSGhUZEdGMFpVMWhibUZuWlhJdVoyVjBWSEpoYm5OaFkzUnBiMjVYYVhSb1FXTjBhVzl1U1dRb1lXTjBhVzl1U1dRcE8xeHVJQ0FnSUNBZ2FXWWdLR1Y0YVhOMGFXNW5WSGhOWlhSaEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmxlR2x6ZEdsdVoxUjRUV1YwWVR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQnZjbWxuYVc1aGJGUjRUV1YwWVNBOUlIUm9hWE11ZEhoVGRHRjBaVTFoYm1GblpYSXVaMlYwVkhKaGJuTmhZM1JwYjI0b2IzSnBaMmx1WVd4VWVFbGtLVHRjYmlBZ0lDQmpiMjV6ZENCN0lIUjRVR0Z5WVcxeklIMGdQU0J2Y21sbmFXNWhiRlI0VFdWMFlUdGNiaUFnSUNCamIyNXpkQ0I3SUdaeWIyMHNJRzV2Ym1ObElIMGdQU0IwZUZCaGNtRnRjenRjYmx4dUlDQWdJR052Ym5OMElIc2djSEpsZG1sdmRYTkhZWE5RWVhKaGJYTXNJRzVsZDBkaGMxQmhjbUZ0Y3lCOUlEMGdkR2hwY3k1blpXNWxjbUYwWlU1bGQwZGhjMUJoY21GdGN5aGNiaUFnSUNBZ0lHOXlhV2RwYm1Gc1ZIaE5aWFJoTEZ4dUlDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBdUxpNWpkWE4wYjIxSFlYTlRaWFIwYVc1bmN5eGNiaUFnSUNBZ0lDQWdMeThnVjJVZ2QyRnVkQ0IwYnlCdmRtVnljbWxrWlNCMGFHVWdjSEpsZG1sdmRYTWdkSEpoYm5OaFkzUnBiMjV6SUdkaGMweHBiV2wwSUdKbFkyRjFjMlVnYVhSY2JpQWdJQ0FnSUNBZ0x5OGdkMmxzYkNCdWIzY2dZbVVnWVNCemFXMXdiR1VnYzJWdVpDQnBibk4wWldGa0lHOW1JSGRvWVhSbGRtVnlJR2wwSUhkaGN5QmlaV1p2Y21VZ2MzVmphRnh1SUNBZ0lDQWdJQ0F2THlCaGN5QmhJSFJ2YTJWdUlIUnlZVzV6Wm1WeUlHOXlJR052Ym5SeVlXTjBJR05oYkd3dVhHNGdJQ0FnSUNBZ0lHZGhjMHhwYldsME9pQmpkWE4wYjIxSFlYTlRaWFIwYVc1bmN5NW5ZWE5NYVcxcGRDQjhmQ0JIUVZOZlRFbE5TVlJUTGxOSlRWQk1SU3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdLVHRjYmx4dUlDQWdJR052Ym5OMElHNWxkMVI0VFdWMFlTQTlJSFJvYVhNdWRIaFRkR0YwWlUxaGJtRm5aWEl1WjJWdVpYSmhkR1ZVZUUxbGRHRW9lMXh1SUNBZ0lDQWdkSGhRWVhKaGJYTTZJSHRjYmlBZ0lDQWdJQ0FnWm5KdmJTeGNiaUFnSUNBZ0lDQWdkRzg2SUdaeWIyMHNYRzRnSUNBZ0lDQWdJRzV2Ym1ObExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0p6QjRNQ2NzWEc0Z0lDQWdJQ0FnSUM0dUxtNWxkMGRoYzFCaGNtRnRjeXhjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0J3Y21WMmFXOTFjMGRoYzFCaGNtRnRjeXhjYmlBZ0lDQWdJR3h2WVdScGJtZEVaV1poZFd4MGN6b2dabUZzYzJVc1hHNGdJQ0FnSUNCemRHRjBkWE02SUZSeVlXNXpZV04wYVc5dVUzUmhkSFZ6TG1Gd2NISnZkbVZrTEZ4dUlDQWdJQ0FnZEhsd1pUb2dWSEpoYm5OaFkzUnBiMjVVZVhCbExtTmhibU5sYkN4Y2JpQWdJQ0FnSUdGamRHbHZia2xrTEZ4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnYVdZZ0tHVnpkR2x0WVhSbFpFSmhjMlZHWldVcElIdGNiaUFnSUNBZ0lHNWxkMVI0VFdWMFlTNWxjM1JwYldGMFpXUkNZWE5sUm1WbElEMGdaWE4wYVcxaGRHVmtRbUZ6WlVabFpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbUZrWkZSeVlXNXpZV04wYVc5dUtHNWxkMVI0VFdWMFlTazdYRzRnSUNBZ1lYZGhhWFFnZEdocGN5NWhjSEJ5YjNabFZISmhibk5oWTNScGIyNG9ibVYzVkhoTlpYUmhMbWxrTENCaFkzUnBiMjVKWkN3Z2UxeHVJQ0FnSUNBZ2FHRnpRWEJ3Y205MllXeFNaWEYxWlhOME9pQm1ZV3h6WlN4Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzVkhoTlpYUmhPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOeVpXRjBaWE1nWVNCdVpYY2dZWEJ3Y205MlpXUWdkSEpoYm5OaFkzUnBiMjRnZEc4Z1lYUjBaVzF3ZENCMGJ5QnpjR1ZsWkNCMWNDQmhJSEJ5WlhacGIzVnpiSGtnYzNWaWJXbDBkR1ZrSUhSeVlXNXpZV04wYVc5dUxpQlVhR1ZjYmlBZ0lDb2dibVYzSUhSeVlXNXpZV04wYVc5dUlHTnZiblJoYVc1eklIUm9aU0J6WVcxbElHNXZibU5sSUdGeklIUm9aU0J3Y21WMmFXOTFjeTRnUW5rZ1pHVm1ZWFZzZEN3Z2RHaGxJRzVsZHlCMGNtRnVjMkZqZEdsdmJpQjNhV3hzSUhWelpWeHVJQ0FnS2lCMGFHVWdjMkZ0WlNCbllYTWdiR2x0YVhRZ1lXNWtJR0VnTVRBbElHaHBaMmhsY2lCbllYTWdjSEpwWTJVc0lIUm9iM1ZuYUNCcGRDQnBjeUJ3YjNOemFXSnNaU0IwYnlCelpYUWdZU0JqZFhOMGIyMGdkbUZzZFdVZ1ptOXlYRzRnSUNBcUlHVmhZMmdnYVc1emRHVmhaQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUc5eWFXZHBibUZzVkhoSlpDQXRJSFJvWlNCcFpDQnZaaUIwYUdVZ2RIaE5aWFJoSUhSb1lYUWdlVzkxSUhkaGJuUWdkRzhnYzNCbFpXUWdkWEJjYmlBZ0lDb2dRSEJoY21GdElIdERkWE4wYjIxSFlYTlRaWFIwYVc1bmMzMGdXMk4xYzNSdmJVZGhjMU5sZEhScGJtZHpYU0F0SUc5MlpYSnlhV1JsY3lCMGJ5QjFjMlVnWm05eUlHZGhjMXh1SUNBZ0tpQWdjR0Z5WVcxeklHbHVjM1JsWVdRZ2IyWWdZV3hzYjNkcGJtY2dkR2hwY3lCdFpYUm9iMlFnZEc4Z1oyVnVaWEpoZEdVZ2RHaGxiVnh1SUNBZ0tpQkFjR0Z5WVcwZ2IzQjBhVzl1YzF4dUlDQWdLaUJBY0dGeVlXMGdiM0IwYVc5dWN5NWxjM1JwYldGMFpXUkNZWE5sUm1WbFhHNGdJQ0FxSUVCd1lYSmhiU0J2Y0hScGIyNXpMbUZqZEdsdmJrbGtYRzRnSUNBcUlFQnlaWFIxY201eklIdDBlRTFsZEdGOVhHNGdJQ0FxTDF4dUlDQmhjM2x1WXlCamNtVmhkR1ZUY0dWbFpGVndWSEpoYm5OaFkzUnBiMjRvWEc0Z0lDQWdiM0pwWjJsdVlXeFVlRWxrTEZ4dUlDQWdJR04xYzNSdmJVZGhjMU5sZEhScGJtZHpMRnh1SUNBZ0lIc2daWE4wYVcxaGRHVmtRbUZ6WlVabFpTd2dZV04wYVc5dVNXUWdmU0E5SUh0OUxGeHVJQ0FwSUh0Y2JpQWdJQ0F2THlCSlppQjBjbUZ1YzJGamRHbHZiaUJwY3lCbWIzVnVaQ0JtYjNJZ2MyRnRaU0JoWTNScGIyNGdhV1FzSUdSdklHNXZkQ0JqY21WaGRHVWdZU0J1WlhjZ2MzQmxaV1F0ZFhBZ2RISmhibk5oWTNScGIyNHVYRzRnSUNBZ2FXWWdLR0ZqZEdsdmJrbGtLU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQmxlR2x6ZEdsdVoxUjRUV1YwWVNBOVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZEhoVGRHRjBaVTFoYm1GblpYSXVaMlYwVkhKaGJuTmhZM1JwYjI1WGFYUm9RV04wYVc5dVNXUW9ZV04wYVc5dVNXUXBPMXh1SUNBZ0lDQWdhV1lnS0dWNGFYTjBhVzVuVkhoTlpYUmhLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJsZUdsemRHbHVaMVI0VFdWMFlUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J2Y21sbmFXNWhiRlI0VFdWMFlTQTlJSFJvYVhNdWRIaFRkR0YwWlUxaGJtRm5aWEl1WjJWMFZISmhibk5oWTNScGIyNG9iM0pwWjJsdVlXeFVlRWxrS1R0Y2JpQWdJQ0JqYjI1emRDQjdJSFI0VUdGeVlXMXpJSDBnUFNCdmNtbG5hVzVoYkZSNFRXVjBZVHRjYmx4dUlDQWdJR052Ym5OMElIc2djSEpsZG1sdmRYTkhZWE5RWVhKaGJYTXNJRzVsZDBkaGMxQmhjbUZ0Y3lCOUlEMGdkR2hwY3k1blpXNWxjbUYwWlU1bGQwZGhjMUJoY21GdGN5aGNiaUFnSUNBZ0lHOXlhV2RwYm1Gc1ZIaE5aWFJoTEZ4dUlDQWdJQ0FnWTNWemRHOXRSMkZ6VTJWMGRHbHVaM01zWEc0Z0lDQWdLVHRjYmx4dUlDQWdJR052Ym5OMElHNWxkMVI0VFdWMFlTQTlJSFJvYVhNdWRIaFRkR0YwWlUxaGJtRm5aWEl1WjJWdVpYSmhkR1ZVZUUxbGRHRW9lMXh1SUNBZ0lDQWdkSGhRWVhKaGJYTTZJSHRjYmlBZ0lDQWdJQ0FnTGk0dWRIaFFZWEpoYlhNc1hHNGdJQ0FnSUNBZ0lDNHVMbTVsZDBkaGMxQmhjbUZ0Y3l4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCd2NtVjJhVzkxYzBkaGMxQmhjbUZ0Y3l4Y2JpQWdJQ0FnSUd4dllXUnBibWRFWldaaGRXeDBjem9nWm1Gc2MyVXNYRzRnSUNBZ0lDQnpkR0YwZFhNNklGUnlZVzV6WVdOMGFXOXVVM1JoZEhWekxtRndjSEp2ZG1Wa0xGeHVJQ0FnSUNBZ2RIbHdaVG9nVkhKaGJuTmhZM1JwYjI1VWVYQmxMbkpsZEhKNUxGeHVJQ0FnSUNBZ2IzSnBaMmx1WVd4VWVYQmxPaUJ2Y21sbmFXNWhiRlI0VFdWMFlTNTBlWEJsTEZ4dUlDQWdJQ0FnWVdOMGFXOXVTV1FzWEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JwWmlBb1pYTjBhVzFoZEdWa1FtRnpaVVpsWlNrZ2UxeHVJQ0FnSUNBZ2JtVjNWSGhOWlhSaExtVnpkR2x0WVhSbFpFSmhjMlZHWldVZ1BTQmxjM1JwYldGMFpXUkNZWE5sUm1WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVZV1JrVkhKaGJuTmhZM1JwYjI0b2JtVjNWSGhOWlhSaEtUdGNiaUFnSUNCaGQyRnBkQ0IwYUdsekxtRndjSEp2ZG1WVWNtRnVjMkZqZEdsdmJpaHVaWGRVZUUxbGRHRXVhV1FzSUdGamRHbHZia2xrTENCN1hHNGdJQ0FnSUNCb1lYTkJjSEJ5YjNaaGJGSmxjWFZsYzNRNklHWmhiSE5sTEZ4dUlDQWdJSDBwTzF4dUlDQWdJSEpsZEhWeWJpQnVaWGRVZUUxbGRHRTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nZFhCa1lYUmxjeUIwYUdVZ2RIaE5aWFJoSUdsdUlIUm9aU0IwZUZOMFlYUmxUV0Z1WVdkbGNseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdkSGhOWlhSaElDMGdkR2hsSUhWd1pHRjBaV1FnZEhoTlpYUmhYRzRnSUNBcUwxeHVJQ0JoYzNsdVl5QjFjR1JoZEdWVWNtRnVjMkZqZEdsdmJpaDBlRTFsZEdFcElIdGNiaUFnSUNCMGFHbHpMblI0VTNSaGRHVk5ZVzVoWjJWeUxuVndaR0YwWlZSeVlXNXpZV04wYVc5dUtGeHVJQ0FnSUNBZ2RIaE5aWFJoTEZ4dUlDQWdJQ0FnSjJOdmJtWlVlRG9nZFhObGNpQjFjR1JoZEdWa0lIUnlZVzV6WVdOMGFXOXVKeXhjYmlBZ0lDQXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUhWd1pHRjBaWE1nWVc1a0lHRndjSEp2ZG1WeklIUm9aU0IwY21GdWMyRmpkR2x2Ymx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2RIaE5aWFJoWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmhZM1JwYjI1SlpGeHVJQ0FnS2k5Y2JpQWdZWE41Ym1NZ2RYQmtZWFJsUVc1a1FYQndjbTkyWlZSeVlXNXpZV04wYVc5dUtIUjRUV1YwWVN3Z1lXTjBhVzl1U1dRcElIdGNiaUFnSUNCMGFHbHpMblI0VTNSaGRHVk5ZVzVoWjJWeUxuVndaR0YwWlZSeVlXNXpZV04wYVc5dUtGeHVJQ0FnSUNBZ2RIaE5aWFJoTEZ4dUlDQWdJQ0FnSjJOdmJtWlVlRG9nZFhObGNpQmhjSEJ5YjNabFpDQjBjbUZ1YzJGamRHbHZiaWNzWEc0Z0lDQWdLVHRjYmlBZ0lDQmhkMkZwZENCMGFHbHpMbUZ3Y0hKdmRtVlVjbUZ1YzJGamRHbHZiaWgwZUUxbGRHRXVhV1FzSUdGamRHbHZia2xrS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQnpaWFJ6SUhSb1pTQjBlQ0J6ZEdGMGRYTWdkRzhnWVhCd2NtOTJaV1JjYmlBZ0lDb2dZWFYwYnlCbWFXeHNjeUIwYUdVZ2JtOXVZMlZjYmlBZ0lDb2djMmxuYm5NZ2RHaGxJSFJ5WVc1ellXTjBhVzl1WEc0Z0lDQXFJSEIxWW14cGMyaGxjeUIwYUdVZ2RISmhibk5oWTNScGIyNWNiaUFnSUNvZ2FXWWdZVzU1SUc5bUlIUm9aWE5sSUhOMFpYQnpJR1poYVd4eklIUm9aU0IwZUNCemRHRjBkWE1nZDJsc2JDQmlaU0J6WlhRZ2RHOGdabUZwYkdWa1hHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQjBlRWxrSUMwZ2RHaGxJSFI0SjNNZ1NXUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdGamRHbHZia2xrSUMwZ1lXTjBhVzl1U1dRZ2NHRnpjMlZrSUdaeWIyMGdWVWxjYmlBZ0lDb2dRSEJoY21GdElHOXdkSE1nTFNCdmNIUnBiMjV6SUc5aWFtVmpkRnh1SUNBZ0tpQkFjR0Z5WVcwZ2IzQjBjeTVvWVhOQmNIQnliM1poYkZKbGNYVmxjM1FnTFNCM2FHVjBhR1Z5SUhSb1pTQjBjbUZ1YzJGamRHbHZiaUJvWVhNZ1lXNGdZWEJ3Y205MllXd2djbVZ4ZFdWemRGeHVJQ0FnS2k5Y2JpQWdZWE41Ym1NZ1lYQndjbTkyWlZSeVlXNXpZV04wYVc5dUtIUjRTV1FzSUdGamRHbHZia2xrTENCN0lHaGhjMEZ3Y0hKdmRtRnNVbVZ4ZFdWemRDQTlJSFJ5ZFdVZ2ZTQTlJSHQ5S1NCN1hHNGdJQ0FnTHk4Z1ZFOUVUem9nVFc5MlpTQjBhR2x6SUhOaFptVjBlU0J2ZFhRZ2IyWWdkR2hwY3lCbWRXNWpkR2x2Ymk1Y2JpQWdJQ0F2THlCVGFXNWpaU0IwYUdseklIUnlZVzV6WVdOMGFXOXVJR2x6SUdGemVXNWpMRnh1SUNBZ0lDOHZJSGRsSUc1bFpXUWdkRzhnYTJWbGNDQjBjbUZqYXlCdlppQjNhR0YwSUdseklHTjFjbkpsYm5Sc2VTQmlaV2x1WnlCemFXZHVaV1FzWEc0Z0lDQWdMeThnVTI4Z2RHaGhkQ0IzWlNCa2J5QnViM1FnYVc1amNtVnRaVzUwSUc1dmJtTmxJQ3NnY21WemRXSnRhWFFnYzI5dFpYUm9hVzVuWEc0Z0lDQWdMeThnZEdoaGRDQnBjeUJoYkhKbFlXUjVJR0psYVc1bklHbHVZM0psYldWdWRHVmtJQ1lnYzJsbmJtVmtMbHh1SUNBZ0lHTnZibk4wSUhSNFRXVjBZU0E5SUhSb2FYTXVkSGhUZEdGMFpVMWhibUZuWlhJdVoyVjBWSEpoYm5OaFkzUnBiMjRvZEhoSlpDazdYRzVjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbWx1VUhKdlkyVnpjMDltVTJsbmJtbHVaeTVvWVhNb2RIaEpaQ2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTVwYmxCeWIyTmxjM05QWmxOcFoyNXBibWN1WVdSa0tIUjRTV1FwTzF4dUlDQWdJR3hsZENCdWIyNWpaVXh2WTJzN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDOHZJR0Z3Y0hKdmRtVmNiaUFnSUNBZ0lIUm9hWE11ZEhoVGRHRjBaVTFoYm1GblpYSXVjMlYwVkhoVGRHRjBkWE5CY0hCeWIzWmxaQ2gwZUVsa0tUdGNiaUFnSUNBZ0lHbG1JQ2hvWVhOQmNIQnliM1poYkZKbGNYVmxjM1FwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVdOalpYQjBRWEJ3Y205MllXd29kSGhOWlhSaEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lDOHZJR2RsZENCdVpYaDBJRzV2Ym1ObFhHNGdJQ0FnSUNCamIyNXpkQ0JtY205dFFXUmtjbVZ6Y3lBOUlIUjRUV1YwWVM1MGVGQmhjbUZ0Y3k1bWNtOXRPMXh1SUNBZ0lDQWdMeThnZDJGcGRDQm1iM0lnWVNCdWIyNWpaVnh1SUNBZ0lDQWdiR1YwSUhzZ1kzVnpkRzl0VG05dVkyVldZV3gxWlNCOUlEMGdkSGhOWlhSaE8xeHVJQ0FnSUNBZ1kzVnpkRzl0VG05dVkyVldZV3gxWlNBOUlFNTFiV0psY2loamRYTjBiMjFPYjI1alpWWmhiSFZsS1R0Y2JpQWdJQ0FnSUc1dmJtTmxURzlqYXlBOUlHRjNZV2wwSUhSb2FYTXVibTl1WTJWVWNtRmphMlZ5TG1kbGRFNXZibU5sVEc5amF5aG1jbTl0UVdSa2NtVnpjeWs3WEc0Z0lDQWdJQ0F2THlCaFpHUWdibTl1WTJVZ2RHOGdkSGhRWVhKaGJYTmNiaUFnSUNBZ0lDOHZJR2xtSUhSNFRXVjBZU0JvWVhNZ2NISmxkbWx2ZFhOSFlYTlFZWEpoYlhNZ2RHaGxiaUJwZENCcGN5QmhJSEpsZEhKNUlHRjBJSE5oYldVZ2JtOXVZMlVnZDJsMGFGeHVJQ0FnSUNBZ0x5OGdhR2xuYUdWeUlHZGhjeUJ6WlhSMGFXNW5jeUJoYm1RZ2RHaGxjbVZtYjNJZ2RHaGxJRzV2Ym1ObElITm9iM1ZzWkNCdWIzUWdZbVVnY21WallXeGpkV3hoZEdWa1hHNGdJQ0FnSUNCamIyNXpkQ0J1YjI1alpTQTlJSFI0VFdWMFlTNXdjbVYyYVc5MWMwZGhjMUJoY21GdGMxeHVJQ0FnSUNBZ0lDQS9JSFI0VFdWMFlTNTBlRkJoY21GdGN5NXViMjVqWlZ4dUlDQWdJQ0FnSUNBNklHNXZibU5sVEc5amF5NXVaWGgwVG05dVkyVTdYRzRnSUNBZ0lDQmpiMjV6ZENCamRYTjBiMjFQY2s1dmJtTmxJRDFjYmlBZ0lDQWdJQ0FnWTNWemRHOXRUbTl1WTJWV1lXeDFaU0E5UFQwZ01DQS9JR04xYzNSdmJVNXZibU5sVm1Gc2RXVWdPaUJqZFhOMGIyMU9iMjVqWlZaaGJIVmxJSHg4SUc1dmJtTmxPMXh1WEc0Z0lDQWdJQ0IwZUUxbGRHRXVkSGhRWVhKaGJYTXVibTl1WTJVZ1BTQmhaR1JJWlhoUWNtVm1hWGdvWTNWemRHOXRUM0pPYjI1alpTNTBiMU4wY21sdVp5Z3hOaWtwTzF4dUlDQWdJQ0FnTHk4Z1lXUmtJRzV2Ym1ObElHUmxZblZuWjJsdVp5QnBibVp2Y20xaGRHbHZiaUIwYnlCMGVFMWxkR0ZjYmlBZ0lDQWdJSFI0VFdWMFlTNXViMjVqWlVSbGRHRnBiSE1nUFNCdWIyNWpaVXh2WTJzdWJtOXVZMlZFWlhSaGFXeHpPMXh1SUNBZ0lDQWdhV1lnS0dOMWMzUnZiVTV2Ym1ObFZtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ2RIaE5aWFJoTG01dmJtTmxSR1YwWVdsc2N5NWpkWE4wYjIxT2IyNWpaVlpoYkhWbElEMGdZM1Z6ZEc5dFRtOXVZMlZXWVd4MVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIUm9hWE11ZEhoVGRHRjBaVTFoYm1GblpYSXVkWEJrWVhSbFZISmhibk5oWTNScGIyNG9YRzRnSUNBZ0lDQWdJSFI0VFdWMFlTeGNiaUFnSUNBZ0lDQWdKM1J5WVc1ellXTjBhVzl1Y3lOaGNIQnliM1psVkhKaGJuTmhZM1JwYjI0bkxGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDOHZJSE5wWjI0Z2RISmhibk5oWTNScGIyNWNiaUFnSUNBZ0lHTnZibk4wSUhKaGQxUjRJRDBnWVhkaGFYUWdkR2hwY3k1emFXZHVWSEpoYm5OaFkzUnBiMjRvZEhoSlpDazdYRzRnSUNBZ0lDQmhkMkZwZENCMGFHbHpMbkIxWW14cGMyaFVjbUZ1YzJGamRHbHZiaWgwZUVsa0xDQnlZWGRVZUN3Z1lXTjBhVzl1U1dRcE8xeHVJQ0FnSUNBZ2RHaHBjeTVmZEhKaFkydFVjbUZ1YzJGamRHbHZiazFsZEhKcFkzTkZkbVZ1ZENoY2JpQWdJQ0FnSUNBZ2RIaE5aWFJoTEZ4dUlDQWdJQ0FnSUNCVWNtRnVjMkZqZEdsdmJrMWxkR0ZOWlhSeWFXTnpSWFpsYm5RdVlYQndjbTkyWldRc1hHNGdJQ0FnSUNBZ0lHRmpkR2x2Ymtsa0xGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDOHZJRzExYzNRZ2MyVjBJSFJ5WVc1ellXTjBhVzl1SUhSdklITjFZbTFwZEhSbFpDOW1ZV2xzWldRZ1ltVm1iM0psSUhKbGJHVmhjMmx1WnlCc2IyTnJYRzRnSUNBZ0lDQnViMjVqWlV4dlkyc3VjbVZzWldGelpVeHZZMnNvS1R0Y2JpQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNBZ0lDOHZJSFJvYVhNZ2FYTWdkSEo1TFdOaGRHTm9JSGR5WVhCd1pXUWdjMjhnZEdoaGRDQjNaU0JqWVc0Z1ozVmhjbUZ1ZEdWbElIUm9ZWFFnZEdobElHNXZibU5sVEc5amF5QnBjeUJ5Wld4bFlYTmxaRnh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWm1GcGJGUnlZVzV6WVdOMGFXOXVLSFI0U1dRc0lHVnljaXdnWVdOMGFXOXVTV1FwTzF4dUlDQWdJQ0FnZlNCallYUmphQ0FvWlhKeU1pa2dlMXh1SUNBZ0lDQWdJQ0JzYjJjdVpYSnliM0lvWlhKeU1pazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQXZMeUJ0ZFhOMElITmxkQ0IwY21GdWMyRmpkR2x2YmlCMGJ5QnpkV0p0YVhSMFpXUXZabUZwYkdWa0lHSmxabTl5WlNCeVpXeGxZWE5wYm1jZ2JHOWphMXh1SUNBZ0lDQWdhV1lnS0c1dmJtTmxURzlqYXlrZ2UxeHVJQ0FnSUNBZ0lDQnViMjVqWlV4dlkyc3VjbVZzWldGelpVeHZZMnNvS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklHTnZiblJwYm5WbElIZHBkR2dnWlhKeWIzSWdZMmhoYVc1Y2JpQWdJQ0FnSUhSb2NtOTNJR1Z5Y2p0Y2JpQWdJQ0I5SUdacGJtRnNiSGtnZTF4dUlDQWdJQ0FnZEdocGN5NXBibEJ5YjJObGMzTlBabE5wWjI1cGJtY3VaR1ZzWlhSbEtIUjRTV1FwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUdGemVXNWpJR0Z3Y0hKdmRtVlVjbUZ1YzJGamRHbHZibk5YYVhSb1UyRnRaVTV2Ym1ObEtHeHBjM1JQWmxSNFVHRnlZVzF6SUQwZ1cxMHBJSHRjYmlBZ0lDQnBaaUFvYkdsemRFOW1WSGhRWVhKaGJYTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnSnljN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdhVzVwZEdsaGJGUjRJRDBnYkdsemRFOW1WSGhRWVhKaGJYTmJNRjA3WEc0Z0lDQWdZMjl1YzNRZ1kyOXRiVzl1SUQwZ1lYZGhhWFFnZEdocGN5NW5aWFJEYjIxdGIyNURiMjVtYVdkMWNtRjBhVzl1S0dsdWFYUnBZV3hVZUM1bWNtOXRLVHRjYmlBZ0lDQmpiMjV6ZENCcGJtbDBhV0ZzVkhoQmMwVjBhRlI0SUQwZ1ZISmhibk5oWTNScGIyNUdZV04wYjNKNUxtWnliMjFVZUVSaGRHRW9hVzVwZEdsaGJGUjRMQ0I3WEc0Z0lDQWdJQ0JqYjIxdGIyNHNYRzRnSUNBZ2ZTazdYRzRnSUNBZ1kyOXVjM1FnYVc1cGRHbGhiRlI0UVhOVFpYSnBZV3hwZW1Wa1NHVjRJRDBnWW5WbVptVnlWRzlJWlhnb2FXNXBkR2xoYkZSNFFYTkZkR2hVZUM1elpYSnBZV3hwZW1Vb0tTazdYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NXBibEJ5YjJObGMzTlBabE5wWjI1cGJtY3VhR0Z6S0dsdWFYUnBZV3hVZUVGelUyVnlhV0ZzYVhwbFpFaGxlQ2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUFuSnp0Y2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1cGJsQnliMk5sYzNOUFpsTnBaMjVwYm1jdVlXUmtLR2x1YVhScFlXeFVlRUZ6VTJWeWFXRnNhWHBsWkVobGVDazdYRzRnSUNBZ2JHVjBJSEpoZDFSNFpYTXNJRzV2Ym1ObFRHOWphenRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnTHk4Z1ZFOUVUem9nZDJVZ2MyaHZkV3hrSUdGa1pDQmhJR05vWldOcklIUnZJSFpsY21sbWVTQjBhR0YwSUdGc2JDQjBjbUZ1YzJGamRHbHZibk1nYUdGMlpTQjBhR1VnYzJGdFpTQm1jbTl0SUdGa1pISmxjM05jYmlBZ0lDQWdJR052Ym5OMElHWnliMjFCWkdSeVpYTnpJRDBnYVc1cGRHbGhiRlI0TG1aeWIyMDdYRzRnSUNBZ0lDQnViMjVqWlV4dlkyc2dQU0JoZDJGcGRDQjBhR2x6TG01dmJtTmxWSEpoWTJ0bGNpNW5aWFJPYjI1alpVeHZZMnNvWm5KdmJVRmtaSEpsYzNNcE8xeHVJQ0FnSUNBZ1kyOXVjM1FnYm05dVkyVWdQU0J1YjI1alpVeHZZMnN1Ym1WNGRFNXZibU5sTzF4dVhHNGdJQ0FnSUNCeVlYZFVlR1Z6SUQwZ1lYZGhhWFFnVUhKdmJXbHpaUzVoYkd3b1hHNGdJQ0FnSUNBZ0lHeHBjM1JQWmxSNFVHRnlZVzF6TG0xaGNDZ29kSGhRWVhKaGJYTXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBlRkJoY21GdGN5NXViMjVqWlNBOUlHRmtaRWhsZUZCeVpXWnBlQ2h1YjI1alpTNTBiMU4wY21sdVp5Z3hOaWtwTzF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5wWjI1RmVIUmxjbTVoYkZSeVlXNXpZV04wYVc5dUtIUjRVR0Z5WVcxektUdGNiaUFnSUNBZ0lDQWdmU2tzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ2JHOW5MbVZ5Y205eUtHVnljaWs3WEc0Z0lDQWdJQ0F2THlCdGRYTjBJSE5sZENCMGNtRnVjMkZqZEdsdmJpQjBieUJ6ZFdKdGFYUjBaV1F2Wm1GcGJHVmtJR0psWm05eVpTQnlaV3hsWVhOcGJtY2diRzlqYTF4dUlDQWdJQ0FnTHk4Z1kyOXVkR2x1ZFdVZ2QybDBhQ0JsY25KdmNpQmphR0ZwYmx4dUlDQWdJQ0FnZEdoeWIzY2daWEp5TzF4dUlDQWdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdJQ0JwWmlBb2JtOXVZMlZNYjJOcktTQjdYRzRnSUNBZ0lDQWdJRzV2Ym1ObFRHOWpheTV5Wld4bFlYTmxURzlqYXlncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RHaHBjeTVwYmxCeWIyTmxjM05QWmxOcFoyNXBibWN1WkdWc1pYUmxLR2x1YVhScFlXeFVlRUZ6VTJWeWFXRnNhWHBsWkVobGVDazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ5WVhkVWVHVnpPMXh1SUNCOVhHNWNiaUFnWVhONWJtTWdjMmxuYmtWNGRHVnlibUZzVkhKaGJuTmhZM1JwYjI0b1gzUjRVR0Z5WVcxektTQjdYRzRnSUNBZ1kyOXVjM1FnYm05eWJXRnNhWHBsWkZSNFVHRnlZVzF6SUQwZ2RIaFZkR2xzY3k1dWIzSnRZV3hwZW1WVWVGQmhjbUZ0Y3loZmRIaFFZWEpoYlhNcE8xeHVJQ0FnSUM4dklHRmtaQ0J1WlhSM2IzSnJMMk5vWVdsdUlHbGtYRzRnSUNBZ1kyOXVjM1FnWTJoaGFXNUpaQ0E5SUhSb2FYTXVaMlYwUTJoaGFXNUpaQ2dwTzF4dUlDQWdJR052Ym5OMElIUjVjR1VnUFNCcGMwVkpVREUxTlRsVWNtRnVjMkZqZEdsdmJpaDdJSFI0VUdGeVlXMXpPaUJ1YjNKdFlXeHBlbVZrVkhoUVlYSmhiWE1nZlNsY2JpQWdJQ0FnSUQ4Z1ZISmhibk5oWTNScGIyNUZiblpsYkc5d1pWUjVjR1V1Wm1WbFRXRnlhMlYwWEc0Z0lDQWdJQ0E2SUZSeVlXNXpZV04wYVc5dVJXNTJaV3h2Y0dWVWVYQmxMbXhsWjJGamVUdGNiaUFnSUNCamIyNXpkQ0IwZUZCaGNtRnRjeUE5SUh0Y2JpQWdJQ0FnSUM0dUxtNXZjbTFoYkdsNlpXUlVlRkJoY21GdGN5eGNiaUFnSUNBZ0lIUjVjR1VzWEc0Z0lDQWdJQ0JuWVhOTWFXMXBkRG9nYm05eWJXRnNhWHBsWkZSNFVHRnlZVzF6TG1kaGN5eGNiaUFnSUNBZ0lHTm9ZV2x1U1dRNklHNWxkeUJPZFcxbGNtbGpLR05vWVdsdVNXUXNJREV3S1M1MGIxQnlaV1pwZUdWa1NHVjRVM1J5YVc1bktDa3NYRzRnSUNBZ2ZUdGNiaUFnSUNBdkx5QnphV2R1SUhSNFhHNGdJQ0FnWTI5dWMzUWdabkp2YlVGa1pISmxjM01nUFNCMGVGQmhjbUZ0Y3k1bWNtOXRPMXh1SUNBZ0lHTnZibk4wSUdOdmJXMXZiaUE5SUdGM1lXbDBJSFJvYVhNdVoyVjBRMjl0Ylc5dVEyOXVabWxuZFhKaGRHbHZiaWhtY205dFFXUmtjbVZ6Y3lrN1hHNGdJQ0FnWTI5dWMzUWdkVzV6YVdkdVpXUkZkR2hVZUNBOUlGUnlZVzV6WVdOMGFXOXVSbUZqZEc5eWVTNW1jbTl0VkhoRVlYUmhLSFI0VUdGeVlXMXpMQ0I3SUdOdmJXMXZiaUI5S1R0Y2JpQWdJQ0JqYjI1emRDQnphV2R1WldSRmRHaFVlQ0E5SUdGM1lXbDBJSFJvYVhNdWMybG5ia1YwYUZSNEtIVnVjMmxuYm1Wa1JYUm9WSGdzSUdaeWIyMUJaR1J5WlhOektUdGNibHh1SUNBZ0lHTnZibk4wSUhKaGQxUjRJRDBnWW5WbVptVnlWRzlJWlhnb2MybG5ibVZrUlhSb1ZIZ3VjMlZ5YVdGc2FYcGxLQ2twTzF4dUlDQWdJSEpsZEhWeWJpQnlZWGRVZUR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQmhaR1J6SUhSb1pTQmphR0ZwYmlCcFpDQmhibVFnYzJsbmJuTWdkR2hsSUhSeVlXNXpZV04wYVc5dUlHRnVaQ0J6WlhRZ2RHaGxJSE4wWVhSMWN5QjBieUJ6YVdkdVpXUmNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJSFI0U1dRZ0xTQjBhR1VnZEhnbmN5QkpaRnh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdjM1J5YVc1bmZTQnlZWGRVZUZ4dUlDQWdLaTljYmlBZ1lYTjVibU1nYzJsbmJsUnlZVzV6WVdOMGFXOXVLSFI0U1dRcElIdGNiaUFnSUNCamIyNXpkQ0IwZUUxbGRHRWdQU0IwYUdsekxuUjRVM1JoZEdWTllXNWhaMlZ5TG1kbGRGUnlZVzV6WVdOMGFXOXVLSFI0U1dRcE8xeHVJQ0FnSUM4dklHRmtaQ0J1WlhSM2IzSnJMMk5vWVdsdUlHbGtYRzRnSUNBZ1kyOXVjM1FnWTJoaGFXNUpaQ0E5SUhSb2FYTXVaMlYwUTJoaGFXNUpaQ2dwTzF4dUlDQWdJR052Ym5OMElIUjVjR1VnUFNCcGMwVkpVREUxTlRsVWNtRnVjMkZqZEdsdmJpaDBlRTFsZEdFcFhHNGdJQ0FnSUNBL0lGUnlZVzV6WVdOMGFXOXVSVzUyWld4dmNHVlVlWEJsTG1abFpVMWhjbXRsZEZ4dUlDQWdJQ0FnT2lCVWNtRnVjMkZqZEdsdmJrVnVkbVZzYjNCbFZIbHdaUzVzWldkaFkzazdYRzRnSUNBZ1kyOXVjM1FnZEhoUVlYSmhiWE1nUFNCN1hHNGdJQ0FnSUNBdUxpNTBlRTFsZEdFdWRIaFFZWEpoYlhNc1hHNGdJQ0FnSUNCMGVYQmxMRnh1SUNBZ0lDQWdZMmhoYVc1SlpDeGNiaUFnSUNBZ0lHZGhjMHhwYldsME9pQjBlRTFsZEdFdWRIaFFZWEpoYlhNdVoyRnpMRnh1SUNBZ0lIMDdYRzRnSUNBZ0x5OGdjMmxuYmlCMGVGeHVJQ0FnSUdOdmJuTjBJR1p5YjIxQlpHUnlaWE56SUQwZ2RIaFFZWEpoYlhNdVpuSnZiVHRjYmlBZ0lDQmpiMjV6ZENCamIyMXRiMjRnUFNCaGQyRnBkQ0IwYUdsekxtZGxkRU52YlcxdmJrTnZibVpwWjNWeVlYUnBiMjRvZEhoUVlYSmhiWE11Wm5KdmJTazdYRzRnSUNBZ1kyOXVjM1FnZFc1emFXZHVaV1JGZEdoVWVDQTlJRlJ5WVc1ellXTjBhVzl1Um1GamRHOXllUzVtY205dFZIaEVZWFJoS0hSNFVHRnlZVzF6TENCN0lHTnZiVzF2YmlCOUtUdGNiaUFnSUNCamIyNXpkQ0J6YVdkdVpXUkZkR2hVZUNBOUlHRjNZV2wwSUhSb2FYTXVjMmxuYmtWMGFGUjRLRnh1SUNBZ0lDQWdkVzV6YVdkdVpXUkZkR2hVZUN4Y2JpQWdJQ0FnSUdaeWIyMUJaR1J5WlhOekxGeHVJQ0FnSUNrN1hHNWNibHh1SUNBZ0lDOHZJR0ZrWkNCeUxITXNkaUIyWVd4MVpYTWdabTl5SUhCeWIzWnBaR1Z5SUhKbGNYVmxjM1FnY0hWeWNHOXpaWE1nYzJWbElHTnlaV0YwWlUxbGRHRnRZWE5yVFdsa1pHeGxkMkZ5WlZ4dUlDQWdJQzh2SUdGdVpDQktVMDlPSUhKd1l5QnpkR0Z1WkdGeVpDQm1iM0lnWm5WeWRHaGxjaUJsZUhCc1lXNWhkR2x2Ymx4dUlDQWdJSFI0VFdWMFlTNXlJRDBnWVdSa1NHVjRVSEpsWm1sNEtITnBaMjVsWkVWMGFGUjRMbkl1ZEc5VGRISnBibWNvTVRZcEtUdGNiaUFnSUNCMGVFMWxkR0V1Y3lBOUlHRmtaRWhsZUZCeVpXWnBlQ2h6YVdkdVpXUkZkR2hVZUM1ekxuUnZVM1J5YVc1bktERTJLU2s3WEc0Z0lDQWdkSGhOWlhSaExuWWdQU0JoWkdSSVpYaFFjbVZtYVhnb2MybG5ibVZrUlhSb1ZIZ3VkaTUwYjFOMGNtbHVaeWd4TmlrcE8xeHVYRzRnSUNBZ2RHaHBjeTUwZUZOMFlYUmxUV0Z1WVdkbGNpNTFjR1JoZEdWVWNtRnVjMkZqZEdsdmJpaGNiaUFnSUNBZ0lIUjRUV1YwWVN4Y2JpQWdJQ0FnSUNkMGNtRnVjMkZqZEdsdmJuTWpjMmxuYmxSeVlXNXpZV04wYVc5dU9pQmhaR1FnY2l3Z2N5d2dkaUIyWVd4MVpYTW5MRnh1SUNBZ0lDazdYRzVjYmlBZ0lDQXZMeUJ6WlhRZ2MzUmhkR1VnZEc4Z2MybG5ibVZrWEc0Z0lDQWdkR2hwY3k1MGVGTjBZWFJsVFdGdVlXZGxjaTV6WlhSVWVGTjBZWFIxYzFOcFoyNWxaQ2gwZUUxbGRHRXVhV1FwTzF4dUlDQWdJR052Ym5OMElISmhkMVI0SUQwZ1luVm1abVZ5Vkc5SVpYZ29jMmxuYm1Wa1JYUm9WSGd1YzJWeWFXRnNhWHBsS0NrcE8xeHVJQ0FnSUhKbGRIVnliaUJ5WVhkVWVEdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJ3ZFdKc2FYTm9aWE1nZEdobElISmhkeUIwZUNCaGJtUWdjMlYwY3lCMGFHVWdkSGhOWlhSaElIUnZJSE4xWW0xcGRIUmxaRnh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnZEhoSlpDQXRJSFJvWlNCMGVDZHpJRWxrWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnlZWGRVZUNBdElIUm9aU0JvWlhnZ2MzUnlhVzVuSUc5bUlIUm9aU0J6WlhKcFlXeHBlbVZrSUhOcFoyNWxaQ0IwY21GdWMyRmpkR2x2Ymx4dUlDQWdLaUJBY21WMGRYSnVjeUI3VUhKdmJXbHpaVHgyYjJsa1BuMWNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUdGamRHbHZia2xrSUMwZ1lXTjBhVzl1U1dRZ2NHRnpjMlZrSUdaeWIyMGdWVWxjYmlBZ0lDb3ZYRzRnSUdGemVXNWpJSEIxWW14cGMyaFVjbUZ1YzJGamRHbHZiaWgwZUVsa0xDQnlZWGRVZUN3Z1lXTjBhVzl1U1dRcElIdGNiaUFnSUNCamIyNXpkQ0IwZUUxbGRHRWdQU0IwYUdsekxuUjRVM1JoZEdWTllXNWhaMlZ5TG1kbGRGUnlZVzV6WVdOMGFXOXVLSFI0U1dRcE8xeHVJQ0FnSUhSNFRXVjBZUzV5WVhkVWVDQTlJSEpoZDFSNE8xeHVJQ0FnSUdsbUlDaDBlRTFsZEdFdWRIbHdaU0E5UFQwZ1ZISmhibk5oWTNScGIyNVVlWEJsTG5OM1lYQXBJSHRjYmlBZ0lDQWdJR052Ym5OMElIQnlaVlI0UW1Gc1lXNWpaU0E5SUdGM1lXbDBJSFJvYVhNdWNYVmxjbmt1WjJWMFFtRnNZVzVqWlNoMGVFMWxkR0V1ZEhoUVlYSmhiWE11Wm5KdmJTazdYRzRnSUNBZ0lDQjBlRTFsZEdFdWNISmxWSGhDWVd4aGJtTmxJRDBnY0hKbFZIaENZV3hoYm1ObExuUnZVM1J5YVc1bktERTJLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTUwZUZOMFlYUmxUV0Z1WVdkbGNpNTFjR1JoZEdWVWNtRnVjMkZqZEdsdmJpaGNiaUFnSUNBZ0lIUjRUV1YwWVN4Y2JpQWdJQ0FnSUNkMGNtRnVjMkZqZEdsdmJuTWpjSFZpYkdsemFGUnlZVzV6WVdOMGFXOXVKeXhjYmlBZ0lDQXBPMXh1SUNBZ0lHeGxkQ0IwZUVoaGMyZzdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJSFI0U0dGemFDQTlJR0YzWVdsMElIUm9hWE11Y1hWbGNua3VjMlZ1WkZKaGQxUnlZVzV6WVdOMGFXOXVLSEpoZDFSNEtUdGNiaUFnSUNCOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnYVdZZ0tHVnljbTl5TG0xbGMzTmhaMlV1ZEc5TWIzZGxja05oYzJVb0tTNXBibU5zZFdSbGN5Z25hMjV2ZDI0Z2RISmhibk5oWTNScGIyNG5LU2tnZTF4dUlDQWdJQ0FnSUNCMGVFaGhjMmdnUFNCclpXTmpZV3NvZEc5Q2RXWm1aWElvWVdSa1NHVjRVSEpsWm1sNEtISmhkMVI0S1N3Z0oyaGxlQ2NwS1M1MGIxTjBjbWx1WnlnbmFHVjRKeWs3WEc0Z0lDQWdJQ0FnSUhSNFNHRnphQ0E5SUdGa1pFaGxlRkJ5WldacGVDaDBlRWhoYzJncE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnWlhKeWIzSTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXVjMlYwVkhoSVlYTm9LSFI0U1dRc0lIUjRTR0Z6YUNrN1hHNWNiaUFnSUNCMGFHbHpMblI0VTNSaGRHVk5ZVzVoWjJWeUxuTmxkRlI0VTNSaGRIVnpVM1ZpYldsMGRHVmtLSFI0U1dRcE8xeHVYRzRnSUNBZ2RHaHBjeTVmZEhKaFkydFVjbUZ1YzJGamRHbHZiazFsZEhKcFkzTkZkbVZ1ZENoY2JpQWdJQ0FnSUhSNFRXVjBZU3hjYmlBZ0lDQWdJRlJ5WVc1ellXTjBhVzl1VFdWMFlVMWxkSEpwWTNORmRtVnVkQzV6ZFdKdGFYUjBaV1FzWEc0Z0lDQWdJQ0JoWTNScGIyNUpaQ3hjYmlBZ0lDQXBPMXh1SUNCOVhHNWNiaUFnWVhONWJtTWdkWEJrWVhSbFVHOXpkRlI0UW1Gc1lXNWpaU2g3SUhSNFRXVjBZU3dnZEhoSlpDd2diblZ0WW1WeVQyWkJkSFJsYlhCMGN5QTlJRFlnZlNrZ2UxeHVJQ0FnSUdOdmJuTjBJSEJ2YzNSVWVFSmhiR0Z1WTJVZ1BTQmhkMkZwZENCMGFHbHpMbkYxWlhKNUxtZGxkRUpoYkdGdVkyVW9kSGhOWlhSaExuUjRVR0Z5WVcxekxtWnliMjBwTzF4dUlDQWdJR052Ym5OMElHeGhkR1Z6ZEZSNFRXVjBZU0E5SUhSb2FYTXVkSGhUZEdGMFpVMWhibUZuWlhJdVoyVjBWSEpoYm5OaFkzUnBiMjRvZEhoSlpDazdYRzRnSUNBZ1kyOXVjM1FnWVhCd2NtOTJZV3hVZUUxbGRHRWdQU0JzWVhSbGMzUlVlRTFsZEdFdVlYQndjbTkyWVd4VWVFbGtYRzRnSUNBZ0lDQS9JSFJvYVhNdWRIaFRkR0YwWlUxaGJtRm5aWEl1WjJWMFZISmhibk5oWTNScGIyNG9iR0YwWlhOMFZIaE5aWFJoTG1Gd2NISnZkbUZzVkhoSlpDbGNiaUFnSUNBZ0lEb2diblZzYkR0Y2JpQWdJQ0JzWVhSbGMzUlVlRTFsZEdFdWNHOXpkRlI0UW1Gc1lXNWpaU0E5SUhCdmMzUlVlRUpoYkdGdVkyVXVkRzlUZEhKcGJtY29NVFlwTzF4dUlDQWdJR052Ym5OMElHbHpSR1ZtWVhWc2RGUnZhMlZ1UVdSa2NtVnpjeUE5SUdselUzZGhjSE5FWldaaGRXeDBWRzlyWlc1QlpHUnlaWE56S0Z4dUlDQWdJQ0FnZEhoTlpYUmhMbVJsYzNScGJtRjBhVzl1Vkc5clpXNUJaR1J5WlhOekxGeHVJQ0FnSUNBZ2RIaE5aWFJoTG1Ob1lXbHVTV1FzWEc0Z0lDQWdLVHRjYmlBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0JwYzBSbFptRjFiSFJVYjJ0bGJrRmtaSEpsYzNNZ0ppWmNiaUFnSUNBZ0lIUjRUV1YwWVM1d2NtVlVlRUpoYkdGdVkyVWdQVDA5SUd4aGRHVnpkRlI0VFdWMFlTNXdiM04wVkhoQ1lXeGhibU5sSUNZbVhHNGdJQ0FnSUNCdWRXMWlaWEpQWmtGMGRHVnRjSFJ6SUQ0Z01GeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDOHZJRWxtSUhCdmMzUlVlRUpoYkdGdVkyVWdhWE1nZEdobElITmhiV1VnWVhNZ2NISmxWSGhDWVd4aGJtTmxMQ0IwY25rZ2FYUWdZV2RoYVc0dVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxVRzl6ZEZSNFFtRnNZVzVqWlNoN1hHNGdJQ0FnSUNBZ0lDQWdkSGhOWlhSaExGeHVJQ0FnSUNBZ0lDQWdJSFI0U1dRc1hHNGdJQ0FnSUNBZ0lDQWdiblZ0WW1WeVQyWkJkSFJsYlhCMGN6b2diblZ0WW1WeVQyWkJkSFJsYlhCMGN5QXRJREVzWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZTd2dWVkJFUVZSRlgxQlBVMVJmVkZoZlFrRk1RVTVEUlY5VVNVMUZUMVZVS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkR2hwY3k1MGVGTjBZWFJsVFdGdVlXZGxjaTUxY0dSaGRHVlVjbUZ1YzJGamRHbHZiaWhjYmlBZ0lDQWdJQ0FnYkdGMFpYTjBWSGhOWlhSaExGeHVJQ0FnSUNBZ0lDQW5kSEpoYm5OaFkzUnBiMjV6STJOdmJtWnBjbTFVY21GdWMyRmpkR2x2YmlBdElHRmtaQ0J3YjNOMFZIaENZV3hoYm1ObEp5eGNiaUFnSUNBZ0lDazdYRzRnSUNBZ0lDQjBhR2x6TGw5MGNtRmphMU4zWVhCelRXVjBjbWxqY3loc1lYUmxjM1JVZUUxbGRHRXNJR0Z3Y0hKdmRtRnNWSGhOWlhSaEtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMlYwY3lCMGFHVWdjM1JoZEhWeklHOW1JSFJvWlNCMGNtRnVjMkZqZEdsdmJpQjBieUJqYjI1bWFYSnRaV1FnWVc1a0lITmxkSE1nZEdobElITjBZWFIxY3lCdlppQnViMjVqWlNCa2RYQnNhV05oZEdWeklHRnpYRzRnSUNBcUlHUnliM0J3WldRZ2FXWWdkR2hsSUhSNFVHRnlZVzF6SUdoaGRtVWdaR0YwWVNCcGRDQjNhV3hzSUdabGRHTm9JSFJvWlNCMGVGSmxZMlZwY0hSY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlIUjRTV1FnTFNCVWFHVWdkSGduY3lCSlJGeHVJQ0FnS2lCQWNHRnlZVzBnZEhoU1pXTmxhWEIwWEc0Z0lDQXFJRUJ3WVhKaGJTQmlZWE5sUm1WbFVHVnlSMkZ6WEc0Z0lDQXFJRUJ3WVhKaGJTQmliRzlqYTFScGJXVnpkR0Z0Y0Z4dUlDQWdLaUJBY21WMGRYSnVjeUI3VUhKdmJXbHpaVHgyYjJsa1BuMWNiaUFnSUNvdlhHNGdJR0Z6ZVc1aklHTnZibVpwY20xVWNtRnVjMkZqZEdsdmJpaDBlRWxrTENCMGVGSmxZMlZwY0hRc0lHSmhjMlZHWldWUVpYSkhZWE1zSUdKc2IyTnJWR2x0WlhOMFlXMXdLU0I3WEc0Z0lDQWdMeThnWjJWMElIUm9aU0IwZUZKbFkyVnBjSFFnWW1WbWIzSmxJRzFoY210cGJtY2dkR2hsSUhSeVlXNXpZV04wYVc5dUlHTnZibVpwY20xbFpGeHVJQ0FnSUM4dklIUnZJR1Z1YzNWeVpTQjBhR1VnY21WalpXbHdkQ0JwY3lCbmIzUjBaVzRnWW1WbWIzSmxJSFJvWlNCMWFTQnlaWFpwZG1WeklIUm9aU0IwZUZ4dUlDQWdJR052Ym5OMElIUjRUV1YwWVNBOUlIUm9hWE11ZEhoVGRHRjBaVTFoYm1GblpYSXVaMlYwVkhKaGJuTmhZM1JwYjI0b2RIaEpaQ2s3WEc1Y2JpQWdJQ0JwWmlBb0lYUjRUV1YwWVNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNCamIyNXpkQ0JuWVhOVmMyVmtJRDBnZEhoVmRHbHNjeTV1YjNKdFlXeHBlbVZVZUZKbFkyVnBjSFJIWVhOVmMyVmtLSFI0VW1WalpXbHdkQzVuWVhOVmMyVmtLVHRjYmx4dUlDQWdJQ0FnZEhoTlpYUmhMblI0VW1WalpXbHdkQ0E5SUh0Y2JpQWdJQ0FnSUNBZ0xpNHVkSGhTWldObGFYQjBMRnh1SUNBZ0lDQWdJQ0JuWVhOVmMyVmtMRnh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnYVdZZ0tHSmhjMlZHWldWUVpYSkhZWE1wSUh0Y2JpQWdJQ0FnSUNBZ2RIaE5aWFJoTG1KaGMyVkdaV1ZRWlhKSFlYTWdQU0JpWVhObFJtVmxVR1Z5UjJGek8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLR0pzYjJOclZHbHRaWE4wWVcxd0tTQjdYRzRnSUNBZ0lDQWdJSFI0VFdWMFlTNWliRzlqYTFScGJXVnpkR0Z0Y0NBOUlHSnNiMk5yVkdsdFpYTjBZVzF3TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMGFHbHpMblI0VTNSaGRHVk5ZVzVoWjJWeUxuTmxkRlI0VTNSaGRIVnpRMjl1Wm1seWJXVmtLSFI0U1dRcE8xeHVJQ0FnSUNBZ2RHaHBjeTVmYldGeWEwNXZibU5sUkhWd2JHbGpZWFJsYzBSeWIzQndaV1FvZEhoSlpDazdYRzVjYmlBZ0lDQWdJR052Ym5OMElIc2djM1ZpYldsMGRHVmtWR2x0WlNCOUlEMGdkSGhOWlhSaE8xeHVJQ0FnSUNBZ1kyOXVjM1FnYldWMGNtbGpjMUJoY21GdGN5QTlJSHNnWjJGelgzVnpaV1E2SUdkaGMxVnpaV1FnZlR0Y2JseHVJQ0FnSUNBZ2FXWWdLSE4xWW0xcGRIUmxaRlJwYldVcElIdGNiaUFnSUNBZ0lDQWdiV1YwY21samMxQmhjbUZ0Y3k1amIyMXdiR1YwYVc5dVgzUnBiV1VnUFZ4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDJkbGRGUnlZVzV6WVdOMGFXOXVRMjl0Y0d4bGRHbHZibFJwYldVb2MzVmliV2wwZEdWa1ZHbHRaU2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaDBlRkpsWTJWcGNIUXVjM1JoZEhWeklEMDlQU0FuTUhnd0p5a2dlMXh1SUNBZ0lDQWdJQ0J0WlhSeWFXTnpVR0Z5WVcxekxuTjBZWFIxY3lBOUlFMUZWRkpKUTFOZlUxUkJWRlZUWDBaQlNVeEZSRHRjYmlBZ0lDQWdJQ0FnTHk4Z2JXVjBjbWxqYzFCaGNtRnRjeTVsY25KdmNpQTlJRlJQUkU4NklHWnBaM1Z5WlNCdmRYUWdZU0IzWVhrZ2RHOGdaMlYwSUhSb1pTQnZiaTFqYUdGcGJpQm1ZV2xzZFhKbElISmxZWE52Ymx4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMGFHbHpMbDkwY21GamExUnlZVzV6WVdOMGFXOXVUV1YwY21samMwVjJaVzUwS0Z4dUlDQWdJQ0FnSUNCMGVFMWxkR0VzWEc0Z0lDQWdJQ0FnSUZSeVlXNXpZV04wYVc5dVRXVjBZVTFsZEhKcFkzTkZkbVZ1ZEM1bWFXNWhiR2w2WldRc1hHNGdJQ0FnSUNBZ0lIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lDQWdiV1YwY21samMxQmhjbUZ0Y3l4Y2JpQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lIUm9hWE11ZEhoVGRHRjBaVTFoYm1GblpYSXVkWEJrWVhSbFZISmhibk5oWTNScGIyNG9YRzRnSUNBZ0lDQWdJSFI0VFdWMFlTeGNiaUFnSUNBZ0lDQWdKM1J5WVc1ellXTjBhVzl1Y3lOamIyNW1hWEp0VkhKaGJuTmhZM1JwYjI0Z0xTQmhaR1FnZEhoU1pXTmxhWEIwSnl4Y2JpQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lHbG1JQ2gwZUUxbGRHRXVkSGx3WlNBOVBUMGdWSEpoYm5OaFkzUnBiMjVVZVhCbExuTjNZWEFwSUh0Y2JpQWdJQ0FnSUNBZ1lYZGhhWFFnZEdocGN5NTFjR1JoZEdWUWIzTjBWSGhDWVd4aGJtTmxLSHRjYmlBZ0lDQWdJQ0FnSUNCMGVFMWxkR0VzWEc0Z0lDQWdJQ0FnSUNBZ2RIaEpaQ3hjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCallYUmphQ0FvWlhKeUtTQjdYRzRnSUNBZ0lDQnNiMmN1WlhKeWIzSW9aWEp5S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCaGMzbHVZeUJqYjI1bWFYSnRSWGgwWlhKdVlXeFVjbUZ1YzJGamRHbHZiaWgwZUUxbGRHRXNJSFI0VW1WalpXbHdkQ3dnWW1GelpVWmxaVkJsY2tkaGN5a2dlMXh1SUNBZ0lDOHZJR0ZrWkNCbGVIUmxjbTVoYkNCMGNtRnVjMkZqZEdsdmJseHVJQ0FnSUdGM1lXbDBJSFJvYVhNdWRIaFRkR0YwWlUxaGJtRm5aWEl1WVdSa1JYaDBaWEp1WVd4VWNtRnVjMkZqZEdsdmJpaDBlRTFsZEdFcE8xeHVYRzRnSUNBZ2FXWWdLQ0YwZUUxbGRHRXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0IwZUVsa0lEMGdkSGhOWlhSaExtbGtPMXh1WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR2RoYzFWelpXUWdQU0IwZUZWMGFXeHpMbTV2Y20xaGJHbDZaVlI0VW1WalpXbHdkRWRoYzFWelpXUW9kSGhTWldObGFYQjBMbWRoYzFWelpXUXBPMXh1WEc0Z0lDQWdJQ0IwZUUxbGRHRXVkSGhTWldObGFYQjBJRDBnZTF4dUlDQWdJQ0FnSUNBdUxpNTBlRkpsWTJWcGNIUXNYRzRnSUNBZ0lDQWdJR2RoYzFWelpXUXNYRzRnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0JwWmlBb1ltRnpaVVpsWlZCbGNrZGhjeWtnZTF4dUlDQWdJQ0FnSUNCMGVFMWxkR0V1WW1GelpVWmxaVkJsY2tkaGN5QTlJR0poYzJWR1pXVlFaWEpIWVhNN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIUm9hWE11ZEhoVGRHRjBaVTFoYm1GblpYSXVjMlYwVkhoVGRHRjBkWE5EYjI1bWFYSnRaV1FvZEhoSlpDazdYRzRnSUNBZ0lDQjBhR2x6TGw5dFlYSnJUbTl1WTJWRWRYQnNhV05oZEdWelJISnZjSEJsWkNoMGVFbGtLVHRjYmx4dUlDQWdJQ0FnWTI5dWMzUWdleUJ6ZFdKdGFYUjBaV1JVYVcxbElIMGdQU0IwZUUxbGRHRTdYRzRnSUNBZ0lDQmpiMjV6ZENCdFpYUnlhV056VUdGeVlXMXpJRDBnZXlCbllYTmZkWE5sWkRvZ1oyRnpWWE5sWkNCOU8xeHVYRzRnSUNBZ0lDQnBaaUFvYzNWaWJXbDBkR1ZrVkdsdFpTa2dlMXh1SUNBZ0lDQWdJQ0J0WlhSeWFXTnpVR0Z5WVcxekxtTnZiWEJzWlhScGIyNWZkR2x0WlNBOVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZloyVjBWSEpoYm5OaFkzUnBiMjVEYjIxd2JHVjBhVzl1VkdsdFpTaHpkV0p0YVhSMFpXUlVhVzFsS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLSFI0VW1WalpXbHdkQzV6ZEdGMGRYTWdQVDA5SUNjd2VEQW5LU0I3WEc0Z0lDQWdJQ0FnSUcxbGRISnBZM05RWVhKaGJYTXVjM1JoZEhWeklEMGdUVVZVVWtsRFUxOVRWRUZVVlZOZlJrRkpURVZFTzF4dUlDQWdJQ0FnSUNBdkx5QnRaWFJ5YVdOelVHRnlZVzF6TG1WeWNtOXlJRDBnVkU5RVR6b2dabWxuZFhKbElHOTFkQ0JoSUhkaGVTQjBieUJuWlhRZ2RHaGxJRzl1TFdOb1lXbHVJR1poYVd4MWNtVWdjbVZoYzI5dVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIUm9hWE11WDNSeVlXTnJWSEpoYm5OaFkzUnBiMjVOWlhSeWFXTnpSWFpsYm5Rb1hHNGdJQ0FnSUNBZ0lIUjRUV1YwWVN4Y2JpQWdJQ0FnSUNBZ1ZISmhibk5oWTNScGIyNU5aWFJoVFdWMGNtbGpjMFYyWlc1MExtWnBibUZzYVhwbFpDeGNiaUFnSUNBZ0lDQWdkVzVrWldacGJtVmtMRnh1SUNBZ0lDQWdJQ0J0WlhSeWFXTnpVR0Z5WVcxekxGeHVJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdkR2hwY3k1MGVGTjBZWFJsVFdGdVlXZGxjaTUxY0dSaGRHVlVjbUZ1YzJGamRHbHZiaWhjYmlBZ0lDQWdJQ0FnZEhoTlpYUmhMRnh1SUNBZ0lDQWdJQ0FuZEhKaGJuTmhZM1JwYjI1ekkyTnZibVpwY20xVWNtRnVjMkZqZEdsdmJpQXRJR0ZrWkNCMGVGSmxZMlZwY0hRbkxGeHVJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdhV1lnS0hSNFRXVjBZUzUwZVhCbElEMDlQU0JVY21GdWMyRmpkR2x2YmxSNWNHVXVjM2RoY0NrZ2UxeHVJQ0FnSUNBZ0lDQmhkMkZwZENCMGFHbHpMblZ3WkdGMFpWQnZjM1JVZUVKaGJHRnVZMlVvZTF4dUlDQWdJQ0FnSUNBZ0lIUjRUV1YwWVN4Y2JpQWdJQ0FnSUNBZ0lDQjBlRWxrTEZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJR3h2Wnk1bGNuSnZjaWhsY25JcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRiMjUyWlc1cFpXNWpaU0J0WlhSb2IyUWdabTl5SUhSb1pTQjFhU0IwYUdGMGN5QnpaWFJ6SUhSb1pTQjBjbUZ1YzJGamRHbHZiaUIwYnlCeVpXcGxZM1JsWkZ4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2RIaEpaQ0F0SUhSb1pTQjBlQ2R6SUVsa1hHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JoWTNScGIyNUpaQ0F0SUdGamRHbHZia2xrSUhCaGMzTmxaQ0JtY205dElGVkpYRzRnSUNBcUlFQnlaWFIxY201eklIdFFjbTl0YVhObFBIWnZhV1ErZlZ4dUlDQWdLaTljYmlBZ1lYTjVibU1nWTJGdVkyVnNWSEpoYm5OaFkzUnBiMjRvZEhoSlpDd2dZV04wYVc5dVNXUXBJSHRjYmlBZ0lDQmpiMjV6ZENCMGVFMWxkR0VnUFNCMGFHbHpMblI0VTNSaGRHVk5ZVzVoWjJWeUxtZGxkRlJ5WVc1ellXTjBhVzl1S0hSNFNXUXBPMXh1SUNBZ0lIUm9hWE11ZEhoVGRHRjBaVTFoYm1GblpYSXVjMlYwVkhoVGRHRjBkWE5TWldwbFkzUmxaQ2gwZUVsa0tUdGNiaUFnSUNCMGFHbHpMbDl5WldwbFkzUkJjSEJ5YjNaaGJDaDBlRTFsZEdFcE8xeHVJQ0FnSUhSb2FYTXVYM1J5WVdOclZISmhibk5oWTNScGIyNU5aWFJ5YVdOelJYWmxiblFvWEc0Z0lDQWdJQ0IwZUUxbGRHRXNYRzRnSUNBZ0lDQlVjbUZ1YzJGamRHbHZiazFsZEdGTlpYUnlhV056UlhabGJuUXVjbVZxWldOMFpXUXNYRzRnSUNBZ0lDQmhZM1JwYjI1SlpDeGNiaUFnSUNBcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sZEhNZ2RHaGxJSFI0U0dGeklHOXVJSFJvWlNCMGVFMWxkR0ZjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUhSNFNXUWdMU0IwYUdVZ2RIZ25jeUJKWkZ4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkSGhJWVhOb0lDMGdkR2hsSUdoaGMyZ2dabTl5SUhSb1pTQjBlRTFsZEdGY2JpQWdJQ292WEc0Z0lITmxkRlI0U0dGemFDaDBlRWxrTENCMGVFaGhjMmdwSUh0Y2JpQWdJQ0F2THlCQlpHUWdkR2hsSUhSNElHaGhjMmdnZEc4Z2RHaGxJSEJsY25OcGMzUmxaQ0J0WlhSaExYUjRJRzlpYW1WamRGeHVJQ0FnSUdOdmJuTjBJSFI0VFdWMFlTQTlJSFJvYVhNdWRIaFRkR0YwWlUxaGJtRm5aWEl1WjJWMFZISmhibk5oWTNScGIyNG9kSGhKWkNrN1hHNGdJQ0FnZEhoTlpYUmhMbWhoYzJnZ1BTQjBlRWhoYzJnN1hHNGdJQ0FnZEdocGN5NTBlRk4wWVhSbFRXRnVZV2RsY2k1MWNHUmhkR1ZVY21GdWMyRmpkR2x2YmloMGVFMWxkR0VzSUNkMGNtRnVjMkZqZEdsdmJuTWpjMlYwVkhoSVlYTm9KeWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1EyOXVkbVZ1YVdWdVkyVWdiV1YwYUc5a0lHWnZjaUIwYUdVZ1ZVa2dkRzhnWldGemFXeDVJR055WldGMFpTQmxkbVZ1ZENCbWNtRm5iV1Z1ZEhNZ2QyaGxiaUIwYUdWY2JpQWdJQ29nWm5KaFoyMWxiblFnWkc5bGN5QnViM1FnWlhocGMzUWdhVzRnYzNSaGRHVXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0IwY21GdWMyRmpkR2x2Ymtsa0lDMGdWR2hsSUhSeVlXNXpZV04wYVc5dUlHbGtJSFJ2SUdOeVpXRjBaU0IwYUdVZ1pYWmxiblJjYmlBZ0lDb2dJR1p5WVdkdFpXNTBJR1p2Y2x4dUlDQWdLaUJBY0dGeVlXMGdlM1poYkhWbFQyWThWSEpoYm5OaFkzUnBiMjVOWlhSaFRXVjBjbWxqYzBWMlpXNTBQbjBnWlhabGJuUWdMU0JsZG1WdWRDQjBlWEJsSUhSdklHTnlaV0YwWlZ4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZV04wYVc5dVNXUWdMU0JoWTNScGIyNUpaQ0J3WVhOelpXUWdabkp2YlNCVlNWeHVJQ0FnS2k5Y2JpQWdZWE41Ym1NZ1kzSmxZWFJsVkhKaGJuTmhZM1JwYjI1RmRtVnVkRVp5WVdkdFpXNTBLSFJ5WVc1ellXTjBhVzl1U1dRc0lHVjJaVzUwTENCaFkzUnBiMjVKWkNrZ2UxeHVJQ0FnSUdOdmJuTjBJSFI0VFdWMFlTQTlJSFJvYVhNdWRIaFRkR0YwWlUxaGJtRm5aWEl1WjJWMFZISmhibk5oWTNScGIyNG9kSEpoYm5OaFkzUnBiMjVKWkNrN1hHNGdJQ0FnWTI5dWMzUWdleUJ3Y205d1pYSjBhV1Z6TENCelpXNXphWFJwZG1WUWNtOXdaWEowYVdWeklIMGdQVnh1SUNBZ0lDQWdZWGRoYVhRZ2RHaHBjeTVmWW5WcGJHUkZkbVZ1ZEVaeVlXZHRaVzUwVUhKdmNHVnlkR2xsY3loMGVFMWxkR0VwTzF4dUlDQWdJSFJvYVhNdVgyTnlaV0YwWlZSeVlXNXpZV04wYVc5dVJYWmxiblJHY21GbmJXVnVkQ2hjYmlBZ0lDQWdJSFI0VFdWMFlTeGNiaUFnSUNBZ0lHVjJaVzUwTEZ4dUlDQWdJQ0FnY0hKdmNHVnlkR2xsY3l4Y2JpQWdJQ0FnSUhObGJuTnBkR2wyWlZCeWIzQmxjblJwWlhNc1hHNGdJQ0FnSUNCaFkzUnBiMjVKWkN4Y2JpQWdJQ0FwTzF4dUlDQjlYRzVjYmlBZ0x5OWNiaUFnTHk4Z0lDQWdJQ0FnSUNBZ0lGQlNTVlpCVkVVZ1RVVlVTRTlFVTF4dUlDQXZMMXh1SUNBdktpb2diV0Z3Y3lCdFpYUm9iMlJ6SUdadmNpQmpiMjUyWlc1cFpXNWpaU292WEc0Z0lGOXRZWEJOWlhSb2IyUnpLQ2tnZTF4dUlDQWdJQzhxS2lCQWNtVjBkWEp1Y3lCN2IySnFaV04wZlNCMGFHVWdjM1JoZEdVZ2FXNGdkSEpoYm5OaFkzUnBiMjRnWTI5dWRISnZiR3hsY2lBcUwxeHVJQ0FnSUhSb2FYTXVaMlYwVTNSaGRHVWdQU0FvS1NBOVBpQjBhR2x6TG0xbGJWTjBiM0psTG1kbGRGTjBZWFJsS0NrN1hHNWNiaUFnSUNBdktpb2dRSEpsZEhWeWJuTWdlM04wY21sdVozMGdkR2hsSUhWelpYSWdjMlZzWldOMFpXUWdZV1JrY21WemN5QXFMMXh1SUNBZ0lIUm9hWE11WjJWMFUyVnNaV04wWldSQlpHUnlaWE56SUQwZ0tDa2dQVDVjYmlBZ0lDQWdJSFJvYVhNdWNISmxabVZ5Wlc1alpYTlRkRzl5WlM1blpYUlRkR0YwWlNncExuTmxiR1ZqZEdWa1FXUmtjbVZ6Y3p0Y2JseHVJQ0FnSUM4cUtpQkFjbVYwZFhKdWN5QjdRWEp5WVhsOUlIUnlZVzV6WVdOMGFXOXVjeUIzYUc5eklITjBZWFIxY3lCcGN5QjFibUZ3Y0hKdmRtVmtJQ292WEc0Z0lDQWdkR2hwY3k1blpYUlZibUZ3Y0hKdmRtVmtWSGhEYjNWdWRDQTlJQ2dwSUQwK1hHNGdJQ0FnSUNCUFltcGxZM1F1YTJWNWN5aDBhR2x6TG5SNFUzUmhkR1ZOWVc1aFoyVnlMbWRsZEZWdVlYQndjbTkyWldSVWVFeHBjM1FvS1NrdWJHVnVaM1JvTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ2UyNTFiV0psY24wZ2JuVnRZbVZ5SUc5bUlIUnlZVzV6WVdOMGFXOXVjeUIwYUdGMElHaGhkbVVnZEdobElITjBZWFIxY3lCemRXSnRhWFIwWldSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWVdOamIzVnVkQ0F0SUdobGVDQndjbVZtYVhobFpDQmhZMk52ZFc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZEdocGN5NW5aWFJRWlc1a2FXNW5WSGhEYjNWdWRDQTlJQ2hoWTJOdmRXNTBLU0E5UGx4dUlDQWdJQ0FnZEdocGN5NTBlRk4wWVhSbFRXRnVZV2RsY2k1blpYUlFaVzVrYVc1blZISmhibk5oWTNScGIyNXpLR0ZqWTI5MWJuUXBMbXhsYm1kMGFEdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJSE5sWlNCMGVGTjBZWFJsVFdGdVlXZGxjbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElHOXdkSE5jYmlBZ0lDQWdLaTljYmlBZ0lDQjBhR2x6TG1kbGRGUnlZVzV6WVdOMGFXOXVjeUE5SUNodmNIUnpLU0E5UGlCMGFHbHpMblI0VTNSaGRHVk5ZVzVoWjJWeUxtZGxkRlJ5WVc1ellXTjBhVzl1Y3lodmNIUnpLVHRjYmx4dUlDQWdJQzhxS2lCQWNtVjBkWEp1Y3lCN2IySnFaV04wZlNCMGFHVWdjMkYyWldRZ1pHVm1ZWFZzZENCMllXeDFaWE1nWm05eUlHRmtkbUZ1WTJWa1IyRnpSbVZsSUNvdlhHNGdJQ0FnZEdocGN5NW5aWFJCWkhaaGJtTmxaRWRoYzBabFpTQTlJQ2dwSUQwK1hHNGdJQ0FnSUNCMGFHbHpMbkJ5WldabGNtVnVZMlZ6VTNSdmNtVXVaMlYwVTNSaGRHVW9LUzVoWkhaaGJtTmxaRWRoYzBabFpUdGNiaUFnZlZ4dVhHNGdJQzh2SUdOaGJHeGxaQ0J2Ym1ObElHOXVJSE4wWVhKMGRYQmNiaUFnWVhONWJtTWdYM1Z3WkdGMFpWQmxibVJwYm1kVWVITkJablJsY2tacGNuTjBRbXh2WTJzb0tTQjdYRzRnSUNBZ0x5OGdkMkZwZENCbWIzSWdabWx5YzNRZ1lteHZZMnNnYzI4Z2QyVWdhMjV2ZHlCM1pTZHlaU0J5WldGa2VWeHVJQ0FnSUdGM1lXbDBJSFJvYVhNdVlteHZZMnRVY21GamEyVnlMbWRsZEV4aGRHVnpkRUpzYjJOcktDazdYRzRnSUNBZ0x5OGdaMlYwSUhOMFlYUjFjeUIxY0dSaGRHVWdabTl5SUdGc2JDQndaVzVrYVc1bklIUnlZVzV6WVdOMGFXOXVjeUFvWm05eUlIUm9aU0JqZFhKeVpXNTBJRzVsZEhkdmNtc3BYRzRnSUNBZ1lYZGhhWFFnZEdocGN5NXdaVzVrYVc1blZIaFVjbUZqYTJWeUxuVndaR0YwWlZCbGJtUnBibWRVZUhNb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJKWmlCMGNtRnVjMkZqZEdsdmJpQmpiMjUwY205c2JHVnlJSGRoY3lCeVpXSnZiM1JsWkNCM2FYUm9JSFJ5WVc1ellXTjBhVzl1Y3lCMGFHRjBJR0Z5WlNCMWJtTnZiWEJzWlhSbFpGeHVJQ0FnS2lCcGJpQnpkR1Z3Y3lCdlppQjBhR1VnZEhKaGJuTmhZM1JwYjI0Z2MybG5ibWx1WnlCdmNpQjFjMlZ5SUdOdmJtWnBjbTFoZEdsdmJpQndjbTlqWlhOeklHbDBJSGRwYkd3Z1pXbDBhR1Z5WEc0Z0lDQXFJSFJ5WVc1emFYUnBiMjRnZEhoTlpYUmhjeUIwYnlCaElHWmhhV3hsWkNCemRHRjBaU0J2Y2lCMGNua2dkRzhnY21Wa2J5QjBhRzl6WlNCMFlYTnJjeTVjYmlBZ0lDb3ZYRzVjYmlBZ1gyOXVRbTl2ZEVOc1pXRnVWWEFvS1NCN1hHNGdJQ0FnZEdocGN5NTBlRk4wWVhSbFRXRnVZV2RsY2x4dUlDQWdJQ0FnTG1kbGRGUnlZVzV6WVdOMGFXOXVjeWg3WEc0Z0lDQWdJQ0FnSUhObFlYSmphRU55YVhSbGNtbGhPaUI3WEc0Z0lDQWdJQ0FnSUNBZ2MzUmhkSFZ6T2lCVWNtRnVjMkZqZEdsdmJsTjBZWFIxY3k1MWJtRndjSEp2ZG1Wa0xGeHVJQ0FnSUNBZ0lDQWdJR3h2WVdScGJtZEVaV1poZFd4MGN6b2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lIMHBYRzRnSUNBZ0lDQXVabTl5UldGamFDZ29kSGdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aFpHUlVlRWRoYzBSbFptRjFiSFJ6S0hSNEtWeHVJQ0FnSUNBZ0lDQWdJQzUwYUdWdUtDaDBlRTFsZEdFcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjRUV1YwWVM1c2IyRmthVzVuUkdWbVlYVnNkSE1nUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEhoVGRHRjBaVTFoYm1GblpYSXVkWEJrWVhSbFZISmhibk5oWTNScGIyNG9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjRUV1YwWVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSjNSeVlXNXpZV04wYVc5dWN6b2daMkZ6SUdWemRHbHRZWFJwYjI0Z1ptOXlJSFI0SUc5dUlHSnZiM1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQWdJQzVqWVhSamFDZ29aWEp5YjNJcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhSNFRXVjBZU0E5SUhSb2FYTXVkSGhUZEdGMFpVMWhibUZuWlhJdVoyVjBWSEpoYm5OaFkzUnBiMjRvZEhndWFXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RIaE5aWFJoTG14dllXUnBibWRFWldaaGRXeDBjeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwZUZOMFlYUmxUV0Z1WVdkbGNpNTFjR1JoZEdWVWNtRnVjMkZqZEdsdmJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RIaE5aWFJoTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FuWm1GcGJHVmtJSFJ2SUdWemRHbHRZWFJsSUdkaGN5QmtkWEpwYm1jZ1ltOXZkQ0JqYkdWaGJuVndMaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWm1GcGJGUnlZVzV6WVdOMGFXOXVLSFI0VFdWMFlTNXBaQ3dnWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQjBhR2x6TG5SNFUzUmhkR1ZOWVc1aFoyVnlYRzRnSUNBZ0lDQXVaMlYwVkhKaGJuTmhZM1JwYjI1ektIdGNiaUFnSUNBZ0lDQWdjMlZoY21Ob1EzSnBkR1Z5YVdFNklIdGNiaUFnSUNBZ0lDQWdJQ0J6ZEdGMGRYTTZJRlJ5WVc1ellXTjBhVzl1VTNSaGRIVnpMbUZ3Y0hKdmRtVmtMRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnZlNsY2JpQWdJQ0FnSUM1bWIzSkZZV05vS0NoMGVFMWxkR0VwSUQwK0lIdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklFeHBibVVnWW1Wc2IzY2dkMmxzYkNCMGNua2dkRzhnY0hWaWJHbHphQ0IwY21GdWMyRmpkR2x2YmlCM2FHbGphQ0JwY3lCcGJseHVJQ0FnSUNBZ0lDQWdJQzh2SUVGUVVGSlBWa1ZFSUhOMFlYUmxJR0YwSUhSb1pTQjBhVzFsSUc5bUlHTnZiblJ5YjJ4c1pYSWdZbTl2ZEhWd1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1aGNIQnliM1psVkhKaGJuTmhZM1JwYjI0b2RIaE5aWFJoTG1sa0tUdGNibHh1SUNBZ0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ2FYTWdZMkZzYkdWa0lHbHVJR052Ym5OMGNuVmpkRzl5SUdGd2NHeHBaWE1nZEdobElHeHBjM1JsYm1WeWN5Qm1iM0lnY0dWdVpHbHVaMVI0VkhKaFkydGxjaUIwZUZOMFlYUmxUV0Z1WVdkbGNseHVJQ0FnS2lCaGJtUWdZbXh2WTJ0VWNtRmphMlZ5WEc0Z0lDQXFMMXh1SUNCZmMyVjBkWEJNYVhOMFpXNWxjbk1vS1NCN1hHNGdJQ0FnZEdocGN5NTBlRk4wWVhSbFRXRnVZV2RsY2k1dmJpaGNiaUFnSUNBZ0lDZDBlRHB6ZEdGMGRYTXRkWEJrWVhSbEp5eGNiaUFnSUNBZ0lIUm9hWE11WlcxcGRDNWlhVzVrS0hSb2FYTXNJQ2QwZURwemRHRjBkWE10ZFhCa1lYUmxKeWtzWEc0Z0lDQWdLVHRjYmlBZ0lDQjBhR2x6TGw5elpYUjFjRUpzYjJOclZISmhZMnRsY2t4cGMzUmxibVZ5S0NrN1hHNGdJQ0FnZEdocGN5NXdaVzVrYVc1blZIaFVjbUZqYTJWeUxtOXVLQ2QwZURwM1lYSnVhVzVuSnl3Z0tIUjRUV1YwWVNrZ1BUNGdlMXh1SUNBZ0lDQWdkR2hwY3k1MGVGTjBZWFJsVFdGdVlXZGxjaTUxY0dSaGRHVlVjbUZ1YzJGamRHbHZiaWhjYmlBZ0lDQWdJQ0FnZEhoTlpYUmhMRnh1SUNBZ0lDQWdJQ0FuZEhKaGJuTmhZM1JwYjI1ekwzQmxibVJwYm1jdGRIZ3RkSEpoWTJ0bGNpTmxkbVZ1ZERvZ2RIZzZkMkZ5Ym1sdVp5Y3NYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lIUm9hWE11Y0dWdVpHbHVaMVI0VkhKaFkydGxjaTV2YmlnbmRIZzZabUZwYkdWa0p5d2dLSFI0U1dRc0lHVnljbTl5S1NBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6TGw5bVlXbHNWSEpoYm5OaFkzUnBiMjRvZEhoSlpDd2daWEp5YjNJcE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUhSb2FYTXVjR1Z1WkdsdVoxUjRWSEpoWTJ0bGNpNXZiaWhjYmlBZ0lDQWdJQ2QwZURwamIyNW1hWEp0WldRbkxGeHVJQ0FnSUNBZ0tIUjRTV1FzSUhSeVlXNXpZV04wYVc5dVVtVmpaV2x3ZEN3Z1ltRnpaVVpsWlZCbGNrZGhjeXdnWW14dlkydFVhVzFsYzNSaGJYQXBJRDArWEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1seWJWUnlZVzV6WVdOMGFXOXVLRnh1SUNBZ0lDQWdJQ0FnSUhSNFNXUXNYRzRnSUNBZ0lDQWdJQ0FnZEhKaGJuTmhZM1JwYjI1U1pXTmxhWEIwTEZ4dUlDQWdJQ0FnSUNBZ0lHSmhjMlZHWldWUVpYSkhZWE1zWEc0Z0lDQWdJQ0FnSUNBZ1lteHZZMnRVYVcxbGMzUmhiWEFzWEc0Z0lDQWdJQ0FnSUNrc1hHNGdJQ0FnS1R0Y2JpQWdJQ0IwYUdsekxuQmxibVJwYm1kVWVGUnlZV05yWlhJdWIyNG9KM1I0T21SeWIzQndaV1FuTENBb2RIaEpaQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjeTVmWkhKdmNGUnlZVzV6WVdOMGFXOXVLSFI0U1dRcE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUhSb2FYTXVjR1Z1WkdsdVoxUjRWSEpoWTJ0bGNpNXZiaWduZEhnNllteHZZMnN0ZFhCa1lYUmxKeXdnS0hSNFRXVjBZU3dnYkdGMFpYTjBRbXh2WTJ0T2RXMWlaWElwSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2doZEhoTlpYUmhMbVpwY25OMFVtVjBjbmxDYkc5amEwNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBlRTFsZEdFdVptbHljM1JTWlhSeWVVSnNiMk5yVG5WdFltVnlJRDBnYkdGMFpYTjBRbXh2WTJ0T2RXMWlaWEk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkSGhUZEdGMFpVMWhibUZuWlhJdWRYQmtZWFJsVkhKaGJuTmhZM1JwYjI0b1hHNGdJQ0FnSUNBZ0lDQWdkSGhOWlhSaExGeHVJQ0FnSUNBZ0lDQWdJQ2QwY21GdWMyRmpkR2x2Ym5NdmNHVnVaR2x1WnkxMGVDMTBjbUZqYTJWeUkyVjJaVzUwT2lCMGVEcGliRzlqYXkxMWNHUmhkR1VuTEZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0FnSUhSb2FYTXVjR1Z1WkdsdVoxUjRWSEpoWTJ0bGNpNXZiaWduZEhnNmNtVjBjbmtuTENBb2RIaE5aWFJoS1NBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvSVNnbmNtVjBjbmxEYjNWdWRDY2dhVzRnZEhoTlpYUmhLU2tnZTF4dUlDQWdJQ0FnSUNCMGVFMWxkR0V1Y21WMGNubERiM1Z1ZENBOUlEQTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjBlRTFsZEdFdWNtVjBjbmxEYjNWdWRDQXJQU0F4TzF4dUlDQWdJQ0FnZEdocGN5NTBlRk4wWVhSbFRXRnVZV2RsY2k1MWNHUmhkR1ZVY21GdWMyRmpkR2x2YmloY2JpQWdJQ0FnSUNBZ2RIaE5aWFJoTEZ4dUlDQWdJQ0FnSUNBbmRISmhibk5oWTNScGIyNXpMM0JsYm1ScGJtY3RkSGd0ZEhKaFkydGxjaU5sZG1WdWREb2dkSGc2Y21WMGNua25MRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVFpYUnpJRzkwYUdWeUlIUjRUV1YwWVNCemRHRjBkWE5sY3lCMGJ5QmtjbTl3Y0dWa0lHbG1JSFJvWlNCMGVFMWxkR0VnZEdoaGRDQm9ZWE1nWW1WbGJpQmpiMjVtYVhKdFpXUWdhR0Z6SUc5MGFHVnlJSFJ5WVc1ellXTjBhVzl1YzF4dUlDQWdLaUJwYmlCMGFHVWdiR2x6ZENCb1lYWmxJSFJvWlNCellXMWxJRzV2Ym1ObFhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQjBlRWxrSUMwZ2RHaGxJSFI0U1dRZ2IyWWdkR2hsSUhSeVlXNXpZV04wYVc5dUlIUm9ZWFFnYUdGeklHSmxaVzRnWTI5dVptbHliV1ZrSUdsdUlHRWdZbXh2WTJ0Y2JpQWdJQ292WEc0Z0lGOXRZWEpyVG05dVkyVkVkWEJzYVdOaGRHVnpSSEp2Y0hCbFpDaDBlRWxrS1NCN1hHNGdJQ0FnTHk4Z1oyVjBJSFJvWlNCamIyNW1hWEp0WldRZ2RISmhibk5oWTNScGIyNXpJRzV2Ym1ObElHRnVaQ0JtY205dElHRmtaSEpsYzNOY2JpQWdJQ0JqYjI1emRDQjBlRTFsZEdFZ1BTQjBhR2x6TG5SNFUzUmhkR1ZOWVc1aFoyVnlMbWRsZEZSeVlXNXpZV04wYVc5dUtIUjRTV1FwTzF4dUlDQWdJR052Ym5OMElIc2dibTl1WTJVc0lHWnliMjBnZlNBOUlIUjRUV1YwWVM1MGVGQmhjbUZ0Y3p0Y2JpQWdJQ0JqYjI1emRDQnpZVzFsVG05dVkyVlVlSE1nUFNCMGFHbHpMblI0VTNSaGRHVk5ZVzVoWjJWeUxtZGxkRlJ5WVc1ellXTjBhVzl1Y3loN1hHNGdJQ0FnSUNCelpXRnlZMmhEY21sMFpYSnBZVG9nZXlCdWIyNWpaU3dnWm5KdmJTQjlMRnh1SUNBZ0lIMHBPMXh1SUNBZ0lHbG1JQ2doYzJGdFpVNXZibU5sVkhoekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJ0WVhKcklHRnNiQ0J6WVcxbElHNXZibU5sSUhSeVlXNXpZV04wYVc5dWN5QmhjeUJrY205d2NHVmtJR0Z1WkNCbmFYWmxJR2tnWVNCeVpYQnNZV05sWkVKNUlHaGhjMmhjYmlBZ0lDQnpZVzFsVG05dVkyVlVlSE11Wm05eVJXRmphQ2dvYjNSb1pYSlVlRTFsZEdFcElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNodmRHaGxjbFI0VFdWMFlTNXBaQ0E5UFQwZ2RIaEpaQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J2ZEdobGNsUjRUV1YwWVM1eVpYQnNZV05sWkVKNUlEMGdkSGhOWlhSaExtaGhjMmc3WEc0Z0lDQWdJQ0J2ZEdobGNsUjRUV1YwWVM1eVpYQnNZV05sWkVKNVNXUWdQU0IwZUUxbGRHRXVhV1E3WEc0Z0lDQWdJQ0IwYUdsekxuUjRVM1JoZEdWTllXNWhaMlZ5TG5Wd1pHRjBaVlJ5WVc1ellXTjBhVzl1S0Z4dUlDQWdJQ0FnSUNCMGVFMWxkR0VzWEc0Z0lDQWdJQ0FnSUNkMGNtRnVjMkZqZEdsdmJuTXZjR1Z1WkdsdVp5MTBlQzEwY21GamEyVnlJMlYyWlc1ME9pQjBlRHBqYjI1bWFYSnRaV1FnY21WbVpYSmxibU5sSUhSdklHTnZibVpwY20xbFpDQjBlRWhoYzJnZ2QybDBhQ0J6WVcxbElHNXZibU5sSnl4Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBdkx5QkVjbTl3SUdGdWVTQjBjbUZ1YzJGamRHbHZiaUIwYUdGMElIZGhjMjRuZENCd2NtVjJhVzkxYzJ4NUlHWmhhV3hsWkNBb2IyWm1JR05vWVdsdUlHWmhhV3gxY21VcFhHNGdJQ0FnSUNCcFppQW9iM1JvWlhKVWVFMWxkR0V1YzNSaGRIVnpJQ0U5UFNCVWNtRnVjMkZqZEdsdmJsTjBZWFIxY3k1bVlXbHNaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWkhKdmNGUnlZVzV6WVdOMGFXOXVLRzkwYUdWeVZIaE5aWFJoTG1sa0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJRjl6WlhSMWNFSnNiMk5yVkhKaFkydGxja3hwYzNSbGJtVnlLQ2tnZTF4dUlDQWdJR3hsZENCc2FYTjBaVzVsY25OQmNtVkJZM1JwZG1VZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0JqYjI1emRDQnNZWFJsYzNSQ2JHOWphMGhoYm1Sc1pYSWdQU0IwYUdsekxsOXZia3hoZEdWemRFSnNiMk5yTG1KcGJtUW9kR2hwY3lrN1hHNGdJQ0FnWTI5dWMzUWdleUJpYkc5amExUnlZV05yWlhJc0lIUjRVM1JoZEdWTllXNWhaMlZ5SUgwZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnZEhoVGRHRjBaVTFoYm1GblpYSXViMjRvSjNSNE9uTjBZWFIxY3kxMWNHUmhkR1VuTENCMWNHUmhkR1ZUZFdKelkzSnBjSFJwYjI0cE8xeHVJQ0FnSUhWd1pHRjBaVk4xWW5OamNtbHdkR2x2YmlncE8xeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z2RYQmtZWFJsVTNWaWMyTnlhWEIwYVc5dUtDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2NHVnVaR2x1WjFSNGN5QTlJSFI0VTNSaGRHVk5ZVzVoWjJWeUxtZGxkRkJsYm1ScGJtZFVjbUZ1YzJGamRHbHZibk1vS1R0Y2JpQWdJQ0FnSUdsbUlDZ2hiR2x6ZEdWdVpYSnpRWEpsUVdOMGFYWmxJQ1ltSUhCbGJtUnBibWRVZUhNdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0JpYkc5amExUnlZV05yWlhJdWIyNG9KMnhoZEdWemRDY3NJR3hoZEdWemRFSnNiMk5yU0dGdVpHeGxjaWs3WEc0Z0lDQWdJQ0FnSUd4cGMzUmxibVZ5YzBGeVpVRmpkR2wyWlNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0d4cGMzUmxibVZ5YzBGeVpVRmpkR2wyWlNBbUppQWhjR1Z1WkdsdVoxUjRjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnWW14dlkydFVjbUZqYTJWeUxuSmxiVzkyWlV4cGMzUmxibVZ5S0Nkc1lYUmxjM1FuTENCc1lYUmxjM1JDYkc5amEwaGhibVJzWlhJcE8xeHVJQ0FnSUNBZ0lDQnNhWE4wWlc1bGNuTkJjbVZCWTNScGRtVWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQmhjM2x1WXlCZmIyNU1ZWFJsYzNSQ2JHOWpheWhpYkc5amEwNTFiV0psY2lrZ2UxeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQmhkMkZwZENCMGFHbHpMbkJsYm1ScGJtZFVlRlJ5WVdOclpYSXVkWEJrWVhSbFVHVnVaR2x1WjFSNGN5Z3BPMXh1SUNBZ0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJQ0FnYkc5bkxtVnljbTl5S0dWeWNpazdYRzRnSUNBZ2ZWeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQmhkMkZwZENCMGFHbHpMbkJsYm1ScGJtZFVlRlJ5WVdOclpYSXVjbVZ6ZFdKdGFYUlFaVzVrYVc1blZIaHpLR0pzYjJOclRuVnRZbVZ5S1R0Y2JpQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNBZ0lHeHZaeTVsY25KdmNpaGxjbklwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVmNHUmhkR1Z6SUhSb1pTQnRaVzFUZEc5eVpTQnBiaUIwY21GdWMyRmpkR2x2YmlCamIyNTBjbTlzYkdWeVhHNGdJQ0FxTDF4dUlDQmZkWEJrWVhSbFRXVnRjM1J2Y21Vb0tTQjdYRzRnSUNBZ1kyOXVjM1FnZFc1aGNIQnliM1psWkZSNGN5QTlJSFJvYVhNdWRIaFRkR0YwWlUxaGJtRm5aWEl1WjJWMFZXNWhjSEJ5YjNabFpGUjRUR2x6ZENncE8xeHVJQ0FnSUdOdmJuTjBJR04xY25KbGJuUk9aWFIzYjNKclZIaE1hWE4wSUQwZ2RHaHBjeTUwZUZOMFlYUmxUV0Z1WVdkbGNpNW5aWFJVY21GdWMyRmpkR2x2Ym5Nb2UxeHVJQ0FnSUNBZ2JHbHRhWFE2SUUxQldGOU5SVTFUVkU5U1JWOVVXRjlNU1ZOVVgxTkpXa1VzWEc0Z0lDQWdmU2s3WEc0Z0lDQWdkR2hwY3k1dFpXMVRkRzl5WlM1MWNHUmhkR1ZUZEdGMFpTaDdJSFZ1WVhCd2NtOTJaV1JVZUhNc0lHTjFjbkpsYm5ST1pYUjNiM0pyVkhoTWFYTjBJSDBwTzF4dUlDQjlYRzVjYmlBZ1gyTmhiR04xYkdGMFpWUnlZVzV6WVdOMGFXOXVjME52YzNRb2RIaE5aWFJoTENCaGNIQnliM1poYkZSNFRXVjBZU2tnZTF4dUlDQWdJR3hsZENCaGNIQnliM1poYkVkaGMwTnZjM1FnUFNBbk1IZ3dKenRjYmlBZ0lDQnBaaUFvWVhCd2NtOTJZV3hVZUUxbGRHRS9MblI0VW1WalpXbHdkQ2tnZTF4dUlDQWdJQ0FnWVhCd2NtOTJZV3hIWVhORGIzTjBJRDBnWTJGc1kwZGhjMVJ2ZEdGc0tGeHVJQ0FnSUNBZ0lDQmhjSEJ5YjNaaGJGUjRUV1YwWVM1MGVGSmxZMlZwY0hRdVoyRnpWWE5sWkN4Y2JpQWdJQ0FnSUNBZ1lYQndjbTkyWVd4VWVFMWxkR0V1ZEhoU1pXTmxhWEIwTG1WbVptVmpkR2wyWlVkaGMxQnlhV05sTEZ4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdZMjl1YzNRZ2RISmhaR1ZIWVhORGIzTjBJRDBnWTJGc1kwZGhjMVJ2ZEdGc0tGeHVJQ0FnSUNBZ2RIaE5aWFJoTG5SNFVtVmpaV2x3ZEM1bllYTlZjMlZrTEZ4dUlDQWdJQ0FnZEhoTlpYUmhMblI0VW1WalpXbHdkQzVsWm1abFkzUnBkbVZIWVhOUWNtbGpaU3hjYmlBZ0lDQXBPMXh1SUNBZ0lHTnZibk4wSUhSeVlXUmxRVzVrUVhCd2NtOTJZV3hIWVhORGIzTjBJRDBnYm1WM0lFSnBaMDUxYldKbGNpaDBjbUZrWlVkaGMwTnZjM1FzSURFMktWeHVJQ0FnSUNBZ0xuQnNkWE1vWVhCd2NtOTJZV3hIWVhORGIzTjBMQ0F4TmlsY2JpQWdJQ0FnSUM1MGIxTjBjbWx1WnlneE5pazdYRzRnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUdGd2NISnZkbUZzUjJGelEyOXpkRWx1UlhSb09pQk9kVzFpWlhJb2FHVjRWMFZKVkc5RVpXTkZWRWdvWVhCd2NtOTJZV3hIWVhORGIzTjBLU2tzWEc0Z0lDQWdJQ0IwY21Ga1pVZGhjME52YzNSSmJrVjBhRG9nVG5WdFltVnlLR2hsZUZkRlNWUnZSR1ZqUlZSSUtIUnlZV1JsUjJGelEyOXpkQ2twTEZ4dUlDQWdJQ0FnZEhKaFpHVkJibVJCY0hCeWIzWmhiRWRoYzBOdmMzUkpia1YwYURvZ1RuVnRZbVZ5S0Z4dUlDQWdJQ0FnSUNCb1pYaFhSVWxVYjBSbFkwVlVTQ2gwY21Ga1pVRnVaRUZ3Y0hKdmRtRnNSMkZ6UTI5emRDa3NYRzRnSUNBZ0lDQXBMRnh1SUNBZ0lIMDdYRzRnSUgxY2JseHVJQ0JmZEhKaFkydFRkMkZ3YzAxbGRISnBZM01vZEhoTlpYUmhMQ0JoY0hCeWIzWmhiRlI0VFdWMFlTa2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxsOW5aWFJRWVhKMGFXTnBjR0YwWlVsdVRXVjBjbWxqY3lncElDWW1JSFI0VFdWMFlTNXpkMkZ3VFdWMFlVUmhkR0VwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBlRTFsZEdFdWRIaFNaV05sYVhCMExuTjBZWFIxY3lBOVBUMGdKekI0TUNjcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRISmhZMnROWlhSaFRXVjBjbWxqYzBWMlpXNTBLSHRjYmlBZ0lDQWdJQ0FnSUNCbGRtVnVkRG9nSjFOM1lYQWdSbUZwYkdWa0p5eGNiaUFnSUNBZ0lDQWdJQ0J6Wlc1emFYUnBkbVZRY205d1pYSjBhV1Z6T2lCN0lDNHVMblI0VFdWMFlTNXpkMkZ3VFdWMFlVUmhkR0VnZlN4Y2JpQWdJQ0FnSUNBZ0lDQmpZWFJsWjI5eWVUb2dUV1YwWVUxbGRISnBZM05GZG1WdWRFTmhkR1ZuYjNKNUxsTjNZWEJ6TEZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhSdmEyVnVjMUpsWTJWcGRtVmtJRDBnWjJWMFUzZGhjSE5VYjJ0bGJuTlNaV05sYVhabFpFWnliMjFVZUUxbGRHRW9YRzRnSUNBZ0lDQWdJQ0FnZEhoTlpYUmhMbVJsYzNScGJtRjBhVzl1Vkc5clpXNVRlVzFpYjJ3c1hHNGdJQ0FnSUNBZ0lDQWdkSGhOWlhSaExGeHVJQ0FnSUNBZ0lDQWdJSFI0VFdWMFlTNWtaWE4wYVc1aGRHbHZibFJ2YTJWdVFXUmtjbVZ6Y3l4Y2JpQWdJQ0FnSUNBZ0lDQjBlRTFsZEdFdWRIaFFZWEpoYlhNdVpuSnZiU3hjYmlBZ0lDQWdJQ0FnSUNCMGVFMWxkR0V1WkdWemRHbHVZWFJwYjI1VWIydGxia1JsWTJsdFlXeHpMRnh1SUNBZ0lDQWdJQ0FnSUdGd2NISnZkbUZzVkhoTlpYUmhMRnh1SUNBZ0lDQWdJQ0FnSUhSNFRXVjBZUzVqYUdGcGJrbGtMRnh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhGMWIzUmxWbk5GZUdWamRYUnBiMjVTWVhScGJ5QTlJSFJ2YTJWdWMxSmxZMlZwZG1Wa1hHNGdJQ0FnSUNBZ0lDQWdQeUJnSkh0dVpYY2dRbWxuVG5WdFltVnlLSFJ2YTJWdWMxSmxZMlZwZG1Wa0xDQXhNQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdMbVJwZGloMGVFMWxkR0V1YzNkaGNFMWxkR0ZFWVhSaExuUnZhMlZ1WDNSdlgyRnRiM1Z1ZEN3Z01UQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDNTBhVzFsY3lneE1EQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDNXliM1Z1WkNneUtYMGxZRnh1SUNBZ0lDQWdJQ0FnSURvZ2JuVnNiRHRjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0JsYzNScGJXRjBaV1JXYzFWelpXUkhZWE5TWVhScGJ5QTlYRzRnSUNBZ0lDQWdJQ0FnZEhoTlpYUmhMblI0VW1WalpXbHdkQzVuWVhOVmMyVmtJQ1ltSUhSNFRXVjBZUzV6ZDJGd1RXVjBZVVJoZEdFdVpYTjBhVzFoZEdWa1gyZGhjMXh1SUNBZ0lDQWdJQ0FnSUNBZ1B5QmdKSHR1WlhjZ1FtbG5UblZ0WW1WeUtIUjRUV1YwWVM1MGVGSmxZMlZwY0hRdVoyRnpWWE5sWkN3Z01UWXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbVJwZGloMGVFMWxkR0V1YzNkaGNFMWxkR0ZFWVhSaExtVnpkR2x0WVhSbFpGOW5ZWE1zSURFd0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNTBhVzFsY3lneE1EQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbkp2ZFc1a0tESXBmU1ZnWEc0Z0lDQWdJQ0FnSUNBZ0lDQTZJRzUxYkd3N1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RISmhibk5oWTNScGIyNXpRMjl6ZENBOUlIUm9hWE11WDJOaGJHTjFiR0YwWlZSeVlXNXpZV04wYVc5dWMwTnZjM1FvWEc0Z0lDQWdJQ0FnSUNBZ2RIaE5aWFJoTEZ4dUlDQWdJQ0FnSUNBZ0lHRndjSEp2ZG1Gc1ZIaE5aWFJoTEZ4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzUnlZV05yVFdWMFlVMWxkSEpwWTNORmRtVnVkQ2g3WEc0Z0lDQWdJQ0FnSUNBZ1pYWmxiblE2SUNkVGQyRndJRU52YlhCc1pYUmxaQ2NzWEc0Z0lDQWdJQ0FnSUNBZ1kyRjBaV2R2Y25rNklFMWxkR0ZOWlhSeWFXTnpSWFpsYm5SRFlYUmxaMjl5ZVM1VGQyRndjeXhjYmlBZ0lDQWdJQ0FnSUNCelpXNXphWFJwZG1WUWNtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdUxpNTBlRTFsZEdFdWMzZGhjRTFsZEdGRVlYUmhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOXJaVzVmZEc5ZllXMXZkVzUwWDNKbFkyVnBkbVZrT2lCMGIydGxibk5TWldObGFYWmxaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIRjFiM1JsWDNaelgyVjRaV04xZEdsdmJsSmhkR2x2T2lCeGRXOTBaVlp6UlhobFkzVjBhVzl1VW1GMGFXOHNYRzRnSUNBZ0lDQWdJQ0FnSUNCbGMzUnBiV0YwWldSZmRuTmZkWE5sWkY5bllYTlNZWFJwYnpvZ1pYTjBhVzFoZEdWa1ZuTlZjMlZrUjJGelVtRjBhVzhzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjSEJ5YjNaaGJGOW5ZWE5mWTI5emRGOXBibDlsZEdnNklIUnlZVzV6WVdOMGFXOXVjME52YzNRdVlYQndjbTkyWVd4SFlYTkRiM04wU1c1RmRHZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtRmtaVjluWVhOZlkyOXpkRjlwYmw5bGRHZzZJSFJ5WVc1ellXTjBhVzl1YzBOdmMzUXVkSEpoWkdWSFlYTkRiM04wU1c1RmRHZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtRmtaVjloYm1SZllYQndjbTkyWVd4ZloyRnpYMk52YzNSZmFXNWZaWFJvT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyRmpkR2x2Ym5ORGIzTjBMblJ5WVdSbFFXNWtRWEJ3Y205MllXeEhZWE5EYjNOMFNXNUZkR2dzWEc0Z0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pTQmhiR3h2ZDJGdVkyVWdZVzF2ZFc1MElHbHVJSEpsYkdGMGFXOXVJSFJ2SUhSb1pTQmtZWEJ3SUhCeWIzQnZjMlZrSUdGdGIzVnVkQ0JtYjNJZ2MzQmxZMmxtYVdNZ2RHOXJaVzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhSeVlXNXpZV04wYVc5dVFYQndjbTkyWVd4QmJXOTFiblJVZVhCbElDMGdWR2hsSUhSeVlXNXpZV04wYVc5dUlHRndjSEp2ZG1Gc0lHRnRiM1Z1ZENCMGVYQmxYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCdmNtbG5hVzVoYkVGd2NISnZkbUZzUVcxdmRXNTBJQzBnVkdobElHOXlhV2RwYm1Gc0lHRndjSEp2ZG1Gc0lHRnRiM1Z1ZENCcGN5QjBhR1VnYjNKcFoybHVZV3hzZVNCa1lYQndJSEJ5YjNCdmMyVmtJSFJ2YTJWdUlHRnRiM1Z1ZEZ4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdabWx1WVd4QmNIQnliM1poYkVGdGIzVnVkQ0F0SUZSb1pTQm1hVzVoYkNCaGNIQnliM1poYkNCaGJXOTFiblFnYVhNZ2RHaGxJR05vYjNObGJpQmhiVzkxYm5RZ2QyaHBZMmdnZDJsc2JDQmlaU0IwYUdVZ2MyRnRaU0JoY3lCMGFHVmNiaUFnSUNvZ2IzSnBaMmx1WVd4c2VTQmtZWEJ3SUhCeWIzQnZjMlZrSUhSdmEyVnVJR0Z0YjNWdWRDQnBaaUIwYUdVZ2RYTmxjaUJrYjJWeklHNXZkQ0JsWkdsMElIUm9aU0JoYlc5MWJuUWdiM0lnZDJsc2JDQmlaU0JoSUdOMWMzUnZiU0IwYjJ0bGJpQmhiVzkxYm5RZ2MyVjBJR0o1SUhSb1pTQjFjMlZ5WEc0Z0lDQXFMMXh1SUNCZllXeHNiM2RoYm1ObFFXMXZkVzUwU1c1U1pXeGhkR2x2YmxSdlJHRndjRkJ5YjNCdmMyVmtWbUZzZFdVb1hHNGdJQ0FnZEhKaGJuTmhZM1JwYjI1QmNIQnliM1poYkVGdGIzVnVkRlI1Y0dVc1hHNGdJQ0FnYjNKcFoybHVZV3hCY0hCeWIzWmhiRUZ0YjNWdWRDeGNiaUFnSUNCbWFXNWhiRUZ3Y0hKdmRtRnNRVzF2ZFc1MExGeHVJQ0FwSUh0Y2JpQWdJQ0JwWmlBb1hHNGdJQ0FnSUNCMGNtRnVjMkZqZEdsdmJrRndjSEp2ZG1Gc1FXMXZkVzUwVkhsd1pTQTlQVDBnVkhKaGJuTmhZM1JwYjI1QmNIQnliM1poYkVGdGIzVnVkRlI1Y0dVdVkzVnpkRzl0SUNZbVhHNGdJQ0FnSUNCdmNtbG5hVzVoYkVGd2NISnZkbUZzUVcxdmRXNTBJQ1ltWEc0Z0lDQWdJQ0JtYVc1aGJFRndjSEp2ZG1Gc1FXMXZkVzUwWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZQ1I3Ym1WM0lFSnBaMDUxYldKbGNpaHZjbWxuYVc1aGJFRndjSEp2ZG1Gc1FXMXZkVzUwTENBeE1DbGNiaUFnSUNBZ0lDQWdMbVJwZGlobWFXNWhiRUZ3Y0hKdmRtRnNRVzF2ZFc1MExDQXhNQ2xjYmlBZ0lDQWdJQ0FnTG5ScGJXVnpLREV3TUNsY2JpQWdJQ0FnSUNBZ0xuSnZkVzVrS0RJcGZXQTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJvWlNCaGJHeHZkMkZ1WTJVZ1lXMXZkVzUwSUdsdUlISmxiR0YwYVc5dUlIUnZJSFJvWlNCaVlXeGhibU5sSUdadmNpQjBhR0YwSUhOd1pXTnBabWxqSUhSdmEyVnVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0IwY21GdWMyRmpkR2x2YmtGd2NISnZkbUZzUVcxdmRXNTBWSGx3WlNBdElGUm9aU0IwY21GdWMyRmpkR2x2YmlCaGNIQnliM1poYkNCaGJXOTFiblFnZEhsd1pWeHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWkdGd2NGQnliM0J2YzJWa1ZHOXJaVzVCYlc5MWJuUWdMU0JVYUdVZ1pHRndjQ0J3Y205d2IzTmxaQ0IwYjJ0bGJpQmhiVzkxYm5SY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR04xY25KbGJuUlViMnRsYmtKaGJHRnVZMlVnTFNCVWFHVWdZbUZzWVc1alpTQnZaaUIwYUdVZ2RHOXJaVzRnZEdoaGRDQnBjeUJpWldsdVp5QnpaVzVrWEc0Z0lDQXFMMXh1SUNCZllXeHNiM2RoYm1ObFFXMXZkVzUwU1c1U1pXeGhkR2x2YmxSdlZHOXJaVzVDWVd4aGJtTmxLRnh1SUNBZ0lIUnlZVzV6WVdOMGFXOXVRWEJ3Y205MllXeEJiVzkxYm5SVWVYQmxMRnh1SUNBZ0lHUmhjSEJRY205d2IzTmxaRlJ2YTJWdVFXMXZkVzUwTEZ4dUlDQWdJR04xY25KbGJuUlViMnRsYmtKaGJHRnVZMlVzWEc0Z0lDa2dlMXh1SUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ2gwY21GdWMyRmpkR2x2YmtGd2NISnZkbUZzUVcxdmRXNTBWSGx3WlNBOVBUMGdWSEpoYm5OaFkzUnBiMjVCY0hCeWIzWmhiRUZ0YjNWdWRGUjVjR1V1WTNWemRHOXRJSHg4WEc0Z0lDQWdJQ0FnSUhSeVlXNXpZV04wYVc5dVFYQndjbTkyWVd4QmJXOTFiblJVZVhCbElEMDlQVnh1SUNBZ0lDQWdJQ0FnSUZSeVlXNXpZV04wYVc5dVFYQndjbTkyWVd4QmJXOTFiblJVZVhCbExtUmhjSEJRY205d2IzTmxaQ2tnSmlaY2JpQWdJQ0FnSUdSaGNIQlFjbTl3YjNObFpGUnZhMlZ1UVcxdmRXNTBJQ1ltWEc0Z0lDQWdJQ0JqZFhKeVpXNTBWRzlyWlc1Q1lXeGhibU5sWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZQ1I3Ym1WM0lFSnBaMDUxYldKbGNpaGtZWEJ3VUhKdmNHOXpaV1JVYjJ0bGJrRnRiM1Z1ZEN3Z01UWXBYRzRnSUNBZ0lDQWdJQzVrYVhZb1kzVnljbVZ1ZEZSdmEyVnVRbUZzWVc1alpTd2dNVEFwWEc0Z0lDQWdJQ0FnSUM1MGFXMWxjeWd4TURBcFhHNGdJQ0FnSUNBZ0lDNXliM1Z1WkNneUtYMWdPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnZlZ4dVhHNGdJR0Z6ZVc1aklGOWlkV2xzWkVWMlpXNTBSbkpoWjIxbGJuUlFjbTl3WlhKMGFXVnpLSFI0VFdWMFlTd2daWGgwY21GUVlYSmhiWE1wSUh0Y2JpQWdJQ0JqYjI1emRDQjdYRzRnSUNBZ0lDQjBlWEJsTEZ4dUlDQWdJQ0FnZEdsdFpTeGNiaUFnSUNBZ0lITjBZWFIxY3l4Y2JpQWdJQ0FnSUdOb1lXbHVTV1FzWEc0Z0lDQWdJQ0J2Y21sbmFXNDZJSEpsWm1WeWNtVnlMRnh1SUNBZ0lDQWdkSGhRWVhKaGJYTTZJSHRjYmlBZ0lDQWdJQ0FnWjJGelVISnBZMlVzWEc0Z0lDQWdJQ0FnSUdkaGN6b2daMkZ6VEdsdGFYUXNYRzRnSUNBZ0lDQWdJRzFoZUVabFpWQmxja2RoY3l4Y2JpQWdJQ0FnSUNBZ2JXRjRVSEpwYjNKcGRIbEdaV1ZRWlhKSFlYTXNYRzRnSUNBZ0lDQWdJR1Z6ZEdsdFlYUmxVM1ZuWjJWemRHVmtMRnh1SUNBZ0lDQWdJQ0JsYzNScGJXRjBaVlZ6WldRc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ1pHVm1ZWFZzZEVkaGMwVnpkR2x0WVhSbGN5eGNiaUFnSUNBZ0lHOXlhV2RwYm1Gc1ZIbHdaU3hjYmlBZ0lDQWdJSEpsY0d4aFkyVmtRbmxKWkN4Y2JpQWdJQ0FnSUcxbGRHRnRZWE5yVG1WMGQyOXlhMGxrT2lCdVpYUjNiM0pyTEZ4dUlDQWdJQ0FnWTNWemRHOXRWRzlyWlc1QmJXOTFiblFzWEc0Z0lDQWdJQ0JrWVhCd1VISnZjRzl6WldSVWIydGxia0Z0YjNWdWRDeGNiaUFnSUNBZ0lHTjFjbkpsYm5SVWIydGxia0poYkdGdVkyVXNYRzRnSUNBZ0lDQnZjbWxuYVc1aGJFRndjSEp2ZG1Gc1FXMXZkVzUwTEZ4dUlDQWdJQ0FnWm1sdVlXeEJjSEJ5YjNaaGJFRnRiM1Z1ZEN4Y2JpQWdJQ0FnSUdOdmJuUnlZV04wVFdWMGFHOWtUbUZ0WlN4Y2JpQWdJQ0FnSUhObFkzVnlhWFI1VUhKdmRtbGtaWEpTWlhOd2IyNXpaU3hjYmlBZ0lDQjlJRDBnZEhoTlpYUmhPMXh1WEc0Z0lDQWdZMjl1YzNRZ2MyOTFjbU5sSUQwZ2NtVm1aWEp5WlhJZ1BUMDlJRTlTU1VkSlRsOU5SVlJCVFVGVFN5QS9JQ2QxYzJWeUp5QTZJQ2RrWVhCd0p6dGNibHh1SUNBZ0lHTnZibk4wSUhzZ1lYTnpaWFJVZVhCbExDQjBiMnRsYmxOMFlXNWtZWEprSUgwZ1BTQmhkMkZwZENCa1pYUmxjbTFwYm1WVWNtRnVjMkZqZEdsdmJrRnpjMlYwVkhsd1pTaGNiaUFnSUNBZ0lIUjRUV1YwWVN4Y2JpQWdJQ0FnSUhSb2FYTXVjWFZsY25rc1hHNGdJQ0FnSUNCMGFHbHpMbWRsZEZSdmEyVnVVM1JoYm1SaGNtUkJibVJFWlhSaGFXeHpMRnh1SUNBZ0lDazdYRzVjYmlBZ0lDQmpiMjV6ZENCbllYTlFZWEpoYlhNZ1BTQjdmVHRjYmx4dUlDQWdJR2xtSUNocGMwVkpVREUxTlRsVWNtRnVjMkZqZEdsdmJpaDBlRTFsZEdFcEtTQjdYRzRnSUNBZ0lDQm5ZWE5RWVhKaGJYTXViV0Y0WDJabFpWOXdaWEpmWjJGeklEMGdiV0Y0Um1WbFVHVnlSMkZ6TzF4dUlDQWdJQ0FnWjJGelVHRnlZVzF6TG0xaGVGOXdjbWx2Y21sMGVWOW1aV1ZmY0dWeVgyZGhjeUE5SUcxaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGek8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JuWVhOUVlYSmhiWE11WjJGelgzQnlhV05sSUQwZ1oyRnpVSEpwWTJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHUmxabUYxYkhSSFlYTkZjM1JwYldGMFpYTXBJSHRjYmlBZ0lDQWdJR052Ym5OMElIc2daWE4wYVcxaGRHVlVlWEJsSUgwZ1BTQmtaV1poZFd4MFIyRnpSWE4wYVcxaGRHVnpPMXh1SUNBZ0lDQWdhV1lnS0dWemRHbHRZWFJsVkhsd1pTa2dlMXh1SUNBZ0lDQWdJQ0JuWVhOUVlYSmhiWE11WkdWbVlYVnNkRjlsYzNScGJXRjBaU0E5SUdWemRHbHRZWFJsVkhsd1pUdGNiaUFnSUNBZ0lDQWdiR1YwSUdSbFptRjFiSFJOWVhoR1pXVlFaWEpIWVhNZ1BTQjBlRTFsZEdFdVpHVm1ZWFZzZEVkaGMwVnpkR2x0WVhSbGN5NXRZWGhHWldWUVpYSkhZWE03WEc0Z0lDQWdJQ0FnSUd4bGRDQmtaV1poZFd4MFRXRjRVSEpwYjNKcGRIbEdaV1ZRWlhKSFlYTWdQVnh1SUNBZ0lDQWdJQ0FnSUhSNFRXVjBZUzVrWldaaGRXeDBSMkZ6UlhOMGFXMWhkR1Z6TG0xaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGek8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQmJYRzRnSUNBZ0lDQWdJQ0FnSUNCSFlYTlNaV052YlcxbGJtUmhkR2x2Ym5NdWJHOTNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1IyRnpVbVZqYjIxdFpXNWtZWFJwYjI1ekxtMWxaR2wxYlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRWRoYzFKbFkyOXRiV1Z1WkdGMGFXOXVjeTVvYVdkb0xGeHVJQ0FnSUNBZ0lDQWdJRjB1YVc1amJIVmtaWE1vWlhOMGFXMWhkR1ZVZVhCbEtWeHVJQ0FnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0I3SUdkaGMwWmxaVVZ6ZEdsdFlYUmxjeUI5SUQwZ1lYZGhhWFFnZEdocGN5NWZaMlYwUlVsUU1UVTFPVWRoYzBabFpVVnpkR2x0WVhSbGN5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaG5ZWE5HWldWRmMzUnBiV0YwWlhNL0xsdGxjM1JwYldGMFpWUjVjR1ZkUHk1emRXZG5aWE4wWldSTllYaEdaV1ZRWlhKSFlYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhSTllYaEdaV1ZRWlhKSFlYTWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm5ZWE5HWldWRmMzUnBiV0YwWlhOYlpYTjBhVzFoZEdWVWVYQmxYVDh1YzNWbloyVnpkR1ZrVFdGNFJtVmxVR1Z5UjJGek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJGelVHRnlZVzF6TG1SbFptRjFiSFJmYldGNFgyWmxaVjl3WlhKZloyRnpJRDBnWkdWbVlYVnNkRTFoZUVabFpWQmxja2RoY3p0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHZGhjMFpsWlVWemRHbHRZWFJsY3o4dVcyVnpkR2x0WVhSbFZIbHdaVjAvTG5OMVoyZGxjM1JsWkUxaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwVFdGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhNZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbllYTkdaV1ZGYzNScGJXRjBaWE5iWlhOMGFXMWhkR1ZVZVhCbFhUOHVjM1ZuWjJWemRHVmtUV0Y0VUhKcGIzSnBkSGxHWldWUVpYSkhZWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5ZWE5RWVhKaGJYTXVaR1ZtWVhWc2RGOXRZWGhmY0hKcGIzSnBkSGxmWm1WbFgzQmxjbDluWVhNZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwVFdGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhNN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaDBlRTFsZEdFdVpHVm1ZWFZzZEVkaGMwVnpkR2x0WVhSbGN5NW5ZWE1wSUh0Y2JpQWdJQ0FnSUNBZ1oyRnpVR0Z5WVcxekxtUmxabUYxYkhSZloyRnpJRDBnZEhoTlpYUmhMbVJsWm1GMWJIUkhZWE5GYzNScGJXRjBaWE11WjJGek8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLSFI0VFdWMFlTNWtaV1poZFd4MFIyRnpSWE4wYVcxaGRHVnpMbWRoYzFCeWFXTmxLU0I3WEc0Z0lDQWdJQ0FnSUdkaGMxQmhjbUZ0Y3k1a1pXWmhkV3gwWDJkaGMxOXdjbWxqWlNBOUlIUjRUV1YwWVM1a1pXWmhkV3gwUjJGelJYTjBhVzFoZEdWekxtZGhjMUJ5YVdObE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaGxjM1JwYldGMFpWTjFaMmRsYzNSbFpDa2dlMXh1SUNBZ0lDQWdaMkZ6VUdGeVlXMXpMbVZ6ZEdsdFlYUmxYM04xWjJkbGMzUmxaQ0E5SUdWemRHbHRZWFJsVTNWbloyVnpkR1ZrTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNobGMzUnBiV0YwWlZWelpXUXBJSHRjYmlBZ0lDQWdJR2RoYzFCaGNtRnRjeTVsYzNScGJXRjBaVjkxYzJWa0lEMGdaWE4wYVcxaGRHVlZjMlZrTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNobGVIUnlZVkJoY21GdGN6OHVaMkZ6WDNWelpXUXBJSHRjYmlBZ0lDQWdJR2RoYzFCaGNtRnRjeTVuWVhOZmRYTmxaQ0E5SUdWNGRISmhVR0Z5WVcxekxtZGhjMTkxYzJWa08xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJR2RoYzFCaGNtRnRjMGx1UjNkbGFTQTlJSFJvYVhNdVgyZGxkRWRoYzFaaGJIVmxjMGx1UjFkRlNTaG5ZWE5RWVhKaGJYTXBPMXh1WEc0Z0lDQWdiR1YwSUdWcGNERTFOVGxXWlhKemFXOXVJRDBnSnpBbk8xeHVJQ0FnSUdsbUlDaDBlRTFsZEdFdWRIaFFZWEpoYlhNdWJXRjRSbVZsVUdWeVIyRnpLU0I3WEc0Z0lDQWdJQ0JsYVhBeE5UVTVWbVZ5YzJsdmJpQTlJQ2N5Snp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQmpiMjUwY21GamRFbHVkR1Z5WVdOMGFXOXVWSGx3WlhNZ1BTQmJYRzRnSUNBZ0lDQlVjbUZ1YzJGamRHbHZibFI1Y0dVdVkyOXVkSEpoWTNSSmJuUmxjbUZqZEdsdmJpeGNiaUFnSUNBZ0lGUnlZVzV6WVdOMGFXOXVWSGx3WlM1MGIydGxiazFsZEdodlpFRndjSEp2ZG1Vc1hHNGdJQ0FnSUNCVWNtRnVjMkZqZEdsdmJsUjVjR1V1ZEc5clpXNU5aWFJvYjJSVFlXWmxWSEpoYm5ObVpYSkdjbTl0TEZ4dUlDQWdJQ0FnVkhKaGJuTmhZM1JwYjI1VWVYQmxMblJ2YTJWdVRXVjBhRzlrVTJWMFFYQndjbTkyWVd4R2IzSkJiR3dzWEc0Z0lDQWdJQ0JVY21GdWMyRmpkR2x2YmxSNWNHVXVkRzlyWlc1TlpYUm9iMlJVY21GdWMyWmxjaXhjYmlBZ0lDQWdJRlJ5WVc1ellXTjBhVzl1Vkhsd1pTNTBiMnRsYmsxbGRHaHZaRlJ5WVc1elptVnlSbkp2YlN4Y2JpQWdJQ0FnSUZSeVlXNXpZV04wYVc5dVZIbHdaUzV6YldGeWRDeGNiaUFnSUNBZ0lGUnlZVzV6WVdOMGFXOXVWSGx3WlM1emQyRndMRnh1SUNBZ0lDQWdWSEpoYm5OaFkzUnBiMjVVZVhCbExuTjNZWEJCY0hCeWIzWmhiQ3hjYmlBZ0lDQmRMbWx1WTJ4MVpHVnpLSFI1Y0dVcE8xeHVYRzRnSUNBZ1kyOXVjM1FnWTI5dWRISmhZM1JOWlhSb2IyUk9ZVzFsY3lBOUlIdGNiaUFnSUNBZ0lFRlFVRkpQVmtVNklDZEJjSEJ5YjNabEp5eGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2JHVjBJSFJ5WVc1ellXTjBhVzl1UVhCd2NtOTJZV3hCYlc5MWJuUlVlWEJsTzF4dUlDQWdJR3hsZENCMGNtRnVjMkZqZEdsdmJrTnZiblJ5WVdOMFRXVjBhRzlrTzF4dUlDQWdJR3hsZENCMGNtRnVjMkZqZEdsdmJrRndjSEp2ZG1Gc1FXMXZkVzUwVm5OUWNtOXdiM05sWkZKaGRHbHZPMXh1SUNBZ0lHeGxkQ0IwY21GdWMyRmpkR2x2YmtGd2NISnZkbUZzUVcxdmRXNTBWbk5DWVd4aGJtTmxVbUYwYVc4N1hHNGdJQ0FnYkdWMElIUnlZVzV6WVdOMGFXOXVWSGx3WlNBOUlGUnlZVzV6WVdOMGFXOXVWSGx3WlM1emFXMXdiR1ZUWlc1a08xeHVJQ0FnSUdsbUlDaDBlWEJsSUQwOVBTQlVjbUZ1YzJGamRHbHZibFI1Y0dVdVkyRnVZMlZzS1NCN1hHNGdJQ0FnSUNCMGNtRnVjMkZqZEdsdmJsUjVjR1VnUFNCVWNtRnVjMkZqZEdsdmJsUjVjR1V1WTJGdVkyVnNPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3WlNBOVBUMGdWSEpoYm5OaFkzUnBiMjVVZVhCbExuSmxkSEo1S1NCN1hHNGdJQ0FnSUNCMGNtRnVjMkZqZEdsdmJsUjVjR1VnUFNCdmNtbG5hVzVoYkZSNWNHVTdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsSUQwOVBTQlVjbUZ1YzJGamRHbHZibFI1Y0dVdVpHVndiRzk1UTI5dWRISmhZM1FwSUh0Y2JpQWdJQ0FnSUhSeVlXNXpZV04wYVc5dVZIbHdaU0E5SUZSeVlXNXpZV04wYVc5dVZIbHdaUzVrWlhCc2IzbERiMjUwY21GamREdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHTnZiblJ5WVdOMFNXNTBaWEpoWTNScGIyNVVlWEJsY3lrZ2UxeHVJQ0FnSUNBZ2RISmhibk5oWTNScGIyNVVlWEJsSUQwZ1ZISmhibk5oWTNScGIyNVVlWEJsTG1OdmJuUnlZV04wU1c1MFpYSmhZM1JwYjI0N1hHNGdJQ0FnSUNCMGNtRnVjMkZqZEdsdmJrTnZiblJ5WVdOMFRXVjBhRzlrSUQwZ1kyOXVkSEpoWTNSTlpYUm9iMlJPWVcxbE8xeHVJQ0FnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdJQ0IwY21GdWMyRmpkR2x2YmtOdmJuUnlZV04wVFdWMGFHOWtJRDA5UFNCamIyNTBjbUZqZEUxbGRHaHZaRTVoYldWekxrRlFVRkpQVmtVZ0ppWmNiaUFnSUNBZ0lDQWdkRzlyWlc1VGRHRnVaR0Z5WkNBOVBUMGdWRzlyWlc1VGRHRnVaR0Z5WkM1RlVrTXlNRnh1SUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGtZWEJ3VUhKdmNHOXpaV1JVYjJ0bGJrRnRiM1Z1ZENBOVBUMGdKekFuSUh4OElHTjFjM1J2YlZSdmEyVnVRVzF2ZFc1MElEMDlQU0FuTUNjcElIdGNiaUFnSUNBZ0lDQWdJQ0IwY21GdWMyRmpkR2x2YmtGd2NISnZkbUZzUVcxdmRXNTBWSGx3WlNBOUlGUnlZVzV6WVdOMGFXOXVRWEJ3Y205MllXeEJiVzkxYm5SVWVYQmxMbkpsZG05clpUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hqZFhOMGIyMVViMnRsYmtGdGIzVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUnlZVzV6WVdOMGFXOXVRWEJ3Y205MllXeEJiVzkxYm5SVWVYQmxJRDBnVkhKaGJuTmhZM1JwYjI1QmNIQnliM1poYkVGdGIzVnVkRlI1Y0dVdVkzVnpkRzl0TzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHUmhjSEJRY205d2IzTmxaRlJ2YTJWdVFXMXZkVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkSEpoYm5OaFkzUnBiMjVCY0hCeWIzWmhiRUZ0YjNWdWRGUjVjR1VnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdWSEpoYm5OaFkzUnBiMjVCY0hCeWIzWmhiRUZ0YjNWdWRGUjVjR1V1WkdGd2NGQnliM0J2YzJWa08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJ5WVc1ellXTjBhVzl1UVhCd2NtOTJZV3hCYlc5MWJuUldjMUJ5YjNCdmMyVmtVbUYwYVc4Z1BWeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyRnNiRzkzWVc1alpVRnRiM1Z1ZEVsdVVtVnNZWFJwYjI1VWIwUmhjSEJRY205d2IzTmxaRlpoYkhWbEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTmhZM1JwYjI1QmNIQnliM1poYkVGdGIzVnVkRlI1Y0dVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y21sbmFXNWhiRUZ3Y0hKdmRtRnNRVzF2ZFc1MExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWm1sdVlXeEJjSEJ5YjNaaGJFRnRiM1Z1ZEN4Y2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwY21GdWMyRmpkR2x2YmtGd2NISnZkbUZzUVcxdmRXNTBWbk5DWVd4aGJtTmxVbUYwYVc4Z1BWeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyRnNiRzkzWVc1alpVRnRiM1Z1ZEVsdVVtVnNZWFJwYjI1VWIxUnZhMlZ1UW1Gc1lXNWpaU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6WVdOMGFXOXVRWEJ3Y205MllXeEJiVzkxYm5SVWVYQmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRndjRkJ5YjNCdmMyVmtWRzlyWlc1QmJXOTFiblFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFZHOXJaVzVDWVd4aGJtTmxMRnh1SUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdjbVZ3YkdGalpXUlVlRTFsZEdFZ1BTQjBhR2x6TGw5blpYUlVjbUZ1YzJGamRHbHZiaWh5WlhCc1lXTmxaRUo1U1dRcE8xeHVYRzRnSUNBZ1kyOXVjM1FnVkZKQlRsTkJRMVJKVDA1ZlVrVlFURUZEUlUxRlRsUmZUVVZVU0U5RVV5QTlJSHRjYmlBZ0lDQWdJRkpGVkZKWk9pQlVjbUZ1YzJGamRHbHZibFI1Y0dVdWNtVjBjbmtzWEc0Z0lDQWdJQ0JEUVU1RFJVdzZJRlJ5WVc1ellXTjBhVzl1Vkhsd1pTNWpZVzVqWld3c1hHNGdJQ0FnSUNCVFFVMUZYMDVQVGtORk9pQW5iM1JvWlhJbkxGeHVJQ0FnSUgwN1hHNWNiaUFnSUNCc1pYUWdkSEpoYm5OaFkzUnBiMjVTWlhCc1lXTmxaRHRjYmlBZ0lDQnBaaUFvWlhoMGNtRlFZWEpoYlhNL0xtUnliM0J3WldRcElIdGNiaUFnSUNBZ0lIUnlZVzV6WVdOMGFXOXVVbVZ3YkdGalpXUWdQU0JVVWtGT1UwRkRWRWxQVGw5U1JWQk1RVU5GVFVWT1ZGOU5SVlJJVDBSVExsTkJUVVZmVGs5T1EwVTdYRzRnSUNBZ0lDQnBaaUFvY21Wd2JHRmpaV1JVZUUxbGRHRS9MblI1Y0dVZ1BUMDlJRlJ5WVc1ellXTjBhVzl1Vkhsd1pTNWpZVzVqWld3cElIdGNiaUFnSUNBZ0lDQWdkSEpoYm5OaFkzUnBiMjVTWlhCc1lXTmxaQ0E5SUZSU1FVNVRRVU5VU1U5T1gxSkZVRXhCUTBWTlJVNVVYMDFGVkVoUFJGTXVRMEZPUTBWTU8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHlaWEJzWVdObFpGUjRUV1YwWVQ4dWRIbHdaU0E5UFQwZ1ZISmhibk5oWTNScGIyNVVlWEJsTG5KbGRISjVLU0I3WEc0Z0lDQWdJQ0FnSUhSeVlXNXpZV04wYVc5dVVtVndiR0ZqWldRZ1BTQlVVa0ZPVTBGRFZFbFBUbDlTUlZCTVFVTkZUVVZPVkY5TlJWUklUMFJUTGxKRlZGSlpPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0IxYVVOMWMzUnZiV2w2WVhScGIyNXpPMXh1WEc0Z0lDQWdhV1lnS0hObFkzVnlhWFI1VUhKdmRtbGtaWEpTWlhOd2IyNXpaVDh1Wm14aFowRnpSR0Z1WjJWeWIzVnpJRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQjFhVU4xYzNSdmJXbDZZWFJwYjI1eklEMGdXeWRtYkdGbloyVmtYMkZ6WDIxaGJHbGphVzkxY3lkZE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2MyVmpkWEpwZEhsUWNtOTJhV1JsY2xKbGMzQnZibk5sUHk1bWJHRm5RWE5FWVc1blpYSnZkWE1nUFQwOUlESXBJSHRjYmlBZ0lDQWdJSFZwUTNWemRHOXRhWHBoZEdsdmJuTWdQU0JiSjJac1lXZG5aV1JmWVhOZmMyRm1aWFI1WDNWdWEyNXZkMjRuWFR0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkV2xEZFhOMGIyMXBlbUYwYVc5dWN5QTlJRzUxYkd3N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYkdWMElIQnliM0JsY25ScFpYTWdQU0I3WEc0Z0lDQWdJQ0JqYUdGcGJsOXBaRG9nWTJoaGFXNUpaQ3hjYmlBZ0lDQWdJSEpsWm1WeWNtVnlMRnh1SUNBZ0lDQWdjMjkxY21ObExGeHVJQ0FnSUNBZ2JtVjBkMjl5YXl4Y2JpQWdJQ0FnSUdWcGNGOHhOVFU1WDNabGNuTnBiMjQ2SUdWcGNERTFOVGxXWlhKemFXOXVMRnh1SUNBZ0lDQWdaMkZ6WDJWa2FYUmZkSGx3WlRvZ0oyNXZibVVuTEZ4dUlDQWdJQ0FnWjJGelgyVmthWFJmWVhSMFpXMXdkR1ZrT2lBbmJtOXVaU2NzWEc0Z0lDQWdJQ0JoWTJOdmRXNTBYM1I1Y0dVNklHRjNZV2wwSUhSb2FYTXVaMlYwUVdOamIzVnVkRlI1Y0dVb2RHaHBjeTVuWlhSVFpXeGxZM1JsWkVGa1pISmxjM01vS1Nrc1hHNGdJQ0FnSUNCa1pYWnBZMlZmYlc5a1pXdzZJR0YzWVdsMElIUm9hWE11WjJWMFJHVjJhV05sVFc5a1pXd29kR2hwY3k1blpYUlRaV3hsWTNSbFpFRmtaSEpsYzNNb0tTa3NYRzRnSUNBZ0lDQmhjM05sZEY5MGVYQmxPaUJoYzNObGRGUjVjR1VzWEc0Z0lDQWdJQ0IwYjJ0bGJsOXpkR0Z1WkdGeVpEb2dkRzlyWlc1VGRHRnVaR0Z5WkN4Y2JpQWdJQ0FnSUhSeVlXNXpZV04wYVc5dVgzUjVjR1U2SUhSeVlXNXpZV04wYVc5dVZIbHdaU3hjYmlBZ0lDQWdJSFJ5WVc1ellXTjBhVzl1WDNOd1pXVmtYM1Z3T2lCMGVYQmxJRDA5UFNCVWNtRnVjMkZqZEdsdmJsUjVjR1V1Y21WMGNua3NYRzRnSUNBZ0lDQjFhVjlqZFhOMGIyMXBlbUYwYVc5dWN6b2dkV2xEZFhOMGIyMXBlbUYwYVc5dWN5eGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2FXWWdLSFJ5WVc1ellXTjBhVzl1UTI5dWRISmhZM1JOWlhSb2IyUWdQVDA5SUdOdmJuUnlZV04wVFdWMGFHOWtUbUZ0WlhNdVFWQlFVazlXUlNrZ2UxeHVJQ0FnSUNBZ2NISnZjR1Z5ZEdsbGN5QTlJSHRjYmlBZ0lDQWdJQ0FnTGk0dWNISnZjR1Z5ZEdsbGN5eGNiaUFnSUNBZ0lDQWdkSEpoYm5OaFkzUnBiMjVmWVhCd2NtOTJZV3hmWVcxdmRXNTBYM1I1Y0dVNklIUnlZVzV6WVdOMGFXOXVRWEJ3Y205MllXeEJiVzkxYm5SVWVYQmxMRnh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnYzJWdWMybDBhWFpsVUhKdmNHVnlkR2xsY3lBOUlIdGNiaUFnSUNBZ0lITjBZWFIxY3l4Y2JpQWdJQ0FnSUhSeVlXNXpZV04wYVc5dVgyVnVkbVZzYjNCbFgzUjVjR1U2SUdselJVbFFNVFUxT1ZSeVlXNXpZV04wYVc5dUtIUjRUV1YwWVNsY2JpQWdJQ0FnSUNBZ1B5QlVVa0ZPVTBGRFZFbFBUbDlGVGxaRlRFOVFSVjlVV1ZCRlgwNUJUVVZUTGtaRlJWOU5RVkpMUlZSY2JpQWdJQ0FnSUNBZ09pQlVVa0ZPVTBGRFZFbFBUbDlGVGxaRlRFOVFSVjlVV1ZCRlgwNUJUVVZUTGt4RlIwRkRXU3hjYmlBZ0lDQWdJR1pwY25OMFgzTmxaVzQ2SUhScGJXVXNYRzRnSUNBZ0lDQm5ZWE5mYkdsdGFYUTZJR2RoYzB4cGJXbDBMRnh1SUNBZ0lDQWdkSEpoYm5OaFkzUnBiMjVmWTI5dWRISmhZM1JmYldWMGFHOWtPaUIwY21GdWMyRmpkR2x2YmtOdmJuUnlZV04wVFdWMGFHOWtMRnh1SUNBZ0lDQWdkSEpoYm5OaFkzUnBiMjVmY21Wd2JHRmpaV1E2SUhSeVlXNXpZV04wYVc5dVVtVndiR0ZqWldRc1hHNGdJQ0FnSUNBdUxpNWxlSFJ5WVZCaGNtRnRjeXhjYmlBZ0lDQWdJQzR1TG1kaGMxQmhjbUZ0YzBsdVIzZGxhU3hjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdhV1lnS0hSeVlXNXpZV04wYVc5dVEyOXVkSEpoWTNSTlpYUm9iMlFnUFQwOUlHTnZiblJ5WVdOMFRXVjBhRzlrVG1GdFpYTXVRVkJRVWs5V1JTa2dlMXh1SUNBZ0lDQWdjMlZ1YzJsMGFYWmxVSEp2Y0dWeWRHbGxjeUE5SUh0Y2JpQWdJQ0FnSUNBZ0xpNHVjMlZ1YzJsMGFYWmxVSEp2Y0dWeWRHbGxjeXhjYmlBZ0lDQWdJQ0FnZEhKaGJuTmhZM1JwYjI1ZllYQndjbTkyWVd4ZllXMXZkVzUwWDNaelgySmhiR0Z1WTJWZmNtRjBhVzg2WEc0Z0lDQWdJQ0FnSUNBZ2RISmhibk5oWTNScGIyNUJjSEJ5YjNaaGJFRnRiM1Z1ZEZaelFtRnNZVzVqWlZKaGRHbHZMRnh1SUNBZ0lDQWdJQ0IwY21GdWMyRmpkR2x2Ymw5aGNIQnliM1poYkY5aGJXOTFiblJmZG5OZmNISnZjRzl6WldSZmNtRjBhVzg2WEc0Z0lDQWdJQ0FnSUNBZ2RISmhibk5oWTNScGIyNUJjSEJ5YjNaaGJFRnRiM1Z1ZEZaelVISnZjRzl6WldSU1lYUnBieXhjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIc2djSEp2Y0dWeWRHbGxjeXdnYzJWdWMybDBhWFpsVUhKdmNHVnlkR2xsY3lCOU8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWhsYkhCbGNpQnRaWFJvYjJRZ2RHaGhkQ0JqYUdWamEzTWdabTl5SUhSb1pTQndjbVZ6Wlc1alpTQnZaaUJoYmlCbGVHbHpkR2x1WnlCbWNtRm5iV1Z1ZENCaWVTQnBaRnh1SUNBZ0tpQmhjSEJ5YjNCeWFXRjBaU0JtYjNJZ2RHaGxJSFI1Y0dVZ2IyWWdaWFpsYm5RZ2RHaGhkQ0IwY21sbloyVnlaV1FnWm5KaFoyMWxiblFnWTNKbFlYUnBiMjR1SUVsbUlIUm9aVnh1SUNBZ0tpQmhjSEJ5YjNCeWFXRjBaU0JtY21GbmJXVnVkQ0JsZUdsemRITXNJSFJvWlc0Z2JtOTBhR2x1WnlCcGN5QmtiMjVsTGlCSlppQnBkQ0JrYjJWeklHNXZkQ0JsZUdsemRDQmhYRzRnSUNBcUlHNWxkeUJsZG1WdWRDQm1jbUZuYldWdWRDQnBjeUJqY21WaGRHVmtJSGRwZEdnZ2RHaGxJR0Z3Y0hKdmNISnBZWFJsSUhCaGVXeHZZV1F1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1ZISmhibk5oWTNScGIyNU5aWFJoZlNCMGVFMWxkR0VnTFNCVWNtRnVjMkZqZEdsdmJpQnRaWFJoSUc5aWFtVmpkRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UxUnlZVzV6WVdOMGFXOXVUV1YwWVUxbGRISnBZM05GZG1WdWRIMGdaWFpsYm5RZ0xTQlVhR1VnWlhabGJuUWdkSGx3WlNCMGFHRjBYRzRnSUNBcUlDQjBjbWxuWjJWeVpXUWdabkpoWjIxbGJuUWdZM0psWVhScGIyNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhCeWIzQmxjblJwWlhNZ0xTQndjbTl3WlhKMGFXVnpJSFJ2SUdsdVkyeDFaR1VnYVc0Z2RHaGxJR1p5WVdkdFpXNTBYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCYmMyVnVjMmwwYVhabFVISnZjR1Z5ZEdsbGMxMGdMU0J6Wlc1emFYUnBkbVVnY0hKdmNHVnlkR2xsY3lCMGJ5QnBibU5zZFdSbElHbHVYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCYllXTjBhVzl1U1dSZElDMGdZV04wYVc5dVNXUWdjR0Z6YzJWa0lHWnliMjBnVlVsY2JpQWdJQ29nSUhSb1pTQm1jbUZuYldWdWRGeHVJQ0FnS2k5Y2JpQWdYMk55WldGMFpWUnlZVzV6WVdOMGFXOXVSWFpsYm5SR2NtRm5iV1Z1ZENoY2JpQWdJQ0IwZUUxbGRHRXNYRzRnSUNBZ1pYWmxiblFzWEc0Z0lDQWdjSEp2Y0dWeWRHbGxjeXhjYmlBZ0lDQnpaVzV6YVhScGRtVlFjbTl3WlhKMGFXVnpMRnh1SUNBZ0lHRmpkR2x2Ymtsa0xGeHVJQ0FwSUh0Y2JpQWdJQ0JqYjI1emRDQnBjMU4xWW0xcGRIUmxaQ0E5SUZ0Y2JpQWdJQ0FnSUZSeVlXNXpZV04wYVc5dVRXVjBZVTFsZEhKcFkzTkZkbVZ1ZEM1bWFXNWhiR2w2WldRc1hHNGdJQ0FnSUNCVWNtRnVjMkZqZEdsdmJrMWxkR0ZOWlhSeWFXTnpSWFpsYm5RdWMzVmliV2wwZEdWa0xGeHVJQ0FnSUYwdWFXNWpiSFZrWlhNb1pYWmxiblFwTzF4dUlDQWdJR052Ym5OMElIVnVhWEYxWlVsa1pXNTBhV1pwWlhJZ1BTQmdkSEpoYm5OaFkzUnBiMjR0Skh0Y2JpQWdJQ0FnSUdselUzVmliV2wwZEdWa0lEOGdKM04xWW0xcGRIUmxaQ2NnT2lBbllXUmtaV1FuWEc0Z0lDQWdmUzBrZTNSNFRXVjBZUzVwWkgxZ08xeHVYRzRnSUNBZ1kyOXVjM1FnWm5KaFoyMWxiblFnUFNCMGFHbHpMbWRsZEVWMlpXNTBSbkpoWjIxbGJuUkNlVWxrS0hWdWFYRjFaVWxrWlc1MGFXWnBaWElwTzF4dUlDQWdJR2xtSUNoMGVYQmxiMllnWm5KaFoyMWxiblFnSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzZHBkR05vSUNobGRtVnVkQ2tnZTF4dUlDQWdJQ0FnTHk4Z1YyaGxiaUJoSUhSeVlXNXpZV04wYVc5dUlHbHpJR0ZrWkdWa0lIUnZJSFJvWlNCamIyNTBjbTlzYkdWeUxDQjNaU0JyYm05M0lIUm9ZWFFnZEdobElIVnpaWEpjYmlBZ0lDQWdJQzh2SUhkcGJHd2dZbVVnY0hKbGMyVnVkR1ZrSUhkcGRHZ2dZU0JqYjI1bWFYSnRZWFJwYjI0Z2MyTnlaV1Z1TGlCVWFHVWdkWE5sY2lCM2FXeHNJSFJvWlc1Y2JpQWdJQ0FnSUM4dklHVnBkR2hsY2lCamIyNW1hWEp0SUc5eUlISmxhbVZqZENCMGFHRjBJSFJ5WVc1ellXTjBhVzl1TGlCRllXTm9JR2hoY3lCaGJpQmhjM052WTJsaGRHVmtYRzRnSUNBZ0lDQXZMeUJsZG1WdWRDQjNaU0IzWVc1MElIUnZJSFJ5WVdOckxpQlhhR2xzWlNCM1pTQmtiMjRuZENCdVpXTmxjM05oY21sc2VTQnVaV1ZrSUdGdUlHVjJaVzUwWEc0Z0lDQWdJQ0F2THlCbWNtRm5iV1Z1ZENCMGJ5QnRiMlJsYkNCMGFHbHpMQ0JvWVhacGJtY2diMjVsSUdGc2JHOTNjeUIxY3lCMGJ5QnlaV052Y21RZ1lXUmthWFJwYjI1aGJGeHVJQ0FnSUNBZ0x5OGdjSEp2Y0dWeWRHbGxjeUJ2Ym5SdklIUm9aU0JsZG1WdWRDQm1jbTl0SUhSb1pTQlZTUzRnUm05eUlHVjRZVzF3YkdVc0lIZG9aVzRnZEdobElIVnpaWEpjYmlBZ0lDQWdJQzh2SUdWa2FYUnpJSFJvWlNCMGNtRnVjMkZqZEdsdmJuTWdaMkZ6SUhCaGNtRnRjeUIzWlNCallXNGdjbVZqYjNKa0lIUm9ZWFFnY0hKdmNHVnlkSGtnWVc1a1hHNGdJQ0FnSUNBdkx5QjBhR1Z1SUdkbGRDQmhibUZzZVhScFkzTWdiMjRnZEdobElHNTFiV0psY2lCdlppQjBjbUZ1YzJGamRHbHZibk1nYVc0Z2QyaHBZMmdnWjJGeklHVmthWFJ6WEc0Z0lDQWdJQ0F2THlCdlkyTjFjaTVjYmlBZ0lDQWdJR05oYzJVZ1ZISmhibk5oWTNScGIyNU5aWFJoVFdWMGNtbGpjMFYyWlc1MExtRmtaR1ZrT2x4dUlDQWdJQ0FnSUNCMGFHbHpMbU55WldGMFpVVjJaVzUwUm5KaFoyMWxiblFvZTF4dUlDQWdJQ0FnSUNBZ0lHTmhkR1ZuYjNKNU9pQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rdVZISmhibk5oWTNScGIyNXpMRnh1SUNBZ0lDQWdJQ0FnSUdsdWFYUnBZV3hGZG1WdWREb2dWSEpoYm5OaFkzUnBiMjVOWlhSaFRXVjBjbWxqYzBWMlpXNTBMbUZrWkdWa0xGeHVJQ0FnSUNBZ0lDQWdJSE4xWTJObGMzTkZkbVZ1ZERvZ1ZISmhibk5oWTNScGIyNU5aWFJoVFdWMGNtbGpjMFYyWlc1MExtRndjSEp2ZG1Wa0xGeHVJQ0FnSUNBZ0lDQWdJR1poYVd4MWNtVkZkbVZ1ZERvZ1ZISmhibk5oWTNScGIyNU5aWFJoVFdWMGNtbGpjMFYyWlc1MExuSmxhbVZqZEdWa0xGeHVJQ0FnSUNBZ0lDQWdJSEJ5YjNCbGNuUnBaWE1zWEc0Z0lDQWdJQ0FnSUNBZ2MyVnVjMmwwYVhabFVISnZjR1Z5ZEdsbGN5eGNiaUFnSUNBZ0lDQWdJQ0J3WlhKemFYTjBPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQWdJSFZ1YVhGMVpVbGtaVzUwYVdacFpYSXNYRzRnSUNBZ0lDQWdJQ0FnWVdOMGFXOXVTV1FzWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUM4dklFbG1JR1p2Y2lCemIyMWxJSEpsWVhOdmJpQmhiaUJoY0hCeWIzWmhiQ0J2Y2lCeVpXcGxZM1JwYjI0Z2IyTmpkWEp6SUhkcGRHaHZkWFFnZEdobElHRmtaR1ZrWEc0Z0lDQWdJQ0F2THlCbWNtRm5iV1Z1ZENCbGVHbHpkR2x1WnlCcGJpQnRaVzF2Y25rc0lIZGxJR055WldGMFpTQjBhR1VnWVdSa1pXUWdabkpoWjIxbGJuUWdZblYwSUhkcGRHaHZkWFJjYmlBZ0lDQWdJQzh2SUhSb1pTQnBibWwwYVdGc1JYWmxiblFnWm1seWFXNW5MaUJVYUdseklHbHpJSFJ2SUhCeVpYWmxiblFnY0c5emMybGliR1VnWkhWd2JHbGpZWFJwYjI0Z2IyWmNiaUFnSUNBZ0lDOHZJR1YyWlc1MGN5NGdRU0JuYjI5a0lHVjRZVzF3YkdVZ2QyaDVJSFJvYVhNZ2JXbG5hSFFnYjJOamRYSWdhWE1nYVdZZ2RHaGxJSFZ6WlhJZ2FHRmtYRzRnSUNBZ0lDQXZMeUIxYm1Gd2NISnZkbVZrSUhSeVlXNXpZV04wYVc5dWN5QnBiaUJ0WlcxdmNua2dkMmhsYmlCMWNHUmhkR2x1WnlCMGJ5QjBhR1VnZG1WeWMybHZiaUIwYUdGMFhHNGdJQ0FnSUNBdkx5QnBibU5zZFdSbGN5QjBhR2x6SUdOb1lXNW5aUzRnUVNCdGFXZHlZWFJwYjI0Z2QyOTFiR1FnYUdGMlpTQmhiSE52SUdobGJIQmxaQ0JvWlhKbElHSjFkQ0IwYUdselhHNGdJQ0FnSUNBdkx5QnBiWEJzWlcxbGJuUmhkR2x2YmlCb1lYSmtaVzV6SUdGbllXbHVjM1FnYjNSb1pYSWdjRzl6YzJsaWJHVWdZblZuY3lCM2FHVnlaU0JoSUdaeVlXZHRaVzUwWEc0Z0lDQWdJQ0F2THlCa2IyVnpJRzV2ZENCbGVHbHpkQzVjYmlBZ0lDQWdJR05oYzJVZ1ZISmhibk5oWTNScGIyNU5aWFJoVFdWMGNtbGpjMFYyWlc1MExtRndjSEp2ZG1Wa09seHVJQ0FnSUNBZ1kyRnpaU0JVY21GdWMyRmpkR2x2YmsxbGRHRk5aWFJ5YVdOelJYWmxiblF1Y21WcVpXTjBaV1E2WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFJYWmxiblJHY21GbmJXVnVkQ2g3WEc0Z0lDQWdJQ0FnSUNBZ1kyRjBaV2R2Y25rNklFMWxkR0ZOWlhSeWFXTnpSWFpsYm5SRFlYUmxaMjl5ZVM1VWNtRnVjMkZqZEdsdmJuTXNYRzRnSUNBZ0lDQWdJQ0FnYzNWalkyVnpjMFYyWlc1ME9pQlVjbUZ1YzJGamRHbHZiazFsZEdGTlpYUnlhV056UlhabGJuUXVZWEJ3Y205MlpXUXNYRzRnSUNBZ0lDQWdJQ0FnWm1GcGJIVnlaVVYyWlc1ME9pQlVjbUZ1YzJGamRHbHZiazFsZEdGTlpYUnlhV056UlhabGJuUXVjbVZxWldOMFpXUXNYRzRnSUNBZ0lDQWdJQ0FnY0hKdmNHVnlkR2xsY3l4Y2JpQWdJQ0FnSUNBZ0lDQnpaVzV6YVhScGRtVlFjbTl3WlhKMGFXVnpMRnh1SUNBZ0lDQWdJQ0FnSUhCbGNuTnBjM1E2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJQ0FnZFc1cGNYVmxTV1JsYm5ScFptbGxjaXhjYmlBZ0lDQWdJQ0FnSUNCaFkzUnBiMjVKWkN4Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0x5OGdWMmhsYmlCaElIUnlZVzV6WVdOMGFXOXVJR2x6SUhOMVltMXBkSFJsWkNCcGRDQjNhV3hzSUdGc2QyRjVjeUJ5WlhOMWJIUWdhVzRnZFhCa1lYUnBibWRjYmlBZ0lDQWdJQzh2SUhSdklHRWdabWx1WVd4cGVtVmtJSE4wWVhSbElDaGtjbTl3Y0dWa0xDQm1ZV2xzWldRc0lHTnZibVpwY20xbFpDa2dMUzBnWlhabGJuUjFZV3hzZVM1Y2JpQWdJQ0FnSUM4dklFaHZkMlYyWlhJZ2FHRjJhVzVuSUdFZ1puSmhaMjFsYm5RZ2MzUmhjblJsWkNCaGRDQjBhR2x6SUhOMFlXZGxJR0ZzYkc5M2N5QmhkV2R0Wlc1MGFXNW5YRzRnSUNBZ0lDQXZMeUJoYm1Gc2VYUnBZM01nWkdGMFlTQjNhWFJvSUhWelpYSWdhVzUwWlhKaFkzUnBiMjV6SUhOMVkyZ2dZWE1nYzNCbFpXUnBibWNnZFhBZ1lXNWtYRzRnSUNBZ0lDQXZMeUJqWVc1alpXeHBibWNnZEdobElIUnlZVzV6WVdOMGFXOXVjeTRnUm5KdmJTQjBhR2x6SUdOdmJuUnliMnhzWlhKeklIQmxjbk53WldOMGFYWmxJR0VnYm1WM1hHNGdJQ0FnSUNBdkx5QjBjbUZ1YzJGamRHbHZiaUIzYVhSb0lHRWdibVYzSUdsa0lHbHpJR2RsYm1WeVlYUmxaQ0JtYjNJZ2MzQmxaV1FnZFhBZ1lXNWtJR05oYm1ObGJGeHVJQ0FnSUNBZ0x5OGdkSEpoYm5OaFkzUnBiMjV6TENCaWRYUWdabkp2YlNCMGFHVWdWVWtnZDJVZ1kyOTFiR1FnWVhWbmJXVnVkQ0IwYUdVZ2NISmxkbWx2ZFhNZ1NVUWdkMmwwYUZ4dUlDQWdJQ0FnTHk4Z2MzVndjR3hsYldWdWRHRnNJR1JoZEdFZ2RHOGdjMmh2ZHlCMWMyVnlJR2x1ZEdWdWRDNGdVM1ZqYUNCaGN5QjNhR1Z1SUhSb1pYa2diM0JsYmlCMGFHVmNiaUFnSUNBZ0lDOHZJR05oYm1ObGJDQlZTU0JpZFhRZ1pHOXVKM1FnYzNWaWJXbDBMaUJYWlNCallXNGdjbVZqYjNKa0lIUm9ZWFFnZEdocGN5Qm9ZWEJ3Wlc1bFpDQmhibVFnWVdSa1hHNGdJQ0FnSUNBdkx5QndjbTl3WlhKMGFXVnpJSFJ2SUhSb1pTQjBjbUZ1YzJGamRHbHZiaUJsZG1WdWRDNWNiaUFnSUNBZ0lHTmhjMlVnVkhKaGJuTmhZM1JwYjI1TlpYUmhUV1YwY21samMwVjJaVzUwTG5OMVltMXBkSFJsWkRwY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVkZkbVZ1ZEVaeVlXZHRaVzUwS0h0Y2JpQWdJQ0FnSUNBZ0lDQmpZWFJsWjI5eWVUb2dUV1YwWVUxbGRISnBZM05GZG1WdWRFTmhkR1ZuYjNKNUxsUnlZVzV6WVdOMGFXOXVjeXhjYmlBZ0lDQWdJQ0FnSUNCcGJtbDBhV0ZzUlhabGJuUTZJRlJ5WVc1ellXTjBhVzl1VFdWMFlVMWxkSEpwWTNORmRtVnVkQzV6ZFdKdGFYUjBaV1FzWEc0Z0lDQWdJQ0FnSUNBZ2MzVmpZMlZ6YzBWMlpXNTBPaUJVY21GdWMyRmpkR2x2YmsxbGRHRk5aWFJ5YVdOelJYWmxiblF1Wm1sdVlXeHBlbVZrTEZ4dUlDQWdJQ0FnSUNBZ0lIQnliM0JsY25ScFpYTXNYRzRnSUNBZ0lDQWdJQ0FnYzJWdWMybDBhWFpsVUhKdmNHVnlkR2xsY3l4Y2JpQWdJQ0FnSUNBZ0lDQndaWEp6YVhOME9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lIVnVhWEYxWlVsa1pXNTBhV1pwWlhJc1hHNGdJQ0FnSUNBZ0lDQWdZV04wYVc5dVNXUXNYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQzh2SUVsbUlHWnZjaUJ6YjIxbElISmxZWE52YmlCaElIUnlZVzV6WVdOMGFXOXVJR2x6SUdacGJtRnNhWHBsWkNCM2FYUm9iM1YwSUhSb1pTQnpkV0p0YVhSMFpXUmNiaUFnSUNBZ0lDOHZJR1p5WVdkdFpXNTBJR1Y0YVhOMGFXNW5JR2x1SUcxbGJXOXllU3dnZDJVZ1kzSmxZWFJsSUhSb1pTQnpkV0p0YVhSMFpXUWdabkpoWjIxbGJuUWdZblYwWEc0Z0lDQWdJQ0F2THlCM2FYUm9iM1YwSUhSb1pTQnBibWwwYVdGc1JYWmxiblFnWm1seWFXNW5MaUJVYUdseklHbHpJSFJ2SUhCeVpYWmxiblFnY0c5emMybGliR1ZjYmlBZ0lDQWdJQzh2SUdSMWNHeHBZMkYwYVc5dUlHOW1JR1YyWlc1MGN5NGdRU0JuYjI5a0lHVjRZVzF3YkdVZ2QyaDVJSFJvYVhNZ2JXbG5hSFFnYjJOamRYSWdhWE1nYVdZZ2RHaGNiaUFnSUNBZ0lDOHZJSFZ6WlhJZ2FHRmtJSEJsYm1ScGJtY2dkSEpoYm5OaFkzUnBiMjV6SUdsdUlHMWxiVzl5ZVNCM2FHVnVJSFZ3WkdGMGFXNW5JSFJ2SUhSb1pTQjJaWEp6YVc5dVhHNGdJQ0FnSUNBdkx5QjBhR0YwSUdsdVkyeDFaR1Z6SUhSb2FYTWdZMmhoYm1kbExpQkJJRzFwWjNKaGRHbHZiaUIzYjNWc1pDQm9ZWFpsSUdGc2MyOGdhR1ZzY0dWa0lHaGxjbVVnWW5WMFhHNGdJQ0FnSUNBdkx5QjBhR2x6SUdsdGNHeGxiV1Z1ZEdGMGFXOXVJR2hoY21SbGJuTWdZV2RoYVc1emRDQnZkR2hsY2lCd2IzTnphV0pzWlNCaWRXZHpJSGRvWlhKbElHRmNiaUFnSUNBZ0lDOHZJR1p5WVdkdFpXNTBJR1J2WlhNZ2JtOTBJR1Y0YVhOMExseHVJQ0FnSUNBZ1kyRnpaU0JVY21GdWMyRmpkR2x2YmsxbGRHRk5aWFJ5YVdOelJYWmxiblF1Wm1sdVlXeHBlbVZrT2x4dUlDQWdJQ0FnSUNCMGFHbHpMbU55WldGMFpVVjJaVzUwUm5KaFoyMWxiblFvZTF4dUlDQWdJQ0FnSUNBZ0lHTmhkR1ZuYjNKNU9pQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rdVZISmhibk5oWTNScGIyNXpMRnh1SUNBZ0lDQWdJQ0FnSUhOMVkyTmxjM05GZG1WdWREb2dWSEpoYm5OaFkzUnBiMjVOWlhSaFRXVjBjbWxqYzBWMlpXNTBMbVpwYm1Gc2FYcGxaQ3hjYmlBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowYVdWekxGeHVJQ0FnSUNBZ0lDQWdJSE5sYm5OcGRHbDJaVkJ5YjNCbGNuUnBaWE1zWEc0Z0lDQWdJQ0FnSUNBZ2NHVnljMmx6ZERvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNCMWJtbHhkV1ZKWkdWdWRHbG1hV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lHRmpkR2x2Ymtsa0xGeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1JYaDBjbUZqZEhNZ2NtVnNaWFpoYm5RZ2NISnZjR1Z5ZEdsbGN5Qm1jbTl0SUdFZ2RISmhibk5oWTNScGIyNGdiV1YwWVZ4dUlDQWdLaUJ2WW1wbFkzUWdZVzVrSUhWelpYTWdkR2hsYlNCMGJ5QmpjbVZoZEdVZ1lXNWtJSE5sYm1RZ2JXVjBjbWxqY3lCbWIzSWdkbUZ5YVc5MWN5QjBjbUZ1YzJGamRHbHZibHh1SUNBZ0tpQmxkbVZ1ZEhNdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQjBlRTFsZEdFZ0xTQjBhR1VnZEhoTlpYUmhJRzlpYW1WamRGeHVJQ0FnS2lCQWNHRnlZVzBnZTFSeVlXNXpZV04wYVc5dVRXVjBZVTFsZEhKcFkzTkZkbVZ1ZEgwZ1pYWmxiblFnTFNCMGFHVWdibUZ0WlNCdlppQjBhR1VnZEhKaGJuTmhZM1JwYjI0Z1pYWmxiblJjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHRmpkR2x2Ymtsa0lDMGdZV04wYVc5dVNXUWdjR0Z6YzJWa0lHWnliMjBnVlVsY2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJR1Y0ZEhKaFVHRnlZVzF6SUMwZ2IzQjBhVzl1WVd3Z2NISnZjSE1nWVc1a0lIWmhiSFZsY3lCMGJ5QnBibU5zZFdSbElHbHVJSE5sYm5OcGRHbDJaVkJ5YjNCbGNuUnBaWE5jYmlBZ0lDb3ZYRzRnSUdGemVXNWpJRjkwY21GamExUnlZVzV6WVdOMGFXOXVUV1YwY21samMwVjJaVzUwS0Z4dUlDQWdJSFI0VFdWMFlTeGNiaUFnSUNCbGRtVnVkQ3hjYmlBZ0lDQmhZM1JwYjI1SlpDeGNiaUFnSUNCbGVIUnlZVkJoY21GdGN5QTlJSHQ5TEZ4dUlDQXBJSHRjYmlBZ0lDQnBaaUFvSVhSNFRXVjBZU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0I3SUhCeWIzQmxjblJwWlhNc0lITmxibk5wZEdsMlpWQnliM0JsY25ScFpYTWdmU0E5WEc0Z0lDQWdJQ0JoZDJGcGRDQjBhR2x6TGw5aWRXbHNaRVYyWlc1MFJuSmhaMjFsYm5SUWNtOXdaWEowYVdWektIUjRUV1YwWVN3Z1pYaDBjbUZRWVhKaGJYTXBPMXh1WEc0Z0lDQWdMeThnUTNKbFlYUmxJR1YyWlc1MElHWnlZV2R0Wlc1MGN5Qm1iM0lnWlhabGJuUWdkSGx3WlhNZ2RHaGhkQ0J6Y0dGM2JpQm1jbUZuYldWdWRITXNJR0Z1WkNCbGJuTjFjbVZjYmlBZ0lDQXZMeUJsZUdsemRHVnVZMlVnYjJZZ1puSmhaMjFsYm5SeklHWnZjaUJsZG1WdWRDQjBlWEJsY3lCMGFHRjBJR0ZqZENCMWNHOXVJSFJvWlcwdVhHNGdJQ0FnZEdocGN5NWZZM0psWVhSbFZISmhibk5oWTNScGIyNUZkbVZ1ZEVaeVlXZHRaVzUwS0Z4dUlDQWdJQ0FnZEhoTlpYUmhMRnh1SUNBZ0lDQWdaWFpsYm5Rc1hHNGdJQ0FnSUNCd2NtOXdaWEowYVdWekxGeHVJQ0FnSUNBZ2MyVnVjMmwwYVhabFVISnZjR1Z5ZEdsbGN5eGNiaUFnSUNBZ0lHRmpkR2x2Ymtsa0xGeHVJQ0FnSUNrN1hHNWNiaUFnSUNCc1pYUWdhV1E3WEc1Y2JpQWdJQ0J6ZDJsMFkyZ2dLR1YyWlc1MEtTQjdYRzRnSUNBZ0lDQXZMeUJKWmlCMGFHVWdkWE5sY2lCaGNIQnliM1psY3lCaElIUnlZVzV6WVdOMGFXOXVMQ0JtYVc1aGJHbDZaU0IwYUdVZ2RISmhibk5oWTNScGIyNGdZV1JrWldSY2JpQWdJQ0FnSUM4dklHVjJaVzUwSUdaeVlXZHRaVzUwTGx4dUlDQWdJQ0FnWTJGelpTQlVjbUZ1YzJGamRHbHZiazFsZEdGTlpYUnlhV056UlhabGJuUXVZWEJ3Y205MlpXUTZYRzRnSUNBZ0lDQWdJR2xrSUQwZ1lIUnlZVzV6WVdOMGFXOXVMV0ZrWkdWa0xTUjdkSGhOWlhSaExtbGtmV0E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFJYWmxiblJHY21GbmJXVnVkQ2hwWkN3Z2V5QndjbTl3WlhKMGFXVnpMQ0J6Wlc1emFYUnBkbVZRY205d1pYSjBhV1Z6SUgwcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1acGJtRnNhWHBsUlhabGJuUkdjbUZuYldWdWRDaHBaQ2s3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdMeThnU1dZZ2RHaGxJSFZ6WlhJZ2NtVnFaV04wY3lCaElIUnlZVzV6WVdOMGFXOXVMQ0JtYVc1aGJHbDZaU0IwYUdVZ2RISmhibk5oWTNScGIyNGdZV1JrWldSY2JpQWdJQ0FnSUM4dklHVjJaVzUwSUdaeVlXZHRaVzUwTGlCM2FYUm9JSFJvWlNCaFltRnVaRzl1WldRZ1pteGhaeUJ6WlhRdVhHNGdJQ0FnSUNCallYTmxJRlJ5WVc1ellXTjBhVzl1VFdWMFlVMWxkSEpwWTNORmRtVnVkQzV5WldwbFkzUmxaRHBjYmlBZ0lDQWdJQ0FnYVdRZ1BTQmdkSEpoYm5OaFkzUnBiMjR0WVdSa1pXUXRKSHQwZUUxbGRHRXVhV1I5WUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVkZkbVZ1ZEVaeVlXZHRaVzUwS0dsa0xDQjdJSEJ5YjNCbGNuUnBaWE1zSUhObGJuTnBkR2wyWlZCeWIzQmxjblJwWlhNZ2ZTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVptbHVZV3hwZW1WRmRtVnVkRVp5WVdkdFpXNTBLR2xrTENCN1hHNGdJQ0FnSUNBZ0lDQWdZV0poYm1SdmJtVmtPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQXZMeUJYYUdWdUlHRWdkSEpoYm5OaFkzUnBiMjRnYVhNZ1ptbHVZV3hwZW1Wa0xDQmhiSE52SUdacGJtRnNhWHBsSUhSb1pTQjBjbUZ1YzJGamRHbHZibHh1SUNBZ0lDQWdMeThnYzNWaWJXbDBkR1ZrSUdWMlpXNTBJR1p5WVdkdFpXNTBMbHh1SUNBZ0lDQWdZMkZ6WlNCVWNtRnVjMkZqZEdsdmJrMWxkR0ZOWlhSeWFXTnpSWFpsYm5RdVptbHVZV3hwZW1Wa09seHVJQ0FnSUNBZ0lDQnBaQ0E5SUdCMGNtRnVjMkZqZEdsdmJpMXpkV0p0YVhSMFpXUXRKSHQwZUUxbGRHRXVhV1I5WUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVkZkbVZ1ZEVaeVlXZHRaVzUwS0dsa0xDQjdJSEJ5YjNCbGNuUnBaWE1zSUhObGJuTnBkR2wyWlZCeWIzQmxjblJwWlhNZ2ZTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVptbHVZV3hwZW1WRmRtVnVkRVp5WVdkdFpXNTBLR0IwY21GdWMyRmpkR2x2YmkxemRXSnRhWFIwWldRdEpIdDBlRTFsZEdFdWFXUjlZQ2s3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1gyZGxkRlJ5WVc1ellXTjBhVzl1UTI5dGNHeGxkR2x2YmxScGJXVW9jM1ZpYldsMGRHVmtWR2x0WlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJOWVhSb0xuSnZkVzVrS0NoRVlYUmxMbTV2ZHlncElDMGdjM1ZpYldsMGRHVmtWR2x0WlNrZ0x5QXhNREF3S1M1MGIxTjBjbWx1WnlncE8xeHVJQ0I5WEc1Y2JpQWdYMmRsZEVkaGMxWmhiSFZsYzBsdVIxZEZTU2huWVhOUVlYSmhiWE1wSUh0Y2JpQWdJQ0JqYjI1emRDQm5ZWE5XWVd4MVpYTkpia2QzWldrZ1BTQjdmVHRjYmlBZ0lDQm1iM0lnS0dOdmJuTjBJSEJoY21GdElHbHVJR2RoYzFCaGNtRnRjeWtnZTF4dUlDQWdJQ0FnYVdZZ0tHbHpTR1Y0VTNSeWFXNW5LR2RoYzFCaGNtRnRjMXR3WVhKaGJWMHBLU0I3WEc0Z0lDQWdJQ0FnSUdkaGMxWmhiSFZsYzBsdVIzZGxhVnR3WVhKaGJWMGdQU0JvWlhoWFJVbFViMFJsWTBkWFJVa29aMkZ6VUdGeVlXMXpXM0JoY21GdFhTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQm5ZWE5XWVd4MVpYTkpia2QzWldsYmNHRnlZVzFkSUQwZ1oyRnpVR0Z5WVcxelczQmhjbUZ0WFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHZGhjMVpoYkhWbGMwbHVSM2RsYVR0Y2JpQWdmVnh1WEc0Z0lGOW1ZV2xzVkhKaGJuTmhZM1JwYjI0b2RIaEpaQ3dnWlhKeWIzSXNJR0ZqZEdsdmJrbGtLU0I3WEc0Z0lDQWdkR2hwY3k1MGVGTjBZWFJsVFdGdVlXZGxjaTV6WlhSVWVGTjBZWFIxYzBaaGFXeGxaQ2gwZUVsa0xDQmxjbkp2Y2lrN1hHNGdJQ0FnWTI5dWMzUWdkSGhOWlhSaElEMGdkR2hwY3k1MGVGTjBZWFJsVFdGdVlXZGxjaTVuWlhSVWNtRnVjMkZqZEdsdmJpaDBlRWxrS1R0Y2JpQWdJQ0IwYUdsekxsOTBjbUZqYTFSeVlXNXpZV04wYVc5dVRXVjBjbWxqYzBWMlpXNTBLRnh1SUNBZ0lDQWdkSGhOWlhSaExGeHVJQ0FnSUNBZ1ZISmhibk5oWTNScGIyNU5aWFJoVFdWMGNtbGpjMFYyWlc1MExtWnBibUZzYVhwbFpDeGNiaUFnSUNBZ0lHRmpkR2x2Ymtsa0xGeHVJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQmxjbkp2Y2pvZ1pYSnliM0l1YldWemMyRm5aU3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVYRzRnSUY5a2NtOXdWSEpoYm5OaFkzUnBiMjRvZEhoSlpDa2dlMXh1SUNBZ0lIUm9hWE11ZEhoVGRHRjBaVTFoYm1GblpYSXVjMlYwVkhoVGRHRjBkWE5FY205d2NHVmtLSFI0U1dRcE8xeHVJQ0FnSUdOdmJuTjBJSFI0VFdWMFlTQTlJSFJvYVhNdWRIaFRkR0YwWlUxaGJtRm5aWEl1WjJWMFZISmhibk5oWTNScGIyNG9kSGhKWkNrN1hHNGdJQ0FnZEdocGN5NWZkSEpoWTJ0VWNtRnVjMkZqZEdsdmJrMWxkSEpwWTNORmRtVnVkQ2hjYmlBZ0lDQWdJSFI0VFdWMFlTeGNiaUFnSUNBZ0lGUnlZVzV6WVdOMGFXOXVUV1YwWVUxbGRISnBZM05GZG1WdWRDNW1hVzVoYkdsNlpXUXNYRzRnSUNBZ0lDQjFibVJsWm1sdVpXUXNYRzRnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJR1J5YjNCd1pXUTZJSFJ5ZFdVc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNrN1hHNGdJSDFjYmx4dUlDQmhjM2x1WXlCZmNtVnhkV1Z6ZEVGd2NISnZkbUZzS0Z4dUlDQWdJSFI0VFdWMFlTeGNiaUFnSUNCN0lITm9iM1ZzWkZOb2IzZFNaWEYxWlhOMElIMGdQU0I3SUhOb2IzVnNaRk5vYjNkU1pYRjFaWE4wT2lCMGNuVmxJSDBzWEc0Z0lDa2dlMXh1SUNBZ0lHTnZibk4wSUdsa0lEMGdkR2hwY3k1ZloyVjBRWEJ3Y205MllXeEpaQ2gwZUUxbGRHRXBPMXh1SUNBZ0lHTnZibk4wSUhzZ2IzSnBaMmx1SUgwZ1BTQjBlRTFsZEdFN1hHNGdJQ0FnWTI5dWMzUWdkSGx3WlNBOUlFRndjSEp2ZG1Gc1ZIbHdaUzVVY21GdWMyRmpkR2x2Ymp0Y2JpQWdJQ0JqYjI1emRDQnlaWEYxWlhOMFJHRjBZU0E5SUhzZ2RIaEpaRG9nZEhoTlpYUmhMbWxrSUgwN1hHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXRaWE56WVdkcGJtZFRlWE4wWlcxY2JpQWdJQ0FnSUM1allXeHNLRnh1SUNBZ0lDQWdJQ0FuUVhCd2NtOTJZV3hEYjI1MGNtOXNiR1Z5T21Ga1pGSmxjWFZsYzNRbkxGeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnYVdRc1hHNGdJQ0FnSUNBZ0lDQWdiM0pwWjJsdUxGeHVJQ0FnSUNBZ0lDQWdJSFI1Y0dVc1hHNGdJQ0FnSUNBZ0lDQWdjbVZ4ZFdWemRFUmhkR0VzWEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lITm9iM1ZzWkZOb2IzZFNaWEYxWlhOMExGeHVJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0xtTmhkR05vS0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1NXNTBaVzUwYVc5dVlXeHNlU0JwWjI1dmNtVmtJR0Z6SUhCeWIyMXBjMlVnYm05MElHTjFjbkpsYm5Sc2VTQjFjMlZrWEc0Z0lDQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lGOWhZMk5sY0hSQmNIQnliM1poYkNoMGVFMWxkR0VwSUh0Y2JpQWdJQ0JqYjI1emRDQnBaQ0E5SUhSb2FYTXVYMmRsZEVGd2NISnZkbUZzU1dRb2RIaE5aWFJoS1R0Y2JseHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQjBhR2x6TG0xbGMzTmhaMmx1WjFONWMzUmxiUzVqWVd4c0tDZEJjSEJ5YjNaaGJFTnZiblJ5YjJ4c1pYSTZZV05qWlhCMFVtVnhkV1Z6ZENjc0lHbGtLVHRjYmlBZ0lDQjlJR05oZEdOb0lDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ2JHOW5MbVZ5Y205eUtDZEdZV2xzWldRZ2RHOGdZV05qWlhCMElIUnlZVzV6WVdOMGFXOXVJR0Z3Y0hKdmRtRnNJSEpsY1hWbGMzUW5MQ0JsY25KdmNpazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdYM0psYW1WamRFRndjSEp2ZG1Gc0tIUjRUV1YwWVNrZ2UxeHVJQ0FnSUdOdmJuTjBJR2xrSUQwZ2RHaHBjeTVmWjJWMFFYQndjbTkyWVd4SlpDaDBlRTFsZEdFcE8xeHVYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJSFJvYVhNdWJXVnpjMkZuYVc1blUzbHpkR1Z0TG1OaGJHd29YRzRnSUNBZ0lDQWdJQ2RCY0hCeWIzWmhiRU52Ym5SeWIyeHNaWEk2Y21WcVpXTjBVbVZ4ZFdWemRDY3NYRzRnSUNBZ0lDQWdJR2xrTEZ4dUlDQWdJQ0FnSUNCdVpYY2dSWEp5YjNJb0oxSmxhbVZqZEdWa0p5a3NYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMGdZMkYwWTJnZ0tHVnljbTl5S1NCN1hHNGdJQ0FnSUNCc2IyY3VaWEp5YjNJb0owWmhhV3hsWkNCMGJ5QnlaV3BsWTNRZ2RISmhibk5oWTNScGIyNGdZWEJ3Y205MllXd2djbVZ4ZFdWemRDY3NJR1Z5Y205eUtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQmZaMlYwUVhCd2NtOTJZV3hKWkNoMGVFMWxkR0VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdVM1J5YVc1bktIUjRUV1YwWVM1cFpDazdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0JxYzI5dVJHbG1abVZ5SUdaeWIyMGdKMlpoYzNRdGFuTnZiaTF3WVhSamFDYzdYRzVwYlhCdmNuUWdleUJqYkc5dVpVUmxaWEFnZlNCbWNtOXRJQ2RzYjJSaGMyZ25PMXh1WEc0dktpcGNiaUFxSUdOdmJuWmxjblJ6SUc1dmJpMXBibWwwYVdGc0lHaHBjM1J2Y25rZ1pXNTBjbWxsY3lCcGJuUnZJR1JwWm1aelhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWDBnYkc5dVowaHBjM1J2Y25sY2JpQXFJRUJ5WlhSMWNtNXpJSHRCY25KaGVYMWNiaUFxTDF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUcxcFozSmhkR1ZHY205dFUyNWhjSE5vYjNSelZHOUVhV1ptY3loc2IyNW5TR2x6ZEc5eWVTa2dlMXh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJR3h2Ym1kSWFYTjBiM0o1WEc0Z0lDQWdJQ0F2THlCamIyNTJaWEowSUc1dmJpMXBibWwwYVdGc0lHaHBjM1J2Y25rZ1pXNTBjbWxsY3lCcGJuUnZJR1JwWm1aelhHNGdJQ0FnSUNBdWJXRndLQ2hsYm5SeWVTd2dhVzVrWlhncElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHVaR1Y0SUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWdWRISjVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJuWlc1bGNtRjBaVWhwYzNSdmNubEZiblJ5ZVNoc2IyNW5TR2x6ZEc5eWVWdHBibVJsZUNBdElERmRMQ0JsYm5SeWVTazdYRzRnSUNBZ0lDQjlLVnh1SUNBcE8xeHVmVnh1WEc0dktpcGNiaUFxSUVkbGJtVnlZWFJsY3lCaGJpQmhjbkpoZVNCdlppQm9hWE4wYjNKNUlHOWlhbVZqZEhNZ2MyVnVjMlVnZEdobElIQnlaWFpwYjNWeklITjBZWFJsTGx4dUlDb2dWR2hsSUc5aWFtVmpkQ0JvWVhNZ2RHaGxJR3RsZVhOY2JpQXFJRzl3SUNoMGFHVWdiM0JsY21GMGFXOXVJSEJsY21admNtMWxaQ2tzWEc0Z0tpQndZWFJvSUNoMGFHVWdhMlY1SUdGdVpDQnBaaUJoSUc1bGMzUmxaQ0J2WW1wbFkzUWdkR2hsYmlCbFlXTm9JR3RsZVNCM2FXeHNJR0psSUhObGNHRnlZWFJsWkNCM2FYUm9JR0VnWUM5Z0tWeHVJQ29nZG1Gc2RXVmNiaUFxSUhkcGRHZ2dkR2hsSUdacGNuTjBJR1Z1ZEhKNUlHaGhkbWx1WnlCMGFHVWdibTkwWlNCaGJtUWdZU0IwYVcxbGMzUmhiWEFnZDJobGJpQjBhR1VnWTJoaGJtZGxJSFJ2YjJzZ2NHeGhZMlZjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdjSEpsZG1sdmRYTlRkR0YwWlNBdElIUm9aU0J3Y21WMmFXOTFjeUJ6ZEdGMFpTQnZaaUIwYUdVZ2IySnFaV04wWEc0Z0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2JtVjNVM1JoZEdVZ0xTQjBhR1VnZFhCa1lYUmxJRzlpYW1WamRGeHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRnR1YjNSbFhTQXRJR0VnYjNCMGFXOXVZV3dnYm05MFpTQm1iM0lnZEdobElITjBZWFJsSUdOb1lXNW5aVnh1SUNvZ1FISmxkSFZ5Ym5NZ2UwRnljbUY1ZlZ4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaMlZ1WlhKaGRHVklhWE4wYjNKNVJXNTBjbmtvY0hKbGRtbHZkWE5UZEdGMFpTd2dibVYzVTNSaGRHVXNJRzV2ZEdVcElIdGNiaUFnWTI5dWMzUWdaVzUwY25rZ1BTQnFjMjl1UkdsbVptVnlMbU52YlhCaGNtVW9jSEpsZG1sdmRYTlRkR0YwWlN3Z2JtVjNVM1JoZEdVcE8xeHVJQ0F2THlCQlpHUWdZU0J1YjNSbElIUnZJSFJvWlNCbWFYSnpkQ0J2Y0N3Z2MybHVZMlVnYVhRZ1luSmxZV3R6SUdsbUlIZGxJR0Z3Y0dWdVpDQnBkQ0IwYnlCMGFHVWdaVzUwY25sY2JpQWdhV1lnS0dWdWRISjVXekJkS1NCN1hHNGdJQ0FnYVdZZ0tHNXZkR1VwSUh0Y2JpQWdJQ0FnSUdWdWRISjVXekJkTG01dmRHVWdQU0J1YjNSbE8xeHVJQ0FnSUgxY2JpQWdJQ0JsYm5SeWVWc3dYUzUwYVcxbGMzUmhiWEFnUFNCRVlYUmxMbTV2ZHlncE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbGJuUnllVHRjYm4xY2JseHVMeW9xWEc0Z0tpQlNaV052ZG1WeWN5QndjbVYyYVc5MWN5QjBlRTFsZEdFZ2MzUmhkR1VnYjJKcVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUY5emFHOXlkRWhwYzNSdmNubGNiaUFxSUVCeVpYUjFjbTV6SUh0dlltcGxZM1I5WEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnlaWEJzWVhsSWFYTjBiM0o1S0Y5emFHOXlkRWhwYzNSdmNua3BJSHRjYmlBZ1kyOXVjM1FnYzJodmNuUklhWE4wYjNKNUlEMGdZMnh2Ym1WRVpXVndLRjl6YUc5eWRFaHBjM1J2Y25rcE8xeHVJQ0J5WlhSMWNtNGdjMmh2Y25SSWFYTjBiM0o1TG5KbFpIVmpaU2hjYmlBZ0lDQW9kbUZzTENCbGJuUnllU2tnUFQ0Z2FuTnZia1JwWm1abGNpNWhjSEJzZVZCaGRHTm9LSFpoYkN3Z1pXNTBjbmtwTG01bGQwUnZZM1Z0Wlc1MExGeHVJQ0FwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRk51WVhCemFHOTBJSHRBWTI5a1pTQjBlRTFsZEdGOVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhSNFRXVjBZU0F0SUhSb1pTQjBlQ0J0WlhSaFpHRjBZU0J2WW1wbFkzUmNiaUFxSUVCeVpYUjFjbTV6SUh0dlltcGxZM1I5SUdFZ1pHVmxjQ0JqYkc5dVpTQjNhWFJvYjNWMElHaHBjM1J2Y25sY2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSE51WVhCemFHOTBSbkp2YlZSNFRXVjBZU2gwZUUxbGRHRXBJSHRjYmlBZ1kyOXVjM1FnYzJoaGJHeHZkeUE5SUhzZ0xpNHVkSGhOWlhSaElIMDdYRzRnSUdSbGJHVjBaU0J6YUdGc2JHOTNMbWhwYzNSdmNuazdYRzRnSUhKbGRIVnliaUJqYkc5dVpVUmxaWEFvYzJoaGJHeHZkeWs3WEc1OVhHNGlMQ0pwYlhCdmNuUWdleUJsZEdoRmNuSnZjbk1nZlNCbWNtOXRJQ2RsZEdndGNuQmpMV1Z5Y205eWN5YzdYRzVwYlhCdmNuUWdleUJKYm5SbGNtWmhZMlVnZlNCbWNtOXRJQ2RBWlhSb1pYSnpjSEp2YW1WamRDOWhZbWtuTzF4dWFXMXdiM0owSUdGaWFTQm1jbTl0SUNkb2RXMWhiaTF6ZEdGdVpHRnlaQzEwYjJ0bGJpMWhZbWtuTzF4dWFXMXdiM0owSUhzZ1lXUmtTR1Y0VUhKbFptbDRJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZiR2xpTDNWMGFXd25PMXh1YVcxd2IzSjBJSHRjYmlBZ1ZISmhibk5oWTNScGIyNUZiblpsYkc5d1pWUjVjR1VzWEc0Z0lGUnlZVzV6WVdOMGFXOXVVM1JoZEhWekxGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2WTI5dWMzUmhiblJ6TDNSeVlXNXpZV04wYVc5dUp6dGNibWx0Y0c5eWRDQjdJR2x6UlVsUU1UVTFPVlJ5WVc1ellXTjBhVzl1SUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyMXZaSFZzWlhNdmRISmhibk5oWTNScGIyNHVkWFJwYkhNbk8xeHVhVzF3YjNKMElIc2dhWE5XWVd4cFpFaGxlRUZrWkhKbGMzTWdmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2Ylc5a2RXeGxjeTlvWlhoemRISnBibWN0ZFhScGJITW5PMXh1WEc1amIyNXpkQ0J1YjNKdFlXeHBlbVZ5Y3lBOUlIdGNiaUFnWm5KdmJUb2dZV1JrU0dWNFVISmxabWw0TEZ4dUlDQjBiem9nS0hSdkxDQnNiM2RsY2tOaGMyVXBJRDArWEc0Z0lDQWdiRzkzWlhKRFlYTmxJRDhnWVdSa1NHVjRVSEpsWm1sNEtIUnZLUzUwYjB4dmQyVnlRMkZ6WlNncElEb2dZV1JrU0dWNFVISmxabWw0S0hSdktTeGNiaUFnYm05dVkyVTZJR0ZrWkVobGVGQnlaV1pwZUN4Y2JpQWdkbUZzZFdVNklHRmtaRWhsZUZCeVpXWnBlQ3hjYmlBZ1pHRjBZVG9nWVdSa1NHVjRVSEpsWm1sNExGeHVJQ0JuWVhNNklHRmtaRWhsZUZCeVpXWnBlQ3hjYmlBZ1oyRnpVSEpwWTJVNklHRmtaRWhsZUZCeVpXWnBlQ3hjYmlBZ2JXRjRSbVZsVUdWeVIyRnpPaUJoWkdSSVpYaFFjbVZtYVhnc1hHNGdJRzFoZUZCeWFXOXlhWFI1Um1WbFVHVnlSMkZ6T2lCaFpHUklaWGhRY21WbWFYZ3NYRzRnSUhSNWNHVTZJR0ZrWkVobGVGQnlaV1pwZUN4Y2JpQWdaWE4wYVcxaGRHVlRkV2RuWlhOMFpXUTZJQ2hsYzNScGJXRjBaU2tnUFQ0Z1pYTjBhVzFoZEdVc1hHNGdJR1Z6ZEdsdFlYUmxWWE5sWkRvZ0tHVnpkR2x0WVhSbEtTQTlQaUJsYzNScGJXRjBaU3hjYm4wN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnViM0p0WVd4cGVtVkJibVJXWVd4cFpHRjBaVlI0VUdGeVlXMXpLSFI0VUdGeVlXMXpMQ0JzYjNkbGNrTmhjMlVnUFNCMGNuVmxLU0I3WEc0Z0lHTnZibk4wSUc1dmNtMWhiR2w2WldSVWVGQmhjbUZ0Y3lBOUlHNXZjbTFoYkdsNlpWUjRVR0Z5WVcxektIUjRVR0Z5WVcxekxDQnNiM2RsY2tOaGMyVXBPMXh1SUNCMllXeHBaR0YwWlZSNFVHRnlZVzF6S0c1dmNtMWhiR2w2WldSVWVGQmhjbUZ0Y3lrN1hHNGdJSEpsZEhWeWJpQnViM0p0WVd4cGVtVmtWSGhRWVhKaGJYTTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1RtOXliV0ZzYVhwbGN5QjBhR1VnWjJsMlpXNGdkSGhRWVhKaGJYTmNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2RIaFFZWEpoYlhNZ0xTQlVhR1VnZEhKaGJuTmhZM1JwYjI0Z2NHRnlZVzF6WEc0Z0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1OUlGdHNiM2RsY2tOaGMyVmRJQzBnVjJobGRHaGxjaUIwYnlCc2IzZGxjbU5oYzJVZ2RHaGxJQ2QwYnljZ1lXUmtjbVZ6Y3k1Y2JpQXFJRVJsWm1GMWJIUTZJSFJ5ZFdWY2JpQXFJRUJ5WlhSMWNtNXpJSHR2WW1wbFkzUjlJSFJvWlNCdWIzSnRZV3hwZW1Wa0lIUjRJSEJoY21GdGMxeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYm05eWJXRnNhWHBsVkhoUVlYSmhiWE1vZEhoUVlYSmhiWE1zSUd4dmQyVnlRMkZ6WlNBOUlIUnlkV1VwSUh0Y2JpQWdMeThnWVhCd2JIa2diMjVzZVNCclpYbHpJR2x1SUhSb1pTQnViM0p0WVd4cGVtVnljMXh1SUNCamIyNXpkQ0J1YjNKdFlXeHBlbVZrVkhoUVlYSmhiWE1nUFNCN2ZUdGNiaUFnWm05eUlDaGpiMjV6ZENCclpYa2dhVzRnYm05eWJXRnNhWHBsY25NcElIdGNiaUFnSUNCcFppQW9kSGhRWVhKaGJYTmJhMlY1WFNrZ2UxeHVJQ0FnSUNBZ2JtOXliV0ZzYVhwbFpGUjRVR0Z5WVcxelcydGxlVjBnUFNCdWIzSnRZV3hwZW1WeWMxdHJaWGxkS0hSNFVHRnlZVzF6VzJ0bGVWMHNJR3h2ZDJWeVEyRnpaU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnViM0p0WVd4cGVtVmtWSGhRWVhKaGJYTTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1IybDJaVzRnZEhkdklHWnBaV3hrY3l3Z1pXNXpkWEpsSUhSb1lYUWdkR2hsSUhObFkyOXVaQ0JtYVdWc1pDQnBjeUJ1YjNRZ2FXNWpiSFZrWldRZ2FXNGdkSGhRWVhKaGJYTXNYRzRnS2lCaGJtUWdhV1lnYVhRZ2FYTWdkR2h5YjNjZ1lXNGdhVzUyWVd4cFpGQmhjbUZ0Y3lCbGNuSnZjaTVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdkSGhRWVhKaGJYTWdMU0IwYUdVZ2RISmhibk5oWTNScGIyNGdjR0Z5WVcxbGRHVnljeUJ2WW1wbFkzUmNiaUFxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JtYVdWc1pFSmxhVzVuVm1Gc2FXUmhkR1ZrSUMwZ2RHaGxJR04xY25KbGJuUWdabWxsYkdRZ1ltVnBibWNnZG1Gc2FXUmhkR1ZrWEc0Z0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JYVjBkV0ZzYkhsRmVHTnNkWE5wZG1WR2FXVnNaQ0F0SUhSb1pTQm1hV1ZzWkNCMGJ5Qmxibk4xY21VZ2FYTWdibTkwSUhCeWIzWnBaR1ZrWEc0Z0tpQkFkR2h5YjNkeklIdGxkR2hGY25KdmNuTXVjbkJqTG1sdWRtRnNhV1JRWVhKaGJYTjlJRlJvY205M2N5QnBaaUJ0ZFhSMVlXeHNlVVY0WTJ4MWMybDJaVVpwWld4a0lHbHpYRzRnS2lBZ2NISmxjMlZ1ZENCcGJpQjBlRkJoY21GdGN5NWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1pXNXpkWEpsVFhWMGRXRnNiSGxGZUdOc2RYTnBkbVZHYVdWc1pITk9iM1JRY205MmFXUmxaQ2hjYmlBZ2RIaFFZWEpoYlhNc1hHNGdJR1pwWld4a1FtVnBibWRXWVd4cFpHRjBaV1FzWEc0Z0lHMTFkSFZoYkd4NVJYaGpiSFZ6YVhabFJtbGxiR1FzWEc0cElIdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCMGVGQmhjbUZ0YzF0dGRYUjFZV3hzZVVWNFkyeDFjMmwyWlVacFpXeGtYU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQjBhSEp2ZHlCbGRHaEZjbkp2Y25NdWNuQmpMbWx1ZG1Gc2FXUlFZWEpoYlhNb1hHNGdJQ0FnSUNCZ1NXNTJZV3hwWkNCMGNtRnVjMkZqZEdsdmJpQndZWEpoYlhNNklITndaV05wWm1sbFpDQWtlMlpwWld4a1FtVnBibWRXWVd4cFpHRjBaV1I5SUdKMWRDQmhiSE52SUdsdVkyeDFaR1ZrSUNSN2JYVjBkV0ZzYkhsRmVHTnNkWE5wZG1WR2FXVnNaSDBzSUhSb1pYTmxJR05oYm01dmRDQmlaU0J0YVhobFpHQXNYRzRnSUNBZ0tUdGNiaUFnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRVZ1YzNWeVpYTWdkR2hoZENCMGFHVWdjSEp2ZG1sa1pXUWdkbUZzZFdVZ1ptOXlJR1pwWld4a0lHbHpJR0VnYzNSeWFXNW5MQ0IwYUhKdmQzTWdZVzVjYmlBcUlHbHVkbUZzYVdSUVlYSmhiWE1nWlhKeWIzSWdhV1lnWm1sbGJHUWdhWE1nYm05MElHRWdjM1J5YVc1bkxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCMGVGQmhjbUZ0Y3lBdElIUm9aU0IwY21GdWMyRmpkR2x2YmlCd1lYSmhiV1YwWlhKeklHOWlhbVZqZEZ4dUlDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHWnBaV3hrSUMwZ2RHaGxJR04xY25KbGJuUWdabWxsYkdRZ1ltVnBibWNnZG1Gc2FXUmhkR1ZrWEc0Z0tpQkFkR2h5YjNkeklIdGxkR2hGY25KdmNuTXVjbkJqTG1sdWRtRnNhV1JRWVhKaGJYTjlJRlJvY205M2N5QnBaaUJtYVdWc1pDQnBjeUJ1YjNRZ1lTQnpkSEpwYm1kY2JpQXFMMXh1Wm5WdVkzUnBiMjRnWlc1emRYSmxSbWxsYkdSSmMxTjBjbWx1WnloMGVGQmhjbUZ0Y3l3Z1ptbGxiR1FwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUIwZUZCaGNtRnRjMXRtYVdWc1pGMGdJVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnZEdoeWIzY2daWFJvUlhKeWIzSnpMbkp3WXk1cGJuWmhiR2xrVUdGeVlXMXpLRnh1SUNBZ0lDQWdZRWx1ZG1Gc2FXUWdkSEpoYm5OaFkzUnBiMjRnY0dGeVlXMXpPaUFrZTJacFpXeGtmU0JwY3lCdWIzUWdZU0J6ZEhKcGJtY3VJR2R2ZERvZ0tDUjdkSGhRWVhKaGJYTmJabWxsYkdSZGZTbGdMRnh1SUNBZ0lDazdYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJGYm5OMWNtVnpJSFJvWVhRZ2RHaGxJSEJ5YjNacFpHVmtJSFI0VUdGeVlXMXpJR2hoY3lCMGFHVWdjSEp2Y0dWeUlDZDBlWEJsSnlCemNHVmphV1pwWldRZ1ptOXlJSFJvWlZ4dUlDb2daMmwyWlc0Z1ptbGxiR1FzSUdsbUlHbDBJR2x6SUhCeWIzWnBaR1ZrTGlCSlppQjBlWEJsY3lCa2J5QnViM1FnYldGMFkyZ2dkR2h5YjNkeklHRnVYRzRnS2lCcGJuWmhiR2xrVUdGeVlXMXpJR1Z5Y205eUxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCMGVGQmhjbUZ0Y3lBdElIUm9aU0IwY21GdWMyRmpkR2x2YmlCd1lYSmhiV1YwWlhKeklHOWlhbVZqZEZ4dUlDb2dRSEJoY21GdElIc25aMkZ6VUhKcFkyVW5JSHdnSjIxaGVFWmxaVkJsY2tkaGN5Y2dmQ0FuYldGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhNbmZTQm1hV1ZzWkNBdElIUm9aVnh1SUNvZ0lHTjFjbkpsYm5RZ1ptbGxiR1FnWW1WcGJtY2dkbUZzYVdSaGRHVmtYRzRnS2lCQWRHaHliM2R6SUh0bGRHaEZjbkp2Y25NdWNuQmpMbWx1ZG1Gc2FXUlFZWEpoYlhOOUlGUm9jbTkzY3lCcFppQjBlWEJsSUdSdlpYTWdibTkwSUcxaGRHTm9JSFJvWlZ4dUlDb2dJR1Y0Y0dWamRHRjBhVzl1Y3lCbWIzSWdjSEp2ZG1sa1pXUWdabWxsYkdRdVhHNGdLaTljYm1aMWJtTjBhVzl1SUdWdWMzVnlaVkJ5YjNCbGNsUnlZVzV6WVdOMGFXOXVSVzUyWld4dmNHVlVlWEJsVUhKdmRtbGtaV1FvZEhoUVlYSmhiWE1zSUdacFpXeGtLU0I3WEc0Z0lITjNhWFJqYUNBb1ptbGxiR1FwSUh0Y2JpQWdJQ0JqWVhObElDZHRZWGhHWldWUVpYSkhZWE1uT2x4dUlDQWdJR05oYzJVZ0oyMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpKenBjYmlBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ2RIaFFZWEpoYlhNdWRIbHdaU0FtSmx4dUlDQWdJQ0FnSUNCMGVGQmhjbUZ0Y3k1MGVYQmxJQ0U5UFNCVWNtRnVjMkZqZEdsdmJrVnVkbVZzYjNCbFZIbHdaUzVtWldWTllYSnJaWFJjYmlBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJsZEdoRmNuSnZjbk11Y25CakxtbHVkbUZzYVdSUVlYSmhiWE1vWEc0Z0lDQWdJQ0FnSUNBZ1lFbHVkbUZzYVdRZ2RISmhibk5oWTNScGIyNGdaVzUyWld4dmNHVWdkSGx3WlRvZ2MzQmxZMmxtYVdWa0lIUjVjR1VnWENJa2UzUjRVR0Z5WVcxekxuUjVjR1Y5WENJZ1luVjBJR2x1WTJ4MVpHbHVaeUJ0WVhoR1pXVlFaWEpIWVhNZ1lXNWtJRzFoZUZCeWFXOXlhWFI1Um1WbFVHVnlSMkZ6SUhKbGNYVnBjbVZ6SUhSNWNHVTZJRndpSkh0VWNtRnVjMkZqZEdsdmJrVnVkbVZzYjNCbFZIbHdaUzVtWldWTllYSnJaWFI5WENKZ0xGeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnWTJGelpTQW5aMkZ6VUhKcFkyVW5PbHh1SUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJSFI0VUdGeVlXMXpMblI1Y0dVZ0ppWmNiaUFnSUNBZ0lDQWdkSGhRWVhKaGJYTXVkSGx3WlNBOVBUMGdWSEpoYm5OaFkzUnBiMjVGYm5abGJHOXdaVlI1Y0dVdVptVmxUV0Z5YTJWMFhHNGdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ1pYUm9SWEp5YjNKekxuSndZeTVwYm5aaGJHbGtVR0Z5WVcxektGeHVJQ0FnSUNBZ0lDQWdJR0JKYm5aaGJHbGtJSFJ5WVc1ellXTjBhVzl1SUdWdWRtVnNiM0JsSUhSNWNHVTZJSE53WldOcFptbGxaQ0IwZVhCbElGd2lKSHQwZUZCaGNtRnRjeTUwZVhCbGZWd2lJR0oxZENCcGJtTnNkV1JsWkNCaElHZGhjMUJ5YVdObElHbHVjM1JsWVdRZ2IyWWdiV0Y0Um1WbFVHVnlSMkZ6SUdGdVpDQnRZWGhRY21sdmNtbDBlVVpsWlZCbGNrZGhjMkFzWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQldZV3hwWkdGMFpYTWdkR2hsSUdkcGRtVnVJSFI0SUhCaGNtRnRaWFJsY25OY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnZEhoUVlYSmhiWE1nTFNCMGFHVWdkSGdnY0dGeVlXMXpYRzRnS2lCQWNHRnlZVzBnZTJKdmIyeGxZVzU5SUdWcGNERTFOVGxEYjIxd1lYUnBZbWxzYVhSNUlDMGdkMmhsZEdobGNpQnZjaUJ1YjNRZ2RHaGxJR04xY25KbGJuUWdibVYwZDI5eWF5QnpkWEJ3YjNKMGN5QkZTVkF0TVRVMU9TQjBjbUZ1YzJGamRHbHZibk5jYmlBcUlFQjBhSEp2ZDNNZ2UwVnljbTl5ZlNCcFppQjBhR1VnZEhnZ2NHRnlZVzF6SUdOdmJuUmhhVzV6SUdsdWRtRnNhV1FnWm1sbGJHUnpYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCMllXeHBaR0YwWlZSNFVHRnlZVzF6S0hSNFVHRnlZVzF6TENCbGFYQXhOVFU1UTI5dGNHRjBhV0pwYkdsMGVTQTlJSFJ5ZFdVcElIdGNiaUFnYVdZZ0tDRjBlRkJoY21GdGN5QjhmQ0IwZVhCbGIyWWdkSGhRWVhKaGJYTWdJVDA5SUNkdlltcGxZM1FuSUh4OElFRnljbUY1TG1selFYSnlZWGtvZEhoUVlYSmhiWE1wS1NCN1hHNGdJQ0FnZEdoeWIzY2daWFJvUlhKeWIzSnpMbkp3WXk1cGJuWmhiR2xrVUdGeVlXMXpLRnh1SUNBZ0lDQWdKMGx1ZG1Gc2FXUWdkSEpoYm5OaFkzUnBiMjRnY0dGeVlXMXpPaUJ0ZFhOMElHSmxJR0Z1SUc5aWFtVmpkQzRuTEZ4dUlDQWdJQ2s3WEc0Z0lIMWNiaUFnYVdZZ0tDRjBlRkJoY21GdGN5NTBieUFtSmlBaGRIaFFZWEpoYlhNdVpHRjBZU2tnZTF4dUlDQWdJSFJvY205M0lHVjBhRVZ5Y205eWN5NXljR011YVc1MllXeHBaRkJoY21GdGN5aGNiaUFnSUNBZ0lDZEpiblpoYkdsa0lIUnlZVzV6WVdOMGFXOXVJSEJoY21GdGN6b2diWFZ6ZENCemNHVmphV1o1SUZ3aVpHRjBZVndpSUdadmNpQmpiMjUwY21GamRDQmtaWEJzYjNsdFpXNTBjeXdnYjNJZ1hDSjBiMXdpSUNoaGJtUWdiM0IwYVc5dVlXeHNlU0JjSW1SaGRHRmNJaWtnWm05eUlHRnNiQ0J2ZEdobGNpQjBlWEJsY3lCdlppQjBjbUZ1YzJGamRHbHZibk11Snl4Y2JpQWdJQ0FwTzF4dUlDQjlYRzRnSUdsbUlDaHBjMFZKVURFMU5UbFVjbUZ1YzJGamRHbHZiaWg3SUhSNFVHRnlZVzF6SUgwcElDWW1JQ0ZsYVhBeE5UVTVRMjl0Y0dGMGFXSnBiR2wwZVNrZ2UxeHVJQ0FnSUhSb2NtOTNJR1YwYUVWeWNtOXljeTV5Y0dNdWFXNTJZV3hwWkZCaGNtRnRjeWhjYmlBZ0lDQWdJQ2RKYm5aaGJHbGtJSFJ5WVc1ellXTjBhVzl1SUhCaGNtRnRjem9nY0dGeVlXMXpJSE53WldOcFpua2dZVzRnUlVsUUxURTFOVGtnZEhKaGJuTmhZM1JwYjI0Z1luVjBJSFJvWlNCamRYSnlaVzUwSUc1bGRIZHZjbXNnWkc5bGN5QnViM1FnYzNWd2NHOXlkQ0JGU1ZBdE1UVTFPU2NzWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVYRzRnSUU5aWFtVmpkQzVsYm5SeWFXVnpLSFI0VUdGeVlXMXpLUzVtYjNKRllXTm9LQ2hiYTJWNUxDQjJZV3gxWlYwcElEMCtJSHRjYmlBZ0lDQXZMeUIyWVd4cFpHRjBaU0IwZVhCbGMxeHVJQ0FnSUhOM2FYUmphQ0FvYTJWNUtTQjdYRzRnSUNBZ0lDQmpZWE5sSUNkbWNtOXRKenBjYmlBZ0lDQWdJQ0FnZG1Gc2FXUmhkR1ZHY205dEtIUjRVR0Z5WVcxektUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCallYTmxJQ2QwYnljNlhHNGdJQ0FnSUNBZ0lIWmhiR2xrWVhSbFVtVmphWEJwWlc1MEtIUjRVR0Z5WVcxektUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCallYTmxJQ2RuWVhOUWNtbGpaU2M2WEc0Z0lDQWdJQ0FnSUdWdWMzVnlaVkJ5YjNCbGNsUnlZVzV6WVdOMGFXOXVSVzUyWld4dmNHVlVlWEJsVUhKdmRtbGtaV1FvZEhoUVlYSmhiWE1zSUNkbllYTlFjbWxqWlNjcE8xeHVJQ0FnSUNBZ0lDQmxibk4xY21WTmRYUjFZV3hzZVVWNFkyeDFjMmwyWlVacFpXeGtjMDV2ZEZCeWIzWnBaR1ZrS0Z4dUlDQWdJQ0FnSUNBZ0lIUjRVR0Z5WVcxekxGeHVJQ0FnSUNBZ0lDQWdJQ2RuWVhOUWNtbGpaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0oyMWhlRVpsWlZCbGNrZGhjeWNzWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lHVnVjM1Z5WlUxMWRIVmhiR3g1UlhoamJIVnphWFpsUm1sbGJHUnpUbTkwVUhKdmRtbGtaV1FvWEc0Z0lDQWdJQ0FnSUNBZ2RIaFFZWEpoYlhNc1hHNGdJQ0FnSUNBZ0lDQWdKMmRoYzFCeWFXTmxKeXhjYmlBZ0lDQWdJQ0FnSUNBbmJXRjRVSEpwYjNKcGRIbEdaV1ZRWlhKSFlYTW5MRnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCbGJuTjFjbVZHYVdWc1pFbHpVM1J5YVc1bktIUjRVR0Z5WVcxekxDQW5aMkZ6VUhKcFkyVW5LVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmpZWE5sSUNkdFlYaEdaV1ZRWlhKSFlYTW5PbHh1SUNBZ0lDQWdJQ0JsYm5OMWNtVlFjbTl3WlhKVWNtRnVjMkZqZEdsdmJrVnVkbVZzYjNCbFZIbHdaVkJ5YjNacFpHVmtLSFI0VUdGeVlXMXpMQ0FuYldGNFJtVmxVR1Z5UjJGekp5azdYRzRnSUNBZ0lDQWdJR1Z1YzNWeVpVMTFkSFZoYkd4NVJYaGpiSFZ6YVhabFJtbGxiR1J6VG05MFVISnZkbWxrWldRb1hHNGdJQ0FnSUNBZ0lDQWdkSGhRWVhKaGJYTXNYRzRnSUNBZ0lDQWdJQ0FnSjIxaGVFWmxaVkJsY2tkaGN5Y3NYRzRnSUNBZ0lDQWdJQ0FnSjJkaGMxQnlhV05sSnl4Y2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdaVzV6ZFhKbFJtbGxiR1JKYzFOMGNtbHVaeWgwZUZCaGNtRnRjeXdnSjIxaGVFWmxaVkJsY2tkaGN5Y3BPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lHTmhjMlVnSjIxaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGekp6cGNiaUFnSUNBZ0lDQWdaVzV6ZFhKbFVISnZjR1Z5VkhKaGJuTmhZM1JwYjI1RmJuWmxiRzl3WlZSNWNHVlFjbTkyYVdSbFpDaGNiaUFnSUNBZ0lDQWdJQ0IwZUZCaGNtRnRjeXhjYmlBZ0lDQWdJQ0FnSUNBbmJXRjRVSEpwYjNKcGRIbEdaV1ZRWlhKSFlYTW5MRnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCbGJuTjFjbVZOZFhSMVlXeHNlVVY0WTJ4MWMybDJaVVpwWld4a2MwNXZkRkJ5YjNacFpHVmtLRnh1SUNBZ0lDQWdJQ0FnSUhSNFVHRnlZVzF6TEZ4dUlDQWdJQ0FnSUNBZ0lDZHRZWGhRY21sdmNtbDBlVVpsWlZCbGNrZGhjeWNzWEc0Z0lDQWdJQ0FnSUNBZ0oyZGhjMUJ5YVdObEp5eGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWlc1emRYSmxSbWxsYkdSSmMxTjBjbWx1WnloMGVGQmhjbUZ0Y3l3Z0oyMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpKeWs3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdZMkZ6WlNBbmRtRnNkV1VuT2x4dUlDQWdJQ0FnSUNCbGJuTjFjbVZHYVdWc1pFbHpVM1J5YVc1bktIUjRVR0Z5WVcxekxDQW5kbUZzZFdVbktUdGNiaUFnSUNBZ0lDQWdhV1lnS0haaGJIVmxMblJ2VTNSeWFXNW5LQ2t1YVc1amJIVmtaWE1vSnkwbktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2NtOTNJR1YwYUVWeWNtOXljeTV5Y0dNdWFXNTJZV3hwWkZCaGNtRnRjeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lHQkpiblpoYkdsa0lIUnlZVzV6WVdOMGFXOXVJSFpoYkhWbElGd2lKSHQyWVd4MVpYMWNJam9nYm05MElHRWdjRzl6YVhScGRtVWdiblZ0WW1WeUxtQXNYRzRnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMllXeDFaUzUwYjFOMGNtbHVaeWdwTG1sdVkyeDFaR1Z6S0NjdUp5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFISnZkeUJsZEdoRmNuSnZjbk11Y25CakxtbHVkbUZzYVdSUVlYSmhiWE1vWEc0Z0lDQWdJQ0FnSUNBZ0lDQmdTVzUyWVd4cFpDQjBjbUZ1YzJGamRHbHZiaUIyWVd4MVpTQnZaaUJjSWlSN2RtRnNkV1Y5WENJNklHNTFiV0psY2lCdGRYTjBJR0psSUdsdUlIZGxhUzVnTEZ4dUlDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9JWFpoYkhWbExtMWhkR05vS0M5ZU1IaGJZUzFtUVMxR01DMDVYU3NrTDNVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2daWFJvUlhKeWIzSnpMbkp3WXk1cGJuWmhiR2xrVUdGeVlXMXpLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lFbHVkbUZzYVdRZ2RISmhibk5oWTNScGIyNGdkbUZzZFdVZ2IyWWdYQ0lrZTNaaGJIVmxmVndpT2lCdWIzUWdZU0IyWVd4cFpDQm9aWGdnYzNSeWFXNW5MbUFzWEc0Z0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lHTmhjMlVnSjJOb1lXbHVTV1FuT2x4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIWmhiSFZsSUNFOVBTQW5iblZ0WW1WeUp5QW1KaUIwZVhCbGIyWWdkbUZzZFdVZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnWlhSb1JYSnliM0p6TG5Kd1l5NXBiblpoYkdsa1VHRnlZVzF6S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdZRWx1ZG1Gc2FXUWdkSEpoYm5OaFkzUnBiMjRnY0dGeVlXMXpPaUFrZTJ0bGVYMGdhWE1nYm05MElHRWdUblZ0WW1WeUlHOXlJR2hsZUNCemRISnBibWN1SUdkdmREb2dLQ1I3ZG1Gc2RXVjlLV0FzWEc0Z0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lHTmhjMlVnSjJSaGRHRW5PbHh1SUNBZ0lDQWdJQ0IyWVd4cFpHRjBaVWx1Y0hWMFJHRjBZU2gyWVd4MVpTazdYRzRnSUNBZ0lDQWdJR1Z1YzNWeVpVWnBaV3hrU1hOVGRISnBibWNvZEhoUVlYSmhiWE1zSUNka1lYUmhKeWs3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdaVzV6ZFhKbFJtbGxiR1JKYzFOMGNtbHVaeWgwZUZCaGNtRnRjeXdnYTJWNUtUdGNiaUFnSUNCOVhHNGdJSDBwTzF4dWZWeHVYRzR2S2lwY2JpQXFYRzRnS2lCQWNHRnlZVzBnZXlwOUlIWmhiSFZsWEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQjJZV3hwWkdGMFpVbHVjSFYwUkdGMFlTaDJZV3gxWlNrZ2UxeHVJQ0JwWmlBb2RtRnNkV1VnSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0F2THlCV1lXeHBaR0YwWlNCMGFHVWdhVzV3ZFhRZ1pHRjBZVnh1SUNBZ0lHTnZibk4wSUdoemRFbHVkR1Z5Wm1GalpTQTlJRzVsZHlCSmJuUmxjbVpoWTJVb1lXSnBLVHRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnYUhOMFNXNTBaWEptWVdObExuQmhjbk5sVkhKaGJuTmhZM1JwYjI0b2V5QmtZWFJoT2lCMllXeDFaU0I5S1R0Y2JpQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBdkx5QlVhSEp2ZHlCaGJpQnBiblpoYkdsa1VHRnlZVzF6SUdWeWNtOXlJR2xtSUVKVlJrWkZVbDlQVmtWU1VsVk9YRzRnSUNBZ0lDQXZLaUJsYzJ4cGJuUWdjbVZ4ZFdseVpTMTFibWxqYjJSbExYSmxaMlY0Y0RvZ2IyWm1JQ292WEc0Z0lDQWdJQ0JwWmlBb1pTNXRaWE56WVdkbExtMWhkR05vS0M5Q1ZVWkdSVkpmVDFaRlVsSlZUaThwS1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUdWMGFFVnljbTl5Y3k1eWNHTXVhVzUyWVd4cFpGQmhjbUZ0Y3loY2JpQWdJQ0FnSUNBZ0lDQmdTVzUyWVd4cFpDQjBjbUZ1YzJGamRHbHZiaUJ3WVhKaGJYTTZJR1JoZEdFZ2IzVjBMVzltTFdKdmRXNWtjeXdnUWxWR1JrVlNYMDlXUlZKU1ZVNHVZQ3hjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCV1lXeHBaR0YwWlhNZ2RHaGxJSHRBWTI5a1pTQm1jbTl0ZlNCbWFXVnNaQ0JwYmlCMGFHVWdaMmwyWlc0Z2RIZ2djR0Z5WVcxelhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhSNFVHRnlZVzF6WEc0Z0tpQkFkR2h5YjNkeklIdEZjbkp2Y24wZ2FXWWdkR2hsSUdaeWIyMGdZV1JrY21WemN5QnBjMjRuZENCMllXeHBaRnh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2RtRnNhV1JoZEdWR2NtOXRLSFI0VUdGeVlXMXpLU0I3WEc0Z0lHbG1JQ2doS0hSNWNHVnZaaUIwZUZCaGNtRnRjeTVtY205dElEMDlQU0FuYzNSeWFXNW5KeWtwSUh0Y2JpQWdJQ0IwYUhKdmR5QmxkR2hGY25KdmNuTXVjbkJqTG1sdWRtRnNhV1JRWVhKaGJYTW9YRzRnSUNBZ0lDQmdTVzUyWVd4cFpDQmNJbVp5YjIxY0lpQmhaR1J5WlhOeklGd2lKSHQwZUZCaGNtRnRjeTVtY205dGZWd2lPaUJ1YjNRZ1lTQnpkSEpwYm1jdVlDeGNiaUFnSUNBcE8xeHVJQ0I5WEc0Z0lHbG1JQ2doYVhOV1lXeHBaRWhsZUVGa1pISmxjM01vZEhoUVlYSmhiWE11Wm5KdmJTd2dleUJoYkd4dmQwNXZibEJ5WldacGVHVmtPaUJtWVd4elpTQjlLU2tnZTF4dUlDQWdJSFJvY205M0lHVjBhRVZ5Y205eWN5NXljR011YVc1MllXeHBaRkJoY21GdGN5Z25TVzUyWVd4cFpDQmNJbVp5YjIxY0lpQmhaR1J5WlhOekxpY3BPMXh1SUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nVm1Gc2FXUmhkR1Z6SUhSb1pTQjdRR052WkdVZ2RHOTlJR1pwWld4a0lHbHVJSFJvWlNCbmFYWmxiaUIwZUNCd1lYSmhiWE5jYmlBcVhHNGdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdkSGhRWVhKaGJYTWdMU0IwYUdVZ2RIZ2djR0Z5WVcxelhHNGdLaUJBY21WMGRYSnVjeUI3YjJKcVpXTjBmU0IwYUdVZ2RIZ2djR0Z5WVcxelhHNGdLaUJBZEdoeWIzZHpJSHRGY25KdmNuMGdhV1lnZEdobElISmxZMmx3YVdWdWRDQnBjeUJwYm5aaGJHbGtJRTlTSUhSb1pYSmxJR2x6YmlkMElIUjRJR1JoZEdGY2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSFpoYkdsa1lYUmxVbVZqYVhCcFpXNTBLSFI0VUdGeVlXMXpLU0I3WEc0Z0lHbG1JQ2gwZUZCaGNtRnRjeTUwYnlBOVBUMGdKekI0SnlCOGZDQjBlRkJoY21GdGN5NTBieUE5UFQwZ2JuVnNiQ2tnZTF4dUlDQWdJR2xtSUNoMGVGQmhjbUZ0Y3k1a1lYUmhLU0I3WEc0Z0lDQWdJQ0JrWld4bGRHVWdkSGhRWVhKaGJYTXVkRzg3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9jbTkzSUdWMGFFVnljbTl5Y3k1eWNHTXVhVzUyWVd4cFpGQmhjbUZ0Y3lnblNXNTJZV3hwWkNCY0luUnZYQ0lnWVdSa2NtVnpjeTRuS1R0Y2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCcFppQW9YRzRnSUNBZ2RIaFFZWEpoYlhNdWRHOGdJVDA5SUhWdVpHVm1hVzVsWkNBbUpseHVJQ0FnSUNGcGMxWmhiR2xrU0dWNFFXUmtjbVZ6Y3loMGVGQmhjbUZ0Y3k1MGJ5d2dleUJoYkd4dmQwNXZibEJ5WldacGVHVmtPaUJtWVd4elpTQjlLVnh1SUNBcElIdGNiaUFnSUNCMGFISnZkeUJsZEdoRmNuSnZjbk11Y25CakxtbHVkbUZzYVdSUVlYSmhiWE1vSjBsdWRtRnNhV1FnWENKMGIxd2lJR0ZrWkhKbGMzTXVKeWs3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSFI0VUdGeVlXMXpPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnZG1Gc2FXUmhkR1ZEYjI1bWFYSnRaV1JGZUhSbGNtNWhiRlJ5WVc1ellXTjBhVzl1SUQwZ0tIdGNiaUFnZEhoTlpYUmhMRnh1SUNCd1pXNWthVzVuVkhKaGJuTmhZM1JwYjI1ekxGeHVJQ0JqYjI1bWFYSnRaV1JVY21GdWMyRmpkR2x2Ym5Nc1hHNTlJRDBnZTMwcElEMCtJSHRjYmlBZ2FXWWdLQ0YwZUUxbGRHRWdmSHdnSVhSNFRXVjBZUzUwZUZCaGNtRnRjeWtnZTF4dUlDQWdJSFJvY205M0lHVjBhRVZ5Y205eWN5NXljR011YVc1MllXeHBaRkJoY21GdGN5aGNiaUFnSUNBZ0lDZGNJblI0VFdWMFlWd2lJRzl5SUZ3aWRIaE5aWFJoTG5SNFVHRnlZVzF6WENJZ2FYTWdiV2x6YzJsdVp5Y3NYRzRnSUNBZ0tUdGNiaUFnZlZ4dUlDQnBaaUFvZEhoTlpYUmhMbk4wWVhSMWN5QWhQVDBnVkhKaGJuTmhZM1JwYjI1VGRHRjBkWE11WTI5dVptbHliV1ZrS1NCN1hHNGdJQ0FnZEdoeWIzY2daWFJvUlhKeWIzSnpMbkp3WXk1cGJuWmhiR2xrVUdGeVlXMXpLRnh1SUNBZ0lDQWdKMFY0ZEdWeWJtRnNJSFJ5WVc1ellXTjBhVzl1SUhOMFlYUjFjeUJ6YUc5MWJHUWdZbVVnWENKamIyNW1hWEp0WldSY0lpY3NYRzRnSUNBZ0tUdGNiaUFnZlZ4dUlDQmpiMjV6ZENCbGVIUmxjbTVoYkZSNFRtOXVZMlVnUFNCMGVFMWxkR0V1ZEhoUVlYSmhiWE11Ym05dVkyVTdYRzRnSUdsbUlDaHdaVzVrYVc1blZISmhibk5oWTNScGIyNXpJQ1ltSUhCbGJtUnBibWRVY21GdWMyRmpkR2x2Ym5NdWJHVnVaM1JvSUQ0Z01Da2dlMXh1SUNBZ0lHTnZibk4wSUdadmRXNWtVR1Z1WkdsdVoxUjRRbmxPYjI1alpTQTlJSEJsYm1ScGJtZFVjbUZ1YzJGamRHbHZibk11Wm1sdVpDaGNiaUFnSUNBZ0lDaGxiQ2tnUFQ0Z1pXd3VkSGhRWVhKaGJYTS9MbTV2Ym1ObElEMDlQU0JsZUhSbGNtNWhiRlI0VG05dVkyVXNYRzRnSUNBZ0tUdGNiaUFnSUNCcFppQW9abTkxYm1SUVpXNWthVzVuVkhoQ2VVNXZibU5sS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJsZEdoRmNuSnZjbk11Y25CakxtbHVkbUZzYVdSUVlYSmhiWE1vWEc0Z0lDQWdJQ0FnSUNkRmVIUmxjbTVoYkNCMGNtRnVjMkZqZEdsdmJpQnViMjVqWlNCemFHOTFiR1FnYm05MElHSmxJR2x1SUhCbGJtUnBibWNnZEhoekp5eGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHbG1JQ2hqYjI1bWFYSnRaV1JVY21GdWMyRmpkR2x2Ym5NZ0ppWWdZMjl1Wm1seWJXVmtWSEpoYm5OaFkzUnBiMjV6TG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNCamIyNXpkQ0JtYjNWdVpFTnZibVpwY20xbFpGUjRRbmxPYjI1alpTQTlJR052Ym1acGNtMWxaRlJ5WVc1ellXTjBhVzl1Y3k1bWFXNWtLRnh1SUNBZ0lDQWdLR1ZzS1NBOVBpQmxiQzUwZUZCaGNtRnRjejh1Ym05dVkyVWdQVDA5SUdWNGRHVnlibUZzVkhoT2IyNWpaU3hjYmlBZ0lDQXBPMXh1SUNBZ0lHbG1JQ2htYjNWdVpFTnZibVpwY20xbFpGUjRRbmxPYjI1alpTa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ1pYUm9SWEp5YjNKekxuSndZeTVwYm5aaGJHbGtVR0Z5WVcxektGeHVJQ0FnSUNBZ0lDQW5SWGgwWlhKdVlXd2dkSEpoYm5OaFkzUnBiMjRnYm05dVkyVWdjMmh2ZFd4a0lHNXZkQ0JpWlNCcGJpQmpiMjVtYVhKdFpXUWdkSGh6Snl4Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5TzF4dVhHNHZLaXBjYmlBcUlGSmxkSFZ5Ym5NZ1lTQnNhWE4wSUc5bUlHWnBibUZzSUhOMFlYUmxjMXh1SUNwY2JpQXFJRUJ5WlhSMWNtNXpJSHR6ZEhKcGJtZGJYWDBnZEdobElITjBZWFJsY3lCMGFHRjBJR05oYmlCaVpTQmpiMjV6YVdSbGNtVmtJR1pwYm1Gc0lITjBZWFJsYzF4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaMlYwUm1sdVlXeFRkR0YwWlhNb0tTQjdYRzRnSUhKbGRIVnliaUJiWEc0Z0lDQWdWSEpoYm5OaFkzUnBiMjVUZEdGMGRYTXVjbVZxWldOMFpXUXNJQzh2SUhSb1pTQjFjMlZ5SUdoaGN5QnlaWE53YjI1a1pXUWdibThoWEc0Z0lDQWdWSEpoYm5OaFkzUnBiMjVUZEdGMGRYTXVZMjl1Wm1seWJXVmtMQ0F2THlCMGFHVWdkSGdnYUdGeklHSmxaVzRnYVc1amJIVmtaV1FnYVc0Z1lTQmliRzlqYXk1Y2JpQWdJQ0JVY21GdWMyRmpkR2x2YmxOMFlYUjFjeTVtWVdsc1pXUXNJQzh2SUhSb1pTQjBlQ0JtWVdsc1pXUWdabTl5SUhOdmJXVWdjbVZoYzI5dUxDQnBibU5zZFdSbFpDQnZiaUIwZUNCa1lYUmhMbHh1SUNBZ0lGUnlZVzV6WVdOMGFXOXVVM1JoZEhWekxtUnliM0J3WldRc0lDOHZJSFJvWlNCMGVDQnViMjVqWlNCM1lYTWdZV3h5WldGa2VTQjFjMlZrWEc0Z0lGMDdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1RtOXliV0ZzYVhwbGN5QjBlQ0J5WldObGFYQjBJR2RoY3lCMWMyVmtJSFJ2SUdKbElHRWdhR1Y0WVdSbFkybHRZV3dnYzNSeWFXNW5MbHh1SUNvZ1NYUWdjMlZsYlhNZ2RHaGhkQ0J6YjIxbGRHbHRaWE1nZEdobElHNTFiV1Z5YVdOaGJDQjJZV3gxWlhNZ1ltVnBibWNnY21WMGRYSnVaV1FnWm5KdmJWeHVJQ29nZEdocGN5NXhkV1Z5ZVM1blpYUlVjbUZ1YzJGamRHbHZibEpsWTJWcGNIUWdZWEpsSUVKT0lHbHVjM1JoYm1ObGN5QmhibVFnYm05MElITjBjbWx1WjNNdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWNnYjNJZ1FrNGdhVzV6ZEdGdVkyVjlJR2RoYzFWelpXUmNiaUFxSUVCeVpYUjFjbTV6SUc1dmNtMWhiR2w2WldRZ1oyRnpJSFZ6WldRZ1lYTWdhR1Y0WVdSbFkybHRZV3dnYzNSeWFXNW5YRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCdWIzSnRZV3hwZW1WVWVGSmxZMlZwY0hSSFlYTlZjMlZrS0dkaGMxVnpaV1FwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCbllYTlZjMlZrSUQwOVBTQW5jM1J5YVc1bkp5QS9JR2RoYzFWelpXUWdPaUJuWVhOVmMyVmtMblJ2VTNSeWFXNW5LREUyS1R0Y2JuMWNiaUlzSW1sdGNHOXlkQ0JGZG1WdWRFVnRhWFIwWlhJZ1puSnZiU0FuUUcxbGRHRnRZWE5yTDNOaFptVXRaWFpsYm5RdFpXMXBkSFJsY2ljN1hHNXBiWEJ2Y25RZ2JHOW5JR1p5YjIwZ0oyeHZaMnhsZG1Wc0p6dGNibWx0Y0c5eWRDQkZkR2hSZFdWeWVTQm1jbTl0SUNkbGRHaHFjeTF4ZFdWeWVTYzdYRzVwYlhCdmNuUWdleUJVY21GdWMyRmpkR2x2YmxOMFlYUjFjeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12ZEhKaGJuTmhZM1JwYjI0bk8xeHVhVzF3YjNKMElIc2dSVkpTVDFKZlUxVkNUVWxVVkVsT1J5QjlJR1p5YjIwZ0p5NHZkSGd0YzNSaGRHVXRiV0Z1WVdkbGNpYzdYRzVjYmk4cUtseHVJQ29nUlhabGJuUWdaVzFwZEhSbGNpQjFkR2xzYVhSNUlHTnNZWE56SUdadmNpQjBjbUZqYTJsdVp5QjBhR1VnZEhKaGJuTmhZM1JwYjI1eklHRnpJSFJvWlhsY2JpQXFJR2R2SUdaeWIyMGdZU0J3Wlc1a2FXNW5JSE4wWVhSbElIUnZJR0VnWTI5dVptbHliV1ZrSUNodGFXNWxaQ0JwYmlCaElHSnNiMk5yS1NCemRHRjBaUzVjYmlBcVhHNGdLaUJCY3lCM1pXeHNJR0Z6SUdOdmJuUnBiblZsY3lCaWNtOWhaR05oYzNRZ2QyaHBiR1VnYVc0Z2RHaGxJSEJsYm1ScGJtY2djM1JoZEdVdVhHNGdLaTljYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGQmxibVJwYm1kVWNtRnVjMkZqZEdsdmJsUnlZV05yWlhJZ1pYaDBaVzVrY3lCRmRtVnVkRVZ0YVhSMFpYSWdlMXh1SUNBdktpcGNiaUFnSUNvZ1YyVWdkMkZwZENCMGFHbHpJRzFoYm5rZ1lteHZZMnR6SUdKbFptOXlaU0JsYldsMGRHbHVaeUJoSUNkMGVEcGtjbTl3Y0dWa0p5QmxkbVZ1ZEZ4dUlDQWdLbHh1SUNBZ0tpQlVhR2x6SUdseklHSmxZMkYxYzJVZ2QyVWdZMjkxYkdRZ1ltVWdkR0ZzYTJsdVp5QjBieUJoSUc1dlpHVWdkR2hoZENCcGN5QnZkWFFnYjJZZ2MzbHVZeTVjYmlBZ0lDcGNiaUFnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjYmlBZ0lDb3ZYRzRnSUVSU1QxQlFSVVJmUWxWR1JrVlNYME5QVlU1VUlEMGdNenRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRU0J0WVhBZ2IyWWdkSEpoYm5OaFkzUnBiMjRnYUdGemFHVnpJSFJ2SUhSb1pTQnVkVzFpWlhJZ2IyWWdZbXh2WTJ0eklIZGxKM1psSUhObFpXNWNiaUFnSUNvZ2MybHVZMlVnWm1seWMzUWdZMjl1YzJsa1pYSnBibWNnYVhRZ1pISnZjSEJsWkZ4dUlDQWdLbHh1SUNBZ0tpQkFkSGx3WlNCN1RXRndQSE4wY21sdVp5d2diblZ0WW1WeVBuMWNiaUFnSUNvdlhHNGdJR1J5YjNCd1pXUkNiRzlqYTNOQ2RXWm1aWEpDZVVoaGMyZ2dQU0J1WlhjZ1RXRndLQ2s3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQmpiMjVtYVdjZ0xTQkRiMjVtYVdkMWNtRjBhVzl1TGx4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JqYjI1bWFXY3VZWEJ3Y205MlpWUnlZVzV6WVdOMGFXOXVJQzBnUVhCd2NtOTJaWE1nWVNCMGNtRnVjMkZqZEdsdmJpNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1kyOXVabWxuTG1OdmJtWnBjbTFVY21GdWMyRmpkR2x2YmlBdElGTmxkQ0JoSUhSeVlXNXpZV04wYVc5dUlHRnpJR052Ym1acGNtMWxaQzVjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdZMjl1Wm1sbkxtZGxkRU52YlhCc1pYUmxaRlJ5WVc1ellXTjBhVzl1Y3lBdElGSmxkSFZ5Ym5NZ1kyOXRjR3hsZEdWa0lIUnlZVzV6WVdOMGFXOXVjeTVjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdZMjl1Wm1sbkxtZGxkRkJsYm1ScGJtZFVjbUZ1YzJGamRHbHZibk1nTFNCU1pYUjFjbTV6SUdGdUlHRnljbUY1SUc5bUlIQmxibVJwYm1jZ2RISmhibk5oWTNScGIyNXpMRnh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ1kyOXVabWxuTG01dmJtTmxWSEpoWTJ0bGNpQXRJSE5sWlNCdWIyNWpaU0IwY21GamEyVnlYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCamIyNW1hV2N1Y0hKdmRtbGtaWElnTFNCQklHNWxkSGR2Y21zZ2NISnZkbWxrWlhJdVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0JqYjI1bWFXY3VjWFZsY25rZ0xTQkJiaUJGZEdoUmRXVnllU0JwYm5OMFlXNWpaUzVjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdZMjl1Wm1sbkxuQjFZbXhwYzJoVWNtRnVjMkZqZEdsdmJpQXRJRkIxWW14cGMyaGxjeUJoSUhKaGR5QjBjbUZ1YzJGamRHbHZiaXhjYmlBZ0lDb3ZYRzRnSUdOdmJuTjBjblZqZEc5eUtHTnZibVpwWnlrZ2UxeHVJQ0FnSUhOMWNHVnlLQ2s3WEc0Z0lDQWdkR2hwY3k1eGRXVnllU0E5SUdOdmJtWnBaeTV4ZFdWeWVTQjhmQ0J1WlhjZ1JYUm9VWFZsY25rb1kyOXVabWxuTG5CeWIzWnBaR1Z5S1R0Y2JpQWdJQ0IwYUdsekxtNXZibU5sVkhKaFkydGxjaUE5SUdOdmJtWnBaeTV1YjI1alpWUnlZV05yWlhJN1hHNGdJQ0FnZEdocGN5NW5aWFJRWlc1a2FXNW5WSEpoYm5OaFkzUnBiMjV6SUQwZ1kyOXVabWxuTG1kbGRGQmxibVJwYm1kVWNtRnVjMkZqZEdsdmJuTTdYRzRnSUNBZ2RHaHBjeTVuWlhSRGIyMXdiR1YwWldSVWNtRnVjMkZqZEdsdmJuTWdQU0JqYjI1bWFXY3VaMlYwUTI5dGNHeGxkR1ZrVkhKaGJuTmhZM1JwYjI1ek8xeHVJQ0FnSUhSb2FYTXVjSFZpYkdsemFGUnlZVzV6WVdOMGFXOXVJRDBnWTI5dVptbG5MbkIxWW14cGMyaFVjbUZ1YzJGamRHbHZianRjYmlBZ0lDQjBhR2x6TG1Gd2NISnZkbVZVY21GdWMyRmpkR2x2YmlBOUlHTnZibVpwWnk1aGNIQnliM1psVkhKaGJuTmhZM1JwYjI0N1hHNGdJQ0FnZEdocGN5NWpiMjVtYVhKdFZISmhibk5oWTNScGIyNGdQU0JqYjI1bWFXY3VZMjl1Wm1seWJWUnlZVzV6WVdOMGFXOXVPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUdOb1pXTnJjeUIwYUdVZ2JtVjBkMjl5YXlCbWIzSWdjMmxuYm1Wa0lIUjRjeUJoYm1RZ2NtVnNaV0Z6WlhNZ2RHaGxJRzV2Ym1ObElHZHNiMkpoYkNCc2IyTnJJR2xtSUdsMElHbHpYRzRnSUNBcUwxeHVJQ0JoYzNsdVl5QjFjR1JoZEdWUVpXNWthVzVuVkhoektDa2dlMXh1SUNBZ0lDOHZJR2x1SUc5eVpHVnlJSFJ2SUd0bFpYQWdkR2hsSUc1dmJtTmxWSEpoWTJ0bGNpQmhZMk4xY21GMFpTQjNaU0JpYkc5amF5QnBkQ0IzYUdsc1pTQjFjR1JoZEdsdVp5QndaVzVrYVc1bklIUnlZVzV6WVdOMGFXOXVjMXh1SUNBZ0lHTnZibk4wSUc1dmJtTmxSMnh2WW1Gc1RHOWpheUE5SUdGM1lXbDBJSFJvYVhNdWJtOXVZMlZVY21GamEyVnlMbWRsZEVkc2IySmhiRXh2WTJzb0tUdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2NHVnVaR2x1WjFSNGN5QTlJSFJvYVhNdVoyVjBVR1Z1WkdsdVoxUnlZVzV6WVdOMGFXOXVjeWdwTzF4dUlDQWdJQ0FnWVhkaGFYUWdVSEp2YldselpTNWhiR3dvWEc0Z0lDQWdJQ0FnSUhCbGJtUnBibWRVZUhNdWJXRndLQ2gwZUUxbGRHRXBJRDArSUhSb2FYTXVYMk5vWldOclVHVnVaR2x1WjFSNEtIUjRUV1YwWVNrcExGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJR3h2Wnk1bGNuSnZjaWhjYmlBZ0lDQWdJQ0FnSjFCbGJtUnBibWRVY21GdWMyRmpkR2x2YmxSeVlXTnJaWElnTFNCRmNuSnZjaUIxY0dSaGRHbHVaeUJ3Wlc1a2FXNW5JSFJ5WVc1ellXTjBhVzl1Y3ljc1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2JHOW5MbVZ5Y205eUtHVnljaWs3WEc0Z0lDQWdmVnh1SUNBZ0lHNXZibU5sUjJ4dlltRnNURzlqYXk1eVpXeGxZWE5sVEc5amF5Z3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGMzVmliV2wwY3lCbFlXTm9JSEJsYm1ScGJtY2dkSEpoYm5OaFkzUnBiMjVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdKc2IyTnJUblZ0WW1WeUlDMGdkR2hsSUd4aGRHVnpkQ0JpYkc5amF5QnVkVzFpWlhJZ2FXNGdhR1Y0WEc0Z0lDQXFJRUJtYVhKbGN5QjBlRHAzWVhKdWFXNW5YRzRnSUNBcUlFQnlaWFIxY201eklIdFFjbTl0YVhObFBIWnZhV1ErZlZ4dUlDQWdLaTljYmlBZ1lYTjVibU1nY21WemRXSnRhWFJRWlc1a2FXNW5WSGh6S0dKc2IyTnJUblZ0WW1WeUtTQjdYRzRnSUNBZ1kyOXVjM1FnY0dWdVpHbHVaeUE5SUhSb2FYTXVaMlYwVUdWdVpHbHVaMVJ5WVc1ellXTjBhVzl1Y3lncE8xeHVJQ0FnSUdsbUlDZ2hjR1Z1WkdsdVp5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdabTl5SUNoamIyNXpkQ0IwZUUxbGRHRWdiMllnY0dWdVpHbHVaeWtnZTF4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdZWGRoYVhRZ2RHaHBjeTVmY21WemRXSnRhWFJVZUNoMGVFMWxkR0VzSUdKc2IyTnJUblZ0WW1WeUtUdGNiaUFnSUNBZ0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JsY25KdmNrMWxjM05oWjJVZ1BWeHVJQ0FnSUNBZ0lDQWdJR1Z5Y2k1MllXeDFaVDh1YldWemMyRm5aVDh1ZEc5TWIzZGxja05oYzJVb0tTQjhmQ0JsY25JdWJXVnpjMkZuWlM1MGIweHZkMlZ5UTJGelpTZ3BPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnBjMHR1YjNkdVZIZ2dQVnh1SUNBZ0lDQWdJQ0FnSUM4dklHZGxkR2hjYmlBZ0lDQWdJQ0FnSUNCbGNuSnZjazFsYzNOaFoyVXVhVzVqYkhWa1pYTW9KM0psY0d4aFkyVnRaVzUwSUhSeVlXNXpZV04wYVc5dUlIVnVaR1Z5Y0hKcFkyVmtKeWtnZkh4Y2JpQWdJQ0FnSUNBZ0lDQmxjbkp2Y2sxbGMzTmhaMlV1YVc1amJIVmtaWE1vSjJ0dWIzZHVJSFJ5WVc1ellXTjBhVzl1SnlrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0F2THlCd1lYSnBkSGxjYmlBZ0lDQWdJQ0FnSUNCbGNuSnZjazFsYzNOaFoyVXVhVzVqYkhWa1pYTW9KMmRoY3lCd2NtbGpaU0IwYjI4Z2JHOTNJSFJ2SUhKbGNHeGhZMlVuS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJR1Z5Y205eVRXVnpjMkZuWlM1cGJtTnNkV1JsY3loY2JpQWdJQ0FnSUNBZ0lDQWdJQ2QwY21GdWMyRmpkR2x2YmlCM2FYUm9JSFJvWlNCellXMWxJR2hoYzJnZ2QyRnpJR0ZzY21WaFpIa2dhVzF3YjNKMFpXUW5MRnh1SUNBZ0lDQWdJQ0FnSUNrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0F2THlCdmRHaGxjbHh1SUNBZ0lDQWdJQ0FnSUdWeWNtOXlUV1Z6YzJGblpTNXBibU5zZFdSbGN5Z25aMkYwWlhkaGVTQjBhVzFsYjNWMEp5a2dmSHhjYmlBZ0lDQWdJQ0FnSUNCbGNuSnZjazFsYzNOaFoyVXVhVzVqYkhWa1pYTW9KMjV2Ym1ObElIUnZieUJzYjNjbktUdGNiaUFnSUNBZ0lDQWdMeThnYVdkdWIzSmxJSEpsYzNWaWJXbDBJSGRoY201cGJtZHpMQ0J5WlhSMWNtNGdaV0Z5YkhsY2JpQWdJQ0FnSUNBZ2FXWWdLR2x6UzI1dmQyNVVlQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJsYm1OdmRXNTBaWEpsWkNCeVpXRnNJR1Z5Y205eUlDMGdkSEpoYm5OcGRHbHZiaUIwYnlCbGNuSnZjaUJ6ZEdGMFpWeHVJQ0FnSUNBZ0lDQjBlRTFsZEdFdWQyRnlibWx1WnlBOUlIdGNiaUFnSUNBZ0lDQWdJQ0JsY25KdmNqb2daWEp5YjNKTlpYTnpZV2RsTEZ4dUlDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVNklFVlNVazlTWDFOVlFrMUpWRlJKVGtjc1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkQ2duZEhnNmQyRnlibWx1Wnljc0lIUjRUV1YwWVN3Z1pYSnlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVhSMFpXMXdkSE1nZEc4Z2NtVnpkV0p0YVhRZ2RHaGxJR2RwZG1WdUlIUnlZVzV6WVdOMGFXOXVJSGRwZEdnZ1pYaHdiMjVsYm5ScFlXd2dZbUZqYTI5bVpseHVJQ0FnS2x4dUlDQWdLaUJYYVd4c0lHOXViSGtnWVhSMFpXMXdkQ0IwYnlCeVpYUnllU0IwYUdVZ1oybDJaVzRnZEhnZ1pYWmxjbmtnZTBCamIyUmxJRElxS2loMGVFMWxkR0V1Y21WMGNubERiM1Z1ZENsOUlHSnNiMk5yY3k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlIUjRUV1YwWVNBdElIUm9aU0IwY21GdWMyRmpkR2x2YmlCdFpYUmhaR0YwWVZ4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiR0YwWlhOMFFteHZZMnRPZFcxaVpYSWdMU0IwYUdVZ2JHRjBaWE4wSUdKc2IyTnJJRzUxYldKbGNpQnBiaUJvWlhoY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFCeWIyMXBjMlU4YzNSeWFXNW5mSFZ1WkdWbWFXNWxaRDU5SUhSb1pTQjBlQ0JvWVhOb0lHbG1JSEpsZEhKcFpXUmNiaUFnSUNvZ1FHWnBjbVZ6SUhSNE9tSnNiMk5yTFhWd1pHRjBaVnh1SUNBZ0tpQkFabWx5WlhNZ2RIZzZjbVYwY25sY2JpQWdJQ29nUUhCeWFYWmhkR1ZjYmlBZ0lDb3ZYRzRnSUdGemVXNWpJRjl5WlhOMVltMXBkRlI0S0hSNFRXVjBZU3dnYkdGMFpYTjBRbXh2WTJ0T2RXMWlaWElwSUh0Y2JpQWdJQ0JwWmlBb0lYUjRUV1YwWVM1bWFYSnpkRkpsZEhKNVFteHZZMnRPZFcxaVpYSXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVpXMXBkQ2duZEhnNllteHZZMnN0ZFhCa1lYUmxKeXdnZEhoTlpYUmhMQ0JzWVhSbGMzUkNiRzlqYTA1MWJXSmxjaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ1ptbHljM1JTWlhSeWVVSnNiMk5yVG5WdFltVnlJRDFjYmlBZ0lDQWdJSFI0VFdWMFlTNW1hWEp6ZEZKbGRISjVRbXh2WTJ0T2RXMWlaWElnZkh3Z2JHRjBaWE4wUW14dlkydE9kVzFpWlhJN1hHNGdJQ0FnWTI5dWMzUWdkSGhDYkc5amEwUnBjM1JoYm1ObElEMWNiaUFnSUNBZ0lFNTFiV0psY2k1d1lYSnpaVWx1ZENoc1lYUmxjM1JDYkc5amEwNTFiV0psY2l3Z01UWXBJQzFjYmlBZ0lDQWdJRTUxYldKbGNpNXdZWEp6WlVsdWRDaG1hWEp6ZEZKbGRISjVRbXh2WTJ0T2RXMWlaWElzSURFMktUdGNibHh1SUNBZ0lHTnZibk4wSUhKbGRISjVRMjkxYm5RZ1BTQjBlRTFsZEdFdWNtVjBjbmxEYjNWdWRDQjhmQ0F3TzF4dVhHNGdJQ0FnTHk4Z1JYaHdiMjVsYm5ScFlXd2dZbUZqYTI5bVppQjBieUJzYVcxcGRDQnlaWFJ5YVdWeklHRjBJSEIxWW14cGMyaHBibWNnS0dOaGNIQmxaQ0JoZENCK01UVWdiV2x1ZFhSbGN5QmlaWFIzWldWdUlISmxkSEpwWlhNcFhHNGdJQ0FnYVdZZ0tIUjRRbXh2WTJ0RWFYTjBZVzVqWlNBOElFMWhkR2d1YldsdUtEVXdMQ0JOWVhSb0xuQnZkeWd5TENCeVpYUnllVU52ZFc1MEtTa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2ZWeHVYRzVjYmlBZ0lDQXZMeUJQYm14NUlHRjFkRzh0YzNWaWJXbDBJR0ZzY21WaFpIa3RjMmxuYm1Wa0lIUjRjenBjYmlBZ0lDQnBaaUFvSVNnbmNtRjNWSGduSUdsdUlIUjRUV1YwWVNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZ3Y0hKdmRtVlVjbUZ1YzJGamRHbHZiaWgwZUUxbGRHRXVhV1FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElIc2djbUYzVkhnZ2ZTQTlJSFI0VFdWMFlUdGNiaUFnSUNCamIyNXpkQ0IwZUVoaGMyZ2dQU0JoZDJGcGRDQjBhR2x6TG5CMVlteHBjMmhVY21GdWMyRmpkR2x2YmloeVlYZFVlQ2s3WEc1Y2JpQWdJQ0F2THlCSmJtTnlaVzFsYm5RZ2MzVmpZMlZ6YzJaMWJDQjBjbWxsY3pwY2JpQWdJQ0IwYUdsekxtVnRhWFFvSjNSNE9uSmxkSEo1Snl3Z2RIaE5aWFJoS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkSGhJWVhOb08xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkYxWlhKNUlIUm9aU0J1WlhSM2IzSnJJSFJ2SUhObFpTQnBaaUIwYUdVZ1oybDJaVzRnZTBCamIyUmxJSFI0VFdWMFlYMGdhR0Z6SUdKbFpXNGdhVzVqYkhWa1pXUWdhVzRnWVNCaWJHOWphMXh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnZEhoTlpYUmhJQzBnZEdobElIUnlZVzV6WVdOMGFXOXVJRzFsZEdGa1lYUmhYRzRnSUNBcUlFQnlaWFIxY201eklIdFFjbTl0YVhObFBIWnZhV1ErZlZ4dUlDQWdLaUJBWm1seVpYTWdkSGc2WTI5dVptbHliV1ZrWEc0Z0lDQXFJRUJtYVhKbGN5QjBlRHBrY205d2NHVmtYRzRnSUNBcUlFQm1hWEpsY3lCMGVEcG1ZV2xzWldSY2JpQWdJQ29nUUdacGNtVnpJSFI0T25kaGNtNXBibWRjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNWNiaUFnWVhONWJtTWdYMk5vWldOclVHVnVaR2x1WjFSNEtIUjRUV1YwWVNrZ2UxeHVJQ0FnSUdOdmJuTjBJSFI0U0dGemFDQTlJSFI0VFdWMFlTNW9ZWE5vTzF4dUlDQWdJR052Ym5OMElIUjRTV1FnUFNCMGVFMWxkR0V1YVdRN1hHNWNiaUFnSUNBdkx5QlBibXg1SUdOb1pXTnJJSE4xWW0xcGRIUmxaQ0IwZUhOY2JpQWdJQ0JwWmlBb2RIaE5aWFJoTG5OMFlYUjFjeUFoUFQwZ1ZISmhibk5oWTNScGIyNVRkR0YwZFhNdWMzVmliV2wwZEdWa0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1pYaDBjbUVnWTJobFkyc2dhVzRnWTJGelpTQjBhR1Z5WlNCM1lYTWdZVzRnZFc1allYVm5hSFFnWlhKeWIzSWdaSFZ5YVc1bklIUm9aVnh1SUNBZ0lDOHZJSE5wWjI1aGRIVnlaU0JoYm1RZ2MzVmliV2x6YzJsdmJpQndjbTlqWlhOelhHNWNiaUFnSUNCc1pYUWdhR0Z6VG05SVlYTm9JRDBnSVhSNFNHRnphRHRjYmx4dVhHNGdJQ0FnYVdZZ0tHaGhjMDV2U0dGemFDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2JtOVVlRWhoYzJoRmNuSWdQU0J1WlhjZ1JYSnliM0lvWEc0Z0lDQWdJQ0FnSUNkWFpTQm9ZV1FnWVc0Z1pYSnliM0lnZDJocGJHVWdjM1ZpYldsMGRHbHVaeUIwYUdseklIUnlZVzV6WVdOMGFXOXVMQ0J3YkdWaGMyVWdkSEo1SUdGbllXbHVMaWNzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJQ0FnYm05VWVFaGhjMmhGY25JdWJtRnRaU0E5SUNkT2IxUjRTR0Z6YUVWeWNtOXlKenRjYmlBZ0lDQWdJSFJvYVhNdVpXMXBkQ2duZEhnNlptRnBiR1ZrSnl3Z2RIaEpaQ3dnYm05VWVFaGhjMmhGY25JcE8xeHVYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHRjNZV2wwSUhSb2FYTXVYMk5vWldOclNXWk9iMjVqWlVselZHRnJaVzRvZEhoTlpYUmhLU2tnZTF4dUlDQWdJQ0FnZEdocGN5NWxiV2wwS0NkMGVEcGtjbTl3Y0dWa0p5d2dkSGhKWkNrN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSFJ5WVc1ellXTjBhVzl1VW1WalpXbHdkQ0E5SUdGM1lXbDBJSFJvYVhNdWNYVmxjbmt1WjJWMFZISmhibk5oWTNScGIyNVNaV05sYVhCMEtIUjRTR0Z6YUNrN1hHNGdJQ0FnSUNCcFppQW9kSEpoYm5OaFkzUnBiMjVTWldObGFYQjBQeTVpYkc5amEwNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHSmhjMlZHWldWUVpYSkhZWE1zSUhScGJXVnpkR0Z0Y0RvZ1lteHZZMnRVYVcxbGMzUmhiWEFnZlNBOVhHNGdJQ0FnSUNBZ0lDQWdZWGRoYVhRZ2RHaHBjeTV4ZFdWeWVTNW5aWFJDYkc5amEwSjVTR0Z6YUNoMGNtRnVjMkZqZEdsdmJsSmxZMlZwY0hRL0xtSnNiMk5yU0dGemFDd2dabUZzYzJVcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkQ2hjYmlBZ0lDQWdJQ0FnSUNBbmRIZzZZMjl1Wm1seWJXVmtKeXhjYmlBZ0lDQWdJQ0FnSUNCMGVFbGtMRnh1SUNBZ0lDQWdJQ0FnSUhSeVlXNXpZV04wYVc5dVVtVmpaV2x3ZEN4Y2JpQWdJQ0FnSUNBZ0lDQmlZWE5sUm1WbFVHVnlSMkZ6TEZ4dUlDQWdJQ0FnSUNBZ0lHSnNiMk5yVkdsdFpYTjBZVzF3TEZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCallYUmphQ0FvWlhKeUtTQjdYRzRnSUNBZ0lDQjBlRTFsZEdFdWQyRnlibWx1WnlBOUlIdGNiaUFnSUNBZ0lDQWdaWEp5YjNJNklHVnljaTV0WlhOellXZGxMRnh1SUNBZ0lDQWdJQ0J0WlhOellXZGxPaUFuVkdobGNtVWdkMkZ6SUdFZ2NISnZZbXhsYlNCc2IyRmthVzVuSUhSb2FYTWdkSEpoYm5OaFkzUnBiMjR1Snl4Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnSUNCMGFHbHpMbVZ0YVhRb0ozUjRPbmRoY201cGJtY25MQ0IwZUUxbGRHRXNJR1Z5Y2lrN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dGM1lXbDBJSFJvYVhNdVgyTm9aV05yU1daVWVGZGhjMFJ5YjNCd1pXUW9kSGhOWlhSaEtTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1bGJXbDBLQ2QwZURwa2NtOXdjR1ZrSnl3Z2RIaEpaQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOb1pXTnJjeUIzYUdWMGFHVnlJSFJvWlNCdWIyNWpaU0JwYmlCMGFHVWdaMmwyWlc0Z2UwQmpiMlJsSUhSNFRXVjBZWDBnYVhNZ1ltVm9hVzVrSUhSb1pTQnVaWFIzYjNKcklHNXZibU5sWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCMGVFMWxkR0VnTFNCMGFHVWdkSEpoYm5OaFkzUnBiMjRnYldWMFlXUmhkR0ZjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMUJ5YjIxcGMyVThZbTl2YkdWaGJqNTlYRzRnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FxTDF4dUlDQmhjM2x1WXlCZlkyaGxZMnRKWmxSNFYyRnpSSEp2Y0hCbFpDaDBlRTFsZEdFcElIdGNiaUFnSUNCamIyNXpkQ0I3WEc0Z0lDQWdJQ0JvWVhOb09pQjBlRWhoYzJnc1hHNGdJQ0FnSUNCMGVGQmhjbUZ0Y3pvZ2V5QnViMjVqWlN3Z1puSnZiU0I5TEZ4dUlDQWdJSDBnUFNCMGVFMWxkR0U3WEc0Z0lDQWdZMjl1YzNRZ2JtVjBkMjl5YTA1bGVIUk9iMjVqWlNBOUlHRjNZV2wwSUhSb2FYTXVjWFZsY25rdVoyVjBWSEpoYm5OaFkzUnBiMjVEYjNWdWRDaG1jbTl0S1R0Y2JseHVJQ0FnSUdsbUlDaHdZWEp6WlVsdWRDaHViMjVqWlN3Z01UWXBJRDQ5SUc1bGRIZHZjbXRPWlhoMFRtOXVZMlV1ZEc5T2RXMWlaWElvS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2doZEdocGN5NWtjbTl3Y0dWa1FteHZZMnR6UW5WbVptVnlRbmxJWVhOb0xtaGhjeWgwZUVoaGMyZ3BLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtUnliM0J3WldSQ2JHOWphM05DZFdabVpYSkNlVWhoYzJndWMyVjBLSFI0U0dGemFDd2dNQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ1kzVnljbVZ1ZEVKc2IyTnJRblZtWm1WeUlEMGdkR2hwY3k1a2NtOXdjR1ZrUW14dlkydHpRblZtWm1WeVFubElZWE5vTG1kbGRDaDBlRWhoYzJncE8xeHVYRzRnSUNBZ2FXWWdLR04xY25KbGJuUkNiRzlqYTBKMVptWmxjaUE4SUhSb2FYTXVSRkpQVUZCRlJGOUNWVVpHUlZKZlEwOVZUbFFwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVaSEp2Y0hCbFpFSnNiMk5yYzBKMVptWmxja0o1U0dGemFDNXpaWFFvZEhoSVlYTm9MQ0JqZFhKeVpXNTBRbXh2WTJ0Q2RXWm1aWElnS3lBeEtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TG1SeWIzQndaV1JDYkc5amEzTkNkV1ptWlhKQ2VVaGhjMmd1WkdWc1pYUmxLSFI0U0dGemFDazdYRzRnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTJobFkydHpJSGRvWlhSb1pYSWdkR2hsSUc1dmJtTmxJR2x1SUhSb1pTQm5hWFpsYmlCN1FHTnZaR1VnZEhoTlpYUmhmU0JwY3lCamIzSnlaV04wSUdGbllXbHVjM1FnZEdobElHeHZZMkZzSUhObGRDQnZaaUIwY21GdWMyRmpkR2x2Ym5OY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlIUjRUV1YwWVNBdElIUm9aU0IwY21GdWMyRmpkR2x2YmlCdFpYUmhaR0YwWVZ4dUlDQWdLaUJBY21WMGRYSnVjeUI3VUhKdmJXbHpaVHhpYjI5c1pXRnVQbjFjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvdlhHNGdJR0Z6ZVc1aklGOWphR1ZqYTBsbVRtOXVZMlZKYzFSaGEyVnVLSFI0VFdWMFlTa2dlMXh1SUNBZ0lHTnZibk4wSUdGa1pISmxjM01nUFNCMGVFMWxkR0V1ZEhoUVlYSmhiWE11Wm5KdmJUdGNiaUFnSUNCamIyNXpkQ0JqYjIxd2JHVjBaV1FnUFNCMGFHbHpMbWRsZEVOdmJYQnNaWFJsWkZSeVlXNXpZV04wYVc5dWN5aGhaR1J5WlhOektUdGNiaUFnSUNCeVpYUjFjbTRnWTI5dGNHeGxkR1ZrTG5OdmJXVW9YRzRnSUNBZ0lDQXZMeUJVYUdseklHbHpJR05oYkd4bFpDQjNhR2xzWlNCMGFHVWdkSEpoYm5OaFkzUnBiMjRnYVhNZ2FXNHRabXhwWjJoMExDQnpieUJwZENCcGN5QndiM056YVdKc1pTQjBhR0YwSUhSb1pWeHVJQ0FnSUNBZ0x5OGdiR2x6ZENCdlppQmpiMjF3YkdWMFpXUWdkSEpoYm5OaFkzUnBiMjV6SUc1dmR5QnBibU5zZFdSbGN5QjBhR1VnZEhKaGJuTmhZM1JwYjI0Z2QyVWdkMlZ5WlNCc2IyOXJhVzVuSUdGMFhHNGdJQ0FnSUNBdkx5QmhibVFnYVdZZ2RHaGhkQ0JwY3lCMGFHVWdZMkZ6WlN3Z1pHOXVKM1FnWTI5dWMybGtaWElnZEdobElIUnlZVzV6WVdOMGFXOXVJSFJ2SUdoaGRtVWdkR0ZyWlc0Z2FYUnpJRzkzYmlCdWIyNWpaVnh1SUNBZ0lDQWdLRzkwYUdWeUtTQTlQbHh1SUNBZ0lDQWdJQ0FoS0c5MGFHVnlMbWxrSUQwOVBTQjBlRTFsZEdFdWFXUXBJQ1ltWEc0Z0lDQWdJQ0FnSUc5MGFHVnlMblI0VUdGeVlXMXpMbTV2Ym1ObElEMDlQU0IwZUUxbGRHRXVkSGhRWVhKaGJYTXVibTl1WTJVc1hHNGdJQ0FnS1R0Y2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElFVjBhRkYxWlhKNUlHWnliMjBnSjJWMGFHcHpMWEYxWlhKNUp6dGNibWx0Y0c5eWRDQnNiMmNnWm5KdmJTQW5iRzluYkdWMlpXd25PMXh1YVcxd2IzSjBJSHNnWVdSa1NHVjRVSEpsWm1sNElIMGdabkp2YlNBblpYUm9aWEpsZFcxcWN5MTFkR2xzSnp0Y2JtbHRjRzl5ZENCN0lHTnNiMjVsUkdWbGNDQjlJR1p5YjIwZ0oyeHZaR0Z6YUNjN1hHNXBiWEJ2Y25RZ2V5Qm9aWGhVYjBKdUxDQkNiazExYkhScGNHeDVRbmxHY21GamRHbHZiaUI5SUdaeWIyMGdKeTR1THk0dUwyeHBZaTkxZEdsc0p6dGNibWx0Y0c5eWRDQjdJR0p1Vkc5SVpYZ2dmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZiVzlrZFd4bGN5OWpiMjUyWlhKemFXOXVMblYwYVd4ekp6dGNibHh1THlvcVhHNGdLaUJTWlhOMWJIUWdiMllnWjJGeklHRnVZV3g1YzJsekxDQnBibU5zZFdScGJtY2daV2wwYUdWeUlHRWdaMkZ6SUdWemRHbHRZWFJsSUdadmNpQmhJSE4xWTJObGMzTm1kV3dnWVc1aGJIbHphWE1zSUc5eVhHNGdLaUJrWldKMVp5QnBibVp2Y20xaGRHbHZiaUJtYjNJZ1lTQm1ZV2xzWldRZ1lXNWhiSGx6YVhNdVhHNGdLbHh1SUNvZ1FIUjVjR1ZrWldZZ2UyOWlhbVZqZEgwZ1IyRnpRVzVoYkhsemFYTlNaWE4xYkhSY2JpQXFJRUJ3Y205d1pYSjBlU0I3YzNSeWFXNW5mU0JpYkc5amEwZGhjMHhwYldsMElDMGdWR2hsSUdkaGN5QnNhVzFwZENCdlppQjBhR1VnWW14dlkyc2dkWE5sWkNCbWIzSWdkR2hsSUdGdVlXeDVjMmx6WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlM04wY21sdVozMGdaWE4wYVcxaGRHVmtSMkZ6U0dWNElDMGdWR2hsSUdWemRHbHRZWFJsWkNCbllYTXNJR2x1SUdobGVHRmtaV05wYldGc1hHNGdLaUJBY0hKdmNHVnlkSGtnZTI5aWFtVmpkSDBnYzJsdGRXeGhkR2x2YmtaaGFXeHpJQzBnUkdWaWRXY2dhVzVtYjNKdFlYUnBiMjRnWVdKdmRYUWdkMmg1SUdGdUlHRnVZV3g1YzJseklHWmhhV3hsWkZ4dUlDb3ZYRzVjYmk4cUtseHVJQ29nZEhndFoyRnpMWFYwYVd4eklHRnlaU0JuWVhNZ2RYUnBiR2wwZVNCdFpYUm9iMlJ6SUdadmNpQlVjbUZ1YzJGamRHbHZiaUJ0WVc1aFoyVnlYRzRnS2lCcGRITWdjR0Z6YzJWa0lHVjBhSEYxWlhKNVhHNGdLaUJoYm1RZ2RYTmxaQ0IwYnlCa2J5QjBhR2x1WjNNZ2JHbHJaU0JqWVd4amRXeGhkR1VnWjJGeklHOW1JR0VnZEhndVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhCeWIzWnBaR1Z5SUMwZ1FTQnVaWFIzYjNKcklIQnliM1pwWkdWeUxseHVJQ292WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRlI0UjJGelZYUnBiQ0I3WEc0Z0lHTnZibk4wY25WamRHOXlLSEJ5YjNacFpHVnlLU0I3WEc0Z0lDQWdkR2hwY3k1eGRXVnllU0E5SUc1bGR5QkZkR2hSZFdWeWVTaHdjbTkyYVdSbGNpazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJSFI0VFdWMFlTQXRJSFJvWlNCMGVFMWxkR0VnYjJKcVpXTjBYRzRnSUNBcUlFQnlaWFIxY201eklIdEhZWE5CYm1Gc2VYTnBjMUpsYzNWc2RIMGdWR2hsSUhKbGMzVnNkQ0J2WmlCMGFHVWdaMkZ6SUdGdVlXeDVjMmx6WEc0Z0lDQXFMMXh1SUNCaGMzbHVZeUJoYm1Gc2VYcGxSMkZ6VlhOaFoyVW9kSGhOWlhSaEtTQjdYRzRnSUNBZ1kyOXVjM1FnWW14dlkyc2dQU0JoZDJGcGRDQjBhR2x6TG5GMVpYSjVMbWRsZEVKc2IyTnJRbmxPZFcxaVpYSW9KMnhoZEdWemRDY3NJR1poYkhObEtUdGNibHh1SUNBZ0lDOHZJR1poYkd4aVlXTnJJSFJ2SUdKc2IyTnJJR2RoYzB4cGJXbDBYRzRnSUNBZ1kyOXVjM1FnWW14dlkydEhZWE5NYVcxcGRFSk9JRDBnYUdWNFZHOUNiaWhpYkc5amF5NW5ZWE5NYVcxcGRDazdYRzRnSUNBZ1kyOXVjM1FnYzJGbVpYSkhZWE5NYVcxcGRFSk9JRDBnUW01TmRXeDBhWEJzZVVKNVJuSmhZM1JwYjI0b1lteHZZMnRIWVhOTWFXMXBkRUpPTENBeE9Td2dNakFwTzF4dUlDQWdJR3hsZENCbGMzUnBiV0YwWldSSFlYTklaWGdnUFNCaWJsUnZTR1Y0S0hOaFptVnlSMkZ6VEdsdGFYUkNUaWs3WEc0Z0lDQWdiR1YwSUhOcGJYVnNZWFJwYjI1R1lXbHNjenRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnWlhOMGFXMWhkR1ZrUjJGelNHVjRJRDBnWVhkaGFYUWdkR2hwY3k1bGMzUnBiV0YwWlZSNFIyRnpLSFI0VFdWMFlTazdYRzRnSUNBZ2ZTQmpZWFJqYUNBb1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUd4dlp5NTNZWEp1S0dWeWNtOXlLVHRjYmlBZ0lDQWdJSE5wYlhWc1lYUnBiMjVHWVdsc2N5QTlJSHRjYmlBZ0lDQWdJQ0FnY21WaGMyOXVPaUJsY25KdmNpNXRaWE56WVdkbExGeHVJQ0FnSUNBZ0lDQmxjbkp2Y2t0bGVUb2daWEp5YjNJdVpYSnliM0pMWlhrc1hHNGdJQ0FnSUNBZ0lHUmxZblZuT2lCN0lHSnNiMk5yVG5WdFltVnlPaUJpYkc5amF5NXVkVzFpWlhJc0lHSnNiMk5yUjJGelRHbHRhWFE2SUdKc2IyTnJMbWRoYzB4cGJXbDBJSDBzWEc0Z0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQmliRzlqYTBkaGMweHBiV2wwT2lCaWJHOWpheTVuWVhOTWFXMXBkQ3hjYmlBZ0lDQWdJR1Z6ZEdsdFlYUmxaRWRoYzBobGVDeGNiaUFnSUNBZ0lITnBiWFZzWVhScGIyNUdZV2xzY3l4Y2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFVnpkR2x0WVhSbGN5QjBhR1VnZEhnbmN5Qm5ZWE1nZFhOaFoyVmNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJSFI0VFdWMFlTQXRJSFJvWlNCMGVFMWxkR0VnYjJKcVpXTjBYRzRnSUNBcUlFQnlaWFIxY201eklIdHpkSEpwYm1kOUlIUm9aU0JsYzNScGJXRjBaV1FnWjJGeklHeHBiV2wwSUdGeklHRWdhR1Y0SUhOMGNtbHVaMXh1SUNBZ0tpOWNiaUFnWVhONWJtTWdaWE4wYVcxaGRHVlVlRWRoY3loMGVFMWxkR0VwSUh0Y2JpQWdJQ0JqYjI1emRDQjBlRkJoY21GdGN5QTlJR05zYjI1bFJHVmxjQ2gwZUUxbGRHRXVkSGhRWVhKaGJYTXBPMXh1WEc0Z0lDQWdMeThnWUdWMGFGOWxjM1JwYldGMFpVZGhjMkFnWTJGdUlHWmhhV3dnYVdZZ2RHaGxJSFZ6WlhJZ2FHRnpJR2x1YzNWbVptbGphV1Z1ZENCaVlXeGhibU5sSUdadmNpQjBhR1ZjYmlBZ0lDQXZMeUIyWVd4MVpTQmlaV2x1WnlCelpXNTBMQ0J2Y2lCbWIzSWdkR2hsSUdkaGN5QmpiM04wTGlCWFpTQmtiMjRuZENCM1lXNTBJSFJ2SUdOb1pXTnJJSFJvWldseVhHNGdJQ0FnTHk4Z1ltRnNZVzVqWlNCb1pYSmxMQ0IzWlNCcWRYTjBJSGRoYm5RZ2RHaGxJR2RoY3lCbGMzUnBiV0YwWlM0Z1ZHaGxJR2RoY3lCd2NtbGpaU0JwY3lCeVpXMXZkbVZrWEc0Z0lDQWdMeThnZEc4Z2MydHBjQ0IwYUc5elpTQmlZV3hoYm1ObElHTm9aV05yY3k0Z1YyVWdZMmhsWTJzZ1ltRnNZVzVqWlNCbGJITmxkMmhsY21VdUlGZGxJR0ZzYzI4Z1pHVnNaWFJsWEc0Z0lDQWdMeThnYldGNFJtVmxVR1Z5UjJGeklHRnVaQ0J0WVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3lCMGJ5QnpkWEJ3YjNKMElFVkpVQzB4TlRVNUlIUjRjeTVjYmlBZ0lDQmtaV3hsZEdVZ2RIaFFZWEpoYlhNdVoyRnpVSEpwWTJVN1hHNGdJQ0FnWkdWc1pYUmxJSFI0VUdGeVlXMXpMbTFoZUVabFpWQmxja2RoY3p0Y2JpQWdJQ0JrWld4bGRHVWdkSGhRWVhKaGJYTXViV0Y0VUhKcGIzSnBkSGxHWldWUVpYSkhZWE03WEc1Y2JpQWdJQ0F2THlCbGMzUnBiV0YwWlNCMGVDQm5ZWE1nY21WeGRXbHlaVzFsYm5SelhHNGdJQ0FnY21WMGRYSnVJR0YzWVdsMElIUm9hWE11Y1hWbGNua3VaWE4wYVcxaGRHVkhZWE1vZEhoUVlYSmhiWE1wTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmtaSE1nWVNCbllYTWdZblZtWm1WeUlIZHBkR2dnYjNWMElHVjRZMlZsWkdsdVp5QjBhR1VnWW14dlkyc2daMkZ6SUd4cGJXbDBYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JwYm1sMGFXRnNSMkZ6VEdsdGFYUklaWGdnTFNCMGFHVWdhVzVwZEdsaGJDQm5ZWE1nYkdsdGFYUWdkRzhnWVdSa0lIUm9aU0JpZFdabVpYSWdkRzl2WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmliRzlqYTBkaGMweHBiV2wwU0dWNElDMGdkR2hsSUdKc2IyTnJJR2RoY3lCc2FXMXBkRnh1SUNBZ0tpQkFjR0Z5WVcwZ2JYVnNkR2x3YkdsbGNseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2MzUnlhVzVuZlNCMGFHVWdZblZtWm1WeVpXUWdaMkZ6SUd4cGJXbDBJR0Z6SUdFZ2FHVjRJSE4wY21sdVoxeHVJQ0FnS2k5Y2JpQWdZV1JrUjJGelFuVm1abVZ5S0dsdWFYUnBZV3hIWVhOTWFXMXBkRWhsZUN3Z1lteHZZMnRIWVhOTWFXMXBkRWhsZUN3Z2JYVnNkR2x3YkdsbGNpQTlJREV1TlNrZ2UxeHVJQ0FnSUdOdmJuTjBJR2x1YVhScFlXeEhZWE5NYVcxcGRFSnVJRDBnYUdWNFZHOUNiaWhwYm1sMGFXRnNSMkZ6VEdsdGFYUklaWGdwTzF4dUlDQWdJR052Ym5OMElHSnNiMk5yUjJGelRHbHRhWFJDYmlBOUlHaGxlRlJ2UW00b1lteHZZMnRIWVhOTWFXMXBkRWhsZUNrN1hHNGdJQ0FnWTI5dWMzUWdkWEJ3WlhKSFlYTk1hVzFwZEVKdUlEMGdZbXh2WTJ0SFlYTk1hVzFwZEVKdUxtMTFiRzRvTUM0NUtUdGNiaUFnSUNCamIyNXpkQ0JpZFdabVpYSmxaRWRoYzB4cGJXbDBRbTRnUFNCcGJtbDBhV0ZzUjJGelRHbHRhWFJDYmk1dGRXeHVLRzExYkhScGNHeHBaWElwTzF4dVhHNGdJQ0FnTHk4Z2FXWWdhVzVwZEdsaGJFZGhjMHhwYldsMElHbHpJR0ZpYjNabElHSnNiMk5yUjJGelRHbHRhWFFzSUdSdmJuUWdiVzlrYVdaNUlHbDBYRzRnSUNBZ2FXWWdLR2x1YVhScFlXeEhZWE5NYVcxcGRFSnVMbWQwS0hWd2NHVnlSMkZ6VEdsdGFYUkNiaWtwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJpYmxSdlNHVjRLR2x1YVhScFlXeEhZWE5NYVcxcGRFSnVLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdhV1lnWW5WbVptVnlaV1JIWVhOTWFXMXBkQ0JwY3lCaVpXeHZkeUJpYkc5amEwZGhjMHhwYldsMExDQjFjMlVnWW5WbVptVnlaV1JIWVhOTWFXMXBkRnh1SUNBZ0lHbG1JQ2hpZFdabVpYSmxaRWRoYzB4cGJXbDBRbTR1YkhRb2RYQndaWEpIWVhOTWFXMXBkRUp1S1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdKdVZHOUlaWGdvWW5WbVptVnlaV1JIWVhOTWFXMXBkRUp1S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnYjNSb1pYSjNhWE5sSUhWelpTQmliRzlqYTBkaGMweHBiV2wwWEc0Z0lDQWdjbVYwZFhKdUlHSnVWRzlJWlhnb2RYQndaWEpIWVhOTWFXMXBkRUp1S1R0Y2JpQWdmVnh1WEc0Z0lHRnplVzVqSUdkbGRFSjFabVpsY21Wa1IyRnpUR2x0YVhRb2RIaE5aWFJoTENCdGRXeDBhWEJzYVdWeUtTQjdYRzRnSUNBZ1kyOXVjM1FnZXlCaWJHOWphMGRoYzB4cGJXbDBMQ0JsYzNScGJXRjBaV1JIWVhOSVpYZ3NJSE5wYlhWc1lYUnBiMjVHWVdsc2N5QjlJRDFjYmlBZ0lDQWdJR0YzWVdsMElIUm9hWE11WVc1aGJIbDZaVWRoYzFWellXZGxLSFI0VFdWMFlTazdYRzRnSUNBZ0x5OGdZV1JrSUdGa1pHbDBhVzl1WVd3Z1oyRnpJR0oxWm1abGNpQjBieUJ2ZFhJZ1pYTjBhVzFoZEdsdmJpQm1iM0lnYzJGbVpYUjVYRzRnSUNBZ1kyOXVjM1FnWjJGelRHbHRhWFFnUFNCMGFHbHpMbUZrWkVkaGMwSjFabVpsY2loY2JpQWdJQ0FnSUdGa1pFaGxlRkJ5WldacGVDaGxjM1JwYldGMFpXUkhZWE5JWlhncExGeHVJQ0FnSUNBZ1lteHZZMnRIWVhOTWFXMXBkQ3hjYmlBZ0lDQWdJRzExYkhScGNHeHBaWElzWEc0Z0lDQWdLVHRjYmlBZ0lDQnlaWFIxY200Z2V5Qm5ZWE5NYVcxcGRDd2djMmx0ZFd4aGRHbHZia1poYVd4eklIMDdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0JGZG1WdWRFVnRhWFIwWlhJZ1puSnZiU0FuUUcxbGRHRnRZWE5yTDNOaFptVXRaWFpsYm5RdFpXMXBkSFJsY2ljN1hHNXBiWEJ2Y25RZ2V5QlBZbk5sY25aaFlteGxVM1J2Y21VZ2ZTQm1jbTl0SUNkQWJXVjBZVzFoYzJzdmIySnpMWE4wYjNKbEp6dGNibWx0Y0c5eWRDQnNiMmNnWm5KdmJTQW5iRzluYkdWMlpXd25PMXh1YVcxd2IzSjBJSHNnZG1Gc2RXVnpMQ0JyWlhsQ2VTd2diV0Z3Vm1Gc2RXVnpMQ0J2YldsMFFua3NJSEJwWTJ0Q2VTd2djMjl5ZEVKNUlIMGdabkp2YlNBbmJHOWtZWE5vSnp0Y2JtbHRjRzl5ZENCamNtVmhkR1ZKWkNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2Ylc5a2RXeGxjeTl5WVc1a2IyMHRhV1FuTzF4dWFXMXdiM0owSUhzZ1ZISmhibk5oWTNScGIyNVRkR0YwZFhNZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwzUnlZVzV6WVdOMGFXOXVKenRjYm1sdGNHOXlkQ0I3SUUxRlZFRk5RVk5MWDBOUFRsUlNUMHhNUlZKZlJWWkZUbFJUSUgwZ1puSnZiU0FuTGk0dkxpNHZiV1YwWVcxaGMyc3RZMjl1ZEhKdmJHeGxjaWM3WEc1cGJYQnZjblFnZXlCMGNtRnVjMkZqZEdsdmJrMWhkR05vWlhOT1pYUjNiM0pySUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmMyaGhjbVZrTDIxdlpIVnNaWE12ZEhKaGJuTmhZM1JwYjI0dWRYUnBiSE1uTzF4dWFXMXdiM0owSUhzZ1QxSkpSMGxPWDAxRlZFRk5RVk5MSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmMyaGhjbVZrTDJOdmJuTjBZVzUwY3k5aGNIQW5PMXh1YVcxd2IzSjBJSHNnVG1WMGQyOXlhMU4wWVhSMWN5QjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZibVYwZDI5eWF5YzdYRzVwYlhCdmNuUWdlMXh1SUNCblpXNWxjbUYwWlVocGMzUnZjbmxGYm5SeWVTeGNiaUFnY21Wd2JHRjVTR2x6ZEc5eWVTeGNiaUFnYzI1aGNITm9iM1JHY205dFZIaE5aWFJoTEZ4dWZTQm1jbTl0SUNjdUwyeHBZaTkwZUMxemRHRjBaUzFvYVhOMGIzSjVMV2hsYkhCbGNuTW5PMXh1YVcxd2IzSjBJSHRjYmlBZ1oyVjBSbWx1WVd4VGRHRjBaWE1zWEc0Z0lHNXZjbTFoYkdsNlpVRnVaRlpoYkdsa1lYUmxWSGhRWVhKaGJYTXNYRzRnSUhaaGJHbGtZWFJsUTI5dVptbHliV1ZrUlhoMFpYSnVZV3hVY21GdWMyRmpkR2x2Yml4Y2JuMGdabkp2YlNBbkxpOXNhV0l2ZFhScGJDYzdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQkZVbEpQVWw5VFZVSk5TVlJVU1U1SElEMWNiaUFnSjFSb1pYSmxJSGRoY3lCaGJpQmxjbkp2Y2lCM2FHVnVJSEpsYzNWaWJXbDBkR2x1WnlCMGFHbHpJSFJ5WVc1ellXTjBhVzl1TGljN1hHNHZLaXBjYmlBcUlGUnlZVzV6WVdOMGFXOXVVM1JoZEhWelpYTWdjbVZwYlhCdmNuUmxaQ0JtY205dElIUm9aU0J6YUdGeVpXUWdkSEpoYm5OaFkzUnBiMjRnWTI5dWMzUmhiblJ6SUdacGJHVmNiaUFxWEc0Z0tpQkFkSGx3WldSbFppQjdhVzF3YjNKMEtGeHVJQ29nSUNjdUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwzUnlZVzV6WVdOMGFXOXVKMXh1SUNvZ0tTNVVjbUZ1YzJGamRHbHZibE4wWVhSMWMxTjBjbWx1WjMwZ1ZISmhibk5oWTNScGIyNVRkR0YwZFhOVGRISnBibWRjYmlBcUwxeHVYRzR2S2lwY2JpQXFJRUIwZVhCbFpHVm1JSHRwYlhCdmNuUW9KeTR1THk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12ZEhKaGJuTmhZM1JwYjI0bktTNVVlRkJoY21GdGMzMGdWSGhRWVhKaGJYTmNiaUFxTDF4dVhHNHZLaXBjYmlBcUlFQjBlWEJsWkdWbUlIdHBiWEJ2Y25Rb1hHNGdLaUFnSnk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmRISmhibk5oWTNScGIyNG5YRzRnS2lBcExsUnlZVzV6WVdOMGFXOXVUV1YwWVgwZ1ZISmhibk5oWTNScGIyNU5aWFJoWEc0Z0tpOWNibHh1THlvcVhHNGdLaUJBZEhsd1pXUmxaaUI3YjJKcVpXTjBmU0JVY21GdWMyRmpkR2x2YmxOMFlYUmxYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UxSmxZMjl5WkR4emRISnBibWNzSUZSeVlXNXpZV04wYVc5dVRXVjBZVDU5SUhSeVlXNXpZV04wYVc5dWN5QXRJRlJ5WVc1ellXTjBhVzl1VFdWMFlWeHVJQ29nSUd0bGVXVmtJR0o1SUhSb1pTQjBjbUZ1YzJGamRHbHZiaWR6SUdsa0xseHVJQ292WEc1Y2JpOHFLbHh1SUNvZ1ZISmhibk5oWTNScGIyNVRkR0YwWlUxaGJtRm5aWElnYVhNZ2NtVnpjRzl1YzJsaWJHVWdabTl5SUhSb1pTQnpkR0YwWlNCdlppQmhJSFJ5WVc1ellXTjBhVzl1SUdGdVpGeHVJQ29nYzNSdmNtbHVaeUIwYUdVZ2RISmhibk5oWTNScGIyNHVJRWwwSUdGc2MyOGdhR0Z6SUhOdmJXVWdZMjl1ZG1WdWFXVnVZMlVnYldWMGFHOWtjeUJtYjNJZ1ptbHVaR2x1WjF4dUlDb2djM1ZpYzJWMGN5QnZaaUIwY21GdWMyRmpkR2x2Ym5NdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUc5d2RITmNiaUFxSUVCd1lYSmhiU0I3VkhKaGJuTmhZM1JwYjI1VGRHRjBaWDBnVzI5d2RITXVhVzVwZEZOMFlYUmxQWHNnZEhKaGJuTmhZM1JwYjI1ek9pQjdmU0I5WFNBdElHbHVhWFJwWVd4Y2JpQXFJQ0IwY21GdWMyRmpkR2x2Ym5NZ2JHbHpkQ0JyWlhsbFpDQmllU0JwWkZ4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlGdHZjSFJ6TG5SNFNHbHpkRzl5ZVV4cGJXbDBYU0F0SUd4cGJXbDBJR1p2Y2lCb2IzY2diV0Z1ZVNCbWFXNXBjMmhsWkZ4dUlDb2dJSFJ5WVc1ellXTjBhVzl1Y3lCallXNGdhR0Z1WnlCaGNtOTFibVFnYVc0Z2MzUmhkR1ZjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHOXdkSE11WjJWMFRtVjBkMjl5YTBsa0lDMGdSMlYwSUhSb1pTQmpkWEp5Wlc1MElHNWxkSGR2Y21zZ1NXUXVYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCdmNIUnpMbWRsZEU1bGRIZHZjbXRUZEdGMGRYTWdMU0JIWlhRZ2RHaGxJR04xY25KbGJuUWdibVYwZDI5eWF5QnpkR0YwZFhNdVhHNGdLaTljYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGUnlZVzV6WVdOMGFXOXVVM1JoZEdWTllXNWhaMlZ5SUdWNGRHVnVaSE1nUlhabGJuUkZiV2wwZEdWeUlIdGNiaUFnWTI5dWMzUnlkV04wYjNJb2UxeHVJQ0FnSUdsdWFYUlRkR0YwWlN4Y2JpQWdJQ0IwZUVocGMzUnZjbmxNYVcxcGRDeGNiaUFnSUNCblpYUk9aWFIzYjNKclNXUXNYRzRnSUNBZ1oyVjBUbVYwZDI5eWExTjBZWFIxY3l4Y2JpQWdJQ0JuWlhSRGRYSnlaVzUwUTJoaGFXNUpaQ3hjYmlBZ2ZTa2dlMXh1SUNBZ0lITjFjR1Z5S0NrN1hHNWNiaUFnSUNCMGFHbHpMbk4wYjNKbElEMGdibVYzSUU5aWMyVnlkbUZpYkdWVGRHOXlaU2g3WEc0Z0lDQWdJQ0IwY21GdWMyRmpkR2x2Ym5NNklIdDlMRnh1SUNBZ0lDQWdMaTR1YVc1cGRGTjBZWFJsTEZ4dUlDQWdJSDBwTzF4dUlDQWdJSFJvYVhNdWRIaElhWE4wYjNKNVRHbHRhWFFnUFNCMGVFaHBjM1J2Y25sTWFXMXBkRHRjYmlBZ0lDQjBhR2x6TG1kbGRFNWxkSGR2Y210SlpDQTlJR2RsZEU1bGRIZHZjbXRKWkR0Y2JpQWdJQ0IwYUdsekxtZGxkRTVsZEhkdmNtdFRkR0YwZFhNZ1BTQm5aWFJPWlhSM2IzSnJVM1JoZEhWek8xeHVJQ0FnSUhSb2FYTXVaMlYwUTNWeWNtVnVkRU5vWVdsdVNXUWdQU0JuWlhSRGRYSnlaVzUwUTJoaGFXNUpaRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCSFpXNWxjbUYwWlhNZ1lTQlVjbUZ1YzJGamRHbHZiazFsZEdFZ2IySnFaV04wSUdOdmJuTnBjM1JwYm1jZ2IyWWdkR2hsSUdacFpXeGtjeUJ5WlhGMWFYSmxaQ0JtYjNKY2JpQWdJQ29nZFhObElIUm9jbTkxWjJodmRYUWdkR2hsSUdWNGRHVnVjMmx2Ymk0Z1ZHaGxJR0Z5WjNWdFpXNTBJR2hsY21VZ2QybHNiQ0J2ZG1WeWNtbGtaU0JsZG1WeWVYUm9hVzVuWEc0Z0lDQXFJR2x1SUhSb1pTQnlaWE4xYkhScGJtY2dkSEpoYm5OaFkzUnBiMjRnYldWMFlTNWNiaUFnSUNwY2JpQWdJQ29nVkU5RVR6b2dSRzl1SjNRZ2IzWmxjbmR5YVhSbElHVjJaWEo1ZEdocGJtYy9YRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VUdGeWRHbGhiRHhVY21GdWMyRmpkR2x2YmsxbGRHRStmU0J2Y0hSeklDMGdkR2hsSUc5aWFtVmpkQ0IwYnlCMWMyVWdkMmhsYmx4dUlDQWdLaUFnYjNabGNuZHlhWFJwYm1jZ1pHVm1ZWFZzZENCclpYbHpJRzltSUhSb1pTQlVjbUZ1YzJGamRHbHZiazFsZEdGY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFSeVlXNXpZV04wYVc5dVRXVjBZWDBnZEdobElHUmxabUYxYkhRZ2RIaE5aWFJoSUc5aWFtVmpkRnh1SUNBZ0tpOWNiaUFnWjJWdVpYSmhkR1ZVZUUxbGRHRW9iM0IwY3lBOUlIdDlLU0I3WEc0Z0lDQWdZMjl1YzNRZ2JtVjBkMjl5YTBsa0lEMGdkR2hwY3k1blpYUk9aWFIzYjNKclNXUW9LVHRjYmlBZ0lDQmpiMjV6ZENCdVpYUjNiM0pyVTNSaGRIVnpJRDBnZEdocGN5NW5aWFJPWlhSM2IzSnJVM1JoZEhWektDazdYRzRnSUNBZ1kyOXVjM1FnWTJoaGFXNUpaQ0E5SUhSb2FYTXVaMlYwUTNWeWNtVnVkRU5vWVdsdVNXUW9LVHRjYmlBZ0lDQnBaaUFvYm1WMGQyOXlhMU4wWVhSMWN5QWhQVDBnVG1WMGQyOXlhMU4wWVhSMWN5NUJkbUZwYkdGaWJHVXBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25UV1YwWVUxaGMyc2dhWE1nYUdGMmFXNW5JSFJ5YjNWaWJHVWdZMjl1Ym1WamRHbHVaeUIwYnlCMGFHVWdibVYwZDI5eWF5Y3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0JrWVhCd1UzVm5aMlZ6ZEdWa1IyRnpSbVZsY3lBOUlHNTFiR3c3WEc1Y2JpQWdJQ0F2THlCSlppQjNaU0JoY21VZ1pHVmhiR2x1WnlCM2FYUm9JR0VnZEhKaGJuTmhZM1JwYjI0Z2MzVm5aMlZ6ZEdWa0lHSjVJR0VnWkdGd2NDQmhibVFnYm05MFhHNGdJQ0FnTHk4Z1lXNGdhVzUwWlhKdVlXeHNlU0JqY21WaGRHVmtJRzFsZEdGdFlYTnJJSFJ5WVc1ellXTjBhVzl1TENCM1pTQnVaV1ZrSUhSdklHdGxaWEFnY21WamIzSmtJRzltWEc0Z0lDQWdMeThnZEdobElHOXlhV2RwYm1Gc2JIa2djM1ZpYldsMGRHVmtJR2RoYzFCaGNtRnRjeTVjYmlBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0J2Y0hSekxuUjRVR0Z5WVcxeklDWW1YRzRnSUNBZ0lDQjBlWEJsYjJZZ2IzQjBjeTV2Y21sbmFXNGdQVDA5SUNkemRISnBibWNuSUNZbVhHNGdJQ0FnSUNCdmNIUnpMbTl5YVdkcGJpQWhQVDBnVDFKSlIwbE9YMDFGVkVGTlFWTkxYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRzl3ZEhNdWRIaFFZWEpoYlhNdVoyRnpVSEpwWTJVZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lHUmhjSEJUZFdkblpYTjBaV1JIWVhOR1pXVnpJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lHZGhjMUJ5YVdObE9pQnZjSFJ6TG5SNFVHRnlZVzF6TG1kaGMxQnlhV05sTEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGNiaUFnSUNBZ0lDQWdkSGx3Wlc5bUlHOXdkSE11ZEhoUVlYSmhiWE11YldGNFJtVmxVR1Z5UjJGeklDRTlQU0FuZFc1a1pXWnBibVZrSnlCOGZGeHVJQ0FnSUNBZ0lDQjBlWEJsYjJZZ2IzQjBjeTUwZUZCaGNtRnRjeTV0WVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3lBaFBUMGdKM1Z1WkdWbWFXNWxaQ2RjYmlBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCa1lYQndVM1ZuWjJWemRHVmtSMkZ6Um1WbGN5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNCdFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN6b2diM0IwY3k1MGVGQmhjbUZ0Y3k1dFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN5eGNiaUFnSUNBZ0lDQWdJQ0J0WVhoR1pXVlFaWEpIWVhNNklHOXdkSE11ZEhoUVlYSmhiWE11YldGNFJtVmxVR1Z5UjJGekxGeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc5d2RITXVkSGhRWVhKaGJYTXVaMkZ6SUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNCa1lYQndVM1ZuWjJWemRHVmtSMkZ6Um1WbGN5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBdUxpNWtZWEJ3VTNWbloyVnpkR1ZrUjJGelJtVmxjeXhjYmlBZ0lDQWdJQ0FnSUNCbllYTTZJRzl3ZEhNdWRIaFFZWEpoYlhNdVoyRnpMRnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQnBaRG9nWTNKbFlYUmxTV1FvS1N4Y2JpQWdJQ0FnSUhScGJXVTZJRzVsZHlCRVlYUmxLQ2t1WjJWMFZHbHRaU2dwTEZ4dUlDQWdJQ0FnYzNSaGRIVnpPaUJVY21GdWMyRmpkR2x2YmxOMFlYUjFjeTUxYm1Gd2NISnZkbVZrTEZ4dUlDQWdJQ0FnYldWMFlXMWhjMnRPWlhSM2IzSnJTV1E2SUc1bGRIZHZjbXRKWkN4Y2JpQWdJQ0FnSUc5eWFXZHBibUZzUjJGelJYTjBhVzFoZEdVNklHOXdkSE11ZEhoUVlYSmhiWE0vTG1kaGN5eGNiaUFnSUNBZ0lIVnpaWEpGWkdsMFpXUkhZWE5NYVcxcGREb2dabUZzYzJVc1hHNGdJQ0FnSUNCamFHRnBia2xrTEZ4dUlDQWdJQ0FnYkc5aFpHbHVaMFJsWm1GMWJIUnpPaUIwY25WbExGeHVJQ0FnSUNBZ1pHRndjRk4xWjJkbGMzUmxaRWRoYzBabFpYTXNYRzRnSUNBZ0lDQnpaVzVrUm14dmQwaHBjM1J2Y25rNklGdGRMRnh1SUNBZ0lDQWdMaTR1YjNCMGN5eGNiaUFnSUNCOU8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWRsZENCaGJpQnZZbXBsWTNRZ1kyOXVkR0ZwYm1sdVp5QmhiR3dnZFc1aGNIQnliM1psWkNCMGNtRnVjMkZqZEdsdmJuTWdabTl5SUhSb1pTQmpkWEp5Wlc1MFhHNGdJQ0FxSUc1bGRIZHZjbXN1SUZSb2FYTWdhWE1nZEdobElHOXViSGtnZEhKaGJuTmhZM1JwYjI0Z1ptVjBZMmhwYm1jZ2JXVjBhRzlrSUhSb1lYUWdjbVYwZFhKdWN5QmhibHh1SUNBZ0tpQnZZbXBsWTNRc0lITnZJR2wwSUdSdlpYTnVKM1FnZFhObElHZGxkRlJ5WVc1ellXTjBhVzl1Y3lCc2FXdGxJR1YyWlhKNWRHaHBibWNnWld4elpTNWNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFKbFkyOXlaRHh6ZEhKcGJtY3NJRlJ5WVc1ellXTjBhVzl1VFdWMFlUNTlJRlZ1WVhCd2NtOTJaV1FnZEhKaGJuTmhZM1JwYjI1eklHdGxlV1ZrWEc0Z0lDQXFJQ0JpZVNCcFpGeHVJQ0FnS2k5Y2JpQWdaMlYwVlc1aGNIQnliM1psWkZSNFRHbHpkQ2dwSUh0Y2JpQWdJQ0JqYjI1emRDQmphR0ZwYmtsa0lEMGdkR2hwY3k1blpYUkRkWEp5Wlc1MFEyaGhhVzVKWkNncE8xeHVJQ0FnSUdOdmJuTjBJRzVsZEhkdmNtdEpaQ0E5SUhSb2FYTXVaMlYwVG1WMGQyOXlhMGxrS0NrN1hHNGdJQ0FnY21WMGRYSnVJSEJwWTJ0Q2VTaGNiaUFnSUNBZ0lIUm9hWE11YzNSdmNtVXVaMlYwVTNSaGRHVW9LUzUwY21GdWMyRmpkR2x2Ym5Nc1hHNGdJQ0FnSUNBb2RISmhibk5oWTNScGIyNHBJRDArWEc0Z0lDQWdJQ0FnSUhSeVlXNXpZV04wYVc5dUxuTjBZWFIxY3lBOVBUMGdWSEpoYm5OaFkzUnBiMjVUZEdGMGRYTXVkVzVoY0hCeWIzWmxaQ0FtSmx4dUlDQWdJQ0FnSUNCMGNtRnVjMkZqZEdsdmJrMWhkR05vWlhOT1pYUjNiM0pyS0hSeVlXNXpZV04wYVc5dUxDQmphR0ZwYmtsa0xDQnVaWFIzYjNKclNXUXBMRnh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJWMElHRnNiQ0JoY0hCeWIzWmxaQ0IwY21GdWMyRmpkR2x2Ym5NZ1ptOXlJSFJvWlNCamRYSnlaVzUwSUc1bGRIZHZjbXN1SUVsbUlHRnVJR0ZrWkhKbGMzTWdhWE5jYmlBZ0lDb2djSEp2ZG1sa1pXUXNJSFJvWlNCc2FYTjBJSGRwYkd3Z1ltVWdablZ5ZEdobGNpQnlaV1pwYm1Wa0lIUnZJRzl1YkhrZ2RHaHZjMlVnZEhKaGJuTmhZM1JwYjI1elhHNGdJQ0FxSUc5eWFXZHBibUYwYVc1bklHWnliMjBnZEdobElITjFjSEJzYVdWa0lHRmtaSEpsYzNNdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJZV1JrY21WemMxMGdMU0JvWlhnZ2NISmxabWw0WldRZ1lXUmtjbVZ6Y3lCMGJ5Qm1hVzVrSUhSeVlXNXpZV04wYVc5dWN5Qm1iM0l1WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRVY21GdWMyRmpkR2x2YmsxbGRHRmJYWDBnZEdobElHWnBiSFJsY21Wa0lHeHBjM1FnYjJZZ2RISmhibk5oWTNScGIyNXpYRzRnSUNBcUwxeHVJQ0JuWlhSQmNIQnliM1psWkZSeVlXNXpZV04wYVc5dWN5aGhaR1J5WlhOektTQjdYRzRnSUNBZ1kyOXVjM1FnYzJWaGNtTm9RM0pwZEdWeWFXRWdQU0I3SUhOMFlYUjFjem9nVkhKaGJuTmhZM1JwYjI1VGRHRjBkWE11WVhCd2NtOTJaV1FnZlR0Y2JpQWdJQ0JwWmlBb1lXUmtjbVZ6Y3lrZ2UxeHVJQ0FnSUNBZ2MyVmhjbU5vUTNKcGRHVnlhV0V1Wm5KdmJTQTlJR0ZrWkhKbGMzTTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGxkRlJ5WVc1ellXTjBhVzl1Y3loN0lITmxZWEpqYUVOeWFYUmxjbWxoSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWRsZENCaGJHd2djR1Z1WkdsdVp5QjBjbUZ1YzJGamRHbHZibk1nWm05eUlIUm9aU0JqZFhKeVpXNTBJRzVsZEhkdmNtc3VJRWxtSUdGdUlHRmtaSEpsYzNNZ2FYTmNiaUFnSUNvZ2NISnZkbWxrWldRc0lIUm9aU0JzYVhOMElIZHBiR3dnWW1VZ1puVnlkR2hsY2lCeVpXWnBibVZrSUhSdklHOXViSGtnZEdodmMyVWdkSEpoYm5OaFkzUnBiMjV6WEc0Z0lDQXFJRzl5YVdkcGJtRjBhVzVuSUdaeWIyMGdkR2hsSUhOMWNIQnNhV1ZrSUdGa1pISmxjM011WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYllXUmtjbVZ6YzEwZ0xTQm9aWGdnY0hKbFptbDRaV1FnWVdSa2NtVnpjeUIwYnlCbWFXNWtJSFJ5WVc1ellXTjBhVzl1Y3lCbWIzSXVYRzRnSUNBcUlFQnlaWFIxY201eklIdFVjbUZ1YzJGamRHbHZiazFsZEdGYlhYMGdkR2hsSUdacGJIUmxjbVZrSUd4cGMzUWdiMllnZEhKaGJuTmhZM1JwYjI1elhHNGdJQ0FxTDF4dUlDQm5aWFJRWlc1a2FXNW5WSEpoYm5OaFkzUnBiMjV6S0dGa1pISmxjM01wSUh0Y2JpQWdJQ0JqYjI1emRDQnpaV0Z5WTJoRGNtbDBaWEpwWVNBOUlIc2djM1JoZEhWek9pQlVjbUZ1YzJGamRHbHZibE4wWVhSMWN5NXpkV0p0YVhSMFpXUWdmVHRjYmlBZ0lDQnBaaUFvWVdSa2NtVnpjeWtnZTF4dUlDQWdJQ0FnYzJWaGNtTm9RM0pwZEdWeWFXRXVabkp2YlNBOUlHRmtaSEpsYzNNN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRGUnlZVzV6WVdOMGFXOXVjeWg3SUhObFlYSmphRU55YVhSbGNtbGhJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFZGxkQ0JoYkd3Z1kyOXVabWx5YldWa0lIUnlZVzV6WVdOMGFXOXVjeUJtYjNJZ2RHaGxJR04xY25KbGJuUWdibVYwZDI5eWF5NGdTV1lnWVc0Z1lXUmtjbVZ6Y3lCcGMxeHVJQ0FnS2lCd2NtOTJhV1JsWkN3Z2RHaGxJR3hwYzNRZ2QybHNiQ0JpWlNCbWRYSjBhR1Z5SUhKbFptbHVaV1FnZEc4Z2IyNXNlU0IwYUc5elpTQjBjbUZ1YzJGamRHbHZibk5jYmlBZ0lDb2diM0pwWjJsdVlYUnBibWNnWm5KdmJTQjBhR1VnYzNWd2NHeHBaV1FnWVdSa2NtVnpjeTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUZ0aFpHUnlaWE56WFNBdElHaGxlQ0J3Y21WbWFYaGxaQ0JoWkdSeVpYTnpJSFJ2SUdacGJtUWdkSEpoYm5OaFkzUnBiMjV6SUdadmNpNWNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UxUnlZVzV6WVdOMGFXOXVUV1YwWVZ0ZGZTQjBhR1VnWm1sc2RHVnlaV1FnYkdsemRDQnZaaUIwY21GdWMyRmpkR2x2Ym5OY2JpQWdJQ292WEc0Z0lHZGxkRU52Ym1acGNtMWxaRlJ5WVc1ellXTjBhVzl1Y3loaFpHUnlaWE56S1NCN1hHNGdJQ0FnWTI5dWMzUWdjMlZoY21Ob1EzSnBkR1Z5YVdFZ1BTQjdJSE4wWVhSMWN6b2dWSEpoYm5OaFkzUnBiMjVUZEdGMGRYTXVZMjl1Wm1seWJXVmtJSDA3WEc0Z0lDQWdhV1lnS0dGa1pISmxjM01wSUh0Y2JpQWdJQ0FnSUhObFlYSmphRU55YVhSbGNtbGhMbVp5YjIwZ1BTQmhaR1J5WlhOek8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUlVjbUZ1YzJGamRHbHZibk1vZXlCelpXRnlZMmhEY21sMFpYSnBZU0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhaWFFnZEhKaGJuTmhZM1JwYjI0Z2QybDBhQ0J3Y205MmFXUmxaQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUZ0aFkzUnBiMjVKWkYxY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFSeVlXNXpZV04wYVc5dVRXVjBZWDBnZEdobElHWnBiSFJsY21Wa0lIUnlZVzV6WVdOMGFXOXVYRzRnSUNBcUwxeHVJQ0JuWlhSVWNtRnVjMkZqZEdsdmJsZHBkR2hCWTNScGIyNUpaQ2hoWTNScGIyNUpaQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjJZV3gxWlhNb1hHNGdJQ0FnSUNCd2FXTnJRbmtvWEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tTNTBjbUZ1YzJGamRHbHZibk1zWEc0Z0lDQWdJQ0FnSUNoMGNtRnVjMkZqZEdsdmJpa2dQVDRnZEhKaGJuTmhZM1JwYjI0dVlXTjBhVzl1U1dRZ1BUMDlJR0ZqZEdsdmJrbGtMRnh1SUNBZ0lDQWdLU3hjYmlBZ0lDQXBXekJkTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmtaSE1nZEdobElIUjRUV1YwWVNCMGJ5QjBhR1VnYkdsemRDQnZaaUIwY21GdWMyRmpkR2x2Ym5NZ2FXNGdkR2hsSUhOMGIzSmxMbHh1SUNBZ0tpQnBaaUIwYUdVZ2JHbHpkQ0JwY3lCdmRtVnlJSFI0U0dsemRHOXllVXhwYldsMElHbDBJSGRwYkd3Z2NtVnRiM1psSUdFZ2RISmhibk5oWTNScGIyNGdkR2hoZEZ4dUlDQWdLaUJwY3lCcGJpQnBkSE1nWm1sdVlXd2djM1JoZEdVdVhHNGdJQ0FxSUdsMElIZHBiR3dnWVd4emJ5QmhaR1FnZEdobElHdGxlU0JnYUdsemRHOXllV0FnZEc4Z2RHaGxJSFI0VFdWMFlTQjNhWFJvSUhSb1pTQnpibUZ3SUhOb2IzUWdiMlpjYmlBZ0lDb2dkR2hsSUc5eWFXZHBibUZzSUc5aWFtVmpkRnh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTFSeVlXNXpZV04wYVc5dVRXVjBZWDBnZEhoTlpYUmhJQzBnVkdobElGUnlZVzV6WVdOMGFXOXVUV1YwWVNCdlltcGxZM1FnZEc4Z1lXUmtMbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdWSEpoYm5OaFkzUnBiMjVOWlhSaGZTQlVhR1VnYzJGdFpTQlVjbUZ1YzJGamRHbHZiazFsZEdFc0lHSjFkQ0IzYVhSb0lIWmhiR2xrWVhSbFpGeHVJQ0FnS2lBZ2RIaFFZWEpoYlhNZ1lXNWtJSFJ5WVc1ellXTjBhVzl1SUdocGMzUnZjbmt1WEc0Z0lDQXFMMXh1SUNCaFpHUlVjbUZ1YzJGamRHbHZiaWgwZUUxbGRHRXBJSHRjYmlBZ0lDQXZMeUJ1YjNKdFlXeHBlbVVnWVc1a0lIWmhiR2xrWVhSbElIUjRVR0Z5WVcxeklHbG1JSEJ5WlhObGJuUmNiaUFnSUNCcFppQW9kSGhOWlhSaExuUjRVR0Z5WVcxektTQjdYRzRnSUNBZ0lDQjBlRTFsZEdFdWRIaFFZWEpoYlhNZ1BTQnViM0p0WVd4cGVtVkJibVJXWVd4cFpHRjBaVlI0VUdGeVlXMXpLSFI0VFdWMFlTNTBlRkJoY21GdGN5d2dabUZzYzJVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXViMjVqWlNoZ0pIdDBlRTFsZEdFdWFXUjlPbk5wWjI1bFpHQXNJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lIUm9hWE11Y21WdGIzWmxRV3hzVEdsemRHVnVaWEp6S0dBa2UzUjRUV1YwWVM1cFpIMDZjbVZxWldOMFpXUmdLVHRjYmlBZ0lDQjlLVHRjYmlBZ0lDQjBhR2x6TG05dVkyVW9ZQ1I3ZEhoTlpYUmhMbWxrZlRweVpXcGxZM1JsWkdBc0lDZ3BJRDArSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjbVZ0YjNabFFXeHNUR2x6ZEdWdVpYSnpLR0FrZTNSNFRXVjBZUzVwWkgwNmMybG5ibVZrWUNrN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnTHk4Z2FXNXBkR2xoYkdsNlpTQm9hWE4wYjNKNVhHNGdJQ0FnZEhoTlpYUmhMbWhwYzNSdmNua2dQU0JiWFR0Y2JpQWdJQ0F2THlCallYQjBkWEpsSUdsdWFYUnBZV3dnYzI1aGNITm9iM1FnYjJZZ2RIaE5aWFJoSUdadmNpQm9hWE4wYjNKNVhHNGdJQ0FnWTI5dWMzUWdjMjVoY0hOb2IzUWdQU0J6Ym1Gd2MyaHZkRVp5YjIxVWVFMWxkR0VvZEhoTlpYUmhLVHRjYmlBZ0lDQjBlRTFsZEdFdWFHbHpkRzl5ZVM1d2RYTm9LSE51WVhCemFHOTBLVHRjYmx4dUlDQWdJR052Ym5OMElIUnlZVzV6WVdOMGFXOXVjeUE5SUhSb2FYTXVaMlYwVkhKaGJuTmhZM1JwYjI1ektIdGNiaUFnSUNBZ0lHWnBiSFJsY2xSdlEzVnljbVZ1ZEU1bGRIZHZjbXM2SUdaaGJITmxMRnh1SUNBZ0lIMHBPMXh1SUNBZ0lHTnZibk4wSUhzZ2RIaElhWE4wYjNKNVRHbHRhWFFnZlNBOUlIUm9hWE03WEc1Y2JpQWdJQ0F2THlCamFHVmphM01nYVdZZ2RHaGxJR3hsYm1kMGFDQnZaaUIwYUdVZ2RIZ2dhR2x6ZEc5eWVTQnBjeUJzYjI1blpYSWdkR2hsYmlCa1pYTnBjbVZrSUhCbGNuTnBjM1JsYm1ObFhHNGdJQ0FnTHk4Z2JHbHRhWFFnWVc1a0lIUm9aVzRnYVdZZ2FYUWdhWE1nY21WdGIzWmxjeUIwYUdVZ2IyeGtaWE4wSUdOdmJtWnBjbTFsWkNCdmNpQnlaV3BsWTNSbFpDQjBlQzVjYmlBZ0lDQXZMeUJRWlc1a2FXNW5JRzl5SUhWdVlYQndjbTkyWldRZ2RISmhibk5oWTNScGIyNXpJSGRwYkd3Z2JtOTBJR0psSUhKbGJXOTJaV1FnWW5rZ2RHaHBjMXh1SUNBZ0lDOHZJRzl3WlhKaGRHbHZiaTRnUm05eUlITmhabVYwZVNCdlppQndjbVZ6Wlc1MGFXNW5JR0VnWm5Wc2JIa2dablZ1WTNScGIyNWhiQ0IwY21GdWMyRmpkR2x2YmlCVlNWeHVJQ0FnSUM4dklISmxjSEpsYzJWdWRHRjBhVzl1TENCMGFHbHpJR1oxYm1OMGFXOXVJSGRwYkd3Z2JtOTBJR0p5WldGcklHRndZWEowSUhSeVlXNXpZV04wYVc5dWN5QjNhWFJvSUhSb1pWeHVJQ0FnSUM4dklITmhiV1VnYm05dVkyVXNJSEJsY2lCdVpYUjNiM0pyTGlCT2IzUWdZV05qYjNWdWRHbHVaeUJtYjNJZ2RISmhibk5oWTNScGIyNXpJRzltSUhSb1pTQnpZVzFsWEc0Z0lDQWdMeThnYm05dVkyVWdZVzVrSUc1bGRIZHZjbXNnWTI5dFltOGdZMkZ1SUhKbGMzVnNkQ0JwYmlCamIyNW1kWE5wYm1jZ2IzSWdZbkp2YTJWdUlHVjRjR1Z5YVdWdVkyVnpYRzRnSUNBZ0x5OGdhVzRnZEdobElGVkpMbHh1SUNBZ0lDOHZYRzRnSUNBZ0x5OGdWRTlFVHpvZ2QyVWdZWEpsSUdGc2NtVmhaSGtnYkdsdGFYUnBibWNnZDJoaGRDQjNaU0J6Wlc1a0lIUnZJSFJvWlNCVlNTd2dZVzVrSUdsdUlIUm9aU0JtZFhSMWNtVmNiaUFnSUNBdkx5QjNaU0IzYVd4c0lITmxibVFnVlVrZ2IyNXNlU0JqYjJ4c1pXTjBaV1FnWjNKdmRYQnpJRzltSUhSeVlXNXpZV04wYVc5dWN5QXFjR1Z5SUhCaFoyVXFJSE52SUdGMFhHNGdJQ0FnTHk4Z2MyOXRaU0J3YjJsdWRDQnBiaUIwYUdVZ1puVjBkWEpsTENCMGFHbHpJSEJsY25OcGMzUmxibU5sSUd4cGJXbDBJR05oYmlCaVpTQmhaR3AxYzNSbFpDNGdWMmhsYmx4dUlDQWdJQzh2SUhkbElHUnZJSFJvWVhRZ1NTQjBhR2x1YXlCM1pTQnphRzkxYkdRZ1ptbG5kWEpsSUc5MWRDQmhJR0psZEhSbGNpQnpkRzl5WVdkbElITnZiSFYwYVc5dUlHWnZjbHh1SUNBZ0lDOHZJSFJ5WVc1ellXTjBhVzl1SUdocGMzUnZjbmtnWlc1MGNtbGxjeTVjYmlBZ0lDQmpiMjV6ZENCdWIyNWpaVTVsZEhkdmNtdFRaWFFnUFNCdVpYY2dVMlYwS0NrN1hHNGdJQ0FnWTI5dWMzUWdkSGh6Vkc5RVpXeGxkR1VnUFNCMGNtRnVjMkZqZEdsdmJuTmNiaUFnSUNBZ0lDNXlaWFpsY25ObEtDbGNiaUFnSUNBZ0lDNW1hV3gwWlhJb0tIUjRLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhzZ2JtOXVZMlVzSUdaeWIyMGdmU0E5SUhSNExuUjRVR0Z5WVcxek8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHTm9ZV2x1U1dRc0lHMWxkR0Z0WVhOclRtVjBkMjl5YTBsa0xDQnpkR0YwZFhNZ2ZTQTlJSFI0TzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JyWlhrZ1BTQmdKSHR1YjI1alpYMHRKSHRqYUdGcGJrbGtJRDgvSUcxbGRHRnRZWE5yVG1WMGQyOXlhMGxrZlMwa2UyWnliMjE5WUR0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzV2Ym1ObFRtVjBkMjl5YTFObGRDNW9ZWE1vYTJWNUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNCdWIyNWpaVTVsZEhkdmNtdFRaWFF1YzJsNlpTQThJSFI0U0dsemRHOXllVXhwYldsMElDMGdNU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lHZGxkRVpwYm1Gc1UzUmhkR1Z6S0NrdWFXNWpiSFZrWlhNb2MzUmhkSFZ6S1NBOVBUMGdabUZzYzJWY2JpQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnYm05dVkyVk9aWFIzYjNKclUyVjBMbUZrWkNoclpYa3BPMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBdWJXRndLQ2gwZUNrZ1BUNGdkSGd1YVdRcE8xeHVYRzRnSUNBZ2RHaHBjeTVmWkdWc1pYUmxWSEpoYm5OaFkzUnBiMjV6S0hSNGMxUnZSR1ZzWlhSbEtUdGNiaUFnSUNCMGFHbHpMbDloWkdSVWNtRnVjMkZqZEdsdmJuTlViMU4wWVhSbEtGdDBlRTFsZEdGZEtUdGNiaUFnSUNCeVpYUjFjbTRnZEhoTlpYUmhPMXh1SUNCOVhHNWNiaUFnWVdSa1JYaDBaWEp1WVd4VWNtRnVjMkZqZEdsdmJpaDBlRTFsZEdFcElIdGNiaUFnSUNCamIyNXpkQ0JtY205dFFXUmtjbVZ6Y3lBOUlIUjRUV1YwWVQ4dWRIaFFZWEpoYlhNL0xtWnliMjA3WEc0Z0lDQWdZMjl1YzNRZ1kyOXVabWx5YldWa1ZISmhibk5oWTNScGIyNXpJRDBnZEdocGN5NW5aWFJEYjI1bWFYSnRaV1JVY21GdWMyRmpkR2x2Ym5Nb1puSnZiVUZrWkhKbGMzTXBPMXh1SUNBZ0lHTnZibk4wSUhCbGJtUnBibWRVY21GdWMyRmpkR2x2Ym5NZ1BTQjBhR2x6TG1kbGRGQmxibVJwYm1kVWNtRnVjMkZqZEdsdmJuTW9abkp2YlVGa1pISmxjM01wTzF4dUlDQWdJSFpoYkdsa1lYUmxRMjl1Wm1seWJXVmtSWGgwWlhKdVlXeFVjbUZ1YzJGamRHbHZiaWg3WEc0Z0lDQWdJQ0IwZUUxbGRHRXNYRzRnSUNBZ0lDQndaVzVrYVc1blZISmhibk5oWTNScGIyNXpMRnh1SUNBZ0lDQWdZMjl1Wm1seWJXVmtWSEpoYm5OaFkzUnBiMjV6TEZ4dUlDQWdJSDBwTzF4dUlDQWdJSFJvYVhNdVgyRmtaRlJ5WVc1ellXTjBhVzl1YzFSdlUzUmhkR1VvVzNSNFRXVjBZVjBwTzF4dUlDQWdJSEpsZEhWeWJpQjBlRTFsZEdFN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlIUjRTV1JjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMVJ5WVc1ellXTjBhVzl1VFdWMFlYMGdkR2hsSUhSNFRXVjBZU0IzYUc4Z2JXRjBZMmhsY3lCMGFHVWdaMmwyWlc0Z2FXUWdhV1lnYm05dVpTQm1iM1Z1WkZ4dUlDQWdLaUJtYjNJZ2RHaGxJRzVsZEhkdmNtc2djbVYwZFhKdWN5QjFibVJsWm1sdVpXUmNiaUFnSUNvdlhHNGdJR2RsZEZSeVlXNXpZV04wYVc5dUtIUjRTV1FwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJSFJ5WVc1ellXTjBhVzl1Y3lCOUlEMGdkR2hwY3k1emRHOXlaUzVuWlhSVGRHRjBaU2dwTzF4dUlDQWdJSEpsZEhWeWJpQjBjbUZ1YzJGamRHbHZibk5iZEhoSlpGMDdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nZFhCa1lYUmxjeUIwYUdVZ2RIaE5aWFJoSUdsdUlIUm9aU0JzYVhOMElHRnVaQ0JoWkdSeklHRWdhR2x6ZEc5eWVTQmxiblJ5ZVZ4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2RIaE5aWFJoSUMwZ2RHaGxJSFI0VFdWMFlTQjBieUIxY0dSaGRHVmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUZ0dWIzUmxYU0F0SUdFZ2JtOTBaU0JoWW05MWRDQjBhR1VnZFhCa1lYUmxJR1p2Y2lCb2FYTjBiM0o1WEc0Z0lDQXFMMXh1SUNCMWNHUmhkR1ZVY21GdWMyRmpkR2x2YmloMGVFMWxkR0VzSUc1dmRHVXBJSHRjYmlBZ0lDQXZMeUJ1YjNKdFlXeHBlbVVnWVc1a0lIWmhiR2xrWVhSbElIUjRVR0Z5WVcxeklHbG1JSEJ5WlhObGJuUmNiaUFnSUNCcFppQW9kSGhOWlhSaExuUjRVR0Z5WVcxektTQjdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCMGVFMWxkR0V1ZEhoUVlYSmhiWE1nUFNCdWIzSnRZV3hwZW1WQmJtUldZV3hwWkdGMFpWUjRVR0Z5WVcxektIUjRUV1YwWVM1MGVGQmhjbUZ0Y3l3Z1ptRnNjMlVwTzF4dUlDQWdJQ0FnZlNCallYUmphQ0FvWlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjRUV1YwWVM1M1lYSnVhVzVuTG0xbGMzTmhaMlVnUFQwOUlFVlNVazlTWDFOVlFrMUpWRlJKVGtjcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRlI0VTNSaGRIVnpSbUZwYkdWa0tIUjRUV1YwWVM1cFpDd2daWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvY205M0lHVnljbTl5TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpWUnlZVzV6WVdOMGFXOXVTR2x6ZEc5eWVTaDBlRTFsZEdFc0lHNXZkR1VwTzF4dUlDQjlYRzVjYmlBZ1gzVndaR0YwWlZSeVlXNXpZV04wYVc5dVNHbHpkRzl5ZVNoMGVFMWxkR0VzSUc1dmRHVXBJSHRjYmlBZ0lDQXZMeUJqY21WaGRHVWdkSGhOWlhSaElITnVZWEJ6YUc5MElHWnZjaUJvYVhOMGIzSjVYRzRnSUNBZ1kyOXVjM1FnWTNWeWNtVnVkRk4wWVhSbElEMGdjMjVoY0hOb2IzUkdjbTl0VkhoTlpYUmhLSFI0VFdWMFlTazdYRzRnSUNBZ0x5OGdjbVZqYjNabGNpQndjbVYyYVc5MWN5QjBlQ0J6ZEdGMFpTQnZZbXBjYmlBZ0lDQmpiMjV6ZENCd2NtVjJhVzkxYzFOMFlYUmxJRDBnY21Wd2JHRjVTR2x6ZEc5eWVTaDBlRTFsZEdFdWFHbHpkRzl5ZVNrN1hHNGdJQ0FnTHk4Z1oyVnVaWEpoZEdVZ2FHbHpkRzl5ZVNCbGJuUnllU0JoYm1RZ1lXUmtJSFJ2SUdocGMzUnZjbmxjYmlBZ0lDQmpiMjV6ZENCbGJuUnllU0E5SUdkbGJtVnlZWFJsU0dsemRHOXllVVZ1ZEhKNUtIQnlaWFpwYjNWelUzUmhkR1VzSUdOMWNuSmxiblJUZEdGMFpTd2dibTkwWlNrN1hHNGdJQ0FnYVdZZ0tHVnVkSEo1TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnZEhoTlpYUmhMbWhwYzNSdmNua3VjSFZ6YUNobGJuUnllU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnWTI5dGJXbDBJSFI0VFdWMFlTQjBieUJ6ZEdGMFpWeHVJQ0FnSUdOdmJuTjBJSFI0U1dRZ1BTQjBlRTFsZEdFdWFXUTdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3WEc0Z0lDQWdJQ0IwY21GdWMyRmpkR2x2Ym5NNklIdGNiaUFnSUNBZ0lDQWdMaTR1ZEdocGN5NXpkRzl5WlM1blpYUlRkR0YwWlNncExuUnlZVzV6WVdOMGFXOXVjeXhjYmlBZ0lDQWdJQ0FnVzNSNFNXUmRPaUIwZUUxbGRHRXNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZObFlYSmphRU55YVhSbGNtbGhJR05oYmlCelpXRnlZMmdnYVc0Z1lXNTVJR3RsZVNCcGJpQlVlRkJoY21GdGN5QnZjaUIwYUdVZ1ltRnpaVnh1SUNBZ0tpQlVjbUZ1YzJGamRHbHZiazFsZEdFdUlGUm9hWE1nZEhsd1pTQnlaWEJ5WlhObGJuUnpJR0Z1ZVNCclpYa2diMjRnWldsMGFHVnlJRzltSUhSb2IzTmxJSFIzYjF4dUlDQWdLaUIwZVhCbGN5NWNiaUFnSUNwY2JpQWdJQ29nUUhSNWNHVmtaV1lnZTFSNFVHRnlZVzF6VzJ0bGVXOW1JRlI0VUdGeVlXMXpYU0I4SUZSeVlXNXpZV04wYVc5dVRXVjBZVnRyWlhsdlppQlVjbUZ1YzJGamRHbHZiazFsZEdGZGZTQlRaV0Z5WTJoaFlteGxTMlY1YzF4dUlDQWdLaTljYmx4dUlDQXZLaXBjYmlBZ0lDb2dVSEpsWkdsallYUmxjeUJqWVc0Z1pXbDBhR1Z5SUdKbElITjBjbWxqZENCMllXeDFaWE1zSUhkb2FXTm9JR2x6SUhOb2IzSjBhR0Z1WkNCbWIzSWdkWE5wYm1kY2JpQWdJQ29nYzNSeWFXTjBJR1Z4ZFdGc2FYUjVMQ0J2Y2lCaElHMWxkR2h2WkNCMGFHRjBJSEpsWTJWcGRtVnpJR2hsSUhaaGJIVmxJRzltSUhSb1pTQnpjR1ZqYVdacFpXUWdhMlY1WEc0Z0lDQXFJR0Z1WkNCeVpYUjFjbTV6SUdFZ1ltOXZiR1ZoYmk1Y2JpQWdJQ3BjYmlBZ0lDb2dRSFI1Y0dWa1pXWWdleWgyT2lCMWJtdHViM2R1S1NBOVBpQmliMjlzWldGdUlId2dkVzVyYm05M2JuMGdSbWxzZEdWeVVISmxaR2xqWVhSbFhHNGdJQ0FxTDF4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSeWFXVjJaU0JoSUd4cGMzUWdiMllnZEhKaGJuTmhZM1JwYjI1eklHWnliMjBnYzNSaGRHVXVJRUo1SUdSbFptRjFiSFFnZEdocGN5QjNhV3hzSUhKbGRIVnlibHh1SUNBZ0tpQjBhR1VnWm5Wc2JDQnNhWE4wSUc5bUlGUnlZVzV6WVdOMGFXOXVjeUJtYjNJZ2RHaGxJR04xY25KbGJuUnNlU0J6Wld4bFkzUmxaQ0JqYUdGcGJpOXVaWFIzYjNKckxseHVJQ0FnS2lCQlpHUnBkR2x2Ym1Gc0lHOXdkR2x2Ym5NZ1kyRnVJR0psSUhCeWIzWnBaR1ZrSUhSdklHTm9ZVzVuWlNCM2FHRjBJR2x6SUdsdVkyeDFaR1ZrSUdsdUlIUm9aU0JtYVc1aGJGeHVJQ0FnS2lCc2FYTjBMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnYjNCMGN5QXRJRzl3ZEdsdmJuTWdkRzhnWTJoaGJtZGxJR1pwYkhSbGNpQmlaV2hoZG1sdmNseHVJQ0FnS2lCQWNHRnlZVzBnZTFKbFkyOXlaRHhUWldGeVkyaGhZbXhsUzJWNWN5d2dSbWxzZEdWeVVISmxaR2xqWVhSbFBuMGdXMjl3ZEhNdWMyVmhjbU5vUTNKcGRHVnlhV0ZkSUMxY2JpQWdJQ29nSUdGdUlHOWlhbVZqZENCM2FYUm9JR3RsZVhNZ2RHaGhkQ0J0WVhSamFDQnJaWGx6SUdsdUlGUnlZVzV6WVdOMGFXOXVUV1YwWVNCdmNpQlVlRkJoY21GdGN5d2dZVzVrWEc0Z0lDQXFJQ0IyWVd4MVpYTWdkR2hoZENCaGNtVWdjSEpsWkdsallYUmxjeTRnVUhKbFpHbGpZWFJsY3lCallXNGdaV2wwYUdWeUlHSmxJSE4wY21samRDQjJZV3gxWlhNc1hHNGdJQ0FxSUNCM2FHbGphQ0JwY3lCemFHOXlkR2hoYm1RZ1ptOXlJSFZ6YVc1bklITjBjbWxqZENCbGNYVmhiR2wwZVN3Z2IzSWdZU0J0WlhSb2IyUWdkR2hoZENCeVpXTmxhWFpsYzF4dUlDQWdLaUFnZEdobElIWmhiSFZsSUc5bUlIUm9aU0J6Y0dWamFXWnBaV1FnYTJWNUlHRnVaQ0J5WlhSMWNtNXpJR0VnWW05dmJHVmhiaTRnVkdobElIUnlZVzV6WVdOMGFXOXVYRzRnSUNBcUlDQnNhWE4wSUhkcGJHd2dZbVVnWm1sc2RHVnlaV1FnZEc4Z2IyNXNlU0IwYUc5elpTQnBkR1Z0Y3lCMGFHRjBJSFJvWlNCd2NtVmthV05oZEdVZ2NtVjBkWEp1YzF4dUlDQWdLaUFnZEhKMWRHaDVJR1p2Y2k0Z0tpcElTVTVVS2lvNklHQmxjbkk2SUhWdVpHVm1hVzVsWkdBZ2FYTWdiR2xyWlNCc2IyOXJhVzVuSUdadmNpQmhJSFI0SUhkcGRHZ2dibTljYmlBZ0lDb2dJR1Z5Y2k0Z2MyOGdlVzkxSUdOaGJpQmhiSE52SUhObFlYSmphQ0IwZUhNZ2RHaGhkQ0JrYjI0bmRDQm9ZWFpsSUhOdmJXVjBhR2x1WnlCaGN5QjNaV3hzSUdKNVhHNGdJQ0FxSUNCelpYUjBhVzVuSUhSb1pTQjJZV3gxWlNCaGN5QjFibVJsWm1sdVpXUXVYRzRnSUNBcUlFQndZWEpoYlNCN1ZISmhibk5oWTNScGIyNU5aWFJoVzExOUlGdHZjSFJ6TG1sdWFYUnBZV3hNYVhOMFhTQXRJRWxtSUhCeWIzWnBaR1ZrSUhSb1pTQm1hV3gwWlhKcGJtZGNiaUFnSUNvZ0lIZHBiR3dnYjJOamRYSWdiMjRnZEdobElIQnliM1pwWkdWa0lHeHBjM1F1SUVKNUlHUmxabUYxYkhRZ2RHaHBjeUIzYVd4c0lHSmxJSFJvWlNCbWRXeHNJR3hwYzNSY2JpQWdJQ29nSUdaeWIyMGdjM1JoZEdVZ2MyOXlkR1ZrSUdKNUlIUnBiV1VnUVZORExseHVJQ0FnS2lCQWNHRnlZVzBnZTJKdmIyeGxZVzU5SUZ0dmNIUnpMbVpwYkhSbGNsUnZRM1Z5Y21WdWRFNWxkSGR2Y210ZElDMGdSbWxzZEdWeUlIUnlZVzV6WVdOMGFXOXVYRzRnSUNBcUlDQnNhWE4wSUhSdklHOXViSGtnZEdodmMyVWdkR2hoZENCdlkyTjFjbkpsWkNCdmJpQjBhR1VnWTNWeWNtVnVkQ0JqYUdGcGJpQnZjaUJ1WlhSM2IzSnJMbHh1SUNBZ0tpQWdSR1ZtWVhWc2RITWdkRzhnZEhKMVpTNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUZ0dmNIUnpMbXhwYldsMFhTQXRJR3hwYldsMElIUm9aU0J1ZFcxaVpYSWdiMllnZEhKaGJuTmhZM1JwYjI1eklISmxkSFZ5Ym1Wa1hHNGdJQ0FxSUNCMGJ5Qk9JSFZ1YVhGMVpTQnViMjVqWlhNdVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0VWNtRnVjMkZqZEdsdmJrMWxkR0ZiWFgwZ1ZHaGxJRlJ5WVc1ellXTjBhVzl1VFdWMFlTQnZZbXBsWTNSeklIUm9ZWFFnWVd4c0lIQnliM1pwWkdWa1hHNGdJQ0FxSUNCd2NtVmthV05oZEdWeklISmxkSFZ5YmlCMGNuVjBhSGtnWm05eUxseHVJQ0FnS2k5Y2JpQWdaMlYwVkhKaGJuTmhZM1JwYjI1ektIdGNiaUFnSUNCelpXRnlZMmhEY21sMFpYSnBZU0E5SUh0OUxGeHVJQ0FnSUdsdWFYUnBZV3hNYVhOMExGeHVJQ0FnSUdacGJIUmxjbFJ2UTNWeWNtVnVkRTVsZEhkdmNtc2dQU0IwY25WbExGeHVJQ0FnSUd4cGJXbDBMRnh1SUNCOUlEMGdlMzBwSUh0Y2JpQWdJQ0JqYjI1emRDQmphR0ZwYmtsa0lEMGdkR2hwY3k1blpYUkRkWEp5Wlc1MFEyaGhhVzVKWkNncE8xeHVJQ0FnSUdOdmJuTjBJRzVsZEhkdmNtdEpaQ0E5SUhSb2FYTXVaMlYwVG1WMGQyOXlhMGxrS0NrN1hHNGdJQ0FnTHk4Z2MyVmhjbU5vUTNKcGRHVnlhV0VnYVhNZ1lXNGdiMkpxWldOMElIUm9ZWFFnYldsbmFIUWdhR0YyWlNCMllXeDFaWE1nZEdoaGRDQmhjbVZ1SjNRZ2NISmxaR2xqWVhSbFhHNGdJQ0FnTHk4Z2JXVjBhRzlrY3k0Z1YyaGxiaUJ3Y205MmFXUnBibWNnWVc1NUlHOTBhR1Z5SUhaaGJIVmxJSFI1Y0dVZ0tITjBjbWx1Wnl3Z2JuVnRZbVZ5TENCbGRHTXBMQ0IzWlZ4dUlDQWdJQzh2SUdOdmJuTnBaR1Z5SUhSb2FYTWdjMmh2Y25Sb1lXNWtJR1p2Y2lCY0ltTm9aV05ySUhSb1pTQjJZV3gxWlNCaGRDQnJaWGtnWm05eUlITjBjbWxqZENCbGNYVmhiR2wwZVZ4dUlDQWdJQzh2SUhkcGRHZ2dkR2hsSUhCeWIzWnBaR1ZrSUhaaGJIVmxYQ0l1SUZSdklHTnZibVp2Y20wZ2RHaHBjeUJ2WW1wbFkzUWdkRzhnWW1VZ2IyNXNlU0J0WlhSb2IyUnpMQ0IzWlZ4dUlDQWdJQzh2SUcxaGNGWmhiSFZsY3lBb2JHOWtZWE5vS1NCemRXTm9JSFJvWVhRZ1pYWmxjbmtnZG1Gc2RXVWdiMjRnZEdobElHOWlhbVZqZENCcGN5QmhJRzFsZEdodlpDQjBhR0YwWEc0Z0lDQWdMeThnY21WMGRYSnVjeUJoSUdKdmIyeGxZVzR1WEc0Z0lDQWdZMjl1YzNRZ2NISmxaR2xqWVhSbFRXVjBhRzlrY3lBOUlHMWhjRlpoYkhWbGN5aHpaV0Z5WTJoRGNtbDBaWEpwWVN3Z0tIQnlaV1JwWTJGMFpTa2dQVDRnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFI1Y0dWdlppQndjbVZrYVdOaGRHVWdQVDA5SUNkbWRXNWpkR2x2YmlkY2JpQWdJQ0FnSUNBZ1B5QndjbVZrYVdOaGRHVmNiaUFnSUNBZ0lDQWdPaUFvZGlrZ1BUNGdkaUE5UFQwZ2NISmxaR2xqWVhSbE8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ0x5OGdTV1lnWVc0Z2FXNXBkR2xoYkNCc2FYTjBJR2x6SUhCeWIzWnBaR1ZrSUhkbElHNWxaV1FnZEc4Z1kyaGhibWRsSUdsMElHSmhZMnNnYVc1MGJ5QmhiaUJ2WW1wbFkzUmNiaUFnSUNBdkx5Qm1hWEp6ZEN3Z2MyOGdkR2hoZENCcGRDQnRZWFJqYUdWeklIUm9aU0J6YUdGd1pTQnZaaUJ2ZFhJZ2MzUmhkR1V1SUZSb2FYTWdhWE1nWkc5dVpTQmllU0IwYUdWY2JpQWdJQ0F2THlCc2IyUmhjMmdnYTJWNVFua2diV1YwYUc5a0xpQlVhR2x6SUdseklIUm9aU0JsWkdkbElHTmhjMlVnWm05eUlIUm9hWE1nYldWMGFHOWtMQ0IwZVhCcFkyRnNiSGxjYmlBZ0lDQXZMeUJwYm1sMGFXRnNUR2x6ZENCM2FXeHNJR0psSUhWdVpHVm1hVzVsWkM1Y2JpQWdJQ0JqYjI1emRDQjBjbUZ1YzJGamRHbHZibk5VYjBacGJIUmxjaUE5SUdsdWFYUnBZV3hNYVhOMFhHNGdJQ0FnSUNBL0lHdGxlVUo1S0dsdWFYUnBZV3hNYVhOMExDQW5hV1FuS1Z4dUlDQWdJQ0FnT2lCMGFHbHpMbk4wYjNKbExtZGxkRk4wWVhSbEtDa3VkSEpoYm5OaFkzUnBiMjV6TzF4dVhHNGdJQ0FnTHk4Z1EyOXRZbWx1WlNCemIzSjBRbmtnWVc1a0lIQnBZMnRDZVNCMGJ5QjBjbUZ1YzJadmNtMGdiM1Z5SUhOMFlYUmxJRzlpYW1WamRDQnBiblJ2SUdGdUlHRnljbUY1SUc5bVhHNGdJQ0FnTHk4Z2JXRjBZMmhwYm1jZ2RISmhibk5oWTNScGIyNXpJSFJvWVhRZ1lYSmxJSE52Y25SbFpDQmllU0IwYVcxbExseHVJQ0FnSUdOdmJuTjBJR1pwYkhSbGNtVmtWSEpoYm5OaFkzUnBiMjV6SUQwZ2MyOXlkRUo1S0Z4dUlDQWdJQ0FnY0dsamEwSjVLSFJ5WVc1ellXTjBhVzl1YzFSdlJtbHNkR1Z5TENBb2RISmhibk5oWTNScGIyNHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdaR1ZtWVhWc2RDQnRZWFJqYUdWelEzSnBkR1Z5YVdFZ2RHOGdkR2hsSUhaaGJIVmxJRzltSUhSeVlXNXpZV04wYVc5dVRXRjBZMmhsYzA1bGRIZHZjbXRjYmlBZ0lDQWdJQ0FnTHk4Z2QyaGxiaUJtYVd4MFpYSlViME4xY25KbGJuUk9aWFIzYjNKcklHbHpJSFJ5ZFdVdVhHNGdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNCbWFXeDBaWEpVYjBOMWNuSmxiblJPWlhSM2IzSnJJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ2RISmhibk5oWTNScGIyNU5ZWFJqYUdWelRtVjBkMjl5YXloMGNtRnVjMkZqZEdsdmJpd2dZMmhoYVc1SlpDd2dibVYwZDI5eWEwbGtLU0E5UFQwZ1ptRnNjMlZjYmlBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJR2wwWlhKaGRHVWdiM1psY2lCMGFHVWdjSEpsWkdsallYUmxUV1YwYUc5a2N5QnJaWGx6SUhSdklHTm9aV05ySUdsbUlIUm9aU0IwY21GdWMyRmpkR2x2Ymx4dUlDQWdJQ0FnSUNBdkx5QnRZWFJqYUdWeklIUm9aU0J6WldGeVkyaERjbWwwWlhKcFlWeHVJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJRnRyWlhrc0lIQnlaV1JwWTJGMFpWMGdiMllnVDJKcVpXTjBMbVZ1ZEhKcFpYTW9jSEpsWkdsallYUmxUV1YwYUc5a2N5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QlhaU0J5WlhSMWNtNGdabUZzYzJVZ1pXRnliSGtnWVhNZ2MyOXZiaUJoY3lCM1pTQnJibTkzSUhSb1lYUWdiMjVsSUc5bUlIUm9aU0J6Y0dWamFXWnBaV1JjYmlBZ0lDQWdJQ0FnSUNBdkx5QnpaV0Z5WTJnZ1kzSnBkR1Z5YVdFZ1pHOGdibTkwSUcxaGRHTm9JSFJvWlNCMGNtRnVjMkZqZEdsdmJpNGdWR2hwY3lCd2NtVjJaVzUwYzF4dUlDQWdJQ0FnSUNBZ0lDOHZJRzVsWldSc1pYTnpiSGtnWTJobFkydHBibWNnWVd4c0lHTnlhWFJsY21saElIZG9aVzRnZDJVZ1lXeHlaV0ZrZVNCcmJtOTNJSFJvWlNCamNtbDBaWEpwWVZ4dUlDQWdJQ0FnSUNBZ0lDOHZJR0Z5WlNCdWIzUWdablZzYkhrZ2MyRjBhWE5tYVdWa0xpQlhaU0JqYUdWamF5QmliM1JvSUhSNFVHRnlZVzF6SUdGdVpDQjBhR1VnWW1GelpWeHVJQ0FnSUNBZ0lDQWdJQzh2SUc5aWFtVmpkQ0JoY3lCd2NtVmthV05oZEdVZ2EyVjVjeUJqWVc0Z1ltVWdaV2wwYUdWeUxseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoclpYa2dhVzRnZEhKaGJuTmhZM1JwYjI0dWRIaFFZWEpoYlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdjbVZrYVdOaGRHVW9kSEpoYm5OaFkzUnBiMjR1ZEhoUVlYSmhiWE5iYTJWNVhTa2dQVDA5SUdaaGJITmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIQnlaV1JwWTJGMFpTaDBjbUZ1YzJGamRHbHZibHRyWlhsZEtTQTlQVDBnWm1Gc2MyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUgwcExGeHVJQ0FnSUNBZ0ozUnBiV1VuTEZ4dUlDQWdJQ2s3WEc0Z0lDQWdhV1lnS0d4cGJXbDBJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDOHZJRmRsSUc1bFpXUWdkRzhnYUdGMlpTQmhiR3dnZEhKaGJuTmhZM1JwYjI1eklHOW1JR0VnWjJsMlpXNGdibTl1WTJVZ2FXNGdiM0prWlhJZ2RHOGdaR2x6Y0d4aGVWeHVJQ0FnSUNBZ0x5OGdibVZqWlhOellYSjVJR1JsZEdGcGJITWdhVzRnZEdobElGVkpMaUJYWlNCMWMyVWdkR2hsSUhOcGVtVWdiMllnZEdocGN5QnpaWFFnZEc4Z1pHVjBaWEp0YVc1bFhHNGdJQ0FnSUNBdkx5QjNhR1YwYUdWeUlIZGxJR2hoZG1VZ2NtVmhZMmhsWkNCMGFHVWdiR2x0YVhRZ2NISnZkbWxrWldRc0lIUm9kWE1nWlc1emRYSnBibWNnZEdoaGRDQmhiR3hjYmlBZ0lDQWdJQzh2SUhSeVlXNXpZV04wYVc5dWN5QnZaaUJ1YjI1alpYTWdkMlVnYVc1amJIVmtaU0IzYVd4c0lHSmxJSE5sYm5RZ2RHOGdkR2hsSUZWSkxseHVJQ0FnSUNBZ1kyOXVjM1FnYm05dVkyVnpJRDBnYm1WM0lGTmxkQ2dwTzF4dUlDQWdJQ0FnWTI5dWMzUWdkSGh6SUQwZ1cxMDdYRzRnSUNBZ0lDQXZMeUJDZVNCa1pXWmhkV3gwTENCMGFHVWdkSEpoYm5OaFkzUnBiMjRnYkdsemRDQjNaU0JtYVd4MFpYSWdabkp2YlNCcGN5QnpiM0owWldRZ1lua2dkR2x0WlNCQlUwTXVYRzRnSUNBZ0lDQXZMeUJVYnlCbGJuTjFjbVVnZEdoaGRDQm1hV3gwWlhKbFpDQnlaWE4xYkhSeklIQnlaV1psY25NZ2RHaGxJRzVsZDJWemRDQjBjbUZ1YzJGamRHbHZibk1nZDJWY2JpQWdJQ0FnSUM4dklHbDBaWEpoZEdVZ1puSnZiU0J5YVdkb2RDQjBieUJzWldaMExDQnBibk5sY25ScGJtY2dkSEpoYm5OaFkzUnBiMjV6SUdsdWRHOGdabkp2Ym5RZ2IyWWdZU0J1WlhkY2JpQWdJQ0FnSUM4dklHRnljbUY1TGlCVWFHVWdiM0pwWjJsdVlXd2diM0prWlhJZ2FYTWdjSEpsYzJWeWRtVmtMQ0JpZFhRZ2QyVWdaVzV6ZFhKbElIUm9ZWFFnYm1WM1pYTjBJSFI0YzF4dUlDQWdJQ0FnTHk4Z1lYSmxJSEJ5WldabGNuSmxaQzVjYmlBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNCbWFXeDBaWEpsWkZSeVlXNXpZV04wYVc5dWN5NXNaVzVuZEdnZ0xTQXhPeUJwSUQ0Z0xURTdJR2t0TFNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMGVFMWxkR0VnUFNCbWFXeDBaWEpsWkZSeVlXNXpZV04wYVc5dWMxdHBYVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdleUJ1YjI1alpTQjlJRDBnZEhoTlpYUmhMblI0VUdGeVlXMXpPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lXNXZibU5sY3k1b1lYTW9ibTl1WTJVcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHNXZibU5sY3k1emFYcGxJRHdnYkdsdGFYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXZibU5sY3k1aFpHUW9ibTl1WTJVcE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z1VIVnphQ0IwY21GdWMyRmpkR2x2YmlCcGJuUnZJSFJvWlNCaVpXZHBibTVwYm1jZ2IyWWdiM1Z5SUdGeWNtRjVJSFJ2SUdWdWMzVnlaU0IwYUdWY2JpQWdJQ0FnSUNBZ0x5OGdiM0pwWjJsdVlXd2diM0prWlhJZ2FYTWdjSEpsYzJWeWRtVmtMbHh1SUNBZ0lDQWdJQ0IwZUhNdWRXNXphR2xtZENoMGVFMWxkR0VwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJSFI0Y3p0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHWnBiSFJsY21Wa1ZISmhibk5oWTNScGIyNXpPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZWd1pHRjBaU0J6ZEdGMGRYTWdiMllnZEdobElGUnlZVzV6WVdOMGFXOXVUV1YwWVNCM2FYUm9JSEJ5YjNacFpHVmtJR2xrSUhSdklDZHlaV3BsWTNSbFpDY3VYRzRnSUNBcUlFRm1kR1Z5SUhObGRIUnBibWNnZEdobElITjBZWFIxY3l3Z2RHaGxJRlJ5WVc1ellXTjBhVzl1VFdWMFlTQnBjeUJrWld4bGRHVmtJR1p5YjIwZ2MzUmhkR1V1WEc0Z0lDQXFYRzRnSUNBcUlGUlBSRTg2SUZOb2IzVnNaQ0IzWlNCemFHOTNJR2hwYzNSdmNtbGpZV3hzZVNCeVpXcGxZM1JsWkNCMGNtRnVjMkZqZEdsdmJuTWdjMjl0Wlhkb1pYSmxJR2x1SUhSb1pWeHVJQ0FnS2lCVlNUOGdVMlZsYlhNZ2JHbHJaU0JwZENCamIzVnNaQ0JpWlNCMllXeDFZV0pzWlNCbWIzSWdhVzVtYjNKdFlYUnBiMjRnY0hWeWNHOXpaWE11SUU5bUlHTnZkWEp6WlZ4dUlDQWdLaUJ2Ym14NUlHRm1kR1Z5SUd4cGJXbDBJR2x6YzNWbGN5QmhjbVVnY21Wa2RXTmxaQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUhSNFNXUWdMU0IwYUdVZ2RHRnlaMlYwSUZSeVlXNXpZV04wYVc5dVRXVjBZU2R6SUVsa1hHNGdJQ0FxTDF4dUlDQnpaWFJVZUZOMFlYUjFjMUpsYW1WamRHVmtLSFI0U1dRcElIdGNiaUFnSUNCMGFHbHpMbDl6WlhSVWNtRnVjMkZqZEdsdmJsTjBZWFIxY3loMGVFbGtMQ0JVY21GdWMyRmpkR2x2YmxOMFlYUjFjeTV5WldwbFkzUmxaQ2s3WEc0Z0lDQWdkR2hwY3k1ZlpHVnNaWFJsVkhKaGJuTmhZM1JwYjI0b2RIaEpaQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1ZYQmtZWFJsSUhOMFlYUjFjeUJ2WmlCMGFHVWdWSEpoYm5OaFkzUnBiMjVOWlhSaElIZHBkR2dnY0hKdmRtbGtaV1FnYVdRZ2RHOGdKM1Z1WVhCd2NtOTJaV1FuWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCMGVFbGtJQzBnZEdobElIUmhjbWRsZENCVWNtRnVjMkZqZEdsdmJrMWxkR0VuY3lCSlpGeHVJQ0FnS2k5Y2JpQWdjMlYwVkhoVGRHRjBkWE5WYm1Gd2NISnZkbVZrS0hSNFNXUXBJSHRjYmlBZ0lDQjBhR2x6TGw5elpYUlVjbUZ1YzJGamRHbHZibE4wWVhSMWN5aDBlRWxrTENCVWNtRnVjMkZqZEdsdmJsTjBZWFIxY3k1MWJtRndjSEp2ZG1Wa0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJWY0dSaGRHVWdjM1JoZEhWeklHOW1JSFJvWlNCVWNtRnVjMkZqZEdsdmJrMWxkR0VnZDJsMGFDQndjbTkyYVdSbFpDQnBaQ0IwYnlBbllYQndjbTkyWldRblhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQjBlRWxrSUMwZ2RHaGxJSFJoY21kbGRDQlVjbUZ1YzJGamRHbHZiazFsZEdFbmN5QkpaRnh1SUNBZ0tpOWNiaUFnYzJWMFZIaFRkR0YwZFhOQmNIQnliM1psWkNoMGVFbGtLU0I3WEc0Z0lDQWdkR2hwY3k1ZmMyVjBWSEpoYm5OaFkzUnBiMjVUZEdGMGRYTW9kSGhKWkN3Z1ZISmhibk5oWTNScGIyNVRkR0YwZFhNdVlYQndjbTkyWldRcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlZ3WkdGMFpTQnpkR0YwZFhNZ2IyWWdkR2hsSUZSeVlXNXpZV04wYVc5dVRXVjBZU0IzYVhSb0lIQnliM1pwWkdWa0lHbGtJSFJ2SUNkemFXZHVaV1FuWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCMGVFbGtJQzBnZEdobElIUmhjbWRsZENCVWNtRnVjMkZqZEdsdmJrMWxkR0VuY3lCSlpGeHVJQ0FnS2k5Y2JpQWdjMlYwVkhoVGRHRjBkWE5UYVdkdVpXUW9kSGhKWkNrZ2UxeHVJQ0FnSUhSb2FYTXVYM05sZEZSeVlXNXpZV04wYVc5dVUzUmhkSFZ6S0hSNFNXUXNJRlJ5WVc1ellXTjBhVzl1VTNSaGRIVnpMbk5wWjI1bFpDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhCa1lYUmxJSE4wWVhSMWN5QnZaaUIwYUdVZ1ZISmhibk5oWTNScGIyNU5aWFJoSUhkcGRHZ2djSEp2ZG1sa1pXUWdhV1FnZEc4Z0ozTjFZbTFwZEhSbFpDZGNiaUFnSUNvZ1lXNWtJSE5sZEhNZ2RHaGxJQ2R6ZFdKdGFYUjBaV1JVYVcxbEp5QndjbTl3WlhKMGVTQjNhWFJvSUhSb1pTQmpkWEp5Wlc1MElGVnVhWGdnWlhCdlkyZ2dkR2x0WlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlIUjRTV1FnTFNCMGFHVWdkR0Z5WjJWMElGUnlZVzV6WVdOMGFXOXVUV1YwWVNkeklFbGtYRzRnSUNBcUwxeHVJQ0J6WlhSVWVGTjBZWFIxYzFOMVltMXBkSFJsWkNoMGVFbGtLU0I3WEc0Z0lDQWdZMjl1YzNRZ2RIaE5aWFJoSUQwZ2RHaHBjeTVuWlhSVWNtRnVjMkZqZEdsdmJpaDBlRWxrS1R0Y2JpQWdJQ0IwZUUxbGRHRXVjM1ZpYldsMGRHVmtWR2x0WlNBOUlHNWxkeUJFWVhSbEtDa3VaMlYwVkdsdFpTZ3BPMXh1SUNBZ0lIUm9hWE11ZFhCa1lYUmxWSEpoYm5OaFkzUnBiMjRvZEhoTlpYUmhMQ0FuZEhoVGRHRjBaVTFoYm1GblpYSWdMU0JoWkdRZ2MzVmliV2wwZEdWa0lIUnBiV1VnYzNSaGJYQW5LVHRjYmlBZ0lDQjBhR2x6TGw5elpYUlVjbUZ1YzJGamRHbHZibE4wWVhSMWN5aDBlRWxrTENCVWNtRnVjMkZqZEdsdmJsTjBZWFIxY3k1emRXSnRhWFIwWldRcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlZ3WkdGMFpTQnpkR0YwZFhNZ2IyWWdkR2hsSUZSeVlXNXpZV04wYVc5dVRXVjBZU0IzYVhSb0lIQnliM1pwWkdWa0lHbGtJSFJ2SUNkamIyNW1hWEp0WldRblhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQjBlRWxrSUMwZ2RHaGxJSFJoY21kbGRDQlVjbUZ1YzJGamRHbHZiazFsZEdFbmN5QkpaRnh1SUNBZ0tpOWNiaUFnYzJWMFZIaFRkR0YwZFhORGIyNW1hWEp0WldRb2RIaEpaQ2tnZTF4dUlDQWdJSFJvYVhNdVgzTmxkRlJ5WVc1ellXTjBhVzl1VTNSaGRIVnpLSFI0U1dRc0lGUnlZVzV6WVdOMGFXOXVVM1JoZEhWekxtTnZibVpwY20xbFpDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhCa1lYUmxJSE4wWVhSMWN5QnZaaUIwYUdVZ1ZISmhibk5oWTNScGIyNU5aWFJoSUhkcGRHZ2djSEp2ZG1sa1pXUWdhV1FnZEc4Z0oyUnliM0J3WldRblhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQjBlRWxrSUMwZ2RHaGxJSFJoY21kbGRDQlVjbUZ1YzJGamRHbHZiazFsZEdFbmN5QkpaRnh1SUNBZ0tpOWNiaUFnYzJWMFZIaFRkR0YwZFhORWNtOXdjR1ZrS0hSNFNXUXBJSHRjYmlBZ0lDQjBhR2x6TGw5elpYUlVjbUZ1YzJGamRHbHZibE4wWVhSMWN5aDBlRWxrTENCVWNtRnVjMkZqZEdsdmJsTjBZWFIxY3k1a2NtOXdjR1ZrS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlZjR1JoZEdVZ2MzUmhkSFZ6SUc5bUlIUm9aU0JVY21GdWMyRmpkR2x2YmsxbGRHRWdkMmwwYUNCd2NtOTJhV1JsWkNCcFpDQjBieUFuWm1GcGJHVmtKeUJoYm1RZ2NIVjBYRzRnSUNBcUlIUm9aU0JsY25KdmNpQnZiaUIwYUdVZ1ZISmhibk5oWTNScGIyNU5aWFJoSUc5aWFtVmpkQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUhSNFNXUWdMU0IwYUdVZ2RHRnlaMlYwSUZSeVlXNXpZV04wYVc5dVRXVjBZU2R6SUVsa1hHNGdJQ0FxSUVCd1lYSmhiU0I3UlhKeWIzSjlJR1Z5Y2lBdElHVnljbTl5SUc5aWFtVmpkRnh1SUNBZ0tpOWNiaUFnYzJWMFZIaFRkR0YwZFhOR1lXbHNaV1FvZEhoSlpDd2daWEp5S1NCN1hHNGdJQ0FnWTI5dWMzUWdaWEp5YjNJZ1BTQmxjbklnZkh3Z2JtVjNJRVZ5Y205eUtDZEpiblJsY201aGJDQnRaWFJoYldGemF5Qm1ZV2xzZFhKbEp5azdYRzVjYmlBZ0lDQmpiMjV6ZENCMGVFMWxkR0VnUFNCMGFHbHpMbWRsZEZSeVlXNXpZV04wYVc5dUtIUjRTV1FwTzF4dUlDQWdJSFI0VFdWMFlTNWxjbklnUFNCN1hHNGdJQ0FnSUNCdFpYTnpZV2RsT2lCbGNuSnZjaTV0WlhOellXZGxQeTUwYjFOMGNtbHVaeWdwSUh4OElHVnljbTl5TG5SdlUzUnlhVzVuS0Nrc1hHNGdJQ0FnSUNCeWNHTTZJR1Z5Y205eUxuWmhiSFZsTEZ4dUlDQWdJQ0FnYzNSaFkyczZJR1Z5Y205eUxuTjBZV05yTEZ4dUlDQWdJSDA3WEc0Z0lDQWdkR2hwY3k1ZmRYQmtZWFJsVkhKaGJuTmhZM1JwYjI1SWFYTjBiM0o1S0Z4dUlDQWdJQ0FnZEhoTlpYUmhMRnh1SUNBZ0lDQWdKM1J5WVc1ellXTjBhVzl1Y3pwMGVDMXpkR0YwWlMxdFlXNWhaMlZ5STJaaGFXd2dMU0JoWkdRZ1pYSnliM0luTEZ4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0IwYUdsekxsOXpaWFJVY21GdWMyRmpkR2x2YmxOMFlYUjFjeWgwZUVsa0xDQlVjbUZ1YzJGamRHbHZibE4wWVhSMWN5NW1ZV2xzWldRcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsYlc5MlpYTWdZV3hzSUhSeVlXNXpZV04wYVc5dWN5Qm1iM0lnZEdobElHZHBkbVZ1SUdGa1pISmxjM01nYjI0Z2RHaGxJR04xY25KbGJuUWdibVYwZDI5eWF5NWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR0ZrWkhKbGMzTWdMU0JvWlhnZ2MzUnlhVzVuSUc5bUlIUm9aU0JtY205dElHRmtaSEpsYzNNZ2IyNGdkR2hsSUhSNFVHRnlZVzF6WEc0Z0lDQXFJQ0IwYnlCeVpXMXZkbVZjYmlBZ0lDb3ZYRzRnSUhkcGNHVlVjbUZ1YzJGamRHbHZibk1vWVdSa2NtVnpjeWtnZTF4dUlDQWdJQzh2SUc1bGRIZHZjbXNnYjI1c2VTQjBlRnh1SUNBZ0lHTnZibk4wSUhzZ2RISmhibk5oWTNScGIyNXpJSDBnUFNCMGFHbHpMbk4wYjNKbExtZGxkRk4wWVhSbEtDazdYRzRnSUNBZ1kyOXVjM1FnWTJoaGFXNUpaQ0E5SUhSb2FYTXVaMlYwUTNWeWNtVnVkRU5vWVdsdVNXUW9LVHRjYmlBZ0lDQmpiMjV6ZENCdVpYUjNiM0pyU1dRZ1BTQjBhR2x6TG1kbGRFNWxkSGR2Y210SlpDZ3BPMXh1WEc0Z0lDQWdMeThnVlhCa1lYUmxJSE4wWVhSbFhHNGdJQ0FnZEdocGN5NXpkRzl5WlM1MWNHUmhkR1ZUZEdGMFpTaDdYRzRnSUNBZ0lDQjBjbUZ1YzJGamRHbHZibk02SUc5dGFYUkNlU2hjYmlBZ0lDQWdJQ0FnZEhKaGJuTmhZM1JwYjI1ekxGeHVJQ0FnSUNBZ0lDQW9kSEpoYm5OaFkzUnBiMjRwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdkSEpoYm5OaFkzUnBiMjR1ZEhoUVlYSmhiWE11Wm5KdmJTQTlQVDBnWVdSa2NtVnpjeUFtSmx4dUlDQWdJQ0FnSUNBZ0lIUnlZVzV6WVdOMGFXOXVUV0YwWTJobGMwNWxkSGR2Y21zb2RISmhibk5oWTNScGIyNHNJR05vWVdsdVNXUXNJRzVsZEhkdmNtdEpaQ2tzWEc0Z0lDQWdJQ0FwTEZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFWnBiSFJsY25NZ2IzVjBJSFJvWlNCMWJtRndjSEp2ZG1Wa0lIUnlZVzV6WVdOMGFXOXVjeUJtY205dElITjBZWFJsWEc0Z0lDQXFMMXh1SUNCamJHVmhjbFZ1WVhCd2NtOTJaV1JVZUhNb0tTQjdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3WEc0Z0lDQWdJQ0IwY21GdWMyRmpkR2x2Ym5NNklHOXRhWFJDZVNoY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEc5eVpTNW5aWFJUZEdGMFpTZ3BMblJ5WVc1ellXTjBhVzl1Y3l4Y2JpQWdJQ0FnSUNBZ0tIUnlZVzV6WVdOMGFXOXVLU0E5UGlCMGNtRnVjMkZqZEdsdmJpNXpkR0YwZFhNZ1BUMDlJRlJ5WVc1ellXTjBhVzl1VTNSaGRIVnpMblZ1WVhCd2NtOTJaV1FzWEc0Z0lDQWdJQ0FwTEZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5OWNiaUFnTHk4Z0lDQWdJQ0FnSUNBZ0lGQlNTVlpCVkVVZ1RVVlVTRTlFVTF4dUlDQXZMMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlZjR1JoZEdWeklHRWdkSEpoYm5OaFkzUnBiMjRuY3lCemRHRjBkWE1nYVc0Z2MzUmhkR1VzSUdGdVpDQjBhR1Z1SUdWdGFYUnpJR1YyWlc1MGN5QjBhR0YwSUdGeVpWeHVJQ0FnS2lCemRXSnpZM0pwWW1Wa0lIUnZJR1ZzYzJWM2FHVnlaUzRnVTJWbElHSmxiRzkzSUdadmNpQmlaWE4wSUdkMVpYTnpaWE1nYjI0Z2QyaGxjbVVnWVc1a0lHaHZkeUIwYUdWelpWeHVJQ0FnS2lCbGRtVnVkSE1nWVhKbElISmxZMlZwZG1Wa0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdkSGhKWkNBdElIUm9aU0JVY21GdWMyRmpkR2x2YmsxbGRHRWdTV1JjYmlBZ0lDb2dRSEJoY21GdElIdFVjbUZ1YzJGamRHbHZibE4wWVhSMWMxTjBjbWx1WjMwZ2MzUmhkSFZ6SUMwZ2RHaGxJSE4wWVhSMWN5QjBieUJ6WlhRZ2IyNGdkR2hsWEc0Z0lDQXFJQ0JVY21GdWMyRmpkR2x2YmsxbGRHRmNiaUFnSUNvZ1FHWnBjbVZ6SUhSNFRXVjBZUzVwWkRwMGVFMWxkR0V1YzNSaGRIVnpJQzBnWlhabGNua2dkR2x0WlNCaElIUnlZVzV6WVdOMGFXOXVKM01nYzNSaGRIVnpJR05vWVc1blpYTmNiaUFnSUNvZ0lIZGxJR1Z0YVhRZ2RHaGxJR05vWVc1blpTQndZWE56YVc1bklHRnNiMjVuSUhSb1pTQnBaQzRnVkdocGN5QmtiMlZ6SUc1dmRDQmhjSEJsWVhJZ2RHOGdZbVVnZFhObFpGeHVJQ0FnS2lBZ2IzVjBjMmxrWlNCdlppQjBhR2x6SUdacGJHVXNJSGRvYVdOb0lHOXViSGtnYkdsemRHVnVjeUIwYnlCMGFHbHpJSFJ2SUhWdWMzVmljMk55YVdKbElHeHBjM1JsYm1WeWMxeHVJQ0FnS2lBZ2IyWWdPbkpsYW1WamRHVmtJR0Z1WkNBNmMybG5ibVZrSUhOMFlYUjFjMlZ6SUhkb1pXNGdkR2hsSUdsdWRtVnljMlVnYzNSaGRIVnpJR05vWVc1blpYTXVJRXhwYTJWc2VWeHVJQ0FnS2lBZ2MyRm1aU0IwYnlCa2NtOXdMbHh1SUNBZ0tpQkFabWx5WlhNZ2RIZzZjM1JoZEhWekxYVndaR0YwWlNBdElHVjJaWEo1SUhScGJXVWdZU0IwY21GdWMyRmpkR2x2YmlkeklITjBZWFIxY3lCamFHRnVaMlZ6SUhkbFhHNGdJQ0FxSUNCbGJXbDBJSFJvYVhNZ1pYWmxiblFnWVc1a0lIQmhjM01nZEhoSlpDQmhibVFnYzNSaGRIVnpMaUJVYUdseklHVjJaVzUwSUdseklITjFZbk5qY21saVpXUWdkRzhnYVc1Y2JpQWdJQ29nSUhSb1pTQlVjbUZ1YzJGamRHbHZia052Ym5SeWIyeHNaWElnWVc1a0lISmxMV0p5YjJGa1kyRnpkQ0JpZVNCMGFHVWdWSEpoYm5OaFkzUnBiMjVEYjI1MGNtOXNiR1Z5TGx4dUlDQWdLaUFnU1hRZ2FYTWdkWE5sWkNCcGJuUmxjbTVoYkd4NUlIZHBkR2hwYmlCMGFHVWdWSEpoYm5OaFkzUnBiMjVEYjI1MGNtOXNiR1Z5SUhSdklIUnllU0JoYm1RZ2RYQmtZWFJsWEc0Z0lDQXFJQ0J3Wlc1a2FXNW5JSFJ5WVc1ellXTjBhVzl1Y3lCdmJpQmxZV05vSUc1bGR5QmliRzlqYXlBb1puSnZiU0JpYkc5amExUnlZV05yWlhJcExpQkpkQ2R6SUdGc2MyOWNiaUFnSUNvZ0lITjFZbk5qY21saVpXUWdkRzhnYVc0Z2JXVjBZVzFoYzJzdFkyOXVkSEp2Ykd4bGNpQjBieUJrYVhOd2JHRjVJR0VnWW5KdmQzTmxjaUJ1YjNScFptbGpZWFJwYjI0Z2IyNWNiaUFnSUNvZ0lHTnZibVpwY20xbFpDQnZjaUJtWVdsc1pXUWdkSEpoYm5OaFkzUnBiMjV6TGx4dUlDQWdLaUJBWm1seVpYTWdkSGhOWlhSaExtbGtPbVpwYm1semFHVmtJQzBnVjJobGJpQmhJSFJ5WVc1ellXTjBhVzl1SUcxdmRtVnpJSFJ2SUdFZ1ptbHVhWE5vWldRZ2MzUmhkR1ZjYmlBZ0lDb2dJSFJvYVhNZ1pYWmxiblFnYVhNZ1pXMXBkSFJsWkN3Z2QyaHBZMmdnYVhNZ2RYTmxaQ0JwYmlCMGFHVWdWSEpoYm5OaFkzUnBiMjVEYjI1MGNtOXNiR1Z5SUhSdklIQmhjM05jYmlBZ0lDb2dJR0ZzYjI1bklHUmxkR0ZwYkhNZ2IyWWdkR2hsSUhSeVlXNXpZV04wYVc5dUlIUnZJSFJvWlNCa1lYQndJSFJvWVhRZ2MzVm5aMlZ6ZEdWa0lIUm9aVzB1SUZSb2FYTmNiaUFnSUNvZ0lIQmhkSFJsY200Z2FYTWdjbVZ3YkdsallYUmxaQ0JoWTNKdmMzTWdZV3hzSUc5bUlIUm9aU0J0WlhOellXZGxJRzFoYm1GblpYSnpJR0Z1WkNCallXNGdiR2xyWld4NVhHNGdJQ0FxSUNCaVpTQnpkWEJ3YkdWdFpXNTBaV1FnYjNJZ2NtVndiR0ZqWldRZ1lua2dkR2hsSUVGd2NISnZkbUZzUTI5dWRISnZiR3hsY2k1Y2JpQWdJQ29nUUdacGNtVnpJSFZ3WkdGMFpVSmhaR2RsSUMwZ1YyaGxiaUIwYUdVZ2JuVnRZbVZ5SUc5bUlIUnlZVzV6WVdOMGFXOXVjeUJqYUdGdVoyVnpJR2x1SUhOMFlYUmxMRnh1SUNBZ0tpQWdkR2hsSUdKaFpHZGxJR2x1SUhSb1pTQmljbTkzYzJWeUlHVjRkR1Z1YzJsdmJpQmlZWElnYzJodmRXeGtJR0psSUhWd1pHRjBaV1FnZEc4Z2NtVm1iR1ZqZENCMGFHVmNiaUFnSUNvZ0lHNTFiV0psY2lCdlppQndaVzVrYVc1bklIUnlZVzV6WVdOMGFXOXVjeTRnVkdocGN5QndZWEowYVdOMWJHRnlJR1Z0YVhRZ1pHOWxjMjRuZENCaGNIQmxZWElnZEc5Y2JpQWdJQ29nSUdKMVltSnNaU0IxY0NCaGJubDNhR1Z5WlNCMGFHRjBJR2x6SUdGamRIVmhiR3g1SUhWelpXUXVJRlJ5WVc1ellXTjBhVzl1UTI5dWRISnZiR3hsY2lCbGJXbDBjMXh1SUNBZ0tpQWdkR2hwY3lBcVlXNTVkR2x0WlNCMGFHVWdjM1JoZEdVZ1kyaGhibWRsY3lvc0lITnZJSFJvYVhNZ2FYTWdjSEp2WW1GaWJIa2djM1Z3WlhKbWJIVnZkWE11WEc0Z0lDQXFMMXh1SUNCZmMyVjBWSEpoYm5OaFkzUnBiMjVUZEdGMGRYTW9kSGhKWkN3Z2MzUmhkSFZ6S1NCN1hHNGdJQ0FnWTI5dWMzUWdkSGhOWlhSaElEMGdkR2hwY3k1blpYUlVjbUZ1YzJGamRHbHZiaWgwZUVsa0tUdGNibHh1SUNBZ0lHbG1JQ2doZEhoTlpYUmhLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RIaE5aWFJoTG5OMFlYUjFjeUE5SUhOMFlYUjFjenRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnZEdocGN5NWZkWEJrWVhSbFZISmhibk5oWTNScGIyNUlhWE4wYjNKNUtGeHVJQ0FnSUNBZ0lDQjBlRTFsZEdFc1hHNGdJQ0FnSUNBZ0lHQjBlRk4wWVhSbFRXRnVZV2RsY2pvZ2MyVjBkR2x1WnlCemRHRjBkWE1nZEc4Z0pIdHpkR0YwZFhOOVlDeGNiaUFnSUNBZ0lDazdYRzRnSUNBZ0lDQjBhR2x6TG1WdGFYUW9ZQ1I3ZEhoTlpYUmhMbWxrZlRva2UzTjBZWFIxYzMxZ0xDQjBlRWxrS1R0Y2JpQWdJQ0FnSUhSb2FYTXVaVzFwZENoZ2RIZzZjM1JoZEhWekxYVndaR0YwWldBc0lIUjRTV1FzSUhOMFlYUjFjeWs3WEc0Z0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lGdGNiaUFnSUNBZ0lDQWdJQ0JVY21GdWMyRmpkR2x2YmxOMFlYUjFjeTV6ZFdKdGFYUjBaV1FzWEc0Z0lDQWdJQ0FnSUNBZ1ZISmhibk5oWTNScGIyNVRkR0YwZFhNdWNtVnFaV04wWldRc1hHNGdJQ0FnSUNBZ0lDQWdWSEpoYm5OaFkzUnBiMjVUZEdGMGRYTXVabUZwYkdWa0xGeHVJQ0FnSUNBZ0lDQmRMbWx1WTJ4MVpHVnpLSE4wWVhSMWN5bGNiaUFnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnRhWFFvWUNSN2RIaE5aWFJoTG1sa2ZUcG1hVzVwYzJobFpHQXNJSFI0VFdWMFlTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjBhR2x6TG1WdGFYUW9UVVZVUVUxQlUwdGZRMDlPVkZKUFRFeEZVbDlGVmtWT1ZGTXVWVkJFUVZSRlgwSkJSRWRGS1R0Y2JpQWdJQ0I5SUdOaGRHTm9JQ2hsY25KdmNpa2dlMXh1SUNBZ0lDQWdiRzluTG1WeWNtOXlLR1Z5Y205eUtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRV1JrY3lCdmJtVWdiM0lnYlc5eVpTQjBjbUZ1YzJGamRHbHZibk1nYVc1MGJ5QnpkR0YwWlM0Z1ZHaHBjeUJwY3lCdWIzUWdhVzUwWlc1a1pXUWdabTl5WEc0Z0lDQXFJR1Y0ZEdWeWJtRnNJSFZ6WlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNvZ1FIQmhjbUZ0SUh0VWNtRnVjMkZqZEdsdmJrMWxkR0ZiWFgwZ2RISmhibk5oWTNScGIyNXpJQzBnZEdobElHeHBjM1FnYjJZZ2RISmhibk5oWTNScGIyNXpJSFJ2SUhOaGRtVmNiaUFnSUNvdlhHNGdJRjloWkdSVWNtRnVjMkZqZEdsdmJuTlViMU4wWVhSbEtIUnlZVzV6WVdOMGFXOXVjeWtnZTF4dUlDQWdJSFJvYVhNdWMzUnZjbVV1ZFhCa1lYUmxVM1JoZEdVb2UxeHVJQ0FnSUNBZ2RISmhibk5oWTNScGIyNXpPaUIwY21GdWMyRmpkR2x2Ym5NdWNtVmtkV05sS0NoeVpYTjFiSFFzSUc1bGQxUjRLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lISmxjM1ZzZEZ0dVpYZFVlQzVwWkYwZ1BTQnVaWGRVZUR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ0lDQWdJSDBzSUhSb2FYTXVjM1J2Y21VdVoyVjBVM1JoZEdVb0tTNTBjbUZ1YzJGamRHbHZibk1wTEZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlISmxiVzkyWlhNZ2IyNWxJSFJ5WVc1ellXTjBhVzl1SUdaeWIyMGdjM1JoZEdVdUlGUm9hWE1nYVhNZ2JtOTBJR2x1ZEdWdVpHVmtJR1p2Y2lCbGVIUmxjbTVoYkNCMWMyVXVYRzRnSUNBcVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQjBZWEpuWlhSVWNtRnVjMkZqZEdsdmJrbGtJQzBnZEdobElIUnlZVzV6WVdOMGFXOXVJSFJ2SUdSbGJHVjBaVnh1SUNBZ0tpOWNiaUFnWDJSbGJHVjBaVlJ5WVc1ellXTjBhVzl1S0hSaGNtZGxkRlJ5WVc1ellXTjBhVzl1U1dRcElIdGNiaUFnSUNCamIyNXpkQ0I3SUhSeVlXNXpZV04wYVc5dWN5QjlJRDBnZEdocGN5NXpkRzl5WlM1blpYUlRkR0YwWlNncE8xeHVJQ0FnSUdSbGJHVjBaU0IwY21GdWMyRmpkR2x2Ym5OYmRHRnlaMlYwVkhKaGJuTmhZM1JwYjI1SlpGMDdYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3WEc0Z0lDQWdJQ0IwY21GdWMyRmpkR2x2Ym5Nc1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2djbVZ0YjNabGN5QnRkV3gwYVhCc1pTQjBjbUZ1YzJGamRHbHZiaUJtY205dElITjBZWFJsTGlCVWFHbHpJR2x6SUc1dmRDQnBiblJsYm1SbFpDQm1iM0lnWlhoMFpYSnVZV3dnZFhObExseHVJQ0FnS2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY2x0ZGZTQjBZWEpuWlhSVWNtRnVjMkZqZEdsdmJrbGtjeUF0SUhSb1pTQjBjbUZ1YzJGamRHbHZibk1nZEc4Z1pHVnNaWFJsWEc0Z0lDQXFMMXh1SUNCZlpHVnNaWFJsVkhKaGJuTmhZM1JwYjI1ektIUmhjbWRsZEZSeVlXNXpZV04wYVc5dVNXUnpLU0I3WEc0Z0lDQWdZMjl1YzNRZ2V5QjBjbUZ1YzJGamRHbHZibk1nZlNBOUlIUm9hWE11YzNSdmNtVXVaMlYwVTNSaGRHVW9LVHRjYmlBZ0lDQjBZWEpuWlhSVWNtRnVjMkZqZEdsdmJrbGtjeTVtYjNKRllXTm9LQ2gwY21GdWMyRmpkR2x2Ymtsa0tTQTlQaUI3WEc0Z0lDQWdJQ0JrWld4bGRHVWdkSEpoYm5OaFkzUnBiMjV6VzNSeVlXNXpZV04wYVc5dVNXUmRPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lIUm9hWE11YzNSdmNtVXVkWEJrWVhSbFUzUmhkR1VvZTF4dUlDQWdJQ0FnZEhKaGJuTmhZM1JwYjI1ekxGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNGlMQ0l2S2lwY2JpQXFJRk5sZEhNZ2RYQWdkSGR2TFhkaGVTQmpiMjF0ZFc1cFkyRjBhVzl1SUdKbGRIZGxaVzRnZEdobFhHNGdLaUJ0WVdsdWJHbHVaU0IyWlhKemFXOXVJRzltSUdWNGRHVnVjMmx2YmlCaGJtUWdSbXhoYzJzZ1luVnBiR1JjYmlBcUlHbHVJRzl5WkdWeUlIUnZJR1JsZEdWamRDQW1JSGRoY200Z2FXWWdkR2hsY21VZ1lYSmxJSFIzYnlCa2FXWm1aWEpsYm5SY2JpQXFJSFpsY25OcGIyNXpJSEoxYm01cGJtY2djMmx0ZFd4MFlXNWxiM1Z6YkhrdVhHNGdLaTljYmx4dWFXMXdiM0owSUdKeWIzZHpaWElnWm5KdmJTQW5kMlZpWlhoMFpXNXphVzl1TFhCdmJIbG1hV3hzSnp0Y2JtbHRjRzl5ZENCN1hHNGdJRkJNUVZSR1QxSk5YME5JVWs5TlJTeGNiaUFnVUV4QlZFWlBVazFmUmtsU1JVWlBXQ3hjYmlBZ1EwaFNUMDFGWDBKVlNVeEVYMGxFVXl4Y2JpQWdSa2xTUlVaUFdGOUNWVWxNUkY5SlJGTXNYRzU5SUdaeWIyMGdKeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdllYQndKenRjYm1sdGNHOXlkQ0I3SUdkbGRGQnNZWFJtYjNKdElIMGdabkp2YlNBbkxpOXNhV0l2ZFhScGJDYzdYRzVjYm1OdmJuTjBJRTFGVTFOQlIwVmZWRVZZVkNBOUlDZHBjMUoxYm01cGJtY25PMXh1WEc1amIyNXpkQ0J6YUc5M1YyRnlibWx1WnlBOUlDZ3BJRDArWEc0Z0lHTnZibk52YkdVdWQyRnliaWduVjJGeWJtbHVaeUVnV1c5MUlHaGhkbVVnYlhWc2RHbHdiR1VnYVc1emRHRnVZMlZ6SUc5bUlFMWxkR0ZOWVhOcklISjFibTVwYm1jaEp5azdYRzVjYmk4cUtseHVJQ29nU0dGdVpHeGxjeUIwYUdVZ2NHbHVaeUJ0WlhOellXZGxJSE5sYm5RZ1puSnZiU0J2ZEdobGNpQmxlSFJsYm5OcGIyNHVYRzRnS2lCRWFYTndiR0Y1Y3lCamIyNXpiMnhsSUhkaGNtNXBibWNnYVdZZ2FYUW5jeUJoWTNScGRtVXVYRzRnS2x4dUlDb2dRSEJoY21GdElHMWxjM05oWjJVZ0xTQlVhR1VnYldWemMyRm5aU0J5WldObGFYWmxaQ0JtY205dElIUm9aU0J2ZEdobGNpQmxlSFJsYm5OcGIyNWNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJRzl1VFdWemMyRm5aVkpsWTJWcGRtVmtJRDBnS0cxbGMzTmhaMlVwSUQwK0lIdGNiaUFnYVdZZ0tHMWxjM05oWjJVZ1BUMDlJRTFGVTFOQlIwVmZWRVZZVkNrZ2UxeHVJQ0FnSUhOb2IzZFhZWEp1YVc1bktDazdYRzRnSUgxY2JuMDdYRzVjYmk4cUtseHVJQ29nVTJWdVpITWdkR2hsSUhCcGJtY2diV1Z6YzJGblpTQnpaVzUwSUhSdklHOTBhR1Z5SUdWNGRHVnVjMmx2Ym5NZ2RHOGdaR1YwWldOMElIZG9aWFJvWlhJZ2FYUW5jeUJoWTNScGRtVWdiM0lnYm05MExseHVJQ292WEc1bGVIQnZjblFnWTI5dWMzUWdZMmhsWTJ0R2IzSk5kV3gwYVhCc1pWWmxjbk5wYjI1elVuVnVibWx1WnlBOUlHRnplVzVqSUNncElEMCtJSHRjYmlBZ2FXWWdLR2RsZEZCc1lYUm1iM0p0S0NrZ0lUMDlJRkJNUVZSR1QxSk5YME5JVWs5TlJTQW1KaUJuWlhSUWJHRjBabTl5YlNncElDRTlQU0JRVEVGVVJrOVNUVjlHU1ZKRlJrOVlLU0I3WEc0Z0lDQWdjbVYwZFhKdU8xeHVJQ0I5WEc0Z0lHTnZibk4wSUdKMWFXeGtTV1J6SUQxY2JpQWdJQ0JuWlhSUWJHRjBabTl5YlNncElEMDlQU0JRVEVGVVJrOVNUVjlEU0ZKUFRVVWdQeUJEU0ZKUFRVVmZRbFZKVEVSZlNVUlRJRG9nUmtsU1JVWlBXRjlDVlVsTVJGOUpSRk03WEc1Y2JpQWdZMjl1YzNRZ2RHaHBjMEoxYVd4a0lEMGdZbkp2ZDNObGNpNXlkVzUwYVcxbExtbGtPMXh1WEc0Z0lHWnZjaUFvWTI5dWMzUWdhV1FnYjJZZ1luVnBiR1JKWkhNcElIdGNiaUFnSUNCcFppQW9hV1FnSVQwOUlIUm9hWE5DZFdsc1pDa2dlMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1lYZGhhWFFnWW5KdmQzTmxjaTV5ZFc1MGFXMWxMbk5sYm1STlpYTnpZV2RsS0dsa0xDQk5SVk5UUVVkRlgxUkZXRlFwTzF4dUlDQWdJQ0FnZlNCallYUmphQ0FvWlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1UyaHZkV3hrSUdSdklHNXZkR2hwYm1jZ2FXWWdjbVZqWldsMmFXNW5JR1Z1WkNCM1lYTWdibTkwSUhKbFlXTm9aV1FnS0c1dklHOTBhR1Z5SUdsdWMzUmhibU5sY3lCeWRXNXVhVzVuS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVmVHRjYmlJc0lpOHFLbHh1SUNvZ1FIUjVjR1ZrWldZZ2UyOWlhbVZqZEgwZ1JtbHljM1JVYVcxbFUzUmhkR1ZjYmlBcUlFQndjbTl3WlhKMGVTQjdiMkpxWldOMGZTQmpiMjVtYVdjZ1NXNXBkR2xoYkNCamIyNW1hV2QxY21GMGFXOXVJSEJoY21GdFpYUmxjbk5jYmlBcUlFQndjbTl3WlhKMGVTQjdiMkpxWldOMGZTQk9aWFIzYjNKclEyOXVkSEp2Ykd4bGNpQk9aWFIzYjNKcklHTnZiblJ5YjJ4c1pYSWdjM1JoZEdWY2JpQXFMMXh1WEc0dktpcGNiaUFxSUVCMGVYQmxJSHRHYVhKemRGUnBiV1ZUZEdGMFpYMWNiaUFxTDF4dVkyOXVjM1FnYVc1cGRHbGhiRk4wWVhSbElEMGdlMXh1SUNCamIyNW1hV2M2SUh0OUxGeHVmVHRjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR2x1YVhScFlXeFRkR0YwWlR0Y2JpSXNJbWx0Y0c5eWRDQjdJRTlpYzJWeWRtRmliR1ZUZEc5eVpTQjlJR1p5YjIwZ0owQnRaWFJoYldGemF5OXZZbk10YzNSdmNtVW5PMXh1YVcxd2IzSjBJSHNnWjJWMFVHVnljMmx6ZEdWdWRGTjBZWFJsSUgwZ1puSnZiU0FuUUcxbGRHRnRZWE5yTDJKaGMyVXRZMjl1ZEhKdmJHeGxjaWM3WEc1Y2JpOHFLbHh1SUNvZ1FIUjVjR1ZrWldZZ2UybHRjRzl5ZENnblFHMWxkR0Z0WVhOckwySmhjMlV0WTI5dWRISnZiR3hsY2ljcExrTnZiblJ5YjJ4c1pYSk5aWE56Wlc1blpYSjlJRU52Ym5SeWIyeHNaWEpOWlhOelpXNW5aWEpjYmlBcUwxeHVYRzR2S2lwY2JpQXFJRUZ1SUU5aWMyVnlkbUZpYkdWVGRHOXlaU0IwYUdGMElHTmhiaUJqYjIxd2IzTmxjeUJoSUdac1lYUmNiaUFxSUhOMGNuVmpkSFZ5WlNCdlppQmphR2xzWkNCemRHOXlaWE1nWW1GelpXUWdiMjRnWTI5dVptbG5kWEpoZEdsdmJseHVJQ292WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QkRiMjF3YjNOaFlteGxUMkp6WlhKMllXSnNaVk4wYjNKbElHVjRkR1Z1WkhNZ1QySnpaWEoyWVdKc1pWTjBiM0psSUh0Y2JpQWdMeW9xWEc0Z0lDQXFJRVJsYzJOeWFXSmxjeUIzYUdsamFDQnpkRzl5WlhNZ1lYSmxJR0psYVc1bklHTnZiWEJ2YzJWa0xpQlVhR1VnYTJWNUlHbHpJSFJvWlNCdVlXMWxJRzltSUhSb1pWeHVJQ0FnS2lCemRHOXlaU3dnWVc1a0lIUm9aU0IyWVd4MVpTQnBjeUJsYVhSb1pYSWdZVzRnVDJKelpYSmhZbXhsVTNSdmNtVXNJRzl5SUdFZ1kyOXVkSEp2Ykd4bGNpQjBhR0YwWEc0Z0lDQXFJR1Y0ZEdWdVpITWdiMjVsSUc5bUlIUm9aU0IwZDI4Z1ltRnpaU0JqYjI1MGNtOXNiR1Z5Y3lCcGJpQjBhR1VnWUVCdFpYUmhiV0Z6YXk5aVlYTmxMV052Ym5SeWIyeHNaWEpnWEc0Z0lDQXFJSEJoWTJ0aFoyVXVYRzRnSUNBcVhHNGdJQ0FxSUVCMGVYQmxJSHRTWldOdmNtUThjM1J5YVc1bkxDQnZZbXBsWTNRK2ZWeHVJQ0FnS2k5Y2JpQWdZMjl1Wm1sbklEMGdlMzA3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU55WldGMFpTQmhJRzVsZHlCemRHOXlaVnh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYjNCMGFXOXVjMXh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ1cyOXdkR2x2Ym5NdVkyOXVabWxuWFNBdElFMWhjQ0J2WmlCcGJuUmxjbTVoYkNCemRHRjBaU0JyWlhseklIUnZJR05vYVd4a0lITjBiM0psYzF4dUlDQWdLaUJBY0dGeVlXMGdlME52Ym5SeWIyeHNaWEpOWlhOelpXNW5aWEo5SUc5d2RHbHZibk11WTI5dWRISnZiR3hsY2sxbGMzTmxibWRsY2lBdElGUm9aU0JqYjI1MGNtOXNiR1Z5WEc0Z0lDQXFJQ0FnYldWemMyVnVaMlZ5TENCMWMyVmtJR1p2Y2lCemRXSnpZM0pwWW1sdVp5QjBieUJsZG1WdWRITWdabkp2YlNCQ1lYTmxRMjl1ZEhKdmJHeGxjbFl5TFdKaGMyVmtYRzRnSUNBcUlDQWdZMjl1ZEhKdmJHeGxjbk11WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQmJiM0IwYVc5dWN5NXpkR0YwWlYwZ0xTQlVhR1VnYVc1cGRHbGhiQ0J6ZEc5eVpTQnpkR0YwWlZ4dUlDQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJRnR2Y0hScGIyNXpMbkJsY25OcGMzUmRJQzBnVjJobGRHaGxjaUJ2Y2lCdWIzUWdkRzhnWVhCd2JIa2dkR2hsSUhCbGNuTnBjM1JsYm1ObElHWnZjaUIyTWlCamIyNTBjbTlzYkdWeWMxeHVJQ0FnS2k5Y2JpQWdZMjl1YzNSeWRXTjBiM0lvZXlCamIyNW1hV2NzSUdOdmJuUnliMnhzWlhKTlpYTnpaVzVuWlhJc0lITjBZWFJsTENCd1pYSnphWE4wSUgwcElIdGNiaUFnSUNCemRYQmxjaWh6ZEdGMFpTazdYRzRnSUNBZ2RHaHBjeTV3WlhKemFYTjBJRDBnY0dWeWMybHpkRHRjYmlBZ0lDQjBhR2x6TG1OdmJuUnliMnhzWlhKTlpYTnpaVzVuWlhJZ1BTQmpiMjUwY205c2JHVnlUV1Z6YzJWdVoyVnlPMXh1SUNBZ0lHbG1JQ2hqYjI1bWFXY3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVTNSeWRXTjBkWEpsS0dOdmJtWnBaeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOdmJYQnZjMlZ6SUdFZ2JtVjNJR2x1ZEdWeWJtRnNJSE4wYjNKbElITjFZbk5qY21sd2RHbHZiaUJ6ZEhKMVkzUjFjbVZjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pXTnZjbVE4YzNSeWFXNW5MQ0J2WW1wbFkzUStmU0JqYjI1bWFXY2dMU0JFWlhOamNtbGlaWE1nZDJocFkyZ2djM1J2Y21WeklHRnlaU0JpWldsdVoxeHVJQ0FnS2lBZ0lHTnZiWEJ2YzJWa0xpQlVhR1VnYTJWNUlHbHpJSFJvWlNCdVlXMWxJRzltSUhSb1pTQnpkRzl5WlN3Z1lXNWtJSFJvWlNCMllXeDFaU0JwY3lCbGFYUm9aWElnWVc1Y2JpQWdJQ29nSUNCUFluTmxjbUZpYkdWVGRHOXlaU3dnYjNJZ1lTQmpiMjUwY205c2JHVnlJSFJvWVhRZ1pYaDBaVzVrY3lCdmJtVWdiMllnZEdobElIUjNieUJpWVhObFhHNGdJQ0FxSUNBZ1kyOXVkSEp2Ykd4bGNuTWdhVzRnZEdobElHQkFiV1YwWVcxaGMyc3ZZbUZ6WlMxamIyNTBjbTlzYkdWeVlDQndZV05yWVdkbExseHVJQ0FnS2k5Y2JpQWdkWEJrWVhSbFUzUnlkV04wZFhKbEtHTnZibVpwWnlrZ2UxeHVJQ0FnSUhSb2FYTXVZMjl1Wm1sbklEMGdZMjl1Wm1sbk8xeHVJQ0FnSUhSb2FYTXVjbVZ0YjNabFFXeHNUR2x6ZEdWdVpYSnpLQ2s3WEc0Z0lDQWdabTl5SUNoamIyNXpkQ0JyWlhrZ2IyWWdUMkpxWldOMExtdGxlWE1vWTI5dVptbG5LU2tnZTF4dUlDQWdJQ0FnYVdZZ0tDRmpiMjVtYVdkYmEyVjVYU2tnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUZWdVpHVm1hVzVsWkNBbkpIdHJaWGw5SjJBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1kyOXVjM1FnYzNSdmNtVWdQU0JqYjI1bWFXZGJhMlY1WFR0Y2JpQWdJQ0FnSUdsbUlDaHpkRzl5WlM1emRXSnpZM0pwWW1VcElIdGNiaUFnSUNBZ0lDQWdZMjl1Wm1sblcydGxlVjB1YzNWaWMyTnlhV0psS0NoemRHRjBaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVTNSaGRHVW9leUJiYTJWNVhUb2djM1JoZEdVZ2ZTazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjUwY205c2JHVnlUV1Z6YzJWdVoyVnlMbk4xWW5OamNtbGlaU2hjYmlBZ0lDQWdJQ0FnSUNCZ0pIdHpkRzl5WlM1dVlXMWxmVHB6ZEdGMFpVTm9ZVzVuWldBc1hHNGdJQ0FnSUNBZ0lDQWdLSE4wWVhSbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZFhCa1lYUmxaRk4wWVhSbElEMGdjM1JoZEdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV3WlhKemFYTjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFZ3WkdGMFpXUlRkR0YwWlNBOUlHZGxkRkJsY25OcGMzUmxiblJUZEdGMFpTaHpkR0YwWlN3Z1kyOXVabWxuVzJ0bGVWMHViV1YwWVdSaGRHRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWVGRHRjBaU2g3SUZ0clpYbGRPaUIxY0dSaGRHVmtVM1JoZEdVZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dUV1Z5WjJWeklHRnNiQ0JqYUdsc1pDQnpkRzl5WlNCemRHRjBaU0JwYm5SdklHRWdjMmx1WjJ4bElHOWlhbVZqZENCeVlYUm9aWElnZEdoaGJseHVJQ0FnS2lCeVpYUjFjbTVwYm1jZ1lXNGdiMkpxWldOMElHdGxlV1ZrSUdKNUlHTm9hV3hrSUhOMGIzSmxJR05zWVhOeklHNWhiV1ZjYmlBZ0lDcGNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UyOWlhbVZqZEgwZ1QySnFaV04wSUdOdmJuUmhhVzVwYm1jZ2JXVnlaMlZrSUdOb2FXeGtJSE4wYjNKbElITjBZWFJsWEc0Z0lDQXFMMXh1SUNCblpYUkdiR0YwVTNSaGRHVW9LU0I3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbU52Ym1acFp5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIdDlPMXh1SUNBZ0lIMWNiaUFnSUNCc1pYUWdabXhoZEZOMFlYUmxJRDBnZTMwN1hHNGdJQ0FnWm05eUlDaGpiMjV6ZENCclpYa2diMllnVDJKcVpXTjBMbXRsZVhNb2RHaHBjeTVqYjI1bWFXY3BLU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQmpiMjUwY205c2JHVnlJRDBnZEdocGN5NWpiMjVtYVdkYmEyVjVYVHRjYmlBZ0lDQWdJR052Ym5OMElITjBZWFJsSUQwZ1kyOXVkSEp2Ykd4bGNpNW5aWFJUZEdGMFpWeHVJQ0FnSUNBZ0lDQS9JR052Ym5SeWIyeHNaWEl1WjJWMFUzUmhkR1VvS1Z4dUlDQWdJQ0FnSUNBNklHTnZiblJ5YjJ4c1pYSXVjM1JoZEdVN1hHNGdJQ0FnSUNCbWJHRjBVM1JoZEdVZ1BTQjdJQzR1TG1ac1lYUlRkR0YwWlN3Z0xpNHVjM1JoZEdVZ2ZUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR1pzWVhSVGRHRjBaVHRjYmlBZ2ZWeHVmVnh1SWl3aUx5b2dRV05qYjNWdWRDQlVjbUZqYTJWeVhHNGdLbHh1SUNvZ1ZHaHBjeUJ0YjJSMWJHVWdhWE1nY21WemNHOXVjMmxpYkdVZ1ptOXlJSFJ5WVdOcmFXNW5JR0Z1ZVNCdWRXMWlaWElnYjJZZ1lXTmpiM1Z1ZEhOY2JpQXFJR0Z1WkNCallXTm9hVzVuSUhSb1pXbHlJR04xY25KbGJuUWdZbUZzWVc1alpYTWdKaUIwY21GdWMyRmpkR2x2YmlCamIzVnVkSE11WEc0Z0tseHVJQ29nU1hRZ1lXeHpieUIwY21GamEzTWdkSEpoYm5OaFkzUnBiMjRnYUdGemFHVnpMQ0JoYm1RZ1kyaGxZMnR6SUhSb1pXbHlJR2x1WTJ4MWMybHZiaUJ6ZEdGMGRYTmNiaUFxSUc5dUlHVmhZMmdnYm1WM0lHSnNiMk5yTGx4dUlDb3ZYRzVjYm1sdGNHOXlkQ0JGZEdoUmRXVnllU0JtY205dElDZGxkR2d0Y1hWbGNua25PMXh1WEc1cGJYQnZjblFnZXlCUFluTmxjblpoWW14bFUzUnZjbVVnZlNCbWNtOXRJQ2RBYldWMFlXMWhjMnN2YjJKekxYTjBiM0psSnp0Y2JtbHRjRzl5ZENCc2IyY2dabkp2YlNBbmJHOW5iR1YyWld3bk8xeHVhVzF3YjNKMElIQnBabmtnWm5KdmJTQW5jR2xtZVNjN1hHNXBiWEJ2Y25RZ2V5QlhaV0l6VUhKdmRtbGtaWElnZlNCbWNtOXRJQ2RBWlhSb1pYSnpjSEp2YW1WamRDOXdjbTkyYVdSbGNuTW5PMXh1YVcxd2IzSjBJSHNnUTI5dWRISmhZM1FnZlNCbWNtOXRJQ2RBWlhSb1pYSnpjSEp2YW1WamRDOWpiMjUwY21GamRITW5PMXh1YVcxd2IzSjBJRk5KVGtkTVJWOURRVXhNWDBKQlRFRk9RMFZUWDBGQ1NTQm1jbTl0SUNkemFXNW5iR1V0WTJGc2JDMWlZV3hoYm1ObExXTm9aV05yWlhJdFlXSnBKenRjYm1sdGNHOXlkQ0I3WEc0Z0lFTklRVWxPWDBsRVV5eGNiaUFnVEU5RFFVeElUMU5VWDFKUVExOVZVa3dzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12Ym1WMGQyOXlheWM3WEc1Y2JtbHRjRzl5ZENCN1hHNGdJRk5KVGtkTVJWOURRVXhNWDBKQlRFRk9RMFZUWDBGRVJGSkZVMU1zWEc0Z0lGTkpUa2RNUlY5RFFVeE1YMEpCVEVGT1EwVlRYMEZFUkZKRlUxTmZSMDlGVWt4SkxGeHVJQ0JUU1U1SFRFVmZRMEZNVEY5Q1FVeEJUa05GVTE5QlJFUlNSVk5UWDFORlVFOU1TVUVzWEc0Z0lGTkpUa2RNUlY5RFFVeE1YMEpCVEVGT1EwVlRYMEZFUkZKRlUxTmZRbE5ETEZ4dUlDQlRTVTVIVEVWZlEwRk1URjlDUVV4QlRrTkZVMTlCUkVSU1JWTlRYMDlRVkVsTlNWTk5MRnh1SUNCVFNVNUhURVZmUTBGTVRGOUNRVXhCVGtORlUxOUJSRVJTUlZOVFgxQlBURmxIVDA0c1hHNGdJRk5KVGtkTVJWOURRVXhNWDBKQlRFRk9RMFZUWDBGRVJGSkZVMU5mUVZaQlRFRk9RMGhGTEZ4dUlDQlRTVTVIVEVWZlEwRk1URjlDUVV4QlRrTkZVMTlCUkVSU1JWTlRYMFpCVGxSUFRTeGNiaUFnVTBsT1IweEZYME5CVEV4ZlFrRk1RVTVEUlZOZlFVUkVVa1ZUVTE5QlVrSkpWRkpWVFN4Y2JuMGdabkp2YlNBbkxpNHZZMjl1YzNSaGJuUnpMMk52Ym5SeVlXTjBjeWM3WEc1cGJYQnZjblFnZXlCd2NtVjJhVzkxYzFaaGJIVmxRMjl0Y0dGeVlYUnZjaUI5SUdaeWIyMGdKeTR2ZFhScGJDYzdYRzVjYmk4cUtseHVJQ29nVkdocGN5QnRiMlIxYkdVZ2FYTWdjbVZ6Y0c5dWMybGliR1VnWm05eUlIUnlZV05yYVc1bklHRnVlU0J1ZFcxaVpYSWdiMllnWVdOamIzVnVkSE1nWVc1a0lHTmhZMmhwYm1jZ2RHaGxhWElnWTNWeWNtVnVkQ0JpWVd4aGJtTmxjeUFtSUhSeVlXNXpZV04wYVc5dVhHNGdLaUJqYjNWdWRITXVYRzRnS2x4dUlDb2dTWFFnWVd4emJ5QjBjbUZqYTNNZ2RISmhibk5oWTNScGIyNGdhR0Z6YUdWekxDQmhibVFnWTJobFkydHpJSFJvWldseUlHbHVZMngxYzJsdmJpQnpkR0YwZFhNZ2IyNGdaV0ZqYUNCdVpYY2dZbXh2WTJzdVhHNGdLbHh1SUNvZ1FIUjVjR1ZrWldZZ2UyOWlhbVZqZEgwZ1FXTmpiM1Z1ZEZSeVlXTnJaWEpjYmlBcUlFQndjbTl3WlhKMGVTQjdiMkpxWldOMGZTQnpkRzl5WlNCVWFHVWdjM1J2Y21Wa0lHOWlhbVZqZENCamIyNTBZV2x1YVc1bklHRnNiQ0JoWTJOdmRXNTBjeUIwYnlCMGNtRmpheXdnWVhNZ2QyVnNiQ0JoY3lCMGFHVWdZM1Z5Y21WdWRDQmliRzlqYXlkeklHZGhjeUJzYVcxcGRDNWNiaUFxSUVCd2NtOXdaWEowZVNCN2IySnFaV04wZlNCemRHOXlaUzVoWTJOdmRXNTBjeUJVYUdVZ1lXTmpiM1Z1ZEhNZ1kzVnljbVZ1ZEd4NUlITjBiM0psWkNCcGJpQjBhR2x6SUVGalkyOTFiblJVY21GamEyVnlYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UzTjBjbWx1WjMwZ2MzUnZjbVV1WTNWeWNtVnVkRUpzYjJOclIyRnpUR2x0YVhRZ1FTQm9aWGdnYzNSeWFXNW5JR2x1WkdsallYUnBibWNnZEdobElHZGhjeUJzYVcxcGRDQnZaaUIwYUdVZ1kzVnljbVZ1ZENCaWJHOWphMXh1SUNvZ1FIQnliM0JsY25SNUlIdHZZbXBsWTNSOUlGOXdjbTkyYVdSbGNpQkJJSEJ5YjNacFpHVnlJRzVsWldSbFpDQjBieUJqY21WaGRHVWdkR2hsSUVWMGFGRjFaWEo1SUdsdWMzUmhibU5sSUhWelpXUWdkMmwwYUdsdUlIUm9hWE1nUVdOamIzVnVkRlJ5WVdOclpYSXVYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UwVjBhRkYxWlhKNWZTQmZjWFZsY25rZ1FXNGdSWFJvVVhWbGNua2dhVzV6ZEdGdVkyVWdkWE5sWkNCMGJ5QmhZMk5sYzNNZ1lXTmpiM1Z1ZENCcGJtWnZjbTFoZEdsdmJpQm1jbTl0SUhSb1pTQmliRzlqYTJOb1lXbHVYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UwSnNiMk5yVkhKaFkydGxjbjBnWDJKc2IyTnJWSEpoWTJ0bGNpQkJJRUpzYjJOclZISmhZMnRsY2lCcGJuTjBZVzVqWlM0Z1RtVmxaR1ZrSUhSdklHVnVjM1Z5WlNCMGFHRjBJR0ZqWTI5MWJuUnpJR0Z1WkNCMGFHVnBjaUJwYm1adklIVndaR0YwWlhOY2JpQXFJSGRvWlc0Z1lTQnVaWGNnWW14dlkyc2dhWE1nWTNKbFlYUmxaQzVjYmlBcUlFQndjbTl3WlhKMGVTQjdiMkpxWldOMGZTQmZZM1Z5Y21WdWRFSnNiMk5yVG5WdFltVnlJRkpsWm1WeVpXNWpaU0IwYnlCaElIQnliM0JsY25SNUlHOXVJSFJvWlNCZllteHZZMnRVY21GamEyVnlPaUIwYUdVZ2JuVnRZbVZ5SUNocExtVXVJR0Z1SUdsa0tTQnZaaUIwYUdVZ2RHaGxJR04xY25KbGJuUWdZbXh2WTJ0Y2JpQXFMMXh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1FXTmpiM1Z1ZEZSeVlXTnJaWElnZTF4dUlDQXZLaXBjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHOXdkSE1nTFNCUGNIUnBiMjV6SUdadmNpQnBibWwwYVdGc2FYcHBibWNnZEdobElHTnZiblJ5YjJ4c1pYSmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUc5d2RITXVjSEp2ZG1sa1pYSWdMU0JCYmlCRlNWQXRNVEU1TXlCd2NtOTJhV1JsY2lCcGJuTjBZVzVqWlNCMGFHRjBJSFZ6WlhNZ2RHaGxJR04xY25KbGJuUWdaMnh2WW1Gc0lHNWxkSGR2Y210Y2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJRzl3ZEhNdVlteHZZMnRVY21GamEyVnlJQzBnUVNCaWJHOWpheUIwY21GamEyVnlMQ0IzYUdsamFDQmxiV2wwY3lCbGRtVnVkSE1nWm05eUlHVmhZMmdnYm1WM0lHSnNiMk5yWEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJRzl3ZEhNdVoyVjBRM1Z5Y21WdWRFTm9ZV2x1U1dRZ0xTQkJJR1oxYm1OMGFXOXVJSFJvWVhRZ2NtVjBkWEp1Y3lCMGFHVWdZR05vWVdsdVNXUmdJR1p2Y2lCMGFHVWdZM1Z5Y21WdWRDQm5iRzlpWVd3Z2JtVjBkMjl5YTF4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0J2Y0hSekxtZGxkRTVsZEhkdmNtdEpaR1Z1ZEdsbWFXVnlJQzBnUVNCbWRXNWpkR2x2YmlCMGFHRjBJSEpsZEhWeWJuTWdkR2hsSUdOMWNuSmxiblFnYm1WMGQyOXlhMXh1SUNBZ0tpOWNiaUFnWTI5dWMzUnlkV04wYjNJb2IzQjBjeUE5SUh0OUtTQjdYRzRnSUNBZ1kyOXVjM1FnYVc1cGRGTjBZWFJsSUQwZ2UxeHVJQ0FnSUNBZ1lXTmpiM1Z1ZEhNNklIdDlMRnh1SUNBZ0lDQWdZM1Z5Y21WdWRFSnNiMk5yUjJGelRHbHRhWFE2SUNjbkxGeHVJQ0FnSUgwN1hHNGdJQ0FnZEdocGN5NXpkRzl5WlNBOUlHNWxkeUJQWW5ObGNuWmhZbXhsVTNSdmNtVW9leUF1TGk1cGJtbDBVM1JoZEdVc0lDNHVMbTl3ZEhNdWFXNXBkRk4wWVhSbElIMHBPMXh1WEc0Z0lDQWdkR2hwY3k1eVpYTmxkRk4wWVhSbElEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2hwYm1sMFUzUmhkR1VwTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0IwYUdsekxsOXdjbTkyYVdSbGNpQTlJRzl3ZEhNdWNISnZkbWxrWlhJN1hHNGdJQ0FnZEdocGN5NWZjWFZsY25rZ1BTQndhV1o1S0c1bGR5QkZkR2hSZFdWeWVTaDBhR2x6TGw5d2NtOTJhV1JsY2lrcE8xeHVJQ0FnSUhSb2FYTXVYMkpzYjJOclZISmhZMnRsY2lBOUlHOXdkSE11WW14dlkydFVjbUZqYTJWeU8xeHVJQ0FnSUM4dklHSnNiMk5yVkhKaFkydGxjaTVqZFhKeVpXNTBRbXh2WTJzZ2JXRjVJR0psSUc1MWJHeGNiaUFnSUNCMGFHbHpMbDlqZFhKeVpXNTBRbXh2WTJ0T2RXMWlaWElnUFNCMGFHbHpMbDlpYkc5amExUnlZV05yWlhJdVoyVjBRM1Z5Y21WdWRFSnNiMk5yS0NrN1hHNGdJQ0FnZEdocGN5NWZZbXh2WTJ0VWNtRmphMlZ5TG05dVkyVW9KMnhoZEdWemRDY3NJQ2hpYkc5amEwNTFiV0psY2lrZ1BUNGdlMXh1SUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEVKc2IyTnJUblZ0WW1WeUlEMGdZbXh2WTJ0T2RXMWlaWEk3WEc0Z0lDQWdmU2s3WEc0Z0lDQWdMeThnWW1sdVpDQm1kVzVqZEdsdmJpQm1iM0lnWldGemFXVnlJR3hwYzNSbGJtVnlJSE41Ym5SaGVGeHVJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpVWnZja0pzYjJOcklEMGdkR2hwY3k1ZmRYQmtZWFJsUm05eVFteHZZMnN1WW1sdVpDaDBhR2x6S1R0Y2JpQWdJQ0IwYUdsekxtZGxkRU4xY25KbGJuUkRhR0ZwYmtsa0lEMGdiM0IwY3k1blpYUkRkWEp5Wlc1MFEyaGhhVzVKWkR0Y2JpQWdJQ0IwYUdsekxtZGxkRTVsZEhkdmNtdEpaR1Z1ZEdsbWFXVnlJRDBnYjNCMGN5NW5aWFJPWlhSM2IzSnJTV1JsYm5ScFptbGxjanRjYmlBZ0lDQjBhR2x6TG5CeVpXWmxjbVZ1WTJWelEyOXVkSEp2Ykd4bGNpQTlJRzl3ZEhNdWNISmxabVZ5Wlc1alpYTkRiMjUwY205c2JHVnlPMXh1SUNBZ0lIUm9hWE11YjI1aWIyRnlaR2x1WjBOdmJuUnliMnhzWlhJZ1BTQnZjSFJ6TG05dVltOWhjbVJwYm1kRGIyNTBjbTlzYkdWeU8xeHVYRzRnSUNBZ2RHaHBjeTV2Ym1KdllYSmthVzVuUTI5dWRISnZiR3hsY2k1emRHOXlaUzV6ZFdKelkzSnBZbVVvWEc0Z0lDQWdJQ0J3Y21WMmFXOTFjMVpoYkhWbFEyOXRjR0Z5WVhSdmNpaGhjM2x1WXlBb2NISmxkbE4wWVhSbExDQmpkWEp5VTNSaGRHVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCamIyMXdiR1YwWldSUGJtSnZZWEprYVc1bk9pQndjbVYyUTI5dGNHeGxkR1ZrVDI1aWIyRnlaR2x1WnlCOUlEMGdjSEpsZGxOMFlYUmxPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdJR052YlhCc1pYUmxaRTl1WW05aGNtUnBibWM2SUdOMWNuSkRiMjF3YkdWMFpXUlBibUp2WVhKa2FXNW5JSDBnUFNCamRYSnlVM1JoZEdVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doY0hKbGRrTnZiWEJzWlhSbFpFOXVZbTloY21ScGJtY2dKaVlnWTNWeWNrTnZiWEJzWlhSbFpFOXVZbTloY21ScGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkxY0dSaGRHVkJZMk52ZFc1MGN5Z3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5TENCMGFHbHpMbTl1WW05aGNtUnBibWREYjI1MGNtOXNiR1Z5TG5OMGIzSmxMbWRsZEZOMFlYUmxLQ2twTEZ4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0IwYUdsekxuQnlaV1psY21WdVkyVnpRMjl1ZEhKdmJHeGxjaTV6ZEc5eVpTNXpkV0p6WTNKcFltVW9YRzRnSUNBZ0lDQndjbVYyYVc5MWMxWmhiSFZsUTI5dGNHRnlZWFJ2Y2loaGMzbHVZeUFvY0hKbGRsTjBZWFJsTENCamRYSnlVM1JoZEdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdleUJ6Wld4bFkzUmxaRUZrWkhKbGMzTTZJSEJ5WlhaVFpXeGxZM1JsWkVGa1pISmxjM01nZlNBOUlIQnlaWFpUZEdGMFpUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5sYkdWamRHVmtRV1JrY21WemN6b2dZM1Z5Y2xObGJHVmpkR1ZrUVdSa2NtVnpjeXhjYmlBZ0lDQWdJQ0FnSUNCMWMyVk5kV3gwYVVGalkyOTFiblJDWVd4aGJtTmxRMmhsWTJ0bGNpeGNiaUFnSUNBZ0lDQWdmU0E5SUdOMWNuSlRkR0YwWlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdJQ0FnSUhCeVpYWlRaV3hsWTNSbFpFRmtaSEpsYzNNZ0lUMDlJR04xY25KVFpXeGxZM1JsWkVGa1pISmxjM01nSmlaY2JpQWdJQ0FnSUNBZ0lDQWhkWE5sVFhWc2RHbEJZMk52ZFc1MFFtRnNZVzVqWlVOb1pXTnJaWEpjYmlBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRYQmtZWFJsUVdOamIzVnVkSE1vS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTd2dkR2hwY3k1dmJtSnZZWEprYVc1blEyOXVkSEp2Ykd4bGNpNXpkRzl5WlM1blpYUlRkR0YwWlNncEtTeGNiaUFnSUNBcE8xeHVJQ0FnSUhSb2FYTXVaWFJvWlhKelVISnZkbWxrWlhJZ1BTQnVaWGNnVjJWaU0xQnliM1pwWkdWeUtIUm9hWE11WDNCeWIzWnBaR1Z5S1R0Y2JpQWdmVnh1WEc0Z0lITjBZWEowS0NrZ2UxeHVJQ0FnSUM4dklISmxiVzkyWlNCbWFYSnpkQ0IwYnlCaGRtOXBaQ0JrYjNWaWJHVWdZV1JrWEc0Z0lDQWdkR2hwY3k1ZllteHZZMnRVY21GamEyVnlMbkpsYlc5MlpVeHBjM1JsYm1WeUtDZHNZWFJsYzNRbkxDQjBhR2x6TGw5MWNHUmhkR1ZHYjNKQ2JHOWpheWs3WEc0Z0lDQWdMeThnWVdSa0lHeHBjM1JsYm1WeVhHNGdJQ0FnZEdocGN5NWZZbXh2WTJ0VWNtRmphMlZ5TG1Ga1pFeHBjM1JsYm1WeUtDZHNZWFJsYzNRbkxDQjBhR2x6TGw5MWNHUmhkR1ZHYjNKQ2JHOWpheWs3WEc0Z0lDQWdMeThnWm1WMFkyZ2dZV05qYjNWdWRDQmlZV3hoYm1ObGMxeHVJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpVRmpZMjkxYm5SektDazdYRzRnSUgxY2JseHVJQ0J6ZEc5d0tDa2dlMXh1SUNBZ0lDOHZJSEpsYlc5MlpTQnNhWE4wWlc1bGNseHVJQ0FnSUhSb2FYTXVYMkpzYjJOclZISmhZMnRsY2k1eVpXMXZkbVZNYVhOMFpXNWxjaWduYkdGMFpYTjBKeXdnZEdocGN5NWZkWEJrWVhSbFJtOXlRbXh2WTJzcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVZ1YzNWeVpYTWdkR2hoZENCMGFHVWdiRzlqWVd4c2VTQnpkRzl5WldRZ1lXTmpiM1Z1ZEhNZ1lYSmxJR2x1SUhONWJtTWdkMmwwYUNCaElITmxkQ0J2WmlCaFkyTnZkVzUwY3lCemRHOXlaV1FnWlhoMFpYSnVZV3hzZVNCMGJ5QjBhR2x6WEc0Z0lDQXFJRUZqWTI5MWJuUlVjbUZqYTJWeUxseHVJQ0FnS2x4dUlDQWdLaUJQYm1ObElIUm9hWE1nUVdOamIzVnVkRlJ5WVdOclpYSW5jeUJoWTJOdmRXNTBjeUJoY21VZ2RYQWdkRzhnWkdGMFpTQjNhWFJvSUhSb2IzTmxJSEpsWm1WeVpXNWpaV1FnWW5rZ2RHaGxJSEJoYzNObFpDQmhaR1J5WlhOelpYTXNJR1ZoWTJoY2JpQWdJQ29nYjJZZ2RHaGxjMlVnWVdOamIzVnVkSE1nWVhKbElHZHBkbVZ1SUdGdUlIVndaR0YwWldRZ1ltRnNZVzVqWlNCMmFXRWdSWFJvVVhWbGNua3VYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3UVhKeVlYbDlJR0ZrWkhKbGMzTmxjeUF0SUZSb1pTQmhjbkpoZVNCdlppQm9aWGdnWVdSa2NtVnpjMlZ6SUdadmNpQmhZMk52ZFc1MGN5QjNhWFJvSUhkb2FXTm9JSFJvYVhNZ1FXTmpiM1Z1ZEZSeVlXTnJaWEluY3lCaFkyTnZkVzUwY3lCemFHOTFiR1FnWW1WY2JpQWdJQ29nYVc0Z2MzbHVZMXh1SUNBZ0tpOWNiaUFnYzNsdVkxZHBkR2hCWkdSeVpYTnpaWE1vWVdSa2NtVnpjMlZ6S1NCN1hHNGdJQ0FnWTI5dWMzUWdleUJoWTJOdmRXNTBjeUI5SUQwZ2RHaHBjeTV6ZEc5eVpTNW5aWFJUZEdGMFpTZ3BPMXh1SUNBZ0lHTnZibk4wSUd4dlkyRnNjeUE5SUU5aWFtVmpkQzVyWlhsektHRmpZMjkxYm5SektUdGNibHh1SUNBZ0lHTnZibk4wSUdGalkyOTFiblJ6Vkc5QlpHUWdQU0JiWFR0Y2JpQWdJQ0JoWkdSeVpYTnpaWE11Wm05eVJXRmphQ2dvZFhCemRISmxZVzBwSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2doYkc5allXeHpMbWx1WTJ4MVpHVnpLSFZ3YzNSeVpXRnRLU2tnZTF4dUlDQWdJQ0FnSUNCaFkyTnZkVzUwYzFSdlFXUmtMbkIxYzJnb2RYQnpkSEpsWVcwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ1kyOXVjM1FnWVdOamIzVnVkSE5VYjFKbGJXOTJaU0E5SUZ0ZE8xeHVJQ0FnSUd4dlkyRnNjeTVtYjNKRllXTm9LQ2hzYjJOaGJDa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tDRmhaR1J5WlhOelpYTXVhVzVqYkhWa1pYTW9iRzlqWVd3cEtTQjdYRzRnSUNBZ0lDQWdJR0ZqWTI5MWJuUnpWRzlTWlcxdmRtVXVjSFZ6YUNoc2IyTmhiQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0IwYUdsekxtRmtaRUZqWTI5MWJuUnpLR0ZqWTI5MWJuUnpWRzlCWkdRcE8xeHVJQ0FnSUhSb2FYTXVjbVZ0YjNabFFXTmpiM1Z1ZENoaFkyTnZkVzUwYzFSdlVtVnRiM1psS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJaR1J6SUc1bGR5QmhaR1J5WlhOelpYTWdkRzhnZEhKaFkyc2dkR2hsSUdKaGJHRnVZMlZ6SUc5bVhHNGdJQ0FxSUdkcGRtVnVJR0VnWW1Gc1lXNWpaU0JoY3lCc2IyNW5JSFJvYVhNdVgyTjFjbkpsYm5SQ2JHOWphMDUxYldKbGNpQnBjeUJrWldacGJtVmtMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0JoWkdSeVpYTnpaWE1nTFNCQmJpQmhjbkpoZVNCdlppQm9aWGdnWVdSa2NtVnpjMlZ6SUc5bUlHNWxkeUJoWTJOdmRXNTBjeUIwYnlCMGNtRmphMXh1SUNBZ0tpOWNiaUFnWVdSa1FXTmpiM1Z1ZEhNb1lXUmtjbVZ6YzJWektTQjdYRzRnSUNBZ1kyOXVjM1FnZXlCaFkyTnZkVzUwY3lCOUlEMGdkR2hwY3k1emRHOXlaUzVuWlhSVGRHRjBaU2dwTzF4dUlDQWdJQzh2SUdGa1pDQnBibWwwYVdGc0lITjBZWFJsSUdadmNpQmhaR1J5WlhOelpYTmNiaUFnSUNCaFpHUnlaWE56WlhNdVptOXlSV0ZqYUNnb1lXUmtjbVZ6Y3lrZ1BUNGdlMXh1SUNBZ0lDQWdZV05qYjNWdWRITmJZV1JrY21WemMxMGdQU0I3ZlR0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0F2THlCellYWmxJR0ZqWTI5MWJuUnpJSE4wWVhSbFhHNGdJQ0FnZEdocGN5NXpkRzl5WlM1MWNHUmhkR1ZUZEdGMFpTaDdJR0ZqWTI5MWJuUnpJSDBwTzF4dUlDQWdJQzh2SUdabGRHTm9JR0poYkdGdVkyVnpJR1p2Y2lCMGFHVWdZV05qYjNWdWRITWdhV1lnZEdobGNtVWdhWE1nWW14dlkyc2diblZ0WW1WeUlISmxZV1I1WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbDlqZFhKeVpXNTBRbXh2WTJ0T2RXMWlaWElwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTVmZFhCa1lYUmxRV05qYjNWdWRITW9LVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pXMXZkbVZ6SUdGalkyOTFiblJ6SUdaeWIyMGdZbVZwYm1jZ2RISmhZMnRsWkZ4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCaFpHUnlaWE56WlhNZ0xTQkJiaUJoY25KaGVTQnZaaUJvWlhnZ1lXUmtjbVZ6YzJWeklIUnZJSE4wYjNBZ2RISmhZMnRwYm1jdVhHNGdJQ0FxTDF4dUlDQnlaVzF2ZG1WQlkyTnZkVzUwS0dGa1pISmxjM05sY3lrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnWVdOamIzVnVkSE1nZlNBOUlIUm9hWE11YzNSdmNtVXVaMlYwVTNSaGRHVW9LVHRjYmlBZ0lDQXZMeUJ5WlcxdmRtVWdaV0ZqYUNCemRHRjBaU0J2WW1wbFkzUmNiaUFnSUNCaFpHUnlaWE56WlhNdVptOXlSV0ZqYUNnb1lXUmtjbVZ6Y3lrZ1BUNGdlMXh1SUNBZ0lDQWdaR1ZzWlhSbElHRmpZMjkxYm5SelcyRmtaSEpsYzNOZE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUM4dklITmhkbVVnWVdOamIzVnVkSE1nYzNSaGRHVmNiaUFnSUNCMGFHbHpMbk4wYjNKbExuVndaR0YwWlZOMFlYUmxLSHNnWVdOamIzVnVkSE1nZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZ0YjNabGN5QmhiR3dnWVdSa2NtVnpjMlZ6SUdGdVpDQmhjM052WTJsaGRHVmtJR0poYkdGdVkyVnpYRzRnSUNBcUwxeHVYRzRnSUdOc1pXRnlRV05qYjNWdWRITW9LU0I3WEc0Z0lDQWdkR2hwY3k1emRHOXlaUzUxY0dSaGRHVlRkR0YwWlNoN0lHRmpZMjkxYm5Sek9pQjdmU0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhhWFpsYmlCaElHSnNiMk5yTENCMWNHUmhkR1Z6SUhSb2FYTWdRV05qYjNWdWRGUnlZV05yWlhJbmN5QmpkWEp5Wlc1MFFteHZZMnRIWVhOTWFXMXBkQ3dnWVc1a0lIUm9aVzRnZFhCa1lYUmxjeUJsWVdOb0lHeHZZMkZzSUdGalkyOTFiblFuY3lCaVlXeGhibU5sWEc0Z0lDQXFJSFpwWVNCRmRHaFJkV1Z5ZVZ4dUlDQWdLbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnWW14dlkydE9kVzFpWlhJZ0xTQjBhR1VnWW14dlkyc2diblZ0WW1WeUlIUnZJSFZ3WkdGMFpTQjBieTVjYmlBZ0lDb2dRR1pwY21WeklDZGliRzlqYXljZ1ZHaGxJSFZ3WkdGMFpXUWdjM1JoZEdVc0lHbG1JR0ZzYkNCaFkyTnZkVzUwSUhWd1pHRjBaWE1nWVhKbElITjFZMk5sYzNObWRXeGNiaUFnSUNvdlhHNGdJR0Z6ZVc1aklGOTFjR1JoZEdWR2IzSkNiRzlqYXloaWJHOWphMDUxYldKbGNpa2dlMXh1SUNBZ0lIUm9hWE11WDJOMWNuSmxiblJDYkc5amEwNTFiV0psY2lBOUlHSnNiMk5yVG5WdFltVnlPMXh1WEc0Z0lDQWdMeThnWW14dlkyc2daMkZ6VEdsdGFYUWdjRzlzYkdsdVp5QnphRzkxYkdSdUozUWdZbVVnYVc0Z1lXTmpiM1Z1ZEMxMGNtRmphMlZ5SUhOb2IzVnNaRzRuZENCaVpTQm9aWEpsTGk0dVhHNGdJQ0FnWTI5dWMzUWdZM1Z5Y21WdWRFSnNiMk5ySUQwZ1lYZGhhWFFnZEdocGN5NWZjWFZsY25rdVoyVjBRbXh2WTJ0Q2VVNTFiV0psY2loaWJHOWphMDUxYldKbGNpd2dabUZzYzJVcE8xeHVJQ0FnSUdsbUlDZ2hZM1Z5Y21WdWRFSnNiMk5yS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1SUNBZ0lHTnZibk4wSUdOMWNuSmxiblJDYkc5amEwZGhjMHhwYldsMElEMGdZM1Z5Y21WdWRFSnNiMk5yTG1kaGMweHBiV2wwTzF4dUlDQWdJSFJvYVhNdWMzUnZjbVV1ZFhCa1lYUmxVM1JoZEdVb2V5QmpkWEp5Wlc1MFFteHZZMnRIWVhOTWFXMXBkQ0I5S1R0Y2JseHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQmhkMkZwZENCMGFHbHpMbDkxY0dSaGRHVkJZMk52ZFc1MGN5Z3BPMXh1SUNBZ0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJQ0FnYkc5bkxtVnljbTl5S0dWeWNpazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJR0poYkdGdVkyVkRhR1ZqYTJWeUlHbHpJR1JsY0d4dmVXVmtJRzl1SUcxaGFXNGdaWFJvSUNoMFpYTjBLVzVsZEhNZ1lXNWtJSEpsY1hWcGNtVnpJR0VnYzJsdVoyeGxJR05oYkd4Y2JpQWdJQ29nWm05eUlHRnNiQ0J2ZEdobGNpQnVaWFIzYjNKcmN5d2dZMkZzYkhNZ2RHaHBjeTVmZFhCa1lYUmxRV05qYjNWdWRDQm1iM0lnWldGamFDQmhZMk52ZFc1MElHbHVJSFJvYVhNdWMzUnZjbVZjYmlBZ0lDcGNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UxQnliMjFwYzJWOUlHRm1kR1Z5SUdGc2JDQmhZMk52ZFc1MElHSmhiR0Z1WTJWeklIVndaR0YwWldSY2JpQWdJQ292WEc0Z0lHRnplVzVqSUY5MWNHUmhkR1ZCWTJOdmRXNTBjeWdwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJR052YlhCc1pYUmxaRTl1WW05aGNtUnBibWNnZlNBOUlIUm9hWE11YjI1aWIyRnlaR2x1WjBOdmJuUnliMnhzWlhJdWMzUnZjbVV1WjJWMFUzUmhkR1VvS1R0Y2JpQWdJQ0JwWmlBb0lXTnZiWEJzWlhSbFpFOXVZbTloY21ScGJtY3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNGdJQ0FnWTI5dWMzUWdleUIxYzJWTmRXeDBhVUZqWTI5MWJuUkNZV3hoYm1ObFEyaGxZMnRsY2lCOUlEMWNiaUFnSUNBZ0lIUm9hWE11Y0hKbFptVnlaVzVqWlhORGIyNTBjbTlzYkdWeUxuTjBiM0psTG1kbGRGTjBZWFJsS0NrN1hHNWNiaUFnSUNCc1pYUWdZV1JrY21WemMyVnpJRDBnVzEwN1hHNGdJQ0FnYVdZZ0tIVnpaVTExYkhScFFXTmpiM1Z1ZEVKaGJHRnVZMlZEYUdWamEyVnlLU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQjdJR0ZqWTI5MWJuUnpJSDBnUFNCMGFHbHpMbk4wYjNKbExtZGxkRk4wWVhSbEtDazdYRzVjYmlBZ0lDQWdJR0ZrWkhKbGMzTmxjeUE5SUU5aWFtVmpkQzVyWlhsektHRmpZMjkxYm5SektUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWTI5dWMzUWdjMlZzWldOMFpXUkJaR1J5WlhOeklEMGdkR2hwY3k1d2NtVm1aWEpsYm1ObGMwTnZiblJ5YjJ4c1pYSXVaMlYwVTJWc1pXTjBaV1JCWkdSeVpYTnpLQ2s3WEc1Y2JpQWdJQ0FnSUdGa1pISmxjM05sY3lBOUlGdHpaV3hsWTNSbFpFRmtaSEpsYzNOZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJR05vWVdsdVNXUWdQU0IwYUdsekxtZGxkRU4xY25KbGJuUkRhR0ZwYmtsa0tDazdYRzRnSUNBZ1kyOXVjM1FnYm1WMGQyOXlhMGxrSUQwZ2RHaHBjeTVuWlhST1pYUjNiM0pyU1dSbGJuUnBabWxsY2lncE8xeHVJQ0FnSUdOdmJuTjBJSEp3WTFWeWJDQTlJQ2RvZEhSd09pOHZNVEkzTGpBdU1DNHhPamcxTkRVbk8xeHVYRzRnSUNBZ2FXWWdLRzVsZEhkdmNtdEpaQ0E5UFQwZ1RFOURRVXhJVDFOVVgxSlFRMTlWVWt3Z2ZId2dibVYwZDI5eWEwbGtJRDA5UFNCeWNHTlZjbXdwSUh0Y2JpQWdJQ0FnSUdGM1lXbDBJRkJ5YjIxcGMyVXVZV3hzS0dGa1pISmxjM05sY3k1dFlYQW9kR2hwY3k1ZmRYQmtZWFJsUVdOamIzVnVkQzVpYVc1a0tIUm9hWE1wS1NrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSE4zYVhSamFDQW9ZMmhoYVc1SlpDa2dlMXh1SUNBZ0lDQWdJQ0JqWVhObElFTklRVWxPWDBsRVV5NU5RVWxPVGtWVU9seHVJQ0FnSUNBZ0lDQWdJR0YzWVdsMElIUm9hWE11WDNWd1pHRjBaVUZqWTI5MWJuUnpWbWxoUW1Gc1lXNWpaVU5vWldOclpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCaFpHUnlaWE56WlhNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JUU1U1SFRFVmZRMEZNVEY5Q1FVeEJUa05GVTE5QlJFUlNSVk5UTEZ4dUlDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjYmlBZ0lDQWdJQ0FnWTJGelpTQkRTRUZKVGw5SlJGTXVSMDlGVWt4Sk9seHVJQ0FnSUNBZ0lDQWdJR0YzWVdsMElIUm9hWE11WDNWd1pHRjBaVUZqWTI5MWJuUnpWbWxoUW1Gc1lXNWpaVU5vWldOclpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCaFpHUnlaWE56WlhNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JUU1U1SFRFVmZRMEZNVEY5Q1FVeEJUa05GVTE5QlJFUlNSVk5UWDBkUFJWSk1TU3hjYmlBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVYRzRnSUNBZ0lDQWdJR05oYzJVZ1EwaEJTVTVmU1VSVExsTkZVRTlNU1VFNlhHNGdJQ0FnSUNBZ0lDQWdZWGRoYVhRZ2RHaHBjeTVmZFhCa1lYUmxRV05qYjNWdWRITldhV0ZDWVd4aGJtTmxRMmhsWTJ0bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUdGa1pISmxjM05sY3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJRk5KVGtkTVJWOURRVXhNWDBKQlRFRk9RMFZUWDBGRVJGSkZVMU5mVTBWUVQweEpRU3hjYmlBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVYRzRnSUNBZ0lDQWdJR05oYzJVZ1EwaEJTVTVmU1VSVExrSlRRenBjYmlBZ0lDQWdJQ0FnSUNCaGQyRnBkQ0IwYUdsekxsOTFjR1JoZEdWQlkyTnZkVzUwYzFacFlVSmhiR0Z1WTJWRGFHVmphMlZ5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdZV1JrY21WemMyVnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1UwbE9SMHhGWDBOQlRFeGZRa0ZNUVU1RFJWTmZRVVJFVWtWVFUxOUNVME1zWEc0Z0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNibHh1SUNBZ0lDQWdJQ0JqWVhObElFTklRVWxPWDBsRVV5NVBVRlJKVFVsVFRUcGNiaUFnSUNBZ0lDQWdJQ0JoZDJGcGRDQjBhR2x6TGw5MWNHUmhkR1ZCWTJOdmRXNTBjMVpwWVVKaGJHRnVZMlZEYUdWamEyVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lXUmtjbVZ6YzJWekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnVTBsT1IweEZYME5CVEV4ZlFrRk1RVTVEUlZOZlFVUkVVa1ZUVTE5UFVGUkpUVWxUVFN4Y2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1WEc0Z0lDQWdJQ0FnSUdOaGMyVWdRMGhCU1U1ZlNVUlRMbEJQVEZsSFQwNDZYRzRnSUNBZ0lDQWdJQ0FnWVhkaGFYUWdkR2hwY3k1ZmRYQmtZWFJsUVdOamIzVnVkSE5XYVdGQ1lXeGhibU5sUTJobFkydGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmtaSEpsYzNObGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUZOSlRrZE1SVjlEUVV4TVgwSkJURUZPUTBWVFgwRkVSRkpGVTFOZlVFOU1XVWRQVGl4Y2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1WEc0Z0lDQWdJQ0FnSUdOaGMyVWdRMGhCU1U1ZlNVUlRMa0ZXUVV4QlRrTklSVHBjYmlBZ0lDQWdJQ0FnSUNCaGQyRnBkQ0IwYUdsekxsOTFjR1JoZEdWQlkyTnZkVzUwYzFacFlVSmhiR0Z1WTJWRGFHVmphMlZ5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdZV1JrY21WemMyVnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1UwbE9SMHhGWDBOQlRFeGZRa0ZNUVU1RFJWTmZRVVJFVWtWVFUxOUJWa0ZNUVU1RFNFVXNYRzRnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JseHVJQ0FnSUNBZ0lDQmpZWE5sSUVOSVFVbE9YMGxFVXk1R1FVNVVUMDA2WEc0Z0lDQWdJQ0FnSUNBZ1lYZGhhWFFnZEdocGN5NWZkWEJrWVhSbFFXTmpiM1Z1ZEhOV2FXRkNZV3hoYm1ObFEyaGxZMnRsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJR0ZrWkhKbGMzTmxjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lGTkpUa2RNUlY5RFFVeE1YMEpCVEVGT1EwVlRYMEZFUkZKRlUxTmZSa0ZPVkU5TkxGeHVJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0FnSUNBZ1kyRnpaU0JEU0VGSlRsOUpSRk11UVZKQ1NWUlNWVTA2WEc0Z0lDQWdJQ0FnSUNBZ1lYZGhhWFFnZEdocGN5NWZkWEJrWVhSbFFXTmpiM1Z1ZEhOV2FXRkNZV3hoYm1ObFEyaGxZMnRsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJR0ZrWkhKbGMzTmxjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lGTkpUa2RNUlY5RFFVeE1YMEpCVEVGT1EwVlRYMEZFUkZKRlUxTmZRVkpDU1ZSU1ZVMHNYRzRnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JseHVJQ0FnSUNBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ0lDQWdJR0YzWVdsMElGQnliMjFwYzJVdVlXeHNLR0ZrWkhKbGMzTmxjeTV0WVhBb2RHaHBjeTVmZFhCa1lYUmxRV05qYjNWdWRDNWlhVzVrS0hSb2FYTXBLU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZWd1pHRjBaWE1nZEdobElHTjFjbkpsYm5RZ1ltRnNZVzVqWlNCdlppQmhiaUJoWTJOdmRXNTBMbHh1SUNBZ0tseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZV1JrY21WemN5QXRJRUVnYUdWNElHRmtaSEpsYzNNZ2IyWWdZU0IwYUdVZ1lXTmpiM1Z1ZENCMGJ5QmlaU0IxY0dSaGRHVmtYRzRnSUNBcUlFQnlaWFIxY201eklIdFFjbTl0YVhObGZTQmhablJsY2lCMGFHVWdZV05qYjNWdWRDQmlZV3hoYm1ObElHbHpJSFZ3WkdGMFpXUmNiaUFnSUNvdlhHNGdJR0Z6ZVc1aklGOTFjR1JoZEdWQlkyTnZkVzUwS0dGa1pISmxjM01wSUh0Y2JpQWdJQ0JqYjI1emRDQjdJSFZ6WlUxMWJIUnBRV05qYjNWdWRFSmhiR0Z1WTJWRGFHVmphMlZ5SUgwZ1BWeHVJQ0FnSUNBZ2RHaHBjeTV3Y21WbVpYSmxibU5sYzBOdmJuUnliMnhzWlhJdWMzUnZjbVV1WjJWMFUzUmhkR1VvS1R0Y2JseHVJQ0FnSUd4bGRDQmlZV3hoYm1ObElEMGdKekI0TUNjN1hHNWNiaUFnSUNBdkx5QnhkV1Z5ZVNCaVlXeGhibU5sWEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdKaGJHRnVZMlVnUFNCaGQyRnBkQ0IwYUdsekxsOXhkV1Z5ZVM1blpYUkNZV3hoYm1ObEtHRmtaSEpsYzNNcE8xeHVJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNtOXlLU0I3WEc0Z0lDQWdJQ0JwWmlBb1pYSnliM0l1WkdGMFlUOHVjbVZ4ZFdWemREOHViV1YwYUc5a0lDRTlQU0FuWlhSb1gyZGxkRUpoYkdGdVkyVW5LU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJR1Z5Y205eU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJSEpsYzNWc2RDQTlJSHNnWVdSa2NtVnpjeXdnWW1Gc1lXNWpaU0I5TzF4dUlDQWdJQzh2SUhWd1pHRjBaU0JoWTJOdmRXNTBjeUJ6ZEdGMFpWeHVJQ0FnSUdOdmJuTjBJSHNnWVdOamIzVnVkSE1nZlNBOUlIUm9hWE11YzNSdmNtVXVaMlYwVTNSaGRHVW9LVHRjYmlBZ0lDQXZMeUJ2Ym14NUlIQnZjSFZzWVhSbElHbG1JSFJvWlNCbGJuUnllU0JwY3lCemRHbHNiQ0J3Y21WelpXNTBYRzRnSUNBZ2FXWWdLQ0ZoWTJOdmRXNTBjMXRoWkdSeVpYTnpYU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0J1WlhkQlkyTnZkVzUwY3lBOUlHRmpZMjkxYm5Sek8xeHVJQ0FnSUdsbUlDZ2hkWE5sVFhWc2RHbEJZMk52ZFc1MFFtRnNZVzVqWlVOb1pXTnJaWElwSUh0Y2JpQWdJQ0FnSUc1bGQwRmpZMjkxYm5SeklEMGdlMzA3WEc0Z0lDQWdJQ0JQWW1wbFkzUXVhMlY1Y3loaFkyTnZkVzUwY3lrdVptOXlSV0ZqYUNnb1lXTmpiM1Z1ZEVGa1pISmxjM01wSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0dGa1pISmxjM01nSVQwOUlHRmpZMjkxYm5SQlpHUnlaWE56S1NCN1hHNGdJQ0FnSUNBZ0lDQWdibVYzUVdOamIzVnVkSE5iWVdOamIzVnVkRUZrWkhKbGMzTmRJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZV1JrY21WemN6b2dZV05qYjNWdWRFRmtaSEpsYzNNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpWVd4aGJtTmxPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUc1bGQwRmpZMjkxYm5SelcyRmtaSEpsYzNOZElEMGdjbVZ6ZFd4ME8xeHVYRzRnSUNBZ2RHaHBjeTV6ZEc5eVpTNTFjR1JoZEdWVGRHRjBaU2g3SUdGalkyOTFiblJ6T2lCdVpYZEJZMk52ZFc1MGN5QjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVmNHUmhkR1Z6SUdOMWNuSmxiblFnWVdSa2NtVnpjeUJpWVd4aGJtTmxjeUJtY205dElHSmhiR0Z1WTJWRGFHVmphMlZ5SUdSbGNHeHZlV1ZrSUdOdmJuUnlZV04wSUdsdWMzUmhibU5sWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN0tuMGdZV1JrY21WemMyVnpYRzRnSUNBcUlFQndZWEpoYlNCN0tuMGdaR1Z3Ykc5NVpXUkRiMjUwY21GamRFRmtaSEpsYzNOY2JpQWdJQ292WEc0Z0lHRnplVzVqSUY5MWNHUmhkR1ZCWTJOdmRXNTBjMVpwWVVKaGJHRnVZMlZEYUdWamEyVnlLR0ZrWkhKbGMzTmxjeXdnWkdWd2JHOTVaV1JEYjI1MGNtRmpkRUZrWkhKbGMzTXBJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHRmpZMjkxYm5SeklIMGdQU0IwYUdsekxuTjBiM0psTG1kbGRGTjBZWFJsS0NrN1hHNGdJQ0FnWTI5dWMzUWdibVYzUVdOamIzVnVkSE1nUFNCN2ZUdGNiaUFnSUNCUFltcGxZM1F1YTJWNWN5aGhZMk52ZFc1MGN5a3VabTl5UldGamFDZ29ZV1JrY21WemN5a2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tDRmhaR1J5WlhOelpYTXVhVzVqYkhWa1pYTW9ZV1JrY21WemN5a3BJSHRjYmlBZ0lDQWdJQ0FnYm1WM1FXTmpiM1Z1ZEhOYllXUmtjbVZ6YzEwZ1BTQjdJR0ZrWkhKbGMzTXNJR0poYkdGdVkyVTZJRzUxYkd3Z2ZUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnSUNCMGFHbHpMbVYwYUdWeWMxQnliM1pwWkdWeUlEMGdibVYzSUZkbFlqTlFjbTkyYVdSbGNpaDBhR2x6TGw5d2NtOTJhV1JsY2lrN1hHNWNiaUFnSUNCamIyNXpkQ0JsZEdoRGIyNTBjbUZqZENBOUlHRjNZV2wwSUc1bGR5QkRiMjUwY21GamRDaGNiaUFnSUNBZ0lHUmxjR3h2ZVdWa1EyOXVkSEpoWTNSQlpHUnlaWE56TEZ4dUlDQWdJQ0FnVTBsT1IweEZYME5CVEV4ZlFrRk1RVTVEUlZOZlFVSkpMRnh1SUNBZ0lDQWdkR2hwY3k1bGRHaGxjbk5RY205MmFXUmxjaXhjYmlBZ0lDQXBPMXh1SUNBZ0lHTnZibk4wSUdWMGFFSmhiR0Z1WTJVZ1BTQmJKekI0TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01DZGRPMXh1WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR0poYkdGdVkyVnpJRDBnWVhkaGFYUWdaWFJvUTI5dWRISmhZM1F1WW1Gc1lXNWpaWE1vWVdSa2NtVnpjMlZ6TENCbGRHaENZV3hoYm1ObEtUdGNibHh1SUNBZ0lDQWdZV1JrY21WemMyVnpMbVp2Y2tWaFkyZ29LR0ZrWkhKbGMzTXNJR2x1WkdWNEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR0poYkdGdVkyVWdQU0JpWVd4aGJtTmxjMXRwYm1SbGVGMGdQeUJpWVd4aGJtTmxjMXRwYm1SbGVGMHVkRzlJWlhoVGRISnBibWNvS1NBNklDY3dlREFuTzF4dUlDQWdJQ0FnSUNCdVpYZEJZMk52ZFc1MGMxdGhaR1J5WlhOelhTQTlJSHNnWVdSa2NtVnpjeXdnWW1Gc1lXNWpaU0I5TzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCMGFHbHpMbk4wYjNKbExuVndaR0YwWlZOMFlYUmxLSHNnWVdOamIzVnVkSE02SUc1bGQwRmpZMjkxYm5SeklIMHBPMXh1SUNBZ0lIMGdZMkYwWTJnZ0tHVnljbTl5S1NCN1hHNGdJQ0FnSUNCc2IyY3VkMkZ5YmloY2JpQWdJQ0FnSUNBZ1lFMWxkR0ZOWVhOcklDMGdRV05qYjNWdWRDQlVjbUZqYTJWeUlITnBibWRzWlNCallXeHNJR0poYkdGdVkyVWdabVYwWTJnZ1ptRnBiR1ZrWUN4Y2JpQWdJQ0FnSUNBZ1pYSnliM0lzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJQ0FnVUhKdmJXbHpaUzVoYkd3b1lXUmtjbVZ6YzJWekxtMWhjQ2gwYUdsekxsOTFjR1JoZEdWQlkyTnZkVzUwTG1KcGJtUW9kR2hwY3lrcEtUdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JpSXNJaThxS2x4dUlDb2dVbVYwZFhKdWN5Qmxjbkp2Y2lCM2FYUm9iM1YwSUhOMFlXTnJJSFJ5WVdObElHWnZjaUJpWlhSMFpYSWdWVWtnWkdsemNHeGhlVnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdSWEp5YjNKOUlHVnljaUF0SUdWeWNtOXlYRzRnS2lCQWNtVjBkWEp1Y3lCN1JYSnliM0o5SUVWeWNtOXlJSGRwZEdnZ1kyeGxZVzRnYzNSaFkyc2dkSEpoWTJVdVhHNGdLaTljYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJR05zWldGdVJYSnliM0pUZEdGamF5aGxjbklwSUh0Y2JpQWdiR1YwSUhzZ2JtRnRaU0I5SUQwZ1pYSnlPMXh1SUNCdVlXMWxJRDBnYm1GdFpTQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z0owVnljbTl5SnlBNklGTjBjbWx1WnlodVlXMWxLVHRjYmx4dUlDQnNaWFFnYlhObklEMGdaWEp5TG0xbGMzTmhaMlU3WEc0Z0lHMXpaeUE5SUcxelp5QTlQVDBnZFc1a1pXWnBibVZrSUQ4Z0p5Y2dPaUJUZEhKcGJtY29iWE5uS1R0Y2JseHVJQ0JwWmlBb2JtRnRaU0E5UFQwZ0p5Y3BJSHRjYmlBZ0lDQmxjbkl1YzNSaFkyc2dQU0JsY25JdWJXVnpjMkZuWlR0Y2JpQWdmU0JsYkhObElHbG1JQ2h0YzJjZ1BUMDlJQ2NuS1NCN1hHNGdJQ0FnWlhKeUxuTjBZV05ySUQwZ1pYSnlMbTVoYldVN1hHNGdJSDBnWld4elpTQnBaaUFvSVdWeWNpNXpkR0ZqYXlrZ2UxeHVJQ0FnSUdWeWNpNXpkR0ZqYXlBOUlHQWtlMlZ5Y2k1dVlXMWxmVG9nSkh0bGNuSXViV1Z6YzJGblpYMWdPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR1Z5Y2p0Y2JuMWNiaUlzSW1sdGNHOXlkQ0JzYjJjZ1puSnZiU0FuYkc5bmJHVjJaV3duTzF4dVhHNHZLaXBjYmlBcUlGSmxkSFZ5Ym5NZ1lTQnRhV1JrYkdWM1lYSmxJSFJvWVhRZ1ptbHNkR1Z5Y3lCdmRYUWdjbVZ4ZFdWemRITWdZV3h5WldGa2VTQnpaV1Z1WEc0Z0tseHVJQ29nUUhKbGRIVnlibk1nZTBaMWJtTjBhVzl1ZlZ4dUlDb3ZYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQmpjbVZoZEdWRWRYQmxVbVZ4Um1sc2RHVnlUV2xrWkd4bGQyRnlaU2dwSUh0Y2JpQWdZMjl1YzNRZ2NISnZZMlZ6YzJWa1VtVnhkV1Z6ZEVsa0lEMGdXMTA3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCbWFXeDBaWEpFZFhCc2FXTmhkR1ZTWlhGMVpYTjBUV2xrWkd4bGQyRnlaU2hjYmlBZ0lDQXZLaW9nUUhSNWNHVWdlMkZ1ZVgwZ0tpOGdjbVZ4TEZ4dUlDQWdJQzhxS2lCQWRIbHdaU0I3WVc1NWZTQXFMeUJmY21WekxGeHVJQ0FnSUM4cUtpQkFkSGx3WlNCN1JuVnVZM1JwYjI1OUlDb3ZJRzVsZUhRc1hHNGdJQ0FnTHlvcUlFQjBlWEJsSUh0R2RXNWpkR2x2Ym4wZ0tpOGdaVzVrTEZ4dUlDQXBJSHRjYmlBZ0lDQnBaaUFvY0hKdlkyVnpjMlZrVW1WeGRXVnpkRWxrTG1sdVpHVjRUMllvY21WeExtbGtLU0ErUFNBd0tTQjdYRzRnSUNBZ0lDQnNiMmN1YVc1bWJ5aGdVbEJESUhKbGNYVmxjM1FnZDJsMGFDQnBaQ0FrZTNKbGNTNXBaSDBnWVd4eVpXRmtlU0J6WldWdUxtQXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHVnVaQ2dwTzF4dUlDQWdJSDFjYmlBZ0lDQndjbTlqWlhOelpXUlNaWEYxWlhOMFNXUXVjSFZ6YUNoeVpYRXVhV1FwTzF4dUlDQWdJSEpsZEhWeWJpQnVaWGgwS0NrN1hHNGdJSDA3WEc1OVhHNGlMQ0pwYlhCdmNuUWdiRzluSUdaeWIyMGdKMnh2WjJ4bGRtVnNKenRjYmx4dUx5b3FYRzRnS2lCU1pYUjFjbTV6SUdFZ2JXbGtaR3hsZDJGeVpTQjBhR0YwSUd4dlozTWdVbEJESUdGamRHbDJhWFI1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHQ3SUc5eWFXZHBiam9nYzNSeWFXNW5JSDE5SUc5d2RITWdMU0JVYUdVZ2JXbGtaR3hsZDJGeVpTQnZjSFJwYjI1elhHNGdLaUJBY21WMGRYSnVjeUI3Um5WdVkzUnBiMjU5WEc0Z0tpOWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlHTnlaV0YwWlV4dloyZGxjazFwWkdSc1pYZGhjbVVvYjNCMGN5a2dlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYkc5bloyVnlUV2xrWkd4bGQyRnlaU2hjYmlBZ0lDQXZLaW9nUUhSNWNHVWdlMkZ1ZVgwZ0tpOGdjbVZ4TEZ4dUlDQWdJQzhxS2lCQWRIbHdaU0I3WVc1NWZTQXFMeUJ5WlhNc1hHNGdJQ0FnTHlvcUlFQjBlWEJsSUh0R2RXNWpkR2x2Ym4wZ0tpOGdibVY0ZEN4Y2JpQWdLU0I3WEc0Z0lDQWdibVY0ZENnb0x5b3FJRUIwZVhCbElIdEdkVzVqZEdsdmJuMGdLaThnWTJJcElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNoeVpYTXVaWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdiRzluTG1WeWNtOXlLQ2RGY25KdmNpQnBiaUJTVUVNZ2NtVnpjRzl1YzJVNlhGeHVKeXdnY21WektUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2h5WlhFdWFYTk5aWFJoYldGemEwbHVkR1Z5Ym1Gc0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHeHZaeTVwYm1adktHQlNVRU1nS0NSN2IzQjBjeTV2Y21sbmFXNTlLVHBnTENCeVpYRXNJQ2N0UGljc0lISmxjeWs3WEc0Z0lDQWdJQ0JqWWlncE8xeHVJQ0FnSUgwcE8xeHVJQ0I5TzF4dWZWeHVJaXdpYVcxd2IzSjBJSHNnWlhSb1JYSnliM0p6TENCelpYSnBZV3hwZW1WRmNuSnZjaUI5SUdaeWIyMGdKMlYwYUMxeWNHTXRaWEp5YjNKekp6dGNibWx0Y0c5eWRDQjdJR2x6VFdGdWFXWmxjM1JXTXlCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDNOb1lYSmxaQzl0YjJSMWJHVnpMMjEyTXk1MWRHbHNjeWM3WEc1Y2JtTnZibk4wSUdOeVpXRjBaVTFsZEdGU1VFTklZVzVrYkdWeUlEMGdLR0Z3YVN3Z2IzVjBVM1J5WldGdExDQnpkRzl5WlN3Z2JHOWpZV3hUZEc5eVpVRndhVmR5WVhCd1pYSXBJRDArSUh0Y2JpQWdjbVYwZFhKdUlHRnplVzVqSUNoa1lYUmhLU0E5UGlCN1hHNGdJQ0FnYVdZZ0tHOTFkRk4wY21WaGJTNWZkM0pwZEdGaWJHVlRkR0YwWlM1bGJtUmxaQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9JV0Z3YVZ0a1lYUmhMbTFsZEdodlpGMHBJSHRjYmlBZ0lDQWdJRzkxZEZOMGNtVmhiUzUzY21sMFpTaDdYRzRnSUNBZ0lDQWdJR3B6YjI1eWNHTTZJQ2N5TGpBbkxGeHVJQ0FnSUNBZ0lDQmxjbkp2Y2pvZ1pYUm9SWEp5YjNKekxuSndZeTV0WlhSb2IyUk9iM1JHYjNWdVpDaDdYRzRnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVG9nWUNSN1pHRjBZUzV0WlhSb2IyUjlJRzV2ZENCbWIzVnVaR0FzWEc0Z0lDQWdJQ0FnSUgwcExGeHVJQ0FnSUNBZ0lDQnBaRG9nWkdGMFlTNXBaQ3hjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0J5WlhOMWJIUTdYRzRnSUNBZ2JHVjBJR1Z5Y205eU8xeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQnlaWE4xYkhRZ1BTQmhkMkZwZENCaGNHbGJaR0YwWVM1dFpYUm9iMlJkS0M0dUxtUmhkR0V1Y0dGeVlXMXpLVHRjYmlBZ0lDQjlJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0FnSUdWeWNtOXlJRDBnWlhKeU8xeHVJQ0FnSUgwZ1ptbHVZV3hzZVNCN1hHNGdJQ0FnSUNCcFppQW9hWE5OWVc1cFptVnpkRll6SUNZbUlITjBiM0psSUNZbUlHUmhkR0V1YldWMGFHOWtJQ0U5UFNBbloyVjBVM1JoZEdVbktTQjdYRzRnSUNBZ0lDQWdJR3h2WTJGc1UzUnZjbVZCY0dsWGNtRndjR1Z5TG5ObGRDaHpkRzl5WlM1blpYUlRkR0YwWlNncEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9iM1YwVTNSeVpXRnRMbDkzY21sMFlXSnNaVk4wWVhSbExtVnVaR1ZrS1NCN1hHNGdJQ0FnSUNCcFppQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lobGNuSnZjaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQnZkWFJUZEhKbFlXMHVkM0pwZEdVb2UxeHVJQ0FnSUNBZ0lDQnFjMjl1Y25Cak9pQW5NaTR3Snl4Y2JpQWdJQ0FnSUNBZ1pYSnliM0k2SUhObGNtbGhiR2w2WlVWeWNtOXlLR1Z5Y205eUxDQjdJSE5vYjNWc1pFbHVZMngxWkdWVGRHRmphem9nZEhKMVpTQjlLU3hjYmlBZ0lDQWdJQ0FnYVdRNklHUmhkR0V1YVdRc1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYjNWMFUzUnlaV0Z0TG5keWFYUmxLSHRjYmlBZ0lDQWdJQ0FnYW5OdmJuSndZem9nSnpJdU1DY3NYRzRnSUNBZ0lDQWdJSEpsYzNWc2RDeGNiaUFnSUNBZ0lDQWdhV1E2SUdSaGRHRXVhV1FzWEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzU5TzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamNtVmhkR1ZOWlhSaFVsQkRTR0Z1Wkd4bGNqdGNiaUlzSW1sdGNHOXlkQ0I3SUdOeVpXRjBaVk5qWVdabWIyeGtUV2xrWkd4bGQyRnlaU3dnYldWeVoyVk5hV1JrYkdWM1lYSmxJSDBnWm5KdmJTQW5hbk52YmkxeWNHTXRaVzVuYVc1bEp6dGNibWx0Y0c5eWRDQjdJR055WldGMFpWZGhiR3hsZEUxcFpHUnNaWGRoY21VZ2ZTQm1jbTl0SUNkQWJXVjBZVzFoYzJzdlpYUm9MV3B6YjI0dGNuQmpMVzFwWkdSc1pYZGhjbVVuTzF4dWFXMXdiM0owSUh0Y2JpQWdZM0psWVhSbFVHVnVaR2x1WjA1dmJtTmxUV2xrWkd4bGQyRnlaU3hjYmlBZ1kzSmxZWFJsVUdWdVpHbHVaMVI0VFdsa1pHeGxkMkZ5WlN4Y2JuMGdabkp2YlNBbkxpOXRhV1JrYkdWM1lYSmxMM0JsYm1ScGJtY25PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJqY21WaGRHVk5aWFJoYldGemEwMXBaR1JzWlhkaGNtVW9lMXh1SUNCMlpYSnphVzl1TEZ4dUlDQm5aWFJCWTJOdmRXNTBjeXhjYmlBZ2NISnZZMlZ6YzFSeVlXNXpZV04wYVc5dUxGeHVJQ0J3Y205alpYTnpSWFJvVTJsbmJrMWxjM05oWjJVc1hHNGdJSEJ5YjJObGMzTlVlWEJsWkUxbGMzTmhaMlVzWEc0Z0lIQnliMk5sYzNOVWVYQmxaRTFsYzNOaFoyVldNeXhjYmlBZ2NISnZZMlZ6YzFSNWNHVmtUV1Z6YzJGblpWWTBMRnh1SUNCd2NtOWpaWE56VUdWeWMyOXVZV3hOWlhOellXZGxMRnh1SUNCd2NtOWpaWE56UkdWamNubHdkRTFsYzNOaFoyVXNYRzRnSUhCeWIyTmxjM05GYm1OeWVYQjBhVzl1VUhWaWJHbGpTMlY1TEZ4dUlDQm5aWFJRWlc1a2FXNW5UbTl1WTJVc1hHNGdJR2RsZEZCbGJtUnBibWRVY21GdWMyRmpkR2x2YmtKNVNHRnphQ3hjYm4wcElIdGNiaUFnWTI5dWMzUWdiV1YwWVcxaGMydE5hV1JrYkdWM1lYSmxJRDBnYldWeVoyVk5hV1JrYkdWM1lYSmxLRnRjYmlBZ0lDQmpjbVZoZEdWVFkyRm1abTlzWkUxcFpHUnNaWGRoY21Vb2UxeHVJQ0FnSUNBZ1pYUm9YM041Ym1OcGJtYzZJR1poYkhObExGeHVJQ0FnSUNBZ2QyVmlNMTlqYkdsbGJuUldaWEp6YVc5dU9pQmdUV1YwWVUxaGMyc3ZkaVI3ZG1WeWMybHZibjFnTEZ4dUlDQWdJSDBwTEZ4dUlDQWdJR055WldGMFpWZGhiR3hsZEUxcFpHUnNaWGRoY21Vb2UxeHVJQ0FnSUNBZ1oyVjBRV05qYjNWdWRITXNYRzRnSUNBZ0lDQndjbTlqWlhOelZISmhibk5oWTNScGIyNHNYRzRnSUNBZ0lDQndjbTlqWlhOelJYUm9VMmxuYmsxbGMzTmhaMlVzWEc0Z0lDQWdJQ0J3Y205alpYTnpWSGx3WldSTlpYTnpZV2RsTEZ4dUlDQWdJQ0FnY0hKdlkyVnpjMVI1Y0dWa1RXVnpjMkZuWlZZekxGeHVJQ0FnSUNBZ2NISnZZMlZ6YzFSNWNHVmtUV1Z6YzJGblpWWTBMRnh1SUNBZ0lDQWdjSEp2WTJWemMxQmxjbk52Ym1Gc1RXVnpjMkZuWlN4Y2JpQWdJQ0FnSUhCeWIyTmxjM05FWldOeWVYQjBUV1Z6YzJGblpTeGNiaUFnSUNBZ0lIQnliMk5sYzNORmJtTnllWEIwYVc5dVVIVmliR2xqUzJWNUxGeHVJQ0FnSUgwcExGeHVJQ0FnSUdOeVpXRjBaVkJsYm1ScGJtZE9iMjVqWlUxcFpHUnNaWGRoY21Vb2V5Qm5aWFJRWlc1a2FXNW5UbTl1WTJVZ2ZTa3NYRzRnSUNBZ1kzSmxZWFJsVUdWdVpHbHVaMVI0VFdsa1pHeGxkMkZ5WlNoN0lHZGxkRkJsYm1ScGJtZFVjbUZ1YzJGamRHbHZia0o1U0dGemFDQjlLU3hjYmlBZ1hTazdYRzRnSUhKbGRIVnliaUJ0WlhSaGJXRnphMDFwWkdSc1pYZGhjbVU3WEc1OVhHNGlMQ0pwYlhCdmNuUWdiRzluSUdaeWIyMGdKMnh2WjJ4bGRtVnNKenRjYm1sdGNHOXlkQ0JpY205M2MyVnlJR1p5YjIwZ0ozZGxZbVY0ZEdWdWMybHZiaTF3YjJ4NVptbHNiQ2M3WEc1Y2JpOHFLbHh1SUNvZ1VtVjBkWEp1Y3lCaElHMXBaR1JzWlhkaGNtVWdkR2hoZENCcGJuUmxjbU5sY0hSeklHQjNZV3hzWlhSZmNtVm5hWE4wWlhKUGJtSnZZWEprYVc1bllDQnRaWE56WVdkbGMxeHVJQ3BjYmlBcUlFQndZWEpoYlNCN2V5QnNiMk5oZEdsdmJqb2djM1J5YVc1bkxDQnlaV2RwYzNSbGNrOXVZbTloY21ScGJtYzZJRVoxYm1OMGFXOXVJSDE5SUc5d2RITWdMU0JVYUdVZ2JXbGtaR3hsZDJGeVpTQnZjSFJwYjI1elhHNGdLaUJBY21WMGRYSnVjeUI3S0hKbGNUb2dZVzU1TENCeVpYTTZJR0Z1ZVN3Z2JtVjRkRG9nUm5WdVkzUnBiMjRzSUdWdVpEb2dSblZ1WTNScGIyNHBJRDArSUhadmFXUjlYRzRnS2k5Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUdOeVpXRjBaVTl1WW05aGNtUnBibWROYVdSa2JHVjNZWEpsS0h0Y2JpQWdiRzlqWVhScGIyNHNYRzRnSUhKbFoybHpkR1Z5VDI1aWIyRnlaR2x1Wnl4Y2JuMHBJSHRjYmlBZ2NtVjBkWEp1SUdGemVXNWpJR1oxYm1OMGFXOXVJRzl5YVdkcGJrMXBaR1JzWlhkaGNtVW9jbVZ4TENCeVpYTXNJRzVsZUhRc0lHVnVaQ2tnZTF4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNCcFppQW9jbVZ4TG0xbGRHaHZaQ0FoUFQwZ0ozZGhiR3hsZEY5eVpXZHBjM1JsY2s5dVltOWhjbVJwYm1jbktTQjdYRzRnSUNBZ0lDQWdJRzVsZUhRb0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLSEpsY1M1MFlXSkpaQ0FtSmlCeVpYRXVkR0ZpU1dRZ0lUMDlJR0p5YjNkelpYSXVkR0ZpY3k1VVFVSmZTVVJmVGs5T1JTa2dlMXh1SUNBZ0lDQWdJQ0JoZDJGcGRDQnlaV2RwYzNSbGNrOXVZbTloY21ScGJtY29iRzlqWVhScGIyNHNJSEpsY1M1MFlXSkpaQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JzYjJjdVpHVmlkV2NvWEc0Z0lDQWdJQ0FnSUNBZ1lDZDNZV3hzWlhSZmNtVm5hWE4wWlhKUGJtSnZZWEprYVc1bkp5QnRaWE56WVdkbElHWnliMjBnSkh0c2IyTmhkR2x2Ym4wZ2FXZHViM0psWkNCa2RXVWdkRzhnYldsemMybHVaeUIwWVdKSlpHQXNYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhNdWNtVnpkV3gwSUQwZ2RISjFaVHRjYmlBZ0lDQWdJR1Z1WkNncE8xeHVJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNtOXlLU0I3WEc0Z0lDQWdJQ0JsYm1Rb1pYSnliM0lwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibjFjYmlJc0lpOHFLbHh1SUNvZ1VtVjBkWEp1Y3lCaElHMXBaR1JzWlhkaGNtVWdkR2hoZENCaGNIQmxibVJ6SUhSb1pTQkVRWEJ3SUc5eWFXZHBiaUIwYnlCeVpYRjFaWE4wWEc0Z0tseHVJQ29nUUhCaGNtRnRJSHQ3SUc5eWFXZHBiam9nYzNSeWFXNW5JSDE5SUc5d2RITWdMU0JVYUdVZ2JXbGtaR3hsZDJGeVpTQnZjSFJwYjI1elhHNGdLaUJBY21WMGRYSnVjeUI3Um5WdVkzUnBiMjU5WEc0Z0tpOWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlHTnlaV0YwWlU5eWFXZHBiazFwWkdSc1pYZGhjbVVvYjNCMGN5a2dlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYjNKcFoybHVUV2xrWkd4bGQyRnlaU2hjYmlBZ0lDQXZLaW9nUUhSNWNHVWdlMkZ1ZVgwZ0tpOGdjbVZ4TEZ4dUlDQWdJQzhxS2lCQWRIbHdaU0I3WVc1NWZTQXFMeUJmTEZ4dUlDQWdJQzhxS2lCQWRIbHdaU0I3Um5WdVkzUnBiMjU5SUNvdklHNWxlSFFzWEc0Z0lDa2dlMXh1SUNBZ0lISmxjUzV2Y21sbmFXNGdQU0J2Y0hSekxtOXlhV2RwYmp0Y2JpQWdJQ0J1WlhoMEtDazdYRzRnSUgwN1hHNTlYRzRpTENKcGJYQnZjblFnZXlCbGNuSnZja052WkdWeklIMGdabkp2YlNBblpYUm9MWEp3WXkxbGNuSnZjbk1uTzF4dWFXMXdiM0owSUhzZ1pHVjBaV04wVTBsWFJTQjlJR1p5YjIwZ0owQnRaWFJoYldGemF5OWpiMjUwY205c2JHVnlMWFYwYVd4ekp6dGNibWx0Y0c5eWRDQjdJR2x6Vm1Gc2FXUkJaR1J5WlhOeklIMGdabkp2YlNBblpYUm9aWEpsZFcxcWN5MTFkR2xzSnp0Y2JseHVhVzF3YjNKMElIc2dUVVZUVTBGSFJWOVVXVkJGTENCUFVrbEhTVTVmVFVWVVFVMUJVMHNnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMMkZ3Y0NjN1hHNXBiWEJ2Y25RZ2V5QlVjbUZ1YzJGamRHbHZibE4wWVhSMWN5QjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmRISmhibk5oWTNScGIyNG5PMXh1YVcxd2IzSjBJSHNnVTBWRFQwNUVJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OTBhVzFsSnp0Y2JseHVhVzF3YjNKMElIdGNiaUFnVFdWMFlVMWxkSEpwWTNORmRtVnVkRU5oZEdWbmIzSjVMRnh1SUNCTlpYUmhUV1YwY21samMwVjJaVzUwVG1GdFpTeGNiaUFnVFdWMFlVMWxkSEpwWTNORmRtVnVkRlZwUTNWemRHOXRhWHBoZEdsdmJpeGNibjBnWm5KdmJTQW5MaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OXRaWFJoYldWMGNtbGpjeWM3WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxjMlVnZEhsd1pYTWdaR1YwWlhKdGFXNWxJR2h2ZHlCMGFHVWdiV1YwYUc5a0lIUnlZV05yYVc1bklHMXBaR1JzWlhkaGNtVWdhR0Z1Wkd4bGN5QnBibU52YldsdVoxeHVJQ29nY21WeGRXVnpkSE1nWW1GelpXUWdiMjRnZEdobElHMWxkR2h2WkNCdVlXMWxMaUJVYUdWeVpTQmhjbVVnZEdoeVpXVWdiM0IwYVc5dWN5QnlhV2RvZENCdWIzY2dZblYwWEc0Z0tpQjBhR1VnZEhsd1pYTWdZMjkxYkdRZ1ltVWdaWGh3WVc1a1pXUWdkRzhnWTI5MlpYSWdiM1JvWlhJZ2IzQjBhVzl1Y3lCcGJpQjBhR1VnWm5WMGRYSmxMbHh1SUNvdlhHNWpiMjV6ZENCU1FWUkZYMHhKVFVsVVgxUlpVRVZUSUQwZ2UxeHVJQ0JTUVZSRlgweEpUVWxVUlVRNklDZHlZWFJsWDJ4cGJXbDBaV1FuTEZ4dUlDQkNURTlEUzBWRU9pQW5ZbXh2WTJ0bFpDY3NYRzRnSUU1UFRsOVNRVlJGWDB4SlRVbFVSVVE2SUNkdWIyNWZjbUYwWlY5c2FXMXBkR1ZrSnl4Y2JuMDdYRzVjYmk4cUtseHVJQ29nVkdocGN5QnZZbXBsWTNRZ2JXRndjeUJoSUcxbGRHaHZaQ0J1WVcxbElIUnZJR0VnVWtGVVJWOU1TVTFKVkY5VVdWQkZMaUJKWmlCdWIzUWdhVzRnZEdocGN5QnRZWEFnZEdobFhHNGdLaUJrWldaaGRXeDBJR2x6SUNkU1FWUkZYMHhKVFVsVVJVUW5YRzRnS2k5Y2JtTnZibk4wSUZKQlZFVmZURWxOU1ZSZlRVRlFJRDBnZTF4dUlDQmJUVVZUVTBGSFJWOVVXVkJGTGtWVVNGOVRTVWRPWFRvZ1VrRlVSVjlNU1UxSlZGOVVXVkJGVXk1T1QwNWZVa0ZVUlY5TVNVMUpWRVZFTEZ4dUlDQmJUVVZUVTBGSFJWOVVXVkJGTGtWVVNGOVRTVWRPWDFSWlVFVkVYMFJCVkVGZE9pQlNRVlJGWDB4SlRVbFVYMVJaVUVWVExrNVBUbDlTUVZSRlgweEpUVWxVUlVRc1hHNGdJRnROUlZOVFFVZEZYMVJaVUVVdVJWUklYMU5KUjA1ZlZGbFFSVVJmUkVGVVFWOVdNMTA2SUZKQlZFVmZURWxOU1ZSZlZGbFFSVk11VGs5T1gxSkJWRVZmVEVsTlNWUkZSQ3hjYmlBZ1cwMUZVMU5CUjBWZlZGbFFSUzVGVkVoZlUwbEhUbDlVV1ZCRlJGOUVRVlJCWDFZMFhUb2dVa0ZVUlY5TVNVMUpWRjlVV1ZCRlV5NU9UMDVmVWtGVVJWOU1TVTFKVkVWRUxGeHVJQ0JiVFVWVFUwRkhSVjlVV1ZCRkxsQkZVbE5QVGtGTVgxTkpSMDVkT2lCU1FWUkZYMHhKVFVsVVgxUlpVRVZUTGs1UFRsOVNRVlJGWDB4SlRVbFVSVVFzWEc0Z0lGdE5SVk5UUVVkRlgxUlpVRVV1UlZSSVgwUkZRMUpaVUZSZE9pQlNRVlJGWDB4SlRVbFVYMVJaVUVWVExrNVBUbDlTUVZSRlgweEpUVWxVUlVRc1hHNGdJRnROUlZOVFFVZEZYMVJaVUVVdVJWUklYMGRGVkY5RlRrTlNXVkJVU1U5T1gxQlZRa3hKUTE5TFJWbGRPbHh1SUNBZ0lGSkJWRVZmVEVsTlNWUmZWRmxRUlZNdVRrOU9YMUpCVkVWZlRFbE5TVlJGUkN4Y2JpQWdXMDFGVTFOQlIwVmZWRmxRUlM1RlZFaGZVa1ZSVlVWVFZGOUJRME5QVlU1VVUxMDZJRkpCVkVWZlRFbE5TVlJmVkZsUVJWTXVVa0ZVUlY5TVNVMUpWRVZFTEZ4dUlDQmJUVVZUVTBGSFJWOVVXVkJGTGxkQlRFeEZWRjlTUlZGVlJWTlVYMUJGVWsxSlUxTkpUMDVUWFRvZ1VrRlVSVjlNU1UxSlZGOVVXVkJGVXk1U1FWUkZYMHhKVFVsVVJVUXNYRzRnSUZ0TlJWTlRRVWRGWDFSWlVFVXVVMFZPUkY5TlJWUkJSRUZVUVYwNklGSkJWRVZmVEVsTlNWUmZWRmxRUlZNdVFreFBRMHRGUkN4Y2JpQWdXMDFGVTFOQlIwVmZWRmxRUlM1SFJWUmZVRkpQVmtsRVJWSmZVMVJCVkVWZE9pQlNRVlJGWDB4SlRVbFVYMVJaVUVWVExrSk1UME5MUlVRc1hHNTlPMXh1WEc0dktpcGNiaUFxSUVadmNpQmxkbVZ1ZEhNZ2QybDBhQ0IxYzJWeUlHbHVkR1Z5WVdOMGFXOXVJQ2hoY0hCeWIzWmxJQzhnY21WcVpXTjBJSHdnWTJGdVkyVnNLU0IwYUdseklHMWhjQ0IzYVd4c1hHNGdLaUJ5WlhSMWNtNGdZVzRnYjJKcVpXTjBJSGRwZEdnZ1FWQlFVazlXUlVRc0lGSkZTa1ZEVkVWRUxDQlNSVkZWUlZOVVJVUXNJR0Z1WkNCR1FVbE1SVVFnYTJWNWN5QjBhR0YwSUcxaGNDQjBieUIwYUdWY2JpQXFJR0Z3Y0hKdmNISnBZWFJsSUdWMlpXNTBJRzVoYldWekxseHVJQ292WEc1amIyNXpkQ0JGVmtWT1ZGOU9RVTFGWDAxQlVDQTlJSHRjYmlBZ1cwMUZVMU5CUjBWZlZGbFFSUzVGVkVoZlUwbEhUbDA2SUh0Y2JpQWdJQ0JCVUZCU1QxWkZSRG9nVFdWMFlVMWxkSEpwWTNORmRtVnVkRTVoYldVdVUybG5ibUYwZFhKbFFYQndjbTkyWldRc1hHNGdJQ0FnUmtGSlRFVkVPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBUbUZ0WlM1VGFXZHVZWFIxY21WR1lXbHNaV1FzWEc0Z0lDQWdVa1ZLUlVOVVJVUTZJRTFsZEdGTlpYUnlhV056UlhabGJuUk9ZVzFsTGxOcFoyNWhkSFZ5WlZKbGFtVmpkR1ZrTEZ4dUlDQWdJRkpGVVZWRlUxUkZSRG9nVFdWMFlVMWxkSEpwWTNORmRtVnVkRTVoYldVdVUybG5ibUYwZFhKbFVtVnhkV1Z6ZEdWa0xGeHVJQ0I5TEZ4dUlDQmJUVVZUVTBGSFJWOVVXVkJGTGtWVVNGOVRTVWRPWDFSWlVFVkVYMFJCVkVGZE9pQjdYRzRnSUNBZ1FWQlFVazlXUlVRNklFMWxkR0ZOWlhSeWFXTnpSWFpsYm5ST1lXMWxMbE5wWjI1aGRIVnlaVUZ3Y0hKdmRtVmtMRnh1SUNBZ0lGSkZTa1ZEVkVWRU9pQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFRtRnRaUzVUYVdkdVlYUjFjbVZTWldwbFkzUmxaQ3hjYmlBZ0lDQlNSVkZWUlZOVVJVUTZJRTFsZEdGTlpYUnlhV056UlhabGJuUk9ZVzFsTGxOcFoyNWhkSFZ5WlZKbGNYVmxjM1JsWkN4Y2JpQWdmU3hjYmlBZ1cwMUZVMU5CUjBWZlZGbFFSUzVGVkVoZlUwbEhUbDlVV1ZCRlJGOUVRVlJCWDFZelhUb2dlMXh1SUNBZ0lFRlFVRkpQVmtWRU9pQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFRtRnRaUzVUYVdkdVlYUjFjbVZCY0hCeWIzWmxaQ3hjYmlBZ0lDQlNSVXBGUTFSRlJEb2dUV1YwWVUxbGRISnBZM05GZG1WdWRFNWhiV1V1VTJsbmJtRjBkWEpsVW1WcVpXTjBaV1FzWEc0Z0lDQWdVa1ZSVlVWVFZFVkVPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBUbUZ0WlM1VGFXZHVZWFIxY21WU1pYRjFaWE4wWldRc1hHNGdJSDBzWEc0Z0lGdE5SVk5UUVVkRlgxUlpVRVV1UlZSSVgxTkpSMDVmVkZsUVJVUmZSRUZVUVY5V05GMDZJSHRjYmlBZ0lDQkJVRkJTVDFaRlJEb2dUV1YwWVUxbGRISnBZM05GZG1WdWRFNWhiV1V1VTJsbmJtRjBkWEpsUVhCd2NtOTJaV1FzWEc0Z0lDQWdVa1ZLUlVOVVJVUTZJRTFsZEdGTlpYUnlhV056UlhabGJuUk9ZVzFsTGxOcFoyNWhkSFZ5WlZKbGFtVmpkR1ZrTEZ4dUlDQWdJRkpGVVZWRlUxUkZSRG9nVFdWMFlVMWxkSEpwWTNORmRtVnVkRTVoYldVdVUybG5ibUYwZFhKbFVtVnhkV1Z6ZEdWa0xGeHVJQ0I5TEZ4dUlDQmJUVVZUVTBGSFJWOVVXVkJGTGxCRlVsTlBUa0ZNWDFOSlIwNWRPaUI3WEc0Z0lDQWdRVkJRVWs5V1JVUTZJRTFsZEdGTlpYUnlhV056UlhabGJuUk9ZVzFsTGxOcFoyNWhkSFZ5WlVGd2NISnZkbVZrTEZ4dUlDQWdJRkpGU2tWRFZFVkVPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBUbUZ0WlM1VGFXZHVZWFIxY21WU1pXcGxZM1JsWkN4Y2JpQWdJQ0JTUlZGVlJWTlVSVVE2SUUxbGRHRk5aWFJ5YVdOelJYWmxiblJPWVcxbExsTnBaMjVoZEhWeVpWSmxjWFZsYzNSbFpDeGNiaUFnZlN4Y2JpQWdXMDFGVTFOQlIwVmZWRmxRUlM1RlZFaGZSRVZEVWxsUVZGMDZJSHRjYmlBZ0lDQkJVRkJTVDFaRlJEb2dUV1YwWVUxbGRISnBZM05GZG1WdWRFNWhiV1V1UkdWamNubHdkR2x2YmtGd2NISnZkbVZrTEZ4dUlDQWdJRkpGU2tWRFZFVkVPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBUbUZ0WlM1RVpXTnllWEIwYVc5dVVtVnFaV04wWldRc1hHNGdJQ0FnVWtWUlZVVlRWRVZFT2lCTlpYUmhUV1YwY21samMwVjJaVzUwVG1GdFpTNUVaV055ZVhCMGFXOXVVbVZ4ZFdWemRHVmtMRnh1SUNCOUxGeHVJQ0JiVFVWVFUwRkhSVjlVV1ZCRkxrVlVTRjlIUlZSZlJVNURVbGxRVkVsUFRsOVFWVUpNU1VOZlMwVlpYVG9nZTF4dUlDQWdJRUZRVUZKUFZrVkVPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBUbUZ0WlM1RmJtTnllWEIwYVc5dVVIVmliR2xqUzJWNVFYQndjbTkyWldRc1hHNGdJQ0FnVWtWS1JVTlVSVVE2SUUxbGRHRk5aWFJ5YVdOelJYWmxiblJPWVcxbExrVnVZM0o1Y0hScGIyNVFkV0pzYVdOTFpYbFNaV3BsWTNSbFpDeGNiaUFnSUNCU1JWRlZSVk5VUlVRNklFMWxkR0ZOWlhSeWFXTnpSWFpsYm5ST1lXMWxMa1Z1WTNKNWNIUnBiMjVRZFdKc2FXTkxaWGxTWlhGMVpYTjBaV1FzWEc0Z0lIMHNYRzRnSUZ0TlJWTlRRVWRGWDFSWlVFVXVSVlJJWDFKRlVWVkZVMVJmUVVORFQxVk9WRk5kT2lCN1hHNGdJQ0FnUVZCUVVrOVdSVVE2SUUxbGRHRk5aWFJ5YVdOelJYWmxiblJPWVcxbExsQmxjbTFwYzNOcGIyNXpRWEJ3Y205MlpXUXNYRzRnSUNBZ1VrVktSVU5VUlVRNklFMWxkR0ZOWlhSeWFXTnpSWFpsYm5ST1lXMWxMbEJsY20xcGMzTnBiMjV6VW1WcVpXTjBaV1FzWEc0Z0lDQWdVa1ZSVlVWVFZFVkVPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBUbUZ0WlM1UVpYSnRhWE56YVc5dWMxSmxjWFZsYzNSbFpDeGNiaUFnZlN4Y2JpQWdXMDFGVTFOQlIwVmZWRmxRUlM1WFFVeE1SVlJmVWtWUlZVVlRWRjlRUlZKTlNWTlRTVTlPVTEwNklIdGNiaUFnSUNCQlVGQlNUMVpGUkRvZ1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEU1aGJXVXVVR1Z5YldsemMybHZibk5CY0hCeWIzWmxaQ3hjYmlBZ0lDQlNSVXBGUTFSRlJEb2dUV1YwWVUxbGRISnBZM05GZG1WdWRFNWhiV1V1VUdWeWJXbHpjMmx2Ym5OU1pXcGxZM1JsWkN4Y2JpQWdJQ0JTUlZGVlJWTlVSVVE2SUUxbGRHRk5aWFJ5YVdOelJYWmxiblJPWVcxbExsQmxjbTFwYzNOcGIyNXpVbVZ4ZFdWemRHVmtMRnh1SUNCOUxGeHVmVHRjYmx4dVkyOXVjM1FnY21GMFpVeHBiV2wwVkdsdFpXOTFkSE1nUFNCN2ZUdGNibHh1THlvcVhHNGdLaUJTWlhSMWNtNXpJR0VnYldsa1pHeGxkMkZ5WlNCMGFHRjBJSFJ5WVdOcmN5QnBibkJoWjJWZmNISnZkbWxrWlhJZ2RYTmhaMlVnZFhOcGJtY2djMkZ0Y0d4cGJtY2dabTl5WEc0Z0tpQmxZV05vSUhSNWNHVWdiMllnWlhabGJuUWdaWGhqWlhCMElIUm9iM05sSUhSb1lYUWdjbVZ4ZFdseVpTQjFjMlZ5SUdsdWRHVnlZV04wYVc5dUxDQnpkV05vSUdGelhHNGdLaUJ6YVdkdVlYUjFjbVVnY21WeGRXVnpkSE5jYmlBcVhHNGdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdiM0IwY3lBdElHOXdkR2x2Ym5NZ1ptOXlJSFJvWlNCeWNHTWdiV1YwYUc5a0lIUnlZV05yYVc1bklHMXBaR1JzWlhkaGNtVmNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUc5d2RITXVkSEpoWTJ0RmRtVnVkQ0F0SUhSeVlXTnJSWFpsYm5RZ2JXVjBhRzlrSUdaeWIyMWNiaUFxSUNCTlpYUmhUV1YwY21samMwTnZiblJ5YjJ4c1pYSmNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUc5d2RITXVaMlYwVFdWMGNtbGpjMU4wWVhSbElDMGdaMlYwSUhSb1pTQnpkR0YwWlNCdlpseHVJQ29nSUUxbGRHRk5aWFJ5YVdOelEyOXVkSEp2Ykd4bGNseHVJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJRnR2Y0hSekxuSmhkR1ZNYVcxcGRGTmxZMjl1WkhOZElDMGdiblZ0WW1WeUlHOW1JSE5sWTI5dVpITWdkRzhnZDJGcGRDQmlaV1p2Y21WY2JpQXFJQ0JoYkd4dmQybHVaeUJoYm05MGFHVnlJSE5sZENCdlppQmxkbVZ1ZEhNZ2RHOGdZbVVnZEhKaFkydGxaQzVjYmlBcUlFQndZWEpoYlNCdmNIUnpMbk5sWTNWeWFYUjVVSEp2ZG1sa1pYSlNaWEYxWlhOMFhHNGdLaUJBY21WMGRYSnVjeUI3Um5WdVkzUnBiMjU5WEc0Z0tpOWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlHTnlaV0YwWlZKUVEwMWxkR2h2WkZSeVlXTnJhVzVuVFdsa1pHeGxkMkZ5WlNoN1hHNGdJSFJ5WVdOclJYWmxiblFzWEc0Z0lHZGxkRTFsZEhKcFkzTlRkR0YwWlN4Y2JpQWdjbUYwWlV4cGJXbDBVMlZqYjI1a2N5QTlJRFl3SUNvZ05TeGNiaUFnYzJWamRYSnBkSGxRY205MmFXUmxjbEpsY1hWbGMzUXNYRzU5S1NCN1hHNGdJSEpsZEhWeWJpQmhjM2x1WXlCbWRXNWpkR2x2YmlCeWNHTk5aWFJvYjJSVWNtRmphMmx1WjAxcFpHUnNaWGRoY21Vb1hHNGdJQ0FnTHlvcUlFQjBlWEJsSUh0aGJubDlJQ292SUhKbGNTeGNiaUFnSUNBdktpb2dRSFI1Y0dVZ2UyRnVlWDBnS2k4Z2NtVnpMRnh1SUNBZ0lDOHFLaUJBZEhsd1pTQjdSblZ1WTNScGIyNTlJQ292SUc1bGVIUXNYRzRnSUNrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnYjNKcFoybHVMQ0J0WlhSb2IyUWdmU0E5SUhKbGNUdGNibHh1SUNBZ0lDOHZJRVJsZEdWeWJXbHVaU0IzYUdGMElIUjVjR1VnYjJZZ2NtRjBaU0JzYVcxcGRDQjBieUJoY0hCc2VTQmlZWE5sWkNCdmJpQnRaWFJvYjJSY2JpQWdJQ0JqYjI1emRDQnlZWFJsVEdsdGFYUlVlWEJsSUQxY2JpQWdJQ0FnSUZKQlZFVmZURWxOU1ZSZlRVRlFXMjFsZEdodlpGMGdQejhnVWtGVVJWOU1TVTFKVkY5VVdWQkZVeTVTUVZSRlgweEpUVWxVUlVRN1hHNWNiaUFnSUNBdkx5QkpaaUIwYUdVZ2NtRjBaVXhwYldsMFZIbHdaU0JwY3lCU1FWUkZYMHhKVFVsVVJVUWdZMmhsWTJzZ2RHaGxJSEpoZEdWTWFXMXBkRlJwYldWdmRYUnpYRzRnSUNBZ1kyOXVjM1FnY21GMFpVeHBiV2wwWldRZ1BWeHVJQ0FnSUNBZ2NtRjBaVXhwYldsMFZIbHdaU0E5UFQwZ1VrRlVSVjlNU1UxSlZGOVVXVkJGVXk1U1FWUkZYMHhKVFVsVVJVUWdKaVpjYmlBZ0lDQWdJSFI1Y0dWdlppQnlZWFJsVEdsdGFYUlVhVzFsYjNWMGMxdHRaWFJvYjJSZElDRTlQU0FuZFc1a1pXWnBibVZrSnp0Y2JseHVJQ0FnSUM4dklFZGxkQ0IwYUdVZ2NHRnlkR2xqYVhCaGRHVkpiazFsZEdGTlpYUnlhV056SUhOMFlYUmxJSFJ2SUdSbGRHVnliV2x1WlNCcFppQjNaU0J6YUc5MWJHUWdkSEpoWTJ0Y2JpQWdJQ0F2THlCaGJubDBhR2x1Wnk0Z1ZHaHBjeUJwY3lCbGVIUnlZU0J5WldSMWJtUmhibU41SUdKbFkyRjFjMlVnZEdocGN5QjJZV3gxWlNCcGN5QmphR1ZqYTJWa0lHbHVYRzRnSUNBZ0x5OGdkR2hsSUcxbGRHRnRaWFJ5YVdOeklHTnZiblJ5YjJ4c1pYSW5jeUIwY21GamEwVjJaVzUwSUcxbGRHaHZaQ0JoY3lCM1pXeHNMbHh1SUNBZ0lHTnZibk4wSUhWelpYSlFZWEowYVdOcGNHRjBhVzVuU1c1TlpYUmhUV1YwY21samN5QTlYRzRnSUNBZ0lDQm5aWFJOWlhSeWFXTnpVM1JoZEdVb0tTNXdZWEowYVdOcGNHRjBaVWx1VFdWMFlVMWxkSEpwWTNNZ1BUMDlJSFJ5ZFdVN1hHNWNiaUFnSUNBdkx5QkhaWFFnZEdobElHVjJaVzUwSUhSNWNHVXNJR1ZoWTJnZ2IyWWdkMmhwWTJnZ2FHRnpJRUZRVUZKUFZrVkVMQ0JTUlVwRlExUkZSQ0JoYm1RZ1VrVlJWVVZUVkVWRVhHNGdJQ0FnTHk4Z2EyVjVjeUJtYjNJZ2RHaGxJSFpoY21sdmRYTWdaWFpsYm5SeklHbHVJSFJvWlNCbWJHOTNMbHh1SUNBZ0lHTnZibk4wSUdWMlpXNTBWSGx3WlNBOUlFVldSVTVVWDA1QlRVVmZUVUZRVzIxbGRHaHZaRjA3WEc1Y2JpQWdJQ0JqYjI1emRDQmxkbVZ1ZEZCeWIzQmxjblJwWlhNZ1BTQjdmVHRjYmx4dUlDQWdJQzh2SUVKdmIyeGxZVzRnZG1GeWFXRmliR1VnZEdoaGRDQnlaV1IxWTJWeklHTnZaR1VnWkhWd2JHbGpZWFJwYjI0Z1lXNWtJR2x1WTNKbFlYTmxjeUJzWldkcFltbHNhWFI1WEc0Z0lDQWdZMjl1YzNRZ2MyaHZkV3hrVkhKaFkydEZkbVZ1ZENBOVhHNGdJQ0FnSUNBdkx5QkViMjRuZENCMGNtRmpheUJwWmlCMGFHVWdjbVZ4ZFdWemRDQmpZVzFsSUdaeWIyMGdiM1Z5SUc5M2JpQlZTU0J2Y2lCaVlXTnJaM0p2ZFc1a1hHNGdJQ0FnSUNCdmNtbG5hVzRnSVQwOUlFOVNTVWRKVGw5TlJWUkJUVUZUU3lBbUpseHVJQ0FnSUNBZ0x5OGdSRzl1SjNRZ2RISmhZMnNnYVdZZ2RHaHBjeUJwY3lCaElHSnNiMk5yWldRZ2JXVjBhRzlrWEc0Z0lDQWdJQ0J5WVhSbFRHbHRhWFJVZVhCbElDRTlQU0JTUVZSRlgweEpUVWxVWDFSWlVFVlRMa0pNVDBOTFJVUWdKaVpjYmlBZ0lDQWdJQzh2SUVSdmJpZDBJSFJ5WVdOcklHbG1JSFJvWlNCeVlYUmxJR3hwYldsMElHaGhjeUJpWldWdUlHaHBkRnh1SUNBZ0lDQWdjbUYwWlV4cGJXbDBaV1FnUFQwOUlHWmhiSE5sSUNZbVhHNGdJQ0FnSUNBdkx5QkViMjRuZENCMGNtRmpheUJwWmlCMGFHVWdkWE5sY2lCcGMyNG5kQ0J3WVhKMGFXTnBjR0YwYVc1bklHbHVJRzFsZEdGdFpYUnlhV056WEc0Z0lDQWdJQ0IxYzJWeVVHRnlkR2xqYVhCaGRHbHVaMGx1VFdWMFlVMWxkSEpwWTNNZ1BUMDlJSFJ5ZFdVN1hHNWNiaUFnSUNCcFppQW9jMmh2ZFd4a1ZISmhZMnRGZG1WdWRDa2dlMXh1SUNBZ0lDQWdMeThnVjJVZ2RISmhZMnNnWVc0Z2FXNXBkR2xoYkNCY0luSmxjWFZsYzNSbFpGd2lJR1YyWlc1MElHRnpJSE52YjI0Z1lYTWdkR2hsSUdSaGNIQWdZMkZzYkhNZ2RHaGxYRzRnSUNBZ0lDQXZMeUJ3Y205MmFXUmxjaUJ0WlhSb2IyUXVJRVp2Y2lCMGFHVWdaWFpsYm5SeklHNXZkQ0J6Y0dWamFXRnNJR05oYzJWa0lIUm9hWE1nYVhNZ2RHaGxJRzl1YkhsY2JpQWdJQ0FnSUM4dklHVjJaVzUwSUhSb1lYUWdkMmxzYkNCaVpTQm1hWEpsWkNCaGJtUWdkR2hsSUdWMlpXNTBJRzVoYldVZ2QybHNiQ0JpWlZ4dUlDQWdJQ0FnTHk4Z0oxQnliM1pwWkdWeUlFMWxkR2h2WkNCRFlXeHNaV1FuTGx4dUlDQWdJQ0FnWTI5dWMzUWdaWFpsYm5RZ1BTQmxkbVZ1ZEZSNWNHVmNiaUFnSUNBZ0lDQWdQeUJsZG1WdWRGUjVjR1V1VWtWUlZVVlRWRVZFWEc0Z0lDQWdJQ0FnSURvZ1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEU1aGJXVXVVSEp2ZG1sa1pYSk5aWFJvYjJSRFlXeHNaV1E3WEc1Y2JpQWdJQ0FnSUdsbUlDaGxkbVZ1ZENBOVBUMGdUV1YwWVUxbGRISnBZM05GZG1WdWRFNWhiV1V1VTJsbmJtRjBkWEpsVW1WeGRXVnpkR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lHVjJaVzUwVUhKdmNHVnlkR2xsY3k1emFXZHVZWFIxY21WZmRIbHdaU0E5SUcxbGRHaHZaRHRjYmx4dUlDQWdJQ0FnSUNBdkx5QkpiaUJ3WlhKemIyNWhiQ0J0WlhOellXZGxjeUIwYUdVZ1ptbHljM1FnY0dGeVlXMGdhWE1nWkdGMFlTQjNhR2xzWlNCcGJpQjBlWEJsWkNCdFpYTnpZV2RsY3lCelpXTnZibVFnY0dGeVlXMGdhWE1nWkdGMFlWeHVJQ0FnSUNBZ0lDQXZMeUJwWmlCamIyNWthWFJwYjI0Z1ltVnNiM2NnYVhNZ1lXUmtaV1FnZEc4Z1pXNXpkWEpsSUhSb1lYUWdkR2hsSUhKcFoyaDBJSEJoY21GdGN5QmhjbVVnWTJGd2RIVnlaV1FnWVhNZ1pHRjBZU0JoYm1RZ1lXUmtjbVZ6Y3k1Y2JpQWdJQ0FnSUNBZ2JHVjBJR1JoZEdFN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JtY205dE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYVhOV1lXeHBaRUZrWkhKbGMzTW9jbVZ4UHk1d1lYSmhiWE0vTGxzeFhTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCa1lYUmhJRDBnY21WeFB5NXdZWEpoYlhNL0xsc3dYVHRjYmlBZ0lDQWdJQ0FnSUNCbWNtOXRJRDBnY21WeFB5NXdZWEpoYlhNL0xsc3hYVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCa1lYUmhJRDBnY21WeFB5NXdZWEpoYlhNL0xsc3hYVHRjYmlBZ0lDQWdJQ0FnSUNCbWNtOXRJRDBnY21WeFB5NXdZWEpoYlhNL0xsc3dYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0J3WVhKaGJYTkZlR0Z0Y0d4bFVHRnpjM2R2Y21RZ1BTQnlaWEUvTG5CaGNtRnRjejh1V3pKZE8xeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElHMXpaMFJoZEdFZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnYlhOblVHRnlZVzF6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F1TGk1d1lYSmhiWE5GZUdGdGNHeGxVR0Z6YzNkdmNtUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXlhV2RwYml4Y2JpQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUhOMFlYUjFjem9nVkhKaGJuTmhZM1JwYjI1VGRHRjBkWE11ZFc1aGNIQnliM1psWkN4Y2JpQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCeVpYRXViV1YwYUc5a0xGeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjMlZqZFhKcGRIbFFjbTkyYVdSbGNsSmxjM0J2Ym5ObElEMGdZWGRoYVhRZ2MyVmpkWEpwZEhsUWNtOTJhV1JsY2xKbGNYVmxjM1FvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRjMmRFWVhSaExGeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WeExtMWxkR2h2WkN4Y2JpQWdJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSE5sWTNWeWFYUjVVSEp2ZG1sa1pYSlNaWE53YjI1elpUOHVabXhoWjBGelJHRnVaMlZ5YjNWeklEMDlQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWRGQnliM0JsY25ScFpYTXVkV2xmWTNWemRHOXRhWHBoZEdsdmJuTWdQU0JiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRTFsZEdGTlpYUnlhV056UlhabGJuUlZhVU4xYzNSdmJXbDZZWFJwYjI0dVJteGhaMmRsWkVGelRXRnNhV05wYjNWekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWFR0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE5sWTNWeWFYUjVVSEp2ZG1sa1pYSlNaWE53YjI1elpUOHVabXhoWjBGelJHRnVaMlZ5YjNWeklEMDlQU0F5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWRGQnliM0JsY25ScFpYTXVkV2xmWTNWemRHOXRhWHBoZEdsdmJuTWdQU0JiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRTFsZEdGTlpYUnlhV056UlhabGJuUlZhVU4xYzNSdmJXbDZZWFJwYjI0dVJteGhaMmRsWkVGelUyRm1aWFI1Vlc1cmJtOTNiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lGMDdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0cxbGRHaHZaQ0E5UFQwZ1RVVlRVMEZIUlY5VVdWQkZMbEJGVWxOUFRrRk1YMU5KUjA0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSHNnYVhOVFNWZEZUV1Z6YzJGblpTQjlJRDBnWkdWMFpXTjBVMGxYUlNoN0lHUmhkR0VnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYTlRTVmRGVFdWemMyRm5aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWRGQnliM0JsY25ScFpYTXVkV2xmWTNWemRHOXRhWHBoZEdsdmJuTWdQU0FvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhabGJuUlFjbTl3WlhKMGFXVnpMblZwWDJOMWMzUnZiV2w2WVhScGIyNXpJSHg4SUZ0ZFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNrdVkyOXVZMkYwS0UxbGRHRk5aWFJ5YVdOelJYWmxiblJWYVVOMWMzUnZiV2w2WVhScGIyNHVVMmwzWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lHTnlaV0YwWlZKUVEwMWxkR2h2WkZSeVlXTnJhVzVuVFdsa1pHeGxkMkZ5WlRvZ1JYSnliM0lnWTJGc2JHbHVaeUJ6WldOMWNtbDBlVkJ5YjNacFpHVnlVbVZ4ZFdWemRDQXRJQ1I3WlgxZ0xGeHVJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdWMlpXNTBVSEp2Y0dWeWRHbGxjeTV0WlhSb2IyUWdQU0J0WlhSb2IyUTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFJ5WVdOclJYWmxiblFvZTF4dUlDQWdJQ0FnSUNCbGRtVnVkQ3hjYmlBZ0lDQWdJQ0FnWTJGMFpXZHZjbms2SUUxbGRHRk5aWFJ5YVdOelJYWmxiblJEWVhSbFoyOXllUzVKYm5CaFoyVlFjbTkyYVdSbGNpeGNiaUFnSUNBZ0lDQWdjbVZtWlhKeVpYSTZJSHRjYmlBZ0lDQWdJQ0FnSUNCMWNtdzZJRzl5YVdkcGJpeGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnY0hKdmNHVnlkR2xsY3pvZ1pYWmxiblJRY205d1pYSjBhV1Z6TEZ4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lISmhkR1ZNYVcxcGRGUnBiV1Z2ZFhSelcyMWxkR2h2WkYwZ1BTQnpaWFJVYVcxbGIzVjBLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElISmhkR1ZNYVcxcGRGUnBiV1Z2ZFhSelcyMWxkR2h2WkYwN1hHNGdJQ0FnSUNCOUxDQlRSVU5QVGtRZ0tpQnlZWFJsVEdsdGFYUlRaV052Ym1SektUdGNiaUFnSUNCOVhHNWNiaUFnSUNCdVpYaDBLR0Z6ZVc1aklDaGpZV3hzWW1GamF5a2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tITm9iM1ZzWkZSeVlXTnJSWFpsYm5RZ1BUMDlJR1poYkhObElIeDhJSFI1Y0dWdlppQmxkbVZ1ZEZSNWNHVWdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV3hzWW1GamF5Z3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCVWFHVWdjbkJqSUdWeWNtOXlJRzFsZEdodlpFNXZkRVp2ZFc1a0lHbHRjR3hwWlhNZ2RHaGhkQ0FuWlhSb1gzTnBaMjRuSUdseklHUnBjMkZpYkdWa0lHbHVJRUZrZG1GdVkyVmtJRk5sZEhScGJtZHpYRzRnSUNBZ0lDQmpiMjV6ZENCcGMwUnBjMkZpYkdWa1JYUm9VMmxuYmtGa2RtRnVZMlZrVTJWMGRHbHVaeUE5WEc0Z0lDQWdJQ0FnSUcxbGRHaHZaQ0E5UFQwZ1RVVlRVMEZIUlY5VVdWQkZMa1ZVU0Y5VFNVZE9JQ1ltWEc0Z0lDQWdJQ0FnSUhKbGN5NWxjbkp2Y2o4dVkyOWtaU0E5UFQwZ1pYSnliM0pEYjJSbGN5NXljR011YldWMGFHOWtUbTkwUm05MWJtUTdYRzVjYmlBZ0lDQWdJR052Ym5OMElHbHpSR2x6WVdKc1pXUlNVRU5OWlhSb2IyUWdQU0JwYzBScGMyRmliR1ZrUlhSb1UybG5ia0ZrZG1GdVkyVmtVMlYwZEdsdVp6dGNibHh1SUNBZ0lDQWdiR1YwSUdWMlpXNTBPMXh1SUNBZ0lDQWdhV1lnS0dselJHbHpZV0pzWldSU1VFTk5aWFJvYjJRcElIdGNiaUFnSUNBZ0lDQWdaWFpsYm5RZ1BTQmxkbVZ1ZEZSNWNHVXVSa0ZKVEVWRU8xeHVJQ0FnSUNBZ0lDQmxkbVZ1ZEZCeWIzQmxjblJwWlhNdVpYSnliM0lnUFNCeVpYTXVaWEp5YjNJN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tISmxjeTVsY25KdmNqOHVZMjlrWlNBOVBUMGdaWEp5YjNKRGIyUmxjeTV3Y205MmFXUmxjaTUxYzJWeVVtVnFaV04wWldSU1pYRjFaWE4wS1NCN1hHNGdJQ0FnSUNBZ0lHVjJaVzUwSUQwZ1pYWmxiblJVZVhCbExsSkZTa1ZEVkVWRU8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1pYWmxiblFnUFNCbGRtVnVkRlI1Y0dVdVFWQlFVazlXUlVRN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIUnlZV05yUlhabGJuUW9lMXh1SUNBZ0lDQWdJQ0JsZG1WdWRDeGNiaUFnSUNBZ0lDQWdZMkYwWldkdmNuazZJRTFsZEdGTlpYUnlhV056UlhabGJuUkRZWFJsWjI5eWVTNUpibkJoWjJWUWNtOTJhV1JsY2l4Y2JpQWdJQ0FnSUNBZ2NtVm1aWEp5WlhJNklIdGNiaUFnSUNBZ0lDQWdJQ0IxY213NklHOXlhV2RwYml4Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdjSEp2Y0dWeWRHbGxjem9nWlhabGJuUlFjbTl3WlhKMGFXVnpMRnh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJqWVd4c1ltRmpheWdwTzF4dUlDQWdJSDBwTzF4dUlDQjlPMXh1ZlZ4dUlpd2lhVzF3YjNKMElIc2dWM0pwZEdGaWJHVWdZWE1nVjNKcGRHRmliR1ZUZEhKbFlXMGdmU0JtY205dElDZHlaV0ZrWVdKc1pTMXpkSEpsWVcwbk8xeHVhVzF3YjNKMElIQnliMjFwYzJWVWIwTmhiR3hpWVdOcklHWnliMjBnSjNCeWIyMXBjMlV0ZEc4dFkyRnNiR0poWTJzbk8xeHVYRzVqYkdGemN5QkJjM2x1WTFkeWFYUmhZbXhsVTNSeVpXRnRJR1Y0ZEdWdVpITWdWM0pwZEdGaWJHVlRkSEpsWVcwZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2loaGMzbHVZMWR5YVhSbFJtNHNJRjl2Y0hSektTQjdYRzRnSUNBZ1kyOXVjM1FnYjNCMGN5QTlJSHNnYjJKcVpXTjBUVzlrWlRvZ2RISjFaU3dnTGk0dVgyOXdkSE1nZlR0Y2JpQWdJQ0J6ZFhCbGNpaHZjSFJ6S1R0Y2JpQWdJQ0IwYUdsekxsOWhjM2x1WTFkeWFYUmxSbTRnUFNCaGMzbHVZMWR5YVhSbFJtNDdYRzRnSUgxY2JseHVJQ0F2THlCM2NtbDBaU0JtY205dElHbHVZMjl0YVc1bklITjBjbVZoYlNCMGJ5QnpkR0YwWlZ4dUlDQmZkM0pwZEdVb1kyaDFibXNzSUdWdVkyOWthVzVuTENCallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUhCeWIyMXBjMlZVYjBOaGJHeGlZV05yS0hSb2FYTXVYMkZ6ZVc1alYzSnBkR1ZHYmloamFIVnVheXdnWlc1amIyUnBibWNwS1NoallXeHNZbUZqYXlrN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1kzSmxZWFJsVTNSeVpXRnRVMmx1YXloaGMzbHVZMWR5YVhSbFJtNHNJRjl2Y0hSektTQjdYRzRnSUhKbGRIVnliaUJ1WlhjZ1FYTjVibU5YY21sMFlXSnNaVk4wY21WaGJTaGhjM2x1WTFkeWFYUmxSbTRzSUY5dmNIUnpLVHRjYm4xY2JpSXNJaThxS2x4dUlDb2dVbVYwZFhKdWN5QmhJRzFwWkdSc1pYZGhjbVVnZEdoaGRDQmhjSEJsYm1SeklIUm9aU0JFUVhCd0lGUmhZa2xrSUhSdklIUm9aU0J5WlhGMVpYTjBYRzRnS2x4dUlDb2dRSEJoY21GdElIdDdJSFJoWWtsa09pQnVkVzFpWlhJZ2ZYMGdiM0IwY3lBdElGUm9aU0J0YVdSa2JHVjNZWEpsSUc5d2RHbHZibk5jYmlBcUlFQnlaWFIxY201eklIdEdkVzVqZEdsdmJuMWNiaUFxTDF4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnWTNKbFlYUmxWR0ZpU1dSTmFXUmtiR1YzWVhKbEtHOXdkSE1wSUh0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlIUmhZa2xrVFdsa1pHeGxkMkZ5WlNoY2JpQWdJQ0F2S2lvZ1FIUjVjR1VnZTJGdWVYMGdLaThnY21WeExGeHVJQ0FnSUM4cUtpQkFkSGx3WlNCN1lXNTVmU0FxTHlCZkxGeHVJQ0FnSUM4cUtpQkFkSGx3WlNCN1JuVnVZM1JwYjI1OUlDb3ZJRzVsZUhRc1hHNGdJQ2tnZTF4dUlDQWdJSEpsY1M1MFlXSkpaQ0E5SUc5d2RITXVkR0ZpU1dRN1hHNGdJQ0FnYm1WNGRDZ3BPMXh1SUNCOU8xeHVmVnh1SWl3aVkyOXVjM1FnWVdKcElEMGdXMXh1SUNCN1hHNGdJQ0FnWTI5dWMzUmhiblE2SUhSeWRXVXNYRzRnSUNBZ2FXNXdkWFJ6T2lCYmV5QnVZVzFsT2lBbmJtOWtaU2NzSUhSNWNHVTZJQ2RpZVhSbGN6TXlKeUI5WFN4Y2JpQWdJQ0J1WVcxbE9pQW5jbVZ6YjJ4MlpYSW5MRnh1SUNBZ0lHOTFkSEIxZEhNNklGdDdJRzVoYldVNklDY25MQ0IwZVhCbE9pQW5ZV1JrY21WemN5Y2dmVjBzWEc0Z0lDQWdjR0Y1WVdKc1pUb2dabUZzYzJVc1hHNGdJQ0FnZEhsd1pUb2dKMloxYm1OMGFXOXVKeXhjYmlBZ2ZTeGNiaUFnZTF4dUlDQWdJR052Ym5OMFlXNTBPaUIwY25WbExGeHVJQ0FnSUdsdWNIVjBjem9nVzNzZ2JtRnRaVG9nSjI1dlpHVW5MQ0IwZVhCbE9pQW5ZbmwwWlhNek1pY2dmVjBzWEc0Z0lDQWdibUZ0WlRvZ0oyOTNibVZ5Snl4Y2JpQWdJQ0J2ZFhSd2RYUnpPaUJiZXlCdVlXMWxPaUFuSnl3Z2RIbHdaVG9nSjJGa1pISmxjM01uSUgxZExGeHVJQ0FnSUhCaGVXRmliR1U2SUdaaGJITmxMRnh1SUNBZ0lIUjVjR1U2SUNkbWRXNWpkR2x2Ymljc1hHNGdJSDBzWEc0Z0lIdGNiaUFnSUNCamIyNXpkR0Z1ZERvZ1ptRnNjMlVzWEc0Z0lDQWdhVzV3ZFhSek9pQmJYRzRnSUNBZ0lDQjdJRzVoYldVNklDZHViMlJsSnl3Z2RIbHdaVG9nSjJKNWRHVnpNekluSUgwc1hHNGdJQ0FnSUNCN0lHNWhiV1U2SUNkc1lXSmxiQ2NzSUhSNWNHVTZJQ2RpZVhSbGN6TXlKeUI5TEZ4dUlDQWdJQ0FnZXlCdVlXMWxPaUFuYjNkdVpYSW5MQ0IwZVhCbE9pQW5ZV1JrY21WemN5Y2dmU3hjYmlBZ0lDQmRMRnh1SUNBZ0lHNWhiV1U2SUNkelpYUlRkV0p1YjJSbFQzZHVaWEluTEZ4dUlDQWdJRzkxZEhCMWRITTZJRnRkTEZ4dUlDQWdJSEJoZVdGaWJHVTZJR1poYkhObExGeHVJQ0FnSUhSNWNHVTZJQ2RtZFc1amRHbHZiaWNzWEc0Z0lIMHNYRzRnSUh0Y2JpQWdJQ0JqYjI1emRHRnVkRG9nWm1Gc2MyVXNYRzRnSUNBZ2FXNXdkWFJ6T2lCYlhHNGdJQ0FnSUNCN0lHNWhiV1U2SUNkdWIyUmxKeXdnZEhsd1pUb2dKMko1ZEdWek16SW5JSDBzWEc0Z0lDQWdJQ0I3SUc1aGJXVTZJQ2QwZEd3bkxDQjBlWEJsT2lBbmRXbHVkRFkwSnlCOUxGeHVJQ0FnSUYwc1hHNGdJQ0FnYm1GdFpUb2dKM05sZEZSVVRDY3NYRzRnSUNBZ2IzVjBjSFYwY3pvZ1cxMHNYRzRnSUNBZ2NHRjVZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdkSGx3WlRvZ0oyWjFibU4wYVc5dUp5eGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHTnZibk4wWVc1ME9pQjBjblZsTEZ4dUlDQWdJR2x1Y0hWMGN6b2dXM3NnYm1GdFpUb2dKMjV2WkdVbkxDQjBlWEJsT2lBbllubDBaWE16TWljZ2ZWMHNYRzRnSUNBZ2JtRnRaVG9nSjNSMGJDY3NYRzRnSUNBZ2IzVjBjSFYwY3pvZ1czc2dibUZ0WlRvZ0p5Y3NJSFI1Y0dVNklDZDFhVzUwTmpRbklIMWRMRnh1SUNBZ0lIQmhlV0ZpYkdVNklHWmhiSE5sTEZ4dUlDQWdJSFI1Y0dVNklDZG1kVzVqZEdsdmJpY3NYRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmpiMjV6ZEdGdWREb2dabUZzYzJVc1hHNGdJQ0FnYVc1d2RYUnpPaUJiWEc0Z0lDQWdJQ0I3SUc1aGJXVTZJQ2R1YjJSbEp5d2dkSGx3WlRvZ0oySjVkR1Z6TXpJbklIMHNYRzRnSUNBZ0lDQjdJRzVoYldVNklDZHlaWE52YkhabGNpY3NJSFI1Y0dVNklDZGhaR1J5WlhOekp5QjlMRnh1SUNBZ0lGMHNYRzRnSUNBZ2JtRnRaVG9nSjNObGRGSmxjMjlzZG1WeUp5eGNiaUFnSUNCdmRYUndkWFJ6T2lCYlhTeGNiaUFnSUNCd1lYbGhZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQjBlWEJsT2lBblpuVnVZM1JwYjI0bkxGeHVJQ0I5TEZ4dUlDQjdYRzRnSUNBZ1kyOXVjM1JoYm5RNklHWmhiSE5sTEZ4dUlDQWdJR2x1Y0hWMGN6b2dXMXh1SUNBZ0lDQWdleUJ1WVcxbE9pQW5ibTlrWlNjc0lIUjVjR1U2SUNkaWVYUmxjek15SnlCOUxGeHVJQ0FnSUNBZ2V5QnVZVzFsT2lBbmIzZHVaWEluTENCMGVYQmxPaUFuWVdSa2NtVnpjeWNnZlN4Y2JpQWdJQ0JkTEZ4dUlDQWdJRzVoYldVNklDZHpaWFJQZDI1bGNpY3NYRzRnSUNBZ2IzVjBjSFYwY3pvZ1cxMHNYRzRnSUNBZ2NHRjVZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdkSGx3WlRvZ0oyWjFibU4wYVc5dUp5eGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHRnViMjU1Ylc5MWN6b2dabUZzYzJVc1hHNGdJQ0FnYVc1d2RYUnpPaUJiWEc0Z0lDQWdJQ0I3SUdsdVpHVjRaV1E2SUhSeWRXVXNJRzVoYldVNklDZHViMlJsSnl3Z2RIbHdaVG9nSjJKNWRHVnpNekluSUgwc1hHNGdJQ0FnSUNCN0lHbHVaR1Y0WldRNklHWmhiSE5sTENCdVlXMWxPaUFuYjNkdVpYSW5MQ0IwZVhCbE9pQW5ZV1JrY21WemN5Y2dmU3hjYmlBZ0lDQmRMRnh1SUNBZ0lHNWhiV1U2SUNkVWNtRnVjMlpsY2ljc1hHNGdJQ0FnZEhsd1pUb2dKMlYyWlc1MEp5eGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHRnViMjU1Ylc5MWN6b2dabUZzYzJVc1hHNGdJQ0FnYVc1d2RYUnpPaUJiWEc0Z0lDQWdJQ0I3SUdsdVpHVjRaV1E2SUhSeWRXVXNJRzVoYldVNklDZHViMlJsSnl3Z2RIbHdaVG9nSjJKNWRHVnpNekluSUgwc1hHNGdJQ0FnSUNCN0lHbHVaR1Y0WldRNklIUnlkV1VzSUc1aGJXVTZJQ2RzWVdKbGJDY3NJSFI1Y0dVNklDZGllWFJsY3pNeUp5QjlMRnh1SUNBZ0lDQWdleUJwYm1SbGVHVmtPaUJtWVd4elpTd2dibUZ0WlRvZ0oyOTNibVZ5Snl3Z2RIbHdaVG9nSjJGa1pISmxjM01uSUgwc1hHNGdJQ0FnWFN4Y2JpQWdJQ0J1WVcxbE9pQW5UbVYzVDNkdVpYSW5MRnh1SUNBZ0lIUjVjR1U2SUNkbGRtVnVkQ2NzWEc0Z0lIMHNYRzRnSUh0Y2JpQWdJQ0JoYm05dWVXMXZkWE02SUdaaGJITmxMRnh1SUNBZ0lHbHVjSFYwY3pvZ1cxeHVJQ0FnSUNBZ2V5QnBibVJsZUdWa09pQjBjblZsTENCdVlXMWxPaUFuYm05a1pTY3NJSFI1Y0dVNklDZGllWFJsY3pNeUp5QjlMRnh1SUNBZ0lDQWdleUJwYm1SbGVHVmtPaUJtWVd4elpTd2dibUZ0WlRvZ0ozSmxjMjlzZG1WeUp5d2dkSGx3WlRvZ0oyRmtaSEpsYzNNbklIMHNYRzRnSUNBZ1hTeGNiaUFnSUNCdVlXMWxPaUFuVG1WM1VtVnpiMngyWlhJbkxGeHVJQ0FnSUhSNWNHVTZJQ2RsZG1WdWRDY3NYRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmhibTl1ZVcxdmRYTTZJR1poYkhObExGeHVJQ0FnSUdsdWNIVjBjem9nVzF4dUlDQWdJQ0FnZXlCcGJtUmxlR1ZrT2lCMGNuVmxMQ0J1WVcxbE9pQW5ibTlrWlNjc0lIUjVjR1U2SUNkaWVYUmxjek15SnlCOUxGeHVJQ0FnSUNBZ2V5QnBibVJsZUdWa09pQm1ZV3h6WlN3Z2JtRnRaVG9nSjNSMGJDY3NJSFI1Y0dVNklDZDFhVzUwTmpRbklIMHNYRzRnSUNBZ1hTeGNiaUFnSUNCdVlXMWxPaUFuVG1WM1ZGUk1KeXhjYmlBZ0lDQjBlWEJsT2lBblpYWmxiblFuTEZ4dUlDQjlMRnh1WFR0Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdGaWFUdGNiaUlzSW1OdmJuTjBJR0ZpYVNBOUlGdGNiaUFnZTF4dUlDQWdJR052Ym5OMFlXNTBPaUJtWVd4elpTeGNiaUFnSUNCcGJuQjFkSE02SUZ0Y2JpQWdJQ0FnSUhzZ2JtRnRaVG9nSjI1dlpHVW5MQ0IwZVhCbE9pQW5ZbmwwWlhNek1pY2dmU3hjYmlBZ0lDQWdJSHNnYm1GdFpUb2dKMmhoYzJnbkxDQjBlWEJsT2lBbllubDBaWE16TWljZ2ZTeGNiaUFnSUNCZExGeHVJQ0FnSUc1aGJXVTZJQ2R6WlhSRGIyNTBaVzUwSnl4Y2JpQWdJQ0J2ZFhSd2RYUnpPaUJiWFN4Y2JpQWdJQ0J3WVhsaFlteGxPaUJtWVd4elpTeGNiaUFnSUNCemRHRjBaVTExZEdGaWFXeHBkSGs2SUNkdWIyNXdZWGxoWW14bEp5eGNiaUFnSUNCMGVYQmxPaUFuWm5WdVkzUnBiMjRuTEZ4dUlDQjlMRnh1SUNCN1hHNGdJQ0FnWTI5dWMzUmhiblE2SUhSeWRXVXNYRzRnSUNBZ2FXNXdkWFJ6T2lCYmV5QnVZVzFsT2lBbmJtOWtaU2NzSUhSNWNHVTZJQ2RpZVhSbGN6TXlKeUI5WFN4Y2JpQWdJQ0J1WVcxbE9pQW5ZMjl1ZEdWdWRDY3NYRzRnSUNBZ2IzVjBjSFYwY3pvZ1czc2dibUZ0WlRvZ0p5Y3NJSFI1Y0dVNklDZGllWFJsY3pNeUp5QjlYU3hjYmlBZ0lDQndZWGxoWW14bE9pQm1ZV3h6WlN4Y2JpQWdJQ0J6ZEdGMFpVMTFkR0ZpYVd4cGRIazZJQ2QyYVdWM0p5eGNiaUFnSUNCMGVYQmxPaUFuWm5WdVkzUnBiMjRuTEZ4dUlDQjlMRnh1SUNCN1hHNGdJQ0FnWTI5dWMzUmhiblE2SUhSeWRXVXNYRzRnSUNBZ2FXNXdkWFJ6T2lCYmV5QnVZVzFsT2lBbmFXNTBaWEptWVdObFNVUW5MQ0IwZVhCbE9pQW5ZbmwwWlhNMEp5QjlYU3hjYmlBZ0lDQnVZVzFsT2lBbmMzVndjRzl5ZEhOSmJuUmxjbVpoWTJVbkxGeHVJQ0FnSUc5MWRIQjFkSE02SUZ0N0lHNWhiV1U2SUNjbkxDQjBlWEJsT2lBblltOXZiQ2NnZlYwc1hHNGdJQ0FnY0dGNVlXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ2MzUmhkR1ZOZFhSaFltbHNhWFI1T2lBbmNIVnlaU2NzWEc0Z0lDQWdkSGx3WlRvZ0oyWjFibU4wYVc5dUp5eGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHTnZibk4wWVc1ME9pQm1ZV3h6WlN4Y2JpQWdJQ0JwYm5CMWRITTZJRnRjYmlBZ0lDQWdJSHNnYm1GdFpUb2dKMjV2WkdVbkxDQjBlWEJsT2lBbllubDBaWE16TWljZ2ZTeGNiaUFnSUNBZ0lIc2dibUZ0WlRvZ0oydGxlU2NzSUhSNWNHVTZJQ2R6ZEhKcGJtY25JSDBzWEc0Z0lDQWdJQ0I3SUc1aGJXVTZJQ2QyWVd4MVpTY3NJSFI1Y0dVNklDZHpkSEpwYm1jbklIMHNYRzRnSUNBZ1hTeGNiaUFnSUNCdVlXMWxPaUFuYzJWMFZHVjRkQ2NzWEc0Z0lDQWdiM1YwY0hWMGN6b2dXMTBzWEc0Z0lDQWdjR0Y1WVdKc1pUb2dabUZzYzJVc1hHNGdJQ0FnYzNSaGRHVk5kWFJoWW1sc2FYUjVPaUFuYm05dWNHRjVZV0pzWlNjc1hHNGdJQ0FnZEhsd1pUb2dKMloxYm1OMGFXOXVKeXhjYmlBZ2ZTeGNiaUFnZTF4dUlDQWdJR052Ym5OMFlXNTBPaUIwY25WbExGeHVJQ0FnSUdsdWNIVjBjem9nVzF4dUlDQWdJQ0FnZXlCdVlXMWxPaUFuYm05a1pTY3NJSFI1Y0dVNklDZGllWFJsY3pNeUp5QjlMRnh1SUNBZ0lDQWdleUJ1WVcxbE9pQW5ZMjl1ZEdWdWRGUjVjR1Z6Snl3Z2RIbHdaVG9nSjNWcGJuUXlOVFluSUgwc1hHNGdJQ0FnWFN4Y2JpQWdJQ0J1WVcxbE9pQW5RVUpKSnl4Y2JpQWdJQ0J2ZFhSd2RYUnpPaUJiWEc0Z0lDQWdJQ0I3SUc1aGJXVTZJQ2RqYjI1MFpXNTBWSGx3WlNjc0lIUjVjR1U2SUNkMWFXNTBNalUySnlCOUxGeHVJQ0FnSUNBZ2V5QnVZVzFsT2lBblpHRjBZU2NzSUhSNWNHVTZJQ2RpZVhSbGN5Y2dmU3hjYmlBZ0lDQmRMRnh1SUNBZ0lIQmhlV0ZpYkdVNklHWmhiSE5sTEZ4dUlDQWdJSE4wWVhSbFRYVjBZV0pwYkdsMGVUb2dKM1pwWlhjbkxGeHVJQ0FnSUhSNWNHVTZJQ2RtZFc1amRHbHZiaWNzWEc0Z0lIMHNYRzRnSUh0Y2JpQWdJQ0JqYjI1emRHRnVkRG9nWm1Gc2MyVXNYRzRnSUNBZ2FXNXdkWFJ6T2lCYlhHNGdJQ0FnSUNCN0lHNWhiV1U2SUNkdWIyUmxKeXdnZEhsd1pUb2dKMko1ZEdWek16SW5JSDBzWEc0Z0lDQWdJQ0I3SUc1aGJXVTZJQ2Q0Snl3Z2RIbHdaVG9nSjJKNWRHVnpNekluSUgwc1hHNGdJQ0FnSUNCN0lHNWhiV1U2SUNkNUp5d2dkSGx3WlRvZ0oySjVkR1Z6TXpJbklIMHNYRzRnSUNBZ1hTeGNiaUFnSUNCdVlXMWxPaUFuYzJWMFVIVmlhMlY1Snl4Y2JpQWdJQ0J2ZFhSd2RYUnpPaUJiWFN4Y2JpQWdJQ0J3WVhsaFlteGxPaUJtWVd4elpTeGNiaUFnSUNCemRHRjBaVTExZEdGaWFXeHBkSGs2SUNkdWIyNXdZWGxoWW14bEp5eGNiaUFnSUNCMGVYQmxPaUFuWm5WdVkzUnBiMjRuTEZ4dUlDQjlMRnh1SUNCN1hHNGdJQ0FnWTI5dWMzUmhiblE2SUdaaGJITmxMRnh1SUNBZ0lHbHVjSFYwY3pvZ1cxeHVJQ0FnSUNBZ2V5QnVZVzFsT2lBbmJtOWtaU2NzSUhSNWNHVTZJQ2RpZVhSbGN6TXlKeUI5TEZ4dUlDQWdJQ0FnZXlCdVlXMWxPaUFuYUdGemFDY3NJSFI1Y0dVNklDZGllWFJsY3ljZ2ZTeGNiaUFnSUNCZExGeHVJQ0FnSUc1aGJXVTZJQ2R6WlhSRGIyNTBaVzUwYUdGemFDY3NYRzRnSUNBZ2IzVjBjSFYwY3pvZ1cxMHNYRzRnSUNBZ2NHRjVZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdjM1JoZEdWTmRYUmhZbWxzYVhSNU9pQW5ibTl1Y0dGNVlXSnNaU2NzWEc0Z0lDQWdkSGx3WlRvZ0oyWjFibU4wYVc5dUp5eGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHTnZibk4wWVc1ME9pQjBjblZsTEZ4dUlDQWdJR2x1Y0hWMGN6b2dXM3NnYm1GdFpUb2dKMjV2WkdVbkxDQjBlWEJsT2lBbllubDBaWE16TWljZ2ZWMHNYRzRnSUNBZ2JtRnRaVG9nSjJGa1pISW5MRnh1SUNBZ0lHOTFkSEIxZEhNNklGdDdJRzVoYldVNklDY25MQ0IwZVhCbE9pQW5ZV1JrY21WemN5Y2dmVjBzWEc0Z0lDQWdjR0Y1WVdKc1pUb2dabUZzYzJVc1hHNGdJQ0FnYzNSaGRHVk5kWFJoWW1sc2FYUjVPaUFuZG1sbGR5Y3NYRzRnSUNBZ2RIbHdaVG9nSjJaMWJtTjBhVzl1Snl4Y2JpQWdmU3hjYmlBZ2UxeHVJQ0FnSUdOdmJuTjBZVzUwT2lCMGNuVmxMRnh1SUNBZ0lHbHVjSFYwY3pvZ1cxeHVJQ0FnSUNBZ2V5QnVZVzFsT2lBbmJtOWtaU2NzSUhSNWNHVTZJQ2RpZVhSbGN6TXlKeUI5TEZ4dUlDQWdJQ0FnZXlCdVlXMWxPaUFuYTJWNUp5d2dkSGx3WlRvZ0ozTjBjbWx1WnljZ2ZTeGNiaUFnSUNCZExGeHVJQ0FnSUc1aGJXVTZJQ2QwWlhoMEp5eGNiaUFnSUNCdmRYUndkWFJ6T2lCYmV5QnVZVzFsT2lBbkp5d2dkSGx3WlRvZ0ozTjBjbWx1WnljZ2ZWMHNYRzRnSUNBZ2NHRjVZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdjM1JoZEdWTmRYUmhZbWxzYVhSNU9pQW5kbWxsZHljc1hHNGdJQ0FnZEhsd1pUb2dKMloxYm1OMGFXOXVKeXhjYmlBZ2ZTeGNiaUFnZTF4dUlDQWdJR052Ym5OMFlXNTBPaUJtWVd4elpTeGNiaUFnSUNCcGJuQjFkSE02SUZ0Y2JpQWdJQ0FnSUhzZ2JtRnRaVG9nSjI1dlpHVW5MQ0IwZVhCbE9pQW5ZbmwwWlhNek1pY2dmU3hjYmlBZ0lDQWdJSHNnYm1GdFpUb2dKMk52Ym5SbGJuUlVlWEJsSnl3Z2RIbHdaVG9nSjNWcGJuUXlOVFluSUgwc1hHNGdJQ0FnSUNCN0lHNWhiV1U2SUNka1lYUmhKeXdnZEhsd1pUb2dKMko1ZEdWekp5QjlMRnh1SUNBZ0lGMHNYRzRnSUNBZ2JtRnRaVG9nSjNObGRFRkNTU2NzWEc0Z0lDQWdiM1YwY0hWMGN6b2dXMTBzWEc0Z0lDQWdjR0Y1WVdKc1pUb2dabUZzYzJVc1hHNGdJQ0FnYzNSaGRHVk5kWFJoWW1sc2FYUjVPaUFuYm05dWNHRjVZV0pzWlNjc1hHNGdJQ0FnZEhsd1pUb2dKMloxYm1OMGFXOXVKeXhjYmlBZ2ZTeGNiaUFnZTF4dUlDQWdJR052Ym5OMFlXNTBPaUIwY25WbExGeHVJQ0FnSUdsdWNIVjBjem9nVzNzZ2JtRnRaVG9nSjI1dlpHVW5MQ0IwZVhCbE9pQW5ZbmwwWlhNek1pY2dmVjBzWEc0Z0lDQWdibUZ0WlRvZ0oyNWhiV1VuTEZ4dUlDQWdJRzkxZEhCMWRITTZJRnQ3SUc1aGJXVTZJQ2NuTENCMGVYQmxPaUFuYzNSeWFXNW5KeUI5WFN4Y2JpQWdJQ0J3WVhsaFlteGxPaUJtWVd4elpTeGNiaUFnSUNCemRHRjBaVTExZEdGaWFXeHBkSGs2SUNkMmFXVjNKeXhjYmlBZ0lDQjBlWEJsT2lBblpuVnVZM1JwYjI0bkxGeHVJQ0I5TEZ4dUlDQjdYRzRnSUNBZ1kyOXVjM1JoYm5RNklHWmhiSE5sTEZ4dUlDQWdJR2x1Y0hWMGN6b2dXMXh1SUNBZ0lDQWdleUJ1WVcxbE9pQW5ibTlrWlNjc0lIUjVjR1U2SUNkaWVYUmxjek15SnlCOUxGeHVJQ0FnSUNBZ2V5QnVZVzFsT2lBbmJtRnRaU2NzSUhSNWNHVTZJQ2R6ZEhKcGJtY25JSDBzWEc0Z0lDQWdYU3hjYmlBZ0lDQnVZVzFsT2lBbmMyVjBUbUZ0WlNjc1hHNGdJQ0FnYjNWMGNIVjBjem9nVzEwc1hHNGdJQ0FnY0dGNVlXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ2MzUmhkR1ZOZFhSaFltbHNhWFI1T2lBbmJtOXVjR0Y1WVdKc1pTY3NYRzRnSUNBZ2RIbHdaVG9nSjJaMWJtTjBhVzl1Snl4Y2JpQWdmU3hjYmlBZ2UxeHVJQ0FnSUdOdmJuTjBZVzUwT2lCMGNuVmxMRnh1SUNBZ0lHbHVjSFYwY3pvZ1czc2dibUZ0WlRvZ0oyNXZaR1VuTENCMGVYQmxPaUFuWW5sMFpYTXpNaWNnZlYwc1hHNGdJQ0FnYm1GdFpUb2dKMk52Ym5SbGJuUm9ZWE5vSnl4Y2JpQWdJQ0J2ZFhSd2RYUnpPaUJiZXlCdVlXMWxPaUFuSnl3Z2RIbHdaVG9nSjJKNWRHVnpKeUI5WFN4Y2JpQWdJQ0J3WVhsaFlteGxPaUJtWVd4elpTeGNiaUFnSUNCemRHRjBaVTExZEdGaWFXeHBkSGs2SUNkMmFXVjNKeXhjYmlBZ0lDQjBlWEJsT2lBblpuVnVZM1JwYjI0bkxGeHVJQ0I5TEZ4dUlDQjdYRzRnSUNBZ1kyOXVjM1JoYm5RNklIUnlkV1VzWEc0Z0lDQWdhVzV3ZFhSek9pQmJleUJ1WVcxbE9pQW5ibTlrWlNjc0lIUjVjR1U2SUNkaWVYUmxjek15SnlCOVhTeGNiaUFnSUNCdVlXMWxPaUFuY0hWaWEyVjVKeXhjYmlBZ0lDQnZkWFJ3ZFhSek9pQmJYRzRnSUNBZ0lDQjdJRzVoYldVNklDZDRKeXdnZEhsd1pUb2dKMko1ZEdWek16SW5JSDBzWEc0Z0lDQWdJQ0I3SUc1aGJXVTZJQ2Q1Snl3Z2RIbHdaVG9nSjJKNWRHVnpNekluSUgwc1hHNGdJQ0FnWFN4Y2JpQWdJQ0J3WVhsaFlteGxPaUJtWVd4elpTeGNiaUFnSUNCemRHRjBaVTExZEdGaWFXeHBkSGs2SUNkMmFXVjNKeXhjYmlBZ0lDQjBlWEJsT2lBblpuVnVZM1JwYjI0bkxGeHVJQ0I5TEZ4dUlDQjdYRzRnSUNBZ1kyOXVjM1JoYm5RNklHWmhiSE5sTEZ4dUlDQWdJR2x1Y0hWMGN6b2dXMXh1SUNBZ0lDQWdleUJ1WVcxbE9pQW5ibTlrWlNjc0lIUjVjR1U2SUNkaWVYUmxjek15SnlCOUxGeHVJQ0FnSUNBZ2V5QnVZVzFsT2lBbllXUmtjaWNzSUhSNWNHVTZJQ2RoWkdSeVpYTnpKeUI5TEZ4dUlDQWdJRjBzWEc0Z0lDQWdibUZ0WlRvZ0ozTmxkRUZrWkhJbkxGeHVJQ0FnSUc5MWRIQjFkSE02SUZ0ZExGeHVJQ0FnSUhCaGVXRmliR1U2SUdaaGJITmxMRnh1SUNBZ0lITjBZWFJsVFhWMFlXSnBiR2wwZVRvZ0oyNXZibkJoZVdGaWJHVW5MRnh1SUNBZ0lIUjVjR1U2SUNkbWRXNWpkR2x2Ymljc1hHNGdJSDBzWEc0Z0lIdGNiaUFnSUNCcGJuQjFkSE02SUZ0N0lHNWhiV1U2SUNkbGJuTkJaR1J5Snl3Z2RIbHdaVG9nSjJGa1pISmxjM01uSUgxZExGeHVJQ0FnSUhCaGVXRmliR1U2SUdaaGJITmxMRnh1SUNBZ0lITjBZWFJsVFhWMFlXSnBiR2wwZVRvZ0oyNXZibkJoZVdGaWJHVW5MRnh1SUNBZ0lIUjVjR1U2SUNkamIyNXpkSEoxWTNSdmNpY3NYRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmhibTl1ZVcxdmRYTTZJR1poYkhObExGeHVJQ0FnSUdsdWNIVjBjem9nVzF4dUlDQWdJQ0FnZXlCcGJtUmxlR1ZrT2lCMGNuVmxMQ0J1WVcxbE9pQW5ibTlrWlNjc0lIUjVjR1U2SUNkaWVYUmxjek15SnlCOUxGeHVJQ0FnSUNBZ2V5QnBibVJsZUdWa09pQm1ZV3h6WlN3Z2JtRnRaVG9nSjJFbkxDQjBlWEJsT2lBbllXUmtjbVZ6Y3ljZ2ZTeGNiaUFnSUNCZExGeHVJQ0FnSUc1aGJXVTZJQ2RCWkdSeVEyaGhibWRsWkNjc1hHNGdJQ0FnZEhsd1pUb2dKMlYyWlc1MEp5eGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHRnViMjU1Ylc5MWN6b2dabUZzYzJVc1hHNGdJQ0FnYVc1d2RYUnpPaUJiWEc0Z0lDQWdJQ0I3SUdsdVpHVjRaV1E2SUhSeWRXVXNJRzVoYldVNklDZHViMlJsSnl3Z2RIbHdaVG9nSjJKNWRHVnpNekluSUgwc1hHNGdJQ0FnSUNCN0lHbHVaR1Y0WldRNklHWmhiSE5sTENCdVlXMWxPaUFuYm1GdFpTY3NJSFI1Y0dVNklDZHpkSEpwYm1jbklIMHNYRzRnSUNBZ1hTeGNiaUFnSUNCdVlXMWxPaUFuVG1GdFpVTm9ZVzVuWldRbkxGeHVJQ0FnSUhSNWNHVTZJQ2RsZG1WdWRDY3NYRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmhibTl1ZVcxdmRYTTZJR1poYkhObExGeHVJQ0FnSUdsdWNIVjBjem9nVzF4dUlDQWdJQ0FnZXlCcGJtUmxlR1ZrT2lCMGNuVmxMQ0J1WVcxbE9pQW5ibTlrWlNjc0lIUjVjR1U2SUNkaWVYUmxjek15SnlCOUxGeHVJQ0FnSUNBZ2V5QnBibVJsZUdWa09pQjBjblZsTENCdVlXMWxPaUFuWTI5dWRHVnVkRlI1Y0dVbkxDQjBlWEJsT2lBbmRXbHVkREkxTmljZ2ZTeGNiaUFnSUNCZExGeHVJQ0FnSUc1aGJXVTZJQ2RCUWtsRGFHRnVaMlZrSnl4Y2JpQWdJQ0IwZVhCbE9pQW5aWFpsYm5RbkxGeHVJQ0I5TEZ4dUlDQjdYRzRnSUNBZ1lXNXZibmx0YjNWek9pQm1ZV3h6WlN4Y2JpQWdJQ0JwYm5CMWRITTZJRnRjYmlBZ0lDQWdJSHNnYVc1a1pYaGxaRG9nZEhKMVpTd2dibUZ0WlRvZ0oyNXZaR1VuTENCMGVYQmxPaUFuWW5sMFpYTXpNaWNnZlN4Y2JpQWdJQ0FnSUhzZ2FXNWtaWGhsWkRvZ1ptRnNjMlVzSUc1aGJXVTZJQ2Q0Snl3Z2RIbHdaVG9nSjJKNWRHVnpNekluSUgwc1hHNGdJQ0FnSUNCN0lHbHVaR1Y0WldRNklHWmhiSE5sTENCdVlXMWxPaUFuZVNjc0lIUjVjR1U2SUNkaWVYUmxjek15SnlCOUxGeHVJQ0FnSUYwc1hHNGdJQ0FnYm1GdFpUb2dKMUIxWW10bGVVTm9ZVzVuWldRbkxGeHVJQ0FnSUhSNWNHVTZJQ2RsZG1WdWRDY3NYRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmhibTl1ZVcxdmRYTTZJR1poYkhObExGeHVJQ0FnSUdsdWNIVjBjem9nVzF4dUlDQWdJQ0FnZXlCcGJtUmxlR1ZrT2lCMGNuVmxMQ0J1WVcxbE9pQW5ibTlrWlNjc0lIUjVjR1U2SUNkaWVYUmxjek15SnlCOUxGeHVJQ0FnSUNBZ2V5QnBibVJsZUdWa09pQm1ZV3h6WlN3Z2JtRnRaVG9nSjJsdVpHVjRaV1JMWlhrbkxDQjBlWEJsT2lBbmMzUnlhVzVuSnlCOUxGeHVJQ0FnSUNBZ2V5QnBibVJsZUdWa09pQm1ZV3h6WlN3Z2JtRnRaVG9nSjJ0bGVTY3NJSFI1Y0dVNklDZHpkSEpwYm1jbklIMHNYRzRnSUNBZ1hTeGNiaUFnSUNCdVlXMWxPaUFuVkdWNGRFTm9ZVzVuWldRbkxGeHVJQ0FnSUhSNWNHVTZJQ2RsZG1WdWRDY3NYRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmhibTl1ZVcxdmRYTTZJR1poYkhObExGeHVJQ0FnSUdsdWNIVjBjem9nVzF4dUlDQWdJQ0FnZXlCcGJtUmxlR1ZrT2lCMGNuVmxMQ0J1WVcxbE9pQW5ibTlrWlNjc0lIUjVjR1U2SUNkaWVYUmxjek15SnlCOUxGeHVJQ0FnSUNBZ2V5QnBibVJsZUdWa09pQm1ZV3h6WlN3Z2JtRnRaVG9nSjJoaGMyZ25MQ0IwZVhCbE9pQW5ZbmwwWlhNbklIMHNYRzRnSUNBZ1hTeGNiaUFnSUNCdVlXMWxPaUFuUTI5dWRHVnVkR2hoYzJoRGFHRnVaMlZrSnl4Y2JpQWdJQ0IwZVhCbE9pQW5aWFpsYm5RbkxGeHVJQ0I5TEZ4dVhUdGNibVY0Y0c5eWRDQmtaV1poZFd4MElHRmlhVHRjYmlJc0ltbHRjRzl5ZENCdVlXMWxhR0Z6YUNCbWNtOXRJQ2RsZEdndFpXNXpMVzVoYldWb1lYTm9KenRjYm1sdGNHOXlkQ0JGZEdnZ1puSnZiU0FuWlhSb2FuTXRjWFZsY25rbk8xeHVhVzF3YjNKMElFVjBhRU52Ym5SeVlXTjBJR1p5YjIwZ0oyVjBhR3B6TFdOdmJuUnlZV04wSnp0Y2JtbHRjRzl5ZENCamIyNTBaVzUwU0dGemFDQm1jbTl0SUNkQVpXNXpaRzl0WVdsdWN5OWpiMjUwWlc1MExXaGhjMmduTzF4dWFXMXdiM0owSUhKbFoybHpkSEo1UVdKcElHWnliMjBnSnk0dlkyOXVkSEpoWTNSekwzSmxaMmx6ZEhKNUp6dGNibWx0Y0c5eWRDQnlaWE52YkhabGNrRmlhU0JtY205dElDY3VMMk52Ym5SeVlXTjBjeTl5WlhOdmJIWmxjaWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdGemVXNWpJR1oxYm1OMGFXOXVJSEpsYzI5c2RtVkZibk5VYjBsd1puTkRiMjUwWlc1MFNXUW9leUJ3Y205MmFXUmxjaXdnYm1GdFpTQjlLU0I3WEc0Z0lHTnZibk4wSUdWMGFDQTlJRzVsZHlCRmRHZ29jSEp2ZG1sa1pYSXBPMXh1SUNCamIyNXpkQ0JvWVhOb0lEMGdibUZ0WldoaGMyZ3VhR0Z6YUNodVlXMWxLVHRjYmlBZ1kyOXVjM1FnWTI5dWRISmhZM1FnUFNCdVpYY2dSWFJvUTI5dWRISmhZM1FvWlhSb0tUdGNiaUFnTHk4Z2JHOXZhM1Z3SUhKbFoybHpkSEo1WEc0Z0lHTnZibk4wSUdOb1lXbHVTV1FnUFNCT2RXMWlaWEl1Y0dGeWMyVkpiblFvWVhkaGFYUWdaWFJvTG01bGRGOTJaWEp6YVc5dUtDa3NJREV3S1R0Y2JpQWdZMjl1YzNRZ2NtVm5hWE4wY25sQlpHUnlaWE56SUQwZ1oyVjBVbVZuYVhOMGNubEdiM0pEYUdGcGJrbGtLR05vWVdsdVNXUXBPMXh1SUNCcFppQW9JWEpsWjJsemRISjVRV1JrY21WemN5a2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2JpQWdJQ0FnSUdCRmJuTkpjR1p6VW1WemIyeDJaWElnTFNCdWJ5QnJibTkzYmlCbGJuTXRhWEJtY3lCeVpXZHBjM1J5ZVNCbWIzSWdZMmhoYVc1SlpDQmNJaVI3WTJoaGFXNUpaSDFjSW1Bc1hHNGdJQ0FnS1R0Y2JpQWdmVnh1SUNCamIyNXpkQ0JTWldkcGMzUnllU0E5SUdOdmJuUnlZV04wS0hKbFoybHpkSEo1UVdKcEtTNWhkQ2h5WldkcGMzUnllVUZrWkhKbGMzTXBPMXh1SUNBdkx5QnNiMjlyZFhBZ2NtVnpiMngyWlhKY2JpQWdZMjl1YzNRZ2NtVnpiMngyWlhKTWIyOXJkWEJTWlhOMWJIUWdQU0JoZDJGcGRDQlNaV2RwYzNSeWVTNXlaWE52YkhabGNpaG9ZWE5vS1R0Y2JpQWdZMjl1YzNRZ2NtVnpiMngyWlhKQlpHUnlaWE56SUQwZ2NtVnpiMngyWlhKTWIyOXJkWEJTWlhOMWJIUmJNRjA3WEc0Z0lHbG1JQ2hvWlhoV1lXeDFaVWx6Ulcxd2RIa29jbVZ6YjJ4MlpYSkJaR1J5WlhOektTa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1JXNXpTWEJtYzFKbGMyOXNkbVZ5SUMwZ2JtOGdjbVZ6YjJ4MlpYSWdabTkxYm1RZ1ptOXlJRzVoYldVZ1hDSWtlMjVoYldWOVhDSmdLVHRjYmlBZ2ZWeHVJQ0JqYjI1emRDQlNaWE52YkhabGNpQTlJR052Ym5SeVlXTjBLSEpsYzI5c2RtVnlRV0pwS1M1aGRDaHlaWE52YkhabGNrRmtaSEpsYzNNcE8xeHVYRzRnSUdOdmJuTjBJR2x6UlVsUU1UVTNOME52YlhCc2FXRnVkQ0E5SUdGM1lXbDBJRkpsYzI5c2RtVnlMbk4xY0hCdmNuUnpTVzUwWlhKbVlXTmxLQ2N3ZUdKak1XTTFPR1F4SnlrN1hHNGdJR052Ym5OMElHbHpUR1ZuWVdONVVtVnpiMngyWlhJZ1BTQmhkMkZwZENCU1pYTnZiSFpsY2k1emRYQndiM0owYzBsdWRHVnlabUZqWlNnbk1IaGtPRE00T1dSak5TY3BPMXh1SUNCcFppQW9hWE5GU1ZBeE5UYzNRMjl0Y0d4cFlXNTBXekJkS1NCN1hHNGdJQ0FnWTI5dWMzUWdZMjl1ZEdWdWRFeHZiMnQxY0ZKbGMzVnNkQ0E5SUdGM1lXbDBJRkpsYzI5c2RtVnlMbU52Ym5SbGJuUm9ZWE5vS0doaGMyZ3BPMXh1SUNBZ0lHTnZibk4wSUhKaGQwTnZiblJsYm5SSVlYTm9JRDBnWTI5dWRHVnVkRXh2YjJ0MWNGSmxjM1ZzZEZzd1hUdGNiaUFnSUNCc1pYUWdaR1ZqYjJSbFpFTnZiblJsYm5SSVlYTm9JRDBnWTI5dWRHVnVkRWhoYzJndVpHVmpiMlJsS0hKaGQwTnZiblJsYm5SSVlYTm9LVHRjYmlBZ0lDQmpiMjV6ZENCMGVYQmxJRDBnWTI5dWRHVnVkRWhoYzJndVoyVjBRMjlrWldNb2NtRjNRMjl1ZEdWdWRFaGhjMmdwTzF4dVhHNGdJQ0FnYVdZZ0tIUjVjR1VnUFQwOUlDZHBjR1p6TFc1ekp5QjhmQ0IwZVhCbElEMDlQU0FuYVhCdWN5MXVjeWNwSUh0Y2JpQWdJQ0FnSUdSbFkyOWtaV1JEYjI1MFpXNTBTR0Z6YUNBOVhHNGdJQ0FnSUNBZ0lHTnZiblJsYm5SSVlYTm9MbWhsYkhCbGNuTXVZMmxrVmpCVWIxWXhRbUZ6WlRNeUtHUmxZMjlrWldSRGIyNTBaVzUwU0dGemFDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhzZ2RIbHdaU3dnYUdGemFEb2daR1ZqYjJSbFpFTnZiblJsYm5SSVlYTm9JSDA3WEc0Z0lIMWNiaUFnYVdZZ0tHbHpUR1ZuWVdONVVtVnpiMngyWlhKYk1GMHBJSHRjYmlBZ0lDQXZMeUJzYjI5cmRYQWdZMjl1ZEdWdWRDQnBaRnh1SUNBZ0lHTnZibk4wSUdOdmJuUmxiblJNYjI5cmRYQlNaWE4xYkhRZ1BTQmhkMkZwZENCU1pYTnZiSFpsY2k1amIyNTBaVzUwS0doaGMyZ3BPMXh1SUNBZ0lHTnZibk4wSUdOdmJuUmxiblFnUFNCamIyNTBaVzUwVEc5dmEzVndVbVZ6ZFd4MFd6QmRPMXh1SUNBZ0lHbG1JQ2hvWlhoV1lXeDFaVWx6Ulcxd2RIa29ZMjl1ZEdWdWRDa3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNiaUFnSUNBZ0lDQWdZRVZ1YzBsd1puTlNaWE52YkhabGNpQXRJRzV2SUdOdmJuUmxiblFnU1VRZ1ptOTFibVFnWm05eUlHNWhiV1VnWENJa2UyNWhiV1Y5WENKZ0xGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSHNnZEhsd1pUb2dKM04zWVhKdExXNXpKeXdnYUdGemFEb2dZMjl1ZEdWdWRDNXpiR2xqWlNneUtTQjlPMXh1SUNCOVhHNGdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNiaUFnSUNCZ1JXNXpTWEJtYzFKbGMyOXNkbVZ5SUMwZ2RHaGxJSEpsYzI5c2RtVnlJR1p2Y2lCdVlXMWxJRndpSkh0dVlXMWxmVndpSUdseklHNXZkQ0J6ZEdGdVpHRnlaQ3dnYVhRZ2MyaHZkV3hrSUdWcGRHaGxjaUJ6ZFhCd2IzSjBjeUJqYjI1MFpXNTBhR0Z6YUNncElHOXlJR052Ym5SbGJuUW9LV0FzWEc0Z0lDazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHaGxlRlpoYkhWbFNYTkZiWEIwZVNoMllXeDFaU2tnZTF4dUlDQnlaWFIxY200Z1cxeHVJQ0FnSUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0J1ZFd4c0xGeHVJQ0FnSUNjd2VDY3NYRzRnSUNBZ0p6QjRNQ2NzWEc0Z0lDQWdKekI0TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TUNjc1hHNGdJRjB1YVc1amJIVmtaWE1vZG1Gc2RXVXBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGSmxkSFZ5Ym5NZ2RHaGxJSEpsWjJsemRISjVJR0ZrWkhKbGMzTWdabTl5SUhSb1pTQm5hWFpsYmlCamFHRnBiaUJKUkZ4dUlDcGNiaUFxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JqYUdGcGJrbGtJQzBnZEdobElHTm9ZV2x1SUVsRVhHNGdLaUJBY21WMGRYSnVjeUI3YzNSeWFXNW5mRzUxYkd4OUlIUm9aU0J5WldkcGMzUnllU0JoWkdSeVpYTnpJR2xtSUd0dWIzZHVMQ0J1ZFd4c0lHOTBhR1Z5ZDJselpWeHVJQ292WEc1bWRXNWpkR2x2YmlCblpYUlNaV2RwYzNSeWVVWnZja05vWVdsdVNXUW9ZMmhoYVc1SlpDa2dlMXh1SUNCemQybDBZMmdnS0dOb1lXbHVTV1FwSUh0Y2JpQWdJQ0JqWVhObElERTZYRzRnSUNBZ1kyRnpaU0F6T2x4dUlDQWdJR05oYzJVZ05EcGNiaUFnSUNCallYTmxJRFU2WEc0Z0lDQWdZMkZ6WlNBMk9seHVJQ0FnSUNBZ0x5OGdUV0ZwYm01bGRDQmhibVFnUjI5bGNteHBMQ0J5WlhOd1pXTjBhWFpsYkhrc0lIVnpaU0IwYUdVZ2MyRnRaU0JoWkdSeVpYTnpYRzRnSUNBZ0lDQnlaWFIxY200Z0p6QjRNREF3TURBd01EQXdNREJETWtVd056UmxRelk1UVRCa1JtSXlPVGszUWtFMlF6ZGtNbVV4WlNjN1hHNGdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ1ltRnpaVE15Ulc1amIyUmxJR1p5YjIwZ0oySmhjMlV6TWkxbGJtTnZaR1VuTzF4dWFXMXdiM0owSUdKaGMyVTJOQ0JtY205dElDZGlZWE5sTmpRdGFuTW5PMXh1YVcxd2IzSjBJR0p5YjNkelpYSWdabkp2YlNBbmQyVmlaWGgwWlc1emFXOXVMWEJ2YkhsbWFXeHNKenRjYmx4dWFXMXdiM0owSUdkbGRFWmxkR05vVjJsMGFGUnBiV1Z2ZFhRZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmMyaGhjbVZrTDIxdlpIVnNaWE12Wm1WMFkyZ3RkMmwwYUMxMGFXMWxiM1YwSnp0Y2JtbHRjRzl5ZENCeVpYTnZiSFpsUlc1elZHOUpjR1p6UTI5dWRHVnVkRWxrSUdaeWIyMGdKeTR2Y21WemIyeDJaWEluTzF4dVhHNWpiMjV6ZENCbVpYUmphRmRwZEdoVWFXMWxiM1YwSUQwZ1oyVjBSbVYwWTJoWGFYUm9WR2x0Wlc5MWRDZ3BPMXh1WEc1amIyNXpkQ0J6ZFhCd2IzSjBaV1JVYjNCTVpYWmxiRVJ2YldGcGJuTWdQU0JiSjJWMGFDZGRPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJ6WlhSMWNFVnVjMGx3Wm5OU1pYTnZiSFpsY2loN1hHNGdJSEJ5YjNacFpHVnlMRnh1SUNCblpYUkRkWEp5Wlc1MFEyaGhhVzVKWkN4Y2JpQWdaMlYwU1hCbWMwZGhkR1YzWVhrc1hHNTlLU0I3WEc0Z0lDOHZJR2x1YzNSaGJHd2diR2x6ZEdWdVpYSmNiaUFnWTI5dWMzUWdkWEpzVUdGMGRHVnlibk1nUFNCemRYQndiM0owWldSVWIzQk1aWFpsYkVSdmJXRnBibk11YldGd0tDaDBiR1FwSUQwK0lHQXFPaTh2S2k0a2UzUnNaSDB2S21BcE8xeHVJQ0JpY205M2MyVnlMbmRsWWxKbGNYVmxjM1F1YjI1RmNuSnZjazlqWTNWeWNtVmtMbUZrWkV4cGMzUmxibVZ5S0hkbFlsSmxjWFZsYzNSRWFXUkdZV2xzTENCN1hHNGdJQ0FnZFhKc2N6b2dkWEpzVUdGMGRHVnlibk1zWEc0Z0lDQWdkSGx3WlhNNklGc25iV0ZwYmw5bWNtRnRaU2RkTEZ4dUlDQjlLVHRjYmx4dUlDQXZMeUJ5WlhSMWNtNGdZWEJwSUc5aWFtVmpkRnh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJQzh2SUhWdWFXNXpkR0ZzYkNCc2FYTjBaVzVsY2x4dUlDQWdJSEpsYlc5MlpTZ3BJSHRjYmlBZ0lDQWdJR0p5YjNkelpYSXVkMlZpVW1WeGRXVnpkQzV2YmtWeWNtOXlUMk5qZFhKeVpXUXVjbVZ0YjNabFRHbHpkR1Z1WlhJb2QyVmlVbVZ4ZFdWemRFUnBaRVpoYVd3cE8xeHVJQ0FnSUgwc1hHNGdJSDA3WEc1Y2JpQWdZWE41Ym1NZ1puVnVZM1JwYjI0Z2QyVmlVbVZ4ZFdWemRFUnBaRVpoYVd3b1pHVjBZV2xzY3lrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnZEdGaVNXUXNJSFZ5YkNCOUlEMGdaR1YwWVdsc2N6dGNiaUFnSUNBdkx5QnBaMjV2Y21VZ2NtVnhkV1Z6ZEhNZ2RHaGhkQ0JoY21VZ2JtOTBJR0Z6YzI5amFXRjBaV1FnZDJsMGFDQjBZV0p6WEc0Z0lDQWdMeThnYjI1c2VTQmhkSFJsYlhCMElFVk9VeUJ5WlhOdmJIVjBhVzl1SUc5dUlHMWhhVzV1WlhSY2JpQWdJQ0JwWmlBb2RHRmlTV1FnUFQwOUlDMHhJSHg4SUdkbGRFTjFjbkpsYm5SRGFHRnBia2xrS0NrZ0lUMDlJQ2N3ZURFbktTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUhCaGNuTmxJR1Z1Y3lCdVlXMWxYRzRnSUNBZ1kyOXVjM1FnZXlCb2IzTjBibUZ0WlRvZ2JtRnRaU3dnY0dGMGFHNWhiV1VzSUhObFlYSmphQ3dnYUdGemFEb2dabkpoWjIxbGJuUWdmU0E5SUc1bGR5QlZVa3dvZFhKc0tUdGNiaUFnSUNCamIyNXpkQ0JrYjIxaGFXNVFZWEowY3lBOUlHNWhiV1V1YzNCc2FYUW9KeTRuS1R0Y2JpQWdJQ0JqYjI1emRDQjBiM0JNWlhabGJFUnZiV0ZwYmlBOUlHUnZiV0ZwYmxCaGNuUnpXMlJ2YldGcGJsQmhjblJ6TG14bGJtZDBhQ0F0SURGZE8xeHVJQ0FnSUM4dklHbG1JSFZ1YzNWd2NHOXlkR1ZrSUZSTVJDd2dZV0p2Y25SY2JpQWdJQ0JwWmlBb0lYTjFjSEJ2Y25SbFpGUnZjRXhsZG1Wc1JHOXRZV2x1Y3k1cGJtTnNkV1JsY3loMGIzQk1aWFpsYkVSdmJXRnBiaWtwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdiM1JvWlhKM2FYTmxJR0YwZEdWdGNIUWdjbVZ6YjJ4MlpWeHVJQ0FnSUdGMGRHVnRjSFJTWlhOdmJIWmxLSHNnZEdGaVNXUXNJRzVoYldVc0lIQmhkR2h1WVcxbExDQnpaV0Z5WTJnc0lHWnlZV2R0Wlc1MElIMHBPMXh1SUNCOVhHNWNiaUFnWVhONWJtTWdablZ1WTNScGIyNGdZWFIwWlcxd2RGSmxjMjlzZG1Vb2V5QjBZV0pKWkN3Z2JtRnRaU3dnY0dGMGFHNWhiV1VzSUhObFlYSmphQ3dnWm5KaFoyMWxiblFnZlNrZ2UxeHVJQ0FnSUdOdmJuTjBJR2x3Wm5OSFlYUmxkMkY1SUQwZ1oyVjBTWEJtYzBkaGRHVjNZWGtvS1R0Y2JseHVJQ0FnSUdKeWIzZHpaWEl1ZEdGaWN5NTFjR1JoZEdVb2RHRmlTV1FzSUhzZ2RYSnNPaUJnYkc5aFpHbHVaeTVvZEcxc1lDQjlLVHRjYmlBZ0lDQnNaWFFnZFhKc0lEMGdZR2gwZEhCek9pOHZZWEJ3TG1WdWN5NWtiMjFoYVc1ekwyNWhiV1V2Skh0dVlXMWxmV0E3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSHNnZEhsd1pTd2dhR0Z6YUNCOUlEMGdZWGRoYVhRZ2NtVnpiMngyWlVWdWMxUnZTWEJtYzBOdmJuUmxiblJKWkNoN1hHNGdJQ0FnSUNBZ0lIQnliM1pwWkdWeUxGeHVJQ0FnSUNBZ0lDQnVZVzFsTEZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCcFppQW9kSGx3WlNBOVBUMGdKMmx3Wm5NdGJuTW5JSHg4SUhSNWNHVWdQVDA5SUNkcGNHNXpMVzV6SnlrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYTnZiSFpsWkZWeWJDQTlJR0JvZEhSd2N6b3ZMeVI3YUdGemFIMHVKSHQwZVhCbExuTnNhV05sS0Z4dUlDQWdJQ0FnSUNBZ0lEQXNYRzRnSUNBZ0lDQWdJQ0FnTkN4Y2JpQWdJQ0FnSUNBZ0tYMHVKSHRwY0daelIyRjBaWGRoZVgwa2UzQmhkR2h1WVcxbGZTUjdjMlZoY21Ob0lIeDhJQ2NuZlNSN1puSmhaMjFsYm5RZ2ZId2dKeWQ5WUR0Y2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QmphR1ZqYXlCcFppQnBjR1p6SUdkaGRHVjNZWGtnYUdGeklISmxjM1ZzZEZ4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUhKbGMzQnZibk5sSUQwZ1lYZGhhWFFnWm1WMFkyaFhhWFJvVkdsdFpXOTFkQ2h5WlhOdmJIWmxaRlZ5YkN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYldWMGFHOWtPaUFuU0VWQlJDY3NYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGMzQnZibk5sTG5OMFlYUjFjeUE5UFQwZ01qQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjFjbXdnUFNCeVpYTnZiSFpsWkZWeWJEdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGxjbklwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1VnUFQwOUlDZHpkMkZ5YlMxdWN5Y3BJSHRjYmlBZ0lDQWdJQ0FnZFhKc0lEMGdZR2gwZEhCek9pOHZjM2RoY20wdFoyRjBaWGRoZVhNdWJtVjBMMko2ZWpvdkpIdG9ZWE5vZlNSN2NHRjBhRzVoYldWOUpIdGNiaUFnSUNBZ0lDQWdJQ0J6WldGeVkyZ2dmSHdnSnlkY2JpQWdJQ0FnSUNBZ2ZTUjdabkpoWjIxbGJuUWdmSHdnSnlkOVlEdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3WlNBOVBUMGdKMjl1YVc5dUp5QjhmQ0IwZVhCbElEMDlQU0FuYjI1cGIyNHpKeWtnZTF4dUlDQWdJQ0FnSUNCMWNtd2dQU0JnYUhSMGNEb3ZMeVI3YUdGemFIMHViMjVwYjI0a2UzQmhkR2h1WVcxbGZTUjdjMlZoY21Ob0lIeDhJQ2NuZlNSN1puSmhaMjFsYm5RZ2ZId2dKeWQ5WUR0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaU0E5UFQwZ0ozcGxjbTl1WlhRbktTQjdYRzRnSUNBZ0lDQWdJSFZ5YkNBOUlHQm9kSFJ3T2k4dk1USTNMakF1TUM0eE9qUXpNVEV3THlSN2FHRnphSDBrZTNCaGRHaHVZVzFsZlNSN2MyVmhjbU5vSUh4OElDY25mU1I3WEc0Z0lDQWdJQ0FnSUNBZ1puSmhaMjFsYm5RZ2ZId2dKeWRjYmlBZ0lDQWdJQ0FnZldBN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1VnUFQwOUlDZHphM2x1WlhRdGJuTW5LU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJoWkdSbFpDQTlJR2hoYzJndWNHRmtSVzVrS0doaGMyZ3ViR1Z1WjNSb0lDc2dOQ0F0SUNob1lYTm9MbXhsYm1kMGFDQWxJRFFwTENBblBTY3BPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmtaV052WkdWa0lEMGdZbUZ6WlRZMExuUnZRbmwwWlVGeWNtRjVLSEJoWkdSbFpDazdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiM0IwYVc5dWN5QTlJSHNnY0dGa1pHbHVaem9nWm1Gc2MyVWdmVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZbUZ6WlRNeVJXNWpiMlJsWkZOcmVXeHBibXNnUFNCaVlYTmxNekpGYm1OdlpHVW9YRzRnSUNBZ0lDQWdJQ0FnWkdWamIyUmxaQ3hjYmlBZ0lDQWdJQ0FnSUNBblVrWkRORFkwT0MxSVJWZ25MRnh1SUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk1zWEc0Z0lDQWdJQ0FnSUNrdWRHOU1iM2RsY2tOaGMyVW9LVHRjYmlBZ0lDQWdJQ0FnZFhKc0lEMGdZR2gwZEhCek9pOHZKSHRpWVhObE16SkZibU52WkdWa1UydDViR2x1YTMwdWMybGhjMnQ1TG01bGRDUjdjR0YwYUc1aGJXVjlKSHRjYmlBZ0lDQWdJQ0FnSUNCelpXRnlZMmdnZkh3Z0p5ZGNiaUFnSUNBZ0lDQWdmU1I3Wm5KaFoyMWxiblFnZkh3Z0p5ZDlZRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGxjbklwTzF4dUlDQWdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdJQ0JpY205M2MyVnlMblJoWW5NdWRYQmtZWFJsS0hSaFlrbGtMQ0I3SUhWeWJDQjlLVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0I3SUdOc2IyNWxSR1ZsY0NCOUlHWnliMjBnSjJ4dlpHRnphQ2M3WEc1Y2JpOHZJRlJvYVhNZ2QybHNiQ0JqY21WaGRHVWdZVzRnYjJKcVpXTjBJSFJvWVhRZ2NtVndjbVZ6Wlc1MGN5QjBhR1VnYzNSeWRXTjBkWEpsSUc5bUlIUm9aU0JuYVhabGJpQnZZbXBsWTNSY2JpOHZJR2wwSUhKbGNHeGhZMlZ6SUdGc2JDQjJZV3gxWlhNZ2QybDBhQ0IwYUdVZ2NtVnpkV3gwSUc5bUlIUm9aV2x5SUhSNWNHVmNibHh1THk4Z2UxeHVMeThnSUNCY0ltUmhkR0ZjSWpvZ2UxeHVMeThnSUNBZ0lGd2lRM1Z5Y21WdVkzbERiMjUwY205c2JHVnlYQ0k2SUh0Y2JpOHZJQ0FnSUNBZ0lGd2lZMjl1ZG1WeWMybHZia1JoZEdWY0lqb2dYQ0p1ZFcxaVpYSmNJaXhjYmk4dklDQWdJQ0FnSUZ3aVkyOXVkbVZ5YzJsdmJsSmhkR1ZjSWpvZ1hDSnVkVzFpWlhKY0lpeGNiaTh2SUNBZ0lDQWdJRndpWTNWeWNtVnVkRU4xY25KbGJtTjVYQ0k2SUZ3aWMzUnlhVzVuWENKY2JpOHZJQ0FnSUNCOVhHNHZMeUI5WEc1Y2JpOHFLbHh1SUNvZ1EzSmxZWFJsY3lCaGJpQnZZbXBsWTNRZ2RHaGhkQ0J5WlhCeVpYTmxiblJ6SUhSb1pTQnpkSEoxWTNSMWNtVWdiMllnZEdobElHZHBkbVZ1SUc5aWFtVmpkQzRnU1hRZ2NtVndiR0ZqWlhNZ1lXeHNJSFpoYkhWbGN5QjNhWFJvSUhSb1pTQnlaWE4xYkhRZ2IyWWdkR2hsYVhKY2JpQXFJSFI1Y0dVdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUc5aWFpQXRJRlJvWlNCdlltcGxZM1FnWm05eUlIZG9hV05vSUdFZ0ozTjBjblZqZEhWeVpTY2dkMmxzYkNCaVpTQnlaWFIxY201bFpDNGdWWE4xWVd4c2VTQmhJSEJzWVdsdUlHOWlhbVZqZENCaGJtUWdibTkwSUdFZ1kyeGhjM011WEc0Z0tpQkFjbVYwZFhKdWN5QjdiMkpxWldOMGZTQlVhR1VnWENKdFlYQndaV1JjSWlCMlpYSnphVzl1SUc5bUlHRWdaR1ZsY0NCamJHOXVaU0J2WmlCMGFHVWdjR0Z6YzJWa0lHOWlhbVZqZEN3Z2QybDBhQ0JsWVdOb0lHNXZiaTF2WW1wbFkzUWdjSEp2Y0dWeWRIa2dkbUZzZFdWY2JpQXFJSEpsY0d4aFkyVmtJSGRwZEdnZ2RHaGxJR3BoZG1GelkzSnBjSFFnZEhsd1pTQnZaaUIwYUdGMElIWmhiSFZsTGx4dUlDb3ZYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQm5aWFJQWW1wVGRISjFZM1IxY21Vb2IySnFLU0I3WEc0Z0lHTnZibk4wSUhOMGNuVmpkSFZ5WlNBOUlHTnNiMjVsUkdWbGNDaHZZbW9wTzF4dUlDQnlaWFIxY200Z1pHVmxjRTFoY0NoemRISjFZM1IxY21Vc0lDaDJZV3gxWlNrZ1BUNGdlMXh1SUNBZ0lISmxkSFZ5YmlCMllXeDFaU0E5UFQwZ2JuVnNiQ0EvSUNkdWRXeHNKeUE2SUhSNWNHVnZaaUIyWVd4MVpUdGNiaUFnZlNrN1hHNTlYRzVjYmk4cUtseHVJQ29nVFc5a2FXWnBaWE1nWVd4c0lIUm9aU0J3Y205d1pYSjBhV1Z6SUdGdVpDQmtaV1Z3YkhrZ2JtVnpkR1ZrSUc5bUlHRWdjR0Z6YzJWa0lHOWlhbVZqZEM0Z1NYUmxjbUYwWlhNZ2NtVmpkWEp6YVhabGJIa2diM1psY2lCaGJHd2dibVZ6ZEdWa0lHOWlhbVZqZEhNZ1lXNWtYRzRnS2lCMGFHVnBjaUJ3Y205d1pYSjBhV1Z6TENCaGJtUWdZMjkyWlhKeklIUm9aU0JsYm5ScGNtVWdaR1Z3ZEdnZ2IyWWdkR2hsSUc5aWFtVmpkQzRnUVhRZ1pXRmphQ0J3Y205d1pYSjBlU0IyWVd4MVpTQjNhR2xqYUNCcGN5QnViM1FnWVc0Z2IySnFaV04wSUdseklHMXZaR2xtYVdWa0xseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2IySnFaV04wZlNCMFlYSm5aWFFnTFNCVWFHVWdiMkpxWldOMElIUnZJRzF2WkdsbWVWeHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnZG1semFYUWdMU0JVYUdVZ2JXOWthV1pwWlhJZ2RHOGdZWEJ3YkhrZ2RHOGdaV0ZqYUNCdWIyNHRiMkpxWldOMElIQnliM0JsY25SNUlIWmhiSFZsWEc0Z0tpQkFjbVYwZFhKdWN5QjdiMkpxWldOMGZTQlVhR1VnYlc5a2FXWnBaV1FnYjJKcVpXTjBYRzRnS2k5Y2JtWjFibU4wYVc5dUlHUmxaWEJOWVhBb2RHRnlaMlYwSUQwZ2UzMHNJSFpwYzJsMEtTQjdYRzRnSUU5aWFtVmpkQzVsYm5SeWFXVnpLSFJoY21kbGRDa3VabTl5UldGamFDZ29XMnRsZVN3Z2RtRnNkV1ZkS1NBOVBpQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKMjlpYW1WamRDY2dKaVlnZG1Gc2RXVWdJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJSFJoY21kbGRGdHJaWGxkSUQwZ1pHVmxjRTFoY0NoMllXeDFaU3dnZG1semFYUXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMFlYSm5aWFJiYTJWNVhTQTlJSFpwYzJsMEtIWmhiSFZsS1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1SUNCeVpYUjFjbTRnZEdGeVoyVjBPMXh1ZlZ4dUlpd2lhVzF3YjNKMElHSnliM2R6WlhJZ1puSnZiU0FuZDJWaVpYaDBaVzV6YVc5dUxYQnZiSGxtYVd4c0p6dGNibWx0Y0c5eWRDQnNiMmNnWm5KdmJTQW5iRzluYkdWMlpXd25PMXh1YVcxd2IzSjBJSHNnWTJGd2RIVnlaVVY0WTJWd2RHbHZiaUI5SUdaeWIyMGdKMEJ6Wlc1MGNua3ZZbkp2ZDNObGNpYzdYRzVwYlhCdmNuUWdleUJqYUdWamEwWnZja3hoYzNSRmNuSnZjaUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMM05vWVhKbFpDOXRiMlIxYkdWekwySnliM2R6WlhJdGNuVnVkR2x0WlM1MWRHbHNjeWM3WEc1Y2JpOHFLbHh1SUNvZ1FTQjNjbUZ3Y0dWeUlHRnliM1Z1WkNCMGFHVWdaWGgwWlc1emFXOXVKM01nYzNSdmNtRm5aU0JzYjJOaGJDQkJVRWxjYmlBcUwxeHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUlhoMFpXNXphVzl1VTNSdmNtVWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQjBhR2x6TG1selUzVndjRzl5ZEdWa0lEMGdRbTl2YkdWaGJpaGljbTkzYzJWeUxuTjBiM0poWjJVdWJHOWpZV3dwTzF4dUlDQWdJR2xtSUNnaGRHaHBjeTVwYzFOMWNIQnZjblJsWkNrZ2UxeHVJQ0FnSUNBZ2JHOW5MbVZ5Y205eUtDZFRkRzl5WVdkbElHeHZZMkZzSUVGUVNTQnViM1FnWVhaaGFXeGhZbXhsTGljcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2THlCM1pTQjFjMlVnZEdocGN5Qm1iR0ZuSUhSdklHRjJiMmxrSUdac2IyOWthVzVuSUhObGJuUnllU0IzYVhSb0lHRWdkRzl1SUc5bUlHVnljbTl5Y3pwY2JpQWdJQ0F2THlCdmJtTmxJR1JoZEdFZ2NHVnljMmx6ZEdWdVkyVWdabUZwYkhNZ2IyNWpaU0JoYm1RZ2FYUWdabXhwY0hNZ2RISjFaU0IzWlNCa2IyNG5kQ0J6Wlc1a0lHWjFjblJvWlhKY2JpQWdJQ0F2THlCa1lYUmhJSEJsY25OcGMzUmxibU5sSUdWeWNtOXljeUIwYnlCelpXNTBjbmxjYmlBZ0lDQjBhR2x6TG1SaGRHRlFaWEp6YVhOMFpXNWpaVVpoYVd4cGJtY2dQU0JtWVd4elpUdGNiaUFnZlZ4dVhHNGdJSE5sZEUxbGRHRmtZWFJoS0dsdWFYUk5aWFJoUkdGMFlTa2dlMXh1SUNBZ0lIUm9hWE11YldWMFlXUmhkR0VnUFNCcGJtbDBUV1YwWVVSaGRHRTdYRzRnSUgxY2JseHVJQ0JoYzNsdVl5QnpaWFFvYzNSaGRHVXBJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVhWE5UZFhCd2IzSjBaV1FwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjYmlBZ0lDQWdJQ0FnSjAxbGRHRnRZWE5yTFNCallXNXViM1FnY0dWeWMybHpkQ0J6ZEdGMFpTQjBieUJzYjJOaGJDQnpkRzl5WlNCaGN5QjBhR2x6SUdKeWIzZHpaWElnWkc5bGN5QnViM1FnYzNWd2NHOXlkQ0IwYUdseklHRmpkR2x2Ymljc1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb0lYTjBZWFJsS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjAxbGRHRk5ZWE5ySUMwZ2RYQmtZWFJsWkNCemRHRjBaU0JwY3lCdGFYTnphVzVuSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNnaGRHaHBjeTV0WlhSaFpHRjBZU2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FuVFdWMFlVMWhjMnNnTFNCdFpYUmhaR0YwWVNCdGRYTjBJR0psSUhObGRDQnZiaUJwYm5OMFlXNWpaU0J2WmlCRmVIUmxibk5wYjI1VGRHOXlaU0JpWldadmNtVWdZMkZzYkdsdVp5QmNJbk5sZEZ3aUp5eGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQXZMeUIzWlNCbWIzSnRZWFFnZEdobElHUmhkR0VnWm05eUlITjBiM0poWjJVZ1lYTWdZVzRnYjJKcVpXTjBJSGRwZEdnZ2RHaGxJRndpWkdGMFlWd2lJR3RsZVNCbWIzSWdkR2hsSUdOdmJuUnliMnhzWlhJZ2MzUmhkR1VnYjJKcVpXTjBYRzRnSUNBZ0lDQXZMeUJoYm1RZ2RHaGxJRndpYldWMFlWd2lJR3RsZVNCbWIzSWdZU0J0WlhSaFpHRjBZU0J2WW1wbFkzUWdZMjl1ZEdGcGJtbHVaeUJoSUhabGNuTnBiMjRnYm5WdFltVnlJSFJvWVhRZ2RISmhZMnR6SUdodmR5QjBhR1VnWkdGMFlTQnphR0Z3WlZ4dUlDQWdJQ0FnTHk4Z2FHRnpJR05vWVc1blpXUWdkWE5wYm1jZ2JXbG5jbUYwYVc5dWN5QjBieUJoWkdGd2RDQjBieUJpWVdOcmQyRnlaSE1nYVc1amIyMXdZWFJwWW14bElHTm9ZVzVuWlhOY2JpQWdJQ0FnSUdGM1lXbDBJSFJvYVhNdVgzTmxkQ2g3SUdSaGRHRTZJSE4wWVhSbExDQnRaWFJoT2lCMGFHbHpMbTFsZEdGa1lYUmhJSDBwTzF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WkdGMFlWQmxjbk5wYzNSbGJtTmxSbUZwYkdsdVp5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0ZRWlhKemFYTjBaVzVqWlVaaGFXeHBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1a1lYUmhVR1Z5YzJsemRHVnVZMlZHWVdsc2FXNW5LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR0YwWVZCbGNuTnBjM1JsYm1ObFJtRnBiR2x1WnlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUdOaGNIUjFjbVZGZUdObGNIUnBiMjRvWlhKeUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHeHZaeTVsY25KdmNpZ25aWEp5YjNJZ2MyVjBkR2x1WnlCemRHRjBaU0JwYmlCc2IyTmhiQ0J6ZEc5eVpUb25MQ0JsY25JcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWFIxY201eklHRnNiQ0J2WmlCMGFHVWdhMlY1Y3lCamRYSnlaVzUwYkhrZ2MyRjJaV1JjYmlBZ0lDcGNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UxQnliMjFwYzJVOEtqNTlYRzRnSUNBcUwxeHVJQ0JoYzNsdVl5Qm5aWFFvS1NCN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TG1selUzVndjRzl5ZEdWa0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1emRDQnlaWE4xYkhRZ1BTQmhkMkZwZENCMGFHbHpMbDluWlhRb0tUdGNiaUFnSUNBdkx5QmxlSFJsYm5OcGIyNHVjM1J2Y21GblpTNXNiMk5oYkNCaGJIZGhlWE1nY21WMGRYSnVjeUJoYmlCdlltcGNiaUFnSUNBdkx5QnBaaUIwYUdVZ2IySnFaV04wSUdseklHVnRjSFI1TENCMGNtVmhkQ0JwZENCaGN5QjFibVJsWm1sdVpXUmNiaUFnSUNCcFppQW9hWE5GYlhCMGVTaHlaWE4xYkhRcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdZV3hzSUc5bUlIUm9aU0JyWlhseklHTjFjbkpsYm5Sc2VTQnpZWFpsWkZ4dUlDQWdLbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2IySnFaV04wZlNCMGFHVWdhMlY1TFhaaGJIVmxJRzFoY0NCbWNtOXRJR3h2WTJGc0lITjBiM0poWjJWY2JpQWdJQ292WEc0Z0lGOW5aWFFvS1NCN1hHNGdJQ0FnWTI5dWMzUWdleUJzYjJOaGJDQjlJRDBnWW5KdmQzTmxjaTV6ZEc5eVlXZGxPMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc0Z0lDQWdJQ0JzYjJOaGJDNW5aWFFvYm5Wc2JDa3VkR2hsYmlnb0x5b3FJRUIwZVhCbElIdGhibmw5SUNvdklISmxjM1ZzZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmxjbklnUFNCamFHVmphMFp2Y2t4aGMzUkZjbkp2Y2lncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHlaWE4xYkhRcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVFpYUnpJSFJvWlNCclpYa2dhVzRnYkc5allXd2djM1JoZEdWY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHOWlhaUF0SUZSb1pTQnJaWGtnZEc4Z2MyVjBYRzRnSUNBcUlFQnlaWFIxY201eklIdFFjbTl0YVhObFBIWnZhV1ErZlZ4dUlDQWdLaUJBY0hKcGRtRjBaVnh1SUNBZ0tpOWNiaUFnWDNObGRDaHZZbW9wSUh0Y2JpQWdJQ0JqYjI1emRDQjdJR3h2WTJGc0lIMGdQU0JpY205M2MyVnlMbk4wYjNKaFoyVTdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmlBZ0lDQWdJR3h2WTJGc0xuTmxkQ2h2WW1vcExuUm9aVzRvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmxjbklnUFNCamFHVmphMFp2Y2t4aGMzUkZjbkp2Y2lncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlGSmxkSFZ5Ym5NZ2QyaGxkR2hsY2lCdmNpQnViM1FnZEdobElHZHBkbVZ1SUc5aWFtVmpkQ0JqYjI1MFlXbHVjeUJ1YnlCclpYbHpYRzRnS2x4dUlDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHOWlhaUF0SUZSb1pTQnZZbXBsWTNRZ2RHOGdZMmhsWTJ0Y2JpQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmVnh1SUNvdlhHNW1kVzVqZEdsdmJpQnBjMFZ0Y0hSNUtHOWlhaWtnZTF4dUlDQnlaWFIxY200Z1QySnFaV04wTG10bGVYTW9iMkpxS1M1c1pXNW5kR2dnUFQwOUlEQTdYRzU5WEc0aUxDSnBiWEJ2Y25RZ2V5QmpjbVZoZEdWQmMzbHVZMDFwWkdSc1pYZGhjbVVnZlNCbWNtOXRJQ2RxYzI5dUxYSndZeTFsYm1kcGJtVW5PMXh1YVcxd2IzSjBJSHNnWm05eWJXRjBWSGhOWlhSaFJtOXlVbkJqVW1WemRXeDBJSDBnWm5KdmJTQW5MaTR2ZFhScGJDYzdYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJqY21WaGRHVlFaVzVrYVc1blRtOXVZMlZOYVdSa2JHVjNZWEpsS0hzZ1oyVjBVR1Z1WkdsdVowNXZibU5sSUgwcElIdGNiaUFnY21WMGRYSnVJR055WldGMFpVRnplVzVqVFdsa1pHeGxkMkZ5WlNoaGMzbHVZeUFvY21WeExDQnlaWE1zSUc1bGVIUXBJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQjdJRzFsZEdodlpDd2djR0Z5WVcxeklIMGdQU0J5WlhFN1hHNGdJQ0FnYVdZZ0tHMWxkR2h2WkNBaFBUMGdKMlYwYUY5blpYUlVjbUZ1YzJGamRHbHZia052ZFc1MEp5a2dlMXh1SUNBZ0lDQWdibVY0ZENncE8xeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6ZENCYmNHRnlZVzBzSUdKc2IyTnJVbVZtWFNBOUlIQmhjbUZ0Y3p0Y2JpQWdJQ0JwWmlBb1lteHZZMnRTWldZZ0lUMDlJQ2R3Wlc1a2FXNW5KeWtnZTF4dUlDQWdJQ0FnYm1WNGRDZ3BPMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhNdWNtVnpkV3gwSUQwZ1lYZGhhWFFnWjJWMFVHVnVaR2x1WjA1dmJtTmxLSEJoY21GdEtUdGNiaUFnZlNrN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJqY21WaGRHVlFaVzVrYVc1blZIaE5hV1JrYkdWM1lYSmxLSHNnWjJWMFVHVnVaR2x1WjFSeVlXNXpZV04wYVc5dVFubElZWE5vSUgwcElIdGNiaUFnY21WMGRYSnVJR055WldGMFpVRnplVzVqVFdsa1pHeGxkMkZ5WlNoaGMzbHVZeUFvY21WeExDQnlaWE1zSUc1bGVIUXBJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQjdJRzFsZEdodlpDd2djR0Z5WVcxeklIMGdQU0J5WlhFN1hHNGdJQ0FnYVdZZ0tHMWxkR2h2WkNBaFBUMGdKMlYwYUY5blpYUlVjbUZ1YzJGamRHbHZia0o1U0dGemFDY3BJSHRjYmlBZ0lDQWdJRzVsZUhRb0tUdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdZMjl1YzNRZ1cyaGhjMmhkSUQwZ2NHRnlZVzF6TzF4dUlDQWdJR052Ym5OMElIUjRUV1YwWVNBOUlHZGxkRkJsYm1ScGJtZFVjbUZ1YzJGamRHbHZia0o1U0dGemFDaG9ZWE5vS1R0Y2JpQWdJQ0JwWmlBb0lYUjRUV1YwWVNrZ2UxeHVJQ0FnSUNBZ2JtVjRkQ2dwTzF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYTXVjbVZ6ZFd4MElEMGdabTl5YldGMFZIaE5aWFJoUm05eVVuQmpVbVZ6ZFd4MEtIUjRUV1YwWVNrN1hHNGdJSDBwTzF4dWZWeHVJaXdpYVcxd2IzSjBJRVYyWlc1MFJXMXBkSFJsY2lCbWNtOXRJQ2RsZG1WdWRITW5PMXh1WEc0dktpcGNiaUFxSUVCMGVYQmxaR1ZtSUh0dlltcGxZM1I5SUUxcFozSmhkR2x2Ymx4dUlDb2dRSEJ5YjNCbGNuUjVJSHR1ZFcxaVpYSjlJSFpsY25OcGIyNGdMU0JVYUdVZ2JXbG5jbUYwYVc5dUlIWmxjbk5wYjI1Y2JpQXFJRUJ3Y205d1pYSjBlU0I3Um5WdVkzUnBiMjU5SUcxcFozSmhkR1VnTFNCU1pYUjFjbTV6SUdFZ2NISnZiV2x6WlNCdlppQjBhR1VnYldsbmNtRjBaV1FnWkdGMFlWeHVJQ292WEc1Y2JpOHFLbHh1SUNvZ1FIUjVjR1ZrWldZZ2UyOWlhbVZqZEgwZ1RXbG5jbUYwYjNKUGNIUnBiMjV6WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMEZ5Y21GNVBFMXBaM0poZEdsdmJqNTlJRnR0YVdkeVlYUnBiMjV6WFNBdElGUm9aU0JzYVhOMElHOW1JRzFwWjNKaGRHbHZibk1nZEc4Z1lYQndiSGxjYmlBcUlFQndjbTl3WlhKMGVTQjdiblZ0WW1WeWZTQmJaR1ZtWVhWc2RGWmxjbk5wYjI1ZElDMGdWR2hsSUhabGNuTnBiMjRnZEc4Z2RYTmxJR2x1SUhSb1pTQnBibWwwYVdGc0lITjBZWFJsWEc0Z0tpOWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1RXbG5jbUYwYjNJZ1pYaDBaVzVrY3lCRmRtVnVkRVZ0YVhSMFpYSWdlMXh1SUNBdktpcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0TmFXZHlZWFJ2Y2s5d2RHbHZibk45SUc5d2RITmNiaUFnSUNvdlhHNGdJR052Ym5OMGNuVmpkRzl5S0c5d2RITWdQU0I3ZlNrZ2UxeHVJQ0FnSUhOMWNHVnlLQ2s3WEc0Z0lDQWdZMjl1YzNRZ2JXbG5jbUYwYVc5dWN5QTlJRzl3ZEhNdWJXbG5jbUYwYVc5dWN5QjhmQ0JiWFR0Y2JpQWdJQ0F2THlCemIzSjBJRzFwWjNKaGRHbHZibk1nWW5rZ2RtVnljMmx2Ymx4dUlDQWdJSFJvYVhNdWJXbG5jbUYwYVc5dWN5QTlJRzFwWjNKaGRHbHZibk11YzI5eWRDZ29ZU3dnWWlrZ1BUNGdZUzUyWlhKemFXOXVJQzBnWWk1MlpYSnphVzl1S1R0Y2JpQWdJQ0F2THlCbmNtRmlJRzFwWjNKaGRHbHZiaUIzYVhSb0lHaHBaMmhsYzNRZ2RtVnljMmx2Ymx4dUlDQWdJR052Ym5OMElHeGhjM1JOYVdkeVlYUnBiMjRnUFNCMGFHbHpMbTFwWjNKaGRHbHZibk11YzJ4cFkyVW9MVEVwV3pCZE8xeHVJQ0FnSUM4dklIVnpaU0J6Y0dWamFXWnBaV1FnWkdWbVlYVnNkRlpsY25OcGIyNGdiM0lnYUdsbmFHVnpkQ0J0YVdkeVlYUnBiMjRnZG1WeWMybHZibHh1SUNBZ0lIUm9hWE11WkdWbVlYVnNkRlpsY25OcGIyNGdQVnh1SUNBZ0lDQWdiM0IwY3k1a1pXWmhkV3gwVm1WeWMybHZiaUI4ZkNBb2JHRnpkRTFwWjNKaGRHbHZiaUFtSmlCc1lYTjBUV2xuY21GMGFXOXVMblpsY25OcGIyNHBJSHg4SURBN1hHNGdJSDFjYmx4dUlDQXZMeUJ5ZFc0Z1lXeHNJSEJsYm1ScGJtY2diV2xuY21GMGFXOXVjeUJ2YmlCdFpYUmhJR2x1SUhCc1lXTmxYRzRnSUdGemVXNWpJRzFwWjNKaGRHVkVZWFJoS0habGNuTnBiMjVsWkVSaGRHRWdQU0IwYUdsekxtZGxibVZ5WVhSbFNXNXBkR2xoYkZOMFlYUmxLQ2twSUh0Y2JpQWdJQ0F2THlCblpYUWdZV3hzSUcxcFozSmhkR2x2Ym5NZ2RHaGhkQ0JvWVhabElHNXZkQ0I1WlhRZ1ltVmxiaUJ5ZFc1Y2JpQWdJQ0JqYjI1emRDQndaVzVrYVc1blRXbG5jbUYwYVc5dWN5QTlJSFJvYVhNdWJXbG5jbUYwYVc5dWN5NW1hV3gwWlhJb2JXbG5jbUYwYVc5dVNYTlFaVzVrYVc1bktUdGNibHh1SUNBZ0lDOHZJSEJsY21admNtMGdaV0ZqYUNCdGFXZHlZWFJwYjI1Y2JpQWdJQ0JtYjNJZ0tHTnZibk4wSUcxcFozSmhkR2x2YmlCdlppQndaVzVrYVc1blRXbG5jbUYwYVc5dWN5a2dlMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0x5OGdZWFIwWlcxd2RDQnRhV2R5WVhScGIyNGdZVzVrSUhaaGJHbGtZWFJsWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzFwWjNKaGRHVmtSR0YwWVNBOUlHRjNZV2wwSUcxcFozSmhkR2x2Ymk1dGFXZHlZWFJsS0habGNuTnBiMjVsWkVSaGRHRXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lXMXBaM0poZEdWa1JHRjBZUzVrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2ROYVdkeVlYUnZjaUF0SUcxcFozSmhkR2x2YmlCeVpYUjFjbTVsWkNCbGJYQjBlU0JrWVhSaEp5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJRzFwWjNKaGRHVmtSR0YwWVM1MlpYSnphVzl1SUNFOVBTQjFibVJsWm1sdVpXUWdKaVpjYmlBZ0lDQWdJQ0FnSUNCdGFXZHlZWFJsWkVSaGRHRXViV1YwWVM1MlpYSnphVzl1SUNFOVBTQnRhV2R5WVhScGIyNHVkbVZ5YzJsdmJseHVJQ0FnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5UV2xuY21GMGIzSWdMU0JOYVdkeVlYUnBiMjRnWkdsa0lHNXZkQ0IxY0dSaGRHVWdkbVZ5YzJsdmJpQnVkVzFpWlhJZ1kyOXljbVZqZEd4NUp5eGNiaUFnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJR0ZqWTJWd2RDQjBhR1VnYldsbmNtRjBhVzl1SUdGeklHZHZiMlJjYmlBZ0lDQWdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxYQmhjbUZ0TFhKbFlYTnphV2R1WEc0Z0lDQWdJQ0FnSUhabGNuTnBiMjVsWkVSaGRHRWdQU0J0YVdkeVlYUmxaRVJoZEdFN1hHNGdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2NtVjNjbWwwWlNCbGNuSnZjaUJ0WlhOellXZGxJSFJ2SUdGa1pDQmpiMjUwWlhoMElIZHBkR2h2ZFhRZ1kyeHZZbUpsY21sdVp5QnpkR0ZqYTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J2Y21sbmFXNWhiRVZ5Y205eVRXVnpjMkZuWlNBOUlHVnljaTV0WlhOellXZGxPMXh1SUNBZ0lDQWdJQ0JsY25JdWJXVnpjMkZuWlNBOUlHQk5aWFJoVFdGemF5Qk5hV2R5WVhScGIyNGdSWEp5YjNJZ0l5UjdiV2xuY21GMGFXOXVMblpsY25OcGIyNTlPaUFrZTI5eWFXZHBibUZzUlhKeWIzSk5aWE56WVdkbGZXQTdYRzRnSUNBZ0lDQWdJQzh2SUdWdGFYUWdaWEp5YjNJZ2FXNXpkR1ZoWkNCdlppQjBhSEp2ZHlCemJ5QmhjeUIwYnlCdWIzUWdZbkpsWVdzZ2RHaGxJSEoxYmlBb1ozSmhZMlZtZFd4c2VTQm1ZV2xzS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhRb0oyVnljbTl5Snl3Z1pYSnlLVHRjYmlBZ0lDQWdJQ0FnTHk4Z2MzUnZjQ0J0YVdkeVlYUnBibWNnWVc1a0lIVnpaU0J6ZEdGMFpTQmhjeUJwYzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZG1WeWMybHZibVZrUkdGMFlUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZG1WeWMybHZibVZrUkdGMFlUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsZEhWeWJuTWdkMmhsZEdobGNpQnZjaUJ1YjNRZ2RHaGxJRzFwWjNKaGRHbHZiaUJwY3lCd1pXNWthVzVuWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJCSUcxcFozSmhkR2x2YmlCcGN5QmpiMjV6YVdSbGNtVmtJRndpY0dWdVpHbHVaMXdpSUdsbUlHbDBJR2hoY3lCaElHaHBaMmhsY2x4dUlDQWdJQ0FxSUhabGNuTnBiMjRnYm5WdFltVnlJSFJvWVc0Z2RHaGxJR04xY25KbGJuUWdkbVZ5YzJsdmJpNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RXbG5jbUYwYVc5dWZTQnRhV2R5WVhScGIyNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMWNiaUFnSUNBZ0tpOWNiaUFnSUNCbWRXNWpkR2x2YmlCdGFXZHlZWFJwYjI1SmMxQmxibVJwYm1jb2JXbG5jbUYwYVc5dUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JXbG5jbUYwYVc5dUxuWmxjbk5wYjI0Z1BpQjJaWEp6YVc5dVpXUkVZWFJoTG0xbGRHRXVkbVZ5YzJsdmJqdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnYVc1cGRHbGhiQ0J6ZEdGMFpTQm1iM0lnZEdobElHMXBaM0poZEc5eVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQmJaR0YwWVYwZ0xTQlVhR1VnWkdGMFlTQm1iM0lnZEdobElHbHVhWFJwWVd3Z2MzUmhkR1ZjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlM3R0WlhSaE9pQjdkbVZ5YzJsdmJqb2diblZ0WW1WeWZTd2daR0YwWVRvZ1lXNTVmWDFjYmlBZ0lDb3ZYRzRnSUdkbGJtVnlZWFJsU1c1cGRHbGhiRk4wWVhSbEtHUmhkR0VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdiV1YwWVRvZ2UxeHVJQ0FnSUNBZ0lDQjJaWEp6YVc5dU9pQjBhR2x6TG1SbFptRjFiSFJXWlhKemFXOXVMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJR1JoZEdFc1hHNGdJQ0FnZlR0Y2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElHeHZaeUJtY205dElDZHNiMmRzWlhabGJDYzdYRzVwYlhCdmNuUWdaMlYwUm1WMFkyaFhhWFJvVkdsdFpXOTFkQ0JtY205dElDY3VMaTh1TGk4dUxpOXphR0Z5WldRdmJXOWtkV3hsY3k5bVpYUmphQzEzYVhSb0xYUnBiV1Z2ZFhRbk8xeHVYRzVqYjI1emRDQm1aWFJqYUZkcGRHaFVhVzFsYjNWMElEMGdaMlYwUm1WMFkyaFhhWFJvVkdsdFpXOTFkQ2dwTzF4dVhHNWpiMjV6ZENCR1NWaFVWVkpGWDFORlVsWkZVbDlJVDFOVUlEMGdKMnh2WTJGc2FHOXpkQ2M3WEc1amIyNXpkQ0JHU1ZoVVZWSkZYMU5GVWxaRlVsOVFUMUpVSUQwZ01USXpORFU3WEc1amIyNXpkQ0JHU1ZoVVZWSkZYMU5GVWxaRlVsOVZVa3dnUFNCZ2FIUjBjRG92THlSN1JrbFlWRlZTUlY5VFJWSldSVkpmU0U5VFZIMDZKSHRHU1ZoVVZWSkZYMU5GVWxaRlVsOVFUMUpVZlM5emRHRjBaUzVxYzI5dVlEdGNibHh1THlvcVhHNGdLaUJCSUhKbFlXUXRiMjVzZVNCdVpYUjNiM0pyTFdKaGMyVmtJSE4wYjNKaFoyVWdkM0poY0hCbGNseHVJQ292WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlNaV0ZrVDI1c2VVNWxkSGR2Y210VGRHOXlaU0I3WEc0Z0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJSFJvYVhNdVgybHVhWFJwWVd4cGVtVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ2RHaHBjeTVmYVc1cGRHbGhiR2w2YVc1bklEMGdkR2hwY3k1ZmFXNXBkQ2dwTzF4dUlDQWdJSFJvYVhNdVgzTjBZWFJsSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVJsWTJ4aGNtVnpJSFJvYVhNZ2MzUnZjbVVnWVhNZ1kyOXRjR0YwYVdKc1pTQjNhWFJvSUhSb1pTQmpkWEp5Wlc1MElHSnliM2R6WlhKY2JpQWdJQ292WEc0Z0lHbHpVM1Z3Y0c5eWRHVmtJRDBnZEhKMVpUdGNibHh1SUNBdktpcGNiaUFnSUNvZ1NXNXBkR2xoYkdsNlpYTWdZbmtnYkc5aFpHbHVaeUJ6ZEdGMFpTQm1jbTl0SUhSb1pTQnVaWFIzYjNKclhHNGdJQ0FxTDF4dUlDQmhjM2x1WXlCZmFXNXBkQ2dwSUh0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnY21WemNHOXVjMlVnUFNCaGQyRnBkQ0JtWlhSamFGZHBkR2hVYVcxbGIzVjBLRVpKV0ZSVlVrVmZVMFZTVmtWU1gxVlNUQ2s3WEc0Z0lDQWdJQ0JwWmlBb2NtVnpjRzl1YzJVdWIyc3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM1JoZEdVZ1BTQmhkMkZwZENCeVpYTndiMjV6WlM1cWMyOXVLQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lHeHZaeTVrWldKMVp5aGdSWEp5YjNJZ2JHOWhaR2x1WnlCdVpYUjNiM0pySUhOMFlYUmxPaUFuSkh0bGNuSnZjaTV0WlhOellXZGxmU2RnS1R0Y2JpQWdJQ0I5SUdacGJtRnNiSGtnZTF4dUlDQWdJQ0FnZEdocGN5NWZhVzVwZEdsaGJHbDZaV1FnUFNCMGNuVmxPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJSE4wWVhSbFhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRRY205dGFYTmxQRzlpYW1WamRENTlYRzRnSUNBcUwxeHVJQ0JoYzNsdVl5Qm5aWFFvS1NCN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TGw5cGJtbDBhV0ZzYVhwbFpDa2dlMXh1SUNBZ0lDQWdZWGRoYVhRZ2RHaHBjeTVmYVc1cGRHbGhiR2w2YVc1bk8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmMzUmhkR1U3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVjBJRzFsZEdGa1lYUmhMM1psY25OcGIyNGdjM1JoZEdWY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlHMWxkR0ZrWVhSaElDMGdWR2hsSUcxbGRHRmtZWFJoTDNabGNuTnBiMjRnWkdGMFlTQjBieUJ6WlhSY2JpQWdJQ292WEc0Z0lITmxkRTFsZEdGa1lYUmhLRzFsZEdGa1lYUmhLU0I3WEc0Z0lDQWdkR2hwY3k1dFpYUmhaR0YwWVNBOUlHMWxkR0ZrWVhSaE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sZENCemRHRjBaVnh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYzNSaGRHVWdMU0JVYUdVZ2MzUmhkR1VnZEc4Z2MyVjBYRzRnSUNBcUwxeHVJQ0JoYzNsdVl5QnpaWFFvYzNSaGRHVXBJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVhWE5UZFhCd2IzSjBaV1FwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjYmlBZ0lDQWdJQ0FnSjAxbGRHRnRZWE5yTFNCallXNXViM1FnY0dWeWMybHpkQ0J6ZEdGMFpTQjBieUJzYjJOaGJDQnpkRzl5WlNCaGN5QjBhR2x6SUdKeWIzZHpaWElnWkc5bGN5QnViM1FnYzNWd2NHOXlkQ0IwYUdseklHRmpkR2x2Ymljc1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb0lYTjBZWFJsS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjAxbGRHRk5ZWE5ySUMwZ2RYQmtZWFJsWkNCemRHRjBaU0JwY3lCdGFYTnphVzVuSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNnaGRHaHBjeTV0WlhSaFpHRjBZU2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FuVFdWMFlVMWhjMnNnTFNCdFpYUmhaR0YwWVNCdGRYTjBJR0psSUhObGRDQnZiaUJwYm5OMFlXNWpaU0J2WmlCRmVIUmxibk5wYjI1VGRHOXlaU0JpWldadmNtVWdZMkZzYkdsdVp5QmNJbk5sZEZ3aUp5eGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmFXNXBkR2xoYkdsNlpXUXBJSHRjYmlBZ0lDQWdJR0YzWVdsMElIUm9hWE11WDJsdWFYUnBZV3hwZW1sdVp6dGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NWZjM1JoZEdVZ1BTQjdJR1JoZEdFNklITjBZWFJsTENCdFpYUmhPaUIwYUdsekxsOXRaWFJoWkdGMFlTQjlPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnUlhabGJuUkZiV2wwZEdWeUlHWnliMjBnSjBCdFpYUmhiV0Z6YXk5ellXWmxMV1YyWlc1MExXVnRhWFIwWlhJbk8xeHVhVzF3YjNKMElFVjRkR1Z1YzJsdmJsQnNZWFJtYjNKdElHWnliMjBnSnk0dUwzQnNZWFJtYjNKdGN5OWxlSFJsYm5OcGIyNG5PMXh1WEc1amIyNXpkQ0JPVDFSSlJrbERRVlJKVDA1ZlNFVkpSMGhVSUQwZ05qSXdPMXh1WTI5dWMzUWdUazlVU1VaSlEwRlVTVTlPWDFkSlJGUklJRDBnTXpZd08xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1RrOVVTVVpKUTBGVVNVOU9YMDFCVGtGSFJWSmZSVlpGVGxSVElEMGdlMXh1SUNCUVQxQlZVRjlEVEU5VFJVUTZJQ2R2YmxCdmNIVndRMnh2YzJWa0p5eGNibjA3WEc1Y2JpOHFLbHh1SUNvZ1FTQmpiMnhzWldOMGFXOXVJRzltSUcxbGRHaHZaSE1nWm05eUlHTnZiblJ5YjJ4c2FXNW5JSFJvWlNCemFHOTNhVzVuSUdGdVpDQm9hV1JwYm1jZ2IyWWdkR2hsSUc1dmRHbG1hV05oZEdsdmJpQndiM0IxY0M1Y2JpQXFMMXh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1RtOTBhV1pwWTJGMGFXOXVUV0Z1WVdkbGNpQmxlSFJsYm1SeklFVjJaVzUwUlcxcGRIUmxjaUI3WEc0Z0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJSE4xY0dWeUtDazdYRzRnSUNBZ2RHaHBjeTV3YkdGMFptOXliU0E5SUc1bGR5QkZlSFJsYm5OcGIyNVFiR0YwWm05eWJTZ3BPMXh1SUNBZ0lIUm9hWE11Y0d4aGRHWnZjbTB1WVdSa1QyNVNaVzF2ZG1Wa1RHbHpkR1Z1WlhJb2RHaHBjeTVmYjI1WGFXNWtiM2REYkc5elpXUXVZbWx1WkNoMGFHbHpLU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1RXRnlheUIwYUdVZ2JtOTBhV1pwWTJGMGFXOXVJSEJ2Y0hWd0lHRnpJR2hoZG1sdVp5QmlaV1Z1SUdGMWRHOXRZWFJwWTJGc2JIa2dZMnh2YzJWa0xseHVJQ0FnS2x4dUlDQWdLaUJVYUdseklHeGxkSE1nZFhNZ1pHbG1abVZ5Wlc1MGFXRjBaU0JpWlhSM1pXVnVJSFJvWlNCallYTmxjeUIzYUdWeVpTQjNaU0JqYkc5elpTQjBhR1ZjYmlBZ0lDb2dibTkwYVdacFkyRjBhVzl1SUhCdmNIVndJSFl1Y3k0Z2QyaGxiaUIwYUdVZ2RYTmxjaUJqYkc5elpYTWdkR2hsSUhCdmNIVndJSGRwYm1SdmR5QmthWEpsWTNSc2VTNWNiaUFnSUNvdlhHNGdJRzFoY210QmMwRjFkRzl0WVhScFkyRnNiSGxEYkc5elpXUW9LU0I3WEc0Z0lDQWdkR2hwY3k1ZmNHOXdkWEJCZFhSdmJXRjBhV05oYkd4NVEyeHZjMlZrSUQwZ2RISjFaVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRmFYUm9aWElnWW5KcGJtZHpJR0Z1SUdWNGFYTjBhVzVuSUUxbGRHRk5ZWE5ySUc1dmRHbG1hV05oZEdsdmJpQjNhVzVrYjNjZ2FXNTBieUJtYjJOMWN5d2diM0lnWTNKbFlYUmxjeUJoSUc1bGR5QnViM1JwWm1sallYUnBiMjRnZDJsdVpHOTNMaUJPWlhkY2JpQWdJQ29nYm05MGFXWnBZMkYwYVc5dUlIZHBibVJ2ZDNNZ1lYSmxJR2RwZG1WdUlHRWdKM0J2Y0hWd0p5QjBlWEJsTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQnpaWFJEZFhKeVpXNTBVRzl3ZFhCSlpDQXRJSE5sZEhSbGNpQnZaaUJqZFhKeVpXNTBJSEJ2Y0hWd0lHbGtJR1p5YjIwZ1lYQndVM1JoZEdWRGIyNTBjbTlzYkdWeVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JqZFhKeVpXNTBVRzl3ZFhCSlpDQXRJR2xrSUc5bUlHTjFjbkpsYm5RZ2IzQmxibVZrSUcxbGRHRnRZWE5ySUhCdmNIVndJSGRwYm1SdmQxeHVJQ0FnS2k5Y2JpQWdZWE41Ym1NZ2MyaHZkMUJ2Y0hWd0tITmxkRU4xY25KbGJuUlFiM0IxY0Vsa0xDQmpkWEp5Wlc1MFVHOXdkWEJKWkNrZ2UxeHVJQ0FnSUhSb2FYTXVYM0J2Y0hWd1NXUWdQU0JqZFhKeVpXNTBVRzl3ZFhCSlpEdGNiaUFnSUNCMGFHbHpMbDl6WlhSRGRYSnlaVzUwVUc5d2RYQkpaQ0E5SUhObGRFTjFjbkpsYm5SUWIzQjFjRWxrTzF4dUlDQWdJR052Ym5OMElIQnZjSFZ3SUQwZ1lYZGhhWFFnZEdocGN5NWZaMlYwVUc5d2RYQW9ZM1Z5Y21WdWRGQnZjSFZ3U1dRcE8xeHVJQ0FnSUM4dklFSnlhVzVuSUdadlkzVnpJSFJ2SUdOb2NtOXRaU0J3YjNCMWNGeHVJQ0FnSUdsbUlDaHdiM0IxY0NrZ2UxeHVJQ0FnSUNBZ0x5OGdZbkpwYm1jZ1ptOWpkWE1nZEc4Z1pYaHBjM1JwYm1jZ1kyaHliMjFsSUhCdmNIVndYRzRnSUNBZ0lDQmhkMkZwZENCMGFHbHpMbkJzWVhSbWIzSnRMbVp2WTNWelYybHVaRzkzS0hCdmNIVndMbWxrS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdMeThnWTNKbFlYUmxJRzVsZHlCdWIzUnBabWxqWVhScGIyNGdjRzl3ZFhCY2JpQWdJQ0FnSUd4bGRDQnNaV1owSUQwZ01EdGNiaUFnSUNBZ0lHeGxkQ0IwYjNBZ1BTQXdPMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYkdGemRFWnZZM1Z6WldRZ1BTQmhkMkZwZENCMGFHbHpMbkJzWVhSbWIzSnRMbWRsZEV4aGMzUkdiMk4xYzJWa1YybHVaRzkzS0NrN1hHNGdJQ0FnSUNBZ0lDOHZJRkJ2YzJsMGFXOXVJSGRwYm1SdmR5QnBiaUIwYjNBZ2NtbG5hSFFnWTI5eWJtVnlJRzltSUd4aGMzUkdiMk4xYzJWa0lIZHBibVJ2ZHk1Y2JpQWdJQ0FnSUNBZ2RHOXdJRDBnYkdGemRFWnZZM1Z6WldRdWRHOXdPMXh1SUNBZ0lDQWdJQ0JzWldaMElEMGdiR0Z6ZEVadlkzVnpaV1F1YkdWbWRDQXJJQ2hzWVhOMFJtOWpkWE5sWkM1M2FXUjBhQ0F0SUU1UFZFbEdTVU5CVkVsUFRsOVhTVVJVU0NrN1hHNGdJQ0FnSUNCOUlHTmhkR05vSUNoZktTQjdYRzRnSUNBZ0lDQWdJQzh2SUZSb1pTQm1iMnhzYjNkcGJtY2djSEp2Y0dWeWRHbGxjeUJoY21VZ2JXOXlaU0IwYUdGdUlHeHBhMlZzZVNBd0xDQmtkV1VnZEc4Z1ltVnBibWRjYmlBZ0lDQWdJQ0FnTHk4Z2IzQmxibVZrSUdaeWIyMGdkR2hsSUdKaFkydG5jbTkxYm1RZ1kyaHliMjFsSUhCeWIyTmxjM01nWm05eUlIUm9aU0JsZUhSbGJuTnBiMjRnZEdoaGRGeHVJQ0FnSUNBZ0lDQXZMeUJvWVhNZ2JtOGdjR2g1YzJsallXd2daR2x0Wlc1emFXOXVjMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdJSE5qY21WbGJsZ3NJSE5qY21WbGJsa3NJRzkxZEdWeVYybGtkR2dnZlNBOUlIZHBibVJ2ZHp0Y2JpQWdJQ0FnSUNBZ2RHOXdJRDBnVFdGMGFDNXRZWGdvYzJOeVpXVnVXU3dnTUNrN1hHNGdJQ0FnSUNBZ0lHeGxablFnUFNCTllYUm9MbTFoZUNoelkzSmxaVzVZSUNzZ0tHOTFkR1Z5VjJsa2RHZ2dMU0JPVDFSSlJrbERRVlJKVDA1ZlYwbEVWRWdwTENBd0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdZMjl1YzNRZ2NHOXdkWEJYYVc1a2IzY2dQU0JoZDJGcGRDQjBhR2x6TG5Cc1lYUm1iM0p0TG05d1pXNVhhVzVrYjNjb2UxeHVJQ0FnSUNBZ0lDQjFjbXc2SUNkdWIzUnBabWxqWVhScGIyNHVhSFJ0YkNjc1hHNGdJQ0FnSUNBZ0lIUjVjR1U2SUNkd2IzQjFjQ2NzWEc0Z0lDQWdJQ0FnSUhkcFpIUm9PaUJPVDFSSlJrbERRVlJKVDA1ZlYwbEVWRWdzWEc0Z0lDQWdJQ0FnSUdobGFXZG9kRG9nVGs5VVNVWkpRMEZVU1U5T1gwaEZTVWRJVkN4Y2JpQWdJQ0FnSUNBZ2JHVm1kQ3hjYmlBZ0lDQWdJQ0FnZEc5d0xGeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQzh2SUVacGNtVm1iM2dnWTNWeWNtVnVkR3g1SUdsbmJtOXlaWE1nYkdWbWRDOTBiM0FnWm05eUlHTnlaV0YwWlN3Z1luVjBJR2wwSUhkdmNtdHpJR1p2Y2lCMWNHUmhkR1ZjYmlBZ0lDQWdJR2xtSUNod2IzQjFjRmRwYm1SdmR5NXNaV1owSUNFOVBTQnNaV1owSUNZbUlIQnZjSFZ3VjJsdVpHOTNMbk4wWVhSbElDRTlQU0FuWm5Wc2JITmpjbVZsYmljcElIdGNiaUFnSUNBZ0lDQWdZWGRoYVhRZ2RHaHBjeTV3YkdGMFptOXliUzUxY0dSaGRHVlhhVzVrYjNkUWIzTnBkR2x2Ymlod2IzQjFjRmRwYm1SdmR5NXBaQ3dnYkdWbWRDd2dkRzl3S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklIQmhjM01nYm1WM0lHTnlaV0YwWldRZ2NHOXdkWEFnZDJsdVpHOTNJR2xrSUhSdklHRndjRU52Ym5SeWIyeHNaWElnYzJWMGRHVnlYRzRnSUNBZ0lDQXZMeUJoYm1RZ2MzUnZjbVVnZEdobElHbGtJSFJ2SUhCeWFYWmhkR1VnZG1GeWFXRmliR1VnZEdocGN5NWZjRzl3ZFhCSlpDQm1iM0lnWm5WMGRYSmxJR0ZqWTJWemMxeHVJQ0FnSUNBZ2RHaHBjeTVmYzJWMFEzVnljbVZ1ZEZCdmNIVndTV1FvY0c5d2RYQlhhVzVrYjNjdWFXUXBPMXh1SUNBZ0lDQWdkR2hwY3k1ZmNHOXdkWEJKWkNBOUlIQnZjSFZ3VjJsdVpHOTNMbWxrTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUY5dmJsZHBibVJ2ZDBOc2IzTmxaQ2gzYVc1a2IzZEpaQ2tnZTF4dUlDQWdJR2xtSUNoM2FXNWtiM2RKWkNBOVBUMGdkR2hwY3k1ZmNHOXdkWEJKWkNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmYzJWMFEzVnljbVZ1ZEZCdmNIVndTV1FvZFc1a1pXWnBibVZrS1R0Y2JpQWdJQ0FnSUhSb2FYTXVYM0J2Y0hWd1NXUWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0IwYUdsekxtVnRhWFFvVGs5VVNVWkpRMEZVU1U5T1gwMUJUa0ZIUlZKZlJWWkZUbFJUTGxCUFVGVlFYME5NVDFORlJDd2dlMXh1SUNBZ0lDQWdJQ0JoZFhSdmJXRjBhV05oYkd4NVEyeHZjMlZrT2lCMGFHbHpMbDl3YjNCMWNFRjFkRzl0WVhScFkyRnNiSGxEYkc5elpXUXNYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSFJvYVhNdVgzQnZjSFZ3UVhWMGIyMWhkR2xqWVd4c2VVTnNiM05sWkNBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRMmhsWTJ0eklHRnNiQ0J2Y0dWdUlFMWxkR0ZOWVhOcklIZHBibVJ2ZDNNc0lHRnVaQ0J5WlhSMWNtNXpJSFJvWlNCbWFYSnpkQ0J2Ym1VZ2FYUWdabWx1WkhNZ2RHaGhkQ0JwY3lCaElHNXZkR2xtYVdOaGRHbHZiaUIzYVc1a2IzY2dLR2t1WlM0Z2FHRnpJSFJvWlZ4dUlDQWdLaUIwZVhCbElDZHdiM0IxY0NjcFhHNGdJQ0FxWEc0Z0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBcUwxeHVJQ0JoYzNsdVl5QmZaMlYwVUc5d2RYQW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2QybHVaRzkzY3lBOUlHRjNZV2wwSUhSb2FYTXVjR3hoZEdadmNtMHVaMlYwUVd4c1YybHVaRzkzY3lncE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOW5aWFJRYjNCMWNFbHVLSGRwYm1SdmQzTXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVkcGRtVnVJR0Z1SUdGeWNtRjVJRzltSUhkcGJtUnZkM01zSUhKbGRIVnlibk1nZEdobElDZHdiM0IxY0NjZ2RHaGhkQ0JvWVhNZ1ltVmxiaUJ2Y0dWdVpXUWdZbmtnVFdWMFlVMWhjMnNzSUc5eUlHNTFiR3dnYVdZZ2JtOGdjM1ZqYUNCM2FXNWtiM2NnWlhocGMzUnpMbHh1SUNBZ0tseHVJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQjNhVzVrYjNkeklDMGdRVzRnWVhKeVlYa2diMllnYjJKcVpXTjBjeUJqYjI1MFlXbHVhVzVuSUdSaGRHRWdZV0p2ZFhRZ2RHaGxJRzl3Wlc0Z1RXVjBZVTFoYzJzZ1pYaDBaVzV6YVc5dUlIZHBibVJ2ZDNNdVhHNGdJQ0FxTDF4dUlDQmZaMlYwVUc5d2RYQkpiaWgzYVc1a2IzZHpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIZHBibVJ2ZDNOY2JpQWdJQ0FnSUQ4Z2QybHVaRzkzY3k1bWFXNWtLQ2gzYVc0cElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QlNaWFIxY201eklHNXZkR2xtYVdOaGRHbHZiaUJ3YjNCMWNGeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjNhVzRnSmlZZ2QybHVMblI1Y0dVZ1BUMDlJQ2R3YjNCMWNDY2dKaVlnZDJsdUxtbGtJRDA5UFNCMGFHbHpMbDl3YjNCMWNFbGtPMXh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnT2lCdWRXeHNPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnZXlCd1pYSnRhWE56YVc5dVVuQmpUV1YwYUc5a2N5QjlJR1p5YjIwZ0owQnRaWFJoYldGemF5OXdaWEp0YVhOemFXOXVMV052Ym5SeWIyeHNaWEluTzF4dWFXMXdiM0owSUhzZ2MyVnNaV04wU0c5dmEzTWdmU0JtY205dElDZEFiV1YwWVcxaGMyc3ZjbkJqTFcxbGRHaHZaSE12WkdsemRDOTFkR2xzY3ljN1hHNXBiWEJ2Y25RZ2V5QmxkR2hGY25KdmNuTWdmU0JtY205dElDZGxkR2d0Y25CakxXVnljbTl5Y3ljN1hHNXBiWEJ2Y25RZ2V5Qm1iR0YwZEdWdUlIMGdabkp2YlNBbmJHOWtZWE5vSnp0Y2JtbHRjRzl5ZENCN0lGVk9VMVZRVUU5U1ZFVkVYMUpRUTE5TlJWUklUMFJUSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmMyaGhjbVZrTDJOdmJuTjBZVzUwY3k5dVpYUjNiM0pySnp0Y2JtbHRjRzl5ZENCc2IyTmhiRWhoYm1Sc1pYSnpJR1p5YjIwZ0p5NHZhR0Z1Wkd4bGNuTW5PMXh1WEc1amIyNXpkQ0JoYkd4SVlXNWtiR1Z5Y3lBOUlGc3VMaTVzYjJOaGJFaGhibVJzWlhKekxDQXVMaTV3WlhKdGFYTnphVzl1VW5CalRXVjBhRzlrY3k1b1lXNWtiR1Z5YzEwN1hHNWNibU52Ym5OMElHaGhibVJzWlhKTllYQWdQU0JoYkd4SVlXNWtiR1Z5Y3k1eVpXUjFZMlVvS0cxaGNDd2dhR0Z1Wkd4bGNpa2dQVDRnZTF4dUlDQm1iM0lnS0dOdmJuTjBJRzFsZEdodlpFNWhiV1VnYjJZZ2FHRnVaR3hsY2k1dFpYUm9iMlJPWVcxbGN5a2dlMXh1SUNBZ0lHMWhjQzV6WlhRb2JXVjBhRzlrVG1GdFpTd2dhR0Z1Wkd4bGNpazdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHMWhjRHRjYm4wc0lHNWxkeUJOWVhBb0tTazdYRzVjYm1OdmJuTjBJR1Y0Y0dWamRHVmtTRzl2YTA1aGJXVnpJRDBnUVhKeVlYa3Vabkp2YlNoY2JpQWdibVYzSUZObGRDaGNiaUFnSUNCbWJHRjBkR1Z1S0dGc2JFaGhibVJzWlhKekxtMWhjQ2dvZXlCb2IyOXJUbUZ0WlhNZ2ZTa2dQVDRnVDJKcVpXTjBMbXRsZVhNb2FHOXZhMDVoYldWektTa3BMRnh1SUNBcExuWmhiSFZsY3lncExGeHVLVHRjYmx4dUx5b3FYRzRnS2lCRGNtVmhkR1Z6SUdFZ2FuTnZiaTF5Y0dNdFpXNW5hVzVsSUcxcFpHUnNaWGRoY21VZ2IyWWdVbEJESUcxbGRHaHZaQ0JwYlhCc1pXMWxiblJoZEdsdmJuTXVYRzRnS2x4dUlDb2dTR0Z1Wkd4bGNuTWdZMjl1YzNWdFpTQm1kVzVqZEdsdmJuTWdkR2hoZENCb2IyOXJJR2x1ZEc4Z2RHaGxJR0poWTJ0bmNtOTFibVFzSUdGdVpDQnZibXg1SUdSbGNHVnVaRnh1SUNvZ2IyNGdkR2hsYVhJZ2MybG5ibUYwZFhKbGN5d2dibTkwSUdVdVp5NGdZMjl1ZEhKdmJHeGxjaUJwYm5SbGNtNWhiSE11WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRTWldOdmNtUThjM1J5YVc1bkxDQjFibXR1YjNkdVBuMGdhRzl2YTNNZ0xTQlNaWEYxYVhKbFpDQmNJbWh2YjJ0elhDSWdhVzUwYnlCdmRYSmNiaUFxSUdOdmJuUnliMnhzWlhKekxseHVJQ29nUUhKbGRIVnlibk1nZXloeVpYRTZJRzlpYW1WamRDd2djbVZ6T2lCdlltcGxZM1FzSUc1bGVIUTZJRVoxYm1OMGFXOXVMQ0JsYm1RNklFWjFibU4wYVc5dUtTQTlQaUIyYjJsa2ZWeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWTNKbFlYUmxUV1YwYUc5a1RXbGtaR3hsZDJGeVpTaG9iMjlyY3lrZ2UxeHVJQ0F2THlCR1lXbHNJR2x0YldWa2FXRjBaV3g1SUdsbUlIZGxJR1p2Y21kdmRDQjBieUJ3Y205MmFXUmxJR0Z1ZVNCbGVIQmxZM1JsWkNCb2IyOXJjeTVjYmlBZ1kyOXVjM1FnYldsemMybHVaMGh2YjJ0T1lXMWxjeUE5SUdWNGNHVmpkR1ZrU0c5dmEwNWhiV1Z6TG1acGJIUmxjaWhjYmlBZ0lDQW9hRzl2YTA1aGJXVXBJRDArSUNGUFltcGxZM1F1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNob2IyOXJjeXdnYUc5dmEwNWhiV1VwTEZ4dUlDQXBPMXh1SUNCcFppQW9iV2x6YzJsdVowaHZiMnRPWVcxbGN5NXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGeHVJQ0FnSUNBZ1lFMXBjM05wYm1jZ1pYaHdaV04wWldRZ2FHOXZhM002WEZ4dVhGeHVKSHR0YVhOemFXNW5TRzl2YTA1aGJXVnpMbXB2YVc0b0oxeGNiaWNwZlZ4Y2JtQXNYRzRnSUNBZ0tUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQmhjM2x1WXlCbWRXNWpkR2x2YmlCdFpYUm9iMlJOYVdSa2JHVjNZWEpsS0hKbGNTd2djbVZ6TENCdVpYaDBMQ0JsYm1RcElIdGNiaUFnSUNBdkx5QlNaV3BsWTNRZ2RXNXpkWEJ3YjNKMFpXUWdiV1YwYUc5a2N5NWNiaUFnSUNCcFppQW9WVTVUVlZCUVQxSlVSVVJmVWxCRFgwMUZWRWhQUkZNdWFHRnpLSEpsY1M1dFpYUm9iMlFwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWlc1a0tHVjBhRVZ5Y205eWN5NXljR011YldWMGFHOWtUbTkwVTNWd2NHOXlkR1ZrS0NrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJR2hoYm1Sc1pYSWdQU0JvWVc1a2JHVnlUV0Z3TG1kbGRDaHlaWEV1YldWMGFHOWtLVHRjYmlBZ0lDQnBaaUFvYUdGdVpHeGxjaWtnZTF4dUlDQWdJQ0FnWTI5dWMzUWdleUJwYlhCc1pXMWxiblJoZEdsdmJpd2dhRzl2YTA1aGJXVnpJSDBnUFNCb1lXNWtiR1Z5TzF4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdMeThnU1cxd2JHVnRaVzUwWVhScGIyNXpJRzFoZVNCdmNpQnRZWGtnYm05MElHSmxJR0Z6ZVc1akxDQnpieUIzWlNCdGRYTjBJR0YzWVdsMElIUm9aVzB1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoZDJGcGRDQnBiWEJzWlcxbGJuUmhkR2x2YmloY2JpQWdJQ0FnSUNBZ0lDQnlaWEVzWEc0Z0lDQWdJQ0FnSUNBZ2NtVnpMRnh1SUNBZ0lDQWdJQ0FnSUc1bGVIUXNYRzRnSUNBZ0lDQWdJQ0FnWlc1a0xGeHVJQ0FnSUNBZ0lDQWdJSE5sYkdWamRFaHZiMnR6S0dodmIydHpMQ0JvYjI5clRtRnRaWE1wTEZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWhsY25KdmNpazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmxibVFvWlhKeWIzSXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYaDBLQ2s3WEc0Z0lIMDdYRzU5WEc1Y2JpSXNJbWx0Y0c5eWRDQjdJR1YwYUVWeWNtOXljeXdnWlhKeWIzSkRiMlJsY3lCOUlHWnliMjBnSjJWMGFDMXljR010WlhKeWIzSnpKenRjYm1sdGNHOXlkQ0IyWVd4cFpGVnliQ0JtY205dElDZDJZV3hwWkMxMWNtd25PMXh1YVcxd2IzSjBJSHNnYjIxcGRDQjlJR1p5YjIwZ0oyeHZaR0Z6YUNjN1hHNXBiWEJ2Y25RZ2V5QkJjSEJ5YjNaaGJGUjVjR1VnZlNCbWNtOXRJQ2RBYldWMFlXMWhjMnN2WTI5dWRISnZiR3hsY2kxMWRHbHNjeWM3WEc1cGJYQnZjblFnZTF4dUlDQk5SVk5UUVVkRlgxUlpVRVVzWEc0Z0lGVk9TMDVQVjA1ZlZFbERTMFZTWDFOWlRVSlBUQ3hjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OWhjSEFuTzF4dWFXMXdiM0owSUh0Y2JpQWdhWE5RY21WbWFYaGxaRVp2Y20xaGRIUmxaRWhsZUZOMGNtbHVaeXhjYmlBZ2FYTlRZV1psUTJoaGFXNUpaQ3hjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyMXZaSFZzWlhNdmJtVjBkMjl5YXk1MWRHbHNjeWM3WEc1cGJYQnZjblFnZXlCTlpYUmhUV1YwY21samMwNWxkSGR2Y210RmRtVnVkRk52ZFhKalpTQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12YldWMFlXMWxkSEpwWTNNbk8xeHVYRzVqYjI1emRDQmhaR1JGZEdobGNtVjFiVU5vWVdsdUlEMGdlMXh1SUNCdFpYUm9iMlJPWVcxbGN6b2dXMDFGVTFOQlIwVmZWRmxRUlM1QlJFUmZSVlJJUlZKRlZVMWZRMGhCU1U1ZExGeHVJQ0JwYlhCc1pXMWxiblJoZEdsdmJqb2dZV1JrUlhSb1pYSmxkVzFEYUdGcGJraGhibVJzWlhJc1hHNGdJR2h2YjJ0T1lXMWxjem9nZTF4dUlDQWdJSFZ3YzJWeWRFNWxkSGR2Y210RGIyNW1hV2QxY21GMGFXOXVPaUIwY25WbExGeHVJQ0FnSUdkbGRFTjFjbkpsYm5SRGFHRnBia2xrT2lCMGNuVmxMRnh1SUNBZ0lHZGxkRU4xY25KbGJuUlNjR05WY213NklIUnlkV1VzWEc0Z0lDQWdabWx1WkU1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dVFuazZJSFJ5ZFdVc1hHNGdJQ0FnYzJWMFFXTjBhWFpsVG1WMGQyOXlhem9nZEhKMVpTeGNiaUFnSUNCeVpYRjFaWE4wVlhObGNrRndjSEp2ZG1Gc09pQjBjblZsTEZ4dUlDQjlMRnh1ZlR0Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdGa1pFVjBhR1Z5WlhWdFEyaGhhVzQ3WEc1Y2JtRnplVzVqSUdaMWJtTjBhVzl1SUdGa1pFVjBhR1Z5WlhWdFEyaGhhVzVJWVc1a2JHVnlLRnh1SUNCeVpYRXNYRzRnSUhKbGN5eGNiaUFnWDI1bGVIUXNYRzRnSUdWdVpDeGNiaUFnZTF4dUlDQWdJSFZ3YzJWeWRFNWxkSGR2Y210RGIyNW1hV2QxY21GMGFXOXVMRnh1SUNBZ0lHZGxkRU4xY25KbGJuUkRhR0ZwYmtsa0xGeHVJQ0FnSUdkbGRFTjFjbkpsYm5SU2NHTlZjbXdzWEc0Z0lDQWdabWx1WkU1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dVFua3NYRzRnSUNBZ2MyVjBRV04wYVhabFRtVjBkMjl5YXl4Y2JpQWdJQ0J5WlhGMVpYTjBWWE5sY2tGd2NISnZkbUZzTEZ4dUlDQjlMRnh1S1NCN1hHNGdJR2xtSUNnaGNtVnhMbkJoY21GdGN6OHVXekJkSUh4OElIUjVjR1Z2WmlCeVpYRXVjR0Z5WVcxeld6QmRJQ0U5UFNBbmIySnFaV04wSnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJsYm1Rb1hHNGdJQ0FnSUNCbGRHaEZjbkp2Y25NdWNuQmpMbWx1ZG1Gc2FXUlFZWEpoYlhNb2UxeHVJQ0FnSUNBZ0lDQnRaWE56WVdkbE9pQmdSWGh3WldOMFpXUWdjMmx1WjJ4bExDQnZZbXBsWTNRZ2NHRnlZVzFsZEdWeUxpQlNaV05sYVhabFpEcGNYRzRrZTBwVFQwNHVjM1J5YVc1bmFXWjVLRnh1SUNBZ0lDQWdJQ0FnSUhKbGNTNXdZWEpoYlhNc1hHNGdJQ0FnSUNBZ0lDbDlZQ3hjYmlBZ0lDQWdJSDBwTEZ4dUlDQWdJQ2s3WEc0Z0lIMWNibHh1SUNCamIyNXpkQ0I3SUc5eWFXZHBiaUI5SUQwZ2NtVnhPMXh1WEc0Z0lHTnZibk4wSUh0Y2JpQWdJQ0JqYUdGcGJrbGtMRnh1SUNBZ0lHTm9ZV2x1VG1GdFpTQTlJRzUxYkd3c1hHNGdJQ0FnWW14dlkydEZlSEJzYjNKbGNsVnliSE1nUFNCdWRXeHNMRnh1SUNBZ0lHNWhkR2wyWlVOMWNuSmxibU41SUQwZ2JuVnNiQ3hjYmlBZ0lDQnljR05WY214ekxGeHVJQ0I5SUQwZ2NtVnhMbkJoY21GdGMxc3dYVHRjYmx4dUlDQmpiMjV6ZENCdmRHaGxja3RsZVhNZ1BTQlBZbXBsWTNRdWEyVjVjeWhjYmlBZ0lDQnZiV2wwS0hKbGNTNXdZWEpoYlhOYk1GMHNJRnRjYmlBZ0lDQWdJQ2RqYUdGcGJrbGtKeXhjYmlBZ0lDQWdJQ2RqYUdGcGJrNWhiV1VuTEZ4dUlDQWdJQ0FnSjJKc2IyTnJSWGh3Ykc5eVpYSlZjbXh6Snl4Y2JpQWdJQ0FnSUNkcFkyOXVWWEpzY3ljc1hHNGdJQ0FnSUNBbmNuQmpWWEpzY3ljc1hHNGdJQ0FnSUNBbmJtRjBhWFpsUTNWeWNtVnVZM2tuTEZ4dUlDQWdJRjBwTEZ4dUlDQXBPMXh1WEc0Z0lHbG1JQ2h2ZEdobGNrdGxlWE11YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJsYm1Rb1hHNGdJQ0FnSUNCbGRHaEZjbkp2Y25NdWNuQmpMbWx1ZG1Gc2FXUlFZWEpoYlhNb2UxeHVJQ0FnSUNBZ0lDQnRaWE56WVdkbE9pQmdVbVZqWldsMlpXUWdkVzVsZUhCbFkzUmxaQ0JyWlhseklHOXVJRzlpYW1WamRDQndZWEpoYldWMFpYSXVJRlZ1YzNWd2NHOXlkR1ZrSUd0bGVYTTZYRnh1Skh0dmRHaGxja3RsZVhOOVlDeGNiaUFnSUNBZ0lIMHBMRnh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0JqYjI1emRDQnBjMHh2WTJGc2FHOXpkQ0E5SUNoemRISlZjbXdwSUQwK0lIdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2RYSnNJRDBnYm1WM0lGVlNUQ2h6ZEhKVmNtd3BPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIVnliQzVvYjNOMGJtRnRaU0E5UFQwZ0oyeHZZMkZzYUc5emRDY2dmSHdnZFhKc0xtaHZjM1J1WVcxbElEMDlQU0FuTVRJM0xqQXVNQzR4Snp0Y2JpQWdJQ0I5SUdOaGRHTm9JQ2hsY25KdmNpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCamIyNXpkQ0JtYVhKemRGWmhiR2xrVWxCRFZYSnNJRDBnUVhKeVlYa3VhWE5CY25KaGVTaHljR05WY214ektWeHVJQ0FnSUQ4Z2NuQmpWWEpzY3k1bWFXNWtLRnh1SUNBZ0lDQWdJQ0FvY25CalZYSnNLU0E5UGlCcGMweHZZMkZzYUc5emRDaHljR05WY213cElIeDhJSFpoYkdsa1ZYSnNMbWx6U0hSMGNITlZjbWtvY25CalZYSnNLU3hjYmlBZ0lDQWdJQ2xjYmlBZ0lDQTZJRzUxYkd3N1hHNWNiaUFnWTI5dWMzUWdabWx5YzNSV1lXeHBaRUpzYjJOclJYaHdiRzl5WlhKVmNtd2dQVnh1SUNBZ0lHSnNiMk5yUlhod2JHOXlaWEpWY214eklDRTlQU0J1ZFd4c0lDWW1JRUZ5Y21GNUxtbHpRWEp5WVhrb1lteHZZMnRGZUhCc2IzSmxjbFZ5YkhNcFhHNGdJQ0FnSUNBL0lHSnNiMk5yUlhod2JHOXlaWEpWY214ekxtWnBibVFvWEc0Z0lDQWdJQ0FnSUNBZ0tHSnNiMk5yUlhod2JHOXlaWEpWY213cElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNCcGMweHZZMkZzYUc5emRDaGliRzlqYTBWNGNHeHZjbVZ5VlhKc0tTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNhV1JWY213dWFYTklkSFJ3YzFWeWFTaGliRzlqYTBWNGNHeHZjbVZ5VlhKc0tTeGNiaUFnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdPaUJ1ZFd4c08xeHVYRzRnSUdsbUlDZ2habWx5YzNSV1lXeHBaRkpRUTFWeWJDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbGJtUW9YRzRnSUNBZ0lDQmxkR2hGY25KdmNuTXVjbkJqTG1sdWRtRnNhV1JRWVhKaGJYTW9lMXh1SUNBZ0lDQWdJQ0J0WlhOellXZGxPaUJnUlhod1pXTjBaV1FnWVc0Z1lYSnlZWGtnZDJsMGFDQmhkQ0JzWldGemRDQnZibVVnZG1Gc2FXUWdjM1J5YVc1bklFaFVWRkJUSUhWeWJDQW5jbkJqVlhKc2N5Y3NJRkpsWTJWcGRtVmtPbHhjYmlSN2NuQmpWWEpzYzMxZ0xGeHVJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0tUdGNiaUFnZlZ4dVhHNGdJR2xtSUNoaWJHOWphMFY0Y0d4dmNtVnlWWEpzY3lBaFBUMGdiblZzYkNBbUppQWhabWx5YzNSV1lXeHBaRUpzYjJOclJYaHdiRzl5WlhKVmNtd3BJSHRjYmlBZ0lDQnlaWFIxY200Z1pXNWtLRnh1SUNBZ0lDQWdaWFJvUlhKeWIzSnpMbkp3WXk1cGJuWmhiR2xrVUdGeVlXMXpLSHRjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVG9nWUVWNGNHVmpkR1ZrSUc1MWJHd2diM0lnWVhKeVlYa2dkMmwwYUNCaGRDQnNaV0Z6ZENCdmJtVWdkbUZzYVdRZ2MzUnlhVzVuSUVoVVZGQlRJRlZTVENBbllteHZZMnRGZUhCc2IzSmxjbFZ5YkNjdUlGSmxZMlZwZG1Wa09pQWtlMkpzYjJOclJYaHdiRzl5WlhKVmNteHpmV0FzWEc0Z0lDQWdJQ0I5S1N4Y2JpQWdJQ0FwTzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnWDJOb1lXbHVTV1FnUFNCMGVYQmxiMllnWTJoaGFXNUpaQ0E5UFQwZ0ozTjBjbWx1WnljZ0ppWWdZMmhoYVc1SlpDNTBiMHh2ZDJWeVEyRnpaU2dwTzF4dVhHNGdJR2xtSUNnaGFYTlFjbVZtYVhobFpFWnZjbTFoZEhSbFpFaGxlRk4wY21sdVp5aGZZMmhoYVc1SlpDa3BJSHRjYmlBZ0lDQnlaWFIxY200Z1pXNWtLRnh1SUNBZ0lDQWdaWFJvUlhKeWIzSnpMbkp3WXk1cGJuWmhiR2xrVUdGeVlXMXpLSHRjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVG9nWUVWNGNHVmpkR1ZrSURCNExYQnlaV1pwZUdWa0xDQjFibkJoWkdSbFpDd2dibTl1TFhwbGNtOGdhR1Y0WVdSbFkybHRZV3dnYzNSeWFXNW5JQ2RqYUdGcGJrbGtKeTRnVW1WalpXbDJaV1E2WEZ4dUpIdGphR0ZwYmtsa2ZXQXNYRzRnSUNBZ0lDQjlLU3hjYmlBZ0lDQXBPMXh1SUNCOVhHNWNiaUFnYVdZZ0tDRnBjMU5oWm1WRGFHRnBia2xrS0hCaGNuTmxTVzUwS0Y5amFHRnBia2xrTENBeE5pa3BLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHVnVaQ2hjYmlBZ0lDQWdJR1YwYUVWeWNtOXljeTV5Y0dNdWFXNTJZV3hwWkZCaGNtRnRjeWg3WEc0Z0lDQWdJQ0FnSUcxbGMzTmhaMlU2SUdCSmJuWmhiR2xrSUdOb1lXbHVJRWxFSUZ3aUpIdGZZMmhoYVc1SlpIMWNJam9nYm5WdFpYSnBZMkZzSUhaaGJIVmxJR2R5WldGMFpYSWdkR2hoYmlCdFlYZ2djMkZtWlNCMllXeDFaUzRnVW1WalpXbDJaV1E2WEZ4dUpIdGphR0ZwYmtsa2ZXQXNYRzRnSUNBZ0lDQjlLU3hjYmlBZ0lDQXBPMXh1SUNCOVhHNWNiaUFnWTI5dWMzUWdaWGhwYzNScGJtZE9aWFIzYjNKcklEMGdabWx1WkU1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dVFua29leUJqYUdGcGJrbGtPaUJmWTJoaGFXNUpaQ0I5S1R0Y2JseHVJQ0F2THlCcFppQjBhR1VnY21WeGRXVnpkQ0JwY3lCMGJ5QmhaR1FnWVNCdVpYUjNiM0pySUhSb1lYUWdhWE1nWVd4eVpXRmtlU0JoWkdSbFpDQmhibVFnWTI5dVptbG5kWEpsWkZ4dUlDQXZMeUIzYVhSb0lIUm9aU0J6WVcxbElGSlFReUJuWVhSbGQyRjVJSGRsSUhOb2IzVnNaRzRuZENCMGNua2dkRzhnWVdSa0lHbDBJR0ZuWVdsdUxseHVJQ0JwWmlBb1pYaHBjM1JwYm1kT1pYUjNiM0pySUNZbUlHVjRhWE4wYVc1blRtVjBkMjl5YXk1eWNHTlZjbXdnUFQwOUlHWnBjbk4wVm1Gc2FXUlNVRU5WY213cElIdGNiaUFnSUNBdkx5QkpaaUIwYUdVZ2JtVjBkMjl5YXlCaGJISmxZV1I1SUdWNGFYTjBjeXdnZEdobElISmxjWFZsYzNRZ2FYTWdZMjl1YzJsa1pYSmxaQ0J6ZFdOalpYTnpablZzWEc0Z0lDQWdjbVZ6TG5KbGMzVnNkQ0E5SUc1MWJHdzdYRzVjYmlBZ0lDQmpiMjV6ZENCamRYSnlaVzUwUTJoaGFXNUpaQ0E5SUdkbGRFTjFjbkpsYm5SRGFHRnBia2xrS0NrN1hHNGdJQ0FnWTI5dWMzUWdZM1Z5Y21WdWRGSndZMVZ5YkNBOUlHZGxkRU4xY25KbGJuUlNjR05WY213b0tUdGNibHh1SUNBZ0lDOHZJRWxtSUhSb1pTQmpkWEp5Wlc1MElHTm9ZV2x1U1dRZ1lXNWtJSEp3WTFWeWJDQnRZWFJqYUdWeklIUm9ZWFFnYjJZZ2RHaGxJR2x1WTI5dGFXNW5JSEpsY1hWbGMzUmNiaUFnSUNBdkx5QlhaU0JrYjI0bmRDQnVaV1ZrSUhSdklIQnliMk5sWldRZ1puVnlkR2hsY2k1Y2JpQWdJQ0JwWmlBb1kzVnljbVZ1ZEVOb1lXbHVTV1FnUFQwOUlGOWphR0ZwYmtsa0lDWW1JR04xY25KbGJuUlNjR05WY213Z1BUMDlJR1pwY25OMFZtRnNhV1JTVUVOVmNtd3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmxibVFvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCSlppQjBhR2x6SUc1bGRIZHZjbXNnYVhNZ1lXeHlaV0ZrZVNCaFpHUmxaQ0IzYVhSb0lHSjFkQ0JwY3lCdWIzUWdkR2hsSUdOMWNuSmxiblJzZVNCelpXeGxZM1JsWkNCdVpYUjNiM0pyWEc0Z0lDQWdMeThnUVhOcklIUm9aU0IxYzJWeUlIUnZJSE4zYVhSamFDQjBhR1VnYm1WMGQyOXlhMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0JoZDJGcGRDQnlaWEYxWlhOMFZYTmxja0Z3Y0hKdmRtRnNLSHRjYmlBZ0lDQWdJQ0FnYjNKcFoybHVMRnh1SUNBZ0lDQWdJQ0IwZVhCbE9pQkJjSEJ5YjNaaGJGUjVjR1V1VTNkcGRHTm9SWFJvWlhKbGRXMURhR0ZwYml4Y2JpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZEVSaGRHRTZJSHRjYmlBZ0lDQWdJQ0FnSUNCeWNHTlZjbXc2SUdWNGFYTjBhVzVuVG1WMGQyOXlheTV5Y0dOVmNtd3NYRzRnSUNBZ0lDQWdJQ0FnWTJoaGFXNUpaRG9nWlhocGMzUnBibWRPWlhSM2IzSnJMbU5vWVdsdVNXUXNYRzRnSUNBZ0lDQWdJQ0FnYm1samEyNWhiV1U2SUdWNGFYTjBhVzVuVG1WMGQyOXlheTV1YVdOcmJtRnRaU3hjYmlBZ0lDQWdJQ0FnSUNCMGFXTnJaWEk2SUdWNGFYTjBhVzVuVG1WMGQyOXlheTUwYVdOclpYSXNYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ1lYZGhhWFFnYzJWMFFXTjBhWFpsVG1WMGQyOXlheWhsZUdsemRHbHVaMDVsZEhkdmNtc3VhV1FwTzF4dUlDQWdJQ0FnY21WekxuSmxjM1ZzZENBOUlHNTFiR3c3WEc0Z0lDQWdmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lDOHZJRVp2Y2lCMGFHVWdjSFZ5Y0c5elpYTWdiMllnZEdocGN5QnRaWFJvYjJRc0lHbDBJR1J2WlhNZ2JtOTBJRzFoZEhSbGNpQnBaaUIwYUdVZ2RYTmxjbHh1SUNBZ0lDQWdMeThnWkdWamJHbHVaWE1nZEc4Z2MzZHBkR05vSUhSb1pTQnpaV3hsWTNSbFpDQnVaWFIzYjNKckxpQkliM2RsZG1WeUxDQnZkR2hsY2lCbGNuSnZjbk1nYVc1a2FXTmhkR1ZjYmlBZ0lDQWdJQzh2SUhSb1lYUWdjMjl0WlhSb2FXNW5JR2x6SUhkeWIyNW5MbHh1SUNBZ0lDQWdhV1lnS0dWeWNtOXlMbU52WkdVZ0lUMDlJR1Z5Y205eVEyOWtaWE11Y0hKdmRtbGtaWEl1ZFhObGNsSmxhbVZqZEdWa1VtVnhkV1Z6ZENrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pXNWtLR1Z5Y205eUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR1Z1WkNncE8xeHVJQ0I5WEc1Y2JpQWdhV1lnS0hSNWNHVnZaaUJqYUdGcGJrNWhiV1VnSVQwOUlDZHpkSEpwYm1jbklIeDhJQ0ZqYUdGcGJrNWhiV1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaVzVrS0Z4dUlDQWdJQ0FnWlhSb1JYSnliM0p6TG5Kd1l5NXBiblpoYkdsa1VHRnlZVzF6S0h0Y2JpQWdJQ0FnSUNBZ2JXVnpjMkZuWlRvZ1lFVjRjR1ZqZEdWa0lHNXZiaTFsYlhCMGVTQnpkSEpwYm1jZ0oyTm9ZV2x1VG1GdFpTY3VJRkpsWTJWcGRtVmtPbHhjYmlSN1kyaGhhVzVPWVcxbGZXQXNYRzRnSUNBZ0lDQjlLU3hjYmlBZ0lDQXBPMXh1SUNCOVhHNGdJR052Ym5OMElGOWphR0ZwYms1aGJXVWdQVnh1SUNBZ0lHTm9ZV2x1VG1GdFpTNXNaVzVuZEdnZ1BpQXhNREFnUHlCamFHRnBiazVoYldVdWMzVmljM1J5YVc1bktEQXNJREV3TUNrZ09pQmphR0ZwYms1aGJXVTdYRzVjYmlBZ2FXWWdLRzVoZEdsMlpVTjFjbkpsYm1ONUlDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnVZWFJwZG1WRGRYSnlaVzVqZVNBaFBUMGdKMjlpYW1WamRDY2dmSHdnUVhKeVlYa3VhWE5CY25KaGVTaHVZWFJwZG1WRGRYSnlaVzVqZVNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbGJtUW9YRzRnSUNBZ0lDQWdJR1YwYUVWeWNtOXljeTV5Y0dNdWFXNTJZV3hwWkZCaGNtRnRjeWg3WEc0Z0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlRvZ1lFVjRjR1ZqZEdWa0lHNTFiR3dnYjNJZ2IySnFaV04wSUNkdVlYUnBkbVZEZFhKeVpXNWplU2N1SUZKbFkyVnBkbVZrT2x4Y2JpUjdibUYwYVhabFEzVnljbVZ1WTNsOVlDeGNiaUFnSUNBZ0lDQWdmU2tzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYm1GMGFYWmxRM1Z5Y21WdVkza3VaR1ZqYVcxaGJITWdJVDA5SURFNEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1pXNWtLRnh1SUNBZ0lDQWdJQ0JsZEdoRmNuSnZjbk11Y25CakxtbHVkbUZzYVdSUVlYSmhiWE1vZTF4dUlDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVNklHQkZlSEJsWTNSbFpDQjBhR1VnYm5WdFltVnlJREU0SUdadmNpQW5ibUYwYVhabFEzVnljbVZ1WTNrdVpHVmphVzFoYkhNbklIZG9aVzRnSjI1aGRHbDJaVU4xY25KbGJtTjVKeUJwY3lCd2NtOTJhV1JsWkM0Z1VtVmpaV2wyWldRNklDUjdibUYwYVhabFEzVnljbVZ1WTNrdVpHVmphVzFoYkhOOVlDeGNiaUFnSUNBZ0lDQWdmU2tzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNnaGJtRjBhWFpsUTNWeWNtVnVZM2t1YzNsdFltOXNJSHg4SUhSNWNHVnZaaUJ1WVhScGRtVkRkWEp5Wlc1amVTNXplVzFpYjJ3Z0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaVzVrS0Z4dUlDQWdJQ0FnSUNCbGRHaEZjbkp2Y25NdWNuQmpMbWx1ZG1Gc2FXUlFZWEpoYlhNb2UxeHVJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVTZJR0JGZUhCbFkzUmxaQ0JoSUhOMGNtbHVaeUFuYm1GMGFYWmxRM1Z5Y21WdVkza3VjM2x0WW05c0p5NGdVbVZqWldsMlpXUTZJQ1I3Ym1GMGFYWmxRM1Z5Y21WdVkza3VjM2x0WW05c2ZXQXNYRzRnSUNBZ0lDQWdJSDBwTEZ4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCamIyNXpkQ0IwYVdOclpYSWdQU0J1WVhScGRtVkRkWEp5Wlc1amVUOHVjM2x0WW05c0lIeDhJRlZPUzA1UFYwNWZWRWxEUzBWU1gxTlpUVUpQVER0Y2JseHVJQ0JwWmlBb1hHNGdJQ0FnZEdsamEyVnlJQ0U5UFNCVlRrdE9UMWRPWDFSSlEwdEZVbDlUV1UxQ1Qwd2dKaVpjYmlBZ0lDQW9kSGx3Wlc5bUlIUnBZMnRsY2lBaFBUMGdKM04wY21sdVp5Y2dmSHdnZEdsamEyVnlMbXhsYm1kMGFDQThJRElnZkh3Z2RHbGphMlZ5TG14bGJtZDBhQ0ErSURZcFhHNGdJQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQmxibVFvWEc0Z0lDQWdJQ0JsZEdoRmNuSnZjbk11Y25CakxtbHVkbUZzYVdSUVlYSmhiWE1vZTF4dUlDQWdJQ0FnSUNCdFpYTnpZV2RsT2lCZ1JYaHdaV04wWldRZ01pMDJJR05vWVhKaFkzUmxjaUJ6ZEhKcGJtY2dKMjVoZEdsMlpVTjFjbkpsYm1ONUxuTjViV0p2YkNjdUlGSmxZMlZwZG1Wa09seGNiaVI3ZEdsamEyVnlmV0FzWEc0Z0lDQWdJQ0I5S1N4Y2JpQWdJQ0FwTzF4dUlDQjlYRzRnSUM4dklHbG1JSFJvWlNCamFHRnBia2xrSUdseklIUm9aU0J6WVcxbElHRnpJR0Z1SUdWNGFYTjBhVzVuSUc1bGRIZHZjbXNnWW5WMElIUm9aU0IwYVdOclpYSWdhWE1nWkdsbVptVnlaVzUwSUhkbElIZGhiblFnZEc4Z1lteHZZMnNnZEdocGN5QmhZM1JwYjI1Y2JpQWdMeThnWVhNZ2FYUWdhWE1nY0c5MFpXNTBhV0ZzYkhrZ2JXRnNhV05wYjNWeklHRnVaQ0JqYjI1bWRYTnBibWRjYmlBZ2FXWWdLRnh1SUNBZ0lHVjRhWE4wYVc1blRtVjBkMjl5YXlBbUpseHVJQ0FnSUdWNGFYTjBhVzVuVG1WMGQyOXlheTVqYUdGcGJrbGtJRDA5UFNCZlkyaGhhVzVKWkNBbUpseHVJQ0FnSUdWNGFYTjBhVzVuVG1WMGQyOXlheTUwYVdOclpYSWdJVDA5SUhScFkydGxjbHh1SUNBcElIdGNiaUFnSUNCeVpYUjFjbTRnWlc1a0tGeHVJQ0FnSUNBZ1pYUm9SWEp5YjNKekxuSndZeTVwYm5aaGJHbGtVR0Z5WVcxektIdGNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpUb2dZRzVoZEdsMlpVTjFjbkpsYm1ONUxuTjViV0p2YkNCa2IyVnpJRzV2ZENCdFlYUmphQ0JqZFhKeVpXNWplU0J6ZVcxaWIyd2dabTl5SUdFZ2JtVjBkMjl5YXlCMGFHVWdkWE5sY2lCaGJISmxZV1I1SUdoaGN5QmhaR1JsWkNCM2FYUm9JSFJvWlNCellXMWxJR05vWVdsdVNXUXVJRkpsWTJWcGRtVmtPbHhjYmlSN2RHbGphMlZ5ZldBc1hHNGdJQ0FnSUNCOUtTeGNiaUFnSUNBcE8xeHVJQ0I5WEc0Z0lHeGxkQ0J1WlhSM2IzSnJRMjl1Wm1sbmRYSmhkR2x2Ymtsa08xeHVJQ0IwY25rZ2UxeHVJQ0FnSUdGM1lXbDBJSEpsY1hWbGMzUlZjMlZ5UVhCd2NtOTJZV3dvZTF4dUlDQWdJQ0FnYjNKcFoybHVMRnh1SUNBZ0lDQWdkSGx3WlRvZ1FYQndjbTkyWVd4VWVYQmxMa0ZrWkVWMGFHVnlaWFZ0UTJoaGFXNHNYRzRnSUNBZ0lDQnlaWEYxWlhOMFJHRjBZVG9nZTF4dUlDQWdJQ0FnSUNCamFHRnBia2xrT2lCZlkyaGhhVzVKWkN4Y2JpQWdJQ0FnSUNBZ2NuQmpVSEpsWm5NNklIc2dZbXh2WTJ0RmVIQnNiM0psY2xWeWJEb2dabWx5YzNSV1lXeHBaRUpzYjJOclJYaHdiRzl5WlhKVmNtd2dmU3hjYmlBZ0lDQWdJQ0FnWTJoaGFXNU9ZVzFsT2lCZlkyaGhhVzVPWVcxbExGeHVJQ0FnSUNBZ0lDQnljR05WY213NklHWnBjbk4wVm1Gc2FXUlNVRU5WY213c1hHNGdJQ0FnSUNBZ0lIUnBZMnRsY2l4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCdVpYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJrbGtJRDBnWVhkaGFYUWdkWEJ6WlhKMFRtVjBkMjl5YTBOdmJtWnBaM1Z5WVhScGIyNG9YRzRnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJR05vWVdsdVNXUTZJRjlqYUdGcGJrbGtMRnh1SUNBZ0lDQWdJQ0J5Y0dOUWNtVm1jem9nZXlCaWJHOWphMFY0Y0d4dmNtVnlWWEpzT2lCbWFYSnpkRlpoYkdsa1FteHZZMnRGZUhCc2IzSmxjbFZ5YkNCOUxGeHVJQ0FnSUNBZ0lDQnVhV05yYm1GdFpUb2dYMk5vWVdsdVRtRnRaU3hjYmlBZ0lDQWdJQ0FnY25CalZYSnNPaUJtYVhKemRGWmhiR2xrVWxCRFZYSnNMRnh1SUNBZ0lDQWdJQ0IwYVdOclpYSXNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdleUJ6YjNWeVkyVTZJRTFsZEdGTlpYUnlhV056VG1WMGQyOXlhMFYyWlc1MFUyOTFjbU5sTGtSaGNIQXNJSEpsWm1WeWNtVnlPaUJ2Y21sbmFXNGdmU3hjYmlBZ0lDQXBPMXh1WEc0Z0lDQWdMeThnVDI1alpTQjBhR1VnYm1WMGQyOXlheUJvWVhNZ1ltVmxiaUJoWkdSbFpDd2dkR2hsSUhKbGNYVmxjM1JsWkNCcGN5QmpiMjV6YVdSbGNtVmtJSE4xWTJObGMzTm1kV3hjYmlBZ0lDQnlaWE11Y21WemRXeDBJRDBnYm5Wc2JEdGNiaUFnZlNCallYUmphQ0FvWlhKeWIzSXBJSHRjYmlBZ0lDQnlaWFIxY200Z1pXNWtLR1Z5Y205eUtUdGNiaUFnZlZ4dVhHNGdJQzh2SUVGemF5QjBhR1VnZFhObGNpQjBieUJ6ZDJsMFkyZ2dkR2hsSUc1bGRIZHZjbXRjYmlBZ2RISjVJSHRjYmlBZ0lDQmhkMkZwZENCeVpYRjFaWE4wVlhObGNrRndjSEp2ZG1Gc0tIdGNiaUFnSUNBZ0lHOXlhV2RwYml4Y2JpQWdJQ0FnSUhSNWNHVTZJRUZ3Y0hKdmRtRnNWSGx3WlM1VGQybDBZMmhGZEdobGNtVjFiVU5vWVdsdUxGeHVJQ0FnSUNBZ2NtVnhkV1Z6ZEVSaGRHRTZJSHRjYmlBZ0lDQWdJQ0FnY25CalZYSnNPaUJtYVhKemRGWmhiR2xrVWxCRFZYSnNMRnh1SUNBZ0lDQWdJQ0JqYUdGcGJrbGtPaUJmWTJoaGFXNUpaQ3hjYmlBZ0lDQWdJQ0FnYm1samEyNWhiV1U2SUY5amFHRnBiazVoYldVc1hHNGdJQ0FnSUNBZ0lIUnBZMnRsY2l4Y2JpQWdJQ0FnSUNBZ2JtVjBkMjl5YTBOdmJtWnBaM1Z5WVhScGIyNUpaQ3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdmU2s3WEc0Z0lDQWdZWGRoYVhRZ2MyVjBRV04wYVhabFRtVjBkMjl5YXlodVpYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJrbGtLVHRjYmlBZ2ZTQmpZWFJqYUNBb1pYSnliM0lwSUh0Y2JpQWdJQ0F2THlCR2IzSWdkR2hsSUhCMWNuQnZjMlZ6SUc5bUlIUm9hWE1nYldWMGFHOWtMQ0JwZENCa2IyVnpJRzV2ZENCdFlYUjBaWElnYVdZZ2RHaGxJSFZ6WlhKY2JpQWdJQ0F2THlCa1pXTnNhVzVsY3lCMGJ5QnpkMmwwWTJnZ2RHaGxJSE5sYkdWamRHVmtJRzVsZEhkdmNtc3VJRWh2ZDJWMlpYSXNJRzkwYUdWeUlHVnljbTl5Y3lCcGJtUnBZMkYwWlZ4dUlDQWdJQzh2SUhSb1lYUWdjMjl0WlhSb2FXNW5JR2x6SUhkeWIyNW5MbHh1SUNBZ0lHbG1JQ2hsY25KdmNpNWpiMlJsSUNFOVBTQmxjbkp2Y2tOdlpHVnpMbkJ5YjNacFpHVnlMblZ6WlhKU1pXcGxZM1JsWkZKbGNYVmxjM1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJsYm1Rb1pYSnliM0lwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdaVzVrS0NrN1hHNTlYRzRpTENKcGJYQnZjblFnZXlCTlJWTlRRVWRGWDFSWlVFVWdmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2WTI5dWMzUmhiblJ6TDJGd2NDYzdYRzVjYmk4cUtseHVJQ29nUVNCM2NtRndjR1Z5SUdadmNpQmdaWFJvWDJGalkyOTFiblJ6WUNCMGFHRjBJSEpsZEhWeWJuTWdZVzRnWlcxd2RIa2dZWEp5WVhrZ2QyaGxiaUJ3WlhKdGFYTnphVzl1SUdseklHUmxibWxsWkM1Y2JpQXFMMXh1WEc1amIyNXpkQ0J5WlhGMVpYTjBSWFJvWlhKbGRXMUJZMk52ZFc1MGN5QTlJSHRjYmlBZ2JXVjBhRzlrVG1GdFpYTTZJRnROUlZOVFFVZEZYMVJaVUVVdVJWUklYMEZEUTA5VlRsUlRYU3hjYmlBZ2FXMXdiR1Z0Wlc1MFlYUnBiMjQ2SUdWMGFFRmpZMjkxYm5SelNHRnVaR3hsY2l4Y2JpQWdhRzl2YTA1aGJXVnpPaUI3WEc0Z0lDQWdaMlYwUVdOamIzVnVkSE02SUhSeWRXVXNYRzRnSUgwc1hHNTlPMXh1Wlhod2IzSjBJR1JsWm1GMWJIUWdjbVZ4ZFdWemRFVjBhR1Z5WlhWdFFXTmpiM1Z1ZEhNN1hHNWNiaThxS2x4dUlDb2dRSFI1Y0dWa1pXWWdlMUpsWTI5eVpEeHpkSEpwYm1jc0lFWjFibU4wYVc5dVBuMGdSWFJvUVdOamIzVnVkSE5QY0hScGIyNXpYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UwWjFibU4wYVc5dWZTQm5aWFJCWTJOdmRXNTBjeUF0SUVkbGRITWdkR2hsSUdGalkyOTFiblJ6SUdadmNpQjBhR1VnY21WeGRXVnpkR2x1WjF4dUlDb2diM0pwWjJsdUxseHVJQ292WEc1Y2JpOHFLbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdhVzF3YjNKMEtDZHFjMjl1TFhKd1l5MWxibWRwYm1VbktTNUtjMjl1VW5CalVtVnhkV1Z6ZER4MWJtdHViM2R1UG4wZ1gzSmxjU0F0SUZSb1pTQktVMDlPTFZKUVF5QnlaWEYxWlhOMElHOWlhbVZqZEM1Y2JpQXFJRUJ3WVhKaGJTQjdhVzF3YjNKMEtDZHFjMjl1TFhKd1l5MWxibWRwYm1VbktTNUtjMjl1VW5CalVtVnpjRzl1YzJVOGRISjFaVDU5SUhKbGN5QXRJRlJvWlNCS1UwOU9MVkpRUXlCeVpYTndiMjV6WlNCdlltcGxZM1F1WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQmZibVY0ZENBdElGUm9aU0JxYzI5dUxYSndZeTFsYm1kcGJtVWdKMjVsZUhRbklHTmhiR3hpWVdOckxseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWlc1a0lDMGdWR2hsSUdwemIyNHRjbkJqTFdWdVoybHVaU0FuWlc1a0p5QmpZV3hzWW1GamF5NWNiaUFxSUVCd1lYSmhiU0I3UlhSb1FXTmpiM1Z1ZEhOUGNIUnBiMjV6ZlNCdmNIUnBiMjV6SUMwZ1ZHaGxJRkpRUXlCdFpYUm9iMlFnYUc5dmEzTXVYRzRnS2k5Y2JtRnplVzVqSUdaMWJtTjBhVzl1SUdWMGFFRmpZMjkxYm5SelNHRnVaR3hsY2loZmNtVnhMQ0J5WlhNc0lGOXVaWGgwTENCbGJtUXNJSHNnWjJWMFFXTmpiM1Z1ZEhNZ2ZTa2dlMXh1SUNCeVpYTXVjbVZ6ZFd4MElEMGdZWGRoYVhRZ1oyVjBRV05qYjNWdWRITW9LVHRjYmlBZ2NtVjBkWEp1SUdWdVpDZ3BPMXh1ZlZ4dUlpd2lhVzF3YjNKMElIc2dUVVZUVTBGSFJWOVVXVkJGSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OWhjSEFuTzF4dVhHNHZLaXBjYmlBcUlGUm9hWE1nVWxCRElHMWxkR2h2WkNCblpYUnpJR0poWTJ0bmNtOTFibVFnYzNSaGRHVWdjbVZzWlhaaGJuUWdkRzhnZEdobElIQnliM1pwWkdWeUxseHVJQ29nVkdobElHSmhZMnRuY205MWJtUWdjMlZ1WkhNZ1VsQkRJRzV2ZEdsbWFXTmhkR2x2Ym5NZ2IyNGdjM1JoZEdVZ1kyaGhibWRsY3l3Z1luVjBJSFJvWlNCd2NtOTJhV1JsY2x4dUlDb2dabWx5YzNRZ2NtVnhkV1Z6ZEhNZ2MzUmhkR1VnYjI0Z2FXNXBkR2xoYkdsNllYUnBiMjR1WEc0Z0tpOWNibHh1WTI5dWMzUWdaMlYwVUhKdmRtbGtaWEpUZEdGMFpTQTlJSHRjYmlBZ2JXVjBhRzlrVG1GdFpYTTZJRnROUlZOVFFVZEZYMVJaVUVVdVIwVlVYMUJTVDFaSlJFVlNYMU5VUVZSRlhTeGNiaUFnYVcxd2JHVnRaVzUwWVhScGIyNDZJR2RsZEZCeWIzWnBaR1Z5VTNSaGRHVklZVzVrYkdWeUxGeHVJQ0JvYjI5clRtRnRaWE02SUh0Y2JpQWdJQ0JuWlhSUWNtOTJhV1JsY2xOMFlYUmxPaUIwY25WbExGeHVJQ0I5TEZ4dWZUdGNibVY0Y0c5eWRDQmtaV1poZFd4MElHZGxkRkJ5YjNacFpHVnlVM1JoZEdVN1hHNWNiaThxS2x4dUlDb2dRSFI1Y0dWa1pXWWdlMjlpYW1WamRIMGdVSEp2ZG1sa1pYSlRkR0YwWlVoaGJtUnNaWEpTWlhOMWJIUmNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCamFHRnBia2xrSUMwZ1ZHaGxJR04xY25KbGJuUWdZMmhoYVc0Z1NVUXVYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UySnZiMnhsWVc1OUlHbHpWVzVzYjJOclpXUWdMU0JYYUdWMGFHVnlJSFJvWlNCbGVIUmxibk5wYjI0Z2FYTWdkVzVzYjJOclpXUWdiM0lnYm05MExseHVJQ29nUUhCeWIzQmxjblI1SUh0emRISnBibWQ5SUc1bGRIZHZjbXRXWlhKemFXOXVJQzBnVkdobElHTjFjbkpsYm5RZ2JtVjBkMjl5YXlCSlJDNWNiaUFxTDF4dVhHNHZLaXBjYmlBcUlFQjBlWEJsWkdWbUlIdHZZbXBsWTNSOUlGQnliM1pwWkdWeVUzUmhkR1ZJWVc1a2JHVnlUM0IwYVc5dWMxeHVJQ29nUUhCeWIzQmxjblI1SUhzb0tTQTlQaUJRY205MmFXUmxjbE4wWVhSbFNHRnVaR3hsY2xKbGMzVnNkSDBnWjJWMFVISnZkbWxrWlhKVGRHRjBaU0F0SUVFZ1puVnVZM1JwYjI0Z2RHaGhkRnh1SUNvZ1oyVjBjeUIwYUdVZ1kzVnljbVZ1ZENCd2NtOTJhV1JsY2lCemRHRjBaUzVjYmlBcUwxeHVYRzR2S2lwY2JpQXFJRUJ3WVhKaGJTQjdhVzF3YjNKMEtDZHFjMjl1TFhKd1l5MWxibWRwYm1VbktTNUtjMjl1VW5CalVtVnhkV1Z6ZER4YlhUNTlJSEpsY1NBdElGUm9aU0JLVTA5T0xWSlFReUJ5WlhGMVpYTjBJRzlpYW1WamRDNWNiaUFxSUVCd1lYSmhiU0I3YVcxd2IzSjBLQ2RxYzI5dUxYSndZeTFsYm1kcGJtVW5LUzVLYzI5dVVuQmpVbVZ6Y0c5dWMyVThVSEp2ZG1sa1pYSlRkR0YwWlVoaGJtUnNaWEpTWlhOMWJIUStmU0J5WlhNZ0xTQlVhR1VnU2xOUFRpMVNVRU1nY21WemNHOXVjMlVnYjJKcVpXTjBMbHh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1gyNWxlSFFnTFNCVWFHVWdhbk52YmkxeWNHTXRaVzVuYVc1bElDZHVaWGgwSnlCallXeHNZbUZqYXk1Y2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1Z1WkNBdElGUm9aU0JxYzI5dUxYSndZeTFsYm1kcGJtVWdKMlZ1WkNjZ1kyRnNiR0poWTJzdVhHNGdLaUJBY0dGeVlXMGdlMUJ5YjNacFpHVnlVM1JoZEdWSVlXNWtiR1Z5VDNCMGFXOXVjMzBnYjNCMGFXOXVjMXh1SUNvdlhHNWhjM2x1WXlCbWRXNWpkR2x2YmlCblpYUlFjbTkyYVdSbGNsTjBZWFJsU0dGdVpHeGxjaWhjYmlBZ2NtVnhMRnh1SUNCeVpYTXNYRzRnSUY5dVpYaDBMRnh1SUNCbGJtUXNYRzRnSUhzZ1oyVjBVSEp2ZG1sa1pYSlRkR0YwWlRvZ1gyZGxkRkJ5YjNacFpHVnlVM1JoZEdVZ2ZTeGNiaWtnZTF4dUlDQnlaWE11Y21WemRXeDBJRDBnZTF4dUlDQWdJQzR1TGloaGQyRnBkQ0JmWjJWMFVISnZkbWxrWlhKVGRHRjBaU2h5WlhFdWIzSnBaMmx1S1Nrc1hHNGdJSDA3WEc0Z0lISmxkSFZ5YmlCbGJtUW9LVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQmhaR1JGZEdobGNtVjFiVU5vWVdsdUlHWnliMjBnSnk0dllXUmtMV1YwYUdWeVpYVnRMV05vWVdsdUp6dGNibWx0Y0c5eWRDQmxkR2hCWTJOdmRXNTBjeUJtY205dElDY3VMMlYwYUMxaFkyTnZkVzUwY3ljN1hHNXBiWEJ2Y25RZ1oyVjBVSEp2ZG1sa1pYSlRkR0YwWlNCbWNtOXRJQ2N1TDJkbGRDMXdjbTkyYVdSbGNpMXpkR0YwWlNjN1hHNXBiWEJ2Y25RZ2JHOW5WMlZpTTFOb2FXMVZjMkZuWlNCbWNtOXRJQ2N1TDJ4dlp5MTNaV0l6TFhOb2FXMHRkWE5oWjJVbk8xeHVhVzF3YjNKMElISmxjWFZsYzNSQlkyTnZkVzUwY3lCbWNtOXRJQ2N1TDNKbGNYVmxjM1F0WVdOamIzVnVkSE1uTzF4dWFXMXdiM0owSUhObGJtUk5aWFJoWkdGMFlTQm1jbTl0SUNjdUwzTmxibVF0YldWMFlXUmhkR0VuTzF4dWFXMXdiM0owSUhOM2FYUmphRVYwYUdWeVpYVnRRMmhoYVc0Z1puSnZiU0FuTGk5emQybDBZMmd0WlhSb1pYSmxkVzB0WTJoaGFXNG5PMXh1YVcxd2IzSjBJSGRoZEdOb1FYTnpaWFFnWm5KdmJTQW5MaTkzWVhSamFDMWhjM05sZENjN1hHNWNibU52Ym5OMElHaGhibVJzWlhKeklEMGdXMXh1SUNCaFpHUkZkR2hsY21WMWJVTm9ZV2x1TEZ4dUlDQmxkR2hCWTJOdmRXNTBjeXhjYmlBZ1oyVjBVSEp2ZG1sa1pYSlRkR0YwWlN4Y2JpQWdiRzluVjJWaU0xTm9hVzFWYzJGblpTeGNiaUFnY21WeGRXVnpkRUZqWTI5MWJuUnpMRnh1SUNCelpXNWtUV1YwWVdSaGRHRXNYRzRnSUhOM2FYUmphRVYwYUdWeVpYVnRRMmhoYVc0c1hHNGdJSGRoZEdOb1FYTnpaWFFzWEc1ZE8xeHVaWGh3YjNKMElHUmxabUYxYkhRZ2FHRnVaR3hsY25NN1hHNGlMQ0pwYlhCdmNuUWdleUJOUlZOVFFVZEZYMVJaVUVVZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMMkZ3Y0NjN1hHNXBiWEJ2Y25RZ2V5Qk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMMjFsZEdGdFpYUnlhV056Snp0Y2JseHVMeW9xWEc0Z0tpQlVhR2x6SUZKUVF5QnRaWFJvYjJRZ2FYTWdZMkZzYkdWa0lHSjVJSFJvWlNCcGJuQmhaMlVnY0hKdmRtbGtaWElnZDJobGJtVjJaWElnYVhRZ1pHVjBaV04wY3lCMGFHVmNiaUFxSUdGalkyVnpjMmx1WnlCdlppQmhJRzV2YmkxbGVHbHpkR1Z1ZENCd2NtOXdaWEowZVNCdmJpQnZkWElnZDJsdVpHOTNMbmRsWWpNZ2MyaHBiUzVjYmlBcUlGZGxJR052Ykd4bFkzUWdkR2hwY3lCa1lYUmhJSFJ2SUhWdVpHVnljM1JoYm1RZ2QyaHBZMmdnYzJsMFpYTWdZWEpsSUdKeVpXRnJhVzVuSUdSMVpTQjBieUIwYUdWY2JpQXFJSEpsYlc5MllXd2diMllnYjNWeUlIZHBibVJ2ZHk1M1pXSXpMbHh1SUNvdlhHNWNibU52Ym5OMElHeHZaMWRsWWpOVGFHbHRWWE5oWjJVZ1BTQjdYRzRnSUcxbGRHaHZaRTVoYldWek9pQmJUVVZUVTBGSFJWOVVXVkJGTGt4UFIxOVhSVUl6WDFOSVNVMWZWVk5CUjBWZExGeHVJQ0JwYlhCc1pXMWxiblJoZEdsdmJqb2diRzluVjJWaU0xTm9hVzFWYzJGblpVaGhibVJzWlhJc1hHNGdJR2h2YjJ0T1lXMWxjem9nZTF4dUlDQWdJSE5sYm1STlpYUnlhV056T2lCMGNuVmxMRnh1SUNBZ0lHZGxkRmRsWWpOVGFHbHRWWE5oWjJWVGRHRjBaVG9nZEhKMVpTeGNiaUFnSUNCelpYUlhaV0l6VTJocGJWVnpZV2RsVW1WamIzSmtaV1E2SUhSeWRXVXNYRzRnSUgwc1hHNTlPMXh1Wlhod2IzSjBJR1JsWm1GMWJIUWdiRzluVjJWaU0xTm9hVzFWYzJGblpUdGNibHh1THlvcVhHNGdLaUJBZEhsd1pXUmxaaUI3YjJKcVpXTjBmU0JNYjJkWFpXSXpVMmhwYlZWellXZGxUM0IwYVc5dWMxeHVJQ29nUUhCeWIzQmxjblI1SUh0R2RXNWpkR2x2Ym4wZ2MyVnVaRTFsZEhKcFkzTWdMU0JCSUdaMWJtTjBhVzl1SUhSb1lYUWdjbVZuYVhOMFpYSnpJR0VnYldWMGNtbGpjeUJsZG1WdWRDNWNiaUFxSUVCd2NtOXdaWEowZVNCN1JuVnVZM1JwYjI1OUlHZGxkRmRsWWpOVGFHbHRWWE5oWjJWVGRHRjBaU0F0SUVFZ1puVnVZM1JwYjI0Z2RHaGhkQ0JuWlhSeklIZGxZak1nYzJocGJWeHVJQ29nZFhOaFoyVWdjM1JoZEdVZ1ptOXlJSFJvWlNCbmFYWmxiaUJ2Y21sbmFXNHVYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UwWjFibU4wYVc5dWZTQnpaWFJYWldJelUyaHBiVlZ6WVdkbFVtVmpiM0prWldRZ0xTQkJJR1oxYm1OMGFXOXVJSFJvWVhRZ2NtVmpiM0prY3lCM1pXSXpJSE5vYVcxY2JpQXFJSFZ6WVdkbElHWnZjaUJoSUhCaGNuUnBZM1ZzWVhJZ2IzSnBaMmx1TGx4dUlDb3ZYRzVjYmk4cUtseHVJQ29nUUhCaGNtRnRJSHRwYlhCdmNuUW9KMnB6YjI0dGNuQmpMV1Z1WjJsdVpTY3BMa3B6YjI1U2NHTlNaWEYxWlhOMFBIVnVhMjV2ZDI0K2ZTQnlaWEVnTFNCVWFHVWdTbE5QVGkxU1VFTWdjbVZ4ZFdWemRDQnZZbXBsWTNRdVhHNGdLaUJBY0dGeVlXMGdlMmx0Y0c5eWRDZ25hbk52YmkxeWNHTXRaVzVuYVc1bEp5a3VTbk52YmxKd1kxSmxjM0J2Ym5ObFBIUnlkV1UrZlNCeVpYTWdMU0JVYUdVZ1NsTlBUaTFTVUVNZ2NtVnpjRzl1YzJVZ2IySnFaV04wTGx4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdYMjVsZUhRZ0xTQlVhR1VnYW5OdmJpMXljR010Wlc1bmFXNWxJQ2R1WlhoMEp5QmpZV3hzWW1GamF5NWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdWdVpDQXRJRlJvWlNCcWMyOXVMWEp3WXkxbGJtZHBibVVnSjJWdVpDY2dZMkZzYkdKaFkyc3VYRzRnS2lCQWNHRnlZVzBnZTB4dloxZGxZak5UYUdsdFZYTmhaMlZQY0hScGIyNXpmU0J2Y0hScGIyNXpYRzRnS2k5Y2JtWjFibU4wYVc5dUlHeHZaMWRsWWpOVGFHbHRWWE5oWjJWSVlXNWtiR1Z5S0Z4dUlDQnlaWEVzWEc0Z0lISmxjeXhjYmlBZ1gyNWxlSFFzWEc0Z0lHVnVaQ3hjYmlBZ2V5QnpaVzVrVFdWMGNtbGpjeXdnWjJWMFYyVmlNMU5vYVcxVmMyRm5aVk4wWVhSbExDQnpaWFJYWldJelUyaHBiVlZ6WVdkbFVtVmpiM0prWldRZ2ZTeGNiaWtnZTF4dUlDQmpiMjV6ZENCN0lHOXlhV2RwYmlCOUlEMGdjbVZ4TzF4dUlDQnBaaUFvWjJWMFYyVmlNMU5vYVcxVmMyRm5aVk4wWVhSbEtHOXlhV2RwYmlrZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJSE5sZEZkbFlqTlRhR2x0VlhOaFoyVlNaV052Y21SbFpDaHZjbWxuYVc0cE8xeHVYRzRnSUNBZ2MyVnVaRTFsZEhKcFkzTW9YRzRnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJR1YyWlc1ME9pQmdWMlZpYzJsMFpTQkJZMk5sYzNObFpDQjNhVzVrYjNjdWQyVmlNeUJUYUdsdFlDeGNiaUFnSUNBZ0lDQWdZMkYwWldkdmNuazZJRTFsZEdGTlpYUnlhV056UlhabGJuUkRZWFJsWjI5eWVTNUpibkJoWjJWUWNtOTJhV1JsY2l4Y2JpQWdJQ0FnSUNBZ2NtVm1aWEp5WlhJNklIdGNiaUFnSUNBZ0lDQWdJQ0IxY213NklHOXlhV2RwYml4Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJR1Y0WTJ4MVpHVk5aWFJoVFdWMGNtbGpjMGxrT2lCMGNuVmxMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQXBPMXh1SUNCOVhHNWNiaUFnY21WekxuSmxjM1ZzZENBOUlIUnlkV1U3WEc0Z0lISmxkSFZ5YmlCbGJtUW9LVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQjdJR1YwYUVWeWNtOXljeUI5SUdaeWIyMGdKMlYwYUMxeWNHTXRaWEp5YjNKekp6dGNibWx0Y0c5eWRDQjdJRTFGVTFOQlIwVmZWRmxRUlNCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZZWEJ3Snp0Y2JseHVMeW9xWEc0Z0tpQlVhR2x6SUcxbGRHaHZaQ0JoZEhSbGJYQjBjeUIwYnlCeVpYUnlhV1YyWlNCMGFHVWdSWFJvWlhKbGRXMGdZV05qYjNWdWRITWdZWFpoYVd4aFlteGxJSFJ2SUhSb1pWeHVJQ29nY21WeGRXVnpkR1Z5TENCdmNpQnBibWwwYVdGMFpTQmhJSEpsY1hWbGMzUWdabTl5SUdGalkyOTFiblFnWVdOalpYTnpJR2xtSUc1dmJtVWdZWEpsSUdOMWNuSmxiblJzZVZ4dUlDb2dZWFpoYVd4aFlteGxMaUJKZENCcGN5QmxjM05sYm5ScFlXeHNlU0JoSUhkeVlYQndaWElnYjJZZ2QyRnNiR1YwWDNKbGNYVmxjM1JRWlhKdGFYTnphVzl1Y3lCMGFHRjBYRzRnS2lCdmJteDVJR1Z5Y205eWN5QnBaaUIwYUdVZ2RYTmxjaUJ5WldwbFkzUnpJSFJvWlNCeVpYRjFaWE4wTGlCWFpTQnRZV2x1ZEdGcGJpQjBhR1VnYldWMGFHOWtJR1p2Y2x4dUlDb2dZbUZqYTNkaGNtUnpJR052YlhCaGRHbGlhV3hwZEhrZ2NtVmhjMjl1Y3k1Y2JpQXFMMXh1WEc1amIyNXpkQ0J5WlhGMVpYTjBSWFJvWlhKbGRXMUJZMk52ZFc1MGN5QTlJSHRjYmlBZ2JXVjBhRzlrVG1GdFpYTTZJRnROUlZOVFFVZEZYMVJaVUVVdVJWUklYMUpGVVZWRlUxUmZRVU5EVDFWT1ZGTmRMRnh1SUNCcGJYQnNaVzFsYm5SaGRHbHZiam9nY21WeGRXVnpkRVYwYUdWeVpYVnRRV05qYjNWdWRITklZVzVrYkdWeUxGeHVJQ0JvYjI5clRtRnRaWE02SUh0Y2JpQWdJQ0J2Y21sbmFXNDZJSFJ5ZFdVc1hHNGdJQ0FnWjJWMFFXTmpiM1Z1ZEhNNklIUnlkV1VzWEc0Z0lDQWdaMlYwVlc1c2IyTnJVSEp2YldselpUb2dkSEoxWlN4Y2JpQWdJQ0JvWVhOUVpYSnRhWE56YVc5dU9pQjBjblZsTEZ4dUlDQWdJSEpsY1hWbGMzUkJZMk52ZFc1MGMxQmxjbTFwYzNOcGIyNDZJSFJ5ZFdVc1hHNGdJSDBzWEc1OU8xeHVaWGh3YjNKMElHUmxabUYxYkhRZ2NtVnhkV1Z6ZEVWMGFHVnlaWFZ0UVdOamIzVnVkSE03WEc1Y2JpOHZJRlZ6WldRZ2RHOGdjbUYwWlMxc2FXMXBkQ0J3Wlc1a2FXNW5JSEpsY1hWbGMzUnpJSFJ2SUc5dVpTQndaWElnYjNKcFoybHVYRzVqYjI1emRDQnNiMk5yY3lBOUlHNWxkeUJUWlhRb0tUdGNibHh1THlvcVhHNGdLaUJBZEhsd1pXUmxaaUI3VW1WamIzSmtQSE4wY21sdVp5d2djM1J5YVc1bklId2dSblZ1WTNScGIyNCtmU0JTWlhGMVpYTjBSWFJvWlhKbGRXMUJZMk52ZFc1MGMwOXdkR2x2Ym5OY2JpQXFJRUJ3Y205d1pYSjBlU0I3YzNSeWFXNW5mU0J2Y21sbmFXNGdMU0JVYUdVZ2NtVnhkV1Z6ZEdsdVp5QnZjbWxuYVc0dVhHNGdLaUJBY0hKdmNHVnlkSGtnZTBaMWJtTjBhVzl1ZlNCblpYUkJZMk52ZFc1MGN5QXRJRWRsZEhNZ2RHaGxJR0ZqWTI5MWJuUnpJR1p2Y2lCMGFHVWdjbVZ4ZFdWemRHbHVaMXh1SUNvZ2IzSnBaMmx1TGx4dUlDb2dRSEJ5YjNCbGNuUjVJSHRHZFc1amRHbHZibjBnWjJWMFZXNXNiMk5yVUhKdmJXbHpaU0F0SUVkbGRITWdZU0J3Y205dGFYTmxJSFJvWVhRZ2NtVnpiMngyWlhNZ2QyaGxibHh1SUNvZ2RHaGxJR1Y0ZEdWdWMybHZiaUIxYm14dlkydHpMbHh1SUNvZ1FIQnliM0JsY25SNUlIdEdkVzVqZEdsdmJuMGdhR0Z6VUdWeWJXbHpjMmx2YmlBdElGSmxkSFZ5Ym5NZ2QyaGxkR2hsY2lCMGFHVWdjbVZ4ZFdWemRHbHVaeUJ2Y21sbmFXNWNiaUFxSUdoaGN5QjBhR1VnYzNCbFkybG1hV1ZrSUhCbGNtMXBjM05wYjI0dVhHNGdLaUJBY0hKdmNHVnlkSGtnZTBaMWJtTjBhVzl1ZlNCeVpYRjFaWE4wUVdOamIzVnVkSE5RWlhKdGFYTnphVzl1SUMwZ1VtVnhkV1Z6ZEhNZ2RHaGxJR0JsZEdoZllXTmpiM1Z1ZEhOZ1hHNGdLaUJ3WlhKdGFYTnphVzl1SUdadmNpQjBhR1VnY21WeGRXVnpkR2x1WnlCdmNtbG5hVzR1WEc0Z0tpOWNibHh1THlvcVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0cGJYQnZjblFvSjJwemIyNHRjbkJqTFdWdVoybHVaU2NwTGtwemIyNVNjR05TWlhGMVpYTjBQSFZ1YTI1dmQyNCtmU0JmY21WeElDMGdWR2hsSUVwVFQwNHRVbEJESUhKbGNYVmxjM1FnYjJKcVpXTjBMbHh1SUNvZ1FIQmhjbUZ0SUh0cGJYQnZjblFvSjJwemIyNHRjbkJqTFdWdVoybHVaU2NwTGtwemIyNVNjR05TWlhOd2IyNXpaVHgwY25WbFBuMGdjbVZ6SUMwZ1ZHaGxJRXBUVDA0dFVsQkRJSEpsYzNCdmJuTmxJRzlpYW1WamRDNWNiaUFxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUY5dVpYaDBJQzBnVkdobElHcHpiMjR0Y25CakxXVnVaMmx1WlNBbmJtVjRkQ2NnWTJGc2JHSmhZMnN1WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQmxibVFnTFNCVWFHVWdhbk52YmkxeWNHTXRaVzVuYVc1bElDZGxibVFuSUdOaGJHeGlZV05yTGx4dUlDb2dRSEJoY21GdElIdFNaWEYxWlhOMFJYUm9aWEpsZFcxQlkyTnZkVzUwYzA5d2RHbHZibk45SUc5d2RHbHZibk1nTFNCVWFHVWdVbEJESUcxbGRHaHZaQ0JvYjI5cmN5NWNiaUFxTDF4dVlYTjVibU1nWm5WdVkzUnBiMjRnY21WeGRXVnpkRVYwYUdWeVpYVnRRV05qYjNWdWRITklZVzVrYkdWeUtGeHVJQ0JmY21WeExGeHVJQ0J5WlhNc1hHNGdJRjl1WlhoMExGeHVJQ0JsYm1Rc1hHNGdJSHRjYmlBZ0lDQnZjbWxuYVc0c1hHNGdJQ0FnWjJWMFFXTmpiM1Z1ZEhNc1hHNGdJQ0FnWjJWMFZXNXNiMk5yVUhKdmJXbHpaU3hjYmlBZ0lDQm9ZWE5RWlhKdGFYTnphVzl1TEZ4dUlDQWdJSEpsY1hWbGMzUkJZMk52ZFc1MGMxQmxjbTFwYzNOcGIyNHNYRzRnSUgwc1hHNHBJSHRjYmlBZ2FXWWdLR3h2WTJ0ekxtaGhjeWh2Y21sbmFXNHBLU0I3WEc0Z0lDQWdjbVZ6TG1WeWNtOXlJRDBnWlhSb1JYSnliM0p6TG5Kd1l5NXlaWE52ZFhKalpWVnVZWFpoYVd4aFlteGxLRnh1SUNBZ0lDQWdZRUZzY21WaFpIa2djSEp2WTJWemMybHVaeUFrZTAxRlUxTkJSMFZmVkZsUVJTNUZWRWhmVWtWUlZVVlRWRjlCUTBOUFZVNVVVMzB1SUZCc1pXRnpaU0IzWVdsMExtQXNYRzRnSUNBZ0tUdGNiaUFnSUNCeVpYUjFjbTRnWlc1a0tDazdYRzRnSUgxY2JseHVJQ0JwWmlBb2FHRnpVR1Z5YldsemMybHZiaWhOUlZOVFFVZEZYMVJaVUVVdVJWUklYMEZEUTA5VlRsUlRLU2tnZTF4dUlDQWdJQzh2SUZkbElIZGhhWFFnWm05eUlIUm9aU0JsZUhSbGJuTnBiMjRnZEc4Z2RXNXNiMk5ySUdsdUlIUm9hWE1nWTJGelpTQnZibXg1TENCaVpXTmhkWE5sSUhCbGNtMXBjM05wYjI1Y2JpQWdJQ0F2THlCeVpYRjFaWE4wY3lCaGNtVWdhR0Z1Wkd4bFpDQjNhR1Z1SUhSb1pTQmxlSFJsYm5OcGIyNGdhWE1nZFc1c2IyTnJaV1FzSUhKbFoyRnlaR3hsYzNNZ2IyWWdkR2hsWEc0Z0lDQWdMeThnYkc5amF5QnpkR0YwWlNCM2FHVnVJSFJvWlhrZ2QyVnlaU0J5WldObGFYWmxaQzVjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnYkc5amEzTXVZV1JrS0c5eWFXZHBiaWs3WEc0Z0lDQWdJQ0JoZDJGcGRDQm5aWFJWYm14dlkydFFjbTl0YVhObEtIUnlkV1VwTzF4dUlDQWdJQ0FnY21WekxuSmxjM1ZzZENBOUlHRjNZV2wwSUdkbGRFRmpZMjkxYm5SektDazdYRzRnSUNBZ0lDQmxibVFvS1R0Y2JpQWdJQ0I5SUdOaGRHTm9JQ2hsY25KdmNpa2dlMXh1SUNBZ0lDQWdaVzVrS0dWeWNtOXlLVHRjYmlBZ0lDQjlJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdiRzlqYTNNdVpHVnNaWFJsS0c5eWFXZHBiaWs3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMWJtUmxabWx1WldRN1hHNGdJSDFjYmx4dUlDQXZMeUJKWmlCdWJ5QmhZMk52ZFc1MGN5d2djbVZ4ZFdWemRDQjBhR1VnWVdOamIzVnVkSE1nY0dWeWJXbHpjMmx2Ymx4dUlDQjBjbmtnZTF4dUlDQWdJR0YzWVdsMElISmxjWFZsYzNSQlkyTnZkVzUwYzFCbGNtMXBjM05wYjI0b0tUdGNiaUFnZlNCallYUmphQ0FvWlhKeUtTQjdYRzRnSUNBZ2NtVnpMbVZ5Y205eUlEMGdaWEp5TzF4dUlDQWdJSEpsZEhWeWJpQmxibVFvS1R0Y2JpQWdmVnh1WEc0Z0lDOHZJRWRsZENCMGFHVWdZWEJ3Y205MlpXUWdZV05qYjNWdWRITmNiaUFnWTI5dWMzUWdZV05qYjNWdWRITWdQU0JoZDJGcGRDQm5aWFJCWTJOdmRXNTBjeWdwTzF4dUlDQXZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdaV3h6WlRvZ2RHOXZJR2hoY21RZ2RHOGdhVzVrZFdObExDQnpaV1VnWW1Wc2IzY2dZMjl0YldWdWRDQXFMMXh1SUNCcFppQW9ZV05qYjNWdWRITXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJSEpsY3k1eVpYTjFiSFFnUFNCaFkyTnZkVzUwY3p0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNBdkx5QlVhR2x6SUhOb2IzVnNaQ0J1WlhabGNpQm9ZWEJ3Wlc0c0lHSmxZMkYxYzJVZ2FYUWdjMmh2ZFd4a0lHSmxJR05oZFdkb2RDQnBiaUIwYUdWY2JpQWdJQ0F2THlCaFltOTJaU0JqWVhSamFDQmpiR0YxYzJWY2JpQWdJQ0J5WlhNdVpYSnliM0lnUFNCbGRHaEZjbkp2Y25NdWNuQmpMbWx1ZEdWeWJtRnNLRnh1SUNBZ0lDQWdKMEZqWTI5MWJuUnpJSFZ1Wlhod1pXTjBaV1JzZVNCMWJtRjJZV2xzWVdKc1pTNGdVR3hsWVhObElISmxjRzl5ZENCMGFHbHpJR0oxWnk0bkxGeHVJQ0FnSUNrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z1pXNWtLQ2s3WEc1OVhHNGlMQ0pwYlhCdmNuUWdleUJsZEdoRmNuSnZjbk1nZlNCbWNtOXRJQ2RsZEdndGNuQmpMV1Z5Y205eWN5YzdYRzVwYlhCdmNuUWdleUJOUlZOVFFVZEZYMVJaVUVVZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMMkZ3Y0NjN1hHNWNiaThxS2x4dUlDb2dWR2hwY3lCcGJuUmxjbTVoYkNCdFpYUm9iMlFnYVhNZ2RYTmxaQ0JpZVNCdmRYSWdaWGgwWlhKdVlXd2djSEp2ZG1sa1pYSWdkRzhnYzJWdVpDQnRaWFJoWkdGMFlTQmhZbTkxZEZ4dUlDb2djR1Z5YldsemMybHZiaUJ6ZFdKcVpXTjBjeUJ6YnlCMGFHRjBJSGRsSUdOaGJpQmxMbWN1SUdScGMzQnNZWGtnWVNCd2NtOXdaWElnYm1GdFpTQmhibVFnYVdOdmJpQnBibHh1SUNvZ2IzVnlJRlZKTGx4dUlDb3ZYRzVjYm1OdmJuTjBJSE5sYm1STlpYUmhaR0YwWVNBOUlIdGNiaUFnYldWMGFHOWtUbUZ0WlhNNklGdE5SVk5UUVVkRlgxUlpVRVV1VTBWT1JGOU5SVlJCUkVGVVFWMHNYRzRnSUdsdGNHeGxiV1Z1ZEdGMGFXOXVPaUJ6Wlc1a1RXVjBZV1JoZEdGSVlXNWtiR1Z5TEZ4dUlDQm9iMjlyVG1GdFpYTTZJSHRjYmlBZ0lDQmhaR1JUZFdKcVpXTjBUV1YwWVdSaGRHRTZJSFJ5ZFdVc1hHNGdJQ0FnYzNWaWFtVmpkRlI1Y0dVNklIUnlkV1VzWEc0Z0lIMHNYRzU5TzF4dVpYaHdiM0owSUdSbFptRjFiSFFnYzJWdVpFMWxkR0ZrWVhSaE8xeHVYRzR2S2lwY2JpQXFJRUIwZVhCbFpHVm1JSHRTWldOdmNtUThjM1J5YVc1bkxDQkdkVzVqZEdsdmJqNTlJRk5sYm1STlpYUmhaR0YwWVU5d2RHbHZibk5jYmlBcUlFQndjbTl3WlhKMGVTQjdSblZ1WTNScGIyNTlJR0ZrWkZOMVltcGxZM1JOWlhSaFpHRjBZU0F0SUVFZ1puVnVZM1JwYjI0Z2RHaGhkQ0J5WldOdmNtUnpJSE4xWW1wbFkzUmNiaUFxSUcxbGRHRmtZWFJoTENCaWIzVnVaQ0IwYnlCMGFHVWdjbVZ4ZFdWemRHbHVaeUJ2Y21sbmFXNHVYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UzTjBjbWx1WjMwZ2MzVmlhbVZqZEZSNWNHVWdMU0JVYUdVZ2RIbHdaU0J2WmlCMGFHVWdjbVZ4ZFdWemRHbHVaeUJ2Y21sbmFXNGdMeUJ6ZFdKcVpXTjBMbHh1SUNvdlhHNWNiaThxS2x4dUlDb2dRSEJoY21GdElIdHBiWEJ2Y25Rb0oycHpiMjR0Y25CakxXVnVaMmx1WlNjcExrcHpiMjVTY0dOU1pYRjFaWE4wUEhWdWEyNXZkMjQrZlNCeVpYRWdMU0JVYUdVZ1NsTlBUaTFTVUVNZ2NtVnhkV1Z6ZENCdlltcGxZM1F1WEc0Z0tpQkFjR0Z5WVcwZ2UybHRjRzl5ZENnbmFuTnZiaTF5Y0dNdFpXNW5hVzVsSnlrdVNuTnZibEp3WTFKbGMzQnZibk5sUEhSeWRXVStmU0J5WlhNZ0xTQlVhR1VnU2xOUFRpMVNVRU1nY21WemNHOXVjMlVnYjJKcVpXTjBMbHh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1gyNWxlSFFnTFNCVWFHVWdhbk52YmkxeWNHTXRaVzVuYVc1bElDZHVaWGgwSnlCallXeHNZbUZqYXk1Y2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1Z1WkNBdElGUm9aU0JxYzI5dUxYSndZeTFsYm1kcGJtVWdKMlZ1WkNjZ1kyRnNiR0poWTJzdVhHNGdLaUJBY0dGeVlXMGdlMU5sYm1STlpYUmhaR0YwWVU5d2RHbHZibk45SUc5d2RHbHZibk5jYmlBcUwxeHVablZ1WTNScGIyNGdjMlZ1WkUxbGRHRmtZWFJoU0dGdVpHeGxjaWhjYmlBZ2NtVnhMRnh1SUNCeVpYTXNYRzRnSUY5dVpYaDBMRnh1SUNCbGJtUXNYRzRnSUhzZ1lXUmtVM1ZpYW1WamRFMWxkR0ZrWVhSaExDQnpkV0pxWldOMFZIbHdaU0I5TEZ4dUtTQjdYRzRnSUdOdmJuTjBJSHNnYjNKcFoybHVMQ0J3WVhKaGJYTWdmU0E5SUhKbGNUdGNiaUFnYVdZZ0tIQmhjbUZ0Y3lBbUppQjBlWEJsYjJZZ2NHRnlZVzF6SUQwOVBTQW5iMkpxWldOMEp5QW1KaUFoUVhKeVlYa3VhWE5CY25KaGVTaHdZWEpoYlhNcEtTQjdYRzRnSUNBZ1kyOXVjM1FnZXlCcFkyOXVJRDBnYm5Wc2JDd2dibUZ0WlNBOUlHNTFiR3dzSUM0dUxuSmxiV0ZwYm1sdVoxQmhjbUZ0Y3lCOUlEMGdjR0Z5WVcxek8xeHVYRzRnSUNBZ1lXUmtVM1ZpYW1WamRFMWxkR0ZrWVhSaEtIdGNiaUFnSUNBZ0lDNHVMbkpsYldGcGJtbHVaMUJoY21GdGN5eGNiaUFnSUNBZ0lHbGpiMjVWY213NklHbGpiMjRzWEc0Z0lDQWdJQ0J1WVcxbExGeHVJQ0FnSUNBZ2MzVmlhbVZqZEZSNWNHVXNYRzRnSUNBZ0lDQnZjbWxuYVc0c1hHNGdJQ0FnZlNrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUdWdVpDaGxkR2hGY25KdmNuTXVjbkJqTG1sdWRtRnNhV1JRWVhKaGJYTW9leUJrWVhSaE9pQndZWEpoYlhNZ2ZTa3BPMXh1SUNCOVhHNWNiaUFnY21WekxuSmxjM1ZzZENBOUlIUnlkV1U3WEc0Z0lISmxkSFZ5YmlCbGJtUW9LVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQjdJR1YwYUVWeWNtOXljeUI5SUdaeWIyMGdKMlYwYUMxeWNHTXRaWEp5YjNKekp6dGNibWx0Y0c5eWRDQjdJRzl0YVhRZ2ZTQm1jbTl0SUNkc2IyUmhjMmduTzF4dWFXMXdiM0owSUhzZ1FYQndjbTkyWVd4VWVYQmxJSDBnWm5KdmJTQW5RRzFsZEdGdFlYTnJMMk52Ym5SeWIyeHNaWEl0ZFhScGJITW5PMXh1YVcxd2IzSjBJSHNnVFVWVFUwRkhSVjlVV1ZCRklIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZMaTR2YzJoaGNtVmtMMk52Ym5OMFlXNTBjeTloY0hBbk8xeHVhVzF3YjNKMElIdGNiaUFnUTBoQlNVNWZTVVJmVkU5ZlZGbFFSVjlOUVZBc1hHNGdJRTVGVkZkUFVrdGZWRTlmVGtGTlJWOU5RVkFzWEc0Z0lFTklRVWxPWDBsRVgxUlBYMUpRUTE5VlVreGZUVUZRTEZ4dUlDQkRWVkpTUlU1RFdWOVRXVTFDVDB4VExGeHVJQ0JDVlVsTVZGOUpUbDlKVGtaVlVrRmZUa1ZVVjA5U1MxTXNYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmJtVjBkMjl5YXljN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JwYzFCeVpXWnBlR1ZrUm05eWJXRjBkR1ZrU0dWNFUzUnlhVzVuTEZ4dUlDQnBjMU5oWm1WRGFHRnBia2xrTEZ4dWZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZiVzlrZFd4bGN5OXVaWFIzYjNKckxuVjBhV3h6Snp0Y2JseHVZMjl1YzNRZ2MzZHBkR05vUlhSb1pYSmxkVzFEYUdGcGJpQTlJSHRjYmlBZ2JXVjBhRzlrVG1GdFpYTTZJRnROUlZOVFFVZEZYMVJaVUVVdVUxZEpWRU5JWDBWVVNFVlNSVlZOWDBOSVFVbE9YU3hjYmlBZ2FXMXdiR1Z0Wlc1MFlYUnBiMjQ2SUhOM2FYUmphRVYwYUdWeVpYVnRRMmhoYVc1SVlXNWtiR1Z5TEZ4dUlDQm9iMjlyVG1GdFpYTTZJSHRjYmlBZ0lDQm5aWFJEZFhKeVpXNTBRMmhoYVc1SlpEb2dkSEoxWlN4Y2JpQWdJQ0JtYVc1a1RtVjBkMjl5YTBOdmJtWnBaM1Z5WVhScGIyNUNlVG9nZEhKMVpTeGNiaUFnSUNCelpYUlFjbTkyYVdSbGNsUjVjR1U2SUhSeWRXVXNYRzRnSUNBZ2MyVjBRV04wYVhabFRtVjBkMjl5YXpvZ2RISjFaU3hjYmlBZ0lDQnlaWEYxWlhOMFZYTmxja0Z3Y0hKdmRtRnNPaUIwY25WbExGeHVJQ0I5TEZ4dWZUdGNibVY0Y0c5eWRDQmtaV1poZFd4MElITjNhWFJqYUVWMGFHVnlaWFZ0UTJoaGFXNDdYRzVjYm1aMWJtTjBhVzl1SUdacGJtUkZlR2x6ZEdsdVowNWxkSGR2Y21zb1kyaGhhVzVKWkN3Z1ptbHVaRTVsZEhkdmNtdERiMjVtYVdkMWNtRjBhVzl1UW5rcElIdGNiaUFnYVdZZ0tGeHVJQ0FnSUU5aWFtVmpkQzUyWVd4MVpYTW9RbFZKVEZSZlNVNWZTVTVHVlZKQlgwNUZWRmRQVWt0VEtWeHVJQ0FnSUNBZ0xtMWhjQ2dvZXlCamFHRnBia2xrT2lCcFpDQjlLU0E5UGlCcFpDbGNiaUFnSUNBZ0lDNXBibU5zZFdSbGN5aGphR0ZwYmtsa0tWeHVJQ0FwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdZMmhoYVc1SlpDeGNiaUFnSUNBZ0lIUnBZMnRsY2pvZ1ExVlNVa1ZPUTFsZlUxbE5RazlNVXk1RlZFZ3NYRzRnSUNBZ0lDQnVhV05yYm1GdFpUb2dUa1ZVVjA5U1MxOVVUMTlPUVUxRlgwMUJVRnRqYUdGcGJrbGtYU3hjYmlBZ0lDQWdJSEp3WTFWeWJEb2dRMGhCU1U1ZlNVUmZWRTlmVWxCRFgxVlNURjlOUVZCYlkyaGhhVzVKWkYwc1hHNGdJQ0FnSUNCMGVYQmxPaUJEU0VGSlRsOUpSRjlVVDE5VVdWQkZYMDFCVUZ0amFHRnBia2xrWFN4Y2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdacGJtUk9aWFIzYjNKclEyOXVabWxuZFhKaGRHbHZia0o1S0hzZ1kyaGhhVzVKWkNCOUtUdGNibjFjYmx4dVlYTjVibU1nWm5WdVkzUnBiMjRnYzNkcGRHTm9SWFJvWlhKbGRXMURhR0ZwYmtoaGJtUnNaWElvWEc0Z0lISmxjU3hjYmlBZ2NtVnpMRnh1SUNCZmJtVjRkQ3hjYmlBZ1pXNWtMRnh1SUNCN1hHNGdJQ0FnWjJWMFEzVnljbVZ1ZEVOb1lXbHVTV1FzWEc0Z0lDQWdabWx1WkU1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dVFua3NYRzRnSUNBZ2MyVjBVSEp2ZG1sa1pYSlVlWEJsTEZ4dUlDQWdJSE5sZEVGamRHbDJaVTVsZEhkdmNtc3NYRzRnSUNBZ2NtVnhkV1Z6ZEZWelpYSkJjSEJ5YjNaaGJDeGNiaUFnZlN4Y2Jpa2dlMXh1SUNCcFppQW9JWEpsY1M1d1lYSmhiWE0vTGxzd1hTQjhmQ0IwZVhCbGIyWWdjbVZ4TG5CaGNtRnRjMXN3WFNBaFBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQnlaWFIxY200Z1pXNWtLRnh1SUNBZ0lDQWdaWFJvUlhKeWIzSnpMbkp3WXk1cGJuWmhiR2xrVUdGeVlXMXpLSHRjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVG9nWUVWNGNHVmpkR1ZrSUhOcGJtZHNaU3dnYjJKcVpXTjBJSEJoY21GdFpYUmxjaTRnVW1WalpXbDJaV1E2WEZ4dUpIdEtVMDlPTG5OMGNtbHVaMmxtZVNoY2JpQWdJQ0FnSUNBZ0lDQnlaWEV1Y0dGeVlXMXpMRnh1SUNBZ0lDQWdJQ0FwZldBc1hHNGdJQ0FnSUNCOUtTeGNiaUFnSUNBcE8xeHVJQ0I5WEc1Y2JpQWdZMjl1YzNRZ2V5QnZjbWxuYVc0Z2ZTQTlJSEpsY1R0Y2JseHVJQ0JqYjI1emRDQjdJR05vWVdsdVNXUWdmU0E5SUhKbGNTNXdZWEpoYlhOYk1GMDdYRzVjYmlBZ1kyOXVjM1FnYjNSb1pYSkxaWGx6SUQwZ1QySnFaV04wTG10bGVYTW9iMjFwZENoeVpYRXVjR0Z5WVcxeld6QmRMQ0JiSjJOb1lXbHVTV1FuWFNrcE8xeHVYRzRnSUdsbUlDaHZkR2hsY2t0bGVYTXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQmxibVFvWEc0Z0lDQWdJQ0JsZEdoRmNuSnZjbk11Y25CakxtbHVkbUZzYVdSUVlYSmhiWE1vZTF4dUlDQWdJQ0FnSUNCdFpYTnpZV2RsT2lCZ1VtVmpaV2wyWldRZ2RXNWxlSEJsWTNSbFpDQnJaWGx6SUc5dUlHOWlhbVZqZENCd1lYSmhiV1YwWlhJdUlGVnVjM1Z3Y0c5eWRHVmtJR3RsZVhNNlhGeHVKSHR2ZEdobGNrdGxlWE45WUN4Y2JpQWdJQ0FnSUgwcExGeHVJQ0FnSUNrN1hHNGdJSDFjYmx4dUlDQmpiMjV6ZENCZlkyaGhhVzVKWkNBOUlIUjVjR1Z2WmlCamFHRnBia2xrSUQwOVBTQW5jM1J5YVc1bkp5QW1KaUJqYUdGcGJrbGtMblJ2VEc5M1pYSkRZWE5sS0NrN1hHNWNiaUFnYVdZZ0tDRnBjMUJ5WldacGVHVmtSbTl5YldGMGRHVmtTR1Y0VTNSeWFXNW5LRjlqYUdGcGJrbGtLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmxibVFvWEc0Z0lDQWdJQ0JsZEdoRmNuSnZjbk11Y25CakxtbHVkbUZzYVdSUVlYSmhiWE1vZTF4dUlDQWdJQ0FnSUNCdFpYTnpZV2RsT2lCZ1JYaHdaV04wWldRZ01IZ3RjSEpsWm1sNFpXUXNJSFZ1Y0dGa1pHVmtMQ0J1YjI0dGVtVnlieUJvWlhoaFpHVmphVzFoYkNCemRISnBibWNnSjJOb1lXbHVTV1FuTGlCU1pXTmxhWFpsWkRwY1hHNGtlMk5vWVdsdVNXUjlZQ3hjYmlBZ0lDQWdJSDBwTEZ4dUlDQWdJQ2s3WEc0Z0lIMWNibHh1SUNCcFppQW9JV2x6VTJGbVpVTm9ZV2x1U1dRb2NHRnljMlZKYm5Rb1gyTm9ZV2x1U1dRc0lERTJLU2twSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaVzVrS0Z4dUlDQWdJQ0FnWlhSb1JYSnliM0p6TG5Kd1l5NXBiblpoYkdsa1VHRnlZVzF6S0h0Y2JpQWdJQ0FnSUNBZ2JXVnpjMkZuWlRvZ1lFbHVkbUZzYVdRZ1kyaGhhVzRnU1VRZ1hDSWtlMTlqYUdGcGJrbGtmVndpT2lCdWRXMWxjbWxqWVd3Z2RtRnNkV1VnWjNKbFlYUmxjaUIwYUdGdUlHMWhlQ0J6WVdabElIWmhiSFZsTGlCU1pXTmxhWFpsWkRwY1hHNGtlMk5vWVdsdVNXUjlZQ3hjYmlBZ0lDQWdJSDBwTEZ4dUlDQWdJQ2s3WEc0Z0lIMWNibHh1SUNCamIyNXpkQ0J5WlhGMVpYTjBSR0YwWVNBOUlHWnBibVJGZUdsemRHbHVaMDVsZEhkdmNtc29YMk5vWVdsdVNXUXNJR1pwYm1ST1pYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJrSjVLVHRjYmlBZ2FXWWdLSEpsY1hWbGMzUkVZWFJoS1NCN1hHNGdJQ0FnWTI5dWMzUWdZM1Z5Y21WdWRFTm9ZV2x1U1dRZ1BTQm5aWFJEZFhKeVpXNTBRMmhoYVc1SlpDZ3BPMXh1SUNBZ0lHbG1JQ2hqZFhKeVpXNTBRMmhoYVc1SlpDQTlQVDBnWDJOb1lXbHVTV1FwSUh0Y2JpQWdJQ0FnSUhKbGN5NXlaWE4xYkhRZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnY21WMGRYSnVJR1Z1WkNncE8xeHVJQ0FnSUgxY2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnWVhCd2NtOTJaV1JTWlhGMVpYTjBSR0YwWVNBOUlHRjNZV2wwSUhKbGNYVmxjM1JWYzJWeVFYQndjbTkyWVd3b2UxeHVJQ0FnSUNBZ0lDQnZjbWxuYVc0c1hHNGdJQ0FnSUNBZ0lIUjVjR1U2SUVGd2NISnZkbUZzVkhsd1pTNVRkMmwwWTJoRmRHaGxjbVYxYlVOb1lXbHVMRnh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBSR0YwWVN4Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdJQ0JQWW1wbFkzUXVkbUZzZFdWektFSlZTVXhVWDBsT1gwbE9SbFZTUVY5T1JWUlhUMUpMVXlsY2JpQWdJQ0FnSUNBZ0lDQXViV0Z3S0NoN0lHTm9ZV2x1U1dRNklHbGtJSDBwSUQwK0lHbGtLVnh1SUNBZ0lDQWdJQ0FnSUM1cGJtTnNkV1JsY3loamFHRnBia2xrS1Z4dUlDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lHRjNZV2wwSUhObGRGQnliM1pwWkdWeVZIbHdaU2hoY0hCeWIzWmxaRkpsY1hWbGMzUkVZWFJoTG5SNWNHVXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdZWGRoYVhRZ2MyVjBRV04wYVhabFRtVjBkMjl5YXloaGNIQnliM1psWkZKbGNYVmxjM1JFWVhSaExtbGtLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsY3k1eVpYTjFiSFFnUFNCdWRXeHNPMXh1SUNBZ0lIMGdZMkYwWTJnZ0tHVnljbTl5S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWlc1a0tHVnljbTl5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHVnVaQ2dwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJsYm1Rb1hHNGdJQ0FnWlhSb1JYSnliM0p6TG5CeWIzWnBaR1Z5TG1OMWMzUnZiU2g3WEc0Z0lDQWdJQ0JqYjJSbE9pQTBPVEF5TENBdkx5QlVieTFpWlMxemRHRnVaR0Z5WkdsNlpXUWdYQ0oxYm5KbFkyOW5ibWw2WldRZ1kyaGhhVzRnU1VSY0lpQmxjbkp2Y2x4dUlDQWdJQ0FnYldWemMyRm5aVG9nWUZWdWNtVmpiMmR1YVhwbFpDQmphR0ZwYmlCSlJDQmNJaVI3WTJoaGFXNUpaSDFjSWk0Z1ZISjVJR0ZrWkdsdVp5QjBhR1VnWTJoaGFXNGdkWE5wYm1jZ0pIdE5SVk5UUVVkRlgxUlpVRVV1UVVSRVgwVlVTRVZTUlZWTlgwTklRVWxPZlNCbWFYSnpkQzVnTEZ4dUlDQWdJSDBwTEZ4dUlDQXBPMXh1ZlZ4dUlpd2lhVzF3YjNKMElIc2daWFJvUlhKeWIzSnpJSDBnWm5KdmJTQW5aWFJvTFhKd1l5MWxjbkp2Y25Nbk8xeHVhVzF3YjNKMElIc2dUVVZUVTBGSFJWOVVXVkJGSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OWhjSEFuTzF4dVhHNWpiMjV6ZENCM1lYUmphRUZ6YzJWMElEMGdlMXh1SUNCdFpYUm9iMlJPWVcxbGN6b2dXMDFGVTFOQlIwVmZWRmxRUlM1WFFWUkRTRjlCVTFORlZDd2dUVVZUVTBGSFJWOVVXVkJGTGxkQlZFTklYMEZUVTBWVVgweEZSMEZEV1Ywc1hHNGdJR2x0Y0d4bGJXVnVkR0YwYVc5dU9pQjNZWFJqYUVGemMyVjBTR0Z1Wkd4bGNpeGNiaUFnYUc5dmEwNWhiV1Z6T2lCN1hHNGdJQ0FnYUdGdVpHeGxWMkYwWTJoQmMzTmxkRkpsY1hWbGMzUTZJSFJ5ZFdVc1hHNGdJSDBzWEc1OU8xeHVaWGh3YjNKMElHUmxabUYxYkhRZ2QyRjBZMmhCYzNObGREdGNibHh1THlvcVhHNGdLaUJBZEhsd1pXUmxaaUI3YjJKcVpXTjBmU0JYWVhSamFFRnpjMlYwVDNCMGFXOXVjMXh1SUNvZ1FIQnliM0JsY25SNUlIdEdkVzVqZEdsdmJuMGdhR0Z1Wkd4bFYyRjBZMmhCYzNObGRGSmxjWFZsYzNRZ0xTQlVhR1VnZDJGc2JHVjBYM2RoZEdOb1FYTnpaWFFnYldWMGFHOWtJR2x0Y0d4bGJXVnVkR0YwYVc5dUxseHVJQ292WEc1Y2JpOHFLbHh1SUNvZ1FIUjVjR1ZrWldZZ2UyOWlhbVZqZEgwZ1YyRjBZMmhCYzNObGRGQmhjbUZ0WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlM04wY21sdVozMGdkSGx3WlNBdElGUm9aU0IwZVhCbElHOW1JSFJvWlNCaGMzTmxkQ0IwYnlCM1lYUmphQzVjYmlBcUlFQndjbTl3WlhKMGVTQjdiMkpxWldOMGZTQnZjSFJwYjI1eklDMGdWMkYwWTJnZ2IzQjBhVzl1Y3lCbWIzSWdkR2hsSUdGemMyVjBMbHh1SUNvdlhHNWNiaThxS2x4dUlDb2dRSEJoY21GdElIdHBiWEJ2Y25Rb0oycHpiMjR0Y25CakxXVnVaMmx1WlNjcExrcHpiMjVTY0dOU1pYRjFaWE4wUEZkaGRHTm9RWE56WlhSUVlYSmhiVDU5SUhKbGNTQXRJRlJvWlNCS1UwOU9MVkpRUXlCeVpYRjFaWE4wSUc5aWFtVmpkQzVjYmlBcUlFQndZWEpoYlNCN2FXMXdiM0owS0NkcWMyOXVMWEp3WXkxbGJtZHBibVVuS1M1S2MyOXVVbkJqVW1WemNHOXVjMlU4ZEhKMVpUNTlJSEpsY3lBdElGUm9aU0JLVTA5T0xWSlFReUJ5WlhOd2IyNXpaU0J2WW1wbFkzUXVYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCZmJtVjRkQ0F0SUZSb1pTQnFjMjl1TFhKd1l5MWxibWRwYm1VZ0oyNWxlSFFuSUdOaGJHeGlZV05yTGx4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdaVzVrSUMwZ1ZHaGxJR3B6YjI0dGNuQmpMV1Z1WjJsdVpTQW5aVzVrSnlCallXeHNZbUZqYXk1Y2JpQXFJRUJ3WVhKaGJTQjdWMkYwWTJoQmMzTmxkRTl3ZEdsdmJuTjlJRzl3ZEdsdmJuTmNiaUFxTDF4dVlYTjVibU1nWm5WdVkzUnBiMjRnZDJGMFkyaEJjM05sZEVoaGJtUnNaWElvWEc0Z0lISmxjU3hjYmlBZ2NtVnpMRnh1SUNCZmJtVjRkQ3hjYmlBZ1pXNWtMRnh1SUNCN0lHaGhibVJzWlZkaGRHTm9RWE56WlhSU1pYRjFaWE4wSUgwc1hHNHBJSHRjYmlBZ2RISjVJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHOXdkR2x2Ym5NNklHRnpjMlYwTENCMGVYQmxJSDBnUFNCeVpYRXVjR0Z5WVcxek8xeHVJQ0FnSUdOdmJuTjBJR2hoYm1Sc1pWZGhkR05vUVhOelpYUlNaWE4xYkhRZ1BTQmhkMkZwZENCb1lXNWtiR1ZYWVhSamFFRnpjMlYwVW1WeGRXVnpkQ2hoYzNObGRDd2dkSGx3WlNrN1hHNGdJQ0FnWVhkaGFYUWdhR0Z1Wkd4bFYyRjBZMmhCYzNObGRGSmxjM1ZzZEM1eVpYTjFiSFE3WEc0Z0lDQWdjbVZ6TG5KbGMzVnNkQ0E5SUhSeWRXVTdYRzRnSUNBZ2NtVjBkWEp1SUdWdVpDZ3BPMXh1SUNCOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4dUlDQWdJR2xtSUNobGNuSnZjaTV0WlhOellXZGxJRDA5UFNBblZYTmxjaUJ5WldwbFkzUmxaQ0IwYnlCM1lYUmphQ0IwYUdVZ1lYTnpaWFF1SnlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdWdVpDaGxkR2hGY25KdmNuTXVjSEp2ZG1sa1pYSXVkWE5sY2xKbGFtVmpkR1ZrVW1WeGRXVnpkQ2dwS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHVnVaQ2hsY25KdmNpazdYRzRnSUgxY2JuMWNiaUlzSW1WNGNHOXlkQ0FxSUdaeWIyMGdKeTR2WTNKbFlYUmxUV1YwYUc5a1RXbGtaR3hsZDJGeVpTYzdYRzRpTENKcGJYQnZjblFnZXlCS2MyOXVJSDBnWm5KdmJTQW5RRzFsZEdGdFlYTnJMM1YwYVd4ekp6dGNibWx0Y0c5eWRDQjdJRTFsYzNOaFoyVlFZWEpoYlhNZ2ZTQm1jbTl0SUNkQWJXVjBZVzFoYzJzdmJXVnpjMkZuWlMxdFlXNWhaMlZ5Snp0Y2JtbHRjRzl5ZENCblpYUkdaWFJqYUZkcGRHaFVhVzFsYjNWMElHWnliMjBnSnk0dUx5NHVMeTR1TDNOb1lYSmxaQzl0YjJSMWJHVnpMMlpsZEdOb0xYZHBkR2d0ZEdsdFpXOTFkQ2M3WEc1cGJYQnZjblFnZXlCTlJWTlRRVWRGWDFSWlVFVWdmU0JtY205dElDY3VMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwyRndjQ2M3WEc1Y2JtTnZibk4wSUdabGRHTm9WMmwwYUZScGJXVnZkWFFnUFNCblpYUkdaWFJqYUZkcGRHaFVhVzFsYjNWMEtDazdYRzVjYm1WNGNHOXlkQ0IwZVhCbElGUnlZVzV6WVdOMGFXOXVVbVZ4ZFdWemRFUmhkR0VnUFNCN1hHNGdJSFI0VUdGeVlXMXpPaUJTWldOdmNtUThjM1J5YVc1bkxDQjFibXR1YjNkdVBqdGNiaUFnYldWemMyRm5aVkJoY21GdGN6ODZJRzVsZG1WeU8xeHVJQ0J0YzJkUVlYSmhiWE0vT2lCdVpYWmxjanRjYm4wN1hHNWNibVY0Y0c5eWRDQjBlWEJsSUUxbGMzTmhaMlZTWlhGMVpYTjBSR0YwWVNBOVhHNGdJSHdnZTF4dUlDQWdJQ0FnYlhOblVHRnlZVzF6T2lCTlpYTnpZV2RsVUdGeVlXMXpPMXh1SUNBZ0lDQWdkSGhRWVhKaGJYTS9PaUJ1WlhabGNqdGNiaUFnSUNBZ0lHMWxjM05oWjJWUVlYSmhiWE0vT2lCdVpYWmxjanRjYmlBZ0lDQjlYRzRnSUh3Z2UxeHVJQ0FnSUNBZ2JXVnpjMkZuWlZCaGNtRnRjem9nVFdWemMyRm5aVkJoY21GdGN6dGNiaUFnSUNBZ0lHMXpaMUJoY21GdGN6ODZJRzVsZG1WeU8xeHVJQ0FnSUNBZ2RIaFFZWEpoYlhNL09pQnVaWFpsY2p0Y2JpQWdJQ0I5WEc0Z0lId2dWSEpoYm5OaFkzUnBiMjVTWlhGMVpYTjBSR0YwWVR0Y2JseHVaWGh3YjNKMElIUjVjR1VnVW1WeGRXVnpkRVJoZEdFZ1BTQjdYRzRnSUc5eWFXZHBiam9nYzNSeWFXNW5PMXh1ZlNBbUlFMWxjM05oWjJWU1pYRjFaWE4wUkdGMFlUdGNibHh1Wlhod2IzSjBJR0Z6ZVc1aklHWjFibU4wYVc5dUlITmxZM1Z5YVhSNVVISnZkbWxrWlhKRGFHVmpheWhjYmlBZ2NtVnhkV1Z6ZEVSaGRHRTZJRkpsY1hWbGMzUkVZWFJoTEZ4dUlDQnRaWFJvYjJST1lXMWxPaUJ6ZEhKcGJtY3NYRzRnSUdOb1lXbHVTV1E2SUhOMGNtbHVaeXhjYmlBZ1kzVnljbVZ1ZEV4dlkyRnNaVG9nYzNSeWFXNW5MRnh1S1RvZ1VISnZiV2x6WlR4U1pXTnZjbVE4YzNSeWFXNW5MQ0JLYzI5dVBqNGdlMXh1SUNCc1pYUWdaR0YwWVZSdlZtRnNhV1JoZEdVN1hHNGdJQzh2SUVOdmNtVWdiV1Z6YzJGblpTQnRZVzVoWjJWeWN5QjFjMlVnYldWemMyRm5aVkJoY21GdGN5QmlkWFFnWm5KdmJuUmxibVFnZFhObGN5QnRjMmRRWVhKaGJYTWdkMmwwYUNCc2IzUnpJRzltSUhKbFptVnlaVzVqWlhOY2JpQWdZMjl1YzNRZ2NHRnlZVzF6SUQwZ2NtVnhkV1Z6ZEVSaGRHRXViWE5uVUdGeVlXMXpJSHg4SUhKbGNYVmxjM1JFWVhSaExtMWxjM05oWjJWUVlYSmhiWE03WEc1Y2JpQWdhV1lnS0cxbGRHaHZaRTVoYldVZ1BUMDlJRTFGVTFOQlIwVmZWRmxRUlM1RlZFaGZVMGxIVGw5VVdWQkZSRjlFUVZSQktTQjdYRzRnSUNBZ1pHRjBZVlJ2Vm1Gc2FXUmhkR1VnUFNCN1hHNGdJQ0FnSUNCb2IzTjBYMjVoYldVNklIQmhjbUZ0Y3o4dWIzSnBaMmx1TEZ4dUlDQWdJQ0FnY25CalgyMWxkR2h2WkY5dVlXMWxPaUJ0WlhSb2IyUk9ZVzFsTEZ4dUlDQWdJQ0FnWTJoaGFXNWZhV1E2SUdOb1lXbHVTV1FzWEc0Z0lDQWdJQ0JrWVhSaE9pQndZWEpoYlhNL0xtUmhkR0VzWEc0Z0lDQWdJQ0JqZFhKeVpXNTBURzlqWVd4bExGeHVJQ0FnSUgwN1hHNGdJSDBnWld4elpTQnBaaUFvWEc0Z0lDQWdiV1YwYUc5a1RtRnRaU0E5UFQwZ1RVVlRVMEZIUlY5VVdWQkZMa1ZVU0Y5VFNVZE9JSHg4WEc0Z0lDQWdiV1YwYUc5a1RtRnRaU0E5UFQwZ1RVVlRVMEZIUlY5VVdWQkZMbEJGVWxOUFRrRk1YMU5KUjA1Y2JpQWdLU0I3WEc0Z0lDQWdaR0YwWVZSdlZtRnNhV1JoZEdVZ1BTQjdYRzRnSUNBZ0lDQm9iM04wWDI1aGJXVTZJSEJoY21GdGN6OHViM0pwWjJsdUxGeHVJQ0FnSUNBZ2NuQmpYMjFsZEdodlpGOXVZVzFsT2lCdFpYUm9iMlJPWVcxbExGeHVJQ0FnSUNBZ1kyaGhhVzVmYVdRNklHTm9ZV2x1U1dRc1hHNGdJQ0FnSUNCa1lYUmhPaUI3WEc0Z0lDQWdJQ0FnSUhOcFoyNWxjbDloWkdSeVpYTnpPaUJ3WVhKaGJYTS9MbVp5YjIwc1hHNGdJQ0FnSUNBZ0lHMXpaMTkwYjE5emFXZHVPaUJ3WVhKaGJYTS9MbVJoZEdFc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ1kzVnljbVZ1ZEV4dlkyRnNaU3hjYmlBZ0lDQjlPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR1JoZEdGVWIxWmhiR2xrWVhSbElEMGdlMXh1SUNBZ0lDQWdhRzl6ZEY5dVlXMWxPaUJ5WlhGMVpYTjBSR0YwWVM1dmNtbG5hVzRzWEc0Z0lDQWdJQ0J5Y0dOZmJXVjBhRzlrWDI1aGJXVTZJRzFsZEdodlpFNWhiV1VzWEc0Z0lDQWdJQ0JqYUdGcGJsOXBaRG9nWTJoaGFXNUpaQ3hjYmlBZ0lDQWdJR1JoZEdFNklIdGNiaUFnSUNBZ0lDQWdabkp2YlY5aFpHUnlaWE56T2lCeVpYRjFaWE4wUkdGMFlTNTBlRkJoY21GdGN6OHVabkp2YlN4Y2JpQWdJQ0FnSUNBZ2RHOWZZV1JrY21WemN6b2djbVZ4ZFdWemRFUmhkR0V1ZEhoUVlYSmhiWE0vTG5SdkxGeHVJQ0FnSUNBZ0lDQm5ZWE02SUhKbGNYVmxjM1JFWVhSaExuUjRVR0Z5WVcxelB5NW5ZWE1zWEc0Z0lDQWdJQ0FnSUdkaGMxQnlhV05sT2lCeVpYRjFaWE4wUkdGMFlTNTBlRkJoY21GdGN6OHVaMkZ6VUhKcFkyVXNYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQnlaWEYxWlhOMFJHRjBZUzUwZUZCaGNtRnRjejh1ZG1Gc2RXVXNYRzRnSUNBZ0lDQWdJR1JoZEdFNklISmxjWFZsYzNSRVlYUmhMblI0VUdGeVlXMXpQeTVrWVhSaExGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lHTjFjbkpsYm5STWIyTmhiR1VzWEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUdOdmJuTjBJSEpsYzNCdmJuTmxPaUJTWlhOd2IyNXpaU0E5SUdGM1lXbDBJR1psZEdOb1YybDBhRlJwYldWdmRYUW9YRzRnSUNBZ0oyaDBkSEJ6T2k4dmNISnZlSGt1YldWMFlXWnBMbU52WkdWbWFTNXVaWFIzYjNKckwyOXdaVzV6WldFdmMyVmpkWEpwZEhrdmRqRXZkbUZzYVdSaGRHVW5MRnh1SUNBZ0lIdGNiaUFnSUNBZ0lHMWxkR2h2WkRvZ0oxQlBVMVFuTEZ4dUlDQWdJQ0FnYUdWaFpHVnljem9nZTF4dUlDQWdJQ0FnSUNCQlkyTmxjSFE2SUNkaGNIQnNhV05oZEdsdmJpOXFjMjl1Snl4Y2JpQWdJQ0FnSUNBZ0owTnZiblJsYm5RdFZIbHdaU2M2SUNkaGNIQnNhV05oZEdsdmJpOXFjMjl1Snl4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCaWIyUjVPaUJLVTA5T0xuTjBjbWx1WjJsbWVTaGtZWFJoVkc5V1lXeHBaR0YwWlNrc1hHNGdJQ0FnZlN4Y2JpQWdLVHRjYmlBZ2NtVjBkWEp1SUdGM1lXbDBJSEpsYzNCdmJuTmxMbXB6YjI0b0tUdGNibjFjYmlJc0ltbHRjRzl5ZENCN0lFdGxlWEpwYm1kRGIyNTBjbTlzYkdWeUlIMGdabkp2YlNBblFHMWxkR0Z0WVhOckwyVjBhQzFyWlhseWFXNW5MV052Ym5SeWIyeHNaWEluTzF4dWFXMXdiM0owSUd4dlp5Qm1jbTl0SUNkc2IyZHNaWFpsYkNjN1hHNWNibWx0Y0c5eWRDQjdJRXRsZVhKcGJtZFVlWEJsSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2YzJoaGNtVmtMMk52Ym5OMFlXNTBjeTlyWlhseWFXNW5KenRjYmx4dVkyOXVjM1FnYzJWbFpGQm9jbUZ6WlZabGNtbG1hV1Z5SUQwZ2UxeHVJQ0F2S2lwY2JpQWdJQ29nVm1WeWFXWnBaWE1nYVdZZ2RHaGxJSE5sWldRZ2QyOXlaSE1nWTJGdUlISmxjM1J2Y21VZ2RHaGxJR0ZqWTI5MWJuUnpMbHh1SUNBZ0tseHVJQ0FnS2lCTFpYa2dibTkwWlhNNlhHNGdJQ0FxSUMwZ1ZHaGxJSE5sWldRZ2QyOXlaSE1nWTJGdUlISmxZM0psWVhSbElIUm9aU0J3Y21sdFlYSjVJR3RsZVhKcGJtY2dZVzVrSUhSb1pTQmhZMk52ZFc1MGN5QmlaV3h2Ym1kcGJtY2dkRzhnYVhRdVhHNGdJQ0FxSUMwZ1ZHaGxJR055WldGMFpXUWdZV05qYjNWdWRITWdhVzRnZEdobElIQnlhVzFoY25rZ2EyVjVjbWx1WnlCaGNtVWdZV3gzWVhseklIUm9aU0J6WVcxbExseHVJQ0FnS2lBdElGUm9aU0JyWlhseWFXNW5JR0ZzZDJGNWN5QmpjbVZoZEdWeklIUm9aU0JoWTJOdmRXNTBjeUJwYmlCMGFHVWdjMkZ0WlNCelpYRjFaVzVqWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVgwZ1kzSmxZWFJsWkVGalkyOTFiblJ6SUMwZ1ZHaGxJR0ZqWTI5MWJuUnpJSFJ2SUhKbGMzUnZjbVZjYmlBZ0lDb2dRSEJoY21GdElIdENkV1ptWlhKOUlITmxaV1JRYUhKaGMyVWdMU0JVYUdVZ2MyVmxaQ0IzYjNKa2N5QjBieUIyWlhKcFpua3NJR1Z1WTI5a1pXUWdZWE1nWVNCQ2RXWm1aWEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMUJ5YjIxcGMyVThkbTlwWkQ1OVhHNGdJQ0FxTDF4dUlDQmhjM2x1WXlCMlpYSnBabmxCWTJOdmRXNTBjeWhqY21WaGRHVmtRV05qYjNWdWRITXNJSE5sWldSUWFISmhjMlVwSUh0Y2JpQWdJQ0JwWmlBb0lXTnlaV0YwWldSQlkyTnZkVzUwY3lCOGZDQmpjbVZoZEdWa1FXTmpiM1Z1ZEhNdWJHVnVaM1JvSUR3Z01Ta2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZE9ieUJqY21WaGRHVmtJR0ZqWTI5MWJuUnpJR1JsWm1sdVpXUXVKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2EyVjVjbWx1WjBOdmJuUnliMnhzWlhJZ1BTQnVaWGNnUzJWNWNtbHVaME52Ym5SeWIyeHNaWElvZTMwcE8xeHVJQ0FnSUdOdmJuTjBJR3RsZVhKcGJtZENkV2xzWkdWeUlEMGdhMlY1Y21sdVowTnZiblJ5YjJ4c1pYSXVaMlYwUzJWNWNtbHVaMEoxYVd4a1pYSkdiM0pVZVhCbEtGeHVJQ0FnSUNBZ1MyVjVjbWx1WjFSNWNHVXVhR1JMWlhsVWNtVmxMRnh1SUNBZ0lDazdYRzRnSUNBZ1kyOXVjM1FnYTJWNWNtbHVaeUE5SUd0bGVYSnBibWRDZFdsc1pHVnlLQ2s3WEc0Z0lDQWdZMjl1YzNRZ2IzQjBjeUE5SUh0Y2JpQWdJQ0FnSUcxdVpXMXZibWxqT2lCelpXVmtVR2h5WVhObExGeHVJQ0FnSUNBZ2JuVnRZbVZ5VDJaQlkyTnZkVzUwY3pvZ1kzSmxZWFJsWkVGalkyOTFiblJ6TG14bGJtZDBhQ3hjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdZWGRoYVhRZ2EyVjVjbWx1Wnk1a1pYTmxjbWxoYkdsNlpTaHZjSFJ6S1R0Y2JpQWdJQ0JqYjI1emRDQnlaWE4wYjNKbFpFRmpZMjkxYm5SeklEMGdZWGRoYVhRZ2EyVjVjbWx1Wnk1blpYUkJZMk52ZFc1MGN5Z3BPMXh1SUNBZ0lHeHZaeTVrWldKMVp5aGdRM0psWVhSbFpDQmhZMk52ZFc1MGN6b2dKSHRLVTA5T0xuTjBjbWx1WjJsbWVTaGpjbVZoZEdWa1FXTmpiM1Z1ZEhNcGZXQXBPMXh1SUNBZ0lHeHZaeTVrWldKMVp5aGdVbVZ6ZEc5eVpXUWdZV05qYjNWdWRITTZJQ1I3U2xOUFRpNXpkSEpwYm1kcFpua29jbVZ6ZEc5eVpXUkJZMk52ZFc1MGN5bDlZQ2s3WEc1Y2JpQWdJQ0JwWmlBb2NtVnpkRzl5WldSQlkyTnZkVzUwY3k1c1pXNW5kR2dnSVQwOUlHTnlaV0YwWldSQlkyTnZkVzUwY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUM4dklIUm9hWE1nYzJodmRXeGtJRzV2ZENCb1lYQndaVzR1TGk1Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVjNKdmJtY2diblZ0WW1WeUlHOW1JR0ZqWTI5MWJuUnpKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J5WlhOMGIzSmxaRUZqWTI5MWJuUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJSEpsYzNSdmNtVmtRV05qYjNWdWRITmJhVjB1ZEc5TWIzZGxja05oYzJVb0tTQWhQVDBnWTNKbFlYUmxaRUZqWTI5MWJuUnpXMmxkTG5SdlRHOTNaWEpEWVhObEtDbGNiaUFnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnWUU1dmRDQnBaR1Z1ZEdsallXd2dZV05qYjNWdWRITWhJRTl5YVdkcGJtRnNPaUFrZTJOeVpXRjBaV1JCWTJOdmRXNTBjMXRwWFgwc0lGSmxjM1J2Y21Wa09pQWtlM0psYzNSdmNtVmtRV05qYjNWdWRITmJhVjE5WUN4Y2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDBzWEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQnpaV1ZrVUdoeVlYTmxWbVZ5YVdacFpYSTdYRzRpTENKcGJYQnZjblFnY21WdGIzWmxVMnhoYzJnZ1puSnZiU0FuY21WdGIzWmxMWFJ5WVdsc2FXNW5MWE5zWVhOb0p6dGNibWx0Y0c5eWRDQnNiMjl6Wld4NVZtRnNhV1JoZEdVZ1puSnZiU0FuUUhObFoyMWxiblF2Ykc5dmMyVnNlUzEyWVd4cFpHRjBaUzFsZG1WdWRDYzdYRzVwYlhCdmNuUWdleUJwYzFOMGNtbHVaeUI5SUdaeWIyMGdKMnh2WkdGemFDYzdYRzVwYlhCdmNuUWdhWE5TWlhSeWVVRnNiRzkzWldRZ1puSnZiU0FuYVhNdGNtVjBjbmt0WVd4c2IzZGxaQ2M3WEc1cGJYQnZjblFnZXlCblpXNWxjbUYwWlZKaGJtUnZiVWxrSUgwZ1puSnZiU0FuTGk0dmRYUnBiQ2M3WEc1Y2JtTnZibk4wSUc1dmIzQWdQU0FvS1NBOVBpQW9lMzBwTzF4dVhHNHZMeUJOWlhSb2IyUWdZbVZzYjNjZ2FYTWdhVzV6Y0dseVpXUWdabkp2YlNCaGVHbHZjeTF5WlhSeWVTQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjMjltZEc5dWFXTXZZWGhwYjNNdGNtVjBjbmxjYm1aMWJtTjBhVzl1SUdselRtVjBkMjl5YTBWeWNtOXlLR1Z5Y205eUtTQjdYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdJV1Z5Y205eUxuSmxjM0J2Ym5ObElDWW1YRzRnSUNBZ1FtOXZiR1ZoYmlobGNuSnZjaTVqYjJSbEtTQW1KaUF2THlCUWNtVjJaVzUwY3lCeVpYUnllV2x1WnlCallXNWpaV3hzWldRZ2NtVnhkV1Z6ZEhOY2JpQWdJQ0JsY25KdmNpNWpiMlJsSUNFOVBTQW5SVU5QVGs1QlFrOVNWRVZFSnlBbUppQXZMeUJRY21WMlpXNTBjeUJ5WlhSeWVXbHVaeUIwYVcxbFpDQnZkWFFnY21WeGRXVnpkSE5jYmlBZ0lDQnBjMUpsZEhKNVFXeHNiM2RsWkNobGNuSnZjaWxjYmlBZ0tUc2dMeThnVUhKbGRtVnVkSE1nY21WMGNubHBibWNnZFc1ellXWmxJR1Z5Y205eWMxeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QkJibUZzZVhScFkzTWdlMXh1SUNBdktpcGNiaUFnSUNvZ1NXNXBkR2xoYkdsNlpTQmhJRzVsZHlCZ1FXNWhiSGwwYVdOellDQjNhWFJvSUZObFoyMWxiblFnY0hKdmFtVmpkQ2R6SUdCM2NtbDBaVXRsZVdBZ1lXNWtJR0Z1WEc0Z0lDQXFJRzl3ZEdsdmJtRnNJR1JwWTNScGIyNWhjbmtnYjJZZ1lHOXdkR2x2Ym5OZ0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkM0pwZEdWTFpYbGNiaUFnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUZ0dmNIUnBiMjV6WFNBdElDaHZjSFJwYjI1aGJDbGNiaUFnSUNvZ1FIQnliM0JsY25SNUlIdHVkVzFpWlhKOUlGdG1iSFZ6YUVGMFhTQW9aR1ZtWVhWc2REb2dNakFwWEc0Z0lDQXFJRUJ3Y205d1pYSjBlU0I3Ym5WdFltVnlmU0JiWm14MWMyaEpiblJsY25aaGJGMGdLR1JsWm1GMWJIUTZJREV3TURBd0tWeHVJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UzTjBjbWx1WjMwZ1cyaHZjM1JkSUNoa1pXWmhkV3gwT2lBbmFIUjBjSE02THk5aGNHa3VjMlZuYldWdWRDNXBieWNwWEc0Z0lDQXFMMXh1SUNCamIyNXpkSEoxWTNSdmNpaDNjbWwwWlV0bGVTd2diM0IwYVc5dWN5QTlJSHQ5S1NCN1hHNGdJQ0FnZEdocGN5NTNjbWwwWlV0bGVTQTlJSGR5YVhSbFMyVjVPMXh1WEc0Z0lDQWdkR2hwY3k1b2IzTjBJRDBnY21WdGIzWmxVMnhoYzJnb2IzQjBhVzl1Y3k1b2IzTjBJSHg4SUNkb2RIUndjem92TDJGd2FTNXpaV2R0Wlc1MExtbHZKeWs3WEc0Z0lDQWdkR2hwY3k1bWJIVnphRWx1ZEdWeWRtRnNJRDBnYjNCMGFXOXVjeTVtYkhWemFFbHVkR1Z5ZG1Gc0lIeDhJREV3TURBd08xeHVJQ0FnSUhSb2FYTXVabXgxYzJoQmRDQTlJRzl3ZEdsdmJuTXVabXgxYzJoQmRDQjhmQ0JOWVhSb0xtMWhlQ2h2Y0hScGIyNXpMbVpzZFhOb1FYUXNJREVwSUh4OElESXdPMXh1WEc0Z0lDQWdkR2hwY3k1eGRXVjFaU0E5SUZ0ZE8xeHVJQ0FnSUhSb2FYTXVjR0YwYUNBOUlDY3ZkakV2WW1GMFkyZ25PMXh1SUNBZ0lIUm9hWE11YldGNFVYVmxkV1ZUYVhwbElEMGdNVEF5TkNBcUlEUTFNRHRjYmlBZ0lDQjBhR2x6TG1ac2RYTm9aV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQjBhR2x6TG5KbGRISjVRMjkxYm5RZ1BTQXpPMXh1WEc0Z0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNJQ2RsYm1GaWJHVW5MQ0I3WEc0Z0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklHWmhiSE5sTEZ4dUlDQWdJQ0FnZDNKcGRHRmliR1U2SUdaaGJITmxMRnh1SUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lIWmhiSFZsT2lCMGNuVmxMRnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWDNaaGJHbGtZWFJsS0cxbGMzTmhaMlVzSUhSNWNHVXBJSHRjYmlBZ0lDQnNiMjl6Wld4NVZtRnNhV1JoZEdVb2JXVnpjMkZuWlN3Z2RIbHdaU2s3WEc0Z0lIMWNibHh1SUNCZmJXVnpjMkZuWlNoMGVYQmxMQ0J0WlhOellXZGxMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQWdJSFJvYVhNdVgzWmhiR2xrWVhSbEtHMWxjM05oWjJVc0lIUjVjR1VwTzF4dUlDQWdJSFJvYVhNdVpXNXhkV1YxWlNoMGVYQmxMQ0J0WlhOellXZGxMQ0JqWVd4c1ltRmpheWs3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVnVaQ0JoYmlCcFpHVnVkR2xtZVNCZ2JXVnpjMkZuWldBdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnRaWE56WVdkbFhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUZ0allXeHNZbUZqYTEwZ0xTQW9iM0IwYVc5dVlXd3BYRzRnSUNBcUlFQnlaWFIxY201eklIdEJibUZzZVhScFkzTjlYRzRnSUNBcUwxeHVJQ0JwWkdWdWRHbG1lU2h0WlhOellXZGxMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dFpYTnpZV2RsS0NkcFpHVnVkR2xtZVNjc0lHMWxjM05oWjJVc0lHTmhiR3hpWVdOcktUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUWlc1a0lHRWdkSEpoWTJzZ1lHMWxjM05oWjJWZ0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdiV1Z6YzJGblpWeHVJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCYlkyRnNiR0poWTJ0ZElDMGdLRzl3ZEdsdmJtRnNLVnh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdRVzVoYkhsMGFXTnpmVnh1SUNBZ0tpOWNiaUFnZEhKaFkyc29iV1Z6YzJGblpTd2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYldWemMyRm5aU2duZEhKaFkyc25MQ0J0WlhOellXZGxMQ0JqWVd4c1ltRmpheWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVnVaQ0JoSUhCaFoyVWdZRzFsYzNOaFoyVmdMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYldWemMyRm5aVnh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQmJZMkZzYkdKaFkydGRJQzBnS0c5d2RHbHZibUZzS1Z4dUlDQWdLaUJBY21WMGRYSnVjeUI3UVc1aGJIbDBhV056ZlZ4dUlDQWdLaTljYmlBZ2NHRm5aU2h0WlhOellXZGxMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dFpYTnpZV2RsS0Nkd1lXZGxKeXdnYldWemMyRm5aU3dnWTJGc2JHSmhZMnNwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmtaQ0JoSUdCdFpYTnpZV2RsWUNCdlppQjBlWEJsSUdCMGVYQmxZQ0IwYnlCMGFHVWdjWFZsZFdVZ1lXNWtYRzRnSUNBcUlHTm9aV05ySUhkb1pYUm9aWElnYVhRZ2MyaHZkV3hrSUdKbElHWnNkWE5vWldRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQjBlWEJsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQnRjMmRjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdXMk5oYkd4aVlXTnJYU0F0SUNodmNIUnBiMjVoYkNsY2JpQWdJQ292WEc0Z0lHVnVjWFZsZFdVb2RIbHdaU3dnYlhObkxDQmpZV3hzWW1GamF5QTlJRzV2YjNBcElIdGNiaUFnSUNCcFppQW9JWFJvYVhNdVpXNWhZbXhsS1NCN1hHNGdJQ0FnSUNCelpYUkpiVzFsWkdsaGRHVW9ZMkZzYkdKaFkyc3BPMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJRzFsYzNOaFoyVWdQU0I3SUM0dUxtMXpaeXdnZEhsd1pTQjlPMXh1WEc0Z0lDQWdMeThnVTNCbFkybG1lV2x1WnlCc2FXSnlZWEo1SUdobGNtVWdhR1ZzY0hNZ2MyVm5iV1Z1ZENCMGJ5QjFibVJsY25OMFlXNWtJSE4wY25WamRIVnlaU0J2WmlCeVpYRjFaWE4wTGx4dUlDQWdJQzh2SUVOMWNuSmxiblJzZVNCelpXZHRaVzUwSUhObFpXMXpJSFJ2SUhOMWNIQnZjblFnZEdobGMyVWdjMjkxY21ObElHeHBZbkpoY21sbGN5QnZibXg1TGx4dUlDQWdJRzFsYzNOaFoyVXVZMjl1ZEdWNGRDQTlJSHRjYmlBZ0lDQWdJQzR1TG0xbGMzTmhaMlV1WTI5dWRHVjRkQ3hjYmlBZ0lDQWdJR3hwWW5KaGNuazZJSHRjYmlBZ0lDQWdJQ0FnYm1GdFpUb2dKMkZ1WVd4NWRHbGpjeTF1YjJSbEp5eGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHbG1JQ2doYldWemMyRm5aUzUwYVcxbGMzUmhiWEFwSUh0Y2JpQWdJQ0FnSUcxbGMzTmhaMlV1ZEdsdFpYTjBZVzF3SUQwZ2JtVjNJRVJoZEdVb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9JVzFsYzNOaFoyVXViV1Z6YzJGblpVbGtLU0I3WEc0Z0lDQWdJQ0J0WlhOellXZGxMbTFsYzNOaFoyVkpaQ0E5SUdkbGJtVnlZWFJsVW1GdVpHOXRTV1FvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2JXVnpjMkZuWlM1aGJtOXVlVzF2ZFhOSlpDQW1KaUFoYVhOVGRISnBibWNvYldWemMyRm5aUzVoYm05dWVXMXZkWE5KWkNrcElIdGNiaUFnSUNBZ0lHMWxjM05oWjJVdVlXNXZibmx0YjNWelNXUWdQU0JLVTA5T0xuTjBjbWx1WjJsbWVTaHRaWE56WVdkbExtRnViMjU1Ylc5MWMwbGtLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLRzFsYzNOaFoyVXVkWE5sY2tsa0lDWW1JQ0ZwYzFOMGNtbHVaeWh0WlhOellXZGxMblZ6WlhKSlpDa3BJSHRjYmlBZ0lDQWdJRzFsYzNOaFoyVXVkWE5sY2tsa0lEMGdTbE5QVGk1emRISnBibWRwWm5rb2JXVnpjMkZuWlM1MWMyVnlTV1FwTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG5GMVpYVmxMbkIxYzJnb2V5QnRaWE56WVdkbExDQmpZV3hzWW1GamF5QjlLVHRjYmx4dUlDQWdJR2xtSUNnaGRHaHBjeTVtYkhWemFHVmtLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtWnNkWE5vWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnZEdocGN5NW1iSFZ6YUNncE8xeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElHaGhjMUpsWVdOb1pXUkdiSFZ6YUVGMElEMGdkR2hwY3k1eGRXVjFaUzVzWlc1bmRHZ2dQajBnZEdocGN5NW1iSFZ6YUVGME8xeHVJQ0FnSUdOdmJuTjBJR2hoYzFKbFlXTm9aV1JSZFdWMVpWTnBlbVVnUFZ4dUlDQWdJQ0FnZEdocGN5NXhkV1YxWlM1eVpXUjFZMlVvS0dGall5d2dhWFJsYlNrZ1BUNGdZV05qSUNzZ1NsTlBUaTV6ZEhKcGJtZHBabmtvYVhSbGJTa3ViR1Z1WjNSb0xDQXdLU0ErUFZ4dUlDQWdJQ0FnZEdocGN5NXRZWGhSZFdWMVpWTnBlbVU3WEc0Z0lDQWdhV1lnS0doaGMxSmxZV05vWldSR2JIVnphRUYwSUh4OElHaGhjMUpsWVdOb1pXUlJkV1YxWlZOcGVtVXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVpteDFjMmdvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVtYkhWemFFbHVkR1Z5ZG1Gc0lDWW1JQ0YwYUdsekxuUnBiV1Z5S1NCN1hHNGdJQ0FnSUNCMGFHbHpMblJwYldWeUlEMGdjMlYwVkdsdFpXOTFkQ2gwYUdsekxtWnNkWE5vTG1KcGJtUW9kR2hwY3lrc0lIUm9hWE11Wm14MWMyaEpiblJsY25aaGJDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVpzZFhOb0lIUm9aU0JqZFhKeVpXNTBJSEYxWlhWbFhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJRnRqWVd4c1ltRmphMTBnTFNBb2IzQjBhVzl1WVd3cFhHNGdJQ0FxTDF4dUlDQm1iSFZ6YUNoallXeHNZbUZqYXlBOUlHNXZiM0FwSUh0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11Wlc1aFlteGxLU0I3WEc0Z0lDQWdJQ0J6WlhSSmJXMWxaR2xoZEdVb1kyRnNiR0poWTJzcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WemIyeDJaU2dwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoMGFHbHpMblJwYldWeUtTQjdYRzRnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvZEdocGN5NTBhVzFsY2lrN1hHNGdJQ0FnSUNCMGFHbHpMblJwYldWeUlEMGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb0lYUm9hWE11Y1hWbGRXVXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQnpaWFJKYlcxbFpHbGhkR1VvWTJGc2JHSmhZMnNwTzF4dUlDQWdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUdsMFpXMXpJRDBnZEdocGN5NXhkV1YxWlM1emNHeHBZMlVvTUN3Z2RHaHBjeTVtYkhWemFFRjBLVHRjYmlBZ0lDQmpiMjV6ZENCallXeHNZbUZqYTNNZ1BTQnBkR1Z0Y3k1dFlYQW9LR2wwWlcwcElEMCtJR2wwWlcwdVkyRnNiR0poWTJzcE8xeHVJQ0FnSUdOdmJuTjBJRzFsYzNOaFoyVnpJRDBnYVhSbGJYTXViV0Z3S0NocGRHVnRLU0E5UGlCcGRHVnRMbTFsYzNOaFoyVXBPMXh1WEc0Z0lDQWdZMjl1YzNRZ1pHRjBZU0E5SUh0Y2JpQWdJQ0FnSUdKaGRHTm9PaUJ0WlhOellXZGxjeXhjYmlBZ0lDQWdJSFJwYldWemRHRnRjRG9nYm1WM0lFUmhkR1VvS1N4Y2JpQWdJQ0FnSUhObGJuUkJkRG9nYm1WM0lFUmhkR1VvS1N4Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWTI5dWMzUWdaRzl1WlNBOUlDaGxjbklwSUQwK0lIdGNiaUFnSUNBZ0lITmxkRWx0YldWa2FXRjBaU2dvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR05oYkd4aVlXTnJjeTVtYjNKRllXTm9LQ2htYmlrZ1BUNGdabTRvWlhKeUxDQmtZWFJoS1NrN1hHNGdJQ0FnSUNBZ0lHTmhiR3hpWVdOcktHVnljaXdnWkdGMFlTazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdZMjl1YzNRZ2FHVmhaR1Z5Y3lBOUlIdGNiaUFnSUNBZ0lFRjFkR2h2Y21sNllYUnBiMjQ2SUdCQ1lYTnBZeUFrZTBKMVptWmxjaTVtY205dEtIUm9hWE11ZDNKcGRHVkxaWGtzSUNkMWRHWTRKeWt1ZEc5VGRISnBibWNvWEc0Z0lDQWdJQ0FnSUNkaVlYTmxOalFuTEZ4dUlDQWdJQ0FnS1gxZ0xGeHVJQ0FnSUgwN1hHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZjMlZ1WkZKbGNYVmxjM1FvWEc0Z0lDQWdJQ0JnSkh0MGFHbHpMbWh2YzNSOUpIdDBhR2x6TG5CaGRHaDlZQ3hjYmlBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnYldWMGFHOWtPaUFuVUU5VFZDY3NYRzRnSUNBZ0lDQWdJR0p2WkhrNklFcFRUMDR1YzNSeWFXNW5hV1o1S0dSaGRHRXBMRnh1SUNBZ0lDQWdJQ0JvWldGa1pYSnpMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJR1J2Ym1Vc1hHNGdJQ0FnSUNBd0xGeHVJQ0FnSUNrN1hHNGdJSDFjYmx4dUlDQmZjbVYwY25sU1pYRjFaWE4wS0hWeWJDd2dZbTlrZVN3Z1pHOXVaU3dnY21WMGNubE9ieWtnZTF4dUlDQWdJR052Ym5OMElHUmxiR0Y1SUQwZ1RXRjBhQzV3YjNjb01pd2djbVYwY25sT2J5a2dLaUF4TURBN1hHNGdJQ0FnYzJWMFZHbHRaVzkxZENnb0tTQTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxsOXpaVzVrVW1WeGRXVnpkQ2gxY213c0lHSnZaSGtzSUdSdmJtVXNJSEpsZEhKNVRtOGdLeUF4S1R0Y2JpQWdJQ0I5TENCa1pXeGhlU2s3WEc0Z0lIMWNibHh1SUNCaGMzbHVZeUJmYzJWdVpGSmxjWFZsYzNRb2RYSnNMQ0JpYjJSNUxDQmtiMjVsTENCeVpYUnllVTV2S1NCN1hHNGdJQ0FnY21WMGRYSnVJR1psZEdOb0tIVnliQ3dnWW05a2VTbGNiaUFnSUNBZ0lDNTBhR1Z1S0dGemVXNWpJQ2h5WlhOd2IyNXpaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaUFvY21WemNHOXVjMlV1YjJzcElIdGNiaUFnSUNBZ0lDQWdJQ0JrYjI1bEtDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYVhORmNuSnZjbEpsZEhKNVlXSnNaU2g3SUhKbGMzQnZibk5sSUgwcElDWW1YRzRnSUNBZ0lDQWdJQ0FnY21WMGNubE9ieUE4UFNCMGFHbHpMbkpsZEhKNVEyOTFiblJjYmlBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNtVjBjbmxTWlhGMVpYTjBLSFZ5YkN3Z1ltOWtlU3dnWkc5dVpTd2djbVYwY25sT2J5azdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaWEp5YjNJZ1BTQnVaWGNnUlhKeWIzSW9jbVZ6Y0c5dWMyVXVjM1JoZEhWelZHVjRkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1pHOXVaU2hsY25KdmNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F1WTJGMFkyZ29LR1Z5Y205eUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5cGMwVnljbTl5VW1WMGNubGhZbXhsS0dWeWNtOXlLU0FtSmlCeVpYUnllVTV2SUR3OUlIUm9hWE11Y21WMGNubERiM1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzSmxkSEo1VW1WeGRXVnpkQ2gxY213c0lHSnZaSGtzSUdSdmJtVXNJSEpsZEhKNVRtOHBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUdSdmJtVW9aWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUY5cGMwVnljbTl5VW1WMGNubGhZbXhsS0dWeWNtOXlLU0I3WEc0Z0lDQWdMeThnVW1WMGNua2dUbVYwZDI5eWF5QkZjbkp2Y25NdVhHNGdJQ0FnYVdZZ0tHbHpUbVYwZDI5eWEwVnljbTl5S0dWeWNtOXlLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tDRmxjbkp2Y2k1eVpYTndiMjV6WlNrZ2UxeHVJQ0FnSUNBZ0x5OGdRMkZ1Ym05MElHUmxkR1Z5YldsdVpTQnBaaUIwYUdVZ2NtVnhkV1Z6ZENCallXNGdZbVVnY21WMGNtbGxaRnh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZKbGRISjVJRk5sY25abGNpQkZjbkp2Y25NZ0tEVjRlQ2t1WEc0Z0lDQWdhV1lnS0dWeWNtOXlMbkpsYzNCdmJuTmxMbk4wWVhSMWN5QStQU0ExTURBZ0ppWWdaWEp5YjNJdWNtVnpjRzl1YzJVdWMzUmhkSFZ6SUR3OUlEVTVPU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1VtVjBjbmtnYVdZZ2NtRjBaU0JzYVcxcGRHVmtMbHh1SUNBZ0lHbG1JQ2hsY25KdmNpNXlaWE53YjI1elpTNXpkR0YwZFhNZ1BUMDlJRFF5T1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnZXlCVFJVTlBUa1FnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2WTI5dWMzUmhiblJ6TDNScGJXVW5PMXh1YVcxd2IzSjBJRUZ1WVd4NWRHbGpjeUJtY205dElDY3VMMkZ1WVd4NWRHbGpjeWM3WEc1Y2JtTnZibk4wSUZORlIwMUZUbFJmVjFKSlZFVmZTMFZaSUQwZ2NISnZZMlZ6Y3k1bGJuWXVVMFZIVFVWT1ZGOVhVa2xVUlY5TFJWa2dQejhnYm5Wc2JEdGNibU52Ym5OMElGTkZSMDFGVGxSZlNFOVRWQ0E5SUhCeWIyTmxjM011Wlc1MkxsTkZSMDFGVGxSZlNFOVRWQ0EvUHlCdWRXeHNPMXh1WEc0dkx5Qm1iSFZ6YUVGMElHTnZiblJ5YjJ4eklHaHZkeUJ0WVc1NUlHVjJaVzUwY3lCaGNtVWdjMlZ1ZENCMGJ5QnpaV2R0Wlc1MElHRjBJRzl1WTJVdUlGTmxaMjFsYm5RZ2QybHNiRnh1THk4Z2FHOXNaQ0J2Ym5SdklHRWdjWFZsZFdVZ2IyWWdaWFpsYm5SeklIVnVkR2xzSUdsMElHaHBkSE1nZEdocGN5QnVkVzFpWlhJc0lIUm9aVzRnYVhRZ2MyVnVaSE1nZEdobGJTQmhjMXh1THk4Z1lTQmlZWFJqYUM0Z1ZHaHBjeUJ6WlhSMGFXNW5JR1JsWm1GMWJIUnpJSFJ2SURJd0xDQmlkWFFnYVc0Z1pHVjJaV3h2Y0cxbGJuUWdkMlVnYkdsclpXeDVJSGRoYm5RZ2RHOWNiaTh2SUhObFpTQmxkbVZ1ZEhNZ2FXNGdjbVZoYkNCMGFXMWxJR1p2Y2lCa1pXSjFaMmRwYm1jc0lITnZJSFJvYVhNZ2FYTWdjMlYwSUhSdklERWdkRzhnWkdsellXSnNaU0IwYUdWY2JpOHZJSEYxWlhWbGFXNW5JRzFsWTJoaGJtbHpiUzVjYm1OdmJuTjBJRk5GUjAxRlRsUmZSa3hWVTBoZlFWUWdQVnh1SUNCd2NtOWpaWE56TG1WdWRpNU5SVlJCVFVGVFMxOUZUbFpKVWs5T1RVVk9WQ0E5UFQwZ0ozQnliMlIxWTNScGIyNG5JRDhnZFc1a1pXWnBibVZrSURvZ01UdGNibHh1THk4Z1pteDFjMmhKYm5SbGNuWmhiQ0JqYjI1MGNtOXNjeUJvYjNjZ1puSmxjWFZsYm5Sc2VTQjBhR1VnY1hWbGRXVWdhWE1nWm14MWMyaGxaQ0IwYnlCelpXZHRaVzUwTGx4dUx5OGdWR2hwY3lCb1lYQndaVzV6SUhKbFoyRnlaR3hsYzNNZ2IyWWdkR2hsSUhOcGVtVWdiMllnZEdobElIRjFaWFZsTGlCVWFHVWdaR1ZtWVhWc2RDQnpaWFIwYVc1bklHbHpYRzR2THlBeE1Dd3dNREJ0Y3lBb01UQWdjMlZqYjI1a2N5a3VJRlJvYVhNZ1pHVm1ZWFZzZENCcGN5QnlZWFJvWlhJZ2FHbG5hQ3dnZEdodmRXZG9JSFJvWVc1clpuVnNiSGxjYmk4dklIVnphVzVuSUhSb1pTQmlZV05yWjNKdmRXNWtJSEJ5YjJObGMzTWdZWE1nYjNWeUlHVjJaVzUwSUdoaGJtUnNaWElnYldWaGJuTWdkMlVnWkc5dUozUWdhR0YyWlNCMGIxeHVMeThnWkdWaGJDQjNhWFJvSUhOb2IzSjBJR3hwZG1Wa0lITmxjM05wYjI1eklIUm9ZWFFnYUdGd2NHVnVJR1poYzNSbGNpQjBhR0Z1SUhSb1pTQnBiblJsY25aaGJGeHVMeThnWlM1bklHTnZibVpwY20xaGRHbHZibk11SUZSb2FYTWdhWE1nYzJWMElIUnZJRFVzTURBd2JYTWdLRFVnYzJWamIyNWtjeWtnWVhKaWFYUnlZWEpwYkhrZ2QybDBhQ0IwYUdWY2JpOHZJR2x1ZEdWdWRDQnZaaUJvWVhacGJtY2dZU0IyWVd4MVpTQnNaWE56SUhSb1lXNGdNVEFnYzJWamIyNWtjeTVjYm1OdmJuTjBJRk5GUjAxRlRsUmZSa3hWVTBoZlNVNVVSVkpXUVV3Z1BTQlRSVU5QVGtRZ0tpQTFPMXh1WEc0dktpcGNiaUFxSUVOeVpXRjBaWE1nWVNCdGIyTnJJSE5sWjIxbGJuUWdiVzlrZFd4bElHWnZjaUIxYzJGblpTQnBiaUIwWlhOMElHVnVkbWx5YjI1dFpXNTBjeTRnVkdocGN5QnBjeUIxYzJWa1hHNGdLaUIzYUdWdUlHSjFhV3hrYVc1bklIUm9aU0JoY0hCc2FXTmhkR2x2YmlCcGJpQjBaWE4wSUcxdlpHVWdkRzhnWTJGMFkyZ2daWFpsYm5RZ1kyRnNiSE1nWVc1a0lIQnlaWFpsYm5SY2JpQXFJSFJvWlcwZ1puSnZiU0JpWldsdVp5QnpaVzUwSUhSdklITmxaMjFsYm5RdUlFbDBJR2x6SUdGc2MyOGdkWE5sWkNCcGJpQjFibWwwSUhSbGMzUnpJSFJ2SUcxdlkyc2dZVzVrWEc0Z0tpQnpjSGtnYjI0Z2RHaGxJRzFsZEdodlpITWdkRzhnWlc1emRYSmxJSEJ5YjNCbGNpQmlaV2hoZG1sdmNseHVJQ3BjYmlBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCbWJIVnphRUYwSUMwZ2JuVnRZbVZ5SUc5bUlHVjJaVzUwY3lCMGJ5QnhkV1YxWlNCaVpXWnZjbVVnYzJWdVpHbHVaeUIwYnlCelpXZHRaVzUwWEc0Z0tpQkFjbVYwZFhKdWN5QjdVMlZuYldWdWRFbHVkR1Z5Wm1GalpYMWNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR055WldGMFpWTmxaMjFsYm5STmIyTnJJRDBnS0dac2RYTm9RWFFnUFNCVFJVZE5SVTVVWDBaTVZWTklYMEZVS1NBOVBpQjdYRzRnSUdOdmJuTjBJSE5sWjIxbGJuUk5iMk5ySUQwZ2UxeHVJQ0FnSUM4dklFbHVkR1Z5Ym1Gc0lIRjFaWFZsSUhSdklHdGxaWEFnZEhKaFkyc2diMllnWlhabGJuUnpJR0Z1WkNCd2NtOXdaWEpzZVNCdGFXMXBZeUJ6WldkdFpXNTBKM05jYmlBZ0lDQXZMeUJ4ZFdWMVpXbHVaeUJpWldoaGRtbHZjaTVjYmlBZ0lDQnhkV1YxWlRvZ1cxMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJWYzJWa0lIUnZJR2x0YldWa2FXRjBaV3g1SUhObGJtUWdZV3hzSUhGMVpYVmxaQ0JsZG1WdWRITWdZVzVrSUhKbGMyVjBJSFJvWlNCeGRXVjFaU0IwYnlCNlpYSnZMbHh1SUNBZ0lDQXFJRVp2Y2lCdmRYSWdjSFZ5Y0c5elpYTWdkR2hwY3lCemFXMXdiSGtnZEhKcFoyZGxjbk1nZEdobElHTmhiR3hpWVdOcklHMWxkR2h2WkNCeVpXZHBjM1JsY21Wa0lIZHBkR2hjYmlBZ0lDQWdLaUIwYUdVZ1pYWmxiblF1WEc0Z0lDQWdJQ292WEc0Z0lDQWdabXgxYzJnb0tTQjdYRzRnSUNBZ0lDQnpaV2R0Wlc1MFRXOWpheTV4ZFdWMVpTNW1iM0pGWVdOb0tDaGJYeXdnWTJGc2JHSmhZMnRkS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR05oYkd4aVlXTnJLQ2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUhObFoyMWxiblJOYjJOckxuRjFaWFZsSUQwZ1cxMDdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlJ5WVdOcklHRnVJR1YyWlc1MElHRnVaQ0JoWkdRZ2FYUWdkRzhnZEdobElIRjFaWFZsTGlCSlppQjBhR1VnY1hWbGRXVWdjMmw2WlNCeVpXRmphR1Z6SUhSb1pWeHVJQ0FnSUNBcUlHWnNkWE5vUVhRZ2RHaHlaWE5vYjJ4a0xDQm1iSFZ6YUNCMGFHVWdjWFZsZFdVdVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnY0dGNWJHOWhaRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmpZV3hzWW1GamExeHVJQ0FnSUNBcUwxeHVJQ0FnSUhSeVlXTnJLSEJoZVd4dllXUXNJR05oYkd4aVlXTnJJRDBnS0NrZ1BUNGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0J6WldkdFpXNTBUVzlqYXk1eGRXVjFaUzV3ZFhOb0tGdHdZWGxzYjJGa0xDQmpZV3hzWW1GamExMHBPMXh1WEc0Z0lDQWdJQ0JwWmlBb2MyVm5iV1Z1ZEUxdlkyc3VjWFZsZFdVdWJHVnVaM1JvSUQ0OUlHWnNkWE5vUVhRcElIdGNiaUFnSUNBZ0lDQWdjMlZuYldWdWRFMXZZMnN1Wm14MWMyZ29LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVNCMGNuVmxJRTVQVDFBc0lIUm9aWE5sSUcxbGRHaHZaSE1nWVhKbElHVnBkR2hsY2lCdWIzUWdkWE5sWkNCdmNpQmtieUJ1YjNRZ1lYZGhhWFFnWTJGc2JHSmhZMnRjYmlBZ0lDQWdLaUJoYm1RZ2RHaGxjbVZtYjNKbElISmxjWFZwY21VZ2JtOGdablZ1WTNScGIyNWhiR2wwZVM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3WVdkbEtDa2dlMXh1SUNBZ0lDQWdMeThnYm05dmNGeHVJQ0FnSUgwc1hHNGdJQ0FnYVdSbGJuUnBabmtvS1NCN1hHNGdJQ0FnSUNBdkx5QnViMjl3WEc0Z0lDQWdmU3hjYmlBZ2ZUdGNibHh1SUNCeVpYUjFjbTRnYzJWbmJXVnVkRTF2WTJzN1hHNTlPMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdjMlZuYldWdWRDQTlJRk5GUjAxRlRsUmZWMUpKVkVWZlMwVlpYRzRnSUQ4Z2JtVjNJRUZ1WVd4NWRHbGpjeWhUUlVkTlJVNVVYMWRTU1ZSRlgwdEZXU3dnZTF4dUlDQWdJQ0FnYUc5emREb2dVMFZIVFVWT1ZGOUlUMU5VTEZ4dUlDQWdJQ0FnWm14MWMyaEJkRG9nVTBWSFRVVk9WRjlHVEZWVFNGOUJWQ3hjYmlBZ0lDQWdJR1pzZFhOb1NXNTBaWEoyWVd3NklGTkZSMDFGVGxSZlJreFZVMGhmU1U1VVJWSldRVXdzWEc0Z0lDQWdmU2xjYmlBZ09pQmpjbVZoZEdWVFpXZHRaVzUwVFc5amF5aFRSVWROUlU1VVgwWk1WVk5JWDBGVUxDQlRSVWROUlU1VVgwWk1WVk5JWDBsT1ZFVlNWa0ZNS1R0Y2JpSmRmUT09In0=
