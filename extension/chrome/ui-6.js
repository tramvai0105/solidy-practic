LavaPack.loadBundle([
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-item\\connected-accounts-list-item.component.js", {"../../../ui/identicon":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\identicon\\index.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-list%5Cconnected-accounts-list-item%5Cconnected-accounts-list-item.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConnectedAccountsListItem extends _react.PureComponent {
  render() {
    const {
      address,
      className,
      name,
      status,
      action,
      options
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('connected-accounts-list__row', className)
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "connected-accounts-list__row-content"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      className: "connected-accounts-list__identicon",
      address: address,
      diameter: 32
    }), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", {
      className: "connected-accounts-list__account-name"
    }, /*#__PURE__*/_react.default.createElement("strong", null, name)), status ? /*#__PURE__*/_react.default.createElement("p", {
      className: "connected-accounts-list__account-status"
    }, "\xA0\xA0", status) : null, action)), options);
  }
}
exports.default = ConnectedAccountsListItem;
_defineProperty(ConnectedAccountsListItem, "contextTypes", {
  t: _propTypes.default.func.isRequired
});
_defineProperty(ConnectedAccountsListItem, "propTypes", {
  address: _propTypes.default.string.isRequired,
  className: _propTypes.default.string,
  name: _propTypes.default.node.isRequired,
  status: _propTypes.default.string,
  action: _propTypes.default.node,
  options: _propTypes.default.node
});
_defineProperty(ConnectedAccountsListItem, "defaultProps", {
  className: null,
  options: null,
  action: null
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-list\\connected-accounts-list-item\\connected-accounts-list-item.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-item\\index.js", {"./connected-accounts-list-item.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-item\\connected-accounts-list-item.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-list%5Cconnected-accounts-list-item%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedAccountsListItem.default;
  }
});
var _connectedAccountsListItem = _interopRequireDefault(require("./connected-accounts-list-item.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-list\\connected-accounts-list-item\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-options\\connected-accounts-list-options.component.js", {"../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/menu":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\menu\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-list%5Cconnected-accounts-list-options%5Cconnected-accounts-list-options.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _menu = require("../../../ui/menu");
var _componentLibrary = require("../../../component-library");
var _useI18nContext = require("../../../../hooks/useI18nContext");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ConnectedAccountsListOptions = ({
  children,
  onShowOptions,
  onHideOptions,
  show
}) => {
  const ref = (0, _react.useRef)(false);
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    iconName: _componentLibrary.IconName.MoreVertical,
    className: "connected-accounts-options__button",
    onClick: onShowOptions,
    ariaLabel: t('options')
  }), show ? /*#__PURE__*/_react.default.createElement(_menu.Menu, {
    anchorElement: ref.current,
    onHide: onHideOptions,
    popperOptions: {
      modifiers: [{
        name: 'preventOverflow',
        options: {
          altBoundary: true
        }
      }]
    }
  }, children) : null);
};
ConnectedAccountsListOptions.propTypes = {
  children: _propTypes.default.node.isRequired,
  onHideOptions: _propTypes.default.func.isRequired,
  onShowOptions: _propTypes.default.func.isRequired,
  show: _propTypes.default.bool.isRequired
};
var _default = ConnectedAccountsListOptions;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-list\\connected-accounts-list-options\\connected-accounts-list-options.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-options\\index.js", {"./connected-accounts-list-options.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-options\\connected-accounts-list-options.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-list%5Cconnected-accounts-list-options%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedAccountsListOptions.default;
  }
});
var _connectedAccountsListOptions = _interopRequireDefault(require("./connected-accounts-list-options.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-list\\connected-accounts-list-options\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list.component.js", {"../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/menu":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\menu\\index.js","./connected-accounts-list-item":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-item\\index.js","./connected-accounts-list-options":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list-options\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-list%5Cconnected-accounts-list.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _componentLibrary = require("../../component-library");
var _menu = require("../../ui/menu");
var _connectedAccountsListItem = _interopRequireDefault(require("./connected-accounts-list-item"));
var _connectedAccountsListOptions = _interopRequireDefault(require("./connected-accounts-list-options"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConnectedAccountsList extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      accountWithOptionsShown: null
    });
    _defineProperty(this, "disconnectAccount", () => {
      this.hideAccountOptions();
      this.props.removePermittedAccount(this.state.accountWithOptionsShown);
    });
    _defineProperty(this, "switchAccount", address => {
      this.hideAccountOptions();
      this.props.setSelectedAddress(address);
    });
    _defineProperty(this, "hideAccountOptions", () => {
      this.setState({
        accountWithOptionsShown: null
      });
    });
    _defineProperty(this, "showAccountOptions", address => {
      this.setState({
        accountWithOptionsShown: address
      });
    });
  }
  renderUnconnectedAccount() {
    const {
      accountToConnect,
      connectAccount
    } = this.props;
    const {
      t
    } = this.context;
    if (!accountToConnect) {
      return null;
    }
    const {
      address,
      name
    } = accountToConnect;
    return /*#__PURE__*/_react.default.createElement(_connectedAccountsListItem.default, {
      className: "connected-accounts-list__row--highlight",
      address: address,
      name: `${name} (…${address.substr(-4, 4)})`,
      status: t('statusNotConnected'),
      action: /*#__PURE__*/_react.default.createElement("a", {
        className: "connected-accounts-list__account-status-link",
        onClick: () => connectAccount(accountToConnect.address)
      }, t('connect'))
    });
  }
  renderListItemOptions(address) {
    const {
      accountWithOptionsShown
    } = this.state;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_connectedAccountsListOptions.default, {
      onHideOptions: this.hideAccountOptions,
      onShowOptions: this.showAccountOptions.bind(null, address),
      show: accountWithOptionsShown === address
    }, /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
      iconName: _componentLibrary.IconName.Logout,
      onClick: this.disconnectAccount
    }, t('disconnectThisAccount')));
  }
  renderListItemAction(address) {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("a", {
      className: "connected-accounts-list__account-status-link",
      onClick: () => this.switchAccount(address)
    }, t('switchToThisAccount'));
  }
  render() {
    const {
      connectedAccounts,
      selectedAddress,
      shouldRenderListOptions
    } = this.props;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("main", {
      className: "connected-accounts-list"
    }, this.renderUnconnectedAccount(), connectedAccounts.map(({
      address,
      name
    }, index) => {
      return /*#__PURE__*/_react.default.createElement(_connectedAccountsListItem.default, {
        key: address,
        address: address,
        name: `${name} (…${address.substr(-4, 4)})`,
        status: index === 0 ? t('active') : null,
        options: shouldRenderListOptions ? this.renderListItemOptions(address) : null,
        action: address === selectedAddress ? null : this.renderListItemAction(address)
      });
    })));
  }
}
exports.default = ConnectedAccountsList;
_defineProperty(ConnectedAccountsList, "contextTypes", {
  t: _propTypes.default.func.isRequired
});
_defineProperty(ConnectedAccountsList, "defaultProps", {
  accountToConnect: null
});
_defineProperty(ConnectedAccountsList, "propTypes", {
  accountToConnect: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired
  }),
  connectedAccounts: _propTypes.default.arrayOf(_propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    name: _propTypes.default.string.isRequired,
    lastActive: _propTypes.default.number
  })).isRequired,
  connectAccount: _propTypes.default.func.isRequired,
  selectedAddress: _propTypes.default.string.isRequired,
  removePermittedAccount: _propTypes.default.func,
  setSelectedAddress: _propTypes.default.func.isRequired,
  shouldRenderListOptions: (props, propName, componentName) => {
    if (typeof props[propName] !== 'boolean') {
      return new Error(`Warning: Failed prop type: '${propName}' of component '${componentName}' must be a boolean. Received: ${typeof props[propName]}`);
    } else if (props[propName] && !props.removePermittedAccount) {
      return new Error(`Warning: Failed prop type: '${propName}' of component '${componentName}' requires prop 'removePermittedAccount'.`);
    }
    return undefined;
  }
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-list\\connected-accounts-list.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-accounts-list\\index.js", {"./connected-accounts-list.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-accounts-list\\connected-accounts-list.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedAccountsList.default;
  }
});
var _connectedAccountsList = _interopRequireDefault(require("./connected-accounts-list.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-list\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-accounts-permissions\\connected-accounts-permissions.js", {"../../../helpers/utils/permission":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\permission.js","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../ui/check-box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\check-box\\index.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-permissions%5Cconnected-accounts-permissions.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _lodash = require("lodash");
var _checkBox = _interopRequireDefault(require("../../ui/check-box"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _permission = require("../../../helpers/utils/permission");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ConnectedAccountsPermissions = ({
  permissions
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const [expanded, setExpanded] = (0, _react.useState)(false);
  const toggleExpanded = () => {
    setExpanded(_expanded => !_expanded);
  };
  if (!permissions.length) {
    return null;
  }
  const permissionLabels = (0, _lodash.flatten)(permissions.map(({
    key,
    value
  }) => (0, _permission.getPermissionDescription)({
    t,
    permissionName: key,
    permissionValue: value
  })));
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "connected-accounts-permissions"
  }, /*#__PURE__*/_react.default.createElement("p", {
    className: "connected-accounts-permissions__header",
    onClick: toggleExpanded
  }, /*#__PURE__*/_react.default.createElement("strong", null, t('permissions')), /*#__PURE__*/_react.default.createElement("button", {
    className: (0, _classnames.default)('fas', {
      'fa-angle-down': !expanded,
      'fa-angle-up': expanded
    }),
    title: t('showPermissions')
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('connected-accounts-permissions__list-container', {
      'connected-accounts-permissions__list-container--expanded': expanded
    })
  }, /*#__PURE__*/_react.default.createElement("p", null, t('authorizedPermissions'), ":"), /*#__PURE__*/_react.default.createElement("ul", {
    className: "connected-accounts-permissions__list"
  }, permissionLabels.map(({
    label
  }, idx) => /*#__PURE__*/_react.default.createElement("li", {
    key: `connected-permission-${idx}`,
    className: "connected-accounts-permissions__list-item"
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    checked: true,
    disabled: true,
    id: `connected-permission-${idx}`,
    className: "connected-accounts-permissions__checkbox"
  }), /*#__PURE__*/_react.default.createElement("label", {
    htmlFor: `connected-permission-${idx}`
  }, label))))));
};
ConnectedAccountsPermissions.propTypes = {
  permissions: _propTypes.default.arrayOf(_propTypes.default.shape({
    key: _propTypes.default.string.isRequired
  }))
};
ConnectedAccountsPermissions.defaultProps = {
  permissions: []
};
ConnectedAccountsPermissions.displayName = 'ConnectedAccountsPermissions';
var _default = /*#__PURE__*/_react.default.memo(ConnectedAccountsPermissions);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-permissions\\connected-accounts-permissions.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-accounts-permissions\\index.js", {"./connected-accounts-permissions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-accounts-permissions\\connected-accounts-permissions.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cconnected-accounts-permissions%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedAccountsPermissions.default;
  }
});
var _connectedAccountsPermissions = _interopRequireDefault(require("./connected-accounts-permissions"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-accounts-permissions\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-sites-list\\connected-sites-list.component.js", {"../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../ui/site-icon":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\site-icon\\index.js","../../ui/site-origin":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\site-origin\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cconnected-sites-list%5Cconnected-sites-list.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _siteIcon = _interopRequireDefault(require("../../ui/site-icon"));
var _util = require("../../../helpers/utils/util");
var _siteOrigin = _interopRequireDefault(require("../../ui/site-origin"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConnectedSitesList extends _react.Component {
  render() {
    const {
      connectedSubjects,
      onDisconnect
    } = this.props;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("main", {
      className: "connected-sites-list__content-rows"
    }, connectedSubjects.map(subject => /*#__PURE__*/_react.default.createElement("div", {
      key: subject.origin,
      className: "connected-sites-list__content-row"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "connected-sites-list__subject-info"
    }, /*#__PURE__*/_react.default.createElement(_siteIcon.default, {
      icon: subject.iconUrl,
      name: subject.name,
      size: 32,
      className: "connected-sites-list__subject-icon"
    }), /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
      className: "connected-sites-list__subject-name",
      title: subject.extensionId || subject.origin,
      siteOrigin: this.getSubjectDisplayName(subject)
    })), /*#__PURE__*/_react.default.createElement(_button.default, {
      className: "connected-sites-list__content-row-link-button",
      onClick: () => onDisconnect(subject.origin),
      type: "link"
    }, t('disconnect')))));
  }
  getSubjectDisplayName(subject) {
    if (subject.extensionId) {
      return this.context.t('externalExtension');
    }

    // We strip https schemes only, and only if the URL has no port.
    return (0, _util.stripHttpsSchemeWithoutPort)(subject.origin);
  }
}
exports.default = ConnectedSitesList;
_defineProperty(ConnectedSitesList, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(ConnectedSitesList, "propTypes", {
  connectedSubjects: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string,
    iconUrl: _propTypes.default.string,
    origin: _propTypes.default.string
  })).isRequired,
  onDisconnect: _propTypes.default.func.isRequired
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-sites-list\\connected-sites-list.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-sites-list\\index.js", {"./connected-sites-list.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-sites-list\\connected-sites-list.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cconnected-sites-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedSitesList.default;
  }
});
var _connectedSitesList = _interopRequireDefault(require("./connected-sites-list.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-sites-list\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-status-indicator\\connected-status-indicator.js", {"../../../helpers/constants/connected-sites":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\connected-sites.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../multichain":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\multichain\\index.js","../../ui/color-indicator":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\color-indicator\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cconnected-status-indicator%5Cconnected-status-indicator.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConnectedStatusIndicator;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _lodash = require("lodash");
var _connectedSites = require("../../../helpers/constants/connected-sites");
var _colorIndicator = _interopRequireDefault(require("../../ui/color-indicator"));
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _selectors = require("../../../selectors");
var _multichain = require("../../multichain");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ConnectedStatusIndicator({
  onClick
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const selectedAddress = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress);
  const addressConnectedSubjectMap = (0, _reactRedux.useSelector)(_selectors.getAddressConnectedSubjectMap);
  const originOfCurrentTab = (0, _reactRedux.useSelector)(_selectors.getOriginOfCurrentTab);
  const selectedAddressSubjectMap = addressConnectedSubjectMap[selectedAddress];
  const currentTabIsConnectedToSelectedAddress = Boolean(selectedAddressSubjectMap && selectedAddressSubjectMap[originOfCurrentTab]);
  let status;
  if (currentTabIsConnectedToSelectedAddress) {
    status = _connectedSites.STATUS_CONNECTED;
  } else if ((0, _lodash.findKey)(addressConnectedSubjectMap, originOfCurrentTab)) {
    status = _connectedSites.STATUS_CONNECTED_TO_ANOTHER_ACCOUNT;
  } else {
    status = _connectedSites.STATUS_NOT_CONNECTED;
  }
  let indicatorType = _colorIndicator.default.TYPES.OUTLINE;
  let indicatorColor = _designSystem.Color.iconDefault;
  let globalMenuColor = _designSystem.Color.iconAlternative;
  if (status === _connectedSites.STATUS_CONNECTED) {
    indicatorColor = _designSystem.Color.successDefault;
    indicatorType = _colorIndicator.default.TYPES.PARTIAL;
    globalMenuColor = _designSystem.Color.successDefault;
  } else if (status === _connectedSites.STATUS_CONNECTED_TO_ANOTHER_ACCOUNT) {
    indicatorColor = _designSystem.Color.errorDefault;
    globalMenuColor = _designSystem.BackgroundColor.backgroundDefault;
  }
  const text = status === _connectedSites.STATUS_CONNECTED ? t('statusConnected') : t('statusNotConnected'); // TODO: Remove text since we only need the tooltip text for new permission icon
  const tooltipText = status === _connectedSites.STATUS_CONNECTED ? t('tooltipSatusConnected') : t('tooltipSatusNotConnected');
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, false ? /*#__PURE__*/_react.default.createElement(_multichain.MultichainConnectedSiteMenu, {
    status: status,
    globalMenuColor: globalMenuColor,
    text: tooltipText,
    as: "button",
    onClick: onClick
  }) : /*#__PURE__*/_react.default.createElement("button", {
    className: "connected-status-indicator",
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
    color: indicatorColor,
    type: indicatorType
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "connected-status-indicator__text"
  }, text)));
}
ConnectedStatusIndicator.defaultProps = {
  onClick: undefined
};
ConnectedStatusIndicator.propTypes = {
  onClick: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-status-indicator\\connected-status-indicator.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-status-indicator\\index.js", {"./connected-status-indicator":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-status-indicator\\connected-status-indicator.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cconnected-status-indicator%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _connectedStatusIndicator.default;
  }
});
var _connectedStatusIndicator = _interopRequireDefault(require("./connected-status-indicator"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\connected-status-indicator\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\contact-list\\contact-list.component.js", {"../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","./recipient-group/recipient-group.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\contact-list\\recipient-group\\recipient-group.component.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Ccontact-list%5Ccontact-list.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _lodash = require("lodash");
var _button = _interopRequireDefault(require("../../ui/button"));
var _recipientGroup = _interopRequireDefault(require("./recipient-group/recipient-group.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ContactList extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      isShowingAllRecent: false
    });
  }
  renderRecents() {
    const {
      t
    } = this.context;
    const {
      isShowingAllRecent
    } = this.state;
    const nonContacts = this.props.searchForRecents();
    const showLoadMore = !isShowingAllRecent && nonContacts.length > 2;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "send__select-recipient-wrapper__recent-group-wrapper"
    }, /*#__PURE__*/_react.default.createElement(_recipientGroup.default, {
      label: t('recents'),
      items: showLoadMore ? nonContacts.slice(0, 2) : nonContacts,
      onSelect: this.props.selectRecipient,
      selectedAddress: this.props.selectedAddress
    }), showLoadMore && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "link",
      className: "send__select-recipient-wrapper__recent-group-wrapper__load-more",
      onClick: () => this.setState({
        isShowingAllRecent: true
      })
    }, t('loadMore')));
  }
  renderAddressBook() {
    const unsortedContactsByLetter = this.props.searchForContacts().reduce((obj, contact) => {
      const firstLetter = contact.name[0].toUpperCase();
      return {
        ...obj,
        [firstLetter]: [...(obj[firstLetter] || []), contact]
      };
    }, {});
    const letters = Object.keys(unsortedContactsByLetter).sort();
    const sortedContactGroups = letters.map(letter => {
      return [letter, (0, _lodash.sortBy)(unsortedContactsByLetter[letter], contact => {
        return contact.name.toLowerCase();
      })];
    });
    return sortedContactGroups.map(([letter, groupItems]) => /*#__PURE__*/_react.default.createElement(_recipientGroup.default, {
      key: `${letter}-contact-group`,
      label: letter,
      items: groupItems,
      onSelect: this.props.selectRecipient,
      selectedAddress: this.props.selectedAddress
    }));
  }
  renderMyAccounts() {
    const myAccounts = this.props.searchForMyAccounts();
    return /*#__PURE__*/_react.default.createElement(_recipientGroup.default, {
      items: myAccounts,
      onSelect: this.props.selectRecipient,
      selectedAddress: this.props.selectedAddress
    });
  }
  render() {
    const {
      children,
      searchForRecents,
      searchForContacts,
      searchForMyAccounts
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "send__select-recipient-wrapper__list"
    }, children || null, searchForRecents ? this.renderRecents() : null, searchForContacts ? this.renderAddressBook() : null, searchForMyAccounts ? this.renderMyAccounts() : null);
  }
}
exports.default = ContactList;
_defineProperty(ContactList, "propTypes", {
  searchForContacts: _propTypes.default.func,
  searchForRecents: _propTypes.default.func,
  searchForMyAccounts: _propTypes.default.func,
  selectRecipient: _propTypes.default.func,
  children: _propTypes.default.node,
  selectedAddress: _propTypes.default.string
});
_defineProperty(ContactList, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\contact-list\\contact-list.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\contact-list\\index.js", {"./contact-list.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\contact-list\\contact-list.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Ccontact-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _contactList.default;
  }
});
var _contactList = _interopRequireDefault(require("./contact-list.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\contact-list\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\contact-list\\recipient-group\\recipient-group.component.js", {"../../../../pages/send/send.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\pages\\send\\send.utils.js","../../../ui/identicon":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\identicon\\index.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Ccontact-list%5Crecipient-group%5Crecipient-group.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RecipientGroup;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
var _send = require("../../../../pages/send/send.utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function addressesEqual(address1, address2) {
  return String(address1).toLowerCase() === String(address2).toLowerCase();
}
function RecipientGroup({
  label,
  items,
  onSelect,
  selectedAddress
}) {
  if (!items || !items.length) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "send__select-recipient-wrapper__group",
    "data-testid": "recipient-group"
  }, label && /*#__PURE__*/_react.default.createElement("div", {
    className: "send__select-recipient-wrapper__group-label"
  }, label), items.map(({
    address,
    name
  }) => /*#__PURE__*/_react.default.createElement("div", {
    key: address,
    onClick: () => onSelect(address, name),
    className: (0, _classnames.default)({
      'send__select-recipient-wrapper__group-item': !addressesEqual(address, selectedAddress),
      'send__select-recipient-wrapper__group-item--selected': addressesEqual(address, selectedAddress)
    })
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: address,
    diameter: 28
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "send__select-recipient-wrapper__group-item__content",
    "data-testid": "recipient"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "send__select-recipient-wrapper__group-item__title"
  }, name || (0, _send.ellipsify)(address)), name && /*#__PURE__*/_react.default.createElement("div", {
    className: "send__select-recipient-wrapper__group-item__subtitle"
  }, (0, _send.ellipsify)(address))))));
}
RecipientGroup.propTypes = {
  label: _propTypes.default.string,
  items: _propTypes.default.arrayOf(_propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    name: _propTypes.default.string
  })),
  onSelect: _propTypes.default.func.isRequired,
  selectedAddress: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\contact-list\\recipient-group\\recipient-group.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\create-new-vault\\create-new-vault.js", {"../../../helpers/constants/common":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\common.ts","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../ui/check-box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\check-box\\index.js","../../ui/text-field":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\text-field\\index.js","../srp-input":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\srp-input\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Ccreate-new-vault%5Ccreate-new-vault.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CreateNewVault;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _textField = _interopRequireDefault(require("../../ui/text-field"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _checkBox = _interopRequireDefault(require("../../ui/check-box"));
var _componentLibrary = require("../../component-library");
var _srpInput = _interopRequireDefault(require("../srp-input"));
var _common = require("../../../helpers/constants/common");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function CreateNewVault({
  disabled = false,
  includeTerms = false,
  onSubmit,
  submitText
}) {
  const [confirmPassword, setConfirmPassword] = (0, _react.useState)('');
  const [confirmPasswordError, setConfirmPasswordError] = (0, _react.useState)('');
  const [password, setPassword] = (0, _react.useState)('');
  const [passwordError, setPasswordError] = (0, _react.useState)('');
  const [seedPhrase, setSeedPhrase] = (0, _react.useState)('');
  const [termsChecked, setTermsChecked] = (0, _react.useState)(false);
  const t = (0, _useI18nContext.useI18nContext)();
  const onPasswordChange = (0, _react.useCallback)(newPassword => {
    let newConfirmPasswordError = '';
    let newPasswordError = '';
    if (newPassword && newPassword.length < _common.PASSWORD_MIN_LENGTH) {
      newPasswordError = t('passwordNotLongEnough');
    }
    if (confirmPassword && newPassword !== confirmPassword) {
      newConfirmPasswordError = t('passwordsDontMatch');
    }
    setPassword(newPassword);
    setPasswordError(newPasswordError);
    setConfirmPasswordError(newConfirmPasswordError);
  }, [confirmPassword, t]);
  const onConfirmPasswordChange = (0, _react.useCallback)(newConfirmPassword => {
    let newConfirmPasswordError = '';
    if (password !== newConfirmPassword) {
      newConfirmPasswordError = t('passwordsDontMatch');
    }
    setConfirmPassword(newConfirmPassword);
    setConfirmPasswordError(newConfirmPasswordError);
  }, [password, t]);
  const isValid = !disabled && password && confirmPassword && password === confirmPassword && seedPhrase && (!includeTerms || termsChecked) && !passwordError && !confirmPasswordError;
  const onImport = (0, _react.useCallback)(async event => {
    event.preventDefault();
    if (!isValid) {
      return;
    }
    await onSubmit(password, seedPhrase);
  }, [isValid, onSubmit, password, seedPhrase]);
  const toggleTermsCheck = (0, _react.useCallback)(() => {
    setTermsChecked(currentTermsChecked => !currentTermsChecked);
  }, []);
  const termsOfUse = t('acceptTermsOfUse', [/*#__PURE__*/_react.default.createElement("a", {
    className: "create-new-vault__terms-link",
    key: "create-new-vault__link-text",
    href: "https://metamask.io/terms.html",
    target: "_blank",
    rel: "noopener noreferrer"
  }, t('terms'))]);
  return /*#__PURE__*/_react.default.createElement("form", {
    className: "create-new-vault__form",
    onSubmit: onImport
  }, /*#__PURE__*/_react.default.createElement(_srpInput.default, {
    onChange: setSeedPhrase,
    srpText: t('secretRecoveryPhrase')
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "create-new-vault__create-password"
  }, /*#__PURE__*/_react.default.createElement(_textField.default, {
    "data-testid": "create-vault-password",
    id: "password",
    label: t('newPassword'),
    type: "password",
    value: password,
    onChange: event => onPasswordChange(event.target.value),
    error: passwordError,
    autoComplete: "new-password",
    margin: "normal",
    largeLabel: true
  }), /*#__PURE__*/_react.default.createElement(_textField.default, {
    "data-testid": "create-vault-confirm-password",
    id: "confirm-password",
    label: t('confirmPassword'),
    type: "password",
    value: confirmPassword,
    onChange: event => onConfirmPasswordChange(event.target.value),
    error: confirmPasswordError,
    autoComplete: "new-password",
    margin: "normal",
    largeLabel: true
  })), includeTerms ? /*#__PURE__*/_react.default.createElement("div", {
    className: "create-new-vault__terms"
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    id: "create-new-vault__terms-checkbox",
    dataTestId: "create-new-vault__terms-checkbox",
    checked: termsChecked,
    onClick: toggleTermsCheck
  }), /*#__PURE__*/_react.default.createElement("label", {
    className: "create-new-vault__terms-label",
    htmlFor: "create-new-vault__terms-checkbox"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "span"
  }, termsOfUse))) : null, /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "create-new-vault-submit-button",
    className: "create-new-vault__submit-button",
    type: "primary",
    submit: true,
    disabled: !isValid
  }, submitText));
}
CreateNewVault.propTypes = {
  disabled: _propTypes.default.bool,
  includeTerms: _propTypes.default.bool,
  onSubmit: _propTypes.default.func.isRequired,
  submitText: _propTypes.default.string.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\create-new-vault\\create-new-vault.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\create-new-vault\\index.js", {"./create-new-vault":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\create-new-vault\\create-new-vault.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Ccreate-new-vault%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _createNewVault.default;
  }
});
var _createNewVault = _interopRequireDefault(require("./create-new-vault"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\create-new-vault\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\currency-input\\currency-input.js", {"../../../../shared/constants/common":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\common.ts","../../../../shared/modules/conversion.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\conversion.utils.ts","../../../contexts/i18n":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\i18n.js","../../../ducks/metamask/metamask":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\metamask\\metamask.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../ui/currency-display":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\currency-display\\index.js","../../ui/unit-input":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\unit-input\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Ccurrency-input%5Ccurrency-input.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CurrencyInput;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _unitInput = _interopRequireDefault(require("../../ui/unit-input"));
var _currencyDisplay = _interopRequireDefault(require("../../ui/currency-display"));
var _i18n = require("../../../contexts/i18n");
var _metamask = require("../../../ducks/metamask/metamask");
var _selectors = require("../../../selectors");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _common = require("../../../../shared/constants/common");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * Component that allows user to enter currency values as a number, and props receive a converted
 * hex value in WEI. props.value, used as a default or forced value, should be a hex value, which
 * gets converted into a decimal value depending on the currency (ETH or Fiat).
 *
 * @param options0
 * @param options0.hexValue
 * @param options0.featureSecondary
 * @param options0.onChange
 * @param options0.onPreferenceToggle
 */
function CurrencyInput({
  hexValue,
  featureSecondary,
  onChange,
  onPreferenceToggle
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const preferredCurrency = (0, _reactRedux.useSelector)(_metamask.getNativeCurrency);
  const secondaryCurrency = (0, _reactRedux.useSelector)(_selectors.getCurrentCurrency);
  const conversionRate = (0, _reactRedux.useSelector)(_metamask.getConversionRate);
  const showFiat = (0, _reactRedux.useSelector)(_selectors.getShouldShowFiat);
  const hideSecondary = !showFiat;
  const primarySuffix = preferredCurrency || _common.EtherDenomination.ETH;
  const secondarySuffix = secondaryCurrency.toUpperCase();
  const [isSwapped, setSwapped] = (0, _react.useState)(false);
  const [newHexValue, setNewHexValue] = (0, _react.useState)(hexValue);
  const [shouldDisplayFiat, setShouldDisplayFiat] = (0, _react.useState)(featureSecondary);
  const shouldUseFiat = hideSecondary ? false : Boolean(shouldDisplayFiat);
  const getDecimalValue = () => {
    const decimalValueString = shouldUseFiat ? (0, _conversion.getValueFromWeiHex)({
      value: hexValue,
      toCurrency: secondaryCurrency,
      conversionRate,
      numberOfDecimals: 2
    }) : (0, _conversion.getValueFromWeiHex)({
      value: hexValue,
      toCurrency: _common.EtherDenomination.ETH,
      numberOfDecimals: 8
    });
    return Number(decimalValueString) || 0;
  };
  const initialDecimalValue = hexValue ? getDecimalValue() : 0;
  const swap = async () => {
    await onPreferenceToggle();
    setSwapped(!isSwapped);
    setShouldDisplayFiat(!shouldDisplayFiat);
  };
  const handleChange = newDecimalValue => {
    const hexValueNew = shouldUseFiat ? (0, _conversion.getWeiHexFromDecimalValue)({
      value: newDecimalValue,
      fromCurrency: secondaryCurrency,
      conversionRate,
      invertConversionRate: true
    }) : (0, _conversion.getWeiHexFromDecimalValue)({
      value: newDecimalValue,
      fromCurrency: _common.EtherDenomination.ETH,
      fromDenomination: _common.EtherDenomination.ETH,
      conversionRate
    });
    setNewHexValue(hexValueNew);
    onChange(hexValueNew);
    setSwapped(!isSwapped);
  };
  (0, _react.useEffect)(() => {
    setNewHexValue(hexValue);
  }, [hexValue]);
  (0, _react.useEffect)(() => {
    if (featureSecondary) {
      handleChange(initialDecimalValue);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [featureSecondary, initialDecimalValue]);
  const renderConversionComponent = () => {
    let currency, numberOfDecimals;
    if (hideSecondary) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "currency-input__conversion-component"
      }, t('noConversionRateAvailable'));
    }
    if (shouldUseFiat) {
      // Display ETH
      currency = preferredCurrency || _common.EtherDenomination.ETH;
      numberOfDecimals = 8;
    } else {
      // Display Fiat
      currency = secondaryCurrency;
      numberOfDecimals = 2;
    }
    return /*#__PURE__*/_react.default.createElement(_currencyDisplay.default, {
      className: "currency-input__conversion-component",
      currency: currency,
      value: newHexValue,
      numberOfDecimals: numberOfDecimals
    });
  };
  return /*#__PURE__*/_react.default.createElement(_unitInput.default, {
    hexValue,
    preferredCurrency,
    secondaryCurrency,
    hideSecondary,
    featureSecondary,
    conversionRate,
    onChange,
    onPreferenceToggle,
    dataTestId: "currency-input",
    suffix: shouldUseFiat ? secondarySuffix : primarySuffix,
    onChange: handleChange,
    value: initialDecimalValue,
    actionComponent: /*#__PURE__*/_react.default.createElement("button", {
      className: "currency-input__swap-component",
      "data-testid": "currency-swap",
      onClick: swap
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-retweet fa-lg"
    }))
  }, renderConversionComponent());
}
CurrencyInput.propTypes = {
  hexValue: _propTypes.default.string,
  featureSecondary: _propTypes.default.bool,
  onChange: _propTypes.default.func,
  onPreferenceToggle: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\currency-input\\currency-input.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\currency-input\\index.js", {"./currency-input":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\currency-input\\currency-input.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Ccurrency-input%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _currencyInput.default;
  }
});
var _currencyInput = _interopRequireDefault(require("./currency-input"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\currency-input\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\custom-spending-cap\\custom-spending-cap-tooltip.js", {"../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../ui/tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\tooltip\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Ccustom-spending-cap%5Ccustom-spending-cap-tooltip.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomSpendingCapTooltip = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _box = _interopRequireDefault(require("../../ui/box"));
var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const CustomSpendingCapTooltip = ({
  tooltipContentText,
  tooltipIcon
}) => /*#__PURE__*/_react.default.createElement(_box.default, {
  display: _designSystem.DISPLAY.INLINE_BLOCK
}, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
  interactive: true,
  position: "top",
  html: /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    margin: 3,
    color: _designSystem.TextColor.textAlternative,
    className: "form-field__heading-title__tooltip"
  }, tooltipContentText)
}, tooltipIcon ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
  name: _componentLibrary.IconName.Danger,
  className: "form-field__heading-title__tooltip__warning-icon",
  size: _componentLibrary.IconSize.Inherit,
  style: {
    'vertical-align': 'bottom'
  }
}) : tooltipIcon !== '' && /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
  name: _componentLibrary.IconName.Question,
  size: _componentLibrary.IconSize.Inherit
})));
exports.CustomSpendingCapTooltip = CustomSpendingCapTooltip;
CustomSpendingCapTooltip.propTypes = {
  tooltipContentText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  tooltipIcon: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.bool])
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\custom-spending-cap\\custom-spending-cap-tooltip.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\custom-spending-cap\\custom-spending-cap.js", {"../../../../shared/constants/tokens":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\tokens.js","../../../../shared/lib/transactions-controller-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\lib\\transactions-controller-utils.js","../../../../shared/modules/Numeric":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\Numeric.ts","../../../../shared/modules/conversion.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\conversion.utils.ts","../../../contexts/gasFee":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\gasFee.js","../../../contexts/i18n":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\i18n.js","../../../ducks/app/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\app\\app.ts","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../pages/confirm-approve/confirm-approve.util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\pages\\confirm-approve\\confirm-approve.util.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../ui/form-field":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\form-field\\index.js","./custom-spending-cap-tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\custom-spending-cap\\custom-spending-cap-tooltip.js","bignumber.js":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\bignumber.js\\bignumber.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","ethereumjs-util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethereumjs-util\\dist.browser\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Ccustom-spending-cap%5Ccustom-spending-cap.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CustomSpendingCap;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _ethereumjsUtil = require("ethereumjs-util");
var _i18n = require("../../../contexts/i18n");
var _box = _interopRequireDefault(require("../../ui/box"));
var _formField = _interopRequireDefault(require("../../ui/form-field"));
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _selectors = require("../../../selectors");
var _app = require("../../../ducks/app/app");
var _transactionsControllerUtils = require("../../../../shared/lib/transactions-controller-utils");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _tokens = require("../../../../shared/constants/tokens");
var _Numeric = require("../../../../shared/modules/Numeric");
var _actions = require("../../../store/actions");
var _confirmApprove = require("../../../pages/confirm-approve/confirm-approve.util");
var _gasFee = require("../../../contexts/gasFee");
var _customSpendingCapTooltip = require("./custom-spending-cap-tooltip");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function CustomSpendingCap({
  txParams,
  tokenName,
  currentTokenBalance,
  dappProposedValue,
  siteOrigin,
  passTheErrorText,
  decimals,
  setInputChangeInProgress
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    updateTransaction
  } = (0, _gasFee.useGasFeeContext)();
  const inputRef = (0, _react.useRef)(null);
  const value = (0, _reactRedux.useSelector)(_selectors.getCustomTokenAmount);
  const [error, setError] = (0, _react.useState)('');
  const [showUseDefaultButton, setShowUseDefaultButton] = (0, _react.useState)(value !== String(dappProposedValue) && true);
  const inputLogicEmptyStateText = t('inputLogicEmptyState');
  const replaceCommaToDot = inputValue => {
    return inputValue.replace(/,/gu, '.');
  };
  const decConversionGreaterThan = (tokenValue, tokenBalance) => {
    return new _Numeric.Numeric(Number(replaceCommaToDot(tokenValue)), 10).greaterThan(Number(tokenBalance), 10);
  };
  const getInputTextLogic = inputNumber => {
    if (new _Numeric.Numeric(Number(replaceCommaToDot(inputNumber)), 10).lessThanOrEqualTo(new _Numeric.Numeric(Number(currentTokenBalance), 10))) {
      return {
        className: 'custom-spending-cap__lowerValue',
        description: t('inputLogicEqualOrSmallerNumber', [/*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
          key: "custom-spending-cap",
          variant: _designSystem.TextVariant.bodySmBold,
          as: "h6",
          className: "custom-spending-cap__input-value-and-token-name"
        }, replaceCommaToDot(inputNumber), " ", tokenName)])
      };
    } else if (decConversionGreaterThan(inputNumber, currentTokenBalance)) {
      return {
        className: 'custom-spending-cap__higherValue',
        description: t('inputLogicHigherNumber')
      };
    }
    return {
      className: 'custom-spending-cap__emptyState',
      description: t('inputLogicEmptyState')
    };
  };
  const [customSpendingCapText, setCustomSpendingCapText] = (0, _react.useState)(getInputTextLogic(value).description);
  const handleChange = async valueInput => {
    var _match$;
    if (!txParams) {
      return;
    }
    setInputChangeInProgress(true);
    let spendingCapError = '';
    const inputTextLogic = getInputTextLogic(valueInput);
    const inputTextLogicDescription = inputTextLogic.description;
    const match = _tokens.DECIMAL_REGEX.exec(replaceCommaToDot(valueInput));
    if ((match === null || match === void 0 ? void 0 : (_match$ = match[1]) === null || _match$ === void 0 ? void 0 : _match$.length) > decimals) {
      setInputChangeInProgress(false);
      return;
    }
    if (valueInput && !_tokens.NUM_W_OPT_DECIMAL_COMMA_OR_DOT_REGEX.test(valueInput)) {
      spendingCapError = t('spendingCapError');
      setCustomSpendingCapText(t('spendingCapErrorDescription', [siteOrigin]));
      setError(spendingCapError);
    } else {
      setCustomSpendingCapText(inputTextLogicDescription);
      setError('');
    }
    const maxTokenAmount = (0, _transactionsControllerUtils.calcTokenAmount)(_tokens.MAX_TOKEN_ALLOWANCE_AMOUNT, decimals);
    if (Number(valueInput.length) > 1 && Number(valueInput)) {
      const customSpendLimitNumber = new _bignumber.default(valueInput);
      if (customSpendLimitNumber.greaterThan(maxTokenAmount)) {
        spendingCapError = t('spendLimitTooLarge');
        setError(spendingCapError);
      }
    }
    dispatch((0, _app.setCustomTokenAmount)(String(valueInput)));
    try {
      const newData = (0, _confirmApprove.getCustomTxParamsData)(txParams.data, {
        customPermissionAmount: valueInput,
        decimals
      });
      const {
        from,
        to,
        value: txValue
      } = txParams;
      const estimatedGasLimit = await (0, _actions.estimateGas)({
        from,
        to,
        value: txValue,
        data: newData
      });
      if (estimatedGasLimit) {
        await updateTransaction({
          gasLimit: (0, _conversion.hexToDecimal)((0, _ethereumjsUtil.addHexPrefix)(estimatedGasLimit))
        });
      }
    } catch (exp) {
      console.error('Error in trying to update gas limit', exp);
    }
    setInputChangeInProgress(false);
  };
  (0, _react.useEffect)(() => {
    if (value !== String(dappProposedValue)) {
      setShowUseDefaultButton(true);
    }
  }, [value, dappProposedValue]);
  (0, _react.useEffect)(() => {
    passTheErrorText(error);
  }, [error, passTheErrorText]);
  (0, _react.useEffect)(() => {
    if (inputRef.current) {
      inputRef.current.focus({
        preventScroll: true
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [inputRef.current]);
  const chooseTooltipContentText = decConversionGreaterThan(value, currentTokenBalance) ? t('warningTooltipText', [/*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    key: "tooltip-text",
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    color: _designSystem.TextColor.errorDefault
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Warning
  }), " ", t('beCareful'))]) : t('inputLogicEmptyState');
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "custom-spending-cap",
    borderRadius: _designSystem.Size.SM,
    paddingTop: 2,
    paddingRight: 6,
    paddingLeft: 6,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.flexStart,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    backgroundColor: _designSystem.BackgroundColor.backgroundAlternative,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JustifyContent.center,
    display: _designSystem.DISPLAY.BLOCK,
    className: "custom-spending-cap__input"
  }, /*#__PURE__*/_react.default.createElement("label", {
    htmlFor: decConversionGreaterThan(value, currentTokenBalance) ? 'custom-spending-cap-input-value' : 'custom-spending-cap'
  }, /*#__PURE__*/_react.default.createElement(_formField.default, {
    inputRef: inputRef,
    dataTestId: "custom-spending-cap-input",
    wrappingLabelProps: {
      as: 'div'
    },
    id: decConversionGreaterThan(value, currentTokenBalance) ? 'custom-spending-cap-input-value' : 'custom-spending-cap',
    TooltipCustomComponent: /*#__PURE__*/_react.default.createElement(_customSpendingCapTooltip.CustomSpendingCapTooltip, {
      tooltipContentText: replaceCommaToDot(value) ? chooseTooltipContentText : '',
      tooltipIcon: replaceCommaToDot(value) ? decConversionGreaterThan(value, currentTokenBalance) : ''
    }),
    onChange: handleChange,
    titleText: t('customSpendingCap'),
    placeholder: t('enterANumber'),
    error: error,
    value: value,
    titleDetail: showUseDefaultButton && /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
      size: _designSystem.Size.auto,
      onClick: e => {
        e.preventDefault();
        setShowUseDefaultButton(false);
        handleChange(dappProposedValue);
      }
    }, t('useDefault')),
    titleDetailWrapperProps: {
      marginBottom: 2,
      marginRight: 0
    }
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    width: _designSystem.BLOCK_SIZES.MAX,
    marginLeft: "auto",
    paddingRight: 4,
    paddingBottom: 2,
    textAlign: _designSystem.TEXT_ALIGN.END,
    className: (0, _classnames.default)('custom-spending-cap__max', {
      'custom-spending-cap__max--with-error-message': error
    })
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    size: _designSystem.Size.auto,
    onClick: e => {
      e.preventDefault();
      handleChange(currentTokenBalance);
    }
  }, t('max'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: (0, _classnames.default)('custom-spending-cap__description', {
      'custom-spending-cap__description--with-error-message': error
    })
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    paddingTop: 2,
    paddingBottom: 2
  }, replaceCommaToDot(value) ? customSpendingCapText : inputLogicEmptyStateText))))));
}
CustomSpendingCap.propTypes = {
  /**
   * Transaction params
   */
  txParams: _propTypes.default.object.isRequired,
  /**
   * Displayed the token name currently tracked in description related to the input state
   */
  tokenName: _propTypes.default.string,
  /**
   * The current token balance of the token
   */
  currentTokenBalance: _propTypes.default.string,
  /**
   * The dapp suggested amount
   */
  dappProposedValue: _propTypes.default.string,
  /**
   * The origin of the site generally the URL
   */
  siteOrigin: _propTypes.default.string,
  /**
   * Parent component's callback function passed in order to get the error text
   */
  passTheErrorText: _propTypes.default.func,
  /**
   * Number of decimals
   */
  decimals: _propTypes.default.string,
  /**
   * Updating input state to changing
   */
  setInputChangeInProgress: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\custom-spending-cap\\custom-spending-cap.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\detected-token\\detected-token-address\\detected-token-address.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../../hooks/useCopyToClipboard":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useCopyToClipboard.js","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../../ui/tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\tooltip\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cdetected-token%5Cdetected-token-address%5Cdetected-token-address.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _useCopyToClipboard = require("../../../../hooks/useCopyToClipboard");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _tooltip = _interopRequireDefault(require("../../../ui/tooltip"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _util = require("../../../../helpers/utils/util");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DetectedTokenAddress = ({
  tokenAddress
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.INLINE_FLEX,
    className: "detected-token-address"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textDefault
  }, `${t('tokenAddress')}:`), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.primaryDefault,
    marginLeft: 2,
    marginRight: 2
  }, (0, _util.shortenAddress)(tokenAddress)), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    title: copied ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    className: "detected-token-address__copy-link",
    onClick: () => {
      handleCopy(tokenAddress);
    }
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-copy"
  }))));
};
DetectedTokenAddress.propTypes = {
  tokenAddress: _propTypes.default.string
};
var _default = DetectedTokenAddress;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\detected-token\\detected-token-address\\detected-token-address.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\detected-token\\detected-token-aggregators\\detected-token-aggregators.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cdetected-token%5Cdetected-token-aggregators%5Cdetected-token-aggregators.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const NUMBER_OF_AGGREGATORS_TO_DISPLAY = 2;
const DetectedTokenAggregators = ({
  aggregators
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const numOfHiddenAggregators = parseInt(aggregators.length, 10) - NUMBER_OF_AGGREGATORS_TO_DISPLAY;
  const [displayMore, setDisplayMore] = (0, _react.useState)(false);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.INLINE_FLEX,
    className: "detected-token-aggregators"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Normal
  }, t('fromTokenLists', [numOfHiddenAggregators > 0 && !displayMore ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Normal,
    key: "detected-token-aggrgators-with-more"
  }, `${aggregators.slice(0, NUMBER_OF_AGGREGATORS_TO_DISPLAY).join(', ')}`, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    className: "detected-token-aggregators__link",
    onClick: () => setDisplayMore(true),
    key: "detected-token-aggrgators-link"
  }, t('plusXMore', [numOfHiddenAggregators]))) : /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Normal,
    key: "detected-token-aggrgators-without-more"
  }, `${aggregators.join(', ')}.`)])));
};
DetectedTokenAggregators.propTypes = {
  aggregators: _propTypes.default.array.isRequired
};
var _default = DetectedTokenAggregators;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\detected-token\\detected-token-aggregators\\detected-token-aggregators.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\detected-token\\detected-token-details\\detected-token-details.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../../ui/identicon":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\identicon\\index.js","../detected-token-address/detected-token-address":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\detected-token\\detected-token-address\\detected-token-address.js","../detected-token-aggregators/detected-token-aggregators":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\detected-token\\detected-token-aggregators\\detected-token-aggregators.js","../detected-token-values/detected-token-values":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\detected-token\\detected-token-values\\detected-token-values.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cdetected-token%5Cdetected-token-details%5Cdetected-token-details.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
var _detectedTokenValues = _interopRequireDefault(require("../detected-token-values/detected-token-values"));
var _detectedTokenAddress = _interopRequireDefault(require("../detected-token-address/detected-token-address"));
var _detectedTokenAggregators = _interopRequireDefault(require("../detected-token-aggregators/detected-token-aggregators"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _selectors = require("../../../../selectors");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DetectedTokenDetails = ({
  token,
  handleTokenSelection,
  tokensListDetected
}) => {
  var _token$address;
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList);
  const tokenData = tokenList[(_token$address = token.address) === null || _token$address === void 0 ? void 0 : _token$address.toLowerCase()];
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    className: "detected-token-details",
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    className: "detected-token-details__identicon",
    address: token.address,
    diameter: 40
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.GRID,
    marginLeft: 2,
    className: "detected-token-details__data"
  }, /*#__PURE__*/_react.default.createElement(_detectedTokenValues.default, {
    token: token,
    handleTokenSelection: handleTokenSelection,
    tokensListDetected: tokensListDetected
  }), /*#__PURE__*/_react.default.createElement(_detectedTokenAddress.default, {
    tokenAddress: token.address
  }), (tokenData === null || tokenData === void 0 ? void 0 : tokenData.aggregators.length) > 0 && /*#__PURE__*/_react.default.createElement(_detectedTokenAggregators.default, {
    aggregators: tokenData === null || tokenData === void 0 ? void 0 : tokenData.aggregators
  })));
};
DetectedTokenDetails.propTypes = {
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string,
    iconUrl: _propTypes.default.string,
    aggregators: _propTypes.default.array
  }),
  handleTokenSelection: _propTypes.default.func.isRequired,
  tokensListDetected: _propTypes.default.object
};
var _default = DetectedTokenDetails;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\detected-token\\detected-token-details\\detected-token-details.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\detected-token\\detected-token-ignored-popover\\detected-token-ignored-popover.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../../ui/popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\popover\\index.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cdetected-token%5Cdetected-token-ignored-popover%5Cdetected-token-ignored-popover.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _popover = _interopRequireDefault(require("../../../ui/popover"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DetectedTokenIgnoredPopover = ({
  partiallyIgnoreDetectedTokens,
  onCancelIgnore,
  handleClearTokensSelection
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const footer = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "detected-token-ignored-popover__ignore-button",
    type: "secondary",
    onClick: onCancelIgnore
  }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "detected-token-ignored-popover__import-button",
    type: "primary",
    onClick: handleClearTokensSelection
  }, t('confirm')));
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: partiallyIgnoreDetectedTokens ? t('importSelectedTokens') : t('areYouSure'),
    className: (0, _classnames.default)('detected-token-ignored-popover', {
      'detected-token-ignored-popover--import': partiallyIgnoreDetectedTokens,
      'detected-token-ignored-popover--ignore': !partiallyIgnoreDetectedTokens
    }),
    footer: footer
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    marginTop: 0,
    marginRight: 5,
    marginBottom: 7,
    marginLeft: 5
  }, partiallyIgnoreDetectedTokens ? t('importSelectedTokensDescription') : t('ignoreTokenWarning')));
};
DetectedTokenIgnoredPopover.propTypes = {
  partiallyIgnoreDetectedTokens: _propTypes.default.bool.isRequired,
  onCancelIgnore: _propTypes.default.func.isRequired,
  handleClearTokensSelection: _propTypes.default.func.isRequired
};
var _default = DetectedTokenIgnoredPopover;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\detected-token\\detected-token-ignored-popover\\detected-token-ignored-popover.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\detected-token\\detected-token-selection-popover\\detected-token-selection-popover.js", {"../../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../../contexts/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\metametrics.js","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../../ui/popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\popover\\index.js","../detected-token-details/detected-token-details":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\detected-token\\detected-token-details\\detected-token-details.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cdetected-token%5Cdetected-token-selection-popover%5Cdetected-token-selection-popover.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _metametrics = require("../../../../contexts/metametrics");
var _metametrics2 = require("../../../../../shared/constants/metametrics");
var _selectors = require("../../../../selectors");
var _popover = _interopRequireDefault(require("../../../ui/popover"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _detectedTokenDetails = _interopRequireDefault(require("../detected-token-details/detected-token-details"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const DetectedTokenSelectionPopover = ({
  tokensListDetected,
  handleTokenSelection,
  onImport,
  onIgnoreAll,
  setShowDetectedTokens,
  sortingBasedOnTokenSelection
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const detectedTokens = (0, _reactRedux.useSelector)(_selectors.getDetectedTokensInCurrentNetwork);
  const {
    selected: selectedTokens = []
  } = sortingBasedOnTokenSelection(tokensListDetected);
  const numOfTokensImporting = selectedTokens.length === detectedTokens.length ? `All` : `(${selectedTokens.length})`;
  const onClose = () => {
    setShowDetectedTokens(false);
    const eventTokensDetails = detectedTokens.map(({
      address,
      symbol
    }) => `${symbol} - ${address}`);
    trackEvent({
      event: _metametrics2.MetaMetricsEventName.TokenImportCanceled,
      category: _metametrics2.MetaMetricsEventCategory.Wallet,
      properties: {
        source_connection_method: _metametrics2.MetaMetricsTokenEventSource.Detected,
        chain_id: chainId,
        tokens: eventTokensDetails
      }
    });
  };
  const footer = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "detected-token-selection-popover__ignore-button",
    type: "secondary",
    onClick: () => onIgnoreAll()
  }, t('ignoreAll')), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "detected-token-selection-popover__import-button",
    type: "primary",
    onClick: onImport,
    disabled: selectedTokens.length === 0
  }, t('importWithCount', [numOfTokensImporting])));
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "detected-token-selection-popover",
    title: detectedTokens.length === 1 ? t('tokenFoundTitle') : t('tokensFoundTitle', [detectedTokens.length]),
    onClose: onClose,
    footer: footer
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    margin: 3
  }, detectedTokens.map((token, index) => {
    return /*#__PURE__*/_react.default.createElement(_detectedTokenDetails.default, {
      key: index,
      token: token,
      handleTokenSelection: handleTokenSelection,
      tokensListDetected: tokensListDetected
    });
  })));
};
DetectedTokenSelectionPopover.propTypes = {
  tokensListDetected: _propTypes.default.object,
  handleTokenSelection: _propTypes.default.func.isRequired,
  onIgnoreAll: _propTypes.default.func.isRequired,
  onImport: _propTypes.default.func.isRequired,
  setShowDetectedTokens: _propTypes.default.func.isRequired,
  sortingBasedOnTokenSelection: _propTypes.default.func.isRequired
};
var _default = DetectedTokenSelectionPopover;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\detected-token\\detected-token-selection-popover\\detected-token-selection-popover.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\detected-token\\detected-token-values\\detected-token-values.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useTokenFiatAmount":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useTokenFiatAmount.js","../../../../hooks/useTokenTracker":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useTokenTracker.js","../../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../../ui/check-box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\check-box\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cdetected-token%5Cdetected-token-values%5Cdetected-token-values.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _checkBox = _interopRequireDefault(require("../../../ui/check-box"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _useTokenTracker = require("../../../../hooks/useTokenTracker");
var _useTokenFiatAmount = require("../../../../hooks/useTokenFiatAmount");
var _selectors = require("../../../../selectors");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const DetectedTokenValues = ({
  token,
  handleTokenSelection,
  tokensListDetected
}) => {
  var _tokensWithBalances$;
  const [tokenSelection, setTokenSelection] = (0, _react.useState)(() => {
    var _tokensListDetected$t;
    return (_tokensListDetected$t = tokensListDetected[token.address]) === null || _tokensListDetected$t === void 0 ? void 0 : _tokensListDetected$t.selected;
  });
  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)([token]);
  const balanceString = (_tokensWithBalances$ = tokensWithBalances[0]) === null || _tokensWithBalances$ === void 0 ? void 0 : _tokensWithBalances$.string;
  const formattedFiatBalance = (0, _useTokenFiatAmount.useTokenFiatAmount)(token.address, balanceString, token.symbol);
  const useCurrencyRateCheck = (0, _reactRedux.useSelector)(_selectors.getUseCurrencyRateCheck);
  (0, _react.useEffect)(() => {
    var _tokensListDetected$t2;
    setTokenSelection((_tokensListDetected$t2 = tokensListDetected[token.address]) === null || _tokensListDetected$t2 === void 0 ? void 0 : _tokensListDetected$t2.selected);
  }, [tokensListDetected, token.address, tokenSelection, setTokenSelection]);
  const handleCheckBoxSelection = () => {
    setTokenSelection(!tokenSelection);
    handleTokenSelection(token);
  };
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.INLINE_FLEX,
    className: "detected-token-values"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 1
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    as: "h4"
  }, `${balanceString || '0'} ${token.symbol}`), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textAlternative
  }, useCurrencyRateCheck ? formattedFiatBalance || '$0' // since formattedFiatBalance will be when teh conversion rate is not obtained, should be replace the `$0` with `N/A`
  : formattedFiatBalance)), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "detected-token-values__checkbox"
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    checked: tokenSelection,
    onClick: handleCheckBoxSelection
  })));
};
DetectedTokenValues.propTypes = {
  token: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    decimals: _propTypes.default.number,
    symbol: _propTypes.default.string,
    iconUrl: _propTypes.default.string,
    aggregators: _propTypes.default.array
  }),
  handleTokenSelection: _propTypes.default.func.isRequired,
  tokensListDetected: _propTypes.default.object
};
var _default = DetectedTokenValues;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\detected-token\\detected-token-values\\detected-token-values.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\detected-token\\detected-token.js", {"../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../../shared/constants/transaction":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\transaction.ts","../../../contexts/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\metametrics.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","./detected-token-ignored-popover/detected-token-ignored-popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\detected-token\\detected-token-ignored-popover\\detected-token-ignored-popover.js","./detected-token-selection-popover/detected-token-selection-popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\detected-token\\detected-token-selection-popover\\detected-token-selection-popover.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cdetected-token%5Cdetected-token.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _lodash = require("lodash");
var _actions = require("../../../store/actions");
var _selectors = require("../../../selectors");
var _metametrics = require("../../../contexts/metametrics");
var _transaction = require("../../../../shared/constants/transaction");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _detectedTokenSelectionPopover = _interopRequireDefault(require("./detected-token-selection-popover/detected-token-selection-popover"));
var _detectedTokenIgnoredPopover = _interopRequireDefault(require("./detected-token-ignored-popover/detected-token-ignored-popover"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const sortingBasedOnTokenSelection = tokensDetected => {
  return (0, _lodash.chain)(tokensDetected)
  // get the values
  .values()
  // create a new object with keys 'selected', 'deselected' and group the tokens
  .groupBy(token => token.selected ? 'selected' : 'deselected')
  // ditch the 'selected' property and get just the tokens'
  .mapValues(group => group.map(({
    token
  }) => {
    const {
      address,
      symbol,
      decimals,
      aggregators
    } = token;
    return {
      address,
      symbol,
      decimals,
      aggregators
    };
  }))
  // Exit the chain and get the underlying value, an object.
  .value();
};
const DetectedToken = ({
  setShowDetectedTokens
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const detectedTokens = (0, _reactRedux.useSelector)(_selectors.getDetectedTokensInCurrentNetwork);
  const [tokensListDetected, setTokensListDetected] = (0, _react.useState)(() => detectedTokens.reduce((tokenObj, token) => {
    tokenObj[token.address] = {
      token,
      selected: true
    };
    return tokenObj;
  }, {}));
  const [showDetectedTokenIgnoredPopover, setShowDetectedTokenIgnoredPopover] = (0, _react.useState)(false);
  const [partiallyIgnoreDetectedTokens, setPartiallyIgnoreDetectedTokens] = (0, _react.useState)(false);
  const importSelectedTokens = async selectedTokens => {
    selectedTokens.forEach(importedToken => {
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.TokenAdded,
        category: _metametrics2.MetaMetricsEventCategory.Wallet,
        sensitiveProperties: {
          token_symbol: importedToken.symbol,
          token_contract_address: importedToken.address,
          token_decimal_precision: importedToken.decimals,
          source_connection_method: _metametrics2.MetaMetricsTokenEventSource.Detected,
          token_standard: _transaction.TokenStandard.ERC20,
          asset_type: _transaction.AssetType.token,
          token_added_type: 'detected',
          chain_id: chainId
        }
      });
    });
    await dispatch((0, _actions.addImportedTokens)(selectedTokens));
    const tokenSymbols = selectedTokens.map(({
      symbol
    }) => symbol);
    dispatch((0, _actions.setNewTokensImported)(tokenSymbols.join(', ')));
  };
  const handleClearTokensSelection = async () => {
    const {
      selected: selectedTokens = [],
      deselected: deSelectedTokens = []
    } = sortingBasedOnTokenSelection(tokensListDetected);
    if (deSelectedTokens.length < detectedTokens.length) {
      await importSelectedTokens(selectedTokens);
    }
    const tokensDetailsList = deSelectedTokens.map(({
      symbol,
      address
    }) => `${symbol} - ${address}`);
    trackEvent({
      event: _metametrics2.MetaMetricsEventName.TokenHidden,
      category: _metametrics2.MetaMetricsEventCategory.Wallet,
      sensitiveProperties: {
        tokens: tokensDetailsList,
        location: _metametrics2.MetaMetricsEventLocation.TokenDetection,
        token_standard: _transaction.TokenStandard.ERC20,
        asset_type: _transaction.AssetType.token
      }
    });
    const deSelectedTokensAddresses = deSelectedTokens.map(({
      address
    }) => address);
    await dispatch((0, _actions.ignoreTokens)({
      tokensToIgnore: deSelectedTokensAddresses,
      dontShowLoadingIndicator: true
    }));
    setShowDetectedTokens(false);
    setPartiallyIgnoreDetectedTokens(false);
  };
  const handleTokenSelection = token => {
    setTokensListDetected(prevState => ({
      ...prevState,
      [token.address]: {
        ...prevState[token.address],
        selected: !prevState[token.address].selected
      }
    }));
  };
  const onImport = async () => {
    const {
      selected: selectedTokens = []
    } = sortingBasedOnTokenSelection(tokensListDetected);
    if (selectedTokens.length < detectedTokens.length) {
      setShowDetectedTokenIgnoredPopover(true);
      setPartiallyIgnoreDetectedTokens(true);
    } else {
      await importSelectedTokens(selectedTokens);
      setShowDetectedTokens(false);
    }
  };
  const onIgnoreAll = () => {
    const newTokensListDetected = {
      ...tokensListDetected
    };
    for (const tokenAddress of Object.keys(tokensListDetected)) {
      newTokensListDetected[tokenAddress].selected = false;
    }
    setTokensListDetected(newTokensListDetected);
    setShowDetectedTokenIgnoredPopover(true);
  };
  const onCancelIgnore = () => {
    setShowDetectedTokenIgnoredPopover(false);
    setPartiallyIgnoreDetectedTokens(false);
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, showDetectedTokenIgnoredPopover && /*#__PURE__*/_react.default.createElement(_detectedTokenIgnoredPopover.default, {
    onCancelIgnore: onCancelIgnore,
    handleClearTokensSelection: handleClearTokensSelection,
    partiallyIgnoreDetectedTokens: partiallyIgnoreDetectedTokens
  }), detectedTokens.length > 0 && /*#__PURE__*/_react.default.createElement(_detectedTokenSelectionPopover.default, {
    detectedTokens: detectedTokens,
    tokensListDetected: tokensListDetected,
    handleTokenSelection: handleTokenSelection,
    onImport: onImport,
    onIgnoreAll: onIgnoreAll,
    setShowDetectedTokens: setShowDetectedTokens,
    sortingBasedOnTokenSelection: sortingBasedOnTokenSelection
  }));
};
DetectedToken.propTypes = {
  setShowDetectedTokens: _propTypes.default.func.isRequired
};
var _default = DetectedToken;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\detected-token\\detected-token.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\dropdowns\\dropdown.js", {"../menu-droppo":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\menu-droppo.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cdropdowns%5Cdropdown.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DropdownMenuItem = exports.Dropdown = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _menuDroppo = _interopRequireDefault(require("../menu-droppo"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class Dropdown extends _react.Component {
  render() {
    const {
      containerClassName,
      isOpen,
      onClickOutside,
      style,
      innerStyle,
      children,
      useCssTransition
    } = this.props;
    const innerStyleDefaults = {
      borderRadius: '4px',
      padding: '8px 16px',
      background: 'var(--color-background-default)',
      boxShadow: 'var(--shadow-size-sm) var(--color-shadow-default)',
      ...innerStyle
    };
    return /*#__PURE__*/_react.default.createElement(_menuDroppo.default, {
      containerClassName: containerClassName,
      useCssTransition: useCssTransition,
      isOpen: isOpen,
      zIndex: 55,
      onClickOutside: onClickOutside,
      style: style,
      innerStyle: innerStyleDefaults
    }, /*#__PURE__*/_react.default.createElement("style", null, `
            li.dropdown-menu-item:hover {
              color:var(--color-text-default);
              background-color: var(--color-background-default-hover);
              border-radius: 4px;
            }
          `), children);
  }
}
exports.Dropdown = Dropdown;
Dropdown.defaultProps = {
  useCssTransition: false
};
Dropdown.propTypes = {
  isOpen: _propTypes.default.bool.isRequired,
  children: _propTypes.default.node,
  style: _propTypes.default.object.isRequired,
  onClickOutside: _propTypes.default.func,
  innerStyle: _propTypes.default.object,
  useCssTransition: _propTypes.default.bool,
  containerClassName: _propTypes.default.string
};
class DropdownMenuItem extends _react.Component {
  render() {
    const {
      onClick,
      closeMenu,
      children,
      style
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("li", {
      className: "dropdown-menu-item",
      "data-testid": "dropdown-menu-item",
      onClick: () => {
        onClick();
        closeMenu();
      },
      onKeyPress: event => {
        if (event.key === 'Enter') {
          onClick();
          closeMenu();
        }
      },
      style: {
        listStyle: 'none',
        padding: '8px 0px',
        fontSize: '18px',
        fontStyle: 'normal',
        cursor: 'pointer',
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'center',
        ...style
      },
      tabIndex: "0"
    }, children);
  }
}
exports.DropdownMenuItem = DropdownMenuItem;
DropdownMenuItem.propTypes = {
  closeMenu: _propTypes.default.func.isRequired,
  onClick: _propTypes.default.func.isRequired,
  children: _propTypes.default.node,
  style: _propTypes.default.object
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\dropdowns\\dropdown.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\dropdowns\\network-dropdown.js", {"../../../../app/scripts/lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../../shared/modules/network.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\network.utils.ts","../../../ducks/alerts/invalid-custom-network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\alerts\\invalid-custom-network.js","../../../ducks/metamask/metamask":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\routes.ts","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../ui/color-indicator":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\color-indicator\\index.js","./dropdown":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\dropdowns\\dropdown.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-router-dom\\index.js","redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cdropdowns%5Cnetwork-dropdown.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _redux = require("redux");
var _lodash = require("lodash");
var _button = _interopRequireDefault(require("../../ui/button"));
var actions = _interopRequireWildcard(require("../../../store/actions"));
var _invalidCustomNetwork = require("../../../ducks/alerts/invalid-custom-network");
var _metamask = require("../../../ducks/metamask/metamask");
var _network = require("../../../../shared/constants/network");
var _network2 = require("../../../../shared/modules/network.utils");
var _colorIndicator = _interopRequireDefault(require("../../ui/color-indicator"));
var _designSystem = require("../../../helpers/constants/design-system");
var _selectors = require("../../../selectors");
var _util = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _metametrics = require("../../../../shared/constants/metametrics");
var _routes = require("../../../helpers/constants/routes");
var _componentLibrary = require("../../component-library");
var _dropdown = require("./dropdown");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// classes from nodes of the toggle element.
const notToggleElementClassnames = ['menu-icon', 'network-name', 'network-indicator', 'network-caret', 'network-component', 'modal-container__footer-button'];
const DROP_DOWN_MENU_ITEM_STYLE = {
  fontSize: '16px',
  lineHeight: '20px',
  padding: '16px'
};
function mapStateToProps(state) {
  return {
    providerConfig: (0, _metamask.getProviderConfig)(state),
    shouldShowTestNetworks: (0, _selectors.getShowTestNetworks)(state),
    networkConfigurations: state.metamask.networkConfigurations,
    networkDropdownOpen: state.appState.networkDropdownOpen,
    showTestnetMessageInDropdown: state.metamask.showTestnetMessageInDropdown
  };
}
function mapDispatchToProps(dispatch) {
  return {
    setProviderType: type => {
      dispatch(actions.setProviderType(type));
    },
    setActiveNetwork: networkConfigurationId => {
      dispatch(actions.setActiveNetwork(networkConfigurationId));
    },
    upsertNetworkConfiguration: (...args) => dispatch(actions.upsertNetworkConfiguration(...args)),
    hideNetworkDropdown: () => dispatch(actions.hideNetworkDropdown()),
    displayInvalidCustomNetworkAlert: networkName => {
      dispatch((0, _invalidCustomNetwork.openAlert)(networkName));
    },
    showConfirmDeleteNetworkModal: ({
      target,
      onConfirm
    }) => {
      return dispatch(actions.showModal({
        name: 'CONFIRM_DELETE_NETWORK',
        target,
        onConfirm
      }));
    },
    hideTestNetMessage: () => actions.hideTestNetMessage()
  };
}
class NetworkDropdown extends _react.Component {
  handleClick(newProviderType) {
    const {
      providerConfig: {
        type: providerType
      },
      setProviderType
    } = this.props;
    const {
      trackEvent
    } = this.context;
    trackEvent({
      category: _metametrics.MetaMetricsEventCategory.Navigation,
      event: _metametrics.MetaMetricsEventName.NavNetworkSwitched,
      properties: {
        from_network: providerType,
        to_network: newProviderType
      }
    });
    setProviderType(newProviderType);
  }
  renderAddCustomButton() {
    const {
      onAddClick
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "network__add-network-button"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      onClick: () => {
        if (onAddClick) {
          onAddClick();
        } else {
          (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? global.platform.openExtensionInBrowser(_routes.ADD_POPULAR_CUSTOM_NETWORK) : this.props.history.push(_routes.ADD_POPULAR_CUSTOM_NETWORK);
        }
        this.props.hideNetworkDropdown();
      }
    }, this.context.t('addNetwork')));
  }
  renderCustomRpcList(networkConfigurations, providerConfig, opts = {}) {
    return Object.entries(networkConfigurations).map(([networkConfigurationId, networkConfiguration]) => {
      const {
        rpcUrl,
        chainId,
        nickname = '',
        id
      } = networkConfiguration;
      const isCurrentRpcTarget = providerConfig.type === _network.NETWORK_TYPES.RPC && rpcUrl === providerConfig.rpcUrl;
      return /*#__PURE__*/_react.default.createElement(_dropdown.DropdownMenuItem, {
        key: `common${rpcUrl}`,
        closeMenu: () => this.props.hideNetworkDropdown(),
        onClick: () => {
          if ((0, _network2.isPrefixedFormattedHexString)(chainId)) {
            this.props.setActiveNetwork(networkConfigurationId);
          } else {
            this.props.displayInvalidCustomNetworkAlert(nickname || rpcUrl);
          }
        },
        style: {
          fontSize: '16px',
          lineHeight: '20px',
          padding: '16px'
        }
      }, isCurrentRpcTarget ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
        name: _componentLibrary.IconName.Check,
        color: _designSystem.IconColor.successDefault
      }) : /*#__PURE__*/_react.default.createElement("div", {
        className: "network-check__transparent"
      }, "\u2713"), /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
        color: opts.isLocalHost ? 'localhost' : _designSystem.IconColor.iconMuted,
        size: _designSystem.Size.LG,
        type: _colorIndicator.default.TYPES.FILLED
      }), /*#__PURE__*/_react.default.createElement("span", {
        className: "network-name-item",
        "data-testid": `${nickname}-network-item`,
        style: {
          color: isCurrentRpcTarget ? 'var(--color-text-default)' : 'var(--color-text-alternative)'
        }
      }, nickname || rpcUrl), isCurrentRpcTarget ? null : /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
        className: "delete",
        iconName: _componentLibrary.IconName.Close,
        size: _componentLibrary.IconSize.Sm,
        ariaLabel: this.context.t('delete'),
        onClick: e => {
          e.stopPropagation();
          this.props.showConfirmDeleteNetworkModal({
            target: id,
            onConfirm: () => undefined
          });
        }
      }));
    });
  }
  renderNetworkEntry(network) {
    const {
      providerConfig: {
        type: providerType
      }
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_dropdown.DropdownMenuItem, {
      key: network,
      closeMenu: this.props.hideNetworkDropdown,
      onClick: () => this.handleClick(network),
      style: DROP_DOWN_MENU_ITEM_STYLE
    }, providerType === network ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: _componentLibrary.IconName.Check,
      color: _designSystem.IconColor.successDefault
    }) : /*#__PURE__*/_react.default.createElement("div", {
      className: "network-check__transparent"
    }, "\u2713"), /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
      color: network,
      size: _designSystem.Size.LG,
      type: _colorIndicator.default.TYPES.FILLED
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "network-name-item",
      "data-testid": `${network}-network-item`,
      style: {
        color: providerType === network ? 'var(--color-text-default)' : 'var(--color-text-alternative)'
      }
    }, this.context.t(network)));
  }
  renderNonInfuraDefaultNetwork(networkConfigurations, network) {
    const {
      providerConfig,
      setActiveNetwork,
      upsertNetworkConfiguration
    } = this.props;
    const {
      chainId,
      ticker,
      blockExplorerUrl
    } = _network.BUILT_IN_NETWORKS[network];
    const networkName = _network.NETWORK_TO_NAME_MAP[network];
    const rpcUrl = _network.CHAIN_ID_TO_RPC_URL_MAP[chainId];
    const isCurrentRpcTarget = providerConfig.type === _network.NETWORK_TYPES.RPC && rpcUrl === providerConfig.rpcUrl;
    return /*#__PURE__*/_react.default.createElement(_dropdown.DropdownMenuItem, {
      key: network,
      closeMenu: this.props.hideNetworkDropdown,
      onClick: async () => {
        const networkConfiguration = (0, _lodash.pickBy)(networkConfigurations, config => config.rpcUrl === _network.CHAIN_ID_TO_RPC_URL_MAP[chainId]);
        let configurationId = null;
        // eslint-disable-next-line no-extra-boolean-cast, no-implicit-coercion
        if (!!networkConfiguration) {
          configurationId = await upsertNetworkConfiguration({
            rpcUrl,
            ticker,
            chainId,
            nickname: networkName,
            rpcPrefs: {
              blockExplorerUrl
            }
          }, {
            setActive: true,
            source: _metametrics.MetaMetricsNetworkEventSource.CustomNetworkForm
          });
        }
        setActiveNetwork(configurationId);
      },
      style: DROP_DOWN_MENU_ITEM_STYLE
    }, isCurrentRpcTarget ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: _componentLibrary.IconName.Check,
      color: _designSystem.IconColor.successDefault
    }) : /*#__PURE__*/_react.default.createElement("div", {
      className: "network-check__transparent"
    }, "\u2713"), /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
      color: network,
      size: _designSystem.Size.LG,
      type: _colorIndicator.default.TYPES.FILLED
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "network-name-item",
      "data-testid": `${network}-network-item`,
      style: {
        color: providerConfig.type === network ? 'var(--color-text-default)' : 'var(--color-text-alternative)'
      }
    }, this.context.t(network)));
  }
  render() {
    const {
      history,
      hideElementsForOnboarding,
      hideNetworkDropdown,
      shouldShowTestNetworks,
      showTestnetMessageInDropdown,
      hideTestNetMessage,
      networkConfigurations
    } = this.props;
    const rpcListDetailWithoutLocalHostAndLinea = (0, _lodash.pickBy)(networkConfigurations, config => config.rpcUrl !== _network.LOCALHOST_RPC_URL && config.rpcUrl !== _network.LINEA_TESTNET_RPC_URL);
    const rpcListDetailForLocalHost = (0, _lodash.pickBy)(networkConfigurations, config => config.rpcUrl === _network.LOCALHOST_RPC_URL);
    const isOpen = this.props.networkDropdownOpen;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_dropdown.Dropdown, {
      isOpen: isOpen,
      onClickOutside: event => {
        const {
          classList
        } = event.target;
        const isInClassList = className => classList.contains(className);
        const notToggleElementIndex = notToggleElementClassnames.findIndex(isInClassList);
        if (notToggleElementIndex === -1) {
          event.stopPropagation();
          hideNetworkDropdown();
        }
      },
      containerClassName: "network-droppo",
      zIndex: 55,
      style: this.props.dropdownStyles || {
        position: 'absolute',
        top: '58px',
        width: '309px',
        zIndex: '55'
      },
      innerStyle: {
        padding: '16px 0'
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-header"
    }, hideElementsForOnboarding ? null : /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-title"
    }, t('networks')), hideElementsForOnboarding ? null : /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-divider"
    }), showTestnetMessageInDropdown && !hideElementsForOnboarding ? /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-content"
    }, t('toggleTestNetworks', [/*#__PURE__*/_react.default.createElement("a", {
      href: "#",
      key: "advancedSettingsLink",
      className: "network-dropdown-content--link",
      onClick: e => {
        e.preventDefault();
        hideNetworkDropdown();
        history.push(`${_routes.ADVANCED_ROUTE}#show-testnets`);
      }
    }, t('showHide'))]), /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: hideTestNetMessage,
      className: "network-dropdown-content--dismiss"
    }, t('dismiss'))) : null), /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-list"
    }, this.renderNetworkEntry(_network.NETWORK_TYPES.MAINNET), this.renderCustomRpcList(rpcListDetailWithoutLocalHostAndLinea, this.props.providerConfig), shouldShowTestNetworks && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, this.renderNetworkEntry(_network.NETWORK_TYPES.GOERLI), this.renderNetworkEntry(_network.NETWORK_TYPES.SEPOLIA), _network.SHOULD_SHOW_LINEA_TESTNET_NETWORK && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, this.renderNonInfuraDefaultNetwork(networkConfigurations, _network.NETWORK_TYPES.LINEA_TESTNET)), this.renderCustomRpcList(rpcListDetailForLocalHost, this.props.providerConfig, {
      isLocalHost: true
    }))), this.renderAddCustomButton());
  }
}
_defineProperty(NetworkDropdown, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});
_defineProperty(NetworkDropdown, "propTypes", {
  providerConfig: _propTypes.default.shape({
    nickname: _propTypes.default.string,
    rpcUrl: _propTypes.default.string,
    type: _propTypes.default.string,
    ticker: _propTypes.default.string
  }).isRequired,
  setProviderType: _propTypes.default.func.isRequired,
  setActiveNetwork: _propTypes.default.func.isRequired,
  hideNetworkDropdown: _propTypes.default.func.isRequired,
  networkConfigurations: _propTypes.default.object.isRequired,
  shouldShowTestNetworks: _propTypes.default.bool,
  networkDropdownOpen: _propTypes.default.bool.isRequired,
  displayInvalidCustomNetworkAlert: _propTypes.default.func.isRequired,
  showConfirmDeleteNetworkModal: _propTypes.default.func.isRequired,
  showTestnetMessageInDropdown: _propTypes.default.bool.isRequired,
  hideTestNetMessage: _propTypes.default.func.isRequired,
  history: _propTypes.default.object,
  dropdownStyles: _propTypes.default.object,
  hideElementsForOnboarding: _propTypes.default.bool,
  onAddClick: _propTypes.default.func,
  upsertNetworkConfiguration: _propTypes.default.func.isRequired
});
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(NetworkDropdown);
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\dropdowns\\network-dropdown.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-display\\edit-gas-display.component.js", {"../../../../shared/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\gas.ts","../../../contexts/i18n":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/confirm-tx.util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\confirm-tx.util.ts","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/actionable-message/actionable-message":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../ui/error-message":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\error-message\\index.js","../../ui/info-tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\info-tooltip\\index.js","../advanced-gas-controls/advanced-gas-controls.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\advanced-gas-controls\\advanced-gas-controls.component.js","bignumber.js":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\bignumber.js\\bignumber.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-display%5Cedit-gas-display.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EditGasDisplay;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _gas = require("../../../../shared/constants/gas");
var _button = _interopRequireDefault(require("../../ui/button"));
var _designSystem = require("../../../helpers/constants/design-system");
var _componentLibrary = require("../../component-library");
var _confirmTx = require("../../../helpers/utils/confirm-tx.util");
var _infoTooltip = _interopRequireDefault(require("../../ui/info-tooltip"));
var _errorMessage = _interopRequireDefault(require("../../ui/error-message"));
var _advancedGasControls = _interopRequireDefault(require("../advanced-gas-controls/advanced-gas-controls.component"));
var _actionableMessage = _interopRequireDefault(require("../../ui/actionable-message/actionable-message"));
var _i18n = require("../../../contexts/i18n");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function EditGasDisplay({
  mode = _gas.EditGasModes.modifyInPlace,
  estimatedMinimumNative,
  transaction,
  gasPrice,
  setGasPrice,
  gasLimit,
  setGasLimit,
  properGasLimit,
  dappSuggestedGasFeeAcknowledged,
  setDappSuggestedGasFeeAcknowledged,
  onManualChange,
  minimumGasLimit,
  balanceError,
  gasErrors,
  txParamsHaveBeenCustomized
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const scrollRef = (0, _react.useRef)(null);
  const dappSuggestedAndTxParamGasFeesAreTheSame = (0, _confirmTx.areDappSuggestedAndTxParamGasFeesTheSame)(transaction);
  const requireDappAcknowledgement = Boolean((transaction === null || transaction === void 0 ? void 0 : transaction.dappSuggestedGasFees) && !dappSuggestedGasFeeAcknowledged && dappSuggestedAndTxParamGasFeesAreTheSame);
  let warningMessage;
  if (gasLimit !== undefined && properGasLimit !== undefined && new _bignumber.default(gasLimit).lessThan(new _bignumber.default(properGasLimit))) {
    warningMessage = t('gasLimitRecommended', [properGasLimit]);
  }
  const showTopError = balanceError && txParamsHaveBeenCustomized;
  let errorKey;
  if (balanceError) {
    errorKey = 'insufficientFunds';
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__content"
  }, showTopError && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__warning"
  }, /*#__PURE__*/_react.default.createElement(_errorMessage.default, {
    errorKey: errorKey
  })), warningMessage && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__warning"
  }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "actionable-message--warning",
    message: warningMessage,
    iconFillColor: "var(--color-warning-default)",
    useIcon: true
  })), requireDappAcknowledgement && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__dapp-acknowledgement-warning"
  }, /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    className: "actionable-message--warning",
    message: t('gasDisplayDappWarning', [transaction.origin]),
    iconFillColor: "var(--color-warning-default)",
    useIcon: true
  })), mode === _gas.EditGasModes.speedUp && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-display__top-tooltip"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Bold
  }, t('speedUpTooltipText'), ' ', /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    position: "top",
    contentText: t('speedUpExplanation')
  }))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.displayMd,
    as: "h1",
    textAlign: _designSystem.TextAlign.Center
  }, estimatedMinimumNative), requireDappAcknowledgement && /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "edit-gas-display__dapp-acknowledgement-button",
    onClick: () => setDappSuggestedGasFeeAcknowledged(true)
  }, t('gasDisplayAcknowledgeDappButtonText')), !requireDappAcknowledgement && /*#__PURE__*/_react.default.createElement(_advancedGasControls.default, {
    gasLimit: gasLimit,
    setGasLimit: setGasLimit,
    gasPrice: gasPrice,
    setGasPrice: setGasPrice,
    onManualChange: onManualChange,
    minimumGasLimit: minimumGasLimit,
    gasErrors: gasErrors
  })), /*#__PURE__*/_react.default.createElement("div", {
    ref: scrollRef,
    className: "edit-gas-display__scroll-bottom"
  }));
}
EditGasDisplay.propTypes = {
  mode: _propTypes.default.oneOf(Object.values(_gas.EditGasModes)),
  estimatedMinimumNative: _propTypes.default.string,
  gasPrice: _propTypes.default.string,
  setGasPrice: _propTypes.default.func,
  gasLimit: _propTypes.default.number,
  setGasLimit: _propTypes.default.func,
  properGasLimit: _propTypes.default.number,
  dappSuggestedGasFeeAcknowledged: _propTypes.default.bool,
  setDappSuggestedGasFeeAcknowledged: _propTypes.default.func,
  transaction: _propTypes.default.object,
  onManualChange: _propTypes.default.func,
  minimumGasLimit: _propTypes.default.string,
  balanceError: _propTypes.default.bool,
  gasErrors: _propTypes.default.object,
  txParamsHaveBeenCustomized: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-display\\edit-gas-display.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-display\\index.js", {"./edit-gas-display.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-display\\edit-gas-display.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-display%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasDisplay.default;
  }
});
var _editGasDisplay = _interopRequireDefault(require("./edit-gas-display.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-display\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-button\\edit-gas-fee-button.js", {"../../../../shared/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\gas.ts","../../../contexts/gasFee":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\gasFee.js","../../../contexts/transaction-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\transaction-modal.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\gas.js","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../hooks/useTransactionEventFragment":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useTransactionEventFragment.js","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/info-tooltip/info-tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\info-tooltip\\info-tooltip.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-button%5Cedit-gas-fee-button.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EditGasFeeButton;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _gas = require("../../../../shared/constants/gas");
var _designSystem = require("../../../helpers/constants/design-system");
var _gas2 = require("../../../helpers/constants/gas");
var _gasFee = require("../../../contexts/gasFee");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _useTransactionEventFragment = require("../../../hooks/useTransactionEventFragment");
var _transactionModal = require("../../../contexts/transaction-modal");
var _infoTooltip = _interopRequireDefault(require("../../ui/info-tooltip/info-tooltip"));
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function EditGasFeeButton({
  userAcknowledgedGasMissing
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    editGasMode,
    gasLimit,
    hasSimulationError,
    estimateUsed,
    maxFeePerGas,
    maxPriorityFeePerGas,
    supportsEIP1559,
    transaction
  } = (0, _gasFee.useGasFeeContext)();
  const {
    updateTransactionEventFragment
  } = (0, _useTransactionEventFragment.useTransactionEventFragment)();
  const {
    openModal
  } = (0, _transactionModal.useTransactionModalContext)();
  const editEnabled = !hasSimulationError || userAcknowledgedGasMissing === true;
  if (!supportsEIP1559 || !estimateUsed || !editEnabled) {
    return null;
  }
  let icon = estimateUsed;
  let title = estimateUsed;
  if (estimateUsed === _gas.PriorityLevels.high && editGasMode === _gas.EditGasModes.swaps) {
    icon = 'swapSuggested';
    title = 'swapSuggested';
  } else if (estimateUsed === _gas.PriorityLevels.tenPercentIncreased) {
    icon = undefined;
    title = 'tenPercentIncreased';
  }
  const openEditGasFeeModal = () => {
    updateTransactionEventFragment({
      gas_edit_attempted: 'basic'
    });
    openModal('editGasFee');
  };
  const openAdvancedGasFeeModal = () => {
    updateTransactionEventFragment({
      gas_edit_attempted: 'advanced'
    });
    openModal('advancedGasFee');
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-button"
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: openEditGasFeeModal,
    "data-testid": "edit-gas-fee-button"
  }, icon && /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-button__icon"
  }, _gas2.PRIORITY_LEVEL_ICON_MAP[icon]), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-button__label"
  }, t(title)), /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.ArrowRight,
    color: _designSystem.Color.primaryDefault,
    size: _componentLibrary.IconSize.Xs
  })), estimateUsed === 'custom' && /*#__PURE__*/_react.default.createElement("button", {
    onClick: openAdvancedGasFeeModal
  }, t('edit')), estimateUsed === 'dappSuggested' && /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    contentText: /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-gas-fee-button__tooltip"
    }, (transaction === null || transaction === void 0 ? void 0 : transaction.origin) && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6",
      color: _designSystem.TextColor.textAlternative
    }, t('dappSuggestedTooltip', [transaction.origin])), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6"
    }, /*#__PURE__*/_react.default.createElement("b", null, t('maxBaseFee')), " ", maxFeePerGas), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6"
    }, /*#__PURE__*/_react.default.createElement("b", null, t('maxPriorityFee')), " ", maxPriorityFeePerGas), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6"
    }, /*#__PURE__*/_react.default.createElement("b", null, t('gasLimit')), " ", gasLimit)),
    position: "top"
  }));
}
EditGasFeeButton.propTypes = {
  userAcknowledgedGasMissing: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-button\\edit-gas-fee-button.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-button\\index.js", {"./edit-gas-fee-button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-button\\edit-gas-fee-button.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-button%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasFeeButton.default;
  }
});
var _editGasFeeButton = _interopRequireDefault(require("./edit-gas-fee-button"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-button\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-fee-popover.js", {"../../../../shared/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\gas.ts","../../../contexts/gasFee":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\gasFee.js","../../../contexts/transaction-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\transaction-modal.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/error-keys":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\error-keys.js","../../../helpers/constants/zendesk-url":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\zendesk-url.js","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../ui/error-message":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\error-message\\index.js","../../ui/popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\popover\\index.js","../app-loading-spinner":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\app-loading-spinner\\index.js","./edit-gas-item":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\index.js","./network-statistics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cedit-gas-fee-popover.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _gas = require("../../../../shared/constants/gas");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _transactionModal = require("../../../contexts/transaction-modal");
var _box = _interopRequireDefault(require("../../ui/box"));
var _errorMessage = _interopRequireDefault(require("../../ui/error-message"));
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _designSystem = require("../../../helpers/constants/design-system");
var _errorKeys = require("../../../helpers/constants/error-keys");
var _gasFee = require("../../../contexts/gasFee");
var _appLoadingSpinner = _interopRequireDefault(require("../app-loading-spinner"));
var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));
var _componentLibrary = require("../../component-library");
var _editGasItem = _interopRequireDefault(require("./edit-gas-item"));
var _networkStatistics = _interopRequireDefault(require("./network-statistics"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const EditGasFeePopover = () => {
  const {
    balanceError,
    editGasMode
  } = (0, _gasFee.useGasFeeContext)();
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    closeAllModals,
    closeModal,
    currentModal,
    openModalCount
  } = (0, _transactionModal.useTransactionModalContext)();
  if (currentModal !== 'editGasFee') {
    return null;
  }
  let popupTitle = 'editGasFeeModalTitle';
  if (editGasMode === _gas.EditGasModes.cancel) {
    popupTitle = 'editCancellationGasFeeModalTitle';
  } else if (editGasMode === _gas.EditGasModes.speedUp) {
    popupTitle = 'editSpeedUpEditGasFeeModalTitle';
  }
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: t(popupTitle)
    // below logic ensures that back button is visible only if there are other modals open before this.
    ,
    onBack: openModalCount === 1 ? undefined : () => closeModal(['editGasFee']),
    onClose: closeAllModals,
    className: "edit-gas-fee-popover"
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_appLoadingSpinner.default, null), /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__wrapper"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, null, balanceError && /*#__PURE__*/_react.default.createElement(_errorMessage.default, {
    errorKey: _errorKeys.INSUFFICIENT_FUNDS_ERROR_KEY
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__content__header"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-popover__content__header-option"
  }, t('gasOption')), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-popover__content__header-time"
  }, editGasMode !== _gas.EditGasModes.swaps && t('time')), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-fee-popover__content__header-max-fee"
  }, t('maxFee'))), (editGasMode === _gas.EditGasModes.cancel || editGasMode === _gas.EditGasModes.speedUp) && /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PriorityLevels.tenPercentIncreased
  }), editGasMode === _gas.EditGasModes.modifyInPlace && /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PriorityLevels.low
  }), /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PriorityLevels.medium
  }), /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PriorityLevels.high
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-fee-popover__content__separator"
  }), editGasMode === _gas.EditGasModes.modifyInPlace && /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PriorityLevels.dAppSuggested
  }), /*#__PURE__*/_react.default.createElement(_editGasItem.default, {
    priorityLevel: _gas.PriorityLevels.custom
  })), /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_networkStatistics.default, null), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    className: "edit-gas-fee-popover__know-more",
    align: "center",
    color: _designSystem.TextColor.textAlternative,
    tag: _designSystem.TextVariant.bodyMd,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, t('learnMoreAboutGas', [/*#__PURE__*/_react.default.createElement("a", {
    key: "learnMoreLink",
    target: "_blank",
    rel: "noopener noreferrer",
    href: _zendeskUrl.default.USER_GUIDE_GAS
  }, t('learnMore'))])))))));
};
var _default = EditGasFeePopover;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\edit-gas-fee-popover.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\edit-gas-item.js", {"../../../../../shared/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\gas.ts","../../../../contexts/gasFee":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\gasFee.js","../../../../contexts/transaction-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\transaction-modal.js","../../../../helpers/constants/common":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\common.ts","../../../../helpers/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\gas.js","../../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../../hooks/useTransactionEventFragment":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useTransactionEventFragment.js","../../../ui/info-tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\info-tooltip\\index.js","../../../ui/loading-heartbeat":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\loading-heartbeat\\index.js","../../user-preferenced-currency-display":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\user-preferenced-currency-display\\index.js","../edit-gas-tooltip/edit-gas-tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-tooltip\\edit-gas-tooltip.js","./useGasItemFeeDetails":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useGasItemFeeDetails.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cedit-gas-item%5Cedit-gas-item.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _gas = require("../../../../../shared/constants/gas");
var _gas2 = require("../../../../helpers/constants/gas");
var _common = require("../../../../helpers/constants/common");
var _util = require("../../../../helpers/utils/util");
var _gasFee = require("../../../../contexts/gasFee");
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _useTransactionEventFragment = require("../../../../hooks/useTransactionEventFragment");
var _transactionModal = require("../../../../contexts/transaction-modal");
var _infoTooltip = _interopRequireDefault(require("../../../ui/info-tooltip"));
var _loadingHeartbeat = _interopRequireDefault(require("../../../ui/loading-heartbeat"));
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../../user-preferenced-currency-display"));
var _editGasTooltip = _interopRequireDefault(require("../edit-gas-tooltip/edit-gas-tooltip"));
var _useGasItemFeeDetails = require("./useGasItemFeeDetails");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const getTitleAndIcon = (priorityLevel, editGasMode) => {
  let icon = priorityLevel;
  let title = priorityLevel;
  if (priorityLevel === _gas.PriorityLevels.dAppSuggested) {
    title = 'dappSuggestedShortLabel';
  } else if (priorityLevel === _gas.PriorityLevels.tenPercentIncreased) {
    icon = null;
    title = 'tenPercentIncreased';
  } else if (priorityLevel === _gas.PriorityLevels.high && editGasMode === _gas.EditGasModes.swaps) {
    icon = 'swapSuggested';
    title = 'swapSuggested';
  }
  return {
    title,
    icon
  };
};
const EditGasItem = ({
  priorityLevel
}) => {
  const {
    editGasMode,
    estimateUsed,
    gasLimit,
    updateTransactionToTenPercentIncreasedGasFee,
    updateTransactionUsingDAPPSuggestedValues,
    updateTransactionUsingEstimate,
    transaction
  } = (0, _gasFee.useGasFeeContext)();
  const {
    updateTransactionEventFragment
  } = (0, _useTransactionEventFragment.useTransactionEventFragment)();
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    closeModal,
    openModal
  } = (0, _transactionModal.useTransactionModalContext)();
  const {
    dappSuggestedGasFees
  } = transaction;
  const {
    // for cancel or speedup estimateGreaterThaGasUse is true if previous gas used
    // was more than estimate for the priorityLevel
    estimateGreaterThanGasUse,
    hexMaximumTransactionFee,
    maxFeePerGas,
    maxPriorityFeePerGas,
    minWaitTime
  } = (0, _useGasItemFeeDetails.useGasItemFeeDetails)(priorityLevel);
  if (priorityLevel === _gas.PriorityLevels.dAppSuggested && !(dappSuggestedGasFees !== null && dappSuggestedGasFees !== void 0 && dappSuggestedGasFees.maxFeePerGas) && !(dappSuggestedGasFees !== null && dappSuggestedGasFees !== void 0 && dappSuggestedGasFees.gasPrice)) {
    return null;
  }
  const onOptionSelect = () => {
    if (priorityLevel === _gas.PriorityLevels.custom) {
      updateTransactionEventFragment({
        properties: {
          gas_edit_attempted: 'advanced'
        }
      });
      openModal('advancedGasFee');
    } else {
      updateTransactionEventFragment({
        properties: {
          gas_edit_type: 'basic'
        }
      });
      closeModal(['editGasFee']);
      if (priorityLevel === _gas.PriorityLevels.tenPercentIncreased) {
        updateTransactionToTenPercentIncreasedGasFee();
      } else if (priorityLevel === _gas.PriorityLevels.dAppSuggested) {
        updateTransactionUsingDAPPSuggestedValues();
      } else {
        updateTransactionUsingEstimate(priorityLevel);
      }
    }
  };
  const {
    title,
    icon
  } = getTitleAndIcon(priorityLevel, editGasMode);
  return /*#__PURE__*/_react.default.createElement("button", {
    className: (0, _classnames.default)('edit-gas-item', {
      'edit-gas-item--selected': priorityLevel === estimateUsed,
      'edit-gas-item--disabled': estimateGreaterThanGasUse
    }),
    onClick: onOptionSelect,
    "aria-label": priorityLevel,
    autoFocus: priorityLevel === estimateUsed,
    disabled: estimateGreaterThanGasUse,
    "data-testid": `edit-gas-fee-item-${priorityLevel}`
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-item__name"
  }, icon && /*#__PURE__*/_react.default.createElement("span", {
    className: `edit-gas-item__icon edit-gas-item__icon-${priorityLevel}`
  }, _gas2.PRIORITY_LEVEL_ICON_MAP[icon]), t(title)), /*#__PURE__*/_react.default.createElement("span", {
    className: `edit-gas-item__time-estimate edit-gas-item__time-estimate-${priorityLevel}`
  }, editGasMode !== _gas.EditGasModes.swaps && (minWaitTime ? (0, _util.toHumanReadableTime)(t, minWaitTime) : '--')), /*#__PURE__*/_react.default.createElement("span", {
    className: `edit-gas-item__fee-estimate edit-gas-item__fee-estimate-${priorityLevel}`
  }, hexMaximumTransactionFee ? /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-item__maxfee"
  }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
    backgroundColor: priorityLevel === estimateUsed ? 'var(--color-background-alternative)' : 'var(--color-background-default)',
    estimateUsed: priorityLevel
  }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
    key: "editGasSubTextFeeAmount",
    type: _common.PRIMARY,
    value: hexMaximumTransactionFee
  })) : '--'), /*#__PURE__*/_react.default.createElement("span", {
    className: "edit-gas-item__tooltip",
    "data-testid": "gas-tooltip"
  }, /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    contentText: /*#__PURE__*/_react.default.createElement(_editGasTooltip.default, {
      t: t,
      priorityLevel: priorityLevel,
      maxFeePerGas: maxFeePerGas,
      maxPriorityFeePerGas: maxPriorityFeePerGas,
      editGasMode: editGasMode,
      gasLimit: gasLimit,
      transaction: transaction,
      estimateGreaterThanGasUse: estimateGreaterThanGasUse
    }),
    position: "top"
  })));
};
EditGasItem.propTypes = {
  priorityLevel: _propTypes.default.string
};
var _default = EditGasItem;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\edit-gas-item.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\index.js", {"./edit-gas-item":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\edit-gas-item.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cedit-gas-item%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasItem.default;
  }
});
var _editGasItem = _interopRequireDefault(require("./edit-gas-item"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useCustomTimeEstimate.js", {"../../../../../shared/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\gas.ts","../../../../ducks/metamask/metamask":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\metamask\\metamask.js","../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","bignumber.js":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\bignumber.js\\bignumber.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cedit-gas-item%5CuseCustomTimeEstimate.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCustomTimeEstimate = void 0;
var _react = require("react");
var _reactRedux = require("react-redux");
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _gas = require("../../../../../shared/constants/gas");
var _metamask = require("../../../../ducks/metamask/metamask");
var _actions = require("../../../../store/actions");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const useCustomTimeEstimate = ({
  gasFeeEstimates,
  maxFeePerGas,
  maxPriorityFeePerGas
}) => {
  const gasEstimateType = (0, _reactRedux.useSelector)(_metamask.getGasEstimateType);
  const isGasEstimatesLoading = (0, _reactRedux.useSelector)(_metamask.getIsGasEstimatesLoading);
  const [customEstimatedTime, setCustomEstimatedTime] = (0, _react.useState)(null);
  const returnNoEstimates = isGasEstimatesLoading || gasEstimateType !== _gas.GasEstimateTypes.feeMarket || !maxPriorityFeePerGas;

  // If the user has chosen a value lower than the low gas fee estimate,
  // We'll need to use the useEffect hook below to make a call to calculate
  // the time to show
  const isUnknownLow = (gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.low) && Number(maxPriorityFeePerGas) < Number(gasFeeEstimates.low.suggestedMaxPriorityFeePerGas);
  (0, _react.useEffect)(() => {
    if (isGasEstimatesLoading || gasEstimateType !== _gas.GasEstimateTypes.feeMarket || !maxPriorityFeePerGas) {
      return;
    }
    if (isUnknownLow) {
      // getGasFeeTimeEstimate requires parameters in string format
      (0, _actions.getGasFeeTimeEstimate)(new _bignumber.default(maxPriorityFeePerGas, 10).toString(10), new _bignumber.default(maxFeePerGas, 10).toString(10)).then(result => {
        setCustomEstimatedTime(result);
      });
    }
  }, [gasEstimateType, isUnknownLow, isGasEstimatesLoading, maxFeePerGas, maxPriorityFeePerGas, returnNoEstimates]);
  if (returnNoEstimates) {
    return {};
  }
  const {
    low = {},
    medium = {},
    high = {}
  } = gasFeeEstimates;
  let waitTimeEstimate = '';
  if (isUnknownLow && customEstimatedTime && customEstimatedTime !== 'unknown' && (customEstimatedTime === null || customEstimatedTime === void 0 ? void 0 : customEstimatedTime.upperTimeBound) !== 'unknown') {
    waitTimeEstimate = Number(customEstimatedTime === null || customEstimatedTime === void 0 ? void 0 : customEstimatedTime.upperTimeBound);
  } else if (Number(maxPriorityFeePerGas) >= Number(medium.suggestedMaxPriorityFeePerGas)) {
    waitTimeEstimate = high.minWaitTimeEstimate;
  } else {
    waitTimeEstimate = low.maxWaitTimeEstimate;
  }
  return {
    waitTimeEstimate
  };
};
exports.useCustomTimeEstimate = useCustomTimeEstimate;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useCustomTimeEstimate.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useGasItemFeeDetails.js", {"../../../../../shared/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\gas.ts","../../../../../shared/modules/conversion.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\conversion.utils.ts","../../../../../shared/modules/gas.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\gas.utils.js","../../../../contexts/gasFee":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\gasFee.js","../../../../helpers/utils/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\gas.js","../../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","./useCustomTimeEstimate":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useCustomTimeEstimate.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cedit-gas-item%5CuseGasItemFeeDetails.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasItemFeeDetails = void 0;
var _react = require("react");
var _reactRedux = require("react-redux");
var _gas = require("../../../../../shared/constants/gas");
var _gas2 = require("../../../../../shared/modules/gas.utils");
var _gas3 = require("../../../../helpers/utils/gas");
var _selectors = require("../../../../selectors");
var _gasFee = require("../../../../contexts/gasFee");
var _conversion = require("../../../../../shared/modules/conversion.utils");
var _useCustomTimeEstimate = require("./useCustomTimeEstimate");
const useGasItemFeeDetails = priorityLevel => {
  const {
    editGasMode,
    estimateUsed,
    gasFeeEstimates,
    gasLimit,
    maxFeePerGas: maxFeePerGasValue,
    maxPriorityFeePerGas: maxPriorityFeePerGasValue,
    transaction
  } = (0, _gasFee.useGasFeeContext)();
  const [estimateGreaterThanGasUse, setEstimateGreaterThanGasUse] = (0, _react.useState)(false);
  const advancedGasFeeValues = (0, _reactRedux.useSelector)(_selectors.getAdvancedGasFeeValues);
  let maxFeePerGas;
  let maxPriorityFeePerGas;
  let minWaitTime;
  const {
    dappSuggestedGasFees
  } = transaction;
  if (gasFeeEstimates !== null && gasFeeEstimates !== void 0 && gasFeeEstimates[priorityLevel]) {
    maxFeePerGas = gasFeeEstimates[priorityLevel].suggestedMaxFeePerGas;
    maxPriorityFeePerGas = gasFeeEstimates[priorityLevel].suggestedMaxPriorityFeePerGas;
  } else if (priorityLevel === _gas.PriorityLevels.dAppSuggested && dappSuggestedGasFees) {
    maxFeePerGas = (0, _conversion.hexWEIToDecGWEI)(dappSuggestedGasFees.maxFeePerGas || dappSuggestedGasFees.gasPrice);
    maxPriorityFeePerGas = (0, _conversion.hexWEIToDecGWEI)(dappSuggestedGasFees.maxPriorityFeePerGas || maxFeePerGas);
  } else if (priorityLevel === _gas.PriorityLevels.custom) {
    if (estimateUsed === _gas.PriorityLevels.custom) {
      maxFeePerGas = maxFeePerGasValue;
      maxPriorityFeePerGas = maxPriorityFeePerGasValue;
    } else if (advancedGasFeeValues && editGasMode !== _gas.EditGasModes.swaps) {
      maxFeePerGas = advancedGasFeeValues.maxBaseFee;
      maxPriorityFeePerGas = advancedGasFeeValues.priorityFee;
    }
  } else if (priorityLevel === _gas.PriorityLevels.tenPercentIncreased && transaction.previousGas) {
    var _transaction$previous, _transaction$previous2;
    maxFeePerGas = (0, _conversion.hexWEIToDecGWEI)((0, _gas3.addTenPercentAndRound)((_transaction$previous = transaction.previousGas) === null || _transaction$previous === void 0 ? void 0 : _transaction$previous.maxFeePerGas));
    maxPriorityFeePerGas = (0, _conversion.hexWEIToDecGWEI)((0, _gas3.addTenPercentAndRound)((_transaction$previous2 = transaction.previousGas) === null || _transaction$previous2 === void 0 ? void 0 : _transaction$previous2.maxPriorityFeePerGas));
  }
  const {
    waitTimeEstimate
  } = (0, _useCustomTimeEstimate.useCustomTimeEstimate)({
    gasFeeEstimates,
    maxFeePerGas,
    maxPriorityFeePerGas
  });
  if (gasFeeEstimates[priorityLevel]) {
    minWaitTime = priorityLevel === _gas.PriorityLevels.high ? gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.high.minWaitTimeEstimate : gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.low.maxWaitTimeEstimate;
  } else {
    minWaitTime = waitTimeEstimate;
  }
  const hexMaximumTransactionFee = maxFeePerGas ? (0, _gas2.getMaximumGasTotalInHexWei)({
    gasLimit: (0, _conversion.decimalToHex)(gasLimit),
    maxFeePerGas: (0, _conversion.decGWEIToHexWEI)(maxFeePerGas)
  }) : null;
  (0, _react.useEffect)(() => {
    // For cancel and speed-up medium / high option is disabled if
    // gas used in transaction + 10% is greater tham estimate
    if ((editGasMode === _gas.EditGasModes.cancel || editGasMode === _gas.EditGasModes.speedUp) && (priorityLevel === _gas.PriorityLevels.medium || priorityLevel === _gas.PriorityLevels.high)) {
      const estimateGreater = !(0, _gas3.gasEstimateGreaterThanGasUsedPlusTenPercent)(transaction.previousGas || transaction.txParams, gasFeeEstimates, priorityLevel);
      setEstimateGreaterThanGasUse(estimateGreater);
    }
  }, [editGasMode, gasFeeEstimates, priorityLevel, transaction]);
  return {
    estimateGreaterThanGasUse,
    maxFeePerGas,
    maxPriorityFeePerGas,
    minWaitTime,
    hexMaximumTransactionFee
  };
};
exports.useGasItemFeeDetails = useGasItemFeeDetails;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\edit-gas-item\\useGasItemFeeDetails.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-tooltip\\edit-gas-tooltip.js", {"../../../../../shared/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\gas.ts","../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/utils/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\gas.js","../../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cedit-gas-tooltip%5Cedit-gas-tooltip.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _gas = require("../../../../../shared/constants/gas");
var _designSystem = require("../../../../helpers/constants/design-system");
var _gas2 = require("../../../../helpers/utils/gas");
var _util = require("../../../../helpers/utils/util");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const EditGasToolTip = ({
  editGasMode,
  estimateGreaterThanGasUse,
  gasLimit,
  priorityLevel,
  // maxFeePerGas & maxPriorityFeePerGas are derived from conditional logic
  // related to the source of the estimates. We pass these values from the
  // the parent component (edit-gas-item) rather than recalculate them
  maxFeePerGas,
  maxPriorityFeePerGas,
  transaction,
  t
}) => {
  const toolTipMessage = (0, _react.useMemo)(() => {
    switch (priorityLevel) {
      case _gas.PriorityLevels.low:
        return t('lowGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('low')))]);
      case _gas.PriorityLevels.medium:
        if (estimateGreaterThanGasUse) {
          return t('disabledGasOptionToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
            key: `disabled-priority-level-${priorityLevel}`
          }, t(priorityLevel))]);
        }
        return t('mediumGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('medium')))]);
      case _gas.PriorityLevels.high:
        if (estimateGreaterThanGasUse) {
          return t('disabledGasOptionToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
            key: `disabled-priority-level-${priorityLevel}`
          }, t(priorityLevel))]);
        }
        if (editGasMode === _gas.EditGasModes.swaps) {
          return t('swapSuggestedGasSettingToolTipMessage');
        }
        return t('highGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('high')))]);
      case _gas.PriorityLevels.custom:
        return t('customGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: priorityLevel
        }, /*#__PURE__*/_react.default.createElement("b", null, t('custom')))]);
      case _gas.PriorityLevels.dAppSuggested:
        return transaction !== null && transaction !== void 0 && transaction.origin ? t('dappSuggestedGasSettingToolTipMessage', [/*#__PURE__*/_react.default.createElement("span", {
          key: transaction === null || transaction === void 0 ? void 0 : transaction.origin
        }, transaction === null || transaction === void 0 ? void 0 : transaction.origin)]) : null;
      default:
        return '';
    }
  }, [editGasMode, estimateGreaterThanGasUse, priorityLevel, transaction, t]);
  let imgAltText;
  if (priorityLevel === _gas.PriorityLevels.low) {
    imgAltText = t('curveLowGasEstimate');
  } else if (priorityLevel === _gas.PriorityLevels.medium) {
    imgAltText = t('curveMediumGasEstimate');
  } else if (priorityLevel === _gas.PriorityLevels.high) {
    imgAltText = t('curveHighGasEstimate');
  }

  // Gas estimate curve is visible for low/medium/high gas estimates
  // the curve is not visible for high estimates for swaps
  // also it is not visible in case of cancel/speedup if the medium/high option is disabled
  const showGasEstimateCurve = (0, _gas2.isMetamaskSuggestedGasEstimate)(priorityLevel) && !(priorityLevel === _gas.PriorityLevels.high && editGasMode === _gas.EditGasModes.swaps) && !estimateGreaterThanGasUse;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-tooltip__container"
  }, showGasEstimateCurve ? /*#__PURE__*/_react.default.createElement("img", {
    alt: imgAltText,
    src: `./images/curve-${priorityLevel}.svg`
  }) : null, toolTipMessage && /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-tooltip__container__message"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, toolTipMessage)), priorityLevel === _gas.PriorityLevels.custom || estimateGreaterThanGasUse ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: "edit-gas-tooltip__container__values"
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Bold,
    className: "edit-gas-tooltip__container__label"
  }, t('maxBaseFee')), maxFeePerGas && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    className: "edit-gas-tooltip__container__value"
  }, (0, _util.roundToDecimalPlacesRemovingExtraZeroes)(maxFeePerGas, 4))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Bold,
    className: "edit-gas-tooltip__container__label"
  }, t('priorityFeeProperCase')), maxPriorityFeePerGas && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    className: "edit-gas-tooltip__container__value"
  }, (0, _util.roundToDecimalPlacesRemovingExtraZeroes)(maxPriorityFeePerGas, 4))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Bold,
    className: "edit-gas-tooltip__container__label"
  }, t('gasLimit')), gasLimit && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    className: "edit-gas-tooltip__container__value"
  }, (0, _util.roundToDecimalPlacesRemovingExtraZeroes)(gasLimit, 4)))));
};
EditGasToolTip.propTypes = {
  estimateGreaterThanGasUse: _propTypes.default.bool,
  priorityLevel: _propTypes.default.string,
  maxFeePerGas: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  maxPriorityFeePerGas: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  t: _propTypes.default.func,
  editGasMode: _propTypes.default.string,
  gasLimit: _propTypes.default.number,
  transaction: _propTypes.default.object
};
var _default = EditGasToolTip;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\edit-gas-tooltip\\edit-gas-tooltip.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\index.js", {"./edit-gas-fee-popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\edit-gas-fee-popover.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasFeePopover.default;
  }
});
var _editGasFeePopover = _interopRequireDefault(require("./edit-gas-fee-popover"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\index.js", {"./network-statistics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\network-statistics.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cnetwork-statistics%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networkStatistics.default;
  }
});
var _networkStatistics = _interopRequireDefault(require("./network-statistics"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\network-statistics.js", {"../../../../contexts/gasFee":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\gasFee.js","../../../../contexts/i18n":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\i18n.js","../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/utils/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\gas.js","../../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","./status-slider":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\index.js","./tooltips":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\tooltips.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cnetwork-statistics%5Cnetwork-statistics.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _util = require("../../../../helpers/utils/util");
var _gas = require("../../../../helpers/utils/gas");
var _i18n = require("../../../../contexts/i18n");
var _gasFee = require("../../../../contexts/gasFee");
var _componentLibrary = require("../../../component-library");
var _tooltips = require("./tooltips");
var _statusSlider = _interopRequireDefault(require("./status-slider"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const NetworkStatistics = () => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const {
    gasFeeEstimates
  } = (0, _gasFee.useGasFeeContext)();
  const formattedLatestBaseFee = (0, _gas.formatGasFeeOrFeeRange)(gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.estimatedBaseFee, {
    precision: 0
  });
  const formattedLatestPriorityFeeRange = (0, _gas.formatGasFeeOrFeeRange)(gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.latestPriorityFeeRange, {
    precision: [1, 0]
  });
  const networkCongestion = gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.networkCongestion;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    fontWeight: _designSystem.FontWeight.Bold,
    marginTop: 3,
    marginBottom: 3,
    variant: _designSystem.TextVariant.bodyXs,
    as: "h6"
  }, t('networkStatus')), /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics__info"
  }, (0, _util.isNullish)(formattedLatestBaseFee) ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics__field",
    "data-testid": "formatted-latest-base-fee"
  }, /*#__PURE__*/_react.default.createElement(_tooltips.BaseFeeTooltip, null, /*#__PURE__*/_react.default.createElement("span", {
    className: "network-statistics__field-data"
  }, formattedLatestBaseFee), /*#__PURE__*/_react.default.createElement("span", {
    className: "network-statistics__field-label"
  }, t('baseFee')))), (0, _util.isNullish)(formattedLatestPriorityFeeRange) ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics__field",
    "data-testid": "formatted-latest-priority-fee-range"
  }, /*#__PURE__*/_react.default.createElement(_tooltips.PriorityFeeTooltip, null, /*#__PURE__*/_react.default.createElement("span", {
    className: "network-statistics__field-data"
  }, formattedLatestPriorityFeeRange), /*#__PURE__*/_react.default.createElement("span", {
    className: "network-statistics__field-label"
  }, t('priorityFee')))), (0, _util.isNullish)(networkCongestion) ? null : /*#__PURE__*/_react.default.createElement("div", {
    className: "network-statistics__field"
  }, /*#__PURE__*/_react.default.createElement(_statusSlider.default, null))));
};
var _default = NetworkStatistics;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\network-statistics.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\index.js", {"./status-slider":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\status-slider.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cnetwork-statistics%5Cstatus-slider%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _statusSlider.default;
  }
});
var _statusSlider = _interopRequireDefault(require("./status-slider"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\status-slider.js", {"../../../../../../shared/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\gas.ts","../../../../../contexts/gasFee":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\gasFee.js","../../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../tooltips":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\tooltips.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cnetwork-statistics%5Cstatus-slider%5Cstatus-slider.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _gas = require("../../../../../../shared/constants/gas");
var _gasFee = require("../../../../../contexts/gasFee");
var _useI18nContext = require("../../../../../hooks/useI18nContext");
var _tooltips = require("../tooltips");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GRADIENT_COLORS = ['#037DD6', '#1876C8', '#2D70BA', '#4369AB', '#57629E', '#6A5D92', '#805683', '#9A4D71', '#B44561', '#C54055', '#D73A49'];
const determineStatusInfo = givenNetworkCongestion => {
  const networkCongestion = givenNetworkCongestion ?? 0.5;
  const colorIndex = Math.round(networkCongestion * 10);
  const color = GRADIENT_COLORS[colorIndex];
  const sliderTickValue = colorIndex * 10;
  if (networkCongestion >= _gas.NetworkCongestionThresholds.busy) {
    return {
      statusLabel: 'busy',
      tooltipLabel: 'highLowercase',
      color,
      sliderTickValue
    };
  } else if (networkCongestion >= _gas.NetworkCongestionThresholds.stable) {
    return {
      statusLabel: 'stable',
      tooltipLabel: 'stableLowercase',
      color,
      sliderTickValue
    };
  }
  return {
    statusLabel: 'notBusy',
    tooltipLabel: 'lowLowercase',
    color,
    sliderTickValue
  };
};
const StatusSlider = () => {
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    gasFeeEstimates
  } = (0, _gasFee.useGasFeeContext)();
  const statusInfo = determineStatusInfo(gasFeeEstimates.networkCongestion);
  return /*#__PURE__*/_react.default.createElement(_tooltips.NetworkStabilityTooltip, {
    color: statusInfo.color,
    tooltipLabel: statusInfo.tooltipLabel
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__arrow-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__arrow-border",
    style: {
      marginLeft: `${statusInfo.sliderTickValue}%`
    },
    "data-testid": "status-slider-arrow-border"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__arrow",
    style: {
      borderTopColor: statusInfo.color
    },
    "data-testid": "status-slider-arrow"
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__line"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "status-slider__label",
    style: {
      color: statusInfo.color
    },
    "data-testid": "status-slider-label"
  }, t(statusInfo.statusLabel))));
};
var _default = StatusSlider;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\status-slider\\status-slider.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\tooltips.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../../ui/tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\tooltip\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-fee-popover%5Cnetwork-statistics%5Ctooltips.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PriorityFeeTooltip = exports.NetworkStabilityTooltip = exports.BaseFeeTooltip = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _tooltip = _interopRequireDefault(require("../../../ui/tooltip"));
var _designSystem = require("../../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const NetworkStatusTooltip = ({
  children,
  html,
  title
}) => /*#__PURE__*/_react.default.createElement(_tooltip.default, {
  position: "top",
  html: html,
  title: title
}, /*#__PURE__*/_react.default.createElement(_box.default, {
  display: _designSystem.DISPLAY.FLEX,
  flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
}, children));
NetworkStatusTooltip.propTypes = {
  children: _propTypes.default.node.isRequired,
  html: _propTypes.default.node,
  title: _propTypes.default.string
};
const BaseFeeTooltip = ({
  children
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(NetworkStatusTooltip, {
    html: t('networkStatusBaseFeeTooltip', [/*#__PURE__*/_react.default.createElement("strong", {
      key: "base_fee_medium_estimate",
      className: "network-status__tooltip-label"
    }, t('medium')), /*#__PURE__*/_react.default.createElement("strong", {
      key: "base_fee_high_estimate",
      className: "network-status__tooltip-label"
    }, t('high'))])
  }, children);
};
exports.BaseFeeTooltip = BaseFeeTooltip;
BaseFeeTooltip.propTypes = {
  children: _propTypes.default.node.isRequired
};
const PriorityFeeTooltip = ({
  children
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(NetworkStatusTooltip, {
    title: t('networkStatusPriorityFeeTooltip')
  }, children);
};
exports.PriorityFeeTooltip = PriorityFeeTooltip;
PriorityFeeTooltip.propTypes = {
  children: _propTypes.default.node.isRequired
};
const NetworkStabilityTooltip = ({
  children,
  color,
  tooltipLabel
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(NetworkStatusTooltip, {
    html: t('networkStatusStabilityFeeTooltip', [/*#__PURE__*/_react.default.createElement("strong", {
      key: "network-status__tooltip",
      className: "network-status__tooltip-label",
      style: {
        color
      }
    }, t(tooltipLabel))])
  }, children);
};
exports.NetworkStabilityTooltip = NetworkStabilityTooltip;
NetworkStabilityTooltip.propTypes = {
  children: _propTypes.default.node.isRequired,
  color: _propTypes.default.string.isRequired,
  tooltipLabel: _propTypes.default.string.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-fee-popover\\network-statistics\\tooltips.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-popover\\edit-gas-popover.component.js", {"../../../../shared/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\gas.ts","../../../../shared/modules/conversion.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\conversion.utils.ts","../../../../shared/modules/transaction.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\transaction.utils.js","../../../contexts/i18n":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\i18n.js","../../../hooks/gasFeeInput/useGasFeeInputs":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\gasFeeInput\\useGasFeeInputs.js","../../../hooks/useIncrementedGasFees":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useIncrementedGasFees.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../ui/loading-heartbeat":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\loading-heartbeat\\index.js","../../ui/popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\popover\\index.js","../edit-gas-display":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-display\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-popover%5Cedit-gas-popover.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = EditGasPopover;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _useGasFeeInputs = require("../../../hooks/gasFeeInput/useGasFeeInputs");
var _transaction = require("../../../../shared/modules/transaction.utils");
var _gas = require("../../../../shared/constants/gas");
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _editGasDisplay = _interopRequireDefault(require("../edit-gas-display"));
var _i18n = require("../../../contexts/i18n");
var _actions = require("../../../store/actions");
var _loadingHeartbeat = _interopRequireDefault(require("../../ui/loading-heartbeat"));
var _useIncrementedGasFees = require("../../../hooks/useIncrementedGasFees");
var _conversion = require("../../../../shared/modules/conversion.utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function EditGasPopover({
  popoverTitle = '',
  confirmButtonText = '',
  editGasDisplayProps = {},
  transaction,
  mode,
  onClose,
  minimumGasLimit = _gas.GAS_LIMITS.SIMPLE
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const [dappSuggestedGasFeeAcknowledged, setDappSuggestedGasFeeAcknowledged] = (0, _react.useState)(false);
  const minimumGasLimitDec = (0, _conversion.hexToDecimal)(minimumGasLimit);
  const updatedCustomGasSettings = (0, _useIncrementedGasFees.useIncrementedGasFees)(transaction);
  let updatedTransaction = transaction;
  if (mode === _gas.EditGasModes.speedUp || mode === _gas.EditGasModes.cancel) {
    updatedTransaction = {
      ...transaction,
      userFeeLevel: _gas.CUSTOM_GAS_ESTIMATE,
      txParams: {
        ...transaction.txParams,
        ...updatedCustomGasSettings
      }
    };
  }
  const {
    estimatedMinimumNative,
    gasPrice,
    setGasPrice,
    gasLimit,
    setGasLimit,
    properGasLimit,
    estimateToUse,
    hasGasErrors,
    gasErrors,
    onManualChange,
    balanceError
  } = (0, _useGasFeeInputs.useGasFeeInputs)(_gas.GasRecommendations.medium, updatedTransaction, minimumGasLimit, mode);
  const txParamsHaveBeenCustomized = estimateToUse === _gas.CUSTOM_GAS_ESTIMATE || (0, _transaction.txParamsAreDappSuggested)(updatedTransaction);

  /**
   * Temporary placeholder, this should be managed by the parent component but
   * we will be extracting this component from the hard to maintain modal
   * component. For now this is just to be able to appropriately close
   * the modal in testing
   */
  const closePopover = (0, _react.useCallback)(() => {
    if (onClose) {
      onClose();
    } else {
      dispatch((0, _actions.hideModal)());
    }
  }, [onClose, dispatch]);
  const onSubmit = (0, _react.useCallback)(async () => {
    if (!updatedTransaction || !mode) {
      closePopover();
    }
    const newGasSettings = {
      gas: (0, _conversion.decimalToHex)(gasLimit),
      gasLimit: (0, _conversion.decimalToHex)(gasLimit),
      estimateUsed: estimateToUse,
      gasPrice: (0, _conversion.decGWEIToHexWEI)(gasPrice)
    };
    const cleanTransactionParams = {
      ...updatedTransaction.txParams
    };
    const updatedTxMeta = {
      ...updatedTransaction,
      userEditedGasLimit: gasLimit !== Number(transaction.originalGasEstimate),
      userFeeLevel: estimateToUse || _gas.CUSTOM_GAS_ESTIMATE,
      txParams: {
        ...cleanTransactionParams,
        ...newGasSettings
      }
    };
    switch (mode) {
      case _gas.EditGasModes.cancel:
        dispatch((0, _actions.createCancelTransaction)(updatedTransaction.id, newGasSettings));
        break;
      case _gas.EditGasModes.speedUp:
        dispatch((0, _actions.createSpeedUpTransaction)(updatedTransaction.id, newGasSettings));
        break;
      case _gas.EditGasModes.modifyInPlace:
        newGasSettings.userEditedGasLimit = updatedTxMeta.userEditedGasLimit;
        newGasSettings.userFeeLevel = updatedTxMeta.userFeeLevel;
        dispatch((0, _actions.showLoadingIndication)());
        await dispatch((0, _actions.updateTransactionGasFees)(updatedTxMeta.id, newGasSettings));
        dispatch((0, _actions.hideLoadingIndication)());
        break;
      default:
        break;
    }
    closePopover();
  }, [updatedTransaction, mode, dispatch, closePopover, gasLimit, gasPrice, transaction.originalGasEstimate, estimateToUse]);
  let title = t('editGasTitle');
  if (popoverTitle) {
    title = popoverTitle;
  } else if (mode === _gas.EditGasModes.speedUp) {
    title = t('speedUpPopoverTitle');
  } else if (mode === _gas.EditGasModes.cancel) {
    title = t('cancelPopoverTitle');
  }
  const footerButtonText = confirmButtonText || t('save');
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: title,
    onClose: closePopover,
    className: "edit-gas-popover__wrapper",
    footer: /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: onSubmit,
      disabled: hasGasErrors || balanceError || !txParamsHaveBeenCustomized
    }, footerButtonText)
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      padding: '0 20px 20px 20px',
      position: 'relative'
    }
  }, false ? null : /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, null), /*#__PURE__*/_react.default.createElement(_editGasDisplay.default, _extends({
    dappSuggestedGasFeeAcknowledged: dappSuggestedGasFeeAcknowledged,
    setDappSuggestedGasFeeAcknowledged: setDappSuggestedGasFeeAcknowledged,
    estimatedMinimumNative: estimatedMinimumNative,
    gasPrice: gasPrice,
    setGasPrice: setGasPrice,
    gasLimit: gasLimit,
    setGasLimit: setGasLimit,
    properGasLimit: properGasLimit,
    mode: mode,
    transaction: updatedTransaction,
    onManualChange: onManualChange,
    minimumGasLimit: minimumGasLimitDec,
    balanceError: balanceError,
    txParamsHaveBeenCustomized: txParamsHaveBeenCustomized,
    gasErrors: gasErrors
  }, editGasDisplayProps))));
}
EditGasPopover.propTypes = {
  popoverTitle: _propTypes.default.string,
  editGasDisplayProps: _propTypes.default.object,
  confirmButtonText: _propTypes.default.string,
  onClose: _propTypes.default.func,
  transaction: _propTypes.default.object,
  mode: _propTypes.default.oneOf(Object.values(_gas.EditGasModes)),
  minimumGasLimit: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-popover\\edit-gas-popover.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-popover\\index.js", {"./edit-gas-popover.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\edit-gas-popover\\edit-gas-popover.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cedit-gas-popover%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editGasPopover.default;
  }
});
var _editGasPopover = _interopRequireDefault(require("./edit-gas-popover.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\edit-gas-popover\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\gas-details-item\\gas-details-item-title\\gas-details-item-title.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../../ui/info-tooltip/info-tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\info-tooltip\\info-tooltip.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cgas-details-item%5Cgas-details-item-title%5Cgas-details-item-title.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRedux = require("react-redux");
var _designSystem = require("../../../../helpers/constants/design-system");
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _selectors = require("../../../../selectors");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _infoTooltip = _interopRequireDefault(require("../../../ui/info-tooltip/info-tooltip"));
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GasDetailsItemTitle = () => {
  const t = (0, _useI18nContext.useI18nContext)();
  const isMainnet = (0, _reactRedux.useSelector)(_selectors.getIsMainnet);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: "flex"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginRight: 1
  }, t('gas')), /*#__PURE__*/_react.default.createElement("span", {
    className: "gas-details-item-title__estimate"
  }, "(", t('transactionDetailGasInfoV2'), ")"), /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
    contentText: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6"
    }, t('transactionDetailGasTooltipIntro', [isMainnet ? t('networkNameEthereum') : ''])), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6"
    }, t('transactionDetailGasTooltipExplanation')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodySm,
      as: "h6"
    }, /*#__PURE__*/_react.default.createElement("a", {
      href: "https://community.metamask.io/t/what-is-gas-why-do-transactions-take-so-long/3172",
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('transactionDetailGasTooltipConversion')))),
    position: "bottom"
  }));
};
var _default = GasDetailsItemTitle;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\gas-details-item\\gas-details-item-title\\gas-details-item-title.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\gas-details-item\\gas-details-item-title\\index.js", {"./gas-details-item-title":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\gas-details-item\\gas-details-item-title\\gas-details-item-title.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cgas-details-item%5Cgas-details-item-title%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _gasDetailsItemTitle.default;
  }
});
var _gasDetailsItemTitle = _interopRequireDefault(require("./gas-details-item-title"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\gas-details-item\\gas-details-item-title\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\gas-details-item\\gas-details-item.js", {"../../../../shared/modules/conversion.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\conversion.utils.ts","../../../contexts/gasFee":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\gasFee.js","../../../ducks/send":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\send\\index.js","../../../helpers/constants/common":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\common.ts","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useDraftTransactionWithTxParams":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useDraftTransactionWithTxParams.js","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../ui/loading-heartbeat":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\loading-heartbeat\\index.js","../gas-timing/gas-timing.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\gas-timing\\gas-timing.component.js","../transaction-detail-item/transaction-detail-item.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js","../user-preferenced-currency-display":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\user-preferenced-currency-display\\index.js","./gas-details-item-title":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\gas-details-item\\gas-details-item-title\\index.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cgas-details-item%5Cgas-details-item.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactRedux = require("react-redux");
var _designSystem = require("../../../helpers/constants/design-system");
var _common = require("../../../helpers/constants/common");
var _selectors = require("../../../selectors");
var _send = require("../../../ducks/send");
var _gasFee = require("../../../contexts/gasFee");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _box = _interopRequireDefault(require("../../ui/box"));
var _loadingHeartbeat = _interopRequireDefault(require("../../ui/loading-heartbeat"));
var _gasTiming = _interopRequireDefault(require("../gas-timing/gas-timing.component"));
var _transactionDetailItem = _interopRequireDefault(require("../transaction-detail-item/transaction-detail-item.component"));
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../user-preferenced-currency-display"));
var _conversion = require("../../../../shared/modules/conversion.utils");
var _useDraftTransactionWithTxParams = require("../../../hooks/useDraftTransactionWithTxParams");
var _gasDetailsItemTitle = _interopRequireDefault(require("./gas-details-item-title"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const GasDetailsItem = ({
  userAcknowledgedGasMissing = false
}) => {
  var _transactionData$txPa, _transactionData$txPa2;
  const t = (0, _useI18nContext.useI18nContext)();
  const draftTransaction = (0, _reactRedux.useSelector)(_send.getCurrentDraftTransaction);
  const transactionData = (0, _useDraftTransactionWithTxParams.useDraftTransactionWithTxParams)();
  const {
    hexMinimumTransactionFee: draftHexMinimumTransactionFee,
    hexMaximumTransactionFee: draftHexMaximumTransactionFee
  } = (0, _reactRedux.useSelector)(state => (0, _selectors.transactionFeeSelector)(state, transactionData));
  const {
    estimateUsed,
    hasSimulationError,
    maximumCostInHexWei: hexMaximumTransactionFee,
    minimumCostInHexWei: hexMinimumTransactionFee,
    maxPriorityFeePerGas,
    maxFeePerGas
  } = (0, _gasFee.useGasFeeContext)();
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _reactRedux.useSelector)(_selectors.getPreferences);
  const useCurrencyRateCheck = (0, _reactRedux.useSelector)(_selectors.getUseCurrencyRateCheck);
  if (hasSimulationError && !userAcknowledgedGasMissing) {
    return null;
  }
  const maxPriorityFeePerGasToRender = (maxPriorityFeePerGas ?? (0, _conversion.hexWEIToDecGWEI)(((_transactionData$txPa = transactionData.txParams) === null || _transactionData$txPa === void 0 ? void 0 : _transactionData$txPa.maxPriorityFeePerGas) ?? '0x0')).toString();
  const maxFeePerGasToRender = (maxFeePerGas ?? (0, _conversion.hexWEIToDecGWEI)(((_transactionData$txPa2 = transactionData.txParams) === null || _transactionData$txPa2 === void 0 ? void 0 : _transactionData$txPa2.maxFeePerGas) ?? '0x0')).toString();
  return /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
    key: "gas-details-item",
    detailTitle: /*#__PURE__*/_react.default.createElement(_gasDetailsItemTitle.default, null),
    detailTitleColor: _designSystem.TextColor.textDefault,
    detailText: useCurrencyRateCheck && Object.keys(draftTransaction).length === 0 && /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-details-item__currency-container"
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
      estimateUsed: estimateUsed
    }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      type: _common.SECONDARY,
      value: hexMinimumTransactionFee,
      hideLabel: Boolean(useNativeCurrencyAsPrimaryCurrency)
    })),
    detailTotal: /*#__PURE__*/_react.default.createElement("div", {
      className: "gas-details-item__currency-container"
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
      estimateUsed: estimateUsed
    }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      type: _common.PRIMARY,
      value: hexMinimumTransactionFee || draftHexMinimumTransactionFee,
      hideLabel: !useNativeCurrencyAsPrimaryCurrency
    })),
    subText: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, {
      key: "editGasSubTextFeeLabel",
      display: "inline-flex",
      className: (0, _classnames.default)('gas-details-item__gasfee-label', {
        'gas-details-item__gas-fee-warning': estimateUsed === 'high'
      })
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
      estimateUsed: estimateUsed
    }), /*#__PURE__*/_react.default.createElement(_box.default, {
      marginRight: 1
    }, /*#__PURE__*/_react.default.createElement("strong", null, estimateUsed === 'high' && '⚠ ', t('editGasSubTextFeeLabel'))), /*#__PURE__*/_react.default.createElement("div", {
      key: "editGasSubTextFeeValue",
      className: "gas-details-item__currency-container"
    }, /*#__PURE__*/_react.default.createElement(_loadingHeartbeat.default, {
      estimateUsed: estimateUsed
    }), /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      key: "editGasSubTextFeeAmount",
      type: _common.PRIMARY,
      value: hexMaximumTransactionFee || draftHexMaximumTransactionFee,
      hideLabel: !useNativeCurrencyAsPrimaryCurrency
    })))),
    subTitle: /*#__PURE__*/_react.default.createElement(_gasTiming.default, {
      maxPriorityFeePerGas: maxPriorityFeePerGasToRender,
      maxFeePerGas: maxFeePerGasToRender
    })
  });
};
GasDetailsItem.propTypes = {
  userAcknowledgedGasMissing: _propTypes.default.bool
};
var _default = GasDetailsItem;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\gas-details-item\\gas-details-item.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\gas-details-item\\index.js", {"./gas-details-item":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\gas-details-item\\gas-details-item.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cgas-details-item%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _gasDetailsItem.default;
  }
});
var _gasDetailsItem = _interopRequireDefault(require("./gas-details-item"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\gas-details-item\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\gas-timing\\gas-timing.component.js", {"../../../../shared/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\gas.ts","../../../contexts/gasFee":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\gasFee.js","../../../contexts/i18n":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\i18n.js","../../../ducks/metamask/metamask":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/gas":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\gas.js","../../../hooks/usePrevious":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\usePrevious.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../ui/typography/typography":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\typography\\typography.js","bignumber.js":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\bignumber.js\\bignumber.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cgas-timing%5Cgas-timing.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = GasTiming;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _gas = require("../../../../shared/constants/gas");
var _usePrevious = require("../../../hooks/usePrevious");
var _i18n = require("../../../contexts/i18n");
var _gasFee = require("../../../contexts/gasFee");
var _metamask = require("../../../ducks/metamask/metamask");
var _typography = _interopRequireDefault(require("../../ui/typography/typography"));
var _designSystem = require("../../../helpers/constants/design-system");
var _actions = require("../../../store/actions");
var _gas2 = require("../../../helpers/constants/gas");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// Once we reach this second threshold, we switch to minutes as a unit
const SECOND_CUTOFF = 90;

// Shows "seconds" as unit of time if under SECOND_CUTOFF, otherwise "minutes"
const toHumanReadableTime = (milliseconds = 1, t) => {
  const seconds = Math.ceil(milliseconds / 1000);
  if (seconds <= SECOND_CUTOFF) {
    return t('gasTimingSeconds', [seconds]);
  }
  return t('gasTimingMinutes', [Math.ceil(seconds / 60)]);
};
function GasTiming({
  maxFeePerGas = 0,
  maxPriorityFeePerGas = 0,
  gasWarnings
}) {
  const gasEstimateType = (0, _reactRedux.useSelector)(_metamask.getGasEstimateType);
  const gasFeeEstimates = (0, _reactRedux.useSelector)(_metamask.getGasFeeEstimates);
  const isGasEstimatesLoading = (0, _reactRedux.useSelector)(_metamask.getIsGasEstimatesLoading);
  const [customEstimatedTime, setCustomEstimatedTime] = (0, _react.useState)(null);
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const {
    estimateUsed
  } = (0, _gasFee.useGasFeeContext)();

  // If the user has chosen a value lower than the low gas fee estimate,
  // We'll need to use the useEffect hook below to make a call to calculate
  // the time to show
  const isUnknownLow = (gasFeeEstimates === null || gasFeeEstimates === void 0 ? void 0 : gasFeeEstimates.low) && Number(maxPriorityFeePerGas) < Number(gasFeeEstimates.low.suggestedMaxPriorityFeePerGas);
  const previousMaxFeePerGas = (0, _usePrevious.usePrevious)(maxFeePerGas);
  const previousMaxPriorityFeePerGas = (0, _usePrevious.usePrevious)(maxPriorityFeePerGas);
  const previousIsUnknownLow = (0, _usePrevious.usePrevious)(isUnknownLow);
  (0, _react.useEffect)(() => {
    const priority = maxPriorityFeePerGas;
    const fee = maxFeePerGas;
    if (isUnknownLow || priority && priority !== previousMaxPriorityFeePerGas || fee && fee !== previousMaxFeePerGas) {
      // getGasFeeTimeEstimate requires parameters in string format
      (0, _actions.getGasFeeTimeEstimate)(new _bignumber.default(priority, 10).toString(10), new _bignumber.default(fee, 10).toString(10)).then(result => {
        if (maxFeePerGas === fee && maxPriorityFeePerGas === priority) {
          setCustomEstimatedTime(result);
        }
      });
    }
    if (isUnknownLow !== false && previousIsUnknownLow === true) {
      setCustomEstimatedTime(null);
    }
  }, [maxPriorityFeePerGas, maxFeePerGas, isUnknownLow, previousMaxFeePerGas, previousMaxPriorityFeePerGas, previousIsUnknownLow]);
  if ((gasWarnings === null || gasWarnings === void 0 ? void 0 : gasWarnings.maxPriorityFee) === _gas2.GAS_FORM_ERRORS.MAX_PRIORITY_FEE_TOO_LOW || (gasWarnings === null || gasWarnings === void 0 ? void 0 : gasWarnings.maxFee) === _gas2.GAS_FORM_ERRORS.MAX_FEE_TOO_LOW) {
    return /*#__PURE__*/_react.default.createElement(_typography.default, {
      variant: _designSystem.TypographyVariant.H7,
      fontWeight: _designSystem.FONT_WEIGHT.BOLD,
      className: (0, _classnames.default)('gas-timing', 'gas-timing--negative')
    }, t('editGasTooLow'));
  }

  // Don't show anything if we don't have enough information
  if (isGasEstimatesLoading || gasEstimateType !== _gas.GasEstimateTypes.feeMarket) {
    return null;
  }
  const {
    low = {},
    medium = {},
    high = {}
  } = gasFeeEstimates;
  let text = '';
  let attitude = 'positive';

  // Anything medium or faster is positive
  if (Number(maxPriorityFeePerGas) >= Number(medium.suggestedMaxPriorityFeePerGas)) {
    // High+ is very likely, medium is likely
    if (Number(maxPriorityFeePerGas) < Number(high.suggestedMaxPriorityFeePerGas)) {
      // Medium
      text = t('gasTimingPositive', [toHumanReadableTime(low.maxWaitTimeEstimate, t)]);
    } else {
      // High
      text = t('gasTimingVeryPositive', [toHumanReadableTime(high.minWaitTimeEstimate, t)]);
    }
  } else {
    if (estimateUsed === 'low') {
      attitude = 'negative';
    }
    // If the user has chosen a value less than our low estimate,
    // calculate a potential wait time
    if (isUnknownLow) {
      // If we didn't get any useful information, show the
      // "unknown processing time" message
      if (!customEstimatedTime || customEstimatedTime === 'unknown' || (customEstimatedTime === null || customEstimatedTime === void 0 ? void 0 : customEstimatedTime.upperTimeBound) === 'unknown') {
        text = t('editGasTooLow');
      } else {
        text = t('gasTimingNegative', [toHumanReadableTime(Number(customEstimatedTime === null || customEstimatedTime === void 0 ? void 0 : customEstimatedTime.upperTimeBound), t)]);
      }
    } else {
      text = t('gasTimingNegative', [toHumanReadableTime(low.maxWaitTimeEstimate, t)]);
    }
  }
  return /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H7,
    className: (0, _classnames.default)('gas-timing', {
      [`gas-timing--${attitude}`]: attitude
    })
  }, text);
}
GasTiming.propTypes = {
  maxPriorityFeePerGas: _propTypes.default.string,
  maxFeePerGas: _propTypes.default.string,
  gasWarnings: _propTypes.default.object
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\gas-timing\\gas-timing.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\hold-to-reveal-button\\hold-to-reveal-button.js", {"../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../contexts/i18n":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\i18n.js","../../../contexts/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Chold-to-reveal-button%5Chold-to-reveal-button.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HoldToRevealButton;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _i18n = require("../../../contexts/i18n");
var _componentLibrary = require("../../component-library");
var _box = _interopRequireDefault(require("../../ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const radius = 14;
const strokeWidth = 2;
const radiusWithStroke = radius - strokeWidth / 2;
function HoldToRevealButton({
  buttonText,
  onLongPressed
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const isLongPressing = (0, _react.useRef)(false);
  const [isUnlocking, setIsUnlocking] = (0, _react.useState)(false);
  const [hasTriggeredUnlock, setHasTriggeredUnlock] = (0, _react.useState)(false);
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);

  /**
   * Prevent animation events from propogating up
   *
   * @param e - Native animation event - React.AnimationEvent<HTMLDivElement>
   */
  const preventPropogation = e => {
    e.stopPropagation();
  };

  /**
   * Event for mouse click down
   */
  const onMouseDown = () => {
    isLongPressing.current = true;
    trackEvent({
      category: _metametrics2.MetaMetricsEventCategory.Keys,
      event: _metametrics2.MetaMetricsEventName.SrpHoldToRevealClickStarted,
      properties: {
        key_type: _metametrics2.MetaMetricsEventKeyType.Srp
      }
    });
  };

  /**
   * Event for mouse click up
   */
  const onMouseUp = () => {
    isLongPressing.current = false;
  };

  /**
   * 1. Progress cirle completed. Begin next animation phase (Shrink halo and show unlocked padlock)
   */
  const onProgressComplete = () => {
    isLongPressing.current && setIsUnlocking(true);
  };

  /**
   * 2. Trigger onLongPressed callback. Begin next animation phase (Shrink unlocked padlock and fade in original content)
   *
   * @param e - Native animation event - React.AnimationEvent<HTMLDivElement>
   */
  const triggerOnLongPressed = (0, _react.useCallback)(e => {
    trackEvent({
      category: _metametrics2.MetaMetricsEventCategory.Keys,
      event: _metametrics2.MetaMetricsEventName.SrpHoldToRevealCompleted,
      properties: {
        key_type: _metametrics2.MetaMetricsEventKeyType.Srp
      }
    });
    trackEvent({
      category: _metametrics2.MetaMetricsEventCategory.Keys,
      event: _metametrics2.MetaMetricsEventName.SrpRevealViewed,
      properties: {
        key_type: _metametrics2.MetaMetricsEventKeyType.Srp
      }
    });
    onLongPressed();
    setHasTriggeredUnlock(true);
    preventPropogation(e);
  }, [onLongPressed]);

  /**
   * 3. Reset animation states
   */
  const resetAnimationStates = () => {
    setIsUnlocking(false);
    setHasTriggeredUnlock(false);
  };
  const renderPreCompleteContent = (0, _react.useCallback)(() => {
    return /*#__PURE__*/_react.default.createElement(_box.default, {
      className: (0, _classnames.default)('hold-to-reveal-button__absolute-fill', {
        'hold-to-reveal-button__absolute-fill': isUnlocking,
        'hold-to-reveal-button__main-icon-show': hasTriggeredUnlock
      })
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      className: "hold-to-reveal-button__absolute-fill"
    }, /*#__PURE__*/_react.default.createElement("svg", {
      className: "hold-to-reveal-button__circle-svg"
    }, /*#__PURE__*/_react.default.createElement("circle", {
      className: "hold-to-reveal-button__circle-background",
      cx: radius,
      cy: radius,
      r: radiusWithStroke
    }))), /*#__PURE__*/_react.default.createElement(_box.default, {
      className: "hold-to-reveal-button__absolute-fill"
    }, /*#__PURE__*/_react.default.createElement("svg", {
      className: "hold-to-reveal-button__circle-svg"
    }, /*#__PURE__*/_react.default.createElement("circle", {
      "aria-label": t('holdToRevealLockedLabel'),
      onTransitionEnd: onProgressComplete,
      className: "hold-to-reveal-button__circle-foreground",
      cx: radius,
      cy: radius,
      r: radiusWithStroke
    }))), /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      alignItems: _designSystem.AlignItems.center,
      justifyContent: _designSystem.JustifyContent.center,
      className: "hold-to-reveal-button__lock-icon-container"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/lock-icon.svg",
      alt: t('padlock'),
      className: "hold-to-reveal-button__lock-icon"
    })));
  }, [isUnlocking, hasTriggeredUnlock, t]);
  const renderPostCompleteContent = (0, _react.useCallback)(() => {
    return isUnlocking ? /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('hold-to-reveal-button__absolute-fill', {
        'hold-to-reveal-button__unlock-icon-hide': hasTriggeredUnlock
      }),
      onAnimationEnd: resetAnimationStates
    }, /*#__PURE__*/_react.default.createElement("div", {
      onAnimationEnd: preventPropogation,
      className: "hold-to-reveal-button__absolute-fill hold-to-reveal-button__circle-static-outer-container"
    }, /*#__PURE__*/_react.default.createElement("svg", {
      className: "hold-to-reveal-button__circle-svg"
    }, /*#__PURE__*/_react.default.createElement("circle", {
      className: "hold-to-reveal-button__circle-static-outer",
      cx: 14,
      cy: 14,
      r: 14
    }))), /*#__PURE__*/_react.default.createElement("div", {
      onAnimationEnd: preventPropogation,
      className: "hold-to-reveal-button__absolute-fill hold-to-reveal-button__circle-static-inner-container"
    }, /*#__PURE__*/_react.default.createElement("svg", {
      className: "hold-to-reveal-button__circle-svg"
    }, /*#__PURE__*/_react.default.createElement("circle", {
      className: "hold-to-reveal-button__circle-static-inner",
      cx: 14,
      cy: 14,
      r: 12
    }))), /*#__PURE__*/_react.default.createElement("div", {
      "aria-label": t('holdToRevealUnlockedLabel'),
      className: "hold-to-reveal-button__unlock-icon-container",
      onAnimationEnd: triggerOnLongPressed
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/unlock-icon.svg",
      alt: t('padlock'),
      className: "hold-to-reveal-button__unlock-icon"
    }))) : null;
  }, [isUnlocking, hasTriggeredUnlock, triggerOnLongPressed, t]);
  return /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
    onMouseDown: onMouseDown,
    onMouseUp: onMouseUp,
    className: "hold-to-reveal-button__button-hold",
    textProps: {
      display: _designSystem.DISPLAY.FLEX,
      alignItems: _designSystem.AlignItems.center
    }
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "hold-to-reveal-button__icon-container",
    marginRight: 2
  }, renderPreCompleteContent(), renderPostCompleteContent()), buttonText);
}
HoldToRevealButton.propTypes = {
  /**
   * Text to be displayed on the button
   */
  buttonText: _propTypes.default.string.isRequired,
  /**
   * Function to be called after the animation is finished
   */
  onLongPressed: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\hold-to-reveal-button\\hold-to-reveal-button.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\hold-to-reveal-button\\index.js", {"./hold-to-reveal-button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\hold-to-reveal-button\\hold-to-reveal-button.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Chold-to-reveal-button%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _holdToRevealButton.default;
  }
});
var _holdToRevealButton = _interopRequireDefault(require("./hold-to-reveal-button"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\hold-to-reveal-button\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\home-notification\\home-notification.component.js", {"../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../ui/check-box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\check-box\\index.js","../../ui/tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\tooltip\\index.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Chome-notification%5Chome-notification.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _checkBox = _interopRequireDefault(require("../../ui/check-box"));
var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const HomeNotification = ({
  acceptText,
  checkboxText,
  checkboxTooltipText,
  classNames = [],
  descriptionText,
  ignoreText,
  infoText,
  onAccept,
  onIgnore
}) => {
  const [checkboxState, setCheckBoxState] = (0, _react.useState)(false);
  const checkboxElement = checkboxText && /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    id: "homeNotification_checkbox",
    checked: checkboxState,
    className: "home-notification__checkbox",
    onClick: () => setCheckBoxState(checked => !checked)
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('home-notification', ...classNames)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__content-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__text"
  }, descriptionText)), infoText ? /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: infoText,
    wrapperClassName: "home-notification__tooltip-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Info,
    color: _designSystem.IconColor.iconDefault
  })) : null), /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__buttons"
  }, onAccept && acceptText ? /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    className: "home-notification__accept-button",
    onClick: onAccept
  }, acceptText) : null, onIgnore && ignoreText ? /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    className: "home-notification__ignore-button"
    // Some onIgnore handlers use the checkboxState to determine whether
    // to disable the notification
    ,
    onClick: () => onIgnore(checkboxState)
  }, ignoreText) : null, checkboxText ? /*#__PURE__*/_react.default.createElement("div", {
    className: "home-notification__checkbox-wrapper"
  }, checkboxTooltipText ? /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: checkboxTooltipText,
    wrapperClassName: "home-notification__checkbox-label-tooltip"
  }, checkboxElement) : checkboxElement, /*#__PURE__*/_react.default.createElement("label", {
    className: "home-notification__checkbox-label",
    htmlFor: "homeNotification_checkbox"
  }, checkboxText)) : null));
};
HomeNotification.propTypes = {
  /**
   * The text for the "Accept" button. This must be accompanied by the `onAccept` prop.
   *
   * The "Accept" button is only rendered if this prop is set.
   */
  acceptText: _propTypes.default.node,
  /**
   * The text to display alongside the checkbox.
   *
   * The checkbox state is passed to the `onIgnore` handler, so this should only be used if the `onIgnore` prop is set.
   *
   * The checkbox is only rendered if this prop is set.
   */
  checkboxText: _propTypes.default.node,
  /**
   * The text to display in the checkbox tooltip.
   *
   * The tooltip is only rendered if this prop is set.
   */
  checkboxTooltipText: _propTypes.default.node,
  /**
   * Custom class names.
   */
  classNames: _propTypes.default.array,
  /**
   * The notification description.
   */
  descriptionText: _propTypes.default.node.isRequired,
  /**
   * The text for the "Ignore" button. This must be accompanied by the `onIgnore` prop.
   *
   * The "Ignore" button is only rendered if this prop is set.
   */
  ignoreText: _propTypes.default.node,
  /**
   * The text for the info icon tooltip in the top-right of the notification.
   *
   * The info-icon is only rendered if this prop is set.
   */
  infoText: _propTypes.default.node,
  /**
   * The handler for the "Accept" button. This must be accompanied by the `acceptText` prop.
   */
  onAccept: _propTypes.default.func,
  /**
   * The handler for the "Ignore" button. This must be accompanied by the `ignoreText` prop.
   *
   * If `checkboxText` is set, the checkbox state will be passed to this function as a boolean.
   */
  onIgnore: _propTypes.default.func
};
var _default = HomeNotification;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\home-notification\\home-notification.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\home-notification\\index.js", {"./home-notification.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\home-notification\\home-notification.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Chome-notification%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _homeNotification.default;
  }
});
var _homeNotification = _interopRequireDefault(require("./home-notification.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\home-notification\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\import-token-link\\import-token-link.component.js", {"../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../contexts/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\routes.ts","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../ui/box/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\box.js","../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cimport-token-link%5Cimport-token-link.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ImportTokenLink;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _routes = require("../../../helpers/constants/routes");
var _button = _interopRequireDefault(require("../../ui/button"));
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _actions = require("../../../store/actions");
var _metametrics = require("../../../contexts/metametrics");
var _metametrics2 = require("../../../../shared/constants/metametrics");
var _selectors = require("../../../selectors");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ImportTokenLink() {
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const isTokenDetectionSupported = (0, _reactRedux.useSelector)(_selectors.getIsTokenDetectionSupported);
  const isTokenDetectionInactiveOnMainnet = (0, _reactRedux.useSelector)(_selectors.getIsTokenDetectionInactiveOnMainnet);
  const isTokenDetectionAvailable = isTokenDetectionSupported || isTokenDetectionInactiveOnMainnet || Boolean(false);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "import-token-link",
    textAlign: _designSystem.TEXT_ALIGN.CENTER
  }, isTokenDetectionAvailable && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "import-token-link__link",
    "data-testid": "refresh-list-button",
    type: "link",
    onClick: () => (0, _actions.detectNewTokens)()
  }, t('refreshList')), t('or')), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "import-token-link__link",
    "data-testid": "import-token-button",
    type: "link",
    onClick: () => {
      history.push(_routes.IMPORT_TOKEN_ROUTE);
      trackEvent({
        event: _metametrics2.MetaMetricsEventName.TokenImportButtonClicked,
        category: _metametrics2.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Home'
        }
      });
    }
  }, isTokenDetectionAvailable ? t('importTokens') : t('importTokens').charAt(0).toUpperCase() + t('importTokens').slice(1)));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\import-token-link\\import-token-link.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\import-token-link\\index.js", {"./import-token-link.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\import-token-link\\import-token-link.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cimport-token-link%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _importTokenLink.default;
  }
});
var _importTokenLink = _interopRequireDefault(require("./import-token-link.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\import-token-link\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\ledger-instruction-field\\index.js", {"./ledger-instruction-field":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\ledger-instruction-field\\ledger-instruction-field.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cledger-instruction-field%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _ledgerInstructionField.default;
  }
});
var _ledgerInstructionField = _interopRequireDefault(require("./ledger-instruction-field"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\ledger-instruction-field\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\ledger-instruction-field\\ledger-instruction-field.js", {"../../../../app/scripts/lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../../shared/constants/hardware-wallets":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\hardware-wallets.ts","../../../ducks/app/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\app\\app.ts","../../../ducks/metamask/metamask":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cledger-instruction-field%5Cledger-instruction-field.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LedgerInstructionField;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _hardwareWallets = require("../../../../shared/constants/hardware-wallets");
var _app = require("../../../../shared/constants/app");
var _app2 = require("../../../ducks/app/app");
var _componentLibrary = require("../../component-library");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _designSystem = require("../../../helpers/constants/design-system");
var _util = require("../../../../app/scripts/lib/util");
var _metamask = require("../../../ducks/metamask/metamask");
var _actions = require("../../../store/actions");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const renderInstructionStep = (text, show = true, color = _designSystem.TextColor.textDefault) => {
  return show && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: color,
    as: "h6"
  }, text);
};
function LedgerInstructionField({
  showDataInstruction
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const webHidConnectedStatus = (0, _reactRedux.useSelector)(_app2.getLedgerWebHidConnectedStatus);
  const ledgerTransportType = (0, _reactRedux.useSelector)(_metamask.getLedgerTransportType);
  const transportStatus = (0, _reactRedux.useSelector)(_app2.getLedgerTransportStatus);
  const environmentType = (0, _util.getEnvironmentType)();
  const environmentTypeIsFullScreen = environmentType === _app.ENVIRONMENT_TYPE_FULLSCREEN;
  (0, _react.useEffect)(() => {
    const initialConnectedDeviceCheck = async () => {
      if (ledgerTransportType === _hardwareWallets.LedgerTransportTypes.webhid && webHidConnectedStatus !== _hardwareWallets.WebHIDConnectedStatuses.connected) {
        var _window$navigator, _window$navigator$hid;
        const devices = await ((_window$navigator = window.navigator) === null || _window$navigator === void 0 ? void 0 : (_window$navigator$hid = _window$navigator.hid) === null || _window$navigator$hid === void 0 ? void 0 : _window$navigator$hid.getDevices());
        const webHidIsConnected = devices === null || devices === void 0 ? void 0 : devices.some(device => device.vendorId === Number(_hardwareWallets.LEDGER_USB_VENDOR_ID));
        dispatch((0, _app2.setLedgerWebHidConnectedStatus)(webHidIsConnected ? _hardwareWallets.WebHIDConnectedStatuses.connected : _hardwareWallets.WebHIDConnectedStatuses.notConnected));
      }
    };
    const determineTransportStatus = async () => {
      if (ledgerTransportType === _hardwareWallets.LedgerTransportTypes.webhid && webHidConnectedStatus === _hardwareWallets.WebHIDConnectedStatuses.connected && transportStatus === _hardwareWallets.HardwareTransportStates.none) {
        try {
          const transportedCreated = await (0, _actions.attemptLedgerTransportCreation)();
          dispatch((0, _app2.setLedgerTransportStatus)(transportedCreated ? _hardwareWallets.HardwareTransportStates.verified : _hardwareWallets.HardwareTransportStates.unknownFailure));
        } catch (e) {
          if (e.message.match('Failed to open the device')) {
            dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.HardwareTransportStates.deviceOpenFailure));
          } else if (e.message.match('the device is already open')) {
            dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.HardwareTransportStates.verified));
          } else {
            dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.HardwareTransportStates.unknownFailure));
          }
        }
      }
    };
    determineTransportStatus();
    initialConnectedDeviceCheck();
  }, [dispatch, ledgerTransportType, webHidConnectedStatus, transportStatus]);
  (0, _react.useEffect)(() => {
    return () => {
      dispatch((0, _app2.setLedgerTransportStatus)(_hardwareWallets.HardwareTransportStates.none));
    };
  }, [dispatch]);
  const usingLedgerLive = ledgerTransportType === _hardwareWallets.LedgerTransportTypes.live;
  const usingWebHID = ledgerTransportType === _hardwareWallets.LedgerTransportTypes.webhid;
  const isFirefox = (0, _util.getPlatform)() === _app.PLATFORM_FIREFOX;
  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-detail-row"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    severity: _designSystem.SEVERITIES.INFO
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "ledger-live-dialog"
  }, renderInstructionStep(t('ledgerConnectionInstructionHeader')), renderInstructionStep(`• ${t('ledgerConnectionInstructionStepOne')}`, !isFirefox && usingLedgerLive), renderInstructionStep(`• ${t('ledgerConnectionInstructionStepTwo')}`, !isFirefox && usingLedgerLive), renderInstructionStep(`• ${t('ledgerConnectionInstructionStepThree')}`), renderInstructionStep(`• ${t('ledgerConnectionInstructionStepFour')}`, showDataInstruction), renderInstructionStep( /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    textAlign: _designSystem.TEXT_ALIGN.LEFT,
    onClick: async () => {
      if (environmentTypeIsFullScreen) {
        window.location.reload();
      } else {
        global.platform.openExtensionInBrowser(null, null, true);
      }
    }
  }, t('ledgerConnectionInstructionCloseOtherApps'))), transportStatus === _hardwareWallets.HardwareTransportStates.deviceOpenFailure), renderInstructionStep( /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    textAlign: _designSystem.TEXT_ALIGN.LEFT,
    onClick: async () => {
      if (environmentTypeIsFullScreen) {
        const connectedDevices = await window.navigator.hid.requestDevice({
          filters: [{
            vendorId: _hardwareWallets.LEDGER_USB_VENDOR_ID
          }]
        });
        const webHidIsConnected = connectedDevices.some(device => device.vendorId === Number(_hardwareWallets.LEDGER_USB_VENDOR_ID));
        dispatch((0, _app2.setLedgerWebHidConnectedStatus)({
          webHidConnectedStatus: webHidIsConnected ? _hardwareWallets.WebHIDConnectedStatuses.connected : _hardwareWallets.WebHIDConnectedStatuses.notConnected
        }));
      } else {
        global.platform.openExtensionInBrowser(null, null, true);
      }
    }
  }, environmentTypeIsFullScreen ? t('clickToConnectLedgerViaWebHID') : t('openFullScreenForLedgerWebHid'))), usingWebHID && webHidConnectedStatus === _hardwareWallets.WebHIDConnectedStatuses.notConnected, _designSystem.TextColor.WARNING_DEFAULT)))));
}
LedgerInstructionField.propTypes = {
  // whether or not to show the data instruction
  showDataInstruction: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\ledger-instruction-field\\ledger-instruction-field.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\loading-network-screen\\index.js", {"./loading-network-screen.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\loading-network-screen\\loading-network-screen.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cloading-network-screen%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _loadingNetworkScreen.default;
  }
});
var _loadingNetworkScreen = _interopRequireDefault(require("./loading-network-screen.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\loading-network-screen\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\loading-network-screen\\loading-network-screen.component.js", {"../../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../../shared/constants/time":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\time.ts","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/box/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\box.js","../../ui/loading-screen":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\loading-screen\\index.js","../../ui/popover/popover.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\popover\\popover.component.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cloading-network-screen%5Cloading-network-screen.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _loadingScreen = _interopRequireDefault(require("../../ui/loading-screen"));
var _time = require("../../../../shared/constants/time");
var _network = require("../../../../shared/constants/network");
var _popover = _interopRequireDefault(require("../../ui/popover/popover.component"));
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../ui/box/box"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class LoadingNetworkScreen extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      showErrorScreen: false
    });
    _defineProperty(this, "componentDidMount", () => {
      this.cancelCallTimeout = setTimeout(this.cancelCall, this.props.cancelTime || _time.SECOND * 15);
    });
    _defineProperty(this, "getConnectingLabel", function (loadingMessage) {
      if (loadingMessage) {
        return loadingMessage;
      }
      const {
        providerConfig,
        providerId
      } = this.props;
      const providerName = providerConfig.type;
      const {
        t
      } = this.context;
      switch (providerName) {
        case _network.NETWORK_TYPES.MAINNET:
          return t('connectingToMainnet');
        case _network.NETWORK_TYPES.GOERLI:
          return t('connectingToGoerli');
        case _network.NETWORK_TYPES.SEPOLIA:
          return t('connectingToSepolia');
        case _network.NETWORK_TYPES.LINEA_TESTNET:
          return t('connectingToLineaTestnet');
        default:
          return t('connectingTo', [providerId]);
      }
    });
    _defineProperty(this, "renderConnectionFailureNotification", (message, showTryAgain = false) => {
      const {
        showNetworkDropdown,
        setProviderArgs,
        setProviderType
      } = this.props;
      return /*#__PURE__*/_react.default.createElement(_popover.default, {
        onClose: () => {
          window.clearTimeout(this.cancelCallTimeout);
        },
        centerTitle: true,
        title: /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
          name: _componentLibrary.IconName.Danger,
          size: _componentLibrary.IconSize.Xl,
          color: _designSystem.IconColor.warningDefault
        })
      }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
        variant: _designSystem.TextVariant.bodyLgMedium,
        textAlign: _designSystem.TextAlign.Center,
        margin: [0, 4, 4, 4]
      }, message), /*#__PURE__*/_react.default.createElement(_box.default, {
        display: _designSystem.DISPLAY.FLEX,
        padding: 4,
        gap: 2
      }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonSecondary, {
        onClick: () => {
          window.clearTimeout(this.cancelCallTimeout);
          showNetworkDropdown();
        },
        variant: _designSystem.TextVariant.bodySm,
        block: true
      }, this.context.t('switchNetworks')), showTryAgain ? /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonPrimary, {
        onClick: () => {
          this.setState({
            showErrorScreen: false
          });
          setProviderType(...setProviderArgs);
          window.clearTimeout(this.cancelCallTimeout);
          this.cancelCallTimeout = setTimeout(this.cancelCall, this.props.cancelTime || _time.SECOND * 15);
        },
        variant: _designSystem.TextVariant.bodySm,
        block: true
      }, this.context.t('tryAgain')) : null));
    });
    _defineProperty(this, "renderDeprecatedRpcUrlWarning", () => {
      return this.renderConnectionFailureNotification(this.context.t('currentRpcUrlDeprecated'), false);
    });
    _defineProperty(this, "renderErrorScreenContent", () => {
      const {
        providerConfig
      } = this.props;
      return this.renderConnectionFailureNotification(this.context.t('networkSwitchConnectionError', [providerConfig.nickname]), true);
    });
    _defineProperty(this, "cancelCall", () => {
      const {
        isNetworkLoading
      } = this.props;
      if (isNetworkLoading) {
        this.setState({
          showErrorScreen: true
        });
      }
    });
    _defineProperty(this, "componentDidUpdate", prevProps => {
      const {
        providerConfig
      } = this.props;
      const {
        providerConfig: prevProvider
      } = prevProps;
      if (providerConfig.type !== prevProvider.type) {
        window.clearTimeout(this.cancelCallTimeout);
        this.setState({
          showErrorScreen: false
        });
        this.cancelCallTimeout = setTimeout(this.cancelCall, this.props.cancelTime || _time.SECOND * 15);
      }
    });
    _defineProperty(this, "componentWillUnmount", () => {
      window.clearTimeout(this.cancelCallTimeout);
    });
  }
  render() {
    const {
      rollbackToPreviousProvider,
      showDeprecatedRpcUrlWarning
    } = this.props;
    let loadingMessageToRender;
    if (this.state.showErrorScreen) {
      loadingMessageToRender = this.renderErrorScreenContent();
    } else if (showDeprecatedRpcUrlWarning) {
      loadingMessageToRender = this.renderDeprecatedRpcUrlWarning();
    } else {
      loadingMessageToRender = this.getConnectingLabel(this.props.loadingMessage);
    }
    return /*#__PURE__*/_react.default.createElement(_loadingScreen.default, {
      header: /*#__PURE__*/_react.default.createElement("div", {
        className: "page-container__header-close",
        onClick: rollbackToPreviousProvider
      }),
      showLoadingSpinner: !this.state.showErrorScreen,
      loadingMessage: loadingMessageToRender
    });
  }
}
exports.default = LoadingNetworkScreen;
_defineProperty(LoadingNetworkScreen, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(LoadingNetworkScreen, "propTypes", {
  loadingMessage: _propTypes.default.string,
  cancelTime: _propTypes.default.number,
  providerConfig: _propTypes.default.object,
  providerId: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  showNetworkDropdown: _propTypes.default.func,
  setProviderArgs: _propTypes.default.array,
  setProviderType: _propTypes.default.func,
  rollbackToPreviousProvider: _propTypes.default.func,
  isNetworkLoading: _propTypes.default.bool,
  showDeprecatedRpcUrlWarning: _propTypes.default.bool
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\loading-network-screen\\loading-network-screen.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\loading-network-screen\\loading-network-screen.container.js", {"../../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../ducks/metamask/metamask":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\metamask\\metamask.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","./loading-network-screen.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\loading-network-screen\\loading-network-screen.component.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cloading-network-screen%5Cloading-network-screen.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _network = require("../../../../shared/constants/network");
var actions = _interopRequireWildcard(require("../../../store/actions"));
var _selectors = require("../../../selectors");
var _metamask = require("../../../ducks/metamask/metamask");
var _loadingNetworkScreen = _interopRequireDefault(require("./loading-network-screen.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const DEPRECATED_TEST_NET_CHAINIDS = ['0x3', '0x2a', '0x4'];
const mapStateToProps = state => {
  const {
    loadingMessage
  } = state.appState;
  const providerConfig = (0, _metamask.getProviderConfig)(state);
  const {
    rpcUrl,
    chainId,
    ticker,
    nickname,
    type
  } = providerConfig;
  const setProviderArgs = type === _network.NETWORK_TYPES.RPC ? [rpcUrl, chainId, ticker, nickname] : [type];
  const providerChainId = chainId;
  const isDeprecatedNetwork = DEPRECATED_TEST_NET_CHAINIDS.includes(providerChainId);
  const isInfuraRpcUrl = rpcUrl && new URL(rpcUrl).host.endsWith('.infura.io');
  const showDeprecatedRpcUrlWarning = isDeprecatedNetwork && isInfuraRpcUrl;

  // Ensure we have a nickname to provide the user
  // in case of connection error
  let networkName = nickname;
  if (networkName === undefined) {
    const networks = (0, _selectors.getAllEnabledNetworks)(state);
    const desiredNetwork = networks.find(network => network.chainId === chainId);
    if (desiredNetwork) {
      networkName = desiredNetwork.nickname;
    }
  }
  return {
    isNetworkLoading: (0, _selectors.isNetworkLoading)(state),
    loadingMessage,
    setProviderArgs,
    providerConfig: {
      ...providerConfig,
      nickname: networkName
    },
    providerId: (0, _selectors.getNetworkIdentifier)(state),
    showDeprecatedRpcUrlWarning
  };
};
const mapDispatchToProps = dispatch => {
  return {
    setProviderType: type => {
      dispatch(actions.setProviderType(type));
    },
    rollbackToPreviousProvider: () => dispatch(actions.rollbackToPreviousProvider()),
    showNetworkDropdown: () => {
      if (false) {
        return dispatch(actions.toggleNetworkMenu());
      }
      return dispatch(actions.showNetworkDropdown());
    }
  };
};
var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_loadingNetworkScreen.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\loading-network-screen\\loading-network-screen.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\menu-bar\\account-options-menu.js", {"../../../../app/scripts/lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../../shared/constants/keyring":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\keyring.ts","../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../contexts/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\metametrics.js","../../../helpers/constants/routes":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/menu":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\menu\\index.js","@metamask/etherscan-link":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmenu-bar%5Caccount-options-menu.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AccountOptionsMenu;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _etherscanLink = require("@metamask/etherscan-link");
var _actions = require("../../../store/actions");
var _routes = require("../../../helpers/constants/routes");
var _util = require("../../../helpers/utils/util");
var _menu = require("../../ui/menu");
var _selectors = require("../../../selectors");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _util2 = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _keyring = require("../../../../shared/constants/keyring");
var _metametrics = require("../../../../shared/constants/metametrics");
var _metametrics2 = require("../../../contexts/metametrics");
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function AccountOptionsMenu({
  anchorElement,
  onClose
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const keyring = (0, _reactRedux.useSelector)(_selectors.getCurrentKeyring);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const selectedIdentity = (0, _reactRedux.useSelector)(_selectors.getSelectedIdentity);
  const {
    address
  } = selectedIdentity;
  const addressLink = (0, _etherscanLink.getAccountLink)(address, chainId, rpcPrefs);
  const {
    blockExplorerUrl
  } = rpcPrefs;
  const blockExplorerUrlSubTitle = (0, _util.getURLHostName)(blockExplorerUrl);
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const blockExplorerLinkText = (0, _reactRedux.useSelector)(_selectors.getBlockExplorerLinkText);
  const isRemovable = keyring.type !== _keyring.KeyringType.hdKeyTree;
  const routeToAddBlockExplorerUrl = () => {
    history.push(`${_routes.NETWORKS_ROUTE}#blockExplorerUrl`);
  };
  const openBlockExplorer = () => {
    trackEvent({
      event: _metametrics.MetaMetricsEventName.ExternalLinkClicked,
      category: _metametrics.MetaMetricsEventCategory.Navigation,
      properties: {
        link_type: _metametrics.MetaMetricsEventLinkType.AccountTracker,
        location: 'Account Options',
        url_domain: (0, _util.getURLHostName)(addressLink)
      }
    });
    global.platform.openTab({
      url: addressLink
    });
    onClose();
  };
  return /*#__PURE__*/_react.default.createElement(_menu.Menu, {
    anchorElement: anchorElement,
    className: "account-options-menu",
    onHide: onClose
  }, /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    onClick: blockExplorerLinkText.firstPart === 'addBlockExplorer' ? routeToAddBlockExplorerUrl : openBlockExplorer,
    subtitle: blockExplorerUrlSubTitle ? /*#__PURE__*/_react.default.createElement("span", {
      className: "account-options-menu__explorer-origin"
    }, blockExplorerUrlSubTitle) : null,
    iconName: _componentLibrary.IconName.Export
  }, t(blockExplorerLinkText.firstPart, blockExplorerLinkText.secondPart === '' ? null : [t(blockExplorerLinkText.secondPart)])), (0, _util2.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_FULLSCREEN ? null : /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    onClick: () => {
      trackEvent({
        event: _metametrics.MetaMetricsEventName.AppWindowExpanded,
        category: _metametrics.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Account Options'
        }
      });
      global.platform.openExtensionInBrowser();
      onClose();
    },
    iconName: _componentLibrary.IconName.Expand
  }, t('expandView')), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    "data-testid": "account-options-menu__account-details",
    onClick: () => {
      dispatch((0, _actions.showModal)({
        name: 'ACCOUNT_DETAILS'
      }));
      trackEvent({
        event: _metametrics.MetaMetricsEventName.NavAccountDetailsOpened,
        category: _metametrics.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Account Options'
        }
      });
      onClose();
    },
    iconName: _componentLibrary.IconName.ScanBarcode
  }, t('accountDetails')), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    "data-testid": "account-options-menu__connected-sites",
    onClick: () => {
      trackEvent({
        event: _metametrics.MetaMetricsEventName.NavConnectedSitesOpened,
        category: _metametrics.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Account Options'
        }
      });
      history.push(_routes.CONNECTED_ROUTE);
      onClose();
    },
    iconName: _componentLibrary.IconName.Connect
  }, t('connectedSites')), isRemovable ? /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    "data-testid": "account-options-menu__remove-account",
    onClick: () => {
      dispatch((0, _actions.showModal)({
        name: 'CONFIRM_REMOVE_ACCOUNT',
        identity: selectedIdentity
      }));
      onClose();
    },
    iconName: _componentLibrary.IconName.Trash
  }, t('removeAccount')) : null);
}
AccountOptionsMenu.propTypes = {
  anchorElement: _propTypes.default.instanceOf(window.Element),
  onClose: _propTypes.default.func.isRequired
};
AccountOptionsMenu.defaultProps = {
  anchorElement: undefined
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\menu-bar\\account-options-menu.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\menu-bar\\index.js", {"./menu-bar":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\menu-bar\\menu-bar.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmenu-bar%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _menuBar.default;
  }
});
var _menuBar = _interopRequireDefault(require("./menu-bar"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\menu-bar\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\menu-bar\\menu-bar.js", {"../../../../app/scripts/lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../contexts/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\metametrics.js","../../../helpers/constants/routes":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\routes.ts","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../connected-status-indicator":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\connected-status-indicator\\index.js","../selected-account":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\selected-account\\index.js","./account-options-menu":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\menu-bar\\account-options-menu.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-router-dom\\index.js","webextension-polyfill":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmenu-bar%5Cmenu-bar.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MenuBar;
var _react = _interopRequireWildcard(require("react"));
var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _selectedAccount = _interopRequireDefault(require("../selected-account"));
var _connectedStatusIndicator = _interopRequireDefault(require("../connected-status-indicator"));
var _util = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _metametrics = require("../../../../shared/constants/metametrics");
var _routes = require("../../../helpers/constants/routes");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _selectors = require("../../../selectors");
var _metametrics2 = require("../../../contexts/metametrics");
var _componentLibrary = require("../../component-library");
var _accountOptionsMenu = _interopRequireDefault(require("./account-options-menu"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function MenuBar() {
  const t = (0, _useI18nContext.useI18nContext)();
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const history = (0, _reactRouterDom.useHistory)();
  const [accountOptionsMenuOpen, setAccountOptionsMenuOpen] = (0, _react.useState)(false);
  const origin = (0, _reactRedux.useSelector)(_selectors.getOriginOfCurrentTab);
  const ref = (0, _react.useRef)(false);
  const showStatus = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP && origin && origin !== _webextensionPolyfill.default.runtime.id;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "menu-bar"
  }, showStatus ? /*#__PURE__*/_react.default.createElement(_connectedStatusIndicator.default, {
    onClick: () => history.push(_routes.CONNECTED_ACCOUNTS_ROUTE)
  }) : null, /*#__PURE__*/_react.default.createElement(_selectedAccount.default, null), /*#__PURE__*/_react.default.createElement("span", {
    style: {
      display: 'inherit'
    },
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    iconName: _componentLibrary.IconName.MoreVertical,
    className: "menu-bar__account-options",
    "data-testid": "account-options-menu-button",
    ariaLabel: t('accountOptions'),
    onClick: () => {
      trackEvent({
        event: _metametrics.MetaMetricsEventName.NavAccountMenuOpened,
        category: _metametrics.MetaMetricsEventCategory.Navigation,
        properties: {
          location: 'Home'
        }
      });
      setAccountOptionsMenuOpen(true);
    }
  })), accountOptionsMenuOpen && /*#__PURE__*/_react.default.createElement(_accountOptionsMenu.default, {
    anchorElement: ref.current,
    onClose: () => setAccountOptionsMenuOpen(false)
  }));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\menu-bar\\menu-bar.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\menu-droppo.js", {"prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-dom":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-dom\\index.js","react-transition-group/CSSTransitionGroup":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-transition-group\\CSSTransitionGroup.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmenu-droppo.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _CSSTransitionGroup = _interopRequireDefault(require("react-transition-group/CSSTransitionGroup"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class MenuDroppoComponent extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "globalClickOccurred", event => {
      const {
        target
      } = event;
      // eslint-disable-next-line react/no-find-dom-node
      const container = (0, _reactDom.findDOMNode)(this);
      if (this.props.isOpen && target !== container && !this.container.contains(event.target)) {
        var _this$props$onClickOu, _this$props;
        (_this$props$onClickOu = (_this$props = this.props).onClickOutside) === null || _this$props$onClickOu === void 0 ? void 0 : _this$props$onClickOu.call(_this$props, event);
      }
    });
  }
  renderPrimary() {
    const {
      isOpen
    } = this.props;
    if (!isOpen) {
      return null;
    }
    const innerStyle = this.props.innerStyle || {};
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "menu-droppo",
      key: "menu-droppo-drawer",
      "data-testid": "menu-droppo",
      style: innerStyle
    }, this.props.children);
  }
  componentDidMount() {
    if (this && document.body) {
      document.body.addEventListener('click', this.globalClickOccurred);
      // eslint-disable-next-line react/no-find-dom-node
      const container = (0, _reactDom.findDOMNode)(this);
      this.container = container;
    }
  }
  componentWillUnmount() {
    if (this && document.body) {
      document.body.removeEventListener('click', this.globalClickOccurred);
    }
  }
  render() {
    const {
      containerClassName = '',
      style
    } = this.props;
    const speed = this.props.speed || '300ms';
    const {
      useCssTransition
    } = this.props;
    const zIndex = 'zIndex' in this.props ? this.props.zIndex : 0;
    const baseStyle = {
      position: 'fixed',
      ...style,
      zIndex
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      style: baseStyle,
      className: `menu-droppo-container ${containerClassName}`,
      "data-testid": containerClassName
    }, /*#__PURE__*/_react.default.createElement("style", null, `
          .menu-droppo-enter {
            transition: transform ${speed} ease-in-out;
            transform: translateY(-200%);
          }

          .menu-droppo-enter.menu-droppo-enter-active {
            transition: transform ${speed} ease-in-out;
            transform: translateY(0%);
          }

          .menu-droppo-leave {
            transition: transform ${speed} ease-in-out;
            transform: translateY(0%);
          }

          .menu-droppo-leave.menu-droppo-leave-active {
            transition: transform ${speed} ease-in-out;
            transform: translateY(-200%);
          }
        `), useCssTransition ? /*#__PURE__*/_react.default.createElement(_CSSTransitionGroup.default, {
      className: "css-transition-group",
      transitionName: "menu-droppo",
      transitionEnterTimeout: parseInt(speed, 10),
      transitionLeaveTimeout: parseInt(speed, 10)
    }, this.renderPrimary()) : this.renderPrimary());
  }
}
exports.default = MenuDroppoComponent;
_defineProperty(MenuDroppoComponent, "propTypes", {
  isOpen: _propTypes.default.bool.isRequired,
  innerStyle: _propTypes.default.object,
  children: _propTypes.default.node.isRequired,
  onClickOutside: _propTypes.default.func,
  containerClassName: _propTypes.default.string,
  zIndex: _propTypes.default.number,
  style: _propTypes.default.object.isRequired,
  useCssTransition: _propTypes.default.bool,
  speed: _propTypes.default.string
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\menu-droppo.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\metamask-template-renderer\\index.js", {"./metamask-template-renderer":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\metamask-template-renderer\\metamask-template-renderer.js","./section-shape":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\metamask-template-renderer\\section-shape.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmetamask-template-renderer%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "SectionShape", {
  enumerable: true,
  get: function () {
    return _sectionShape.SectionShape;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _metamaskTemplateRenderer.default;
  }
});
var _metamaskTemplateRenderer = _interopRequireDefault(require("./metamask-template-renderer"));
var _sectionShape = require("./section-shape");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\metamask-template-renderer\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\metamask-template-renderer\\metamask-template-renderer.js", {"./safe-component-list":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\metamask-template-renderer\\safe-component-list.js","./section-shape":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\metamask-template-renderer\\section-shape.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmetamask-template-renderer%5Cmetamask-template-renderer.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _lodash = require("lodash");
var _safeComponentList = require("./safe-component-list");
var _sectionShape = require("./section-shape");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function getElement(section) {
  const {
    element
  } = section;
  const Element = _safeComponentList.safeComponentList[element];
  if (!Element) {
    throw new Error(`${element} is not in the safe component list for MetaMask template renderer`);
  }
  return Element;
}
const MetaMaskTemplateRenderer = ({
  sections
}) => {
  if (!sections) {
    // If sections is null eject early by returning null
    return null;
  } else if (typeof sections === 'string') {
    // React can render strings directly, so return the string
    return sections;
  } else if (sections && typeof sections === 'object' && !Array.isArray(sections)) {
    // If dealing with a single entry, then render a single object without key
    const Element = getElement(sections);
    return /*#__PURE__*/_react.default.createElement(Element, sections.props, typeof sections.children === 'object' ? /*#__PURE__*/_react.default.createElement(MetaMaskTemplateRenderer, {
      sections: sections.children
    }) : sections === null || sections === void 0 ? void 0 : sections.children);
  }

  // The last case is dealing with an array of objects
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, sections.reduce((allChildren, child) => {
    if ((child === null || child === void 0 ? void 0 : child.hide) === true) {
      return allChildren;
    }
    if (typeof child === 'string') {
      // React can render strings directly, so push them into the accumulator
      allChildren.push(child);
    } else {
      // If the entry in array is not a string, then it must be a Section.
      // Sections are handled by the main function, but must
      // be provided a key when a part of an array.
      if (!child.key) {
        throw new Error('When using array syntax in MetaMask Template Language, you must specify a key for each child of the array');
      }
      if (typeof (child === null || child === void 0 ? void 0 : child.children) === 'object') {
        // If this child has its own children, check if children is an
        // object, and in that case use recursion to render.
        allChildren.push( /*#__PURE__*/_react.default.createElement(MetaMaskTemplateRenderer, {
          sections: child,
          key: child.key
        }));
      } else {
        // Otherwise render the element.
        const Element = getElement(child);
        allChildren.push( /*#__PURE__*/_react.default.createElement(Element, _extends({
          key: child.key
        }, child.props), child === null || child === void 0 ? void 0 : child.children));
      }
    }
    return allChildren;
  }, []));
};
MetaMaskTemplateRenderer.propTypes = {
  sections: _sectionShape.ValidChildren
};
var _default = /*#__PURE__*/(0, _react.memo)(MetaMaskTemplateRenderer, (prevProps, nextProps) => {
  return (0, _lodash.isEqual)(prevProps.sections, nextProps.sections);
});
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\metamask-template-renderer\\metamask-template-renderer.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\metamask-template-renderer\\safe-component-list.js", {"../../../pages/confirmation/components/confirmation-network-switch":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\pages\\confirmation\\components\\confirmation-network-switch\\index.js","../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../ui/chip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\chip\\index.js","../../ui/definition-list":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\definition-list\\index.js","../../ui/popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\popover\\index.js","../../ui/text-field":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\text-field\\index.js","../../ui/textarea/textarea":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\textarea\\textarea.js","../../ui/tooltip/tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\tooltip\\tooltip.js","../../ui/truncated-definition-list":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\truncated-definition-list\\index.js","../../ui/typography":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\typography\\index.js","../../ui/url-icon":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\url-icon\\index.js","../metamask-translation":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\metamask-translation\\index.js","../network-display":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\network-display\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmetamask-template-renderer%5Csafe-component-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.safeComponentList = void 0;
var _button = _interopRequireDefault(require("../../ui/button"));
var _chip = _interopRequireDefault(require("../../ui/chip"));
var _definitionList = _interopRequireDefault(require("../../ui/definition-list"));
var _truncatedDefinitionList = _interopRequireDefault(require("../../ui/truncated-definition-list"));
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _typography = _interopRequireDefault(require("../../ui/typography"));
var _box = _interopRequireDefault(require("../../ui/box"));
var _metamaskTranslation = _interopRequireDefault(require("../metamask-translation"));
var _networkDisplay = _interopRequireDefault(require("../network-display"));
var _textarea = _interopRequireDefault(require("../../ui/textarea/textarea"));
var _textField = _interopRequireDefault(require("../../ui/text-field"));
var _confirmationNetworkSwitch = _interopRequireDefault(require("../../../pages/confirmation/components/confirmation-network-switch"));
var _urlIcon = _interopRequireDefault(require("../../ui/url-icon"));
var _tooltip = _interopRequireDefault(require("../../ui/tooltip/tooltip"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const safeComponentList = {
  a: 'a',
  b: 'b',
  i: 'i',
  p: 'p',
  div: 'div',
  span: 'span',
  Box: _box.default,
  Button: _button.default,
  Chip: _chip.default,
  ConfirmationNetworkSwitch: _confirmationNetworkSwitch.default,
  DefinitionList: _definitionList.default,
  MetaMaskTranslation: _metamaskTranslation.default,
  NetworkDisplay: _networkDisplay.default,
  Popover: _popover.default,
  TextArea: _textarea.default,
  TextField: _textField.default,
  Tooltip: _tooltip.default,
  TruncatedDefinitionList: _truncatedDefinitionList.default,
  Typography: _typography.default,
  UrlIcon: _urlIcon.default
};
exports.safeComponentList = safeComponentList;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\metamask-template-renderer\\safe-component-list.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\metamask-template-renderer\\section-shape.js", {"prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmetamask-template-renderer%5Csection-shape.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidChildren = exports.SectionShape = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SectionShape = {
  props: _propTypes.default.object,
  element: _propTypes.default.string,
  key: _propTypes.default.string
};
exports.SectionShape = SectionShape;
const ValidChildren = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape(SectionShape), _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.shape(SectionShape), _propTypes.default.string]))]);
exports.ValidChildren = ValidChildren;
SectionShape.children = ValidChildren;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\metamask-template-renderer\\section-shape.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\metamask-translation\\index.js", {"./metamask-translation":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\metamask-translation\\metamask-translation.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmetamask-translation%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _metamaskTranslation.default;
  }
});
var _metamaskTranslation = _interopRequireDefault(require("./metamask-translation"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\metamask-translation\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\metamask-translation\\metamask-translation.js", {"../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../metamask-template-renderer":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\metamask-template-renderer\\index.js","../metamask-template-renderer/section-shape":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\metamask-template-renderer\\section-shape.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmetamask-translation%5Cmetamask-translation.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MetaMaskTranslation;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _metamaskTemplateRenderer = _interopRequireDefault(require("../metamask-template-renderer"));
var _sectionShape = require("../metamask-template-renderer/section-shape");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * MetaMaskTranslation is a simple helper component for adding full translation
 * support to the template system. We do pass the translation function to the
 * template getValues function, but passing it React components as variables
 * would require React to be in scope, and breaks the object pattern paradigm.
 *
 * This component gets around that by converting variables that are templates
 * themselves into tiny React trees. This component does additional validation
 * to make sure that the tree has a single root node, with maximum two leaves.
 * Each subnode can have a maximum of one child that must be a string.
 *
 * This enforces a maximum recursion depth of 2, preventing translation strings
 * from being performance hogs. We could further limit this, and also attenuate
 * the safeComponentList for what kind of components we allow these special
 * trees to contain.
 *
 * @param options
 * @param options.translationKey
 * @param options.variables
 */
function MetaMaskTranslation({
  translationKey,
  variables
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  return t(translationKey, variables === null || variables === void 0 ? void 0 : variables.map(variable => {
    if (typeof variable === 'object' && !Array.isArray(variable) && variable.element) {
      var _variable$children, _variable$children$, _variable$children2, _variable$children2$;
      if (!variable.key) {
        throw new Error(`When using MetaMask Template Language in a MetaMaskTranslation variable, you must provide a key for the section regardless of syntax.
            Section with element '${variable.element}' for translationKey: '${translationKey}' has no key property`);
      }
      if (variable.children && Array.isArray(variable.children) && variable.children.length > 2) {
        throw new Error('MetaMaskTranslation only renders templates with a single section and maximum two children');
      } else if (((_variable$children = variable.children) === null || _variable$children === void 0 ? void 0 : (_variable$children$ = _variable$children[0]) === null || _variable$children$ === void 0 ? void 0 : _variable$children$.children) !== undefined && typeof variable.children[0].children !== 'string' || ((_variable$children2 = variable.children) === null || _variable$children2 === void 0 ? void 0 : (_variable$children2$ = _variable$children2[1]) === null || _variable$children2$ === void 0 ? void 0 : _variable$children2$.children) !== undefined && typeof variable.children[1].children !== 'string') {
        throw new Error('MetaMaskTranslation does not allow for component trees of non trivial depth');
      }
      return /*#__PURE__*/_react.default.createElement(_metamaskTemplateRenderer.default, {
        key: `${translationKey}-${variable.key}`,
        sections: variable
      });
    }
    return variable;
  }));
}
MetaMaskTranslation.propTypes = {
  /**
   * Translation object key
   */
  translationKey: _propTypes.default.string.isRequired,
  /**
   * Array of variables for the MetaMaskTranslation component
   */
  variables: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.shape(_sectionShape.SectionShape)]))
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\metamask-translation\\metamask-translation.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\index.js", {"./modal-content":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\modal-content\\index.js","./modal.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\modal.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodal%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ModalContent", {
  enumerable: true,
  get: function () {
    return _modalContent.default;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _modal.default;
  }
});
var _modal = _interopRequireDefault(require("./modal.component"));
var _modalContent = _interopRequireDefault(require("./modal-content"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modal\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\modal-content\\index.js", {"./modal-content.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\modal-content\\modal-content.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodal%5Cmodal-content%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _modalContent.default;
  }
});
var _modalContent = _interopRequireDefault(require("./modal-content.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modal\\modal-content\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\modal-content\\modal-content.component.js", {"prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodal%5Cmodal-content%5Cmodal-content.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ModalContent extends _react.PureComponent {
  render() {
    const {
      title,
      description
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-content"
    }, title ? /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-content__title"
    }, title) : null, description && /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-content__description"
    }, description));
  }
}
exports.default = ModalContent;
_defineProperty(ModalContent, "propTypes", {
  title: _propTypes.default.string,
  description: _propTypes.default.string
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modal\\modal-content\\modal-content.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\modal.component.js", {"../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodal%5Cmodal.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _button = _interopRequireDefault(require("../../ui/button"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class Modal extends _react.PureComponent {
  render() {
    const {
      children,
      headerText,
      onClose,
      onSubmit,
      submitType,
      submitText,
      submitDisabled,
      onCancel,
      cancelType,
      cancelText,
      contentClass,
      containerClass,
      hideFooter
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('modal-container', containerClass)
    }, headerText && /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__header-text"
    }, headerText), /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__header-close",
      "data-testid": "modal-header-close",
      onClick: onClose
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('modal-container__content', contentClass)
    }, children), hideFooter ? null : /*#__PURE__*/_react.default.createElement("div", {
      className: "modal-container__footer"
    }, onCancel && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: cancelType,
      onClick: onCancel,
      className: "modal-container__footer-button"
    }, cancelText), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: submitType,
      onClick: onSubmit,
      disabled: submitDisabled,
      className: "modal-container__footer-button"
    }, submitText)));
  }
}
exports.default = Modal;
_defineProperty(Modal, "propTypes", {
  children: _propTypes.default.node,
  contentClass: _propTypes.default.string,
  containerClass: _propTypes.default.string,
  // Header text
  headerText: _propTypes.default.string,
  onClose: _propTypes.default.func,
  // Submit button (right button)
  onSubmit: _propTypes.default.func,
  submitType: _propTypes.default.string,
  submitText: _propTypes.default.string,
  submitDisabled: _propTypes.default.bool,
  hideFooter: _propTypes.default.bool,
  // Cancel button (left button)
  onCancel: _propTypes.default.func,
  cancelType: _propTypes.default.string,
  cancelText: _propTypes.default.string
});
_defineProperty(Modal, "defaultProps", {
  submitType: 'primary',
  cancelType: 'secondary'
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modal\\modal.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\account-details-modal\\account-details-modal.component.js", {"../../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../../helpers/constants/routes":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\routes.ts","../../../../helpers/utils/hardware":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\hardware.js","../../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../../ui/editable-label":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\editable-label\\index.js","../../../ui/qr-code":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\qr-code\\index.js","../account-modal-container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\account-modal-container\\index.js","@metamask/etherscan-link":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Caccount-details-modal%5Caccount-details-modal.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _etherscanLink = require("@metamask/etherscan-link");
var _accountModalContainer = _interopRequireDefault(require("../account-modal-container"));
var _qrCode = _interopRequireDefault(require("../../../ui/qr-code"));
var _editableLabel = _interopRequireDefault(require("../../../ui/editable-label"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _util = require("../../../../helpers/utils/util");
var _hardware = require("../../../../helpers/utils/hardware");
var _metametrics = require("../../../../../shared/constants/metametrics");
var _routes = require("../../../../helpers/constants/routes");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class AccountDetailsModal extends _react.Component {
  render() {
    const {
      selectedIdentity,
      chainId,
      showExportPrivateKeyModal,
      setAccountLabel,
      keyrings,
      rpcPrefs,
      history,
      hideModal,
      blockExplorerLinkText
    } = this.props;
    const {
      name,
      address
    } = selectedIdentity;
    const keyring = keyrings.find(kr => {
      return kr.accounts.includes(address);
    });
    let exportPrivateKeyFeatureEnabled = true;
    // This feature is disabled for hardware wallets
    if ((0, _hardware.isHardwareKeyring)(keyring === null || keyring === void 0 ? void 0 : keyring.type)) {
      exportPrivateKeyFeatureEnabled = false;
    }
    const routeToAddBlockExplorerUrl = () => {
      hideModal();
      history.push(`${_routes.NETWORKS_ROUTE}#blockExplorerUrl`);
    };
    const openBlockExplorer = () => {
      const accountLink = (0, _etherscanLink.getAccountLink)(address, chainId, rpcPrefs);
      this.context.trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Navigation,
        event: _metametrics.MetaMetricsEventName.ExternalLinkClicked,
        properties: {
          link_type: _metametrics.MetaMetricsEventLinkType.AccountTracker,
          location: 'Account Details Modal',
          url_domain: (0, _util.getURLHostName)(accountLink)
        }
      });
      global.platform.openTab({
        url: accountLink
      });
    };
    return /*#__PURE__*/_react.default.createElement(_accountModalContainer.default, {
      className: "account-details-modal"
    }, /*#__PURE__*/_react.default.createElement(_editableLabel.default, {
      className: "account-details-modal__name",
      defaultValue: name,
      onSubmit: label => setAccountLabel(address, label),
      accounts: this.props.accounts
    }), /*#__PURE__*/_react.default.createElement(_qrCode.default, {
      Qr: {
        data: address
      }
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "account-details-modal__divider"
    }), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      className: "account-details-modal__button",
      onClick: blockExplorerLinkText.firstPart === 'addBlockExplorer' ? routeToAddBlockExplorerUrl : openBlockExplorer
    }, this.context.t(blockExplorerLinkText.firstPart, [blockExplorerLinkText.secondPart])), exportPrivateKeyFeatureEnabled && /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      className: "account-details-modal__button",
      onClick: () => {
        this.context.trackEvent({
          category: _metametrics.MetaMetricsEventCategory.Accounts,
          event: _metametrics.MetaMetricsEventName.KeyExportSelected,
          properties: {
            key_type: _metametrics.MetaMetricsEventKeyType.Pkey,
            location: 'Account Details Modal'
          }
        });
        showExportPrivateKeyModal();
      }
    }, this.context.t('exportPrivateKey')));
  }
}
exports.default = AccountDetailsModal;
_defineProperty(AccountDetailsModal, "propTypes", {
  selectedIdentity: _propTypes.default.object,
  chainId: _propTypes.default.string,
  showExportPrivateKeyModal: _propTypes.default.func,
  setAccountLabel: _propTypes.default.func,
  keyrings: _propTypes.default.array,
  rpcPrefs: _propTypes.default.object,
  accounts: _propTypes.default.array,
  history: _propTypes.default.object,
  hideModal: _propTypes.default.func,
  blockExplorerLinkText: _propTypes.default.object
});
_defineProperty(AccountDetailsModal, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\account-details-modal\\account-details-modal.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\account-details-modal\\account-details-modal.container.js", {"../../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","./account-details-modal.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\account-details-modal\\account-details-modal.component.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-router-dom\\index.js","redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Caccount-details-modal%5Caccount-details-modal.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _reactRouterDom = require("react-router-dom");
var _actions = require("../../../../store/actions");
var _selectors = require("../../../../selectors");
var _accountDetailsModal = _interopRequireDefault(require("./account-details-modal.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  return {
    chainId: (0, _selectors.getCurrentChainId)(state),
    selectedIdentity: (0, _selectors.getSelectedIdentity)(state),
    keyrings: state.metamask.keyrings,
    rpcPrefs: (0, _selectors.getRpcPrefsForCurrentProvider)(state),
    accounts: (0, _selectors.getMetaMaskAccountsOrdered)(state),
    blockExplorerLinkText: (0, _selectors.getBlockExplorerLinkText)(state, true)
  };
};
const mapDispatchToProps = dispatch => {
  return {
    showExportPrivateKeyModal: () => dispatch((0, _actions.showModal)({
      name: 'EXPORT_PRIVATE_KEY'
    })),
    setAccountLabel: (address, label) => dispatch((0, _actions.setAccountLabel)(address, label)),
    hideModal: () => {
      dispatch((0, _actions.hideModal)());
    }
  };
};
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_accountDetailsModal.default);
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\account-details-modal\\account-details-modal.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\account-details-modal\\index.js", {"./account-details-modal.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\account-details-modal\\account-details-modal.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Caccount-details-modal%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _accountDetailsModal.default;
  }
});
var _accountDetailsModal = _interopRequireDefault(require("./account-details-modal.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\account-details-modal\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\account-modal-container\\account-modal-container.component.js", {"../../../ui/identicon":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\identicon\\index.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Caccount-modal-container%5Caccount-modal-container.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AccountModalContainer;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function AccountModalContainer(props, context) {
  const {
    className,
    selectedIdentity,
    showBackButton,
    backButtonAction,
    hideModal,
    children
  } = props;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(className, 'account-modal'),
    style: {
      borderRadius: '4px'
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "account-modal__container"
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: selectedIdentity.address,
    diameter: 64
  })), showBackButton && /*#__PURE__*/_react.default.createElement("div", {
    className: "account-modal__back",
    onClick: backButtonAction
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-angle-left fa-lg"
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "account-modal__back-text"
  }, context.t('back'))), /*#__PURE__*/_react.default.createElement("button", {
    className: "account-modal__close",
    onClick: hideModal
  }), children));
}
AccountModalContainer.contextTypes = {
  t: _propTypes.default.func
};
AccountModalContainer.defaultProps = {
  showBackButton: false,
  children: null,
  backButtonAction: undefined
};
AccountModalContainer.propTypes = {
  className: _propTypes.default.string,
  selectedIdentity: _propTypes.default.object.isRequired,
  showBackButton: _propTypes.default.bool,
  backButtonAction: _propTypes.default.func,
  hideModal: _propTypes.default.func.isRequired,
  children: _propTypes.default.node
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\account-modal-container\\account-modal-container.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\account-modal-container\\account-modal-container.container.js", {"../../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","./account-modal-container.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\account-modal-container\\account-modal-container.component.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Caccount-modal-container%5Caccount-modal-container.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _actions = require("../../../../store/actions");
var _selectors = require("../../../../selectors");
var _accountModalContainer = _interopRequireDefault(require("./account-modal-container.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function mapStateToProps(state, ownProps) {
  return {
    selectedIdentity: ownProps.selectedIdentity || (0, _selectors.getSelectedIdentity)(state)
  };
}
function mapDispatchToProps(dispatch) {
  return {
    hideModal: () => {
      dispatch((0, _actions.hideModal)());
    }
  };
}
var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_accountModalContainer.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\account-modal-container\\account-modal-container.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\account-modal-container\\index.js", {"./account-modal-container.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\account-modal-container\\account-modal-container.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Caccount-modal-container%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _accountModalContainer.default;
  }
});
var _accountModalContainer = _interopRequireDefault(require("./account-modal-container.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\account-modal-container\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.component.js", {"../../modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-delete-network%5Cconfirm-delete-network.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _modal = _interopRequireWildcard(require("../../modal"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConfirmDeleteNetwork extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "handleDelete", () => {
      this.props.removeNetworkConfiguration(this.props.target).then(() => {
        this.props.onConfirm();
        this.props.hideModal();
      });
    });
  }
  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: this.handleDelete,
      onCancel: () => this.props.hideModal(),
      submitText: t('delete'),
      cancelText: t('cancel'),
      submitType: "danger-primary"
    }, /*#__PURE__*/_react.default.createElement(_modal.ModalContent, {
      title: t('deleteNetwork'),
      description: t('deleteNetworkDescription')
    }));
  }
}
exports.default = ConfirmDeleteNetwork;
_defineProperty(ConfirmDeleteNetwork, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  removeNetworkConfiguration: _propTypes.default.func.isRequired,
  onConfirm: _propTypes.default.func.isRequired,
  target: _propTypes.default.string.isRequired
});
_defineProperty(ConfirmDeleteNetwork, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","./confirm-delete-network.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.component.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-delete-network%5Cconfirm-delete-network.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _actions = require("../../../../store/actions");
var _confirmDeleteNetwork = _interopRequireDefault(require("./confirm-delete-network.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapDispatchToProps = dispatch => {
  return {
    removeNetworkConfiguration: target => dispatch((0, _actions.removeNetworkConfiguration)(target))
  };
};
var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(null, mapDispatchToProps))(_confirmDeleteNetwork.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-delete-network\\index.js", {"./confirm-delete-network.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-delete-network\\confirm-delete-network.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-delete-network%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmDeleteNetwork.default;
  }
});
var _confirmDeleteNetwork = _interopRequireDefault(require("./confirm-delete-network.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-delete-network\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.component.js", {"../../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../../helpers/constants/zendesk-url":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\zendesk-url.js","../../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../ui/identicon":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\identicon\\index.js","../../modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\index.js","@metamask/etherscan-link":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-remove-account%5Cconfirm-remove-account.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _etherscanLink = require("@metamask/etherscan-link");
var _modal = _interopRequireDefault(require("../../modal"));
var _util = require("../../../../helpers/utils/util");
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
var _metametrics = require("../../../../../shared/constants/metametrics");
var _zendeskUrl = _interopRequireDefault(require("../../../../helpers/constants/zendesk-url"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConfirmRemoveAccount extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "handleRemove", () => {
      this.props.removeAccount(this.props.identity.address).then(() => this.props.hideModal());
    });
    _defineProperty(this, "handleCancel", () => {
      this.props.hideModal();
    });
  }
  renderSelectedAccount() {
    const {
      t
    } = this.context;
    const {
      identity,
      rpcPrefs,
      chainId
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__identicon"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: identity.address,
      diameter: 32
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__name"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "confirm-remove-account__account__label"
    }, t('name')), /*#__PURE__*/_react.default.createElement("span", {
      className: "account_value"
    }, identity.name)), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__address"
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "confirm-remove-account__account__label"
    }, t('publicAddress')), /*#__PURE__*/_react.default.createElement("span", {
      className: "account_value"
    }, (0, _util.addressSummary)(identity.address, 4, 4))), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__account__link"
    }, /*#__PURE__*/_react.default.createElement("a", {
      onClick: () => {
        const accountLink = (0, _etherscanLink.getAccountLink)(identity.address, chainId, rpcPrefs);
        this.context.trackEvent({
          category: _metametrics.MetaMetricsEventCategory.Accounts,
          event: 'Clicked Block Explorer Link',
          properties: {
            link_type: 'Account Tracker',
            action: 'Remove Account',
            block_explorer_domain: (0, _util.getURLHostName)(accountLink)
          }
        });
        global.platform.openTab({
          url: accountLink
        });
      },
      target: "_blank",
      rel: "noopener noreferrer",
      title: t('etherscanView')
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-share-square",
      style: {
        color: 'var(--color-icon-muted)'
      },
      title: t('etherscanView')
    }))));
  }
  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      headerText: `${t('removeAccount')}?`,
      onClose: this.handleCancel,
      onSubmit: this.handleRemove,
      onCancel: this.handleCancel,
      submitText: t('remove'),
      cancelText: t('nevermind')
    }, /*#__PURE__*/_react.default.createElement("div", null, this.renderSelectedAccount(), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-remove-account__description"
    }, t('removeAccountDescription'), /*#__PURE__*/_react.default.createElement("a", {
      className: "confirm-remove-account__link",
      rel: "noopener noreferrer",
      target: "_blank",
      href: _zendeskUrl.default.IMPORTED_ACCOUNTS
    }, t('learnMore')))));
  }
}
exports.default = ConfirmRemoveAccount;
_defineProperty(ConfirmRemoveAccount, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  removeAccount: _propTypes.default.func.isRequired,
  identity: _propTypes.default.object.isRequired,
  chainId: _propTypes.default.string.isRequired,
  rpcPrefs: _propTypes.default.object.isRequired
});
_defineProperty(ConfirmRemoveAccount, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","./confirm-remove-account.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.component.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-remove-account%5Cconfirm-remove-account.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _selectors = require("../../../../selectors");
var _actions = require("../../../../store/actions");
var _confirmRemoveAccount = _interopRequireDefault(require("./confirm-remove-account.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  return {
    chainId: (0, _selectors.getCurrentChainId)(state),
    rpcPrefs: (0, _selectors.getRpcPrefsForCurrentProvider)(state)
  };
};
const mapDispatchToProps = dispatch => {
  return {
    removeAccount: address => dispatch((0, _actions.removeAccount)(address))
  };
};
var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmRemoveAccount.default);
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-remove-account\\index.js", {"./confirm-remove-account.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-remove-account\\confirm-remove-account.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-remove-account%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmRemoveAccount.default;
  }
});
var _confirmRemoveAccount = _interopRequireDefault(require("./confirm-remove-account.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-remove-account\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.component.js", {"../../modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-reset-account%5Cconfirm-reset-account.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _modal = _interopRequireWildcard(require("../../modal"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ConfirmResetAccount extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "handleReset", () => {
      this.props.resetAccount().then(() => this.props.hideModal());
    });
  }
  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: this.handleReset,
      onCancel: () => this.props.hideModal(),
      submitText: t('clear'),
      cancelText: t('nevermind'),
      submitType: "danger-primary"
    }, /*#__PURE__*/_react.default.createElement(_modal.ModalContent, {
      title: `${t('clearActivity')}?`,
      description: t('clearActivityDescription')
    }));
  }
}
exports.default = ConfirmResetAccount;
_defineProperty(ConfirmResetAccount, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  resetAccount: _propTypes.default.func.isRequired
});
_defineProperty(ConfirmResetAccount, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","./confirm-reset-account.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.component.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-reset-account%5Cconfirm-reset-account.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _actions = require("../../../../store/actions");
var _confirmResetAccount = _interopRequireDefault(require("./confirm-reset-account.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapDispatchToProps = dispatch => {
  return {
    resetAccount: () => dispatch((0, _actions.resetAccount)())
  };
};
var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(null, mapDispatchToProps))(_confirmResetAccount.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-reset-account\\index.js", {"./confirm-reset-account.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-reset-account\\confirm-reset-account.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconfirm-reset-account%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmResetAccount.default;
  }
});
var _confirmResetAccount = _interopRequireDefault(require("./confirm-reset-account.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\confirm-reset-account\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\contract-details-modal\\contract-details-modal.js", {"../../../../../shared/constants/transaction":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\transaction.ts","../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useCopyToClipboard":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useCopyToClipboard.js","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../../pages/send/send.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\pages\\send\\send.utils.js","../../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../../ui/button/button.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\button.component.js","../../../ui/identicon":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\identicon\\index.js","../../../ui/nft-collection-image/nft-collection-image":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\nft-collection-image\\nft-collection-image.js","../../../ui/popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\popover\\index.js","../../../ui/tooltip/tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\tooltip\\tooltip.js","@metamask/etherscan-link":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Ccontract-details-modal%5Ccontract-details-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ContractDetailsModal;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _etherscanLink = require("@metamask/etherscan-link");
var _reactRedux = require("react-redux");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _button = _interopRequireDefault(require("../../../ui/button/button.component"));
var _tooltip = _interopRequireDefault(require("../../../ui/tooltip/tooltip"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
var _send = require("../../../../pages/send/send.utils");
var _popover = _interopRequireDefault(require("../../../ui/popover"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _useCopyToClipboard = require("../../../../hooks/useCopyToClipboard");
var _selectors = require("../../../../selectors");
var _transaction = require("../../../../../shared/constants/transaction");
var _nftCollectionImage = _interopRequireDefault(require("../../../ui/nft-collection-image/nft-collection-image"));
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ContractDetailsModal({
  onClose,
  tokenName,
  tokenAddress,
  toAddress,
  chainId,
  rpcPrefs,
  tokenId,
  assetName,
  assetStandard,
  isContractRequestingSignature
}) {
  var _addressBookEntry$dat, _addressBookEntry$dat2;
  const t = (0, _useI18nContext.useI18nContext)();
  const [copiedTokenAddress, handleCopyTokenAddress] = (0, _useCopyToClipboard.useCopyToClipboard)();
  const [copiedToAddress, handleCopyToAddress] = (0, _useCopyToClipboard.useCopyToClipboard)();
  const addressBookEntry = (0, _reactRedux.useSelector)(state => ({
    data: (0, _selectors.getAddressBookEntry)(state, toAddress)
  }));
  const nft = assetStandard === _transaction.TokenStandard.ERC721 || assetStandard === _transaction.TokenStandard.ERC1155 ||
  // if we don't have an asset standard but we do have either both an assetname and a tokenID or both a tokenName and tokenId we assume its an NFT
  assetName && tokenId || tokenName && tokenId;
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "contract-details-modal"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingTop: 6,
    paddingRight: 4,
    paddingBottom: 8,
    paddingLeft: 4,
    className: "contract-details-modal__content"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    fontWeight: _designSystem.FontWeight.Bold,
    variant: _designSystem.TextVariant.bodyMd,
    as: "h5",
    display: _designSystem.DISPLAY.FLEX,
    boxProps: {
      marginTop: 0,
      marginBottom: 0
    }
  }, t('contractTitle')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    display: _designSystem.DISPLAY.FLEX,
    color: _designSystem.TextColor.textAlternative,
    boxProps: {
      marginTop: 2,
      marginBottom: 0
    }
  }, t('contractDescription')), !isContractRequestingSignature && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    display: _designSystem.DISPLAY.FLEX,
    marginTop: 4,
    marginBottom: 2
  }, nft ? t('contractNFT') : t('contractToken')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    borderRadius: _designSystem.Size.SM,
    borderStyle: _designSystem.BorderStyle.solid,
    borderColor: _designSystem.BorderColor.borderDefault,
    className: "contract-details-modal__content__contract"
  }, nft ? /*#__PURE__*/_react.default.createElement(_box.default, {
    margin: 4
  }, /*#__PURE__*/_react.default.createElement(_nftCollectionImage.default, {
    assetName: assetName,
    tokenAddress: tokenAddress
  })) : /*#__PURE__*/_react.default.createElement(_identicon.default, {
    className: "contract-details-modal__content__contract__identicon",
    address: tokenAddress,
    diameter: 24
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    "data-testid": "recipient"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    fontWeight: _designSystem.FontWeight.Bold,
    variant: _designSystem.TextVariant.bodyMd,
    as: "h5",
    marginTop: 4
  }, tokenName || (0, _send.ellipsify)(tokenAddress)), tokenName && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    display: _designSystem.DISPLAY.FLEX,
    color: _designSystem.TextColor.textAlternative,
    marginTop: 0,
    marginBottom: 4
  }, (0, _send.ellipsify)(tokenAddress))), /*#__PURE__*/_react.default.createElement(_box.default, {
    alignItems: _designSystem.AlignItems.center,
    marginLeft: "auto",
    marginRight: 4,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: copiedTokenAddress ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    display: _designSystem.DISPLAY.FLEX,
    iconName: copiedTokenAddress ? _componentLibrary.IconName.CopySuccess : _componentLibrary.IconName.Copy,
    onClick: () => handleCopyTokenAddress(tokenAddress),
    color: _designSystem.Color.iconMuted,
    ariaLabel: copiedTokenAddress ? t('copiedExclamation') : t('copyToClipboard')
  })), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: t('openInBlockExplorer')
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    display: _designSystem.DISPLAY.FLEX,
    iconName: _componentLibrary.IconName.Export,
    color: _designSystem.Color.iconMuted,
    onClick: () => {
      const blockExplorerTokenLink = (0, _etherscanLink.getAccountLink)(tokenAddress, chainId, {
        blockExplorerUrl: (rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) ?? null
      }, null);
      global.platform.openTab({
        url: blockExplorerTokenLink
      });
    },
    ariaLabel: t('openInBlockExplorer')
  }))))), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    display: _designSystem.DISPLAY.FLEX,
    marginTop: 4,
    marginBottom: 2
  }, nft && t('contractRequestingAccess'), isContractRequestingSignature && t('contractRequestingSignature'), !nft && !isContractRequestingSignature && t('contractRequestingSpendingCap')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    borderRadius: _designSystem.Size.SM,
    borderStyle: _designSystem.BorderStyle.solid,
    borderColor: _designSystem.BorderColor.borderDefault,
    className: "contract-details-modal__content__contract"
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    className: "contract-details-modal__content__contract__identicon",
    diameter: 24,
    address: toAddress
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    "data-testid": "recipient"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    fontWeight: _designSystem.FontWeight.Bold,
    variant: _designSystem.TextVariant.bodyMd,
    as: "h5",
    marginTop: 4
  }, (addressBookEntry === null || addressBookEntry === void 0 ? void 0 : (_addressBookEntry$dat = addressBookEntry.data) === null || _addressBookEntry$dat === void 0 ? void 0 : _addressBookEntry$dat.name) || (0, _send.ellipsify)(toAddress)), (addressBookEntry === null || addressBookEntry === void 0 ? void 0 : (_addressBookEntry$dat2 = addressBookEntry.data) === null || _addressBookEntry$dat2 === void 0 ? void 0 : _addressBookEntry$dat2.name) && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    display: _designSystem.DISPLAY.FLEX,
    color: _designSystem.TextColor.textAlternative,
    marginTop: 0,
    marginBottom: 4
  }, (0, _send.ellipsify)(toAddress))), /*#__PURE__*/_react.default.createElement(_box.default, {
    alignItems: _designSystem.AlignItems.center,
    marginLeft: "auto",
    marginRight: 4,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: copiedToAddress ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    display: _designSystem.DISPLAY.FLEX,
    iconName: copiedToAddress ? _componentLibrary.IconName.CopySuccess : _componentLibrary.IconName.Copy,
    onClick: () => handleCopyToAddress(toAddress),
    color: _designSystem.Color.iconMuted,
    ariaLabel: copiedTokenAddress ? t('copiedExclamation') : t('copyToClipboard')
  })), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "top",
    title: t('openInBlockExplorer')
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    display: _designSystem.DISPLAY.FLEX,
    iconName: _componentLibrary.IconName.Export,
    color: _designSystem.Color.iconMuted,
    onClick: () => {
      const blockExplorerTokenLink = (0, _etherscanLink.getAccountLink)(toAddress, chainId, {
        blockExplorerUrl: (rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) ?? null
      }, null);
      global.platform.openTab({
        url: blockExplorerTokenLink
      });
    },
    ariaLabel: t('openInBlockExplorer')
  }))))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    paddingTop: 6,
    paddingRight: 4,
    paddingBottom: 6,
    paddingLeft: 4
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: () => onClose()
  }, t('recoveryPhraseReminderConfirm'))));
}
ContractDetailsModal.propTypes = {
  /**
   * Function that should close the modal
   */
  onClose: _propTypes.default.func,
  /**
   * Name of the token that is waiting to be allowed
   */
  tokenName: _propTypes.default.string,
  /**
   * Address of the token that is waiting to be allowed
   */
  tokenAddress: _propTypes.default.string,
  /**
   * Contract address requesting spending cap
   */
  toAddress: _propTypes.default.string,
  /**
   * Current network chainId
   */
  chainId: _propTypes.default.string,
  /**
   * RPC prefs of the current network
   */
  rpcPrefs: _propTypes.default.object,
  /**
   * The token id of the NFT
   */
  tokenId: _propTypes.default.string,
  /**
   * Token Standard
   */
  assetStandard: _propTypes.default.string,
  /**
   * The name of the collection
   */
  assetName: _propTypes.default.string,
  /**
   * Whether contract requesting signature flow has started
   */
  isContractRequestingSignature: _propTypes.default.bool
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\contract-details-modal\\contract-details-modal.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\convert-token-to-nft-modal\\convert-token-to-nft-modal.js", {"../../../../../shared/modules/string-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\string-utils.ts","../../../../ducks/metamask/metamask":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\metamask\\metamask.js","../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/constants/routes":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\routes.ts","../../../../helpers/higher-order-components/with-modal-props":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../../ui/typography":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\typography\\index.js","../../modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cconvert-token-to-nft-modal%5Cconvert-token-to-nft-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _reactRedux = require("react-redux");
var _modal = _interopRequireDefault(require("../../modal"));
var _typography = _interopRequireDefault(require("../../../ui/typography"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _routes = require("../../../../helpers/constants/routes");
var _metamask = require("../../../../ducks/metamask/metamask");
var _actions = require("../../../../store/actions");
var _stringUtils = require("../../../../../shared/modules/string-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ConvertTokenToNFTModal = ({
  hideModal,
  tokenAddress
}) => {
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const allNfts = (0, _reactRedux.useSelector)(_metamask.getNfts);
  const tokenAddedAsNFT = allNfts.find(({
    address
  }) => (0, _stringUtils.isEqualCaseInsensitive)(address, tokenAddress));
  return /*#__PURE__*/_react.default.createElement(_modal.default, {
    onSubmit: async () => {
      if (tokenAddedAsNFT) {
        await dispatch((0, _actions.ignoreTokens)({
          tokensToIgnore: tokenAddress,
          dontShowLoadingIndicator: true
        }));
        const {
          tokenId
        } = tokenAddedAsNFT;
        history.push({
          pathname: `${_routes.ASSET_ROUTE}/${tokenAddress}/${tokenId}`
        });
      } else {
        history.push({
          pathname: _routes.ADD_NFT_ROUTE,
          state: {
            tokenAddress
          }
        });
      }
      hideModal();
    },
    submitText: t('yes'),
    onCancel: () => hideModal(),
    cancelText: t('cancel')
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "convert-token-to-nft-modal"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H6,
    boxProps: {
      marginTop: 2
    }
  }, tokenAddedAsNFT ? t('convertTokenToNFTExistDescription') : t('convertTokenToNFTDescription'))));
};
ConvertTokenToNFTModal.propTypes = {
  hideModal: _propTypes.default.func.isRequired,
  tokenAddress: _propTypes.default.string
};
var _default = (0, _withModalProps.default)(ConvertTokenToNFTModal);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\convert-token-to-nft-modal\\convert-token-to-nft-modal.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\customize-nonce\\customize-nonce.component.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/constants/zendesk-url":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\zendesk-url.js","../../../../helpers/higher-order-components/with-modal-props":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../../ui/text-field":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\text-field\\index.js","../../modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Ccustomize-nonce%5Ccustomize-nonce.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _modal = _interopRequireDefault(require("../../modal"));
var _textField = _interopRequireDefault(require("../../../ui/text-field"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _zendeskUrl = _interopRequireDefault(require("../../../../helpers/constants/zendesk-url"));
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const CustomizeNonce = ({
  hideModal,
  customNonceValue,
  nextNonce,
  updateCustomNonce,
  getNextNonce
}) => {
  const [customNonce, setCustomNonce] = (0, _react.useState)('');
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_modal.default, {
    onSubmit: () => {
      if (customNonce === '') {
        updateCustomNonce(customNonceValue);
      } else {
        updateCustomNonce(customNonce);
      }
      getNextNonce();
      hideModal();
    },
    submitText: t('save'),
    onCancel: () => hideModal(),
    cancelText: t('cancel'),
    contentClass: "customize-nonce-modal-content",
    containerClass: "customize-nonce-modal-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "customize-nonce-modal"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "customize-nonce-modal__main-header"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    className: "customize-nonce-modal__main-title",
    variant: _designSystem.TextVariant.headingSm,
    as: "h4",
    fontWeight: _designSystem.FontWeight.Bold
  }, t('editNonceField')), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    iconName: _componentLibrary.IconName.Close,
    className: "customize-nonce-modal__close",
    size: _componentLibrary.ButtonIconSize.Sm,
    ariaLabel: t('close'),
    onClick: hideModal
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 2,
    display: _designSystem.DISPLAY.INLINE_FLEX,
    alignItems: _designSystem.AlignItems.center
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Normal
  }, t('editNonceMessage'), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    className: "customize-nonce-modal__link",
    rel: "noopener noreferrer",
    target: "_blank",
    href: _zendeskUrl.default.CUSTOMIZE_NONCE
  }, t('learnMoreUpperCase')))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 3
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    alignItems: _designSystem.AlignItems.center,
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Bold,
    boxProps: {
      width: _designSystem.BLOCK_SIZES.FIVE_SIXTHS
    }
  }, t('editNonceField')), /*#__PURE__*/_react.default.createElement(_box.default, {
    width: _designSystem.BLOCK_SIZES.ONE_SIXTH
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    className: "customize-nonce-modal__reset",
    "data-testid": "customize-nonce-reset",
    onClick: () => {
      setCustomNonce(nextNonce);
    }
  }, t('reset')))), /*#__PURE__*/_react.default.createElement("div", {
    className: "customize-nonce-modal__input"
  }, /*#__PURE__*/_react.default.createElement(_textField.default, {
    type: "number",
    "data-testid": "custom-nonce-input",
    min: "0",
    placeholder: customNonceValue || typeof nextNonce === 'number' && nextNonce.toString(),
    onChange: e => {
      setCustomNonce(e.target.value);
    },
    fullWidth: true,
    margin: "dense",
    value: customNonce,
    id: "custom-nonce-id"
  })))));
};
CustomizeNonce.propTypes = {
  hideModal: _propTypes.default.func.isRequired,
  customNonceValue: _propTypes.default.string,
  nextNonce: _propTypes.default.number,
  updateCustomNonce: _propTypes.default.func,
  getNextNonce: _propTypes.default.func
};
var _default = (0, _withModalProps.default)(CustomizeNonce);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\customize-nonce\\customize-nonce.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\customize-nonce\\index.js", {"./customize-nonce.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\customize-nonce\\customize-nonce.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Ccustomize-nonce%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _customizeNonce.default;
  }
});
var _customizeNonce = _interopRequireDefault(require("./customize-nonce.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\customize-nonce\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.component.js", {"../../../../../shared/lib/transactions-controller-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\lib\\transactions-controller-utils.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/identicon":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\identicon\\index.js","../../../ui/text-field":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\text-field\\index.js","../../modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\index.js","bignumber.js":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\bignumber.js\\bignumber.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cedit-approval-permission%5Cedit-approval-permission.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _classnames = _interopRequireDefault(require("classnames"));
var _bignumber = _interopRequireDefault(require("bignumber.js"));
var _modal = _interopRequireDefault(require("../../modal"));
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
var _textField = _interopRequireDefault(require("../../../ui/text-field"));
var _transactionsControllerUtils = require("../../../../../shared/lib/transactions-controller-utils");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const MAX_UNSIGNED_256_INT = new _bignumber.default(2).pow(256).minus(1).toString(10);
class EditApprovalPermission extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      // This is used as a TextField value, which should be a string.
      customSpendLimit: this.props.customTokenAmount || '',
      selectedOptionIsUnlimited: !this.props.customTokenAmount
    });
  }
  renderModalContent(error) {
    const {
      t
    } = this.context;
    const {
      hideModal,
      selectedIdentity,
      tokenAmount,
      tokenSymbol,
      tokenBalance,
      customTokenAmount,
      origin
    } = this.props;
    const {
      name,
      address
    } = selectedIdentity || {};
    const {
      selectedOptionIsUnlimited
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__title"
    }, t('editPermission')), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
      iconName: _componentLibrary.IconName.Close,
      size: _componentLibrary.ButtonIconSize.Lg,
      className: "edit-approval-permission__header__close",
      onClick: hideModal
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info__account"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: address,
      diameter: 32
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__name-and-balance-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info__name"
    }, name), /*#__PURE__*/_react.default.createElement("div", null, t('balance')))), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__account-info__balance"
    }, `${(0, _transactionsControllerUtils.toPrecisionWithoutTrailingZeros)(tokenBalance, 9)} ${tokenSymbol}`)), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__title"
    }, t('spendLimitPermission')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__description"
    }, t('allowWithdrawAndSpend', [origin])), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button",
      onClick: () => this.setState({
        selectedOptionIsUnlimited: true
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__radio-button-outline': !selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__radio-button-outline--selected': selectedOptionIsUnlimited
      })
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-fill"
    }), selectedOptionIsUnlimited && /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-dot"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-text"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__option-label': !selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__option-label--selected': selectedOptionIsUnlimited
      })
    }, new _bignumber.default(tokenAmount).equals(new _bignumber.default(MAX_UNSIGNED_256_INT)) ? t('unlimited') : t('proposedApprovalLimit')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-description"
    }, t('spendLimitRequestedBy', [origin])), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-value"
    }, `${Number(tokenAmount)} ${tokenSymbol}`))), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button",
      onClick: () => this.setState({
        selectedOptionIsUnlimited: false
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__radio-button-outline': selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__radio-button-outline--selected': !selectedOptionIsUnlimited
      })
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-fill"
    }), !selectedOptionIsUnlimited && /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__radio-button-dot"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-text"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)({
        'edit-approval-permission__edit-section__option-label': selectedOptionIsUnlimited,
        'edit-approval-permission__edit-section__option-label--selected': !selectedOptionIsUnlimited
      })
    }, t('customSpendLimit')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-description"
    }, t('enterMaxSpendLimit')), /*#__PURE__*/_react.default.createElement("div", {
      className: "edit-approval-permission__edit-section__option-input"
    }, /*#__PURE__*/_react.default.createElement(_textField.default, {
      type: "number",
      placeholder: `${Number(customTokenAmount || tokenAmount)} ${tokenSymbol}`,
      onChange: event => {
        this.setState({
          customSpendLimit: event.target.value
        });
        if (selectedOptionIsUnlimited) {
          this.setState({
            selectedOptionIsUnlimited: false
          });
        }
      },
      fullWidth: true,
      margin: "dense",
      value: this.state.customSpendLimit,
      error: error
    }))))));
  }
  validateSpendLimit() {
    const {
      t
    } = this.context;
    const {
      decimals,
      requiredMinimum
    } = this.props;
    const {
      selectedOptionIsUnlimited,
      customSpendLimit
    } = this.state;
    if (selectedOptionIsUnlimited || !customSpendLimit) {
      return undefined;
    }
    let customSpendLimitNumber;
    try {
      customSpendLimitNumber = new _bignumber.default(customSpendLimit);
    } catch (error) {
      _loglevel.default.debug(`Error converting '${customSpendLimit}' to BigNumber:`, error);
      return t('spendLimitInvalid');
    }
    if (customSpendLimitNumber.isNegative()) {
      return t('spendLimitInvalid');
    }
    const maxTokenAmount = (0, _transactionsControllerUtils.calcTokenAmount)(MAX_UNSIGNED_256_INT, decimals);
    if (customSpendLimitNumber.greaterThan(maxTokenAmount)) {
      return t('spendLimitTooLarge');
    }
    if (requiredMinimum !== undefined && customSpendLimitNumber.lessThan(requiredMinimum)) {
      return t('spendLimitInsufficient');
    }
    return undefined;
  }
  render() {
    const {
      t
    } = this.context;
    const {
      setCustomAmount,
      hideModal,
      customTokenAmount
    } = this.props;
    const {
      selectedOptionIsUnlimited,
      customSpendLimit
    } = this.state;
    const error = this.validateSpendLimit();
    const disabled = Boolean(customSpendLimit === customTokenAmount && !selectedOptionIsUnlimited || error);
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: () => {
        setCustomAmount(selectedOptionIsUnlimited ? '' : customSpendLimit);
        hideModal();
      },
      submitText: t('save'),
      contentClass: "edit-approval-permission-modal-content",
      containerClass: "edit-approval-permission-modal-container",
      submitDisabled: disabled
    }, this.renderModalContent(error));
  }
}
exports.default = EditApprovalPermission;
_defineProperty(EditApprovalPermission, "propTypes", {
  decimals: _propTypes.default.number,
  hideModal: _propTypes.default.func.isRequired,
  selectedIdentity: _propTypes.default.object,
  tokenAmount: _propTypes.default.string,
  customTokenAmount: _propTypes.default.string,
  tokenSymbol: _propTypes.default.string,
  tokenBalance: _propTypes.default.string,
  setCustomAmount: _propTypes.default.func,
  origin: _propTypes.default.string.isRequired,
  requiredMinimum: _propTypes.default.instanceOf(_bignumber.default)
});
_defineProperty(EditApprovalPermission, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","./edit-approval-permission.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.component.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cedit-approval-permission%5Cedit-approval-permission.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _selectors = require("../../../../selectors");
var _editApprovalPermission = _interopRequireDefault(require("./edit-approval-permission.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  const modalStateProps = state.appState.modal.modalState.props || {};
  return {
    selectedIdentity: (0, _selectors.getSelectedIdentity)(state),
    ...modalStateProps
  };
};
var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(mapStateToProps))(_editApprovalPermission.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\edit-approval-permission\\index.js", {"./edit-approval-permission.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\edit-approval-permission\\edit-approval-permission.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cedit-approval-permission%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _editApprovalPermission.default;
  }
});
var _editApprovalPermission = _interopRequireDefault(require("./edit-approval-permission.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\edit-approval-permission\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\eth-sign-modal\\eth-sign-modal.js", {"../../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../../contexts/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\metametrics.js","../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/higher-order-components/with-modal-props":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../../ui/check-box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\check-box\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Ceth-sign-modal%5Ceth-sign-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _componentLibrary = require("../../../component-library");
var _designSystem = require("../../../../helpers/constants/design-system");
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _checkBox = _interopRequireDefault(require("../../../ui/check-box"));
var _actions = require("../../../../store/actions");
var _selectors = require("../../../../selectors");
var _metametrics = require("../../../../../shared/constants/metametrics");
var _metametrics2 = require("../../../../contexts/metametrics");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const EthSignModal = ({
  hideModal
}) => {
  const [isEthSignChecked, setIsEthSignChecked] = (0, _react.useState)(false);
  const [showTextField, setShowTextField] = (0, _react.useState)(false);
  const [inputKeyword, setInputKeyword] = (0, _react.useState)('');
  const disabledRpcMethodPreferences = (0, _reactRedux.useSelector)(_selectors.getDisabledRpcMethodPreferences);
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const handleSubmit = () => {
    dispatch((0, _actions.setDisabledRpcMethodPreference)('eth_sign', !disabledRpcMethodPreferences.eth_sign));
    hideModal();
  };
  const isValid = inputKeyword === t('toggleEthSignModalFormValidation');
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "eth-sign-modal",
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    justifyContent: _designSystem.JustifyContent.flexStart,
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    marginBottom: 4,
    justifyContent: _designSystem.JustifyContent.center
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    className: "eth-sign-modal__warning-icon",
    name: _componentLibrary.IconName.Danger,
    color: _designSystem.IconColor.errorDefault,
    size: _componentLibrary.IconSize.Lg
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    className: "eth-sign-modal__close",
    iconName: _componentLibrary.IconName.Close,
    size: _designSystem.Size.SM,
    onClick: () => hideModal(),
    ariaLabel: t('close')
  })), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.headingMd,
    textAlign: _designSystem.TextAlign.Center,
    marginBottom: 6
  }, t('toggleEthSignModalTitle')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd
  }, t('toggleEthSignModalDescription'), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    href: "https://support.metamask.io/hc/en-us/articles/14764161421467",
    externalLink: true
  }, t('learnMoreUpperCase'))), /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    severity: _designSystem.SEVERITIES.DANGER,
    marginTop: 6,
    marginBottom: 6
  }, t('toggleEthSignModalBannerText'), t('toggleEthSignModalBannerBoldText')), showTextField ? /*#__PURE__*/_react.default.createElement(_componentLibrary.FormTextField, {
    id: "enter-eth-sign-text",
    label: t('toggleEthSignModalFormLabel'),
    error: inputKeyword.length > 0 && !isValid,
    helpText: inputKeyword.length > 0 && !isValid && t('toggleEthSignModalFormError'),
    onChange: event => setInputKeyword(event.target.value),
    value: inputKeyword,
    onPaste: event => event.preventDefault()
  }) : /*#__PURE__*/_react.default.createElement(_box.default, {
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    alignItems: _designSystem.AlignItems.flexStart,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    id: "eth-sign__checkbox",
    className: "eth-sign__checkbox",
    dataTestId: "eth-sign__checkbox",
    checked: isEthSignChecked,
    onClick: () => {
      setIsEthSignChecked(!isEthSignChecked);
    }
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Label, {
    htmlFor: "eth-sign__checkbox"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "span"
  }, t('toggleEthSignModalCheckBox')))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    gap: 4,
    marginTop: 6
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonSecondary, {
    onClick: () => hideModal(),
    size: _designSystem.Size.LG,
    block: true
  }, t('cancel')), showTextField ? /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonPrimary, {
    danger: true,
    block: true,
    disabled: !isValid,
    onClick: handleSubmit,
    size: _designSystem.Size.LG
  }, t('enableSnap')) : /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonPrimary, {
    block: true,
    disabled: !isEthSignChecked,
    size: _designSystem.Size.LG,
    onClick: () => {
      setShowTextField(true);
      trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Settings,
        event: _metametrics.MetaMetricsEventName.OnboardingWalletAdvancedSettings,
        properties: {
          location: 'Settings',
          enable_eth_sign: true
        }
      });
    }
  }, t('continue'))));
};
EthSignModal.propTypes = {
  // The function to close the Modal
  hideModal: _propTypes.default.func
};
var _default = (0, _withModalProps.default)(EthSignModal);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\eth-sign-modal\\eth-sign-modal.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.component.js", {"../../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../../../shared/modules/hexstring-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\hexstring-utils.ts","../../../../contexts/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\metametrics.js","../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/higher-order-components/with-modal-props":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../account-modal-container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\account-modal-container\\index.js","../hold-to-reveal-modal/hold-to-reveal-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\hold-to-reveal-modal\\hold-to-reveal-modal.js","./password-input":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\export-private-key-modal\\password-input.js","./private-key":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\export-private-key-modal\\private-key.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cexport-private-key-modal%5Cexport-private-key-modal.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _loglevel = _interopRequireDefault(require("loglevel"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _componentLibrary = require("../../../component-library");
var _accountModalContainer = _interopRequireDefault(require("../account-modal-container"));
var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");
var _metametrics = require("../../../../../shared/constants/metametrics");
var _holdToRevealModal = _interopRequireDefault(require("../hold-to-reveal-modal/hold-to-reveal-modal"));
var _metametrics2 = require("../../../../contexts/metametrics");
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _designSystem = require("../../../../helpers/constants/design-system");
var _privateKey = _interopRequireDefault(require("./private-key"));
var _passwordInput = _interopRequireDefault(require("./password-input"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ExportPrivateKeyModal = ({
  clearAccountDetails,
  hideWarning,
  exportAccount,
  selectedIdentity,
  showAccountDetailModal,
  hideModal,
  warning = null,
  previousModalState
}) => {
  const [password, setPassword] = (0, _react.useState)('');
  const [privateKey, setPrivateKey] = (0, _react.useState)(null);
  const [showWarning, setShowWarning] = (0, _react.useState)(true);
  const [showHoldToReveal, setShowHoldToReveal] = (0, _react.useState)(false);
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const t = (0, _useI18nContext.useI18nContext)();
  (0, _react.useEffect)(() => {
    return () => {
      clearAccountDetails();
      hideWarning();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  const exportAccountAndGetPrivateKey = async (passwordInput, address) => {
    try {
      const privateKeyRetrieved = await exportAccount(passwordInput, address);
      trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Keys,
        event: _metametrics.MetaMetricsEventName.KeyExportRevealed,
        properties: {
          key_type: _metametrics.MetaMetricsEventKeyType.Pkey
        }
      }, {});
      setPrivateKey(privateKeyRetrieved);
      setShowWarning(false);
      setShowHoldToReveal(true);
    } catch (e) {
      trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Keys,
        event: _metametrics.MetaMetricsEventName.KeyExportFailed,
        properties: {
          key_type: _metametrics.MetaMetricsEventKeyType.Pkey,
          reason: 'incorrect_password'
        }
      }, {});
      _loglevel.default.error(e);
    }
  };
  const {
    name,
    address
  } = selectedIdentity;
  if (showHoldToReveal) {
    return /*#__PURE__*/_react.default.createElement(_accountModalContainer.default, {
      className: "export-private-key-modal",
      selectedIdentity: selectedIdentity,
      showBackButton: previousModalState === 'ACCOUNT_DETAILS',
      backButtonAction: () => showAccountDetailModal()
    }, /*#__PURE__*/_react.default.createElement(_holdToRevealModal.default, {
      onLongPressed: () => setShowHoldToReveal(false),
      willHide: false,
      holdToRevealType: "PrivateKey"
    }));
  }
  return /*#__PURE__*/_react.default.createElement(_accountModalContainer.default, {
    className: "export-private-key-modal",
    selectedIdentity: selectedIdentity,
    showBackButton: previousModalState === 'ACCOUNT_DETAILS',
    backButtonAction: () => showAccountDetailModal()
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "span",
    marginTop: 2,
    variant: _designSystem.TextVariant.bodyLgMedium,
    fontWeight: _designSystem.FONT_WEIGHT.NORMAL
  }, name), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "ellip-address-wrapper",
    borderStyle: _designSystem.BorderStyle.solid,
    borderColor: _designSystem.BorderColor.borderDefault,
    borderWidth: 1,
    marginTop: 2,
    padding: [1, 2, 1, 2]
  }, (0, _hexstringUtils.toChecksumHexAddress)(address)), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "export-private-key-modal__divider",
    width: _designSystem.BLOCK_SIZES.FULL,
    margin: [5, 0, 3, 0]
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyLgMedium,
    margin: [4, 0, 4, 0],
    fontWeight: _designSystem.FONT_WEIGHT.NORMAL
  }, t('showPrivateKeys')), privateKey ? /*#__PURE__*/_react.default.createElement(_privateKey.default, {
    privateKey: privateKey
  }) : /*#__PURE__*/_react.default.createElement(_passwordInput.default, {
    setPassword: setPassword
  }), showWarning && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.Color.errorDefault,
    variant: _designSystem.TextVariant.bodySm
  }, warning), /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    padding: [1, 3, 0, 3],
    marginLeft: 5,
    marginRight: 5,
    marginTop: 4,
    severity: "danger"
  }, t('privateKeyWarning')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    width: _designSystem.BLOCK_SIZES.FULL,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    marginTop: 3,
    padding: [5, 0, 5, 0]
  }, !privateKey && /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
    type: _componentLibrary.BUTTON_VARIANT.SECONDARY,
    size: _componentLibrary.BUTTON_SIZES.LG,
    width: _designSystem.BLOCK_SIZES.HALF,
    marginRight: 4,
    onClick: () => {
      trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Keys,
        event: _metametrics.MetaMetricsEventName.KeyExportCanceled,
        properties: {
          key_type: _metametrics.MetaMetricsEventKeyType.Pkey
        }
      });
      hideModal();
    }
  }, t('cancel')), privateKey ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
    type: _componentLibrary.BUTTON_VARIANT.PRIMARY,
    size: _componentLibrary.BUTTON_SIZES.LG,
    width: _designSystem.BLOCK_SIZES.FULL,
    onClick: () => {
      hideModal();
    }
  }, t('done')) : /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
    type: _componentLibrary.BUTTON_VARIANT.PRIMARY,
    size: _componentLibrary.BUTTON_SIZES.LG,
    width: _designSystem.BLOCK_SIZES.HALF,
    onClick: () => {
      trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Keys,
        event: _metametrics.MetaMetricsEventName.KeyExportRequested,
        properties: {
          key_type: _metametrics.MetaMetricsEventKeyType.Pkey
        }
      });
      exportAccountAndGetPrivateKey(password, address);
    },
    disabled: !password
  }, t('confirm'))));
};
ExportPrivateKeyModal.propTypes = {
  exportAccount: _propTypes.default.func.isRequired,
  selectedIdentity: _propTypes.default.object.isRequired,
  warning: _propTypes.default.node,
  showAccountDetailModal: _propTypes.default.func.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  hideWarning: _propTypes.default.func.isRequired,
  clearAccountDetails: _propTypes.default.func.isRequired,
  previousModalState: _propTypes.default.string
};
var _default = (0, _withModalProps.default)(ExportPrivateKeyModal);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.container.js", {"../../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","./export-private-key-modal.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.component.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cexport-private-key-modal%5Cexport-private-key-modal.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _actions = require("../../../../store/actions");
var _selectors = require("../../../../selectors");
var _exportPrivateKeyModal = _interopRequireDefault(require("./export-private-key-modal.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function mapStateToPropsFactory() {
  let selectedIdentity = null;
  return function mapStateToProps(state) {
    // We should **not** change the identity displayed here even if it changes from underneath us.
    // If we do, we will be showing the user one private key and a **different** address and name.
    // Note that the selected identity **will** change from underneath us when we unlock the keyring
    // which is the expected behavior that we are side-stepping.
    selectedIdentity = selectedIdentity || (0, _selectors.getSelectedIdentity)(state);
    return {
      warning: state.appState.warning,
      privateKey: state.appState.accountDetail.privateKey,
      selectedIdentity,
      previousModalState: state.appState.modal.previousModalState.name
    };
  };
}
function mapDispatchToProps(dispatch) {
  return {
    exportAccount: (password, address) => {
      return dispatch((0, _actions.exportAccount)(password, address)).then(res => {
        dispatch((0, _actions.hideWarning)());
        return res;
      });
    },
    showAccountDetailModal: () => dispatch((0, _actions.showModal)({
      name: 'ACCOUNT_DETAILS'
    })),
    hideModal: () => dispatch((0, _actions.hideModal)()),
    hideWarning: () => dispatch((0, _actions.hideWarning)()),
    clearAccountDetails: () => dispatch((0, _actions.clearAccountDetails)())
  };
}
var _default = (0, _reactRedux.connect)(mapStateToPropsFactory, mapDispatchToProps)(_exportPrivateKeyModal.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\export-private-key-modal\\index.js", {"./export-private-key-modal.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\export-private-key-modal\\export-private-key-modal.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cexport-private-key-modal%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _exportPrivateKeyModal.default;
  }
});
var _exportPrivateKeyModal = _interopRequireDefault(require("./export-private-key-modal.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\export-private-key-modal\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\export-private-key-modal\\password-input.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cexport-private-key-modal%5Cpassword-input.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const PasswordInput = ({
  setPassword
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    width: _designSystem.BLOCK_SIZES.FULL,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.flexStart,
    paddingLeft: 5,
    paddingRight: 5
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Label, {
    color: _designSystem.Color.textDefault,
    marginBottom: 2,
    variant: _designSystem.TextVariant.bodySm
  }, t('typePassword')), /*#__PURE__*/_react.default.createElement(_componentLibrary.TextField, {
    width: _designSystem.BLOCK_SIZES.FULL,
    placeholder: t('enterPassword'),
    type: _componentLibrary.TEXT_FIELD_TYPES.PASSWORD,
    className: "export-private-key-modal__password-input",
    onChange: event => setPassword(event.target.value),
    "data-testid": "password-input"
  }));
};
PasswordInput.propTypes = {
  setPassword: _propTypes.default.func.isRequired
};
var _default = PasswordInput;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\export-private-key-modal\\password-input.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\export-private-key-modal\\private-key.js", {"../../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../../contexts/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\metametrics.js","../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","copy-to-clipboard":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\copy-to-clipboard\\index.js","ethereumjs-util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethereumjs-util\\dist.browser\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cexport-private-key-modal%5Cprivate-key.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));
var _ethereumjsUtil = require("ethereumjs-util");
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _metametrics = require("../../../../../shared/constants/metametrics");
var _metametrics2 = require("../../../../contexts/metametrics");
var _designSystem = require("../../../../helpers/constants/design-system");
var _componentLibrary = require("../../../component-library");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const PrivateKeyDisplay = ({
  privateKey
}) => {
  const trackEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  const t = (0, _useI18nContext.useI18nContext)();
  const plainKey = (0, _ethereumjsUtil.stripHexPrefix)(privateKey);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    width: _designSystem.BLOCK_SIZES.FULL,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.flexStart,
    paddingLeft: 4,
    paddingRight: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Label, {
    color: _designSystem.Color.textDefault,
    marginBottom: 2,
    variant: _designSystem.TextVariant.bodySm
  }, t('copyPrivateKey')), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "export-private-key-modal__private-key-display",
    width: _designSystem.BLOCK_SIZES.FULL,
    borderStyle: _designSystem.BorderStyle.solid,
    borderColor: _designSystem.BorderColor.borderDefault,
    borderRadius: _designSystem.BorderRadius.XS,
    borderWidth: 1,
    padding: [2, 3, 2],
    color: _designSystem.Color.errorDefault,
    onClick: () => {
      (0, _copyToClipboard.default)(plainKey);
      trackEvent({
        category: _metametrics.MetaMetricsEventCategory.Keys,
        event: _metametrics.MetaMetricsEventName.KeyExportCopied,
        properties: {
          key_type: _metametrics.MetaMetricsEventKeyType.Pkey,
          copy_method: 'clipboard'
        }
      }, {});
    }
  }, plainKey));
};
PrivateKeyDisplay.propTypes = {
  privateKey: _propTypes.default.string.isRequired
};
var _default = PrivateKeyDisplay;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\export-private-key-modal\\private-key.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\fade-modal.js", {"prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cfade-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
let index = 0;
let extraSheet;
const insertRule = css => {
  if (!extraSheet) {
    // First time, create an extra stylesheet for adding rules
    extraSheet = document.createElement('style');
    document.getElementsByTagName('head')[0].appendChild(extraSheet);
    // Keep reference to actual StyleSheet object (`styleSheet` for IE < 9)
    extraSheet = extraSheet.sheet || extraSheet.styleSheet;
  }
  extraSheet.insertRule(css, (extraSheet.cssRules || extraSheet.rules).length);
  return extraSheet;
};
const insertKeyframesRule = keyframes => {
  // random name
  // eslint-disable-next-line no-plusplus
  const name = `anim_${++index}${Number(new Date())}`;
  let css = `@keyframes ${name} {`;
  Object.keys(keyframes).forEach(key => {
    css += `${key} {`;
    Object.keys(keyframes[key]).forEach(property => {
      const part = `:${keyframes[key][property]};`;
      css += property + part;
    });
    css += '}';
  });
  css += '}';
  insertRule(css);
  return name;
};
const animation = {
  show: {
    animationDuration: '0.3s',
    animationTimingFunction: 'ease-out'
  },
  hide: {
    animationDuration: '0.3s',
    animationTimingFunction: 'ease-out'
  },
  showContentAnimation: insertKeyframesRule({
    '0%': {
      opacity: 0
    },
    '100%': {
      opacity: 1
    }
  }),
  hideContentAnimation: insertKeyframesRule({
    '0%': {
      opacity: 1
    },
    '100%': {
      opacity: 0
    }
  }),
  showBackdropAnimation: insertKeyframesRule({
    '0%': {
      opacity: 0
    },
    '100%': {
      opacity: 0.9
    }
  }),
  hideBackdropAnimation: insertKeyframesRule({
    '0%': {
      opacity: 0.9
    },
    '100%': {
      opacity: 0
    }
  })
};
const endEvents = ['transitionend', 'animationend'];
function addEventListener(node, eventName, eventListener) {
  node.addEventListener(eventName, eventListener, false);
}
function removeEventListener(node, eventName, eventListener) {
  node.removeEventListener(eventName, eventListener, false);
}
const removeEndEventListener = (node, eventListener) => {
  if (endEvents.length === 0) {
    return;
  }
  endEvents.forEach(function (endEvent) {
    removeEventListener(node, endEvent, eventListener);
  });
};
const addEndEventListener = (node, eventListener) => {
  if (endEvents.length === 0) {
    // If CSS transitions are not supported, trigger an "end animation"
    // event immediately.
    window.setTimeout(eventListener, 0);
    return;
  }
  endEvents.forEach(function (endEvent) {
    addEventListener(node, endEvent, eventListener);
  });
};
class FadeModal extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "content", null);
    _defineProperty(this, "state", {
      willHide: true,
      hidden: true
    });
    _defineProperty(this, "addTransitionListener", (node, handle) => {
      if (node) {
        const endListener = function (e) {
          if (e && e.target !== node) {
            return;
          }
          removeEndEventListener(node, endListener);
          handle();
        };
        addEndEventListener(node, endListener);
      }
    });
    _defineProperty(this, "handleBackdropClick", () => {
      if (this.props.closeOnClick) {
        this.hide();
      }
    });
    _defineProperty(this, "hasHidden", () => {
      return this.state.hidden;
    });
    _defineProperty(this, "leave", () => {
      this.setState({
        hidden: true
      });
      this.props.onHide(this.state.hideSource);
    });
    _defineProperty(this, "enter", () => {
      this.props.onShow();
    });
    _defineProperty(this, "show", () => {
      if (!this.state.hidden) {
        return;
      }
      this.setState({
        willHide: false,
        hidden: false
      });
      setTimeout(function () {
        this.addTransitionListener(this.content, this.enter);
      }.bind(this), 0);
    });
    _defineProperty(this, "hide", () => {
      if (this.hasHidden()) {
        return;
      }
      this.setState({
        willHide: true
      });
    });
    _defineProperty(this, "listenKeyboard", event => {
      if (typeof this.props.keyboard === 'function') {
        this.props.keyboard(event);
      } else {
        this.closeOnEsc(event);
      }
    });
    _defineProperty(this, "closeOnEsc", event => {
      if (this.props.keyboard && (event.key === 'Escape' || event.keyCode === 27)) {
        this.hide();
      }
    });
    _defineProperty(this, "UNSAFE_componentDidMount", () => {
      window.addEventListener('keydown', this.listenKeyboard, true);
    });
    _defineProperty(this, "UNSAFE_componentWillUnmount", () => {
      window.removeEventListener('keydown', this.listenKeyboard, true);
    });
  }
  render() {
    if (this.state.hidden) {
      return null;
    }
    const {
      willHide
    } = this.state;
    const {
      modalStyle
    } = this.props;
    const backdropStyle = {
      animationName: willHide ? animation.hideBackdropAnimation : animation.showBackdropAnimation,
      animationTimingFunction: (willHide ? animation.hide : animation.show).animationTimingFunction,
      ...this.props.backdropStyle
    };
    const contentStyle = {
      animationDuration: (willHide ? animation.hide : animation.show).animationDuration,
      animationName: willHide ? animation.hideContentAnimation : animation.showContentAnimation,
      animationTimingFunction: (willHide ? animation.hide : animation.show).animationTimingFunction,
      ...this.props.contentStyle
    };
    const backdrop = this.props.backdrop ? /*#__PURE__*/_react.default.createElement("div", {
      className: "modal__backdrop",
      style: backdropStyle,
      onClick: this.props.closeOnClick ? this.handleBackdropClick : null
    }) : undefined;
    if (willHide) {
      this.addTransitionListener(this.content, this.leave);
    }
    return /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "modal",
      style: modalStyle
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "modal__content",
      ref: el => this.content = el,
      tabIndex: "-1",
      style: contentStyle
    }, this.props.children)), backdrop);
  }
}
_defineProperty(FadeModal, "propTypes", {
  backdrop: _propTypes.default.bool,
  backdropStyle: _propTypes.default.object,
  closeOnClick: _propTypes.default.bool,
  contentStyle: _propTypes.default.object,
  keyboard: _propTypes.default.bool,
  modalStyle: _propTypes.default.object,
  onShow: _propTypes.default.func,
  onHide: _propTypes.default.func,
  children: _propTypes.default.node
});
_defineProperty(FadeModal, "defaultProps", {
  onShow: () => undefined,
  onHide: () => undefined,
  keyboard: true,
  backdrop: true,
  closeOnClick: true,
  modalStyle: {},
  backdropStyle: {},
  contentStyle: {},
  children: []
});
var _default = FadeModal;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\fade-modal.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\hide-token-confirmation-modal\\hide-token-confirmation-modal.js", {"../../../../helpers/constants/routes":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\routes.ts","../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../../ui/identicon":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\identicon\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Chide-token-confirmation-modal%5Chide-token-confirmation-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var actions = _interopRequireWildcard(require("../../../../store/actions"));
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _routes = require("../../../../helpers/constants/routes");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function mapStateToProps(state) {
  return {
    token: state.appState.modal.modalState.props.token,
    history: state.appState.modal.modalState.props.history
  };
}
function mapDispatchToProps(dispatch) {
  return {
    hideModal: () => dispatch(actions.hideModal()),
    hideToken: address => {
      dispatch(actions.ignoreTokens({
        tokensToIgnore: address
      })).then(() => {
        dispatch(actions.hideModal());
      });
    }
  };
}
class HideTokenConfirmationModal extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {});
  }
  render() {
    const {
      token,
      hideToken,
      hideModal,
      history
    } = this.props;
    const {
      symbol,
      address,
      image
    } = token;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__title"
    }, this.context.t('hideTokenPrompt')), /*#__PURE__*/_react.default.createElement(_identicon.default, {
      className: "hide-token-confirmation__identicon",
      diameter: 45,
      address: address,
      image: image
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__symbol"
    }, symbol), /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__copy"
    }, this.context.t('readdToken')), /*#__PURE__*/_react.default.createElement("div", {
      className: "hide-token-confirmation__buttons"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      className: "hide-token-confirmation__button",
      "data-testid": "hide-token-confirmation__cancel",
      onClick: () => hideModal()
    }, this.context.t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      className: "hide-token-confirmation__button",
      "data-testid": "hide-token-confirmation__hide",
      onClick: () => {
        hideToken(address);
        history.push(_routes.DEFAULT_ROUTE);
      }
    }, this.context.t('hide')))));
  }
}
_defineProperty(HideTokenConfirmationModal, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(HideTokenConfirmationModal, "propTypes", {
  hideToken: _propTypes.default.func.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  token: _propTypes.default.shape({
    symbol: _propTypes.default.string,
    address: _propTypes.default.string,
    image: _propTypes.default.string
  }),
  history: _propTypes.default.object
});
var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(HideTokenConfirmationModal);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\hide-token-confirmation-modal\\hide-token-confirmation-modal.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\hide-token-confirmation-modal\\index.js", {"./hide-token-confirmation-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\hide-token-confirmation-modal\\hide-token-confirmation-modal.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Chide-token-confirmation-modal%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _hideTokenConfirmationModal.default;
  }
});
var _hideTokenConfirmationModal = _interopRequireDefault(require("./hide-token-confirmation-modal"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\hide-token-confirmation-modal\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\hold-to-reveal-modal\\hold-to-reveal-modal.js", {"../../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../../contexts/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\metametrics.js","../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/constants/zendesk-url":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\zendesk-url.js","../../../../helpers/higher-order-components/with-modal-props":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../hold-to-reveal-button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\hold-to-reveal-button\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Chold-to-reveal-modal%5Chold-to-reveal-modal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _componentLibrary = require("../../../component-library");
var _designSystem = require("../../../../helpers/constants/design-system");
var _holdToRevealButton = _interopRequireDefault(require("../../hold-to-reveal-button"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _zendeskUrl = _interopRequireDefault(require("../../../../helpers/constants/zendesk-url"));
var _metametrics = require("../../../../contexts/metametrics");
var _metametrics2 = require("../../../../../shared/constants/metametrics");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const HoldToRevealModal = ({
  onLongPressed,
  hideModal,
  willHide = true,
  holdToRevealType = 'SRP'
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const holdToRevealTitle = holdToRevealType === 'SRP' ? 'holdToRevealSRPTitle' : 'holdToRevealPrivateKeyTitle';
  const holdToRevealButton = holdToRevealType === 'SRP' ? 'holdToRevealSRP' : 'holdToRevealPrivateKey';
  const trackEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const unlock = () => {
    onLongPressed();
    if (willHide) {
      hideModal();
    }
  };
  const handleCancel = () => {
    hideModal();
  };
  const renderHoldToRevealPrivateKeyContent = () => {
    return /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
      gap: 4,
      marginBottom: 6
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodyMd
    }, t('holdToRevealContentPrivateKey1', [/*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      key: "hold-to-reveal-2",
      variant: _designSystem.TextVariant.bodyMdBold,
      as: "span"
    }, t('holdToRevealContentPrivateKey2'))])), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodyMdBold
    }, t('holdToRevealContent3', [/*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      key: "hold-to-reveal-4",
      variant: _designSystem.TextVariant.bodyMd,
      as: "span",
      display: _designSystem.DISPLAY.INLINE
    }, t('holdToRevealContent4')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
      key: "hold-to-reveal-5",
      variant: _componentLibrary.BUTTON_VARIANT.LINK,
      size: _componentLibrary.BUTTON_SIZES.INHERIT,
      href: _zendeskUrl.default.NON_CUSTODIAL_WALLET,
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('holdToRevealContent5'))])));
  };
  const renderHoldToRevealSRPContent = () => {
    return /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
      gap: 4,
      marginBottom: 6
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodyMd
    }, t('holdToRevealContent1', [/*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      key: "hold-to-reveal-2",
      variant: _designSystem.TextVariant.bodyMdBold,
      as: "span"
    }, t('holdToRevealContent2'))])), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      variant: _designSystem.TextVariant.bodyMdBold
    }, t('holdToRevealContent3', [/*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
      key: "hold-to-reveal-4",
      variant: _designSystem.TextVariant.bodyMd,
      as: "span",
      display: _designSystem.DISPLAY.INLINE
    }, t('holdToRevealContent4')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
      key: "hold-to-reveal-5",
      variant: _componentLibrary.BUTTON_VARIANT.LINK,
      size: _designSystem.Size.auto,
      href: _zendeskUrl.default.NON_CUSTODIAL_WALLET,
      target: "_blank",
      rel: "noopener noreferrer"
    }, t('holdToRevealContent5'))])));
  };
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "hold-to-reveal-modal",
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    justifyContent: _designSystem.JustifyContent.flexStart,
    padding: 6
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    alignItems: _designSystem.AlignItems.center,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    marginBottom: 6
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.headingSm
  }, t(holdToRevealTitle)), willHide && /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    className: "hold-to-reveal-modal__close",
    iconName: _componentLibrary.IconName.Close,
    size: _designSystem.Size.SM,
    onClick: () => {
      trackEvent({
        category: _metametrics2.MetaMetricsEventCategory.Keys,
        event: _metametrics2.MetaMetricsEventName.SrpHoldToRevealCloseClicked,
        properties: {
          key_type: _metametrics2.MetaMetricsEventKeyType.Srp
        }
      });
      handleCancel();
    },
    ariaLabel: t('close')
  })), holdToRevealType === 'SRP' ? renderHoldToRevealSRPContent() : renderHoldToRevealPrivateKeyContent(), /*#__PURE__*/_react.default.createElement(_holdToRevealButton.default, {
    buttonText: t(holdToRevealButton),
    onLongPressed: unlock,
    marginLeft: "auto",
    marginRight: "auto"
  }));
};
HoldToRevealModal.propTypes = {
  // The function to be executed after the hold to reveal long press has been completed
  onLongPressed: _propTypes.default.func.isRequired,
  hideModal: _propTypes.default.func,
  willHide: _propTypes.default.bool,
  holdToRevealType: _propTypes.default.oneOf(['SRP', 'PrivateKey']).isRequired
};
var _default = (0, _withModalProps.default)(HoldToRevealModal);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\hold-to-reveal-modal\\hold-to-reveal-modal.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\hold-to-reveal-modal\\index.js", {"./hold-to-reveal-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\hold-to-reveal-modal\\hold-to-reveal-modal.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Chold-to-reveal-modal%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _holdToRevealModal.default;
  }
});
var _holdToRevealModal = _interopRequireDefault(require("./hold-to-reveal-modal"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\hold-to-reveal-modal\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\index.js", {"./modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\modal.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Modal", {
  enumerable: true,
  get: function () {
    return _modal.default;
  }
});
var _modal = _interopRequireDefault(require("./modal"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\modal.js", {"../../../../app/scripts/lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../helpers/utils/is-mobile-view":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\is-mobile-view.js","../../../pages/onboarding-flow/add-network-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\pages\\onboarding-flow\\add-network-modal\\index.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","./account-details-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\account-details-modal\\index.js","./confirm-delete-network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-delete-network\\index.js","./confirm-remove-account":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-remove-account\\index.js","./confirm-reset-account":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\confirm-reset-account\\index.js","./convert-token-to-nft-modal/convert-token-to-nft-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\convert-token-to-nft-modal\\convert-token-to-nft-modal.js","./customize-nonce":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\customize-nonce\\index.js","./edit-approval-permission":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\edit-approval-permission\\index.js","./eth-sign-modal/eth-sign-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\eth-sign-modal\\eth-sign-modal.js","./export-private-key-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\export-private-key-modal\\index.js","./fade-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\fade-modal.js","./hide-token-confirmation-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\hide-token-confirmation-modal\\index.js","./hold-to-reveal-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\hold-to-reveal-modal\\index.js","./new-account-modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\new-account-modal\\index.js","./qr-scanner":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\qr-scanner\\index.js","./reject-transactions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\reject-transactions\\index.js","./transaction-confirmed":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\transaction-confirmed\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cmodal.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var actions = _interopRequireWildcard(require("../../../store/actions"));
var _isMobileView = _interopRequireDefault(require("../../../helpers/utils/is-mobile-view"));
var _util = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _addNetworkModal = _interopRequireDefault(require("../../../pages/onboarding-flow/add-network-modal"));
var _accountDetailsModal = _interopRequireDefault(require("./account-details-modal"));
var _exportPrivateKeyModal = _interopRequireDefault(require("./export-private-key-modal"));
var _hideTokenConfirmationModal = _interopRequireDefault(require("./hide-token-confirmation-modal"));
var _qrScanner = _interopRequireDefault(require("./qr-scanner"));
var _holdToRevealModal = _interopRequireDefault(require("./hold-to-reveal-modal"));
var _confirmRemoveAccount = _interopRequireDefault(require("./confirm-remove-account"));
var _confirmResetAccount = _interopRequireDefault(require("./confirm-reset-account"));
var _transactionConfirmed = _interopRequireDefault(require("./transaction-confirmed"));
var _fadeModal = _interopRequireDefault(require("./fade-modal"));
var _rejectTransactions = _interopRequireDefault(require("./reject-transactions"));
var _confirmDeleteNetwork = _interopRequireDefault(require("./confirm-delete-network"));
var _editApprovalPermission = _interopRequireDefault(require("./edit-approval-permission"));
var _newAccountModal = _interopRequireDefault(require("./new-account-modal"));
var _customizeNonce = _interopRequireDefault(require("./customize-nonce"));
var _convertTokenToNftModal = _interopRequireDefault(require("./convert-token-to-nft-modal/convert-token-to-nft-modal"));
var _ethSignModal = _interopRequireDefault(require("./eth-sign-modal/eth-sign-modal"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } // Modal Components
const modalContainerBaseStyle = {
  transform: 'translate3d(-50%, 0, 0px)',
  border: '1px solid var(--color-border-default)',
  borderRadius: '8px',
  backgroundColor: 'var(--color-background-default)',
  boxShadow: 'var(--shadow-size-sm) var(--color-shadow-default)'
};
const modalContainerLaptopStyle = {
  ...modalContainerBaseStyle,
  width: '344px',
  top: '15%'
};
const modalContainerMobileStyle = {
  ...modalContainerBaseStyle,
  width: '309px',
  top: '12.5%'
};
const accountModalStyle = {
  mobileModalStyle: {
    width: '95%',
    // top: isPopupOrNotification() === 'popup' ? '52vh' : '36.5vh',
    boxShadow: 'var(--shadow-size-xs) var(--color-shadow-default)',
    borderRadius: '4px',
    top: '10%',
    transform: 'none',
    left: '0',
    right: '0',
    margin: '0 auto'
  },
  laptopModalStyle: {
    width: '335px',
    // top: 'calc(33% + 45px)',
    boxShadow: 'var(--shadow-size-xs) var(--color-shadow-default)',
    borderRadius: '4px',
    top: '10%',
    transform: 'none',
    left: '0',
    right: '0',
    margin: '0 auto'
  },
  contentStyle: {
    borderRadius: '4px'
  }
};
const MODALS = {
  ONBOARDING_ADD_NETWORK: {
    contents: /*#__PURE__*/_react.default.createElement(_addNetworkModal.default, null),
    ...accountModalStyle
  },
  NEW_ACCOUNT: {
    contents: /*#__PURE__*/_react.default.createElement(_newAccountModal.default, null),
    mobileModalStyle: {
      width: '95%',
      top: '10%',
      boxShadow: 'var(--shadow-size-xs) var(--color-shadow-default)',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto',
      borderRadius: '10px'
    },
    laptopModalStyle: {
      width: '375px',
      top: '10%',
      boxShadow: 'var(--shadow-size-xs) var(--color-shadow-default)',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto',
      borderRadius: '10px'
    },
    contentStyle: {
      borderRadius: '10px'
    }
  },
  ACCOUNT_DETAILS: {
    contents: /*#__PURE__*/_react.default.createElement(_accountDetailsModal.default, null),
    ...accountModalStyle
  },
  EXPORT_PRIVATE_KEY: {
    contents: /*#__PURE__*/_react.default.createElement(_exportPrivateKeyModal.default, null),
    ...accountModalStyle
  },
  HOLD_TO_REVEAL_SRP: {
    contents: /*#__PURE__*/_react.default.createElement(_holdToRevealModal.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  HIDE_TOKEN_CONFIRMATION: {
    contents: /*#__PURE__*/_react.default.createElement(_hideTokenConfirmationModal.default, null),
    mobileModalStyle: {
      width: '95%',
      top: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '52vh' : '36.5vh'
    },
    laptopModalStyle: {
      width: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '357px' : '449px',
      top: 'calc(33% + 45px)',
      paddingLeft: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '16px' : null,
      paddingRight: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '16px' : null
    }
  },
  CONFIRM_RESET_ACCOUNT: {
    contents: /*#__PURE__*/_react.default.createElement(_confirmResetAccount.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  ETH_SIGN: {
    contents: /*#__PURE__*/_react.default.createElement(_ethSignModal.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CONFIRM_REMOVE_ACCOUNT: {
    contents: /*#__PURE__*/_react.default.createElement(_confirmRemoveAccount.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CONVERT_TOKEN_TO_NFT: {
    contents: /*#__PURE__*/_react.default.createElement(_convertTokenToNftModal.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CONFIRM_DELETE_NETWORK: {
    contents: /*#__PURE__*/_react.default.createElement(_confirmDeleteNetwork.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  EDIT_APPROVAL_PERMISSION: {
    contents: /*#__PURE__*/_react.default.createElement(_editApprovalPermission.default, null),
    mobileModalStyle: {
      width: '95vw',
      height: '100vh',
      top: '50px',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto'
    },
    laptopModalStyle: {
      width: 'auto',
      height: '0px',
      top: '80px',
      left: '0px',
      transform: 'none',
      margin: '0 auto',
      position: 'relative'
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  TRANSACTION_CONFIRMED: {
    disableBackdropClick: true,
    contents: /*#__PURE__*/_react.default.createElement(_transactionConfirmed.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  QR_SCANNER: {
    contents: /*#__PURE__*/_react.default.createElement(_qrScanner.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  REJECT_TRANSACTIONS: {
    contents: /*#__PURE__*/_react.default.createElement(_rejectTransactions.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CUSTOMIZE_NONCE: {
    contents: /*#__PURE__*/_react.default.createElement(_customizeNonce.default, null),
    mobileModalStyle: {
      ...modalContainerMobileStyle
    },
    laptopModalStyle: {
      ...modalContainerLaptopStyle
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  DEFAULT: {
    contents: [],
    mobileModalStyle: {},
    laptopModalStyle: {}
  }
};
const BACKDROPSTYLE = {
  backgroundColor: 'var(--color-overlay-default)'
};
function mapStateToProps(state) {
  return {
    active: state.appState.modal.open,
    modalState: state.appState.modal.modalState
  };
}
function mapDispatchToProps(dispatch) {
  return {
    hideModal: customOnHideOpts => {
      dispatch(actions.hideModal());
      if (customOnHideOpts && customOnHideOpts.action) {
        dispatch(customOnHideOpts.action(...customOnHideOpts.args));
      }
    },
    hideWarning: () => {
      dispatch(actions.hideWarning());
    }
  };
}
class Modal extends _react.Component {
  hide() {
    this.modalRef.hide();
  }
  show() {
    this.modalRef.show();
  }
  UNSAFE_componentWillReceiveProps(nextProps, _) {
    if (nextProps.active) {
      this.show();
    } else if (this.props.active) {
      this.hide();
    }
  }
  render() {
    const modal = MODALS[this.props.modalState.name || 'DEFAULT'];
    const {
      contents: children,
      disableBackdropClick = false
    } = modal;
    const modalStyle = modal[(0, _isMobileView.default)() ? 'mobileModalStyle' : 'laptopModalStyle'];
    const contentStyle = modal.contentStyle || {};
    return /*#__PURE__*/_react.default.createElement(_fadeModal.default, {
      keyboard: false,
      onHide: () => {
        if (modal.onHide) {
          modal.onHide({
            hideWarning: this.props.hideWarning
          });
        }
        this.props.hideModal(modal.customOnHideOpts);
      },
      ref: ref => {
        this.modalRef = ref;
      },
      modalStyle: modalStyle,
      contentStyle: contentStyle,
      backdropStyle: BACKDROPSTYLE,
      closeOnClick: !disableBackdropClick
    }, children);
  }
}
_defineProperty(Modal, "propTypes", {
  active: _propTypes.default.bool.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  hideWarning: _propTypes.default.func.isRequired,
  modalState: _propTypes.default.object.isRequired
});
var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Modal);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\modal.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\new-account-modal\\index.js", {"./new-account-modal.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\new-account-modal\\new-account-modal.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cnew-account-modal%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _newAccountModal.default;
  }
});
var _newAccountModal = _interopRequireDefault(require("./new-account-modal.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\new-account-modal\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\new-account-modal\\new-account-modal.component.js", {"../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/button/button.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\button.component.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cnew-account-modal%5Cnew-account-modal.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _button = _interopRequireDefault(require("../../../ui/button/button.component"));
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class NewAccountModal extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      alias: this.context.t('newAccountNumberName', [this.props.newAccountNumber])
    });
    _defineProperty(this, "onChange", e => {
      this.setState({
        alias: e.target.value
      });
    });
    _defineProperty(this, "onSubmit", () => {
      this.props.onSave(this.state.alias).then(this.props.hideModal);
    });
    _defineProperty(this, "onKeyPress", e => {
      if (e.key === 'Enter' && this.state.alias) {
        this.onSubmit();
      }
    });
  }
  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__content__header"
    }, t('newAccount'), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
      className: "new-account-modal__content__header-close",
      ariaLabel: t('close'),
      onClick: this.props.hideModal,
      iconName: _componentLibrary.IconName.Close
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__input-label"
    }, t('accountName')), /*#__PURE__*/_react.default.createElement("input", {
      type: "text",
      className: "new-account-modal__input",
      onChange: this.onChange,
      onKeyPress: this.onKeyPress,
      value: this.state.alias,
      autoFocus: true
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-modal__footer"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      onClick: this.props.hideModal
    }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: this.onSubmit,
      disabled: !this.state.alias
    }, t('save'))));
  }
}
exports.default = NewAccountModal;
_defineProperty(NewAccountModal, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(NewAccountModal, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  newAccountNumber: _propTypes.default.number.isRequired,
  onSave: _propTypes.default.func.isRequired
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\new-account-modal\\new-account-modal.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\new-account-modal\\new-account-modal.container.js", {"../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","./new-account-modal.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\new-account-modal\\new-account-modal.component.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cnew-account-modal%5Cnew-account-modal.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var actions = _interopRequireWildcard(require("../../../../store/actions"));
var _newAccountModal = _interopRequireDefault(require("./new-account-modal.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function mapStateToProps(state) {
  return {
    ...(state.appState.modal.modalState.props || {})
  };
}
function mapDispatchToProps(dispatch) {
  return {
    hideModal: () => dispatch(actions.hideModal()),
    createAccount: newAccountName => {
      return dispatch(actions.addNewAccount()).then(newAccountAddress => {
        if (newAccountName) {
          dispatch(actions.setAccountLabel(newAccountAddress, newAccountName));
        }
        return newAccountAddress;
      });
    }
  };
}
function mergeProps(stateProps, dispatchProps) {
  const {
    onCreateNewAccount
  } = stateProps;
  const {
    createAccount
  } = dispatchProps;
  return {
    ...stateProps,
    ...dispatchProps,
    onSave: newAccountName => {
      return createAccount(newAccountName).then(newAccountAddress => onCreateNewAccount(newAccountAddress));
    }
  };
}
var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(_newAccountModal.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\new-account-modal\\new-account-modal.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\nickname-popovers\\index.js", {"./nickname-popovers.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\nickname-popovers\\nickname-popovers.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cnickname-popovers%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _nicknamePopovers.default;
  }
});
var _nicknamePopovers = _interopRequireDefault(require("./nickname-popovers.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\nickname-popovers\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\nickname-popovers\\nickname-popovers.component.js", {"../../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../../ui/nickname-popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\nickname-popover\\index.js","../../../ui/update-nickname-popover/update-nickname-popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\update-nickname-popover\\update-nickname-popover.js","@metamask/etherscan-link":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\etherscan-link\\dist\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cnickname-popovers%5Cnickname-popovers.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _etherscanLink = require("@metamask/etherscan-link");
var _actions = require("../../../../store/actions");
var _selectors = require("../../../../selectors");
var _nicknamePopover = _interopRequireDefault(require("../../../ui/nickname-popover"));
var _updateNicknamePopover = _interopRequireDefault(require("../../../ui/update-nickname-popover/update-nickname-popover"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const SHOW_NICKNAME_POPOVER = 'SHOW_NICKNAME_POPOVER';
const ADD_NICKNAME_POPOVER = 'ADD_NICKNAME_POPOVER';
const NicknamePopovers = ({
  address,
  onClose
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const [popoverToDisplay, setPopoverToDisplay] = (0, _react.useState)(SHOW_NICKNAME_POPOVER);
  const addressBook = (0, _reactRedux.useSelector)(_selectors.getAddressBook);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const addressBookEntryObject = addressBook.find(entry => entry.address === address);
  const recipientNickname = addressBookEntryObject === null || addressBookEntryObject === void 0 ? void 0 : addressBookEntryObject.name;
  const rpcPrefs = (0, _reactRedux.useSelector)(_selectors.getRpcPrefsForCurrentProvider);
  const explorerLink = (0, _etherscanLink.getAccountLink)(address, chainId, {
    blockExplorerUrl: (rpcPrefs === null || rpcPrefs === void 0 ? void 0 : rpcPrefs.blockExplorerUrl) ?? null
  }, null);
  if (popoverToDisplay === ADD_NICKNAME_POPOVER) {
    return /*#__PURE__*/_react.default.createElement(_updateNicknamePopover.default, {
      address: address,
      nickname: recipientNickname || null,
      memo: (addressBookEntryObject === null || addressBookEntryObject === void 0 ? void 0 : addressBookEntryObject.memo) || null,
      onClose: () => setPopoverToDisplay(SHOW_NICKNAME_POPOVER),
      onAdd: (recipient, nickname, memo) => dispatch((0, _actions.addToAddressBook)(recipient, nickname, memo))
    });
  }

  // SHOW_NICKNAME_POPOVER case
  return /*#__PURE__*/_react.default.createElement(_nicknamePopover.default, {
    address: address,
    nickname: recipientNickname || null,
    onClose: onClose,
    onAdd: () => setPopoverToDisplay(ADD_NICKNAME_POPOVER),
    explorerLink: explorerLink
  });
};
NicknamePopovers.propTypes = {
  address: _propTypes.default.string,
  onClose: _propTypes.default.func
};
var _default = NicknamePopovers;
exports.default = _default;


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\nickname-popovers\\nickname-popovers.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\qr-scanner\\index.js", {"./qr-scanner.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\qr-scanner\\qr-scanner.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cqr-scanner%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _qrScanner = _interopRequireDefault(require("./qr-scanner.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _qrScanner.default;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\qr-scanner\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\qr-scanner\\qr-scanner.component.js", {"../../../../../app/scripts/lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","../../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../../../shared/constants/time":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\time.ts","../../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../../helpers/utils/webcam-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\webcam-utils.js","../../../ui/page-container/page-container-footer/page-container-footer.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\page-container\\page-container-footer\\page-container-footer.component.js","../../../ui/spinner":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\spinner\\index.js","@zxing/library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@zxing\\library\\umd\\index.min.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cqr-scanner%5Cqr-scanner.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _library = require("@zxing/library");
var _util = require("../../../../../app/scripts/lib/util");
var _app = require("../../../../../shared/constants/app");
var _time = require("../../../../../shared/constants/time");
var _spinner = _interopRequireDefault(require("../../../ui/spinner"));
var _webcamUtils = _interopRequireDefault(require("../../../../helpers/utils/webcam-utils"));
var _util2 = require("../../../../helpers/utils/util");
var _pageContainerFooter = _interopRequireDefault(require("../../../ui/page-container/page-container-footer/page-container-footer.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const READY_STATE = {
  ACCESSING_CAMERA: 'ACCESSING_CAMERA',
  NEED_TO_ALLOW_ACCESS: 'NEED_TO_ALLOW_ACCESS',
  READY: 'READY'
};
class QrScanner extends _react.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "checkEnvironment", async () => {
      try {
        const {
          environmentReady
        } = await _webcamUtils.default.checkStatus();
        if (!environmentReady && (0, _util.getEnvironmentType)() !== _app.ENVIRONMENT_TYPE_FULLSCREEN) {
          const currentUrl = (0, _util2.getURL)(window.location.href);
          const currentHash = currentUrl === null || currentUrl === void 0 ? void 0 : currentUrl.hash;
          const currentRoute = currentHash ? currentHash.substring(1) : null;
          global.platform.openExtensionInBrowser(currentRoute);
        }
      } catch (error) {
        if (this.mounted) {
          this.setState({
            error
          });
        }
      }
      // initial attempt is required to trigger permission prompt
      this.initCamera();
    });
    _defineProperty(this, "checkPermissions", async () => {
      try {
        const {
          permissions
        } = await _webcamUtils.default.checkStatus();
        if (permissions) {
          // Let the video stream load first...
          await new Promise(resolve => setTimeout(resolve, _time.SECOND * 2));
          if (!this.mounted) {
            return;
          }
          this.setState({
            ready: READY_STATE.READY
          });
        } else if (this.mounted) {
          // Keep checking for permissions
          this.permissionChecker = setTimeout(this.checkPermissions, _time.SECOND);
        }
      } catch (error) {
        if (this.mounted) {
          this.setState({
            error
          });
        }
      }
    });
    _defineProperty(this, "initCamera", async () => {
      // The `decodeFromInputVideoDevice` call prompts the browser to show
      // the user the camera permission request.  We must then call it again
      // once we receive permission so that the video displays.
      // It's important to prevent this codeReader from being created twice;
      // Firefox otherwise starts 2 video streams, one of which cannot be stopped
      if (!this.codeReader) {
        this.codeReader = new _library.BrowserQRCodeReader();
      }
      try {
        await this.codeReader.getVideoInputDevices();
        this.checkPermissions();
        const content = await this.codeReader.decodeFromInputVideoDevice(undefined, 'video');
        const result = this.parseContent(content.text);
        if (!this.mounted) {
          return;
        } else if (result.type === 'unknown') {
          this.setState({
            error: new Error(this.context.t('unknownQrCode'))
          });
        } else {
          this.props.qrCodeDetected(result);
          this.stopAndClose();
        }
      } catch (error) {
        if (!this.mounted) {
          return;
        }
        if (error.name === 'NotAllowedError') {
          _loglevel.default.info(`Permission denied: '${error}'`);
          this.setState({
            ready: READY_STATE.NEED_TO_ALLOW_ACCESS
          });
        } else {
          this.setState({
            error
          });
        }
      }
    });
    _defineProperty(this, "stopAndClose", () => {
      if (this.codeReader) {
        this.teardownCodeReader();
      }
      this.props.hideModal();
    });
    _defineProperty(this, "tryAgain", () => {
      clearTimeout(this.permissionChecker);
      if (this.codeReader) {
        this.teardownCodeReader();
      }
      this.setState(this.getInitialState(), () => {
        this.checkEnvironment();
      });
    });
    this.state = this.getInitialState();
    this.codeReader = null;
    this.permissionChecker = null;
    this.mounted = false;

    // Clear pre-existing qr code data before scanning
    this.props.qrCodeDetected(null);
  }
  componentDidMount() {
    this.mounted = true;
    this.checkEnvironment();
  }
  componentDidUpdate(_, prevState) {
    const {
      ready
    } = this.state;
    if (prevState.ready !== ready) {
      if (ready === READY_STATE.READY) {
        this.initCamera();
      } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
        this.checkPermissions();
      }
    }
  }
  getInitialState() {
    return {
      ready: READY_STATE.ACCESSING_CAMERA,
      error: null
    };
  }
  componentWillUnmount() {
    this.mounted = false;
    clearTimeout(this.permissionChecker);
    this.teardownCodeReader();
  }
  teardownCodeReader() {
    if (this.codeReader) {
      this.codeReader.reset();
      this.codeReader.stop();
      this.codeReader = null;
    }
  }
  parseContent(content) {
    let type = 'unknown';
    let values = {};

    // Here we could add more cases
    // To parse other type of links
    // For ex. EIP-681 (https://eips.ethereum.org/EIPS/eip-681)

    // Ethereum address links - fox ex. ethereum:0x.....1111
    if (content.split('ethereum:').length > 1) {
      type = 'address';
      values = {
        address: content.split('ethereum:')[1]
      };

      // Regular ethereum addresses - fox ex. 0x.....1111
    } else if (content.substring(0, 2).toLowerCase() === '0x') {
      type = 'address';
      values = {
        address: content
      };
    }
    return {
      type,
      values
    };
  }
  renderError() {
    const {
      t
    } = this.context;
    const {
      error
    } = this.state;
    let title, msg;
    if (error.type === 'NO_WEBCAM_FOUND') {
      title = t('noWebcamFoundTitle');
      msg = t('noWebcamFound');
    } else if (error.message === t('unknownQrCode')) {
      msg = t('unknownQrCode');
    } else {
      title = t('unknownCameraErrorTitle');
      msg = t('unknownCameraError');
    }
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__image"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/webcam.svg",
      width: "70",
      height: "70",
      alt: ""
    })), title ? /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__title"
    }, title) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__error"
    }, msg), /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      onCancel: this.stopAndClose,
      onSubmit: this.tryAgain,
      cancelText: t('cancel'),
      submitText: t('tryAgain')
    }));
  }
  renderVideo() {
    const {
      t
    } = this.context;
    const {
      ready
    } = this.state;
    let message;
    if (ready === READY_STATE.ACCESSING_CAMERA) {
      message = t('accessingYourCamera');
    } else if (ready === READY_STATE.READY) {
      message = t('scanInstructions');
    } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
      message = t('youNeedToAllowCameraAccess');
    }
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__title"
    }, `${t('scanQrCode')}`), /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__content__video-wrapper"
    }, /*#__PURE__*/_react.default.createElement("video", {
      id: "video",
      style: {
        display: ready === READY_STATE.READY ? 'block' : 'none'
      }
    }), ready === READY_STATE.READY ? null : /*#__PURE__*/_react.default.createElement(_spinner.default, {
      color: "var(--color-warning-default)"
    }))), /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__status"
    }, message));
  }
  render() {
    const {
      error
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__close",
      onClick: this.stopAndClose
    }), error ? this.renderError() : this.renderVideo());
  }
}
exports.default = QrScanner;
_defineProperty(QrScanner, "propTypes", {
  hideModal: _propTypes.default.func.isRequired,
  qrCodeDetected: _propTypes.default.func.isRequired
});
_defineProperty(QrScanner, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\qr-scanner\\qr-scanner.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\qr-scanner\\qr-scanner.container.js", {"../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","./qr-scanner.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\qr-scanner\\qr-scanner.component.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Cqr-scanner%5Cqr-scanner.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _actions = require("../../../../store/actions");
var _qrScanner = _interopRequireDefault(require("./qr-scanner.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapDispatchToProps = dispatch => {
  return {
    hideModal: () => dispatch((0, _actions.hideModal)()),
    qrCodeDetected: data => dispatch((0, _actions.qrCodeDetected)(data))
  };
};
var _default = (0, _reactRedux.connect)(null, mapDispatchToProps)(_qrScanner.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\qr-scanner\\qr-scanner.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\reject-transactions\\index.js", {"./reject-transactions.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\reject-transactions\\reject-transactions.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Creject-transactions%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _rejectTransactions.default;
  }
});
var _rejectTransactions = _interopRequireDefault(require("./reject-transactions.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\reject-transactions\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\reject-transactions\\reject-transactions.component.js", {"../../modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Creject-transactions%5Creject-transactions.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _modal = _interopRequireDefault(require("../../modal"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class RejectTransactionsModal extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "onSubmit", async () => {
      const {
        onSubmit,
        hideModal
      } = this.props;
      await onSubmit();
      hideModal();
    });
  }
  render() {
    const {
      t
    } = this.context;
    const {
      hideModal,
      unapprovedTxCount,
      isRequestType
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      headerText: isRequestType ? t('rejectRequestsN', [unapprovedTxCount]) : t('rejectTxsN', [unapprovedTxCount]),
      onClose: hideModal,
      onSubmit: this.onSubmit,
      onCancel: hideModal,
      submitText: t('rejectAll'),
      cancelText: t('cancel')
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", {
      className: "reject-transactions__description"
    }, isRequestType ? t('rejectRequestsDescription', [unapprovedTxCount]) : t('rejectTxsDescription', [unapprovedTxCount]))));
  }
}
exports.default = RejectTransactionsModal;
_defineProperty(RejectTransactionsModal, "contextTypes", {
  t: _propTypes.default.func.isRequired
});
_defineProperty(RejectTransactionsModal, "propTypes", {
  onSubmit: _propTypes.default.func.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  unapprovedTxCount: _propTypes.default.number.isRequired,
  isRequestType: _propTypes.default.bool
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\reject-transactions\\reject-transactions.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\reject-transactions\\reject-transactions.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","./reject-transactions.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\reject-transactions\\reject-transactions.component.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Creject-transactions%5Creject-transactions.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _rejectTransactions = _interopRequireDefault(require("./reject-transactions.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = (_, ownProps) => {
  const {
    unapprovedTxCount
  } = ownProps;
  return {
    unapprovedTxCount
  };
};
var _default = (0, _redux.compose)(_withModalProps.default, (0, _reactRedux.connect)(mapStateToProps))(_rejectTransactions.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\reject-transactions\\reject-transactions.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\transaction-confirmed\\index.js", {"./transaction-confirmed.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Ctransaction-confirmed%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _transactionConfirmed.default;
  }
});
var _transactionConfirmed = _interopRequireDefault(require("./transaction-confirmed.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\transaction-confirmed\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.component.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../modal":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modal\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Ctransaction-confirmed%5Ctransaction-confirmed.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _modal = _interopRequireDefault(require("../../modal"));
var _componentLibrary = require("../../../component-library");
var _designSystem = require("../../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class TransactionConfirmed extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "handleSubmit", () => {
      const {
        hideModal,
        onSubmit
      } = this.props;
      hideModal();
      if (onSubmit && typeof onSubmit === 'function') {
        onSubmit();
      }
    });
  }
  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_modal.default, {
      onSubmit: this.handleSubmit,
      submitText: t('ok')
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-confirmed__content"
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: _componentLibrary.IconName.Check,
      color: _designSystem.IconColor.successDefault,
      size: _componentLibrary.IconSize.Xl
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-confirmed__title"
    }, `${t('confirmed')}!`), /*#__PURE__*/_react.default.createElement("div", {
      className: "transaction-confirmed__description"
    }, t('initialTransactionConfirmed'))));
  }
}
exports.default = TransactionConfirmed;
_defineProperty(TransactionConfirmed, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(TransactionConfirmed, "propTypes", {
  onSubmit: _propTypes.default.func,
  hideModal: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.container.js", {"../../../../helpers/higher-order-components/with-modal-props":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\higher-order-components\\with-modal-props\\index.js","./transaction-confirmed.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmodals%5Ctransaction-confirmed%5Ctransaction-confirmed.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _withModalProps = _interopRequireDefault(require("../../../../helpers/higher-order-components/with-modal-props"));
var _transactionConfirmed = _interopRequireDefault(require("./transaction-confirmed.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = (0, _withModalProps.default)(_transactionConfirmed.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\modals\\transaction-confirmed\\transaction-confirmed.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\multilayer-fee-message\\index.js", {"./multi-layer-fee-message":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\multilayer-fee-message\\multi-layer-fee-message.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmultilayer-fee-message%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _multiLayerFeeMessage.default;
  }
});
var _multiLayerFeeMessage = _interopRequireDefault(require("./multi-layer-fee-message"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\multilayer-fee-message\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\multilayer-fee-message\\multi-layer-fee-message.js", {"../../../../shared/constants/common":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\common.ts","../../../../shared/modules/Numeric":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\Numeric.ts","../../../../shared/modules/conversion.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\conversion.utils.ts","../../../contexts/i18n":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\i18n.js","../../../helpers/constants/common":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\common.ts","../../../helpers/utils/optimism/fetchEstimatedL1Fee":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\optimism\\fetchEstimatedL1Fee.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../transaction-detail-item/transaction-detail-item.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\transaction-detail-item\\transaction-detail-item.component.js","../user-preferenced-currency-display":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\user-preferenced-currency-display\\index.js","@sentry/browser":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@sentry\\browser\\dist\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmultilayer-fee-message%5Cmulti-layer-fee-message.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MultilayerFeeMessage;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _browser = require("@sentry/browser");
var _transactionDetailItem = _interopRequireDefault(require("../transaction-detail-item/transaction-detail-item.component"));
var _userPreferencedCurrencyDisplay = _interopRequireDefault(require("../user-preferenced-currency-display"));
var _fetchEstimatedL1Fee = _interopRequireDefault(require("../../../helpers/utils/optimism/fetchEstimatedL1Fee"));
var _common = require("../../../helpers/constants/common");
var _i18n = require("../../../contexts/i18n");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _common2 = require("../../../../shared/constants/common");
var _Numeric = require("../../../../shared/modules/Numeric");
var _selectors = require("../../../selectors");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function MultilayerFeeMessage({
  transaction,
  layer2fee,
  nativeCurrency,
  plainStyle
}) {
  var _transaction$txParams;
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [fetchedLayer1Total, setLayer1Total] = (0, _react.useState)(null);
  const useCurrencyRateCheck = (0, _reactRedux.useSelector)(_selectors.getUseCurrencyRateCheck);
  (0, _react.useEffect)(() => {
    if (!(transaction !== null && transaction !== void 0 && transaction.txParams)) {
      return;
    }
    const getEstimatedL1Fee = async () => {
      try {
        const result = await (0, _fetchEstimatedL1Fee.default)(transaction === null || transaction === void 0 ? void 0 : transaction.chainId, transaction);
        setLayer1Total(result);
      } catch (e) {
        (0, _browser.captureException)(e);
        setLayer1Total(null);
      }
    };
    getEstimatedL1Fee();
  }, [transaction]);
  if (!(transaction !== null && transaction !== void 0 && transaction.txParams)) {
    return null;
  }
  let layer1Total = t('unknown');
  let feeTotalInFiat = t('unknown');
  if (fetchedLayer1Total !== null) {
    const layer1TotalBN = new _Numeric.Numeric(fetchedLayer1Total, 16, _common2.EtherDenomination.WEI);
    layer1Total = `${layer1TotalBN.toDenomination(_common2.EtherDenomination.ETH).toFixed(12)} ${nativeCurrency}`;
    feeTotalInFiat = useCurrencyRateCheck ? /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
      type: _common.SECONDARY,
      value: fetchedLayer1Total,
      showFiat: true,
      hideLabel: true
    }) : null;
  }
  const totalInWeiHex = (0, _conversion.sumHexes)(layer2fee || '0x0', fetchedLayer1Total || '0x0', (transaction === null || transaction === void 0 ? void 0 : (_transaction$txParams = transaction.txParams) === null || _transaction$txParams === void 0 ? void 0 : _transaction$txParams.value) || '0x0');
  const totalBN = new _Numeric.Numeric(totalInWeiHex, 16, _common2.EtherDenomination.WEI);
  const totalInEth = `${totalBN.toDenomination(_common2.EtherDenomination.ETH).toFixed(12)} ${nativeCurrency}`;
  const totalInFiat = useCurrencyRateCheck ? /*#__PURE__*/_react.default.createElement(_userPreferencedCurrencyDisplay.default, {
    type: _common.SECONDARY,
    value: totalInWeiHex,
    showFiat: true,
    hideLabel: true
  }) : null;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "multi-layer-fee-message"
  }, /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
    key: "multi-layer-fee-message-total-item-gas-fee",
    detailTitle: t('layer1Fees'),
    detailTotal: layer1Total,
    detailText: useCurrencyRateCheck && feeTotalInFiat,
    noBold: plainStyle,
    flexWidthValues: plainStyle
  }), /*#__PURE__*/_react.default.createElement(_transactionDetailItem.default, {
    key: "multi-layer-fee-message-total-item-total",
    detailTitle: t('total'),
    detailTotal: totalInEth,
    detailText: totalInFiat,
    subTitle: t('transactionDetailMultiLayerTotalSubtitle'),
    noBold: plainStyle,
    flexWidthValues: plainStyle
  }));
}
MultilayerFeeMessage.propTypes = {
  transaction: _propTypes.default.object,
  layer2fee: _propTypes.default.string,
  nativeCurrency: _propTypes.default.string,
  plainStyle: _propTypes.default.bool
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\multilayer-fee-message\\multi-layer-fee-message.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\multiple-notifications\\index.js", {"./multiple-notifications.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\multiple-notifications\\multiple-notifications.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmultiple-notifications%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _multipleNotifications.default;
  }
});
var _multipleNotifications = _interopRequireDefault(require("./multiple-notifications.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\multiple-notifications\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\multiple-notifications\\multiple-notifications.component.js", {"classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cmultiple-notifications%5Cmultiple-notifications.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class MultipleNotifications extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      showAll: false
    });
  }
  render() {
    const {
      showAll
    } = this.state;
    const {
      children,
      classNames
    } = this.props;
    const childrenToRender = children.filter(Boolean);
    if (childrenToRender.length === 0) {
      return null;
    }
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)(...classNames, {
        'home-notification-wrapper--show-all': showAll,
        'home-notification-wrapper--show-first': !showAll
      })
    }, childrenToRender, /*#__PURE__*/_react.default.createElement("div", {
      className: "home-notification-wrapper__i-container",
      onClick: () => this.setState({
        showAll: !showAll
      })
    }, childrenToRender.length > 1 ? /*#__PURE__*/_react.default.createElement("i", {
      className: (0, _classnames.default)('fa fa-sm fa-sort-amount', {
        flipped: !showAll
      })
    }) : null));
  }
}
exports.default = MultipleNotifications;
_defineProperty(MultipleNotifications, "defaultProps", {
  children: [],
  classNames: []
});
_defineProperty(MultipleNotifications, "propTypes", {
  children: _propTypes.default.array,
  classNames: _propTypes.default.array
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\multiple-notifications\\multiple-notifications.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\network-account-balance-header\\index.js", {"./network-account-balance-header":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\network-account-balance-header\\network-account-balance-header.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cnetwork-account-balance-header%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networkAccountBalanceHeader.default;
  }
});
var _networkAccountBalanceHeader = _interopRequireDefault(require("./network-account-balance-header"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\network-account-balance-header\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\network-account-balance-header\\network-account-balance-header.js", {"../../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../contexts/i18n":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/box/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\box.js","../../ui/icon-with-fallback":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\icon-with-fallback\\index.js","../../ui/identicon":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\identicon\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cnetwork-account-balance-header%5Cnetwork-account-balance-header.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NetworkAccountBalanceHeader;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _iconWithFallback = _interopRequireDefault(require("../../ui/icon-with-fallback"));
var _identicon = _interopRequireDefault(require("../../ui/identicon"));
var _designSystem = require("../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../ui/box/box"));
var _i18n = require("../../../contexts/i18n");
var _network = require("../../../../shared/constants/network");
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function NetworkAccountBalanceHeader({
  networkName,
  accountName,
  accountBalance,
  tokenName,
  // Derived from nativeCurrency
  accountAddress,
  chainId
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const networkIcon = _network.CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP[chainId];
  const networkIconWrapperClass = networkIcon ? 'network-account-balance-header__network-account__ident-icon-ethereum' : 'network-account-balance-header__network-account__ident-icon-ethereum--gray';
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    padding: 4,
    className: "network-account-balance-header",
    alignItems: _designSystem.AlignItems.center,
    justifyContent: _designSystem.JustifyContent.spaceBetween
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    alignItems: _designSystem.AlignItems.center,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    alignItems: _designSystem.AlignItems.center
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: accountAddress,
    diameter: 32
  }), /*#__PURE__*/_react.default.createElement(_iconWithFallback.default, {
    name: networkName,
    size: 16,
    icon: networkIcon,
    wrapperClassName: networkIconWrapperClass
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.flexStart,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    marginBottom: 0
  }, networkName), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textDefault,
    fontWeight: _designSystem.FontWeight.Bold,
    marginTop: 0
  }, accountName))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.flexEnd,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textAlternative,
    marginBottom: 0
  }, t('balance')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.TextColor.textDefault,
    fontWeight: _designSystem.FontWeight.Bold,
    marginTop: 0,
    align: _designSystem.TextAlign.End
  }, accountBalance, " ", tokenName)));
}
NetworkAccountBalanceHeader.propTypes = {
  networkName: _propTypes.default.string,
  accountName: _propTypes.default.string,
  accountBalance: _propTypes.default.string,
  tokenName: _propTypes.default.string,
  accountAddress: _propTypes.default.string,
  chainId: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\network-account-balance-header\\network-account-balance-header.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\network-display\\index.js", {"./network-display":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\network-display\\network-display.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cnetwork-display%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _networkDisplay.default;
  }
});
var _networkDisplay = _interopRequireDefault(require("./network-display"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\network-display\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\network-display\\network-display.js", {"../../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../ducks/metamask/metamask":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/chip/chip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\chip\\chip.js","../../ui/color-indicator":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\color-indicator\\index.js","../../ui/loading-indicator":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\loading-indicator\\index.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cnetwork-display%5Cnetwork-display.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NetworkDisplay;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactRedux = require("react-redux");
var _network = require("../../../../shared/constants/network");
var _loadingIndicator = _interopRequireDefault(require("../../ui/loading-indicator"));
var _colorIndicator = _interopRequireDefault(require("../../ui/color-indicator"));
var _designSystem = require("../../../helpers/constants/design-system");
var _chip = _interopRequireDefault(require("../../ui/chip/chip"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _selectors = require("../../../selectors");
var _componentLibrary = require("../../component-library");
var _metamask = require("../../../ducks/metamask/metamask");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function NetworkDisplay({
  indicatorSize,
  disabled,
  labelProps,
  targetNetwork,
  onClick
}) {
  const networkIsLoading = (0, _reactRedux.useSelector)(_selectors.isNetworkLoading);
  const providerConfig = (0, _reactRedux.useSelector)(_metamask.getProviderConfig);
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    nickname,
    type: networkType
  } = targetNetwork ?? providerConfig;
  return /*#__PURE__*/_react.default.createElement(_chip.default, {
    dataTestId: "network-display",
    borderColor: onClick ? _designSystem.BorderColor.borderDefault : _designSystem.BorderColor.borderMuted,
    onClick: onClick,
    leftIcon: /*#__PURE__*/_react.default.createElement(_loadingIndicator.default, {
      alt: t('attemptingConnect'),
      title: t('attemptingConnect'),
      isLoading: networkIsLoading
    }, /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
      color: networkType === _network.NETWORK_TYPES.RPC ? _designSystem.IconColor.iconMuted : networkType,
      size: indicatorSize,
      type: _colorIndicator.default.TYPES.FILLED,
      iconClassName: networkType === _network.NETWORK_TYPES.RPC && indicatorSize !== _designSystem.Size.XS ? 'fa fa-question' : undefined
    })),
    rightIcon: onClick ? /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: _componentLibrary.IconName.ArrowDown,
      size: _componentLibrary.IconSize.Xs
    }) : null,
    label: networkType === _network.NETWORK_TYPES.RPC ? nickname ?? t('privateNetwork') : t(networkType),
    className: (0, _classnames.default)('network-display', {
      'network-display--disabled': disabled,
      'network-display--clickable': typeof onClick === 'function'
    }),
    labelProps: {
      variant: _designSystem.TypographyVariant.H7,
      ...labelProps
    }
  });
}
NetworkDisplay.propTypes = {
  /**
   * The size of the indicator
   */
  indicatorSize: _propTypes.default.oneOf(Object.values(_designSystem.Size)),
  /**
   * The label props of the label can use most of the Typography props
   */
  labelProps: _chip.default.propTypes.labelProps,
  /**
   * The target network
   */
  targetNetwork: _propTypes.default.shape({
    type: _propTypes.default.oneOf([...Object.keys(_network.BUILT_IN_NETWORKS), _network.NETWORK_TYPES.RPC]),
    nickname: _propTypes.default.string
  }),
  /**
   * Whether the NetworkDisplay is disabled
   */
  disabled: _propTypes.default.bool,
  /**
   * The onClick event handler of the NetworkDisplay
   * if it is not passed it is assumed that the NetworkDisplay
   * should not be interactive and removes the caret and changes the border color
   * of the NetworkDisplay
   */
  onClick: _propTypes.default.func
};
NetworkDisplay.defaultProps = {
  indicatorSize: _designSystem.Size.LG
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\network-display\\network-display.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nft-default-image\\index.js", {"./nft-default-image":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nft-default-image\\nft-default-image.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cnft-default-image%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _nftDefaultImage.default;
  }
});
var _nftDefaultImage = _interopRequireDefault(require("./nft-default-image"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nft-default-image\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nft-default-image\\nft-default-image.js", {"../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cnft-default-image%5Cnft-default-image.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NftDefaultImage;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function NftDefaultImage({
  name,
  tokenId,
  handleImageClick
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const Tag = handleImageClick ? 'button' : 'div';
  return /*#__PURE__*/_react.default.createElement(Tag, {
    tabIndex: 0,
    "data-testid": "nft-default-image",
    className: (0, _classnames.default)('nft-default', {
      'nft-default--clickable': handleImageClick
    }),
    onClick: handleImageClick
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    className: "nft-default__text"
  }, name ?? t('unknownCollection'), " ", /*#__PURE__*/_react.default.createElement("br", null), " #", tokenId));
}
NftDefaultImage.propTypes = {
  /**
   * The name of the NFT collection if not supplied will default to "Unnamed collection"
   */
  name: _propTypes.default.string,
  /**
   * The token id of the nft
   */
  tokenId: _propTypes.default.string,
  /**
   * The click handler for the NFT default image
   */
  handleImageClick: _propTypes.default.func
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nft-default-image\\nft-default-image.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nft-details\\nft-details.js", {"../../../../app/scripts/lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../../shared/constants/network":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\network.ts","../../../../shared/constants/transaction":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\transaction.ts","../../../../shared/modules/conversion.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\conversion.utils.ts","../../../../shared/modules/string-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\string-utils.ts","../../../ducks/metamask/metamask":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\metamask\\metamask.js","../../../ducks/send":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\send\\index.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/nfts":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\nfts.js","../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../hooks/useCopyToClipboard":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useCopyToClipboard.js","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../hooks/usePrevious":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\usePrevious.js","../../../pages/asset/components/asset-navigation":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\pages\\asset\\components\\asset-navigation.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../ui/card":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\card\\index.js","../../ui/info-tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\info-tooltip\\index.js","../../ui/tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\tooltip\\index.js","../nft-default-image":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nft-default-image\\index.js","../nft-options/nft-options":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nft-options\\nft-options.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cnft-details%5Cnft-details.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NftDetails;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _lodash = require("lodash");
var _box = _interopRequireDefault(require("../../ui/box"));
var _card = _interopRequireDefault(require("../../ui/card"));
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _util = require("../../../helpers/utils/util");
var _nfts = require("../../../helpers/utils/nfts");
var _selectors = require("../../../selectors");
var _assetNavigation = _interopRequireDefault(require("../../../pages/asset/components/asset-navigation"));
var _metamask = require("../../../ducks/metamask/metamask");
var _routes = require("../../../helpers/constants/routes");
var _actions = require("../../../store/actions");
var _network = require("../../../../shared/constants/network");
var _util2 = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _nftOptions = _interopRequireDefault(require("../nft-options/nft-options"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _send = require("../../../ducks/send");
var _infoTooltip = _interopRequireDefault(require("../../ui/info-tooltip"));
var _usePrevious = require("../../../hooks/usePrevious");
var _useCopyToClipboard = require("../../../hooks/useCopyToClipboard");
var _stringUtils = require("../../../../shared/modules/string-utils");
var _transaction = require("../../../../shared/constants/transaction");
var _nftDefaultImage = _interopRequireDefault(require("../nft-default-image"));
var _componentLibrary = require("../../component-library");
var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));
var _conversion = require("../../../../shared/modules/conversion.utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function NftDetails({
  nft
}) {
  var _nftContracts$find;
  const {
    image,
    imageOriginal,
    name,
    description,
    address,
    tokenId,
    standard,
    isCurrentlyOwned,
    lastSale,
    imageThumbnail
  } = nft;
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const ipfsGateway = (0, _reactRedux.useSelector)(_selectors.getIpfsGateway);
  const nftContracts = (0, _reactRedux.useSelector)(_metamask.getNftContracts);
  const currentNetwork = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const [addressCopied, handleAddressCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  const nftContractName = (_nftContracts$find = nftContracts.find(({
    address: contractAddress
  }) => (0, _stringUtils.isEqualCaseInsensitive)(contractAddress, address))) === null || _nftContracts$find === void 0 ? void 0 : _nftContracts$find.name;
  const selectedAccountName = (0, _reactRedux.useSelector)(state => (0, _selectors.getSelectedIdentity)(state).name);
  const nftImageAlt = (0, _nfts.getNftImageAlt)(nft);
  const nftImageURL = (0, _util.getAssetImageURL)(imageOriginal ?? image, ipfsGateway);
  const isDataURI = nftImageURL.startsWith('data:');
  const formattedTimestamp = (0, _util.formatDate)(new Date(lastSale === null || lastSale === void 0 ? void 0 : lastSale.event_timestamp).getTime(), 'M/d/y');
  const onRemove = () => {
    dispatch((0, _actions.removeAndIgnoreNft)(address, tokenId));
    dispatch((0, _actions.setNewNftAddedMessage)(''));
    dispatch((0, _actions.setRemoveNftMessage)('success'));
    history.push(_routes.DEFAULT_ROUTE);
  };
  const prevNft = (0, _usePrevious.usePrevious)(nft);
  (0, _react.useEffect)(() => {
    if (!(0, _lodash.isEqual)(prevNft, nft)) {
      (0, _actions.checkAndUpdateSingleNftOwnershipStatus)(nft);
    }
  }, [nft, prevNft]);
  const getOpenSeaLink = () => {
    switch (currentNetwork) {
      case _network.CHAIN_IDS.MAINNET:
        return `https://opensea.io/assets/${address}/${tokenId}`;
      case _network.CHAIN_IDS.POLYGON:
        return `https://opensea.io/assets/matic/${address}/${tokenId}`;
      case _network.CHAIN_IDS.GOERLI:
      case _network.CHAIN_IDS.SEPOLIA:
        return `https://testnets.opensea.io/assets/${address}/${tokenId}`;
      default:
        return null;
    }
  };
  const openSeaLink = getOpenSeaLink();
  const sendDisabled = standard !== _transaction.TokenStandard.ERC721;
  const inPopUp = (0, _util2.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP;
  const onSend = async () => {
    await dispatch((0, _send.startNewDraftTransaction)({
      type: _transaction.AssetType.NFT,
      details: nft
    }));
    history.push(_routes.SEND_ROUTE);
  };
  const renderSendButton = () => {
    if (isCurrentlyOwned === false) {
      return /*#__PURE__*/_react.default.createElement("div", {
        style: {
          height: '30px'
        }
      });
    }
    return /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      width: inPopUp ? _designSystem.BLOCK_SIZES.FULL : _designSystem.BLOCK_SIZES.HALF,
      margin: inPopUp ? [4, 0] : null
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      onClick: onSend,
      disabled: sendDisabled,
      className: "nft-details__send-button",
      "data-testid": "nft-send-button"
    }, t('send')), sendDisabled ? /*#__PURE__*/_react.default.createElement(_infoTooltip.default, {
      position: "top",
      contentText: t('sendingDisabled')
    }) : null);
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_assetNavigation.default, {
    accountName: selectedAccountName,
    assetName: nftContractName,
    onBack: () => history.push(_routes.DEFAULT_ROUTE),
    optionsButton: /*#__PURE__*/_react.default.createElement(_nftOptions.default, {
      onViewOnOpensea: openSeaLink ? () => global.platform.openTab({
        url: openSeaLink
      }) : null,
      onRemove: onRemove
    })
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "nft-details"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "nft-details__top-section"
  }, /*#__PURE__*/_react.default.createElement(_card.default, {
    padding: 0,
    justifyContent: _designSystem.JustifyContent.center,
    className: "nft-details__card"
  }, image ? /*#__PURE__*/_react.default.createElement("img", {
    className: "nft-details__image",
    src: nftImageURL,
    alt: nftImageAlt
  }) : /*#__PURE__*/_react.default.createElement(_nftDefaultImage.default, {
    name: name,
    tokenId: tokenId
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    className: "nft-details__info",
    justifyContent: _designSystem.JustifyContent.spaceBetween
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.headingSm,
    as: "h4",
    fontWeight: _designSystem.FontWeight.Bold,
    marginBottom: 2
  }, name), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textMuted,
    variant: _designSystem.TextVariant.bodyMd,
    as: "h5",
    marginBottom: 4,
    overflowWrap: _designSystem.OverflowWrap.BreakWord
  }, "#", tokenId)), description ? /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginBottom: 2,
    className: "nft-details__description"
  }, t('description')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    overflowWrap: _designSystem.OverflowWrap.BreakWord,
    marginBottom: 4
  }, description)) : null, inPopUp ? null : renderSendButton())), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 2
  }, lastSale ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginBottom: 4,
    marginRight: 2,
    className: "nft-details__link-title"
  }, t('lastSold')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    className: "nft-details__contract-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    overflowWrap: _designSystem.OverflowWrap.BreakWord,
    marginBottom: 4
  }, formattedTimestamp))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginBottom: 4,
    marginRight: 2,
    className: "nft-details__link-title"
  }, t('lastPriceSold')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    className: "nft-details__contract-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    overflowWrap: _designSystem.OverflowWrap.BreakWord,
    marginBottom: 4
  }, `${Number((0, _conversion.decWEIToDecETH)(lastSale.total_price))} ${lastSale.payment_token.symbol}`)))) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginBottom: 4,
    marginRight: 2,
    className: "nft-details__link-title"
  }, t('source')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    marginBottom: 4,
    className: "nft-details__image-source",
    color: isDataURI ? _designSystem.TextColor.textDefault : _designSystem.TextColor.primaryDefault
  }, isDataURI ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, nftImageURL) : /*#__PURE__*/_react.default.createElement("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: nftImageURL,
    title: nftImageURL
  }, nftImageURL))), imageThumbnail ? /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginBottom: 4,
    marginRight: 2,
    className: "nft-details__link-title"
  }, t('link')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    marginBottom: 4,
    className: "nft-details__image-source",
    color: isDataURI ? _designSystem.TextColor.textDefault : _designSystem.TextColor.primaryDefault
  }, /*#__PURE__*/_react.default.createElement("a", {
    target: "_blank",
    rel: "noopener noreferrer",
    href: nftImageURL,
    title: nftImageURL
  }, imageThumbnail))) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    marginBottom: 4,
    marginRight: 2,
    className: "nft-details__link-title"
  }, t('contractAddress')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    className: "nft-details__contract-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    overflowWrap: _designSystem.OverflowWrap.BreakWord,
    marginBottom: 4
  }, (0, _util.shortenAddress)(address)), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    wrapperClassName: "nft-details__tooltip-wrapper",
    position: "bottom",
    title: addressCopied ? t('copiedExclamation') : t('copyToClipboard')
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    ariaLabel: "copy",
    color: _designSystem.IconColor.iconAlternative,
    className: "nft-details__contract-copy-button",
    "data-testid": "nft-address-copy",
    onClick: () => {
      handleAddressCopy(address);
    },
    iconName: addressCopied ? _componentLibrary.IconName.CopySuccess : _componentLibrary.IconName.Copy
  })))), inPopUp ? renderSendButton() : null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textAlternative,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, t('nftDisclaimer')))));
}
NftDetails.propTypes = {
  nft: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    tokenId: _propTypes.default.string.isRequired,
    isCurrentlyOwned: _propTypes.default.bool,
    name: _propTypes.default.string,
    description: _propTypes.default.string,
    image: _propTypes.default.string,
    standard: _propTypes.default.string,
    imageThumbnail: _propTypes.default.string,
    imagePreview: _propTypes.default.string,
    imageOriginal: _propTypes.default.string,
    creator: _propTypes.default.shape({
      address: _propTypes.default.string,
      config: _propTypes.default.string,
      profile_img_url: _propTypes.default.string
    }),
    lastSale: _propTypes.default.shape({
      event_timestamp: _propTypes.default.string,
      total_price: _propTypes.default.string,
      payment_token: _propTypes.default.shape({
        symbol: _propTypes.default.string
      })
    })
  })
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nft-details\\nft-details.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nft-options\\nft-options.js", {"../../../contexts/i18n":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\i18n.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/menu":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\menu\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cnft-options%5Cnft-options.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _i18n = require("../../../contexts/i18n");
var _menu = require("../../ui/menu");
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const NftOptions = ({
  onRemove,
  onViewOnOpensea
}) => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const [nftOptionsOpen, setNftOptionsOpen] = (0, _react.useState)(false);
  const ref = (0, _react.useRef)(false);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: ref
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonIcon, {
    iconName: _componentLibrary.IconName.MoreVertical,
    className: "nft-options__button",
    "data-testid": "nft-options__button",
    onClick: () => setNftOptionsOpen(true),
    color: _designSystem.Color.textDefault,
    ariaLabel: t('nftOptions')
  }), nftOptionsOpen ? /*#__PURE__*/_react.default.createElement(_menu.Menu, {
    "data-testid": "close-nft-options-menu",
    anchorElement: ref.current,
    onHide: () => setNftOptionsOpen(false)
  }, onViewOnOpensea ? /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconName: _componentLibrary.IconName.Export,
    "data-testid": "nft-options__view-on-opensea",
    onClick: () => {
      setNftOptionsOpen(false);
      onViewOnOpensea();
    }
  }, t('viewOnOpensea')) : null, /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    iconName: _componentLibrary.IconName.Trash,
    "data-testid": "nft-item-remove",
    onClick: () => {
      setNftOptionsOpen(false);
      onRemove();
    }
  }, t('removeNFT'))) : null);
};
NftOptions.propTypes = {
  onRemove: _propTypes.default.func.isRequired,
  onViewOnOpensea: _propTypes.default.func
};
var _default = NftOptions;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nft-options\\nft-options.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nfts-detection-notice\\index.js", {"./nfts-detection-notice":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nfts-detection-notice\\nfts-detection-notice.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cnfts-detection-notice%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _nftsDetectionNotice.default;
  }
});
var _nftsDetectionNotice = _interopRequireDefault(require("./nfts-detection-notice"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nfts-detection-notice\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nfts-detection-notice\\nfts-detection-notice.js", {"../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\routes.ts","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../ui/dialog":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\dialog\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-router-dom":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cnfts-detection-notice%5Cnfts-detection-notice.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NftsDetectionNotice;
var _react = _interopRequireDefault(require("react"));
var _reactRouterDom = require("react-router-dom");
var _box = _interopRequireDefault(require("../../ui/box"));
var _dialog = _interopRequireDefault(require("../../ui/dialog"));
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _button = _interopRequireDefault(require("../../ui/button"));
var _routes = require("../../../helpers/constants/routes");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function NftsDetectionNotice() {
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "nfts-detection-notice"
  }, /*#__PURE__*/_react.default.createElement(_dialog.default, {
    type: "message",
    className: "nfts-detection-notice__message"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingTop: 1
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Info,
    className: "info-circle",
    color: _designSystem.IconColor.primaryDefault
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingLeft: 2
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    align: _designSystem.TextAlign.Left,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    fontWeight: _designSystem.FontWeight.Bold
  }, t('newNFTsDetected')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    align: _designSystem.TextAlign.Left,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    marginBottom: 4
  }, t('newNFTDetectedMessage')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: e => {
      e.preventDefault();
      history.push(`${_routes.EXPERIMENTAL_ROUTE}#autodetect-nfts`);
    },
    className: "nfts-detection-notice__message__link"
  }, t('selectNFTPrivacyPreference'))))));
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nfts-detection-notice\\nfts-detection-notice.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nfts-items\\index.js", {"./nfts-items":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nfts-items\\nfts-items.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cnfts-items%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _nftsItems.default;
  }
});
var _nftsItems = _interopRequireDefault(require("./nfts-items"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nfts-items\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nfts-items\\nfts-items.js", {"../../../../app/scripts/lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../ducks/metamask/metamask":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\routes.ts","../../../helpers/utils/nfts":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\nfts.js","../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../hooks/usePrevious":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\usePrevious.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../ui/card":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\card\\index.js","../../ui/typography/typography":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\typography\\typography.js","../nft-default-image":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nft-default-image\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cnfts-items%5Cnfts-items.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NftsItems;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _lodash = require("lodash");
var _box = _interopRequireDefault(require("../../ui/box"));
var _typography = _interopRequireDefault(require("../../ui/typography/typography"));
var _card = _interopRequireDefault(require("../../ui/card"));
var _designSystem = require("../../../helpers/constants/design-system");
var _app = require("../../../../shared/constants/app");
var _util = require("../../../../app/scripts/lib/util");
var _selectors = require("../../../selectors");
var _routes = require("../../../helpers/constants/routes");
var _util2 = require("../../../helpers/utils/util");
var _nfts = require("../../../helpers/utils/nfts");
var _actions = require("../../../store/actions");
var _usePrevious = require("../../../hooks/usePrevious");
var _metamask = require("../../../ducks/metamask/metamask");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _componentLibrary = require("../../component-library");
var _nftDefaultImage = _interopRequireDefault(require("../nft-default-image"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const width = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? _designSystem.BLOCK_SIZES.ONE_THIRD : _designSystem.BLOCK_SIZES.ONE_SIXTH;
const PREVIOUSLY_OWNED_KEY = 'previouslyOwned';
function NftsItems({
  collections = {},
  previouslyOwnedCollection = {}
}) {
  var _previouslyOwnedColle;
  const dispatch = (0, _reactRedux.useDispatch)();
  const collectionsKeys = Object.keys(collections);
  const nftsDropdownState = (0, _reactRedux.useSelector)(_metamask.getNftsDropdownState);
  const previousCollectionKeys = (0, _usePrevious.usePrevious)(collectionsKeys);
  const selectedAddress = (0, _reactRedux.useSelector)(_selectors.getSelectedAddress);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const t = (0, _useI18nContext.useI18nContext)();
  (0, _react.useEffect)(() => {
    var _nftsDropdownState$se, _nftsDropdownState$se2;
    if (chainId !== undefined && selectedAddress !== undefined && !(0, _lodash.isEqual)(previousCollectionKeys, collectionsKeys) && ((nftsDropdownState === null || nftsDropdownState === void 0 ? void 0 : (_nftsDropdownState$se = nftsDropdownState[selectedAddress]) === null || _nftsDropdownState$se === void 0 ? void 0 : _nftsDropdownState$se[chainId]) === undefined || Object.keys(nftsDropdownState === null || nftsDropdownState === void 0 ? void 0 : (_nftsDropdownState$se2 = nftsDropdownState[selectedAddress]) === null || _nftsDropdownState$se2 === void 0 ? void 0 : _nftsDropdownState$se2[chainId]).length === 0)) {
      const initState = {};
      collectionsKeys.forEach(key => {
        initState[key] = true;
      });
      const newNftDropdownState = {
        ...nftsDropdownState,
        [selectedAddress]: {
          ...(nftsDropdownState === null || nftsDropdownState === void 0 ? void 0 : nftsDropdownState[selectedAddress]),
          [chainId]: initState
        }
      };
      dispatch((0, _actions.updateNftDropDownState)(newNftDropdownState));
    }
  }, [collectionsKeys, previousCollectionKeys, nftsDropdownState, selectedAddress, chainId, dispatch]);
  const ipfsGateway = (0, _reactRedux.useSelector)(_selectors.getIpfsGateway);
  const history = (0, _reactRouterDom.useHistory)();
  const renderCollectionImage = (collectionImage, collectionName) => {
    var _collectionName$;
    if (collectionImage) {
      return /*#__PURE__*/_react.default.createElement("img", {
        alt: collectionName,
        src: (0, _util2.getAssetImageURL)(collectionImage, ipfsGateway),
        className: "nfts-items__collection-image"
      });
    }
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "nfts-items__collection-image-alt"
    }, (collectionName === null || collectionName === void 0 ? void 0 : (_collectionName$ = collectionName[0]) === null || _collectionName$ === void 0 ? void 0 : _collectionName$.toUpperCase()) ?? null);
  };
  const updateNftDropDownStateKey = (key, isExpanded) => {
    const newCurrentAccountState = {
      ...nftsDropdownState[selectedAddress][chainId],
      [key]: !isExpanded
    };
    const newState = {
      ...nftsDropdownState,
      [selectedAddress]: {
        [chainId]: newCurrentAccountState
      }
    };
    dispatch((0, _actions.updateNftDropDownState)(newState));
  };
  const renderCollection = ({
    nfts,
    collectionName,
    collectionImage,
    key
  }) => {
    var _nftsDropdownState$se3, _nftsDropdownState$se4;
    if (!nfts.length) {
      return null;
    }
    const isExpanded = (_nftsDropdownState$se3 = nftsDropdownState[selectedAddress]) === null || _nftsDropdownState$se3 === void 0 ? void 0 : (_nftsDropdownState$se4 = _nftsDropdownState$se3[chainId]) === null || _nftsDropdownState$se4 === void 0 ? void 0 : _nftsDropdownState$se4[key];
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "nfts-items__collection",
      key: `collection-${key}`
    }, /*#__PURE__*/_react.default.createElement("button", {
      className: "nfts-items__collection-wrapper",
      "data-testid": "collection-expander-button",
      onClick: () => {
        updateNftDropDownStateKey(key, isExpanded);
      }
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      marginBottom: 2,
      display: _designSystem.DISPLAY.FLEX,
      alignItems: _designSystem.AlignItems.center,
      justifyContent: _designSystem.JustifyContent.spaceBetween,
      className: "nfts-items__collection-accordion-title"
    }, /*#__PURE__*/_react.default.createElement(_box.default, {
      alignItems: _designSystem.AlignItems.center,
      className: "nfts-items__collection-header"
    }, renderCollectionImage(collectionImage, collectionName), /*#__PURE__*/_react.default.createElement(_typography.default, {
      color: _designSystem.Color.textDefault,
      variant: _designSystem.TypographyVariant.H5,
      margin: 2
    }, `${collectionName ?? t('unknownCollection')} (${nfts.length})`)), /*#__PURE__*/_react.default.createElement(_box.default, {
      alignItems: _designSystem.AlignItems.flexEnd
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: isExpanded ? _componentLibrary.IconName.ArrowDown : _componentLibrary.IconName.ArrowRight,
      color: _designSystem.Color.iconDefault
    })))), isExpanded ? /*#__PURE__*/_react.default.createElement(_box.default, {
      display: _designSystem.DISPLAY.FLEX,
      flexWrap: _designSystem.FLEX_WRAP.WRAP,
      gap: 4
    }, nfts.map((nft, i) => {
      const {
        image,
        address,
        tokenId,
        backgroundColor,
        name
      } = nft;
      const nftImage = (0, _util2.getAssetImageURL)(image, ipfsGateway);
      const nftImageAlt = (0, _nfts.getNftImageAlt)(nft);
      const handleImageClick = () => history.push(`${_routes.ASSET_ROUTE}/${address}/${tokenId}`);
      return /*#__PURE__*/_react.default.createElement(_box.default, {
        "data-testid": "nft-wrapper",
        width: width,
        key: `nft-${i}`,
        className: "nfts-items__item-wrapper"
      }, /*#__PURE__*/_react.default.createElement(_card.default, {
        padding: 0,
        justifyContent: _designSystem.JustifyContent.center,
        className: "nfts-items__item-wrapper__card"
      }, nftImage ? /*#__PURE__*/_react.default.createElement("button", {
        className: "nfts-items__item",
        style: {
          backgroundColor
        },
        onClick: handleImageClick
      }, /*#__PURE__*/_react.default.createElement("img", {
        className: "nfts-items__item-image",
        "data-testid": "nft-image",
        src: nftImage,
        alt: nftImageAlt
      })) : /*#__PURE__*/_react.default.createElement(_nftDefaultImage.default, {
        name: name,
        tokenId: tokenId,
        handleImageClick: handleImageClick
      })));
    })) : null);
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "nfts-items"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingTop: 6,
    paddingBottom: 6,
    paddingLeft: 4,
    paddingRight: 4,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, collectionsKeys.map(key => {
    const {
      nfts,
      collectionName,
      collectionImage
    } = collections[key];
    return renderCollection({
      nfts,
      collectionName,
      collectionImage,
      key,
      isPreviouslyOwnedCollection: false
    });
  }), renderCollection({
    nfts: previouslyOwnedCollection.nfts,
    collectionName: previouslyOwnedCollection.collectionName,
    collectionImage: (_previouslyOwnedColle = previouslyOwnedCollection.nfts[0]) === null || _previouslyOwnedColle === void 0 ? void 0 : _previouslyOwnedColle.image,
    isPreviouslyOwnedCollection: true,
    key: PREVIOUSLY_OWNED_KEY
  }))));
}
NftsItems.propTypes = {
  previouslyOwnedCollection: _propTypes.default.shape({
    nfts: _propTypes.default.arrayOf(_propTypes.default.shape({
      address: _propTypes.default.string.isRequired,
      tokenId: _propTypes.default.string.isRequired,
      name: _propTypes.default.string,
      description: _propTypes.default.string,
      image: _propTypes.default.string,
      standard: _propTypes.default.string,
      imageThumbnail: _propTypes.default.string,
      imagePreview: _propTypes.default.string,
      creator: _propTypes.default.shape({
        address: _propTypes.default.string,
        config: _propTypes.default.string,
        profile_img_url: _propTypes.default.string
      })
    })),
    collectionName: _propTypes.default.string,
    collectionImage: _propTypes.default.string
  }),
  collections: _propTypes.default.shape({
    nfts: _propTypes.default.arrayOf(_propTypes.default.shape({
      address: _propTypes.default.string.isRequired,
      tokenId: _propTypes.default.string.isRequired,
      name: _propTypes.default.string,
      description: _propTypes.default.string,
      image: _propTypes.default.string,
      standard: _propTypes.default.string,
      imageThumbnail: _propTypes.default.string,
      imagePreview: _propTypes.default.string,
      creator: _propTypes.default.shape({
        address: _propTypes.default.string,
        config: _propTypes.default.string,
        profile_img_url: _propTypes.default.string
      })
    })),
    collectionImage: _propTypes.default.string,
    collectionName: _propTypes.default.string
  })
};


      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nfts-items\\nfts-items.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nfts-tab\\index.js", {"./nfts-tab":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nfts-tab\\nfts-tab.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cnfts-tab%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _nftsTab.default;
  }
});
var _nftsTab = _interopRequireDefault(require("./nfts-tab"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nfts-tab\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nfts-tab\\nfts-tab.js", {"../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\routes.ts","../../../helpers/constants/zendesk-url":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\zendesk-url.js","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../hooks/useNftsCollections":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useNftsCollections.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../ui/typography/typography":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\typography\\typography.js","../nfts-detection-notice":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nfts-detection-notice\\index.js","../nfts-items":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\nfts-items\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cnfts-tab%5Cnfts-tab.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = NftsTab;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _box = _interopRequireDefault(require("../../ui/box"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _typography = _interopRequireDefault(require("../../ui/typography/typography"));
var _nftsDetectionNotice = _interopRequireDefault(require("../nfts-detection-notice"));
var _nftsItems = _interopRequireDefault(require("../nfts-items"));
var _designSystem = require("../../../helpers/constants/design-system");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _selectors = require("../../../selectors");
var _routes = require("../../../helpers/constants/routes");
var _actions = require("../../../store/actions");
var _useNftsCollections = require("../../../hooks/useNftsCollections");
var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function NftsTab({
  onAddNFT
}) {
  const useNftDetection = (0, _reactRedux.useSelector)(_selectors.getUseNftDetection);
  const isMainnet = (0, _reactRedux.useSelector)(_selectors.getIsMainnet);
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    nftsLoading,
    collections,
    previouslyOwnedCollection
  } = (0, _useNftsCollections.useNftsCollections)();
  const onEnableAutoDetect = () => {
    history.push(_routes.EXPERIMENTAL_ROUTE);
  };
  const onRefresh = () => {
    if (isMainnet) {
      dispatch((0, _actions.detectNfts)());
    }
    (0, _actions.checkAndUpdateAllNftsOwnershipStatus)();
  };
  if (nftsLoading) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "nfts-tab__loading"
    }, t('loadingNFTs'));
  }
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "nfts-tab"
  }, Object.keys(collections).length > 0 || previouslyOwnedCollection.nfts.length > 0 ? /*#__PURE__*/_react.default.createElement(_nftsItems.default, {
    collections: collections,
    previouslyOwnedCollection: previouslyOwnedCollection
  }) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, isMainnet && !useNftDetection ? /*#__PURE__*/_react.default.createElement(_nftsDetectionNotice.default, null) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    padding: 12
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JustifyContent.center
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "./images/no-nfts.svg"
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 4,
    marginBottom: 12,
    justifyContent: _designSystem.JustifyContent.center,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    className: "nfts-tab__link"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.TextColor.textMuted,
    variant: _designSystem.TypographyVariant.H4,
    align: _designSystem.TEXT_ALIGN.CENTER,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('noNFTs')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    target: "_blank",
    rel: "noopener noreferrer",
    href: _zendeskUrl.default.NFT_TOKENS
  }, t('learnMoreUpperCase'))))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 4,
    justifyContent: _designSystem.JustifyContent.center,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.TextColor.textMuted,
    variant: _designSystem.TypographyVariant.H5,
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('missingNFT')), /*#__PURE__*/_react.default.createElement(_box.default, {
    alignItems: _designSystem.AlignItems.center,
    justifyContent: _designSystem.JustifyContent.center
  }, !isMainnet && Object.keys(collections).length < 1 ? null : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "nfts-tab__link",
    justifyContent: _designSystem.JustifyContent.flexEnd
  }, isMainnet && !useNftDetection ? /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: onEnableAutoDetect
  }, t('enableAutoDetect')) : /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: onRefresh
  }, t('refreshList'))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.TextColor.textMuted,
    variant: _designSystem.TypographyVariant.H6,
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('or'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JustifyContent.flexStart,
    className: "nfts-tab__link"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: onAddNFT
  }, t('importNFTs'))))));
}
NftsTab.propTypes = {
  onAddNFT: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\nfts-tab\\nfts-tab.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permission-page-container\\index.js", {"./permission-page-container-content":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permission-page-container\\permission-page-container-content\\index.js","./permission-page-container.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permission-page-container\\permission-page-container.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cpermission-page-container%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PermissionPageContainerContent", {
  enumerable: true,
  get: function () {
    return _permissionPageContainerContent.default;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionPageContainer.default;
  }
});
var _permissionPageContainer = _interopRequireDefault(require("./permission-page-container.container"));
var _permissionPageContainerContent = _interopRequireDefault(require("./permission-page-container-content"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permission-page-container\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permission-page-container\\permission-page-container-content\\index.js", {"./permission-page-container-content.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permission-page-container\\permission-page-container-content\\permission-page-container-content.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cpermission-page-container%5Cpermission-page-container-content%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionPageContainerContent.default;
  }
});
var _permissionPageContainerContent = _interopRequireDefault(require("./permission-page-container-content.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permission-page-container\\permission-page-container-content\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permission-page-container\\permission-page-container-content\\permission-page-container-content.component.js", {"../../../ui/tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\tooltip\\index.js","../../permissions-connect-header":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permissions-connect-header\\index.js","../../permissions-connect-permission-list":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permissions-connect-permission-list\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cpermission-page-container%5Cpermission-page-container-content%5Cpermission-page-container-content.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _permissionsConnectHeader = _interopRequireDefault(require("../../permissions-connect-header"));
var _tooltip = _interopRequireDefault(require("../../../ui/tooltip"));
var _permissionsConnectPermissionList = _interopRequireDefault(require("../../permissions-connect-permission-list"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class PermissionPageContainerContent extends _react.PureComponent {
  renderRequestedPermissions() {
    const {
      selectedPermissions,
      subjectMetadata
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__content__requested"
    }, /*#__PURE__*/_react.default.createElement(_permissionsConnectPermissionList.default, {
      permissions: selectedPermissions,
      targetSubjectMetadata: subjectMetadata
    }));
  }
  renderAccountTooltip(textContent) {
    const {
      selectedIdentities
    } = this.props;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      key: "all-account-connect-tooltip",
      position: "bottom",
      wrapperClassName: "permission-approval-container__bold-title-elements",
      html: /*#__PURE__*/_react.default.createElement("div", {
        style: {
          display: 'flex',
          flexDirection: 'column'
        }
      }, selectedIdentities.slice(0, 6).map((identity, index) => {
        return /*#__PURE__*/_react.default.createElement("div", {
          key: `tooltip-identity-${index}`
        }, identity.addressLabel);
      }), selectedIdentities.length > 6 ? t('plusXMore', [selectedIdentities.length - 6]) : null)
    }, textContent);
  }
  getTitle() {
    var _selectedIdentities$;
    const {
      subjectMetadata,
      selectedIdentities,
      allIdentitiesSelected,
      selectedPermissions
    } = this.props;
    const {
      t
    } = this.context;
    if (subjectMetadata.extensionId) {
      return t('externalExtension', [subjectMetadata.extensionId]);
    } else if (!selectedPermissions.eth_accounts) {
      return t('permissionRequestCapitalized');
    } else if (allIdentitiesSelected) {
      return t('connectToAll', [this.renderAccountTooltip(t('connectToAllAccounts'))]);
    } else if (selectedIdentities.length > 1) {
      return t('connectToMultiple', [this.renderAccountTooltip(t('connectToMultipleNumberOfAccounts', [selectedIdentities.length]))]);
    }
    return t('connectTo', [(_selectedIdentities$ = selectedIdentities[0]) === null || _selectedIdentities$ === void 0 ? void 0 : _selectedIdentities$.addressLabel]);
  }
  render() {
    const {
      subjectMetadata
    } = this.props;
    const {
      t
    } = this.context;
    const title = this.getTitle();
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__content"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__content-container"
    }, /*#__PURE__*/_react.default.createElement(_permissionsConnectHeader.default, {
      iconUrl: subjectMetadata.iconUrl,
      iconName: subjectMetadata.name,
      headerTitle: title,
      headerText: subjectMetadata.extensionId ? t('allowExternalExtensionTo', [subjectMetadata.extensionId]) : t('allowThisSiteTo'),
      siteOrigin: subjectMetadata.origin
    }), /*#__PURE__*/_react.default.createElement("section", {
      className: "permission-approval-container__permissions-container"
    }, this.renderRequestedPermissions())));
  }
}
exports.default = PermissionPageContainerContent;
_defineProperty(PermissionPageContainerContent, "propTypes", {
  subjectMetadata: _propTypes.default.shape({
    name: _propTypes.default.string.isRequired,
    origin: _propTypes.default.string.isRequired,
    subjectType: _propTypes.default.string.isRequired,
    extensionId: _propTypes.default.string,
    iconUrl: _propTypes.default.string
  }),
  selectedPermissions: _propTypes.default.object.isRequired,
  selectedIdentities: _propTypes.default.array,
  allIdentitiesSelected: _propTypes.default.bool
});
_defineProperty(PermissionPageContainerContent, "defaultProps", {
  selectedIdentities: [],
  allIdentitiesSelected: false
});
_defineProperty(PermissionPageContainerContent, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permission-page-container\\permission-page-container-content\\permission-page-container-content.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permission-page-container\\permission-page-container.component.js", {".":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permission-page-container\\index.js","../../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../ui/page-container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\page-container\\index.js","../permissions-connect-footer":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permissions-connect-footer\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cpermission-page-container%5Cpermission-page-container.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _lodash = require("lodash");
var _metametrics = require("../../../../shared/constants/metametrics");
var _pageContainer = require("../../ui/page-container");
var _permissionsConnectFooter = _interopRequireDefault(require("../permissions-connect-footer"));
var _ = require(".");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class PermissionPageContainer extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      selectedPermissions: this.getRequestedMethodState(this.getRequestedMethodNames(this.props))
    });
    _defineProperty(this, "onCancel", () => {
      const {
        request,
        rejectPermissionsRequest
      } = this.props;
      rejectPermissionsRequest(request.metadata.id);
    });
    _defineProperty(this, "onSubmit", () => {
      const {
        request: _request,
        approvePermissionsRequest,
        rejectPermissionsRequest,
        selectedIdentities
      } = this.props;
      const request = {
        ..._request,
        permissions: {
          ..._request.permissions
        },
        approvedAccounts: selectedIdentities.map(selectedIdentity => selectedIdentity.address)
      };
      Object.keys(this.state.selectedPermissions).forEach(key => {
        if (!this.state.selectedPermissions[key]) {
          delete request.permissions[key];
        }
      });
      if (Object.keys(request.permissions).length > 0) {
        approvePermissionsRequest(request);
      } else {
        rejectPermissionsRequest(request.metadata.id);
      }
    });
  }
  componentDidUpdate() {
    const newMethodNames = this.getRequestedMethodNames(this.props);
    if (!(0, _lodash.isEqual)(Object.keys(this.state.selectedPermissions), newMethodNames)) {
      // this should be a new request, so just overwrite
      this.setState({
        selectedPermissions: this.getRequestedMethodState(newMethodNames)
      });
    }
  }
  getRequestedMethodState(methodNames) {
    return methodNames.reduce((acc, methodName) => {
      acc[methodName] = true;
      return acc;
    }, {});
  }
  getRequestedMethodNames(props) {
    return Object.keys(props.request.permissions || {});
  }
  componentDidMount() {
    this.context.trackEvent({
      category: _metametrics.MetaMetricsEventCategory.Auth,
      event: 'Tab Opened',
      properties: {
        action: 'Connect',
        legacy_event: true
      }
    });
  }
  render() {
    const {
      requestMetadata,
      targetSubjectMetadata,
      selectedIdentities,
      allIdentitiesSelected
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container permission-approval-container"
    }, /*#__PURE__*/_react.default.createElement(_.PermissionPageContainerContent, {
      requestMetadata: requestMetadata,
      subjectMetadata: targetSubjectMetadata,
      selectedPermissions: this.state.selectedPermissions,
      selectedIdentities: selectedIdentities,
      allIdentitiesSelected: allIdentitiesSelected
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "permission-approval-container__footers"
    }, /*#__PURE__*/_react.default.createElement(_permissionsConnectFooter.default, null), /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
      cancelButtonType: "default",
      onCancel: () => this.onCancel(),
      cancelText: this.context.t('cancel'),
      onSubmit: () => this.onSubmit(),
      submitText: this.context.t('connect'),
      buttonSizeLarge: false
    })));
  }
}
exports.default = PermissionPageContainer;
_defineProperty(PermissionPageContainer, "propTypes", {
  approvePermissionsRequest: _propTypes.default.func.isRequired,
  rejectPermissionsRequest: _propTypes.default.func.isRequired,
  selectedIdentities: _propTypes.default.array,
  allIdentitiesSelected: _propTypes.default.bool,
  request: _propTypes.default.object,
  requestMetadata: _propTypes.default.object,
  targetSubjectMetadata: _propTypes.default.shape({
    name: _propTypes.default.string,
    origin: _propTypes.default.string.isRequired,
    subjectType: _propTypes.default.string.isRequired,
    extensionId: _propTypes.default.string,
    iconUrl: _propTypes.default.string
  })
});
_defineProperty(PermissionPageContainer, "defaultProps", {
  request: {},
  requestMetadata: {},
  selectedIdentities: [],
  allIdentitiesSelected: false
});
_defineProperty(PermissionPageContainer, "contextTypes", {
  t: _propTypes.default.func,
  trackEvent: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permission-page-container\\permission-page-container.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permission-page-container\\permission-page-container.container.js", {"../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","./permission-page-container.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permission-page-container\\permission-page-container.component.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cpermission-page-container%5Cpermission-page-container.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _selectors = require("../../../selectors");
var _permissionPageContainer = _interopRequireDefault(require("./permission-page-container.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = (state, ownProps) => {
  const {
    selectedIdentities
  } = ownProps;
  const allIdentities = (0, _selectors.getMetaMaskIdentities)(state);
  const allIdentitiesSelected = Object.keys(selectedIdentities).length === Object.keys(allIdentities).length && selectedIdentities.length > 1;
  return {
    allIdentitiesSelected
  };
};
var _default = (0, _reactRedux.connect)(mapStateToProps)(_permissionPageContainer.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permission-page-container\\permission-page-container.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permissions-connect-footer\\index.js", {"./permissions-connect-footer.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permissions-connect-footer\\permissions-connect-footer.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cpermissions-connect-footer%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionsConnectFooter.default;
  }
});
var _permissionsConnectFooter = _interopRequireDefault(require("./permissions-connect-footer.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permissions-connect-footer\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permissions-connect-footer\\permissions-connect-footer.component.js", {"../../../helpers/constants/zendesk-url":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\zendesk-url.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cpermissions-connect-footer%5Cpermissions-connect-footer.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _zendeskUrl = _interopRequireDefault(require("../../../helpers/constants/zendesk-url"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class PermissionsConnectFooter extends _react.Component {
  render() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-footer"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-footer__text"
    }, /*#__PURE__*/_react.default.createElement("div", null, t('onlyConnectTrust')), /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-footer__text--link",
      onClick: () => {
        global.platform.openTab({
          url: _zendeskUrl.default.USER_GUIDE_DAPPS
        });
      }
    }, t('learnMoreUpperCase'))));
  }
}
exports.default = PermissionsConnectFooter;
_defineProperty(PermissionsConnectFooter, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permissions-connect-footer\\permissions-connect-footer.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permissions-connect-header\\index.js", {"./permissions-connect-header.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permissions-connect-header\\permissions-connect-header.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cpermissions-connect-header%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionsConnectHeader.default;
  }
});
var _permissionsConnectHeader = _interopRequireDefault(require("./permissions-connect-header.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permissions-connect-header\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permissions-connect-header\\permissions-connect-header.component.js", {"../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../ui/site-origin":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\site-origin\\index.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cpermissions-connect-header%5Cpermissions-connect-header.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _siteOrigin = _interopRequireDefault(require("../../ui/site-origin"));
var _box = _interopRequireDefault(require("../../ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class PermissionsConnectHeader extends _react.Component {
  renderHeaderIcon() {
    const {
      iconUrl,
      iconName,
      siteOrigin,
      leftIcon,
      rightIcon
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-header__icon"
    }, /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
      chip: true,
      siteOrigin: siteOrigin,
      title: siteOrigin,
      iconSrc: iconUrl,
      name: iconName,
      leftIcon: leftIcon,
      rightIcon: rightIcon
    }));
  }
  render() {
    const {
      boxProps,
      className,
      headerTitle,
      headerText
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_box.default, _extends({
      className: (0, _classnames.default)('permissions-connect-header', className),
      flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
      justifyContent: _designSystem.JustifyContent.center
    }, boxProps), this.renderHeaderIcon(), /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-header__title"
    }, headerTitle), /*#__PURE__*/_react.default.createElement("div", {
      className: "permissions-connect-header__subtitle"
    }, headerText));
  }
}
exports.default = PermissionsConnectHeader;
_defineProperty(PermissionsConnectHeader, "propTypes", {
  className: _propTypes.default.string,
  iconUrl: _propTypes.default.string,
  iconName: _propTypes.default.string.isRequired,
  siteOrigin: _propTypes.default.string.isRequired,
  headerTitle: _propTypes.default.node,
  boxProps: _propTypes.default.shape({
    ..._box.default.propTypes
  }),
  headerText: _propTypes.default.string,
  leftIcon: _propTypes.default.node,
  rightIcon: _propTypes.default.node
});
_defineProperty(PermissionsConnectHeader, "defaultProps", {
  iconUrl: null,
  headerTitle: '',
  headerText: '',
  boxProps: {}
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permissions-connect-header\\permissions-connect-header.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permissions-connect-permission-list\\index.js", {"./permissions-connect-permission-list":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permissions-connect-permission-list\\permissions-connect-permission-list.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cpermissions-connect-permission-list%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionsConnectPermissionList.default;
  }
});
var _permissionsConnectPermissionList = _interopRequireDefault(require("./permissions-connect-permission-list"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permissions-connect-permission-list\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permissions-connect-permission-list\\permissions-connect-permission-list.js", {"../../../helpers/utils/permission":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\permission.js","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cpermissions-connect-permission-list%5Cpermissions-connect-permission-list.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PermissionsConnectPermissionList;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _permission = require("../../../helpers/utils/permission");
var _useI18nContext = require("../../../hooks/useI18nContext");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Get one or more permission descriptions for a permission name.
 *
 * @param permission - The permission to render.
 * @param index - The index of the permission.
 * @returns {JSX.Element} A permission description node.
 */
function getDescriptionNode(permission, index) {
  const {
    label,
    leftIcon,
    permissionName
  } = permission;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "permission",
    key: `${permissionName}-${index}`
  }, typeof leftIcon === 'string' ? /*#__PURE__*/_react.default.createElement("i", {
    className: leftIcon
  }) : leftIcon, label, (0, _permission.getRightIcon)(permission));
}
function PermissionsConnectPermissionList({
  permissions,
  targetSubjectMetadata
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "permissions-connect-permission-list"
  }, (0, _permission.getWeightedPermissions)(t, permissions, targetSubjectMetadata).map(getDescriptionNode));
}
PermissionsConnectPermissionList.propTypes = {
  permissions: _propTypes.default.object.isRequired,
  targetSubjectMetadata: _propTypes.default.object.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\permissions-connect-permission-list\\permissions-connect-permission-list.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\base-reader.js", {"../../../../app/scripts/lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../../shared/constants/time":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\time.ts","../../../helpers/utils/webcam-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\webcam-utils.js","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../ui/page-container/page-container-footer/page-container-footer.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\page-container\\page-container-footer\\page-container-footer.component.js","./enhanced-reader":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\enhanced-reader.js","@ngraveio/bc-ur":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@ngraveio\\bc-ur\\dist\\index.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cbase-reader.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _bcUr = require("@ngraveio/bc-ur");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _util = require("../../../../app/scripts/lib/util");
var _app = require("../../../../shared/constants/app");
var _webcamUtils = _interopRequireDefault(require("../../../helpers/utils/webcam-utils"));
var _pageContainerFooter = _interopRequireDefault(require("../../ui/page-container/page-container-footer/page-container-footer.component"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _time = require("../../../../shared/constants/time");
var _enhancedReader = _interopRequireDefault(require("./enhanced-reader"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const READY_STATE = {
  ACCESSING_CAMERA: 'ACCESSING_CAMERA',
  NEED_TO_ALLOW_ACCESS: 'NEED_TO_ALLOW_ACCESS',
  READY: 'READY'
};
const BaseReader = ({
  isReadingWallet,
  handleCancel,
  handleSuccess,
  setErrorTitle
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const [ready, setReady] = (0, _react.useState)(READY_STATE.ACCESSING_CAMERA);
  const [error, setError] = (0, _react.useState)(null);
  const [urDecoder, setURDecoder] = (0, _react.useState)(new _bcUr.URDecoder());
  let permissionChecker = null;
  const mounted = (0, _react.useRef)(false);
  const reset = () => {
    setReady(READY_STATE.ACCESSING_CAMERA);
    setError(null);
    setURDecoder(new _bcUr.URDecoder());
  };
  const checkEnvironment = async () => {
    try {
      const {
        environmentReady
      } = await _webcamUtils.default.checkStatus();
      if (!environmentReady && (0, _util.getEnvironmentType)() !== _app.ENVIRONMENT_TYPE_FULLSCREEN) {
        const currentUrl = new URL(window.location.href);
        const currentHash = currentUrl.hash;
        const currentRoute = currentHash ? currentHash.substring(1) : null;
        global.platform.openExtensionInBrowser(currentRoute);
      }
    } catch (e) {
      if (mounted.current) {
        setError(e);
      }
    }
    // initial attempt is required to trigger permission prompt
    // eslint-disable-next-line no-use-before-define
    return initCamera();
  };
  const checkPermissions = async () => {
    try {
      const {
        permissions
      } = await _webcamUtils.default.checkStatus();
      if (permissions) {
        // Let the video stream load first...
        await new Promise(resolve => setTimeout(resolve, _time.SECOND * 2));
        if (!mounted.current) {
          return;
        }
        setReady(READY_STATE.READY);
      } else if (mounted.current) {
        // Keep checking for permissions
        permissionChecker = setTimeout(checkPermissions, _time.SECOND);
        setReady(READY_STATE.NEED_TO_ALLOW_ACCESS);
      }
    } catch (e) {
      if (mounted.current) {
        setError(e);
      }
    }
  };
  const handleScan = data => {
    try {
      if (!data) {
        return;
      }
      urDecoder.receivePart(data);
      if (urDecoder.isComplete()) {
        const result = urDecoder.resultUR();
        handleSuccess(result).catch(setError);
      }
    } catch (e) {
      if (isReadingWallet) {
        setErrorTitle(t('QRHardwareUnknownQRCodeTitle'));
      } else {
        setErrorTitle(t('QRHardwareInvalidTransactionTitle'));
      }
      setError(new Error(t('unknownQrCode')));
    }
  };
  const initCamera = () => {
    try {
      checkPermissions();
    } catch (e) {
      if (!mounted.current) {
        return;
      }
      if (e.name === 'NotAllowedError') {
        _loglevel.default.info(`Permission denied: '${e}'`);
        setReady(READY_STATE.NEED_TO_ALLOW_ACCESS);
      } else {
        setError(e);
      }
    }
  };
  (0, _react.useEffect)(() => {
    mounted.current = true;
    checkEnvironment();
    return () => {
      mounted.current = false;
      clearTimeout(permissionChecker);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  (0, _react.useEffect)(() => {
    if (ready === READY_STATE.READY) {
      initCamera();
    } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
      checkPermissions();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [ready]);
  const tryAgain = () => {
    clearTimeout(permissionChecker);
    reset();
    checkEnvironment();
  };
  const renderError = () => {
    let title, msg;
    if (error.type === 'NO_WEBCAM_FOUND') {
      title = t('noWebcamFoundTitle');
      msg = t('noWebcamFound');
    } else if (error.message === t('unknownQrCode')) {
      if (isReadingWallet) {
        msg = t('QRHardwareUnknownWalletQRCode');
      } else {
        msg = t('unknownQrCode');
      }
    } else if (error.message === t('QRHardwareMismatchedSignId')) {
      msg = t('QRHardwareMismatchedSignId');
    } else {
      title = t('unknownCameraErrorTitle');
      msg = t('unknownCameraError');
    }
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__image"
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "images/webcam.svg",
      width: "70",
      height: "70",
      alt: ""
    })), title ? /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__title"
    }, title) : null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__error"
    }, msg), /*#__PURE__*/_react.default.createElement(_pageContainerFooter.default, {
      onCancel: () => {
        setErrorTitle('');
        handleCancel();
      },
      onSubmit: () => {
        setErrorTitle('');
        tryAgain();
      },
      cancelText: t('cancel'),
      submitText: t('tryAgain'),
      submitButtonType: "confirm"
    }));
  };
  const renderVideo = () => {
    let message;
    if (ready === READY_STATE.ACCESSING_CAMERA) {
      message = t('accessingYourCamera');
    } else if (ready === READY_STATE.READY) {
      message = t('QRHardwareScanInstructions');
    } else if (ready === READY_STATE.NEED_TO_ALLOW_ACCESS) {
      message = t('youNeedToAllowCameraAccess');
    }
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__content"
    }, /*#__PURE__*/_react.default.createElement(_enhancedReader.default, {
      handleScan: handleScan
    })), message && /*#__PURE__*/_react.default.createElement("div", {
      className: "qr-scanner__status"
    }, message));
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-scanner"
  }, error ? renderError() : renderVideo());
};
BaseReader.propTypes = {
  isReadingWallet: _propTypes.default.bool.isRequired,
  handleCancel: _propTypes.default.func.isRequired,
  handleSuccess: _propTypes.default.func.isRequired,
  setErrorTitle: _propTypes.default.func.isRequired
};
var _default = BaseReader;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\base-reader.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\enhanced-reader.js", {"../../../../shared/constants/time":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\time.ts","../../ui/spinner":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\spinner\\index.js","@zxing/browser":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@zxing\\browser\\cjs\\index.js","@zxing/library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@zxing\\library\\umd\\index.min.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cenhanced-reader.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _library = require("@zxing/library");
var _browser = require("@zxing/browser");
var _loglevel = _interopRequireDefault(require("loglevel"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _time = require("../../../../shared/constants/time");
var _spinner = _interopRequireDefault(require("../../ui/spinner"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const EnhancedReader = ({
  handleScan
}) => {
  const [canplay, setCanplay] = (0, _react.useState)(false);
  const codeReader = (0, _react.useMemo)(() => {
    const hint = new Map();
    hint.set(_library.DecodeHintType.POSSIBLE_FORMATS, [_library.BarcodeFormat.QR_CODE]);
    return new _browser.BrowserQRCodeReader(hint, {
      delayBetweenScanAttempts: _time.MILLISECOND * 100,
      delayBetweenScanSuccess: _time.MILLISECOND * 100
    });
  }, []);
  (0, _react.useEffect)(() => {
    const videoElem = document.getElementById('video');
    const canplayListener = () => {
      setCanplay(true);
    };
    videoElem.addEventListener('canplay', canplayListener);
    const promise = codeReader.decodeFromVideoDevice(undefined, 'video', result => {
      if (result) {
        handleScan(result.getText());
      }
    });
    return () => {
      videoElem.removeEventListener('canplay', canplayListener);
      promise.then(controls => {
        if (controls) {
          controls.stop();
        }
      }).catch(_loglevel.default.info);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "qr-scanner__content__video-wrapper"
  }, /*#__PURE__*/_react.default.createElement("video", {
    id: "video",
    style: {
      display: canplay ? 'block' : 'none',
      width: '100%',
      filter: 'blur(4px)'
    }
  }), canplay ? null : /*#__PURE__*/_react.default.createElement(_spinner.default, {
    color: "var(--color-warning-default)"
  }));
};
EnhancedReader.propTypes = {
  handleScan: _propTypes.default.func.isRequired
};
var _default = EnhancedReader;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\enhanced-reader.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\index.js", {"./qr-hardware-popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-popover.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _qrHardwarePopover = _interopRequireDefault(require("./qr-hardware-popover"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _qrHardwarePopover.default;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-popover.js", {"../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../../ui/popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\popover\\index.js","./qr-hardware-sign-request":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\index.js","./qr-hardware-wallet-importer":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cqr-hardware-popover.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _selectors = require("../../../selectors");
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _actions = require("../../../store/actions");
var _app = require("../../../../shared/constants/app");
var _qrHardwareWalletImporter = _interopRequireDefault(require("./qr-hardware-wallet-importer"));
var _qrHardwareSignRequest = _interopRequireDefault(require("./qr-hardware-sign-request"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const QRHardwarePopover = () => {
  var _sign$request;
  const t = (0, _useI18nContext.useI18nContext)();
  const qrHardware = (0, _reactRedux.useSelector)(_selectors.getCurrentQRHardwareState);
  const {
    sync,
    sign
  } = qrHardware;
  const showWalletImporter = sync === null || sync === void 0 ? void 0 : sync.reading;
  const showSignRequest = sign === null || sign === void 0 ? void 0 : sign.request;
  const showPopover = showWalletImporter || showSignRequest;
  const [errorTitle, setErrorTitle] = (0, _react.useState)('');
  const {
    txData
  } = (0, _reactRedux.useSelector)(state => {
    return state.confirmTransaction;
  });
  // the confirmTransaction's life cycle is not consistent with QR hardware wallet;
  // the confirmTransaction will change after the previous tx is confirmed or cancel,
  // we want to block the changing by sign request id;
  const _txData = (0, _react.useMemo)(() => {
    return txData;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [sign === null || sign === void 0 ? void 0 : (_sign$request = sign.request) === null || _sign$request === void 0 ? void 0 : _sign$request.requestId]);
  const dispatch = (0, _reactRedux.useDispatch)();
  const walletImporterCancel = (0, _react.useCallback)(() => dispatch((0, _actions.cancelSyncQRHardware)()), [dispatch]);
  const signRequestCancel = (0, _react.useCallback)(() => {
    let action = _actions.cancelTx;
    switch (_txData.type) {
      case _app.MESSAGE_TYPE.PERSONAL_SIGN:
        {
          action = _actions.cancelPersonalMsg;
          break;
        }
      case _app.MESSAGE_TYPE.ETH_SIGN:
        {
          action = _actions.cancelMsg;
          break;
        }
      case _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA:
        {
          action = _actions.cancelTypedMsg;
          break;
        }
      default:
        {
          action = _actions.cancelTx;
        }
    }
    dispatch(action(_txData));
    dispatch((0, _actions.cancelQRHardwareSignRequest)());
  }, [dispatch, _txData]);
  const title = (0, _react.useMemo)(() => {
    let _title = '';
    if (showSignRequest) {
      _title = t('QRHardwareSignRequestTitle');
    } else if (showWalletImporter) {
      _title = t('QRHardwareWalletImporterTitle');
    }
    if (errorTitle !== '') {
      _title = errorTitle;
    }
    return _title;
  }, [showSignRequest, showWalletImporter, t, errorTitle]);
  return showPopover ? /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: title,
    onClose: showWalletImporter ? walletImporterCancel : signRequestCancel
  }, showWalletImporter && /*#__PURE__*/_react.default.createElement(_qrHardwareWalletImporter.default, {
    handleCancel: walletImporterCancel,
    setErrorTitle: setErrorTitle
  }), showSignRequest && /*#__PURE__*/_react.default.createElement(_qrHardwareSignRequest.default, {
    setErrorTitle: setErrorTitle,
    handleCancel: signRequestCancel,
    request: sign.request
  })) : null;
};
var _default = QRHardwarePopover;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\qr-hardware-popover.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\index.js", {"./qr-hardware-sign-request.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\qr-hardware-sign-request.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cqr-hardware-sign-request%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _qrHardwareSignRequest = _interopRequireDefault(require("./qr-hardware-sign-request.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _qrHardwareSignRequest.default;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\player.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../../ui/page-container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\page-container\\index.js","@ngraveio/bc-ur":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@ngraveio\\bc-ur\\dist\\index.js","buffer":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\browserify\\node_modules\\buffer\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","qrcode.react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\qrcode.react\\lib\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cqr-hardware-sign-request%5Cplayer.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _qrcode = _interopRequireDefault(require("qrcode.react"));
var _bcUr = require("@ngraveio/bc-ur");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _designSystem = require("../../../../helpers/constants/design-system");
var _pageContainer = require("../../../ui/page-container");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Player = ({
  type,
  cbor,
  cancelQRHardwareSignRequest,
  toRead
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const urEncoder = (0, _react.useMemo)(() => new _bcUr.UREncoder(new _bcUr.UR(Buffer.from(cbor, 'hex'), type), 400), [cbor, type]);
  const [currentQRCode, setCurrentQRCode] = (0, _react.useState)(urEncoder.nextPart());
  (0, _react.useEffect)(() => {
    const id = setInterval(() => {
      setCurrentQRCode(urEncoder.nextPart());
    }, 100);
    return () => {
      clearInterval(id);
    };
  }, [urEncoder]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    align: _designSystem.TextAlign.Center
  }, t('QRHardwareSignRequestSubtitle'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingTop: 4,
    paddingBottom: 4,
    display: _designSystem.DISPLAY.FLEX,
    alignItems: _designSystem.AlignItems.center,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      padding: 20,
      backgroundColor: 'var(--qr-code-white-background)'
    }
  }, /*#__PURE__*/_react.default.createElement(_qrcode.default, {
    value: currentQRCode.toUpperCase(),
    size: 250
  }))), /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingBottom: 4,
    paddingLeft: 4,
    paddingRight: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    align: _designSystem.TextAlign.Center
  }, t('QRHardwareSignRequestDescription'))), /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
    onCancel: cancelQRHardwareSignRequest,
    onSubmit: toRead,
    cancelText: t('QRHardwareSignRequestCancel'),
    submitText: t('QRHardwareSignRequestGetSignature'),
    submitButtonType: "confirm"
  }));
};
Player.propTypes = {
  type: _propTypes.default.string.isRequired,
  cbor: _propTypes.default.string.isRequired,
  cancelQRHardwareSignRequest: _propTypes.default.func.isRequired,
  toRead: _propTypes.default.func.isRequired
};
var _default = Player;
exports.default = _default;

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\player.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\qr-hardware-sign-request.component.js", {"../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","./player":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\player.js","./reader":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\reader.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cqr-hardware-sign-request%5Cqr-hardware-sign-request.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _actions = require("../../../../store/actions");
var _player = _interopRequireDefault(require("./player"));
var _reader = _interopRequireDefault(require("./reader"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const QRHardwareSignRequest = ({
  request,
  handleCancel,
  setErrorTitle
}) => {
  const [status, setStatus] = (0, _react.useState)('play');
  const toRead = (0, _react.useCallback)(() => setStatus('read'), []);
  const renderPlayer = () => {
    const {
      payload
    } = request;
    return /*#__PURE__*/_react.default.createElement(_player.default, {
      type: payload.type,
      cbor: payload.cbor,
      cancelQRHardwareSignRequest: handleCancel,
      toRead: toRead
    });
  };
  const renderReader = () => {
    return /*#__PURE__*/_react.default.createElement(_reader.default, {
      cancelQRHardwareSignRequest: handleCancel,
      submitQRHardwareSignature: _actions.submitQRHardwareSignature,
      requestId: request.requestId,
      setErrorTitle: setErrorTitle
    });
  };
  if (status === 'play') {
    return renderPlayer();
  }
  return renderReader();
};
QRHardwareSignRequest.propTypes = {
  request: _propTypes.default.object.isRequired,
  handleCancel: _propTypes.default.func.isRequired,
  setErrorTitle: _propTypes.default.func.isRequired
};
var _default = QRHardwareSignRequest;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\qr-hardware-sign-request.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\reader.js", {"../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../base-reader":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\base-reader.js","@keystonehq/bc-ur-registry-eth":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@keystonehq\\bc-ur-registry-eth\\dist\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","uuid":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\uuid\\dist\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cqr-hardware-sign-request%5Creader.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _bcUrRegistryEth = require("@keystonehq/bc-ur-registry-eth");
var uuid = _interopRequireWildcard(require("uuid"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _baseReader = _interopRequireDefault(require("../base-reader"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const Reader = ({
  submitQRHardwareSignature,
  cancelQRHardwareSignRequest,
  requestId,
  setErrorTitle
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const cancel = () => {
    cancelQRHardwareSignRequest();
  };
  const handleSuccess = async ur => {
    if (ur.type === 'eth-signature') {
      const ethSignature = _bcUrRegistryEth.ETHSignature.fromCBOR(ur.cbor);
      const buffer = ethSignature.getRequestId();
      const signId = uuid.stringify(buffer);
      if (signId === requestId) {
        return await submitQRHardwareSignature(signId, ur.cbor.toString('hex'));
      }
      setErrorTitle(t('QRHardwareInvalidTransactionTitle'));
      throw new Error(t('QRHardwareMismatchedSignId'));
    } else {
      setErrorTitle(t('QRHardwareInvalidTransactionTitle'));
      throw new Error(t('unknownQrCode'));
    }
  };
  return /*#__PURE__*/_react.default.createElement(_baseReader.default, {
    isReadingWallet: false,
    handleCancel: cancel,
    handleSuccess: handleSuccess,
    setErrorTitle: setErrorTitle
  });
};
Reader.propTypes = {
  submitQRHardwareSignature: _propTypes.default.func.isRequired,
  cancelQRHardwareSignRequest: _propTypes.default.func.isRequired,
  requestId: _propTypes.default.string.isRequired,
  setErrorTitle: _propTypes.default.func.isRequired
};
var _default = Reader;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\reader.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\index.js", {"./qr-hardware-wallet-importer.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\qr-hardware-wallet-importer.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cqr-hardware-wallet-importer%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _qrHardwareWalletImporter = _interopRequireDefault(require("./qr-hardware-wallet-importer.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _qrHardwareWalletImporter.default;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\qr-hardware-wallet-importer.component.js", {"../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","../base-reader":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\qr-hardware-popover\\base-reader.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cqr-hardware-popover%5Cqr-hardware-wallet-importer%5Cqr-hardware-wallet-importer.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _actions = require("../../../../store/actions");
var _baseReader = _interopRequireDefault(require("../base-reader"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const QRHardwareWalletImporter = ({
  handleCancel,
  setErrorTitle
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const handleSuccess = async ur => {
    if (ur.type === 'crypto-hdkey') {
      return await (0, _actions.submitQRHardwareCryptoHDKey)(ur.cbor.toString('hex'));
    } else if (ur.type === 'crypto-account') {
      return await (0, _actions.submitQRHardwareCryptoAccount)(ur.cbor.toString('hex'));
    }
    setErrorTitle(t('QRHardwareUnknownQRCodeTitle'));
    throw new Error(t('unknownQrCode'));
  };
  return /*#__PURE__*/_react.default.createElement(_baseReader.default, {
    isReadingWallet: true,
    handleCancel: handleCancel,
    handleSuccess: handleSuccess,
    setErrorTitle: setErrorTitle
  });
};
QRHardwareWalletImporter.propTypes = {
  handleCancel: _propTypes.default.func.isRequired,
  setErrorTitle: _propTypes.default.func.isRequired
};
var _default = QRHardwareWalletImporter;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\qr-hardware-wallet-importer.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\recovery-phrase-reminder\\index.js", {"./recovery-phrase-reminder":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\recovery-phrase-reminder\\recovery-phrase-reminder.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Crecovery-phrase-reminder%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _recoveryPhraseReminder.default;
  }
});
var _recoveryPhraseReminder = _interopRequireDefault(require("./recovery-phrase-reminder"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\recovery-phrase-reminder\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\recovery-phrase-reminder\\recovery-phrase-reminder.js", {"../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/constants/routes":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\routes.ts","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../ui/popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\popover\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-router-dom":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Crecovery-phrase-reminder%5Crecovery-phrase-reminder.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RecoveryPhraseReminder;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRouterDom = require("react-router-dom");
var _useI18nContext = require("../../../hooks/useI18nContext");
var _box = _interopRequireDefault(require("../../ui/box"));
var _button = _interopRequireDefault(require("../../ui/button"));
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _designSystem = require("../../../helpers/constants/design-system");
var _routes = require("../../../helpers/constants/routes");
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// Components

// Helpers

function RecoveryPhraseReminder({
  onConfirm,
  hasBackedUp
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const handleBackUp = () => {
    history.push(_routes.ONBOARDING_UNLOCK_ROUTE);
  };
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    centerTitle: true,
    title: t('recoveryPhraseReminderTitle')
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    paddingRight: 4,
    paddingBottom: 6,
    paddingLeft: 4,
    className: "recovery-phrase-reminder"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    color: _designSystem.TextColor.textDefault,
    align: _designSystem.TextAlign.Center,
    variant: _designSystem.TextVariant.bodyMd,
    marginBottom: 4
  }, t('recoveryPhraseReminderSubText')), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 4,
    marginBottom: 8
  }, /*#__PURE__*/_react.default.createElement("ul", {
    className: "recovery-phrase-reminder__list"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li",
    color: _designSystem.TextColor.textDefault,
    fontWeight: _designSystem.FontWeight.Bold
  }, t('recoveryPhraseReminderItemOne')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li"
  }, t('recoveryPhraseReminderItemTwo')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "li"
  }, hasBackedUp ? t('recoveryPhraseReminderHasBackedUp') : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, t('recoveryPhraseReminderHasNotBackedUp'), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.INLINE_BLOCK,
    marginLeft: 1
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: handleBackUp,
    style: {
      fontSize: 'inherit',
      padding: 0
    }
  }, t('recoveryPhraseReminderBackupStart'))))))), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JustifyContent.center
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    width: _designSystem.BLOCK_SIZES.TWO_FIFTHS
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    onClick: onConfirm
  }, t('recoveryPhraseReminderConfirm'))))));
}
RecoveryPhraseReminder.propTypes = {
  hasBackedUp: _propTypes.default.bool.isRequired,
  onConfirm: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\recovery-phrase-reminder\\recovery-phrase-reminder.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.constants.js", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csecurity-provider-banner-message%5Csecurity-provider-banner-message.constants.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SECURITY_PROVIDER_MESSAGE_SEVERITIES = void 0;
const SECURITY_PROVIDER_MESSAGE_SEVERITIES = {
  NOT_MALICIOUS: 0,
  MALICIOUS: 1,
  NOT_SAFE: 2
};
exports.SECURITY_PROVIDER_MESSAGE_SEVERITIES = SECURITY_PROVIDER_MESSAGE_SEVERITIES;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.constants.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.js", {"../../../../.storybook/i18n":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\.storybook\\i18n.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","./security-provider-banner-message.constants":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.constants.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csecurity-provider-banner-message%5Csecurity-provider-banner-message.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SecurityProviderBannerMessage;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _designSystem = require("../../../helpers/constants/design-system");
var _i18n = require("../../../../.storybook/i18n");
var _componentLibrary = require("../../component-library");
var _securityProviderBannerMessage = require("./security-provider-banner-message.constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SecurityProviderBannerMessage({
  securityProviderResponse
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  let messageTitle;
  let messageText;
  let severity;
  if (securityProviderResponse.flagAsDangerous === _securityProviderBannerMessage.SECURITY_PROVIDER_MESSAGE_SEVERITIES.MALICIOUS) {
    messageTitle = securityProviderResponse.reason_header === '' ? t('requestFlaggedAsMaliciousFallbackCopyReasonTitle') : securityProviderResponse.reason_header;
    messageText = securityProviderResponse.reason === '' ? t('requestFlaggedAsMaliciousFallbackCopyReason') : securityProviderResponse.reason;
    severity = _designSystem.SEVERITIES.DANGER;
  } else if (securityProviderResponse.flagAsDangerous === _securityProviderBannerMessage.SECURITY_PROVIDER_MESSAGE_SEVERITIES.NOT_SAFE) {
    messageTitle = t('requestMayNotBeSafe');
    messageText = t('requestMayNotBeSafeError');
    severity = _designSystem.SEVERITIES.WARNING;
  } else {
    messageTitle = t('requestNotVerified');
    messageText = t('requestNotVerifiedError');
    severity = _designSystem.SEVERITIES.WARNING;
  }
  return /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    marginTop: 4,
    marginRight: 4,
    marginLeft: 4,
    title: messageTitle,
    severity: severity
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, messageText), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodySm,
    as: "h6",
    color: _designSystem.Color.textAlternative
  }, t('securityAlert', [/*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    key: "opensea_link",
    size: _designSystem.Size.inherit,
    href: "https://opensea.io/",
    target: "_blank"
  }, t('openSeaNew')), /*#__PURE__*/_react.default.createElement(_componentLibrary.ButtonLink, {
    key: "blockaid_link",
    size: _designSystem.Size.inherit,
    href: "https://blockaid.io/",
    target: "_blank"
  }, t('blockaid'))])));
}
SecurityProviderBannerMessage.propTypes = {
  securityProviderResponse: _propTypes.default.object
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\selected-account\\index.js", {"./selected-account.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\selected-account\\selected-account.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cselected-account%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _selectedAccount = _interopRequireDefault(require("./selected-account.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = _selectedAccount.default;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\selected-account\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\selected-account\\selected-account.component.js", {"../../../../shared/constants/time":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\time.ts","../../../../shared/modules/hexstring-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\hexstring-utils.ts","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\tooltip\\index.js","copy-to-clipboard":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\copy-to-clipboard\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cselected-account%5Cselected-account.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));
var _util = require("../../../helpers/utils/util");
var _tooltip = _interopRequireDefault(require("../../ui/tooltip"));
var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");
var _time = require("../../../../shared/constants/time");
var _componentLibrary = require("../../component-library");
var _designSystem = require("../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class SelectedAccount extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      copied: false
    });
  }
  componentDidMount() {
    this.copyTimeout = null;
  }
  componentWillUnmount() {
    if (this.copyTimeout) {
      clearTimeout(this.copyTimeout);
      this.copyTimeout = null;
    }
  }
  render() {
    const {
      t
    } = this.context;
    const {
      selectedIdentity
    } = this.props;
    const checksummedAddress = (0, _hexstringUtils.toChecksumHexAddress)(selectedIdentity.address);
    let title = this.state.copied ? t('copiedExclamation') : t('copyToClipboard');
    let showAccountCopyIcon = true;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account"
    }, /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      wrapperClassName: "selected-account__tooltip-wrapper",
      position: "bottom",
      title: title
    }, /*#__PURE__*/_react.default.createElement("button", {
      className: "selected-account__clickable",
      "data-testid": "selected-account-click",
      onClick: () => {
        this.setState({
          copied: true
        });
        this.copyTimeout = setTimeout(() => this.setState({
          copied: false
        }), _time.SECOND * 3);
        (0, _copyToClipboard.default)(checksummedAddress);
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account__name"
    }, selectedIdentity.name), /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account__address"
    }, (0, _util.shortenAddress)(checksummedAddress), showAccountCopyIcon && /*#__PURE__*/_react.default.createElement("div", {
      className: "selected-account__copy"
    }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
      name: this.state.copied ? _componentLibrary.IconName.CopySuccess : _componentLibrary.IconName.Copy,
      size: _componentLibrary.IconSize.Sm,
      color: _designSystem.IconColor.iconAlternative
    }))))));
  }
}
_defineProperty(SelectedAccount, "contextTypes", {
  t: _propTypes.default.func
});
_defineProperty(SelectedAccount, "propTypes", {
  selectedIdentity: _propTypes.default.object.isRequired
});
var _default = SelectedAccount;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\selected-account\\selected-account.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\selected-account\\selected-account.container.js", {"../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","./selected-account.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\selected-account\\selected-account.component.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cselected-account%5Cselected-account.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _selectors = require("../../../selectors");
var _selectedAccount = _interopRequireDefault(require("./selected-account.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mapStateToProps = state => {
  return {
    selectedIdentity: (0, _selectors.getSelectedIdentity)(state)
  };
};
var _default = (0, _reactRedux.connect)(mapStateToProps)(_selectedAccount.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\selected-account\\selected-account.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\set-approval-for-all-warning\\index.js", {"./set-approval-for-all-warning":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\set-approval-for-all-warning\\set-approval-for-all-warning.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cset-approval-for-all-warning%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _setApprovalForAllWarning.default;
  }
});
var _setApprovalForAllWarning = _interopRequireDefault(require("./set-approval-for-all-warning"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\set-approval-for-all-warning\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\set-approval-for-all-warning\\set-approval-for-all-warning.js", {"../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../ui/identicon":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\identicon\\index.js","../../ui/popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\popover\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Cset-approval-for-all-warning%5Cset-approval-for-all-warning.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../hooks/useI18nContext");
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _box = _interopRequireDefault(require("../../ui/box"));
var _designSystem = require("../../../helpers/constants/design-system");
var _identicon = _interopRequireDefault(require("../../ui/identicon"));
var _util = require("../../../helpers/utils/util");
var _componentLibrary = require("../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SetApproveForAllWarning = ({
  collectionName,
  senderAddress,
  name,
  total,
  isERC721,
  onSubmit,
  onCancel
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  const footer = /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    justifyContent: _designSystem.JustifyContent.SPACE_BETWEEN,
    className: "set-approval-for-all-warning__footer",
    gap: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
    className: "set-approval-for-all-warning__footer__approve-button",
    variant: _componentLibrary.BUTTON_VARIANT.PRIMARY,
    danger: true,
    onClick: onSubmit
  }, t('approveButtonText')), /*#__PURE__*/_react.default.createElement(_componentLibrary.Button, {
    className: "set-approval-for-all-warning__footer__cancel-button",
    variant: _componentLibrary.BUTTON_VARIANT.SECONDARY,
    onClick: onCancel
  }, t('reject')));
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "set-approval-for-all-warning__content",
    footer: footer
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    padding: 4,
    className: "set-approval-for-all-warning__content__header"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Danger,
    className: "set-approval-for-all-warning__content__header__warning-icon"
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.headingSm,
    as: "h4"
  }, t('yourNFTmayBeAtRisk'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    padding: 4,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    className: "set-approval-for-all-warning__content__account"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: senderAddress,
    diameter: 32
  }), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMd,
    as: "h5",
    marginLeft: 2,
    className: "set-approval-for-all-warning__content__account-name"
  }, /*#__PURE__*/_react.default.createElement("strong", null, name), " ", ` (${(0, _util.shortenAddress)(senderAddress)})`)), isERC721 && total && /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, null, `${t('total')}: ${total}`)), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    margin: 4,
    marginTop: 4,
    marginBottom: 4,
    variant: _designSystem.TextVariant.bodySm,
    as: "h6"
  }, t('nftWarningContent', [/*#__PURE__*/_react.default.createElement("strong", {
    key: "non_custodial_bold"
  }, t('nftWarningContentBold', [collectionName || ''])), /*#__PURE__*/_react.default.createElement("strong", {
    key: "non_custodial_grey"
  }, t('nftWarningContentGrey'))])));
};
SetApproveForAllWarning.propTypes = {
  /**
   * NFT collection name that is being approved
   */
  collectionName: _propTypes.default.string,
  /**
   * Address of a current user that is approving collection
   */
  senderAddress: _propTypes.default.string,
  /**
   * Name of a current user that is approving collection
   */
  name: _propTypes.default.string,
  /**
   * Total number of items that are being approved
   */
  total: _propTypes.default.string,
  /**
   * Is asset standard ERC721
   */
  isERC721: _propTypes.default.bool,
  /**
   * Function that approves collection
   */
  onSubmit: _propTypes.default.func,
  /**
   * Function that rejects collection
   */
  onCancel: _propTypes.default.func
};
var _default = SetApproveForAllWarning;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\set-approval-for-all-warning\\set-approval-for-all-warning.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-original\\index.js", {"./signature-request-original.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-original\\signature-request-original.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request-original%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestOriginal.default;
  }
});
var _signatureRequestOriginal = _interopRequireDefault(require("./signature-request-original.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-original\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-original\\signature-request-original-warning\\index.js", {"./signature-request-original-warning":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-original\\signature-request-original-warning\\signature-request-original-warning.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request-original%5Csignature-request-original-warning%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestOriginalWarning.default;
  }
});
var _signatureRequestOriginalWarning = _interopRequireDefault(require("./signature-request-original-warning"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-original\\signature-request-original-warning\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-original\\signature-request-original-warning\\signature-request-original-warning.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../../hooks/useI18nContext":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\hooks\\useI18nContext.js","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../../ui/identicon":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\identicon\\index.js","../../../ui/popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\popover\\index.js","../../../ui/typography":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\typography\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request-original%5Csignature-request-original-warning%5Csignature-request-original-warning.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useI18nContext = require("../../../../hooks/useI18nContext");
var _popover = _interopRequireDefault(require("../../../ui/popover"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _button = _interopRequireDefault(require("../../../ui/button"));
var _typography = _interopRequireDefault(require("../../../ui/typography"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _identicon = _interopRequireDefault(require("../../../ui/identicon"));
var _util = require("../../../../helpers/utils/util");
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SignatureRequestOriginalWarning = ({
  senderAddress,
  name,
  onSubmit,
  onCancel
}) => {
  const t = (0, _useI18nContext.useI18nContext)();
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "signature-request-warning__content"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.ROW,
    padding: 4,
    className: "signature-request-warning__content__header"
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Danger,
    color: _designSystem.IconColor.errorDefault,
    className: "signature-request-warning__content__header__warning-icon"
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H4,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('yourFundsMayBeAtRisk'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    padding: 4,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    className: "signature-request-warning__content__account"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    address: senderAddress,
    diameter: 32
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H5,
    marginLeft: 2,
    className: "signature-request-warning__content__account-name"
  }, /*#__PURE__*/_react.default.createElement("b", null, name), " ", ` (${(0, _util.shortenAddress)(senderAddress)})`))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.TextColor.textAlternative,
    margin: 4,
    marginTop: 4,
    marginBottom: 4,
    variant: _designSystem.TypographyVariant.H6
  }, t('signatureRequestWarning', [/*#__PURE__*/_react.default.createElement("a", {
    href: "https://consensys.net/blog/metamask/the-seal-of-approval-know-what-youre-consenting-to-with-permissions-and-approvals-in-metamask/",
    target: "_blank",
    type: "link",
    key: "non_custodial_link",
    rel: "noopener noreferrer",
    style: {
      color: 'var(--color-primary-default)'
    }
  }, t('learnMoreUpperCase'))])), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    justifyContent: _designSystem.JustifyContent.spaceBetween,
    padding: 4,
    className: "signature-request-warning__footer"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "signature-request-warning__footer__sign-button",
    type: "danger-primary",
    onClick: onSubmit
  }, t('sign')), /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "signature-request-warning__footer__reject-button",
    type: "secondary",
    onClick: onCancel
  }, t('reject'))));
};
SignatureRequestOriginalWarning.propTypes = {
  senderAddress: _propTypes.default.string,
  name: _propTypes.default.string,
  onSubmit: _propTypes.default.func,
  onCancel: _propTypes.default.func
};
var _default = SignatureRequestOriginalWarning;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-original\\signature-request-original-warning\\signature-request-original-warning.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-original\\signature-request-original.component.js", {"../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../../shared/constants/common":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\common.ts","../../../../shared/modules/Numeric":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\Numeric.ts","../../../../shared/modules/conversion.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\conversion.utils.ts","../../../../shared/modules/hexstring-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\hexstring-utils.ts","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/confirm-tx.util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\confirm-tx.util.ts","../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../ui/button":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\button\\index.js","../../ui/page-container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\page-container\\index.js","../../ui/site-origin":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\site-origin\\index.js","../../ui/typography/typography":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\typography\\typography.js","../confirm-page-container/confirm-page-container-navigation":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\confirm-page-container\\confirm-page-container-navigation\\index.js","../ledger-instruction-field":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\ledger-instruction-field\\index.js","../network-account-balance-header":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\network-account-balance-header\\index.js","../security-provider-banner-message/security-provider-banner-message":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.js","../security-provider-banner-message/security-provider-banner-message.constants":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.constants.js","./signature-request-original-warning":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-original\\signature-request-original-warning\\index.js","buffer":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\browserify\\node_modules\\buffer\\index.js","classnames":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\classnames\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-inspector":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-inspector\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request-original%5Csignature-request-original.component.js
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactInspector = require("react-inspector");
var _ledgerInstructionField = _interopRequireDefault(require("../ledger-instruction-field"));
var _app = require("../../../../shared/constants/app");
var _util = require("../../../helpers/utils/util");
var _hexstringUtils = require("../../../../shared/modules/hexstring-utils");
var _button = _interopRequireDefault(require("../../ui/button"));
var _siteOrigin = _interopRequireDefault(require("../../ui/site-origin"));
var _networkAccountBalanceHeader = _interopRequireDefault(require("../network-account-balance-header"));
var _typography = _interopRequireDefault(require("../../ui/typography/typography"));
var _pageContainer = require("../../ui/page-container");
var _designSystem = require("../../../helpers/constants/design-system");
var _Numeric = require("../../../../shared/modules/Numeric");
var _common = require("../../../../shared/constants/common");
var _confirmPageContainerNavigation = _interopRequireDefault(require("../confirm-page-container/confirm-page-container-navigation"));
var _securityProviderBannerMessage = _interopRequireDefault(require("../security-provider-banner-message/security-provider-banner-message"));
var _securityProviderBannerMessage2 = require("../security-provider-banner-message/security-provider-banner-message.constants");
var _confirmTx = require("../../../helpers/utils/confirm-tx.util");
var _conversion = require("../../../../shared/modules/conversion.utils");
var _signatureRequestOriginalWarning = _interopRequireDefault(require("./signature-request-original-warning"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class SignatureRequestOriginal extends _react.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      showSignatureRequestWarning: false
    });
    _defineProperty(this, "msgHexToText", hex => {
      try {
        const stripped = (0, _hexstringUtils.stripHexPrefix)(hex);
        const buff = Buffer.from(stripped, 'hex');
        return buff.length === 32 ? hex : buff.toString('utf8');
      } catch (e) {
        return hex;
      }
    });
    _defineProperty(this, "renderAccountInfo", () => {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__account-info"
      }, this.renderAccount(), this.renderRequestIcon(), this.renderBalance());
    });
    _defineProperty(this, "renderTypedData", data => {
      const {
        t
      } = this.context;
      const {
        domain,
        message
      } = JSON.parse(data);
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__typed-container"
      }, domain ? /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h1", null, t('domain')), /*#__PURE__*/_react.default.createElement(_reactInspector.ObjectInspector, {
        data: domain,
        expandLevel: 1,
        name: "domain"
      })) : '', message ? /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h1", null, t('message')), /*#__PURE__*/_react.default.createElement(_reactInspector.ObjectInspector, {
        data: message,
        expandLevel: 1,
        name: "message"
      })) : '');
    });
    _defineProperty(this, "renderBody", () => {
      var _txData$securityProvi, _txData$securityProvi2;
      let rows;
      const notice = `${this.context.t('youSign')}:`;
      const {
        txData,
        subjectMetadata
      } = this.props;
      const {
        type,
        msgParams: {
          data
        }
      } = txData;
      if (type === _app.MESSAGE_TYPE.PERSONAL_SIGN) {
        rows = [{
          name: this.context.t('message'),
          value: this.msgHexToText(data)
        }];
      } else if (type === _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA) {
        rows = data;
      } else if (type === _app.MESSAGE_TYPE.ETH_SIGN) {
        rows = [{
          name: this.context.t('message'),
          value: data
        }];
      }
      const targetSubjectMetadata = txData.msgParams.origin ? subjectMetadata === null || subjectMetadata === void 0 ? void 0 : subjectMetadata[txData.msgParams.origin] : null;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__body"
      }, (txData === null || txData === void 0 ? void 0 : (_txData$securityProvi = txData.securityProviderResponse) === null || _txData$securityProvi === void 0 ? void 0 : _txData$securityProvi.flagAsDangerous) !== undefined && (txData === null || txData === void 0 ? void 0 : (_txData$securityProvi2 = txData.securityProviderResponse) === null || _txData$securityProvi2 === void 0 ? void 0 : _txData$securityProvi2.flagAsDangerous) !== _securityProviderBannerMessage2.SECURITY_PROVIDER_MESSAGE_SEVERITIES.NOT_MALICIOUS || txData !== null && txData !== void 0 && txData.securityProviderResponse && Object.keys(txData.securityProviderResponse).length === 0 ? /*#__PURE__*/_react.default.createElement(_securityProviderBannerMessage.default, {
        securityProviderResponse: txData.securityProviderResponse
      }) : null, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__origin"
      }, /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
        title: txData.msgParams.origin,
        siteOrigin: txData.msgParams.origin,
        iconSrc: targetSubjectMetadata === null || targetSubjectMetadata === void 0 ? void 0 : targetSubjectMetadata.iconUrl,
        iconName: (0, _util.getURLHostName)(targetSubjectMetadata === null || targetSubjectMetadata === void 0 ? void 0 : targetSubjectMetadata.origin) || (targetSubjectMetadata === null || targetSubjectMetadata === void 0 ? void 0 : targetSubjectMetadata.origin),
        chip: true
      })), /*#__PURE__*/_react.default.createElement(_typography.default, {
        className: "request-signature__content__title",
        variant: _designSystem.TypographyVariant.H3,
        fontWeight: _designSystem.FONT_WEIGHT.BOLD
      }, this.context.t('sigRequest')), /*#__PURE__*/_react.default.createElement(_typography.default, {
        className: "request-signature__content__subtitle",
        variant: _designSystem.TypographyVariant.H7,
        color: _designSystem.TextColor.textAlternative,
        align: _designSystem.TEXT_ALIGN.CENTER,
        margin: 12,
        marginTop: 3
      }, this.context.t('signatureRequestGuidance')), /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)('request-signature__notice')
      }, notice), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__rows"
      }, rows.map(({
        name,
        value
      }, index) => {
        if (typeof value === 'boolean') {
          // eslint-disable-next-line no-param-reassign
          value = value.toString();
        }
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "request-signature__row",
          key: `request-signature-row-${index}`
        }, /*#__PURE__*/_react.default.createElement("div", {
          className: "request-signature__row-title"
        }, (0, _util.sanitizeString)(`${name}:`)), /*#__PURE__*/_react.default.createElement("div", {
          className: "request-signature__row-value"
        }, (0, _util.sanitizeString)(value)));
      })));
    });
    _defineProperty(this, "onSubmit", async event => {
      const {
        clearConfirmTransaction,
        history,
        mostRecentOverviewPage,
        sign
      } = this.props;
      await sign(event);
      clearConfirmTransaction();
      history.push(mostRecentOverviewPage);
    });
    _defineProperty(this, "onCancel", async event => {
      const {
        clearConfirmTransaction,
        history,
        mostRecentOverviewPage,
        cancel
      } = this.props;
      await cancel(event);
      clearConfirmTransaction();
      history.push(mostRecentOverviewPage);
    });
    _defineProperty(this, "renderFooter", () => {
      const {
        cancel,
        sign,
        clearConfirmTransaction,
        history,
        mostRecentOverviewPage,
        txData: {
          type
        },
        hardwareWalletRequiresConnection
      } = this.props;
      const {
        t
      } = this.context;
      return /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
        cancelText: t('reject'),
        submitText: t('sign'),
        onCancel: async event => {
          await cancel(event);
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        },
        onSubmit: async event => {
          if (type === _app.MESSAGE_TYPE.ETH_SIGN) {
            this.setState({
              showSignatureRequestWarning: true
            });
          } else {
            await sign(event);
            clearConfirmTransaction();
            history.push(mostRecentOverviewPage);
          }
        },
        disabled: hardwareWalletRequiresConnection
      });
    });
    _defineProperty(this, "handleCancelAll", () => {
      const {
        cancelAll,
        clearConfirmTransaction,
        history,
        mostRecentOverviewPage,
        showRejectTransactionsConfirmationModal,
        messagesCount
      } = this.props;
      const unapprovedTxCount = messagesCount;
      showRejectTransactionsConfirmationModal({
        unapprovedTxCount,
        onSubmit: async () => {
          await cancelAll();
          clearConfirmTransaction();
          history.push(mostRecentOverviewPage);
        }
      });
    });
    _defineProperty(this, "render", () => {
      const {
        providerConfig,
        messagesCount,
        nativeCurrency,
        currentCurrency,
        fromAccount: {
          address,
          balance,
          name
        },
        conversionRate
      } = this.props;
      const {
        showSignatureRequestWarning
      } = this.state;
      const {
        t
      } = this.context;
      const rejectNText = t('rejectRequestsN', [messagesCount]);
      const networkName = (0, _util.getNetworkNameFromProviderType)(providerConfig.type);
      const currentNetwork = networkName === '' ? providerConfig.nickname || t('unknownNetwork') : t(networkName);
      const balanceInBaseAsset = conversionRate ? (0, _confirmTx.formatCurrency)((0, _conversion.getValueFromWeiHex)({
        value: balance,
        fromCurrency: nativeCurrency,
        toCurrency: currentCurrency,
        conversionRate,
        numberOfDecimals: 6,
        toDenomination: _common.EtherDenomination.ETH
      }), currentCurrency) : new _Numeric.Numeric(balance, 16, _common.EtherDenomination.WEI).toDenomination(_common.EtherDenomination.ETH).round(6).toBase(10).toString();
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__container"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__navigation"
      }, /*#__PURE__*/_react.default.createElement(_confirmPageContainerNavigation.default, null)), /*#__PURE__*/_react.default.createElement("div", {
        className: "request-signature__account"
      }, /*#__PURE__*/_react.default.createElement(_networkAccountBalanceHeader.default, {
        networkName: currentNetwork,
        accountName: name,
        accountBalance: balanceInBaseAsset,
        tokenName: conversionRate ? currentCurrency === null || currentCurrency === void 0 ? void 0 : currentCurrency.toUpperCase() : nativeCurrency,
        accountAddress: address
      })), this.renderBody(), this.props.isLedgerWallet ? /*#__PURE__*/_react.default.createElement("div", {
        className: "confirm-approve-content__ledger-instruction-wrapper"
      }, /*#__PURE__*/_react.default.createElement(_ledgerInstructionField.default, {
        showDataInstruction: true
      })) : null, showSignatureRequestWarning && /*#__PURE__*/_react.default.createElement(_signatureRequestOriginalWarning.default, {
        senderAddress: address,
        name: name,
        onSubmit: async event => await this.onSubmit(event),
        onCancel: async event => await this.onCancel(event)
      }), this.renderFooter(), messagesCount > 1 ? /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "link",
        className: "request-signature__container__reject",
        onClick: () => this.handleCancelAll()
      }, rejectNText) : null);
    });
  }
}
exports.default = SignatureRequestOriginal;
_defineProperty(SignatureRequestOriginal, "contextTypes", {
  t: _propTypes.default.func.isRequired
});
_defineProperty(SignatureRequestOriginal, "propTypes", {
  fromAccount: _propTypes.default.shape({
    address: _propTypes.default.string.isRequired,
    balance: _propTypes.default.string,
    name: _propTypes.default.string
  }).isRequired,
  cancel: _propTypes.default.func.isRequired,
  clearConfirmTransaction: _propTypes.default.func.isRequired,
  history: _propTypes.default.object.isRequired,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  sign: _propTypes.default.func.isRequired,
  txData: _propTypes.default.object.isRequired,
  subjectMetadata: _propTypes.default.object,
  hardwareWalletRequiresConnection: _propTypes.default.bool,
  isLedgerWallet: _propTypes.default.bool,
  nativeCurrency: _propTypes.default.string.isRequired,
  currentCurrency: _propTypes.default.string.isRequired,
  conversionRate: _propTypes.default.number,
  messagesCount: _propTypes.default.number,
  showRejectTransactionsConfirmationModal: _propTypes.default.func.isRequired,
  cancelAll: _propTypes.default.func.isRequired,
  providerConfig: _propTypes.default.object
});

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-original\\signature-request-original.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-original\\signature-request-original.container.js", {"../../../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../../ducks/confirm-transaction/confirm-transaction.duck":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../../ducks/history/history":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\history\\history.js","../../../ducks/metamask/metamask":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\metamask\\metamask.js","../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../store/actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","./signature-request-original.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-original\\signature-request-original.component.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-router-dom\\index.js","redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request-original%5Csignature-request-original.container.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _reactRouterDom = require("react-router-dom");
var _app = require("../../../../shared/constants/app");
var _actions = require("../../../store/actions");
var _selectors = require("../../../selectors");
var _util = require("../../../helpers/utils/util");
var _confirmTransaction = require("../../../ducks/confirm-transaction/confirm-transaction.duck");
var _history = require("../../../ducks/history/history");
var _metamask = require("../../../ducks/metamask/metamask");
var _signatureRequestOriginal = _interopRequireDefault(require("./signature-request-original.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function mapStateToProps(state, ownProps) {
  const {
    msgParams: {
      from
    }
  } = ownProps.txData;
  const providerConfig = (0, _metamask.getProviderConfig)(state);
  const hardwareWalletRequiresConnection = (0, _selectors.doesAddressRequireLedgerHidConnection)(state, from);
  const isLedgerWallet = (0, _metamask.isAddressLedger)(state, from);
  const messagesList = (0, _selectors.unconfirmedMessagesHashSelector)(state);
  const messagesCount = (0, _selectors.getTotalUnapprovedMessagesCount)(state);
  const {
    useNativeCurrencyAsPrimaryCurrency
  } = (0, _selectors.getPreferences)(state);
  return {
    requester: null,
    requesterAddress: null,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    hardwareWalletRequiresConnection,
    isLedgerWallet,
    nativeCurrency: (0, _metamask.getNativeCurrency)(state),
    currentCurrency: (0, _selectors.getCurrentCurrency)(state),
    conversionRate: useNativeCurrencyAsPrimaryCurrency ? null : (0, _selectors.conversionRateSelector)(state),
    // not passed to component
    allAccounts: (0, _selectors.accountsWithSendEtherInfoSelector)(state),
    subjectMetadata: (0, _selectors.getSubjectMetadata)(state),
    messagesList,
    messagesCount,
    providerConfig
  };
}
function mapDispatchToProps(dispatch) {
  return {
    goHome: () => dispatch((0, _actions.goHome)()),
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    showRejectTransactionsConfirmationModal: ({
      onSubmit,
      unapprovedTxCount: messagesCount
    }) => {
      return dispatch((0, _actions.showModal)({
        name: 'REJECT_TRANSACTIONS',
        onSubmit,
        unapprovedTxCount: messagesCount,
        isRequestType: true
      }));
    },
    cancelAll: messagesList => dispatch((0, _actions.cancelMsgs)(messagesList))
  };
}
function mergeProps(stateProps, dispatchProps, ownProps) {
  const {
    signPersonalMessage,
    signTypedMessage,
    cancelPersonalMessage,
    cancelTypedMessage,
    signMessage,
    cancelMessage,
    txData
  } = ownProps;
  const {
    allAccounts,
    messagesList,
    ...otherStateProps
  } = stateProps;
  const {
    type,
    msgParams: {
      from
    }
  } = txData;
  const fromAccount = (0, _util.getAccountByAddress)(allAccounts, from);
  const {
    cancelAll: dispatchCancelAll
  } = dispatchProps;
  let cancel;
  let sign;
  if (type === _app.MESSAGE_TYPE.PERSONAL_SIGN) {
    cancel = cancelPersonalMessage;
    sign = signPersonalMessage;
  } else if (type === _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA) {
    cancel = cancelTypedMessage;
    sign = signTypedMessage;
  } else if (type === _app.MESSAGE_TYPE.ETH_SIGN) {
    cancel = cancelMessage;
    sign = signMessage;
  }
  return {
    ...ownProps,
    ...otherStateProps,
    ...dispatchProps,
    fromAccount,
    txData,
    cancel,
    sign,
    cancelAll: () => dispatchCancelAll((0, _util.valuesFor)(messagesList))
  };
}
var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps))(_signatureRequestOriginal.default);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-original\\signature-request-original.container.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\index.js", {"./signature-request-siwe":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestSiwe.default;
  }
});
var _signatureRequestSiwe = _interopRequireDefault(require("./signature-request-siwe"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\index.js", {"./signature-request-siwe-header":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\signature-request-siwe-header.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Csignature-request-siwe-header%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestSiweHeader.default;
  }
});
var _signatureRequestSiweHeader = _interopRequireDefault(require("./signature-request-siwe-header"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\signature-request-siwe-header.js", {"../../../../contexts/i18n":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\i18n.js","../../../ui/tooltip":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\tooltip\\index.js","../../account-list-item":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\account-list-item\\index.js","../../permissions-connect-header":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\permissions-connect-header\\index.js","../signature-request-siwe-icon":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-icon\\index.js","../signature-request-siwe-tag":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-tag\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Csignature-request-siwe-header%5Csignature-request-siwe-header.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SignatureRequestSIWEHeader;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _accountListItem = _interopRequireDefault(require("../../account-list-item"));
var _i18n = require("../../../../contexts/i18n");
var _permissionsConnectHeader = _interopRequireDefault(require("../../permissions-connect-header"));
var _signatureRequestSiweIcon = _interopRequireDefault(require("../signature-request-siwe-icon"));
var _signatureRequestSiweTag = _interopRequireDefault(require("../signature-request-siwe-tag"));
var _tooltip = _interopRequireDefault(require("../../../ui/tooltip"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SignatureRequestSIWEHeader({
  fromAccount,
  domain,
  isSIWEDomainValid,
  subjectMetadata
}) {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "signature-request-siwe-header"
  }, /*#__PURE__*/_react.default.createElement(_permissionsConnectHeader.default, {
    iconUrl: subjectMetadata.iconUrl,
    iconName: subjectMetadata.name,
    headerTitle: t('SIWESiteRequestTitle'),
    headerText: t('SIWESiteRequestSubtitle'),
    siteOrigin: domain,
    className: isSIWEDomainValid ? '' : 'bad-domain',
    leftIcon: !isSIWEDomainValid && /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      position: "bottom",
      html: /*#__PURE__*/_react.default.createElement("p", null, t('SIWEDomainWarningBody', [domain]))
    }, /*#__PURE__*/_react.default.createElement(_signatureRequestSiweIcon.default, null)),
    rightIcon: !isSIWEDomainValid && /*#__PURE__*/_react.default.createElement(_tooltip.default, {
      position: "bottom",
      html: /*#__PURE__*/_react.default.createElement("p", null, t('SIWEDomainWarningBody', [domain]))
    }, /*#__PURE__*/_react.default.createElement(_signatureRequestSiweTag.default, {
      text: t('SIWEDomainWarningLabel')
    }))
  }), fromAccount && /*#__PURE__*/_react.default.createElement(_accountListItem.default, {
    account: fromAccount,
    className: "signature-request-siwe-header__account-list-item"
  }));
}
SignatureRequestSIWEHeader.propTypes = {
  /**
   * The account that is requesting permissions
   */
  fromAccount: _propTypes.default.object,
  /**
   * The domain that the request is for
   */
  domain: _propTypes.default.string,
  /**
   * Whether the domain is valid
   */
  isSIWEDomainValid: _propTypes.default.bool,
  /**
   * The metadata for the subject. This is used to display the icon and name
   * and is selected from the domain in the SIWE request.
   */
  subjectMetadata: _propTypes.default.object
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\signature-request-siwe-header.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-icon\\index.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Csignature-request-siwe-icon%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SignatureRequestSIWEIcon = () => {
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-siwe-icon",
    display: _designSystem.DISPLAY.INLINE_FLEX,
    alignItems: _designSystem.AlignItems.center,
    backgroundColor: _designSystem.Color.errorDefault,
    justifyContent: _designSystem.JustifyContent.center
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Icon, {
    name: _componentLibrary.IconName.Danger,
    color: _designSystem.Color.errorInverse
  }));
};
var _default = SignatureRequestSIWEIcon;
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\signature-request-siwe-icon\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\index.js", {"./signature-request-siwe-message":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\signature-request-siwe-message.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Csignature-request-siwe-message%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestSiweMessage.default;
  }
});
var _signatureRequestSiweMessage = _interopRequireDefault(require("./signature-request-siwe-message"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\signature-request-siwe-message.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Csignature-request-siwe-message%5Csignature-request-siwe-message.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _box = _interopRequireDefault(require("../../../ui/box"));
var _componentLibrary = require("../../../component-library");
var _designSystem = require("../../../../helpers/constants/design-system");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SignatureRequestSIWEMessage = ({
  data
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-siwe-message"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN
  }, data.map(({
    label,
    value
  }, i) => /*#__PURE__*/_react.default.createElement(_box.default, {
    key: i.toString(),
    marginTop: 2,
    marginBottom: 2
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    as: "h4",
    variant: _designSystem.TextVariant.bodyLgMedium,
    marginTop: 2,
    marginBottom: 2
  }, label), /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    className: "signature-request-siwe-message__sub-text",
    overflowWrap: _designSystem.OVERFLOW_WRAP.BREAK_WORD,
    marginTop: 2,
    marginBottom: 2
  }, value)))));
};
SignatureRequestSIWEMessage.propTypes = {
  /**
   * The data array that contains objects of data about the message
   */
  data: _propTypes.default.arrayOf(_propTypes.default.shape({
    /**
     * The label or title of the value data
     */
    label: _propTypes.default.string,
    /**
     * The value of the data
     */
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
  }))
};
var _default = /*#__PURE__*/_react.default.memo(SignatureRequestSIWEMessage);
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\signature-request-siwe-message.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-tag\\index.js", {"../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Csignature-request-siwe-tag%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _componentLibrary = require("../../../component-library");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const SignatureRequestSIWETag = ({
  text
}) => {
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-siwe-tag",
    marginRight: 1,
    display: _designSystem.DISPLAY.INLINE_FLEX,
    alignItems: _designSystem.AlignItems.center,
    backgroundColor: _designSystem.BackgroundColor.errorDefault,
    borderRadius: _designSystem.Size.XL,
    paddingLeft: 4,
    paddingRight: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    margin: 0,
    variant: _designSystem.TextVariant.bodySmBold,
    as: "h6",
    color: _designSystem.TextColor.errorInverse
  }, text));
};
var _default = SignatureRequestSIWETag;
exports.default = _default;
SignatureRequestSIWETag.propTypes = {
  /**
   * The text to display in the tag
   */
  text: _propTypes.default.string
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\signature-request-siwe-tag\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe.js", {"../../../../shared/modules/siwe":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\siwe.js","../../../contexts/i18n":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\contexts\\i18n.js","../../../ducks/metamask/metamask":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../component-library":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\component-library\\index.js","../../ui/check-box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\check-box\\index.js","../../ui/page-container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\page-container\\index.js","../../ui/popover":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\popover\\index.js","../ledger-instruction-field":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\ledger-instruction-field\\index.js","../security-provider-banner-message/security-provider-banner-message":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.js","../security-provider-banner-message/security-provider-banner-message.constants":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\security-provider-banner-message\\security-provider-banner-message.constants.js","./signature-request-siwe-header":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-header\\index.js","./signature-request-siwe-message":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request-siwe\\signature-request-siwe-message\\index.js","@metamask/controller-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@metamask\\controller-utils\\dist\\index.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request-siwe%5Csignature-request-siwe.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SignatureRequestSIWE;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactRedux = require("react-redux");
var _loglevel = _interopRequireDefault(require("loglevel"));
var _controllerUtils = require("@metamask/controller-utils");
var _componentLibrary = require("../../component-library");
var _popover = _interopRequireDefault(require("../../ui/popover"));
var _checkBox = _interopRequireDefault(require("../../ui/check-box"));
var _i18n = require("../../../contexts/i18n");
var _pageContainer = require("../../ui/page-container");
var _metamask = require("../../../ducks/metamask/metamask");
var _selectors = require("../../../selectors");
var _util = require("../../../helpers/utils/util");
var _siwe = require("../../../../shared/modules/siwe");
var _designSystem = require("../../../helpers/constants/design-system");
var _securityProviderBannerMessage = _interopRequireDefault(require("../security-provider-banner-message/security-provider-banner-message"));
var _securityProviderBannerMessage2 = require("../security-provider-banner-message/security-provider-banner-message.constants");
var _ledgerInstructionField = _interopRequireDefault(require("../ledger-instruction-field"));
var _signatureRequestSiweHeader = _interopRequireDefault(require("./signature-request-siwe-header"));
var _signatureRequestSiweMessage = _interopRequireDefault(require("./signature-request-siwe-message"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SignatureRequestSIWE({
  txData,
  cancelPersonalMessage,
  signPersonalMessage
}) {
  var _txData$securityProvi, _txData$securityProvi2;
  const allAccounts = (0, _reactRedux.useSelector)(_selectors.accountsWithSendEtherInfoSelector);
  const subjectMetadata = (0, _reactRedux.useSelector)(_selectors.getSubjectMetadata);
  const {
    msgParams: {
      from,
      origin,
      siwe: {
        parsedMessage
      }
    }
  } = txData;
  const isLedgerWallet = (0, _reactRedux.useSelector)(state => (0, _metamask.isAddressLedger)(state, from));
  const fromAccount = (0, _util.getAccountByAddress)(allAccounts, from);
  const targetSubjectMetadata = subjectMetadata[origin];
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const isMatchingAddress = from.toLowerCase() === parsedMessage.address.toLowerCase();
  const isSIWEDomainValid = (0, _controllerUtils.isValidSIWEOrigin)(txData.msgParams);
  const [isShowingDomainWarning, setIsShowingDomainWarning] = (0, _react.useState)(false);
  const [hasAgreedToDomainWarning, setHasAgreedToDomainWarning] = (0, _react.useState)(false);
  const showSecurityProviderBanner = (txData === null || txData === void 0 ? void 0 : (_txData$securityProvi = txData.securityProviderResponse) === null || _txData$securityProvi === void 0 ? void 0 : _txData$securityProvi.flagAsDangerous) !== undefined && (txData === null || txData === void 0 ? void 0 : (_txData$securityProvi2 = txData.securityProviderResponse) === null || _txData$securityProvi2 === void 0 ? void 0 : _txData$securityProvi2.flagAsDangerous) !== _securityProviderBannerMessage2.SECURITY_PROVIDER_MESSAGE_SEVERITIES.NOT_MALICIOUS || (txData === null || txData === void 0 ? void 0 : txData.securityProviderResponse) && Object.keys(txData.securityProviderResponse).length === 0;
  const onSign = (0, _react.useCallback)(async event => {
    try {
      await signPersonalMessage(event);
    } catch (e) {
      _loglevel.default.error(e);
    }
  }, [signPersonalMessage]);
  const onCancel = (0, _react.useCallback)(async event => {
    try {
      await cancelPersonalMessage(event);
    } catch (e) {
      _loglevel.default.error(e);
    }
  }, [cancelPersonalMessage]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "signature-request-siwe"
  }, /*#__PURE__*/_react.default.createElement(_signatureRequestSiweHeader.default, {
    fromAccount: fromAccount,
    domain: origin,
    isSIWEDomainValid: isSIWEDomainValid,
    subjectMetadata: targetSubjectMetadata
  }), showSecurityProviderBanner && /*#__PURE__*/_react.default.createElement(_securityProviderBannerMessage.default, {
    securityProviderResponse: txData.securityProviderResponse
  }), /*#__PURE__*/_react.default.createElement(_signatureRequestSiweMessage.default, {
    data: (0, _siwe.formatMessageParams)(parsedMessage, t)
  }), !isMatchingAddress && /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    severity: _designSystem.SEVERITIES.WARNING,
    marginLeft: 4,
    marginRight: 4,
    marginBottom: 4
  }, t('SIWEAddressInvalid', [parsedMessage.address, fromAccount.address])), isLedgerWallet && /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-approve-content__ledger-instruction-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_ledgerInstructionField.default, {
    showDataInstruction: true
  })), !isSIWEDomainValid && /*#__PURE__*/_react.default.createElement(_componentLibrary.BannerAlert, {
    severity: _designSystem.SEVERITIES.DANGER,
    marginLeft: 4,
    marginRight: 4,
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, {
    variant: _designSystem.TextVariant.bodyMdBold
  }, t('SIWEDomainInvalidTitle')), ' ', /*#__PURE__*/_react.default.createElement(_componentLibrary.Text, null, t('SIWEDomainInvalidText'))), /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
    footerClassName: "signature-request-siwe__page-container-footer",
    onCancel: onCancel,
    onSubmit: isSIWEDomainValid ? onSign : () => setIsShowingDomainWarning(true),
    cancelText: t('cancel'),
    submitText: t('signin'),
    submitButtonType: isSIWEDomainValid ? 'primary' : 'danger-primary'
  }), isShowingDomainWarning && /*#__PURE__*/_react.default.createElement(_popover.default, {
    onClose: () => setIsShowingDomainWarning(false),
    title: t('SIWEWarningTitle'),
    subtitle: t('SIWEWarningSubtitle'),
    className: "signature-request-siwe__warning-popover",
    footerClassName: "signature-request-siwe__warning-popover__footer",
    footer: /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
      footerClassName: "signature-request-siwe__warning-popover__footer__warning-footer",
      onCancel: () => setIsShowingDomainWarning(false),
      cancelText: t('cancel'),
      cancelButtonType: "default",
      onSubmit: onSign,
      submitText: t('confirm'),
      submitButtonType: "danger-primary",
      disabled: !hasAgreedToDomainWarning
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "signature-request-siwe__warning-popover__checkbox-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    id: "signature-request-siwe_domain-checkbox",
    checked: hasAgreedToDomainWarning,
    className: "signature-request-siwe__warning-popover__checkbox-wrapper__checkbox",
    onClick: () => setHasAgreedToDomainWarning(checked => !checked)
  }), /*#__PURE__*/_react.default.createElement("label", {
    className: "signature-request-siwe__warning-popover__checkbox-wrapper__label",
    htmlFor: "signature-request-siwe_domain-checkbox"
  }, t('SIWEDomainWarningBody', [parsedMessage.domain])))));
}
SignatureRequestSIWE.propTypes = {
  /**
   * The display content of transaction data
   */
  txData: _propTypes.default.object.isRequired,
  /**
   * Handler for cancel button
   */
  cancelPersonalMessage: _propTypes.default.func.isRequired,
  /**
   * Handler for sign button
   */
  signPersonalMessage: _propTypes.default.func.isRequired
};

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request-siwe\\signature-request-siwe.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request\\index.js", {"./signature-request.container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request\\signature-request.container.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequest.default;
  }
});
var _signatureRequest = _interopRequireDefault(require("./signature-request.container"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request\\signature-request-data\\index.js", {"./signature-request-data":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request\\signature-request-data\\signature-request-data.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request%5Csignature-request-data%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestData.default;
  }
});
var _signatureRequestData = _interopRequireDefault(require("./signature-request-data"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\signature-request-data\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request\\signature-request-data\\signature-request-data.js", {"../../../../../shared/modules/hexstring-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\hexstring-utils.ts","../../../../helpers/constants/design-system":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\constants\\design-system.ts","../../../../helpers/utils/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\util.js","../../../../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","../../../ui/box":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\box\\index.js","../../../ui/typography":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\typography\\index.js","../../transaction-decoding/components/decoding/address":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\transaction-decoding\\components\\decoding\\address\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js","react-redux":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request%5Csignature-request-data%5Csignature-request-data.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _lodash = require("lodash");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _selectors = require("../../../../selectors");
var _address = _interopRequireDefault(require("../../transaction-decoding/components/decoding/address"));
var _hexstringUtils = require("../../../../../shared/modules/hexstring-utils");
var _box = _interopRequireDefault(require("../../../ui/box"));
var _typography = _interopRequireDefault(require("../../../ui/typography"));
var _designSystem = require("../../../../helpers/constants/design-system");
var _util = require("../../../../helpers/utils/util");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function SignatureRequestData({
  data
}) {
  const identities = (0, _reactRedux.useSelector)(_selectors.getMemoizedMetaMaskIdentities);
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-data__node"
  }, Object.entries(data).map(([label, {
    value,
    type
  }], i) => /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "signature-request-data__node",
    key: `${label}-${i}`,
    paddingLeft: 2,
    display: typeof value !== 'object' || value === null ? _designSystem.DISPLAY.FLEX : null
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "span",
    color: _designSystem.TextColor.textDefault,
    marginLeft: 4,
    fontWeight: typeof value === 'object' ? _designSystem.FONT_WEIGHT.BOLD : _designSystem.FONT_WEIGHT.NORMAL
  }, (0, _util.sanitizeString)(label.charAt(0).toUpperCase() + label.slice(1)), ":", ' '), typeof value === 'object' && value !== null ? /*#__PURE__*/_react.default.createElement(SignatureRequestData, {
    data: value
  }) : /*#__PURE__*/_react.default.createElement(_typography.default, {
    as: "span",
    color: _designSystem.TextColor.textDefault,
    marginLeft: 4,
    className: "signature-request-data__node__value"
  }, type === 'address' && (0, _hexstringUtils.isValidHexAddress)(value, {
    mixedCaseUseChecksum: true
  }) ? /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TypographyVariant.H7,
    color: _designSystem.TextColor.infoDefault,
    className: "signature-request-data__node__value__address"
  }, /*#__PURE__*/_react.default.createElement(_address.default, {
    addressOnly: true,
    checksummedRecipientAddress: (0, _hexstringUtils.toChecksumHexAddress)(value),
    recipientName: (0, _selectors.getAccountName)(identities, value)
  })) : (0, _util.sanitizeString)(`${value}`)))));
}
SignatureRequestData.propTypes = {
  data: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]).isRequired
};
var _default = /*#__PURE__*/(0, _react.memo)(SignatureRequestData, (prevProps, nextProps) => {
  return (0, _lodash.isEqual)(prevProps.data, nextProps.data);
});
exports.default = _default;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\signature-request-data\\signature-request-data.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request\\signature-request-footer\\index.js", {"./signature-request-footer.component":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request\\signature-request-footer\\signature-request-footer.component.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request%5Csignature-request-footer%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestFooter.default;
  }
});
var _signatureRequestFooter = _interopRequireDefault(require("./signature-request-footer.component"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\signature-request-footer\\index.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request\\signature-request-footer\\signature-request-footer.component.js", {"../../../ui/page-container":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\ui\\page-container\\index.js","prop-types":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\prop-types\\index.js","react":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request%5Csignature-request-footer%5Csignature-request-footer.component.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _pageContainer = require("../../../ui/page-container");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class SignatureRequestFooter extends _react.PureComponent {
  render() {
    const {
      cancelAction,
      signAction,
      disabled = false
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_pageContainer.PageContainerFooter, {
      cancelText: this.context.t('reject'),
      submitText: this.context.t('sign'),
      onCancel: cancelAction,
      onSubmit: signAction,
      disabled: disabled
    });
  }
}
exports.default = SignatureRequestFooter;
_defineProperty(SignatureRequestFooter, "propTypes", {
  cancelAction: _propTypes.default.func.isRequired,
  signAction: _propTypes.default.func.isRequired,
  disabled: _propTypes.default.bool
});
_defineProperty(SignatureRequestFooter, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\signature-request-footer\\signature-request-footer.component.js",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request\\signature-request-message\\index.js", {"./signature-request-message":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\components\\app\\signature-request\\signature-request-message\\signature-request-message.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Ccomponents%5Capp%5Csignature-request%5Csignature-request-message%5Cindex.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _signatureRequestMessage.default;
  }
});
var _signatureRequestMessage = _interopRequireDefault(require("./signature-request-message"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\components\\app\\signature-request\\signature-request-message\\index.js",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpL2NvbXBvbmVudHMvYXBwL2Nvbm5lY3RlZC1hY2NvdW50cy1saXN0L2Nvbm5lY3RlZC1hY2NvdW50cy1saXN0LWl0ZW0vY29ubmVjdGVkLWFjY291bnRzLWxpc3QtaXRlbS5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jb25uZWN0ZWQtYWNjb3VudHMtbGlzdC9jb25uZWN0ZWQtYWNjb3VudHMtbGlzdC1pdGVtL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvY29ubmVjdGVkLWFjY291bnRzLWxpc3QvY29ubmVjdGVkLWFjY291bnRzLWxpc3Qtb3B0aW9ucy9jb25uZWN0ZWQtYWNjb3VudHMtbGlzdC1vcHRpb25zLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2Nvbm5lY3RlZC1hY2NvdW50cy1saXN0L2Nvbm5lY3RlZC1hY2NvdW50cy1saXN0LW9wdGlvbnMvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jb25uZWN0ZWQtYWNjb3VudHMtbGlzdC9jb25uZWN0ZWQtYWNjb3VudHMtbGlzdC5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jb25uZWN0ZWQtYWNjb3VudHMtbGlzdC9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2Nvbm5lY3RlZC1hY2NvdW50cy1wZXJtaXNzaW9ucy9jb25uZWN0ZWQtYWNjb3VudHMtcGVybWlzc2lvbnMuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jb25uZWN0ZWQtYWNjb3VudHMtcGVybWlzc2lvbnMvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jb25uZWN0ZWQtc2l0ZXMtbGlzdC9jb25uZWN0ZWQtc2l0ZXMtbGlzdC5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jb25uZWN0ZWQtc2l0ZXMtbGlzdC9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2Nvbm5lY3RlZC1zdGF0dXMtaW5kaWNhdG9yL2Nvbm5lY3RlZC1zdGF0dXMtaW5kaWNhdG9yLmpzIiwidWkvY29tcG9uZW50cy9hcHAvY29ubmVjdGVkLXN0YXR1cy1pbmRpY2F0b3IvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jb250YWN0LWxpc3QvY29udGFjdC1saXN0LmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2NvbnRhY3QtbGlzdC9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2NvbnRhY3QtbGlzdC9yZWNpcGllbnQtZ3JvdXAvcmVjaXBpZW50LWdyb3VwLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2NyZWF0ZS1uZXctdmF1bHQvY3JlYXRlLW5ldy12YXVsdC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2NyZWF0ZS1uZXctdmF1bHQvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jdXJyZW5jeS1pbnB1dC9jdXJyZW5jeS1pbnB1dC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2N1cnJlbmN5LWlucHV0L2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvY3VzdG9tLXNwZW5kaW5nLWNhcC9jdXN0b20tc3BlbmRpbmctY2FwLXRvb2x0aXAuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9jdXN0b20tc3BlbmRpbmctY2FwL2N1c3RvbS1zcGVuZGluZy1jYXAuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9kZXRlY3RlZC10b2tlbi9kZXRlY3RlZC10b2tlbi1hZGRyZXNzL2RldGVjdGVkLXRva2VuLWFkZHJlc3MuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9kZXRlY3RlZC10b2tlbi9kZXRlY3RlZC10b2tlbi1hZ2dyZWdhdG9ycy9kZXRlY3RlZC10b2tlbi1hZ2dyZWdhdG9ycy5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2RldGVjdGVkLXRva2VuL2RldGVjdGVkLXRva2VuLWRldGFpbHMvZGV0ZWN0ZWQtdG9rZW4tZGV0YWlscy5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2RldGVjdGVkLXRva2VuL2RldGVjdGVkLXRva2VuLWlnbm9yZWQtcG9wb3Zlci9kZXRlY3RlZC10b2tlbi1pZ25vcmVkLXBvcG92ZXIuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9kZXRlY3RlZC10b2tlbi9kZXRlY3RlZC10b2tlbi1zZWxlY3Rpb24tcG9wb3Zlci9kZXRlY3RlZC10b2tlbi1zZWxlY3Rpb24tcG9wb3Zlci5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2RldGVjdGVkLXRva2VuL2RldGVjdGVkLXRva2VuLXZhbHVlcy9kZXRlY3RlZC10b2tlbi12YWx1ZXMuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9kZXRlY3RlZC10b2tlbi9kZXRlY3RlZC10b2tlbi5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2Ryb3Bkb3ducy9kcm9wZG93bi5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2Ryb3Bkb3ducy9uZXR3b3JrLWRyb3Bkb3duLmpzIiwidWkvY29tcG9uZW50cy9hcHAvZWRpdC1nYXMtZGlzcGxheS9lZGl0LWdhcy1kaXNwbGF5LmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2VkaXQtZ2FzLWRpc3BsYXkvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9lZGl0LWdhcy1mZWUtYnV0dG9uL2VkaXQtZ2FzLWZlZS1idXR0b24uanMiLCJ1aS9jb21wb25lbnRzL2FwcC9lZGl0LWdhcy1mZWUtYnV0dG9uL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvZWRpdC1nYXMtZmVlLXBvcG92ZXIvZWRpdC1nYXMtZmVlLXBvcG92ZXIuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9lZGl0LWdhcy1mZWUtcG9wb3Zlci9lZGl0LWdhcy1pdGVtL2VkaXQtZ2FzLWl0ZW0uanMiLCJ1aS9jb21wb25lbnRzL2FwcC9lZGl0LWdhcy1mZWUtcG9wb3Zlci9lZGl0LWdhcy1pdGVtL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvZWRpdC1nYXMtZmVlLXBvcG92ZXIvZWRpdC1nYXMtaXRlbS91c2VDdXN0b21UaW1lRXN0aW1hdGUuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9lZGl0LWdhcy1mZWUtcG9wb3Zlci9lZGl0LWdhcy1pdGVtL3VzZUdhc0l0ZW1GZWVEZXRhaWxzLmpzIiwidWkvY29tcG9uZW50cy9hcHAvZWRpdC1nYXMtZmVlLXBvcG92ZXIvZWRpdC1nYXMtdG9vbHRpcC9lZGl0LWdhcy10b29sdGlwLmpzIiwidWkvY29tcG9uZW50cy9hcHAvZWRpdC1nYXMtZmVlLXBvcG92ZXIvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9lZGl0LWdhcy1mZWUtcG9wb3Zlci9uZXR3b3JrLXN0YXRpc3RpY3MvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9lZGl0LWdhcy1mZWUtcG9wb3Zlci9uZXR3b3JrLXN0YXRpc3RpY3MvbmV0d29yay1zdGF0aXN0aWNzLmpzIiwidWkvY29tcG9uZW50cy9hcHAvZWRpdC1nYXMtZmVlLXBvcG92ZXIvbmV0d29yay1zdGF0aXN0aWNzL3N0YXR1cy1zbGlkZXIvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9lZGl0LWdhcy1mZWUtcG9wb3Zlci9uZXR3b3JrLXN0YXRpc3RpY3Mvc3RhdHVzLXNsaWRlci9zdGF0dXMtc2xpZGVyLmpzIiwidWkvY29tcG9uZW50cy9hcHAvZWRpdC1nYXMtZmVlLXBvcG92ZXIvbmV0d29yay1zdGF0aXN0aWNzL3Rvb2x0aXBzLmpzIiwidWkvY29tcG9uZW50cy9hcHAvZWRpdC1nYXMtcG9wb3Zlci9lZGl0LWdhcy1wb3BvdmVyLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2VkaXQtZ2FzLXBvcG92ZXIvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9nYXMtZGV0YWlscy1pdGVtL2dhcy1kZXRhaWxzLWl0ZW0tdGl0bGUvZ2FzLWRldGFpbHMtaXRlbS10aXRsZS5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2dhcy1kZXRhaWxzLWl0ZW0vZ2FzLWRldGFpbHMtaXRlbS10aXRsZS9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2dhcy1kZXRhaWxzLWl0ZW0vZ2FzLWRldGFpbHMtaXRlbS5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2dhcy1kZXRhaWxzLWl0ZW0vaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9nYXMtdGltaW5nL2dhcy10aW1pbmcuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvaG9sZC10by1yZXZlYWwtYnV0dG9uL2hvbGQtdG8tcmV2ZWFsLWJ1dHRvbi5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2hvbGQtdG8tcmV2ZWFsLWJ1dHRvbi9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2hvbWUtbm90aWZpY2F0aW9uL2hvbWUtbm90aWZpY2F0aW9uLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2hvbWUtbm90aWZpY2F0aW9uL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvaW1wb3J0LXRva2VuLWxpbmsvaW1wb3J0LXRva2VuLWxpbmsuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvaW1wb3J0LXRva2VuLWxpbmsvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9sZWRnZXItaW5zdHJ1Y3Rpb24tZmllbGQvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9sZWRnZXItaW5zdHJ1Y3Rpb24tZmllbGQvbGVkZ2VyLWluc3RydWN0aW9uLWZpZWxkLmpzIiwidWkvY29tcG9uZW50cy9hcHAvbG9hZGluZy1uZXR3b3JrLXNjcmVlbi9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL2xvYWRpbmctbmV0d29yay1zY3JlZW4vbG9hZGluZy1uZXR3b3JrLXNjcmVlbi5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9sb2FkaW5nLW5ldHdvcmstc2NyZWVuL2xvYWRpbmctbmV0d29yay1zY3JlZW4uY29udGFpbmVyLmpzIiwidWkvY29tcG9uZW50cy9hcHAvbWVudS1iYXIvYWNjb3VudC1vcHRpb25zLW1lbnUuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tZW51LWJhci9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21lbnUtYmFyL21lbnUtYmFyLmpzIiwidWkvY29tcG9uZW50cy9hcHAvbWVudS1kcm9wcG8uanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tZXRhbWFzay10ZW1wbGF0ZS1yZW5kZXJlci9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21ldGFtYXNrLXRlbXBsYXRlLXJlbmRlcmVyL21ldGFtYXNrLXRlbXBsYXRlLXJlbmRlcmVyLmpzIiwidWkvY29tcG9uZW50cy9hcHAvbWV0YW1hc2stdGVtcGxhdGUtcmVuZGVyZXIvc2FmZS1jb21wb25lbnQtbGlzdC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21ldGFtYXNrLXRlbXBsYXRlLXJlbmRlcmVyL3NlY3Rpb24tc2hhcGUuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tZXRhbWFzay10cmFuc2xhdGlvbi9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21ldGFtYXNrLXRyYW5zbGF0aW9uL21ldGFtYXNrLXRyYW5zbGF0aW9uLmpzIiwidWkvY29tcG9uZW50cy9hcHAvbW9kYWwvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbC9tb2RhbC1jb250ZW50L2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvbW9kYWwvbW9kYWwtY29udGVudC9tb2RhbC1jb250ZW50LmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFsL21vZGFsLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9hY2NvdW50LWRldGFpbHMtbW9kYWwvYWNjb3VudC1kZXRhaWxzLW1vZGFsLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9hY2NvdW50LWRldGFpbHMtbW9kYWwvYWNjb3VudC1kZXRhaWxzLW1vZGFsLmNvbnRhaW5lci5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9hY2NvdW50LWRldGFpbHMtbW9kYWwvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbHMvYWNjb3VudC1tb2RhbC1jb250YWluZXIvYWNjb3VudC1tb2RhbC1jb250YWluZXIuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvbW9kYWxzL2FjY291bnQtbW9kYWwtY29udGFpbmVyL2FjY291bnQtbW9kYWwtY29udGFpbmVyLmNvbnRhaW5lci5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9hY2NvdW50LW1vZGFsLWNvbnRhaW5lci9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9jb25maXJtLWRlbGV0ZS1uZXR3b3JrL2NvbmZpcm0tZGVsZXRlLW5ldHdvcmsuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvbW9kYWxzL2NvbmZpcm0tZGVsZXRlLW5ldHdvcmsvY29uZmlybS1kZWxldGUtbmV0d29yay5jb250YWluZXIuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbHMvY29uZmlybS1kZWxldGUtbmV0d29yay9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9jb25maXJtLXJlbW92ZS1hY2NvdW50L2NvbmZpcm0tcmVtb3ZlLWFjY291bnQuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvbW9kYWxzL2NvbmZpcm0tcmVtb3ZlLWFjY291bnQvY29uZmlybS1yZW1vdmUtYWNjb3VudC5jb250YWluZXIuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbHMvY29uZmlybS1yZW1vdmUtYWNjb3VudC9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9jb25maXJtLXJlc2V0LWFjY291bnQvY29uZmlybS1yZXNldC1hY2NvdW50LmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9jb25maXJtLXJlc2V0LWFjY291bnQvY29uZmlybS1yZXNldC1hY2NvdW50LmNvbnRhaW5lci5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9jb25maXJtLXJlc2V0LWFjY291bnQvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbHMvY29udHJhY3QtZGV0YWlscy1tb2RhbC9jb250cmFjdC1kZXRhaWxzLW1vZGFsLmpzIiwidWkvY29tcG9uZW50cy9hcHAvbW9kYWxzL2NvbnZlcnQtdG9rZW4tdG8tbmZ0LW1vZGFsL2NvbnZlcnQtdG9rZW4tdG8tbmZ0LW1vZGFsLmpzIiwidWkvY29tcG9uZW50cy9hcHAvbW9kYWxzL2N1c3RvbWl6ZS1ub25jZS9jdXN0b21pemUtbm9uY2UuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvbW9kYWxzL2N1c3RvbWl6ZS1ub25jZS9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9lZGl0LWFwcHJvdmFsLXBlcm1pc3Npb24vZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9lZGl0LWFwcHJvdmFsLXBlcm1pc3Npb24vZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uLmNvbnRhaW5lci5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9lZGl0LWFwcHJvdmFsLXBlcm1pc3Npb24vaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbHMvZXRoLXNpZ24tbW9kYWwvZXRoLXNpZ24tbW9kYWwuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbHMvZXhwb3J0LXByaXZhdGUta2V5LW1vZGFsL2V4cG9ydC1wcml2YXRlLWtleS1tb2RhbC5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbHMvZXhwb3J0LXByaXZhdGUta2V5LW1vZGFsL2V4cG9ydC1wcml2YXRlLWtleS1tb2RhbC5jb250YWluZXIuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbHMvZXhwb3J0LXByaXZhdGUta2V5LW1vZGFsL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvbW9kYWxzL2V4cG9ydC1wcml2YXRlLWtleS1tb2RhbC9wYXNzd29yZC1pbnB1dC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9leHBvcnQtcHJpdmF0ZS1rZXktbW9kYWwvcHJpdmF0ZS1rZXkuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbHMvZmFkZS1tb2RhbC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9oaWRlLXRva2VuLWNvbmZpcm1hdGlvbi1tb2RhbC9oaWRlLXRva2VuLWNvbmZpcm1hdGlvbi1tb2RhbC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9oaWRlLXRva2VuLWNvbmZpcm1hdGlvbi1tb2RhbC9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9ob2xkLXRvLXJldmVhbC1tb2RhbC9ob2xkLXRvLXJldmVhbC1tb2RhbC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9ob2xkLXRvLXJldmVhbC1tb2RhbC9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9tb2RhbC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9uZXctYWNjb3VudC1tb2RhbC9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9uZXctYWNjb3VudC1tb2RhbC9uZXctYWNjb3VudC1tb2RhbC5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbHMvbmV3LWFjY291bnQtbW9kYWwvbmV3LWFjY291bnQtbW9kYWwuY29udGFpbmVyLmpzIiwidWkvY29tcG9uZW50cy9hcHAvbW9kYWxzL25pY2tuYW1lLXBvcG92ZXJzL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvbW9kYWxzL25pY2tuYW1lLXBvcG92ZXJzL25pY2tuYW1lLXBvcG92ZXJzLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9xci1zY2FubmVyL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvbW9kYWxzL3FyLXNjYW5uZXIvcXItc2Nhbm5lci5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbHMvcXItc2Nhbm5lci9xci1zY2FubmVyLmNvbnRhaW5lci5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy9yZWplY3QtdHJhbnNhY3Rpb25zL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvbW9kYWxzL3JlamVjdC10cmFuc2FjdGlvbnMvcmVqZWN0LXRyYW5zYWN0aW9ucy5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbHMvcmVqZWN0LXRyYW5zYWN0aW9ucy9yZWplY3QtdHJhbnNhY3Rpb25zLmNvbnRhaW5lci5qcyIsInVpL2NvbXBvbmVudHMvYXBwL21vZGFscy90cmFuc2FjdGlvbi1jb25maXJtZWQvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbHMvdHJhbnNhY3Rpb24tY29uZmlybWVkL3RyYW5zYWN0aW9uLWNvbmZpcm1lZC5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tb2RhbHMvdHJhbnNhY3Rpb24tY29uZmlybWVkL3RyYW5zYWN0aW9uLWNvbmZpcm1lZC5jb250YWluZXIuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tdWx0aWxheWVyLWZlZS1tZXNzYWdlL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvbXVsdGlsYXllci1mZWUtbWVzc2FnZS9tdWx0aS1sYXllci1mZWUtbWVzc2FnZS5qcyIsInVpL2NvbXBvbmVudHMvYXBwL211bHRpcGxlLW5vdGlmaWNhdGlvbnMvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9tdWx0aXBsZS1ub3RpZmljYXRpb25zL211bHRpcGxlLW5vdGlmaWNhdGlvbnMuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvbmV0d29yay1hY2NvdW50LWJhbGFuY2UtaGVhZGVyL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvbmV0d29yay1hY2NvdW50LWJhbGFuY2UtaGVhZGVyL25ldHdvcmstYWNjb3VudC1iYWxhbmNlLWhlYWRlci5qcyIsInVpL2NvbXBvbmVudHMvYXBwL25ldHdvcmstZGlzcGxheS9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL25ldHdvcmstZGlzcGxheS9uZXR3b3JrLWRpc3BsYXkuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9uZnQtZGVmYXVsdC1pbWFnZS9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL25mdC1kZWZhdWx0LWltYWdlL25mdC1kZWZhdWx0LWltYWdlLmpzIiwidWkvY29tcG9uZW50cy9hcHAvbmZ0LWRldGFpbHMvbmZ0LWRldGFpbHMuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9uZnQtb3B0aW9ucy9uZnQtb3B0aW9ucy5qcyIsInVpL2NvbXBvbmVudHMvYXBwL25mdHMtZGV0ZWN0aW9uLW5vdGljZS9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL25mdHMtZGV0ZWN0aW9uLW5vdGljZS9uZnRzLWRldGVjdGlvbi1ub3RpY2UuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9uZnRzLWl0ZW1zL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvbmZ0cy1pdGVtcy9uZnRzLWl0ZW1zLmpzIiwidWkvY29tcG9uZW50cy9hcHAvbmZ0cy10YWIvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9uZnRzLXRhYi9uZnRzLXRhYi5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3Blcm1pc3Npb24tcGFnZS1jb250YWluZXIvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9wZXJtaXNzaW9uLXBhZ2UtY29udGFpbmVyL3Blcm1pc3Npb24tcGFnZS1jb250YWluZXItY29udGVudC9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3Blcm1pc3Npb24tcGFnZS1jb250YWluZXIvcGVybWlzc2lvbi1wYWdlLWNvbnRhaW5lci1jb250ZW50L3Blcm1pc3Npb24tcGFnZS1jb250YWluZXItY29udGVudC5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9wZXJtaXNzaW9uLXBhZ2UtY29udGFpbmVyL3Blcm1pc3Npb24tcGFnZS1jb250YWluZXIuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvcGVybWlzc2lvbi1wYWdlLWNvbnRhaW5lci9wZXJtaXNzaW9uLXBhZ2UtY29udGFpbmVyLmNvbnRhaW5lci5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3Blcm1pc3Npb25zLWNvbm5lY3QtZm9vdGVyL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvcGVybWlzc2lvbnMtY29ubmVjdC1mb290ZXIvcGVybWlzc2lvbnMtY29ubmVjdC1mb290ZXIuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvcGVybWlzc2lvbnMtY29ubmVjdC1oZWFkZXIvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9wZXJtaXNzaW9ucy1jb25uZWN0LWhlYWRlci9wZXJtaXNzaW9ucy1jb25uZWN0LWhlYWRlci5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9wZXJtaXNzaW9ucy1jb25uZWN0LXBlcm1pc3Npb24tbGlzdC9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3Blcm1pc3Npb25zLWNvbm5lY3QtcGVybWlzc2lvbi1saXN0L3Blcm1pc3Npb25zLWNvbm5lY3QtcGVybWlzc2lvbi1saXN0LmpzIiwidWkvY29tcG9uZW50cy9hcHAvcXItaGFyZHdhcmUtcG9wb3Zlci9iYXNlLXJlYWRlci5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3FyLWhhcmR3YXJlLXBvcG92ZXIvZW5oYW5jZWQtcmVhZGVyLmpzIiwidWkvY29tcG9uZW50cy9hcHAvcXItaGFyZHdhcmUtcG9wb3Zlci9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3FyLWhhcmR3YXJlLXBvcG92ZXIvcXItaGFyZHdhcmUtcG9wb3Zlci5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3FyLWhhcmR3YXJlLXBvcG92ZXIvcXItaGFyZHdhcmUtc2lnbi1yZXF1ZXN0L2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvcXItaGFyZHdhcmUtcG9wb3Zlci9xci1oYXJkd2FyZS1zaWduLXJlcXVlc3QvcGxheWVyLmpzIiwidWkvY29tcG9uZW50cy9hcHAvcXItaGFyZHdhcmUtcG9wb3Zlci9xci1oYXJkd2FyZS1zaWduLXJlcXVlc3QvcXItaGFyZHdhcmUtc2lnbi1yZXF1ZXN0LmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3FyLWhhcmR3YXJlLXBvcG92ZXIvcXItaGFyZHdhcmUtc2lnbi1yZXF1ZXN0L3JlYWRlci5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3FyLWhhcmR3YXJlLXBvcG92ZXIvcXItaGFyZHdhcmUtd2FsbGV0LWltcG9ydGVyL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvcXItaGFyZHdhcmUtcG9wb3Zlci9xci1oYXJkd2FyZS13YWxsZXQtaW1wb3J0ZXIvcXItaGFyZHdhcmUtd2FsbGV0LWltcG9ydGVyLmNvbXBvbmVudC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3JlY292ZXJ5LXBocmFzZS1yZW1pbmRlci9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3JlY292ZXJ5LXBocmFzZS1yZW1pbmRlci9yZWNvdmVyeS1waHJhc2UtcmVtaW5kZXIuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9zZWN1cml0eS1wcm92aWRlci1iYW5uZXItbWVzc2FnZS9zZWN1cml0eS1wcm92aWRlci1iYW5uZXItbWVzc2FnZS5jb25zdGFudHMuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9zZWN1cml0eS1wcm92aWRlci1iYW5uZXItbWVzc2FnZS9zZWN1cml0eS1wcm92aWRlci1iYW5uZXItbWVzc2FnZS5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3NlbGVjdGVkLWFjY291bnQvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9zZWxlY3RlZC1hY2NvdW50L3NlbGVjdGVkLWFjY291bnQuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvc2VsZWN0ZWQtYWNjb3VudC9zZWxlY3RlZC1hY2NvdW50LmNvbnRhaW5lci5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3NldC1hcHByb3ZhbC1mb3ItYWxsLXdhcm5pbmcvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9zZXQtYXBwcm92YWwtZm9yLWFsbC13YXJuaW5nL3NldC1hcHByb3ZhbC1mb3ItYWxsLXdhcm5pbmcuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9zaWduYXR1cmUtcmVxdWVzdC1vcmlnaW5hbC9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3NpZ25hdHVyZS1yZXF1ZXN0LW9yaWdpbmFsL3NpZ25hdHVyZS1yZXF1ZXN0LW9yaWdpbmFsLXdhcm5pbmcvaW5kZXguanMiLCJ1aS9jb21wb25lbnRzL2FwcC9zaWduYXR1cmUtcmVxdWVzdC1vcmlnaW5hbC9zaWduYXR1cmUtcmVxdWVzdC1vcmlnaW5hbC13YXJuaW5nL3NpZ25hdHVyZS1yZXF1ZXN0LW9yaWdpbmFsLXdhcm5pbmcuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9zaWduYXR1cmUtcmVxdWVzdC1vcmlnaW5hbC9zaWduYXR1cmUtcmVxdWVzdC1vcmlnaW5hbC5jb21wb25lbnQuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9zaWduYXR1cmUtcmVxdWVzdC1vcmlnaW5hbC9zaWduYXR1cmUtcmVxdWVzdC1vcmlnaW5hbC5jb250YWluZXIuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9zaWduYXR1cmUtcmVxdWVzdC1zaXdlL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvc2lnbmF0dXJlLXJlcXVlc3Qtc2l3ZS9zaWduYXR1cmUtcmVxdWVzdC1zaXdlLWhlYWRlci9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3NpZ25hdHVyZS1yZXF1ZXN0LXNpd2Uvc2lnbmF0dXJlLXJlcXVlc3Qtc2l3ZS1oZWFkZXIvc2lnbmF0dXJlLXJlcXVlc3Qtc2l3ZS1oZWFkZXIuanMiLCJ1aS9jb21wb25lbnRzL2FwcC9zaWduYXR1cmUtcmVxdWVzdC1zaXdlL3NpZ25hdHVyZS1yZXF1ZXN0LXNpd2UtaWNvbi9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3NpZ25hdHVyZS1yZXF1ZXN0LXNpd2Uvc2lnbmF0dXJlLXJlcXVlc3Qtc2l3ZS1tZXNzYWdlL2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvc2lnbmF0dXJlLXJlcXVlc3Qtc2l3ZS9zaWduYXR1cmUtcmVxdWVzdC1zaXdlLW1lc3NhZ2Uvc2lnbmF0dXJlLXJlcXVlc3Qtc2l3ZS1tZXNzYWdlLmpzIiwidWkvY29tcG9uZW50cy9hcHAvc2lnbmF0dXJlLXJlcXVlc3Qtc2l3ZS9zaWduYXR1cmUtcmVxdWVzdC1zaXdlLXRhZy9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3NpZ25hdHVyZS1yZXF1ZXN0LXNpd2Uvc2lnbmF0dXJlLXJlcXVlc3Qtc2l3ZS5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3NpZ25hdHVyZS1yZXF1ZXN0L2luZGV4LmpzIiwidWkvY29tcG9uZW50cy9hcHAvc2lnbmF0dXJlLXJlcXVlc3Qvc2lnbmF0dXJlLXJlcXVlc3QtZGF0YS9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3NpZ25hdHVyZS1yZXF1ZXN0L3NpZ25hdHVyZS1yZXF1ZXN0LWRhdGEvc2lnbmF0dXJlLXJlcXVlc3QtZGF0YS5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3NpZ25hdHVyZS1yZXF1ZXN0L3NpZ25hdHVyZS1yZXF1ZXN0LWZvb3Rlci9pbmRleC5qcyIsInVpL2NvbXBvbmVudHMvYXBwL3NpZ25hdHVyZS1yZXF1ZXN0L3NpZ25hdHVyZS1yZXF1ZXN0LWZvb3Rlci9zaWduYXR1cmUtcmVxdWVzdC1mb290ZXIuY29tcG9uZW50LmpzIiwidWkvY29tcG9uZW50cy9hcHAvc2lnbmF0dXJlLXJlcXVlc3Qvc2lnbmF0dXJlLXJlcXVlc3QtbWVzc2FnZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsV0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsTUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUE4QyxTQUFBLHlCQUFBLFdBQUEsZUFBQSxPQUFBLGtDQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7QUFBQSxTQUFB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QSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7QUFBQSxTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFBQSxTQUFBLGdCQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxJQUFBLEdBQUEsR0FBQSxjQUFBLENBQUEsR0FBQSxPQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxJQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsVUFBQSxRQUFBLFlBQUEsUUFBQSxRQUFBLG9CQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsS0FBQSxX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QUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7QUFBQSxTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFFN0UsTUFBTSw0QkFBNEIsR0FBRyxDQUFDO0VB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TUFBQSxDQUFBLFNBQUEsQ0FBQSxjQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLFNBQUEsSUFBQSxHQUFBLHFCQUFBLEdBQUEsTUFBQSxDQUFBLHdCQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsY0FBQSxJQUFBLEtBQUEsSUFBQSxDQUFBLEdBQUEsSUFBQSxJQUFBLENBQUEsR0FBQSxLQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLFlBQUEsTUFBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsQ0FBQSxPQUFBLEdBQUEsR0FBQSxNQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsRUFBQSxNQUFBLFlBQUEsTUFBQTtBQUFBLFNBQUEsZ0JBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLElBQUEsR0FBQSxHQUFBLGNBQUEsQ0FBQSxHQUFBLE9BQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsY0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLElBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLFFBQUEsWUFBQSxRQUFBLFFBQUEsb0JBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxLQUFBLFdBQUEsR0FBQTtBQUFBLFNBQUEsZUFBQSxHQUFBLFFBQUEsR0FBQSxHQUFBLFlBQUEsQ0FBQSxHQUFBLDJCQUFBLEdBQUEsZ0JBQUEsR0FBQSxHQUFBLE1BQUEsQ0FBQSxHQUFBO0FBQUEsU0FBQSxhQUFBLEtBQUEsRUFBQSxJQUFBLGVBQUEsS0FBQSxpQkFBQSxLQUFBLGtCQUFBLEtBQUEsTUFBQSxJQUFBLEdBQUEsS0FBQSxDQUFBLE1BQUEsQ0FBQSxXQUFBLE9BQUEsSUFBQSxLQUFBLFNBQUEsUUFBQSxHQUFBLEdBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxLQUFBLEVBQUEsSUFBQSwyQkFBQSxHQUFBLHNCQUFBLEdBQUEsWUFBQSxTQUFBLDREQUFBLElBQUEsZ0JBQUEsTUFBQSxHQUFBLE1BQUEsRUFB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LEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsWUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLFdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLFFBQUEsR0FBQSxrQkFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsU0FBQSxJQUFBLEdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLEtBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsWUFBQSxNQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxDQUFBLE9BQUEsR0FBQSxHQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLE1BQUEsWUFBQSxNQUFBO0FBQUEsU0FBQSxnQkFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsSUFBQSxHQUFBLEdBQUEsY0FBQSxDQUFBLEdBQUEsT0FBQSxHQUFBLElBQUEsR0FBQSxJQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsSUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsUUFBQSxZQUFBLFFBQUEsUUFBQSxvQkFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLEtBQUEsV0FBQSxHQUFBO0FBQUEsU0FBQSxlQUFBLEdBQUEsUUFBQSxHQUFBLEdBQUEsWUFBQSxDQUFBLEdBQUEsMkJBQUEsR0FBQSxnQkFBQSxHQUFBLEdBQUEsTUFBQSxDQUFBLEdBQUE7QUFBQSxTQUFBLGFBQUEsS0FBQSxFQUFBLElBQUEsZUFBQSxLQUFBLGlCQUFBLEtBQUEsa0JBQUEsS0FBQSxNQUFBLElBQUEsR0FB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QUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hFMUMsSUFBQSxNQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxVQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxXQUFBLEdBQUEsT0FBQTtBQUVBLElBQUEsZUFBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLFlBQUEsR0FBQSxPQUFBO0FBQ0EsSUFBQSxhQUFBLEdBQUEsT0FBQTtBQUtBLElBQUEsVUFBQSxHQUFBLE9BQUE7QUFLQSxJQUFBLFFBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLElBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLE9BQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLHFCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQW9GLFNBQUEsdUJBQUEsR0FBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsVUFBQSxHQUFBLEdBQUEsS0FBQSxPQUFBLEVBQUEsR0FBQTtBQUFBLFNBQUEseUJBQUEsV0FBQSxlQUFBLE9BQUEsa0NBQUEsaUJBQUEsT0FBQSxPQUFBLFFBQUEsZ0JBQUEsT0FBQSxPQUFBLFlBQUEsd0JBQUEsWUFBQSxDQUFBLFdBQUEsV0FBQSxXQUFBLEdBQUEsZ0JBQUEsR0FBQSxpQkFBQSxLQUFBLFdBQUE7QUFBQSxTQUFBLHdCQUFBLEdBQUEsRUFBQSxXQUFBLFNBQUEsV0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsVUFBQSxXQUFBLEdBQUEsUUFBQSxHQUFBLG9CQUFBLEdBQUEsd0JBQUEsR0FBQSw0QkFBQSxPQUFBLEVBQUEsR0FBQSxVQUFBLEtBQUEsR0FBQSx3QkFBQSxDQUFBLFdBQUEsT0FBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLFlBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxXQUFBLHFCQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsSUFBQSxNQUFBLENBQUEsd0JBQUEsV0FBQSxHQUFBLElB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QUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLFNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFFQSxJQUFBLGFBQUEsR0FBQSxPQUFBO0FBS0EsSUFBQSxnQkFBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLG1CQUFBLEdBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLGlCQUFBLEdBQUEsT0FBQTtBQUFrRCxTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFBQSxTQUFBLHlCQUFBLFdBQUEsZUFBQSxPQUFBLGtDQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFB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S0FBQSxVQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsU0FBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxRQUFBLHdCQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxFQUFBLE9BQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsU0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLHdCQUFBLE1BQUEsZUFBQSxJQUFBLE1BQUEseUJBQUEsQ0FBQSxDQUFBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxFQUFBLEVBQUEsSUFBQSxHQUFBLEtBQUEsU0FBQSxJQUFBLE1BQUEsVUFBQSxlQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxDQUFBLEVBQUEsRUFBQSxJQUFBLE9BQUEscUJBQUEsR0FBQSxNQUFBLHlCQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxDQUFBLElBQUEsSUFBQSxLQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxDQUFBLEVBQUEsRUFBQSxNQUFBLGVBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxNQUFBLFFBQUEsR0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLEtBQUEsRUFBQSxFQUFBLEtBQUEsSUFBQSxDQUFBLEdBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsT0FBQSxNQUFBLENBQUEsRUFBQTtBQUFBLHFDQUFBLEVBQUEsT0FBQSxHQUFBLElBQUEsR0FBQSxXQUFBLEdBQUEsR0FBQSxHQUFBLEVBQUEsU0FBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBO0FBQUEsMENBQUEsRUFBQSxNQUFBLGNBQUEsQ0FBQSxHQUFBLENBQUEsQ0FB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QSx3QkFBQSxZQUFBLENBQUEsV0FBQSxXQUFBLFdBQUEsR0FBQSxnQkFBQSxHQUFBLGlCQUFBLEtBQUEsV0FBQTtBQUFBLFNBQUEsd0JBQUEsR0FBQSxFQUFBLFdBQUEsU0FBQSxXQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLFdBQUEsR0FBQSxRQUFBLEdBQUEsb0JBQUEsR0FBQSx3QkFBQSxHQUFBLDRCQUFBLE9BQUEsRUFBQSxHQUFBLFVBQUEsS0FBQSxHQUFBLHdCQUFBLENBQUEsV0FBQSxPQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsWUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLFdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLFFBQUEsR0FBQSxrQkFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsU0FBQSxJQUFBLEdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLEtBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsWUFBQSxNQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxDQUFBLE9BQUEsR0FBQSxHQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLE1BQUEsWUFBQSxNQUFBO0FBQUEsU0FBQSxTQUFBLElBQUEsUUFBQSxHQUFBLE1BQUEsQ0FBQSxNQUFBLEdBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxJQUFBLGVBQUEsTUFBQSxhQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFBQSxDQUFBLFVBQUEsTUFBQSxHQUFBLFNBQUEs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QSxPQUFBO0FBRUEsSUFBQSxTQUFBLEdBQUEsT0FBQTtBQU1BLElBQUEsV0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsYUFBQSxHQUFBLE9BQUE7QUFLQSxJQUFBLFFBQUEsR0FBQSxPQUFBO0FBQ0EsSUFBQSxLQUFBLEdBQUEsT0FBQTtBQUFpRSxTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFBQSxTQUFBLHlCQUFBLFdBQUEsZUFBQSxPQUFBLGtDQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFB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LGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7QUFBQSxTQUFBLGdCQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxJQUFBLEdBQUEsR0FBQSxjQUFBLENBQUEsR0FBQSxPQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxDQUFBLGNBQUEsQ0FB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QUEsT0FBQSxDQUFBLDBDQUFBLENBQUEsQ0FBQTtBQUtBLElBQUEsZ0JBQUEsT0FBQSxDQUFBLCtCQUFBLENBQUEsQ0FBQTtBQUNBLElBQUEsb0JBQUEsT0FBQSxDQUFBLHlCQUFBLENBQUEsQ0FBQTtBQUFtRCxxQ0FBQSxFQUFBLE9BQUEsR0FBQSxJQUFBLEdBQUEsV0FBQSxHQUFBLEdBQUEsR0FBQSxFQUFBLFNBQUEsR0FBQSxFQUFBLENBQUEsRUFBQTtBQUFBLCtDQUFBLEVBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxVQUFBLEVBQUEsT0FBQSxJQUFBLENBQUEsQ0FBQSxJQUFBLG9CQUFBLElBQUEsT0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLG1CQUFBLElBQUEsT0FBQSxFQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsMkJBQUEsdUJBQUEsRUFBQSxPQUFBLFdBQUEsR0FBQSxnQkFBQSxHQUFBLGlCQUFBLENBQUEsRUFBQSxFQUFBLFdBQUEsQ0FBQSxDQUFBLEVBQUE7QUFBQSxtREFBQSxFQUFBLElBQUEsQ0FBQSxXQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsV0FBQSxFQUFBLEVBQUEsT0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsR0FBQSxLQUFBLElBQUEsSUFBQSxPQUFBLEdBQUEsS0FBQSxRQUFBLElBQUEsT0FBQSxHQUFBLEtBQUEsVUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLFNBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsUUFBQSx3QkFBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsRUFBQSxPQUFBLEtBQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLFNBQUEsRUFBQSxDQUFBLENBQUEsSUFBQSx3QkFBQSxNQUFBLGVBQUEsSUFBQSxNQUFBLHlCQUFBLENBQUEsQ0FBQSxLQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsRUFBQSxFQUFBLElBQUEsR0FBQSxLQUFB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LHFCQUFBLEdBQUEsTUFBQSxDQUFBLHdCQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsY0FBQSxJQUFBLEtBQUEsSUFBQSxDQUFBLEdBQUEsSUFBQSxJQUFBLENBQUEsR0FBQSxLQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLFlBQUEsTUFBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsQ0FBQSxPQUFBLEdBQUEsR0FBQSxNQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsRUFBQSxNQUFBLFlBQUEsTUFBQTtBQUFBLFNBQUEsdUJBQUEsR0FBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsVUFBQSxHQUFBLEdBQUEsS0FBQSxPQUFBLEVBQUEsR0FBQTtBQUFBLFNBQUEsZ0JBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLElBQUEsR0FBQSxHQUFBLGNBQUEsQ0FBQSxHQUFBLE9BQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsY0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLElBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLFFBQUEsWUFBQSxRQUFBLFFBQUEsb0JBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxLQUFBLFdBQUEsR0FBQTtBQUFBLFNBQUEsZUFBQSxHQUFBLFFBQUEsR0FBQSxHQUFBLFlBQUEsQ0FBQSxHQUFBLDJCQUFBLEdBQUEsZ0JBQUEsR0FBQSxHQUFBLE1BQUEsQ0FBQSxHQUFBO0FBQUEsU0FBQSxhQUFBLEtBQUEsRUFBQSxJQUFBLGVBQUEsS0FBQSxpQkFBQSxLQUFBLGtCQUFBLEtBQUEsTUFBQSxJQUFBLEdBQUEsS0FBQSxDQUFBLE1BQUEsQ0FBQSxXQUFBLE9BQUEsSUFBQSxLQUFBLFNBQUEsUUFBQSxHQUFBLEdBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxLQUFBLEVBQUEsSUFBQSwyQkFBQSxHQUFBLHNCQUFBLEdBQUEsWUFBQSxTQUFBLDREQUFBLElBQUEsZ0JBQUEsTUFBQSxH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QSxHQUFBLHVCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUFtQyxTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFBQSxTQUFBLHlCQUFBLFdBQUEsZUFBQSxPQUFBLGtDQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdB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QSxRQUFBLEdBQUEsa0JBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxjQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLFNBQUEsSUFBQSxHQUFBLHFCQUFBLEdBQUEsTUFBQSxDQUFBLHdCQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsY0FBQSxJQUFBLEtBQUEsSUFBQSxDQUFBLEdBQUEsSUFBQSxJQUFBLENBQUEsR0FBQSxLQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLFlBQUEsTUFBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsQ0FBQSxPQUFBLEdBQUEsR0FBQSxNQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsRUFBQSxNQUFBLFlBQUEsTUFBQTtBQUFBLFNBQUEsZ0JBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLElBQUEsR0FBQSxHQUFBLGNBQUEsQ0FBQSxHQUFBLE9BQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsY0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLElBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLFFBQUEsWUFBQSxRQUFBLFFBQUEsb0JBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxLQUFBLFdBQUEsR0FBQTtBQUFBLFNBQUEsZUFBQSxHQUFBLFFBQUEsR0FBQSxHQUFBLFlBQUEsQ0FBQSxHQUFBLDJCQUFBLEdBQUEsZ0JBQUEsR0FBQSxHQUFBLE1BQUEsQ0FBQSxHQUFBO0FBQUEsU0FBQSxhQUFBLEtBQUEsRUFBQSxJQUFBLGVBQUEsS0FBQSxpQkFBQSxLQUFBLGtCQUFBLEtBQUEsTUFBQSxJQUFBLEdBQUEsS0FBQSxDQUFBLE1BQUEsQ0FBQSxXQUFBLE9BQUEsSUFBQSxLQUFBLFNBQUEsUUFBQSxHQUFBLEdBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxLQUFBLEVBQUEsSUFBQSwyQkFBQSxHQUFBLHNCQUFBLEdBQUEsWUFBQSxTQUFBLDREQUFBLElBQUEsZ0JBQUEs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QUFFQSxJQUFBLHlCQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLDRCQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxVQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLHFCQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxpQkFBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSw0QkFBQSxDQUFBLENBQUEsQ0FBQTtBQUNBLElBQUEsVUFBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUEsQ0FBQTtBQUNBLElBQUEsUUFBQSxPQUFBLENBQUEsZ0NBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxZQUFBLE9BQUEsQ0FBQSxvQ0FBQSxDQUFBLENBQUE7QUFDQSxJQUFBLGVBQUEsT0FBQSxDQUFBLDZDQUFBLENBQUEsQ0FBQTtBQU1BLElBQUEsVUFBQSxPQUFBLENBQUEsc0NBQUEsQ0FBQSxDQUFBO0FBQXNFLHFDQUFBLEVBQUEsT0FBQSxHQUFBLElBQUEsR0FBQSxXQUFBLEdBQUEsR0FBQSxHQUFBLEVBQUEsU0FBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBO0FBQUEsK0NBQUEsRUFBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFVBQUEsRUFBQSxPQUFBLElBQUEsQ0FBQSxDQUFBLElBQUEsb0JBQUEsSUFBQSxPQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsbUJBQUEsSUFBQSxPQUFBLEVBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSwyQkFBQSx1QkFBQSxFQUFBLE9BQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsQ0FBQSxFQUFBLEVBQUEsV0FBQSxDQUFBLENBQUEsRUFBQTtBQUFBLG1EQUFBLEVBQUEsSUFBQSxDQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxXQUFBLEVBQUEsRUFBQSxPQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxHQUFBLEtBQUEsSUFBQSxJQUFBLE9BQUEsR0FBQSxLQUFBLFFBQUEsSUFBQSxPQUFBLEdBQUEsS0FBQSxVQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsU0FBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxRQUFBLHdCQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxFQUFBLE9BQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsU0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLHdCQUFBLE1BQUEsZUFBQSxJQUFBLE1BQUEseUJBQUEsQ0FBQSxDQUFBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxFQUFBLEVBQUEsSUFBQSxHQUFBLEtBQUEsU0FBQSxJQUFBLE1BQUEsVUFBQSxlQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxDQUFBLEVBQUEsRUFBQSxJQUFBLE9BQUEscUJBQUEsR0FBQSxNQUFBLHlCQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxDQUFBLElBQUEsSUFBQSxLQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxDQUFBLEVBQUEsRUFBQSxNQUFBLGVBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxNQUFBLFFBQUEsR0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLEtBQUEsRUFBQSxFQUFBLEtBQUEsSUFBQSxDQUFBLEdBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsT0FBQSxNQUFBLENBQUEsRUFBQTtBQUFBLDBDQUFBLEVBQUEsTUFBQSxjQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEVBQUEsRUFBQSxNQUFBLGVBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsT0FBQSxLQUFBLEVBQUEsWUFBQSxJQUFBLEVBQUEsY0FBQSxJQUFBLEVBQUEs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LGNBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsU0FBQSxJQUFBLEdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLEtBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsWUFBQSxNQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxDQUFBLE9BQUEsR0FBQSxHQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLE1BQUEsWUFBQSxNQUFBO0FBQUEsU0FBQSxnQkFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsSUFBQSxHQUFBLEdBQUEsY0FBQSxDQUFBLEdBQUEsT0FBQSxHQUFBLElBQUEsR0FBQSxJQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsSUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsUUFBQSxZQUFBLFFBQUEsUUFBQSxvQkFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLEtBQUEsV0FBQSxHQUFBO0FBQUEsU0FBQSxlQUFBLEdBQUEsUUFBQSxHQUFBLEdBQUEsWUFBQSxDQUFBLEdBQUEsMkJBQUEsR0FBQSxnQkFBQSxHQUFBLEdBQUEsTUFBQSxDQUFBLEdBQUE7QUFBQSxTQUFBLGFBQUEsS0FBQSxFQUFBLElBQUEsZUFBQSxLQUFBLGlCQUFBLEtBQUEsa0JBQUEsS0FBQSxNQUFBLElBQUEsR0FBQSxLQUFBLENBQUEsTUFBQSxDQUFBLFdBQUEsT0FBQSxJQUFBLEtBQUEsU0FBQSxRQUFBLEdBQUEsR0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsRUFBQSxJQUFBLDJCQUFBLEdBQUEsc0JBQUEsR0FBQSxZQUFBLFNBQUEsNERBQUEsSUFBQSxnQkFBQSxNQUFBLEdBQUEsTUFBQSxFQUFBLEtBQUE7QUFFbkMsTUFBTSxv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LENBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQSxDQUFBLENBQUE7QUFDQSxJQUFBLGlCQUFBLE9BQUEsQ0FBQSwwQkFBQSxDQUFBLENBQUE7QUFDQSxJQUFBLFNBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFBLENBQUEsQ0FBQTtBQUNBLElBQUEsUUFBQSxPQUFBLENBQUEsZ0NBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxhQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLHVCQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxlQUFBLE9BQUEsQ0FBQSw2Q0FBQSxDQUFBLENBQUE7QUFDQSxJQUFBLGNBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsMkNBQUEsQ0FBQSxDQUFBLENBQUE7QUFBcUUscUNBQUEsRUFBQSxPQUFBLEdBQUEsSUFBQSxHQUFBLFdBQUEsR0FBQSxHQUFBLEdBQUEsRUFBQSxTQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUE7QUFBQSwrQ0FBQSxFQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsVUFBQSxFQUFBLE9BQUEsSUFBQSxDQUFBLENBQUEsSUFBQSxvQkFBQSxJQUFBLE9BQUEsRUFBQSxDQUFBLENBQUEsSUFBQSxtQkFBQSxJQUFBLE9BQUEsRUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLDJCQUFBLHVCQUFBLEVBQUEsT0FBQSxXQUFBLEdBQUEsZ0JBQUEsR0FBQSxpQkFBQSxDQUFBLEVBQUEsRUFBQSxXQUFBLENBQUEsQ0FBQSxFQUFBO0FBQUEsbURBQUEsRUFBQSxJQUFBLENBQUEsV0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLFdBQUEsRUFBQSxFQUFBLE9BQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLEdBQUEsS0FBQSxJQUFBLElBQUEsT0FBQSxHQUFBLEtBQUEsUUFBQSxJQUFBLE9BQUEsR0FBQSxLQUFBLFVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxTQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLFFBQUEsd0JBQUEsQ0FBQSxXQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsS0FBQSxJQUFBLEtBQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLEVBQUEsT0FBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxTQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsd0JBQUEsTUFBQSxlQUFBLElBQUEsTUFBQSx5QkFBQSxDQUFBLENBQUEsS0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEVBQUEsRUFBQSxJQUFBLEdBQUEsS0FBQSxTQUFBLElBQUEsTUFBQSxVQUFBLGVBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLENBQUEsRUFBQSxFQUFBLElBQUEsT0FBQSxxQkFBQSxHQUFBLE1BQUEseUJBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxDQUFBLENBQUEsSUFBQSxJQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLENBQUEsRUFBQSxFQUFBLE1BQUEsZUFBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxDQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsUUFBQSxHQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsS0FBQSxFQUFBLEVBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxPQUFBLE1BQUEsQ0FBQSxFQUFBO0FBQUEsMENBQUEsRUFBQSxNQUFBLGNBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsRUFBQSxFQUFBLE1BQUEsZUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxPQUFBLEtBQUEsRUFBQSxZQUFBLElBQUEsRUFBQSxjQUFBLElBQUEsRUFBQSxVQUFBLElBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFB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QUEsSUFBQSxHQUFBLENBQUEsVUFBQSxHQUFBLEdBQUEsS0FBQSxPQUFBLEVBQUEsR0FBQTtBQUFBLFNBQUEseUJBQUEsV0FBQSxlQUFBLE9BQUEsa0NBQUEsaUJBQUEsT0FBQSxPQUFBLFFBQUEsZ0JBQUEsT0FBQSxPQUFBLFlBQUEsd0JBQUEsWUFBQSxDQUFBLFdBQUEsV0FBQSxXQUFBLEdBQUEsZ0JBQUEsR0FBQSxpQkFBQSxLQUFBLFdBQUE7QUFBQSxTQUFBLHdCQUFBLEdBQUEsRUFBQSxXQUFBLFNBQUEsV0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsVUFBQSxXQUFBLEdBQUEsUUFBQSxHQUFBLG9CQUFBLEdBQUEsd0JBQUEsR0FBQSw0QkFBQSxPQUFBLEVBQUEsR0FBQSxVQUFBLEtBQUEsR0FBQSx3QkFBQSxDQUFBLFdBQUEsT0FBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLFlBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxXQUFBLHFCQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsSUFBQSxNQUFBLENBQUEsd0JBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxRQUFBLEdBQUEsa0JBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxjQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLFNBQUEsSUFBQSxHQUFBLHFCQUFBLEdBQUEsTUFBQSxDQUFBLHdCQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsY0FBQSxJQUFBLEtBQUEsSUFBQSxDQUFBLEdBQUEsSUFBQSxJQUFBLENBQUEsR0FBQSxLQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLFlBQUEsTUFBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsQ0FBQSxPQUFBLEdBQUEsR0FBQSxNQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsRUFBQSxNQUFBLFlBQUEsTUFBQTtBQUFBLFNBQUEsZ0JBQUEsR0FBQSxFQUFB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QUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFBQSxTQUFBLHlCQUFBLFdBQUEsZUFBQSxPQUFBLGtDQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7QUFFcEMsTUFBTSxjQUFjLEdBQUcsQ0FB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QSx5QkFBQSxXQUFBLGVBQUEsT0FBQSxrQ0FBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxnQkFBQSxPQUFBLE9BQUEsWUFBQSx3QkFBQSxZQUFBLENBQUEsV0FBQSxXQUFBLFdBQUEsR0FBQSxnQkFBQSxHQUFBLGlCQUFBLEtBQUEsV0FBQTtBQUFBLFNBQUEsd0JBQUEsR0FBQSxFQUFBLFdBQUEsU0FBQSxXQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLFdBQUEsR0FBQSxRQUFBLEdBQUEsb0JBQUEsR0FBQSx3QkFBQSxHQUFBLDRCQUFBLE9BQUEsRUFBQSxHQUFBLFVBQUEsS0FBQSxHQUFBLHdCQUFBLENBQUEsV0FBQSxPQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsWUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLFdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLFFBQUEsR0FBQSxrQkFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsU0FBQSxJQUFBLEdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLEtBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsWUFBQSxNQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxDQUFBLE9BQUEsR0FBQSxHQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLE1BQUEsWUFBQSxNQUFBO0FBQUEsU0FBQSxnQkFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsSUFBQSxHQUFBLEdBQUEsY0FBQSxDQUFBLEdBQUEsT0FBQSxHQUFBLElBQUEs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Ozs7O0FDQS9ELElBQUEsTUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsV0FBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLGVBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLElBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLGlCQUFBLEdBQUEsT0FBQTtBQWFBLElBQUEsYUFBQSxHQUFBLE9BQUE7QUFXQSxJQUFBLGVBQUEsR0FBQSxPQUFBO0FBQ0EsSUFBQSxTQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLFlBQUEsR0FBQSxPQUFBO0FBSUEsSUFBQSxhQUFBLEdBQUEsT0FBQTtBQUFzRSxTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFBQSxTQUFBLHlCQUFBLFdBQUEsZUFBQSxPQUFBLGtDQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFB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d0JBQUEsWUFBQSxDQUFBLFdBQUEsV0FBQSxXQUFBLEdBQUEsZ0JBQUEsR0FBQSxpQkFBQSxLQUFBLFdBQUE7QUFBQSxTQUFBLHdCQUFBLEdBQUEsRUFBQSxXQUFBLFNBQUEsV0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsVUFBQSxXQUFBLEdBQUEsUUFBQSxHQUFBLG9CQUFBLEdBQUEsd0JBQUEsR0FBQSw0QkFBQSxPQUFBLEVBQUEsR0FBQSxVQUFBLEtBQUEsR0FBQSx3QkFBQSxDQUFBLFdBQUEsT0FBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLFlBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxXQUFBLHFCQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsSUFBQSxNQUFBLENBQUEsd0JBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxRQUFBLEdBQUEsa0JBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxjQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLFNBQUEsSUFBQSxHQUFBLHFCQUFBLEdBQUEsTUFBQSxDQUFBLHdCQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsY0FBQSxJQUFBLEtBQUEsSUFBQSxDQUFBLEdBQUEsSUFBQSxJQUFBLENBQUEsR0FBQSxLQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLFlBQUEsTUFBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsQ0FBQSxPQUFBLEdBQUEsR0FBQSxNQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsRUFBQSxNQUFBLFlBQUEsTUFBQTtBQUFBLFNBQUEsZ0JBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLElBQUEsR0FBQSxHQUFBLGNBQUEsQ0FBQSxHQUFBLE9BQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsY0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLElBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxV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Y0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLFFBQUEsR0FBQSxrQkFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsU0FBQSxJQUFBLEdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLEtBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsWUFBQSxNQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxDQUFBLE9BQUEsR0FBQSxHQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLE1BQUEsWUFBQSxNQUFBO0FBQUEsU0FBQSx1QkFBQSxHQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsRUFBQSxHQUFBO0FBQUEsU0FBQSxnQkFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsSUFBQSxHQUFBLEdBQUEsY0FBQSxDQUFBLEdBQUEsT0FBQSxHQUFBLElBQUEsR0FBQSxJQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsSUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsUUFBQSxZQUFBLFFBQUEsUUFBQSxvQkFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLEtBQUEsV0FBQSxHQUFBO0FBQUEsU0FBQSxlQUFBLEdBQUEsUUFBQSxHQUFBLEdBQUEsWUFBQSxDQUFBLEdBQUEsMkJBQUEsR0FBQSxnQkFBQSxHQUFBLEdBQUEsTUFBQSxDQUFBLEdBQUE7QUFBQSxTQUFBLGFBQUEsS0FBQSxFQUFBLElBQUEsZUFBQSxLQUFBLGlCQUFBLEtBQUEsa0JBQUEsS0FBQSxNQUFBLElBQUEsR0FBQSxLQUFBLENBQUEsTUFBQSxDQUFB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SUFBQSxNQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQTRCLFNBQUEsdUJBQUEsR0FBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsVUFBQSxHQUFBLEdBQUEsS0FBQSxPQUFBLEVBQUEsR0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBNUIsSUFBQSxVQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxNQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBRUEsSUFBQSxXQUFBLEdBQUEsT0FBQTtBQUNBLElBQUEsT0FBQSxHQUFBLHVCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsYUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsS0FBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLElBQUEsR0FBQSxPQUFBO0FBR0EsSUFBQSxnQkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsb0JBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLHNCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSwyQkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUVBLElBQUEsa0JBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLHFCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxvQkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEscUJBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFFQSxJQUFBLFVBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLG1CQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxxQkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsdUJBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLGdCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxlQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSx1QkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsYUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUEyRCxTQUFBLHlCQUFBLFdBQUEsZUFBQSxPQUFBLGtDQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7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S0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7QUFBQSxTQUFBLGdCQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxJQUFBLEdBQUEsR0FBQSxjQUFBLENBQUEsR0FBQSxPQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxJQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsVUFBQSxRQUFBLFlBQUEsUUFBQSxRQUFBLG9CQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsS0FBQSxXQUFBLEdBQUE7QUFBQSxTQUFBLGVBQUEsR0FBQSxRQUFBLEdBQUEsR0FBQSxZQUFBLENBQUEsR0FBQSwyQkFBQSxHQUFBLGdCQUFBLEdBQUEsR0FBQSxNQUFBLENBQUEsR0FBQTtBQUFBLFNBQUEsYUFBQSxLQUFBLEVBQUEsSUFBQSxlQUFBLEtBQUEsaUJBQUEsS0FBQSxrQkFBQSxLQUFBLE1BQUEsSUFBQSxHQUFB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QTtBQUtBLElBQUEsbUJBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsOEJBQUEsQ0FBQSxDQUFBLENBQUE7QUFDQSxJQUFBLHlCQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLDZEQUFBLENBQUEsQ0FBQSxDQUFBO0FBQWdHLHFDQUFBLEVBQUEsT0FBQSxHQUFBLElBQUEsR0FBQSxXQUFBLEdBQUEsR0FBQSxHQUFBLEVBQUEsU0FBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBO0FBQUEsK0NBQUEsRUFBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFVBQUEsRUFBQSxPQUFBLElBQUEsQ0FBQSxDQUFBLElBQUEsb0JBQUEsSUFBQSxPQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsbUJBQUEsSUFBQSxPQUFBLEVBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSwyQkFBQSx1QkFBQSxFQUFBLE9BQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsQ0FBQSxFQUFBLEVBQUEsV0FBQSxDQUFBLENBQUEsRUFBQTtBQUFBLG1EQUFBLEVBQUEsSUFBQSxDQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxXQUFBLEVBQUEsRUFBQSxPQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxHQUFBLEtBQUEsSUFBQSxJQUFBLE9BQUEsR0FBQSxLQUFBLFFBQUEsSUFBQSxPQUFBLEdBQUEsS0FBQSxVQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsU0FBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxRQUFBLHdCQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLEtBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxFQUFBLE9BQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsU0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLHdCQUFBLE1BQUEsZUFBQSxJQUFBLE1BQUEseUJBQUEsQ0FBQSxDQUFBLEtBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxFQUFBLEVBQUEsSUFBQSxHQUFB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LFdBQUEsR0FBQSxnQkFBQSxHQUFBLGlCQUFBLEtBQUEsV0FBQTtBQUFBLFNBQUEsd0JBQUEsR0FBQSxFQUFBLFdBQUEsU0FBQSxXQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLFdBQUEsR0FBQSxRQUFBLEdBQUEsb0JBQUEsR0FBQSx3QkFBQSxHQUFBLDRCQUFBLE9BQUEsRUFBQSxHQUFBLFVBQUEsS0FBQSxHQUFBLHdCQUFBLENBQUEsV0FBQSxPQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsWUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLFdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLFFBQUEsR0FBQSxrQkFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsU0FBQSxJQUFBLEdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLEtBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsWUFBQSxNQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxDQUFBLE9BQUEsR0FBQSxHQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLE1BQUEsWUFBQSxNQUFBO0FBQUEsU0FBQSxnQkFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsSUFBQSxHQUFBLEdBQUEsY0FBQSxDQUFBLEdBQUEsT0FBQSxHQUFBLElBQUEsR0FBQSxJQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsSUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsUUFBQSxZQUFBLFFBQUEsUUFBQSxv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QUEsR0FBQSxRQUFBLEdBQUEsb0JBQUEsR0FBQSx3QkFBQSxHQUFBLDRCQUFBLE9BQUEsRUFBQSxHQUFBLFVBQUEsS0FBQSxHQUFBLHdCQUFBLENBQUEsV0FBQSxPQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsWUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLFdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLFFBQUEsR0FBQSxrQkFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsU0FBQSxJQUFBLEdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLEtBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsWUFBQSxNQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxDQUFBLE9BQUEsR0FBQSxHQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLE1BQUEsWUFBQSxNQUFBO0FBQUEsU0FBQSx1QkFBQSxHQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsRUFBQSxHQUFBO0FBQUEsU0FBQSxnQkFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsSUFBQSxHQUFBLEdBQUEsY0FBQSxDQUFBLEdBQUEsT0FBQSxHQUFBLElBQUEsR0FBQSxJQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsSUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsUUFBQSxZQUFBLFFBQUEsUUFBQSxvQkFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLEtBQUEs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d0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7QUFBQSxTQUFBLGdCQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxJQUFBLEdBQUEsR0FBQSxjQUFBLENBQUEsR0FBQSxPQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxJQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsVUFBQSxRQUFBLFlBQUEsUUFBQSxRQUFBLG9CQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsS0FBQSxXQUFBLEdBQUE7QUFBQSxTQUFBLGVBQUEsR0FBQSxRQUFBLEdBQUEsR0FBQSxZQUFBLENBQUEsR0FBQSwyQkFBQSxHQUFBLGdCQUFBLEdBQUEsR0FBQSxNQUFBLENBQUEsR0FBQTtBQUFBLFNBQUEsYUFBQSxLQUFBLEVBQUEsSUFBQSxlQUFBLEtBQUEsaUJBQUEsS0FBQSxrQkFB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QUFBO0FBQ0EsSUFBQSxhQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBLENBQUE7QUFLQSxJQUFBLG1CQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGtEQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxZQUFBLE9BQUEsQ0FBQSxrQ0FBQSxDQUFBLENBQUE7QUFDQSxJQUFBLFVBQUEsT0FBQSxDQUFBLG1DQUFBLENBQUEsQ0FBQTtBQUNBLElBQUEsV0FBQSxPQUFBLENBQUEsd0JBQUEsQ0FBQSxDQUFBO0FBTUEsSUFBQSxXQUFBLE9BQUEsQ0FBQSxzQ0FBQSxDQUFBLENBQUE7QUFDQSxJQUFBLFNBQUEsT0FBQSxDQUFBLGtDQUFBLENBQUEsQ0FBQTtBQUNBLElBQUEsT0FBQSxPQUFBLENBQUEsa0NBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxjQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLDRCQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxVQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGlCQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxRQUFBLE9BQUEsQ0FBQSxxQkFBQSxDQUFBLENBQUE7QUFDQSxJQUFBLGVBQUEsc0JBQUEsQ0FBQSxPQUFBLENBQUEsdUJBQUEsQ0FBQSxDQUFBLENBQUE7QUFDQSxJQUFBLGVBQUEsT0FBQSxDQUFBLDRCQUFBLENBQUEsQ0FBQTtBQUNBLElBQUEsc0JBQUEsT0FBQSxDQUFBLG1DQUFBLENBQUEsQ0FBQTtBQUNBLElBQUEsZUFBQSxPQUFBLENBQUEseUNBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxlQUFBLE9BQUEsQ0FBQSwwQ0FBQSxDQUFBLENBQUE7QUFJQSxJQUFBLG1CQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLHNCQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxvQkFBQSxPQUFBLENBQUEseUJBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxXQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLGtCQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsSUFBQSxjQUFBLE9BQUEsQ0FBQSw2Q0FBQSxDQUFBLENBQUE7QUFBNkUscUNBQUEsRUFBQSxPQUFBLEdBQUEsSUFBQSxHQUFBLFdBQUEsR0FBQSxHQUFBLEdBQUEsRUFBQSxTQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUE7QUFBQSwrQ0FBQSxFQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsVUFBQSxFQUFBLE9BQUEsSUFBQSxDQUFBLENBQUEsSUFBQSxvQkFBQSxJQUFBLE9BQUEsRUFBQSxDQUFBLENBQUEsSUFBQSxtQkFBQSxJQUFBLE9BQUEsRUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLDJCQUFBLHVCQUFBLEVBQUEsT0FBQSxXQUFBLEdBQUEsZ0JBQUEsR0FBQSxpQkFBQSxDQUFBLEVBQUEsRUFBQSxXQUFBLENBQUEsQ0FBQSxFQUFBO0FBQUEsbURBQUEsRUFBQSxJQUFBLENBQUEsV0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLFdBQUEsRUFBQSxFQUFBLE9BQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLEdBQUEsS0FBQSxJQUFBLElBQUEsT0FBQSxHQUFBLEtBQUEsUUFBQSxJQUFBLE9BQUEsR0FBQSxLQUFBLFVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxTQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLFFBQUEsd0JBQUEsQ0FBQSxXQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsS0FBQSxJQUFBLEtBQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLEVBQUEsT0FBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxTQUFBLEVBQUEsQ0FBQSxDQUFBLElBQUEsd0JBQUEsTUFBQSxlQUFBLElBQUEsTUFBQSx5QkFBQSxDQUFBLENBQUEsS0FBQSxJQUFBLEdBQUEsSUFBQSxHQUFBLEVBQUEsRUFBQSxJQUFBLEdBQUEsS0FBQSxTQUFBLElBQUEsTUFBQSxVQUFBLGVBQUEsS0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLENBQUEsRUFBQSxFQUFBLElBQUEsT0FBQSxxQkFBQSxHQUFBLE1B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QUEsT0FBQTtBQUFpRSxTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFBQSxTQUFBLHlCQUFBLFdBQUEsZUFBQSxPQUFBLGtDQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFB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Q0FBQSxJQUFBLG9CQUFBLElBQUEsT0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLG1CQUFBLElBQUEsT0FBQSxFQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsMkJBQUEsdUJBQUEsRUFBQSxPQUFBLFdBQUEsR0FBQSxnQkFBQSxHQUFBLGlCQUFBLENBQUEsRUFBQSxFQUFBLFdBQUEsQ0FBQSxDQUFBLEVBQUE7QUFBQSxtREFBQSxFQUFBLElBQUEsQ0FBQSxXQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsV0FBQSxFQUFBLEVBQUEsT0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsR0FBQSxLQUFBLElBQUEsSUFBQSxPQUFBLEdBQUEsS0FBQSxRQUFBLElBQUEsT0FBQSxHQUFBLEtBQUEsVUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLFNBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsUUFBQSx3QkFBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxLQUFBLElBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsRUFBQSxPQUFBLEtBQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLFNBQUEsRUFBQSxDQUFBLENBQUEsSUFBQSx3QkFBQSxNQUFBLGVBQUEsSUFBQSxNQUFBLHlCQUFBLENBQUEsQ0FBQSxLQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsRUFBQSxFQUFBLElBQUEsR0FBQSxLQUFBLFNBQUEsSUFBQSxNQUFBLFVBQUEsZUFBQSxLQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBQSxFQUFBLEVBQUEsSUFBQSxPQUFBLHFCQUFBLEdBQUEsTUFBQSx5QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLENBQUEsQ0FBQSxJQUFBLElBQUEsS0FBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsQ0FBQSxFQUFBLEVBQUEsTUFBQSxlQUFBLENBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLE1BQUEsRUFB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LEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7QUFBQSxTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFBQSxTQUFBLGdCQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxJQUFBLEdBQUEsR0FBQSxjQUFBLENBQUEsR0FBQSxPQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxH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QUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxhQUFBLEdBQUEsT0FBQTtBQUdrRCxTQUFBLHlCQUFBLFdBQUEsZUFBQSxPQUFBLGtDQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7QUFBQSxTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFBQSxTQUFBLFNBQUEsSUFBQSxRQUFBLEdBQUEsTUFBQSxDQUFBLE1BQUEsR0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLElBQUEsZUFBQSxNQUFBLGFBQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFBLENBQUEsVUFBQSxNQUFBLEdBQUEsU0FBQSxDQUFBLENBQUEsWUFBQSxHQUFBLElBQUEsTUFBQSxRQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxLQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsTUFBQSxDQUFBLEdBQUEsZ0JBQUEsTUFBQSxZQUFBLFFBQUEsQ0FBQSxLQUFBLE9BQUEsU0FBQTtBQUFBLFNBQUEsZ0JBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLElBQUEsR0FBQSxHQUFBLGNBQUEsQ0FBQSxHQUFBLE9BQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsY0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLElBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLFFBQUEsWUFBQSxRQUFBLFFBQUEsb0JBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxLQUFBLFdBQUEsR0FBQTtBQUFBLFNBQUEsZUFBQSxHQUFBLFFBQUEsR0FBQSxHQUFBLFlBQUEsQ0FBQSxHQUFBLDJCQUFBLEdBQUEsZ0JBQUEsR0FBQSxHQUFBLE1BQUEsQ0FBQSxHQUFBO0FBQUEsU0FBQSxhQUFBLEtBQUEsRUFBQSxJQUFBLGVBQUEsS0FBQSxpQkFBQSxLQUFBLGtCQUFBLEtBQUEsTUFBQSxJQUFBLEdBQUEsS0FBQSxDQUFBLE1BQUEsQ0FBQSxXQUFBLE9BQUEsSUFBQSxLQUFBLFNBQUEsUUFBQSxHQUFBLEdBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxLQUFBLEVBQUEsSUFBQSwyQkFBQSxHQUFBLHNCQUFBLEdBQUEsWUFBQSxTQUFBLDREQUFBLElBQUEsZ0JBQUEsTUFBQSxHQUFBLE1BQUEsRUFBQSxLQUFBO0FBRW5DLE1BQU0sd0JBQXdCLFNBQVMsZ0JBQVMsQ0FBQztFQXFCOUQsZ0JBQWdCLENBQUEsRUFBRztJQUNqQixNQUFNO01BQ0osT0FBTztNQUNQLFFBQVE7TUFDUixVQUFVO01BQ1YsUUFBUTtNQUNSO0lBQ0YsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLO0lBR2Qsb0JBQ0UsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBO01BQUssU0FBUyxFQUFDO0lBQWtDLGdCQUMvQyxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxXQUFBLENBQUEsT0FBVTtNQUNULElBQUk7TUFDSixVQUFVLEVBQUUsVUFBVztNQUN2QixLQUFLLEVBQUUsVUFBVztNQUNsQixPQUFPLEVBQUUsT0FBUTtNQUNqQixJQUFJLEVBQUUsUUFBUztNQUNmLFFBQVEsRUFBRSxRQUFTO01BQ25CLFNBQVMsRUFBRTtJQUFVLENBQ3RCLENBQ0UsQ0FBQztFQUVWO0VBRUEsTUFBTSxDQUFBLEVBQUc7SUFDUCxNQUFNO01BQ0osUUFBUTtNQUNSLFNBQVM7TUFDVCxXQUFXO01BQ1g7SUFDRixDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUs7SUFDZCxvQkFDRSxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxJQUFBLENBQUEsT0FBRyxFQUFBLFFBQUE7TUFDRixTQUFTLEVBQUUsSUFBQSxtQkFBVSxFQUFDLDRCQUE0QixFQUFFLFNBQVMsQ0FBRTtNQUMvRCxhQUFhLEVBQUUsNEJBQWMsQ0FBQyxNQUFPO01BQ3JDLGNBQWMsRUFBRSw0QkFBYyxDQUFDO0lBQU8sR0FDbEMsUUFBUSxHQUVYLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLGVBQ3hCLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQTtNQUFLLFNBQVMsRUFBQztJQUFtQyxHQUFFLFdBQWlCLENBQUMsZUFHdEUsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBO01BQUssU0FBUyxFQUFDO0lBQXNDLEdBQUUsVUFBZ0IsQ0FDcEUsQ0FBQztFQUVWO0FBQ0Y7QUFBQyxPQUFBLENBQUEsT0FBQSxHQUFBLHdCQUFBO0FBQUEsZUFBQSxDQXBFb0Isd0JBQXdCLGVBRXhCO0VBQ2pCLFNBQVMsRUFBRSxrQkFBUyxDQUFDLE1BQU07RUFDM0IsT0FBTyxFQUFFLGtCQUFTLENBQUMsTUFBTTtFQUN6QixRQUFRLEVBQUUsa0JBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVTtFQUNyQyxVQUFVLEVBQUUsa0JBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVTtFQUN2QyxXQUFXLEVBQUUsa0JBQVMsQ0FBQyxJQUFJO0VBQzNCLFFBQVEsRUFBRSxrQkFBUyxDQUFDLEtBQUssQ0FBQztJQUFFLEdBQUcsWUFBRyxDQUFDO0VBQVUsQ0FBQyxDQUFDO0VBQy9DLFVBQVUsRUFBRSxrQkFBUyxDQUFDLE1BQU07RUFDNUIsUUFBUSxFQUFFLGtCQUFTLENBQUMsSUFBSTtFQUN4QixTQUFTLEVBQUUsa0JBQVMsQ0FBQztBQUN2QixDQUFDO0FBQUEsZUFBQSxDQVprQix3QkFBd0Isa0JBY3JCO0VBQ3BCLE9BQU8sRUFBRSxJQUFJO0VBQ2IsV0FBVyxFQUFFLEVBQUU7RUFDZixVQUFVLEVBQUUsRUFBRTtFQUNkLFFBQVEsRUFBRSxDQUFDO0FBQ2IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzdCSCxJQUFBLGlDQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQWdFLFNBQUEsdUJBQUEsR0FBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsVUFBQSxHQUFBLEdBQUEsS0FBQSxPQUFBLEVBQUEsR0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBaEUsSUFBQSxNQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxVQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxXQUFBLEdBQUEsT0FBQTtBQUlBLElBQUEsZUFBQSxHQUFBLE9BQUE7QUFBK0QsU0FBQSx1QkFBQSxHQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsRUFBQSxHQUFBO0FBRS9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsS0FBSyxFQUFFO0VBQzdDLE1BQU07SUFBRSxLQUFLO0lBQUUsUUFBUTtJQUFFO0VBQWUsQ0FBQyxHQUFHLFVBQVU7RUFFdEQsb0JBQ0UsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBO0lBQUssU0FBUyxFQUFDLFlBQVk7SUFBQyxHQUFHLEVBQUcsR0FBRSxjQUFlLElBQUcsS0FBTTtFQUFFLEdBQzNELE9BQU8sUUFBUSxLQUFLLFFBQVEsZ0JBQUcsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBO0lBQUcsU0FBUyxFQUFFO0VBQVMsQ0FBRSxDQUFDLEdBQUcsUUFBUSxFQUNwRSxLQUFLLEVBQ0wsSUFBQSx3QkFBWSxFQUFDLFVBQVUsQ0FDckIsQ0FBQztBQUVWO0FBRWUsU0FBUyxnQ0FBZ0MsQ0FBQztFQUN2RCxXQUFXO0VBQ1g7QUFDRixDQUFDLEVBQUU7RUFDRCxNQUFNLENBQUMsR0FBRyxJQUFBLDhCQUFjLEVBQUMsQ0FBQztFQUUxQixvQkFDRSxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUE7SUFBSyxTQUFTLEVBQUM7RUFBcUMsR0FDakQsSUFBQSxrQ0FBc0IsRUFBQyxDQUFDLEVBQUUsV0FBVyxFQUFFLHFCQUFxQixDQUFDLENBQUMsR0FBRyxDQUNoRSxrQkFDRixDQUNHLENBQUM7QUFFVjtBQUVBLGdDQUFnQyxDQUFDLFNBQVMsR0FBRztFQUMzQyxXQUFXLEVBQUUsa0JBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVTtFQUN4QyxxQkFBcUIsRUFBRSxrQkFBUyxDQUFDLE1BQU0sQ0FBQztBQUMxQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzdDRCxJQUFBLE1BQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLFNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLEtBQUEsR0FBQSxPQUFBO0FBQ0EsSUFBQSxVQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxLQUFBLEdBQUEsT0FBQTtBQUNBLElBQUEsSUFBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLFlBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLG9CQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxlQUFBLEdBQUEsT0FBQTtBQUNBLElBQUEsS0FBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLGVBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFBK0MsU0FBQSx1QkFBQSxHQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsRUFBQSxHQUFBO0FBQUEsU0FBQSx5QkFBQSxXQUFBLGVBQUEsT0FBQSxrQ0FBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxnQkFBQSxPQUFBLE9BQUEsWUFBQSx3QkFBQSxZQUFBLENBQUEsV0FBQSxXQUFBLFdBQUEsR0FBQSxnQkFBQSxHQUFBLGlCQUFBLEtBQUEsV0FBQTtBQUFBLFNBQUEsd0JBQUEsR0FBQSxFQUFBLFdBQUEsU0FBQSxXQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLFdBQUEsR0FBQSxRQUFBLEdBQUEsb0JBQUEsR0FBQSx3QkFBQSxHQUFBLDRCQUFBLE9BQUEsRUFBQSxHQUFBLFVBQUEsS0FBQSxHQUFBLHdCQUFBLENBQUEsV0FBQSxPQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsWUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLFdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLFFBQUEsR0FBQSxrQkFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsU0FBQSxJQUFBLEdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLEtBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsWUFBQSxNQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxDQUFBLE9BQUEsR0FBQSxHQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLE1BQUEsWUFBQSxNQUFBO0FBRS9DLE1BQU0sV0FBVyxHQUFHO0VBQ2xCLGdCQUFnQixFQUFFLGtCQUFrQjtFQUNwQyxvQkFBb0IsRUFBRSxzQkFBc0I7RUFDNUMsS0FBSyxFQUFFO0FBQ1QsQ0FBQztBQUVELE1BQU0sVUFBVSxHQUFHLENBQUM7RUFDbEIsZUFBZTtFQUNmLFlBQVk7RUFDWixhQUFhO0VBQ2I7QUFDRixDQUFDLEtBQUs7RUFDSixNQUFNLENBQUMsR0FBRyxJQUFBLDhCQUFjLEVBQUMsQ0FBQztFQUMxQixNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLElBQUEsZUFBUSxFQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztFQUNoRSxNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxHQUFHLElBQUEsZUFBUSxFQUFDLElBQUksQ0FBQztFQUN4QyxNQUFNLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxHQUFHLElBQUEsZUFBUSxFQUFDLElBQUksZUFBUyxDQUFDLENBQUMsQ0FBQztFQUUzRCxJQUFJLGlCQUFpQixHQUFHLElBQUk7RUFDNUIsTUFBTSxPQUFPLEdBQUcsSUFBQSxhQUFNLEVBQUMsS0FBSyxDQUFDO0VBRTdCLE1BQU0sS0FBSyxHQUFHLENBQUEsS0FBTTtJQUNsQixRQUFRLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDO0lBQ3RDLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDZCxZQUFZLENBQUMsSUFBSSxlQUFTLENBQUMsQ0FBQyxDQUFDO0VBQy9CLENBQUM7RUFFRCxNQUFNLGdCQUFnQixHQUFHLE1BQUEsQ0FBQSxLQUFZO0lBQ25DLElBQUk7TUFDRixNQUFNO1FBQUU7TUFBaUIsQ0FBQyxHQUFHLE1BQU0sb0JBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztNQUM1RCxJQUNFLENBQUMsZ0JBQWdCLElBQ2pCLElBQUEsd0JBQWtCLEVBQUMsQ0FBQyxLQUFLLGdDQUEyQixFQUNwRDtRQUNBLE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ2hELE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxJQUFJO1FBQ25DLE1BQU0sWUFBWSxHQUFHLFdBQVcsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUk7UUFDbEUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLENBQUM7TUFDdEQ7SUFDRixDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUU7TUFDVixJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDbkIsUUFBUSxDQUFDLENBQUMsQ0FBQztNQUNiO0lBQ0Y7SUFDQTtJQUNBO0lBQ0EsT0FBTyxVQUFVLENBQUMsQ0FBQztFQUNyQixDQUFDO0VBRUQsTUFBTSxnQkFBZ0IsR0FBRyxNQUFBLENBQUEsS0FBWTtJQUNuQyxJQUFJO01BQ0YsTUFBTTtRQUFFO01BQVksQ0FBQyxHQUFHLE1BQU0sb0JBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztNQUN2RCxJQUFJLFdBQVcsRUFBRTtRQUNmO1FBQ0EsTUFBTSxJQUFJLE9BQU8sQ0FBRSxPQUFPLElBQUssVUFBVSxDQUFDLE9BQU8sRUFBRSxZQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7VUFDcEI7UUFDRjtRQUNBLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO01BQzdCLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDMUI7UUFDQSxpQkFBaUIsR0FBRyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsWUFBTSxDQUFDO1FBQ3hELFFBQVEsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUM7TUFDNUM7SUFDRixDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUU7TUFDVixJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDbkIsUUFBUSxDQUFDLENBQUMsQ0FBQztNQUNiO0lBQ0Y7RUFDRixDQUFDO0VBRUQsTUFBTSxVQUFVLEdBQUksSUFBSSxJQUFLO0lBQzNCLElBQUk7TUFDRixJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1Q7TUFDRjtNQUNBLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO01BQzNCLElBQUksU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUU7UUFDMUIsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25DLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO01BQ3ZDO0lBQ0YsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFO01BQ1YsSUFBSSxlQUFlLEVBQUU7UUFDbkIsYUFBYSxDQUFDLENBQUMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO01BQ2xELENBQUMsTUFBTTtRQUNMLGFBQWEsQ0FBQyxDQUFDLENBQUMsbUNBQW1DLENBQUMsQ0FBQztNQUN2RDtNQUNBLFFBQVEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUN6QztFQUNGLENBQUM7RUFFRCxNQUFNLFVBQVUsR0FBRyxDQUFBLEtBQU07SUFDdkIsSUFBSTtNQUNGLGdCQUFnQixDQUFDLENBQUM7SUFDcEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFO01BQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDcEI7TUFDRjtNQUNBLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxpQkFBaUIsRUFBRTtRQUNoQyxpQkFBRyxDQUFDLElBQUksQ0FBRSx1QkFBc0IsQ0FBRSxHQUFFLENBQUM7UUFDckMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQztNQUM1QyxDQUFDLE1BQU07UUFDTCxRQUFRLENBQUMsQ0FBQyxDQUFDO01BQ2I7SUFDRjtFQUNGLENBQUM7RUFFRCxJQUFBLGdCQUFTLEVBQUMsTUFBTTtJQUNkLE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSTtJQUN0QixnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2xCLE9BQU8sTUFBTTtNQUNYLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSztNQUN2QixZQUFZLENBQUMsaUJBQWlCLENBQUM7SUFDakMsQ0FBQztJQUNEO0VBQ0YsQ0FBQyxFQUFFLEVBQUUsQ0FBQztFQUVOLElBQUEsZ0JBQVMsRUFBQyxNQUFNO0lBQ2QsSUFBSSxLQUFLLEtBQUssV0FBVyxDQUFDLEtBQUssRUFBRTtNQUMvQixVQUFVLENBQUMsQ0FBQztJQUNkLENBQUMsTUFBTSxJQUFJLEtBQUssS0FBSyxXQUFXLENBQUMsb0JBQW9CLEVBQUU7TUFDckQsZ0JBQWdCLENBQUMsQ0FBQztJQUNwQjtJQUNBO0VBQ0YsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7RUFFWCxNQUFNLFFBQVEsR0FBRyxDQUFBLEtBQU07SUFDckIsWUFBWSxDQUFDLGlCQUFpQixDQUFDO0lBQy9CLEtBQUssQ0FBQyxDQUFDO0lBQ1AsZ0JBQWdCLENBQUMsQ0FBQztFQUNwQixDQUFDO0VBRUQsTUFBTSxXQUFXLEdBQUcsQ0FBQSxLQUFNO0lBQ3hCLElBQUksS0FBSyxFQUFFLEdBQUc7SUFDZCxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssaUJBQWlCLEVBQUU7TUFDcEMsS0FBSyxHQUFHLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQztNQUMvQixHQUFHLEdBQUcsQ0FBQyxDQUFDLGVBQWUsQ0FBQztJQUMxQixDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUMsRUFBRTtNQUMvQyxJQUFJLGVBQWUsRUFBRTtRQUNuQixHQUFHLEdBQUcsQ0FBQyxDQUFDLCtCQUErQixDQUFDO01BQzFDLENBQUMsTUFBTTtRQUNMLEdBQUcsR0FBRyxDQUFDLENBQUMsZUFBZSxDQUFDO01BQzFCO0lBQ0YsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxDQUFDLENBQUMsNEJBQTRCLENBQUMsRUFBRTtNQUM1RCxHQUFHLEdBQUcsQ0FBQyxDQUFDLDRCQUE0QixDQUFDO0lBQ3ZDLENBQUMsTUFBTTtNQUNMLEtBQUssR0FBRyxDQUFDLENBQUMseUJBQXlCLENBQUM7TUFDcEMsR0FBRyxHQUFHLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQztJQUMvQjtJQUVBLG9CQUNFLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFBLE1BQUEsQ0FBQSxPQUFBLENBQUEsUUFBQSxxQkFDRSxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUE7TUFBSyxTQUFTLEVBQUM7SUFBbUIsZ0JBQ2hDLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQTtNQUFLLEdBQUcsRUFBQyxtQkFBbUI7TUFBQyxLQUFLLEVBQUMsSUFBSTtNQUFDLE1BQU0sRUFBQyxJQUFJO01BQUMsR0FBRyxFQUFDO0lBQUUsQ0FBRSxDQUN6RCxDQUFDLEVBQ0wsS0FBSyxnQkFBRyxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUE7TUFBSyxTQUFTLEVBQUM7SUFBbUIsR0FBRSxLQUFXLENBQUMsR0FBRyxJQUFJLGVBQ2hFLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQTtNQUFLLFNBQVMsRUFBQztJQUFtQixHQUFFLEdBQVMsQ0FBQyxlQUM5QyxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxvQkFBQSxDQUFBLE9BQW1CO01BQ2xCLFFBQVEsRUFBRSxDQUFBLEtBQU07UUFDZCxhQUFhLENBQUMsRUFBRSxDQUFDO1FBQ2pCLFlBQVksQ0FBQyxDQUFDO01BQ2hCLENBQUU7TUFDRixRQUFRLEVBQUUsQ0FBQSxLQUFNO1FBQ2QsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQUNqQixRQUFRLENBQUMsQ0FBQztNQUNaLENBQUU7TUFDRixVQUFVLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBRTtNQUN4QixVQUFVLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBRTtNQUMxQixnQkFBZ0IsRUFBQztJQUFTLENBQzNCLENBQ0QsQ0FBQztFQUVQLENBQUM7RUFFRCxNQUFNLFdBQVcsR0FBRyxDQUFBLEtBQU07SUFDeEIsSUFBSSxPQUFPO0lBQ1gsSUFBSSxLQUFLLEtBQUssV0FBVyxDQUFDLGdCQUFnQixFQUFFO01BQzFDLE9BQU8sR0FBRyxDQUFDLENBQUMscUJBQXFCLENBQUM7SUFDcEMsQ0FBQyxNQUFNLElBQUksS0FBSyxLQUFLLFdBQVcsQ0FBQyxLQUFLLEVBQUU7TUFDdEMsT0FBTyxHQUFHLENBQUMsQ0FBQyw0QkFBNEIsQ0FBQztJQUMzQyxDQUFDLE1BQU0sSUFBSSxLQUFLLEtBQUssV0FBVyxDQUFDLG9CQUFvQixFQUFFO01BQ3JELE9BQU8sR0FBRyxDQUFDLENBQUMsNEJBQTRCLENBQUM7SUFDM0M7SUFDQSxvQkFDRSxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQSxNQUFBLENBQUEsT0FBQSxDQUFBLFFBQUEscUJBQ0UsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBO01BQUssU0FBUyxFQUFDO0lBQXFCLGdCQUNsQyxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxlQUFBLENBQUEsT0FBYztNQUFDLFVBQVUsRUFBRTtJQUFXLENBQUUsQ0FDdEMsQ0FBQyxFQUNMLE9BQU8saUJBQUksTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBO01BQUssU0FBUyxFQUFDO0lBQW9CLEdBQUUsT0FBYSxDQUM5RCxDQUFDO0VBRVAsQ0FBQztFQUVELG9CQUNFLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQTtJQUFLLFNBQVMsRUFBQztFQUFZLEdBQUUsS0FBSyxHQUFHLFdBQVcsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQU8sQ0FBQztBQUU3RSxDQUFDO0FBRUQsVUFBVSxDQUFDLFNBQVMsR0FBRztFQUNyQixlQUFlLEVBQUUsa0JBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVTtFQUMxQyxZQUFZLEVBQUUsa0JBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVTtFQUN2QyxhQUFhLEVBQUUsa0JBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVTtFQUN4QyxhQUFhLEVBQUUsa0JBQVMsQ0FBQyxJQUFJLENBQUM7QUFDaEMsQ0FBQztBQUFDLElBQUEsUUFBQSxHQUVhLFVBQVU7QUFBQSxPQUFBLENBQUEsT0FBQSxHQUFBLFFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeE56QixJQUFBLE1BQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLFFBQUEsR0FBQSxPQUFBO0FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQTtBQUNBLElBQUEsU0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsS0FBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLFFBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFBdUMsU0FBQSx1QkFBQSxHQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsRUFBQSxHQUFBO0FBQUEsU0FBQSx5QkFBQSxXQUFBLGVBQUEsT0FBQSxrQ0FBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxnQkFBQSxPQUFBLE9BQUEsWUFBQSx3QkFBQSxZQUFBLENBQUEsV0FBQSxXQUFBLFdBQUEsR0FBQSxnQkFBQSxHQUFBLGlCQUFBLEtBQUEsV0FBQTtBQUFBLFNBQUEsd0JBQUEsR0FBQSxFQUFBLFdBQUEsU0FBQSxXQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLFdBQUEsR0FBQSxRQUFBLEdBQUEsb0JBQUEsR0FBQSx3QkFBQSxHQUFBLDRCQUFBLE9BQUEsRUFBQSxHQUFBLFVBQUEsS0FBQSxHQUFBLHdCQUFBLENBQUEsV0FBQSxPQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsWUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLFdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLFFBQUEsR0FBQSxrQkFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsU0FBQSxJQUFBLEdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLEtBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsWUFBQSxNQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxDQUFBLE9BQUEsR0FBQSxHQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLE1BQUEsWUFBQSxNQUFBO0FBRXZDLE1BQU0sY0FBYyxHQUFHLENBQUM7RUFBRTtBQUFXLENBQUMsS0FBSztFQUN6QyxNQUFNLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxHQUFHLElBQUEsZUFBUSxFQUFDLEtBQUssQ0FBQztFQUM3QyxNQUFNLFVBQVUsR0FBRyxJQUFBLGNBQU8sRUFBQyxNQUFNO0lBQy9CLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7SUFDdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBYyxDQUFDLGdCQUFnQixFQUFFLENBQUMsc0JBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsRSxPQUFPLElBQUksNEJBQW1CLENBQUMsSUFBSSxFQUFFO01BQ25DLHdCQUF3QixFQUFFLGlCQUFXLEdBQUcsR0FBRztNQUMzQyx1QkFBdUIsRUFBRSxpQkFBVyxHQUFHO0lBQ3pDLENBQUMsQ0FBQztFQUNKLENBQUMsRUFBRSxFQUFFLENBQUM7RUFFTixJQUFBLGdCQUFTLEVBQUMsTUFBTTtJQUNkLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDO0lBQ2xELE1BQU0sZUFBZSxHQUFHLENBQUEsS0FBTTtNQUM1QixVQUFVLENBQUMsSUFBSSxDQUFDO0lBQ2xCLENBQUM7SUFDRCxTQUFTLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQztJQUN0RCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMscUJBQXFCLENBQzlDLFNBQVMsRUFDVCxPQUFPLEVBQ04sTUFBTSxJQUFLO01BQ1YsSUFBSSxNQUFNLEVBQUU7UUFDVixVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7TUFDOUI7SUFDRixDQUNGLENBQUM7SUFDRCxPQUFPLE1BQU07TUFDWCxTQUFTLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQztNQUN6RCxPQUFPLENBQ0osSUFBSSxDQUFFLFFBQVEsSUFBSztRQUNsQixJQUFJLFFBQVEsRUFBRTtVQUNaLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQjtNQUNGLENBQUMsQ0FBQyxDQUNELEtBQUssQ0FBQyxpQkFBRyxDQUFDLElBQUksQ0FBQztJQUNwQixDQUFDO0lBQ0Q7RUFDRixDQUFDLEVBQUUsRUFBRSxDQUFDO0VBRU4sb0JBQ0UsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBO0lBQUssU0FBUyxFQUFDO0VBQW9DLGdCQUNqRCxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUE7SUFDRSxFQUFFLEVBQUMsT0FBTztJQUNWLEtBQUssRUFBRTtNQUNMLE9BQU8sRUFBRSxPQUFPLEdBQUcsT0FBTyxHQUFHLE1BQU07TUFDbkMsS0FBSyxFQUFFLE1BQU07TUFDYixNQUFNLEVBQUU7SUFDVjtFQUFFLENBQ0gsQ0FBQyxFQUNELE9BQU8sR0FBRyxJQUFJLGdCQUFHLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLFFBQUEsQ0FBQSxPQUFPO0lBQUMsS0FBSyxFQUFDO0VBQThCLENBQUUsQ0FDOUQsQ0FBQztBQUVWLENBQUM7QUFFRCxjQUFjLENBQUMsU0FBUyxHQUFHO0VBQ3pCLFVBQVUsRUFBRSxrQkFBUyxDQUFDLElBQUksQ0FBQztBQUM3QixDQUFDO0FBQUMsSUFBQSxRQUFBLEdBRWEsY0FBYztBQUFBLE9BQUEsQ0FBQSxPQUFBLEdBQUEsUUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsRTdCLElBQUEsa0JBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFBc0QsU0FBQSx1QkFBQSxHQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsRUFBQSxHQUFBO0FBQUEsSUFBQSxRQUFBLEdBRXZDLDBCQUFpQjtBQUFBLE9BQUEsQ0FBQSxPQUFBLEdBQUEsUUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNGaEMsSUFBQSxNQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxXQUFBLEdBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLFFBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLGVBQUEsR0FBQSxPQUFBO0FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQTtBQVFBLElBQUEsSUFBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLHlCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxzQkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUErRCxTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFBQSxTQUFBLHlCQUFBLFdBQUEsZUFBQSxPQUFBLGtDQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7QUFFL0QsTUFBTSxpQkFBaUIsR0FBRyxDQUFBLEtBQU07RUFBQSxJQUFBLGFBQUE7RUFDOUIsTUFBTSxDQUFDLEdBQUcsSUFBQSw4QkFBYyxFQUFDLENBQUM7RUFFMUIsTUFBTSxVQUFVLEdBQUcsSUFBQSx1QkFBVyxFQUFDLG9DQUF5QixDQUFDO0VBQ3pELE1BQU07SUFBRSxJQUFJO0lBQUU7RUFBSyxDQUFDLEdBQUcsVUFBVTtFQUNqQyxNQUFNLGtCQUFrQixHQUFHLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxPQUFPO0VBQ3hDLE1BQU0sZUFBZSxHQUFHLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxPQUFPO0VBQ3JDLE1BQU0sV0FBVyxHQUFHLGtCQUFrQixJQUFJLGVBQWU7RUFDekQsTUFBTSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsR0FBRyxJQUFBLGVBQVEsRUFBQyxFQUFFLENBQUM7RUFFaEQsTUFBTTtJQUFFO0VBQU8sQ0FBQyxHQUFHLElBQUEsdUJBQVcsRUFBRSxLQUFLLElBQUs7SUFDeEMsT0FBTyxLQUFLLENBQUMsa0JBQWtCO0VBQ2pDLENBQUMsQ0FBQztFQUNGO0VBQ0E7RUFDQTtFQUNBLE1BQU0sT0FBTyxHQUFHLElBQUEsY0FBTyxFQUFDLE1BQU07SUFDNUIsT0FBTyxNQUFNO0lBQ2I7RUFDRixDQUFDLEVBQUUsQ0FBQyxJQUFJLGFBQUosSUFBSSx3QkFBQSxhQUFBLEdBQUosSUFBSSxDQUFFLE9BQU8sY0FBQSxhQUFBLHVCQUFiLGFBQUEsQ0FBZSxTQUFTLENBQUMsQ0FBQztFQUU5QixNQUFNLFFBQVEsR0FBRyxJQUFBLHVCQUFXLEVBQUMsQ0FBQztFQUM5QixNQUFNLG9CQUFvQixHQUFHLElBQUEsa0JBQVcsRUFDdEMsTUFBTSxRQUFRLENBQUMsSUFBQSw2QkFBMEIsRUFBQyxDQUFDLENBQUMsRUFDNUMsQ0FBQyxRQUFRLENBQ1gsQ0FBQztFQUVELE1BQU0saUJBQWlCLEdBQUcsSUFBQSxrQkFBVyxFQUFDLE1BQU07SUFDMUMsSUFBSSxNQUFNLEdBQUcsaUJBQVE7SUFDckIsUUFBUSxPQUFPLENBQUMsSUFBSTtNQUNsQixLQUFLLGlCQUFZLENBQUMsYUFBYTtRQUFFO1VBQy9CLE1BQU0sR0FBRywwQkFBaUI7VUFDMUI7UUFDRjtNQUNBLEtBQUssaUJBQVksQ0FBQyxRQUFRO1FBQUU7VUFDMUIsTUFBTSxHQUFHLGtCQUFTO1VBQ2xCO1FBQ0Y7TUFDQSxLQUFLLGlCQUFZLENBQUMsbUJBQW1CO1FBQUU7VUFDckMsTUFBTSxHQUFHLHVCQUFjO1VBQ3ZCO1FBQ0Y7TUFDQTtRQUFTO1VBQ1AsTUFBTSxHQUFHLGlCQUFRO1FBQ25CO0lBQ0Y7SUFDQSxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pCLFFBQVEsQ0FBQyxJQUFBLG9DQUFpQyxFQUFDLENBQUMsQ0FBQztFQUMvQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7RUFFdkIsTUFBTSxLQUFLLEdBQUcsSUFBQSxjQUFPLEVBQUMsTUFBTTtJQUMxQixJQUFJLE1BQU0sR0FBRyxFQUFFO0lBQ2YsSUFBSSxlQUFlLEVBQUU7TUFDbkIsTUFBTSxHQUFHLENBQUMsQ0FBQyw0QkFBNEIsQ0FBQztJQUMxQyxDQUFDLE1BQU0sSUFBSSxrQkFBa0IsRUFBRTtNQUM3QixNQUFNLEdBQUcsQ0FBQyxDQUFDLCtCQUErQixDQUFDO0lBQzdDO0lBQ0EsSUFBSSxVQUFVLEtBQUssRUFBRSxFQUFFO01BQ3JCLE1BQU0sR0FBRyxVQUFVO0lBQ3JCO0lBQ0EsT0FBTyxNQUFNO0VBQ2YsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLGtCQUFrQixFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztFQUN4RCxPQUFPLFdBQVcsZ0JBQ2hCLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLFFBQUEsQ0FBQSxPQUFPO0lBQ04sS0FBSyxFQUFFLEtBQU07SUFDYixPQUFPLEVBQUUsa0JBQWtCLEdBQUcsb0JBQW9CLEdBQUc7RUFBa0IsR0FFdEUsa0JBQWtCLGlCQUNqQixNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyx5QkFBQSxDQUFBLE9BQXdCO0lBQ3ZCLFlBQVksRUFBRSxvQkFBcUI7SUFDbkMsYUFBYSxFQUFFO0VBQWMsQ0FDOUIsQ0FDRixFQUNBLGVBQWUsaUJBQ2QsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsc0JBQUEsQ0FBQSxPQUFxQjtJQUNwQixhQUFhLEVBQUUsYUFBYztJQUM3QixZQUFZLEVBQUUsaUJBQWtCO0lBQ2hDLE9BQU8sRUFBRSxJQUFJLENBQUM7RUFBUSxDQUN2QixDQUVJLENBQUMsR0FDUixJQUFJO0FBQ1YsQ0FBQztBQUFDLElBQUEsUUFBQSxHQUVhLGlCQUFpQjtBQUFBLE9BQUEsQ0FBQSxPQUFBLEdBQUEsUUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNyR2hDLElBQUEsc0JBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFBeUUsU0FBQSx1QkFBQSxHQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsRUFBQSxHQUFBO0FBQUEsSUFBQSxRQUFBLEdBRTFELDhCQUFxQjtBQUFBLE9BQUEsQ0FBQSxPQUFBLEdBQUEsUUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDRnBDLElBQUEsTUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsT0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsS0FBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLFVBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLElBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLGVBQUEsR0FBQSxPQUFBO0FBQ0EsSUFBQSxhQUFBLEdBQUEsT0FBQTtBQU1BLElBQUEsY0FBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLGlCQUFBLEdBQUEsT0FBQTtBQUFrRCxTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFBQSxTQUFBLHlCQUFBLFdBQUEsZUFBQSxPQUFBLGtDQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7QUFFbEQsTUFBTSxNQUFNLEdBQUcsQ0FBQztFQUFFLElBQUk7RUFBRSxJQUFJO0VBQUUsMkJBQTJCO0VBQUU7QUFBTyxDQUFDLEtBQUs7RUFDdEUsTUFBTSxDQUFDLEdBQUcsSUFBQSw4QkFBYyxFQUFDLENBQUM7RUFDMUIsTUFBTSxTQUFTLEdBQUcsSUFBQSxjQUFPLEVBQ3ZCLE1BQU0sSUFBSSxlQUFTLENBQUMsSUFBSSxRQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQ2hFLENBQUMsSUFBSSxFQUFFLElBQUksQ0FDYixDQUFDO0VBQ0QsTUFBTSxDQUFDLGFBQWEsRUFBRSxnQkFBZ0IsQ0FBQyxHQUFHLElBQUEsZUFBUSxFQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0VBQ3hFLElBQUEsZ0JBQVMsRUFBQyxNQUFNO0lBQ2QsTUFBTSxFQUFFLEdBQUcsV0FBVyxDQUFDLE1BQU07TUFDM0IsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztJQUNQLE9BQU8sTUFBTTtNQUNYLGFBQWEsQ0FBQyxFQUFFLENBQUM7SUFDbkIsQ0FBQztFQUNILENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0VBRWYsb0JBQ0UsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUEsTUFBQSxDQUFBLE9BQUEsQ0FBQSxRQUFBLHFCQUNFLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLElBQUEsQ0FBQSxPQUFHLHFCQUNGLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGlCQUFBLENBQUEsSUFBSTtJQUFDLEtBQUssRUFBRSx1QkFBUyxDQUFDO0VBQU8sR0FDM0IsQ0FBQyxDQUFDLCtCQUErQixDQUM5QixDQUNILENBQUMsZUFDTixNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxJQUFBLENBQUEsT0FBRztJQUNGLFVBQVUsRUFBRSxDQUFFO0lBQ2QsYUFBYSxFQUFFLENBQUU7SUFDakIsT0FBTyxFQUFFLHFCQUFPLENBQUMsSUFBSztJQUN0QixVQUFVLEVBQUUsd0JBQVUsQ0FBQyxNQUFPO0lBQzlCLGFBQWEsRUFBRSw0QkFBYyxDQUFDO0VBQU8sZ0JBRXJDLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQTtJQUNFLEtBQUssRUFBRTtNQUNMLE9BQU8sRUFBRSxFQUFFO01BQ1gsZUFBZSxFQUFFO0lBQ25CO0VBQUUsZ0JBRUYsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsT0FBQSxDQUFBLE9BQU07SUFBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFFO0lBQUMsSUFBSSxFQUFFO0VBQUksQ0FBRSxDQUNyRCxDQUNGLENBQUMsZUFDTixNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxJQUFBLENBQUEsT0FBRztJQUFDLGFBQWEsRUFBRSxDQUFFO0lBQUMsV0FBVyxFQUFFLENBQUU7SUFBQyxZQUFZLEVBQUU7RUFBRSxnQkFDckQsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsaUJBQUEsQ0FBQSxJQUFJO0lBQUMsS0FBSyxFQUFFLHVCQUFTLENBQUM7RUFBTyxHQUMzQixDQUFDLENBQUMsa0NBQWtDLENBQ2pDLENBQ0gsQ0FBQyxlQUNOLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGNBQUEsQ0FBQSxtQkFBbUI7SUFDbEIsUUFBUSxFQUFFLDJCQUE0QjtJQUN0QyxRQUFRLEVBQUUsTUFBTztJQUNqQixVQUFVLEVBQUUsQ0FBQyxDQUFDLDZCQUE2QixDQUFFO0lBQzdDLFVBQVUsRUFBRSxDQUFDLENBQUMsbUNBQW1DLENBQUU7SUFDbkQsZ0JBQWdCLEVBQUM7RUFBUyxDQUMzQixDQUNELENBQUM7QUFFUCxDQUFDO0FBRUQsTUFBTSxDQUFDLFNBQVMsR0FBRztFQUNqQixJQUFJLEVBQUUsa0JBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVTtFQUNqQyxJQUFJLEVBQUUsa0JBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVTtFQUNqQywyQkFBMkIsRUFBRSxrQkFBUyxDQUFDLElBQUksQ0FBQyxVQUFVO0VBQ3RELE1BQU0sRUFBRSxrQkFBUyxDQUFDLElBQUksQ0FBQztBQUN6QixDQUFDO0FBQUMsSUFBQSxRQUFBLEdBRWEsTUFBTTtBQUFBLE9BQUEsQ0FBQSxPQUFBLEdBQUEsUUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzdFckIsSUFBQSxNQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxVQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxRQUFBLEdBQUEsT0FBQTtBQUNBLElBQUEsT0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsT0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUE4QixTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFBQSxTQUFBLHlCQUFBLFdBQUEsZUFBQSxPQUFBLGtDQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7QUFFOUIsTUFBTSxx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T0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7QUFBQSxTQUFBLGdCQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxJQUFBLEdBQUEsR0FBQSxjQUFBLENBQUEsR0FBQSxPQUFBLEdBQUEsSUFBQSxHQUFBLElBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxJQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsVUFBQSxRQUFBLFlBQUEsUUFBQSxRQUFBLG9CQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsS0FBQSxXQUFBLEdBQUE7QUFBQSxTQUFBLGVBQUEsR0FBQSxRQUFBLEdBQUEsR0FBQSxZQUFBLENBQUEsR0FBQSwyQkFBQSxHQUFBLGdCQUFBLEdBQUEsR0FBQSxNQUFBLENBQUEsR0FBQTtBQUFBLFNBQUEsYUFBQSxLQUFBLEVBQUEs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LEdBQUEsQ0FBQSxHQUFBLFlBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxXQUFBLHFCQUFBLEdBQUEsTUFBQSxDQUFBLGNBQUEsSUFBQSxNQUFBLENBQUEsd0JBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxRQUFBLEdBQUEsa0JBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxjQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLFNBQUEsSUFBQSxHQUFBLHFCQUFBLEdBQUEsTUFBQSxDQUFBLHdCQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsY0FBQSxJQUFBLEtBQUEsSUFBQSxDQUFBLEdBQUEsSUFBQSxJQUFBLENBQUEsR0FBQSxLQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLFlBQUEsTUFBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsQ0FBQSxPQUFBLEdBQUEsR0FBQSxNQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsRUFBQSxNQUFBLFlBQUEsTUFBQTtBQUFBLFNBQUEsZ0JBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLElBQUEsR0FBQSxHQUFBLGNBQUEsQ0FBQSxHQUFBLE9BQUEsR0FBQSxJQUFBLEdBQUEsSUFBQSxNQUFBLENBQUEsY0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLElBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLFFBQUEsWUFBQSxRQUFBLFFBQUEsb0JBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxLQUFBLFdBQUEsR0FBQTtBQUFBLFNBQUEsZUFBQSxHQUFBLFFBQUEsR0FBQSxHQUFBLFlBQUEsQ0FBQSxHQUFBLDJCQUFBLEdBQUEsZ0JBQUEsR0FBQSxHQUFBLE1BQUEsQ0FBQSxHQUFBO0FBQUEsU0FBQSxhQUFBLEtBQUEsRUFBQSxJQUFBLGVBQUEsS0FBQSxpQkFBQSxLQUFBLGtCQUFBLEtBQUEsTUFBQSxJQUFBLEdBQUEsS0FBQSxDQUFBLE1BQUEsQ0FB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LHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7QUFBQSxTQUFBLHlCQUFBLFdBQUEsZUFBQSxPQUFBLGtDQUFBLGlCQUFBLE9BQUEsT0FBQSxRQUFBLGdCQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxXQUFBLFdBQUEsV0FBQSxHQUFBLGdCQUFBLEdBQUEsaUJBQUEsS0FBQSxXQUFBO0FBQUEsU0FBQSx3QkFBQSxHQUFBLEVBQUEsV0FBQSxTQUFBLFdBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsV0FBQSxHQUFBLFFBQUEsR0FBQSxvQkFBQSxHQUFBLHdCQUFBLEdBQUEsNEJBQUEsT0FBQSxFQUFBLEdBQUEsVUFBQSxLQUFBLEdBQUEsd0JBQUEsQ0FBQSxXQUFBLE9BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxZQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxTQUFBLE1BQUEsV0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsUUFBQSxHQUFBLGtCQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxTQUFBLElBQUEsR0FBQSxxQkFBQSxHQUFBLE1BQUEsQ0FBQSx3QkFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLGNBQUEsSUFBQSxLQUFBLElBQUEsQ0FBQSxHQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsS0FBQSxNQUFBLENBQUEsY0FBQSxDQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxZQUFBLE1BQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLENBQUEsT0FBQSxHQUFBLEdBQUEsTUFBQSxLQUFBLElBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsTUFBQSxZQUFBLE1BQUE7QUFFeEMsU0FBUyxvQkFBb0IsQ0FBQztFQUMzQyxNQUFNO0VBQ04scUJBQXFCO0VBQ3JCO0FBQ0YsQ0FBQyxFQUFFO0VBQUEsSUFBQSxxQkFBQSxFQUFBLHNCQUFBO0VBQ0QsTUFBTSxXQUFXLEdBQUcsSUFBQSx1QkFBVyxFQUFDLDRDQUFpQyxDQUFDO0VBQ2xFLE1BQU0sZUFBZSxHQUFHLElBQUEsdUJBQVcsRUFBQyw2QkFBa0IsQ0FBQztFQUV2RCxNQUFNO0lBQ0osU0FBUyxFQUFFO01BQ1QsSUFBSTtNQUNKLE1BQU07TUFDTixJQUFJLEVBQUU7UUFBRTtNQUFjO0lBQ3hCO0VBQ0YsQ0FBQyxHQUFHLE1BQU07RUFFVixNQUFNLGNBQWMsR0FBRyxJQUFBLHVCQUFXLEVBQUUsS0FBSyxJQUFLLElBQUEseUJBQWUsRUFBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7RUFFM0UsTUFBTSxXQUFXLEdBQUcsSUFBQSx5QkFBbUIsRUFBQyxXQUFXLEVBQUUsSUFBSSxDQUFDO0VBQzFELE1BQU0scUJBQXFCLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQztFQUVyRCxNQUFNLENBQUMsR0FBRyxJQUFBLGlCQUFVLEVBQUMsaUJBQVcsQ0FBQztFQUVqQyxNQUFNLGlCQUFpQixHQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxhQUFhLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0VBRTVELE1BQU0saUJBQWlCLEdBQUcsSUFBQSxrQ0FBaUIsRUFBQyxNQUFNLENBQUMsU0FBUyxDQUFDO0VBRTdELE1BQU0sQ0FBQyxzQkFBc0IsRUFBRSx5QkFBeUIsQ0FBQyxHQUFHLElBQUEsZUFBUSxFQUFDLEtBQUssQ0FBQztFQUMzRSxNQUFNLENBQUMsd0JBQXdCLEVBQUUsMkJBQTJCLENBQUMsR0FDM0QsSUFBQSxlQUFRLEVBQUMsS0FBSyxDQUFDO0VBRWpCLE1BQU0sMEJBQTBCLEdBQzdCLENBQUEsTUFBTSxhQUFOLE1BQU0sd0JBQUEscUJBQUEsR0FBTixNQUFNLENBQUUsd0JBQXdCLGNBQUEscUJBQUEsdUJBQWhDLHFCQUFBLENBQWtDLGVBQWUsTUFBSyxTQUFTLElBQzlELENBQUEsTUFBTSxhQUFOLE1BQU0sd0JBQUEsc0JBQUEsR0FBTixNQUFNLENBQUUsd0JBQXdCLGNBQUEsc0JBQUEsdUJBQWhDLHNCQUFBLENBQWtDLGVBQWUsTUFDL0Msb0VBQW9DLENBQUMsYUFBYSxJQUNyRCxDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSx3QkFBd0IsS0FDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBRTtFQUU5RCxNQUFNLE1BQU0sR0FBRyxJQUFBLGtCQUFXLEVBQ3hCLE1BQU8sS0FBSyxJQUFLO0lBQ2YsSUFBSTtNQUNGLE1BQU0sbUJBQW1CLENBQUMsS0FBSyxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRTtNQUNWLGlCQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNkO0VBQ0YsQ0FBQyxFQUNELENBQUMsbUJBQW1CLENBQ3RCLENBQUM7RUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFBLGtCQUFXLEVBQzFCLE1BQU8sS0FBSyxJQUFLO0lBQ2YsSUFBSTtNQUNGLE1BQU0scUJBQXFCLENBQUMsS0FBSyxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRTtNQUNWLGlCQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNkO0VBQ0YsQ0FBQyxFQUNELENBQUMscUJBQXFCLENBQ3hCLENBQUM7RUFFRCxvQkFDRSxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUE7SUFBSyxTQUFTLEVBQUM7RUFBd0IsZ0JBQ3JDLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLDJCQUFBLENBQUEsT0FBTTtJQUNMLFdBQVcsRUFBRSxXQUFZO0lBQ3pCLE1BQU0sRUFBRSxNQUFPO0lBQ2YsaUJBQWlCLEVBQUUsaUJBQWtCO0lBQ3JDLGVBQWUsRUFBRTtFQUFzQixDQUN4QyxDQUFDLEVBRUQsMEJBQTBCLGlCQUN6QixNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyw4QkFBQSxDQUFBLE9BQTZCO0lBQzVCLHdCQUF3QixFQUFFLE1BQU0sQ0FBQztFQUF5QixDQUMzRCxDQUNGLGVBRUQsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsNEJBQUEsQ0FBQSxPQUFPO0lBQUMsSUFBSSxFQUFFLElBQUEseUJBQW1CLEVBQUMsYUFBYSxFQUFFLENBQUM7RUFBRSxDQUFFLENBQUMsRUFDdkQsQ0FBQyxpQkFBaUIsaUJBQ2pCLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGlCQUFBLENBQUEsV0FBVztJQUNWLFFBQVEsRUFBRSx3QkFBVSxDQUFDLE9BQVE7SUFDN0IsVUFBVSxFQUFFLENBQUU7SUFDZCxXQUFXLEVBQUUsQ0FBRTtJQUNmLFlBQVksRUFBRTtFQUFFLEdBRWYsQ0FBQyxDQUFDLG9CQUFvQixFQUFFLENBQ3ZCLGFBQWEsQ0FBQyxPQUFPLEVBQ3JCLFdBQVcsQ0FBQyxPQUFPLENBQ3BCLENBQ1UsQ0FDZCxFQUVBLGNBQWMsaUJBQ2IsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBO0lBQUssU0FBUyxFQUFDO0VBQXFELGdCQUNsRSxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyx1QkFBQSxDQUFBLE9BQXNCO0lBQUMsbUJBQW1CO0VBQUEsQ0FBRSxDQUMxQyxDQUNOLEVBRUEsQ0FBQyxpQkFBaUIsaUJBQ2pCLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGlCQUFBLENBQUEsV0FBVztJQUNWLFFBQVEsRUFBRSx3QkFBVSxDQUFDLE1BQU87SUFDNUIsVUFBVSxFQUFFLENBQUU7SUFDZCxXQUFXLEVBQUUsQ0FBRTtJQUNmLFlBQVksRUFBRTtFQUFFLGdCQUVoQixNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxpQkFBQSxDQUFBLElBQUk7SUFBQyxPQUFPLEVBQUUseUJBQVcsQ0FBQztFQUFXLEdBQ25DLENBQUMsQ0FBQyx3QkFBd0IsQ0FDdkIsQ0FBQyxFQUFDLEdBQUcsZUFDWCxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxpQkFBQSxDQUFBLElBQUksUUFBRSxDQUFDLENBQUMsdUJBQXVCLENBQVEsQ0FDN0IsQ0FDZCxlQUNELE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGNBQUEsQ0FBQSxtQkFBbUI7SUFDbEIsZUFBZSxFQUFDLCtDQUErQztJQUMvRCxRQUFRLEVBQUUsUUFBUztJQUNuQixRQUFRLEVBQ04saUJBQWlCLEdBQUcsTUFBTSxHQUFHLE1BQU0seUJBQXlCLENBQUMsSUFBSSxDQUNsRTtJQUNELFVBQVUsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFFO0lBQ3hCLFVBQVUsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFFO0lBQ3hCLGdCQUFnQixFQUFFLGlCQUFpQixHQUFHLFNBQVMsR0FBRztFQUFpQixDQUNwRSxDQUFDLEVBQ0Qsc0JBQXNCLGlCQUNyQixNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxRQUFBLENBQUEsT0FBTztJQUNOLE9BQU8sRUFBRSxDQUFBLEtBQU0seUJBQXlCLENBQUMsS0FBSyxDQUFFO0lBQ2hELEtBQUssRUFBRSxDQUFDLENBQUMsa0JBQWtCLENBQUU7SUFDN0IsUUFBUSxFQUFFLENBQUMsQ0FBQyxxQkFBcUIsQ0FBRTtJQUNuQyxTQUFTLEVBQUMseUNBQXlDO0lBQ25ELGVBQWUsRUFBQyxpREFBaUQ7SUFDakUsTUFBTSxlQUNKLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGNBQUEsQ0FBQSxtQkFBbUI7TUFDbEIsZUFBZSxFQUFDLGlFQUFpRTtNQUNqRixRQUFRLEVBQUUsQ0FBQSxLQUFNLHlCQUF5QixDQUFDLEtBQUssQ0FBRTtNQUNqRCxVQUFVLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBRTtNQUN4QixnQkFBZ0IsRUFBQyxTQUFTO01BQzFCLFFBQVEsRUFBRSxNQUFPO01BQ2pCLFVBQVUsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFFO01BQ3pCLGdCQUFnQixFQUFDLGdCQUFnQjtNQUNqQyxRQUFRLEVBQUUsQ0FBQztJQUF5QixDQUNyQztFQUNGLGdCQUVELE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQTtJQUFLLFNBQVMsRUFBQztFQUEyRCxnQkFDeEUsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsU0FBQSxDQUFBLE9BQVE7SUFDUCxFQUFFLEVBQUMsd0NBQXdDO0lBQzNDLE9BQU8sRUFBRSx3QkFBeUI7SUFDbEMsU0FBUyxFQUFDLHFFQUFxRTtJQUMvRSxPQUFPLEVBQUUsQ0FBQSxLQUFNLDJCQUEyQixDQUFFLE9BQU8sSUFBSyxDQUFDLE9BQU87RUFBRSxDQUNuRSxDQUFDLGVBQ0YsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBO0lBQ0UsU0FBUyxFQUFDLGtFQUFrRTtJQUM1RSxPQUFPLEVBQUM7RUFBd0MsR0FFL0MsQ0FBQyxDQUFDLHVCQUF1QixFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUM3QyxDQUNKLENBQ0UsQ0FFUixDQUFDO0FBRVY7QUFFQSxvQkFBb0IsQ0FBQyxTQUFTLEdBQUc7RUFDL0I7QUFDRjtBQUNBO0VBQ0UsTUFBTSxFQUFFLGtCQUFTLENBQUMsTUFBTSxDQUFDLFVBQVU7RUFDbkM7QUFDRjtBQUNBO0VBQ0UscUJBQXFCLEVBQUUsa0JBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVTtFQUNoRDtBQUNGO0FBQ0E7RUFDRSxtQkFBbUIsRUFBRSxrQkFBUyxDQUFDLElBQUksQ0FBQztBQUN0QyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDek1ELElBQUEsaUJBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFBd0QsU0FBQSx1QkFBQSxHQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsRUFBQSxHQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDQXhELElBQUEscUJBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFBbUQsU0FBQSx1QkFBQSxHQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsRUFBQSxHQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0FuRCxJQUFBLE1BQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLFdBQUEsR0FBQSxPQUFBO0FBQ0EsSUFBQSxPQUFBLEdBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLE9BQUE7QUFJQSxJQUFBLFFBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLGVBQUEsR0FBQSxPQUFBO0FBSUEsSUFBQSxJQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxXQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBO0FBQ0EsSUFBQSxhQUFBLEdBQUEsT0FBQTtBQU1BLElBQUEsS0FBQSxHQUFBLE9BQUE7QUFBZ0UsU0FBQSx1QkFBQSxHQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsRUFBQSxHQUFBO0FBQUEsU0FBQSx5QkFBQSxXQUFBLGVBQUEsT0FBQSxrQ0FBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxnQkFBQSxPQUFBLE9BQUEsWUFBQSx3QkFBQSxZQUFBLENBQUEsV0FBQSxXQUFBLFdBQUEsR0FBQSxnQkFBQSxHQUFBLGlCQUFBLEtBQUEsV0FBQTtBQUFBLFNBQUEsd0JBQUEsR0FBQSxFQUFBLFdBQUEsU0FBQSxXQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLFdBQUEsR0FBQSxRQUFBLEdBQUEsb0JBQUEsR0FBQSx3QkFBQSxHQUFBLDRCQUFBLE9BQUEsRUFBQSxHQUFBLFVBQUEsS0FBQSxHQUFBLHdCQUFBLENBQUEsV0FBQSxPQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsWUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLFdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLFFBQUEsR0FBQSxrQkFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsU0FBQSxJQUFBLEdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLEtBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsWUFBQSxNQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxDQUFBLE9BQUEsR0FBQSxHQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLE1BQUEsWUFBQSxNQUFBO0FBRWhFLFNBQVMsb0JBQW9CLENBQUM7RUFBRTtBQUFLLENBQUMsRUFBRTtFQUN0QyxNQUFNLFVBQVUsR0FBRyxJQUFBLHVCQUFXLEVBQUMsd0NBQTZCLENBQUM7RUFFN0Qsb0JBQ0UsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsSUFBQSxDQUFBLE9BQUc7SUFBQyxTQUFTLEVBQUM7RUFBOEIsR0FDMUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRTtJQUFFLEtBQUs7SUFBRTtFQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsa0JBQ3BELE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLElBQUEsQ0FBQSxPQUFHO0lBQ0YsU0FBUyxFQUFDLDhCQUE4QjtJQUN4QyxHQUFHLEVBQUcsR0FBRSxLQUFNLElBQUcsQ0FBRSxFQUFFO0lBQ3JCLFdBQVcsRUFBRSxDQUFFO0lBQ2YsT0FBTyxFQUNMLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLEtBQUssSUFBSSxHQUFHLHFCQUFPLENBQUMsSUFBSSxHQUFHO0VBQzlELGdCQUVELE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLFdBQUEsQ0FBQSxPQUFVO0lBQ1QsRUFBRSxFQUFDLE1BQU07SUFDVCxLQUFLLEVBQUUsdUJBQVMsQ0FBQyxXQUFZO0lBQzdCLFVBQVUsRUFBRSxDQUFFO0lBQ2QsVUFBVSxFQUNSLE9BQU8sS0FBSyxLQUFLLFFBQVEsR0FBRyx5QkFBVyxDQUFDLElBQUksR0FBRyx5QkFBVyxDQUFDO0VBQzVELEdBRUEsSUFBQSxvQkFBYyxFQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsR0FBQyxFQUFDLEdBQ3hELENBQUMsRUFDWixPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxLQUFLLElBQUksZ0JBQzFDLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLG9CQUFvQjtJQUFDLElBQUksRUFBRTtFQUFNLENBQUUsQ0FBQyxnQkFFckMsTUFBQSxDQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUMsV0FBQSxDQUFBLE9BQVU7SUFDVCxFQUFFLEVBQUMsTUFBTTtJQUNULEtBQUssRUFBRSx1QkFBUyxDQUFDLFdBQVk7SUFDN0IsVUFBVSxFQUFFLENBQUU7SUFDZCxTQUFTLEVBQUM7RUFBcUMsR0FFOUMsSUFBSSxLQUFLLFNBQVMsSUFDbkIsSUFBQSxpQ0FBaUIsRUFBQyxLQUFLLEVBQUU7SUFDdkIsb0JBQW9CLEVBQUU7RUFDeEIsQ0FBQyxDQUFDLGdCQUNBLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLFdBQUEsQ0FBQSxPQUFVO0lBQ1QsT0FBTyxFQUFFLCtCQUFpQixDQUFDLEVBQUc7SUFDOUIsS0FBSyxFQUFFLHVCQUFTLENBQUMsV0FBWTtJQUM3QixTQUFTLEVBQUM7RUFBOEMsZ0JBRXhELE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLFFBQUEsQ0FBQSxPQUFPO0lBQ04sV0FBVztJQUNYLDJCQUEyQixFQUFFLElBQUEsb0NBQW9CLEVBQUMsS0FBSyxDQUFFO0lBQ3pELGFBQWEsRUFBRSxJQUFBLHlCQUFjLEVBQUMsVUFBVSxFQUFFLEtBQUs7RUFBRSxDQUNsRCxDQUNTLENBQUMsR0FFYixJQUFBLG9CQUFjLEVBQUUsR0FBRSxLQUFNLEVBQUMsQ0FFakIsQ0FFWCxDQUNOLENBQ0UsQ0FBQztBQUVWO0FBRUEsb0JBQW9CLENBQUMsU0FBUyxHQUFHO0VBQy9CLElBQUksRUFBRSxrQkFBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGtCQUFTLENBQUMsTUFBTSxFQUFFLGtCQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNqRSxDQUFDO0FBQUMsSUFBQSxRQUFBLGdCQUVhLElBQUEsV0FBSSxFQUFDLG9CQUFvQixFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsS0FBSztFQUNsRSxPQUFPLElBQUEsZUFBTyxFQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQztBQUNoRCxDQUFDLENBQUM7QUFBQSxPQUFBLENBQUEsT0FBQSxHQUFBLFFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN4RkYsSUFBQSx1QkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUErRCxTQUFBLHVCQUFBLEdBQUEsV0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLFVBQUEsR0FBQSxHQUFBLEtBQUEsT0FBQSxFQUFBLEdBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDQS9ELElBQUEsTUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsVUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUVBLElBQUEsY0FBQSxHQUFBLE9BQUE7QUFBaUUsU0FBQSx1QkFBQSxHQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsRUFBQSxHQUFBO0FBQUEsU0FBQSx5QkFBQSxXQUFBLGVBQUEsT0FBQSxrQ0FBQSxpQkFBQSxPQUFBLE9BQUEsUUFBQSxnQkFBQSxPQUFBLE9BQUEsWUFBQSx3QkFBQSxZQUFBLENBQUEsV0FBQSxXQUFBLFdBQUEsR0FBQSxnQkFBQSxHQUFBLGlCQUFBLEtBQUEsV0FBQTtBQUFBLFNBQUEsd0JBQUEsR0FBQSxFQUFBLFdBQUEsU0FBQSxXQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLFdBQUEsR0FBQSxRQUFBLEdBQUEsb0JBQUEsR0FBQSx3QkFBQSxHQUFBLDRCQUFBLE9BQUEsRUFBQSxHQUFBLFVBQUEsS0FBQSxHQUFBLHdCQUFBLENBQUEsV0FBQSxPQUFBLEtBQUEsSUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsWUFBQSxLQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxNQUFBLFdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsY0FBQSxJQUFBLE1BQUEsQ0FBQSx3QkFBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLFFBQUEsR0FBQSxrQkFBQSxNQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsU0FBQSxJQUFBLEdBQUEscUJBQUEsR0FBQSxNQUFBLENBQUEsd0JBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxjQUFBLElBQUEsS0FBQSxJQUFBLENBQUEsR0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLEtBQUEsTUFBQSxDQUFBLGNBQUEsQ0FBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsWUFBQSxNQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLFNBQUEsTUFBQSxDQUFBLE9BQUEsR0FBQSxHQUFBLE1BQUEsS0FBQSxJQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLE1BQUEsWUFBQSxNQUFBO0FBQUEsU0FBQSxnQkFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsSUFBQSxHQUFBLEdBQUEsY0FBQSxDQUFBLEdBQUEsT0FBQSxHQUFBLElBQUEsR0FBQSxJQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsSUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsUUFBQSxZQUFBLFFBQUEsUUFBQSxvQkFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLEtBQUEsV0FBQSxHQUFBO0FBQUEsU0FBQSxlQUFBLEdBQUEsUUFBQSxHQUFBLEdBQUEsWUFBQSxDQUFBLEdBQUEsMkJBQUEsR0FBQSxnQkFBQSxHQUFBLEdBQUEsTUFBQSxDQUFBLEdBQUE7QUFBQSxTQUFBLGFBQUEsS0FBQSxFQUFBLElBQUEsZUFBQSxLQUFBLGlCQUFBLEtBQUEsa0JBQUEsS0FBQSxNQUFBLElBQUEsR0FBQSxLQUFBLENBQUEsTUFBQSxDQUFBLFdBQUEsT0FBQSxJQUFBLEtBQUEsU0FBQSxRQUFBLEdBQUEsR0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsRUFBQSxJQUFBLDJCQUFBLEdBQUEsc0JBQUEsR0FBQSxZQUFBLFNBQUEsNERBQUEsSUFBQSxnQkFBQSxNQUFBLEdBQUEsTUFBQSxFQUFBLEtBQUE7QUFFbEQsTUFBTSxzQkFBc0IsU0FBUyxvQkFBYSxDQUFDO0VBV2hFLE1BQU0sQ0FBQSxFQUFHO0lBQ1AsTUFBTTtNQUFFLFlBQVk7TUFBRSxVQUFVO01BQUUsUUFBUSxHQUFHO0lBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLO0lBQ2pFLG9CQUNFLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFDLGNBQUEsQ0FBQSxtQkFBbUI7TUFDbEIsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBRTtNQUNyQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFFO01BQ25DLFFBQVEsRUFBRSxZQUFhO01BQ3ZCLFFBQVEsRUFBRSxVQUFXO01BQ3JCLFFBQVEsRUFBRTtJQUFTLENBQ3BCLENBQUM7RUFFTjtBQUNGO0FBQUMsT0FBQSxDQUFBLE9BQUEsR0FBQSxzQkFBQTtBQUFBLGVBQUEsQ0F2Qm9CLHNCQUFzQixlQUN0QjtFQUNqQixZQUFZLEVBQUUsa0JBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVTtFQUN2QyxVQUFVLEVBQUUsa0JBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVTtFQUNyQyxRQUFRLEVBQUUsa0JBQVMsQ0FBQztBQUN0QixDQUFDO0FBQUEsZUFBQSxDQUxrQixzQkFBc0Isa0JBT25CO0VBQ3BCLENBQUMsRUFBRSxrQkFBUyxDQUFDO0FBQ2YsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2RILElBQUEsd0JBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFBc0QsU0FBQSx1QkFBQSxHQUFBLFdBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxVQUFBLEdBQUEsR0FBQSxLQUFBLE9BQUEsRUFBQSxHQUFBIiwiZmlsZSI6InVpLTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJZGVudGljb24gZnJvbSAnLi4vLi4vLi4vdWkvaWRlbnRpY29uJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29ubmVjdGVkQWNjb3VudHNMaXN0SXRlbSBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBhZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG5hbWU6IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG4gICAgc3RhdHVzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGlvbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgb3B0aW9uczogUHJvcFR5cGVzLm5vZGUsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBjbGFzc05hbWU6IG51bGwsXG4gICAgb3B0aW9uczogbnVsbCxcbiAgICBhY3Rpb246IG51bGwsXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgYWRkcmVzcywgY2xhc3NOYW1lLCBuYW1lLCBzdGF0dXMsIGFjdGlvbiwgb3B0aW9ucyB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NuYW1lcygnY29ubmVjdGVkLWFjY291bnRzLWxpc3RfX3JvdycsIGNsYXNzTmFtZSl9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbm5lY3RlZC1hY2NvdW50cy1saXN0X19yb3ctY29udGVudFwiPlxuICAgICAgICAgIDxJZGVudGljb25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNvbm5lY3RlZC1hY2NvdW50cy1saXN0X19pZGVudGljb25cIlxuICAgICAgICAgICAgYWRkcmVzcz17YWRkcmVzc31cbiAgICAgICAgICAgIGRpYW1ldGVyPXszMn1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJjb25uZWN0ZWQtYWNjb3VudHMtbGlzdF9fYWNjb3VudC1uYW1lXCI+XG4gICAgICAgICAgICAgIDxzdHJvbmc+e25hbWV9PC9zdHJvbmc+XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICB7c3RhdHVzID8gKFxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJjb25uZWN0ZWQtYWNjb3VudHMtbGlzdF9fYWNjb3VudC1zdGF0dXNcIj5cbiAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDtcbiAgICAgICAgICAgICAgICB7c3RhdHVzfVxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgIHthY3Rpb259XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7b3B0aW9uc31cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2Nvbm5lY3RlZC1hY2NvdW50cy1saXN0LWl0ZW0uY29tcG9uZW50JztcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTWVudSB9IGZyb20gJy4uLy4uLy4uL3VpL21lbnUnO1xuaW1wb3J0IHsgSWNvbk5hbWUsIEJ1dHRvbkljb24gfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcblxuY29uc3QgQ29ubmVjdGVkQWNjb3VudHNMaXN0T3B0aW9ucyA9ICh7XG4gIGNoaWxkcmVuLFxuICBvblNob3dPcHRpb25zLFxuICBvbkhpZGVPcHRpb25zLFxuICBzaG93LFxufSkgPT4ge1xuICBjb25zdCByZWYgPSB1c2VSZWYoZmFsc2UpO1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgcmVmPXtyZWZ9PlxuICAgICAgPEJ1dHRvbkljb25cbiAgICAgICAgaWNvbk5hbWU9e0ljb25OYW1lLk1vcmVWZXJ0aWNhbH1cbiAgICAgICAgY2xhc3NOYW1lPVwiY29ubmVjdGVkLWFjY291bnRzLW9wdGlvbnNfX2J1dHRvblwiXG4gICAgICAgIG9uQ2xpY2s9e29uU2hvd09wdGlvbnN9XG4gICAgICAgIGFyaWFMYWJlbD17dCgnb3B0aW9ucycpfVxuICAgICAgLz5cbiAgICAgIHtzaG93ID8gKFxuICAgICAgICA8TWVudVxuICAgICAgICAgIGFuY2hvckVsZW1lbnQ9e3JlZi5jdXJyZW50fVxuICAgICAgICAgIG9uSGlkZT17b25IaWRlT3B0aW9uc31cbiAgICAgICAgICBwb3BwZXJPcHRpb25zPXt7XG4gICAgICAgICAgICBtb2RpZmllcnM6IFtcbiAgICAgICAgICAgICAgeyBuYW1lOiAncHJldmVudE92ZXJmbG93Jywgb3B0aW9uczogeyBhbHRCb3VuZGFyeTogdHJ1ZSB9IH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvTWVudT5cbiAgICAgICkgOiBudWxsfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuQ29ubmVjdGVkQWNjb3VudHNMaXN0T3B0aW9ucy5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICBvbkhpZGVPcHRpb25zOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblNob3dPcHRpb25zOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzaG93OiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGVkQWNjb3VudHNMaXN0T3B0aW9ucztcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2Nvbm5lY3RlZC1hY2NvdW50cy1saXN0LW9wdGlvbnMuY29tcG9uZW50JztcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb25OYW1lIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50LWxpYnJhcnknO1xuaW1wb3J0IHsgTWVudUl0ZW0gfSBmcm9tICcuLi8uLi91aS9tZW51JztcbmltcG9ydCBDb25uZWN0ZWRBY2NvdW50c0xpc3RJdGVtIGZyb20gJy4vY29ubmVjdGVkLWFjY291bnRzLWxpc3QtaXRlbSc7XG5pbXBvcnQgQ29ubmVjdGVkQWNjb3VudHNMaXN0T3B0aW9ucyBmcm9tICcuL2Nvbm5lY3RlZC1hY2NvdW50cy1saXN0LW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25uZWN0ZWRBY2NvdW50c0xpc3QgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgYWNjb3VudFRvQ29ubmVjdDogbnVsbCxcbiAgfTtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGFjY291bnRUb0Nvbm5lY3Q6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBhZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgfSksXG4gICAgY29ubmVjdGVkQWNjb3VudHM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgYWRkcmVzczogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgIGxhc3RBY3RpdmU6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgICB9KSxcbiAgICApLmlzUmVxdWlyZWQsXG4gICAgY29ubmVjdEFjY291bnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2VsZWN0ZWRBZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgcmVtb3ZlUGVybWl0dGVkQWNjb3VudDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2V0U2VsZWN0ZWRBZGRyZXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNob3VsZFJlbmRlckxpc3RPcHRpb25zOiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgYFdhcm5pbmc6IEZhaWxlZCBwcm9wIHR5cGU6ICcke3Byb3BOYW1lfScgb2YgY29tcG9uZW50ICcke2NvbXBvbmVudE5hbWV9JyBtdXN0IGJlIGEgYm9vbGVhbi4gUmVjZWl2ZWQ6ICR7dHlwZW9mIHByb3BzW1xuICAgICAgICAgICAgcHJvcE5hbWVcbiAgICAgICAgICBdfWAsXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhcHJvcHMucmVtb3ZlUGVybWl0dGVkQWNjb3VudCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAgIGBXYXJuaW5nOiBGYWlsZWQgcHJvcCB0eXBlOiAnJHtwcm9wTmFtZX0nIG9mIGNvbXBvbmVudCAnJHtjb21wb25lbnROYW1lfScgcmVxdWlyZXMgcHJvcCAncmVtb3ZlUGVybWl0dGVkQWNjb3VudCcuYCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBhY2NvdW50V2l0aE9wdGlvbnNTaG93bjogbnVsbCxcbiAgfTtcblxuICBkaXNjb25uZWN0QWNjb3VudCA9ICgpID0+IHtcbiAgICB0aGlzLmhpZGVBY2NvdW50T3B0aW9ucygpO1xuICAgIHRoaXMucHJvcHMucmVtb3ZlUGVybWl0dGVkQWNjb3VudCh0aGlzLnN0YXRlLmFjY291bnRXaXRoT3B0aW9uc1Nob3duKTtcbiAgfTtcblxuICBzd2l0Y2hBY2NvdW50ID0gKGFkZHJlc3MpID0+IHtcbiAgICB0aGlzLmhpZGVBY2NvdW50T3B0aW9ucygpO1xuICAgIHRoaXMucHJvcHMuc2V0U2VsZWN0ZWRBZGRyZXNzKGFkZHJlc3MpO1xuICB9O1xuXG4gIGhpZGVBY2NvdW50T3B0aW9ucyA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgYWNjb3VudFdpdGhPcHRpb25zU2hvd246IG51bGwgfSk7XG4gIH07XG5cbiAgc2hvd0FjY291bnRPcHRpb25zID0gKGFkZHJlc3MpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgYWNjb3VudFdpdGhPcHRpb25zU2hvd246IGFkZHJlc3MgfSk7XG4gIH07XG5cbiAgcmVuZGVyVW5jb25uZWN0ZWRBY2NvdW50KCkge1xuICAgIGNvbnN0IHsgYWNjb3VudFRvQ29ubmVjdCwgY29ubmVjdEFjY291bnQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICBpZiAoIWFjY291bnRUb0Nvbm5lY3QpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHsgYWRkcmVzcywgbmFtZSB9ID0gYWNjb3VudFRvQ29ubmVjdDtcbiAgICByZXR1cm4gKFxuICAgICAgPENvbm5lY3RlZEFjY291bnRzTGlzdEl0ZW1cbiAgICAgICAgY2xhc3NOYW1lPVwiY29ubmVjdGVkLWFjY291bnRzLWxpc3RfX3Jvdy0taGlnaGxpZ2h0XCJcbiAgICAgICAgYWRkcmVzcz17YWRkcmVzc31cbiAgICAgICAgbmFtZT17YCR7bmFtZX0gKOKApiR7YWRkcmVzcy5zdWJzdHIoLTQsIDQpfSlgfVxuICAgICAgICBzdGF0dXM9e3QoJ3N0YXR1c05vdENvbm5lY3RlZCcpfVxuICAgICAgICBhY3Rpb249e1xuICAgICAgICAgIDxhXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJjb25uZWN0ZWQtYWNjb3VudHMtbGlzdF9fYWNjb3VudC1zdGF0dXMtbGlua1wiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBjb25uZWN0QWNjb3VudChhY2NvdW50VG9Db25uZWN0LmFkZHJlc3MpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCdjb25uZWN0Jyl9XG4gICAgICAgICAgPC9hPlxuICAgICAgICB9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJMaXN0SXRlbU9wdGlvbnMoYWRkcmVzcykge1xuICAgIGNvbnN0IHsgYWNjb3VudFdpdGhPcHRpb25zU2hvd24gfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPENvbm5lY3RlZEFjY291bnRzTGlzdE9wdGlvbnNcbiAgICAgICAgb25IaWRlT3B0aW9ucz17dGhpcy5oaWRlQWNjb3VudE9wdGlvbnN9XG4gICAgICAgIG9uU2hvd09wdGlvbnM9e3RoaXMuc2hvd0FjY291bnRPcHRpb25zLmJpbmQobnVsbCwgYWRkcmVzcyl9XG4gICAgICAgIHNob3c9e2FjY291bnRXaXRoT3B0aW9uc1Nob3duID09PSBhZGRyZXNzfVxuICAgICAgPlxuICAgICAgICA8TWVudUl0ZW0gaWNvbk5hbWU9e0ljb25OYW1lLkxvZ291dH0gb25DbGljaz17dGhpcy5kaXNjb25uZWN0QWNjb3VudH0+XG4gICAgICAgICAge3QoJ2Rpc2Nvbm5lY3RUaGlzQWNjb3VudCcpfVxuICAgICAgICA8L01lbnVJdGVtPlxuICAgICAgPC9Db25uZWN0ZWRBY2NvdW50c0xpc3RPcHRpb25zPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJMaXN0SXRlbUFjdGlvbihhZGRyZXNzKSB7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGFcbiAgICAgICAgY2xhc3NOYW1lPVwiY29ubmVjdGVkLWFjY291bnRzLWxpc3RfX2FjY291bnQtc3RhdHVzLWxpbmtcIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnN3aXRjaEFjY291bnQoYWRkcmVzcyl9XG4gICAgICA+XG4gICAgICAgIHt0KCdzd2l0Y2hUb1RoaXNBY2NvdW50Jyl9XG4gICAgICA8L2E+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbm5lY3RlZEFjY291bnRzLCBzZWxlY3RlZEFkZHJlc3MsIHNob3VsZFJlbmRlckxpc3RPcHRpb25zIH0gPVxuICAgICAgdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMuY29udGV4dDtcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8bWFpbiBjbGFzc05hbWU9XCJjb25uZWN0ZWQtYWNjb3VudHMtbGlzdFwiPlxuICAgICAgICAgIHt0aGlzLnJlbmRlclVuY29ubmVjdGVkQWNjb3VudCgpfVxuICAgICAgICAgIHtjb25uZWN0ZWRBY2NvdW50cy5tYXAoKHsgYWRkcmVzcywgbmFtZSB9LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPENvbm5lY3RlZEFjY291bnRzTGlzdEl0ZW1cbiAgICAgICAgICAgICAgICBrZXk9e2FkZHJlc3N9XG4gICAgICAgICAgICAgICAgYWRkcmVzcz17YWRkcmVzc31cbiAgICAgICAgICAgICAgICBuYW1lPXtgJHtuYW1lfSAo4oCmJHthZGRyZXNzLnN1YnN0cigtNCwgNCl9KWB9XG4gICAgICAgICAgICAgICAgc3RhdHVzPXtpbmRleCA9PT0gMCA/IHQoJ2FjdGl2ZScpIDogbnVsbH1cbiAgICAgICAgICAgICAgICBvcHRpb25zPXtcbiAgICAgICAgICAgICAgICAgIHNob3VsZFJlbmRlckxpc3RPcHRpb25zXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5yZW5kZXJMaXN0SXRlbU9wdGlvbnMoYWRkcmVzcylcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFjdGlvbj17XG4gICAgICAgICAgICAgICAgICBhZGRyZXNzID09PSBzZWxlY3RlZEFkZHJlc3NcbiAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5yZW5kZXJMaXN0SXRlbUFjdGlvbihhZGRyZXNzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvbWFpbj5cbiAgICAgIDwvPlxuICAgICk7XG4gIH1cbn1cbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2Nvbm5lY3RlZC1hY2NvdW50cy1saXN0LmNvbXBvbmVudCc7XG4iLCJpbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBDaGVja0JveCBmcm9tICcuLi8uLi91aS9jaGVjay1ib3gnO1xuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRQZXJtaXNzaW9uRGVzY3JpcHRpb24gfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL3V0aWxzL3Blcm1pc3Npb24nO1xuXG5jb25zdCBDb25uZWN0ZWRBY2NvdW50c1Blcm1pc3Npb25zID0gKHsgcGVybWlzc2lvbnMgfSkgPT4ge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcbiAgY29uc3QgW2V4cGFuZGVkLCBzZXRFeHBhbmRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgdG9nZ2xlRXhwYW5kZWQgPSAoKSA9PiB7XG4gICAgc2V0RXhwYW5kZWQoKF9leHBhbmRlZCkgPT4gIV9leHBhbmRlZCk7XG4gIH07XG5cbiAgaWYgKCFwZXJtaXNzaW9ucy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHBlcm1pc3Npb25MYWJlbHMgPSBmbGF0dGVuKFxuICAgIHBlcm1pc3Npb25zLm1hcCgoeyBrZXksIHZhbHVlIH0pID0+XG4gICAgICBnZXRQZXJtaXNzaW9uRGVzY3JpcHRpb24oe1xuICAgICAgICB0LFxuICAgICAgICBwZXJtaXNzaW9uTmFtZToga2V5LFxuICAgICAgICBwZXJtaXNzaW9uVmFsdWU6IHZhbHVlLFxuICAgICAgfSksXG4gICAgKSxcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY29ubmVjdGVkLWFjY291bnRzLXBlcm1pc3Npb25zXCI+XG4gICAgICA8cFxuICAgICAgICBjbGFzc05hbWU9XCJjb25uZWN0ZWQtYWNjb3VudHMtcGVybWlzc2lvbnNfX2hlYWRlclwiXG4gICAgICAgIG9uQ2xpY2s9e3RvZ2dsZUV4cGFuZGVkfVxuICAgICAgPlxuICAgICAgICA8c3Ryb25nPnt0KCdwZXJtaXNzaW9ucycpfTwvc3Ryb25nPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdmYXMnLCB7XG4gICAgICAgICAgICAnZmEtYW5nbGUtZG93bic6ICFleHBhbmRlZCxcbiAgICAgICAgICAgICdmYS1hbmdsZS11cCc6IGV4cGFuZGVkLFxuICAgICAgICAgIH0pfVxuICAgICAgICAgIHRpdGxlPXt0KCdzaG93UGVybWlzc2lvbnMnKX1cbiAgICAgICAgLz5cbiAgICAgIDwvcD5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKFxuICAgICAgICAgICdjb25uZWN0ZWQtYWNjb3VudHMtcGVybWlzc2lvbnNfX2xpc3QtY29udGFpbmVyJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAnY29ubmVjdGVkLWFjY291bnRzLXBlcm1pc3Npb25zX19saXN0LWNvbnRhaW5lci0tZXhwYW5kZWQnOlxuICAgICAgICAgICAgICBleHBhbmRlZCxcbiAgICAgICAgICB9LFxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICA8cD57dCgnYXV0aG9yaXplZFBlcm1pc3Npb25zJyl9OjwvcD5cbiAgICAgICAgPHVsIGNsYXNzTmFtZT1cImNvbm5lY3RlZC1hY2NvdW50cy1wZXJtaXNzaW9uc19fbGlzdFwiPlxuICAgICAgICAgIHtwZXJtaXNzaW9uTGFiZWxzLm1hcCgoeyBsYWJlbCB9LCBpZHgpID0+IChcbiAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICBrZXk9e2Bjb25uZWN0ZWQtcGVybWlzc2lvbi0ke2lkeH1gfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjb25uZWN0ZWQtYWNjb3VudHMtcGVybWlzc2lvbnNfX2xpc3QtaXRlbVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxDaGVja0JveFxuICAgICAgICAgICAgICAgIGNoZWNrZWRcbiAgICAgICAgICAgICAgICBkaXNhYmxlZFxuICAgICAgICAgICAgICAgIGlkPXtgY29ubmVjdGVkLXBlcm1pc3Npb24tJHtpZHh9YH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjb25uZWN0ZWQtYWNjb3VudHMtcGVybWlzc2lvbnNfX2NoZWNrYm94XCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9e2Bjb25uZWN0ZWQtcGVybWlzc2lvbi0ke2lkeH1gfT57bGFiZWx9PC9sYWJlbD5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvdWw+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbkNvbm5lY3RlZEFjY291bnRzUGVybWlzc2lvbnMucHJvcFR5cGVzID0ge1xuICBwZXJtaXNzaW9uczogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGtleTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIH0pLFxuICApLFxufTtcblxuQ29ubmVjdGVkQWNjb3VudHNQZXJtaXNzaW9ucy5kZWZhdWx0UHJvcHMgPSB7XG4gIHBlcm1pc3Npb25zOiBbXSxcbn07XG5cbkNvbm5lY3RlZEFjY291bnRzUGVybWlzc2lvbnMuZGlzcGxheU5hbWUgPSAnQ29ubmVjdGVkQWNjb3VudHNQZXJtaXNzaW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0Lm1lbW8oQ29ubmVjdGVkQWNjb3VudHNQZXJtaXNzaW9ucyk7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9jb25uZWN0ZWQtYWNjb3VudHMtcGVybWlzc2lvbnMnO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uL3VpL2J1dHRvbic7XG5pbXBvcnQgU2l0ZUljb24gZnJvbSAnLi4vLi4vdWkvc2l0ZS1pY29uJztcbmltcG9ydCB7IHN0cmlwSHR0cHNTY2hlbWVXaXRob3V0UG9ydCB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvdXRpbCc7XG5pbXBvcnQgU2l0ZU9yaWdpbiBmcm9tICcuLi8uLi91aS9zaXRlLW9yaWdpbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbm5lY3RlZFNpdGVzTGlzdCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG4gICAgdDogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb25uZWN0ZWRTdWJqZWN0czogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBpY29uVXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBvcmlnaW46IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICB9KSxcbiAgICApLmlzUmVxdWlyZWQsXG4gICAgb25EaXNjb25uZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbm5lY3RlZFN1YmplY3RzLCBvbkRpc2Nvbm5lY3QgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPG1haW4gY2xhc3NOYW1lPVwiY29ubmVjdGVkLXNpdGVzLWxpc3RfX2NvbnRlbnQtcm93c1wiPlxuICAgICAgICB7Y29ubmVjdGVkU3ViamVjdHMubWFwKChzdWJqZWN0KSA9PiAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAga2V5PXtzdWJqZWN0Lm9yaWdpbn1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNvbm5lY3RlZC1zaXRlcy1saXN0X19jb250ZW50LXJvd1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25uZWN0ZWQtc2l0ZXMtbGlzdF9fc3ViamVjdC1pbmZvXCI+XG4gICAgICAgICAgICAgIDxTaXRlSWNvblxuICAgICAgICAgICAgICAgIGljb249e3N1YmplY3QuaWNvblVybH1cbiAgICAgICAgICAgICAgICBuYW1lPXtzdWJqZWN0Lm5hbWV9XG4gICAgICAgICAgICAgICAgc2l6ZT17MzJ9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29ubmVjdGVkLXNpdGVzLWxpc3RfX3N1YmplY3QtaWNvblwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxTaXRlT3JpZ2luXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29ubmVjdGVkLXNpdGVzLWxpc3RfX3N1YmplY3QtbmFtZVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9e3N1YmplY3QuZXh0ZW5zaW9uSWQgfHwgc3ViamVjdC5vcmlnaW59XG4gICAgICAgICAgICAgICAgc2l0ZU9yaWdpbj17dGhpcy5nZXRTdWJqZWN0RGlzcGxheU5hbWUoc3ViamVjdCl9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29ubmVjdGVkLXNpdGVzLWxpc3RfX2NvbnRlbnQtcm93LWxpbmstYnV0dG9uXCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25EaXNjb25uZWN0KHN1YmplY3Qub3JpZ2luKX1cbiAgICAgICAgICAgICAgdHlwZT1cImxpbmtcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dCgnZGlzY29ubmVjdCcpfVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgPC9tYWluPlxuICAgICk7XG4gIH1cblxuICBnZXRTdWJqZWN0RGlzcGxheU5hbWUoc3ViamVjdCkge1xuICAgIGlmIChzdWJqZWN0LmV4dGVuc2lvbklkKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnQoJ2V4dGVybmFsRXh0ZW5zaW9uJyk7XG4gICAgfVxuXG4gICAgLy8gV2Ugc3RyaXAgaHR0cHMgc2NoZW1lcyBvbmx5LCBhbmQgb25seSBpZiB0aGUgVVJMIGhhcyBubyBwb3J0LlxuICAgIHJldHVybiBzdHJpcEh0dHBzU2NoZW1lV2l0aG91dFBvcnQoc3ViamVjdC5vcmlnaW4pO1xuICB9XG59XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9jb25uZWN0ZWQtc2l0ZXMtbGlzdC5jb21wb25lbnQnO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGZpbmRLZXkgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHtcbiAgU1RBVFVTX0NPTk5FQ1RFRCxcbiAgU1RBVFVTX0NPTk5FQ1RFRF9UT19BTk9USEVSX0FDQ09VTlQsXG4gIFNUQVRVU19OT1RfQ09OTkVDVEVELFxufSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9jb25uZWN0ZWQtc2l0ZXMnO1xuaW1wb3J0IENvbG9ySW5kaWNhdG9yIGZyb20gJy4uLy4uL3VpL2NvbG9yLWluZGljYXRvcic7XG5pbXBvcnQge1xuICBCYWNrZ3JvdW5kQ29sb3IsXG4gIENvbG9yLFxufSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuaW1wb3J0IHtcbiAgZ2V0QWRkcmVzc0Nvbm5lY3RlZFN1YmplY3RNYXAsXG4gIGdldE9yaWdpbk9mQ3VycmVudFRhYixcbiAgZ2V0U2VsZWN0ZWRBZGRyZXNzLFxufSBmcm9tICcuLi8uLi8uLi9zZWxlY3RvcnMnO1xuaW1wb3J0IHsgTXVsdGljaGFpbkNvbm5lY3RlZFNpdGVNZW51IH0gZnJvbSAnLi4vLi4vbXVsdGljaGFpbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbm5lY3RlZFN0YXR1c0luZGljYXRvcih7IG9uQ2xpY2sgfSkge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcblxuICBjb25zdCBzZWxlY3RlZEFkZHJlc3MgPSB1c2VTZWxlY3RvcihnZXRTZWxlY3RlZEFkZHJlc3MpO1xuICBjb25zdCBhZGRyZXNzQ29ubmVjdGVkU3ViamVjdE1hcCA9IHVzZVNlbGVjdG9yKGdldEFkZHJlc3NDb25uZWN0ZWRTdWJqZWN0TWFwKTtcbiAgY29uc3Qgb3JpZ2luT2ZDdXJyZW50VGFiID0gdXNlU2VsZWN0b3IoZ2V0T3JpZ2luT2ZDdXJyZW50VGFiKTtcblxuICBjb25zdCBzZWxlY3RlZEFkZHJlc3NTdWJqZWN0TWFwID0gYWRkcmVzc0Nvbm5lY3RlZFN1YmplY3RNYXBbc2VsZWN0ZWRBZGRyZXNzXTtcbiAgY29uc3QgY3VycmVudFRhYklzQ29ubmVjdGVkVG9TZWxlY3RlZEFkZHJlc3MgPSBCb29sZWFuKFxuICAgIHNlbGVjdGVkQWRkcmVzc1N1YmplY3RNYXAgJiYgc2VsZWN0ZWRBZGRyZXNzU3ViamVjdE1hcFtvcmlnaW5PZkN1cnJlbnRUYWJdLFxuICApO1xuICBsZXQgc3RhdHVzO1xuICBpZiAoY3VycmVudFRhYklzQ29ubmVjdGVkVG9TZWxlY3RlZEFkZHJlc3MpIHtcbiAgICBzdGF0dXMgPSBTVEFUVVNfQ09OTkVDVEVEO1xuICB9IGVsc2UgaWYgKGZpbmRLZXkoYWRkcmVzc0Nvbm5lY3RlZFN1YmplY3RNYXAsIG9yaWdpbk9mQ3VycmVudFRhYikpIHtcbiAgICBzdGF0dXMgPSBTVEFUVVNfQ09OTkVDVEVEX1RPX0FOT1RIRVJfQUNDT1VOVDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0dXMgPSBTVEFUVVNfTk9UX0NPTk5FQ1RFRDtcbiAgfVxuXG4gIGxldCBpbmRpY2F0b3JUeXBlID0gQ29sb3JJbmRpY2F0b3IuVFlQRVMuT1VUTElORTtcbiAgbGV0IGluZGljYXRvckNvbG9yID0gQ29sb3IuaWNvbkRlZmF1bHQ7XG4gIGxldCBnbG9iYWxNZW51Q29sb3IgPSBDb2xvci5pY29uQWx0ZXJuYXRpdmU7XG5cbiAgaWYgKHN0YXR1cyA9PT0gU1RBVFVTX0NPTk5FQ1RFRCkge1xuICAgIGluZGljYXRvckNvbG9yID0gQ29sb3Iuc3VjY2Vzc0RlZmF1bHQ7XG4gICAgaW5kaWNhdG9yVHlwZSA9IENvbG9ySW5kaWNhdG9yLlRZUEVTLlBBUlRJQUw7XG4gICAgZ2xvYmFsTWVudUNvbG9yID0gQ29sb3Iuc3VjY2Vzc0RlZmF1bHQ7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSBTVEFUVVNfQ09OTkVDVEVEX1RPX0FOT1RIRVJfQUNDT1VOVCkge1xuICAgIGluZGljYXRvckNvbG9yID0gQ29sb3IuZXJyb3JEZWZhdWx0O1xuICAgIGdsb2JhbE1lbnVDb2xvciA9IEJhY2tncm91bmRDb2xvci5iYWNrZ3JvdW5kRGVmYXVsdDtcbiAgfVxuXG4gIGNvbnN0IHRleHQgPVxuICAgIHN0YXR1cyA9PT0gU1RBVFVTX0NPTk5FQ1RFRFxuICAgICAgPyB0KCdzdGF0dXNDb25uZWN0ZWQnKVxuICAgICAgOiB0KCdzdGF0dXNOb3RDb25uZWN0ZWQnKTsgLy8gVE9ETzogUmVtb3ZlIHRleHQgc2luY2Ugd2Ugb25seSBuZWVkIHRoZSB0b29sdGlwIHRleHQgZm9yIG5ldyBwZXJtaXNzaW9uIGljb25cbiAgY29uc3QgdG9vbHRpcFRleHQgPVxuICAgIHN0YXR1cyA9PT0gU1RBVFVTX0NPTk5FQ1RFRFxuICAgICAgPyB0KCd0b29sdGlwU2F0dXNDb25uZWN0ZWQnKVxuICAgICAgOiB0KCd0b29sdGlwU2F0dXNOb3RDb25uZWN0ZWQnKTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge3Byb2Nlc3MuZW52Lk1VTFRJQ0hBSU4gPyAoXG4gICAgICAgIDxNdWx0aWNoYWluQ29ubmVjdGVkU2l0ZU1lbnVcbiAgICAgICAgICBzdGF0dXM9e3N0YXR1c31cbiAgICAgICAgICBnbG9iYWxNZW51Q29sb3I9e2dsb2JhbE1lbnVDb2xvcn1cbiAgICAgICAgICB0ZXh0PXt0b29sdGlwVGV4dH1cbiAgICAgICAgICBhcz1cImJ1dHRvblwiXG4gICAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgLz5cbiAgICAgICkgOiAoXG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiY29ubmVjdGVkLXN0YXR1cy1pbmRpY2F0b3JcIiBvbkNsaWNrPXtvbkNsaWNrfT5cbiAgICAgICAgICA8Q29sb3JJbmRpY2F0b3IgY29sb3I9e2luZGljYXRvckNvbG9yfSB0eXBlPXtpbmRpY2F0b3JUeXBlfSAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29ubmVjdGVkLXN0YXR1cy1pbmRpY2F0b3JfX3RleHRcIj57dGV4dH08L2Rpdj5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICApfVxuICAgIDwvPlxuICApO1xufVxuXG5Db25uZWN0ZWRTdGF0dXNJbmRpY2F0b3IuZGVmYXVsdFByb3BzID0ge1xuICBvbkNsaWNrOiB1bmRlZmluZWQsXG59O1xuXG5Db25uZWN0ZWRTdGF0dXNJbmRpY2F0b3IucHJvcFR5cGVzID0ge1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbn07XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9jb25uZWN0ZWQtc3RhdHVzLWluZGljYXRvcic7XG4iLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBzb3J0QnkgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi8uLi91aS9idXR0b24nO1xuaW1wb3J0IFJlY2lwaWVudEdyb3VwIGZyb20gJy4vcmVjaXBpZW50LWdyb3VwL3JlY2lwaWVudC1ncm91cC5jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250YWN0TGlzdCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHNlYXJjaEZvckNvbnRhY3RzOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZWFyY2hGb3JSZWNlbnRzOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZWFyY2hGb3JNeUFjY291bnRzOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3RSZWNpcGllbnQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBzZWxlY3RlZEFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH07XG5cbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICB0OiBQcm9wVHlwZXMuZnVuYyxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBpc1Nob3dpbmdBbGxSZWNlbnQ6IGZhbHNlLFxuICB9O1xuXG4gIHJlbmRlclJlY2VudHMoKSB7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgY29uc3QgeyBpc1Nob3dpbmdBbGxSZWNlbnQgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qgbm9uQ29udGFjdHMgPSB0aGlzLnByb3BzLnNlYXJjaEZvclJlY2VudHMoKTtcblxuICAgIGNvbnN0IHNob3dMb2FkTW9yZSA9ICFpc1Nob3dpbmdBbGxSZWNlbnQgJiYgbm9uQ29udGFjdHMubGVuZ3RoID4gMjtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbmRfX3NlbGVjdC1yZWNpcGllbnQtd3JhcHBlcl9fcmVjZW50LWdyb3VwLXdyYXBwZXJcIj5cbiAgICAgICAgPFJlY2lwaWVudEdyb3VwXG4gICAgICAgICAgbGFiZWw9e3QoJ3JlY2VudHMnKX1cbiAgICAgICAgICBpdGVtcz17c2hvd0xvYWRNb3JlID8gbm9uQ29udGFjdHMuc2xpY2UoMCwgMikgOiBub25Db250YWN0c31cbiAgICAgICAgICBvblNlbGVjdD17dGhpcy5wcm9wcy5zZWxlY3RSZWNpcGllbnR9XG4gICAgICAgICAgc2VsZWN0ZWRBZGRyZXNzPXt0aGlzLnByb3BzLnNlbGVjdGVkQWRkcmVzc31cbiAgICAgICAgLz5cbiAgICAgICAge3Nob3dMb2FkTW9yZSAmJiAoXG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cImxpbmtcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwic2VuZF9fc2VsZWN0LXJlY2lwaWVudC13cmFwcGVyX19yZWNlbnQtZ3JvdXAtd3JhcHBlcl9fbG9hZC1tb3JlXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0U3RhdGUoeyBpc1Nob3dpbmdBbGxSZWNlbnQ6IHRydWUgfSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3QoJ2xvYWRNb3JlJyl9XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyQWRkcmVzc0Jvb2soKSB7XG4gICAgY29uc3QgdW5zb3J0ZWRDb250YWN0c0J5TGV0dGVyID0gdGhpcy5wcm9wc1xuICAgICAgLnNlYXJjaEZvckNvbnRhY3RzKClcbiAgICAgIC5yZWR1Y2UoKG9iaiwgY29udGFjdCkgPT4ge1xuICAgICAgICBjb25zdCBmaXJzdExldHRlciA9IGNvbnRhY3QubmFtZVswXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLm9iaixcbiAgICAgICAgICBbZmlyc3RMZXR0ZXJdOiBbLi4uKG9ialtmaXJzdExldHRlcl0gfHwgW10pLCBjb250YWN0XSxcbiAgICAgICAgfTtcbiAgICAgIH0sIHt9KTtcblxuICAgIGNvbnN0IGxldHRlcnMgPSBPYmplY3Qua2V5cyh1bnNvcnRlZENvbnRhY3RzQnlMZXR0ZXIpLnNvcnQoKTtcblxuICAgIGNvbnN0IHNvcnRlZENvbnRhY3RHcm91cHMgPSBsZXR0ZXJzLm1hcCgobGV0dGVyKSA9PiB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBsZXR0ZXIsXG4gICAgICAgIHNvcnRCeSh1bnNvcnRlZENvbnRhY3RzQnlMZXR0ZXJbbGV0dGVyXSwgKGNvbnRhY3QpID0+IHtcbiAgICAgICAgICByZXR1cm4gY29udGFjdC5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0pLFxuICAgICAgXTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzb3J0ZWRDb250YWN0R3JvdXBzLm1hcCgoW2xldHRlciwgZ3JvdXBJdGVtc10pID0+IChcbiAgICAgIDxSZWNpcGllbnRHcm91cFxuICAgICAgICBrZXk9e2Ake2xldHRlcn0tY29udGFjdC1ncm91cGB9XG4gICAgICAgIGxhYmVsPXtsZXR0ZXJ9XG4gICAgICAgIGl0ZW1zPXtncm91cEl0ZW1zfVxuICAgICAgICBvblNlbGVjdD17dGhpcy5wcm9wcy5zZWxlY3RSZWNpcGllbnR9XG4gICAgICAgIHNlbGVjdGVkQWRkcmVzcz17dGhpcy5wcm9wcy5zZWxlY3RlZEFkZHJlc3N9XG4gICAgICAvPlxuICAgICkpO1xuICB9XG5cbiAgcmVuZGVyTXlBY2NvdW50cygpIHtcbiAgICBjb25zdCBteUFjY291bnRzID0gdGhpcy5wcm9wcy5zZWFyY2hGb3JNeUFjY291bnRzKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFJlY2lwaWVudEdyb3VwXG4gICAgICAgIGl0ZW1zPXtteUFjY291bnRzfVxuICAgICAgICBvblNlbGVjdD17dGhpcy5wcm9wcy5zZWxlY3RSZWNpcGllbnR9XG4gICAgICAgIHNlbGVjdGVkQWRkcmVzcz17dGhpcy5wcm9wcy5zZWxlY3RlZEFkZHJlc3N9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBzZWFyY2hGb3JSZWNlbnRzLFxuICAgICAgc2VhcmNoRm9yQ29udGFjdHMsXG4gICAgICBzZWFyY2hGb3JNeUFjY291bnRzLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VuZF9fc2VsZWN0LXJlY2lwaWVudC13cmFwcGVyX19saXN0XCI+XG4gICAgICAgIHtjaGlsZHJlbiB8fCBudWxsfVxuICAgICAgICB7c2VhcmNoRm9yUmVjZW50cyA/IHRoaXMucmVuZGVyUmVjZW50cygpIDogbnVsbH1cbiAgICAgICAge3NlYXJjaEZvckNvbnRhY3RzID8gdGhpcy5yZW5kZXJBZGRyZXNzQm9vaygpIDogbnVsbH1cbiAgICAgICAge3NlYXJjaEZvck15QWNjb3VudHMgPyB0aGlzLnJlbmRlck15QWNjb3VudHMoKSA6IG51bGx9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9jb250YWN0LWxpc3QuY29tcG9uZW50JztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgSWRlbnRpY29uIGZyb20gJy4uLy4uLy4uL3VpL2lkZW50aWNvbic7XG5pbXBvcnQgeyBlbGxpcHNpZnkgfSBmcm9tICcuLi8uLi8uLi8uLi9wYWdlcy9zZW5kL3NlbmQudXRpbHMnO1xuXG5mdW5jdGlvbiBhZGRyZXNzZXNFcXVhbChhZGRyZXNzMSwgYWRkcmVzczIpIHtcbiAgcmV0dXJuIFN0cmluZyhhZGRyZXNzMSkudG9Mb3dlckNhc2UoKSA9PT0gU3RyaW5nKGFkZHJlc3MyKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBSZWNpcGllbnRHcm91cCh7XG4gIGxhYmVsLFxuICBpdGVtcyxcbiAgb25TZWxlY3QsXG4gIHNlbGVjdGVkQWRkcmVzcyxcbn0pIHtcbiAgaWYgKCFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT1cInNlbmRfX3NlbGVjdC1yZWNpcGllbnQtd3JhcHBlcl9fZ3JvdXBcIlxuICAgICAgZGF0YS10ZXN0aWQ9XCJyZWNpcGllbnQtZ3JvdXBcIlxuICAgID5cbiAgICAgIHtsYWJlbCAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VuZF9fc2VsZWN0LXJlY2lwaWVudC13cmFwcGVyX19ncm91cC1sYWJlbFwiPlxuICAgICAgICAgIHtsYWJlbH1cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgICAge2l0ZW1zLm1hcCgoeyBhZGRyZXNzLCBuYW1lIH0pID0+IChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIGtleT17YWRkcmVzc31cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvblNlbGVjdChhZGRyZXNzLCBuYW1lKX1cbiAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoe1xuICAgICAgICAgICAgJ3NlbmRfX3NlbGVjdC1yZWNpcGllbnQtd3JhcHBlcl9fZ3JvdXAtaXRlbSc6ICFhZGRyZXNzZXNFcXVhbChcbiAgICAgICAgICAgICAgYWRkcmVzcyxcbiAgICAgICAgICAgICAgc2VsZWN0ZWRBZGRyZXNzLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICdzZW5kX19zZWxlY3QtcmVjaXBpZW50LXdyYXBwZXJfX2dyb3VwLWl0ZW0tLXNlbGVjdGVkJzpcbiAgICAgICAgICAgICAgYWRkcmVzc2VzRXF1YWwoYWRkcmVzcywgc2VsZWN0ZWRBZGRyZXNzKSxcbiAgICAgICAgICB9KX1cbiAgICAgICAgPlxuICAgICAgICAgIDxJZGVudGljb24gYWRkcmVzcz17YWRkcmVzc30gZGlhbWV0ZXI9ezI4fSAvPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInNlbmRfX3NlbGVjdC1yZWNpcGllbnQtd3JhcHBlcl9fZ3JvdXAtaXRlbV9fY29udGVudFwiXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD1cInJlY2lwaWVudFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZW5kX19zZWxlY3QtcmVjaXBpZW50LXdyYXBwZXJfX2dyb3VwLWl0ZW1fX3RpdGxlXCI+XG4gICAgICAgICAgICAgIHtuYW1lIHx8IGVsbGlwc2lmeShhZGRyZXNzKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge25hbWUgJiYgKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbmRfX3NlbGVjdC1yZWNpcGllbnQtd3JhcHBlcl9fZ3JvdXAtaXRlbV9fc3VidGl0bGVcIj5cbiAgICAgICAgICAgICAgICB7ZWxsaXBzaWZ5KGFkZHJlc3MpfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSl9XG4gICAgPC9kaXY+XG4gICk7XG59XG5cblJlY2lwaWVudEdyb3VwLnByb3BUeXBlcyA9IHtcbiAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGl0ZW1zOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgYWRkcmVzczogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB9KSxcbiAgKSxcbiAgb25TZWxlY3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHNlbGVjdGVkQWRkcmVzczogUHJvcFR5cGVzLnN0cmluZyxcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tICcuLi8uLi91aS90ZXh0LWZpZWxkJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vdWkvYnV0dG9uJztcbmltcG9ydCBDaGVja0JveCBmcm9tICcuLi8uLi91aS9jaGVjay1ib3gnO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcbmltcG9ydCBTcnBJbnB1dCBmcm9tICcuLi9zcnAtaW5wdXQnO1xuaW1wb3J0IHsgUEFTU1dPUkRfTUlOX0xFTkdUSCB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2NvbW1vbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENyZWF0ZU5ld1ZhdWx0KHtcbiAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgaW5jbHVkZVRlcm1zID0gZmFsc2UsXG4gIG9uU3VibWl0LFxuICBzdWJtaXRUZXh0LFxufSkge1xuICBjb25zdCBbY29uZmlybVBhc3N3b3JkLCBzZXRDb25maXJtUGFzc3dvcmRdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbY29uZmlybVBhc3N3b3JkRXJyb3IsIHNldENvbmZpcm1QYXNzd29yZEVycm9yXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3Bhc3N3b3JkLCBzZXRQYXNzd29yZF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtwYXNzd29yZEVycm9yLCBzZXRQYXNzd29yZEVycm9yXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3NlZWRQaHJhc2UsIHNldFNlZWRQaHJhc2VdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbdGVybXNDaGVja2VkLCBzZXRUZXJtc0NoZWNrZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuXG4gIGNvbnN0IG9uUGFzc3dvcmRDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAobmV3UGFzc3dvcmQpID0+IHtcbiAgICAgIGxldCBuZXdDb25maXJtUGFzc3dvcmRFcnJvciA9ICcnO1xuICAgICAgbGV0IG5ld1Bhc3N3b3JkRXJyb3IgPSAnJztcblxuICAgICAgaWYgKG5ld1Bhc3N3b3JkICYmIG5ld1Bhc3N3b3JkLmxlbmd0aCA8IFBBU1NXT1JEX01JTl9MRU5HVEgpIHtcbiAgICAgICAgbmV3UGFzc3dvcmRFcnJvciA9IHQoJ3Bhc3N3b3JkTm90TG9uZ0Vub3VnaCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlybVBhc3N3b3JkICYmIG5ld1Bhc3N3b3JkICE9PSBjb25maXJtUGFzc3dvcmQpIHtcbiAgICAgICAgbmV3Q29uZmlybVBhc3N3b3JkRXJyb3IgPSB0KCdwYXNzd29yZHNEb250TWF0Y2gnKTtcbiAgICAgIH1cblxuICAgICAgc2V0UGFzc3dvcmQobmV3UGFzc3dvcmQpO1xuICAgICAgc2V0UGFzc3dvcmRFcnJvcihuZXdQYXNzd29yZEVycm9yKTtcbiAgICAgIHNldENvbmZpcm1QYXNzd29yZEVycm9yKG5ld0NvbmZpcm1QYXNzd29yZEVycm9yKTtcbiAgICB9LFxuICAgIFtjb25maXJtUGFzc3dvcmQsIHRdLFxuICApO1xuXG4gIGNvbnN0IG9uQ29uZmlybVBhc3N3b3JkQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKG5ld0NvbmZpcm1QYXNzd29yZCkgPT4ge1xuICAgICAgbGV0IG5ld0NvbmZpcm1QYXNzd29yZEVycm9yID0gJyc7XG5cbiAgICAgIGlmIChwYXNzd29yZCAhPT0gbmV3Q29uZmlybVBhc3N3b3JkKSB7XG4gICAgICAgIG5ld0NvbmZpcm1QYXNzd29yZEVycm9yID0gdCgncGFzc3dvcmRzRG9udE1hdGNoJyk7XG4gICAgICB9XG5cbiAgICAgIHNldENvbmZpcm1QYXNzd29yZChuZXdDb25maXJtUGFzc3dvcmQpO1xuICAgICAgc2V0Q29uZmlybVBhc3N3b3JkRXJyb3IobmV3Q29uZmlybVBhc3N3b3JkRXJyb3IpO1xuICAgIH0sXG4gICAgW3Bhc3N3b3JkLCB0XSxcbiAgKTtcblxuICBjb25zdCBpc1ZhbGlkID1cbiAgICAhZGlzYWJsZWQgJiZcbiAgICBwYXNzd29yZCAmJlxuICAgIGNvbmZpcm1QYXNzd29yZCAmJlxuICAgIHBhc3N3b3JkID09PSBjb25maXJtUGFzc3dvcmQgJiZcbiAgICBzZWVkUGhyYXNlICYmXG4gICAgKCFpbmNsdWRlVGVybXMgfHwgdGVybXNDaGVja2VkKSAmJlxuICAgICFwYXNzd29yZEVycm9yICYmXG4gICAgIWNvbmZpcm1QYXNzd29yZEVycm9yO1xuXG4gIGNvbnN0IG9uSW1wb3J0ID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCBvblN1Ym1pdChwYXNzd29yZCwgc2VlZFBocmFzZSk7XG4gICAgfSxcbiAgICBbaXNWYWxpZCwgb25TdWJtaXQsIHBhc3N3b3JkLCBzZWVkUGhyYXNlXSxcbiAgKTtcblxuICBjb25zdCB0b2dnbGVUZXJtc0NoZWNrID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldFRlcm1zQ2hlY2tlZCgoY3VycmVudFRlcm1zQ2hlY2tlZCkgPT4gIWN1cnJlbnRUZXJtc0NoZWNrZWQpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgdGVybXNPZlVzZSA9IHQoJ2FjY2VwdFRlcm1zT2ZVc2UnLCBbXG4gICAgPGFcbiAgICAgIGNsYXNzTmFtZT1cImNyZWF0ZS1uZXctdmF1bHRfX3Rlcm1zLWxpbmtcIlxuICAgICAga2V5PVwiY3JlYXRlLW5ldy12YXVsdF9fbGluay10ZXh0XCJcbiAgICAgIGhyZWY9XCJodHRwczovL21ldGFtYXNrLmlvL3Rlcm1zLmh0bWxcIlxuICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgID5cbiAgICAgIHt0KCd0ZXJtcycpfVxuICAgIDwvYT4sXG4gIF0pO1xuXG4gIHJldHVybiAoXG4gICAgPGZvcm0gY2xhc3NOYW1lPVwiY3JlYXRlLW5ldy12YXVsdF9fZm9ybVwiIG9uU3VibWl0PXtvbkltcG9ydH0+XG4gICAgICA8U3JwSW5wdXQgb25DaGFuZ2U9e3NldFNlZWRQaHJhc2V9IHNycFRleHQ9e3QoJ3NlY3JldFJlY292ZXJ5UGhyYXNlJyl9IC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNyZWF0ZS1uZXctdmF1bHRfX2NyZWF0ZS1wYXNzd29yZFwiPlxuICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgZGF0YS10ZXN0aWQ9XCJjcmVhdGUtdmF1bHQtcGFzc3dvcmRcIlxuICAgICAgICAgIGlkPVwicGFzc3dvcmRcIlxuICAgICAgICAgIGxhYmVsPXt0KCduZXdQYXNzd29yZCcpfVxuICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgdmFsdWU9e3Bhc3N3b3JkfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IG9uUGFzc3dvcmRDaGFuZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICBlcnJvcj17cGFzc3dvcmRFcnJvcn1cbiAgICAgICAgICBhdXRvQ29tcGxldGU9XCJuZXctcGFzc3dvcmRcIlxuICAgICAgICAgIG1hcmdpbj1cIm5vcm1hbFwiXG4gICAgICAgICAgbGFyZ2VMYWJlbFxuICAgICAgICAvPlxuICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgZGF0YS10ZXN0aWQ9XCJjcmVhdGUtdmF1bHQtY29uZmlybS1wYXNzd29yZFwiXG4gICAgICAgICAgaWQ9XCJjb25maXJtLXBhc3N3b3JkXCJcbiAgICAgICAgICBsYWJlbD17dCgnY29uZmlybVBhc3N3b3JkJyl9XG4gICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICB2YWx1ZT17Y29uZmlybVBhc3N3b3JkfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IG9uQ29uZmlybVBhc3N3b3JkQ2hhbmdlKGV2ZW50LnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgZXJyb3I9e2NvbmZpcm1QYXNzd29yZEVycm9yfVxuICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm5ldy1wYXNzd29yZFwiXG4gICAgICAgICAgbWFyZ2luPVwibm9ybWFsXCJcbiAgICAgICAgICBsYXJnZUxhYmVsXG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIHtpbmNsdWRlVGVybXMgPyAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3JlYXRlLW5ldy12YXVsdF9fdGVybXNcIj5cbiAgICAgICAgICA8Q2hlY2tCb3hcbiAgICAgICAgICAgIGlkPVwiY3JlYXRlLW5ldy12YXVsdF9fdGVybXMtY2hlY2tib3hcIlxuICAgICAgICAgICAgZGF0YVRlc3RJZD1cImNyZWF0ZS1uZXctdmF1bHRfX3Rlcm1zLWNoZWNrYm94XCJcbiAgICAgICAgICAgIGNoZWNrZWQ9e3Rlcm1zQ2hlY2tlZH1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RvZ2dsZVRlcm1zQ2hlY2t9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNyZWF0ZS1uZXctdmF1bHRfX3Rlcm1zLWxhYmVsXCJcbiAgICAgICAgICAgIGh0bWxGb3I9XCJjcmVhdGUtbmV3LXZhdWx0X190ZXJtcy1jaGVja2JveFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFRleHQgYXM9XCJzcGFuXCI+e3Rlcm1zT2ZVc2V9PC9UZXh0PlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSA6IG51bGx9XG4gICAgICA8QnV0dG9uXG4gICAgICAgIGRhdGEtdGVzdGlkPVwiY3JlYXRlLW5ldy12YXVsdC1zdWJtaXQtYnV0dG9uXCJcbiAgICAgICAgY2xhc3NOYW1lPVwiY3JlYXRlLW5ldy12YXVsdF9fc3VibWl0LWJ1dHRvblwiXG4gICAgICAgIHR5cGU9XCJwcmltYXJ5XCJcbiAgICAgICAgc3VibWl0XG4gICAgICAgIGRpc2FibGVkPXshaXNWYWxpZH1cbiAgICAgID5cbiAgICAgICAge3N1Ym1pdFRleHR9XG4gICAgICA8L0J1dHRvbj5cbiAgICA8L2Zvcm0+XG4gICk7XG59XG5cbkNyZWF0ZU5ld1ZhdWx0LnByb3BUeXBlcyA9IHtcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBpbmNsdWRlVGVybXM6IFByb3BUeXBlcy5ib29sLFxuICBvblN1Ym1pdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc3VibWl0VGV4dDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2NyZWF0ZS1uZXctdmF1bHQnO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgVW5pdElucHV0IGZyb20gJy4uLy4uL3VpL3VuaXQtaW5wdXQnO1xuaW1wb3J0IEN1cnJlbmN5RGlzcGxheSBmcm9tICcuLi8uLi91aS9jdXJyZW5jeS1kaXNwbGF5JztcbmltcG9ydCB7IEkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dHMvaTE4bic7XG5pbXBvcnQge1xuICBnZXRDb252ZXJzaW9uUmF0ZSxcbiAgZ2V0TmF0aXZlQ3VycmVuY3ksXG59IGZyb20gJy4uLy4uLy4uL2R1Y2tzL21ldGFtYXNrL21ldGFtYXNrJztcbmltcG9ydCB7IGdldEN1cnJlbnRDdXJyZW5jeSwgZ2V0U2hvdWxkU2hvd0ZpYXQgfSBmcm9tICcuLi8uLi8uLi9zZWxlY3RvcnMnO1xuaW1wb3J0IHtcbiAgZ2V0VmFsdWVGcm9tV2VpSGV4LFxuICBnZXRXZWlIZXhGcm9tRGVjaW1hbFZhbHVlLFxufSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9jb252ZXJzaW9uLnV0aWxzJztcbmltcG9ydCB7IEV0aGVyRGVub21pbmF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9jb21tb24nO1xuXG4vKipcbiAqIENvbXBvbmVudCB0aGF0IGFsbG93cyB1c2VyIHRvIGVudGVyIGN1cnJlbmN5IHZhbHVlcyBhcyBhIG51bWJlciwgYW5kIHByb3BzIHJlY2VpdmUgYSBjb252ZXJ0ZWRcbiAqIGhleCB2YWx1ZSBpbiBXRUkuIHByb3BzLnZhbHVlLCB1c2VkIGFzIGEgZGVmYXVsdCBvciBmb3JjZWQgdmFsdWUsIHNob3VsZCBiZSBhIGhleCB2YWx1ZSwgd2hpY2hcbiAqIGdldHMgY29udmVydGVkIGludG8gYSBkZWNpbWFsIHZhbHVlIGRlcGVuZGluZyBvbiB0aGUgY3VycmVuY3kgKEVUSCBvciBGaWF0KS5cbiAqXG4gKiBAcGFyYW0gb3B0aW9uczBcbiAqIEBwYXJhbSBvcHRpb25zMC5oZXhWYWx1ZVxuICogQHBhcmFtIG9wdGlvbnMwLmZlYXR1cmVTZWNvbmRhcnlcbiAqIEBwYXJhbSBvcHRpb25zMC5vbkNoYW5nZVxuICogQHBhcmFtIG9wdGlvbnMwLm9uUHJlZmVyZW5jZVRvZ2dsZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDdXJyZW5jeUlucHV0KHtcbiAgaGV4VmFsdWUsXG4gIGZlYXR1cmVTZWNvbmRhcnksXG4gIG9uQ2hhbmdlLFxuICBvblByZWZlcmVuY2VUb2dnbGUsXG59KSB7XG4gIGNvbnN0IHQgPSB1c2VDb250ZXh0KEkxOG5Db250ZXh0KTtcblxuICBjb25zdCBwcmVmZXJyZWRDdXJyZW5jeSA9IHVzZVNlbGVjdG9yKGdldE5hdGl2ZUN1cnJlbmN5KTtcbiAgY29uc3Qgc2Vjb25kYXJ5Q3VycmVuY3kgPSB1c2VTZWxlY3RvcihnZXRDdXJyZW50Q3VycmVuY3kpO1xuICBjb25zdCBjb252ZXJzaW9uUmF0ZSA9IHVzZVNlbGVjdG9yKGdldENvbnZlcnNpb25SYXRlKTtcbiAgY29uc3Qgc2hvd0ZpYXQgPSB1c2VTZWxlY3RvcihnZXRTaG91bGRTaG93RmlhdCk7XG4gIGNvbnN0IGhpZGVTZWNvbmRhcnkgPSAhc2hvd0ZpYXQ7XG4gIGNvbnN0IHByaW1hcnlTdWZmaXggPSBwcmVmZXJyZWRDdXJyZW5jeSB8fCBFdGhlckRlbm9taW5hdGlvbi5FVEg7XG4gIGNvbnN0IHNlY29uZGFyeVN1ZmZpeCA9IHNlY29uZGFyeUN1cnJlbmN5LnRvVXBwZXJDYXNlKCk7XG5cbiAgY29uc3QgW2lzU3dhcHBlZCwgc2V0U3dhcHBlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtuZXdIZXhWYWx1ZSwgc2V0TmV3SGV4VmFsdWVdID0gdXNlU3RhdGUoaGV4VmFsdWUpO1xuICBjb25zdCBbc2hvdWxkRGlzcGxheUZpYXQsIHNldFNob3VsZERpc3BsYXlGaWF0XSA9IHVzZVN0YXRlKGZlYXR1cmVTZWNvbmRhcnkpO1xuICBjb25zdCBzaG91bGRVc2VGaWF0ID0gaGlkZVNlY29uZGFyeSA/IGZhbHNlIDogQm9vbGVhbihzaG91bGREaXNwbGF5RmlhdCk7XG5cbiAgY29uc3QgZ2V0RGVjaW1hbFZhbHVlID0gKCkgPT4ge1xuICAgIGNvbnN0IGRlY2ltYWxWYWx1ZVN0cmluZyA9IHNob3VsZFVzZUZpYXRcbiAgICAgID8gZ2V0VmFsdWVGcm9tV2VpSGV4KHtcbiAgICAgICAgICB2YWx1ZTogaGV4VmFsdWUsXG4gICAgICAgICAgdG9DdXJyZW5jeTogc2Vjb25kYXJ5Q3VycmVuY3ksXG4gICAgICAgICAgY29udmVyc2lvblJhdGUsXG4gICAgICAgICAgbnVtYmVyT2ZEZWNpbWFsczogMixcbiAgICAgICAgfSlcbiAgICAgIDogZ2V0VmFsdWVGcm9tV2VpSGV4KHtcbiAgICAgICAgICB2YWx1ZTogaGV4VmFsdWUsXG4gICAgICAgICAgdG9DdXJyZW5jeTogRXRoZXJEZW5vbWluYXRpb24uRVRILFxuICAgICAgICAgIG51bWJlck9mRGVjaW1hbHM6IDgsXG4gICAgICAgIH0pO1xuXG4gICAgcmV0dXJuIE51bWJlcihkZWNpbWFsVmFsdWVTdHJpbmcpIHx8IDA7XG4gIH07XG5cbiAgY29uc3QgaW5pdGlhbERlY2ltYWxWYWx1ZSA9IGhleFZhbHVlID8gZ2V0RGVjaW1hbFZhbHVlKCkgOiAwO1xuXG4gIGNvbnN0IHN3YXAgPSBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgb25QcmVmZXJlbmNlVG9nZ2xlKCk7XG4gICAgc2V0U3dhcHBlZCghaXNTd2FwcGVkKTtcbiAgICBzZXRTaG91bGREaXNwbGF5RmlhdCghc2hvdWxkRGlzcGxheUZpYXQpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IChuZXdEZWNpbWFsVmFsdWUpID0+IHtcbiAgICBjb25zdCBoZXhWYWx1ZU5ldyA9IHNob3VsZFVzZUZpYXRcbiAgICAgID8gZ2V0V2VpSGV4RnJvbURlY2ltYWxWYWx1ZSh7XG4gICAgICAgICAgdmFsdWU6IG5ld0RlY2ltYWxWYWx1ZSxcbiAgICAgICAgICBmcm9tQ3VycmVuY3k6IHNlY29uZGFyeUN1cnJlbmN5LFxuICAgICAgICAgIGNvbnZlcnNpb25SYXRlLFxuICAgICAgICAgIGludmVydENvbnZlcnNpb25SYXRlOiB0cnVlLFxuICAgICAgICB9KVxuICAgICAgOiBnZXRXZWlIZXhGcm9tRGVjaW1hbFZhbHVlKHtcbiAgICAgICAgICB2YWx1ZTogbmV3RGVjaW1hbFZhbHVlLFxuICAgICAgICAgIGZyb21DdXJyZW5jeTogRXRoZXJEZW5vbWluYXRpb24uRVRILFxuICAgICAgICAgIGZyb21EZW5vbWluYXRpb246IEV0aGVyRGVub21pbmF0aW9uLkVUSCxcbiAgICAgICAgICBjb252ZXJzaW9uUmF0ZSxcbiAgICAgICAgfSk7XG5cbiAgICBzZXROZXdIZXhWYWx1ZShoZXhWYWx1ZU5ldyk7XG4gICAgb25DaGFuZ2UoaGV4VmFsdWVOZXcpO1xuICAgIHNldFN3YXBwZWQoIWlzU3dhcHBlZCk7XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXROZXdIZXhWYWx1ZShoZXhWYWx1ZSk7XG4gIH0sIFtoZXhWYWx1ZV0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGZlYXR1cmVTZWNvbmRhcnkpIHtcbiAgICAgIGhhbmRsZUNoYW5nZShpbml0aWFsRGVjaW1hbFZhbHVlKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbZmVhdHVyZVNlY29uZGFyeSwgaW5pdGlhbERlY2ltYWxWYWx1ZV0pO1xuXG4gIGNvbnN0IHJlbmRlckNvbnZlcnNpb25Db21wb25lbnQgPSAoKSA9PiB7XG4gICAgbGV0IGN1cnJlbmN5LCBudW1iZXJPZkRlY2ltYWxzO1xuXG4gICAgaWYgKGhpZGVTZWNvbmRhcnkpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3VycmVuY3ktaW5wdXRfX2NvbnZlcnNpb24tY29tcG9uZW50XCI+XG4gICAgICAgICAge3QoJ25vQ29udmVyc2lvblJhdGVBdmFpbGFibGUnKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChzaG91bGRVc2VGaWF0KSB7XG4gICAgICAvLyBEaXNwbGF5IEVUSFxuICAgICAgY3VycmVuY3kgPSBwcmVmZXJyZWRDdXJyZW5jeSB8fCBFdGhlckRlbm9taW5hdGlvbi5FVEg7XG4gICAgICBudW1iZXJPZkRlY2ltYWxzID0gODtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRGlzcGxheSBGaWF0XG4gICAgICBjdXJyZW5jeSA9IHNlY29uZGFyeUN1cnJlbmN5O1xuICAgICAgbnVtYmVyT2ZEZWNpbWFscyA9IDI7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDdXJyZW5jeURpc3BsYXlcbiAgICAgICAgY2xhc3NOYW1lPVwiY3VycmVuY3ktaW5wdXRfX2NvbnZlcnNpb24tY29tcG9uZW50XCJcbiAgICAgICAgY3VycmVuY3k9e2N1cnJlbmN5fVxuICAgICAgICB2YWx1ZT17bmV3SGV4VmFsdWV9XG4gICAgICAgIG51bWJlck9mRGVjaW1hbHM9e251bWJlck9mRGVjaW1hbHN9XG4gICAgICAvPlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8VW5pdElucHV0XG4gICAgICB7Li4ue1xuICAgICAgICBoZXhWYWx1ZSxcbiAgICAgICAgcHJlZmVycmVkQ3VycmVuY3ksXG4gICAgICAgIHNlY29uZGFyeUN1cnJlbmN5LFxuICAgICAgICBoaWRlU2Vjb25kYXJ5LFxuICAgICAgICBmZWF0dXJlU2Vjb25kYXJ5LFxuICAgICAgICBjb252ZXJzaW9uUmF0ZSxcbiAgICAgICAgb25DaGFuZ2UsXG4gICAgICAgIG9uUHJlZmVyZW5jZVRvZ2dsZSxcbiAgICAgIH19XG4gICAgICBkYXRhVGVzdElkPVwiY3VycmVuY3ktaW5wdXRcIlxuICAgICAgc3VmZml4PXtzaG91bGRVc2VGaWF0ID8gc2Vjb25kYXJ5U3VmZml4IDogcHJpbWFyeVN1ZmZpeH1cbiAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICB2YWx1ZT17aW5pdGlhbERlY2ltYWxWYWx1ZX1cbiAgICAgIGFjdGlvbkNvbXBvbmVudD17XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJjdXJyZW5jeS1pbnB1dF9fc3dhcC1jb21wb25lbnRcIlxuICAgICAgICAgIGRhdGEtdGVzdGlkPVwiY3VycmVuY3ktc3dhcFwiXG4gICAgICAgICAgb25DbGljaz17c3dhcH1cbiAgICAgICAgPlxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXJldHdlZXQgZmEtbGdcIiAvPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIH1cbiAgICA+XG4gICAgICB7cmVuZGVyQ29udmVyc2lvbkNvbXBvbmVudCgpfVxuICAgIDwvVW5pdElucHV0PlxuICApO1xufVxuXG5DdXJyZW5jeUlucHV0LnByb3BUeXBlcyA9IHtcbiAgaGV4VmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZlYXR1cmVTZWNvbmRhcnk6IFByb3BUeXBlcy5ib29sLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUHJlZmVyZW5jZVRvZ2dsZTogUHJvcFR5cGVzLmZ1bmMsXG59O1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vY3VycmVuY3ktaW5wdXQnO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQm94IGZyb20gJy4uLy4uL3VpL2JveCc7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuLi8uLi91aS90b29sdGlwJztcbmltcG9ydCB7XG4gIFRleHRDb2xvcixcbiAgRElTUExBWSxcbiAgVGV4dFZhcmlhbnQsXG59IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuXG5pbXBvcnQgeyBJY29uLCBJY29uTmFtZSwgSWNvblNpemUsIFRleHQgfSBmcm9tICcuLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5cbmV4cG9ydCBjb25zdCBDdXN0b21TcGVuZGluZ0NhcFRvb2x0aXAgPSAoe1xuICB0b29sdGlwQ29udGVudFRleHQsXG4gIHRvb2x0aXBJY29uLFxufSkgPT4gKFxuICA8Qm94IGRpc3BsYXk9e0RJU1BMQVkuSU5MSU5FX0JMT0NLfT5cbiAgICA8VG9vbHRpcFxuICAgICAgaW50ZXJhY3RpdmVcbiAgICAgIHBvc2l0aW9uPVwidG9wXCJcbiAgICAgIGh0bWw9e1xuICAgICAgICA8VGV4dFxuICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICBtYXJnaW49ezN9XG4gICAgICAgICAgY29sb3I9e1RleHRDb2xvci50ZXh0QWx0ZXJuYXRpdmV9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1maWVsZF9faGVhZGluZy10aXRsZV9fdG9vbHRpcFwiXG4gICAgICAgID5cbiAgICAgICAgICB7dG9vbHRpcENvbnRlbnRUZXh0fVxuICAgICAgICA8L1RleHQ+XG4gICAgICB9XG4gICAgPlxuICAgICAge3Rvb2x0aXBJY29uID8gKFxuICAgICAgICA8SWNvblxuICAgICAgICAgIG5hbWU9e0ljb25OYW1lLkRhbmdlcn1cbiAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWZpZWxkX19oZWFkaW5nLXRpdGxlX190b29sdGlwX193YXJuaW5nLWljb25cIlxuICAgICAgICAgIHNpemU9e0ljb25TaXplLkluaGVyaXR9XG4gICAgICAgICAgc3R5bGU9e3sgJ3ZlcnRpY2FsLWFsaWduJzogJ2JvdHRvbScgfX1cbiAgICAgICAgLz5cbiAgICAgICkgOiAoXG4gICAgICAgIHRvb2x0aXBJY29uICE9PSAnJyAmJiAoXG4gICAgICAgICAgPEljb24gbmFtZT17SWNvbk5hbWUuUXVlc3Rpb259IHNpemU9e0ljb25TaXplLkluaGVyaXR9IC8+XG4gICAgICAgIClcbiAgICAgICl9XG4gICAgPC9Ub29sdGlwPlxuICA8L0JveD5cbik7XG5cbkN1c3RvbVNwZW5kaW5nQ2FwVG9vbHRpcC5wcm9wVHlwZXMgPSB7XG4gIHRvb2x0aXBDb250ZW50VGV4dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgdG9vbHRpcEljb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ib29sXSksXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBCaWdOdW1iZXIgZnJvbSAnYmlnbnVtYmVyLmpzJztcbmltcG9ydCB7IGFkZEhleFByZWZpeCB9IGZyb20gJ2V0aGVyZXVtanMtdXRpbCc7XG5cbmltcG9ydCB7IEkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dHMvaTE4bic7XG5pbXBvcnQgQm94IGZyb20gJy4uLy4uL3VpL2JveCc7XG5pbXBvcnQgRm9ybUZpZWxkIGZyb20gJy4uLy4uL3VpL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgVGV4dCwgQnV0dG9uTGluaywgSWNvbiwgSWNvbk5hbWUgfSBmcm9tICcuLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5pbXBvcnQge1xuICBBbGlnbkl0ZW1zLFxuICBESVNQTEFZLFxuICBGTEVYX0RJUkVDVElPTixcbiAgVEVYVF9BTElHTixcbiAgVGV4dFZhcmlhbnQsXG4gIEp1c3RpZnlDb250ZW50LFxuICBTaXplLFxuICBCTE9DS19TSVpFUyxcbiAgQmFja2dyb3VuZENvbG9yLFxuICBUZXh0Q29sb3IsXG59IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgZ2V0Q3VzdG9tVG9rZW5BbW91bnQgfSBmcm9tICcuLi8uLi8uLi9zZWxlY3RvcnMnO1xuaW1wb3J0IHsgc2V0Q3VzdG9tVG9rZW5BbW91bnQgfSBmcm9tICcuLi8uLi8uLi9kdWNrcy9hcHAvYXBwJztcbmltcG9ydCB7IGNhbGNUb2tlbkFtb3VudCB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9saWIvdHJhbnNhY3Rpb25zLWNvbnRyb2xsZXItdXRpbHMnO1xuaW1wb3J0IHsgaGV4VG9EZWNpbWFsIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvY29udmVyc2lvbi51dGlscyc7XG5pbXBvcnQge1xuICBNQVhfVE9LRU5fQUxMT1dBTkNFX0FNT1VOVCxcbiAgTlVNX1dfT1BUX0RFQ0lNQUxfQ09NTUFfT1JfRE9UX1JFR0VYLFxuICBERUNJTUFMX1JFR0VYLFxufSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL3Rva2Vucyc7XG5pbXBvcnQgeyBOdW1lcmljIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvTnVtZXJpYyc7XG5pbXBvcnQgeyBlc3RpbWF0ZUdhcyB9IGZyb20gJy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IHsgZ2V0Q3VzdG9tVHhQYXJhbXNEYXRhIH0gZnJvbSAnLi4vLi4vLi4vcGFnZXMvY29uZmlybS1hcHByb3ZlL2NvbmZpcm0tYXBwcm92ZS51dGlsJztcbmltcG9ydCB7IHVzZUdhc0ZlZUNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb250ZXh0cy9nYXNGZWUnO1xuaW1wb3J0IHsgQ3VzdG9tU3BlbmRpbmdDYXBUb29sdGlwIH0gZnJvbSAnLi9jdXN0b20tc3BlbmRpbmctY2FwLXRvb2x0aXAnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDdXN0b21TcGVuZGluZ0NhcCh7XG4gIHR4UGFyYW1zLFxuICB0b2tlbk5hbWUsXG4gIGN1cnJlbnRUb2tlbkJhbGFuY2UsXG4gIGRhcHBQcm9wb3NlZFZhbHVlLFxuICBzaXRlT3JpZ2luLFxuICBwYXNzVGhlRXJyb3JUZXh0LFxuICBkZWNpbWFscyxcbiAgc2V0SW5wdXRDaGFuZ2VJblByb2dyZXNzLFxufSkge1xuICBjb25zdCB0ID0gdXNlQ29udGV4dChJMThuQ29udGV4dCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgeyB1cGRhdGVUcmFuc2FjdGlvbiB9ID0gdXNlR2FzRmVlQ29udGV4dCgpO1xuICBjb25zdCBpbnB1dFJlZiA9IHVzZVJlZihudWxsKTtcblxuICBjb25zdCB2YWx1ZSA9IHVzZVNlbGVjdG9yKGdldEN1c3RvbVRva2VuQW1vdW50KTtcblxuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3Nob3dVc2VEZWZhdWx0QnV0dG9uLCBzZXRTaG93VXNlRGVmYXVsdEJ1dHRvbl0gPSB1c2VTdGF0ZShcbiAgICB2YWx1ZSAhPT0gU3RyaW5nKGRhcHBQcm9wb3NlZFZhbHVlKSAmJiB0cnVlLFxuICApO1xuICBjb25zdCBpbnB1dExvZ2ljRW1wdHlTdGF0ZVRleHQgPSB0KCdpbnB1dExvZ2ljRW1wdHlTdGF0ZScpO1xuXG4gIGNvbnN0IHJlcGxhY2VDb21tYVRvRG90ID0gKGlucHV0VmFsdWUpID0+IHtcbiAgICByZXR1cm4gaW5wdXRWYWx1ZS5yZXBsYWNlKC8sL2d1LCAnLicpO1xuICB9O1xuXG4gIGNvbnN0IGRlY0NvbnZlcnNpb25HcmVhdGVyVGhhbiA9ICh0b2tlblZhbHVlLCB0b2tlbkJhbGFuY2UpID0+IHtcbiAgICByZXR1cm4gbmV3IE51bWVyaWMoTnVtYmVyKHJlcGxhY2VDb21tYVRvRG90KHRva2VuVmFsdWUpKSwgMTApLmdyZWF0ZXJUaGFuKFxuICAgICAgTnVtYmVyKHRva2VuQmFsYW5jZSksXG4gICAgICAxMCxcbiAgICApO1xuICB9O1xuXG4gIGNvbnN0IGdldElucHV0VGV4dExvZ2ljID0gKGlucHV0TnVtYmVyKSA9PiB7XG4gICAgaWYgKFxuICAgICAgbmV3IE51bWVyaWMoTnVtYmVyKHJlcGxhY2VDb21tYVRvRG90KGlucHV0TnVtYmVyKSksIDEwKS5sZXNzVGhhbk9yRXF1YWxUbyhcbiAgICAgICAgbmV3IE51bWVyaWMoTnVtYmVyKGN1cnJlbnRUb2tlbkJhbGFuY2UpLCAxMCksXG4gICAgICApXG4gICAgKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjbGFzc05hbWU6ICdjdXN0b20tc3BlbmRpbmctY2FwX19sb3dlclZhbHVlJyxcbiAgICAgICAgZGVzY3JpcHRpb246IHQoJ2lucHV0TG9naWNFcXVhbE9yU21hbGxlck51bWJlcicsIFtcbiAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAga2V5PVwiY3VzdG9tLXNwZW5kaW5nLWNhcFwiXG4gICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U21Cb2xkfVxuICAgICAgICAgICAgYXM9XCJoNlwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJjdXN0b20tc3BlbmRpbmctY2FwX19pbnB1dC12YWx1ZS1hbmQtdG9rZW4tbmFtZVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAge3JlcGxhY2VDb21tYVRvRG90KGlucHV0TnVtYmVyKX0ge3Rva2VuTmFtZX1cbiAgICAgICAgICA8L1RleHQ+LFxuICAgICAgICBdKSxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChkZWNDb252ZXJzaW9uR3JlYXRlclRoYW4oaW5wdXROdW1iZXIsIGN1cnJlbnRUb2tlbkJhbGFuY2UpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjbGFzc05hbWU6ICdjdXN0b20tc3BlbmRpbmctY2FwX19oaWdoZXJWYWx1ZScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiB0KCdpbnB1dExvZ2ljSGlnaGVyTnVtYmVyJyksXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY2xhc3NOYW1lOiAnY3VzdG9tLXNwZW5kaW5nLWNhcF9fZW1wdHlTdGF0ZScsXG4gICAgICBkZXNjcmlwdGlvbjogdCgnaW5wdXRMb2dpY0VtcHR5U3RhdGUnKSxcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IFtjdXN0b21TcGVuZGluZ0NhcFRleHQsIHNldEN1c3RvbVNwZW5kaW5nQ2FwVGV4dF0gPSB1c2VTdGF0ZShcbiAgICBnZXRJbnB1dFRleHRMb2dpYyh2YWx1ZSkuZGVzY3JpcHRpb24sXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gYXN5bmMgKHZhbHVlSW5wdXQpID0+IHtcbiAgICBpZiAoIXR4UGFyYW1zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNldElucHV0Q2hhbmdlSW5Qcm9ncmVzcyh0cnVlKTtcbiAgICBsZXQgc3BlbmRpbmdDYXBFcnJvciA9ICcnO1xuICAgIGNvbnN0IGlucHV0VGV4dExvZ2ljID0gZ2V0SW5wdXRUZXh0TG9naWModmFsdWVJbnB1dCk7XG4gICAgY29uc3QgaW5wdXRUZXh0TG9naWNEZXNjcmlwdGlvbiA9IGlucHV0VGV4dExvZ2ljLmRlc2NyaXB0aW9uO1xuICAgIGNvbnN0IG1hdGNoID0gREVDSU1BTF9SRUdFWC5leGVjKHJlcGxhY2VDb21tYVRvRG90KHZhbHVlSW5wdXQpKTtcbiAgICBpZiAobWF0Y2g/LlsxXT8ubGVuZ3RoID4gZGVjaW1hbHMpIHtcbiAgICAgIHNldElucHV0Q2hhbmdlSW5Qcm9ncmVzcyhmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlSW5wdXQgJiYgIU5VTV9XX09QVF9ERUNJTUFMX0NPTU1BX09SX0RPVF9SRUdFWC50ZXN0KHZhbHVlSW5wdXQpKSB7XG4gICAgICBzcGVuZGluZ0NhcEVycm9yID0gdCgnc3BlbmRpbmdDYXBFcnJvcicpO1xuICAgICAgc2V0Q3VzdG9tU3BlbmRpbmdDYXBUZXh0KHQoJ3NwZW5kaW5nQ2FwRXJyb3JEZXNjcmlwdGlvbicsIFtzaXRlT3JpZ2luXSkpO1xuICAgICAgc2V0RXJyb3Ioc3BlbmRpbmdDYXBFcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEN1c3RvbVNwZW5kaW5nQ2FwVGV4dChpbnB1dFRleHRMb2dpY0Rlc2NyaXB0aW9uKTtcbiAgICAgIHNldEVycm9yKCcnKTtcbiAgICB9XG5cbiAgICBjb25zdCBtYXhUb2tlbkFtb3VudCA9IGNhbGNUb2tlbkFtb3VudChcbiAgICAgIE1BWF9UT0tFTl9BTExPV0FOQ0VfQU1PVU5ULFxuICAgICAgZGVjaW1hbHMsXG4gICAgKTtcbiAgICBpZiAoTnVtYmVyKHZhbHVlSW5wdXQubGVuZ3RoKSA+IDEgJiYgTnVtYmVyKHZhbHVlSW5wdXQpKSB7XG4gICAgICBjb25zdCBjdXN0b21TcGVuZExpbWl0TnVtYmVyID0gbmV3IEJpZ051bWJlcih2YWx1ZUlucHV0KTtcbiAgICAgIGlmIChjdXN0b21TcGVuZExpbWl0TnVtYmVyLmdyZWF0ZXJUaGFuKG1heFRva2VuQW1vdW50KSkge1xuICAgICAgICBzcGVuZGluZ0NhcEVycm9yID0gdCgnc3BlbmRMaW1pdFRvb0xhcmdlJyk7XG4gICAgICAgIHNldEVycm9yKHNwZW5kaW5nQ2FwRXJyb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRpc3BhdGNoKHNldEN1c3RvbVRva2VuQW1vdW50KFN0cmluZyh2YWx1ZUlucHV0KSkpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG5ld0RhdGEgPSBnZXRDdXN0b21UeFBhcmFtc0RhdGEodHhQYXJhbXMuZGF0YSwge1xuICAgICAgICBjdXN0b21QZXJtaXNzaW9uQW1vdW50OiB2YWx1ZUlucHV0LFxuICAgICAgICBkZWNpbWFscyxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgeyBmcm9tLCB0bywgdmFsdWU6IHR4VmFsdWUgfSA9IHR4UGFyYW1zO1xuICAgICAgY29uc3QgZXN0aW1hdGVkR2FzTGltaXQgPSBhd2FpdCBlc3RpbWF0ZUdhcyh7XG4gICAgICAgIGZyb20sXG4gICAgICAgIHRvLFxuICAgICAgICB2YWx1ZTogdHhWYWx1ZSxcbiAgICAgICAgZGF0YTogbmV3RGF0YSxcbiAgICAgIH0pO1xuICAgICAgaWYgKGVzdGltYXRlZEdhc0xpbWl0KSB7XG4gICAgICAgIGF3YWl0IHVwZGF0ZVRyYW5zYWN0aW9uKHtcbiAgICAgICAgICBnYXNMaW1pdDogaGV4VG9EZWNpbWFsKGFkZEhleFByZWZpeChlc3RpbWF0ZWRHYXNMaW1pdCkpLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChleHApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIHRyeWluZyB0byB1cGRhdGUgZ2FzIGxpbWl0JywgZXhwKTtcbiAgICB9XG4gICAgc2V0SW5wdXRDaGFuZ2VJblByb2dyZXNzKGZhbHNlKTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh2YWx1ZSAhPT0gU3RyaW5nKGRhcHBQcm9wb3NlZFZhbHVlKSkge1xuICAgICAgc2V0U2hvd1VzZURlZmF1bHRCdXR0b24odHJ1ZSk7XG4gICAgfVxuICB9LCBbdmFsdWUsIGRhcHBQcm9wb3NlZFZhbHVlXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBwYXNzVGhlRXJyb3JUZXh0KGVycm9yKTtcbiAgfSwgW2Vycm9yLCBwYXNzVGhlRXJyb3JUZXh0XSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCkge1xuICAgICAgaW5wdXRSZWYuY3VycmVudC5mb2N1cyh7XG4gICAgICAgIHByZXZlbnRTY3JvbGw6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbaW5wdXRSZWYuY3VycmVudF0pO1xuXG4gIGNvbnN0IGNob29zZVRvb2x0aXBDb250ZW50VGV4dCA9IGRlY0NvbnZlcnNpb25HcmVhdGVyVGhhbihcbiAgICB2YWx1ZSxcbiAgICBjdXJyZW50VG9rZW5CYWxhbmNlLFxuICApXG4gICAgPyB0KCd3YXJuaW5nVG9vbHRpcFRleHQnLCBbXG4gICAgICAgIDxUZXh0XG4gICAgICAgICAga2V5PVwidG9vbHRpcC10ZXh0XCJcbiAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U21Cb2xkfVxuICAgICAgICAgIGFzPVwiaDZcIlxuICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IuZXJyb3JEZWZhdWx0fVxuICAgICAgICA+XG4gICAgICAgICAgPEljb24gbmFtZT17SWNvbk5hbWUuV2FybmluZ30gLz4ge3QoJ2JlQ2FyZWZ1bCcpfVxuICAgICAgICA8L1RleHQ+LFxuICAgICAgXSlcbiAgICA6IHQoJ2lucHV0TG9naWNFbXB0eVN0YXRlJyk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEJveFxuICAgICAgICBjbGFzc05hbWU9XCJjdXN0b20tc3BlbmRpbmctY2FwXCJcbiAgICAgICAgYm9yZGVyUmFkaXVzPXtTaXplLlNNfVxuICAgICAgICBwYWRkaW5nVG9wPXsyfVxuICAgICAgICBwYWRkaW5nUmlnaHQ9ezZ9XG4gICAgICAgIHBhZGRpbmdMZWZ0PXs2fVxuICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgIGFsaWduSXRlbXM9e0FsaWduSXRlbXMuZmxleFN0YXJ0fVxuICAgICAgICBmbGV4RGlyZWN0aW9uPXtGTEVYX0RJUkVDVElPTi5DT0xVTU59XG4gICAgICAgIGJhY2tncm91bmRDb2xvcj17QmFja2dyb3VuZENvbG9yLmJhY2tncm91bmRBbHRlcm5hdGl2ZX1cbiAgICAgICAgZ2FwPXsyfVxuICAgICAgPlxuICAgICAgICA8Qm94XG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ9e0p1c3RpZnlDb250ZW50LmNlbnRlcn1cbiAgICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkJMT0NLfVxuICAgICAgICAgIGNsYXNzTmFtZT1cImN1c3RvbS1zcGVuZGluZy1jYXBfX2lucHV0XCJcbiAgICAgICAgPlxuICAgICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgaHRtbEZvcj17XG4gICAgICAgICAgICAgIGRlY0NvbnZlcnNpb25HcmVhdGVyVGhhbih2YWx1ZSwgY3VycmVudFRva2VuQmFsYW5jZSlcbiAgICAgICAgICAgICAgICA/ICdjdXN0b20tc3BlbmRpbmctY2FwLWlucHV0LXZhbHVlJ1xuICAgICAgICAgICAgICAgIDogJ2N1c3RvbS1zcGVuZGluZy1jYXAnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEZvcm1GaWVsZFxuICAgICAgICAgICAgICBpbnB1dFJlZj17aW5wdXRSZWZ9XG4gICAgICAgICAgICAgIGRhdGFUZXN0SWQ9XCJjdXN0b20tc3BlbmRpbmctY2FwLWlucHV0XCJcbiAgICAgICAgICAgICAgd3JhcHBpbmdMYWJlbFByb3BzPXt7IGFzOiAnZGl2JyB9fVxuICAgICAgICAgICAgICBpZD17XG4gICAgICAgICAgICAgICAgZGVjQ29udmVyc2lvbkdyZWF0ZXJUaGFuKHZhbHVlLCBjdXJyZW50VG9rZW5CYWxhbmNlKVxuICAgICAgICAgICAgICAgICAgPyAnY3VzdG9tLXNwZW5kaW5nLWNhcC1pbnB1dC12YWx1ZSdcbiAgICAgICAgICAgICAgICAgIDogJ2N1c3RvbS1zcGVuZGluZy1jYXAnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgVG9vbHRpcEN1c3RvbUNvbXBvbmVudD17XG4gICAgICAgICAgICAgICAgPEN1c3RvbVNwZW5kaW5nQ2FwVG9vbHRpcFxuICAgICAgICAgICAgICAgICAgdG9vbHRpcENvbnRlbnRUZXh0PXtcbiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUNvbW1hVG9Eb3QodmFsdWUpID8gY2hvb3NlVG9vbHRpcENvbnRlbnRUZXh0IDogJydcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHRvb2x0aXBJY29uPXtcbiAgICAgICAgICAgICAgICAgICAgcmVwbGFjZUNvbW1hVG9Eb3QodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgPyBkZWNDb252ZXJzaW9uR3JlYXRlclRoYW4odmFsdWUsIGN1cnJlbnRUb2tlbkJhbGFuY2UpXG4gICAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgdGl0bGVUZXh0PXt0KCdjdXN0b21TcGVuZGluZ0NhcCcpfVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dCgnZW50ZXJBTnVtYmVyJyl9XG4gICAgICAgICAgICAgIGVycm9yPXtlcnJvcn1cbiAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICAgICAgICB0aXRsZURldGFpbD17XG4gICAgICAgICAgICAgICAgc2hvd1VzZURlZmF1bHRCdXR0b24gJiYgKFxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbkxpbmtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZT17U2l6ZS5hdXRvfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICBzZXRTaG93VXNlRGVmYXVsdEJ1dHRvbihmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQ2hhbmdlKGRhcHBQcm9wb3NlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge3QoJ3VzZURlZmF1bHQnKX1cbiAgICAgICAgICAgICAgICAgIDwvQnV0dG9uTGluaz5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGl0bGVEZXRhaWxXcmFwcGVyUHJvcHM9e3sgbWFyZ2luQm90dG9tOiAyLCBtYXJnaW5SaWdodDogMCB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgd2lkdGg9e0JMT0NLX1NJWkVTLk1BWH1cbiAgICAgICAgICAgICAgbWFyZ2luTGVmdD1cImF1dG9cIlxuICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ9ezR9XG4gICAgICAgICAgICAgIHBhZGRpbmdCb3R0b209ezJ9XG4gICAgICAgICAgICAgIHRleHRBbGlnbj17VEVYVF9BTElHTi5FTkR9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcygnY3VzdG9tLXNwZW5kaW5nLWNhcF9fbWF4Jywge1xuICAgICAgICAgICAgICAgICdjdXN0b20tc3BlbmRpbmctY2FwX19tYXgtLXdpdGgtZXJyb3ItbWVzc2FnZSc6IGVycm9yLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPEJ1dHRvbkxpbmtcbiAgICAgICAgICAgICAgICBzaXplPXtTaXplLmF1dG99XG4gICAgICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgIGhhbmRsZUNoYW5nZShjdXJyZW50VG9rZW5CYWxhbmNlKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3QoJ21heCcpfVxuICAgICAgICAgICAgICA8L0J1dHRvbkxpbms+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdjdXN0b20tc3BlbmRpbmctY2FwX19kZXNjcmlwdGlvbicsIHtcbiAgICAgICAgICAgICAgICAnY3VzdG9tLXNwZW5kaW5nLWNhcF9fZGVzY3JpcHRpb24tLXdpdGgtZXJyb3ItbWVzc2FnZSc6IGVycm9yLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPFRleHRcbiAgICAgICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHREZWZhdWx0fVxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wPXsyfVxuICAgICAgICAgICAgICAgIHBhZGRpbmdCb3R0b209ezJ9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7cmVwbGFjZUNvbW1hVG9Eb3QodmFsdWUpXG4gICAgICAgICAgICAgICAgICA/IGN1c3RvbVNwZW5kaW5nQ2FwVGV4dFxuICAgICAgICAgICAgICAgICAgOiBpbnB1dExvZ2ljRW1wdHlTdGF0ZVRleHR9XG4gICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvQm94PlxuICAgICAgPC9Cb3g+XG4gICAgPC8+XG4gICk7XG59XG5cbkN1c3RvbVNwZW5kaW5nQ2FwLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRyYW5zYWN0aW9uIHBhcmFtc1xuICAgKi9cbiAgdHhQYXJhbXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIERpc3BsYXllZCB0aGUgdG9rZW4gbmFtZSBjdXJyZW50bHkgdHJhY2tlZCBpbiBkZXNjcmlwdGlvbiByZWxhdGVkIHRvIHRoZSBpbnB1dCBzdGF0ZVxuICAgKi9cbiAgdG9rZW5OYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgdG9rZW4gYmFsYW5jZSBvZiB0aGUgdG9rZW5cbiAgICovXG4gIGN1cnJlbnRUb2tlbkJhbGFuY2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgZGFwcCBzdWdnZXN0ZWQgYW1vdW50XG4gICAqL1xuICBkYXBwUHJvcG9zZWRWYWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBvcmlnaW4gb2YgdGhlIHNpdGUgZ2VuZXJhbGx5IHRoZSBVUkxcbiAgICovXG4gIHNpdGVPcmlnaW46IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBQYXJlbnQgY29tcG9uZW50J3MgY2FsbGJhY2sgZnVuY3Rpb24gcGFzc2VkIGluIG9yZGVyIHRvIGdldCB0aGUgZXJyb3IgdGV4dFxuICAgKi9cbiAgcGFzc1RoZUVycm9yVGV4dDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgZGVjaW1hbHNcbiAgICovXG4gIGRlY2ltYWxzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVXBkYXRpbmcgaW5wdXQgc3RhdGUgdG8gY2hhbmdpbmdcbiAgICovXG4gIHNldElucHV0Q2hhbmdlSW5Qcm9ncmVzczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VDb3B5VG9DbGlwYm9hcmQgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2VDb3B5VG9DbGlwYm9hcmQnO1xuXG5pbXBvcnQgQm94IGZyb20gJy4uLy4uLy4uL3VpL2JveCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uLy4uL3VpL2J1dHRvbic7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuLi8uLi8uLi91aS90b29sdGlwJztcblxuaW1wb3J0IHtcbiAgRElTUExBWSxcbiAgVGV4dENvbG9yLFxuICBUZXh0VmFyaWFudCxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5cbmltcG9ydCB7IHNob3J0ZW5BZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy91dGlscy91dGlsJztcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5cbmNvbnN0IERldGVjdGVkVG9rZW5BZGRyZXNzID0gKHsgdG9rZW5BZGRyZXNzIH0pID0+IHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IFtjb3BpZWQsIGhhbmRsZUNvcHldID0gdXNlQ29weVRvQ2xpcGJvYXJkKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94IGRpc3BsYXk9e0RJU1BMQVkuSU5MSU5FX0ZMRVh9IGNsYXNzTmFtZT1cImRldGVjdGVkLXRva2VuLWFkZHJlc3NcIj5cbiAgICAgIDxUZXh0IHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX0gYXM9XCJoNlwiIGNvbG9yPXtUZXh0Q29sb3IudGV4dERlZmF1bHR9PlxuICAgICAgICB7YCR7dCgndG9rZW5BZGRyZXNzJyl9OmB9XG4gICAgICA8L1RleHQ+XG4gICAgICA8VGV4dFxuICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219XG4gICAgICAgIGFzPVwiaDZcIlxuICAgICAgICBjb2xvcj17VGV4dENvbG9yLnByaW1hcnlEZWZhdWx0fVxuICAgICAgICBtYXJnaW5MZWZ0PXsyfVxuICAgICAgICBtYXJnaW5SaWdodD17Mn1cbiAgICAgID5cbiAgICAgICAge3Nob3J0ZW5BZGRyZXNzKHRva2VuQWRkcmVzcyl9XG4gICAgICA8L1RleHQ+XG4gICAgICA8VG9vbHRpcFxuICAgICAgICBwb3NpdGlvbj1cImJvdHRvbVwiXG4gICAgICAgIHRpdGxlPXtjb3BpZWQgPyB0KCdjb3BpZWRFeGNsYW1hdGlvbicpIDogdCgnY29weVRvQ2xpcGJvYXJkJyl9XG4gICAgICA+XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICB0eXBlPVwibGlua1wiXG4gICAgICAgICAgY2xhc3NOYW1lPVwiZGV0ZWN0ZWQtdG9rZW4tYWRkcmVzc19fY29weS1saW5rXCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBoYW5kbGVDb3B5KHRva2VuQWRkcmVzcyk7XG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNvcHlcIiAvPlxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvVG9vbHRpcD5cbiAgICA8L0JveD5cbiAgKTtcbn07XG5cbkRldGVjdGVkVG9rZW5BZGRyZXNzLnByb3BUeXBlcyA9IHtcbiAgdG9rZW5BZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRGV0ZWN0ZWRUb2tlbkFkZHJlc3M7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcblxuaW1wb3J0IEJveCBmcm9tICcuLi8uLi8uLi91aS9ib3gnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi8uLi8uLi91aS9idXR0b24nO1xuaW1wb3J0IHtcbiAgRElTUExBWSxcbiAgRm9udFdlaWdodCxcbiAgVGV4dFZhcmlhbnQsXG59IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcblxuY29uc3QgTlVNQkVSX09GX0FHR1JFR0FUT1JTX1RPX0RJU1BMQVkgPSAyO1xuXG5jb25zdCBEZXRlY3RlZFRva2VuQWdncmVnYXRvcnMgPSAoeyBhZ2dyZWdhdG9ycyB9KSA9PiB7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBjb25zdCBudW1PZkhpZGRlbkFnZ3JlZ2F0b3JzID1cbiAgICBwYXJzZUludChhZ2dyZWdhdG9ycy5sZW5ndGgsIDEwKSAtIE5VTUJFUl9PRl9BR0dSRUdBVE9SU19UT19ESVNQTEFZO1xuICBjb25zdCBbZGlzcGxheU1vcmUsIHNldERpc3BsYXlNb3JlXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3ggZGlzcGxheT17RElTUExBWS5JTkxJTkVfRkxFWH0gY2xhc3NOYW1lPVwiZGV0ZWN0ZWQtdG9rZW4tYWdncmVnYXRvcnNcIj5cbiAgICAgIDxUZXh0IHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX0gYXM9XCJoNlwiIGZvbnRXZWlnaHQ9e0ZvbnRXZWlnaHQuTm9ybWFsfT5cbiAgICAgICAge3QoJ2Zyb21Ub2tlbkxpc3RzJywgW1xuICAgICAgICAgIG51bU9mSGlkZGVuQWdncmVnYXRvcnMgPiAwICYmICFkaXNwbGF5TW9yZSA/IChcbiAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICAgICAgYXM9XCJoNlwiXG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ9e0ZvbnRXZWlnaHQuTm9ybWFsfVxuICAgICAgICAgICAgICBrZXk9XCJkZXRlY3RlZC10b2tlbi1hZ2dyZ2F0b3JzLXdpdGgtbW9yZVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtgJHthZ2dyZWdhdG9yc1xuICAgICAgICAgICAgICAgIC5zbGljZSgwLCBOVU1CRVJfT0ZfQUdHUkVHQVRPUlNfVE9fRElTUExBWSlcbiAgICAgICAgICAgICAgICAuam9pbignLCAnKX1gfVxuICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgdHlwZT1cImxpbmtcIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImRldGVjdGVkLXRva2VuLWFnZ3JlZ2F0b3JzX19saW5rXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXREaXNwbGF5TW9yZSh0cnVlKX1cbiAgICAgICAgICAgICAgICBrZXk9XCJkZXRlY3RlZC10b2tlbi1hZ2dyZ2F0b3JzLWxpbmtcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3QoJ3BsdXNYTW9yZScsIFtudW1PZkhpZGRlbkFnZ3JlZ2F0b3JzXSl9XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219XG4gICAgICAgICAgICAgIGFzPVwiaDZcIlxuICAgICAgICAgICAgICBmb250V2VpZ2h0PXtGb250V2VpZ2h0Lk5vcm1hbH1cbiAgICAgICAgICAgICAga2V5PVwiZGV0ZWN0ZWQtdG9rZW4tYWdncmdhdG9ycy13aXRob3V0LW1vcmVcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7YCR7YWdncmVnYXRvcnMuam9pbignLCAnKX0uYH1cbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICApLFxuICAgICAgICBdKX1cbiAgICAgIDwvVGV4dD5cbiAgICA8L0JveD5cbiAgKTtcbn07XG5cbkRldGVjdGVkVG9rZW5BZ2dyZWdhdG9ycy5wcm9wVHlwZXMgPSB7XG4gIGFnZ3JlZ2F0b3JzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERldGVjdGVkVG9rZW5BZ2dyZWdhdG9ycztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCBCb3ggZnJvbSAnLi4vLi4vLi4vdWkvYm94JztcbmltcG9ydCBJZGVudGljb24gZnJvbSAnLi4vLi4vLi4vdWkvaWRlbnRpY29uJztcbmltcG9ydCBEZXRlY3RlZFRva2VuVmFsdWVzIGZyb20gJy4uL2RldGVjdGVkLXRva2VuLXZhbHVlcy9kZXRlY3RlZC10b2tlbi12YWx1ZXMnO1xuaW1wb3J0IERldGVjdGVkVG9rZW5BZGRyZXNzIGZyb20gJy4uL2RldGVjdGVkLXRva2VuLWFkZHJlc3MvZGV0ZWN0ZWQtdG9rZW4tYWRkcmVzcyc7XG5pbXBvcnQgRGV0ZWN0ZWRUb2tlbkFnZ3JlZ2F0b3JzIGZyb20gJy4uL2RldGVjdGVkLXRva2VuLWFnZ3JlZ2F0b3JzL2RldGVjdGVkLXRva2VuLWFnZ3JlZ2F0b3JzJztcbmltcG9ydCB7IERJU1BMQVkgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IGdldFRva2VuTGlzdCB9IGZyb20gJy4uLy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5cbmNvbnN0IERldGVjdGVkVG9rZW5EZXRhaWxzID0gKHtcbiAgdG9rZW4sXG4gIGhhbmRsZVRva2VuU2VsZWN0aW9uLFxuICB0b2tlbnNMaXN0RGV0ZWN0ZWQsXG59KSA9PiB7XG4gIGNvbnN0IHRva2VuTGlzdCA9IHVzZVNlbGVjdG9yKGdldFRva2VuTGlzdCk7XG4gIGNvbnN0IHRva2VuRGF0YSA9IHRva2VuTGlzdFt0b2tlbi5hZGRyZXNzPy50b0xvd2VyQ2FzZSgpXTtcblxuICByZXR1cm4gKFxuICAgIDxCb3hcbiAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgIGNsYXNzTmFtZT1cImRldGVjdGVkLXRva2VuLWRldGFpbHNcIlxuICAgICAgbWFyZ2luQm90dG9tPXs0fVxuICAgID5cbiAgICAgIDxJZGVudGljb25cbiAgICAgICAgY2xhc3NOYW1lPVwiZGV0ZWN0ZWQtdG9rZW4tZGV0YWlsc19faWRlbnRpY29uXCJcbiAgICAgICAgYWRkcmVzcz17dG9rZW4uYWRkcmVzc31cbiAgICAgICAgZGlhbWV0ZXI9ezQwfVxuICAgICAgLz5cbiAgICAgIDxCb3hcbiAgICAgICAgZGlzcGxheT17RElTUExBWS5HUklEfVxuICAgICAgICBtYXJnaW5MZWZ0PXsyfVxuICAgICAgICBjbGFzc05hbWU9XCJkZXRlY3RlZC10b2tlbi1kZXRhaWxzX19kYXRhXCJcbiAgICAgID5cbiAgICAgICAgPERldGVjdGVkVG9rZW5WYWx1ZXNcbiAgICAgICAgICB0b2tlbj17dG9rZW59XG4gICAgICAgICAgaGFuZGxlVG9rZW5TZWxlY3Rpb249e2hhbmRsZVRva2VuU2VsZWN0aW9ufVxuICAgICAgICAgIHRva2Vuc0xpc3REZXRlY3RlZD17dG9rZW5zTGlzdERldGVjdGVkfVxuICAgICAgICAvPlxuICAgICAgICA8RGV0ZWN0ZWRUb2tlbkFkZHJlc3MgdG9rZW5BZGRyZXNzPXt0b2tlbi5hZGRyZXNzfSAvPlxuICAgICAgICB7dG9rZW5EYXRhPy5hZ2dyZWdhdG9ycy5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICA8RGV0ZWN0ZWRUb2tlbkFnZ3JlZ2F0b3JzIGFnZ3JlZ2F0b3JzPXt0b2tlbkRhdGE/LmFnZ3JlZ2F0b3JzfSAvPlxuICAgICAgICApfVxuICAgICAgPC9Cb3g+XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuXG5EZXRlY3RlZFRva2VuRGV0YWlscy5wcm9wVHlwZXMgPSB7XG4gIHRva2VuOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBkZWNpbWFsczogUHJvcFR5cGVzLm51bWJlcixcbiAgICBzeW1ib2w6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaWNvblVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhZ2dyZWdhdG9yczogUHJvcFR5cGVzLmFycmF5LFxuICB9KSxcbiAgaGFuZGxlVG9rZW5TZWxlY3Rpb246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHRva2Vuc0xpc3REZXRlY3RlZDogUHJvcFR5cGVzLm9iamVjdCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERldGVjdGVkVG9rZW5EZXRhaWxzO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuXG5pbXBvcnQgUG9wb3ZlciBmcm9tICcuLi8uLi8uLi91aS9wb3BvdmVyJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vLi4vdWkvYnV0dG9uJztcbmltcG9ydCB7IFRleHRWYXJpYW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50LWxpYnJhcnknO1xuXG5jb25zdCBEZXRlY3RlZFRva2VuSWdub3JlZFBvcG92ZXIgPSAoe1xuICBwYXJ0aWFsbHlJZ25vcmVEZXRlY3RlZFRva2VucyxcbiAgb25DYW5jZWxJZ25vcmUsXG4gIGhhbmRsZUNsZWFyVG9rZW5zU2VsZWN0aW9uLFxufSkgPT4ge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcblxuICBjb25zdCBmb290ZXIgPSAoXG4gICAgPD5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgY2xhc3NOYW1lPVwiZGV0ZWN0ZWQtdG9rZW4taWdub3JlZC1wb3BvdmVyX19pZ25vcmUtYnV0dG9uXCJcbiAgICAgICAgdHlwZT1cInNlY29uZGFyeVwiXG4gICAgICAgIG9uQ2xpY2s9e29uQ2FuY2VsSWdub3JlfVxuICAgICAgPlxuICAgICAgICB7dCgnY2FuY2VsJyl9XG4gICAgICA8L0J1dHRvbj5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgY2xhc3NOYW1lPVwiZGV0ZWN0ZWQtdG9rZW4taWdub3JlZC1wb3BvdmVyX19pbXBvcnQtYnV0dG9uXCJcbiAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICBvbkNsaWNrPXtoYW5kbGVDbGVhclRva2Vuc1NlbGVjdGlvbn1cbiAgICAgID5cbiAgICAgICAge3QoJ2NvbmZpcm0nKX1cbiAgICAgIDwvQnV0dG9uPlxuICAgIDwvPlxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPFBvcG92ZXJcbiAgICAgIHRpdGxlPXtcbiAgICAgICAgcGFydGlhbGx5SWdub3JlRGV0ZWN0ZWRUb2tlbnNcbiAgICAgICAgICA/IHQoJ2ltcG9ydFNlbGVjdGVkVG9rZW5zJylcbiAgICAgICAgICA6IHQoJ2FyZVlvdVN1cmUnKVxuICAgICAgfVxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdkZXRlY3RlZC10b2tlbi1pZ25vcmVkLXBvcG92ZXInLCB7XG4gICAgICAgICdkZXRlY3RlZC10b2tlbi1pZ25vcmVkLXBvcG92ZXItLWltcG9ydCc6IHBhcnRpYWxseUlnbm9yZURldGVjdGVkVG9rZW5zLFxuICAgICAgICAnZGV0ZWN0ZWQtdG9rZW4taWdub3JlZC1wb3BvdmVyLS1pZ25vcmUnOlxuICAgICAgICAgICFwYXJ0aWFsbHlJZ25vcmVEZXRlY3RlZFRva2VucyxcbiAgICAgIH0pfVxuICAgICAgZm9vdGVyPXtmb290ZXJ9XG4gICAgPlxuICAgICAgPFRleHRcbiAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtfVxuICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgbWFyZ2luVG9wPXswfVxuICAgICAgICBtYXJnaW5SaWdodD17NX1cbiAgICAgICAgbWFyZ2luQm90dG9tPXs3fVxuICAgICAgICBtYXJnaW5MZWZ0PXs1fVxuICAgICAgPlxuICAgICAgICB7cGFydGlhbGx5SWdub3JlRGV0ZWN0ZWRUb2tlbnNcbiAgICAgICAgICA/IHQoJ2ltcG9ydFNlbGVjdGVkVG9rZW5zRGVzY3JpcHRpb24nKVxuICAgICAgICAgIDogdCgnaWdub3JlVG9rZW5XYXJuaW5nJyl9XG4gICAgICA8L1RleHQ+XG4gICAgPC9Qb3BvdmVyPlxuICApO1xufTtcblxuRGV0ZWN0ZWRUb2tlbklnbm9yZWRQb3BvdmVyLnByb3BUeXBlcyA9IHtcbiAgcGFydGlhbGx5SWdub3JlRGV0ZWN0ZWRUb2tlbnM6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIG9uQ2FuY2VsSWdub3JlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBoYW5kbGVDbGVhclRva2Vuc1NlbGVjdGlvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERldGVjdGVkVG9rZW5JZ25vcmVkUG9wb3ZlcjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7IE1ldGFNZXRyaWNzQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbnRleHRzL21ldGFtZXRyaWNzJztcbmltcG9ydCB7XG4gIE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeSxcbiAgTWV0YU1ldHJpY3NFdmVudE5hbWUsXG4gIE1ldGFNZXRyaWNzVG9rZW5FdmVudFNvdXJjZSxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9tZXRhbWV0cmljcyc7XG5pbXBvcnQge1xuICBnZXRDdXJyZW50Q2hhaW5JZCxcbiAgZ2V0RGV0ZWN0ZWRUb2tlbnNJbkN1cnJlbnROZXR3b3JrLFxufSBmcm9tICcuLi8uLi8uLi8uLi9zZWxlY3RvcnMnO1xuXG5pbXBvcnQgUG9wb3ZlciBmcm9tICcuLi8uLi8uLi91aS9wb3BvdmVyJztcbmltcG9ydCBCb3ggZnJvbSAnLi4vLi4vLi4vdWkvYm94JztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vLi4vdWkvYnV0dG9uJztcbmltcG9ydCBEZXRlY3RlZFRva2VuRGV0YWlscyBmcm9tICcuLi9kZXRlY3RlZC10b2tlbi1kZXRhaWxzL2RldGVjdGVkLXRva2VuLWRldGFpbHMnO1xuXG5jb25zdCBEZXRlY3RlZFRva2VuU2VsZWN0aW9uUG9wb3ZlciA9ICh7XG4gIHRva2Vuc0xpc3REZXRlY3RlZCxcbiAgaGFuZGxlVG9rZW5TZWxlY3Rpb24sXG4gIG9uSW1wb3J0LFxuICBvbklnbm9yZUFsbCxcbiAgc2V0U2hvd0RldGVjdGVkVG9rZW5zLFxuICBzb3J0aW5nQmFzZWRPblRva2VuU2VsZWN0aW9uLFxufSkgPT4ge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcbiAgY29uc3QgdHJhY2tFdmVudCA9IHVzZUNvbnRleHQoTWV0YU1ldHJpY3NDb250ZXh0KTtcblxuICBjb25zdCBjaGFpbklkID0gdXNlU2VsZWN0b3IoZ2V0Q3VycmVudENoYWluSWQpO1xuXG4gIGNvbnN0IGRldGVjdGVkVG9rZW5zID0gdXNlU2VsZWN0b3IoZ2V0RGV0ZWN0ZWRUb2tlbnNJbkN1cnJlbnROZXR3b3JrKTtcbiAgY29uc3QgeyBzZWxlY3RlZDogc2VsZWN0ZWRUb2tlbnMgPSBbXSB9ID1cbiAgICBzb3J0aW5nQmFzZWRPblRva2VuU2VsZWN0aW9uKHRva2Vuc0xpc3REZXRlY3RlZCk7XG4gIGNvbnN0IG51bU9mVG9rZW5zSW1wb3J0aW5nID1cbiAgICBzZWxlY3RlZFRva2Vucy5sZW5ndGggPT09IGRldGVjdGVkVG9rZW5zLmxlbmd0aFxuICAgICAgPyBgQWxsYFxuICAgICAgOiBgKCR7c2VsZWN0ZWRUb2tlbnMubGVuZ3RofSlgO1xuXG4gIGNvbnN0IG9uQ2xvc2UgPSAoKSA9PiB7XG4gICAgc2V0U2hvd0RldGVjdGVkVG9rZW5zKGZhbHNlKTtcbiAgICBjb25zdCBldmVudFRva2Vuc0RldGFpbHMgPSBkZXRlY3RlZFRva2Vucy5tYXAoXG4gICAgICAoeyBhZGRyZXNzLCBzeW1ib2wgfSkgPT4gYCR7c3ltYm9sfSAtICR7YWRkcmVzc31gLFxuICAgICk7XG4gICAgdHJhY2tFdmVudCh7XG4gICAgICBldmVudDogTWV0YU1ldHJpY3NFdmVudE5hbWUuVG9rZW5JbXBvcnRDYW5jZWxlZCxcbiAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuV2FsbGV0LFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBzb3VyY2VfY29ubmVjdGlvbl9tZXRob2Q6IE1ldGFNZXRyaWNzVG9rZW5FdmVudFNvdXJjZS5EZXRlY3RlZCxcbiAgICAgICAgY2hhaW5faWQ6IGNoYWluSWQsXG4gICAgICAgIHRva2VuczogZXZlbnRUb2tlbnNEZXRhaWxzLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBmb290ZXIgPSAoXG4gICAgPD5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgY2xhc3NOYW1lPVwiZGV0ZWN0ZWQtdG9rZW4tc2VsZWN0aW9uLXBvcG92ZXJfX2lnbm9yZS1idXR0b25cIlxuICAgICAgICB0eXBlPVwic2Vjb25kYXJ5XCJcbiAgICAgICAgb25DbGljaz17KCkgPT4gb25JZ25vcmVBbGwoKX1cbiAgICAgID5cbiAgICAgICAge3QoJ2lnbm9yZUFsbCcpfVxuICAgICAgPC9CdXR0b24+XG4gICAgICA8QnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT1cImRldGVjdGVkLXRva2VuLXNlbGVjdGlvbi1wb3BvdmVyX19pbXBvcnQtYnV0dG9uXCJcbiAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICBvbkNsaWNrPXtvbkltcG9ydH1cbiAgICAgICAgZGlzYWJsZWQ9e3NlbGVjdGVkVG9rZW5zLmxlbmd0aCA9PT0gMH1cbiAgICAgID5cbiAgICAgICAge3QoJ2ltcG9ydFdpdGhDb3VudCcsIFtudW1PZlRva2Vuc0ltcG9ydGluZ10pfVxuICAgICAgPC9CdXR0b24+XG4gICAgPC8+XG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8UG9wb3ZlclxuICAgICAgY2xhc3NOYW1lPVwiZGV0ZWN0ZWQtdG9rZW4tc2VsZWN0aW9uLXBvcG92ZXJcIlxuICAgICAgdGl0bGU9e1xuICAgICAgICBkZXRlY3RlZFRva2Vucy5sZW5ndGggPT09IDFcbiAgICAgICAgICA/IHQoJ3Rva2VuRm91bmRUaXRsZScpXG4gICAgICAgICAgOiB0KCd0b2tlbnNGb3VuZFRpdGxlJywgW2RldGVjdGVkVG9rZW5zLmxlbmd0aF0pXG4gICAgICB9XG4gICAgICBvbkNsb3NlPXtvbkNsb3NlfVxuICAgICAgZm9vdGVyPXtmb290ZXJ9XG4gICAgPlxuICAgICAgPEJveCBtYXJnaW49ezN9PlxuICAgICAgICB7ZGV0ZWN0ZWRUb2tlbnMubWFwKCh0b2tlbiwgaW5kZXgpID0+IHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPERldGVjdGVkVG9rZW5EZXRhaWxzXG4gICAgICAgICAgICAgIGtleT17aW5kZXh9XG4gICAgICAgICAgICAgIHRva2VuPXt0b2tlbn1cbiAgICAgICAgICAgICAgaGFuZGxlVG9rZW5TZWxlY3Rpb249e2hhbmRsZVRva2VuU2VsZWN0aW9ufVxuICAgICAgICAgICAgICB0b2tlbnNMaXN0RGV0ZWN0ZWQ9e3Rva2Vuc0xpc3REZXRlY3RlZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKTtcbiAgICAgICAgfSl9XG4gICAgICA8L0JveD5cbiAgICA8L1BvcG92ZXI+XG4gICk7XG59O1xuXG5EZXRlY3RlZFRva2VuU2VsZWN0aW9uUG9wb3Zlci5wcm9wVHlwZXMgPSB7XG4gIHRva2Vuc0xpc3REZXRlY3RlZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgaGFuZGxlVG9rZW5TZWxlY3Rpb246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uSWdub3JlQWxsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkltcG9ydDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc2V0U2hvd0RldGVjdGVkVG9rZW5zOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzb3J0aW5nQmFzZWRPblRva2VuU2VsZWN0aW9uOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRGV0ZWN0ZWRUb2tlblNlbGVjdGlvblBvcG92ZXI7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IEJveCBmcm9tICcuLi8uLi8uLi91aS9ib3gnO1xuaW1wb3J0IENoZWNrQm94IGZyb20gJy4uLy4uLy4uL3VpL2NoZWNrLWJveCc7XG5cbmltcG9ydCB7XG4gIERJU1BMQVksXG4gIFRleHRDb2xvcixcbiAgVGV4dFZhcmlhbnQsXG59IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgdXNlVG9rZW5UcmFja2VyIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlVG9rZW5UcmFja2VyJztcbmltcG9ydCB7IHVzZVRva2VuRmlhdEFtb3VudCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZVRva2VuRmlhdEFtb3VudCc7XG5pbXBvcnQgeyBnZXRVc2VDdXJyZW5jeVJhdGVDaGVjayB9IGZyb20gJy4uLy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50LWxpYnJhcnknO1xuXG5jb25zdCBEZXRlY3RlZFRva2VuVmFsdWVzID0gKHtcbiAgdG9rZW4sXG4gIGhhbmRsZVRva2VuU2VsZWN0aW9uLFxuICB0b2tlbnNMaXN0RGV0ZWN0ZWQsXG59KSA9PiB7XG4gIGNvbnN0IFt0b2tlblNlbGVjdGlvbiwgc2V0VG9rZW5TZWxlY3Rpb25dID0gdXNlU3RhdGUoKCkgPT4ge1xuICAgIHJldHVybiB0b2tlbnNMaXN0RGV0ZWN0ZWRbdG9rZW4uYWRkcmVzc10/LnNlbGVjdGVkO1xuICB9KTtcblxuICBjb25zdCB7IHRva2Vuc1dpdGhCYWxhbmNlcyB9ID0gdXNlVG9rZW5UcmFja2VyKFt0b2tlbl0pO1xuICBjb25zdCBiYWxhbmNlU3RyaW5nID0gdG9rZW5zV2l0aEJhbGFuY2VzWzBdPy5zdHJpbmc7XG4gIGNvbnN0IGZvcm1hdHRlZEZpYXRCYWxhbmNlID0gdXNlVG9rZW5GaWF0QW1vdW50KFxuICAgIHRva2VuLmFkZHJlc3MsXG4gICAgYmFsYW5jZVN0cmluZyxcbiAgICB0b2tlbi5zeW1ib2wsXG4gICk7XG5cbiAgY29uc3QgdXNlQ3VycmVuY3lSYXRlQ2hlY2sgPSB1c2VTZWxlY3RvcihnZXRVc2VDdXJyZW5jeVJhdGVDaGVjayk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRUb2tlblNlbGVjdGlvbih0b2tlbnNMaXN0RGV0ZWN0ZWRbdG9rZW4uYWRkcmVzc10/LnNlbGVjdGVkKTtcbiAgfSwgW3Rva2Vuc0xpc3REZXRlY3RlZCwgdG9rZW4uYWRkcmVzcywgdG9rZW5TZWxlY3Rpb24sIHNldFRva2VuU2VsZWN0aW9uXSk7XG5cbiAgY29uc3QgaGFuZGxlQ2hlY2tCb3hTZWxlY3Rpb24gPSAoKSA9PiB7XG4gICAgc2V0VG9rZW5TZWxlY3Rpb24oIXRva2VuU2VsZWN0aW9uKTtcbiAgICBoYW5kbGVUb2tlblNlbGVjdGlvbih0b2tlbik7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94IGRpc3BsYXk9e0RJU1BMQVkuSU5MSU5FX0ZMRVh9IGNsYXNzTmFtZT1cImRldGVjdGVkLXRva2VuLXZhbHVlc1wiPlxuICAgICAgPEJveCBtYXJnaW5Cb3R0b209ezF9PlxuICAgICAgICA8VGV4dCB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5TGdNZWRpdW19IGFzPVwiaDRcIj5cbiAgICAgICAgICB7YCR7YmFsYW5jZVN0cmluZyB8fCAnMCd9ICR7dG9rZW4uc3ltYm9sfWB9XG4gICAgICAgIDwvVGV4dD5cbiAgICAgICAgPFRleHRcbiAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219XG4gICAgICAgICAgYXM9XCJoNlwiXG4gICAgICAgICAgY29sb3I9e1RleHRDb2xvci50ZXh0QWx0ZXJuYXRpdmV9XG4gICAgICAgID5cbiAgICAgICAgICB7dXNlQ3VycmVuY3lSYXRlQ2hlY2tcbiAgICAgICAgICAgID8gZm9ybWF0dGVkRmlhdEJhbGFuY2UgfHwgJyQwJyAvLyBzaW5jZSBmb3JtYXR0ZWRGaWF0QmFsYW5jZSB3aWxsIGJlIHdoZW4gdGVoIGNvbnZlcnNpb24gcmF0ZSBpcyBub3Qgb2J0YWluZWQsIHNob3VsZCBiZSByZXBsYWNlIHRoZSBgJDBgIHdpdGggYE4vQWBcbiAgICAgICAgICAgIDogZm9ybWF0dGVkRmlhdEJhbGFuY2V9XG4gICAgICAgIDwvVGV4dD5cbiAgICAgIDwvQm94PlxuICAgICAgPEJveCBjbGFzc05hbWU9XCJkZXRlY3RlZC10b2tlbi12YWx1ZXNfX2NoZWNrYm94XCI+XG4gICAgICAgIDxDaGVja0JveCBjaGVja2VkPXt0b2tlblNlbGVjdGlvbn0gb25DbGljaz17aGFuZGxlQ2hlY2tCb3hTZWxlY3Rpb259IC8+XG4gICAgICA8L0JveD5cbiAgICA8L0JveD5cbiAgKTtcbn07XG5cbkRldGVjdGVkVG9rZW5WYWx1ZXMucHJvcFR5cGVzID0ge1xuICB0b2tlbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgZGVjaW1hbHM6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgc3ltYm9sOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGljb25Vcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWdncmVnYXRvcnM6IFByb3BUeXBlcy5hcnJheSxcbiAgfSksXG4gIGhhbmRsZVRva2VuU2VsZWN0aW9uOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB0b2tlbnNMaXN0RGV0ZWN0ZWQ6IFByb3BUeXBlcy5vYmplY3QsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBEZXRlY3RlZFRva2VuVmFsdWVzO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGNoYWluIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgYWRkSW1wb3J0ZWRUb2tlbnMsXG4gIGlnbm9yZVRva2VucyxcbiAgc2V0TmV3VG9rZW5zSW1wb3J0ZWQsXG59IGZyb20gJy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IHtcbiAgZ2V0Q3VycmVudENoYWluSWQsXG4gIGdldERldGVjdGVkVG9rZW5zSW5DdXJyZW50TmV0d29yayxcbn0gZnJvbSAnLi4vLi4vLi4vc2VsZWN0b3JzJztcbmltcG9ydCB7IE1ldGFNZXRyaWNzQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbnRleHRzL21ldGFtZXRyaWNzJztcblxuaW1wb3J0IHtcbiAgQXNzZXRUeXBlLFxuICBUb2tlblN0YW5kYXJkLFxufSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL3RyYW5zYWN0aW9uJztcbmltcG9ydCB7XG4gIE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeSxcbiAgTWV0YU1ldHJpY3NFdmVudExvY2F0aW9uLFxuICBNZXRhTWV0cmljc0V2ZW50TmFtZSxcbiAgTWV0YU1ldHJpY3NUb2tlbkV2ZW50U291cmNlLFxufSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL21ldGFtZXRyaWNzJztcbmltcG9ydCBEZXRlY3RlZFRva2VuU2VsZWN0aW9uUG9wb3ZlciBmcm9tICcuL2RldGVjdGVkLXRva2VuLXNlbGVjdGlvbi1wb3BvdmVyL2RldGVjdGVkLXRva2VuLXNlbGVjdGlvbi1wb3BvdmVyJztcbmltcG9ydCBEZXRlY3RlZFRva2VuSWdub3JlZFBvcG92ZXIgZnJvbSAnLi9kZXRlY3RlZC10b2tlbi1pZ25vcmVkLXBvcG92ZXIvZGV0ZWN0ZWQtdG9rZW4taWdub3JlZC1wb3BvdmVyJztcblxuY29uc3Qgc29ydGluZ0Jhc2VkT25Ub2tlblNlbGVjdGlvbiA9ICh0b2tlbnNEZXRlY3RlZCkgPT4ge1xuICByZXR1cm4gKFxuICAgIGNoYWluKHRva2Vuc0RldGVjdGVkKVxuICAgICAgLy8gZ2V0IHRoZSB2YWx1ZXNcbiAgICAgIC52YWx1ZXMoKVxuICAgICAgLy8gY3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIGtleXMgJ3NlbGVjdGVkJywgJ2Rlc2VsZWN0ZWQnIGFuZCBncm91cCB0aGUgdG9rZW5zXG4gICAgICAuZ3JvdXBCeSgodG9rZW4pID0+ICh0b2tlbi5zZWxlY3RlZCA/ICdzZWxlY3RlZCcgOiAnZGVzZWxlY3RlZCcpKVxuICAgICAgLy8gZGl0Y2ggdGhlICdzZWxlY3RlZCcgcHJvcGVydHkgYW5kIGdldCBqdXN0IHRoZSB0b2tlbnMnXG4gICAgICAubWFwVmFsdWVzKChncm91cCkgPT5cbiAgICAgICAgZ3JvdXAubWFwKCh7IHRva2VuIH0pID0+IHtcbiAgICAgICAgICBjb25zdCB7IGFkZHJlc3MsIHN5bWJvbCwgZGVjaW1hbHMsIGFnZ3JlZ2F0b3JzIH0gPSB0b2tlbjtcbiAgICAgICAgICByZXR1cm4geyBhZGRyZXNzLCBzeW1ib2wsIGRlY2ltYWxzLCBhZ2dyZWdhdG9ycyB9O1xuICAgICAgICB9KSxcbiAgICAgIClcbiAgICAgIC8vIEV4aXQgdGhlIGNoYWluIGFuZCBnZXQgdGhlIHVuZGVybHlpbmcgdmFsdWUsIGFuIG9iamVjdC5cbiAgICAgIC52YWx1ZSgpXG4gICk7XG59O1xuXG5jb25zdCBEZXRlY3RlZFRva2VuID0gKHsgc2V0U2hvd0RldGVjdGVkVG9rZW5zIH0pID0+IHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCB0cmFja0V2ZW50ID0gdXNlQ29udGV4dChNZXRhTWV0cmljc0NvbnRleHQpO1xuXG4gIGNvbnN0IGNoYWluSWQgPSB1c2VTZWxlY3RvcihnZXRDdXJyZW50Q2hhaW5JZCk7XG4gIGNvbnN0IGRldGVjdGVkVG9rZW5zID0gdXNlU2VsZWN0b3IoZ2V0RGV0ZWN0ZWRUb2tlbnNJbkN1cnJlbnROZXR3b3JrKTtcblxuICBjb25zdCBbdG9rZW5zTGlzdERldGVjdGVkLCBzZXRUb2tlbnNMaXN0RGV0ZWN0ZWRdID0gdXNlU3RhdGUoKCkgPT5cbiAgICBkZXRlY3RlZFRva2Vucy5yZWR1Y2UoKHRva2VuT2JqLCB0b2tlbikgPT4ge1xuICAgICAgdG9rZW5PYmpbdG9rZW4uYWRkcmVzc10gPSB7IHRva2VuLCBzZWxlY3RlZDogdHJ1ZSB9O1xuICAgICAgcmV0dXJuIHRva2VuT2JqO1xuICAgIH0sIHt9KSxcbiAgKTtcbiAgY29uc3QgW3Nob3dEZXRlY3RlZFRva2VuSWdub3JlZFBvcG92ZXIsIHNldFNob3dEZXRlY3RlZFRva2VuSWdub3JlZFBvcG92ZXJdID1cbiAgICB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtwYXJ0aWFsbHlJZ25vcmVEZXRlY3RlZFRva2Vucywgc2V0UGFydGlhbGx5SWdub3JlRGV0ZWN0ZWRUb2tlbnNdID1cbiAgICB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgaW1wb3J0U2VsZWN0ZWRUb2tlbnMgPSBhc3luYyAoc2VsZWN0ZWRUb2tlbnMpID0+IHtcbiAgICBzZWxlY3RlZFRva2Vucy5mb3JFYWNoKChpbXBvcnRlZFRva2VuKSA9PiB7XG4gICAgICB0cmFja0V2ZW50KHtcbiAgICAgICAgZXZlbnQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLlRva2VuQWRkZWQsXG4gICAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuV2FsbGV0LFxuICAgICAgICBzZW5zaXRpdmVQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgdG9rZW5fc3ltYm9sOiBpbXBvcnRlZFRva2VuLnN5bWJvbCxcbiAgICAgICAgICB0b2tlbl9jb250cmFjdF9hZGRyZXNzOiBpbXBvcnRlZFRva2VuLmFkZHJlc3MsXG4gICAgICAgICAgdG9rZW5fZGVjaW1hbF9wcmVjaXNpb246IGltcG9ydGVkVG9rZW4uZGVjaW1hbHMsXG4gICAgICAgICAgc291cmNlX2Nvbm5lY3Rpb25fbWV0aG9kOiBNZXRhTWV0cmljc1Rva2VuRXZlbnRTb3VyY2UuRGV0ZWN0ZWQsXG4gICAgICAgICAgdG9rZW5fc3RhbmRhcmQ6IFRva2VuU3RhbmRhcmQuRVJDMjAsXG4gICAgICAgICAgYXNzZXRfdHlwZTogQXNzZXRUeXBlLnRva2VuLFxuICAgICAgICAgIHRva2VuX2FkZGVkX3R5cGU6ICdkZXRlY3RlZCcsXG4gICAgICAgICAgY2hhaW5faWQ6IGNoYWluSWQsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBhd2FpdCBkaXNwYXRjaChhZGRJbXBvcnRlZFRva2VucyhzZWxlY3RlZFRva2VucykpO1xuICAgIGNvbnN0IHRva2VuU3ltYm9scyA9IHNlbGVjdGVkVG9rZW5zLm1hcCgoeyBzeW1ib2wgfSkgPT4gc3ltYm9sKTtcbiAgICBkaXNwYXRjaChzZXROZXdUb2tlbnNJbXBvcnRlZCh0b2tlblN5bWJvbHMuam9pbignLCAnKSkpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNsZWFyVG9rZW5zU2VsZWN0aW9uID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgc2VsZWN0ZWQ6IHNlbGVjdGVkVG9rZW5zID0gW10sIGRlc2VsZWN0ZWQ6IGRlU2VsZWN0ZWRUb2tlbnMgPSBbXSB9ID1cbiAgICAgIHNvcnRpbmdCYXNlZE9uVG9rZW5TZWxlY3Rpb24odG9rZW5zTGlzdERldGVjdGVkKTtcblxuICAgIGlmIChkZVNlbGVjdGVkVG9rZW5zLmxlbmd0aCA8IGRldGVjdGVkVG9rZW5zLmxlbmd0aCkge1xuICAgICAgYXdhaXQgaW1wb3J0U2VsZWN0ZWRUb2tlbnMoc2VsZWN0ZWRUb2tlbnMpO1xuICAgIH1cbiAgICBjb25zdCB0b2tlbnNEZXRhaWxzTGlzdCA9IGRlU2VsZWN0ZWRUb2tlbnMubWFwKFxuICAgICAgKHsgc3ltYm9sLCBhZGRyZXNzIH0pID0+IGAke3N5bWJvbH0gLSAke2FkZHJlc3N9YCxcbiAgICApO1xuICAgIHRyYWNrRXZlbnQoe1xuICAgICAgZXZlbnQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLlRva2VuSGlkZGVuLFxuICAgICAgY2F0ZWdvcnk6IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeS5XYWxsZXQsXG4gICAgICBzZW5zaXRpdmVQcm9wZXJ0aWVzOiB7XG4gICAgICAgIHRva2VuczogdG9rZW5zRGV0YWlsc0xpc3QsXG4gICAgICAgIGxvY2F0aW9uOiBNZXRhTWV0cmljc0V2ZW50TG9jYXRpb24uVG9rZW5EZXRlY3Rpb24sXG4gICAgICAgIHRva2VuX3N0YW5kYXJkOiBUb2tlblN0YW5kYXJkLkVSQzIwLFxuICAgICAgICBhc3NldF90eXBlOiBBc3NldFR5cGUudG9rZW4sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IGRlU2VsZWN0ZWRUb2tlbnNBZGRyZXNzZXMgPSBkZVNlbGVjdGVkVG9rZW5zLm1hcChcbiAgICAgICh7IGFkZHJlc3MgfSkgPT4gYWRkcmVzcyxcbiAgICApO1xuICAgIGF3YWl0IGRpc3BhdGNoKFxuICAgICAgaWdub3JlVG9rZW5zKHtcbiAgICAgICAgdG9rZW5zVG9JZ25vcmU6IGRlU2VsZWN0ZWRUb2tlbnNBZGRyZXNzZXMsXG4gICAgICAgIGRvbnRTaG93TG9hZGluZ0luZGljYXRvcjogdHJ1ZSxcbiAgICAgIH0pLFxuICAgICk7XG4gICAgc2V0U2hvd0RldGVjdGVkVG9rZW5zKGZhbHNlKTtcbiAgICBzZXRQYXJ0aWFsbHlJZ25vcmVEZXRlY3RlZFRva2VucyhmYWxzZSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlVG9rZW5TZWxlY3Rpb24gPSAodG9rZW4pID0+IHtcbiAgICBzZXRUb2tlbnNMaXN0RGV0ZWN0ZWQoKHByZXZTdGF0ZSkgPT4gKHtcbiAgICAgIC4uLnByZXZTdGF0ZSxcbiAgICAgIFt0b2tlbi5hZGRyZXNzXToge1xuICAgICAgICAuLi5wcmV2U3RhdGVbdG9rZW4uYWRkcmVzc10sXG4gICAgICAgIHNlbGVjdGVkOiAhcHJldlN0YXRlW3Rva2VuLmFkZHJlc3NdLnNlbGVjdGVkLFxuICAgICAgfSxcbiAgICB9KSk7XG4gIH07XG5cbiAgY29uc3Qgb25JbXBvcnQgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBzZWxlY3RlZDogc2VsZWN0ZWRUb2tlbnMgPSBbXSB9ID1cbiAgICAgIHNvcnRpbmdCYXNlZE9uVG9rZW5TZWxlY3Rpb24odG9rZW5zTGlzdERldGVjdGVkKTtcblxuICAgIGlmIChzZWxlY3RlZFRva2Vucy5sZW5ndGggPCBkZXRlY3RlZFRva2Vucy5sZW5ndGgpIHtcbiAgICAgIHNldFNob3dEZXRlY3RlZFRva2VuSWdub3JlZFBvcG92ZXIodHJ1ZSk7XG4gICAgICBzZXRQYXJ0aWFsbHlJZ25vcmVEZXRlY3RlZFRva2Vucyh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgaW1wb3J0U2VsZWN0ZWRUb2tlbnMoc2VsZWN0ZWRUb2tlbnMpO1xuICAgICAgc2V0U2hvd0RldGVjdGVkVG9rZW5zKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb25JZ25vcmVBbGwgPSAoKSA9PiB7XG4gICAgY29uc3QgbmV3VG9rZW5zTGlzdERldGVjdGVkID0geyAuLi50b2tlbnNMaXN0RGV0ZWN0ZWQgfTtcbiAgICBmb3IgKGNvbnN0IHRva2VuQWRkcmVzcyBvZiBPYmplY3Qua2V5cyh0b2tlbnNMaXN0RGV0ZWN0ZWQpKSB7XG4gICAgICBuZXdUb2tlbnNMaXN0RGV0ZWN0ZWRbdG9rZW5BZGRyZXNzXS5zZWxlY3RlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHNldFRva2Vuc0xpc3REZXRlY3RlZChuZXdUb2tlbnNMaXN0RGV0ZWN0ZWQpO1xuICAgIHNldFNob3dEZXRlY3RlZFRva2VuSWdub3JlZFBvcG92ZXIodHJ1ZSk7XG4gIH07XG5cbiAgY29uc3Qgb25DYW5jZWxJZ25vcmUgPSAoKSA9PiB7XG4gICAgc2V0U2hvd0RldGVjdGVkVG9rZW5JZ25vcmVkUG9wb3ZlcihmYWxzZSk7XG4gICAgc2V0UGFydGlhbGx5SWdub3JlRGV0ZWN0ZWRUb2tlbnMoZmFsc2UpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHtzaG93RGV0ZWN0ZWRUb2tlbklnbm9yZWRQb3BvdmVyICYmIChcbiAgICAgICAgPERldGVjdGVkVG9rZW5JZ25vcmVkUG9wb3ZlclxuICAgICAgICAgIG9uQ2FuY2VsSWdub3JlPXtvbkNhbmNlbElnbm9yZX1cbiAgICAgICAgICBoYW5kbGVDbGVhclRva2Vuc1NlbGVjdGlvbj17aGFuZGxlQ2xlYXJUb2tlbnNTZWxlY3Rpb259XG4gICAgICAgICAgcGFydGlhbGx5SWdub3JlRGV0ZWN0ZWRUb2tlbnM9e3BhcnRpYWxseUlnbm9yZURldGVjdGVkVG9rZW5zfVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAgIHtkZXRlY3RlZFRva2Vucy5sZW5ndGggPiAwICYmIChcbiAgICAgICAgPERldGVjdGVkVG9rZW5TZWxlY3Rpb25Qb3BvdmVyXG4gICAgICAgICAgZGV0ZWN0ZWRUb2tlbnM9e2RldGVjdGVkVG9rZW5zfVxuICAgICAgICAgIHRva2Vuc0xpc3REZXRlY3RlZD17dG9rZW5zTGlzdERldGVjdGVkfVxuICAgICAgICAgIGhhbmRsZVRva2VuU2VsZWN0aW9uPXtoYW5kbGVUb2tlblNlbGVjdGlvbn1cbiAgICAgICAgICBvbkltcG9ydD17b25JbXBvcnR9XG4gICAgICAgICAgb25JZ25vcmVBbGw9e29uSWdub3JlQWxsfVxuICAgICAgICAgIHNldFNob3dEZXRlY3RlZFRva2Vucz17c2V0U2hvd0RldGVjdGVkVG9rZW5zfVxuICAgICAgICAgIHNvcnRpbmdCYXNlZE9uVG9rZW5TZWxlY3Rpb249e3NvcnRpbmdCYXNlZE9uVG9rZW5TZWxlY3Rpb259XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgIDwvPlxuICApO1xufTtcblxuRGV0ZWN0ZWRUb2tlbi5wcm9wVHlwZXMgPSB7XG4gIHNldFNob3dEZXRlY3RlZFRva2VuczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERldGVjdGVkVG9rZW47XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBNZW51RHJvcHBvIGZyb20gJy4uL21lbnUtZHJvcHBvJztcblxuZXhwb3J0IGNsYXNzIERyb3Bkb3duIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbnRhaW5lckNsYXNzTmFtZSxcbiAgICAgIGlzT3BlbixcbiAgICAgIG9uQ2xpY2tPdXRzaWRlLFxuICAgICAgc3R5bGUsXG4gICAgICBpbm5lclN0eWxlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICB1c2VDc3NUcmFuc2l0aW9uLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgaW5uZXJTdHlsZURlZmF1bHRzID0ge1xuICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgICAgIHBhZGRpbmc6ICc4cHggMTZweCcsXG4gICAgICBiYWNrZ3JvdW5kOiAndmFyKC0tY29sb3ItYmFja2dyb3VuZC1kZWZhdWx0KScsXG4gICAgICBib3hTaGFkb3c6ICd2YXIoLS1zaGFkb3ctc2l6ZS1zbSkgdmFyKC0tY29sb3Itc2hhZG93LWRlZmF1bHQpJyxcbiAgICAgIC4uLmlubmVyU3R5bGUsXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8TWVudURyb3Bwb1xuICAgICAgICBjb250YWluZXJDbGFzc05hbWU9e2NvbnRhaW5lckNsYXNzTmFtZX1cbiAgICAgICAgdXNlQ3NzVHJhbnNpdGlvbj17dXNlQ3NzVHJhbnNpdGlvbn1cbiAgICAgICAgaXNPcGVuPXtpc09wZW59XG4gICAgICAgIHpJbmRleD17NTV9XG4gICAgICAgIG9uQ2xpY2tPdXRzaWRlPXtvbkNsaWNrT3V0c2lkZX1cbiAgICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgICBpbm5lclN0eWxlPXtpbm5lclN0eWxlRGVmYXVsdHN9XG4gICAgICA+XG4gICAgICAgIDxzdHlsZT5cbiAgICAgICAgICB7YFxuICAgICAgICAgICAgbGkuZHJvcGRvd24tbWVudS1pdGVtOmhvdmVyIHtcbiAgICAgICAgICAgICAgY29sb3I6dmFyKC0tY29sb3ItdGV4dC1kZWZhdWx0KTtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItYmFja2dyb3VuZC1kZWZhdWx0LWhvdmVyKTtcbiAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGB9XG4gICAgICAgIDwvc3R5bGU+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvTWVudURyb3Bwbz5cbiAgICApO1xuICB9XG59XG5cbkRyb3Bkb3duLmRlZmF1bHRQcm9wcyA9IHtcbiAgdXNlQ3NzVHJhbnNpdGlvbjogZmFsc2UsXG59O1xuXG5Ecm9wZG93bi5wcm9wVHlwZXMgPSB7XG4gIGlzT3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBvbkNsaWNrT3V0c2lkZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGlubmVyU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHVzZUNzc1RyYW5zaXRpb246IFByb3BUeXBlcy5ib29sLFxuICBjb250YWluZXJDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5leHBvcnQgY2xhc3MgRHJvcGRvd25NZW51SXRlbSBleHRlbmRzIENvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IG9uQ2xpY2ssIGNsb3NlTWVudSwgY2hpbGRyZW4sIHN0eWxlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxsaVxuICAgICAgICBjbGFzc05hbWU9XCJkcm9wZG93bi1tZW51LWl0ZW1cIlxuICAgICAgICBkYXRhLXRlc3RpZD1cImRyb3Bkb3duLW1lbnUtaXRlbVwiXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICBvbkNsaWNrKCk7XG4gICAgICAgICAgY2xvc2VNZW51KCk7XG4gICAgICAgIH19XG4gICAgICAgIG9uS2V5UHJlc3M9eyhldmVudCkgPT4ge1xuICAgICAgICAgIGlmIChldmVudC5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICAgIG9uQ2xpY2soKTtcbiAgICAgICAgICAgIGNsb3NlTWVudSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfX1cbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICAgICAgICBwYWRkaW5nOiAnOHB4IDBweCcsXG4gICAgICAgICAgZm9udFNpemU6ICcxOHB4JyxcbiAgICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxuICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgIC4uLnN0eWxlLFxuICAgICAgICB9fVxuICAgICAgICB0YWJJbmRleD1cIjBcIlxuICAgICAgPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2xpPlxuICAgICk7XG4gIH1cbn1cblxuRHJvcGRvd25NZW51SXRlbS5wcm9wVHlwZXMgPSB7XG4gIGNsb3NlTWVudTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbn07XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgcGlja0J5IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vdWkvYnV0dG9uJztcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vLi4vLi4vc3RvcmUvYWN0aW9ucyc7XG5pbXBvcnQgeyBvcGVuQWxlcnQgYXMgZGlzcGxheUludmFsaWRDdXN0b21OZXR3b3JrQWxlcnQgfSBmcm9tICcuLi8uLi8uLi9kdWNrcy9hbGVydHMvaW52YWxpZC1jdXN0b20tbmV0d29yayc7XG5pbXBvcnQgeyBnZXRQcm92aWRlckNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2R1Y2tzL21ldGFtYXNrL21ldGFtYXNrJztcbmltcG9ydCB7XG4gIEJVSUxUX0lOX05FVFdPUktTLFxuICBDSEFJTl9JRF9UT19SUENfVVJMX01BUCxcbiAgTElORUFfVEVTVE5FVF9SUENfVVJMLFxuICBMT0NBTEhPU1RfUlBDX1VSTCxcbiAgTkVUV09SS19UT19OQU1FX01BUCxcbiAgTkVUV09SS19UWVBFUyxcbiAgU0hPVUxEX1NIT1dfTElORUFfVEVTVE5FVF9ORVRXT1JLLFxufSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL25ldHdvcmsnO1xuaW1wb3J0IHsgaXNQcmVmaXhlZEZvcm1hdHRlZEhleFN0cmluZyB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL25ldHdvcmsudXRpbHMnO1xuXG5pbXBvcnQgQ29sb3JJbmRpY2F0b3IgZnJvbSAnLi4vLi4vdWkvY29sb3ItaW5kaWNhdG9yJztcbmltcG9ydCB7IEljb25Db2xvciwgU2l6ZSB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgZ2V0U2hvd1Rlc3ROZXR3b3JrcyB9IGZyb20gJy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBnZXRFbnZpcm9ubWVudFR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9hcHAvc2NyaXB0cy9saWIvdXRpbCc7XG5pbXBvcnQgeyBFTlZJUk9OTUVOVF9UWVBFX1BPUFVQIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9hcHAnO1xuaW1wb3J0IHtcbiAgTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5LFxuICBNZXRhTWV0cmljc0V2ZW50TmFtZSxcbiAgTWV0YU1ldHJpY3NOZXR3b3JrRXZlbnRTb3VyY2UsXG59IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbWV0YW1ldHJpY3MnO1xuaW1wb3J0IHtcbiAgQUREX1BPUFVMQVJfQ1VTVE9NX05FVFdPUkssXG4gIEFEVkFOQ0VEX1JPVVRFLFxufSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9yb3V0ZXMnO1xuXG5pbXBvcnQgeyBJY29uLCBJY29uTmFtZSwgSWNvblNpemUsIEJ1dHRvbkljb24gfSBmcm9tICcuLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5cbmltcG9ydCB7IERyb3Bkb3duLCBEcm9wZG93bk1lbnVJdGVtIH0gZnJvbSAnLi9kcm9wZG93bic7XG5cbi8vIGNsYXNzZXMgZnJvbSBub2RlcyBvZiB0aGUgdG9nZ2xlIGVsZW1lbnQuXG5jb25zdCBub3RUb2dnbGVFbGVtZW50Q2xhc3NuYW1lcyA9IFtcbiAgJ21lbnUtaWNvbicsXG4gICduZXR3b3JrLW5hbWUnLFxuICAnbmV0d29yay1pbmRpY2F0b3InLFxuICAnbmV0d29yay1jYXJldCcsXG4gICduZXR3b3JrLWNvbXBvbmVudCcsXG4gICdtb2RhbC1jb250YWluZXJfX2Zvb3Rlci1idXR0b24nLFxuXTtcblxuY29uc3QgRFJPUF9ET1dOX01FTlVfSVRFTV9TVFlMRSA9IHtcbiAgZm9udFNpemU6ICcxNnB4JyxcbiAgbGluZUhlaWdodDogJzIwcHgnLFxuICBwYWRkaW5nOiAnMTZweCcsXG59O1xuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICBwcm92aWRlckNvbmZpZzogZ2V0UHJvdmlkZXJDb25maWcoc3RhdGUpLFxuICAgIHNob3VsZFNob3dUZXN0TmV0d29ya3M6IGdldFNob3dUZXN0TmV0d29ya3Moc3RhdGUpLFxuICAgIG5ldHdvcmtDb25maWd1cmF0aW9uczogc3RhdGUubWV0YW1hc2submV0d29ya0NvbmZpZ3VyYXRpb25zLFxuICAgIG5ldHdvcmtEcm9wZG93bk9wZW46IHN0YXRlLmFwcFN0YXRlLm5ldHdvcmtEcm9wZG93bk9wZW4sXG4gICAgc2hvd1Rlc3RuZXRNZXNzYWdlSW5Ecm9wZG93bjogc3RhdGUubWV0YW1hc2suc2hvd1Rlc3RuZXRNZXNzYWdlSW5Ecm9wZG93bixcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7XG4gIHJldHVybiB7XG4gICAgc2V0UHJvdmlkZXJUeXBlOiAodHlwZSkgPT4ge1xuICAgICAgZGlzcGF0Y2goYWN0aW9ucy5zZXRQcm92aWRlclR5cGUodHlwZSkpO1xuICAgIH0sXG4gICAgc2V0QWN0aXZlTmV0d29yazogKG5ldHdvcmtDb25maWd1cmF0aW9uSWQpID0+IHtcbiAgICAgIGRpc3BhdGNoKGFjdGlvbnMuc2V0QWN0aXZlTmV0d29yayhuZXR3b3JrQ29uZmlndXJhdGlvbklkKSk7XG4gICAgfSxcbiAgICB1cHNlcnROZXR3b3JrQ29uZmlndXJhdGlvbjogKC4uLmFyZ3MpID0+XG4gICAgICBkaXNwYXRjaChhY3Rpb25zLnVwc2VydE5ldHdvcmtDb25maWd1cmF0aW9uKC4uLmFyZ3MpKSxcbiAgICBoaWRlTmV0d29ya0Ryb3Bkb3duOiAoKSA9PiBkaXNwYXRjaChhY3Rpb25zLmhpZGVOZXR3b3JrRHJvcGRvd24oKSksXG4gICAgZGlzcGxheUludmFsaWRDdXN0b21OZXR3b3JrQWxlcnQ6IChuZXR3b3JrTmFtZSkgPT4ge1xuICAgICAgZGlzcGF0Y2goZGlzcGxheUludmFsaWRDdXN0b21OZXR3b3JrQWxlcnQobmV0d29ya05hbWUpKTtcbiAgICB9LFxuICAgIHNob3dDb25maXJtRGVsZXRlTmV0d29ya01vZGFsOiAoeyB0YXJnZXQsIG9uQ29uZmlybSB9KSA9PiB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2goXG4gICAgICAgIGFjdGlvbnMuc2hvd01vZGFsKHtcbiAgICAgICAgICBuYW1lOiAnQ09ORklSTV9ERUxFVEVfTkVUV09SSycsXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIG9uQ29uZmlybSxcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0sXG4gICAgaGlkZVRlc3ROZXRNZXNzYWdlOiAoKSA9PiBhY3Rpb25zLmhpZGVUZXN0TmV0TWVzc2FnZSgpLFxuICB9O1xufVxuXG5jbGFzcyBOZXR3b3JrRHJvcGRvd24gZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIHRyYWNrRXZlbnQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgcHJvdmlkZXJDb25maWc6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBuaWNrbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIHJwY1VybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICB0aWNrZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICBzZXRQcm92aWRlclR5cGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2V0QWN0aXZlTmV0d29yazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBoaWRlTmV0d29ya0Ryb3Bkb3duOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG5ldHdvcmtDb25maWd1cmF0aW9uczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHNob3VsZFNob3dUZXN0TmV0d29ya3M6IFByb3BUeXBlcy5ib29sLFxuICAgIG5ldHdvcmtEcm9wZG93bk9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgZGlzcGxheUludmFsaWRDdXN0b21OZXR3b3JrQWxlcnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2hvd0NvbmZpcm1EZWxldGVOZXR3b3JrTW9kYWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2hvd1Rlc3RuZXRNZXNzYWdlSW5Ecm9wZG93bjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBoaWRlVGVzdE5ldE1lc3NhZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBkcm9wZG93blN0eWxlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBoaWRlRWxlbWVudHNGb3JPbmJvYXJkaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBvbkFkZENsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB1cHNlcnROZXR3b3JrQ29uZmlndXJhdGlvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBoYW5kbGVDbGljayhuZXdQcm92aWRlclR5cGUpIHtcbiAgICBjb25zdCB7XG4gICAgICBwcm92aWRlckNvbmZpZzogeyB0eXBlOiBwcm92aWRlclR5cGUgfSxcbiAgICAgIHNldFByb3ZpZGVyVHlwZSxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHRyYWNrRXZlbnQgfSA9IHRoaXMuY29udGV4dDtcblxuICAgIHRyYWNrRXZlbnQoe1xuICAgICAgY2F0ZWdvcnk6IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeS5OYXZpZ2F0aW9uLFxuICAgICAgZXZlbnQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLk5hdk5ldHdvcmtTd2l0Y2hlZCxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgZnJvbV9uZXR3b3JrOiBwcm92aWRlclR5cGUsXG4gICAgICAgIHRvX25ldHdvcms6IG5ld1Byb3ZpZGVyVHlwZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgc2V0UHJvdmlkZXJUeXBlKG5ld1Byb3ZpZGVyVHlwZSk7XG4gIH1cblxuICByZW5kZXJBZGRDdXN0b21CdXR0b24oKSB7XG4gICAgY29uc3QgeyBvbkFkZENsaWNrIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5ldHdvcmtfX2FkZC1uZXR3b3JrLWJ1dHRvblwiPlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgdHlwZT1cInNlY29uZGFyeVwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgaWYgKG9uQWRkQ2xpY2spIHtcbiAgICAgICAgICAgICAgb25BZGRDbGljaygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZ2V0RW52aXJvbm1lbnRUeXBlKCkgPT09IEVOVklST05NRU5UX1RZUEVfUE9QVVBcbiAgICAgICAgICAgICAgICA/IGdsb2JhbC5wbGF0Zm9ybS5vcGVuRXh0ZW5zaW9uSW5Ccm93c2VyKFxuICAgICAgICAgICAgICAgICAgICBBRERfUE9QVUxBUl9DVVNUT01fTkVUV09SSyxcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6IHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKEFERF9QT1BVTEFSX0NVU1RPTV9ORVRXT1JLKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHJvcHMuaGlkZU5ldHdvcmtEcm9wZG93bigpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dGhpcy5jb250ZXh0LnQoJ2FkZE5ldHdvcmsnKX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyQ3VzdG9tUnBjTGlzdChuZXR3b3JrQ29uZmlndXJhdGlvbnMsIHByb3ZpZGVyQ29uZmlnLCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMobmV0d29ya0NvbmZpZ3VyYXRpb25zKS5tYXAoXG4gICAgICAoW25ldHdvcmtDb25maWd1cmF0aW9uSWQsIG5ldHdvcmtDb25maWd1cmF0aW9uXSkgPT4ge1xuICAgICAgICBjb25zdCB7IHJwY1VybCwgY2hhaW5JZCwgbmlja25hbWUgPSAnJywgaWQgfSA9IG5ldHdvcmtDb25maWd1cmF0aW9uO1xuICAgICAgICBjb25zdCBpc0N1cnJlbnRScGNUYXJnZXQgPVxuICAgICAgICAgIHByb3ZpZGVyQ29uZmlnLnR5cGUgPT09IE5FVFdPUktfVFlQRVMuUlBDICYmXG4gICAgICAgICAgcnBjVXJsID09PSBwcm92aWRlckNvbmZpZy5ycGNVcmw7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPERyb3Bkb3duTWVudUl0ZW1cbiAgICAgICAgICAgIGtleT17YGNvbW1vbiR7cnBjVXJsfWB9XG4gICAgICAgICAgICBjbG9zZU1lbnU9eygpID0+IHRoaXMucHJvcHMuaGlkZU5ldHdvcmtEcm9wZG93bigpfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoaXNQcmVmaXhlZEZvcm1hdHRlZEhleFN0cmluZyhjaGFpbklkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuc2V0QWN0aXZlTmV0d29yayhuZXR3b3JrQ29uZmlndXJhdGlvbklkKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BsYXlJbnZhbGlkQ3VzdG9tTmV0d29ya0FsZXJ0KG5pY2tuYW1lIHx8IHJwY1VybCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICBmb250U2l6ZTogJzE2cHgnLFxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAnMjBweCcsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICcxNnB4JyxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2lzQ3VycmVudFJwY1RhcmdldCA/IChcbiAgICAgICAgICAgICAgPEljb24gbmFtZT17SWNvbk5hbWUuQ2hlY2t9IGNvbG9yPXtJY29uQ29sb3Iuc3VjY2Vzc0RlZmF1bHR9IC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5ldHdvcmstY2hlY2tfX3RyYW5zcGFyZW50XCI+4pyTPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPENvbG9ySW5kaWNhdG9yXG4gICAgICAgICAgICAgIGNvbG9yPXtvcHRzLmlzTG9jYWxIb3N0ID8gJ2xvY2FsaG9zdCcgOiBJY29uQ29sb3IuaWNvbk11dGVkfVxuICAgICAgICAgICAgICBzaXplPXtTaXplLkxHfVxuICAgICAgICAgICAgICB0eXBlPXtDb2xvckluZGljYXRvci5UWVBFUy5GSUxMRUR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmV0d29yay1uYW1lLWl0ZW1cIlxuICAgICAgICAgICAgICBkYXRhLXRlc3RpZD17YCR7bmlja25hbWV9LW5ldHdvcmstaXRlbWB9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgY29sb3I6IGlzQ3VycmVudFJwY1RhcmdldFxuICAgICAgICAgICAgICAgICAgPyAndmFyKC0tY29sb3ItdGV4dC1kZWZhdWx0KSdcbiAgICAgICAgICAgICAgICAgIDogJ3ZhcigtLWNvbG9yLXRleHQtYWx0ZXJuYXRpdmUpJyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge25pY2tuYW1lIHx8IHJwY1VybH1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIHtpc0N1cnJlbnRScGNUYXJnZXQgPyBudWxsIDogKFxuICAgICAgICAgICAgICA8QnV0dG9uSWNvblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImRlbGV0ZVwiXG4gICAgICAgICAgICAgICAgaWNvbk5hbWU9e0ljb25OYW1lLkNsb3NlfVxuICAgICAgICAgICAgICAgIHNpemU9e0ljb25TaXplLlNtfVxuICAgICAgICAgICAgICAgIGFyaWFMYWJlbD17dGhpcy5jb250ZXh0LnQoJ2RlbGV0ZScpfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zaG93Q29uZmlybURlbGV0ZU5ldHdvcmtNb2RhbCh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogaWQsXG4gICAgICAgICAgICAgICAgICAgIG9uQ29uZmlybTogKCkgPT4gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9Ecm9wZG93bk1lbnVJdGVtPlxuICAgICAgICApO1xuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgcmVuZGVyTmV0d29ya0VudHJ5KG5ldHdvcmspIHtcbiAgICBjb25zdCB7XG4gICAgICBwcm92aWRlckNvbmZpZzogeyB0eXBlOiBwcm92aWRlclR5cGUgfSxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPERyb3Bkb3duTWVudUl0ZW1cbiAgICAgICAga2V5PXtuZXR3b3JrfVxuICAgICAgICBjbG9zZU1lbnU9e3RoaXMucHJvcHMuaGlkZU5ldHdvcmtEcm9wZG93bn1cbiAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVDbGljayhuZXR3b3JrKX1cbiAgICAgICAgc3R5bGU9e0RST1BfRE9XTl9NRU5VX0lURU1fU1RZTEV9XG4gICAgICA+XG4gICAgICAgIHtwcm92aWRlclR5cGUgPT09IG5ldHdvcmsgPyAoXG4gICAgICAgICAgPEljb24gbmFtZT17SWNvbk5hbWUuQ2hlY2t9IGNvbG9yPXtJY29uQ29sb3Iuc3VjY2Vzc0RlZmF1bHR9IC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZXR3b3JrLWNoZWNrX190cmFuc3BhcmVudFwiPuKckzwvZGl2PlxuICAgICAgICApfVxuICAgICAgICA8Q29sb3JJbmRpY2F0b3JcbiAgICAgICAgICBjb2xvcj17bmV0d29ya31cbiAgICAgICAgICBzaXplPXtTaXplLkxHfVxuICAgICAgICAgIHR5cGU9e0NvbG9ySW5kaWNhdG9yLlRZUEVTLkZJTExFRH1cbiAgICAgICAgLz5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjbGFzc05hbWU9XCJuZXR3b3JrLW5hbWUtaXRlbVwiXG4gICAgICAgICAgZGF0YS10ZXN0aWQ9e2Ake25ldHdvcmt9LW5ldHdvcmstaXRlbWB9XG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGNvbG9yOlxuICAgICAgICAgICAgICBwcm92aWRlclR5cGUgPT09IG5ldHdvcmtcbiAgICAgICAgICAgICAgICA/ICd2YXIoLS1jb2xvci10ZXh0LWRlZmF1bHQpJ1xuICAgICAgICAgICAgICAgIDogJ3ZhcigtLWNvbG9yLXRleHQtYWx0ZXJuYXRpdmUpJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge3RoaXMuY29udGV4dC50KG5ldHdvcmspfVxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L0Ryb3Bkb3duTWVudUl0ZW0+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlck5vbkluZnVyYURlZmF1bHROZXR3b3JrKG5ldHdvcmtDb25maWd1cmF0aW9ucywgbmV0d29yaykge1xuICAgIGNvbnN0IHsgcHJvdmlkZXJDb25maWcsIHNldEFjdGl2ZU5ldHdvcmssIHVwc2VydE5ldHdvcmtDb25maWd1cmF0aW9uIH0gPVxuICAgICAgdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHsgY2hhaW5JZCwgdGlja2VyLCBibG9ja0V4cGxvcmVyVXJsIH0gPSBCVUlMVF9JTl9ORVRXT1JLU1tuZXR3b3JrXTtcbiAgICBjb25zdCBuZXR3b3JrTmFtZSA9IE5FVFdPUktfVE9fTkFNRV9NQVBbbmV0d29ya107XG4gICAgY29uc3QgcnBjVXJsID0gQ0hBSU5fSURfVE9fUlBDX1VSTF9NQVBbY2hhaW5JZF07XG5cbiAgICBjb25zdCBpc0N1cnJlbnRScGNUYXJnZXQgPVxuICAgICAgcHJvdmlkZXJDb25maWcudHlwZSA9PT0gTkVUV09SS19UWVBFUy5SUEMgJiZcbiAgICAgIHJwY1VybCA9PT0gcHJvdmlkZXJDb25maWcucnBjVXJsO1xuICAgIHJldHVybiAoXG4gICAgICA8RHJvcGRvd25NZW51SXRlbVxuICAgICAgICBrZXk9e25ldHdvcmt9XG4gICAgICAgIGNsb3NlTWVudT17dGhpcy5wcm9wcy5oaWRlTmV0d29ya0Ryb3Bkb3dufVxuICAgICAgICBvbkNsaWNrPXthc3luYyAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgbmV0d29ya0NvbmZpZ3VyYXRpb24gPSBwaWNrQnkoXG4gICAgICAgICAgICBuZXR3b3JrQ29uZmlndXJhdGlvbnMsXG4gICAgICAgICAgICAoY29uZmlnKSA9PiBjb25maWcucnBjVXJsID09PSBDSEFJTl9JRF9UT19SUENfVVJMX01BUFtjaGFpbklkXSxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgbGV0IGNvbmZpZ3VyYXRpb25JZCA9IG51bGw7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLWJvb2xlYW4tY2FzdCwgbm8taW1wbGljaXQtY29lcmNpb25cbiAgICAgICAgICBpZiAoISFuZXR3b3JrQ29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgY29uZmlndXJhdGlvbklkID0gYXdhaXQgdXBzZXJ0TmV0d29ya0NvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBycGNVcmwsXG4gICAgICAgICAgICAgICAgdGlja2VyLFxuICAgICAgICAgICAgICAgIGNoYWluSWQsXG4gICAgICAgICAgICAgICAgbmlja25hbWU6IG5ldHdvcmtOYW1lLFxuICAgICAgICAgICAgICAgIHJwY1ByZWZzOiB7XG4gICAgICAgICAgICAgICAgICBibG9ja0V4cGxvcmVyVXJsLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXRBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgc291cmNlOiBNZXRhTWV0cmljc05ldHdvcmtFdmVudFNvdXJjZS5DdXN0b21OZXR3b3JrRm9ybSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldEFjdGl2ZU5ldHdvcmsoY29uZmlndXJhdGlvbklkKTtcbiAgICAgICAgfX1cbiAgICAgICAgc3R5bGU9e0RST1BfRE9XTl9NRU5VX0lURU1fU1RZTEV9XG4gICAgICA+XG4gICAgICAgIHtpc0N1cnJlbnRScGNUYXJnZXQgPyAoXG4gICAgICAgICAgPEljb24gbmFtZT17SWNvbk5hbWUuQ2hlY2t9IGNvbG9yPXtJY29uQ29sb3Iuc3VjY2Vzc0RlZmF1bHR9IC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZXR3b3JrLWNoZWNrX190cmFuc3BhcmVudFwiPuKckzwvZGl2PlxuICAgICAgICApfVxuICAgICAgICA8Q29sb3JJbmRpY2F0b3JcbiAgICAgICAgICBjb2xvcj17bmV0d29ya31cbiAgICAgICAgICBzaXplPXtTaXplLkxHfVxuICAgICAgICAgIHR5cGU9e0NvbG9ySW5kaWNhdG9yLlRZUEVTLkZJTExFRH1cbiAgICAgICAgLz5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjbGFzc05hbWU9XCJuZXR3b3JrLW5hbWUtaXRlbVwiXG4gICAgICAgICAgZGF0YS10ZXN0aWQ9e2Ake25ldHdvcmt9LW5ldHdvcmstaXRlbWB9XG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGNvbG9yOlxuICAgICAgICAgICAgICBwcm92aWRlckNvbmZpZy50eXBlID09PSBuZXR3b3JrXG4gICAgICAgICAgICAgICAgPyAndmFyKC0tY29sb3ItdGV4dC1kZWZhdWx0KSdcbiAgICAgICAgICAgICAgICA6ICd2YXIoLS1jb2xvci10ZXh0LWFsdGVybmF0aXZlKScsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0aGlzLmNvbnRleHQudChuZXR3b3JrKX1cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9Ecm9wZG93bk1lbnVJdGVtPlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaGlzdG9yeSxcbiAgICAgIGhpZGVFbGVtZW50c0Zvck9uYm9hcmRpbmcsXG4gICAgICBoaWRlTmV0d29ya0Ryb3Bkb3duLFxuICAgICAgc2hvdWxkU2hvd1Rlc3ROZXR3b3JrcyxcbiAgICAgIHNob3dUZXN0bmV0TWVzc2FnZUluRHJvcGRvd24sXG4gICAgICBoaWRlVGVzdE5ldE1lc3NhZ2UsXG4gICAgICBuZXR3b3JrQ29uZmlndXJhdGlvbnMsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBycGNMaXN0RGV0YWlsV2l0aG91dExvY2FsSG9zdEFuZExpbmVhID0gcGlja0J5KFxuICAgICAgbmV0d29ya0NvbmZpZ3VyYXRpb25zLFxuICAgICAgKGNvbmZpZykgPT5cbiAgICAgICAgY29uZmlnLnJwY1VybCAhPT0gTE9DQUxIT1NUX1JQQ19VUkwgJiZcbiAgICAgICAgY29uZmlnLnJwY1VybCAhPT0gTElORUFfVEVTVE5FVF9SUENfVVJMLFxuICAgICk7XG4gICAgY29uc3QgcnBjTGlzdERldGFpbEZvckxvY2FsSG9zdCA9IHBpY2tCeShcbiAgICAgIG5ldHdvcmtDb25maWd1cmF0aW9ucyxcbiAgICAgIChjb25maWcpID0+IGNvbmZpZy5ycGNVcmwgPT09IExPQ0FMSE9TVF9SUENfVVJMLFxuICAgICk7XG5cbiAgICBjb25zdCBpc09wZW4gPSB0aGlzLnByb3BzLm5ldHdvcmtEcm9wZG93bk9wZW47XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPERyb3Bkb3duXG4gICAgICAgIGlzT3Blbj17aXNPcGVufVxuICAgICAgICBvbkNsaWNrT3V0c2lkZT17KGV2ZW50KSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBjbGFzc0xpc3QgfSA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgICBjb25zdCBpc0luQ2xhc3NMaXN0ID0gKGNsYXNzTmFtZSkgPT4gY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG4gICAgICAgICAgY29uc3Qgbm90VG9nZ2xlRWxlbWVudEluZGV4ID1cbiAgICAgICAgICAgIG5vdFRvZ2dsZUVsZW1lbnRDbGFzc25hbWVzLmZpbmRJbmRleChpc0luQ2xhc3NMaXN0KTtcblxuICAgICAgICAgIGlmIChub3RUb2dnbGVFbGVtZW50SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGhpZGVOZXR3b3JrRHJvcGRvd24oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH19XG4gICAgICAgIGNvbnRhaW5lckNsYXNzTmFtZT1cIm5ldHdvcmstZHJvcHBvXCJcbiAgICAgICAgekluZGV4PXs1NX1cbiAgICAgICAgc3R5bGU9e1xuICAgICAgICAgIHRoaXMucHJvcHMuZHJvcGRvd25TdHlsZXMgfHwge1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICB0b3A6ICc1OHB4JyxcbiAgICAgICAgICAgIHdpZHRoOiAnMzA5cHgnLFxuICAgICAgICAgICAgekluZGV4OiAnNTUnLFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbm5lclN0eWxlPXt7XG4gICAgICAgICAgcGFkZGluZzogJzE2cHggMCcsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV0d29yay1kcm9wZG93bi1oZWFkZXJcIj5cbiAgICAgICAgICB7aGlkZUVsZW1lbnRzRm9yT25ib2FyZGluZyA/IG51bGwgOiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5ldHdvcmstZHJvcGRvd24tdGl0bGVcIj57dCgnbmV0d29ya3MnKX08L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtoaWRlRWxlbWVudHNGb3JPbmJvYXJkaW5nID8gbnVsbCA6IChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV0d29yay1kcm9wZG93bi1kaXZpZGVyXCIgLz5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtzaG93VGVzdG5ldE1lc3NhZ2VJbkRyb3Bkb3duICYmICFoaWRlRWxlbWVudHNGb3JPbmJvYXJkaW5nID8gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZXR3b3JrLWRyb3Bkb3duLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAge3QoJ3RvZ2dsZVRlc3ROZXR3b3JrcycsIFtcbiAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgaHJlZj1cIiNcIlxuICAgICAgICAgICAgICAgICAga2V5PVwiYWR2YW5jZWRTZXR0aW5nc0xpbmtcIlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmV0d29yay1kcm9wZG93bi1jb250ZW50LS1saW5rXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaGlkZU5ldHdvcmtEcm9wZG93bigpO1xuICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2goYCR7QURWQU5DRURfUk9VVEV9I3Nob3ctdGVzdG5ldHNgKTtcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge3QoJ3Nob3dIaWRlJyl9XG4gICAgICAgICAgICAgICAgPC9hPixcbiAgICAgICAgICAgICAgXSl9XG4gICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtoaWRlVGVzdE5ldE1lc3NhZ2V9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmV0d29yay1kcm9wZG93bi1jb250ZW50LS1kaXNtaXNzXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0KCdkaXNtaXNzJyl9XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV0d29yay1kcm9wZG93bi1saXN0XCI+XG4gICAgICAgICAge3RoaXMucmVuZGVyTmV0d29ya0VudHJ5KE5FVFdPUktfVFlQRVMuTUFJTk5FVCl9XG5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJDdXN0b21ScGNMaXN0KFxuICAgICAgICAgICAgcnBjTGlzdERldGFpbFdpdGhvdXRMb2NhbEhvc3RBbmRMaW5lYSxcbiAgICAgICAgICAgIHRoaXMucHJvcHMucHJvdmlkZXJDb25maWcsXG4gICAgICAgICAgKX1cblxuICAgICAgICAgIHtzaG91bGRTaG93VGVzdE5ldHdvcmtzICYmIChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIHt0aGlzLnJlbmRlck5ldHdvcmtFbnRyeShORVRXT1JLX1RZUEVTLkdPRVJMSSl9XG4gICAgICAgICAgICAgIHt0aGlzLnJlbmRlck5ldHdvcmtFbnRyeShORVRXT1JLX1RZUEVTLlNFUE9MSUEpfVxuICAgICAgICAgICAgICB7U0hPVUxEX1NIT1dfTElORUFfVEVTVE5FVF9ORVRXT1JLICYmIChcbiAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAge3RoaXMucmVuZGVyTm9uSW5mdXJhRGVmYXVsdE5ldHdvcmsoXG4gICAgICAgICAgICAgICAgICAgIG5ldHdvcmtDb25maWd1cmF0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgTkVUV09SS19UWVBFUy5MSU5FQV9URVNUTkVULFxuICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge3RoaXMucmVuZGVyQ3VzdG9tUnBjTGlzdChcbiAgICAgICAgICAgICAgICBycGNMaXN0RGV0YWlsRm9yTG9jYWxIb3N0LFxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMucHJvdmlkZXJDb25maWcsXG4gICAgICAgICAgICAgICAgeyBpc0xvY2FsSG9zdDogdHJ1ZSB9LFxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAge3RoaXMucmVuZGVyQWRkQ3VzdG9tQnV0dG9uKCl9XG4gICAgICA8L0Ryb3Bkb3duPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZShcbiAgd2l0aFJvdXRlcixcbiAgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcyksXG4pKE5ldHdvcmtEcm9wZG93bik7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IEJpZ051bWJlciBmcm9tICdiaWdudW1iZXIuanMnO1xuaW1wb3J0IHsgRWRpdEdhc01vZGVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9nYXMnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uL3VpL2J1dHRvbic7XG5cbmltcG9ydCB7XG4gIFRleHRBbGlnbixcbiAgRm9udFdlaWdodCxcbiAgVGV4dENvbG9yLFxuICBUZXh0VmFyaWFudCxcbn0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50LWxpYnJhcnknO1xuaW1wb3J0IHsgYXJlRGFwcFN1Z2dlc3RlZEFuZFR4UGFyYW1HYXNGZWVzVGhlU2FtZSB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvY29uZmlybS10eC51dGlsJztcblxuaW1wb3J0IEluZm9Ub29sdGlwIGZyb20gJy4uLy4uL3VpL2luZm8tdG9vbHRpcCc7XG5pbXBvcnQgRXJyb3JNZXNzYWdlIGZyb20gJy4uLy4uL3VpL2Vycm9yLW1lc3NhZ2UnO1xuaW1wb3J0IEFkdmFuY2VkR2FzQ29udHJvbHMgZnJvbSAnLi4vYWR2YW5jZWQtZ2FzLWNvbnRyb2xzL2FkdmFuY2VkLWdhcy1jb250cm9scy5jb21wb25lbnQnO1xuaW1wb3J0IEFjdGlvbmFibGVNZXNzYWdlIGZyb20gJy4uLy4uL3VpL2FjdGlvbmFibGUtbWVzc2FnZS9hY3Rpb25hYmxlLW1lc3NhZ2UnO1xuXG5pbXBvcnQgeyBJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbnRleHRzL2kxOG4nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFZGl0R2FzRGlzcGxheSh7XG4gIG1vZGUgPSBFZGl0R2FzTW9kZXMubW9kaWZ5SW5QbGFjZSxcbiAgZXN0aW1hdGVkTWluaW11bU5hdGl2ZSxcbiAgdHJhbnNhY3Rpb24sXG4gIGdhc1ByaWNlLFxuICBzZXRHYXNQcmljZSxcbiAgZ2FzTGltaXQsXG4gIHNldEdhc0xpbWl0LFxuICBwcm9wZXJHYXNMaW1pdCxcbiAgZGFwcFN1Z2dlc3RlZEdhc0ZlZUFja25vd2xlZGdlZCxcbiAgc2V0RGFwcFN1Z2dlc3RlZEdhc0ZlZUFja25vd2xlZGdlZCxcbiAgb25NYW51YWxDaGFuZ2UsXG4gIG1pbmltdW1HYXNMaW1pdCxcbiAgYmFsYW5jZUVycm9yLFxuICBnYXNFcnJvcnMsXG4gIHR4UGFyYW1zSGF2ZUJlZW5DdXN0b21pemVkLFxufSkge1xuICBjb25zdCB0ID0gdXNlQ29udGV4dChJMThuQ29udGV4dCk7XG4gIGNvbnN0IHNjcm9sbFJlZiA9IHVzZVJlZihudWxsKTtcblxuICBjb25zdCBkYXBwU3VnZ2VzdGVkQW5kVHhQYXJhbUdhc0ZlZXNBcmVUaGVTYW1lID1cbiAgICBhcmVEYXBwU3VnZ2VzdGVkQW5kVHhQYXJhbUdhc0ZlZXNUaGVTYW1lKHRyYW5zYWN0aW9uKTtcblxuICBjb25zdCByZXF1aXJlRGFwcEFja25vd2xlZGdlbWVudCA9IEJvb2xlYW4oXG4gICAgdHJhbnNhY3Rpb24/LmRhcHBTdWdnZXN0ZWRHYXNGZWVzICYmXG4gICAgICAhZGFwcFN1Z2dlc3RlZEdhc0ZlZUFja25vd2xlZGdlZCAmJlxuICAgICAgZGFwcFN1Z2dlc3RlZEFuZFR4UGFyYW1HYXNGZWVzQXJlVGhlU2FtZSxcbiAgKTtcblxuICBsZXQgd2FybmluZ01lc3NhZ2U7XG4gIGlmIChcbiAgICBnYXNMaW1pdCAhPT0gdW5kZWZpbmVkICYmXG4gICAgcHJvcGVyR2FzTGltaXQgIT09IHVuZGVmaW5lZCAmJlxuICAgIG5ldyBCaWdOdW1iZXIoZ2FzTGltaXQpLmxlc3NUaGFuKG5ldyBCaWdOdW1iZXIocHJvcGVyR2FzTGltaXQpKVxuICApIHtcbiAgICB3YXJuaW5nTWVzc2FnZSA9IHQoJ2dhc0xpbWl0UmVjb21tZW5kZWQnLCBbcHJvcGVyR2FzTGltaXRdKTtcbiAgfVxuXG4gIGNvbnN0IHNob3dUb3BFcnJvciA9IGJhbGFuY2VFcnJvciAmJiB0eFBhcmFtc0hhdmVCZWVuQ3VzdG9taXplZDtcblxuICBsZXQgZXJyb3JLZXk7XG4gIGlmIChiYWxhbmNlRXJyb3IpIHtcbiAgICBlcnJvcktleSA9ICdpbnN1ZmZpY2llbnRGdW5kcyc7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1nYXMtZGlzcGxheVwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWdhcy1kaXNwbGF5X19jb250ZW50XCI+XG4gICAgICAgIHtzaG93VG9wRXJyb3IgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1nYXMtZGlzcGxheV9fd2FybmluZ1wiPlxuICAgICAgICAgICAgPEVycm9yTWVzc2FnZSBlcnJvcktleT17ZXJyb3JLZXl9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIHt3YXJuaW5nTWVzc2FnZSAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWdhcy1kaXNwbGF5X193YXJuaW5nXCI+XG4gICAgICAgICAgICA8QWN0aW9uYWJsZU1lc3NhZ2VcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYWN0aW9uYWJsZS1tZXNzYWdlLS13YXJuaW5nXCJcbiAgICAgICAgICAgICAgbWVzc2FnZT17d2FybmluZ01lc3NhZ2V9XG4gICAgICAgICAgICAgIGljb25GaWxsQ29sb3I9XCJ2YXIoLS1jb2xvci13YXJuaW5nLWRlZmF1bHQpXCJcbiAgICAgICAgICAgICAgdXNlSWNvblxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAge3JlcXVpcmVEYXBwQWNrbm93bGVkZ2VtZW50ICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtZ2FzLWRpc3BsYXlfX2RhcHAtYWNrbm93bGVkZ2VtZW50LXdhcm5pbmdcIj5cbiAgICAgICAgICAgIDxBY3Rpb25hYmxlTWVzc2FnZVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhY3Rpb25hYmxlLW1lc3NhZ2UtLXdhcm5pbmdcIlxuICAgICAgICAgICAgICBtZXNzYWdlPXt0KCdnYXNEaXNwbGF5RGFwcFdhcm5pbmcnLCBbdHJhbnNhY3Rpb24ub3JpZ2luXSl9XG4gICAgICAgICAgICAgIGljb25GaWxsQ29sb3I9XCJ2YXIoLS1jb2xvci13YXJuaW5nLWRlZmF1bHQpXCJcbiAgICAgICAgICAgICAgdXNlSWNvblxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAge21vZGUgPT09IEVkaXRHYXNNb2Rlcy5zcGVlZFVwICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtZ2FzLWRpc3BsYXlfX3RvcC10b29sdGlwXCI+XG4gICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHREZWZhdWx0fVxuICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219XG4gICAgICAgICAgICAgIGFzPVwiaDZcIlxuICAgICAgICAgICAgICBmb250V2VpZ2h0PXtGb250V2VpZ2h0LkJvbGR9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0KCdzcGVlZFVwVG9vbHRpcFRleHQnKX17JyAnfVxuICAgICAgICAgICAgICA8SW5mb1Rvb2x0aXBcbiAgICAgICAgICAgICAgICBwb3NpdGlvbj1cInRvcFwiXG4gICAgICAgICAgICAgICAgY29udGVudFRleHQ9e3QoJ3NwZWVkVXBFeHBsYW5hdGlvbicpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICA8VGV4dFxuICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IudGV4dERlZmF1bHR9XG4gICAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuZGlzcGxheU1kfVxuICAgICAgICAgIGFzPVwiaDFcIlxuICAgICAgICAgIHRleHRBbGlnbj17VGV4dEFsaWduLkNlbnRlcn1cbiAgICAgICAgPlxuICAgICAgICAgIHtlc3RpbWF0ZWRNaW5pbXVtTmF0aXZlfVxuICAgICAgICA8L1RleHQ+XG4gICAgICAgIHtyZXF1aXJlRGFwcEFja25vd2xlZGdlbWVudCAmJiAoXG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZWRpdC1nYXMtZGlzcGxheV9fZGFwcC1hY2tub3dsZWRnZW1lbnQtYnV0dG9uXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldERhcHBTdWdnZXN0ZWRHYXNGZWVBY2tub3dsZWRnZWQodHJ1ZSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3QoJ2dhc0Rpc3BsYXlBY2tub3dsZWRnZURhcHBCdXR0b25UZXh0Jyl9XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICl9XG4gICAgICAgIHshcmVxdWlyZURhcHBBY2tub3dsZWRnZW1lbnQgJiYgKFxuICAgICAgICAgIDxBZHZhbmNlZEdhc0NvbnRyb2xzXG4gICAgICAgICAgICBnYXNMaW1pdD17Z2FzTGltaXR9XG4gICAgICAgICAgICBzZXRHYXNMaW1pdD17c2V0R2FzTGltaXR9XG4gICAgICAgICAgICBnYXNQcmljZT17Z2FzUHJpY2V9XG4gICAgICAgICAgICBzZXRHYXNQcmljZT17c2V0R2FzUHJpY2V9XG4gICAgICAgICAgICBvbk1hbnVhbENoYW5nZT17b25NYW51YWxDaGFuZ2V9XG4gICAgICAgICAgICBtaW5pbXVtR2FzTGltaXQ9e21pbmltdW1HYXNMaW1pdH1cbiAgICAgICAgICAgIGdhc0Vycm9ycz17Z2FzRXJyb3JzfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgcmVmPXtzY3JvbGxSZWZ9IGNsYXNzTmFtZT1cImVkaXQtZ2FzLWRpc3BsYXlfX3Njcm9sbC1ib3R0b21cIiAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5FZGl0R2FzRGlzcGxheS5wcm9wVHlwZXMgPSB7XG4gIG1vZGU6IFByb3BUeXBlcy5vbmVPZihPYmplY3QudmFsdWVzKEVkaXRHYXNNb2RlcykpLFxuICBlc3RpbWF0ZWRNaW5pbXVtTmF0aXZlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBnYXNQcmljZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgc2V0R2FzUHJpY2U6IFByb3BUeXBlcy5mdW5jLFxuICBnYXNMaW1pdDogUHJvcFR5cGVzLm51bWJlcixcbiAgc2V0R2FzTGltaXQ6IFByb3BUeXBlcy5mdW5jLFxuICBwcm9wZXJHYXNMaW1pdDogUHJvcFR5cGVzLm51bWJlcixcbiAgZGFwcFN1Z2dlc3RlZEdhc0ZlZUFja25vd2xlZGdlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHNldERhcHBTdWdnZXN0ZWRHYXNGZWVBY2tub3dsZWRnZWQ6IFByb3BUeXBlcy5mdW5jLFxuICB0cmFuc2FjdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgb25NYW51YWxDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBtaW5pbXVtR2FzTGltaXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGJhbGFuY2VFcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIGdhc0Vycm9yczogUHJvcFR5cGVzLm9iamVjdCxcbiAgdHhQYXJhbXNIYXZlQmVlbkN1c3RvbWl6ZWQ6IFByb3BUeXBlcy5ib29sLFxufTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2VkaXQtZ2FzLWRpc3BsYXkuY29tcG9uZW50JztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBFZGl0R2FzTW9kZXMsIFByaW9yaXR5TGV2ZWxzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9nYXMnO1xuaW1wb3J0IHtcbiAgQ29sb3IsXG4gIFRleHRDb2xvcixcbiAgVGV4dFZhcmlhbnQsXG59IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgUFJJT1JJVFlfTEVWRUxfSUNPTl9NQVAgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9nYXMnO1xuaW1wb3J0IHsgdXNlR2FzRmVlQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbnRleHRzL2dhc0ZlZSc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7IHVzZVRyYW5zYWN0aW9uRXZlbnRGcmFnbWVudCB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZVRyYW5zYWN0aW9uRXZlbnRGcmFnbWVudCc7XG5pbXBvcnQgeyB1c2VUcmFuc2FjdGlvbk1vZGFsQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbnRleHRzL3RyYW5zYWN0aW9uLW1vZGFsJztcbmltcG9ydCBJbmZvVG9vbHRpcCBmcm9tICcuLi8uLi91aS9pbmZvLXRvb2x0aXAvaW5mby10b29sdGlwJztcbmltcG9ydCB7IEljb24sIEljb25OYW1lLCBJY29uU2l6ZSwgVGV4dCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRWRpdEdhc0ZlZUJ1dHRvbih7IHVzZXJBY2tub3dsZWRnZWRHYXNNaXNzaW5nIH0pIHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IHtcbiAgICBlZGl0R2FzTW9kZSxcbiAgICBnYXNMaW1pdCxcbiAgICBoYXNTaW11bGF0aW9uRXJyb3IsXG4gICAgZXN0aW1hdGVVc2VkLFxuICAgIG1heEZlZVBlckdhcyxcbiAgICBtYXhQcmlvcml0eUZlZVBlckdhcyxcbiAgICBzdXBwb3J0c0VJUDE1NTksXG4gICAgdHJhbnNhY3Rpb24sXG4gIH0gPSB1c2VHYXNGZWVDb250ZXh0KCk7XG4gIGNvbnN0IHsgdXBkYXRlVHJhbnNhY3Rpb25FdmVudEZyYWdtZW50IH0gPSB1c2VUcmFuc2FjdGlvbkV2ZW50RnJhZ21lbnQoKTtcbiAgY29uc3QgeyBvcGVuTW9kYWwgfSA9IHVzZVRyYW5zYWN0aW9uTW9kYWxDb250ZXh0KCk7XG4gIGNvbnN0IGVkaXRFbmFibGVkID1cbiAgICAhaGFzU2ltdWxhdGlvbkVycm9yIHx8IHVzZXJBY2tub3dsZWRnZWRHYXNNaXNzaW5nID09PSB0cnVlO1xuXG4gIGlmICghc3VwcG9ydHNFSVAxNTU5IHx8ICFlc3RpbWF0ZVVzZWQgfHwgIWVkaXRFbmFibGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgaWNvbiA9IGVzdGltYXRlVXNlZDtcbiAgbGV0IHRpdGxlID0gZXN0aW1hdGVVc2VkO1xuICBpZiAoXG4gICAgZXN0aW1hdGVVc2VkID09PSBQcmlvcml0eUxldmVscy5oaWdoICYmXG4gICAgZWRpdEdhc01vZGUgPT09IEVkaXRHYXNNb2Rlcy5zd2Fwc1xuICApIHtcbiAgICBpY29uID0gJ3N3YXBTdWdnZXN0ZWQnO1xuICAgIHRpdGxlID0gJ3N3YXBTdWdnZXN0ZWQnO1xuICB9IGVsc2UgaWYgKGVzdGltYXRlVXNlZCA9PT0gUHJpb3JpdHlMZXZlbHMudGVuUGVyY2VudEluY3JlYXNlZCkge1xuICAgIGljb24gPSB1bmRlZmluZWQ7XG4gICAgdGl0bGUgPSAndGVuUGVyY2VudEluY3JlYXNlZCc7XG4gIH1cblxuICBjb25zdCBvcGVuRWRpdEdhc0ZlZU1vZGFsID0gKCkgPT4ge1xuICAgIHVwZGF0ZVRyYW5zYWN0aW9uRXZlbnRGcmFnbWVudCh7XG4gICAgICBnYXNfZWRpdF9hdHRlbXB0ZWQ6ICdiYXNpYycsXG4gICAgfSk7XG4gICAgb3Blbk1vZGFsKCdlZGl0R2FzRmVlJyk7XG4gIH07XG5cbiAgY29uc3Qgb3BlbkFkdmFuY2VkR2FzRmVlTW9kYWwgPSAoKSA9PiB7XG4gICAgdXBkYXRlVHJhbnNhY3Rpb25FdmVudEZyYWdtZW50KHtcbiAgICAgIGdhc19lZGl0X2F0dGVtcHRlZDogJ2FkdmFuY2VkJyxcbiAgICB9KTtcbiAgICBvcGVuTW9kYWwoJ2FkdmFuY2VkR2FzRmVlJyk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtZ2FzLWZlZS1idXR0b25cIj5cbiAgICAgIDxidXR0b24gb25DbGljaz17b3BlbkVkaXRHYXNGZWVNb2RhbH0gZGF0YS10ZXN0aWQ9XCJlZGl0LWdhcy1mZWUtYnV0dG9uXCI+XG4gICAgICAgIHtpY29uICYmIChcbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJlZGl0LWdhcy1mZWUtYnV0dG9uX19pY29uXCI+XG4gICAgICAgICAgICB7UFJJT1JJVFlfTEVWRUxfSUNPTl9NQVBbaWNvbl19XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICApfVxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJlZGl0LWdhcy1mZWUtYnV0dG9uX19sYWJlbFwiPnt0KHRpdGxlKX08L3NwYW4+XG4gICAgICAgIDxJY29uXG4gICAgICAgICAgbmFtZT17SWNvbk5hbWUuQXJyb3dSaWdodH1cbiAgICAgICAgICBjb2xvcj17Q29sb3IucHJpbWFyeURlZmF1bHR9XG4gICAgICAgICAgc2l6ZT17SWNvblNpemUuWHN9XG4gICAgICAgIC8+XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIHtlc3RpbWF0ZVVzZWQgPT09ICdjdXN0b20nICYmIChcbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtvcGVuQWR2YW5jZWRHYXNGZWVNb2RhbH0+e3QoJ2VkaXQnKX08L2J1dHRvbj5cbiAgICAgICl9XG4gICAgICB7ZXN0aW1hdGVVc2VkID09PSAnZGFwcFN1Z2dlc3RlZCcgJiYgKFxuICAgICAgICA8SW5mb1Rvb2x0aXBcbiAgICAgICAgICBjb250ZW50VGV4dD17XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtZ2FzLWZlZS1idXR0b25fX3Rvb2x0aXBcIj5cbiAgICAgICAgICAgICAge3RyYW5zYWN0aW9uPy5vcmlnaW4gJiYgKFxuICAgICAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219XG4gICAgICAgICAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IudGV4dEFsdGVybmF0aXZlfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHt0KCdkYXBwU3VnZ2VzdGVkVG9vbHRpcCcsIFt0cmFuc2FjdGlvbi5vcmlnaW5dKX1cbiAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX0gYXM9XCJoNlwiPlxuICAgICAgICAgICAgICAgIDxiPnt0KCdtYXhCYXNlRmVlJyl9PC9iPiB7bWF4RmVlUGVyR2FzfVxuICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX0gYXM9XCJoNlwiPlxuICAgICAgICAgICAgICAgIDxiPnt0KCdtYXhQcmlvcml0eUZlZScpfTwvYj4ge21heFByaW9yaXR5RmVlUGVyR2FzfVxuICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX0gYXM9XCJoNlwiPlxuICAgICAgICAgICAgICAgIDxiPnt0KCdnYXNMaW1pdCcpfTwvYj4ge2dhc0xpbWl0fVxuICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB9XG4gICAgICAgICAgcG9zaXRpb249XCJ0b3BcIlxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuRWRpdEdhc0ZlZUJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIHVzZXJBY2tub3dsZWRnZWRHYXNNaXNzaW5nOiBQcm9wVHlwZXMuYm9vbCxcbn07XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9lZGl0LWdhcy1mZWUtYnV0dG9uJztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEVkaXRHYXNNb2RlcywgUHJpb3JpdHlMZXZlbHMgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2dhcyc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7IHVzZVRyYW5zYWN0aW9uTW9kYWxDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dHMvdHJhbnNhY3Rpb24tbW9kYWwnO1xuaW1wb3J0IEJveCBmcm9tICcuLi8uLi91aS9ib3gnO1xuaW1wb3J0IEVycm9yTWVzc2FnZSBmcm9tICcuLi8uLi91aS9lcnJvci1tZXNzYWdlJztcbmltcG9ydCBQb3BvdmVyIGZyb20gJy4uLy4uL3VpL3BvcG92ZXInO1xuXG5pbXBvcnQge1xuICBUZXh0Q29sb3IsXG4gIFRleHRWYXJpYW50LFxufSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IElOU1VGRklDSUVOVF9GVU5EU19FUlJPUl9LRVkgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9lcnJvci1rZXlzJztcbmltcG9ydCB7IHVzZUdhc0ZlZUNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb250ZXh0cy9nYXNGZWUnO1xuaW1wb3J0IEFwcExvYWRpbmdTcGlubmVyIGZyb20gJy4uL2FwcC1sb2FkaW5nLXNwaW5uZXInO1xuaW1wb3J0IFpFTkRFU0tfVVJMUyBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy96ZW5kZXNrLXVybCc7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50LWxpYnJhcnknO1xuaW1wb3J0IEVkaXRHYXNJdGVtIGZyb20gJy4vZWRpdC1nYXMtaXRlbSc7XG5pbXBvcnQgTmV0d29ya1N0YXRpc3RpY3MgZnJvbSAnLi9uZXR3b3JrLXN0YXRpc3RpY3MnO1xuXG5jb25zdCBFZGl0R2FzRmVlUG9wb3ZlciA9ICgpID0+IHtcbiAgY29uc3QgeyBiYWxhbmNlRXJyb3IsIGVkaXRHYXNNb2RlIH0gPSB1c2VHYXNGZWVDb250ZXh0KCk7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBjb25zdCB7IGNsb3NlQWxsTW9kYWxzLCBjbG9zZU1vZGFsLCBjdXJyZW50TW9kYWwsIG9wZW5Nb2RhbENvdW50IH0gPVxuICAgIHVzZVRyYW5zYWN0aW9uTW9kYWxDb250ZXh0KCk7XG5cbiAgaWYgKGN1cnJlbnRNb2RhbCAhPT0gJ2VkaXRHYXNGZWUnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgcG9wdXBUaXRsZSA9ICdlZGl0R2FzRmVlTW9kYWxUaXRsZSc7XG4gIGlmIChlZGl0R2FzTW9kZSA9PT0gRWRpdEdhc01vZGVzLmNhbmNlbCkge1xuICAgIHBvcHVwVGl0bGUgPSAnZWRpdENhbmNlbGxhdGlvbkdhc0ZlZU1vZGFsVGl0bGUnO1xuICB9IGVsc2UgaWYgKGVkaXRHYXNNb2RlID09PSBFZGl0R2FzTW9kZXMuc3BlZWRVcCkge1xuICAgIHBvcHVwVGl0bGUgPSAnZWRpdFNwZWVkVXBFZGl0R2FzRmVlTW9kYWxUaXRsZSc7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxQb3BvdmVyXG4gICAgICB0aXRsZT17dChwb3B1cFRpdGxlKX1cbiAgICAgIC8vIGJlbG93IGxvZ2ljIGVuc3VyZXMgdGhhdCBiYWNrIGJ1dHRvbiBpcyB2aXNpYmxlIG9ubHkgaWYgdGhlcmUgYXJlIG90aGVyIG1vZGFscyBvcGVuIGJlZm9yZSB0aGlzLlxuICAgICAgb25CYWNrPXtcbiAgICAgICAgb3Blbk1vZGFsQ291bnQgPT09IDEgPyB1bmRlZmluZWQgOiAoKSA9PiBjbG9zZU1vZGFsKFsnZWRpdEdhc0ZlZSddKVxuICAgICAgfVxuICAgICAgb25DbG9zZT17Y2xvc2VBbGxNb2RhbHN9XG4gICAgICBjbGFzc05hbWU9XCJlZGl0LWdhcy1mZWUtcG9wb3ZlclwiXG4gICAgPlxuICAgICAgPD5cbiAgICAgICAgPEFwcExvYWRpbmdTcGlubmVyIC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1nYXMtZmVlLXBvcG92ZXJfX3dyYXBwZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtZ2FzLWZlZS1wb3BvdmVyX19jb250ZW50XCI+XG4gICAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAgICB7YmFsYW5jZUVycm9yICYmIChcbiAgICAgICAgICAgICAgICA8RXJyb3JNZXNzYWdlIGVycm9yS2V5PXtJTlNVRkZJQ0lFTlRfRlVORFNfRVJST1JfS0VZfSAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtZ2FzLWZlZS1wb3BvdmVyX19jb250ZW50X19oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJlZGl0LWdhcy1mZWUtcG9wb3Zlcl9fY29udGVudF9faGVhZGVyLW9wdGlvblwiPlxuICAgICAgICAgICAgICAgICAge3QoJ2dhc09wdGlvbicpfVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJlZGl0LWdhcy1mZWUtcG9wb3Zlcl9fY29udGVudF9faGVhZGVyLXRpbWVcIj5cbiAgICAgICAgICAgICAgICAgIHtlZGl0R2FzTW9kZSAhPT0gRWRpdEdhc01vZGVzLnN3YXBzICYmIHQoJ3RpbWUnKX1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZWRpdC1nYXMtZmVlLXBvcG92ZXJfX2NvbnRlbnRfX2hlYWRlci1tYXgtZmVlXCI+XG4gICAgICAgICAgICAgICAgICB7dCgnbWF4RmVlJyl9XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgeyhlZGl0R2FzTW9kZSA9PT0gRWRpdEdhc01vZGVzLmNhbmNlbCB8fFxuICAgICAgICAgICAgICAgIGVkaXRHYXNNb2RlID09PSBFZGl0R2FzTW9kZXMuc3BlZWRVcCkgJiYgKFxuICAgICAgICAgICAgICAgIDxFZGl0R2FzSXRlbVxuICAgICAgICAgICAgICAgICAgcHJpb3JpdHlMZXZlbD17UHJpb3JpdHlMZXZlbHMudGVuUGVyY2VudEluY3JlYXNlZH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICB7ZWRpdEdhc01vZGUgPT09IEVkaXRHYXNNb2Rlcy5tb2RpZnlJblBsYWNlICYmIChcbiAgICAgICAgICAgICAgICA8RWRpdEdhc0l0ZW0gcHJpb3JpdHlMZXZlbD17UHJpb3JpdHlMZXZlbHMubG93fSAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8RWRpdEdhc0l0ZW0gcHJpb3JpdHlMZXZlbD17UHJpb3JpdHlMZXZlbHMubWVkaXVtfSAvPlxuICAgICAgICAgICAgICA8RWRpdEdhc0l0ZW0gcHJpb3JpdHlMZXZlbD17UHJpb3JpdHlMZXZlbHMuaGlnaH0gLz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWdhcy1mZWUtcG9wb3Zlcl9fY29udGVudF9fc2VwYXJhdG9yXCIgLz5cbiAgICAgICAgICAgICAge2VkaXRHYXNNb2RlID09PSBFZGl0R2FzTW9kZXMubW9kaWZ5SW5QbGFjZSAmJiAoXG4gICAgICAgICAgICAgICAgPEVkaXRHYXNJdGVtIHByaW9yaXR5TGV2ZWw9e1ByaW9yaXR5TGV2ZWxzLmRBcHBTdWdnZXN0ZWR9IC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDxFZGl0R2FzSXRlbSBwcmlvcml0eUxldmVsPXtQcmlvcml0eUxldmVscy5jdXN0b219IC8+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIDxCb3g+XG4gICAgICAgICAgICAgIDxOZXR3b3JrU3RhdGlzdGljcyAvPlxuICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVkaXQtZ2FzLWZlZS1wb3BvdmVyX19rbm93LW1vcmVcIlxuICAgICAgICAgICAgICAgIGFsaWduPVwiY2VudGVyXCJcbiAgICAgICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHRBbHRlcm5hdGl2ZX1cbiAgICAgICAgICAgICAgICB0YWc9e1RleHRWYXJpYW50LmJvZHlNZH1cbiAgICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219XG4gICAgICAgICAgICAgICAgYXM9XCJoNlwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7dCgnbGVhcm5Nb3JlQWJvdXRHYXMnLCBbXG4gICAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgICBrZXk9XCJsZWFybk1vcmVMaW5rXCJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgICAgICAgICAgIGhyZWY9e1pFTkRFU0tfVVJMUy5VU0VSX0dVSURFX0dBU31cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge3QoJ2xlYXJuTW9yZScpfVxuICAgICAgICAgICAgICAgICAgPC9hPixcbiAgICAgICAgICAgICAgICBdKX1cbiAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC8+XG4gICAgPC9Qb3BvdmVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRWRpdEdhc0ZlZVBvcG92ZXI7XG4iLCJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICBFZGl0R2FzTW9kZXMsXG4gIFByaW9yaXR5TGV2ZWxzLFxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2dhcyc7XG5pbXBvcnQgeyBQUklPUklUWV9MRVZFTF9JQ09OX01BUCB9IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2dhcyc7XG5pbXBvcnQgeyBQUklNQVJZIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvY29tbW9uJztcbmltcG9ydCB7IHRvSHVtYW5SZWFkYWJsZVRpbWUgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgdXNlR2FzRmVlQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbnRleHRzL2dhc0ZlZSc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7IHVzZVRyYW5zYWN0aW9uRXZlbnRGcmFnbWVudCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZVRyYW5zYWN0aW9uRXZlbnRGcmFnbWVudCc7XG5pbXBvcnQgeyB1c2VUcmFuc2FjdGlvbk1vZGFsQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbnRleHRzL3RyYW5zYWN0aW9uLW1vZGFsJztcbmltcG9ydCBJbmZvVG9vbHRpcCBmcm9tICcuLi8uLi8uLi91aS9pbmZvLXRvb2x0aXAnO1xuaW1wb3J0IExvYWRpbmdIZWFydEJlYXQgZnJvbSAnLi4vLi4vLi4vdWkvbG9hZGluZy1oZWFydGJlYXQnO1xuaW1wb3J0IFVzZXJQcmVmZXJlbmNlZEN1cnJlbmN5RGlzcGxheSBmcm9tICcuLi8uLi91c2VyLXByZWZlcmVuY2VkLWN1cnJlbmN5LWRpc3BsYXknO1xuaW1wb3J0IEVkaXRHYXNUb29sVGlwIGZyb20gJy4uL2VkaXQtZ2FzLXRvb2x0aXAvZWRpdC1nYXMtdG9vbHRpcCc7XG5cbmltcG9ydCB7IHVzZUdhc0l0ZW1GZWVEZXRhaWxzIH0gZnJvbSAnLi91c2VHYXNJdGVtRmVlRGV0YWlscyc7XG5cbmNvbnN0IGdldFRpdGxlQW5kSWNvbiA9IChwcmlvcml0eUxldmVsLCBlZGl0R2FzTW9kZSkgPT4ge1xuICBsZXQgaWNvbiA9IHByaW9yaXR5TGV2ZWw7XG4gIGxldCB0aXRsZSA9IHByaW9yaXR5TGV2ZWw7XG4gIGlmIChwcmlvcml0eUxldmVsID09PSBQcmlvcml0eUxldmVscy5kQXBwU3VnZ2VzdGVkKSB7XG4gICAgdGl0bGUgPSAnZGFwcFN1Z2dlc3RlZFNob3J0TGFiZWwnO1xuICB9IGVsc2UgaWYgKHByaW9yaXR5TGV2ZWwgPT09IFByaW9yaXR5TGV2ZWxzLnRlblBlcmNlbnRJbmNyZWFzZWQpIHtcbiAgICBpY29uID0gbnVsbDtcbiAgICB0aXRsZSA9ICd0ZW5QZXJjZW50SW5jcmVhc2VkJztcbiAgfSBlbHNlIGlmIChcbiAgICBwcmlvcml0eUxldmVsID09PSBQcmlvcml0eUxldmVscy5oaWdoICYmXG4gICAgZWRpdEdhc01vZGUgPT09IEVkaXRHYXNNb2Rlcy5zd2Fwc1xuICApIHtcbiAgICBpY29uID0gJ3N3YXBTdWdnZXN0ZWQnO1xuICAgIHRpdGxlID0gJ3N3YXBTdWdnZXN0ZWQnO1xuICB9XG4gIHJldHVybiB7IHRpdGxlLCBpY29uIH07XG59O1xuXG5jb25zdCBFZGl0R2FzSXRlbSA9ICh7IHByaW9yaXR5TGV2ZWwgfSkgPT4ge1xuICBjb25zdCB7XG4gICAgZWRpdEdhc01vZGUsXG4gICAgZXN0aW1hdGVVc2VkLFxuICAgIGdhc0xpbWl0LFxuICAgIHVwZGF0ZVRyYW5zYWN0aW9uVG9UZW5QZXJjZW50SW5jcmVhc2VkR2FzRmVlLFxuICAgIHVwZGF0ZVRyYW5zYWN0aW9uVXNpbmdEQVBQU3VnZ2VzdGVkVmFsdWVzLFxuICAgIHVwZGF0ZVRyYW5zYWN0aW9uVXNpbmdFc3RpbWF0ZSxcbiAgICB0cmFuc2FjdGlvbixcbiAgfSA9IHVzZUdhc0ZlZUNvbnRleHQoKTtcbiAgY29uc3QgeyB1cGRhdGVUcmFuc2FjdGlvbkV2ZW50RnJhZ21lbnQgfSA9IHVzZVRyYW5zYWN0aW9uRXZlbnRGcmFnbWVudCgpO1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcbiAgY29uc3QgeyBjbG9zZU1vZGFsLCBvcGVuTW9kYWwgfSA9IHVzZVRyYW5zYWN0aW9uTW9kYWxDb250ZXh0KCk7XG4gIGNvbnN0IHsgZGFwcFN1Z2dlc3RlZEdhc0ZlZXMgfSA9IHRyYW5zYWN0aW9uO1xuXG4gIGNvbnN0IHtcbiAgICAvLyBmb3IgY2FuY2VsIG9yIHNwZWVkdXAgZXN0aW1hdGVHcmVhdGVyVGhhR2FzVXNlIGlzIHRydWUgaWYgcHJldmlvdXMgZ2FzIHVzZWRcbiAgICAvLyB3YXMgbW9yZSB0aGFuIGVzdGltYXRlIGZvciB0aGUgcHJpb3JpdHlMZXZlbFxuICAgIGVzdGltYXRlR3JlYXRlclRoYW5HYXNVc2UsXG4gICAgaGV4TWF4aW11bVRyYW5zYWN0aW9uRmVlLFxuICAgIG1heEZlZVBlckdhcyxcbiAgICBtYXhQcmlvcml0eUZlZVBlckdhcyxcbiAgICBtaW5XYWl0VGltZSxcbiAgfSA9IHVzZUdhc0l0ZW1GZWVEZXRhaWxzKHByaW9yaXR5TGV2ZWwpO1xuXG4gIGlmIChcbiAgICBwcmlvcml0eUxldmVsID09PSBQcmlvcml0eUxldmVscy5kQXBwU3VnZ2VzdGVkICYmXG4gICAgIWRhcHBTdWdnZXN0ZWRHYXNGZWVzPy5tYXhGZWVQZXJHYXMgJiZcbiAgICAhZGFwcFN1Z2dlc3RlZEdhc0ZlZXM/Lmdhc1ByaWNlXG4gICkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3Qgb25PcHRpb25TZWxlY3QgPSAoKSA9PiB7XG4gICAgaWYgKHByaW9yaXR5TGV2ZWwgPT09IFByaW9yaXR5TGV2ZWxzLmN1c3RvbSkge1xuICAgICAgdXBkYXRlVHJhbnNhY3Rpb25FdmVudEZyYWdtZW50KHtcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIGdhc19lZGl0X2F0dGVtcHRlZDogJ2FkdmFuY2VkJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgb3Blbk1vZGFsKCdhZHZhbmNlZEdhc0ZlZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cGRhdGVUcmFuc2FjdGlvbkV2ZW50RnJhZ21lbnQoe1xuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgZ2FzX2VkaXRfdHlwZTogJ2Jhc2ljJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBjbG9zZU1vZGFsKFsnZWRpdEdhc0ZlZSddKTtcblxuICAgICAgaWYgKHByaW9yaXR5TGV2ZWwgPT09IFByaW9yaXR5TGV2ZWxzLnRlblBlcmNlbnRJbmNyZWFzZWQpIHtcbiAgICAgICAgdXBkYXRlVHJhbnNhY3Rpb25Ub1RlblBlcmNlbnRJbmNyZWFzZWRHYXNGZWUoKTtcbiAgICAgIH0gZWxzZSBpZiAocHJpb3JpdHlMZXZlbCA9PT0gUHJpb3JpdHlMZXZlbHMuZEFwcFN1Z2dlc3RlZCkge1xuICAgICAgICB1cGRhdGVUcmFuc2FjdGlvblVzaW5nREFQUFN1Z2dlc3RlZFZhbHVlcygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXBkYXRlVHJhbnNhY3Rpb25Vc2luZ0VzdGltYXRlKHByaW9yaXR5TGV2ZWwpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCB7IHRpdGxlLCBpY29uIH0gPSBnZXRUaXRsZUFuZEljb24ocHJpb3JpdHlMZXZlbCwgZWRpdEdhc01vZGUpO1xuXG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdlZGl0LWdhcy1pdGVtJywge1xuICAgICAgICAnZWRpdC1nYXMtaXRlbS0tc2VsZWN0ZWQnOiBwcmlvcml0eUxldmVsID09PSBlc3RpbWF0ZVVzZWQsXG4gICAgICAgICdlZGl0LWdhcy1pdGVtLS1kaXNhYmxlZCc6IGVzdGltYXRlR3JlYXRlclRoYW5HYXNVc2UsXG4gICAgICB9KX1cbiAgICAgIG9uQ2xpY2s9e29uT3B0aW9uU2VsZWN0fVxuICAgICAgYXJpYS1sYWJlbD17cHJpb3JpdHlMZXZlbH1cbiAgICAgIGF1dG9Gb2N1cz17cHJpb3JpdHlMZXZlbCA9PT0gZXN0aW1hdGVVc2VkfVxuICAgICAgZGlzYWJsZWQ9e2VzdGltYXRlR3JlYXRlclRoYW5HYXNVc2V9XG4gICAgICBkYXRhLXRlc3RpZD17YGVkaXQtZ2FzLWZlZS1pdGVtLSR7cHJpb3JpdHlMZXZlbH1gfVxuICAgID5cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImVkaXQtZ2FzLWl0ZW1fX25hbWVcIj5cbiAgICAgICAge2ljb24gJiYgKFxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBjbGFzc05hbWU9e2BlZGl0LWdhcy1pdGVtX19pY29uIGVkaXQtZ2FzLWl0ZW1fX2ljb24tJHtwcmlvcml0eUxldmVsfWB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge1BSSU9SSVRZX0xFVkVMX0lDT05fTUFQW2ljb25dfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgKX1cbiAgICAgICAge3QodGl0bGUpfVxuICAgICAgPC9zcGFuPlxuICAgICAgPHNwYW5cbiAgICAgICAgY2xhc3NOYW1lPXtgZWRpdC1nYXMtaXRlbV9fdGltZS1lc3RpbWF0ZSBlZGl0LWdhcy1pdGVtX190aW1lLWVzdGltYXRlLSR7cHJpb3JpdHlMZXZlbH1gfVxuICAgICAgPlxuICAgICAgICB7ZWRpdEdhc01vZGUgIT09IEVkaXRHYXNNb2Rlcy5zd2FwcyAmJlxuICAgICAgICAgIChtaW5XYWl0VGltZSA/IHRvSHVtYW5SZWFkYWJsZVRpbWUodCwgbWluV2FpdFRpbWUpIDogJy0tJyl9XG4gICAgICA8L3NwYW4+XG4gICAgICA8c3BhblxuICAgICAgICBjbGFzc05hbWU9e2BlZGl0LWdhcy1pdGVtX19mZWUtZXN0aW1hdGUgZWRpdC1nYXMtaXRlbV9fZmVlLWVzdGltYXRlLSR7cHJpb3JpdHlMZXZlbH1gfVxuICAgICAgPlxuICAgICAgICB7aGV4TWF4aW11bVRyYW5zYWN0aW9uRmVlID8gKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1nYXMtaXRlbV9fbWF4ZmVlXCI+XG4gICAgICAgICAgICA8TG9hZGluZ0hlYXJ0QmVhdFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9e1xuICAgICAgICAgICAgICAgIHByaW9yaXR5TGV2ZWwgPT09IGVzdGltYXRlVXNlZFxuICAgICAgICAgICAgICAgICAgPyAndmFyKC0tY29sb3ItYmFja2dyb3VuZC1hbHRlcm5hdGl2ZSknXG4gICAgICAgICAgICAgICAgICA6ICd2YXIoLS1jb2xvci1iYWNrZ3JvdW5kLWRlZmF1bHQpJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVzdGltYXRlVXNlZD17cHJpb3JpdHlMZXZlbH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8VXNlclByZWZlcmVuY2VkQ3VycmVuY3lEaXNwbGF5XG4gICAgICAgICAgICAgIGtleT1cImVkaXRHYXNTdWJUZXh0RmVlQW1vdW50XCJcbiAgICAgICAgICAgICAgdHlwZT17UFJJTUFSWX1cbiAgICAgICAgICAgICAgdmFsdWU9e2hleE1heGltdW1UcmFuc2FjdGlvbkZlZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgJy0tJ1xuICAgICAgICApfVxuICAgICAgPC9zcGFuPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZWRpdC1nYXMtaXRlbV9fdG9vbHRpcFwiIGRhdGEtdGVzdGlkPVwiZ2FzLXRvb2x0aXBcIj5cbiAgICAgICAgPEluZm9Ub29sdGlwXG4gICAgICAgICAgY29udGVudFRleHQ9e1xuICAgICAgICAgICAgPEVkaXRHYXNUb29sVGlwXG4gICAgICAgICAgICAgIHQ9e3R9XG4gICAgICAgICAgICAgIHByaW9yaXR5TGV2ZWw9e3ByaW9yaXR5TGV2ZWx9XG4gICAgICAgICAgICAgIG1heEZlZVBlckdhcz17bWF4RmVlUGVyR2FzfVxuICAgICAgICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhcz17bWF4UHJpb3JpdHlGZWVQZXJHYXN9XG4gICAgICAgICAgICAgIGVkaXRHYXNNb2RlPXtlZGl0R2FzTW9kZX1cbiAgICAgICAgICAgICAgZ2FzTGltaXQ9e2dhc0xpbWl0fVxuICAgICAgICAgICAgICB0cmFuc2FjdGlvbj17dHJhbnNhY3Rpb259XG4gICAgICAgICAgICAgIGVzdGltYXRlR3JlYXRlclRoYW5HYXNVc2U9e2VzdGltYXRlR3JlYXRlclRoYW5HYXNVc2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIH1cbiAgICAgICAgICBwb3NpdGlvbj1cInRvcFwiXG4gICAgICAgIC8+XG4gICAgICA8L3NwYW4+XG4gICAgPC9idXR0b24+XG4gICk7XG59O1xuXG5FZGl0R2FzSXRlbS5wcm9wVHlwZXMgPSB7XG4gIHByaW9yaXR5TGV2ZWw6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBFZGl0R2FzSXRlbTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2VkaXQtZ2FzLWl0ZW0nO1xuIiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IEJpZ051bWJlciBmcm9tICdiaWdudW1iZXIuanMnO1xuXG5pbXBvcnQgeyBHYXNFc3RpbWF0ZVR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9nYXMnO1xuaW1wb3J0IHtcbiAgZ2V0R2FzRXN0aW1hdGVUeXBlLFxuICBnZXRJc0dhc0VzdGltYXRlc0xvYWRpbmcsXG59IGZyb20gJy4uLy4uLy4uLy4uL2R1Y2tzL21ldGFtYXNrL21ldGFtYXNrJztcbmltcG9ydCB7IGdldEdhc0ZlZVRpbWVFc3RpbWF0ZSB9IGZyb20gJy4uLy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuXG5leHBvcnQgY29uc3QgdXNlQ3VzdG9tVGltZUVzdGltYXRlID0gKHtcbiAgZ2FzRmVlRXN0aW1hdGVzLFxuICBtYXhGZWVQZXJHYXMsXG4gIG1heFByaW9yaXR5RmVlUGVyR2FzLFxufSkgPT4ge1xuICBjb25zdCBnYXNFc3RpbWF0ZVR5cGUgPSB1c2VTZWxlY3RvcihnZXRHYXNFc3RpbWF0ZVR5cGUpO1xuICBjb25zdCBpc0dhc0VzdGltYXRlc0xvYWRpbmcgPSB1c2VTZWxlY3RvcihnZXRJc0dhc0VzdGltYXRlc0xvYWRpbmcpO1xuXG4gIGNvbnN0IFtjdXN0b21Fc3RpbWF0ZWRUaW1lLCBzZXRDdXN0b21Fc3RpbWF0ZWRUaW1lXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gIGNvbnN0IHJldHVybk5vRXN0aW1hdGVzID1cbiAgICBpc0dhc0VzdGltYXRlc0xvYWRpbmcgfHxcbiAgICBnYXNFc3RpbWF0ZVR5cGUgIT09IEdhc0VzdGltYXRlVHlwZXMuZmVlTWFya2V0IHx8XG4gICAgIW1heFByaW9yaXR5RmVlUGVyR2FzO1xuXG4gIC8vIElmIHRoZSB1c2VyIGhhcyBjaG9zZW4gYSB2YWx1ZSBsb3dlciB0aGFuIHRoZSBsb3cgZ2FzIGZlZSBlc3RpbWF0ZSxcbiAgLy8gV2UnbGwgbmVlZCB0byB1c2UgdGhlIHVzZUVmZmVjdCBob29rIGJlbG93IHRvIG1ha2UgYSBjYWxsIHRvIGNhbGN1bGF0ZVxuICAvLyB0aGUgdGltZSB0byBzaG93XG4gIGNvbnN0IGlzVW5rbm93bkxvdyA9XG4gICAgZ2FzRmVlRXN0aW1hdGVzPy5sb3cgJiZcbiAgICBOdW1iZXIobWF4UHJpb3JpdHlGZWVQZXJHYXMpIDxcbiAgICAgIE51bWJlcihnYXNGZWVFc3RpbWF0ZXMubG93LnN1Z2dlc3RlZE1heFByaW9yaXR5RmVlUGVyR2FzKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChcbiAgICAgIGlzR2FzRXN0aW1hdGVzTG9hZGluZyB8fFxuICAgICAgZ2FzRXN0aW1hdGVUeXBlICE9PSBHYXNFc3RpbWF0ZVR5cGVzLmZlZU1hcmtldCB8fFxuICAgICAgIW1heFByaW9yaXR5RmVlUGVyR2FzXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Vua25vd25Mb3cpIHtcbiAgICAgIC8vIGdldEdhc0ZlZVRpbWVFc3RpbWF0ZSByZXF1aXJlcyBwYXJhbWV0ZXJzIGluIHN0cmluZyBmb3JtYXRcbiAgICAgIGdldEdhc0ZlZVRpbWVFc3RpbWF0ZShcbiAgICAgICAgbmV3IEJpZ051bWJlcihtYXhQcmlvcml0eUZlZVBlckdhcywgMTApLnRvU3RyaW5nKDEwKSxcbiAgICAgICAgbmV3IEJpZ051bWJlcihtYXhGZWVQZXJHYXMsIDEwKS50b1N0cmluZygxMCksXG4gICAgICApLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBzZXRDdXN0b21Fc3RpbWF0ZWRUaW1lKHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtcbiAgICBnYXNFc3RpbWF0ZVR5cGUsXG4gICAgaXNVbmtub3duTG93LFxuICAgIGlzR2FzRXN0aW1hdGVzTG9hZGluZyxcbiAgICBtYXhGZWVQZXJHYXMsXG4gICAgbWF4UHJpb3JpdHlGZWVQZXJHYXMsXG4gICAgcmV0dXJuTm9Fc3RpbWF0ZXMsXG4gIF0pO1xuXG4gIGlmIChyZXR1cm5Ob0VzdGltYXRlcykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IHsgbG93ID0ge30sIG1lZGl1bSA9IHt9LCBoaWdoID0ge30gfSA9IGdhc0ZlZUVzdGltYXRlcztcbiAgbGV0IHdhaXRUaW1lRXN0aW1hdGUgPSAnJztcblxuICBpZiAoXG4gICAgaXNVbmtub3duTG93ICYmXG4gICAgY3VzdG9tRXN0aW1hdGVkVGltZSAmJlxuICAgIGN1c3RvbUVzdGltYXRlZFRpbWUgIT09ICd1bmtub3duJyAmJlxuICAgIGN1c3RvbUVzdGltYXRlZFRpbWU/LnVwcGVyVGltZUJvdW5kICE9PSAndW5rbm93bidcbiAgKSB7XG4gICAgd2FpdFRpbWVFc3RpbWF0ZSA9IE51bWJlcihjdXN0b21Fc3RpbWF0ZWRUaW1lPy51cHBlclRpbWVCb3VuZCk7XG4gIH0gZWxzZSBpZiAoXG4gICAgTnVtYmVyKG1heFByaW9yaXR5RmVlUGVyR2FzKSA+PSBOdW1iZXIobWVkaXVtLnN1Z2dlc3RlZE1heFByaW9yaXR5RmVlUGVyR2FzKVxuICApIHtcbiAgICB3YWl0VGltZUVzdGltYXRlID0gaGlnaC5taW5XYWl0VGltZUVzdGltYXRlO1xuICB9IGVsc2Uge1xuICAgIHdhaXRUaW1lRXN0aW1hdGUgPSBsb3cubWF4V2FpdFRpbWVFc3RpbWF0ZTtcbiAgfVxuXG4gIHJldHVybiB7IHdhaXRUaW1lRXN0aW1hdGUgfTtcbn07XG4iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCB7XG4gIEVkaXRHYXNNb2RlcyxcbiAgUHJpb3JpdHlMZXZlbHMsXG59IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvZ2FzJztcbmltcG9ydCB7IGdldE1heGltdW1HYXNUb3RhbEluSGV4V2VpIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvZ2FzLnV0aWxzJztcbmltcG9ydCB7XG4gIGFkZFRlblBlcmNlbnRBbmRSb3VuZCxcbiAgZ2FzRXN0aW1hdGVHcmVhdGVyVGhhbkdhc1VzZWRQbHVzVGVuUGVyY2VudCxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy91dGlscy9nYXMnO1xuaW1wb3J0IHsgZ2V0QWR2YW5jZWRHYXNGZWVWYWx1ZXMgfSBmcm9tICcuLi8uLi8uLi8uLi9zZWxlY3RvcnMnO1xuaW1wb3J0IHsgdXNlR2FzRmVlQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbnRleHRzL2dhc0ZlZSc7XG5pbXBvcnQge1xuICBkZWNHV0VJVG9IZXhXRUksXG4gIGRlY2ltYWxUb0hleCxcbiAgaGV4V0VJVG9EZWNHV0VJLFxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9jb252ZXJzaW9uLnV0aWxzJztcbmltcG9ydCB7IHVzZUN1c3RvbVRpbWVFc3RpbWF0ZSB9IGZyb20gJy4vdXNlQ3VzdG9tVGltZUVzdGltYXRlJztcblxuZXhwb3J0IGNvbnN0IHVzZUdhc0l0ZW1GZWVEZXRhaWxzID0gKHByaW9yaXR5TGV2ZWwpID0+IHtcbiAgY29uc3Qge1xuICAgIGVkaXRHYXNNb2RlLFxuICAgIGVzdGltYXRlVXNlZCxcbiAgICBnYXNGZWVFc3RpbWF0ZXMsXG4gICAgZ2FzTGltaXQsXG4gICAgbWF4RmVlUGVyR2FzOiBtYXhGZWVQZXJHYXNWYWx1ZSxcbiAgICBtYXhQcmlvcml0eUZlZVBlckdhczogbWF4UHJpb3JpdHlGZWVQZXJHYXNWYWx1ZSxcbiAgICB0cmFuc2FjdGlvbixcbiAgfSA9IHVzZUdhc0ZlZUNvbnRleHQoKTtcbiAgY29uc3QgW2VzdGltYXRlR3JlYXRlclRoYW5HYXNVc2UsIHNldEVzdGltYXRlR3JlYXRlclRoYW5HYXNVc2VdID1cbiAgICB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IGFkdmFuY2VkR2FzRmVlVmFsdWVzID0gdXNlU2VsZWN0b3IoZ2V0QWR2YW5jZWRHYXNGZWVWYWx1ZXMpO1xuXG4gIGxldCBtYXhGZWVQZXJHYXM7XG4gIGxldCBtYXhQcmlvcml0eUZlZVBlckdhcztcbiAgbGV0IG1pbldhaXRUaW1lO1xuXG4gIGNvbnN0IHsgZGFwcFN1Z2dlc3RlZEdhc0ZlZXMgfSA9IHRyYW5zYWN0aW9uO1xuXG4gIGlmIChnYXNGZWVFc3RpbWF0ZXM/Lltwcmlvcml0eUxldmVsXSkge1xuICAgIG1heEZlZVBlckdhcyA9IGdhc0ZlZUVzdGltYXRlc1twcmlvcml0eUxldmVsXS5zdWdnZXN0ZWRNYXhGZWVQZXJHYXM7XG4gICAgbWF4UHJpb3JpdHlGZWVQZXJHYXMgPVxuICAgICAgZ2FzRmVlRXN0aW1hdGVzW3ByaW9yaXR5TGV2ZWxdLnN1Z2dlc3RlZE1heFByaW9yaXR5RmVlUGVyR2FzO1xuICB9IGVsc2UgaWYgKFxuICAgIHByaW9yaXR5TGV2ZWwgPT09IFByaW9yaXR5TGV2ZWxzLmRBcHBTdWdnZXN0ZWQgJiZcbiAgICBkYXBwU3VnZ2VzdGVkR2FzRmVlc1xuICApIHtcbiAgICBtYXhGZWVQZXJHYXMgPSBoZXhXRUlUb0RlY0dXRUkoXG4gICAgICBkYXBwU3VnZ2VzdGVkR2FzRmVlcy5tYXhGZWVQZXJHYXMgfHwgZGFwcFN1Z2dlc3RlZEdhc0ZlZXMuZ2FzUHJpY2UsXG4gICAgKTtcbiAgICBtYXhQcmlvcml0eUZlZVBlckdhcyA9IGhleFdFSVRvRGVjR1dFSShcbiAgICAgIGRhcHBTdWdnZXN0ZWRHYXNGZWVzLm1heFByaW9yaXR5RmVlUGVyR2FzIHx8IG1heEZlZVBlckdhcyxcbiAgICApO1xuICB9IGVsc2UgaWYgKHByaW9yaXR5TGV2ZWwgPT09IFByaW9yaXR5TGV2ZWxzLmN1c3RvbSkge1xuICAgIGlmIChlc3RpbWF0ZVVzZWQgPT09IFByaW9yaXR5TGV2ZWxzLmN1c3RvbSkge1xuICAgICAgbWF4RmVlUGVyR2FzID0gbWF4RmVlUGVyR2FzVmFsdWU7XG4gICAgICBtYXhQcmlvcml0eUZlZVBlckdhcyA9IG1heFByaW9yaXR5RmVlUGVyR2FzVmFsdWU7XG4gICAgfSBlbHNlIGlmIChhZHZhbmNlZEdhc0ZlZVZhbHVlcyAmJiBlZGl0R2FzTW9kZSAhPT0gRWRpdEdhc01vZGVzLnN3YXBzKSB7XG4gICAgICBtYXhGZWVQZXJHYXMgPSBhZHZhbmNlZEdhc0ZlZVZhbHVlcy5tYXhCYXNlRmVlO1xuICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBhZHZhbmNlZEdhc0ZlZVZhbHVlcy5wcmlvcml0eUZlZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoXG4gICAgcHJpb3JpdHlMZXZlbCA9PT0gUHJpb3JpdHlMZXZlbHMudGVuUGVyY2VudEluY3JlYXNlZCAmJlxuICAgIHRyYW5zYWN0aW9uLnByZXZpb3VzR2FzXG4gICkge1xuICAgIG1heEZlZVBlckdhcyA9IGhleFdFSVRvRGVjR1dFSShcbiAgICAgIGFkZFRlblBlcmNlbnRBbmRSb3VuZCh0cmFuc2FjdGlvbi5wcmV2aW91c0dhcz8ubWF4RmVlUGVyR2FzKSxcbiAgICApO1xuICAgIG1heFByaW9yaXR5RmVlUGVyR2FzID0gaGV4V0VJVG9EZWNHV0VJKFxuICAgICAgYWRkVGVuUGVyY2VudEFuZFJvdW5kKHRyYW5zYWN0aW9uLnByZXZpb3VzR2FzPy5tYXhQcmlvcml0eUZlZVBlckdhcyksXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHsgd2FpdFRpbWVFc3RpbWF0ZSB9ID0gdXNlQ3VzdG9tVGltZUVzdGltYXRlKHtcbiAgICBnYXNGZWVFc3RpbWF0ZXMsXG4gICAgbWF4RmVlUGVyR2FzLFxuICAgIG1heFByaW9yaXR5RmVlUGVyR2FzLFxuICB9KTtcblxuICBpZiAoZ2FzRmVlRXN0aW1hdGVzW3ByaW9yaXR5TGV2ZWxdKSB7XG4gICAgbWluV2FpdFRpbWUgPVxuICAgICAgcHJpb3JpdHlMZXZlbCA9PT0gUHJpb3JpdHlMZXZlbHMuaGlnaFxuICAgICAgICA/IGdhc0ZlZUVzdGltYXRlcz8uaGlnaC5taW5XYWl0VGltZUVzdGltYXRlXG4gICAgICAgIDogZ2FzRmVlRXN0aW1hdGVzPy5sb3cubWF4V2FpdFRpbWVFc3RpbWF0ZTtcbiAgfSBlbHNlIHtcbiAgICBtaW5XYWl0VGltZSA9IHdhaXRUaW1lRXN0aW1hdGU7XG4gIH1cblxuICBjb25zdCBoZXhNYXhpbXVtVHJhbnNhY3Rpb25GZWUgPSBtYXhGZWVQZXJHYXNcbiAgICA/IGdldE1heGltdW1HYXNUb3RhbEluSGV4V2VpKHtcbiAgICAgICAgZ2FzTGltaXQ6IGRlY2ltYWxUb0hleChnYXNMaW1pdCksXG4gICAgICAgIG1heEZlZVBlckdhczogZGVjR1dFSVRvSGV4V0VJKG1heEZlZVBlckdhcyksXG4gICAgICB9KVxuICAgIDogbnVsbDtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIEZvciBjYW5jZWwgYW5kIHNwZWVkLXVwIG1lZGl1bSAvIGhpZ2ggb3B0aW9uIGlzIGRpc2FibGVkIGlmXG4gICAgLy8gZ2FzIHVzZWQgaW4gdHJhbnNhY3Rpb24gKyAxMCUgaXMgZ3JlYXRlciB0aGFtIGVzdGltYXRlXG4gICAgaWYgKFxuICAgICAgKGVkaXRHYXNNb2RlID09PSBFZGl0R2FzTW9kZXMuY2FuY2VsIHx8XG4gICAgICAgIGVkaXRHYXNNb2RlID09PSBFZGl0R2FzTW9kZXMuc3BlZWRVcCkgJiZcbiAgICAgIChwcmlvcml0eUxldmVsID09PSBQcmlvcml0eUxldmVscy5tZWRpdW0gfHxcbiAgICAgICAgcHJpb3JpdHlMZXZlbCA9PT0gUHJpb3JpdHlMZXZlbHMuaGlnaClcbiAgICApIHtcbiAgICAgIGNvbnN0IGVzdGltYXRlR3JlYXRlciA9ICFnYXNFc3RpbWF0ZUdyZWF0ZXJUaGFuR2FzVXNlZFBsdXNUZW5QZXJjZW50KFxuICAgICAgICB0cmFuc2FjdGlvbi5wcmV2aW91c0dhcyB8fCB0cmFuc2FjdGlvbi50eFBhcmFtcyxcbiAgICAgICAgZ2FzRmVlRXN0aW1hdGVzLFxuICAgICAgICBwcmlvcml0eUxldmVsLFxuICAgICAgKTtcbiAgICAgIHNldEVzdGltYXRlR3JlYXRlclRoYW5HYXNVc2UoZXN0aW1hdGVHcmVhdGVyKTtcbiAgICB9XG4gIH0sIFtlZGl0R2FzTW9kZSwgZ2FzRmVlRXN0aW1hdGVzLCBwcmlvcml0eUxldmVsLCB0cmFuc2FjdGlvbl0pO1xuXG4gIHJldHVybiB7XG4gICAgZXN0aW1hdGVHcmVhdGVyVGhhbkdhc1VzZSxcbiAgICBtYXhGZWVQZXJHYXMsXG4gICAgbWF4UHJpb3JpdHlGZWVQZXJHYXMsXG4gICAgbWluV2FpdFRpbWUsXG4gICAgaGV4TWF4aW11bVRyYW5zYWN0aW9uRmVlLFxuICB9O1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7XG4gIEVkaXRHYXNNb2RlcyxcbiAgUHJpb3JpdHlMZXZlbHMsXG59IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvZ2FzJztcbmltcG9ydCB7XG4gIEZvbnRXZWlnaHQsXG4gIFRleHRDb2xvcixcbiAgVGV4dFZhcmlhbnQsXG59IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgaXNNZXRhbWFza1N1Z2dlc3RlZEdhc0VzdGltYXRlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy91dGlscy9nYXMnO1xuaW1wb3J0IHsgcm91bmRUb0RlY2ltYWxQbGFjZXNSZW1vdmluZ0V4dHJhWmVyb2VzIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy91dGlscy91dGlsJztcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5cbmNvbnN0IEVkaXRHYXNUb29sVGlwID0gKHtcbiAgZWRpdEdhc01vZGUsXG4gIGVzdGltYXRlR3JlYXRlclRoYW5HYXNVc2UsXG4gIGdhc0xpbWl0LFxuICBwcmlvcml0eUxldmVsLFxuICAvLyBtYXhGZWVQZXJHYXMgJiBtYXhQcmlvcml0eUZlZVBlckdhcyBhcmUgZGVyaXZlZCBmcm9tIGNvbmRpdGlvbmFsIGxvZ2ljXG4gIC8vIHJlbGF0ZWQgdG8gdGhlIHNvdXJjZSBvZiB0aGUgZXN0aW1hdGVzLiBXZSBwYXNzIHRoZXNlIHZhbHVlcyBmcm9tIHRoZVxuICAvLyB0aGUgcGFyZW50IGNvbXBvbmVudCAoZWRpdC1nYXMtaXRlbSkgcmF0aGVyIHRoYW4gcmVjYWxjdWxhdGUgdGhlbVxuICBtYXhGZWVQZXJHYXMsXG4gIG1heFByaW9yaXR5RmVlUGVyR2FzLFxuICB0cmFuc2FjdGlvbixcbiAgdCxcbn0pID0+IHtcbiAgY29uc3QgdG9vbFRpcE1lc3NhZ2UgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBzd2l0Y2ggKHByaW9yaXR5TGV2ZWwpIHtcbiAgICAgIGNhc2UgUHJpb3JpdHlMZXZlbHMubG93OlxuICAgICAgICByZXR1cm4gdCgnbG93R2FzU2V0dGluZ1Rvb2xUaXBNZXNzYWdlJywgW1xuICAgICAgICAgIDxzcGFuIGtleT17cHJpb3JpdHlMZXZlbH0+XG4gICAgICAgICAgICA8Yj57dCgnbG93Jyl9PC9iPlxuICAgICAgICAgIDwvc3Bhbj4sXG4gICAgICAgIF0pO1xuICAgICAgY2FzZSBQcmlvcml0eUxldmVscy5tZWRpdW06XG4gICAgICAgIGlmIChlc3RpbWF0ZUdyZWF0ZXJUaGFuR2FzVXNlKSB7XG4gICAgICAgICAgcmV0dXJuIHQoJ2Rpc2FibGVkR2FzT3B0aW9uVG9vbFRpcE1lc3NhZ2UnLCBbXG4gICAgICAgICAgICA8c3BhbiBrZXk9e2BkaXNhYmxlZC1wcmlvcml0eS1sZXZlbC0ke3ByaW9yaXR5TGV2ZWx9YH0+XG4gICAgICAgICAgICAgIHt0KHByaW9yaXR5TGV2ZWwpfVxuICAgICAgICAgICAgPC9zcGFuPixcbiAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdCgnbWVkaXVtR2FzU2V0dGluZ1Rvb2xUaXBNZXNzYWdlJywgW1xuICAgICAgICAgIDxzcGFuIGtleT17cHJpb3JpdHlMZXZlbH0+XG4gICAgICAgICAgICA8Yj57dCgnbWVkaXVtJyl9PC9iPlxuICAgICAgICAgIDwvc3Bhbj4sXG4gICAgICAgIF0pO1xuICAgICAgY2FzZSBQcmlvcml0eUxldmVscy5oaWdoOlxuICAgICAgICBpZiAoZXN0aW1hdGVHcmVhdGVyVGhhbkdhc1VzZSkge1xuICAgICAgICAgIHJldHVybiB0KCdkaXNhYmxlZEdhc09wdGlvblRvb2xUaXBNZXNzYWdlJywgW1xuICAgICAgICAgICAgPHNwYW4ga2V5PXtgZGlzYWJsZWQtcHJpb3JpdHktbGV2ZWwtJHtwcmlvcml0eUxldmVsfWB9PlxuICAgICAgICAgICAgICB7dChwcmlvcml0eUxldmVsKX1cbiAgICAgICAgICAgIDwvc3Bhbj4sXG4gICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVkaXRHYXNNb2RlID09PSBFZGl0R2FzTW9kZXMuc3dhcHMpIHtcbiAgICAgICAgICByZXR1cm4gdCgnc3dhcFN1Z2dlc3RlZEdhc1NldHRpbmdUb29sVGlwTWVzc2FnZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0KCdoaWdoR2FzU2V0dGluZ1Rvb2xUaXBNZXNzYWdlJywgW1xuICAgICAgICAgIDxzcGFuIGtleT17cHJpb3JpdHlMZXZlbH0+XG4gICAgICAgICAgICA8Yj57dCgnaGlnaCcpfTwvYj5cbiAgICAgICAgICA8L3NwYW4+LFxuICAgICAgICBdKTtcbiAgICAgIGNhc2UgUHJpb3JpdHlMZXZlbHMuY3VzdG9tOlxuICAgICAgICByZXR1cm4gdCgnY3VzdG9tR2FzU2V0dGluZ1Rvb2xUaXBNZXNzYWdlJywgW1xuICAgICAgICAgIDxzcGFuIGtleT17cHJpb3JpdHlMZXZlbH0+XG4gICAgICAgICAgICA8Yj57dCgnY3VzdG9tJyl9PC9iPlxuICAgICAgICAgIDwvc3Bhbj4sXG4gICAgICAgIF0pO1xuICAgICAgY2FzZSBQcmlvcml0eUxldmVscy5kQXBwU3VnZ2VzdGVkOlxuICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb24/Lm9yaWdpblxuICAgICAgICAgID8gdCgnZGFwcFN1Z2dlc3RlZEdhc1NldHRpbmdUb29sVGlwTWVzc2FnZScsIFtcbiAgICAgICAgICAgICAgPHNwYW4ga2V5PXt0cmFuc2FjdGlvbj8ub3JpZ2lufT57dHJhbnNhY3Rpb24/Lm9yaWdpbn08L3NwYW4+LFxuICAgICAgICAgICAgXSlcbiAgICAgICAgICA6IG51bGw7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9LCBbZWRpdEdhc01vZGUsIGVzdGltYXRlR3JlYXRlclRoYW5HYXNVc2UsIHByaW9yaXR5TGV2ZWwsIHRyYW5zYWN0aW9uLCB0XSk7XG5cbiAgbGV0IGltZ0FsdFRleHQ7XG4gIGlmIChwcmlvcml0eUxldmVsID09PSBQcmlvcml0eUxldmVscy5sb3cpIHtcbiAgICBpbWdBbHRUZXh0ID0gdCgnY3VydmVMb3dHYXNFc3RpbWF0ZScpO1xuICB9IGVsc2UgaWYgKHByaW9yaXR5TGV2ZWwgPT09IFByaW9yaXR5TGV2ZWxzLm1lZGl1bSkge1xuICAgIGltZ0FsdFRleHQgPSB0KCdjdXJ2ZU1lZGl1bUdhc0VzdGltYXRlJyk7XG4gIH0gZWxzZSBpZiAocHJpb3JpdHlMZXZlbCA9PT0gUHJpb3JpdHlMZXZlbHMuaGlnaCkge1xuICAgIGltZ0FsdFRleHQgPSB0KCdjdXJ2ZUhpZ2hHYXNFc3RpbWF0ZScpO1xuICB9XG5cbiAgLy8gR2FzIGVzdGltYXRlIGN1cnZlIGlzIHZpc2libGUgZm9yIGxvdy9tZWRpdW0vaGlnaCBnYXMgZXN0aW1hdGVzXG4gIC8vIHRoZSBjdXJ2ZSBpcyBub3QgdmlzaWJsZSBmb3IgaGlnaCBlc3RpbWF0ZXMgZm9yIHN3YXBzXG4gIC8vIGFsc28gaXQgaXMgbm90IHZpc2libGUgaW4gY2FzZSBvZiBjYW5jZWwvc3BlZWR1cCBpZiB0aGUgbWVkaXVtL2hpZ2ggb3B0aW9uIGlzIGRpc2FibGVkXG4gIGNvbnN0IHNob3dHYXNFc3RpbWF0ZUN1cnZlID1cbiAgICBpc01ldGFtYXNrU3VnZ2VzdGVkR2FzRXN0aW1hdGUocHJpb3JpdHlMZXZlbCkgJiZcbiAgICAhKFxuICAgICAgcHJpb3JpdHlMZXZlbCA9PT0gUHJpb3JpdHlMZXZlbHMuaGlnaCAmJlxuICAgICAgZWRpdEdhc01vZGUgPT09IEVkaXRHYXNNb2Rlcy5zd2Fwc1xuICAgICkgJiZcbiAgICAhZXN0aW1hdGVHcmVhdGVyVGhhbkdhc1VzZTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1nYXMtdG9vbHRpcF9fY29udGFpbmVyXCI+XG4gICAgICB7c2hvd0dhc0VzdGltYXRlQ3VydmUgPyAoXG4gICAgICAgIDxpbWcgYWx0PXtpbWdBbHRUZXh0fSBzcmM9e2AuL2ltYWdlcy9jdXJ2ZS0ke3ByaW9yaXR5TGV2ZWx9LnN2Z2B9IC8+XG4gICAgICApIDogbnVsbH1cbiAgICAgIHt0b29sVGlwTWVzc2FnZSAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1nYXMtdG9vbHRpcF9fY29udGFpbmVyX19tZXNzYWdlXCI+XG4gICAgICAgICAgPFRleHQgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtfSBhcz1cImg2XCI+XG4gICAgICAgICAgICB7dG9vbFRpcE1lc3NhZ2V9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICB7cHJpb3JpdHlMZXZlbCA9PT0gUHJpb3JpdHlMZXZlbHMuY3VzdG9tIHx8XG4gICAgICBlc3RpbWF0ZUdyZWF0ZXJUaGFuR2FzVXNlID8gbnVsbCA6IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWdhcy10b29sdGlwX19jb250YWluZXJfX3ZhbHVlc1wiPlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219XG4gICAgICAgICAgICAgIGFzPVwiaDZcIlxuICAgICAgICAgICAgICBmb250V2VpZ2h0PXtGb250V2VpZ2h0LkJvbGR9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVkaXQtZ2FzLXRvb2x0aXBfX2NvbnRhaW5lcl9fbGFiZWxcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dCgnbWF4QmFzZUZlZScpfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAge21heEZlZVBlckdhcyAmJiAoXG4gICAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtfVxuICAgICAgICAgICAgICAgIGFzPVwiaDZcIlxuICAgICAgICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IudGV4dEFsdGVybmF0aXZlfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVkaXQtZ2FzLXRvb2x0aXBfX2NvbnRhaW5lcl9fdmFsdWVcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3JvdW5kVG9EZWNpbWFsUGxhY2VzUmVtb3ZpbmdFeHRyYVplcm9lcyhtYXhGZWVQZXJHYXMsIDQpfVxuICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219XG4gICAgICAgICAgICAgIGFzPVwiaDZcIlxuICAgICAgICAgICAgICBmb250V2VpZ2h0PXtGb250V2VpZ2h0LkJvbGR9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVkaXQtZ2FzLXRvb2x0aXBfX2NvbnRhaW5lcl9fbGFiZWxcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dCgncHJpb3JpdHlGZWVQcm9wZXJDYXNlJyl9XG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICB7bWF4UHJpb3JpdHlGZWVQZXJHYXMgJiYgKFxuICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHRBbHRlcm5hdGl2ZX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJlZGl0LWdhcy10b29sdGlwX19jb250YWluZXJfX3ZhbHVlXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtyb3VuZFRvRGVjaW1hbFBsYWNlc1JlbW92aW5nRXh0cmFaZXJvZXMoXG4gICAgICAgICAgICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhcyxcbiAgICAgICAgICAgICAgICAgIDQsXG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPFRleHRcbiAgICAgICAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtfVxuICAgICAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICAgICAgZm9udFdlaWdodD17Rm9udFdlaWdodC5Cb2xkfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJlZGl0LWdhcy10b29sdGlwX19jb250YWluZXJfX2xhYmVsXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3QoJ2dhc0xpbWl0Jyl9XG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICB7Z2FzTGltaXQgJiYgKFxuICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHRBbHRlcm5hdGl2ZX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJlZGl0LWdhcy10b29sdGlwX19jb250YWluZXJfX3ZhbHVlXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtyb3VuZFRvRGVjaW1hbFBsYWNlc1JlbW92aW5nRXh0cmFaZXJvZXMoZ2FzTGltaXQsIDQpfVxuICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5FZGl0R2FzVG9vbFRpcC5wcm9wVHlwZXMgPSB7XG4gIGVzdGltYXRlR3JlYXRlclRoYW5HYXNVc2U6IFByb3BUeXBlcy5ib29sLFxuICBwcmlvcml0eUxldmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBtYXhGZWVQZXJHYXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5udW1iZXIsXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgXSksXG4gIHQ6IFByb3BUeXBlcy5mdW5jLFxuICBlZGl0R2FzTW9kZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZ2FzTGltaXQ6IFByb3BUeXBlcy5udW1iZXIsXG4gIHRyYW5zYWN0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRWRpdEdhc1Rvb2xUaXA7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9lZGl0LWdhcy1mZWUtcG9wb3Zlcic7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9uZXR3b3JrLXN0YXRpc3RpY3MnO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBGb250V2VpZ2h0LFxuICBUZXh0Q29sb3IsXG4gIFRleHRWYXJpYW50LFxufSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IGlzTnVsbGlzaCB9IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBmb3JtYXRHYXNGZWVPckZlZVJhbmdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy91dGlscy9nYXMnO1xuaW1wb3J0IHsgSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9jb250ZXh0cy9pMThuJztcbmltcG9ydCB7IHVzZUdhc0ZlZUNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9jb250ZXh0cy9nYXNGZWUnO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcbmltcG9ydCB7IEJhc2VGZWVUb29sdGlwLCBQcmlvcml0eUZlZVRvb2x0aXAgfSBmcm9tICcuL3Rvb2x0aXBzJztcbmltcG9ydCBTdGF0dXNTbGlkZXIgZnJvbSAnLi9zdGF0dXMtc2xpZGVyJztcblxuY29uc3QgTmV0d29ya1N0YXRpc3RpY3MgPSAoKSA9PiB7XG4gIGNvbnN0IHQgPSB1c2VDb250ZXh0KEkxOG5Db250ZXh0KTtcbiAgY29uc3QgeyBnYXNGZWVFc3RpbWF0ZXMgfSA9IHVzZUdhc0ZlZUNvbnRleHQoKTtcbiAgY29uc3QgZm9ybWF0dGVkTGF0ZXN0QmFzZUZlZSA9IGZvcm1hdEdhc0ZlZU9yRmVlUmFuZ2UoXG4gICAgZ2FzRmVlRXN0aW1hdGVzPy5lc3RpbWF0ZWRCYXNlRmVlLFxuICAgIHtcbiAgICAgIHByZWNpc2lvbjogMCxcbiAgICB9LFxuICApO1xuICBjb25zdCBmb3JtYXR0ZWRMYXRlc3RQcmlvcml0eUZlZVJhbmdlID0gZm9ybWF0R2FzRmVlT3JGZWVSYW5nZShcbiAgICBnYXNGZWVFc3RpbWF0ZXM/LmxhdGVzdFByaW9yaXR5RmVlUmFuZ2UsXG4gICAgeyBwcmVjaXNpb246IFsxLCAwXSB9LFxuICApO1xuICBjb25zdCBuZXR3b3JrQ29uZ2VzdGlvbiA9IGdhc0ZlZUVzdGltYXRlcz8ubmV0d29ya0Nvbmdlc3Rpb247XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm5ldHdvcmstc3RhdGlzdGljc1wiPlxuICAgICAgPFRleHRcbiAgICAgICAgY29sb3I9e1RleHRDb2xvci50ZXh0QWx0ZXJuYXRpdmV9XG4gICAgICAgIGZvbnRXZWlnaHQ9e0ZvbnRXZWlnaHQuQm9sZH1cbiAgICAgICAgbWFyZ2luVG9wPXszfVxuICAgICAgICBtYXJnaW5Cb3R0b209ezN9XG4gICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlYc31cbiAgICAgICAgYXM9XCJoNlwiXG4gICAgICA+XG4gICAgICAgIHt0KCduZXR3b3JrU3RhdHVzJyl9XG4gICAgICA8L1RleHQ+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5ldHdvcmstc3RhdGlzdGljc19faW5mb1wiPlxuICAgICAgICB7aXNOdWxsaXNoKGZvcm1hdHRlZExhdGVzdEJhc2VGZWUpID8gbnVsbCA6IChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJuZXR3b3JrLXN0YXRpc3RpY3NfX2ZpZWxkXCJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiZm9ybWF0dGVkLWxhdGVzdC1iYXNlLWZlZVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEJhc2VGZWVUb29sdGlwPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuZXR3b3JrLXN0YXRpc3RpY3NfX2ZpZWxkLWRhdGFcIj5cbiAgICAgICAgICAgICAgICB7Zm9ybWF0dGVkTGF0ZXN0QmFzZUZlZX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuZXR3b3JrLXN0YXRpc3RpY3NfX2ZpZWxkLWxhYmVsXCI+XG4gICAgICAgICAgICAgICAge3QoJ2Jhc2VGZWUnKX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9CYXNlRmVlVG9vbHRpcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAge2lzTnVsbGlzaChmb3JtYXR0ZWRMYXRlc3RQcmlvcml0eUZlZVJhbmdlKSA/IG51bGwgOiAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibmV0d29yay1zdGF0aXN0aWNzX19maWVsZFwiXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD1cImZvcm1hdHRlZC1sYXRlc3QtcHJpb3JpdHktZmVlLXJhbmdlXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8UHJpb3JpdHlGZWVUb29sdGlwPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuZXR3b3JrLXN0YXRpc3RpY3NfX2ZpZWxkLWRhdGFcIj5cbiAgICAgICAgICAgICAgICB7Zm9ybWF0dGVkTGF0ZXN0UHJpb3JpdHlGZWVSYW5nZX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJuZXR3b3JrLXN0YXRpc3RpY3NfX2ZpZWxkLWxhYmVsXCI+XG4gICAgICAgICAgICAgICAge3QoJ3ByaW9yaXR5RmVlJyl9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvUHJpb3JpdHlGZWVUb29sdGlwPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICB7aXNOdWxsaXNoKG5ldHdvcmtDb25nZXN0aW9uKSA/IG51bGwgOiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZXR3b3JrLXN0YXRpc3RpY3NfX2ZpZWxkXCI+XG4gICAgICAgICAgICA8U3RhdHVzU2xpZGVyIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5ldHdvcmtTdGF0aXN0aWNzO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vc3RhdHVzLXNsaWRlcic7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBOZXR3b3JrQ29uZ2VzdGlvblRocmVzaG9sZHMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2dhcyc7XG5pbXBvcnQgeyB1c2VHYXNGZWVDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29udGV4dHMvZ2FzRmVlJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuaW1wb3J0IHsgTmV0d29ya1N0YWJpbGl0eVRvb2x0aXAgfSBmcm9tICcuLi90b29sdGlwcyc7XG5cbmNvbnN0IEdSQURJRU5UX0NPTE9SUyA9IFtcbiAgJyMwMzdERDYnLFxuICAnIzE4NzZDOCcsXG4gICcjMkQ3MEJBJyxcbiAgJyM0MzY5QUInLFxuICAnIzU3NjI5RScsXG4gICcjNkE1RDkyJyxcbiAgJyM4MDU2ODMnLFxuICAnIzlBNEQ3MScsXG4gICcjQjQ0NTYxJyxcbiAgJyNDNTQwNTUnLFxuICAnI0Q3M0E0OScsXG5dO1xuXG5jb25zdCBkZXRlcm1pbmVTdGF0dXNJbmZvID0gKGdpdmVuTmV0d29ya0Nvbmdlc3Rpb24pID0+IHtcbiAgY29uc3QgbmV0d29ya0Nvbmdlc3Rpb24gPSBnaXZlbk5ldHdvcmtDb25nZXN0aW9uID8/IDAuNTtcbiAgY29uc3QgY29sb3JJbmRleCA9IE1hdGgucm91bmQobmV0d29ya0Nvbmdlc3Rpb24gKiAxMCk7XG4gIGNvbnN0IGNvbG9yID0gR1JBRElFTlRfQ09MT1JTW2NvbG9ySW5kZXhdO1xuICBjb25zdCBzbGlkZXJUaWNrVmFsdWUgPSBjb2xvckluZGV4ICogMTA7XG5cbiAgaWYgKG5ldHdvcmtDb25nZXN0aW9uID49IE5ldHdvcmtDb25nZXN0aW9uVGhyZXNob2xkcy5idXN5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0xhYmVsOiAnYnVzeScsXG4gICAgICB0b29sdGlwTGFiZWw6ICdoaWdoTG93ZXJjYXNlJyxcbiAgICAgIGNvbG9yLFxuICAgICAgc2xpZGVyVGlja1ZhbHVlLFxuICAgIH07XG4gIH0gZWxzZSBpZiAobmV0d29ya0Nvbmdlc3Rpb24gPj0gTmV0d29ya0Nvbmdlc3Rpb25UaHJlc2hvbGRzLnN0YWJsZSkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNMYWJlbDogJ3N0YWJsZScsXG4gICAgICB0b29sdGlwTGFiZWw6ICdzdGFibGVMb3dlcmNhc2UnLFxuICAgICAgY29sb3IsXG4gICAgICBzbGlkZXJUaWNrVmFsdWUsXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0YXR1c0xhYmVsOiAnbm90QnVzeScsXG4gICAgdG9vbHRpcExhYmVsOiAnbG93TG93ZXJjYXNlJyxcbiAgICBjb2xvcixcbiAgICBzbGlkZXJUaWNrVmFsdWUsXG4gIH07XG59O1xuXG5jb25zdCBTdGF0dXNTbGlkZXIgPSAoKSA9PiB7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBjb25zdCB7IGdhc0ZlZUVzdGltYXRlcyB9ID0gdXNlR2FzRmVlQ29udGV4dCgpO1xuICBjb25zdCBzdGF0dXNJbmZvID0gZGV0ZXJtaW5lU3RhdHVzSW5mbyhnYXNGZWVFc3RpbWF0ZXMubmV0d29ya0Nvbmdlc3Rpb24pO1xuXG4gIHJldHVybiAoXG4gICAgPE5ldHdvcmtTdGFiaWxpdHlUb29sdGlwXG4gICAgICBjb2xvcj17c3RhdHVzSW5mby5jb2xvcn1cbiAgICAgIHRvb2x0aXBMYWJlbD17c3RhdHVzSW5mby50b29sdGlwTGFiZWx9XG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdGF0dXMtc2xpZGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3RhdHVzLXNsaWRlcl9fYXJyb3ctY29udGFpbmVyXCI+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwic3RhdHVzLXNsaWRlcl9fYXJyb3ctYm9yZGVyXCJcbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IGAke3N0YXR1c0luZm8uc2xpZGVyVGlja1ZhbHVlfSVgLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwic3RhdHVzLXNsaWRlci1hcnJvdy1ib3JkZXJcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic3RhdHVzLXNsaWRlcl9fYXJyb3dcIlxuICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIGJvcmRlclRvcENvbG9yOiBzdGF0dXNJbmZvLmNvbG9yLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cInN0YXR1cy1zbGlkZXItYXJyb3dcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3RhdHVzLXNsaWRlcl9fbGluZVwiIC8+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9XCJzdGF0dXMtc2xpZGVyX19sYWJlbFwiXG4gICAgICAgICAgc3R5bGU9e3sgY29sb3I6IHN0YXR1c0luZm8uY29sb3IgfX1cbiAgICAgICAgICBkYXRhLXRlc3RpZD1cInN0YXR1cy1zbGlkZXItbGFiZWxcIlxuICAgICAgICA+XG4gICAgICAgICAge3Qoc3RhdHVzSW5mby5zdGF0dXNMYWJlbCl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9OZXR3b3JrU3RhYmlsaXR5VG9vbHRpcD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXR1c1NsaWRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCBCb3ggZnJvbSAnLi4vLi4vLi4vdWkvYm94JztcbmltcG9ydCBUb29sdGlwIGZyb20gJy4uLy4uLy4uL3VpL3Rvb2x0aXAnO1xuXG5pbXBvcnQge1xuICBESVNQTEFZLFxuICBGTEVYX0RJUkVDVElPTixcbn0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5cbmNvbnN0IE5ldHdvcmtTdGF0dXNUb29sdGlwID0gKHsgY2hpbGRyZW4sIGh0bWwsIHRpdGxlIH0pID0+IChcbiAgPFRvb2x0aXAgcG9zaXRpb249XCJ0b3BcIiBodG1sPXtodG1sfSB0aXRsZT17dGl0bGV9PlxuICAgIDxCb3ggZGlzcGxheT17RElTUExBWS5GTEVYfSBmbGV4RGlyZWN0aW9uPXtGTEVYX0RJUkVDVElPTi5DT0xVTU59PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQm94PlxuICA8L1Rvb2x0aXA+XG4pO1xuXG5OZXR3b3JrU3RhdHVzVG9vbHRpcC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICBodG1sOiBQcm9wVHlwZXMubm9kZSxcbiAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5leHBvcnQgY29uc3QgQmFzZUZlZVRvb2x0aXAgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICByZXR1cm4gKFxuICAgIDxOZXR3b3JrU3RhdHVzVG9vbHRpcFxuICAgICAgaHRtbD17dCgnbmV0d29ya1N0YXR1c0Jhc2VGZWVUb29sdGlwJywgW1xuICAgICAgICA8c3Ryb25nXG4gICAgICAgICAga2V5PVwiYmFzZV9mZWVfbWVkaXVtX2VzdGltYXRlXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJuZXR3b3JrLXN0YXR1c19fdG9vbHRpcC1sYWJlbFwiXG4gICAgICAgID5cbiAgICAgICAgICB7dCgnbWVkaXVtJyl9XG4gICAgICAgIDwvc3Ryb25nPixcbiAgICAgICAgPHN0cm9uZ1xuICAgICAgICAgIGtleT1cImJhc2VfZmVlX2hpZ2hfZXN0aW1hdGVcIlxuICAgICAgICAgIGNsYXNzTmFtZT1cIm5ldHdvcmstc3RhdHVzX190b29sdGlwLWxhYmVsXCJcbiAgICAgICAgPlxuICAgICAgICAgIHt0KCdoaWdoJyl9XG4gICAgICAgIDwvc3Ryb25nPixcbiAgICAgIF0pfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L05ldHdvcmtTdGF0dXNUb29sdGlwPlxuICApO1xufTtcblxuQmFzZUZlZVRvb2x0aXAucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBjb25zdCBQcmlvcml0eUZlZVRvb2x0aXAgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICByZXR1cm4gKFxuICAgIDxOZXR3b3JrU3RhdHVzVG9vbHRpcCB0aXRsZT17dCgnbmV0d29ya1N0YXR1c1ByaW9yaXR5RmVlVG9vbHRpcCcpfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L05ldHdvcmtTdGF0dXNUb29sdGlwPlxuICApO1xufTtcblxuUHJpb3JpdHlGZWVUb29sdGlwLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgY29uc3QgTmV0d29ya1N0YWJpbGl0eVRvb2x0aXAgPSAoeyBjaGlsZHJlbiwgY29sb3IsIHRvb2x0aXBMYWJlbCB9KSA9PiB7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuXG4gIHJldHVybiAoXG4gICAgPE5ldHdvcmtTdGF0dXNUb29sdGlwXG4gICAgICBodG1sPXt0KCduZXR3b3JrU3RhdHVzU3RhYmlsaXR5RmVlVG9vbHRpcCcsIFtcbiAgICAgICAgPHN0cm9uZ1xuICAgICAgICAgIGtleT1cIm5ldHdvcmstc3RhdHVzX190b29sdGlwXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJuZXR3b3JrLXN0YXR1c19fdG9vbHRpcC1sYWJlbFwiXG4gICAgICAgICAgc3R5bGU9e3sgY29sb3IgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0KHRvb2x0aXBMYWJlbCl9XG4gICAgICAgIDwvc3Ryb25nPixcbiAgICAgIF0pfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L05ldHdvcmtTdGF0dXNUb29sdGlwPlxuICApO1xufTtcblxuTmV0d29ya1N0YWJpbGl0eVRvb2x0aXAucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgY29sb3I6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgdG9vbHRpcExhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHVzZUdhc0ZlZUlucHV0cyB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL2dhc0ZlZUlucHV0L3VzZUdhc0ZlZUlucHV0cyc7XG5pbXBvcnQgeyB0eFBhcmFtc0FyZURhcHBTdWdnZXN0ZWQgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy90cmFuc2FjdGlvbi51dGlscyc7XG5pbXBvcnQge1xuICBFZGl0R2FzTW9kZXMsXG4gIEdBU19MSU1JVFMsXG4gIENVU1RPTV9HQVNfRVNUSU1BVEUsXG4gIEdhc1JlY29tbWVuZGF0aW9ucyxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9nYXMnO1xuXG5pbXBvcnQgUG9wb3ZlciBmcm9tICcuLi8uLi91aS9wb3BvdmVyJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vdWkvYnV0dG9uJztcbmltcG9ydCBFZGl0R2FzRGlzcGxheSBmcm9tICcuLi9lZGl0LWdhcy1kaXNwbGF5JztcblxuaW1wb3J0IHsgSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb250ZXh0cy9pMThuJztcbmltcG9ydCB7XG4gIGNyZWF0ZUNhbmNlbFRyYW5zYWN0aW9uLFxuICBjcmVhdGVTcGVlZFVwVHJhbnNhY3Rpb24sXG4gIGhpZGVNb2RhbCxcbiAgdXBkYXRlVHJhbnNhY3Rpb25HYXNGZWVzLFxuICBoaWRlTG9hZGluZ0luZGljYXRpb24sXG4gIHNob3dMb2FkaW5nSW5kaWNhdGlvbixcbn0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvYWN0aW9ucyc7XG5pbXBvcnQgTG9hZGluZ0hlYXJ0QmVhdCBmcm9tICcuLi8uLi91aS9sb2FkaW5nLWhlYXJ0YmVhdCc7XG5pbXBvcnQgeyB1c2VJbmNyZW1lbnRlZEdhc0ZlZXMgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VJbmNyZW1lbnRlZEdhc0ZlZXMnO1xuaW1wb3J0IHtcbiAgZGVjR1dFSVRvSGV4V0VJLFxuICBkZWNpbWFsVG9IZXgsXG4gIGhleFRvRGVjaW1hbCxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvY29udmVyc2lvbi51dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEVkaXRHYXNQb3BvdmVyKHtcbiAgcG9wb3ZlclRpdGxlID0gJycsXG4gIGNvbmZpcm1CdXR0b25UZXh0ID0gJycsXG4gIGVkaXRHYXNEaXNwbGF5UHJvcHMgPSB7fSxcbiAgdHJhbnNhY3Rpb24sXG4gIG1vZGUsXG4gIG9uQ2xvc2UsXG4gIG1pbmltdW1HYXNMaW1pdCA9IEdBU19MSU1JVFMuU0lNUExFLFxufSkge1xuICBjb25zdCB0ID0gdXNlQ29udGV4dChJMThuQ29udGV4dCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcblxuICBjb25zdCBbZGFwcFN1Z2dlc3RlZEdhc0ZlZUFja25vd2xlZGdlZCwgc2V0RGFwcFN1Z2dlc3RlZEdhc0ZlZUFja25vd2xlZGdlZF0gPVxuICAgIHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBtaW5pbXVtR2FzTGltaXREZWMgPSBoZXhUb0RlY2ltYWwobWluaW11bUdhc0xpbWl0KTtcbiAgY29uc3QgdXBkYXRlZEN1c3RvbUdhc1NldHRpbmdzID0gdXNlSW5jcmVtZW50ZWRHYXNGZWVzKHRyYW5zYWN0aW9uKTtcblxuICBsZXQgdXBkYXRlZFRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb247XG4gIGlmIChtb2RlID09PSBFZGl0R2FzTW9kZXMuc3BlZWRVcCB8fCBtb2RlID09PSBFZGl0R2FzTW9kZXMuY2FuY2VsKSB7XG4gICAgdXBkYXRlZFRyYW5zYWN0aW9uID0ge1xuICAgICAgLi4udHJhbnNhY3Rpb24sXG4gICAgICB1c2VyRmVlTGV2ZWw6IENVU1RPTV9HQVNfRVNUSU1BVEUsXG4gICAgICB0eFBhcmFtczoge1xuICAgICAgICAuLi50cmFuc2FjdGlvbi50eFBhcmFtcyxcbiAgICAgICAgLi4udXBkYXRlZEN1c3RvbUdhc1NldHRpbmdzLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgY29uc3Qge1xuICAgIGVzdGltYXRlZE1pbmltdW1OYXRpdmUsXG4gICAgZ2FzUHJpY2UsXG4gICAgc2V0R2FzUHJpY2UsXG4gICAgZ2FzTGltaXQsXG4gICAgc2V0R2FzTGltaXQsXG4gICAgcHJvcGVyR2FzTGltaXQsXG4gICAgZXN0aW1hdGVUb1VzZSxcbiAgICBoYXNHYXNFcnJvcnMsXG4gICAgZ2FzRXJyb3JzLFxuICAgIG9uTWFudWFsQ2hhbmdlLFxuICAgIGJhbGFuY2VFcnJvcixcbiAgfSA9IHVzZUdhc0ZlZUlucHV0cyhcbiAgICBHYXNSZWNvbW1lbmRhdGlvbnMubWVkaXVtLFxuICAgIHVwZGF0ZWRUcmFuc2FjdGlvbixcbiAgICBtaW5pbXVtR2FzTGltaXQsXG4gICAgbW9kZSxcbiAgKTtcblxuICBjb25zdCB0eFBhcmFtc0hhdmVCZWVuQ3VzdG9taXplZCA9XG4gICAgZXN0aW1hdGVUb1VzZSA9PT0gQ1VTVE9NX0dBU19FU1RJTUFURSB8fFxuICAgIHR4UGFyYW1zQXJlRGFwcFN1Z2dlc3RlZCh1cGRhdGVkVHJhbnNhY3Rpb24pO1xuXG4gIC8qKlxuICAgKiBUZW1wb3JhcnkgcGxhY2Vob2xkZXIsIHRoaXMgc2hvdWxkIGJlIG1hbmFnZWQgYnkgdGhlIHBhcmVudCBjb21wb25lbnQgYnV0XG4gICAqIHdlIHdpbGwgYmUgZXh0cmFjdGluZyB0aGlzIGNvbXBvbmVudCBmcm9tIHRoZSBoYXJkIHRvIG1haW50YWluIG1vZGFsXG4gICAqIGNvbXBvbmVudC4gRm9yIG5vdyB0aGlzIGlzIGp1c3QgdG8gYmUgYWJsZSB0byBhcHByb3ByaWF0ZWx5IGNsb3NlXG4gICAqIHRoZSBtb2RhbCBpbiB0ZXN0aW5nXG4gICAqL1xuICBjb25zdCBjbG9zZVBvcG92ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlzcGF0Y2goaGlkZU1vZGFsKCkpO1xuICAgIH1cbiAgfSwgW29uQ2xvc2UsIGRpc3BhdGNoXSk7XG5cbiAgY29uc3Qgb25TdWJtaXQgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgaWYgKCF1cGRhdGVkVHJhbnNhY3Rpb24gfHwgIW1vZGUpIHtcbiAgICAgIGNsb3NlUG9wb3ZlcigpO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld0dhc1NldHRpbmdzID0ge1xuICAgICAgZ2FzOiBkZWNpbWFsVG9IZXgoZ2FzTGltaXQpLFxuICAgICAgZ2FzTGltaXQ6IGRlY2ltYWxUb0hleChnYXNMaW1pdCksXG4gICAgICBlc3RpbWF0ZVVzZWQ6IGVzdGltYXRlVG9Vc2UsXG4gICAgICBnYXNQcmljZTogZGVjR1dFSVRvSGV4V0VJKGdhc1ByaWNlKSxcbiAgICB9O1xuXG4gICAgY29uc3QgY2xlYW5UcmFuc2FjdGlvblBhcmFtcyA9IHsgLi4udXBkYXRlZFRyYW5zYWN0aW9uLnR4UGFyYW1zIH07XG5cbiAgICBjb25zdCB1cGRhdGVkVHhNZXRhID0ge1xuICAgICAgLi4udXBkYXRlZFRyYW5zYWN0aW9uLFxuICAgICAgdXNlckVkaXRlZEdhc0xpbWl0OiBnYXNMaW1pdCAhPT0gTnVtYmVyKHRyYW5zYWN0aW9uLm9yaWdpbmFsR2FzRXN0aW1hdGUpLFxuICAgICAgdXNlckZlZUxldmVsOiBlc3RpbWF0ZVRvVXNlIHx8IENVU1RPTV9HQVNfRVNUSU1BVEUsXG4gICAgICB0eFBhcmFtczoge1xuICAgICAgICAuLi5jbGVhblRyYW5zYWN0aW9uUGFyYW1zLFxuICAgICAgICAuLi5uZXdHYXNTZXR0aW5ncyxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgY2FzZSBFZGl0R2FzTW9kZXMuY2FuY2VsOlxuICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICBjcmVhdGVDYW5jZWxUcmFuc2FjdGlvbih1cGRhdGVkVHJhbnNhY3Rpb24uaWQsIG5ld0dhc1NldHRpbmdzKSxcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEVkaXRHYXNNb2Rlcy5zcGVlZFVwOlxuICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICBjcmVhdGVTcGVlZFVwVHJhbnNhY3Rpb24odXBkYXRlZFRyYW5zYWN0aW9uLmlkLCBuZXdHYXNTZXR0aW5ncyksXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBFZGl0R2FzTW9kZXMubW9kaWZ5SW5QbGFjZTpcbiAgICAgICAgbmV3R2FzU2V0dGluZ3MudXNlckVkaXRlZEdhc0xpbWl0ID0gdXBkYXRlZFR4TWV0YS51c2VyRWRpdGVkR2FzTGltaXQ7XG4gICAgICAgIG5ld0dhc1NldHRpbmdzLnVzZXJGZWVMZXZlbCA9IHVwZGF0ZWRUeE1ldGEudXNlckZlZUxldmVsO1xuXG4gICAgICAgIGRpc3BhdGNoKHNob3dMb2FkaW5nSW5kaWNhdGlvbigpKTtcbiAgICAgICAgYXdhaXQgZGlzcGF0Y2goXG4gICAgICAgICAgdXBkYXRlVHJhbnNhY3Rpb25HYXNGZWVzKHVwZGF0ZWRUeE1ldGEuaWQsIG5ld0dhc1NldHRpbmdzKSxcbiAgICAgICAgKTtcbiAgICAgICAgZGlzcGF0Y2goaGlkZUxvYWRpbmdJbmRpY2F0aW9uKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNsb3NlUG9wb3ZlcigpO1xuICB9LCBbXG4gICAgdXBkYXRlZFRyYW5zYWN0aW9uLFxuICAgIG1vZGUsXG4gICAgZGlzcGF0Y2gsXG4gICAgY2xvc2VQb3BvdmVyLFxuICAgIGdhc0xpbWl0LFxuICAgIGdhc1ByaWNlLFxuICAgIHRyYW5zYWN0aW9uLm9yaWdpbmFsR2FzRXN0aW1hdGUsXG4gICAgZXN0aW1hdGVUb1VzZSxcbiAgXSk7XG5cbiAgbGV0IHRpdGxlID0gdCgnZWRpdEdhc1RpdGxlJyk7XG4gIGlmIChwb3BvdmVyVGl0bGUpIHtcbiAgICB0aXRsZSA9IHBvcG92ZXJUaXRsZTtcbiAgfSBlbHNlIGlmIChtb2RlID09PSBFZGl0R2FzTW9kZXMuc3BlZWRVcCkge1xuICAgIHRpdGxlID0gdCgnc3BlZWRVcFBvcG92ZXJUaXRsZScpO1xuICB9IGVsc2UgaWYgKG1vZGUgPT09IEVkaXRHYXNNb2Rlcy5jYW5jZWwpIHtcbiAgICB0aXRsZSA9IHQoJ2NhbmNlbFBvcG92ZXJUaXRsZScpO1xuICB9XG5cbiAgY29uc3QgZm9vdGVyQnV0dG9uVGV4dCA9IGNvbmZpcm1CdXR0b25UZXh0IHx8IHQoJ3NhdmUnKTtcbiAgcmV0dXJuIChcbiAgICA8UG9wb3ZlclxuICAgICAgdGl0bGU9e3RpdGxlfVxuICAgICAgb25DbG9zZT17Y2xvc2VQb3BvdmVyfVxuICAgICAgY2xhc3NOYW1lPVwiZWRpdC1nYXMtcG9wb3Zlcl9fd3JhcHBlclwiXG4gICAgICBmb290ZXI9e1xuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICAgIG9uQ2xpY2s9e29uU3VibWl0fVxuICAgICAgICAgIGRpc2FibGVkPXtoYXNHYXNFcnJvcnMgfHwgYmFsYW5jZUVycm9yIHx8ICF0eFBhcmFtc0hhdmVCZWVuQ3VzdG9taXplZH1cbiAgICAgICAgPlxuICAgICAgICAgIHtmb290ZXJCdXR0b25UZXh0fVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIH1cbiAgICA+XG4gICAgICA8ZGl2IHN0eWxlPXt7IHBhZGRpbmc6ICcwIDIwcHggMjBweCAyMHB4JywgcG9zaXRpb246ICdyZWxhdGl2ZScgfX0+XG4gICAgICAgIHtwcm9jZXNzLmVudi5JTl9URVNUID8gbnVsbCA6IDxMb2FkaW5nSGVhcnRCZWF0IC8+fVxuICAgICAgICA8RWRpdEdhc0Rpc3BsYXlcbiAgICAgICAgICBkYXBwU3VnZ2VzdGVkR2FzRmVlQWNrbm93bGVkZ2VkPXtkYXBwU3VnZ2VzdGVkR2FzRmVlQWNrbm93bGVkZ2VkfVxuICAgICAgICAgIHNldERhcHBTdWdnZXN0ZWRHYXNGZWVBY2tub3dsZWRnZWQ9e1xuICAgICAgICAgICAgc2V0RGFwcFN1Z2dlc3RlZEdhc0ZlZUFja25vd2xlZGdlZFxuICAgICAgICAgIH1cbiAgICAgICAgICBlc3RpbWF0ZWRNaW5pbXVtTmF0aXZlPXtlc3RpbWF0ZWRNaW5pbXVtTmF0aXZlfVxuICAgICAgICAgIGdhc1ByaWNlPXtnYXNQcmljZX1cbiAgICAgICAgICBzZXRHYXNQcmljZT17c2V0R2FzUHJpY2V9XG4gICAgICAgICAgZ2FzTGltaXQ9e2dhc0xpbWl0fVxuICAgICAgICAgIHNldEdhc0xpbWl0PXtzZXRHYXNMaW1pdH1cbiAgICAgICAgICBwcm9wZXJHYXNMaW1pdD17cHJvcGVyR2FzTGltaXR9XG4gICAgICAgICAgbW9kZT17bW9kZX1cbiAgICAgICAgICB0cmFuc2FjdGlvbj17dXBkYXRlZFRyYW5zYWN0aW9ufVxuICAgICAgICAgIG9uTWFudWFsQ2hhbmdlPXtvbk1hbnVhbENoYW5nZX1cbiAgICAgICAgICBtaW5pbXVtR2FzTGltaXQ9e21pbmltdW1HYXNMaW1pdERlY31cbiAgICAgICAgICBiYWxhbmNlRXJyb3I9e2JhbGFuY2VFcnJvcn1cbiAgICAgICAgICB0eFBhcmFtc0hhdmVCZWVuQ3VzdG9taXplZD17dHhQYXJhbXNIYXZlQmVlbkN1c3RvbWl6ZWR9XG4gICAgICAgICAgZ2FzRXJyb3JzPXtnYXNFcnJvcnN9XG4gICAgICAgICAgey4uLmVkaXRHYXNEaXNwbGF5UHJvcHN9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L1BvcG92ZXI+XG4gICk7XG59XG5cbkVkaXRHYXNQb3BvdmVyLnByb3BUeXBlcyA9IHtcbiAgcG9wb3ZlclRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBlZGl0R2FzRGlzcGxheVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICBjb25maXJtQnV0dG9uVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gIHRyYW5zYWN0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBtb2RlOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LnZhbHVlcyhFZGl0R2FzTW9kZXMpKSxcbiAgbWluaW11bUdhc0xpbWl0OiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2VkaXQtZ2FzLXBvcG92ZXIuY29tcG9uZW50JztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHsgVGV4dFZhcmlhbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuaW1wb3J0IHsgZ2V0SXNNYWlubmV0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VsZWN0b3JzJztcbmltcG9ydCBCb3ggZnJvbSAnLi4vLi4vLi4vdWkvYm94JztcbmltcG9ydCBJbmZvVG9vbHRpcCBmcm9tICcuLi8uLi8uLi91aS9pbmZvLXRvb2x0aXAvaW5mby10b29sdGlwJztcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5cbmNvbnN0IEdhc0RldGFpbHNJdGVtVGl0bGUgPSAoKSA9PiB7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBjb25zdCBpc01haW5uZXQgPSB1c2VTZWxlY3RvcihnZXRJc01haW5uZXQpO1xuXG4gIHJldHVybiAoXG4gICAgPEJveCBkaXNwbGF5PVwiZmxleFwiPlxuICAgICAgPEJveCBtYXJnaW5SaWdodD17MX0+e3QoJ2dhcycpfTwvQm94PlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZ2FzLWRldGFpbHMtaXRlbS10aXRsZV9fZXN0aW1hdGVcIj5cbiAgICAgICAgKHt0KCd0cmFuc2FjdGlvbkRldGFpbEdhc0luZm9WMicpfSlcbiAgICAgIDwvc3Bhbj5cbiAgICAgIDxJbmZvVG9vbHRpcFxuICAgICAgICBjb250ZW50VGV4dD17XG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX0gYXM9XCJoNlwiPlxuICAgICAgICAgICAgICB7dCgndHJhbnNhY3Rpb25EZXRhaWxHYXNUb29sdGlwSW50cm8nLCBbXG4gICAgICAgICAgICAgICAgaXNNYWlubmV0ID8gdCgnbmV0d29ya05hbWVFdGhlcmV1bScpIDogJycsXG4gICAgICAgICAgICAgIF0pfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPFRleHQgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtfSBhcz1cImg2XCI+XG4gICAgICAgICAgICAgIHt0KCd0cmFuc2FjdGlvbkRldGFpbEdhc1Rvb2x0aXBFeHBsYW5hdGlvbicpfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPFRleHQgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtfSBhcz1cImg2XCI+XG4gICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vY29tbXVuaXR5Lm1ldGFtYXNrLmlvL3Qvd2hhdC1pcy1nYXMtd2h5LWRvLXRyYW5zYWN0aW9ucy10YWtlLXNvLWxvbmcvMzE3MlwiXG4gICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0KCd0cmFuc2FjdGlvbkRldGFpbEdhc1Rvb2x0aXBDb252ZXJzaW9uJyl9XG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICA8Lz5cbiAgICAgICAgfVxuICAgICAgICBwb3NpdGlvbj1cImJvdHRvbVwiXG4gICAgICAvPlxuICAgIDwvQm94PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgR2FzRGV0YWlsc0l0ZW1UaXRsZTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2dhcy1kZXRhaWxzLWl0ZW0tdGl0bGUnO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgeyBUZXh0Q29sb3IgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IFBSSU1BUlksIFNFQ09OREFSWSB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2NvbW1vbic7XG5pbXBvcnQge1xuICBnZXRQcmVmZXJlbmNlcyxcbiAgZ2V0VXNlQ3VycmVuY3lSYXRlQ2hlY2ssXG4gIHRyYW5zYWN0aW9uRmVlU2VsZWN0b3IsXG59IGZyb20gJy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBnZXRDdXJyZW50RHJhZnRUcmFuc2FjdGlvbiB9IGZyb20gJy4uLy4uLy4uL2R1Y2tzL3NlbmQnO1xuaW1wb3J0IHsgdXNlR2FzRmVlQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbnRleHRzL2dhc0ZlZSc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcblxuaW1wb3J0IEJveCBmcm9tICcuLi8uLi91aS9ib3gnO1xuaW1wb3J0IExvYWRpbmdIZWFydEJlYXQgZnJvbSAnLi4vLi4vdWkvbG9hZGluZy1oZWFydGJlYXQnO1xuaW1wb3J0IEdhc1RpbWluZyBmcm9tICcuLi9nYXMtdGltaW5nL2dhcy10aW1pbmcuY29tcG9uZW50JztcbmltcG9ydCBUcmFuc2FjdGlvbkRldGFpbEl0ZW0gZnJvbSAnLi4vdHJhbnNhY3Rpb24tZGV0YWlsLWl0ZW0vdHJhbnNhY3Rpb24tZGV0YWlsLWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCBVc2VyUHJlZmVyZW5jZWRDdXJyZW5jeURpc3BsYXkgZnJvbSAnLi4vdXNlci1wcmVmZXJlbmNlZC1jdXJyZW5jeS1kaXNwbGF5JztcbmltcG9ydCB7IGhleFdFSVRvRGVjR1dFSSB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL2NvbnZlcnNpb24udXRpbHMnO1xuaW1wb3J0IHsgdXNlRHJhZnRUcmFuc2FjdGlvbldpdGhUeFBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZURyYWZ0VHJhbnNhY3Rpb25XaXRoVHhQYXJhbXMnO1xuaW1wb3J0IEdhc0RldGFpbHNJdGVtVGl0bGUgZnJvbSAnLi9nYXMtZGV0YWlscy1pdGVtLXRpdGxlJztcblxuY29uc3QgR2FzRGV0YWlsc0l0ZW0gPSAoeyB1c2VyQWNrbm93bGVkZ2VkR2FzTWlzc2luZyA9IGZhbHNlIH0pID0+IHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IGRyYWZ0VHJhbnNhY3Rpb24gPSB1c2VTZWxlY3RvcihnZXRDdXJyZW50RHJhZnRUcmFuc2FjdGlvbik7XG4gIGNvbnN0IHRyYW5zYWN0aW9uRGF0YSA9IHVzZURyYWZ0VHJhbnNhY3Rpb25XaXRoVHhQYXJhbXMoKTtcblxuICBjb25zdCB7XG4gICAgaGV4TWluaW11bVRyYW5zYWN0aW9uRmVlOiBkcmFmdEhleE1pbmltdW1UcmFuc2FjdGlvbkZlZSxcbiAgICBoZXhNYXhpbXVtVHJhbnNhY3Rpb25GZWU6IGRyYWZ0SGV4TWF4aW11bVRyYW5zYWN0aW9uRmVlLFxuICB9ID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiB0cmFuc2FjdGlvbkZlZVNlbGVjdG9yKHN0YXRlLCB0cmFuc2FjdGlvbkRhdGEpKTtcblxuICBjb25zdCB7XG4gICAgZXN0aW1hdGVVc2VkLFxuICAgIGhhc1NpbXVsYXRpb25FcnJvcixcbiAgICBtYXhpbXVtQ29zdEluSGV4V2VpOiBoZXhNYXhpbXVtVHJhbnNhY3Rpb25GZWUsXG4gICAgbWluaW11bUNvc3RJbkhleFdlaTogaGV4TWluaW11bVRyYW5zYWN0aW9uRmVlLFxuICAgIG1heFByaW9yaXR5RmVlUGVyR2FzLFxuICAgIG1heEZlZVBlckdhcyxcbiAgfSA9IHVzZUdhc0ZlZUNvbnRleHQoKTtcblxuICBjb25zdCB7IHVzZU5hdGl2ZUN1cnJlbmN5QXNQcmltYXJ5Q3VycmVuY3kgfSA9IHVzZVNlbGVjdG9yKGdldFByZWZlcmVuY2VzKTtcblxuICBjb25zdCB1c2VDdXJyZW5jeVJhdGVDaGVjayA9IHVzZVNlbGVjdG9yKGdldFVzZUN1cnJlbmN5UmF0ZUNoZWNrKTtcblxuICBpZiAoaGFzU2ltdWxhdGlvbkVycm9yICYmICF1c2VyQWNrbm93bGVkZ2VkR2FzTWlzc2luZykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgbWF4UHJpb3JpdHlGZWVQZXJHYXNUb1JlbmRlciA9IChcbiAgICBtYXhQcmlvcml0eUZlZVBlckdhcyA/P1xuICAgIGhleFdFSVRvRGVjR1dFSSh0cmFuc2FjdGlvbkRhdGEudHhQYXJhbXM/Lm1heFByaW9yaXR5RmVlUGVyR2FzID8/ICcweDAnKVxuICApLnRvU3RyaW5nKCk7XG5cbiAgY29uc3QgbWF4RmVlUGVyR2FzVG9SZW5kZXIgPSAoXG4gICAgbWF4RmVlUGVyR2FzID8/XG4gICAgaGV4V0VJVG9EZWNHV0VJKHRyYW5zYWN0aW9uRGF0YS50eFBhcmFtcz8ubWF4RmVlUGVyR2FzID8/ICcweDAnKVxuICApLnRvU3RyaW5nKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8VHJhbnNhY3Rpb25EZXRhaWxJdGVtXG4gICAgICBrZXk9XCJnYXMtZGV0YWlscy1pdGVtXCJcbiAgICAgIGRldGFpbFRpdGxlPXs8R2FzRGV0YWlsc0l0ZW1UaXRsZSAvPn1cbiAgICAgIGRldGFpbFRpdGxlQ29sb3I9e1RleHRDb2xvci50ZXh0RGVmYXVsdH1cbiAgICAgIGRldGFpbFRleHQ9e1xuICAgICAgICB1c2VDdXJyZW5jeVJhdGVDaGVjayAmJlxuICAgICAgICBPYmplY3Qua2V5cyhkcmFmdFRyYW5zYWN0aW9uKS5sZW5ndGggPT09IDAgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2FzLWRldGFpbHMtaXRlbV9fY3VycmVuY3ktY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8TG9hZGluZ0hlYXJ0QmVhdCBlc3RpbWF0ZVVzZWQ9e2VzdGltYXRlVXNlZH0gLz5cbiAgICAgICAgICAgIDxVc2VyUHJlZmVyZW5jZWRDdXJyZW5jeURpc3BsYXlcbiAgICAgICAgICAgICAgdHlwZT17U0VDT05EQVJZfVxuICAgICAgICAgICAgICB2YWx1ZT17aGV4TWluaW11bVRyYW5zYWN0aW9uRmVlfVxuICAgICAgICAgICAgICBoaWRlTGFiZWw9e0Jvb2xlYW4odXNlTmF0aXZlQ3VycmVuY3lBc1ByaW1hcnlDdXJyZW5jeSl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgICB9XG4gICAgICBkZXRhaWxUb3RhbD17XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2FzLWRldGFpbHMtaXRlbV9fY3VycmVuY3ktY29udGFpbmVyXCI+XG4gICAgICAgICAgPExvYWRpbmdIZWFydEJlYXQgZXN0aW1hdGVVc2VkPXtlc3RpbWF0ZVVzZWR9IC8+XG4gICAgICAgICAgPFVzZXJQcmVmZXJlbmNlZEN1cnJlbmN5RGlzcGxheVxuICAgICAgICAgICAgdHlwZT17UFJJTUFSWX1cbiAgICAgICAgICAgIHZhbHVlPXtoZXhNaW5pbXVtVHJhbnNhY3Rpb25GZWUgfHwgZHJhZnRIZXhNaW5pbXVtVHJhbnNhY3Rpb25GZWV9XG4gICAgICAgICAgICBoaWRlTGFiZWw9eyF1c2VOYXRpdmVDdXJyZW5jeUFzUHJpbWFyeUN1cnJlbmN5fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgfVxuICAgICAgc3ViVGV4dD17XG4gICAgICAgIDw+XG4gICAgICAgICAgPEJveFxuICAgICAgICAgICAga2V5PVwiZWRpdEdhc1N1YlRleHRGZWVMYWJlbFwiXG4gICAgICAgICAgICBkaXNwbGF5PVwiaW5saW5lLWZsZXhcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdnYXMtZGV0YWlscy1pdGVtX19nYXNmZWUtbGFiZWwnLCB7XG4gICAgICAgICAgICAgICdnYXMtZGV0YWlscy1pdGVtX19nYXMtZmVlLXdhcm5pbmcnOiBlc3RpbWF0ZVVzZWQgPT09ICdoaWdoJyxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxMb2FkaW5nSGVhcnRCZWF0IGVzdGltYXRlVXNlZD17ZXN0aW1hdGVVc2VkfSAvPlxuICAgICAgICAgICAgPEJveCBtYXJnaW5SaWdodD17MX0+XG4gICAgICAgICAgICAgIDxzdHJvbmc+XG4gICAgICAgICAgICAgICAge2VzdGltYXRlVXNlZCA9PT0gJ2hpZ2gnICYmICfimqAgJ31cbiAgICAgICAgICAgICAgICB7dCgnZWRpdEdhc1N1YlRleHRGZWVMYWJlbCcpfVxuICAgICAgICAgICAgICA8L3N0cm9uZz5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9XCJlZGl0R2FzU3ViVGV4dEZlZVZhbHVlXCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ2FzLWRldGFpbHMtaXRlbV9fY3VycmVuY3ktY29udGFpbmVyXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPExvYWRpbmdIZWFydEJlYXQgZXN0aW1hdGVVc2VkPXtlc3RpbWF0ZVVzZWR9IC8+XG4gICAgICAgICAgICAgIDxVc2VyUHJlZmVyZW5jZWRDdXJyZW5jeURpc3BsYXlcbiAgICAgICAgICAgICAgICBrZXk9XCJlZGl0R2FzU3ViVGV4dEZlZUFtb3VudFwiXG4gICAgICAgICAgICAgICAgdHlwZT17UFJJTUFSWX1cbiAgICAgICAgICAgICAgICB2YWx1ZT17XG4gICAgICAgICAgICAgICAgICBoZXhNYXhpbXVtVHJhbnNhY3Rpb25GZWUgfHwgZHJhZnRIZXhNYXhpbXVtVHJhbnNhY3Rpb25GZWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGlkZUxhYmVsPXshdXNlTmF0aXZlQ3VycmVuY3lBc1ByaW1hcnlDdXJyZW5jeX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICA8Lz5cbiAgICAgIH1cbiAgICAgIHN1YlRpdGxlPXtcbiAgICAgICAgPEdhc1RpbWluZ1xuICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzPXttYXhQcmlvcml0eUZlZVBlckdhc1RvUmVuZGVyfVxuICAgICAgICAgIG1heEZlZVBlckdhcz17bWF4RmVlUGVyR2FzVG9SZW5kZXJ9XG4gICAgICAgIC8+XG4gICAgICB9XG4gICAgLz5cbiAgKTtcbn07XG5cbkdhc0RldGFpbHNJdGVtLnByb3BUeXBlcyA9IHtcbiAgdXNlckFja25vd2xlZGdlZEdhc01pc3Npbmc6IFByb3BUeXBlcy5ib29sLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgR2FzRGV0YWlsc0l0ZW07XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9nYXMtZGV0YWlscy1pdGVtJztcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgQmlnTnVtYmVyIGZyb20gJ2JpZ251bWJlci5qcyc7XG5cbmltcG9ydCB7IEdhc0VzdGltYXRlVHlwZXMgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2dhcyc7XG5cbmltcG9ydCB7IHVzZVByZXZpb3VzIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlUHJldmlvdXMnO1xuaW1wb3J0IHsgSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb250ZXh0cy9pMThuJztcbmltcG9ydCB7IHVzZUdhc0ZlZUNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb250ZXh0cy9nYXNGZWUnO1xuXG5pbXBvcnQge1xuICBnZXRHYXNFc3RpbWF0ZVR5cGUsXG4gIGdldEdhc0ZlZUVzdGltYXRlcyxcbiAgZ2V0SXNHYXNFc3RpbWF0ZXNMb2FkaW5nLFxufSBmcm9tICcuLi8uLi8uLi9kdWNrcy9tZXRhbWFzay9tZXRhbWFzayc7XG5cbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uLy4uL3VpL3R5cG9ncmFwaHkvdHlwb2dyYXBoeSc7XG5pbXBvcnQge1xuICBUeXBvZ3JhcGh5VmFyaWFudCxcbiAgRk9OVF9XRUlHSFQsXG59IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuXG5pbXBvcnQgeyBnZXRHYXNGZWVUaW1lRXN0aW1hdGUgfSBmcm9tICcuLi8uLi8uLi9zdG9yZS9hY3Rpb25zJztcbmltcG9ydCB7IEdBU19GT1JNX0VSUk9SUyB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2dhcyc7XG5cbi8vIE9uY2Ugd2UgcmVhY2ggdGhpcyBzZWNvbmQgdGhyZXNob2xkLCB3ZSBzd2l0Y2ggdG8gbWludXRlcyBhcyBhIHVuaXRcbmNvbnN0IFNFQ09ORF9DVVRPRkYgPSA5MDtcblxuLy8gU2hvd3MgXCJzZWNvbmRzXCIgYXMgdW5pdCBvZiB0aW1lIGlmIHVuZGVyIFNFQ09ORF9DVVRPRkYsIG90aGVyd2lzZSBcIm1pbnV0ZXNcIlxuY29uc3QgdG9IdW1hblJlYWRhYmxlVGltZSA9IChtaWxsaXNlY29uZHMgPSAxLCB0KSA9PiB7XG4gIGNvbnN0IHNlY29uZHMgPSBNYXRoLmNlaWwobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gIGlmIChzZWNvbmRzIDw9IFNFQ09ORF9DVVRPRkYpIHtcbiAgICByZXR1cm4gdCgnZ2FzVGltaW5nU2Vjb25kcycsIFtzZWNvbmRzXSk7XG4gIH1cbiAgcmV0dXJuIHQoJ2dhc1RpbWluZ01pbnV0ZXMnLCBbTWF0aC5jZWlsKHNlY29uZHMgLyA2MCldKTtcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHYXNUaW1pbmcoe1xuICBtYXhGZWVQZXJHYXMgPSAwLFxuICBtYXhQcmlvcml0eUZlZVBlckdhcyA9IDAsXG4gIGdhc1dhcm5pbmdzLFxufSkge1xuICBjb25zdCBnYXNFc3RpbWF0ZVR5cGUgPSB1c2VTZWxlY3RvcihnZXRHYXNFc3RpbWF0ZVR5cGUpO1xuICBjb25zdCBnYXNGZWVFc3RpbWF0ZXMgPSB1c2VTZWxlY3RvcihnZXRHYXNGZWVFc3RpbWF0ZXMpO1xuICBjb25zdCBpc0dhc0VzdGltYXRlc0xvYWRpbmcgPSB1c2VTZWxlY3RvcihnZXRJc0dhc0VzdGltYXRlc0xvYWRpbmcpO1xuXG4gIGNvbnN0IFtjdXN0b21Fc3RpbWF0ZWRUaW1lLCBzZXRDdXN0b21Fc3RpbWF0ZWRUaW1lXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCB0ID0gdXNlQ29udGV4dChJMThuQ29udGV4dCk7XG4gIGNvbnN0IHsgZXN0aW1hdGVVc2VkIH0gPSB1c2VHYXNGZWVDb250ZXh0KCk7XG5cbiAgLy8gSWYgdGhlIHVzZXIgaGFzIGNob3NlbiBhIHZhbHVlIGxvd2VyIHRoYW4gdGhlIGxvdyBnYXMgZmVlIGVzdGltYXRlLFxuICAvLyBXZSdsbCBuZWVkIHRvIHVzZSB0aGUgdXNlRWZmZWN0IGhvb2sgYmVsb3cgdG8gbWFrZSBhIGNhbGwgdG8gY2FsY3VsYXRlXG4gIC8vIHRoZSB0aW1lIHRvIHNob3dcbiAgY29uc3QgaXNVbmtub3duTG93ID1cbiAgICBnYXNGZWVFc3RpbWF0ZXM/LmxvdyAmJlxuICAgIE51bWJlcihtYXhQcmlvcml0eUZlZVBlckdhcykgPFxuICAgICAgTnVtYmVyKGdhc0ZlZUVzdGltYXRlcy5sb3cuc3VnZ2VzdGVkTWF4UHJpb3JpdHlGZWVQZXJHYXMpO1xuXG4gIGNvbnN0IHByZXZpb3VzTWF4RmVlUGVyR2FzID0gdXNlUHJldmlvdXMobWF4RmVlUGVyR2FzKTtcbiAgY29uc3QgcHJldmlvdXNNYXhQcmlvcml0eUZlZVBlckdhcyA9IHVzZVByZXZpb3VzKG1heFByaW9yaXR5RmVlUGVyR2FzKTtcbiAgY29uc3QgcHJldmlvdXNJc1Vua25vd25Mb3cgPSB1c2VQcmV2aW91cyhpc1Vua25vd25Mb3cpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgcHJpb3JpdHkgPSBtYXhQcmlvcml0eUZlZVBlckdhcztcbiAgICBjb25zdCBmZWUgPSBtYXhGZWVQZXJHYXM7XG5cbiAgICBpZiAoXG4gICAgICBpc1Vua25vd25Mb3cgfHxcbiAgICAgIChwcmlvcml0eSAmJiBwcmlvcml0eSAhPT0gcHJldmlvdXNNYXhQcmlvcml0eUZlZVBlckdhcykgfHxcbiAgICAgIChmZWUgJiYgZmVlICE9PSBwcmV2aW91c01heEZlZVBlckdhcylcbiAgICApIHtcbiAgICAgIC8vIGdldEdhc0ZlZVRpbWVFc3RpbWF0ZSByZXF1aXJlcyBwYXJhbWV0ZXJzIGluIHN0cmluZyBmb3JtYXRcbiAgICAgIGdldEdhc0ZlZVRpbWVFc3RpbWF0ZShcbiAgICAgICAgbmV3IEJpZ051bWJlcihwcmlvcml0eSwgMTApLnRvU3RyaW5nKDEwKSxcbiAgICAgICAgbmV3IEJpZ051bWJlcihmZWUsIDEwKS50b1N0cmluZygxMCksXG4gICAgICApLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAobWF4RmVlUGVyR2FzID09PSBmZWUgJiYgbWF4UHJpb3JpdHlGZWVQZXJHYXMgPT09IHByaW9yaXR5KSB7XG4gICAgICAgICAgc2V0Q3VzdG9tRXN0aW1hdGVkVGltZShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNVbmtub3duTG93ICE9PSBmYWxzZSAmJiBwcmV2aW91c0lzVW5rbm93bkxvdyA9PT0gdHJ1ZSkge1xuICAgICAgc2V0Q3VzdG9tRXN0aW1hdGVkVGltZShudWxsKTtcbiAgICB9XG4gIH0sIFtcbiAgICBtYXhQcmlvcml0eUZlZVBlckdhcyxcbiAgICBtYXhGZWVQZXJHYXMsXG4gICAgaXNVbmtub3duTG93LFxuICAgIHByZXZpb3VzTWF4RmVlUGVyR2FzLFxuICAgIHByZXZpb3VzTWF4UHJpb3JpdHlGZWVQZXJHYXMsXG4gICAgcHJldmlvdXNJc1Vua25vd25Mb3csXG4gIF0pO1xuXG4gIGlmIChcbiAgICBnYXNXYXJuaW5ncz8ubWF4UHJpb3JpdHlGZWUgPT09IEdBU19GT1JNX0VSUk9SUy5NQVhfUFJJT1JJVFlfRkVFX1RPT19MT1cgfHxcbiAgICBnYXNXYXJuaW5ncz8ubWF4RmVlID09PSBHQVNfRk9STV9FUlJPUlMuTUFYX0ZFRV9UT09fTE9XXG4gICkge1xuICAgIHJldHVybiAoXG4gICAgICA8VHlwb2dyYXBoeVxuICAgICAgICB2YXJpYW50PXtUeXBvZ3JhcGh5VmFyaWFudC5IN31cbiAgICAgICAgZm9udFdlaWdodD17Rk9OVF9XRUlHSFQuQk9MRH1cbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdnYXMtdGltaW5nJywgJ2dhcy10aW1pbmctLW5lZ2F0aXZlJyl9XG4gICAgICA+XG4gICAgICAgIHt0KCdlZGl0R2FzVG9vTG93Jyl9XG4gICAgICA8L1R5cG9ncmFwaHk+XG4gICAgKTtcbiAgfVxuXG4gIC8vIERvbid0IHNob3cgYW55dGhpbmcgaWYgd2UgZG9uJ3QgaGF2ZSBlbm91Z2ggaW5mb3JtYXRpb25cbiAgaWYgKGlzR2FzRXN0aW1hdGVzTG9hZGluZyB8fCBnYXNFc3RpbWF0ZVR5cGUgIT09IEdhc0VzdGltYXRlVHlwZXMuZmVlTWFya2V0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCB7IGxvdyA9IHt9LCBtZWRpdW0gPSB7fSwgaGlnaCA9IHt9IH0gPSBnYXNGZWVFc3RpbWF0ZXM7XG5cbiAgbGV0IHRleHQgPSAnJztcbiAgbGV0IGF0dGl0dWRlID0gJ3Bvc2l0aXZlJztcblxuICAvLyBBbnl0aGluZyBtZWRpdW0gb3IgZmFzdGVyIGlzIHBvc2l0aXZlXG4gIGlmIChcbiAgICBOdW1iZXIobWF4UHJpb3JpdHlGZWVQZXJHYXMpID49IE51bWJlcihtZWRpdW0uc3VnZ2VzdGVkTWF4UHJpb3JpdHlGZWVQZXJHYXMpXG4gICkge1xuICAgIC8vIEhpZ2grIGlzIHZlcnkgbGlrZWx5LCBtZWRpdW0gaXMgbGlrZWx5XG4gICAgaWYgKFxuICAgICAgTnVtYmVyKG1heFByaW9yaXR5RmVlUGVyR2FzKSA8IE51bWJlcihoaWdoLnN1Z2dlc3RlZE1heFByaW9yaXR5RmVlUGVyR2FzKVxuICAgICkge1xuICAgICAgLy8gTWVkaXVtXG4gICAgICB0ZXh0ID0gdCgnZ2FzVGltaW5nUG9zaXRpdmUnLCBbXG4gICAgICAgIHRvSHVtYW5SZWFkYWJsZVRpbWUobG93Lm1heFdhaXRUaW1lRXN0aW1hdGUsIHQpLFxuICAgICAgXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEhpZ2hcbiAgICAgIHRleHQgPSB0KCdnYXNUaW1pbmdWZXJ5UG9zaXRpdmUnLCBbXG4gICAgICAgIHRvSHVtYW5SZWFkYWJsZVRpbWUoaGlnaC5taW5XYWl0VGltZUVzdGltYXRlLCB0KSxcbiAgICAgIF0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZXN0aW1hdGVVc2VkID09PSAnbG93Jykge1xuICAgICAgYXR0aXR1ZGUgPSAnbmVnYXRpdmUnO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgdXNlciBoYXMgY2hvc2VuIGEgdmFsdWUgbGVzcyB0aGFuIG91ciBsb3cgZXN0aW1hdGUsXG4gICAgLy8gY2FsY3VsYXRlIGEgcG90ZW50aWFsIHdhaXQgdGltZVxuICAgIGlmIChpc1Vua25vd25Mb3cpIHtcbiAgICAgIC8vIElmIHdlIGRpZG4ndCBnZXQgYW55IHVzZWZ1bCBpbmZvcm1hdGlvbiwgc2hvdyB0aGVcbiAgICAgIC8vIFwidW5rbm93biBwcm9jZXNzaW5nIHRpbWVcIiBtZXNzYWdlXG4gICAgICBpZiAoXG4gICAgICAgICFjdXN0b21Fc3RpbWF0ZWRUaW1lIHx8XG4gICAgICAgIGN1c3RvbUVzdGltYXRlZFRpbWUgPT09ICd1bmtub3duJyB8fFxuICAgICAgICBjdXN0b21Fc3RpbWF0ZWRUaW1lPy51cHBlclRpbWVCb3VuZCA9PT0gJ3Vua25vd24nXG4gICAgICApIHtcbiAgICAgICAgdGV4dCA9IHQoJ2VkaXRHYXNUb29Mb3cnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHQgPSB0KCdnYXNUaW1pbmdOZWdhdGl2ZScsIFtcbiAgICAgICAgICB0b0h1bWFuUmVhZGFibGVUaW1lKE51bWJlcihjdXN0b21Fc3RpbWF0ZWRUaW1lPy51cHBlclRpbWVCb3VuZCksIHQpLFxuICAgICAgICBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGV4dCA9IHQoJ2dhc1RpbWluZ05lZ2F0aXZlJywgW1xuICAgICAgICB0b0h1bWFuUmVhZGFibGVUaW1lKGxvdy5tYXhXYWl0VGltZUVzdGltYXRlLCB0KSxcbiAgICAgIF0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFR5cG9ncmFwaHlcbiAgICAgIHZhcmlhbnQ9e1R5cG9ncmFwaHlWYXJpYW50Lkg3fVxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdnYXMtdGltaW5nJywge1xuICAgICAgICBbYGdhcy10aW1pbmctLSR7YXR0aXR1ZGV9YF06IGF0dGl0dWRlLFxuICAgICAgfSl9XG4gICAgPlxuICAgICAge3RleHR9XG4gICAgPC9UeXBvZ3JhcGh5PlxuICApO1xufVxuXG5HYXNUaW1pbmcucHJvcFR5cGVzID0ge1xuICBtYXhQcmlvcml0eUZlZVBlckdhczogUHJvcFR5cGVzLnN0cmluZyxcbiAgbWF4RmVlUGVyR2FzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBnYXNXYXJuaW5nczogUHJvcFR5cGVzLm9iamVjdCxcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbnRleHRzL2kxOG4nO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50LWxpYnJhcnknO1xuaW1wb3J0IEJveCBmcm9tICcuLi8uLi91aS9ib3gnO1xuaW1wb3J0IHtcbiAgQWxpZ25JdGVtcyxcbiAgRElTUExBWSxcbiAgSnVzdGlmeUNvbnRlbnQsXG59IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgTWV0YU1ldHJpY3NDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dHMvbWV0YW1ldHJpY3MnO1xuaW1wb3J0IHtcbiAgTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5LFxuICBNZXRhTWV0cmljc0V2ZW50S2V5VHlwZSxcbiAgTWV0YU1ldHJpY3NFdmVudE5hbWUsXG59IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbWV0YW1ldHJpY3MnO1xuXG5jb25zdCByYWRpdXMgPSAxNDtcbmNvbnN0IHN0cm9rZVdpZHRoID0gMjtcbmNvbnN0IHJhZGl1c1dpdGhTdHJva2UgPSByYWRpdXMgLSBzdHJva2VXaWR0aCAvIDI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhvbGRUb1JldmVhbEJ1dHRvbih7IGJ1dHRvblRleHQsIG9uTG9uZ1ByZXNzZWQgfSkge1xuICBjb25zdCB0ID0gdXNlQ29udGV4dChJMThuQ29udGV4dCk7XG4gIGNvbnN0IGlzTG9uZ1ByZXNzaW5nID0gdXNlUmVmKGZhbHNlKTtcbiAgY29uc3QgW2lzVW5sb2NraW5nLCBzZXRJc1VubG9ja2luZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtoYXNUcmlnZ2VyZWRVbmxvY2ssIHNldEhhc1RyaWdnZXJlZFVubG9ja10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IHRyYWNrRXZlbnQgPSB1c2VDb250ZXh0KE1ldGFNZXRyaWNzQ29udGV4dCk7XG5cbiAgLyoqXG4gICAqIFByZXZlbnQgYW5pbWF0aW9uIGV2ZW50cyBmcm9tIHByb3BvZ2F0aW5nIHVwXG4gICAqXG4gICAqIEBwYXJhbSBlIC0gTmF0aXZlIGFuaW1hdGlvbiBldmVudCAtIFJlYWN0LkFuaW1hdGlvbkV2ZW50PEhUTUxEaXZFbGVtZW50PlxuICAgKi9cbiAgY29uc3QgcHJldmVudFByb3BvZ2F0aW9uID0gKGUpID0+IHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBFdmVudCBmb3IgbW91c2UgY2xpY2sgZG93blxuICAgKi9cbiAgY29uc3Qgb25Nb3VzZURvd24gPSAoKSA9PiB7XG4gICAgaXNMb25nUHJlc3NpbmcuY3VycmVudCA9IHRydWU7XG4gICAgdHJhY2tFdmVudCh7XG4gICAgICBjYXRlZ29yeTogTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5LktleXMsXG4gICAgICBldmVudDogTWV0YU1ldHJpY3NFdmVudE5hbWUuU3JwSG9sZFRvUmV2ZWFsQ2xpY2tTdGFydGVkLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBrZXlfdHlwZTogTWV0YU1ldHJpY3NFdmVudEtleVR5cGUuU3JwLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogRXZlbnQgZm9yIG1vdXNlIGNsaWNrIHVwXG4gICAqL1xuICBjb25zdCBvbk1vdXNlVXAgPSAoKSA9PiB7XG4gICAgaXNMb25nUHJlc3NpbmcuY3VycmVudCA9IGZhbHNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAxLiBQcm9ncmVzcyBjaXJsZSBjb21wbGV0ZWQuIEJlZ2luIG5leHQgYW5pbWF0aW9uIHBoYXNlIChTaHJpbmsgaGFsbyBhbmQgc2hvdyB1bmxvY2tlZCBwYWRsb2NrKVxuICAgKi9cbiAgY29uc3Qgb25Qcm9ncmVzc0NvbXBsZXRlID0gKCkgPT4ge1xuICAgIGlzTG9uZ1ByZXNzaW5nLmN1cnJlbnQgJiYgc2V0SXNVbmxvY2tpbmcodHJ1ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIDIuIFRyaWdnZXIgb25Mb25nUHJlc3NlZCBjYWxsYmFjay4gQmVnaW4gbmV4dCBhbmltYXRpb24gcGhhc2UgKFNocmluayB1bmxvY2tlZCBwYWRsb2NrIGFuZCBmYWRlIGluIG9yaWdpbmFsIGNvbnRlbnQpXG4gICAqXG4gICAqIEBwYXJhbSBlIC0gTmF0aXZlIGFuaW1hdGlvbiBldmVudCAtIFJlYWN0LkFuaW1hdGlvbkV2ZW50PEhUTUxEaXZFbGVtZW50PlxuICAgKi9cbiAgY29uc3QgdHJpZ2dlck9uTG9uZ1ByZXNzZWQgPSB1c2VDYWxsYmFjayhcbiAgICAoZSkgPT4ge1xuICAgICAgdHJhY2tFdmVudCh7XG4gICAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuS2V5cyxcbiAgICAgICAgZXZlbnQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLlNycEhvbGRUb1JldmVhbENvbXBsZXRlZCxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIGtleV90eXBlOiBNZXRhTWV0cmljc0V2ZW50S2V5VHlwZS5TcnAsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIHRyYWNrRXZlbnQoe1xuICAgICAgICBjYXRlZ29yeTogTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5LktleXMsXG4gICAgICAgIGV2ZW50OiBNZXRhTWV0cmljc0V2ZW50TmFtZS5TcnBSZXZlYWxWaWV3ZWQsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBrZXlfdHlwZTogTWV0YU1ldHJpY3NFdmVudEtleVR5cGUuU3JwLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBvbkxvbmdQcmVzc2VkKCk7XG4gICAgICBzZXRIYXNUcmlnZ2VyZWRVbmxvY2sodHJ1ZSk7XG4gICAgICBwcmV2ZW50UHJvcG9nYXRpb24oZSk7XG4gICAgfSxcbiAgICBbb25Mb25nUHJlc3NlZF0sXG4gICk7XG5cbiAgLyoqXG4gICAqIDMuIFJlc2V0IGFuaW1hdGlvbiBzdGF0ZXNcbiAgICovXG4gIGNvbnN0IHJlc2V0QW5pbWF0aW9uU3RhdGVzID0gKCkgPT4ge1xuICAgIHNldElzVW5sb2NraW5nKGZhbHNlKTtcbiAgICBzZXRIYXNUcmlnZ2VyZWRVbmxvY2soZmFsc2UpO1xuICB9O1xuXG4gIGNvbnN0IHJlbmRlclByZUNvbXBsZXRlQ29udGVudCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPEJveFxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ2hvbGQtdG8tcmV2ZWFsLWJ1dHRvbl9fYWJzb2x1dGUtZmlsbCcsIHtcbiAgICAgICAgICAnaG9sZC10by1yZXZlYWwtYnV0dG9uX19hYnNvbHV0ZS1maWxsJzogaXNVbmxvY2tpbmcsXG4gICAgICAgICAgJ2hvbGQtdG8tcmV2ZWFsLWJ1dHRvbl9fbWFpbi1pY29uLXNob3cnOiBoYXNUcmlnZ2VyZWRVbmxvY2ssXG4gICAgICAgIH0pfVxuICAgICAgPlxuICAgICAgICA8Qm94IGNsYXNzTmFtZT1cImhvbGQtdG8tcmV2ZWFsLWJ1dHRvbl9fYWJzb2x1dGUtZmlsbFwiPlxuICAgICAgICAgIDxzdmcgY2xhc3NOYW1lPVwiaG9sZC10by1yZXZlYWwtYnV0dG9uX19jaXJjbGUtc3ZnXCI+XG4gICAgICAgICAgICA8Y2lyY2xlXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImhvbGQtdG8tcmV2ZWFsLWJ1dHRvbl9fY2lyY2xlLWJhY2tncm91bmRcIlxuICAgICAgICAgICAgICBjeD17cmFkaXVzfVxuICAgICAgICAgICAgICBjeT17cmFkaXVzfVxuICAgICAgICAgICAgICByPXtyYWRpdXNXaXRoU3Ryb2tlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC9Cb3g+XG4gICAgICAgIDxCb3ggY2xhc3NOYW1lPVwiaG9sZC10by1yZXZlYWwtYnV0dG9uX19hYnNvbHV0ZS1maWxsXCI+XG4gICAgICAgICAgPHN2ZyBjbGFzc05hbWU9XCJob2xkLXRvLXJldmVhbC1idXR0b25fX2NpcmNsZS1zdmdcIj5cbiAgICAgICAgICAgIDxjaXJjbGVcbiAgICAgICAgICAgICAgYXJpYS1sYWJlbD17dCgnaG9sZFRvUmV2ZWFsTG9ja2VkTGFiZWwnKX1cbiAgICAgICAgICAgICAgb25UcmFuc2l0aW9uRW5kPXtvblByb2dyZXNzQ29tcGxldGV9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImhvbGQtdG8tcmV2ZWFsLWJ1dHRvbl9fY2lyY2xlLWZvcmVncm91bmRcIlxuICAgICAgICAgICAgICBjeD17cmFkaXVzfVxuICAgICAgICAgICAgICBjeT17cmFkaXVzfVxuICAgICAgICAgICAgICByPXtyYWRpdXNXaXRoU3Ryb2tlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC9Cb3g+XG4gICAgICAgIDxCb3hcbiAgICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgICAgYWxpZ25JdGVtcz17QWxpZ25JdGVtcy5jZW50ZXJ9XG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ9e0p1c3RpZnlDb250ZW50LmNlbnRlcn1cbiAgICAgICAgICBjbGFzc05hbWU9XCJob2xkLXRvLXJldmVhbC1idXR0b25fX2xvY2staWNvbi1jb250YWluZXJcIlxuICAgICAgICA+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgc3JjPVwiaW1hZ2VzL2xvY2staWNvbi5zdmdcIlxuICAgICAgICAgICAgYWx0PXt0KCdwYWRsb2NrJyl9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJob2xkLXRvLXJldmVhbC1idXR0b25fX2xvY2staWNvblwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Cb3g+XG4gICAgICA8L0JveD5cbiAgICApO1xuICB9LCBbaXNVbmxvY2tpbmcsIGhhc1RyaWdnZXJlZFVubG9jaywgdF0pO1xuXG4gIGNvbnN0IHJlbmRlclBvc3RDb21wbGV0ZUNvbnRlbnQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcmV0dXJuIGlzVW5sb2NraW5nID8gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ2hvbGQtdG8tcmV2ZWFsLWJ1dHRvbl9fYWJzb2x1dGUtZmlsbCcsIHtcbiAgICAgICAgICAnaG9sZC10by1yZXZlYWwtYnV0dG9uX191bmxvY2staWNvbi1oaWRlJzogaGFzVHJpZ2dlcmVkVW5sb2NrLFxuICAgICAgICB9KX1cbiAgICAgICAgb25BbmltYXRpb25FbmQ9e3Jlc2V0QW5pbWF0aW9uU3RhdGVzfVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgb25BbmltYXRpb25FbmQ9e3ByZXZlbnRQcm9wb2dhdGlvbn1cbiAgICAgICAgICBjbGFzc05hbWU9XCJob2xkLXRvLXJldmVhbC1idXR0b25fX2Fic29sdXRlLWZpbGwgaG9sZC10by1yZXZlYWwtYnV0dG9uX19jaXJjbGUtc3RhdGljLW91dGVyLWNvbnRhaW5lclwiXG4gICAgICAgID5cbiAgICAgICAgICA8c3ZnIGNsYXNzTmFtZT1cImhvbGQtdG8tcmV2ZWFsLWJ1dHRvbl9fY2lyY2xlLXN2Z1wiPlxuICAgICAgICAgICAgPGNpcmNsZVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJob2xkLXRvLXJldmVhbC1idXR0b25fX2NpcmNsZS1zdGF0aWMtb3V0ZXJcIlxuICAgICAgICAgICAgICBjeD17MTR9XG4gICAgICAgICAgICAgIGN5PXsxNH1cbiAgICAgICAgICAgICAgcj17MTR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvc3ZnPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIG9uQW5pbWF0aW9uRW5kPXtwcmV2ZW50UHJvcG9nYXRpb259XG4gICAgICAgICAgY2xhc3NOYW1lPVwiaG9sZC10by1yZXZlYWwtYnV0dG9uX19hYnNvbHV0ZS1maWxsIGhvbGQtdG8tcmV2ZWFsLWJ1dHRvbl9fY2lyY2xlLXN0YXRpYy1pbm5lci1jb250YWluZXJcIlxuICAgICAgICA+XG4gICAgICAgICAgPHN2ZyBjbGFzc05hbWU9XCJob2xkLXRvLXJldmVhbC1idXR0b25fX2NpcmNsZS1zdmdcIj5cbiAgICAgICAgICAgIDxjaXJjbGVcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaG9sZC10by1yZXZlYWwtYnV0dG9uX19jaXJjbGUtc3RhdGljLWlubmVyXCJcbiAgICAgICAgICAgICAgY3g9ezE0fVxuICAgICAgICAgICAgICBjeT17MTR9XG4gICAgICAgICAgICAgIHI9ezEyfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBhcmlhLWxhYmVsPXt0KCdob2xkVG9SZXZlYWxVbmxvY2tlZExhYmVsJyl9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiaG9sZC10by1yZXZlYWwtYnV0dG9uX191bmxvY2staWNvbi1jb250YWluZXJcIlxuICAgICAgICAgIG9uQW5pbWF0aW9uRW5kPXt0cmlnZ2VyT25Mb25nUHJlc3NlZH1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIHNyYz1cImltYWdlcy91bmxvY2staWNvbi5zdmdcIlxuICAgICAgICAgICAgYWx0PXt0KCdwYWRsb2NrJyl9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJob2xkLXRvLXJldmVhbC1idXR0b25fX3VubG9jay1pY29uXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICkgOiBudWxsO1xuICB9LCBbaXNVbmxvY2tpbmcsIGhhc1RyaWdnZXJlZFVubG9jaywgdHJpZ2dlck9uTG9uZ1ByZXNzZWQsIHRdKTtcblxuICByZXR1cm4gKFxuICAgIDxCdXR0b25cbiAgICAgIG9uTW91c2VEb3duPXtvbk1vdXNlRG93bn1cbiAgICAgIG9uTW91c2VVcD17b25Nb3VzZVVwfVxuICAgICAgY2xhc3NOYW1lPVwiaG9sZC10by1yZXZlYWwtYnV0dG9uX19idXR0b24taG9sZFwiXG4gICAgICB0ZXh0UHJvcHM9e3sgZGlzcGxheTogRElTUExBWS5GTEVYLCBhbGlnbkl0ZW1zOiBBbGlnbkl0ZW1zLmNlbnRlciB9fVxuICAgID5cbiAgICAgIDxCb3ggY2xhc3NOYW1lPVwiaG9sZC10by1yZXZlYWwtYnV0dG9uX19pY29uLWNvbnRhaW5lclwiIG1hcmdpblJpZ2h0PXsyfT5cbiAgICAgICAge3JlbmRlclByZUNvbXBsZXRlQ29udGVudCgpfVxuICAgICAgICB7cmVuZGVyUG9zdENvbXBsZXRlQ29udGVudCgpfVxuICAgICAgPC9Cb3g+XG4gICAgICB7YnV0dG9uVGV4dH1cbiAgICA8L0J1dHRvbj5cbiAgKTtcbn1cblxuSG9sZFRvUmV2ZWFsQnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRleHQgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSBidXR0b25cbiAgICovXG4gIGJ1dHRvblRleHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhZnRlciB0aGUgYW5pbWF0aW9uIGlzIGZpbmlzaGVkXG4gICAqL1xuICBvbkxvbmdQcmVzc2VkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2hvbGQtdG8tcmV2ZWFsLWJ1dHRvbic7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uL3VpL2J1dHRvbic7XG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi4vLi4vdWkvY2hlY2stYm94JztcbmltcG9ydCBUb29sdGlwIGZyb20gJy4uLy4uL3VpL3Rvb2x0aXAnO1xuaW1wb3J0IHsgSWNvbiwgSWNvbk5hbWUgfSBmcm9tICcuLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5pbXBvcnQgeyBJY29uQ29sb3IgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcblxuY29uc3QgSG9tZU5vdGlmaWNhdGlvbiA9ICh7XG4gIGFjY2VwdFRleHQsXG4gIGNoZWNrYm94VGV4dCxcbiAgY2hlY2tib3hUb29sdGlwVGV4dCxcbiAgY2xhc3NOYW1lcyA9IFtdLFxuICBkZXNjcmlwdGlvblRleHQsXG4gIGlnbm9yZVRleHQsXG4gIGluZm9UZXh0LFxuICBvbkFjY2VwdCxcbiAgb25JZ25vcmUsXG59KSA9PiB7XG4gIGNvbnN0IFtjaGVja2JveFN0YXRlLCBzZXRDaGVja0JveFN0YXRlXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBjaGVja2JveEVsZW1lbnQgPSBjaGVja2JveFRleHQgJiYgKFxuICAgIDxDaGVja2JveFxuICAgICAgaWQ9XCJob21lTm90aWZpY2F0aW9uX2NoZWNrYm94XCJcbiAgICAgIGNoZWNrZWQ9e2NoZWNrYm94U3RhdGV9XG4gICAgICBjbGFzc05hbWU9XCJob21lLW5vdGlmaWNhdGlvbl9fY2hlY2tib3hcIlxuICAgICAgb25DbGljaz17KCkgPT4gc2V0Q2hlY2tCb3hTdGF0ZSgoY2hlY2tlZCkgPT4gIWNoZWNrZWQpfVxuICAgIC8+XG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NuYW1lcygnaG9tZS1ub3RpZmljYXRpb24nLCAuLi5jbGFzc05hbWVzKX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvbWUtbm90aWZpY2F0aW9uX19jb250ZW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9tZS1ub3RpZmljYXRpb25fX2NvbnRlbnQtY29udGFpbmVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob21lLW5vdGlmaWNhdGlvbl9fdGV4dFwiPntkZXNjcmlwdGlvblRleHR9PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7aW5mb1RleHQgPyAoXG4gICAgICAgICAgPFRvb2x0aXBcbiAgICAgICAgICAgIHBvc2l0aW9uPVwidG9wXCJcbiAgICAgICAgICAgIHRpdGxlPXtpbmZvVGV4dH1cbiAgICAgICAgICAgIHdyYXBwZXJDbGFzc05hbWU9XCJob21lLW5vdGlmaWNhdGlvbl9fdG9vbHRpcC13cmFwcGVyXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8SWNvbiBuYW1lPXtJY29uTmFtZS5JbmZvfSBjb2xvcj17SWNvbkNvbG9yLmljb25EZWZhdWx0fSAvPlxuICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9tZS1ub3RpZmljYXRpb25fX2J1dHRvbnNcIj5cbiAgICAgICAge29uQWNjZXB0ICYmIGFjY2VwdFRleHQgPyAoXG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiaG9tZS1ub3RpZmljYXRpb25fX2FjY2VwdC1idXR0b25cIlxuICAgICAgICAgICAgb25DbGljaz17b25BY2NlcHR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2FjY2VwdFRleHR9XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgICB7b25JZ25vcmUgJiYgaWdub3JlVGV4dCA/IChcbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImhvbWUtbm90aWZpY2F0aW9uX19pZ25vcmUtYnV0dG9uXCJcbiAgICAgICAgICAgIC8vIFNvbWUgb25JZ25vcmUgaGFuZGxlcnMgdXNlIHRoZSBjaGVja2JveFN0YXRlIHRvIGRldGVybWluZSB3aGV0aGVyXG4gICAgICAgICAgICAvLyB0byBkaXNhYmxlIHRoZSBub3RpZmljYXRpb25cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uSWdub3JlKGNoZWNrYm94U3RhdGUpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtpZ25vcmVUZXh0fVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgICAge2NoZWNrYm94VGV4dCA/IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvbWUtbm90aWZpY2F0aW9uX19jaGVja2JveC13cmFwcGVyXCI+XG4gICAgICAgICAgICB7Y2hlY2tib3hUb29sdGlwVGV4dCA/IChcbiAgICAgICAgICAgICAgPFRvb2x0aXBcbiAgICAgICAgICAgICAgICBwb3NpdGlvbj1cInRvcFwiXG4gICAgICAgICAgICAgICAgdGl0bGU9e2NoZWNrYm94VG9vbHRpcFRleHR9XG4gICAgICAgICAgICAgICAgd3JhcHBlckNsYXNzTmFtZT1cImhvbWUtbm90aWZpY2F0aW9uX19jaGVja2JveC1sYWJlbC10b29sdGlwXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtjaGVja2JveEVsZW1lbnR9XG4gICAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIGNoZWNrYm94RWxlbWVudFxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJob21lLW5vdGlmaWNhdGlvbl9fY2hlY2tib3gtbGFiZWxcIlxuICAgICAgICAgICAgICBodG1sRm9yPVwiaG9tZU5vdGlmaWNhdGlvbl9jaGVja2JveFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjaGVja2JveFRleHR9XG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuSG9tZU5vdGlmaWNhdGlvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgdGV4dCBmb3IgdGhlIFwiQWNjZXB0XCIgYnV0dG9uLiBUaGlzIG11c3QgYmUgYWNjb21wYW5pZWQgYnkgdGhlIGBvbkFjY2VwdGAgcHJvcC5cbiAgICpcbiAgICogVGhlIFwiQWNjZXB0XCIgYnV0dG9uIGlzIG9ubHkgcmVuZGVyZWQgaWYgdGhpcyBwcm9wIGlzIHNldC5cbiAgICovXG4gIGFjY2VwdFRleHQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHRleHQgdG8gZGlzcGxheSBhbG9uZ3NpZGUgdGhlIGNoZWNrYm94LlxuICAgKlxuICAgKiBUaGUgY2hlY2tib3ggc3RhdGUgaXMgcGFzc2VkIHRvIHRoZSBgb25JZ25vcmVgIGhhbmRsZXIsIHNvIHRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCBpZiB0aGUgYG9uSWdub3JlYCBwcm9wIGlzIHNldC5cbiAgICpcbiAgICogVGhlIGNoZWNrYm94IGlzIG9ubHkgcmVuZGVyZWQgaWYgdGhpcyBwcm9wIGlzIHNldC5cbiAgICovXG4gIGNoZWNrYm94VGV4dDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgdGV4dCB0byBkaXNwbGF5IGluIHRoZSBjaGVja2JveCB0b29sdGlwLlxuICAgKlxuICAgKiBUaGUgdG9vbHRpcCBpcyBvbmx5IHJlbmRlcmVkIGlmIHRoaXMgcHJvcCBpcyBzZXQuXG4gICAqL1xuICBjaGVja2JveFRvb2x0aXBUZXh0OiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEN1c3RvbSBjbGFzcyBuYW1lcy5cbiAgICovXG4gIGNsYXNzTmFtZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgLyoqXG4gICAqIFRoZSBub3RpZmljYXRpb24gZGVzY3JpcHRpb24uXG4gICAqL1xuICBkZXNjcmlwdGlvblRleHQ6IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBUaGUgdGV4dCBmb3IgdGhlIFwiSWdub3JlXCIgYnV0dG9uLiBUaGlzIG11c3QgYmUgYWNjb21wYW5pZWQgYnkgdGhlIGBvbklnbm9yZWAgcHJvcC5cbiAgICpcbiAgICogVGhlIFwiSWdub3JlXCIgYnV0dG9uIGlzIG9ubHkgcmVuZGVyZWQgaWYgdGhpcyBwcm9wIGlzIHNldC5cbiAgICovXG4gIGlnbm9yZVRleHQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHRleHQgZm9yIHRoZSBpbmZvIGljb24gdG9vbHRpcCBpbiB0aGUgdG9wLXJpZ2h0IG9mIHRoZSBub3RpZmljYXRpb24uXG4gICAqXG4gICAqIFRoZSBpbmZvLWljb24gaXMgb25seSByZW5kZXJlZCBpZiB0aGlzIHByb3AgaXMgc2V0LlxuICAgKi9cbiAgaW5mb1RleHQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGhhbmRsZXIgZm9yIHRoZSBcIkFjY2VwdFwiIGJ1dHRvbi4gVGhpcyBtdXN0IGJlIGFjY29tcGFuaWVkIGJ5IHRoZSBgYWNjZXB0VGV4dGAgcHJvcC5cbiAgICovXG4gIG9uQWNjZXB0OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBoYW5kbGVyIGZvciB0aGUgXCJJZ25vcmVcIiBidXR0b24uIFRoaXMgbXVzdCBiZSBhY2NvbXBhbmllZCBieSB0aGUgYGlnbm9yZVRleHRgIHByb3AuXG4gICAqXG4gICAqIElmIGBjaGVja2JveFRleHRgIGlzIHNldCwgdGhlIGNoZWNrYm94IHN0YXRlIHdpbGwgYmUgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24gYXMgYSBib29sZWFuLlxuICAgKi9cbiAgb25JZ25vcmU6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgSG9tZU5vdGlmaWNhdGlvbjtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2hvbWUtbm90aWZpY2F0aW9uLmNvbXBvbmVudCc7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQgeyBJTVBPUlRfVE9LRU5fUk9VVEUgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9yb3V0ZXMnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi8uLi91aS9idXR0b24nO1xuaW1wb3J0IEJveCBmcm9tICcuLi8uLi91aS9ib3gvYm94JztcbmltcG9ydCB7IFRFWFRfQUxJR04gfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IGRldGVjdE5ld1Rva2VucyB9IGZyb20gJy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IHsgTWV0YU1ldHJpY3NDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dHMvbWV0YW1ldHJpY3MnO1xuaW1wb3J0IHtcbiAgTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5LFxuICBNZXRhTWV0cmljc0V2ZW50TmFtZSxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9tZXRhbWV0cmljcyc7XG5pbXBvcnQge1xuICBnZXRJc1Rva2VuRGV0ZWN0aW9uU3VwcG9ydGVkLFxuICBnZXRJc1Rva2VuRGV0ZWN0aW9uSW5hY3RpdmVPbk1haW5uZXQsXG59IGZyb20gJy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEltcG9ydFRva2VuTGluaygpIHtcbiAgY29uc3QgdHJhY2tFdmVudCA9IHVzZUNvbnRleHQoTWV0YU1ldHJpY3NDb250ZXh0KTtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG5cbiAgY29uc3QgaXNUb2tlbkRldGVjdGlvblN1cHBvcnRlZCA9IHVzZVNlbGVjdG9yKGdldElzVG9rZW5EZXRlY3Rpb25TdXBwb3J0ZWQpO1xuICBjb25zdCBpc1Rva2VuRGV0ZWN0aW9uSW5hY3RpdmVPbk1haW5uZXQgPSB1c2VTZWxlY3RvcihcbiAgICBnZXRJc1Rva2VuRGV0ZWN0aW9uSW5hY3RpdmVPbk1haW5uZXQsXG4gICk7XG5cbiAgY29uc3QgaXNUb2tlbkRldGVjdGlvbkF2YWlsYWJsZSA9XG4gICAgaXNUb2tlbkRldGVjdGlvblN1cHBvcnRlZCB8fFxuICAgIGlzVG9rZW5EZXRlY3Rpb25JbmFjdGl2ZU9uTWFpbm5ldCB8fFxuICAgIEJvb2xlYW4ocHJvY2Vzcy5lbnYuSU5fVEVTVCk7XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94IGNsYXNzTmFtZT1cImltcG9ydC10b2tlbi1saW5rXCIgdGV4dEFsaWduPXtURVhUX0FMSUdOLkNFTlRFUn0+XG4gICAgICB7aXNUb2tlbkRldGVjdGlvbkF2YWlsYWJsZSAmJiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW1wb3J0LXRva2VuLWxpbmtfX2xpbmtcIlxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJyZWZyZXNoLWxpc3QtYnV0dG9uXCJcbiAgICAgICAgICAgIHR5cGU9XCJsaW5rXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRldGVjdE5ld1Rva2VucygpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCdyZWZyZXNoTGlzdCcpfVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIHt0KCdvcicpfVxuICAgICAgICA8Lz5cbiAgICAgICl9XG4gICAgICA8QnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT1cImltcG9ydC10b2tlbi1saW5rX19saW5rXCJcbiAgICAgICAgZGF0YS10ZXN0aWQ9XCJpbXBvcnQtdG9rZW4tYnV0dG9uXCJcbiAgICAgICAgdHlwZT1cImxpbmtcIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgaGlzdG9yeS5wdXNoKElNUE9SVF9UT0tFTl9ST1VURSk7XG4gICAgICAgICAgdHJhY2tFdmVudCh7XG4gICAgICAgICAgICBldmVudDogTWV0YU1ldHJpY3NFdmVudE5hbWUuVG9rZW5JbXBvcnRCdXR0b25DbGlja2VkLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeS5OYXZpZ2F0aW9uLFxuICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICBsb2NhdGlvbjogJ0hvbWUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge2lzVG9rZW5EZXRlY3Rpb25BdmFpbGFibGVcbiAgICAgICAgICA/IHQoJ2ltcG9ydFRva2VucycpXG4gICAgICAgICAgOiB0KCdpbXBvcnRUb2tlbnMnKS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArXG4gICAgICAgICAgICB0KCdpbXBvcnRUb2tlbnMnKS5zbGljZSgxKX1cbiAgICAgIDwvQnV0dG9uPlxuICAgIDwvQm94PlxuICApO1xufVxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vaW1wb3J0LXRva2VuLWxpbmsuY29tcG9uZW50JztcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2xlZGdlci1pbnN0cnVjdGlvbi1maWVsZCc7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7XG4gIExlZGdlclRyYW5zcG9ydFR5cGVzLFxuICBXZWJISURDb25uZWN0ZWRTdGF0dXNlcyxcbiAgSGFyZHdhcmVUcmFuc3BvcnRTdGF0ZXMsXG4gIExFREdFUl9VU0JfVkVORE9SX0lELFxufSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2hhcmR3YXJlLXdhbGxldHMnO1xuaW1wb3J0IHtcbiAgUExBVEZPUk1fRklSRUZPWCxcbiAgRU5WSVJPTk1FTlRfVFlQRV9GVUxMU0NSRUVOLFxufSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2FwcCc7XG5cbmltcG9ydCB7XG4gIHNldExlZGdlcldlYkhpZENvbm5lY3RlZFN0YXR1cyxcbiAgZ2V0TGVkZ2VyV2ViSGlkQ29ubmVjdGVkU3RhdHVzLFxuICBzZXRMZWRnZXJUcmFuc3BvcnRTdGF0dXMsXG4gIGdldExlZGdlclRyYW5zcG9ydFN0YXR1cyxcbn0gZnJvbSAnLi4vLi4vLi4vZHVja3MvYXBwL2FwcCc7XG5cbmltcG9ydCB7IEJhbm5lckFsZXJ0LCBCdXR0b25MaW5rLCBUZXh0IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50LWxpYnJhcnknO1xuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQge1xuICBTRVZFUklUSUVTLFxuICBURVhUX0FMSUdOLFxuICBUZXh0Q29sb3IsXG59IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHtcbiAgZ2V0UGxhdGZvcm0sXG4gIGdldEVudmlyb25tZW50VHlwZSxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vYXBwL3NjcmlwdHMvbGliL3V0aWwnO1xuaW1wb3J0IHsgZ2V0TGVkZ2VyVHJhbnNwb3J0VHlwZSB9IGZyb20gJy4uLy4uLy4uL2R1Y2tzL21ldGFtYXNrL21ldGFtYXNrJztcbmltcG9ydCB7IGF0dGVtcHRMZWRnZXJUcmFuc3BvcnRDcmVhdGlvbiB9IGZyb20gJy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuXG5jb25zdCByZW5kZXJJbnN0cnVjdGlvblN0ZXAgPSAoXG4gIHRleHQsXG4gIHNob3cgPSB0cnVlLFxuICBjb2xvciA9IFRleHRDb2xvci50ZXh0RGVmYXVsdCxcbikgPT4ge1xuICByZXR1cm4gKFxuICAgIHNob3cgJiYgKFxuICAgICAgPFRleHQgY29sb3I9e2NvbG9yfSBhcz1cImg2XCI+XG4gICAgICAgIHt0ZXh0fVxuICAgICAgPC9UZXh0PlxuICAgIClcbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExlZGdlckluc3RydWN0aW9uRmllbGQoeyBzaG93RGF0YUluc3RydWN0aW9uIH0pIHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcblxuICBjb25zdCB3ZWJIaWRDb25uZWN0ZWRTdGF0dXMgPSB1c2VTZWxlY3RvcihnZXRMZWRnZXJXZWJIaWRDb25uZWN0ZWRTdGF0dXMpO1xuICBjb25zdCBsZWRnZXJUcmFuc3BvcnRUeXBlID0gdXNlU2VsZWN0b3IoZ2V0TGVkZ2VyVHJhbnNwb3J0VHlwZSk7XG4gIGNvbnN0IHRyYW5zcG9ydFN0YXR1cyA9IHVzZVNlbGVjdG9yKGdldExlZGdlclRyYW5zcG9ydFN0YXR1cyk7XG4gIGNvbnN0IGVudmlyb25tZW50VHlwZSA9IGdldEVudmlyb25tZW50VHlwZSgpO1xuICBjb25zdCBlbnZpcm9ubWVudFR5cGVJc0Z1bGxTY3JlZW4gPVxuICAgIGVudmlyb25tZW50VHlwZSA9PT0gRU5WSVJPTk1FTlRfVFlQRV9GVUxMU0NSRUVOO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaW5pdGlhbENvbm5lY3RlZERldmljZUNoZWNrID0gYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBsZWRnZXJUcmFuc3BvcnRUeXBlID09PSBMZWRnZXJUcmFuc3BvcnRUeXBlcy53ZWJoaWQgJiZcbiAgICAgICAgd2ViSGlkQ29ubmVjdGVkU3RhdHVzICE9PSBXZWJISURDb25uZWN0ZWRTdGF0dXNlcy5jb25uZWN0ZWRcbiAgICAgICkge1xuICAgICAgICBjb25zdCBkZXZpY2VzID0gYXdhaXQgd2luZG93Lm5hdmlnYXRvcj8uaGlkPy5nZXREZXZpY2VzKCk7XG4gICAgICAgIGNvbnN0IHdlYkhpZElzQ29ubmVjdGVkID0gZGV2aWNlcz8uc29tZShcbiAgICAgICAgICAoZGV2aWNlKSA9PiBkZXZpY2UudmVuZG9ySWQgPT09IE51bWJlcihMRURHRVJfVVNCX1ZFTkRPUl9JRCksXG4gICAgICAgICk7XG4gICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgIHNldExlZGdlcldlYkhpZENvbm5lY3RlZFN0YXR1cyhcbiAgICAgICAgICAgIHdlYkhpZElzQ29ubmVjdGVkXG4gICAgICAgICAgICAgID8gV2ViSElEQ29ubmVjdGVkU3RhdHVzZXMuY29ubmVjdGVkXG4gICAgICAgICAgICAgIDogV2ViSElEQ29ubmVjdGVkU3RhdHVzZXMubm90Q29ubmVjdGVkLFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBkZXRlcm1pbmVUcmFuc3BvcnRTdGF0dXMgPSBhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIGxlZGdlclRyYW5zcG9ydFR5cGUgPT09IExlZGdlclRyYW5zcG9ydFR5cGVzLndlYmhpZCAmJlxuICAgICAgICB3ZWJIaWRDb25uZWN0ZWRTdGF0dXMgPT09IFdlYkhJRENvbm5lY3RlZFN0YXR1c2VzLmNvbm5lY3RlZCAmJlxuICAgICAgICB0cmFuc3BvcnRTdGF0dXMgPT09IEhhcmR3YXJlVHJhbnNwb3J0U3RhdGVzLm5vbmVcbiAgICAgICkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHRyYW5zcG9ydGVkQ3JlYXRlZCA9IGF3YWl0IGF0dGVtcHRMZWRnZXJUcmFuc3BvcnRDcmVhdGlvbigpO1xuICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgc2V0TGVkZ2VyVHJhbnNwb3J0U3RhdHVzKFxuICAgICAgICAgICAgICB0cmFuc3BvcnRlZENyZWF0ZWRcbiAgICAgICAgICAgICAgICA/IEhhcmR3YXJlVHJhbnNwb3J0U3RhdGVzLnZlcmlmaWVkXG4gICAgICAgICAgICAgICAgOiBIYXJkd2FyZVRyYW5zcG9ydFN0YXRlcy51bmtub3duRmFpbHVyZSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmIChlLm1lc3NhZ2UubWF0Y2goJ0ZhaWxlZCB0byBvcGVuIHRoZSBkZXZpY2UnKSkge1xuICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgIHNldExlZGdlclRyYW5zcG9ydFN0YXR1cyhcbiAgICAgICAgICAgICAgICBIYXJkd2FyZVRyYW5zcG9ydFN0YXRlcy5kZXZpY2VPcGVuRmFpbHVyZSxcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIGlmIChlLm1lc3NhZ2UubWF0Y2goJ3RoZSBkZXZpY2UgaXMgYWxyZWFkeSBvcGVuJykpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgICBzZXRMZWRnZXJUcmFuc3BvcnRTdGF0dXMoSGFyZHdhcmVUcmFuc3BvcnRTdGF0ZXMudmVyaWZpZWQpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlzcGF0Y2goXG4gICAgICAgICAgICAgIHNldExlZGdlclRyYW5zcG9ydFN0YXR1cyhIYXJkd2FyZVRyYW5zcG9ydFN0YXRlcy51bmtub3duRmFpbHVyZSksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgZGV0ZXJtaW5lVHJhbnNwb3J0U3RhdHVzKCk7XG4gICAgaW5pdGlhbENvbm5lY3RlZERldmljZUNoZWNrKCk7XG4gIH0sIFtkaXNwYXRjaCwgbGVkZ2VyVHJhbnNwb3J0VHlwZSwgd2ViSGlkQ29ubmVjdGVkU3RhdHVzLCB0cmFuc3BvcnRTdGF0dXNdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkaXNwYXRjaChzZXRMZWRnZXJUcmFuc3BvcnRTdGF0dXMoSGFyZHdhcmVUcmFuc3BvcnRTdGF0ZXMubm9uZSkpO1xuICAgIH07XG4gIH0sIFtkaXNwYXRjaF0pO1xuXG4gIGNvbnN0IHVzaW5nTGVkZ2VyTGl2ZSA9IGxlZGdlclRyYW5zcG9ydFR5cGUgPT09IExlZGdlclRyYW5zcG9ydFR5cGVzLmxpdmU7XG4gIGNvbnN0IHVzaW5nV2ViSElEID0gbGVkZ2VyVHJhbnNwb3J0VHlwZSA9PT0gTGVkZ2VyVHJhbnNwb3J0VHlwZXMud2ViaGlkO1xuXG4gIGNvbnN0IGlzRmlyZWZveCA9IGdldFBsYXRmb3JtKCkgPT09IFBMQVRGT1JNX0ZJUkVGT1g7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLWRldGFpbC1yb3dcIj5cbiAgICAgICAgPEJhbm5lckFsZXJ0IHNldmVyaXR5PXtTRVZFUklUSUVTLklORk99PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGVkZ2VyLWxpdmUtZGlhbG9nXCI+XG4gICAgICAgICAgICB7cmVuZGVySW5zdHJ1Y3Rpb25TdGVwKHQoJ2xlZGdlckNvbm5lY3Rpb25JbnN0cnVjdGlvbkhlYWRlcicpKX1cbiAgICAgICAgICAgIHtyZW5kZXJJbnN0cnVjdGlvblN0ZXAoXG4gICAgICAgICAgICAgIGDigKIgJHt0KCdsZWRnZXJDb25uZWN0aW9uSW5zdHJ1Y3Rpb25TdGVwT25lJyl9YCxcbiAgICAgICAgICAgICAgIWlzRmlyZWZveCAmJiB1c2luZ0xlZGdlckxpdmUsXG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge3JlbmRlckluc3RydWN0aW9uU3RlcChcbiAgICAgICAgICAgICAgYOKAoiAke3QoJ2xlZGdlckNvbm5lY3Rpb25JbnN0cnVjdGlvblN0ZXBUd28nKX1gLFxuICAgICAgICAgICAgICAhaXNGaXJlZm94ICYmIHVzaW5nTGVkZ2VyTGl2ZSxcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7cmVuZGVySW5zdHJ1Y3Rpb25TdGVwKFxuICAgICAgICAgICAgICBg4oCiICR7dCgnbGVkZ2VyQ29ubmVjdGlvbkluc3RydWN0aW9uU3RlcFRocmVlJyl9YCxcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7cmVuZGVySW5zdHJ1Y3Rpb25TdGVwKFxuICAgICAgICAgICAgICBg4oCiICR7dCgnbGVkZ2VyQ29ubmVjdGlvbkluc3RydWN0aW9uU3RlcEZvdXInKX1gLFxuICAgICAgICAgICAgICBzaG93RGF0YUluc3RydWN0aW9uLFxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtyZW5kZXJJbnN0cnVjdGlvblN0ZXAoXG4gICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgIDxCdXR0b25MaW5rXG4gICAgICAgICAgICAgICAgICB0ZXh0QWxpZ249e1RFWFRfQUxJR04uTEVGVH1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2FzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVudmlyb25tZW50VHlwZUlzRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwucGxhdGZvcm0ub3BlbkV4dGVuc2lvbkluQnJvd3NlcihudWxsLCBudWxsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7dCgnbGVkZ2VyQ29ubmVjdGlvbkluc3RydWN0aW9uQ2xvc2VPdGhlckFwcHMnKX1cbiAgICAgICAgICAgICAgICA8L0J1dHRvbkxpbms+XG4gICAgICAgICAgICAgIDwvc3Bhbj4sXG4gICAgICAgICAgICAgIHRyYW5zcG9ydFN0YXR1cyA9PT0gSGFyZHdhcmVUcmFuc3BvcnRTdGF0ZXMuZGV2aWNlT3BlbkZhaWx1cmUsXG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge3JlbmRlckluc3RydWN0aW9uU3RlcChcbiAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbkxpbmtcbiAgICAgICAgICAgICAgICAgIHRleHRBbGlnbj17VEVYVF9BTElHTi5MRUZUfVxuICAgICAgICAgICAgICAgICAgb25DbGljaz17YXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW52aXJvbm1lbnRUeXBlSXNGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29ubmVjdGVkRGV2aWNlcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB3aW5kb3cubmF2aWdhdG9yLmhpZC5yZXF1ZXN0RGV2aWNlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyczogW3sgdmVuZG9ySWQ6IExFREdFUl9VU0JfVkVORE9SX0lEIH1dLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2ViSGlkSXNDb25uZWN0ZWQgPSBjb25uZWN0ZWREZXZpY2VzLnNvbWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAoZGV2aWNlKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2UudmVuZG9ySWQgPT09IE51bWJlcihMRURHRVJfVVNCX1ZFTkRPUl9JRCksXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExlZGdlcldlYkhpZENvbm5lY3RlZFN0YXR1cyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdlYkhpZENvbm5lY3RlZFN0YXR1czogd2ViSGlkSXNDb25uZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFdlYkhJRENvbm5lY3RlZFN0YXR1c2VzLmNvbm5lY3RlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogV2ViSElEQ29ubmVjdGVkU3RhdHVzZXMubm90Q29ubmVjdGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwucGxhdGZvcm0ub3BlbkV4dGVuc2lvbkluQnJvd3NlcihudWxsLCBudWxsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7ZW52aXJvbm1lbnRUeXBlSXNGdWxsU2NyZWVuXG4gICAgICAgICAgICAgICAgICAgID8gdCgnY2xpY2tUb0Nvbm5lY3RMZWRnZXJWaWFXZWJISUQnKVxuICAgICAgICAgICAgICAgICAgICA6IHQoJ29wZW5GdWxsU2NyZWVuRm9yTGVkZ2VyV2ViSGlkJyl9XG4gICAgICAgICAgICAgICAgPC9CdXR0b25MaW5rPlxuICAgICAgICAgICAgICA8L3NwYW4+LFxuICAgICAgICAgICAgICB1c2luZ1dlYkhJRCAmJlxuICAgICAgICAgICAgICAgIHdlYkhpZENvbm5lY3RlZFN0YXR1cyA9PT0gV2ViSElEQ29ubmVjdGVkU3RhdHVzZXMubm90Q29ubmVjdGVkLFxuICAgICAgICAgICAgICBUZXh0Q29sb3IuV0FSTklOR19ERUZBVUxULFxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9CYW5uZXJBbGVydD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5MZWRnZXJJbnN0cnVjdGlvbkZpZWxkLnByb3BUeXBlcyA9IHtcbiAgLy8gd2hldGhlciBvciBub3QgdG8gc2hvdyB0aGUgZGF0YSBpbnN0cnVjdGlvblxuICBzaG93RGF0YUluc3RydWN0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbn07XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9sb2FkaW5nLW5ldHdvcmstc2NyZWVuLmNvbnRhaW5lcic7XG4iLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgTG9hZGluZ1NjcmVlbiBmcm9tICcuLi8uLi91aS9sb2FkaW5nLXNjcmVlbic7XG5pbXBvcnQgeyBTRUNPTkQgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL3RpbWUnO1xuaW1wb3J0IHsgTkVUV09SS19UWVBFUyB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbmV0d29yayc7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICcuLi8uLi91aS9wb3BvdmVyL3BvcG92ZXIuY29tcG9uZW50JztcbmltcG9ydCB7XG4gIEJ1dHRvblByaW1hcnksXG4gIEJ1dHRvblNlY29uZGFyeSxcbiAgSWNvbixcbiAgSWNvbk5hbWUsXG4gIEljb25TaXplLFxuICBUZXh0LFxufSBmcm9tICcuLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5pbXBvcnQge1xuICBESVNQTEFZLFxuICBJY29uQ29sb3IsXG4gIFRleHRBbGlnbixcbiAgVGV4dFZhcmlhbnQsXG59IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IEJveCBmcm9tICcuLi8uLi91aS9ib3gvYm94JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9hZGluZ05ldHdvcmtTY3JlZW4gZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGUgPSB7XG4gICAgc2hvd0Vycm9yU2NyZWVuOiBmYWxzZSxcbiAgfTtcblxuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZ01lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2FuY2VsVGltZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICBwcm92aWRlckNvbmZpZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwcm92aWRlcklkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gICAgc2hvd05ldHdvcmtEcm9wZG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2V0UHJvdmlkZXJBcmdzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgc2V0UHJvdmlkZXJUeXBlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByb2xsYmFja1RvUHJldmlvdXNQcm92aWRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaXNOZXR3b3JrTG9hZGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgc2hvd0RlcHJlY2F0ZWRScGNVcmxXYXJuaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCA9ICgpID0+IHtcbiAgICB0aGlzLmNhbmNlbENhbGxUaW1lb3V0ID0gc2V0VGltZW91dChcbiAgICAgIHRoaXMuY2FuY2VsQ2FsbCxcbiAgICAgIHRoaXMucHJvcHMuY2FuY2VsVGltZSB8fCBTRUNPTkQgKiAxNSxcbiAgICApO1xuICB9O1xuXG4gIGdldENvbm5lY3RpbmdMYWJlbCA9IGZ1bmN0aW9uIChsb2FkaW5nTWVzc2FnZSkge1xuICAgIGlmIChsb2FkaW5nTWVzc2FnZSkge1xuICAgICAgcmV0dXJuIGxvYWRpbmdNZXNzYWdlO1xuICAgIH1cbiAgICBjb25zdCB7IHByb3ZpZGVyQ29uZmlnLCBwcm92aWRlcklkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHByb3ZpZGVyTmFtZSA9IHByb3ZpZGVyQ29uZmlnLnR5cGU7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICBzd2l0Y2ggKHByb3ZpZGVyTmFtZSkge1xuICAgICAgY2FzZSBORVRXT1JLX1RZUEVTLk1BSU5ORVQ6XG4gICAgICAgIHJldHVybiB0KCdjb25uZWN0aW5nVG9NYWlubmV0Jyk7XG4gICAgICBjYXNlIE5FVFdPUktfVFlQRVMuR09FUkxJOlxuICAgICAgICByZXR1cm4gdCgnY29ubmVjdGluZ1RvR29lcmxpJyk7XG4gICAgICBjYXNlIE5FVFdPUktfVFlQRVMuU0VQT0xJQTpcbiAgICAgICAgcmV0dXJuIHQoJ2Nvbm5lY3RpbmdUb1NlcG9saWEnKTtcbiAgICAgIGNhc2UgTkVUV09SS19UWVBFUy5MSU5FQV9URVNUTkVUOlxuICAgICAgICByZXR1cm4gdCgnY29ubmVjdGluZ1RvTGluZWFUZXN0bmV0Jyk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdCgnY29ubmVjdGluZ1RvJywgW3Byb3ZpZGVySWRdKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyQ29ubmVjdGlvbkZhaWx1cmVOb3RpZmljYXRpb24gPSAobWVzc2FnZSwgc2hvd1RyeUFnYWluID0gZmFsc2UpID0+IHtcbiAgICBjb25zdCB7IHNob3dOZXR3b3JrRHJvcGRvd24sIHNldFByb3ZpZGVyQXJncywgc2V0UHJvdmlkZXJUeXBlIH0gPVxuICAgICAgdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8UG9wb3ZlclxuICAgICAgICBvbkNsb3NlPXsoKSA9PiB7XG4gICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLmNhbmNlbENhbGxUaW1lb3V0KTtcbiAgICAgICAgfX1cbiAgICAgICAgY2VudGVyVGl0bGVcbiAgICAgICAgdGl0bGU9e1xuICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICBuYW1lPXtJY29uTmFtZS5EYW5nZXJ9XG4gICAgICAgICAgICBzaXplPXtJY29uU2l6ZS5YbH1cbiAgICAgICAgICAgIGNvbG9yPXtJY29uQ29sb3Iud2FybmluZ0RlZmF1bHR9XG4gICAgICAgICAgLz5cbiAgICAgICAgfVxuICAgICAgPlxuICAgICAgICA8VGV4dFxuICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlMZ01lZGl1bX1cbiAgICAgICAgICB0ZXh0QWxpZ249e1RleHRBbGlnbi5DZW50ZXJ9XG4gICAgICAgICAgbWFyZ2luPXtbMCwgNCwgNCwgNF19XG4gICAgICAgID5cbiAgICAgICAgICB7bWVzc2FnZX1cbiAgICAgICAgPC9UZXh0PlxuICAgICAgICA8Qm94IGRpc3BsYXk9e0RJU1BMQVkuRkxFWH0gcGFkZGluZz17NH0gZ2FwPXsyfT5cbiAgICAgICAgICA8QnV0dG9uU2Vjb25kYXJ5XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5jYW5jZWxDYWxsVGltZW91dCk7XG4gICAgICAgICAgICAgIHNob3dOZXR3b3JrRHJvcGRvd24oKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219XG4gICAgICAgICAgICBibG9ja1xuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0aGlzLmNvbnRleHQudCgnc3dpdGNoTmV0d29ya3MnKX1cbiAgICAgICAgICA8L0J1dHRvblNlY29uZGFyeT5cbiAgICAgICAgICB7c2hvd1RyeUFnYWluID8gKFxuICAgICAgICAgICAgPEJ1dHRvblByaW1hcnlcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93RXJyb3JTY3JlZW46IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgIHNldFByb3ZpZGVyVHlwZSguLi5zZXRQcm92aWRlckFyZ3MpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5jYW5jZWxDYWxsVGltZW91dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxDYWxsVGltZW91dCA9IHNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbENhbGwsXG4gICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmNhbmNlbFRpbWUgfHwgU0VDT05EICogMTUsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtfVxuICAgICAgICAgICAgICBibG9ja1xuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dGhpcy5jb250ZXh0LnQoJ3RyeUFnYWluJyl9XG4gICAgICAgICAgICA8L0J1dHRvblByaW1hcnk+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvQm94PlxuICAgICAgPC9Qb3BvdmVyPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRGVwcmVjYXRlZFJwY1VybFdhcm5pbmcgPSAoKSA9PiB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyQ29ubmVjdGlvbkZhaWx1cmVOb3RpZmljYXRpb24oXG4gICAgICB0aGlzLmNvbnRleHQudCgnY3VycmVudFJwY1VybERlcHJlY2F0ZWQnKSxcbiAgICAgIGZhbHNlLFxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRXJyb3JTY3JlZW5Db250ZW50ID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgcHJvdmlkZXJDb25maWcgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyQ29ubmVjdGlvbkZhaWx1cmVOb3RpZmljYXRpb24oXG4gICAgICB0aGlzLmNvbnRleHQudCgnbmV0d29ya1N3aXRjaENvbm5lY3Rpb25FcnJvcicsIFtwcm92aWRlckNvbmZpZy5uaWNrbmFtZV0pLFxuICAgICAgdHJ1ZSxcbiAgICApO1xuICB9O1xuXG4gIGNhbmNlbENhbGwgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBpc05ldHdvcmtMb2FkaW5nIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGlzTmV0d29ya0xvYWRpbmcpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93RXJyb3JTY3JlZW46IHRydWUgfSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbXBvbmVudERpZFVwZGF0ZSA9IChwcmV2UHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHByb3ZpZGVyQ29uZmlnIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgcHJvdmlkZXJDb25maWc6IHByZXZQcm92aWRlciB9ID0gcHJldlByb3BzO1xuICAgIGlmIChwcm92aWRlckNvbmZpZy50eXBlICE9PSBwcmV2UHJvdmlkZXIudHlwZSkge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLmNhbmNlbENhbGxUaW1lb3V0KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93RXJyb3JTY3JlZW46IGZhbHNlIH0pO1xuICAgICAgdGhpcy5jYW5jZWxDYWxsVGltZW91dCA9IHNldFRpbWVvdXQoXG4gICAgICAgIHRoaXMuY2FuY2VsQ2FsbCxcbiAgICAgICAgdGhpcy5wcm9wcy5jYW5jZWxUaW1lIHx8IFNFQ09ORCAqIDE1LFxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQgPSAoKSA9PiB7XG4gICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLmNhbmNlbENhbGxUaW1lb3V0KTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyByb2xsYmFja1RvUHJldmlvdXNQcm92aWRlciwgc2hvd0RlcHJlY2F0ZWRScGNVcmxXYXJuaW5nIH0gPVxuICAgICAgdGhpcy5wcm9wcztcblxuICAgIGxldCBsb2FkaW5nTWVzc2FnZVRvUmVuZGVyO1xuICAgIGlmICh0aGlzLnN0YXRlLnNob3dFcnJvclNjcmVlbikge1xuICAgICAgbG9hZGluZ01lc3NhZ2VUb1JlbmRlciA9IHRoaXMucmVuZGVyRXJyb3JTY3JlZW5Db250ZW50KCk7XG4gICAgfSBlbHNlIGlmIChzaG93RGVwcmVjYXRlZFJwY1VybFdhcm5pbmcpIHtcbiAgICAgIGxvYWRpbmdNZXNzYWdlVG9SZW5kZXIgPSB0aGlzLnJlbmRlckRlcHJlY2F0ZWRScGNVcmxXYXJuaW5nKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvYWRpbmdNZXNzYWdlVG9SZW5kZXIgPSB0aGlzLmdldENvbm5lY3RpbmdMYWJlbChcbiAgICAgICAgdGhpcy5wcm9wcy5sb2FkaW5nTWVzc2FnZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxMb2FkaW5nU2NyZWVuXG4gICAgICAgIGhlYWRlcj17XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicGFnZS1jb250YWluZXJfX2hlYWRlci1jbG9zZVwiXG4gICAgICAgICAgICBvbkNsaWNrPXtyb2xsYmFja1RvUHJldmlvdXNQcm92aWRlcn1cbiAgICAgICAgICAvPlxuICAgICAgICB9XG4gICAgICAgIHNob3dMb2FkaW5nU3Bpbm5lcj17IXRoaXMuc3RhdGUuc2hvd0Vycm9yU2NyZWVufVxuICAgICAgICBsb2FkaW5nTWVzc2FnZT17bG9hZGluZ01lc3NhZ2VUb1JlbmRlcn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IE5FVFdPUktfVFlQRVMgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL25ldHdvcmsnO1xuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuLi8uLi8uLi9zdG9yZS9hY3Rpb25zJztcbmltcG9ydCB7XG4gIGdldEFsbEVuYWJsZWROZXR3b3JrcyxcbiAgZ2V0TmV0d29ya0lkZW50aWZpZXIsXG4gIGlzTmV0d29ya0xvYWRpbmcsXG59IGZyb20gJy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBnZXRQcm92aWRlckNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2R1Y2tzL21ldGFtYXNrL21ldGFtYXNrJztcbmltcG9ydCBMb2FkaW5nTmV0d29ya1NjcmVlbiBmcm9tICcuL2xvYWRpbmctbmV0d29yay1zY3JlZW4uY29tcG9uZW50JztcblxuY29uc3QgREVQUkVDQVRFRF9URVNUX05FVF9DSEFJTklEUyA9IFsnMHgzJywgJzB4MmEnLCAnMHg0J107XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4ge1xuICBjb25zdCB7IGxvYWRpbmdNZXNzYWdlIH0gPSBzdGF0ZS5hcHBTdGF0ZTtcbiAgY29uc3QgcHJvdmlkZXJDb25maWcgPSBnZXRQcm92aWRlckNvbmZpZyhzdGF0ZSk7XG4gIGNvbnN0IHsgcnBjVXJsLCBjaGFpbklkLCB0aWNrZXIsIG5pY2tuYW1lLCB0eXBlIH0gPSBwcm92aWRlckNvbmZpZztcblxuICBjb25zdCBzZXRQcm92aWRlckFyZ3MgPVxuICAgIHR5cGUgPT09IE5FVFdPUktfVFlQRVMuUlBDID8gW3JwY1VybCwgY2hhaW5JZCwgdGlja2VyLCBuaWNrbmFtZV0gOiBbdHlwZV07XG5cbiAgY29uc3QgcHJvdmlkZXJDaGFpbklkID0gY2hhaW5JZDtcbiAgY29uc3QgaXNEZXByZWNhdGVkTmV0d29yayA9XG4gICAgREVQUkVDQVRFRF9URVNUX05FVF9DSEFJTklEUy5pbmNsdWRlcyhwcm92aWRlckNoYWluSWQpO1xuICBjb25zdCBpc0luZnVyYVJwY1VybCA9IHJwY1VybCAmJiBuZXcgVVJMKHJwY1VybCkuaG9zdC5lbmRzV2l0aCgnLmluZnVyYS5pbycpO1xuICBjb25zdCBzaG93RGVwcmVjYXRlZFJwY1VybFdhcm5pbmcgPSBpc0RlcHJlY2F0ZWROZXR3b3JrICYmIGlzSW5mdXJhUnBjVXJsO1xuXG4gIC8vIEVuc3VyZSB3ZSBoYXZlIGEgbmlja25hbWUgdG8gcHJvdmlkZSB0aGUgdXNlclxuICAvLyBpbiBjYXNlIG9mIGNvbm5lY3Rpb24gZXJyb3JcbiAgbGV0IG5ldHdvcmtOYW1lID0gbmlja25hbWU7XG4gIGlmIChuZXR3b3JrTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgbmV0d29ya3MgPSBnZXRBbGxFbmFibGVkTmV0d29ya3Moc3RhdGUpO1xuICAgIGNvbnN0IGRlc2lyZWROZXR3b3JrID0gbmV0d29ya3MuZmluZChcbiAgICAgIChuZXR3b3JrKSA9PiBuZXR3b3JrLmNoYWluSWQgPT09IGNoYWluSWQsXG4gICAgKTtcbiAgICBpZiAoZGVzaXJlZE5ldHdvcmspIHtcbiAgICAgIG5ldHdvcmtOYW1lID0gZGVzaXJlZE5ldHdvcmsubmlja25hbWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc05ldHdvcmtMb2FkaW5nOiBpc05ldHdvcmtMb2FkaW5nKHN0YXRlKSxcbiAgICBsb2FkaW5nTWVzc2FnZSxcbiAgICBzZXRQcm92aWRlckFyZ3MsXG4gICAgcHJvdmlkZXJDb25maWc6IHtcbiAgICAgIC4uLnByb3ZpZGVyQ29uZmlnLFxuICAgICAgbmlja25hbWU6IG5ldHdvcmtOYW1lLFxuICAgIH0sXG4gICAgcHJvdmlkZXJJZDogZ2V0TmV0d29ya0lkZW50aWZpZXIoc3RhdGUpLFxuICAgIHNob3dEZXByZWNhdGVkUnBjVXJsV2FybmluZyxcbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHNldFByb3ZpZGVyVHlwZTogKHR5cGUpID0+IHtcbiAgICAgIGRpc3BhdGNoKGFjdGlvbnMuc2V0UHJvdmlkZXJUeXBlKHR5cGUpKTtcbiAgICB9LFxuICAgIHJvbGxiYWNrVG9QcmV2aW91c1Byb3ZpZGVyOiAoKSA9PlxuICAgICAgZGlzcGF0Y2goYWN0aW9ucy5yb2xsYmFja1RvUHJldmlvdXNQcm92aWRlcigpKSxcbiAgICBzaG93TmV0d29ya0Ryb3Bkb3duOiAoKSA9PiB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTVVMVElDSEFJTikge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9ucy50b2dnbGVOZXR3b3JrTWVudSgpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25zLnNob3dOZXR3b3JrRHJvcGRvd24oKSk7XG4gICAgfSxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxuKShMb2FkaW5nTmV0d29ya1NjcmVlbik7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXRBY2NvdW50TGluayB9IGZyb20gJ0BtZXRhbWFzay9ldGhlcnNjYW4tbGluayc7XG5cbmltcG9ydCB7IHNob3dNb2RhbCB9IGZyb20gJy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IHtcbiAgQ09OTkVDVEVEX1JPVVRFLFxuICBORVRXT1JLU19ST1VURSxcbn0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvcm91dGVzJztcbmltcG9ydCB7IGdldFVSTEhvc3ROYW1lIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy91dGlscy91dGlsJztcbmltcG9ydCB7IE1lbnUsIE1lbnVJdGVtIH0gZnJvbSAnLi4vLi4vdWkvbWVudSc7XG5pbXBvcnQge1xuICBnZXRCbG9ja0V4cGxvcmVyTGlua1RleHQsXG4gIGdldEN1cnJlbnRDaGFpbklkLFxuICBnZXRDdXJyZW50S2V5cmluZyxcbiAgZ2V0UnBjUHJlZnNGb3JDdXJyZW50UHJvdmlkZXIsXG4gIGdldFNlbGVjdGVkSWRlbnRpdHksXG59IGZyb20gJy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7IGdldEVudmlyb25tZW50VHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2FwcC9zY3JpcHRzL2xpYi91dGlsJztcbmltcG9ydCB7IEVOVklST05NRU5UX1RZUEVfRlVMTFNDUkVFTiB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvYXBwJztcbmltcG9ydCB7IEtleXJpbmdUeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9rZXlyaW5nJztcbmltcG9ydCB7XG4gIE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeSxcbiAgTWV0YU1ldHJpY3NFdmVudExpbmtUeXBlLFxuICBNZXRhTWV0cmljc0V2ZW50TmFtZSxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9tZXRhbWV0cmljcyc7XG5pbXBvcnQgeyBNZXRhTWV0cmljc0NvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb250ZXh0cy9tZXRhbWV0cmljcyc7XG5pbXBvcnQgeyBJY29uTmFtZSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQWNjb3VudE9wdGlvbnNNZW51KHsgYW5jaG9yRWxlbWVudCwgb25DbG9zZSB9KSB7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG5cbiAgY29uc3Qga2V5cmluZyA9IHVzZVNlbGVjdG9yKGdldEN1cnJlbnRLZXlyaW5nKTtcbiAgY29uc3QgY2hhaW5JZCA9IHVzZVNlbGVjdG9yKGdldEN1cnJlbnRDaGFpbklkKTtcbiAgY29uc3QgcnBjUHJlZnMgPSB1c2VTZWxlY3RvcihnZXRScGNQcmVmc0ZvckN1cnJlbnRQcm92aWRlcik7XG4gIGNvbnN0IHNlbGVjdGVkSWRlbnRpdHkgPSB1c2VTZWxlY3RvcihnZXRTZWxlY3RlZElkZW50aXR5KTtcbiAgY29uc3QgeyBhZGRyZXNzIH0gPSBzZWxlY3RlZElkZW50aXR5O1xuICBjb25zdCBhZGRyZXNzTGluayA9IGdldEFjY291bnRMaW5rKGFkZHJlc3MsIGNoYWluSWQsIHJwY1ByZWZzKTtcbiAgY29uc3QgeyBibG9ja0V4cGxvcmVyVXJsIH0gPSBycGNQcmVmcztcbiAgY29uc3QgYmxvY2tFeHBsb3JlclVybFN1YlRpdGxlID0gZ2V0VVJMSG9zdE5hbWUoYmxvY2tFeHBsb3JlclVybCk7XG4gIGNvbnN0IHRyYWNrRXZlbnQgPSB1c2VDb250ZXh0KE1ldGFNZXRyaWNzQ29udGV4dCk7XG4gIGNvbnN0IGJsb2NrRXhwbG9yZXJMaW5rVGV4dCA9IHVzZVNlbGVjdG9yKGdldEJsb2NrRXhwbG9yZXJMaW5rVGV4dCk7XG5cbiAgY29uc3QgaXNSZW1vdmFibGUgPSBrZXlyaW5nLnR5cGUgIT09IEtleXJpbmdUeXBlLmhkS2V5VHJlZTtcblxuICBjb25zdCByb3V0ZVRvQWRkQmxvY2tFeHBsb3JlclVybCA9ICgpID0+IHtcbiAgICBoaXN0b3J5LnB1c2goYCR7TkVUV09SS1NfUk9VVEV9I2Jsb2NrRXhwbG9yZXJVcmxgKTtcbiAgfTtcblxuICBjb25zdCBvcGVuQmxvY2tFeHBsb3JlciA9ICgpID0+IHtcbiAgICB0cmFja0V2ZW50KHtcbiAgICAgIGV2ZW50OiBNZXRhTWV0cmljc0V2ZW50TmFtZS5FeHRlcm5hbExpbmtDbGlja2VkLFxuICAgICAgY2F0ZWdvcnk6IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeS5OYXZpZ2F0aW9uLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBsaW5rX3R5cGU6IE1ldGFNZXRyaWNzRXZlbnRMaW5rVHlwZS5BY2NvdW50VHJhY2tlcixcbiAgICAgICAgbG9jYXRpb246ICdBY2NvdW50IE9wdGlvbnMnLFxuICAgICAgICB1cmxfZG9tYWluOiBnZXRVUkxIb3N0TmFtZShhZGRyZXNzTGluayksXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGdsb2JhbC5wbGF0Zm9ybS5vcGVuVGFiKHtcbiAgICAgIHVybDogYWRkcmVzc0xpbmssXG4gICAgfSk7XG4gICAgb25DbG9zZSgpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPE1lbnVcbiAgICAgIGFuY2hvckVsZW1lbnQ9e2FuY2hvckVsZW1lbnR9XG4gICAgICBjbGFzc05hbWU9XCJhY2NvdW50LW9wdGlvbnMtbWVudVwiXG4gICAgICBvbkhpZGU9e29uQ2xvc2V9XG4gICAgPlxuICAgICAgPE1lbnVJdGVtXG4gICAgICAgIG9uQ2xpY2s9e1xuICAgICAgICAgIGJsb2NrRXhwbG9yZXJMaW5rVGV4dC5maXJzdFBhcnQgPT09ICdhZGRCbG9ja0V4cGxvcmVyJ1xuICAgICAgICAgICAgPyByb3V0ZVRvQWRkQmxvY2tFeHBsb3JlclVybFxuICAgICAgICAgICAgOiBvcGVuQmxvY2tFeHBsb3JlclxuICAgICAgICB9XG4gICAgICAgIHN1YnRpdGxlPXtcbiAgICAgICAgICBibG9ja0V4cGxvcmVyVXJsU3ViVGl0bGUgPyAoXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJhY2NvdW50LW9wdGlvbnMtbWVudV9fZXhwbG9yZXItb3JpZ2luXCI+XG4gICAgICAgICAgICAgIHtibG9ja0V4cGxvcmVyVXJsU3ViVGl0bGV9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgKSA6IG51bGxcbiAgICAgICAgfVxuICAgICAgICBpY29uTmFtZT17SWNvbk5hbWUuRXhwb3J0fVxuICAgICAgPlxuICAgICAgICB7dChcbiAgICAgICAgICBibG9ja0V4cGxvcmVyTGlua1RleHQuZmlyc3RQYXJ0LFxuICAgICAgICAgIGJsb2NrRXhwbG9yZXJMaW5rVGV4dC5zZWNvbmRQYXJ0ID09PSAnJ1xuICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICA6IFt0KGJsb2NrRXhwbG9yZXJMaW5rVGV4dC5zZWNvbmRQYXJ0KV0sXG4gICAgICAgICl9XG4gICAgICA8L01lbnVJdGVtPlxuICAgICAge2dldEVudmlyb25tZW50VHlwZSgpID09PSBFTlZJUk9OTUVOVF9UWVBFX0ZVTExTQ1JFRU4gPyBudWxsIDogKFxuICAgICAgICA8TWVudUl0ZW1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICB0cmFja0V2ZW50KHtcbiAgICAgICAgICAgICAgZXZlbnQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLkFwcFdpbmRvd0V4cGFuZGVkLFxuICAgICAgICAgICAgICBjYXRlZ29yeTogTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5Lk5hdmlnYXRpb24sXG4gICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ0FjY291bnQgT3B0aW9ucycsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGdsb2JhbC5wbGF0Zm9ybS5vcGVuRXh0ZW5zaW9uSW5Ccm93c2VyKCk7XG4gICAgICAgICAgICBvbkNsb3NlKCk7XG4gICAgICAgICAgfX1cbiAgICAgICAgICBpY29uTmFtZT17SWNvbk5hbWUuRXhwYW5kfVxuICAgICAgICA+XG4gICAgICAgICAge3QoJ2V4cGFuZFZpZXcnKX1cbiAgICAgICAgPC9NZW51SXRlbT5cbiAgICAgICl9XG4gICAgICA8TWVudUl0ZW1cbiAgICAgICAgZGF0YS10ZXN0aWQ9XCJhY2NvdW50LW9wdGlvbnMtbWVudV9fYWNjb3VudC1kZXRhaWxzXCJcbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIGRpc3BhdGNoKHNob3dNb2RhbCh7IG5hbWU6ICdBQ0NPVU5UX0RFVEFJTFMnIH0pKTtcbiAgICAgICAgICB0cmFja0V2ZW50KHtcbiAgICAgICAgICAgIGV2ZW50OiBNZXRhTWV0cmljc0V2ZW50TmFtZS5OYXZBY2NvdW50RGV0YWlsc09wZW5lZCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuTmF2aWdhdGlvbixcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgbG9jYXRpb246ICdBY2NvdW50IE9wdGlvbnMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBvbkNsb3NlKCk7XG4gICAgICAgIH19XG4gICAgICAgIGljb25OYW1lPXtJY29uTmFtZS5TY2FuQmFyY29kZX1cbiAgICAgID5cbiAgICAgICAge3QoJ2FjY291bnREZXRhaWxzJyl9XG4gICAgICA8L01lbnVJdGVtPlxuICAgICAgPE1lbnVJdGVtXG4gICAgICAgIGRhdGEtdGVzdGlkPVwiYWNjb3VudC1vcHRpb25zLW1lbnVfX2Nvbm5lY3RlZC1zaXRlc1wiXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICB0cmFja0V2ZW50KHtcbiAgICAgICAgICAgIGV2ZW50OiBNZXRhTWV0cmljc0V2ZW50TmFtZS5OYXZDb25uZWN0ZWRTaXRlc09wZW5lZCxcbiAgICAgICAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuTmF2aWdhdGlvbixcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgbG9jYXRpb246ICdBY2NvdW50IE9wdGlvbnMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBoaXN0b3J5LnB1c2goQ09OTkVDVEVEX1JPVVRFKTtcbiAgICAgICAgICBvbkNsb3NlKCk7XG4gICAgICAgIH19XG4gICAgICAgIGljb25OYW1lPXtJY29uTmFtZS5Db25uZWN0fVxuICAgICAgPlxuICAgICAgICB7dCgnY29ubmVjdGVkU2l0ZXMnKX1cbiAgICAgIDwvTWVudUl0ZW0+XG4gICAgICB7aXNSZW1vdmFibGUgPyAoXG4gICAgICAgIDxNZW51SXRlbVxuICAgICAgICAgIGRhdGEtdGVzdGlkPVwiYWNjb3VudC1vcHRpb25zLW1lbnVfX3JlbW92ZS1hY2NvdW50XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBkaXNwYXRjaChcbiAgICAgICAgICAgICAgc2hvd01vZGFsKHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnQ09ORklSTV9SRU1PVkVfQUNDT1VOVCcsXG4gICAgICAgICAgICAgICAgaWRlbnRpdHk6IHNlbGVjdGVkSWRlbnRpdHksXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG9uQ2xvc2UoKTtcbiAgICAgICAgICB9fVxuICAgICAgICAgIGljb25OYW1lPXtJY29uTmFtZS5UcmFzaH1cbiAgICAgICAgPlxuICAgICAgICAgIHt0KCdyZW1vdmVBY2NvdW50Jyl9XG4gICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICApIDogbnVsbH1cbiAgICA8L01lbnU+XG4gICk7XG59XG5cbkFjY291bnRPcHRpb25zTWVudS5wcm9wVHlwZXMgPSB7XG4gIGFuY2hvckVsZW1lbnQ6IFByb3BUeXBlcy5pbnN0YW5jZU9mKHdpbmRvdy5FbGVtZW50KSxcbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbkFjY291bnRPcHRpb25zTWVudS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFuY2hvckVsZW1lbnQ6IHVuZGVmaW5lZCxcbn07XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9tZW51LWJhcic7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUNvbnRleHQsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBicm93c2VyIGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCc7XG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBTZWxlY3RlZEFjY291bnQgZnJvbSAnLi4vc2VsZWN0ZWQtYWNjb3VudCc7XG5pbXBvcnQgQ29ubmVjdGVkU3RhdHVzSW5kaWNhdG9yIGZyb20gJy4uL2Nvbm5lY3RlZC1zdGF0dXMtaW5kaWNhdG9yJztcbmltcG9ydCB7IGdldEVudmlyb25tZW50VHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2FwcC9zY3JpcHRzL2xpYi91dGlsJztcbmltcG9ydCB7IEVOVklST05NRU5UX1RZUEVfUE9QVVAgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2FwcCc7XG5pbXBvcnQge1xuICBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnksXG4gIE1ldGFNZXRyaWNzRXZlbnROYW1lLFxufSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL21ldGFtZXRyaWNzJztcbmltcG9ydCB7IENPTk5FQ1RFRF9BQ0NPVU5UU19ST1VURSB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL3JvdXRlcyc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7IGdldE9yaWdpbk9mQ3VycmVudFRhYiB9IGZyb20gJy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBNZXRhTWV0cmljc0NvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb250ZXh0cy9tZXRhbWV0cmljcyc7XG5pbXBvcnQgeyBCdXR0b25JY29uLCBJY29uTmFtZSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcbmltcG9ydCBBY2NvdW50T3B0aW9uc01lbnUgZnJvbSAnLi9hY2NvdW50LW9wdGlvbnMtbWVudSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1lbnVCYXIoKSB7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBjb25zdCB0cmFja0V2ZW50ID0gdXNlQ29udGV4dChNZXRhTWV0cmljc0NvbnRleHQpO1xuICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuICBjb25zdCBbYWNjb3VudE9wdGlvbnNNZW51T3Blbiwgc2V0QWNjb3VudE9wdGlvbnNNZW51T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IG9yaWdpbiA9IHVzZVNlbGVjdG9yKGdldE9yaWdpbk9mQ3VycmVudFRhYik7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZihmYWxzZSk7XG5cbiAgY29uc3Qgc2hvd1N0YXR1cyA9XG4gICAgZ2V0RW52aXJvbm1lbnRUeXBlKCkgPT09IEVOVklST05NRU5UX1RZUEVfUE9QVVAgJiZcbiAgICBvcmlnaW4gJiZcbiAgICBvcmlnaW4gIT09IGJyb3dzZXIucnVudGltZS5pZDtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibWVudS1iYXJcIj5cbiAgICAgIHtzaG93U3RhdHVzID8gKFxuICAgICAgICA8Q29ubmVjdGVkU3RhdHVzSW5kaWNhdG9yXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gaGlzdG9yeS5wdXNoKENPTk5FQ1RFRF9BQ0NPVU5UU19ST1VURSl9XG4gICAgICAgIC8+XG4gICAgICApIDogbnVsbH1cbiAgICAgIDxTZWxlY3RlZEFjY291bnQgLz5cbiAgICAgIDxzcGFuIHN0eWxlPXt7IGRpc3BsYXk6ICdpbmhlcml0JyB9fSByZWY9e3JlZn0+XG4gICAgICAgIDxCdXR0b25JY29uXG4gICAgICAgICAgaWNvbk5hbWU9e0ljb25OYW1lLk1vcmVWZXJ0aWNhbH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJtZW51LWJhcl9fYWNjb3VudC1vcHRpb25zXCJcbiAgICAgICAgICBkYXRhLXRlc3RpZD1cImFjY291bnQtb3B0aW9ucy1tZW51LWJ1dHRvblwiXG4gICAgICAgICAgYXJpYUxhYmVsPXt0KCdhY2NvdW50T3B0aW9ucycpfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIHRyYWNrRXZlbnQoe1xuICAgICAgICAgICAgICBldmVudDogTWV0YU1ldHJpY3NFdmVudE5hbWUuTmF2QWNjb3VudE1lbnVPcGVuZWQsXG4gICAgICAgICAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuTmF2aWdhdGlvbixcbiAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnSG9tZScsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNldEFjY291bnRPcHRpb25zTWVudU9wZW4odHJ1ZSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvc3Bhbj5cbiAgICAgIHthY2NvdW50T3B0aW9uc01lbnVPcGVuICYmIChcbiAgICAgICAgPEFjY291bnRPcHRpb25zTWVudVxuICAgICAgICAgIGFuY2hvckVsZW1lbnQ9e3JlZi5jdXJyZW50fVxuICAgICAgICAgIG9uQ2xvc2U9eygpID0+IHNldEFjY291bnRPcHRpb25zTWVudU9wZW4oZmFsc2UpfVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFJlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwIGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvQ1NTVHJhbnNpdGlvbkdyb3VwJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVudURyb3Bwb0NvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaXNPcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGlubmVyU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG4gICAgb25DbGlja091dHNpZGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGNvbnRhaW5lckNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB6SW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICB1c2VDc3NUcmFuc2l0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzcGVlZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgfTtcblxuICByZW5kZXJQcmltYXJ5KCkge1xuICAgIGNvbnN0IHsgaXNPcGVuIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghaXNPcGVuKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBpbm5lclN0eWxlID0gdGhpcy5wcm9wcy5pbm5lclN0eWxlIHx8IHt9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPVwibWVudS1kcm9wcG9cIlxuICAgICAgICBrZXk9XCJtZW51LWRyb3Bwby1kcmF3ZXJcIlxuICAgICAgICBkYXRhLXRlc3RpZD1cIm1lbnUtZHJvcHBvXCJcbiAgICAgICAgc3R5bGU9e2lubmVyU3R5bGV9XG4gICAgICA+XG4gICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIGdsb2JhbENsaWNrT2NjdXJyZWQgPSAoZXZlbnQpID0+IHtcbiAgICBjb25zdCB7IHRhcmdldCB9ID0gZXZlbnQ7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWZpbmQtZG9tLW5vZGVcbiAgICBjb25zdCBjb250YWluZXIgPSBmaW5kRE9NTm9kZSh0aGlzKTtcblxuICAgIGlmIChcbiAgICAgIHRoaXMucHJvcHMuaXNPcGVuICYmXG4gICAgICB0YXJnZXQgIT09IGNvbnRhaW5lciAmJlxuICAgICAgIXRoaXMuY29udGFpbmVyLmNvbnRhaW5zKGV2ZW50LnRhcmdldClcbiAgICApIHtcbiAgICAgIHRoaXMucHJvcHMub25DbGlja091dHNpZGU/LihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzICYmIGRvY3VtZW50LmJvZHkpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmdsb2JhbENsaWNrT2NjdXJyZWQpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWZpbmQtZG9tLW5vZGVcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMgJiYgZG9jdW1lbnQuYm9keSkge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuZ2xvYmFsQ2xpY2tPY2N1cnJlZCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY29udGFpbmVyQ2xhc3NOYW1lID0gJycsIHN0eWxlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHNwZWVkID0gdGhpcy5wcm9wcy5zcGVlZCB8fCAnMzAwbXMnO1xuICAgIGNvbnN0IHsgdXNlQ3NzVHJhbnNpdGlvbiB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB6SW5kZXggPSAnekluZGV4JyBpbiB0aGlzLnByb3BzID8gdGhpcy5wcm9wcy56SW5kZXggOiAwO1xuXG4gICAgY29uc3QgYmFzZVN0eWxlID0ge1xuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAuLi5zdHlsZSxcbiAgICAgIHpJbmRleCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgc3R5bGU9e2Jhc2VTdHlsZX1cbiAgICAgICAgY2xhc3NOYW1lPXtgbWVudS1kcm9wcG8tY29udGFpbmVyICR7Y29udGFpbmVyQ2xhc3NOYW1lfWB9XG4gICAgICAgIGRhdGEtdGVzdGlkPXtjb250YWluZXJDbGFzc05hbWV9XG4gICAgICA+XG4gICAgICAgIDxzdHlsZT5cbiAgICAgICAgICB7YFxuICAgICAgICAgIC5tZW51LWRyb3Bwby1lbnRlciB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gJHtzcGVlZH0gZWFzZS1pbi1vdXQ7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTIwMCUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5tZW51LWRyb3Bwby1lbnRlci5tZW51LWRyb3Bwby1lbnRlci1hY3RpdmUge1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtICR7c3BlZWR9IGVhc2UtaW4tb3V0O1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDAlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAubWVudS1kcm9wcG8tbGVhdmUge1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtICR7c3BlZWR9IGVhc2UtaW4tb3V0O1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDAlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAubWVudS1kcm9wcG8tbGVhdmUubWVudS1kcm9wcG8tbGVhdmUtYWN0aXZlIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAke3NwZWVkfSBlYXNlLWluLW91dDtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMjAwJSk7XG4gICAgICAgICAgfVxuICAgICAgICBgfVxuICAgICAgICA8L3N0eWxlPlxuICAgICAgICB7dXNlQ3NzVHJhbnNpdGlvbiA/IChcbiAgICAgICAgICA8UmVhY3RDU1NUcmFuc2l0aW9uR3JvdXBcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNzcy10cmFuc2l0aW9uLWdyb3VwXCJcbiAgICAgICAgICAgIHRyYW5zaXRpb25OYW1lPVwibWVudS1kcm9wcG9cIlxuICAgICAgICAgICAgdHJhbnNpdGlvbkVudGVyVGltZW91dD17cGFyc2VJbnQoc3BlZWQsIDEwKX1cbiAgICAgICAgICAgIHRyYW5zaXRpb25MZWF2ZVRpbWVvdXQ9e3BhcnNlSW50KHNwZWVkLCAxMCl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3RoaXMucmVuZGVyUHJpbWFyeSgpfVxuICAgICAgICAgIDwvUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXA+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgdGhpcy5yZW5kZXJQcmltYXJ5KClcbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL21ldGFtYXNrLXRlbXBsYXRlLXJlbmRlcmVyJztcbmV4cG9ydCB7IFNlY3Rpb25TaGFwZSB9IGZyb20gJy4vc2VjdGlvbi1zaGFwZSc7XG4iLCJpbXBvcnQgUmVhY3QsIHsgbWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRXF1YWwgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgc2FmZUNvbXBvbmVudExpc3QgfSBmcm9tICcuL3NhZmUtY29tcG9uZW50LWxpc3QnO1xuaW1wb3J0IHsgVmFsaWRDaGlsZHJlbiB9IGZyb20gJy4vc2VjdGlvbi1zaGFwZSc7XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnQoc2VjdGlvbikge1xuICBjb25zdCB7IGVsZW1lbnQgfSA9IHNlY3Rpb247XG4gIGNvbnN0IEVsZW1lbnQgPSBzYWZlQ29tcG9uZW50TGlzdFtlbGVtZW50XTtcbiAgaWYgKCFFbGVtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYCR7ZWxlbWVudH0gaXMgbm90IGluIHRoZSBzYWZlIGNvbXBvbmVudCBsaXN0IGZvciBNZXRhTWFzayB0ZW1wbGF0ZSByZW5kZXJlcmAsXG4gICAgKTtcbiAgfVxuICByZXR1cm4gRWxlbWVudDtcbn1cblxuY29uc3QgTWV0YU1hc2tUZW1wbGF0ZVJlbmRlcmVyID0gKHsgc2VjdGlvbnMgfSkgPT4ge1xuICBpZiAoIXNlY3Rpb25zKSB7XG4gICAgLy8gSWYgc2VjdGlvbnMgaXMgbnVsbCBlamVjdCBlYXJseSBieSByZXR1cm5pbmcgbnVsbFxuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzZWN0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBSZWFjdCBjYW4gcmVuZGVyIHN0cmluZ3MgZGlyZWN0bHksIHNvIHJldHVybiB0aGUgc3RyaW5nXG4gICAgcmV0dXJuIHNlY3Rpb25zO1xuICB9IGVsc2UgaWYgKFxuICAgIHNlY3Rpb25zICYmXG4gICAgdHlwZW9mIHNlY3Rpb25zID09PSAnb2JqZWN0JyAmJlxuICAgICFBcnJheS5pc0FycmF5KHNlY3Rpb25zKVxuICApIHtcbiAgICAvLyBJZiBkZWFsaW5nIHdpdGggYSBzaW5nbGUgZW50cnksIHRoZW4gcmVuZGVyIGEgc2luZ2xlIG9iamVjdCB3aXRob3V0IGtleVxuICAgIGNvbnN0IEVsZW1lbnQgPSBnZXRFbGVtZW50KHNlY3Rpb25zKTtcbiAgICByZXR1cm4gKFxuICAgICAgPEVsZW1lbnQgey4uLnNlY3Rpb25zLnByb3BzfT5cbiAgICAgICAge3R5cGVvZiBzZWN0aW9ucy5jaGlsZHJlbiA9PT0gJ29iamVjdCcgPyAoXG4gICAgICAgICAgPE1ldGFNYXNrVGVtcGxhdGVSZW5kZXJlciBzZWN0aW9ucz17c2VjdGlvbnMuY2hpbGRyZW59IC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgc2VjdGlvbnM/LmNoaWxkcmVuXG4gICAgICAgICl9XG4gICAgICA8L0VsZW1lbnQ+XG4gICAgKTtcbiAgfVxuXG4gIC8vIFRoZSBsYXN0IGNhc2UgaXMgZGVhbGluZyB3aXRoIGFuIGFycmF5IG9mIG9iamVjdHNcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge3NlY3Rpb25zLnJlZHVjZSgoYWxsQ2hpbGRyZW4sIGNoaWxkKSA9PiB7XG4gICAgICAgIGlmIChjaGlsZD8uaGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBhbGxDaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIC8vIFJlYWN0IGNhbiByZW5kZXIgc3RyaW5ncyBkaXJlY3RseSwgc28gcHVzaCB0aGVtIGludG8gdGhlIGFjY3VtdWxhdG9yXG4gICAgICAgICAgYWxsQ2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGVudHJ5IGluIGFycmF5IGlzIG5vdCBhIHN0cmluZywgdGhlbiBpdCBtdXN0IGJlIGEgU2VjdGlvbi5cbiAgICAgICAgICAvLyBTZWN0aW9ucyBhcmUgaGFuZGxlZCBieSB0aGUgbWFpbiBmdW5jdGlvbiwgYnV0IG11c3RcbiAgICAgICAgICAvLyBiZSBwcm92aWRlZCBhIGtleSB3aGVuIGEgcGFydCBvZiBhbiBhcnJheS5cbiAgICAgICAgICBpZiAoIWNoaWxkLmtleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAnV2hlbiB1c2luZyBhcnJheSBzeW50YXggaW4gTWV0YU1hc2sgVGVtcGxhdGUgTGFuZ3VhZ2UsIHlvdSBtdXN0IHNwZWNpZnkgYSBrZXkgZm9yIGVhY2ggY2hpbGQgb2YgdGhlIGFycmF5JyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgY2hpbGQ/LmNoaWxkcmVuID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBjaGlsZCBoYXMgaXRzIG93biBjaGlsZHJlbiwgY2hlY2sgaWYgY2hpbGRyZW4gaXMgYW5cbiAgICAgICAgICAgIC8vIG9iamVjdCwgYW5kIGluIHRoYXQgY2FzZSB1c2UgcmVjdXJzaW9uIHRvIHJlbmRlci5cbiAgICAgICAgICAgIGFsbENoaWxkcmVuLnB1c2goXG4gICAgICAgICAgICAgIDxNZXRhTWFza1RlbXBsYXRlUmVuZGVyZXIgc2VjdGlvbnM9e2NoaWxkfSBrZXk9e2NoaWxkLmtleX0gLz4sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UgcmVuZGVyIHRoZSBlbGVtZW50LlxuICAgICAgICAgICAgY29uc3QgRWxlbWVudCA9IGdldEVsZW1lbnQoY2hpbGQpO1xuICAgICAgICAgICAgYWxsQ2hpbGRyZW4ucHVzaChcbiAgICAgICAgICAgICAgPEVsZW1lbnQga2V5PXtjaGlsZC5rZXl9IHsuLi5jaGlsZC5wcm9wc30+XG4gICAgICAgICAgICAgICAge2NoaWxkPy5jaGlsZHJlbn1cbiAgICAgICAgICAgICAgPC9FbGVtZW50PixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGxDaGlsZHJlbjtcbiAgICAgIH0sIFtdKX1cbiAgICA8Lz5cbiAgKTtcbn07XG5cbk1ldGFNYXNrVGVtcGxhdGVSZW5kZXJlci5wcm9wVHlwZXMgPSB7XG4gIHNlY3Rpb25zOiBWYWxpZENoaWxkcmVuLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbWVtbyhNZXRhTWFza1RlbXBsYXRlUmVuZGVyZXIsIChwcmV2UHJvcHMsIG5leHRQcm9wcykgPT4ge1xuICByZXR1cm4gaXNFcXVhbChwcmV2UHJvcHMuc2VjdGlvbnMsIG5leHRQcm9wcy5zZWN0aW9ucyk7XG59KTtcbiIsImltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vdWkvYnV0dG9uJztcbmltcG9ydCBDaGlwIGZyb20gJy4uLy4uL3VpL2NoaXAnO1xuaW1wb3J0IERlZmluaXRpb25MaXN0IGZyb20gJy4uLy4uL3VpL2RlZmluaXRpb24tbGlzdCc7XG5pbXBvcnQgVHJ1bmNhdGVkRGVmaW5pdGlvbkxpc3QgZnJvbSAnLi4vLi4vdWkvdHJ1bmNhdGVkLWRlZmluaXRpb24tbGlzdCc7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICcuLi8uLi91aS9wb3BvdmVyJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uLy4uL3VpL3R5cG9ncmFwaHknO1xuaW1wb3J0IEJveCBmcm9tICcuLi8uLi91aS9ib3gnO1xuaW1wb3J0IE1ldGFNYXNrVHJhbnNsYXRpb24gZnJvbSAnLi4vbWV0YW1hc2stdHJhbnNsYXRpb24nO1xuaW1wb3J0IE5ldHdvcmtEaXNwbGF5IGZyb20gJy4uL25ldHdvcmstZGlzcGxheSc7XG5pbXBvcnQgVGV4dEFyZWEgZnJvbSAnLi4vLi4vdWkvdGV4dGFyZWEvdGV4dGFyZWEnO1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tICcuLi8uLi91aS90ZXh0LWZpZWxkJztcbmltcG9ydCBDb25maXJtYXRpb25OZXR3b3JrU3dpdGNoIGZyb20gJy4uLy4uLy4uL3BhZ2VzL2NvbmZpcm1hdGlvbi9jb21wb25lbnRzL2NvbmZpcm1hdGlvbi1uZXR3b3JrLXN3aXRjaCc7XG5pbXBvcnQgVXJsSWNvbiBmcm9tICcuLi8uLi91aS91cmwtaWNvbic7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuLi8uLi91aS90b29sdGlwL3Rvb2x0aXAnO1xuXG5leHBvcnQgY29uc3Qgc2FmZUNvbXBvbmVudExpc3QgPSB7XG4gIGE6ICdhJyxcbiAgYjogJ2InLFxuICBpOiAnaScsXG4gIHA6ICdwJyxcbiAgZGl2OiAnZGl2JyxcbiAgc3BhbjogJ3NwYW4nLFxuICBCb3gsXG4gIEJ1dHRvbixcbiAgQ2hpcCxcbiAgQ29uZmlybWF0aW9uTmV0d29ya1N3aXRjaCxcbiAgRGVmaW5pdGlvbkxpc3QsXG4gIE1ldGFNYXNrVHJhbnNsYXRpb24sXG4gIE5ldHdvcmtEaXNwbGF5LFxuICBQb3BvdmVyLFxuICBUZXh0QXJlYSxcbiAgVGV4dEZpZWxkLFxuICBUb29sdGlwLFxuICBUcnVuY2F0ZWREZWZpbml0aW9uTGlzdCxcbiAgVHlwb2dyYXBoeSxcbiAgVXJsSWNvbixcbn07XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgU2VjdGlvblNoYXBlID0ge1xuICBwcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgZWxlbWVudDogUHJvcFR5cGVzLnN0cmluZyxcbiAga2V5OiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGNvbnN0IFZhbGlkQ2hpbGRyZW4gPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgUHJvcFR5cGVzLnN0cmluZyxcbiAgUHJvcFR5cGVzLnNoYXBlKFNlY3Rpb25TaGFwZSksXG4gIFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zaGFwZShTZWN0aW9uU2hhcGUpLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICksXG5dKTtcblxuU2VjdGlvblNoYXBlLmNoaWxkcmVuID0gVmFsaWRDaGlsZHJlbjtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL21ldGFtYXNrLXRyYW5zbGF0aW9uJztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQgTWV0YU1hc2tUZW1wbGF0ZVJlbmRlcmVyIGZyb20gJy4uL21ldGFtYXNrLXRlbXBsYXRlLXJlbmRlcmVyJztcbmltcG9ydCB7IFNlY3Rpb25TaGFwZSB9IGZyb20gJy4uL21ldGFtYXNrLXRlbXBsYXRlLXJlbmRlcmVyL3NlY3Rpb24tc2hhcGUnO1xuXG4vKipcbiAqIE1ldGFNYXNrVHJhbnNsYXRpb24gaXMgYSBzaW1wbGUgaGVscGVyIGNvbXBvbmVudCBmb3IgYWRkaW5nIGZ1bGwgdHJhbnNsYXRpb25cbiAqIHN1cHBvcnQgdG8gdGhlIHRlbXBsYXRlIHN5c3RlbS4gV2UgZG8gcGFzcyB0aGUgdHJhbnNsYXRpb24gZnVuY3Rpb24gdG8gdGhlXG4gKiB0ZW1wbGF0ZSBnZXRWYWx1ZXMgZnVuY3Rpb24sIGJ1dCBwYXNzaW5nIGl0IFJlYWN0IGNvbXBvbmVudHMgYXMgdmFyaWFibGVzXG4gKiB3b3VsZCByZXF1aXJlIFJlYWN0IHRvIGJlIGluIHNjb3BlLCBhbmQgYnJlYWtzIHRoZSBvYmplY3QgcGF0dGVybiBwYXJhZGlnbS5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBnZXRzIGFyb3VuZCB0aGF0IGJ5IGNvbnZlcnRpbmcgdmFyaWFibGVzIHRoYXQgYXJlIHRlbXBsYXRlc1xuICogdGhlbXNlbHZlcyBpbnRvIHRpbnkgUmVhY3QgdHJlZXMuIFRoaXMgY29tcG9uZW50IGRvZXMgYWRkaXRpb25hbCB2YWxpZGF0aW9uXG4gKiB0byBtYWtlIHN1cmUgdGhhdCB0aGUgdHJlZSBoYXMgYSBzaW5nbGUgcm9vdCBub2RlLCB3aXRoIG1heGltdW0gdHdvIGxlYXZlcy5cbiAqIEVhY2ggc3Vibm9kZSBjYW4gaGF2ZSBhIG1heGltdW0gb2Ygb25lIGNoaWxkIHRoYXQgbXVzdCBiZSBhIHN0cmluZy5cbiAqXG4gKiBUaGlzIGVuZm9yY2VzIGEgbWF4aW11bSByZWN1cnNpb24gZGVwdGggb2YgMiwgcHJldmVudGluZyB0cmFuc2xhdGlvbiBzdHJpbmdzXG4gKiBmcm9tIGJlaW5nIHBlcmZvcm1hbmNlIGhvZ3MuIFdlIGNvdWxkIGZ1cnRoZXIgbGltaXQgdGhpcywgYW5kIGFsc28gYXR0ZW51YXRlXG4gKiB0aGUgc2FmZUNvbXBvbmVudExpc3QgZm9yIHdoYXQga2luZCBvZiBjb21wb25lbnRzIHdlIGFsbG93IHRoZXNlIHNwZWNpYWxcbiAqIHRyZWVzIHRvIGNvbnRhaW4uXG4gKlxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEBwYXJhbSBvcHRpb25zLnRyYW5zbGF0aW9uS2V5XG4gKiBAcGFyYW0gb3B0aW9ucy52YXJpYWJsZXNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTWV0YU1hc2tUcmFuc2xhdGlvbih7IHRyYW5zbGF0aW9uS2V5LCB2YXJpYWJsZXMgfSkge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcblxuICByZXR1cm4gdChcbiAgICB0cmFuc2xhdGlvbktleSxcbiAgICB2YXJpYWJsZXM/Lm1hcCgodmFyaWFibGUpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIHZhcmlhYmxlID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAhQXJyYXkuaXNBcnJheSh2YXJpYWJsZSkgJiZcbiAgICAgICAgdmFyaWFibGUuZWxlbWVudFxuICAgICAgKSB7XG4gICAgICAgIGlmICghdmFyaWFibGUua2V5KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYFdoZW4gdXNpbmcgTWV0YU1hc2sgVGVtcGxhdGUgTGFuZ3VhZ2UgaW4gYSBNZXRhTWFza1RyYW5zbGF0aW9uIHZhcmlhYmxlLCB5b3UgbXVzdCBwcm92aWRlIGEga2V5IGZvciB0aGUgc2VjdGlvbiByZWdhcmRsZXNzIG9mIHN5bnRheC5cbiAgICAgICAgICAgIFNlY3Rpb24gd2l0aCBlbGVtZW50ICcke3ZhcmlhYmxlLmVsZW1lbnR9JyBmb3IgdHJhbnNsYXRpb25LZXk6ICcke3RyYW5zbGF0aW9uS2V5fScgaGFzIG5vIGtleSBwcm9wZXJ0eWAsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdmFyaWFibGUuY2hpbGRyZW4gJiZcbiAgICAgICAgICBBcnJheS5pc0FycmF5KHZhcmlhYmxlLmNoaWxkcmVuKSAmJlxuICAgICAgICAgIHZhcmlhYmxlLmNoaWxkcmVuLmxlbmd0aCA+IDJcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ01ldGFNYXNrVHJhbnNsYXRpb24gb25seSByZW5kZXJzIHRlbXBsYXRlcyB3aXRoIGEgc2luZ2xlIHNlY3Rpb24gYW5kIG1heGltdW0gdHdvIGNoaWxkcmVuJyxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICh2YXJpYWJsZS5jaGlsZHJlbj8uWzBdPy5jaGlsZHJlbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFyaWFibGUuY2hpbGRyZW5bMF0uY2hpbGRyZW4gIT09ICdzdHJpbmcnKSB8fFxuICAgICAgICAgICh2YXJpYWJsZS5jaGlsZHJlbj8uWzFdPy5jaGlsZHJlbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFyaWFibGUuY2hpbGRyZW5bMV0uY2hpbGRyZW4gIT09ICdzdHJpbmcnKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnTWV0YU1hc2tUcmFuc2xhdGlvbiBkb2VzIG5vdCBhbGxvdyBmb3IgY29tcG9uZW50IHRyZWVzIG9mIG5vbiB0cml2aWFsIGRlcHRoJyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPE1ldGFNYXNrVGVtcGxhdGVSZW5kZXJlclxuICAgICAgICAgICAga2V5PXtgJHt0cmFuc2xhdGlvbktleX0tJHt2YXJpYWJsZS5rZXl9YH1cbiAgICAgICAgICAgIHNlY3Rpb25zPXt2YXJpYWJsZX1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhcmlhYmxlO1xuICAgIH0pLFxuICApO1xufVxuXG5NZXRhTWFza1RyYW5zbGF0aW9uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRyYW5zbGF0aW9uIG9iamVjdCBrZXlcbiAgICovXG4gIHRyYW5zbGF0aW9uS2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBBcnJheSBvZiB2YXJpYWJsZXMgZm9yIHRoZSBNZXRhTWFza1RyYW5zbGF0aW9uIGNvbXBvbmVudFxuICAgKi9cbiAgdmFyaWFibGVzOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBQcm9wVHlwZXMubnVtYmVyLFxuICAgICAgUHJvcFR5cGVzLnNoYXBlKFNlY3Rpb25TaGFwZSksXG4gICAgXSksXG4gICksXG59O1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vbW9kYWwuY29tcG9uZW50JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxDb250ZW50IH0gZnJvbSAnLi9tb2RhbC1jb250ZW50JztcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL21vZGFsLWNvbnRlbnQuY29tcG9uZW50JztcbiIsImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9kYWxDb250ZW50IGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGVzY3JpcHRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdGl0bGUsIGRlc2NyaXB0aW9uIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtY29udGVudFwiPlxuICAgICAgICB7dGl0bGUgPyA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWNvbnRlbnRfX3RpdGxlXCI+e3RpdGxlfTwvZGl2PiA6IG51bGx9XG4gICAgICAgIHtkZXNjcmlwdGlvbiAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1jb250ZW50X19kZXNjcmlwdGlvblwiPntkZXNjcmlwdGlvbn08L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi8uLi91aS9idXR0b24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBjb250ZW50Q2xhc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGFpbmVyQ2xhc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgLy8gSGVhZGVyIHRleHRcbiAgICBoZWFkZXJUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIC8vIFN1Ym1pdCBidXR0b24gKHJpZ2h0IGJ1dHRvbilcbiAgICBvblN1Ym1pdDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc3VibWl0VHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdWJtaXRUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHN1Ym1pdERpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoaWRlRm9vdGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAvLyBDYW5jZWwgYnV0dG9uIChsZWZ0IGJ1dHRvbilcbiAgICBvbkNhbmNlbDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgY2FuY2VsVHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjYW5jZWxUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgc3VibWl0VHlwZTogJ3ByaW1hcnknLFxuICAgIGNhbmNlbFR5cGU6ICdzZWNvbmRhcnknLFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGhlYWRlclRleHQsXG4gICAgICBvbkNsb3NlLFxuICAgICAgb25TdWJtaXQsXG4gICAgICBzdWJtaXRUeXBlLFxuICAgICAgc3VibWl0VGV4dCxcbiAgICAgIHN1Ym1pdERpc2FibGVkLFxuICAgICAgb25DYW5jZWwsXG4gICAgICBjYW5jZWxUeXBlLFxuICAgICAgY2FuY2VsVGV4dCxcbiAgICAgIGNvbnRlbnRDbGFzcyxcbiAgICAgIGNvbnRhaW5lckNsYXNzLFxuICAgICAgaGlkZUZvb3RlcixcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NuYW1lcygnbW9kYWwtY29udGFpbmVyJywgY29udGFpbmVyQ2xhc3MpfT5cbiAgICAgICAge2hlYWRlclRleHQgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtY29udGFpbmVyX19oZWFkZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtY29udGFpbmVyX19oZWFkZXItdGV4dFwiPntoZWFkZXJUZXh0fTwvZGl2PlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtb2RhbC1jb250YWluZXJfX2hlYWRlci1jbG9zZVwiXG4gICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwibW9kYWwtaGVhZGVyLWNsb3NlXCJcbiAgICAgICAgICAgICAgb25DbGljaz17b25DbG9zZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdtb2RhbC1jb250YWluZXJfX2NvbnRlbnQnLCBjb250ZW50Q2xhc3MpfT5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7aGlkZUZvb3RlciA/IG51bGwgOiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1jb250YWluZXJfX2Zvb3RlclwiPlxuICAgICAgICAgICAge29uQ2FuY2VsICYmIChcbiAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIHR5cGU9e2NhbmNlbFR5cGV9XG4gICAgICAgICAgICAgICAgb25DbGljaz17b25DYW5jZWx9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibW9kYWwtY29udGFpbmVyX19mb290ZXItYnV0dG9uXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtjYW5jZWxUZXh0fVxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9e3N1Ym1pdFR5cGV9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uU3VibWl0fVxuICAgICAgICAgICAgICBkaXNhYmxlZD17c3VibWl0RGlzYWJsZWR9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1vZGFsLWNvbnRhaW5lcl9fZm9vdGVyLWJ1dHRvblwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtzdWJtaXRUZXh0fVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGdldEFjY291bnRMaW5rIH0gZnJvbSAnQG1ldGFtYXNrL2V0aGVyc2Nhbi1saW5rJztcblxuaW1wb3J0IEFjY291bnRNb2RhbENvbnRhaW5lciBmcm9tICcuLi9hY2NvdW50LW1vZGFsLWNvbnRhaW5lcic7XG5pbXBvcnQgUXJWaWV3IGZyb20gJy4uLy4uLy4uL3VpL3FyLWNvZGUnO1xuaW1wb3J0IEVkaXRhYmxlTGFiZWwgZnJvbSAnLi4vLi4vLi4vdWkvZWRpdGFibGUtbGFiZWwnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi8uLi8uLi91aS9idXR0b24nO1xuaW1wb3J0IHsgZ2V0VVJMSG9zdE5hbWUgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgaXNIYXJkd2FyZUtleXJpbmcgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL3V0aWxzL2hhcmR3YXJlJztcbmltcG9ydCB7XG4gIE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeSxcbiAgTWV0YU1ldHJpY3NFdmVudExpbmtUeXBlLFxuICBNZXRhTWV0cmljc0V2ZW50S2V5VHlwZSxcbiAgTWV0YU1ldHJpY3NFdmVudE5hbWUsXG59IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbWV0YW1ldHJpY3MnO1xuaW1wb3J0IHsgTkVUV09SS1NfUk9VVEUgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9yb3V0ZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBY2NvdW50RGV0YWlsc01vZGFsIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBzZWxlY3RlZElkZW50aXR5OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNoYWluSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc2hvd0V4cG9ydFByaXZhdGVLZXlNb2RhbDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2V0QWNjb3VudExhYmVsOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlyaW5nczogUHJvcFR5cGVzLmFycmF5LFxuICAgIHJwY1ByZWZzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGFjY291bnRzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBoaWRlTW9kYWw6IFByb3BUeXBlcy5mdW5jLFxuICAgIGJsb2NrRXhwbG9yZXJMaW5rVGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgfTtcblxuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIHRyYWNrRXZlbnQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBzZWxlY3RlZElkZW50aXR5LFxuICAgICAgY2hhaW5JZCxcbiAgICAgIHNob3dFeHBvcnRQcml2YXRlS2V5TW9kYWwsXG4gICAgICBzZXRBY2NvdW50TGFiZWwsXG4gICAgICBrZXlyaW5ncyxcbiAgICAgIHJwY1ByZWZzLFxuICAgICAgaGlzdG9yeSxcbiAgICAgIGhpZGVNb2RhbCxcbiAgICAgIGJsb2NrRXhwbG9yZXJMaW5rVGV4dCxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IG5hbWUsIGFkZHJlc3MgfSA9IHNlbGVjdGVkSWRlbnRpdHk7XG5cbiAgICBjb25zdCBrZXlyaW5nID0ga2V5cmluZ3MuZmluZCgoa3IpID0+IHtcbiAgICAgIHJldHVybiBrci5hY2NvdW50cy5pbmNsdWRlcyhhZGRyZXNzKTtcbiAgICB9KTtcblxuICAgIGxldCBleHBvcnRQcml2YXRlS2V5RmVhdHVyZUVuYWJsZWQgPSB0cnVlO1xuICAgIC8vIFRoaXMgZmVhdHVyZSBpcyBkaXNhYmxlZCBmb3IgaGFyZHdhcmUgd2FsbGV0c1xuICAgIGlmIChpc0hhcmR3YXJlS2V5cmluZyhrZXlyaW5nPy50eXBlKSkge1xuICAgICAgZXhwb3J0UHJpdmF0ZUtleUZlYXR1cmVFbmFibGVkID0gZmFsc2U7XG4gICAgfVxuXG5cbiAgICBjb25zdCByb3V0ZVRvQWRkQmxvY2tFeHBsb3JlclVybCA9ICgpID0+IHtcbiAgICAgIGhpZGVNb2RhbCgpO1xuICAgICAgaGlzdG9yeS5wdXNoKGAke05FVFdPUktTX1JPVVRFfSNibG9ja0V4cGxvcmVyVXJsYCk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9wZW5CbG9ja0V4cGxvcmVyID0gKCkgPT4ge1xuICAgICAgY29uc3QgYWNjb3VudExpbmsgPSBnZXRBY2NvdW50TGluayhhZGRyZXNzLCBjaGFpbklkLCBycGNQcmVmcyk7XG4gICAgICB0aGlzLmNvbnRleHQudHJhY2tFdmVudCh7XG4gICAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuTmF2aWdhdGlvbixcbiAgICAgICAgZXZlbnQ6IE1ldGFNZXRyaWNzRXZlbnROYW1lLkV4dGVybmFsTGlua0NsaWNrZWQsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBsaW5rX3R5cGU6IE1ldGFNZXRyaWNzRXZlbnRMaW5rVHlwZS5BY2NvdW50VHJhY2tlcixcbiAgICAgICAgICBsb2NhdGlvbjogJ0FjY291bnQgRGV0YWlscyBNb2RhbCcsXG4gICAgICAgICAgdXJsX2RvbWFpbjogZ2V0VVJMSG9zdE5hbWUoYWNjb3VudExpbmspLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBnbG9iYWwucGxhdGZvcm0ub3BlblRhYih7XG4gICAgICAgIHVybDogYWNjb3VudExpbmssXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBY2NvdW50TW9kYWxDb250YWluZXIgY2xhc3NOYW1lPVwiYWNjb3VudC1kZXRhaWxzLW1vZGFsXCI+XG4gICAgICAgIDxFZGl0YWJsZUxhYmVsXG4gICAgICAgICAgY2xhc3NOYW1lPVwiYWNjb3VudC1kZXRhaWxzLW1vZGFsX19uYW1lXCJcbiAgICAgICAgICBkZWZhdWx0VmFsdWU9e25hbWV9XG4gICAgICAgICAgb25TdWJtaXQ9eyhsYWJlbCkgPT4gc2V0QWNjb3VudExhYmVsKGFkZHJlc3MsIGxhYmVsKX1cbiAgICAgICAgICBhY2NvdW50cz17dGhpcy5wcm9wcy5hY2NvdW50c31cbiAgICAgICAgLz5cbiAgICAgICAge1xuICAgICAgICB9XG4gICAgICAgIDxRclZpZXdcbiAgICAgICAgICBRcj17e1xuICAgICAgICAgICAgZGF0YTogYWRkcmVzcyxcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWNjb3VudC1kZXRhaWxzLW1vZGFsX19kaXZpZGVyXCIgLz5cblxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgdHlwZT1cInNlY29uZGFyeVwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwiYWNjb3VudC1kZXRhaWxzLW1vZGFsX19idXR0b25cIlxuICAgICAgICAgIG9uQ2xpY2s9e1xuICAgICAgICAgICAgYmxvY2tFeHBsb3JlckxpbmtUZXh0LmZpcnN0UGFydCA9PT0gJ2FkZEJsb2NrRXhwbG9yZXInXG4gICAgICAgICAgICAgID8gcm91dGVUb0FkZEJsb2NrRXhwbG9yZXJVcmxcbiAgICAgICAgICAgICAgOiBvcGVuQmxvY2tFeHBsb3JlclxuICAgICAgICAgIH1cbiAgICAgICAgPlxuICAgICAgICAgIHt0aGlzLmNvbnRleHQudChibG9ja0V4cGxvcmVyTGlua1RleHQuZmlyc3RQYXJ0LCBbXG4gICAgICAgICAgICBibG9ja0V4cGxvcmVyTGlua1RleHQuc2Vjb25kUGFydCxcbiAgICAgICAgICBdKX1cbiAgICAgICAgPC9CdXR0b24+XG5cbiAgICAgICAge2V4cG9ydFByaXZhdGVLZXlGZWF0dXJlRW5hYmxlZCAmJiAoXG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJhY2NvdW50LWRldGFpbHMtbW9kYWxfX2J1dHRvblwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuY29udGV4dC50cmFja0V2ZW50KHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5LkFjY291bnRzLFxuICAgICAgICAgICAgICAgIGV2ZW50OiBNZXRhTWV0cmljc0V2ZW50TmFtZS5LZXlFeHBvcnRTZWxlY3RlZCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICBrZXlfdHlwZTogTWV0YU1ldHJpY3NFdmVudEtleVR5cGUuUGtleSxcbiAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnQWNjb3VudCBEZXRhaWxzIE1vZGFsJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgc2hvd0V4cG9ydFByaXZhdGVLZXlNb2RhbCgpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dGhpcy5jb250ZXh0LnQoJ2V4cG9ydFByaXZhdGVLZXknKX1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgIDwvQWNjb3VudE1vZGFsQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHtcbiAgc2hvd01vZGFsLFxuICBzZXRBY2NvdW50TGFiZWwsXG4gIGhpZGVNb2RhbCxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc3RvcmUvYWN0aW9ucyc7XG5pbXBvcnQge1xuICBnZXRTZWxlY3RlZElkZW50aXR5LFxuICBnZXRScGNQcmVmc0ZvckN1cnJlbnRQcm92aWRlcixcbiAgZ2V0Q3VycmVudENoYWluSWQsXG4gIGdldE1ldGFNYXNrQWNjb3VudHNPcmRlcmVkLFxuICBnZXRCbG9ja0V4cGxvcmVyTGlua1RleHQsXG59IGZyb20gJy4uLy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgQWNjb3VudERldGFpbHNNb2RhbCBmcm9tICcuL2FjY291bnQtZGV0YWlscy1tb2RhbC5jb21wb25lbnQnO1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBjaGFpbklkOiBnZXRDdXJyZW50Q2hhaW5JZChzdGF0ZSksXG4gICAgc2VsZWN0ZWRJZGVudGl0eTogZ2V0U2VsZWN0ZWRJZGVudGl0eShzdGF0ZSksXG4gICAga2V5cmluZ3M6IHN0YXRlLm1ldGFtYXNrLmtleXJpbmdzLFxuICAgIHJwY1ByZWZzOiBnZXRScGNQcmVmc0ZvckN1cnJlbnRQcm92aWRlcihzdGF0ZSksXG4gICAgYWNjb3VudHM6IGdldE1ldGFNYXNrQWNjb3VudHNPcmRlcmVkKHN0YXRlKSxcbiAgICBibG9ja0V4cGxvcmVyTGlua1RleHQ6IGdldEJsb2NrRXhwbG9yZXJMaW5rVGV4dChzdGF0ZSwgdHJ1ZSksXG4gIH07XG59O1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBzaG93RXhwb3J0UHJpdmF0ZUtleU1vZGFsOiAoKSA9PlxuICAgICAgZGlzcGF0Y2goc2hvd01vZGFsKHsgbmFtZTogJ0VYUE9SVF9QUklWQVRFX0tFWScgfSkpLFxuICAgIHNldEFjY291bnRMYWJlbDogKGFkZHJlc3MsIGxhYmVsKSA9PlxuICAgICAgZGlzcGF0Y2goc2V0QWNjb3VudExhYmVsKGFkZHJlc3MsIGxhYmVsKSksXG4gICAgaGlkZU1vZGFsOiAoKSA9PiB7XG4gICAgICBkaXNwYXRjaChoaWRlTW9kYWwoKSk7XG4gICAgfSxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2UoXG4gIHdpdGhSb3V0ZXIsXG4gIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpLFxuKShBY2NvdW50RGV0YWlsc01vZGFsKTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2FjY291bnQtZGV0YWlscy1tb2RhbC5jb250YWluZXInO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBJZGVudGljb24gZnJvbSAnLi4vLi4vLi4vdWkvaWRlbnRpY29uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQWNjb3VudE1vZGFsQ29udGFpbmVyKHByb3BzLCBjb250ZXh0KSB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgc2VsZWN0ZWRJZGVudGl0eSxcbiAgICBzaG93QmFja0J1dHRvbixcbiAgICBiYWNrQnV0dG9uQWN0aW9uLFxuICAgIGhpZGVNb2RhbCxcbiAgICBjaGlsZHJlbixcbiAgfSA9IHByb3BzO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKGNsYXNzTmFtZSwgJ2FjY291bnQtbW9kYWwnKX1cbiAgICAgIHN0eWxlPXt7IGJvcmRlclJhZGl1czogJzRweCcgfX1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFjY291bnQtbW9kYWxfX2NvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxJZGVudGljb24gYWRkcmVzcz17c2VsZWN0ZWRJZGVudGl0eS5hZGRyZXNzfSBkaWFtZXRlcj17NjR9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7c2hvd0JhY2tCdXR0b24gJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWNjb3VudC1tb2RhbF9fYmFja1wiIG9uQ2xpY2s9e2JhY2tCdXR0b25BY3Rpb259PlxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYW5nbGUtbGVmdCBmYS1sZ1wiIC8+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJhY2NvdW50LW1vZGFsX19iYWNrLXRleHRcIj5cbiAgICAgICAgICAgICAge2NvbnRleHQudCgnYmFjaycpfVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImFjY291bnQtbW9kYWxfX2Nsb3NlXCIgb25DbGljaz17aGlkZU1vZGFsfSAvPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuQWNjb3VudE1vZGFsQ29udGFpbmVyLmNvbnRleHRUeXBlcyA9IHtcbiAgdDogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5BY2NvdW50TW9kYWxDb250YWluZXIuZGVmYXVsdFByb3BzID0ge1xuICBzaG93QmFja0J1dHRvbjogZmFsc2UsXG4gIGNoaWxkcmVuOiBudWxsLFxuICBiYWNrQnV0dG9uQWN0aW9uOiB1bmRlZmluZWQsXG59O1xuXG5BY2NvdW50TW9kYWxDb250YWluZXIucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNlbGVjdGVkSWRlbnRpdHk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgc2hvd0JhY2tCdXR0b246IFByb3BUeXBlcy5ib29sLFxuICBiYWNrQnV0dG9uQWN0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgaGlkZU1vZGFsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG59O1xuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGhpZGVNb2RhbCB9IGZyb20gJy4uLy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IHsgZ2V0U2VsZWN0ZWRJZGVudGl0eSB9IGZyb20gJy4uLy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgQWNjb3VudE1vZGFsQ29udGFpbmVyIGZyb20gJy4vYWNjb3VudC1tb2RhbC1jb250YWluZXIuY29tcG9uZW50JztcblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcykge1xuICByZXR1cm4ge1xuICAgIHNlbGVjdGVkSWRlbnRpdHk6IG93blByb3BzLnNlbGVjdGVkSWRlbnRpdHkgfHwgZ2V0U2VsZWN0ZWRJZGVudGl0eShzdGF0ZSksXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGhpZGVNb2RhbDogKCkgPT4ge1xuICAgICAgZGlzcGF0Y2goaGlkZU1vZGFsKCkpO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxuKShBY2NvdW50TW9kYWxDb250YWluZXIpO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vYWNjb3VudC1tb2RhbC1jb250YWluZXIuY29udGFpbmVyJztcbiIsImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBNb2RhbCwgeyBNb2RhbENvbnRlbnQgfSBmcm9tICcuLi8uLi9tb2RhbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbmZpcm1EZWxldGVOZXR3b3JrIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaGlkZU1vZGFsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJlbW92ZU5ldHdvcmtDb25maWd1cmF0aW9uOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uQ29uZmlybTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIGhhbmRsZURlbGV0ZSA9ICgpID0+IHtcbiAgICB0aGlzLnByb3BzLnJlbW92ZU5ldHdvcmtDb25maWd1cmF0aW9uKHRoaXMucHJvcHMudGFyZ2V0KS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMucHJvcHMub25Db25maXJtKCk7XG4gICAgICB0aGlzLnByb3BzLmhpZGVNb2RhbCgpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMuY29udGV4dDtcblxuICAgIHJldHVybiAoXG4gICAgICA8TW9kYWxcbiAgICAgICAgb25TdWJtaXQ9e3RoaXMuaGFuZGxlRGVsZXRlfVxuICAgICAgICBvbkNhbmNlbD17KCkgPT4gdGhpcy5wcm9wcy5oaWRlTW9kYWwoKX1cbiAgICAgICAgc3VibWl0VGV4dD17dCgnZGVsZXRlJyl9XG4gICAgICAgIGNhbmNlbFRleHQ9e3QoJ2NhbmNlbCcpfVxuICAgICAgICBzdWJtaXRUeXBlPVwiZGFuZ2VyLXByaW1hcnlcIlxuICAgICAgPlxuICAgICAgICA8TW9kYWxDb250ZW50XG4gICAgICAgICAgdGl0bGU9e3QoJ2RlbGV0ZU5ldHdvcmsnKX1cbiAgICAgICAgICBkZXNjcmlwdGlvbj17dCgnZGVsZXRlTmV0d29ya0Rlc2NyaXB0aW9uJyl9XG4gICAgICAgIC8+XG4gICAgICA8L01vZGFsPlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHdpdGhNb2RhbFByb3BzIGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvaGlnaGVyLW9yZGVyLWNvbXBvbmVudHMvd2l0aC1tb2RhbC1wcm9wcyc7XG5pbXBvcnQgeyByZW1vdmVOZXR3b3JrQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uLy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IENvbmZpcm1EZWxldGVOZXR3b3JrIGZyb20gJy4vY29uZmlybS1kZWxldGUtbmV0d29yay5jb21wb25lbnQnO1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gpID0+IHtcbiAgcmV0dXJuIHtcbiAgICByZW1vdmVOZXR3b3JrQ29uZmlndXJhdGlvbjogKHRhcmdldCkgPT5cbiAgICAgIGRpc3BhdGNoKHJlbW92ZU5ldHdvcmtDb25maWd1cmF0aW9uKHRhcmdldCkpLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZShcbiAgd2l0aE1vZGFsUHJvcHMsXG4gIGNvbm5lY3QobnVsbCwgbWFwRGlzcGF0Y2hUb1Byb3BzKSxcbikoQ29uZmlybURlbGV0ZU5ldHdvcmspO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vY29uZmlybS1kZWxldGUtbmV0d29yay5jb250YWluZXInO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBnZXRBY2NvdW50TGluayB9IGZyb20gJ0BtZXRhbWFzay9ldGhlcnNjYW4tbGluayc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vbW9kYWwnO1xuaW1wb3J0IHsgYWRkcmVzc1N1bW1hcnksIGdldFVSTEhvc3ROYW1lIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy91dGlscy91dGlsJztcbmltcG9ydCBJZGVudGljb24gZnJvbSAnLi4vLi4vLi4vdWkvaWRlbnRpY29uJztcbmltcG9ydCB7IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbWV0YW1ldHJpY3MnO1xuaW1wb3J0IFpFTkRFU0tfVVJMUyBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy96ZW5kZXNrLXVybCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbmZpcm1SZW1vdmVBY2NvdW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBoaWRlTW9kYWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcmVtb3ZlQWNjb3VudDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBpZGVudGl0eTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNoYWluSWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBycGNQcmVmczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG4gICAgdDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgdHJhY2tFdmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgaGFuZGxlUmVtb3ZlID0gKCkgPT4ge1xuICAgIHRoaXMucHJvcHNcbiAgICAgIC5yZW1vdmVBY2NvdW50KHRoaXMucHJvcHMuaWRlbnRpdHkuYWRkcmVzcylcbiAgICAgIC50aGVuKCgpID0+IHRoaXMucHJvcHMuaGlkZU1vZGFsKCkpO1xuICB9O1xuXG4gIGhhbmRsZUNhbmNlbCA9ICgpID0+IHtcbiAgICB0aGlzLnByb3BzLmhpZGVNb2RhbCgpO1xuICB9O1xuXG4gIHJlbmRlclNlbGVjdGVkQWNjb3VudCgpIHtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7IGlkZW50aXR5LCBycGNQcmVmcywgY2hhaW5JZCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLXJlbW92ZS1hY2NvdW50X19hY2NvdW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29uZmlybS1yZW1vdmUtYWNjb3VudF9fYWNjb3VudF9faWRlbnRpY29uXCI+XG4gICAgICAgICAgPElkZW50aWNvbiBhZGRyZXNzPXtpZGVudGl0eS5hZGRyZXNzfSBkaWFtZXRlcj17MzJ9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpcm0tcmVtb3ZlLWFjY291bnRfX2FjY291bnRfX25hbWVcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjb25maXJtLXJlbW92ZS1hY2NvdW50X19hY2NvdW50X19sYWJlbFwiPlxuICAgICAgICAgICAge3QoJ25hbWUnKX1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYWNjb3VudF92YWx1ZVwiPntpZGVudGl0eS5uYW1lfTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29uZmlybS1yZW1vdmUtYWNjb3VudF9fYWNjb3VudF9fYWRkcmVzc1wiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImNvbmZpcm0tcmVtb3ZlLWFjY291bnRfX2FjY291bnRfX2xhYmVsXCI+XG4gICAgICAgICAgICB7dCgncHVibGljQWRkcmVzcycpfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJhY2NvdW50X3ZhbHVlXCI+XG4gICAgICAgICAgICB7YWRkcmVzc1N1bW1hcnkoaWRlbnRpdHkuYWRkcmVzcywgNCwgNCl9XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLXJlbW92ZS1hY2NvdW50X19hY2NvdW50X19saW5rXCI+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgYWNjb3VudExpbmsgPSBnZXRBY2NvdW50TGluayhcbiAgICAgICAgICAgICAgICBpZGVudGl0eS5hZGRyZXNzLFxuICAgICAgICAgICAgICAgIGNoYWluSWQsXG4gICAgICAgICAgICAgICAgcnBjUHJlZnMsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHRoaXMuY29udGV4dC50cmFja0V2ZW50KHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5LkFjY291bnRzLFxuICAgICAgICAgICAgICAgIGV2ZW50OiAnQ2xpY2tlZCBCbG9jayBFeHBsb3JlciBMaW5rJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICBsaW5rX3R5cGU6ICdBY2NvdW50IFRyYWNrZXInLFxuICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnUmVtb3ZlIEFjY291bnQnLFxuICAgICAgICAgICAgICAgICAgYmxvY2tfZXhwbG9yZXJfZG9tYWluOiBnZXRVUkxIb3N0TmFtZShhY2NvdW50TGluayksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGdsb2JhbC5wbGF0Zm9ybS5vcGVuVGFiKHtcbiAgICAgICAgICAgICAgICB1cmw6IGFjY291bnRMaW5rLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgICB0aXRsZT17dCgnZXRoZXJzY2FuVmlldycpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZhIGZhLXNoYXJlLXNxdWFyZVwiXG4gICAgICAgICAgICAgIHN0eWxlPXt7IGNvbG9yOiAndmFyKC0tY29sb3ItaWNvbi1tdXRlZCknIH19XG4gICAgICAgICAgICAgIHRpdGxlPXt0KCdldGhlcnNjYW5WaWV3Jyl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxNb2RhbFxuICAgICAgICBoZWFkZXJUZXh0PXtgJHt0KCdyZW1vdmVBY2NvdW50Jyl9P2B9XG4gICAgICAgIG9uQ2xvc2U9e3RoaXMuaGFuZGxlQ2FuY2VsfVxuICAgICAgICBvblN1Ym1pdD17dGhpcy5oYW5kbGVSZW1vdmV9XG4gICAgICAgIG9uQ2FuY2VsPXt0aGlzLmhhbmRsZUNhbmNlbH1cbiAgICAgICAgc3VibWl0VGV4dD17dCgncmVtb3ZlJyl9XG4gICAgICAgIGNhbmNlbFRleHQ9e3QoJ25ldmVybWluZCcpfVxuICAgICAgPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIHt0aGlzLnJlbmRlclNlbGVjdGVkQWNjb3VudCgpfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29uZmlybS1yZW1vdmUtYWNjb3VudF9fZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgIHt0KCdyZW1vdmVBY2NvdW50RGVzY3JpcHRpb24nKX1cbiAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNvbmZpcm0tcmVtb3ZlLWFjY291bnRfX2xpbmtcIlxuICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgaHJlZj17WkVOREVTS19VUkxTLklNUE9SVEVEX0FDQ09VTlRTfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dCgnbGVhcm5Nb3JlJyl9XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9Nb2RhbD5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB3aXRoTW9kYWxQcm9wcyBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2hpZ2hlci1vcmRlci1jb21wb25lbnRzL3dpdGgtbW9kYWwtcHJvcHMnO1xuaW1wb3J0IHtcbiAgZ2V0Q3VycmVudENoYWluSWQsXG4gIGdldFJwY1ByZWZzRm9yQ3VycmVudFByb3ZpZGVyLFxufSBmcm9tICcuLi8uLi8uLi8uLi9zZWxlY3RvcnMnO1xuaW1wb3J0IHsgcmVtb3ZlQWNjb3VudCB9IGZyb20gJy4uLy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IENvbmZpcm1SZW1vdmVBY2NvdW50IGZyb20gJy4vY29uZmlybS1yZW1vdmUtYWNjb3VudC5jb21wb25lbnQnO1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBjaGFpbklkOiBnZXRDdXJyZW50Q2hhaW5JZChzdGF0ZSksXG4gICAgcnBjUHJlZnM6IGdldFJwY1ByZWZzRm9yQ3VycmVudFByb3ZpZGVyKHN0YXRlKSxcbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHJlbW92ZUFjY291bnQ6IChhZGRyZXNzKSA9PiBkaXNwYXRjaChyZW1vdmVBY2NvdW50KGFkZHJlc3MpKSxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2UoXG4gIHdpdGhNb2RhbFByb3BzLFxuICBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKSxcbikoQ29uZmlybVJlbW92ZUFjY291bnQpO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vY29uZmlybS1yZW1vdmUtYWNjb3VudC5jb250YWluZXInO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IE1vZGFsLCB7IE1vZGFsQ29udGVudCB9IGZyb20gJy4uLy4uL21vZGFsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29uZmlybVJlc2V0QWNjb3VudCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGhpZGVNb2RhbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICByZXNldEFjY291bnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICB0OiBQcm9wVHlwZXMuZnVuYyxcbiAgfTtcblxuICBoYW5kbGVSZXNldCA9ICgpID0+IHtcbiAgICB0aGlzLnByb3BzLnJlc2V0QWNjb3VudCgpLnRoZW4oKCkgPT4gdGhpcy5wcm9wcy5oaWRlTW9kYWwoKSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxNb2RhbFxuICAgICAgICBvblN1Ym1pdD17dGhpcy5oYW5kbGVSZXNldH1cbiAgICAgICAgb25DYW5jZWw9eygpID0+IHRoaXMucHJvcHMuaGlkZU1vZGFsKCl9XG4gICAgICAgIHN1Ym1pdFRleHQ9e3QoJ2NsZWFyJyl9XG4gICAgICAgIGNhbmNlbFRleHQ9e3QoJ25ldmVybWluZCcpfVxuICAgICAgICBzdWJtaXRUeXBlPVwiZGFuZ2VyLXByaW1hcnlcIlxuICAgICAgPlxuICAgICAgICA8TW9kYWxDb250ZW50XG4gICAgICAgICAgdGl0bGU9e2Ake3QoJ2NsZWFyQWN0aXZpdHknKX0/YH1cbiAgICAgICAgICBkZXNjcmlwdGlvbj17dCgnY2xlYXJBY3Rpdml0eURlc2NyaXB0aW9uJyl9XG4gICAgICAgIC8+XG4gICAgICA8L01vZGFsPlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHdpdGhNb2RhbFByb3BzIGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvaGlnaGVyLW9yZGVyLWNvbXBvbmVudHMvd2l0aC1tb2RhbC1wcm9wcyc7XG5pbXBvcnQgeyByZXNldEFjY291bnQgfSBmcm9tICcuLi8uLi8uLi8uLi9zdG9yZS9hY3Rpb25zJztcbmltcG9ydCBDb25maXJtUmVzZXRBY2NvdW50IGZyb20gJy4vY29uZmlybS1yZXNldC1hY2NvdW50LmNvbXBvbmVudCc7XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHJlc2V0QWNjb3VudDogKCkgPT4gZGlzcGF0Y2gocmVzZXRBY2NvdW50KCkpLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZShcbiAgd2l0aE1vZGFsUHJvcHMsXG4gIGNvbm5lY3QobnVsbCwgbWFwRGlzcGF0Y2hUb1Byb3BzKSxcbikoQ29uZmlybVJlc2V0QWNjb3VudCk7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9jb25maXJtLXJlc2V0LWFjY291bnQuY29udGFpbmVyJztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0QWNjb3VudExpbmsgfSBmcm9tICdAbWV0YW1hc2svZXRoZXJzY2FuLWxpbmsnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgQm94IGZyb20gJy4uLy4uLy4uL3VpL2JveCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uLy4uL3VpL2J1dHRvbi9idXR0b24uY29tcG9uZW50JztcbmltcG9ydCBUb29sdGlwIGZyb20gJy4uLy4uLy4uL3VpL3Rvb2x0aXAvdG9vbHRpcCc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCBJZGVudGljb24gZnJvbSAnLi4vLi4vLi4vdWkvaWRlbnRpY29uJztcbmltcG9ydCB7IGVsbGlwc2lmeSB9IGZyb20gJy4uLy4uLy4uLy4uL3BhZ2VzL3NlbmQvc2VuZC51dGlscyc7XG5pbXBvcnQgUG9wb3ZlciBmcm9tICcuLi8uLi8uLi91aS9wb3BvdmVyJztcbmltcG9ydCB7XG4gIEZvbnRXZWlnaHQsXG4gIFRleHRWYXJpYW50LFxuICBESVNQTEFZLFxuICBTaXplLFxuICBCb3JkZXJTdHlsZSxcbiAgQm9yZGVyQ29sb3IsXG4gIFRleHRDb2xvcixcbiAgQ29sb3IsXG4gIEFsaWduSXRlbXMsXG59IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgdXNlQ29weVRvQ2xpcGJvYXJkIH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlQ29weVRvQ2xpcGJvYXJkJztcbmltcG9ydCB7IGdldEFkZHJlc3NCb29rRW50cnkgfSBmcm9tICcuLi8uLi8uLi8uLi9zZWxlY3RvcnMnO1xuaW1wb3J0IHsgVG9rZW5TdGFuZGFyZCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdHJhbnNhY3Rpb24nO1xuaW1wb3J0IE5mdENvbGxlY3Rpb25JbWFnZSBmcm9tICcuLi8uLi8uLi91aS9uZnQtY29sbGVjdGlvbi1pbWFnZS9uZnQtY29sbGVjdGlvbi1pbWFnZSc7XG5pbXBvcnQgeyBCdXR0b25JY29uLCBJY29uTmFtZSwgVGV4dCB9IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29udHJhY3REZXRhaWxzTW9kYWwoe1xuICBvbkNsb3NlLFxuICB0b2tlbk5hbWUsXG4gIHRva2VuQWRkcmVzcyxcbiAgdG9BZGRyZXNzLFxuICBjaGFpbklkLFxuICBycGNQcmVmcyxcbiAgdG9rZW5JZCxcbiAgYXNzZXROYW1lLFxuICBhc3NldFN0YW5kYXJkLFxuICBpc0NvbnRyYWN0UmVxdWVzdGluZ1NpZ25hdHVyZSxcbn0pIHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IFtjb3BpZWRUb2tlbkFkZHJlc3MsIGhhbmRsZUNvcHlUb2tlbkFkZHJlc3NdID0gdXNlQ29weVRvQ2xpcGJvYXJkKCk7XG4gIGNvbnN0IFtjb3BpZWRUb0FkZHJlc3MsIGhhbmRsZUNvcHlUb0FkZHJlc3NdID0gdXNlQ29weVRvQ2xpcGJvYXJkKCk7XG5cbiAgY29uc3QgYWRkcmVzc0Jvb2tFbnRyeSA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4gKHtcbiAgICBkYXRhOiBnZXRBZGRyZXNzQm9va0VudHJ5KHN0YXRlLCB0b0FkZHJlc3MpLFxuICB9KSk7XG4gIGNvbnN0IG5mdCA9XG4gICAgYXNzZXRTdGFuZGFyZCA9PT0gVG9rZW5TdGFuZGFyZC5FUkM3MjEgfHxcbiAgICBhc3NldFN0YW5kYXJkID09PSBUb2tlblN0YW5kYXJkLkVSQzExNTUgfHxcbiAgICAvLyBpZiB3ZSBkb24ndCBoYXZlIGFuIGFzc2V0IHN0YW5kYXJkIGJ1dCB3ZSBkbyBoYXZlIGVpdGhlciBib3RoIGFuIGFzc2V0bmFtZSBhbmQgYSB0b2tlbklEIG9yIGJvdGggYSB0b2tlbk5hbWUgYW5kIHRva2VuSWQgd2UgYXNzdW1lIGl0cyBhbiBORlRcbiAgICAoYXNzZXROYW1lICYmIHRva2VuSWQpIHx8XG4gICAgKHRva2VuTmFtZSAmJiB0b2tlbklkKTtcblxuICByZXR1cm4gKFxuICAgIDxQb3BvdmVyIGNsYXNzTmFtZT1cImNvbnRyYWN0LWRldGFpbHMtbW9kYWxcIj5cbiAgICAgIDxCb3hcbiAgICAgICAgcGFkZGluZ1RvcD17Nn1cbiAgICAgICAgcGFkZGluZ1JpZ2h0PXs0fVxuICAgICAgICBwYWRkaW5nQm90dG9tPXs4fVxuICAgICAgICBwYWRkaW5nTGVmdD17NH1cbiAgICAgICAgY2xhc3NOYW1lPVwiY29udHJhY3QtZGV0YWlscy1tb2RhbF9fY29udGVudFwiXG4gICAgICA+XG4gICAgICAgIDxUZXh0XG4gICAgICAgICAgZm9udFdlaWdodD17Rm9udFdlaWdodC5Cb2xkfVxuICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlNZH1cbiAgICAgICAgICBhcz1cImg1XCJcbiAgICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgICAgYm94UHJvcHM9e3sgbWFyZ2luVG9wOiAwLCBtYXJnaW5Cb3R0b206IDAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0KCdjb250cmFjdFRpdGxlJyl9XG4gICAgICAgIDwvVGV4dD5cbiAgICAgICAgPFRleHRcbiAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219XG4gICAgICAgICAgYXM9XCJoNlwiXG4gICAgICAgICAgZGlzcGxheT17RElTUExBWS5GTEVYfVxuICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IudGV4dEFsdGVybmF0aXZlfVxuICAgICAgICAgIGJveFByb3BzPXt7IG1hcmdpblRvcDogMiwgbWFyZ2luQm90dG9tOiAwIH19XG4gICAgICAgID5cbiAgICAgICAgICB7dCgnY29udHJhY3REZXNjcmlwdGlvbicpfVxuICAgICAgICA8L1RleHQ+XG4gICAgICAgIHshaXNDb250cmFjdFJlcXVlc3RpbmdTaWduYXR1cmUgJiYgKFxuICAgICAgICAgIDw+XG4gICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219XG4gICAgICAgICAgICAgIGFzPVwiaDZcIlxuICAgICAgICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgICAgICAgIG1hcmdpblRvcD17NH1cbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tPXsyfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7bmZ0ID8gdCgnY29udHJhY3RORlQnKSA6IHQoJ2NvbnRyYWN0VG9rZW4nKX1cbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgZGlzcGxheT17RElTUExBWS5GTEVYfVxuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM9e1NpemUuU019XG4gICAgICAgICAgICAgIGJvcmRlclN0eWxlPXtCb3JkZXJTdHlsZS5zb2xpZH1cbiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I9e0JvcmRlckNvbG9yLmJvcmRlckRlZmF1bHR9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNvbnRyYWN0LWRldGFpbHMtbW9kYWxfX2NvbnRlbnRfX2NvbnRyYWN0XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge25mdCA/IChcbiAgICAgICAgICAgICAgICA8Qm94IG1hcmdpbj17NH0+XG4gICAgICAgICAgICAgICAgICA8TmZ0Q29sbGVjdGlvbkltYWdlXG4gICAgICAgICAgICAgICAgICAgIGFzc2V0TmFtZT17YXNzZXROYW1lfVxuICAgICAgICAgICAgICAgICAgICB0b2tlbkFkZHJlc3M9e3Rva2VuQWRkcmVzc31cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPElkZW50aWNvblxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29udHJhY3QtZGV0YWlscy1tb2RhbF9fY29udGVudF9fY29udHJhY3RfX2lkZW50aWNvblwiXG4gICAgICAgICAgICAgICAgICBhZGRyZXNzPXt0b2tlbkFkZHJlc3N9XG4gICAgICAgICAgICAgICAgICBkaWFtZXRlcj17MjR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPEJveCBkYXRhLXRlc3RpZD1cInJlY2lwaWVudFwiPlxuICAgICAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgICAgICBmb250V2VpZ2h0PXtGb250V2VpZ2h0LkJvbGR9XG4gICAgICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5TWR9XG4gICAgICAgICAgICAgICAgICBhcz1cImg1XCJcbiAgICAgICAgICAgICAgICAgIG1hcmdpblRvcD17NH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7dG9rZW5OYW1lIHx8IGVsbGlwc2lmeSh0b2tlbkFkZHJlc3MpfVxuICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICB7dG9rZW5OYW1lICYmIChcbiAgICAgICAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICAgICAgICAgICAgYXM9XCJoNlwiXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgICAgICAgICAgICAgICAgY29sb3I9e1RleHRDb2xvci50ZXh0QWx0ZXJuYXRpdmV9XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpblRvcD17MH1cbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tPXs0fVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7ZWxsaXBzaWZ5KHRva2VuQWRkcmVzcyl9XG4gICAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zPXtBbGlnbkl0ZW1zLmNlbnRlcn1cbiAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0PVwiYXV0b1wiXG4gICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ9ezR9XG4gICAgICAgICAgICAgICAgZ2FwPXsyfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPFRvb2x0aXBcbiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uPVwidG9wXCJcbiAgICAgICAgICAgICAgICAgIHRpdGxlPXtcbiAgICAgICAgICAgICAgICAgICAgY29waWVkVG9rZW5BZGRyZXNzXG4gICAgICAgICAgICAgICAgICAgICAgPyB0KCdjb3BpZWRFeGNsYW1hdGlvbicpXG4gICAgICAgICAgICAgICAgICAgICAgOiB0KCdjb3B5VG9DbGlwYm9hcmQnKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxCdXR0b25JY29uXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgICAgICAgICAgICAgICAgaWNvbk5hbWU9e1xuICAgICAgICAgICAgICAgICAgICAgIGNvcGllZFRva2VuQWRkcmVzcyA/IEljb25OYW1lLkNvcHlTdWNjZXNzIDogSWNvbk5hbWUuQ29weVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUNvcHlUb2tlbkFkZHJlc3ModG9rZW5BZGRyZXNzKX1cbiAgICAgICAgICAgICAgICAgICAgY29sb3I9e0NvbG9yLmljb25NdXRlZH1cbiAgICAgICAgICAgICAgICAgICAgYXJpYUxhYmVsPXtcbiAgICAgICAgICAgICAgICAgICAgICBjb3BpZWRUb2tlbkFkZHJlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdCgnY29waWVkRXhjbGFtYXRpb24nKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0KCdjb3B5VG9DbGlwYm9hcmQnKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAgICAgICAgICA8VG9vbHRpcCBwb3NpdGlvbj1cInRvcFwiIHRpdGxlPXt0KCdvcGVuSW5CbG9ja0V4cGxvcmVyJyl9PlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbkljb25cbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheT17RElTUExBWS5GTEVYfVxuICAgICAgICAgICAgICAgICAgICBpY29uTmFtZT17SWNvbk5hbWUuRXhwb3J0fVxuICAgICAgICAgICAgICAgICAgICBjb2xvcj17Q29sb3IuaWNvbk11dGVkfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmxvY2tFeHBsb3JlclRva2VuTGluayA9IGdldEFjY291bnRMaW5rKFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5BZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhaW5JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tFeHBsb3JlclVybDogcnBjUHJlZnM/LmJsb2NrRXhwbG9yZXJVcmwgPz8gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLnBsYXRmb3JtLm9wZW5UYWIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBibG9ja0V4cGxvcmVyVG9rZW5MaW5rLFxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICBhcmlhTGFiZWw9e3QoJ29wZW5JbkJsb2NrRXhwbG9yZXInKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDwvPlxuICAgICAgICApfVxuICAgICAgICA8VGV4dFxuICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgICAgbWFyZ2luVG9wPXs0fVxuICAgICAgICAgIG1hcmdpbkJvdHRvbT17Mn1cbiAgICAgICAgPlxuICAgICAgICAgIHtuZnQgJiYgdCgnY29udHJhY3RSZXF1ZXN0aW5nQWNjZXNzJyl9XG4gICAgICAgICAge2lzQ29udHJhY3RSZXF1ZXN0aW5nU2lnbmF0dXJlICYmIHQoJ2NvbnRyYWN0UmVxdWVzdGluZ1NpZ25hdHVyZScpfVxuICAgICAgICAgIHshbmZ0ICYmXG4gICAgICAgICAgICAhaXNDb250cmFjdFJlcXVlc3RpbmdTaWduYXR1cmUgJiZcbiAgICAgICAgICAgIHQoJ2NvbnRyYWN0UmVxdWVzdGluZ1NwZW5kaW5nQ2FwJyl9XG4gICAgICAgIDwvVGV4dD5cbiAgICAgICAgPEJveFxuICAgICAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgICAgICBib3JkZXJSYWRpdXM9e1NpemUuU019XG4gICAgICAgICAgYm9yZGVyU3R5bGU9e0JvcmRlclN0eWxlLnNvbGlkfVxuICAgICAgICAgIGJvcmRlckNvbG9yPXtCb3JkZXJDb2xvci5ib3JkZXJEZWZhdWx0fVxuICAgICAgICAgIGNsYXNzTmFtZT1cImNvbnRyYWN0LWRldGFpbHMtbW9kYWxfX2NvbnRlbnRfX2NvbnRyYWN0XCJcbiAgICAgICAgPlxuICAgICAgICAgIDxJZGVudGljb25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNvbnRyYWN0LWRldGFpbHMtbW9kYWxfX2NvbnRlbnRfX2NvbnRyYWN0X19pZGVudGljb25cIlxuICAgICAgICAgICAgZGlhbWV0ZXI9ezI0fVxuICAgICAgICAgICAgYWRkcmVzcz17dG9BZGRyZXNzfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPEJveCBkYXRhLXRlc3RpZD1cInJlY2lwaWVudFwiPlxuICAgICAgICAgICAgPFRleHRcbiAgICAgICAgICAgICAgZm9udFdlaWdodD17Rm9udFdlaWdodC5Cb2xkfVxuICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5TWR9XG4gICAgICAgICAgICAgIGFzPVwiaDVcIlxuICAgICAgICAgICAgICBtYXJnaW5Ub3A9ezR9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHthZGRyZXNzQm9va0VudHJ5Py5kYXRhPy5uYW1lIHx8IGVsbGlwc2lmeSh0b0FkZHJlc3MpfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAge2FkZHJlc3NCb29rRW50cnk/LmRhdGE/Lm5hbWUgJiYgKFxuICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgICAgICAgICAgY29sb3I9e1RleHRDb2xvci50ZXh0QWx0ZXJuYXRpdmV9XG4gICAgICAgICAgICAgICAgbWFyZ2luVG9wPXswfVxuICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbT17NH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtlbGxpcHNpZnkodG9BZGRyZXNzKX1cbiAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8Qm94XG4gICAgICAgICAgICBhbGlnbkl0ZW1zPXtBbGlnbkl0ZW1zLmNlbnRlcn1cbiAgICAgICAgICAgIG1hcmdpbkxlZnQ9XCJhdXRvXCJcbiAgICAgICAgICAgIG1hcmdpblJpZ2h0PXs0fVxuICAgICAgICAgICAgZ2FwPXsyfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxUb29sdGlwXG4gICAgICAgICAgICAgIHBvc2l0aW9uPVwidG9wXCJcbiAgICAgICAgICAgICAgdGl0bGU9e1xuICAgICAgICAgICAgICAgIGNvcGllZFRvQWRkcmVzcyA/IHQoJ2NvcGllZEV4Y2xhbWF0aW9uJykgOiB0KCdjb3B5VG9DbGlwYm9hcmQnKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxCdXR0b25JY29uXG4gICAgICAgICAgICAgICAgZGlzcGxheT17RElTUExBWS5GTEVYfVxuICAgICAgICAgICAgICAgIGljb25OYW1lPXtcbiAgICAgICAgICAgICAgICAgIGNvcGllZFRvQWRkcmVzcyA/IEljb25OYW1lLkNvcHlTdWNjZXNzIDogSWNvbk5hbWUuQ29weVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVDb3B5VG9BZGRyZXNzKHRvQWRkcmVzcyl9XG4gICAgICAgICAgICAgICAgY29sb3I9e0NvbG9yLmljb25NdXRlZH1cbiAgICAgICAgICAgICAgICBhcmlhTGFiZWw9e1xuICAgICAgICAgICAgICAgICAgY29waWVkVG9rZW5BZGRyZXNzXG4gICAgICAgICAgICAgICAgICAgID8gdCgnY29waWVkRXhjbGFtYXRpb24nKVxuICAgICAgICAgICAgICAgICAgICA6IHQoJ2NvcHlUb0NsaXBib2FyZCcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgPFRvb2x0aXAgcG9zaXRpb249XCJ0b3BcIiB0aXRsZT17dCgnb3BlbkluQmxvY2tFeHBsb3JlcicpfT5cbiAgICAgICAgICAgICAgPEJ1dHRvbkljb25cbiAgICAgICAgICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgICAgICAgICAgaWNvbk5hbWU9e0ljb25OYW1lLkV4cG9ydH1cbiAgICAgICAgICAgICAgICBjb2xvcj17Q29sb3IuaWNvbk11dGVkfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrRXhwbG9yZXJUb2tlbkxpbmsgPSBnZXRBY2NvdW50TGluayhcbiAgICAgICAgICAgICAgICAgICAgdG9BZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICBjaGFpbklkLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgYmxvY2tFeHBsb3JlclVybDogcnBjUHJlZnM/LmJsb2NrRXhwbG9yZXJVcmwgPz8gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBnbG9iYWwucGxhdGZvcm0ub3BlblRhYih7XG4gICAgICAgICAgICAgICAgICAgIHVybDogYmxvY2tFeHBsb3JlclRva2VuTGluayxcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgYXJpYUxhYmVsPXt0KCdvcGVuSW5CbG9ja0V4cGxvcmVyJyl9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgIDwvQm94PlxuICAgICAgPC9Cb3g+XG4gICAgICA8Qm94XG4gICAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgICAgcGFkZGluZ1RvcD17Nn1cbiAgICAgICAgcGFkZGluZ1JpZ2h0PXs0fVxuICAgICAgICBwYWRkaW5nQm90dG9tPXs2fVxuICAgICAgICBwYWRkaW5nTGVmdD17NH1cbiAgICAgID5cbiAgICAgICAgPEJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIG9uQ2xpY2s9eygpID0+IG9uQ2xvc2UoKX0+XG4gICAgICAgICAge3QoJ3JlY292ZXJ5UGhyYXNlUmVtaW5kZXJDb25maXJtJyl9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9Cb3g+XG4gICAgPC9Qb3BvdmVyPlxuICApO1xufVxuXG5Db250cmFjdERldGFpbHNNb2RhbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0aGF0IHNob3VsZCBjbG9zZSB0aGUgbW9kYWxcbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogTmFtZSBvZiB0aGUgdG9rZW4gdGhhdCBpcyB3YWl0aW5nIHRvIGJlIGFsbG93ZWRcbiAgICovXG4gIHRva2VuTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEFkZHJlc3Mgb2YgdGhlIHRva2VuIHRoYXQgaXMgd2FpdGluZyB0byBiZSBhbGxvd2VkXG4gICAqL1xuICB0b2tlbkFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBDb250cmFjdCBhZGRyZXNzIHJlcXVlc3Rpbmcgc3BlbmRpbmcgY2FwXG4gICAqL1xuICB0b0FkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBDdXJyZW50IG5ldHdvcmsgY2hhaW5JZFxuICAgKi9cbiAgY2hhaW5JZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFJQQyBwcmVmcyBvZiB0aGUgY3VycmVudCBuZXR3b3JrXG4gICAqL1xuICBycGNQcmVmczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSB0b2tlbiBpZCBvZiB0aGUgTkZUXG4gICAqL1xuICB0b2tlbklkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVG9rZW4gU3RhbmRhcmRcbiAgICovXG4gIGFzc2V0U3RhbmRhcmQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgY29sbGVjdGlvblxuICAgKi9cbiAgYXNzZXROYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogV2hldGhlciBjb250cmFjdCByZXF1ZXN0aW5nIHNpZ25hdHVyZSBmbG93IGhhcyBzdGFydGVkXG4gICAqL1xuICBpc0NvbnRyYWN0UmVxdWVzdGluZ1NpZ25hdHVyZTogUHJvcFR5cGVzLmJvb2wsXG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vbW9kYWwnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vLi4vLi4vdWkvdHlwb2dyYXBoeSc7XG5pbXBvcnQgeyBUeXBvZ3JhcGh5VmFyaWFudCB9IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHdpdGhNb2RhbFByb3BzIGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvaGlnaGVyLW9yZGVyLWNvbXBvbmVudHMvd2l0aC1tb2RhbC1wcm9wcyc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7XG4gIEFERF9ORlRfUk9VVEUsXG4gIEFTU0VUX1JPVVRFLFxufSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9yb3V0ZXMnO1xuaW1wb3J0IHsgZ2V0TmZ0cyB9IGZyb20gJy4uLy4uLy4uLy4uL2R1Y2tzL21ldGFtYXNrL21ldGFtYXNrJztcbmltcG9ydCB7IGlnbm9yZVRva2VucyB9IGZyb20gJy4uLy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IHsgaXNFcXVhbENhc2VJbnNlbnNpdGl2ZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL3N0cmluZy11dGlscyc7XG5cbmNvbnN0IENvbnZlcnRUb2tlblRvTkZUTW9kYWwgPSAoeyBoaWRlTW9kYWwsIHRva2VuQWRkcmVzcyB9KSA9PiB7XG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IGFsbE5mdHMgPSB1c2VTZWxlY3RvcihnZXROZnRzKTtcbiAgY29uc3QgdG9rZW5BZGRlZEFzTkZUID0gYWxsTmZ0cy5maW5kKCh7IGFkZHJlc3MgfSkgPT5cbiAgICBpc0VxdWFsQ2FzZUluc2Vuc2l0aXZlKGFkZHJlc3MsIHRva2VuQWRkcmVzcyksXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8TW9kYWxcbiAgICAgIG9uU3VibWl0PXthc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICh0b2tlbkFkZGVkQXNORlQpIHtcbiAgICAgICAgICBhd2FpdCBkaXNwYXRjaChcbiAgICAgICAgICAgIGlnbm9yZVRva2Vucyh7XG4gICAgICAgICAgICAgIHRva2Vuc1RvSWdub3JlOiB0b2tlbkFkZHJlc3MsXG4gICAgICAgICAgICAgIGRvbnRTaG93TG9hZGluZ0luZGljYXRvcjogdHJ1ZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgeyB0b2tlbklkIH0gPSB0b2tlbkFkZGVkQXNORlQ7XG4gICAgICAgICAgaGlzdG9yeS5wdXNoKHtcbiAgICAgICAgICAgIHBhdGhuYW1lOiBgJHtBU1NFVF9ST1VURX0vJHt0b2tlbkFkZHJlc3N9LyR7dG9rZW5JZH1gLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpc3RvcnkucHVzaCh7XG4gICAgICAgICAgICBwYXRobmFtZTogQUREX05GVF9ST1VURSxcbiAgICAgICAgICAgIHN0YXRlOiB7IHRva2VuQWRkcmVzcyB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGhpZGVNb2RhbCgpO1xuICAgICAgfX1cbiAgICAgIHN1Ym1pdFRleHQ9e3QoJ3llcycpfVxuICAgICAgb25DYW5jZWw9eygpID0+IGhpZGVNb2RhbCgpfVxuICAgICAgY2FuY2VsVGV4dD17dCgnY2FuY2VsJyl9XG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb252ZXJ0LXRva2VuLXRvLW5mdC1tb2RhbFwiPlxuICAgICAgICA8VHlwb2dyYXBoeVxuICAgICAgICAgIHZhcmlhbnQ9e1R5cG9ncmFwaHlWYXJpYW50Lkg2fVxuICAgICAgICAgIGJveFByb3BzPXt7XG4gICAgICAgICAgICBtYXJnaW5Ub3A6IDIsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0b2tlbkFkZGVkQXNORlRcbiAgICAgICAgICAgID8gdCgnY29udmVydFRva2VuVG9ORlRFeGlzdERlc2NyaXB0aW9uJylcbiAgICAgICAgICAgIDogdCgnY29udmVydFRva2VuVG9ORlREZXNjcmlwdGlvbicpfVxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICA8L2Rpdj5cbiAgICA8L01vZGFsPlxuICApO1xufTtcblxuQ29udmVydFRva2VuVG9ORlRNb2RhbC5wcm9wVHlwZXMgPSB7XG4gIGhpZGVNb2RhbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdG9rZW5BZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aE1vZGFsUHJvcHMoQ29udmVydFRva2VuVG9ORlRNb2RhbCk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uLy4uL21vZGFsJztcbmltcG9ydCBUZXh0RmllbGQgZnJvbSAnLi4vLi4vLi4vdWkvdGV4dC1maWVsZCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uLy4uL3VpL2J1dHRvbic7XG5pbXBvcnQge1xuICBUZXh0VmFyaWFudCxcbiAgRm9udFdlaWdodCxcbiAgQWxpZ25JdGVtcyxcbiAgQkxPQ0tfU0laRVMsXG4gIERJU1BMQVksXG59IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IEJveCBmcm9tICcuLi8uLi8uLi91aS9ib3gnO1xuaW1wb3J0IHdpdGhNb2RhbFByb3BzIGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvaGlnaGVyLW9yZGVyLWNvbXBvbmVudHMvd2l0aC1tb2RhbC1wcm9wcyc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCBaRU5ERVNLX1VSTFMgZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvemVuZGVzay11cmwnO1xuaW1wb3J0IHtcbiAgQnV0dG9uSWNvbixcbiAgQnV0dG9uSWNvblNpemUsXG4gIEljb25OYW1lLFxuICBUZXh0LFxufSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5cbmNvbnN0IEN1c3RvbWl6ZU5vbmNlID0gKHtcbiAgaGlkZU1vZGFsLFxuICBjdXN0b21Ob25jZVZhbHVlLFxuICBuZXh0Tm9uY2UsXG4gIHVwZGF0ZUN1c3RvbU5vbmNlLFxuICBnZXROZXh0Tm9uY2UsXG59KSA9PiB7XG4gIGNvbnN0IFtjdXN0b21Ob25jZSwgc2V0Q3VzdG9tTm9uY2VdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcblxuICByZXR1cm4gKFxuICAgIDxNb2RhbFxuICAgICAgb25TdWJtaXQ9eygpID0+IHtcbiAgICAgICAgaWYgKGN1c3RvbU5vbmNlID09PSAnJykge1xuICAgICAgICAgIHVwZGF0ZUN1c3RvbU5vbmNlKGN1c3RvbU5vbmNlVmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwZGF0ZUN1c3RvbU5vbmNlKGN1c3RvbU5vbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBnZXROZXh0Tm9uY2UoKTtcbiAgICAgICAgaGlkZU1vZGFsKCk7XG4gICAgICB9fVxuICAgICAgc3VibWl0VGV4dD17dCgnc2F2ZScpfVxuICAgICAgb25DYW5jZWw9eygpID0+IGhpZGVNb2RhbCgpfVxuICAgICAgY2FuY2VsVGV4dD17dCgnY2FuY2VsJyl9XG4gICAgICBjb250ZW50Q2xhc3M9XCJjdXN0b21pemUtbm9uY2UtbW9kYWwtY29udGVudFwiXG4gICAgICBjb250YWluZXJDbGFzcz1cImN1c3RvbWl6ZS1ub25jZS1tb2RhbC1jb250YWluZXJcIlxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3VzdG9taXplLW5vbmNlLW1vZGFsXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY3VzdG9taXplLW5vbmNlLW1vZGFsX19tYWluLWhlYWRlclwiPlxuICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJjdXN0b21pemUtbm9uY2UtbW9kYWxfX21haW4tdGl0bGVcIlxuICAgICAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuaGVhZGluZ1NtfVxuICAgICAgICAgICAgYXM9XCJoNFwiXG4gICAgICAgICAgICBmb250V2VpZ2h0PXtGb250V2VpZ2h0LkJvbGR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3QoJ2VkaXROb25jZUZpZWxkJyl9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIDxCdXR0b25JY29uXG4gICAgICAgICAgICBpY29uTmFtZT17SWNvbk5hbWUuQ2xvc2V9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJjdXN0b21pemUtbm9uY2UtbW9kYWxfX2Nsb3NlXCJcbiAgICAgICAgICAgIHNpemU9e0J1dHRvbkljb25TaXplLlNtfVxuICAgICAgICAgICAgYXJpYUxhYmVsPXt0KCdjbG9zZScpfVxuICAgICAgICAgICAgb25DbGljaz17aGlkZU1vZGFsfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Qm94XG4gICAgICAgICAgbWFyZ2luVG9wPXsyfVxuICAgICAgICAgIGRpc3BsYXk9e0RJU1BMQVkuSU5MSU5FX0ZMRVh9XG4gICAgICAgICAgYWxpZ25JdGVtcz17QWxpZ25JdGVtcy5jZW50ZXJ9XG4gICAgICAgID5cbiAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtfVxuICAgICAgICAgICAgYXM9XCJoNlwiXG4gICAgICAgICAgICBmb250V2VpZ2h0PXtGb250V2VpZ2h0Lk5vcm1hbH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dCgnZWRpdE5vbmNlTWVzc2FnZScpfVxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwibGlua1wiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImN1c3RvbWl6ZS1ub25jZS1tb2RhbF9fbGlua1wiXG4gICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICBocmVmPXtaRU5ERVNLX1VSTFMuQ1VTVE9NSVpFX05PTkNFfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dCgnbGVhcm5Nb3JlVXBwZXJDYXNlJyl9XG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgIDwvQm94PlxuICAgICAgICA8Qm94IG1hcmdpblRvcD17M30+XG4gICAgICAgICAgPEJveCBhbGlnbkl0ZW1zPXtBbGlnbkl0ZW1zLmNlbnRlcn0gZGlzcGxheT17RElTUExBWS5GTEVYfT5cbiAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICAgICAgYXM9XCJoNlwiXG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ9e0ZvbnRXZWlnaHQuQm9sZH1cbiAgICAgICAgICAgICAgYm94UHJvcHM9e3sgd2lkdGg6IEJMT0NLX1NJWkVTLkZJVkVfU0lYVEhTIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0KCdlZGl0Tm9uY2VGaWVsZCcpfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPEJveCB3aWR0aD17QkxPQ0tfU0laRVMuT05FX1NJWFRIfT5cbiAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIHR5cGU9XCJsaW5rXCJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjdXN0b21pemUtbm9uY2UtbW9kYWxfX3Jlc2V0XCJcbiAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImN1c3RvbWl6ZS1ub25jZS1yZXNldFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgc2V0Q3VzdG9tTm9uY2UobmV4dE5vbmNlKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3QoJ3Jlc2V0Jyl9XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjdXN0b21pemUtbm9uY2UtbW9kYWxfX2lucHV0XCI+XG4gICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImN1c3RvbS1ub25jZS1pbnB1dFwiXG4gICAgICAgICAgICAgIG1pbj1cIjBcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17XG4gICAgICAgICAgICAgICAgY3VzdG9tTm9uY2VWYWx1ZSB8fFxuICAgICAgICAgICAgICAgICh0eXBlb2YgbmV4dE5vbmNlID09PSAnbnVtYmVyJyAmJiBuZXh0Tm9uY2UudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRDdXN0b21Ob25jZShlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICBtYXJnaW49XCJkZW5zZVwiXG4gICAgICAgICAgICAgIHZhbHVlPXtjdXN0b21Ob25jZX1cbiAgICAgICAgICAgICAgaWQ9XCJjdXN0b20tbm9uY2UtaWRcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Cb3g+XG4gICAgICA8L2Rpdj5cbiAgICA8L01vZGFsPlxuICApO1xufTtcblxuQ3VzdG9taXplTm9uY2UucHJvcFR5cGVzID0ge1xuICBoaWRlTW9kYWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGN1c3RvbU5vbmNlVmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG5leHROb25jZTogUHJvcFR5cGVzLm51bWJlcixcbiAgdXBkYXRlQ3VzdG9tTm9uY2U6IFByb3BUeXBlcy5mdW5jLFxuICBnZXROZXh0Tm9uY2U6IFByb3BUeXBlcy5mdW5jLFxufTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhNb2RhbFByb3BzKEN1c3RvbWl6ZU5vbmNlKTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL2N1c3RvbWl6ZS1ub25jZS5jb21wb25lbnQnO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBCaWdOdW1iZXIgZnJvbSAnYmlnbnVtYmVyLmpzJztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi9tb2RhbCc7XG5pbXBvcnQgSWRlbnRpY29uIGZyb20gJy4uLy4uLy4uL3VpL2lkZW50aWNvbic7XG5pbXBvcnQgVGV4dEZpZWxkIGZyb20gJy4uLy4uLy4uL3VpL3RleHQtZmllbGQnO1xuaW1wb3J0IHtcbiAgY2FsY1Rva2VuQW1vdW50LFxuICB0b1ByZWNpc2lvbldpdGhvdXRUcmFpbGluZ1plcm9zLFxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvbGliL3RyYW5zYWN0aW9ucy1jb250cm9sbGVyLXV0aWxzJztcbmltcG9ydCB7XG4gIEJ1dHRvbkljb24sXG4gIEJ1dHRvbkljb25TaXplLFxuICBJY29uTmFtZSxcbn0gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50LWxpYnJhcnknO1xuXG5jb25zdCBNQVhfVU5TSUdORURfMjU2X0lOVCA9IG5ldyBCaWdOdW1iZXIoMikucG93KDI1NikubWludXMoMSkudG9TdHJpbmcoMTApO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFZGl0QXBwcm92YWxQZXJtaXNzaW9uIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZGVjaW1hbHM6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgaGlkZU1vZGFsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNlbGVjdGVkSWRlbnRpdHk6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgdG9rZW5BbW91bnQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY3VzdG9tVG9rZW5BbW91bnQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG9rZW5TeW1ib2w6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG9rZW5CYWxhbmNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHNldEN1c3RvbUFtb3VudDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb3JpZ2luOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgcmVxdWlyZWRNaW5pbXVtOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihCaWdOdW1iZXIpLFxuICB9O1xuXG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG4gICAgdDogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgLy8gVGhpcyBpcyB1c2VkIGFzIGEgVGV4dEZpZWxkIHZhbHVlLCB3aGljaCBzaG91bGQgYmUgYSBzdHJpbmcuXG4gICAgY3VzdG9tU3BlbmRMaW1pdDogdGhpcy5wcm9wcy5jdXN0b21Ub2tlbkFtb3VudCB8fCAnJyxcbiAgICBzZWxlY3RlZE9wdGlvbklzVW5saW1pdGVkOiAhdGhpcy5wcm9wcy5jdXN0b21Ub2tlbkFtb3VudCxcbiAgfTtcblxuICByZW5kZXJNb2RhbENvbnRlbnQoZXJyb3IpIHtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7XG4gICAgICBoaWRlTW9kYWwsXG4gICAgICBzZWxlY3RlZElkZW50aXR5LFxuICAgICAgdG9rZW5BbW91bnQsXG4gICAgICB0b2tlblN5bWJvbCxcbiAgICAgIHRva2VuQmFsYW5jZSxcbiAgICAgIGN1c3RvbVRva2VuQW1vdW50LFxuICAgICAgb3JpZ2luLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgbmFtZSwgYWRkcmVzcyB9ID0gc2VsZWN0ZWRJZGVudGl0eSB8fCB7fTtcbiAgICBjb25zdCB7IHNlbGVjdGVkT3B0aW9uSXNVbmxpbWl0ZWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWFwcHJvdmFsLXBlcm1pc3Npb25cIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWFwcHJvdmFsLXBlcm1pc3Npb25fX2hlYWRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uX190aXRsZVwiPlxuICAgICAgICAgICAge3QoJ2VkaXRQZXJtaXNzaW9uJyl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPEJ1dHRvbkljb25cbiAgICAgICAgICAgIGljb25OYW1lPXtJY29uTmFtZS5DbG9zZX1cbiAgICAgICAgICAgIHNpemU9e0J1dHRvbkljb25TaXplLkxnfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uX19oZWFkZXJfX2Nsb3NlXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2hpZGVNb2RhbH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWFwcHJvdmFsLXBlcm1pc3Npb25fX2FjY291bnQtaW5mb1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uX19hY2NvdW50LWluZm9fX2FjY291bnRcIj5cbiAgICAgICAgICAgIDxJZGVudGljb24gYWRkcmVzcz17YWRkcmVzc30gZGlhbWV0ZXI9ezMyfSAvPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWFwcHJvdmFsLXBlcm1pc3Npb25fX25hbWUtYW5kLWJhbGFuY2UtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uX19hY2NvdW50LWluZm9fX25hbWVcIj5cbiAgICAgICAgICAgICAgICB7bmFtZX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXY+e3QoJ2JhbGFuY2UnKX08L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uX19hY2NvdW50LWluZm9fX2JhbGFuY2VcIj5cbiAgICAgICAgICAgIHtgJHt0b1ByZWNpc2lvbldpdGhvdXRUcmFpbGluZ1plcm9zKFxuICAgICAgICAgICAgICB0b2tlbkJhbGFuY2UsXG4gICAgICAgICAgICAgIDksXG4gICAgICAgICAgICApfSAke3Rva2VuU3ltYm9sfWB9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtYXBwcm92YWwtcGVybWlzc2lvbl9fZWRpdC1zZWN0aW9uXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWFwcHJvdmFsLXBlcm1pc3Npb25fX2VkaXQtc2VjdGlvbl9fdGl0bGVcIj5cbiAgICAgICAgICAgIHt0KCdzcGVuZExpbWl0UGVybWlzc2lvbicpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uX19lZGl0LXNlY3Rpb25fX2Rlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICB7dCgnYWxsb3dXaXRoZHJhd0FuZFNwZW5kJywgW29yaWdpbl0pfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uX19lZGl0LXNlY3Rpb25fX29wdGlvblwiPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJlZGl0LWFwcHJvdmFsLXBlcm1pc3Npb25fX2VkaXQtc2VjdGlvbl9fcmFkaW8tYnV0dG9uXCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkT3B0aW9uSXNVbmxpbWl0ZWQ6IHRydWUgfSl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoe1xuICAgICAgICAgICAgICAgICAgJ2VkaXQtYXBwcm92YWwtcGVybWlzc2lvbl9fZWRpdC1zZWN0aW9uX19yYWRpby1idXR0b24tb3V0bGluZSc6XG4gICAgICAgICAgICAgICAgICAgICFzZWxlY3RlZE9wdGlvbklzVW5saW1pdGVkLFxuICAgICAgICAgICAgICAgICAgJ2VkaXQtYXBwcm92YWwtcGVybWlzc2lvbl9fZWRpdC1zZWN0aW9uX19yYWRpby1idXR0b24tb3V0bGluZS0tc2VsZWN0ZWQnOlxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbklzVW5saW1pdGVkLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtYXBwcm92YWwtcGVybWlzc2lvbl9fZWRpdC1zZWN0aW9uX19yYWRpby1idXR0b24tZmlsbFwiIC8+XG4gICAgICAgICAgICAgIHtzZWxlY3RlZE9wdGlvbklzVW5saW1pdGVkICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtYXBwcm92YWwtcGVybWlzc2lvbl9fZWRpdC1zZWN0aW9uX19yYWRpby1idXR0b24tZG90XCIgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWFwcHJvdmFsLXBlcm1pc3Npb25fX2VkaXQtc2VjdGlvbl9fb3B0aW9uLXRleHRcIj5cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcyh7XG4gICAgICAgICAgICAgICAgICAnZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uX19lZGl0LXNlY3Rpb25fX29wdGlvbi1sYWJlbCc6XG4gICAgICAgICAgICAgICAgICAgICFzZWxlY3RlZE9wdGlvbklzVW5saW1pdGVkLFxuICAgICAgICAgICAgICAgICAgJ2VkaXQtYXBwcm92YWwtcGVybWlzc2lvbl9fZWRpdC1zZWN0aW9uX19vcHRpb24tbGFiZWwtLXNlbGVjdGVkJzpcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb25Jc1VubGltaXRlZCxcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtuZXcgQmlnTnVtYmVyKHRva2VuQW1vdW50KS5lcXVhbHMoXG4gICAgICAgICAgICAgICAgICBuZXcgQmlnTnVtYmVyKE1BWF9VTlNJR05FRF8yNTZfSU5UKSxcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICA/IHQoJ3VubGltaXRlZCcpXG4gICAgICAgICAgICAgICAgICA6IHQoJ3Byb3Bvc2VkQXBwcm92YWxMaW1pdCcpfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWFwcHJvdmFsLXBlcm1pc3Npb25fX2VkaXQtc2VjdGlvbl9fb3B0aW9uLWRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAge3QoJ3NwZW5kTGltaXRSZXF1ZXN0ZWRCeScsIFtvcmlnaW5dKX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uX19lZGl0LXNlY3Rpb25fX29wdGlvbi12YWx1ZVwiPlxuICAgICAgICAgICAgICAgIHtgJHtOdW1iZXIodG9rZW5BbW91bnQpfSAke3Rva2VuU3ltYm9sfWB9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWFwcHJvdmFsLXBlcm1pc3Npb25fX2VkaXQtc2VjdGlvbl9fb3B0aW9uXCI+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVkaXQtYXBwcm92YWwtcGVybWlzc2lvbl9fZWRpdC1zZWN0aW9uX19yYWRpby1idXR0b25cIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZE9wdGlvbklzVW5saW1pdGVkOiBmYWxzZSB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoe1xuICAgICAgICAgICAgICAgICAgJ2VkaXQtYXBwcm92YWwtcGVybWlzc2lvbl9fZWRpdC1zZWN0aW9uX19yYWRpby1idXR0b24tb3V0bGluZSc6XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uSXNVbmxpbWl0ZWQsXG4gICAgICAgICAgICAgICAgICAnZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uX19lZGl0LXNlY3Rpb25fX3JhZGlvLWJ1dHRvbi1vdXRsaW5lLS1zZWxlY3RlZCc6XG4gICAgICAgICAgICAgICAgICAgICFzZWxlY3RlZE9wdGlvbklzVW5saW1pdGVkLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtYXBwcm92YWwtcGVybWlzc2lvbl9fZWRpdC1zZWN0aW9uX19yYWRpby1idXR0b24tZmlsbFwiIC8+XG4gICAgICAgICAgICAgIHshc2VsZWN0ZWRPcHRpb25Jc1VubGltaXRlZCAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWFwcHJvdmFsLXBlcm1pc3Npb25fX2VkaXQtc2VjdGlvbl9fcmFkaW8tYnV0dG9uLWRvdFwiIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uX19lZGl0LXNlY3Rpb25fX29wdGlvbi10ZXh0XCI+XG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoe1xuICAgICAgICAgICAgICAgICAgJ2VkaXQtYXBwcm92YWwtcGVybWlzc2lvbl9fZWRpdC1zZWN0aW9uX19vcHRpb24tbGFiZWwnOlxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE9wdGlvbklzVW5saW1pdGVkLFxuICAgICAgICAgICAgICAgICAgJ2VkaXQtYXBwcm92YWwtcGVybWlzc2lvbl9fZWRpdC1zZWN0aW9uX19vcHRpb24tbGFiZWwtLXNlbGVjdGVkJzpcbiAgICAgICAgICAgICAgICAgICAgIXNlbGVjdGVkT3B0aW9uSXNVbmxpbWl0ZWQsXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7dCgnY3VzdG9tU3BlbmRMaW1pdCcpfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWFwcHJvdmFsLXBlcm1pc3Npb25fX2VkaXQtc2VjdGlvbl9fb3B0aW9uLWRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAge3QoJ2VudGVyTWF4U3BlbmRMaW1pdCcpfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LWFwcHJvdmFsLXBlcm1pc3Npb25fX2VkaXQtc2VjdGlvbl9fb3B0aW9uLWlucHV0XCI+XG4gICAgICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17YCR7TnVtYmVyKFxuICAgICAgICAgICAgICAgICAgICBjdXN0b21Ub2tlbkFtb3VudCB8fCB0b2tlbkFtb3VudCxcbiAgICAgICAgICAgICAgICAgICl9ICR7dG9rZW5TeW1ib2x9YH1cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGN1c3RvbVNwZW5kTGltaXQ6IGV2ZW50LnRhcmdldC52YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkT3B0aW9uSXNVbmxpbWl0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRPcHRpb25Jc1VubGltaXRlZDogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgICAgICAgIG1hcmdpbj1cImRlbnNlXCJcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmN1c3RvbVNwZW5kTGltaXR9XG4gICAgICAgICAgICAgICAgICBlcnJvcj17ZXJyb3J9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgdmFsaWRhdGVTcGVuZExpbWl0KCkge1xuICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnN0IHsgZGVjaW1hbHMsIHJlcXVpcmVkTWluaW11bSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHNlbGVjdGVkT3B0aW9uSXNVbmxpbWl0ZWQsIGN1c3RvbVNwZW5kTGltaXQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAoc2VsZWN0ZWRPcHRpb25Jc1VubGltaXRlZCB8fCAhY3VzdG9tU3BlbmRMaW1pdCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBsZXQgY3VzdG9tU3BlbmRMaW1pdE51bWJlcjtcbiAgICB0cnkge1xuICAgICAgY3VzdG9tU3BlbmRMaW1pdE51bWJlciA9IG5ldyBCaWdOdW1iZXIoY3VzdG9tU3BlbmRMaW1pdCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgRXJyb3IgY29udmVydGluZyAnJHtjdXN0b21TcGVuZExpbWl0fScgdG8gQmlnTnVtYmVyOmAsIGVycm9yKTtcbiAgICAgIHJldHVybiB0KCdzcGVuZExpbWl0SW52YWxpZCcpO1xuICAgIH1cblxuICAgIGlmIChjdXN0b21TcGVuZExpbWl0TnVtYmVyLmlzTmVnYXRpdmUoKSkge1xuICAgICAgcmV0dXJuIHQoJ3NwZW5kTGltaXRJbnZhbGlkJyk7XG4gICAgfVxuXG4gICAgY29uc3QgbWF4VG9rZW5BbW91bnQgPSBjYWxjVG9rZW5BbW91bnQoTUFYX1VOU0lHTkVEXzI1Nl9JTlQsIGRlY2ltYWxzKTtcbiAgICBpZiAoY3VzdG9tU3BlbmRMaW1pdE51bWJlci5ncmVhdGVyVGhhbihtYXhUb2tlbkFtb3VudCkpIHtcbiAgICAgIHJldHVybiB0KCdzcGVuZExpbWl0VG9vTGFyZ2UnKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICByZXF1aXJlZE1pbmltdW0gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgY3VzdG9tU3BlbmRMaW1pdE51bWJlci5sZXNzVGhhbihyZXF1aXJlZE1pbmltdW0pXG4gICAgKSB7XG4gICAgICByZXR1cm4gdCgnc3BlbmRMaW1pdEluc3VmZmljaWVudCcpO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgY29uc3QgeyBzZXRDdXN0b21BbW91bnQsIGhpZGVNb2RhbCwgY3VzdG9tVG9rZW5BbW91bnQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBzZWxlY3RlZE9wdGlvbklzVW5saW1pdGVkLCBjdXN0b21TcGVuZExpbWl0IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgZXJyb3IgPSB0aGlzLnZhbGlkYXRlU3BlbmRMaW1pdCgpO1xuICAgIGNvbnN0IGRpc2FibGVkID0gQm9vbGVhbihcbiAgICAgIChjdXN0b21TcGVuZExpbWl0ID09PSBjdXN0b21Ub2tlbkFtb3VudCAmJiAhc2VsZWN0ZWRPcHRpb25Jc1VubGltaXRlZCkgfHxcbiAgICAgICAgZXJyb3IsXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8TW9kYWxcbiAgICAgICAgb25TdWJtaXQ9eygpID0+IHtcbiAgICAgICAgICBzZXRDdXN0b21BbW91bnQoc2VsZWN0ZWRPcHRpb25Jc1VubGltaXRlZCA/ICcnIDogY3VzdG9tU3BlbmRMaW1pdCk7XG4gICAgICAgICAgaGlkZU1vZGFsKCk7XG4gICAgICAgIH19XG4gICAgICAgIHN1Ym1pdFRleHQ9e3QoJ3NhdmUnKX1cbiAgICAgICAgY29udGVudENsYXNzPVwiZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uLW1vZGFsLWNvbnRlbnRcIlxuICAgICAgICBjb250YWluZXJDbGFzcz1cImVkaXQtYXBwcm92YWwtcGVybWlzc2lvbi1tb2RhbC1jb250YWluZXJcIlxuICAgICAgICBzdWJtaXREaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICA+XG4gICAgICAgIHt0aGlzLnJlbmRlck1vZGFsQ29udGVudChlcnJvcil9XG4gICAgICA8L01vZGFsPlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHdpdGhNb2RhbFByb3BzIGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvaGlnaGVyLW9yZGVyLWNvbXBvbmVudHMvd2l0aC1tb2RhbC1wcm9wcyc7XG5pbXBvcnQgeyBnZXRTZWxlY3RlZElkZW50aXR5IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VsZWN0b3JzJztcbmltcG9ydCBFZGl0QXBwcm92YWxQZXJtaXNzaW9uIGZyb20gJy4vZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uLmNvbXBvbmVudCc7XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4ge1xuICBjb25zdCBtb2RhbFN0YXRlUHJvcHMgPSBzdGF0ZS5hcHBTdGF0ZS5tb2RhbC5tb2RhbFN0YXRlLnByb3BzIHx8IHt9O1xuICByZXR1cm4ge1xuICAgIHNlbGVjdGVkSWRlbnRpdHk6IGdldFNlbGVjdGVkSWRlbnRpdHkoc3RhdGUpLFxuICAgIC4uLm1vZGFsU3RhdGVQcm9wcyxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2UoXG4gIHdpdGhNb2RhbFByb3BzLFxuICBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcyksXG4pKEVkaXRBcHByb3ZhbFBlcm1pc3Npb24pO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vZWRpdC1hcHByb3ZhbC1wZXJtaXNzaW9uLmNvbnRhaW5lcic7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHdpdGhNb2RhbFByb3BzIGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvaGlnaGVyLW9yZGVyLWNvbXBvbmVudHMvd2l0aC1tb2RhbC1wcm9wcyc7XG5pbXBvcnQgQm94IGZyb20gJy4uLy4uLy4uL3VpL2JveCc7XG5pbXBvcnQge1xuICBCYW5uZXJBbGVydCxcbiAgQnV0dG9uSWNvbixcbiAgQnV0dG9uTGluayxcbiAgQnV0dG9uUHJpbWFyeSxcbiAgQnV0dG9uU2Vjb25kYXJ5LFxuICBGb3JtVGV4dEZpZWxkLFxuICBJY29uLFxuICBJY29uTmFtZSxcbiAgSWNvblNpemUsXG4gIExhYmVsLFxuICBUZXh0LFxufSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5pbXBvcnQge1xuICBBbGlnbkl0ZW1zLFxuICBESVNQTEFZLFxuICBGTEVYX0RJUkVDVElPTixcbiAgSWNvbkNvbG9yLFxuICBKdXN0aWZ5Q29udGVudCxcbiAgU0VWRVJJVElFUyxcbiAgU2l6ZSxcbiAgVGV4dEFsaWduLFxuICBUZXh0VmFyaWFudCxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCBDaGVja0JveCBmcm9tICcuLi8uLi8uLi91aS9jaGVjay1ib3gnO1xuaW1wb3J0IHsgc2V0RGlzYWJsZWRScGNNZXRob2RQcmVmZXJlbmNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3RvcmUvYWN0aW9ucyc7XG5pbXBvcnQgeyBnZXREaXNhYmxlZFJwY01ldGhvZFByZWZlcmVuY2VzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VsZWN0b3JzJztcbmltcG9ydCB7XG4gIE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeSxcbiAgTWV0YU1ldHJpY3NFdmVudE5hbWUsXG59IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbWV0YW1ldHJpY3MnO1xuaW1wb3J0IHsgTWV0YU1ldHJpY3NDb250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vY29udGV4dHMvbWV0YW1ldHJpY3MnO1xuXG5jb25zdCBFdGhTaWduTW9kYWwgPSAoeyBoaWRlTW9kYWwgfSkgPT4ge1xuICBjb25zdCBbaXNFdGhTaWduQ2hlY2tlZCwgc2V0SXNFdGhTaWduQ2hlY2tlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzaG93VGV4dEZpZWxkLCBzZXRTaG93VGV4dEZpZWxkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2lucHV0S2V5d29yZCwgc2V0SW5wdXRLZXl3b3JkXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgZGlzYWJsZWRScGNNZXRob2RQcmVmZXJlbmNlcyA9IHVzZVNlbGVjdG9yKFxuICAgIGdldERpc2FibGVkUnBjTWV0aG9kUHJlZmVyZW5jZXMsXG4gICk7XG5cbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgdHJhY2tFdmVudCA9IHVzZUNvbnRleHQoTWV0YU1ldHJpY3NDb250ZXh0KTtcblxuICBjb25zdCBoYW5kbGVTdWJtaXQgPSAoKSA9PiB7XG4gICAgZGlzcGF0Y2goXG4gICAgICBzZXREaXNhYmxlZFJwY01ldGhvZFByZWZlcmVuY2UoXG4gICAgICAgICdldGhfc2lnbicsXG4gICAgICAgICFkaXNhYmxlZFJwY01ldGhvZFByZWZlcmVuY2VzLmV0aF9zaWduLFxuICAgICAgKSxcbiAgICApO1xuICAgIGhpZGVNb2RhbCgpO1xuICB9O1xuXG4gIGNvbnN0IGlzVmFsaWQgPSBpbnB1dEtleXdvcmQgPT09IHQoJ3RvZ2dsZUV0aFNpZ25Nb2RhbEZvcm1WYWxpZGF0aW9uJyk7XG4gIHJldHVybiAoXG4gICAgPEJveFxuICAgICAgY2xhc3NOYW1lPVwiZXRoLXNpZ24tbW9kYWxcIlxuICAgICAgZGlzcGxheT17RElTUExBWS5GTEVYfVxuICAgICAgZmxleERpcmVjdGlvbj17RkxFWF9ESVJFQ1RJT04uQ09MVU1OfVxuICAgICAganVzdGlmeUNvbnRlbnQ9e0p1c3RpZnlDb250ZW50LmZsZXhTdGFydH1cbiAgICAgIHBhZGRpbmc9ezR9XG4gICAgPlxuICAgICAgPEJveFxuICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgIGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLlJPV31cbiAgICAgICAgbWFyZ2luQm90dG9tPXs0fVxuICAgICAgICBqdXN0aWZ5Q29udGVudD17SnVzdGlmeUNvbnRlbnQuY2VudGVyfVxuICAgICAgPlxuICAgICAgICA8SWNvblxuICAgICAgICAgIGNsYXNzTmFtZT1cImV0aC1zaWduLW1vZGFsX193YXJuaW5nLWljb25cIlxuICAgICAgICAgIG5hbWU9e0ljb25OYW1lLkRhbmdlcn1cbiAgICAgICAgICBjb2xvcj17SWNvbkNvbG9yLmVycm9yRGVmYXVsdH1cbiAgICAgICAgICBzaXplPXtJY29uU2l6ZS5MZ31cbiAgICAgICAgLz5cbiAgICAgICAgPEJ1dHRvbkljb25cbiAgICAgICAgICBjbGFzc05hbWU9XCJldGgtc2lnbi1tb2RhbF9fY2xvc2VcIlxuICAgICAgICAgIGljb25OYW1lPXtJY29uTmFtZS5DbG9zZX1cbiAgICAgICAgICBzaXplPXtTaXplLlNNfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhpZGVNb2RhbCgpfVxuICAgICAgICAgIGFyaWFMYWJlbD17dCgnY2xvc2UnKX1cbiAgICAgICAgLz5cbiAgICAgIDwvQm94PlxuXG4gICAgICA8VGV4dFxuICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5oZWFkaW5nTWR9XG4gICAgICAgIHRleHRBbGlnbj17VGV4dEFsaWduLkNlbnRlcn1cbiAgICAgICAgbWFyZ2luQm90dG9tPXs2fVxuICAgICAgPlxuICAgICAgICB7dCgndG9nZ2xlRXRoU2lnbk1vZGFsVGl0bGUnKX1cbiAgICAgIDwvVGV4dD5cbiAgICAgIDxUZXh0IHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlNZH0+XG4gICAgICAgIHt0KCd0b2dnbGVFdGhTaWduTW9kYWxEZXNjcmlwdGlvbicpfVxuICAgICAgICA8QnV0dG9uTGlua1xuICAgICAgICAgIGhyZWY9XCJodHRwczovL3N1cHBvcnQubWV0YW1hc2suaW8vaGMvZW4tdXMvYXJ0aWNsZXMvMTQ3NjQxNjE0MjE0NjdcIlxuICAgICAgICAgIGV4dGVybmFsTGlua1xuICAgICAgICA+XG4gICAgICAgICAge3QoJ2xlYXJuTW9yZVVwcGVyQ2FzZScpfVxuICAgICAgICA8L0J1dHRvbkxpbms+XG4gICAgICA8L1RleHQ+XG4gICAgICA8QmFubmVyQWxlcnQgc2V2ZXJpdHk9e1NFVkVSSVRJRVMuREFOR0VSfSBtYXJnaW5Ub3A9ezZ9IG1hcmdpbkJvdHRvbT17Nn0+XG4gICAgICAgIHt0KCd0b2dnbGVFdGhTaWduTW9kYWxCYW5uZXJUZXh0Jyl9XG4gICAgICAgIHt0KCd0b2dnbGVFdGhTaWduTW9kYWxCYW5uZXJCb2xkVGV4dCcpfVxuICAgICAgPC9CYW5uZXJBbGVydD5cbiAgICAgIHtzaG93VGV4dEZpZWxkID8gKFxuICAgICAgICA8Rm9ybVRleHRGaWVsZFxuICAgICAgICAgIGlkPVwiZW50ZXItZXRoLXNpZ24tdGV4dFwiXG4gICAgICAgICAgbGFiZWw9e3QoJ3RvZ2dsZUV0aFNpZ25Nb2RhbEZvcm1MYWJlbCcpfVxuICAgICAgICAgIGVycm9yPXtpbnB1dEtleXdvcmQubGVuZ3RoID4gMCAmJiAhaXNWYWxpZH1cbiAgICAgICAgICBoZWxwVGV4dD17XG4gICAgICAgICAgICBpbnB1dEtleXdvcmQubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgIWlzVmFsaWQgJiZcbiAgICAgICAgICAgIHQoJ3RvZ2dsZUV0aFNpZ25Nb2RhbEZvcm1FcnJvcicpXG4gICAgICAgICAgfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IHNldElucHV0S2V5d29yZChldmVudC50YXJnZXQudmFsdWUpfVxuICAgICAgICAgIHZhbHVlPXtpbnB1dEtleXdvcmR9XG4gICAgICAgICAgb25QYXN0ZT17KGV2ZW50KSA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpfVxuICAgICAgICAvPlxuICAgICAgKSA6IChcbiAgICAgICAgPEJveFxuICAgICAgICAgIGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLlJPV31cbiAgICAgICAgICBhbGlnbkl0ZW1zPXtBbGlnbkl0ZW1zLmZsZXhTdGFydH1cbiAgICAgICAgICBnYXA9ezJ9XG4gICAgICAgID5cbiAgICAgICAgICA8Q2hlY2tCb3hcbiAgICAgICAgICAgIGlkPVwiZXRoLXNpZ25fX2NoZWNrYm94XCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImV0aC1zaWduX19jaGVja2JveFwiXG4gICAgICAgICAgICBkYXRhVGVzdElkPVwiZXRoLXNpZ25fX2NoZWNrYm94XCJcbiAgICAgICAgICAgIGNoZWNrZWQ9e2lzRXRoU2lnbkNoZWNrZWR9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHNldElzRXRoU2lnbkNoZWNrZWQoIWlzRXRoU2lnbkNoZWNrZWQpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxMYWJlbCBodG1sRm9yPVwiZXRoLXNpZ25fX2NoZWNrYm94XCI+XG4gICAgICAgICAgICA8VGV4dCB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5TWR9IGFzPVwic3BhblwiPlxuICAgICAgICAgICAgICB7dCgndG9nZ2xlRXRoU2lnbk1vZGFsQ2hlY2tCb3gnKX1cbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICA8L0JveD5cbiAgICAgICl9XG4gICAgICA8Qm94XG4gICAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgICAgZmxleERpcmVjdGlvbj17RkxFWF9ESVJFQ1RJT04uUk9XfVxuICAgICAgICBqdXN0aWZ5Q29udGVudD17SnVzdGlmeUNvbnRlbnQuc3BhY2VCZXR3ZWVufVxuICAgICAgICBnYXA9ezR9XG4gICAgICAgIG1hcmdpblRvcD17Nn1cbiAgICAgID5cbiAgICAgICAgPEJ1dHRvblNlY29uZGFyeSBvbkNsaWNrPXsoKSA9PiBoaWRlTW9kYWwoKX0gc2l6ZT17U2l6ZS5MR30gYmxvY2s+XG4gICAgICAgICAge3QoJ2NhbmNlbCcpfVxuICAgICAgICA8L0J1dHRvblNlY29uZGFyeT5cbiAgICAgICAge3Nob3dUZXh0RmllbGQgPyAoXG4gICAgICAgICAgPEJ1dHRvblByaW1hcnlcbiAgICAgICAgICAgIGRhbmdlclxuICAgICAgICAgICAgYmxvY2tcbiAgICAgICAgICAgIGRpc2FibGVkPXshaXNWYWxpZH1cbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVN1Ym1pdH1cbiAgICAgICAgICAgIHNpemU9e1NpemUuTEd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3QoJ2VuYWJsZVNuYXAnKX1cbiAgICAgICAgICA8L0J1dHRvblByaW1hcnk+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPEJ1dHRvblByaW1hcnlcbiAgICAgICAgICAgIGJsb2NrXG4gICAgICAgICAgICBkaXNhYmxlZD17IWlzRXRoU2lnbkNoZWNrZWR9XG4gICAgICAgICAgICBzaXplPXtTaXplLkxHfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBzZXRTaG93VGV4dEZpZWxkKHRydWUpO1xuICAgICAgICAgICAgICB0cmFja0V2ZW50KHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogTWV0YU1ldHJpY3NFdmVudENhdGVnb3J5LlNldHRpbmdzLFxuICAgICAgICAgICAgICAgIGV2ZW50OiBNZXRhTWV0cmljc0V2ZW50TmFtZS5PbmJvYXJkaW5nV2FsbGV0QWR2YW5jZWRTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ1NldHRpbmdzJyxcbiAgICAgICAgICAgICAgICAgIGVuYWJsZV9ldGhfc2lnbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3QoJ2NvbnRpbnVlJyl9XG4gICAgICAgICAgPC9CdXR0b25QcmltYXJ5PlxuICAgICAgICApfVxuICAgICAgPC9Cb3g+XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuXG5FdGhTaWduTW9kYWwucHJvcFR5cGVzID0ge1xuICAvLyBUaGUgZnVuY3Rpb24gdG8gY2xvc2UgdGhlIE1vZGFsXG4gIGhpZGVNb2RhbDogUHJvcFR5cGVzLmZ1bmMsXG59O1xuZXhwb3J0IGRlZmF1bHQgd2l0aE1vZGFsUHJvcHMoRXRoU2lnbk1vZGFsKTtcbiIsImltcG9ydCBsb2cgZnJvbSAnbG9nbGV2ZWwnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdpdGhNb2RhbFByb3BzIGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvaGlnaGVyLW9yZGVyLWNvbXBvbmVudHMvd2l0aC1tb2RhbC1wcm9wcyc7XG5pbXBvcnQgQm94IGZyb20gJy4uLy4uLy4uL3VpL2JveCc7XG5pbXBvcnQge1xuICBCVVRUT05fU0laRVMsXG4gIEJVVFRPTl9WQVJJQU5ULFxuICBCYW5uZXJBbGVydCxcbiAgQnV0dG9uLFxuICBUZXh0LFxufSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5pbXBvcnQgQWNjb3VudE1vZGFsQ29udGFpbmVyIGZyb20gJy4uL2FjY291bnQtbW9kYWwtY29udGFpbmVyJztcbmltcG9ydCB7IHRvQ2hlY2tzdW1IZXhBZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvaGV4c3RyaW5nLXV0aWxzJztcbmltcG9ydCB7XG4gIE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeSxcbiAgTWV0YU1ldHJpY3NFdmVudEtleVR5cGUsXG4gIE1ldGFNZXRyaWNzRXZlbnROYW1lLFxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL21ldGFtZXRyaWNzJztcbmltcG9ydCBIb2xkVG9SZXZlYWxNb2RhbCBmcm9tICcuLi9ob2xkLXRvLXJldmVhbC1tb2RhbC9ob2xkLXRvLXJldmVhbC1tb2RhbCc7XG5pbXBvcnQgeyBNZXRhTWV0cmljc0NvbnRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9jb250ZXh0cy9tZXRhbWV0cmljcyc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7XG4gIEJMT0NLX1NJWkVTLFxuICBCb3JkZXJDb2xvcixcbiAgQm9yZGVyU3R5bGUsXG4gIENvbG9yLFxuICBESVNQTEFZLFxuICBGTEVYX0RJUkVDVElPTixcbiAgRk9OVF9XRUlHSFQsXG4gIEp1c3RpZnlDb250ZW50LFxuICBUZXh0VmFyaWFudCxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgUHJpdmF0ZUtleURpc3BsYXkgZnJvbSAnLi9wcml2YXRlLWtleSc7XG5pbXBvcnQgUGFzc3dvcmRJbnB1dCBmcm9tICcuL3Bhc3N3b3JkLWlucHV0JztcblxuY29uc3QgRXhwb3J0UHJpdmF0ZUtleU1vZGFsID0gKHtcbiAgY2xlYXJBY2NvdW50RGV0YWlscyxcbiAgaGlkZVdhcm5pbmcsXG4gIGV4cG9ydEFjY291bnQsXG4gIHNlbGVjdGVkSWRlbnRpdHksXG4gIHNob3dBY2NvdW50RGV0YWlsTW9kYWwsXG4gIGhpZGVNb2RhbCxcbiAgd2FybmluZyA9IG51bGwsXG4gIHByZXZpb3VzTW9kYWxTdGF0ZSxcbn0pID0+IHtcbiAgY29uc3QgW3Bhc3N3b3JkLCBzZXRQYXNzd29yZF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtwcml2YXRlS2V5LCBzZXRQcml2YXRlS2V5XSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbc2hvd1dhcm5pbmcsIHNldFNob3dXYXJuaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbc2hvd0hvbGRUb1JldmVhbCwgc2V0U2hvd0hvbGRUb1JldmVhbF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IHRyYWNrRXZlbnQgPSB1c2VDb250ZXh0KE1ldGFNZXRyaWNzQ29udGV4dCk7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFyQWNjb3VudERldGFpbHMoKTtcbiAgICAgIGhpZGVXYXJuaW5nKCk7XG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcblxuICBjb25zdCBleHBvcnRBY2NvdW50QW5kR2V0UHJpdmF0ZUtleSA9IGFzeW5jIChwYXNzd29yZElucHV0LCBhZGRyZXNzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHByaXZhdGVLZXlSZXRyaWV2ZWQgPSBhd2FpdCBleHBvcnRBY2NvdW50KHBhc3N3b3JkSW5wdXQsIGFkZHJlc3MpO1xuICAgICAgdHJhY2tFdmVudChcbiAgICAgICAge1xuICAgICAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuS2V5cyxcbiAgICAgICAgICBldmVudDogTWV0YU1ldHJpY3NFdmVudE5hbWUuS2V5RXhwb3J0UmV2ZWFsZWQsXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAga2V5X3R5cGU6IE1ldGFNZXRyaWNzRXZlbnRLZXlUeXBlLlBrZXksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICApO1xuICAgICAgc2V0UHJpdmF0ZUtleShwcml2YXRlS2V5UmV0cmlldmVkKTtcbiAgICAgIHNldFNob3dXYXJuaW5nKGZhbHNlKTtcbiAgICAgIHNldFNob3dIb2xkVG9SZXZlYWwodHJ1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdHJhY2tFdmVudChcbiAgICAgICAge1xuICAgICAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuS2V5cyxcbiAgICAgICAgICBldmVudDogTWV0YU1ldHJpY3NFdmVudE5hbWUuS2V5RXhwb3J0RmFpbGVkLFxuICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGtleV90eXBlOiBNZXRhTWV0cmljc0V2ZW50S2V5VHlwZS5Qa2V5LFxuICAgICAgICAgICAgcmVhc29uOiAnaW5jb3JyZWN0X3Bhc3N3b3JkJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgICk7XG5cbiAgICAgIGxvZy5lcnJvcihlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgeyBuYW1lLCBhZGRyZXNzIH0gPSBzZWxlY3RlZElkZW50aXR5O1xuXG4gIGlmIChzaG93SG9sZFRvUmV2ZWFsKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxBY2NvdW50TW9kYWxDb250YWluZXJcbiAgICAgICAgY2xhc3NOYW1lPVwiZXhwb3J0LXByaXZhdGUta2V5LW1vZGFsXCJcbiAgICAgICAgc2VsZWN0ZWRJZGVudGl0eT17c2VsZWN0ZWRJZGVudGl0eX1cbiAgICAgICAgc2hvd0JhY2tCdXR0b249e3ByZXZpb3VzTW9kYWxTdGF0ZSA9PT0gJ0FDQ09VTlRfREVUQUlMUyd9XG4gICAgICAgIGJhY2tCdXR0b25BY3Rpb249eygpID0+IHNob3dBY2NvdW50RGV0YWlsTW9kYWwoKX1cbiAgICAgID5cbiAgICAgICAgPEhvbGRUb1JldmVhbE1vZGFsXG4gICAgICAgICAgb25Mb25nUHJlc3NlZD17KCkgPT4gc2V0U2hvd0hvbGRUb1JldmVhbChmYWxzZSl9XG4gICAgICAgICAgd2lsbEhpZGU9e2ZhbHNlfVxuICAgICAgICAgIGhvbGRUb1JldmVhbFR5cGU9XCJQcml2YXRlS2V5XCJcbiAgICAgICAgLz5cbiAgICAgIDwvQWNjb3VudE1vZGFsQ29udGFpbmVyPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxBY2NvdW50TW9kYWxDb250YWluZXJcbiAgICAgIGNsYXNzTmFtZT1cImV4cG9ydC1wcml2YXRlLWtleS1tb2RhbFwiXG4gICAgICBzZWxlY3RlZElkZW50aXR5PXtzZWxlY3RlZElkZW50aXR5fVxuICAgICAgc2hvd0JhY2tCdXR0b249e3ByZXZpb3VzTW9kYWxTdGF0ZSA9PT0gJ0FDQ09VTlRfREVUQUlMUyd9XG4gICAgICBiYWNrQnV0dG9uQWN0aW9uPXsoKSA9PiBzaG93QWNjb3VudERldGFpbE1vZGFsKCl9XG4gICAgPlxuICAgICAgPFRleHRcbiAgICAgICAgYXM9XCJzcGFuXCJcbiAgICAgICAgbWFyZ2luVG9wPXsyfVxuICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5TGdNZWRpdW19XG4gICAgICAgIGZvbnRXZWlnaHQ9e0ZPTlRfV0VJR0hULk5PUk1BTH1cbiAgICAgID5cbiAgICAgICAge25hbWV9XG4gICAgICA8L1RleHQ+XG4gICAgICA8Qm94XG4gICAgICAgIGNsYXNzTmFtZT1cImVsbGlwLWFkZHJlc3Mtd3JhcHBlclwiXG4gICAgICAgIGJvcmRlclN0eWxlPXtCb3JkZXJTdHlsZS5zb2xpZH1cbiAgICAgICAgYm9yZGVyQ29sb3I9e0JvcmRlckNvbG9yLmJvcmRlckRlZmF1bHR9XG4gICAgICAgIGJvcmRlcldpZHRoPXsxfVxuICAgICAgICBtYXJnaW5Ub3A9ezJ9XG4gICAgICAgIHBhZGRpbmc9e1sxLCAyLCAxLCAyXX1cbiAgICAgID5cbiAgICAgICAge3RvQ2hlY2tzdW1IZXhBZGRyZXNzKGFkZHJlc3MpfVxuICAgICAgPC9Cb3g+XG4gICAgICA8Qm94XG4gICAgICAgIGNsYXNzTmFtZT1cImV4cG9ydC1wcml2YXRlLWtleS1tb2RhbF9fZGl2aWRlclwiXG4gICAgICAgIHdpZHRoPXtCTE9DS19TSVpFUy5GVUxMfVxuICAgICAgICBtYXJnaW49e1s1LCAwLCAzLCAwXX1cbiAgICAgIC8+XG4gICAgICA8VGV4dFxuICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5TGdNZWRpdW19XG4gICAgICAgIG1hcmdpbj17WzQsIDAsIDQsIDBdfVxuICAgICAgICBmb250V2VpZ2h0PXtGT05UX1dFSUdIVC5OT1JNQUx9XG4gICAgICA+XG4gICAgICAgIHt0KCdzaG93UHJpdmF0ZUtleXMnKX1cbiAgICAgIDwvVGV4dD5cbiAgICAgIHtwcml2YXRlS2V5ID8gKFxuICAgICAgICA8UHJpdmF0ZUtleURpc3BsYXkgcHJpdmF0ZUtleT17cHJpdmF0ZUtleX0gLz5cbiAgICAgICkgOiAoXG4gICAgICAgIDxQYXNzd29yZElucHV0IHNldFBhc3N3b3JkPXtzZXRQYXNzd29yZH0gLz5cbiAgICAgICl9XG4gICAgICB7c2hvd1dhcm5pbmcgJiYgKFxuICAgICAgICA8VGV4dCBjb2xvcj17Q29sb3IuZXJyb3JEZWZhdWx0fSB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219PlxuICAgICAgICAgIHt3YXJuaW5nfVxuICAgICAgICA8L1RleHQ+XG4gICAgICApfVxuICAgICAgPEJhbm5lckFsZXJ0XG4gICAgICAgIHBhZGRpbmc9e1sxLCAzLCAwLCAzXX1cbiAgICAgICAgbWFyZ2luTGVmdD17NX1cbiAgICAgICAgbWFyZ2luUmlnaHQ9ezV9XG4gICAgICAgIG1hcmdpblRvcD17NH1cbiAgICAgICAgc2V2ZXJpdHk9XCJkYW5nZXJcIlxuICAgICAgPlxuICAgICAgICB7dCgncHJpdmF0ZUtleVdhcm5pbmcnKX1cbiAgICAgIDwvQmFubmVyQWxlcnQ+XG4gICAgICA8Qm94XG4gICAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgICAgZmxleERpcmVjdGlvbj17RkxFWF9ESVJFQ1RJT04uUk9XfVxuICAgICAgICB3aWR0aD17QkxPQ0tfU0laRVMuRlVMTH1cbiAgICAgICAganVzdGlmeUNvbnRlbnQ9e0p1c3RpZnlDb250ZW50LnNwYWNlQmV0d2Vlbn1cbiAgICAgICAgbWFyZ2luVG9wPXszfVxuICAgICAgICBwYWRkaW5nPXtbNSwgMCwgNSwgMF19XG4gICAgICA+XG4gICAgICAgIHshcHJpdmF0ZUtleSAmJiAoXG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgdHlwZT17QlVUVE9OX1ZBUklBTlQuU0VDT05EQVJZfVxuICAgICAgICAgICAgc2l6ZT17QlVUVE9OX1NJWkVTLkxHfVxuICAgICAgICAgICAgd2lkdGg9e0JMT0NLX1NJWkVTLkhBTEZ9XG4gICAgICAgICAgICBtYXJnaW5SaWdodD17NH1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgdHJhY2tFdmVudCh7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeS5LZXlzLFxuICAgICAgICAgICAgICAgIGV2ZW50OiBNZXRhTWV0cmljc0V2ZW50TmFtZS5LZXlFeHBvcnRDYW5jZWxlZCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICBrZXlfdHlwZTogTWV0YU1ldHJpY3NFdmVudEtleVR5cGUuUGtleSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaGlkZU1vZGFsKCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCdjYW5jZWwnKX1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgICAge3ByaXZhdGVLZXkgPyAoXG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgdHlwZT17QlVUVE9OX1ZBUklBTlQuUFJJTUFSWX1cbiAgICAgICAgICAgIHNpemU9e0JVVFRPTl9TSVpFUy5MR31cbiAgICAgICAgICAgIHdpZHRoPXtCTE9DS19TSVpFUy5GVUxMfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBoaWRlTW9kYWwoKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3QoJ2RvbmUnKX1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICB0eXBlPXtCVVRUT05fVkFSSUFOVC5QUklNQVJZfVxuICAgICAgICAgICAgc2l6ZT17QlVUVE9OX1NJWkVTLkxHfVxuICAgICAgICAgICAgd2lkdGg9e0JMT0NLX1NJWkVTLkhBTEZ9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHRyYWNrRXZlbnQoe1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuS2V5cyxcbiAgICAgICAgICAgICAgICBldmVudDogTWV0YU1ldHJpY3NFdmVudE5hbWUuS2V5RXhwb3J0UmVxdWVzdGVkLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICAgIGtleV90eXBlOiBNZXRhTWV0cmljc0V2ZW50S2V5VHlwZS5Qa2V5LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGV4cG9ydEFjY291bnRBbmRHZXRQcml2YXRlS2V5KHBhc3N3b3JkLCBhZGRyZXNzKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBkaXNhYmxlZD17IXBhc3N3b3JkfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCdjb25maXJtJyl9XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L0JveD5cbiAgICA8L0FjY291bnRNb2RhbENvbnRhaW5lcj5cbiAgKTtcbn07XG5cbkV4cG9ydFByaXZhdGVLZXlNb2RhbC5wcm9wVHlwZXMgPSB7XG4gIGV4cG9ydEFjY291bnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHNlbGVjdGVkSWRlbnRpdHk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgd2FybmluZzogUHJvcFR5cGVzLm5vZGUsXG4gIHNob3dBY2NvdW50RGV0YWlsTW9kYWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGhpZGVNb2RhbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaGlkZVdhcm5pbmc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGNsZWFyQWNjb3VudERldGFpbHM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHByZXZpb3VzTW9kYWxTdGF0ZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhNb2RhbFByb3BzKEV4cG9ydFByaXZhdGVLZXlNb2RhbCk7XG4iLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHtcbiAgZXhwb3J0QWNjb3VudCxcbiAgaGlkZVdhcm5pbmcsXG4gIHNob3dNb2RhbCxcbiAgaGlkZU1vZGFsLFxuICBjbGVhckFjY291bnREZXRhaWxzLFxufSBmcm9tICcuLi8uLi8uLi8uLi9zdG9yZS9hY3Rpb25zJztcbmltcG9ydCB7IGdldFNlbGVjdGVkSWRlbnRpdHkgfSBmcm9tICcuLi8uLi8uLi8uLi9zZWxlY3RvcnMnO1xuaW1wb3J0IEV4cG9ydFByaXZhdGVLZXlNb2RhbCBmcm9tICcuL2V4cG9ydC1wcml2YXRlLWtleS1tb2RhbC5jb21wb25lbnQnO1xuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHNGYWN0b3J5KCkge1xuICBsZXQgc2VsZWN0ZWRJZGVudGl0eSA9IG51bGw7XG4gIHJldHVybiBmdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgICAvLyBXZSBzaG91bGQgKipub3QqKiBjaGFuZ2UgdGhlIGlkZW50aXR5IGRpc3BsYXllZCBoZXJlIGV2ZW4gaWYgaXQgY2hhbmdlcyBmcm9tIHVuZGVybmVhdGggdXMuXG4gICAgLy8gSWYgd2UgZG8sIHdlIHdpbGwgYmUgc2hvd2luZyB0aGUgdXNlciBvbmUgcHJpdmF0ZSBrZXkgYW5kIGEgKipkaWZmZXJlbnQqKiBhZGRyZXNzIGFuZCBuYW1lLlxuICAgIC8vIE5vdGUgdGhhdCB0aGUgc2VsZWN0ZWQgaWRlbnRpdHkgKip3aWxsKiogY2hhbmdlIGZyb20gdW5kZXJuZWF0aCB1cyB3aGVuIHdlIHVubG9jayB0aGUga2V5cmluZ1xuICAgIC8vIHdoaWNoIGlzIHRoZSBleHBlY3RlZCBiZWhhdmlvciB0aGF0IHdlIGFyZSBzaWRlLXN0ZXBwaW5nLlxuICAgIHNlbGVjdGVkSWRlbnRpdHkgPSBzZWxlY3RlZElkZW50aXR5IHx8IGdldFNlbGVjdGVkSWRlbnRpdHkoc3RhdGUpO1xuICAgIHJldHVybiB7XG4gICAgICB3YXJuaW5nOiBzdGF0ZS5hcHBTdGF0ZS53YXJuaW5nLFxuICAgICAgcHJpdmF0ZUtleTogc3RhdGUuYXBwU3RhdGUuYWNjb3VudERldGFpbC5wcml2YXRlS2V5LFxuICAgICAgc2VsZWN0ZWRJZGVudGl0eSxcbiAgICAgIHByZXZpb3VzTW9kYWxTdGF0ZTogc3RhdGUuYXBwU3RhdGUubW9kYWwucHJldmlvdXNNb2RhbFN0YXRlLm5hbWUsXG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7XG4gIHJldHVybiB7XG4gICAgZXhwb3J0QWNjb3VudDogKHBhc3N3b3JkLCBhZGRyZXNzKSA9PiB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2goZXhwb3J0QWNjb3VudChwYXNzd29yZCwgYWRkcmVzcykpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBkaXNwYXRjaChoaWRlV2FybmluZygpKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2hvd0FjY291bnREZXRhaWxNb2RhbDogKCkgPT5cbiAgICAgIGRpc3BhdGNoKHNob3dNb2RhbCh7IG5hbWU6ICdBQ0NPVU5UX0RFVEFJTFMnIH0pKSxcbiAgICBoaWRlTW9kYWw6ICgpID0+IGRpc3BhdGNoKGhpZGVNb2RhbCgpKSxcbiAgICBoaWRlV2FybmluZzogKCkgPT4gZGlzcGF0Y2goaGlkZVdhcm5pbmcoKSksXG4gICAgY2xlYXJBY2NvdW50RGV0YWlsczogKCkgPT4gZGlzcGF0Y2goY2xlYXJBY2NvdW50RGV0YWlscygpKSxcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yeSxcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxuKShFeHBvcnRQcml2YXRlS2V5TW9kYWwpO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vZXhwb3J0LXByaXZhdGUta2V5LW1vZGFsLmNvbnRhaW5lcic7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7XG4gIEJMT0NLX1NJWkVTLFxuICBGTEVYX0RJUkVDVElPTixcbiAgRElTUExBWSxcbiAgQWxpZ25JdGVtcyxcbiAgQ29sb3IsXG4gIFRleHRWYXJpYW50LFxufSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBCb3ggZnJvbSAnLi4vLi4vLi4vdWkvYm94JztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuaW1wb3J0IHsgTGFiZWwsIFRFWFRfRklFTERfVFlQRVMsIFRleHRGaWVsZCB9IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcblxuY29uc3QgUGFzc3dvcmRJbnB1dCA9ICh7IHNldFBhc3N3b3JkIH0pID0+IHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94XG4gICAgICB3aWR0aD17QkxPQ0tfU0laRVMuRlVMTH1cbiAgICAgIGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLkNPTFVNTn1cbiAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgIGFsaWduSXRlbXM9e0FsaWduSXRlbXMuZmxleFN0YXJ0fVxuICAgICAgcGFkZGluZ0xlZnQ9ezV9XG4gICAgICBwYWRkaW5nUmlnaHQ9ezV9XG4gICAgPlxuICAgICAgPExhYmVsXG4gICAgICAgIGNvbG9yPXtDb2xvci50ZXh0RGVmYXVsdH1cbiAgICAgICAgbWFyZ2luQm90dG9tPXsyfVxuICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219XG4gICAgICA+XG4gICAgICAgIHt0KCd0eXBlUGFzc3dvcmQnKX1cbiAgICAgIDwvTGFiZWw+XG4gICAgICA8VGV4dEZpZWxkXG4gICAgICAgIHdpZHRoPXtCTE9DS19TSVpFUy5GVUxMfVxuICAgICAgICBwbGFjZWhvbGRlcj17dCgnZW50ZXJQYXNzd29yZCcpfVxuICAgICAgICB0eXBlPXtURVhUX0ZJRUxEX1RZUEVTLlBBU1NXT1JEfVxuICAgICAgICBjbGFzc05hbWU9XCJleHBvcnQtcHJpdmF0ZS1rZXktbW9kYWxfX3Bhc3N3b3JkLWlucHV0XCJcbiAgICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT4gc2V0UGFzc3dvcmQoZXZlbnQudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgZGF0YS10ZXN0aWQ9XCJwYXNzd29yZC1pbnB1dFwiXG4gICAgICAvPlxuICAgIDwvQm94PlxuICApO1xufTtcblxuUGFzc3dvcmRJbnB1dC5wcm9wVHlwZXMgPSB7XG4gIHNldFBhc3N3b3JkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGFzc3dvcmRJbnB1dDtcbiIsImltcG9ydCBjb3B5VG9DbGlwYm9hcmQgZnJvbSAnY29weS10by1jbGlwYm9hcmQnO1xuaW1wb3J0IHsgc3RyaXBIZXhQcmVmaXggfSBmcm9tICdldGhlcmV1bWpzLXV0aWwnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEJveCBmcm9tICcuLi8uLi8uLi91aS9ib3gnO1xuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQge1xuICBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnksXG4gIE1ldGFNZXRyaWNzRXZlbnROYW1lLFxuICBNZXRhTWV0cmljc0V2ZW50S2V5VHlwZSxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9tZXRhbWV0cmljcyc7XG5pbXBvcnQgeyBNZXRhTWV0cmljc0NvbnRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9jb250ZXh0cy9tZXRhbWV0cmljcyc7XG5pbXBvcnQge1xuICBCTE9DS19TSVpFUyxcbiAgQm9yZGVyU3R5bGUsXG4gIEJvcmRlckNvbG9yLFxuICBCb3JkZXJSYWRpdXMsXG4gIEFsaWduSXRlbXMsXG4gIERJU1BMQVksXG4gIENvbG9yLFxuICBGTEVYX0RJUkVDVElPTixcbiAgVGV4dFZhcmlhbnQsXG59IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgTGFiZWwgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5cbmNvbnN0IFByaXZhdGVLZXlEaXNwbGF5ID0gKHsgcHJpdmF0ZUtleSB9KSA9PiB7XG4gIGNvbnN0IHRyYWNrRXZlbnQgPSB1c2VDb250ZXh0KE1ldGFNZXRyaWNzQ29udGV4dCk7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBjb25zdCBwbGFpbktleSA9IHN0cmlwSGV4UHJlZml4KHByaXZhdGVLZXkpO1xuXG4gIHJldHVybiAoXG4gICAgPEJveFxuICAgICAgd2lkdGg9e0JMT0NLX1NJWkVTLkZVTEx9XG4gICAgICBmbGV4RGlyZWN0aW9uPXtGTEVYX0RJUkVDVElPTi5DT0xVTU59XG4gICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICBhbGlnbkl0ZW1zPXtBbGlnbkl0ZW1zLmZsZXhTdGFydH1cbiAgICAgIHBhZGRpbmdMZWZ0PXs0fVxuICAgICAgcGFkZGluZ1JpZ2h0PXs0fVxuICAgID5cbiAgICAgIDxMYWJlbFxuICAgICAgICBjb2xvcj17Q29sb3IudGV4dERlZmF1bHR9XG4gICAgICAgIG1hcmdpbkJvdHRvbT17Mn1cbiAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtfVxuICAgICAgPlxuICAgICAgICB7dCgnY29weVByaXZhdGVLZXknKX1cbiAgICAgIDwvTGFiZWw+XG4gICAgICA8Qm94XG4gICAgICAgIGNsYXNzTmFtZT1cImV4cG9ydC1wcml2YXRlLWtleS1tb2RhbF9fcHJpdmF0ZS1rZXktZGlzcGxheVwiXG4gICAgICAgIHdpZHRoPXtCTE9DS19TSVpFUy5GVUxMfVxuICAgICAgICBib3JkZXJTdHlsZT17Qm9yZGVyU3R5bGUuc29saWR9XG4gICAgICAgIGJvcmRlckNvbG9yPXtCb3JkZXJDb2xvci5ib3JkZXJEZWZhdWx0fVxuICAgICAgICBib3JkZXJSYWRpdXM9e0JvcmRlclJhZGl1cy5YU31cbiAgICAgICAgYm9yZGVyV2lkdGg9ezF9XG4gICAgICAgIHBhZGRpbmc9e1syLCAzLCAyXX1cbiAgICAgICAgY29sb3I9e0NvbG9yLmVycm9yRGVmYXVsdH1cbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIGNvcHlUb0NsaXBib2FyZChwbGFpbktleSk7XG4gICAgICAgICAgdHJhY2tFdmVudChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY2F0ZWdvcnk6IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeS5LZXlzLFxuICAgICAgICAgICAgICBldmVudDogTWV0YU1ldHJpY3NFdmVudE5hbWUuS2V5RXhwb3J0Q29waWVkLFxuICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAga2V5X3R5cGU6IE1ldGFNZXRyaWNzRXZlbnRLZXlUeXBlLlBrZXksXG4gICAgICAgICAgICAgICAgY29weV9tZXRob2Q6ICdjbGlwYm9hcmQnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICk7XG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIHtwbGFpbktleX1cbiAgICAgIDwvQm94PlxuICAgIDwvQm94PlxuICApO1xufTtcblxuUHJpdmF0ZUtleURpc3BsYXkucHJvcFR5cGVzID0ge1xuICBwcml2YXRlS2V5OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcml2YXRlS2V5RGlzcGxheTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5sZXQgaW5kZXggPSAwO1xubGV0IGV4dHJhU2hlZXQ7XG5cbmNvbnN0IGluc2VydFJ1bGUgPSAoY3NzKSA9PiB7XG4gIGlmICghZXh0cmFTaGVldCkge1xuICAgIC8vIEZpcnN0IHRpbWUsIGNyZWF0ZSBhbiBleHRyYSBzdHlsZXNoZWV0IGZvciBhZGRpbmcgcnVsZXNcbiAgICBleHRyYVNoZWV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKGV4dHJhU2hlZXQpO1xuICAgIC8vIEtlZXAgcmVmZXJlbmNlIHRvIGFjdHVhbCBTdHlsZVNoZWV0IG9iamVjdCAoYHN0eWxlU2hlZXRgIGZvciBJRSA8IDkpXG4gICAgZXh0cmFTaGVldCA9IGV4dHJhU2hlZXQuc2hlZXQgfHwgZXh0cmFTaGVldC5zdHlsZVNoZWV0O1xuICB9XG5cbiAgZXh0cmFTaGVldC5pbnNlcnRSdWxlKGNzcywgKGV4dHJhU2hlZXQuY3NzUnVsZXMgfHwgZXh0cmFTaGVldC5ydWxlcykubGVuZ3RoKTtcblxuICByZXR1cm4gZXh0cmFTaGVldDtcbn07XG5cbmNvbnN0IGluc2VydEtleWZyYW1lc1J1bGUgPSAoa2V5ZnJhbWVzKSA9PiB7XG4gIC8vIHJhbmRvbSBuYW1lXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wbHVzcGx1c1xuICBjb25zdCBuYW1lID0gYGFuaW1fJHsrK2luZGV4fSR7TnVtYmVyKG5ldyBEYXRlKCkpfWA7XG4gIGxldCBjc3MgPSBgQGtleWZyYW1lcyAke25hbWV9IHtgO1xuXG4gIE9iamVjdC5rZXlzKGtleWZyYW1lcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY3NzICs9IGAke2tleX0ge2A7XG5cbiAgICBPYmplY3Qua2V5cyhrZXlmcmFtZXNba2V5XSkuZm9yRWFjaCgocHJvcGVydHkpID0+IHtcbiAgICAgIGNvbnN0IHBhcnQgPSBgOiR7a2V5ZnJhbWVzW2tleV1bcHJvcGVydHldfTtgO1xuICAgICAgY3NzICs9IHByb3BlcnR5ICsgcGFydDtcbiAgICB9KTtcblxuICAgIGNzcyArPSAnfSc7XG4gIH0pO1xuXG4gIGNzcyArPSAnfSc7XG5cbiAgaW5zZXJ0UnVsZShjc3MpO1xuXG4gIHJldHVybiBuYW1lO1xufTtcblxuY29uc3QgYW5pbWF0aW9uID0ge1xuICBzaG93OiB7XG4gICAgYW5pbWF0aW9uRHVyYXRpb246ICcwLjNzJyxcbiAgICBhbmltYXRpb25UaW1pbmdGdW5jdGlvbjogJ2Vhc2Utb3V0JyxcbiAgfSxcbiAgaGlkZToge1xuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnMC4zcycsXG4gICAgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb246ICdlYXNlLW91dCcsXG4gIH0sXG4gIHNob3dDb250ZW50QW5pbWF0aW9uOiBpbnNlcnRLZXlmcmFtZXNSdWxlKHtcbiAgICAnMCUnOiB7XG4gICAgICBvcGFjaXR5OiAwLFxuICAgIH0sXG4gICAgJzEwMCUnOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgIH0sXG4gIH0pLFxuICBoaWRlQ29udGVudEFuaW1hdGlvbjogaW5zZXJ0S2V5ZnJhbWVzUnVsZSh7XG4gICAgJzAlJzoge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICB9LFxuICAgICcxMDAlJzoge1xuICAgICAgb3BhY2l0eTogMCxcbiAgICB9LFxuICB9KSxcbiAgc2hvd0JhY2tkcm9wQW5pbWF0aW9uOiBpbnNlcnRLZXlmcmFtZXNSdWxlKHtcbiAgICAnMCUnOiB7XG4gICAgICBvcGFjaXR5OiAwLFxuICAgIH0sXG4gICAgJzEwMCUnOiB7XG4gICAgICBvcGFjaXR5OiAwLjksXG4gICAgfSxcbiAgfSksXG4gIGhpZGVCYWNrZHJvcEFuaW1hdGlvbjogaW5zZXJ0S2V5ZnJhbWVzUnVsZSh7XG4gICAgJzAlJzoge1xuICAgICAgb3BhY2l0eTogMC45LFxuICAgIH0sXG4gICAgJzEwMCUnOiB7XG4gICAgICBvcGFjaXR5OiAwLFxuICAgIH0sXG4gIH0pLFxufTtcblxuY29uc3QgZW5kRXZlbnRzID0gWyd0cmFuc2l0aW9uZW5kJywgJ2FuaW1hdGlvbmVuZCddO1xuXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50TmFtZSwgZXZlbnRMaXN0ZW5lcikge1xuICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBldmVudExpc3RlbmVyLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBldmVudExpc3RlbmVyKSB7XG4gIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGV2ZW50TGlzdGVuZXIsIGZhbHNlKTtcbn1cblxuY29uc3QgcmVtb3ZlRW5kRXZlbnRMaXN0ZW5lciA9IChub2RlLCBldmVudExpc3RlbmVyKSA9PiB7XG4gIGlmIChlbmRFdmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGVuZEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbmRFdmVudCkge1xuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZW5kRXZlbnQsIGV2ZW50TGlzdGVuZXIpO1xuICB9KTtcbn07XG5cbmNvbnN0IGFkZEVuZEV2ZW50TGlzdGVuZXIgPSAobm9kZSwgZXZlbnRMaXN0ZW5lcikgPT4ge1xuICBpZiAoZW5kRXZlbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIElmIENTUyB0cmFuc2l0aW9ucyBhcmUgbm90IHN1cHBvcnRlZCwgdHJpZ2dlciBhbiBcImVuZCBhbmltYXRpb25cIlxuICAgIC8vIGV2ZW50IGltbWVkaWF0ZWx5LlxuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGV2ZW50TGlzdGVuZXIsIDApO1xuICAgIHJldHVybjtcbiAgfVxuICBlbmRFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZW5kRXZlbnQpIHtcbiAgICBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGVuZEV2ZW50LCBldmVudExpc3RlbmVyKTtcbiAgfSk7XG59O1xuXG5jbGFzcyBGYWRlTW9kYWwgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb250ZW50ID0gbnVsbDtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGJhY2tkcm9wOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBiYWNrZHJvcFN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsb3NlT25DbGljazogUHJvcFR5cGVzLmJvb2wsXG4gICAgY29udGVudFN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGtleWJvYXJkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtb2RhbFN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG9uU2hvdzogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25IaWRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBvblNob3c6ICgpID0+IHVuZGVmaW5lZCxcbiAgICBvbkhpZGU6ICgpID0+IHVuZGVmaW5lZCxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gICAgbW9kYWxTdHlsZToge30sXG4gICAgYmFja2Ryb3BTdHlsZToge30sXG4gICAgY29udGVudFN0eWxlOiB7fSxcbiAgICBjaGlsZHJlbjogW10sXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgd2lsbEhpZGU6IHRydWUsXG4gICAgaGlkZGVuOiB0cnVlLFxuICB9O1xuXG4gIGFkZFRyYW5zaXRpb25MaXN0ZW5lciA9IChub2RlLCBoYW5kbGUpID0+IHtcbiAgICBpZiAobm9kZSkge1xuICAgICAgY29uc3QgZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gbm9kZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZW1vdmVFbmRFdmVudExpc3RlbmVyKG5vZGUsIGVuZExpc3RlbmVyKTtcbiAgICAgICAgaGFuZGxlKCk7XG4gICAgICB9O1xuICAgICAgYWRkRW5kRXZlbnRMaXN0ZW5lcihub2RlLCBlbmRMaXN0ZW5lcik7XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZUJhY2tkcm9wQ2xpY2sgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMuY2xvc2VPbkNsaWNrKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9XG4gIH07XG5cbiAgaGFzSGlkZGVuID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmhpZGRlbjtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuaGlkZGVuKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB7IHdpbGxIaWRlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgbW9kYWxTdHlsZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBiYWNrZHJvcFN0eWxlID0ge1xuICAgICAgYW5pbWF0aW9uTmFtZTogd2lsbEhpZGVcbiAgICAgICAgPyBhbmltYXRpb24uaGlkZUJhY2tkcm9wQW5pbWF0aW9uXG4gICAgICAgIDogYW5pbWF0aW9uLnNob3dCYWNrZHJvcEFuaW1hdGlvbixcbiAgICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiAod2lsbEhpZGUgPyBhbmltYXRpb24uaGlkZSA6IGFuaW1hdGlvbi5zaG93KVxuICAgICAgICAuYW5pbWF0aW9uVGltaW5nRnVuY3Rpb24sXG4gICAgICAuLi50aGlzLnByb3BzLmJhY2tkcm9wU3R5bGUsXG4gICAgfTtcbiAgICBjb25zdCBjb250ZW50U3R5bGUgPSB7XG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogKHdpbGxIaWRlID8gYW5pbWF0aW9uLmhpZGUgOiBhbmltYXRpb24uc2hvdylcbiAgICAgICAgLmFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgYW5pbWF0aW9uTmFtZTogd2lsbEhpZGVcbiAgICAgICAgPyBhbmltYXRpb24uaGlkZUNvbnRlbnRBbmltYXRpb25cbiAgICAgICAgOiBhbmltYXRpb24uc2hvd0NvbnRlbnRBbmltYXRpb24sXG4gICAgICBhbmltYXRpb25UaW1pbmdGdW5jdGlvbjogKHdpbGxIaWRlID8gYW5pbWF0aW9uLmhpZGUgOiBhbmltYXRpb24uc2hvdylcbiAgICAgICAgLmFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uLFxuICAgICAgLi4udGhpcy5wcm9wcy5jb250ZW50U3R5bGUsXG4gICAgfTtcblxuICAgIGNvbnN0IGJhY2tkcm9wID0gdGhpcy5wcm9wcy5iYWNrZHJvcCA/IChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPVwibW9kYWxfX2JhY2tkcm9wXCJcbiAgICAgICAgc3R5bGU9e2JhY2tkcm9wU3R5bGV9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMucHJvcHMuY2xvc2VPbkNsaWNrID8gdGhpcy5oYW5kbGVCYWNrZHJvcENsaWNrIDogbnVsbH1cbiAgICAgIC8+XG4gICAgKSA6IHVuZGVmaW5lZDtcblxuICAgIGlmICh3aWxsSGlkZSkge1xuICAgICAgdGhpcy5hZGRUcmFuc2l0aW9uTGlzdGVuZXIodGhpcy5jb250ZW50LCB0aGlzLmxlYXZlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW4+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWxcIiBzdHlsZT17bW9kYWxTdHlsZX0+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibW9kYWxfX2NvbnRlbnRcIlxuICAgICAgICAgICAgcmVmPXsoZWwpID0+ICh0aGlzLmNvbnRlbnQgPSBlbCl9XG4gICAgICAgICAgICB0YWJJbmRleD1cIi0xXCJcbiAgICAgICAgICAgIHN0eWxlPXtjb250ZW50U3R5bGV9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7YmFja2Ryb3B9XG4gICAgICA8L3NwYW4+XG4gICAgKTtcbiAgfVxuXG4gIGxlYXZlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaGlkZGVuOiB0cnVlLFxuICAgIH0pO1xuICAgIHRoaXMucHJvcHMub25IaWRlKHRoaXMuc3RhdGUuaGlkZVNvdXJjZSk7XG4gIH07XG5cbiAgZW50ZXIgPSAoKSA9PiB7XG4gICAgdGhpcy5wcm9wcy5vblNob3coKTtcbiAgfTtcblxuICBzaG93ID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5zdGF0ZS5oaWRkZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHdpbGxIaWRlOiBmYWxzZSxcbiAgICAgIGhpZGRlbjogZmFsc2UsXG4gICAgfSk7XG5cbiAgICBzZXRUaW1lb3V0KFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFkZFRyYW5zaXRpb25MaXN0ZW5lcih0aGlzLmNvbnRlbnQsIHRoaXMuZW50ZXIpO1xuICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgMCxcbiAgICApO1xuICB9O1xuXG4gIGhpZGUgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMuaGFzSGlkZGVuKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHdpbGxIaWRlOiB0cnVlLFxuICAgIH0pO1xuICB9O1xuXG4gIGxpc3RlbktleWJvYXJkID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLmtleWJvYXJkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLnByb3BzLmtleWJvYXJkKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jbG9zZU9uRXNjKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgY2xvc2VPbkVzYyA9IChldmVudCkgPT4ge1xuICAgIGlmIChcbiAgICAgIHRoaXMucHJvcHMua2V5Ym9hcmQgJiZcbiAgICAgIChldmVudC5rZXkgPT09ICdFc2NhcGUnIHx8IGV2ZW50LmtleUNvZGUgPT09IDI3KVxuICAgICkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuICB9O1xuXG4gIFVOU0FGRV9jb21wb25lbnREaWRNb3VudCA9ICgpID0+IHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMubGlzdGVuS2V5Ym9hcmQsIHRydWUpO1xuICB9O1xuXG4gIFVOU0FGRV9jb21wb25lbnRXaWxsVW5tb3VudCA9ICgpID0+IHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMubGlzdGVuS2V5Ym9hcmQsIHRydWUpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBGYWRlTW9kYWw7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4uLy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IElkZW50aWNvbiBmcm9tICcuLi8uLi8uLi91aS9pZGVudGljb24nO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi8uLi8uLi91aS9idXR0b24nO1xuaW1wb3J0IHsgREVGQVVMVF9ST1VURSB9IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL3JvdXRlcyc7XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICByZXR1cm4ge1xuICAgIHRva2VuOiBzdGF0ZS5hcHBTdGF0ZS5tb2RhbC5tb2RhbFN0YXRlLnByb3BzLnRva2VuLFxuICAgIGhpc3Rvcnk6IHN0YXRlLmFwcFN0YXRlLm1vZGFsLm1vZGFsU3RhdGUucHJvcHMuaGlzdG9yeSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7XG4gIHJldHVybiB7XG4gICAgaGlkZU1vZGFsOiAoKSA9PiBkaXNwYXRjaChhY3Rpb25zLmhpZGVNb2RhbCgpKSxcbiAgICBoaWRlVG9rZW46IChhZGRyZXNzKSA9PiB7XG4gICAgICBkaXNwYXRjaChcbiAgICAgICAgYWN0aW9ucy5pZ25vcmVUb2tlbnMoe1xuICAgICAgICAgIHRva2Vuc1RvSWdub3JlOiBhZGRyZXNzLFxuICAgICAgICB9KSxcbiAgICAgICkudGhlbigoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKGFjdGlvbnMuaGlkZU1vZGFsKCkpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn1cblxuY2xhc3MgSGlkZVRva2VuQ29uZmlybWF0aW9uTW9kYWwgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaGlkZVRva2VuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGhpZGVNb2RhbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB0b2tlbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHN5bWJvbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIGFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBpbWFnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB9KSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LFxuICB9O1xuXG4gIHN0YXRlID0ge307XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdG9rZW4sIGhpZGVUb2tlbiwgaGlkZU1vZGFsLCBoaXN0b3J5IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgc3ltYm9sLCBhZGRyZXNzLCBpbWFnZSB9ID0gdG9rZW47XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJoaWRlLXRva2VuLWNvbmZpcm1hdGlvblwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhpZGUtdG9rZW4tY29uZmlybWF0aW9uX19jb250YWluZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhpZGUtdG9rZW4tY29uZmlybWF0aW9uX190aXRsZVwiPlxuICAgICAgICAgICAge3RoaXMuY29udGV4dC50KCdoaWRlVG9rZW5Qcm9tcHQnKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8SWRlbnRpY29uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJoaWRlLXRva2VuLWNvbmZpcm1hdGlvbl9faWRlbnRpY29uXCJcbiAgICAgICAgICAgIGRpYW1ldGVyPXs0NX1cbiAgICAgICAgICAgIGFkZHJlc3M9e2FkZHJlc3N9XG4gICAgICAgICAgICBpbWFnZT17aW1hZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhpZGUtdG9rZW4tY29uZmlybWF0aW9uX19zeW1ib2xcIj57c3ltYm9sfTwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGlkZS10b2tlbi1jb25maXJtYXRpb25fX2NvcHlcIj5cbiAgICAgICAgICAgIHt0aGlzLmNvbnRleHQudCgncmVhZGRUb2tlbicpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGlkZS10b2tlbi1jb25maXJtYXRpb25fX2J1dHRvbnNcIj5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgdHlwZT1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImhpZGUtdG9rZW4tY29uZmlybWF0aW9uX19idXR0b25cIlxuICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImhpZGUtdG9rZW4tY29uZmlybWF0aW9uX19jYW5jZWxcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoaWRlTW9kYWwoKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3RoaXMuY29udGV4dC50KCdjYW5jZWwnKX1cbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImhpZGUtdG9rZW4tY29uZmlybWF0aW9uX19idXR0b25cIlxuICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImhpZGUtdG9rZW4tY29uZmlybWF0aW9uX19oaWRlXCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGhpZGVUb2tlbihhZGRyZXNzKTtcbiAgICAgICAgICAgICAgICBoaXN0b3J5LnB1c2goREVGQVVMVF9ST1VURSk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0aGlzLmNvbnRleHQudCgnaGlkZScpfVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcERpc3BhdGNoVG9Qcm9wcyxcbikoSGlkZVRva2VuQ29uZmlybWF0aW9uTW9kYWwpO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vaGlkZS10b2tlbi1jb25maXJtYXRpb24tbW9kYWwnO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHdpdGhNb2RhbFByb3BzIGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvaGlnaGVyLW9yZGVyLWNvbXBvbmVudHMvd2l0aC1tb2RhbC1wcm9wcyc7XG5pbXBvcnQgQm94IGZyb20gJy4uLy4uLy4uL3VpL2JveCc7XG5pbXBvcnQge1xuICBUZXh0LFxuICBCdXR0b24sXG4gIEJVVFRPTl9TSVpFUyxcbiAgQlVUVE9OX1ZBUklBTlQsXG4gIEJ1dHRvbkljb24sXG4gIEljb25OYW1lLFxufSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5pbXBvcnQge1xuICBBbGlnbkl0ZW1zLFxuICBESVNQTEFZLFxuICBGTEVYX0RJUkVDVElPTixcbiAgSnVzdGlmeUNvbnRlbnQsXG4gIFNpemUsXG4gIFRleHRWYXJpYW50LFxufSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBIb2xkVG9SZXZlYWxCdXR0b24gZnJvbSAnLi4vLi4vaG9sZC10by1yZXZlYWwtYnV0dG9uJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuaW1wb3J0IFpFTkRFU0tfVVJMUyBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy96ZW5kZXNrLXVybCc7XG5pbXBvcnQgeyBNZXRhTWV0cmljc0NvbnRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9jb250ZXh0cy9tZXRhbWV0cmljcyc7XG5pbXBvcnQge1xuICBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnksXG4gIE1ldGFNZXRyaWNzRXZlbnRLZXlUeXBlLFxuICBNZXRhTWV0cmljc0V2ZW50TmFtZSxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9tZXRhbWV0cmljcyc7XG5cbmNvbnN0IEhvbGRUb1JldmVhbE1vZGFsID0gKHtcbiAgb25Mb25nUHJlc3NlZCxcbiAgaGlkZU1vZGFsLFxuICB3aWxsSGlkZSA9IHRydWUsXG4gIGhvbGRUb1JldmVhbFR5cGUgPSAnU1JQJyxcbn0pID0+IHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IGhvbGRUb1JldmVhbFRpdGxlID1cbiAgICBob2xkVG9SZXZlYWxUeXBlID09PSAnU1JQJ1xuICAgICAgPyAnaG9sZFRvUmV2ZWFsU1JQVGl0bGUnXG4gICAgICA6ICdob2xkVG9SZXZlYWxQcml2YXRlS2V5VGl0bGUnO1xuXG4gIGNvbnN0IGhvbGRUb1JldmVhbEJ1dHRvbiA9XG4gICAgaG9sZFRvUmV2ZWFsVHlwZSA9PT0gJ1NSUCcgPyAnaG9sZFRvUmV2ZWFsU1JQJyA6ICdob2xkVG9SZXZlYWxQcml2YXRlS2V5JztcbiAgY29uc3QgdHJhY2tFdmVudCA9IHVzZUNvbnRleHQoTWV0YU1ldHJpY3NDb250ZXh0KTtcblxuICBjb25zdCB1bmxvY2sgPSAoKSA9PiB7XG4gICAgb25Mb25nUHJlc3NlZCgpO1xuICAgIGlmICh3aWxsSGlkZSkge1xuICAgICAgaGlkZU1vZGFsKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNhbmNlbCA9ICgpID0+IHtcbiAgICBoaWRlTW9kYWwoKTtcbiAgfTtcblxuICBjb25zdCByZW5kZXJIb2xkVG9SZXZlYWxQcml2YXRlS2V5Q29udGVudCA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPEJveFxuICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgIGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLkNPTFVNTn1cbiAgICAgICAgZ2FwPXs0fVxuICAgICAgICBtYXJnaW5Cb3R0b209ezZ9XG4gICAgICA+XG4gICAgICAgIDxUZXh0IHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlNZH0+XG4gICAgICAgICAge3QoJ2hvbGRUb1JldmVhbENvbnRlbnRQcml2YXRlS2V5MScsIFtcbiAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgIGtleT1cImhvbGQtdG8tcmV2ZWFsLTJcIlxuICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5TWRCb2xkfVxuICAgICAgICAgICAgICBhcz1cInNwYW5cIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dCgnaG9sZFRvUmV2ZWFsQ29udGVudFByaXZhdGVLZXkyJyl9XG4gICAgICAgICAgICA8L1RleHQ+LFxuICAgICAgICAgIF0pfVxuICAgICAgICA8L1RleHQ+XG4gICAgICAgIDxUZXh0IHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlNZEJvbGR9PlxuICAgICAgICAgIHt0KCdob2xkVG9SZXZlYWxDb250ZW50MycsIFtcbiAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgIGtleT1cImhvbGQtdG8tcmV2ZWFsLTRcIlxuICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5TWR9XG4gICAgICAgICAgICAgIGFzPVwic3BhblwiXG4gICAgICAgICAgICAgIGRpc3BsYXk9e0RJU1BMQVkuSU5MSU5FfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dCgnaG9sZFRvUmV2ZWFsQ29udGVudDQnKX1cbiAgICAgICAgICAgIDwvVGV4dD4sXG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIGtleT1cImhvbGQtdG8tcmV2ZWFsLTVcIlxuICAgICAgICAgICAgICB2YXJpYW50PXtCVVRUT05fVkFSSUFOVC5MSU5LfVxuICAgICAgICAgICAgICBzaXplPXtCVVRUT05fU0laRVMuSU5IRVJJVH1cbiAgICAgICAgICAgICAgaHJlZj17WkVOREVTS19VUkxTLk5PTl9DVVNUT0RJQUxfV0FMTEVUfVxuICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3QoJ2hvbGRUb1JldmVhbENvbnRlbnQ1Jyl9XG4gICAgICAgICAgICA8L0J1dHRvbj4sXG4gICAgICAgICAgXSl9XG4gICAgICAgIDwvVGV4dD5cbiAgICAgIDwvQm94PlxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgcmVuZGVySG9sZFRvUmV2ZWFsU1JQQ29udGVudCA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPEJveFxuICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgIGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLkNPTFVNTn1cbiAgICAgICAgZ2FwPXs0fVxuICAgICAgICBtYXJnaW5Cb3R0b209ezZ9XG4gICAgICA+XG4gICAgICAgIDxUZXh0IHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlNZH0+XG4gICAgICAgICAge3QoJ2hvbGRUb1JldmVhbENvbnRlbnQxJywgW1xuICAgICAgICAgICAgPFRleHRcbiAgICAgICAgICAgICAga2V5PVwiaG9sZC10by1yZXZlYWwtMlwiXG4gICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlNZEJvbGR9XG4gICAgICAgICAgICAgIGFzPVwic3BhblwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0KCdob2xkVG9SZXZlYWxDb250ZW50MicpfVxuICAgICAgICAgICAgPC9UZXh0PixcbiAgICAgICAgICBdKX1cbiAgICAgICAgPC9UZXh0PlxuICAgICAgICA8VGV4dCB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5TWRCb2xkfT5cbiAgICAgICAgICB7dCgnaG9sZFRvUmV2ZWFsQ29udGVudDMnLCBbXG4gICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICBrZXk9XCJob2xkLXRvLXJldmVhbC00XCJcbiAgICAgICAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keU1kfVxuICAgICAgICAgICAgICBhcz1cInNwYW5cIlxuICAgICAgICAgICAgICBkaXNwbGF5PXtESVNQTEFZLklOTElORX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3QoJ2hvbGRUb1JldmVhbENvbnRlbnQ0Jyl9XG4gICAgICAgICAgICA8L1RleHQ+LFxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBrZXk9XCJob2xkLXRvLXJldmVhbC01XCJcbiAgICAgICAgICAgICAgdmFyaWFudD17QlVUVE9OX1ZBUklBTlQuTElOS31cbiAgICAgICAgICAgICAgc2l6ZT17U2l6ZS5hdXRvfVxuICAgICAgICAgICAgICBocmVmPXtaRU5ERVNLX1VSTFMuTk9OX0NVU1RPRElBTF9XQUxMRVR9XG4gICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dCgnaG9sZFRvUmV2ZWFsQ29udGVudDUnKX1cbiAgICAgICAgICAgIDwvQnV0dG9uPixcbiAgICAgICAgICBdKX1cbiAgICAgICAgPC9UZXh0PlxuICAgICAgPC9Cb3g+XG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxCb3hcbiAgICAgIGNsYXNzTmFtZT1cImhvbGQtdG8tcmV2ZWFsLW1vZGFsXCJcbiAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgIGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLkNPTFVNTn1cbiAgICAgIGp1c3RpZnlDb250ZW50PXtKdXN0aWZ5Q29udGVudC5mbGV4U3RhcnR9XG4gICAgICBwYWRkaW5nPXs2fVxuICAgID5cbiAgICAgIDxCb3hcbiAgICAgICAgZGlzcGxheT17RElTUExBWS5GTEVYfVxuICAgICAgICBmbGV4RGlyZWN0aW9uPXtGTEVYX0RJUkVDVElPTi5ST1d9XG4gICAgICAgIGFsaWduSXRlbXM9e0FsaWduSXRlbXMuY2VudGVyfVxuICAgICAgICBqdXN0aWZ5Q29udGVudD17SnVzdGlmeUNvbnRlbnQuc3BhY2VCZXR3ZWVufVxuICAgICAgICBtYXJnaW5Cb3R0b209ezZ9XG4gICAgICA+XG4gICAgICAgIDxUZXh0IHZhcmlhbnQ9e1RleHRWYXJpYW50LmhlYWRpbmdTbX0+e3QoaG9sZFRvUmV2ZWFsVGl0bGUpfTwvVGV4dD5cbiAgICAgICAge3dpbGxIaWRlICYmIChcbiAgICAgICAgICA8QnV0dG9uSWNvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiaG9sZC10by1yZXZlYWwtbW9kYWxfX2Nsb3NlXCJcbiAgICAgICAgICAgIGljb25OYW1lPXtJY29uTmFtZS5DbG9zZX1cbiAgICAgICAgICAgIHNpemU9e1NpemUuU019XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHRyYWNrRXZlbnQoe1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuS2V5cyxcbiAgICAgICAgICAgICAgICBldmVudDogTWV0YU1ldHJpY3NFdmVudE5hbWUuU3JwSG9sZFRvUmV2ZWFsQ2xvc2VDbGlja2VkLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICAgIGtleV90eXBlOiBNZXRhTWV0cmljc0V2ZW50S2V5VHlwZS5TcnAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGhhbmRsZUNhbmNlbCgpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGFyaWFMYWJlbD17dCgnY2xvc2UnKX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9Cb3g+XG4gICAgICB7aG9sZFRvUmV2ZWFsVHlwZSA9PT0gJ1NSUCdcbiAgICAgICAgPyByZW5kZXJIb2xkVG9SZXZlYWxTUlBDb250ZW50KClcbiAgICAgICAgOiByZW5kZXJIb2xkVG9SZXZlYWxQcml2YXRlS2V5Q29udGVudCgpfVxuICAgICAgPEhvbGRUb1JldmVhbEJ1dHRvblxuICAgICAgICBidXR0b25UZXh0PXt0KGhvbGRUb1JldmVhbEJ1dHRvbil9XG4gICAgICAgIG9uTG9uZ1ByZXNzZWQ9e3VubG9ja31cbiAgICAgICAgbWFyZ2luTGVmdD1cImF1dG9cIlxuICAgICAgICBtYXJnaW5SaWdodD1cImF1dG9cIlxuICAgICAgLz5cbiAgICA8L0JveD5cbiAgKTtcbn07XG5cbkhvbGRUb1JldmVhbE1vZGFsLnByb3BUeXBlcyA9IHtcbiAgLy8gVGhlIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIGFmdGVyIHRoZSBob2xkIHRvIHJldmVhbCBsb25nIHByZXNzIGhhcyBiZWVuIGNvbXBsZXRlZFxuICBvbkxvbmdQcmVzc2VkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBoaWRlTW9kYWw6IFByb3BUeXBlcy5mdW5jLFxuICB3aWxsSGlkZTogUHJvcFR5cGVzLmJvb2wsXG4gIGhvbGRUb1JldmVhbFR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ1NSUCcsICdQcml2YXRlS2V5J10pLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoTW9kYWxQcm9wcyhIb2xkVG9SZXZlYWxNb2RhbCk7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9ob2xkLXRvLXJldmVhbC1tb2RhbCc7XG4iLCJpbXBvcnQgTW9kYWwgZnJvbSAnLi9tb2RhbCc7XG5cbmV4cG9ydCB7IE1vZGFsIH07XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vLi4vLi4vc3RvcmUvYWN0aW9ucyc7XG5pbXBvcnQgaXNNb2JpbGVWaWV3IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvaXMtbW9iaWxlLXZpZXcnO1xuaW1wb3J0IHsgZ2V0RW52aXJvbm1lbnRUeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vYXBwL3NjcmlwdHMvbGliL3V0aWwnO1xuaW1wb3J0IHsgRU5WSVJPTk1FTlRfVFlQRV9QT1BVUCB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvYXBwJztcblxuLy8gTW9kYWwgQ29tcG9uZW50c1xuaW1wb3J0IEFkZE5ldHdvcmtNb2RhbCBmcm9tICcuLi8uLi8uLi9wYWdlcy9vbmJvYXJkaW5nLWZsb3cvYWRkLW5ldHdvcmstbW9kYWwnO1xuaW1wb3J0IEFjY291bnREZXRhaWxzTW9kYWwgZnJvbSAnLi9hY2NvdW50LWRldGFpbHMtbW9kYWwnO1xuaW1wb3J0IEV4cG9ydFByaXZhdGVLZXlNb2RhbCBmcm9tICcuL2V4cG9ydC1wcml2YXRlLWtleS1tb2RhbCc7XG5pbXBvcnQgSGlkZVRva2VuQ29uZmlybWF0aW9uTW9kYWwgZnJvbSAnLi9oaWRlLXRva2VuLWNvbmZpcm1hdGlvbi1tb2RhbCc7XG5pbXBvcnQgUVJTY2FubmVyIGZyb20gJy4vcXItc2Nhbm5lcic7XG5cbmltcG9ydCBIb2xkVG9SZXZlYWxNb2RhbCBmcm9tICcuL2hvbGQtdG8tcmV2ZWFsLW1vZGFsJztcbmltcG9ydCBDb25maXJtUmVtb3ZlQWNjb3VudCBmcm9tICcuL2NvbmZpcm0tcmVtb3ZlLWFjY291bnQnO1xuaW1wb3J0IENvbmZpcm1SZXNldEFjY291bnQgZnJvbSAnLi9jb25maXJtLXJlc2V0LWFjY291bnQnO1xuaW1wb3J0IFRyYW5zYWN0aW9uQ29uZmlybWVkIGZyb20gJy4vdHJhbnNhY3Rpb24tY29uZmlybWVkJztcblxuaW1wb3J0IEZhZGVNb2RhbCBmcm9tICcuL2ZhZGUtbW9kYWwnO1xuaW1wb3J0IFJlamVjdFRyYW5zYWN0aW9ucyBmcm9tICcuL3JlamVjdC10cmFuc2FjdGlvbnMnO1xuaW1wb3J0IENvbmZpcm1EZWxldGVOZXR3b3JrIGZyb20gJy4vY29uZmlybS1kZWxldGUtbmV0d29yayc7XG5pbXBvcnQgRWRpdEFwcHJvdmFsUGVybWlzc2lvbiBmcm9tICcuL2VkaXQtYXBwcm92YWwtcGVybWlzc2lvbic7XG5pbXBvcnQgTmV3QWNjb3VudE1vZGFsIGZyb20gJy4vbmV3LWFjY291bnQtbW9kYWwnO1xuaW1wb3J0IEN1c3RvbWl6ZU5vbmNlTW9kYWwgZnJvbSAnLi9jdXN0b21pemUtbm9uY2UnO1xuaW1wb3J0IENvbnZlcnRUb2tlblRvTmZ0TW9kYWwgZnJvbSAnLi9jb252ZXJ0LXRva2VuLXRvLW5mdC1tb2RhbC9jb252ZXJ0LXRva2VuLXRvLW5mdC1tb2RhbCc7XG5pbXBvcnQgRXRoU2lnbk1vZGFsIGZyb20gJy4vZXRoLXNpZ24tbW9kYWwvZXRoLXNpZ24tbW9kYWwnO1xuXG5jb25zdCBtb2RhbENvbnRhaW5lckJhc2VTdHlsZSA9IHtcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoLTUwJSwgMCwgMHB4KScsXG4gIGJvcmRlcjogJzFweCBzb2xpZCB2YXIoLS1jb2xvci1ib3JkZXItZGVmYXVsdCknLFxuICBib3JkZXJSYWRpdXM6ICc4cHgnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS1jb2xvci1iYWNrZ3JvdW5kLWRlZmF1bHQpJyxcbiAgYm94U2hhZG93OiAndmFyKC0tc2hhZG93LXNpemUtc20pIHZhcigtLWNvbG9yLXNoYWRvdy1kZWZhdWx0KScsXG59O1xuXG5jb25zdCBtb2RhbENvbnRhaW5lckxhcHRvcFN0eWxlID0ge1xuICAuLi5tb2RhbENvbnRhaW5lckJhc2VTdHlsZSxcbiAgd2lkdGg6ICczNDRweCcsXG4gIHRvcDogJzE1JScsXG59O1xuXG5jb25zdCBtb2RhbENvbnRhaW5lck1vYmlsZVN0eWxlID0ge1xuICAuLi5tb2RhbENvbnRhaW5lckJhc2VTdHlsZSxcbiAgd2lkdGg6ICczMDlweCcsXG4gIHRvcDogJzEyLjUlJyxcbn07XG5cbmNvbnN0IGFjY291bnRNb2RhbFN0eWxlID0ge1xuICBtb2JpbGVNb2RhbFN0eWxlOiB7XG4gICAgd2lkdGg6ICc5NSUnLFxuICAgIC8vIHRvcDogaXNQb3B1cE9yTm90aWZpY2F0aW9uKCkgPT09ICdwb3B1cCcgPyAnNTJ2aCcgOiAnMzYuNXZoJyxcbiAgICBib3hTaGFkb3c6ICd2YXIoLS1zaGFkb3ctc2l6ZS14cykgdmFyKC0tY29sb3Itc2hhZG93LWRlZmF1bHQpJyxcbiAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgIHRvcDogJzEwJScsXG4gICAgdHJhbnNmb3JtOiAnbm9uZScsXG4gICAgbGVmdDogJzAnLFxuICAgIHJpZ2h0OiAnMCcsXG4gICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgfSxcbiAgbGFwdG9wTW9kYWxTdHlsZToge1xuICAgIHdpZHRoOiAnMzM1cHgnLFxuICAgIC8vIHRvcDogJ2NhbGMoMzMlICsgNDVweCknLFxuICAgIGJveFNoYWRvdzogJ3ZhcigtLXNoYWRvdy1zaXplLXhzKSB2YXIoLS1jb2xvci1zaGFkb3ctZGVmYXVsdCknLFxuICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgdG9wOiAnMTAlJyxcbiAgICB0cmFuc2Zvcm06ICdub25lJyxcbiAgICBsZWZ0OiAnMCcsXG4gICAgcmlnaHQ6ICcwJyxcbiAgICBtYXJnaW46ICcwIGF1dG8nLFxuICB9LFxuICBjb250ZW50U3R5bGU6IHtcbiAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICB9LFxufTtcblxuXG5jb25zdCBNT0RBTFMgPSB7XG4gIE9OQk9BUkRJTkdfQUREX05FVFdPUks6IHtcbiAgICBjb250ZW50czogPEFkZE5ldHdvcmtNb2RhbCAvPixcbiAgICAuLi5hY2NvdW50TW9kYWxTdHlsZSxcbiAgfSxcbiAgTkVXX0FDQ09VTlQ6IHtcbiAgICBjb250ZW50czogPE5ld0FjY291bnRNb2RhbCAvPixcbiAgICBtb2JpbGVNb2RhbFN0eWxlOiB7XG4gICAgICB3aWR0aDogJzk1JScsXG4gICAgICB0b3A6ICcxMCUnLFxuICAgICAgYm94U2hhZG93OiAndmFyKC0tc2hhZG93LXNpemUteHMpIHZhcigtLWNvbG9yLXNoYWRvdy1kZWZhdWx0KScsXG4gICAgICB0cmFuc2Zvcm06ICdub25lJyxcbiAgICAgIGxlZnQ6ICcwJyxcbiAgICAgIHJpZ2h0OiAnMCcsXG4gICAgICBtYXJnaW46ICcwIGF1dG8nLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnMTBweCcsXG4gICAgfSxcbiAgICBsYXB0b3BNb2RhbFN0eWxlOiB7XG4gICAgICB3aWR0aDogJzM3NXB4JyxcbiAgICAgIHRvcDogJzEwJScsXG4gICAgICBib3hTaGFkb3c6ICd2YXIoLS1zaGFkb3ctc2l6ZS14cykgdmFyKC0tY29sb3Itc2hhZG93LWRlZmF1bHQpJyxcbiAgICAgIHRyYW5zZm9ybTogJ25vbmUnLFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgcmlnaHQ6ICcwJyxcbiAgICAgIG1hcmdpbjogJzAgYXV0bycsXG4gICAgICBib3JkZXJSYWRpdXM6ICcxMHB4JyxcbiAgICB9LFxuICAgIGNvbnRlbnRTdHlsZToge1xuICAgICAgYm9yZGVyUmFkaXVzOiAnMTBweCcsXG4gICAgfSxcbiAgfSxcblxuICBBQ0NPVU5UX0RFVEFJTFM6IHtcbiAgICBjb250ZW50czogPEFjY291bnREZXRhaWxzTW9kYWwgLz4sXG4gICAgLi4uYWNjb3VudE1vZGFsU3R5bGUsXG4gIH0sXG5cbiAgRVhQT1JUX1BSSVZBVEVfS0VZOiB7XG4gICAgY29udGVudHM6IDxFeHBvcnRQcml2YXRlS2V5TW9kYWwgLz4sXG4gICAgLi4uYWNjb3VudE1vZGFsU3R5bGUsXG4gIH0sXG5cbiAgSE9MRF9UT19SRVZFQUxfU1JQOiB7XG4gICAgY29udGVudHM6IDxIb2xkVG9SZXZlYWxNb2RhbCAvPixcbiAgICBtb2JpbGVNb2RhbFN0eWxlOiB7XG4gICAgICAuLi5tb2RhbENvbnRhaW5lck1vYmlsZVN0eWxlLFxuICAgIH0sXG4gICAgbGFwdG9wTW9kYWxTdHlsZToge1xuICAgICAgLi4ubW9kYWxDb250YWluZXJMYXB0b3BTdHlsZSxcbiAgICB9LFxuICAgIGNvbnRlbnRTdHlsZToge1xuICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcbiAgICB9LFxuICB9LFxuXG4gIEhJREVfVE9LRU5fQ09ORklSTUFUSU9OOiB7XG4gICAgY29udGVudHM6IDxIaWRlVG9rZW5Db25maXJtYXRpb25Nb2RhbCAvPixcbiAgICBtb2JpbGVNb2RhbFN0eWxlOiB7XG4gICAgICB3aWR0aDogJzk1JScsXG4gICAgICB0b3A6IGdldEVudmlyb25tZW50VHlwZSgpID09PSBFTlZJUk9OTUVOVF9UWVBFX1BPUFVQID8gJzUydmgnIDogJzM2LjV2aCcsXG4gICAgfSxcbiAgICBsYXB0b3BNb2RhbFN0eWxlOiB7XG4gICAgICB3aWR0aDpcbiAgICAgICAgZ2V0RW52aXJvbm1lbnRUeXBlKCkgPT09IEVOVklST05NRU5UX1RZUEVfUE9QVVAgPyAnMzU3cHgnIDogJzQ0OXB4JyxcbiAgICAgIHRvcDogJ2NhbGMoMzMlICsgNDVweCknLFxuICAgICAgcGFkZGluZ0xlZnQ6XG4gICAgICAgIGdldEVudmlyb25tZW50VHlwZSgpID09PSBFTlZJUk9OTUVOVF9UWVBFX1BPUFVQID8gJzE2cHgnIDogbnVsbCxcbiAgICAgIHBhZGRpbmdSaWdodDpcbiAgICAgICAgZ2V0RW52aXJvbm1lbnRUeXBlKCkgPT09IEVOVklST05NRU5UX1RZUEVfUE9QVVAgPyAnMTZweCcgOiBudWxsLFxuICAgIH0sXG4gIH0sXG5cbiAgQ09ORklSTV9SRVNFVF9BQ0NPVU5UOiB7XG4gICAgY29udGVudHM6IDxDb25maXJtUmVzZXRBY2NvdW50IC8+LFxuICAgIG1vYmlsZU1vZGFsU3R5bGU6IHtcbiAgICAgIC4uLm1vZGFsQ29udGFpbmVyTW9iaWxlU3R5bGUsXG4gICAgfSxcbiAgICBsYXB0b3BNb2RhbFN0eWxlOiB7XG4gICAgICAuLi5tb2RhbENvbnRhaW5lckxhcHRvcFN0eWxlLFxuICAgIH0sXG4gICAgY29udGVudFN0eWxlOiB7XG4gICAgICBib3JkZXJSYWRpdXM6ICc4cHgnLFxuICAgIH0sXG4gIH0sXG5cbiAgRVRIX1NJR046IHtcbiAgICBjb250ZW50czogPEV0aFNpZ25Nb2RhbCAvPixcbiAgICBtb2JpbGVNb2RhbFN0eWxlOiB7XG4gICAgICAuLi5tb2RhbENvbnRhaW5lck1vYmlsZVN0eWxlLFxuICAgIH0sXG4gICAgbGFwdG9wTW9kYWxTdHlsZToge1xuICAgICAgLi4ubW9kYWxDb250YWluZXJMYXB0b3BTdHlsZSxcbiAgICB9LFxuICAgIGNvbnRlbnRTdHlsZToge1xuICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcbiAgICB9LFxuICB9LFxuICBDT05GSVJNX1JFTU9WRV9BQ0NPVU5UOiB7XG4gICAgY29udGVudHM6IDxDb25maXJtUmVtb3ZlQWNjb3VudCAvPixcbiAgICBtb2JpbGVNb2RhbFN0eWxlOiB7XG4gICAgICAuLi5tb2RhbENvbnRhaW5lck1vYmlsZVN0eWxlLFxuICAgIH0sXG4gICAgbGFwdG9wTW9kYWxTdHlsZToge1xuICAgICAgLi4ubW9kYWxDb250YWluZXJMYXB0b3BTdHlsZSxcbiAgICB9LFxuICAgIGNvbnRlbnRTdHlsZToge1xuICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcbiAgICB9LFxuICB9LFxuXG4gIENPTlZFUlRfVE9LRU5fVE9fTkZUOiB7XG4gICAgY29udGVudHM6IDxDb252ZXJ0VG9rZW5Ub05mdE1vZGFsIC8+LFxuICAgIG1vYmlsZU1vZGFsU3R5bGU6IHtcbiAgICAgIC4uLm1vZGFsQ29udGFpbmVyTW9iaWxlU3R5bGUsXG4gICAgfSxcbiAgICBsYXB0b3BNb2RhbFN0eWxlOiB7XG4gICAgICAuLi5tb2RhbENvbnRhaW5lckxhcHRvcFN0eWxlLFxuICAgIH0sXG4gICAgY29udGVudFN0eWxlOiB7XG4gICAgICBib3JkZXJSYWRpdXM6ICc4cHgnLFxuICAgIH0sXG4gIH0sXG5cbiAgQ09ORklSTV9ERUxFVEVfTkVUV09SSzoge1xuICAgIGNvbnRlbnRzOiA8Q29uZmlybURlbGV0ZU5ldHdvcmsgLz4sXG4gICAgbW9iaWxlTW9kYWxTdHlsZToge1xuICAgICAgLi4ubW9kYWxDb250YWluZXJNb2JpbGVTdHlsZSxcbiAgICB9LFxuICAgIGxhcHRvcE1vZGFsU3R5bGU6IHtcbiAgICAgIC4uLm1vZGFsQ29udGFpbmVyTGFwdG9wU3R5bGUsXG4gICAgfSxcbiAgICBjb250ZW50U3R5bGU6IHtcbiAgICAgIGJvcmRlclJhZGl1czogJzhweCcsXG4gICAgfSxcbiAgfSxcblxuICBFRElUX0FQUFJPVkFMX1BFUk1JU1NJT046IHtcbiAgICBjb250ZW50czogPEVkaXRBcHByb3ZhbFBlcm1pc3Npb24gLz4sXG4gICAgbW9iaWxlTW9kYWxTdHlsZToge1xuICAgICAgd2lkdGg6ICc5NXZ3JyxcbiAgICAgIGhlaWdodDogJzEwMHZoJyxcbiAgICAgIHRvcDogJzUwcHgnLFxuICAgICAgdHJhbnNmb3JtOiAnbm9uZScsXG4gICAgICBsZWZ0OiAnMCcsXG4gICAgICByaWdodDogJzAnLFxuICAgICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICB9LFxuICAgIGxhcHRvcE1vZGFsU3R5bGU6IHtcbiAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICBoZWlnaHQ6ICcwcHgnLFxuICAgICAgdG9wOiAnODBweCcsXG4gICAgICBsZWZ0OiAnMHB4JyxcbiAgICAgIHRyYW5zZm9ybTogJ25vbmUnLFxuICAgICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIH0sXG4gICAgY29udGVudFN0eWxlOiB7XG4gICAgICBib3JkZXJSYWRpdXM6ICc4cHgnLFxuICAgIH0sXG4gIH0sXG5cbiAgVFJBTlNBQ1RJT05fQ09ORklSTUVEOiB7XG4gICAgZGlzYWJsZUJhY2tkcm9wQ2xpY2s6IHRydWUsXG4gICAgY29udGVudHM6IDxUcmFuc2FjdGlvbkNvbmZpcm1lZCAvPixcbiAgICBtb2JpbGVNb2RhbFN0eWxlOiB7XG4gICAgICAuLi5tb2RhbENvbnRhaW5lck1vYmlsZVN0eWxlLFxuICAgIH0sXG4gICAgbGFwdG9wTW9kYWxTdHlsZToge1xuICAgICAgLi4ubW9kYWxDb250YWluZXJMYXB0b3BTdHlsZSxcbiAgICB9LFxuICAgIGNvbnRlbnRTdHlsZToge1xuICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcbiAgICB9LFxuICB9LFxuXG4gIFFSX1NDQU5ORVI6IHtcbiAgICBjb250ZW50czogPFFSU2Nhbm5lciAvPixcbiAgICBtb2JpbGVNb2RhbFN0eWxlOiB7XG4gICAgICAuLi5tb2RhbENvbnRhaW5lck1vYmlsZVN0eWxlLFxuICAgIH0sXG4gICAgbGFwdG9wTW9kYWxTdHlsZToge1xuICAgICAgLi4ubW9kYWxDb250YWluZXJMYXB0b3BTdHlsZSxcbiAgICB9LFxuICAgIGNvbnRlbnRTdHlsZToge1xuICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcbiAgICB9LFxuICB9LFxuXG4gIFJFSkVDVF9UUkFOU0FDVElPTlM6IHtcbiAgICBjb250ZW50czogPFJlamVjdFRyYW5zYWN0aW9ucyAvPixcbiAgICBtb2JpbGVNb2RhbFN0eWxlOiB7XG4gICAgICAuLi5tb2RhbENvbnRhaW5lck1vYmlsZVN0eWxlLFxuICAgIH0sXG4gICAgbGFwdG9wTW9kYWxTdHlsZToge1xuICAgICAgLi4ubW9kYWxDb250YWluZXJMYXB0b3BTdHlsZSxcbiAgICB9LFxuICAgIGNvbnRlbnRTdHlsZToge1xuICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcbiAgICB9LFxuICB9LFxuXG4gIENVU1RPTUlaRV9OT05DRToge1xuICAgIGNvbnRlbnRzOiA8Q3VzdG9taXplTm9uY2VNb2RhbCAvPixcbiAgICBtb2JpbGVNb2RhbFN0eWxlOiB7XG4gICAgICAuLi5tb2RhbENvbnRhaW5lck1vYmlsZVN0eWxlLFxuICAgIH0sXG4gICAgbGFwdG9wTW9kYWxTdHlsZToge1xuICAgICAgLi4ubW9kYWxDb250YWluZXJMYXB0b3BTdHlsZSxcbiAgICB9LFxuICAgIGNvbnRlbnRTdHlsZToge1xuICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcbiAgICB9LFxuICB9LFxuXG5cbiAgREVGQVVMVDoge1xuICAgIGNvbnRlbnRzOiBbXSxcbiAgICBtb2JpbGVNb2RhbFN0eWxlOiB7fSxcbiAgICBsYXB0b3BNb2RhbFN0eWxlOiB7fSxcbiAgfSxcbn07XG5cbmNvbnN0IEJBQ0tEUk9QU1RZTEUgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLWNvbG9yLW92ZXJsYXktZGVmYXVsdCknLFxufTtcblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XG4gIHJldHVybiB7XG4gICAgYWN0aXZlOiBzdGF0ZS5hcHBTdGF0ZS5tb2RhbC5vcGVuLFxuICAgIG1vZGFsU3RhdGU6IHN0YXRlLmFwcFN0YXRlLm1vZGFsLm1vZGFsU3RhdGUsXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCkge1xuICByZXR1cm4ge1xuICAgIGhpZGVNb2RhbDogKGN1c3RvbU9uSGlkZU9wdHMpID0+IHtcbiAgICAgIGRpc3BhdGNoKGFjdGlvbnMuaGlkZU1vZGFsKCkpO1xuICAgICAgaWYgKGN1c3RvbU9uSGlkZU9wdHMgJiYgY3VzdG9tT25IaWRlT3B0cy5hY3Rpb24pIHtcbiAgICAgICAgZGlzcGF0Y2goY3VzdG9tT25IaWRlT3B0cy5hY3Rpb24oLi4uY3VzdG9tT25IaWRlT3B0cy5hcmdzKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBoaWRlV2FybmluZzogKCkgPT4ge1xuICAgICAgZGlzcGF0Y2goYWN0aW9ucy5oaWRlV2FybmluZygpKTtcbiAgICB9LFxuICB9O1xufVxuXG5jbGFzcyBNb2RhbCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgYWN0aXZlOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGhpZGVNb2RhbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBoaWRlV2FybmluZzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBtb2RhbFN0YXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgaGlkZSgpIHtcbiAgICB0aGlzLm1vZGFsUmVmLmhpZGUoKTtcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgdGhpcy5tb2RhbFJlZi5zaG93KCk7XG4gIH1cblxuICBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIF8pIHtcbiAgICBpZiAobmV4dFByb3BzLmFjdGl2ZSkge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmFjdGl2ZSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IG1vZGFsID0gTU9EQUxTW3RoaXMucHJvcHMubW9kYWxTdGF0ZS5uYW1lIHx8ICdERUZBVUxUJ107XG4gICAgY29uc3QgeyBjb250ZW50czogY2hpbGRyZW4sIGRpc2FibGVCYWNrZHJvcENsaWNrID0gZmFsc2UgfSA9IG1vZGFsO1xuICAgIGNvbnN0IG1vZGFsU3R5bGUgPVxuICAgICAgbW9kYWxbaXNNb2JpbGVWaWV3KCkgPyAnbW9iaWxlTW9kYWxTdHlsZScgOiAnbGFwdG9wTW9kYWxTdHlsZSddO1xuICAgIGNvbnN0IGNvbnRlbnRTdHlsZSA9IG1vZGFsLmNvbnRlbnRTdHlsZSB8fCB7fTtcblxuICAgIHJldHVybiAoXG4gICAgICA8RmFkZU1vZGFsXG4gICAgICAgIGtleWJvYXJkPXtmYWxzZX1cbiAgICAgICAgb25IaWRlPXsoKSA9PiB7XG4gICAgICAgICAgaWYgKG1vZGFsLm9uSGlkZSkge1xuICAgICAgICAgICAgbW9kYWwub25IaWRlKHtcbiAgICAgICAgICAgICAgaGlkZVdhcm5pbmc6IHRoaXMucHJvcHMuaGlkZVdhcm5pbmcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5wcm9wcy5oaWRlTW9kYWwobW9kYWwuY3VzdG9tT25IaWRlT3B0cyk7XG4gICAgICAgIH19XG4gICAgICAgIHJlZj17KHJlZikgPT4ge1xuICAgICAgICAgIHRoaXMubW9kYWxSZWYgPSByZWY7XG4gICAgICAgIH19XG4gICAgICAgIG1vZGFsU3R5bGU9e21vZGFsU3R5bGV9XG4gICAgICAgIGNvbnRlbnRTdHlsZT17Y29udGVudFN0eWxlfVxuICAgICAgICBiYWNrZHJvcFN0eWxlPXtCQUNLRFJPUFNUWUxFfVxuICAgICAgICBjbG9zZU9uQ2xpY2s9eyFkaXNhYmxlQmFja2Ryb3BDbGlja31cbiAgICAgID5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9GYWRlTW9kYWw+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShNb2RhbCk7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9uZXctYWNjb3VudC1tb2RhbC5jb250YWluZXInO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uLy4uL3VpL2J1dHRvbi9idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7IEJ1dHRvbkljb24sIEljb25OYW1lIH0gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50LWxpYnJhcnknO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXdBY2NvdW50TW9kYWwgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaGlkZU1vZGFsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG5ld0FjY291bnROdW1iZXI6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICBvblNhdmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgYWxpYXM6IHRoaXMuY29udGV4dC50KCduZXdBY2NvdW50TnVtYmVyTmFtZScsIFtcbiAgICAgIHRoaXMucHJvcHMubmV3QWNjb3VudE51bWJlcixcbiAgICBdKSxcbiAgfTtcblxuICBvbkNoYW5nZSA9IChlKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBhbGlhczogZS50YXJnZXQudmFsdWUsXG4gICAgfSk7XG4gIH07XG5cbiAgb25TdWJtaXQgPSAoKSA9PiB7XG4gICAgdGhpcy5wcm9wcy5vblNhdmUodGhpcy5zdGF0ZS5hbGlhcykudGhlbih0aGlzLnByb3BzLmhpZGVNb2RhbCk7XG4gIH07XG5cbiAgb25LZXlQcmVzcyA9IChlKSA9PiB7XG4gICAgaWYgKGUua2V5ID09PSAnRW50ZXInICYmIHRoaXMuc3RhdGUuYWxpYXMpIHtcbiAgICAgIHRoaXMub25TdWJtaXQoKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV3LWFjY291bnQtbW9kYWxcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZXctYWNjb3VudC1tb2RhbF9fY29udGVudFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV3LWFjY291bnQtbW9kYWxfX2NvbnRlbnRfX2hlYWRlclwiPlxuICAgICAgICAgICAge3QoJ25ld0FjY291bnQnKX1cbiAgICAgICAgICAgIDxCdXR0b25JY29uXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5ldy1hY2NvdW50LW1vZGFsX19jb250ZW50X19oZWFkZXItY2xvc2VcIlxuICAgICAgICAgICAgICBhcmlhTGFiZWw9e3QoJ2Nsb3NlJyl9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMucHJvcHMuaGlkZU1vZGFsfVxuICAgICAgICAgICAgICBpY29uTmFtZT17SWNvbk5hbWUuQ2xvc2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV3LWFjY291bnQtbW9kYWxfX2lucHV0LWxhYmVsXCI+XG4gICAgICAgICAgICB7dCgnYWNjb3VudE5hbWUnKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5ldy1hY2NvdW50LW1vZGFsX19pbnB1dFwiXG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX1cbiAgICAgICAgICAgIG9uS2V5UHJlc3M9e3RoaXMub25LZXlQcmVzc31cbiAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmFsaWFzfVxuICAgICAgICAgICAgYXV0b0ZvY3VzXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmV3LWFjY291bnQtbW9kYWxfX2Zvb3RlclwiPlxuICAgICAgICAgIDxCdXR0b24gdHlwZT1cInNlY29uZGFyeVwiIG9uQ2xpY2s9e3RoaXMucHJvcHMuaGlkZU1vZGFsfT5cbiAgICAgICAgICAgIHt0KCdjYW5jZWwnKX1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uU3VibWl0fVxuICAgICAgICAgICAgZGlzYWJsZWQ9eyF0aGlzLnN0YXRlLmFsaWFzfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCdzYXZlJyl9XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCAqIGFzIGFjdGlvbnMgZnJvbSAnLi4vLi4vLi4vLi4vc3RvcmUvYWN0aW9ucyc7XG5pbXBvcnQgTmV3QWNjb3VudE1vZGFsIGZyb20gJy4vbmV3LWFjY291bnQtbW9kYWwuY29tcG9uZW50JztcblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XG4gIHJldHVybiB7XG4gICAgLi4uKHN0YXRlLmFwcFN0YXRlLm1vZGFsLm1vZGFsU3RhdGUucHJvcHMgfHwge30pLFxuICB9O1xufVxuXG5mdW5jdGlvbiBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIHtcbiAgICBoaWRlTW9kYWw6ICgpID0+IGRpc3BhdGNoKGFjdGlvbnMuaGlkZU1vZGFsKCkpLFxuICAgIGNyZWF0ZUFjY291bnQ6IChuZXdBY2NvdW50TmFtZSkgPT4ge1xuICAgICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbnMuYWRkTmV3QWNjb3VudCgpKS50aGVuKChuZXdBY2NvdW50QWRkcmVzcykgPT4ge1xuICAgICAgICBpZiAobmV3QWNjb3VudE5hbWUpIHtcbiAgICAgICAgICBkaXNwYXRjaChhY3Rpb25zLnNldEFjY291bnRMYWJlbChuZXdBY2NvdW50QWRkcmVzcywgbmV3QWNjb3VudE5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3QWNjb3VudEFkZHJlc3M7XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpIHtcbiAgY29uc3QgeyBvbkNyZWF0ZU5ld0FjY291bnQgfSA9IHN0YXRlUHJvcHM7XG4gIGNvbnN0IHsgY3JlYXRlQWNjb3VudCB9ID0gZGlzcGF0Y2hQcm9wcztcblxuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlUHJvcHMsXG4gICAgLi4uZGlzcGF0Y2hQcm9wcyxcbiAgICBvblNhdmU6IChuZXdBY2NvdW50TmFtZSkgPT4ge1xuICAgICAgcmV0dXJuIGNyZWF0ZUFjY291bnQobmV3QWNjb3VudE5hbWUpLnRoZW4oKG5ld0FjY291bnRBZGRyZXNzKSA9PlxuICAgICAgICBvbkNyZWF0ZU5ld0FjY291bnQobmV3QWNjb3VudEFkZHJlc3MpLFxuICAgICAgKTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgbWVyZ2VQcm9wcyxcbikoTmV3QWNjb3VudE1vZGFsKTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL25pY2tuYW1lLXBvcG92ZXJzLmNvbXBvbmVudCc7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZ2V0QWNjb3VudExpbmsgfSBmcm9tICdAbWV0YW1hc2svZXRoZXJzY2FuLWxpbmsnO1xuaW1wb3J0IHsgYWRkVG9BZGRyZXNzQm9vayB9IGZyb20gJy4uLy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IHtcbiAgZ2V0UnBjUHJlZnNGb3JDdXJyZW50UHJvdmlkZXIsXG4gIGdldEN1cnJlbnRDaGFpbklkLFxuICBnZXRBZGRyZXNzQm9vayxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2VsZWN0b3JzJztcbmltcG9ydCBOaWNrbmFtZVBvcG92ZXIgZnJvbSAnLi4vLi4vLi4vdWkvbmlja25hbWUtcG9wb3Zlcic7XG5pbXBvcnQgVXBkYXRlTmlja25hbWVQb3BvdmVyIGZyb20gJy4uLy4uLy4uL3VpL3VwZGF0ZS1uaWNrbmFtZS1wb3BvdmVyL3VwZGF0ZS1uaWNrbmFtZS1wb3BvdmVyJztcblxuY29uc3QgU0hPV19OSUNLTkFNRV9QT1BPVkVSID0gJ1NIT1dfTklDS05BTUVfUE9QT1ZFUic7XG5jb25zdCBBRERfTklDS05BTUVfUE9QT1ZFUiA9ICdBRERfTklDS05BTUVfUE9QT1ZFUic7XG5cbmNvbnN0IE5pY2tuYW1lUG9wb3ZlcnMgPSAoeyBhZGRyZXNzLCBvbkNsb3NlIH0pID0+IHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gIGNvbnN0IFtwb3BvdmVyVG9EaXNwbGF5LCBzZXRQb3BvdmVyVG9EaXNwbGF5XSA9IHVzZVN0YXRlKFxuICAgIFNIT1dfTklDS05BTUVfUE9QT1ZFUixcbiAgKTtcblxuICBjb25zdCBhZGRyZXNzQm9vayA9IHVzZVNlbGVjdG9yKGdldEFkZHJlc3NCb29rKTtcbiAgY29uc3QgY2hhaW5JZCA9IHVzZVNlbGVjdG9yKGdldEN1cnJlbnRDaGFpbklkKTtcblxuICBjb25zdCBhZGRyZXNzQm9va0VudHJ5T2JqZWN0ID0gYWRkcmVzc0Jvb2suZmluZChcbiAgICAoZW50cnkpID0+IGVudHJ5LmFkZHJlc3MgPT09IGFkZHJlc3MsXG4gICk7XG5cbiAgY29uc3QgcmVjaXBpZW50Tmlja25hbWUgPSBhZGRyZXNzQm9va0VudHJ5T2JqZWN0Py5uYW1lO1xuICBjb25zdCBycGNQcmVmcyA9IHVzZVNlbGVjdG9yKGdldFJwY1ByZWZzRm9yQ3VycmVudFByb3ZpZGVyKTtcblxuICBjb25zdCBleHBsb3JlckxpbmsgPSBnZXRBY2NvdW50TGluayhcbiAgICBhZGRyZXNzLFxuICAgIGNoYWluSWQsXG4gICAgeyBibG9ja0V4cGxvcmVyVXJsOiBycGNQcmVmcz8uYmxvY2tFeHBsb3JlclVybCA/PyBudWxsIH0sXG4gICAgbnVsbCxcbiAgKTtcblxuICBpZiAocG9wb3ZlclRvRGlzcGxheSA9PT0gQUREX05JQ0tOQU1FX1BPUE9WRVIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFVwZGF0ZU5pY2tuYW1lUG9wb3ZlclxuICAgICAgICBhZGRyZXNzPXthZGRyZXNzfVxuICAgICAgICBuaWNrbmFtZT17cmVjaXBpZW50Tmlja25hbWUgfHwgbnVsbH1cbiAgICAgICAgbWVtbz17YWRkcmVzc0Jvb2tFbnRyeU9iamVjdD8ubWVtbyB8fCBudWxsfVxuICAgICAgICBvbkNsb3NlPXsoKSA9PiBzZXRQb3BvdmVyVG9EaXNwbGF5KFNIT1dfTklDS05BTUVfUE9QT1ZFUil9XG4gICAgICAgIG9uQWRkPXsocmVjaXBpZW50LCBuaWNrbmFtZSwgbWVtbykgPT5cbiAgICAgICAgICBkaXNwYXRjaChhZGRUb0FkZHJlc3NCb29rKHJlY2lwaWVudCwgbmlja25hbWUsIG1lbW8pKVxuICAgICAgICB9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICAvLyBTSE9XX05JQ0tOQU1FX1BPUE9WRVIgY2FzZVxuICByZXR1cm4gKFxuICAgIDxOaWNrbmFtZVBvcG92ZXJcbiAgICAgIGFkZHJlc3M9e2FkZHJlc3N9XG4gICAgICBuaWNrbmFtZT17cmVjaXBpZW50Tmlja25hbWUgfHwgbnVsbH1cbiAgICAgIG9uQ2xvc2U9e29uQ2xvc2V9XG4gICAgICBvbkFkZD17KCkgPT4gc2V0UG9wb3ZlclRvRGlzcGxheShBRERfTklDS05BTUVfUE9QT1ZFUil9XG4gICAgICBleHBsb3Jlckxpbms9e2V4cGxvcmVyTGlua31cbiAgICAvPlxuICApO1xufTtcblxuTmlja25hbWVQb3BvdmVycy5wcm9wVHlwZXMgPSB7XG4gIGFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTmlja25hbWVQb3BvdmVycztcbiIsImltcG9ydCBRclNjYW5uZXIgZnJvbSAnLi9xci1zY2FubmVyLmNvbnRhaW5lcic7XG5cbmV4cG9ydCBkZWZhdWx0IFFyU2Nhbm5lcjtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5pbXBvcnQgeyBCcm93c2VyUVJDb2RlUmVhZGVyIH0gZnJvbSAnQHp4aW5nL2xpYnJhcnknO1xuaW1wb3J0IHsgZ2V0RW52aXJvbm1lbnRUeXBlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vYXBwL3NjcmlwdHMvbGliL3V0aWwnO1xuaW1wb3J0IHsgRU5WSVJPTk1FTlRfVFlQRV9GVUxMU0NSRUVOIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9hcHAnO1xuaW1wb3J0IHsgU0VDT05EIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy90aW1lJztcbmltcG9ydCBTcGlubmVyIGZyb20gJy4uLy4uLy4uL3VpL3NwaW5uZXInO1xuaW1wb3J0IFdlYmNhbVV0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvd2ViY2FtLXV0aWxzJztcbmltcG9ydCB7IGdldFVSTCB9IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvdXRpbCc7XG5pbXBvcnQgUGFnZUNvbnRhaW5lckZvb3RlciBmcm9tICcuLi8uLi8uLi91aS9wYWdlLWNvbnRhaW5lci9wYWdlLWNvbnRhaW5lci1mb290ZXIvcGFnZS1jb250YWluZXItZm9vdGVyLmNvbXBvbmVudCc7XG5cbmNvbnN0IFJFQURZX1NUQVRFID0ge1xuICBBQ0NFU1NJTkdfQ0FNRVJBOiAnQUNDRVNTSU5HX0NBTUVSQScsXG4gIE5FRURfVE9fQUxMT1dfQUNDRVNTOiAnTkVFRF9UT19BTExPV19BQ0NFU1MnLFxuICBSRUFEWTogJ1JFQURZJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFFyU2Nhbm5lciBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaGlkZU1vZGFsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHFyQ29kZURldGVjdGVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG4gICAgdDogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0gdGhpcy5nZXRJbml0aWFsU3RhdGUoKTtcbiAgICB0aGlzLmNvZGVSZWFkZXIgPSBudWxsO1xuICAgIHRoaXMucGVybWlzc2lvbkNoZWNrZXIgPSBudWxsO1xuICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuXG4gICAgLy8gQ2xlYXIgcHJlLWV4aXN0aW5nIHFyIGNvZGUgZGF0YSBiZWZvcmUgc2Nhbm5pbmdcbiAgICB0aGlzLnByb3BzLnFyQ29kZURldGVjdGVkKG51bGwpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLmNoZWNrRW52aXJvbm1lbnQoKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShfLCBwcmV2U3RhdGUpIHtcbiAgICBjb25zdCB7IHJlYWR5IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKHByZXZTdGF0ZS5yZWFkeSAhPT0gcmVhZHkpIHtcbiAgICAgIGlmIChyZWFkeSA9PT0gUkVBRFlfU1RBVEUuUkVBRFkpIHtcbiAgICAgICAgdGhpcy5pbml0Q2FtZXJhKCk7XG4gICAgICB9IGVsc2UgaWYgKHJlYWR5ID09PSBSRUFEWV9TVEFURS5ORUVEX1RPX0FMTE9XX0FDQ0VTUykge1xuICAgICAgICB0aGlzLmNoZWNrUGVybWlzc2lvbnMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlYWR5OiBSRUFEWV9TVEFURS5BQ0NFU1NJTkdfQ0FNRVJBLFxuICAgICAgZXJyb3I6IG51bGwsXG4gICAgfTtcbiAgfVxuXG4gIGNoZWNrRW52aXJvbm1lbnQgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZW52aXJvbm1lbnRSZWFkeSB9ID0gYXdhaXQgV2ViY2FtVXRpbHMuY2hlY2tTdGF0dXMoKTtcbiAgICAgIGlmIChcbiAgICAgICAgIWVudmlyb25tZW50UmVhZHkgJiZcbiAgICAgICAgZ2V0RW52aXJvbm1lbnRUeXBlKCkgIT09IEVOVklST05NRU5UX1RZUEVfRlVMTFNDUkVFTlxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRVcmwgPSBnZXRVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICBjb25zdCBjdXJyZW50SGFzaCA9IGN1cnJlbnRVcmw/Lmhhc2g7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRSb3V0ZSA9IGN1cnJlbnRIYXNoID8gY3VycmVudEhhc2guc3Vic3RyaW5nKDEpIDogbnVsbDtcbiAgICAgICAgZ2xvYmFsLnBsYXRmb3JtLm9wZW5FeHRlbnNpb25JbkJyb3dzZXIoY3VycmVudFJvdXRlKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3IgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGluaXRpYWwgYXR0ZW1wdCBpcyByZXF1aXJlZCB0byB0cmlnZ2VyIHBlcm1pc3Npb24gcHJvbXB0XG4gICAgdGhpcy5pbml0Q2FtZXJhKCk7XG4gIH07XG5cbiAgY2hlY2tQZXJtaXNzaW9ucyA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBwZXJtaXNzaW9ucyB9ID0gYXdhaXQgV2ViY2FtVXRpbHMuY2hlY2tTdGF0dXMoKTtcbiAgICAgIGlmIChwZXJtaXNzaW9ucykge1xuICAgICAgICAvLyBMZXQgdGhlIHZpZGVvIHN0cmVhbSBsb2FkIGZpcnN0Li4uXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIFNFQ09ORCAqIDIpKTtcbiAgICAgICAgaWYgKCF0aGlzLm1vdW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHJlYWR5OiBSRUFEWV9TVEFURS5SRUFEWSB9KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICAgIC8vIEtlZXAgY2hlY2tpbmcgZm9yIHBlcm1pc3Npb25zXG4gICAgICAgIHRoaXMucGVybWlzc2lvbkNoZWNrZXIgPSBzZXRUaW1lb3V0KHRoaXMuY2hlY2tQZXJtaXNzaW9ucywgU0VDT05EKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3IgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBlcm1pc3Npb25DaGVja2VyKTtcbiAgICB0aGlzLnRlYXJkb3duQ29kZVJlYWRlcigpO1xuICB9XG5cbiAgdGVhcmRvd25Db2RlUmVhZGVyKCkge1xuICAgIGlmICh0aGlzLmNvZGVSZWFkZXIpIHtcbiAgICAgIHRoaXMuY29kZVJlYWRlci5yZXNldCgpO1xuICAgICAgdGhpcy5jb2RlUmVhZGVyLnN0b3AoKTtcbiAgICAgIHRoaXMuY29kZVJlYWRlciA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgaW5pdENhbWVyYSA9IGFzeW5jICgpID0+IHtcbiAgICAvLyBUaGUgYGRlY29kZUZyb21JbnB1dFZpZGVvRGV2aWNlYCBjYWxsIHByb21wdHMgdGhlIGJyb3dzZXIgdG8gc2hvd1xuICAgIC8vIHRoZSB1c2VyIHRoZSBjYW1lcmEgcGVybWlzc2lvbiByZXF1ZXN0LiAgV2UgbXVzdCB0aGVuIGNhbGwgaXQgYWdhaW5cbiAgICAvLyBvbmNlIHdlIHJlY2VpdmUgcGVybWlzc2lvbiBzbyB0aGF0IHRoZSB2aWRlbyBkaXNwbGF5cy5cbiAgICAvLyBJdCdzIGltcG9ydGFudCB0byBwcmV2ZW50IHRoaXMgY29kZVJlYWRlciBmcm9tIGJlaW5nIGNyZWF0ZWQgdHdpY2U7XG4gICAgLy8gRmlyZWZveCBvdGhlcndpc2Ugc3RhcnRzIDIgdmlkZW8gc3RyZWFtcywgb25lIG9mIHdoaWNoIGNhbm5vdCBiZSBzdG9wcGVkXG4gICAgaWYgKCF0aGlzLmNvZGVSZWFkZXIpIHtcbiAgICAgIHRoaXMuY29kZVJlYWRlciA9IG5ldyBCcm93c2VyUVJDb2RlUmVhZGVyKCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmNvZGVSZWFkZXIuZ2V0VmlkZW9JbnB1dERldmljZXMoKTtcbiAgICAgIHRoaXMuY2hlY2tQZXJtaXNzaW9ucygpO1xuICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuY29kZVJlYWRlci5kZWNvZGVGcm9tSW5wdXRWaWRlb0RldmljZShcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAndmlkZW8nLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucGFyc2VDb250ZW50KGNvbnRlbnQudGV4dCk7XG4gICAgICBpZiAoIXRoaXMubW91bnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHJlc3VsdC50eXBlID09PSAndW5rbm93bicpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yOiBuZXcgRXJyb3IodGhpcy5jb250ZXh0LnQoJ3Vua25vd25RckNvZGUnKSkgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnByb3BzLnFyQ29kZURldGVjdGVkKHJlc3VsdCk7XG4gICAgICAgIHRoaXMuc3RvcEFuZENsb3NlKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmICghdGhpcy5tb3VudGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChlcnJvci5uYW1lID09PSAnTm90QWxsb3dlZEVycm9yJykge1xuICAgICAgICBsb2cuaW5mbyhgUGVybWlzc2lvbiBkZW5pZWQ6ICcke2Vycm9yfSdgKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHJlYWR5OiBSRUFEWV9TVEFURS5ORUVEX1RPX0FMTE9XX0FDQ0VTUyB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvciB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcGFyc2VDb250ZW50KGNvbnRlbnQpIHtcbiAgICBsZXQgdHlwZSA9ICd1bmtub3duJztcbiAgICBsZXQgdmFsdWVzID0ge307XG5cbiAgICAvLyBIZXJlIHdlIGNvdWxkIGFkZCBtb3JlIGNhc2VzXG4gICAgLy8gVG8gcGFyc2Ugb3RoZXIgdHlwZSBvZiBsaW5rc1xuICAgIC8vIEZvciBleC4gRUlQLTY4MSAoaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC02ODEpXG5cbiAgICAvLyBFdGhlcmV1bSBhZGRyZXNzIGxpbmtzIC0gZm94IGV4LiBldGhlcmV1bToweC4uLi4uMTExMVxuICAgIGlmIChjb250ZW50LnNwbGl0KCdldGhlcmV1bTonKS5sZW5ndGggPiAxKSB7XG4gICAgICB0eXBlID0gJ2FkZHJlc3MnO1xuICAgICAgdmFsdWVzID0geyBhZGRyZXNzOiBjb250ZW50LnNwbGl0KCdldGhlcmV1bTonKVsxXSB9O1xuXG4gICAgICAvLyBSZWd1bGFyIGV0aGVyZXVtIGFkZHJlc3NlcyAtIGZveCBleC4gMHguLi4uLjExMTFcbiAgICB9IGVsc2UgaWYgKGNvbnRlbnQuc3Vic3RyaW5nKDAsIDIpLnRvTG93ZXJDYXNlKCkgPT09ICcweCcpIHtcbiAgICAgIHR5cGUgPSAnYWRkcmVzcyc7XG4gICAgICB2YWx1ZXMgPSB7IGFkZHJlc3M6IGNvbnRlbnQgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdHlwZSwgdmFsdWVzIH07XG4gIH1cblxuICBzdG9wQW5kQ2xvc2UgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMuY29kZVJlYWRlcikge1xuICAgICAgdGhpcy50ZWFyZG93bkNvZGVSZWFkZXIoKTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5oaWRlTW9kYWwoKTtcbiAgfTtcblxuICB0cnlBZ2FpbiA9ICgpID0+IHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5wZXJtaXNzaW9uQ2hlY2tlcik7XG4gICAgaWYgKHRoaXMuY29kZVJlYWRlcikge1xuICAgICAgdGhpcy50ZWFyZG93bkNvZGVSZWFkZXIoKTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh0aGlzLmdldEluaXRpYWxTdGF0ZSgpLCAoKSA9PiB7XG4gICAgICB0aGlzLmNoZWNrRW52aXJvbm1lbnQoKTtcbiAgICB9KTtcbiAgfTtcblxuICByZW5kZXJFcnJvcigpIHtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7IGVycm9yIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgbGV0IHRpdGxlLCBtc2c7XG4gICAgaWYgKGVycm9yLnR5cGUgPT09ICdOT19XRUJDQU1fRk9VTkQnKSB7XG4gICAgICB0aXRsZSA9IHQoJ25vV2ViY2FtRm91bmRUaXRsZScpO1xuICAgICAgbXNnID0gdCgnbm9XZWJjYW1Gb3VuZCcpO1xuICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZSA9PT0gdCgndW5rbm93blFyQ29kZScpKSB7XG4gICAgICBtc2cgPSB0KCd1bmtub3duUXJDb2RlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpdGxlID0gdCgndW5rbm93bkNhbWVyYUVycm9yVGl0bGUnKTtcbiAgICAgIG1zZyA9IHQoJ3Vua25vd25DYW1lcmFFcnJvcicpO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInFyLXNjYW5uZXJfX2ltYWdlXCI+XG4gICAgICAgICAgPGltZyBzcmM9XCJpbWFnZXMvd2ViY2FtLnN2Z1wiIHdpZHRoPVwiNzBcIiBoZWlnaHQ9XCI3MFwiIGFsdD1cIlwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7dGl0bGUgPyA8ZGl2IGNsYXNzTmFtZT1cInFyLXNjYW5uZXJfX3RpdGxlXCI+e3RpdGxlfTwvZGl2PiA6IG51bGx9XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicXItc2Nhbm5lcl9fZXJyb3JcIj57bXNnfTwvZGl2PlxuICAgICAgICA8UGFnZUNvbnRhaW5lckZvb3RlclxuICAgICAgICAgIG9uQ2FuY2VsPXt0aGlzLnN0b3BBbmRDbG9zZX1cbiAgICAgICAgICBvblN1Ym1pdD17dGhpcy50cnlBZ2Fpbn1cbiAgICAgICAgICBjYW5jZWxUZXh0PXt0KCdjYW5jZWwnKX1cbiAgICAgICAgICBzdWJtaXRUZXh0PXt0KCd0cnlBZ2FpbicpfVxuICAgICAgICAvPlxuICAgICAgPC8+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclZpZGVvKCkge1xuICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnN0IHsgcmVhZHkgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBsZXQgbWVzc2FnZTtcbiAgICBpZiAocmVhZHkgPT09IFJFQURZX1NUQVRFLkFDQ0VTU0lOR19DQU1FUkEpIHtcbiAgICAgIG1lc3NhZ2UgPSB0KCdhY2Nlc3NpbmdZb3VyQ2FtZXJhJyk7XG4gICAgfSBlbHNlIGlmIChyZWFkeSA9PT0gUkVBRFlfU1RBVEUuUkVBRFkpIHtcbiAgICAgIG1lc3NhZ2UgPSB0KCdzY2FuSW5zdHJ1Y3Rpb25zJyk7XG4gICAgfSBlbHNlIGlmIChyZWFkeSA9PT0gUkVBRFlfU1RBVEUuTkVFRF9UT19BTExPV19BQ0NFU1MpIHtcbiAgICAgIG1lc3NhZ2UgPSB0KCd5b3VOZWVkVG9BbGxvd0NhbWVyYUFjY2VzcycpO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInFyLXNjYW5uZXJfX3RpdGxlXCI+e2Ake3QoJ3NjYW5RckNvZGUnKX1gfTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInFyLXNjYW5uZXJfX2NvbnRlbnRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInFyLXNjYW5uZXJfX2NvbnRlbnRfX3ZpZGVvLXdyYXBwZXJcIj5cbiAgICAgICAgICAgIDx2aWRlb1xuICAgICAgICAgICAgICBpZD1cInZpZGVvXCJcbiAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiByZWFkeSA9PT0gUkVBRFlfU1RBVEUuUkVBRFkgPyAnYmxvY2snIDogJ25vbmUnLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtyZWFkeSA9PT0gUkVBRFlfU1RBVEUuUkVBRFkgPyBudWxsIDogKFxuICAgICAgICAgICAgICA8U3Bpbm5lciBjb2xvcj1cInZhcigtLWNvbG9yLXdhcm5pbmctZGVmYXVsdClcIiAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicXItc2Nhbm5lcl9fc3RhdHVzXCI+e21lc3NhZ2V9PC9kaXY+XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZXJyb3IgfSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicXItc2Nhbm5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInFyLXNjYW5uZXJfX2Nsb3NlXCIgb25DbGljaz17dGhpcy5zdG9wQW5kQ2xvc2V9PjwvZGl2PlxuICAgICAgICB7ZXJyb3IgPyB0aGlzLnJlbmRlckVycm9yKCkgOiB0aGlzLnJlbmRlclZpZGVvKCl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgaGlkZU1vZGFsLCBxckNvZGVEZXRlY3RlZCB9IGZyb20gJy4uLy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IFFyU2Nhbm5lciBmcm9tICcuL3FyLXNjYW5uZXIuY29tcG9uZW50JztcblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gKGRpc3BhdGNoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgaGlkZU1vZGFsOiAoKSA9PiBkaXNwYXRjaChoaWRlTW9kYWwoKSksXG4gICAgcXJDb2RlRGV0ZWN0ZWQ6IChkYXRhKSA9PiBkaXNwYXRjaChxckNvZGVEZXRlY3RlZChkYXRhKSksXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG51bGwsIG1hcERpc3BhdGNoVG9Qcm9wcykoUXJTY2FubmVyKTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL3JlamVjdC10cmFuc2FjdGlvbnMuY29udGFpbmVyJztcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi9tb2RhbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlamVjdFRyYW5zYWN0aW9uc01vZGFsIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG9uU3VibWl0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGhpZGVNb2RhbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1bmFwcHJvdmVkVHhDb3VudDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIGlzUmVxdWVzdFR5cGU6IFByb3BUeXBlcy5ib29sLFxuICB9O1xuXG4gIG9uU3VibWl0ID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgb25TdWJtaXQsIGhpZGVNb2RhbCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGF3YWl0IG9uU3VibWl0KCk7XG4gICAgaGlkZU1vZGFsKCk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnN0IHsgaGlkZU1vZGFsLCB1bmFwcHJvdmVkVHhDb3VudCwgaXNSZXF1ZXN0VHlwZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8TW9kYWxcbiAgICAgICAgaGVhZGVyVGV4dD17XG4gICAgICAgICAgaXNSZXF1ZXN0VHlwZVxuICAgICAgICAgICAgPyB0KCdyZWplY3RSZXF1ZXN0c04nLCBbdW5hcHByb3ZlZFR4Q291bnRdKVxuICAgICAgICAgICAgOiB0KCdyZWplY3RUeHNOJywgW3VuYXBwcm92ZWRUeENvdW50XSlcbiAgICAgICAgfVxuICAgICAgICBvbkNsb3NlPXtoaWRlTW9kYWx9XG4gICAgICAgIG9uU3VibWl0PXt0aGlzLm9uU3VibWl0fVxuICAgICAgICBvbkNhbmNlbD17aGlkZU1vZGFsfVxuICAgICAgICBzdWJtaXRUZXh0PXt0KCdyZWplY3RBbGwnKX1cbiAgICAgICAgY2FuY2VsVGV4dD17dCgnY2FuY2VsJyl9XG4gICAgICA+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZWplY3QtdHJhbnNhY3Rpb25zX19kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAge2lzUmVxdWVzdFR5cGVcbiAgICAgICAgICAgICAgPyB0KCdyZWplY3RSZXF1ZXN0c0Rlc2NyaXB0aW9uJywgW3VuYXBwcm92ZWRUeENvdW50XSlcbiAgICAgICAgICAgICAgOiB0KCdyZWplY3RUeHNEZXNjcmlwdGlvbicsIFt1bmFwcHJvdmVkVHhDb3VudF0pfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvTW9kYWw+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGNvbXBvc2UgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgd2l0aE1vZGFsUHJvcHMgZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9oaWdoZXItb3JkZXItY29tcG9uZW50cy93aXRoLW1vZGFsLXByb3BzJztcbmltcG9ydCBSZWplY3RUcmFuc2FjdGlvbnNNb2RhbCBmcm9tICcuL3JlamVjdC10cmFuc2FjdGlvbnMuY29tcG9uZW50JztcblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKF8sIG93blByb3BzKSA9PiB7XG4gIGNvbnN0IHsgdW5hcHByb3ZlZFR4Q291bnQgfSA9IG93blByb3BzO1xuXG4gIHJldHVybiB7XG4gICAgdW5hcHByb3ZlZFR4Q291bnQsXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21wb3NlKFxuICB3aXRoTW9kYWxQcm9wcyxcbiAgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpLFxuKShSZWplY3RUcmFuc2FjdGlvbnNNb2RhbCk7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi90cmFuc2FjdGlvbi1jb25maXJtZWQuY29udGFpbmVyJztcbiIsImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi9tb2RhbCc7XG5pbXBvcnQgeyBJY29uLCBJY29uTmFtZSwgSWNvblNpemUgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5pbXBvcnQgeyBJY29uQ29sb3IgfSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhbnNhY3Rpb25Db25maXJtZWQgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICB0OiBQcm9wVHlwZXMuZnVuYyxcbiAgfTtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG9uU3VibWl0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoaWRlTW9kYWw6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIGhhbmRsZVN1Ym1pdCA9ICgpID0+IHtcbiAgICBjb25zdCB7IGhpZGVNb2RhbCwgb25TdWJtaXQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBoaWRlTW9kYWwoKTtcblxuICAgIGlmIChvblN1Ym1pdCAmJiB0eXBlb2Ygb25TdWJtaXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9uU3VibWl0KCk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMuY29udGV4dDtcblxuICAgIHJldHVybiAoXG4gICAgICA8TW9kYWwgb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fSBzdWJtaXRUZXh0PXt0KCdvaycpfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cmFuc2FjdGlvbi1jb25maXJtZWRfX2NvbnRlbnRcIj5cbiAgICAgICAgICA8SWNvblxuICAgICAgICAgICAgbmFtZT17SWNvbk5hbWUuQ2hlY2t9XG4gICAgICAgICAgICBjb2xvcj17SWNvbkNvbG9yLnN1Y2Nlc3NEZWZhdWx0fVxuICAgICAgICAgICAgc2l6ZT17SWNvblNpemUuWGx9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyYW5zYWN0aW9uLWNvbmZpcm1lZF9fdGl0bGVcIj5cbiAgICAgICAgICAgIHtgJHt0KCdjb25maXJtZWQnKX0hYH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyYW5zYWN0aW9uLWNvbmZpcm1lZF9fZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgIHt0KCdpbml0aWFsVHJhbnNhY3Rpb25Db25maXJtZWQnKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L01vZGFsPlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB3aXRoTW9kYWxQcm9wcyBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2hpZ2hlci1vcmRlci1jb21wb25lbnRzL3dpdGgtbW9kYWwtcHJvcHMnO1xuaW1wb3J0IFRyYW5zYWN0aW9uQ29uZmlybWVkIGZyb20gJy4vdHJhbnNhY3Rpb24tY29uZmlybWVkLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhNb2RhbFByb3BzKFRyYW5zYWN0aW9uQ29uZmlybWVkKTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL211bHRpLWxheWVyLWZlZS1tZXNzYWdlJztcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY2FwdHVyZUV4Y2VwdGlvbiB9IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG5pbXBvcnQgVHJhbnNhY3Rpb25EZXRhaWxJdGVtIGZyb20gJy4uL3RyYW5zYWN0aW9uLWRldGFpbC1pdGVtL3RyYW5zYWN0aW9uLWRldGFpbC1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgVXNlclByZWZlcmVuY2VkQ3VycmVuY3lEaXNwbGF5IGZyb20gJy4uL3VzZXItcHJlZmVyZW5jZWQtY3VycmVuY3ktZGlzcGxheSc7XG5pbXBvcnQgZmV0Y2hFc3RpbWF0ZWRMMUZlZSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL3V0aWxzL29wdGltaXNtL2ZldGNoRXN0aW1hdGVkTDFGZWUnO1xuaW1wb3J0IHsgU0VDT05EQVJZIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvY29tbW9uJztcbmltcG9ydCB7IEkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dHMvaTE4bic7XG5pbXBvcnQgeyBzdW1IZXhlcyB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL2NvbnZlcnNpb24udXRpbHMnO1xuaW1wb3J0IHsgRXRoZXJEZW5vbWluYXRpb24gfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2NvbW1vbic7XG5pbXBvcnQgeyBOdW1lcmljIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvTnVtZXJpYyc7XG5pbXBvcnQgeyBnZXRVc2VDdXJyZW5jeVJhdGVDaGVjayB9IGZyb20gJy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE11bHRpbGF5ZXJGZWVNZXNzYWdlKHtcbiAgdHJhbnNhY3Rpb24sXG4gIGxheWVyMmZlZSxcbiAgbmF0aXZlQ3VycmVuY3ksXG4gIHBsYWluU3R5bGUsXG59KSB7XG4gIGNvbnN0IHQgPSB1c2VDb250ZXh0KEkxOG5Db250ZXh0KTtcbiAgY29uc3QgW2ZldGNoZWRMYXllcjFUb3RhbCwgc2V0TGF5ZXIxVG90YWxdID0gdXNlU3RhdGUobnVsbCk7XG5cbiAgY29uc3QgdXNlQ3VycmVuY3lSYXRlQ2hlY2sgPSB1c2VTZWxlY3RvcihnZXRVc2VDdXJyZW5jeVJhdGVDaGVjayk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXRyYW5zYWN0aW9uPy50eFBhcmFtcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBnZXRFc3RpbWF0ZWRMMUZlZSA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZldGNoRXN0aW1hdGVkTDFGZWUoXG4gICAgICAgICAgdHJhbnNhY3Rpb24/LmNoYWluSWQsXG4gICAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgICk7XG4gICAgICAgIHNldExheWVyMVRvdGFsKHJlc3VsdCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhcHR1cmVFeGNlcHRpb24oZSk7XG4gICAgICAgIHNldExheWVyMVRvdGFsKG51bGwpO1xuICAgICAgfVxuICAgIH07XG4gICAgZ2V0RXN0aW1hdGVkTDFGZWUoKTtcbiAgfSwgW3RyYW5zYWN0aW9uXSk7XG5cbiAgaWYgKCF0cmFuc2FjdGlvbj8udHhQYXJhbXMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBsYXllcjFUb3RhbCA9IHQoJ3Vua25vd24nKTtcbiAgbGV0IGZlZVRvdGFsSW5GaWF0ID0gdCgndW5rbm93bicpO1xuXG4gIGlmIChmZXRjaGVkTGF5ZXIxVG90YWwgIT09IG51bGwpIHtcbiAgICBjb25zdCBsYXllcjFUb3RhbEJOID0gbmV3IE51bWVyaWMoXG4gICAgICBmZXRjaGVkTGF5ZXIxVG90YWwsXG4gICAgICAxNixcbiAgICAgIEV0aGVyRGVub21pbmF0aW9uLldFSSxcbiAgICApO1xuICAgIGxheWVyMVRvdGFsID0gYCR7bGF5ZXIxVG90YWxCTlxuICAgICAgLnRvRGVub21pbmF0aW9uKEV0aGVyRGVub21pbmF0aW9uLkVUSClcbiAgICAgIC50b0ZpeGVkKDEyKX0gJHtuYXRpdmVDdXJyZW5jeX1gO1xuXG4gICAgZmVlVG90YWxJbkZpYXQgPSB1c2VDdXJyZW5jeVJhdGVDaGVjayA/IChcbiAgICAgIDxVc2VyUHJlZmVyZW5jZWRDdXJyZW5jeURpc3BsYXlcbiAgICAgICAgdHlwZT17U0VDT05EQVJZfVxuICAgICAgICB2YWx1ZT17ZmV0Y2hlZExheWVyMVRvdGFsfVxuICAgICAgICBzaG93RmlhdFxuICAgICAgICBoaWRlTGFiZWxcbiAgICAgIC8+XG4gICAgKSA6IG51bGw7XG4gIH1cblxuICBjb25zdCB0b3RhbEluV2VpSGV4ID0gc3VtSGV4ZXMoXG4gICAgbGF5ZXIyZmVlIHx8ICcweDAnLFxuICAgIGZldGNoZWRMYXllcjFUb3RhbCB8fCAnMHgwJyxcbiAgICB0cmFuc2FjdGlvbj8udHhQYXJhbXM/LnZhbHVlIHx8ICcweDAnLFxuICApO1xuXG4gIGNvbnN0IHRvdGFsQk4gPSBuZXcgTnVtZXJpYyh0b3RhbEluV2VpSGV4LCAxNiwgRXRoZXJEZW5vbWluYXRpb24uV0VJKTtcbiAgY29uc3QgdG90YWxJbkV0aCA9IGAke3RvdGFsQk5cbiAgICAudG9EZW5vbWluYXRpb24oRXRoZXJEZW5vbWluYXRpb24uRVRIKVxuICAgIC50b0ZpeGVkKDEyKX0gJHtuYXRpdmVDdXJyZW5jeX1gO1xuXG4gIGNvbnN0IHRvdGFsSW5GaWF0ID0gdXNlQ3VycmVuY3lSYXRlQ2hlY2sgPyAoXG4gICAgPFVzZXJQcmVmZXJlbmNlZEN1cnJlbmN5RGlzcGxheVxuICAgICAgdHlwZT17U0VDT05EQVJZfVxuICAgICAgdmFsdWU9e3RvdGFsSW5XZWlIZXh9XG4gICAgICBzaG93RmlhdFxuICAgICAgaGlkZUxhYmVsXG4gICAgLz5cbiAgKSA6IG51bGw7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm11bHRpLWxheWVyLWZlZS1tZXNzYWdlXCI+XG4gICAgICA8VHJhbnNhY3Rpb25EZXRhaWxJdGVtXG4gICAgICAgIGtleT1cIm11bHRpLWxheWVyLWZlZS1tZXNzYWdlLXRvdGFsLWl0ZW0tZ2FzLWZlZVwiXG4gICAgICAgIGRldGFpbFRpdGxlPXt0KCdsYXllcjFGZWVzJyl9XG4gICAgICAgIGRldGFpbFRvdGFsPXtsYXllcjFUb3RhbH1cbiAgICAgICAgZGV0YWlsVGV4dD17dXNlQ3VycmVuY3lSYXRlQ2hlY2sgJiYgZmVlVG90YWxJbkZpYXR9XG4gICAgICAgIG5vQm9sZD17cGxhaW5TdHlsZX1cbiAgICAgICAgZmxleFdpZHRoVmFsdWVzPXtwbGFpblN0eWxlfVxuICAgICAgLz5cbiAgICAgIDxUcmFuc2FjdGlvbkRldGFpbEl0ZW1cbiAgICAgICAga2V5PVwibXVsdGktbGF5ZXItZmVlLW1lc3NhZ2UtdG90YWwtaXRlbS10b3RhbFwiXG4gICAgICAgIGRldGFpbFRpdGxlPXt0KCd0b3RhbCcpfVxuICAgICAgICBkZXRhaWxUb3RhbD17dG90YWxJbkV0aH1cbiAgICAgICAgZGV0YWlsVGV4dD17dG90YWxJbkZpYXR9XG4gICAgICAgIHN1YlRpdGxlPXt0KCd0cmFuc2FjdGlvbkRldGFpbE11bHRpTGF5ZXJUb3RhbFN1YnRpdGxlJyl9XG4gICAgICAgIG5vQm9sZD17cGxhaW5TdHlsZX1cbiAgICAgICAgZmxleFdpZHRoVmFsdWVzPXtwbGFpblN0eWxlfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuTXVsdGlsYXllckZlZU1lc3NhZ2UucHJvcFR5cGVzID0ge1xuICB0cmFuc2FjdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgbGF5ZXIyZmVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBuYXRpdmVDdXJyZW5jeTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcGxhaW5TdHlsZTogUHJvcFR5cGVzLmJvb2wsXG59O1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vbXVsdGlwbGUtbm90aWZpY2F0aW9ucy5jb21wb25lbnQnO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE11bHRpcGxlTm90aWZpY2F0aW9ucyBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGNoaWxkcmVuOiBbXSxcbiAgICBjbGFzc05hbWVzOiBbXSxcbiAgfTtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgY2xhc3NOYW1lczogUHJvcFR5cGVzLmFycmF5LFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIHNob3dBbGw6IGZhbHNlLFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHNob3dBbGwgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgY2xhc3NOYW1lcyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNoaWxkcmVuVG9SZW5kZXIgPSBjaGlsZHJlbi5maWx0ZXIoQm9vbGVhbik7XG4gICAgaWYgKGNoaWxkcmVuVG9SZW5kZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoLi4uY2xhc3NOYW1lcywge1xuICAgICAgICAgICdob21lLW5vdGlmaWNhdGlvbi13cmFwcGVyLS1zaG93LWFsbCc6IHNob3dBbGwsXG4gICAgICAgICAgJ2hvbWUtbm90aWZpY2F0aW9uLXdyYXBwZXItLXNob3ctZmlyc3QnOiAhc2hvd0FsbCxcbiAgICAgICAgfSl9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlblRvUmVuZGVyfVxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwiaG9tZS1ub3RpZmljYXRpb24td3JhcHBlcl9faS1jb250YWluZXJcIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0U3RhdGUoeyBzaG93QWxsOiAhc2hvd0FsbCB9KX1cbiAgICAgICAgPlxuICAgICAgICAgIHtjaGlsZHJlblRvUmVuZGVyLmxlbmd0aCA+IDEgPyAoXG4gICAgICAgICAgICA8aVxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ2ZhIGZhLXNtIGZhLXNvcnQtYW1vdW50Jywge1xuICAgICAgICAgICAgICAgIGZsaXBwZWQ6ICFzaG93QWxsLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vbmV0d29yay1hY2NvdW50LWJhbGFuY2UtaGVhZGVyJztcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJY29uV2l0aEZhbGxiYWNrIGZyb20gJy4uLy4uL3VpL2ljb24td2l0aC1mYWxsYmFjayc7XG5pbXBvcnQgSWRlbnRpY29uIGZyb20gJy4uLy4uL3VpL2lkZW50aWNvbic7XG5pbXBvcnQge1xuICBESVNQTEFZLFxuICBGTEVYX0RJUkVDVElPTixcbiAgVGV4dFZhcmlhbnQsXG4gIEZvbnRXZWlnaHQsXG4gIEFsaWduSXRlbXMsXG4gIEp1c3RpZnlDb250ZW50LFxuICBUZXh0QWxpZ24sXG4gIFRleHRDb2xvcixcbn0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgQm94IGZyb20gJy4uLy4uL3VpL2JveC9ib3gnO1xuaW1wb3J0IHsgSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb250ZXh0cy9pMThuJztcbmltcG9ydCB7IENIQUlOX0lEX1RPX05FVFdPUktfSU1BR0VfVVJMX01BUCB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbmV0d29yayc7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50LWxpYnJhcnknO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOZXR3b3JrQWNjb3VudEJhbGFuY2VIZWFkZXIoe1xuICBuZXR3b3JrTmFtZSxcbiAgYWNjb3VudE5hbWUsXG4gIGFjY291bnRCYWxhbmNlLFxuICB0b2tlbk5hbWUsIC8vIERlcml2ZWQgZnJvbSBuYXRpdmVDdXJyZW5jeVxuICBhY2NvdW50QWRkcmVzcyxcbiAgY2hhaW5JZCxcbn0pIHtcbiAgY29uc3QgdCA9IHVzZUNvbnRleHQoSTE4bkNvbnRleHQpO1xuICBjb25zdCBuZXR3b3JrSWNvbiA9IENIQUlOX0lEX1RPX05FVFdPUktfSU1BR0VfVVJMX01BUFtjaGFpbklkXTtcbiAgY29uc3QgbmV0d29ya0ljb25XcmFwcGVyQ2xhc3MgPSBuZXR3b3JrSWNvblxuICAgID8gJ25ldHdvcmstYWNjb3VudC1iYWxhbmNlLWhlYWRlcl9fbmV0d29yay1hY2NvdW50X19pZGVudC1pY29uLWV0aGVyZXVtJ1xuICAgIDogJ25ldHdvcmstYWNjb3VudC1iYWxhbmNlLWhlYWRlcl9fbmV0d29yay1hY2NvdW50X19pZGVudC1pY29uLWV0aGVyZXVtLS1ncmF5JztcblxuICByZXR1cm4gKFxuICAgIDxCb3hcbiAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgIGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLlJPV31cbiAgICAgIHBhZGRpbmc9ezR9XG4gICAgICBjbGFzc05hbWU9XCJuZXR3b3JrLWFjY291bnQtYmFsYW5jZS1oZWFkZXJcIlxuICAgICAgYWxpZ25JdGVtcz17QWxpZ25JdGVtcy5jZW50ZXJ9XG4gICAgICBqdXN0aWZ5Q29udGVudD17SnVzdGlmeUNvbnRlbnQuc3BhY2VCZXR3ZWVufVxuICAgID5cbiAgICAgIDxCb3hcbiAgICAgICAgZGlzcGxheT17RElTUExBWS5GTEVYfVxuICAgICAgICBmbGV4RGlyZWN0aW9uPXtGTEVYX0RJUkVDVElPTi5ST1d9XG4gICAgICAgIGFsaWduSXRlbXM9e0FsaWduSXRlbXMuY2VudGVyfVxuICAgICAgICBnYXA9ezJ9XG4gICAgICA+XG4gICAgICAgIDxCb3hcbiAgICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgICAgZmxleERpcmVjdGlvbj17RkxFWF9ESVJFQ1RJT04uUk9XfVxuICAgICAgICAgIGFsaWduSXRlbXM9e0FsaWduSXRlbXMuY2VudGVyfVxuICAgICAgICA+XG4gICAgICAgICAgPElkZW50aWNvbiBhZGRyZXNzPXthY2NvdW50QWRkcmVzc30gZGlhbWV0ZXI9ezMyfSAvPlxuICAgICAgICAgIDxJY29uV2l0aEZhbGxiYWNrXG4gICAgICAgICAgICBuYW1lPXtuZXR3b3JrTmFtZX1cbiAgICAgICAgICAgIHNpemU9ezE2fVxuICAgICAgICAgICAgaWNvbj17bmV0d29ya0ljb259XG4gICAgICAgICAgICB3cmFwcGVyQ2xhc3NOYW1lPXtuZXR3b3JrSWNvbldyYXBwZXJDbGFzc31cbiAgICAgICAgICAvPlxuICAgICAgICA8L0JveD5cbiAgICAgICAgPEJveFxuICAgICAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgICAgICBhbGlnbkl0ZW1zPXtBbGlnbkl0ZW1zLmZsZXhTdGFydH1cbiAgICAgICAgICBmbGV4RGlyZWN0aW9uPXtGTEVYX0RJUkVDVElPTi5DT0xVTU59XG4gICAgICAgID5cbiAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtfVxuICAgICAgICAgICAgYXM9XCJoNlwiXG4gICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHRBbHRlcm5hdGl2ZX1cbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbT17MH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7bmV0d29ya05hbWV9XG4gICAgICAgICAgPC9UZXh0PlxuXG4gICAgICAgICAgPFRleHRcbiAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICAgIGFzPVwiaDZcIlxuICAgICAgICAgICAgY29sb3I9e1RleHRDb2xvci50ZXh0RGVmYXVsdH1cbiAgICAgICAgICAgIGZvbnRXZWlnaHQ9e0ZvbnRXZWlnaHQuQm9sZH1cbiAgICAgICAgICAgIG1hcmdpblRvcD17MH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7YWNjb3VudE5hbWV9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICA8L0JveD5cbiAgICAgIDwvQm94PlxuICAgICAgPEJveFxuICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgIGFsaWduSXRlbXM9e0FsaWduSXRlbXMuZmxleEVuZH1cbiAgICAgICAgZmxleERpcmVjdGlvbj17RkxFWF9ESVJFQ1RJT04uQ09MVU1OfVxuICAgICAgPlxuICAgICAgICA8VGV4dFxuICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHRBbHRlcm5hdGl2ZX1cbiAgICAgICAgICBtYXJnaW5Cb3R0b209ezB9XG4gICAgICAgID5cbiAgICAgICAgICB7dCgnYmFsYW5jZScpfVxuICAgICAgICA8L1RleHQ+XG5cbiAgICAgICAgPFRleHRcbiAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219XG4gICAgICAgICAgYXM9XCJoNlwiXG4gICAgICAgICAgY29sb3I9e1RleHRDb2xvci50ZXh0RGVmYXVsdH1cbiAgICAgICAgICBmb250V2VpZ2h0PXtGb250V2VpZ2h0LkJvbGR9XG4gICAgICAgICAgbWFyZ2luVG9wPXswfVxuICAgICAgICAgIGFsaWduPXtUZXh0QWxpZ24uRW5kfVxuICAgICAgICA+XG4gICAgICAgICAge2FjY291bnRCYWxhbmNlfSB7dG9rZW5OYW1lfVxuICAgICAgICA8L1RleHQ+XG4gICAgICA8L0JveD5cbiAgICA8L0JveD5cbiAgKTtcbn1cblxuTmV0d29ya0FjY291bnRCYWxhbmNlSGVhZGVyLnByb3BUeXBlcyA9IHtcbiAgbmV0d29ya05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFjY291bnROYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhY2NvdW50QmFsYW5jZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdG9rZW5OYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhY2NvdW50QWRkcmVzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2hhaW5JZDogUHJvcFR5cGVzLnN0cmluZyxcbn07XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9uZXR3b3JrLWRpc3BsYXknO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHtcbiAgTkVUV09SS19UWVBFUyxcbiAgQlVJTFRfSU5fTkVUV09SS1MsXG59IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbmV0d29yayc7XG5cbmltcG9ydCBMb2FkaW5nSW5kaWNhdG9yIGZyb20gJy4uLy4uL3VpL2xvYWRpbmctaW5kaWNhdG9yJztcbmltcG9ydCBDb2xvckluZGljYXRvciBmcm9tICcuLi8uLi91aS9jb2xvci1pbmRpY2F0b3InO1xuaW1wb3J0IHtcbiAgQm9yZGVyQ29sb3IsXG4gIEljb25Db2xvcixcbiAgU2l6ZSxcbiAgVHlwb2dyYXBoeVZhcmlhbnQsXG59IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IENoaXAgZnJvbSAnLi4vLi4vdWkvY2hpcC9jaGlwJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuaW1wb3J0IHsgaXNOZXR3b3JrTG9hZGluZyB9IGZyb20gJy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBJY29uLCBJY29uTmFtZSwgSWNvblNpemUgfSBmcm9tICcuLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5pbXBvcnQgeyBnZXRQcm92aWRlckNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2R1Y2tzL21ldGFtYXNrL21ldGFtYXNrJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTmV0d29ya0Rpc3BsYXkoe1xuICBpbmRpY2F0b3JTaXplLFxuICBkaXNhYmxlZCxcbiAgbGFiZWxQcm9wcyxcbiAgdGFyZ2V0TmV0d29yayxcbiAgb25DbGljayxcbn0pIHtcbiAgY29uc3QgbmV0d29ya0lzTG9hZGluZyA9IHVzZVNlbGVjdG9yKGlzTmV0d29ya0xvYWRpbmcpO1xuICBjb25zdCBwcm92aWRlckNvbmZpZyA9IHVzZVNlbGVjdG9yKGdldFByb3ZpZGVyQ29uZmlnKTtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG5cbiAgY29uc3QgeyBuaWNrbmFtZSwgdHlwZTogbmV0d29ya1R5cGUgfSA9IHRhcmdldE5ldHdvcmsgPz8gcHJvdmlkZXJDb25maWc7XG5cbiAgcmV0dXJuIChcbiAgICA8Q2hpcFxuICAgICAgZGF0YVRlc3RJZD1cIm5ldHdvcmstZGlzcGxheVwiXG4gICAgICBib3JkZXJDb2xvcj17XG4gICAgICAgIG9uQ2xpY2sgPyBCb3JkZXJDb2xvci5ib3JkZXJEZWZhdWx0IDogQm9yZGVyQ29sb3IuYm9yZGVyTXV0ZWRcbiAgICAgIH1cbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICBsZWZ0SWNvbj17XG4gICAgICAgIDxMb2FkaW5nSW5kaWNhdG9yXG4gICAgICAgICAgYWx0PXt0KCdhdHRlbXB0aW5nQ29ubmVjdCcpfVxuICAgICAgICAgIHRpdGxlPXt0KCdhdHRlbXB0aW5nQ29ubmVjdCcpfVxuICAgICAgICAgIGlzTG9hZGluZz17bmV0d29ya0lzTG9hZGluZ31cbiAgICAgICAgPlxuICAgICAgICAgIDxDb2xvckluZGljYXRvclxuICAgICAgICAgICAgY29sb3I9e1xuICAgICAgICAgICAgICBuZXR3b3JrVHlwZSA9PT0gTkVUV09SS19UWVBFUy5SUENcbiAgICAgICAgICAgICAgICA/IEljb25Db2xvci5pY29uTXV0ZWRcbiAgICAgICAgICAgICAgICA6IG5ldHdvcmtUeXBlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaXplPXtpbmRpY2F0b3JTaXplfVxuICAgICAgICAgICAgdHlwZT17Q29sb3JJbmRpY2F0b3IuVFlQRVMuRklMTEVEfVxuICAgICAgICAgICAgaWNvbkNsYXNzTmFtZT17XG4gICAgICAgICAgICAgIG5ldHdvcmtUeXBlID09PSBORVRXT1JLX1RZUEVTLlJQQyAmJiBpbmRpY2F0b3JTaXplICE9PSBTaXplLlhTXG4gICAgICAgICAgICAgICAgPyAnZmEgZmEtcXVlc3Rpb24nXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0xvYWRpbmdJbmRpY2F0b3I+XG4gICAgICB9XG4gICAgICByaWdodEljb249e1xuICAgICAgICBvbkNsaWNrID8gPEljb24gbmFtZT17SWNvbk5hbWUuQXJyb3dEb3dufSBzaXplPXtJY29uU2l6ZS5Yc30gLz4gOiBudWxsXG4gICAgICB9XG4gICAgICBsYWJlbD17XG4gICAgICAgIG5ldHdvcmtUeXBlID09PSBORVRXT1JLX1RZUEVTLlJQQ1xuICAgICAgICAgID8gbmlja25hbWUgPz8gdCgncHJpdmF0ZU5ldHdvcmsnKVxuICAgICAgICAgIDogdChuZXR3b3JrVHlwZSlcbiAgICAgIH1cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcygnbmV0d29yay1kaXNwbGF5Jywge1xuICAgICAgICAnbmV0d29yay1kaXNwbGF5LS1kaXNhYmxlZCc6IGRpc2FibGVkLFxuICAgICAgICAnbmV0d29yay1kaXNwbGF5LS1jbGlja2FibGUnOiB0eXBlb2Ygb25DbGljayA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgIH0pfVxuICAgICAgbGFiZWxQcm9wcz17e1xuICAgICAgICB2YXJpYW50OiBUeXBvZ3JhcGh5VmFyaWFudC5INyxcbiAgICAgICAgLi4ubGFiZWxQcm9wcyxcbiAgICAgIH19XG4gICAgLz5cbiAgKTtcbn1cbk5ldHdvcmtEaXNwbGF5LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBpbmRpY2F0b3JcbiAgICovXG4gIGluZGljYXRvclNpemU6IFByb3BUeXBlcy5vbmVPZihPYmplY3QudmFsdWVzKFNpemUpKSxcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBwcm9wcyBvZiB0aGUgbGFiZWwgY2FuIHVzZSBtb3N0IG9mIHRoZSBUeXBvZ3JhcGh5IHByb3BzXG4gICAqL1xuICBsYWJlbFByb3BzOiBDaGlwLnByb3BUeXBlcy5sYWJlbFByb3BzLFxuICAvKipcbiAgICogVGhlIHRhcmdldCBuZXR3b3JrXG4gICAqL1xuICB0YXJnZXROZXR3b3JrOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHR5cGU6IFByb3BUeXBlcy5vbmVPZihbXG4gICAgICAuLi5PYmplY3Qua2V5cyhCVUlMVF9JTl9ORVRXT1JLUyksXG4gICAgICBORVRXT1JLX1RZUEVTLlJQQyxcbiAgICBdKSxcbiAgICBuaWNrbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgfSksXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBOZXR3b3JrRGlzcGxheSBpcyBkaXNhYmxlZFxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIG9uQ2xpY2sgZXZlbnQgaGFuZGxlciBvZiB0aGUgTmV0d29ya0Rpc3BsYXlcbiAgICogaWYgaXQgaXMgbm90IHBhc3NlZCBpdCBpcyBhc3N1bWVkIHRoYXQgdGhlIE5ldHdvcmtEaXNwbGF5XG4gICAqIHNob3VsZCBub3QgYmUgaW50ZXJhY3RpdmUgYW5kIHJlbW92ZXMgdGhlIGNhcmV0IGFuZCBjaGFuZ2VzIHRoZSBib3JkZXIgY29sb3JcbiAgICogb2YgdGhlIE5ldHdvcmtEaXNwbGF5XG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbk5ldHdvcmtEaXNwbGF5LmRlZmF1bHRQcm9wcyA9IHtcbiAgaW5kaWNhdG9yU2l6ZTogU2l6ZS5MRyxcbn07XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9uZnQtZGVmYXVsdC1pbWFnZSc7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgVGV4dFZhcmlhbnQgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTmZ0RGVmYXVsdEltYWdlKHsgbmFtZSwgdG9rZW5JZCwgaGFuZGxlSW1hZ2VDbGljayB9KSB7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBjb25zdCBUYWcgPSBoYW5kbGVJbWFnZUNsaWNrID8gJ2J1dHRvbicgOiAnZGl2JztcbiAgcmV0dXJuIChcbiAgICA8VGFnXG4gICAgICB0YWJJbmRleD17MH1cbiAgICAgIGRhdGEtdGVzdGlkPVwibmZ0LWRlZmF1bHQtaW1hZ2VcIlxuICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCduZnQtZGVmYXVsdCcsIHtcbiAgICAgICAgJ25mdC1kZWZhdWx0LS1jbGlja2FibGUnOiBoYW5kbGVJbWFnZUNsaWNrLFxuICAgICAgfSl9XG4gICAgICBvbkNsaWNrPXtoYW5kbGVJbWFnZUNsaWNrfVxuICAgID5cbiAgICAgIDxUZXh0IHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX0gYXM9XCJoNlwiIGNsYXNzTmFtZT1cIm5mdC1kZWZhdWx0X190ZXh0XCI+XG4gICAgICAgIHtuYW1lID8/IHQoJ3Vua25vd25Db2xsZWN0aW9uJyl9IDxiciAvPiAje3Rva2VuSWR9XG4gICAgICA8L1RleHQ+XG4gICAgPC9UYWc+XG4gICk7XG59XG5cbk5mdERlZmF1bHRJbWFnZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgTkZUIGNvbGxlY3Rpb24gaWYgbm90IHN1cHBsaWVkIHdpbGwgZGVmYXVsdCB0byBcIlVubmFtZWQgY29sbGVjdGlvblwiXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHRva2VuIGlkIG9mIHRoZSBuZnRcbiAgICovXG4gIHRva2VuSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY2xpY2sgaGFuZGxlciBmb3IgdGhlIE5GVCBkZWZhdWx0IGltYWdlXG4gICAqL1xuICBoYW5kbGVJbWFnZUNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGlzRXF1YWwgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEJveCBmcm9tICcuLi8uLi91aS9ib3gnO1xuaW1wb3J0IENhcmQgZnJvbSAnLi4vLi4vdWkvY2FyZCc7XG5pbXBvcnQge1xuICBUZXh0Q29sb3IsXG4gIEljb25Db2xvcixcbiAgVGV4dFZhcmlhbnQsXG4gIEZvbnRXZWlnaHQsXG4gIEp1c3RpZnlDb250ZW50LFxuICBGTEVYX0RJUkVDVElPTixcbiAgT3ZlcmZsb3dXcmFwLFxuICBESVNQTEFZLFxuICBCTE9DS19TSVpFUyxcbn0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7XG4gIGZvcm1hdERhdGUsXG4gIGdldEFzc2V0SW1hZ2VVUkwsXG4gIHNob3J0ZW5BZGRyZXNzLFxufSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgZ2V0TmZ0SW1hZ2VBbHQgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL3V0aWxzL25mdHMnO1xuaW1wb3J0IHtcbiAgZ2V0Q3VycmVudENoYWluSWQsXG4gIGdldElwZnNHYXRld2F5LFxuICBnZXRTZWxlY3RlZElkZW50aXR5LFxufSBmcm9tICcuLi8uLi8uLi9zZWxlY3RvcnMnO1xuaW1wb3J0IEFzc2V0TmF2aWdhdGlvbiBmcm9tICcuLi8uLi8uLi9wYWdlcy9hc3NldC9jb21wb25lbnRzL2Fzc2V0LW5hdmlnYXRpb24nO1xuaW1wb3J0IHsgZ2V0TmZ0Q29udHJhY3RzIH0gZnJvbSAnLi4vLi4vLi4vZHVja3MvbWV0YW1hc2svbWV0YW1hc2snO1xuaW1wb3J0IHsgREVGQVVMVF9ST1VURSwgU0VORF9ST1VURSB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL3JvdXRlcyc7XG5pbXBvcnQge1xuICBjaGVja0FuZFVwZGF0ZVNpbmdsZU5mdE93bmVyc2hpcFN0YXR1cyxcbiAgcmVtb3ZlQW5kSWdub3JlTmZ0LFxuICBzZXRSZW1vdmVOZnRNZXNzYWdlLFxuICBzZXROZXdOZnRBZGRlZE1lc3NhZ2UsXG59IGZyb20gJy4uLy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuaW1wb3J0IHsgQ0hBSU5fSURTIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9uZXR3b3JrJztcbmltcG9ydCB7IGdldEVudmlyb25tZW50VHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2FwcC9zY3JpcHRzL2xpYi91dGlsJztcbmltcG9ydCB7IEVOVklST05NRU5UX1RZUEVfUE9QVVAgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2FwcCc7XG5pbXBvcnQgTmZ0T3B0aW9ucyBmcm9tICcuLi9uZnQtb3B0aW9ucy9uZnQtb3B0aW9ucyc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uL3VpL2J1dHRvbic7XG5pbXBvcnQgeyBzdGFydE5ld0RyYWZ0VHJhbnNhY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9kdWNrcy9zZW5kJztcbmltcG9ydCBJbmZvVG9vbHRpcCBmcm9tICcuLi8uLi91aS9pbmZvLXRvb2x0aXAnO1xuaW1wb3J0IHsgdXNlUHJldmlvdXMgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VQcmV2aW91cyc7XG5pbXBvcnQgeyB1c2VDb3B5VG9DbGlwYm9hcmQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VDb3B5VG9DbGlwYm9hcmQnO1xuaW1wb3J0IHsgaXNFcXVhbENhc2VJbnNlbnNpdGl2ZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL3N0cmluZy11dGlscyc7XG5pbXBvcnQge1xuICBBc3NldFR5cGUsXG4gIFRva2VuU3RhbmRhcmQsXG59IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdHJhbnNhY3Rpb24nO1xuaW1wb3J0IE5mdERlZmF1bHRJbWFnZSBmcm9tICcuLi9uZnQtZGVmYXVsdC1pbWFnZSc7XG5pbXBvcnQgeyBCdXR0b25JY29uLCBJY29uTmFtZSwgVGV4dCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcbmltcG9ydCBUb29sdGlwIGZyb20gJy4uLy4uL3VpL3Rvb2x0aXAnO1xuaW1wb3J0IHsgZGVjV0VJVG9EZWNFVEggfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9jb252ZXJzaW9uLnV0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTmZ0RGV0YWlscyh7IG5mdCB9KSB7XG4gIGNvbnN0IHtcbiAgICBpbWFnZSxcbiAgICBpbWFnZU9yaWdpbmFsLFxuICAgIG5hbWUsXG4gICAgZGVzY3JpcHRpb24sXG4gICAgYWRkcmVzcyxcbiAgICB0b2tlbklkLFxuICAgIHN0YW5kYXJkLFxuICAgIGlzQ3VycmVudGx5T3duZWQsXG4gICAgbGFzdFNhbGUsXG4gICAgaW1hZ2VUaHVtYm5haWwsXG4gIH0gPSBuZnQ7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IGlwZnNHYXRld2F5ID0gdXNlU2VsZWN0b3IoZ2V0SXBmc0dhdGV3YXkpO1xuICBjb25zdCBuZnRDb250cmFjdHMgPSB1c2VTZWxlY3RvcihnZXROZnRDb250cmFjdHMpO1xuICBjb25zdCBjdXJyZW50TmV0d29yayA9IHVzZVNlbGVjdG9yKGdldEN1cnJlbnRDaGFpbklkKTtcbiAgY29uc3QgW2FkZHJlc3NDb3BpZWQsIGhhbmRsZUFkZHJlc3NDb3B5XSA9IHVzZUNvcHlUb0NsaXBib2FyZCgpO1xuXG4gIGNvbnN0IG5mdENvbnRyYWN0TmFtZSA9IG5mdENvbnRyYWN0cy5maW5kKCh7IGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyB9KSA9PlxuICAgIGlzRXF1YWxDYXNlSW5zZW5zaXRpdmUoY29udHJhY3RBZGRyZXNzLCBhZGRyZXNzKSxcbiAgKT8ubmFtZTtcbiAgY29uc3Qgc2VsZWN0ZWRBY2NvdW50TmFtZSA9IHVzZVNlbGVjdG9yKFxuICAgIChzdGF0ZSkgPT4gZ2V0U2VsZWN0ZWRJZGVudGl0eShzdGF0ZSkubmFtZSxcbiAgKTtcbiAgY29uc3QgbmZ0SW1hZ2VBbHQgPSBnZXROZnRJbWFnZUFsdChuZnQpO1xuICBjb25zdCBuZnRJbWFnZVVSTCA9IGdldEFzc2V0SW1hZ2VVUkwoaW1hZ2VPcmlnaW5hbCA/PyBpbWFnZSwgaXBmc0dhdGV3YXkpO1xuICBjb25zdCBpc0RhdGFVUkkgPSBuZnRJbWFnZVVSTC5zdGFydHNXaXRoKCdkYXRhOicpO1xuXG4gIGNvbnN0IGZvcm1hdHRlZFRpbWVzdGFtcCA9IGZvcm1hdERhdGUoXG4gICAgbmV3IERhdGUobGFzdFNhbGU/LmV2ZW50X3RpbWVzdGFtcCkuZ2V0VGltZSgpLFxuICAgICdNL2QveScsXG4gICk7XG5cbiAgY29uc3Qgb25SZW1vdmUgPSAoKSA9PiB7XG4gICAgZGlzcGF0Y2gocmVtb3ZlQW5kSWdub3JlTmZ0KGFkZHJlc3MsIHRva2VuSWQpKTtcbiAgICBkaXNwYXRjaChzZXROZXdOZnRBZGRlZE1lc3NhZ2UoJycpKTtcbiAgICBkaXNwYXRjaChzZXRSZW1vdmVOZnRNZXNzYWdlKCdzdWNjZXNzJykpO1xuICAgIGhpc3RvcnkucHVzaChERUZBVUxUX1JPVVRFKTtcbiAgfTtcblxuICBjb25zdCBwcmV2TmZ0ID0gdXNlUHJldmlvdXMobmZ0KTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWlzRXF1YWwocHJldk5mdCwgbmZ0KSkge1xuICAgICAgY2hlY2tBbmRVcGRhdGVTaW5nbGVOZnRPd25lcnNoaXBTdGF0dXMobmZ0KTtcbiAgICB9XG4gIH0sIFtuZnQsIHByZXZOZnRdKTtcblxuICBjb25zdCBnZXRPcGVuU2VhTGluayA9ICgpID0+IHtcbiAgICBzd2l0Y2ggKGN1cnJlbnROZXR3b3JrKSB7XG4gICAgICBjYXNlIENIQUlOX0lEUy5NQUlOTkVUOlxuICAgICAgICByZXR1cm4gYGh0dHBzOi8vb3BlbnNlYS5pby9hc3NldHMvJHthZGRyZXNzfS8ke3Rva2VuSWR9YDtcbiAgICAgIGNhc2UgQ0hBSU5fSURTLlBPTFlHT046XG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly9vcGVuc2VhLmlvL2Fzc2V0cy9tYXRpYy8ke2FkZHJlc3N9LyR7dG9rZW5JZH1gO1xuICAgICAgY2FzZSBDSEFJTl9JRFMuR09FUkxJOlxuICAgICAgY2FzZSBDSEFJTl9JRFMuU0VQT0xJQTpcbiAgICAgICAgcmV0dXJuIGBodHRwczovL3Rlc3RuZXRzLm9wZW5zZWEuaW8vYXNzZXRzLyR7YWRkcmVzc30vJHt0b2tlbklkfWA7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb3BlblNlYUxpbmsgPSBnZXRPcGVuU2VhTGluaygpO1xuICBjb25zdCBzZW5kRGlzYWJsZWQgPSBzdGFuZGFyZCAhPT0gVG9rZW5TdGFuZGFyZC5FUkM3MjE7XG4gIGNvbnN0IGluUG9wVXAgPSBnZXRFbnZpcm9ubWVudFR5cGUoKSA9PT0gRU5WSVJPTk1FTlRfVFlQRV9QT1BVUDtcblxuICBjb25zdCBvblNlbmQgPSBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZGlzcGF0Y2goXG4gICAgICBzdGFydE5ld0RyYWZ0VHJhbnNhY3Rpb24oe1xuICAgICAgICB0eXBlOiBBc3NldFR5cGUuTkZULFxuICAgICAgICBkZXRhaWxzOiBuZnQsXG4gICAgICB9KSxcbiAgICApO1xuICAgIGhpc3RvcnkucHVzaChTRU5EX1JPVVRFKTtcbiAgfTtcblxuICBjb25zdCByZW5kZXJTZW5kQnV0dG9uID0gKCkgPT4ge1xuICAgIGlmIChpc0N1cnJlbnRseU93bmVkID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiAnMzBweCcgfX0gLz47XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8Qm94XG4gICAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgICAgd2lkdGg9e2luUG9wVXAgPyBCTE9DS19TSVpFUy5GVUxMIDogQkxPQ0tfU0laRVMuSEFMRn1cbiAgICAgICAgbWFyZ2luPXtpblBvcFVwID8gWzQsIDBdIDogbnVsbH1cbiAgICAgID5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJwcmltYXJ5XCJcbiAgICAgICAgICBvbkNsaWNrPXtvblNlbmR9XG4gICAgICAgICAgZGlzYWJsZWQ9e3NlbmREaXNhYmxlZH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJuZnQtZGV0YWlsc19fc2VuZC1idXR0b25cIlxuICAgICAgICAgIGRhdGEtdGVzdGlkPVwibmZ0LXNlbmQtYnV0dG9uXCJcbiAgICAgICAgPlxuICAgICAgICAgIHt0KCdzZW5kJyl9XG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgICB7c2VuZERpc2FibGVkID8gKFxuICAgICAgICAgIDxJbmZvVG9vbHRpcCBwb3NpdGlvbj1cInRvcFwiIGNvbnRlbnRUZXh0PXt0KCdzZW5kaW5nRGlzYWJsZWQnKX0gLz5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8L0JveD5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxBc3NldE5hdmlnYXRpb25cbiAgICAgICAgYWNjb3VudE5hbWU9e3NlbGVjdGVkQWNjb3VudE5hbWV9XG4gICAgICAgIGFzc2V0TmFtZT17bmZ0Q29udHJhY3ROYW1lfVxuICAgICAgICBvbkJhY2s9eygpID0+IGhpc3RvcnkucHVzaChERUZBVUxUX1JPVVRFKX1cbiAgICAgICAgb3B0aW9uc0J1dHRvbj17XG4gICAgICAgICAgPE5mdE9wdGlvbnNcbiAgICAgICAgICAgIG9uVmlld09uT3BlbnNlYT17XG4gICAgICAgICAgICAgIG9wZW5TZWFMaW5rXG4gICAgICAgICAgICAgICAgPyAoKSA9PiBnbG9iYWwucGxhdGZvcm0ub3BlblRhYih7IHVybDogb3BlblNlYUxpbmsgfSlcbiAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9uUmVtb3ZlPXtvblJlbW92ZX1cbiAgICAgICAgICAvPlxuICAgICAgICB9XG4gICAgICAvPlxuICAgICAgPEJveCBjbGFzc05hbWU9XCJuZnQtZGV0YWlsc1wiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5mdC1kZXRhaWxzX190b3Atc2VjdGlvblwiPlxuICAgICAgICAgIDxDYXJkXG4gICAgICAgICAgICBwYWRkaW5nPXswfVxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ9e0p1c3RpZnlDb250ZW50LmNlbnRlcn1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5mdC1kZXRhaWxzX19jYXJkXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7aW1hZ2UgPyAoXG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJuZnQtZGV0YWlsc19faW1hZ2VcIlxuICAgICAgICAgICAgICAgIHNyYz17bmZ0SW1hZ2VVUkx9XG4gICAgICAgICAgICAgICAgYWx0PXtuZnRJbWFnZUFsdH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxOZnREZWZhdWx0SW1hZ2UgbmFtZT17bmFtZX0gdG9rZW5JZD17dG9rZW5JZH0gLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLkNPTFVNTn1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5mdC1kZXRhaWxzX19pbmZvXCJcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50PXtKdXN0aWZ5Q29udGVudC5zcGFjZUJldHdlZW59XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPFRleHRcbiAgICAgICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHREZWZhdWx0fVxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmhlYWRpbmdTbX1cbiAgICAgICAgICAgICAgICBhcz1cImg0XCJcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0PXtGb250V2VpZ2h0LkJvbGR9XG4gICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tPXsyfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge25hbWV9XG4gICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgPFRleHRcbiAgICAgICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHRNdXRlZH1cbiAgICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5TWR9XG4gICAgICAgICAgICAgICAgYXM9XCJoNVwiXG4gICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tPXs0fVxuICAgICAgICAgICAgICAgIG92ZXJmbG93V3JhcD17T3ZlcmZsb3dXcmFwLkJyZWFrV29yZH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICN7dG9rZW5JZH1cbiAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7ZGVzY3JpcHRpb24gPyAoXG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPFRleHRcbiAgICAgICAgICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IudGV4dERlZmF1bHR9XG4gICAgICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U21Cb2xkfVxuICAgICAgICAgICAgICAgICAgYXM9XCJoNlwiXG4gICAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b209ezJ9XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJuZnQtZGV0YWlsc19fZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHt0KCdkZXNjcmlwdGlvbicpfVxuICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgICAgY29sb3I9e1RleHRDb2xvci50ZXh0QWx0ZXJuYXRpdmV9XG4gICAgICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219XG4gICAgICAgICAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICAgICAgICAgIG92ZXJmbG93V3JhcD17T3ZlcmZsb3dXcmFwLkJyZWFrV29yZH1cbiAgICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbT17NH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7ZGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgICAge2luUG9wVXAgPyBudWxsIDogcmVuZGVyU2VuZEJ1dHRvbigpfVxuICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPEJveCBtYXJnaW5Cb3R0b209ezJ9PlxuICAgICAgICAgIHtsYXN0U2FsZSA/IChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIDxCb3ggZGlzcGxheT17RElTUExBWS5GTEVYfSBmbGV4RGlyZWN0aW9uPXtGTEVYX0RJUkVDVElPTi5ST1d9PlxuICAgICAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHREZWZhdWx0fVxuICAgICAgICAgICAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtQm9sZH1cbiAgICAgICAgICAgICAgICAgIGFzPVwiaDZcIlxuICAgICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tPXs0fVxuICAgICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ9ezJ9XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJuZnQtZGV0YWlsc19fbGluay10aXRsZVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge3QoJ2xhc3RTb2xkJyl9XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLlJPV31cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5mdC1kZXRhaWxzX19jb250cmFjdC13cmFwcGVyXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHRBbHRlcm5hdGl2ZX1cbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtfVxuICAgICAgICAgICAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dXcmFwPXtPdmVyZmxvd1dyYXAuQnJlYWtXb3JkfVxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b209ezR9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtmb3JtYXR0ZWRUaW1lc3RhbXB9XG4gICAgICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICA8Qm94IGRpc3BsYXk9e0RJU1BMQVkuRkxFWH0gZmxleERpcmVjdGlvbj17RkxFWF9ESVJFQ1RJT04uUk9XfT5cbiAgICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgICAgY29sb3I9e1RleHRDb2xvci50ZXh0RGVmYXVsdH1cbiAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbUJvbGR9XG4gICAgICAgICAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbT17NH1cbiAgICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0PXsyfVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmZ0LWRldGFpbHNfX2xpbmstdGl0bGVcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHt0KCdsYXN0UHJpY2VTb2xkJyl9XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLlJPV31cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5mdC1kZXRhaWxzX19jb250cmFjdC13cmFwcGVyXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHRBbHRlcm5hdGl2ZX1cbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtfVxuICAgICAgICAgICAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dXcmFwPXtPdmVyZmxvd1dyYXAuQnJlYWtXb3JkfVxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b209ezR9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtgJHtOdW1iZXIoZGVjV0VJVG9EZWNFVEgobGFzdFNhbGUudG90YWxfcHJpY2UpKX0gJHtcbiAgICAgICAgICAgICAgICAgICAgICBsYXN0U2FsZS5wYXltZW50X3Rva2VuLnN5bWJvbFxuICAgICAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICA8Qm94IGRpc3BsYXk9e0RJU1BMQVkuRkxFWH0gZmxleERpcmVjdGlvbj17RkxFWF9ESVJFQ1RJT04uUk9XfT5cbiAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IudGV4dERlZmF1bHR9XG4gICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbUJvbGR9XG4gICAgICAgICAgICAgIGFzPVwiaDZcIlxuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b209ezR9XG4gICAgICAgICAgICAgIG1hcmdpblJpZ2h0PXsyfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJuZnQtZGV0YWlsc19fbGluay10aXRsZVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0KCdzb3VyY2UnKX1cbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICAgICAgYXM9XCJoNlwiXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbT17NH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmZ0LWRldGFpbHNfX2ltYWdlLXNvdXJjZVwiXG4gICAgICAgICAgICAgIGNvbG9yPXtcbiAgICAgICAgICAgICAgICBpc0RhdGFVUkkgPyBUZXh0Q29sb3IudGV4dERlZmF1bHQgOiBUZXh0Q29sb3IucHJpbWFyeURlZmF1bHRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7aXNEYXRhVVJJID8gKFxuICAgICAgICAgICAgICAgIDw+e25mdEltYWdlVVJMfTwvPlxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgICAgICAgICBocmVmPXtuZnRJbWFnZVVSTH1cbiAgICAgICAgICAgICAgICAgIHRpdGxlPXtuZnRJbWFnZVVSTH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7bmZ0SW1hZ2VVUkx9XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIHtpbWFnZVRodW1ibmFpbCA/IChcbiAgICAgICAgICAgIDxCb3ggZGlzcGxheT17RElTUExBWS5GTEVYfSBmbGV4RGlyZWN0aW9uPXtGTEVYX0RJUkVDVElPTi5ST1d9PlxuICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IudGV4dERlZmF1bHR9XG4gICAgICAgICAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtQm9sZH1cbiAgICAgICAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b209ezR9XG4gICAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ9ezJ9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmZ0LWRldGFpbHNfX2xpbmstdGl0bGVcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3QoJ2xpbmsnKX1cbiAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICAgICAgICBtYXJnaW5Cb3R0b209ezR9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmZ0LWRldGFpbHNfX2ltYWdlLXNvdXJjZVwiXG4gICAgICAgICAgICAgICAgY29sb3I9e1xuICAgICAgICAgICAgICAgICAgaXNEYXRhVVJJID8gVGV4dENvbG9yLnRleHREZWZhdWx0IDogVGV4dENvbG9yLnByaW1hcnlEZWZhdWx0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9e25mdEltYWdlVVJMfVxuICAgICAgICAgICAgICAgICAgdGl0bGU9e25mdEltYWdlVVJMfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtpbWFnZVRodW1ibmFpbH1cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIDxCb3ggZGlzcGxheT17RElTUExBWS5GTEVYfSBmbGV4RGlyZWN0aW9uPXtGTEVYX0RJUkVDVElPTi5ST1d9PlxuICAgICAgICAgICAgPFRleHRcbiAgICAgICAgICAgICAgY29sb3I9e1RleHRDb2xvci50ZXh0RGVmYXVsdH1cbiAgICAgICAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtQm9sZH1cbiAgICAgICAgICAgICAgYXM9XCJoNlwiXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbT17NH1cbiAgICAgICAgICAgICAgbWFyZ2luUmlnaHQ9ezJ9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5mdC1kZXRhaWxzX19saW5rLXRpdGxlXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3QoJ2NvbnRyYWN0QWRkcmVzcycpfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPEJveFxuICAgICAgICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLlJPV31cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmZ0LWRldGFpbHNfX2NvbnRyYWN0LXdyYXBwZXJcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IudGV4dEFsdGVybmF0aXZlfVxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICAgICAgICBvdmVyZmxvd1dyYXA9e092ZXJmbG93V3JhcC5CcmVha1dvcmR9XG4gICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tPXs0fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3Nob3J0ZW5BZGRyZXNzKGFkZHJlc3MpfVxuICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICAgIDxUb29sdGlwXG4gICAgICAgICAgICAgICAgd3JhcHBlckNsYXNzTmFtZT1cIm5mdC1kZXRhaWxzX190b29sdGlwLXdyYXBwZXJcIlxuICAgICAgICAgICAgICAgIHBvc2l0aW9uPVwiYm90dG9tXCJcbiAgICAgICAgICAgICAgICB0aXRsZT17XG4gICAgICAgICAgICAgICAgICBhZGRyZXNzQ29waWVkID8gdCgnY29waWVkRXhjbGFtYXRpb24nKSA6IHQoJ2NvcHlUb0NsaXBib2FyZCcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbkljb25cbiAgICAgICAgICAgICAgICAgIGFyaWFMYWJlbD1cImNvcHlcIlxuICAgICAgICAgICAgICAgICAgY29sb3I9e0ljb25Db2xvci5pY29uQWx0ZXJuYXRpdmV9XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJuZnQtZGV0YWlsc19fY29udHJhY3QtY29weS1idXR0b25cIlxuICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJuZnQtYWRkcmVzcy1jb3B5XCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlQWRkcmVzc0NvcHkoYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgaWNvbk5hbWU9e1xuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzQ29waWVkID8gSWNvbk5hbWUuQ29weVN1Y2Nlc3MgOiBJY29uTmFtZS5Db3B5XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAge2luUG9wVXAgPyByZW5kZXJTZW5kQnV0dG9uKCkgOiBudWxsfVxuICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHRBbHRlcm5hdGl2ZX1cbiAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICAgIGFzPVwiaDZcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCduZnREaXNjbGFpbWVyJyl9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICA8L0JveD5cbiAgICAgIDwvQm94PlxuICAgIDwvPlxuICApO1xufVxuXG5OZnREZXRhaWxzLnByb3BUeXBlcyA9IHtcbiAgbmZ0OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB0b2tlbklkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgaXNDdXJyZW50bHlPd25lZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkZXNjcmlwdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpbWFnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdGFuZGFyZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpbWFnZVRodW1ibmFpbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpbWFnZVByZXZpZXc6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaW1hZ2VPcmlnaW5hbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjcmVhdG9yOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgYWRkcmVzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIGNvbmZpZzogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIHByb2ZpbGVfaW1nX3VybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB9KSxcbiAgICBsYXN0U2FsZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGV2ZW50X3RpbWVzdGFtcDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIHRvdGFsX3ByaWNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgcGF5bWVudF90b2tlbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgc3ltYm9sOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgfSksXG4gICAgfSksXG4gIH0pLFxufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb250ZXh0cy9pMThuJztcbmltcG9ydCB7IE1lbnUsIE1lbnVJdGVtIH0gZnJvbSAnLi4vLi4vdWkvbWVudSc7XG5pbXBvcnQgeyBCdXR0b25JY29uLCBJY29uTmFtZSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5cbmNvbnN0IE5mdE9wdGlvbnMgPSAoeyBvblJlbW92ZSwgb25WaWV3T25PcGVuc2VhIH0pID0+IHtcbiAgY29uc3QgdCA9IHVzZUNvbnRleHQoSTE4bkNvbnRleHQpO1xuICBjb25zdCBbbmZ0T3B0aW9uc09wZW4sIHNldE5mdE9wdGlvbnNPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgcmVmID0gdXNlUmVmKGZhbHNlKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgcmVmPXtyZWZ9PlxuICAgICAgPEJ1dHRvbkljb25cbiAgICAgICAgaWNvbk5hbWU9e0ljb25OYW1lLk1vcmVWZXJ0aWNhbH1cbiAgICAgICAgY2xhc3NOYW1lPVwibmZ0LW9wdGlvbnNfX2J1dHRvblwiXG4gICAgICAgIGRhdGEtdGVzdGlkPVwibmZ0LW9wdGlvbnNfX2J1dHRvblwiXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHNldE5mdE9wdGlvbnNPcGVuKHRydWUpfVxuICAgICAgICBjb2xvcj17Q29sb3IudGV4dERlZmF1bHR9XG4gICAgICAgIGFyaWFMYWJlbD17dCgnbmZ0T3B0aW9ucycpfVxuICAgICAgLz5cblxuICAgICAge25mdE9wdGlvbnNPcGVuID8gKFxuICAgICAgICA8TWVudVxuICAgICAgICAgIGRhdGEtdGVzdGlkPVwiY2xvc2UtbmZ0LW9wdGlvbnMtbWVudVwiXG4gICAgICAgICAgYW5jaG9yRWxlbWVudD17cmVmLmN1cnJlbnR9XG4gICAgICAgICAgb25IaWRlPXsoKSA9PiBzZXROZnRPcHRpb25zT3BlbihmYWxzZSl9XG4gICAgICAgID5cbiAgICAgICAgICB7b25WaWV3T25PcGVuc2VhID8gKFxuICAgICAgICAgICAgPE1lbnVJdGVtXG4gICAgICAgICAgICAgIGljb25OYW1lPXtJY29uTmFtZS5FeHBvcnR9XG4gICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwibmZ0LW9wdGlvbnNfX3ZpZXctb24tb3BlbnNlYVwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBzZXROZnRPcHRpb25zT3BlbihmYWxzZSk7XG4gICAgICAgICAgICAgICAgb25WaWV3T25PcGVuc2VhKCk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0KCd2aWV3T25PcGVuc2VhJyl9XG4gICAgICAgICAgICA8L01lbnVJdGVtPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIDxNZW51SXRlbVxuICAgICAgICAgICAgaWNvbk5hbWU9e0ljb25OYW1lLlRyYXNofVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJuZnQtaXRlbS1yZW1vdmVcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBzZXROZnRPcHRpb25zT3BlbihmYWxzZSk7XG4gICAgICAgICAgICAgIG9uUmVtb3ZlKCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCdyZW1vdmVORlQnKX1cbiAgICAgICAgICA8L01lbnVJdGVtPlxuICAgICAgICA8L01lbnU+XG4gICAgICApIDogbnVsbH1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbk5mdE9wdGlvbnMucHJvcFR5cGVzID0ge1xuICBvblJlbW92ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25WaWV3T25PcGVuc2VhOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5mdE9wdGlvbnM7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9uZnRzLWRldGVjdGlvbi1ub3RpY2UnO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBCb3ggZnJvbSAnLi4vLi4vdWkvYm94JztcbmltcG9ydCBEaWFsb2cgZnJvbSAnLi4vLi4vdWkvZGlhbG9nJztcbmltcG9ydCB7IEljb24sIEljb25OYW1lLCBUZXh0IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50LWxpYnJhcnknO1xuaW1wb3J0IHtcbiAgVGV4dFZhcmlhbnQsXG4gIFRleHRBbGlnbixcbiAgRm9udFdlaWdodCxcbiAgRElTUExBWSxcbiAgVGV4dENvbG9yLFxuICBJY29uQ29sb3IsXG59IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uL3VpL2J1dHRvbic7XG5pbXBvcnQgeyBFWFBFUklNRU5UQUxfUk9VVEUgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9yb3V0ZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOZnRzRGV0ZWN0aW9uTm90aWNlKCkge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcbiAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3ggY2xhc3NOYW1lPVwibmZ0cy1kZXRlY3Rpb24tbm90aWNlXCI+XG4gICAgICA8RGlhbG9nIHR5cGU9XCJtZXNzYWdlXCIgY2xhc3NOYW1lPVwibmZ0cy1kZXRlY3Rpb24tbm90aWNlX19tZXNzYWdlXCI+XG4gICAgICAgIDxCb3ggZGlzcGxheT17RElTUExBWS5GTEVYfT5cbiAgICAgICAgICA8Qm94IHBhZGRpbmdUb3A9ezF9PlxuICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgbmFtZT17SWNvbk5hbWUuSW5mb31cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW5mby1jaXJjbGVcIlxuICAgICAgICAgICAgICBjb2xvcj17SWNvbkNvbG9yLnByaW1hcnlEZWZhdWx0fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8Qm94IHBhZGRpbmdMZWZ0PXsyfT5cbiAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IudGV4dERlZmF1bHR9XG4gICAgICAgICAgICAgIGFsaWduPXtUZXh0QWxpZ24uTGVmdH1cbiAgICAgICAgICAgICAgdmFyaWFudD17VGV4dFZhcmlhbnQuYm9keVNtfVxuICAgICAgICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgICAgICAgZm9udFdlaWdodD17Rm9udFdlaWdodC5Cb2xkfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dCgnbmV3TkZUc0RldGVjdGVkJyl9XG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHREZWZhdWx0fVxuICAgICAgICAgICAgICBhbGlnbj17VGV4dEFsaWduLkxlZnR9XG4gICAgICAgICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgICAgICAgYXM9XCJoNlwiXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbT17NH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3QoJ25ld05GVERldGVjdGVkTWVzc2FnZScpfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwibGlua1wiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGhpc3RvcnkucHVzaChgJHtFWFBFUklNRU5UQUxfUk9VVEV9I2F1dG9kZXRlY3QtbmZ0c2ApO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJuZnRzLWRldGVjdGlvbi1ub3RpY2VfX21lc3NhZ2VfX2xpbmtcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dCgnc2VsZWN0TkZUUHJpdmFjeVByZWZlcmVuY2UnKX1cbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L0JveD5cbiAgICAgIDwvRGlhbG9nPlxuICAgIDwvQm94PlxuICApO1xufVxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vbmZ0cy1pdGVtcyc7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHVzZUhpc3RvcnkgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGlzRXF1YWwgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEJveCBmcm9tICcuLi8uLi91aS9ib3gnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vLi4vdWkvdHlwb2dyYXBoeS90eXBvZ3JhcGh5JztcbmltcG9ydCBDYXJkIGZyb20gJy4uLy4uL3VpL2NhcmQnO1xuaW1wb3J0IHtcbiAgQ29sb3IsXG4gIFR5cG9ncmFwaHlWYXJpYW50LFxuICBKdXN0aWZ5Q29udGVudCxcbiAgRkxFWF9ESVJFQ1RJT04sXG4gIEFsaWduSXRlbXMsXG4gIERJU1BMQVksXG4gIEJMT0NLX1NJWkVTLFxuICBGTEVYX1dSQVAsXG59IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgRU5WSVJPTk1FTlRfVFlQRV9QT1BVUCB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvYXBwJztcbmltcG9ydCB7IGdldEVudmlyb25tZW50VHlwZSB9IGZyb20gJy4uLy4uLy4uLy4uL2FwcC9zY3JpcHRzL2xpYi91dGlsJztcbmltcG9ydCB7XG4gIGdldEN1cnJlbnRDaGFpbklkLFxuICBnZXRJcGZzR2F0ZXdheSxcbiAgZ2V0U2VsZWN0ZWRBZGRyZXNzLFxufSBmcm9tICcuLi8uLi8uLi9zZWxlY3RvcnMnO1xuaW1wb3J0IHsgQVNTRVRfUk9VVEUgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9yb3V0ZXMnO1xuaW1wb3J0IHsgZ2V0QXNzZXRJbWFnZVVSTCB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBnZXROZnRJbWFnZUFsdCB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvbmZ0cyc7XG5pbXBvcnQgeyB1cGRhdGVOZnREcm9wRG93blN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvYWN0aW9ucyc7XG5pbXBvcnQgeyB1c2VQcmV2aW91cyB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZVByZXZpb3VzJztcbmltcG9ydCB7IGdldE5mdHNEcm9wZG93blN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vZHVja3MvbWV0YW1hc2svbWV0YW1hc2snO1xuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQgeyBJY29uLCBJY29uTmFtZSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcbmltcG9ydCBOZnREZWZhdWx0SW1hZ2UgZnJvbSAnLi4vbmZ0LWRlZmF1bHQtaW1hZ2UnO1xuXG5jb25zdCB3aWR0aCA9XG4gIGdldEVudmlyb25tZW50VHlwZSgpID09PSBFTlZJUk9OTUVOVF9UWVBFX1BPUFVQXG4gICAgPyBCTE9DS19TSVpFUy5PTkVfVEhJUkRcbiAgICA6IEJMT0NLX1NJWkVTLk9ORV9TSVhUSDtcblxuY29uc3QgUFJFVklPVVNMWV9PV05FRF9LRVkgPSAncHJldmlvdXNseU93bmVkJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTmZ0c0l0ZW1zKHtcbiAgY29sbGVjdGlvbnMgPSB7fSxcbiAgcHJldmlvdXNseU93bmVkQ29sbGVjdGlvbiA9IHt9LFxufSkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IGNvbGxlY3Rpb25zS2V5cyA9IE9iamVjdC5rZXlzKGNvbGxlY3Rpb25zKTtcbiAgY29uc3QgbmZ0c0Ryb3Bkb3duU3RhdGUgPSB1c2VTZWxlY3RvcihnZXROZnRzRHJvcGRvd25TdGF0ZSk7XG4gIGNvbnN0IHByZXZpb3VzQ29sbGVjdGlvbktleXMgPSB1c2VQcmV2aW91cyhjb2xsZWN0aW9uc0tleXMpO1xuICBjb25zdCBzZWxlY3RlZEFkZHJlc3MgPSB1c2VTZWxlY3RvcihnZXRTZWxlY3RlZEFkZHJlc3MpO1xuICBjb25zdCBjaGFpbklkID0gdXNlU2VsZWN0b3IoZ2V0Q3VycmVudENoYWluSWQpO1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChcbiAgICAgIGNoYWluSWQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgc2VsZWN0ZWRBZGRyZXNzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICFpc0VxdWFsKHByZXZpb3VzQ29sbGVjdGlvbktleXMsIGNvbGxlY3Rpb25zS2V5cykgJiZcbiAgICAgIChuZnRzRHJvcGRvd25TdGF0ZT8uW3NlbGVjdGVkQWRkcmVzc10/LltjaGFpbklkXSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIE9iamVjdC5rZXlzKG5mdHNEcm9wZG93blN0YXRlPy5bc2VsZWN0ZWRBZGRyZXNzXT8uW2NoYWluSWRdKS5sZW5ndGggPT09XG4gICAgICAgICAgMClcbiAgICApIHtcbiAgICAgIGNvbnN0IGluaXRTdGF0ZSA9IHt9O1xuICAgICAgY29sbGVjdGlvbnNLZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBpbml0U3RhdGVba2V5XSA9IHRydWU7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgbmV3TmZ0RHJvcGRvd25TdGF0ZSA9IHtcbiAgICAgICAgLi4ubmZ0c0Ryb3Bkb3duU3RhdGUsXG4gICAgICAgIFtzZWxlY3RlZEFkZHJlc3NdOiB7XG4gICAgICAgICAgLi4ubmZ0c0Ryb3Bkb3duU3RhdGU/LltzZWxlY3RlZEFkZHJlc3NdLFxuICAgICAgICAgIFtjaGFpbklkXTogaW5pdFN0YXRlLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgZGlzcGF0Y2godXBkYXRlTmZ0RHJvcERvd25TdGF0ZShuZXdOZnREcm9wZG93blN0YXRlKSk7XG4gICAgfVxuICB9LCBbXG4gICAgY29sbGVjdGlvbnNLZXlzLFxuICAgIHByZXZpb3VzQ29sbGVjdGlvbktleXMsXG4gICAgbmZ0c0Ryb3Bkb3duU3RhdGUsXG4gICAgc2VsZWN0ZWRBZGRyZXNzLFxuICAgIGNoYWluSWQsXG4gICAgZGlzcGF0Y2gsXG4gIF0pO1xuXG4gIGNvbnN0IGlwZnNHYXRld2F5ID0gdXNlU2VsZWN0b3IoZ2V0SXBmc0dhdGV3YXkpO1xuICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuXG4gIGNvbnN0IHJlbmRlckNvbGxlY3Rpb25JbWFnZSA9IChjb2xsZWN0aW9uSW1hZ2UsIGNvbGxlY3Rpb25OYW1lKSA9PiB7XG4gICAgaWYgKGNvbGxlY3Rpb25JbWFnZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGltZ1xuICAgICAgICAgIGFsdD17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgICAgc3JjPXtnZXRBc3NldEltYWdlVVJMKGNvbGxlY3Rpb25JbWFnZSwgaXBmc0dhdGV3YXkpfVxuICAgICAgICAgIGNsYXNzTmFtZT1cIm5mdHMtaXRlbXNfX2NvbGxlY3Rpb24taW1hZ2VcIlxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmZ0cy1pdGVtc19fY29sbGVjdGlvbi1pbWFnZS1hbHRcIj5cbiAgICAgICAge2NvbGxlY3Rpb25OYW1lPy5bMF0/LnRvVXBwZXJDYXNlKCkgPz8gbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlTmZ0RHJvcERvd25TdGF0ZUtleSA9IChrZXksIGlzRXhwYW5kZWQpID0+IHtcbiAgICBjb25zdCBuZXdDdXJyZW50QWNjb3VudFN0YXRlID0ge1xuICAgICAgLi4ubmZ0c0Ryb3Bkb3duU3RhdGVbc2VsZWN0ZWRBZGRyZXNzXVtjaGFpbklkXSxcbiAgICAgIFtrZXldOiAhaXNFeHBhbmRlZCxcbiAgICB9O1xuXG4gICAgY29uc3QgbmV3U3RhdGUgPSB7XG4gICAgICAuLi5uZnRzRHJvcGRvd25TdGF0ZSxcbiAgICAgIFtzZWxlY3RlZEFkZHJlc3NdOiB7XG4gICAgICAgIFtjaGFpbklkXTogbmV3Q3VycmVudEFjY291bnRTdGF0ZSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGRpc3BhdGNoKHVwZGF0ZU5mdERyb3BEb3duU3RhdGUobmV3U3RhdGUpKTtcbiAgfTtcblxuICBjb25zdCByZW5kZXJDb2xsZWN0aW9uID0gKHsgbmZ0cywgY29sbGVjdGlvbk5hbWUsIGNvbGxlY3Rpb25JbWFnZSwga2V5IH0pID0+IHtcbiAgICBpZiAoIW5mdHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBpc0V4cGFuZGVkID0gbmZ0c0Ryb3Bkb3duU3RhdGVbc2VsZWN0ZWRBZGRyZXNzXT8uW2NoYWluSWRdPy5ba2V5XTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJuZnRzLWl0ZW1zX19jb2xsZWN0aW9uXCIga2V5PXtgY29sbGVjdGlvbi0ke2tleX1gfT5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT1cIm5mdHMtaXRlbXNfX2NvbGxlY3Rpb24td3JhcHBlclwiXG4gICAgICAgICAgZGF0YS10ZXN0aWQ9XCJjb2xsZWN0aW9uLWV4cGFuZGVyLWJ1dHRvblwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgdXBkYXRlTmZ0RHJvcERvd25TdGF0ZUtleShrZXksIGlzRXhwYW5kZWQpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8Qm94XG4gICAgICAgICAgICBtYXJnaW5Cb3R0b209ezJ9XG4gICAgICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgICAgICBhbGlnbkl0ZW1zPXtBbGlnbkl0ZW1zLmNlbnRlcn1cbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50PXtKdXN0aWZ5Q29udGVudC5zcGFjZUJldHdlZW59XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJuZnRzLWl0ZW1zX19jb2xsZWN0aW9uLWFjY29yZGlvbi10aXRsZVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEJveFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zPXtBbGlnbkl0ZW1zLmNlbnRlcn1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmZ0cy1pdGVtc19fY29sbGVjdGlvbi1oZWFkZXJcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7cmVuZGVyQ29sbGVjdGlvbkltYWdlKGNvbGxlY3Rpb25JbWFnZSwgY29sbGVjdGlvbk5hbWUpfVxuICAgICAgICAgICAgICA8VHlwb2dyYXBoeVxuICAgICAgICAgICAgICAgIGNvbG9yPXtDb2xvci50ZXh0RGVmYXVsdH1cbiAgICAgICAgICAgICAgICB2YXJpYW50PXtUeXBvZ3JhcGh5VmFyaWFudC5INX1cbiAgICAgICAgICAgICAgICBtYXJnaW49ezJ9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7YCR7Y29sbGVjdGlvbk5hbWUgPz8gdCgndW5rbm93bkNvbGxlY3Rpb24nKX0gKCR7bmZ0cy5sZW5ndGh9KWB9XG4gICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPEJveCBhbGlnbkl0ZW1zPXtBbGlnbkl0ZW1zLmZsZXhFbmR9PlxuICAgICAgICAgICAgICA8SWNvblxuICAgICAgICAgICAgICAgIG5hbWU9e2lzRXhwYW5kZWQgPyBJY29uTmFtZS5BcnJvd0Rvd24gOiBJY29uTmFtZS5BcnJvd1JpZ2h0fVxuICAgICAgICAgICAgICAgIGNvbG9yPXtDb2xvci5pY29uRGVmYXVsdH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICB7aXNFeHBhbmRlZCA/IChcbiAgICAgICAgICA8Qm94IGRpc3BsYXk9e0RJU1BMQVkuRkxFWH0gZmxleFdyYXA9e0ZMRVhfV1JBUC5XUkFQfSBnYXA9ezR9PlxuICAgICAgICAgICAge25mdHMubWFwKChuZnQsIGkpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgeyBpbWFnZSwgYWRkcmVzcywgdG9rZW5JZCwgYmFja2dyb3VuZENvbG9yLCBuYW1lIH0gPSBuZnQ7XG4gICAgICAgICAgICAgIGNvbnN0IG5mdEltYWdlID0gZ2V0QXNzZXRJbWFnZVVSTChpbWFnZSwgaXBmc0dhdGV3YXkpO1xuICAgICAgICAgICAgICBjb25zdCBuZnRJbWFnZUFsdCA9IGdldE5mdEltYWdlQWx0KG5mdCk7XG4gICAgICAgICAgICAgIGNvbnN0IGhhbmRsZUltYWdlQ2xpY2sgPSAoKSA9PlxuICAgICAgICAgICAgICAgIGhpc3RvcnkucHVzaChgJHtBU1NFVF9ST1VURX0vJHthZGRyZXNzfS8ke3Rva2VuSWR9YCk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8Qm94XG4gICAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cIm5mdC13cmFwcGVyXCJcbiAgICAgICAgICAgICAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAgICAgICAgICAgICAgIGtleT17YG5mdC0ke2l9YH1cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5mdHMtaXRlbXNfX2l0ZW0td3JhcHBlclwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPENhcmRcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZz17MH1cbiAgICAgICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ9e0p1c3RpZnlDb250ZW50LmNlbnRlcn1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmZ0cy1pdGVtc19faXRlbS13cmFwcGVyX19jYXJkXCJcbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge25mdEltYWdlID8gKFxuICAgICAgICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5mdHMtaXRlbXNfX2l0ZW1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUltYWdlQ2xpY2t9XG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJuZnRzLWl0ZW1zX19pdGVtLWltYWdlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJuZnQtaW1hZ2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9e25mdEltYWdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9e25mdEltYWdlQWx0fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICA8TmZ0RGVmYXVsdEltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5JZD17dG9rZW5JZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUltYWdlQ2xpY2s9e2hhbmRsZUltYWdlQ2xpY2t9XG4gICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgIDwvQ2FyZD5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvQm94PlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm5mdHMtaXRlbXNcIj5cbiAgICAgIDxCb3hcbiAgICAgICAgcGFkZGluZ1RvcD17Nn1cbiAgICAgICAgcGFkZGluZ0JvdHRvbT17Nn1cbiAgICAgICAgcGFkZGluZ0xlZnQ9ezR9XG4gICAgICAgIHBhZGRpbmdSaWdodD17NH1cbiAgICAgICAgZmxleERpcmVjdGlvbj17RkxFWF9ESVJFQ1RJT04uQ09MVU1OfVxuICAgICAgPlxuICAgICAgICA8PlxuICAgICAgICAgIHtjb2xsZWN0aW9uc0tleXMubWFwKChrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgbmZ0cywgY29sbGVjdGlvbk5hbWUsIGNvbGxlY3Rpb25JbWFnZSB9ID0gY29sbGVjdGlvbnNba2V5XTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlckNvbGxlY3Rpb24oe1xuICAgICAgICAgICAgICBuZnRzLFxuICAgICAgICAgICAgICBjb2xsZWN0aW9uTmFtZSxcbiAgICAgICAgICAgICAgY29sbGVjdGlvbkltYWdlLFxuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIGlzUHJldmlvdXNseU93bmVkQ29sbGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgICB7cmVuZGVyQ29sbGVjdGlvbih7XG4gICAgICAgICAgICBuZnRzOiBwcmV2aW91c2x5T3duZWRDb2xsZWN0aW9uLm5mdHMsXG4gICAgICAgICAgICBjb2xsZWN0aW9uTmFtZTogcHJldmlvdXNseU93bmVkQ29sbGVjdGlvbi5jb2xsZWN0aW9uTmFtZSxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25JbWFnZTogcHJldmlvdXNseU93bmVkQ29sbGVjdGlvbi5uZnRzWzBdPy5pbWFnZSxcbiAgICAgICAgICAgIGlzUHJldmlvdXNseU93bmVkQ29sbGVjdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgIGtleTogUFJFVklPVVNMWV9PV05FRF9LRVksXG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvPlxuICAgICAgPC9Cb3g+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbk5mdHNJdGVtcy5wcm9wVHlwZXMgPSB7XG4gIHByZXZpb3VzbHlPd25lZENvbGxlY3Rpb246IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgbmZ0czogUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBhZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgIHRva2VuSWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgZGVzY3JpcHRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGltYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBzdGFuZGFyZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgaW1hZ2VUaHVtYm5haWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGltYWdlUHJldmlldzogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgY3JlYXRvcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICBhZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgIGNvbmZpZzogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICBwcm9maWxlX2ltZ191cmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIH0pLFxuICAgICAgfSksXG4gICAgKSxcbiAgICBjb2xsZWN0aW9uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb2xsZWN0aW9uSW1hZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH0pLFxuICBjb2xsZWN0aW9uczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBuZnRzOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIGFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgdG9rZW5JZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBkZXNjcmlwdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgaW1hZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIHN0YW5kYXJkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBpbWFnZVRodW1ibmFpbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgaW1hZ2VQcmV2aWV3OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBjcmVhdG9yOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgIGFkZHJlc3M6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgICAgY29uZmlnOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgIHByb2ZpbGVfaW1nX3VybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgfSksXG4gICAgICB9KSxcbiAgICApLFxuICAgIGNvbGxlY3Rpb25JbWFnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb2xsZWN0aW9uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgfSksXG59O1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vbmZ0cy10YWInO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgQm94IGZyb20gJy4uLy4uL3VpL2JveCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uL3VpL2J1dHRvbic7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi8uLi91aS90eXBvZ3JhcGh5L3R5cG9ncmFwaHknO1xuaW1wb3J0IE5mdHNEZXRlY3Rpb25Ob3RpY2UgZnJvbSAnLi4vbmZ0cy1kZXRlY3Rpb24tbm90aWNlJztcbmltcG9ydCBOZnRzSXRlbXMgZnJvbSAnLi4vbmZ0cy1pdGVtcyc7XG5pbXBvcnQge1xuICBUeXBvZ3JhcGh5VmFyaWFudCxcbiAgVEVYVF9BTElHTixcbiAgSnVzdGlmeUNvbnRlbnQsXG4gIEZMRVhfRElSRUNUSU9OLFxuICBGT05UX1dFSUdIVCxcbiAgQWxpZ25JdGVtcyxcbiAgVGV4dENvbG9yLFxufSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuaW1wb3J0IHsgZ2V0SXNNYWlubmV0LCBnZXRVc2VOZnREZXRlY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9zZWxlY3RvcnMnO1xuaW1wb3J0IHsgRVhQRVJJTUVOVEFMX1JPVVRFIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvcm91dGVzJztcbmltcG9ydCB7XG4gIGNoZWNrQW5kVXBkYXRlQWxsTmZ0c093bmVyc2hpcFN0YXR1cyxcbiAgZGV0ZWN0TmZ0cyxcbn0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvYWN0aW9ucyc7XG5pbXBvcnQgeyB1c2VOZnRzQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VOZnRzQ29sbGVjdGlvbnMnO1xuaW1wb3J0IFpFTkRFU0tfVVJMUyBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy96ZW5kZXNrLXVybCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE5mdHNUYWIoeyBvbkFkZE5GVCB9KSB7XG4gIGNvbnN0IHVzZU5mdERldGVjdGlvbiA9IHVzZVNlbGVjdG9yKGdldFVzZU5mdERldGVjdGlvbik7XG4gIGNvbnN0IGlzTWFpbm5ldCA9IHVzZVNlbGVjdG9yKGdldElzTWFpbm5ldCk7XG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG4gIGNvbnN0IHQgPSB1c2VJMThuQ29udGV4dCgpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgY29uc3QgeyBuZnRzTG9hZGluZywgY29sbGVjdGlvbnMsIHByZXZpb3VzbHlPd25lZENvbGxlY3Rpb24gfSA9XG4gICAgdXNlTmZ0c0NvbGxlY3Rpb25zKCk7XG5cbiAgY29uc3Qgb25FbmFibGVBdXRvRGV0ZWN0ID0gKCkgPT4ge1xuICAgIGhpc3RvcnkucHVzaChFWFBFUklNRU5UQUxfUk9VVEUpO1xuICB9O1xuXG4gIGNvbnN0IG9uUmVmcmVzaCA9ICgpID0+IHtcbiAgICBpZiAoaXNNYWlubmV0KSB7XG4gICAgICBkaXNwYXRjaChkZXRlY3ROZnRzKCkpO1xuICAgIH1cbiAgICBjaGVja0FuZFVwZGF0ZUFsbE5mdHNPd25lcnNoaXBTdGF0dXMoKTtcbiAgfTtcblxuICBpZiAobmZ0c0xvYWRpbmcpIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJuZnRzLXRhYl9fbG9hZGluZ1wiPnt0KCdsb2FkaW5nTkZUcycpfTwvZGl2PjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEJveCBjbGFzc05hbWU9XCJuZnRzLXRhYlwiPlxuICAgICAge09iamVjdC5rZXlzKGNvbGxlY3Rpb25zKS5sZW5ndGggPiAwIHx8XG4gICAgICBwcmV2aW91c2x5T3duZWRDb2xsZWN0aW9uLm5mdHMubGVuZ3RoID4gMCA/IChcbiAgICAgICAgPE5mdHNJdGVtc1xuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICBwcmV2aW91c2x5T3duZWRDb2xsZWN0aW9uPXtwcmV2aW91c2x5T3duZWRDb2xsZWN0aW9ufVxuICAgICAgICAvPlxuICAgICAgKSA6IChcbiAgICAgICAgPD5cbiAgICAgICAgICB7aXNNYWlubmV0ICYmICF1c2VOZnREZXRlY3Rpb24gPyA8TmZ0c0RldGVjdGlvbk5vdGljZSAvPiA6IG51bGx9XG4gICAgICAgICAgPEJveCBwYWRkaW5nPXsxMn0+XG4gICAgICAgICAgICA8Qm94IGp1c3RpZnlDb250ZW50PXtKdXN0aWZ5Q29udGVudC5jZW50ZXJ9PlxuICAgICAgICAgICAgICA8aW1nIHNyYz1cIi4vaW1hZ2VzL25vLW5mdHMuc3ZnXCIgLz5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPEJveFxuICAgICAgICAgICAgICBtYXJnaW5Ub3A9ezR9XG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbT17MTJ9XG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50PXtKdXN0aWZ5Q29udGVudC5jZW50ZXJ9XG4gICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLkNPTFVNTn1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmZ0cy10YWJfX2xpbmtcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8VHlwb2dyYXBoeVxuICAgICAgICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IudGV4dE11dGVkfVxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9e1R5cG9ncmFwaHlWYXJpYW50Lkg0fVxuICAgICAgICAgICAgICAgIGFsaWduPXtURVhUX0FMSUdOLkNFTlRFUn1cbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0PXtGT05UX1dFSUdIVC5CT0xEfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3QoJ25vTkZUcycpfVxuICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICB0eXBlPVwibGlua1wiXG4gICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICBocmVmPXtaRU5ERVNLX1VSTFMuTkZUX1RPS0VOU31cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0KCdsZWFybk1vcmVVcHBlckNhc2UnKX1cbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAgPEJveFxuICAgICAgICBtYXJnaW5Cb3R0b209ezR9XG4gICAgICAgIGp1c3RpZnlDb250ZW50PXtKdXN0aWZ5Q29udGVudC5jZW50ZXJ9XG4gICAgICAgIGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLkNPTFVNTn1cbiAgICAgID5cbiAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHRNdXRlZH1cbiAgICAgICAgICB2YXJpYW50PXtUeXBvZ3JhcGh5VmFyaWFudC5INX1cbiAgICAgICAgICBhbGlnbj17VEVYVF9BTElHTi5DRU5URVJ9XG4gICAgICAgID5cbiAgICAgICAgICB7dCgnbWlzc2luZ05GVCcpfVxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgIDxCb3hcbiAgICAgICAgICBhbGlnbkl0ZW1zPXtBbGlnbkl0ZW1zLmNlbnRlcn1cbiAgICAgICAgICBqdXN0aWZ5Q29udGVudD17SnVzdGlmeUNvbnRlbnQuY2VudGVyfVxuICAgICAgICA+XG4gICAgICAgICAgeyFpc01haW5uZXQgJiYgT2JqZWN0LmtleXMoY29sbGVjdGlvbnMpLmxlbmd0aCA8IDEgPyBudWxsIDogKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPEJveFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5mdHMtdGFiX19saW5rXCJcbiAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudD17SnVzdGlmeUNvbnRlbnQuZmxleEVuZH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtpc01haW5uZXQgJiYgIXVzZU5mdERldGVjdGlvbiA/IChcbiAgICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT1cImxpbmtcIiBvbkNsaWNrPXtvbkVuYWJsZUF1dG9EZXRlY3R9PlxuICAgICAgICAgICAgICAgICAgICB7dCgnZW5hYmxlQXV0b0RldGVjdCcpfVxuICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgIDxCdXR0b24gdHlwZT1cImxpbmtcIiBvbkNsaWNrPXtvblJlZnJlc2h9PlxuICAgICAgICAgICAgICAgICAgICB7dCgncmVmcmVzaExpc3QnKX1cbiAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICA8VHlwb2dyYXBoeVxuICAgICAgICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IudGV4dE11dGVkfVxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9e1R5cG9ncmFwaHlWYXJpYW50Lkg2fVxuICAgICAgICAgICAgICAgIGFsaWduPXtURVhUX0FMSUdOLkNFTlRFUn1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0KCdvcicpfVxuICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50PXtKdXN0aWZ5Q29udGVudC5mbGV4U3RhcnR9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJuZnRzLXRhYl9fbGlua1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPVwibGlua1wiIG9uQ2xpY2s9e29uQWRkTkZUfT5cbiAgICAgICAgICAgICAge3QoJ2ltcG9ydE5GVHMnKX1cbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L0JveD5cbiAgICAgIDwvQm94PlxuICAgIDwvQm94PlxuICApO1xufVxuXG5OZnRzVGFiLnByb3BUeXBlcyA9IHtcbiAgb25BZGRORlQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vcGVybWlzc2lvbi1wYWdlLWNvbnRhaW5lci5jb250YWluZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQZXJtaXNzaW9uUGFnZUNvbnRhaW5lckNvbnRlbnQgfSBmcm9tICcuL3Blcm1pc3Npb24tcGFnZS1jb250YWluZXItY29udGVudCc7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9wZXJtaXNzaW9uLXBhZ2UtY29udGFpbmVyLWNvbnRlbnQuY29tcG9uZW50JztcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQZXJtaXNzaW9uc0Nvbm5lY3RIZWFkZXIgZnJvbSAnLi4vLi4vcGVybWlzc2lvbnMtY29ubmVjdC1oZWFkZXInO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi4vLi4vLi4vdWkvdG9vbHRpcCc7XG5pbXBvcnQgUGVybWlzc2lvbnNDb25uZWN0UGVybWlzc2lvbkxpc3QgZnJvbSAnLi4vLi4vcGVybWlzc2lvbnMtY29ubmVjdC1wZXJtaXNzaW9uLWxpc3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJtaXNzaW9uUGFnZUNvbnRhaW5lckNvbnRlbnQgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBzdWJqZWN0TWV0YWRhdGE6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBvcmlnaW46IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIHN1YmplY3RUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBleHRlbnNpb25JZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIGljb25Vcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgfSksXG4gICAgc2VsZWN0ZWRQZXJtaXNzaW9uczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHNlbGVjdGVkSWRlbnRpdGllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGFsbElkZW50aXRpZXNTZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBzZWxlY3RlZElkZW50aXRpZXM6IFtdLFxuICAgIGFsbElkZW50aXRpZXNTZWxlY3RlZDogZmFsc2UsXG4gIH07XG5cbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICB0OiBQcm9wVHlwZXMuZnVuYyxcbiAgfTtcblxuICByZW5kZXJSZXF1ZXN0ZWRQZXJtaXNzaW9ucygpIHtcbiAgICBjb25zdCB7IHNlbGVjdGVkUGVybWlzc2lvbnMsIHN1YmplY3RNZXRhZGF0YSB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBlcm1pc3Npb24tYXBwcm92YWwtY29udGFpbmVyX19jb250ZW50X19yZXF1ZXN0ZWRcIj5cbiAgICAgICAgPFBlcm1pc3Npb25zQ29ubmVjdFBlcm1pc3Npb25MaXN0XG4gICAgICAgICAgcGVybWlzc2lvbnM9e3NlbGVjdGVkUGVybWlzc2lvbnN9XG4gICAgICAgICAgdGFyZ2V0U3ViamVjdE1ldGFkYXRhPXtzdWJqZWN0TWV0YWRhdGF9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyQWNjb3VudFRvb2x0aXAodGV4dENvbnRlbnQpIHtcbiAgICBjb25zdCB7IHNlbGVjdGVkSWRlbnRpdGllcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMuY29udGV4dDtcblxuICAgIHJldHVybiAoXG4gICAgICA8VG9vbHRpcFxuICAgICAgICBrZXk9XCJhbGwtYWNjb3VudC1jb25uZWN0LXRvb2x0aXBcIlxuICAgICAgICBwb3NpdGlvbj1cImJvdHRvbVwiXG4gICAgICAgIHdyYXBwZXJDbGFzc05hbWU9XCJwZXJtaXNzaW9uLWFwcHJvdmFsLWNvbnRhaW5lcl9fYm9sZC10aXRsZS1lbGVtZW50c1wiXG4gICAgICAgIGh0bWw9e1xuICAgICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyB9fT5cbiAgICAgICAgICAgIHtzZWxlY3RlZElkZW50aXRpZXMuc2xpY2UoMCwgNikubWFwKChpZGVudGl0eSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2IGtleT17YHRvb2x0aXAtaWRlbnRpdHktJHtpbmRleH1gfT5cbiAgICAgICAgICAgICAgICAgIHtpZGVudGl0eS5hZGRyZXNzTGFiZWx9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIHtzZWxlY3RlZElkZW50aXRpZXMubGVuZ3RoID4gNlxuICAgICAgICAgICAgICA/IHQoJ3BsdXNYTW9yZScsIFtzZWxlY3RlZElkZW50aXRpZXMubGVuZ3RoIC0gNl0pXG4gICAgICAgICAgICAgIDogbnVsbH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgfVxuICAgICAgPlxuICAgICAgICB7dGV4dENvbnRlbnR9XG4gICAgICA8L1Rvb2x0aXA+XG4gICAgKTtcbiAgfVxuXG4gIGdldFRpdGxlKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHN1YmplY3RNZXRhZGF0YSxcbiAgICAgIHNlbGVjdGVkSWRlbnRpdGllcyxcbiAgICAgIGFsbElkZW50aXRpZXNTZWxlY3RlZCxcbiAgICAgIHNlbGVjdGVkUGVybWlzc2lvbnMsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICBpZiAoc3ViamVjdE1ldGFkYXRhLmV4dGVuc2lvbklkKSB7XG4gICAgICByZXR1cm4gdCgnZXh0ZXJuYWxFeHRlbnNpb24nLCBbc3ViamVjdE1ldGFkYXRhLmV4dGVuc2lvbklkXSk7XG4gICAgfSBlbHNlIGlmICghc2VsZWN0ZWRQZXJtaXNzaW9ucy5ldGhfYWNjb3VudHMpIHtcbiAgICAgIHJldHVybiB0KCdwZXJtaXNzaW9uUmVxdWVzdENhcGl0YWxpemVkJyk7XG4gICAgfSBlbHNlIGlmIChhbGxJZGVudGl0aWVzU2VsZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0KCdjb25uZWN0VG9BbGwnLCBbXG4gICAgICAgIHRoaXMucmVuZGVyQWNjb3VudFRvb2x0aXAodCgnY29ubmVjdFRvQWxsQWNjb3VudHMnKSksXG4gICAgICBdKTtcbiAgICB9IGVsc2UgaWYgKHNlbGVjdGVkSWRlbnRpdGllcy5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4gdCgnY29ubmVjdFRvTXVsdGlwbGUnLCBbXG4gICAgICAgIHRoaXMucmVuZGVyQWNjb3VudFRvb2x0aXAoXG4gICAgICAgICAgdCgnY29ubmVjdFRvTXVsdGlwbGVOdW1iZXJPZkFjY291bnRzJywgW3NlbGVjdGVkSWRlbnRpdGllcy5sZW5ndGhdKSxcbiAgICAgICAgKSxcbiAgICAgIF0pO1xuICAgIH1cbiAgICByZXR1cm4gdCgnY29ubmVjdFRvJywgW3NlbGVjdGVkSWRlbnRpdGllc1swXT8uYWRkcmVzc0xhYmVsXSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBzdWJqZWN0TWV0YWRhdGEgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICBjb25zdCB0aXRsZSA9IHRoaXMuZ2V0VGl0bGUoKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBlcm1pc3Npb24tYXBwcm92YWwtY29udGFpbmVyX19jb250ZW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGVybWlzc2lvbi1hcHByb3ZhbC1jb250YWluZXJfX2NvbnRlbnQtY29udGFpbmVyXCI+XG4gICAgICAgICAgPFBlcm1pc3Npb25zQ29ubmVjdEhlYWRlclxuICAgICAgICAgICAgaWNvblVybD17c3ViamVjdE1ldGFkYXRhLmljb25Vcmx9XG4gICAgICAgICAgICBpY29uTmFtZT17c3ViamVjdE1ldGFkYXRhLm5hbWV9XG4gICAgICAgICAgICBoZWFkZXJUaXRsZT17dGl0bGV9XG4gICAgICAgICAgICBoZWFkZXJUZXh0PXtcbiAgICAgICAgICAgICAgc3ViamVjdE1ldGFkYXRhLmV4dGVuc2lvbklkXG4gICAgICAgICAgICAgICAgPyB0KCdhbGxvd0V4dGVybmFsRXh0ZW5zaW9uVG8nLCBbc3ViamVjdE1ldGFkYXRhLmV4dGVuc2lvbklkXSlcbiAgICAgICAgICAgICAgICA6IHQoJ2FsbG93VGhpc1NpdGVUbycpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaXRlT3JpZ2luPXtzdWJqZWN0TWV0YWRhdGEub3JpZ2lufVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwicGVybWlzc2lvbi1hcHByb3ZhbC1jb250YWluZXJfX3Blcm1pc3Npb25zLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAge3RoaXMucmVuZGVyUmVxdWVzdGVkUGVybWlzc2lvbnMoKX1cbiAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0VxdWFsIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IE1ldGFNZXRyaWNzRXZlbnRDYXRlZ29yeSB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvbWV0YW1ldHJpY3MnO1xuaW1wb3J0IHsgUGFnZUNvbnRhaW5lckZvb3RlciB9IGZyb20gJy4uLy4uL3VpL3BhZ2UtY29udGFpbmVyJztcbmltcG9ydCBQZXJtaXNzaW9uc0Nvbm5lY3RGb290ZXIgZnJvbSAnLi4vcGVybWlzc2lvbnMtY29ubmVjdC1mb290ZXInO1xuaW1wb3J0IHsgUGVybWlzc2lvblBhZ2VDb250YWluZXJDb250ZW50IH0gZnJvbSAnLic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBlcm1pc3Npb25QYWdlQ29udGFpbmVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBhcHByb3ZlUGVybWlzc2lvbnNSZXF1ZXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHJlamVjdFBlcm1pc3Npb25zUmVxdWVzdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzZWxlY3RlZElkZW50aXRpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBhbGxJZGVudGl0aWVzU2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIHJlcXVlc3Q6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcmVxdWVzdE1ldGFkYXRhOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHRhcmdldFN1YmplY3RNZXRhZGF0YTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICBvcmlnaW46IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIHN1YmplY3RUeXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBleHRlbnNpb25JZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIGljb25Vcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgfSksXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICByZXF1ZXN0OiB7fSxcbiAgICByZXF1ZXN0TWV0YWRhdGE6IHt9LFxuICAgIHNlbGVjdGVkSWRlbnRpdGllczogW10sXG4gICAgYWxsSWRlbnRpdGllc1NlbGVjdGVkOiBmYWxzZSxcbiAgfTtcblxuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIHRyYWNrRXZlbnQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIHNlbGVjdGVkUGVybWlzc2lvbnM6IHRoaXMuZ2V0UmVxdWVzdGVkTWV0aG9kU3RhdGUoXG4gICAgICB0aGlzLmdldFJlcXVlc3RlZE1ldGhvZE5hbWVzKHRoaXMucHJvcHMpLFxuICAgICksXG4gIH07XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGNvbnN0IG5ld01ldGhvZE5hbWVzID0gdGhpcy5nZXRSZXF1ZXN0ZWRNZXRob2ROYW1lcyh0aGlzLnByb3BzKTtcblxuICAgIGlmICghaXNFcXVhbChPYmplY3Qua2V5cyh0aGlzLnN0YXRlLnNlbGVjdGVkUGVybWlzc2lvbnMpLCBuZXdNZXRob2ROYW1lcykpIHtcbiAgICAgIC8vIHRoaXMgc2hvdWxkIGJlIGEgbmV3IHJlcXVlc3QsIHNvIGp1c3Qgb3ZlcndyaXRlXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc2VsZWN0ZWRQZXJtaXNzaW9uczogdGhpcy5nZXRSZXF1ZXN0ZWRNZXRob2RTdGF0ZShuZXdNZXRob2ROYW1lcyksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBnZXRSZXF1ZXN0ZWRNZXRob2RTdGF0ZShtZXRob2ROYW1lcykge1xuICAgIHJldHVybiBtZXRob2ROYW1lcy5yZWR1Y2UoKGFjYywgbWV0aG9kTmFtZSkgPT4ge1xuICAgICAgYWNjW21ldGhvZE5hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cblxuICBnZXRSZXF1ZXN0ZWRNZXRob2ROYW1lcyhwcm9wcykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcy5yZXF1ZXN0LnBlcm1pc3Npb25zIHx8IHt9KTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuY29udGV4dC50cmFja0V2ZW50KHtcbiAgICAgIGNhdGVnb3J5OiBNZXRhTWV0cmljc0V2ZW50Q2F0ZWdvcnkuQXV0aCxcbiAgICAgIGV2ZW50OiAnVGFiIE9wZW5lZCcsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIGFjdGlvbjogJ0Nvbm5lY3QnLFxuICAgICAgICBsZWdhY3lfZXZlbnQ6IHRydWUsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgb25DYW5jZWwgPSAoKSA9PiB7XG4gICAgY29uc3QgeyByZXF1ZXN0LCByZWplY3RQZXJtaXNzaW9uc1JlcXVlc3QgfSA9IHRoaXMucHJvcHM7XG4gICAgcmVqZWN0UGVybWlzc2lvbnNSZXF1ZXN0KHJlcXVlc3QubWV0YWRhdGEuaWQpO1xuICB9O1xuXG4gIG9uU3VibWl0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHJlcXVlc3Q6IF9yZXF1ZXN0LFxuICAgICAgYXBwcm92ZVBlcm1pc3Npb25zUmVxdWVzdCxcbiAgICAgIHJlamVjdFBlcm1pc3Npb25zUmVxdWVzdCxcbiAgICAgIHNlbGVjdGVkSWRlbnRpdGllcyxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAuLi5fcmVxdWVzdCxcbiAgICAgIHBlcm1pc3Npb25zOiB7IC4uLl9yZXF1ZXN0LnBlcm1pc3Npb25zIH0sXG4gICAgICBhcHByb3ZlZEFjY291bnRzOiBzZWxlY3RlZElkZW50aXRpZXMubWFwKFxuICAgICAgICAoc2VsZWN0ZWRJZGVudGl0eSkgPT4gc2VsZWN0ZWRJZGVudGl0eS5hZGRyZXNzLFxuICAgICAgKSxcbiAgICB9O1xuXG4gICAgT2JqZWN0LmtleXModGhpcy5zdGF0ZS5zZWxlY3RlZFBlcm1pc3Npb25zKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmICghdGhpcy5zdGF0ZS5zZWxlY3RlZFBlcm1pc3Npb25zW2tleV0pIHtcbiAgICAgICAgZGVsZXRlIHJlcXVlc3QucGVybWlzc2lvbnNba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChPYmplY3Qua2V5cyhyZXF1ZXN0LnBlcm1pc3Npb25zKS5sZW5ndGggPiAwKSB7XG4gICAgICBhcHByb3ZlUGVybWlzc2lvbnNSZXF1ZXN0KHJlcXVlc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWplY3RQZXJtaXNzaW9uc1JlcXVlc3QocmVxdWVzdC5tZXRhZGF0YS5pZCk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICByZXF1ZXN0TWV0YWRhdGEsXG4gICAgICB0YXJnZXRTdWJqZWN0TWV0YWRhdGEsXG4gICAgICBzZWxlY3RlZElkZW50aXRpZXMsXG4gICAgICBhbGxJZGVudGl0aWVzU2VsZWN0ZWQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlLWNvbnRhaW5lciBwZXJtaXNzaW9uLWFwcHJvdmFsLWNvbnRhaW5lclwiPlxuICAgICAgICA8UGVybWlzc2lvblBhZ2VDb250YWluZXJDb250ZW50XG4gICAgICAgICAgcmVxdWVzdE1ldGFkYXRhPXtyZXF1ZXN0TWV0YWRhdGF9XG4gICAgICAgICAgc3ViamVjdE1ldGFkYXRhPXt0YXJnZXRTdWJqZWN0TWV0YWRhdGF9XG4gICAgICAgICAgc2VsZWN0ZWRQZXJtaXNzaW9ucz17dGhpcy5zdGF0ZS5zZWxlY3RlZFBlcm1pc3Npb25zfVxuICAgICAgICAgIHNlbGVjdGVkSWRlbnRpdGllcz17c2VsZWN0ZWRJZGVudGl0aWVzfVxuICAgICAgICAgIGFsbElkZW50aXRpZXNTZWxlY3RlZD17YWxsSWRlbnRpdGllc1NlbGVjdGVkfVxuICAgICAgICAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBlcm1pc3Npb24tYXBwcm92YWwtY29udGFpbmVyX19mb290ZXJzXCI+XG4gICAgICAgICAgPFBlcm1pc3Npb25zQ29ubmVjdEZvb3RlciAvPlxuICAgICAgICAgIDxQYWdlQ29udGFpbmVyRm9vdGVyXG4gICAgICAgICAgICBjYW5jZWxCdXR0b25UeXBlPVwiZGVmYXVsdFwiXG4gICAgICAgICAgICBvbkNhbmNlbD17KCkgPT4gdGhpcy5vbkNhbmNlbCgpfVxuICAgICAgICAgICAgY2FuY2VsVGV4dD17dGhpcy5jb250ZXh0LnQoJ2NhbmNlbCcpfVxuICAgICAgICAgICAgb25TdWJtaXQ9eygpID0+IHRoaXMub25TdWJtaXQoKX1cbiAgICAgICAgICAgIHN1Ym1pdFRleHQ9e3RoaXMuY29udGV4dC50KCdjb25uZWN0Jyl9XG4gICAgICAgICAgICBidXR0b25TaXplTGFyZ2U9e2ZhbHNlfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7XG4gIGdldE1ldGFNYXNrSWRlbnRpdGllcyxcbn0gZnJvbSAnLi4vLi4vLi4vc2VsZWN0b3JzJztcbmltcG9ydCBQZXJtaXNzaW9uUGFnZUNvbnRhaW5lciBmcm9tICcuL3Blcm1pc3Npb24tcGFnZS1jb250YWluZXIuY29tcG9uZW50JztcblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBvd25Qcm9wcykgPT4ge1xuICBjb25zdCB7IHNlbGVjdGVkSWRlbnRpdGllcyB9ID0gb3duUHJvcHM7XG4gIGNvbnN0IGFsbElkZW50aXRpZXMgPSBnZXRNZXRhTWFza0lkZW50aXRpZXMoc3RhdGUpO1xuICBjb25zdCBhbGxJZGVudGl0aWVzU2VsZWN0ZWQgPVxuICAgIE9iamVjdC5rZXlzKHNlbGVjdGVkSWRlbnRpdGllcykubGVuZ3RoID09PVxuICAgICAgT2JqZWN0LmtleXMoYWxsSWRlbnRpdGllcykubGVuZ3RoICYmIHNlbGVjdGVkSWRlbnRpdGllcy5sZW5ndGggPiAxO1xuXG4gIHJldHVybiB7XG4gICAgYWxsSWRlbnRpdGllc1NlbGVjdGVkLFxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKFBlcm1pc3Npb25QYWdlQ29udGFpbmVyKTtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL3Blcm1pc3Npb25zLWNvbm5lY3QtZm9vdGVyLmNvbXBvbmVudCc7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBaRU5ERVNLX1VSTFMgZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvemVuZGVzay11cmwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJtaXNzaW9uc0Nvbm5lY3RGb290ZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMuY29udGV4dDtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwZXJtaXNzaW9ucy1jb25uZWN0LWZvb3RlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBlcm1pc3Npb25zLWNvbm5lY3QtZm9vdGVyX190ZXh0XCI+XG4gICAgICAgICAgPGRpdj57dCgnb25seUNvbm5lY3RUcnVzdCcpfTwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInBlcm1pc3Npb25zLWNvbm5lY3QtZm9vdGVyX190ZXh0LS1saW5rXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgZ2xvYmFsLnBsYXRmb3JtLm9wZW5UYWIoe1xuICAgICAgICAgICAgICAgIHVybDogWkVOREVTS19VUkxTLlVTRVJfR1VJREVfREFQUFMsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dCgnbGVhcm5Nb3JlVXBwZXJDYXNlJyl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vcGVybWlzc2lvbnMtY29ubmVjdC1oZWFkZXIuY29tcG9uZW50JztcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgU2l0ZU9yaWdpbiBmcm9tICcuLi8uLi91aS9zaXRlLW9yaWdpbic7XG5pbXBvcnQgQm94IGZyb20gJy4uLy4uL3VpL2JveCc7XG5pbXBvcnQge1xuICBGTEVYX0RJUkVDVElPTixcbiAgSnVzdGlmeUNvbnRlbnQsXG59IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJtaXNzaW9uc0Nvbm5lY3RIZWFkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGljb25Vcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaWNvbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzaXRlT3JpZ2luOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgaGVhZGVyVGl0bGU6IFByb3BUeXBlcy5ub2RlLFxuICAgIGJveFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoeyAuLi5Cb3gucHJvcFR5cGVzIH0pLFxuICAgIGhlYWRlclRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGVmdEljb246IFByb3BUeXBlcy5ub2RlLFxuICAgIHJpZ2h0SWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBpY29uVXJsOiBudWxsLFxuICAgIGhlYWRlclRpdGxlOiAnJyxcbiAgICBoZWFkZXJUZXh0OiAnJyxcbiAgICBib3hQcm9wczoge30sXG4gIH07XG5cbiAgcmVuZGVySGVhZGVySWNvbigpIHtcbiAgICBjb25zdCB7XG4gICAgICBpY29uVXJsLFxuICAgICAgaWNvbk5hbWUsXG4gICAgICBzaXRlT3JpZ2luLFxuICAgICAgbGVmdEljb24sXG4gICAgICByaWdodEljb24sXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBlcm1pc3Npb25zLWNvbm5lY3QtaGVhZGVyX19pY29uXCI+XG4gICAgICAgIDxTaXRlT3JpZ2luXG4gICAgICAgICAgY2hpcFxuICAgICAgICAgIHNpdGVPcmlnaW49e3NpdGVPcmlnaW59XG4gICAgICAgICAgdGl0bGU9e3NpdGVPcmlnaW59XG4gICAgICAgICAgaWNvblNyYz17aWNvblVybH1cbiAgICAgICAgICBuYW1lPXtpY29uTmFtZX1cbiAgICAgICAgICBsZWZ0SWNvbj17bGVmdEljb259XG4gICAgICAgICAgcmlnaHRJY29uPXtyaWdodEljb259XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGJveFByb3BzLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgaGVhZGVyVGl0bGUsXG4gICAgICBoZWFkZXJUZXh0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8Qm94XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcygncGVybWlzc2lvbnMtY29ubmVjdC1oZWFkZXInLCBjbGFzc05hbWUpfVxuICAgICAgICBmbGV4RGlyZWN0aW9uPXtGTEVYX0RJUkVDVElPTi5DT0xVTU59XG4gICAgICAgIGp1c3RpZnlDb250ZW50PXtKdXN0aWZ5Q29udGVudC5jZW50ZXJ9XG4gICAgICAgIHsuLi5ib3hQcm9wc31cbiAgICAgID5cbiAgICAgICAge3RoaXMucmVuZGVySGVhZGVySWNvbigpfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBlcm1pc3Npb25zLWNvbm5lY3QtaGVhZGVyX190aXRsZVwiPntoZWFkZXJUaXRsZX08L2Rpdj5cbiAgICAgICAge1xuICAgICAgICB9XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGVybWlzc2lvbnMtY29ubmVjdC1oZWFkZXJfX3N1YnRpdGxlXCI+e2hlYWRlclRleHR9PC9kaXY+XG4gICAgICA8L0JveD5cbiAgICApO1xuICB9XG59XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9wZXJtaXNzaW9ucy1jb25uZWN0LXBlcm1pc3Npb24tbGlzdCc7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7XG4gIGdldFJpZ2h0SWNvbixcbiAgZ2V0V2VpZ2h0ZWRQZXJtaXNzaW9ucyxcbn0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy91dGlscy9wZXJtaXNzaW9uJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuXG4vKipcbiAqIEdldCBvbmUgb3IgbW9yZSBwZXJtaXNzaW9uIGRlc2NyaXB0aW9ucyBmb3IgYSBwZXJtaXNzaW9uIG5hbWUuXG4gKlxuICogQHBhcmFtIHBlcm1pc3Npb24gLSBUaGUgcGVybWlzc2lvbiB0byByZW5kZXIuXG4gKiBAcGFyYW0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIHBlcm1pc3Npb24uXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9IEEgcGVybWlzc2lvbiBkZXNjcmlwdGlvbiBub2RlLlxuICovXG5mdW5jdGlvbiBnZXREZXNjcmlwdGlvbk5vZGUocGVybWlzc2lvbiwgaW5kZXgpIHtcbiAgY29uc3QgeyBsYWJlbCwgbGVmdEljb24sIHBlcm1pc3Npb25OYW1lIH0gPSBwZXJtaXNzaW9uO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJwZXJtaXNzaW9uXCIga2V5PXtgJHtwZXJtaXNzaW9uTmFtZX0tJHtpbmRleH1gfT5cbiAgICAgIHt0eXBlb2YgbGVmdEljb24gPT09ICdzdHJpbmcnID8gPGkgY2xhc3NOYW1lPXtsZWZ0SWNvbn0gLz4gOiBsZWZ0SWNvbn1cbiAgICAgIHtsYWJlbH1cbiAgICAgIHtnZXRSaWdodEljb24ocGVybWlzc2lvbil9XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBlcm1pc3Npb25zQ29ubmVjdFBlcm1pc3Npb25MaXN0KHtcbiAgcGVybWlzc2lvbnMsXG4gIHRhcmdldFN1YmplY3RNZXRhZGF0YSxcbn0pIHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInBlcm1pc3Npb25zLWNvbm5lY3QtcGVybWlzc2lvbi1saXN0XCI+XG4gICAgICB7Z2V0V2VpZ2h0ZWRQZXJtaXNzaW9ucyh0LCBwZXJtaXNzaW9ucywgdGFyZ2V0U3ViamVjdE1ldGFkYXRhKS5tYXAoXG4gICAgICAgIGdldERlc2NyaXB0aW9uTm9kZSxcbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59XG5cblBlcm1pc3Npb25zQ29ubmVjdFBlcm1pc3Npb25MaXN0LnByb3BUeXBlcyA9IHtcbiAgcGVybWlzc2lvbnM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgdGFyZ2V0U3ViamVjdE1ldGFkYXRhOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBsb2cgZnJvbSAnbG9nbGV2ZWwnO1xuaW1wb3J0IHsgVVJEZWNvZGVyIH0gZnJvbSAnQG5ncmF2ZWlvL2JjLXVyJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBnZXRFbnZpcm9ubWVudFR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9hcHAvc2NyaXB0cy9saWIvdXRpbCc7XG5pbXBvcnQgeyBFTlZJUk9OTUVOVF9UWVBFX0ZVTExTQ1JFRU4gfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2FwcCc7XG5pbXBvcnQgV2ViY2FtVXRpbHMgZnJvbSAnLi4vLi4vLi4vaGVscGVycy91dGlscy93ZWJjYW0tdXRpbHMnO1xuaW1wb3J0IFBhZ2VDb250YWluZXJGb290ZXIgZnJvbSAnLi4vLi4vdWkvcGFnZS1jb250YWluZXIvcGFnZS1jb250YWluZXItZm9vdGVyL3BhZ2UtY29udGFpbmVyLWZvb3Rlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQgeyBTRUNPTkQgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL3RpbWUnO1xuaW1wb3J0IEVuaGFuY2VkUmVhZGVyIGZyb20gJy4vZW5oYW5jZWQtcmVhZGVyJztcblxuY29uc3QgUkVBRFlfU1RBVEUgPSB7XG4gIEFDQ0VTU0lOR19DQU1FUkE6ICdBQ0NFU1NJTkdfQ0FNRVJBJyxcbiAgTkVFRF9UT19BTExPV19BQ0NFU1M6ICdORUVEX1RPX0FMTE9XX0FDQ0VTUycsXG4gIFJFQURZOiAnUkVBRFknLFxufTtcblxuY29uc3QgQmFzZVJlYWRlciA9ICh7XG4gIGlzUmVhZGluZ1dhbGxldCxcbiAgaGFuZGxlQ2FuY2VsLFxuICBoYW5kbGVTdWNjZXNzLFxuICBzZXRFcnJvclRpdGxlLFxufSkgPT4ge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcbiAgY29uc3QgW3JlYWR5LCBzZXRSZWFkeV0gPSB1c2VTdGF0ZShSRUFEWV9TVEFURS5BQ0NFU1NJTkdfQ0FNRVJBKTtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3VyRGVjb2Rlciwgc2V0VVJEZWNvZGVyXSA9IHVzZVN0YXRlKG5ldyBVUkRlY29kZXIoKSk7XG5cbiAgbGV0IHBlcm1pc3Npb25DaGVja2VyID0gbnVsbDtcbiAgY29uc3QgbW91bnRlZCA9IHVzZVJlZihmYWxzZSk7XG5cbiAgY29uc3QgcmVzZXQgPSAoKSA9PiB7XG4gICAgc2V0UmVhZHkoUkVBRFlfU1RBVEUuQUNDRVNTSU5HX0NBTUVSQSk7XG4gICAgc2V0RXJyb3IobnVsbCk7XG4gICAgc2V0VVJEZWNvZGVyKG5ldyBVUkRlY29kZXIoKSk7XG4gIH07XG5cbiAgY29uc3QgY2hlY2tFbnZpcm9ubWVudCA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBlbnZpcm9ubWVudFJlYWR5IH0gPSBhd2FpdCBXZWJjYW1VdGlscy5jaGVja1N0YXR1cygpO1xuICAgICAgaWYgKFxuICAgICAgICAhZW52aXJvbm1lbnRSZWFkeSAmJlxuICAgICAgICBnZXRFbnZpcm9ubWVudFR5cGUoKSAhPT0gRU5WSVJPTk1FTlRfVFlQRV9GVUxMU0NSRUVOXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgY3VycmVudFVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICBjb25zdCBjdXJyZW50SGFzaCA9IGN1cnJlbnRVcmwuaGFzaDtcbiAgICAgICAgY29uc3QgY3VycmVudFJvdXRlID0gY3VycmVudEhhc2ggPyBjdXJyZW50SGFzaC5zdWJzdHJpbmcoMSkgOiBudWxsO1xuICAgICAgICBnbG9iYWwucGxhdGZvcm0ub3BlbkV4dGVuc2lvbkluQnJvd3NlcihjdXJyZW50Um91dGUpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChtb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgc2V0RXJyb3IoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGluaXRpYWwgYXR0ZW1wdCBpcyByZXF1aXJlZCB0byB0cmlnZ2VyIHBlcm1pc3Npb24gcHJvbXB0XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgcmV0dXJuIGluaXRDYW1lcmEoKTtcbiAgfTtcblxuICBjb25zdCBjaGVja1Blcm1pc3Npb25zID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IHBlcm1pc3Npb25zIH0gPSBhd2FpdCBXZWJjYW1VdGlscy5jaGVja1N0YXR1cygpO1xuICAgICAgaWYgKHBlcm1pc3Npb25zKSB7XG4gICAgICAgIC8vIExldCB0aGUgdmlkZW8gc3RyZWFtIGxvYWQgZmlyc3QuLi5cbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgU0VDT05EICogMikpO1xuICAgICAgICBpZiAoIW1vdW50ZWQuY3VycmVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXRSZWFkeShSRUFEWV9TVEFURS5SRUFEWSk7XG4gICAgICB9IGVsc2UgaWYgKG1vdW50ZWQuY3VycmVudCkge1xuICAgICAgICAvLyBLZWVwIGNoZWNraW5nIGZvciBwZXJtaXNzaW9uc1xuICAgICAgICBwZXJtaXNzaW9uQ2hlY2tlciA9IHNldFRpbWVvdXQoY2hlY2tQZXJtaXNzaW9ucywgU0VDT05EKTtcbiAgICAgICAgc2V0UmVhZHkoUkVBRFlfU1RBVEUuTkVFRF9UT19BTExPV19BQ0NFU1MpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChtb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgc2V0RXJyb3IoZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVNjYW4gPSAoZGF0YSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdXJEZWNvZGVyLnJlY2VpdmVQYXJ0KGRhdGEpO1xuICAgICAgaWYgKHVyRGVjb2Rlci5pc0NvbXBsZXRlKCkpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdXJEZWNvZGVyLnJlc3VsdFVSKCk7XG4gICAgICAgIGhhbmRsZVN1Y2Nlc3MocmVzdWx0KS5jYXRjaChzZXRFcnJvcik7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGlzUmVhZGluZ1dhbGxldCkge1xuICAgICAgICBzZXRFcnJvclRpdGxlKHQoJ1FSSGFyZHdhcmVVbmtub3duUVJDb2RlVGl0bGUnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRFcnJvclRpdGxlKHQoJ1FSSGFyZHdhcmVJbnZhbGlkVHJhbnNhY3Rpb25UaXRsZScpKTtcbiAgICAgIH1cbiAgICAgIHNldEVycm9yKG5ldyBFcnJvcih0KCd1bmtub3duUXJDb2RlJykpKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaW5pdENhbWVyYSA9ICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY2hlY2tQZXJtaXNzaW9ucygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmICghbW91bnRlZC5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChlLm5hbWUgPT09ICdOb3RBbGxvd2VkRXJyb3InKSB7XG4gICAgICAgIGxvZy5pbmZvKGBQZXJtaXNzaW9uIGRlbmllZDogJyR7ZX0nYCk7XG4gICAgICAgIHNldFJlYWR5KFJFQURZX1NUQVRFLk5FRURfVE9fQUxMT1dfQUNDRVNTKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldEVycm9yKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIG1vdW50ZWQuY3VycmVudCA9IHRydWU7XG4gICAgY2hlY2tFbnZpcm9ubWVudCgpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBtb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGNsZWFyVGltZW91dChwZXJtaXNzaW9uQ2hlY2tlcik7XG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZWFkeSA9PT0gUkVBRFlfU1RBVEUuUkVBRFkpIHtcbiAgICAgIGluaXRDYW1lcmEoKTtcbiAgICB9IGVsc2UgaWYgKHJlYWR5ID09PSBSRUFEWV9TVEFURS5ORUVEX1RPX0FMTE9XX0FDQ0VTUykge1xuICAgICAgY2hlY2tQZXJtaXNzaW9ucygpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtyZWFkeV0pO1xuXG4gIGNvbnN0IHRyeUFnYWluID0gKCkgPT4ge1xuICAgIGNsZWFyVGltZW91dChwZXJtaXNzaW9uQ2hlY2tlcik7XG4gICAgcmVzZXQoKTtcbiAgICBjaGVja0Vudmlyb25tZW50KCk7XG4gIH07XG5cbiAgY29uc3QgcmVuZGVyRXJyb3IgPSAoKSA9PiB7XG4gICAgbGV0IHRpdGxlLCBtc2c7XG4gICAgaWYgKGVycm9yLnR5cGUgPT09ICdOT19XRUJDQU1fRk9VTkQnKSB7XG4gICAgICB0aXRsZSA9IHQoJ25vV2ViY2FtRm91bmRUaXRsZScpO1xuICAgICAgbXNnID0gdCgnbm9XZWJjYW1Gb3VuZCcpO1xuICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZSA9PT0gdCgndW5rbm93blFyQ29kZScpKSB7XG4gICAgICBpZiAoaXNSZWFkaW5nV2FsbGV0KSB7XG4gICAgICAgIG1zZyA9IHQoJ1FSSGFyZHdhcmVVbmtub3duV2FsbGV0UVJDb2RlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtc2cgPSB0KCd1bmtub3duUXJDb2RlJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlcnJvci5tZXNzYWdlID09PSB0KCdRUkhhcmR3YXJlTWlzbWF0Y2hlZFNpZ25JZCcpKSB7XG4gICAgICBtc2cgPSB0KCdRUkhhcmR3YXJlTWlzbWF0Y2hlZFNpZ25JZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZSA9IHQoJ3Vua25vd25DYW1lcmFFcnJvclRpdGxlJyk7XG4gICAgICBtc2cgPSB0KCd1bmtub3duQ2FtZXJhRXJyb3InKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJxci1zY2FubmVyX19pbWFnZVwiPlxuICAgICAgICAgIDxpbWcgc3JjPVwiaW1hZ2VzL3dlYmNhbS5zdmdcIiB3aWR0aD1cIjcwXCIgaGVpZ2h0PVwiNzBcIiBhbHQ9XCJcIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge3RpdGxlID8gPGRpdiBjbGFzc05hbWU9XCJxci1zY2FubmVyX190aXRsZVwiPnt0aXRsZX08L2Rpdj4gOiBudWxsfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInFyLXNjYW5uZXJfX2Vycm9yXCI+e21zZ308L2Rpdj5cbiAgICAgICAgPFBhZ2VDb250YWluZXJGb290ZXJcbiAgICAgICAgICBvbkNhbmNlbD17KCkgPT4ge1xuICAgICAgICAgICAgc2V0RXJyb3JUaXRsZSgnJyk7XG4gICAgICAgICAgICBoYW5kbGVDYW5jZWwoKTtcbiAgICAgICAgICB9fVxuICAgICAgICAgIG9uU3VibWl0PXsoKSA9PiB7XG4gICAgICAgICAgICBzZXRFcnJvclRpdGxlKCcnKTtcbiAgICAgICAgICAgIHRyeUFnYWluKCk7XG4gICAgICAgICAgfX1cbiAgICAgICAgICBjYW5jZWxUZXh0PXt0KCdjYW5jZWwnKX1cbiAgICAgICAgICBzdWJtaXRUZXh0PXt0KCd0cnlBZ2FpbicpfVxuICAgICAgICAgIHN1Ym1pdEJ1dHRvblR5cGU9XCJjb25maXJtXCJcbiAgICAgICAgLz5cbiAgICAgIDwvPlxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgcmVuZGVyVmlkZW8gPSAoKSA9PiB7XG4gICAgbGV0IG1lc3NhZ2U7XG4gICAgaWYgKHJlYWR5ID09PSBSRUFEWV9TVEFURS5BQ0NFU1NJTkdfQ0FNRVJBKSB7XG4gICAgICBtZXNzYWdlID0gdCgnYWNjZXNzaW5nWW91ckNhbWVyYScpO1xuICAgIH0gZWxzZSBpZiAocmVhZHkgPT09IFJFQURZX1NUQVRFLlJFQURZKSB7XG4gICAgICBtZXNzYWdlID0gdCgnUVJIYXJkd2FyZVNjYW5JbnN0cnVjdGlvbnMnKTtcbiAgICB9IGVsc2UgaWYgKHJlYWR5ID09PSBSRUFEWV9TVEFURS5ORUVEX1RPX0FMTE9XX0FDQ0VTUykge1xuICAgICAgbWVzc2FnZSA9IHQoJ3lvdU5lZWRUb0FsbG93Q2FtZXJhQWNjZXNzJyk7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInFyLXNjYW5uZXJfX2NvbnRlbnRcIj5cbiAgICAgICAgICA8RW5oYW5jZWRSZWFkZXIgaGFuZGxlU2Nhbj17aGFuZGxlU2Nhbn0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHttZXNzYWdlICYmIDxkaXYgY2xhc3NOYW1lPVwicXItc2Nhbm5lcl9fc3RhdHVzXCI+e21lc3NhZ2V9PC9kaXY+fVxuICAgICAgPC8+XG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwicXItc2Nhbm5lclwiPntlcnJvciA/IHJlbmRlckVycm9yKCkgOiByZW5kZXJWaWRlbygpfTwvZGl2PlxuICApO1xufTtcblxuQmFzZVJlYWRlci5wcm9wVHlwZXMgPSB7XG4gIGlzUmVhZGluZ1dhbGxldDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgaGFuZGxlQ2FuY2VsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBoYW5kbGVTdWNjZXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzZXRFcnJvclRpdGxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQmFzZVJlYWRlcjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQmFyY29kZUZvcm1hdCwgRGVjb2RlSGludFR5cGUgfSBmcm9tICdAenhpbmcvbGlicmFyeSc7XG5pbXBvcnQgeyBCcm93c2VyUVJDb2RlUmVhZGVyIH0gZnJvbSAnQHp4aW5nL2Jyb3dzZXInO1xuaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgTUlMTElTRUNPTkQgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL3RpbWUnO1xuaW1wb3J0IFNwaW5uZXIgZnJvbSAnLi4vLi4vdWkvc3Bpbm5lcic7XG5cbmNvbnN0IEVuaGFuY2VkUmVhZGVyID0gKHsgaGFuZGxlU2NhbiB9KSA9PiB7XG4gIGNvbnN0IFtjYW5wbGF5LCBzZXRDYW5wbGF5XSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgY29kZVJlYWRlciA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGhpbnQgPSBuZXcgTWFwKCk7XG4gICAgaGludC5zZXQoRGVjb2RlSGludFR5cGUuUE9TU0lCTEVfRk9STUFUUywgW0JhcmNvZGVGb3JtYXQuUVJfQ09ERV0pO1xuICAgIHJldHVybiBuZXcgQnJvd3NlclFSQ29kZVJlYWRlcihoaW50LCB7XG4gICAgICBkZWxheUJldHdlZW5TY2FuQXR0ZW1wdHM6IE1JTExJU0VDT05EICogMTAwLFxuICAgICAgZGVsYXlCZXR3ZWVuU2NhblN1Y2Nlc3M6IE1JTExJU0VDT05EICogMTAwLFxuICAgIH0pO1xuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB2aWRlb0VsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlkZW8nKTtcbiAgICBjb25zdCBjYW5wbGF5TGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICBzZXRDYW5wbGF5KHRydWUpO1xuICAgIH07XG4gICAgdmlkZW9FbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXknLCBjYW5wbGF5TGlzdGVuZXIpO1xuICAgIGNvbnN0IHByb21pc2UgPSBjb2RlUmVhZGVyLmRlY29kZUZyb21WaWRlb0RldmljZShcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgICd2aWRlbycsXG4gICAgICAocmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBoYW5kbGVTY2FuKHJlc3VsdC5nZXRUZXh0KCkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHZpZGVvRWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCdjYW5wbGF5JywgY2FucGxheUxpc3RlbmVyKTtcbiAgICAgIHByb21pc2VcbiAgICAgICAgLnRoZW4oKGNvbnRyb2xzKSA9PiB7XG4gICAgICAgICAgaWYgKGNvbnRyb2xzKSB7XG4gICAgICAgICAgICBjb250cm9scy5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2gobG9nLmluZm8pO1xuICAgIH07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInFyLXNjYW5uZXJfX2NvbnRlbnRfX3ZpZGVvLXdyYXBwZXJcIj5cbiAgICAgIDx2aWRlb1xuICAgICAgICBpZD1cInZpZGVvXCJcbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICBkaXNwbGF5OiBjYW5wbGF5ID8gJ2Jsb2NrJyA6ICdub25lJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGZpbHRlcjogJ2JsdXIoNHB4KScsXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgICAge2NhbnBsYXkgPyBudWxsIDogPFNwaW5uZXIgY29sb3I9XCJ2YXIoLS1jb2xvci13YXJuaW5nLWRlZmF1bHQpXCIgLz59XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5FbmhhbmNlZFJlYWRlci5wcm9wVHlwZXMgPSB7XG4gIGhhbmRsZVNjYW46IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBFbmhhbmNlZFJlYWRlcjtcbiIsImltcG9ydCBRUkhhcmR3YXJlUG9wb3ZlciBmcm9tICcuL3FyLWhhcmR3YXJlLXBvcG92ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBRUkhhcmR3YXJlUG9wb3ZlcjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXRDdXJyZW50UVJIYXJkd2FyZVN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vc2VsZWN0b3JzJztcbmltcG9ydCBQb3BvdmVyIGZyb20gJy4uLy4uL3VpL3BvcG92ZXInO1xuaW1wb3J0IHsgdXNlSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2VJMThuQ29udGV4dCc7XG5pbXBvcnQge1xuICBjYW5jZWxTeW5jUVJIYXJkd2FyZSBhcyBjYW5jZWxTeW5jUVJIYXJkd2FyZUFjdGlvbixcbiAgY2FuY2VsUVJIYXJkd2FyZVNpZ25SZXF1ZXN0IGFzIGNhbmNlbFFSSGFyZHdhcmVTaWduUmVxdWVzdEFjdGlvbixcbiAgY2FuY2VsVHgsXG4gIGNhbmNlbFBlcnNvbmFsTXNnLFxuICBjYW5jZWxNc2csXG4gIGNhbmNlbFR5cGVkTXNnLFxufSBmcm9tICcuLi8uLi8uLi9zdG9yZS9hY3Rpb25zJztcbmltcG9ydCB7IE1FU1NBR0VfVFlQRSB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvYXBwJztcbmltcG9ydCBRUkhhcmR3YXJlV2FsbGV0SW1wb3J0ZXIgZnJvbSAnLi9xci1oYXJkd2FyZS13YWxsZXQtaW1wb3J0ZXInO1xuaW1wb3J0IFFSSGFyZHdhcmVTaWduUmVxdWVzdCBmcm9tICcuL3FyLWhhcmR3YXJlLXNpZ24tcmVxdWVzdCc7XG5cbmNvbnN0IFFSSGFyZHdhcmVQb3BvdmVyID0gKCkgPT4ge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcblxuICBjb25zdCBxckhhcmR3YXJlID0gdXNlU2VsZWN0b3IoZ2V0Q3VycmVudFFSSGFyZHdhcmVTdGF0ZSk7XG4gIGNvbnN0IHsgc3luYywgc2lnbiB9ID0gcXJIYXJkd2FyZTtcbiAgY29uc3Qgc2hvd1dhbGxldEltcG9ydGVyID0gc3luYz8ucmVhZGluZztcbiAgY29uc3Qgc2hvd1NpZ25SZXF1ZXN0ID0gc2lnbj8ucmVxdWVzdDtcbiAgY29uc3Qgc2hvd1BvcG92ZXIgPSBzaG93V2FsbGV0SW1wb3J0ZXIgfHwgc2hvd1NpZ25SZXF1ZXN0O1xuICBjb25zdCBbZXJyb3JUaXRsZSwgc2V0RXJyb3JUaXRsZV0gPSB1c2VTdGF0ZSgnJyk7XG5cbiAgY29uc3QgeyB0eERhdGEgfSA9IHVzZVNlbGVjdG9yKChzdGF0ZSkgPT4ge1xuICAgIHJldHVybiBzdGF0ZS5jb25maXJtVHJhbnNhY3Rpb247XG4gIH0pO1xuICAvLyB0aGUgY29uZmlybVRyYW5zYWN0aW9uJ3MgbGlmZSBjeWNsZSBpcyBub3QgY29uc2lzdGVudCB3aXRoIFFSIGhhcmR3YXJlIHdhbGxldDtcbiAgLy8gdGhlIGNvbmZpcm1UcmFuc2FjdGlvbiB3aWxsIGNoYW5nZSBhZnRlciB0aGUgcHJldmlvdXMgdHggaXMgY29uZmlybWVkIG9yIGNhbmNlbCxcbiAgLy8gd2Ugd2FudCB0byBibG9jayB0aGUgY2hhbmdpbmcgYnkgc2lnbiByZXF1ZXN0IGlkO1xuICBjb25zdCBfdHhEYXRhID0gdXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHR4RGF0YTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtzaWduPy5yZXF1ZXN0Py5yZXF1ZXN0SWRdKTtcblxuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHdhbGxldEltcG9ydGVyQ2FuY2VsID0gdXNlQ2FsbGJhY2soXG4gICAgKCkgPT4gZGlzcGF0Y2goY2FuY2VsU3luY1FSSGFyZHdhcmVBY3Rpb24oKSksXG4gICAgW2Rpc3BhdGNoXSxcbiAgKTtcblxuICBjb25zdCBzaWduUmVxdWVzdENhbmNlbCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBsZXQgYWN0aW9uID0gY2FuY2VsVHg7XG4gICAgc3dpdGNoIChfdHhEYXRhLnR5cGUpIHtcbiAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLlBFUlNPTkFMX1NJR046IHtcbiAgICAgICAgYWN0aW9uID0gY2FuY2VsUGVyc29uYWxNc2c7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBNRVNTQUdFX1RZUEUuRVRIX1NJR046IHtcbiAgICAgICAgYWN0aW9uID0gY2FuY2VsTXNnO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgTUVTU0FHRV9UWVBFLkVUSF9TSUdOX1RZUEVEX0RBVEE6IHtcbiAgICAgICAgYWN0aW9uID0gY2FuY2VsVHlwZWRNc2c7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBhY3Rpb24gPSBjYW5jZWxUeDtcbiAgICAgIH1cbiAgICB9XG4gICAgZGlzcGF0Y2goYWN0aW9uKF90eERhdGEpKTtcbiAgICBkaXNwYXRjaChjYW5jZWxRUkhhcmR3YXJlU2lnblJlcXVlc3RBY3Rpb24oKSk7XG4gIH0sIFtkaXNwYXRjaCwgX3R4RGF0YV0pO1xuXG4gIGNvbnN0IHRpdGxlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IF90aXRsZSA9ICcnO1xuICAgIGlmIChzaG93U2lnblJlcXVlc3QpIHtcbiAgICAgIF90aXRsZSA9IHQoJ1FSSGFyZHdhcmVTaWduUmVxdWVzdFRpdGxlJyk7XG4gICAgfSBlbHNlIGlmIChzaG93V2FsbGV0SW1wb3J0ZXIpIHtcbiAgICAgIF90aXRsZSA9IHQoJ1FSSGFyZHdhcmVXYWxsZXRJbXBvcnRlclRpdGxlJyk7XG4gICAgfVxuICAgIGlmIChlcnJvclRpdGxlICE9PSAnJykge1xuICAgICAgX3RpdGxlID0gZXJyb3JUaXRsZTtcbiAgICB9XG4gICAgcmV0dXJuIF90aXRsZTtcbiAgfSwgW3Nob3dTaWduUmVxdWVzdCwgc2hvd1dhbGxldEltcG9ydGVyLCB0LCBlcnJvclRpdGxlXSk7XG4gIHJldHVybiBzaG93UG9wb3ZlciA/IChcbiAgICA8UG9wb3ZlclxuICAgICAgdGl0bGU9e3RpdGxlfVxuICAgICAgb25DbG9zZT17c2hvd1dhbGxldEltcG9ydGVyID8gd2FsbGV0SW1wb3J0ZXJDYW5jZWwgOiBzaWduUmVxdWVzdENhbmNlbH1cbiAgICA+XG4gICAgICB7c2hvd1dhbGxldEltcG9ydGVyICYmIChcbiAgICAgICAgPFFSSGFyZHdhcmVXYWxsZXRJbXBvcnRlclxuICAgICAgICAgIGhhbmRsZUNhbmNlbD17d2FsbGV0SW1wb3J0ZXJDYW5jZWx9XG4gICAgICAgICAgc2V0RXJyb3JUaXRsZT17c2V0RXJyb3JUaXRsZX1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgICB7c2hvd1NpZ25SZXF1ZXN0ICYmIChcbiAgICAgICAgPFFSSGFyZHdhcmVTaWduUmVxdWVzdFxuICAgICAgICAgIHNldEVycm9yVGl0bGU9e3NldEVycm9yVGl0bGV9XG4gICAgICAgICAgaGFuZGxlQ2FuY2VsPXtzaWduUmVxdWVzdENhbmNlbH1cbiAgICAgICAgICByZXF1ZXN0PXtzaWduLnJlcXVlc3R9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgIDwvUG9wb3Zlcj5cbiAgKSA6IG51bGw7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBRUkhhcmR3YXJlUG9wb3ZlcjtcbiIsImltcG9ydCBRUkhhcmR3YXJlU2lnblJlcXVlc3QgZnJvbSAnLi9xci1oYXJkd2FyZS1zaWduLXJlcXVlc3QuY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgUVJIYXJkd2FyZVNpZ25SZXF1ZXN0O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUVJDb2RlIGZyb20gJ3FyY29kZS5yZWFjdCc7XG5pbXBvcnQgeyBVUiwgVVJFbmNvZGVyIH0gZnJvbSAnQG5ncmF2ZWlvL2JjLXVyJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgQm94IGZyb20gJy4uLy4uLy4uL3VpL2JveCc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcbmltcG9ydCB7XG4gIEFsaWduSXRlbXMsXG4gIERJU1BMQVksXG4gIEZMRVhfRElSRUNUSU9OLFxuICBUZXh0QWxpZ24sXG59IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgUGFnZUNvbnRhaW5lckZvb3RlciB9IGZyb20gJy4uLy4uLy4uL3VpL3BhZ2UtY29udGFpbmVyJztcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5cbmNvbnN0IFBsYXllciA9ICh7IHR5cGUsIGNib3IsIGNhbmNlbFFSSGFyZHdhcmVTaWduUmVxdWVzdCwgdG9SZWFkIH0pID0+IHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IHVyRW5jb2RlciA9IHVzZU1lbW8oXG4gICAgKCkgPT4gbmV3IFVSRW5jb2RlcihuZXcgVVIoQnVmZmVyLmZyb20oY2JvciwgJ2hleCcpLCB0eXBlKSwgNDAwKSxcbiAgICBbY2JvciwgdHlwZV0sXG4gICk7XG4gIGNvbnN0IFtjdXJyZW50UVJDb2RlLCBzZXRDdXJyZW50UVJDb2RlXSA9IHVzZVN0YXRlKHVyRW5jb2Rlci5uZXh0UGFydCgpKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBpZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHNldEN1cnJlbnRRUkNvZGUodXJFbmNvZGVyLm5leHRQYXJ0KCkpO1xuICAgIH0sIDEwMCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoaWQpO1xuICAgIH07XG4gIH0sIFt1ckVuY29kZXJdKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Qm94PlxuICAgICAgICA8VGV4dCBhbGlnbj17VGV4dEFsaWduLkNlbnRlcn0+XG4gICAgICAgICAge3QoJ1FSSGFyZHdhcmVTaWduUmVxdWVzdFN1YnRpdGxlJyl9XG4gICAgICAgIDwvVGV4dD5cbiAgICAgIDwvQm94PlxuICAgICAgPEJveFxuICAgICAgICBwYWRkaW5nVG9wPXs0fVxuICAgICAgICBwYWRkaW5nQm90dG9tPXs0fVxuICAgICAgICBkaXNwbGF5PXtESVNQTEFZLkZMRVh9XG4gICAgICAgIGFsaWduSXRlbXM9e0FsaWduSXRlbXMuY2VudGVyfVxuICAgICAgICBmbGV4RGlyZWN0aW9uPXtGTEVYX0RJUkVDVElPTi5DT0xVTU59XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgcGFkZGluZzogMjAsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS1xci1jb2RlLXdoaXRlLWJhY2tncm91bmQpJyxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPFFSQ29kZSB2YWx1ZT17Y3VycmVudFFSQ29kZS50b1VwcGVyQ2FzZSgpfSBzaXplPXsyNTB9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9Cb3g+XG4gICAgICA8Qm94IHBhZGRpbmdCb3R0b209ezR9IHBhZGRpbmdMZWZ0PXs0fSBwYWRkaW5nUmlnaHQ9ezR9PlxuICAgICAgICA8VGV4dCBhbGlnbj17VGV4dEFsaWduLkNlbnRlcn0+XG4gICAgICAgICAge3QoJ1FSSGFyZHdhcmVTaWduUmVxdWVzdERlc2NyaXB0aW9uJyl9XG4gICAgICAgIDwvVGV4dD5cbiAgICAgIDwvQm94PlxuICAgICAgPFBhZ2VDb250YWluZXJGb290ZXJcbiAgICAgICAgb25DYW5jZWw9e2NhbmNlbFFSSGFyZHdhcmVTaWduUmVxdWVzdH1cbiAgICAgICAgb25TdWJtaXQ9e3RvUmVhZH1cbiAgICAgICAgY2FuY2VsVGV4dD17dCgnUVJIYXJkd2FyZVNpZ25SZXF1ZXN0Q2FuY2VsJyl9XG4gICAgICAgIHN1Ym1pdFRleHQ9e3QoJ1FSSGFyZHdhcmVTaWduUmVxdWVzdEdldFNpZ25hdHVyZScpfVxuICAgICAgICBzdWJtaXRCdXR0b25UeXBlPVwiY29uZmlybVwiXG4gICAgICAvPlxuICAgIDwvPlxuICApO1xufTtcblxuUGxheWVyLnByb3BUeXBlcyA9IHtcbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjYm9yOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNhbmNlbFFSSGFyZHdhcmVTaWduUmVxdWVzdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdG9SZWFkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGxheWVyO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBzdWJtaXRRUkhhcmR3YXJlU2lnbmF0dXJlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3RvcmUvYWN0aW9ucyc7XG5pbXBvcnQgUGxheWVyIGZyb20gJy4vcGxheWVyJztcbmltcG9ydCBSZWFkZXIgZnJvbSAnLi9yZWFkZXInO1xuXG5jb25zdCBRUkhhcmR3YXJlU2lnblJlcXVlc3QgPSAoeyByZXF1ZXN0LCBoYW5kbGVDYW5jZWwsIHNldEVycm9yVGl0bGUgfSkgPT4ge1xuICBjb25zdCBbc3RhdHVzLCBzZXRTdGF0dXNdID0gdXNlU3RhdGUoJ3BsYXknKTtcblxuICBjb25zdCB0b1JlYWQgPSB1c2VDYWxsYmFjaygoKSA9PiBzZXRTdGF0dXMoJ3JlYWQnKSwgW10pO1xuXG4gIGNvbnN0IHJlbmRlclBsYXllciA9ICgpID0+IHtcbiAgICBjb25zdCB7IHBheWxvYWQgfSA9IHJlcXVlc3Q7XG4gICAgcmV0dXJuIChcbiAgICAgIDxQbGF5ZXJcbiAgICAgICAgdHlwZT17cGF5bG9hZC50eXBlfVxuICAgICAgICBjYm9yPXtwYXlsb2FkLmNib3J9XG4gICAgICAgIGNhbmNlbFFSSGFyZHdhcmVTaWduUmVxdWVzdD17aGFuZGxlQ2FuY2VsfVxuICAgICAgICB0b1JlYWQ9e3RvUmVhZH1cbiAgICAgIC8+XG4gICAgKTtcbiAgfTtcblxuICBjb25zdCByZW5kZXJSZWFkZXIgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFkZXJcbiAgICAgICAgY2FuY2VsUVJIYXJkd2FyZVNpZ25SZXF1ZXN0PXtoYW5kbGVDYW5jZWx9XG4gICAgICAgIHN1Ym1pdFFSSGFyZHdhcmVTaWduYXR1cmU9e3N1Ym1pdFFSSGFyZHdhcmVTaWduYXR1cmV9XG4gICAgICAgIHJlcXVlc3RJZD17cmVxdWVzdC5yZXF1ZXN0SWR9XG4gICAgICAgIHNldEVycm9yVGl0bGU9e3NldEVycm9yVGl0bGV9XG4gICAgICAvPlxuICAgICk7XG4gIH07XG5cbiAgaWYgKHN0YXR1cyA9PT0gJ3BsYXknKSB7XG4gICAgcmV0dXJuIHJlbmRlclBsYXllcigpO1xuICB9XG4gIHJldHVybiByZW5kZXJSZWFkZXIoKTtcbn07XG5cblFSSGFyZHdhcmVTaWduUmVxdWVzdC5wcm9wVHlwZXMgPSB7XG4gIHJlcXVlc3Q6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgaGFuZGxlQ2FuY2VsOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzZXRFcnJvclRpdGxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUVJIYXJkd2FyZVNpZ25SZXF1ZXN0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEVUSFNpZ25hdHVyZSB9IGZyb20gJ0BrZXlzdG9uZWhxL2JjLXVyLXJlZ2lzdHJ5LWV0aCc7XG5pbXBvcnQgKiBhcyB1dWlkIGZyb20gJ3V1aWQnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBCYXNlUmVhZGVyIGZyb20gJy4uL2Jhc2UtcmVhZGVyJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuXG5jb25zdCBSZWFkZXIgPSAoe1xuICBzdWJtaXRRUkhhcmR3YXJlU2lnbmF0dXJlLFxuICBjYW5jZWxRUkhhcmR3YXJlU2lnblJlcXVlc3QsXG4gIHJlcXVlc3RJZCxcbiAgc2V0RXJyb3JUaXRsZSxcbn0pID0+IHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG4gIGNvbnN0IGNhbmNlbCA9ICgpID0+IHtcbiAgICBjYW5jZWxRUkhhcmR3YXJlU2lnblJlcXVlc3QoKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVTdWNjZXNzID0gYXN5bmMgKHVyKSA9PiB7XG4gICAgaWYgKHVyLnR5cGUgPT09ICdldGgtc2lnbmF0dXJlJykge1xuICAgICAgY29uc3QgZXRoU2lnbmF0dXJlID0gRVRIU2lnbmF0dXJlLmZyb21DQk9SKHVyLmNib3IpO1xuICAgICAgY29uc3QgYnVmZmVyID0gZXRoU2lnbmF0dXJlLmdldFJlcXVlc3RJZCgpO1xuICAgICAgY29uc3Qgc2lnbklkID0gdXVpZC5zdHJpbmdpZnkoYnVmZmVyKTtcbiAgICAgIGlmIChzaWduSWQgPT09IHJlcXVlc3RJZCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgc3VibWl0UVJIYXJkd2FyZVNpZ25hdHVyZShzaWduSWQsIHVyLmNib3IudG9TdHJpbmcoJ2hleCcpKTtcbiAgICAgIH1cbiAgICAgIHNldEVycm9yVGl0bGUodCgnUVJIYXJkd2FyZUludmFsaWRUcmFuc2FjdGlvblRpdGxlJykpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHQoJ1FSSGFyZHdhcmVNaXNtYXRjaGVkU2lnbklkJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRFcnJvclRpdGxlKHQoJ1FSSGFyZHdhcmVJbnZhbGlkVHJhbnNhY3Rpb25UaXRsZScpKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcih0KCd1bmtub3duUXJDb2RlJykpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxCYXNlUmVhZGVyXG4gICAgICBpc1JlYWRpbmdXYWxsZXQ9e2ZhbHNlfVxuICAgICAgaGFuZGxlQ2FuY2VsPXtjYW5jZWx9XG4gICAgICBoYW5kbGVTdWNjZXNzPXtoYW5kbGVTdWNjZXNzfVxuICAgICAgc2V0RXJyb3JUaXRsZT17c2V0RXJyb3JUaXRsZX1cbiAgICAvPlxuICApO1xufTtcblxuUmVhZGVyLnByb3BUeXBlcyA9IHtcbiAgc3VibWl0UVJIYXJkd2FyZVNpZ25hdHVyZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgY2FuY2VsUVJIYXJkd2FyZVNpZ25SZXF1ZXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICByZXF1ZXN0SWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc2V0RXJyb3JUaXRsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWRlcjtcbiIsImltcG9ydCBRUkhhcmR3YXJlV2FsbGV0SW1wb3J0ZXIgZnJvbSAnLi9xci1oYXJkd2FyZS13YWxsZXQtaW1wb3J0ZXIuY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgUVJIYXJkd2FyZVdhbGxldEltcG9ydGVyO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQge1xuICBzdWJtaXRRUkhhcmR3YXJlQ3J5cHRvQWNjb3VudCxcbiAgc3VibWl0UVJIYXJkd2FyZUNyeXB0b0hES2V5LFxufSBmcm9tICcuLi8uLi8uLi8uLi9zdG9yZS9hY3Rpb25zJztcbmltcG9ydCBCYXNlUmVhZGVyIGZyb20gJy4uL2Jhc2UtcmVhZGVyJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuXG5jb25zdCBRUkhhcmR3YXJlV2FsbGV0SW1wb3J0ZXIgPSAoeyBoYW5kbGVDYW5jZWwsIHNldEVycm9yVGl0bGUgfSkgPT4ge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcbiAgY29uc3QgaGFuZGxlU3VjY2VzcyA9IGFzeW5jICh1cikgPT4ge1xuICAgIGlmICh1ci50eXBlID09PSAnY3J5cHRvLWhka2V5Jykge1xuICAgICAgcmV0dXJuIGF3YWl0IHN1Ym1pdFFSSGFyZHdhcmVDcnlwdG9IREtleSh1ci5jYm9yLnRvU3RyaW5nKCdoZXgnKSk7XG4gICAgfSBlbHNlIGlmICh1ci50eXBlID09PSAnY3J5cHRvLWFjY291bnQnKSB7XG4gICAgICByZXR1cm4gYXdhaXQgc3VibWl0UVJIYXJkd2FyZUNyeXB0b0FjY291bnQodXIuY2Jvci50b1N0cmluZygnaGV4JykpO1xuICAgIH1cbiAgICBzZXRFcnJvclRpdGxlKHQoJ1FSSGFyZHdhcmVVbmtub3duUVJDb2RlVGl0bGUnKSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKHQoJ3Vua25vd25RckNvZGUnKSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8QmFzZVJlYWRlclxuICAgICAgaXNSZWFkaW5nV2FsbGV0XG4gICAgICBoYW5kbGVDYW5jZWw9e2hhbmRsZUNhbmNlbH1cbiAgICAgIGhhbmRsZVN1Y2Nlc3M9e2hhbmRsZVN1Y2Nlc3N9XG4gICAgICBzZXRFcnJvclRpdGxlPXtzZXRFcnJvclRpdGxlfVxuICAgIC8+XG4gICk7XG59O1xuXG5RUkhhcmR3YXJlV2FsbGV0SW1wb3J0ZXIucHJvcFR5cGVzID0ge1xuICBoYW5kbGVDYW5jZWw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHNldEVycm9yVGl0bGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBRUkhhcmR3YXJlV2FsbGV0SW1wb3J0ZXI7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9yZWNvdmVyeS1waHJhc2UtcmVtaW5kZXInO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0Jztcbi8vIENvbXBvbmVudHNcbmltcG9ydCBCb3ggZnJvbSAnLi4vLi4vdWkvYm94JztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vdWkvYnV0dG9uJztcbmltcG9ydCBQb3BvdmVyIGZyb20gJy4uLy4uL3VpL3BvcG92ZXInO1xuLy8gSGVscGVyc1xuaW1wb3J0IHtcbiAgRElTUExBWSxcbiAgVGV4dEFsaWduLFxuICBUZXh0VmFyaWFudCxcbiAgQkxPQ0tfU0laRVMsXG4gIEZvbnRXZWlnaHQsXG4gIEp1c3RpZnlDb250ZW50LFxuICBUZXh0Q29sb3IsXG59IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgT05CT0FSRElOR19VTkxPQ0tfUk9VVEUgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9yb3V0ZXMnO1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUmVjb3ZlcnlQaHJhc2VSZW1pbmRlcih7IG9uQ29uZmlybSwgaGFzQmFja2VkVXAgfSkge1xuICBjb25zdCB0ID0gdXNlSTE4bkNvbnRleHQoKTtcbiAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcblxuICBjb25zdCBoYW5kbGVCYWNrVXAgPSAoKSA9PiB7XG4gICAgaGlzdG9yeS5wdXNoKE9OQk9BUkRJTkdfVU5MT0NLX1JPVVRFKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxQb3BvdmVyIGNlbnRlclRpdGxlIHRpdGxlPXt0KCdyZWNvdmVyeVBocmFzZVJlbWluZGVyVGl0bGUnKX0+XG4gICAgICA8Qm94XG4gICAgICAgIHBhZGRpbmdSaWdodD17NH1cbiAgICAgICAgcGFkZGluZ0JvdHRvbT17Nn1cbiAgICAgICAgcGFkZGluZ0xlZnQ9ezR9XG4gICAgICAgIGNsYXNzTmFtZT1cInJlY292ZXJ5LXBocmFzZS1yZW1pbmRlclwiXG4gICAgICA+XG4gICAgICAgIDxUZXh0XG4gICAgICAgICAgY29sb3I9e1RleHRDb2xvci50ZXh0RGVmYXVsdH1cbiAgICAgICAgICBhbGlnbj17VGV4dEFsaWduLkNlbnRlcn1cbiAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5TWR9XG4gICAgICAgICAgbWFyZ2luQm90dG9tPXs0fVxuICAgICAgICA+XG4gICAgICAgICAge3QoJ3JlY292ZXJ5UGhyYXNlUmVtaW5kZXJTdWJUZXh0Jyl9XG4gICAgICAgIDwvVGV4dD5cbiAgICAgICAgPEJveCBtYXJnaW5Ub3A9ezR9IG1hcmdpbkJvdHRvbT17OH0+XG4gICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInJlY292ZXJ5LXBocmFzZS1yZW1pbmRlcl9fbGlzdFwiPlxuICAgICAgICAgICAgPFRleHRcbiAgICAgICAgICAgICAgYXM9XCJsaVwiXG4gICAgICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IudGV4dERlZmF1bHR9XG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ9e0ZvbnRXZWlnaHQuQm9sZH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3QoJ3JlY292ZXJ5UGhyYXNlUmVtaW5kZXJJdGVtT25lJyl9XG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICA8VGV4dCBhcz1cImxpXCI+e3QoJ3JlY292ZXJ5UGhyYXNlUmVtaW5kZXJJdGVtVHdvJyl9PC9UZXh0PlxuICAgICAgICAgICAgPFRleHQgYXM9XCJsaVwiPlxuICAgICAgICAgICAgICB7aGFzQmFja2VkVXAgPyAoXG4gICAgICAgICAgICAgICAgdCgncmVjb3ZlcnlQaHJhc2VSZW1pbmRlckhhc0JhY2tlZFVwJylcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAge3QoJ3JlY292ZXJ5UGhyYXNlUmVtaW5kZXJIYXNOb3RCYWNrZWRVcCcpfVxuICAgICAgICAgICAgICAgICAgPEJveCBkaXNwbGF5PXtESVNQTEFZLklOTElORV9CTE9DS30gbWFyZ2luTGVmdD17MX0+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwibGlua1wiXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQmFja1VwfVxuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAge3QoJ3JlY292ZXJ5UGhyYXNlUmVtaW5kZXJCYWNrdXBTdGFydCcpfVxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvQm94PlxuICAgICAgICA8Qm94IGp1c3RpZnlDb250ZW50PXtKdXN0aWZ5Q29udGVudC5jZW50ZXJ9PlxuICAgICAgICAgIDxCb3ggd2lkdGg9e0JMT0NLX1NJWkVTLlRXT19GSUZUSFN9PlxuICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIG9uQ2xpY2s9e29uQ29uZmlybX0+XG4gICAgICAgICAgICAgIHt0KCdyZWNvdmVyeVBocmFzZVJlbWluZGVyQ29uZmlybScpfVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgIDwvQm94PlxuICAgICAgPC9Cb3g+XG4gICAgPC9Qb3BvdmVyPlxuICApO1xufVxuXG5SZWNvdmVyeVBocmFzZVJlbWluZGVyLnByb3BUeXBlcyA9IHtcbiAgaGFzQmFja2VkVXA6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIG9uQ29uZmlybTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG4iLCJleHBvcnQgY29uc3QgU0VDVVJJVFlfUFJPVklERVJfTUVTU0FHRV9TRVZFUklUSUVTID0ge1xuICBOT1RfTUFMSUNJT1VTOiAwLFxuICBNQUxJQ0lPVVM6IDEsXG4gIE5PVF9TQUZFOiAyLFxufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7XG4gIENvbG9yLFxuICBTRVZFUklUSUVTLFxuICBTaXplLFxuICBUZXh0VmFyaWFudCxcbn0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uLy5zdG9yeWJvb2svaTE4bic7XG5pbXBvcnQgeyBCYW5uZXJBbGVydCwgQnV0dG9uTGluaywgVGV4dCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcbmltcG9ydCB7IFNFQ1VSSVRZX1BST1ZJREVSX01FU1NBR0VfU0VWRVJJVElFUyB9IGZyb20gJy4vc2VjdXJpdHktcHJvdmlkZXItYmFubmVyLW1lc3NhZ2UuY29uc3RhbnRzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2VjdXJpdHlQcm92aWRlckJhbm5lck1lc3NhZ2Uoe1xuICBzZWN1cml0eVByb3ZpZGVyUmVzcG9uc2UsXG59KSB7XG4gIGNvbnN0IHQgPSB1c2VDb250ZXh0KEkxOG5Db250ZXh0KTtcblxuICBsZXQgbWVzc2FnZVRpdGxlO1xuICBsZXQgbWVzc2FnZVRleHQ7XG4gIGxldCBzZXZlcml0eTtcblxuICBpZiAoXG4gICAgc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlLmZsYWdBc0Rhbmdlcm91cyA9PT1cbiAgICBTRUNVUklUWV9QUk9WSURFUl9NRVNTQUdFX1NFVkVSSVRJRVMuTUFMSUNJT1VTXG4gICkge1xuICAgIG1lc3NhZ2VUaXRsZSA9XG4gICAgICBzZWN1cml0eVByb3ZpZGVyUmVzcG9uc2UucmVhc29uX2hlYWRlciA9PT0gJydcbiAgICAgICAgPyB0KCdyZXF1ZXN0RmxhZ2dlZEFzTWFsaWNpb3VzRmFsbGJhY2tDb3B5UmVhc29uVGl0bGUnKVxuICAgICAgICA6IHNlY3VyaXR5UHJvdmlkZXJSZXNwb25zZS5yZWFzb25faGVhZGVyO1xuICAgIG1lc3NhZ2VUZXh0ID1cbiAgICAgIHNlY3VyaXR5UHJvdmlkZXJSZXNwb25zZS5yZWFzb24gPT09ICcnXG4gICAgICAgID8gdCgncmVxdWVzdEZsYWdnZWRBc01hbGljaW91c0ZhbGxiYWNrQ29weVJlYXNvbicpXG4gICAgICAgIDogc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlLnJlYXNvbjtcbiAgICBzZXZlcml0eSA9IFNFVkVSSVRJRVMuREFOR0VSO1xuICB9IGVsc2UgaWYgKFxuICAgIHNlY3VyaXR5UHJvdmlkZXJSZXNwb25zZS5mbGFnQXNEYW5nZXJvdXMgPT09XG4gICAgU0VDVVJJVFlfUFJPVklERVJfTUVTU0FHRV9TRVZFUklUSUVTLk5PVF9TQUZFXG4gICkge1xuICAgIG1lc3NhZ2VUaXRsZSA9IHQoJ3JlcXVlc3RNYXlOb3RCZVNhZmUnKTtcbiAgICBtZXNzYWdlVGV4dCA9IHQoJ3JlcXVlc3RNYXlOb3RCZVNhZmVFcnJvcicpO1xuICAgIHNldmVyaXR5ID0gU0VWRVJJVElFUy5XQVJOSU5HO1xuICB9IGVsc2Uge1xuICAgIG1lc3NhZ2VUaXRsZSA9IHQoJ3JlcXVlc3ROb3RWZXJpZmllZCcpO1xuICAgIG1lc3NhZ2VUZXh0ID0gdCgncmVxdWVzdE5vdFZlcmlmaWVkRXJyb3InKTtcbiAgICBzZXZlcml0eSA9IFNFVkVSSVRJRVMuV0FSTklORztcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEJhbm5lckFsZXJ0XG4gICAgICBtYXJnaW5Ub3A9ezR9XG4gICAgICBtYXJnaW5SaWdodD17NH1cbiAgICAgIG1hcmdpbkxlZnQ9ezR9XG4gICAgICB0aXRsZT17bWVzc2FnZVRpdGxlfVxuICAgICAgc2V2ZXJpdHk9e3NldmVyaXR5fVxuICAgID5cbiAgICAgIDxUZXh0IHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX0gYXM9XCJoNlwiPlxuICAgICAgICB7bWVzc2FnZVRleHR9XG4gICAgICA8L1RleHQ+XG4gICAgICA8VGV4dCB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U219IGFzPVwiaDZcIiBjb2xvcj17Q29sb3IudGV4dEFsdGVybmF0aXZlfT5cbiAgICAgICAge3QoJ3NlY3VyaXR5QWxlcnQnLCBbXG4gICAgICAgICAgPEJ1dHRvbkxpbmtcbiAgICAgICAgICAgIGtleT1cIm9wZW5zZWFfbGlua1wiXG4gICAgICAgICAgICBzaXplPXtTaXplLmluaGVyaXR9XG4gICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9vcGVuc2VhLmlvL1wiXG4gICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCdvcGVuU2VhTmV3Jyl9XG4gICAgICAgICAgPC9CdXR0b25MaW5rPixcbiAgICAgICAgICA8QnV0dG9uTGlua1xuICAgICAgICAgICAga2V5PVwiYmxvY2thaWRfbGlua1wiXG4gICAgICAgICAgICBzaXplPXtTaXplLmluaGVyaXR9XG4gICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9ibG9ja2FpZC5pby9cIlxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dCgnYmxvY2thaWQnKX1cbiAgICAgICAgICA8L0J1dHRvbkxpbms+LFxuICAgICAgICBdKX1cbiAgICAgIDwvVGV4dD5cbiAgICA8L0Jhbm5lckFsZXJ0PlxuICApO1xufVxuXG5TZWN1cml0eVByb3ZpZGVyQmFubmVyTWVzc2FnZS5wcm9wVHlwZXMgPSB7XG4gIHNlY3VyaXR5UHJvdmlkZXJSZXNwb25zZTogUHJvcFR5cGVzLm9iamVjdCxcbn07XG4iLCJpbXBvcnQgU2VsZWN0ZWRBY2NvdW50IGZyb20gJy4vc2VsZWN0ZWQtYWNjb3VudC5jb250YWluZXInO1xuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RlZEFjY291bnQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjb3B5VG9DbGlwYm9hcmQgZnJvbSAnY29weS10by1jbGlwYm9hcmQnO1xuaW1wb3J0IHsgc2hvcnRlbkFkZHJlc3MgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuLi8uLi91aS90b29sdGlwJztcbmltcG9ydCB7IHRvQ2hlY2tzdW1IZXhBZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvaGV4c3RyaW5nLXV0aWxzJztcbmltcG9ydCB7IFNFQ09ORCB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvdGltZSc7XG5pbXBvcnQgeyBJY29uLCBJY29uTmFtZSwgSWNvblNpemUgfSBmcm9tICcuLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5pbXBvcnQgeyBJY29uQ29sb3IgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcblxuY2xhc3MgU2VsZWN0ZWRBY2NvdW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGUgPSB7XG4gICAgY29waWVkOiBmYWxzZSxcbiAgfTtcblxuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgc2VsZWN0ZWRJZGVudGl0eTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuY29weVRpbWVvdXQgPSBudWxsO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuY29weVRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNvcHlUaW1lb3V0KTtcbiAgICAgIHRoaXMuY29weVRpbWVvdXQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCB7XG4gICAgICBzZWxlY3RlZElkZW50aXR5LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgY2hlY2tzdW1tZWRBZGRyZXNzID0gdG9DaGVja3N1bUhleEFkZHJlc3Moc2VsZWN0ZWRJZGVudGl0eS5hZGRyZXNzKTtcblxuICAgIGxldCB0aXRsZSA9IHRoaXMuc3RhdGUuY29waWVkXG4gICAgICA/IHQoJ2NvcGllZEV4Y2xhbWF0aW9uJylcbiAgICAgIDogdCgnY29weVRvQ2xpcGJvYXJkJyk7XG5cbiAgICBsZXQgc2hvd0FjY291bnRDb3B5SWNvbiA9IHRydWU7XG5cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbGVjdGVkLWFjY291bnRcIj5cbiAgICAgICAgPFRvb2x0aXBcbiAgICAgICAgICB3cmFwcGVyQ2xhc3NOYW1lPVwic2VsZWN0ZWQtYWNjb3VudF9fdG9vbHRpcC13cmFwcGVyXCJcbiAgICAgICAgICBwb3NpdGlvbj1cImJvdHRvbVwiXG4gICAgICAgICAgdGl0bGU9e3RpdGxlfVxuICAgICAgICA+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwic2VsZWN0ZWQtYWNjb3VudF9fY2xpY2thYmxlXCJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwic2VsZWN0ZWQtYWNjb3VudC1jbGlja1wiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBjb3BpZWQ6IHRydWUgfSk7XG4gICAgICAgICAgICAgIHRoaXMuY29weVRpbWVvdXQgPSBzZXRUaW1lb3V0KFxuICAgICAgICAgICAgICAgICgpID0+IHRoaXMuc2V0U3RhdGUoeyBjb3BpZWQ6IGZhbHNlIH0pLFxuICAgICAgICAgICAgICAgIFNFQ09ORCAqIDMsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGNvcHlUb0NsaXBib2FyZChjaGVja3N1bW1lZEFkZHJlc3MpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlbGVjdGVkLWFjY291bnRfX25hbWVcIj5cbiAgICAgICAgICAgICAge3NlbGVjdGVkSWRlbnRpdHkubmFtZX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWxlY3RlZC1hY2NvdW50X19hZGRyZXNzXCI+XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB7c2hvcnRlbkFkZHJlc3MoY2hlY2tzdW1tZWRBZGRyZXNzKX1cbiAgICAgICAgICAgICAge3Nob3dBY2NvdW50Q29weUljb24gJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VsZWN0ZWQtYWNjb3VudF9fY29weVwiPlxuICAgICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgICAgbmFtZT17XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5jb3BpZWQgPyBJY29uTmFtZS5Db3B5U3VjY2VzcyA6IEljb25OYW1lLkNvcHlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzaXplPXtJY29uU2l6ZS5TbX1cbiAgICAgICAgICAgICAgICAgICAgY29sb3I9e0ljb25Db2xvci5pY29uQWx0ZXJuYXRpdmV9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvVG9vbHRpcD5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0ZWRBY2NvdW50O1xuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7XG4gIGdldFNlbGVjdGVkSWRlbnRpdHksXG59IGZyb20gJy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgU2VsZWN0ZWRBY2NvdW50IGZyb20gJy4vc2VsZWN0ZWQtYWNjb3VudC5jb21wb25lbnQnO1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBzZWxlY3RlZElkZW50aXR5OiBnZXRTZWxlY3RlZElkZW50aXR5KHN0YXRlKSxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShTZWxlY3RlZEFjY291bnQpO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vc2V0LWFwcHJvdmFsLWZvci1hbGwtd2FybmluZyc7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVzZUkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlSTE4bkNvbnRleHQnO1xuXG5pbXBvcnQgUG9wb3ZlciBmcm9tICcuLi8uLi91aS9wb3BvdmVyJztcbmltcG9ydCBCb3ggZnJvbSAnLi4vLi4vdWkvYm94JztcblxuaW1wb3J0IHtcbiAgRElTUExBWSxcbiAgRkxFWF9ESVJFQ1RJT04sXG4gIEp1c3RpZnlDb250ZW50LFxuICBUZXh0VmFyaWFudCxcbn0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgSWRlbnRpY29uIGZyb20gJy4uLy4uL3VpL2lkZW50aWNvbic7XG5pbXBvcnQgeyBzaG9ydGVuQWRkcmVzcyB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvdXRpbCc7XG5pbXBvcnQge1xuICBJY29uLFxuICBJY29uTmFtZSxcbiAgVGV4dCxcbiAgQnV0dG9uLFxuICBCVVRUT05fVkFSSUFOVCxcbn0gZnJvbSAnLi4vLi4vY29tcG9uZW50LWxpYnJhcnknO1xuXG5jb25zdCBTZXRBcHByb3ZlRm9yQWxsV2FybmluZyA9ICh7XG4gIGNvbGxlY3Rpb25OYW1lLFxuICBzZW5kZXJBZGRyZXNzLFxuICBuYW1lLFxuICB0b3RhbCxcbiAgaXNFUkM3MjEsXG4gIG9uU3VibWl0LFxuICBvbkNhbmNlbCxcbn0pID0+IHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG5cbiAgY29uc3QgZm9vdGVyID0gKFxuICAgIDxCb3hcbiAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgIGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLkNPTFVNTn1cbiAgICAgIGp1c3RpZnlDb250ZW50PXtKdXN0aWZ5Q29udGVudC5TUEFDRV9CRVRXRUVOfVxuICAgICAgY2xhc3NOYW1lPVwic2V0LWFwcHJvdmFsLWZvci1hbGwtd2FybmluZ19fZm9vdGVyXCJcbiAgICAgIGdhcD17NH1cbiAgICA+XG4gICAgICA8QnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT1cInNldC1hcHByb3ZhbC1mb3ItYWxsLXdhcm5pbmdfX2Zvb3Rlcl9fYXBwcm92ZS1idXR0b25cIlxuICAgICAgICB2YXJpYW50PXtCVVRUT05fVkFSSUFOVC5QUklNQVJZfVxuICAgICAgICBkYW5nZXJcbiAgICAgICAgb25DbGljaz17b25TdWJtaXR9XG4gICAgICA+XG4gICAgICAgIHt0KCdhcHByb3ZlQnV0dG9uVGV4dCcpfVxuICAgICAgPC9CdXR0b24+XG4gICAgICA8QnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT1cInNldC1hcHByb3ZhbC1mb3ItYWxsLXdhcm5pbmdfX2Zvb3Rlcl9fY2FuY2VsLWJ1dHRvblwiXG4gICAgICAgIHZhcmlhbnQ9e0JVVFRPTl9WQVJJQU5ULlNFQ09OREFSWX1cbiAgICAgICAgb25DbGljaz17b25DYW5jZWx9XG4gICAgICA+XG4gICAgICAgIHt0KCdyZWplY3QnKX1cbiAgICAgIDwvQnV0dG9uPlxuICAgIDwvQm94PlxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPFBvcG92ZXIgY2xhc3NOYW1lPVwic2V0LWFwcHJvdmFsLWZvci1hbGwtd2FybmluZ19fY29udGVudFwiIGZvb3Rlcj17Zm9vdGVyfT5cbiAgICAgIDxCb3hcbiAgICAgICAgZGlzcGxheT17RElTUExBWS5GTEVYfVxuICAgICAgICBmbGV4RGlyZWN0aW9uPXtGTEVYX0RJUkVDVElPTi5ST1d9XG4gICAgICAgIHBhZGRpbmc9ezR9XG4gICAgICAgIGNsYXNzTmFtZT1cInNldC1hcHByb3ZhbC1mb3ItYWxsLXdhcm5pbmdfX2NvbnRlbnRfX2hlYWRlclwiXG4gICAgICA+XG4gICAgICAgIDxJY29uXG4gICAgICAgICAgbmFtZT17SWNvbk5hbWUuRGFuZ2VyfVxuICAgICAgICAgIGNsYXNzTmFtZT1cInNldC1hcHByb3ZhbC1mb3ItYWxsLXdhcm5pbmdfX2NvbnRlbnRfX2hlYWRlcl9fd2FybmluZy1pY29uXCJcbiAgICAgICAgLz5cbiAgICAgICAgPFRleHQgdmFyaWFudD17VGV4dFZhcmlhbnQuaGVhZGluZ1NtfSBhcz1cImg0XCI+XG4gICAgICAgICAge3QoJ3lvdXJORlRtYXlCZUF0UmlzaycpfVxuICAgICAgICA8L1RleHQ+XG4gICAgICA8L0JveD5cbiAgICAgIDxCb3hcbiAgICAgICAgZGlzcGxheT17RElTUExBWS5GTEVYfVxuICAgICAgICBwYWRkaW5nPXs0fVxuICAgICAgICBqdXN0aWZ5Q29udGVudD17SnVzdGlmeUNvbnRlbnQuc3BhY2VCZXR3ZWVufVxuICAgICAgICBjbGFzc05hbWU9XCJzZXQtYXBwcm92YWwtZm9yLWFsbC13YXJuaW5nX19jb250ZW50X19hY2NvdW50XCJcbiAgICAgID5cbiAgICAgICAgPEJveCBkaXNwbGF5PXtESVNQTEFZLkZMRVh9PlxuICAgICAgICAgIDxJZGVudGljb24gYWRkcmVzcz17c2VuZGVyQWRkcmVzc30gZGlhbWV0ZXI9ezMyfSAvPlxuICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5TWR9XG4gICAgICAgICAgICBhcz1cImg1XCJcbiAgICAgICAgICAgIG1hcmdpbkxlZnQ9ezJ9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJzZXQtYXBwcm92YWwtZm9yLWFsbC13YXJuaW5nX19jb250ZW50X19hY2NvdW50LW5hbWVcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxzdHJvbmc+e25hbWV9PC9zdHJvbmc+IHtgICgke3Nob3J0ZW5BZGRyZXNzKHNlbmRlckFkZHJlc3MpfSlgfVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgPC9Cb3g+XG4gICAgICAgIHtpc0VSQzcyMSAmJiB0b3RhbCAmJiA8VGV4dD57YCR7dCgndG90YWwnKX06ICR7dG90YWx9YH08L1RleHQ+fVxuICAgICAgPC9Cb3g+XG5cbiAgICAgIDxUZXh0XG4gICAgICAgIG1hcmdpbj17NH1cbiAgICAgICAgbWFyZ2luVG9wPXs0fVxuICAgICAgICBtYXJnaW5Cb3R0b209ezR9XG4gICAgICAgIHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlTbX1cbiAgICAgICAgYXM9XCJoNlwiXG4gICAgICA+XG4gICAgICAgIHt0KCduZnRXYXJuaW5nQ29udGVudCcsIFtcbiAgICAgICAgICA8c3Ryb25nIGtleT1cIm5vbl9jdXN0b2RpYWxfYm9sZFwiPlxuICAgICAgICAgICAge3QoJ25mdFdhcm5pbmdDb250ZW50Qm9sZCcsIFtjb2xsZWN0aW9uTmFtZSB8fCAnJ10pfVxuICAgICAgICAgIDwvc3Ryb25nPixcbiAgICAgICAgICA8c3Ryb25nIGtleT1cIm5vbl9jdXN0b2RpYWxfZ3JleVwiPlxuICAgICAgICAgICAge3QoJ25mdFdhcm5pbmdDb250ZW50R3JleScpfVxuICAgICAgICAgIDwvc3Ryb25nPixcbiAgICAgICAgXSl9XG4gICAgICA8L1RleHQ+XG4gICAgPC9Qb3BvdmVyPlxuICApO1xufTtcblxuU2V0QXBwcm92ZUZvckFsbFdhcm5pbmcucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogTkZUIGNvbGxlY3Rpb24gbmFtZSB0aGF0IGlzIGJlaW5nIGFwcHJvdmVkXG4gICAqL1xuICBjb2xsZWN0aW9uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEFkZHJlc3Mgb2YgYSBjdXJyZW50IHVzZXIgdGhhdCBpcyBhcHByb3ZpbmcgY29sbGVjdGlvblxuICAgKi9cbiAgc2VuZGVyQWRkcmVzczogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIE5hbWUgb2YgYSBjdXJyZW50IHVzZXIgdGhhdCBpcyBhcHByb3ZpbmcgY29sbGVjdGlvblxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRvdGFsIG51bWJlciBvZiBpdGVtcyB0aGF0IGFyZSBiZWluZyBhcHByb3ZlZFxuICAgKi9cbiAgdG90YWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJcyBhc3NldCBzdGFuZGFyZCBFUkM3MjFcbiAgICovXG4gIGlzRVJDNzIxOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgYXBwcm92ZXMgY29sbGVjdGlvblxuICAgKi9cbiAgb25TdWJtaXQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCByZWplY3RzIGNvbGxlY3Rpb25cbiAgICovXG4gIG9uQ2FuY2VsOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNldEFwcHJvdmVGb3JBbGxXYXJuaW5nO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vc2lnbmF0dXJlLXJlcXVlc3Qtb3JpZ2luYWwuY29udGFpbmVyJztcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL3NpZ25hdHVyZS1yZXF1ZXN0LW9yaWdpbmFsLXdhcm5pbmcnO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1c2VJMThuQ29udGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL2hvb2tzL3VzZUkxOG5Db250ZXh0JztcblxuaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi4vLi4vLi4vdWkvcG9wb3Zlcic7XG5pbXBvcnQgQm94IGZyb20gJy4uLy4uLy4uL3VpL2JveCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uLy4uLy4uL3VpL2J1dHRvbic7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi8uLi8uLi91aS90eXBvZ3JhcGh5JztcbmltcG9ydCB7XG4gIEljb25Db2xvcixcbiAgRElTUExBWSxcbiAgRkxFWF9ESVJFQ1RJT04sXG4gIEZPTlRfV0VJR0hULFxuICBKdXN0aWZ5Q29udGVudCxcbiAgVGV4dENvbG9yLFxuICBUeXBvZ3JhcGh5VmFyaWFudCxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgSWRlbnRpY29uIGZyb20gJy4uLy4uLy4uL3VpL2lkZW50aWNvbic7XG5pbXBvcnQgeyBzaG9ydGVuQWRkcmVzcyB9IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBJY29uLCBJY29uTmFtZSB9IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudC1saWJyYXJ5JztcblxuY29uc3QgU2lnbmF0dXJlUmVxdWVzdE9yaWdpbmFsV2FybmluZyA9ICh7XG4gIHNlbmRlckFkZHJlc3MsXG4gIG5hbWUsXG4gIG9uU3VibWl0LFxuICBvbkNhbmNlbCxcbn0pID0+IHtcbiAgY29uc3QgdCA9IHVzZUkxOG5Db250ZXh0KCk7XG5cbiAgcmV0dXJuIChcbiAgICA8UG9wb3ZlciBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC13YXJuaW5nX19jb250ZW50XCI+XG4gICAgICA8Qm94XG4gICAgICAgIGRpc3BsYXk9e0RJU1BMQVkuRkxFWH1cbiAgICAgICAgZmxleERpcmVjdGlvbj17RkxFWF9ESVJFQ1RJT04uUk9XfVxuICAgICAgICBwYWRkaW5nPXs0fVxuICAgICAgICBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC13YXJuaW5nX19jb250ZW50X19oZWFkZXJcIlxuICAgICAgPlxuICAgICAgICA8SWNvblxuICAgICAgICAgIG5hbWU9e0ljb25OYW1lLkRhbmdlcn1cbiAgICAgICAgICBjb2xvcj17SWNvbkNvbG9yLmVycm9yRGVmYXVsdH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC13YXJuaW5nX19jb250ZW50X19oZWFkZXJfX3dhcm5pbmctaWNvblwiXG4gICAgICAgIC8+XG4gICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgdmFyaWFudD17VHlwb2dyYXBoeVZhcmlhbnQuSDR9XG4gICAgICAgICAgZm9udFdlaWdodD17Rk9OVF9XRUlHSFQuQk9MRH1cbiAgICAgICAgPlxuICAgICAgICAgIHt0KCd5b3VyRnVuZHNNYXlCZUF0UmlzaycpfVxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICA8L0JveD5cbiAgICAgIDxCb3hcbiAgICAgICAgZGlzcGxheT17RElTUExBWS5GTEVYfVxuICAgICAgICBwYWRkaW5nPXs0fVxuICAgICAgICBqdXN0aWZ5Q29udGVudD17SnVzdGlmeUNvbnRlbnQuc3BhY2VCZXR3ZWVufVxuICAgICAgICBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC13YXJuaW5nX19jb250ZW50X19hY2NvdW50XCJcbiAgICAgID5cbiAgICAgICAgPEJveCBkaXNwbGF5PXtESVNQTEFZLkZMRVh9PlxuICAgICAgICAgIDxJZGVudGljb24gYWRkcmVzcz17c2VuZGVyQWRkcmVzc30gZGlhbWV0ZXI9ezMyfSAvPlxuICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICB2YXJpYW50PXtUeXBvZ3JhcGh5VmFyaWFudC5INX1cbiAgICAgICAgICAgIG1hcmdpbkxlZnQ9ezJ9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC13YXJuaW5nX19jb250ZW50X19hY2NvdW50LW5hbWVcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxiPntuYW1lfTwvYj4ge2AgKCR7c2hvcnRlbkFkZHJlc3Moc2VuZGVyQWRkcmVzcyl9KWB9XG4gICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICA8L0JveD5cbiAgICAgIDwvQm94PlxuXG4gICAgICA8VHlwb2dyYXBoeVxuICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHRBbHRlcm5hdGl2ZX1cbiAgICAgICAgbWFyZ2luPXs0fVxuICAgICAgICBtYXJnaW5Ub3A9ezR9XG4gICAgICAgIG1hcmdpbkJvdHRvbT17NH1cbiAgICAgICAgdmFyaWFudD17VHlwb2dyYXBoeVZhcmlhbnQuSDZ9XG4gICAgICA+XG4gICAgICAgIHt0KCdzaWduYXR1cmVSZXF1ZXN0V2FybmluZycsIFtcbiAgICAgICAgICA8YVxuICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vY29uc2Vuc3lzLm5ldC9ibG9nL21ldGFtYXNrL3RoZS1zZWFsLW9mLWFwcHJvdmFsLWtub3ctd2hhdC15b3VyZS1jb25zZW50aW5nLXRvLXdpdGgtcGVybWlzc2lvbnMtYW5kLWFwcHJvdmFscy1pbi1tZXRhbWFzay9cIlxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHR5cGU9XCJsaW5rXCJcbiAgICAgICAgICAgIGtleT1cIm5vbl9jdXN0b2RpYWxfbGlua1wiXG4gICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgIHN0eWxlPXt7IGNvbG9yOiAndmFyKC0tY29sb3ItcHJpbWFyeS1kZWZhdWx0KScgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dCgnbGVhcm5Nb3JlVXBwZXJDYXNlJyl9XG4gICAgICAgICAgPC9hPixcbiAgICAgICAgXSl9XG4gICAgICA8L1R5cG9ncmFwaHk+XG5cbiAgICAgIDxCb3hcbiAgICAgICAgZGlzcGxheT17RElTUExBWS5GTEVYfVxuICAgICAgICBmbGV4RGlyZWN0aW9uPXtGTEVYX0RJUkVDVElPTi5DT0xVTU59XG4gICAgICAgIGp1c3RpZnlDb250ZW50PXtKdXN0aWZ5Q29udGVudC5zcGFjZUJldHdlZW59XG4gICAgICAgIHBhZGRpbmc9ezR9XG4gICAgICAgIGNsYXNzTmFtZT1cInNpZ25hdHVyZS1yZXF1ZXN0LXdhcm5pbmdfX2Zvb3RlclwiXG4gICAgICA+XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC13YXJuaW5nX19mb290ZXJfX3NpZ24tYnV0dG9uXCJcbiAgICAgICAgICB0eXBlPVwiZGFuZ2VyLXByaW1hcnlcIlxuICAgICAgICAgIG9uQ2xpY2s9e29uU3VibWl0fVxuICAgICAgICA+XG4gICAgICAgICAge3QoJ3NpZ24nKX1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC13YXJuaW5nX19mb290ZXJfX3JlamVjdC1idXR0b25cIlxuICAgICAgICAgIHR5cGU9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgIG9uQ2xpY2s9e29uQ2FuY2VsfVxuICAgICAgICA+XG4gICAgICAgICAge3QoJ3JlamVjdCcpfVxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvQm94PlxuICAgIDwvUG9wb3Zlcj5cbiAgKTtcbn07XG5cblNpZ25hdHVyZVJlcXVlc3RPcmlnaW5hbFdhcm5pbmcucHJvcFR5cGVzID0ge1xuICBzZW5kZXJBZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvblN1Ym1pdDogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQ2FuY2VsOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNpZ25hdHVyZVJlcXVlc3RPcmlnaW5hbFdhcm5pbmc7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgT2JqZWN0SW5zcGVjdG9yIH0gZnJvbSAncmVhY3QtaW5zcGVjdG9yJztcbmltcG9ydCBMZWRnZXJJbnN0cnVjdGlvbkZpZWxkIGZyb20gJy4uL2xlZGdlci1pbnN0cnVjdGlvbi1maWVsZCc7XG5pbXBvcnQgeyBNRVNTQUdFX1RZUEUgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2FwcCc7XG5pbXBvcnQge1xuICBnZXROZXR3b3JrTmFtZUZyb21Qcm92aWRlclR5cGUsXG4gIGdldFVSTEhvc3ROYW1lLFxuICBzYW5pdGl6ZVN0cmluZyxcbn0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy91dGlscy91dGlsJztcbmltcG9ydCB7IHN0cmlwSGV4UHJlZml4IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL21vZHVsZXMvaGV4c3RyaW5nLXV0aWxzJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vdWkvYnV0dG9uJztcbmltcG9ydCBTaXRlT3JpZ2luIGZyb20gJy4uLy4uL3VpL3NpdGUtb3JpZ2luJztcbmltcG9ydCBOZXR3b3JrQWNjb3VudEJhbGFuY2VIZWFkZXIgZnJvbSAnLi4vbmV0d29yay1hY2NvdW50LWJhbGFuY2UtaGVhZGVyJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uLy4uL3VpL3R5cG9ncmFwaHkvdHlwb2dyYXBoeSc7XG5pbXBvcnQgeyBQYWdlQ29udGFpbmVyRm9vdGVyIH0gZnJvbSAnLi4vLi4vdWkvcGFnZS1jb250YWluZXInO1xuaW1wb3J0IHtcbiAgVHlwb2dyYXBoeVZhcmlhbnQsXG4gIEZPTlRfV0VJR0hULFxuICBURVhUX0FMSUdOLFxuICBUZXh0Q29sb3IsXG59IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgTnVtZXJpYyB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL051bWVyaWMnO1xuaW1wb3J0IHsgRXRoZXJEZW5vbWluYXRpb24gfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvY29uc3RhbnRzL2NvbW1vbic7XG5pbXBvcnQgQ29uZmlybVBhZ2VDb250YWluZXJOYXZpZ2F0aW9uIGZyb20gJy4uL2NvbmZpcm0tcGFnZS1jb250YWluZXIvY29uZmlybS1wYWdlLWNvbnRhaW5lci1uYXZpZ2F0aW9uJztcbmltcG9ydCBTZWN1cml0eVByb3ZpZGVyQmFubmVyTWVzc2FnZSBmcm9tICcuLi9zZWN1cml0eS1wcm92aWRlci1iYW5uZXItbWVzc2FnZS9zZWN1cml0eS1wcm92aWRlci1iYW5uZXItbWVzc2FnZSc7XG5pbXBvcnQgeyBTRUNVUklUWV9QUk9WSURFUl9NRVNTQUdFX1NFVkVSSVRJRVMgfSBmcm9tICcuLi9zZWN1cml0eS1wcm92aWRlci1iYW5uZXItbWVzc2FnZS9zZWN1cml0eS1wcm92aWRlci1iYW5uZXItbWVzc2FnZS5jb25zdGFudHMnO1xuaW1wb3J0IHsgZm9ybWF0Q3VycmVuY3kgfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL3V0aWxzL2NvbmZpcm0tdHgudXRpbCc7XG5pbXBvcnQgeyBnZXRWYWx1ZUZyb21XZWlIZXggfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9jb252ZXJzaW9uLnV0aWxzJztcblxuaW1wb3J0IFNpZ25hdHVyZVJlcXVlc3RPcmlnaW5hbFdhcm5pbmcgZnJvbSAnLi9zaWduYXR1cmUtcmVxdWVzdC1vcmlnaW5hbC13YXJuaW5nJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2lnbmF0dXJlUmVxdWVzdE9yaWdpbmFsIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlcyA9IHtcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZnJvbUFjY291bnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBhZGRyZXNzOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICBiYWxhbmNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB9KS5pc1JlcXVpcmVkLFxuICAgIGNhbmNlbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjbGVhckNvbmZpcm1UcmFuc2FjdGlvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgbW9zdFJlY2VudE92ZXJ2aWV3UGFnZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHNpZ246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdHhEYXRhOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3ViamVjdE1ldGFkYXRhOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGhhcmR3YXJlV2FsbGV0UmVxdWlyZXNDb25uZWN0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0xlZGdlcldhbGxldDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbmF0aXZlQ3VycmVuY3k6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBjdXJyZW50Q3VycmVuY3k6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBjb252ZXJzaW9uUmF0ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICBtZXNzYWdlc0NvdW50OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHNob3dSZWplY3RUcmFuc2FjdGlvbnNDb25maXJtYXRpb25Nb2RhbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjYW5jZWxBbGw6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgcHJvdmlkZXJDb25maWc6IFByb3BUeXBlcy5vYmplY3QsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgc2hvd1NpZ25hdHVyZVJlcXVlc3RXYXJuaW5nOiBmYWxzZSxcbiAgfTtcblxuICBtc2dIZXhUb1RleHQgPSAoaGV4KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0cmlwcGVkID0gc3RyaXBIZXhQcmVmaXgoaGV4KTtcbiAgICAgIGNvbnN0IGJ1ZmYgPSBCdWZmZXIuZnJvbShzdHJpcHBlZCwgJ2hleCcpO1xuICAgICAgcmV0dXJuIGJ1ZmYubGVuZ3RoID09PSAzMiA/IGhleCA6IGJ1ZmYudG9TdHJpbmcoJ3V0ZjgnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gaGV4O1xuICAgIH1cbiAgfTtcblxuICByZW5kZXJBY2NvdW50SW5mbyA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZXF1ZXN0LXNpZ25hdHVyZV9fYWNjb3VudC1pbmZvXCI+XG4gICAgICAgIHt0aGlzLnJlbmRlckFjY291bnQoKX1cbiAgICAgICAge3RoaXMucmVuZGVyUmVxdWVzdEljb24oKX1cbiAgICAgICAge3RoaXMucmVuZGVyQmFsYW5jZSgpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJUeXBlZERhdGEgPSAoZGF0YSkgPT4ge1xuICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnN0IHsgZG9tYWluLCBtZXNzYWdlIH0gPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlcXVlc3Qtc2lnbmF0dXJlX190eXBlZC1jb250YWluZXJcIj5cbiAgICAgICAge2RvbWFpbiA/IChcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGgxPnt0KCdkb21haW4nKX08L2gxPlxuICAgICAgICAgICAgPE9iamVjdEluc3BlY3RvciBkYXRhPXtkb21haW59IGV4cGFuZExldmVsPXsxfSBuYW1lPVwiZG9tYWluXCIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICAnJ1xuICAgICAgICApfVxuICAgICAgICB7bWVzc2FnZSA/IChcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGgxPnt0KCdtZXNzYWdlJyl9PC9oMT5cbiAgICAgICAgICAgIDxPYmplY3RJbnNwZWN0b3IgZGF0YT17bWVzc2FnZX0gZXhwYW5kTGV2ZWw9ezF9IG5hbWU9XCJtZXNzYWdlXCIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICAnJ1xuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJCb2R5ID0gKCkgPT4ge1xuICAgIGxldCByb3dzO1xuICAgIGNvbnN0IG5vdGljZSA9IGAke3RoaXMuY29udGV4dC50KCd5b3VTaWduJyl9OmA7XG5cbiAgICBjb25zdCB7IHR4RGF0YSwgc3ViamVjdE1ldGFkYXRhIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHtcbiAgICAgIHR5cGUsXG4gICAgICBtc2dQYXJhbXM6IHsgZGF0YSB9LFxuICAgIH0gPSB0eERhdGE7XG5cbiAgICBpZiAodHlwZSA9PT0gTUVTU0FHRV9UWVBFLlBFUlNPTkFMX1NJR04pIHtcbiAgICAgIHJvd3MgPSBbXG4gICAgICAgIHsgbmFtZTogdGhpcy5jb250ZXh0LnQoJ21lc3NhZ2UnKSwgdmFsdWU6IHRoaXMubXNnSGV4VG9UZXh0KGRhdGEpIH0sXG4gICAgICBdO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRV9UWVBFLkVUSF9TSUdOX1RZUEVEX0RBVEEpIHtcbiAgICAgIHJvd3MgPSBkYXRhO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRV9UWVBFLkVUSF9TSUdOKSB7XG4gICAgICByb3dzID0gW3sgbmFtZTogdGhpcy5jb250ZXh0LnQoJ21lc3NhZ2UnKSwgdmFsdWU6IGRhdGEgfV07XG4gICAgfVxuXG4gICAgY29uc3QgdGFyZ2V0U3ViamVjdE1ldGFkYXRhID0gdHhEYXRhLm1zZ1BhcmFtcy5vcmlnaW5cbiAgICAgID8gc3ViamVjdE1ldGFkYXRhPy5bdHhEYXRhLm1zZ1BhcmFtcy5vcmlnaW5dXG4gICAgICA6IG51bGw7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZXF1ZXN0LXNpZ25hdHVyZV9fYm9keVwiPlxuICAgICAgICB7KHR4RGF0YT8uc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlPy5mbGFnQXNEYW5nZXJvdXMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgIHR4RGF0YT8uc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlPy5mbGFnQXNEYW5nZXJvdXMgIT09XG4gICAgICAgICAgICBTRUNVUklUWV9QUk9WSURFUl9NRVNTQUdFX1NFVkVSSVRJRVMuTk9UX01BTElDSU9VUykgfHxcbiAgICAgICAgKHR4RGF0YT8uc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlICYmXG4gICAgICAgICAgT2JqZWN0LmtleXModHhEYXRhLnNlY3VyaXR5UHJvdmlkZXJSZXNwb25zZSkubGVuZ3RoID09PSAwKSA/IChcbiAgICAgICAgICA8U2VjdXJpdHlQcm92aWRlckJhbm5lck1lc3NhZ2VcbiAgICAgICAgICAgIHNlY3VyaXR5UHJvdmlkZXJSZXNwb25zZT17dHhEYXRhLnNlY3VyaXR5UHJvdmlkZXJSZXNwb25zZX1cbiAgICAgICAgICAvPlxuICAgICAgICApIDogbnVsbH1cblxuICAgICAgICB7XG4gICAgICAgIH1cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlcXVlc3Qtc2lnbmF0dXJlX19vcmlnaW5cIj5cbiAgICAgICAgICA8U2l0ZU9yaWdpblxuICAgICAgICAgICAgdGl0bGU9e3R4RGF0YS5tc2dQYXJhbXMub3JpZ2lufVxuICAgICAgICAgICAgc2l0ZU9yaWdpbj17dHhEYXRhLm1zZ1BhcmFtcy5vcmlnaW59XG4gICAgICAgICAgICBpY29uU3JjPXt0YXJnZXRTdWJqZWN0TWV0YWRhdGE/Lmljb25Vcmx9XG4gICAgICAgICAgICBpY29uTmFtZT17XG4gICAgICAgICAgICAgIGdldFVSTEhvc3ROYW1lKHRhcmdldFN1YmplY3RNZXRhZGF0YT8ub3JpZ2luKSB8fFxuICAgICAgICAgICAgICB0YXJnZXRTdWJqZWN0TWV0YWRhdGE/Lm9yaWdpblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hpcFxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgY2xhc3NOYW1lPVwicmVxdWVzdC1zaWduYXR1cmVfX2NvbnRlbnRfX3RpdGxlXCJcbiAgICAgICAgICB2YXJpYW50PXtUeXBvZ3JhcGh5VmFyaWFudC5IM31cbiAgICAgICAgICBmb250V2VpZ2h0PXtGT05UX1dFSUdIVC5CT0xEfVxuICAgICAgICA+XG4gICAgICAgICAge3RoaXMuY29udGV4dC50KCdzaWdSZXF1ZXN0Jyl9XG4gICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICBjbGFzc05hbWU9XCJyZXF1ZXN0LXNpZ25hdHVyZV9fY29udGVudF9fc3VidGl0bGVcIlxuICAgICAgICAgIHZhcmlhbnQ9e1R5cG9ncmFwaHlWYXJpYW50Lkg3fVxuICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IudGV4dEFsdGVybmF0aXZlfVxuICAgICAgICAgIGFsaWduPXtURVhUX0FMSUdOLkNFTlRFUn1cbiAgICAgICAgICBtYXJnaW49ezEyfVxuICAgICAgICAgIG1hcmdpblRvcD17M31cbiAgICAgICAgPlxuICAgICAgICAgIHt0aGlzLmNvbnRleHQudCgnc2lnbmF0dXJlUmVxdWVzdEd1aWRhbmNlJyl9XG4gICAgICAgIDwvVHlwb2dyYXBoeT5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NuYW1lcygncmVxdWVzdC1zaWduYXR1cmVfX25vdGljZScpfT57bm90aWNlfTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlcXVlc3Qtc2lnbmF0dXJlX19yb3dzXCI+XG4gICAgICAgICAge3Jvd3MubWFwKCh7IG5hbWUsIHZhbHVlIH0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJyZXF1ZXN0LXNpZ25hdHVyZV9fcm93XCJcbiAgICAgICAgICAgICAgICBrZXk9e2ByZXF1ZXN0LXNpZ25hdHVyZS1yb3ctJHtpbmRleH1gfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZXF1ZXN0LXNpZ25hdHVyZV9fcm93LXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICB7c2FuaXRpemVTdHJpbmcoYCR7bmFtZX06YCl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZXF1ZXN0LXNpZ25hdHVyZV9fcm93LXZhbHVlXCI+XG4gICAgICAgICAgICAgICAgICB7c2FuaXRpemVTdHJpbmcodmFsdWUpfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICBvblN1Ym1pdCA9IGFzeW5jIChldmVudCkgPT4ge1xuICAgIGNvbnN0IHsgY2xlYXJDb25maXJtVHJhbnNhY3Rpb24sIGhpc3RvcnksIG1vc3RSZWNlbnRPdmVydmlld1BhZ2UsIHNpZ24gfSA9XG4gICAgICB0aGlzLnByb3BzO1xuXG4gICAgYXdhaXQgc2lnbihldmVudCk7XG4gICAgY2xlYXJDb25maXJtVHJhbnNhY3Rpb24oKTtcbiAgICBoaXN0b3J5LnB1c2gobW9zdFJlY2VudE92ZXJ2aWV3UGFnZSk7XG4gIH07XG5cbiAgb25DYW5jZWwgPSBhc3luYyAoZXZlbnQpID0+IHtcbiAgICBjb25zdCB7IGNsZWFyQ29uZmlybVRyYW5zYWN0aW9uLCBoaXN0b3J5LCBtb3N0UmVjZW50T3ZlcnZpZXdQYWdlLCBjYW5jZWwgfSA9XG4gICAgICB0aGlzLnByb3BzO1xuXG4gICAgYXdhaXQgY2FuY2VsKGV2ZW50KTtcbiAgICBjbGVhckNvbmZpcm1UcmFuc2FjdGlvbigpO1xuICAgIGhpc3RvcnkucHVzaChtb3N0UmVjZW50T3ZlcnZpZXdQYWdlKTtcbiAgfTtcblxuICByZW5kZXJGb290ZXIgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY2FuY2VsLFxuICAgICAgc2lnbixcbiAgICAgIGNsZWFyQ29uZmlybVRyYW5zYWN0aW9uLFxuICAgICAgaGlzdG9yeSxcbiAgICAgIG1vc3RSZWNlbnRPdmVydmlld1BhZ2UsXG4gICAgICB0eERhdGE6IHsgdHlwZSB9LFxuICAgICAgaGFyZHdhcmVXYWxsZXRSZXF1aXJlc0Nvbm5lY3Rpb24sXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB0IH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFBhZ2VDb250YWluZXJGb290ZXJcbiAgICAgICAgY2FuY2VsVGV4dD17dCgncmVqZWN0Jyl9XG4gICAgICAgIHN1Ym1pdFRleHQ9e3QoJ3NpZ24nKX1cbiAgICAgICAgb25DYW5jZWw9e2FzeW5jIChldmVudCkgPT4ge1xuICAgICAgICAgIGF3YWl0IGNhbmNlbChldmVudCk7XG4gICAgICAgICAgY2xlYXJDb25maXJtVHJhbnNhY3Rpb24oKTtcbiAgICAgICAgICBoaXN0b3J5LnB1c2gobW9zdFJlY2VudE92ZXJ2aWV3UGFnZSk7XG4gICAgICAgIH19XG4gICAgICAgIG9uU3VibWl0PXthc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gTUVTU0FHRV9UWVBFLkVUSF9TSUdOKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2hvd1NpZ25hdHVyZVJlcXVlc3RXYXJuaW5nOiB0cnVlIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCBzaWduKGV2ZW50KTtcbiAgICAgICAgICAgIGNsZWFyQ29uZmlybVRyYW5zYWN0aW9uKCk7XG4gICAgICAgICAgICBoaXN0b3J5LnB1c2gobW9zdFJlY2VudE92ZXJ2aWV3UGFnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9fVxuICAgICAgICBkaXNhYmxlZD17aGFyZHdhcmVXYWxsZXRSZXF1aXJlc0Nvbm5lY3Rpb259XG4gICAgICAvPlxuICAgICk7XG4gIH07XG5cbiAgaGFuZGxlQ2FuY2VsQWxsID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGNhbmNlbEFsbCxcbiAgICAgIGNsZWFyQ29uZmlybVRyYW5zYWN0aW9uLFxuICAgICAgaGlzdG9yeSxcbiAgICAgIG1vc3RSZWNlbnRPdmVydmlld1BhZ2UsXG4gICAgICBzaG93UmVqZWN0VHJhbnNhY3Rpb25zQ29uZmlybWF0aW9uTW9kYWwsXG4gICAgICBtZXNzYWdlc0NvdW50LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHVuYXBwcm92ZWRUeENvdW50ID0gbWVzc2FnZXNDb3VudDtcblxuICAgIHNob3dSZWplY3RUcmFuc2FjdGlvbnNDb25maXJtYXRpb25Nb2RhbCh7XG4gICAgICB1bmFwcHJvdmVkVHhDb3VudCxcbiAgICAgIG9uU3VibWl0OiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IGNhbmNlbEFsbCgpO1xuICAgICAgICBjbGVhckNvbmZpcm1UcmFuc2FjdGlvbigpO1xuICAgICAgICBoaXN0b3J5LnB1c2gobW9zdFJlY2VudE92ZXJ2aWV3UGFnZSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9O1xuXG4gIHJlbmRlciA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwcm92aWRlckNvbmZpZyxcbiAgICAgIG1lc3NhZ2VzQ291bnQsXG4gICAgICBuYXRpdmVDdXJyZW5jeSxcbiAgICAgIGN1cnJlbnRDdXJyZW5jeSxcbiAgICAgIGZyb21BY2NvdW50OiB7IGFkZHJlc3MsIGJhbGFuY2UsIG5hbWUgfSxcbiAgICAgIGNvbnZlcnNpb25SYXRlLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgc2hvd1NpZ25hdHVyZVJlcXVlc3RXYXJuaW5nIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgY29uc3QgcmVqZWN0TlRleHQgPSB0KCdyZWplY3RSZXF1ZXN0c04nLCBbbWVzc2FnZXNDb3VudF0pO1xuICAgIGNvbnN0IG5ldHdvcmtOYW1lID0gZ2V0TmV0d29ya05hbWVGcm9tUHJvdmlkZXJUeXBlKHByb3ZpZGVyQ29uZmlnLnR5cGUpO1xuICAgIGNvbnN0IGN1cnJlbnROZXR3b3JrID1cbiAgICAgIG5ldHdvcmtOYW1lID09PSAnJ1xuICAgICAgICA/IHByb3ZpZGVyQ29uZmlnLm5pY2tuYW1lIHx8IHQoJ3Vua25vd25OZXR3b3JrJylcbiAgICAgICAgOiB0KG5ldHdvcmtOYW1lKTtcblxuICAgIGNvbnN0IGJhbGFuY2VJbkJhc2VBc3NldCA9IGNvbnZlcnNpb25SYXRlXG4gICAgICA/IGZvcm1hdEN1cnJlbmN5KFxuICAgICAgICAgIGdldFZhbHVlRnJvbVdlaUhleCh7XG4gICAgICAgICAgICB2YWx1ZTogYmFsYW5jZSxcbiAgICAgICAgICAgIGZyb21DdXJyZW5jeTogbmF0aXZlQ3VycmVuY3ksXG4gICAgICAgICAgICB0b0N1cnJlbmN5OiBjdXJyZW50Q3VycmVuY3ksXG4gICAgICAgICAgICBjb252ZXJzaW9uUmF0ZSxcbiAgICAgICAgICAgIG51bWJlck9mRGVjaW1hbHM6IDYsXG4gICAgICAgICAgICB0b0Rlbm9taW5hdGlvbjogRXRoZXJEZW5vbWluYXRpb24uRVRILFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGN1cnJlbnRDdXJyZW5jeSxcbiAgICAgICAgKVxuICAgICAgOiBuZXcgTnVtZXJpYyhiYWxhbmNlLCAxNiwgRXRoZXJEZW5vbWluYXRpb24uV0VJKVxuICAgICAgICAgIC50b0Rlbm9taW5hdGlvbihFdGhlckRlbm9taW5hdGlvbi5FVEgpXG4gICAgICAgICAgLnJvdW5kKDYpXG4gICAgICAgICAgLnRvQmFzZSgxMClcbiAgICAgICAgICAudG9TdHJpbmcoKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJlcXVlc3Qtc2lnbmF0dXJlX19jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZXF1ZXN0LXNpZ25hdHVyZV9fbmF2aWdhdGlvblwiPlxuICAgICAgICAgIDxDb25maXJtUGFnZUNvbnRhaW5lck5hdmlnYXRpb24gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicmVxdWVzdC1zaWduYXR1cmVfX2FjY291bnRcIj5cbiAgICAgICAgICA8TmV0d29ya0FjY291bnRCYWxhbmNlSGVhZGVyXG4gICAgICAgICAgICBuZXR3b3JrTmFtZT17Y3VycmVudE5ldHdvcmt9XG4gICAgICAgICAgICBhY2NvdW50TmFtZT17bmFtZX1cbiAgICAgICAgICAgIGFjY291bnRCYWxhbmNlPXtiYWxhbmNlSW5CYXNlQXNzZXR9XG4gICAgICAgICAgICB0b2tlbk5hbWU9e1xuICAgICAgICAgICAgICBjb252ZXJzaW9uUmF0ZSA/IGN1cnJlbnRDdXJyZW5jeT8udG9VcHBlckNhc2UoKSA6IG5hdGl2ZUN1cnJlbmN5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY2NvdW50QWRkcmVzcz17YWRkcmVzc31cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge3RoaXMucmVuZGVyQm9keSgpfVxuICAgICAgICB7dGhpcy5wcm9wcy5pc0xlZGdlcldhbGxldCA/IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpcm0tYXBwcm92ZS1jb250ZW50X19sZWRnZXItaW5zdHJ1Y3Rpb24td3JhcHBlclwiPlxuICAgICAgICAgICAgPExlZGdlckluc3RydWN0aW9uRmllbGQgc2hvd0RhdGFJbnN0cnVjdGlvbiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApIDogbnVsbH1cbiAgICAgICAge3Nob3dTaWduYXR1cmVSZXF1ZXN0V2FybmluZyAmJiAoXG4gICAgICAgICAgPFNpZ25hdHVyZVJlcXVlc3RPcmlnaW5hbFdhcm5pbmdcbiAgICAgICAgICAgIHNlbmRlckFkZHJlc3M9e2FkZHJlc3N9XG4gICAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgICAgb25TdWJtaXQ9e2FzeW5jIChldmVudCkgPT4gYXdhaXQgdGhpcy5vblN1Ym1pdChldmVudCl9XG4gICAgICAgICAgICBvbkNhbmNlbD17YXN5bmMgKGV2ZW50KSA9PiBhd2FpdCB0aGlzLm9uQ2FuY2VsKGV2ZW50KX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgICB7dGhpcy5yZW5kZXJGb290ZXIoKX1cbiAgICAgICAge21lc3NhZ2VzQ291bnQgPiAxID8gKFxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJsaW5rXCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInJlcXVlc3Qtc2lnbmF0dXJlX19jb250YWluZXJfX3JlamVjdFwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLmhhbmRsZUNhbmNlbEFsbCgpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtyZWplY3ROVGV4dH1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xufVxuIiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGNvbXBvc2UgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmltcG9ydCB7IE1FU1NBR0VfVFlQRSB9IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9jb25zdGFudHMvYXBwJztcbmltcG9ydCB7IGdvSG9tZSwgY2FuY2VsTXNncywgc2hvd01vZGFsIH0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvYWN0aW9ucyc7XG5pbXBvcnQge1xuICBhY2NvdW50c1dpdGhTZW5kRXRoZXJJbmZvU2VsZWN0b3IsXG4gIGNvbnZlcnNpb25SYXRlU2VsZWN0b3IsXG4gIGdldFN1YmplY3RNZXRhZGF0YSxcbiAgZG9lc0FkZHJlc3NSZXF1aXJlTGVkZ2VySGlkQ29ubmVjdGlvbixcbiAgdW5jb25maXJtZWRNZXNzYWdlc0hhc2hTZWxlY3RvcixcbiAgZ2V0VG90YWxVbmFwcHJvdmVkTWVzc2FnZXNDb3VudCxcbiAgZ2V0UHJlZmVyZW5jZXMsXG4gIGdldEN1cnJlbnRDdXJyZW5jeSxcbn0gZnJvbSAnLi4vLi4vLi4vc2VsZWN0b3JzJztcbmltcG9ydCB7IGdldEFjY291bnRCeUFkZHJlc3MsIHZhbHVlc0ZvciB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBjbGVhckNvbmZpcm1UcmFuc2FjdGlvbiB9IGZyb20gJy4uLy4uLy4uL2R1Y2tzL2NvbmZpcm0tdHJhbnNhY3Rpb24vY29uZmlybS10cmFuc2FjdGlvbi5kdWNrJztcbmltcG9ydCB7IGdldE1vc3RSZWNlbnRPdmVydmlld1BhZ2UgfSBmcm9tICcuLi8uLi8uLi9kdWNrcy9oaXN0b3J5L2hpc3RvcnknO1xuaW1wb3J0IHtcbiAgaXNBZGRyZXNzTGVkZ2VyLFxuICBnZXROYXRpdmVDdXJyZW5jeSxcbiAgZ2V0UHJvdmlkZXJDb25maWcsXG59IGZyb20gJy4uLy4uLy4uL2R1Y2tzL21ldGFtYXNrL21ldGFtYXNrJztcbmltcG9ydCBTaWduYXR1cmVSZXF1ZXN0T3JpZ2luYWwgZnJvbSAnLi9zaWduYXR1cmUtcmVxdWVzdC1vcmlnaW5hbC5jb21wb25lbnQnO1xuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBtc2dQYXJhbXM6IHsgZnJvbSB9LFxuICB9ID0gb3duUHJvcHMudHhEYXRhO1xuICBjb25zdCBwcm92aWRlckNvbmZpZyA9IGdldFByb3ZpZGVyQ29uZmlnKHN0YXRlKTtcblxuICBjb25zdCBoYXJkd2FyZVdhbGxldFJlcXVpcmVzQ29ubmVjdGlvbiA9XG4gICAgZG9lc0FkZHJlc3NSZXF1aXJlTGVkZ2VySGlkQ29ubmVjdGlvbihzdGF0ZSwgZnJvbSk7XG4gIGNvbnN0IGlzTGVkZ2VyV2FsbGV0ID0gaXNBZGRyZXNzTGVkZ2VyKHN0YXRlLCBmcm9tKTtcbiAgY29uc3QgbWVzc2FnZXNMaXN0ID0gdW5jb25maXJtZWRNZXNzYWdlc0hhc2hTZWxlY3RvcihzdGF0ZSk7XG4gIGNvbnN0IG1lc3NhZ2VzQ291bnQgPSBnZXRUb3RhbFVuYXBwcm92ZWRNZXNzYWdlc0NvdW50KHN0YXRlKTtcbiAgY29uc3QgeyB1c2VOYXRpdmVDdXJyZW5jeUFzUHJpbWFyeUN1cnJlbmN5IH0gPSBnZXRQcmVmZXJlbmNlcyhzdGF0ZSk7XG5cbiAgcmV0dXJuIHtcbiAgICByZXF1ZXN0ZXI6IG51bGwsXG4gICAgcmVxdWVzdGVyQWRkcmVzczogbnVsbCxcbiAgICBtb3N0UmVjZW50T3ZlcnZpZXdQYWdlOiBnZXRNb3N0UmVjZW50T3ZlcnZpZXdQYWdlKHN0YXRlKSxcbiAgICBoYXJkd2FyZVdhbGxldFJlcXVpcmVzQ29ubmVjdGlvbixcbiAgICBpc0xlZGdlcldhbGxldCxcbiAgICBuYXRpdmVDdXJyZW5jeTogZ2V0TmF0aXZlQ3VycmVuY3koc3RhdGUpLFxuICAgIGN1cnJlbnRDdXJyZW5jeTogZ2V0Q3VycmVudEN1cnJlbmN5KHN0YXRlKSxcbiAgICBjb252ZXJzaW9uUmF0ZTogdXNlTmF0aXZlQ3VycmVuY3lBc1ByaW1hcnlDdXJyZW5jeVxuICAgICAgPyBudWxsXG4gICAgICA6IGNvbnZlcnNpb25SYXRlU2VsZWN0b3Ioc3RhdGUpLFxuICAgIC8vIG5vdCBwYXNzZWQgdG8gY29tcG9uZW50XG4gICAgYWxsQWNjb3VudHM6IGFjY291bnRzV2l0aFNlbmRFdGhlckluZm9TZWxlY3RvcihzdGF0ZSksXG4gICAgc3ViamVjdE1ldGFkYXRhOiBnZXRTdWJqZWN0TWV0YWRhdGEoc3RhdGUpLFxuICAgIG1lc3NhZ2VzTGlzdCxcbiAgICBtZXNzYWdlc0NvdW50LFxuICAgIHByb3ZpZGVyQ29uZmlnLFxuICB9O1xufVxuXG5mdW5jdGlvbiBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIHtcbiAgICBnb0hvbWU6ICgpID0+IGRpc3BhdGNoKGdvSG9tZSgpKSxcbiAgICBjbGVhckNvbmZpcm1UcmFuc2FjdGlvbjogKCkgPT4gZGlzcGF0Y2goY2xlYXJDb25maXJtVHJhbnNhY3Rpb24oKSksXG4gICAgc2hvd1JlamVjdFRyYW5zYWN0aW9uc0NvbmZpcm1hdGlvbk1vZGFsOiAoe1xuICAgICAgb25TdWJtaXQsXG4gICAgICB1bmFwcHJvdmVkVHhDb3VudDogbWVzc2FnZXNDb3VudCxcbiAgICB9KSA9PiB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2goXG4gICAgICAgIHNob3dNb2RhbCh7XG4gICAgICAgICAgbmFtZTogJ1JFSkVDVF9UUkFOU0FDVElPTlMnLFxuICAgICAgICAgIG9uU3VibWl0LFxuICAgICAgICAgIHVuYXBwcm92ZWRUeENvdW50OiBtZXNzYWdlc0NvdW50LFxuICAgICAgICAgIGlzUmVxdWVzdFR5cGU6IHRydWUsXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGNhbmNlbEFsbDogKG1lc3NhZ2VzTGlzdCkgPT4gZGlzcGF0Y2goY2FuY2VsTXNncyhtZXNzYWdlc0xpc3QpKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICBjb25zdCB7XG4gICAgc2lnblBlcnNvbmFsTWVzc2FnZSxcbiAgICBzaWduVHlwZWRNZXNzYWdlLFxuICAgIGNhbmNlbFBlcnNvbmFsTWVzc2FnZSxcbiAgICBjYW5jZWxUeXBlZE1lc3NhZ2UsXG4gICAgc2lnbk1lc3NhZ2UsXG4gICAgY2FuY2VsTWVzc2FnZSxcbiAgICB0eERhdGEsXG4gIH0gPSBvd25Qcm9wcztcblxuICBjb25zdCB7IGFsbEFjY291bnRzLCBtZXNzYWdlc0xpc3QsIC4uLm90aGVyU3RhdGVQcm9wcyB9ID0gc3RhdGVQcm9wcztcblxuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICBtc2dQYXJhbXM6IHsgZnJvbSB9LFxuICB9ID0gdHhEYXRhO1xuXG4gIGNvbnN0IGZyb21BY2NvdW50ID0gZ2V0QWNjb3VudEJ5QWRkcmVzcyhhbGxBY2NvdW50cywgZnJvbSk7XG5cbiAgY29uc3QgeyBjYW5jZWxBbGw6IGRpc3BhdGNoQ2FuY2VsQWxsIH0gPSBkaXNwYXRjaFByb3BzO1xuXG4gIGxldCBjYW5jZWw7XG4gIGxldCBzaWduO1xuICBpZiAodHlwZSA9PT0gTUVTU0FHRV9UWVBFLlBFUlNPTkFMX1NJR04pIHtcbiAgICBjYW5jZWwgPSBjYW5jZWxQZXJzb25hbE1lc3NhZ2U7XG4gICAgc2lnbiA9IHNpZ25QZXJzb25hbE1lc3NhZ2U7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRV9UWVBFLkVUSF9TSUdOX1RZUEVEX0RBVEEpIHtcbiAgICBjYW5jZWwgPSBjYW5jZWxUeXBlZE1lc3NhZ2U7XG4gICAgc2lnbiA9IHNpZ25UeXBlZE1lc3NhZ2U7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gTUVTU0FHRV9UWVBFLkVUSF9TSUdOKSB7XG4gICAgY2FuY2VsID0gY2FuY2VsTWVzc2FnZTtcbiAgICBzaWduID0gc2lnbk1lc3NhZ2U7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLm93blByb3BzLFxuICAgIC4uLm90aGVyU3RhdGVQcm9wcyxcbiAgICAuLi5kaXNwYXRjaFByb3BzLFxuICAgIGZyb21BY2NvdW50LFxuICAgIHR4RGF0YSxcbiAgICBjYW5jZWwsXG4gICAgc2lnbixcbiAgICBjYW5jZWxBbGw6ICgpID0+IGRpc3BhdGNoQ2FuY2VsQWxsKHZhbHVlc0ZvcihtZXNzYWdlc0xpc3QpKSxcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZShcbiAgd2l0aFJvdXRlcixcbiAgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcyksXG4pKFNpZ25hdHVyZVJlcXVlc3RPcmlnaW5hbCk7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9zaWduYXR1cmUtcmVxdWVzdC1zaXdlJztcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL3NpZ25hdHVyZS1yZXF1ZXN0LXNpd2UtaGVhZGVyJztcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBBY2NvdW50TGlzdEl0ZW0gZnJvbSAnLi4vLi4vYWNjb3VudC1saXN0LWl0ZW0nO1xuaW1wb3J0IHsgSTE4bkNvbnRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9jb250ZXh0cy9pMThuJztcbmltcG9ydCBQZXJtaXNzaW9uc0Nvbm5lY3RIZWFkZXIgZnJvbSAnLi4vLi4vcGVybWlzc2lvbnMtY29ubmVjdC1oZWFkZXInO1xuaW1wb3J0IFNpZ25hdHVyZVJlcXVlc3RTSVdFSWNvbiBmcm9tICcuLi9zaWduYXR1cmUtcmVxdWVzdC1zaXdlLWljb24nO1xuaW1wb3J0IFNpZ25hdHVyZVJlcXVlc3RTSVdFVGFnIGZyb20gJy4uL3NpZ25hdHVyZS1yZXF1ZXN0LXNpd2UtdGFnJztcbmltcG9ydCBUb29sdGlwIGZyb20gJy4uLy4uLy4uL3VpL3Rvb2x0aXAnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTaWduYXR1cmVSZXF1ZXN0U0lXRUhlYWRlcih7XG4gIGZyb21BY2NvdW50LFxuICBkb21haW4sXG4gIGlzU0lXRURvbWFpblZhbGlkLFxuICBzdWJqZWN0TWV0YWRhdGEsXG59KSB7XG4gIGNvbnN0IHQgPSB1c2VDb250ZXh0KEkxOG5Db250ZXh0KTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwic2lnbmF0dXJlLXJlcXVlc3Qtc2l3ZS1oZWFkZXJcIj5cbiAgICAgIDxQZXJtaXNzaW9uc0Nvbm5lY3RIZWFkZXJcbiAgICAgICAgaWNvblVybD17c3ViamVjdE1ldGFkYXRhLmljb25Vcmx9XG4gICAgICAgIGljb25OYW1lPXtzdWJqZWN0TWV0YWRhdGEubmFtZX1cbiAgICAgICAgaGVhZGVyVGl0bGU9e3QoJ1NJV0VTaXRlUmVxdWVzdFRpdGxlJyl9XG4gICAgICAgIGhlYWRlclRleHQ9e3QoJ1NJV0VTaXRlUmVxdWVzdFN1YnRpdGxlJyl9XG4gICAgICAgIHNpdGVPcmlnaW49e2RvbWFpbn1cbiAgICAgICAgY2xhc3NOYW1lPXtpc1NJV0VEb21haW5WYWxpZCA/ICcnIDogJ2JhZC1kb21haW4nfVxuICAgICAgICBsZWZ0SWNvbj17XG4gICAgICAgICAgIWlzU0lXRURvbWFpblZhbGlkICYmIChcbiAgICAgICAgICAgIDxUb29sdGlwXG4gICAgICAgICAgICAgIHBvc2l0aW9uPVwiYm90dG9tXCJcbiAgICAgICAgICAgICAgaHRtbD17PHA+e3QoJ1NJV0VEb21haW5XYXJuaW5nQm9keScsIFtkb21haW5dKX08L3A+fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8U2lnbmF0dXJlUmVxdWVzdFNJV0VJY29uIC8+XG4gICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHJpZ2h0SWNvbj17XG4gICAgICAgICAgIWlzU0lXRURvbWFpblZhbGlkICYmIChcbiAgICAgICAgICAgIDxUb29sdGlwXG4gICAgICAgICAgICAgIHBvc2l0aW9uPVwiYm90dG9tXCJcbiAgICAgICAgICAgICAgaHRtbD17PHA+e3QoJ1NJV0VEb21haW5XYXJuaW5nQm9keScsIFtkb21haW5dKX08L3A+fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8U2lnbmF0dXJlUmVxdWVzdFNJV0VUYWcgdGV4dD17dCgnU0lXRURvbWFpbldhcm5pbmdMYWJlbCcpfSAvPlxuICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgLz5cbiAgICAgIHtmcm9tQWNjb3VudCAmJiAoXG4gICAgICAgIDxBY2NvdW50TGlzdEl0ZW1cbiAgICAgICAgICBhY2NvdW50PXtmcm9tQWNjb3VudH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC1zaXdlLWhlYWRlcl9fYWNjb3VudC1saXN0LWl0ZW1cIlxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuU2lnbmF0dXJlUmVxdWVzdFNJV0VIZWFkZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGFjY291bnQgdGhhdCBpcyByZXF1ZXN0aW5nIHBlcm1pc3Npb25zXG4gICAqL1xuICBmcm9tQWNjb3VudDogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBkb21haW4gdGhhdCB0aGUgcmVxdWVzdCBpcyBmb3JcbiAgICovXG4gIGRvbWFpbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGRvbWFpbiBpcyB2YWxpZFxuICAgKi9cbiAgaXNTSVdFRG9tYWluVmFsaWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIG1ldGFkYXRhIGZvciB0aGUgc3ViamVjdC4gVGhpcyBpcyB1c2VkIHRvIGRpc3BsYXkgdGhlIGljb24gYW5kIG5hbWVcbiAgICogYW5kIGlzIHNlbGVjdGVkIGZyb20gdGhlIGRvbWFpbiBpbiB0aGUgU0lXRSByZXF1ZXN0LlxuICAgKi9cbiAgc3ViamVjdE1ldGFkYXRhOiBQcm9wVHlwZXMub2JqZWN0LFxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBESVNQTEFZLFxuICBBbGlnbkl0ZW1zLFxuICBDb2xvcixcbiAgSnVzdGlmeUNvbnRlbnQsXG59IGZyb20gJy4uLy4uLy4uLy4uL2hlbHBlcnMvY29uc3RhbnRzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IEJveCBmcm9tICcuLi8uLi8uLi91aS9ib3gnO1xuaW1wb3J0IHsgSWNvbiwgSWNvbk5hbWUgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5cbmNvbnN0IFNpZ25hdHVyZVJlcXVlc3RTSVdFSWNvbiA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Qm94XG4gICAgICBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC1zaXdlLWljb25cIlxuICAgICAgZGlzcGxheT17RElTUExBWS5JTkxJTkVfRkxFWH1cbiAgICAgIGFsaWduSXRlbXM9e0FsaWduSXRlbXMuY2VudGVyfVxuICAgICAgYmFja2dyb3VuZENvbG9yPXtDb2xvci5lcnJvckRlZmF1bHR9XG4gICAgICBqdXN0aWZ5Q29udGVudD17SnVzdGlmeUNvbnRlbnQuY2VudGVyfVxuICAgID5cbiAgICAgIDxJY29uIG5hbWU9e0ljb25OYW1lLkRhbmdlcn0gY29sb3I9e0NvbG9yLmVycm9ySW52ZXJzZX0gLz5cbiAgICA8L0JveD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNpZ25hdHVyZVJlcXVlc3RTSVdFSWNvbjtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL3NpZ25hdHVyZS1yZXF1ZXN0LXNpd2UtbWVzc2FnZSc7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBCb3ggZnJvbSAnLi4vLi4vLi4vdWkvYm94JztcbmltcG9ydCB7IFRleHQgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnQtbGlicmFyeSc7XG5cbmltcG9ydCB7XG4gIEZMRVhfRElSRUNUSU9OLFxuICBPVkVSRkxPV19XUkFQLFxuICBUZXh0VmFyaWFudCxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5cbmNvbnN0IFNpZ25hdHVyZVJlcXVlc3RTSVdFTWVzc2FnZSA9ICh7IGRhdGEgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxCb3ggY2xhc3NOYW1lPVwic2lnbmF0dXJlLXJlcXVlc3Qtc2l3ZS1tZXNzYWdlXCI+XG4gICAgICA8Qm94IGZsZXhEaXJlY3Rpb249e0ZMRVhfRElSRUNUSU9OLkNPTFVNTn0+XG4gICAgICAgIHtkYXRhLm1hcCgoeyBsYWJlbCwgdmFsdWUgfSwgaSkgPT4gKFxuICAgICAgICAgIDxCb3gga2V5PXtpLnRvU3RyaW5nKCl9IG1hcmdpblRvcD17Mn0gbWFyZ2luQm90dG9tPXsyfT5cbiAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgIGFzPVwiaDRcIlxuICAgICAgICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5TGdNZWRpdW19XG4gICAgICAgICAgICAgIG1hcmdpblRvcD17Mn1cbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tPXsyfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC1zaXdlLW1lc3NhZ2VfX3N1Yi10ZXh0XCJcbiAgICAgICAgICAgICAgb3ZlcmZsb3dXcmFwPXtPVkVSRkxPV19XUkFQLkJSRUFLX1dPUkR9XG4gICAgICAgICAgICAgIG1hcmdpblRvcD17Mn1cbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tPXsyfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dmFsdWV9XG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgICkpfVxuICAgICAgPC9Cb3g+XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuXG5TaWduYXR1cmVSZXF1ZXN0U0lXRU1lc3NhZ2UucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGRhdGEgYXJyYXkgdGhhdCBjb250YWlucyBvYmplY3RzIG9mIGRhdGEgYWJvdXQgdGhlIG1lc3NhZ2VcbiAgICovXG4gIGRhdGE6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBsYWJlbCBvciB0aXRsZSBvZiB0aGUgdmFsdWUgZGF0YVxuICAgICAgICovXG4gICAgICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIC8qKlxuICAgICAgICogVGhlIHZhbHVlIG9mIHRoZSBkYXRhXG4gICAgICAgKi9cbiAgICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gICAgfSksXG4gICksXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5tZW1vKFNpZ25hdHVyZVJlcXVlc3RTSVdFTWVzc2FnZSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7XG4gIFRleHRWYXJpYW50LFxuICBTaXplLFxuICBESVNQTEFZLFxuICBBbGlnbkl0ZW1zLFxuICBCYWNrZ3JvdW5kQ29sb3IsXG4gIFRleHRDb2xvcixcbn0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy9jb25zdGFudHMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgQm94IGZyb20gJy4uLy4uLy4uL3VpL2JveCc7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50LWxpYnJhcnknO1xuXG5jb25zdCBTaWduYXR1cmVSZXF1ZXN0U0lXRVRhZyA9ICh7IHRleHQgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxCb3hcbiAgICAgIGNsYXNzTmFtZT1cInNpZ25hdHVyZS1yZXF1ZXN0LXNpd2UtdGFnXCJcbiAgICAgIG1hcmdpblJpZ2h0PXsxfVxuICAgICAgZGlzcGxheT17RElTUExBWS5JTkxJTkVfRkxFWH1cbiAgICAgIGFsaWduSXRlbXM9e0FsaWduSXRlbXMuY2VudGVyfVxuICAgICAgYmFja2dyb3VuZENvbG9yPXtCYWNrZ3JvdW5kQ29sb3IuZXJyb3JEZWZhdWx0fVxuICAgICAgYm9yZGVyUmFkaXVzPXtTaXplLlhMfVxuICAgICAgcGFkZGluZ0xlZnQ9ezR9XG4gICAgICBwYWRkaW5nUmlnaHQ9ezR9XG4gICAgPlxuICAgICAgPFRleHRcbiAgICAgICAgbWFyZ2luPXswfVxuICAgICAgICB2YXJpYW50PXtUZXh0VmFyaWFudC5ib2R5U21Cb2xkfVxuICAgICAgICBhcz1cImg2XCJcbiAgICAgICAgY29sb3I9e1RleHRDb2xvci5lcnJvckludmVyc2V9XG4gICAgICA+XG4gICAgICAgIHt0ZXh0fVxuICAgICAgPC9UZXh0PlxuICAgIDwvQm94PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2lnbmF0dXJlUmVxdWVzdFNJV0VUYWc7XG5cblNpZ25hdHVyZVJlcXVlc3RTSVdFVGFnLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIHRhZ1xuICAgKi9cbiAgdGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5pbXBvcnQgeyBpc1ZhbGlkU0lXRU9yaWdpbiB9IGZyb20gJ0BtZXRhbWFzay9jb250cm9sbGVyLXV0aWxzJztcbmltcG9ydCB7IEJhbm5lckFsZXJ0LCBUZXh0IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50LWxpYnJhcnknO1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi4vLi4vdWkvcG9wb3Zlcic7XG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi4vLi4vdWkvY2hlY2stYm94JztcbmltcG9ydCB7IEkxOG5Db250ZXh0IH0gZnJvbSAnLi4vLi4vLi4vY29udGV4dHMvaTE4bic7XG5pbXBvcnQgeyBQYWdlQ29udGFpbmVyRm9vdGVyIH0gZnJvbSAnLi4vLi4vdWkvcGFnZS1jb250YWluZXInO1xuaW1wb3J0IHsgaXNBZGRyZXNzTGVkZ2VyIH0gZnJvbSAnLi4vLi4vLi4vZHVja3MvbWV0YW1hc2svbWV0YW1hc2snO1xuaW1wb3J0IHtcbiAgYWNjb3VudHNXaXRoU2VuZEV0aGVySW5mb1NlbGVjdG9yLFxuICBnZXRTdWJqZWN0TWV0YWRhdGEsXG59IGZyb20gJy4uLy4uLy4uL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBnZXRBY2NvdW50QnlBZGRyZXNzIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy91dGlscy91dGlsJztcbmltcG9ydCB7IGZvcm1hdE1lc3NhZ2VQYXJhbXMgfSBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvbW9kdWxlcy9zaXdlJztcbmltcG9ydCB7XG4gIFNFVkVSSVRJRVMsXG4gIFRleHRWYXJpYW50LFxufSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcblxuaW1wb3J0IFNlY3VyaXR5UHJvdmlkZXJCYW5uZXJNZXNzYWdlIGZyb20gJy4uL3NlY3VyaXR5LXByb3ZpZGVyLWJhbm5lci1tZXNzYWdlL3NlY3VyaXR5LXByb3ZpZGVyLWJhbm5lci1tZXNzYWdlJztcbmltcG9ydCB7IFNFQ1VSSVRZX1BST1ZJREVSX01FU1NBR0VfU0VWRVJJVElFUyB9IGZyb20gJy4uL3NlY3VyaXR5LXByb3ZpZGVyLWJhbm5lci1tZXNzYWdlL3NlY3VyaXR5LXByb3ZpZGVyLWJhbm5lci1tZXNzYWdlLmNvbnN0YW50cyc7XG5pbXBvcnQgTGVkZ2VySW5zdHJ1Y3Rpb25GaWVsZCBmcm9tICcuLi9sZWRnZXItaW5zdHJ1Y3Rpb24tZmllbGQnO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL3NpZ25hdHVyZS1yZXF1ZXN0LXNpd2UtaGVhZGVyJztcbmltcG9ydCBNZXNzYWdlIGZyb20gJy4vc2lnbmF0dXJlLXJlcXVlc3Qtc2l3ZS1tZXNzYWdlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2lnbmF0dXJlUmVxdWVzdFNJV0Uoe1xuICB0eERhdGEsXG4gIGNhbmNlbFBlcnNvbmFsTWVzc2FnZSxcbiAgc2lnblBlcnNvbmFsTWVzc2FnZSxcbn0pIHtcbiAgY29uc3QgYWxsQWNjb3VudHMgPSB1c2VTZWxlY3RvcihhY2NvdW50c1dpdGhTZW5kRXRoZXJJbmZvU2VsZWN0b3IpO1xuICBjb25zdCBzdWJqZWN0TWV0YWRhdGEgPSB1c2VTZWxlY3RvcihnZXRTdWJqZWN0TWV0YWRhdGEpO1xuXG4gIGNvbnN0IHtcbiAgICBtc2dQYXJhbXM6IHtcbiAgICAgIGZyb20sXG4gICAgICBvcmlnaW4sXG4gICAgICBzaXdlOiB7IHBhcnNlZE1lc3NhZ2UgfSxcbiAgICB9LFxuICB9ID0gdHhEYXRhO1xuXG4gIGNvbnN0IGlzTGVkZ2VyV2FsbGV0ID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBpc0FkZHJlc3NMZWRnZXIoc3RhdGUsIGZyb20pKTtcblxuICBjb25zdCBmcm9tQWNjb3VudCA9IGdldEFjY291bnRCeUFkZHJlc3MoYWxsQWNjb3VudHMsIGZyb20pO1xuICBjb25zdCB0YXJnZXRTdWJqZWN0TWV0YWRhdGEgPSBzdWJqZWN0TWV0YWRhdGFbb3JpZ2luXTtcblxuICBjb25zdCB0ID0gdXNlQ29udGV4dChJMThuQ29udGV4dCk7XG5cbiAgY29uc3QgaXNNYXRjaGluZ0FkZHJlc3MgPVxuICAgIGZyb20udG9Mb3dlckNhc2UoKSA9PT0gcGFyc2VkTWVzc2FnZS5hZGRyZXNzLnRvTG93ZXJDYXNlKCk7XG5cbiAgY29uc3QgaXNTSVdFRG9tYWluVmFsaWQgPSBpc1ZhbGlkU0lXRU9yaWdpbih0eERhdGEubXNnUGFyYW1zKTtcblxuICBjb25zdCBbaXNTaG93aW5nRG9tYWluV2FybmluZywgc2V0SXNTaG93aW5nRG9tYWluV2FybmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtoYXNBZ3JlZWRUb0RvbWFpbldhcm5pbmcsIHNldEhhc0FncmVlZFRvRG9tYWluV2FybmluZ10gPVxuICAgIHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBzaG93U2VjdXJpdHlQcm92aWRlckJhbm5lciA9XG4gICAgKHR4RGF0YT8uc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlPy5mbGFnQXNEYW5nZXJvdXMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgdHhEYXRhPy5zZWN1cml0eVByb3ZpZGVyUmVzcG9uc2U/LmZsYWdBc0Rhbmdlcm91cyAhPT1cbiAgICAgICAgU0VDVVJJVFlfUFJPVklERVJfTUVTU0FHRV9TRVZFUklUSUVTLk5PVF9NQUxJQ0lPVVMpIHx8XG4gICAgKHR4RGF0YT8uc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlICYmXG4gICAgICBPYmplY3Qua2V5cyh0eERhdGEuc2VjdXJpdHlQcm92aWRlclJlc3BvbnNlKS5sZW5ndGggPT09IDApO1xuXG4gIGNvbnN0IG9uU2lnbiA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgc2lnblBlcnNvbmFsTWVzc2FnZShldmVudCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtzaWduUGVyc29uYWxNZXNzYWdlXSxcbiAgKTtcblxuICBjb25zdCBvbkNhbmNlbCA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgY2FuY2VsUGVyc29uYWxNZXNzYWdlKGV2ZW50KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW2NhbmNlbFBlcnNvbmFsTWVzc2FnZV0sXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInNpZ25hdHVyZS1yZXF1ZXN0LXNpd2VcIj5cbiAgICAgIDxIZWFkZXJcbiAgICAgICAgZnJvbUFjY291bnQ9e2Zyb21BY2NvdW50fVxuICAgICAgICBkb21haW49e29yaWdpbn1cbiAgICAgICAgaXNTSVdFRG9tYWluVmFsaWQ9e2lzU0lXRURvbWFpblZhbGlkfVxuICAgICAgICBzdWJqZWN0TWV0YWRhdGE9e3RhcmdldFN1YmplY3RNZXRhZGF0YX1cbiAgICAgIC8+XG5cbiAgICAgIHtzaG93U2VjdXJpdHlQcm92aWRlckJhbm5lciAmJiAoXG4gICAgICAgIDxTZWN1cml0eVByb3ZpZGVyQmFubmVyTWVzc2FnZVxuICAgICAgICAgIHNlY3VyaXR5UHJvdmlkZXJSZXNwb25zZT17dHhEYXRhLnNlY3VyaXR5UHJvdmlkZXJSZXNwb25zZX1cbiAgICAgICAgLz5cbiAgICAgICl9XG5cbiAgICAgIDxNZXNzYWdlIGRhdGE9e2Zvcm1hdE1lc3NhZ2VQYXJhbXMocGFyc2VkTWVzc2FnZSwgdCl9IC8+XG4gICAgICB7IWlzTWF0Y2hpbmdBZGRyZXNzICYmIChcbiAgICAgICAgPEJhbm5lckFsZXJ0XG4gICAgICAgICAgc2V2ZXJpdHk9e1NFVkVSSVRJRVMuV0FSTklOR31cbiAgICAgICAgICBtYXJnaW5MZWZ0PXs0fVxuICAgICAgICAgIG1hcmdpblJpZ2h0PXs0fVxuICAgICAgICAgIG1hcmdpbkJvdHRvbT17NH1cbiAgICAgICAgPlxuICAgICAgICAgIHt0KCdTSVdFQWRkcmVzc0ludmFsaWQnLCBbXG4gICAgICAgICAgICBwYXJzZWRNZXNzYWdlLmFkZHJlc3MsXG4gICAgICAgICAgICBmcm9tQWNjb3VudC5hZGRyZXNzLFxuICAgICAgICAgIF0pfVxuICAgICAgICA8L0Jhbm5lckFsZXJ0PlxuICAgICAgKX1cblxuICAgICAge2lzTGVkZ2VyV2FsbGV0ICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtLWFwcHJvdmUtY29udGVudF9fbGVkZ2VyLWluc3RydWN0aW9uLXdyYXBwZXJcIj5cbiAgICAgICAgICA8TGVkZ2VySW5zdHJ1Y3Rpb25GaWVsZCBzaG93RGF0YUluc3RydWN0aW9uIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgeyFpc1NJV0VEb21haW5WYWxpZCAmJiAoXG4gICAgICAgIDxCYW5uZXJBbGVydFxuICAgICAgICAgIHNldmVyaXR5PXtTRVZFUklUSUVTLkRBTkdFUn1cbiAgICAgICAgICBtYXJnaW5MZWZ0PXs0fVxuICAgICAgICAgIG1hcmdpblJpZ2h0PXs0fVxuICAgICAgICAgIG1hcmdpbkJvdHRvbT17NH1cbiAgICAgICAgPlxuICAgICAgICAgIDxUZXh0IHZhcmlhbnQ9e1RleHRWYXJpYW50LmJvZHlNZEJvbGR9PlxuICAgICAgICAgICAge3QoJ1NJV0VEb21haW5JbnZhbGlkVGl0bGUnKX1cbiAgICAgICAgICA8L1RleHQ+eycgJ31cbiAgICAgICAgICA8VGV4dD57dCgnU0lXRURvbWFpbkludmFsaWRUZXh0Jyl9PC9UZXh0PlxuICAgICAgICA8L0Jhbm5lckFsZXJ0PlxuICAgICAgKX1cbiAgICAgIDxQYWdlQ29udGFpbmVyRm9vdGVyXG4gICAgICAgIGZvb3RlckNsYXNzTmFtZT1cInNpZ25hdHVyZS1yZXF1ZXN0LXNpd2VfX3BhZ2UtY29udGFpbmVyLWZvb3RlclwiXG4gICAgICAgIG9uQ2FuY2VsPXtvbkNhbmNlbH1cbiAgICAgICAgb25TdWJtaXQ9e1xuICAgICAgICAgIGlzU0lXRURvbWFpblZhbGlkID8gb25TaWduIDogKCkgPT4gc2V0SXNTaG93aW5nRG9tYWluV2FybmluZyh0cnVlKVxuICAgICAgICB9XG4gICAgICAgIGNhbmNlbFRleHQ9e3QoJ2NhbmNlbCcpfVxuICAgICAgICBzdWJtaXRUZXh0PXt0KCdzaWduaW4nKX1cbiAgICAgICAgc3VibWl0QnV0dG9uVHlwZT17aXNTSVdFRG9tYWluVmFsaWQgPyAncHJpbWFyeScgOiAnZGFuZ2VyLXByaW1hcnknfVxuICAgICAgLz5cbiAgICAgIHtpc1Nob3dpbmdEb21haW5XYXJuaW5nICYmIChcbiAgICAgICAgPFBvcG92ZXJcbiAgICAgICAgICBvbkNsb3NlPXsoKSA9PiBzZXRJc1Nob3dpbmdEb21haW5XYXJuaW5nKGZhbHNlKX1cbiAgICAgICAgICB0aXRsZT17dCgnU0lXRVdhcm5pbmdUaXRsZScpfVxuICAgICAgICAgIHN1YnRpdGxlPXt0KCdTSVdFV2FybmluZ1N1YnRpdGxlJyl9XG4gICAgICAgICAgY2xhc3NOYW1lPVwic2lnbmF0dXJlLXJlcXVlc3Qtc2l3ZV9fd2FybmluZy1wb3BvdmVyXCJcbiAgICAgICAgICBmb290ZXJDbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC1zaXdlX193YXJuaW5nLXBvcG92ZXJfX2Zvb3RlclwiXG4gICAgICAgICAgZm9vdGVyPXtcbiAgICAgICAgICAgIDxQYWdlQ29udGFpbmVyRm9vdGVyXG4gICAgICAgICAgICAgIGZvb3RlckNsYXNzTmFtZT1cInNpZ25hdHVyZS1yZXF1ZXN0LXNpd2VfX3dhcm5pbmctcG9wb3Zlcl9fZm9vdGVyX193YXJuaW5nLWZvb3RlclwiXG4gICAgICAgICAgICAgIG9uQ2FuY2VsPXsoKSA9PiBzZXRJc1Nob3dpbmdEb21haW5XYXJuaW5nKGZhbHNlKX1cbiAgICAgICAgICAgICAgY2FuY2VsVGV4dD17dCgnY2FuY2VsJyl9XG4gICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblR5cGU9XCJkZWZhdWx0XCJcbiAgICAgICAgICAgICAgb25TdWJtaXQ9e29uU2lnbn1cbiAgICAgICAgICAgICAgc3VibWl0VGV4dD17dCgnY29uZmlybScpfVxuICAgICAgICAgICAgICBzdWJtaXRCdXR0b25UeXBlPVwiZGFuZ2VyLXByaW1hcnlcIlxuICAgICAgICAgICAgICBkaXNhYmxlZD17IWhhc0FncmVlZFRvRG9tYWluV2FybmluZ31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgfVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC1zaXdlX193YXJuaW5nLXBvcG92ZXJfX2NoZWNrYm94LXdyYXBwZXJcIj5cbiAgICAgICAgICAgIDxDaGVja2JveFxuICAgICAgICAgICAgICBpZD1cInNpZ25hdHVyZS1yZXF1ZXN0LXNpd2VfZG9tYWluLWNoZWNrYm94XCJcbiAgICAgICAgICAgICAgY2hlY2tlZD17aGFzQWdyZWVkVG9Eb21haW5XYXJuaW5nfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC1zaXdlX193YXJuaW5nLXBvcG92ZXJfX2NoZWNrYm94LXdyYXBwZXJfX2NoZWNrYm94XCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0SGFzQWdyZWVkVG9Eb21haW5XYXJuaW5nKChjaGVja2VkKSA9PiAhY2hlY2tlZCl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNpZ25hdHVyZS1yZXF1ZXN0LXNpd2VfX3dhcm5pbmctcG9wb3Zlcl9fY2hlY2tib3gtd3JhcHBlcl9fbGFiZWxcIlxuICAgICAgICAgICAgICBodG1sRm9yPVwic2lnbmF0dXJlLXJlcXVlc3Qtc2l3ZV9kb21haW4tY2hlY2tib3hcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dCgnU0lXRURvbWFpbldhcm5pbmdCb2R5JywgW3BhcnNlZE1lc3NhZ2UuZG9tYWluXSl9XG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1BvcG92ZXI+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufVxuXG5TaWduYXR1cmVSZXF1ZXN0U0lXRS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgZGlzcGxheSBjb250ZW50IG9mIHRyYW5zYWN0aW9uIGRhdGFcbiAgICovXG4gIHR4RGF0YTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogSGFuZGxlciBmb3IgY2FuY2VsIGJ1dHRvblxuICAgKi9cbiAgY2FuY2VsUGVyc29uYWxNZXNzYWdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogSGFuZGxlciBmb3Igc2lnbiBidXR0b25cbiAgICovXG4gIHNpZ25QZXJzb25hbE1lc3NhZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vc2lnbmF0dXJlLXJlcXVlc3QuY29udGFpbmVyJztcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL3NpZ25hdHVyZS1yZXF1ZXN0LWRhdGEnO1xuIiwiaW1wb3J0IFJlYWN0LCB7IG1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGlzRXF1YWwgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7XG4gIGdldE1lbW9pemVkTWV0YU1hc2tJZGVudGl0aWVzLFxuICBnZXRBY2NvdW50TmFtZSxcbn0gZnJvbSAnLi4vLi4vLi4vLi4vc2VsZWN0b3JzJztcbmltcG9ydCBBZGRyZXNzIGZyb20gJy4uLy4uL3RyYW5zYWN0aW9uLWRlY29kaW5nL2NvbXBvbmVudHMvZGVjb2RpbmcvYWRkcmVzcyc7XG5pbXBvcnQge1xuICBpc1ZhbGlkSGV4QWRkcmVzcyxcbiAgdG9DaGVja3N1bUhleEFkZHJlc3MsXG59IGZyb20gJy4uLy4uLy4uLy4uLy4uL3NoYXJlZC9tb2R1bGVzL2hleHN0cmluZy11dGlscyc7XG5pbXBvcnQgQm94IGZyb20gJy4uLy4uLy4uL3VpL2JveCc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi8uLi8uLi91aS90eXBvZ3JhcGh5JztcbmltcG9ydCB7XG4gIERJU1BMQVksXG4gIEZPTlRfV0VJR0hULFxuICBUeXBvZ3JhcGh5VmFyaWFudCxcbiAgVGV4dENvbG9yLFxufSBmcm9tICcuLi8uLi8uLi8uLi9oZWxwZXJzL2NvbnN0YW50cy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IHNhbml0aXplU3RyaW5nIH0gZnJvbSAnLi4vLi4vLi4vLi4vaGVscGVycy91dGlscy91dGlsJztcblxuZnVuY3Rpb24gU2lnbmF0dXJlUmVxdWVzdERhdGEoeyBkYXRhIH0pIHtcbiAgY29uc3QgaWRlbnRpdGllcyA9IHVzZVNlbGVjdG9yKGdldE1lbW9pemVkTWV0YU1hc2tJZGVudGl0aWVzKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3ggY2xhc3NOYW1lPVwic2lnbmF0dXJlLXJlcXVlc3QtZGF0YV9fbm9kZVwiPlxuICAgICAge09iamVjdC5lbnRyaWVzKGRhdGEpLm1hcCgoW2xhYmVsLCB7IHZhbHVlLCB0eXBlIH1dLCBpKSA9PiAoXG4gICAgICAgIDxCb3hcbiAgICAgICAgICBjbGFzc05hbWU9XCJzaWduYXR1cmUtcmVxdWVzdC1kYXRhX19ub2RlXCJcbiAgICAgICAgICBrZXk9e2Ake2xhYmVsfS0ke2l9YH1cbiAgICAgICAgICBwYWRkaW5nTGVmdD17Mn1cbiAgICAgICAgICBkaXNwbGF5PXtcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwgPyBESVNQTEFZLkZMRVggOiBudWxsXG4gICAgICAgICAgfVxuICAgICAgICA+XG4gICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgIGFzPVwic3BhblwiXG4gICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLnRleHREZWZhdWx0fVxuICAgICAgICAgICAgbWFyZ2luTGVmdD17NH1cbiAgICAgICAgICAgIGZvbnRXZWlnaHQ9e1xuICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gRk9OVF9XRUlHSFQuQk9MRCA6IEZPTlRfV0VJR0hULk5PUk1BTFxuICAgICAgICAgICAgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtzYW5pdGl6ZVN0cmluZyhsYWJlbC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGxhYmVsLnNsaWNlKDEpKX06eycgJ31cbiAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAge3R5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwgPyAoXG4gICAgICAgICAgICA8U2lnbmF0dXJlUmVxdWVzdERhdGEgZGF0YT17dmFsdWV9IC8+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICAgIGFzPVwic3BhblwiXG4gICAgICAgICAgICAgIGNvbG9yPXtUZXh0Q29sb3IudGV4dERlZmF1bHR9XG4gICAgICAgICAgICAgIG1hcmdpbkxlZnQ9ezR9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNpZ25hdHVyZS1yZXF1ZXN0LWRhdGFfX25vZGVfX3ZhbHVlXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3R5cGUgPT09ICdhZGRyZXNzJyAmJlxuICAgICAgICAgICAgICBpc1ZhbGlkSGV4QWRkcmVzcyh2YWx1ZSwge1xuICAgICAgICAgICAgICAgIG1peGVkQ2FzZVVzZUNoZWNrc3VtOiB0cnVlLFxuICAgICAgICAgICAgICB9KSA/IChcbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeVxuICAgICAgICAgICAgICAgICAgdmFyaWFudD17VHlwb2dyYXBoeVZhcmlhbnQuSDd9XG4gICAgICAgICAgICAgICAgICBjb2xvcj17VGV4dENvbG9yLmluZm9EZWZhdWx0fVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2lnbmF0dXJlLXJlcXVlc3QtZGF0YV9fbm9kZV9fdmFsdWVfX2FkZHJlc3NcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxBZGRyZXNzXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3NPbmx5XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrc3VtbWVkUmVjaXBpZW50QWRkcmVzcz17dG9DaGVja3N1bUhleEFkZHJlc3ModmFsdWUpfVxuICAgICAgICAgICAgICAgICAgICByZWNpcGllbnROYW1lPXtnZXRBY2NvdW50TmFtZShpZGVudGl0aWVzLCB2YWx1ZSl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICBzYW5pdGl6ZVN0cmluZyhgJHt2YWx1ZX1gKVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvQm94PlxuICAgICAgKSl9XG4gICAgPC9Cb3g+XG4gICk7XG59XG5cblNpZ25hdHVyZVJlcXVlc3REYXRhLnByb3BUeXBlcyA9IHtcbiAgZGF0YTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmFycmF5XSkuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW8oU2lnbmF0dXJlUmVxdWVzdERhdGEsIChwcmV2UHJvcHMsIG5leHRQcm9wcykgPT4ge1xuICByZXR1cm4gaXNFcXVhbChwcmV2UHJvcHMuZGF0YSwgbmV4dFByb3BzLmRhdGEpO1xufSk7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9zaWduYXR1cmUtcmVxdWVzdC1mb290ZXIuY29tcG9uZW50JztcbiIsImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgUGFnZUNvbnRhaW5lckZvb3RlciB9IGZyb20gJy4uLy4uLy4uL3VpL3BhZ2UtY29udGFpbmVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2lnbmF0dXJlUmVxdWVzdEZvb3RlciBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNhbmNlbEFjdGlvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzaWduQWN0aW9uOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICBzdGF0aWMgY29udGV4dFR5cGVzID0ge1xuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNhbmNlbEFjdGlvbiwgc2lnbkFjdGlvbiwgZGlzYWJsZWQgPSBmYWxzZSB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPFBhZ2VDb250YWluZXJGb290ZXJcbiAgICAgICAgY2FuY2VsVGV4dD17dGhpcy5jb250ZXh0LnQoJ3JlamVjdCcpfVxuICAgICAgICBzdWJtaXRUZXh0PXt0aGlzLmNvbnRleHQudCgnc2lnbicpfVxuICAgICAgICBvbkNhbmNlbD17Y2FuY2VsQWN0aW9ufVxuICAgICAgICBvblN1Ym1pdD17c2lnbkFjdGlvbn1cbiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9zaWduYXR1cmUtcmVxdWVzdC1tZXNzYWdlJztcbiJdLCJwcmVFeGlzdGluZ0NvbW1lbnQiOiIvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMk52Ym01bFkzUmxaQzFoWTJOdmRXNTBjeTFzYVhOMEwyTnZibTVsWTNSbFpDMWhZMk52ZFc1MGN5MXNhWE4wTFdsMFpXMHZZMjl1Ym1WamRHVmtMV0ZqWTI5MWJuUnpMV3hwYzNRdGFYUmxiUzVqYjIxd2IyNWxiblF1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOWpiMjV1WldOMFpXUXRZV05qYjNWdWRITXRiR2x6ZEM5amIyNXVaV04wWldRdFlXTmpiM1Z1ZEhNdGJHbHpkQzFwZEdWdEwybHVaR1Y0TG1weklpd2lkV2t2WTI5dGNHOXVaVzUwY3k5aGNIQXZZMjl1Ym1WamRHVmtMV0ZqWTI5MWJuUnpMV3hwYzNRdlkyOXVibVZqZEdWa0xXRmpZMjkxYm5SekxXeHBjM1F0YjNCMGFXOXVjeTlqYjI1dVpXTjBaV1F0WVdOamIzVnVkSE10YkdsemRDMXZjSFJwYjI1ekxtTnZiWEJ2Ym1WdWRDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDJOdmJtNWxZM1JsWkMxaFkyTnZkVzUwY3kxc2FYTjBMMk52Ym01bFkzUmxaQzFoWTJOdmRXNTBjeTFzYVhOMExXOXdkR2x2Ym5NdmFXNWtaWGd1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOWpiMjV1WldOMFpXUXRZV05qYjNWdWRITXRiR2x6ZEM5amIyNXVaV04wWldRdFlXTmpiM1Z1ZEhNdGJHbHpkQzVqYjIxd2IyNWxiblF1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOWpiMjV1WldOMFpXUXRZV05qYjNWdWRITXRiR2x6ZEM5cGJtUmxlQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyTnZibTVsWTNSbFpDMWhZMk52ZFc1MGN5MXdaWEp0YVhOemFXOXVjeTlqYjI1dVpXTjBaV1F0WVdOamIzVnVkSE10Y0dWeWJXbHpjMmx2Ym5NdWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzlqYjI1dVpXTjBaV1F0WVdOamIzVnVkSE10Y0dWeWJXbHpjMmx2Ym5NdmFXNWtaWGd1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOWpiMjV1WldOMFpXUXRjMmwwWlhNdGJHbHpkQzlqYjI1dVpXTjBaV1F0YzJsMFpYTXRiR2x6ZEM1amIyMXdiMjVsYm5RdWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzlqYjI1dVpXTjBaV1F0YzJsMFpYTXRiR2x6ZEM5cGJtUmxlQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyTnZibTVsWTNSbFpDMXpkR0YwZFhNdGFXNWthV05oZEc5eUwyTnZibTVsWTNSbFpDMXpkR0YwZFhNdGFXNWthV05oZEc5eUxtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2WTI5dWJtVmpkR1ZrTFhOMFlYUjFjeTFwYm1ScFkyRjBiM0l2YVc1a1pYZ3Vhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5amIyNTBZV04wTFd4cGMzUXZZMjl1ZEdGamRDMXNhWE4wTG1OdmJYQnZibVZ1ZEM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMk52Ym5SaFkzUXRiR2x6ZEM5cGJtUmxlQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyTnZiblJoWTNRdGJHbHpkQzl5WldOcGNHbGxiblF0WjNKdmRYQXZjbVZqYVhCcFpXNTBMV2R5YjNWd0xtTnZiWEJ2Ym1WdWRDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDJOeVpXRjBaUzF1WlhjdGRtRjFiSFF2WTNKbFlYUmxMVzVsZHkxMllYVnNkQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyTnlaV0YwWlMxdVpYY3RkbUYxYkhRdmFXNWtaWGd1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOWpkWEp5Wlc1amVTMXBibkIxZEM5amRYSnlaVzVqZVMxcGJuQjFkQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyTjFjbkpsYm1ONUxXbHVjSFYwTDJsdVpHVjRMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdlkzVnpkRzl0TFhOd1pXNWthVzVuTFdOaGNDOWpkWE4wYjIwdGMzQmxibVJwYm1jdFkyRndMWFJ2YjJ4MGFYQXVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5amRYTjBiMjB0YzNCbGJtUnBibWN0WTJGd0wyTjFjM1J2YlMxemNHVnVaR2x1WnkxallYQXVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5a1pYUmxZM1JsWkMxMGIydGxiaTlrWlhSbFkzUmxaQzEwYjJ0bGJpMWhaR1J5WlhOekwyUmxkR1ZqZEdWa0xYUnZhMlZ1TFdGa1pISmxjM011YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOWtaWFJsWTNSbFpDMTBiMnRsYmk5a1pYUmxZM1JsWkMxMGIydGxiaTFoWjJkeVpXZGhkRzl5Y3k5a1pYUmxZM1JsWkMxMGIydGxiaTFoWjJkeVpXZGhkRzl5Y3k1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMlJsZEdWamRHVmtMWFJ2YTJWdUwyUmxkR1ZqZEdWa0xYUnZhMlZ1TFdSbGRHRnBiSE12WkdWMFpXTjBaV1F0ZEc5clpXNHRaR1YwWVdsc2N5NXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDJSbGRHVmpkR1ZrTFhSdmEyVnVMMlJsZEdWamRHVmtMWFJ2YTJWdUxXbG5ibTl5WldRdGNHOXdiM1psY2k5a1pYUmxZM1JsWkMxMGIydGxiaTFwWjI1dmNtVmtMWEJ2Y0c5MlpYSXVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5a1pYUmxZM1JsWkMxMGIydGxiaTlrWlhSbFkzUmxaQzEwYjJ0bGJpMXpaV3hsWTNScGIyNHRjRzl3YjNabGNpOWtaWFJsWTNSbFpDMTBiMnRsYmkxelpXeGxZM1JwYjI0dGNHOXdiM1psY2k1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMlJsZEdWamRHVmtMWFJ2YTJWdUwyUmxkR1ZqZEdWa0xYUnZhMlZ1TFhaaGJIVmxjeTlrWlhSbFkzUmxaQzEwYjJ0bGJpMTJZV3gxWlhNdWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzlrWlhSbFkzUmxaQzEwYjJ0bGJpOWtaWFJsWTNSbFpDMTBiMnRsYmk1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMlJ5YjNCa2IzZHVjeTlrY205d1pHOTNiaTVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyUnliM0JrYjNkdWN5OXVaWFIzYjNKckxXUnliM0JrYjNkdUxtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2WldScGRDMW5ZWE10WkdsemNHeGhlUzlsWkdsMExXZGhjeTFrYVhOd2JHRjVMbU52YlhCdmJtVnVkQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyVmthWFF0WjJGekxXUnBjM0JzWVhrdmFXNWtaWGd1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOWxaR2wwTFdkaGN5MW1aV1V0WW5WMGRHOXVMMlZrYVhRdFoyRnpMV1psWlMxaWRYUjBiMjR1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOWxaR2wwTFdkaGN5MW1aV1V0WW5WMGRHOXVMMmx1WkdWNExtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2WldScGRDMW5ZWE10Wm1WbExYQnZjRzkyWlhJdlpXUnBkQzFuWVhNdFptVmxMWEJ2Y0c5MlpYSXVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5bFpHbDBMV2RoY3kxbVpXVXRjRzl3YjNabGNpOWxaR2wwTFdkaGN5MXBkR1Z0TDJWa2FYUXRaMkZ6TFdsMFpXMHVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5bFpHbDBMV2RoY3kxbVpXVXRjRzl3YjNabGNpOWxaR2wwTFdkaGN5MXBkR1Z0TDJsdVpHVjRMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdlpXUnBkQzFuWVhNdFptVmxMWEJ2Y0c5MlpYSXZaV1JwZEMxbllYTXRhWFJsYlM5MWMyVkRkWE4wYjIxVWFXMWxSWE4wYVcxaGRHVXVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5bFpHbDBMV2RoY3kxbVpXVXRjRzl3YjNabGNpOWxaR2wwTFdkaGN5MXBkR1Z0TDNWelpVZGhjMGwwWlcxR1pXVkVaWFJoYVd4ekxtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2WldScGRDMW5ZWE10Wm1WbExYQnZjRzkyWlhJdlpXUnBkQzFuWVhNdGRHOXZiSFJwY0M5bFpHbDBMV2RoY3kxMGIyOXNkR2x3TG1weklpd2lkV2t2WTI5dGNHOXVaVzUwY3k5aGNIQXZaV1JwZEMxbllYTXRabVZsTFhCdmNHOTJaWEl2YVc1a1pYZ3Vhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5bFpHbDBMV2RoY3kxbVpXVXRjRzl3YjNabGNpOXVaWFIzYjNKckxYTjBZWFJwYzNScFkzTXZhVzVrWlhndWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzlsWkdsMExXZGhjeTFtWldVdGNHOXdiM1psY2k5dVpYUjNiM0pyTFhOMFlYUnBjM1JwWTNNdmJtVjBkMjl5YXkxemRHRjBhWE4wYVdOekxtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2WldScGRDMW5ZWE10Wm1WbExYQnZjRzkyWlhJdmJtVjBkMjl5YXkxemRHRjBhWE4wYVdOekwzTjBZWFIxY3kxemJHbGtaWEl2YVc1a1pYZ3Vhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5bFpHbDBMV2RoY3kxbVpXVXRjRzl3YjNabGNpOXVaWFIzYjNKckxYTjBZWFJwYzNScFkzTXZjM1JoZEhWekxYTnNhV1JsY2k5emRHRjBkWE10YzJ4cFpHVnlMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdlpXUnBkQzFuWVhNdFptVmxMWEJ2Y0c5MlpYSXZibVYwZDI5eWF5MXpkR0YwYVhOMGFXTnpMM1J2YjJ4MGFYQnpMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdlpXUnBkQzFuWVhNdGNHOXdiM1psY2k5bFpHbDBMV2RoY3kxd2IzQnZkbVZ5TG1OdmJYQnZibVZ1ZEM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMlZrYVhRdFoyRnpMWEJ2Y0c5MlpYSXZhVzVrWlhndWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzluWVhNdFpHVjBZV2xzY3kxcGRHVnRMMmRoY3kxa1pYUmhhV3h6TFdsMFpXMHRkR2wwYkdVdloyRnpMV1JsZEdGcGJITXRhWFJsYlMxMGFYUnNaUzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyZGhjeTFrWlhSaGFXeHpMV2wwWlcwdloyRnpMV1JsZEdGcGJITXRhWFJsYlMxMGFYUnNaUzlwYm1SbGVDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDJkaGN5MWtaWFJoYVd4ekxXbDBaVzB2WjJGekxXUmxkR0ZwYkhNdGFYUmxiUzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyZGhjeTFrWlhSaGFXeHpMV2wwWlcwdmFXNWtaWGd1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOW5ZWE10ZEdsdGFXNW5MMmRoY3kxMGFXMXBibWN1WTI5dGNHOXVaVzUwTG1weklpd2lkV2t2WTI5dGNHOXVaVzUwY3k5aGNIQXZhRzlzWkMxMGJ5MXlaWFpsWVd3dFluVjBkRzl1TDJodmJHUXRkRzh0Y21WMlpXRnNMV0oxZEhSdmJpNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDJodmJHUXRkRzh0Y21WMlpXRnNMV0oxZEhSdmJpOXBibVJsZUM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMmh2YldVdGJtOTBhV1pwWTJGMGFXOXVMMmh2YldVdGJtOTBhV1pwWTJGMGFXOXVMbU52YlhCdmJtVnVkQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyaHZiV1V0Ym05MGFXWnBZMkYwYVc5dUwybHVaR1Y0TG1weklpd2lkV2t2WTI5dGNHOXVaVzUwY3k5aGNIQXZhVzF3YjNKMExYUnZhMlZ1TFd4cGJtc3ZhVzF3YjNKMExYUnZhMlZ1TFd4cGJtc3VZMjl0Y0c5dVpXNTBMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmFXMXdiM0owTFhSdmEyVnVMV3hwYm1zdmFXNWtaWGd1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXNaV1JuWlhJdGFXNXpkSEoxWTNScGIyNHRabWxsYkdRdmFXNWtaWGd1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXNaV1JuWlhJdGFXNXpkSEoxWTNScGIyNHRabWxsYkdRdmJHVmtaMlZ5TFdsdWMzUnlkV04wYVc5dUxXWnBaV3hrTG1weklpd2lkV2t2WTI5dGNHOXVaVzUwY3k5aGNIQXZiRzloWkdsdVp5MXVaWFIzYjNKckxYTmpjbVZsYmk5cGJtUmxlQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyeHZZV1JwYm1jdGJtVjBkMjl5YXkxelkzSmxaVzR2Ykc5aFpHbHVaeTF1WlhSM2IzSnJMWE5qY21WbGJpNWpiMjF3YjI1bGJuUXVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5c2IyRmthVzVuTFc1bGRIZHZjbXN0YzJOeVpXVnVMMnh2WVdScGJtY3RibVYwZDI5eWF5MXpZM0psWlc0dVkyOXVkR0ZwYm1WeUxtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2YldWdWRTMWlZWEl2WVdOamIzVnVkQzF2Y0hScGIyNXpMVzFsYm5VdWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzl0Wlc1MUxXSmhjaTlwYm1SbGVDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDIxbGJuVXRZbUZ5TDIxbGJuVXRZbUZ5TG1weklpd2lkV2t2WTI5dGNHOXVaVzUwY3k5aGNIQXZiV1Z1ZFMxa2NtOXdjRzh1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXRaWFJoYldGemF5MTBaVzF3YkdGMFpTMXlaVzVrWlhKbGNpOXBibVJsZUM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMjFsZEdGdFlYTnJMWFJsYlhCc1lYUmxMWEpsYm1SbGNtVnlMMjFsZEdGdFlYTnJMWFJsYlhCc1lYUmxMWEpsYm1SbGNtVnlMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmJXVjBZVzFoYzJzdGRHVnRjR3hoZEdVdGNtVnVaR1Z5WlhJdmMyRm1aUzFqYjIxd2IyNWxiblF0YkdsemRDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDIxbGRHRnRZWE5yTFhSbGJYQnNZWFJsTFhKbGJtUmxjbVZ5TDNObFkzUnBiMjR0YzJoaGNHVXVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5dFpYUmhiV0Z6YXkxMGNtRnVjMnhoZEdsdmJpOXBibVJsZUM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMjFsZEdGdFlYTnJMWFJ5WVc1emJHRjBhVzl1TDIxbGRHRnRZWE5yTFhSeVlXNXpiR0YwYVc5dUxtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2Ylc5a1lXd3ZhVzVrWlhndWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzl0YjJSaGJDOXRiMlJoYkMxamIyNTBaVzUwTDJsdVpHVjRMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmJXOWtZV3d2Ylc5a1lXd3RZMjl1ZEdWdWRDOXRiMlJoYkMxamIyNTBaVzUwTG1OdmJYQnZibVZ1ZEM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMjF2WkdGc0wyMXZaR0ZzTG1OdmJYQnZibVZ1ZEM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMjF2WkdGc2N5OWhZMk52ZFc1MExXUmxkR0ZwYkhNdGJXOWtZV3d2WVdOamIzVnVkQzFrWlhSaGFXeHpMVzF2WkdGc0xtTnZiWEJ2Ym1WdWRDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDIxdlpHRnNjeTloWTJOdmRXNTBMV1JsZEdGcGJITXRiVzlrWVd3dllXTmpiM1Z1ZEMxa1pYUmhhV3h6TFcxdlpHRnNMbU52Ym5SaGFXNWxjaTVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyMXZaR0ZzY3k5aFkyTnZkVzUwTFdSbGRHRnBiSE10Ylc5a1lXd3ZhVzVrWlhndWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzl0YjJSaGJITXZZV05qYjNWdWRDMXRiMlJoYkMxamIyNTBZV2x1WlhJdllXTmpiM1Z1ZEMxdGIyUmhiQzFqYjI1MFlXbHVaWEl1WTI5dGNHOXVaVzUwTG1weklpd2lkV2t2WTI5dGNHOXVaVzUwY3k5aGNIQXZiVzlrWVd4ekwyRmpZMjkxYm5RdGJXOWtZV3d0WTI5dWRHRnBibVZ5TDJGalkyOTFiblF0Ylc5a1lXd3RZMjl1ZEdGcGJtVnlMbU52Ym5SaGFXNWxjaTVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyMXZaR0ZzY3k5aFkyTnZkVzUwTFcxdlpHRnNMV052Ym5SaGFXNWxjaTlwYm1SbGVDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDIxdlpHRnNjeTlqYjI1bWFYSnRMV1JsYkdWMFpTMXVaWFIzYjNKckwyTnZibVpwY20wdFpHVnNaWFJsTFc1bGRIZHZjbXN1WTI5dGNHOXVaVzUwTG1weklpd2lkV2t2WTI5dGNHOXVaVzUwY3k5aGNIQXZiVzlrWVd4ekwyTnZibVpwY20wdFpHVnNaWFJsTFc1bGRIZHZjbXN2WTI5dVptbHliUzFrWld4bGRHVXRibVYwZDI5eWF5NWpiMjUwWVdsdVpYSXVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5dGIyUmhiSE12WTI5dVptbHliUzFrWld4bGRHVXRibVYwZDI5eWF5OXBibVJsZUM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMjF2WkdGc2N5OWpiMjVtYVhKdExYSmxiVzkyWlMxaFkyTnZkVzUwTDJOdmJtWnBjbTB0Y21WdGIzWmxMV0ZqWTI5MWJuUXVZMjl0Y0c5dVpXNTBMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmJXOWtZV3h6TDJOdmJtWnBjbTB0Y21WdGIzWmxMV0ZqWTI5MWJuUXZZMjl1Wm1seWJTMXlaVzF2ZG1VdFlXTmpiM1Z1ZEM1amIyNTBZV2x1WlhJdWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzl0YjJSaGJITXZZMjl1Wm1seWJTMXlaVzF2ZG1VdFlXTmpiM1Z1ZEM5cGJtUmxlQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyMXZaR0ZzY3k5amIyNW1hWEp0TFhKbGMyVjBMV0ZqWTI5MWJuUXZZMjl1Wm1seWJTMXlaWE5sZEMxaFkyTnZkVzUwTG1OdmJYQnZibVZ1ZEM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMjF2WkdGc2N5OWpiMjVtYVhKdExYSmxjMlYwTFdGalkyOTFiblF2WTI5dVptbHliUzF5WlhObGRDMWhZMk52ZFc1MExtTnZiblJoYVc1bGNpNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDIxdlpHRnNjeTlqYjI1bWFYSnRMWEpsYzJWMExXRmpZMjkxYm5RdmFXNWtaWGd1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXRiMlJoYkhNdlkyOXVkSEpoWTNRdFpHVjBZV2xzY3kxdGIyUmhiQzlqYjI1MGNtRmpkQzFrWlhSaGFXeHpMVzF2WkdGc0xtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2Ylc5a1lXeHpMMk52Ym5abGNuUXRkRzlyWlc0dGRHOHRibVowTFcxdlpHRnNMMk52Ym5abGNuUXRkRzlyWlc0dGRHOHRibVowTFcxdlpHRnNMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmJXOWtZV3h6TDJOMWMzUnZiV2w2WlMxdWIyNWpaUzlqZFhOMGIyMXBlbVV0Ym05dVkyVXVZMjl0Y0c5dVpXNTBMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmJXOWtZV3h6TDJOMWMzUnZiV2w2WlMxdWIyNWpaUzlwYm1SbGVDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDIxdlpHRnNjeTlsWkdsMExXRndjSEp2ZG1Gc0xYQmxjbTFwYzNOcGIyNHZaV1JwZEMxaGNIQnliM1poYkMxd1pYSnRhWE56YVc5dUxtTnZiWEJ2Ym1WdWRDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDIxdlpHRnNjeTlsWkdsMExXRndjSEp2ZG1Gc0xYQmxjbTFwYzNOcGIyNHZaV1JwZEMxaGNIQnliM1poYkMxd1pYSnRhWE56YVc5dUxtTnZiblJoYVc1bGNpNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDIxdlpHRnNjeTlsWkdsMExXRndjSEp2ZG1Gc0xYQmxjbTFwYzNOcGIyNHZhVzVrWlhndWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzl0YjJSaGJITXZaWFJvTFhOcFoyNHRiVzlrWVd3dlpYUm9MWE5wWjI0dGJXOWtZV3d1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXRiMlJoYkhNdlpYaHdiM0owTFhCeWFYWmhkR1V0YTJWNUxXMXZaR0ZzTDJWNGNHOXlkQzF3Y21sMllYUmxMV3RsZVMxdGIyUmhiQzVqYjIxd2IyNWxiblF1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXRiMlJoYkhNdlpYaHdiM0owTFhCeWFYWmhkR1V0YTJWNUxXMXZaR0ZzTDJWNGNHOXlkQzF3Y21sMllYUmxMV3RsZVMxdGIyUmhiQzVqYjI1MFlXbHVaWEl1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXRiMlJoYkhNdlpYaHdiM0owTFhCeWFYWmhkR1V0YTJWNUxXMXZaR0ZzTDJsdVpHVjRMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmJXOWtZV3h6TDJWNGNHOXlkQzF3Y21sMllYUmxMV3RsZVMxdGIyUmhiQzl3WVhOemQyOXlaQzFwYm5CMWRDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDIxdlpHRnNjeTlsZUhCdmNuUXRjSEpwZG1GMFpTMXJaWGt0Ylc5a1lXd3ZjSEpwZG1GMFpTMXJaWGt1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXRiMlJoYkhNdlptRmtaUzF0YjJSaGJDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDIxdlpHRnNjeTlvYVdSbExYUnZhMlZ1TFdOdmJtWnBjbTFoZEdsdmJpMXRiMlJoYkM5b2FXUmxMWFJ2YTJWdUxXTnZibVpwY20xaGRHbHZiaTF0YjJSaGJDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDIxdlpHRnNjeTlvYVdSbExYUnZhMlZ1TFdOdmJtWnBjbTFoZEdsdmJpMXRiMlJoYkM5cGJtUmxlQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyMXZaR0ZzY3k5b2IyeGtMWFJ2TFhKbGRtVmhiQzF0YjJSaGJDOW9iMnhrTFhSdkxYSmxkbVZoYkMxdGIyUmhiQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyMXZaR0ZzY3k5b2IyeGtMWFJ2TFhKbGRtVmhiQzF0YjJSaGJDOXBibVJsZUM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMjF2WkdGc2N5OXBibVJsZUM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMjF2WkdGc2N5OXRiMlJoYkM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMjF2WkdGc2N5OXVaWGN0WVdOamIzVnVkQzF0YjJSaGJDOXBibVJsZUM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMjF2WkdGc2N5OXVaWGN0WVdOamIzVnVkQzF0YjJSaGJDOXVaWGN0WVdOamIzVnVkQzF0YjJSaGJDNWpiMjF3YjI1bGJuUXVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5dGIyUmhiSE12Ym1WM0xXRmpZMjkxYm5RdGJXOWtZV3d2Ym1WM0xXRmpZMjkxYm5RdGJXOWtZV3d1WTI5dWRHRnBibVZ5TG1weklpd2lkV2t2WTI5dGNHOXVaVzUwY3k5aGNIQXZiVzlrWVd4ekwyNXBZMnR1WVcxbExYQnZjRzkyWlhKekwybHVaR1Y0TG1weklpd2lkV2t2WTI5dGNHOXVaVzUwY3k5aGNIQXZiVzlrWVd4ekwyNXBZMnR1WVcxbExYQnZjRzkyWlhKekwyNXBZMnR1WVcxbExYQnZjRzkyWlhKekxtTnZiWEJ2Ym1WdWRDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDIxdlpHRnNjeTl4Y2kxelkyRnVibVZ5TDJsdVpHVjRMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmJXOWtZV3h6TDNGeUxYTmpZVzV1WlhJdmNYSXRjMk5oYm01bGNpNWpiMjF3YjI1bGJuUXVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5dGIyUmhiSE12Y1hJdGMyTmhibTVsY2k5eGNpMXpZMkZ1Ym1WeUxtTnZiblJoYVc1bGNpNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDIxdlpHRnNjeTl5WldwbFkzUXRkSEpoYm5OaFkzUnBiMjV6TDJsdVpHVjRMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmJXOWtZV3h6TDNKbGFtVmpkQzEwY21GdWMyRmpkR2x2Ym5NdmNtVnFaV04wTFhSeVlXNXpZV04wYVc5dWN5NWpiMjF3YjI1bGJuUXVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5dGIyUmhiSE12Y21WcVpXTjBMWFJ5WVc1ellXTjBhVzl1Y3k5eVpXcGxZM1F0ZEhKaGJuTmhZM1JwYjI1ekxtTnZiblJoYVc1bGNpNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDIxdlpHRnNjeTkwY21GdWMyRmpkR2x2YmkxamIyNW1hWEp0WldRdmFXNWtaWGd1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXRiMlJoYkhNdmRISmhibk5oWTNScGIyNHRZMjl1Wm1seWJXVmtMM1J5WVc1ellXTjBhVzl1TFdOdmJtWnBjbTFsWkM1amIyMXdiMjVsYm5RdWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzl0YjJSaGJITXZkSEpoYm5OaFkzUnBiMjR0WTI5dVptbHliV1ZrTDNSeVlXNXpZV04wYVc5dUxXTnZibVpwY20xbFpDNWpiMjUwWVdsdVpYSXVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5dGRXeDBhV3hoZVdWeUxXWmxaUzF0WlhOellXZGxMMmx1WkdWNExtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2YlhWc2RHbHNZWGxsY2kxbVpXVXRiV1Z6YzJGblpTOXRkV3gwYVMxc1lYbGxjaTFtWldVdGJXVnpjMkZuWlM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMjExYkhScGNHeGxMVzV2ZEdsbWFXTmhkR2x2Ym5NdmFXNWtaWGd1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXRkV3gwYVhCc1pTMXViM1JwWm1sallYUnBiMjV6TDIxMWJIUnBjR3hsTFc1dmRHbG1hV05oZEdsdmJuTXVZMjl0Y0c5dVpXNTBMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmJtVjBkMjl5YXkxaFkyTnZkVzUwTFdKaGJHRnVZMlV0YUdWaFpHVnlMMmx1WkdWNExtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2Ym1WMGQyOXlheTFoWTJOdmRXNTBMV0poYkdGdVkyVXRhR1ZoWkdWeUwyNWxkSGR2Y21zdFlXTmpiM1Z1ZEMxaVlXeGhibU5sTFdobFlXUmxjaTVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyNWxkSGR2Y21zdFpHbHpjR3hoZVM5cGJtUmxlQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyNWxkSGR2Y21zdFpHbHpjR3hoZVM5dVpYUjNiM0pyTFdScGMzQnNZWGt1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXVablF0WkdWbVlYVnNkQzFwYldGblpTOXBibVJsZUM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMjVtZEMxa1pXWmhkV3gwTFdsdFlXZGxMMjVtZEMxa1pXWmhkV3gwTFdsdFlXZGxMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmJtWjBMV1JsZEdGcGJITXZibVowTFdSbGRHRnBiSE11YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXVablF0YjNCMGFXOXVjeTl1Wm5RdGIzQjBhVzl1Y3k1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMMjVtZEhNdFpHVjBaV04wYVc5dUxXNXZkR2xqWlM5cGJtUmxlQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wyNW1kSE10WkdWMFpXTjBhVzl1TFc1dmRHbGpaUzl1Wm5SekxXUmxkR1ZqZEdsdmJpMXViM1JwWTJVdWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzl1Wm5SekxXbDBaVzF6TDJsdVpHVjRMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmJtWjBjeTFwZEdWdGN5OXVablJ6TFdsMFpXMXpMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmJtWjBjeTEwWVdJdmFXNWtaWGd1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXVablJ6TFhSaFlpOXVablJ6TFhSaFlpNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDNCbGNtMXBjM05wYjI0dGNHRm5aUzFqYjI1MFlXbHVaWEl2YVc1a1pYZ3Vhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5d1pYSnRhWE56YVc5dUxYQmhaMlV0WTI5dWRHRnBibVZ5TDNCbGNtMXBjM05wYjI0dGNHRm5aUzFqYjI1MFlXbHVaWEl0WTI5dWRHVnVkQzlwYm1SbGVDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDNCbGNtMXBjM05wYjI0dGNHRm5aUzFqYjI1MFlXbHVaWEl2Y0dWeWJXbHpjMmx2Ymkxd1lXZGxMV052Ym5SaGFXNWxjaTFqYjI1MFpXNTBMM0JsY20xcGMzTnBiMjR0Y0dGblpTMWpiMjUwWVdsdVpYSXRZMjl1ZEdWdWRDNWpiMjF3YjI1bGJuUXVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5d1pYSnRhWE56YVc5dUxYQmhaMlV0WTI5dWRHRnBibVZ5TDNCbGNtMXBjM05wYjI0dGNHRm5aUzFqYjI1MFlXbHVaWEl1WTI5dGNHOXVaVzUwTG1weklpd2lkV2t2WTI5dGNHOXVaVzUwY3k5aGNIQXZjR1Z5YldsemMybHZiaTF3WVdkbExXTnZiblJoYVc1bGNpOXdaWEp0YVhOemFXOXVMWEJoWjJVdFkyOXVkR0ZwYm1WeUxtTnZiblJoYVc1bGNpNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDNCbGNtMXBjM05wYjI1ekxXTnZibTVsWTNRdFptOXZkR1Z5TDJsdVpHVjRMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmNHVnliV2x6YzJsdmJuTXRZMjl1Ym1WamRDMW1iMjkwWlhJdmNHVnliV2x6YzJsdmJuTXRZMjl1Ym1WamRDMW1iMjkwWlhJdVkyOXRjRzl1Wlc1MExtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2Y0dWeWJXbHpjMmx2Ym5NdFkyOXVibVZqZEMxb1pXRmtaWEl2YVc1a1pYZ3Vhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5d1pYSnRhWE56YVc5dWN5MWpiMjV1WldOMExXaGxZV1JsY2k5d1pYSnRhWE56YVc5dWN5MWpiMjV1WldOMExXaGxZV1JsY2k1amIyMXdiMjVsYm5RdWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzl3WlhKdGFYTnphVzl1Y3kxamIyNXVaV04wTFhCbGNtMXBjM05wYjI0dGJHbHpkQzlwYm1SbGVDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDNCbGNtMXBjM05wYjI1ekxXTnZibTVsWTNRdGNHVnliV2x6YzJsdmJpMXNhWE4wTDNCbGNtMXBjM05wYjI1ekxXTnZibTVsWTNRdGNHVnliV2x6YzJsdmJpMXNhWE4wTG1weklpd2lkV2t2WTI5dGNHOXVaVzUwY3k5aGNIQXZjWEl0YUdGeVpIZGhjbVV0Y0c5d2IzWmxjaTlpWVhObExYSmxZV1JsY2k1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMM0Z5TFdoaGNtUjNZWEpsTFhCdmNHOTJaWEl2Wlc1b1lXNWpaV1F0Y21WaFpHVnlMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmNYSXRhR0Z5WkhkaGNtVXRjRzl3YjNabGNpOXBibVJsZUM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMM0Z5TFdoaGNtUjNZWEpsTFhCdmNHOTJaWEl2Y1hJdGFHRnlaSGRoY21VdGNHOXdiM1psY2k1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMM0Z5TFdoaGNtUjNZWEpsTFhCdmNHOTJaWEl2Y1hJdGFHRnlaSGRoY21VdGMybG5iaTF5WlhGMVpYTjBMMmx1WkdWNExtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2Y1hJdGFHRnlaSGRoY21VdGNHOXdiM1psY2k5eGNpMW9ZWEprZDJGeVpTMXphV2R1TFhKbGNYVmxjM1F2Y0d4aGVXVnlMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmNYSXRhR0Z5WkhkaGNtVXRjRzl3YjNabGNpOXhjaTFvWVhKa2QyRnlaUzF6YVdkdUxYSmxjWFZsYzNRdmNYSXRhR0Z5WkhkaGNtVXRjMmxuYmkxeVpYRjFaWE4wTG1OdmJYQnZibVZ1ZEM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMM0Z5TFdoaGNtUjNZWEpsTFhCdmNHOTJaWEl2Y1hJdGFHRnlaSGRoY21VdGMybG5iaTF5WlhGMVpYTjBMM0psWVdSbGNpNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDNGeUxXaGhjbVIzWVhKbExYQnZjRzkyWlhJdmNYSXRhR0Z5WkhkaGNtVXRkMkZzYkdWMExXbHRjRzl5ZEdWeUwybHVaR1Y0TG1weklpd2lkV2t2WTI5dGNHOXVaVzUwY3k5aGNIQXZjWEl0YUdGeVpIZGhjbVV0Y0c5d2IzWmxjaTl4Y2kxb1lYSmtkMkZ5WlMxM1lXeHNaWFF0YVcxd2IzSjBaWEl2Y1hJdGFHRnlaSGRoY21VdGQyRnNiR1YwTFdsdGNHOXlkR1Z5TG1OdmJYQnZibVZ1ZEM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMM0psWTI5MlpYSjVMWEJvY21GelpTMXlaVzFwYm1SbGNpOXBibVJsZUM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMM0psWTI5MlpYSjVMWEJvY21GelpTMXlaVzFwYm1SbGNpOXlaV052ZG1WeWVTMXdhSEpoYzJVdGNtVnRhVzVrWlhJdWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzl6WldOMWNtbDBlUzF3Y205MmFXUmxjaTFpWVc1dVpYSXRiV1Z6YzJGblpTOXpaV04xY21sMGVTMXdjbTkyYVdSbGNpMWlZVzV1WlhJdGJXVnpjMkZuWlM1amIyNXpkR0Z1ZEhNdWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzl6WldOMWNtbDBlUzF3Y205MmFXUmxjaTFpWVc1dVpYSXRiV1Z6YzJGblpTOXpaV04xY21sMGVTMXdjbTkyYVdSbGNpMWlZVzV1WlhJdGJXVnpjMkZuWlM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMM05sYkdWamRHVmtMV0ZqWTI5MWJuUXZhVzVrWlhndWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzl6Wld4bFkzUmxaQzFoWTJOdmRXNTBMM05sYkdWamRHVmtMV0ZqWTI5MWJuUXVZMjl0Y0c5dVpXNTBMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmMyVnNaV04wWldRdFlXTmpiM1Z1ZEM5elpXeGxZM1JsWkMxaFkyTnZkVzUwTG1OdmJuUmhhVzVsY2k1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMM05sZEMxaGNIQnliM1poYkMxbWIzSXRZV3hzTFhkaGNtNXBibWN2YVc1a1pYZ3Vhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5elpYUXRZWEJ3Y205MllXd3RabTl5TFdGc2JDMTNZWEp1YVc1bkwzTmxkQzFoY0hCeWIzWmhiQzFtYjNJdFlXeHNMWGRoY201cGJtY3Vhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5emFXZHVZWFIxY21VdGNtVnhkV1Z6ZEMxdmNtbG5hVzVoYkM5cGJtUmxlQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wzTnBaMjVoZEhWeVpTMXlaWEYxWlhOMExXOXlhV2RwYm1Gc0wzTnBaMjVoZEhWeVpTMXlaWEYxWlhOMExXOXlhV2RwYm1Gc0xYZGhjbTVwYm1jdmFXNWtaWGd1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMXZjbWxuYVc1aGJDOXphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMXZjbWxuYVc1aGJDMTNZWEp1YVc1bkwzTnBaMjVoZEhWeVpTMXlaWEYxWlhOMExXOXlhV2RwYm1Gc0xYZGhjbTVwYm1jdWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzl6YVdkdVlYUjFjbVV0Y21WeGRXVnpkQzF2Y21sbmFXNWhiQzl6YVdkdVlYUjFjbVV0Y21WeGRXVnpkQzF2Y21sbmFXNWhiQzVqYjIxd2IyNWxiblF1YW5NaUxDSjFhUzlqYjIxd2IyNWxiblJ6TDJGd2NDOXphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMXZjbWxuYVc1aGJDOXphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMXZjbWxuYVc1aGJDNWpiMjUwWVdsdVpYSXVhbk1pTENKMWFTOWpiMjF3YjI1bGJuUnpMMkZ3Y0M5emFXZHVZWFIxY21VdGNtVnhkV1Z6ZEMxemFYZGxMMmx1WkdWNExtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2YzJsbmJtRjBkWEpsTFhKbGNYVmxjM1F0YzJsM1pTOXphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMXphWGRsTFdobFlXUmxjaTlwYm1SbGVDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDNOcFoyNWhkSFZ5WlMxeVpYRjFaWE4wTFhOcGQyVXZjMmxuYm1GMGRYSmxMWEpsY1hWbGMzUXRjMmwzWlMxb1pXRmtaWEl2YzJsbmJtRjBkWEpsTFhKbGNYVmxjM1F0YzJsM1pTMW9aV0ZrWlhJdWFuTWlMQ0oxYVM5amIyMXdiMjVsYm5SekwyRndjQzl6YVdkdVlYUjFjbVV0Y21WeGRXVnpkQzF6YVhkbEwzTnBaMjVoZEhWeVpTMXlaWEYxWlhOMExYTnBkMlV0YVdOdmJpOXBibVJsZUM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMM05wWjI1aGRIVnlaUzF5WlhGMVpYTjBMWE5wZDJVdmMybG5ibUYwZFhKbExYSmxjWFZsYzNRdGMybDNaUzF0WlhOellXZGxMMmx1WkdWNExtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2YzJsbmJtRjBkWEpsTFhKbGNYVmxjM1F0YzJsM1pTOXphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMXphWGRsTFcxbGMzTmhaMlV2YzJsbmJtRjBkWEpsTFhKbGNYVmxjM1F0YzJsM1pTMXRaWE56WVdkbExtcHpJaXdpZFdrdlkyOXRjRzl1Wlc1MGN5OWhjSEF2YzJsbmJtRjBkWEpsTFhKbGNYVmxjM1F0YzJsM1pTOXphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMXphWGRsTFhSaFp5OXBibVJsZUM1cWN5SXNJblZwTDJOdmJYQnZibVZ1ZEhNdllYQndMM05wWjI1aGRIVnlaUzF5WlhGMVpYTjBMWE5wZDJVdmMybG5ibUYwZFhKbExYSmxjWFZsYzNRdGMybDNaUzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wzTnBaMjVoZEhWeVpTMXlaWEYxWlhOMEwybHVaR1Y0TG1weklpd2lkV2t2WTI5dGNHOXVaVzUwY3k5aGNIQXZjMmxuYm1GMGRYSmxMWEpsY1hWbGMzUXZjMmxuYm1GMGRYSmxMWEpsY1hWbGMzUXRaR0YwWVM5cGJtUmxlQzVxY3lJc0luVnBMMk52YlhCdmJtVnVkSE12WVhCd0wzTnBaMjVoZEhWeVpTMXlaWEYxWlhOMEwzTnBaMjVoZEhWeVpTMXlaWEYxWlhOMExXUmhkR0V2YzJsbmJtRjBkWEpsTFhKbGNYVmxjM1F0WkdGMFlTNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDNOcFoyNWhkSFZ5WlMxeVpYRjFaWE4wTDNOcFoyNWhkSFZ5WlMxeVpYRjFaWE4wTFdadmIzUmxjaTlwYm1SbGVDNXFjeUlzSW5WcEwyTnZiWEJ2Ym1WdWRITXZZWEJ3TDNOcFoyNWhkSFZ5WlMxeVpYRjFaWE4wTDNOcFoyNWhkSFZ5WlMxeVpYRjFaWE4wTFdadmIzUmxjaTl6YVdkdVlYUjFjbVV0Y21WeGRXVnpkQzFtYjI5MFpYSXVZMjl0Y0c5dVpXNTBMbXB6SWl3aWRXa3ZZMjl0Y0c5dVpXNTBjeTloY0hBdmMybG5ibUYwZFhKbExYSmxjWFZsYzNRdmMybG5ibUYwZFhKbExYSmxjWFZsYzNRdGJXVnpjMkZuWlM5cGJtUmxlQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3T3pzN096dEJRVUZCTEVsQlFVRXNWMEZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNUVUZCUVN4SFFVRkJMSFZDUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVUU0UXl4VFFVRkJMSGxDUVVGQkxGZEJRVUVzWlVGQlFTeFBRVUZCTEd0RFFVRkJMR2xDUVVGQkxFOUJRVUVzVDBGQlFTeFJRVUZCTEdkQ1FVRkJMRTlCUVVFc1QwRkJRU3haUVVGQkxIZENRVUZCTEZsQlFVRXNRMEZCUVN4WFFVRkJMRmRCUVVFc1YwRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNhVUpCUVVFc1MwRkJRU3hYUVVGQk8wRkJRVUVzVTBGQlFTeDNRa0ZCUVN4SFFVRkJMRVZCUVVFc1YwRkJRU3hUUVVGQkxGZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1YwRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHZRa0ZCUVN4SFFVRkJMSGRDUVVGQkxFZEJRVUVzTkVKQlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFc1ZVRkJRU3hMUVVGQkxFZEJRVUVzZDBKQlFVRXNRMEZCUVN4WFFVRkJMRTlCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4WlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFRRVUZCTEUxQlFVRXNWMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMR3RDUVVGQkxFMUJRVUVzUTBGQlFTeFRRVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeFRRVUZCTEVsQlFVRXNSMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxHTkJRVUVzU1VGQlFTeExRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRTFCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzU1VGQlFTeFpRVUZCTEUxQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRWRCUVVFc1RVRkJRU3hMUVVGQkxFbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1RVRkJRU3haUVVGQkxFMUJRVUU3UVVGQlFTeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEdkQ1FVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzUzBGQlFTeEpRVUZCTEVkQlFVRXNSMEZCUVN4alFVRkJMRU5CUVVFc1IwRkJRU3hQUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeEpRVUZCTEV0QlFVRXNSVUZCUVN4TFFVRkJMRVZCUVVFc1ZVRkJRU3hSUVVGQkxGbEJRVUVzVVVGQlFTeFJRVUZCTEc5Q1FVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUzBGQlFTeFhRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMR1ZCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzUjBGQlFTeFpRVUZCTEVOQlFVRXNSMEZCUVN3eVFrRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzWVVGQlFTeExRVUZCTEVWQlFVRXNTVUZCUVN4bFFVRkJMRXRCUVVFc2FVSkJRVUVzUzBGQlFTeHJRa0ZCUVN4TFFVRkJMRTFCUVVFc1NVRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeE5RVUZCTEVOQlFVRXNWMEZCUVN4UFFVRkJMRWxCUVVFc1MwRkJRU3hUUVVGQkxGRkJRVUVzUjBGQlFTeEhRVUZCTEVsQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQkxFbEJRVUVzTWtKQlFVRXNSMEZCUVN4elFrRkJRU3hIUVVGQkxGbEJRVUVzVTBGQlFTdzBSRUZCUVN4SlFVRkJMR2RDUVVGQkxFMUJRVUVzUjBGQlFTeE5RVUZCTEVWQlFVRXNTMEZCUVR0QlFVVXZRaXhOUVVGTkxIbENRVUY1UWl4VFFVRlRMRzlDUVVGaExFTkJRVU03UlVGdlFtNUZMRTFCUVUwc1EwRkJRU3hGUVVGSE8wbEJRMUFzVFVGQlRUdE5RVUZGTEU5QlFVODdUVUZCUlN4VFFVRlRPMDFCUVVVc1NVRkJTVHROUVVGRkxFMUJRVTA3VFVGQlJTeE5RVUZOTzAxQlFVVTdTVUZCVVN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXM3U1VGRmVFVXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlFVc3NVMEZCVXl4RlFVRkZMRWxCUVVFc2JVSkJRVlVzUlVGQlF5dzRRa0ZCT0VJc1JVRkJSU3hUUVVGVE8wbEJRVVVzWjBKQlEzQkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZMTEZOQlFWTXNSVUZCUXp0SlFVRnpReXhuUWtGRGJrUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVlVGQlFTeERRVUZCTEU5QlFWTTdUVUZEVWl4VFFVRlRMRVZCUVVNc2IwTkJRVzlETzAxQlF6bERMRTlCUVU4c1JVRkJSU3hQUVVGUk8wMUJRMnBDTEZGQlFWRXNSVUZCUlR0SlFVRkhMRU5CUTJRc1EwRkJReXhsUVVOR0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN3eVFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdUVUZCUnl4VFFVRlRMRVZCUVVNN1NVRkJkVU1zWjBKQlEyeEVMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeHBRa0ZCVXl4SlFVRmhMRU5CUTNKQ0xFTkJRVU1zUlVGRFNDeE5RVUZOTEdkQ1FVTk1MRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZITEZOQlFWTXNSVUZCUXp0SlFVRjVReXhIUVVGRExGVkJSWEpFTEVWQlFVTXNUVUZEUVN4RFFVRkRMRWRCUTBZc1NVRkJTU3hGUVVOUUxFMUJRMFVzUTBGRFJpeERRVUZETEVWQlEwd3NUMEZEUlN4RFFVRkRPMFZCUlZZN1FVRkRSanRCUVVGRExFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNlVUpCUVVFN1FVRkJRU3hsUVVGQkxFTkJhRVJ2UWl4NVFrRkJlVUlzYTBKQlEzUkNPMFZCUTNCQ0xFTkJRVU1zUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVOd1FpeERRVUZETzBGQlFVRXNaVUZCUVN4RFFVaHJRaXg1UWtGQmVVSXNaVUZMZWtJN1JVRkRha0lzVDBGQlR5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVlU3UlVGRGNFTXNVMEZCVXl4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRUdEZRVU16UWl4SlFVRkpMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlR0RlFVTXZRaXhOUVVGTkxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TlFVRk5PMFZCUTNoQ0xFMUJRVTBzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrN1JVRkRkRUlzVDBGQlR5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNN1FVRkRja0lzUTBGQlF6dEJRVUZCTEdWQlFVRXNRMEZhYTBJc2VVSkJRWGxDTEd0Q1FXTjBRanRGUVVOd1FpeFRRVUZUTEVWQlFVVXNTVUZCU1R0RlFVTm1MRTlCUVU4c1JVRkJSU3hKUVVGSk8wVkJRMklzVFVGQlRTeEZRVUZGTzBGQlExWXNRMEZCUXpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNaQ1NDeEpRVUZCTERCQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFXMUZMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTkJia1VzU1VGQlFTeFZRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeE5RVUZCTEVkQlFVRXNkVUpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeExRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2FVSkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4bFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVGclJTeFRRVUZCTEhsQ1FVRkJMRmRCUVVFc1pVRkJRU3hQUVVGQkxHdERRVUZCTEdsQ1FVRkJMRTlCUVVFc1QwRkJRU3hSUVVGQkxHZENRVUZCTEU5QlFVRXNUMEZCUVN4WlFVRkJMSGRDUVVGQkxGbEJRVUVzUTBGQlFTeFhRVUZCTEZkQlFVRXNWMEZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzYVVKQlFVRXNTMEZCUVN4WFFVRkJPMEZCUVVFc1UwRkJRU3gzUWtGQlFTeEhRVUZCTEVWQlFVRXNWMEZCUVN4VFFVRkJMRmRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNWMEZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3h2UWtGQlFTeEhRVUZCTEhkQ1FVRkJMRWRCUVVFc05FSkJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRXNWVUZCUVN4TFFVRkJMRWRCUVVFc2QwSkJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzVjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEd0Q1FVRkJMRTFCUVVFc1EwRkJRU3hUUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hUUVVGQkxFbEJRVUVzUjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMR05CUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1NVRkJRU3haUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNUVUZCUVN4WlFVRkJMRTFCUVVFN1FVRkJRU3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN1FVRkZiRVVzVFVGQlRTdzBRa0ZCTkVJc1IwRkJSeXhEUVVGRE8wVkJRM0JETEZGQlFWRTdSVUZEVWl4aFFVRmhPMFZCUTJJc1lVRkJZVHRGUVVOaU8wRkJRMFlzUTBGQlF5eExRVUZMTzBWQlEwb3NUVUZCVFN4SFFVRkhMRWRCUVVjc1NVRkJRU3hoUVVGTkxFVkJRVU1zUzBGQlN5eERRVUZETzBWQlEzcENMRTFCUVUwc1EwRkJReXhIUVVGSExFbEJRVUVzT0VKQlFXTXNSVUZCUXl4RFFVRkRPMFZCUlRGQ0xHOUNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRKUVVGTExFZEJRVWNzUlVGQlJUdEZRVUZKTEdkQ1FVTmFMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1ZVRkJWVHRKUVVOVUxGRkJRVkVzUlVGQlJTd3dRa0ZCVVN4RFFVRkRMRmxCUVdFN1NVRkRhRU1zVTBGQlV5eEZRVUZETEc5RFFVRnZRenRKUVVNNVF5eFBRVUZQTEVWQlFVVXNZVUZCWXp0SlFVTjJRaXhUUVVGVExFVkJRVVVzUTBGQlF5eERRVUZETEZOQlFWTTdSVUZCUlN4RFFVTjZRaXhEUVVGRExFVkJRMFFzU1VGQlNTeG5Ra0ZEU0N4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eExRVUZCTEVOQlFVRXNTVUZCU1R0SlFVTklMR0ZCUVdFc1JVRkJSU3hIUVVGSExFTkJRVU1zVDBGQlVUdEpRVU16UWl4TlFVRk5MRVZCUVVVc1lVRkJZenRKUVVOMFFpeGhRVUZoTEVWQlFVVTdUVUZEWWl4VFFVRlRMRVZCUVVVc1EwRkRWRHRSUVVGRkxFbEJRVWtzUlVGQlJTeHBRa0ZCYVVJN1VVRkJSU3hQUVVGUExFVkJRVVU3VlVGQlJTeFhRVUZYTEVWQlFVVTdVVUZCU3p0TlFVRkZMRU5CUVVNN1NVRkZMMFE3UlVGQlJTeEhRVVZFTEZGQlEwY3NRMEZCUXl4SFFVTk1MRWxCUTBRc1EwRkJRenRCUVVWV0xFTkJRVU03UVVGRlJDdzBRa0ZCTkVJc1EwRkJReXhUUVVGVExFZEJRVWM3UlVGRGRrTXNVVUZCVVN4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVTdSVUZEYmtNc1lVRkJZU3hGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVN1JVRkRlRU1zWVVGQllTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlU3UlVGRGVFTXNTVUZCU1N4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEzWkNMRU5CUVVNN1FVRkJReXhKUVVGQkxGRkJRVUVzUjBGRllTdzBRa0ZCTkVJN1FVRkJRU3hQUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEZGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTXZRek5ETEVsQlFVRXNOa0pCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZCYzBVc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTBGMFJTeEpRVUZCTEZWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEUxQlFVRXNSMEZCUVN4MVFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdsQ1FVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzUzBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMREJDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3cyUWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVFMlJTeFRRVUZCTEhsQ1FVRkJMRmRCUVVFc1pVRkJRU3hQUVVGQkxHdERRVUZCTEdsQ1FVRkJMRTlCUVVFc1QwRkJRU3hSUVVGQkxHZENRVUZCTEU5QlFVRXNUMEZCUVN4WlFVRkJMSGRDUVVGQkxGbEJRVUVzUTBGQlFTeFhRVUZCTEZkQlFVRXNWMEZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzYVVKQlFVRXNTMEZCUVN4WFFVRkJPMEZCUVVFc1UwRkJRU3gzUWtGQlFTeEhRVUZCTEVWQlFVRXNWMEZCUVN4VFFVRkJMRmRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNWMEZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3h2UWtGQlFTeEhRVUZCTEhkQ1FVRkJMRWRCUVVFc05FSkJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRXNWVUZCUVN4TFFVRkJMRWRCUVVFc2QwSkJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzVjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEd0Q1FVRkJMRTFCUVVFc1EwRkJRU3hUUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hUUVVGQkxFbEJRVUVzUjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMR05CUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1NVRkJRU3haUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNUVUZCUVN4WlFVRkJMRTFCUVVFN1FVRkJRU3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN1FVRkJRU3hUUVVGQkxHZENRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1MwRkJRU3hKUVVGQkxFZEJRVUVzUjBGQlFTeGpRVUZCTEVOQlFVRXNSMEZCUVN4UFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hKUVVGQkxFdEJRVUVzUlVGQlFTeExRVUZCTEVWQlFVRXNWVUZCUVN4UlFVRkJMRmxCUVVFc1VVRkJRU3hSUVVGQkxHOUNRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1MwRkJRU3hYUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEdWQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc1IwRkJRU3haUVVGQkxFTkJRVUVzUjBGQlFTd3lRa0ZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzUjBGQlFTeE5RVUZCTEVOQlFVRXNSMEZCUVR0QlFVRkJMRk5CUVVFc1lVRkJRU3hMUVVGQkxFVkJRVUVzU1VGQlFTeGxRVUZCTEV0QlFVRXNhVUpCUVVFc1MwRkJRU3hyUWtGQlFTeExRVUZCTEUxQlFVRXNTVUZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hOUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEVsQlFVRXNTMEZCUVN4VFFVRkJMRkZCUVVFc1IwRkJRU3hIUVVGQkxFbEJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNTMEZCUVN4RlFVRkJMRWxCUVVFc01rSkJRVUVzUjBGQlFTeHpRa0ZCUVN4SFFVRkJMRmxCUVVFc1UwRkJRU3cwUkVGQlFTeEpRVUZCTEdkQ1FVRkJMRTFCUVVFc1IwRkJRU3hOUVVGQkxFVkJRVUVzUzBGQlFUdEJRVVU1UkN4TlFVRk5MSEZDUVVGeFFpeFRRVUZUTEc5Q1FVRmhMRU5CUVVNN1JVRkJRU3haUVVGQkxFZEJRVUVzU1VGQlFUdEpRVUZCTEZOQlFVRXNTVUZCUVR0SlFVRkJMR1ZCUVVFc1owSkJlVU4yUkR0TlFVTk9MSFZDUVVGMVFpeEZRVUZGTzBsQlF6TkNMRU5CUVVNN1NVRkJRU3hsUVVGQkxEUkNRVVZ0UWl4TlFVRk5PMDFCUTNoQ0xFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8wMUJRM3BDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXgxUWtGQmRVSXNRMEZCUXp0SlFVTjJSU3hEUVVGRE8wbEJRVUVzWlVGQlFTeDNRa0ZGWjBJc1QwRkJUeXhKUVVGTE8wMUJRek5DTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETzAxQlEzcENMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1QwRkJUeXhEUVVGRE8wbEJRM2hETEVOQlFVTTdTVUZCUVN4bFFVRkJMRFpDUVVWdlFpeE5RVUZOTzAxQlEzcENMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU03VVVGQlJTeDFRa0ZCZFVJc1JVRkJSVHROUVVGTExFTkJRVU1zUTBGQlF6dEpRVU5zUkN4RFFVRkRPMGxCUVVFc1pVRkJRU3cyUWtGRmNVSXNUMEZCVHl4SlFVRkxPMDFCUTJoRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTTdVVUZCUlN4MVFrRkJkVUlzUlVGQlJUdE5RVUZSTEVOQlFVTXNRMEZCUXp0SlFVTnlSQ3hEUVVGRE8wVkJRVUU3UlVGRlJDeDNRa0ZCZDBJc1EwRkJRU3hGUVVGSE8wbEJRM3BDTEUxQlFVMDdUVUZCUlN4blFrRkJaMEk3VFVGQlJUdEpRVUZsTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTenRKUVVOMlJDeE5RVUZOTzAxQlFVVTdTVUZCUlN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVTg3U1VGRk1VSXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEZRVUZGTzAxQlEzSkNMRTlCUVU4c1NVRkJTVHRKUVVOaU8wbEJSVUVzVFVGQlRUdE5RVUZGTEU5QlFVODdUVUZCUlR0SlFVRkxMRU5CUVVNc1IwRkJSeXhuUWtGQlowSTdTVUZETVVNc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc01FSkJRVUVzUTBGQlFTeFBRVUY1UWp0TlFVTjRRaXhUUVVGVExFVkJRVU1zZVVOQlFYbERPMDFCUTI1RUxFOUJRVThzUlVGQlJTeFBRVUZSTzAxQlEycENMRWxCUVVrc1JVRkJSeXhIUVVGRkxFbEJRVXNzVFVGQlN5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlJTeEhRVUZITzAxQlF6VkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU1zYjBKQlFXOUNMRU5CUVVVN1RVRkRhRU1zVFVGQlRTeGxRVU5LTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRSUVVORkxGTkJRVk1zUlVGQlF5dzRRMEZCT0VNN1VVRkRlRVFzVDBGQlR5eEZRVUZGTEVOQlFVRXNTMEZCVFN4alFVRmpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNUMEZCVHp0TlFVRkZMRWRCUlhaRUxFTkJRVU1zUTBGQlF5eFRRVUZUTEVOQlExZzdTVUZEU2l4RFFVTkdMRU5CUVVNN1JVRkZUanRGUVVWQkxIRkNRVUZ4UWl4RFFVRkRMRTlCUVU4c1JVRkJSVHRKUVVNM1FpeE5RVUZOTzAxQlFVVTdTVUZCZDBJc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTzBsQlF6bERMRTFCUVUwN1RVRkJSVHRKUVVGRkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHp0SlFVVXhRaXh2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXcyUWtGQlFTeERRVUZCTEU5QlFUUkNPMDFCUXpOQ0xHRkJRV0VzUlVGQlJTeEpRVUZKTEVOQlFVTXNhMEpCUVcxQ08wMUJRM1pETEdGQlFXRXNSVUZCUlN4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFTkJRVVU3VFVGRE0wUXNTVUZCU1N4RlFVRkZMSFZDUVVGMVFpeExRVUZMTzBsQlFWRXNaMEpCUlRGRExFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRXRCUVVFc1EwRkJRU3hSUVVGUk8wMUJRVU1zVVVGQlVTeEZRVUZGTERCQ1FVRlJMRU5CUVVNc1RVRkJUenROUVVGRExFOUJRVThzUlVGQlJTeEpRVUZKTEVOQlFVTTdTVUZCYTBJc1IwRkRiRVVzUTBGQlF5eERRVUZETEhWQ1FVRjFRaXhEUVVOc1FpeERRVU5yUWl4RFFVRkRPMFZCUlc1RE8wVkJSVUVzYjBKQlFXOUNMRU5CUVVNc1QwRkJUeXhGUVVGRk8wbEJRelZDTEUxQlFVMDdUVUZCUlR0SlFVRkZMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR6dEpRVVV4UWl4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdUVUZEUlN4VFFVRlRMRVZCUVVNc09FTkJRVGhETzAxQlEzaEVMRTlCUVU4c1JVRkJSU3hEUVVGQkxFdEJRVTBzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4UFFVRlBPMGxCUVVVc1IwRkZNVU1zUTBGQlF5eERRVUZETEhGQ1FVRnhRaXhEUVVOMlFpeERRVUZETzBWQlJWSTdSVUZGUVN4TlFVRk5MRU5CUVVFc1JVRkJSenRKUVVOUUxFMUJRVTA3VFVGQlJTeHBRa0ZCYVVJN1RVRkJSU3hsUVVGbE8wMUJRVVU3U1VGQmQwSXNRMEZCUXl4SFFVTnVSU3hKUVVGSkxFTkJRVU1zUzBGQlN6dEpRVU5hTEUxQlFVMDdUVUZCUlR0SlFVRkZMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR6dEpRVVV4UWl4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUVN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxGRkJRVUVzY1VKQlEwVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVTBzVTBGQlV5eEZRVUZETzBsQlFYbENMRWRCUTNSRExFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhEUVVGRExFVkJReTlDTEdsQ1FVRnBRaXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzAxQlFVVXNUMEZCVHp0TlFVRkZPMGxCUVVzc1EwRkJReXhGUVVGRkxFdEJRVXNzUzBGQlN6dE5RVU51UkN4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl3d1FrRkJRU3hEUVVGQkxFOUJRWGxDTzFGQlEzaENMRWRCUVVjc1JVRkJSU3hQUVVGUk8xRkJRMklzVDBGQlR5eEZRVUZGTEU5QlFWRTdVVUZEYWtJc1NVRkJTU3hGUVVGSExFZEJRVVVzU1VGQlN5eE5RVUZMTEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZGTEVkQlFVYzdVVUZETlVNc1RVRkJUU3hGUVVGRkxFdEJRVXNzUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFbEJRVXM3VVVGRGVrTXNUMEZCVHl4RlFVTk1MSFZDUVVGMVFpeEhRVU51UWl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUTI1RExFbEJRMHc3VVVGRFJDeE5RVUZOTEVWQlEwb3NUMEZCVHl4TFFVRkxMR1ZCUVdVc1IwRkRka0lzU1VGQlNTeEhRVU5LTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFBRVUZQTzAxQlEzUkRMRU5CUTBZc1EwRkJRenRKUVVWT0xFTkJRVU1zUTBGRFJ5eERRVU5PTEVOQlFVTTdSVUZGVUR0QlFVTkdPMEZCUVVNc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeHhRa0ZCUVR0QlFVRkJMR1ZCUVVFc1EwRjZTbTlDTEhGQ1FVRnhRaXhyUWtGRGJFSTdSVUZEY0VJc1EwRkJReXhGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRPMEZCUTNCQ0xFTkJRVU03UVVGQlFTeGxRVUZCTEVOQlNHdENMSEZDUVVGeFFpeHJRa0ZMYkVJN1JVRkRjRUlzWjBKQlFXZENMRVZCUVVVN1FVRkRjRUlzUTBGQlF6dEJRVUZCTEdWQlFVRXNRMEZRYTBJc2NVSkJRWEZDTEdWQlUzSkNPMFZCUTJwQ0xHZENRVUZuUWl4RlFVRkZMR3RDUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETzBsQlEyaERMRTlCUVU4c1JVRkJSU3hyUWtGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRlZPMGxCUTNCRExFbEJRVWtzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwc1EwRkJRenRGUVVONlFpeERRVUZETEVOQlFVTTdSVUZEUml4cFFrRkJhVUlzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTlCUVU4c1EwRkRiRU1zYTBKQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNN1NVRkRaQ3hQUVVGUExFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWVHRKUVVOd1F5eEpRVUZKTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZUdEpRVU5xUXl4VlFVRlZMRVZCUVVVc2EwSkJRVk1zUTBGQlF6dEZRVU40UWl4RFFVRkRMRU5CUTBnc1EwRkJReXhEUVVGRExGVkJRVlU3UlVGRFdpeGpRVUZqTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZUdEZRVU42UXl4bFFVRmxMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlR0RlFVTTFReXh6UWtGQmMwSXNSVUZCUlN4clFrRkJVeXhEUVVGRExFbEJRVWs3UlVGRGRFTXNhMEpCUVd0Q0xFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWVHRGUVVNM1F5eDFRa0ZCZFVJc1JVRkJSU3hEUVVGRExFdEJRVXNzUlVGQlJTeFJRVUZSTEVWQlFVVXNZVUZCWVN4TFFVRkxPMGxCUXpORUxFbEJRVWtzVDBGQlR5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1UwRkJVeXhGUVVGRk8wMUJRM2hETEU5QlFVOHNTVUZCU1N4TFFVRkxMRU5CUTJJc0swSkJRVGhDTEZGQlFWTXNiVUpCUVd0Q0xHRkJRV01zYTBOQlFXbERMRTlCUVU4c1MwRkJTeXhEUVVOdVNDeFJRVUZSTEVOQlExSXNSVUZEU2l4RFFVRkRPMGxCUTBnc1EwRkJReXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExITkNRVUZ6UWl4RlFVRkZPMDFCUXpORUxFOUJRVThzU1VGQlNTeExRVUZMTEVOQlEySXNLMEpCUVRoQ0xGRkJRVk1zYlVKQlFXdENMR0ZCUVdNc01rTkJRekZGTEVOQlFVTTdTVUZEU0R0SlFVTkJMRTlCUVU4c1UwRkJVenRGUVVOc1FqdEJRVU5HTEVOQlFVTTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTTVRMGdzU1VGQlFTeHpRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVUU0UkN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEUVRsRUxFbEJRVUVzVjBGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVFVGQlFTeEhRVUZCTEhWQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRk5CUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVRTJSU3hUUVVGQkxIbENRVUZCTEZkQlFVRXNaVUZCUVN4UFFVRkJMR3REUVVGQkxHbENRVUZCTEU5QlFVRXNUMEZCUVN4UlFVRkJMR2RDUVVGQkxFOUJRVUVzVDBGQlFTeFpRVUZCTEhkQ1FVRkJMRmxCUVVFc1EwRkJRU3hYUVVGQkxGZEJRVUVzVjBGQlFTeEhRVUZCTEdkQ1FVRkJMRWRCUVVFc2FVSkJRVUVzUzBGQlFTeFhRVUZCTzBGQlFVRXNVMEZCUVN4M1FrRkJRU3hIUVVGQkxFVkJRVUVzVjBGQlFTeFRRVUZCTEZkQlFVRXNTVUZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzVjBGQlFTeEhRVUZCTEZGQlFVRXNSMEZCUVN4dlFrRkJRU3hIUVVGQkxIZENRVUZCTEVkQlFVRXNORUpCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUVzVlVGQlFTeExRVUZCTEVkQlFVRXNkMEpCUVVFc1EwRkJRU3hYUVVGQkxFOUJRVUVzUzBGQlFTeEpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3haUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1YwRkJRU3h4UWtGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRWxCUVVFc1RVRkJRU3hEUVVGQkxIZENRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1VVRkJRU3hIUVVGQkxHdENRVUZCTEUxQlFVRXNRMEZCUVN4VFFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4VFFVRkJMRWxCUVVFc1IwRkJRU3h4UWtGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4M1FrRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEdOQlFVRXNTVUZCUVN4TFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFMUJRVUVzUlVGQlFTeEhRVUZCTEVWQlFVRXNTVUZCUVN4WlFVRkJMRTFCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNVMEZCUVN4TlFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxFZEJRVUVzVFVGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzVFVGQlFTeFpRVUZCTEUxQlFVRTdRVUZCUVN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZGTjBVc1RVRkJUU3cwUWtGQk5FSXNSMEZCUnl4RFFVRkRPMFZCUVVVN1FVRkJXU3hEUVVGRExFdEJRVXM3UlVGRGVFUXNUVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJRU3c0UWtGQll5eEZRVUZETEVOQlFVTTdSVUZETVVJc1RVRkJUU3hEUVVGRExGRkJRVkVzUlVGQlJTeFhRVUZYTEVOQlFVTXNSMEZCUnl4SlFVRkJMR1ZCUVZFc1JVRkJReXhMUVVGTExFTkJRVU03UlVGRkwwTXNUVUZCVFN4alFVRmpMRWRCUVVjc1EwRkJRU3hMUVVGTk8wbEJRek5DTEZkQlFWY3NRMEZCUlN4VFFVRlRMRWxCUVVzc1EwRkJReXhUUVVGVExFTkJRVU03UlVGRGVFTXNRMEZCUXp0RlFVVkVMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTzBsQlEzWkNMRTlCUVU4c1NVRkJTVHRGUVVOaU8wVkJSVUVzVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhKUVVGQkxHVkJRVThzUlVGRE9VSXNWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRVVVzUjBGQlJ6dEpRVUZGTzBWQlFVMHNRMEZCUXl4TFFVTTNRaXhKUVVGQkxHOURRVUYzUWl4RlFVRkRPMGxCUTNaQ0xFTkJRVU03U1VGRFJDeGpRVUZqTEVWQlFVVXNSMEZCUnp0SlFVTnVRaXhsUVVGbExFVkJRVVU3UlVGRGJrSXNRMEZCUXl4RFFVTklMRU5CUTBZc1EwRkJRenRGUVVWRUxHOUNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRKUVVGTExGTkJRVk1zUlVGQlF6dEZRVUZuUXl4blFrRkROME1zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUTBVc1UwRkJVeXhGUVVGRExIZERRVUYzUXp0SlFVTnNSQ3hQUVVGUExFVkJRVVU3UlVGQlpTeG5Ra0ZGZUVJc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEdsQ1FVRlRMRU5CUVVNc1EwRkJReXhoUVVGaExFTkJRVlVzUTBGQlF5eGxRVU51UXl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3U1VGRFJTeFRRVUZUTEVWQlFVVXNTVUZCUVN4dFFrRkJWU3hGUVVGRExFdEJRVXNzUlVGQlJUdE5RVU16UWl4bFFVRmxMRVZCUVVVc1EwRkJReXhSUVVGUk8wMUJRekZDTEdGQlFXRXNSVUZCUlR0SlFVTnFRaXhEUVVGRExFTkJRVVU3U1VGRFNDeExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRMR2xDUVVGcFFqdEZRVUZGTEVOQlF6ZENMRU5CUTBFc1EwRkJReXhsUVVOS0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVTkZMRk5CUVZNc1JVRkJSU3hKUVVGQkxHMUNRVUZWTEVWQlEyNUNMR2RFUVVGblJDeEZRVU5vUkR0TlFVTkZMREJFUVVFd1JDeEZRVU40UkR0SlFVTktMRU5CUTBZN1JVRkJSU3huUWtGRlJpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1dVRkJTU3hEUVVGRExFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1JVRkJReXhIUVVGSkxFTkJRVU1zWlVGRGNFTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wbEJRVWtzVTBGQlV5eEZRVUZETzBWQlFYTkRMRWRCUTJwRUxHZENRVUZuUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRVVU3UlVGQlRTeERRVUZETEVWQlFVVXNSMEZCUnl4clFrRkRia01zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUTBVc1IwRkJSeXhGUVVGSExIZENRVUYxUWl4SFFVRkpMRVZCUVVVN1NVRkRia01zVTBGQlV5eEZRVUZETzBWQlFUSkRMR2RDUVVWeVJDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhUUVVGQkxFTkJRVUVzVDBGQlVUdEpRVU5RTEU5QlFVODdTVUZEVUN4UlFVRlJPMGxCUTFJc1JVRkJSU3hGUVVGSExIZENRVUYxUWl4SFFVRkpMRVZCUVVVN1NVRkRiRU1zVTBGQlV5eEZRVUZETzBWQlFUQkRMRU5CUTNKRUxFTkJRVU1zWlVGRFJpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1NVRkJUeXhQUVVGUExFVkJRVWNzZDBKQlFYVkNMRWRCUVVrN1JVRkJSU3hIUVVGRkxFdEJRV0VzUTBGRE0wUXNRMEZEVEN4RFFVTkRMRU5CUTBRc1EwRkRSaXhEUVVGRE8wRkJSVllzUTBGQlF6dEJRVVZFTERSQ1FVRTBRaXhEUVVGRExGTkJRVk1zUjBGQlJ6dEZRVU4yUXl4WFFVRlhMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eFBRVUZQTEVOQlF6VkNMR3RDUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETzBsQlEyUXNSMEZCUnl4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETzBWQlEzaENMRU5CUVVNc1EwRkRTRHRCUVVOR0xFTkJRVU03UVVGRlJDdzBRa0ZCTkVJc1EwRkJReXhaUVVGWkxFZEJRVWM3UlVGRE1VTXNWMEZCVnl4RlFVRkZPMEZCUTJZc1EwRkJRenRCUVVWRUxEUkNRVUUwUWl4RFFVRkRMRmRCUVZjc1IwRkJSeXc0UWtGQk9FSTdRVUZCUXl4SlFVRkJMRkZCUVVFc1owSkJSVE5FTEdOQlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc05FSkJRVFJDTEVOQlFVTTdRVUZCUVN4UFFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxGRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU14Um5aRUxFbEJRVUVzTmtKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQk1rUXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEwRXpSQ3hKUVVGQkxFMUJRVUVzUjBGQlFTeDFRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFOUJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGTkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFdEJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4WFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFUaERMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVRkJMRk5CUVVFc2VVSkJRVUVzVjBGQlFTeGxRVUZCTEU5QlFVRXNhME5CUVVFc2FVSkJRVUVzVDBGQlFTeFBRVUZCTEZGQlFVRXNaMEpCUVVFc1QwRkJRU3hQUVVGQkxGbEJRVUVzZDBKQlFVRXNXVUZCUVN4RFFVRkJMRmRCUVVFc1YwRkJRU3hYUVVGQkxFZEJRVUVzWjBKQlFVRXNSMEZCUVN4cFFrRkJRU3hMUVVGQkxGZEJRVUU3UVVGQlFTeFRRVUZCTEhkQ1FVRkJMRWRCUVVFc1JVRkJRU3hYUVVGQkxGTkJRVUVzVjBGQlFTeEpRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hYUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEc5Q1FVRkJMRWRCUVVFc2QwSkJRVUVzUjBGQlFTdzBRa0ZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRU3hWUVVGQkxFdEJRVUVzUjBGQlFTeDNRa0ZCUVN4RFFVRkJMRmRCUVVFc1QwRkJRU3hMUVVGQkxFbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRmxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEZOQlFVRXNUVUZCUVN4WFFVRkJMSEZDUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNTVUZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2EwSkJRVUVzVFVGQlFTeERRVUZCTEZOQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEZOQlFVRXNTVUZCUVN4SFFVRkJMSEZDUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzWTBGQlFTeEpRVUZCTEV0QlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1RVRkJRU3hGUVVGQkxFZEJRVUVzUlVGQlFTeEpRVUZCTEZsQlFVRXNUVUZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFRRVUZCTEUxQlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc1IwRkJRU3hOUVVGQkxFdEJRVUVzU1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hOUVVGQkxGbEJRVUVzVFVGQlFUdEJRVUZCTEZOQlFVRXNaMEpCUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzUlVGQlFTeExRVUZCTEVsQlFVRXNSMEZCUVN4SFFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQkxFOUJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNTVUZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEVsQlFVRXNTMEZCUVN4RlFVRkJMRXRCUVVFc1JVRkJRU3hWUVVGQkxGRkJRVUVzV1VGQlFTeFJRVUZCTEZGQlFVRXNiMEpCUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeExRVUZCTEZkQlFVRXNSMEZCUVR0QlFVRkJMRk5CUVVFc1pVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeEhRVUZCTEZsQlFVRXNRMEZCUVN4SFFVRkJMREpDUVVGQkxFZEJRVUVzWjBKQlFVRXNSMEZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeGhRVUZCTEV0QlFVRXNSVUZCUVN4SlFVRkJMR1ZCUVVFc1MwRkJRU3hwUWtGQlFTeExRVUZCTEd0Q1FVRkJMRXRCUVVFc1RVRkJRU3hKUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEUxQlFVRXNRMEZCUVN4WFFVRkJMRTlCUVVFc1NVRkJRU3hMUVVGQkxGTkJRVUVzVVVGQlFTeEhRVUZCTEVkQlFVRXNTVUZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hMUVVGQkxFVkJRVUVzU1VGQlFTd3lRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFZEJRVUVzV1VGQlFTeFRRVUZCTERSRVFVRkJMRWxCUVVFc1owSkJRVUVzVFVGQlFTeEhRVUZCTEUxQlFVRXNSVUZCUVN4TFFVRkJPMEZCUlM5Q0xFMUJRVTBzYTBKQlFXdENMRk5CUVZNc1owSkJRVk1zUTBGQlF6dEZRV2RDZUVRc1RVRkJUU3hEUVVGQkxFVkJRVWM3U1VGRFVDeE5RVUZOTzAxQlFVVXNhVUpCUVdsQ08wMUJRVVU3U1VGQllTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzN1NVRkRkRVFzVFVGQlRUdE5RVUZGTzBsQlFVVXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUE8wbEJSVEZDTEc5Q1FVTkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZOTEZOQlFWTXNSVUZCUXp0SlFVRnZReXhIUVVOcVJDeHBRa0ZCYVVJc1EwRkJReXhIUVVGSExFTkJRVVVzVDBGQlR5eHBRa0ZETjBJc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlEwVXNSMEZCUnl4RlFVRkZMRTlCUVU4c1EwRkJReXhOUVVGUE8wMUJRM0JDTEZOQlFWTXNSVUZCUXp0SlFVRnRReXhuUWtGRk4wTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFXOURMR2RDUVVOcVJDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhUUVVGQkxFTkJRVUVzVDBGQlVUdE5RVU5RTEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNc1QwRkJVVHROUVVOMFFpeEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRMRWxCUVVzN1RVRkRia0lzU1VGQlNTeEZRVUZGTEVWQlFVYzdUVUZEVkN4VFFVRlRMRVZCUVVNN1NVRkJiME1zUTBGREwwTXNRMEZCUXl4bFFVTkdMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEZkQlFVRXNRMEZCUVN4UFFVRlZPMDFCUTFRc1UwRkJVeXhGUVVGRExHOURRVUZ2UXp0TlFVTTVReXhMUVVGTExFVkJRVVVzVDBGQlR5eERRVUZETEZkQlFWY3NTVUZCU1N4UFFVRlBMRU5CUVVNc1RVRkJUenROUVVNM1F5eFZRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEU5QlFVODdTVUZCUlN4RFFVTnFSQ3hEUVVORkxFTkJRVU1zWlVGRFRpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhQUVVGQkxFTkJRVUVzVDBGQlRUdE5RVU5NTEZOQlFWTXNSVUZCUXl3clEwRkJLME03VFVGRGVrUXNUMEZCVHl4RlFVRkZMRU5CUVVFc1MwRkJUU3haUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUlR0TlFVTTFReXhKUVVGSkxFVkJRVU03U1VGQlRTeEhRVVZXTEVOQlFVTXNRMEZCUXl4WlFVRlpMRU5CUTFRc1EwRkRUQ3hEUVVOT0xFTkJRMGNzUTBGQlF6dEZRVVZZTzBWQlJVRXNjVUpCUVhGQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTzBsQlF6ZENMRWxCUVVrc1QwRkJUeXhEUVVGRExGZEJRVmNzUlVGQlJUdE5RVU4yUWl4UFFVRlBMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEcxQ1FVRnRRaXhEUVVGRE8wbEJRelZET3p0SlFVVkJPMGxCUTBFc1QwRkJUeXhKUVVGQkxHbERRVUV5UWl4RlFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU03UlVGRGNFUTdRVUZEUmp0QlFVRkRMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzYTBKQlFVRTdRVUZCUVN4bFFVRkJMRU5CTjBSdlFpeHJRa0ZCYTBJc2EwSkJRMlk3UlVGRGNFSXNRMEZCUXl4RlFVRkZMR3RDUVVGVExFTkJRVU03UVVGRFppeERRVUZETzBGQlFVRXNaVUZCUVN4RFFVaHJRaXhyUWtGQmEwSXNaVUZMYkVJN1JVRkRha0lzYVVKQlFXbENMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eFBRVUZQTEVOQlEyeERMR3RDUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETzBsQlEyUXNTVUZCU1N4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRUdEpRVU4wUWl4UFFVRlBMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTzBsQlEzcENMRTFCUVUwc1JVRkJSU3hyUWtGQlV5eERRVUZETzBWQlEzQkNMRU5CUVVNc1EwRkRTQ3hEUVVGRExFTkJRVU1zVlVGQlZUdEZRVU5hTEZsQlFWa3NSVUZCUlN4clFrRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF6dEJRVU12UWl4RFFVRkRPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRja0pJTEVsQlFVRXNiVUpCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZCTWtRc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTBFelJDeEpRVUZCTEUxQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZkQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hQUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNaVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkxRU3hKUVVGQkxHVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHRkJRVUVzUjBGQlFTeFBRVUZCTzBGQlNVRXNTVUZCUVN4bFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZMUVN4SlFVRkJMRmRCUVVFc1IwRkJRU3hQUVVGQk8wRkJRU3RFTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUdEJRVVZvUkN4VFFVRlRMSGRDUVVGM1FpeERRVUZETzBWQlFVVTdRVUZCVVN4RFFVRkRMRVZCUVVVN1JVRkROVVFzVFVGQlRTeERRVUZETEVkQlFVY3NTVUZCUVN3NFFrRkJZeXhGUVVGRExFTkJRVU03UlVGRk1VSXNUVUZCVFN4bFFVRmxMRWRCUVVjc1NVRkJRU3gxUWtGQlZ5eEZRVUZETERaQ1FVRnJRaXhEUVVGRE8wVkJRM1pFTEUxQlFVMHNNRUpCUVRCQ0xFZEJRVWNzU1VGQlFTeDFRa0ZCVnl4RlFVRkRMSGREUVVFMlFpeERRVUZETzBWQlF6ZEZMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NTVUZCUVN4MVFrRkJWeXhGUVVGRExHZERRVUZ4UWl4RFFVRkRPMFZCUlRkRUxFMUJRVTBzZVVKQlFYbENMRWRCUVVjc01FSkJRVEJDTEVOQlFVTXNaVUZCWlN4RFFVRkRPMFZCUXpkRkxFMUJRVTBzYzBOQlFYTkRMRWRCUVVjc1QwRkJUeXhEUVVOd1JDeDVRa0ZCZVVJc1NVRkJTU3g1UWtGQmVVSXNRMEZCUXl4clFrRkJhMElzUTBGRE0wVXNRMEZCUXp0RlFVTkVMRWxCUVVrc1RVRkJUVHRGUVVOV0xFbEJRVWtzYzBOQlFYTkRMRVZCUVVVN1NVRkRNVU1zVFVGQlRTeEhRVUZITEdkRFFVRm5RanRGUVVNelFpeERRVUZETEUxQlFVMHNTVUZCU1N4SlFVRkJMR1ZCUVU4c1JVRkJReXd3UWtGQk1FSXNSVUZCUlN4clFrRkJhMElzUTBGQlF5eEZRVUZGTzBsQlEyeEZMRTFCUVUwc1IwRkJSeXh0UkVGQmJVTTdSVUZET1VNc1EwRkJReXhOUVVGTk8wbEJRMHdzVFVGQlRTeEhRVUZITEc5RFFVRnZRanRGUVVNdlFqdEZRVVZCTEVsQlFVa3NZVUZCWVN4SFFVRkhMSFZDUVVGakxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVODdSVUZEYUVRc1NVRkJTU3hqUVVGakxFZEJRVWNzYlVKQlFVc3NRMEZCUXl4WFFVRlhPMFZCUTNSRExFbEJRVWtzWlVGQlpTeEhRVUZITEcxQ1FVRkxMRU5CUVVNc1pVRkJaVHRGUVVVelF5eEpRVUZKTEUxQlFVMHNTMEZCU3l4blEwRkJaMElzUlVGQlJUdEpRVU12UWl4alFVRmpMRWRCUVVjc2JVSkJRVXNzUTBGQlF5eGpRVUZqTzBsQlEzSkRMR0ZCUVdFc1IwRkJSeXgxUWtGQll5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBPMGxCUXpWRExHVkJRV1VzUjBGQlJ5eHRRa0ZCU3l4RFFVRkRMR05CUVdNN1JVRkRlRU1zUTBGQlF5eE5RVUZOTEVsQlFVa3NUVUZCVFN4TFFVRkxMRzFFUVVGdFF5eEZRVUZGTzBsQlEzcEVMR05CUVdNc1IwRkJSeXh0UWtGQlN5eERRVUZETEZsQlFWazdTVUZEYmtNc1pVRkJaU3hIUVVGSExEWkNRVUZsTEVOQlFVTXNhVUpCUVdsQ08wVkJRM0pFTzBWQlJVRXNUVUZCVFN4SlFVRkpMRWRCUTFJc1RVRkJUU3hMUVVGTExHZERRVUZuUWl4SFFVTjJRaXhEUVVGRExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1IwRkRjRUlzUTBGQlF5eERRVUZETEc5Q1FVRnZRaXhEUVVGRExFTkJRVU1zUTBGQlF6dEZRVU12UWl4TlFVRk5MRmRCUVZjc1IwRkRaaXhOUVVGTkxFdEJRVXNzWjBOQlFXZENMRWRCUTNaQ0xFTkJRVU1zUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhIUVVNeFFpeERRVUZETEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU03UlVGRGJrTXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVRXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hSUVVGQkxGRkJRMGNzVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRlZMR2RDUVVOeVFpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhYUVVGQkxFTkJRVUVzTWtKQlFUSkNPMGxCUXpGQ0xFMUJRVTBzUlVGQlJTeE5RVUZQTzBsQlEyWXNaVUZCWlN4RlFVRkZMR1ZCUVdkQ08wbEJRMnBETEVsQlFVa3NSVUZCUlN4WFFVRlpPMGxCUTJ4Q0xFVkJRVVVzUlVGQlF5eFJRVUZSTzBsQlExZ3NUMEZCVHl4RlFVRkZPMFZCUVZFc1EwRkRiRUlzUTBGQlF5eG5Ra0ZGUml4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3U1VGQlVTeFRRVUZUTEVWQlFVTXNORUpCUVRSQ08wbEJRVU1zVDBGQlR5eEZRVUZGTzBWQlFWRXNaMEpCUXpsRUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR1ZCUVVFc1EwRkJRU3hQUVVGak8wbEJRVU1zUzBGQlN5eEZRVUZGTEdOQlFXVTdTVUZCUXl4SlFVRkpMRVZCUVVVN1JVRkJZeXhEUVVGRkxFTkJRVU1zWlVGRE9VUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wbEJRVXNzVTBGQlV5eEZRVUZETzBWQlFXdERMRWRCUVVVc1NVRkJWU3hEUVVOMlJDeERRVVZXTEVOQlFVTTdRVUZGVUR0QlFVVkJMSGRDUVVGM1FpeERRVUZETEZsQlFWa3NSMEZCUnp0RlFVTjBReXhQUVVGUExFVkJRVVU3UVVGRFdDeERRVUZETzBGQlJVUXNkMEpCUVhkQ0xFTkJRVU1zVTBGQlV5eEhRVUZITzBWQlEyNURMRTlCUVU4c1JVRkJSU3hyUWtGQlV5eERRVUZETzBGQlEzSkNMRU5CUVVNN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVONlJrUXNTVUZCUVN4NVFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVRjFSQ3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRRWFpFTEVsQlFVRXNUVUZCUVN4SFFVRkJMSFZDUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNUMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFOUJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJlVVVzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeDVRa0ZCUVN4WFFVRkJMR1ZCUVVFc1QwRkJRU3hyUTBGQlFTeHBRa0ZCUVN4UFFVRkJMRTlCUVVFc1VVRkJRU3huUWtGQlFTeFBRVUZCTEU5QlFVRXNXVUZCUVN4M1FrRkJRU3haUVVGQkxFTkJRVUVzVjBGQlFTeFhRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEV0QlFVRXNWMEZCUVR0QlFVRkJMRk5CUVVFc2QwSkJRVUVzUjBGQlFTeEZRVUZCTEZkQlFVRXNVMEZCUVN4WFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEZkQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2IwSkJRVUVzUjBGQlFTeDNRa0ZCUVN4SFFVRkJMRFJDUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTEZWQlFVRXNTMEZCUVN4SFFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzV1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxGZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHJRa0ZCUVN4TlFVRkJMRU5CUVVFc1UwRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1UwRkJRU3hKUVVGQkxFZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4alFVRkJMRWxCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRWxCUVVFc1dVRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEUxQlFVRXNXVUZCUVN4TlFVRkJPMEZCUVVFc1UwRkJRU3huUWtGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRXRCUVVFc1NVRkJRU3hIUVVGQkxFZEJRVUVzWTBGQlFTeERRVUZCTEVkQlFVRXNUMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1NVRkJRU3hMUVVGQkxFVkJRVUVzUzBGQlFTeEZRVUZCTEZWQlFVRXNVVUZCUVN4WlFVRkJMRkZCUVVFc1VVRkJRU3h2UWtGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRXRCUVVFc1YwRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeGxRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMRWRCUVVFc1dVRkJRU3hEUVVGQkxFZEJRVUVzTWtKQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMR0ZCUVVFc1MwRkJRU3hGUVVGQkxFbEJRVUVzWlVGQlFTeExRVUZCTEdsQ1FVRkJMRXRCUVVFc2EwSkJRVUVzUzBGQlFTeE5RVUZCTEVsQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1RVRkJRU3hEUVVGQkxGZEJRVUVzVDBGQlFTeEpRVUZCTEV0QlFVRXNVMEZCUVN4UlFVRkJMRWRCUVVFc1IwRkJRU3hKUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZCTEV0QlFVRXNSVUZCUVN4SlFVRkJMREpDUVVGQkxFZEJRVUVzYzBKQlFVRXNSMEZCUVN4WlFVRkJMRk5CUVVFc05FUkJRVUVzU1VGQlFTeG5Ra0ZCUVN4TlFVRkJMRWRCUVVFc1RVRkJRU3hGUVVGQkxFdEJRVUU3UVVGRk1VUXNUVUZCVFN4WFFVRlhMRk5CUVZNc2IwSkJRV0VzUTBGQlF6dEZRVUZCTEZsQlFVRXNSMEZCUVN4SlFVRkJPMGxCUVVFc1UwRkJRU3hKUVVGQk8wbEJRVUVzWlVGQlFTeG5Ra0ZqTjBNN1RVRkRUaXhyUWtGQmEwSXNSVUZCUlR0SlFVTjBRaXhEUVVGRE8wVkJRVUU3UlVGRlJDeGhRVUZoTEVOQlFVRXNSVUZCUnp0SlFVTmtMRTFCUVUwN1RVRkJSVHRKUVVGRkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHp0SlFVTXhRaXhOUVVGTk8wMUJRVVU3U1VGQmJVSXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTE8wbEJRM3BETEUxQlFVMHNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenRKUVVWcVJDeE5RVUZOTEZsQlFWa3NSMEZCUnl4RFFVRkRMR3RDUVVGclFpeEpRVUZKTEZkQlFWY3NRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJRenRKUVVWc1JTeHZRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlN5eFRRVUZUTEVWQlFVTTdTVUZCYzBRc1owSkJRMjVGTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHVkJRVUVzUTBGQlFTeFBRVUZqTzAxQlEySXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRVVU3VFVGRGNFSXNTMEZCU3l4RlFVRkZMRmxCUVZrc1IwRkJSeXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhYUVVGWk8wMUJRelZFTEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExHVkJRV2RDTzAxQlEzSkRMR1ZCUVdVc1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzBsQlFXZENMRU5CUXpkRExFTkJRVU1zUlVGRFJDeFpRVUZaTEdsQ1FVTllMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEU5QlFVRXNRMEZCUVN4UFFVRk5PMDFCUTB3c1NVRkJTU3hGUVVGRExFMUJRVTA3VFVGRFdDeFRRVUZUTEVWQlFVTXNhVVZCUVdsRk8wMUJRek5GTEU5QlFVOHNSVUZCUlN4RFFVRkJMRXRCUVUwc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dFJRVUZGTEd0Q1FVRnJRaXhGUVVGRk8wMUJRVXNzUTBGQlF6dEpRVUZGTEVkQlJURkVMRU5CUVVNc1EwRkJReXhWUVVGVkxFTkJRMUFzUTBGRlVDeERRVUZETzBWQlJWWTdSVUZGUVN4cFFrRkJhVUlzUTBGQlFTeEZRVUZITzBsQlEyeENMRTFCUVUwc2QwSkJRWGRDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkRlRU1zYVVKQlFXbENMRU5CUVVNc1EwRkJReXhEUVVOdVFpeE5RVUZOTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1QwRkJUeXhMUVVGTE8wMUJRM2hDTEUxQlFVMHNWMEZCVnl4SFFVRkhMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1RVRkRha1FzVDBGQlR6dFJRVU5NTEVkQlFVY3NSMEZCUnp0UlFVTk9MRU5CUVVNc1YwRkJWeXhIUVVGSExFTkJRVU1zU1VGQlNTeEhRVUZITEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFVkJRVVVzVDBGQlR6dE5RVU4wUkN4RFFVRkRPMGxCUTBnc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlJWSXNUVUZCVFN4UFFVRlBMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlJUVkVMRTFCUVUwc2JVSkJRVzFDTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJSU3hOUVVGTkxFbEJRVXM3VFVGRGJFUXNUMEZCVHl4RFFVTk1MRTFCUVUwc1JVRkRUaXhKUVVGQkxHTkJRVTBzUlVGQlF5eDNRa0ZCZDBJc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJ5eFBRVUZQTEVsQlFVczdVVUZEY0VRc1QwRkJUeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMDFCUTI1RExFTkJRVU1zUTBGQlF5eERRVU5JTzBsQlEwZ3NRMEZCUXl4RFFVRkRPMGxCUlVZc1QwRkJUeXh0UWtGQmJVSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFMUJRVTBzUlVGQlJTeFZRVUZWTEVOQlFVTXNhMEpCUTJ4RUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR1ZCUVVFc1EwRkJRU3hQUVVGak8wMUJRMklzUjBGQlJ5eEZRVUZITEVkQlFVVXNUVUZCVHl4blFrRkJaMEk3VFVGREwwSXNTMEZCU3l4RlFVRkZMRTFCUVU4N1RVRkRaQ3hMUVVGTExFVkJRVVVzVlVGQlZ6dE5RVU5zUWl4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eGxRVUZuUWp0TlFVTnlReXhsUVVGbExFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0SlFVRm5RaXhEUVVNM1F5eERRVU5HTEVOQlFVTTdSVUZEU2p0RlFVVkJMR2RDUVVGblFpeERRVUZCTEVWQlFVYzdTVUZEYWtJc1RVRkJUU3hWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZETzBsQlJXNUVMRzlDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR1ZCUVVFc1EwRkJRU3hQUVVGak8wMUJRMklzUzBGQlN5eEZRVUZGTEZWQlFWYzdUVUZEYkVJc1VVRkJVU3hGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNaVUZCWjBJN1RVRkRja01zWlVGQlpTeEZRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1NVRkJaMElzUTBGRE4wTXNRMEZCUXp0RlFVVk9PMFZCUlVFc1RVRkJUU3hEUVVGQkxFVkJRVWM3U1VGRFVDeE5RVUZOTzAxQlEwb3NVVUZCVVR0TlFVTlNMR2RDUVVGblFqdE5RVU5vUWl4cFFrRkJhVUk3VFVGRGFrSTdTVUZEUml4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXM3U1VGRlpDeHZRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlN5eFRRVUZUTEVWQlFVTTdTVUZCYzBNc1IwRkRiRVFzVVVGQlVTeEpRVUZKTEVsQlFVa3NSVUZEYUVJc1owSkJRV2RDTEVkQlFVY3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeEZRVU01UXl4cFFrRkJhVUlzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF5eEhRVUZITEVsQlFVa3NSVUZEYmtRc2JVSkJRVzFDTEVkQlFVY3NTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTXNSMEZCUnl4SlFVTTVReXhEUVVGRE8wVkJSVlk3UVVGRFJqdEJRVUZETEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc1YwRkJRVHRCUVVGQkxHVkJRVUVzUTBFMVIyOUNMRmRCUVZjc1pVRkRXRHRGUVVOcVFpeHBRa0ZCYVVJc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVazdSVUZEYWtNc1owSkJRV2RDTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSk8wVkJRMmhETEcxQ1FVRnRRaXhGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1R0RlFVTnVReXhsUVVGbExFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpPMFZCUXk5Q0xGRkJRVkVzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrN1JVRkRlRUlzWlVGQlpTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNN1FVRkROMElzUTBGQlF6dEJRVUZCTEdWQlFVRXNRMEZTYTBJc1YwRkJWeXhyUWtGVlVqdEZRVU53UWl4RFFVRkRMRVZCUVVVc2EwSkJRVk1zUTBGQlF6dEJRVU5tTEVOQlFVTTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnNRa2dzU1VGQlFTeFpRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRVzFFTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5CYmtRc1NVRkJRU3hOUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hYUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hMUVVGQkxFZEJRVUVzVDBGQlFUdEJRVUU0UkN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZGT1VRc1UwRkJVeXhqUVVGakxFTkJRVU1zVVVGQlVTeEZRVUZGTEZGQlFWRXNSVUZCUlR0RlFVTXhReXhQUVVGUExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhMUVVGTExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRCUVVNeFJUdEJRVVZsTEZOQlFWTXNZMEZCWXl4RFFVRkRPMFZCUTNKRExFdEJRVXM3UlVGRFRDeExRVUZMTzBWQlEwd3NVVUZCVVR0RlFVTlNPMEZCUTBZc1EwRkJReXhGUVVGRk8wVkJRMFFzU1VGQlNTeERRVUZETEV0QlFVc3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVU3U1VGRE0wSXNUMEZCVHl4SlFVRkpPMFZCUTJJN1JVRkZRU3h2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1NVRkRSU3hUUVVGVExFVkJRVU1zZFVOQlFYVkRPMGxCUTJwRUxHVkJRVms3UlVGQmFVSXNSMEZGTlVJc1MwRkJTeXhwUWtGRFNpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1NVRkJTeXhUUVVGVExFVkJRVU03UlVGQk5rTXNSMEZEZWtRc1MwRkRSU3hEUVVOT0xFVkJRMEVzUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUVVVc1QwRkJUenRKUVVGRk8wVkJRVXNzUTBGQlF5eHJRa0ZETTBJc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzBsQlEwVXNSMEZCUnl4RlFVRkZMRTlCUVZFN1NVRkRZaXhQUVVGUExFVkJRVVVzUTBGQlFTeExRVUZOTEZGQlFWRXNRMEZCUXl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRk8wbEJRM1pETEZOQlFWTXNSVUZCUlN4SlFVRkJMRzFDUVVGVkxFVkJRVU03VFVGRGNFSXNORU5CUVRSRExFVkJRVVVzUTBGQlF5eGpRVUZqTEVOQlF6TkVMRTlCUVU4c1JVRkRVQ3hsUVVOR0xFTkJRVU03VFVGRFJDeHpSRUZCYzBRc1JVRkRjRVFzWTBGQll5eERRVUZETEU5QlFVOHNSVUZCUlN4bFFVRmxPMGxCUXpORExFTkJRVU03UlVGQlJTeG5Ra0ZGU0N4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eFZRVUZCTEVOQlFVRXNUMEZCVXp0SlFVRkRMRTlCUVU4c1JVRkJSU3hQUVVGUk8wbEJRVU1zVVVGQlVTeEZRVUZGTzBWQlFVY3NRMEZCUlN4RFFVRkRMR1ZCUXpkRExFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVTkZMRk5CUVZNc1JVRkJReXh4UkVGQmNVUTdTVUZETDBRc1pVRkJXVHRGUVVGWExHZENRVVYyUWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3U1VGQlN5eFRRVUZUTEVWQlFVTTdSVUZCYlVRc1IwRkRMMFFzU1VGQlNTeEpRVUZKTEVsQlFVRXNaVUZCVXl4RlFVRkRMRTlCUVU4c1EwRkRka0lzUTBGQlF5eEZRVU5NTEVsQlFVa3NhVUpCUTBnc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzBsQlFVc3NVMEZCVXl4RlFVRkRPMFZCUVhORUxFZEJRMnhGTEVsQlFVRXNaVUZCVXl4RlFVRkRMRTlCUVU4c1EwRkRaaXhEUVVWS0xFTkJRMFlzUTBGRFRpeERRVU5GTEVOQlFVTTdRVUZGVmp0QlFVVkJMR05CUVdNc1EwRkJReXhUUVVGVExFZEJRVWM3UlVGRGVrSXNTMEZCU3l4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRUdEZRVU4yUWl4TFFVRkxMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eFBRVUZQTEVOQlEzUkNMR3RDUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETzBsQlEyUXNUMEZCVHl4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEZWQlFWVTdTVUZEY0VNc1NVRkJTU3hGUVVGRkxHdENRVUZUTEVOQlFVTTdSVUZEYkVJc1EwRkJReXhEUVVOSUxFTkJRVU03UlVGRFJDeFJRVUZSTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZUdEZRVU51UXl4bFFVRmxMRVZCUVVVc2EwSkJRVk1zUTBGQlF6dEJRVU0zUWl4RFFVRkRPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNwRlJDeEpRVUZCTEUxQlFVRXNSMEZCUVN4MVFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdWQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hQUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hUUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hwUWtGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRk5CUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTlCUVVFc1IwRkJRU3hQUVVGQk8wRkJRWGRGTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUdEJRVUZCTEZOQlFVRXNlVUpCUVVFc1YwRkJRU3hsUVVGQkxFOUJRVUVzYTBOQlFVRXNhVUpCUVVFc1QwRkJRU3hQUVVGQkxGRkJRVUVzWjBKQlFVRXNUMEZCUVN4UFFVRkJMRmxCUVVFc2QwSkJRVUVzV1VGQlFTeERRVUZCTEZkQlFVRXNWMEZCUVN4WFFVRkJMRWRCUVVFc1owSkJRVUVzUjBGQlFTeHBRa0ZCUVN4TFFVRkJMRmRCUVVFN1FVRkJRU3hUUVVGQkxIZENRVUZCTEVkQlFVRXNSVUZCUVN4WFFVRkJMRk5CUVVFc1YwRkJRU3hKUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4WFFVRkJMRWRCUVVFc1VVRkJRU3hIUVVGQkxHOUNRVUZCTEVkQlFVRXNkMEpCUVVFc1IwRkJRU3cwUWtGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVN4VlFVRkJMRXRCUVVFc1IwRkJRU3gzUWtGQlFTeERRVUZCTEZkQlFVRXNUMEZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEZsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGTkJRVUVzVFVGQlFTeFhRVUZCTEhGQ1FVRkJMRWRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzU1VGQlFTeE5RVUZCTEVOQlFVRXNkMEpCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeFJRVUZCTEVkQlFVRXNhMEpCUVVFc1RVRkJRU3hEUVVGQkxGTkJRVUVzUTBGQlFTeGpRVUZCTEVOQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxGTkJRVUVzU1VGQlFTeEhRVUZCTEhGQ1FVRkJMRWRCUVVFc1RVRkJRU3hEUVVGQkxIZENRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1kwRkJRU3hKUVVGQkxFdEJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNTVUZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVOQlFVRXNUVUZCUVN4RlFVRkJMRWRCUVVFc1JVRkJRU3hKUVVGQkxGbEJRVUVzVFVGQlFTeERRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNSMEZCUVN4TlFVRkJMRXRCUVVFc1NVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4TlFVRkJMRmxCUVVFc1RVRkJRVHRCUVVWNlJDeFRRVUZUTEdOQlFXTXNRMEZCUXp0RlFVTnlReXhSUVVGUkxFZEJRVWNzUzBGQlN6dEZRVU5vUWl4WlFVRlpMRWRCUVVjc1MwRkJTenRGUVVOd1FpeFJRVUZSTzBWQlExSTdRVUZEUml4RFFVRkRMRVZCUVVVN1JVRkRSQ3hOUVVGTkxFTkJRVU1zWlVGQlpTeEZRVUZGTEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzU1VGQlFTeGxRVUZSTEVWQlFVTXNSVUZCUlN4RFFVRkRPMFZCUXpGRUxFMUJRVTBzUTBGQlF5eHZRa0ZCYjBJc1JVRkJSU3gxUWtGQmRVSXNRMEZCUXl4SFFVRkhMRWxCUVVFc1pVRkJVU3hGUVVGRExFVkJRVVVzUTBGQlF6dEZRVU53UlN4TlFVRk5MRU5CUVVNc1VVRkJVU3hGUVVGRkxGZEJRVmNzUTBGQlF5eEhRVUZITEVsQlFVRXNaVUZCVVN4RlFVRkRMRVZCUVVVc1EwRkJRenRGUVVNMVF5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RlFVRkZMR2RDUVVGblFpeERRVUZETEVkQlFVY3NTVUZCUVN4bFFVRlJMRVZCUVVNc1JVRkJSU3hEUVVGRE8wVkJRM1JFTEUxQlFVMHNRMEZCUXl4VlFVRlZMRVZCUVVVc1lVRkJZU3hEUVVGRExFZEJRVWNzU1VGQlFTeGxRVUZSTEVWQlFVTXNSVUZCUlN4RFFVRkRPMFZCUTJoRUxFMUJRVTBzUTBGQlF5eFpRVUZaTEVWQlFVVXNaVUZCWlN4RFFVRkRMRWRCUVVjc1NVRkJRU3hsUVVGUkxFVkJRVU1zUzBGQlN5eERRVUZETzBWQlJYWkVMRTFCUVUwc1EwRkJReXhIUVVGSExFbEJRVUVzT0VKQlFXTXNSVUZCUXl4RFFVRkRPMFZCUlRGQ0xFMUJRVTBzWjBKQlFXZENMRWRCUVVjc1NVRkJRU3hyUWtGQlZ5eEZRVU5xUXl4WFFVRlhMRWxCUVVzN1NVRkRaaXhKUVVGSkxIVkNRVUYxUWl4SFFVRkhMRVZCUVVVN1NVRkRhRU1zU1VGQlNTeG5Ra0ZCWjBJc1IwRkJSeXhGUVVGRk8wbEJSWHBDTEVsQlFVa3NWMEZCVnl4SlFVRkpMRmRCUVZjc1EwRkJReXhOUVVGTkxFZEJRVWNzTWtKQlFXMUNMRVZCUVVVN1RVRkRNMFFzWjBKQlFXZENMRWRCUVVjc1EwRkJReXhEUVVGRExIVkNRVUYxUWl4RFFVRkRPMGxCUXk5RE8wbEJSVUVzU1VGQlNTeGxRVUZsTEVsQlFVa3NWMEZCVnl4TFFVRkxMR1ZCUVdVc1JVRkJSVHROUVVOMFJDeDFRa0ZCZFVJc1IwRkJSeXhEUVVGRExFTkJRVU1zYjBKQlFXOUNMRU5CUVVNN1NVRkRia1E3U1VGRlFTeFhRVUZYTEVOQlFVTXNWMEZCVnl4RFFVRkRPMGxCUTNoQ0xHZENRVUZuUWl4RFFVRkRMR2RDUVVGblFpeERRVUZETzBsQlEyeERMSFZDUVVGMVFpeERRVUZETEhWQ1FVRjFRaXhEUVVGRE8wVkJRMnhFTEVOQlFVTXNSVUZEUkN4RFFVRkRMR1ZCUVdVc1JVRkJSU3hEUVVGRExFTkJRM0pDTEVOQlFVTTdSVUZGUkN4TlFVRk5MSFZDUVVGMVFpeEhRVUZITEVsQlFVRXNhMEpCUVZjc1JVRkRlRU1zYTBKQlFXdENMRWxCUVVzN1NVRkRkRUlzU1VGQlNTeDFRa0ZCZFVJc1IwRkJSeXhGUVVGRk8wbEJSV2hETEVsQlFVa3NVVUZCVVN4TFFVRkxMR3RDUVVGclFpeEZRVUZGTzAxQlEyNURMSFZDUVVGMVFpeEhRVUZITEVOQlFVTXNRMEZCUXl4dlFrRkJiMElzUTBGQlF6dEpRVU51UkR0SlFVVkJMR3RDUVVGclFpeERRVUZETEd0Q1FVRnJRaXhEUVVGRE8wbEJRM1JETEhWQ1FVRjFRaXhEUVVGRExIVkNRVUYxUWl4RFFVRkRPMFZCUTJ4RUxFTkJRVU1zUlVGRFJDeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRU5CUTJRc1EwRkJRenRGUVVWRUxFMUJRVTBzVDBGQlR5eEhRVU5ZTEVOQlFVTXNVVUZCVVN4SlFVTlVMRkZCUVZFc1NVRkRVaXhsUVVGbExFbEJRMllzVVVGQlVTeExRVUZMTEdWQlFXVXNTVUZETlVJc1ZVRkJWU3hMUVVOVUxFTkJRVU1zV1VGQldTeEpRVUZKTEZsQlFWa3NRMEZCUXl4SlFVTXZRaXhEUVVGRExHRkJRV0VzU1VGRFpDeERRVUZETEc5Q1FVRnZRanRGUVVWMlFpeE5RVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkJMR3RDUVVGWExFVkJRekZDTEUxQlFVOHNTMEZCU3l4SlFVRkxPMGxCUTJZc1MwRkJTeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETzBsQlJYUkNMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVU3VFVGRFdqdEpRVU5HTzBsQlJVRXNUVUZCVFN4UlFVRlJMRU5CUVVNc1VVRkJVU3hGUVVGRkxGVkJRVlVzUTBGQlF6dEZRVU4wUXl4RFFVRkRMRVZCUTBRc1EwRkJReXhQUVVGUExFVkJRVVVzVVVGQlVTeEZRVUZGTEZGQlFWRXNSVUZCUlN4VlFVRlZMRU5CUXpGRExFTkJRVU03UlVGRlJDeE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExFbEJRVUVzYTBKQlFWY3NSVUZCUXl4TlFVRk5PMGxCUTNwRExHVkJRV1VzUTBGQlJTeHRRa0ZCYlVJc1NVRkJTeXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRPMFZCUTJoRkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTTdSVUZGVGl4TlFVRk5MRlZCUVZVc1IwRkJSeXhEUVVGRExFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1kwRkRka01zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUTBVc1UwRkJVeXhGUVVGRExEaENRVUU0UWp0SlFVTjRReXhIUVVGSExFVkJRVU1zTmtKQlFUWkNPMGxCUTJwRExFbEJRVWtzUlVGQlF5eG5RMEZCWjBNN1NVRkRja01zVFVGQlRTeEZRVUZETEZGQlFWRTdTVUZEWml4SFFVRkhMRVZCUVVNN1JVRkJjVUlzUjBGRmVFSXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkRWQ3hEUVVGRExFTkJRMHdzUTBGQlF6dEZRVVZHTEc5Q1FVTkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdEpRVUZOTEZOQlFWTXNSVUZCUXl4M1FrRkJkMEk3U1VGQlF5eFJRVUZSTEVWQlFVVTdSVUZCVXl4blFrRkRNVVFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1UwRkJRU3hEUVVGQkxFOUJRVkU3U1VGQlF5eFJRVUZSTEVWQlFVVXNZVUZCWXp0SlFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRExFTkJRVU1zYzBKQlFYTkNPMFZCUVVVc1EwRkJSU3hEUVVGRExHVkJRM3BGTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRKUVVGTExGTkJRVk1zUlVGQlF6dEZRVUZ0UXl4blFrRkRhRVFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1ZVRkJRU3hEUVVGQkxFOUJRVk03U1VGRFVpeGxRVUZaTEhWQ1FVRjFRanRKUVVOdVF5eEZRVUZGTEVWQlFVTXNWVUZCVlR0SlFVTmlMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVU1zWVVGQllTeERRVUZGTzBsQlEzaENMRWxCUVVrc1JVRkJReXhWUVVGVk8wbEJRMllzUzBGQlN5eEZRVUZGTEZGQlFWTTdTVUZEYUVJc1VVRkJVU3hGUVVGSExFdEJRVXNzU1VGQlN5eG5Ra0ZCWjBJc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUlR0SlFVTXhSQ3hMUVVGTExFVkJRVVVzWVVGQll6dEpRVU55UWl4WlFVRlpMRVZCUVVNc1kwRkJZenRKUVVNelFpeE5RVUZOTEVWQlFVTXNVVUZCVVR0SlFVTm1MRlZCUVZVN1JVRkJRU3hEUVVOWUxFTkJRVU1zWlVGRFJpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhWUVVGQkxFTkJRVUVzVDBGQlV6dEpRVU5TTEdWQlFWa3NLMEpCUVN0Q08wbEJRek5ETEVWQlFVVXNSVUZCUXl4clFrRkJhMEk3U1VGRGNrSXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJReXhwUWtGQmFVSXNRMEZCUlR0SlFVTTFRaXhKUVVGSkxFVkJRVU1zVlVGQlZUdEpRVU5tTEV0QlFVc3NSVUZCUlN4bFFVRm5RanRKUVVOMlFpeFJRVUZSTEVWQlFVY3NTMEZCU3l4SlFVRkxMSFZDUVVGMVFpeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRk8wbEJRMnBGTEV0QlFVc3NSVUZCUlN4dlFrRkJjVUk3U1VGRE5VSXNXVUZCV1N4RlFVRkRMR05CUVdNN1NVRkRNMElzVFVGQlRTeEZRVUZETEZGQlFWRTdTVUZEWml4VlFVRlZPMFZCUVVFc1EwRkRXQ3hEUVVORkxFTkJRVU1zUlVGRFRDeFpRVUZaTEdkQ1FVTllMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdEpRVUZMTEZOQlFWTXNSVUZCUXp0RlFVRjVRaXhuUWtGRGRFTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVTBGQlFTeERRVUZCTEU5QlFWRTdTVUZEVUN4RlFVRkZMRVZCUVVNc2EwTkJRV3RETzBsQlEzSkRMRlZCUVZVc1JVRkJReXhyUTBGQmEwTTdTVUZETjBNc1QwRkJUeXhGUVVGRkxGbEJRV0U3U1VGRGRFSXNUMEZCVHl4RlFVRkZPMFZCUVdsQ0xFTkJRek5DTEVOQlFVTXNaVUZEUml4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3U1VGRFJTeFRRVUZUTEVWQlFVTXNLMEpCUVN0Q08wbEJRM3BETEU5QlFVOHNSVUZCUXp0RlFVRnJReXhuUWtGRk1VTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4SlFVRkpPMGxCUVVNc1JVRkJSU3hGUVVGRE8wVkJRVTBzUjBGQlJTeFZRVUZwUWl4RFFVTTNRaXhEUVVOS0xFTkJRVU1zUjBGRFNpeEpRVUZKTEdWQlExSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVDBGQlFTeERRVUZCTEU5QlFVMDdTVUZEVEN4bFFVRlpMR2REUVVGblF6dEpRVU0xUXl4VFFVRlRMRVZCUVVNc2FVTkJRV2xETzBsQlF6TkRMRWxCUVVrc1JVRkJReXhUUVVGVE8wbEJRMlFzVFVGQlRUdEpRVU5PTEZGQlFWRXNSVUZCUlN4RFFVRkRPMFZCUVZFc1IwRkZiRUlzVlVGRFN5eERRVU5LTEVOQlFVTTdRVUZGV0R0QlFVVkJMR05CUVdNc1EwRkJReXhUUVVGVExFZEJRVWM3UlVGRGVrSXNVVUZCVVN4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNUdEZRVU40UWl4WlFVRlpMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTzBWQlF6VkNMRkZCUVZFc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZPMFZCUTI1RExGVkJRVlVzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwc1EwRkJRenRCUVVNdlFpeERRVUZET3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEYWt0RUxFbEJRVUVzWlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVFMlF5eFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFFUZERMRWxCUVVFc1RVRkJRU3hIUVVGQkxIVkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1YwRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdkQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4TFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVTBGQlFTeEhRVUZCTEU5QlFVRTdRVUZKUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVbEJMRWxCUVVFc1QwRkJRU3hIUVVGQkxFOUJRVUU3UVVGQmQwVXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlFVRXNVMEZCUVN4NVFrRkJRU3hYUVVGQkxHVkJRVUVzVDBGQlFTeHJRMEZCUVN4cFFrRkJRU3hQUVVGQkxFOUJRVUVzVVVGQlFTeG5Ra0ZCUVN4UFFVRkJMRTlCUVVFc1dVRkJRU3gzUWtGQlFTeFpRVUZCTEVOQlFVRXNWMEZCUVN4WFFVRkJMRmRCUVVFc1IwRkJRU3huUWtGQlFTeEhRVUZCTEdsQ1FVRkJMRXRCUVVFc1YwRkJRVHRCUVVGQkxGTkJRVUVzZDBKQlFVRXNSMEZCUVN4RlFVRkJMRmRCUVVFc1UwRkJRU3hYUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRmRCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYjBKQlFVRXNSMEZCUVN4M1FrRkJRU3hIUVVGQkxEUkNRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJMRlZCUVVFc1MwRkJRU3hIUVVGQkxIZENRVUZCTEVOQlFVRXNWMEZCUVN4UFFVRkJMRXRCUVVFc1NVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNXVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEZkQlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeEpRVUZCTEUxQlFVRXNRMEZCUVN4M1FrRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEZGQlFVRXNSMEZCUVN4clFrRkJRU3hOUVVGQkxFTkJRVUVzVTBGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzVTBGQlFTeEpRVUZCTEVkQlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hqUVVGQkxFbEJRVUVzUzBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4TlFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxFbEJRVUVzV1VGQlFTeE5RVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGTkJRVUVzVFVGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4SFFVRkJMRTFCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRTFCUVVFc1dVRkJRU3hOUVVGQk8wRkJSWGhGTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEWlN4VFFVRlRMR0ZCUVdFc1EwRkJRenRGUVVOd1F5eFJRVUZSTzBWQlExSXNaMEpCUVdkQ08wVkJRMmhDTEZGQlFWRTdSVUZEVWp0QlFVTkdMRU5CUVVNc1JVRkJSVHRGUVVORUxFMUJRVTBzUTBGQlF5eEhRVUZITEVsQlFVRXNhVUpCUVZVc1JVRkJReXhwUWtGQlZ5eERRVUZETzBWQlJXcERMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NTVUZCUVN4MVFrRkJWeXhGUVVGRExESkNRVUZwUWl4RFFVRkRPMFZCUTNoRUxFMUJRVTBzYVVKQlFXbENMRWRCUVVjc1NVRkJRU3gxUWtGQlZ5eEZRVUZETERaQ1FVRnJRaXhEUVVGRE8wVkJRM3BFTEUxQlFVMHNZMEZCWXl4SFFVRkhMRWxCUVVFc2RVSkJRVmNzUlVGQlF5d3lRa0ZCYVVJc1EwRkJRenRGUVVOeVJDeE5RVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkJMSFZDUVVGWExFVkJRVU1zTkVKQlFXbENMRU5CUVVNN1JVRkRMME1zVFVGQlRTeGhRVUZoTEVkQlFVY3NRMEZCUXl4UlFVRlJPMFZCUXk5Q0xFMUJRVTBzWVVGQllTeEhRVUZITEdsQ1FVRnBRaXhKUVVGSkxIbENRVUZwUWl4RFFVRkRMRWRCUVVjN1JVRkRhRVVzVFVGQlRTeGxRVUZsTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdSVUZGZGtRc1RVRkJUU3hEUVVGRExGTkJRVk1zUlVGQlJTeFZRVUZWTEVOQlFVTXNSMEZCUnl4SlFVRkJMR1ZCUVZFc1JVRkJReXhMUVVGTExFTkJRVU03UlVGREwwTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1JVRkJSU3hqUVVGakxFTkJRVU1zUjBGQlJ5eEpRVUZCTEdWQlFWRXNSVUZCUXl4UlFVRlJMRU5CUVVNN1JVRkRlRVFzVFVGQlRTeERRVUZETEdsQ1FVRnBRaXhGUVVGRkxHOUNRVUZ2UWl4RFFVRkRMRWRCUVVjc1NVRkJRU3hsUVVGUkxFVkJRVU1zWjBKQlFXZENMRU5CUVVNN1JVRkROVVVzVFVGQlRTeGhRVUZoTEVkQlFVY3NZVUZCWVN4SFFVRkhMRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU1zYVVKQlFXbENMRU5CUVVNN1JVRkZlRVVzVFVGQlRTeGxRVUZsTEVkQlFVY3NRMEZCUVN4TFFVRk5PMGxCUXpWQ0xFMUJRVTBzYTBKQlFXdENMRWRCUVVjc1lVRkJZU3hIUVVOd1F5eEpRVUZCTERoQ1FVRnJRaXhGUVVGRE8wMUJRMnBDTEV0QlFVc3NSVUZCUlN4UlFVRlJPMDFCUTJZc1ZVRkJWU3hGUVVGRkxHbENRVUZwUWp0TlFVTTNRaXhqUVVGak8wMUJRMlFzWjBKQlFXZENMRVZCUVVVN1NVRkRjRUlzUTBGQlF5eERRVUZETEVkQlEwWXNTVUZCUVN3NFFrRkJhMElzUlVGQlF6dE5RVU5xUWl4TFFVRkxMRVZCUVVVc1VVRkJVVHROUVVObUxGVkJRVlVzUlVGQlJTeDVRa0ZCYVVJc1EwRkJReXhIUVVGSE8wMUJRMnBETEdkQ1FVRm5RaXhGUVVGRk8wbEJRM0JDTEVOQlFVTXNRMEZCUXp0SlFVVk9MRTlCUVU4c1RVRkJUU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWxCUVVrc1EwRkJRenRGUVVONFF5eERRVUZETzBWQlJVUXNUVUZCVFN4dFFrRkJiVUlzUjBGQlJ5eFJRVUZSTEVkQlFVY3NaVUZCWlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRE8wVkJSVFZFTEUxQlFVMHNTVUZCU1N4SFFVRkhMRTFCUVVFc1EwRkJRU3hMUVVGWk8wbEJRM1pDTEUxQlFVMHNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF6dEpRVU14UWl4VlFVRlZMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRVU03U1VGRGRFSXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlF5eHBRa0ZCYVVJc1EwRkJRenRGUVVNeFF5eERRVUZETzBWQlJVUXNUVUZCVFN4WlFVRlpMRWRCUVVrc1pVRkJaU3hKUVVGTE8wbEJRM2hETEUxQlFVMHNWMEZCVnl4SFFVRkhMR0ZCUVdFc1IwRkROMElzU1VGQlFTeHhRMEZCZVVJc1JVRkJRenROUVVONFFpeExRVUZMTEVWQlFVVXNaVUZCWlR0TlFVTjBRaXhaUVVGWkxFVkJRVVVzYVVKQlFXbENPMDFCUXk5Q0xHTkJRV003VFVGRFpDeHZRa0ZCYjBJc1JVRkJSVHRKUVVONFFpeERRVUZETEVOQlFVTXNSMEZEUml4SlFVRkJMSEZEUVVGNVFpeEZRVUZETzAxQlEzaENMRXRCUVVzc1JVRkJSU3hsUVVGbE8wMUJRM1JDTEZsQlFWa3NSVUZCUlN4NVFrRkJhVUlzUTBGQlF5eEhRVUZITzAxQlEyNURMR2RDUVVGblFpeEZRVUZGTEhsQ1FVRnBRaXhEUVVGRExFZEJRVWM3VFVGRGRrTTdTVUZEUml4RFFVRkRMRU5CUVVNN1NVRkZUaXhqUVVGakxFTkJRVU1zVjBGQlZ5eERRVUZETzBsQlF6TkNMRkZCUVZFc1EwRkJReXhYUVVGWExFTkJRVU03U1VGRGNrSXNWVUZCVlN4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGRE8wVkJRM2hDTEVOQlFVTTdSVUZGUkN4SlFVRkJMR2RDUVVGVExFVkJRVU1zVFVGQlRUdEpRVU5rTEdOQlFXTXNRMEZCUXl4UlFVRlJMRU5CUVVNN1JVRkRNVUlzUTBGQlF5eEZRVUZGTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1JVRkZaQ3hKUVVGQkxHZENRVUZUTEVWQlFVTXNUVUZCVFR0SlFVTmtMRWxCUVVrc1owSkJRV2RDTEVWQlFVVTdUVUZEY0VJc1dVRkJXU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRPMGxCUTI1RE8wbEJRMEU3UlVGRFJpeERRVUZETEVWQlFVVXNRMEZCUXl4blFrRkJaMElzUlVGQlJTeHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8wVkJSVE5ETEUxQlFVMHNlVUpCUVhsQ0xFZEJRVWNzUTBGQlFTeExRVUZOTzBsQlEzUkRMRWxCUVVrc1VVRkJVU3hGUVVGRkxHZENRVUZuUWp0SlFVVTVRaXhKUVVGSkxHRkJRV0VzUlVGQlJUdE5RVU5xUWl4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdVVUZCU3l4VFFVRlRMRVZCUVVNN1RVRkJjME1zUjBGRGJFUXNRMEZCUXl4RFFVRkRMREpDUVVFeVFpeERRVU16UWl4RFFVRkRPMGxCUlZZN1NVRkZRU3hKUVVGSkxHRkJRV0VzUlVGQlJUdE5RVU5xUWp0TlFVTkJMRkZCUVZFc1IwRkJSeXhwUWtGQmFVSXNTVUZCU1N4NVFrRkJhVUlzUTBGQlF5eEhRVUZITzAxQlEzSkVMR2RDUVVGblFpeEhRVUZITEVOQlFVTTdTVUZEZEVJc1EwRkJReXhOUVVGTk8wMUJRMHc3VFVGRFFTeFJRVUZSTEVkQlFVY3NhVUpCUVdsQ08wMUJRelZDTEdkQ1FVRm5RaXhIUVVGSExFTkJRVU03U1VGRGRFSTdTVUZGUVN4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4blFrRkJRU3hEUVVGQkxFOUJRV1U3VFVGRFpDeFRRVUZUTEVWQlFVTXNjME5CUVhORE8wMUJRMmhFTEZGQlFWRXNSVUZCUlN4UlFVRlRPMDFCUTI1Q0xFdEJRVXNzUlVGQlJTeFhRVUZaTzAxQlEyNUNMR2RDUVVGblFpeEZRVUZGTzBsQlFXbENMRU5CUTNCRExFTkJRVU03UlVGRlRpeERRVUZETzBWQlJVUXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNWVUZCUVN4RFFVRkJMRTlCUVZNN1NVRkZUaXhSUVVGUk8wbEJRMUlzYVVKQlFXbENPMGxCUTJwQ0xHbENRVUZwUWp0SlFVTnFRaXhoUVVGaE8wbEJRMklzWjBKQlFXZENPMGxCUTJoQ0xHTkJRV003U1VGRFpDeFJRVUZSTzBsQlExSXNhMEpCUVd0Q08wbEJSWEJDTEZWQlFWVXNSVUZCUXl4blFrRkJaMEk3U1VGRE0wSXNUVUZCVFN4RlFVRkZMR0ZCUVdFc1IwRkJSeXhsUVVGbExFZEJRVWNzWVVGQll6dEpRVU40UkN4UlFVRlJMRVZCUVVVc1dVRkJZVHRKUVVOMlFpeExRVUZMTEVWQlFVVXNiVUpCUVc5Q08wbEJRek5DTEdWQlFXVXNaVUZEWWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGRFJTeFRRVUZUTEVWQlFVTXNaME5CUVdkRE8wMUJRekZETEdWQlFWa3NaVUZCWlR0TlFVTXpRaXhQUVVGUExFVkJRVVU3U1VGQlN5eG5Ra0ZGWkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlJ5eFRRVUZUTEVWQlFVTTdTVUZCY1VJc1EwRkJSU3hEUVVNNVFqdEZRVU5VTEVkQlJVRXNlVUpCUVhsQ0xFTkJRVU1zUTBGRGJFSXNRMEZCUXp0QlFVVm9RanRCUVVWQkxHRkJRV0VzUTBGQlF5eFRRVUZUTEVkQlFVYzdSVUZEZUVJc1VVRkJVU3hGUVVGRkxHdENRVUZUTEVOQlFVTXNUVUZCVFR0RlFVTXhRaXhuUWtGQlowSXNSVUZCUlN4clFrRkJVeXhEUVVGRExFbEJRVWs3UlVGRGFFTXNVVUZCVVN4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNUdEZRVU40UWl4clFrRkJhMElzUlVGQlJTeHJRa0ZCVXl4RFFVRkRPMEZCUTJoRExFTkJRVU03T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU0xUzBRc1NVRkJRU3hqUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUVRKRExGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOQk0wTXNTVUZCUVN4TlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4SlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4aFFVRkJMRWRCUVVFc1QwRkJRVHRCUVUxQkxFbEJRVUVzYVVKQlFVRXNSMEZCUVN4UFFVRkJPMEZCUVhsRkxGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRCUVVWc1JTeE5RVUZOTEhkQ1FVRjNRaXhIUVVGSExFTkJRVU03UlVGRGRrTXNhMEpCUVd0Q08wVkJRMnhDTzBGQlEwWXNRMEZCUXl4clFrRkRReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4SlFVRkJMRU5CUVVFc1QwRkJSenRGUVVGRExFOUJRVThzUlVGQlJTeHhRa0ZCVHl4RFFVRkRPMEZCUVdFc1owSkJRMnBETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExGRkJRVUVzUTBGQlFTeFBRVUZQTzBWQlEwNHNWMEZCVnp0RlFVTllMRkZCUVZFc1JVRkJReXhMUVVGTE8wVkJRMlFzU1VGQlNTeGxRVU5HTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNTVUZCU1R0SlFVTklMRTlCUVU4c1JVRkJSU3g1UWtGQlZ5eERRVUZETEUxQlFVODdTVUZETlVJc1JVRkJSU3hGUVVGRExFbEJRVWs3U1VGRFVDeE5RVUZOTEVWQlFVVXNRMEZCUlR0SlFVTldMRXRCUVVzc1JVRkJSU3gxUWtGQlV5eERRVUZETEdWQlFXZENPMGxCUTJwRExGTkJRVk1zUlVGQlF6dEZRVUZ2UXl4SFFVVTNReXhyUWtGRFJ6dEJRVU5RTEVkQlJVRXNWMEZCVnl4blFrRkRWaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4cFFrRkJRU3hEUVVGQkxFbEJRVWs3UlVGRFNDeEpRVUZKTEVWQlFVVXNNRUpCUVZFc1EwRkJReXhOUVVGUE8wVkJRM1JDTEZOQlFWTXNSVUZCUXl4clJFRkJhMFE3UlVGRE5VUXNTVUZCU1N4RlFVRkZMREJDUVVGUkxFTkJRVU1zVDBGQlVUdEZRVU4yUWl4TFFVRkxMRVZCUVVVN1NVRkJSU3huUWtGQlowSXNSVUZCUlR0RlFVRlRPMEZCUVVVc1EwRkRka01zUTBGQlF5eEhRVVZHTEZkQlFWY3NTMEZCU3l4RlFVRkZMR2xDUVVOb1FpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhwUWtGQlFTeERRVUZCTEVsQlFVazdSVUZCUXl4SlFVRkpMRVZCUVVVc01FSkJRVkVzUTBGQlF5eFJRVUZUTzBWQlFVTXNTVUZCU1N4RlFVRkZMREJDUVVGUkxFTkJRVU03UVVGQlVTeERRVUZGTEVOQlIzSkVMRU5CUTA0c1EwRkRUanRCUVVGRExFOUJRVUVzUTBGQlFTeDNRa0ZCUVN4SFFVRkJMSGRDUVVGQk8wRkJSVVlzZDBKQlFYZENMRU5CUVVNc1UwRkJVeXhIUVVGSE8wVkJRMjVETEd0Q1FVRnJRaXhGUVVGRkxHdENRVUZUTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc2EwSkJRVk1zUTBGQlF5eE5RVUZOTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEZRVU16UlN4WFFVRlhMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4clFrRkJVeXhEUVVGRExFMUJRVTBzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVOeVJTeERRVUZET3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEyNUVSQ3hKUVVGQkxFMUJRVUVzUjBGQlFTeDFRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGZEJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4WFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4bFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVWQkxFbEJRVUVzUzBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR2xDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNZVUZCUVN4SFFVRkJMRTlCUVVFN1FVRlpRU3hKUVVGQkxGVkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4SlFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzTkVKQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hYUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNUMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkxRU3hKUVVGQkxGRkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UlFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTlCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeDVRa0ZCUVN4SFFVRkJMRTlCUVVFN1FVRkJlVVVzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeDVRa0ZCUVN4WFFVRkJMR1ZCUVVFc1QwRkJRU3hyUTBGQlFTeHBRa0ZCUVN4UFFVRkJMRTlCUVVFc1VVRkJRU3huUWtGQlFTeFBRVUZCTEU5QlFVRXNXVUZCUVN4M1FrRkJRU3haUVVGQkxFTkJRVUVzVjBGQlFTeFhRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEV0QlFVRXNWMEZCUVR0QlFVRkJMRk5CUVVFc2QwSkJRVUVzUjBGQlFTeEZRVUZCTEZkQlFVRXNVMEZCUVN4WFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEZkQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2IwSkJRVUVzUjBGQlFTeDNRa0ZCUVN4SFFVRkJMRFJDUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTEZWQlFVRXNTMEZCUVN4SFFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzV1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxGZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHJRa0ZCUVN4TlFVRkJMRU5CUVVFc1UwRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1UwRkJRU3hKUVVGQkxFZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4alFVRkJMRWxCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRWxCUVVFc1dVRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEUxQlFVRXNXVUZCUVN4TlFVRkJPMEZCUlRGRUxGTkJRVk1zYVVKQlFXbENMRU5CUVVNN1JVRkRlRU1zVVVGQlVUdEZRVU5TTEZOQlFWTTdSVUZEVkN4dFFrRkJiVUk3UlVGRGJrSXNhVUpCUVdsQ08wVkJRMnBDTEZWQlFWVTdSVUZEVml4blFrRkJaMEk3UlVGRGFFSXNVVUZCVVR0RlFVTlNPMEZCUTBZc1EwRkJReXhGUVVGRk8wVkJRMFFzVFVGQlRTeERRVUZETEVkQlFVY3NTVUZCUVN4cFFrRkJWU3hGUVVGRExHbENRVUZYTEVOQlFVTTdSVUZEYWtNc1RVRkJUU3hSUVVGUkxFZEJRVWNzU1VGQlFTeDFRa0ZCVnl4RlFVRkRMRU5CUVVNN1JVRkRPVUlzVFVGQlRUdEpRVUZGTzBWQlFXdENMRU5CUVVNc1IwRkJSeXhKUVVGQkxIZENRVUZuUWl4RlFVRkRMRU5CUVVNN1JVRkRhRVFzVFVGQlRTeFJRVUZSTEVkQlFVY3NTVUZCUVN4aFFVRk5MRVZCUVVNc1NVRkJTU3hEUVVGRE8wVkJSVGRDTEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVFc2RVSkJRVmNzUlVGQlF5d3JRa0ZCYjBJc1EwRkJRenRGUVVVdlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RlFVRkZMRkZCUVZFc1EwRkJReXhIUVVGSExFbEJRVUVzWlVGQlVTeEZRVUZETEVWQlFVVXNRMEZCUXp0RlFVTjBReXhOUVVGTkxFTkJRVU1zYjBKQlFXOUNMRVZCUVVVc2RVSkJRWFZDTEVOQlFVTXNSMEZCUnl4SlFVRkJMR1ZCUVZFc1JVRkRPVVFzUzBGQlN5eExRVUZMTEUxQlFVMHNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVsQlEzcERMRU5CUVVNN1JVRkRSQ3hOUVVGTkxIZENRVUYzUWl4SFFVRkhMRU5CUVVNc1EwRkJReXh6UWtGQmMwSXNRMEZCUXp0RlFVVXhSQ3hOUVVGTkxHbENRVUZwUWl4SFFVRkpMRlZCUVZVc1NVRkJTenRKUVVONFF5eFBRVUZQTEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhGUVVGRkxFZEJRVWNzUTBGQlF6dEZRVU4yUXl4RFFVRkRPMFZCUlVRc1RVRkJUU3gzUWtGQmQwSXNSMEZCUnl4RFFVRkRMRlZCUVZVc1JVRkJSU3haUVVGWkxFdEJRVXM3U1VGRE4wUXNUMEZCVHl4SlFVRkpMR2RDUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1YwRkJWeXhEUVVOMlJTeE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMRVZCUTNCQ0xFVkJRMFlzUTBGQlF6dEZRVU5JTEVOQlFVTTdSVUZGUkN4TlFVRk5MR2xDUVVGcFFpeEhRVUZKTEZkQlFWY3NTVUZCU3p0SlFVTjZReXhKUVVORkxFbEJRVWtzWjBKQlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eHBRa0ZCYVVJc1EwRkRka1VzU1VGQlNTeG5Ra0ZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkROME1zUTBGQlF5eEZRVU5FTzAxQlEwRXNUMEZCVHp0UlFVTk1MRk5CUVZNc1JVRkJSU3hwUTBGQmFVTTdVVUZETlVNc1YwRkJWeXhGUVVGRkxFTkJRVU1zUTBGQlF5eG5RMEZCWjBNc1JVRkJSU3hqUVVNdlF5eE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhwUWtGQlFTeERRVUZCTEVsQlFVazdWVUZEU0N4SFFVRkhMRVZCUVVNc2NVSkJRWEZDTzFWQlEzcENMRTlCUVU4c1JVRkJSU3g1UWtGQlZ5eERRVUZETEZWQlFWYzdWVUZEYUVNc1JVRkJSU3hGUVVGRExFbEJRVWs3VlVGRFVDeFRRVUZUTEVWQlFVTTdVVUZCYVVRc1IwRkZNVVFzYVVKQlFXbENMRU5CUVVNc1YwRkJWeXhEUVVGRExFVkJRVU1zUjBGQlF5eEZRVUZETEZOQlF6bENMRU5CUVVNc1EwRkRVanROUVVOSUxFTkJRVU03U1VGRFNDeERRVUZETEUxQlFVMHNTVUZCU1N4M1FrRkJkMElzUTBGQlF5eFhRVUZYTEVWQlFVVXNiVUpCUVcxQ0xFTkJRVU1zUlVGQlJUdE5RVU55UlN4UFFVRlBPMUZCUTB3c1UwRkJVeXhGUVVGRkxHdERRVUZyUXp0UlFVTTNReXhYUVVGWExFVkJRVVVzUTBGQlF5eERRVUZETEhkQ1FVRjNRanROUVVONlF5eERRVUZETzBsQlEwZzdTVUZEUVN4UFFVRlBPMDFCUTB3c1UwRkJVeXhGUVVGRkxHbERRVUZwUXp0TlFVTTFReXhYUVVGWExFVkJRVVVzUTBGQlF5eERRVUZETEhOQ1FVRnpRanRKUVVOMlF5eERRVUZETzBWQlEwZ3NRMEZCUXp0RlFVVkVMRTFCUVUwc1EwRkJReXh4UWtGQmNVSXNSVUZCUlN4M1FrRkJkMElzUTBGQlF5eEhRVUZITEVsQlFVRXNaVUZCVVN4RlFVTm9SU3hwUWtGQmFVSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhYUVVNelFpeERRVUZETzBWQlJVUXNUVUZCVFN4WlFVRlpMRWRCUVVjc1RVRkJUeXhWUVVGVkxFbEJRVXM3U1VGQlFTeEpRVUZCTEU5QlFVRTdTVUZEZWtNc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJUdE5RVU5pTzBsQlEwWTdTVUZEUVN4M1FrRkJkMElzUTBGQlF5eEpRVUZKTEVOQlFVTTdTVUZET1VJc1NVRkJTU3huUWtGQlowSXNSMEZCUnl4RlFVRkZPMGxCUTNwQ0xFMUJRVTBzWTBGQll5eEhRVUZITEdsQ1FVRnBRaXhEUVVGRExGVkJRVlVzUTBGQlF6dEpRVU53UkN4TlFVRk5MSGxDUVVGNVFpeEhRVUZITEdOQlFXTXNRMEZCUXl4WFFVRlhPMGxCUXpWRUxFMUJRVTBzUzBGQlN5eEhRVUZITEhGQ1FVRmhMRU5CUVVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wbEJReTlFTEVsQlFVa3NRMEZCUVN4TFFVRkxMR0ZCUVV3c1MwRkJTeXgzUWtGQlFTeFBRVUZCTEVkQlFVd3NTMEZCU3l4RFFVRkhMRU5CUVVNc1EwRkJReXhqUVVGQkxFOUJRVUVzZFVKQlFWWXNUMEZCUVN4RFFVRlpMRTFCUVUwc1NVRkJSeXhSUVVGUkxFVkJRVVU3VFVGRGFrTXNkMEpCUVhkQ0xFTkJRVU1zUzBGQlN5eERRVUZETzAxQlF5OUNPMGxCUTBZN1NVRkZRU3hKUVVGSkxGVkJRVlVzU1VGQlNTeERRVUZETERSRFFVRnZReXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNSVUZCUlR0TlFVTjRSU3huUWtGQlowSXNSMEZCUnl4RFFVRkRMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTTdUVUZEZUVNc2QwSkJRWGRDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRFpDUVVFMlFpeEZRVUZGTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJRenROUVVONFJTeFJRVUZSTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU03U1VGRE5VSXNRMEZCUXl4TlFVRk5PMDFCUTB3c2QwSkJRWGRDTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU03VFVGRGJrUXNVVUZCVVN4RFFVRkRMRVZCUVVVc1EwRkJRenRKUVVOa08wbEJSVUVzVFVGQlRTeGpRVUZqTEVkQlFVY3NTVUZCUVN3MFEwRkJaU3hGUVVOd1F5eHJRMEZCTUVJc1JVRkRNVUlzVVVGRFJpeERRVUZETzBsQlEwUXNTVUZCU1N4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExFVkJRVVU3VFVGRGRrUXNUVUZCVFN4elFrRkJjMElzUjBGQlJ5eEpRVUZKTEd0Q1FVRlRMRU5CUVVNc1ZVRkJWU3hEUVVGRE8wMUJRM2hFTEVsQlFVa3NjMEpCUVhOQ0xFTkJRVU1zVjBGQlZ5eERRVUZETEdOQlFXTXNRMEZCUXl4RlFVRkZPMUZCUTNSRUxHZENRVUZuUWl4SFFVRkhMRU5CUVVNc1EwRkJReXh2UWtGQmIwSXNRMEZCUXp0UlFVTXhReXhSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1RVRkROVUk3U1VGRFJqdEpRVVZCTEZGQlFWRXNRMEZCUXl4SlFVRkJMSGxDUVVGdlFpeEZRVUZETEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJSV3hFTEVsQlFVazdUVUZEUml4TlFVRk5MRTlCUVU4c1IwRkJSeXhKUVVGQkxIRkRRVUZ4UWl4RlFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVU3VVVGRGJrUXNjMEpCUVhOQ0xFVkJRVVVzVlVGQlZUdFJRVU5zUXp0TlFVTkdMRU5CUVVNc1EwRkJRenROUVVOR0xFMUJRVTA3VVVGQlJTeEpRVUZKTzFGQlFVVXNSVUZCUlR0UlFVRkZMRXRCUVVzc1JVRkJSVHROUVVGUkxFTkJRVU1zUjBGQlJ5eFJRVUZSTzAxQlF6ZERMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NUVUZCVFN4SlFVRkJMRzlDUVVGWExFVkJRVU03VVVGRE1VTXNTVUZCU1R0UlFVTktMRVZCUVVVN1VVRkRSaXhMUVVGTExFVkJRVVVzVDBGQlR6dFJRVU5rTEVsQlFVa3NSVUZCUlR0TlFVTlNMRU5CUVVNc1EwRkJRenROUVVOR0xFbEJRVWtzYVVKQlFXbENMRVZCUVVVN1VVRkRja0lzVFVGQlRTeHBRa0ZCYVVJc1EwRkJRenRWUVVOMFFpeFJRVUZSTEVWQlFVVXNTVUZCUVN4M1FrRkJXU3hGUVVGRExFbEJRVUVzTkVKQlFWa3NSVUZCUXl4cFFrRkJhVUlzUTBGQlF6dFJRVU40UkN4RFFVRkRMRU5CUVVNN1RVRkRTanRKUVVOR0xFTkJRVU1zUTBGQlF5eFBRVUZQTEVkQlFVY3NSVUZCUlR0TlFVTmFMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zY1VOQlFYRkRMRVZCUVVVc1IwRkJSeXhEUVVGRE8wbEJRek5FTzBsQlEwRXNkMEpCUVhkQ0xFTkJRVU1zUzBGQlN5eERRVUZETzBWQlEycERMRU5CUVVNN1JVRkZSQ3hKUVVGQkxHZENRVUZUTEVWQlFVTXNUVUZCVFR0SlFVTmtMRWxCUVVrc1MwRkJTeXhMUVVGTExFMUJRVTBzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhGUVVGRk8wMUJRM1pETEhWQ1FVRjFRaXhEUVVGRExFbEJRVWtzUTBGQlF6dEpRVU12UWp0RlFVTkdMRU5CUVVNc1JVRkJSU3hEUVVGRExFdEJRVXNzUlVGQlJTeHBRa0ZCYVVJc1EwRkJReXhEUVVGRE8wVkJSVGxDTEVsQlFVRXNaMEpCUVZNc1JVRkJReXhOUVVGTk8wbEJRMlFzWjBKQlFXZENMRU5CUVVNc1MwRkJTeXhEUVVGRE8wVkJRM3BDTEVOQlFVTXNSVUZCUlN4RFFVRkRMRXRCUVVzc1JVRkJSU3huUWtGQlowSXNRMEZCUXl4RFFVRkRPMFZCUlRkQ0xFbEJRVUVzWjBKQlFWTXNSVUZCUXl4TlFVRk5PMGxCUTJRc1NVRkJTU3hSUVVGUkxFTkJRVU1zVDBGQlR5eEZRVUZGTzAxQlEzQkNMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETzFGQlEzSkNMR0ZCUVdFc1JVRkJSVHROUVVOcVFpeERRVUZETEVOQlFVTTdTVUZEU2p0SlFVTkJPMFZCUTBZc1EwRkJReXhGUVVGRkxFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMFZCUlhSQ0xFMUJRVTBzZDBKQlFYZENMRWRCUVVjc2QwSkJRWGRDTEVOQlEzWkVMRXRCUVVzc1JVRkRUQ3h0UWtGRFJpeERRVUZETEVkQlEwY3NRMEZCUXl4RFFVRkRMRzlDUVVGdlFpeEZRVUZGTEdOQlEzUkNMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHRKUVVOSUxFZEJRVWNzUlVGQlF5eGpRVUZqTzBsQlEyeENMRTlCUVU4c1JVRkJSU3g1UWtGQlZ5eERRVUZETEZWQlFWYzdTVUZEYUVNc1JVRkJSU3hGUVVGRExFbEJRVWs3U1VGRFVDeExRVUZMTEVWQlFVVXNkVUpCUVZNc1EwRkJRenRGUVVGaExHZENRVVU1UWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRWxCUVVrN1NVRkJReXhKUVVGSkxFVkJRVVVzTUVKQlFWRXNRMEZCUXp0RlFVRlJMRU5CUVVVc1EwRkJReXhMUVVGRExFVkJRVU1zUTBGQlF5eERRVUZETEZkQlFWY3NRMEZETTBNc1EwRkJReXhEUVVOU0xFTkJRVU1zUjBGRFJpeERRVUZETEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU03UlVGRk4wSXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVRXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hSUVVGQkxIRkNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExFbEJRVUVzUTBGQlFTeFBRVUZITzBsQlEwWXNVMEZCVXl4RlFVRkRMSEZDUVVGeFFqdEpRVU12UWl4WlFVRlpMRVZCUVVVc2EwSkJRVWtzUTBGQlF5eEZRVUZITzBsQlEzUkNMRlZCUVZVc1JVRkJSU3hEUVVGRk8wbEJRMlFzV1VGQldTeEZRVUZGTEVOQlFVVTdTVUZEYUVJc1YwRkJWeXhGUVVGRkxFTkJRVVU3U1VGRFppeFBRVUZQTEVWQlFVVXNjVUpCUVU4c1EwRkJReXhKUVVGTE8wbEJRM1JDTEZWQlFWVXNSVUZCUlN4M1FrRkJWU3hEUVVGRExGTkJRVlU3U1VGRGFrTXNZVUZCWVN4RlFVRkZMRFJDUVVGakxFTkJRVU1zVFVGQlR6dEpRVU55UXl4bFFVRmxMRVZCUVVVc05rSkJRV1VzUTBGQlF5eHhRa0ZCYzBJN1NVRkRka1FzUjBGQlJ5eEZRVUZGTzBWQlFVVXNaMEpCUlZBc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNTVUZCUVN4RFFVRkJMRTlCUVVjN1NVRkRSaXhqUVVGakxFVkJRVVVzTkVKQlFXTXNRMEZCUXl4TlFVRlBPMGxCUTNSRExFOUJRVThzUlVGQlJTeHhRa0ZCVHl4RFFVRkRMRXRCUVUwN1NVRkRka0lzVTBGQlV5eEZRVUZETzBWQlFUUkNMR2RDUVVWMFF5eE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1NVRkRSU3hQUVVGUExFVkJRMHdzZDBKQlFYZENMRU5CUVVNc1MwRkJTeXhGUVVGRkxHMUNRVUZ0UWl4RFFVRkRMRWRCUTJoRUxHbERRVUZwUXl4SFFVTnFRenRGUVVOTUxHZENRVVZFTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExGVkJRVUVzUTBGQlFTeFBRVUZUTzBsQlExSXNVVUZCVVN4RlFVRkZMRkZCUVZNN1NVRkRia0lzVlVGQlZTeEZRVUZETERKQ1FVRXlRanRKUVVOMFF5eHJRa0ZCYTBJc1JVRkJSVHROUVVGRkxFVkJRVVVzUlVGQlJUdEpRVUZOTEVOQlFVVTdTVUZEYkVNc1JVRkJSU3hGUVVOQkxIZENRVUYzUWl4RFFVRkRMRXRCUVVzc1JVRkJSU3h0UWtGQmJVSXNRMEZCUXl4SFFVTm9SQ3hwUTBGQmFVTXNSMEZEYWtNc2NVSkJRMHc3U1VGRFJDeHpRa0ZCYzBJc1pVRkRjRUlzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2VVSkJRVUVzUTBGQlFTeDNRa0ZCZDBJN1RVRkRka0lzYTBKQlFXdENMRVZCUTJoQ0xHbENRVUZwUWl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExIZENRVUYzUWl4SFFVRkhMRVZCUTNaRU8wMUJRMFFzVjBGQlZ5eEZRVU5VTEdsQ1FVRnBRaXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVU53UWl4M1FrRkJkMElzUTBGQlF5eExRVUZMTEVWQlFVVXNiVUpCUVcxQ0xFTkJRVU1zUjBGRGNFUTdTVUZEVEN4RFFVTkdMRU5CUTBZN1NVRkRSQ3hSUVVGUkxFVkJRVVVzV1VGQllUdEpRVU4yUWl4VFFVRlRMRVZCUVVVc1EwRkJReXhEUVVGRExHMUNRVUZ0UWl4RFFVRkZPMGxCUTJ4RExGZEJRVmNzUlVGQlJTeERRVUZETEVOQlFVTXNZMEZCWXl4RFFVRkZPMGxCUXk5Q0xFdEJRVXNzUlVGQlJTeExRVUZOTzBsQlEySXNTMEZCU3l4RlFVRkZMRXRCUVUwN1NVRkRZaXhYUVVGWExFVkJRMVFzYjBKQlFXOUNMR2xDUVVOc1FpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhwUWtGQlFTeERRVUZCTEZWQlFWVTdUVUZEVkN4SlFVRkpMRVZCUVVVc2EwSkJRVWtzUTBGQlF5eEpRVUZMTzAxQlEyaENMRTlCUVU4c1JVRkJSeXhEUVVGRExFbEJRVXM3VVVGRFpDeERRVUZETEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNN1VVRkRiRUlzZFVKQlFYVkNMRU5CUVVNc1MwRkJTeXhEUVVGRE8xRkJRemxDTEZsQlFWa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF6dE5RVU5xUXp0SlFVRkZMRWRCUlVRc1EwRkJReXhEUVVGRExGbEJRVmtzUTBGRFRDeERRVVZtTzBsQlEwUXNkVUpCUVhWQ0xFVkJRVVU3VFVGQlJTeFpRVUZaTEVWQlFVVXNRMEZCUXp0TlFVRkZMRmRCUVZjc1JVRkJSVHRKUVVGRk8wVkJRVVVzUTBGRE9VUXNRMEZCUXl4bFFVTkdMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEVsQlFVRXNRMEZCUVN4UFFVRkhPMGxCUTBZc1MwRkJTeXhGUVVGRkxIbENRVUZYTEVOQlFVTXNSMEZCU1R0SlFVTjJRaXhWUVVGVkxFVkJRVU1zVFVGQlRUdEpRVU5xUWl4WlFVRlpMRVZCUVVVc1EwRkJSVHRKUVVOb1FpeGhRVUZoTEVWQlFVVXNRMEZCUlR0SlFVTnFRaXhUUVVGVExFVkJRVVVzZDBKQlFWVXNRMEZCUXl4SFFVRkpPMGxCUXpGQ0xGTkJRVk1zUlVGQlJTeEpRVUZCTEcxQ1FVRlZMRVZCUVVNc01FSkJRVEJDTEVWQlFVVTdUVUZEYUVRc09FTkJRVGhETEVWQlFVVTdTVUZEYkVRc1EwRkJRenRGUVVGRkxHZENRVVZJTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNWVUZCVlR0SlFVTlVMRWxCUVVrc1JVRkJSU3hyUWtGQlNTeERRVUZETEVsQlFVczdTVUZEYUVJc1QwRkJUeXhGUVVGSExFTkJRVU1zU1VGQlN6dE5RVU5rTEVOQlFVTXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenROUVVOc1FpeFpRVUZaTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU03U1VGRGJrTTdSVUZCUlN4SFFVVkVMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRMFVzUTBGRFZDeERRVUZETEdWQlEwNHNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zU1VGQlFTeERRVUZCTEU5QlFVYzdTVUZEUml4VFFVRlRMRVZCUVVVc1NVRkJRU3h0UWtGQlZTeEZRVUZETEd0RFFVRnJReXhGUVVGRk8wMUJRM2hFTEhORVFVRnpSQ3hGUVVGRk8wbEJRekZFTEVOQlFVTTdSVUZCUlN4blFrRkZTQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4cFFrRkJRU3hEUVVGQkxFbEJRVWs3U1VGRFNDeExRVUZMTEVWQlFVVXNkVUpCUVZNc1EwRkJReXhYUVVGWk8wbEJRemRDTEU5QlFVOHNSVUZCUlN4NVFrRkJWeXhEUVVGRExFMUJRVTg3U1VGRE5VSXNSVUZCUlN4RlFVRkRMRWxCUVVrN1NVRkRVQ3hWUVVGVkxFVkJRVVVzUTBGQlJUdEpRVU5rTEdGQlFXRXNSVUZCUlR0RlFVRkZMRWRCUldoQ0xHbENRVUZwUWl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVOeVFpeHhRa0ZCY1VJc1IwRkRja0lzZDBKQlEwRXNRMEZEU0N4RFFVTkJMRU5CUTBvc1EwRkRSaXhEUVVOTUxFTkJRVU03UVVGRlVEdEJRVVZCTEdsQ1FVRnBRaXhEUVVGRExGTkJRVk1zUjBGQlJ6dEZRVU0xUWp0QlFVTkdPMEZCUTBFN1JVRkRSU3hSUVVGUkxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWVHRGUVVOeVF6dEJRVU5HTzBGQlEwRTdSVUZEUlN4VFFVRlRMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTzBWQlF6TkNPMEZCUTBZN1FVRkRRVHRGUVVORkxHMUNRVUZ0UWl4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRUdEZRVU55UXp0QlFVTkdPMEZCUTBFN1JVRkRSU3hwUWtGQmFVSXNSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTA3UlVGRGJrTTdRVUZEUmp0QlFVTkJPMFZCUTBVc1ZVRkJWU3hGUVVGRkxHdENRVUZUTEVOQlFVTXNUVUZCVFR0RlFVTTFRanRCUVVOR08wRkJRMEU3UlVGRFJTeG5Ra0ZCWjBJc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVazdSVUZEYUVNN1FVRkRSanRCUVVOQk8wVkJRMFVzVVVGQlVTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRGUVVNeFFqdEJRVU5HTzBGQlEwRTdSVUZEUlN4M1FrRkJkMElzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVNelF5eERRVUZET3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF6TldSQ3hKUVVGQkxFMUJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkZRU3hKUVVGQkxHVkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4dFFrRkJRU3hIUVVGQkxFOUJRVUU3UVVGRlFTeEpRVUZCTEVsQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEU5QlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZGQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRlFTeEpRVUZCTEdGQlFVRXNSMEZCUVN4UFFVRkJPMEZCVFVFc1NVRkJRU3hMUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNhVUpCUVVFc1IwRkJRU3hQUVVGQk8wRkJRV3RFTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUdEJRVVZzUkN4TlFVRk5MRzlDUVVGdlFpeEhRVUZITEVOQlFVTTdSVUZCUlR0QlFVRmhMRU5CUVVNc1MwRkJTenRGUVVOcVJDeE5RVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkJMRGhDUVVGakxFVkJRVU1zUTBGQlF6dEZRVU14UWl4TlFVRk5MRU5CUVVNc1RVRkJUU3hGUVVGRkxGVkJRVlVzUTBGQlF5eEhRVUZITEVsQlFVRXNjME5CUVd0Q0xFVkJRVU1zUTBGQlF6dEZRVVZxUkN4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4SlFVRkJMRU5CUVVFc1QwRkJSenRKUVVGRExFOUJRVThzUlVGQlJTeHhRa0ZCVHl4RFFVRkRMRmRCUVZrN1NVRkJReXhUUVVGVExFVkJRVU03UlVGQmQwSXNaMEpCUTI1RkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzU1VGQlNUdEpRVUZETEU5QlFVOHNSVUZCUlN4NVFrRkJWeXhEUVVGRExFMUJRVTg3U1VGQlF5eEZRVUZGTEVWQlFVTXNTVUZCU1R0SlFVRkRMRXRCUVVzc1JVRkJSU3gxUWtGQlV5eERRVUZETzBWQlFWa3NSMEZEY0VVc1IwRkJSU3hEUVVGRExFTkJRVU1zWTBGQll5eERRVUZGTEVkQlEyeENMRU5CUVVNc1pVRkRVQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4cFFrRkJRU3hEUVVGQkxFbEJRVWs3U1VGRFNDeFBRVUZQTEVWQlFVVXNlVUpCUVZjc1EwRkJReXhOUVVGUE8wbEJRelZDTEVWQlFVVXNSVUZCUXl4SlFVRkpPMGxCUTFBc1MwRkJTeXhGUVVGRkxIVkNRVUZUTEVOQlFVTXNZMEZCWlR0SlFVTm9ReXhWUVVGVkxFVkJRVVVzUTBGQlJUdEpRVU5rTEZkQlFWY3NSVUZCUlR0RlFVRkZMRWRCUldRc1NVRkJRU3h2UWtGQll5eEZRVUZETEZsQlFWa3NRMEZEZUVJc1EwRkJReXhsUVVOUUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRkZCUVVFc1EwRkJRU3hQUVVGUE8wbEJRMDRzVVVGQlVTeEZRVUZETEZGQlFWRTdTVUZEYWtJc1MwRkJTeXhGUVVGRkxFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNhVUpCUVdsQ08wVkJRVVVzWjBKQlJUbEVMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEU5QlFVRXNRMEZCUVN4UFFVRk5PMGxCUTB3c1NVRkJTU3hGUVVGRExFMUJRVTA3U1VGRFdDeFRRVUZUTEVWQlFVTXNiVU5CUVcxRE8wbEJRemRETEU5QlFVOHNSVUZCUlN4RFFVRkJMRXRCUVUwN1RVRkRZaXhWUVVGVkxFTkJRVU1zV1VGQldTeERRVUZETzBsQlF6RkNPMFZCUVVVc1owSkJSVVlzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUVVjc1UwRkJVeXhGUVVGRE8wVkJRVmtzUTBGQlJTeERRVU55UWl4RFFVTkVMRU5CUTA0c1EwRkJRenRCUVVWV0xFTkJRVU03UVVGRlJDeHZRa0ZCYjBJc1EwRkJReXhUUVVGVExFZEJRVWM3UlVGREwwSXNXVUZCV1N4RlFVRkZMR3RDUVVGVExFTkJRVU03UVVGRE1VSXNRMEZCUXp0QlFVRkRMRWxCUVVFc1VVRkJRU3hIUVVWaExHOUNRVUZ2UWp0QlFVRkJMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzVVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU16Ukc1RExFbEJRVUVzVFVGQlFTeEhRVUZCTEhWQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVWQkxFbEJRVUVzWlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZGUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTlCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR0ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJTMEVzU1VGQlFTeHBRa0ZCUVN4SFFVRkJMRTlCUVVFN1FVRkJhMFFzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeDVRa0ZCUVN4WFFVRkJMR1ZCUVVFc1QwRkJRU3hyUTBGQlFTeHBRa0ZCUVN4UFFVRkJMRTlCUVVFc1VVRkJRU3huUWtGQlFTeFBRVUZCTEU5QlFVRXNXVUZCUVN4M1FrRkJRU3haUVVGQkxFTkJRVUVzVjBGQlFTeFhRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEV0QlFVRXNWMEZCUVR0QlFVRkJMRk5CUVVFc2QwSkJRVUVzUjBGQlFTeEZRVUZCTEZkQlFVRXNVMEZCUVN4WFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEZkQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2IwSkJRVUVzUjBGQlFTeDNRa0ZCUVN4SFFVRkJMRFJDUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTEZWQlFVRXNTMEZCUVN4SFFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzV1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxGZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHJRa0ZCUVN4TlFVRkJMRU5CUVVFc1UwRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1UwRkJRU3hKUVVGQkxFZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4alFVRkJMRWxCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRWxCUVVFc1dVRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEUxQlFVRXNXVUZCUVN4TlFVRkJPMEZCUld4RUxFMUJRVTBzWjBOQlFXZERMRWRCUVVjc1EwRkJRenRCUVVVeFF5eE5RVUZOTEhkQ1FVRjNRaXhIUVVGSExFTkJRVU03UlVGQlJUdEJRVUZaTEVOQlFVTXNTMEZCU3p0RlFVTndSQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZCTERoQ1FVRmpMRVZCUVVNc1EwRkJRenRGUVVNeFFpeE5RVUZOTEhOQ1FVRnpRaXhIUVVNeFFpeFJRVUZSTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eG5RMEZCWjBNN1JVRkRja1VzVFVGQlRTeERRVUZETEZkQlFWY3NSVUZCUlN4alFVRmpMRU5CUVVNc1IwRkJSeXhKUVVGQkxHVkJRVkVzUlVGQlF5eExRVUZMTEVOQlFVTTdSVUZGY2tRc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1NVRkJRU3hEUVVGQkxFOUJRVWM3U1VGQlF5eFBRVUZQTEVWQlFVVXNjVUpCUVU4c1EwRkJReXhYUVVGWk8wbEJRVU1zVTBGQlV5eEZRVUZETzBWQlFUUkNMR2RDUVVOMlJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhwUWtGQlFTeERRVUZCTEVsQlFVazdTVUZCUXl4UFFVRlBMRVZCUVVVc2VVSkJRVmNzUTBGQlF5eE5RVUZQTzBsQlFVTXNSVUZCUlN4RlFVRkRMRWxCUVVrN1NVRkJReXhWUVVGVkxFVkJRVVVzZDBKQlFWVXNRMEZCUXp0RlFVRlBMRWRCUTNSRkxFTkJRVU1zUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hEUVVOdVFpeHpRa0ZCYzBJc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEdkQ1FVTjRReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4cFFrRkJRU3hEUVVGQkxFbEJRVWs3U1VGRFNDeFBRVUZQTEVWQlFVVXNlVUpCUVZjc1EwRkJReXhOUVVGUE8wbEJRelZDTEVWQlFVVXNSVUZCUXl4SlFVRkpPMGxCUTFBc1ZVRkJWU3hGUVVGRkxIZENRVUZWTEVOQlFVTXNUVUZCVHp0SlFVTTVRaXhIUVVGSExFVkJRVU03UlVGQmNVTXNSMEZGZGtNc1IwRkJSU3hYUVVGWExFTkJRMW9zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4blEwRkJaME1zUTBGQlF5eERRVU14UXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRkxFVkJRVU1zWlVGRFppeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhQUVVGQkxFTkJRVUVzVDBGQlRUdEpRVU5NTEVsQlFVa3NSVUZCUXl4TlFVRk5PMGxCUTFnc1UwRkJVeXhGUVVGRExHdERRVUZyUXp0SlFVTTFReXhQUVVGUExFVkJRVVVzUTBGQlFTeExRVUZOTEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVVN1NVRkRjRU1zUjBGQlJ5eEZRVUZETzBWQlFXZERMRWRCUlc1RExFTkJRVU1zUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXl4elFrRkJjMElzUTBGQlF5eERRVU5zUXl4RFFVTktMRU5CUVVNc1owSkJSVkFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2FVSkJRVUVzUTBGQlFTeEpRVUZKTzBsQlEwZ3NUMEZCVHl4RlFVRkZMSGxDUVVGWExFTkJRVU1zVFVGQlR6dEpRVU0xUWl4RlFVRkZMRVZCUVVNc1NVRkJTVHRKUVVOUUxGVkJRVlVzUlVGQlJTeDNRa0ZCVlN4RFFVRkRMRTFCUVU4N1NVRkRPVUlzUjBGQlJ5eEZRVUZETzBWQlFYZERMRWRCUlRGRExFZEJRVVVzVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVVc1IwRkRka0lzUTBGRFVDeERRVU5HTEVOQlEwY3NRMEZEU0N4RFFVRkRPMEZCUlZZc1EwRkJRenRCUVVWRUxIZENRVUYzUWl4RFFVRkRMRk5CUVZNc1IwRkJSenRGUVVOdVF5eFhRVUZYTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhMUVVGTExFTkJRVU03UVVGREwwSXNRMEZCUXp0QlFVRkRMRWxCUVVFc1VVRkJRU3hIUVVWaExIZENRVUYzUWp0QlFVRkJMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzVVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5xUlhaRExFbEJRVUVzVFVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVjBGQlFTeEhRVUZCTEU5QlFVRTdRVUZGUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRzlDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3h4UWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzZVVKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdGQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzVDBGQlFUdEJRVUZ4UkN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZGY2tRc1RVRkJUU3h2UWtGQmIwSXNSMEZCUnl4RFFVRkRPMFZCUXpWQ0xFdEJRVXM3UlVGRFRDeHZRa0ZCYjBJN1JVRkRjRUk3UVVGRFJpeERRVUZETEV0QlFVczdSVUZCUVN4SlFVRkJMR05CUVVFN1JVRkRTaXhOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZCTEhWQ1FVRlhMRVZCUVVNc2RVSkJRVmtzUTBGQlF6dEZRVU16UXl4TlFVRk5MRk5CUVZNc1IwRkJSeXhUUVVGVExFVkJRVUVzWTBGQlFTeEhRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMR05CUVVFc1kwRkJRU3gxUWtGQllpeGpRVUZCTEVOQlFXVXNWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJRenRGUVVWNlJDeHZRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eEpRVUZCTEVOQlFVRXNUMEZCUnp0SlFVTkdMRTlCUVU4c1JVRkJSU3h4UWtGQlR5eERRVUZETEVsQlFVczdTVUZEZEVJc1UwRkJVeXhGUVVGRExIZENRVUYzUWp0SlFVTnNReXhaUVVGWkxFVkJRVVU3UlVGQlJTeG5Ra0ZGYUVJc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNWVUZCUVN4RFFVRkJMRTlCUVZNN1NVRkRVaXhUUVVGVExFVkJRVU1zYlVOQlFXMURPMGxCUXpkRExFOUJRVThzUlVGQlJTeExRVUZMTEVOQlFVTXNUMEZCVVR0SlFVTjJRaXhSUVVGUkxFVkJRVVU3UlVGQlJ5eERRVU5rTEVOQlFVTXNaVUZEUml4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eEpRVUZCTEVOQlFVRXNUMEZCUnp0SlFVTkdMRTlCUVU4c1JVRkJSU3h4UWtGQlR5eERRVUZETEVsQlFVczdTVUZEZEVJc1ZVRkJWU3hGUVVGRkxFTkJRVVU3U1VGRFpDeFRRVUZUTEVWQlFVTTdSVUZCT0VJc1owSkJSWGhETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHOUNRVUZCTEVOQlFVRXNUMEZCYlVJN1NVRkRiRUlzUzBGQlN5eEZRVUZGTEV0QlFVMDdTVUZEWWl4dlFrRkJiMElzUlVGQlJTeHZRa0ZCY1VJN1NVRkRNME1zYTBKQlFXdENMRVZCUVVVN1JVRkJiVUlzUTBGRGVFTXNRMEZCUXl4bFFVTkdMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEhGQ1FVRkJMRU5CUVVFc1QwRkJiMEk3U1VGQlF5eFpRVUZaTEVWQlFVVXNTMEZCU3l4RFFVRkRPMFZCUVZFc1EwRkJSU3hEUVVGRExFVkJRM0JFTEVOQlFVRXNVMEZCVXl4aFFVRlVMRk5CUVZNc2RVSkJRVlFzVTBGQlV5eERRVUZGTEZkQlFWY3NRMEZCUXl4TlFVRk5MRWxCUVVjc1EwRkJReXhwUWtGRGFFTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zZVVKQlFVRXNRMEZCUVN4UFFVRjNRanRKUVVGRExGZEJRVmNzUlVGQlJTeFRRVUZUTEdGQlFWUXNVMEZCVXl4MVFrRkJWQ3hUUVVGVExFTkJRVVU3UlVGQldTeERRVUZGTEVOQlJTOUVMRU5CUTBZc1EwRkJRenRCUVVWV0xFTkJRVU03UVVGRlJDeHZRa0ZCYjBJc1EwRkJReXhUUVVGVExFZEJRVWM3UlVGREwwSXNTMEZCU3l4RlFVRkZMR3RDUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETzBsQlEzSkNMRTlCUVU4c1JVRkJSU3hyUWtGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRlZPMGxCUTNCRExGRkJRVkVzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwN1NVRkRNVUlzVFVGQlRTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRKUVVONFFpeFBRVUZQTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTk8wbEJRM3BDTEZkQlFWY3NSVUZCUlN4clFrRkJVeXhEUVVGRE8wVkJRM3BDTEVOQlFVTXNRMEZCUXp0RlFVTkdMRzlDUVVGdlFpeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlU3UlVGREwwTXNhMEpCUVd0Q0xFVkJRVVVzYTBKQlFWTXNRMEZCUXp0QlFVTm9ReXhEUVVGRE8wRkJRVU1zU1VGQlFTeFJRVUZCTEVkQlJXRXNiMEpCUVc5Q08wRkJRVUVzVDBGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4UlFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenRCUXpsRWJrTXNTVUZCUVN4TlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4WFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4bFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVWQkxFbEJRVUVzVVVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR2xDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVUZyUkN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZGYkVRc1RVRkJUU3d5UWtGQk1rSXNSMEZCUnl4RFFVRkRPMFZCUTI1RExEWkNRVUUyUWp0RlFVTTNRaXhqUVVGak8wVkJRMlE3UVVGRFJpeERRVUZETEV0QlFVczdSVUZEU2l4TlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGQkxEaENRVUZqTEVWQlFVTXNRMEZCUXp0RlFVVXhRaXhOUVVGTkxFMUJRVTBzWjBKQlExWXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVUVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4UlFVRkJMSEZDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRTlCUVVFc1EwRkJRU3hQUVVGTk8wbEJRMHdzVTBGQlV5eEZRVUZETEN0RFFVRXJRenRKUVVONlJDeEpRVUZKTEVWQlFVTXNWMEZCVnp0SlFVTm9RaXhQUVVGUExFVkJRVVU3UlVGQlpTeEhRVVYyUWl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVOTUxFTkJRVU1zWlVGRFZDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhQUVVGQkxFTkJRVUVzVDBGQlRUdEpRVU5NTEZOQlFWTXNSVUZCUXl3clEwRkJLME03U1VGRGVrUXNTVUZCU1N4RlFVRkRMRk5CUVZNN1NVRkRaQ3hQUVVGUExFVkJRVVU3UlVGQk1rSXNSMEZGYmtNc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGRFRpeERRVU5TTEVOQlEwZzdSVUZGUkN4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4UlFVRkJMRU5CUVVFc1QwRkJUenRKUVVOT0xFdEJRVXNzUlVGRFNDdzJRa0ZCTmtJc1IwRkRla0lzUTBGQlF5eERRVUZETEhOQ1FVRnpRaXhEUVVGRExFZEJRM3BDTEVOQlFVTXNRMEZCUXl4WlFVRlpMRU5CUTI1Q08wbEJRMFFzVTBGQlV5eEZRVUZGTEVsQlFVRXNiVUpCUVZVc1JVRkJReXhuUTBGQlowTXNSVUZCUlR0TlFVTjBSQ3gzUTBGQmQwTXNSVUZCUlN3MlFrRkJOa0k3VFVGRGRrVXNkME5CUVhkRExFVkJRM1JETEVOQlFVTTdTVUZEVEN4RFFVRkRMRU5CUVVVN1NVRkRTQ3hOUVVGTkxFVkJRVVU3UlVGQlR5eG5Ra0ZGWml4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRWxCUVVrN1NVRkRTQ3hQUVVGUExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4TlFVRlBPMGxCUXpWQ0xFVkJRVVVzUlVGQlF5eEpRVUZKTzBsQlExQXNVMEZCVXl4RlFVRkZMRU5CUVVVN1NVRkRZaXhYUVVGWExFVkJRVVVzUTBGQlJUdEpRVU5tTEZsQlFWa3NSVUZCUlN4RFFVRkZPMGxCUTJoQ0xGVkJRVlVzUlVGQlJUdEZRVUZGTEVkQlJXSXNOa0pCUVRaQ0xFZEJRekZDTEVOQlFVTXNRMEZCUXl4cFEwRkJhVU1zUTBGQlF5eEhRVU53UXl4RFFVRkRMRU5CUVVNc2IwSkJRVzlDTEVOQlEzUkNMRU5CUTBNc1EwRkJRenRCUVVWa0xFTkJRVU03UVVGRlJDd3lRa0ZCTWtJc1EwRkJReXhUUVVGVExFZEJRVWM3UlVGRGRFTXNOa0pCUVRaQ0xFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWVHRGUVVONFJDeGpRVUZqTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZUdEZRVU42UXl3d1FrRkJNRUlzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVNM1F5eERRVUZETzBGQlFVTXNTVUZCUVN4UlFVRkJMRWRCUldFc01rSkJRVEpDTzBGQlFVRXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hSUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRM2hGTVVNc1NVRkJRU3hOUVVGQkxFZEJRVUVzZFVKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hYUVVGQkxFZEJRVUVzVDBGQlFUdEJRVVZCTEVsQlFVRXNaVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGbEJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4aFFVRkJMRWRCUVVFc1QwRkJRVHRCUVV0QkxFbEJRVUVzVlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZMUVN4SlFVRkJMRkZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTlCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMSEZDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUVc5R0xGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzZVVKQlFVRXNWMEZCUVN4bFFVRkJMRTlCUVVFc2EwTkJRVUVzYVVKQlFVRXNUMEZCUVN4UFFVRkJMRkZCUVVFc1owSkJRVUVzVDBGQlFTeFBRVUZCTEZsQlFVRXNkMEpCUVVFc1dVRkJRU3hEUVVGQkxGZEJRVUVzVjBGQlFTeFhRVUZCTEVkQlFVRXNaMEpCUVVFc1IwRkJRU3hwUWtGQlFTeExRVUZCTEZkQlFVRTdRVUZCUVN4VFFVRkJMSGRDUVVGQkxFZEJRVUVzUlVGQlFTeFhRVUZCTEZOQlFVRXNWMEZCUVN4SlFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeFhRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMRzlDUVVGQkxFZEJRVUVzZDBKQlFVRXNSMEZCUVN3MFFrRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFTeFZRVUZCTEV0QlFVRXNSMEZCUVN4M1FrRkJRU3hEUVVGQkxGZEJRVUVzVDBGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hYUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1NVRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYTBKQlFVRXNUVUZCUVN4RFFVRkJMRk5CUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRk5CUVVFc1NVRkJRU3hIUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNZMEZCUVN4SlFVRkJMRXRCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzVFVGQlFTeEZRVUZCTEVkQlFVRXNSVUZCUVN4SlFVRkJMRmxCUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzUjBGQlFTeE5RVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeE5RVUZCTEZsQlFVRXNUVUZCUVR0QlFVVndSaXhOUVVGTkxEWkNRVUUyUWl4SFFVRkhMRU5CUVVNN1JVRkRja01zYTBKQlFXdENPMFZCUTJ4Q0xHOUNRVUZ2UWp0RlFVTndRaXhSUVVGUk8wVkJRMUlzVjBGQlZ6dEZRVU5ZTEhGQ1FVRnhRanRGUVVOeVFqdEJRVU5HTEVOQlFVTXNTMEZCU3p0RlFVTktMRTFCUVUwc1EwRkJReXhIUVVGSExFbEJRVUVzT0VKQlFXTXNSVUZCUXl4RFFVRkRPMFZCUXpGQ0xFMUJRVTBzVlVGQlZTeEhRVUZITEVsQlFVRXNhVUpCUVZVc1JVRkJReXdyUWtGQmEwSXNRMEZCUXp0RlFVVnFSQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZCTEhWQ1FVRlhMRVZCUVVNc05FSkJRV2xDTEVOQlFVTTdSVUZGT1VNc1RVRkJUU3hqUVVGakxFZEJRVWNzU1VGQlFTeDFRa0ZCVnl4RlFVRkRMRFJEUVVGcFF5eERRVUZETzBWQlEzSkZMRTFCUVUwN1NVRkJSU3hSUVVGUkxFVkJRVVVzWTBGQll5eEhRVUZITzBWQlFVY3NRMEZCUXl4SFFVTnlReXcwUWtGQk5FSXNRMEZCUXl4clFrRkJhMElzUTBGQlF6dEZRVU5zUkN4TlFVRk5MRzlDUVVGdlFpeEhRVU40UWl4alFVRmpMRU5CUVVNc1RVRkJUU3hMUVVGTExHTkJRV01zUTBGQlF5eE5RVUZOTEVkQlF6RkRMRXRCUVVrc1IwRkRTaXhKUVVGSExHTkJRV01zUTBGQlF5eE5RVUZQTEVkQlFVVTdSVUZGYkVNc1RVRkJUU3hQUVVGUExFZEJRVWNzUTBGQlFTeExRVUZOTzBsQlEzQkNMSEZDUVVGeFFpeERRVUZETEV0QlFVc3NRMEZCUXp0SlFVTTFRaXhOUVVGTkxHdENRVUZyUWl4SFFVRkhMR05CUVdNc1EwRkJReXhIUVVGSExFTkJRek5ETEVOQlFVTTdUVUZCUlN4UFFVRlBPMDFCUVVVN1NVRkJUeXhEUVVGRExFdEJRVTBzUjBGQlJTeE5RVUZQTEUxQlFVc3NUMEZCVVN4RlFVTnNSQ3hEUVVGRE8wbEJRMFFzVlVGQlZTeERRVUZETzAxQlExUXNTMEZCU3l4RlFVRkZMR3REUVVGdlFpeERRVUZETEcxQ1FVRnRRanROUVVNdlF5eFJRVUZSTEVWQlFVVXNjME5CUVhkQ0xFTkJRVU1zVFVGQlRUdE5RVU42UXl4VlFVRlZMRVZCUVVVN1VVRkRWaXgzUWtGQmQwSXNSVUZCUlN4NVEwRkJNa0lzUTBGQlF5eFJRVUZSTzFGQlF6bEVMRkZCUVZFc1JVRkJSU3hQUVVGUE8xRkJRMnBDTEUxQlFVMHNSVUZCUlR0TlFVTldPMGxCUTBZc1EwRkJReXhEUVVGRE8wVkJRMG9zUTBGQlF6dEZRVVZFTEUxQlFVMHNUVUZCVFN4blFrRkRWaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUVN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxGRkJRVUVzY1VKQlEwVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVDBGQlFTeERRVUZCTEU5QlFVMDdTVUZEVEN4VFFVRlRMRVZCUVVNc2FVUkJRV2xFTzBsQlF6TkVMRWxCUVVrc1JVRkJReXhYUVVGWE8wbEJRMmhDTEU5QlFVOHNSVUZCUlN4RFFVRkJMRXRCUVUwc1YwRkJWeXhEUVVGRE8wVkJRVVVzUjBGRk5VSXNRMEZCUXl4RFFVRkRMRmRCUVZjc1EwRkRVaXhEUVVGRExHVkJRMVFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1QwRkJRU3hEUVVGQkxFOUJRVTA3U1VGRFRDeFRRVUZUTEVWQlFVTXNhVVJCUVdsRU8wbEJRek5FTEVsQlFVa3NSVUZCUXl4VFFVRlRPMGxCUTJRc1QwRkJUeXhGUVVGRkxGRkJRVk03U1VGRGJFSXNVVUZCVVN4RlFVRkZMR05CUVdNc1EwRkJReXhOUVVGTkxFdEJRVXM3UlVGQlJTeEhRVVZ5UXl4RFFVRkRMRU5CUVVNc2FVSkJRV2xDTEVWQlFVVXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eERRVU4wUXl4RFFVTlNMRU5CUTBnN1JVRkZSQ3h2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhSUVVGQkxFTkJRVUVzVDBGQlR6dEpRVU5PTEZOQlFWTXNSVUZCUXl4clEwRkJhME03U1VGRE5VTXNTMEZCU3l4RlFVTklMR05CUVdNc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF5eEhRVU4yUWl4RFFVRkRMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNSMEZEY0VJc1EwRkJReXhEUVVGRExHdENRVUZyUWl4RlFVRkZMRU5CUVVNc1kwRkJZeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVU5zUkR0SlFVTkVMRTlCUVU4c1JVRkJSU3hQUVVGUk8wbEJRMnBDTEUxQlFVMHNSVUZCUlR0RlFVRlBMR2RDUVVWbUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRWxCUVVFc1EwRkJRU3hQUVVGSE8wbEJRVU1zVFVGQlRTeEZRVUZGTzBWQlFVVXNSMEZEV2l4alFVRmpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NTMEZCU3p0SlFVTndReXh2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXh4UWtGQlFTeERRVUZCTEU5QlFXOUNPMDFCUTI1Q0xFZEJRVWNzUlVGQlJTeExRVUZOTzAxQlExZ3NTMEZCU3l4RlFVRkZMRXRCUVUwN1RVRkRZaXh2UWtGQmIwSXNSVUZCUlN4dlFrRkJjVUk3VFVGRE0wTXNhMEpCUVd0Q0xFVkJRVVU3U1VGQmJVSXNRMEZEZUVNc1EwRkJRenRGUVVWT0xFTkJRVU1zUTBGRFJTeERRVU5GTEVOQlFVTTdRVUZGWkN4RFFVRkRPMEZCUlVRc05rSkJRVFpDTEVOQlFVTXNVMEZCVXl4SFFVRkhPMFZCUTNoRExHdENRVUZyUWl4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRUdEZRVU53UXl4dlFrRkJiMElzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVk8wVkJReTlETEZkQlFWY3NSVUZCUlN4clFrRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTzBWQlEzUkRMRkZCUVZFc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZPMFZCUTI1RExIRkNRVUZ4UWl4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVTdSVUZEYUVRc05FSkJRVFJDTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGREwwTXNRMEZCUXp0QlFVRkRMRWxCUVVFc1VVRkJRU3hIUVVWaExEWkNRVUUyUWp0QlFVRkJMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzVVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5zU0RWRExFbEJRVUVzVFVGQlFTeEhRVUZCTEhWQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVjBGQlFTeEhRVUZCTEU5QlFVRTdRVUZGUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRk5CUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZGUVN4SlFVRkJMR0ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJTMEVzU1VGQlFTeG5Ra0ZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHMUNRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdsQ1FVRkJMRWRCUVVFc1QwRkJRVHRCUVVGclJDeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEhsQ1FVRkJMRmRCUVVFc1pVRkJRU3hQUVVGQkxHdERRVUZCTEdsQ1FVRkJMRTlCUVVFc1QwRkJRU3hSUVVGQkxHZENRVUZCTEU5QlFVRXNUMEZCUVN4WlFVRkJMSGRDUVVGQkxGbEJRVUVzUTBGQlFTeFhRVUZCTEZkQlFVRXNWMEZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzYVVKQlFVRXNTMEZCUVN4WFFVRkJPMEZCUVVFc1UwRkJRU3gzUWtGQlFTeEhRVUZCTEVWQlFVRXNWMEZCUVN4VFFVRkJMRmRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNWMEZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3h2UWtGQlFTeEhRVUZCTEhkQ1FVRkJMRWRCUVVFc05FSkJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRXNWVUZCUVN4TFFVRkJMRWRCUVVFc2QwSkJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzVjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEd0Q1FVRkJMRTFCUVVFc1EwRkJRU3hUUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hUUVVGQkxFbEJRVUVzUjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMR05CUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1NVRkJRU3haUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNUVUZCUVN4WlFVRkJMRTFCUVVFN1FVRkZiRVFzVFVGQlRTeHRRa0ZCYlVJc1IwRkJSeXhEUVVGRE8wVkJRek5DTEV0QlFVczdSVUZEVEN4dlFrRkJiMEk3UlVGRGNFSTdRVUZEUml4RFFVRkRMRXRCUVVzN1JVRkJRU3hKUVVGQkxHOUNRVUZCTzBWQlEwb3NUVUZCVFN4RFFVRkRMR05CUVdNc1JVRkJSU3hwUWtGQmFVSXNRMEZCUXl4SFFVRkhMRWxCUVVFc1pVRkJVU3hGUVVGRExFMUJRVTA3U1VGQlFTeEpRVUZCTEhGQ1FVRkJPMGxCUTNwRUxGRkJRVUVzY1VKQlFVRXNSMEZCVHl4clFrRkJhMElzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMR05CUVVFc2NVSkJRVUVzZFVKQlFXcERMSEZDUVVGQkxFTkJRVzFETEZGQlFWRTdSVUZEY0VRc1EwRkJReXhEUVVGRE8wVkJSVVlzVFVGQlRUdEpRVUZGTzBWQlFXMUNMRU5CUVVNc1IwRkJSeXhKUVVGQkxHZERRVUZsTEVWQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRGUVVOMlJDeE5RVUZOTEdGQlFXRXNTVUZCUVN4dlFrRkJRU3hIUVVGSExHdENRVUZyUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhqUVVGQkxHOUNRVUZCTEhWQ1FVRnlRaXh2UWtGQlFTeERRVUYxUWl4TlFVRk5PMFZCUTI1RUxFMUJRVTBzYjBKQlFXOUNMRWRCUVVjc1NVRkJRU3h6UTBGQmEwSXNSVUZETjBNc1MwRkJTeXhEUVVGRExFOUJRVThzUlVGRFlpeGhRVUZoTEVWQlEySXNTMEZCU3l4RFFVRkRMRTFCUTFJc1EwRkJRenRGUVVWRUxFMUJRVTBzYjBKQlFXOUNMRWRCUVVjc1NVRkJRU3gxUWtGQlZ5eEZRVUZETEd0RFFVRjFRaXhEUVVGRE8wVkJSV3BGTEVsQlFVRXNaMEpCUVZNc1JVRkJReXhOUVVGTk8wbEJRVUVzU1VGQlFTeHpRa0ZCUVR0SlFVTmtMR2xDUVVGcFFpeEZRVUZCTEhOQ1FVRkJMRWRCUVVNc2EwSkJRV3RDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhqUVVGQkxITkNRVUZCTEhWQ1FVRnFReXh6UWtGQlFTeERRVUZ0UXl4UlFVRlJMRU5CUVVNN1JVRkRhRVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVVzUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4alFVRmpMRVZCUVVVc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXp0RlFVVXhSU3hOUVVGTkxIVkNRVUYxUWl4SFFVRkhMRU5CUVVFc1MwRkJUVHRKUVVOd1F5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRExHTkJRV01zUTBGQlF6dEpRVU5zUXl4dlFrRkJiMElzUTBGQlF5eExRVUZMTEVOQlFVTTdSVUZETjBJc1EwRkJRenRGUVVWRUxHOUNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExFbEJRVUVzUTBGQlFTeFBRVUZITzBsQlFVTXNUMEZCVHl4RlFVRkZMSEZDUVVGUExFTkJRVU1zVjBGQldUdEpRVUZETEZOQlFWTXNSVUZCUXp0RlFVRjFRaXhuUWtGRGJFVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zU1VGQlFTeERRVUZCTEU5QlFVYzdTVUZCUXl4WlFVRlpMRVZCUVVVN1JVRkJSU3huUWtGRGJrSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4SlFVRkpPMGxCUVVNc1QwRkJUeXhGUVVGRkxIbENRVUZYTEVOQlFVTXNXVUZCWVR0SlFVRkRMRVZCUVVVc1JVRkJRenRGUVVGSkxFZEJRelZETEVkQlFVVXNZVUZCWVN4SlFVRkpMRWRCUVVrc1NVRkJSeXhMUVVGTExFTkJRVU1zVFVGQlR5eEZRVU55UXl4RFFVRkRMR1ZCUTFBc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNhVUpCUVVFc1EwRkJRU3hKUVVGSk8wbEJRMGdzVDBGQlR5eEZRVUZGTEhsQ1FVRlhMRU5CUVVNc1RVRkJUenRKUVVNMVFpeEZRVUZGTEVWQlFVTXNTVUZCU1R0SlFVTlFMRXRCUVVzc1JVRkJSU3gxUWtGQlV5eERRVUZETzBWQlFXZENMRWRCUldoRExHOUNRVUZ2UWl4SFFVTnFRaXh2UWtGQmIwSXNTVUZCU1N4SlFVRkpMRU5CUVVNN1JVRkJRU3hGUVVNM1FpeHZRa0ZEUVN4RFFVTklMRU5CUVVNc1pVRkRUaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4SlFVRkJMRU5CUVVFc1QwRkJSenRKUVVGRExGTkJRVk1zUlVGQlF6dEZRVUZwUXl4blFrRkRPVU1zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1UwRkJRU3hEUVVGQkxFOUJRVkU3U1VGQlF5eFBRVUZQTEVWQlFVVXNZMEZCWlR0SlFVRkRMRTlCUVU4c1JVRkJSVHRGUVVGM1FpeERRVUZGTEVOQlEyNUZMRU5CUTBZc1EwRkJRenRCUVVWV0xFTkJRVU03UVVGRlJDeHRRa0ZCYlVJc1EwRkJReXhUUVVGVExFZEJRVWM3UlVGRE9VSXNTMEZCU3l4RlFVRkZMR3RDUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETzBsQlEzSkNMRTlCUVU4c1JVRkJSU3hyUWtGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRlZPMGxCUTNCRExGRkJRVkVzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwN1NVRkRNVUlzVFVGQlRTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRKUVVONFFpeFBRVUZQTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTk8wbEJRM3BDTEZkQlFWY3NSVUZCUlN4clFrRkJVeXhEUVVGRE8wVkJRM3BDTEVOQlFVTXNRMEZCUXp0RlFVTkdMRzlDUVVGdlFpeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlU3UlVGREwwTXNhMEpCUVd0Q0xFVkJRVVVzYTBKQlFWTXNRMEZCUXp0QlFVTm9ReXhEUVVGRE8wRkJRVU1zU1VGQlFTeFJRVUZCTEVkQlJXRXNiVUpCUVcxQ08wRkJRVUVzVDBGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4UlFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJoR2JFTXNTVUZCUVN4TlFVRkJMRWRCUVVFc2RVSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4WFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEU5QlFVRTdRVUZGUVN4SlFVRkJMRkZCUVVFc1IwRkJRU3hQUVVGQk8wRkJTMEVzU1VGQlFTeFZRVUZCTEVkQlFVRXNUMEZCUVR0QlFVbEJMRWxCUVVFc1dVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRlFTeEpRVUZCTEZsQlFVRXNSMEZCUVN4UFFVRkJPMEZCU1VFc1NVRkJRU3hoUVVGQkxFZEJRVUVzVDBGQlFUdEJRVTFCTEVsQlFVRXNPRUpCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRFJDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUVRCSExGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzZVVKQlFVRXNWMEZCUVN4bFFVRkJMRTlCUVVFc2EwTkJRVUVzYVVKQlFVRXNUMEZCUVN4UFFVRkJMRkZCUVVFc1owSkJRVUVzVDBGQlFTeFBRVUZCTEZsQlFVRXNkMEpCUVVFc1dVRkJRU3hEUVVGQkxGZEJRVUVzVjBGQlFTeFhRVUZCTEVkQlFVRXNaMEpCUVVFc1IwRkJRU3hwUWtGQlFTeExRVUZCTEZkQlFVRTdRVUZCUVN4VFFVRkJMSGRDUVVGQkxFZEJRVUVzUlVGQlFTeFhRVUZCTEZOQlFVRXNWMEZCUVN4SlFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeFhRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMRzlDUVVGQkxFZEJRVUVzZDBKQlFVRXNSMEZCUVN3MFFrRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFTeFZRVUZCTEV0QlFVRXNSMEZCUVN4M1FrRkJRU3hEUVVGQkxGZEJRVUVzVDBGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hYUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1NVRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYTBKQlFVRXNUVUZCUVN4RFFVRkJMRk5CUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRk5CUVVFc1NVRkJRU3hIUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNZMEZCUVN4SlFVRkJMRXRCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzVFVGQlFTeEZRVUZCTEVkQlFVRXNSVUZCUVN4SlFVRkJMRmxCUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzUjBGQlFTeE5RVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeE5RVUZCTEZsQlFVRXNUVUZCUVR0QlFVVXhSeXhOUVVGTkxEUkNRVUUwUWl4SFFVRkpMR05CUVdNc1NVRkJTenRGUVVOMlJDeFBRVU5GTEVsQlFVRXNZVUZCU3l4RlFVRkRMR05CUVdNN1JVRkRiRUk3UlVGQlFTeERRVU5ETEUxQlFVMHNRMEZCUXp0RlFVTlNPMFZCUVVFc1EwRkRReXhQUVVGUExFTkJRVVVzUzBGQlN5eEpRVUZOTEV0QlFVc3NRMEZCUXl4UlFVRlJMRWRCUVVjc1ZVRkJWU3hIUVVGSExGbEJRV0U3UlVGRGFFVTdSVUZCUVN4RFFVTkRMRk5CUVZNc1EwRkJSU3hMUVVGTExFbEJRMllzUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUVVVN1JVRkJUU3hEUVVGRExFdEJRVXM3U1VGRGRrSXNUVUZCVFR0TlFVRkZMRTlCUVU4N1RVRkJSU3hOUVVGTk8wMUJRVVVzVVVGQlVUdE5RVUZGTzBsQlFWa3NRMEZCUXl4SFFVRkhMRXRCUVVzN1NVRkRlRVFzVDBGQlR6dE5RVUZGTEU5QlFVODdUVUZCUlN4TlFVRk5PMDFCUVVVc1VVRkJVVHROUVVGRk8wbEJRVmtzUTBGQlF6dEZRVU51UkN4RFFVRkRMRU5CUTBnN1JVRkRRVHRGUVVGQkxFTkJRME1zUzBGQlN5eERRVUZETEVOQlFVTTdRVUZGWkN4RFFVRkRPMEZCUlVRc1RVRkJUU3hoUVVGaExFZEJRVWNzUTBGQlF6dEZRVUZGTzBGQlFYTkNMRU5CUVVNc1MwRkJTenRGUVVOdVJDeE5RVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkJMSFZDUVVGWExFVkJRVU1zUTBGQlF6dEZRVU01UWl4TlFVRk5MRlZCUVZVc1IwRkJSeXhKUVVGQkxHbENRVUZWTEVWQlFVTXNLMEpCUVd0Q0xFTkJRVU03UlVGRmFrUXNUVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJRU3gxUWtGQlZ5eEZRVUZETERSQ1FVRnBRaXhEUVVGRE8wVkJRemxETEUxQlFVMHNZMEZCWXl4SFFVRkhMRWxCUVVFc2RVSkJRVmNzUlVGQlF5dzBRMEZCYVVNc1EwRkJRenRGUVVWeVJTeE5RVUZOTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVVzY1VKQlFYRkNMRU5CUVVNc1IwRkJSeXhKUVVGQkxHVkJRVkVzUlVGQlF5eE5RVU16UkN4alFVRmpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zVVVGQlVTeEZRVUZGTEV0QlFVc3NTMEZCU3p0SlFVTjZReXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhPMDFCUVVVc1MwRkJTenROUVVGRkxGRkJRVkVzUlVGQlJUdEpRVUZMTEVOQlFVTTdTVUZEYmtRc1QwRkJUeXhSUVVGUk8wVkJRMnBDTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkRVQ3hEUVVGRE8wVkJRMFFzVFVGQlRTeERRVUZETEN0Q1FVRXJRaXhGUVVGRkxHdERRVUZyUXl4RFFVRkRMRWRCUTNwRkxFbEJRVUVzWlVGQlVTeEZRVUZETEV0QlFVc3NRMEZCUXp0RlFVTnFRaXhOUVVGTkxFTkJRVU1zTmtKQlFUWkNMRVZCUVVVc1owTkJRV2RETEVOQlFVTXNSMEZEY2tVc1NVRkJRU3hsUVVGUkxFVkJRVU1zUzBGQlN5eERRVUZETzBWQlJXcENMRTFCUVUwc2IwSkJRVzlDTEVkQlFVY3NUVUZCVHl4alFVRmpMRWxCUVVzN1NVRkRja1FzWTBGQll5eERRVUZETEU5QlFVOHNRMEZCUlN4aFFVRmhMRWxCUVVzN1RVRkRlRU1zVlVGQlZTeERRVUZETzFGQlExUXNTMEZCU3l4RlFVRkZMR3REUVVGdlFpeERRVUZETEZWQlFWVTdVVUZEZEVNc1VVRkJVU3hGUVVGRkxITkRRVUYzUWl4RFFVRkRMRTFCUVUwN1VVRkRla01zYlVKQlFXMUNMRVZCUVVVN1ZVRkRia0lzV1VGQldTeEZRVUZGTEdGQlFXRXNRMEZCUXl4TlFVRk5PMVZCUTJ4RExITkNRVUZ6UWl4RlFVRkZMR0ZCUVdFc1EwRkJReXhQUVVGUE8xVkJRemRETEhWQ1FVRjFRaXhGUVVGRkxHRkJRV0VzUTBGQlF5eFJRVUZSTzFWQlF5OURMSGRDUVVGM1FpeEZRVUZGTEhsRFFVRXlRaXhEUVVGRExGRkJRVkU3VlVGRE9VUXNZMEZCWXl4RlFVRkZMREJDUVVGaExFTkJRVU1zUzBGQlN6dFZRVU51UXl4VlFVRlZMRVZCUVVVc2MwSkJRVk1zUTBGQlF5eExRVUZMTzFWQlF6TkNMR2RDUVVGblFpeEZRVUZGTEZWQlFWVTdWVUZETlVJc1VVRkJVU3hGUVVGRk8xRkJRMW83VFVGRFJpeERRVUZETEVOQlFVTTdTVUZEU2l4RFFVRkRMRU5CUVVNN1NVRkRSaXhOUVVGTkxGRkJRVkVzUTBGQlF5eEpRVUZCTERCQ1FVRnBRaXhGUVVGRExHTkJRV01zUTBGQlF5eERRVUZETzBsQlEycEVMRTFCUVUwc1dVRkJXU3hIUVVGSExHTkJRV01zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0TlFVRkZPMGxCUVU4c1EwRkJReXhMUVVGTExFMUJRVTBzUTBGQlF6dEpRVU12UkN4UlFVRlJMRU5CUVVNc1NVRkJRU3cyUWtGQmIwSXNSVUZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdSVUZEZWtRc1EwRkJRenRGUVVWRUxFMUJRVTBzTUVKQlFUQkNMRWRCUVVjc1RVRkJRU3hEUVVGQkxFdEJRVms3U1VGRE4wTXNUVUZCVFR0TlFVRkZMRkZCUVZFc1JVRkJSU3hqUVVGakxFZEJRVWNzUlVGQlJUdE5RVUZGTEZWQlFWVXNSVUZCUlN4blFrRkJaMElzUjBGQlJ6dEpRVUZITEVOQlFVTXNSMEZEZUVVc05FSkJRVFJDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU03U1VGRmJFUXNTVUZCU1N4blFrRkJaMElzUTBGQlF5eE5RVUZOTEVkQlFVY3NZMEZCWXl4RFFVRkRMRTFCUVUwc1JVRkJSVHROUVVOdVJDeE5RVUZOTEc5Q1FVRnZRaXhEUVVGRExHTkJRV01zUTBGQlF6dEpRVU0xUXp0SlFVTkJMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU1zUjBGQlJ5eERRVU0xUXl4RFFVRkRPMDFCUVVVc1RVRkJUVHROUVVGRk8wbEJRVkVzUTBGQlF5eExRVUZOTEVkQlFVVXNUVUZCVHl4TlFVRkxMRTlCUVZFc1JVRkRiRVFzUTBGQlF6dEpRVU5FTEZWQlFWVXNRMEZCUXp0TlFVTlVMRXRCUVVzc1JVRkJSU3hyUTBGQmIwSXNRMEZCUXl4WFFVRlhPMDFCUTNaRExGRkJRVkVzUlVGQlJTeHpRMEZCZDBJc1EwRkJReXhOUVVGTk8wMUJRM3BETEcxQ1FVRnRRaXhGUVVGRk8xRkJRMjVDTEUxQlFVMHNSVUZCUlN4cFFrRkJhVUk3VVVGRGVrSXNVVUZCVVN4RlFVRkZMSE5EUVVGM1FpeERRVUZETEdOQlFXTTdVVUZEYWtRc1kwRkJZeXhGUVVGRkxEQkNRVUZoTEVOQlFVTXNTMEZCU3p0UlFVTnVReXhWUVVGVkxFVkJRVVVzYzBKQlFWTXNRMEZCUXp0TlFVTjRRanRKUVVOR0xFTkJRVU1zUTBGQlF6dEpRVU5HTEUxQlFVMHNlVUpCUVhsQ0xFZEJRVWNzWjBKQlFXZENMRU5CUVVNc1IwRkJSeXhEUVVOd1JDeERRVUZETzAxQlFVVTdTVUZCVVN4RFFVRkRMRXRCUVVzc1QwRkRia0lzUTBGQlF6dEpRVU5FTEUxQlFVMHNVVUZCVVN4RFFVTmFMRWxCUVVFc2NVSkJRVmtzUlVGQlF6dE5RVU5ZTEdOQlFXTXNSVUZCUlN4NVFrRkJlVUk3VFVGRGVrTXNkMEpCUVhkQ0xFVkJRVVU3U1VGRE5VSXNRMEZCUXl4RFFVTklMRU5CUVVNN1NVRkRSQ3h4UWtGQmNVSXNRMEZCUXl4TFFVRkxMRU5CUVVNN1NVRkROVUlzWjBOQlFXZERMRU5CUVVNc1MwRkJTeXhEUVVGRE8wVkJRM3BETEVOQlFVTTdSVUZGUkN4TlFVRk5MRzlDUVVGdlFpeEhRVUZKTEV0QlFVc3NTVUZCU3p0SlFVTjBReXh4UWtGQmNVSXNRMEZCUlN4VFFVRlRMRXRCUVUwN1RVRkRjRU1zUjBGQlJ5eFRRVUZUTzAxQlExb3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhIUVVGSE8xRkJRMllzUjBGQlJ5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJRenRSUVVNelFpeFJRVUZSTEVWQlFVVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzAxQlEzUkRPMGxCUTBZc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRFRDeERRVUZETzBWQlJVUXNUVUZCVFN4UlFVRlJMRWRCUVVjc1RVRkJRU3hEUVVGQkxFdEJRVms3U1VGRE0wSXNUVUZCVFR0TlFVRkZMRkZCUVZFc1JVRkJSU3hqUVVGakxFZEJRVWM3U1VGQlJ5eERRVUZETEVkQlEzSkRMRFJDUVVFMFFpeERRVUZETEd0Q1FVRnJRaXhEUVVGRE8wbEJSV3hFTEVsQlFVa3NZMEZCWXl4RFFVRkRMRTFCUVUwc1IwRkJSeXhqUVVGakxFTkJRVU1zVFVGQlRTeEZRVUZGTzAxQlEycEVMR3REUVVGclF5eERRVUZETEVsQlFVa3NRMEZCUXp0TlFVTjRReXhuUTBGQlowTXNRMEZCUXl4SlFVRkpMRU5CUVVNN1NVRkRlRU1zUTBGQlF5eE5RVUZOTzAxQlEwd3NUVUZCVFN4dlFrRkJiMElzUTBGQlF5eGpRVUZqTEVOQlFVTTdUVUZETVVNc2NVSkJRWEZDTEVOQlFVTXNTMEZCU3l4RFFVRkRPMGxCUXpsQ08wVkJRMFlzUTBGQlF6dEZRVVZFTEUxQlFVMHNWMEZCVnl4SFFVRkhMRU5CUVVFc1MwRkJUVHRKUVVONFFpeE5RVUZOTEhGQ1FVRnhRaXhIUVVGSE8wMUJRVVVzUjBGQlJ6dEpRVUZ0UWl4RFFVRkRPMGxCUTNaRUxFdEJRVXNzVFVGQlRTeFpRVUZaTEVsQlFVa3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RlFVRkZPMDFCUXpGRUxIRkNRVUZ4UWl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRExGRkJRVkVzUjBGQlJ5eExRVUZMTzBsQlEzUkVPMGxCUlVFc2NVSkJRWEZDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU03U1VGRE5VTXNhME5CUVd0RExFTkJRVU1zU1VGQlNTeERRVUZETzBWQlF6RkRMRU5CUVVNN1JVRkZSQ3hOUVVGTkxHTkJRV01zUjBGQlJ5eERRVUZCTEV0QlFVMDdTVUZETTBJc2EwTkJRV3RETEVOQlFVTXNTMEZCU3l4RFFVRkRPMGxCUTNwRExHZERRVUZuUXl4RFFVRkRMRXRCUVVzc1EwRkJRenRGUVVONlF5eERRVUZETzBWQlJVUXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVRXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hSUVVGQkxGRkJRMGNzSzBKQlFTdENMR2xDUVVNNVFpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXcwUWtGQlFTeERRVUZCTEU5QlFUSkNPMGxCUXpGQ0xHTkJRV01zUlVGQlJTeGpRVUZsTzBsQlF5OUNMREJDUVVFd1FpeEZRVUZGTERCQ1FVRXlRanRKUVVOMlJDdzJRa0ZCTmtJc1JVRkJSVHRGUVVFNFFpeERRVU01UkN4RFFVTkdMRVZCUTBFc1kwRkJZeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEdsQ1FVTjRRaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl3NFFrRkJRU3hEUVVGQkxFOUJRVFpDTzBsQlF6VkNMR05CUVdNc1JVRkJSU3hqUVVGbE8wbEJReTlDTEd0Q1FVRnJRaXhGUVVGRkxHdENRVUZ0UWp0SlFVTjJReXh2UWtGQmIwSXNSVUZCUlN4dlFrRkJjVUk3U1VGRE0wTXNVVUZCVVN4RlFVRkZMRkZCUVZNN1NVRkRia0lzVjBGQlZ5eEZRVUZGTEZkQlFWazdTVUZEZWtJc2NVSkJRWEZDTEVWQlFVVXNjVUpCUVhOQ08wbEJRemRETERSQ1FVRTBRaXhGUVVGRk8wVkJRVFpDTEVOQlF6VkVMRU5CUlVnc1EwRkJRenRCUVVWUUxFTkJRVU03UVVGRlJDeGhRVUZoTEVOQlFVTXNVMEZCVXl4SFFVRkhPMFZCUTNoQ0xIRkNRVUZ4UWl4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEzaERMRU5CUVVNN1FVRkJReXhKUVVGQkxGRkJRVUVzUjBGRllTeGhRVUZoTzBGQlFVRXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hSUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRek5NTlVJc1NVRkJRU3hOUVVGQkxFZEJRVUVzZFVKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hYUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUVhkRExGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzZVVKQlFVRXNWMEZCUVN4bFFVRkJMRTlCUVVFc2EwTkJRVUVzYVVKQlFVRXNUMEZCUVN4UFFVRkJMRkZCUVVFc1owSkJRVUVzVDBGQlFTeFBRVUZCTEZsQlFVRXNkMEpCUVVFc1dVRkJRU3hEUVVGQkxGZEJRVUVzVjBGQlFTeFhRVUZCTEVkQlFVRXNaMEpCUVVFc1IwRkJRU3hwUWtGQlFTeExRVUZCTEZkQlFVRTdRVUZCUVN4VFFVRkJMSGRDUVVGQkxFZEJRVUVzUlVGQlFTeFhRVUZCTEZOQlFVRXNWMEZCUVN4SlFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeFhRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMRzlDUVVGQkxFZEJRVUVzZDBKQlFVRXNSMEZCUVN3MFFrRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFTeFZRVUZCTEV0QlFVRXNSMEZCUVN4M1FrRkJRU3hEUVVGQkxGZEJRVUVzVDBGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hYUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1NVRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYTBKQlFVRXNUVUZCUVN4RFFVRkJMRk5CUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRk5CUVVFc1NVRkJRU3hIUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNZMEZCUVN4SlFVRkJMRXRCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzVFVGQlFTeEZRVUZCTEVkQlFVRXNSVUZCUVN4SlFVRkJMRmxCUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzUjBGQlFTeE5RVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeE5RVUZCTEZsQlFVRXNUVUZCUVR0QlFVVnFReXhOUVVGTkxGRkJRVkVzVTBGQlV5eG5Ra0ZCVXl4RFFVRkRPMFZCUTNSRExFMUJRVTBzUTBGQlFTeEZRVUZITzBsQlExQXNUVUZCVFR0TlFVTktMR3RDUVVGclFqdE5RVU5zUWl4TlFVRk5PMDFCUTA0c1kwRkJZenROUVVOa0xFdEJRVXM3VFVGRFRDeFZRVUZWTzAxQlExWXNVVUZCVVR0TlFVTlNPMGxCUTBZc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTzBsQlJXUXNUVUZCVFN4clFrRkJhMElzUjBGQlJ6dE5RVU42UWl4WlFVRlpMRVZCUVVVc1MwRkJTenROUVVOdVFpeFBRVUZQTEVWQlFVVXNWVUZCVlR0TlFVTnVRaXhWUVVGVkxFVkJRVVVzYVVOQlFXbERPMDFCUXpkRExGTkJRVk1zUlVGQlJTeHRSRUZCYlVRN1RVRkRPVVFzUjBGQlJ6dEpRVU5NTEVOQlFVTTdTVUZGUkN4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4WFFVRkJMRU5CUVVFc1QwRkJWVHROUVVOVUxHdENRVUZyUWl4RlFVRkZMR3RDUVVGdFFqdE5RVU4yUXl4blFrRkJaMElzUlVGQlJTeG5Ra0ZCYVVJN1RVRkRia01zVFVGQlRTeEZRVUZGTEUxQlFVODdUVUZEWml4TlFVRk5MRVZCUVVVc1JVRkJSenROUVVOWUxHTkJRV01zUlVGQlJTeGpRVUZsTzAxQlF5OUNMRXRCUVVzc1JVRkJSU3hMUVVGTk8wMUJRMklzVlVGQlZTeEZRVUZGTzBsQlFXMUNMR2RDUVVVdlFpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1owSkJRMGs3UVVGRFdqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1YwRkRaU3hEUVVGRExFVkJRMUFzVVVGRFV5eERRVUZETzBWQlJXcENPMEZCUTBZN1FVRkJReXhQUVVGQkxFTkJRVUVzVVVGQlFTeEhRVUZCTEZGQlFVRTdRVUZGUkN4UlFVRlJMRU5CUVVNc1dVRkJXU3hIUVVGSE8wVkJRM1JDTEdkQ1FVRm5RaXhGUVVGRk8wRkJRM0JDTEVOQlFVTTdRVUZGUkN4UlFVRlJMRU5CUVVNc1UwRkJVeXhIUVVGSE8wVkJRMjVDTEUxQlFVMHNSVUZCUlN4clFrRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTzBWQlEycERMRkZCUVZFc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVazdSVUZEZUVJc1MwRkJTeXhGUVVGRkxHdENRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVZVN1JVRkRiRU1zWTBGQll5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTVHRGUVVNNVFpeFZRVUZWTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTk8wVkJRelZDTEdkQ1FVRm5RaXhGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1R0RlFVTm9ReXhyUWtGQmEwSXNSVUZCUlN4clFrRkJVeXhEUVVGRE8wRkJRMmhETEVOQlFVTTdRVUZGVFN4TlFVRk5MR2RDUVVGblFpeFRRVUZUTEdkQ1FVRlRMRU5CUVVNN1JVRkRPVU1zVFVGQlRTeERRVUZCTEVWQlFVYzdTVUZEVUN4TlFVRk5PMDFCUVVVc1QwRkJUenROUVVGRkxGTkJRVk03VFVGQlJTeFJRVUZSTzAxQlFVVTdTVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXM3U1VGRk1VUXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlEwVXNVMEZCVXl4RlFVRkRMRzlDUVVGdlFqdE5RVU01UWl4bFFVRlpMRzlDUVVGdlFqdE5RVU5vUXl4UFFVRlBMRVZCUVVVc1EwRkJRU3hMUVVGTk8xRkJRMklzVDBGQlR5eERRVUZETEVOQlFVTTdVVUZEVkN4VFFVRlRMRU5CUVVNc1EwRkJRenROUVVOaUxFTkJRVVU3VFVGRFJpeFZRVUZWTEVWQlFVY3NTMEZCU3l4SlFVRkxPMUZCUTNKQ0xFbEJRVWtzUzBGQlN5eERRVUZETEVkQlFVY3NTMEZCU3l4UFFVRlBMRVZCUVVVN1ZVRkRla0lzVDBGQlR5eERRVUZETEVOQlFVTTdWVUZEVkN4VFFVRlRMRU5CUVVNc1EwRkJRenRSUVVOaU8wMUJRMFlzUTBGQlJUdE5RVU5HTEV0QlFVc3NSVUZCUlR0UlFVTk1MRk5CUVZNc1JVRkJSU3hOUVVGTk8xRkJRMnBDTEU5QlFVOHNSVUZCUlN4VFFVRlRPMUZCUTJ4Q0xGRkJRVkVzUlVGQlJTeE5RVUZOTzFGQlEyaENMRk5CUVZNc1JVRkJSU3hSUVVGUk8xRkJRMjVDTEUxQlFVMHNSVUZCUlN4VFFVRlRPMUZCUTJwQ0xFOUJRVThzUlVGQlJTeE5RVUZOTzFGQlEyWXNZMEZCWXl4RlFVRkZMRmxCUVZrN1VVRkROVUlzVlVGQlZTeEZRVUZGTEZGQlFWRTdVVUZEY0VJc1IwRkJSenROUVVOTUxFTkJRVVU3VFVGRFJpeFJRVUZSTEVWQlFVTTdTVUZCUnl4SFFVVllMRkZCUTBNc1EwRkJRenRGUVVWVU8wRkJRMFk3UVVGQlF5eFBRVUZCTEVOQlFVRXNaMEpCUVVFc1IwRkJRU3huUWtGQlFUdEJRVVZFTEdkQ1FVRm5RaXhEUVVGRExGTkJRVk1zUjBGQlJ6dEZRVU16UWl4VFFVRlRMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlR0RlFVTndReXhQUVVGUExFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWVHRGUVVOc1F5eFJRVUZSTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSk8wVkJRM2hDTEV0QlFVc3NSVUZCUlN4clFrRkJVeXhEUVVGRE8wRkJRMjVDTEVOQlFVTTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEZWtkRUxFbEJRVUVzWVVGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3haUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4VFFVRkJMSFZDUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkRRU3hKUVVGQkxHTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hyUWtGQlFTeFBRVUZCTEVOQlFVRXNhMEpCUVVFc1EwRkJRU3hEUVVGQk8wRkJRMEVzU1VGQlFTeFRRVUZCTEU5QlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeFBRVUZCTEVOQlFVRXNVVUZCUVN4RFFVRkJMRU5CUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc2FVSkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc2RVSkJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNkMEpCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEhkQ1FVRkJMRTlCUVVFc1EwRkJRU3c0UTBGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMRmxCUVVFc1QwRkJRU3hEUVVGQkxHdERRVUZCTEVOQlFVRXNRMEZCUVR0QlFVTkJMRWxCUVVFc1YwRkJRU3hQUVVGQkxFTkJRVUVzYzBOQlFVRXNRMEZCUVN4RFFVRkJPMEZCVTBFc1NVRkJRU3haUVVGQkxFOUJRVUVzUTBGQlFTd3dRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkZRU3hKUVVGQkxHdENRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxEQkNRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3huUWtGQlFTeFBRVUZCTEVOQlFVRXNNRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRMEVzU1VGQlFTeGhRVUZCTEU5QlFVRXNRMEZCUVN4dlFrRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEZGQlFVRXNUMEZCUVN4RFFVRkJMR3REUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5CTEVsQlFVRXNUMEZCUVN4UFFVRkJMRU5CUVVFc2EwTkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4bFFVRkJMRTlCUVVFc1EwRkJRU3d3UTBGQlFTeERRVUZCTEVOQlFVRTdRVUZMUVN4SlFVRkJMRlZCUVVFc1QwRkJRU3hEUVVGQkxHMURRVUZCTEVOQlFVRXNRMEZCUVR0QlFVdEJMRWxCUVVFc2IwSkJRVUVzVDBGQlFTeERRVUZCTEhsQ1FVRkJMRU5CUVVFc1EwRkJRVHRCUVVWQkxFbEJRVUVzV1VGQlFTeFBRVUZCTEVOQlFVRXNXVUZCUVN4RFFVRkJMRU5CUVVFN1FVRkJkMFFzSzBOQlFVRXNSVUZCUVN4SlFVRkJMRTlCUVVFc1QwRkJRU3hMUVVGQkxGVkJRVUVzUlVGQlFTeFBRVUZCTEVsQlFVRXNRMEZCUVN4RFFVRkJMRWxCUVVFc2IwSkJRVUVzU1VGQlFTeFBRVUZCTEVWQlFVRXNRMEZCUVN4RFFVRkJMRWxCUVVFc2JVSkJRVUVzU1VGQlFTeFBRVUZCTEVWQlFVRXNRMEZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3d5UWtGQlFTeDFRa0ZCUVN4RlFVRkJMRTlCUVVFc1YwRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNhVUpCUVVFc1EwRkJRU3hGUVVGQkxFVkJRVUVzVjBGQlFTeERRVUZCTEVOQlFVRXNSVUZCUVR0QlFVRkJMRzFFUVVGQkxFVkJRVUVzU1VGQlFTeERRVUZCTEZkQlFVRXNTVUZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hYUVVGQkxFVkJRVUVzUlVGQlFTeFBRVUZCTEVkQlFVRXNRMEZCUVN4RlFVRkJMRU5CUVVFc1NVRkJRU3hIUVVGQkxFdEJRVUVzU1VGQlFTeEpRVUZCTEU5QlFVRXNSMEZCUVN4TFFVRkJMRkZCUVVFc1NVRkJRU3hQUVVGQkxFZEJRVUVzUzBGQlFTeFZRVUZCTEVWQlFVRXNSVUZCUVN4UFFVRkJMRVZCUVVFc1UwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlFTeEZRVUZCTEVOQlFVRXNTVUZCUVN4UlFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4SlFVRkJMRXRCUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSVUZCUVN4RlFVRkJMRTlCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVOQlFVRXNSVUZCUVN4RFFVRkJMRWxCUVVFc1UwRkJRU3hGUVVGQkxFTkJRVUVzUTBGQlFTeEpRVUZCTEhkQ1FVRkJMRTFCUVVFc1pVRkJRU3hKUVVGQkxFMUJRVUVzZVVKQlFVRXNRMEZCUVN4RFFVRkJMRXRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeEZRVUZCTEVWQlFVRXNTVUZCUVN4SFFVRkJMRXRCUVVFc1UwRkJRU3hKUVVGQkxFMUJRVUVzVlVGQlFTeGxRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hEUVVGQkxFVkJRVUVzUlVGQlFTeEpRVUZCTEU5QlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxIbENRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUTBGQlFTeERRVUZCTEVsQlFVRXNTVUZCUVN4TFFVRkJMRWxCUVVFc1NVRkJRU3hKUVVGQkxFbEJRVUVzU1VGQlFTeERRVUZCTEVWQlFVRXNSVUZCUVN4TlFVRkJMR1ZCUVVFc1EwRkJRU3hOUVVGQkxFVkJRVUVzUjBGQlFTeEZRVUZCTEVsQlFVRXNRMEZCUVN4RFFVRkJMRVZCUVVFc1RVRkJRU3hGUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFTkJRVUVzUlVGQlFTeEZRVUZCTEVWQlFVRXNRMEZCUVN4TlFVRkJMRkZCUVVFc1IwRkJRU3hIUVVGQkxFTkJRVUVzUTBGQlFTeEpRVUZCTEV0QlFVRXNSVUZCUVN4RlFVRkJMRXRCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeE5RVUZCTEVOQlFVRXNRMEZCUVN4RlFVRkJMRU5CUVVFc1QwRkJRU3hOUVVGQkxFTkJRVUVzUlVGQlFUdEJRVUZCTEhGRFFVRkJMRVZCUVVFc1QwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNSMEZCUVN4SFFVRkJMRVZCUVVFc1UwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlFTeEZRVUZCTzBGQlFVRXNNRU5CUVVFc1JVRkJRU3hOUVVGQkxHTkJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUlVGQlFTeEZRVUZCTEUxQlFVRXNaVUZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzUlVGQlFTeFBRVUZCTEV0QlFVRXNSVUZCUVN4WlFVRkJMRWxCUVVFc1JVRkJRU3hqUVVGQkxFbEJRVUVzUlVGQlFTeFZRVUZCTEVsQlFVRXNSVUZCUVN4RFFVRkJMRU5CUVVFc1JVRkJRU3hOUVVGQkxFVkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hGUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEVOQlFVRXNSVUZCUVR0QlFVRkJMRFpDUVVGQkxFVkJRVUVzU1VGQlFTeE5RVUZCTEZsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1VVRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFTeFBRVUZCTEU5QlFVRXNSMEZCUVN4TFFVRkJMRkZCUVVFc1IwRkJRU3hIUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4RFFVRkJMRVZCUVVFN1FVRkJRU3h0UTBGQlFTeEZRVUZCTEVsQlFVRXNUMEZCUVN4TFFVRkJMRXRCUVVFc1VVRkJRU3hKUVVGQkxFdEJRVUVzUzBGQlFTeEpRVUZCTEVWQlFVRXNUMEZCUVN4TFFVRkJMRU5CUVVFc1EwRkJRU3hKUVVGQkxFOUJRVUVzUzBGQlFTeERRVUZCTEUxQlFVRXNXVUZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hKUVVGQkxFbEJRVUVzUzBGQlFTeFRRVUZCTEVWQlFVRXNSVUZCUVN4SlFVRkJMRTFCUVVFc1NVRkJRU3hMUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTEVsQlFVRXNTVUZCUVN4VFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEV0QlFVRXNVVUZCUVN4RlFVRkJMRTlCUVVFc1IwRkJRU3hEUVVGQkxFTkJRVUVzVFVGQlFTeEpRVUZCTEZOQlFVRXNRMEZCUVN3NFEwRkJRU3hEUVVGQkxFTkJRVUVzUlVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4SlFVRkJMRXRCUVVFc1VVRkJRU3hIUVVGQkxFMUJRVUVzUjBGQlFTeE5RVUZCTEVWQlFVRXNTMEZCUVN4RFFVRkJMRU5CUVVFc1JVRkJRVHM3UVVGSGVFUXNUVUZCVFN3MlFrRkJOa0lzUTBGRGFrTXNWMEZCVnl4RlFVTllMR05CUVdNc1JVRkRaQ3h0UWtGQmJVSXNSVUZEYmtJc1pVRkJaU3hGUVVObUxHMUNRVUZ0UWl4RlFVTnVRaXhuUTBGQlowTXNRMEZEYWtNc1EwRkJRVHRCUVVWRUxFMUJRVTBzTkVKQlFUUkNPMFZCUTJoRExGVkJRVlVzVFVGQlRUdEZRVU5vUWl4WlFVRlpMRTFCUVUwN1JVRkRiRUlzVTBGQlV5eE5RVUZCTzBOQlExWXNRMEZCUVR0QlFVVkVMR2REUVVGblF6dEZRVU01UWl4UFFVRlBPMGxCUTB3c1owSkJRV2RDTEVOQlFVRXNRMEZCUVN4RlFVRkJMRk5CUVVFc2EwSkJRV2xDTEVWQlFVTXNTMEZCU3l4RFFVRkRPMGxCUTNoRExIZENRVUYzUWl4RFFVRkJMRU5CUVVFc1JVRkJRU3hWUVVGQkxHOUNRVUZ0UWl4RlFVRkRMRXRCUVVzc1EwRkJRenRKUVVOc1JDeDFRa0ZCZFVJc1MwRkJTeXhUUVVGVExITkNRVUZ6UWp0SlFVTXpSQ3h4UWtGQmNVSXNTMEZCU3l4VFFVRlRMRzlDUVVGdlFqdEpRVU4yUkN3NFFrRkJPRUlzUzBGQlN5eFRRVUZUTERaQ1FVRkRPMGRCUXpsRExFTkJRVUU3UTBGRFNEdEJRVVZCTEhORFFVRnpRenRGUVVOd1F5eFBRVUZQTzBsQlEwd3NhVUpCUVd0Q0xGRkJRVk03VFVGRGVrSXNVVUZCVVN4RFFVRkRMRTlCUVU4c1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRVHRMUVVONFF6dEpRVU5FTEd0Q1FVRnRRaXd3UWtGQk1rSTdUVUZETlVNc1VVRkJVU3hEUVVGRExFOUJRVThzYVVKQlFXbENMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNRMEZCUXl4RFFVRkJPMHRCUXpORU8wbEJRMFFzTkVKQlFUUkNMRU5CUVVNc1QwRkJUeXhMUVVOc1F5eFJRVUZSTEVOQlFVTXNUMEZCVHl3eVFrRkJNa0lzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTNaRUxIRkNRVUZ4UWl4TlFVRk5MRkZCUVZFc1EwRkJReXhQUVVGUExHOUNRVUZ2UWl4RlFVRkZMRU5CUVVNN1NVRkRiRVVzYTBOQlFXMURMR1ZCUVdkQ08wMUJRMnBFTEZGQlFWRXNRMEZCUXl4RFFVRkJMRU5CUVVFc1JVRkJRU3h4UWtGQlFTeFZRVUZuUXl4RlFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRExFTkJRVUU3UzBGRGVFUTdTVUZEUkN3clFrRkJLMElzUTBGQlF6czdPMHRCUVhGQ0xFdEJRVXM3VFVGRGVFUXNUMEZCVHl4UlFVRlJMRU5CUTJJc1QwRkJUeXhWUVVGVkxFTkJRVU03VVVGRGFFSXNUVUZCVFN4M1FrRkJkMEk3VVVGRE9VSXNUVUZCVFR0UlFVTk9MRk5CUVVFN1QwRkRSQ3hEUVVOSUxFTkJRVU1zUTBGQlFUdExRVU5HTzBsQlEwUXNiMEpCUVc5Q0xFMUJRVTBzVDBGQlR5eHRRa0ZCYlVJc1JVRkJRenRIUVVOMFJDeERRVUZCTzBOQlEwZzdRVUZGUVN3NFFrRkJPRUlzVFVGQlFTeFZRVUZUTEVOQlFVTTdSVUU0UW5SRExGZEJRVmNzYTBKQlFXdENPMGxCUXpOQ0xFMUJRVTA3YzBKQlExazdPMDlCUVhOQ096dExRVVYyUXl4SFFVRkhMRWxCUVVrc1RVRkJUU3hEUVVGQk8wbEJRMlFzVFVGQlRUczdTMEZCWXl4SFFVRkhMRWxCUVVrc1VVRkJVU3hEUVVGQk8wbEJSVzVETEZWQlFWVXNRMEZCUXp0TlFVTlVMRlZCUVZVc1dVRkJRU3g1UWtGQmQwSXNWMEZCVnp0TlFVTTNReXhQUVVGUExGbEJRVUVzY1VKQlFXOUNMRzFDUVVGdFFqdE5RVU01UXl4WlFVRlpPMUZCUTFZc1kwRkJZeXhaUVVGWk8xRkJRekZDTEZsQlFWa3NaVUZCUVR0UFFVTmtPMHRCUTBRc1EwRkJReXhEUVVGQk8wbEJRMFlzWlVGQlpTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkJPMGRCUTJ4RE8wVkJSVUVzY1VKQlFYRkNMRWRCUVVjN1NVRkRkRUlzVFVGQlRUczdTMEZCWXl4SFFVRkhMRWxCUVVrc1RVRkJUU3hEUVVGQk8wbEJRMnBETEc5Q1FVTkZMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzAxQlFVc3NWMEZCVlN3MlFrRkJRVHRMUVVFMlFpeGxRVU14UXl4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExFOUJRVUVzVVVGQlRTeEZRVUZCTzAxQlEwd3NUVUZCU3l4WFFVRlhPMDFCUTJoQ0xGTkJRVk1zVFVGQlRUdFJRVU5pTEVsQlFVa3NWVUZCVlN4RlFVRkZPMVZCUTJRc1ZVRkJWU3hGUVVGRkxFTkJRVUU3VTBGRFlpeE5RVUZOTzFWQlEwd3NRMEZCUVN4RFFVRkJMRVZCUVVFc1MwRkJRU3h0UWtGQmEwSXNSMEZCUlN4TFFVRkxMRWxCUVVFc2RVSkJRWE5DTEVkQlF6TkRMRTFCUVUwc1UwRkJVeXgxUWtGQmRVSXNRMEZEY0VNc1QwRkJRU3d5UWtGRFJpeERRVUZETEVkQlEwUXNTVUZCU1N4TlFVRk5MRkZCUVZFc1MwRkJTeXhEUVVGRExFOUJRVUVzTWtKQlFUQkNMRU5CUVVNc1EwRkJRVHRUUVVONlJEdFJRVU5CTEVsQlFVa3NUVUZCVFN4dlFrRkJiMElzUlVGQlJTeERRVUZCTzA5QlEyeERPMHRCUVVVc1JVRkZSQ3hKUVVGSkxGRkJRVkVzUlVGQlJTeERRVUZETEZsQlFWa3NRMEZEZEVJc1EwRkRUQ3hEUVVGRExFTkJRVUU3UjBGRlZqdEZRVVZCTEcxQ1FVRnRRaXgzUTBGQmQwTXNUMEZCVHl4RlFVRkZMRVZCUVVVN1NVRkRjRVVzVDBGQlR5eE5RVUZOTEZGQlFWRXNRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEpRVUZKTEVOQlF6bERMRU5CUVVNc09FTkJRVGhETEV0QlFVczdUVUZEYkVRc1RVRkJUVHM3TzFGQlFXMUNMRmRCUVZjc1JVRkJSVHM3VDBGQlRTeEhRVUZITEc5Q1FVRnZRaXhEUVVGQk8wMUJRMjVGTEUxQlFVMHNjVUpCUTBvc1kwRkJZeXhMUVVGTExFdEJRVXNzVVVGQlFTeGpRVUZoTEVsQlFVa3NTVUZEZWtNc1RVRkJUU3hMUVVGTExHTkJRV01zVDBGQlR5eERRVUZCTzAxQlEyeERMRzlDUVVORkxFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVTXNVMEZCUVN4cFFrRkJaMElzUlVGQlFUdFJRVU5tTEV0QlFVMHNRMEZCUVN4TlFVRkJMRVZCUVZFc1RVRkJUeXhEUVVGQkxFTkJRVVU3VVVGRGRrSXNWMEZCVnl4TlFVRk5MRWxCUVVrc1RVRkJUU3h2UWtGQmIwSXNSVUZCUnp0UlFVTnNSQ3hUUVVGVExFMUJRVTA3VlVGRFlpeEpRVUZKTEVOQlFVRXNRMEZCUVN4RlFVRkJMRk5CUVVFc05rSkJRVFJDTEVWQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVN1dVRkRla01zU1VGQlNTeE5RVUZOTEdsQ1FVRnBRaXhEUVVGRExITkNRVUZ6UWl4RFFVRkRMRU5CUVVFN1YwRkRjRVFzVFVGQlRUdFpRVU5NTEVsQlFVa3NUVUZCVFN4cFEwRkJhVU1zUTBGQlF5eFJRVUZSTEVsQlFVa3NUVUZCVFN4RFFVRkRMRU5CUVVFN1YwRkRha1U3VTBGRFFUdFJRVU5HTEU5QlFVODdWVUZEVEN4VlFVRlZMRTFCUVUwN1ZVRkRhRUlzV1VGQldTeE5RVUZOTzFWQlEyeENMRk5CUVZNc1RVRkJRVHRUUVVOWU8wOUJRVVVzUlVGRlJDeHJRa0ZCYTBJc1owSkJRMnBDTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVNc2FVSkJRVUVzUzBGQlNTeEZRVUZCTzFGQlFVTXNUVUZCVFN4cFFrRkJRU3hUUVVGUkxFMUJRVTg3VVVGQlF5eFBRVUZQTEdGQlFVRXNWVUZCVXl4bFFVRkRPMDlCUVdsQ0xFTkJRVU1zWjBKQlJTOUVMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzFGQlFVc3NWMEZCVlN3MFFrRkJRVHRQUVVFMFFpeEZRVUZETEZGQlFVMHNRMEZEYmtRc1pVRkRSQ3hOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZETEdWQlFVRXNVVUZCWXl4RlFVRkJPMUZCUTJJc1QwRkJUeXhKUVVGSkxGbEJRVmtzUjBGQlJ5eFhRVUZYTEVkQlFVY3NZVUZCUVN4VlFVRlRMRlZCUVZjN1VVRkROVVFzVFVGQlRTeGhRVUZCTEV0QlFVa3NSMEZCU1R0UlFVTmtMRTFCUVUwc1pVRkJRU3hSUVVGakxFMUJRVTBzVDBGQlF6dFBRVU0xUWl4RFFVRkRMR1ZCUTBZc1RVRkJRU3hSUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRTdVVUZEUlN4WFFVRlZMRzFDUVVGdFFqdFJRVU0zUWl4bFFVRmpMRU5CUVVFc1JVRkJSU3hSUVVGVExFTkJRVUVzWVVGQlFTeERRVUZsTzFGQlEzaERMRTlCUVU4N1ZVRkRUQ3hQUVVGUExHdENRVUZyUWl4SFFVTnlRaXd5UWtGQk1rSXNSMEZETTBJc0swSkJRVUU3VTBGRFRqdFBRVUZGTEVWQlJVUXNVVUZCVVN4SlFVRkpMRTFCUTFRc1EwRkJReXhGUVVOT0xHdENRVUZyUWl4SFFVRkhMRWxCUVVrc1owSkJRM2hDTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVNc2FVSkJRVUVzVjBGQlZTeEZRVUZCTzFGQlExUXNWMEZCVlN4UlFVRlJPMUZCUTJ4Q0xGVkJRVlVzYVVKQlFVRXNVMEZCVVN4TlFVRlBPMUZCUTNwQ0xFMUJRVTBzYVVKQlFVRXNVMEZCVVN4SFFVRkpPMUZCUTJ4Q0xGZEJRVmNzU1VGQlNTeFJRVUZSTEVWQlFVVXNRMEZCUXl4UlFVRlJMRU5CUVVVN1VVRkRjRU1zVTBGQlZTeExRVUZOTzFWQlEyUXNRMEZCUXl4blFrRkJaMElzUlVGQlJTeERRVUZCTzFWQlEyNUNMRWxCUVVrc1RVRkJUU3c0UWtGQk9FSXNRMEZCUXp0WlFVTjJReXhSUVVGUkxFVkJRVVU3V1VGRFZpeFhRVUZYTEUxQlFVMHNVMEZCUVR0WFFVTnNRaXhEUVVGRExFTkJRVUU3VTBGRFNqdFBRVU5FTEVOQlJXRXNRMEZCUXl4RFFVRkJPMHRCUjNwQ0xFTkJRVU1zUTBGQlFUdEhRVU5JTzBWQlJVRXNhMEpCUVd0Q0xGVkJRVlU3U1VGRE1VSXNUVUZCVFR0elFrRkRXVHM3VDBGQmNVSTdTMEZEZEVNc1IwRkJSeXhKUVVGSkxFMUJRVTBzUTBGQlFUdEpRVU5rTEc5Q1FVTkZMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVU1zVTBGQlFTeHBRa0ZCWjBJc1JVRkJRVHROUVVObUxFdEJRVXNzVDBGQlVUdE5RVU5pTEZkQlFWY3NTVUZCU1N4TlFVRk5MRzlDUVVGeFFqdE5RVU14UXl4VFFVRlRMRTFCUVUwc1NVRkJTU3haUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZGTzAxQlEzcERMRTlCUVU4c2VVSkJRVUU3UzBGQk1FSXNSVUZGYUVNc1dVRkJXU3hMUVVGTExFOUJRVThzWjBKQlEzWkNMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVU1zYVVKQlFVRXNTMEZCU1N4RlFVRkJPMDFCUVVNc1RVRkJUU3hwUWtGQlFTeFRRVUZSTEUxQlFVODdUVUZCUXl4UFFVRlBMR0ZCUVVFc1ZVRkJVeXhsUVVGRE8wdEJRV2xDTEVOQlFVTXNaMEpCUlM5RUxFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVRXNTMEZCUVN4RlFVRkJPMDFCUVVzc1YwRkJWU3cwUWtGQlFUdExRVUUwUWl4RlFVRkRMRkZCUVUwc1EwRkRia1FzWlVGRFJDeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkRMR1ZCUVVFc1VVRkJZeXhGUVVGQk8wMUJRMklzVDBGQlR5eFBRVUZSTzAxQlEyWXNUVUZCVFN4aFFVRkJMRXRCUVVrc1IwRkJTVHROUVVOa0xFMUJRVTBzWlVGQlFTeFJRVUZqTEUxQlFVMHNUMEZCUXp0TFFVTTFRaXhEUVVGRExHVkJRMFlzVFVGQlFTeFJRVUZCTEdOQlFVRXNRMEZCUVN4TlFVRkJMRVZCUVVFN1RVRkRSU3hYUVVGVkxHMUNRVUZ0UWp0TlFVTTNRaXhsUVVGakxFTkJRVUVzUlVGQlJTeFBRVUZSTEVOQlFVRXNZVUZCUVN4RFFVRmxPMDFCUTNaRExFOUJRVTg3VVVGRFRDeFBRVU5GTEZsQlFWa3NTMEZCU3l4UFFVRlBMRWRCUTNCQ0xESkNRVUV5UWl4SFFVTXpRaXdyUWtGQlFUdFBRVU5TTzB0QlFVVXNSVUZGUkN4SlFVRkpMRkZCUVZFc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGRGJrSXNRMEZEVlN4RFFVRkRMRU5CUVVFN1IwRkZka0k3UlVGRlFTdzJRa0ZCTmtJc2FVTkJRV2xETzBsQlF6VkVMRTFCUVUwN096czdTMEZCWjBVc1IwRkRjRVVzU1VGQlNTeE5RVUZOTEVOQlFVRTdTVUZGV2l4TlFVRk5PenM3TzB0QlFYRkRMRWRCUVVjc1VVRkJRU3hyUWtGQmFVSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRVHRKUVVONFJTeE5RVUZOTEdOQlFXTXNVVUZCUVN4dlFrRkJiVUlzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVR0SlFVTm9SQ3hOUVVGTkxGTkJRVk1zVVVGQlFTeDNRa0ZCZFVJc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlFUdEpRVVV2UXl4TlFVRk5MSEZDUVVOS0xHTkJRV01zUzBGQlN5eExRVUZMTEZGQlFVRXNZMEZCWVN4SlFVRkpMRWxCUTNwRExFMUJRVTBzUzBGQlN5eGpRVUZqTEU5QlFVOHNRMEZCUVR0SlFVTnNReXh2UWtGRFJTeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkRMRk5CUVVFc2FVSkJRV2RDTEVWQlFVRTdUVUZEWml4TFFVRkxMRTlCUVZFN1RVRkRZaXhYUVVGWExFbEJRVWtzVFVGQlRTeHZRa0ZCY1VJN1RVRkRNVU1zVTBGQlV5eFpRVUZaTzFGQlEyNUNMRTFCUVUwc2RVSkJRWFZDTEVOQlFVRXNRMEZCUVN4RlFVRkJMRTlCUVVFc1QwRkJUU3hGUVVOcVF5eHhRa0ZCY1VJc1JVRkRjRUlzVlVGQlZ5eE5RVUZOTEU5QlFVOHNTMEZCU3l4UlFVRkJMSGRDUVVGMVFpeERRVUZETEU5QlFVOHNRMEZETDBRc1EwRkJReXhEUVVGQk8xRkJSVVFzU1VGQlNTeHJRa0ZCYTBJc1NVRkJTU3hEUVVGQk96dFJRVVV4UWl4SlFVRkpMRU5CUVVNc1EwRkJReXh2UWtGQmIwSXNSVUZCUlR0VlFVTXhRaXhyUWtGQmEwSXNUVUZCVFN3d1FrRkJNRUlzUTBGRGFFUTdXVUZEUlN4TlFVRk5PMWxCUTA0c1RVRkJUVHRaUVVOT0xFOUJRVTg3V1VGRFVDeFZRVUZWTEZkQlFWYzdXVUZEY2tJc1ZVRkJWVHRqUVVOU0xHZENRVUZCTzJGQlEwWTdWMEZEUkN4RlFVTkVPMWxCUTBVc1YwRkJWeXhKUVVGSk8xbEJRMllzVVVGQlVTeFpRVUZCTERoQ1FVRTJRaXhyUWtGQlF6dFhRVVV4UXl4RFFVRkRMRU5CUVVFN1UwRkRTRHRSUVVOQkxHZENRVUZuUWl4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGQk8wOUJRMnBETzAxQlEwWXNUMEZCVHl4NVFrRkJRVHRMUVVFd1FpeEZRVVZvUXl4clFrRkJhMElzWjBKQlEycENMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVU1zYVVKQlFVRXNTMEZCU1N4RlFVRkJPMDFCUVVNc1RVRkJUU3hwUWtGQlFTeFRRVUZSTEUxQlFVODdUVUZCUXl4UFFVRlBMR0ZCUVVFc1ZVRkJVeXhsUVVGRE8wdEJRV2xDTEVOQlFVTXNaMEpCUlM5RUxFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVRXNTMEZCUVN4RlFVRkJPMDFCUVVzc1YwRkJWU3cwUWtGQlFUdExRVUUwUWl4RlFVRkRMRkZCUVUwc1EwRkRia1FzWlVGRFJDeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkRMR1ZCUVVFc1VVRkJZeXhGUVVGQk8wMUJRMklzVDBGQlR5eFBRVUZSTzAxQlEyWXNUVUZCVFN4aFFVRkJMRXRCUVVrc1IwRkJTVHROUVVOa0xFMUJRVTBzWlVGQlFTeFJRVUZqTEUxQlFVMHNUMEZCUXp0TFFVTTFRaXhEUVVGRExHVkJRMFlzVFVGQlFTeFJRVUZCTEdOQlFVRXNRMEZCUVN4TlFVRkJMRVZCUVVFN1RVRkRSU3hYUVVGVkxHMUNRVUZ0UWp0TlFVTTNRaXhsUVVGakxFTkJRVUVzUlVGQlJTeFBRVUZSTEVOQlFVRXNZVUZCUVN4RFFVRmxPMDFCUTNaRExFOUJRVTg3VVVGRFRDeFBRVU5GTEdOQlFXTXNTMEZCU3l4TFFVRkxMRTlCUVU4c1IwRkRNMElzTWtKQlFUSkNMRWRCUXpOQ0xDdENRVUZCTzA5QlExSTdTMEZCUlN4RlFVVkVMRWxCUVVrc1VVRkJVU3hGUVVGRkxFTkJRVU1zVDBGQlR5eERRVU51UWl4RFFVTlZMRU5CUVVNc1EwRkJRVHRIUVVWMlFqdEZRVVZCTEUxQlFVMHNSMEZCUnp0SlFVTlFMRTFCUVUwN096czdPenM3TzB0QlVVd3NSMEZCUnl4SlFVRkpMRTFCUVUwc1EwRkJRVHRKUVVWa0xFMUJRVTBzZDBOQlFYZERMRU5CUVVFc1EwRkJRU3hGUVVGQkxFOUJRVUVzVDBGQlRTeEZRVU5zUkN4eFFrRkJjVUlzUlVGRGNFSXNWVUZEUXl4TlFVRk5MRTlCUVU4c1MwRkJTeXhSUVVGQkxHdENRVUZwUWl4SlFVTnVReXhOUVVGTkxFOUJRVThzUzBGQlN5eFJRVUZCTEhOQ1FVTjBRaXhEUVVGRExFTkJRVUU3U1VGRFJDeE5RVUZOTERSQ1FVRTBRaXhEUVVGQkxFTkJRVUVzUlVGQlFTeFBRVUZCTEU5QlFVMHNSVUZEZEVNc2NVSkJRWEZDTEVWQlEzQkNMRlZCUVZjc1RVRkJUU3hQUVVGUExFdEJRVXNzVVVGQlFTeHJRa0ZEYUVNc1EwRkJReXhEUVVGQk8wbEJSVVFzVFVGQlRTeFRRVUZUTEVsQlFVa3NUVUZCVFN4dlFrRkJiMElzUTBGQlFUdEpRVU0zUXl4TlFVRk5PenRMUVVGTExFZEJRVWNzU1VGQlNTeFJRVUZSTEVOQlFVRTdTVUZGTVVJc2IwSkJRMFVzVFVGQlFTeFJRVUZCTEdOQlFVRXNRMEZCUXl4VFFVRkJMRk5CUVZFc1JVRkJRVHROUVVOUUxGRkJRVkVzVFVGQlR6dE5RVU5tTEdkQ1FVRnBRaXhUUVVGVk8xRkJRM3BDTEUxQlFVMDdPMU5CUVdFc1IwRkJSeXhMUVVGTExFOUJRVThzUTBGQlFUdFJRVU5zUXl4TlFVRk5MR2RDUVVGcFFpeGhRVUZqTEZOQlFWTXNVMEZCVXl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGQk8xRkJRMnhGTEUxQlFVMHNkMEpCUTBvc01FSkJRVEJDTEZWQlFWVXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRVHRSUVVWeVJDeEpRVUZKTEhGQ1FVRnhRaXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTzFWQlEyaERMRXRCUVVzc1owSkJRV2RDTEVWQlFVVXNRMEZCUVR0VlFVTjJRaXh0UWtGQmJVSXNSVUZCUlN4RFFVRkJPMU5CUTNaQ08wOUJRMEU3VFVGRFJpeHZRa0ZCYlVJc1owSkJRV2RDTzAxQlEyNURMRkZCUVZFc1JVRkJSenROUVVOWUxFOUJRMFVzU1VGQlNTeE5RVUZOTEdWQlFXVXNTVUZCU1R0UlFVTXpRaXhWUVVGVkxGVkJRVlU3VVVGRGNFSXNTMEZCU3l4TlFVRk5PMUZCUTFnc1QwRkJUeXhQUVVGUE8xRkJRMlFzVVVGQlVTeEpRVUZCTzA5QlJWZzdUVUZEUkN4WlFVRlpPMUZCUTFZc1UwRkJVeXhSUVVGQk8wOUJRMWc3UzBGQlJTeGxRVVZHTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQk8wMUJRVXNzVjBGQlZTeDVRa0ZCUVR0TFFVRjVRaXhGUVVOeVF5eDVRa0ZCZVVJc1IwRkJSeXhKUVVGSkxHZENRVU12UWl4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGQkxFdEJRVUVzUlVGQlFUdE5RVUZMTEZkQlFWVXNkMEpCUVVFN1MwRkJkMElzUlVGQlJTeERRVUZETEVOQlFVTXNWVUZCVlN4RFFVRlBMRU5CUXpkRUxFVkJRMEVzZVVKQlFYbENMRWRCUVVjc1NVRkJTU3huUWtGREwwSXNUVUZCUVN4UlFVRkJMR05CUVVFc1EwRkJRU3hMUVVGQkxFVkJRVUU3VFVGQlN5eFhRVUZWTERCQ1FVRkJPMHRCUVRSQ0xFTkJRelZETEVWQlEwRXNORUpCUVRSQ0xFbEJRVWtzUTBGQlF5eDVRa0ZCZVVJc1owSkJRM3BFTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQk8wMUJRVXNzVjBGQlZTd3dRa0ZCUVR0TFFVRXdRaXhGUVVOMFF5eERRVUZETEVOQlFVTXNiMEpCUVc5Q0xFVkJRVVVzWTBGRGRrSXNUVUZCUVN4UlFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUU3VFVGRFJTeE5RVUZMTEVkQlFVYzdUVUZEVWl4TFFVRkpMSE5DUVVGelFqdE5RVU14UWl4WFFVRlZMR2REUVVGblF6dE5RVU14UXl4VFFVRlZMRXRCUVUwN1VVRkRaQ3hEUVVGRExHVkJRV1VzUlVGQlJTeERRVUZCTzFGQlEyeENMRzFDUVVGdFFpeEZRVUZGTEVOQlFVRTdVVUZEY2tJc1QwRkJUeXhMUVVGTExFTkJRVVVzUTBGQlFTeEZRVUZGTEU5QlFVRXNaVUZCWlN4RFFVRkJMR05CUVVFc1EwRkJaU3hEUVVGRExFTkJRVUU3VDBGRGFrUTdTMEZCUlN4RlFVVkVMRU5CUVVNc1EwRkJReXhWUVVGVkxFTkJRMW9zUTBGQlF5eERRVU5NTEVOQlFVTXNaVUZEUml4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExFOUJRVUVzVVVGQlRTeEZRVUZCTzAxQlEwd3NVMEZCVXl4clFrRkJiVUk3VFVGRE5VSXNWMEZCVlN4dFEwRkJRVHRMUVVGdFF5eEZRVVUxUXl4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVOT0xFTkJRMHdzUTBGQlF5eEhRVU5LTEVsQlEwUXNRMEZCUXl4bFFVVk9MRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzAxQlFVc3NWMEZCVlN4MVFrRkJRVHRMUVVGMVFpeEZRVU51UXl4SlFVRkpMRzFDUVVGdFFpeERRVUZETEZGQlFVRXNZMEZCWVN4UlFVRlJMRU5CUVVNc1JVRkZPVU1zU1VGQlNTeHZRa0ZCYjBJc1EwRkRka0lzY1VOQlFYRkRMRVZCUTNKRExFbEJRVWtzVFVGQlRTeGxRVU5hTEVOQlFVTXNSVUZGUVN4elFrRkJjMElzYVVKQlEzSkNMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVUVzVFVGQlFTeFJRVUZCTEZOQlFVRXNSVUZCUVN4SlFVRkJMRVZCUTBjc1NVRkJTU3h0UWtGQmJVSXNRMEZCUXl4UlFVRkJMR05CUVdFc1QwRkJUeXhEUVVGRExFVkJRemRETEVsQlFVa3NiVUpCUVcxQ0xFTkJRVU1zVVVGQlFTeGpRVUZoTEZGQlFWRXNRMEZCUXl4RlFVTTVReXhSUVVGQkxHdERRVUZwUXl4cFFrRkRhRU1zVFVGQlFTeFJRVUZCTEdOQlFVRXNRMEZCUVN4TlFVRkJMRkZCUVVFc1UwRkJRU3hGUVVGQkxFbEJRVUVzUlVGRFJ5eEpRVUZKTERoQ1FVRTRRaXhEUVVOcVF5eHhRa0ZCY1VJc1JVRkRja0lzVVVGQlFTeGpRVUZoTEdOQlEyWXNRMEZEUVN4RFFVTklMRVZCUTBFc1NVRkJTU3h2UWtGQmIwSXNRMEZEZGtJc2VVSkJRWGxDTEVWQlEzcENMRWxCUVVrc1RVRkJUU3hsUVVGbExFVkJRM3BDTzAxQlFVVXNZVUZCWVN4SlFVRkJPMHRCUTJwQ0xFTkJRMEVzUTBGRlJDeERRVUZETEVWQlJVd3NTVUZCU1N4elFrRkJjMElzUlVGRGJrSXNRMEZCUXl4RFFVRkJPMGRCUldZN1EwRkRSanRCUVVGRExHVkJRVUVzUTBFM1Ywc3NaVUZCWlN4RlFVRkJMR05CUVVFc1JVRkRSenRGUVVOd1FpeEhRVUZITEZWQlFVRXNVVUZCVXl4TFFVRkxPMFZCUTJwQ0xGbEJRVmtzVlVGQlFTeFJRVUZUTEV0QlFVTTdRMEZEZGtJc1EwRkJRU3hEUVVGQk8wRkJRVUVzWlVGQlFTeERRVXBITEdWQlFXVXNSVUZCUVN4WFFVRkJMRVZCVFVFN1JVRkRha0lzWjBKQlFXZENMRlZCUVVFc1VVRkJVeXhOUVVGTkxFTkJRVU03U1VGRE9VSXNWVUZCVlN4VlFVRkJMRkZCUVZNc1QwRkJUenRKUVVNeFFpeFJRVUZSTEZWQlFVRXNVVUZCVXl4UFFVRlBPMGxCUTNoQ0xFMUJRVTBzVlVGQlFTeFJRVUZUTEU5QlFVODdTVUZEZEVJc1VVRkJVU3hWUVVGQkxGRkJRVk1zVDBGQlF6dEhRVU51UWl4RFFVRkRMRmRCUVZjN1JVRkRZaXhwUWtGQmFVSXNWVUZCUVN4UlFVRlRMRXRCUVVzc1YwRkJWenRGUVVNeFF5eHJRa0ZCYTBJc1ZVRkJRU3hSUVVGVExFdEJRVXNzVjBGQlZ6dEZRVU16UXl4eFFrRkJjVUlzVlVGQlFTeFJRVUZUTEV0QlFVc3NWMEZCVnp0RlFVTTVReXgxUWtGQmRVSXNWVUZCUVN4UlFVRlRMRTlCUVU4c1YwRkJWenRGUVVOc1JDeDNRa0ZCZDBJc1ZVRkJRU3hSUVVGVExFdEJRVXM3UlVGRGRFTXNjVUpCUVhGQ0xGVkJRVUVzVVVGQlV5eExRVUZMTEZkQlFWYzdSVUZET1VNc2EwTkJRV3RETEZWQlFVRXNVVUZCVXl4TFFVRkxMRmRCUVZjN1JVRkRNMFFzSzBKQlFTdENMRlZCUVVFc1VVRkJVeXhMUVVGTExGZEJRVmM3UlVGRGVFUXNPRUpCUVRoQ0xGVkJRVUVzVVVGQlV5eExRVUZMTEZkQlFWYzdSVUZEZGtRc2IwSkJRVzlDTEZWQlFVRXNVVUZCVXl4TFFVRkxMRmRCUVZjN1JVRkROME1zVTBGQlV5eFZRVUZCTEZGQlFWTXNUMEZCVHp0RlFVTjZRaXhuUWtGQlowSXNWVUZCUVN4UlFVRlRMRTlCUVU4N1JVRkRhRU1zTWtKQlFUSkNMRlZCUVVFc1VVRkJVeXhMUVVGTE8wVkJRM3BETEZsQlFWa3NWVUZCUVN4UlFVRlRMRXRCUVVzN1JVRkRNVUlzTkVKQlFUUkNMRlZCUVVFc1VVRkJVeXhMUVVGTExGZEJRVU03UTBGRE5VTXNRMEZCUVN4RFFVRkJPMEZCUVVFc1NVRkJRU3hYUVcxV1dTeERRVUZCTEVOQlFVRXNSVUZCUVN4TlFVRkJMRkZCUVU4c1JVRkRjRUlzWlVGQlFTeFhRVUZWTEVWQlExWXNRMEZCUVN4RFFVRkJMRVZCUVVFc1YwRkJRU3hSUVVGUExFVkJRVU1zWlVGQlpTeEZRVUZGTEd0Q1FVRnJRaXhEUVVNM1F5eERRVUZETEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVFN1FVRkJRU3hQUVVGQkxGRkJRVUVzUjBGQlFTeFJRVUZCTEVOQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUXk5amJFSXNTVUZCUVN4TlFVRkJMRWRCUVVFc2RVSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlJVRXNTVUZCUVN4VlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4SlFVRkJMRWRCUVVFc1QwRkJRVHRCUVVWQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVWQkxFbEJRVUVzWVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZOUVN4SlFVRkJMR2xDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkZRU3hKUVVGQkxGbEJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHRkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHOUNRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeHJRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVVZCTEVsQlFVRXNTMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkJjVVFzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeDVRa0ZCUVN4WFFVRkJMR1ZCUVVFc1QwRkJRU3hyUTBGQlFTeHBRa0ZCUVN4UFFVRkJMRTlCUVVFc1VVRkJRU3huUWtGQlFTeFBRVUZCTEU5QlFVRXNXVUZCUVN4M1FrRkJRU3haUVVGQkxFTkJRVUVzVjBGQlFTeFhRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEV0QlFVRXNWMEZCUVR0QlFVRkJMRk5CUVVFc2QwSkJRVUVzUjBGQlFTeEZRVUZCTEZkQlFVRXNVMEZCUVN4WFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEZkQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2IwSkJRVUVzUjBGQlFTeDNRa0ZCUVN4SFFVRkJMRFJDUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTEZWQlFVRXNTMEZCUVN4SFFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzV1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxGZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHJRa0ZCUVN4TlFVRkJMRU5CUVVFc1UwRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1UwRkJRU3hKUVVGQkxFZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4alFVRkJMRWxCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRWxCUVVFc1dVRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEUxQlFVRXNXVUZCUVN4TlFVRkJPMEZCUlhSRExGTkJRVk1zWTBGQll5eERRVUZETzBWQlEzSkRMRWxCUVVrc1IwRkJSeXhwUWtGQldTeERRVUZETEdGQlFXRTdSVUZEYWtNc2MwSkJRWE5DTzBWQlEzUkNMRmRCUVZjN1JVRkRXQ3hSUVVGUk8wVkJRMUlzVjBGQlZ6dEZRVU5ZTEZGQlFWRTdSVUZEVWl4WFFVRlhPMFZCUTFnc1kwRkJZenRGUVVOa0xDdENRVUVyUWp0RlFVTXZRaXhyUTBGQmEwTTdSVUZEYkVNc1kwRkJZenRGUVVOa0xHVkJRV1U3UlVGRFppeFpRVUZaTzBWQlExb3NVMEZCVXp0RlFVTlVPMEZCUTBZc1EwRkJReXhGUVVGRk8wVkJRMFFzVFVGQlRTeERRVUZETEVkQlFVY3NTVUZCUVN4cFFrRkJWU3hGUVVGRExHbENRVUZYTEVOQlFVTTdSVUZEYWtNc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlFTeGhRVUZOTEVWQlFVTXNTVUZCU1N4RFFVRkRPMFZCUlRsQ0xFMUJRVTBzZDBOQlFYZERMRWRCUXpWRExFbEJRVUVzYlVSQlFYZERMRVZCUVVNc1YwRkJWeXhEUVVGRE8wVkJSWFpFTEUxQlFVMHNNRUpCUVRCQ0xFZEJRVWNzVDBGQlR5eERRVU40UXl4RFFVRkJMRmRCUVZjc1lVRkJXQ3hYUVVGWExIVkNRVUZZTEZkQlFWY3NRMEZCUlN4dlFrRkJiMElzUzBGREwwSXNRMEZCUXl3clFrRkJLMElzU1VGRGFFTXNkME5CUTBvc1EwRkJRenRGUVVWRUxFbEJRVWtzWTBGQll6dEZRVU5zUWl4SlFVTkZMRkZCUVZFc1MwRkJTeXhUUVVGVExFbEJRM1JDTEdOQlFXTXNTMEZCU3l4VFFVRlRMRWxCUXpWQ0xFbEJRVWtzYTBKQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeHJRa0ZCVXl4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRExFVkJReTlFTzBsQlEwRXNZMEZCWXl4SFFVRkhMRU5CUVVNc1EwRkJReXh4UWtGQmNVSXNSVUZCUlN4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8wVkJRemRFTzBWQlJVRXNUVUZCVFN4WlFVRlpMRWRCUVVjc1dVRkJXU3hKUVVGSkxEQkNRVUV3UWp0RlFVVXZSQ3hKUVVGSkxGRkJRVkU3UlVGRFdpeEpRVUZKTEZsQlFWa3NSVUZCUlR0SlFVTm9RaXhSUVVGUkxFZEJRVWNzYlVKQlFXMUNPMFZCUTJoRE8wVkJSVUVzYjBKQlEwVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wbEJRVXNzVTBGQlV5eEZRVUZETzBWQlFXdENMR2RDUVVNdlFpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1NVRkJTeXhUUVVGVExFVkJRVU03UlVGQk1rSXNSMEZEZGtNc1dVRkJXU3hwUWtGRFdDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1NVRkJTeXhUUVVGVExFVkJRVU03UlVGQk1rSXNaMEpCUTNoRExFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR0ZCUVVFc1EwRkJRU3hQUVVGWk8wbEJRVU1zVVVGQlVTeEZRVUZGTzBWQlFWTXNRMEZCUlN4RFFVTm9ReXhEUVVOT0xFVkJRMEVzWTBGQll5eHBRa0ZEWWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3U1VGQlN5eFRRVUZUTEVWQlFVTTdSVUZCTWtJc1owSkJRM2hETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHdENRVUZCTEVOQlFVRXNUMEZCYVVJN1NVRkRhRUlzVTBGQlV5eEZRVUZETERaQ1FVRTJRanRKUVVOMlF5eFBRVUZQTEVWQlFVVXNZMEZCWlR0SlFVTjRRaXhoUVVGaExFVkJRVU1zT0VKQlFUaENPMGxCUXpWRExFOUJRVTg3UlVGQlFTeERRVU5TTEVOQlEwVXNRMEZEVGl4RlFVTkJMREJDUVVFd1FpeHBRa0ZEZWtJc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzBsQlFVc3NVMEZCVXl4RlFVRkRPMFZCUVdkRUxHZENRVU0zUkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHJRa0ZCUVN4RFFVRkJMRTlCUVdsQ08wbEJRMmhDTEZOQlFWTXNSVUZCUXl3MlFrRkJOa0k3U1VGRGRrTXNUMEZCVHl4RlFVRkZMRU5CUVVNc1EwRkJReXgxUWtGQmRVSXNSVUZCUlN4RFFVRkRMRmRCUVZjc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlJUdEpRVU14UkN4aFFVRmhMRVZCUVVNc09FSkJRVGhDTzBsQlF6VkRMRTlCUVU4N1JVRkJRU3hEUVVOU0xFTkJRMFVzUTBGRFRpeEZRVU5CTEVsQlFVa3NTMEZCU3l4cFFrRkJXU3hEUVVGRExFOUJRVThzYVVKQlF6VkNMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdEpRVUZMTEZOQlFWTXNSVUZCUXp0RlFVRXJRaXhuUWtGRE5VTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4SlFVRkpPMGxCUTBnc1MwRkJTeXhGUVVGRkxIVkNRVUZUTEVOQlFVTXNWMEZCV1R0SlFVTTNRaXhQUVVGUExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4TlFVRlBPMGxCUXpWQ0xFVkJRVVVzUlVGQlF5eEpRVUZKTzBsQlExQXNWVUZCVlN4RlFVRkZMSGRDUVVGVkxFTkJRVU03UlVGQlN5eEhRVVV6UWl4RFFVRkRMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNSVUZCUlN4SFFVRkhMR1ZCUXpkQ0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRmxCUVVFc1EwRkJRU3hQUVVGWE8wbEJRMVlzVVVGQlVTeEZRVUZETEV0QlFVczdTVUZEWkN4WFFVRlhMRVZCUVVVc1EwRkJReXhEUVVGRExHOUNRVUZ2UWp0RlFVRkZMRU5CUTNSRExFTkJRMGNzUTBGRFNDeERRVU5PTEdWQlEwUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4SlFVRkpPMGxCUTBnc1MwRkJTeXhGUVVGRkxIVkNRVUZUTEVOQlFVTXNWMEZCV1R0SlFVTTNRaXhQUVVGUExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4VFFVRlZPMGxCUXk5Q0xFVkJRVVVzUlVGQlF5eEpRVUZKTzBsQlExQXNVMEZCVXl4RlFVRkZMSFZDUVVGVExFTkJRVU03UlVGQlR5eEhRVVV6UWl4elFrRkRSeXhEUVVGRExFVkJRMDRzTUVKQlFUQkNMR2xDUVVONlFpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhQUVVGQkxFTkJRVUVzVDBGQlRUdEpRVU5NTEZOQlFWTXNSVUZCUXl3clEwRkJLME03U1VGRGVrUXNUMEZCVHl4RlFVRkZMRU5CUVVFc1MwRkJUU3hyUTBGQmEwTXNRMEZCUXl4SlFVRkpPMFZCUVVVc1IwRkZka1FzUTBGQlF5eERRVUZETEhGRFFVRnhReXhEUVVOc1F5eERRVU5VTEVWQlEwRXNRMEZCUXl3d1FrRkJNRUlzYVVKQlF6RkNMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEc5Q1FVRkJMRU5CUVVFc1QwRkJiVUk3U1VGRGJFSXNVVUZCVVN4RlFVRkZMRkZCUVZNN1NVRkRia0lzVjBGQlZ5eEZRVUZGTEZkQlFWazdTVUZEZWtJc1VVRkJVU3hGUVVGRkxGRkJRVk03U1VGRGJrSXNWMEZCVnl4RlFVRkZMRmRCUVZrN1NVRkRla0lzWTBGQll5eEZRVUZGTEdOQlFXVTdTVUZETDBJc1pVRkJaU3hGUVVGRkxHVkJRV2RDTzBsQlEycERMRk5CUVZNc1JVRkJSVHRGUVVGVkxFTkJRM1JDTEVOQlJVRXNRMEZCUXl4bFFVTk9MRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdEpRVUZMTEVkQlFVY3NSVUZCUlN4VFFVRlZPMGxCUVVNc1UwRkJVeXhGUVVGRE8wVkJRV2xETEVOQlFVVXNRMEZETDBRc1EwRkJRenRCUVVWV08wRkJSVUVzWTBGQll5eERRVUZETEZOQlFWTXNSMEZCUnp0RlFVTjZRaXhKUVVGSkxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eHBRa0ZCV1N4RFFVRkRMRU5CUVVNN1JVRkRiRVFzYzBKQlFYTkNMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTzBWQlEzaERMRkZCUVZFc1JVRkJSU3hyUWtGQlV5eERRVUZETEUxQlFVMDdSVUZETVVJc1YwRkJWeXhGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1R0RlFVTXpRaXhSUVVGUkxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TlFVRk5PMFZCUXpGQ0xGZEJRVmNzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrN1JVRkRNMElzWTBGQll5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRGUVVOb1F5d3JRa0ZCSzBJc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVazdSVUZETDBNc2EwTkJRV3RETEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSk8wVkJRMnhFTEZkQlFWY3NSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTA3UlVGRE4wSXNZMEZCWXl4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNUdEZRVU01UWl4bFFVRmxMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTzBWQlEycERMRmxCUVZrc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVazdSVUZETlVJc1UwRkJVeXhGUVVGRkxHdENRVUZUTEVOQlFVTXNUVUZCVFR0RlFVTXpRaXd3UWtGQk1FSXNSVUZCUlN4clFrRkJVeXhEUVVGRE8wRkJRM2hETEVOQlFVTTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnNTMFFzU1VGQlFTeGxRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRWFZFTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5CZGtRc1NVRkJRU3hOUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUlVFc1NVRkJRU3hKUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNZVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkxRU3hKUVVGQkxFdEJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRFJDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNhVUpCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFpRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeHBRa0ZCUVN4SFFVRkJMRTlCUVVFN1FVRkJlVVVzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJSVEZFTEZOQlFWTXNaMEpCUVdkQ0xFTkJRVU03UlVGQlJUdEJRVUV5UWl4RFFVRkRMRVZCUVVVN1JVRkRka1VzVFVGQlRTeERRVUZETEVkQlFVY3NTVUZCUVN3NFFrRkJZeXhGUVVGRExFTkJRVU03UlVGRE1VSXNUVUZCVFR0SlFVTktMRmRCUVZjN1NVRkRXQ3hSUVVGUk8wbEJRMUlzYTBKQlFXdENPMGxCUTJ4Q0xGbEJRVms3U1VGRFdpeFpRVUZaTzBsQlExb3NiMEpCUVc5Q08wbEJRM0JDTEdWQlFXVTdTVUZEWmp0RlFVTkdMRU5CUVVNc1IwRkJSeXhKUVVGQkxIZENRVUZuUWl4RlFVRkRMRU5CUVVNN1JVRkRkRUlzVFVGQlRUdEpRVUZGTzBWQlFTdENMRU5CUVVNc1IwRkJSeXhKUVVGQkxIZEVRVUV5UWl4RlFVRkRMRU5CUVVNN1JVRkRlRVVzVFVGQlRUdEpRVUZGTzBWQlFWVXNRMEZCUXl4SFFVRkhMRWxCUVVFc05FTkJRVEJDTEVWQlFVTXNRMEZCUXp0RlFVTnNSQ3hOUVVGTkxGZEJRVmNzUjBGRFppeERRVUZETEd0Q1FVRnJRaXhKUVVGSkxEQkNRVUV3UWl4TFFVRkxMRWxCUVVrN1JVRkZOVVFzU1VGQlNTeERRVUZETEdWQlFXVXNTVUZCU1N4RFFVRkRMRmxCUVZrc1NVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJUdEpRVU55UkN4UFFVRlBMRWxCUVVrN1JVRkRZanRGUVVWQkxFbEJRVWtzU1VGQlNTeEhRVUZITEZsQlFWazdSVUZEZGtJc1NVRkJTU3hMUVVGTExFZEJRVWNzV1VGQldUdEZRVU40UWl4SlFVTkZMRmxCUVZrc1MwRkJTeXh0UWtGQll5eERRVUZETEVsQlFVa3NTVUZEY0VNc1YwRkJWeXhMUVVGTExHbENRVUZaTEVOQlFVTXNTMEZCU3l4RlFVTnNRenRKUVVOQkxFbEJRVWtzUjBGQlJ5eGxRVUZsTzBsQlEzUkNMRXRCUVVzc1IwRkJSeXhsUVVGbE8wVkJRM3BDTEVOQlFVTXNUVUZCVFN4SlFVRkpMRmxCUVZrc1MwRkJTeXh0UWtGQll5eERRVUZETEcxQ1FVRnRRaXhGUVVGRk8wbEJRemxFTEVsQlFVa3NSMEZCUnl4VFFVRlRPMGxCUTJoQ0xFdEJRVXNzUjBGQlJ5eHhRa0ZCY1VJN1JVRkRMMEk3UlVGRlFTeE5RVUZOTEcxQ1FVRnRRaXhIUVVGSExFTkJRVUVzUzBGQlRUdEpRVU5vUXl3NFFrRkJPRUlzUTBGQlF6dE5RVU0zUWl4clFrRkJhMElzUlVGQlJUdEpRVU4wUWl4RFFVRkRMRU5CUVVNN1NVRkRSaXhUUVVGVExFTkJRVU1zV1VGQldTeERRVUZETzBWQlEzcENMRU5CUVVNN1JVRkZSQ3hOUVVGTkxIVkNRVUYxUWl4SFFVRkhMRU5CUVVFc1MwRkJUVHRKUVVOd1F5dzRRa0ZCT0VJc1EwRkJRenROUVVNM1FpeHJRa0ZCYTBJc1JVRkJSVHRKUVVOMFFpeERRVUZETEVOQlFVTTdTVUZEUml4VFFVRlRMRU5CUVVNc1owSkJRV2RDTEVOQlFVTTdSVUZETjBJc1EwRkJRenRGUVVWRUxHOUNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRKUVVGTExGTkJRVk1zUlVGQlF6dEZRVUZ4UWl4blFrRkRiRU1zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUVZFc1QwRkJUeXhGUVVGRkxHMUNRVUZ2UWp0SlFVRkRMR1ZCUVZrN1JVRkJjVUlzUjBGRGNFVXNTVUZCU1N4cFFrRkRTQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdTVUZCVFN4VFFVRlRMRVZCUVVNN1JVRkJNa0lzUjBGRGVFTXNOa0pCUVhWQ0xFTkJRVU1zU1VGQlNTeERRVU42UWl4RFFVTlFMR1ZCUTBRc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzBsQlFVMHNVMEZCVXl4RlFVRkRPMFZCUVRSQ0xFZEJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCVVN4RFFVRkRMR1ZCUXpsRUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzU1VGQlNUdEpRVU5JTEVsQlFVa3NSVUZCUlN3d1FrRkJVU3hEUVVGRExGVkJRVmM3U1VGRE1VSXNTMEZCU3l4RlFVRkZMRzFDUVVGTExFTkJRVU1zWTBGQlpUdEpRVU0xUWl4SlFVRkpMRVZCUVVVc01FSkJRVkVzUTBGQlF6dEZRVUZITEVOQlEyNUNMRU5CUTBzc1EwRkJReXhGUVVOU0xGbEJRVmtzUzBGQlN5eFJRVUZSTEdsQ1FVTjRRaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdTVUZCVVN4UFFVRlBMRVZCUVVVN1JVRkJkMElzUjBGQlJTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRlZMRU5CUXpsRUxFVkJRMEVzV1VGQldTeExRVUZMTEdWQlFXVXNhVUpCUXk5Q0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRmxCUVVFc1EwRkJRU3hQUVVGWE8wbEJRMVlzVjBGQlZ5eGxRVU5VTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHROUVVGTExGTkJRVk1zUlVGQlF6dEpRVUU0UWl4SFFVTXhReXhEUVVGQkxGZEJRVmNzWVVGQldDeFhRVUZYTEhWQ1FVRllMRmRCUVZjc1EwRkJSU3hOUVVGTkxHdENRVU5zUWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRWxCUVVrN1RVRkRTQ3hQUVVGUExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4TlFVRlBPMDFCUXpWQ0xFVkJRVVVzUlVGQlF5eEpRVUZKTzAxQlExQXNTMEZCU3l4RlFVRkZMSFZDUVVGVExFTkJRVU03U1VGQlowSXNSMEZGYUVNc1EwRkJReXhEUVVGRExITkNRVUZ6UWl4RlFVRkZMRU5CUVVNc1YwRkJWeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVU16UXl4RFFVTlFMR1ZCUTBRc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNhVUpCUVVFc1EwRkJRU3hKUVVGSk8wMUJRVU1zVDBGQlR5eEZRVUZGTEhsQ1FVRlhMRU5CUVVNc1RVRkJUenROUVVGRExFVkJRVVVzUlVGQlF6dEpRVUZKTEdkQ1FVTjRReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNXVUZCU1N4RFFVRkRMRU5CUVVNc1dVRkJXU3hEUVVGTExFTkJRVU1zUzBGQlF5eEZRVUZETEZsQlEzUkNMRU5CUVVNc1pVRkRVQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4cFFrRkJRU3hEUVVGQkxFbEJRVWs3VFVGQlF5eFBRVUZQTEVWQlFVVXNlVUpCUVZjc1EwRkJReXhOUVVGUE8wMUJRVU1zUlVGQlJTeEZRVUZETzBsQlFVa3NaMEpCUTNoRExFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4WlFVRkpMRU5CUVVNc1EwRkJReXhuUWtGQlowSXNRMEZCU3l4RFFVRkRMRXRCUVVNc1JVRkJReXh2UWtGRE1VSXNRMEZCUXl4bFFVTlFMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHROUVVGRExFOUJRVThzUlVGQlJTeDVRa0ZCVnl4RFFVRkRMRTFCUVU4N1RVRkJReXhGUVVGRkxFVkJRVU03U1VGQlNTeG5Ra0ZEZUVNc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEZsQlFVa3NRMEZCUXl4RFFVRkRMRlZCUVZVc1EwRkJTeXhEUVVGRExFdEJRVU1zUlVGQlF5eFJRVU53UWl4RFFVTklMRU5CUTA0N1NVRkRSQ3hSUVVGUkxFVkJRVU03UlVGQlN5eERRVU5tTEVOQlJVRXNRMEZCUXp0QlFVVldPMEZCUlVFc1owSkJRV2RDTEVOQlFVTXNVMEZCVXl4SFFVRkhPMFZCUXpOQ0xEQkNRVUV3UWl4RlFVRkZMR3RDUVVGVExFTkJRVU03UVVGRGVFTXNRMEZCUXpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNCSVJDeEpRVUZCTEdsQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFXZEVMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTkJhRVFzU1VGQlFTeE5RVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJSVUVzU1VGQlFTeEpRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1pVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdsQ1FVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzU1VGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWVVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVVVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVWQkxFbEJRVUVzWVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZKUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFBRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2EwSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGZEJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHbENRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1dVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2EwSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJjVVFzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJSWEpFTEUxQlFVMHNhVUpCUVdsQ0xFZEJRVWNzUTBGQlFTeExRVUZOTzBWQlF6bENMRTFCUVUwN1NVRkJSU3haUVVGWk8wbEJRVVU3UlVGQldTeERRVUZETEVkQlFVY3NTVUZCUVN4M1FrRkJaMElzUlVGQlF5eERRVUZETzBWQlEzaEVMRTFCUVUwc1EwRkJReXhIUVVGSExFbEJRVUVzT0VKQlFXTXNSVUZCUXl4RFFVRkRPMFZCUXpGQ0xFMUJRVTA3U1VGQlJTeGpRVUZqTzBsQlFVVXNWVUZCVlR0SlFVRkZMRmxCUVZrN1NVRkJSVHRGUVVGbExFTkJRVU1zUjBGRGFFVXNTVUZCUVN3MFEwRkJNRUlzUlVGQlF5eERRVUZETzBWQlJUbENMRWxCUVVrc1dVRkJXU3hMUVVGTExGbEJRVmtzUlVGQlJUdEpRVU5xUXl4UFFVRlBMRWxCUVVrN1JVRkRZanRGUVVWQkxFbEJRVWtzVlVGQlZTeEhRVUZITEhOQ1FVRnpRanRGUVVOMlF5eEpRVUZKTEZkQlFWY3NTMEZCU3l4cFFrRkJXU3hEUVVGRExFMUJRVTBzUlVGQlJUdEpRVU4yUXl4VlFVRlZMRWRCUVVjc2EwTkJRV3RETzBWQlEycEVMRU5CUVVNc1RVRkJUU3hKUVVGSkxGZEJRVmNzUzBGQlN5eHBRa0ZCV1N4RFFVRkRMRTlCUVU4c1JVRkJSVHRKUVVNdlF5eFZRVUZWTEVkQlFVY3NhVU5CUVdsRE8wVkJRMmhFTzBWQlJVRXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNVVUZCUVN4RFFVRkJMRTlCUVU4N1NVRkRUaXhMUVVGTExFVkJRVVVzUTBGQlF5eERRVUZETEZWQlFWVTdTVUZEYmtJN1NVRkJRVHRKUVVOQkxFMUJRVTBzUlVGRFNpeGpRVUZqTEV0QlFVc3NRMEZCUXl4SFFVRkhMRk5CUVZNc1IwRkJSeXhOUVVGTkxGVkJRVlVzUTBGQlF5eERRVUZETEZsQlFWa3NRMEZCUXl4RFFVTnVSVHRKUVVORUxFOUJRVThzUlVGQlJTeGpRVUZsTzBsQlEzaENMRk5CUVZNc1JVRkJRenRGUVVGelFpeG5Ra0ZGYUVNc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVRXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hSUVVGQkxIRkNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHdENRVUZCTEVOQlFVRXNUMEZCYVVJc1RVRkJSU3hEUVVGRExHVkJRM0pDTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRKUVVGTExGTkJRVk1zUlVGQlF6dEZRVUVyUWl4blFrRkROVU1zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUVVzc1UwRkJVeXhGUVVGRE8wVkJRU3RDTEdkQ1FVTTFReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4SlFVRkJMRU5CUVVFc1QwRkJSeXhSUVVORUxGbEJRVmtzYVVKQlExZ3NUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zWVVGQlFTeERRVUZCTEU5QlFWazdTVUZCUXl4UlFVRlJMRVZCUVVVN1JVRkJOa0lzUTBGQlJTeERRVU40UkN4bFFVTkVMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdEpRVUZMTEZOQlFWTXNSVUZCUXp0RlFVRjFReXhuUWtGRGNFUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wbEJRVTBzVTBGQlV5eEZRVUZETzBWQlFUaERMRWRCUXpORUxFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlExWXNRMEZCUXl4bFFVTlFMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdEpRVUZOTEZOQlFWTXNSVUZCUXp0RlFVRTBReXhIUVVONlJDeFhRVUZYTEV0QlFVc3NhVUpCUVZrc1EwRkJReXhMUVVGTExFbEJRVWtzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZETTBNc1EwRkJReXhsUVVOUUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVRk5MRk5CUVZNc1JVRkJRenRGUVVFclF5eEhRVU0xUkN4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVOUUxFTkJRMGdzUTBGQlF5eEZRVU5NTEVOQlFVTXNWMEZCVnl4TFFVRkxMR2xDUVVGWkxFTkJRVU1zVFVGQlRTeEpRVU51UXl4WFFVRlhMRXRCUVVzc2FVSkJRVmtzUTBGQlF5eFBRVUZQTEd0Q1FVTndReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4WlFVRkJMRU5CUVVFc1QwRkJWenRKUVVOV0xHRkJRV0VzUlVGQlJTeHRRa0ZCWXl4RFFVRkRPMFZCUVc5Q0xFTkJRMjVFTEVOQlEwWXNSVUZEUVN4WFFVRlhMRXRCUVVzc2FVSkJRVmtzUTBGQlF5eGhRVUZoTEdsQ1FVTjZReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4WlFVRkJMRU5CUVVFc1QwRkJWenRKUVVGRExHRkJRV0VzUlVGQlJTeHRRa0ZCWXl4RFFVRkRPMFZCUVVrc1EwRkJSU3hEUVVOc1JDeGxRVU5FTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExGbEJRVUVzUTBGQlFTeFBRVUZYTzBsQlFVTXNZVUZCWVN4RlFVRkZMRzFDUVVGakxFTkJRVU03UlVGQlR5eERRVUZGTEVOQlFVTXNaVUZEY2tRc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNXVUZCUVN4RFFVRkJMRTlCUVZjN1NVRkJReXhoUVVGaExFVkJRVVVzYlVKQlFXTXNRMEZCUXp0RlFVRkxMRU5CUVVVc1EwRkJReXhsUVVOdVJDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1NVRkJTeXhUUVVGVExFVkJRVU03UlVGQk1FTXNRMEZCUlN4RFFVRkRMRVZCUXpORUxGZEJRVmNzUzBGQlN5eHBRa0ZCV1N4RFFVRkRMR0ZCUVdFc2FVSkJRM3BETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExGbEJRVUVzUTBGQlFTeFBRVUZYTzBsQlFVTXNZVUZCWVN4RlFVRkZMRzFDUVVGakxFTkJRVU03UlVGQll5eERRVUZGTEVOQlF6VkVMR1ZCUTBRc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNXVUZCUVN4RFFVRkJMRTlCUVZjN1NVRkJReXhoUVVGaExFVkJRVVVzYlVKQlFXTXNRMEZCUXp0RlFVRlBMRU5CUVVVc1EwRkRha1FzUTBGQlF5eGxRVU5PTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExFbEJRVUVzUTBGQlFTeFBRVUZITEhGQ1FVTkdMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEd0Q1FVRkJMRU5CUVVFc1QwRkJhVUlzVFVGQlJTeERRVUZETEdWQlEzSkNMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHRKUVVOSUxGTkJRVk1zUlVGQlF5eHBRMEZCYVVNN1NVRkRNME1zUzBGQlN5eEZRVUZETEZGQlFWRTdTVUZEWkN4TFFVRkxMRVZCUVVVc2RVSkJRVk1zUTBGQlF5eGxRVUZuUWp0SlFVTnFReXhIUVVGSExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4TlFVRlBPMGxCUTNoQ0xFOUJRVThzUlVGQlJTeDVRa0ZCVnl4RFFVRkRMRTFCUVU4N1NVRkROVUlzUlVGQlJTeEZRVUZETzBWQlFVa3NSMEZGVGl4RFFVRkRMRU5CUVVNc2JVSkJRVzFDTEVWQlFVVXNZMEZEZEVJc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzBsQlEwVXNSMEZCUnl4RlFVRkRMR1ZCUVdVN1NVRkRia0lzVFVGQlRTeEZRVUZETEZGQlFWRTdTVUZEWml4SFFVRkhMRVZCUVVNc2NVSkJRWEZDTzBsQlEzcENMRWxCUVVrc1JVRkJSU3h0UWtGQldTeERRVUZETzBWQlFXVXNSMEZGYWtNc1EwRkJReXhEUVVGRExGZEJRVmNzUTBGRFlpeERRVUZETEVOQlEwd3NRMEZEUnl4RFFVTklMRU5CUTBZc1EwRkRSaXhEUVVOTUxFTkJRMHNzUTBGQlF6dEJRVVZrTEVOQlFVTTdRVUZCUXl4SlFVRkJMRkZCUVVFc1IwRkZZU3hwUWtGQmFVSTdRVUZCUVN4UFFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxGRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGFraG9ReXhKUVVGQkxGZEJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFMUJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkZRU3hKUVVGQkxFbEJRVUVzUjBGQlFTeFBRVUZCTzBGQlNVRXNTVUZCUVN4TFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRXRCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFBRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1pVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTERSQ1FVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzYVVKQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3haUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hwUWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzSzBKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRlFTeEpRVUZCTEhGQ1FVRkJMRWRCUVVFc1QwRkJRVHRCUVVFNFJDeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGRk9VUXNUVUZCVFN4bFFVRmxMRWRCUVVjc1EwRkJReXhoUVVGaExFVkJRVVVzVjBGQlZ5eExRVUZMTzBWQlEzUkVMRWxCUVVrc1NVRkJTU3hIUVVGSExHRkJRV0U3UlVGRGVFSXNTVUZCU1N4TFFVRkxMRWRCUVVjc1lVRkJZVHRGUVVONlFpeEpRVUZKTEdGQlFXRXNTMEZCU3l4dFFrRkJZeXhEUVVGRExHRkJRV0VzUlVGQlJUdEpRVU5zUkN4TFFVRkxMRWRCUVVjc2VVSkJRWGxDTzBWQlEyNURMRU5CUVVNc1RVRkJUU3hKUVVGSkxHRkJRV0VzUzBGQlN5eHRRa0ZCWXl4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTzBsQlF5OUVMRWxCUVVrc1IwRkJSeXhKUVVGSk8wbEJRMWdzUzBGQlN5eEhRVUZITEhGQ1FVRnhRanRGUVVNdlFpeERRVUZETEUxQlFVMHNTVUZEVEN4aFFVRmhMRXRCUVVzc2JVSkJRV01zUTBGQlF5eEpRVUZKTEVsQlEzSkRMRmRCUVZjc1MwRkJTeXhwUWtGQldTeERRVUZETEV0QlFVc3NSVUZEYkVNN1NVRkRRU3hKUVVGSkxFZEJRVWNzWlVGQlpUdEpRVU4wUWl4TFFVRkxMRWRCUVVjc1pVRkJaVHRGUVVONlFqdEZRVU5CTEU5QlFVODdTVUZCUlN4TFFVRkxPMGxCUVVVN1JVRkJTeXhEUVVGRE8wRkJRM2hDTEVOQlFVTTdRVUZGUkN4TlFVRk5MRmRCUVZjc1IwRkJSeXhEUVVGRE8wVkJRVVU3UVVGQll5eERRVUZETEV0QlFVczdSVUZEZWtNc1RVRkJUVHRKUVVOS0xGZEJRVmM3U1VGRFdDeFpRVUZaTzBsQlExb3NVVUZCVVR0SlFVTlNMRFJEUVVFMFF6dEpRVU0xUXl4NVEwRkJlVU03U1VGRGVrTXNPRUpCUVRoQ08wbEJRemxDTzBWQlEwWXNRMEZCUXl4SFFVRkhMRWxCUVVFc2QwSkJRV2RDTEVWQlFVTXNRMEZCUXp0RlFVTjBRaXhOUVVGTk8wbEJRVVU3UlVGQkswSXNRMEZCUXl4SFFVRkhMRWxCUVVFc2QwUkJRVEpDTEVWQlFVTXNRMEZCUXp0RlFVTjRSU3hOUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZCTERoQ1FVRmpMRVZCUVVNc1EwRkJRenRGUVVNeFFpeE5RVUZOTzBsQlFVVXNWVUZCVlR0SlFVRkZPMFZCUVZVc1EwRkJReXhIUVVGSExFbEJRVUVzTkVOQlFUQkNMRVZCUVVNc1EwRkJRenRGUVVNNVJDeE5RVUZOTzBsQlFVVTdSVUZCY1VJc1EwRkJReXhIUVVGSExGZEJRVmM3UlVGRk5VTXNUVUZCVFR0SlFVTktPMGxCUTBFN1NVRkRRU3g1UWtGQmVVSTdTVUZEZWtJc2QwSkJRWGRDTzBsQlEzaENMRmxCUVZrN1NVRkRXaXh2UWtGQmIwSTdTVUZEY0VJN1JVRkRSaXhEUVVGRExFZEJRVWNzU1VGQlFTd3dRMEZCYjBJc1JVRkJReXhoUVVGaExFTkJRVU03UlVGRmRrTXNTVUZEUlN4aFFVRmhMRXRCUVVzc2JVSkJRV01zUTBGQlF5eGhRVUZoTEVsQlF6bERMRVZCUVVNc2IwSkJRVzlDTEdGQlFYQkNMRzlDUVVGdlFpeGxRVUZ3UWl4dlFrRkJiMElzUTBGQlJTeFpRVUZaTEV0QlEyNURMRVZCUVVNc2IwSkJRVzlDTEdGQlFYQkNMRzlDUVVGdlFpeGxRVUZ3UWl4dlFrRkJiMElzUTBGQlJTeFJRVUZSTEVkQlF5OUNPMGxCUTBFc1QwRkJUeXhKUVVGSk8wVkJRMkk3UlVGRlFTeE5RVUZOTEdOQlFXTXNSMEZCUnl4RFFVRkJMRXRCUVUwN1NVRkRNMElzU1VGQlNTeGhRVUZoTEV0QlFVc3NiVUpCUVdNc1EwRkJReXhOUVVGTkxFVkJRVVU3VFVGRE0wTXNPRUpCUVRoQ0xFTkJRVU03VVVGRE4wSXNWVUZCVlN4RlFVRkZPMVZCUTFZc2EwSkJRV3RDTEVWQlFVVTdVVUZEZEVJN1RVRkRSaXhEUVVGRExFTkJRVU03VFVGRFJpeFRRVUZUTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU03U1VGRE4wSXNRMEZCUXl4TlFVRk5PMDFCUTB3c09FSkJRVGhDTEVOQlFVTTdVVUZETjBJc1ZVRkJWU3hGUVVGRk8xVkJRMVlzWVVGQllTeEZRVUZGTzFGQlEycENPMDFCUTBZc1EwRkJReXhEUVVGRE8wMUJSVVlzVlVGQlZTeERRVUZETEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1RVRkZNVUlzU1VGQlNTeGhRVUZoTEV0QlFVc3NiVUpCUVdNc1EwRkJReXh0UWtGQmJVSXNSVUZCUlR0UlFVTjRSQ3cwUTBGQk5FTXNRMEZCUXl4RFFVRkRPMDFCUTJoRUxFTkJRVU1zVFVGQlRTeEpRVUZKTEdGQlFXRXNTMEZCU3l4dFFrRkJZeXhEUVVGRExHRkJRV0VzUlVGQlJUdFJRVU42UkN4NVEwRkJlVU1zUTBGQlF5eERRVUZETzAxQlF6ZERMRU5CUVVNc1RVRkJUVHRSUVVOTUxEaENRVUU0UWl4RFFVRkRMR0ZCUVdFc1EwRkJRenROUVVNdlF6dEpRVU5HTzBWQlEwWXNRMEZCUXp0RlFVVkVMRTFCUVUwN1NVRkJSU3hMUVVGTE8wbEJRVVU3UlVGQlN5eERRVUZETEVkQlFVY3NaVUZCWlN4RFFVRkRMR0ZCUVdFc1JVRkJSU3hYUVVGWExFTkJRVU03UlVGRmJrVXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzBsQlEwVXNVMEZCVXl4RlFVRkZMRWxCUVVFc2JVSkJRVlVzUlVGQlF5eGxRVUZsTEVWQlFVVTdUVUZEY2tNc2VVSkJRWGxDTEVWQlFVVXNZVUZCWVN4TFFVRkxMRmxCUVZrN1RVRkRla1FzZVVKQlFYbENMRVZCUVVVN1NVRkROMElzUTBGQlF5eERRVUZGTzBsQlEwZ3NUMEZCVHl4RlFVRkZMR05CUVdVN1NVRkRlRUlzWTBGQldTeGhRVUZqTzBsQlF6RkNMRk5CUVZNc1JVRkJSU3hoUVVGaExFdEJRVXNzV1VGQllUdEpRVU14UXl4UlFVRlJMRVZCUVVVc2VVSkJRVEJDTzBsQlEzQkRMR1ZCUVdNc2NVSkJRVzlDTEdGQlFXTTdSVUZCUlN4blFrRkZiRVFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUVUwc1UwRkJVeXhGUVVGRE8wVkJRWEZDTEVkQlEyeERMRWxCUVVrc2FVSkJRMGdzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUTBVc1UwRkJVeXhGUVVGSExESkRRVUV3UXl4aFFVRmpPMFZCUVVVc1IwRkZja1VzTmtKQlFYVkNMRU5CUVVNc1NVRkJTU3hEUVVONlFpeERRVU5RTEVWQlEwRXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkRTaXhEUVVGRExHVkJRMUFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUTBVc1UwRkJVeXhGUVVGSExEWkVRVUUwUkN4aFFVRmpPMFZCUVVVc1IwRkZka1lzVjBGQlZ5eExRVUZMTEdsQ1FVRlpMRU5CUVVNc1MwRkJTeXhMUVVOb1F5eFhRVUZYTEVkQlFVY3NTVUZCUVN4NVFrRkJiVUlzUlVGQlF5eERRVUZETEVWQlFVVXNWMEZCVnl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVOMlJDeERRVUZETEdWQlExQXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wbEJRMFVzVTBGQlV5eEZRVUZITERKRVFVRXdSQ3hoUVVGak8wVkJRVVVzUjBGRmNrWXNkMEpCUVhkQ0xHZENRVU4yUWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3U1VGQlN5eFRRVUZUTEVWQlFVTTdSVUZCZFVJc1owSkJRM0JETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNUMEZCWjBJN1NVRkRaaXhsUVVGbExFVkJRMklzWVVGQllTeExRVUZMTEZsQlFWa3NSMEZETVVJc2NVTkJRWEZETEVkQlEzSkRMR2xEUVVOTU8wbEJRMFFzV1VGQldTeEZRVUZGTzBWQlFXTXNRMEZETjBJc1EwRkJReXhsUVVOR0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMQ3RDUVVGQkxFTkJRVUVzVDBGQk9FSTdTVUZETjBJc1IwRkJSeXhGUVVGRExIbENRVUY1UWp0SlFVTTNRaXhKUVVGSkxFVkJRVVVzWlVGQlVUdEpRVU5rTEV0QlFVc3NSVUZCUlR0RlFVRjVRaXhEUVVOcVF5eERRVU5GTEVOQlFVTXNSMEZGVGl4SlFVVkZMRU5CUVVNc1pVRkRVQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdTVUZCVFN4VFFVRlRMRVZCUVVNc2QwSkJRWGRDTzBsQlFVTXNaVUZCV1R0RlFVRmhMR2RDUVVOb1JTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhaUVVGQkxFTkJRVUVzVDBGQlZ6dEpRVU5XTEZkQlFWY3NaVUZEVkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eGxRVUZCTEVOQlFVRXNUMEZCWXp0TlFVTmlMRU5CUVVNc1JVRkJSU3hEUVVGRk8wMUJRMHdzWVVGQllTeEZRVUZGTEdGQlFXTTdUVUZETjBJc1dVRkJXU3hGUVVGRkxGbEJRV0U3VFVGRE0wSXNiMEpCUVc5Q0xFVkJRVVVzYjBKQlFYRkNPMDFCUXpORExGZEJRVmNzUlVGQlJTeFhRVUZaTzAxQlEzcENMRkZCUVZFc1JVRkJSU3hSUVVGVE8wMUJRMjVDTEZkQlFWY3NSVUZCUlN4WFFVRlpPMDFCUTNwQ0xIbENRVUY1UWl4RlFVRkZPMGxCUVRCQ0xFTkJRM1JFTEVOQlEwWTdTVUZEUkN4UlFVRlJMRVZCUVVNN1JVRkJTeXhEUVVObUxFTkJRMGNzUTBGRFFTeERRVUZETzBGQlJXSXNRMEZCUXp0QlFVVkVMRmRCUVZjc1EwRkJReXhUUVVGVExFZEJRVWM3UlVGRGRFSXNZVUZCWVN4RlFVRkZMR3RDUVVGVExFTkJRVU03UVVGRE0wSXNRMEZCUXp0QlFVRkRMRWxCUVVFc1VVRkJRU3hIUVVWaExGZEJRVmM3UVVGQlFTeFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRkZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOc1RERkNMRWxCUVVFc1dVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVRXdReXhUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRRVEZETEVsQlFVRXNUVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGZEJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlJVRXNTVUZCUVN4SlFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVTBGQlFTeEhRVUZCTEU5QlFVRTdRVUZKUVN4SlFVRkJMRkZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRV3RGTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUdEJRVVV6UkN4TlFVRk5MSEZDUVVGeFFpeEhRVUZITEVOQlFVTTdSVUZEY0VNc1pVRkJaVHRGUVVObUxGbEJRVms3UlVGRFdqdEJRVU5HTEVOQlFVTXNTMEZCU3p0RlFVTktMRTFCUVUwc1pVRkJaU3hIUVVGSExFbEJRVUVzZFVKQlFWY3NSVUZCUXl3MFFrRkJhMElzUTBGQlF6dEZRVU4yUkN4TlFVRk5MSEZDUVVGeFFpeEhRVUZITEVsQlFVRXNkVUpCUVZjc1JVRkJReXhyUTBGQmQwSXNRMEZCUXp0RlFVVnVSU3hOUVVGTkxFTkJRVU1zYlVKQlFXMUNMRVZCUVVVc2MwSkJRWE5DTEVOQlFVTXNSMEZCUnl4SlFVRkJMR1ZCUVZFc1JVRkJReXhKUVVGSkxFTkJRVU03UlVGRmNFVXNUVUZCVFN4cFFrRkJhVUlzUjBGRGNrSXNjVUpCUVhGQ0xFbEJRM0pDTEdWQlFXVXNTMEZCU3l4eFFrRkJaMElzUTBGQlF5eFRRVUZUTEVsQlF6bERMRU5CUVVNc2IwSkJRVzlDT3p0RlFVVjJRanRGUVVOQk8wVkJRMEU3UlVGRFFTeE5RVUZOTEZsQlFWa3NSMEZEYUVJc1EwRkJRU3hsUVVGbExHRkJRV1lzWlVGQlpTeDFRa0ZCWml4bFFVRmxMRU5CUVVVc1IwRkJSeXhMUVVOd1FpeE5RVUZOTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUjBGRE1VSXNUVUZCVFN4RFFVRkRMR1ZCUVdVc1EwRkJReXhIUVVGSExFTkJRVU1zTmtKQlFUWkNMRU5CUVVNN1JVRkZOMFFzU1VGQlFTeG5Ra0ZCVXl4RlFVRkRMRTFCUVUwN1NVRkRaQ3hKUVVORkxIRkNRVUZ4UWl4SlFVTnlRaXhsUVVGbExFdEJRVXNzY1VKQlFXZENMRU5CUVVNc1UwRkJVeXhKUVVNNVF5eERRVUZETEc5Q1FVRnZRaXhGUVVOeVFqdE5RVU5CTzBsQlEwWTdTVUZEUVN4SlFVRkpMRmxCUVZrc1JVRkJSVHROUVVOb1FqdE5RVU5CTEVsQlFVRXNPRUpCUVhGQ0xFVkJRMjVDTEVsQlFVa3NhMEpCUVZNc1EwRkJReXh2UWtGQmIwSXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlEzQkVMRWxCUVVrc2EwSkJRVk1zUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVVzUTBGRE4wTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJSU3hOUVVGTkxFbEJRVXM3VVVGRGFrSXNjMEpCUVhOQ0xFTkJRVU1zVFVGQlRTeERRVUZETzAxQlEyaERMRU5CUVVNc1EwRkJRenRKUVVOS08wVkJRMFlzUTBGQlF5eEZRVUZGTEVOQlEwUXNaVUZCWlN4RlFVTm1MRmxCUVZrc1JVRkRXaXh4UWtGQmNVSXNSVUZEY2tJc1dVRkJXU3hGUVVOYUxHOUNRVUZ2UWl4RlFVTndRaXhwUWtGQmFVSXNRMEZEYkVJc1EwRkJRenRGUVVWR0xFbEJRVWtzYVVKQlFXbENMRVZCUVVVN1NVRkRja0lzVDBGQlR5eERRVUZETEVOQlFVTTdSVUZEV0R0RlFVVkJMRTFCUVUwN1NVRkJSU3hIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlFVVXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVGRkxFbEJRVWtzUjBGQlJ5eERRVUZETzBWQlFVVXNRMEZCUXl4SFFVRkhMR1ZCUVdVN1JVRkROVVFzU1VGQlNTeG5Ra0ZCWjBJc1IwRkJSeXhGUVVGRk8wVkJSWHBDTEVsQlEwVXNXVUZCV1N4SlFVTmFMRzFDUVVGdFFpeEpRVU51UWl4dFFrRkJiVUlzUzBGQlN5eFRRVUZUTEVsQlEycERMRU5CUVVFc2JVSkJRVzFDTEdGQlFXNUNMRzFDUVVGdFFpeDFRa0ZCYmtJc2JVSkJRVzFDTEVOQlFVVXNZMEZCWXl4TlFVRkxMRk5CUVZNc1JVRkRha1E3U1VGRFFTeG5Ra0ZCWjBJc1IwRkJSeXhOUVVGTkxFTkJRVU1zYlVKQlFXMUNMR0ZCUVc1Q0xHMUNRVUZ0UWl4MVFrRkJia0lzYlVKQlFXMUNMRU5CUVVVc1kwRkJZeXhEUVVGRE8wVkJRMmhGTEVOQlFVTXNUVUZCVFN4SlFVTk1MRTFCUVUwc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4SlFVRkpMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zTmtKQlFUWkNMRU5CUVVNc1JVRkROVVU3U1VGRFFTeG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNPMFZCUXpkRExFTkJRVU1zVFVGQlRUdEpRVU5NTEdkQ1FVRm5RaXhIUVVGSExFZEJRVWNzUTBGQlF5eHRRa0ZCYlVJN1JVRkROVU03UlVGRlFTeFBRVUZQTzBsQlFVVTdSVUZCYVVJc1EwRkJRenRCUVVNM1FpeERRVUZETzBGQlFVTXNUMEZCUVN4RFFVRkJMSEZDUVVGQkxFZEJRVUVzY1VKQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEYmtaR0xFbEJRVUVzVFVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRmRCUVVFc1IwRkJRU3hQUVVGQk8wRkJSVUVzU1VGQlFTeEpRVUZCTEVkQlFVRXNUMEZCUVR0QlFVbEJMRWxCUVVFc1MwRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEV0QlFVRXNSMEZCUVN4UFFVRkJPMEZCU1VFc1NVRkJRU3hWUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNUMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGZEJRVUVzUjBGQlFTeFBRVUZCTzBGQlMwRXNTVUZCUVN4elFrRkJRU3hIUVVGQkxFOUJRVUU3UVVGRlR5eE5RVUZOTEc5Q1FVRnZRaXhIUVVGSkxHRkJRV0VzU1VGQlN6dEZRVU55UkN4TlFVRk5PMGxCUTBvc1YwRkJWenRKUVVOWUxGbEJRVms3U1VGRFdpeGxRVUZsTzBsQlEyWXNVVUZCVVR0SlFVTlNMRmxCUVZrc1JVRkJSU3hwUWtGQmFVSTdTVUZETDBJc2IwSkJRVzlDTEVWQlFVVXNlVUpCUVhsQ08wbEJReTlETzBWQlEwWXNRMEZCUXl4SFFVRkhMRWxCUVVFc2QwSkJRV2RDTEVWQlFVTXNRMEZCUXp0RlFVTjBRaXhOUVVGTkxFTkJRVU1zZVVKQlFYbENMRVZCUVVVc05FSkJRVFJDTEVOQlFVTXNSMEZETjBRc1NVRkJRU3hsUVVGUkxFVkJRVU1zUzBGQlN5eERRVUZETzBWQlEycENMRTFCUVUwc2IwSkJRVzlDTEVkQlFVY3NTVUZCUVN4MVFrRkJWeXhGUVVGRExHdERRVUYxUWl4RFFVRkRPMFZCUldwRkxFbEJRVWtzV1VGQldUdEZRVU5vUWl4SlFVRkpMRzlDUVVGdlFqdEZRVU40UWl4SlFVRkpMRmRCUVZjN1JVRkZaaXhOUVVGTk8wbEJRVVU3UlVGQmNVSXNRMEZCUXl4SFFVRkhMRmRCUVZjN1JVRkZOVU1zU1VGQlNTeGxRVUZsTEdGQlFXWXNaVUZCWlN4bFFVRm1MR1ZCUVdVc1EwRkJSeXhoUVVGaExFTkJRVU1zUlVGQlJUdEpRVU53UXl4WlFVRlpMRWRCUVVjc1pVRkJaU3hEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETEhGQ1FVRnhRanRKUVVOdVJTeHZRa0ZCYjBJc1IwRkRiRUlzWlVGQlpTeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRMRFpDUVVFMlFqdEZRVU5vUlN4RFFVRkRMRTFCUVUwc1NVRkRUQ3hoUVVGaExFdEJRVXNzYlVKQlFXTXNRMEZCUXl4aFFVRmhMRWxCUXpsRExHOUNRVUZ2UWl4RlFVTndRanRKUVVOQkxGbEJRVmtzUjBGQlJ5eEpRVUZCTERKQ1FVRmxMRVZCUXpWQ0xHOUNRVUZ2UWl4RFFVRkRMRmxCUVZrc1NVRkJTU3h2UWtGQmIwSXNRMEZCUXl4UlFVTTFSQ3hEUVVGRE8wbEJRMFFzYjBKQlFXOUNMRWRCUVVjc1NVRkJRU3d5UWtGQlpTeEZRVU53UXl4dlFrRkJiMElzUTBGQlF5eHZRa0ZCYjBJc1NVRkJTU3haUVVNdlF5eERRVUZETzBWQlEwZ3NRMEZCUXl4TlFVRk5MRWxCUVVrc1lVRkJZU3hMUVVGTExHMUNRVUZqTEVOQlFVTXNUVUZCVFN4RlFVRkZPMGxCUTJ4RUxFbEJRVWtzV1VGQldTeExRVUZMTEcxQ1FVRmpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wMUJRekZETEZsQlFWa3NSMEZCUnl4cFFrRkJhVUk3VFVGRGFFTXNiMEpCUVc5Q0xFZEJRVWNzZVVKQlFYbENPMGxCUTJ4RUxFTkJRVU1zVFVGQlRTeEpRVUZKTEc5Q1FVRnZRaXhKUVVGSkxGZEJRVmNzUzBGQlN5eHBRa0ZCV1N4RFFVRkRMRXRCUVVzc1JVRkJSVHROUVVOeVJTeFpRVUZaTEVkQlFVY3NiMEpCUVc5Q0xFTkJRVU1zVlVGQlZUdE5RVU01UXl4dlFrRkJiMElzUjBGQlJ5eHZRa0ZCYjBJc1EwRkJReXhYUVVGWE8wbEJRM3BFTzBWQlEwWXNRMEZCUXl4TlFVRk5MRWxCUTB3c1lVRkJZU3hMUVVGTExHMUNRVUZqTEVOQlFVTXNiVUpCUVcxQ0xFbEJRM0JFTEZkQlFWY3NRMEZCUXl4WFFVRlhMRVZCUTNaQ08wbEJRVUVzU1VGQlFTeHhRa0ZCUVN4RlFVRkJMSE5DUVVGQk8wbEJRMEVzV1VGQldTeEhRVUZITEVsQlFVRXNNa0pCUVdVc1JVRkROVUlzU1VGQlFTd3lRa0ZCY1VJc1IwRkJRU3h4UWtGQlFTeEhRVUZETEZkQlFWY3NRMEZCUXl4WFFVRlhMR05CUVVFc2NVSkJRVUVzZFVKQlFYWkNMSEZDUVVGQkxFTkJRWGxDTEZsQlFWa3NRMEZETjBRc1EwRkJRenRKUVVORUxHOUNRVUZ2UWl4SFFVRkhMRWxCUVVFc01rSkJRV1VzUlVGRGNFTXNTVUZCUVN3eVFrRkJjVUlzUjBGQlFTeHpRa0ZCUVN4SFFVRkRMRmRCUVZjc1EwRkJReXhYUVVGWExHTkJRVUVzYzBKQlFVRXNkVUpCUVhaQ0xITkNRVUZCTEVOQlFYbENMRzlDUVVGdlFpeERRVU55UlN4RFFVRkRPMFZCUTBnN1JVRkZRU3hOUVVGTk8wbEJRVVU3UlVGQmFVSXNRMEZCUXl4SFFVRkhMRWxCUVVFc05FTkJRWEZDTEVWQlFVTTdTVUZEYWtRc1pVRkJaVHRKUVVObUxGbEJRVms3U1VGRFdqdEZRVU5HTEVOQlFVTXNRMEZCUXp0RlFVVkdMRWxCUVVrc1pVRkJaU3hEUVVGRExHRkJRV0VzUTBGQlF5eEZRVUZGTzBsQlEyeERMRmRCUVZjc1IwRkRWQ3hoUVVGaExFdEJRVXNzYlVKQlFXTXNRMEZCUXl4SlFVRkpMRWRCUTJwRExHVkJRV1VzWVVGQlppeGxRVUZsTEhWQ1FVRm1MR1ZCUVdVc1EwRkJSU3hKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRWRCUTNwRExHVkJRV1VzWVVGQlppeGxRVUZsTEhWQ1FVRm1MR1ZCUVdVc1EwRkJSU3hIUVVGSExFTkJRVU1zYlVKQlFXMUNPMFZCUTJoRUxFTkJRVU1zVFVGQlRUdEpRVU5NTEZkQlFWY3NSMEZCUnl4blFrRkJaMEk3UlVGRGFFTTdSVUZGUVN4TlFVRk5MSGRDUVVGM1FpeEhRVUZITEZsQlFWa3NSMEZEZWtNc1NVRkJRU3huUTBGQk1FSXNSVUZCUXp0SlFVTjZRaXhSUVVGUkxFVkJRVVVzU1VGQlFTeDNRa0ZCV1N4RlFVRkRMRkZCUVZFc1EwRkJRenRKUVVOb1F5eFpRVUZaTEVWQlFVVXNTVUZCUVN3eVFrRkJaU3hGUVVGRExGbEJRVms3UlVGRE5VTXNRMEZCUXl4RFFVRkRMRWRCUTBZc1NVRkJTVHRGUVVWU0xFbEJRVUVzWjBKQlFWTXNSVUZCUXl4TlFVRk5PMGxCUTJRN1NVRkRRVHRKUVVOQkxFbEJRMFVzUTBGQlF5eFhRVUZYTEV0QlFVc3NhVUpCUVZrc1EwRkJReXhOUVVGTkxFbEJRMnhETEZkQlFWY3NTMEZCU3l4cFFrRkJXU3hEUVVGRExFOUJRVThzVFVGRGNrTXNZVUZCWVN4TFFVRkxMRzFDUVVGakxFTkJRVU1zVFVGQlRTeEpRVU4wUXl4aFFVRmhMRXRCUVVzc2JVSkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZEZUVNN1RVRkRRU3hOUVVGTkxHVkJRV1VzUjBGQlJ5eERRVUZETEVsQlFVRXNhVVJCUVRKRExFVkJRMnhGTEZkQlFWY3NRMEZCUXl4WFFVRlhMRWxCUVVrc1YwRkJWeXhEUVVGRExGRkJRVkVzUlVGREwwTXNaVUZCWlN4RlFVTm1MR0ZCUTBZc1EwRkJRenROUVVORUxEUkNRVUUwUWl4RFFVRkRMR1ZCUVdVc1EwRkJRenRKUVVNdlF6dEZRVU5HTEVOQlFVTXNSVUZCUlN4RFFVRkRMRmRCUVZjc1JVRkJSU3hsUVVGbExFVkJRVVVzWVVGQllTeEZRVUZGTEZkQlFWY3NRMEZCUXl4RFFVRkRPMFZCUlRsRUxFOUJRVTg3U1VGRFRDeDVRa0ZCZVVJN1NVRkRla0lzV1VGQldUdEpRVU5hTEc5Q1FVRnZRanRKUVVOd1FpeFhRVUZYTzBsQlExZzdSVUZEUml4RFFVRkRPMEZCUTBnc1EwRkJRenRCUVVGRExFOUJRVUVzUTBGQlFTeHZRa0ZCUVN4SFFVRkJMRzlDUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRekZJUml4SlFVRkJMRTFCUVVFc1IwRkJRU3gxUWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3hQUVVGQk8wRkJTVUVzU1VGQlFTeGhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVdEJMRWxCUVVFc1MwRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEV0QlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hwUWtGQlFTeEhRVUZCTEU5QlFVRTdRVUZCYTBRc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPMEZCUVVFc1UwRkJRU3g1UWtGQlFTeFhRVUZCTEdWQlFVRXNUMEZCUVN4clEwRkJRU3hwUWtGQlFTeFBRVUZCTEU5QlFVRXNVVUZCUVN4blFrRkJRU3hQUVVGQkxFOUJRVUVzV1VGQlFTeDNRa0ZCUVN4WlFVRkJMRU5CUVVFc1YwRkJRU3hYUVVGQkxGZEJRVUVzUjBGQlFTeG5Ra0ZCUVN4SFFVRkJMR2xDUVVGQkxFdEJRVUVzVjBGQlFUdEJRVUZCTEZOQlFVRXNkMEpCUVVFc1IwRkJRU3hGUVVGQkxGZEJRVUVzVTBGQlFTeFhRVUZCTEVsQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxGZEJRVUVzUjBGQlFTeFJRVUZCTEVkQlFVRXNiMEpCUVVFc1IwRkJRU3gzUWtGQlFTeEhRVUZCTERSQ1FVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQkxGVkJRVUVzUzBGQlFTeEhRVUZCTEhkQ1FVRkJMRU5CUVVFc1YwRkJRU3hQUVVGQkxFdEJRVUVzU1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1dVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNVMEZCUVN4TlFVRkJMRmRCUVVFc2NVSkJRVUVzUjBGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4SlFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3hyUWtGQlFTeE5RVUZCTEVOQlFVRXNVMEZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNVMEZCUVN4SlFVRkJMRWRCUVVFc2NVSkJRVUVzUjBGQlFTeE5RVUZCTEVOQlFVRXNkMEpCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeGpRVUZCTEVsQlFVRXNTMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hOUVVGQkxFVkJRVUVzUjBGQlFTeEZRVUZCTEVsQlFVRXNXVUZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEZOQlFVRXNUVUZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hIUVVGQkxFMUJRVUVzUzBGQlFTeEpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFMUJRVUVzV1VGQlFTeE5RVUZCTzBGQlJXeEVMRTFCUVUwc1kwRkJZeXhIUVVGSExFTkJRVU03UlVGRGRFSXNWMEZCVnp0RlFVTllMSGxDUVVGNVFqdEZRVU42UWl4UlFVRlJPMFZCUTFJc1lVRkJZVHRGUVVOaU8wVkJRMEU3UlVGRFFUdEZRVU5CTEZsQlFWazdSVUZEV2l4dlFrRkJiMEk3UlVGRGNFSXNWMEZCVnp0RlFVTllPMEZCUTBZc1EwRkJReXhMUVVGTE8wVkJRMG9zVFVGQlRTeGpRVUZqTEVkQlFVY3NTVUZCUVN4alFVRlBMRVZCUVVNc1RVRkJUVHRKUVVOdVF5eFJRVUZSTEdGQlFXRTdUVUZEYmtJc1MwRkJTeXh0UWtGQll5eERRVUZETEVkQlFVYzdVVUZEY2tJc1QwRkJUeXhEUVVGRExFTkJRVU1zTmtKQlFUWkNMRVZCUVVVc1kwRkRkRU1zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMVZCUVUwc1IwRkJSeXhGUVVGRk8xRkJRV01zWjBKQlEzWkNMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeFpRVUZKTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVzc1EwRkRXaXhEUVVGRExFTkJRMUlzUTBGQlF6dE5RVU5LTEV0QlFVc3NiVUpCUVdNc1EwRkJReXhOUVVGTk8xRkJRM2hDTEVsQlFVa3NlVUpCUVhsQ0xFVkJRVVU3VlVGRE4wSXNUMEZCVHl4RFFVRkRMRU5CUVVNc2FVTkJRV2xETEVWQlFVVXNZMEZETVVNc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzFsQlFVMHNSMEZCUnl4RlFVRkhMREpDUVVFd1FpeGhRVUZqTzFWQlFVVXNSMEZEYmtRc1EwRkJReXhEUVVGRExHRkJRV0VzUTBGRFdpeERRVUZETEVOQlExSXNRMEZCUXp0UlFVTktPMUZCUTBFc1QwRkJUeXhEUVVGRExFTkJRVU1zWjBOQlFXZERMRVZCUVVVc1kwRkRla01zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMVZCUVUwc1IwRkJSeXhGUVVGRk8xRkJRV01zWjBKQlEzWkNMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeFpRVUZKTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVzc1EwRkRaaXhEUVVGRExFTkJRMUlzUTBGQlF6dE5RVU5LTEV0QlFVc3NiVUpCUVdNc1EwRkJReXhKUVVGSk8xRkJRM1JDTEVsQlFVa3NlVUpCUVhsQ0xFVkJRVVU3VlVGRE4wSXNUMEZCVHl4RFFVRkRMRU5CUVVNc2FVTkJRV2xETEVWQlFVVXNZMEZETVVNc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzFsQlFVMHNSMEZCUnl4RlFVRkhMREpDUVVFd1FpeGhRVUZqTzFWQlFVVXNSMEZEYmtRc1EwRkJReXhEUVVGRExHRkJRV0VzUTBGRFdpeERRVUZETEVOQlExSXNRMEZCUXp0UlFVTktPMUZCUTBFc1NVRkJTU3hYUVVGWExFdEJRVXNzYVVKQlFWa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1ZVRkRkRU1zVDBGQlR5eERRVUZETEVOQlFVTXNkVU5CUVhWRExFTkJRVU03VVVGRGJrUTdVVUZEUVN4UFFVRlBMRU5CUVVNc1EwRkJReXc0UWtGQk9FSXNSVUZCUlN4alFVTjJReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdWVUZCVFN4SFFVRkhMRVZCUVVVN1VVRkJZeXhuUWtGRGRrSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxGbEJRVWtzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCU3l4RFFVTmlMRU5CUVVNc1EwRkRVaXhEUVVGRE8wMUJRMG9zUzBGQlN5eHRRa0ZCWXl4RFFVRkRMRTFCUVUwN1VVRkRlRUlzVDBGQlR5eERRVUZETEVOQlFVTXNaME5CUVdkRExFVkJRVVVzWTBGRGVrTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8xVkJRVTBzUjBGQlJ5eEZRVUZGTzFGQlFXTXNaMEpCUTNaQ0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4WlFVRkpMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVXNzUTBGRFppeERRVUZETEVOQlExSXNRMEZCUXp0TlFVTktMRXRCUVVzc2JVSkJRV01zUTBGQlF5eGhRVUZoTzFGQlF5OUNMRTlCUVU4c1YwRkJWeXhoUVVGWUxGZEJRVmNzWlVGQldDeFhRVUZYTEVOQlFVVXNUVUZCVFN4SFFVTjBRaXhEUVVGRExFTkJRVU1zZFVOQlFYVkRMRVZCUVVVc1kwRkRla01zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMVZCUVUwc1IwRkJSeXhGUVVGRkxGZEJRVmNzWVVGQldDeFhRVUZYTEhWQ1FVRllMRmRCUVZjc1EwRkJSVHRSUVVGUExFZEJRVVVzVjBGQlZ5eGhRVUZZTEZkQlFWY3NkVUpCUVZnc1YwRkJWeXhEUVVGRkxFMUJRV0VzUTBGQlF5eERRVU0zUkN4RFFVRkRMRWRCUTBZc1NVRkJTVHROUVVOV08xRkJRMFVzVDBGQlR5eEZRVUZGTzBsQlEySTdSVUZEUml4RFFVRkRMRVZCUVVVc1EwRkJReXhYUVVGWExFVkJRVVVzZVVKQlFYbENMRVZCUVVVc1lVRkJZU3hGUVVGRkxGZEJRVmNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0RlFVVXpSU3hKUVVGSkxGVkJRVlU3UlVGRFpDeEpRVUZKTEdGQlFXRXNTMEZCU3l4dFFrRkJZeXhEUVVGRExFZEJRVWNzUlVGQlJUdEpRVU40UXl4VlFVRlZMRWRCUVVjc1EwRkJReXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRPMFZCUTNaRExFTkJRVU1zVFVGQlRTeEpRVUZKTEdGQlFXRXNTMEZCU3l4dFFrRkJZeXhEUVVGRExFMUJRVTBzUlVGQlJUdEpRVU5zUkN4VlFVRlZMRWRCUVVjc1EwRkJReXhEUVVGRExIZENRVUYzUWl4RFFVRkRPMFZCUXpGRExFTkJRVU1zVFVGQlRTeEpRVUZKTEdGQlFXRXNTMEZCU3l4dFFrRkJZeXhEUVVGRExFbEJRVWtzUlVGQlJUdEpRVU5vUkN4VlFVRlZMRWRCUVVjc1EwRkJReXhEUVVGRExITkNRVUZ6UWl4RFFVRkRPMFZCUTNoRE96dEZRVVZCTzBWQlEwRTdSVUZEUVR0RlFVTkJMRTFCUVUwc2IwSkJRVzlDTEVkQlEzaENMRWxCUVVFc2IwTkJRVGhDTEVWQlFVTXNZVUZCWVN4RFFVRkRMRWxCUXpkRExFVkJRMFVzWVVGQllTeExRVUZMTEcxQ1FVRmpMRU5CUVVNc1NVRkJTU3hKUVVOeVF5eFhRVUZYTEV0QlFVc3NhVUpCUVZrc1EwRkJReXhMUVVGTExFTkJRMjVETEVsQlEwUXNRMEZCUXl4NVFrRkJlVUk3UlVGRk5VSXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzBsQlFVc3NVMEZCVXl4RlFVRkRPMFZCUVRaQ0xFZEJRM3BETEc5Q1FVRnZRaXhuUWtGRGJrSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wbEJRVXNzUjBGQlJ5eEZRVUZGTEZWQlFWYzdTVUZCUXl4SFFVRkhMRVZCUVVjc2EwSkJRV2xDTEdGQlFXTTdSVUZCVFN4RFFVRkZMRU5CUVVNc1IwRkRiRVVzU1VGQlNTeEZRVU5RTEdOQlFXTXNhVUpCUTJJc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzBsQlFVc3NVMEZCVXl4RlFVRkRPMFZCUVhORExHZENRVU51UkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRWxCUVVrN1NVRkJReXhQUVVGUExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4TlFVRlBPMGxCUVVNc1JVRkJSU3hGUVVGRE8wVkJRVWtzUjBGRGRrTXNZMEZEUnl4RFFVTklMRU5CUTA0c1JVRkRRU3hoUVVGaExFdEJRVXNzYlVKQlFXTXNRMEZCUXl4TlFVRk5MRWxCUTNoRExIbENRVUY1UWl4SFFVRkhMRWxCUVVrc1owSkJRemxDTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRKUVVGTExGTkJRVk1zUlVGQlF6dEZRVUZ4UXl4blFrRkRiRVFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMREpDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzU1VGQlNUdEpRVU5JTEU5QlFVOHNSVUZCUlN4NVFrRkJWeXhEUVVGRExFMUJRVTg3U1VGRE5VSXNSVUZCUlN4RlFVRkRMRWxCUVVrN1NVRkRVQ3hWUVVGVkxFVkJRVVVzZDBKQlFWVXNRMEZCUXl4SlFVRkxPMGxCUXpWQ0xGTkJRVk1zUlVGQlF6dEZRVUZ2UXl4SFFVVTNReXhEUVVGRExFTkJRVU1zV1VGQldTeERRVU5ZTEVOQlFVTXNSVUZEVGl4WlFVRlpMR2xDUVVOWUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzU1VGQlNUdEpRVU5JTEU5QlFVOHNSVUZCUlN4NVFrRkJWeXhEUVVGRExFMUJRVTg3U1VGRE5VSXNSVUZCUlN4RlFVRkRMRWxCUVVrN1NVRkRVQ3hMUVVGTExFVkJRVVVzZFVKQlFWTXNRMEZCUXl4bFFVRm5RanRKUVVOcVF5eFRRVUZUTEVWQlFVTTdSVUZCYjBNc1IwRkZOME1zU1VGQlFTdzJRMEZCZFVNc1JVRkJReXhaUVVGWkxFVkJRVVVzUTBGQlF5eERRVU53UkN4RFFVVk1MRU5CUVVNc1pVRkRUaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNNa0pCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNhVUpCUVVFc1EwRkJRU3hKUVVGSk8wbEJRMGdzVDBGQlR5eEZRVUZGTEhsQ1FVRlhMRU5CUVVNc1RVRkJUenRKUVVNMVFpeEZRVUZGTEVWQlFVTXNTVUZCU1R0SlFVTlFMRlZCUVZVc1JVRkJSU3gzUWtGQlZTeERRVUZETEVsQlFVczdTVUZETlVJc1UwRkJVeXhGUVVGRE8wVkJRVzlETEVkQlJUZERMRU5CUVVNc1EwRkJReXgxUWtGQmRVSXNRMEZEZEVJc1EwRkJReXhGUVVOT0xHOUNRVUZ2UWl4cFFrRkRia0lzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2FVSkJRVUVzUTBGQlFTeEpRVUZKTzBsQlEwZ3NUMEZCVHl4RlFVRkZMSGxDUVVGWExFTkJRVU1zVFVGQlR6dEpRVU0xUWl4RlFVRkZMRVZCUVVNc1NVRkJTVHRKUVVOUUxFdEJRVXNzUlVGQlJTeDFRa0ZCVXl4RFFVRkRMR1ZCUVdkQ08wbEJRMnBETEZOQlFWTXNSVUZCUXp0RlFVRnZReXhIUVVVM1F5eEpRVUZCTERaRFFVRjFReXhGUVVOMFF5eHZRa0ZCYjBJc1JVRkRjRUlzUTBGRFJpeERRVU5KTEVOQlJVd3NRMEZCUXl4bFFVTk9MRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTd3lRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRWxCUVVrN1NVRkRTQ3hQUVVGUExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4TlFVRlBPMGxCUXpWQ0xFVkJRVVVzUlVGQlF5eEpRVUZKTzBsQlExQXNWVUZCVlN4RlFVRkZMSGRDUVVGVkxFTkJRVU1zU1VGQlN6dEpRVU0xUWl4VFFVRlRMRVZCUVVNN1JVRkJiME1zUjBGRk4wTXNRMEZCUXl4RFFVRkRMRlZCUVZVc1EwRkRWQ3hEUVVGRExFVkJRMDRzVVVGQlVTeHBRa0ZEVUN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRWxCUVVrN1NVRkRTQ3hQUVVGUExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4TlFVRlBPMGxCUXpWQ0xFVkJRVVVzUlVGQlF5eEpRVUZKTzBsQlExQXNTMEZCU3l4RlFVRkZMSFZDUVVGVExFTkJRVU1zWlVGQlowSTdTVUZEYWtNc1UwRkJVeXhGUVVGRE8wVkJRVzlETEVkQlJUZERMRWxCUVVFc05rTkJRWFZETEVWQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNc1EwRkRhRVFzUTBGRlRDeERRVU5HTEVOQlJVb3NRMEZCUXp0QlFVVldMRU5CUVVNN1FVRkZSQ3hqUVVGakxFTkJRVU1zVTBGQlV5eEhRVUZITzBWQlEzcENMSGxDUVVGNVFpeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTVHRGUVVONlF5eGhRVUZoTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTk8wVkJReTlDTEZsQlFWa3NSVUZCUlN4clFrRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEd0Q1FVRlRMRU5CUVVNc1RVRkJUU3hGUVVGRkxHdENRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1JVRkRka1VzYjBKQlFXOUNMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZEZUVNc2EwSkJRVk1zUTBGQlF5eE5RVUZOTEVWQlEyaENMR3RDUVVGVExFTkJRVU1zVFVGQlRTeERRVU5xUWl4RFFVRkRPMFZCUTBZc1EwRkJReXhGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1R0RlFVTnFRaXhYUVVGWExFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TlFVRk5PMFZCUXpkQ0xGRkJRVkVzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwN1JVRkRNVUlzVjBGQlZ5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNN1FVRkRla0lzUTBGQlF6dEJRVUZETEVsQlFVRXNVVUZCUVN4SFFVVmhMR05CUVdNN1FVRkJRU3hQUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEZGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTjRUVGRDTEVsQlFVRXNhMEpCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZCYVVRc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRRV3BFTEVsQlFVRXNhMEpCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZCSzBNc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTBFdlF5eEpRVUZCTEUxQlFVRXNSMEZCUVN4MVFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdGQlFVRXNSMEZCUVN4UFFVRkJPMEZCUzBFc1NVRkJRU3hMUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNTVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFdEJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzYVVKQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hUUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNZVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVUV5UXl4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMSGxDUVVGQkxGZEJRVUVzWlVGQlFTeFBRVUZCTEd0RFFVRkJMR2xDUVVGQkxFOUJRVUVzVDBGQlFTeFJRVUZCTEdkQ1FVRkJMRTlCUVVFc1QwRkJRU3haUVVGQkxIZENRVUZCTEZsQlFVRXNRMEZCUVN4WFFVRkJMRmRCUVVFc1YwRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNhVUpCUVVFc1MwRkJRU3hYUVVGQk8wRkJRVUVzVTBGQlFTeDNRa0ZCUVN4SFFVRkJMRVZCUVVFc1YwRkJRU3hUUVVGQkxGZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1YwRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHZRa0ZCUVN4SFFVRkJMSGRDUVVGQkxFZEJRVUVzTkVKQlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFc1ZVRkJRU3hMUVVGQkxFZEJRVUVzZDBKQlFVRXNRMEZCUVN4WFFVRkJMRTlCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4WlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFRRVUZCTEUxQlFVRXNWMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMR3RDUVVGQkxFMUJRVUVzUTBGQlFTeFRRVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeFRRVUZCTEVsQlFVRXNSMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxHTkJRVUVzU1VGQlFTeExRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRTFCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzU1VGQlFTeFpRVUZCTEUxQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRWRCUVVFc1RVRkJRU3hMUVVGQkxFbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1RVRkJRU3haUVVGQkxFMUJRVUU3UVVGRk0wTXNUVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eERRVUZCTEV0QlFVMDdSVUZET1VJc1RVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlFTeHBRa0ZCVlN4RlFVRkRMR2xDUVVGWExFTkJRVU03UlVGRGFrTXNUVUZCVFR0SlFVRkZPMFZCUVdkQ0xFTkJRVU1zUjBGQlJ5eEpRVUZCTEhkQ1FVRm5RaXhGUVVGRExFTkJRVU03UlVGRE9VTXNUVUZCVFN4elFrRkJjMElzUjBGQlJ5eEpRVUZCTERKQ1FVRnpRaXhGUVVOdVJDeGxRVUZsTEdGQlFXWXNaVUZCWlN4MVFrRkJaaXhsUVVGbExFTkJRVVVzWjBKQlFXZENMRVZCUTJwRE8wbEJRMFVzVTBGQlV5eEZRVUZGTzBWQlEySXNRMEZEUml4RFFVRkRPMFZCUTBRc1RVRkJUU3dyUWtGQkswSXNSMEZCUnl4SlFVRkJMREpDUVVGelFpeEZRVU0xUkN4bFFVRmxMR0ZCUVdZc1pVRkJaU3gxUWtGQlppeGxRVUZsTEVOQlFVVXNjMEpCUVhOQ0xFVkJRM1pETzBsQlFVVXNVMEZCVXl4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU03UlVGQlJTeERRVU4wUWl4RFFVRkRPMFZCUTBRc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4bFFVRmxMR0ZCUVdZc1pVRkJaU3gxUWtGQlppeGxRVUZsTEVOQlFVVXNhVUpCUVdsQ08wVkJSVFZFTEc5Q1FVTkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdEpRVUZMTEZOQlFWTXNSVUZCUXp0RlFVRnZRaXhuUWtGRGFrTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4SlFVRkpPMGxCUTBnc1MwRkJTeXhGUVVGRkxIVkNRVUZUTEVOQlFVTXNaVUZCWjBJN1NVRkRha01zVlVGQlZTeEZRVUZGTEhkQ1FVRlZMRU5CUVVNc1NVRkJTenRKUVVNMVFpeFRRVUZUTEVWQlFVVXNRMEZCUlR0SlFVTmlMRmxCUVZrc1JVRkJSU3hEUVVGRk8wbEJRMmhDTEU5QlFVOHNSVUZCUlN4NVFrRkJWeXhEUVVGRExFMUJRVTg3U1VGRE5VSXNSVUZCUlN4RlFVRkRPMFZCUVVrc1IwRkZUaXhEUVVGRExFTkJRVU1zWlVGQlpTeERRVU5rTEVOQlFVTXNaVUZEVUN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3U1VGQlN5eFRRVUZUTEVWQlFVTTdSVUZCTUVJc1IwRkRkRU1zU1VGQlFTeGxRVUZUTEVWQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUjBGQlJ5eEpRVUZKTEdkQ1FVTjJReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdTVUZEUlN4VFFVRlRMRVZCUVVNc01rSkJRVEpDTzBsQlEzSkRMR1ZCUVZrN1JVRkJNa0lzWjBKQlJYWkRMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEZOQlFVRXNRMEZCUVN4alFVRmpMSEZDUVVOaUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVRk5MRk5CUVZNc1JVRkJRenRGUVVGblF5eEhRVU0zUXl4elFrRkRSeXhEUVVGRExHVkJRMUFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUVUwc1UwRkJVeXhGUVVGRE8wVkJRV2xETEVkQlF6bERMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRMUlzUTBGRFVTeERRVU5pTEVOQlEwNHNSVUZEUVN4SlFVRkJMR1ZCUVZNc1JVRkJReXdyUWtGQkswSXNRMEZCUXl4SFFVRkhMRWxCUVVrc1owSkJRMmhFTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRKUVVORkxGTkJRVk1zUlVGQlF5d3lRa0ZCTWtJN1NVRkRja01zWlVGQldUdEZRVUZ4UXl4blFrRkZha1FzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1UwRkJRU3hEUVVGQkxHdENRVUZyUWl4eFFrRkRha0lzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUVUwc1UwRkJVeXhGUVVGRE8wVkJRV2RETEVkQlF6ZERMQ3RDUVVOSExFTkJRVU1zWlVGRFVDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1NVRkJUU3hUUVVGVExFVkJRVU03UlVGQmFVTXNSMEZET1VNc1EwRkJReXhEUVVGRExHRkJRV0VzUTBGRFdpeERRVU5aTEVOQlEycENMRU5CUTA0c1JVRkRRU3hKUVVGQkxHVkJRVk1zUlVGQlF5eHBRa0ZCYVVJc1EwRkJReXhIUVVGSExFbEJRVWtzWjBKQlEyeERMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdEpRVUZMTEZOQlFWTXNSVUZCUXp0RlFVRXlRaXhuUWtGRGVFTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zWVVGQlFTeERRVUZCTEU5QlFWa3NUVUZCUlN4RFFVTmFMRU5CUlVvc1EwRkRSaXhEUVVGRE8wRkJSVllzUTBGQlF6dEJRVUZETEVsQlFVRXNVVUZCUVN4SFFVVmhMR2xDUVVGcFFqdEJRVUZCTEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc1VVRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMnhHYUVNc1NVRkJRU3hoUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUVRCRExGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOQk1VTXNTVUZCUVN4TlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlJVRXNTVUZCUVN4SlFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFRRVUZCTEVkQlFVRXNUMEZCUVR0QlFVRnpSQ3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN1FVRkZkRVFzVFVGQlRTeGxRVUZsTEVkQlFVY3NRMEZEZEVJc1UwRkJVeXhGUVVOVUxGTkJRVk1zUlVGRFZDeFRRVUZUTEVWQlExUXNVMEZCVXl4RlFVTlVMRk5CUVZNc1JVRkRWQ3hUUVVGVExFVkJRMVFzVTBGQlV5eEZRVU5VTEZOQlFWTXNSVUZEVkN4VFFVRlRMRVZCUTFRc1UwRkJVeXhGUVVOVUxGTkJRVk1zUTBGRFZqdEJRVVZFTEUxQlFVMHNiVUpCUVcxQ0xFZEJRVWtzYzBKQlFYTkNMRWxCUVVzN1JVRkRkRVFzVFVGQlRTeHBRa0ZCYVVJc1IwRkJSeXh6UWtGQmMwSXNTVUZCU1N4SFFVRkhPMFZCUTNaRUxFMUJRVTBzVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NSVUZCUlN4RFFVRkRPMFZCUTNKRUxFMUJRVTBzUzBGQlN5eEhRVUZITEdWQlFXVXNRMEZCUXl4VlFVRlZMRU5CUVVNN1JVRkRla01zVFVGQlRTeGxRVUZsTEVkQlFVY3NWVUZCVlN4SFFVRkhMRVZCUVVVN1JVRkZka01zU1VGQlNTeHBRa0ZCYVVJc1NVRkJTU3huUTBGQk1rSXNRMEZCUXl4SlFVRkpMRVZCUVVVN1NVRkRla1FzVDBGQlR6dE5RVU5NTEZkQlFWY3NSVUZCUlN4TlFVRk5PMDFCUTI1Q0xGbEJRVmtzUlVGQlJTeGxRVUZsTzAxQlF6ZENMRXRCUVVzN1RVRkRURHRKUVVOR0xFTkJRVU03UlVGRFNDeERRVUZETEUxQlFVMHNTVUZCU1N4cFFrRkJhVUlzU1VGQlNTeG5RMEZCTWtJc1EwRkJReXhOUVVGTkxFVkJRVVU3U1VGRGJFVXNUMEZCVHp0TlFVTk1MRmRCUVZjc1JVRkJSU3hSUVVGUk8wMUJRM0pDTEZsQlFWa3NSVUZCUlN4cFFrRkJhVUk3VFVGREwwSXNTMEZCU3p0TlFVTk1PMGxCUTBZc1EwRkJRenRGUVVOSU8wVkJRMEVzVDBGQlR6dEpRVU5NTEZkQlFWY3NSVUZCUlN4VFFVRlRPMGxCUTNSQ0xGbEJRVmtzUlVGQlJTeGpRVUZqTzBsQlF6VkNMRXRCUVVzN1NVRkRURHRGUVVOR0xFTkJRVU03UVVGRFNDeERRVUZETzBGQlJVUXNUVUZCVFN4WlFVRlpMRWRCUVVjc1EwRkJRU3hMUVVGTk8wVkJRM3BDTEUxQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVFc09FSkJRV01zUlVGQlF5eERRVUZETzBWQlF6RkNMRTFCUVUwN1NVRkJSVHRGUVVGblFpeERRVUZETEVkQlFVY3NTVUZCUVN4M1FrRkJaMElzUlVGQlF5eERRVUZETzBWQlF6bERMRTFCUVUwc1ZVRkJWU3hIUVVGSExHMUNRVUZ0UWl4RFFVRkRMR1ZCUVdVc1EwRkJReXhwUWtGQmFVSXNRMEZCUXp0RlFVVjZSU3h2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhUUVVGQkxFTkJRVUVzZFVKQlFYVkNPMGxCUTNSQ0xFdEJRVXNzUlVGQlJTeFZRVUZWTEVOQlFVTXNTMEZCVFR0SlFVTjRRaXhaUVVGWkxFVkJRVVVzVlVGQlZTeERRVUZETzBWQlFXRXNaMEpCUlhSRExFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVRkxMRk5CUVZNc1JVRkJRenRGUVVGbExHZENRVU0xUWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3U1VGQlN5eFRRVUZUTEVWQlFVTTdSVUZCWjBNc1owSkJRemRETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRKUVVORkxGTkJRVk1zUlVGQlF5dzJRa0ZCTmtJN1NVRkRka01zUzBGQlN5eEZRVUZGTzAxQlEwd3NWVUZCVlN4RlFVRkhMRWRCUVVVc1ZVRkJWU3hEUVVGRExHVkJRV2RDTzBsQlF6VkRMRU5CUVVVN1NVRkRSaXhsUVVGWk8wVkJRVFJDTEdkQ1FVVjRReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdTVUZEUlN4VFFVRlRMRVZCUVVNc2MwSkJRWE5DTzBsQlEyaERMRXRCUVVzc1JVRkJSVHROUVVOTUxHTkJRV01zUlVGQlJTeFZRVUZWTEVOQlFVTTdTVUZETjBJc1EwRkJSVHRKUVVOR0xHVkJRVms3UlVGQmNVSXNRMEZEYkVNc1EwRkRSU3hEUVVOR0xFTkJRVU1zWlVGRFRpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1NVRkJTeXhUUVVGVExFVkJRVU03UlVGQmNVSXNRMEZCUlN4RFFVRkRMR1ZCUTNaRExFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVTkZMRk5CUVZNc1JVRkJReXh6UWtGQmMwSTdTVUZEYUVNc1MwRkJTeXhGUVVGRk8wMUJRVVVzUzBGQlN5eEZRVUZGTEZWQlFWVXNRMEZCUXp0SlFVRk5MRU5CUVVVN1NVRkRia01zWlVGQldUdEZRVUZ4UWl4SFFVVm9ReXhEUVVGRExFTkJRVU1zVlVGQlZTeERRVUZETEZkQlFWY3NRMEZEZEVJc1EwRkRSaXhEUVVOclFpeERRVUZETzBGQlJUbENMRU5CUVVNN1FVRkJReXhKUVVGQkxGRkJRVUVzUjBGRllTeFpRVUZaTzBGQlFVRXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hSUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRek5HTTBJc1NVRkJRU3hOUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUlVFc1NVRkJRU3hsUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNTVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNVVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVVZCTEVsQlFVRXNZVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkhjVVFzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJSWEpFTEUxQlFVMHNiMEpCUVc5Q0xFZEJRVWNzUTBGQlF6dEZRVUZGTEZGQlFWRTdSVUZCUlN4SlFVRkpPMFZCUVVVN1FVRkJUU3hEUVVGRExHdENRVU55UkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eFJRVUZCTEVOQlFVRXNUMEZCVHp0RlFVRkRMRkZCUVZFc1JVRkJReXhMUVVGTE8wVkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVczdSVUZCUXl4TFFVRkxMRVZCUVVVN1FVRkJUU3huUWtGREwwTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zU1VGQlFTeERRVUZCTEU5QlFVYzdSVUZCUXl4UFFVRlBMRVZCUVVVc2NVSkJRVThzUTBGQlF5eEpRVUZMTzBWQlFVTXNZVUZCWVN4RlFVRkZMRFJDUVVGakxFTkJRVU03UVVGQlR5eEhRVU01UkN4UlFVTkZMRU5CUTBVc1EwRkRWanRCUVVWRUxHOUNRVUZ2UWl4RFFVRkRMRk5CUVZNc1IwRkJSenRGUVVNdlFpeFJRVUZSTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZUdEZRVU51UXl4SlFVRkpMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTzBWQlEzQkNMRXRCUVVzc1JVRkJSU3hyUWtGQlV5eERRVUZETzBGQlEyNUNMRU5CUVVNN1FVRkZUU3hOUVVGTkxHTkJRV01zUjBGQlJ5eERRVUZETzBWQlFVVTdRVUZCVXl4RFFVRkRMRXRCUVVzN1JVRkRPVU1zVFVGQlRTeERRVUZETEVkQlFVY3NTVUZCUVN3NFFrRkJZeXhGUVVGRExFTkJRVU03UlVGRE1VSXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNiMEpCUVc5Q08wbEJRMjVDTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNc05rSkJRVFpDTEVWQlFVVXNZMEZEY2tNc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlEwVXNSMEZCUnl4RlFVRkRMREJDUVVFd1FqdE5RVU01UWl4VFFVRlRMRVZCUVVNN1NVRkJLMElzUjBGRmVFTXNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkRUQ3hEUVVGRExHVkJRMVFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMDFCUTBVc1IwRkJSeXhGUVVGRExIZENRVUYzUWp0TlFVTTFRaXhUUVVGVExFVkJRVU03U1VGQkswSXNSMEZGZUVNc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGRFNDeERRVUZETEVOQlExWTdSVUZCUlN4SFFVVkdMRkZCUTIxQ0xFTkJRVU03UVVGRk0wSXNRMEZCUXp0QlFVRkRMRTlCUVVFc1EwRkJRU3hqUVVGQkxFZEJRVUVzWTBGQlFUdEJRVVZHTEdOQlFXTXNRMEZCUXl4VFFVRlRMRWRCUVVjN1JVRkRla0lzVVVGQlVTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRek5DTEVOQlFVTTdRVUZGVFN4TlFVRk5MR3RDUVVGclFpeEhRVUZITEVOQlFVTTdSVUZCUlR0QlFVRlRMRU5CUVVNc1MwRkJTenRGUVVOc1JDeE5RVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkJMRGhDUVVGakxFVkJRVU1zUTBGQlF6dEZRVU14UWl4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4dlFrRkJiMEk3U1VGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRMR2xEUVVGcFF6dEZRVUZGTEVkQlF5OUVMRkZCUTIxQ0xFTkJRVU03UVVGRk0wSXNRMEZCUXp0QlFVRkRMRTlCUVVFc1EwRkJRU3hyUWtGQlFTeEhRVUZCTEd0Q1FVRkJPMEZCUlVZc2EwSkJRV3RDTEVOQlFVTXNVMEZCVXl4SFFVRkhPMFZCUXpkQ0xGRkJRVkVzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVNelFpeERRVUZETzBGQlJVMHNUVUZCVFN4MVFrRkJkVUlzUjBGQlJ5eERRVUZETzBWQlFVVXNVVUZCVVR0RlFVRkZMRXRCUVVzN1JVRkJSVHRCUVVGaExFTkJRVU1zUzBGQlN6dEZRVU0xUlN4TlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGQkxEaENRVUZqTEVWQlFVTXNRMEZCUXp0RlFVVXhRaXh2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXh2UWtGQmIwSTdTVUZEYmtJc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF5eHJRMEZCYTBNc1JVRkJSU3hqUVVNeFF5eE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1RVRkRSU3hIUVVGSExFVkJRVU1zZVVKQlFYbENPMDFCUXpkQ0xGTkJRVk1zUlVGQlF5d3JRa0ZCSzBJN1RVRkRla01zUzBGQlN5eEZRVUZGTzFGQlFVVTdUVUZCVFR0SlFVRkZMRWRCUldoQ0xFTkJRVU1zUTBGQlF5eFpRVUZaTEVOQlExUXNRMEZCUXl4RFFVTldPMFZCUVVVc1IwRkZSaXhSUVVOdFFpeERRVUZETzBGQlJUTkNMRU5CUVVNN1FVRkJReXhQUVVGQkxFTkJRVUVzZFVKQlFVRXNSMEZCUVN4MVFrRkJRVHRCUVVWR0xIVkNRVUYxUWl4RFFVRkRMRk5CUVZNc1IwRkJSenRGUVVOc1F5eFJRVUZSTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZUdEZRVU51UXl4TFFVRkxMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlR0RlFVTnNReXhaUVVGWkxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkRha01zUTBGQlF6czdPenM3T3pzN096czdPenM3T3pzN096czdRVU16UmtRc1NVRkJRU3hOUVVGQkxFZEJRVUVzZFVKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hYUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNaMEpCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFpRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1NVRkJRU3hIUVVGQkxFOUJRVUU3UVVGUFFTeEpRVUZCTEZGQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEU5QlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRlFTeEpRVUZCTEV0QlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hSUVVGQkxFZEJRVUVzVDBGQlFUdEJRVkZCTEVsQlFVRXNhVUpCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMSE5DUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkpjVVFzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeDVRa0ZCUVN4WFFVRkJMR1ZCUVVFc1QwRkJRU3hyUTBGQlFTeHBRa0ZCUVN4UFFVRkJMRTlCUVVFc1VVRkJRU3huUWtGQlFTeFBRVUZCTEU5QlFVRXNXVUZCUVN4M1FrRkJRU3haUVVGQkxFTkJRVUVzVjBGQlFTeFhRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEV0QlFVRXNWMEZCUVR0QlFVRkJMRk5CUVVFc2QwSkJRVUVzUjBGQlFTeEZRVUZCTEZkQlFVRXNVMEZCUVN4WFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEZkQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2IwSkJRVUVzUjBGQlFTeDNRa0ZCUVN4SFFVRkJMRFJDUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTEZWQlFVRXNTMEZCUVN4SFFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzV1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxGZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHJRa0ZCUVN4TlFVRkJMRU5CUVVFc1UwRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1UwRkJRU3hKUVVGQkxFZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4alFVRkJMRWxCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRWxCUVVFc1dVRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEUxQlFVRXNXVUZCUVN4TlFVRkJPMEZCUVVFc1UwRkJRU3hUUVVGQkxFbEJRVUVzVVVGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4TlFVRkJMRWRCUVVFc1RVRkJRU3hEUVVGQkxFMUJRVUVzUTBGQlFTeEpRVUZCTEdWQlFVRXNUVUZCUVN4aFFVRkJMRU5CUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVN4RFFVRkJMRlZCUVVFc1RVRkJRU3hIUVVGQkxGTkJRVUVzUTBGQlFTeERRVUZCTEZsQlFVRXNSMEZCUVN4SlFVRkJMRTFCUVVFc1VVRkJRU3hOUVVGQkxFTkJRVUVzVTBGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1RVRkJRU3hGUVVGQkxFZEJRVUVzUzBGQlFTeE5RVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRTFCUVVFc1EwRkJRU3hIUVVGQkxHZENRVUZCTEUxQlFVRXNXVUZCUVN4UlFVRkJMRU5CUVVFc1MwRkJRU3hQUVVGQkxGTkJRVUU3UVVGRmRFTXNVMEZCVXl4alFVRmpMRU5CUVVNN1JVRkRja01zV1VGQldTeEhRVUZITEVWQlFVVTdSVUZEYWtJc2FVSkJRV2xDTEVkQlFVY3NSVUZCUlR0RlFVTjBRaXh0UWtGQmJVSXNSMEZCUnl4RFFVRkRMRU5CUVVNN1JVRkRlRUlzVjBGQlZ6dEZRVU5ZTEVsQlFVazdSVUZEU2l4UFFVRlBPMFZCUTFBc1pVRkJaU3hIUVVGSExHVkJRVlVzUTBGQlF6dEJRVU12UWl4RFFVRkRMRVZCUVVVN1JVRkRSQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZCTEdsQ1FVRlZMRVZCUVVNc2FVSkJRVmNzUTBGQlF6dEZRVU5xUXl4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGQkxIVkNRVUZYTEVWQlFVTXNRMEZCUXp0RlFVVTVRaXhOUVVGTkxFTkJRVU1zSzBKQlFTdENMRVZCUVVVc2EwTkJRV3RETEVOQlFVTXNSMEZEZWtVc1NVRkJRU3hsUVVGUkxFVkJRVU1zUzBGQlN5eERRVUZETzBWQlJXcENMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NTVUZCUVN4M1FrRkJXU3hGUVVGRExHVkJRV1VzUTBGQlF6dEZRVU40UkN4TlFVRk5MSGRDUVVGM1FpeEhRVUZITEVsQlFVRXNORU5CUVhGQ0xFVkJRVU1zVjBGQlZ5eERRVUZETzBWQlJXNUZMRWxCUVVrc2EwSkJRV3RDTEVkQlFVY3NWMEZCVnp0RlFVTndReXhKUVVGSkxFbEJRVWtzUzBGQlN5eHBRa0ZCV1N4RFFVRkRMRTlCUVU4c1NVRkJTU3hKUVVGSkxFdEJRVXNzYVVKQlFWa3NRMEZCUXl4TlFVRk5MRVZCUVVVN1NVRkRha1VzYTBKQlFXdENMRWRCUVVjN1RVRkRia0lzUjBGQlJ5eFhRVUZYTzAxQlEyUXNXVUZCV1N4RlFVRkZMSGRDUVVGdFFqdE5RVU5xUXl4UlFVRlJMRVZCUVVVN1VVRkRVaXhIUVVGSExGZEJRVmNzUTBGQlF5eFJRVUZSTzFGQlEzWkNMRWRCUVVjN1RVRkRURHRKUVVOR0xFTkJRVU03UlVGRFNEdEZRVVZCTEUxQlFVMDdTVUZEU2l4elFrRkJjMEk3U1VGRGRFSXNVVUZCVVR0SlFVTlNMRmRCUVZjN1NVRkRXQ3hSUVVGUk8wbEJRMUlzVjBGQlZ6dEpRVU5ZTEdOQlFXTTdTVUZEWkN4aFFVRmhPMGxCUTJJc1dVRkJXVHRKUVVOYUxGTkJRVk03U1VGRFZDeGpRVUZqTzBsQlEyUTdSVUZEUml4RFFVRkRMRWRCUVVjc1NVRkJRU3huUTBGQlpTeEZRVU5xUWl4MVFrRkJhMElzUTBGQlF5eE5RVUZOTEVWQlEzcENMR3RDUVVGclFpeEZRVU5zUWl4bFFVRmxMRVZCUTJZc1NVRkRSaXhEUVVGRE8wVkJSVVFzVFVGQlRTd3dRa0ZCTUVJc1IwRkRPVUlzWVVGQllTeExRVUZMTEhkQ1FVRnRRaXhKUVVOeVF5eEpRVUZCTEhGRFFVRjNRaXhGUVVGRExHdENRVUZyUWl4RFFVRkRPenRGUVVVNVF6dEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1JVRkRSU3hOUVVGTkxGbEJRVmtzUjBGQlJ5eEpRVUZCTEd0Q1FVRlhMRVZCUVVNc1RVRkJUVHRKUVVOeVF5eEpRVUZKTEU5QlFVOHNSVUZCUlR0TlFVTllMRTlCUVU4c1EwRkJReXhEUVVGRE8wbEJRMWdzUTBGQlF5eE5RVUZOTzAxQlEwd3NVVUZCVVN4RFFVRkRMRWxCUVVFc2EwSkJRVk1zUlVGQlF5eERRVUZETEVOQlFVTTdTVUZEZGtJN1JVRkRSaXhEUVVGRExFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1JVRkZka0lzVFVGQlRTeFJRVUZSTEVkQlFVY3NTVUZCUVN4clFrRkJWeXhGUVVGRExGbEJRVms3U1VGRGRrTXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZPMDFCUTJoRExGbEJRVmtzUTBGQlF5eERRVUZETzBsQlEyaENPMGxCUlVFc1RVRkJUU3hqUVVGakxFZEJRVWM3VFVGRGNrSXNSMEZCUnl4RlFVRkZMRWxCUVVFc2QwSkJRVmtzUlVGQlF5eFJRVUZSTEVOQlFVTTdUVUZETTBJc1VVRkJVU3hGUVVGRkxFbEJRVUVzZDBKQlFWa3NSVUZCUXl4UlFVRlJMRU5CUVVNN1RVRkRhRU1zV1VGQldTeEZRVUZGTEdGQlFXRTdUVUZETTBJc1VVRkJVU3hGUVVGRkxFbEJRVUVzTWtKQlFXVXNSVUZCUXl4UlFVRlJPMGxCUTNCRExFTkJRVU03U1VGRlJDeE5RVUZOTEhOQ1FVRnpRaXhIUVVGSE8wMUJRVVVzUjBGQlJ5eHJRa0ZCYTBJc1EwRkJRenRKUVVGVExFTkJRVU03U1VGRmFrVXNUVUZCVFN4aFFVRmhMRWRCUVVjN1RVRkRjRUlzUjBGQlJ5eHJRa0ZCYTBJN1RVRkRja0lzYTBKQlFXdENMRVZCUVVVc1VVRkJVU3hMUVVGTExFMUJRVTBzUTBGQlF5eFhRVUZYTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU03VFVGRGVFVXNXVUZCV1N4RlFVRkZMR0ZCUVdFc1NVRkJTU3gzUWtGQmJVSTdUVUZEYkVRc1VVRkJVU3hGUVVGRk8xRkJRMUlzUjBGQlJ5eHpRa0ZCYzBJN1VVRkRla0lzUjBGQlJ6dE5RVU5NTzBsQlEwWXNRMEZCUXp0SlFVVkVMRkZCUVZFc1NVRkJTVHROUVVOV0xFdEJRVXNzYVVKQlFWa3NRMEZCUXl4TlFVRk5PMUZCUTNSQ0xGRkJRVkVzUTBGRFRpeEpRVUZCTEdkRFFVRjFRaXhGUVVGRExHdENRVUZyUWl4RFFVRkRMRVZCUVVVc1JVRkJSU3hqUVVGakxFTkJReTlFTEVOQlFVTTdVVUZEUkR0TlFVTkdMRXRCUVVzc2FVSkJRVmtzUTBGQlF5eFBRVUZQTzFGQlEzWkNMRkZCUVZFc1EwRkRUaXhKUVVGQkxHbERRVUYzUWl4RlFVRkRMR3RDUVVGclFpeERRVUZETEVWQlFVVXNSVUZCUlN4alFVRmpMRU5CUTJoRkxFTkJRVU03VVVGRFJEdE5RVU5HTEV0QlFVc3NhVUpCUVZrc1EwRkJReXhoUVVGaE8xRkJRemRDTEdOQlFXTXNRMEZCUXl4clFrRkJhMElzUjBGQlJ5eGhRVUZoTEVOQlFVTXNhMEpCUVd0Q08xRkJRM0JGTEdOQlFXTXNRMEZCUXl4WlFVRlpMRWRCUVVjc1lVRkJZU3hEUVVGRExGbEJRVms3VVVGRmVFUXNVVUZCVVN4RFFVRkRMRWxCUVVFc09FSkJRWEZDTEVWQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTJwRExFMUJRVTBzVVVGQlVTeERRVU5hTEVsQlFVRXNhVU5CUVhkQ0xFVkJRVU1zWVVGQllTeERRVUZETEVWQlFVVXNSVUZCUlN4alFVRmpMRU5CUXpORUxFTkJRVU03VVVGRFJDeFJRVUZSTEVOQlFVTXNTVUZCUVN3NFFrRkJjVUlzUlVGQlF5eERRVUZETEVOQlFVTTdVVUZEYWtNN1RVRkRSanRSUVVORk8wbEJRMG83U1VGRlFTeFpRVUZaTEVOQlFVTXNRMEZCUXp0RlFVTm9RaXhEUVVGRExFVkJRVVVzUTBGRFJDeHJRa0ZCYTBJc1JVRkRiRUlzU1VGQlNTeEZRVU5LTEZGQlFWRXNSVUZEVWl4WlFVRlpMRVZCUTFvc1VVRkJVU3hGUVVOU0xGRkJRVkVzUlVGRFVpeFhRVUZYTEVOQlFVTXNiVUpCUVcxQ0xFVkJReTlDTEdGQlFXRXNRMEZEWkN4RFFVRkRPMFZCUlVZc1NVRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETEdOQlFXTXNRMEZCUXp0RlFVTTNRaXhKUVVGSkxGbEJRVmtzUlVGQlJUdEpRVU5vUWl4TFFVRkxMRWRCUVVjc1dVRkJXVHRGUVVOMFFpeERRVUZETEUxQlFVMHNTVUZCU1N4SlFVRkpMRXRCUVVzc2FVSkJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVTdTVUZEZUVNc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlF5eHhRa0ZCY1VJc1EwRkJRenRGUVVOc1F5eERRVUZETEUxQlFVMHNTVUZCU1N4SlFVRkpMRXRCUVVzc2FVSkJRVmtzUTBGQlF5eE5RVUZOTEVWQlFVVTdTVUZEZGtNc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlF5eHZRa0ZCYjBJc1EwRkJRenRGUVVOcVF6dEZRVVZCTEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWNzYVVKQlFXbENMRWxCUVVrc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF6dEZRVU4yUkN4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4UlFVRkJMRU5CUVVFc1QwRkJUenRKUVVOT0xFdEJRVXNzUlVGQlJTeExRVUZOTzBsQlEySXNUMEZCVHl4RlFVRkZMRmxCUVdFN1NVRkRkRUlzVTBGQlV5eEZRVUZETERKQ1FVRXlRanRKUVVOeVF5eE5RVUZOTEdWQlEwb3NUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVDBGQlFTeERRVUZCTEU5QlFVMDdUVUZEVEN4SlFVRkpMRVZCUVVNc1UwRkJVenROUVVOa0xFOUJRVThzUlVGQlJTeFJRVUZUTzAxQlEyeENMRkZCUVZFc1JVRkJSU3haUVVGWkxFbEJRVWtzV1VGQldTeEpRVUZKTEVOQlFVTTdTVUZCTWtJc1IwRkZja1VzWjBKQlEwczdSVUZEVkN4blFrRkZSQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdTVUZCU3l4TFFVRkxMRVZCUVVVN1RVRkJSU3hQUVVGUExFVkJRVVVzYTBKQlFXdENPMDFCUVVVc1VVRkJVU3hGUVVGRk8wbEJRVmM3UlVGQlJTeEhRVU12UkN4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFOUJRVThzUjBGQlJ5eEpRVUZKTEdkQ1FVRkhMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1QwRkJaMElzVFVGQlJTeERRVUZETEdWQlEyeEVMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdWQlFVRXNRMEZCUVN4UFFVRmpMRVZCUVVFc1VVRkJRVHRKUVVOaUxDdENRVUVyUWl4RlFVRkZMQ3RDUVVGblF6dEpRVU5xUlN4clEwRkJhME1zUlVGRGFFTXNhME5CUTBRN1NVRkRSQ3h6UWtGQmMwSXNSVUZCUlN4elFrRkJkVUk3U1VGREwwTXNVVUZCVVN4RlFVRkZMRkZCUVZNN1NVRkRia0lzVjBGQlZ5eEZRVUZGTEZkQlFWazdTVUZEZWtJc1VVRkJVU3hGUVVGRkxGRkJRVk03U1VGRGJrSXNWMEZCVnl4RlFVRkZMRmRCUVZrN1NVRkRla0lzWTBGQll5eEZRVUZGTEdOQlFXVTdTVUZETDBJc1NVRkJTU3hGUVVGRkxFbEJRVXM3U1VGRFdDeFhRVUZYTEVWQlFVVXNhMEpCUVcxQ08wbEJRMmhETEdOQlFXTXNSVUZCUlN4alFVRmxPMGxCUXk5Q0xHVkJRV1VzUlVGQlJTeHJRa0ZCYlVJN1NVRkRjRU1zV1VGQldTeEZRVUZGTEZsQlFXRTdTVUZETTBJc01FSkJRVEJDTEVWQlFVVXNNRUpCUVRKQ08wbEJRM1pFTEZOQlFWTXNSVUZCUlR0RlFVRlZMRWRCUTJwQ0xHMUNRVUZ0UWl4RFFVTjRRaXhEUVVORkxFTkJRMFVzUTBGQlF6dEJRVVZrTzBGQlJVRXNZMEZCWXl4RFFVRkRMRk5CUVZNc1IwRkJSenRGUVVONlFpeFpRVUZaTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTk8wVkJRemxDTEcxQ1FVRnRRaXhGUVVGRkxHdENRVUZUTEVOQlFVTXNUVUZCVFR0RlFVTnlReXhwUWtGQmFVSXNSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTA3UlVGRGJrTXNUMEZCVHl4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNUdEZRVU4yUWl4WFFVRlhMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTzBWQlF6ZENMRWxCUVVrc1JVRkJSU3hyUWtGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExHbENRVUZaTEVOQlFVTXNRMEZCUXp0RlFVTnNSQ3hsUVVGbExFVkJRVVVzYTBKQlFWTXNRMEZCUXp0QlFVTTNRaXhEUVVGRE96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRE4wNUVMRWxCUVVFc1pVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVRjFSQ3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRRWFpFTEVsQlFVRXNUVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkZRU3hKUVVGQkxHRkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4bFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRmxCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR2xDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVUZyUkN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZGYkVRc1RVRkJUU3h0UWtGQmJVSXNSMEZCUnl4RFFVRkJMRXRCUVUwN1JVRkRhRU1zVFVGQlRTeERRVUZETEVkQlFVY3NTVUZCUVN3NFFrRkJZeXhGUVVGRExFTkJRVU03UlVGRE1VSXNUVUZCVFN4VFFVRlRMRWRCUVVjc1NVRkJRU3gxUWtGQlZ5eEZRVUZETEhWQ1FVRlpMRU5CUVVNN1JVRkZNME1zYjBKQlEwVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zU1VGQlFTeERRVUZCTEU5QlFVYzdTVUZCUXl4UFFVRlBMRVZCUVVNN1JVRkJUU3huUWtGRGFrSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zU1VGQlFTeERRVUZCTEU5QlFVYzdTVUZCUXl4WFFVRlhMRVZCUVVVN1JVRkJSU3hIUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVOHNRMEZCUXl4bFFVTnlReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdTVUZCVFN4VFFVRlRMRVZCUVVNN1JVRkJhME1zUjBGQlF5eEhRVU5vUkN4RlFVRkRMRU5CUVVNc1EwRkJReXcwUWtGQk5FSXNRMEZCUXl4RlFVRkRMRWRCUXpsQ0xFTkJRVU1zWlVGRFVDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhaUVVGQkxFTkJRVUVzVDBGQlZ6dEpRVU5XTEZkQlFWY3NaVUZEVkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlFTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMRkZCUVVFc2NVSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2FVSkJRVUVzUTBGQlFTeEpRVUZKTzAxQlFVTXNUMEZCVHl4RlFVRkZMSGxDUVVGWExFTkJRVU1zVFVGQlR6dE5RVUZETEVWQlFVVXNSVUZCUXp0SlFVRkpMRWRCUTNaRExFTkJRVU1zUTBGQlF5eHJRMEZCYTBNc1JVRkJSU3hEUVVOeVF5eFRRVUZUTEVkQlFVY3NRMEZCUXl4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVTXhReXhEUVVOSExFTkJRVU1zWlVGRFVDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhwUWtGQlFTeERRVUZCTEVsQlFVazdUVUZCUXl4UFFVRlBMRVZCUVVVc2VVSkJRVmNzUTBGQlF5eE5RVUZQTzAxQlFVTXNSVUZCUlN4RlFVRkRPMGxCUVVrc1IwRkRka01zUTBGQlF5eERRVUZETEhkRFFVRjNReXhEUVVOMlF5eERRVUZETEdWQlExQXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4SlFVRkpPMDFCUVVNc1QwRkJUeXhGUVVGRkxIbENRVUZYTEVOQlFVTXNUVUZCVHp0TlFVRkRMRVZCUVVVc1JVRkJRenRKUVVGSkxHZENRVU40UXl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGRFJTeEpRVUZKTEVWQlFVTXNiVVpCUVcxR08wMUJRM2hHTEUxQlFVMHNSVUZCUXl4UlFVRlJPMDFCUTJZc1IwRkJSeXhGUVVGRE8wbEJRWEZDTEVkQlJYaENMRU5CUVVNc1EwRkJReXgxUTBGQmRVTXNRMEZEZWtNc1EwRkRReXhEUVVOT0xFTkJRMGc3U1VGRFJDeFJRVUZSTEVWQlFVTTdSVUZCVVN4RFFVTnNRaXhEUVVORkxFTkJRVU03UVVGRlZpeERRVUZETzBGQlFVTXNTVUZCUVN4UlFVRkJMRWRCUldFc2JVSkJRVzFDTzBGQlFVRXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hSUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGFFUnNReXhKUVVGQkxHOUNRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRVzFFTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5CYmtRc1NVRkJRU3hOUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hYUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hYUVVGQkxFZEJRVUVzVDBGQlFUdEJRVVZCTEVsQlFVRXNZVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFOUJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc1QwRkJRVHRCUVV0QkxFbEJRVUVzUzBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTlCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGxRVUZCTEVkQlFVRXNUMEZCUVR0QlFVVkJMRWxCUVVFc1NVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2FVSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxITkNRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTd3JRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHZERRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2IwSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJNa1FzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJSVE5FTEUxQlFVMHNZMEZCWXl4SFFVRkhMRU5CUVVNN1JVRkJSU3d3UWtGQk1FSXNSMEZCUnp0QlFVRk5MRU5CUVVNc1MwRkJTenRGUVVGQkxFbEJRVUVzY1VKQlFVRXNSVUZCUVN4elFrRkJRVHRGUVVOcVJTeE5RVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkJMRGhDUVVGakxFVkJRVU1zUTBGQlF6dEZRVU14UWl4TlFVRk5MR2RDUVVGblFpeEhRVUZITEVsQlFVRXNkVUpCUVZjc1JVRkJReXhuUTBGQk1FSXNRMEZCUXp0RlFVTm9SU3hOUVVGTkxHVkJRV1VzUjBGQlJ5eEpRVUZCTEdkRlFVRXJRaXhGUVVGRExFTkJRVU03UlVGRmVrUXNUVUZCVFR0SlFVTktMSGRDUVVGM1FpeEZRVUZGTERaQ1FVRTJRanRKUVVOMlJDeDNRa0ZCZDBJc1JVRkJSVHRGUVVNMVFpeERRVUZETEVkQlFVY3NTVUZCUVN4MVFrRkJWeXhGUVVGRkxFdEJRVXNzU1VGQlN5eEpRVUZCTEdsRFFVRnpRaXhGUVVGRExFdEJRVXNzUlVGQlJTeGxRVUZsTEVOQlFVTXNRMEZCUXp0RlFVVXhSU3hOUVVGTk8wbEJRMG9zV1VGQldUdEpRVU5hTEd0Q1FVRnJRanRKUVVOc1FpeHRRa0ZCYlVJc1JVRkJSU3gzUWtGQmQwSTdTVUZETjBNc2JVSkJRVzFDTEVWQlFVVXNkMEpCUVhkQ08wbEJRemRETEc5Q1FVRnZRanRKUVVOd1FqdEZRVU5HTEVOQlFVTXNSMEZCUnl4SlFVRkJMSGRDUVVGblFpeEZRVUZETEVOQlFVTTdSVUZGZEVJc1RVRkJUVHRKUVVGRk8wVkJRVzFETEVOQlFVTXNSMEZCUnl4SlFVRkJMSFZDUVVGWExFVkJRVU1zZVVKQlFXTXNRMEZCUXp0RlFVVXhSU3hOUVVGTkxHOUNRVUZ2UWl4SFFVRkhMRWxCUVVFc2RVSkJRVmNzUlVGQlF5eHJRMEZCZFVJc1EwRkJRenRGUVVWcVJTeEpRVUZKTEd0Q1FVRnJRaXhKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRVZCUVVVN1NVRkRja1FzVDBGQlR5eEpRVUZKTzBWQlEySTdSVUZGUVN4TlFVRk5MRFJDUVVFMFFpeEhRVUZITEVOQlEyNURMRzlDUVVGdlFpeEpRVU53UWl4SlFVRkJMREpDUVVGbExFVkJRVU1zUlVGQlFTeHhRa0ZCUVN4SFFVRkJMR1ZCUVdVc1EwRkJReXhSUVVGUkxHTkJRVUVzY1VKQlFVRXNkVUpCUVhoQ0xIRkNRVUZCTEVOQlFUQkNMRzlDUVVGdlFpeExRVUZKTEV0QlFVc3NRMEZCUXl4RlFVTjRSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEZRVVZhTEUxQlFVMHNiMEpCUVc5Q0xFZEJRVWNzUTBGRE0wSXNXVUZCV1N4SlFVTmFMRWxCUVVFc01rSkJRV1VzUlVGQlF5eEZRVUZCTEhOQ1FVRkJMRWRCUVVFc1pVRkJaU3hEUVVGRExGRkJRVkVzWTBGQlFTeHpRa0ZCUVN4MVFrRkJlRUlzYzBKQlFVRXNRMEZCTUVJc1dVRkJXU3hMUVVGSkxFdEJRVXNzUTBGQlF5eEZRVU5vUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRGUVVWYUxHOUNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExITkNRVUZCTEVOQlFVRXNUMEZCY1VJN1NVRkRjRUlzUjBGQlJ5eEZRVUZETEd0Q1FVRnJRanRKUVVOMFFpeFhRVUZYTEdWQlFVVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYjBKQlFVRXNRMEZCUVN4UFFVRnRRaXhOUVVGRkxFTkJRVVU3U1VGRGNrTXNaMEpCUVdkQ0xFVkJRVVVzZFVKQlFWTXNRMEZCUXl4WFFVRlpPMGxCUTNoRExGVkJRVlVzUlVGRFVpeHZRa0ZCYjBJc1NVRkRjRUlzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMR2xDUVVONFF5eE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1RVRkJTeXhUUVVGVExFVkJRVU03U1VGQmMwTXNaMEpCUTI1RUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzVDBGQlowSTdUVUZCUXl4WlFVRlpMRVZCUVVVN1NVRkJZU3hEUVVGRkxFTkJRVU1zWlVGRGFFUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zSzBKQlFVRXNRMEZCUVN4UFFVRTRRanROUVVNM1FpeEpRVUZKTEVWQlFVVXNhVUpCUVZVN1RVRkRhRUlzUzBGQlN5eEZRVUZGTEhkQ1FVRjVRanROUVVOb1F5eFRRVUZUTEVWQlFVVXNUMEZCVHl4RFFVRkRMR3REUVVGclF6dEpRVUZGTEVOQlEzaEVMRU5CUTBVc1EwRkZVanRKUVVORUxGZEJRVmNzWlVGRFZDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1RVRkJTeXhUUVVGVExFVkJRVU03U1VGQmMwTXNaMEpCUTI1RUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzVDBGQlowSTdUVUZCUXl4WlFVRlpMRVZCUVVVN1NVRkJZU3hEUVVGRkxFTkJRVU1zWlVGRGFFUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zSzBKQlFVRXNRMEZCUVN4UFFVRTRRanROUVVNM1FpeEpRVUZKTEVWQlFVVXNaVUZCVVR0TlFVTmtMRXRCUVVzc1JVRkJSU3gzUWtGQmQwSXNTVUZCU1N3MlFrRkJPRUk3VFVGRGFrVXNVMEZCVXl4RlFVRkZMRU5CUVVNN1NVRkJiVU1zUTBGRGFFUXNRMEZEUlN4RFFVTk9PMGxCUTBRc1QwRkJUeXhsUVVOTUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkJMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzVVVGQlFTeHhRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eEpRVUZCTEVOQlFVRXNUMEZCUnp0TlFVTkdMRWRCUVVjc1JVRkJReXgzUWtGQmQwSTdUVUZETlVJc1QwRkJUeXhGUVVGRExHRkJRV0U3VFVGRGNrSXNVMEZCVXl4RlFVRkZMRWxCUVVFc2JVSkJRVlVzUlVGQlF5eG5RMEZCWjBNc1JVRkJSVHRSUVVOMFJDeHRRMEZCYlVNc1JVRkJSU3haUVVGWkxFdEJRVXM3VFVGRGVFUXNRMEZCUXp0SlFVRkZMR2RDUVVWSUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzVDBGQlowSTdUVUZCUXl4WlFVRlpMRVZCUVVVN1NVRkJZU3hEUVVGRkxFTkJRVU1zWlVGRGFFUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zU1VGQlFTeERRVUZCTEU5QlFVYzdUVUZCUXl4WFFVRlhMRVZCUVVVN1NVRkJSU3huUWtGRGJFSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxHbENRVU5ITEZsQlFWa3NTMEZCU3l4TlFVRk5MRWxCUVVrc1NVRkJTU3hGUVVNdlFpeERRVUZETEVOQlFVTXNkMEpCUVhkQ0xFTkJRM0pDTEVOQlEwd3NRMEZCUXl4bFFVTk9MRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVU5GTEVkQlFVY3NSVUZCUXl4M1FrRkJkMEk3VFVGRE5VSXNVMEZCVXl4RlFVRkRPMGxCUVhORExHZENRVVZvUkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRTlCUVdkQ08wMUJRVU1zV1VGQldTeEZRVUZGTzBsQlFXRXNRMEZCUlN4RFFVRkRMR1ZCUTJoRUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMQ3RDUVVGQkxFTkJRVUVzVDBGQk9FSTdUVUZETjBJc1IwRkJSeXhGUVVGRExIbENRVUY1UWp0TlFVTTNRaXhKUVVGSkxFVkJRVVVzWlVGQlVUdE5RVU5rTEV0QlFVc3NSVUZEU0N4M1FrRkJkMElzU1VGQlNTdzJRa0ZETjBJN1RVRkRSQ3hUUVVGVExFVkJRVVVzUTBGQlF6dEpRVUZ0UXl4RFFVTm9SQ3hEUVVORkxFTkJRMFlzUTBGRFRDeERRVU5JTzBsQlEwUXNVVUZCVVN4bFFVTk9MRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEZWQlFVRXNRMEZCUVN4UFFVRlRPMDFCUTFJc2IwSkJRVzlDTEVWQlFVVXNORUpCUVRaQ08wMUJRMjVFTEZsQlFWa3NSVUZCUlR0SlFVRnhRaXhEUVVOd1F6dEZRVU5HTEVOQlEwWXNRMEZCUXp0QlFVVk9MRU5CUVVNN1FVRkZSQ3hqUVVGakxFTkJRVU1zVTBGQlV5eEhRVUZITzBWQlEzcENMREJDUVVFd1FpeEZRVUZGTEd0Q1FVRlRMRU5CUVVNN1FVRkRlRU1zUTBGQlF6dEJRVUZETEVsQlFVRXNVVUZCUVN4SFFVVmhMR05CUVdNN1FVRkJRU3hQUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEZGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTjZTVGRDTEVsQlFVRXNaVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVUUyUXl4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEUVRkRExFbEJRVUVzVFVGQlFTeEhRVUZCTEhWQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVjBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRmRCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZGUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3hQUVVGQk8wRkJSVUVzU1VGQlFTeFpRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1MwRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEU5QlFVRXNSMEZCUVN4UFFVRkJPMEZCUlVFc1NVRkJRU3hUUVVGQkxFZEJRVUVzVDBGQlFUdEJRVTFCTEVsQlFVRXNWMEZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNZVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkxRU3hKUVVGQkxGRkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4TFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVGcFJTeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEhsQ1FVRkJMRmRCUVVFc1pVRkJRU3hQUVVGQkxHdERRVUZCTEdsQ1FVRkJMRTlCUVVFc1QwRkJRU3hSUVVGQkxHZENRVUZCTEU5QlFVRXNUMEZCUVN4WlFVRkJMSGRDUVVGQkxGbEJRVUVzUTBGQlFTeFhRVUZCTEZkQlFVRXNWMEZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzYVVKQlFVRXNTMEZCUVN4WFFVRkJPMEZCUVVFc1UwRkJRU3gzUWtGQlFTeEhRVUZCTEVWQlFVRXNWMEZCUVN4VFFVRkJMRmRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNWMEZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3h2UWtGQlFTeEhRVUZCTEhkQ1FVRkJMRWRCUVVFc05FSkJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRXNWVUZCUVN4TFFVRkJMRWRCUVVFc2QwSkJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzVjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEd0Q1FVRkJMRTFCUVVFc1EwRkJRU3hUUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hUUVVGQkxFbEJRVUVzUjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMR05CUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1NVRkJRU3haUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNUVUZCUVN4WlFVRkJMRTFCUVVFN1FVRkZha1U3UVVGRFFTeE5RVUZOTEdGQlFXRXNSMEZCUnl4RlFVRkZPenRCUVVWNFFqdEJRVU5CTEUxQlFVMHNiVUpCUVcxQ0xFZEJRVWNzUTBGQlF5eFpRVUZaTEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1MwRkJTenRGUVVOdVJDeE5RVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdSVUZET1VNc1NVRkJTU3hQUVVGUExFbEJRVWtzWVVGQllTeEZRVUZGTzBsQlF6VkNMRTlCUVU4c1EwRkJReXhEUVVGRExHdENRVUZyUWl4RlFVRkZMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03UlVGRGVrTTdSVUZEUVN4UFFVRlBMRU5CUVVNc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRla1FzUTBGQlF6dEJRVU5qTEZOQlFWTXNVMEZCVXl4RFFVRkRPMFZCUTJoRExGbEJRVmtzUjBGQlJ5eERRVUZETzBWQlEyaENMRzlDUVVGdlFpeEhRVUZITEVOQlFVTTdSVUZEZUVJN1FVRkRSaXhEUVVGRExFVkJRVVU3UlVGRFJDeE5RVUZOTEdWQlFXVXNSMEZCUnl4SlFVRkJMSFZDUVVGWExFVkJRVU1zTkVKQlFXdENMRU5CUVVNN1JVRkRka1FzVFVGQlRTeGxRVUZsTEVkQlFVY3NTVUZCUVN4MVFrRkJWeXhGUVVGRExEUkNRVUZyUWl4RFFVRkRPMFZCUTNaRUxFMUJRVTBzY1VKQlFYRkNMRWRCUVVjc1NVRkJRU3gxUWtGQlZ5eEZRVUZETEd0RFFVRjNRaXhEUVVGRE8wVkJSVzVGTEUxQlFVMHNRMEZCUXl4dFFrRkJiVUlzUlVGQlJTeHpRa0ZCYzBJc1EwRkJReXhIUVVGSExFbEJRVUVzWlVGQlVTeEZRVUZETEVsQlFVa3NRMEZCUXp0RlFVTndSU3hOUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZCTEdsQ1FVRlZMRVZCUVVNc2FVSkJRVmNzUTBGQlF6dEZRVU5xUXl4TlFVRk5PMGxCUVVVN1JVRkJZU3hEUVVGRExFZEJRVWNzU1VGQlFTeDNRa0ZCWjBJc1JVRkJReXhEUVVGRE96dEZRVVV6UXp0RlFVTkJPMFZCUTBFN1JVRkRRU3hOUVVGTkxGbEJRVmtzUjBGRGFFSXNRMEZCUVN4bFFVRmxMR0ZCUVdZc1pVRkJaU3gxUWtGQlppeGxRVUZsTEVOQlFVVXNSMEZCUnl4TFFVTndRaXhOUVVGTkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1IwRkRNVUlzVFVGQlRTeERRVUZETEdWQlFXVXNRMEZCUXl4SFFVRkhMRU5CUVVNc05rSkJRVFpDTEVOQlFVTTdSVUZGTjBRc1RVRkJUU3h2UWtGQmIwSXNSMEZCUnl4SlFVRkJMSGRDUVVGWExFVkJRVU1zV1VGQldTeERRVUZETzBWQlEzUkVMRTFCUVUwc05FSkJRVFJDTEVkQlFVY3NTVUZCUVN4M1FrRkJWeXhGUVVGRExHOUNRVUZ2UWl4RFFVRkRPMFZCUTNSRkxFMUJRVTBzYjBKQlFXOUNMRWRCUVVjc1NVRkJRU3gzUWtGQlZ5eEZRVUZETEZsQlFWa3NRMEZCUXp0RlFVVjBSQ3hKUVVGQkxHZENRVUZUTEVWQlFVTXNUVUZCVFR0SlFVTmtMRTFCUVUwc1VVRkJVU3hIUVVGSExHOUNRVUZ2UWp0SlFVTnlReXhOUVVGTkxFZEJRVWNzUjBGQlJ5eFpRVUZaTzBsQlJYaENMRWxCUTBVc1dVRkJXU3hKUVVOWUxGRkJRVkVzU1VGQlNTeFJRVUZSTEV0QlFVc3NORUpCUVRaQ0xFbEJRM1JFTEVkQlFVY3NTVUZCU1N4SFFVRkhMRXRCUVVzc2IwSkJRWEZDTEVWQlEzSkRPMDFCUTBFN1RVRkRRU3hKUVVGQkxEaENRVUZ4UWl4RlFVTnVRaXhKUVVGSkxHdENRVUZUTEVOQlFVTXNVVUZCVVN4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZEZUVNc1NVRkJTU3hyUWtGQlV5eERRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQlJTeERRVU53UXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRkxFMUJRVTBzU1VGQlN6dFJRVU5xUWl4SlFVRkpMRmxCUVZrc1MwRkJTeXhIUVVGSExFbEJRVWtzYjBKQlFXOUNMRXRCUVVzc1VVRkJVU3hGUVVGRk8xVkJRemRFTEhOQ1FVRnpRaXhEUVVGRExFMUJRVTBzUTBGQlF6dFJRVU5vUXp0TlFVTkdMRU5CUVVNc1EwRkJRenRKUVVOS08wbEJSVUVzU1VGQlNTeFpRVUZaTEV0QlFVc3NTMEZCU3l4SlFVRkpMRzlDUVVGdlFpeExRVUZMTEVsQlFVa3NSVUZCUlR0TlFVTXpSQ3h6UWtGQmMwSXNRMEZCUXl4SlFVRkpMRU5CUVVNN1NVRkRPVUk3UlVGRFJpeERRVUZETEVWQlFVVXNRMEZEUkN4dlFrRkJiMElzUlVGRGNFSXNXVUZCV1N4RlFVTmFMRmxCUVZrc1JVRkRXaXh2UWtGQmIwSXNSVUZEY0VJc05FSkJRVFJDTEVWQlF6VkNMRzlDUVVGdlFpeERRVU55UWl4RFFVRkRPMFZCUlVZc1NVRkRSU3hEUVVGQkxGZEJRVmNzWVVGQldDeFhRVUZYTEhWQ1FVRllMRmRCUVZjc1EwRkJSU3hqUVVGakxFMUJRVXNzY1VKQlFXVXNRMEZCUXl4M1FrRkJkMElzU1VGRGVFVXNRMEZCUVN4WFFVRlhMR0ZCUVZnc1YwRkJWeXgxUWtGQldDeFhRVUZYTEVOQlFVVXNUVUZCVFN4TlFVRkxMSEZDUVVGbExFTkJRVU1zWlVGQlpTeEZRVU4yUkR0SlFVTkJMRzlDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRmRCUVVFc1EwRkJRU3hQUVVGVk8wMUJRMVFzVDBGQlR5eEZRVUZGTEN0Q1FVRnBRaXhEUVVGRExFVkJRVWM3VFVGRE9VSXNWVUZCVlN4RlFVRkZMSGxDUVVGWExFTkJRVU1zU1VGQlN6dE5RVU0zUWl4VFFVRlRMRVZCUVVVc1NVRkJRU3h0UWtGQlZTeEZRVUZETEZsQlFWa3NSVUZCUlN4elFrRkJjMEk3U1VGQlJTeEhRVVV6UkN4RFFVRkRMRU5CUVVNc1pVRkJaU3hEUVVOU0xFTkJRVU03UlVGRmFrSTdPMFZCUlVFN1JVRkRRU3hKUVVGSkxIRkNRVUZ4UWl4SlFVRkpMR1ZCUVdVc1MwRkJTeXh4UWtGQlowSXNRMEZCUXl4VFFVRlRMRVZCUVVVN1NVRkRNMFVzVDBGQlR5eEpRVUZKTzBWQlEySTdSVUZGUVN4TlFVRk5PMGxCUVVVc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVUZGTEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkJSU3hKUVVGSkxFZEJRVWNzUTBGQlF6dEZRVUZGTEVOQlFVTXNSMEZCUnl4bFFVRmxPMFZCUlRWRUxFbEJRVWtzU1VGQlNTeEhRVUZITEVWQlFVVTdSVUZEWWl4SlFVRkpMRkZCUVZFc1IwRkJSeXhWUVVGVk96dEZRVVY2UWp0RlFVTkJMRWxCUTBVc1RVRkJUU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRWxCUVVrc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5dzJRa0ZCTmtJc1EwRkJReXhGUVVNMVJUdEpRVU5CTzBsQlEwRXNTVUZEUlN4TlFVRk5MRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExEWkNRVUUyUWl4RFFVRkRMRVZCUTNwRk8wMUJRMEU3VFVGRFFTeEpRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTEVOQlF6VkNMRzFDUVVGdFFpeERRVUZETEVkQlFVY3NRMEZCUXl4dFFrRkJiVUlzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZEYUVRc1EwRkJRenRKUVVOS0xFTkJRVU1zVFVGQlRUdE5RVU5NTzAxQlEwRXNTVUZCU1N4SFFVRkhMRU5CUVVNc1EwRkJReXgxUWtGQmRVSXNSVUZCUlN4RFFVTm9ReXh0UWtGQmJVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUTJwRUxFTkJRVU03U1VGRFNqdEZRVU5HTEVOQlFVTXNUVUZCVFR0SlFVTk1MRWxCUVVrc1dVRkJXU3hMUVVGTExFdEJRVXNzUlVGQlJUdE5RVU14UWl4UlFVRlJMRWRCUVVjc1ZVRkJWVHRKUVVOMlFqdEpRVU5CTzBsQlEwRTdTVUZEUVN4SlFVRkpMRmxCUVZrc1JVRkJSVHROUVVOb1FqdE5RVU5CTzAxQlEwRXNTVUZEUlN4RFFVRkRMRzFDUVVGdFFpeEpRVU53UWl4dFFrRkJiVUlzUzBGQlN5eFRRVUZUTEVsQlEycERMRU5CUVVFc2JVSkJRVzFDTEdGQlFXNUNMRzFDUVVGdFFpeDFRa0ZCYmtJc2JVSkJRVzFDTEVOQlFVVXNZMEZCWXl4TlFVRkxMRk5CUVZNc1JVRkRha1E3VVVGRFFTeEpRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRMR1ZCUVdVc1EwRkJRenROUVVNelFpeERRVUZETEUxQlFVMDdVVUZEVEN4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRExHMUNRVUZ0UWl4RlFVRkZMRU5CUXpWQ0xHMUNRVUZ0UWl4RFFVRkRMRTFCUVUwc1EwRkJReXh0UWtGQmJVSXNZVUZCYmtJc2JVSkJRVzFDTEhWQ1FVRnVRaXh0UWtGQmJVSXNRMEZCUlN4alFVRmpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGRGNFVXNRMEZCUXp0TlFVTktPMGxCUTBZc1EwRkJReXhOUVVGTk8wMUJRMHdzU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4dFFrRkJiVUlzUlVGQlJTeERRVU0xUWl4dFFrRkJiVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNiVUpCUVcxQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVOQlEyaEVMRU5CUVVNN1NVRkRTanRGUVVOR08wVkJSVUVzYjBKQlEwVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVjBGQlFTeERRVUZCTEU5QlFWVTdTVUZEVkN4UFFVRlBMRVZCUVVVc0swSkJRV2xDTEVOQlFVTXNSVUZCUnp0SlFVTTVRaXhUUVVGVExFVkJRVVVzU1VGQlFTeHRRa0ZCVlN4RlFVRkRMRmxCUVZrc1JVRkJSVHROUVVOc1F5eERRVUZGTEdWQlFXTXNVVUZCVXl4RlFVRkRMRWRCUVVjN1NVRkRMMElzUTBGQlF6dEZRVUZGTEVkQlJVWXNTVUZEVXl4RFFVRkRPMEZCUldwQ08wRkJSVUVzVTBGQlV5eERRVUZETEZOQlFWTXNSMEZCUnp0RlFVTndRaXh2UWtGQmIwSXNSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTA3UlVGRGRFTXNXVUZCV1N4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRUdEZRVU01UWl4WFFVRlhMRVZCUVVVc2EwSkJRVk1zUTBGQlF6dEJRVU42UWl4RFFVRkRPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNKTVJDeEpRVUZCTEUxQlFVRXNSMEZCUVN4MVFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZkQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEV0QlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hwUWtGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR0ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJTMEVzU1VGQlFTeFpRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1lVRkJRU3hIUVVGQkxFOUJRVUU3UVVGSmEwUXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlFVRXNVMEZCUVN4NVFrRkJRU3hYUVVGQkxHVkJRVUVzVDBGQlFTeHJRMEZCUVN4cFFrRkJRU3hQUVVGQkxFOUJRVUVzVVVGQlFTeG5Ra0ZCUVN4UFFVRkJMRTlCUVVFc1dVRkJRU3gzUWtGQlFTeFpRVUZCTEVOQlFVRXNWMEZCUVN4WFFVRkJMRmRCUVVFc1IwRkJRU3huUWtGQlFTeEhRVUZCTEdsQ1FVRkJMRXRCUVVFc1YwRkJRVHRCUVVGQkxGTkJRVUVzZDBKQlFVRXNSMEZCUVN4RlFVRkJMRmRCUVVFc1UwRkJRU3hYUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRmRCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYjBKQlFVRXNSMEZCUVN4M1FrRkJRU3hIUVVGQkxEUkNRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJMRlZCUVVFc1MwRkJRU3hIUVVGQkxIZENRVUZCTEVOQlFVRXNWMEZCUVN4UFFVRkJMRXRCUVVFc1NVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNXVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEZkQlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeEpRVUZCTEUxQlFVRXNRMEZCUVN4M1FrRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEZGQlFVRXNSMEZCUVN4clFrRkJRU3hOUVVGQkxFTkJRVUVzVTBGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzVTBGQlFTeEpRVUZCTEVkQlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hqUVVGQkxFbEJRVUVzUzBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4TlFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxFbEJRVUVzV1VGQlFTeE5RVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGTkJRVUVzVFVGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4SFFVRkJMRTFCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRTFCUVVFc1dVRkJRU3hOUVVGQk8wRkJSV3hFTEUxQlFVMHNUVUZCVFN4SFFVRkhMRVZCUVVVN1FVRkRha0lzVFVGQlRTeFhRVUZYTEVkQlFVY3NRMEZCUXp0QlFVTnlRaXhOUVVGTkxHZENRVUZuUWl4SFFVRkhMRTFCUVUwc1IwRkJSeXhYUVVGWExFZEJRVWNzUTBGQlF6dEJRVVZzUXl4VFFVRlRMR3RDUVVGclFpeERRVUZETzBWQlFVVXNWVUZCVlR0RlFVRkZPMEZCUVdNc1EwRkJReXhGUVVGRk8wVkJRM2hGTEUxQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVFc2FVSkJRVlVzUlVGQlF5eHBRa0ZCVnl4RFFVRkRPMFZCUTJwRExFMUJRVTBzWTBGQll5eEhRVUZITEVsQlFVRXNZVUZCVFN4RlFVRkRMRXRCUVVzc1EwRkJRenRGUVVOd1F5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RlFVRkZMR05CUVdNc1EwRkJReXhIUVVGSExFbEJRVUVzWlVGQlVTeEZRVUZETEV0QlFVc3NRMEZCUXp0RlFVTnlSQ3hOUVVGTkxFTkJRVU1zYTBKQlFXdENMRVZCUVVVc2NVSkJRWEZDTEVOQlFVTXNSMEZCUnl4SlFVRkJMR1ZCUVZFc1JVRkJReXhMUVVGTExFTkJRVU03UlVGRGJrVXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJRU3hwUWtGQlZTeEZRVUZETEN0Q1FVRnJRaXhEUVVGRE96dEZRVVZxUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzVFVGQlRTeHJRa0ZCYTBJc1IwRkJTU3hEUVVGRExFbEJRVXM3U1VGRGFFTXNRMEZCUXl4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRE8wVkJRM0pDTEVOQlFVTTdPMFZCUlVRN1FVRkRSanRCUVVOQk8wVkJRMFVzVFVGQlRTeFhRVUZYTEVkQlFVY3NRMEZCUVN4TFFVRk5PMGxCUTNoQ0xHTkJRV01zUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1R0SlFVTTNRaXhWUVVGVkxFTkJRVU03VFVGRFZDeFJRVUZSTEVWQlFVVXNjME5CUVhkQ0xFTkJRVU1zU1VGQlNUdE5RVU4yUXl4TFFVRkxMRVZCUVVVc2EwTkJRVzlDTEVOQlFVTXNNa0pCUVRKQ08wMUJRM1pFTEZWQlFWVXNSVUZCUlR0UlFVTldMRkZCUVZFc1JVRkJSU3h4UTBGQmRVSXNRMEZCUXp0TlFVTndRenRKUVVOR0xFTkJRVU1zUTBGQlF6dEZRVU5LTEVOQlFVTTdPMFZCUlVRN1FVRkRSanRCUVVOQk8wVkJRMFVzVFVGQlRTeFRRVUZUTEVkQlFVY3NRMEZCUVN4TFFVRk5PMGxCUTNSQ0xHTkJRV01zUTBGQlF5eFBRVUZQTEVkQlFVY3NTMEZCU3p0RlFVTm9ReXhEUVVGRE96dEZRVVZFTzBGQlEwWTdRVUZEUVR0RlFVTkZMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NRMEZCUVN4TFFVRk5PMGxCUXk5Q0xHTkJRV01zUTBGQlF5eFBRVUZQTEVsQlFVa3NZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJRenRGUVVOb1JDeERRVUZET3p0RlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeE5RVUZOTEc5Q1FVRnZRaXhIUVVGSExFbEJRVUVzYTBKQlFWY3NSVUZEY2tNc1EwRkJReXhKUVVGTE8wbEJRMHdzVlVGQlZTeERRVUZETzAxQlExUXNVVUZCVVN4RlFVRkZMSE5EUVVGM1FpeERRVUZETEVsQlFVazdUVUZEZGtNc1MwRkJTeXhGUVVGRkxHdERRVUZ2UWl4RFFVRkRMSGRDUVVGM1FqdE5RVU53UkN4VlFVRlZMRVZCUVVVN1VVRkRWaXhSUVVGUkxFVkJRVVVzY1VOQlFYVkNMRU5CUVVNN1RVRkRjRU03U1VGRFJpeERRVUZETEVOQlFVTTdTVUZEUml4VlFVRlZMRU5CUVVNN1RVRkRWQ3hSUVVGUkxFVkJRVVVzYzBOQlFYZENMRU5CUVVNc1NVRkJTVHROUVVOMlF5eExRVUZMTEVWQlFVVXNhME5CUVc5Q0xFTkJRVU1zWlVGQlpUdE5RVU16UXl4VlFVRlZMRVZCUVVVN1VVRkRWaXhSUVVGUkxFVkJRVVVzY1VOQlFYVkNMRU5CUVVNN1RVRkRjRU03U1VGRFJpeERRVUZETEVOQlFVTTdTVUZEUml4aFFVRmhMRU5CUVVNc1EwRkJRenRKUVVObUxIRkNRVUZ4UWl4RFFVRkRMRWxCUVVrc1EwRkJRenRKUVVNelFpeHJRa0ZCYTBJc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRGRrSXNRMEZCUXl4RlFVTkVMRU5CUVVNc1lVRkJZU3hEUVVOb1FpeERRVUZET3p0RlFVVkVPMEZCUTBZN1FVRkRRVHRGUVVORkxFMUJRVTBzYjBKQlFXOUNMRWRCUVVjc1EwRkJRU3hMUVVGTk8wbEJRMnBETEdOQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNN1NVRkRja0lzY1VKQlFYRkNMRU5CUVVNc1MwRkJTeXhEUVVGRE8wVkJRemxDTEVOQlFVTTdSVUZGUkN4TlFVRk5MSGRDUVVGM1FpeEhRVUZITEVsQlFVRXNhMEpCUVZjc1JVRkJReXhOUVVGTk8wbEJRMnBFTEc5Q1FVTkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEVsQlFVRXNRMEZCUVN4UFFVRkhPMDFCUTBZc1UwRkJVeXhGUVVGRkxFbEJRVUVzYlVKQlFWVXNSVUZCUXl4elEwRkJjME1zUlVGQlJUdFJRVU0xUkN4elEwRkJjME1zUlVGQlJTeFhRVUZYTzFGQlEyNUVMSFZEUVVGMVF5eEZRVUZGTzAxQlF6TkRMRU5CUVVNN1NVRkJSU3huUWtGRlNDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhKUVVGQkxFTkJRVUVzVDBGQlJ6dE5RVUZETEZOQlFWTXNSVUZCUXp0SlFVRnpReXhuUWtGRGJrUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFXMURMR2RDUVVOb1JDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1RVRkRSU3hUUVVGVExFVkJRVU1zTUVOQlFUQkRPMDFCUTNCRUxFVkJRVVVzUlVGQlJTeE5RVUZQTzAxQlExZ3NSVUZCUlN4RlFVRkZMRTFCUVU4N1RVRkRXQ3hEUVVGRExFVkJRVVU3U1VGQmFVSXNRMEZEY2tJc1EwRkRSU3hEUVVOR0xFTkJRVU1zWlVGRFRpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhKUVVGQkxFTkJRVUVzVDBGQlJ6dE5RVUZETEZOQlFWTXNSVUZCUXp0SlFVRnpReXhuUWtGRGJrUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFXMURMR2RDUVVOb1JDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1RVRkRSU3hqUVVGWkxFTkJRVU1zUTBGQlF5eDVRa0ZCZVVJc1EwRkJSVHROUVVONlF5eGxRVUZsTEVWQlFVVXNhMEpCUVcxQ08wMUJRM0JETEZOQlFWTXNSVUZCUXl3d1EwRkJNRU03VFVGRGNFUXNSVUZCUlN4RlFVRkZMRTFCUVU4N1RVRkRXQ3hGUVVGRkxFVkJRVVVzVFVGQlR6dE5RVU5ZTEVOQlFVTXNSVUZCUlR0SlFVRnBRaXhEUVVOeVFpeERRVU5GTEVOQlEwWXNRMEZCUXl4bFFVTk9MRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEVsQlFVRXNRMEZCUVN4UFFVRkhPMDFCUTBZc1QwRkJUeXhGUVVGRkxIRkNRVUZQTEVOQlFVTXNTVUZCU3p0TlFVTjBRaXhWUVVGVkxFVkJRVVVzZDBKQlFWVXNRMEZCUXl4TlFVRlBPMDFCUXpsQ0xHTkJRV01zUlVGQlJTdzBRa0ZCWXl4RFFVRkRMRTFCUVU4N1RVRkRkRU1zVTBGQlV5eEZRVUZETzBsQlFUUkRMR2RDUVVWMFJDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1RVRkRSU3hIUVVGSExFVkJRVU1zYzBKQlFYTkNPMDFCUXpGQ0xFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNVMEZCVXl4RFFVRkZPMDFCUTJ4Q0xGTkJRVk1zUlVGQlF6dEpRVUZyUXl4RFFVTTNReXhEUVVORkxFTkJRMFlzUTBGQlF6dEZRVVZXTEVOQlFVTXNSVUZCUlN4RFFVRkRMRmRCUVZjc1JVRkJSU3hyUWtGQmEwSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRGUVVWNFF5eE5RVUZOTEhsQ1FVRjVRaXhIUVVGSExFbEJRVUVzYTBKQlFWY3NSVUZCUXl4TlFVRk5PMGxCUTJ4RUxFOUJRVThzVjBGQlZ5eG5Ra0ZEYUVJc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlEwVXNVMEZCVXl4RlFVRkZMRWxCUVVFc2JVSkJRVlVzUlVGQlF5eHpRMEZCYzBNc1JVRkJSVHRSUVVNMVJDeDVRMEZCZVVNc1JVRkJSVHROUVVNM1F5eERRVUZETEVOQlFVVTdUVUZEU0N4alFVRmpMRVZCUVVVN1NVRkJjVUlzWjBKQlJYSkRMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVU5GTEdOQlFXTXNSVUZCUlN4clFrRkJiVUk3VFVGRGJrTXNVMEZCVXl4RlFVRkRPMGxCUVRKR0xHZENRVVZ5Unl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlN5eFRRVUZUTEVWQlFVTTdTVUZCYlVNc1owSkJRMmhFTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHROUVVORkxGTkJRVk1zUlVGQlF5dzBRMEZCTkVNN1RVRkRkRVFzUlVGQlJTeEZRVUZGTEVWQlFVYzdUVUZEVUN4RlFVRkZMRVZCUVVVc1JVRkJSenROUVVOUUxFTkJRVU1zUlVGQlJUdEpRVUZITEVOQlExQXNRMEZEUlN4RFFVTkdMRU5CUVVNc1pVRkRUaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdUVUZEUlN4alFVRmpMRVZCUVVVc2EwSkJRVzFDTzAxQlEyNURMRk5CUVZNc1JVRkJRenRKUVVFeVJpeG5Ra0ZGY2tjc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlFVc3NVMEZCVXl4RlFVRkRPMGxCUVcxRExHZENRVU5vUkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGRFJTeFRRVUZUTEVWQlFVTXNORU5CUVRSRE8wMUJRM1JFTEVWQlFVVXNSVUZCUlN4RlFVRkhPMDFCUTFBc1JVRkJSU3hGUVVGRkxFVkJRVWM3VFVGRFVDeERRVUZETEVWQlFVVTdTVUZCUnl4RFFVTlFMRU5CUTBVc1EwRkRSaXhEUVVGRExHVkJRMDRzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMDFCUTBVc1kwRkJXU3hEUVVGRExFTkJRVU1zTWtKQlFUSkNMRU5CUVVVN1RVRkRNME1zVTBGQlV5eEZRVUZETERoRFFVRTRRenROUVVONFJDeGpRVUZqTEVWQlFVVTdTVUZCY1VJc1owSkJSWEpETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHROUVVORkxFZEJRVWNzUlVGQlF5eDNRa0ZCZDBJN1RVRkROVUlzUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4VFFVRlRMRU5CUVVVN1RVRkRiRUlzVTBGQlV5eEZRVUZETzBsQlFXOURMRU5CUXk5RExFTkJRMFVzUTBGRFJpeERRVUZETEVkQlEwb3NTVUZCU1R0RlFVTldMRU5CUVVNc1JVRkJSU3hEUVVGRExGZEJRVmNzUlVGQlJTeHJRa0ZCYTBJc1JVRkJSU3h2UWtGQmIwSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRGUVVVNVJDeHZRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRTFCUVUwN1NVRkRUQ3hYUVVGWExFVkJRVVVzVjBGQldUdEpRVU42UWl4VFFVRlRMRVZCUVVVc1UwRkJWVHRKUVVOeVFpeFRRVUZUTEVWQlFVTXNiME5CUVc5RE8wbEJRemxETEZOQlFWTXNSVUZCUlR0TlFVRkZMRTlCUVU4c1JVRkJSU3h4UWtGQlR5eERRVUZETEVsQlFVazdUVUZCUlN4VlFVRlZMRVZCUVVVc2QwSkJRVlVzUTBGQlF6dEpRVUZQTzBWQlFVVXNaMEpCUlhCRkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRWxCUVVFc1EwRkJRU3hQUVVGSE8wbEJRVU1zVTBGQlV5eEZRVUZETEhWRFFVRjFRenRKUVVGRExGZEJRVmNzUlVGQlJUdEZRVUZGTEVkQlEyNUZMSGRDUVVGM1FpeERRVUZETEVOQlFVTXNSVUZETVVJc2VVSkJRWGxDTEVOQlFVTXNRMEZEZUVJc1EwRkJReXhGUVVOTUxGVkJRMHNzUTBGQlF6dEJRVVZpTzBGQlJVRXNhMEpCUVd0Q0xFTkJRVU1zVTBGQlV5eEhRVUZITzBWQlF6ZENPMEZCUTBZN1FVRkRRVHRGUVVORkxGVkJRVlVzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVk8wVkJRM1pETzBGQlEwWTdRVUZEUVR0RlFVTkZMR0ZCUVdFc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVa3NRMEZCUXp0QlFVTm9ReXhEUVVGRE96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRE9VNUVMRWxCUVVFc2JVSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJhMFFzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMEZzUkN4SlFVRkJMRTFCUVVFc1IwRkJRU3gxUWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRmRCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTlCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRk5CUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRkZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR2xDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNZVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkJjVVVzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeDVRa0ZCUVN4WFFVRkJMR1ZCUVVFc1QwRkJRU3hyUTBGQlFTeHBRa0ZCUVN4UFFVRkJMRTlCUVVFc1VVRkJRU3huUWtGQlFTeFBRVUZCTEU5QlFVRXNXVUZCUVN4M1FrRkJRU3haUVVGQkxFTkJRVUVzVjBGQlFTeFhRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEV0QlFVRXNWMEZCUVR0QlFVRkJMRk5CUVVFc2QwSkJRVUVzUjBGQlFTeEZRVUZCTEZkQlFVRXNVMEZCUVN4WFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEZkQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2IwSkJRVUVzUjBGQlFTeDNRa0ZCUVN4SFFVRkJMRFJDUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTEZWQlFVRXNTMEZCUVN4SFFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzV1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxGZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHJRa0ZCUVN4TlFVRkJMRU5CUVVFc1UwRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1UwRkJRU3hKUVVGQkxFZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4alFVRkJMRWxCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRWxCUVVFc1dVRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEUxQlFVRXNXVUZCUVN4TlFVRkJPMEZCUlhKRkxFMUJRVTBzWjBKQlFXZENMRWRCUVVjc1EwRkJRenRGUVVONFFpeFZRVUZWTzBWQlExWXNXVUZCV1R0RlFVTmFMRzFDUVVGdFFqdEZRVU51UWl4VlFVRlZMRWRCUVVjc1JVRkJSVHRGUVVObUxHVkJRV1U3UlVGRFppeFZRVUZWTzBWQlExWXNVVUZCVVR0RlFVTlNMRkZCUVZFN1JVRkRVanRCUVVOR0xFTkJRVU1zUzBGQlN6dEZRVU5LTEUxQlFVMHNRMEZCUXl4aFFVRmhMRVZCUVVVc1owSkJRV2RDTEVOQlFVTXNSMEZCUnl4SlFVRkJMR1ZCUVZFc1JVRkJReXhMUVVGTExFTkJRVU03UlVGRmVrUXNUVUZCVFN4bFFVRmxMRWRCUVVjc1dVRkJXU3hwUWtGRGJFTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVTBGQlFTeERRVUZCTEU5QlFWRTdTVUZEVUN4RlFVRkZMRVZCUVVNc01rSkJRVEpDTzBsQlF6bENMRTlCUVU4c1JVRkJSU3hoUVVGak8wbEJRM1pDTEZOQlFWTXNSVUZCUXl3MlFrRkJOa0k3U1VGRGRrTXNUMEZCVHl4RlFVRkZMRU5CUVVFc1MwRkJUU3huUWtGQlowSXNRMEZCUlN4UFFVRlBMRWxCUVVzc1EwRkJReXhQUVVGUE8wVkJRVVVzUTBGRGVFUXNRMEZEUmp0RlFVVkVMRzlDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVRkxMRk5CUVZNc1JVRkJSU3hKUVVGQkxHMUNRVUZWTEVWQlFVTXNiVUpCUVcxQ0xFVkJRVVVzUjBGQlJ5eFZRVUZWTzBWQlFVVXNaMEpCUXpkRUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVRkxMRk5CUVZNc1JVRkJRenRGUVVFMFFpeG5Ra0ZEZWtNc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzBsQlFVc3NVMEZCVXl4RlFVRkRPMFZCUVhORExHZENRVU51UkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3U1VGQlN5eFRRVUZUTEVWQlFVTTdSVUZCZVVJc1IwRkJSU3hsUVVGeFFpeERRVU0xUkN4RFFVRkRMRVZCUTB3c1VVRkJVU3huUWtGRFVDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhSUVVGQkxFTkJRVUVzVDBGQlR6dEpRVU5PTEZGQlFWRXNSVUZCUXl4TFFVRkxPMGxCUTJRc1MwRkJTeXhGUVVGRkxGRkJRVk03U1VGRGFFSXNaMEpCUVdkQ0xFVkJRVU03UlVGQmIwTXNaMEpCUlhKRUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzU1VGQlNUdEpRVUZETEVsQlFVa3NSVUZCUlN3d1FrRkJVU3hEUVVGRExFbEJRVXM3U1VGQlF5eExRVUZMTEVWQlFVVXNkVUpCUVZNc1EwRkJRenRGUVVGWkxFTkJRVVVzUTBGRGJrUXNRMEZCUXl4SFFVTlNMRWxCUTBRc1EwRkJReXhsUVVOT0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVRkxMRk5CUVZNc1JVRkJRenRGUVVFMFFpeEhRVU40UXl4UlFVRlJMRWxCUVVrc1ZVRkJWU3huUWtGRGNrSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVDBGQlFTeERRVUZCTEU5QlFVMDdTVUZEVEN4SlFVRkpMRVZCUVVNc1UwRkJVenRKUVVOa0xGTkJRVk1zUlVGQlF5eHJRMEZCYTBNN1NVRkROVU1zVDBGQlR5eEZRVUZGTzBWQlFWTXNSMEZGYWtJc1ZVRkRTeXhEUVVGRExFZEJRMUFzU1VGQlNTeEZRVU5RTEZGQlFWRXNTVUZCU1N4VlFVRlZMR2RDUVVOeVFpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhQUVVGQkxFTkJRVUVzVDBGQlRUdEpRVU5NTEVsQlFVa3NSVUZCUXl4WFFVRlhPMGxCUTJoQ0xGTkJRVk1zUlVGQlF6dEpRVU5XTzBsQlEwRTdTVUZCUVR0SlFVTkJMRTlCUVU4c1JVRkJSU3hEUVVGQkxFdEJRVTBzVVVGQlVTeERRVUZETEdGQlFXRTdSVUZCUlN4SFFVVjBReXhWUVVOTExFTkJRVU1zUjBGRFVDeEpRVUZKTEVWQlExQXNXVUZCV1N4blFrRkRXQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdTVUZCU3l4VFFVRlRMRVZCUVVNN1JVRkJjVU1zUjBGRGFrUXNiVUpCUVcxQ0xHZENRVU5zUWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eFJRVUZCTEVOQlFVRXNUMEZCVHp0SlFVTk9MRkZCUVZFc1JVRkJReXhMUVVGTE8wbEJRMlFzUzBGQlN5eEZRVUZGTEcxQ1FVRnZRanRKUVVNelFpeG5Ra0ZCWjBJc1JVRkJRenRGUVVFeVF5eEhRVVV6UkN4bFFVTk5MRU5CUVVNc1IwRkZWaXhsUVVORUxHVkJRMFFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUTBVc1UwRkJVeXhGUVVGRExHMURRVUZ0UXp0SlFVTTNReXhQUVVGUExFVkJRVU03UlVGQk1rSXNSMEZGYkVNc1dVRkRTU3hEUVVOS0xFTkJRVU1zUjBGRFNpeEpRVU5FTEVOQlEwWXNRMEZCUXp0QlFVVldMRU5CUVVNN1FVRkZSQ3huUWtGQlowSXNRMEZCUXl4VFFVRlRMRWRCUVVjN1JVRkRNMEk3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0RlFVTkZMRlZCUVZVc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVazdSVUZETVVJN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUlN4WlFVRlpMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTzBWQlF6VkNPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeHRRa0ZCYlVJc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVazdSVUZEYmtNN1FVRkRSanRCUVVOQk8wVkJRMFVzVlVGQlZTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1MwRkJTenRGUVVNelFqdEJRVU5HTzBGQlEwRTdSVUZEUlN4bFFVRmxMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlR0RlFVTXhRenRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBWQlEwVXNWVUZCVlN4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNUdEZRVU14UWp0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wVkJRMFVzVVVGQlVTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTVHRGUVVONFFqdEJRVU5HTzBGQlEwRTdSVUZEUlN4UlFVRlJMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTzBWQlEzaENPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeFJRVUZSTEVWQlFVVXNhMEpCUVZNc1EwRkJRenRCUVVOMFFpeERRVUZETzBGQlFVTXNTVUZCUVN4UlFVRkJMRWRCUldFc1owSkJRV2RDTzBGQlFVRXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hSUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGJrb3ZRaXhKUVVGQkxHbENRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRWGRFTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5CZUVRc1NVRkJRU3hOUVVGQkxFZEJRVUVzZFVKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hYUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNaVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHVkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzU1VGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRkZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFpRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1lVRkJRU3hIUVVGQkxFOUJRVUU3UVVGSlFTeEpRVUZCTEZWQlFVRXNSMEZCUVN4UFFVRkJPMEZCUnpSQ0xGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzZVVKQlFVRXNWMEZCUVN4bFFVRkJMRTlCUVVFc2EwTkJRVUVzYVVKQlFVRXNUMEZCUVN4UFFVRkJMRkZCUVVFc1owSkJRVUVzVDBGQlFTeFBRVUZCTEZsQlFVRXNkMEpCUVVFc1dVRkJRU3hEUVVGQkxGZEJRVUVzVjBGQlFTeFhRVUZCTEVkQlFVRXNaMEpCUVVFc1IwRkJRU3hwUWtGQlFTeExRVUZCTEZkQlFVRTdRVUZCUVN4VFFVRkJMSGRDUVVGQkxFZEJRVUVzUlVGQlFTeFhRVUZCTEZOQlFVRXNWMEZCUVN4SlFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeFhRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMRzlDUVVGQkxFZEJRVUVzZDBKQlFVRXNSMEZCUVN3MFFrRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFTeFZRVUZCTEV0QlFVRXNSMEZCUVN4M1FrRkJRU3hEUVVGQkxGZEJRVUVzVDBGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hYUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1NVRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYTBKQlFVRXNUVUZCUVN4RFFVRkJMRk5CUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRk5CUVVFc1NVRkJRU3hIUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNZMEZCUVN4SlFVRkJMRXRCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzVFVGQlFTeEZRVUZCTEVkQlFVRXNSVUZCUVN4SlFVRkJMRmxCUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzUjBGQlFTeE5RVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeE5RVUZCTEZsQlFVRXNUVUZCUVR0QlFVVmlMRk5CUVZNc1pVRkJaU3hEUVVGQkxFVkJRVWM3UlVGRGVFTXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJRU3hwUWtGQlZTeEZRVUZETEN0Q1FVRnJRaXhEUVVGRE8wVkJRMnBFTEUxQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVFc09FSkJRV01zUlVGQlF5eERRVUZETzBWQlF6RkNMRTFCUVUwc1QwRkJUeXhIUVVGSExFbEJRVUVzTUVKQlFWVXNSVUZCUXl4RFFVRkRPMFZCUlRWQ0xFMUJRVTBzZVVKQlFYbENMRWRCUVVjc1NVRkJRU3gxUWtGQlZ5eEZRVUZETEhWRFFVRTBRaXhEUVVGRE8wVkJRek5GTEUxQlFVMHNhVU5CUVdsRExFZEJRVWNzU1VGQlFTeDFRa0ZCVnl4RlFVTnVSQ3dyUTBGRFJpeERRVUZETzBWQlJVUXNUVUZCVFN4NVFrRkJlVUlzUjBGRE4wSXNlVUpCUVhsQ0xFbEJRM3BDTEdsRFFVRnBReXhKUVVOcVF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhQUVVGUExFTkJRVU03UlVGRk9VSXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNTVUZCUVN4RFFVRkJMRTlCUVVjN1NVRkJReXhUUVVGVExFVkJRVU1zYlVKQlFXMUNPMGxCUVVNc1UwRkJVeXhGUVVGRkxIZENRVUZWTEVOQlFVTTdSVUZCVHl4SFFVTTNSQ3g1UWtGQmVVSXNhVUpCUTNoQ0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkJMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzVVVGQlFTeHhRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eFBRVUZCTEVOQlFVRXNUMEZCVFR0SlFVTk1MRk5CUVZNc1JVRkJReXg1UWtGQmVVSTdTVUZEYmtNc1pVRkJXU3h4UWtGQmNVSTdTVUZEYWtNc1NVRkJTU3hGUVVGRExFMUJRVTA3U1VGRFdDeFBRVUZQTEVWQlFVVXNRMEZCUVN4TFFVRk5MRWxCUVVFc2QwSkJRV1VzUlVGQlF6dEZRVUZGTEVkQlJXaERMRU5CUVVNc1EwRkJReXhoUVVGaExFTkJRMVlzUTBGQlF5eEZRVU5TTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUTFBc1EwRkRTQ3hsUVVORUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRTlCUVVFc1EwRkJRU3hQUVVGTk8wbEJRMHdzVTBGQlV5eEZRVUZETEhsQ1FVRjVRanRKUVVOdVF5eGxRVUZaTEhGQ1FVRnhRanRKUVVOcVF5eEpRVUZKTEVWQlFVTXNUVUZCVFR0SlFVTllMRTlCUVU4c1JVRkJSU3hEUVVGQkxFdEJRVTA3VFVGRFlpeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMREJDUVVGclFpeERRVUZETzAxQlEyaERMRlZCUVZVc1EwRkJRenRSUVVOVUxFdEJRVXNzUlVGQlJTeHJRMEZCYjBJc1EwRkJReXgzUWtGQmQwSTdVVUZEY0VRc1VVRkJVU3hGUVVGRkxITkRRVUYzUWl4RFFVRkRMRlZCUVZVN1VVRkROME1zVlVGQlZTeEZRVUZGTzFWQlExWXNVVUZCVVN4RlFVRkZPMUZCUTFvN1RVRkRSaXhEUVVGRExFTkJRVU03U1VGRFNqdEZRVUZGTEVkQlJVUXNlVUpCUVhsQ0xFZEJRM1JDTEVOQlFVTXNRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkRha0lzUTBGQlF5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4SFFVTjZReXhEUVVGRExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkRka0lzUTBGRFRDeERRVUZETzBGQlJWWTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTjJSVUVzU1VGQlFTeG5Ra0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVUYzUkN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTkJlRVFzU1VGQlFTeDFRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVUZ4UkN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEUVhKRUxFbEJRVUVzVFVGQlFTeEhRVUZCTEhWQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVjBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR2RDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVTFCTEVsQlFVRXNTVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkxRU3hKUVVGQkxFdEJRVUVzUjBGQlFTeFBRVUZCTzBGQlQwRXNTVUZCUVN4cFFrRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdWQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hoUVVGQkxFZEJRVUVzVDBGQlFUdEJRVXRCTEVsQlFVRXNTMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkpRU3hKUVVGQkxGTkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UlFVRkJMRWRCUVVFc1QwRkJRVHRCUVVGM1JTeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEhsQ1FVRkJMRmRCUVVFc1pVRkJRU3hQUVVGQkxHdERRVUZCTEdsQ1FVRkJMRTlCUVVFc1QwRkJRU3hSUVVGQkxHZENRVUZCTEU5QlFVRXNUMEZCUVN4WlFVRkJMSGRDUVVGQkxGbEJRVUVzUTBGQlFTeFhRVUZCTEZkQlFVRXNWMEZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzYVVKQlFVRXNTMEZCUVN4WFFVRkJPMEZCUVVFc1UwRkJRU3gzUWtGQlFTeEhRVUZCTEVWQlFVRXNWMEZCUVN4VFFVRkJMRmRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNWMEZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3h2UWtGQlFTeEhRVUZCTEhkQ1FVRkJMRWRCUVVFc05FSkJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRXNWVUZCUVN4TFFVRkJMRWRCUVVFc2QwSkJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzVjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEd0Q1FVRkJMRTFCUVVFc1EwRkJRU3hUUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hUUVVGQkxFbEJRVUVzUjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMR05CUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1NVRkJRU3haUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNUVUZCUVN4WlFVRkJMRTFCUVVFN1FVRkZlRVVzVFVGQlRTeHhRa0ZCY1VJc1IwRkJSeXhEUVVNMVFpeEpRVUZKTEVWQlEwb3NTVUZCU1N4SFFVRkhMRWxCUVVrc1JVRkRXQ3hMUVVGTExFZEJRVWNzZFVKQlFWTXNRMEZCUXl4WFFVRlhMRXRCUXpGQ08wVkJRMGdzVDBGRFJTeEpRVUZKTEdsQ1FVTkdMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHRKUVVGRExFdEJRVXNzUlVGQlJTeExRVUZOTzBsQlFVTXNSVUZCUlN4RlFVRkRPMFZCUVVrc1IwRkRlRUlzU1VGRFJ5eERRVU5RTzBGQlJVd3NRMEZCUXp0QlFVVmpMRk5CUVZNc2MwSkJRWE5DTEVOQlFVTTdSVUZCUlR0QlFVRnZRaXhEUVVGRExFVkJRVVU3UlVGRGRFVXNUVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJRU3c0UWtGQll5eEZRVUZETEVOQlFVTTdSVUZETVVJc1RVRkJUU3hSUVVGUkxFZEJRVWNzU1VGQlFTeDFRa0ZCVnl4RlFVRkRMRU5CUVVNN1JVRkZPVUlzVFVGQlRTeHhRa0ZCY1VJc1IwRkJSeXhKUVVGQkxIVkNRVUZYTEVWQlFVTXNiME5CUVRoQ0xFTkJRVU03UlVGRGVrVXNUVUZCVFN4dFFrRkJiVUlzUjBGQlJ5eEpRVUZCTEhWQ1FVRlhMRVZCUVVNc1owTkJRWE5DTEVOQlFVTTdSVUZETDBRc1RVRkJUU3hsUVVGbExFZEJRVWNzU1VGQlFTeDFRa0ZCVnl4RlFVRkRMRGhDUVVGM1FpeERRVUZETzBWQlF6ZEVMRTFCUVUwc1pVRkJaU3hIUVVGSExFbEJRVUVzZDBKQlFXdENMRVZCUVVNc1EwRkJRenRGUVVNMVF5eE5RVUZOTERKQ1FVRXlRaXhIUVVNdlFpeGxRVUZsTEV0QlFVc3NaME5CUVRKQ08wVkJSV3BFTEVsQlFVRXNaMEpCUVZNc1JVRkJReXhOUVVGTk8wbEJRMlFzVFVGQlRTd3lRa0ZCTWtJc1IwRkJSeXhOUVVGQkxFTkJRVUVzUzBGQldUdE5RVU01UXl4SlFVTkZMRzFDUVVGdFFpeExRVUZMTEhGRFFVRnZRaXhEUVVGRExFMUJRVTBzU1VGRGJrUXNjVUpCUVhGQ0xFdEJRVXNzZDBOQlFYVkNMRU5CUVVNc1UwRkJVeXhGUVVNelJEdFJRVUZCTEVsQlFVRXNhVUpCUVVFc1JVRkJRU3h4UWtGQlFUdFJRVU5CTEUxQlFVMHNUMEZCVHl4SFFVRkhMRkZCUVVFc2FVSkJRVUVzUjBGQlRTeE5RVUZOTEVOQlFVTXNVMEZCVXl4alFVRkJMR2xDUVVGQkxIZENRVUZCTEhGQ1FVRkJMRWRCUVdoQ0xHbENRVUZCTEVOQlFXdENMRWRCUVVjc1kwRkJRU3h4UWtGQlFTeDFRa0ZCY2tJc2NVSkJRVUVzUTBGQmRVSXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRkRla1FzVFVGQlRTeHBRa0ZCYVVJc1IwRkJSeXhQUVVGUExHRkJRVkFzVDBGQlR5eDFRa0ZCVUN4UFFVRlBMRU5CUVVVc1NVRkJTU3hEUVVOd1F5eE5RVUZOTEVsQlFVc3NUVUZCVFN4RFFVRkRMRkZCUVZFc1MwRkJTeXhOUVVGTkxFTkJRVU1zY1VOQlFXOUNMRU5CUXpkRUxFTkJRVU03VVVGRFJDeFJRVUZSTEVOQlEwNHNTVUZCUVN4dlEwRkJPRUlzUlVGRE5VSXNhVUpCUVdsQ0xFZEJRMklzZDBOQlFYVkNMRU5CUVVNc1UwRkJVeXhIUVVOcVF5eDNRMEZCZFVJc1EwRkJReXhaUVVNNVFpeERRVU5HTEVOQlFVTTdUVUZEU0R0SlFVTkdMRU5CUVVNN1NVRkRSQ3hOUVVGTkxIZENRVUYzUWl4SFFVRkhMRTFCUVVFc1EwRkJRU3hMUVVGWk8wMUJRek5ETEVsQlEwVXNiVUpCUVcxQ0xFdEJRVXNzY1VOQlFXOUNMRU5CUVVNc1RVRkJUU3hKUVVOdVJDeHhRa0ZCY1VJc1MwRkJTeXgzUTBGQmRVSXNRMEZCUXl4VFFVRlRMRWxCUXpORUxHVkJRV1VzUzBGQlN5eDNRMEZCZFVJc1EwRkJReXhKUVVGSkxFVkJRMmhFTzFGQlEwRXNTVUZCU1R0VlFVTkdMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NUVUZCVFN4SlFVRkJMSFZEUVVFNFFpeEZRVUZETEVOQlFVTTdWVUZEYWtVc1VVRkJVU3hEUVVOT0xFbEJRVUVzT0VKQlFYZENMRVZCUTNSQ0xHdENRVUZyUWl4SFFVTmtMSGREUVVGMVFpeERRVUZETEZGQlFWRXNSMEZEYUVNc2QwTkJRWFZDTEVOQlFVTXNZMEZET1VJc1EwRkRSaXhEUVVGRE8xRkJRMGdzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZPMVZCUTFZc1NVRkJTU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl3eVFrRkJNa0lzUTBGQlF5eEZRVUZGTzFsQlEyaEVMRkZCUVZFc1EwRkRUaXhKUVVGQkxEaENRVUYzUWl4RlFVTjBRaXgzUTBGQmRVSXNRMEZCUXl4cFFrRkRNVUlzUTBGRFJpeERRVUZETzFWQlEwZ3NRMEZCUXl4TlFVRk5MRWxCUVVrc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNORUpCUVRSQ0xFTkJRVU1zUlVGQlJUdFpRVU40UkN4UlFVRlJMRU5CUTA0c1NVRkJRU3c0UWtGQmQwSXNSVUZCUXl4M1EwRkJkVUlzUTBGQlF5eFJRVUZSTEVOQlF6TkVMRU5CUVVNN1ZVRkRTQ3hEUVVGRExFMUJRVTA3V1VGRFRDeFJRVUZSTEVOQlEwNHNTVUZCUVN3NFFrRkJkMElzUlVGQlF5eDNRMEZCZFVJc1EwRkJReXhqUVVGakxFTkJRMnBGTEVOQlFVTTdWVUZEU0R0UlFVTkdPMDFCUTBZN1NVRkRSaXhEUVVGRE8wbEJRMFFzZDBKQlFYZENMRU5CUVVNc1EwRkJRenRKUVVNeFFpd3lRa0ZCTWtJc1EwRkJReXhEUVVGRE8wVkJReTlDTEVOQlFVTXNSVUZCUlN4RFFVRkRMRkZCUVZFc1JVRkJSU3h0UWtGQmJVSXNSVUZCUlN4eFFrRkJjVUlzUlVGQlJTeGxRVUZsTEVOQlFVTXNRMEZCUXp0RlFVVXpSU3hKUVVGQkxHZENRVUZUTEVWQlFVTXNUVUZCVFR0SlFVTmtMRTlCUVU4c1RVRkJUVHROUVVOWUxGRkJRVkVzUTBGQlF5eEpRVUZCTERoQ1FVRjNRaXhGUVVGRExIZERRVUYxUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wbEJRMnhGTEVOQlFVTTdSVUZEU0N4RFFVRkRMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEZRVVZrTEUxQlFVMHNaVUZCWlN4SFFVRkhMRzFDUVVGdFFpeExRVUZMTEhGRFFVRnZRaXhEUVVGRExFbEJRVWs3UlVGRGVrVXNUVUZCVFN4WFFVRlhMRWRCUVVjc2JVSkJRVzFDTEV0QlFVc3NjVU5CUVc5Q0xFTkJRVU1zVFVGQlRUdEZRVVYyUlN4TlFVRk5MRk5CUVZNc1IwRkJSeXhKUVVGQkxHbENRVUZYTEVWQlFVTXNRMEZCUXl4TFFVRkxMSEZDUVVGblFqdEZRVVZ3UkN4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNNa0pCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzBsQlFVc3NVMEZCVXl4RlFVRkRPMFZCUVc5Q0xHZENRVU5xUXl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRmRCUVZjN1NVRkJReXhSUVVGUkxFVkJRVVVzZDBKQlFWVXNRMEZCUXp0RlFVRkxMR2RDUVVOeVF5eE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1NVRkJTeXhUUVVGVExFVkJRVU03UlVGQmIwSXNSMEZEYUVNc2NVSkJRWEZDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRzFEUVVGdFF5eERRVUZETEVOQlFVTXNSVUZETjBRc2NVSkJRWEZDTEVOQlEyNUNMRXRCUVVrc1EwRkJReXhEUVVGRExHOURRVUZ2UXl4RFFVRkZMRVZCUVVNc1JVRkRPVU1zUTBGQlF5eFRRVUZUTEVsQlFVa3NaVUZEYUVJc1EwRkJReXhGUVVOQkxIRkNRVUZ4UWl4RFFVTnVRaXhMUVVGSkxFTkJRVU1zUTBGQlF5eHZRMEZCYjBNc1EwRkJSU3hGUVVGRExFVkJRemxETEVOQlFVTXNVMEZCVXl4SlFVRkpMR1ZCUTJoQ0xFTkJRVU1zUlVGRFFTeHhRa0ZCY1VJc1EwRkRia0lzUzBGQlNTeERRVUZETEVOQlFVTXNjME5CUVhORExFTkJRVVVzUlVGRGFrUXNRMEZCUXl4RlFVTkJMSEZDUVVGeFFpeERRVU51UWl4TFFVRkpMRU5CUVVNc1EwRkJReXh4UTBGQmNVTXNRMEZCUlN4RlFVRkRMRVZCUXk5RExHMUNRVU5HTEVOQlFVTXNSVUZEUVN4eFFrRkJjVUlzWlVGRGNFSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxEUkNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNWVUZCVlR0SlFVTlVMRk5CUVZNc1JVRkJSU3gzUWtGQlZTeERRVUZETEVsQlFVczdTVUZETTBJc1QwRkJUeXhGUVVGRkxFMUJRVUVzUTBGQlFTeExRVUZaTzAxQlEyNUNMRWxCUVVrc01rSkJRVEpDTEVWQlFVVTdVVUZETDBJc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0TlFVTXhRaXhEUVVGRExFMUJRVTA3VVVGRFRDeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMSE5DUVVGelFpeERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRE8wMUJRekZFTzBsQlEwWTdSVUZCUlN4SFFVVkVMRU5CUVVNc1EwRkJReXd5UTBGQk1rTXNRMEZEY0VNc1EwRkRVaXhEUVVGRExFVkJRMUFzWlVGQlpTeExRVUZMTEhkRFFVRjFRaXhEUVVGRExHbENRVU01UXl4RFFVRkRMRVZCUTBFc2NVSkJRWEZDTEdWQlEzQkNMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTdzBRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRlZCUVZVN1NVRkRWQ3hUUVVGVExFVkJRVVVzZDBKQlFWVXNRMEZCUXl4SlFVRkxPMGxCUXpOQ0xFOUJRVThzUlVGQlJTeE5RVUZCTEVOQlFVRXNTMEZCV1R0TlFVTnVRaXhKUVVGSkxESkNRVUV5UWl4RlFVRkZPMUZCUXk5Q0xFMUJRVTBzWjBKQlFXZENMRWRCUTNCQ0xFMUJRVTBzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVGRE8xVkJRM1pETEU5QlFVOHNSVUZCUlN4RFFVRkRPMWxCUVVVc1VVRkJVU3hGUVVGRk8xVkJRWEZDTEVOQlFVTTdVVUZET1VNc1EwRkJReXhEUVVGRE8xRkJRMG9zVFVGQlRTeHBRa0ZCYVVJc1IwRkJSeXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRU5CUXpWRExFMUJRVTBzU1VGRFRDeE5RVUZOTEVOQlFVTXNVVUZCVVN4TFFVRkxMRTFCUVUwc1EwRkJReXh4UTBGQmIwSXNRMEZEYmtRc1EwRkJRenRSUVVORUxGRkJRVkVzUTBGRFRpeEpRVUZCTEc5RFFVRTRRaXhGUVVGRE8xVkJRemRDTEhGQ1FVRnhRaXhGUVVGRkxHbENRVUZwUWl4SFFVTndReXgzUTBGQmRVSXNRMEZCUXl4VFFVRlRMRWRCUTJwRExIZERRVUYxUWl4RFFVRkRPMUZCUXpsQ0xFTkJRVU1zUTBGRFNDeERRVUZETzAxQlEwZ3NRMEZCUXl4TlFVRk5PMUZCUTB3c1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXp0TlFVTXhSRHRKUVVOR08wVkJRVVVzUjBGRlJDd3lRa0ZCTWtJc1IwRkRlRUlzUTBGQlF5eERRVUZETEN0Q1FVRXJRaXhEUVVGRExFZEJRMnhETEVOQlFVTXNRMEZCUXl3clFrRkJLMElzUTBGRE0wSXNRMEZEVWl4RFFVRkRMRVZCUTFBc1YwRkJWeXhKUVVOVUxIRkNRVUZ4UWl4TFFVRkxMSGREUVVGMVFpeERRVUZETEZsQlFWa3NSVUZEYUVVc2RVSkJRVk1zUTBGQlF5eGxRVU5hTEVOQlEwY3NRMEZEVFN4RFFVTldMRU5CUTBZc1EwRkJRenRCUVVWV08wRkJSVUVzYzBKQlFYTkNMRU5CUVVNc1UwRkJVeXhIUVVGSE8wVkJRMnBETzBWQlEwRXNiVUpCUVcxQ0xFVkJRVVVzYTBKQlFWTXNRMEZCUXp0QlFVTnFReXhEUVVGRE96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGJrNUVMRWxCUVVFc2NVSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJOa1FzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMEUzUkN4SlFVRkJMRTFCUVVFc1IwRkJRU3gxUWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR05CUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRXRCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFJRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1VVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2FVSkJRVUVzUjBGQlFTeFBRVUZCTzBGQlVVRXNTVUZCUVN4aFFVRkJMRWRCUVVFc1QwRkJRVHRCUVUxQkxFbEJRVUVzU1VGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVGdFF5eFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEhsQ1FVRkJMRmRCUVVFc1pVRkJRU3hQUVVGQkxHdERRVUZCTEdsQ1FVRkJMRTlCUVVFc1QwRkJRU3hSUVVGQkxHZENRVUZCTEU5QlFVRXNUMEZCUVN4WlFVRkJMSGRDUVVGQkxGbEJRVUVzUTBGQlFTeFhRVUZCTEZkQlFVRXNWMEZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzYVVKQlFVRXNTMEZCUVN4WFFVRkJPMEZCUVVFc1UwRkJRU3gzUWtGQlFTeEhRVUZCTEVWQlFVRXNWMEZCUVN4VFFVRkJMRmRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNWMEZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3h2UWtGQlFTeEhRVUZCTEhkQ1FVRkJMRWRCUVVFc05FSkJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRXNWVUZCUVN4TFFVRkJMRWRCUVVFc2QwSkJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzVjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEd0Q1FVRkJMRTFCUVVFc1EwRkJRU3hUUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hUUVVGQkxFbEJRVUVzUjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMR05CUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1NVRkJRU3haUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNUVUZCUVN4WlFVRkJMRTFCUVVFN1FVRkJRU3hUUVVGQkxHZENRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1MwRkJRU3hKUVVGQkxFZEJRVUVzUjBGQlFTeGpRVUZCTEVOQlFVRXNSMEZCUVN4UFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hKUVVGQkxFdEJRVUVzUlVGQlFTeExRVUZCTEVWQlFVRXNWVUZCUVN4UlFVRkJMRmxCUVVFc1VVRkJRU3hSUVVGQkxHOUNRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1MwRkJRU3hYUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEdWQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc1IwRkJRU3haUVVGQkxFTkJRVUVzUjBGQlFTd3lRa0ZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzUjBGQlFTeE5RVUZCTEVOQlFVRXNSMEZCUVR0QlFVRkJMRk5CUVVFc1lVRkJRU3hMUVVGQkxFVkJRVUVzU1VGQlFTeGxRVUZCTEV0QlFVRXNhVUpCUVVFc1MwRkJRU3hyUWtGQlFTeExRVUZCTEUxQlFVRXNTVUZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hOUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEVsQlFVRXNTMEZCUVN4VFFVRkJMRkZCUVVFc1IwRkJRU3hIUVVGQkxFbEJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNTMEZCUVN4RlFVRkJMRWxCUVVFc01rSkJRVUVzUjBGQlFTeHpRa0ZCUVN4SFFVRkJMRmxCUVVFc1UwRkJRU3cwUkVGQlFTeEpRVUZCTEdkQ1FVRkJMRTFCUVVFc1IwRkJRU3hOUVVGQkxFVkJRVUVzUzBGQlFUdEJRVVZ3UWl4TlFVRk5MRzlDUVVGdlFpeFRRVUZUTEc5Q1FVRmhMRU5CUVVNN1JVRkJRU3haUVVGQkxFZEJRVUVzU1VGQlFUdEpRVUZCTEZOQlFVRXNTVUZCUVR0SlFVRkJMR1ZCUVVFc1owSkJRM1JFTzAxQlEwNHNaVUZCWlN4RlFVRkZPMGxCUTI1Q0xFTkJRVU03U1VGQlFTeGxRVUZCTERSQ1FXMUNiVUlzVFVGQlRUdE5RVU40UWl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NWVUZCVlN4RFFVTnFReXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVU5tTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hKUVVGSkxGbEJRVTBzUjBGQlJ5eEZRVU53UXl4RFFVRkRPMGxCUTBnc1EwRkJRenRKUVVGQkxHVkJRVUVzTmtKQlJXOUNMRlZCUVZVc1kwRkJZeXhGUVVGRk8wMUJRemRETEVsQlFVa3NZMEZCWXl4RlFVRkZPMUZCUTJ4Q0xFOUJRVThzWTBGQll6dE5RVU4yUWp0TlFVTkJMRTFCUVUwN1VVRkJSU3hqUVVGak8xRkJRVVU3VFVGQlZ5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzN1RVRkRha1FzVFVGQlRTeFpRVUZaTEVkQlFVY3NZMEZCWXl4RFFVRkRMRWxCUVVrN1RVRkRlRU1zVFVGQlRUdFJRVUZGTzAxQlFVVXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUE8wMUJSVEZDTEZGQlFWRXNXVUZCV1R0UlFVTnNRaXhMUVVGTExITkNRVUZoTEVOQlFVTXNUMEZCVHp0VlFVTjRRaXhQUVVGUExFTkJRVU1zUTBGQlF5eHhRa0ZCY1VJc1EwRkJRenRSUVVOcVF5eExRVUZMTEhOQ1FVRmhMRU5CUVVNc1RVRkJUVHRWUVVOMlFpeFBRVUZQTEVOQlFVTXNRMEZCUXl4dlFrRkJiMElzUTBGQlF6dFJRVU5vUXl4TFFVRkxMSE5DUVVGaExFTkJRVU1zVDBGQlR6dFZRVU40UWl4UFFVRlBMRU5CUVVNc1EwRkJReXh4UWtGQmNVSXNRMEZCUXp0UlFVTnFReXhMUVVGTExITkNRVUZoTEVOQlFVTXNZVUZCWVR0VlFVTTVRaXhQUVVGUExFTkJRVU1zUTBGQlF5d3dRa0ZCTUVJc1EwRkJRenRSUVVOMFF6dFZRVU5GTEU5QlFVOHNRMEZCUXl4RFFVRkRMR05CUVdNc1JVRkJSU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzAxQlF6RkRPMGxCUTBZc1EwRkJRenRKUVVGQkxHVkJRVUVzT0VOQlJYRkRMRU5CUVVNc1QwRkJUeXhGUVVGRkxGbEJRVmtzUjBGQlJ5eExRVUZMTEV0QlFVczdUVUZEZGtVc1RVRkJUVHRSUVVGRkxHMUNRVUZ0UWp0UlFVRkZMR1ZCUVdVN1VVRkJSVHROUVVGblFpeERRVUZETEVkQlF6ZEVMRWxCUVVrc1EwRkJReXhMUVVGTE8wMUJSVm9zYjBKQlEwVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVVVGQlFTeERRVUZCTEU5QlFVODdVVUZEVGl4UFFVRlBMRVZCUVVVc1EwRkJRU3hMUVVGTk8xVkJRMklzVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTTdVVUZETjBNc1EwRkJSVHRSUVVOR0xGZEJRVmM3VVVGRFdDeExRVUZMTEdWQlEwZ3NUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4SlFVRkpPMVZCUTBnc1NVRkJTU3hGUVVGRkxEQkNRVUZSTEVOQlFVTXNUVUZCVHp0VlFVTjBRaXhKUVVGSkxFVkJRVVVzTUVKQlFWRXNRMEZCUXl4RlFVRkhPMVZCUTJ4Q0xFdEJRVXNzUlVGQlJTeDFRa0ZCVXl4RFFVRkRPMUZCUVdVc1EwRkRha003VFVGRFJpeG5Ra0ZGUkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRWxCUVVrN1VVRkRTQ3hQUVVGUExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4WlFVRmhPMUZCUTJ4RExGTkJRVk1zUlVGQlJTeDFRa0ZCVXl4RFFVRkRMRTFCUVU4N1VVRkROVUlzVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF6dE5RVUZGTEVkQlJYQkNMRTlCUTBjc1EwRkJReXhsUVVOUUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRWxCUVVFc1EwRkJRU3hQUVVGSE8xRkJRVU1zVDBGQlR5eEZRVUZGTEhGQ1FVRlBMRU5CUVVNc1NVRkJTenRSUVVGRExFOUJRVThzUlVGQlJTeERRVUZGTzFGQlFVTXNSMEZCUnl4RlFVRkZPMDFCUVVVc1owSkJRemRETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNaVUZCWlR0UlFVTmtMRTlCUVU4c1JVRkJSU3hEUVVGQkxFdEJRVTA3VlVGRFlpeE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXp0VlFVTXpReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkRPMUZCUTNaQ0xFTkJRVVU3VVVGRFJpeFBRVUZQTEVWQlFVVXNlVUpCUVZjc1EwRkJReXhOUVVGUE8xRkJRelZDTEV0QlFVczdUVUZCUVN4SFFVVktMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEdkQ1FVRm5RaXhEUVVOcVFpeERRVUZETEVWQlEycENMRmxCUVZrc1owSkJRMWdzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2FVSkJRVUVzUTBGQlFTeGhRVUZoTzFGQlExb3NUMEZCVHl4RlFVRkZMRU5CUVVFc1MwRkJUVHRWUVVOaUxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTTdXVUZCUlN4bFFVRmxMRVZCUVVVN1ZVRkJUU3hEUVVGRExFTkJRVU03VlVGRGVrTXNaVUZCWlN4RFFVRkRMRWRCUVVjc1pVRkJaU3hEUVVGRE8xVkJRMjVETEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRPMVZCUXpORExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhWUVVGVkxFTkJRMnBETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUTJZc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEVsQlFVa3NXVUZCVFN4SFFVRkhMRVZCUTNCRExFTkJRVU03VVVGRFNDeERRVUZGTzFGQlEwWXNUMEZCVHl4RlFVRkZMSGxDUVVGWExFTkJRVU1zVFVGQlR6dFJRVU0xUWl4TFFVRkxPMDFCUVVFc1IwRkZTaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4VlFVRlZMRU5CUTJJc1EwRkJReXhIUVVOa0xFbEJRMFFzUTBGRFJTeERRVUZETzBsQlJXUXNRMEZCUXp0SlFVRkJMR1ZCUVVFc2QwTkJSU3RDTEUxQlFVMDdUVUZEY0VNc1QwRkJUeXhKUVVGSkxFTkJRVU1zYlVOQlFXMURMRU5CUXpkRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMSGxDUVVGNVFpeERRVUZETEVWQlEzcERMRXRCUTBZc1EwRkJRenRKUVVOSUxFTkJRVU03U1VGQlFTeGxRVUZCTEcxRFFVVXdRaXhOUVVGTk8wMUJReTlDTEUxQlFVMDdVVUZCUlR0TlFVRmxMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN6dE5RVU55UXl4UFFVRlBMRWxCUVVrc1EwRkJReXh0UTBGQmJVTXNRMEZETjBNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNPRUpCUVRoQ0xFVkJRVVVzUTBGQlF5eGpRVUZqTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1JVRkRla1VzU1VGRFJpeERRVUZETzBsQlEwZ3NRMEZCUXp0SlFVRkJMR1ZCUVVFc2NVSkJSVmtzVFVGQlRUdE5RVU5xUWl4TlFVRk5PMUZCUVVVN1RVRkJhVUlzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxPMDFCUlhaRExFbEJRVWtzWjBKQlFXZENMRVZCUVVVN1VVRkRjRUlzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXp0VlFVRkZMR1ZCUVdVc1JVRkJSVHRSUVVGTExFTkJRVU1zUTBGQlF6dE5RVU14UXp0SlFVTkdMRU5CUVVNN1NVRkJRU3hsUVVGQkxEWkNRVVZ4UWl4VFFVRlRMRWxCUVVzN1RVRkRiRU1zVFVGQlRUdFJRVUZGTzAxQlFXVXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTE8wMUJRM0pETEUxQlFVMDdVVUZCUlN4alFVRmpMRVZCUVVVN1RVRkJZU3hEUVVGRExFZEJRVWNzVTBGQlV6dE5RVU5zUkN4SlFVRkpMR05CUVdNc1EwRkJReXhKUVVGSkxFdEJRVXNzV1VGQldTeERRVUZETEVsQlFVa3NSVUZCUlR0UlFVTTNReXhOUVVGTkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF6dFJRVU16UXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRE8xVkJRVVVzWlVGQlpTeEZRVUZGTzFGQlFVMHNRMEZCUXl4RFFVRkRPMUZCUTNwRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhWUVVGVkxFTkJRMnBETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUTJZc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEVsQlFVa3NXVUZCVFN4SFFVRkhMRVZCUTNCRExFTkJRVU03VFVGRFNEdEpRVU5HTEVOQlFVTTdTVUZCUVN4bFFVRkJMQ3RDUVVWelFpeE5RVUZOTzAxQlF6TkNMRTFCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRE8wbEJRemRETEVOQlFVTTdSVUZCUVR0RlFVVkVMRTFCUVUwc1EwRkJRU3hGUVVGSE8wbEJRMUFzVFVGQlRUdE5RVUZGTERCQ1FVRXdRanROUVVGRk8wbEJRVFJDTEVOQlFVTXNSMEZETDBRc1NVRkJTU3hEUVVGRExFdEJRVXM3U1VGRldpeEpRVUZKTEhOQ1FVRnpRanRKUVVNeFFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1pVRkJaU3hGUVVGRk8wMUJRemxDTEhOQ1FVRnpRaXhIUVVGSExFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhEUVVGRE8wbEJRekZFTEVOQlFVTXNUVUZCVFN4SlFVRkpMREpDUVVFeVFpeEZRVUZGTzAxQlEzUkRMSE5DUVVGelFpeEhRVUZITEVsQlFVa3NRMEZCUXl3MlFrRkJOa0lzUTBGQlF5eERRVUZETzBsQlF5OUVMRU5CUVVNc1RVRkJUVHROUVVOTUxITkNRVUZ6UWl4SFFVRkhMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZET1VNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eGpRVU5pTEVOQlFVTTdTVUZEU0R0SlFVVkJMRzlDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR05CUVVFc1EwRkJRU3hQUVVGaE8wMUJRMW9zVFVGQlRTeGxRVU5LTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRSUVVORkxGTkJRVk1zUlVGQlF5dzRRa0ZCT0VJN1VVRkRlRU1zVDBGQlR5eEZRVUZGTzAxQlFUSkNMRU5CUTNKRExFTkJRMFk3VFVGRFJDeHJRa0ZCYTBJc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNaVUZCWjBJN1RVRkRhRVFzWTBGQll5eEZRVUZGTzBsQlFYVkNMRU5CUTNoRExFTkJRVU03UlVGRlRqdEJRVU5HTzBGQlFVTXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3h2UWtGQlFUdEJRVUZCTEdWQlFVRXNRMEZxVEc5Q0xHOUNRVUZ2UWl4clFrRkxha0k3UlVGRGNFSXNRMEZCUXl4RlFVRkZMR3RDUVVGVExFTkJRVU03UVVGRFppeERRVUZETzBGQlFVRXNaVUZCUVN4RFFWQnJRaXh2UWtGQmIwSXNaVUZUY0VJN1JVRkRha0lzWTBGQll5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRGUVVOb1F5eFZRVUZWTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTk8wVkJRelZDTEdOQlFXTXNSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTA3UlVGRGFFTXNWVUZCVlN4RlFVRkZMR3RDUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNhMEpCUVZNc1EwRkJReXhOUVVGTkxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRGUVVOeVJTeHRRa0ZCYlVJc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVazdSVUZEYmtNc1pVRkJaU3hGUVVGRkxHdENRVUZUTEVOQlFVTXNTMEZCU3p0RlFVTm9ReXhsUVVGbExFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpPMFZCUXk5Q0xEQkNRVUV3UWl4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNUdEZRVU14UXl4blFrRkJaMElzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrN1JVRkRhRU1zTWtKQlFUSkNMRVZCUVVVc2EwSkJRVk1zUTBGQlF6dEJRVU42UXl4RFFVRkRPenM3T3pzN096czdPenM3T3pzN096czdPenRCUXpGRFNDeEpRVUZCTEZkQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hSUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNUMEZCUVN4SFFVRkJMSFZDUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkxRU3hKUVVGQkxGTkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4eFFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVRnpSU3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN1FVRkJRU3hUUVVGQkxIbENRVUZCTEZkQlFVRXNaVUZCUVN4UFFVRkJMR3REUVVGQkxHbENRVUZCTEU5QlFVRXNUMEZCUVN4UlFVRkJMR2RDUVVGQkxFOUJRVUVzVDBGQlFTeFpRVUZCTEhkQ1FVRkJMRmxCUVVFc1EwRkJRU3hYUVVGQkxGZEJRVUVzVjBGQlFTeEhRVUZCTEdkQ1FVRkJMRWRCUVVFc2FVSkJRVUVzUzBGQlFTeFhRVUZCTzBGQlFVRXNVMEZCUVN4M1FrRkJRU3hIUVVGQkxFVkJRVUVzVjBGQlFTeFRRVUZCTEZkQlFVRXNTVUZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzVjBGQlFTeEhRVUZCTEZGQlFVRXNSMEZCUVN4dlFrRkJRU3hIUVVGQkxIZENRVUZCTEVkQlFVRXNORUpCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUVzVlVGQlFTeExRVUZCTEVkQlFVRXNkMEpCUVVFc1EwRkJRU3hYUVVGQkxFOUJRVUVzUzBGQlFTeEpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3haUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1YwRkJRU3h4UWtGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRWxCUVVFc1RVRkJRU3hEUVVGQkxIZENRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1VVRkJRU3hIUVVGQkxHdENRVUZCTEUxQlFVRXNRMEZCUVN4VFFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4VFFVRkJMRWxCUVVFc1IwRkJRU3h4UWtGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4M1FrRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEdOQlFVRXNTVUZCUVN4TFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFMUJRVUVzUlVGQlFTeEhRVUZCTEVWQlFVRXNTVUZCUVN4WlFVRkJMRTFCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNVMEZCUVN4TlFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxFZEJRVUVzVFVGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzVFVGQlFTeFpRVUZCTEUxQlFVRTdRVUZGZEVVc1RVRkJUU3cwUWtGQk5FSXNSMEZCUnl4RFFVRkRMRXRCUVVzc1JVRkJSU3hOUVVGTkxFVkJRVVVzUzBGQlN5eERRVUZETzBGQlJUTkVMRTFCUVUwc1pVRkJaU3hIUVVGSkxFdEJRVXNzU1VGQlN6dEZRVU5xUXl4TlFVRk5PMGxCUVVVN1JVRkJaU3hEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEZGQlFWRTdSVUZEZWtNc1RVRkJUU3hqUVVGakxFZEJRVWNzU1VGQlFTd3lRa0ZCYVVJc1JVRkJReXhMUVVGTExFTkJRVU03UlVGREwwTXNUVUZCVFR0SlFVRkZMRTFCUVUwN1NVRkJSU3hQUVVGUE8wbEJRVVVzVFVGQlRUdEpRVUZGTEZGQlFWRTdTVUZCUlR0RlFVRkxMRU5CUVVNc1IwRkJSeXhqUVVGak8wVkJSV3hGTEUxQlFVMHNaVUZCWlN4SFFVTnVRaXhKUVVGSkxFdEJRVXNzYzBKQlFXRXNRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJReXhOUVVGTkxFVkJRVVVzVDBGQlR5eEZRVUZGTEUxQlFVMHNSVUZCUlN4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF6dEZRVVV6UlN4TlFVRk5MR1ZCUVdVc1IwRkJSeXhQUVVGUE8wVkJReTlDTEUxQlFVMHNiVUpCUVcxQ0xFZEJRM1pDTERSQ1FVRTBRaXhEUVVGRExGRkJRVkVzUTBGQlF5eGxRVUZsTEVOQlFVTTdSVUZEZUVRc1RVRkJUU3hqUVVGakxFZEJRVWNzVFVGQlRTeEpRVUZKTEVsQlFVa3NSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNXVUZCV1N4RFFVRkRPMFZCUXpWRkxFMUJRVTBzTWtKQlFUSkNMRWRCUVVjc2JVSkJRVzFDTEVsQlFVa3NZMEZCWXpzN1JVRkZla1U3UlVGRFFUdEZRVU5CTEVsQlFVa3NWMEZCVnl4SFFVRkhMRkZCUVZFN1JVRkRNVUlzU1VGQlNTeFhRVUZYTEV0QlFVc3NVMEZCVXl4RlFVRkZPMGxCUXpkQ0xFMUJRVTBzVVVGQlVTeEhRVUZITEVsQlFVRXNaME5CUVhGQ0xFVkJRVU1zUzBGQlN5eERRVUZETzBsQlF6ZERMRTFCUVUwc1kwRkJZeXhIUVVGSExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlEycERMRTlCUVU4c1NVRkJTeXhQUVVGUExFTkJRVU1zVDBGQlR5eExRVUZMTEU5QlEyNURMRU5CUVVNN1NVRkRSQ3hKUVVGSkxHTkJRV01zUlVGQlJUdE5RVU5zUWl4WFFVRlhMRWRCUVVjc1kwRkJZeXhEUVVGRExGRkJRVkU3U1VGRGRrTTdSVUZEUmp0RlFVVkJMRTlCUVU4N1NVRkRUQ3huUWtGQlowSXNSVUZCUlN4SlFVRkJMREpDUVVGblFpeEZRVUZETEV0QlFVc3NRMEZCUXp0SlFVTjZReXhqUVVGak8wbEJRMlFzWlVGQlpUdEpRVU5tTEdOQlFXTXNSVUZCUlR0TlFVTmtMRWRCUVVjc1kwRkJZenROUVVOcVFpeFJRVUZSTEVWQlFVVTdTVUZEV2l4RFFVRkRPMGxCUTBRc1ZVRkJWU3hGUVVGRkxFbEJRVUVzSzBKQlFXOUNMRVZCUVVNc1MwRkJTeXhEUVVGRE8wbEJRM1pETzBWQlEwWXNRMEZCUXp0QlFVTklMRU5CUVVNN1FVRkZSQ3hOUVVGTkxHdENRVUZyUWl4SFFVRkpMRkZCUVZFc1NVRkJTenRGUVVOMlF5eFBRVUZQTzBsQlEwd3NaVUZCWlN4RlFVRkhMRWxCUVVrc1NVRkJTenROUVVONlFpeFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVU42UXl4RFFVRkRPMGxCUTBRc01FSkJRVEJDTEVWQlFVVXNRMEZCUVN4TFFVTXhRaXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETERCQ1FVRXdRaXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5vUkN4dFFrRkJiVUlzUlVGQlJTeERRVUZCTEV0QlFVMDdUVUZEZWtJc1NVRkJTU3hQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEZWQlFWVXNSVUZCUlR0UlFVTXhRaXhQUVVGUExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF5eERRVUZETzAxQlF6bERPMDFCUTBFc1QwRkJUeXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEcxQ1FVRnRRaXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5vUkR0RlFVTkdMRU5CUVVNN1FVRkRTQ3hEUVVGRE8wRkJRVU1zU1VGQlFTeFJRVUZCTEVkQlJXRXNTVUZCUVN4dFFrRkJUeXhGUVVOd1FpeGxRVUZsTEVWQlEyWXNhMEpCUTBZc1EwRkJReXhEUVVGRExEWkNRVUZ2UWl4RFFVRkRPMEZCUVVFc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeFJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzaEZka0lzU1VGQlFTeFRRVUZCTEhWQ1FVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMR0ZCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNXVUZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVOQkxFbEJRVUVzYTBKQlFVRXNUMEZCUVN4RFFVRkJMR3RDUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5CTEVsQlFVRXNZMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEdsQ1FVRkJMRTlCUVVFc1EwRkJRU3d3UWtGQlFTeERRVUZCTEVOQlFVRTdRVUZGUVN4SlFVRkJMRmRCUVVFc1QwRkJRU3hEUVVGQkxIZENRVUZCTEVOQlFVRXNRMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hQUVVGQkxFTkJRVUVzYlVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCU1VFc1NVRkJRU3hSUVVGQkxFOUJRVUVzUTBGQlFTdzJRa0ZCUVN4RFFVRkJMRU5CUVVFN1FVRkRRU3hKUVVGQkxGRkJRVUVzVDBGQlFTeERRVUZCTEdWQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hoUVVGQkxFOUJRVUVzUTBGQlFTeHZRa0ZCUVN4RFFVRkJMRU5CUVVFN1FVRlBRU3hKUVVGQkxHdENRVUZCTEU5QlFVRXNRMEZCUVN3clFrRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEZOQlFVRXNUMEZCUVN4RFFVRkJMR3REUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5CTEVsQlFVRXNUMEZCUVN4UFFVRkJMRU5CUVVFc2EwTkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4WFFVRkJMRTlCUVVFc1EwRkJRU3h6UTBGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1QwRkJRU3hEUVVGQkxEQkRRVUZCTEVOQlFVRXNRMEZCUVR0QlFVdEJMRWxCUVVFc1owSkJRVUVzVDBGQlFTeERRVUZCTEN0Q1FVRkJMRU5CUVVFc1EwRkJRVHRCUVVOQkxFbEJRVUVzYjBKQlFVRXNUMEZCUVN4RFFVRkJMSGxDUVVGQkxFTkJRVUVzUTBGQlFUdEJRVUZ0UkN4eFEwRkJRU3hGUVVGQkxFOUJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWRCUVVFc1IwRkJRU3hGUVVGQkxGTkJRVUVzUjBGQlFTeEZRVUZCTEVOQlFVRXNSVUZCUVR0QlFVRkJMQ3REUVVGQkxFVkJRVUVzU1VGQlFTeFBRVUZCTEU5QlFVRXNTMEZCUVN4VlFVRkJMRVZCUVVFc1QwRkJRU3hKUVVGQkxFTkJRVUVzUTBGQlFTeEpRVUZCTEc5Q1FVRkJMRWxCUVVFc1QwRkJRU3hGUVVGQkxFTkJRVUVzUTBGQlFTeEpRVUZCTEcxQ1FVRkJMRWxCUVVFc1QwRkJRU3hGUVVGQkxFTkJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNNa0pCUVVFc2RVSkJRVUVzUlVGQlFTeFBRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEVOQlFVRXNSVUZCUVN4RlFVRkJMRmRCUVVFc1EwRkJRU3hEUVVGQkxFVkJRVUU3UVVGQlFTeHRSRUZCUVN4RlFVRkJMRWxCUVVFc1EwRkJRU3hYUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNWMEZCUVN4RlFVRkJMRVZCUVVFc1QwRkJRU3hIUVVGQkxFTkJRVUVzUlVGQlFTeERRVUZCTEVsQlFVRXNSMEZCUVN4TFFVRkJMRWxCUVVFc1NVRkJRU3hQUVVGQkxFZEJRVUVzUzBGQlFTeFJRVUZCTEVsQlFVRXNUMEZCUVN4SFFVRkJMRXRCUVVFc1ZVRkJRU3hGUVVGQkxFVkJRVUVzVDBGQlFTeEZRVUZCTEZOQlFVRXNSMEZCUVN4RlFVRkJMRU5CUVVFc1JVRkJRU3hEUVVGQkxFbEJRVUVzVVVGQlFTeDNRa0ZCUVN4RFFVRkJMRmRCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzU1VGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFVkJRVUVzUlVGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hEUVVGQkxFVkJRVUVzUTBGQlFTeEpRVUZCTEZOQlFVRXNSVUZCUVN4RFFVRkJMRU5CUVVFc1NVRkJRU3gzUWtGQlFTeE5RVUZCTEdWQlFVRXNTVUZCUVN4TlFVRkJMSGxDUVVGQkxFTkJRVUVzUTBGQlFTeExRVUZCTEVsQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1JVRkJRU3hGUVVGQkxFbEJRVUVzUjBGQlFTeExRVUZCTEZOQlFVRXNTVUZCUVN4TlFVRkJMRlZCUVVFc1pVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNRMEZCUVN4RlFVRkJMRVZCUVVFc1NVRkJRU3hQUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4NVFrRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRU5CUVVFc1EwRkJRU3hKUVVGQkxFbEJRVUVzUzBGQlFTeEpRVUZCTEVsQlFVRXNTVUZCUVN4SlFVRkJMRWxCUVVFc1EwRkJRU3hGUVVGQkxFVkJRVUVzVFVGQlFTeGxRVUZCTEVOQlFVRXNUVUZCUVN4RlFVRkJMRWRCUVVFc1JVRkJRU3hKUVVGQkxFTkJRVUVzUTBGQlFTeEZRVUZCTEUxQlFVRXNSVUZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4RFFVRkJMRVZCUVVFc1JVRkJRU3hGUVVGQkxFTkJRVUVzVFVGQlFTeFJRVUZCTEVkQlFVRXNSMEZCUVN4RFFVRkJMRU5CUVVFc1NVRkJRU3hMUVVGQkxFVkJRVUVzUlVGQlFTeExRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1RVRkJRU3hEUVVGQkxFTkJRVUVzUlVGQlFTeERRVUZCTEU5QlFVRXNUVUZCUVN4RFFVRkJMRVZCUVVFN1FVRkZjRU1zTkVKQlFUUkNPenM3UTBGQk1FSXNSVUZCUlR0RlFVTnlSU3hOUVVGTkxFbEJRVWtzUTBGQlFTeERRVUZCTEVWQlFVRXNaVUZCUVN4bFFVRmpMRWRCUVVVc1EwRkJRVHRGUVVNeFFpeE5RVUZOTEZkQlFWY3NRMEZCUVN4RFFVRkJMRVZCUVVFc1YwRkJRU3haUVVGWExFZEJRVVVzUTBGQlFUdEZRVU01UWl4TlFVRk5MRlZCUVZVc1EwRkJRU3hEUVVGQkxFVkJRVUVzWlVGQlFTeFhRVUZWTEVkQlFVVXNRMEZCUVR0RlFVVTFRaXhOUVVGTkxGVkJRVlVzUTBGQlFTeERRVUZCTEVWQlFVRXNWMEZCUVN4WlFVRlhMRVZCUVVNc1ZVRkJRU3hyUWtGQmFVSXNRMEZCUXl4RFFVRkJPMFZCUXpsRExFMUJRVTBzVlVGQlZTeERRVUZCTEVOQlFVRXNSVUZCUVN4WFFVRkJMRmxCUVZjc1JVRkJReXhWUVVGQkxHdENRVUZwUWl4RFFVRkRMRU5CUVVFN1JVRkRPVU1zVFVGQlRTeFhRVUZYTEVOQlFVRXNRMEZCUVN4RlFVRkJMRmRCUVVFc1dVRkJWeXhGUVVGRExGVkJRVUVzT0VKQlFUWkNMRU5CUVVNc1EwRkJRVHRGUVVNelJDeE5RVUZOTEcxQ1FVRnRRaXhEUVVGQkxFTkJRVUVzUlVGQlFTeFhRVUZCTEZsQlFWY3NSVUZCUXl4VlFVRkJMRzlDUVVGdFFpeERRVUZETEVOQlFVRTdSVUZEZWtRc1RVRkJUVHM3UjBGQlZ5eEhRVUZITEdkQ1FVRm5RaXhEUVVGQk8wVkJRM0JETEUxQlFVMHNZMEZCWXl4RFFVRkJMRU5CUVVFc1JVRkJRU3hqUVVGQkxHVkJRV01zUlVGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGQk8wVkJRemxFTEUxQlFVMDdPMGRCUVc5Q0xFZEJRVWNzVVVGQlVTeERRVUZCTzBWQlEzSkRMRTFCUVUwc01rSkJRVEpDTEVOQlFVRXNRMEZCUVN4RlFVRkJMRXRCUVVFc1pVRkJZeXhGUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVFN1JVRkRha1VzVFVGQlRTeGhRVUZoTEVOQlFVRXNRMEZCUVN4RlFVRkJMRTFCUVVFc1YwRkJWU3hGUVVGRExHRkJRVUVzYlVKQlFXdENMRU5CUVVNc1EwRkJRVHRGUVVOcVJDeE5RVUZOTEhkQ1FVRjNRaXhEUVVGQkxFTkJRVUVzUlVGQlFTeFhRVUZCTEZsQlFWY3NSVUZCUXl4VlFVRkJMSGxDUVVGM1FpeERRVUZETEVOQlFVRTdSVUZGYmtVc1RVRkJUU3hqUVVGakxFOUJRVThzUzBGQlN5eExRVUZMTEZGQlFVRXNXVUZCVnl4VlFVRlZMRU5CUVVFN1JVRkZNVVFzVFVGQlRTdzJRa0ZCTmtJc1RVRkJUVHRKUVVOMlF5eFBRVUZQTEV0QlFVc3NRMEZCUlN4RFFVRkJMRVZCUVVVc1QwRkJRU3hsUVVGbExFTkJRVUVzYVVKQlFVRXNRMEZCYTBJc1EwRkJReXhEUVVGQk8wZEJRMjVFTEVOQlFVRTdSVUZGUkN4TlFVRk5MRzlDUVVGdlFpeE5RVUZOTzBsQlF6bENMRlZCUVZVc1EwRkJRenROUVVOVUxFOUJRVThzV1VGQlFTeHhRa0ZCYjBJc2IwSkJRVzlDTzAxQlF5OURMRlZCUVZVc1dVRkJRU3g1UWtGQmQwSXNWMEZCVnp0TlFVTTNReXhaUVVGWk8xRkJRMVlzVjBGQlZ5eFpRVUZCTEhsQ1FVRjNRaXhsUVVGbE8xRkJRMnhFTEZWQlFWVXNhVUpCUVdsQ08xRkJRek5DTEZsQlFWa3NRMEZCUVN4RFFVRkJMRVZCUVVFc1MwRkJRU3hsUVVGakxFVkJRVU1zVjBGQlZ5eERRVUZCTzA5QlEzaERPMHRCUTBRc1EwRkJReXhEUVVGQk8wbEJRMFlzVFVGQlRTeFRRVUZUTEZGQlFWRXNRMEZCUXp0TlFVTjBRaXhMUVVGTExGZEJRVUU3UzBGRFRpeERRVUZETEVOQlFVRTdTVUZEUml4UFFVRlBMRVZCUVVVc1EwRkJRVHRIUVVOV0xFTkJRVUU3UlVGRlJDeHZRa0ZEUlN4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExFdEJRVUVzUzBGQlNTeEZRVUZCTzBsQlEwZ3NaVUZCWlN4aFFVRmpPMGxCUXpkQ0xGZEJRVlVzYzBKQlFYTkNPMGxCUTJoRExGRkJRVkVzVDBGQlFUdEhRVUZSTEdWQlJXaENMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVU1zUzBGQlFTeFRRVUZSTEVWQlFVRTdTVUZEVUN4VFFVTkZMSEZDUVVGeFFpeFZRVUZWTEV0QlFVc3NhMEpCUVd0Q0xFZEJRMnhFTERCQ1FVRXdRaXhIUVVNeFFpeHBRa0ZEVER0SlFVTkVMRlZCUTBVc2QwSkJRWGRDTEdkQ1FVTjBRaXhOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVR0TlFVRk5MRmRCUVZVc2RVTkJRVUU3UzBGQmRVTXNSVUZEY0VRc2QwSkJRMGNzUTBGQlF5eEhRVU5NTEVsQlEwdzdTVUZEUkN4VlFVRlZMR2xDUVVGQkxGTkJRVkVzVDBGQlF6dEhRVUZQTEVWQlJYcENMRU5CUVVNc1EwRkRRU3h4UWtGQmNVSXNWVUZCVlN4RlFVTXZRaXh4UWtGQmNVSXNWMEZCVnl4TFFVRkxMRVZCUVVVc1IwRkRia01zU1VGQlNTeEhRVU5LTEVOQlFVTXNRMEZCUXl4RFFVRkRMSEZDUVVGeFFpeFhRVUZYTEVOQlFVTXNRMEZETVVNc1EwRkRVU3hEUVVGRExFVkJRMVlzUTBGQlFTeERRVUZCTEVWQlFVRXNUVUZCUVN4dFFrRkJhMElzUjBGQlJTeExRVUZMTEVsQlFVRXNORUpCUVRKQ0xFZEJRVWNzU1VGQlNTeG5Ra0ZETVVRc1RVRkJRU3hSUVVGQkxHTkJRVUVzUTBGQlF5eExRVUZCTEZOQlFWRXNSVUZCUVR0SlFVTlFMRk5CUVZNc1RVRkJUVHROUVVOaUxGVkJRVlVzUTBGQlF6dFJRVU5VTEU5QlFVOHNXVUZCUVN4eFFrRkJiMElzYTBKQlFXdENPMUZCUXpkRExGVkJRVlVzV1VGQlFTeDVRa0ZCZDBJc1YwRkJWenRSUVVNM1F5eFpRVUZaTzFWQlExWXNWVUZCVlN4cFFrRkJRVHRUUVVOYU8wOUJRMFFzUTBGQlF5eERRVUZCTzAxQlEwWXNUVUZCVFN4VFFVRlRMSFZDUVVGMVFpeEZRVUZGTEVOQlFVRTdUVUZEZUVNc1QwRkJUeXhGUVVGRkxFTkJRVUU3UzBGRFZEdEpRVU5HTEZWQlFWVXNhVUpCUVVFc1UwRkJVU3hQUVVGRE8wZEJRVThzUlVGRmVrSXNRMEZCUXl4RFFVRkRMRmxCUVZrc1EwRkRVQ3hEUVVOWUxHVkJRMFFzVFVGQlFTeFJRVUZCTEdOQlFVRXNRMEZCUXl4TFFVRkJMRk5CUVZFc1JVRkJRVHRKUVVOUUxHVkJRVmtzZFVOQlFYVkRPMGxCUTI1RUxGTkJRVk1zVFVGQlRUdE5RVU5pTEZGQlFWRXNRMEZCUXl4RFFVRkJMRU5CUVVFc1JVRkJRU3hSUVVGQkxGVkJRVk1zUlVGQlF6dFJRVUZGTEUxQlFVMHNhVUpCUVVFN1QwRkJiVUlzUTBGQlF5eERRVUZETEVOQlFVRTdUVUZEYUVRc1ZVRkJWU3hEUVVGRE8xRkJRMVFzVDBGQlR5eFpRVUZCTEhGQ1FVRnZRaXgzUWtGQmQwSTdVVUZEYmtRc1ZVRkJWU3haUVVGQkxIbENRVUYzUWl4WFFVRlhPMUZCUXpkRExGbEJRVms3VlVGRFZpeFZRVUZWTEdsQ1FVRkJPMU5CUTFvN1QwRkRSQ3hEUVVGRExFTkJRVUU3VFVGRFJpeFBRVUZQTEVWQlFVVXNRMEZCUVR0TFFVTlVPMGxCUTBZc1ZVRkJWU3hwUWtGQlFTeFRRVUZSTEZsQlFVTTdSMEZCV1N4RlFVVTVRaXhEUVVGRExFTkJRVU1zWjBKQlFXZENMRU5CUTFnc1EwRkJReXhsUVVOWUxFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVTXNTMEZCUVN4VFFVRlJMRVZCUVVFN1NVRkRVQ3hsUVVGWkxIVkRRVUYxUXp0SlFVTnVSQ3hUUVVGVExFMUJRVTA3VFVGRFlpeFZRVUZWTEVOQlFVTTdVVUZEVkN4UFFVRlBMRmxCUVVFc2NVSkJRVzlDTEhkQ1FVRjNRanRSUVVOdVJDeFZRVUZWTEZsQlFVRXNlVUpCUVhkQ0xGZEJRVmM3VVVGRE4wTXNXVUZCV1R0VlFVTldMRlZCUVZVc2FVSkJRVUU3VTBGRFdqdFBRVU5FTEVOQlFVTXNRMEZCUVR0TlFVTkdMRTlCUVU4c1MwRkJTeXhEUVVGRExFOUJRVUVzWjBKQlFXVXNRMEZCUXl4RFFVRkJPMDFCUXpkQ0xFOUJRVThzUlVGQlJTeERRVUZCTzB0QlExUTdTVUZEUml4VlFVRlZMR2xDUVVGQkxGTkJRVkVzVVVGQlF6dEhRVUZSTEVWQlJURkNMRU5CUVVNc1EwRkJReXhuUWtGQlowSXNRMEZEV0N4RFFVRkRMRVZCUTFZc1YwRkJWeXhuUWtGRFZpeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkRMRXRCUVVFc1UwRkJVU3hGUVVGQk8wbEJRMUFzWlVGQldTeHpRMEZCYzBNN1NVRkRiRVFzVTBGQlV5eE5RVUZOTzAxQlEySXNVVUZCVVN4RFFVTk9MRU5CUVVFc1EwRkJRU3hGUVVGQkxGRkJRVUVzVlVGQlV5eEZRVUZETzFGQlExSXNUVUZCVFN4M1FrRkJkMEk3VVVGRE9VSXNWVUZCVlN4blFrRkJRVHRQUVVOWUxFTkJRMGdzUTBGQlF5eERRVUZCTzAxQlEwUXNUMEZCVHl4RlFVRkZMRU5CUVVFN1MwRkRWRHRKUVVOR0xGVkJRVlVzYVVKQlFVRXNVMEZCVVN4TlFVRkRPMGRCUVUwc1JVRkZlRUlzUTBGQlF5eERRVUZETEdWQlFXVXNRMEZEVml4RFFVRkRMRWRCUTFRc1NVRkRRU3hEUVVGRExFTkJRVUU3UTBGRldEdEJRVVZCTEd0Q1FVRnJRaXhWUVVGVkxFZEJRVWM3UlVGRE4wSXNaVUZCWlN4VlFVRkJMRkZCUVZNc1YwRkJWeXhEUVVGRExFMUJRVTBzVVVGQlVTeERRVUZETzBWQlEyNUVMRk5CUVZNc1ZVRkJRU3hSUVVGVExFdEJRVXNzVjBGQlF6dERRVU42UWl4RFFVRkJPMEZCUlVRc2EwSkJRV3RDTEdGQlFXRXNSMEZCUnp0RlFVTm9ReXhsUVVGbExGTkJRVUU3UTBGRGFFSXNRMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOc1RFUXNTVUZCUVN4UlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFYRkRMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTkJja01zU1VGQlFTeE5RVUZCTEVkQlFVRXNkVUpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeHhRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNaVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGZEJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4blFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2VVSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFdEJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4SlFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzV1VGQlFTeEhRVUZCTEU5QlFVRTdRVUZKUVN4SlFVRkJMRTlCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGxRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdGQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hwUWtGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRzFDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUVhkRUxGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzZVVKQlFVRXNWMEZCUVN4bFFVRkJMRTlCUVVFc2EwTkJRVUVzYVVKQlFVRXNUMEZCUVN4UFFVRkJMRkZCUVVFc1owSkJRVUVzVDBGQlFTeFBRVUZCTEZsQlFVRXNkMEpCUVVFc1dVRkJRU3hEUVVGQkxGZEJRVUVzVjBGQlFTeFhRVUZCTEVkQlFVRXNaMEpCUVVFc1IwRkJRU3hwUWtGQlFTeExRVUZCTEZkQlFVRTdRVUZCUVN4VFFVRkJMSGRDUVVGQkxFZEJRVUVzUlVGQlFTeFhRVUZCTEZOQlFVRXNWMEZCUVN4SlFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeFhRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMRzlDUVVGQkxFZEJRVUVzZDBKQlFVRXNSMEZCUVN3MFFrRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFTeFZRVUZCTEV0QlFVRXNSMEZCUVN4M1FrRkJRU3hEUVVGQkxGZEJRVUVzVDBGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hYUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1NVRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYTBKQlFVRXNUVUZCUVN4RFFVRkJMRk5CUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRk5CUVVFc1NVRkJRU3hIUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNZMEZCUVN4SlFVRkJMRXRCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzVFVGQlFTeEZRVUZCTEVkQlFVRXNSVUZCUVN4SlFVRkJMRmxCUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzUjBGQlFTeE5RVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeE5RVUZCTEZsQlFVRXNUVUZCUVR0QlFVVjZReXhUUVVGVExFOUJRVThzUTBGQlFTeEZRVUZITzBWQlEyaERMRTFCUVUwc1EwRkJReXhIUVVGSExFbEJRVUVzT0VKQlFXTXNSVUZCUXl4RFFVRkRPMFZCUXpGQ0xFMUJRVTBzVlVGQlZTeEhRVUZITEVsQlFVRXNhVUpCUVZVc1JVRkJReXhuUTBGQmEwSXNRMEZCUXp0RlFVTnFSQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZCTERCQ1FVRlZMRVZCUVVNc1EwRkJRenRGUVVNMVFpeE5RVUZOTEVOQlFVTXNjMEpCUVhOQ0xFVkJRVVVzZVVKQlFYbENMRU5CUVVNc1IwRkJSeXhKUVVGQkxHVkJRVkVzUlVGQlF5eExRVUZMTEVOQlFVTTdSVUZETTBVc1RVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlFTeDFRa0ZCVnl4RlFVRkRMR2REUVVGeFFpeERRVUZETzBWQlEycEVMRTFCUVUwc1IwRkJSeXhIUVVGSExFbEJRVUVzWVVGQlRTeEZRVUZETEV0QlFVc3NRMEZCUXp0RlFVVjZRaXhOUVVGTkxGVkJRVlVzUjBGRFpDeEpRVUZCTEhkQ1FVRnJRaXhGUVVGRExFTkJRVU1zUzBGQlN5d3lRa0ZCYzBJc1NVRkRMME1zVFVGQlRTeEpRVU5PTEUxQlFVMHNTMEZCU3l3MlFrRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTzBWQlJTOUNMRzlDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVRkxMRk5CUVZNc1JVRkJRenRGUVVGVkxFZEJRM1JDTEZWQlFWVXNaMEpCUTFRc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNlVUpCUVVFc1EwRkJRU3hQUVVGM1FqdEpRVU4yUWl4UFFVRlBMRVZCUVVVc1EwRkJRU3hMUVVGTkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNaME5CUVhkQ08wVkJRVVVzUTBGRGRrUXNRMEZCUXl4SFFVTkJMRWxCUVVrc1pVRkRVaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4blFrRkJRU3hEUVVGQkxFOUJRV1VzVFVGQlJTeERRVUZETEdWQlEyNUNMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdEpRVUZOTEV0QlFVc3NSVUZCUlR0TlFVRkZMRTlCUVU4c1JVRkJSVHRKUVVGVkxFTkJRVVU3U1VGQlF5eEhRVUZITEVWQlFVVTdSVUZCU1N4blFrRkROVU1zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2FVSkJRVUVzUTBGQlFTeFZRVUZWTzBsQlExUXNVVUZCVVN4RlFVRkZMREJDUVVGUkxFTkJRVU1zV1VGQllUdEpRVU5vUXl4VFFVRlRMRVZCUVVNc01rSkJRVEpDTzBsQlEzSkRMR1ZCUVZrc05rSkJRVFpDTzBsQlEzcERMRk5CUVZNc1JVRkJSU3hEUVVGRExFTkJRVU1zWjBKQlFXZENMRU5CUVVVN1NVRkRMMElzVDBGQlR5eEZRVUZGTEVOQlFVRXNTMEZCVFR0TlFVTmlMRlZCUVZVc1EwRkJRenRSUVVOVUxFdEJRVXNzUlVGQlJTeHBRMEZCYjBJc1EwRkJReXh2UWtGQmIwSTdVVUZEYUVRc1VVRkJVU3hGUVVGRkxIRkRRVUYzUWl4RFFVRkRMRlZCUVZVN1VVRkROME1zVlVGQlZTeEZRVUZGTzFWQlExWXNVVUZCVVN4RlFVRkZPMUZCUTFvN1RVRkRSaXhEUVVGRExFTkJRVU03VFVGRFJpeDVRa0ZCZVVJc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRGFrTTdSVUZCUlN4RFFVTklMRU5CUTBjc1EwRkJReXhGUVVOT0xITkNRVUZ6UWl4cFFrRkRja0lzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2JVSkJRVUVzUTBGQlFTeFBRVUZyUWp0SlFVTnFRaXhoUVVGaExFVkJRVVVzUjBGQlJ5eERRVUZETEU5QlFWRTdTVUZETTBJc1QwRkJUeXhGUVVGRkxFTkJRVUVzUzBGQlRTeDVRa0ZCZVVJc1EwRkJReXhMUVVGTE8wVkJRVVVzUTBGRGFrUXNRMEZGUVN4RFFVRkRPMEZCUlZZN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRiRVZCTEVsQlFVRXNWVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNUVUZCUVN4SFFVRkJMSFZDUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNVMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHMUNRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRV2RHTEZOQlFVRXNlVUpCUVVFc1YwRkJRU3hsUVVGQkxFOUJRVUVzYTBOQlFVRXNhVUpCUVVFc1QwRkJRU3hQUVVGQkxGRkJRVUVzWjBKQlFVRXNUMEZCUVN4UFFVRkJMRmxCUVVFc2QwSkJRVUVzV1VGQlFTeERRVUZCTEZkQlFVRXNWMEZCUVN4WFFVRkJMRWRCUVVFc1owSkJRVUVzUjBGQlFTeHBRa0ZCUVN4TFFVRkJMRmRCUVVFN1FVRkJRU3hUUVVGQkxIZENRVUZCTEVkQlFVRXNSVUZCUVN4WFFVRkJMRk5CUVVFc1YwRkJRU3hKUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4WFFVRkJMRWRCUVVFc1VVRkJRU3hIUVVGQkxHOUNRVUZCTEVkQlFVRXNkMEpCUVVFc1IwRkJRU3cwUWtGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVN4VlFVRkJMRXRCUVVFc1IwRkJRU3gzUWtGQlFTeERRVUZCTEZkQlFVRXNUMEZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEZsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGTkJRVUVzVFVGQlFTeFhRVUZCTEhGQ1FVRkJMRWRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzU1VGQlFTeE5RVUZCTEVOQlFVRXNkMEpCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeFJRVUZCTEVkQlFVRXNhMEpCUVVFc1RVRkJRU3hEUVVGQkxGTkJRVUVzUTBGQlFTeGpRVUZCTEVOQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxGTkJRVUVzU1VGQlFTeEhRVUZCTEhGQ1FVRkJMRWRCUVVFc1RVRkJRU3hEUVVGQkxIZENRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1kwRkJRU3hKUVVGQkxFdEJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNTVUZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVOQlFVRXNUVUZCUVN4RlFVRkJMRWRCUVVFc1JVRkJRU3hKUVVGQkxGbEJRVUVzVFVGQlFTeERRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNSMEZCUVN4TlFVRkJMRXRCUVVFc1NVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4TlFVRkJMRmxCUVVFc1RVRkJRVHRCUVVGQkxGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzWjBKQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1JVRkJRU3hMUVVGQkxFbEJRVUVzUjBGQlFTeEhRVUZCTEdOQlFVRXNRMEZCUVN4SFFVRkJMRTlCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzU1VGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxFbEJRVUVzUzBGQlFTeEZRVUZCTEV0QlFVRXNSVUZCUVN4VlFVRkJMRkZCUVVFc1dVRkJRU3hSUVVGQkxGRkJRVUVzYjBKQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hMUVVGQkxGZEJRVUVzUjBGQlFUdEJRVUZCTEZOQlFVRXNaVUZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3hIUVVGQkxGbEJRVUVzUTBGQlFTeEhRVUZCTERKQ1FVRkJMRWRCUVVFc1owSkJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4SFFVRkJPMEZCUVVFc1UwRkJRU3hoUVVGQkxFdEJRVUVzUlVGQlFTeEpRVUZCTEdWQlFVRXNTMEZCUVN4cFFrRkJRU3hMUVVGQkxHdENRVUZCTEV0QlFVRXNUVUZCUVN4SlFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFMUJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTVUZCUVN4TFFVRkJMRk5CUVVFc1VVRkJRU3hIUVVGQkxFZEJRVUVzU1VGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4TFFVRkJMRVZCUVVFc1NVRkJRU3d5UWtGQlFTeEhRVUZCTEhOQ1FVRkJMRWRCUVVFc1dVRkJRU3hUUVVGQkxEUkVRVUZCTEVsQlFVRXNaMEpCUVVFc1RVRkJRU3hIUVVGQkxFMUJRVUVzUlVGQlFTeExRVUZCTzBGQlJXcEZMRTFCUVUwc2JVSkJRVzFDTEZOQlFWTXNaMEpCUVZNc1EwRkJRenRGUVVGQkxGbEJRVUVzUjBGQlFTeEpRVUZCTzBsQlFVRXNVMEZCUVN4SlFVRkJPMGxCUVVFc1pVRkJRU3c0UWtGcFEyeERMRXRCUVVzc1NVRkJTenROUVVNdlFpeE5RVUZOTzFGQlFVVTdUVUZCVHl4RFFVRkRMRWRCUVVjc1MwRkJTenROUVVONFFqdE5RVU5CTEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVFc2NVSkJRVmNzUlVGQlF5eEpRVUZKTEVOQlFVTTdUVUZGYmtNc1NVRkRSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNTVUZEYWtJc1RVRkJUU3hMUVVGTExGTkJRVk1zU1VGRGNFSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUTNSRE8xRkJRVUVzU1VGQlFTeHhRa0ZCUVN4RlFVRkJMRmRCUVVFN1VVRkRRU3hEUVVGQkxIRkNRVUZCTEVsQlFVRXNWMEZCUVN4UFFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRExHTkJRV01zWTBGQlFTeHhRa0ZCUVN4MVFrRkJla0lzY1VKQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1YwRkJRU3hGUVVFMFFpeExRVUZMTEVOQlFVTTdUVUZEY0VNN1NVRkRSaXhEUVVGRE8wVkJRVUU3UlVGb1EwUXNZVUZCWVN4RFFVRkJMRVZCUVVjN1NVRkRaQ3hOUVVGTk8wMUJRVVU3U1VGQlR5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzN1NVRkROMElzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlR0TlFVTllMRTlCUVU4c1NVRkJTVHRKUVVOaU8wbEJSVUVzVFVGQlRTeFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVkxFbEJRVWtzUTBGQlF5eERRVUZETzBsQlJUbERMRzlDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0TlFVTkZMRk5CUVZNc1JVRkJReXhoUVVGaE8wMUJRM1pDTEVkQlFVY3NSVUZCUXl4dlFrRkJiMEk3VFVGRGVFSXNaVUZCV1N4aFFVRmhPMDFCUTNwQ0xFdEJRVXNzUlVGQlJUdEpRVUZYTEVkQlJXcENMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGRFZDeERRVUZETzBWQlJWWTdSVUZuUWtFc2FVSkJRV2xDTEVOQlFVRXNSVUZCUnp0SlFVTnNRaXhKUVVGSkxFbEJRVWtzU1VGQlNTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZPMDFCUTNwQ0xGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF6dE5RVU5xUlR0TlFVTkJMRTFCUVUwc1UwRkJVeXhIUVVGSExFbEJRVUVzY1VKQlFWY3NSVUZCUXl4SlFVRkpMRU5CUVVNN1RVRkRia01zU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4VFFVRlRPMGxCUXpWQ08wVkJRMFk3UlVGRlFTeHZRa0ZCYjBJc1EwRkJRU3hGUVVGSE8wbEJRM0pDTEVsQlFVa3NTVUZCU1N4SlFVRkpMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVU3VFVGRGVrSXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRPMGxCUTNSRk8wVkJRMFk3UlVGRlFTeE5RVUZOTEVOQlFVRXNSVUZCUnp0SlFVTlFMRTFCUVUwN1RVRkJSU3hyUWtGQmEwSXNSMEZCUnl4RlFVRkZPMDFCUVVVN1NVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVczdTVUZEY2tRc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRWxCUVVrc1QwRkJUenRKUVVONlF5eE5RVUZOTzAxQlFVVTdTVUZCYVVJc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTzBsQlEzWkRMRTFCUVUwc1RVRkJUU3hIUVVGSExGRkJRVkVzU1VGQlNTeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTTdTVUZGTjBRc1RVRkJUU3hUUVVGVExFZEJRVWM3VFVGRGFFSXNVVUZCVVN4RlFVRkZMRTlCUVU4N1RVRkRha0lzUjBGQlJ5eExRVUZMTzAxQlExSTdTVUZEUml4RFFVRkRPMGxCUlVRc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMDFCUTBVc1MwRkJTeXhGUVVGRkxGTkJRVlU3VFVGRGFrSXNVMEZCVXl4RlFVRkhMSGxDUVVGM1FpeHJRa0ZCYlVJc1JVRkJSVHROUVVONlJDeGxRVUZoTzBsQlFXMUNMR2RDUVVWb1F5eE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1owSkJRMGs3UVVGRFdqdEJRVU5CTEc5RFFVRnZReXhMUVVGTk8wRkJRekZETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2IwTkJRVzlETEV0QlFVMDdRVUZETVVNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHZRMEZCYjBNc1MwRkJUVHRCUVVNeFF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRzlEUVVGdlF5eExRVUZOTzBGQlF6RkRPMEZCUTBFN1FVRkRRU3hUUVVObExFTkJRVU1zUlVGRFVDeG5Ra0ZCWjBJc1owSkJRMllzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2JVSkJRVUVzUTBGQlFTeFBRVUYxUWp0TlFVTjBRaXhUUVVGVExFVkJRVU1zYzBKQlFYTkNPMDFCUTJoRExHTkJRV01zUlVGQlF5eGhRVUZoTzAxQlF6VkNMSE5DUVVGelFpeEZRVUZGTEZGQlFWRXNRMEZCUXl4TFFVRkxMRVZCUVVVc1JVRkJSU3hEUVVGRk8wMUJRelZETEhOQ1FVRnpRaXhGUVVGRkxGRkJRVkVzUTBGQlF5eExRVUZMTEVWQlFVVXNSVUZCUlR0SlFVRkZMRWRCUlRORExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZEUnl4RFFVRkRMRWRCUlRGQ0xFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZGYkVJc1EwRkJRenRGUVVWV08wRkJRMFk3UVVGQlF5eFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRzFDUVVGQk8wRkJRVUVzWlVGQlFTeERRWFJJYjBJc2JVSkJRVzFDTEdWQlEyNUNPMFZCUTJwQ0xFMUJRVTBzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVk8wVkJRMnBETEZWQlFWVXNSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTA3UlVGRE5VSXNVVUZCVVN4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVTdSVUZEYmtNc1kwRkJZeXhGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1R0RlFVTTVRaXhyUWtGQmEwSXNSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTA3UlVGRGNFTXNUVUZCVFN4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRUdEZRVU40UWl4TFFVRkxMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlR0RlFVTnNReXhuUWtGQlowSXNSVUZCUlN4clFrRkJVeXhEUVVGRExFbEJRVWs3UlVGRGFFTXNTMEZCU3l4RlFVRkZMR3RDUVVGVExFTkJRVU03UVVGRGJrSXNRMEZCUXpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMmhDU0N4SlFVRkJMSGxDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hoUVVGQkxFZEJRVUVzVDBGQlFUdEJRVUVyUXl4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEUkM5RExFbEJRVUVzVFVGQlFTeEhRVUZCTEhWQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR3RDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNZVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkJaMFFzVTBGQlFTeDVRa0ZCUVN4WFFVRkJMR1ZCUVVFc1QwRkJRU3hyUTBGQlFTeHBRa0ZCUVN4UFFVRkJMRTlCUVVFc1VVRkJRU3huUWtGQlFTeFBRVUZCTEU5QlFVRXNXVUZCUVN4M1FrRkJRU3haUVVGQkxFTkJRVUVzVjBGQlFTeFhRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEV0QlFVRXNWMEZCUVR0QlFVRkJMRk5CUVVFc2QwSkJRVUVzUjBGQlFTeEZRVUZCTEZkQlFVRXNVMEZCUVN4WFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEZkQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2IwSkJRVUVzUjBGQlFTeDNRa0ZCUVN4SFFVRkJMRFJDUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTEZWQlFVRXNTMEZCUVN4SFFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzV1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxGZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHJRa0ZCUVN4TlFVRkJMRU5CUVVFc1UwRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1UwRkJRU3hKUVVGQkxFZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4alFVRkJMRWxCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRWxCUVVFc1dVRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEUxQlFVRXNXVUZCUVN4TlFVRkJPMEZCUVVFc1UwRkJRU3hUUVVGQkxFbEJRVUVzVVVGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4TlFVRkJMRWRCUVVFc1RVRkJRU3hEUVVGQkxFMUJRVUVzUTBGQlFTeEpRVUZCTEdWQlFVRXNUVUZCUVN4aFFVRkJMRU5CUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVN4RFFVRkJMRlZCUVVFc1RVRkJRU3hIUVVGQkxGTkJRVUVzUTBGQlFTeERRVUZCTEZsQlFVRXNSMEZCUVN4SlFVRkJMRTFCUVVFc1VVRkJRU3hOUVVGQkxFTkJRVUVzVTBGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1RVRkJRU3hGUVVGQkxFZEJRVUVzUzBGQlFTeE5RVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRTFCUVVFc1EwRkJRU3hIUVVGQkxHZENRVUZCTEUxQlFVRXNXVUZCUVN4UlFVRkJMRU5CUVVFc1MwRkJRU3hQUVVGQkxGTkJRVUU3UVVGRmFFUXNVMEZCVXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhGUVVGRk8wVkJRek5DTEUxQlFVMDdTVUZCUlR0RlFVRlJMRU5CUVVNc1IwRkJSeXhQUVVGUE8wVkJRek5DTEUxQlFVMHNUMEZCVHl4SFFVRkhMRzlEUVVGcFFpeERRVUZETEU5QlFVOHNRMEZCUXp0RlFVTXhReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTzBsQlExb3NUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkRXaXhIUVVGRkxFOUJRVkVzYlVWQlEySXNRMEZCUXp0RlFVTklPMFZCUTBFc1QwRkJUeXhQUVVGUE8wRkJRMmhDTzBGQlJVRXNUVUZCVFN4M1FrRkJkMElzUjBGQlJ5eERRVUZETzBWQlFVVTdRVUZCVXl4RFFVRkRMRXRCUVVzN1JVRkRha1FzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlR0SlFVTmlPMGxCUTBFc1QwRkJUeXhKUVVGSk8wVkJRMklzUTBGQlF5eE5RVUZOTEVsQlFVa3NUMEZCVHl4UlFVRlJMRXRCUVVzc1VVRkJVU3hGUVVGRk8wbEJRM1pETzBsQlEwRXNUMEZCVHl4UlFVRlJPMFZCUTJwQ0xFTkJRVU1zVFVGQlRTeEpRVU5NTEZGQlFWRXNTVUZEVWl4UFFVRlBMRkZCUVZFc1MwRkJTeXhSUVVGUkxFbEJRelZDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGRGVFSTdTVUZEUVR0SlFVTkJMRTFCUVUwc1QwRkJUeXhIUVVGSExGVkJRVlVzUTBGQlF5eFJRVUZSTEVOQlFVTTdTVUZEY0VNc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1QwRkJUeXhGUVVGTExGRkJRVkVzUTBGQlF5eExRVUZMTEVWQlEzaENMRTlCUVU4c1VVRkJVU3hEUVVGRExGRkJRVkVzUzBGQlN5eFJRVUZSTEdkQ1FVTndReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4M1FrRkJkMEk3VFVGQlF5eFJRVUZSTEVWQlFVVXNVVUZCVVN4RFFVRkRPMGxCUVZNc1EwRkJSU3hEUVVGRExFZEJSWHBFTEZGQlFWRXNZVUZCVWl4UlFVRlJMSFZDUVVGU0xGRkJRVkVzUTBGQlJTeFJRVVZNTEVOQlFVTTdSVUZGWkRzN1JVRkZRVHRGUVVOQkxHOUNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGQkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNVVUZCUVN4UlFVTkhMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eFhRVUZYTEVWQlFVVXNTMEZCU3l4TFFVRkxPMGxCUTNaRExFbEJRVWtzUTBGQlFTeExRVUZMTEdGQlFVd3NTMEZCU3l4MVFrRkJUQ3hMUVVGTExFTkJRVVVzU1VGQlNTeE5RVUZMTEVsQlFVa3NSVUZCUlR0TlFVTjRRaXhQUVVGUExGZEJRVmM3U1VGRGNFSTdTVUZEUVN4SlFVRkpMRTlCUVU4c1MwRkJTeXhMUVVGTExGRkJRVkVzUlVGQlJUdE5RVU0zUWp0TlFVTkJMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzBsQlEzcENMRU5CUVVNc1RVRkJUVHROUVVOTU8wMUJRMEU3VFVGRFFUdE5RVU5CTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhGUVVGRk8xRkJRMlFzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZEWWl3eVIwRkRSaXhEUVVGRE8wMUJRMGc3VFVGRFFTeEpRVUZKTEZGQlFVOHNTMEZCU3l4aFFVRk1MRXRCUVVzc2RVSkJRVXdzUzBGQlN5eERRVUZGTEZGQlFWRXNUVUZCU3l4UlFVRlJMRVZCUVVVN1VVRkRka003VVVGRFFUdFJRVU5CTEZkQlFWY3NRMEZCUXl4SlFVRkpMR1ZCUTJRc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNkMEpCUVhkQ08xVkJRVU1zVVVGQlVTeEZRVUZGTEV0QlFVMDdWVUZCUXl4SFFVRkhMRVZCUVVVc1MwRkJTeXhEUVVGRE8xRkJRVWtzUTBGQlJTeERRVU01UkN4RFFVRkRPMDFCUTBnc1EwRkJReXhOUVVGTk8xRkJRMHc3VVVGRFFTeE5RVUZOTEU5QlFVOHNSMEZCUnl4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRE8xRkJRMnBETEZkQlFWY3NRMEZCUXl4SlFVRkpMR1ZCUTJRc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNUMEZCVHl4RlFVRkJMRkZCUVVFN1ZVRkJReXhIUVVGSExFVkJRVVVzUzBGQlN5eERRVUZETzFGQlFVa3NSMEZCU3l4TFFVRkxMRU5CUVVNc1MwRkJTeXhIUVVOeVF5eExRVUZMTEdGQlFVd3NTMEZCU3l4MVFrRkJUQ3hMUVVGTExFTkJRVVVzVVVGRFJDeERRVU5ZTEVOQlFVTTdUVUZEU0R0SlFVTkdPMGxCUTBFc1QwRkJUeXhYUVVGWE8wVkJRM0JDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUTB3c1EwRkJRenRCUVVWUUxFTkJRVU03UVVGRlJDeDNRa0ZCZDBJc1EwRkJReXhUUVVGVExFZEJRVWM3UlVGRGJrTXNVVUZCVVN4RlFVRkZPMEZCUTFvc1EwRkJRenRCUVVGRExFbEJRVUVzVVVGQlFTeG5Ra0ZGWVN4SlFVRkJMRmRCUVVrc1JVRkJReXgzUWtGQmQwSXNSVUZCUlN4RFFVRkRMRk5CUVZNc1JVRkJSU3hUUVVGVExFdEJRVXM3UlVGRGRFVXNUMEZCVHl4SlFVRkJMR1ZCUVU4c1JVRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeEZRVUZGTEZOQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVNN1FVRkRlRVFzUTBGQlF5eERRVUZETzBGQlFVRXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hSUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRM2hHUml4SlFVRkJMRTlCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRXRCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMSGRDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hSUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hYUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hKUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3h2UWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVTBGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzTUVKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZGQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZGQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQkswTXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlJYaERMRTFCUVUwc2FVSkJRV2xDTEVkQlFVYzdSVUZETDBJc1EwRkJReXhGUVVGRkxFZEJRVWM3UlVGRFRpeERRVUZETEVWQlFVVXNSMEZCUnp0RlFVTk9MRU5CUVVNc1JVRkJSU3hIUVVGSE8wVkJRMDRzUTBGQlF5eEZRVUZGTEVkQlFVYzdSVUZEVGl4SFFVRkhMRVZCUVVVc1MwRkJTenRGUVVOV0xFbEJRVWtzUlVGQlJTeE5RVUZOTzBWQlExb3NSMEZCUnl4RlFVRklMRmxCUVVjN1JVRkRTQ3hOUVVGTkxFVkJRVTRzWlVGQlRUdEZRVU5PTEVsQlFVa3NSVUZCU2l4aFFVRkpPMFZCUTBvc2VVSkJRWGxDTEVWQlFYcENMR3REUVVGNVFqdEZRVU42UWl4alFVRmpMRVZCUVdRc2RVSkJRV003UlVGRFpDeHRRa0ZCYlVJc1JVRkJia0lzTkVKQlFXMUNPMFZCUTI1Q0xHTkJRV01zUlVGQlpDeDFRa0ZCWXp0RlFVTmtMRTlCUVU4c1JVRkJVQ3huUWtGQlR6dEZRVU5RTEZGQlFWRXNSVUZCVWl4cFFrRkJVVHRGUVVOU0xGTkJRVk1zUlVGQlZDeHJRa0ZCVXp0RlFVTlVMRTlCUVU4c1JVRkJVQ3huUWtGQlR6dEZRVU5RTEhWQ1FVRjFRaXhGUVVGMlFpeG5RMEZCZFVJN1JVRkRka0lzVlVGQlZTeEZRVUZXTEcxQ1FVRlZPMFZCUTFZc1QwRkJUeXhGUVVGUU8wRkJRMFlzUTBGQlF6dEJRVUZETEU5QlFVRXNRMEZCUVN4cFFrRkJRU3hIUVVGQkxHbENRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzQkRSaXhKUVVGQkxGVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJiVU1zVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJSVFZDTEUxQlFVMHNXVUZCV1N4SFFVRkhPMFZCUXpGQ0xFdEJRVXNzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwN1JVRkRka0lzVDBGQlR5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRGUVVONlFpeEhRVUZITEVWQlFVVXNhMEpCUVZNc1EwRkJRenRCUVVOcVFpeERRVUZETzBGQlFVTXNUMEZCUVN4RFFVRkJMRmxCUVVFc1IwRkJRU3haUVVGQk8wRkJSVXNzVFVGQlRTeGhRVUZoTEVkQlFVY3NhMEpCUVZNc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGREwwTXNhMEpCUVZNc1EwRkJReXhOUVVGTkxFVkJRMmhDTEd0Q1FVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExGbEJRVmtzUTBGQlF5eEZRVU0zUWl4clFrRkJVeXhEUVVGRExFOUJRVThzUTBGRFppeHJRa0ZCVXl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExHdENRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmxCUVZrc1EwRkJReXhGUVVGRkxHdENRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUTNaRkxFTkJRVU1zUTBGRFJpeERRVUZETzBGQlFVTXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1IwRkJRU3hoUVVGQk8wRkJSVWdzV1VGQldTeERRVUZETEZGQlFWRXNSMEZCUnl4aFFVRmhPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRhRUp5UXl4SlFVRkJMRzlDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUVdsRUxGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOQmFrUXNTVUZCUVN4TlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4bFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzZVVKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdGQlFVRXNSMEZCUVN4UFFVRkJPMEZCUVRKRkxGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRCUVVVelJUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEyVXNVMEZCVXl4dFFrRkJiVUlzUTBGQlF6dEZRVUZGTEdOQlFXTTdSVUZCUlR0QlFVRlZMRU5CUVVNc1JVRkJSVHRGUVVONlJTeE5RVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkJMRGhDUVVGakxFVkJRVU1zUTBGQlF6dEZRVVV4UWl4UFFVRlBMRU5CUVVNc1EwRkRUaXhqUVVGakxFVkJRMlFzVTBGQlV5eGhRVUZVTEZOQlFWTXNkVUpCUVZRc1UwRkJVeXhEUVVGRkxFZEJRVWNzUTBGQlJTeFJRVUZSTEVsQlFVczdTVUZETTBJc1NVRkRSU3hQUVVGUExGRkJRVkVzUzBGQlN5eFJRVUZSTEVsQlF6VkNMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZEZUVJc1VVRkJVU3hEUVVGRExFOUJRVThzUlVGRGFFSTdUVUZCUVN4SlFVRkJMR3RDUVVGQkxFVkJRVUVzYlVKQlFVRXNSVUZCUVN4dFFrRkJRU3hGUVVGQkxHOUNRVUZCTzAxQlEwRXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFVkJRVVU3VVVGRGFrSXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkRXanRCUVVOaUxHOURRVUZ2UXl4UlFVRlJMRU5CUVVNc1QwRkJVU3d3UWtGQmVVSXNZMEZCWlN4MVFrRkRia1lzUTBGQlF6dE5RVU5JTzAxQlEwRXNTVUZEUlN4UlFVRlJMRU5CUVVNc1VVRkJVU3hKUVVOcVFpeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGRGFFTXNVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVU0xUWp0UlFVTkJMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRMklzTWtaQlEwWXNRMEZCUXp0TlFVTklMRU5CUVVNc1RVRkJUU3hKUVVOS0xFVkJRVUVzYTBKQlFVRXNSMEZCUVN4UlFVRlJMRU5CUVVNc1VVRkJVU3hqUVVGQkxHdENRVUZCTEhkQ1FVRkJMRzFDUVVGQkxFZEJRV3BDTEd0Q1FVRkJMRU5CUVc5Q0xFTkJRVU1zUTBGQlF5eGpRVUZCTEcxQ1FVRkJMSFZDUVVGMFFpeHRRa0ZCUVN4RFFVRjNRaXhSUVVGUkxFMUJRVXNzVTBGQlV5eEpRVU0zUXl4UFFVRlBMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNVVUZCVVN4TFFVRkxMRkZCUVZFc1NVRkRiRVFzUlVGQlFTeHRRa0ZCUVN4SFFVRkJMRkZCUVZFc1EwRkJReXhSUVVGUkxHTkJRVUVzYlVKQlFVRXNkMEpCUVVFc2IwSkJRVUVzUjBGQmFrSXNiVUpCUVVFc1EwRkJiMElzUTBGQlF5eERRVUZETEdOQlFVRXNiMEpCUVVFc2RVSkJRWFJDTEc5Q1FVRkJMRU5CUVhkQ0xGRkJRVkVzVFVGQlN5eFRRVUZUTEVsQlF6ZERMRTlCUVU4c1VVRkJVU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4UlFVRlJMRXRCUVVzc1VVRkJVeXhGUVVOd1JEdFJRVU5CTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUTJJc05rVkJRMFlzUTBGQlF6dE5RVU5JTzAxQlEwRXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNlVUpCUVVFc1EwRkJRU3hQUVVGM1FqdFJRVU4yUWl4SFFVRkhMRVZCUVVjc1IwRkJSU3hqUVVGbExFbEJRVWNzVVVGQlVTeERRVUZETEVkQlFVa3NSVUZCUlR0UlFVTjZReXhSUVVGUkxFVkJRVVU3VFVGQlV5eERRVU53UWl4RFFVRkRPMGxCUlU0N1NVRkRRU3hQUVVGUExGRkJRVkU3UlVGRGFrSXNRMEZCUXl4RFFVTklMRU5CUVVNN1FVRkRTRHRCUVVWQkxHMUNRVUZ0UWl4RFFVRkRMRk5CUVZNc1IwRkJSenRGUVVNNVFqdEJRVU5HTzBGQlEwRTdSVUZEUlN4alFVRmpMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlR0RlFVTXpRenRCUVVOR08wRkJRMEU3UlVGRFJTeFRRVUZUTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhQUVVGUExFTkJRekZDTEd0Q1FVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRMnhDTEd0Q1FVRlRMRU5CUVVNc1RVRkJUU3hGUVVOb1FpeHJRa0ZCVXl4RFFVRkRMRTFCUVUwc1JVRkRhRUlzYTBKQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNc01FSkJRVmtzUTBGQlF5eERRVU01UWl4RFFVTklPMEZCUTBZc1EwRkJRenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzaEdSQ3hKUVVGQkxFMUJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHRkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJNRVFzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFJERkVMRWxCUVVFc1lVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVRnZSQ3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRRWEJFTEVsQlFVRXNUVUZCUVN4SFFVRkJMSFZDUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVUZ0UXl4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMSGxDUVVGQkxGZEJRVUVzWlVGQlFTeFBRVUZCTEd0RFFVRkJMR2xDUVVGQkxFOUJRVUVzVDBGQlFTeFJRVUZCTEdkQ1FVRkJMRTlCUVVFc1QwRkJRU3haUVVGQkxIZENRVUZCTEZsQlFVRXNRMEZCUVN4WFFVRkJMRmRCUVVFc1YwRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNhVUpCUVVFc1MwRkJRU3hYUVVGQk8wRkJRVUVzVTBGQlFTeDNRa0ZCUVN4SFFVRkJMRVZCUVVFc1YwRkJRU3hUUVVGQkxGZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1YwRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHZRa0ZCUVN4SFFVRkJMSGRDUVVGQkxFZEJRVUVzTkVKQlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFc1ZVRkJRU3hMUVVGQkxFZEJRVUVzZDBKQlFVRXNRMEZCUVN4WFFVRkJMRTlCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4WlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFRRVUZCTEUxQlFVRXNWMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMR3RDUVVGQkxFMUJRVUVzUTBGQlFTeFRRVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeFRRVUZCTEVsQlFVRXNSMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxHTkJRVUVzU1VGQlFTeExRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRTFCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzU1VGQlFTeFpRVUZCTEUxQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRWRCUVVFc1RVRkJRU3hMUVVGQkxFbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1RVRkJRU3haUVVGQkxFMUJRVUU3UVVGQlFTeFRRVUZCTEdkQ1FVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzUzBGQlFTeEpRVUZCTEVkQlFVRXNSMEZCUVN4alFVRkJMRU5CUVVFc1IwRkJRU3hQUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeEpRVUZCTEV0QlFVRXNSVUZCUVN4TFFVRkJMRVZCUVVFc1ZVRkJRU3hSUVVGQkxGbEJRVUVzVVVGQlFTeFJRVUZCTEc5Q1FVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUzBGQlFTeFhRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMR1ZCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzUjBGQlFTeFpRVUZCTEVOQlFVRXNSMEZCUVN3eVFrRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzWVVGQlFTeExRVUZCTEVWQlFVRXNTVUZCUVN4bFFVRkJMRXRCUVVFc2FVSkJRVUVzUzBGQlFTeHJRa0ZCUVN4TFFVRkJMRTFCUVVFc1NVRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeE5RVUZCTEVOQlFVRXNWMEZCUVN4UFFVRkJMRWxCUVVFc1MwRkJRU3hUUVVGQkxGRkJRVUVzUjBGQlFTeEhRVUZCTEVsQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQkxFbEJRVUVzTWtKQlFVRXNSMEZCUVN4elFrRkJRU3hIUVVGQkxGbEJRVUVzVTBGQlFTdzBSRUZCUVN4SlFVRkJMR2RDUVVGQkxFMUJRVUVzUjBGQlFTeE5RVUZCTEVWQlFVRXNTMEZCUVR0QlFVVndRaXhOUVVGTkxGbEJRVmtzVTBGQlV5eHZRa0ZCWVN4RFFVRkRPMFZCVFhSRUxFMUJRVTBzUTBGQlFTeEZRVUZITzBsQlExQXNUVUZCVFR0TlFVRkZMRXRCUVVzN1RVRkJSVHRKUVVGWkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3p0SlFVVjZReXh2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1RVRkJTeXhUUVVGVExFVkJRVU03U1VGQlpTeEhRVU16UWl4TFFVRkxMR2RDUVVGSExFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0TlFVRkxMRk5CUVZNc1JVRkJRenRKUVVGelFpeEhRVUZGTEV0QlFWY3NRMEZCUXl4SFFVRkhMRWxCUVVrc1JVRkRiRVVzVjBGQlZ5eHBRa0ZEVml4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlN5eFRRVUZUTEVWQlFVTTdTVUZCTkVJc1IwRkJSU3hYUVVGcFFpeERRVVUzUkN4RFFVRkRPMFZCUlZZN1FVRkRSanRCUVVGRExFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNXVUZCUVR0QlFVRkJMR1ZCUVVFc1EwRnNRbTlDTEZsQlFWa3NaVUZEV2p0RlFVTnFRaXhMUVVGTExFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TlFVRk5PMFZCUTNaQ0xGZEJRVmNzUlVGQlJTeHJRa0ZCVXl4RFFVRkRPMEZCUTNwQ0xFTkJRVU03T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFVFZ3NTVUZCUVN4TlFVRkJMRWRCUVVFc2RVSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4WFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFYRkRMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVRkJMRk5CUVVFc2VVSkJRVUVzVjBGQlFTeGxRVUZCTEU5QlFVRXNhME5CUVVFc2FVSkJRVUVzVDBGQlFTeFBRVUZCTEZGQlFVRXNaMEpCUVVFc1QwRkJRU3hQUVVGQkxGbEJRVUVzZDBKQlFVRXNXVUZCUVN4RFFVRkJMRmRCUVVFc1YwRkJRU3hYUVVGQkxFZEJRVUVzWjBKQlFVRXNSMEZCUVN4cFFrRkJRU3hMUVVGQkxGZEJRVUU3UVVGQlFTeFRRVUZCTEhkQ1FVRkJMRWRCUVVFc1JVRkJRU3hYUVVGQkxGTkJRVUVzVjBGQlFTeEpRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hYUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEc5Q1FVRkJMRWRCUVVFc2QwSkJRVUVzUjBGQlFTdzBRa0ZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRU3hWUVVGQkxFdEJRVUVzUjBGQlFTeDNRa0ZCUVN4RFFVRkJMRmRCUVVFc1QwRkJRU3hMUVVGQkxFbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRmxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEZOQlFVRXNUVUZCUVN4WFFVRkJMSEZDUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNTVUZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2EwSkJRVUVzVFVGQlFTeERRVUZCTEZOQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEZOQlFVRXNTVUZCUVN4SFFVRkJMSEZDUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzWTBGQlFTeEpRVUZCTEV0QlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1RVRkJRU3hGUVVGQkxFZEJRVUVzUlVGQlFTeEpRVUZCTEZsQlFVRXNUVUZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFRRVUZCTEUxQlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc1IwRkJRU3hOUVVGQkxFdEJRVUVzU1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hOUVVGQkxGbEJRVUVzVFVGQlFUdEJRVUZCTEZOQlFVRXNaMEpCUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzUlVGQlFTeExRVUZCTEVsQlFVRXNSMEZCUVN4SFFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQkxFOUJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNTVUZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEVsQlFVRXNTMEZCUVN4RlFVRkJMRXRCUVVFc1JVRkJRU3hWUVVGQkxGRkJRVUVzV1VGQlFTeFJRVUZCTEZGQlFVRXNiMEpCUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeExRVUZCTEZkQlFVRXNSMEZCUVR0QlFVRkJMRk5CUVVFc1pVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeEhRVUZCTEZsQlFVRXNRMEZCUVN4SFFVRkJMREpDUVVGQkxFZEJRVUVzWjBKQlFVRXNSMEZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeGhRVUZCTEV0QlFVRXNSVUZCUVN4SlFVRkJMR1ZCUVVFc1MwRkJRU3hwUWtGQlFTeExRVUZCTEd0Q1FVRkJMRXRCUVVFc1RVRkJRU3hKUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEUxQlFVRXNRMEZCUVN4WFFVRkJMRTlCUVVFc1NVRkJRU3hMUVVGQkxGTkJRVUVzVVVGQlFTeEhRVUZCTEVkQlFVRXNTVUZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hMUVVGQkxFVkJRVUVzU1VGQlFTd3lRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFZEJRVUVzV1VGQlFTeFRRVUZCTERSRVFVRkJMRWxCUVVFc1owSkJRVUVzVFVGQlFTeEhRVUZCTEUxQlFVRXNSVUZCUVN4TFFVRkJPMEZCUlhSQ0xFMUJRVTBzUzBGQlN5eFRRVUZUTEc5Q1FVRmhMRU5CUVVNN1JVRjVRaTlETEUxQlFVMHNRMEZCUVN4RlFVRkhPMGxCUTFBc1RVRkJUVHROUVVOS0xGRkJRVkU3VFVGRFVpeFZRVUZWTzAxQlExWXNUMEZCVHp0TlFVTlFMRkZCUVZFN1RVRkRVaXhWUVVGVk8wMUJRMVlzVlVGQlZUdE5RVU5XTEdOQlFXTTdUVUZEWkN4UlFVRlJPMDFCUTFJc1ZVRkJWVHROUVVOV0xGVkJRVlU3VFVGRFZpeFpRVUZaTzAxQlExb3NZMEZCWXp0TlFVTmtPMGxCUTBZc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTzBsQlJXUXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlFVc3NVMEZCVXl4RlFVRkZMRWxCUVVFc2JVSkJRVlVzUlVGQlF5eHBRa0ZCYVVJc1JVRkJSU3hqUVVGak8wbEJRVVVzUjBGRE0wUXNWVUZCVlN4cFFrRkRWQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdUVUZCU3l4VFFVRlRMRVZCUVVNN1NVRkJlVUlzWjBKQlEzUkRMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZMTEZOQlFWTXNSVUZCUXp0SlFVRTRRaXhIUVVGRkxGVkJRV2RDTEVOQlFVTXNaVUZEYUVVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlEwVXNVMEZCVXl4RlFVRkRMQ3RDUVVFclFqdE5RVU42UXl4bFFVRlpMRzlDUVVGdlFqdE5RVU5vUXl4UFFVRlBMRVZCUVVVN1NVRkJVU3hEUVVOc1FpeERRVU5GTEVOQlEwNHNaVUZEUkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlN5eFRRVUZUTEVWQlFVVXNTVUZCUVN4dFFrRkJWU3hGUVVGRExEQkNRVUV3UWl4RlFVRkZMRmxCUVZrN1NVRkJSU3hIUVVOc1JTeFJRVU5GTEVOQlFVTXNSVUZEVEN4VlFVRlZMRWRCUVVjc1NVRkJTU3huUWtGRGFFSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFYbENMRWRCUTNKRExGRkJRVkVzYVVKQlExQXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVDBGQlFTeERRVUZCTEU5QlFVMDdUVUZEVEN4SlFVRkpMRVZCUVVVc1ZVRkJWenROUVVOcVFpeFBRVUZQTEVWQlFVVXNVVUZCVXp0TlFVTnNRaXhUUVVGVExFVkJRVU03U1VGQlowTXNSMEZGZWtNc1ZVRkRTeXhEUVVOVUxHVkJRMFFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1QwRkJRU3hEUVVGQkxFOUJRVTA3VFVGRFRDeEpRVUZKTEVWQlFVVXNWVUZCVnp0TlFVTnFRaXhQUVVGUExFVkJRVVVzVVVGQlV6dE5RVU5zUWl4UlFVRlJMRVZCUVVVc1kwRkJaVHROUVVONlFpeFRRVUZUTEVWQlFVTTdTVUZCWjBNc1IwRkZla01zVlVGRFN5eERRVU5NTEVOQlJVb3NRMEZCUXp0RlFVVldPMEZCUTBZN1FVRkJReXhQUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEV0QlFVRTdRVUZCUVN4bFFVRkJMRU5CYWtadlFpeExRVUZMTEdWQlEwdzdSVUZEYWtJc1VVRkJVU3hGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1R0RlFVTjRRaXhaUVVGWkxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TlFVRk5PMFZCUXpsQ0xHTkJRV01zUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwN1JVRkRhRU03UlVGRFFTeFZRVUZWTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTk8wVkJRelZDTEU5QlFVOHNSVUZCUlN4clFrRkJVeXhEUVVGRExFbEJRVWs3UlVGRGRrSTdSVUZEUVN4UlFVRlJMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTzBWQlEzaENMRlZCUVZVc1JVRkJSU3hyUWtGQlV5eERRVUZETEUxQlFVMDdSVUZETlVJc1ZVRkJWU3hGUVVGRkxHdENRVUZUTEVOQlFVTXNUVUZCVFR0RlFVTTFRaXhqUVVGakxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpPMFZCUXpsQ0xGVkJRVlVzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrN1JVRkRNVUk3UlVGRFFTeFJRVUZSTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSk8wVkJRM2hDTEZWQlFWVXNSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTA3UlVGRE5VSXNWVUZCVlN4RlFVRkZMR3RDUVVGVExFTkJRVU03UVVGRGVFSXNRMEZCUXp0QlFVRkJMR1ZCUVVFc1EwRnNRbXRDTEV0QlFVc3NhMEpCYjBKR08wVkJRM0JDTEZWQlFWVXNSVUZCUlN4VFFVRlRPMFZCUTNKQ0xGVkJRVlVzUlVGQlJUdEJRVU5rTEVOQlFVTTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZETlVKSUxFbEJRVUVzVTBGQlFTeDFRa0ZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4aFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEZsQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkRRU3hKUVVGQkxHbENRVUZCTEU5QlFVRXNRMEZCUVN3d1FrRkJRU3hEUVVGQkxFTkJRVUU3UVVGRlFTeEpRVUZCTEhsQ1FVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTERSQ1FVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRMEVzU1VGQlFTeFZRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxIRkNRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hwUWtGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3cwUWtGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4dlFrRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5CTEVsQlFVRXNVVUZCUVN4UFFVRkJMRU5CUVVFc1owTkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4WlFVRkJMRTlCUVVFc1EwRkJRU3h2UTBGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1QwRkJRU3hEUVVGQkxEWkRRVUZCTEVOQlFVRXNRMEZCUVR0QlFVMUJMRWxCUVVFc1ZVRkJRU3hQUVVGQkxFTkJRVUVzYzBOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUVhORkxIRkRRVUZCTEVWQlFVRXNUMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzUjBGQlFTeEhRVUZCTEVWQlFVRXNVMEZCUVN4SFFVRkJMRVZCUVVFc1EwRkJRU3hGUVVGQk8wRkJRVUVzSzBOQlFVRXNSVUZCUVN4SlFVRkJMRTlCUVVFc1QwRkJRU3hMUVVGQkxGVkJRVUVzUlVGQlFTeFBRVUZCTEVsQlFVRXNRMEZCUVN4RFFVRkJMRWxCUVVFc2IwSkJRVUVzU1VGQlFTeFBRVUZCTEVWQlFVRXNRMEZCUVN4RFFVRkJMRWxCUVVFc2JVSkJRVUVzU1VGQlFTeFBRVUZCTEVWQlFVRXNRMEZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3d5UWtGQlFTeDFRa0ZCUVN4RlFVRkJMRTlCUVVFc1YwRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNhVUpCUVVFc1EwRkJRU3hGUVVGQkxFVkJRVUVzVjBGQlFTeERRVUZCTEVOQlFVRXNSVUZCUVR0QlFVRkJMRzFFUVVGQkxFVkJRVUVzU1VGQlFTeERRVUZCTEZkQlFVRXNTVUZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hYUVVGQkxFVkJRVUVzUlVGQlFTeFBRVUZCTEVkQlFVRXNRMEZCUVN4RlFVRkJMRU5CUVVFc1NVRkJRU3hIUVVGQkxFdEJRVUVzU1VGQlFTeEpRVUZCTEU5QlFVRXNSMEZCUVN4TFFVRkJMRkZCUVVFc1NVRkJRU3hQUVVGQkxFZEJRVUVzUzBGQlFTeFZRVUZCTEVWQlFVRXNSVUZCUVN4UFFVRkJMRVZCUVVFc1UwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlFTeEZRVUZCTEVOQlFVRXNTVUZCUVN4UlFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4SlFVRkJMRXRCUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSVUZCUVN4RlFVRkJMRTlCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVOQlFVRXNSVUZCUVN4RFFVRkJMRWxCUVVFc1UwRkJRU3hGUVVGQkxFTkJRVUVzUTBGQlFTeEpRVUZCTEhkQ1FVRkJMRTFCUVVFc1pVRkJRU3hKUVVGQkxFMUJRVUVzZVVKQlFVRXNRMEZCUVN4RFFVRkJMRXRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeEZRVUZCTEVWQlFVRXNTVUZCUVN4SFFVRkJMRXRCUVVFc1UwRkJRU3hKUVVGQkxFMUJRVUVzVlVGQlFTeGxRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hEUVVGQkxFVkJRVUVzUlVGQlFTeEpRVUZCTEU5QlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxIbENRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUTBGQlFTeERRVUZCTEVsQlFVRXNTVUZCUVN4TFFVRkJMRWxCUVVFc1NVRkJRU3hKUVVGQkxFbEJRVUVzU1VGQlFTeERRVUZCTEVWQlFVRXNSVUZCUVN4TlFVRkJMR1ZCUVVFc1EwRkJRU3hOUVVGQkxFVkJRVUVzUjBGQlFTeEZRVUZCTEVsQlFVRXNRMEZCUVN4RFFVRkJMRVZCUVVFc1RVRkJRU3hGUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFTkJRVUVzUlVGQlFTeEZRVUZCTEVWQlFVRXNRMEZCUVN4TlFVRkJMRkZCUVVFc1IwRkJRU3hIUVVGQkxFTkJRVUVzUTBGQlFTeEpRVUZCTEV0QlFVRXNSVUZCUVN4RlFVRkJMRXRCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeE5RVUZCTEVOQlFVRXNRMEZCUVN4RlFVRkJMRU5CUVVFc1QwRkJRU3hOUVVGQkxFTkJRVUVzUlVGQlFUdEJRVUZCTERCRFFVRkJMRVZCUVVFc1RVRkJRU3hqUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4SlFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFVkJRVUVzUlVGQlFTeE5RVUZCTEdWQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxFVkJRVUVzVDBGQlFTeExRVUZCTEVWQlFVRXNXVUZCUVN4SlFVRkJMRVZCUVVFc1kwRkJRU3hKUVVGQkxFVkJRVUVzVlVGQlFTeEpRVUZCTEVWQlFVRXNRMEZCUVN4RFFVRkJMRVZCUVVFc1RVRkJRU3hGUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1JVRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeERRVUZCTEVWQlFVRTdRVUZCUVN3MlFrRkJRU3hGUVVGQkxFbEJRVUVzVFVGQlFTeFpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRkZCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzVDBGQlFTeFBRVUZCTEVkQlFVRXNTMEZCUVN4UlFVRkJMRWRCUVVFc1IwRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNRMEZCUVN4RlFVRkJPMEZCUVVFc2JVTkJRVUVzUlVGQlFTeEpRVUZCTEU5QlFVRXNTMEZCUVN4TFFVRkJMRkZCUVVFc1NVRkJRU3hMUVVGQkxFdEJRVUVzU1VGQlFTeEZRVUZCTEU5QlFVRXNTMEZCUVN4RFFVRkJMRU5CUVVFc1NVRkJRU3hQUVVGQkxFdEJRVUVzUTBGQlFTeE5RVUZCTEZsQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFc1NVRkJRU3hKUVVGQkxFdEJRVUVzVTBGQlFTeEZRVUZCTEVWQlFVRXNTVUZCUVN4TlFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFdEJRVUVzUlVGQlFTeEpRVUZCTEVsQlFVRXNVMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hKUVVGQkxFOUJRVUVzUjBGQlFTeExRVUZCTEZGQlFVRXNSVUZCUVN4UFFVRkJMRWRCUVVFc1EwRkJRU3hEUVVGQkxFMUJRVUVzU1VGQlFTeFRRVUZCTEVOQlFVRXNPRU5CUVVFc1EwRkJRU3hEUVVGQkxFVkJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNTVUZCUVN4TFFVRkJMRkZCUVVFc1IwRkJRU3hOUVVGQkxFZEJRVUVzVFVGQlFTeEZRVUZCTEV0QlFVRXNRMEZCUVN4RFFVRkJMRVZCUVVFN1FVRkZka1FzYTBOQlFXdERMRTFCUVVFc1ZVRkJVeXhEUVVGRE8wVkJiVUo2UkN4TlFVRk5MRWRCUVVjN1NVRkRVQ3hOUVVGTk96czdPenM3T3pzN08wdEJWVXdzUjBGQlJ5eEpRVUZKTEUxQlFVMHNRMEZCUVR0SlFVTmtMRTFCUVUwN096dExRVUZwUWl4SFFVRkhMR2RDUVVGblFpeERRVUZCTzBsQlJURkRMRTFCUVUwc1ZVRkJWU3hSUVVGUkxFdEJRVXNzUTBGQlJTeE5RVUZQTzAxQlEzQkRMRTlCUVU4c1JVRkJSU3hUUVVGVExGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVR0TFFVTnlReXhEUVVGRExFTkJRVUU3U1VGRlJpeEpRVUZKTEdsRFFVRnBReXhKUVVGSkxFTkJRVUU3TzBsQlJYcERMRWxCUVVrc1EwRkJRU3hEUVVGQkxFVkJRVUVzVTBGQlFTeHJRa0ZCYVVJc1JVRkJReXhQUVVGUExFdEJRVUVzU1VGQlFTeEpRVUZRTEU5QlFVOHNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlVDeFBRVUZQTEV0QlFVMHNRMEZCUXl4RlFVRkZPMDFCUTNCRExHbERRVUZwUXl4TFFVRkxMRU5CUVVFN1MwRkRlRU03U1VGSFFTeE5RVUZOTERaQ1FVRTJRaXhOUVVGTk8wMUJRM1pETEZOQlFWTXNSVUZCUlN4RFFVRkJPMDFCUTFnc1QwRkJUeXhMUVVGTExFTkJRVVVzUTBGQlFTeEZRVUZGTEU5QlFVRXNaVUZCWlN4RFFVRkJMR2xDUVVGQkxFTkJRV3RDTEVOQlFVTXNRMEZCUVR0TFFVTnVSQ3hEUVVGQk8wbEJSVVFzVFVGQlRTeHZRa0ZCYjBJc1RVRkJUVHROUVVNNVFpeE5RVUZOTEdOQlFXTXNRMEZCUVN4RFFVRkJMRVZCUVVFc1kwRkJRU3hsUVVGakxFVkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRVHROUVVNNVJDeEpRVUZKTEZGQlFWRXNWMEZCVnl4RFFVRkRPMUZCUTNSQ0xGVkJRVlVzV1VGQlFTeDVRa0ZCZDBJc1YwRkJWenRSUVVNM1F5eFBRVUZQTEZsQlFVRXNjVUpCUVc5Q0xHOUNRVUZ2UWp0UlFVTXZReXhaUVVGWk8xVkJRMVlzVjBGQlZ5eFpRVUZCTEhsQ1FVRjNRaXhsUVVGbE8xVkJRMnhFTEZWQlFWVXNkVUpCUVhWQ08xVkJRMnBETEZsQlFWa3NRMEZCUVN4RFFVRkJMRVZCUVVFc1MwRkJRU3hsUVVGakxFVkJRVU1zVjBGQlZ5eERRVUZCTzFOQlEzaERPMDlCUTBRc1EwRkJReXhEUVVGQk8wMUJRMFlzVFVGQlRTeFRRVUZUTEZGQlFWRXNRMEZCUXp0UlFVTjBRaXhMUVVGTExGZEJRVUU3VDBGRFRpeERRVUZETEVOQlFVRTdTMEZEU0N4RFFVRkJPMGxCUlVRc2IwSkJRMFVzVFVGQlFTeFJRVUZCTEdOQlFVRXNRMEZCUXl4elFrRkJRU3hSUVVGeFFpeEZRVUZCTzAxQlFVTXNWMEZCVlN4MVFrRkJRVHRMUVVGMVFpeGxRVU4wUkN4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExHTkJRVUVzVVVGQllTeEZRVUZCTzAxQlExb3NWMEZCVlN3MlFrRkJOa0k3VFVGRGRrTXNZMEZCWXl4SlFVRkxPMDFCUTI1Q0xGVkJRVmNzVTBGQlZTeGxRVUZsTEVOQlFVTXNUMEZCVHl4RlFVRkZMRXRCUVVzc1EwRkJSVHROUVVOeVJDeFZRVUZWTEVsQlFVa3NUVUZCVFN4VFFVRkRPMHRCUTNSQ0xFTkJRVU1zWlVGSFJpeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkRMRTlCUVVFc1VVRkJUU3hGUVVGQk8wMUJRMHdzU1VGQlNUdFJRVU5HTEUxQlFVMHNUMEZCUVR0UFFVTlNPMHRCUTBRc1EwRkJReXhsUVVWR0xFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVRXNTMEZCUVN4RlFVRkJPMDFCUVVzc1YwRkJWU3huUTBGQlFUdExRVUZyUXl4RFFVRkRMR1ZCUld4RUxFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVTXNUMEZCUVN4UlFVRk5MRVZCUVVFN1RVRkRUQ3hOUVVGTExGZEJRVmM3VFVGRGFFSXNWMEZCVlN3clFrRkJLMEk3VFVGRGVrTXNVMEZEUlN4eFFrRkJjVUlzVlVGQlZTeExRVUZMTEd0Q1FVRnJRaXhIUVVOc1JDd3dRa0ZCTUVJc1IwRkRNVUlzYVVKQlFVRTdTMEZEVEN4RlFVVkJMRWxCUVVrc1VVRkJVU3hGUVVGRkxFTkJRVU1zY1VKQlFYRkNMRlZCUVZVc1JVRkJSU3hEUVVNdlF5eHhRa0ZCY1VJc1YwRkJWeXhEUVVOcVF5eERRVU5MTEVOQlFVTXNSVUZGVWl3NFFrRkJPRUlzYVVKQlF6ZENMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVU1zVDBGQlFTeFJRVUZOTEVWQlFVRTdUVUZEVEN4TlFVRkxMRmRCUVZjN1RVRkRhRUlzVjBGQlZTd3JRa0ZCSzBJN1RVRkRla01zVTBGQlV5eE5RVUZOTzFGQlEySXNTVUZCU1N4UlFVRlJMRmRCUVZjc1EwRkJRenRWUVVOMFFpeFZRVUZWTEZsQlFVRXNlVUpCUVhkQ0xGTkJRVk03VlVGRE0wTXNUMEZCVHl4WlFVRkJMSEZDUVVGdlFpeHJRa0ZCYTBJN1ZVRkROME1zV1VGQldUdFpRVU5XTEZWQlFWVXNXVUZCUVN4M1FrRkJkVUlzUzBGQlN6dFpRVU4wUXl4VlFVRlZMSFZDUVVGQk8xZEJRMW83VTBGRFJDeERRVUZETEVOQlFVRTdVVUZEUml4NVFrRkJlVUlzUlVGQlJTeERRVUZCTzA5QlF6ZENPMHRCUVVVc1JVRkZSQ3hKUVVGSkxGRkJRVkVzUlVGQlJTeERRVUZETEd0Q1FVRnJRaXhEUVVNMVFpeERRVVZYTEVOQlFVTXNRMEZCUVR0SFFVVTFRanREUVVOR08wRkJRVU1zVDBGQlFTeFJRVUZCTEVkQlFVRXNiVUpCUVVFc1EwRkJRVHRCUVVGQkxHVkJRVUVzUTBGMlNHOUNMRzFDUVVGdFFpeEZRVUZCTEZkQlFVRXNSVUZEYmtJN1JVRkRha0lzYTBKQlFXdENMRlZCUVVFc1VVRkJVeXhQUVVGUE8wVkJRMnhETEZOQlFWTXNWVUZCUVN4UlFVRlRMRTlCUVU4N1JVRkRla0lzTWtKQlFUSkNMRlZCUVVFc1VVRkJVeXhMUVVGTE8wVkJRM3BETEdsQ1FVRnBRaXhWUVVGQkxGRkJRVk1zUzBGQlN6dEZRVU12UWl4VlFVRlZMRlZCUVVFc1VVRkJVeXhOUVVGTk8wVkJRM3BDTEZWQlFWVXNWVUZCUVN4UlFVRlRMRTlCUVU4N1JVRkRNVUlzVlVGQlZTeFZRVUZCTEZGQlFWTXNUVUZCVFR0RlFVTjZRaXhUUVVGVExGVkJRVUVzVVVGQlV5eFBRVUZQTzBWQlEzcENMRmRCUVZjc1ZVRkJRU3hSUVVGVExFdEJRVXM3UlVGRGVrSXNkVUpCUVhWQ0xGVkJRVUVzVVVGQlV5eFBRVUZETzBOQlEyeERMRU5CUVVFc1EwRkJRVHRCUVVGQkxHVkJRVUVzUTBGYWEwSXNiVUpCUVcxQ0xFVkJRVUVzWTBGQlFTeEZRV05vUWp0RlFVTndRaXhIUVVGSExGVkJRVUVzVVVGQlV5eExRVUZMTzBWQlEycENMRmxCUVZrc1ZVRkJRU3hSUVVGVExFdEJRVU03UTBGRGRrSXNRMEZCUVN4RFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOdVEwZ3NTVUZCUVN4alFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5CTEVsQlFVRXNVMEZCUVN4UFFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEd0Q1FVRkJMRTlCUVVFc1EwRkJRU3hyUWtGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMRmRCUVVFc1QwRkJRU3hEUVVGQkxESkNRVUZCTEVOQlFVRXNRMEZCUVR0QlFVdEJMRWxCUVVFc1lVRkJRU3hQUVVGQkxFTkJRVUVzZFVKQlFVRXNRMEZCUVN4RFFVRkJPMEZCVDBFc1NVRkJRU3gxUWtGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3h0UTBGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVR0QlFVRnZSU3h4UTBGQlFTeEZRVUZCTEU5QlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFZEJRVUVzUjBGQlFTeEZRVUZCTEZOQlFVRXNSMEZCUVN4RlFVRkJMRU5CUVVFc1JVRkJRVHRCUVVWd1JTeE5RVUZOTEd0Q1FVRnRRaXhUUVVGVk8wVkJRMnBETEU5QlFVODdTVUZEVEN4VFFVRlRMRU5CUVVFc1EwRkJRU3hGUVVGQkxGVkJRVUVzYTBKQlFXbENMRVZCUVVNc1MwRkJTeXhEUVVGRE8wbEJRMnBETEd0Q1FVRnJRaXhEUVVGQkxFTkJRVUVzUlVGQlFTeFZRVUZCTEc5Q1FVRnRRaXhGUVVGRExFdEJRVXNzUTBGQlF6dEpRVU0xUXl4VlFVRlZMRXRCUVVzc1UwRkJVeXhUUVVGVE8wbEJRMnBETEZWQlFWVXNRMEZCUVN4RFFVRkJMRVZCUVVFc1ZVRkJRU3c0UWtGQk5rSXNSVUZCUXl4TFFVRkxMRU5CUVVNN1NVRkRPVU1zVlVGQlZTeERRVUZCTEVOQlFVRXNSVUZCUVN4VlFVRkJMREpDUVVFd1FpeEZRVUZETEV0QlFVc3NRMEZCUXp0SlFVTXpReXgxUWtGQmRVSXNRMEZCUVN4RFFVRkJMRVZCUVVFc1ZVRkJRU3g1UWtGQmQwSXNSVUZCUXl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGQk8wZEJRelZFTEVOQlFVRTdRMEZEUml4RFFVRkJPMEZCUlVRc1RVRkJUU3h4UWtGQmMwSXNXVUZCWVR0RlFVTjJReXhQUVVGUE8wbEJRMHdzTWtKQlFUSkNMRTFCUTNwQ0xGRkJRVkVzUTBGQlF5eERRVUZCTEVOQlFVRXNSVUZCUVN4UlFVRkJMRlZCUVZNc1JVRkJRenROUVVGRkxFMUJRVTBzYjBKQlFVRTdTMEZCYzBJc1EwRkJReXhEUVVGRE8wbEJRM0pFTEdsQ1FVRnBRaXh2UWtGRFppeFJRVUZSTEVOQlFVTXNRMEZCUVN4RFFVRkJMRVZCUVVFc1VVRkJRU3huUWtGQlpTeEZRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRKUVVNelF5eFhRVUZYTEUxQlFVMDdUVUZEWml4UlFVRlJMRU5CUVVNc1EwRkJRU3hEUVVGQkxFVkJRVUVzVVVGQlFTeFZRVUZUTEVkQlFVVXNRMEZCUXl4RFFVRkJPMHRCUTNaQ08wZEJRMFFzUTBGQlFUdERRVU5HTEVOQlFVRTdRVUZCUXl4SlFVRkJMRmRCUldFc1EwRkJRU3hEUVVGQkxFVkJRVUVzVFVGQlFTeFJRVUZQTEVWQlEzQkNMR1ZCUVVFc1YwRkJWU3hGUVVOV0xFTkJRVUVzUTBGQlFTeEZRVUZCTEZkQlFVRXNVVUZCVHl4RlFVRkRMR1ZCUVdVc1JVRkJSU3hyUWtGQmEwSXNRMEZETjBNc1EwRkJReXhEUVVGRExHOUNRVUZCTEZGQlFXMUNMRU5CUVVNc1EwRkJRVHRCUVVGQkxFOUJRVUVzVVVGQlFTeEhRVUZCTEZGQlFVRXNRMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVNelEzUkNMRWxCUVVFc2IwSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJORVFzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMEUxUkN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTFCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRmRCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZCT0VNc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPMEZCUlM5Q0xGTkJRVk1zY1VKQlFYRkNMRU5CUVVNc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGQlJUdEZRVU0xUkN4TlFVRk5PMGxCUTBvc1UwRkJVenRKUVVOVUxHZENRVUZuUWp0SlFVTm9RaXhqUVVGak8wbEJRMlFzWjBKQlFXZENPMGxCUTJoQ0xGTkJRVk03U1VGRFZEdEZRVU5HTEVOQlFVTXNSMEZCUnl4TFFVRkxPMFZCUlZRc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUTBVc1UwRkJVeXhGUVVGRkxFbEJRVUVzYlVKQlFWVXNSVUZCUXl4VFFVRlRMRVZCUVVVc1pVRkJaU3hEUVVGRk8wbEJRMnhFTEV0QlFVc3NSVUZCUlR0TlFVRkZMRmxCUVZrc1JVRkJSVHRKUVVGTk8wVkJRVVVzWjBKQlJTOUNMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdEpRVUZMTEZOQlFWTXNSVUZCUXp0RlFVRXdRaXhuUWtGRGRrTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxESkNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExGVkJRVUVzUTBGQlFTeFBRVUZUTzBsQlFVTXNUMEZCVHl4RlFVRkZMR2RDUVVGblFpeERRVUZETEU5QlFWRTdTVUZCUXl4UlFVRlJMRVZCUVVVN1JVRkJSeXhEUVVGRkxFTkJRekZFTEVOQlFVTXNSVUZEVEN4alFVRmpMR2xDUVVOaUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVRkxMRk5CUVZNc1JVRkJReXh4UWtGQmNVSTdTVUZCUXl4UFFVRlBMRVZCUVVVN1JVRkJhVUlzWjBKQlF6ZEVMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdEpRVUZITEZOQlFWTXNSVUZCUXp0RlFVRjNRaXhEUVVGRkxFTkJRVU1zWlVGRGVFTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wbEJRVTBzVTBGQlV5eEZRVUZETzBWQlFUQkNMRWRCUTNaRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVTmlMRU5CUTBnc1EwRkRUaXhsUVVORUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVRlJMRk5CUVZNc1JVRkJReXh6UWtGQmMwSTdTVUZCUXl4UFFVRlBMRVZCUVVVN1JVRkJWU3hEUVVGRkxFTkJRVU1zUlVGRE9VUXNVVUZEUlN4RFFVTkdMRU5CUVVNN1FVRkZWanRCUVVWQkxIRkNRVUZ4UWl4RFFVRkRMRmxCUVZrc1IwRkJSenRGUVVOdVF5eERRVUZETEVWQlFVVXNhMEpCUVZNc1EwRkJRenRCUVVObUxFTkJRVU03UVVGRlJDeHhRa0ZCY1VJc1EwRkJReXhaUVVGWkxFZEJRVWM3UlVGRGJrTXNZMEZCWXl4RlFVRkZMRXRCUVVzN1JVRkRja0lzVVVGQlVTeEZRVUZGTEVsQlFVazdSVUZEWkN4blFrRkJaMElzUlVGQlJUdEJRVU53UWl4RFFVRkRPMEZCUlVRc2NVSkJRWEZDTEVOQlFVTXNVMEZCVXl4SFFVRkhPMFZCUTJoRExGTkJRVk1zUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwN1JVRkRNMElzWjBKQlFXZENMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlR0RlFVTTNReXhqUVVGakxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpPMFZCUXpsQ0xHZENRVUZuUWl4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNUdEZRVU5vUXl4VFFVRlRMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlR0RlFVTndReXhSUVVGUkxFVkJRVVVzYTBKQlFWTXNRMEZCUXp0QlFVTjBRaXhEUVVGRE96czdPenM3T3pzN096czdPenM3T3pzN096dEJRM2hFUkN4SlFVRkJMRmRCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFJRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEhOQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFYZEZMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVVjRSU3hUUVVGVExHVkJRV1VzUTBGQlF5eExRVUZMTEVWQlFVVXNVVUZCVVN4RlFVRkZPMFZCUTNoRExFOUJRVTg3U1VGRFRDeG5Ra0ZCWjBJc1JVRkJSU3hSUVVGUkxFTkJRVU1zWjBKQlFXZENMRWxCUVVrc1NVRkJRU3c0UWtGQmJVSXNSVUZCUXl4TFFVRkxPMFZCUXpGRkxFTkJRVU03UVVGRFNEdEJRVVZCTEZOQlFWTXNhMEpCUVd0Q0xFTkJRVU1zVVVGQlVTeEZRVUZGTzBWQlEzQkRMRTlCUVU4N1NVRkRUQ3hUUVVGVExFVkJRVVVzUTBGQlFTeExRVUZOTzAxQlEyWXNVVUZCVVN4RFFVRkRMRWxCUVVFc2EwSkJRVk1zUlVGQlF5eERRVUZETEVOQlFVTTdTVUZEZGtJN1JVRkRSaXhEUVVGRE8wRkJRMGc3UVVGQlF5eEpRVUZCTEZGQlFVRXNSMEZGWXl4SlFVRkJMRzFDUVVGUExFVkJRM0JDTEdWQlFXVXNSVUZEWml4clFrRkRSaXhEUVVGRExFTkJRVU1zT0VKQlFYRkNMRU5CUVVNN1FVRkJRU3hQUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEZGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTjBRbmhDTEVsQlFVRXNjMEpCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZCT0VRc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTBFNVJDeEpRVUZCTEUxQlFVRXNSMEZCUVN4MVFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEUxQlFVRXNSMEZCUVN4MVFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQmEwUXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlFVRXNVMEZCUVN4NVFrRkJRU3hYUVVGQkxHVkJRVUVzVDBGQlFTeHJRMEZCUVN4cFFrRkJRU3hQUVVGQkxFOUJRVUVzVVVGQlFTeG5Ra0ZCUVN4UFFVRkJMRTlCUVVFc1dVRkJRU3gzUWtGQlFTeFpRVUZCTEVOQlFVRXNWMEZCUVN4WFFVRkJMRmRCUVVFc1IwRkJRU3huUWtGQlFTeEhRVUZCTEdsQ1FVRkJMRXRCUVVFc1YwRkJRVHRCUVVGQkxGTkJRVUVzZDBKQlFVRXNSMEZCUVN4RlFVRkJMRmRCUVVFc1UwRkJRU3hYUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRmRCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYjBKQlFVRXNSMEZCUVN4M1FrRkJRU3hIUVVGQkxEUkNRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJMRlZCUVVFc1MwRkJRU3hIUVVGQkxIZENRVUZCTEVOQlFVRXNWMEZCUVN4UFFVRkJMRXRCUVVFc1NVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNXVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEZkQlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeEpRVUZCTEUxQlFVRXNRMEZCUVN4M1FrRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEZGQlFVRXNSMEZCUVN4clFrRkJRU3hOUVVGQkxFTkJRVUVzVTBGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzVTBGQlFTeEpRVUZCTEVkQlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hqUVVGQkxFbEJRVUVzUzBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4TlFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxFbEJRVUVzV1VGQlFTeE5RVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGTkJRVUVzVFVGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4SFFVRkJMRTFCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRTFCUVVFc1dVRkJRU3hOUVVGQk8wRkJRVUVzVTBGQlFTeG5Ra0ZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxFdEJRVUVzU1VGQlFTeEhRVUZCTEVkQlFVRXNZMEZCUVN4RFFVRkJMRWRCUVVFc1QwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzU1VGQlFTeExRVUZCTEVWQlFVRXNTMEZCUVN4RlFVRkJMRlZCUVVFc1VVRkJRU3haUVVGQkxGRkJRVUVzVVVGQlFTeHZRa0ZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFdEJRVUVzVjBGQlFTeEhRVUZCTzBGQlFVRXNVMEZCUVN4bFFVRkJMRWRCUVVFc1VVRkJRU3hIUVVGQkxFZEJRVUVzV1VGQlFTeERRVUZCTEVkQlFVRXNNa0pCUVVFc1IwRkJRU3huUWtGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMRWRCUVVFN1FVRkJRU3hUUVVGQkxHRkJRVUVzUzBGQlFTeEZRVUZCTEVsQlFVRXNaVUZCUVN4TFFVRkJMR2xDUVVGQkxFdEJRVUVzYTBKQlFVRXNTMEZCUVN4TlFVRkJMRWxCUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzVFVGQlFTeERRVUZCTEZkQlFVRXNUMEZCUVN4SlFVRkJMRXRCUVVFc1UwRkJRU3hSUVVGQkxFZEJRVUVzUjBGQlFTeEpRVUZCTEVOQlFVRXNTVUZCUVN4RFFVRkJMRXRCUVVFc1JVRkJRU3hKUVVGQkxESkNRVUZCTEVkQlFVRXNjMEpCUVVFc1IwRkJRU3haUVVGQkxGTkJRVUVzTkVSQlFVRXNTVUZCUVN4blFrRkJRU3hOUVVGQkxFZEJRVUVzVFVGQlFTeEZRVUZCTEV0QlFVRTdRVUZGYmtNc1RVRkJUU3h2UWtGQmIwSXNVMEZCVXl4dlFrRkJZU3hEUVVGRE8wVkJRVUVzV1VGQlFTeEhRVUZCTEVsQlFVRTdTVUZCUVN4VFFVRkJMRWxCUVVFN1NVRkJRU3hsUVVGQkxIVkNRVmt2UXl4TlFVRk5PMDFCUTI1Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRUdFJRVU5zUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzFGQlEzUkNMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdUVUZEZUVJc1EwRkJReXhEUVVGRE8wbEJRMG9zUTBGQlF6dEZRVUZCTzBWQlJVUXNUVUZCVFN4RFFVRkJMRVZCUVVjN1NVRkRVQ3hOUVVGTk8wMUJRVVU3U1VGQlJTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4N1NVRkZNVUlzYjBKQlEwVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVFVGQlFTeERRVUZCTEU5QlFVczdUVUZEU2l4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExGbEJRV0U3VFVGRE5VSXNVVUZCVVN4RlFVRkZMRU5CUVVFc1MwRkJUU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkZPMDFCUTNaRExGVkJRVlVzUlVGQlJTeERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkZPMDFCUTNoQ0xGVkJRVlVzUlVGQlJTeERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkZPMDFCUTNoQ0xGVkJRVlVzUlVGQlF6dEpRVUZuUWl4blFrRkZNMElzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1RVRkJRU3hEUVVGQkxGbEJRVms3VFVGRFdDeExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRMR1ZCUVdVc1EwRkJSVHROUVVNeFFpeFhRVUZYTEVWQlFVVXNRMEZCUXl4RFFVRkRMREJDUVVFd1FqdEpRVUZGTEVOQlF6VkRMRU5CUTBrc1EwRkJRenRGUVVWYU8wRkJRMFk3UVVGQlF5eFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRzlDUVVGQk8wRkJRVUVzWlVGQlFTeERRWEpEYjBJc2IwSkJRVzlDTEdWQlEzQkNPMFZCUTJwQ0xGTkJRVk1zUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVk8wVkJRM0JETERCQ1FVRXdRaXhGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVN1JVRkRja1FzVTBGQlV5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlU3UlVGRGNFTXNUVUZCVFN4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETzBGQlF6TkNMRU5CUVVNN1FVRkJRU3hsUVVGQkxFTkJUbXRDTEc5Q1FVRnZRaXhyUWtGUmFrSTdSVUZEY0VJc1EwRkJReXhGUVVGRkxHdENRVUZUTEVOQlFVTTdRVUZEWml4RFFVRkRPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJSSUxFbEJRVUVzVjBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTFCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGxRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFJRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2NVSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJjMFVzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJSWFJGTEUxQlFVMHNhMEpCUVd0Q0xFZEJRVWtzVVVGQlVTeEpRVUZMTzBWQlEzWkRMRTlCUVU4N1NVRkRUQ3d3UWtGQk1FSXNSVUZCUnl4TlFVRk5MRWxCUTJwRExGRkJRVkVzUTBGQlF5eEpRVUZCTEcxRFFVRXdRaXhGUVVGRExFMUJRVTBzUTBGQlF6dEZRVU12UXl4RFFVRkRPMEZCUTBnc1EwRkJRenRCUVVGRExFbEJRVUVzVVVGQlFTeEhRVVZoTEVsQlFVRXNZMEZCVHl4RlFVTndRaXgxUWtGQll5eEZRVU5rTEVsQlFVRXNiVUpCUVU4c1JVRkJReXhKUVVGSkxFVkJRVVVzYTBKQlFXdENMRU5CUTJ4RExFTkJRVU1zUTBGQlF5dzJRa0ZCYjBJc1EwRkJRenRCUVVGQkxFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNVVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJoQ2RrSXNTVUZCUVN4eFFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVRTJSQ3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRRVGRFTEVsQlFVRXNVMEZCUVN4MVFrRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hoUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMRmxCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEdsQ1FVRkJMRTlCUVVFc1EwRkJRU3d3UWtGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMRk5CUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVOQkxFbEJRVUVzVVVGQlFTeFBRVUZCTEVOQlFVRXNaME5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRMEVzU1VGQlFTeGhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxIVkNRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hsUVVGQkxFOUJRVUVzUTBGQlFTdzJRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkRRU3hKUVVGQkxHTkJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc01rTkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZCY1VVc2NVTkJRVUVzUlVGQlFTeFBRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hIUVVGQkxFZEJRVUVzUlVGQlFTeFRRVUZCTEVkQlFVRXNSVUZCUVN4RFFVRkJMRVZCUVVFN1FVRkJRU3dyUTBGQlFTeEZRVUZCTEVsQlFVRXNUMEZCUVN4UFFVRkJMRXRCUVVFc1ZVRkJRU3hGUVVGQkxFOUJRVUVzU1VGQlFTeERRVUZCTEVOQlFVRXNTVUZCUVN4dlFrRkJRU3hKUVVGQkxFOUJRVUVzUlVGQlFTeERRVUZCTEVOQlFVRXNTVUZCUVN4dFFrRkJRU3hKUVVGQkxFOUJRVUVzUlVGQlFTeERRVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMREpDUVVGQkxIVkNRVUZCTEVWQlFVRXNUMEZCUVN4WFFVRkJMRWRCUVVFc1owSkJRVUVzUjBGQlFTeHBRa0ZCUVN4RFFVRkJMRVZCUVVFc1JVRkJRU3hYUVVGQkxFTkJRVUVzUTBGQlFTeEZRVUZCTzBGQlFVRXNiVVJCUVVFc1JVRkJRU3hKUVVGQkxFTkJRVUVzVjBGQlFTeEpRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRmRCUVVFc1JVRkJRU3hGUVVGQkxFOUJRVUVzUjBGQlFTeERRVUZCTEVWQlFVRXNRMEZCUVN4SlFVRkJMRWRCUVVFc1MwRkJRU3hKUVVGQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEV0QlFVRXNVVUZCUVN4SlFVRkJMRTlCUVVFc1IwRkJRU3hMUVVGQkxGVkJRVUVzUlVGQlFTeEZRVUZCTEU5QlFVRXNSVUZCUVN4VFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGQkxFVkJRVUVzUTBGQlFTeEpRVUZCTEZGQlFVRXNkMEpCUVVFc1EwRkJRU3hYUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEVsQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEZRVUZCTEVWQlFVRXNUMEZCUVN4TFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUTBGQlFTeEZRVUZCTEVOQlFVRXNTVUZCUVN4VFFVRkJMRVZCUVVFc1EwRkJRU3hEUVVGQkxFbEJRVUVzZDBKQlFVRXNUVUZCUVN4bFFVRkJMRWxCUVVFc1RVRkJRU3g1UWtGQlFTeERRVUZCTEVOQlFVRXNTMEZCUVN4SlFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFVkJRVUVzUlVGQlFTeEpRVUZCTEVkQlFVRXNTMEZCUVN4VFFVRkJMRWxCUVVFc1RVRkJRU3hWUVVGQkxHVkJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRU5CUVVFc1JVRkJRU3hGUVVGQkxFbEJRVUVzVDBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc2VVSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hEUVVGQkxFTkJRVUVzU1VGQlFTeEpRVUZCTEV0QlFVRXNTVUZCUVN4SlFVRkJMRWxCUVVFc1NVRkJRU3hKUVVGQkxFTkJRVUVzUlVGQlFTeEZRVUZCTEUxQlFVRXNaVUZCUVN4RFFVRkJMRTFCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzU1VGQlFTeERRVUZCTEVOQlFVRXNSVUZCUVN4TlFVRkJMRVZCUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1EwRkJRU3hGUVVGQkxFVkJRVUVzUlVGQlFTeERRVUZCTEUxQlFVRXNVVUZCUVN4SFFVRkJMRWRCUVVFc1EwRkJRU3hEUVVGQkxFbEJRVUVzUzBGQlFTeEZRVUZCTEVWQlFVRXNTMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFMUJRVUVzUTBGQlFTeERRVUZCTEVWQlFVRXNRMEZCUVN4UFFVRkJMRTFCUVVFc1EwRkJRU3hGUVVGQk8wRkJRVUVzTUVOQlFVRXNSVUZCUVN4TlFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEVsQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1JVRkJRU3hGUVVGQkxFMUJRVUVzWlVGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1JVRkJRU3hQUVVGQkxFdEJRVUVzUlVGQlFTeFpRVUZCTEVsQlFVRXNSVUZCUVN4alFVRkJMRWxCUVVFc1JVRkJRU3hWUVVGQkxFbEJRVUVzUlVGQlFTeERRVUZCTEVOQlFVRXNSVUZCUVN4TlFVRkJMRVZCUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4RlFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxFTkJRVUVzUlVGQlFUdEJRVUZCTERaQ1FVRkJMRVZCUVVFc1NVRkJRU3hOUVVGQkxGbEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNVVUZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRU3hQUVVGQkxFOUJRVUVzUjBGQlFTeExRVUZCTEZGQlFVRXNSMEZCUVN4SFFVRkJMRWRCUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeERRVUZCTEVWQlFVRTdRVUZCUVN4dFEwRkJRU3hGUVVGQkxFbEJRVUVzVDBGQlFTeExRVUZCTEV0QlFVRXNVVUZCUVN4SlFVRkJMRXRCUVVFc1MwRkJRU3hKUVVGQkxFVkJRVUVzVDBGQlFTeExRVUZCTEVOQlFVRXNRMEZCUVN4SlFVRkJMRTlCUVVFc1MwRkJRU3hEUVVGQkxFMUJRVUVzV1VGQlFTeERRVUZCTEVOQlFVRXNRMEZCUVN4SlFVRkJMRWxCUVVFc1MwRkJRU3hUUVVGQkxFVkJRVUVzUlVGQlFTeEpRVUZCTEUxQlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQkxFbEJRVUVzU1VGQlFTeFRRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJMRWxCUVVFc1QwRkJRU3hIUVVGQkxFdEJRVUVzVVVGQlFTeEZRVUZCTEU5QlFVRXNSMEZCUVN4RFFVRkJMRU5CUVVFc1RVRkJRU3hKUVVGQkxGTkJRVUVzUTBGQlFTdzRRMEZCUVN4RFFVRkJMRU5CUVVFc1JVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeEpRVUZCTEV0QlFVRXNVVUZCUVN4SFFVRkJMRTFCUVVFc1IwRkJRU3hOUVVGQkxFVkJRVUVzUzBGQlFTeERRVUZCTEVOQlFVRXNSVUZCUVR0QlFVVjBSQ3h0UTBGQmJVTXNUVUZCUVN4VlFVRlRMRU5CUVVNN1JVRkJRU3hYUVVGQkxFTkJRVUVzVDBGQlFTeEZRVUZCTzBsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hEUVVGQkxFTkJRVUU3U1VGQlFTeGxRVUZCTEVOQlFVRXNTVUZCUVN4RlFVRkJMR05CUVVFc1JVRmpNME1zVFVGQlRUdE5RVU51UWl4SlFVRkpMRTFCUVUwc1kwRkRUU3hEUVVGRExFbEJRVWtzVFVGQlRTeFRRVUZUTEZGQlFWRXNRMEZCUXl4TFFVTjBReXhEUVVGRExFMUJRVTBzU1VGQlNTeE5RVUZOTEZWQlFWVXNSVUZCUlN4RFFVRkRMRU5CUVVFN1MwRkRkRU1zUTBGQlFTeERRVUZCTzBsQlFVRXNaVUZCUVN4RFFVRkJMRWxCUVVFc1JVRkJRU3hqUVVGQkxFVkJSV01zVFVGQlRUdE5RVU51UWl4SlFVRkpMRTFCUVUwc1ZVRkJWU3hGUVVGRkxFTkJRVUU3UzBGRGRrSXNRMEZCUVN4RFFVRkJPMGRCUVVFN1JVRkZSQ3h4UWtGQmNVSXNSMEZCUnp0SlFVTjBRaXhOUVVGTk96dExRVUZMTEVkQlFVY3NTVUZCU1N4UlFVRlJMRU5CUVVFN1NVRkRNVUlzVFVGQlRUczdPenRMUVVFclFpeEhRVUZITEVsQlFVa3NUVUZCVFN4RFFVRkJPMGxCUTJ4RUxHOUNRVU5GTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQk8wMUJRVXNzVjBGQlZTeHBRMEZCUVR0TFFVRnBReXhsUVVNNVF5eE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkJMRXRCUVVFc1JVRkJRVHROUVVGTExGZEJRVlVzTkVOQlFVRTdTMEZCTkVNc1pVRkRla1FzVFVGQlFTeFJRVUZCTEdOQlFVRXNRMEZCUXl4VlFVRkJMRkZCUVZNc1JVRkJRVHROUVVGRExGTkJRVk1zVVVGQlVTeFJRVUZUTzAxQlFVTXNWVUZCVlN4RlFVRkJPMHRCUVVzc1EwRkRiRVFzUTBGQlF5eGxRVU5PTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQk8wMUJRVXNzVjBGQlZTeDFRMEZCUVR0TFFVRjFReXhsUVVOd1JDeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkJMRTFCUVVFc1JVRkJRVHROUVVGTkxGZEJRVlVzZDBOQlFVRTdTMEZCZDBNc1JVRkRja1FzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZEVEN4RFFVRkRMR1ZCUTFBc1RVRkJRU3hSUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRTdUVUZCVFN4WFFVRlZMR1ZCUVVFN1MwRkJaU3hGUVVGRkxGRkJRVkVzUzBGQldTeERRVU5zUkN4RFFVRkRMR1ZCUTA0c1RVRkJRU3hSUVVGQkxHTkJRVUVzUTBGQlFTeExRVUZCTEVWQlFVRTdUVUZCU3l4WFFVRlZMREJEUVVGQk8wdEJRVEJETEdWQlEzWkVMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVUVzVFVGQlFTeEZRVUZCTzAxQlFVMHNWMEZCVlN4M1EwRkJRVHRMUVVGM1F5eEZRVU55UkN4RFFVRkRMRU5CUVVNc1pVRkJaU3hEUVVOa0xFTkJRVU1zWlVGRFVDeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkJMRTFCUVVFc1JVRkJRVHROUVVGTkxGZEJRVlVzWlVGQlFUdExRVUZsTEVWQlF6VkNMRU5CUVVFc1EwRkJRU3hGUVVGQkxFdEJRVUVzWlVGQll5eEZRVUZETEZGQlFWRXNVVUZCVVN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRMnhETEVOQlEwZ3NRMEZCUXl4bFFVTk9MRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzAxQlFVc3NWMEZCVlN4MVEwRkJRVHRMUVVGMVF5eGxRVU53UkN4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFUdE5RVU5GTEZOQlFWTXNUVUZCVFR0UlFVTmlMRTFCUVUwc1kwRkJZeXhEUVVGQkxFTkJRVUVzUlVGQlFTeGpRVUZCTEdWQlFXTXNSVUZEYUVNc1VVRkJVU3hSUVVGUkxFVkJRMmhDTEU5QlFVOHNSVUZEVUN4UlFVTkdMRU5CUVVNc1EwRkJRVHRSUVVORUxFbEJRVWtzVVVGQlVTeFhRVUZYTEVOQlFVTTdWVUZEZEVJc1ZVRkJWU3haUVVGQkxIbENRVUYzUWl4VFFVRlRPMVZCUXpORExFOUJRVThzTmtKQlFUWkNPMVZCUTNCRExGbEJRVms3V1VGRFZpeFhRVUZYTEdsQ1FVRnBRanRaUVVNMVFpeFJRVUZSTEdkQ1FVRm5RanRaUVVONFFpeDFRa0ZCZFVJc1EwRkJRU3hEUVVGQkxFVkJRVUVzUzBGQlFTeGxRVUZqTEVWQlFVTXNWMEZCVnl4RFFVRkJPMWRCUTI1RU8xTkJRMFFzUTBGQlF5eERRVUZCTzFGQlEwWXNUVUZCVFN4VFFVRlRMRkZCUVZFc1EwRkJRenRWUVVOMFFpeExRVUZMTEZkQlFVRTdVMEZEVGl4RFFVRkRMRU5CUVVFN1QwRkRSanROUVVOR0xGRkJRVThzVVVGQlVUdE5RVU5tTEV0QlFVa3NjVUpCUVhGQ08wMUJRM3BDTEU5QlFVOHNRMEZCUXl4RFFVRkRMR1ZCUVdVc1EwRkJRVHRMUVVGRkxHVkJSVEZDTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQk8wMUJRMFVzVjBGQlZTeHZRa0ZCYjBJN1RVRkRPVUlzVDBGQlR6dFJRVUZGTEU5QlFVOHNlVUpCUVVFN1QwRkJORUk3VFVGRE5VTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1pVRkJaU3hEUVVGQk8wdEJRM3BDTEVOQlEwRXNRMEZEUVN4RFFVTkdMRU5CUVVNc1EwRkJRVHRIUVVWV08wVkJSVUVzVFVGQlRTeEhRVUZITzBsQlExQXNUVUZCVFRzN1MwRkJTeXhIUVVGSExFbEJRVWtzVVVGQlVTeERRVUZCTzBsQlJURkNMRzlDUVVORkxFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVTXNUVUZCUVN4UlFVRkxMRVZCUVVFN1RVRkRTaXhaUVVGaExFTkJRVUVzUlVGQlJTeERRVUZETEVOQlFVTXNaVUZCWlN4RFFVRkZMRU5CUVVFc1EwRkJRU3hEUVVGSE8wMUJRM0pETEZOQlFWTXNTVUZCU1N4aFFVRmpPMDFCUXpOQ0xGVkJRVlVzU1VGQlNTeGhRVUZqTzAxQlF6VkNMRlZCUVZVc1NVRkJTU3hoUVVGak8wMUJRelZDTEZsQlFWa3NRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJSVHROUVVONFFpeFpRVUZaTEVOQlFVTXNRMEZCUXl4WFFVRlhMRU5CUVVFN1MwRkJSU3hsUVVVelFpeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkJMRXRCUVVFc1JVRkJRU3hKUVVGQkxFVkJRMGNzU1VGQlNTeHpRa0ZCYzBJc1JVRkJSU3hsUVVNM1FpeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkJMRXRCUVVFc1JVRkJRVHROUVVGTExGZEJRVlVzY1VOQlFVRTdTMEZCY1VNc1JVRkRha1FzUTBGQlF5eERRVUZETERCQ1FVRXdRaXhEUVVGRExHVkJRemxDTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQk8wMUJRMFVzVjBGQlZTdzRRa0ZCT0VJN1RVRkRlRU1zUzBGQlNTeHhRa0ZCY1VJN1RVRkRla0lzVVVGQlR5eFJRVUZSTzAxQlEyWXNUVUZCVFN4WFFVRkJMRkZCUVZrc2EwSkJRVU03UzBGQmEwSXNSVUZGY0VNc1EwRkJReXhEUVVGRExGZEJRVmNzUTBGRFlpeERRVU5CTEVOQlEwWXNRMEZEUVN4RFFVRkRMRU5CUVVFN1IwRkZXanREUVVOR08wRkJRVU1zVDBGQlFTeFJRVUZCTEVkQlFVRXNiMEpCUVVFc1EwRkJRVHRCUVVGQkxHVkJRVUVzUTBFdlIyOUNMRzlDUVVGdlFpeEZRVUZCTEZkQlFVRXNSVUZEY0VJN1JVRkRha0lzVjBGQlZ5eFZRVUZCTEZGQlFWTXNTMEZCU3l4WFFVRlhPMFZCUTNCRExHVkJRV1VzVlVGQlFTeFJRVUZUTEV0QlFVc3NWMEZCVnp0RlFVTjRReXhWUVVGVkxGVkJRVUVzVVVGQlV5eFBRVUZQTEZkQlFWYzdSVUZEY2tNc1UwRkJVeXhWUVVGQkxGRkJRVk1zVDBGQlR5eFhRVUZYTzBWQlEzQkRMRlZCUVZVc1ZVRkJRU3hSUVVGVExFOUJRVThzVjBGQlF6dERRVU0xUWl4RFFVRkJMRU5CUVVFN1FVRkJRU3hsUVVGQkxFTkJVR3RDTEc5Q1FVRnZRaXhGUVVGQkxHTkJRVUVzUlVGVGFrSTdSVUZEY0VJc1IwRkJSeXhWUVVGQkxGRkJRVk1zUzBGQlN6dEZRVU5xUWl4WlFVRlpMRlZCUVVFc1VVRkJVeXhMUVVGRE8wTkJRM1pDTEVOQlFVRXNRMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRja0pJTEVsQlFVRXNZMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEZOQlFVRXNUMEZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hEUVVGQk8wRkJRMEVzU1VGQlFTeHJRa0ZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTdzRSRUZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVOQkxFbEJRVUVzWVVGQlFTeFBRVUZCTEVOQlFVRXNkVUpCUVVFc1EwRkJRU3hEUVVGQk8wRkJTVUVzU1VGQlFTeFhRVUZCTEU5QlFVRXNRMEZCUVN3eVFrRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEhkQ1FVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEc5RFFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRWE5GTEhGRFFVRkJMRVZCUVVFc1QwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNSMEZCUVN4SFFVRkJMRVZCUVVFc1UwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlFTeEZRVUZCTzBGQlJYUkZMRTFCUVUwc2EwSkJRVzFDTEZOQlFWVTdSVUZEYWtNc1QwRkJUenRKUVVOTUxGTkJRVk1zUTBGQlFTeERRVUZCTEVWQlFVRXNWVUZCUVN4clFrRkJhVUlzUlVGQlF5eExRVUZMTEVOQlFVTTdTVUZEYWtNc1ZVRkJWU3hEUVVGQkxFTkJRVUVzUlVGQlFTeFZRVUZCTERoQ1FVRTJRaXhGUVVGRExFdEJRVXNzUTBGQlFUdEhRVU01UXl4RFFVRkJPME5CUTBZc1EwRkJRVHRCUVVWRUxFMUJRVTBzY1VKQlFYTkNMRmxCUVdFN1JVRkRka01zVDBGQlR6dEpRVU5NTEdWQlFXZENMRmRCUVZrc1VVRkJVU3hEUVVGRExFTkJRVUVzUTBGQlFTeEZRVUZCTEZGQlFVRXNZMEZCWVN4RlFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8wZEJRelZFTEVOQlFVRTdRMEZEUml4RFFVRkJPMEZCUVVNc1NVRkJRU3hYUVVWaExFTkJRVUVzUTBGQlFTeEZRVUZCTEUxQlFVRXNVVUZCVHl4RlFVTndRaXhsUVVGQkxGRkJRV01zUlVGRFpDeERRVUZCTEVOQlFVRXNSVUZCUVN4WFFVRkJMRkZCUVU4c1JVRkJReXhsUVVGbExFVkJRVVVzYTBKQlFXdENMRU5CUXpkRExFTkJRVU1zUTBGQlF5eHhRa0ZCUVN4UlFVRnZRaXhEUVVGRExFTkJRVUU3UVVGQlFTeFBRVUZCTEZGQlFVRXNSMEZCUVN4UlFVRkJMRU5CUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRE1VSjJRaXhKUVVGQkxIRkNRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRVFpFTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5CTjBRc1NVRkJRU3hOUVVGQkxFZEJRVUVzZFVKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hOUVVGQkxFZEJRVUVzZFVKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUVd0RUxGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzZVVKQlFVRXNWMEZCUVN4bFFVRkJMRTlCUVVFc2EwTkJRVUVzYVVKQlFVRXNUMEZCUVN4UFFVRkJMRkZCUVVFc1owSkJRVUVzVDBGQlFTeFBRVUZCTEZsQlFVRXNkMEpCUVVFc1dVRkJRU3hEUVVGQkxGZEJRVUVzVjBGQlFTeFhRVUZCTEVkQlFVRXNaMEpCUVVFc1IwRkJRU3hwUWtGQlFTeExRVUZCTEZkQlFVRTdRVUZCUVN4VFFVRkJMSGRDUVVGQkxFZEJRVUVzUlVGQlFTeFhRVUZCTEZOQlFVRXNWMEZCUVN4SlFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeFhRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMRzlDUVVGQkxFZEJRVUVzZDBKQlFVRXNSMEZCUVN3MFFrRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFTeFZRVUZCTEV0QlFVRXNSMEZCUVN4M1FrRkJRU3hEUVVGQkxGZEJRVUVzVDBGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hYUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1NVRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYTBKQlFVRXNUVUZCUVN4RFFVRkJMRk5CUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRk5CUVVFc1NVRkJRU3hIUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNZMEZCUVN4SlFVRkJMRXRCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzVFVGQlFTeEZRVUZCTEVkQlFVRXNSVUZCUVN4SlFVRkJMRmxCUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzUjBGQlFTeE5RVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeE5RVUZCTEZsQlFVRXNUVUZCUVR0QlFVRkJMRk5CUVVFc1owSkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNSVUZCUVN4TFFVRkJMRWxCUVVFc1IwRkJRU3hIUVVGQkxHTkJRVUVzUTBGQlFTeEhRVUZCTEU5QlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1NVRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRWxCUVVFc1MwRkJRU3hGUVVGQkxFdEJRVUVzUlVGQlFTeFZRVUZCTEZGQlFVRXNXVUZCUVN4UlFVRkJMRkZCUVVFc2IwSkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNTVUZCUVN4TFFVRkJMRmRCUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzWlVGQlFTeEhRVUZCTEZGQlFVRXNSMEZCUVN4SFFVRkJMRmxCUVVFc1EwRkJRU3hIUVVGQkxESkNRVUZCTEVkQlFVRXNaMEpCUVVFc1IwRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTzBGQlFVRXNVMEZCUVN4aFFVRkJMRXRCUVVFc1JVRkJRU3hKUVVGQkxHVkJRVUVzUzBGQlFTeHBRa0ZCUVN4TFFVRkJMR3RDUVVGQkxFdEJRVUVzVFVGQlFTeEpRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRTFCUVVFc1EwRkJRU3hYUVVGQkxFOUJRVUVzU1VGQlFTeExRVUZCTEZOQlFVRXNVVUZCUVN4SFFVRkJMRWRCUVVFc1NVRkJRU3hEUVVGQkxFbEJRVUVzUTBGQlFTeExRVUZCTEVWQlFVRXNTVUZCUVN3eVFrRkJRU3hIUVVGQkxITkNRVUZCTEVkQlFVRXNXVUZCUVN4VFFVRkJMRFJFUVVGQkxFbEJRVUVzWjBKQlFVRXNUVUZCUVN4SFFVRkJMRTFCUVVFc1JVRkJRU3hMUVVGQk8wRkJSVzVETEUxQlFVMHNiVUpCUVcxQ0xGTkJRVk1zYjBKQlFXRXNRMEZCUXp0RlFVRkJMRmxCUVVFc1IwRkJRU3hKUVVGQk8wbEJRVUVzVTBGQlFTeEpRVUZCTzBsQlFVRXNaVUZCUVN4elFrRlZMME1zVFVGQlRUdE5RVU5zUWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUXpsRUxFTkJRVU03UlVGQlFUdEZRVVZFTEUxQlFVMHNRMEZCUVN4RlFVRkhPMGxCUTFBc1RVRkJUVHROUVVGRk8wbEJRVVVzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBPMGxCUlRGQ0xHOUNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExFMUJRVUVzUTBGQlFTeFBRVUZMTzAxQlEwb3NVVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJReXhYUVVGWk8wMUJRek5DTEZGQlFWRXNSVUZCUlN4RFFVRkJMRXRCUVUwc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUlR0TlFVTjJReXhWUVVGVkxFVkJRVVVzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUlR0TlFVTjJRaXhWUVVGVkxFVkJRVVVzUTBGQlF5eERRVUZETEZkQlFWY3NRMEZCUlR0TlFVTXpRaXhWUVVGVkxFVkJRVU03U1VGQlowSXNaMEpCUlROQ0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRTFCUVVFc1EwRkJRU3haUVVGWk8wMUJRMWdzUzBGQlN5eEZRVUZITEVkQlFVVXNRMEZCUXl4RFFVRkRMR1ZCUVdVc1EwRkJSU3hIUVVGSE8wMUJRMmhETEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVVNc01FSkJRVEJDTzBsQlFVVXNRMEZETlVNc1EwRkRTU3hEUVVGRE8wVkJSVm83UVVGRFJqdEJRVUZETEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc2JVSkJRVUU3UVVGQlFTeGxRVUZCTEVOQmFFTnZRaXh0UWtGQmJVSXNaVUZEYmtJN1JVRkRha0lzVTBGQlV5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlU3UlVGRGNFTXNXVUZCV1N4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlF5OUNMRU5CUVVNN1FVRkJRU3hsUVVGQkxFTkJTbXRDTEcxQ1FVRnRRaXhyUWtGTmFFSTdSVUZEY0VJc1EwRkJReXhGUVVGRkxHdENRVUZUTEVOQlFVTTdRVUZEWml4RFFVRkRPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTFwSUxFbEJRVUVzVjBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTFCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGxRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFJRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2IwSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJiMFVzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJSWEJGTEUxQlFVMHNhMEpCUVd0Q0xFZEJRVWtzVVVGQlVTeEpRVUZMTzBWQlEzWkRMRTlCUVU4N1NVRkRUQ3haUVVGWkxFVkJRVVVzUTBGQlFTeExRVUZOTEZGQlFWRXNRMEZCUXl4SlFVRkJMSEZDUVVGWkxFVkJRVU1zUTBGQlF6dEZRVU0zUXl4RFFVRkRPMEZCUTBnc1EwRkJRenRCUVVGRExFbEJRVUVzVVVGQlFTeEhRVVZoTEVsQlFVRXNZMEZCVHl4RlFVTndRaXgxUWtGQll5eEZRVU5rTEVsQlFVRXNiVUpCUVU4c1JVRkJReXhKUVVGSkxFVkJRVVVzYTBKQlFXdENMRU5CUTJ4RExFTkJRVU1zUTBGQlF5dzBRa0ZCYlVJc1EwRkJRenRCUVVGQkxFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNVVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJaMFFpeEpRVUZCTEc5Q1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFUUkVMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTkJOVVFzU1VGQlFTeFRRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMR0ZCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNXVUZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVOQkxFbEJRVUVzYVVKQlFVRXNUMEZCUVN4RFFVRkJMREJDUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5CTEVsQlFVRXNZMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEU5QlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzYVVKQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc2NVTkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMRmRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNOa0pCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEd0Q1FVRkJMRTlCUVVFc1EwRkJRU3hyUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMR0ZCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNkVUpCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEZGQlFVRXNUMEZCUVN4RFFVRkJMRzFEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5CTEVsQlFVRXNWMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeHhRa0ZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVOQkxFbEJRVUVzWjBKQlFVRXNUMEZCUVN4RFFVRkJMRFpEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVmRCTEVsQlFVRXNjMEpCUVVFc1QwRkJRU3hEUVVGQkxITkRRVUZCTEVOQlFVRXNRMEZCUVR0QlFVTkJMRWxCUVVFc1lVRkJRU3hQUVVGQkxFTkJRVUVzZFVKQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hsUVVGQkxFOUJRVUVzUTBGQlFTdzJRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkRRU3hKUVVGQkxITkNRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxIVkVRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3h2UWtGQlFTeFBRVUZCTEVOQlFVRXNORUpCUVVFc1EwRkJRU3hEUVVGQk8wRkJRWGRGTEhGRFFVRkJMRVZCUVVFc1QwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNSMEZCUVN4SFFVRkJMRVZCUVVFc1UwRkJRU3hIUVVGQkxFVkJRVUVzUTBGQlFTeEZRVUZCTzBGQlJYcEVMRGhDUVVFNFFqczdPenM3T3pzN096czdRMEZYTlVNc1JVRkJSVHRGUVVGQkxFbEJRVUVzY1VKQlFVRXNSVUZCUVN4elFrRkJRU3hEUVVGQk8wVkJRMFFzVFVGQlRTeEpRVUZKTEVOQlFVRXNRMEZCUVN4RlFVRkJMR1ZCUVVFc1pVRkJZeXhIUVVGRkxFTkJRVUU3UlVGRE1VSXNUVUZCVFN3MFEwRkJORU1zUjBGQlJ5eERRVUZCTEVOQlFVRXNSVUZCUVN4dFFrRkJRU3h0UWtGQmEwSXNSMEZCUlN4RFFVRkJPMFZCUTNwRkxFMUJRVTBzYzBOQlFYTkRMRWRCUVVjc1EwRkJRU3hEUVVGQkxFVkJRVUVzYlVKQlFVRXNiVUpCUVd0Q0xFZEJRVVVzUTBGQlFUdEZRVVZ1UlN4TlFVRk5MRzFDUVVGdFFpeERRVUZCTEVOQlFVRXNSVUZCUVN4WFFVRkJMRmxCUVZjc1JVRkJSU3hWUVVGWE8wbEJReTlETEUxQlFVMHNRMEZCUVN4RFFVRkJMRVZCUVVFc1ZVRkJRU3h2UWtGQmJVSXNSVUZCUXl4TFFVRkxMRVZCUVVVc1UwRkJVeXhEUVVGQk8wZEJRek5ETEVOQlFVTXNRMEZCUXl4RFFVRkJPMFZCUTBnc1RVRkJUU3hOUVVOS0xHRkJRV0VzUzBGQlN5eFpRVUZCTEdOQlFXRXNUMEZCVHl4SlFVTjBReXhoUVVGaExFdEJRVXNzV1VGQlFTeGpRVUZoTEZGQlFWRTdPMFZCUlhSRExGTkJRVk1zU1VGQlNTeFBRVUZSTEVsQlEzSkNMRk5CUVZNc1NVRkJTU3hQUVVGUkxFTkJRVUU3UlVGRmVFSXNiMEpCUTBVc1RVRkJRU3hSUVVGQkxHTkJRVUVzUTBGQlF5eFJRVUZCTEZGQlFVOHNSVUZCUVR0SlFVRkRMRmRCUVZVc2QwSkJRVUU3UjBGQmQwSXNaVUZEZWtNc1RVRkJRU3hSUVVGQkxHTkJRVUVzUTBGQlF5eEpRVUZCTEZGQlFVY3NSVUZCUVR0SlFVTkdMRmxCUVZrc1EwRkJSVHRKUVVOa0xHTkJRV01zUTBGQlJUdEpRVU5vUWl4bFFVRmxMRU5CUVVVN1NVRkRha0lzWVVGQllTeERRVUZGTzBsQlEyWXNWMEZCVlN4cFEwRkJRVHRIUVVGcFF5eGxRVVV6UXl4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExHbENRVUZCTEV0QlFVa3NSVUZCUVR0SlFVTklMRmxCUVZrc1lVRkJRU3hYUVVGVkxFdEJRVTA3U1VGRE5VSXNVMEZCVXl4aFFVRkJMRmxCUVZjc1QwRkJVVHRKUVVNMVFpeEpRVUZITEVsQlFVazdTVUZEVUN4VFFVRlRMR0ZCUVVFc1VVRkJUeXhMUVVGTk8wbEJRM1JDTEZWQlFWVTdUVUZCUlN4WFFVRlhMRU5CUVVNN1RVRkJSU3hqUVVGakxFTkJRVUU3UzBGQlJUdEhRVUZGTEVWQlJUTkRMRU5CUVVNc1EwRkJReXhsUVVGbExFTkJRMlFzUTBGQlF5eGxRVU5RTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVNc2FVSkJRVUVzUzBGQlNTeEZRVUZCTzBsQlEwZ3NVMEZCVXl4aFFVRkJMRmxCUVZjc1QwRkJVVHRKUVVNMVFpeEpRVUZITEVsQlFVazdTVUZEVUN4VFFVRlRMR0ZCUVVFc1VVRkJUeXhMUVVGTk8wbEJRM1JDTEU5QlFVOHNZVUZCUVN4VlFVRlRMR2RDUVVGcFFqdEpRVU5xUXl4VlFVRlZPMDFCUVVVc1YwRkJWeXhEUVVGRE8wMUJRVVVzWTBGQll5eERRVUZCTzB0QlFVVTdSMEZCUlN4RlFVVXpReXhEUVVGRExFTkJRVU1zY1VKQlFYRkNMRU5CUTNCQ0xFTkJRVU1zUlVGRFRpeERRVUZETERaQ1FVRTJRaXhwUWtGRE4wSXNUVUZCUVN4UlFVRkJMR05CUVVFc1EwRkJRU3hOUVVGQkxGRkJRVUVzVTBGQlFTeEZRVUZCTEVsQlFVRXNaVUZEUlN4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExHbENRVUZCTEV0QlFVa3NSVUZCUVR0SlFVTklMRk5CUVZNc1lVRkJRU3haUVVGWExFOUJRVkU3U1VGRE5VSXNTVUZCUnl4SlFVRkpPMGxCUTFBc1UwRkJVeXhoUVVGQkxGRkJRVThzUzBGQlRUdEpRVU4wUWl4WFFVRlhMRU5CUVVVN1NVRkRZaXhqUVVGakxFTkJRVUU3UjBGQlJTeEZRVVZtTEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVNc1lVRkJZU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEdWQlFXVXNRMEZEZGtNc1EwRkJReXhsUVVOUUxFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVTXNTVUZCUVN4UlFVRkhMRVZCUVVFN1NVRkRSaXhUUVVGVExHRkJRVUVzVVVGQlR5eExRVUZOTzBsQlEzUkNMR05CUVdNc1lVRkJRU3hMUVVGSkxFZEJRVWs3U1VGRGRFSXNZVUZCWVN4aFFVRkJMRmxCUVZjc1RVRkJUenRKUVVNdlFpeGhRVUZoTEdGQlFVRXNXVUZCVnl4alFVRmxPMGxCUTNaRExGZEJRVlVzTWtOQlFVRTdSMEZCTWtNc1JVRkZjRVFzUjBGQlJ5eG5Ra0ZEUml4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExFbEJRVUVzVVVGQlJ5eEZRVUZCTzBsQlFVTXNVVUZCVVN4RFFVRkJPMGRCUVVVc1pVRkRZaXhOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZETEcxQ1FVRkJMRkZCUVd0Q0xFVkJRVUU3U1VGRGFrSXNWMEZCVnl4VFFVRlZPMGxCUTNKQ0xHTkJRV01zV1VGQlFUdEhRVU5tTEVOQlEwVXNRMEZCUXl4blFrRkZUaXhOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZETEZWQlFVRXNVVUZCVXl4RlFVRkJPMGxCUTFJc1YwRkJWU3h6UkVGQmMwUTdTVUZEYUVVc1UwRkJVeXhaUVVGaE8wbEJRM1JDTEZWQlFWVXNSVUZCUVR0SFFVTllMRU5CUTBZc1pVRkRSQ3hOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZETEVsQlFVRXNVVUZCUnl4RlFVRkJPMGxCUVVNc1pVRkJXU3hYUVVGQk8wZEJRVmNzWlVGRE1VSXNUVUZCUVN4UlFVRkJMR05CUVVFc1EwRkJReXhwUWtGQlFTeExRVUZKTEVWQlFVRTdTVUZEU0N4WlFVRlpMR0ZCUVVFc1YwRkJWU3hMUVVGTk8wbEJRelZDTEZOQlFWTXNZVUZCUVN4WlFVRlhMRTlCUVZFN1NVRkROVUlzU1VGQlJ5eEpRVUZKTzBsQlExQXNWMEZCVnl4RFFVRkJPMGRCUVVVc1JVRkZXaXhUUVVGVExFbEJRVWtzUTBGQlFTeERRVUZCTEVWQlFVRXNTMEZCUVN4VlFVRlRMRVZCUVVNc1dVRkJXU3hEUVVOb1F5eERRVUZETEVWQlEwNHNVMEZCVXl4cFFrRkRVaXhOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZETEdsQ1FVRkJMRXRCUVVrc1JVRkJRVHRKUVVOSUxGTkJRVk1zWVVGQlFTeFpRVUZYTEU5QlFWRTdTVUZETlVJc1NVRkJSeXhKUVVGSk8wbEJRMUFzVTBGQlV5eGhRVUZCTEZGQlFVOHNTMEZCVFR0SlFVTjBRaXhQUVVGUExHRkJRVUVzVlVGQlV5eG5Ra0ZCYVVJN1NVRkRha01zVjBGQlZ5eERRVUZGTzBsQlEySXNZMEZCWXl4RFFVRkJPMGRCUVVVc1JVRkZaaXhEUVVGQkxFTkJRVUVzUlVGQlFTeExRVUZCTEZWQlFWTXNSVUZCUXl4WlFVRlpMRU5CUTI1Q0xFTkJSVXdzUTBGQlF5eGxRVU5PTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVNc1NVRkJRU3hSUVVGSExFVkJRVUU3U1VGRFJpeFpRVUZaTEdGQlFVRXNWMEZCVlN4UFFVRlJPMGxCUXpsQ0xGbEJRVmNzVFVGQlRUdEpRVU5xUWl4aFFVRmhMRU5CUVVVN1NVRkRaaXhMUVVGTExFTkJRVUU3UjBGQlJTeGxRVVZRTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVNc1VVRkJRU3hSUVVGUExFVkJRVUU3U1VGRFRpeFZRVUZUTEV0QlFVczdTVUZEWkN4UFFVTkZMR3RDUVVGclFpeEhRVU5rTEVOQlFVTXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eEhRVU4wUWl4RFFVRkRMRU5CUVVNc2FVSkJRV2xDTEVOQlFVRTdSMEZEZUVJc1pVRkZSQ3hOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZETEdsQ1FVRkJMRmRCUVZVc1JVRkJRVHRKUVVOVUxGTkJRVk1zWVVGQlFTeFJRVUZQTEV0QlFVMDdTVUZEZEVJc1ZVRkRSU3hyUWtGQmEwSXNSMEZCUnl4cFFrRkJRU3hUUVVGUkxGbEJRVmtzUjBGQlJ5eHBRa0ZCUVN4VFFVRlJMRXRCUTNKRU8wbEJRMFFzVTBGQlV5eE5RVUZOTEhOQ1FVRnpRaXhEUVVGRExGbEJRVmtzUTBGQlJUdEpRVU53UkN4UFFVRlBMR0ZCUVVFc1RVRkJTeXhWUVVGWE8wbEJRM1pDTEZkQlEwVXNhMEpCUVd0Q0xFZEJRMlFzUTBGQlF5eERRVUZETEcxQ1FVRnRRaXhEUVVGRExFZEJRM1JDTEVOQlFVTXNRMEZCUXl4cFFrRkJhVUlzUTBGQlFUdEhRVVV4UWl4RFFVTk5MRU5CUVVNc1pVRkRWaXhOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZETEZGQlFVRXNVVUZCVHl4RlFVRkJPMGxCUVVNc1ZVRkJVeXhMUVVGTE8wbEJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNjVUpCUVhGQ0xFTkJRVUU3UjBGQlJTeGxRVU4wUkN4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExHbENRVUZCTEZkQlFWVXNSVUZCUVR0SlFVTlVMRk5CUVZNc1lVRkJRU3hSUVVGUExFdEJRVTA3U1VGRGRFSXNWVUZCVlN4cFFrRkJRU3hUUVVGUkxFOUJRVkU3U1VGRE1VSXNUMEZCVHl4aFFVRkJMRTFCUVVzc1ZVRkJWenRKUVVOMlFpeFRRVUZUTEUxQlFVMDdUVUZEWWl4TlFVRk5MSGxDUVVGNVFpeERRVUZCTEVOQlFVRXNSVUZCUVN4alFVRkJMR1ZCUVdNc1JVRkRNME1zV1VGQldTeEZRVU5hTEU5QlFVOHNSVUZEVUR0UlFVTkZMR3RDUVVGclFpeERRVUZCTEZGQlFWRXNTMEZCUVN4SlFVRkJMRWxCUVZJc1VVRkJVU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRlNMRkZCUVZFc2FVSkJRV3RDTEV0QlFVa3NTVUZCUVR0UFFVTnFSQ3hGUVVORUxFbEJRMFlzUTBGQlF5eERRVUZCTzAxQlEwUXNUVUZCVFN4VFFVRlRMRkZCUVZFc1EwRkJRenRSUVVOMFFpeExRVUZMTEhOQ1FVRkJPMDlCUTA0c1EwRkJReXhEUVVGQk8wdEJRMFk3U1VGRFJpeFhRVUZYTEVOQlFVTXNRMEZCUXl4eFFrRkJjVUlzUTBGQlFUdEhRVU51UXl4RFFVTk5MRU5CUTA0c1EwRkRSaXhEUVVOTUxFTkJRMGdzWlVGRFJDeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkRMR2xDUVVGQkxFdEJRVWtzUlVGQlFUdEpRVU5JTEZOQlFWTXNZVUZCUVN4WlFVRlhMRTlCUVZFN1NVRkROVUlzU1VGQlJ5eEpRVUZKTzBsQlExQXNVMEZCVXl4aFFVRkJMRkZCUVU4c1MwRkJUVHRKUVVOMFFpeFhRVUZYTEVOQlFVVTdTVUZEWWl4alFVRmpMRU5CUVVFN1IwRkJSU3hGUVVWbUxFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zUlVGRGNFTXNOa0pCUVRaQ0xFbEJRVWtzUTBGQlF5eERRVUZETERaQ1FVRTJRaXhEUVVGRExFVkJRMnBGTEVOQlFVTXNSMEZCUnl4SlFVTklMRU5CUVVNc05rSkJRVFpDTEVsQlF6bENMRU5CUVVNc1EwRkJReXdyUWtGQkswSXNRMEZETDBJc1EwRkJReXhsUVVOUUxFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVTXNTVUZCUVN4UlFVRkhMRVZCUVVFN1NVRkRSaXhUUVVGVExHRkJRVUVzVVVGQlR5eExRVUZOTzBsQlEzUkNMR05CUVdNc1lVRkJRU3hMUVVGSkxFZEJRVWs3U1VGRGRFSXNZVUZCWVN4aFFVRkJMRmxCUVZjc1RVRkJUenRKUVVNdlFpeGhRVUZoTEdGQlFVRXNXVUZCVnl4alFVRmxPMGxCUTNaRExGZEJRVlVzTWtOQlFVRTdSMEZCTWtNc1pVRkZja1FzVFVGQlFTeFJRVUZCTEdOQlFVRXNRMEZCUXl4VlFVRkJMRkZCUVZNc1JVRkJRVHRKUVVOU0xGZEJRVlVzYzBSQlFYTkVPMGxCUTJoRkxGVkJRVlVzUlVGQlJ6dEpRVU5pTEZOQlFWTXNVMEZCUVR0SFFVTldMRU5CUVVNc1pVRkRSaXhOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZETEVsQlFVRXNVVUZCUnl4RlFVRkJPMGxCUVVNc1pVRkJXU3hYUVVGQk8wZEJRVmNzWlVGRE1VSXNUVUZCUVN4UlFVRkJMR05CUVVFc1EwRkJReXhwUWtGQlFTeExRVUZKTEVWQlFVRTdTVUZEU0N4WlFVRlpMR0ZCUVVFc1YwRkJWU3hMUVVGTk8wbEJRelZDTEZOQlFWTXNZVUZCUVN4WlFVRlhMRTlCUVZFN1NVRkROVUlzU1VGQlJ5eEpRVUZKTzBsQlExQXNWMEZCVnl4RFFVRkJPMGRCUVVVc1JVRkZXaXhEUVVGQkxHZENRVUZuUWl4TFFVRkJMRWxCUVVFc1NVRkJhRUlzWjBKQlFXZENMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4M1FrRkJhRUlzWjBKQlFXZENMRXRCUVUwc1RVRkJRU3hKUVVGQkxFbEJRVUVzY1VKQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQmRFSXNjVUpCUVVFc1MwRkJORUlzUzBGQlNTeERRVUZCTEVOQlFVRXNSVUZCUVN4TFFVRkJMRlZCUVZNc1JVRkJReXhUUVVGVExFTkJRMmhFTEVOQlFVTXNSVUZEVGl4RFFVRkJMR2RDUVVGblFpeExRVUZCTEVsQlFVRXNTVUZCYUVJc1owSkJRV2RDTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeDVRa0ZCYUVJc1owSkJRV2RDTEV0QlFVMHNUVUZCUVN4SlFVRkJMRWxCUVVFc2MwSkJRVUVzUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJkRUlzYzBKQlFVRXNTMEZCTkVJc2EwSkJRek5DTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVNc2FVSkJRVUVzUzBGQlNTeEZRVUZCTzBsQlEwZ3NVMEZCVXl4aFFVRkJMRmxCUVZjc1QwRkJVVHRKUVVNMVFpeEpRVUZITEVsQlFVazdTVUZEVUN4VFFVRlRMR0ZCUVVFc1VVRkJUeXhMUVVGTk8wbEJRM1JDTEU5QlFVOHNZVUZCUVN4VlFVRlRMR2RDUVVGcFFqdEpRVU5xUXl4WFFVRlhMRU5CUVVVN1NVRkRZaXhqUVVGakxFTkJRVUU3UjBGQlJTeEZRVVZtTEVOQlFVRXNRMEZCUVN4RlFVRkJMRXRCUVVFc1ZVRkJVeXhGUVVGRExGTkJRVk1zUTBGRGFFSXNRMEZGVEN4RFFVRkRMR1ZCUTA0c1RVRkJRU3hSUVVGQkxHTkJRVUVzUTBGQlF5eEpRVUZCTEZGQlFVY3NSVUZCUVR0SlFVTkdMRmxCUVZrc1lVRkJRU3hYUVVGVkxFOUJRVkU3U1VGRE9VSXNXVUZCVnl4TlFVRk5PMGxCUTJwQ0xHRkJRV0VzUTBGQlJUdEpRVU5tTEV0QlFVc3NRMEZCUVR0SFFVRkZMR1ZCUlZBc1RVRkJRU3hSUVVGQkxHTkJRVUVzUTBGQlF5eFJRVUZCTEZGQlFVOHNSVUZCUVR0SlFVTk9MRlZCUVZNc1MwRkJTenRKUVVOa0xFOUJRMFVzWlVGQlpTeEhRVUZITEVOQlFVTXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4cFFrRkJhVUlzUTBGQlFUdEhRVU12UkN4bFFVVkVMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVU1zYVVKQlFVRXNWMEZCVlN4RlFVRkJPMGxCUTFRc1UwRkJVeXhoUVVGQkxGRkJRVThzUzBGQlRUdEpRVU4wUWl4VlFVTkZMR1ZCUVdVc1IwRkJSeXhwUWtGQlFTeFRRVUZSTEZsQlFWa3NSMEZCUnl4cFFrRkJRU3hUUVVGUkxFdEJRMnhFTzBsQlEwUXNVMEZCVXl4TlFVRk5MRzFDUVVGdFFpeERRVUZETEZOQlFWTXNRMEZCUlR0SlFVTTVReXhQUVVGUExHRkJRVUVzVFVGQlN5eFZRVUZYTzBsQlEzWkNMRmRCUTBVc2EwSkJRV3RDTEVkQlEyUXNRMEZCUXl4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVkQlEzUkNMRU5CUVVNc1EwRkJReXhwUWtGQmFVSXNRMEZCUVR0SFFVVXhRaXhEUVVOTkxFTkJRVU1zWlVGRFZpeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkRMRkZCUVVFc1VVRkJUeXhGUVVGQk8wbEJRVU1zVlVGQlV5eExRVUZMTzBsQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc2NVSkJRWEZDTEVOQlFVRTdSMEZCUlN4bFFVTjBSQ3hOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZETEdsQ1FVRkJMRmRCUVZVc1JVRkJRVHRKUVVOVUxGTkJRVk1zWVVGQlFTeFJRVUZQTEV0QlFVMDdTVUZEZEVJc1ZVRkJWU3hwUWtGQlFTeFRRVUZSTEU5QlFWRTdTVUZETVVJc1QwRkJUeXhoUVVGQkxFMUJRVXNzVlVGQlZ6dEpRVU4yUWl4VFFVRlRMRTFCUVUwN1RVRkRZaXhOUVVGTkxIbENRVUY1UWl4RFFVRkJMRU5CUVVFc1JVRkJRU3hqUVVGQkxHVkJRV01zUlVGRE0wTXNVMEZCVXl4RlFVTlVMRTlCUVU4c1JVRkRVRHRSUVVORkxHdENRVUZyUWl4RFFVRkJMRkZCUVZFc1MwRkJRU3hKUVVGQkxFbEJRVklzVVVGQlVTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGU0xGRkJRVkVzYVVKQlFXdENMRXRCUVVrc1NVRkJRVHRQUVVOcVJDeEZRVU5FTEVsQlEwWXNRMEZCUXl4RFFVRkJPMDFCUTBRc1RVRkJUU3hUUVVGVExGRkJRVkVzUTBGQlF6dFJRVU4wUWl4TFFVRkxMSE5DUVVGQk8wOUJRMDRzUTBGQlF5eERRVUZCTzB0QlEwWTdTVUZEUml4WFFVRlhMRU5CUVVNc1EwRkJReXh4UWtGQmNVSXNRMEZCUVR0SFFVTnVReXhEUVVOTkxFTkJRMDRzUTBGRFJpeERRVU5HTEVOQlFVTXNaVUZEVGl4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExFbEJRVUVzVVVGQlJ5eEZRVUZCTzBsQlEwWXNVMEZCVXl4aFFVRkJMRkZCUVU4c1MwRkJUVHRKUVVOMFFpeFpRVUZaTEVOQlFVVTdTVUZEWkN4alFVRmpMRU5CUVVVN1NVRkRhRUlzWlVGQlpTeERRVUZGTzBsQlEycENMR0ZCUVdFc1EwRkJRVHRIUVVGRkxHVkJSV1lzVFVGQlFTeFJRVUZCTEdOQlFVRXNRMEZCUXl4UFFVRkJMRkZCUVUwc1JVRkJRVHRKUVVGRExFMUJRVXNzVTBGQlV6dEpRVUZETEZOQlFWTXNUVUZCVFN4UFFVRlBMRVZCUVVNN1IwRkJSU3hGUVVNM1F5eERRVUZETEVOQlFVTXNLMEpCUVN0Q0xFTkJRelZDTEVOQlEwd3NRMEZEUlN4RFFVRkRMRU5CUVVFN1EwRkZaRHRCUVVWQkxHOUNRVUZ2UWl4VlFVRlZMRWRCUVVjN096czdSVUZKTDBJc1UwRkJVeXhWUVVGQkxGRkJRVk1zUzBGQlN6czdPenRGUVVsMlFpeFhRVUZYTEZWQlFVRXNVVUZCVXl4UFFVRlBPenM3TzBWQlNUTkNMR05CUVdNc1ZVRkJRU3hSUVVGVExFOUJRVTg3T3pzN1JVRkpPVUlzVjBGQlZ5eFZRVUZCTEZGQlFWTXNUMEZCVHpzN096dEZRVWt6UWl4VFFVRlRMRlZCUVVFc1VVRkJVeXhQUVVGUE96czdPMFZCU1hwQ0xGVkJRVlVzVlVGQlFTeFJRVUZUTEU5QlFVODdPenM3UlVGSk1VSXNVMEZCVXl4VlFVRkJMRkZCUVZNc1QwRkJUenM3T3p0RlFVbDZRaXhsUVVGbExGVkJRVUVzVVVGQlV5eFBRVUZQT3pzN08wVkJTUzlDTEZkQlFWY3NWVUZCUVN4UlFVRlRMRTlCUVU4N096czdSVUZKTTBJc0swSkJRU3RDTEZWQlFVRXNVVUZCVXl4TFFVRkRPME5CUXpGRExFTkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzSldSQ3hKUVVGQkxFMUJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHVkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4WFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVFVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVjBGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFBRVUZCTEVkQlFVRXNUMEZCUVR0QlFVbEJMRWxCUVVFc1UwRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZGQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3haUVVGQkxFZEJRVUVzVDBGQlFUdEJRVUZ2Uml4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZGY0VZc1RVRkJUU3h6UWtGQmMwSXNSMEZCUnl4RFFVRkRPMFZCUVVVc1UwRkJVenRGUVVGRk8wRkJRV0VzUTBGQlF5eExRVUZMTzBWQlF6bEVMRTFCUVUwc1QwRkJUeXhIUVVGSExFbEJRVUVzTUVKQlFWVXNSVUZCUXl4RFFVRkRPMFZCUXpWQ0xFMUJRVTBzUTBGQlF5eEhRVUZITEVsQlFVRXNPRUpCUVdNc1JVRkJReXhEUVVGRE8wVkJRekZDTEUxQlFVMHNVVUZCVVN4SFFVRkhMRWxCUVVFc2RVSkJRVmNzUlVGQlF5eERRVUZETzBWQlF6bENMRTFCUVUwc1QwRkJUeXhIUVVGSExFbEJRVUVzZFVKQlFWY3NSVUZCUXl4cFFrRkJUeXhEUVVGRE8wVkJRM0JETEUxQlFVMHNaVUZCWlN4SFFVRkhMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVUZGTzBWQlFWRXNRMEZCUXl4TFFVTXZReXhKUVVGQkxHMURRVUZ6UWl4RlFVRkRMRTlCUVU4c1JVRkJSU3haUVVGWkxFTkJRemxETEVOQlFVTTdSVUZGUkN4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4TlFVRkJMRU5CUVVFc1QwRkJTenRKUVVOS0xGRkJRVkVzUlVGQlJTeE5RVUZCTEVOQlFVRXNTMEZCV1R0TlFVTndRaXhKUVVGSkxHVkJRV1VzUlVGQlJUdFJRVU51UWl4TlFVRk5MRkZCUVZFc1EwRkRXaXhKUVVGQkxIRkNRVUZaTEVWQlFVTTdWVUZEV0N4alFVRmpMRVZCUVVVc1dVRkJXVHRWUVVNMVFpeDNRa0ZCZDBJc1JVRkJSVHRSUVVNMVFpeERRVUZETEVOQlEwZ3NRMEZCUXp0UlFVTkVMRTFCUVUwN1ZVRkJSVHRSUVVGUkxFTkJRVU1zUjBGQlJ5eGxRVUZsTzFGQlEyNURMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU03VlVGRFdDeFJRVUZSTEVWQlFVY3NSMEZCUlN4dFFrRkJXU3hKUVVGSExGbEJRV0VzU1VGQlJ5eFBRVUZSTzFGQlEzUkVMRU5CUVVNc1EwRkJRenROUVVOS0xFTkJRVU1zVFVGQlRUdFJRVU5NTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNN1ZVRkRXQ3hSUVVGUkxFVkJRVVVzY1VKQlFXRTdWVUZEZGtJc1MwRkJTeXhGUVVGRk8xbEJRVVU3VlVGQllUdFJRVU40UWl4RFFVRkRMRU5CUVVNN1RVRkRTanROUVVOQkxGTkJRVk1zUTBGQlF5eERRVUZETzBsQlEySXNRMEZCUlR0SlFVTkdMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZGTzBsQlEzSkNMRkZCUVZFc1JVRkJSU3hEUVVGQkxFdEJRVTBzVTBGQlV5eERRVUZETEVOQlFVVTdTVUZETlVJc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFJRVUZSTzBWQlFVVXNaMEpCUlhoQ0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVRkxMRk5CUVZNc1JVRkJRenRGUVVFMFFpeG5Ra0ZEZWtNc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNWMEZCUVN4RFFVRkJMRTlCUVZVN1NVRkRWQ3hQUVVGUExFVkJRVVVzSzBKQlFXbENMRU5CUVVNc1JVRkJSenRKUVVNNVFpeFJRVUZSTEVWQlFVVTdUVUZEVWl4VFFVRlRMRVZCUVVVN1NVRkRZanRGUVVGRkxFZEJSVVFzWlVGQlpTeEhRVU5hTEVOQlFVTXNRMEZCUXl4dFEwRkJiVU1zUTBGQlF5eEhRVU4wUXl4RFFVRkRMRU5CUVVNc09FSkJRVGhDTEVOQlF6RkNMRU5CUTFRc1EwRkRRU3hEUVVGRE8wRkJSVm9zUTBGQlF6dEJRVVZFTEhOQ1FVRnpRaXhEUVVGRExGTkJRVk1zUjBGQlJ6dEZRVU5xUXl4VFFVRlRMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlR0RlFVTndReXhaUVVGWkxFVkJRVVVzYTBKQlFWTXNRMEZCUXp0QlFVTXhRaXhEUVVGRE8wRkJRVU1zU1VGQlFTeFJRVUZCTEVkQlJXRXNTVUZCUVN4MVFrRkJZeXhGUVVGRExITkNRVUZ6UWl4RFFVRkRPMEZCUVVFc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeFJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzcEZja1FzU1VGQlFTeE5RVUZCTEVkQlFVRXNkVUpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFZRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeE5RVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFZRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFBRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVOUJMRWxCUVVFc1NVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1pVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1pVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZkQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdsQ1FVRkJMRWRCUVVFc1QwRkJRVHRCUVV0dlF5eFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEhsQ1FVRkJMRmRCUVVFc1pVRkJRU3hQUVVGQkxHdERRVUZCTEdsQ1FVRkJMRTlCUVVFc1QwRkJRU3hSUVVGQkxHZENRVUZCTEU5QlFVRXNUMEZCUVN4WlFVRkJMSGRDUVVGQkxGbEJRVUVzUTBGQlFTeFhRVUZCTEZkQlFVRXNWMEZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzYVVKQlFVRXNTMEZCUVN4WFFVRkJPMEZCUVVFc1UwRkJRU3gzUWtGQlFTeEhRVUZCTEVWQlFVRXNWMEZCUVN4VFFVRkJMRmRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNWMEZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3h2UWtGQlFTeEhRVUZCTEhkQ1FVRkJMRWRCUVVFc05FSkJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRXNWVUZCUVN4TFFVRkJMRWRCUVVFc2QwSkJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzVjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEd0Q1FVRkJMRTFCUVVFc1EwRkJRU3hUUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hUUVVGQkxFbEJRVUVzUjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMR05CUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1NVRkJRU3haUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNUVUZCUVN4WlFVRkJMRTFCUVVFN1FVRkZjRU1zVFVGQlRTeGpRVUZqTEVkQlFVY3NRMEZCUXp0RlFVTjBRaXhUUVVGVE8wVkJRMVFzWjBKQlFXZENPMFZCUTJoQ0xGTkJRVk03UlVGRFZDeHBRa0ZCYVVJN1JVRkRha0k3UVVGRFJpeERRVUZETEV0QlFVczdSVUZEU2l4TlFVRk5MRU5CUVVNc1YwRkJWeXhGUVVGRkxHTkJRV01zUTBGQlF5eEhRVUZITEVsQlFVRXNaVUZCVVN4RlFVRkRMRVZCUVVVc1EwRkJRenRGUVVOc1JDeE5RVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkJMRGhDUVVGakxFVkJRVU1zUTBGQlF6dEZRVVV4UWl4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4TlFVRkJMRU5CUVVFc1QwRkJTenRKUVVOS0xGRkJRVkVzUlVGQlJTeERRVUZCTEV0QlFVMDdUVUZEWkN4SlFVRkpMRmRCUVZjc1MwRkJTeXhGUVVGRkxFVkJRVVU3VVVGRGRFSXNhVUpCUVdsQ0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNN1RVRkRja01zUTBGQlF5eE5RVUZOTzFGQlEwd3NhVUpCUVdsQ0xFTkJRVU1zVjBGQlZ5eERRVUZETzAxQlEyaERPMDFCUTBFc1dVRkJXU3hEUVVGRExFTkJRVU03VFVGRFpDeFRRVUZUTEVOQlFVTXNRMEZCUXp0SlFVTmlMRU5CUVVVN1NVRkRSaXhWUVVGVkxFVkJRVVVzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUlR0SlFVTjBRaXhSUVVGUkxFVkJRVVVzUTBGQlFTeExRVUZOTEZOQlFWTXNRMEZCUXl4RFFVRkZPMGxCUXpWQ0xGVkJRVlVzUlVGQlJTeERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkZPMGxCUTNoQ0xGbEJRVmtzUlVGQlF5d3JRa0ZCSzBJN1NVRkROVU1zWTBGQll5eEZRVUZETzBWQlFXbERMR2RDUVVWb1JDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1NVRkJTeXhUUVVGVExFVkJRVU03UlVGQmRVSXNaMEpCUTNCRExFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVRkxMRk5CUVZNc1JVRkJRenRGUVVGdlF5eG5Ra0ZEYWtRc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNhVUpCUVVFc1EwRkJRU3hKUVVGSk8wbEJRMGdzVTBGQlV5eEZRVUZETEcxRFFVRnRRenRKUVVNM1F5eFBRVUZQTEVWQlFVVXNlVUpCUVZjc1EwRkJReXhUUVVGVk8wbEJReTlDTEVWQlFVVXNSVUZCUXl4SlFVRkpPMGxCUTFBc1ZVRkJWU3hGUVVGRkxIZENRVUZWTEVOQlFVTTdSVUZCU3l4SFFVVXpRaXhEUVVGRExFTkJRVU1zWjBKQlFXZENMRU5CUTJZc1EwRkJReXhsUVVOUUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzVlVGQlZUdEpRVU5VTEZGQlFWRXNSVUZCUlN3d1FrRkJVU3hEUVVGRExFdEJRVTA3U1VGRGVrSXNVMEZCVXl4RlFVRkRMRGhDUVVFNFFqdEpRVU40UXl4SlFVRkpMRVZCUVVVc1owTkJRV01zUTBGQlF5eEZRVUZITzBsQlEzaENMRk5CUVZNc1JVRkJSU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZGTzBsQlEzUkNMRTlCUVU4c1JVRkJSVHRGUVVGVkxFTkJRM0JDTEVOQlEwVXNRMEZCUXl4bFFVTk9MRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEVsQlFVRXNRMEZCUVN4UFFVRkhPMGxCUTBZc1UwRkJVeXhGUVVGRkxFTkJRVVU3U1VGRFlpeFBRVUZQTEVWQlFVVXNjVUpCUVU4c1EwRkJReXhYUVVGWk8wbEJRemRDTEZWQlFWVXNSVUZCUlN4M1FrRkJWU3hEUVVGRE8wVkJRVThzWjBKQlJUbENMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHRKUVVOSUxFOUJRVThzUlVGQlJTeDVRa0ZCVnl4RFFVRkRMRTFCUVU4N1NVRkROVUlzUlVGQlJTeEZRVUZETEVsQlFVazdTVUZEVUN4VlFVRlZMRVZCUVVVc2QwSkJRVlVzUTBGQlF6dEZRVUZQTEVkQlJUZENMRU5CUVVNc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4bFFVTjBRaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4UFFVRkJMRU5CUVVFc1QwRkJUVHRKUVVOTUxFbEJRVWtzUlVGQlF5eE5RVUZOTzBsQlExZ3NVMEZCVXl4RlFVRkRMRFpDUVVFMlFqdEpRVU4yUXl4SFFVRkhMRVZCUVVNc2NVSkJRWEZDTzBsQlEzcENMRTFCUVUwc1JVRkJReXhSUVVGUk8wbEJRMllzU1VGQlNTeEZRVUZGTEcxQ1FVRlpMRU5CUVVNN1JVRkJaMElzUjBGRmJFTXNRMEZCUXl4RFFVRkRMRzlDUVVGdlFpeERRVU5xUWl4RFFVTktMRU5CUTBnc1EwRkJReXhsUVVOT0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRWxCUVVFc1EwRkJRU3hQUVVGSE8wbEJRVU1zVTBGQlV5eEZRVUZGTzBWQlFVVXNaMEpCUTJoQ0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRWxCUVVFc1EwRkJRU3hQUVVGSE8wbEJRVU1zVlVGQlZTeEZRVUZGTEhkQ1FVRlZMRU5CUVVNc1RVRkJUenRKUVVGRExFOUJRVThzUlVGQlJTeHhRa0ZCVHl4RFFVRkRPMFZCUVVzc1owSkJRM2hFTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNTVUZCU1R0SlFVTklMRTlCUVU4c1JVRkJSU3g1UWtGQlZ5eERRVUZETEUxQlFVODdTVUZETlVJc1JVRkJSU3hGUVVGRExFbEJRVWs3U1VGRFVDeFZRVUZWTEVWQlFVVXNkMEpCUVZVc1EwRkJReXhKUVVGTE8wbEJRelZDTEZGQlFWRXNSVUZCUlR0TlFVRkZMRXRCUVVzc1JVRkJSU3g1UWtGQlZ5eERRVUZETzBsQlFWazdSVUZCUlN4SFFVVTFReXhEUVVGRExFTkJRVU1zWjBKQlFXZENMRU5CUTJZc1EwRkJReXhsUVVOUUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRWxCUVVFc1EwRkJRU3hQUVVGSE8wbEJRVU1zUzBGQlN5eEZRVUZGTEhsQ1FVRlhMRU5CUVVNN1JVRkJWU3huUWtGRGFFTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVDBGQlFTeERRVUZCTEU5QlFVMDdTVUZEVEN4SlFVRkpMRVZCUVVNc1RVRkJUVHRKUVVOWUxGTkJRVk1zUlVGQlF5dzRRa0ZCT0VJN1NVRkRlRU1zWlVGQldTeDFRa0ZCZFVJN1NVRkRia01zVDBGQlR5eEZRVUZGTEVOQlFVRXNTMEZCVFR0TlFVTmlMR05CUVdNc1EwRkJReXhUUVVGVExFTkJRVU03U1VGRE0wSTdSVUZCUlN4SFFVVkVMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRMG9zUTBGRFRDeERRVU5HTEVOQlFVTXNaVUZEVGl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3U1VGQlN5eFRRVUZUTEVWQlFVTTdSVUZCT0VJc1owSkJRek5ETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExGVkJRVUVzUTBGQlFTeFBRVUZUTzBsQlExSXNTVUZCU1N4RlFVRkRMRkZCUVZFN1NVRkRZaXhsUVVGWkxHOUNRVUZ2UWp0SlFVTm9ReXhIUVVGSExFVkJRVU1zUjBGQlJ6dEpRVU5RTEZkQlFWY3NSVUZEVkN4blFrRkJaMElzU1VGRFppeFBRVUZQTEZOQlFWTXNTMEZCU3l4UlFVRlJMRWxCUVVrc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVU4wUkR0SlFVTkVMRkZCUVZFc1JVRkJSeXhEUVVGRExFbEJRVXM3VFVGRFppeGpRVUZqTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU03U1VGRGFFTXNRMEZCUlR0SlFVTkdMRk5CUVZNN1NVRkRWQ3hOUVVGTkxFVkJRVU1zVDBGQlR6dEpRVU5rTEV0QlFVc3NSVUZCUlN4WFFVRlpPMGxCUTI1Q0xFVkJRVVVzUlVGQlF6dEZRVUZwUWl4RFFVTnlRaXhEUVVORkxFTkJRMFlzUTBGRFJpeERRVU5CTEVOQlFVTTdRVUZGV2l4RFFVRkRPMEZCUlVRc1kwRkJZeXhEUVVGRExGTkJRVk1zUjBGQlJ6dEZRVU42UWl4VFFVRlRMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlR0RlFVTndReXhuUWtGQlowSXNSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTA3UlVGRGJFTXNVMEZCVXl4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRUdEZRVU16UWl4cFFrRkJhVUlzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrN1JVRkRha01zV1VGQldTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNN1FVRkRNVUlzUTBGQlF6dEJRVUZETEVsQlFVRXNVVUZCUVN4SFFVTmhMRWxCUVVFc2RVSkJRV01zUlVGQlF5eGpRVUZqTEVOQlFVTTdRVUZCUVN4UFFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxGRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU5vU2pkRExFbEJRVUVzWlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVGelJDeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFFYUkVMRWxCUVVFc1RVRkJRU3hIUVVGQkxIVkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1UwRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1YwRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1RVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc05FSkJRVUVzUjBGQlFTeFBRVUZCTzBGQlNVRXNTVUZCUVN4cFFrRkJRU3hIUVVGQkxFOUJRVUU3UVVGSmIwTXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlFVRXNVMEZCUVN4NVFrRkJRU3hYUVVGQkxHVkJRVUVzVDBGQlFTeHJRMEZCUVN4cFFrRkJRU3hQUVVGQkxFOUJRVUVzVVVGQlFTeG5Ra0ZCUVN4UFFVRkJMRTlCUVVFc1dVRkJRU3gzUWtGQlFTeFpRVUZCTEVOQlFVRXNWMEZCUVN4WFFVRkJMRmRCUVVFc1IwRkJRU3huUWtGQlFTeEhRVUZCTEdsQ1FVRkJMRXRCUVVFc1YwRkJRVHRCUVVGQkxGTkJRVUVzZDBKQlFVRXNSMEZCUVN4RlFVRkJMRmRCUVVFc1UwRkJRU3hYUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRmRCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYjBKQlFVRXNSMEZCUVN4M1FrRkJRU3hIUVVGQkxEUkNRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJMRlZCUVVFc1MwRkJRU3hIUVVGQkxIZENRVUZCTEVOQlFVRXNWMEZCUVN4UFFVRkJMRXRCUVVFc1NVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNXVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEZkQlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeEpRVUZCTEUxQlFVRXNRMEZCUVN4M1FrRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEZGQlFVRXNSMEZCUVN4clFrRkJRU3hOUVVGQkxFTkJRVUVzVTBGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzVTBGQlFTeEpRVUZCTEVkQlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hqUVVGQkxFbEJRVUVzUzBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4TlFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxFbEJRVUVzV1VGQlFTeE5RVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGTkJRVUVzVFVGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4SFFVRkJMRTFCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRTFCUVVFc1dVRkJRU3hOUVVGQk8wRkJRVUVzVTBGQlFTeG5Ra0ZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxFdEJRVUVzU1VGQlFTeEhRVUZCTEVkQlFVRXNZMEZCUVN4RFFVRkJMRWRCUVVFc1QwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzU1VGQlFTeExRVUZCTEVWQlFVRXNTMEZCUVN4RlFVRkJMRlZCUVVFc1VVRkJRU3haUVVGQkxGRkJRVUVzVVVGQlFTeHZRa0ZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFdEJRVUVzVjBGQlFTeEhRVUZCTzBGQlFVRXNVMEZCUVN4bFFVRkJMRWRCUVVFc1VVRkJRU3hIUVVGQkxFZEJRVUVzV1VGQlFTeERRVUZCTEVkQlFVRXNNa0pCUVVFc1IwRkJRU3huUWtGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMRWRCUVVFN1FVRkJRU3hUUVVGQkxHRkJRVUVzUzBGQlFTeEZRVUZCTEVsQlFVRXNaVUZCUVN4TFFVRkJMR2xDUVVGQkxFdEJRVUVzYTBKQlFVRXNTMEZCUVN4TlFVRkJMRWxCUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzVFVGQlFTeERRVUZCTEZkQlFVRXNUMEZCUVN4SlFVRkJMRXRCUVVFc1UwRkJRU3hSUVVGQkxFZEJRVUVzUjBGQlFTeEpRVUZCTEVOQlFVRXNTVUZCUVN4RFFVRkJMRXRCUVVFc1JVRkJRU3hKUVVGQkxESkNRVUZCTEVkQlFVRXNjMEpCUVVFc1IwRkJRU3haUVVGQkxGTkJRVUVzTkVSQlFVRXNTVUZCUVN4blFrRkJRU3hOUVVGQkxFZEJRVUVzVFVGQlFTeEZRVUZCTEV0QlFVRTdRVUZGY0VNc1RVRkJUU3h2UWtGQmIwSXNSMEZCUnl4SlFVRkpMR3RDUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSU3hEUVVGRE8wRkJSVGRFTEUxQlFVMHNjMEpCUVhOQ0xGTkJRVk1zYjBKQlFXRXNRMEZCUXp0RlFVRkJMRmxCUVVFc1IwRkJRU3hKUVVGQk8wbEJRVUVzVTBGQlFTeEpRVUZCTzBsQlFVRXNaVUZCUVN4blFrRnJRbmhFTzAxQlEwNDdUVUZEUVN4blFrRkJaMElzUlVGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMR2xDUVVGcFFpeEpRVUZKTEVWQlFVVTdUVUZEY0VRc2VVSkJRWGxDTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRE8wbEJRM3BETEVOQlFVTTdSVUZCUVR0RlFVVkVMR3RDUVVGclFpeERRVUZETEV0QlFVc3NSVUZCUlR0SlFVTjRRaXhOUVVGTk8wMUJRVVU3U1VGQlJTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4N1NVRkRNVUlzVFVGQlRUdE5RVU5LTEZOQlFWTTdUVUZEVkN4blFrRkJaMEk3VFVGRGFFSXNWMEZCVnp0TlFVTllMRmRCUVZjN1RVRkRXQ3haUVVGWk8wMUJRMW9zYVVKQlFXbENPMDFCUTJwQ08wbEJRMFlzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxPMGxCUTJRc1RVRkJUVHROUVVGRkxFbEJRVWs3VFVGQlJUdEpRVUZSTEVOQlFVTXNSMEZCUnl4blFrRkJaMElzU1VGQlNTeERRVUZETEVOQlFVTTdTVUZEYUVRc1RVRkJUVHROUVVGRk8wbEJRVEJDTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTenRKUVVWb1JDeHZRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlN5eFRRVUZUTEVWQlFVTTdTVUZCTUVJc1owSkJRM1pETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHROUVVGTExGTkJRVk1zUlVGQlF6dEpRVUZyUXl4blFrRkRMME1zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMDFCUVVzc1UwRkJVeXhGUVVGRE8wbEJRV2xETEVkQlF6ZERMRU5CUVVNc1EwRkJReXhuUWtGQlowSXNRMEZEYUVJc1EwRkJReXhsUVVOT0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzVlVGQlZUdE5RVU5VTEZGQlFWRXNSVUZCUlN3d1FrRkJVU3hEUVVGRExFdEJRVTA3VFVGRGVrSXNTVUZCU1N4RlFVRkZMR2REUVVGakxFTkJRVU1zUlVGQlJ6dE5RVU40UWl4VFFVRlRMRVZCUVVNc2VVTkJRWGxETzAxQlEyNUVMRTlCUVU4c1JVRkJSVHRKUVVGVkxFTkJRM0JDTEVOQlEwVXNRMEZCUXl4bFFVTk9MRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZMTEZOQlFWTXNSVUZCUXp0SlFVRjNReXhuUWtGRGNrUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFXbEVMR2RDUVVNNVJDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhWUVVGQkxFTkJRVUVzVDBGQlV6dE5RVUZETEU5QlFVOHNSVUZCUlN4UFFVRlJPMDFCUVVNc1VVRkJVU3hGUVVGRk8wbEJRVWNzUTBGQlJTeERRVUZETEdWQlF6ZERMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZMTEZOQlFWTXNSVUZCUXp0SlFVRnpSQ3huUWtGRGJrVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFUaERMRWRCUXpGRUxFbEJRMFVzUTBGQlF5eGxRVU5PTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hqUVVGTkxFTkJRVU1zUTBGQlF5eFRRVUZUTEVOQlFVOHNRMEZEY2tJc1EwRkRSaXhEUVVGRExHVkJRMDRzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMDFCUVVzc1UwRkJVeXhGUVVGRE8wbEJRV2xFTEVkQlF6VkVMRWRCUVVVc1NVRkJRU3cwUkVGQkswSXNSVUZEYWtNc1dVRkJXU3hGUVVOYUxFTkJRMFlzUTBGQlJTeEpRVUZITEZkQlFWa3NSVUZEWkN4RFFVTkdMRU5CUVVNc1pVRkRUaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdUVUZCU3l4VFFVRlRMRVZCUVVNN1NVRkJkME1zWjBKQlEzSkVMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZMTEZOQlFWTXNSVUZCUXp0SlFVRXJReXhIUVVNelJDeERRVUZETEVOQlFVTXNjMEpCUVhOQ0xFTkJRM1JDTEVOQlFVTXNaVUZEVGl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlN5eFRRVUZUTEVWQlFVTTdTVUZCY1VRc1IwRkRha1VzUTBGQlF5eERRVUZETEhWQ1FVRjFRaXhGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlEycERMRU5CUVVNc1pVRkRUaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdUVUZCU3l4VFFVRlRMRVZCUVVNN1NVRkJaMFFzWjBKQlF6ZEVMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVU5GTEZOQlFWTXNSVUZCUXl4elJFRkJjMFE3VFVGRGFFVXNUMEZCVHl4RlFVRkZMRU5CUVVFc1MwRkJUU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzFGQlFVVXNlVUpCUVhsQ0xFVkJRVVU3VFVGQlN5eERRVUZETzBsQlFVVXNaMEpCUld4RkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0TlFVTkZMRk5CUVZNc1JVRkJSU3hKUVVGQkxHMUNRVUZWTEVWQlFVTTdVVUZEY0VJc09FUkJRVGhFTEVWQlF6VkVMRU5CUVVNc2VVSkJRWGxDTzFGQlF6VkNMSGRGUVVGM1JTeEZRVU4wUlR0TlFVTktMRU5CUVVNN1NVRkJSU3hEUVVOS0xFTkJRVU1zWlVGRFJpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1RVRkJTeXhUUVVGVExFVkJRVU03U1VGQk1rUXNRMEZCUlN4RFFVRkRMRVZCUXpWRkxIbENRVUY1UWl4cFFrRkRlRUlzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMDFCUVVzc1UwRkJVeXhGUVVGRE8wbEJRVEJFTEVOQlFVVXNRMEZGTVVVc1EwRkJReXhsUVVOT0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0TlFVRkxMRk5CUVZNc1JVRkJRenRKUVVGeFJDeG5Ra0ZEYkVVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlEwVXNVMEZCVXl4RlFVRkZMRWxCUVVFc2JVSkJRVlVzUlVGQlF6dFJRVU53UWl4elJFRkJjMFFzUlVGRGNFUXNRMEZCUXl4NVFrRkJlVUk3VVVGRE5VSXNaMFZCUVdkRkxFVkJRemxFTzAxQlEwb3NRMEZCUXp0SlFVRkZMRWRCUlVZc1NVRkJTU3hyUWtGQlV5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkRhRU1zU1VGQlNTeHJRa0ZCVXl4RFFVRkRMRzlDUVVGdlFpeERRVU53UXl4RFFVRkRMRWRCUTBjc1EwRkJReXhEUVVGRExGZEJRVmNzUTBGQlF5eEhRVU5rTEVOQlFVTXNRMEZCUXl4MVFrRkJkVUlzUTBGRE1VSXNRMEZCUXl4bFFVTk9MRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZMTEZOQlFWTXNSVUZCUXp0SlFVRTBSQ3hIUVVONFJTeERRVUZETEVOQlFVTXNkVUpCUVhWQ0xFVkJRVVVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZEYWtNc1EwRkJReXhsUVVOT0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0TlFVRkxMRk5CUVZNc1JVRkJRenRKUVVGelJDeEhRVU5xUlN4SFFVRkZMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVVVzU1VGQlJ5eFhRVUZaTEVWQlEzQkRMRU5CUTBZc1EwRkRSaXhEUVVGRExHVkJRMDRzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMDFCUVVzc1UwRkJVeXhGUVVGRE8wbEJRV2RFTEdkQ1FVTTNSQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdUVUZEUlN4VFFVRlRMRVZCUVVNc2MwUkJRWE5FTzAxQlEyaEZMRTlCUVU4c1JVRkJSU3hEUVVGQkxFdEJRMUFzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXp0UlFVRkZMSGxDUVVGNVFpeEZRVUZGTzAxQlFVMHNRMEZCUXp0SlFVTnVSQ3huUWtGRlJDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1RVRkRSU3hUUVVGVExFVkJRVVVzU1VGQlFTeHRRa0ZCVlN4RlFVRkRPMUZCUTNCQ0xEaEVRVUU0UkN4RlFVTTFSQ3g1UWtGQmVVSTdVVUZETTBJc2QwVkJRWGRGTEVWQlEzUkZMRU5CUVVNN1RVRkRUQ3hEUVVGRE8wbEJRVVVzUTBGRFNpeERRVUZETEdWQlEwWXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFUSkVMRU5CUVVVc1EwRkJReXhGUVVNMVJTeERRVUZETEhsQ1FVRjVRaXhwUWtGRGVrSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFUQkVMRU5CUVVVc1EwRkZNVVVzUTBGQlF5eGxRVU5PTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHROUVVGTExGTkJRVk1zUlVGQlF6dEpRVUZ4UkN4blFrRkRiRVVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMDFCUTBVc1UwRkJVeXhGUVVGRkxFbEJRVUVzYlVKQlFWVXNSVUZCUXp0UlFVTndRaXh6UkVGQmMwUXNSVUZEY0VRc2VVSkJRWGxDTzFGQlF6TkNMR2RGUVVGblJTeEZRVU01UkN4RFFVRkRPMDFCUTB3c1EwRkJRenRKUVVGRkxFZEJSVVlzUTBGQlF5eERRVUZETEd0Q1FVRnJRaXhEUVVOc1FpeERRVUZETEdWQlEwNHNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFUUkVMRWRCUTNoRkxFTkJRVU1zUTBGQlF5eHZRa0ZCYjBJc1EwRkRjRUlzUTBGQlF5eGxRVU5PTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHROUVVGTExGTkJRVk1zUlVGQlF6dEpRVUZ6UkN4blFrRkRia1VzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1ZVRkJRU3hEUVVGQkxFOUJRVk03VFVGRFVpeEpRVUZKTEVWQlFVTXNVVUZCVVR0TlFVTmlMRmRCUVZjc1JVRkJSeXhIUVVGRkxFMUJRVTBzUTBGRGNFSXNhVUpCUVdsQ0xFbEJRVWtzVjBGRGRrSXNRMEZCUlN4SlFVRkhMRmRCUVZrc1JVRkJSVHROUVVOdVFpeFJRVUZSTEVWQlFVY3NTMEZCU3l4SlFVRkxPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTTdWVUZCUlN4blFrRkJaMElzUlVGQlJTeExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRPMUZCUVUwc1EwRkJReXhEUVVGRE8xRkJRM1pFTEVsQlFVa3NlVUpCUVhsQ0xFVkJRVVU3VlVGRE4wSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJRenRaUVVGRkxIbENRVUY1UWl4RlFVRkZPMVZCUVUwc1EwRkJReXhEUVVGRE8xRkJRM0pFTzAxQlEwWXNRMEZCUlR0TlFVTkdMRk5CUVZNN1RVRkRWQ3hOUVVGTkxFVkJRVU1zVDBGQlR6dE5RVU5rTEV0QlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExHZENRVUZwUWp0TlFVTnVReXhMUVVGTExFVkJRVVU3U1VGQlRTeERRVU5rTEVOQlEwVXNRMEZEUml4RFFVTkdMRU5CUTBZc1EwRkRSaXhEUVVGRE8wVkJSVlk3UlVGRlFTeHJRa0ZCYTBJc1EwRkJRU3hGUVVGSE8wbEJRMjVDTEUxQlFVMDdUVUZCUlR0SlFVRkZMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR6dEpRVU14UWl4TlFVRk5PMDFCUVVVc1VVRkJVVHROUVVGRk8wbEJRV2RDTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTenRKUVVOb1JDeE5RVUZOTzAxQlFVVXNlVUpCUVhsQ08wMUJRVVU3U1VGQmFVSXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTE8wbEJSV3hGTEVsQlFVa3NlVUpCUVhsQ0xFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSVHROUVVOc1JDeFBRVUZQTEZOQlFWTTdTVUZEYkVJN1NVRkZRU3hKUVVGSkxITkNRVUZ6UWp0SlFVTXhRaXhKUVVGSk8wMUJRMFlzYzBKQlFYTkNMRWRCUVVjc1NVRkJTU3hyUWtGQlV5eERRVUZETEdkQ1FVRm5RaXhEUVVGRE8wbEJRekZFTEVOQlFVTXNRMEZCUXl4UFFVRlBMRXRCUVVzc1JVRkJSVHROUVVOa0xHbENRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkZMSEZDUVVGdlFpeG5Ra0ZCYVVJc2FVSkJRV2RDTEVWQlFVVXNTMEZCU3l4RFFVRkRPMDFCUTNoRkxFOUJRVThzUTBGQlF5eERRVUZETEcxQ1FVRnRRaXhEUVVGRE8wbEJReTlDTzBsQlJVRXNTVUZCU1N4elFrRkJjMElzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RlFVRkZPMDFCUTNaRExFOUJRVThzUTBGQlF5eERRVUZETEcxQ1FVRnRRaXhEUVVGRE8wbEJReTlDTzBsQlJVRXNUVUZCVFN4alFVRmpMRWRCUVVjc1NVRkJRU3cwUTBGQlpTeEZRVUZETEc5Q1FVRnZRaXhGUVVGRkxGRkJRVkVzUTBGQlF6dEpRVU4wUlN4SlFVRkpMSE5DUVVGelFpeERRVUZETEZkQlFWY3NRMEZCUXl4alFVRmpMRU5CUVVNc1JVRkJSVHROUVVOMFJDeFBRVUZQTEVOQlFVTXNRMEZCUXl4dlFrRkJiMElzUTBGQlF6dEpRVU5vUXp0SlFVVkJMRWxCUTBVc1pVRkJaU3hMUVVGTExGTkJRVk1zU1VGRE4wSXNjMEpCUVhOQ0xFTkJRVU1zVVVGQlVTeERRVUZETEdWQlFXVXNRMEZCUXl4RlFVTm9SRHROUVVOQkxFOUJRVThzUTBGQlF5eERRVUZETEhkQ1FVRjNRaXhEUVVGRE8wbEJRM0JETzBsQlJVRXNUMEZCVHl4VFFVRlRPMFZCUTJ4Q08wVkJSVUVzVFVGQlRTeERRVUZCTEVWQlFVYzdTVUZEVUN4TlFVRk5PMDFCUVVVN1NVRkJSU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVODdTVUZETVVJc1RVRkJUVHROUVVGRkxHVkJRV1U3VFVGQlJTeFRRVUZUTzAxQlFVVTdTVUZCYTBJc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTzBsQlEzQkZMRTFCUVUwN1RVRkJSU3g1UWtGQmVVSTdUVUZCUlR0SlFVRnBRaXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVczdTVUZGYkVVc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03U1VGRGRrTXNUVUZCVFN4UlFVRlJMRWRCUVVjc1QwRkJUeXhEUVVOeVFpeG5Ra0ZCWjBJc1MwRkJTeXhwUWtGQmFVSXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeEpRVU51UlN4TFFVTktMRU5CUVVNN1NVRkZSQ3h2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhOUVVGQkxFTkJRVUVzVDBGQlN6dE5RVU5LTEZGQlFWRXNSVUZCUlN4RFFVRkJMRXRCUVUwN1VVRkRaQ3hsUVVGbExFTkJRVU1zZVVKQlFYbENMRWRCUVVjc1JVRkJSU3hIUVVGSExHZENRVUZuUWl4RFFVRkRPMUZCUTJ4RkxGTkJRVk1zUTBGQlF5eERRVUZETzAxQlEySXNRMEZCUlR0TlFVTkdMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZGTzAxQlEzUkNMRmxCUVZrc1JVRkJReXgzUTBGQmQwTTdUVUZEY2tRc1kwRkJZeXhGUVVGRExEQkRRVUV3UXp0TlFVTjZSQ3hqUVVGakxFVkJRVVU3U1VGQlV5eEhRVVY0UWl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNTMEZCU3l4RFFVTjZRaXhEUVVGRE8wVkJSVm83UVVGRFJqdEJRVUZETEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc2MwSkJRVUU3UVVGQlFTeGxRVUZCTEVOQk4wOXZRaXh6UWtGQmMwSXNaVUZEZEVJN1JVRkRha0lzVVVGQlVTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRGUVVNeFFpeFRRVUZUTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZUdEZRVU53UXl4blFrRkJaMElzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwN1JVRkRiRU1zVjBGQlZ5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRGUVVNM1FpeHBRa0ZCYVVJc1JVRkJSU3hyUWtGQlV5eERRVUZETEUxQlFVMDdSVUZEYmtNc1YwRkJWeXhGUVVGRkxHdENRVUZUTEVOQlFVTXNUVUZCVFR0RlFVTTNRaXhaUVVGWkxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TlFVRk5PMFZCUXpsQ0xHVkJRV1VzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrN1JVRkRMMElzVFVGQlRTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVlU3UlVGRGJrTXNaVUZCWlN4RlFVRkZMR3RDUVVGVExFTkJRVU1zVlVGQlZTeERRVUZETEd0Q1FVRlRPMEZCUTJwRUxFTkJRVU03UVVGQlFTeGxRVUZCTEVOQldtdENMSE5DUVVGelFpeHJRa0ZqYmtJN1JVRkRjRUlzUTBGQlF5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNN1FVRkRaaXhEUVVGRE96czdPenM3T3pzN096czdPenM3T3pzN096dEJRM0JEU0N4SlFVRkJMRmRCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeE5RVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1pVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEhWQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFUQkZMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVVXhSU3hOUVVGTkxHVkJRV1VzUjBGQlNTeExRVUZMTEVsQlFVczdSVUZEYWtNc1RVRkJUU3hsUVVGbExFZEJRVWNzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hEUVVGRExFdEJRVXNzU1VGQlNTeERRVUZETEVOQlFVTTdSVUZEYmtVc1QwRkJUenRKUVVOTUxHZENRVUZuUWl4RlFVRkZMRWxCUVVFc09FSkJRVzFDTEVWQlFVTXNTMEZCU3l4RFFVRkRPMGxCUXpWRExFZEJRVWM3UlVGRFRDeERRVUZETzBGQlEwZ3NRMEZCUXp0QlFVRkRMRWxCUVVFc1VVRkJRU3hIUVVWaExFbEJRVUVzWTBGQlR5eEZRVU53UWl4MVFrRkJZeXhGUVVOa0xFbEJRVUVzYlVKQlFVOHNSVUZCUXl4bFFVRmxMRU5CUTNwQ0xFTkJRVU1zUTBGQlF5d3JRa0ZCYzBJc1EwRkJRenRCUVVGQkxFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNVVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJwQ2VrSXNTVUZCUVN4MVFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVRXJSQ3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRRUzlFTEVsQlFVRXNUVUZCUVN4SFFVRkJMSFZDUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFbEJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHbENRVUZCTEVkQlFVRXNUMEZCUVR0QlFXRkJMRWxCUVVFc1lVRkJRU3hIUVVGQkxFOUJRVUU3UVVGWFFTeEpRVUZCTEdWQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hUUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hSUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGbEJRVUVzUjBGQlFTeFBRVUZCTzBGQlNVRXNTVUZCUVN4aFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVGelJTeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEhsQ1FVRkJMRmRCUVVFc1pVRkJRU3hQUVVGQkxHdERRVUZCTEdsQ1FVRkJMRTlCUVVFc1QwRkJRU3hSUVVGQkxHZENRVUZCTEU5QlFVRXNUMEZCUVN4WlFVRkJMSGRDUVVGQkxGbEJRVUVzUTBGQlFTeFhRVUZCTEZkQlFVRXNWMEZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzYVVKQlFVRXNTMEZCUVN4WFFVRkJPMEZCUVVFc1UwRkJRU3gzUWtGQlFTeEhRVUZCTEVWQlFVRXNWMEZCUVN4VFFVRkJMRmRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNWMEZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3h2UWtGQlFTeEhRVUZCTEhkQ1FVRkJMRWRCUVVFc05FSkJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRXNWVUZCUVN4TFFVRkJMRWRCUVVFc2QwSkJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzVjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEd0Q1FVRkJMRTFCUVVFc1EwRkJRU3hUUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hUUVVGQkxFbEJRVUVzUjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMR05CUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1NVRkJRU3haUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNUVUZCUVN4WlFVRkJMRTFCUVVFN1FVRkZkRVVzVFVGQlRTeFpRVUZaTEVkQlFVY3NRMEZCUXp0RlFVRkZPMEZCUVZVc1EwRkJReXhMUVVGTE8wVkJRM1JETEUxQlFVMHNRMEZCUXl4blFrRkJaMElzUlVGQlJTeHRRa0ZCYlVJc1EwRkJReXhIUVVGSExFbEJRVUVzWlVGQlVTeEZRVUZETEV0QlFVc3NRMEZCUXp0RlFVTXZSQ3hOUVVGTkxFTkJRVU1zWVVGQllTeEZRVUZGTEdkQ1FVRm5RaXhEUVVGRExFZEJRVWNzU1VGQlFTeGxRVUZSTEVWQlFVTXNTMEZCU3l4RFFVRkRPMFZCUTNwRUxFMUJRVTBzUTBGQlF5eFpRVUZaTEVWQlFVVXNaVUZCWlN4RFFVRkRMRWRCUVVjc1NVRkJRU3hsUVVGUkxFVkJRVU1zUlVGQlJTeERRVUZETzBWQlEzQkVMRTFCUVUwc05FSkJRVFJDTEVkQlFVY3NTVUZCUVN4MVFrRkJWeXhGUVVNNVF5d3dRMEZEUml4RFFVRkRPMFZCUlVRc1RVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlFTdzRRa0ZCWXl4RlFVRkRMRU5CUVVNN1JVRkRNVUlzVFVGQlRTeFJRVUZSTEVkQlFVY3NTVUZCUVN4MVFrRkJWeXhGUVVGRExFTkJRVU03UlVGRE9VSXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJRU3hwUWtGQlZTeEZRVUZETEdkRFFVRnJRaXhEUVVGRE8wVkJSV3BFTEUxQlFVMHNXVUZCV1N4SFFVRkhMRU5CUVVFc1MwRkJUVHRKUVVONlFpeFJRVUZSTEVOQlEwNHNTVUZCUVN4MVEwRkJPRUlzUlVGRE5VSXNWVUZCVlN4RlFVTldMRU5CUVVNc05FSkJRVFJDTEVOQlFVTXNVVUZEYUVNc1EwRkRSaXhEUVVGRE8wbEJRMFFzVTBGQlV5eERRVUZETEVOQlFVTTdSVUZEWWl4RFFVRkRPMFZCUlVRc1RVRkJUU3hQUVVGUExFZEJRVWNzV1VGQldTeExRVUZMTEVOQlFVTXNRMEZCUXl4clEwRkJhME1zUTBGQlF6dEZRVU4wUlN4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4SlFVRkJMRU5CUVVFc1QwRkJSenRKUVVOR0xGTkJRVk1zUlVGQlF5eG5Ra0ZCWjBJN1NVRkRNVUlzVDBGQlR5eEZRVUZGTEhGQ1FVRlBMRU5CUVVNc1NVRkJTenRKUVVOMFFpeGhRVUZoTEVWQlFVVXNORUpCUVdNc1EwRkJReXhOUVVGUE8wbEJRM0pETEdOQlFXTXNSVUZCUlN3MFFrRkJZeXhEUVVGRExGTkJRVlU3U1VGRGVrTXNUMEZCVHl4RlFVRkZPMFZCUVVVc1owSkJSVmdzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1NVRkJRU3hEUVVGQkxFOUJRVWM3U1VGRFJpeFBRVUZQTEVWQlFVVXNjVUpCUVU4c1EwRkJReXhKUVVGTE8wbEJRM1JDTEdGQlFXRXNSVUZCUlN3MFFrRkJZeXhEUVVGRExFZEJRVWs3U1VGRGJFTXNXVUZCV1N4RlFVRkZMRU5CUVVVN1NVRkRhRUlzWTBGQll5eEZRVUZGTERSQ1FVRmpMRU5CUVVNN1JVRkJUeXhuUWtGRmRFTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4SlFVRkpPMGxCUTBnc1UwRkJVeXhGUVVGRExEaENRVUU0UWp0SlFVTjRReXhKUVVGSkxFVkJRVVVzTUVKQlFWRXNRMEZCUXl4TlFVRlBPMGxCUTNSQ0xFdEJRVXNzUlVGQlJTeDFRa0ZCVXl4RFFVRkRMRmxCUVdFN1NVRkRPVUlzU1VGQlNTeEZRVUZGTERCQ1FVRlJMRU5CUVVNN1JVRkJSeXhEUVVOdVFpeERRVUZETEdWQlEwWXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4VlFVRlZPMGxCUTFRc1UwRkJVeXhGUVVGRExIVkNRVUYxUWp0SlFVTnFReXhSUVVGUkxFVkJRVVVzTUVKQlFWRXNRMEZCUXl4TFFVRk5PMGxCUTNwQ0xFbEJRVWtzUlVGQlJTeHJRa0ZCU1N4RFFVRkRMRVZCUVVjN1NVRkRaQ3hQUVVGUExFVkJRVVVzUTBGQlFTeExRVUZOTEZOQlFWTXNRMEZCUXl4RFFVRkZPMGxCUXpOQ0xGTkJRVk1zUlVGQlJTeERRVUZETEVOQlFVTXNUMEZCVHp0RlFVRkZMRU5CUTNaQ0xFTkJRMFVzUTBGQlF5eGxRVVZPTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNTVUZCU1R0SlFVTklMRTlCUVU4c1JVRkJSU3g1UWtGQlZ5eERRVUZETEZOQlFWVTdTVUZETDBJc1UwRkJVeXhGUVVGRkxIVkNRVUZUTEVOQlFVTXNUVUZCVHp0SlFVTTFRaXhaUVVGWkxFVkJRVVU3UlVGQlJTeEhRVVZtTEVOQlFVTXNRMEZCUXl4NVFrRkJlVUlzUTBGRGVFSXNRMEZCUXl4bFFVTlFMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHRKUVVGRExFOUJRVThzUlVGQlJTeDVRa0ZCVnl4RFFVRkRPMFZCUVU4c1IwRkRMMElzUTBGQlF5eERRVUZETEN0Q1FVRXJRaXhEUVVGRExHVkJRMjVETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNWVUZCVlR0SlFVTlVMRWxCUVVrc1JVRkJReXc0UkVGQk9FUTdTVUZEYmtVc1dVRkJXVHRGUVVGQkxFZEJSVmdzUTBGQlF5eERRVUZETEc5Q1FVRnZRaXhEUVVOaUxFTkJRMUlzUTBGQlF5eGxRVU5RTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNWMEZCVnp0SlFVRkRMRkZCUVZFc1JVRkJSU3gzUWtGQlZTeERRVUZETEUxQlFVODdTVUZCUXl4VFFVRlRMRVZCUVVVc1EwRkJSVHRKUVVGRExGbEJRVmtzUlVGQlJUdEZRVUZGTEVkQlEzSkZMRU5CUVVNc1EwRkJReXc0UWtGQk9FSXNRMEZCUXl4RlFVTnFReXhEUVVGRExFTkJRVU1zYTBOQlFXdERMRU5CUXpGQ0xFTkJRVU1zUlVGRFlpeGhRVUZoTEdkQ1FVTmFMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1lVRkJZVHRKUVVOYUxFVkJRVVVzUlVGQlF5eHhRa0ZCY1VJN1NVRkRlRUlzUzBGQlN5eEZRVUZGTEVOQlFVTXNRMEZCUXl3MlFrRkJOa0lzUTBGQlJUdEpRVU40UXl4TFFVRkxMRVZCUVVVc1dVRkJXU3hEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlJPMGxCUXpORExGRkJRVkVzUlVGRFRpeFpRVUZaTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1NVRkRka0lzUTBGQlF5eFBRVUZQTEVsQlExSXNRMEZCUXl4RFFVRkRMRFpDUVVFMlFpeERRVU5vUXp0SlFVTkVMRkZCUVZFc1JVRkJSeXhMUVVGTExFbEJRVXNzWlVGQlpTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRk8wbEJRM3BFTEV0QlFVc3NSVUZCUlN4WlFVRmhPMGxCUTNCQ0xFOUJRVThzUlVGQlJ5eExRVUZMTEVsQlFVc3NTMEZCU3l4RFFVRkRMR05CUVdNc1EwRkJRenRGUVVGRkxFTkJRelZETEVOQlFVTXNaMEpCUlVZc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNTVUZCUVN4RFFVRkJMRTlCUVVjN1NVRkRSaXhoUVVGaExFVkJRVVVzTkVKQlFXTXNRMEZCUXl4SFFVRkpPMGxCUTJ4RExGVkJRVlVzUlVGQlJTeDNRa0ZCVlN4RFFVRkRMRk5CUVZVN1NVRkRha01zUjBGQlJ5eEZRVUZGTzBWQlFVVXNaMEpCUlZBc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNVMEZCUVN4RFFVRkJMRTlCUVZFN1NVRkRVQ3hGUVVGRkxFVkJRVU1zYjBKQlFXOUNPMGxCUTNaQ0xGTkJRVk1zUlVGQlF5eHZRa0ZCYjBJN1NVRkRPVUlzVlVGQlZTeEZRVUZETEc5Q1FVRnZRanRKUVVNdlFpeFBRVUZQTEVWQlFVVXNaMEpCUVdsQ08wbEJRekZDTEU5QlFVOHNSVUZCUlN4RFFVRkJMRXRCUVUwN1RVRkRZaXh0UWtGQmJVSXNRMEZCUXl4RFFVRkRMR2RDUVVGblFpeERRVUZETzBsQlEzaERPMFZCUVVVc1EwRkRTQ3hEUVVGRExHVkJRMFlzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2FVSkJRVUVzUTBGQlFTeExRVUZMTzBsQlFVTXNUMEZCVHl4RlFVRkRPMFZCUVc5Q0xHZENRVU5xUXl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRWxCUVVrN1NVRkJReXhQUVVGUExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4TlFVRlBPMGxCUVVNc1JVRkJSU3hGUVVGRE8wVkJRVTBzUjBGRGVrTXNRMEZCUXl4RFFVRkRMRFJDUVVFMFFpeERRVU16UWl4RFFVTkVMRU5CUTBvc1EwRkRUaXhsUVVORUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRWxCUVVFc1EwRkJRU3hQUVVGSE8wbEJRMFlzVDBGQlR5eEZRVUZGTEhGQ1FVRlBMRU5CUVVNc1NVRkJTenRKUVVOMFFpeGhRVUZoTEVWQlFVVXNORUpCUVdNc1EwRkJReXhIUVVGSk8wbEJRMnhETEdOQlFXTXNSVUZCUlN3MFFrRkJZeXhEUVVGRExGbEJRV0U3U1VGRE5VTXNSMEZCUnl4RlFVRkZMRU5CUVVVN1NVRkRVQ3hUUVVGVExFVkJRVVU3UlVGQlJTeG5Ra0ZGWWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMR1ZCUVdVN1NVRkJReXhQUVVGUExFVkJRVVVzUTBGQlFTeExRVUZOTEZOQlFWTXNRMEZCUXl4RFFVRkZPMGxCUVVNc1NVRkJTU3hGUVVGRkxHdENRVUZKTEVOQlFVTXNSVUZCUnp0SlFVRkRMRXRCUVVzN1JVRkJRU3hIUVVNNVJDeERRVUZETEVOQlFVTXNVVUZCVVN4RFFVTkpMRU5CUVVNc1JVRkRha0lzWVVGQllTeG5Ra0ZEV2l4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMR0ZCUVdFN1NVRkRXaXhOUVVGTk8wbEJRMDRzUzBGQlN6dEpRVU5NTEZGQlFWRXNSVUZCUlN4RFFVRkRMRTlCUVZFN1NVRkRia0lzVDBGQlR5eEZRVUZGTEZsQlFXRTdTVUZEZEVJc1NVRkJTU3hGUVVGRkxHdENRVUZKTEVOQlFVTTdSVUZCUnl4SFFVVmlMRU5CUVVNc1EwRkJReXhaUVVGWkxFTkJRMFlzUTBGQlF5eG5Ra0ZGYUVJc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNhVUpCUVVFc1EwRkJRU3hoUVVGaE8wbEJRMW9zUzBGQlN6dEpRVU5NTEZGQlFWRXNSVUZCUlN4RFFVRkRMR2RDUVVGcFFqdEpRVU0xUWl4SlFVRkpMRVZCUVVVc2EwSkJRVWtzUTBGQlF5eEZRVUZITzBsQlEyUXNUMEZCVHl4RlFVRkZMRU5CUVVFc1MwRkJUVHROUVVOaUxHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJRenROUVVOMFFpeFZRVUZWTEVOQlFVTTdVVUZEVkN4UlFVRlJMRVZCUVVVc2NVTkJRWGRDTEVOQlFVTXNVVUZCVVR0UlFVTXpReXhMUVVGTExFVkJRVVVzYVVOQlFXOUNMRU5CUVVNc1owTkJRV2RETzFGQlF6VkVMRlZCUVZVc1JVRkJSVHRWUVVOV0xGRkJRVkVzUlVGQlJTeFZRVUZWTzFWQlEzQkNMR1ZCUVdVc1JVRkJSVHRSUVVOdVFqdE5RVU5HTEVOQlFVTXNRMEZCUXp0SlFVTktPMFZCUVVVc1IwRkZSQ3hEUVVGRExFTkJRVU1zVlVGQlZTeERRVU5CTEVOQlJXUXNRMEZEUml4RFFVRkRPMEZCUlZZc1EwRkJRenRCUVVWRUxGbEJRVmtzUTBGQlF5eFRRVUZUTEVkQlFVYzdSVUZEZGtJN1JVRkRRU3hUUVVGVExFVkJRVVVzYTBKQlFWTXNRMEZCUXp0QlFVTjJRaXhEUVVGRE8wRkJRVU1zU1VGQlFTeFJRVUZCTEVkQlEyRXNTVUZCUVN4MVFrRkJZeXhGUVVGRExGbEJRVmtzUTBGQlF6dEJRVUZCTEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc1VVRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOd1RUTkRMRWxCUVVFc1UwRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1RVRkJRU3hIUVVGQkxIVkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1pVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1NVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2FVSkJRVUVzUjBGQlFTeFBRVUZCTzBGQlQwRXNTVUZCUVN4elFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1pVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZsQlFVRXNSMEZCUVN4UFFVRkJPMEZCUzBFc1NVRkJRU3hyUWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGhRVUZCTEVkQlFVRXNUMEZCUVR0QlFWZEJMRWxCUVVFc1YwRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1kwRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVRTJReXhUUVVGQkxIbENRVUZCTEZkQlFVRXNaVUZCUVN4UFFVRkJMR3REUVVGQkxHbENRVUZCTEU5QlFVRXNUMEZCUVN4UlFVRkJMR2RDUVVGQkxFOUJRVUVzVDBGQlFTeFpRVUZCTEhkQ1FVRkJMRmxCUVVFc1EwRkJRU3hYUVVGQkxGZEJRVUVzVjBGQlFTeEhRVUZCTEdkQ1FVRkJMRWRCUVVFc2FVSkJRVUVzUzBGQlFTeFhRVUZCTzBGQlFVRXNVMEZCUVN4M1FrRkJRU3hIUVVGQkxFVkJRVUVzVjBGQlFTeFRRVUZCTEZkQlFVRXNTVUZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzVjBGQlFTeEhRVUZCTEZGQlFVRXNSMEZCUVN4dlFrRkJRU3hIUVVGQkxIZENRVUZCTEVkQlFVRXNORUpCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUVzVlVGQlFTeExRVUZCTEVkQlFVRXNkMEpCUVVFc1EwRkJRU3hYUVVGQkxFOUJRVUVzUzBGQlFTeEpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3haUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1YwRkJRU3h4UWtGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRWxCUVVFc1RVRkJRU3hEUVVGQkxIZENRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1VVRkJRU3hIUVVGQkxHdENRVUZCTEUxQlFVRXNRMEZCUVN4VFFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4VFFVRkJMRWxCUVVFc1IwRkJRU3h4UWtGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4M1FrRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEdOQlFVRXNTVUZCUVN4TFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFMUJRVUVzUlVGQlFTeEhRVUZCTEVWQlFVRXNTVUZCUVN4WlFVRkJMRTFCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNVMEZCUVN4TlFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxFZEJRVUVzVFVGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzVFVGQlFTeFpRVUZCTEUxQlFVRTdRVUZCUVN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZGTjBNc1RVRkJUU3h4UWtGQmNVSXNSMEZCUnl4RFFVRkRPMFZCUXpkQ0xHMUNRVUZ0UWp0RlFVTnVRaXhYUVVGWE8wVkJRMWdzWVVGQllUdEZRVU5pTEdkQ1FVRm5RanRGUVVOb1FpeHpRa0ZCYzBJN1JVRkRkRUlzVTBGQlV6dEZRVU5VTEU5QlFVOHNSMEZCUnl4SlFVRkpPMFZCUTJRN1FVRkRSaXhEUVVGRExFdEJRVXM3UlVGRFNpeE5RVUZOTEVOQlFVTXNVVUZCVVN4RlFVRkZMRmRCUVZjc1EwRkJReXhIUVVGSExFbEJRVUVzWlVGQlVTeEZRVUZETEVWQlFVVXNRMEZCUXp0RlFVTTFReXhOUVVGTkxFTkJRVU1zVlVGQlZTeEZRVUZGTEdGQlFXRXNRMEZCUXl4SFFVRkhMRWxCUVVFc1pVRkJVU3hGUVVGRExFbEJRVWtzUTBGQlF6dEZRVU5zUkN4TlFVRk5MRU5CUVVNc1YwRkJWeXhGUVVGRkxHTkJRV01zUTBGQlF5eEhRVUZITEVsQlFVRXNaVUZCVVN4RlFVRkRMRWxCUVVrc1EwRkJRenRGUVVOd1JDeE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzYlVKQlFXMUNMRU5CUVVNc1IwRkJSeXhKUVVGQkxHVkJRVkVzUlVGQlF5eExRVUZMTEVOQlFVTTdSVUZETDBRc1RVRkJUU3hWUVVGVkxFZEJRVWNzU1VGQlFTeHBRa0ZCVlN4RlFVRkRMR2REUVVGclFpeERRVUZETzBWQlEycEVMRTFCUVUwc1EwRkJReXhIUVVGSExFbEJRVUVzT0VKQlFXTXNSVUZCUXl4RFFVRkRPMFZCUlRGQ0xFbEJRVUVzWjBKQlFWTXNSVUZCUXl4TlFVRk5PMGxCUTJRc1QwRkJUeXhOUVVGTk8wMUJRMWdzYlVKQlFXMUNMRU5CUVVNc1EwRkJRenROUVVOeVFpeFhRVUZYTEVOQlFVTXNRMEZCUXp0SlFVTm1MRU5CUVVNN1NVRkRSRHRGUVVOR0xFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTTdSVUZGVGl4TlFVRk5MRFpDUVVFMlFpeEhRVUZITEUxQlFVRXNRMEZCVHl4aFFVRmhMRVZCUVVVc1QwRkJUeXhMUVVGTE8wbEJRM1JGTEVsQlFVazdUVUZEUml4TlFVRk5MRzFDUVVGdFFpeEhRVUZITEUxQlFVMHNZVUZCWVN4RFFVRkRMR0ZCUVdFc1JVRkJSU3hQUVVGUExFTkJRVU03VFVGRGRrVXNWVUZCVlN4RFFVTlNPMUZCUTBVc1VVRkJVU3hGUVVGRkxIRkRRVUYzUWl4RFFVRkRMRWxCUVVrN1VVRkRka01zUzBGQlN5eEZRVUZGTEdsRFFVRnZRaXhEUVVGRExHbENRVUZwUWp0UlFVTTNReXhWUVVGVkxFVkJRVVU3VlVGRFZpeFJRVUZSTEVWQlFVVXNiME5CUVhWQ0xFTkJRVU03VVVGRGNFTTdUVUZEUml4RFFVRkRMRVZCUTBRc1EwRkJReXhEUVVOSUxFTkJRVU03VFVGRFJDeGhRVUZoTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU03VFVGRGJFTXNZMEZCWXl4RFFVRkRMRXRCUVVzc1EwRkJRenROUVVOeVFpeHRRa0ZCYlVJc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRE0wSXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRk8wMUJRMVlzVlVGQlZTeERRVU5TTzFGQlEwVXNVVUZCVVN4RlFVRkZMSEZEUVVGM1FpeERRVUZETEVsQlFVazdVVUZEZGtNc1MwRkJTeXhGUVVGRkxHbERRVUZ2UWl4RFFVRkRMR1ZCUVdVN1VVRkRNME1zVlVGQlZTeEZRVUZGTzFWQlExWXNVVUZCVVN4RlFVRkZMRzlEUVVGMVFpeERRVUZETEVsQlFVazdWVUZEZEVNc1RVRkJUU3hGUVVGRk8xRkJRMVk3VFVGRFJpeERRVUZETEVWQlEwUXNRMEZCUXl4RFFVTklMRU5CUVVNN1RVRkZSQ3hwUWtGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRaRHRGUVVOR0xFTkJRVU03UlVGRlJDeE5RVUZOTzBsQlFVVXNTVUZCU1R0SlFVRkZPMFZCUVZFc1EwRkJReXhIUVVGSExHZENRVUZuUWp0RlFVVXhReXhKUVVGSkxHZENRVUZuUWl4RlFVRkZPMGxCUTNCQ0xHOUNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExITkNRVUZCTEVOQlFVRXNUMEZCY1VJN1RVRkRjRUlzVTBGQlV5eEZRVUZETERCQ1FVRXdRanROUVVOd1F5eG5Ra0ZCWjBJc1JVRkJSU3huUWtGQmFVSTdUVUZEYmtNc1kwRkJZeXhGUVVGRkxHdENRVUZyUWl4TFFVRkxMR2xDUVVGclFqdE5RVU42UkN4blFrRkJaMElzUlVGQlJTeERRVUZCTEV0QlFVMHNjMEpCUVhOQ0xFTkJRVU03U1VGQlJTeG5Ra0ZGYWtRc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNhMEpCUVVFc1EwRkJRU3hQUVVGcFFqdE5RVU5vUWl4aFFVRmhMRVZCUVVVc1EwRkJRU3hMUVVGTkxHMUNRVUZ0UWl4RFFVRkRMRXRCUVVzc1EwRkJSVHROUVVOb1JDeFJRVUZSTEVWQlFVVXNTMEZCVFR0TlFVTm9RaXhuUWtGQlowSXNSVUZCUXp0SlFVRlpMRU5CUXpsQ0xFTkJRMjlDTEVOQlFVTTdSVUZGTlVJN1JVRkZRU3h2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXh6UWtGQlFTeERRVUZCTEU5QlFYRkNPMGxCUTNCQ0xGTkJRVk1zUlVGQlF5d3dRa0ZCTUVJN1NVRkRjRU1zWjBKQlFXZENMRVZCUVVVc1owSkJRV2xDTzBsQlEyNURMR05CUVdNc1JVRkJSU3hyUWtGQmEwSXNTMEZCU3l4cFFrRkJhMEk3U1VGRGVrUXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlFTeExRVUZOTEhOQ1FVRnpRaXhEUVVGRE8wVkJRVVVzWjBKQlJXcEVMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHRKUVVOSUxFVkJRVVVzUlVGQlF5eE5RVUZOTzBsQlExUXNVMEZCVXl4RlFVRkZMRU5CUVVVN1NVRkRZaXhQUVVGUExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4WlFVRmhPMGxCUTJ4RExGVkJRVlVzUlVGQlJTeDVRa0ZCVnl4RFFVRkRPMFZCUVU4c1IwRkZPVUlzU1VGRFJ5eERRVUZETEdWQlExQXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zU1VGQlFTeERRVUZCTEU5QlFVYzdTVUZEUml4VFFVRlRMRVZCUVVNc2RVSkJRWFZDTzBsQlEycERMRmRCUVZjc1JVRkJSU3g1UWtGQlZ5eERRVUZETEV0QlFVMDdTVUZETDBJc1YwRkJWeXhGUVVGRkxIbENRVUZYTEVOQlFVTXNZVUZCWXp0SlFVTjJReXhYUVVGWExFVkJRVVVzUTBGQlJUdEpRVU5tTEZOQlFWTXNSVUZCUlN4RFFVRkZPMGxCUTJJc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJRenRGUVVGRkxFZEJSWEpDTEVsQlFVRXNiME5CUVc5Q0xFVkJRVU1zVDBGQlR5eERRVU14UWl4RFFVRkRMR1ZCUTA0c1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNTVUZCUVN4RFFVRkJMRTlCUVVjN1NVRkRSaXhUUVVGVExFVkJRVU1zYlVOQlFXMURPMGxCUXpkRExFdEJRVXNzUlVGQlJTeDVRa0ZCVnl4RFFVRkRMRWxCUVVzN1NVRkRlRUlzVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF6dEZRVUZGTEVOQlEzUkNMRU5CUVVNc1pVRkRSaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4cFFrRkJRU3hEUVVGQkxFbEJRVWs3U1VGRFNDeFBRVUZQTEVWQlFVVXNlVUpCUVZjc1EwRkJReXhaUVVGaE8wbEJRMnhETEUxQlFVMHNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUlR0SlFVTnlRaXhWUVVGVkxFVkJRVVVzZVVKQlFWY3NRMEZCUXp0RlFVRlBMRWRCUlRsQ0xFTkJRVU1zUTBGQlF5eHBRa0ZCYVVJc1EwRkRhRUlzUTBGQlF5eEZRVU5PTEZWQlFWVXNaMEpCUTFRc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNWMEZCUVN4RFFVRkJMRTlCUVdsQ08wbEJRVU1zVlVGQlZTeEZRVUZGTzBWQlFWY3NRMEZCUlN4RFFVRkRMR2RDUVVVM1F5eE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhqUVVGQkxFTkJRVUVzVDBGQllUdEpRVUZETEZkQlFWY3NSVUZCUlR0RlFVRlpMRU5CUVVVc1EwRkRNME1zUlVGRFFTeFhRVUZYTEdsQ1FVTldMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHRKUVVGRExFdEJRVXNzUlVGQlJTeHRRa0ZCU3l4RFFVRkRMRmxCUVdFN1NVRkJReXhQUVVGUExFVkJRVVVzZVVKQlFWY3NRMEZCUXp0RlFVRlBMRWRCUXpGRUxFOUJRMGNzUTBGRFVDeGxRVU5FTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNWMEZCVnp0SlFVTldMRTlCUVU4c1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJSVHRKUVVOMFFpeFZRVUZWTEVWQlFVVXNRMEZCUlR0SlFVTmtMRmRCUVZjc1JVRkJSU3hEUVVGRk8wbEJRMllzVTBGQlV5eEZRVUZGTEVOQlFVVTdTVUZEWWl4UlFVRlJMRVZCUVVNN1JVRkJVU3hIUVVWb1FpeERRVUZETEVOQlFVTXNiVUpCUVcxQ0xFTkJRMWdzUTBGQlF5eGxRVU5rTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExFbEJRVUVzUTBGQlFTeFBRVUZITzBsQlEwWXNUMEZCVHl4RlFVRkZMSEZDUVVGUExFTkJRVU1zU1VGQlN6dEpRVU4wUWl4aFFVRmhMRVZCUVVVc05FSkJRV01zUTBGQlF5eEhRVUZKTzBsQlEyeERMRXRCUVVzc1JVRkJSU3g1UWtGQlZ5eERRVUZETEVsQlFVczdTVUZEZUVJc1kwRkJZeXhGUVVGRkxEUkNRVUZqTEVOQlFVTXNXVUZCWVR0SlFVTTFReXhUUVVGVExFVkJRVVVzUTBGQlJUdEpRVU5pTEU5QlFVOHNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTTdSVUZCUlN4SFFVVnlRaXhEUVVGRExGVkJRVlVzYVVKQlExWXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4TlFVRk5PMGxCUTB3c1NVRkJTU3hGUVVGRkxHZERRVUZqTEVOQlFVTXNVMEZCVlR0SlFVTXZRaXhKUVVGSkxFVkJRVVVzT0VKQlFWa3NRMEZCUXl4RlFVRkhPMGxCUTNSQ0xFdEJRVXNzUlVGQlJTeDVRa0ZCVnl4RFFVRkRMRWxCUVVzN1NVRkRlRUlzVjBGQlZ5eEZRVUZGTEVOQlFVVTdTVUZEWml4UFFVRlBMRVZCUVVVc1EwRkJRU3hMUVVGTk8wMUJRMklzVlVGQlZTeERRVUZETzFGQlExUXNVVUZCVVN4RlFVRkZMSEZEUVVGM1FpeERRVUZETEVsQlFVazdVVUZEZGtNc1MwRkJTeXhGUVVGRkxHbERRVUZ2UWl4RFFVRkRMR2xDUVVGcFFqdFJRVU0zUXl4VlFVRlZMRVZCUVVVN1ZVRkRWaXhSUVVGUkxFVkJRVVVzYjBOQlFYVkNMRU5CUVVNN1VVRkRjRU03VFVGRFJpeERRVUZETEVOQlFVTTdUVUZEUml4VFFVRlRMRU5CUVVNc1EwRkJRenRKUVVOaU8wVkJRVVVzUjBGRlJDeERRVUZETEVOQlFVTXNVVUZCVVN4RFFVTk1MRU5CUTFRc1JVRkRRU3hWUVVGVkxHZENRVU5VTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNUVUZCVFR0SlFVTk1MRWxCUVVrc1JVRkJSU3huUTBGQll5eERRVUZETEU5QlFWRTdTVUZETjBJc1NVRkJTU3hGUVVGRkxEaENRVUZaTEVOQlFVTXNSVUZCUnp0SlFVTjBRaXhMUVVGTExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4SlFVRkxPMGxCUTNoQ0xFOUJRVThzUlVGQlJTeERRVUZCTEV0QlFVMDdUVUZEWWl4VFFVRlRMRU5CUVVNc1EwRkJRenRKUVVOaU8wVkJRVVVzUjBGRlJDeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVTklMRU5CUVVNc1owSkJSVlFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2FVSkJRVUVzUTBGQlFTeE5RVUZOTzBsQlEwd3NTVUZCU1N4RlFVRkZMR2REUVVGakxFTkJRVU1zVDBGQlVUdEpRVU0zUWl4SlFVRkpMRVZCUVVVc09FSkJRVmtzUTBGQlF5eEZRVUZITzBsQlEzUkNMRXRCUVVzc1JVRkJSU3g1UWtGQlZ5eERRVUZETEVsQlFVczdTVUZEZUVJc1QwRkJUeXhGUVVGRkxFTkJRVUVzUzBGQlRUdE5RVU5pTEZWQlFWVXNRMEZCUXp0UlFVTlVMRkZCUVZFc1JVRkJSU3h4UTBGQmQwSXNRMEZCUXl4SlFVRkpPMUZCUTNaRExFdEJRVXNzUlVGQlJTeHBRMEZCYjBJc1EwRkJReXhyUWtGQmEwSTdVVUZET1VNc1ZVRkJWU3hGUVVGRk8xVkJRMVlzVVVGQlVTeEZRVUZGTEc5RFFVRjFRaXhEUVVGRE8xRkJRM0JETzAxQlEwWXNRMEZCUXl4RFFVRkRPMDFCUlVZc05rSkJRVFpDTEVOQlFVTXNVVUZCVVN4RlFVRkZMRTlCUVU4c1EwRkJRenRKUVVOc1JDeERRVUZGTzBsQlEwWXNVVUZCVVN4RlFVRkZMRU5CUVVNN1JVRkJVeXhIUVVWdVFpeERRVUZETEVOQlFVTXNVMEZCVXl4RFFVTk9MRU5CUlZBc1EwRkRaMElzUTBGQlF6dEJRVVUxUWl4RFFVRkRPMEZCUlVRc2NVSkJRWEZDTEVOQlFVTXNVMEZCVXl4SFFVRkhPMFZCUTJoRExHRkJRV0VzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVk8wVkJRM2hETEdkQ1FVRm5RaXhGUVVGRkxHdENRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVZVN1JVRkROME1zVDBGQlR5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTVHRGUVVOMlFpeHpRa0ZCYzBJc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZPMFZCUTJwRUxGTkJRVk1zUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVk8wVkJRM0JETEZkQlFWY3NSVUZCUlN4clFrRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTzBWQlEzUkRMRzFDUVVGdFFpeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlU3UlVGRE9VTXNhMEpCUVd0Q0xFVkJRVVVzYTBKQlFWTXNRMEZCUXp0QlFVTm9ReXhEUVVGRE8wRkJRVU1zU1VGQlFTeFJRVUZCTEVkQlJXRXNTVUZCUVN4MVFrRkJZeXhGUVVGRExIRkNRVUZ4UWl4RFFVRkRPMEZCUVVFc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeFJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzSlFjRVFzU1VGQlFTeFhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1VVRkJRU3hIUVVGQkxFOUJRVUU3UVVGUFFTeEpRVUZCTEZWQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3h6UWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVGNVJTeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGRmVrVXNVMEZCVXl4elFrRkJjMElzUTBGQlFTeEZRVUZITzBWQlEyaERMRWxCUVVrc1owSkJRV2RDTEVkQlFVY3NTVUZCU1R0RlFVTXpRaXhQUVVGUExGTkJRVk1zWlVGQlpTeERRVUZETEV0QlFVc3NSVUZCUlR0SlFVTnlRenRKUVVOQk8wbEJRMEU3U1VGRFFUdEpRVU5CTEdkQ1FVRm5RaXhIUVVGSExHZENRVUZuUWl4SlFVRkpMRWxCUVVFc09FSkJRVzFDTEVWQlFVTXNTMEZCU3l4RFFVRkRPMGxCUTJwRkxFOUJRVTg3VFVGRFRDeFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUE8wMUJReTlDTEZWQlFWVXNSVUZCUlN4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFZRVUZWTzAxQlEyNUVMR2RDUVVGblFqdE5RVU5vUWl4clFrRkJhMElzUlVGQlJTeExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhyUWtGQmEwSXNRMEZCUXp0SlFVTTVSQ3hEUVVGRE8wVkJRMGdzUTBGQlF6dEJRVU5JTzBGQlJVRXNVMEZCVXl4clFrRkJhMElzUTBGQlF5eFJRVUZSTEVWQlFVVTdSVUZEY0VNc1QwRkJUenRKUVVOTUxHRkJRV0VzUlVGQlJTeERRVUZETEZGQlFWRXNSVUZCUlN4UFFVRlBMRXRCUVVzN1RVRkRjRU1zVDBGQlR5eFJRVUZSTEVOQlFVTXNTVUZCUVN4elFrRkJZU3hGUVVGRExGRkJRVkVzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJSU3hIUVVGSExFbEJRVXM3VVVGRE9VUXNVVUZCVVN4RFFVRkRMRWxCUVVFc2IwSkJRVmNzUlVGQlF5eERRVUZETEVOQlFVTTdVVUZEZGtJc1QwRkJUeXhIUVVGSE8wMUJRMW9zUTBGQlF5eERRVUZETzBsQlEwb3NRMEZCUXp0SlFVTkVMSE5DUVVGelFpeEZRVUZGTEVOQlFVRXNTMEZEZEVJc1VVRkJVU3hEUVVGRExFbEJRVUVzYTBKQlFWTXNSVUZCUXp0TlFVRkZMRWxCUVVrc1JVRkJSVHRKUVVGclFpeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnNSQ3hUUVVGVExFVkJRVVVzUTBGQlFTeExRVUZOTEZGQlFWRXNRMEZCUXl4SlFVRkJMR3RDUVVGVExFVkJRVU1zUTBGQlF5eERRVUZETzBsQlEzUkRMRmRCUVZjc1JVRkJSU3hEUVVGQkxFdEJRVTBzVVVGQlVTeERRVUZETEVsQlFVRXNiMEpCUVZjc1JVRkJReXhEUVVGRExFTkJRVU03U1VGRE1VTXNiVUpCUVcxQ0xFVkJRVVVzUTBGQlFTeExRVUZOTEZGQlFWRXNRMEZCUXl4SlFVRkJMRFJDUVVGdFFpeEZRVUZETEVOQlFVTTdSVUZETTBRc1EwRkJRenRCUVVOSU8wRkJRVU1zU1VGQlFTeFJRVUZCTEVkQlJXTXNTVUZCUVN4dFFrRkJUeXhGUVVOd1FpeHpRa0ZCYzBJc1JVRkRkRUlzYTBKQlEwWXNRMEZCUXl4RFFVRkRMRGhDUVVGeFFpeERRVUZETzBGQlFVRXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hSUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGREwwTjRRaXhKUVVGQkxITkNRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRU3RFTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5CTDBRc1NVRkJRU3hOUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hoUVVGQkxFZEJRVUVzVDBGQlFUdEJRVkZCTEVsQlFVRXNTVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNaVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHbENRVUZCTEVkQlFVRXNUMEZCUVR0QlFVRm5SaXhUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN1FVRkZhRVlzVFVGQlRTeGhRVUZoTEVkQlFVY3NRMEZCUXp0RlFVRkZPMEZCUVZrc1EwRkJReXhMUVVGTE8wVkJRM3BETEUxQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVFc09FSkJRV01zUlVGQlF5eERRVUZETzBWQlJURkNMRzlDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRWxCUVVFc1EwRkJRU3hQUVVGSE8wbEJRMFlzUzBGQlN5eEZRVUZGTEhsQ1FVRlhMRU5CUVVNc1NVRkJTenRKUVVONFFpeGhRVUZoTEVWQlFVVXNORUpCUVdNc1EwRkJReXhOUVVGUE8wbEJRM0pETEU5QlFVOHNSVUZCUlN4eFFrRkJUeXhEUVVGRExFbEJRVXM3U1VGRGRFSXNWVUZCVlN4RlFVRkZMSGRDUVVGVkxFTkJRVU1zVTBGQlZUdEpRVU5xUXl4WFFVRlhMRVZCUVVVc1EwRkJSVHRKUVVObUxGbEJRVmtzUlVGQlJUdEZRVUZGTEdkQ1FVVm9RaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4cFFrRkJRU3hEUVVGQkxFdEJRVXM3U1VGRFNpeExRVUZMTEVWQlFVVXNiVUpCUVVzc1EwRkJReXhYUVVGWk8wbEJRM3BDTEZsQlFWa3NSVUZCUlN4RFFVRkZPMGxCUTJoQ0xFOUJRVThzUlVGQlJTeDVRa0ZCVnl4RFFVRkRPMFZCUVU4c1IwRkZNMElzUTBGQlF5eERRVUZETEdOQlFXTXNRMEZEV2l4RFFVRkRMR1ZCUTFJc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNhVUpCUVVFc1EwRkJRU3hUUVVGVE8wbEJRMUlzUzBGQlN5eEZRVUZGTEhsQ1FVRlhMRU5CUVVNc1NVRkJTenRKUVVONFFpeFhRVUZYTEVWQlFVVXNRMEZCUXl4RFFVRkRMR1ZCUVdVc1EwRkJSVHRKUVVOb1F5eEpRVUZKTEVWQlFVVXNhME5CUVdkQ0xFTkJRVU1zVVVGQlV6dEpRVU5vUXl4VFFVRlRMRVZCUVVNc01FTkJRVEJETzBsQlEzQkVMRkZCUVZFc1JVRkJSeXhMUVVGTExFbEJRVXNzVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRk8wbEJRM0pFTEdWQlFWazdSVUZCWjBJc1EwRkROMElzUTBGRFJTeERRVUZETzBGQlJWWXNRMEZCUXp0QlFVVkVMR0ZCUVdFc1EwRkJReXhUUVVGVExFZEJRVWM3UlVGRGVFSXNWMEZCVnl4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlF6bENMRU5CUVVNN1FVRkJReXhKUVVGQkxGRkJRVUVzUjBGRllTeGhRVUZoTzBGQlFVRXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hSUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMnBFTlVJc1NVRkJRU3huUWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTFCUVVFc1IwRkJRU3gxUWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFpRVUZCTEVkQlFVRXNUMEZCUVR0QlFVdEJMRWxCUVVFc1lVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdGQlFVRXNSMEZCUVN4UFFVRkJPMEZCVjBFc1NVRkJRU3hwUWtGQlFTeEhRVUZCTEU5QlFVRTdRVUZCYlVRc1UwRkJRU3g1UWtGQlFTeFhRVUZCTEdWQlFVRXNUMEZCUVN4clEwRkJRU3hwUWtGQlFTeFBRVUZCTEU5QlFVRXNVVUZCUVN4blFrRkJRU3hQUVVGQkxFOUJRVUVzV1VGQlFTeDNRa0ZCUVN4WlFVRkJMRU5CUVVFc1YwRkJRU3hYUVVGQkxGZEJRVUVzUjBGQlFTeG5Ra0ZCUVN4SFFVRkJMR2xDUVVGQkxFdEJRVUVzVjBGQlFUdEJRVUZCTEZOQlFVRXNkMEpCUVVFc1IwRkJRU3hGUVVGQkxGZEJRVUVzVTBGQlFTeFhRVUZCTEVsQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxGZEJRVUVzUjBGQlFTeFJRVUZCTEVkQlFVRXNiMEpCUVVFc1IwRkJRU3gzUWtGQlFTeEhRVUZCTERSQ1FVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQkxGVkJRVUVzUzBGQlFTeEhRVUZCTEhkQ1FVRkJMRU5CUVVFc1YwRkJRU3hQUVVGQkxFdEJRVUVzU1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1dVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNVMEZCUVN4TlFVRkJMRmRCUVVFc2NVSkJRVUVzUjBGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4SlFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3hyUWtGQlFTeE5RVUZCTEVOQlFVRXNVMEZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNVMEZCUVN4SlFVRkJMRWRCUVVFc2NVSkJRVUVzUjBGQlFTeE5RVUZCTEVOQlFVRXNkMEpCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeGpRVUZCTEVsQlFVRXNTMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hOUVVGQkxFVkJRVUVzUjBGQlFTeEZRVUZCTEVsQlFVRXNXVUZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEZOQlFVRXNUVUZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hIUVVGQkxFMUJRVUVzUzBGQlFTeEpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFMUJRVUVzV1VGQlFTeE5RVUZCTzBGQlFVRXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlJXNUVMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NRMEZCUXp0RlFVRkZPMEZCUVZjc1EwRkJReXhMUVVGTE8wVkJRelZETEUxQlFVMHNWVUZCVlN4SFFVRkhMRWxCUVVFc2FVSkJRVlVzUlVGQlF5eG5RMEZCYTBJc1EwRkJRenRGUVVOcVJDeE5RVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkJMRGhDUVVGakxFVkJRVU1zUTBGQlF6dEZRVU14UWl4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGQkxEaENRVUZqTEVWQlFVTXNWVUZCVlN4RFFVRkRPMFZCUlRORExHOUNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExFbEJRVUVzUTBGQlFTeFBRVUZITzBsQlEwWXNTMEZCU3l4RlFVRkZMSGxDUVVGWExFTkJRVU1zU1VGQlN6dEpRVU40UWl4aFFVRmhMRVZCUVVVc05FSkJRV01zUTBGQlF5eE5RVUZQTzBsQlEzSkRMRTlCUVU4c1JVRkJSU3h4UWtGQlR5eERRVUZETEVsQlFVczdTVUZEZEVJc1ZVRkJWU3hGUVVGRkxIZENRVUZWTEVOQlFVTXNVMEZCVlR0SlFVTnFReXhYUVVGWExFVkJRVVVzUTBGQlJUdEpRVU5tTEZsQlFWa3NSVUZCUlR0RlFVRkZMR2RDUVVWb1FpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhwUWtGQlFTeERRVUZCTEV0QlFVczdTVUZEU2l4TFFVRkxMRVZCUVVVc2JVSkJRVXNzUTBGQlF5eFhRVUZaTzBsQlEzcENMRmxCUVZrc1JVRkJSU3hEUVVGRk8wbEJRMmhDTEU5QlFVOHNSVUZCUlN4NVFrRkJWeXhEUVVGRE8wVkJRVThzUjBGRk0wSXNRMEZCUXl4RFFVRkRMR2RDUVVGblFpeERRVU5rTEVOQlFVTXNaVUZEVWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eEpRVUZCTEVOQlFVRXNUMEZCUnp0SlFVTkdMRk5CUVZNc1JVRkJReXdyUTBGQkswTTdTVUZEZWtRc1MwRkJTeXhGUVVGRkxIbENRVUZYTEVOQlFVTXNTVUZCU3p0SlFVTjRRaXhYUVVGWExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4TFFVRk5PMGxCUXk5Q0xGZEJRVmNzUlVGQlJTeDVRa0ZCVnl4RFFVRkRMR0ZCUVdNN1NVRkRka01zV1VGQldTeEZRVUZGTERCQ1FVRlpMRU5CUVVNc1JVRkJSenRKUVVNNVFpeFhRVUZYTEVWQlFVVXNRMEZCUlR0SlFVTm1MRTlCUVU4c1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkZPMGxCUTI1Q0xFdEJRVXNzUlVGQlJTeHRRa0ZCU3l4RFFVRkRMRmxCUVdFN1NVRkRNVUlzVDBGQlR5eEZRVUZGTEVOQlFVRXNTMEZCVFR0TlFVTmlMRWxCUVVFc2QwSkJRV1VzUlVGQlF5eFJRVUZSTEVOQlFVTTdUVUZEZWtJc1ZVRkJWU3hEUVVOU08xRkJRMFVzVVVGQlVTeEZRVUZGTEhGRFFVRjNRaXhEUVVGRExFbEJRVWs3VVVGRGRrTXNTMEZCU3l4RlFVRkZMR2xEUVVGdlFpeERRVUZETEdWQlFXVTdVVUZETTBNc1ZVRkJWU3hGUVVGRk8xVkJRMVlzVVVGQlVTeEZRVUZGTEc5RFFVRjFRaXhEUVVGRExFbEJRVWs3VlVGRGRFTXNWMEZCVnl4RlFVRkZPMUZCUTJZN1RVRkRSaXhEUVVGRExFVkJRMFFzUTBGQlF5eERRVU5JTEVOQlFVTTdTVUZEU0R0RlFVRkZMRWRCUlVRc1VVRkRSU3hEUVVOR0xFTkJRVU03UVVGRlZpeERRVUZETzBGQlJVUXNhVUpCUVdsQ0xFTkJRVU1zVTBGQlV5eEhRVUZITzBWQlF6VkNMRlZCUVZVc1JVRkJSU3hyUWtGQlV5eERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTXZRaXhEUVVGRE8wRkJRVU1zU1VGQlFTeFJRVUZCTEVkQlJXRXNhVUpCUVdsQ08wRkJRVUVzVDBGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4UlFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJoR2FFTXNTVUZCUVN4TlFVRkJMRWRCUVVFc2RVSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFXMURMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVRkJMRk5CUVVFc2VVSkJRVUVzVjBGQlFTeGxRVUZCTEU5QlFVRXNhME5CUVVFc2FVSkJRVUVzVDBGQlFTeFBRVUZCTEZGQlFVRXNaMEpCUVVFc1QwRkJRU3hQUVVGQkxGbEJRVUVzZDBKQlFVRXNXVUZCUVN4RFFVRkJMRmRCUVVFc1YwRkJRU3hYUVVGQkxFZEJRVUVzWjBKQlFVRXNSMEZCUVN4cFFrRkJRU3hMUVVGQkxGZEJRVUU3UVVGQlFTeFRRVUZCTEhkQ1FVRkJMRWRCUVVFc1JVRkJRU3hYUVVGQkxGTkJRVUVzVjBGQlFTeEpRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hYUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEc5Q1FVRkJMRWRCUVVFc2QwSkJRVUVzUjBGQlFTdzBRa0ZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRU3hWUVVGQkxFdEJRVUVzUjBGQlFTeDNRa0ZCUVN4RFFVRkJMRmRCUVVFc1QwRkJRU3hMUVVGQkxFbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRmxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEZOQlFVRXNUVUZCUVN4WFFVRkJMSEZDUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNTVUZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2EwSkJRVUVzVFVGQlFTeERRVUZCTEZOQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEZOQlFVRXNTVUZCUVN4SFFVRkJMSEZDUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzWTBGQlFTeEpRVUZCTEV0QlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1RVRkJRU3hGUVVGQkxFZEJRVUVzUlVGQlFTeEpRVUZCTEZsQlFVRXNUVUZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFRRVUZCTEUxQlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc1IwRkJRU3hOUVVGQkxFdEJRVUVzU1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hOUVVGQkxGbEJRVUVzVFVGQlFUdEJRVUZCTEZOQlFVRXNaMEpCUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzUlVGQlFTeExRVUZCTEVsQlFVRXNSMEZCUVN4SFFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQkxFOUJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNTVUZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEVsQlFVRXNTMEZCUVN4RlFVRkJMRXRCUVVFc1JVRkJRU3hWUVVGQkxGRkJRVUVzV1VGQlFTeFJRVUZCTEZGQlFVRXNiMEpCUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeExRVUZCTEZkQlFVRXNSMEZCUVR0QlFVRkJMRk5CUVVFc1pVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeEhRVUZCTEZsQlFVRXNRMEZCUVN4SFFVRkJMREpDUVVGQkxFZEJRVUVzWjBKQlFVRXNSMEZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeGhRVUZCTEV0QlFVRXNSVUZCUVN4SlFVRkJMR1ZCUVVFc1MwRkJRU3hwUWtGQlFTeExRVUZCTEd0Q1FVRkJMRXRCUVVFc1RVRkJRU3hKUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEUxQlFVRXNRMEZCUVN4WFFVRkJMRTlCUVVFc1NVRkJRU3hMUVVGQkxGTkJRVUVzVVVGQlFTeEhRVUZCTEVkQlFVRXNTVUZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hMUVVGQkxFVkJRVUVzU1VGQlFTd3lRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFZEJRVUVzV1VGQlFTeFRRVUZCTERSRVFVRkJMRWxCUVVFc1owSkJRVUVzVFVGQlFTeEhRVUZCTEUxQlFVRXNSVUZCUVN4TFFVRkJPMEZCUlc1RExFbEJRVWtzUzBGQlN5eEhRVUZITEVOQlFVTTdRVUZEWWl4SlFVRkpMRlZCUVZVN1FVRkZaQ3hOUVVGTkxGVkJRVlVzUjBGQlNTeEhRVUZITEVsQlFVczdSVUZETVVJc1NVRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJUdEpRVU5tTzBsQlEwRXNWVUZCVlN4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zVDBGQlR5eERRVUZETzBsQlF6VkRMRkZCUVZFc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNWVUZCVlN4RFFVRkRPMGxCUTJoRk8wbEJRMEVzVlVGQlZTeEhRVUZITEZWQlFWVXNRMEZCUXl4TFFVRkxMRWxCUVVrc1ZVRkJWU3hEUVVGRExGVkJRVlU3UlVGRGVFUTdSVUZGUVN4VlFVRlZMRU5CUVVNc1ZVRkJWU3hEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEZWQlFWVXNRMEZCUXl4UlFVRlJMRWxCUVVrc1ZVRkJWU3hEUVVGRExFdEJRVXNzUlVGQlJTeE5RVUZOTEVOQlFVTTdSVUZGTlVVc1QwRkJUeXhWUVVGVk8wRkJRMjVDTEVOQlFVTTdRVUZGUkN4TlFVRk5MRzFDUVVGdFFpeEhRVUZKTEZOQlFWTXNTVUZCU3p0RlFVTjZRenRGUVVOQk8wVkJRMEVzVFVGQlRTeEpRVUZKTEVkQlFVa3NVVUZCVHl4RlFVRkZMRXRCUVUwc1IwRkJSU3hOUVVGTkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkZMRVZCUVVNN1JVRkRia1FzU1VGQlNTeEhRVUZITEVkQlFVa3NZMEZCWVN4SlFVRkxMRWxCUVVjN1JVRkZhRU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVVVzUjBGQlJ5eEpRVUZMTzBsQlEzUkRMRWRCUVVjc1NVRkJTeXhIUVVGRkxFZEJRVWtzU1VGQlJ6dEpRVVZxUWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJSU3hSUVVGUkxFbEJRVXM3VFVGRGFFUXNUVUZCVFN4SlFVRkpMRWRCUVVrc1NVRkJSeXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkZMRWRCUVVVN1RVRkROVU1zUjBGQlJ5eEpRVUZKTEZGQlFWRXNSMEZCUnl4SlFVRkpPMGxCUTNoQ0xFTkJRVU1zUTBGQlF6dEpRVVZHTEVkQlFVY3NTVUZCU1N4SFFVRkhPMFZCUTFvc1EwRkJReXhEUVVGRE8wVkJSVVlzUjBGQlJ5eEpRVUZKTEVkQlFVYzdSVUZGVml4VlFVRlZMRU5CUVVNc1IwRkJSeXhEUVVGRE8wVkJSV1lzVDBGQlR5eEpRVUZKTzBGQlEySXNRMEZCUXp0QlFVVkVMRTFCUVUwc1UwRkJVeXhIUVVGSE8wVkJRMmhDTEVsQlFVa3NSVUZCUlR0SlFVTktMR2xDUVVGcFFpeEZRVUZGTEUxQlFVMDdTVUZEZWtJc2RVSkJRWFZDTEVWQlFVVTdSVUZETTBJc1EwRkJRenRGUVVORUxFbEJRVWtzUlVGQlJUdEpRVU5LTEdsQ1FVRnBRaXhGUVVGRkxFMUJRVTA3U1VGRGVrSXNkVUpCUVhWQ0xFVkJRVVU3UlVGRE0wSXNRMEZCUXp0RlFVTkVMRzlDUVVGdlFpeEZRVUZGTEcxQ1FVRnRRaXhEUVVGRE8wbEJRM2hETEVsQlFVa3NSVUZCUlR0TlFVTktMRTlCUVU4c1JVRkJSVHRKUVVOWUxFTkJRVU03U1VGRFJDeE5RVUZOTEVWQlFVVTdUVUZEVGl4UFFVRlBMRVZCUVVVN1NVRkRXRHRGUVVOR0xFTkJRVU1zUTBGQlF6dEZRVU5HTEc5Q1FVRnZRaXhGUVVGRkxHMUNRVUZ0UWl4RFFVRkRPMGxCUTNoRExFbEJRVWtzUlVGQlJUdE5RVU5LTEU5QlFVOHNSVUZCUlR0SlFVTllMRU5CUVVNN1NVRkRSQ3hOUVVGTkxFVkJRVVU3VFVGRFRpeFBRVUZQTEVWQlFVVTdTVUZEV0R0RlFVTkdMRU5CUVVNc1EwRkJRenRGUVVOR0xIRkNRVUZ4UWl4RlFVRkZMRzFDUVVGdFFpeERRVUZETzBsQlEzcERMRWxCUVVrc1JVRkJSVHROUVVOS0xFOUJRVThzUlVGQlJUdEpRVU5ZTEVOQlFVTTdTVUZEUkN4TlFVRk5MRVZCUVVVN1RVRkRUaXhQUVVGUExFVkJRVVU3U1VGRFdEdEZRVU5HTEVOQlFVTXNRMEZCUXp0RlFVTkdMSEZDUVVGeFFpeEZRVUZGTEcxQ1FVRnRRaXhEUVVGRE8wbEJRM3BETEVsQlFVa3NSVUZCUlR0TlFVTktMRTlCUVU4c1JVRkJSVHRKUVVOWUxFTkJRVU03U1VGRFJDeE5RVUZOTEVWQlFVVTdUVUZEVGl4UFFVRlBMRVZCUVVVN1NVRkRXRHRGUVVOR0xFTkJRVU03UVVGRFNDeERRVUZETzBGQlJVUXNUVUZCVFN4VFFVRlRMRWRCUVVjc1EwRkJReXhsUVVGbExFVkJRVVVzWTBGQll5eERRVUZETzBGQlJXNUVMRk5CUVZNc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRk5CUVZNc1JVRkJSU3hoUVVGaExFVkJRVVU3UlVGRGVFUXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEZOQlFWTXNSVUZCUlN4aFFVRmhMRVZCUVVVc1MwRkJTeXhEUVVGRE8wRkJRM2hFTzBGQlJVRXNVMEZCVXl4dFFrRkJiVUlzUTBGQlF5eEpRVUZKTEVWQlFVVXNVMEZCVXl4RlFVRkZMR0ZCUVdFc1JVRkJSVHRGUVVNelJDeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVTBGQlV5eEZRVUZGTEdGQlFXRXNSVUZCUlN4TFFVRkxMRU5CUVVNN1FVRkRNMFE3UVVGRlFTeE5RVUZOTEhOQ1FVRnpRaXhIUVVGSExFTkJRVU1zU1VGQlNTeEZRVUZGTEdGQlFXRXNTMEZCU3p0RlFVTjBSQ3hKUVVGSkxGTkJRVk1zUTBGQlF5eE5RVUZOTEV0QlFVc3NRMEZCUXl4RlFVRkZPMGxCUXpGQ08wVkJRMFk3UlVGRFFTeFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVZVc1VVRkJVU3hGUVVGRk8wbEJRM0JETEcxQ1FVRnRRaXhEUVVGRExFbEJRVWtzUlVGQlJTeFJRVUZSTEVWQlFVVXNZVUZCWVN4RFFVRkRPMFZCUTNCRUxFTkJRVU1zUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZGUkN4TlFVRk5MRzFDUVVGdFFpeEhRVUZITEVOQlFVTXNTVUZCU1N4RlFVRkZMR0ZCUVdFc1MwRkJTenRGUVVOdVJDeEpRVUZKTEZOQlFWTXNRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJReXhGUVVGRk8wbEJRekZDTzBsQlEwRTdTVUZEUVN4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGRExHRkJRV0VzUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEYmtNN1JVRkRSanRGUVVOQkxGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4UlFVRlJMRVZCUVVVN1NVRkRjRU1zWjBKQlFXZENMRU5CUVVNc1NVRkJTU3hGUVVGRkxGRkJRVkVzUlVGQlJTeGhRVUZoTEVOQlFVTTdSVUZEYWtRc1EwRkJReXhEUVVGRE8wRkJRMG9zUTBGQlF6dEJRVVZFTEUxQlFVMHNVMEZCVXl4VFFVRlRMR2RDUVVGVExFTkJRVU03UlVGQlFTeFpRVUZCTEVkQlFVRXNTVUZCUVR0SlFVRkJMRk5CUVVFc1NVRkJRVHRKUVVGQkxHVkJRVUVzYTBKQlEzUkNMRWxCUVVrN1NVRkJRU3hsUVVGQkxHZENRVEJDVGp0TlFVTk9MRkZCUVZFc1JVRkJSU3hKUVVGSk8wMUJRMlFzVFVGQlRTeEZRVUZGTzBsQlExWXNRMEZCUXp0SlFVRkJMR1ZCUVVFc1owTkJSWFZDTEVOQlFVTXNTVUZCU1N4RlFVRkZMRTFCUVUwc1MwRkJTenROUVVONFF5eEpRVUZKTEVsQlFVa3NSVUZCUlR0UlFVTlNMRTFCUVUwc1YwRkJWeXhIUVVGSExGTkJRVUVzUTBGQlZTeERRVUZETEVWQlFVVTdWVUZETDBJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEUxQlFVMHNTMEZCU3l4SlFVRkpMRVZCUVVVN1dVRkRNVUk3VlVGRFJqdFZRVU5CTEhOQ1FVRnpRaXhEUVVGRExFbEJRVWtzUlVGQlJTeFhRVUZYTEVOQlFVTTdWVUZEZWtNc1RVRkJUU3hEUVVGRExFTkJRVU03VVVGRFZpeERRVUZETzFGQlEwUXNiVUpCUVcxQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEZkQlFWY3NRMEZCUXp0TlFVTjRRenRKUVVOR0xFTkJRVU03U1VGQlFTeGxRVUZCTERoQ1FVVnhRaXhOUVVGTk8wMUJRekZDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhaUVVGWkxFVkJRVVU3VVVGRE0wSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wMUJRMkk3U1VGRFJpeERRVUZETzBsQlFVRXNaVUZCUVN4dlFrRkZWeXhOUVVGTk8wMUJRMmhDTEU5QlFVOHNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTk8wbEJRekZDTEVOQlFVTTdTVUZCUVN4bFFVRkJMR2RDUVhsRVR5eE5RVUZOTzAxQlExb3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJRenRSUVVOYUxFMUJRVTBzUlVGQlJUdE5RVU5XTEVOQlFVTXNRMEZCUXp0TlFVTkdMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hEUVVGRE8wbEJRekZETEVOQlFVTTdTVUZCUVN4bFFVRkJMR2RDUVVWUExFMUJRVTA3VFVGRFdpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8wbEJRM0pDTEVOQlFVTTdTVUZCUVN4bFFVRkJMR1ZCUlUwc1RVRkJUVHROUVVOWUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1JVRkJSVHRSUVVOMFFqdE5RVU5HTzAxQlJVRXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJRenRSUVVOYUxGRkJRVkVzUlVGQlJTeExRVUZMTzFGQlEyWXNUVUZCVFN4RlFVRkZPMDFCUTFZc1EwRkJReXhEUVVGRE8wMUJSVVlzVlVGQlZTeERRVU5TTEZsQlFWazdVVUZEVml4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzAxQlEzUkVMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlExb3NRMEZEUml4RFFVRkRPMGxCUTBnc1EwRkJRenRKUVVGQkxHVkJRVUVzWlVGRlRTeE5RVUZOTzAxQlExZ3NTVUZCU1N4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUlVGQlJUdFJRVU53UWp0TlFVTkdPMDFCUlVFc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dFJRVU5hTEZGQlFWRXNSVUZCUlR0TlFVTmFMRU5CUVVNc1EwRkJRenRKUVVOS0xFTkJRVU03U1VGQlFTeGxRVUZCTEhsQ1FVVnBRaXhMUVVGTExFbEJRVXM3VFVGRE1VSXNTVUZCU1N4UFFVRlBMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeExRVUZMTEZWQlFWVXNSVUZCUlR0UlFVTTNReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNN1RVRkROVUlzUTBGQlF5eE5RVUZOTzFGQlEwd3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhMUVVGTExFTkJRVU03VFVGRGVFSTdTVUZEUml4RFFVRkRPMGxCUVVFc1pVRkJRU3h4UWtGRllTeExRVUZMTEVsQlFVczdUVUZEZEVJc1NVRkRSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNTMEZEYkVJc1MwRkJTeXhEUVVGRExFZEJRVWNzUzBGQlN5eFJRVUZSTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1MwRkJTeXhGUVVGRkxFTkJRVU1zUlVGRGFFUTdVVUZEUVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VFVGRFlqdEpRVU5HTEVOQlFVTTdTVUZCUVN4bFFVRkJMRzFEUVVVd1FpeE5RVUZOTzAxQlF5OUNMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4VFFVRlRMRVZCUVVVc1NVRkJTU3hEUVVGRExHTkJRV01zUlVGQlJTeEpRVUZKTEVOQlFVTTdTVUZETDBRc1EwRkJRenRKUVVGQkxHVkJRVUVzYzBOQlJUWkNMRTFCUVUwN1RVRkRiRU1zVFVGQlRTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExGTkJRVk1zUlVGQlJTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZMRWxCUVVrc1EwRkJRenRKUVVOc1JTeERRVUZETzBWQlFVRTdSVUZ5U0VRc1RVRkJUU3hEUVVGQkxFVkJRVWM3U1VGRFVDeEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hGUVVGRk8wMUJRM0pDTEU5QlFVOHNTVUZCU1R0SlFVTmlPMGxCUlVFc1RVRkJUVHROUVVGRk8wbEJRVk1zUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxPMGxCUXk5Q0xFMUJRVTA3VFVGQlJUdEpRVUZYTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTenRKUVVOcVF5eE5RVUZOTEdGQlFXRXNSMEZCUnp0TlFVTndRaXhoUVVGaExFVkJRVVVzVVVGQlVTeEhRVU51UWl4VFFVRlRMRU5CUVVNc2NVSkJRWEZDTEVkQlF5OUNMRk5CUVZNc1EwRkJReXh4UWtGQmNVSTdUVUZEYmtNc2RVSkJRWFZDTEVWQlFVVXNRMEZCUXl4UlFVRlJMRWRCUVVjc1UwRkJVeXhEUVVGRExFbEJRVWtzUjBGQlJ5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RlFVTnFSU3gxUWtGQmRVSTdUVUZETVVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzBsQlEyaENMRU5CUVVNN1NVRkRSQ3hOUVVGTkxGbEJRVmtzUjBGQlJ6dE5RVU51UWl4cFFrRkJhVUlzUlVGQlJTeERRVUZETEZGQlFWRXNSMEZCUnl4VFFVRlRMRU5CUVVNc1NVRkJTU3hIUVVGSExGTkJRVk1zUTBGQlF5eEpRVUZKTEVWQlF6TkVMR2xDUVVGcFFqdE5RVU53UWl4aFFVRmhMRVZCUVVVc1VVRkJVU3hIUVVOdVFpeFRRVUZUTEVOQlFVTXNiMEpCUVc5Q0xFZEJRemxDTEZOQlFWTXNRMEZCUXl4dlFrRkJiMEk3VFVGRGJFTXNkVUpCUVhWQ0xFVkJRVVVzUTBGQlF5eFJRVUZSTEVkQlFVY3NVMEZCVXl4RFFVRkRMRWxCUVVrc1IwRkJSeXhUUVVGVExFTkJRVU1zU1VGQlNTeEZRVU5xUlN4MVFrRkJkVUk3VFVGRE1VSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRE8wbEJRMmhDTEVOQlFVTTdTVUZGUkN4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNaMEpCUTJ4RExFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0TlFVTkZMRk5CUVZNc1JVRkJReXhwUWtGQmFVSTdUVUZETTBJc1MwRkJTeXhGUVVGRkxHRkJRV003VFVGRGNrSXNUMEZCVHl4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zV1VGQldTeEhRVUZITEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUjBGQlJ6dEpRVUZMTEVOQlEzQkZMRU5CUVVNc1IwRkRRU3hUUVVGVE8wbEJSV0lzU1VGQlNTeFJRVUZSTEVWQlFVVTdUVUZEV2l4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzBsQlEzUkVPMGxCUlVFc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRFJDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0TlFVRkxMRk5CUVZNc1JVRkJReXhQUVVGUE8wMUJRVU1zUzBGQlN5eEZRVUZGTzBsQlFWY3NaMEpCUTNaRExFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0TlFVTkZMRk5CUVZNc1JVRkJReXhuUWtGQlowSTdUVUZETVVJc1IwRkJSeXhGUVVGSExFVkJRVVVzU1VGQlRTeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRVZCUVVrN1RVRkRha01zVVVGQlVTeEZRVUZETEVsQlFVazdUVUZEWWl4TFFVRkxMRVZCUVVVN1NVRkJZU3hIUVVWdVFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUTFRc1EwRkRSaXhEUVVGRExFVkJRMHdzVVVGRFJ5eERRVUZETzBWQlJWZzdRVUZwUlVZN1FVRkJReXhsUVVGQkxFTkJOMHRMTEZOQlFWTXNaVUZIVFR0RlFVTnFRaXhSUVVGUkxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpPMFZCUTNoQ0xHRkJRV0VzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwN1JVRkRMMElzV1VGQldTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTVHRGUVVNMVFpeFpRVUZaTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTk8wVkJRemxDTEZGQlFWRXNSVUZCUlN4clFrRkJVeXhEUVVGRExFbEJRVWs3UlVGRGVFSXNWVUZCVlN4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRUdEZRVU0xUWl4TlFVRk5MRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTzBWQlEzUkNMRTFCUVUwc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVazdSVUZEZEVJc1VVRkJVU3hGUVVGRkxHdENRVUZUTEVOQlFVTTdRVUZEZEVJc1EwRkJRenRCUVVGQkxHVkJRVUVzUTBGaVJ5eFRRVUZUTEd0Q1FXVlRPMFZCUTNCQ0xFMUJRVTBzUlVGQlJTeERRVUZCTEV0QlFVMHNVMEZCVXp0RlFVTjJRaXhOUVVGTkxFVkJRVVVzUTBGQlFTeExRVUZOTEZOQlFWTTdSVUZEZGtJc1VVRkJVU3hGUVVGRkxFbEJRVWs3UlVGRFpDeFJRVUZSTEVWQlFVVXNTVUZCU1R0RlFVTmtMRmxCUVZrc1JVRkJSU3hKUVVGSk8wVkJRMnhDTEZWQlFWVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1JVRkRaQ3hoUVVGaExFVkJRVVVzUTBGQlF5eERRVUZETzBWQlEycENMRmxCUVZrc1JVRkJSU3hEUVVGRExFTkJRVU03UlVGRGFFSXNVVUZCVVN4RlFVRkZPMEZCUTFvc1EwRkJRenRCUVVGQkxFbEJRVUVzVVVGQlFTeEhRWE5LV1N4VFFVRlRPMEZCUVVFc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeFJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzSlRlRUlzU1VGQlFTeFZRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeE5RVUZCTEVkQlFVRXNkVUpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1QwRkJRU3hIUVVGQkxIVkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1QwRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1QwRkJRU3hIUVVGQkxFOUJRVUU3UVVGQmNVVXNVMEZCUVN4NVFrRkJRU3hYUVVGQkxHVkJRVUVzVDBGQlFTeHJRMEZCUVN4cFFrRkJRU3hQUVVGQkxFOUJRVUVzVVVGQlFTeG5Ra0ZCUVN4UFFVRkJMRTlCUVVFc1dVRkJRU3gzUWtGQlFTeFpRVUZCTEVOQlFVRXNWMEZCUVN4WFFVRkJMRmRCUVVFc1IwRkJRU3huUWtGQlFTeEhRVUZCTEdsQ1FVRkJMRXRCUVVFc1YwRkJRVHRCUVVGQkxGTkJRVUVzZDBKQlFVRXNSMEZCUVN4RlFVRkJMRmRCUVVFc1UwRkJRU3hYUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRmRCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYjBKQlFVRXNSMEZCUVN4M1FrRkJRU3hIUVVGQkxEUkNRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJMRlZCUVVFc1MwRkJRU3hIUVVGQkxIZENRVUZCTEVOQlFVRXNWMEZCUVN4UFFVRkJMRXRCUVVFc1NVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNXVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEZkQlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeEpRVUZCTEUxQlFVRXNRMEZCUVN4M1FrRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEZGQlFVRXNSMEZCUVN4clFrRkJRU3hOUVVGQkxFTkJRVUVzVTBGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzVTBGQlFTeEpRVUZCTEVkQlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hqUVVGQkxFbEJRVUVzUzBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4TlFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxFbEJRVUVzV1VGQlFTeE5RVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGTkJRVUVzVFVGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4SFFVRkJMRTFCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRTFCUVVFc1dVRkJRU3hOUVVGQk8wRkJRVUVzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeG5Ra0ZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxFdEJRVUVzU1VGQlFTeEhRVUZCTEVkQlFVRXNZMEZCUVN4RFFVRkJMRWRCUVVFc1QwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzU1VGQlFTeExRVUZCTEVWQlFVRXNTMEZCUVN4RlFVRkJMRlZCUVVFc1VVRkJRU3haUVVGQkxGRkJRVUVzVVVGQlFTeHZRa0ZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFdEJRVUVzVjBGQlFTeEhRVUZCTzBGQlFVRXNVMEZCUVN4bFFVRkJMRWRCUVVFc1VVRkJRU3hIUVVGQkxFZEJRVUVzV1VGQlFTeERRVUZCTEVkQlFVRXNNa0pCUVVFc1IwRkJRU3huUWtGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMRWRCUVVFN1FVRkJRU3hUUVVGQkxHRkJRVUVzUzBGQlFTeEZRVUZCTEVsQlFVRXNaVUZCUVN4TFFVRkJMR2xDUVVGQkxFdEJRVUVzYTBKQlFVRXNTMEZCUVN4TlFVRkJMRWxCUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzVFVGQlFTeERRVUZCTEZkQlFVRXNUMEZCUVN4SlFVRkJMRXRCUVVFc1UwRkJRU3hSUVVGQkxFZEJRVUVzUjBGQlFTeEpRVUZCTEVOQlFVRXNTVUZCUVN4RFFVRkJMRXRCUVVFc1JVRkJRU3hKUVVGQkxESkNRVUZCTEVkQlFVRXNjMEpCUVVFc1IwRkJRU3haUVVGQkxGTkJRVUVzTkVSQlFVRXNTVUZCUVN4blFrRkJRU3hOUVVGQkxFZEJRVUVzVFVGQlFTeEZRVUZCTEV0QlFVRTdRVUZGY2tVc1UwRkJVeXhsUVVGbExFTkJRVU1zUzBGQlN5eEZRVUZGTzBWQlF6bENMRTlCUVU4N1NVRkRUQ3hMUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTzBsQlEyeEVMRTlCUVU4c1JVRkJSU3hMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRE8wVkJRMnBFTEVOQlFVTTdRVUZEU0R0QlFVVkJMRk5CUVZNc2EwSkJRV3RDTEVOQlFVTXNVVUZCVVN4RlFVRkZPMFZCUTNCRExFOUJRVTg3U1VGRFRDeFRRVUZUTEVWQlFVVXNRMEZCUVN4TFFVRk5MRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTTVReXhUUVVGVExFVkJRVWNzVDBGQlR5eEpRVUZMTzAxQlEzUkNMRkZCUVZFc1EwRkRUaXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETzFGQlEyNUNMR05CUVdNc1JVRkJSVHROUVVOc1FpeERRVUZETEVOQlEwZ3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTk8xRkJRMWdzVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRE8wMUJReTlDTEVOQlFVTXNRMEZCUXp0SlFVTktPMFZCUTBZc1EwRkJRenRCUVVOSU8wRkJSVUVzVFVGQlRTd3dRa0ZCTUVJc1UwRkJVeXhuUWtGQlV5eERRVUZETzBWQlFVRXNXVUZCUVN4SFFVRkJMRWxCUVVFN1NVRkJRU3hUUVVGQkxFbEJRVUU3U1VGQlFTeGxRVUZCTEdkQ1FXZENla01zUTBGQlF5eERRVUZETzBWQlFVRTdSVUZGVml4TlFVRk5MRU5CUVVFc1JVRkJSenRKUVVOUUxFMUJRVTA3VFVGQlJTeExRVUZMTzAxQlFVVXNVMEZCVXp0TlFVRkZMRk5CUVZNN1RVRkJSVHRKUVVGUkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3p0SlFVTXpSQ3hOUVVGTk8wMUJRVVVzVFVGQlRUdE5RVUZGTEU5QlFVODdUVUZCUlR0SlFVRk5MRU5CUVVNc1IwRkJSeXhMUVVGTE8wbEJSWGhETEc5Q1FVTkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZMTEZOQlFWTXNSVUZCUXp0SlFVRjVRaXhuUWtGRGRFTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFXOURMR2RDUVVOcVJDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1RVRkJTeXhUUVVGVExFVkJRVU03U1VGQlowTXNSMEZETlVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNhVUpCUVdsQ0xFTkJRemxDTEVOQlFVTXNaVUZEVGl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eFZRVUZCTEVOQlFVRXNUMEZCVXp0TlFVTlNMRk5CUVZNc1JVRkJReXh2UTBGQmIwTTdUVUZET1VNc1VVRkJVU3hGUVVGRkxFVkJRVWM3VFVGRFlpeFBRVUZQTEVWQlFVVXNUMEZCVVR0TlFVTnFRaXhMUVVGTExFVkJRVVU3U1VGQlRTeERRVU5rTEVOQlFVTXNaVUZEUml4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlN5eFRRVUZUTEVWQlFVTTdTVUZCYVVNc1IwRkJSU3hOUVVGWkxFTkJRVU1zWlVGREwwUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFTdENMRWRCUXpORExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRmxCUVZrc1EwRkRla0lzUTBGQlF5eGxRVU5PTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHROUVVGTExGTkJRVk1zUlVGQlF6dEpRVUZyUXl4blFrRkRMME1zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1QwRkJRU3hEUVVGQkxFOUJRVTA3VFVGRFRDeEpRVUZKTEVWQlFVTXNWMEZCVnp0TlFVTm9RaXhUUVVGVExFVkJRVU1zYVVOQlFXbERPMDFCUXpORExHVkJRVmtzYVVOQlFXbERPMDFCUXpkRExFOUJRVThzUlVGQlJTeERRVUZCTEV0QlFVMHNVMEZCVXl4RFFVRkRPMGxCUVVVc1IwRkZNVUlzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVOc1FpeERRVUZETEdWQlExUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVDBGQlFTeERRVUZCTEU5QlFVMDdUVUZEVEN4SlFVRkpMRVZCUVVNc1UwRkJVenROUVVOa0xGTkJRVk1zUlVGQlF5eHBRMEZCYVVNN1RVRkRNME1zWlVGQldTd3JRa0ZCSzBJN1RVRkRNME1zVDBGQlR5eEZRVUZGTEVOQlFVRXNTMEZCVFR0UlFVTmlMRk5CUVZNc1EwRkJReXhQUVVGUExFTkJRVU03VVVGRGJFSXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXh4UWtGQllTeERRVUZETzAxQlF6ZENPMGxCUVVVc1IwRkZSQ3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUTJoQ0xFTkJRMHdzUTBGRFJpeERRVU5HTEVOQlFVTTdSVUZGVmp0QlFVTkdPMEZCUVVNc1pVRkJRU3hEUVM5RVN5d3dRa0ZCTUVJc2EwSkJRMUk3UlVGRGNFSXNRMEZCUXl4RlFVRkZMR3RDUVVGVExFTkJRVU03UVVGRFppeERRVUZETzBGQlFVRXNaVUZCUVN4RFFVaEhMREJDUVVFd1FpeGxRVXRZTzBWQlEycENMRk5CUVZNc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZPMFZCUTNCRExGTkJRVk1zUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVk8wVkJRM0JETEV0QlFVc3NSVUZCUlN4clFrRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF6dEpRVU55UWl4TlFVRk5MRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTzBsQlEzaENMRTlCUVU4c1JVRkJSU3hyUWtGQlV5eERRVUZETEUxQlFVMDdTVUZEZWtJc1MwRkJTeXhGUVVGRkxHdENRVUZUTEVOQlFVTTdSVUZEYmtJc1EwRkJReXhEUVVGRE8wVkJRMFlzVDBGQlR5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNN1FVRkRja0lzUTBGQlF6dEJRVUZCTEVsQlFVRXNVVUZCUVN4SFFXMUVXU3hKUVVGQkxHMUNRVUZQTEVWQlEzQkNMR1ZCUVdVc1JVRkRaaXhyUWtGRFJpeERRVUZETEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU03UVVGQlFTeFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRkZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOc1J6ZENMRWxCUVVFc01rSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJNRVFzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMEV4UkN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTFCUVVFc1IwRkJRU3gxUWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR2xDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVkZCTEVsQlFVRXNZVUZCUVN4SFFVRkJMRTlCUVVFN1FVRlJRU3hKUVVGQkxHMUNRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGxRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1YwRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1dVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdGQlFVRXNSMEZCUVN4UFFVRkJPMEZCU1hGRUxGTkJRVUVzZVVKQlFVRXNWMEZCUVN4bFFVRkJMRTlCUVVFc2EwTkJRVUVzYVVKQlFVRXNUMEZCUVN4UFFVRkJMRkZCUVVFc1owSkJRVUVzVDBGQlFTeFBRVUZCTEZsQlFVRXNkMEpCUVVFc1dVRkJRU3hEUVVGQkxGZEJRVUVzVjBGQlFTeFhRVUZCTEVkQlFVRXNaMEpCUVVFc1IwRkJRU3hwUWtGQlFTeExRVUZCTEZkQlFVRTdRVUZCUVN4VFFVRkJMSGRDUVVGQkxFZEJRVUVzUlVGQlFTeFhRVUZCTEZOQlFVRXNWMEZCUVN4SlFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeFhRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMRzlDUVVGQkxFZEJRVUVzZDBKQlFVRXNSMEZCUVN3MFFrRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFTeFZRVUZCTEV0QlFVRXNSMEZCUVN4M1FrRkJRU3hEUVVGQkxGZEJRVUVzVDBGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hYUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1NVRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYTBKQlFVRXNUVUZCUVN4RFFVRkJMRk5CUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRk5CUVVFc1NVRkJRU3hIUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNZMEZCUVN4SlFVRkJMRXRCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzVFVGQlFTeEZRVUZCTEVkQlFVRXNSVUZCUVN4SlFVRkJMRmxCUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzUjBGQlFTeE5RVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeE5RVUZCTEZsQlFVRXNUVUZCUVR0QlFVRkJMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVVnlSQ3hOUVVGTkxHbENRVUZwUWl4SFFVRkhMRU5CUVVNN1JVRkRla0lzWVVGQllUdEZRVU5pTEZOQlFWTTdSVUZEVkN4UlFVRlJMRWRCUVVjc1NVRkJTVHRGUVVObUxHZENRVUZuUWl4SFFVRkhPMEZCUTNKQ0xFTkJRVU1zUzBGQlN6dEZRVU5LTEUxQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVFc09FSkJRV01zUlVGQlF5eERRVUZETzBWQlF6RkNMRTFCUVUwc2FVSkJRV2xDTEVkQlEzSkNMR2RDUVVGblFpeExRVUZMTEV0QlFVc3NSMEZEZEVJc2MwSkJRWE5DTEVkQlEzUkNMRFpDUVVFMlFqdEZRVVZ1UXl4TlFVRk5MR3RDUVVGclFpeEhRVU4wUWl4blFrRkJaMElzUzBGQlN5eExRVUZMTEVkQlFVY3NhVUpCUVdsQ0xFZEJRVWNzZDBKQlFYZENPMFZCUXpORkxFMUJRVTBzVlVGQlZTeEhRVUZITEVsQlFVRXNhVUpCUVZVc1JVRkJReXdyUWtGQmEwSXNRMEZCUXp0RlFVVnFSQ3hOUVVGTkxFMUJRVTBzUjBGQlJ5eERRVUZCTEV0QlFVMDdTVUZEYmtJc1lVRkJZU3hEUVVGRExFTkJRVU03U1VGRFppeEpRVUZKTEZGQlFWRXNSVUZCUlR0TlFVTmFMRk5CUVZNc1EwRkJReXhEUVVGRE8wbEJRMkk3UlVGRFJpeERRVUZETzBWQlJVUXNUVUZCVFN4WlFVRlpMRWRCUVVjc1EwRkJRU3hMUVVGTk8wbEJRM3BDTEZOQlFWTXNRMEZCUXl4RFFVRkRPMFZCUTJJc1EwRkJRenRGUVVWRUxFMUJRVTBzYlVOQlFXMURMRWRCUVVjc1EwRkJRU3hMUVVGTk8wbEJRMmhFTEc5Q1FVTkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEVsQlFVRXNRMEZCUVN4UFFVRkhPMDFCUTBZc1QwRkJUeXhGUVVGRkxIRkNRVUZQTEVOQlFVTXNTVUZCU3p0TlFVTjBRaXhoUVVGaExFVkJRVVVzTkVKQlFXTXNRMEZCUXl4TlFVRlBPMDFCUTNKRExFZEJRVWNzUlVGQlJTeERRVUZGTzAxQlExQXNXVUZCV1N4RlFVRkZPMGxCUVVVc1owSkJSV2hDTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNTVUZCU1R0TlFVRkRMRTlCUVU4c1JVRkJSU3g1UWtGQlZ5eERRVUZETzBsQlFVOHNSMEZETDBJc1EwRkJReXhEUVVGRExHZERRVUZuUXl4RlFVRkZMR05CUTI1RExFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzU1VGQlNUdE5RVU5JTEVkQlFVY3NSVUZCUXl4clFrRkJhMEk3VFVGRGRFSXNUMEZCVHl4RlFVRkZMSGxDUVVGWExFTkJRVU1zVlVGQlZ6dE5RVU5vUXl4RlFVRkZMRVZCUVVNN1NVRkJUU3hIUVVWU0xFTkJRVU1zUTBGQlF5eG5RMEZCWjBNc1EwRkRMMElzUTBGQlF5eERRVU5TTEVOQlEwY3NRMEZCUXl4bFFVTlFMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHROUVVGRExFOUJRVThzUlVGQlJTeDVRa0ZCVnl4RFFVRkRPMGxCUVZjc1IwRkRia01zUTBGQlF5eERRVUZETEhOQ1FVRnpRaXhGUVVGRkxHTkJRM3BDTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNTVUZCU1R0TlFVTklMRWRCUVVjc1JVRkJReXhyUWtGQmEwSTdUVUZEZEVJc1QwRkJUeXhGUVVGRkxIbENRVUZYTEVOQlFVTXNUVUZCVHp0TlFVTTFRaXhGUVVGRkxFVkJRVU1zVFVGQlRUdE5RVU5VTEU5QlFVOHNSVUZCUlN4eFFrRkJUeXhEUVVGRE8wbEJRVThzUjBGRmRrSXNRMEZCUXl4RFFVRkRMSE5DUVVGelFpeERRVU55UWl4RFFVRkRMR1ZCUTFBc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNhVUpCUVVFc1EwRkJRU3hOUVVGTk8wMUJRMHdzUjBGQlJ5eEZRVUZETEd0Q1FVRnJRanROUVVOMFFpeFBRVUZQTEVWQlFVVXNaME5CUVdNc1EwRkJReXhKUVVGTE8wMUJRemRDTEVsQlFVa3NSVUZCUlN3NFFrRkJXU3hEUVVGRExFOUJRVkU3VFVGRE0wSXNTVUZCU1N4RlFVRkZMRzFDUVVGWkxFTkJRVU1zYjBKQlFYRkNPMDFCUTNoRExFMUJRVTBzUlVGQlF5eFJRVUZSTzAxQlEyWXNSMEZCUnl4RlFVRkRPMGxCUVhGQ0xFZEJSWGhDTEVOQlFVTXNRMEZCUXl4elFrRkJjMElzUTBGRGJrSXNRMEZCUXl4RFFVTldMRU5CUTBjc1EwRkRTQ3hEUVVGRE8wVkJSVllzUTBGQlF6dEZRVVZFTEUxQlFVMHNORUpCUVRSQ0xFZEJRVWNzUTBGQlFTeExRVUZOTzBsQlEzcERMRzlDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRWxCUVVFc1EwRkJRU3hQUVVGSE8wMUJRMFlzVDBGQlR5eEZRVUZGTEhGQ1FVRlBMRU5CUVVNc1NVRkJTenROUVVOMFFpeGhRVUZoTEVWQlFVVXNORUpCUVdNc1EwRkJReXhOUVVGUE8wMUJRM0pETEVkQlFVY3NSVUZCUlN4RFFVRkZPMDFCUTFBc1dVRkJXU3hGUVVGRk8wbEJRVVVzWjBKQlJXaENMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHROUVVGRExFOUJRVThzUlVGQlJTeDVRa0ZCVnl4RFFVRkRPMGxCUVU4c1IwRkRMMElzUTBGQlF5eERRVUZETEhOQ1FVRnpRaXhGUVVGRkxHTkJRM3BDTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNTVUZCU1R0TlFVTklMRWRCUVVjc1JVRkJReXhyUWtGQmEwSTdUVUZEZEVJc1QwRkJUeXhGUVVGRkxIbENRVUZYTEVOQlFVTXNWVUZCVnp0TlFVTm9ReXhGUVVGRkxFVkJRVU03U1VGQlRTeEhRVVZTTEVOQlFVTXNRMEZCUXl4elFrRkJjMElzUTBGRGNrSXNRMEZCUXl4RFFVTlNMRU5CUTBjc1EwRkJReXhsUVVOUUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzU1VGQlNUdE5RVUZETEU5QlFVOHNSVUZCUlN4NVFrRkJWeXhEUVVGRE8wbEJRVmNzUjBGRGJrTXNRMEZCUXl4RFFVRkRMSE5DUVVGelFpeEZRVUZGTEdOQlEzcENMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHROUVVOSUxFZEJRVWNzUlVGQlF5eHJRa0ZCYTBJN1RVRkRkRUlzVDBGQlR5eEZRVUZGTEhsQ1FVRlhMRU5CUVVNc1RVRkJUenROUVVNMVFpeEZRVUZGTEVWQlFVTXNUVUZCVFR0TlFVTlVMRTlCUVU4c1JVRkJSU3h4UWtGQlR5eERRVUZETzBsQlFVOHNSMEZGZGtJc1EwRkJReXhEUVVGRExITkNRVUZ6UWl4RFFVTnlRaXhEUVVGRExHVkJRMUFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2FVSkJRVUVzUTBGQlFTeE5RVUZOTzAxQlEwd3NSMEZCUnl4RlFVRkRMR3RDUVVGclFqdE5RVU4wUWl4UFFVRlBMRVZCUVVVc1owTkJRV01zUTBGQlF5eEpRVUZMTzAxQlF6ZENMRWxCUVVrc1JVRkJSU3hyUWtGQlNTeERRVUZETEVsQlFVczdUVUZEYUVJc1NVRkJTU3hGUVVGRkxHMUNRVUZaTEVOQlFVTXNiMEpCUVhGQ08wMUJRM2hETEUxQlFVMHNSVUZCUXl4UlFVRlJPMDFCUTJZc1IwRkJSeXhGUVVGRE8wbEJRWEZDTEVkQlJYaENMRU5CUVVNc1EwRkJReXh6UWtGQmMwSXNRMEZEYmtJc1EwRkJReXhEUVVOV0xFTkJRMGNzUTBGRFNDeERRVUZETzBWQlJWWXNRMEZCUXp0RlFVVkVMRzlDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRWxCUVVFc1EwRkJRU3hQUVVGSE8wbEJRMFlzVTBGQlV5eEZRVUZETEhOQ1FVRnpRanRKUVVOb1F5eFBRVUZQTEVWQlFVVXNjVUpCUVU4c1EwRkJReXhKUVVGTE8wbEJRM1JDTEdGQlFXRXNSVUZCUlN3MFFrRkJZeXhEUVVGRExFMUJRVTg3U1VGRGNrTXNZMEZCWXl4RlFVRkZMRFJDUVVGakxFTkJRVU1zVTBGQlZUdEpRVU42UXl4UFFVRlBMRVZCUVVVN1JVRkJSU3huUWtGRldDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhKUVVGQkxFTkJRVUVzVDBGQlJ6dEpRVU5HTEU5QlFVOHNSVUZCUlN4eFFrRkJUeXhEUVVGRExFbEJRVXM3U1VGRGRFSXNZVUZCWVN4RlFVRkZMRFJDUVVGakxFTkJRVU1zUjBGQlNUdEpRVU5zUXl4VlFVRlZMRVZCUVVVc2QwSkJRVlVzUTBGQlF5eE5RVUZQTzBsQlF6bENMR05CUVdNc1JVRkJSU3cwUWtGQll5eERRVUZETEZsQlFXRTdTVUZETlVNc1dVRkJXU3hGUVVGRk8wVkJRVVVzWjBKQlJXaENMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHRKUVVGRExFOUJRVThzUlVGQlJTeDVRa0ZCVnl4RFFVRkRPMFZCUVZVc1IwRkJSU3hEUVVGRExFTkJRVU1zYVVKQlFXbENMRU5CUVZFc1EwRkJReXhGUVVOc1JTeFJRVUZSTEdsQ1FVTlFMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1ZVRkJWVHRKUVVOVUxGTkJRVk1zUlVGQlF5dzJRa0ZCTmtJN1NVRkRka01zVVVGQlVTeEZRVUZGTERCQ1FVRlJMRU5CUVVNc1MwRkJUVHRKUVVONlFpeEpRVUZKTEVWQlFVVXNhMEpCUVVrc1EwRkJReXhGUVVGSE8wbEJRMlFzVDBGQlR5eEZRVUZGTEVOQlFVRXNTMEZCVFR0TlFVTmlMRlZCUVZVc1EwRkJRenRSUVVOVUxGRkJRVkVzUlVGQlJTeHpRMEZCZDBJc1EwRkJReXhKUVVGSk8xRkJRM1pETEV0QlFVc3NSVUZCUlN4clEwRkJiMElzUTBGQlF5d3lRa0ZCTWtJN1VVRkRka1FzVlVGQlZTeEZRVUZGTzFWQlExWXNVVUZCVVN4RlFVRkZMSEZEUVVGMVFpeERRVUZETzFGQlEzQkRPMDFCUTBZc1EwRkJReXhEUVVGRE8wMUJRMFlzV1VGQldTeERRVUZETEVOQlFVTTdTVUZEYUVJc1EwRkJSVHRKUVVOR0xGTkJRVk1zUlVGQlJTeERRVUZETEVOQlFVTXNUMEZCVHp0RlFVRkZMRU5CUTNaQ0xFTkJSVUVzUTBGQlF5eEZRVU5NTEdkQ1FVRm5RaXhMUVVGTExFdEJRVXNzUjBGRGRrSXNORUpCUVRSQ0xFTkJRVU1zUTBGQlF5eEhRVU01UWl4dFEwRkJiVU1zUTBGQlF5eERRVUZETEdWQlEzcERMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEcxQ1FVRkJMRU5CUVVFc1QwRkJhMEk3U1VGRGFrSXNWVUZCVlN4RlFVRkZMRU5CUVVNc1EwRkJReXhyUWtGQmEwSXNRMEZCUlR0SlFVTnNReXhoUVVGaExFVkJRVVVzVFVGQlR6dEpRVU4wUWl4VlFVRlZMRVZCUVVNc1RVRkJUVHRKUVVOcVFpeFhRVUZYTEVWQlFVTTdSVUZCVFN4RFFVTnVRaXhEUVVORkxFTkJRVU03UVVGRlZpeERRVUZETzBGQlJVUXNhVUpCUVdsQ0xFTkJRVU1zVTBGQlV5eEhRVUZITzBWQlF6VkNPMFZCUTBFc1lVRkJZU3hGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVN1JVRkRlRU1zVTBGQlV5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTVHRGUVVONlFpeFJRVUZSTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSk8wVkJRM2hDTEdkQ1FVRm5RaXhGUVVGRkxHdENRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1MwRkJTeXhGUVVGRkxGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZETTBRc1EwRkJRenRCUVVGRExFbEJRVUVzVVVGQlFTeEhRVVZoTEVsQlFVRXNkVUpCUVdNc1JVRkJReXhwUWtGQmFVSXNRMEZCUXp0QlFVRkJMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzVVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF6Tk5hRVFzU1VGQlFTeHJRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVUZwUkN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTkJha1FzU1VGQlFTeE5RVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRVFJDTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5CTlVJc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hOUVVGQkxFZEJRVUVzZFVKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUlVFc1NVRkJRU3hYUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNUMEZCUVN4SFFVRkJMSFZDUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNZVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNTMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFbEJRVUVzUjBGQlFTeFBRVUZCTzBGQlIwRXNTVUZCUVN4blFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2IwSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxITkNRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTd3lRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVVZCTEVsQlFVRXNhMEpCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMSEZDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3h2UWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzY1VKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRlFTeEpRVUZCTEZWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEcxQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4eFFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2RVSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHZENRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGxRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeDFRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNZVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVUV5UkN4VFFVRkJMSGxDUVVGQkxGZEJRVUVzWlVGQlFTeFBRVUZCTEd0RFFVRkJMR2xDUVVGQkxFOUJRVUVzVDBGQlFTeFJRVUZCTEdkQ1FVRkJMRTlCUVVFc1QwRkJRU3haUVVGQkxIZENRVUZCTEZsQlFVRXNRMEZCUVN4WFFVRkJMRmRCUVVFc1YwRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNhVUpCUVVFc1MwRkJRU3hYUVVGQk8wRkJRVUVzVTBGQlFTeDNRa0ZCUVN4SFFVRkJMRVZCUVVFc1YwRkJRU3hUUVVGQkxGZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1YwRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHZRa0ZCUVN4SFFVRkJMSGRDUVVGQkxFZEJRVUVzTkVKQlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFc1ZVRkJRU3hMUVVGQkxFZEJRVUVzZDBKQlFVRXNRMEZCUVN4WFFVRkJMRTlCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4WlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFRRVUZCTEUxQlFVRXNWMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMR3RDUVVGQkxFMUJRVUVzUTBGQlFTeFRRVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeFRRVUZCTEVsQlFVRXNSMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxHTkJRVUVzU1VGQlFTeExRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRTFCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzU1VGQlFTeFpRVUZCTEUxQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRWRCUVVFc1RVRkJRU3hMUVVGQkxFbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1RVRkJRU3haUVVGQkxFMUJRVUU3UVVGQlFTeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEdkQ1FVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzUzBGQlFTeEpRVUZCTEVkQlFVRXNSMEZCUVN4alFVRkJMRU5CUVVFc1IwRkJRU3hQUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeEpRVUZCTEV0QlFVRXNSVUZCUVN4TFFVRkJMRVZCUVVFc1ZVRkJRU3hSUVVGQkxGbEJRVUVzVVVGQlFTeFJRVUZCTEc5Q1FVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUzBGQlFTeFhRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMR1ZCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzUjBGQlFTeFpRVUZCTEVOQlFVRXNSMEZCUVN3eVFrRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzWVVGQlFTeExRVUZCTEVWQlFVRXNTVUZCUVN4bFFVRkJMRXRCUVVFc2FVSkJRVUVzUzBGQlFTeHJRa0ZCUVN4TFFVRkJMRTFCUVVFc1NVRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeE5RVUZCTEVOQlFVRXNWMEZCUVN4UFFVRkJMRWxCUVVFc1MwRkJRU3hUUVVGQkxGRkJRVUVzUjBGQlFTeEhRVUZCTEVsQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQkxFbEJRVUVzTWtKQlFVRXNSMEZCUVN4elFrRkJRU3hIUVVGQkxGbEJRVUVzVTBGQlFTdzBSRUZCUVN4SlFVRkJMR2RDUVVGQkxFMUJRVUVzUjBGQlFTeE5RVUZCTEVWQlFVRXNTMEZCUVN4TFFXNUNNMFE3UVVGeFFrRXNUVUZCVFN4MVFrRkJkVUlzUjBGQlJ6dEZRVU01UWl4VFFVRlRMRVZCUVVVc01rSkJRVEpDTzBWQlEzUkRMRTFCUVUwc1JVRkJSU3gxUTBGQmRVTTdSVUZETDBNc1dVRkJXU3hGUVVGRkxFdEJRVXM3UlVGRGJrSXNaVUZCWlN4RlFVRkZMR2xEUVVGcFF6dEZRVU5zUkN4VFFVRlRMRVZCUVVVN1FVRkRZaXhEUVVGRE8wRkJSVVFzVFVGQlRTeDVRa0ZCZVVJc1IwRkJSenRGUVVOb1F5eEhRVUZITEhWQ1FVRjFRanRGUVVNeFFpeExRVUZMTEVWQlFVVXNUMEZCVHp0RlFVTmtMRWRCUVVjc1JVRkJSVHRCUVVOUUxFTkJRVU03UVVGRlJDeE5RVUZOTEhsQ1FVRjVRaXhIUVVGSE8wVkJRMmhETEVkQlFVY3NkVUpCUVhWQ08wVkJRekZDTEV0QlFVc3NSVUZCUlN4UFFVRlBPMFZCUTJRc1IwRkJSeXhGUVVGRk8wRkJRMUFzUTBGQlF6dEJRVVZFTEUxQlFVMHNhVUpCUVdsQ0xFZEJRVWM3UlVGRGVFSXNaMEpCUVdkQ0xFVkJRVVU3U1VGRGFFSXNTMEZCU3l4RlFVRkZMRXRCUVVzN1NVRkRXanRKUVVOQkxGTkJRVk1zUlVGQlJTeHRSRUZCYlVRN1NVRkRPVVFzV1VGQldTeEZRVUZGTEV0QlFVczdTVUZEYmtJc1IwRkJSeXhGUVVGRkxFdEJRVXM3U1VGRFZpeFRRVUZUTEVWQlFVVXNUVUZCVFR0SlFVTnFRaXhKUVVGSkxFVkJRVVVzUjBGQlJ6dEpRVU5VTEV0QlFVc3NSVUZCUlN4SFFVRkhPMGxCUTFZc1RVRkJUU3hGUVVGRk8wVkJRMVlzUTBGQlF6dEZRVU5FTEdkQ1FVRm5RaXhGUVVGRk8wbEJRMmhDTEV0QlFVc3NSVUZCUlN4UFFVRlBPMGxCUTJRN1NVRkRRU3hUUVVGVExFVkJRVVVzYlVSQlFXMUVPMGxCUXpsRUxGbEJRVmtzUlVGQlJTeExRVUZMTzBsQlEyNUNMRWRCUVVjc1JVRkJSU3hMUVVGTE8wbEJRMVlzVTBGQlV5eEZRVUZGTEUxQlFVMDdTVUZEYWtJc1NVRkJTU3hGUVVGRkxFZEJRVWM3U1VGRFZDeExRVUZMTEVWQlFVVXNSMEZCUnp0SlFVTldMRTFCUVUwc1JVRkJSVHRGUVVOV0xFTkJRVU03UlVGRFJDeFpRVUZaTEVWQlFVVTdTVUZEV2l4WlFVRlpMRVZCUVVVN1JVRkRhRUk3UVVGRFJpeERRVUZETzBGQlIwUXNUVUZCVFN4TlFVRk5MRWRCUVVjN1JVRkRZaXh6UWtGQmMwSXNSVUZCUlR0SlFVTjBRaXhSUVVGUkxHVkJRVVVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1owSkJRVUVzUTBGQlFTeFBRVUZsTEUxQlFVVXNRMEZCUXp0SlFVTTNRaXhIUVVGSE8wVkJRMHdzUTBGQlF6dEZRVU5FTEZkQlFWY3NSVUZCUlR0SlFVTllMRkZCUVZFc1pVRkJSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4blFrRkJRU3hEUVVGQkxFOUJRV1VzVFVGQlJTeERRVUZETzBsQlF6ZENMR2RDUVVGblFpeEZRVUZGTzAxQlEyaENMRXRCUVVzc1JVRkJSU3hMUVVGTE8wMUJRMW9zUjBGQlJ5eEZRVUZGTEV0QlFVczdUVUZEVml4VFFVRlRMRVZCUVVVc2JVUkJRVzFFTzAxQlF6bEVMRk5CUVZNc1JVRkJSU3hOUVVGTk8wMUJRMnBDTEVsQlFVa3NSVUZCUlN4SFFVRkhPMDFCUTFRc1MwRkJTeXhGUVVGRkxFZEJRVWM3VFVGRFZpeE5RVUZOTEVWQlFVVXNVVUZCVVR0TlFVTm9RaXhaUVVGWkxFVkJRVVU3U1VGRGFFSXNRMEZCUXp0SlFVTkVMR2RDUVVGblFpeEZRVUZGTzAxQlEyaENMRXRCUVVzc1JVRkJSU3hQUVVGUE8wMUJRMlFzUjBGQlJ5eEZRVUZGTEV0QlFVczdUVUZEVml4VFFVRlRMRVZCUVVVc2JVUkJRVzFFTzAxQlF6bEVMRk5CUVZNc1JVRkJSU3hOUVVGTk8wMUJRMnBDTEVsQlFVa3NSVUZCUlN4SFFVRkhPMDFCUTFRc1MwRkJTeXhGUVVGRkxFZEJRVWM3VFVGRFZpeE5RVUZOTEVWQlFVVXNVVUZCVVR0TlFVTm9RaXhaUVVGWkxFVkJRVVU3U1VGRGFFSXNRMEZCUXp0SlFVTkVMRmxCUVZrc1JVRkJSVHROUVVOYUxGbEJRVmtzUlVGQlJUdEpRVU5vUWp0RlFVTkdMRU5CUVVNN1JVRkZSQ3hsUVVGbExFVkJRVVU3U1VGRFppeFJRVUZSTEdWQlFVVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYjBKQlFVRXNRMEZCUVN4UFFVRnRRaXhOUVVGRkxFTkJRVU03U1VGRGFrTXNSMEZCUnp0RlFVTk1MRU5CUVVNN1JVRkZSQ3hyUWtGQmEwSXNSVUZCUlR0SlFVTnNRaXhSUVVGUkxHVkJRVVVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2MwSkJRVUVzUTBGQlFTeFBRVUZ4UWl4TlFVRkZMRU5CUVVNN1NVRkRia01zUjBGQlJ6dEZRVU5NTEVOQlFVTTdSVUZGUkN4clFrRkJhMElzUlVGQlJUdEpRVU5zUWl4UlFVRlJMR1ZCUVVVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNhMEpCUVVFc1EwRkJRU3hQUVVGcFFpeE5RVUZGTEVOQlFVTTdTVUZETDBJc1owSkJRV2RDTEVWQlFVVTdUVUZEYUVJc1IwRkJSenRKUVVOTUxFTkJRVU03U1VGRFJDeG5Ra0ZCWjBJc1JVRkJSVHROUVVOb1FpeEhRVUZITzBsQlEwd3NRMEZCUXp0SlFVTkVMRmxCUVZrc1JVRkJSVHROUVVOYUxGbEJRVmtzUlVGQlJUdEpRVU5vUWp0RlFVTkdMRU5CUVVNN1JVRkZSQ3gxUWtGQmRVSXNSVUZCUlR0SlFVTjJRaXhSUVVGUkxHVkJRVVVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc01rSkJRVUVzUTBGQlFTeFBRVUV3UWl4TlFVRkZMRU5CUVVNN1NVRkRlRU1zWjBKQlFXZENMRVZCUVVVN1RVRkRhRUlzUzBGQlN5eEZRVUZGTEV0QlFVczdUVUZEV2l4SFFVRkhMRVZCUVVVc1NVRkJRU3gzUWtGQmEwSXNSVUZCUXl4RFFVRkRMRXRCUVVzc01rSkJRWE5DTEVkQlFVY3NUVUZCVFN4SFFVRkhPMGxCUTJ4RkxFTkJRVU03U1VGRFJDeG5Ra0ZCWjBJc1JVRkJSVHROUVVOb1FpeExRVUZMTEVWQlEwZ3NTVUZCUVN4M1FrRkJhMElzUlVGQlF5eERRVUZETEV0QlFVc3NNa0pCUVhOQ0xFZEJRVWNzVDBGQlR5eEhRVUZITEU5QlFVODdUVUZEY2tVc1IwRkJSeXhGUVVGRkxHdENRVUZyUWp0TlFVTjJRaXhYUVVGWExFVkJRMVFzU1VGQlFTeDNRa0ZCYTBJc1JVRkJReXhEUVVGRExFdEJRVXNzTWtKQlFYTkNMRWRCUVVjc1RVRkJUU3hIUVVGSExFbEJRVWs3VFVGRGFrVXNXVUZCV1N4RlFVTldMRWxCUVVFc2QwSkJRV3RDTEVWQlFVTXNRMEZCUXl4TFFVRkxMREpDUVVGelFpeEhRVUZITEUxQlFVMHNSMEZCUnp0SlFVTXZSRHRGUVVOR0xFTkJRVU03UlVGRlJDeHhRa0ZCY1VJc1JVRkJSVHRKUVVOeVFpeFJRVUZSTEdWQlFVVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYjBKQlFVRXNRMEZCUVN4UFFVRnRRaXhOUVVGRkxFTkJRVU03U1VGRGFrTXNaMEpCUVdkQ0xFVkJRVVU3VFVGRGFFSXNSMEZCUnp0SlFVTk1MRU5CUVVNN1NVRkRSQ3huUWtGQlowSXNSVUZCUlR0TlFVTm9RaXhIUVVGSE8wbEJRMHdzUTBGQlF6dEpRVU5FTEZsQlFWa3NSVUZCUlR0TlFVTmFMRmxCUVZrc1JVRkJSVHRKUVVOb1FqdEZRVU5HTEVOQlFVTTdSVUZGUkN4UlFVRlJMRVZCUVVVN1NVRkRVaXhSUVVGUkxHVkJRVVVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1lVRkJRU3hEUVVGQkxFOUJRVmtzVFVGQlJTeERRVUZETzBsQlF6RkNMR2RDUVVGblFpeEZRVUZGTzAxQlEyaENMRWRCUVVjN1NVRkRUQ3hEUVVGRE8wbEJRMFFzWjBKQlFXZENMRVZCUVVVN1RVRkRhRUlzUjBGQlJ6dEpRVU5NTEVOQlFVTTdTVUZEUkN4WlFVRlpMRVZCUVVVN1RVRkRXaXhaUVVGWkxFVkJRVVU3U1VGRGFFSTdSVUZEUml4RFFVRkRPMFZCUTBRc2MwSkJRWE5DTEVWQlFVVTdTVUZEZEVJc1VVRkJVU3hsUVVGRkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMSEZDUVVGQkxFTkJRVUVzVDBGQmIwSXNUVUZCUlN4RFFVRkRPMGxCUTJ4RExHZENRVUZuUWl4RlFVRkZPMDFCUTJoQ0xFZEJRVWM3U1VGRFRDeERRVUZETzBsQlEwUXNaMEpCUVdkQ0xFVkJRVVU3VFVGRGFFSXNSMEZCUnp0SlFVTk1MRU5CUVVNN1NVRkRSQ3haUVVGWkxFVkJRVVU3VFVGRFdpeFpRVUZaTEVWQlFVVTdTVUZEYUVJN1JVRkRSaXhEUVVGRE8wVkJSVVFzYjBKQlFXOUNMRVZCUVVVN1NVRkRjRUlzVVVGQlVTeGxRVUZGTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExIVkNRVUZCTEVOQlFVRXNUMEZCYzBJc1RVRkJSU3hEUVVGRE8wbEJRM0JETEdkQ1FVRm5RaXhGUVVGRk8wMUJRMmhDTEVkQlFVYzdTVUZEVEN4RFFVRkRPMGxCUTBRc1owSkJRV2RDTEVWQlFVVTdUVUZEYUVJc1IwRkJSenRKUVVOTUxFTkJRVU03U1VGRFJDeFpRVUZaTEVWQlFVVTdUVUZEV2l4WlFVRlpMRVZCUVVVN1NVRkRhRUk3UlVGRFJpeERRVUZETzBWQlJVUXNjMEpCUVhOQ0xFVkJRVVU3U1VGRGRFSXNVVUZCVVN4bFFVRkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEhGQ1FVRkJMRU5CUVVFc1QwRkJiMElzVFVGQlJTeERRVUZETzBsQlEyeERMR2RDUVVGblFpeEZRVUZGTzAxQlEyaENMRWRCUVVjN1NVRkRUQ3hEUVVGRE8wbEJRMFFzWjBKQlFXZENMRVZCUVVVN1RVRkRhRUlzUjBGQlJ6dEpRVU5NTEVOQlFVTTdTVUZEUkN4WlFVRlpMRVZCUVVVN1RVRkRXaXhaUVVGWkxFVkJRVVU3U1VGRGFFSTdSVUZEUml4RFFVRkRPMFZCUlVRc2QwSkJRWGRDTEVWQlFVVTdTVUZEZUVJc1VVRkJVU3hsUVVGRkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMSFZDUVVGQkxFTkJRVUVzVDBGQmMwSXNUVUZCUlN4RFFVRkRPMGxCUTNCRExHZENRVUZuUWl4RlFVRkZPMDFCUTJoQ0xFdEJRVXNzUlVGQlJTeE5RVUZOTzAxQlEySXNUVUZCVFN4RlFVRkZMRTlCUVU4N1RVRkRaaXhIUVVGSExFVkJRVVVzVFVGQlRUdE5RVU5ZTEZOQlFWTXNSVUZCUlN4TlFVRk5PMDFCUTJwQ0xFbEJRVWtzUlVGQlJTeEhRVUZITzAxQlExUXNTMEZCU3l4RlFVRkZMRWRCUVVjN1RVRkRWaXhOUVVGTkxFVkJRVVU3U1VGRFZpeERRVUZETzBsQlEwUXNaMEpCUVdkQ0xFVkJRVVU3VFVGRGFFSXNTMEZCU3l4RlFVRkZMRTFCUVUwN1RVRkRZaXhOUVVGTkxFVkJRVVVzUzBGQlN6dE5RVU5pTEVkQlFVY3NSVUZCUlN4TlFVRk5PMDFCUTFnc1NVRkJTU3hGUVVGRkxFdEJRVXM3VFVGRFdDeFRRVUZUTEVWQlFVVXNUVUZCVFR0TlFVTnFRaXhOUVVGTkxFVkJRVVVzVVVGQlVUdE5RVU5vUWl4UlFVRlJMRVZCUVVVN1NVRkRXaXhEUVVGRE8wbEJRMFFzV1VGQldTeEZRVUZGTzAxQlExb3NXVUZCV1N4RlFVRkZPMGxCUTJoQ08wVkJRMFlzUTBGQlF6dEZRVVZFTEhGQ1FVRnhRaXhGUVVGRk8wbEJRM0pDTEc5Q1FVRnZRaXhGUVVGRkxFbEJRVWs3U1VGRE1VSXNVVUZCVVN4bFFVRkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEhGQ1FVRkJMRU5CUVVFc1QwRkJiMElzVFVGQlJTeERRVUZETzBsQlEyeERMR2RDUVVGblFpeEZRVUZGTzAxQlEyaENMRWRCUVVjN1NVRkRUQ3hEUVVGRE8wbEJRMFFzWjBKQlFXZENMRVZCUVVVN1RVRkRhRUlzUjBGQlJ6dEpRVU5NTEVOQlFVTTdTVUZEUkN4WlFVRlpMRVZCUVVVN1RVRkRXaXhaUVVGWkxFVkJRVVU3U1VGRGFFSTdSVUZEUml4RFFVRkRPMFZCUlVRc1ZVRkJWU3hGUVVGRk8wbEJRMVlzVVVGQlVTeGxRVUZGTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExGVkJRVUVzUTBGQlFTeFBRVUZUTEUxQlFVVXNRMEZCUXp0SlFVTjJRaXhuUWtGQlowSXNSVUZCUlR0TlFVTm9RaXhIUVVGSE8wbEJRMHdzUTBGQlF6dEpRVU5FTEdkQ1FVRm5RaXhGUVVGRk8wMUJRMmhDTEVkQlFVYzdTVUZEVEN4RFFVRkRPMGxCUTBRc1dVRkJXU3hGUVVGRk8wMUJRMW9zV1VGQldTeEZRVUZGTzBsQlEyaENPMFZCUTBZc1EwRkJRenRGUVVWRUxHMUNRVUZ0UWl4RlFVRkZPMGxCUTI1Q0xGRkJRVkVzWlVGQlJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXh0UWtGQlFTeERRVUZCTEU5QlFXdENMRTFCUVVVc1EwRkJRenRKUVVOb1F5eG5Ra0ZCWjBJc1JVRkJSVHROUVVOb1FpeEhRVUZITzBsQlEwd3NRMEZCUXp0SlFVTkVMR2RDUVVGblFpeEZRVUZGTzAxQlEyaENMRWRCUVVjN1NVRkRUQ3hEUVVGRE8wbEJRMFFzV1VGQldTeEZRVUZGTzAxQlExb3NXVUZCV1N4RlFVRkZPMGxCUTJoQ08wVkJRMFlzUTBGQlF6dEZRVVZFTEdWQlFXVXNSVUZCUlR0SlFVTm1MRkZCUVZFc1pVRkJSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4bFFVRkJMRU5CUVVFc1QwRkJiVUlzVFVGQlJTeERRVUZETzBsQlEycERMR2RDUVVGblFpeEZRVUZGTzAxQlEyaENMRWRCUVVjN1NVRkRUQ3hEUVVGRE8wbEJRMFFzWjBKQlFXZENMRVZCUVVVN1RVRkRhRUlzUjBGQlJ6dEpRVU5NTEVOQlFVTTdTVUZEUkN4WlFVRlpMRVZCUVVVN1RVRkRXaXhaUVVGWkxFVkJRVVU3U1VGRGFFSTdSVUZEUml4RFFVRkRPMFZCUjBRc1QwRkJUeXhGUVVGRk8wbEJRMUFzVVVGQlVTeEZRVUZGTEVWQlFVVTdTVUZEV2l4blFrRkJaMElzUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEY0VJc1owSkJRV2RDTEVWQlFVVXNRMEZCUXp0RlFVTnlRanRCUVVOR0xFTkJRVU03UVVGRlJDeE5RVUZOTEdGQlFXRXNSMEZCUnp0RlFVTndRaXhsUVVGbExFVkJRVVU3UVVGRGJrSXNRMEZCUXp0QlFVVkVMRk5CUVZNc1pVRkJaU3hEUVVGRExFdEJRVXNzUlVGQlJUdEZRVU01UWl4UFFVRlBPMGxCUTB3c1RVRkJUU3hGUVVGRkxFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrN1NVRkRha01zVlVGQlZTeEZRVUZGTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRE8wVkJRMjVETEVOQlFVTTdRVUZEU0R0QlFVVkJMRk5CUVZNc2EwSkJRV3RDTEVOQlFVTXNVVUZCVVN4RlFVRkZPMFZCUTNCRExFOUJRVTg3U1VGRFRDeFRRVUZUTEVWQlFVY3NaMEpCUVdkQ0xFbEJRVXM3VFVGREwwSXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETzAxQlF6ZENMRWxCUVVrc1owSkJRV2RDTEVsQlFVa3NaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTzFGQlF5OURMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenROUVVNM1JEdEpRVU5HTEVOQlFVTTdTVUZEUkN4WFFVRlhMRVZCUVVVc1EwRkJRU3hMUVVGTk8wMUJRMnBDTEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5xUXp0RlFVTkdMRU5CUVVNN1FVRkRTRHRCUVVWQkxFMUJRVTBzUzBGQlN5eFRRVUZUTEdkQ1FVRlRMRU5CUVVNN1JVRlJOVUlzU1VGQlNTeERRVUZCTEVWQlFVYzdTVUZEVEN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBWQlEzUkNPMFZCUlVFc1NVRkJTU3hEUVVGQkxFVkJRVWM3U1VGRFRDeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wVkJRM1JDTzBWQlJVRXNaME5CUVdkRExFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTXNSVUZCUlR0SlFVTTNReXhKUVVGSkxGTkJRVk1zUTBGQlF5eE5RVUZOTEVWQlFVVTdUVUZEY0VJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEySXNRMEZCUXl4TlFVRk5MRWxCUVVrc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVTdUVUZETlVJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEySTdSVUZEUmp0RlFVVkJMRTFCUVUwc1EwRkJRU3hGUVVGSE8wbEJRMUFzVFVGQlRTeExRVUZMTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NTVUZCU1N4VFFVRlRMRU5CUVVNN1NVRkROMFFzVFVGQlRUdE5RVUZGTEZGQlFWRXNSVUZCUlN4UlFVRlJPMDFCUVVVc2IwSkJRVzlDTEVkQlFVYzdTVUZCVFN4RFFVRkRMRWRCUVVjc1MwRkJTenRKUVVOc1JTeE5RVUZOTEZWQlFWVXNSMEZEWkN4TFFVRkxMRU5CUVVNc1NVRkJRU3h4UWtGQldTeEZRVUZETEVOQlFVTXNSMEZCUnl4clFrRkJhMElzUjBGQlJ5eHJRa0ZCYTBJc1EwRkJRenRKUVVOcVJTeE5RVUZOTEZsQlFWa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1dVRkJXU3hKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVVUzUXl4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4VlFVRkJMRU5CUVVFc1QwRkJVenROUVVOU0xGRkJRVkVzUlVGQlJTeExRVUZOTzAxQlEyaENMRTFCUVUwc1JVRkJSU3hEUVVGQkxFdEJRVTA3VVVGRFdpeEpRVUZKTEV0QlFVc3NRMEZCUXl4TlFVRk5MRVZCUVVVN1ZVRkRhRUlzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXp0WlFVTllMRmRCUVZjc1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzFWQlF6RkNMRU5CUVVNc1EwRkJRenRSUVVOS08xRkJRMEVzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkRPMDFCUXpsRExFTkJRVVU3VFVGRFJpeEhRVUZITEVWQlFVY3NSMEZCUnl4SlFVRkxPMUZCUTFvc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eEhRVUZITzAxQlEzSkNMRU5CUVVVN1RVRkRSaXhWUVVGVkxFVkJRVVVzVlVGQlZ6dE5RVU4yUWl4WlFVRlpMRVZCUVVVc1dVRkJZVHROUVVNelFpeGhRVUZoTEVWQlFVVXNZVUZCWXp0TlFVTTNRaXhaUVVGWkxFVkJRVVVzUTBGQlF6dEpRVUZ4UWl4SFFVVnVReXhSUVVOUkxFTkJRVU03UlVGRmFFSTdRVUZEUmp0QlFVRkRMR1ZCUVVFc1EwRjBSRXNzUzBGQlN5eGxRVU5WTzBWQlEycENMRTFCUVUwc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZPMFZCUTJwRExGTkJRVk1zUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVk8wVkJRM0JETEZkQlFWY3NSVUZCUlN4clFrRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTzBWQlEzUkRMRlZCUVZVc1JVRkJSU3hyUWtGQlV5eERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTXZRaXhEUVVGRE8wRkJRVUVzU1VGQlFTeFJRVUZCTEVkQmEwUlpMRWxCUVVFc2JVSkJRVThzUlVGQlF5eGxRVUZsTEVWQlFVVXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTTdRVUZCUVN4UFFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxGRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU01V0d4RkxFbEJRVUVzWjBKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQmQwUXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEwRjRSQ3hKUVVGQkxFMUJRVUVzUjBGQlFTeDFRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFOUJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHbENRVUZCTEVkQlFVRXNUMEZCUVR0QlFVRnJSU3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN1FVRkJRU3hUUVVGQkxIbENRVUZCTEZkQlFVRXNaVUZCUVN4UFFVRkJMR3REUVVGQkxHbENRVUZCTEU5QlFVRXNUMEZCUVN4UlFVRkJMR2RDUVVGQkxFOUJRVUVzVDBGQlFTeFpRVUZCTEhkQ1FVRkJMRmxCUVVFc1EwRkJRU3hYUVVGQkxGZEJRVUVzVjBGQlFTeEhRVUZCTEdkQ1FVRkJMRWRCUVVFc2FVSkJRVUVzUzBGQlFTeFhRVUZCTzBGQlFVRXNVMEZCUVN4M1FrRkJRU3hIUVVGQkxFVkJRVUVzVjBGQlFTeFRRVUZCTEZkQlFVRXNTVUZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzVjBGQlFTeEhRVUZCTEZGQlFVRXNSMEZCUVN4dlFrRkJRU3hIUVVGQkxIZENRVUZCTEVkQlFVRXNORUpCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUVzVlVGQlFTeExRVUZCTEVkQlFVRXNkMEpCUVVFc1EwRkJRU3hYUVVGQkxFOUJRVUVzUzBGQlFTeEpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3haUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1YwRkJRU3h4UWtGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRWxCUVVFc1RVRkJRU3hEUVVGQkxIZENRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1VVRkJRU3hIUVVGQkxHdENRVUZCTEUxQlFVRXNRMEZCUVN4VFFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4VFFVRkJMRWxCUVVFc1IwRkJRU3h4UWtGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4M1FrRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEdOQlFVRXNTVUZCUVN4TFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFMUJRVUVzUlVGQlFTeEhRVUZCTEVWQlFVRXNTVUZCUVN4WlFVRkJMRTFCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNVMEZCUVN4TlFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxFZEJRVUVzVFVGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzVFVGQlFTeFpRVUZCTEUxQlFVRTdRVUZCUVN4VFFVRkJMR2RDUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEVWQlFVRXNTMEZCUVN4SlFVRkJMRWRCUVVFc1IwRkJRU3hqUVVGQkxFTkJRVUVzUjBGQlFTeFBRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRWxCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4SlFVRkJMRXRCUVVFc1JVRkJRU3hMUVVGQkxFVkJRVUVzVlVGQlFTeFJRVUZCTEZsQlFVRXNVVUZCUVN4UlFVRkJMRzlDUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTMEZCUVN4WFFVRkJMRWRCUVVFN1FVRkJRU3hUUVVGQkxHVkJRVUVzUjBGQlFTeFJRVUZCTEVkQlFVRXNSMEZCUVN4WlFVRkJMRU5CUVVFc1IwRkJRU3d5UWtGQlFTeEhRVUZCTEdkQ1FVRkJMRWRCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFUdEJRVUZCTEZOQlFVRXNZVUZCUVN4TFFVRkJMRVZCUVVFc1NVRkJRU3hsUVVGQkxFdEJRVUVzYVVKQlFVRXNTMEZCUVN4clFrRkJRU3hMUVVGQkxFMUJRVUVzU1VGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4TlFVRkJMRU5CUVVFc1YwRkJRU3hQUVVGQkxFbEJRVUVzUzBGQlFTeFRRVUZCTEZGQlFVRXNSMEZCUVN4SFFVRkJMRWxCUVVFc1EwRkJRU3hKUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTEVsQlFVRXNNa0pCUVVFc1IwRkJRU3h6UWtGQlFTeEhRVUZCTEZsQlFVRXNVMEZCUVN3MFJFRkJRU3hKUVVGQkxHZENRVUZCTEUxQlFVRXNSMEZCUVN4TlFVRkJMRVZCUVVFc1MwRkJRVHRCUVVWdVJDeE5RVUZOTEdWQlFXVXNVMEZCVXl4blFrRkJVeXhEUVVGRE8wVkJRVUVzV1VGQlFTeEhRVUZCTEVsQlFVRTdTVUZCUVN4VFFVRkJMRWxCUVVFN1NVRkJRU3hsUVVGQkxHZENRVmMzUXp0TlFVTk9MRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4elFrRkJjMElzUlVGQlJTeERRVU0xUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVTTFRanRKUVVOSUxFTkJRVU03U1VGQlFTeGxRVUZCTEcxQ1FVVlhMRU5CUVVNc1NVRkJTenROUVVOb1FpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMUZCUTFvc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTTdUVUZEYkVJc1EwRkJReXhEUVVGRE8wbEJRMG9zUTBGQlF6dEpRVUZCTEdWQlFVRXNiVUpCUlZVc1RVRkJUVHROUVVObUxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETzBsQlEyaEZMRU5CUVVNN1NVRkJRU3hsUVVGQkxIRkNRVVZoTEVOQlFVTXNTVUZCU3p0TlFVTnNRaXhKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEV0QlFVc3NUMEZCVHl4SlFVRkpMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eEZRVUZGTzFGQlEzcERMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dE5RVU5xUWp0SlFVTkdMRU5CUVVNN1JVRkJRVHRGUVVWRUxFMUJRVTBzUTBGQlFTeEZRVUZITzBsQlExQXNUVUZCVFR0TlFVRkZPMGxCUVVVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTzBsQlJURkNMRzlDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0TlFVRkxMRk5CUVZNc1JVRkJRenRKUVVGdFFpeG5Ra0ZEYUVNc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlFVc3NVMEZCVXl4RlFVRkRPMGxCUVRSQ0xHZENRVU42UXl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlN5eFRRVUZUTEVWQlFVTTdTVUZCYjBNc1IwRkRhRVFzUTBGQlF5eERRVUZETEZsQlFWa3NRMEZCUXl4bFFVTm9RaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4cFFrRkJRU3hEUVVGQkxGVkJRVlU3VFVGRFZDeFRRVUZUTEVWQlFVTXNNRU5CUVRCRE8wMUJRM0JFTEZOQlFWTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRk8wMUJRM1JDTEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVlU3VFVGRE9VSXNVVUZCVVN4RlFVRkZMREJDUVVGUkxFTkJRVU03U1VGQlRTeERRVU14UWl4RFFVTkZMRU5CUVVNc1pVRkRUaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdUVUZCU3l4VFFVRlRMRVZCUVVNN1NVRkJaME1zUjBGRE5VTXNRMEZCUXl4RFFVRkRMR0ZCUVdFc1EwRkRZaXhEUVVGRExHVkJRMDRzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMDFCUTBVc1NVRkJTU3hGUVVGRExFMUJRVTA3VFVGRFdDeFRRVUZUTEVWQlFVTXNNRUpCUVRCQ08wMUJRM0JETEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVenROUVVONFFpeFZRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVZjN1RVRkROVUlzUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJUVHROUVVONFFpeFRRVUZUTzBsQlFVRXNRMEZEVml4RFFVTkZMRU5CUVVNc1pVRkRUaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdUVUZCU3l4VFFVRlRMRVZCUVVNN1NVRkJNa0lzWjBKQlEzaERMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEU5QlFVRXNRMEZCUVN4UFFVRk5PMDFCUVVNc1NVRkJTU3hGUVVGRExGZEJRVmM3VFVGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRKUVVGVkxFZEJRM0JFTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUTB3c1EwRkJReXhsUVVOVUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRTlCUVVFc1EwRkJRU3hQUVVGTk8wMUJRMHdzU1VGQlNTeEZRVUZETEZOQlFWTTdUVUZEWkN4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVk03VFVGRGRrSXNVVUZCVVN4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dEpRVUZOTEVkQlJUTkNMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRMGdzUTBGRFRDeERRVU5HTEVOQlFVTTdSVUZGVmp0QlFVTkdPMEZCUVVNc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeGxRVUZCTzBGQlFVRXNaVUZCUVN4RFFUTkZiMElzWlVGQlpTeHJRa0ZEV2p0RlFVTndRaXhEUVVGRExFVkJRVVVzYTBKQlFWTXNRMEZCUXp0QlFVTm1MRU5CUVVNN1FVRkJRU3hsUVVGQkxFTkJTR3RDTEdWQlFXVXNaVUZMWmp0RlFVTnFRaXhUUVVGVExFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWVHRGUVVOd1F5eG5Ra0ZCWjBJc1JVRkJSU3hyUWtGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRlZPMFZCUXpkRExFMUJRVTBzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVONlFpeERRVUZET3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEyUklMRWxCUVVFc1YwRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEU5QlFVRXNSMEZCUVN4MVFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdkQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFUUkVMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVRkJMRk5CUVVFc2VVSkJRVUVzVjBGQlFTeGxRVUZCTEU5QlFVRXNhME5CUVVFc2FVSkJRVUVzVDBGQlFTeFBRVUZCTEZGQlFVRXNaMEpCUVVFc1QwRkJRU3hQUVVGQkxGbEJRVUVzZDBKQlFVRXNXVUZCUVN4RFFVRkJMRmRCUVVFc1YwRkJRU3hYUVVGQkxFZEJRVUVzWjBKQlFVRXNSMEZCUVN4cFFrRkJRU3hMUVVGQkxGZEJRVUU3UVVGQlFTeFRRVUZCTEhkQ1FVRkJMRWRCUVVFc1JVRkJRU3hYUVVGQkxGTkJRVUVzVjBGQlFTeEpRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hYUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEc5Q1FVRkJMRWRCUVVFc2QwSkJRVUVzUjBGQlFTdzBRa0ZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRU3hWUVVGQkxFdEJRVUVzUjBGQlFTeDNRa0ZCUVN4RFFVRkJMRmRCUVVFc1QwRkJRU3hMUVVGQkxFbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRmxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEZOQlFVRXNUVUZCUVN4WFFVRkJMSEZDUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNTVUZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2EwSkJRVUVzVFVGQlFTeERRVUZCTEZOQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEZOQlFVRXNTVUZCUVN4SFFVRkJMSEZDUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzWTBGQlFTeEpRVUZCTEV0QlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1RVRkJRU3hGUVVGQkxFZEJRVUVzUlVGQlFTeEpRVUZCTEZsQlFVRXNUVUZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFRRVUZCTEUxQlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc1IwRkJRU3hOUVVGQkxFdEJRVUVzU1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hOUVVGQkxGbEJRVUVzVFVGQlFUdEJRVVUxUkN4VFFVRlRMR1ZCUVdVc1EwRkJReXhMUVVGTExFVkJRVVU3UlVGRE9VSXNUMEZCVHp0SlFVTk1MRWxCUVVrc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1NVRkJTU3hEUVVGRExFTkJRVU03UlVGRGFrUXNRMEZCUXp0QlFVTklPMEZCUlVFc1UwRkJVeXhyUWtGQmEwSXNRMEZCUXl4UlFVRlJMRVZCUVVVN1JVRkRjRU1zVDBGQlR6dEpRVU5NTEZOQlFWTXNSVUZCUlN4RFFVRkJMRXRCUVUwc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUXpsRExHRkJRV0VzUlVGQlJ5eGpRVUZqTEVsQlFVczdUVUZEYWtNc1QwRkJUeXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVVVzYVVKQlFXbENMRWxCUVVzN1VVRkRia1VzU1VGQlNTeGpRVUZqTEVWQlFVVTdWVUZEYkVJc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eGxRVUZsTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzWTBGQll5eERRVUZETEVOQlFVTTdVVUZEZEVVN1VVRkRRU3hQUVVGUExHbENRVUZwUWp0TlFVTXhRaXhEUVVGRExFTkJRVU03U1VGRFNqdEZRVU5HTEVOQlFVTTdRVUZEU0R0QlFVVkJMRk5CUVZNc1ZVRkJWU3hEUVVGRExGVkJRVlVzUlVGQlJTeGhRVUZoTEVWQlFVVTdSVUZETjBNc1RVRkJUVHRKUVVGRk8wVkJRVzFDTEVOQlFVTXNSMEZCUnl4VlFVRlZPMFZCUTNwRExFMUJRVTA3U1VGQlJUdEZRVUZqTEVOQlFVTXNSMEZCUnl4aFFVRmhPMFZCUlhaRExFOUJRVTg3U1VGRFRDeEhRVUZITEZWQlFWVTdTVUZEWWl4SFFVRkhMR0ZCUVdFN1NVRkRhRUlzVFVGQlRTeEZRVUZITEdOQlFXTXNTVUZCU3p0TlFVTXhRaXhQUVVGUExHRkJRV0VzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVVc2FVSkJRV2xDTEVsQlF6RkVMR3RDUVVGclFpeERRVUZETEdsQ1FVRnBRaXhEUVVOMFF5eERRVUZETzBsQlEwZzdSVUZEUml4RFFVRkRPMEZCUTBnN1FVRkJReXhKUVVGQkxGRkJRVUVzUjBGRll5eEpRVUZCTEcxQ1FVRlBMRVZCUTNCQ0xHVkJRV1VzUlVGRFppeHJRa0ZCYTBJc1JVRkRiRUlzVlVGRFJpeERRVUZETEVOQlFVTXNkMEpCUVdVc1EwRkJRenRCUVVGQkxFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNVVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUXpORGJFSXNTVUZCUVN4cFFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVRjNSQ3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRRWGhFTEVsQlFVRXNVMEZCUVN4MVFrRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hqUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVRXNRMEZCUVR0QlFVTkJMRWxCUVVFc1lVRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4WlFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRMEVzU1VGQlFTeHBRa0ZCUVN4UFFVRkJMRU5CUVVFc01FSkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4WFFVRkJMRTlCUVVFc1EwRkJRU3d5UWtGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMR0ZCUVVFc1QwRkJRU3hEUVVGQkxIVkNRVUZCTEVOQlFVRXNRMEZCUVR0QlFVdEJMRWxCUVVFc2JVSkJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc09FSkJRVUVzUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMSGxDUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMRFpFUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTzBGQlFXZEhMSEZEUVVGQkxFVkJRVUVzVDBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1IwRkJRU3hIUVVGQkxFVkJRVUVzVTBGQlFTeEhRVUZCTEVWQlFVRXNRMEZCUVN4RlFVRkJPMEZCUVVFc0swTkJRVUVzUlVGQlFTeEpRVUZCTEU5QlFVRXNUMEZCUVN4TFFVRkJMRlZCUVVFc1JVRkJRU3hQUVVGQkxFbEJRVUVzUTBGQlFTeERRVUZCTEVsQlFVRXNiMEpCUVVFc1NVRkJRU3hQUVVGQkxFVkJRVUVzUTBGQlFTeERRVUZCTEVsQlFVRXNiVUpCUVVFc1NVRkJRU3hQUVVGQkxFVkJRVUVzUTBGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN3eVFrRkJRU3gxUWtGQlFTeEZRVUZCTEU5QlFVRXNWMEZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzYVVKQlFVRXNRMEZCUVN4RlFVRkJMRVZCUVVFc1YwRkJRU3hEUVVGQkxFTkJRVUVzUlVGQlFUdEJRVUZCTEcxRVFVRkJMRVZCUVVFc1NVRkJRU3hEUVVGQkxGZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4WFFVRkJMRVZCUVVFc1JVRkJRU3hQUVVGQkxFZEJRVUVzUTBGQlFTeEZRVUZCTEVOQlFVRXNTVUZCUVN4SFFVRkJMRXRCUVVFc1NVRkJRU3hKUVVGQkxFOUJRVUVzUjBGQlFTeExRVUZCTEZGQlFVRXNTVUZCUVN4UFFVRkJMRWRCUVVFc1MwRkJRU3hWUVVGQkxFVkJRVUVzUlVGQlFTeFBRVUZCTEVWQlFVRXNVMEZCUVN4SFFVRkJMRVZCUVVFc1EwRkJRU3hGUVVGQkxFTkJRVUVzU1VGQlFTeFJRVUZCTEhkQ1FVRkJMRU5CUVVFc1YwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFTeEpRVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUlVGQlFTeEZRVUZCTEU5QlFVRXNTMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFTkJRVUVzUlVGQlFTeERRVUZCTEVsQlFVRXNVMEZCUVN4RlFVRkJMRU5CUVVFc1EwRkJRU3hKUVVGQkxIZENRVUZCTEUxQlFVRXNaVUZCUVN4SlFVRkJMRTFCUVVFc2VVSkJRVUVzUTBGQlFTeERRVUZCTEV0QlFVRXNTVUZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hGUVVGQkxFVkJRVUVzU1VGQlFTeEhRVUZCTEV0QlFVRXNVMEZCUVN4SlFVRkJMRTFCUVVFc1ZVRkJRU3hsUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4RFFVRkJMRVZCUVVFc1JVRkJRU3hKUVVGQkxFOUJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMSGxDUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1EwRkJRU3hEUVVGQkxFbEJRVUVzU1VGQlFTeExRVUZCTEVsQlFVRXNTVUZCUVN4SlFVRkJMRWxCUVVFc1NVRkJRU3hEUVVGQkxFVkJRVUVzUlVGQlFTeE5RVUZCTEdWQlFVRXNRMEZCUVN4TlFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxFbEJRVUVzUTBGQlFTeERRVUZCTEVWQlFVRXNUVUZCUVN4RlFVRkJMRTFCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRU5CUVVFc1JVRkJRU3hGUVVGQkxFVkJRVUVzUTBGQlFTeE5RVUZCTEZGQlFVRXNSMEZCUVN4SFFVRkJMRU5CUVVFc1EwRkJRU3hKUVVGQkxFdEJRVUVzUlVGQlFTeEZRVUZCTEV0QlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hOUVVGQkxFTkJRVUVzUTBGQlFTeEZRVUZCTEVOQlFVRXNUMEZCUVN4TlFVRkJMRU5CUVVFc1JVRkJRVHRCUVVWb1J5eE5RVUZOTEhkQ1FVRjNRaXgxUWtGQmRVSXNRMEZCUVR0QlFVTnlSQ3hOUVVGTkxIVkNRVUYxUWl4elFrRkJjMElzUTBGQlFUdEJRVVZ1UkN4TlFVRk5MRzFDUVVGdFFpeERRVUZET3pzN1EwRkJiMElzUzBGQlN6dEZRVU5xUkN4TlFVRk5MRmRCUVZjc1EwRkJRU3hEUVVGQkxFVkJRVUVzVjBGQlFTeFpRVUZYTEVkQlFVVXNRMEZCUVR0RlFVVTVRaXhOUVVGTkxIVkRRVUYxUXl4SFFVRkhMRU5CUVVFc1EwRkJRU3hGUVVGQkxFMUJRVUVzVTBGQlVTeEZRVU4wUkN4eFFrRkRSaXhEUVVGRExFTkJRVUU3UlVGRlJDeE5RVUZOTEdOQlFXTXNRMEZCUVN4RFFVRkJMRVZCUVVFc1YwRkJRU3haUVVGWExFVkJRVU1zVlVGQlFTeGxRVUZqTEVOQlFVTXNRMEZCUVR0RlFVTXZReXhOUVVGTkxGVkJRVlVzUTBGQlFTeERRVUZCTEVWQlFVRXNWMEZCUVN4WlFVRlhMRVZCUVVNc1ZVRkJRU3hyUWtGQmFVSXNRMEZCUXl4RFFVRkJPMFZCUlRsRExFMUJRVTBzZVVKQlFYbENMRmRCUVZjc1MwRkJTeXhEUVVNMVF5eFRRVUZWTEV0QlFVc3NVVUZCVVN4TFFVRkxMRTlCUXk5Q0xFTkJRVU1zUTBGQlFUdEZRVVZFTEUxQlFVMHNiMEpCUVc5Q0xITkNRVUZ6UWl4TFFVRkJMRWxCUVVFc1NVRkJkRUlzYzBKQlFYTkNMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFYUkNMSE5DUVVGelFpeExRVUZOTEVOQlFVRTdSVUZEZEVRc1RVRkJUU3hYUVVGWExFTkJRVUVzUTBGQlFTeEZRVUZCTEZkQlFVRXNXVUZCVnl4RlFVRkRMRlZCUVVFc09FSkJRVFpDTEVOQlFVTXNRMEZCUVR0RlFVVXpSQ3hOUVVGTkxHVkJRV1VzUTBGQlFTeERRVUZCTEVWQlFVRXNZMEZCUVN4bFFVRmpMRVZCUTJwRExFOUJRVThzUlVGRFVDeFBRVUZQTEVWQlExQTdTVUZCUlN4clFrRkJhMElzUTBGQlFTeFJRVUZSTEV0QlFVRXNTVUZCUVN4SlFVRlNMRkZCUVZFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCVWl4UlFVRlJMR2xDUVVGclFpeExRVUZKTEVsQlFVRTdSMEZCVFN4RlFVTjRSQ3hKUVVOR0xFTkJRVU1zUTBGQlFUdEZRVVZFTEVsQlFVa3NaMEpCUVdkQ0xFdEJRVXNzYjBKQlFXOUNMRVZCUVVVN1NVRkROME1zYjBKQlEwVXNUVUZCUVN4UlFVRkJMR05CUVVFc1EwRkJReXh6UWtGQlFTeFJRVUZ4UWl4RlFVRkJPMDFCUTNCQ0xGTkJRVk1zVDBGQlVUdE5RVU5xUWl4VlFVRlZMR2xDUVVGcFFpeEpRVUZKTEVsQlFVczdUVUZEY0VNc1RVRkJUU3hEUVVGQkxITkNRVUZ6UWl4TFFVRkJMRWxCUVVFc1NVRkJkRUlzYzBKQlFYTkNMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlFYUkNMSE5DUVVGelFpeExRVUZOTEV0QlFVa3NTVUZCU3p0TlFVTXpReXhUUVVGVExFMUJRVTBzYlVKQlFXMUNMRU5CUVVNc2NVSkJRWEZDTEVOQlFVVTdUVUZETVVRc1QwRkJUeXdyUWtGRFRDeFJRVUZSTEVOQlFVTXNRMEZCUVN4RFFVRkJMRVZCUVVFc1VVRkJRU3hwUWtGQlowSXNSVUZCUXl4VFFVRlRMRVZCUVVVc1VVRkJVU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZCTzB0QlJYWkVMRU5CUVVNc1EwRkJRVHRIUVVWT096czdSVUZIUVN4dlFrRkRSU3hOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZETEdkQ1FVRkJMRkZCUVdVc1JVRkJRVHRKUVVOa0xGTkJRVk1zVDBGQlVUdEpRVU5xUWl4VlFVRlZMR2xDUVVGcFFpeEpRVUZKTEVsQlFVczdTVUZEY0VNc1UwRkJVeXhQUVVGUk8wbEJRMnBDTEU5QlFVOHNUVUZCVFN4dFFrRkJiVUlzUTBGQlF5eHZRa0ZCYjBJc1EwRkJSVHRKUVVOMlJDeGpRVUZqTEZsQlFVRTdSMEZEWml4RFFVRkRMRU5CUVVFN1EwRkZUQ3hEUVVGQk8wRkJSVVFzWjBKQlFXZENMRlZCUVZVc1IwRkJSenRGUVVNelFpeFRRVUZUTEZWQlFVRXNVVUZCVXl4UFFVRlBPMFZCUTNwQ0xGTkJRVk1zVlVGQlFTeFJRVUZUTEV0QlFVTTdRMEZEY0VJc1EwRkJRVHRCUVVGRExFbEJRVUVzVjBGRllTeG5Ra0ZCWjBJc1EwRkJRVHRCUVVGQkxFOUJRVUVzVVVGQlFTeEhRVUZCTEZGQlFVRXNRMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRka1V2UWl4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZCSzBNc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPMEZCUVVFc1NVRkJRU3hSUVVGQkxFZEJSV2hETEd0Q1FVRlRPMEZCUVVFc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeFJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEwWjRRaXhKUVVGQkxFMUJRVUVzUjBGQlFTeDFRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGTkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGRkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4TFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzU1VGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRXRCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFJRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFpRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeE5RVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2IwSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJiVWdzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeDVRa0ZCUVN4WFFVRkJMR1ZCUVVFc1QwRkJRU3hyUTBGQlFTeHBRa0ZCUVN4UFFVRkJMRTlCUVVFc1VVRkJRU3huUWtGQlFTeFBRVUZCTEU5QlFVRXNXVUZCUVN4M1FrRkJRU3haUVVGQkxFTkJRVUVzVjBGQlFTeFhRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEV0QlFVRXNWMEZCUVR0QlFVRkJMRk5CUVVFc2QwSkJRVUVzUjBGQlFTeEZRVUZCTEZkQlFVRXNVMEZCUVN4WFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEZkQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2IwSkJRVUVzUjBGQlFTeDNRa0ZCUVN4SFFVRkJMRFJDUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTEZWQlFVRXNTMEZCUVN4SFFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzV1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxGZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHJRa0ZCUVN4TlFVRkJMRU5CUVVFc1UwRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1UwRkJRU3hKUVVGQkxFZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4alFVRkJMRWxCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRWxCUVVFc1dVRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEUxQlFVRXNXVUZCUVN4TlFVRkJPMEZCUVVFc1UwRkJRU3huUWtGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRXRCUVVFc1NVRkJRU3hIUVVGQkxFZEJRVUVzWTBGQlFTeERRVUZCTEVkQlFVRXNUMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1NVRkJRU3hMUVVGQkxFVkJRVUVzUzBGQlFTeEZRVUZCTEZWQlFVRXNVVUZCUVN4WlFVRkJMRkZCUVVFc1VVRkJRU3h2UWtGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRXRCUVVFc1YwRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeGxRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMRWRCUVVFc1dVRkJRU3hEUVVGQkxFZEJRVUVzTWtKQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMR0ZCUVVFc1MwRkJRU3hGUVVGQkxFbEJRVUVzWlVGQlFTeExRVUZCTEdsQ1FVRkJMRXRCUVVFc2EwSkJRVUVzUzBGQlFTeE5RVUZCTEVsQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1RVRkJRU3hEUVVGQkxGZEJRVUVzVDBGQlFTeEpRVUZCTEV0QlFVRXNVMEZCUVN4UlFVRkJMRWRCUVVFc1IwRkJRU3hKUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZCTEV0QlFVRXNSVUZCUVN4SlFVRkJMREpDUVVGQkxFZEJRVUVzYzBKQlFVRXNSMEZCUVN4WlFVRkJMRk5CUVVFc05FUkJRVUVzU1VGQlFTeG5Ra0ZCUVN4TlFVRkJMRWRCUVVFc1RVRkJRU3hGUVVGQkxFdEJRVUU3UVVGRmJrZ3NUVUZCVFN4WFFVRlhMRWRCUVVjN1JVRkRiRUlzWjBKQlFXZENMRVZCUVVVc2EwSkJRV3RDTzBWQlEzQkRMRzlDUVVGdlFpeEZRVUZGTEhOQ1FVRnpRanRGUVVNMVF5eExRVUZMTEVWQlFVVTdRVUZEVkN4RFFVRkRPMEZCUldNc1RVRkJUU3hUUVVGVExGTkJRVk1zWjBKQlFWTXNRMEZCUXp0RlFWVXZReXhYUVVGWExFTkJRVU1zUzBGQlN5eEZRVUZGTzBsQlEycENMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU03U1VGQlF5eGxRVUZCTERKQ1FXMURTU3haUVVGWk8wMUJRemRDTEVsQlFVazdVVUZEUml4TlFVRk5PMVZCUVVVN1VVRkJhVUlzUTBGQlF5eEhRVUZITEUxQlFVMHNiMEpCUVZjc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dFJRVU0xUkN4SlFVTkZMRU5CUVVNc1owSkJRV2RDTEVsQlEycENMRWxCUVVFc2QwSkJRV3RDTEVWQlFVTXNRMEZCUXl4TFFVRkxMR2REUVVFeVFpeEZRVU53UkR0VlFVTkJMRTFCUVUwc1ZVRkJWU3hIUVVGSExFbEJRVUVzWVVGQlRTeEZRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRE8xVkJReTlETEUxQlFVMHNWMEZCVnl4SFFVRkhMRlZCUVZVc1lVRkJWaXhWUVVGVkxIVkNRVUZXTEZWQlFWVXNRMEZCUlN4SlFVRkpPMVZCUTNCRExFMUJRVTBzV1VGQldTeEhRVUZITEZkQlFWY3NSMEZCUnl4WFFVRlhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVsQlFVazdWVUZEYkVVc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXhaUVVGWkxFTkJRVU03VVVGRGRFUTdUVUZEUml4RFFVRkRMRU5CUVVNc1QwRkJUeXhMUVVGTExFVkJRVVU3VVVGRFpDeEpRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVVN1ZVRkRhRUlzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXp0WlFVRkZPMVZCUVUwc1EwRkJReXhEUVVGRE8xRkJRekZDTzAxQlEwWTdUVUZEUVR0TlFVTkJMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dEpRVU51UWl4RFFVRkRPMGxCUVVFc1pVRkJRU3d5UWtGRmEwSXNXVUZCV1R0TlFVTTNRaXhKUVVGSk8xRkJRMFlzVFVGQlRUdFZRVUZGTzFGQlFWa3NRMEZCUXl4SFFVRkhMRTFCUVUwc2IwSkJRVmNzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0UlFVTjJSQ3hKUVVGSkxGZEJRVmNzUlVGQlJUdFZRVU5tTzFWQlEwRXNUVUZCVFN4SlFVRkpMRTlCUVU4c1EwRkJSU3hQUVVGUExFbEJRVXNzVlVGQlZTeERRVUZETEU5QlFVOHNSVUZCUlN4WlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03VlVGREwwUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVU3V1VGRGFrSTdWVUZEUmp0VlFVTkJMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU03V1VGQlJTeExRVUZMTEVWQlFVVXNWMEZCVnl4RFFVRkRPMVZCUVUwc1EwRkJReXhEUVVGRE8xRkJRemRETEVOQlFVTXNUVUZCVFN4SlFVRkpMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVU3VlVGRGRrSTdWVUZEUVN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNSVUZCUlN4WlFVRk5MRU5CUVVNN1VVRkRjRVU3VFVGRFJpeERRVUZETEVOQlFVTXNUMEZCVHl4TFFVRkxMRVZCUVVVN1VVRkRaQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVTdWVUZEYUVJc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dFpRVUZGTzFWQlFVMHNRMEZCUXl4RFFVRkRPMUZCUXpGQ08wMUJRMFk3U1VGRFJpeERRVUZETzBsQlFVRXNaVUZCUVN4eFFrRm5RbGtzV1VGQldUdE5RVU4yUWp0TlFVTkJPMDFCUTBFN1RVRkRRVHROUVVOQk8wMUJRMEVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVN1VVRkRjRUlzU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpMRFJDUVVGdFFpeERRVUZETEVOQlFVTTdUVUZETjBNN1RVRkRRU3hKUVVGSk8xRkJRMFlzVFVGQlRTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVOQlFVTTdVVUZETlVNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1VVRkRka0lzVFVGQlRTeFBRVUZQTEVkQlFVY3NUVUZCVFN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExEQkNRVUV3UWl4RFFVTTVSQ3hUUVVGVExFVkJRMVFzVDBGRFJpeERRVUZETzFGQlEwUXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUXpsRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZPMVZCUTJwQ08xRkJRMFlzUTBGQlF5eE5RVUZOTEVsQlFVa3NUVUZCVFN4RFFVRkRMRWxCUVVrc1MwRkJTeXhUUVVGVExFVkJRVVU3VlVGRGNFTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJRenRaUVVGRkxFdEJRVXNzUlVGQlJTeEpRVUZKTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eGxRVUZsTEVOQlFVTTdWVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRkRVVzUTBGQlF5eE5RVUZOTzFWQlEwd3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhqUVVGakxFTkJRVU1zVFVGQlRTeERRVUZETzFWQlEycERMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dFJRVU55UWp0TlFVTkdMRU5CUVVNc1EwRkJReXhQUVVGUExFdEJRVXNzUlVGQlJUdFJRVU5rTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRk8xVkJRMnBDTzFGQlEwWTdVVUZEUVN4SlFVRkpMRXRCUVVzc1EwRkJReXhKUVVGSkxFdEJRVXNzYVVKQlFXbENMRVZCUVVVN1ZVRkRjRU1zYVVKQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVVc2RVSkJRWE5DTEV0QlFVMHNSMEZCUlN4RFFVRkRPMVZCUTNwRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTTdXVUZCUlN4TFFVRkxMRVZCUVVVc1YwRkJWeXhEUVVGRE8xVkJRWEZDTEVOQlFVTXNRMEZCUXp0UlFVTTFSQ3hEUVVGRExFMUJRVTA3VlVGRFRDeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMWxCUVVVN1ZVRkJUU3hEUVVGRExFTkJRVU03VVVGRE1VSTdUVUZEUmp0SlFVTkdMRU5CUVVNN1NVRkJRU3hsUVVGQkxIVkNRWFZDWXl4TlFVRk5PMDFCUTI1Q0xFbEJRVWtzU1VGQlNTeERRVUZETEZWQlFWVXNSVUZCUlR0UlFVTnVRaXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRenROUVVNelFqdE5RVU5CTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03U1VGRGVFSXNRMEZCUXp0SlFVRkJMR1ZCUVVFc2JVSkJSVlVzVFVGQlRUdE5RVU5tTEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTTdUVUZEY0VNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTzFGQlEyNUNMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkRPMDFCUXpOQ08wMUJRMEVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU1zUlVGQlJTeE5RVUZOTzFGQlF6RkRMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPMDFCUTNwQ0xFTkJRVU1zUTBGQlF6dEpRVU5LTEVOQlFVTTdTVUZ1UzBNc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN1NVRkRia01zU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpPMGxCUTNSQ0xFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1IwRkJSeXhKUVVGSk8wbEJRemRDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1MwRkJTenM3U1VGRmNFSTdTVUZEUVN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTTdSVUZEYWtNN1JVRkZRU3hwUWtGQmFVSXNRMEZCUVN4RlFVRkhPMGxCUTJ4Q0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1R0SlFVTnVRaXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenRGUVVONlFqdEZRVVZCTEd0Q1FVRnJRaXhEUVVGRExFTkJRVU1zUlVGQlJTeFRRVUZUTEVWQlFVVTdTVUZETDBJc1RVRkJUVHROUVVGRk8wbEJRVTBzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxPMGxCUlRWQ0xFbEJRVWtzVTBGQlV5eERRVUZETEV0QlFVc3NTMEZCU3l4TFFVRkxMRVZCUVVVN1RVRkROMElzU1VGQlNTeExRVUZMTEV0QlFVc3NWMEZCVnl4RFFVRkRMRXRCUVVzc1JVRkJSVHRSUVVNdlFpeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1RVRkRia0lzUTBGQlF5eE5RVUZOTEVsQlFVa3NTMEZCU3l4TFFVRkxMRmRCUVZjc1EwRkJReXh2UWtGQmIwSXNSVUZCUlR0UlFVTnlSQ3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenROUVVONlFqdEpRVU5HTzBWQlEwWTdSVUZGUVN4bFFVRmxMRU5CUVVFc1JVRkJSenRKUVVOb1FpeFBRVUZQTzAxQlEwd3NTMEZCU3l4RlFVRkZMRmRCUVZjc1EwRkJReXhuUWtGQlowSTdUVUZEYmtNc1MwRkJTeXhGUVVGRk8wbEJRMVFzUTBGQlF6dEZRVU5JTzBWQk5FTkJMRzlDUVVGdlFpeERRVUZCTEVWQlFVYzdTVUZEY2tJc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eExRVUZMTzBsQlEzQkNMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNN1NVRkRjRU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03UlVGRE0wSTdSVUZGUVN4clFrRkJhMElzUTBGQlFTeEZRVUZITzBsQlEyNUNMRWxCUVVrc1NVRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJUdE5RVU51UWl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzAxQlEzWkNMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdUVUZEZEVJc1NVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eEpRVUZKTzBsQlEzaENPMFZCUTBZN1JVRjNRMEVzV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlR0SlFVTndRaXhKUVVGSkxFbEJRVWtzUjBGQlJ5eFRRVUZUTzBsQlEzQkNMRWxCUVVrc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF6czdTVUZGWmp0SlFVTkJPMGxCUTBFN08wbEJSVUU3U1VGRFFTeEpRVUZKTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSVUZCUlR0TlFVTjZReXhKUVVGSkxFZEJRVWNzVTBGQlV6dE5RVU5vUWl4TlFVRk5MRWRCUVVjN1VVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhEUVVGRE8wMUJRVVVzUTBGQlF6czdUVUZGYmtRN1NVRkRSaXhEUVVGRExFMUJRVTBzU1VGQlNTeFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXl4TFFVRkxMRWxCUVVrc1JVRkJSVHROUVVONlJDeEpRVUZKTEVkQlFVY3NVMEZCVXp0TlFVTm9RaXhOUVVGTkxFZEJRVWM3VVVGQlJTeFBRVUZQTEVWQlFVVTdUVUZCVVN4RFFVRkRPMGxCUXk5Q08wbEJRMEVzVDBGQlR6dE5RVUZGTEVsQlFVazdUVUZCUlR0SlFVRlBMRU5CUVVNN1JVRkRla0k3UlVGdFFrRXNWMEZCVnl4RFFVRkJMRVZCUVVjN1NVRkRXaXhOUVVGTk8wMUJRVVU3U1VGQlJTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4N1NVRkRNVUlzVFVGQlRUdE5RVUZGTzBsQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTE8wbEJSVFZDTEVsQlFVa3NTMEZCU3l4RlFVRkZMRWRCUVVjN1NVRkRaQ3hKUVVGSkxFdEJRVXNzUTBGQlF5eEpRVUZKTEV0QlFVc3NhVUpCUVdsQ0xFVkJRVVU3VFVGRGNFTXNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJReXh2UWtGQmIwSXNRMEZCUXp0TlFVTXZRaXhIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETEdWQlFXVXNRMEZCUXp0SlFVTXhRaXhEUVVGRExFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4TFFVRkxMRU5CUVVNc1EwRkJReXhsUVVGbExFTkJRVU1zUlVGQlJUdE5RVU12UXl4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExHVkJRV1VzUTBGQlF6dEpRVU14UWl4RFFVRkRMRTFCUVUwN1RVRkRUQ3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETEhsQ1FVRjVRaXhEUVVGRE8wMUJRM0JETEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTTdTVUZETDBJN1NVRkZRU3h2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJRU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEZGQlFVRXNjVUpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlFVc3NVMEZCVXl4RlFVRkRPMGxCUVcxQ0xHZENRVU5vUXl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlN5eEhRVUZITEVWQlFVTXNiVUpCUVcxQ08wMUJRVU1zUzBGQlN5eEZRVUZETEVsQlFVazdUVUZCUXl4TlFVRk5MRVZCUVVNc1NVRkJTVHROUVVGRExFZEJRVWNzUlVGQlF6dEpRVUZGTEVOQlFVVXNRMEZEZWtRc1EwRkJReXhGUVVOTUxFdEJRVXNzWjBKQlFVY3NUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFXMUNMRWRCUVVVc1MwRkJWeXhEUVVGRExFZEJRVWNzU1VGQlNTeGxRVU5vUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlN5eFRRVUZUTEVWQlFVTTdTVUZCYlVJc1IwRkJSU3hIUVVGVExFTkJRVU1zWlVGRE9VTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYjBKQlFVRXNRMEZCUVN4UFFVRnRRanROUVVOc1FpeFJRVUZSTEVWQlFVVXNTVUZCU1N4RFFVRkRMRmxCUVdFN1RVRkROVUlzVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlRPMDFCUTNoQ0xGVkJRVlVzUlVGQlJTeERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkZPMDFCUTNoQ0xGVkJRVlVzUlVGQlJTeERRVUZETEVOQlFVTXNWVUZCVlR0SlFVRkZMRU5CUXpOQ0xFTkJRMFFzUTBGQlF6dEZRVVZRTzBWQlJVRXNWMEZCVnl4RFFVRkJMRVZCUVVjN1NVRkRXaXhOUVVGTk8wMUJRVVU3U1VGQlJTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4N1NVRkRNVUlzVFVGQlRUdE5RVUZGTzBsQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTE8wbEJSVFZDTEVsQlFVa3NUMEZCVHp0SlFVTllMRWxCUVVrc1MwRkJTeXhMUVVGTExGZEJRVmNzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSVHROUVVNeFF5eFBRVUZQTEVkQlFVY3NRMEZCUXl4RFFVRkRMSEZDUVVGeFFpeERRVUZETzBsQlEzQkRMRU5CUVVNc1RVRkJUU3hKUVVGSkxFdEJRVXNzUzBGQlN5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RlFVRkZPMDFCUTNSRExFOUJRVThzUjBGQlJ5eERRVUZETEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU03U1VGRGFrTXNRMEZCUXl4TlFVRk5MRWxCUVVrc1MwRkJTeXhMUVVGTExGZEJRVmNzUTBGQlF5eHZRa0ZCYjBJc1JVRkJSVHROUVVOeVJDeFBRVUZQTEVkQlFVY3NRMEZCUXl4RFFVRkRMRFJDUVVFMFFpeERRVUZETzBsQlF6TkRPMGxCUlVFc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeFJRVUZCTEhGQ1FVTkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZMTEZOQlFWTXNSVUZCUXp0SlFVRnRRaXhIUVVGSExFZEJRVVVzUTBGQlF5eERRVUZETEZsQlFWa3NRMEZCUlN4RlFVRlBMRU5CUVVNc1pVRkRMMFFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMDFCUVVzc1UwRkJVeXhGUVVGRE8wbEJRWEZDTEdkQ1FVTnNReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdUVUZCU3l4VFFVRlRMRVZCUVVNN1NVRkJiME1zWjBKQlEycEVMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVU5GTEVWQlFVVXNSVUZCUXl4UFFVRlBPMDFCUTFZc1MwRkJTeXhGUVVGRk8xRkJRMHdzVDBGQlR5eEZRVUZGTEV0QlFVc3NTMEZCU3l4WFFVRlhMRU5CUVVNc1MwRkJTeXhIUVVGSExFOUJRVThzUjBGQlJ6dE5RVU51UkR0SlFVRkZMRU5CUTBnc1EwRkJReXhGUVVORUxFdEJRVXNzUzBGQlN5eFhRVUZYTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1owSkJRMnBETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExGRkJRVUVzUTBGQlFTeFBRVUZQTzAxQlFVTXNTMEZCU3l4RlFVRkRPMGxCUVRoQ0xFTkJRVVVzUTBGRk9VTXNRMEZEUml4RFFVRkRMR1ZCUTA0c1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlFVc3NVMEZCVXl4RlFVRkRPMGxCUVc5Q0xFZEJRVVVzVDBGQllTeERRVU5zUkN4RFFVRkRPMFZCUlZBN1JVRkZRU3hOUVVGTkxFTkJRVUVzUlVGQlJ6dEpRVU5RTEUxQlFVMDdUVUZCUlR0SlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN6dEpRVU0xUWl4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdUVUZCU3l4VFFVRlRMRVZCUVVNN1NVRkJXU3huUWtGRGVrSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETEcxQ1FVRnRRanROUVVGRExFOUJRVThzUlVGQlJTeEpRVUZKTEVOQlFVTTdTVUZCWVN4RFFVRk5MRU5CUVVNc1JVRkRjRVVzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZETlVNc1EwRkJRenRGUVVWV08wRkJRMFk3UVVGQlF5eFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRk5CUVVFN1FVRkJRU3hsUVVGQkxFTkJOMUJ2UWl4VFFVRlRMR1ZCUTFRN1JVRkRha0lzVTBGQlV5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlU3UlVGRGNFTXNZMEZCWXl4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEycERMRU5CUVVNN1FVRkJRU3hsUVVGQkxFTkJTbXRDTEZOQlFWTXNhMEpCVFU0N1JVRkRjRUlzUTBGQlF5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNN1FVRkRaaXhEUVVGRE96czdPenM3T3pzN096czdPenM3T3pzN096dEJRekZDU0N4SlFVRkJMRmRCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFJRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVRXJReXhUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN1FVRkZMME1zVFVGQlRTeHJRa0ZCYTBJc1IwRkJTU3hSUVVGUkxFbEJRVXM3UlVGRGRrTXNUMEZCVHp0SlFVTk1MRk5CUVZNc1JVRkJSU3hEUVVGQkxFdEJRVTBzVVVGQlVTeERRVUZETEVsQlFVRXNhMEpCUVZNc1JVRkJReXhEUVVGRExFTkJRVU03U1VGRGRFTXNZMEZCWXl4RlFVRkhMRWxCUVVrc1NVRkJTeXhSUVVGUkxFTkJRVU1zU1VGQlFTeDFRa0ZCWXl4RlFVRkRMRWxCUVVrc1EwRkJRenRGUVVONlJDeERRVUZETzBGQlEwZ3NRMEZCUXp0QlFVRkRMRWxCUVVFc1VVRkJRU3hIUVVWaExFbEJRVUVzYlVKQlFVOHNSVUZCUXl4SlFVRkpMRVZCUVVVc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXl4clFrRkJVeXhEUVVGRE8wRkJRVUVzVDBGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4UlFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRXRE5FTEVsQlFVRXNiVUpCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZCTUVRc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTBFeFJDeEpRVUZCTEZWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEUxQlFVRXNSMEZCUVN4MVFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEUxQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQlowTXNVMEZCUVN4NVFrRkJRU3hYUVVGQkxHVkJRVUVzVDBGQlFTeHJRMEZCUVN4cFFrRkJRU3hQUVVGQkxFOUJRVUVzVVVGQlFTeG5Ra0ZCUVN4UFFVRkJMRTlCUVVFc1dVRkJRU3gzUWtGQlFTeFpRVUZCTEVOQlFVRXNWMEZCUVN4WFFVRkJMRmRCUVVFc1IwRkJRU3huUWtGQlFTeEhRVUZCTEdsQ1FVRkJMRXRCUVVFc1YwRkJRVHRCUVVGQkxGTkJRVUVzZDBKQlFVRXNSMEZCUVN4RlFVRkJMRmRCUVVFc1UwRkJRU3hYUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRmRCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYjBKQlFVRXNSMEZCUVN4M1FrRkJRU3hIUVVGQkxEUkNRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJMRlZCUVVFc1MwRkJRU3hIUVVGQkxIZENRVUZCTEVOQlFVRXNWMEZCUVN4UFFVRkJMRXRCUVVFc1NVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNXVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEZkQlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeEpRVUZCTEUxQlFVRXNRMEZCUVN4M1FrRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEZGQlFVRXNSMEZCUVN4clFrRkJRU3hOUVVGQkxFTkJRVUVzVTBGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzVTBGQlFTeEpRVUZCTEVkQlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hqUVVGQkxFbEJRVUVzUzBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4TlFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxFbEJRVUVzV1VGQlFTeE5RVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGTkJRVUVzVFVGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4SFFVRkJMRTFCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRTFCUVVFc1dVRkJRU3hOUVVGQk8wRkJRVUVzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeG5Ra0ZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxFdEJRVUVzU1VGQlFTeEhRVUZCTEVkQlFVRXNZMEZCUVN4RFFVRkJMRWRCUVVFc1QwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzU1VGQlFTeExRVUZCTEVWQlFVRXNTMEZCUVN4RlFVRkJMRlZCUVVFc1VVRkJRU3haUVVGQkxGRkJRVUVzVVVGQlFTeHZRa0ZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFdEJRVUVzVjBGQlFTeEhRVUZCTzBGQlFVRXNVMEZCUVN4bFFVRkJMRWRCUVVFc1VVRkJRU3hIUVVGQkxFZEJRVUVzV1VGQlFTeERRVUZCTEVkQlFVRXNNa0pCUVVFc1IwRkJRU3huUWtGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMRWRCUVVFN1FVRkJRU3hUUVVGQkxHRkJRVUVzUzBGQlFTeEZRVUZCTEVsQlFVRXNaVUZCUVN4TFFVRkJMR2xDUVVGQkxFdEJRVUVzYTBKQlFVRXNTMEZCUVN4TlFVRkJMRWxCUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzVFVGQlFTeERRVUZCTEZkQlFVRXNUMEZCUVN4SlFVRkJMRXRCUVVFc1UwRkJRU3hSUVVGQkxFZEJRVUVzUjBGQlFTeEpRVUZCTEVOQlFVRXNTVUZCUVN4RFFVRkJMRXRCUVVFc1JVRkJRU3hKUVVGQkxESkNRVUZCTEVkQlFVRXNjMEpCUVVFc1IwRkJRU3haUVVGQkxGTkJRVUVzTkVSQlFVRXNTVUZCUVN4blFrRkJRU3hOUVVGQkxFZEJRVUVzVFVGQlFTeEZRVUZCTEV0QlFVRTdRVUZGYWtJc1RVRkJUU3gxUWtGQmRVSXNVMEZCVXl4dlFrRkJZU3hEUVVGRE8wVkJRVUVzV1VGQlFTeEhRVUZCTEVsQlFVRTdTVUZCUVN4VFFVRkJMRWxCUVVFN1NVRkJRU3hsUVVGQkxHMUNRVmwwUkN4WlFVRlpPMDFCUTNKQ0xFMUJRVTA3VVVGQlJTeFJRVUZSTzFGQlFVVTdUVUZCVlN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXM3VFVGRk1VTXNUVUZCVFN4UlFVRlJMRU5CUVVNc1EwRkJRenROUVVOb1FpeFRRVUZUTEVOQlFVTXNRMEZCUXp0SlFVTmlMRU5CUVVNN1JVRkJRVHRGUVVWRUxFMUJRVTBzUTBGQlFTeEZRVUZITzBsQlExQXNUVUZCVFR0TlFVRkZPMGxCUVVVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTzBsQlF6RkNMRTFCUVUwN1RVRkJSU3hUUVVGVE8wMUJRVVVzYVVKQlFXbENPMDFCUVVVN1NVRkJZeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVczdTVUZGYkVVc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1RVRkJRU3hEUVVGQkxFOUJRVXM3VFVGRFNpeFZRVUZWTEVWQlExSXNZVUZCWVN4SFFVTlVMRU5CUVVNc1EwRkJReXhwUWtGQmFVSXNSVUZCUlN4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTXNSMEZEZWtNc1EwRkJReXhEUVVGRExGbEJRVmtzUlVGQlJTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRM2hETzAxQlEwUXNUMEZCVHl4RlFVRkZMRk5CUVZVN1RVRkRia0lzVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlRPMDFCUTNoQ0xGRkJRVkVzUlVGQlJTeFRRVUZWTzAxQlEzQkNMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVU1zVjBGQlZ5eERRVUZGTzAxQlF6TkNMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVUdEpRVUZGTEdkQ1FVVjRRaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNNa0pCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlFVc3NVMEZCVXl4RlFVRkRPMGxCUVd0RExFZEJRemxETEdGQlFXRXNSMEZEVml4RFFVRkRMRU5CUVVNc01rSkJRVEpDTEVWQlFVVXNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETEVkQlEyNUVMRU5CUVVNc1EwRkJReXh6UWtGQmMwSXNSVUZCUlN4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlF6bERMRU5CUTBZc1EwRkRRU3hEUVVGRE8wVkJSVm83UVVGRFJqdEJRVUZETEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc2RVSkJRVUU3UVVGQlFTeGxRVUZCTEVOQk9VTnZRaXgxUWtGQmRVSXNhMEpCUTNCQ08wVkJRM0JDTEVOQlFVTXNSVUZCUlN4clFrRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF6dEJRVU53UWl4RFFVRkRPMEZCUVVFc1pVRkJRU3hEUVVoclFpeDFRa0ZCZFVJc1pVRkxka0k3UlVGRGFrSXNVVUZCVVN4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVTdSVUZEYmtNc1UwRkJVeXhGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVN1JVRkRjRU1zYVVKQlFXbENMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlR0RlFVTTVReXhoUVVGaExFVkJRVVVzYTBKQlFWTXNRMEZCUXp0QlFVTXpRaXhEUVVGRE96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMlJJTEVsQlFVRXNWMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFMUJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4bFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4dFFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVRnpSU3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN1FVRkZkRVVzVFVGQlRTeGxRVUZsTEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1VVRkJVU3hMUVVGTE8wVkJRM1pETEUxQlFVMDdTVUZCUlR0RlFVRnJRaXhEUVVGRExFZEJRVWNzVVVGQlVUdEZRVVYwUXl4UFFVRlBPMGxCUTB3N1JVRkRSaXhEUVVGRE8wRkJRMGdzUTBGQlF6dEJRVUZETEVsQlFVRXNVVUZCUVN4SFFVVmhMRWxCUVVFc1kwRkJUeXhGUVVOd1FpeDFRa0ZCWXl4RlFVTmtMRWxCUVVFc2JVSkJRVThzUlVGQlF5eGxRVUZsTEVOQlEzcENMRU5CUVVNc1EwRkJReXd5UWtGQmRVSXNRMEZCUXp0QlFVRkJMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzVVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEyaENNVUlzU1VGQlFTeHhRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVUUwUkN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEUVRWRUxFbEJRVUVzVFVGQlFTeEhRVUZCTEhWQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVFVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzYVVKQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hoUVVGQkxFZEJRVUVzVDBGQlFUdEJRVUYzUlN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMSGxDUVVGQkxGZEJRVUVzWlVGQlFTeFBRVUZCTEd0RFFVRkJMR2xDUVVGQkxFOUJRVUVzVDBGQlFTeFJRVUZCTEdkQ1FVRkJMRTlCUVVFc1QwRkJRU3haUVVGQkxIZENRVUZCTEZsQlFVRXNRMEZCUVN4WFFVRkJMRmRCUVVFc1YwRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNhVUpCUVVFc1MwRkJRU3hYUVVGQk8wRkJRVUVzVTBGQlFTeDNRa0ZCUVN4SFFVRkJMRVZCUVVFc1YwRkJRU3hUUVVGQkxGZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1YwRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHZRa0ZCUVN4SFFVRkJMSGRDUVVGQkxFZEJRVUVzTkVKQlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFc1ZVRkJRU3hMUVVGQkxFZEJRVUVzZDBKQlFVRXNRMEZCUVN4WFFVRkJMRTlCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4WlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFRRVUZCTEUxQlFVRXNWMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMR3RDUVVGQkxFMUJRVUVzUTBGQlFTeFRRVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeFRRVUZCTEVsQlFVRXNSMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxHTkJRVUVzU1VGQlFTeExRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRTFCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzU1VGQlFTeFpRVUZCTEUxQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRWRCUVVFc1RVRkJRU3hMUVVGQkxFbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1RVRkJRU3haUVVGQkxFMUJRVUU3UVVGQlFTeFRRVUZCTEdkQ1FVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzUzBGQlFTeEpRVUZCTEVkQlFVRXNSMEZCUVN4alFVRkJMRU5CUVVFc1IwRkJRU3hQUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeEpRVUZCTEV0QlFVRXNSVUZCUVN4TFFVRkJMRVZCUVVFc1ZVRkJRU3hSUVVGQkxGbEJRVUVzVVVGQlFTeFJRVUZCTEc5Q1FVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUzBGQlFTeFhRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMR1ZCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzUjBGQlFTeFpRVUZCTEVOQlFVRXNSMEZCUVN3eVFrRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzWVVGQlFTeExRVUZCTEVWQlFVRXNTVUZCUVN4bFFVRkJMRXRCUVVFc2FVSkJRVUVzUzBGQlFTeHJRa0ZCUVN4TFFVRkJMRTFCUVVFc1NVRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeE5RVUZCTEVOQlFVRXNWMEZCUVN4UFFVRkJMRWxCUVVFc1MwRkJRU3hUUVVGQkxGRkJRVUVzUjBGQlFTeEhRVUZCTEVsQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQkxFbEJRVUVzTWtKQlFVRXNSMEZCUVN4elFrRkJRU3hIUVVGQkxGbEJRVUVzVTBGQlFTdzBSRUZCUVN4SlFVRkJMR2RDUVVGQkxFMUJRVUVzUjBGQlFTeE5RVUZCTEVWQlFVRXNTMEZCUVR0QlFVVjZSQ3hOUVVGTkxHOUNRVUZ2UWl4VFFVRlRMRzlDUVVGaExFTkJRVU03UlVGQlFTeFpRVUZCTEVkQlFVRXNTVUZCUVR0SlFVRkJMRk5CUVVFc1NVRkJRVHRKUVVGQkxHVkJRVUVzZFVKQlZTOURMRTFCUVUwN1RVRkRia0lzVFVGQlRUdFJRVUZGTEZOQlFWTTdVVUZCUlR0TlFVRlRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN6dE5RVVV4UXl4VFFVRlRMRU5CUVVNc1EwRkJRenROUVVWWUxFbEJRVWtzVVVGQlVTeEpRVUZKTEU5QlFVOHNVVUZCVVN4TFFVRkxMRlZCUVZVc1JVRkJSVHRSUVVNNVF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0TlFVTmFPMGxCUTBZc1EwRkJRenRGUVVGQk8wVkJSVVFzVFVGQlRTeERRVUZCTEVWQlFVYzdTVUZEVUN4TlFVRk5PMDFCUVVVN1NVRkJSU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVODdTVUZGTVVJc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1RVRkJRU3hEUVVGQkxFOUJRVXM3VFVGQlF5eFJRVUZSTEVWQlFVVXNTVUZCU1N4RFFVRkRMRmxCUVdFN1RVRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVazdTVUZCUlN4blFrRkRkRVFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMDFCUVVzc1UwRkJVeXhGUVVGRE8wbEJRV2RETEdkQ1FVTTNReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4cFFrRkJRU3hEUVVGQkxFbEJRVWs3VFVGRFNDeEpRVUZKTEVWQlFVVXNNRUpCUVZFc1EwRkJReXhMUVVGTk8wMUJRM0pDTEV0QlFVc3NSVUZCUlN4MVFrRkJVeXhEUVVGRExHTkJRV1U3VFVGRGFFTXNTVUZCU1N4RlFVRkZMREJDUVVGUkxFTkJRVU03U1VGQlJ5eERRVU51UWl4RFFVRkRMR1ZCUTBZc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlFVc3NVMEZCVXl4RlFVRkRPMGxCUVRoQ0xFZEJRM3BETEVkQlFVVXNRMEZCUXl4RFFVRkRMRmRCUVZjc1EwRkJSU3hIUVVOb1FpeERRVUZETEdWQlEwNHNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFXOURMRWRCUTJoRUxFTkJRVU1zUTBGQlF5dzJRa0ZCTmtJc1EwRkROMElzUTBGRFJpeERRVU5CTEVOQlFVTTdSVUZGV2p0QlFVTkdPMEZCUVVNc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeHZRa0ZCUVR0QlFVRkJMR1ZCUVVFc1EwRjZRMjlDTEc5Q1FVRnZRaXhyUWtGRGFrSTdSVUZEY0VJc1EwRkJReXhGUVVGRkxHdENRVUZUTEVOQlFVTTdRVUZEWml4RFFVRkRPMEZCUVVFc1pVRkJRU3hEUVVoclFpeHZRa0ZCYjBJc1pVRkxjRUk3UlVGRGFrSXNVVUZCVVN4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNUdEZRVU40UWl4VFFVRlRMRVZCUVVVc2EwSkJRVk1zUTBGQlF6dEJRVU4yUWl4RFFVRkRPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJSSUxFbEJRVUVzWlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzY1VKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQmNVVXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlFVRXNTVUZCUVN4UlFVRkJMRWRCUlhSRUxFbEJRVUVzZFVKQlFXTXNSVUZCUXl3MlFrRkJiMElzUTBGQlF6dEJRVUZCTEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc1VVRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMGh1UkN4SlFVRkJMSEZDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUVc5RUxGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOQmNFUXNTVUZCUVN4TlFVRkJMRWRCUVVFc2RVSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4WFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMSE5DUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3dyUWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzYjBKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEU5QlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hMUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGRkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UlFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZCTmtRc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPMEZCUVVFc1UwRkJRU3g1UWtGQlFTeFhRVUZCTEdWQlFVRXNUMEZCUVN4clEwRkJRU3hwUWtGQlFTeFBRVUZCTEU5QlFVRXNVVUZCUVN4blFrRkJRU3hQUVVGQkxFOUJRVUVzV1VGQlFTeDNRa0ZCUVN4WlFVRkJMRU5CUVVFc1YwRkJRU3hYUVVGQkxGZEJRVUVzUjBGQlFTeG5Ra0ZCUVN4SFFVRkJMR2xDUVVGQkxFdEJRVUVzVjBGQlFUdEJRVUZCTEZOQlFVRXNkMEpCUVVFc1IwRkJRU3hGUVVGQkxGZEJRVUVzVTBGQlFTeFhRVUZCTEVsQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxGZEJRVUVzUjBGQlFTeFJRVUZCTEVkQlFVRXNiMEpCUVVFc1IwRkJRU3gzUWtGQlFTeEhRVUZCTERSQ1FVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQkxGVkJRVUVzUzBGQlFTeEhRVUZCTEhkQ1FVRkJMRU5CUVVFc1YwRkJRU3hQUVVGQkxFdEJRVUVzU1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1dVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNVMEZCUVN4TlFVRkJMRmRCUVVFc2NVSkJRVUVzUjBGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4SlFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3hyUWtGQlFTeE5RVUZCTEVOQlFVRXNVMEZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNVMEZCUVN4SlFVRkJMRWRCUVVFc2NVSkJRVUVzUjBGQlFTeE5RVUZCTEVOQlFVRXNkMEpCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeGpRVUZCTEVsQlFVRXNTMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hOUVVGQkxFVkJRVUVzUjBGQlFTeEZRVUZCTEVsQlFVRXNXVUZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEZOQlFVRXNUVUZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hIUVVGQkxFMUJRVUVzUzBGQlFTeEpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFMUJRVUVzV1VGQlFTeE5RVUZCTzBGQlJUbERMRk5CUVZNc2IwSkJRVzlDTEVOQlFVTTdSVUZETTBNc1YwRkJWenRGUVVOWUxGTkJRVk03UlVGRFZDeGpRVUZqTzBWQlEyUTdRVUZEUml4RFFVRkRMRVZCUVVVN1JVRkJRU3hKUVVGQkxIRkNRVUZCTzBWQlEwUXNUVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJRU3hwUWtGQlZTeEZRVUZETEdsQ1FVRlhMRU5CUVVNN1JVRkRha01zVFVGQlRTeERRVUZETEd0Q1FVRnJRaXhGUVVGRkxHTkJRV01zUTBGQlF5eEhRVUZITEVsQlFVRXNaVUZCVVN4RlFVRkRMRWxCUVVrc1EwRkJRenRGUVVVelJDeE5RVUZOTEc5Q1FVRnZRaXhIUVVGSExFbEJRVUVzZFVKQlFWY3NSVUZCUXl4clEwRkJkVUlzUTBGQlF6dEZRVVZxUlN4SlFVRkJMR2RDUVVGVExFVkJRVU1zVFVGQlRUdEpRVU5rTEVsQlFVa3NSVUZCUXl4WFFVRlhMR0ZCUVZnc1YwRkJWeXhsUVVGWUxGZEJRVmNzUTBGQlJTeFJRVUZSTEVkQlFVVTdUVUZETVVJN1NVRkRSanRKUVVOQkxFMUJRVTBzYVVKQlFXbENMRWRCUVVjc1RVRkJRU3hEUVVGQkxFdEJRVms3VFVGRGNFTXNTVUZCU1R0UlFVTkdMRTFCUVUwc1RVRkJUU3hIUVVGSExFMUJRVTBzU1VGQlFTdzBRa0ZCYlVJc1JVRkRkRU1zVjBGQlZ5eGhRVUZZTEZkQlFWY3NkVUpCUVZnc1YwRkJWeXhEUVVGRkxFOUJRVThzUlVGRGNFSXNWMEZEUml4RFFVRkRPMUZCUTBRc1kwRkJZeXhEUVVGRExFMUJRVTBzUTBGQlF6dE5RVU40UWl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3VVVGRFZpeEpRVUZCTEhsQ1FVRm5RaXhGUVVGRExFTkJRVU1zUTBGQlF6dFJRVU51UWl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRE8wMUJRM1JDTzBsQlEwWXNRMEZCUXp0SlFVTkVMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdSVUZEY2tJc1EwRkJReXhGUVVGRkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdSVUZGYWtJc1NVRkJTU3hGUVVGRExGZEJRVmNzWVVGQldDeFhRVUZYTEdWQlFWZ3NWMEZCVnl4RFFVRkZMRkZCUVZFc1IwRkJSVHRKUVVNeFFpeFBRVUZQTEVsQlFVazdSVUZEWWp0RlFVVkJMRWxCUVVrc1YwRkJWeXhIUVVGSExFTkJRVU1zUTBGQlF5eFRRVUZUTEVOQlFVTTdSVUZET1VJc1NVRkJTU3hqUVVGakxFZEJRVWNzUTBGQlF5eERRVUZETEZOQlFWTXNRMEZCUXp0RlFVVnFReXhKUVVGSkxHdENRVUZyUWl4TFFVRkxMRWxCUVVrc1JVRkJSVHRKUVVNdlFpeE5RVUZOTEdGQlFXRXNSMEZCUnl4SlFVRkpMR2RDUVVGUExFTkJReTlDTEd0Q1FVRnJRaXhGUVVOc1FpeEZRVUZGTEVWQlEwWXNNRUpCUVdsQ0xFTkJRVU1zUjBGRGNFSXNRMEZCUXp0SlFVTkVMRmRCUVZjc1IwRkJTU3hIUVVGRkxHRkJRV0VzUTBGRE0wSXNZMEZCWXl4RFFVRkRMREJDUVVGcFFpeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVTnlReXhQUVVGUExFTkJRVU1zUlVGQlJTeERRVUZGTEVsQlFVY3NZMEZCWlN4RlFVRkRPMGxCUld4RExHTkJRV01zUjBGQlJ5eHZRa0ZCYjBJc1owSkJRMjVETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExDdENRVUZCTEVOQlFVRXNUMEZCT0VJN1RVRkROMElzU1VGQlNTeEZRVUZGTEdsQ1FVRlZPMDFCUTJoQ0xFdEJRVXNzUlVGQlJTeHJRa0ZCYlVJN1RVRkRNVUlzVVVGQlVUdE5RVU5TTEZOQlFWTTdTVUZCUVN4RFFVTldMRU5CUVVNc1IwRkRRU3hKUVVGSk8wVkJRMVk3UlVGRlFTeE5RVUZOTEdGQlFXRXNSMEZCUnl4SlFVRkJMRzlDUVVGUkxFVkJRelZDTEZOQlFWTXNTVUZCU1N4TFFVRkxMRVZCUTJ4Q0xHdENRVUZyUWl4SlFVRkpMRXRCUVVzc1JVRkRNMElzUTBGQlFTeFhRVUZYTEdGQlFWZ3NWMEZCVnl4M1FrRkJRU3h4UWtGQlFTeEhRVUZZTEZkQlFWY3NRMEZCUlN4UlFVRlJMR05CUVVFc2NVSkJRVUVzZFVKQlFYSkNMSEZDUVVGQkxFTkJRWFZDTEV0QlFVc3NTMEZCU1N4TFFVTnNReXhEUVVGRE8wVkJSVVFzVFVGQlRTeFBRVUZQTEVkQlFVY3NTVUZCU1N4blFrRkJUeXhEUVVGRExHRkJRV0VzUlVGQlJTeEZRVUZGTEVWQlFVVXNNRUpCUVdsQ0xFTkJRVU1zUjBGQlJ5eERRVUZETzBWQlEzSkZMRTFCUVUwc1ZVRkJWU3hIUVVGSkxFZEJRVVVzVDBGQlR5eERRVU14UWl4alFVRmpMRU5CUVVNc01FSkJRV2xDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUTNKRExFOUJRVThzUTBGQlF5eEZRVUZGTEVOQlFVVXNTVUZCUnl4alFVRmxMRVZCUVVNN1JVRkZiRU1zVFVGQlRTeFhRVUZYTEVkQlFVY3NiMEpCUVc5Q0xHZENRVU4wUXl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5d3JRa0ZCUVN4RFFVRkJMRTlCUVRoQ08wbEJRemRDTEVsQlFVa3NSVUZCUlN4cFFrRkJWVHRKUVVOb1FpeExRVUZMTEVWQlFVVXNZVUZCWXp0SlFVTnlRaXhSUVVGUk8wbEJRMUlzVTBGQlV6dEZRVUZCTEVOQlExWXNRMEZCUXl4SFFVTkJMRWxCUVVrN1JVRkZVaXh2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1NVRkJTeXhUUVVGVExFVkJRVU03UlVGQmVVSXNaMEpCUTNSRExFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMSE5DUVVGQkxFTkJRVUVzVDBGQmNVSTdTVUZEY0VJc1IwRkJSeXhGUVVGRExEUkRRVUUwUXp0SlFVTm9SQ3hYUVVGWExFVkJRVVVzUTBGQlF5eERRVUZETEZsQlFWa3NRMEZCUlR0SlFVTTNRaXhYUVVGWExFVkJRVVVzVjBGQldUdEpRVU42UWl4VlFVRlZMRVZCUVVVc2IwSkJRVzlDTEVsQlFVa3NZMEZCWlR0SlFVTnVSQ3hOUVVGTkxFVkJRVVVzVlVGQlZ6dEpRVU51UWl4bFFVRmxMRVZCUVVVN1JVRkJWeXhEUVVNM1FpeERRVUZETEdWQlEwWXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYzBKQlFVRXNRMEZCUVN4UFFVRnhRanRKUVVOd1FpeEhRVUZITEVWQlFVTXNNRU5CUVRCRE8wbEJRemxETEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRk8wbEJRM2hDTEZkQlFWY3NSVUZCUlN4VlFVRlhPMGxCUTNoQ0xGVkJRVlVzUlVGQlJTeFhRVUZaTzBsQlEzaENMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU1zTUVOQlFUQkRMRU5CUVVVN1NVRkRlRVFzVFVGQlRTeEZRVUZGTEZWQlFWYzdTVUZEYmtJc1pVRkJaU3hGUVVGRk8wVkJRVmNzUTBGRE4wSXNRMEZEUlN4RFFVRkRPMEZCUlZZN1FVRkZRU3h2UWtGQmIwSXNRMEZCUXl4VFFVRlRMRWRCUVVjN1JVRkRMMElzVjBGQlZ5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRGUVVNM1FpeFRRVUZUTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTk8wVkJRek5DTEdOQlFXTXNSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTA3UlVGRGFFTXNWVUZCVlN4RlFVRkZMR3RDUVVGVExFTkJRVU03UVVGRGVFSXNRMEZCUXpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNaSVJDeEpRVUZCTEhOQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFUWkVMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTkJOMFFzU1VGQlFTeE5RVUZCTEVkQlFVRXNkVUpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFhRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFZRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRVzFETEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUdEJRVUZCTEZOQlFVRXNlVUpCUVVFc1YwRkJRU3hsUVVGQkxFOUJRVUVzYTBOQlFVRXNhVUpCUVVFc1QwRkJRU3hQUVVGQkxGRkJRVUVzWjBKQlFVRXNUMEZCUVN4UFFVRkJMRmxCUVVFc2QwSkJRVUVzV1VGQlFTeERRVUZCTEZkQlFVRXNWMEZCUVN4WFFVRkJMRWRCUVVFc1owSkJRVUVzUjBGQlFTeHBRa0ZCUVN4TFFVRkJMRmRCUVVFN1FVRkJRU3hUUVVGQkxIZENRVUZCTEVkQlFVRXNSVUZCUVN4WFFVRkJMRk5CUVVFc1YwRkJRU3hKUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4WFFVRkJMRWRCUVVFc1VVRkJRU3hIUVVGQkxHOUNRVUZCTEVkQlFVRXNkMEpCUVVFc1IwRkJRU3cwUWtGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVN4VlFVRkJMRXRCUVVFc1IwRkJRU3gzUWtGQlFTeERRVUZCTEZkQlFVRXNUMEZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEZsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGTkJRVUVzVFVGQlFTeFhRVUZCTEhGQ1FVRkJMRWRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzU1VGQlFTeE5RVUZCTEVOQlFVRXNkMEpCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeFJRVUZCTEVkQlFVRXNhMEpCUVVFc1RVRkJRU3hEUVVGQkxGTkJRVUVzUTBGQlFTeGpRVUZCTEVOQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxGTkJRVUVzU1VGQlFTeEhRVUZCTEhGQ1FVRkJMRWRCUVVFc1RVRkJRU3hEUVVGQkxIZENRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1kwRkJRU3hKUVVGQkxFdEJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNTVUZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVOQlFVRXNUVUZCUVN4RlFVRkJMRWRCUVVFc1JVRkJRU3hKUVVGQkxGbEJRVUVzVFVGQlFTeERRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNSMEZCUVN4TlFVRkJMRXRCUVVFc1NVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4TlFVRkJMRmxCUVVFc1RVRkJRVHRCUVVGQkxGTkJRVUVzWjBKQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1JVRkJRU3hMUVVGQkxFbEJRVUVzUjBGQlFTeEhRVUZCTEdOQlFVRXNRMEZCUVN4SFFVRkJMRTlCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzU1VGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxFbEJRVUVzUzBGQlFTeEZRVUZCTEV0QlFVRXNSVUZCUVN4VlFVRkJMRkZCUVVFc1dVRkJRU3hSUVVGQkxGRkJRVUVzYjBKQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hMUVVGQkxGZEJRVUVzUjBGQlFUdEJRVUZCTEZOQlFVRXNaVUZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3hIUVVGQkxGbEJRVUVzUTBGQlFTeEhRVUZCTERKQ1FVRkJMRWRCUVVFc1owSkJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4SFFVRkJPMEZCUVVFc1UwRkJRU3hoUVVGQkxFdEJRVUVzUlVGQlFTeEpRVUZCTEdWQlFVRXNTMEZCUVN4cFFrRkJRU3hMUVVGQkxHdENRVUZCTEV0QlFVRXNUVUZCUVN4SlFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFMUJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTVUZCUVN4TFFVRkJMRk5CUVVFc1VVRkJRU3hIUVVGQkxFZEJRVUVzU1VGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4TFFVRkJMRVZCUVVFc1NVRkJRU3d5UWtGQlFTeEhRVUZCTEhOQ1FVRkJMRWRCUVVFc1dVRkJRU3hUUVVGQkxEUkVRVUZCTEVsQlFVRXNaMEpCUVVFc1RVRkJRU3hIUVVGQkxFMUJRVUVzUlVGQlFTeExRVUZCTzBGQlJYQkNMRTFCUVUwc2NVSkJRWEZDTEZOQlFWTXNiMEpCUVdFc1EwRkJRenRGUVVGQkxGbEJRVUVzUjBGQlFTeEpRVUZCTzBsQlFVRXNVMEZCUVN4SlFVRkJPMGxCUVVFc1pVRkJRU3huUWtGWGRrUTdUVUZEVGl4UFFVRlBMRVZCUVVVN1NVRkRXQ3hEUVVGRE8wVkJRVUU3UlVGRlJDeE5RVUZOTEVOQlFVRXNSVUZCUnp0SlFVTlFMRTFCUVUwN1RVRkJSVHRKUVVGUkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3p0SlFVTTVRaXhOUVVGTk8wMUJRVVVzVVVGQlVUdE5RVUZGTzBsQlFWY3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTE8wbEJSVE5ETEUxQlFVMHNaMEpCUVdkQ0xFZEJRVWNzVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNN1NVRkRha1FzU1VGQlNTeG5Ra0ZCWjBJc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF5eEZRVUZGTzAxQlEycERMRTlCUVU4c1NVRkJTVHRKUVVOaU8wbEJSVUVzYjBKQlEwVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRMFVzVTBGQlV5eEZRVUZGTEVsQlFVRXNiVUpCUVZVc1JVRkJReXhIUVVGSExGVkJRVlVzUlVGQlJUdFJRVU51UXl4eFEwRkJjVU1zUlVGQlJTeFBRVUZQTzFGQlF6bERMSFZEUVVGMVF5eEZRVUZGTEVOQlFVTTdUVUZETlVNc1EwRkJRenRKUVVGRkxFZEJSVVlzWjBKQlFXZENMR1ZCUTJwQ0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0TlFVTkZMRk5CUVZNc1JVRkJReXgzUTBGQmQwTTdUVUZEYkVRc1QwRkJUeXhGUVVGRkxFTkJRVUVzUzBGQlRTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMUZCUVVVc1QwRkJUeXhGUVVGRkxFTkJRVU03VFVGQlVTeERRVUZETzBsQlFVVXNSMEZGYmtRc1owSkJRV2RDTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1owSkJRekZDTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHROUVVORkxGTkJRVk1zUlVGQlJTeEpRVUZCTEcxQ1FVRlZMRVZCUVVNc2VVSkJRWGxDTEVWQlFVVTdVVUZETDBNc1QwRkJUeXhGUVVGRkxFTkJRVU03VFVGRFdpeERRVUZETzBsQlFVVXNRMEZEU2l4RFFVRkRMRWRCUTBFc1NVRkRSQ3hEUVVOR0xFTkJRVU03UlVGRlZqdEJRVU5HTzBGQlFVTXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3h4UWtGQlFUdEJRVUZCTEdWQlFVRXNRMEV2UTI5Q0xIRkNRVUZ4UWl4clFrRkRiRUk3UlVGRGNFSXNVVUZCVVN4RlFVRkZMRVZCUVVVN1JVRkRXaXhWUVVGVkxFVkJRVVU3UVVGRFpDeERRVUZETzBGQlFVRXNaVUZCUVN4RFFVcHJRaXh4UWtGQmNVSXNaVUZOY2tJN1JVRkRha0lzVVVGQlVTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1MwRkJTenRGUVVONlFpeFZRVUZWTEVWQlFVVXNhMEpCUVZNc1EwRkJRenRCUVVONFFpeERRVUZET3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEWWtnc1NVRkJRU3cwUWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVFeVJDeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFFUTkVMRWxCUVVFc1RVRkJRU3hIUVVGQkxIVkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2FVSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHRkJRVUVzUjBGQlFTeFBRVUZCTzBGQlZVRXNTVUZCUVN4SlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4TFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR2xDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVUVyUXl4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMSGxDUVVGQkxGZEJRVUVzWlVGQlFTeFBRVUZCTEd0RFFVRkJMR2xDUVVGQkxFOUJRVUVzVDBGQlFTeFJRVUZCTEdkQ1FVRkJMRTlCUVVFc1QwRkJRU3haUVVGQkxIZENRVUZCTEZsQlFVRXNRMEZCUVN4WFFVRkJMRmRCUVVFc1YwRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNhVUpCUVVFc1MwRkJRU3hYUVVGQk8wRkJRVUVzVTBGQlFTeDNRa0ZCUVN4SFFVRkJMRVZCUVVFc1YwRkJRU3hUUVVGQkxGZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1YwRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHZRa0ZCUVN4SFFVRkJMSGRDUVVGQkxFZEJRVUVzTkVKQlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFc1ZVRkJRU3hMUVVGQkxFZEJRVUVzZDBKQlFVRXNRMEZCUVN4WFFVRkJMRTlCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4WlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFRRVUZCTEUxQlFVRXNWMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMR3RDUVVGQkxFMUJRVUVzUTBGQlFTeFRRVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeFRRVUZCTEVsQlFVRXNSMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxHTkJRVUVzU1VGQlFTeExRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRTFCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzU1VGQlFTeFpRVUZCTEUxQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRWRCUVVFc1RVRkJRU3hMUVVGQkxFbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1RVRkJRU3haUVVGQkxFMUJRVUU3UVVGRmFFTXNVMEZCVXl3eVFrRkJNa0lzUTBGQlF6dEZRVU5zUkN4WFFVRlhPMFZCUTFnc1YwRkJWenRGUVVOWUxHTkJRV003UlVGRFpDeFRRVUZUTzBWQlFVVTdSVUZEV0N4alFVRmpPMFZCUTJRN1FVRkRSaXhEUVVGRExFVkJRVVU3UlVGRFJDeE5RVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkJMR2xDUVVGVkxFVkJRVU1zYVVKQlFWY3NRMEZCUXp0RlFVTnFReXhOUVVGTkxGZEJRVmNzUjBGQlJ5d3dRMEZCYVVNc1EwRkJReXhQUVVGUExFTkJRVU03UlVGRE9VUXNUVUZCVFN4MVFrRkJkVUlzUjBGQlJ5eFhRVUZYTEVkQlEzWkRMSE5GUVVGelJTeEhRVU4wUlN3MFJVRkJORVU3UlVGRmFFWXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNTVUZCUVN4RFFVRkJMRTlCUVVjN1NVRkRSaXhQUVVGUExFVkJRVVVzY1VKQlFVOHNRMEZCUXl4SlFVRkxPMGxCUTNSQ0xHRkJRV0VzUlVGQlJTdzBRa0ZCWXl4RFFVRkRMRWRCUVVrN1NVRkRiRU1zVDBGQlR5eEZRVUZGTEVOQlFVVTdTVUZEV0N4VFFVRlRMRVZCUVVNc1owTkJRV2RETzBsQlF6RkRMRlZCUVZVc1JVRkJSU3gzUWtGQlZTeERRVUZETEUxQlFVODdTVUZET1VJc1kwRkJZeXhGUVVGRkxEUkNRVUZqTEVOQlFVTTdSVUZCWVN4blFrRkZOVU1zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1NVRkJRU3hEUVVGQkxFOUJRVWM3U1VGRFJpeFBRVUZQTEVWQlFVVXNjVUpCUVU4c1EwRkJReXhKUVVGTE8wbEJRM1JDTEdGQlFXRXNSVUZCUlN3MFFrRkJZeXhEUVVGRExFZEJRVWs3U1VGRGJFTXNWVUZCVlN4RlFVRkZMSGRDUVVGVkxFTkJRVU1zVFVGQlR6dEpRVU01UWl4SFFVRkhMRVZCUVVVN1JVRkJSU3huUWtGRlVDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhKUVVGQkxFTkJRVUVzVDBGQlJ6dEpRVU5HTEU5QlFVOHNSVUZCUlN4eFFrRkJUeXhEUVVGRExFbEJRVXM3U1VGRGRFSXNZVUZCWVN4RlFVRkZMRFJDUVVGakxFTkJRVU1zUjBGQlNUdEpRVU5zUXl4VlFVRlZMRVZCUVVVc2QwSkJRVlVzUTBGQlF6dEZRVUZQTEdkQ1FVVTVRaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4VlFVRkJMRU5CUVVFc1QwRkJVenRKUVVGRExFOUJRVThzUlVGQlJTeGpRVUZsTzBsQlFVTXNVVUZCVVN4RlFVRkZPMFZCUVVjc1EwRkJSU3hEUVVGRExHVkJRM0JFTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNUMEZCWjBJN1NVRkRaaXhKUVVGSkxFVkJRVVVzVjBGQldUdEpRVU5zUWl4SlFVRkpMRVZCUVVVc1JVRkJSenRKUVVOVUxFbEJRVWtzUlVGQlJTeFhRVUZaTzBsQlEyeENMR2RDUVVGblFpeEZRVUZGTzBWQlFYZENMRU5CUXpORExFTkJRMFVzUTBGQlF5eGxRVU5PTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExFbEJRVUVzUTBGQlFTeFBRVUZITzBsQlEwWXNUMEZCVHl4RlFVRkZMSEZDUVVGUExFTkJRVU1zU1VGQlN6dEpRVU4wUWl4VlFVRlZMRVZCUVVVc2QwSkJRVlVzUTBGQlF5eFRRVUZWTzBsQlEycERMR0ZCUVdFc1JVRkJSU3cwUWtGQll5eERRVUZETzBWQlFVOHNaMEpCUlhKRExFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzU1VGQlNUdEpRVU5JTEU5QlFVOHNSVUZCUlN4NVFrRkJWeXhEUVVGRExFMUJRVTg3U1VGRE5VSXNSVUZCUlN4RlFVRkRMRWxCUVVrN1NVRkRVQ3hMUVVGTExFVkJRVVVzZFVKQlFWTXNRMEZCUXl4bFFVRm5RanRKUVVOcVF5eFpRVUZaTEVWQlFVVTdSVUZCUlN4SFFVVm1MRmRCUTBjc1EwRkJReXhsUVVWUUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzU1VGQlNUdEpRVU5JTEU5QlFVOHNSVUZCUlN4NVFrRkJWeXhEUVVGRExFMUJRVTg3U1VGRE5VSXNSVUZCUlN4RlFVRkRMRWxCUVVrN1NVRkRVQ3hMUVVGTExFVkJRVVVzZFVKQlFWTXNRMEZCUXl4WFFVRlpPMGxCUXpkQ0xGVkJRVlVzUlVGQlJTeDNRa0ZCVlN4RFFVRkRMRWxCUVVzN1NVRkROVUlzVTBGQlV5eEZRVUZGTzBWQlFVVXNSMEZGV2l4WFFVTkhMRU5CUTBnc1EwRkRSaXhEUVVGRExHVkJRMDRzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1NVRkJRU3hEUVVGQkxFOUJRVWM3U1VGRFJpeFBRVUZQTEVWQlFVVXNjVUpCUVU4c1EwRkJReXhKUVVGTE8wbEJRM1JDTEZWQlFWVXNSVUZCUlN4M1FrRkJWU3hEUVVGRExFOUJRVkU3U1VGREwwSXNZVUZCWVN4RlFVRkZMRFJDUVVGakxFTkJRVU03UlVGQlR5eG5Ra0ZGY2tNc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNhVUpCUVVFc1EwRkJRU3hKUVVGSk8wbEJRMGdzVDBGQlR5eEZRVUZGTEhsQ1FVRlhMRU5CUVVNc1RVRkJUenRKUVVNMVFpeEZRVUZGTEVWQlFVTXNTVUZCU1R0SlFVTlFMRXRCUVVzc1JVRkJSU3gxUWtGQlV5eERRVUZETEdWQlFXZENPMGxCUTJwRExGbEJRVmtzUlVGQlJUdEZRVUZGTEVkQlJXWXNRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkRVaXhEUVVGRExHVkJSVkFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2FVSkJRVUVzUTBGQlFTeEpRVUZKTzBsQlEwZ3NUMEZCVHl4RlFVRkZMSGxDUVVGWExFTkJRVU1zVFVGQlR6dEpRVU0xUWl4RlFVRkZMRVZCUVVNc1NVRkJTVHRKUVVOUUxFdEJRVXNzUlVGQlJTeDFRa0ZCVXl4RFFVRkRMRmRCUVZrN1NVRkROMElzVlVGQlZTeEZRVUZGTEhkQ1FVRlZMRU5CUVVNc1NVRkJTenRKUVVNMVFpeFRRVUZUTEVWQlFVVXNRMEZCUlR0SlFVTmlMRXRCUVVzc1JVRkJSU3gxUWtGQlV5eERRVUZETzBWQlFVa3NSMEZGY0VJc1kwRkJZeXhGUVVGRExFZEJRVU1zUlVGQlF5eFRRVU5rTEVOQlEwZ3NRMEZEUml4RFFVRkRPMEZCUlZZN1FVRkZRU3d5UWtGQk1rSXNRMEZCUXl4VFFVRlRMRWRCUVVjN1JVRkRkRU1zVjBGQlZ5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRGUVVNM1FpeFhRVUZYTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTk8wVkJRemRDTEdOQlFXTXNSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTA3UlVGRGFFTXNVMEZCVXl4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRUdEZRVU16UWl4alFVRmpMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTzBWQlEyaERMRTlCUVU4c1JVRkJSU3hyUWtGQlV5eERRVUZETzBGQlEzSkNMRU5CUVVNN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVNeFNFUXNTVUZCUVN4bFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFUUkRMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTkJOVU1zU1VGQlFTeE5RVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFZRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFhRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1VVRkJRU3hIUVVGQkxFOUJRVUU3UVVGTFFTeEpRVUZCTEdsQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4bFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4aFFVRkJMRWRCUVVFc1QwRkJRVHRCUVUxQkxFbEJRVUVzUzBGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeHBRa0ZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGTkJRVUVzUjBGQlFTeFBRVUZCTzBGQlFYRkZMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVVjBSQ3hUUVVGVExHTkJRV01zUTBGQlF6dEZRVU55UXl4aFFVRmhPMFZCUTJJc1VVRkJVVHRGUVVOU0xGVkJRVlU3UlVGRFZpeGhRVUZoTzBWQlEySTdRVUZEUml4RFFVRkRMRVZCUVVVN1JVRkRSQ3hOUVVGTkxHZENRVUZuUWl4SFFVRkhMRWxCUVVFc2RVSkJRVmNzUlVGQlF5d3lRa0ZCWjBJc1EwRkJRenRGUVVOMFJDeE5RVUZOTEdOQlFXTXNSMEZCUnl4SlFVRkJMSFZDUVVGWExFVkJRVU1zTWtKQlFXbENMRU5CUVVNN1JVRkRja1FzVFVGQlRTeERRVUZETEVkQlFVY3NTVUZCUVN3NFFrRkJZeXhGUVVGRExFTkJRVU03UlVGRk1VSXNUVUZCVFR0SlFVRkZMRkZCUVZFN1NVRkJSU3hKUVVGSkxFVkJRVVU3UlVGQldTeERRVUZETEVkQlFVY3NZVUZCWVN4SlFVRkpMR05CUVdNN1JVRkZka1VzYjBKQlEwVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zUzBGQlFTeERRVUZCTEU5QlFVazdTVUZEU0N4VlFVRlZMRVZCUVVNc2FVSkJRV2xDTzBsQlF6VkNMRmRCUVZjc1JVRkRWQ3hQUVVGUExFZEJRVWNzZVVKQlFWY3NRMEZCUXl4aFFVRmhMRWRCUVVjc2VVSkJRVmNzUTBGQlF5eFhRVU51UkR0SlFVTkVMRTlCUVU4c1JVRkJSU3hQUVVGUk8wbEJRMnBDTEZGQlFWRXNaVUZEVGl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRTlCUVdkQ08wMUJRMllzUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4dFFrRkJiVUlzUTBGQlJUdE5RVU0xUWl4TFFVRkxMRVZCUVVVc1EwRkJReXhEUVVGRExHMUNRVUZ0UWl4RFFVRkZPMDFCUXpsQ0xGTkJRVk1zUlVGQlJUdEpRVUZwUWl4blFrRkZOVUlzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1pVRkJRU3hEUVVGQkxFOUJRV003VFVGRFlpeExRVUZMTEVWQlEwZ3NWMEZCVnl4TFFVRkxMSE5DUVVGaExFTkJRVU1zUjBGQlJ5eEhRVU0zUWl4MVFrRkJVeXhEUVVGRExGTkJRVk1zUjBGRGJrSXNWMEZEVER0TlFVTkVMRWxCUVVrc1JVRkJSU3hoUVVGak8wMUJRM0JDTEVsQlFVa3NSVUZCUlN4MVFrRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZQTzAxQlEyeERMR0ZCUVdFc1JVRkRXQ3hYUVVGWExFdEJRVXNzYzBKQlFXRXNRMEZCUXl4SFFVRkhMRWxCUVVrc1lVRkJZU3hMUVVGTExHdENRVUZKTEVOQlFVTXNSVUZCUlN4SFFVTXhSQ3huUWtGQlowSXNSMEZEYUVJN1NVRkRUQ3hEUVVOR0xFTkJRMlVzUTBGRGJrSTdTVUZEUkN4VFFVRlRMRVZCUTFBc1QwRkJUeXhuUWtGQlJ5eE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhwUWtGQlFTeERRVUZCTEVsQlFVazdUVUZCUXl4SlFVRkpMRVZCUVVVc01FSkJRVkVzUTBGQlF5eFRRVUZWTzAxQlFVTXNTVUZCU1N4RlFVRkZMREJDUVVGUkxFTkJRVU03U1VGQlJ5eERRVUZGTEVOQlFVTXNSMEZCUnl4SlFVTnVSVHRKUVVORUxFdEJRVXNzUlVGRFNDeFhRVUZYTEV0QlFVc3NjMEpCUVdFc1EwRkJReXhIUVVGSExFZEJRemRDTEZGQlFWRXNTVUZCU1N4RFFVRkRMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNSMEZETDBJc1EwRkJReXhEUVVGRExGZEJRVmNzUTBGRGJFSTdTVUZEUkN4VFFVRlRMRVZCUVVVc1NVRkJRU3h0UWtGQlZTeEZRVUZETEdsQ1FVRnBRaXhGUVVGRk8wMUJRM1pETERKQ1FVRXlRaXhGUVVGRkxGRkJRVkU3VFVGRGNrTXNORUpCUVRSQ0xFVkJRVVVzVDBGQlR5eFBRVUZQTEV0QlFVczdTVUZEYmtRc1EwRkJReXhEUVVGRk8wbEJRMGdzVlVGQlZTeEZRVUZGTzAxQlExWXNUMEZCVHl4RlFVRkZMQ3RDUVVGcFFpeERRVUZETEVWQlFVVTdUVUZETjBJc1IwRkJSenRKUVVOTU8wVkJRVVVzUTBGRFNDeERRVUZETzBGQlJVNDdRVUZEUVN4alFVRmpMRU5CUVVNc1UwRkJVeXhIUVVGSE8wVkJRM3BDTzBGQlEwWTdRVUZEUVR0RlFVTkZMR0ZCUVdFc1JVRkJSU3hyUWtGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExHdENRVUZKTEVOQlFVTXNRMEZCUXp0RlFVTnVSRHRCUVVOR08wRkJRMEU3UlVGRFJTeFZRVUZWTEVWQlFVVXNZVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhWUVVGVk8wVkJRM0pETzBGQlEwWTdRVUZEUVR0RlFVTkZMR0ZCUVdFc1JVRkJSU3hyUWtGQlV5eERRVUZETEV0QlFVc3NRMEZCUXp0SlFVTTNRaXhKUVVGSkxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkRjRUlzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMREJDUVVGcFFpeERRVUZETEVWQlEycERMSE5DUVVGaExFTkJRVU1zUjBGQlJ5eERRVU5zUWl4RFFVRkRPMGxCUTBZc1VVRkJVU3hGUVVGRkxHdENRVUZUTEVOQlFVTTdSVUZEZEVJc1EwRkJReXhEUVVGRE8wVkJRMFk3UVVGRFJqdEJRVU5CTzBWQlEwVXNVVUZCVVN4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNUdEZRVU40UWp0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UlVGRFJTeFBRVUZQTEVWQlFVVXNhMEpCUVZNc1EwRkJRenRCUVVOeVFpeERRVUZETzBGQlJVUXNZMEZCWXl4RFFVRkRMRmxCUVZrc1IwRkJSenRGUVVNMVFpeGhRVUZoTEVWQlFVVXNhMEpCUVVrc1EwRkJRenRCUVVOMFFpeERRVUZET3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEZEVoRUxFbEJRVUVzWjBKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQk9FTXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEwRTVReXhKUVVGQkxFMUJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGZEJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHRkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4bFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzYVVKQlFVRXNSMEZCUVN4UFFVRkJPMEZCUVN0RExGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHRCUVVWb1F5eFRRVUZUTEdWQlFXVXNRMEZCUXp0RlFVRkZMRWxCUVVrN1JVRkJSU3hQUVVGUE8wVkJRVVU3UVVGQmFVSXNRMEZCUXl4RlFVRkZPMFZCUXpORkxFMUJRVTBzUTBGQlF5eEhRVUZITEVsQlFVRXNPRUpCUVdNc1JVRkJReXhEUVVGRE8wVkJRekZDTEUxQlFVMHNSMEZCUnl4SFFVRkhMR2RDUVVGblFpeEhRVUZITEZGQlFWRXNSMEZCUnl4TFFVRkxPMFZCUXk5RExHOUNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExFZEJRVWM3U1VGRFJpeFJRVUZSTEVWQlFVVXNRMEZCUlR0SlFVTmFMR1ZCUVZrc2JVSkJRVzFDTzBsQlF5OUNMRk5CUVZNc1JVRkJSU3hKUVVGQkxHMUNRVUZWTEVWQlFVTXNZVUZCWVN4RlFVRkZPMDFCUTI1RExIZENRVUYzUWl4RlFVRkZPMGxCUXpWQ0xFTkJRVU1zUTBGQlJUdEpRVU5JTEU5QlFVOHNSVUZCUlR0RlFVRnBRaXhuUWtGRk1VSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4SlFVRkpPMGxCUVVNc1QwRkJUeXhGUVVGRkxIbENRVUZYTEVOQlFVTXNUVUZCVHp0SlFVRkRMRVZCUVVVc1JVRkJReXhKUVVGSk8wbEJRVU1zVTBGQlV5eEZRVUZETzBWQlFXMUNMRWRCUTNKRkxFbEJRVWtzU1VGQlNTeERRVUZETEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUlVGQlF5eEhRVUZETEdWQlFVRXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxGZEJRVXNzUTBGQlF5eE5RVUZGTEVWQlFVTXNUMEZEZEVNc1EwRkRTQ3hEUVVGRE8wRkJSVlk3UVVGRlFTeGxRVUZsTEVOQlFVTXNVMEZCVXl4SFFVRkhPMFZCUXpGQ08wRkJRMFk3UVVGRFFUdEZRVU5GTEVsQlFVa3NSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTA3UlVGRGRFSTdRVUZEUmp0QlFVTkJPMFZCUTBVc1QwRkJUeXhGUVVGRkxHdENRVUZUTEVOQlFVTXNUVUZCVFR0RlFVTjZRanRCUVVOR08wRkJRMEU3UlVGRFJTeG5Ra0ZCWjBJc1JVRkJSU3hyUWtGQlV5eERRVUZETzBGQlF6bENMRU5CUVVNN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRka05FTEVsQlFVRXNVMEZCUVN4MVFrRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hoUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMRmxCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEdOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJRU3hEUVVGQk8wRkJRMEVzU1VGQlFTeHJRa0ZCUVN4UFFVRkJMRU5CUVVFc2EwSkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRTlCUVVFc1EwRkJRU3hSUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5CTEVsQlFVRXNUMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGpRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hSUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR1ZCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEdkQ1FVRkJMRTlCUVVFc1EwRkJRU3d3UTBGQlFTeERRVUZCTEVOQlFVRTdRVUZYUVN4SlFVRkJMR3RDUVVGQkxFOUJRVUVzUTBGQlFTd3JRa0ZCUVN4RFFVRkJMRU5CUVVFN1FVRkRRU3hKUVVGQkxGRkJRVUVzVDBGQlFTeERRVUZCTERaQ1FVRkJMRU5CUVVFc1EwRkJRVHRCUVV0QkxFbEJRVUVzVVVGQlFTeFBRVUZCTEVOQlFVRXNOa0pCUVVFc1EwRkJRU3hEUVVGQk8wRkJRMEVzU1VGQlFTeGhRVUZCTEU5QlFVRXNRMEZCUVN4dlFrRkJRU3hEUVVGQkxFTkJRVUU3UVVGTFFTeEpRVUZCTEcxQ1FVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEd0RVFVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRMEVzU1VGQlFTeFpRVUZCTEU5QlFVRXNRMEZCUVN4clEwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEZWQlFVRXNUMEZCUVN4RFFVRkJMRzFEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5CTEVsQlFVRXNWMEZCUVN4UFFVRkJMRU5CUVVFc2QwSkJRVUVzUTBGQlFTeERRVUZCTzBGQlRVRXNTVUZCUVN4WFFVRkJMRTlCUVVFc1EwRkJRU3h6UTBGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMRk5CUVVFc1QwRkJRU3hEUVVGQkxHdERRVUZCTEVOQlFVRXNRMEZCUVR0QlFVTkJMRWxCUVVFc1QwRkJRU3hQUVVGQkxFTkJRVUVzYTBOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hqUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMRFJDUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdsQ1FVRkJMRU5CUVVFc1EwRkJRU3hEUVVGQk8wRkJRMEVzU1VGQlFTeFJRVUZCTEU5QlFVRXNRMEZCUVN4eFFrRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEdWQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzZFVKQlFVRXNRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkRRU3hKUVVGQkxHVkJRVUVzVDBGQlFTeERRVUZCTERSQ1FVRkJMRU5CUVVFc1EwRkJRVHRCUVVOQkxFbEJRVUVzYzBKQlFVRXNUMEZCUVN4RFFVRkJMRzFEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5CTEVsQlFVRXNaVUZCUVN4UFFVRkJMRU5CUVVFc2VVTkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4bFFVRkJMRTlCUVVFc1EwRkJRU3d3UTBGQlFTeERRVUZCTEVOQlFVRTdRVUZKUVN4SlFVRkJMRzFDUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMSE5DUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4dlFrRkJRU3hQUVVGQkxFTkJRVUVzZVVKQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hYUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR3RDUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4alFVRkJMRTlCUVVFc1EwRkJRU3cyUTBGQlFTeERRVUZCTEVOQlFVRTdRVUZCTmtVc2NVTkJRVUVzUlVGQlFTeFBRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hIUVVGQkxFZEJRVUVzUlVGQlFTeFRRVUZCTEVkQlFVRXNSVUZCUVN4RFFVRkJMRVZCUVVFN1FVRkJRU3dyUTBGQlFTeEZRVUZCTEVsQlFVRXNUMEZCUVN4UFFVRkJMRXRCUVVFc1ZVRkJRU3hGUVVGQkxFOUJRVUVzU1VGQlFTeERRVUZCTEVOQlFVRXNTVUZCUVN4dlFrRkJRU3hKUVVGQkxFOUJRVUVzUlVGQlFTeERRVUZCTEVOQlFVRXNTVUZCUVN4dFFrRkJRU3hKUVVGQkxFOUJRVUVzUlVGQlFTeERRVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMREpDUVVGQkxIVkNRVUZCTEVWQlFVRXNUMEZCUVN4WFFVRkJMRWRCUVVFc1owSkJRVUVzUjBGQlFTeHBRa0ZCUVN4RFFVRkJMRVZCUVVFc1JVRkJRU3hYUVVGQkxFTkJRVUVzUTBGQlFTeEZRVUZCTzBGQlFVRXNiVVJCUVVFc1JVRkJRU3hKUVVGQkxFTkJRVUVzVjBGQlFTeEpRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRmRCUVVFc1JVRkJRU3hGUVVGQkxFOUJRVUVzUjBGQlFTeERRVUZCTEVWQlFVRXNRMEZCUVN4SlFVRkJMRWRCUVVFc1MwRkJRU3hKUVVGQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEV0QlFVRXNVVUZCUVN4SlFVRkJMRTlCUVVFc1IwRkJRU3hMUVVGQkxGVkJRVUVzUlVGQlFTeEZRVUZCTEU5QlFVRXNSVUZCUVN4VFFVRkJMRWRCUVVFc1JVRkJRU3hEUVVGQkxFVkJRVUVzUTBGQlFTeEpRVUZCTEZGQlFVRXNkMEpCUVVFc1EwRkJRU3hYUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTEVsQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEZRVUZCTEVWQlFVRXNUMEZCUVN4TFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUTBGQlFTeEZRVUZCTEVOQlFVRXNTVUZCUVN4VFFVRkJMRVZCUVVFc1EwRkJRU3hEUVVGQkxFbEJRVUVzZDBKQlFVRXNUVUZCUVN4bFFVRkJMRWxCUVVFc1RVRkJRU3g1UWtGQlFTeERRVUZCTEVOQlFVRXNTMEZCUVN4SlFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFVkJRVUVzUlVGQlFTeEpRVUZCTEVkQlFVRXNTMEZCUVN4VFFVRkJMRWxCUVVFc1RVRkJRU3hWUVVGQkxHVkJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRU5CUVVFc1JVRkJRU3hGUVVGQkxFbEJRVUVzVDBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc2VVSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hEUVVGQkxFTkJRVUVzU1VGQlFTeEpRVUZCTEV0QlFVRXNTVUZCUVN4SlFVRkJMRWxCUVVFc1NVRkJRU3hKUVVGQkxFTkJRVUVzUlVGQlFTeEZRVUZCTEUxQlFVRXNaVUZCUVN4RFFVRkJMRTFCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzU1VGQlFTeERRVUZCTEVOQlFVRXNSVUZCUVN4TlFVRkJMRVZCUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1EwRkJRU3hGUVVGQkxFVkJRVUVzUlVGQlFTeERRVUZCTEUxQlFVRXNVVUZCUVN4SFFVRkJMRWRCUVVFc1EwRkJRU3hEUVVGQkxFbEJRVUVzUzBGQlFTeEZRVUZCTEVWQlFVRXNTMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFMUJRVUVzUTBGQlFTeERRVUZCTEVWQlFVRXNRMEZCUVN4UFFVRkJMRTFCUVVFc1EwRkJRU3hGUVVGQk8wRkJSVGxFTEc5Q1FVRnZRanM3UTBGQlR5eEZRVUZGTzBWQlFVRXNTVUZCUVN4clFrRkJRU3hEUVVGQk8wVkJRekZETEUxQlFVMDdPenM3T3pzN096czdPMGRCVjB3c1IwRkJSeXhIUVVGSExFTkJRVUU3UlVGRFVDeE5RVUZOTEVsQlFVa3NRMEZCUVN4RFFVRkJMRVZCUVVFc1pVRkJRU3hsUVVGakxFZEJRVVVzUTBGQlFUdEZRVU14UWl4TlFVRk5MRlZCUVZVc1EwRkJRU3hEUVVGQkxFVkJRVUVzWlVGQlFTeFhRVUZWTEVkQlFVVXNRMEZCUVR0RlFVTTFRaXhOUVVGTkxGZEJRVmNzUTBGQlFTeERRVUZCTEVWQlFVRXNWMEZCUVN4WlFVRlhMRWRCUVVVc1EwRkJRVHRGUVVNNVFpeE5RVUZOTEdOQlFXTXNRMEZCUVN4RFFVRkJMRVZCUVVFc1YwRkJRU3haUVVGWExFVkJRVU1zVlVGQlFTeGxRVUZqTEVOQlFVTXNRMEZCUVR0RlFVTXZReXhOUVVGTkxHVkJRV1VzUTBGQlFTeERRVUZCTEVWQlFVRXNWMEZCUVN4WlFVRlhMRVZCUVVNc1UwRkJRU3huUWtGQlpTeERRVUZETEVOQlFVRTdSVUZEYWtRc1RVRkJUU3hwUWtGQmFVSXNRMEZCUVN4RFFVRkJMRVZCUVVFc1YwRkJRU3haUVVGWExFVkJRVU1zVlVGQlFTeHJRa0ZCYVVJc1EwRkJReXhEUVVGQk8wVkJRM0pFTEUxQlFVMHNhME5CUVd0RExFZEJRVWNzUTBGQlFTeERRVUZCTEVWQlFVRXNiVUpCUVVFc2JVSkJRV3RDTEVkQlFVVXNRMEZCUVR0RlFVVXZSQ3hOUVVGTkxHdENRVUZsTEVOQlFVRXNjVUpCUVVjc1dVRkJXU3hMUVVGTExFTkJRVU1zUTBGQlF6czdSMEZCTkVJc1MwRkRja1VzUTBGQlFTeERRVUZCTEVWQlFVRXNXVUZCUVN4MVFrRkJjMElzUlVGQlF5eGxRVUZsTEVWQlFVVXNUMEZCVHl4RFFVTnFSQ3hEUVVGRExFMUJRVUVzU1VGQlFTeEpRVUZCTEd0Q1FVRkJMRXRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEVkQlJuVkNMR3RDUVVGQkxFdEJSV3BDTEVOQlFVRTdSVUZEVUN4TlFVRk5MSE5DUVVGelFpeERRVUZCTEVOQlFVRXNSVUZCUVN4WFFVRkJMRmxCUVZjc1JVRkRjRU1zVTBGQlZTeERRVUZCTEVOQlFVRXNSVUZCUVN4VlFVRkJMRzlDUVVGdFFpeEZRVUZETEV0QlFVc3NRMEZCUXl4TFFVTjJReXhEUVVGRExFTkJRVUU3UlVGRFJDeE5RVUZOTEdOQlFXTXNRMEZCUVN4RFFVRkJMRVZCUVVFc1MwRkJRU3hsUVVGakxFVkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdSVUZEZGtNc1RVRkJUU3hqUVVGakxFTkJRVUVzUTBGQlFTeEZRVUZCTEV0QlFVRXNhVUpCUVdkQ0xFVkJRVU1zWVVGQllTeEpRVUZKTEV0QlFVc3NSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJRVHRGUVVONlJTeE5RVUZOTEZsQlFWa3NWMEZCVnl4WFFVRlhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3UlVGRmFrUXNUVUZCVFN4eFFrRkJjVUlzUTBGQlFTeERRVUZCTEVWQlFVRXNTMEZCUVN4WFFVRlZMRVZCUTI1RExFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNTMEZCUVN4SlFVRkJMRWxCUVZJc1VVRkJVU3hMUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRlNMRkZCUVZFc1owSkJRV2xDTEVOQlFVTXNVVUZCVVN4RlFVRkZMRVZCUXpkRExFOUJRMFlzUTBGQlF5eERRVUZCTzBWQlJVUXNUVUZCVFN4WFFVRlhMRTFCUVUwN1NVRkRja0lzVVVGQlVTeERRVUZETEVOQlFVRXNRMEZCUVN4RlFVRkJMRkZCUVVFc2JVSkJRV3RDTEVWQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVUU3U1VGRE9VTXNVVUZCVVN4RFFVRkRMRU5CUVVFc1EwRkJRU3hGUVVGQkxGRkJRVUVzYzBKQlFYRkNMRVZCUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU51UXl4UlFVRlJMRU5CUVVNc1EwRkJRU3hEUVVGQkxFVkJRVUVzVVVGQlFTeHZRa0ZCYlVJc1JVRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEzaERMRTlCUVU4c1MwRkJTeXhEUVVGRExFOUJRVUVzWTBGQllTeERRVUZETEVOQlFVRTdSMEZETlVJc1EwRkJRVHRGUVVWRUxFMUJRVTBzVlVGQlZTeERRVUZCTEVOQlFVRXNSVUZCUVN4WlFVRkJMRmxCUVZjc1JVRkJReXhIUVVGSExFTkJRVU1zUTBGQlFUdEZRVU5vUXl4RFFVRkJMRU5CUVVFc1JVRkJRU3hOUVVGQkxGVkJRVk1zUlVGQlF5eE5RVUZOTzBsQlEyUXNTVUZCU1N4RFFVRkRMRU5CUVVFc1EwRkJRU3hGUVVGQkxFOUJRVUVzVVVGQlR5eEZRVUZETEU5QlFVOHNSVUZCUlN4SFFVRkhMRU5CUVVNc1JVRkJSVHROUVVNeFFpeERRVUZCTEVOQlFVRXNSVUZCUVN4UlFVRkJMSFZEUVVGelF5eEZRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkJPMHRCUXpkRE8wZEJRMFFzUlVGQlJTeERRVUZETEVkQlFVY3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGQk8wVkJSV3hDTEUxQlFVMHNhVUpCUVdsQ0xFMUJRVTA3U1VGRE0wSXNVVUZCVVN4alFVRmpPMWRCUTJZc1VVRkJRU3hWUVVGVExGRkJRVkU3VVVGRGNFSXNUMEZCVVN4RFFVRkJMREJDUVVGQkxFVkJRVFJDTEU5QlFWRXNRMEZCUVN4RFFVRkJMRVZCUVVjc1QwRkJVU3hEUVVGQkxFTkJRVU1zUTBGQlFUdFhRVU55UkN4UlFVRkJMRlZCUVZNc1VVRkJVVHRSUVVOd1FpeFBRVUZSTEVOQlFVRXNaME5CUVVFc1JVRkJhME1zVDBGQlVTeERRVUZCTEVOQlFVRXNSVUZCUnl4UFFVRlJMRU5CUVVFc1EwRkJReXhEUVVGQk8xZEJRek5FTEZGQlFVRXNWVUZCVXl4UFFVRlBPMWRCUTJoQ0xGRkJRVUVzVlVGQlV5eFJRVUZSTzFGQlEzQkNMRTlCUVZFc1EwRkJRU3h0UTBGQlFTeEZRVUZ4UXl4UFFVRlJMRU5CUVVFc1EwRkJRU3hGUVVGSExFOUJRVkVzUTBGQlFTeERRVUZETEVOQlFVRTdPMUZCUldwRkxFOUJRVThzU1VGQlNTeERRVUZCTzB0QlEyWTdSMEZEUkN4RFFVRkJPMFZCUlVRc1RVRkJUU3hqUVVGakxHTkJRV01zUlVGQlJTeERRVUZCTzBWQlEzQkRMRTFCUVUwc1pVRkJaU3hSUVVGUkxFdEJRVXNzV1VGQlFTeGpRVUZoTEU5QlFVOHNRMEZCUVR0RlFVTjBSQ3hOUVVGTkxGVkJRVlVzUTBGQlFTeERRVUZCTEVWQlFVRXNUVUZCUVN4dFFrRkJhMElzUjBGQlJTeExRVUZMTEVsQlFVRXNkVUpCUVhOQ0xFTkJRVUU3UlVGRkwwUXNUVUZCVFN4VFFVRlRMRmxCUVZrN1NVRkRla0lzVFVGQlRTeFJRVUZSTEVOQlExb3NRMEZCUVN4RFFVRkJMRVZCUVVFc1MwRkJRU3g1UWtGQmQwSXNSVUZCUXp0TlFVTjJRaXhOUVVGTkxGbEJRVUVzVlVGQlV5eEpRVUZKTzAxQlEyNUNMRk5CUVZNc1IwRkJRVHRMUVVOV0xFTkJRMGdzUTBGQlF5eERRVUZCTzBsQlEwUXNUMEZCVHl4TFFVRkxMRU5CUVVNc1QwRkJRU3hYUVVGVkxFTkJRVU1zUTBGQlFUdEhRVU42UWl4RFFVRkJPMFZCUlVRc1RVRkJUU3h0UWtGQmJVSXNUVUZCVFR0SlFVTTNRaXhKUVVGSkxHZENRVUZuUWl4TFFVRkxMRXRCUVVzc1JVRkJSVHROUVVNNVFpeHZRa0ZCVHl4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGQkxFdEJRVUVzUlVGQlFUdFJRVUZMTEU5QlFVODdWVUZCUlN4UlFVRlJMRTFCUVVFN1UwRkJUenRQUVVGSkxFTkJRVU1zUTBGQlFUdExRVU16UXp0SlFVTkJMRzlDUVVORkxFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVTXNTVUZCUVN4UlFVRkhMRVZCUVVFN1RVRkRSaXhUUVVGVExHRkJRVUVzVVVGQlR5eExRVUZOTzAxQlEzUkNMRTlCUVU4c1QwRkJUeXhIUVVGSExHRkJRVUVzV1VGQlZ5eExRVUZMTEVkQlFVY3NZVUZCUVN4WlFVRlhMRXRCUVUwN1RVRkRja1FzVVVGQlVTeFBRVUZQTEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlFUdExRVUZMTEdWQlJXaERMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVU1zVDBGQlFTeFJRVUZOTEVWQlFVRTdUVUZEVEN4TlFVRkxMRk5CUVZNN1RVRkRaQ3hUUVVGVExFMUJRVTg3VFVGRGFFSXNWVUZCVlN4WlFVRmhPMDFCUTNaQ0xGZEJRVlVzTUVKQlFUQkNPMDFCUTNCRExHVkJRVmtzYVVKQlFVRTdTMEZCYVVJc1JVRkZOVUlzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZEU0N4RFFVRkRMRVZCUTFJc1dVRkJXU3huUWtGRFdDeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkRMRmxCUVVFc1VVRkJWeXhGUVVGQk8wMUJRVU1zVlVGQlV5eExRVUZMTzAxQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNc2FVSkJRV2xDTEVOQlFVRTdTMEZCU1N4RFFVRkRMRWRCUXk5RUxFbEJRMFFzUTBGQlF5eERRVUZCTzBkQlJWUXNRMEZCUVR0RlFVVkVMRzlDUVVORkxFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVRXNUVUZCUVN4UlFVRkJMRk5CUVVFc1JVRkJRU3hKUVVGQkxHVkJRMFVzVFVGQlFTeFJRVUZCTEdOQlFVRXNRMEZCUXl4blFrRkJRU3hSUVVGbExFVkJRVUU3U1VGRFpDeGhRVUZoTEcxQ1FVRnZRanRKUVVOcVF5eFhRVUZYTEdWQlFXZENPMGxCUXpOQ0xGRkJRVkVzVFVGQlRTeFBRVUZQTEV0QlFVc3NRMEZCUXl4UFFVRkJMR05CUVdFc1EwRkJSVHRKUVVNeFF5dzBRa0ZEUlN4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExGZEJRVUVzVVVGQlZTeEZRVUZCTzAxQlExUXNhVUpCUTBVc1YwRkJWeXhIUVVOUUxFMUJRVTBzVFVGQlRTeFRRVUZUTEZGQlFWRXNRMEZCUXp0UlFVRkZMRXRCUVVzc1YwRkJRVHRQUVVGaExFTkJRVU1zUjBGRGJrUXNTVUZEVER0TlFVTkVMRlZCUVZVc1VVRkJRVHRMUVVOWUxFTkJRVUU3UjBGRlNpeERRVUZETEdWQlEwWXNUVUZCUVN4UlFVRkJMR05CUVVFc1EwRkJReXhKUVVGQkxGRkJRVWNzUlVGQlFUdEpRVUZETEZkQlFWVXNZVUZCUVR0SFFVRmhMR1ZCUXpGQ0xFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVRXNTMEZCUVN4RlFVRkJPMGxCUVVzc1YwRkJWU3d3UWtGQlFUdEhRVUV3UWl4bFFVTjJReXhOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZETEV0QlFVRXNVVUZCU1N4RlFVRkJPMGxCUTBnc1UwRkJVeXhEUVVGRk8wbEJRMWdzWjBKQlFXZENMR0ZCUVVFc1pVRkJZeXhQUVVGUk8wbEJRM1JETEZkQlFWVXNiVUpCUVVFN1IwRkJiVUlzUlVGRk5VSXNTMEZCU3l4blFrRkRTaXhOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZCTEV0QlFVRXNSVUZCUVR0SlFVTkZMRmRCUVZVc2IwSkJRVzlDTzBsQlF6bENMRXRCUVVzc1YwRkJXVHRKUVVOcVFpeExRVUZMTEZkQlFVRTdSMEZEVGl4RFFVRkRMR2RDUVVWR0xFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVTXNaMEpCUVVFc1VVRkJaU3hGUVVGQk8wbEJRVU1zVFVGQlRTeEpRVUZMTzBsQlFVTXNVMEZCVXl4UFFVRkJPMGRCUVZVc1EwRkZPVU1zUTBGQlF5eGxRVU5RTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVNc1NVRkJRU3hSUVVGSExFVkJRVUU3U1VGRFJpeGxRVUZsTEdGQlFVRXNaVUZCWXl4UFFVRlJPMGxCUTNKRExGZEJRVlVzYlVKQlFXMUNPMGxCUXpkQ0xHZENRVUZuUWl4aFFVRkJMR1ZCUVdNc1lVRkJRenRIUVVGaExHVkJSVFZETEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQkxFbEJRVUVzWlVGRFJTeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkRMR2xDUVVGQkxFdEJRVWtzUlVGQlFUdEpRVU5JTEU5QlFVOHNZVUZCUVN4VlFVRlRMRmxCUVdFN1NVRkROMElzVTBGQlV5eGhRVUZCTEZsQlFWY3NWVUZCVnp0SlFVTXZRaXhKUVVGSExFbEJRVWs3U1VGRFVDeFpRVUZaTEdGQlFVRXNWMEZCVlN4TFFVRk5PMGxCUXpWQ0xHTkJRV01zUTBGQlFUdEhRVUZGTEVWQlJXWXNTVUZEUnl4RFFVRkRMR1ZCUTFBc1RVRkJRU3hSUVVGQkxHTkJRVUVzUTBGQlF5eHBRa0ZCUVN4TFFVRkpMRVZCUVVFN1NVRkRTQ3hQUVVGUExHRkJRVUVzVlVGQlV5eFZRVUZYTzBsQlF6TkNMRk5CUVZNc1lVRkJRU3haUVVGWExFOUJRVkU3U1VGRE5VSXNTVUZCUnl4SlFVRkpPMGxCUTFBc1kwRkJZeXhEUVVGRk8wbEJRMmhDTEdOQlFXTXNZVUZCUVN4aFFVRlpMRlZCUVVNN1IwRkJWU3hGUVVOMFF5eEhRVU5GTEVWQlFVTXNUMEZEUlN4RFFVTklMRU5CUVVNc1JVRkRUQ3hYUVVGWExHZENRVU5XTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQkxFbEJRVUVzWlVGRFJTeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkRMR2xDUVVGQkxFdEJRVWtzUlVGQlFUdEpRVU5JTEU5QlFVOHNZVUZCUVN4VlFVRlRMRmxCUVdFN1NVRkROMElzVTBGQlV5eGhRVUZCTEZsQlFWY3NWMEZCV1R0SlFVTm9ReXhKUVVGSExFbEJRVWs3U1VGRFVDeGpRVUZqTEVOQlFVVTdTVUZEYUVJc1YwRkJWU3d3UWtGQlFUdEhRVUV3UWl4RlFVVnVReXhEUVVGRExFTkJRVU1zWVVGQllTeERRVU5hTEVOQlFVTXNaVUZEVUN4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExHbENRVUZCTEV0QlFVa3NSVUZCUVR0SlFVTklMRTlCUVU4c1lVRkJRU3hWUVVGVExHZENRVUZwUWp0SlFVTnFReXhUUVVGVExHRkJRVUVzV1VGQlZ5eFBRVUZSTzBsQlF6VkNMRWxCUVVjc1NVRkJTVHRKUVVOUUxHTkJRV01zWVVGQlFTeGhRVUZaTEZWQlFWYzdTVUZEY2tNc1kwRkJZeXhEUVVGQk8wZEJRVVVzUlVGRlppeFhRVU5ITEVOQlEwZ3NRMEZCUXl4SFFVTktMRWxCUVVrc1JVRkRVQ3hQUVVGUExFZEJRVWNzU1VGQlNTeEhRVUZITEdkQ1FVRm5RaXhGUVVNdlFpeERRVU5HTEVOQlFVTXNaVUZEVGl4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExFbEJRVUVzVVVGQlJ5eEZRVUZCTzBsQlFVTXNZMEZCWXl4RFFVRkJPMGRCUVVVc1JVRkRiRUlzVVVGQlVTeG5Ra0ZEVUN4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGQkxFMUJRVUVzVVVGQlFTeFRRVUZCTEVWQlFVRXNTVUZCUVN4bFFVTkZMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVU1zU1VGQlFTeFJRVUZITEVWQlFVRTdTVUZCUXl4VFFVRlRMR0ZCUVVFc1VVRkJUeXhMUVVGTk8wbEJRVU1zWlVGQlpTeGhRVUZCTEdWQlFXTXNTVUZCUXp0SFFVRkpMR1ZCUXpWRUxFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVTXNhVUpCUVVFc1MwRkJTU3hGUVVGQk8wbEJRMGdzVDBGQlR5eGhRVUZCTEZWQlFWTXNXVUZCWVR0SlFVTTNRaXhUUVVGVExHRkJRVUVzV1VGQlZ5eFhRVUZaTzBsQlEyaERMRWxCUVVjc1NVRkJTVHRKUVVOUUxHTkJRV01zUTBGQlJUdEpRVU5vUWl4aFFVRmhMRU5CUVVVN1NVRkRaaXhYUVVGVkxIbENRVUZCTzBkQlFYbENMRVZCUld4RExFTkJRVU1zUTBGQlF5eFZRVUZWTEVOQlExUXNRMEZCUXl4bFFVTlFMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVU1zU1VGQlFTeFJRVUZITEVWQlFVRTdTVUZEUml4VFFVRlRMR0ZCUVVFc1VVRkJUeXhMUVVGTk8wbEJRM1JDTEdWQlFXVXNZVUZCUVN4bFFVRmpMRWxCUVVzN1NVRkRiRU1zVjBGQlZTd3JRa0ZCUVR0SFFVRXJRaXhsUVVWNlF5eE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkRMR2xDUVVGQkxFdEJRVWtzUlVGQlFUdEpRVU5JTEU5QlFVOHNZVUZCUVN4VlFVRlRMR2RDUVVGcFFqdEpRVU5xUXl4VFFVRlRMR0ZCUVVFc1dVRkJWeXhQUVVGUk8wbEJRelZDTEVsQlFVY3NTVUZCU1R0SlFVTlFMR05CUVdNc1lVRkJRU3hoUVVGWkxGVkJRVmM3U1VGRGNrTXNZMEZCWXl4RFFVRkJPMGRCUVVVc1JVRkZaaXhyUWtGRFJ5eERRVU5JTEVOQlEwWXNRMEZCUXl4bFFVTk9MRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVU1zU1VGQlFTeFJRVUZITEVWQlFVRTdTVUZCUXl4VFFVRlRMR0ZCUVVFc1VVRkJUeXhMUVVGTk8wbEJRVU1zWlVGQlpTeGhRVUZCTEdWQlFXTXNTVUZCUXp0SFFVRkpMR1ZCUXpWRUxFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVTXNhVUpCUVVFc1MwRkJTU3hGUVVGQk8wbEJRMGdzVDBGQlR5eGhRVUZCTEZWQlFWTXNXVUZCWVR0SlFVTTNRaXhUUVVGVExHRkJRVUVzV1VGQlZ5eFhRVUZaTzBsQlEyaERMRWxCUVVjc1NVRkJTVHRKUVVOUUxHTkJRV01zUTBGQlJUdEpRVU5vUWl4aFFVRmhMRU5CUVVVN1NVRkRaaXhYUVVGVkxIbENRVUZCTzBkQlFYbENMRVZCUld4RExFTkJRVU1zUTBGQlF5eGxRVUZsTEVOQlEyUXNRMEZCUXl4bFFVTlFMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVU1zU1VGQlFTeFJRVUZITEVWQlFVRTdTVUZEUml4VFFVRlRMR0ZCUVVFc1VVRkJUeXhMUVVGTk8wbEJRM1JDTEdWQlFXVXNZVUZCUVN4bFFVRmpMRWxCUVVzN1NVRkRiRU1zVjBGQlZTd3JRa0ZCUVR0SFFVRXJRaXhsUVVWNlF5eE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkRMR2xDUVVGQkxFdEJRVWtzUlVGQlFUdEpRVU5JTEU5QlFVOHNZVUZCUVN4VlFVRlRMR2RDUVVGcFFqdEpRVU5xUXl4VFFVRlRMR0ZCUVVFc1dVRkJWeXhQUVVGUk8wbEJRelZDTEVsQlFVY3NTVUZCU1R0SlFVTlFMR05CUVdNc1lVRkJRU3hoUVVGWkxGVkJRVmM3U1VGRGNrTXNZMEZCWXl4RFFVRkJPMGRCUVVVc1JVRkZaQ3hEUVVGQkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVRXNRMEZCUVN4RlFVRkJMRmRCUVVFc1pVRkJZeXhGUVVGRExGRkJRVkVzV1VGQldTeERRVUZETEVOQlFVVXNRMEZCUVN4RFFVRkJMRVZCUXk5RExGRkJRVkVzWTBGQll5eFBRVU4yUWl4RFFVRkJMRU5CUTBjc1EwRkRTQ3hEUVVOR0xFTkJRMHdzUTBGQlF5eEhRVU5FTEVsQlFVa3NaVUZEVWl4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExFbEJRVUVzVVVGQlJ5eEZRVUZCTzBsQlFVTXNVMEZCVXl4aFFVRkJMRkZCUVU4c1MwRkJUVHRKUVVGRExHVkJRV1VzWVVGQlFTeGxRVUZqTEVsQlFVTTdSMEZCU1N4bFFVTTFSQ3hOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZETEdsQ1FVRkJMRXRCUVVrc1JVRkJRVHRKUVVOSUxFOUJRVThzWVVGQlFTeFZRVUZUTEZsQlFXRTdTVUZETjBJc1UwRkJVeXhoUVVGQkxGbEJRVmNzVjBGQldUdEpRVU5vUXl4SlFVRkhMRWxCUVVrN1NVRkRVQ3hqUVVGakxFTkJRVVU3U1VGRGFFSXNZVUZCWVN4RFFVRkZPMGxCUTJZc1YwRkJWU3g1UWtGQlFUdEhRVUY1UWl4RlFVVnNReXhEUVVGRExFTkJRVU1zVVVGQlVTeERRVU5RTEVOQlFVTXNaVUZEVUN4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExHbENRVUZCTEV0QlFVa3NSVUZCUVR0SlFVTklMRk5CUVZNc1lVRkJRU3haUVVGWExFOUJRVkU3U1VGRE5VSXNTVUZCUnl4SlFVRkpPMGxCUTFBc1kwRkJZeXhEUVVGRk8wbEJRMmhDTEZkQlFWVXNNa0pCUVRKQ08wbEJRM0pETEU5QlEwVXNVMEZCVXl4SFFVRkhMR0ZCUVVFc1ZVRkJVeXhaUVVGWkxFZEJRVWNzWVVGQlFTeFZRVUZUTEdWQlFVTTdSMEZETDBNc1JVRkZRU3hUUVVGVExHZENRVU5TTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVFc1RVRkJRU3hSUVVGQkxGTkJRVUVzUlVGQlFTeEpRVUZCTEVWQlFVY3NWMEZCWXl4RFFVRkRMR2RDUVVWc1FpeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRVHRKUVVORkxGRkJRVThzVVVGQlVUdEpRVU5tTEV0QlFVa3NjVUpCUVhGQ08wbEJRM3BDTEUxQlFVMHNWMEZCV1R0SlFVTnNRaXhQUVVGUExGZEJRVUU3UjBGQldTeEZRVVZzUWl4WFFVTkJMRU5CUlVRc1EwRkRTQ3hEUVVGRExFVkJRMHdzWTBGQll5eG5Ra0ZEWWl4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExFbEJRVUVzVVVGQlJ5eEZRVUZCTzBsQlFVTXNVMEZCVXl4aFFVRkJMRkZCUVU4c1MwRkJUVHRKUVVGRExHVkJRV1VzWVVGQlFTeGxRVUZqTEVsQlFVTTdSMEZCU1N4bFFVTTFSQ3hOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZETEdsQ1FVRkJMRXRCUVVrc1JVRkJRVHRKUVVOSUxFOUJRVThzWVVGQlFTeFZRVUZUTEZsQlFXRTdTVUZETjBJc1UwRkJVeXhoUVVGQkxGbEJRVmNzVjBGQldUdEpRVU5vUXl4SlFVRkhMRWxCUVVrN1NVRkRVQ3hqUVVGakxFTkJRVVU3U1VGRGFFSXNZVUZCWVN4RFFVRkZPMGxCUTJZc1YwRkJWU3g1UWtGQlFUdEhRVUY1UWl4RlFVVnNReXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVU5NTEVOQlFVTXNaVUZEVUN4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExHbENRVUZCTEV0QlFVa3NSVUZCUVR0SlFVTklMRk5CUVZNc1lVRkJRU3haUVVGWExFOUJRVkU3U1VGRE5VSXNTVUZCUnl4SlFVRkpPMGxCUTFBc1kwRkJZeXhEUVVGRk8wbEJRMmhDTEZkQlFWVXNNa0pCUVRKQ08wbEJRM0pETEU5QlEwVXNVMEZCVXl4SFFVRkhMR0ZCUVVFc1ZVRkJVeXhaUVVGWkxFZEJRVWNzWVVGQlFTeFZRVUZUTEdWQlFVTTdSMEZETDBNc1pVRkZSQ3hOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVR0SlFVTkZMRkZCUVU4c1VVRkJVVHRKUVVObUxFdEJRVWtzY1VKQlFYRkNPMGxCUTNwQ0xFMUJRVTBzVjBGQldUdEpRVU5zUWl4UFFVRlBMRmRCUVVFN1IwRkJXU3hGUVVWc1FpeGpRVU5CTEVOQlEwTXNRMEZEU0N4RFFVRkRMRWRCUTBvc1NVRkJTU3hsUVVOU0xFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVTXNTVUZCUVN4UlFVRkhMRVZCUVVFN1NVRkJReXhUUVVGVExHRkJRVUVzVVVGQlR5eExRVUZOTzBsQlFVTXNaVUZCWlN4aFFVRkJMR1ZCUVdNc1NVRkJRenRIUVVGSkxHVkJRelZFTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVNc2FVSkJRVUVzUzBGQlNTeEZRVUZCTzBsQlEwZ3NUMEZCVHl4aFFVRkJMRlZCUVZNc1dVRkJZVHRKUVVNM1FpeFRRVUZUTEdGQlFVRXNXVUZCVnl4WFFVRlpPMGxCUTJoRExFbEJRVWNzU1VGQlNUdEpRVU5RTEdOQlFXTXNRMEZCUlR0SlFVTm9RaXhoUVVGaExFTkJRVVU3U1VGRFppeFhRVUZWTEhsQ1FVRkJPMGRCUVhsQ0xFVkJSV3hETEVOQlFVTXNRMEZCUXl4cFFrRkJhVUlzUTBGRGFFSXNRMEZCUXl4bFFVTlFMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVU1zU1VGQlFTeFJRVUZITEVWQlFVRTdTVUZEUml4VFFVRlRMR0ZCUVVFc1VVRkJUeXhMUVVGTk8wbEJRM1JDTEdWQlFXVXNZVUZCUVN4bFFVRmpMRWxCUVVzN1NVRkRiRU1zVjBGQlZTd3JRa0ZCUVR0SFFVRXJRaXhsUVVWNlF5eE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkRMR2xDUVVGQkxFdEJRVWtzUlVGQlFUdEpRVU5JTEU5QlFVOHNZVUZCUVN4VlFVRlRMR2RDUVVGcFFqdEpRVU5xUXl4VFFVRlRMR0ZCUVVFc1dVRkJWeXhQUVVGUk8wbEJRelZDTEVsQlFVY3NTVUZCU1R0SlFVTlFMR05CUVdNc1lVRkJRU3hoUVVGWkxGVkJRVmM3U1VGRGNrTXNZMEZCWXl4RFFVRkJPMGRCUVVVc1JVRkZaaXhEUVVGQkxFTkJRVUVzUlVGQlFTeExRVUZCTEdWQlFXTXNSVUZCUXl4UFFVRlBMRU5CUTI1Q0xFTkJRVU1zWlVGRFVDeE5RVUZCTEZGQlFVRXNZMEZCUVN4RFFVRkRMRkZCUVVFc1VVRkJUeXhGUVVGQk8wbEJRMDRzYTBKQlFXbENMRGhDUVVFNFFqdEpRVU12UXl4VlFVRlRMRkZCUVZFN1NVRkRha0lzVDBGRFJTeGhRVUZoTEVkQlFVY3NRMEZCUXl4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMR2xDUVVGcFFpeERRVUZCTzBkQlF6ZEVMR1ZCUlVRc1RVRkJRU3hSUVVGQkxHTkJRVUVzUTBGQlF5eHBRa0ZCUVN4WFFVRlZMRVZCUVVFN1NVRkRWQ3hYUVVGVkxFMUJRVTA3U1VGRGFFSXNUMEZCVHl4aFFVRkJMRlZCUVZNc1owSkJRV2xDTzBsQlEycERMRmRCUVZVc2JVTkJRVzFETzBsQlF6ZERMR1ZCUVZrc2EwSkJRV3RDTzBsQlF6bENMRk5CUVZNc1RVRkJUVHROUVVOaUxHbENRVUZwUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8wdEJRekZDTzBsQlEwWXNWVUZEUlN4aFFVRmhMRWRCUVVjc2FVSkJRVUVzVTBGQlVTeFpRVUZaTEVkQlFVY3NhVUpCUVVFc1UwRkJVU3hMUVVGRE8wZEJSVzVFTEVOQlEwMHNRMEZEVGl4RFFVTkdMRU5CUVVNc1JVRkRUQ3hQUVVGUExFZEJRVWNzWjBKQlFXZENMRVZCUVVVc1IwRkJSeXhKUVVGSkxHVkJRM0JETEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVNc2FVSkJRVUVzUzBGQlNTeEZRVUZCTzBsQlEwZ3NUMEZCVHl4aFFVRkJMRlZCUVZNc1owSkJRV2xDTzBsQlEycERMRk5CUVZNc1lVRkJRU3haUVVGWExFOUJRVkU3U1VGRE5VSXNTVUZCUnl4SlFVRkJPMGRCUVVrc1JVRkZUaXhEUVVGRExFTkJRVU1zWlVGQlpTeERRVU5rTEVOQlEwZ3NRMEZEUml4RFFVTk1MRU5CUVVNc1EwRkJRVHREUVVWUU8wRkJSVUVzVlVGQlZTeFZRVUZWTEVkQlFVYzdSVUZEY2tJc1MwRkJTeXhWUVVGQkxGRkJRVk1zVFVGQlRTeERRVUZETzBsQlEyNUNMRk5CUVZNc1ZVRkJRU3hSUVVGVExFOUJRVThzVjBGQlZ6dEpRVU53UXl4VFFVRlRMRlZCUVVFc1VVRkJVeXhQUVVGUExGZEJRVmM3U1VGRGNFTXNhMEpCUVd0Q0xGVkJRVUVzVVVGQlV5eExRVUZMTzBsQlEyaERMRTFCUVUwc1ZVRkJRU3hSUVVGVExFOUJRVTg3U1VGRGRFSXNZVUZCWVN4VlFVRkJMRkZCUVZNc1QwRkJUenRKUVVNM1FpeFBRVUZQTEZWQlFVRXNVVUZCVXl4UFFVRlBPMGxCUTNaQ0xGVkJRVlVzVlVGQlFTeFJRVUZUTEU5QlFVODdTVUZETVVJc1owSkJRV2RDTEZWQlFVRXNVVUZCVXl4UFFVRlBPMGxCUTJoRExHTkJRV01zVlVGQlFTeFJRVUZUTEU5QlFVODdTVUZET1VJc1pVRkJaU3hWUVVGQkxGRkJRVk1zVDBGQlR6dEpRVU12UWl4VFFVRlRMRlZCUVVFc1VVRkJVeXhOUVVGTkxFTkJRVU03VFVGRGRrSXNVMEZCVXl4VlFVRkJMRkZCUVZNc1QwRkJUenROUVVONlFpeFJRVUZSTEZWQlFVRXNVVUZCVXl4UFFVRlBPMDFCUTNoQ0xHbENRVUZwUWl4VlFVRkJMRkZCUVZNc1QwRkJRenRMUVVNMVFpeERRVUZETzBsQlEwWXNWVUZCVlN4VlFVRkJMRkZCUVZNc1RVRkJUU3hEUVVGRE8wMUJRM2hDTEdsQ1FVRnBRaXhWUVVGQkxGRkJRVk1zVDBGQlR6dE5RVU5xUXl4aFFVRmhMRlZCUVVFc1VVRkJVeXhQUVVGUE8wMUJRemRDTEdWQlFXVXNWVUZCUVN4UlFVRlRMRTFCUVUwc1EwRkJRenRSUVVNM1FpeFJRVUZSTEZWQlFVRXNVVUZCVXl4UFFVRkRPMDlCUTI1Q0xFTkJRVUU3UzBGRFJpeERRVUZCTzBkQlEwWXNRMEZCUVR0RFFVTkdMRU5CUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRek5qUkN4SlFVRkJMRTFCUVVFc1IwRkJRU3gxUWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZGUVN4SlFVRkJMRXRCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeExRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2FVSkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4aFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVGcFJTeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEhsQ1FVRkJMRmRCUVVFc1pVRkJRU3hQUVVGQkxHdERRVUZCTEdsQ1FVRkJMRTlCUVVFc1QwRkJRU3hSUVVGQkxHZENRVUZCTEU5QlFVRXNUMEZCUVN4WlFVRkJMSGRDUVVGQkxGbEJRVUVzUTBGQlFTeFhRVUZCTEZkQlFVRXNWMEZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzYVVKQlFVRXNTMEZCUVN4WFFVRkJPMEZCUVVFc1UwRkJRU3gzUWtGQlFTeEhRVUZCTEVWQlFVRXNWMEZCUVN4VFFVRkJMRmRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNWMEZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3h2UWtGQlFTeEhRVUZCTEhkQ1FVRkJMRWRCUVVFc05FSkJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRXNWVUZCUVN4TFFVRkJMRWRCUVVFc2QwSkJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzVjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEd0Q1FVRkJMRTFCUVVFc1EwRkJRU3hUUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hUUVVGQkxFbEJRVUVzUjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMR05CUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1NVRkJRU3haUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNUVUZCUVN4WlFVRkJMRTFCUVVFN1FVRkZha1VzVFVGQlRTeFZRVUZWTEVkQlFVY3NRMEZCUXp0RlFVRkZMRkZCUVZFN1JVRkJSVHRCUVVGblFpeERRVUZETEV0QlFVczdSVUZEY0VRc1RVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlFTeHBRa0ZCVlN4RlFVRkRMR2xDUVVGWExFTkJRVU03UlVGRGFrTXNUVUZCVFN4RFFVRkRMR05CUVdNc1JVRkJSU3hwUWtGQmFVSXNRMEZCUXl4SFFVRkhMRWxCUVVFc1pVRkJVU3hGUVVGRExFdEJRVXNzUTBGQlF6dEZRVU16UkN4TlFVRk5MRWRCUVVjc1IwRkJSeXhKUVVGQkxHRkJRVTBzUlVGQlF5eExRVUZMTEVOQlFVTTdSVUZGZWtJc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUVVzc1IwRkJSeXhGUVVGRk8wVkJRVWtzWjBKQlExb3NUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4VlFVRlZPMGxCUTFRc1VVRkJVU3hGUVVGRkxEQkNRVUZSTEVOQlFVTXNXVUZCWVR0SlFVTm9ReXhUUVVGVExFVkJRVU1zY1VKQlFYRkNPMGxCUXk5Q0xHVkJRVmtzY1VKQlFYRkNPMGxCUTJwRExFOUJRVThzUlVGQlJTeERRVUZCTEV0QlFVMHNhVUpCUVdsQ0xFTkJRVU1zU1VGQlNTeERRVUZGTzBsQlEzWkRMRXRCUVVzc1JVRkJSU3h0UWtGQlN5eERRVUZETEZkQlFWazdTVUZEZWtJc1UwRkJVeXhGUVVGRkxFTkJRVU1zUTBGQlF5eFpRVUZaTzBWQlFVVXNRMEZETlVJc1EwRkJReXhGUVVWRUxHTkJRV01zWjBKQlEySXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zUzBGQlFTeERRVUZCTEVsQlFVazdTVUZEU0N4bFFVRlpMSGRDUVVGM1FqdEpRVU53UXl4aFFVRmhMRVZCUVVVc1IwRkJSeXhEUVVGRExFOUJRVkU3U1VGRE0wSXNUVUZCVFN4RlFVRkZMRU5CUVVFc1MwRkJUU3hwUWtGQmFVSXNRMEZCUXl4TFFVRkxPMFZCUVVVc1IwRkZkRU1zWlVGQlpTeG5Ra0ZEWkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eExRVUZCTEVOQlFVRXNVVUZCVVR0SlFVTlFMRkZCUVZFc1JVRkJSU3d3UWtGQlVTeERRVUZETEUxQlFVODdTVUZETVVJc1pVRkJXU3c0UWtGQk9FSTdTVUZETVVNc1QwRkJUeXhGUVVGRkxFTkJRVUVzUzBGQlRUdE5RVU5pTEdsQ1FVRnBRaXhEUVVGRExFdEJRVXNzUTBGQlF6dE5RVU40UWl4bFFVRmxMRU5CUVVNc1EwRkJRenRKUVVOdVFqdEZRVUZGTEVkQlJVUXNRMEZCUXl4RFFVRkRMR1ZCUVdVc1EwRkRWaXhEUVVGRExFZEJRMVFzU1VGQlNTeGxRVU5TTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExFdEJRVUVzUTBGQlFTeFJRVUZSTzBsQlExQXNVVUZCVVN4RlFVRkZMREJDUVVGUkxFTkJRVU1zUzBGQlRUdEpRVU42UWl4bFFVRlpMR2xDUVVGcFFqdEpRVU0zUWl4UFFVRlBMRVZCUVVVc1EwRkJRU3hMUVVGTk8wMUJRMklzYVVKQlFXbENMRU5CUVVNc1MwRkJTeXhEUVVGRE8wMUJRM2hDTEZGQlFWRXNRMEZCUXl4RFFVRkRPMGxCUTFvN1JVRkJSU3hIUVVWRUxFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlEwNHNRMEZEVGl4RFFVRkRMRWRCUTB3c1NVRkRSQ3hEUVVGRE8wRkJSVllzUTBGQlF6dEJRVVZFTEZWQlFWVXNRMEZCUXl4VFFVRlRMRWRCUVVjN1JVRkRja0lzVVVGQlVTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlU3UlVGRGJrTXNaVUZCWlN4RlFVRkZMR3RDUVVGVExFTkJRVU03UVVGRE4wSXNRMEZCUXp0QlFVRkRMRWxCUVVFc1VVRkJRU3hIUVVWaExGVkJRVlU3UVVGQlFTeFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRkZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVNdlJIcENMRWxCUVVFc2IwSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJhMFFzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMEZzUkN4SlFVRkJMRTFCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeEpRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFBRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeHBRa0ZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHRkJRVUVzUjBGQlFTeFBRVUZCTzBGQlVVRXNTVUZCUVN4bFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEU5QlFVRTdRVUZCZFVVc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPMEZCUlhoRUxGTkJRVk1zYlVKQlFXMUNMRU5CUVVFc1JVRkJSenRGUVVNMVF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkJMRGhDUVVGakxFVkJRVU1zUTBGQlF6dEZRVU14UWl4TlFVRk5MRTlCUVU4c1IwRkJSeXhKUVVGQkxEQkNRVUZWTEVWQlFVTXNRMEZCUXp0RlFVVTFRaXh2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhKUVVGQkxFTkJRVUVzVDBGQlJ6dEpRVUZETEZOQlFWTXNSVUZCUXp0RlFVRjFRaXhuUWtGRGNFTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVDBGQlFTeERRVUZCTEU5QlFVMDdTVUZCUXl4SlFVRkpMRVZCUVVNc1UwRkJVenRKUVVGRExGTkJRVk1zUlVGQlF6dEZRVUZuUXl4blFrRkRMMFFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1NVRkJRU3hEUVVGQkxFOUJRVWM3U1VGQlF5eFBRVUZQTEVWQlFVVXNjVUpCUVU4c1EwRkJRenRGUVVGTExHZENRVU42UWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eEpRVUZCTEVOQlFVRXNUMEZCUnp0SlFVRkRMRlZCUVZVc1JVRkJSVHRGUVVGRkxHZENRVU5xUWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRWxCUVVrN1NVRkRTQ3hKUVVGSkxFVkJRVVVzTUVKQlFWRXNRMEZCUXl4SlFVRkxPMGxCUTNCQ0xGTkJRVk1zUlVGQlF5eGhRVUZoTzBsQlEzWkNMRXRCUVVzc1JVRkJSU3gxUWtGQlV5eERRVUZETzBWQlFXVXNRMEZEYWtNc1EwRkRSU3hEUVVGRExHVkJRMDRzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1NVRkJRU3hEUVVGQkxFOUJRVWM3U1VGQlF5eFhRVUZYTEVWQlFVVTdSVUZCUlN4blFrRkRiRUlzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2FVSkJRVUVzUTBGQlFTeEpRVUZKTzBsQlEwZ3NTMEZCU3l4RlFVRkZMSFZDUVVGVExFTkJRVU1zVjBGQldUdEpRVU0zUWl4TFFVRkxMRVZCUVVVc2RVSkJRVk1zUTBGQlF5eEpRVUZMTzBsQlEzUkNMRTlCUVU4c1JVRkJSU3g1UWtGQlZ5eERRVUZETEUxQlFVODdTVUZETlVJc1JVRkJSU3hGUVVGRExFbEJRVWs3U1VGRFVDeFZRVUZWTEVWQlFVVXNkMEpCUVZVc1EwRkJRenRGUVVGTExFZEJSVE5DTEVOQlFVTXNRMEZCUXl4cFFrRkJhVUlzUTBGRGFFSXNRMEZCUXl4bFFVTlFMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHRKUVVOSUxFdEJRVXNzUlVGQlJTeDFRa0ZCVXl4RFFVRkRMRmRCUVZrN1NVRkROMElzUzBGQlN5eEZRVUZGTEhWQ1FVRlRMRU5CUVVNc1NVRkJTenRKUVVOMFFpeFBRVUZQTEVWQlFVVXNlVUpCUVZjc1EwRkJReXhOUVVGUE8wbEJRelZDTEVWQlFVVXNSVUZCUXl4SlFVRkpPMGxCUTFBc1dVRkJXU3hGUVVGRk8wVkJRVVVzUjBGRlppeERRVUZETEVOQlFVTXNkVUpCUVhWQ0xFTkJRM1JDTEVOQlFVTXNaVUZEVUN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eFBRVUZCTEVOQlFVRXNUMEZCVFR0SlFVTk1MRWxCUVVrc1JVRkJReXhOUVVGTk8wbEJRMWdzVDBGQlR5eEZRVUZITEVOQlFVTXNTVUZCU3p0TlFVTmtMRU5CUVVNc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dE5RVU5zUWl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRkxFZEJRVVVzTUVKQlFXMUNMR3RDUVVGcFFpeERRVUZETzBsQlEzWkVMRU5CUVVVN1NVRkRSaXhUUVVGVExFVkJRVU03UlVGQmMwTXNSMEZGTDBNc1EwRkJReXhEUVVGRExEUkNRVUUwUWl4RFFVTjZRaXhEUVVOTUxFTkJRMFlzUTBGRFF5eERRVU5NTEVOQlFVTTdRVUZGVmpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJ4RlFTeEpRVUZCTEZWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQmRVTXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEwRjJReXhKUVVGQkxGTkJRVUVzZFVKQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5CTEVsQlFVRXNZVUZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeFpRVUZCTEVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hqUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVRXNRMEZCUVR0QlFVTkJMRWxCUVVFc2EwSkJRVUVzVDBGQlFTeERRVUZCTEd0Q1FVRkJMRU5CUVVFc1EwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeFBRVUZCTEVOQlFVRXNVVUZCUVN4RFFVRkJMRU5CUVVFN1FVRkRRU3hKUVVGQkxFOUJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5CTEVsQlFVRXNZMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeG5RMEZCUVN4RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVOQkxFbEJRVUVzVVVGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hsUVVGQkxFTkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4blFrRkJRU3hQUVVGQkxFTkJRVUVzTUVOQlFVRXNRMEZCUVN4RFFVRkJPMEZCVlVFc1NVRkJRU3hQUVVGQkxFOUJRVUVzUTBGQlFTeHJRMEZCUVN4RFFVRkJMRU5CUVVFN1FVRkRRU3hKUVVGQkxGRkJRVUVzVDBGQlFTeERRVUZCTEd0RFFVRkJMRU5CUVVFc1EwRkJRVHRCUVVOQkxFbEJRVUVzWVVGQlFTeFBRVUZCTEVOQlFVRXNiMEpCUVVFc1EwRkJRU3hEUVVGQk8wRkJTMEVzU1VGQlFTeFZRVUZCTEU5QlFVRXNRMEZCUVN4dFEwRkJRU3hEUVVGQkxFTkJRVUU3UVVGRFFTeEpRVUZCTEZOQlFVRXNUMEZCUVN4RFFVRkJMRFpDUVVGQkxFTkJRVUVzUTBGQlFUdEJRVU5CTEVsQlFVRXNVVUZCUVN4UFFVRkJMRU5CUVVFc05rSkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4WFFVRkJMRTlCUVVFc1EwRkJRU3gzUWtGQlFTeERRVUZCTEVOQlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1QwRkJRU3hEUVVGQkxEUkNRVUZCTEVOQlFVRXNRMEZCUVR0QlFVTkJMRWxCUVVFc1dVRkJRU3hQUVVGQkxFTkJRVUVzYTBOQlFVRXNRMEZCUVN4RFFVRkJPMEZCUTBFc1NVRkJRU3hyUWtGQlFTeFBRVUZCTEVOQlFVRXNLMEpCUVVFc1EwRkJRU3hEUVVGQk8wRkJRMEVzU1VGQlFTeHZRa0ZCUVN4UFFVRkJMRU5CUVVFc2VVSkJRVUVzUTBGQlFTeERRVUZCTzBGQlEwRXNTVUZCUVN4dFFrRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4elFrRkJRU3hEUVVGQkxFTkJRVUVzUTBGQlFUdEJRVUZ0UkN4eFEwRkJRU3hGUVVGQkxFOUJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWRCUVVFc1IwRkJRU3hGUVVGQkxGTkJRVUVzUjBGQlFTeEZRVUZCTEVOQlFVRXNSVUZCUVR0QlFVRkJMQ3REUVVGQkxFVkJRVUVzU1VGQlFTeFBRVUZCTEU5QlFVRXNTMEZCUVN4VlFVRkJMRVZCUVVFc1QwRkJRU3hKUVVGQkxFTkJRVUVzUTBGQlFTeEpRVUZCTEc5Q1FVRkJMRWxCUVVFc1QwRkJRU3hGUVVGQkxFTkJRVUVzUTBGQlFTeEpRVUZCTEcxQ1FVRkJMRWxCUVVFc1QwRkJRU3hGUVVGQkxFTkJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNNa0pCUVVFc2RVSkJRVUVzUlVGQlFTeFBRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEVOQlFVRXNSVUZCUVN4RlFVRkJMRmRCUVVFc1EwRkJRU3hEUVVGQkxFVkJRVUU3UVVGQlFTeHRSRUZCUVN4RlFVRkJMRWxCUVVFc1EwRkJRU3hYUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNWMEZCUVN4RlFVRkJMRVZCUVVFc1QwRkJRU3hIUVVGQkxFTkJRVUVzUlVGQlFTeERRVUZCTEVsQlFVRXNSMEZCUVN4TFFVRkJMRWxCUVVFc1NVRkJRU3hQUVVGQkxFZEJRVUVzUzBGQlFTeFJRVUZCTEVsQlFVRXNUMEZCUVN4SFFVRkJMRXRCUVVFc1ZVRkJRU3hGUVVGQkxFVkJRVUVzVDBGQlFTeEZRVUZCTEZOQlFVRXNSMEZCUVN4RlFVRkJMRU5CUVVFc1JVRkJRU3hEUVVGQkxFbEJRVUVzVVVGQlFTeDNRa0ZCUVN4RFFVRkJMRmRCUVVFc1EwRkJRU3hEUVVGQkxFTkJRVUVzU1VGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFVkJRVUVzUlVGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hEUVVGQkxFVkJRVUVzUTBGQlFTeEpRVUZCTEZOQlFVRXNSVUZCUVN4RFFVRkJMRU5CUVVFc1NVRkJRU3gzUWtGQlFTeE5RVUZCTEdWQlFVRXNTVUZCUVN4TlFVRkJMSGxDUVVGQkxFTkJRVUVzUTBGQlFTeExRVUZCTEVsQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1JVRkJRU3hGUVVGQkxFbEJRVUVzUjBGQlFTeExRVUZCTEZOQlFVRXNTVUZCUVN4TlFVRkJMRlZCUVVFc1pVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNRMEZCUVN4RlFVRkJMRVZCUVVFc1NVRkJRU3hQUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4NVFrRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRU5CUVVFc1EwRkJRU3hKUVVGQkxFbEJRVUVzUzBGQlFTeEpRVUZCTEVsQlFVRXNTVUZCUVN4SlFVRkJMRWxCUVVFc1EwRkJRU3hGUVVGQkxFVkJRVUVzVFVGQlFTeGxRVUZCTEVOQlFVRXNUVUZCUVN4RlFVRkJMRWRCUVVFc1JVRkJRU3hKUVVGQkxFTkJRVUVzUTBGQlFTeEZRVUZCTEUxQlFVRXNSVUZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4RFFVRkJMRVZCUVVFc1JVRkJRU3hGUVVGQkxFTkJRVUVzVFVGQlFTeFJRVUZCTEVkQlFVRXNSMEZCUVN4RFFVRkJMRU5CUVVFc1NVRkJRU3hMUVVGQkxFVkJRVUVzUlVGQlFTeExRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1RVRkJRU3hEUVVGQkxFTkJRVUVzUlVGQlFTeERRVUZCTEU5QlFVRXNUVUZCUVN4RFFVRkJMRVZCUVVFN1FVRkZia1FzVFVGQlRTeFJRVU5LTEVOQlFVRXNRMEZCUVN4RlFVRkJMRXRCUVVFc2JVSkJRV3RDTEVkQlFVVXNTMEZCU3l4SlFVRkJMSFZDUVVGelFpeEhRVU16UXl4aFFVRkJMRmxCUVZjc1ZVRkJWU3hIUVVOeVFpeGhRVUZCTEZsQlFWY3NWVUZCVlN4RFFVRkJPMEZCUlROQ0xFMUJRVTBzZFVKQlFYVkNMR2xDUVVGcFFpeERRVUZCTzBGQlJTOUNMRzFDUVVGdFFqdEZRVU5vUXl4alFVRmpMRVZCUVVVN1JVRkRhRUlzTkVKQlFUUkNMRVZCUVVNN1EwRkRPVUlzUlVGQlJUdEZRVUZCTEVsQlFVRXNjVUpCUVVFc1EwRkJRVHRGUVVORUxFMUJRVTBzVjBGQlZ5eERRVUZCTEVOQlFVRXNSVUZCUVN4WFFVRkJMRmxCUVZjc1IwRkJSU3hEUVVGQk8wVkJRemxDTEUxQlFVMHNhMEpCUVd0Q0xFMUJRVTBzUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkJPMFZCUTJoRUxFMUJRVTBzYjBKQlFXOUNMRU5CUVVFc1EwRkJRU3hGUVVGQkxGZEJRVUVzV1VGQlZ5eEZRVUZETEZOQlFVRXNjVUpCUVc5Q0xFTkJRVU1zUTBGQlFUdEZRVU16UkN4TlFVRk5MSGxDUVVGNVFpeERRVUZCTEVOQlFVRXNSVUZCUVN4WlFVRkJMRmxCUVZjc1JVRkJReXhsUVVGbExFTkJRVU1zUTBGQlFUdEZRVU16UkN4TlFVRk5MR3RDUVVGclFpeERRVUZCTEVOQlFVRXNSVUZCUVN4WFFVRkJMRmxCUVZjc1JVRkJReXhWUVVGQkxHMUNRVUZyUWl4RFFVRkRMRU5CUVVFN1JVRkRka1FzVFVGQlRTeFZRVUZWTEVOQlFVRXNRMEZCUVN4RlFVRkJMRmRCUVVFc1dVRkJWeXhGUVVGRExGVkJRVUVzYTBKQlFXbENMRU5CUVVNc1EwRkJRVHRGUVVNNVF5eE5RVUZOTEVsQlFVa3NRMEZCUVN4RFFVRkJMRVZCUVVFc1pVRkJRU3hsUVVGakxFZEJRVVVzUTBGQlFUdEZRVVV4UWl4RFFVRkJMRU5CUVVFc1JVRkJRU3hOUVVGQkxGVkJRVk1zUlVGQlF5eE5RVUZOTzBsQlFVRXNTVUZCUVN4eFFrRkJRU3hGUVVGQkxITkNRVUZCTEVOQlFVRTdTVUZEWkN4SlFVTkZMRTlCUVU4c1MwRkJTeXhUUVVGVExFbEJRM0pDTEdWQlFXVXNTMEZCU3l4VFFVRlRMRWxCUXpkQ0xFTkJRVU1zUTBGQlFTeERRVUZCTEVWQlFVRXNUMEZCUVN4UlFVRlBMRVZCUVVNc2MwSkJRWE5DTEVWQlFVVXNaVUZCWlN4RFFVRkRMRXRCUTJoRUxFTkJRVUVzYVVKQlFXbENMRXRCUVVFc1NVRkJRU3hKUVVGcVFpeHBRa0ZCYVVJc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMSGRDUVVGcVFpeHBRa0ZCYVVJc1EwRkJSeXhsUVVGbExFTkJRVU1zVFVGQlFTeEpRVUZCTEVsQlFVRXNjVUpCUVVFc1MwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNSMEZCY0VNc2NVSkJRVUVzUTBGQmRVTXNUMEZCVHl4RFFVRkRMRTFCUVVzc1UwRkJVeXhKUVVNMVJDeE5RVUZOTEV0QlFVc3NRMEZCUXl4cFFrRkJhVUlzUzBGQlFTeEpRVUZCTEVsQlFXcENMR2xDUVVGcFFpeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzZVVKQlFXcENMR2xDUVVGcFFpeERRVUZITEdWQlFXVXNRMEZCUXl4TlFVRkJMRWxCUVVFc1NVRkJRU3h6UWtGQlFTeExRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGd1F5eHpRa0ZCUVN4RFFVRjFReXhQUVVGUExFTkJRVU1zUTBGQlF5eFBRVUZQTEV0QlEycEZMRU5CUVVNc1EwRkJReXhGUVVOT08wMUJRMEVzVFVGQlRTeFpRVUZaTEVWQlFVVXNRMEZCUVR0TlFVTndRaXhsUVVGbExGRkJRVkVzUTBGQlJTeFBRVUZSTzFGQlF5OUNMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVRTdUMEZEZEVJc1EwRkJReXhEUVVGQk8wMUJSVVlzVFVGQlRTeHpRa0ZCYzBJN1VVRkRNVUlzUjBGQlJ5eHBRa0ZCYVVJN1VVRkRjRUlzUTBGQlF5eGxRVUZsTEVkQlFVYzdWVUZEYWtJc1NVRkJSeXhwUWtGQmFVSXNTMEZCUVN4SlFVRkJMRWxCUVdwQ0xHbENRVUZwUWl4TFFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZxUWl4cFFrRkJhVUlzUTBGQlJ5eGxRVUZsTEVOQlFVTXNRMEZCUVR0VlFVTjJReXhEUVVGRExFOUJRVThzUjBGQlJ5eFRRVUZCTzFOQlEySTdUMEZEUkN4RFFVRkJPMDFCUlVRc1VVRkJVU3hEUVVGRExFTkJRVUVzUTBGQlFTeEZRVUZCTEZGQlFVRXNkVUpCUVhOQ0xFVkJRVU1zYlVKQlFXMUNMRU5CUVVNc1EwRkJReXhEUVVGQk8wdEJRM1pFTzBkQlEwUXNSVUZCUlN4RFFVTkVMR1ZCUVdVc1JVRkRaaXh6UWtGQmMwSXNSVUZEZEVJc2FVSkJRV2xDTEVWQlEycENMR1ZCUVdVc1JVRkRaaXhQUVVGUExFVkJRMUFzVVVGQlVTeERRVU5VTEVOQlFVTXNRMEZCUVR0RlFVVkdMRTFCUVUwc1kwRkJZeXhEUVVGQkxFTkJRVUVzUlVGQlFTeFhRVUZCTEZsQlFWY3NSVUZCUXl4VlFVRkJMR1ZCUVdNc1EwRkJReXhEUVVGQk8wVkJReTlETEUxQlFVMHNWVUZCVlN4RFFVRkJMRU5CUVVFc1JVRkJRU3hsUVVGQkxGZEJRVlVzUjBGQlJTeERRVUZCTzBWQlJUVkNMRTFCUVUwc2QwSkJRWGRDTEhGRFFVRnhRenRKUVVGQkxFbEJRVUVzWjBKQlFVRXNRMEZCUVR0SlFVTnFSU3hKUVVGSkxHVkJRV1VzUlVGQlJUdE5RVU51UWl4dlFrRkRSU3hOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZCTEV0QlFVRXNSVUZCUVR0UlFVTkZMRXRCUVVzc1kwRkJaVHRSUVVOd1FpeExRVUZMTEVOQlFVRXNRMEZCUVN4RlFVRkJMRTFCUVVFc2FVSkJRV2RDTEVWQlFVTXNaVUZCWlN4RlFVRkZMRmRCUVZjc1EwRkJSVHRSUVVOd1JDeFhRVUZWTERoQ1FVRkJPMDlCUTFnc1EwRkJReXhEUVVGQk8wdEJSVTQ3U1VGRFFTeHZRa0ZEUlN4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGQkxFdEJRVUVzUlVGQlFUdE5RVUZMTEZkQlFWVXNhME5CUVVFN1MwRkJhME1zUlVGRE9VTXNRMEZCUVN4alFVRmpMRXRCUVVFc1NVRkJRU3hKUVVGa0xHTkJRV01zUzBGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxHMUNRVUZrTEdOQlFXTXNRMEZCUnl4RFFVRkRMRU5CUVVNc1RVRkJRU3hKUVVGQkxFbEJRVUVzWjBKQlFVRXNTMEZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hMUVVGQkxFTkJRVUVzUjBGQmJrSXNaMEpCUVVFc1dVRkJaME1zUlVGQlJTeExRVUZKTEVsQlEzQkRMRU5CUVVNc1EwRkJRVHRIUVVWVUxFTkJRVUU3UlVGRlJDeE5RVUZOTERSQ1FVRTBRaXh4UWtGQmNVSTdTVUZEY2tRc1RVRkJUU3g1UWtGQmVVSTdUVUZETjBJc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU03VFVGRE9VTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJReXhWUVVGQk8wdEJRMVFzUTBGQlFUdEpRVVZFTEUxQlFVMHNWMEZCVnp0TlFVTm1MRWRCUVVjc2FVSkJRV2xDTzAxQlEzQkNMRU5CUVVNc1pVRkJaU3hIUVVGSE8xRkJRMnBDTEVOQlFVTXNUMEZCVHl4SFFVRkhMSE5DUVVGQk8wOUJRMkk3UzBGRFJDeERRVUZCTzBsQlJVUXNVVUZCVVN4RFFVRkRMRU5CUVVFc1EwRkJRU3hGUVVGQkxGRkJRVUVzZFVKQlFYTkNMRVZCUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlFUdEhRVU16UXl4RFFVRkJPMFZCUlVRc1RVRkJUU3h0UWtGQmJVSXNRMEZCUXpzN096czdSMEZCT0VNc1MwRkJTenRKUVVGQkxFbEJRVUVzYzBKQlFVRXNSVUZCUVN4elFrRkJRU3hEUVVGQk8wbEJRek5GTEVsQlFVa3NRMEZCUXl4SlFVRkpMRTlCUVU4c1JVRkJSVHROUVVOb1FpeFBRVUZQTEVsQlFVa3NRMEZCUVR0TFFVTmlPMGxCUlVFc1RVRkJUU3hoUVVGVkxFTkJRVUVzZVVKQlFVY3NhVUpCUVdsQ0xFTkJRVU1zWlVGQlpTeERRVUZETEUxQlFVRXNTVUZCUVN4SlFVRkJMSE5DUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3g1UWtGQmJFTXNjMEpCUVVFc1EwRkJjVU1zVDBGQlR5eERRVUZETEUxQlFVRXNTVUZCUVN4SlFVRkJMSE5DUVVGQkxFdEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVRkRExITkNRVUZCTEVOQlFXZEVMRWRCUVVjc1EwRkJReXhEUVVGQk8wbEJRM1pGTEc5Q1FVTkZMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzAxQlFVc3NWMEZCVlN4M1FrRkJkMEk3VFVGQlF5eExRVUZOTEVOQlFVRXNWMEZCUVN4RlFVRmhMRWRCUVVrc1EwRkJRU3hEUVVGQk8wdEJRVVVzWlVGREwwUXNUVUZCUVN4UlFVRkJMR05CUVVFc1EwRkJRU3hSUVVGQkxFVkJRVUU3VFVGRFJTeFhRVUZWTEdkRFFVRm5RenROUVVNeFF5eGxRVUZaTERSQ1FVRTBRanROUVVONFF5eFRRVUZUTEUxQlFVMDdVVUZEWWl4NVFrRkJlVUlzUTBGQlF5eEhRVUZITEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVFN1QwRkROVU03UzBGQlJTeGxRVVZHTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVNc1NVRkJRU3hSUVVGSExFVkJRVUU3VFVGRFJpeGpRVUZqTEVOQlFVVTdUVUZEYUVJc1UwRkJVeXhoUVVGQkxGRkJRVThzUzBGQlRUdE5RVU4wUWl4WlFVRlpMR0ZCUVVFc1YwRkJWU3hQUVVGUk8wMUJRemxDTEdkQ1FVRm5RaXhoUVVGQkxHVkJRV01zWVVGQll6dE5RVU0xUXl4WFFVRlZMSGREUVVGQk8wdEJRWGRETEdWQlJXeEVMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVU1zU1VGQlFTeFJRVUZITEVWQlFVRTdUVUZEUml4WlFVRlpMR0ZCUVVFc1YwRkJWU3hQUVVGUk8wMUJRemxDTEZkQlFWVXNLMEpCUVVFN1MwRkJLMElzUlVGRmVFTXNjVUpCUVhGQ0xFTkJRVU1zWlVGQlpTeEZRVUZGTEdOQlFXTXNRMEZCUXl4bFFVTjJSQ3hOUVVGQkxGRkJRVUVzWTBGQlFTeERRVUZETEZkQlFVRXNVVUZCVlN4RlFVRkJPMDFCUTFRc1QwRkJUeXhoUVVGQkxFMUJRVXNzV1VGQllUdE5RVU42UWl4VFFVRlRMR0ZCUVVFc2EwSkJRV2xDTEVkQlFVazdUVUZET1VJc1VVRkJVU3hEUVVGQk8wdEJRVVVzUlVGRlVpeERRVUZCTEVWQlFVVXNZMEZCWXl4SlFVRkpMRU5CUVVNc1EwRkJReXh0UWtGQmJVSXNRMEZCUlN4RFFVRkJMRVZCUVVFc1JVRkJTU3hKUVVGSkxFOUJRVkVzUTBGQlFTeERRVUZCTEVOQlEyNUVMRU5CUTFRc1EwRkJReXhsUVVOT0xFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVTXNTVUZCUVN4UlFVRkhMRVZCUVVFN1RVRkJReXhaUVVGWkxHRkJRVUVzVjBGQlZTeFJRVUZETzB0QlFWRXNaVUZEYkVNc1RVRkJRU3hSUVVGQkxHTkJRVUVzUTBGQlF5eHBRa0ZCUVN4TFFVRkpMRVZCUVVFN1RVRkRTQ3hOUVVGTkxGVkJRVlVzUjBGQlJ5eHBRa0ZCUVN4VFFVRlJMRlZCUVZVc1IwRkJSeXhwUWtGQlFTeFRRVUZSTEZkQlFWazdUVUZETlVRc1QwRkJUeXhoUVVGQkxFMUJRVXNzV1VGQlF6dExRVU5rTEVOQlEwVXNRMEZEUml4RFFVTkRMRU5CUVVNc1JVRkZVaXhWUVVGVkxHZENRVU5VTEUxQlFVRXNVVUZCUVN4alFVRkJMRU5CUVVNc1NVRkJRU3hSUVVGSExFVkJRVUU3VFVGQlF5eFRRVUZUTEdGQlFVRXNVVUZCVHl4TFFVRk5PMDFCUVVNc1ZVRkJWU3hoUVVGQkxGVkJRVk1zUzBGQlRUdE5RVUZETEV0QlFVc3NRMEZCUVR0TFFVRkZMRVZCUXpGRUxFbEJRVWtzU1VGQlNTeERRVUZETEZsQlFWazdUVUZEY0VJc1RVRkJUVHM3T3pzN08wOUJRV3RFTEVkQlFVY3NSMEZCUnl4RFFVRkJPMDFCUXpsRUxFMUJRVTBzVjBGQlZ5eERRVUZCTEVOQlFVRXNSVUZCUVN4TlFVRkJMR2xDUVVGblFpeEZRVUZETEV0QlFVc3NSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkJRVHROUVVOeVJDeE5RVUZOTEdOQlFXTXNRMEZCUVN4RFFVRkJMRVZCUVVFc1MwRkJRU3hsUVVGakxFVkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdUVUZEZGtNc1RVRkJUU3h0UWtGQmJVSXNUVUZEZGtJc1QwRkJUeXhMUVVGTExFTkJRVVVzUTBGQlFTeEZRVUZGTEU5QlFVRXNXVUZCV1N4RFFVRkJMRU5CUVVFc1JVRkJSeXhQUVVGUkxFTkJRVUVzUTBGQlFTeEZRVUZITEU5QlFWRXNRMEZCUVN4RFFVRkRMRU5CUVVNc1EwRkJRVHROUVVWMFJDeHZRa0ZEUlN4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExFbEJRVUVzVVVGQlJ5eEZRVUZCTzFGQlEwWXNaVUZCV1N4aFFVRmhPMUZCUTNwQ0xFOUJRVThzUzBGQlRUdFJRVU5pTEV0QlFVMHNRMEZCUVN4SlFVRkJMRVZCUVUwc1EwRkJSU3hEUVVGQkxFTkJRVVU3VVVGRGFFSXNWMEZCVlN3d1FrRkJRVHRQUVVFd1FpeGxRVVZ3UXl4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExFdEJRVUVzVVVGQlNTeEZRVUZCTzFGQlEwZ3NVMEZCVXl4RFFVRkZPMUZCUTFnc1owSkJRV2RDTEdGQlFVRXNaVUZCWXl4UFFVRlJPMUZCUTNSRExGZEJRVlVzWjBOQlFVRTdUMEZCWjBNc1JVRkZla01zVVVGQlVTeG5Ra0ZEVUN4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGQkxGRkJRVUVzUlVGQlFUdFJRVU5GTEZkQlFWVXNhMEpCUVd0Q08xRkJRelZDTEU5QlFVODdWVUZEVEN4bFFVRkJPMU5CUTBFN1VVRkRSaXhUUVVGVExHZENRVUZCTzA5QlFXbENMR1ZCUlRGQ0xFMUJRVUVzVVVGQlFTeGpRVUZCTEVOQlFVRXNTMEZCUVN4RlFVRkJPMUZCUTBVc1YwRkJWU3gzUWtGQmQwSTdVVUZEYkVNc1pVRkJXU3hYUVVGWE8xRkJRM1pDTEV0QlFVc3NVVUZCVXp0UlFVTmtMRXRCUVVzc1YwRkJRVHRQUVVOT0xFTkJRMHNzUTBGQlF5eG5Ra0ZGVkN4TlFVRkJMRkZCUVVFc1kwRkJRU3hEUVVGRExHZENRVUZCTEZGQlFXVXNSVUZCUVR0UlFVTmtMRTFCUVUwc1NVRkJTenRSUVVOWUxGTkJRVk1zVDBGQlVUdFJRVU5xUWl4clFrRkJhMElzWjBKQlFVRTdUMEZEYmtJc1EwRkZReXhEUVVOSUxFTkJRVU1zUTBGQlFUdExRVVZVTEVOQlEwVXNRMEZCUXl4SFFVTktMRWxCUTBRc1EwRkJReXhEUVVGQk8wZEJSVlFzUTBGQlFUdEZRVVZFTEc5Q1FVTkZMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVUVzUzBGQlFTeEZRVUZCTzBsQlFVc3NWMEZCVlN4WlFVRkJPMGRCUVZrc1pVRkRla0lzVFVGQlFTeFJRVUZCTEdOQlFVRXNRMEZCUXl4SlFVRkJMRkZCUVVjc1JVRkJRVHRKUVVOR0xGbEJRVmtzUTBGQlJUdEpRVU5rTEdWQlFXVXNRMEZCUlR0SlFVTnFRaXhoUVVGaExFTkJRVVU3U1VGRFppeGpRVUZqTEVOQlFVVTdTVUZEYUVJc1pVRkJaU3hoUVVGQkxHVkJRV01zVDBGQlF6dEhRVUZQTEdWQlJYSkRMRTFCUVVFc1VVRkJRU3hqUVVGQkxFTkJRVUVzVFVGQlFTeFJRVUZCTEZOQlFVRXNSVUZCUVN4SlFVRkJMRVZCUTBjc1pVRkJaU3hKUVVGSkxFTkJRVVVzVDBGQlVUdEpRVU0xUWl4TlFVRk5PenM3TzB0QlFYbERMRWRCUVVjc1YwRkJWeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzBsQlJXeEZMRTlCUVU4c1owSkJRV2RDTEVOQlFVTTdUVUZEZEVJc1NVRkJTVHROUVVOS0xHTkJRV003VFVGRFpDeGxRVUZsTzAxQlEyWXNSMEZCUnp0TlFVTklMRFpDUVVFMlFpeExRVUZCTzB0QlF6bENMRU5CUVVNc1EwRkJRVHRIUVVOSUxFTkJRVU1zUlVGRFJDeG5Ra0ZCWjBJc1EwRkJRenRKUVVOb1FpeE5RVUZOTEhsQ1FVRjVRaXhMUVVGTE8wbEJRM0JETEdkQ1FVRm5RaXg1UWtGQmVVSXNaVUZCWlR0SlFVTjRSQ3hwUWtGQlpTeERRVUZCTEhkQ1FVRkZMSGxDUVVGNVFpeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVVFc1NVRkJRU3hKUVVGQkxIRkNRVUZCTEV0QlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFZEJRV3BETEhGQ1FVRkJMRTFCUVhkRE8wbEJRM3BFTERaQ1FVRTJRaXhKUVVGSk8wbEJRMnBETEV0QlFVc3NiMEpCUVVFN1IwRkRUaXhEUVVORUxFTkJRME1zUTBGRFJpeERRVUZETEVOQlFVRTdRMEZGVmp0QlFVVkJMRk5CUVZNc1ZVRkJWU3hIUVVGSE8wVkJRM0JDTERKQ1FVRXlRaXhWUVVGQkxGRkJRVk1zVFVGQlRTeERRVUZETzBsQlEzcERMRTFCUVUwc1ZVRkJRU3hSUVVGVExGRkJRVkVzUTBGRGNrSXNWVUZCUVN4UlFVRlRMRTFCUVUwc1EwRkJRenROUVVOa0xGTkJRVk1zVlVGQlFTeFJRVUZUTEU5QlFVOHNWMEZCVnp0TlFVTndReXhUUVVGVExGVkJRVUVzVVVGQlV5eFBRVUZQTEZkQlFWYzdUVUZEY0VNc1RVRkJUU3hWUVVGQkxGRkJRVk1zVDBGQlR6dE5RVU4wUWl4aFFVRmhMRlZCUVVFc1VVRkJVeXhQUVVGUE8wMUJRemRDTEU5QlFVOHNWVUZCUVN4UlFVRlRMRTlCUVU4N1RVRkRka0lzVlVGQlZTeFZRVUZCTEZGQlFWTXNUMEZCVHp0TlFVTXhRaXhuUWtGQlowSXNWVUZCUVN4UlFVRlRMRTlCUVU4N1RVRkRhRU1zWTBGQll5eFZRVUZCTEZGQlFWTXNUMEZCVHp0TlFVTTVRaXhUUVVGVExGVkJRVUVzVVVGQlV5eE5RVUZOTEVOQlFVTTdVVUZEZGtJc1UwRkJVeXhWUVVGQkxGRkJRVk1zVDBGQlR6dFJRVU42UWl4UlFVRlJMRlZCUVVFc1VVRkJVeXhQUVVGUE8xRkJRM2hDTEdsQ1FVRnBRaXhWUVVGQkxGRkJRVk1zVDBGQlF6dFBRVU0xUWl4RFFVRkJPMHRCUTBZc1EwRkRTQ3hEUVVGRE8wbEJRMFFzWjBKQlFXZENMRlZCUVVFc1VVRkJVeXhQUVVGUE8wbEJRMmhETEdsQ1FVRnBRaXhWUVVGQkxGRkJRVk1zVDBGQlF6dEhRVU0xUWl4RFFVRkRPMFZCUTBZc1lVRkJZU3hWUVVGQkxGRkJRVk1zVFVGQlRTeERRVUZETzBsQlF6TkNMRTFCUVUwc1ZVRkJRU3hSUVVGVExGRkJRVkVzUTBGRGNrSXNWVUZCUVN4UlFVRlRMRTFCUVUwc1EwRkJRenROUVVOa0xGTkJRVk1zVlVGQlFTeFJRVUZUTEU5QlFVOHNWMEZCVnp0TlFVTndReXhUUVVGVExGVkJRVUVzVVVGQlV5eFBRVUZQTEZkQlFWYzdUVUZEY0VNc1RVRkJUU3hWUVVGQkxGRkJRVk1zVDBGQlR6dE5RVU4wUWl4aFFVRmhMRlZCUVVFc1VVRkJVeXhQUVVGUE8wMUJRemRDTEU5QlFVOHNWVUZCUVN4UlFVRlRMRTlCUVU4N1RVRkRka0lzVlVGQlZTeFZRVUZCTEZGQlFWTXNUMEZCVHp0TlFVTXhRaXhuUWtGQlowSXNWVUZCUVN4UlFVRlRMRTlCUVU4N1RVRkRhRU1zWTBGQll5eFZRVUZCTEZGQlFWTXNUMEZCVHp0TlFVTTVRaXhUUVVGVExGVkJRVUVzVVVGQlV5eE5RVUZOTEVOQlFVTTdVVUZEZGtJc1UwRkJVeXhWUVVGQkxGRkJRVk1zVDBGQlR6dFJRVU42UWl4UlFVRlJMRlZCUVVFc1VVRkJVeXhQUVVGUE8xRkJRM2hDTEdsQ1FVRnBRaXhWUVVGQkxGRkJRVk1zVDBGQlF6dFBRVU0xUWl4RFFVRkJPMHRCUTBZc1EwRkRTQ3hEUVVGRE8wbEJRMFFzYVVKQlFXbENMRlZCUVVFc1VVRkJVeXhQUVVGUE8wbEJRMnBETEdkQ1FVRm5RaXhWUVVGQkxGRkJRVk1zVDBGQlF6dEhRVU16UWl4RFFVRkJPME5CUTBZc1EwRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU42VTBRc1NVRkJRU3hSUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUVhGRExGTkJRVUVzZFVKQlFVRXNSMEZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeEhRVUZCTEVkQlFVRXNTMEZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOQmNrTXNTVUZCUVN4TlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4WFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTlCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRmRCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRzlDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hoUVVGQkxFZEJRVUVzVDBGQlFUdEJRVk5CTEVsQlFVRXNaVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVVVGQlFTeEhRVUZCTEU5QlFVRTdRVUZKUVN4SlFVRkJMRzFDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWMEZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVUZyUlN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZGYmtRc1UwRkJVeXhQUVVGUExFTkJRVU03UlVGQlJUdEJRVUZUTEVOQlFVTXNSVUZCUlR0RlFVTTFReXhOUVVGTkxHVkJRV1VzUjBGQlJ5eEpRVUZCTEhWQ1FVRlhMRVZCUVVNc05rSkJRV3RDTEVOQlFVTTdSVUZEZGtRc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlFTeDFRa0ZCVnl4RlFVRkRMSFZDUVVGWkxFTkJRVU03UlVGRE0wTXNUVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJRU3d3UWtGQlZTeEZRVUZETEVOQlFVTTdSVUZETlVJc1RVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlFTdzRRa0ZCWXl4RlFVRkRMRU5CUVVNN1JVRkRNVUlzVFVGQlRTeFJRVUZSTEVkQlFVY3NTVUZCUVN4MVFrRkJWeXhGUVVGRExFTkJRVU03UlVGRk9VSXNUVUZCVFR0SlFVRkZMRmRCUVZjN1NVRkJSU3hYUVVGWE8wbEJRVVU3UlVGQk1FSXNRMEZCUXl4SFFVTXpSQ3hKUVVGQkxITkRRVUZyUWl4RlFVRkRMRU5CUVVNN1JVRkZkRUlzVFVGQlRTeHJRa0ZCYTBJc1IwRkJSeXhEUVVGQkxFdEJRVTA3U1VGREwwSXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXd3UWtGQmEwSXNRMEZCUXp0RlFVTnNReXhEUVVGRE8wVkJSVVFzVFVGQlRTeFRRVUZUTEVkQlFVY3NRMEZCUVN4TFFVRk5PMGxCUTNSQ0xFbEJRVWtzVTBGQlV5eEZRVUZGTzAxQlEySXNVVUZCVVN4RFFVRkRMRWxCUVVFc2JVSkJRVlVzUlVGQlF5eERRVUZETEVOQlFVTTdTVUZEZUVJN1NVRkRRU3hKUVVGQkxEWkRRVUZ2UXl4RlFVRkRMRU5CUVVNN1JVRkRlRU1zUTBGQlF6dEZRVVZFTEVsQlFVa3NWMEZCVnl4RlFVRkZPMGxCUTJZc2IwSkJRVThzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMDFCUVVzc1UwRkJVeXhGUVVGRE8wbEJRVzFDTEVkQlFVVXNRMEZCUXl4RFFVRkRMR0ZCUVdFc1EwRkJUeXhEUVVGRE8wVkJRM0JGTzBWQlJVRXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNTVUZCUVN4RFFVRkJMRTlCUVVjN1NVRkJReXhUUVVGVExFVkJRVU03UlVGQlZTeEhRVU4wUWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRWxCUTNCRExIbENRVUY1UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eG5Ra0ZEZGtNc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNWVUZCUVN4RFFVRkJMRTlCUVZNN1NVRkRVaXhYUVVGWExFVkJRVVVzVjBGQldUdEpRVU42UWl4NVFrRkJlVUlzUlVGQlJUdEZRVUV3UWl4RFFVTjBSQ3hEUVVGRExHZENRVVZHTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGQkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNVVUZCUVN4UlFVTkhMRk5CUVZNc1NVRkJTU3hEUVVGRExHVkJRV1VzWjBKQlFVY3NUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYjBKQlFVRXNRMEZCUVN4UFFVRnRRaXhOUVVGRkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEdWQlF5OUVMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEVsQlFVRXNRMEZCUVN4UFFVRkhPMGxCUVVNc1QwRkJUeXhGUVVGRk8wVkJRVWNzWjBKQlEyWXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zU1VGQlFTeERRVUZCTEU5QlFVYzdTVUZCUXl4alFVRmpMRVZCUVVVc05FSkJRV01zUTBGQlF6dEZRVUZQTEdkQ1FVTjZReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdTVUZCU3l4SFFVRkhMRVZCUVVNN1JVRkJjMElzUTBGQlJTeERRVU01UWl4RFFVRkRMR1ZCUTA0c1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNTVUZCUVN4RFFVRkJMRTlCUVVjN1NVRkRSaXhUUVVGVExFVkJRVVVzUTBGQlJUdEpRVU5pTEZsQlFWa3NSVUZCUlN4RlFVRkhPMGxCUTJwQ0xHTkJRV01zUlVGQlJTdzBRa0ZCWXl4RFFVRkRMRTFCUVU4N1NVRkRkRU1zWVVGQllTeEZRVUZGTERSQ1FVRmpMRU5CUVVNc1RVRkJUenRKUVVOeVF5eFRRVUZUTEVWQlFVTTdSVUZCWjBJc1owSkJSVEZDTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExGZEJRVUVzUTBGQlFTeFBRVUZWTzBsQlExUXNTMEZCU3l4RlFVRkZMSFZDUVVGVExFTkJRVU1zVTBGQlZUdEpRVU16UWl4UFFVRlBMRVZCUVVVc0swSkJRV2xDTEVOQlFVTXNSVUZCUnp0SlFVTTVRaXhMUVVGTExFVkJRVVVzZDBKQlFWVXNRMEZCUXl4TlFVRlBPMGxCUTNwQ0xGVkJRVlVzUlVGQlJTeDVRa0ZCVnl4RFFVRkRPMFZCUVVzc1IwRkZOVUlzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZEUkN4RFFVRkRMR1ZCUTJJc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNUMEZCUVN4RFFVRkJMRTlCUVUwN1NVRkRUQ3hKUVVGSkxFVkJRVU1zVFVGQlRUdEpRVU5ZTEUxQlFVMHNSVUZCUXl4UlFVRlJPMGxCUTJZc1IwRkJSeXhGUVVGRExIRkNRVUZ4UWp0SlFVTjZRaXhKUVVGSkxFVkJRVVVzYlVKQlFWa3NRMEZCUXp0RlFVRlhMRWRCUlRkQ0xFTkJRVU1zUTBGQlF5eHZRa0ZCYjBJc1EwRkRha0lzUTBGRFRDeERRVU5HTEVOQlEwd3NRMEZEU0N4bFFVTkVMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEVsQlFVRXNRMEZCUVN4UFFVRkhPMGxCUTBZc1dVRkJXU3hGUVVGRkxFTkJRVVU3U1VGRGFFSXNZMEZCWXl4RlFVRkZMRFJDUVVGakxFTkJRVU1zVFVGQlR6dEpRVU4wUXl4aFFVRmhMRVZCUVVVc05FSkJRV01zUTBGQlF6dEZRVUZQTEdkQ1FVVnlReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4WFFVRkJMRU5CUVVFc1QwRkJWVHRKUVVOVUxFdEJRVXNzUlVGQlJTeDFRa0ZCVXl4RFFVRkRMRk5CUVZVN1NVRkRNMElzVDBGQlR5eEZRVUZGTEN0Q1FVRnBRaXhEUVVGRExFVkJRVWM3U1VGRE9VSXNTMEZCU3l4RlFVRkZMSGRDUVVGVkxFTkJRVU03UlVGQlR5eEhRVVY0UWl4RFFVRkRMRU5CUVVNc1dVRkJXU3hEUVVOTUxFTkJRVU1zWlVGRFlpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhKUVVGQkxFTkJRVUVzVDBGQlJ6dEpRVU5HTEZWQlFWVXNSVUZCUlN4M1FrRkJWU3hEUVVGRExFMUJRVTg3U1VGRE9VSXNZMEZCWXl4RlFVRkZMRFJDUVVGakxFTkJRVU03UlVGQlR5eEhRVVZ5UXl4RFFVRkRMRk5CUVZNc1NVRkJTU3hOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFZEJRVWNzU1VGQlNTeG5Ra0ZEZGtRc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVRXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hSUVVGQkxIRkNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExFbEJRVUVzUTBGQlFTeFBRVUZITzBsQlEwWXNVMEZCVXl4RlFVRkRMR2RDUVVGblFqdEpRVU14UWl4alFVRmpMRVZCUVVVc05FSkJRV01zUTBGQlF6dEZRVUZSTEVkQlJYUkRMRk5CUVZNc1NVRkJTU3hEUVVGRExHVkJRV1VzWjBKQlF6VkNMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEU5QlFVRXNRMEZCUVN4UFFVRk5PMGxCUVVNc1NVRkJTU3hGUVVGRExFMUJRVTA3U1VGQlF5eFBRVUZQTEVWQlFVVTdSVUZCYlVJc1IwRkROME1zUTBGQlF5eERRVUZETEd0Q1FVRnJRaXhEUVVObUxFTkJRVU1zWjBKQlJWUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVDBGQlFTeERRVUZCTEU5QlFVMDdTVUZCUXl4SlFVRkpMRVZCUVVNc1RVRkJUVHRKUVVGRExFOUJRVThzUlVGQlJUdEZRVUZWTEVkQlEzQkRMRU5CUVVNc1EwRkJReXhoUVVGaExFTkJRMVlzUTBGRlVDeERRVUZETEdWQlEwNHNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVjBGQlFTeERRVUZCTEU5QlFWVTdTVUZEVkN4TFFVRkxMRVZCUVVVc2RVSkJRVk1zUTBGQlF5eFRRVUZWTzBsQlF6TkNMRTlCUVU4c1JVRkJSU3dyUWtGQmFVSXNRMEZCUXl4RlFVRkhPMGxCUXpsQ0xFdEJRVXNzUlVGQlJTeDNRa0ZCVlN4RFFVRkRPMFZCUVU4c1IwRkZlRUlzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZEUnl4RFFVTmFMRU5CUTBnc1pVRkRSQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4SlFVRkJMRU5CUVVFc1QwRkJSenRKUVVOR0xHTkJRV01zUlVGQlJTdzBRa0ZCWXl4RFFVRkRMRk5CUVZVN1NVRkRla01zVTBGQlV5eEZRVUZETzBWQlFXZENMR2RDUVVVeFFpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhQUVVGQkxFTkJRVUVzVDBGQlRUdEpRVUZETEVsQlFVa3NSVUZCUXl4TlFVRk5PMGxCUVVNc1QwRkJUeXhGUVVGRk8wVkJRVk1zUjBGRGJrTXNRMEZCUXl4RFFVRkRMRmxCUVZrc1EwRkRWQ3hEUVVOTUxFTkJRMFlzUTBGRFJpeERRVU5HTEVOQlFVTTdRVUZGVmp0QlFVVkJMRTlCUVU4c1EwRkJReXhUUVVGVExFZEJRVWM3UlVGRGJFSXNVVUZCVVN4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlF6TkNMRU5CUVVNN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU40U2tRc1NVRkJRU3gzUWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzSzBKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQlowY3NVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEUkdoSExFbEJRVUVzSzBKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQmQwVXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEwRjRSU3hKUVVGQkxGVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFMUJRVUVzUjBGQlFTeDFRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxIbENRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFJRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeHBRMEZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVUY1Uml4VFFVRkJMSGxDUVVGQkxGZEJRVUVzWlVGQlFTeFBRVUZCTEd0RFFVRkJMR2xDUVVGQkxFOUJRVUVzVDBGQlFTeFJRVUZCTEdkQ1FVRkJMRTlCUVVFc1QwRkJRU3haUVVGQkxIZENRVUZCTEZsQlFVRXNRMEZCUVN4WFFVRkJMRmRCUVVFc1YwRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNhVUpCUVVFc1MwRkJRU3hYUVVGQk8wRkJRVUVzVTBGQlFTeDNRa0ZCUVN4SFFVRkJMRVZCUVVFc1YwRkJRU3hUUVVGQkxGZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1YwRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHZRa0ZCUVN4SFFVRkJMSGRDUVVGQkxFZEJRVUVzTkVKQlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFc1ZVRkJRU3hMUVVGQkxFZEJRVUVzZDBKQlFVRXNRMEZCUVN4WFFVRkJMRTlCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4WlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFRRVUZCTEUxQlFVRXNWMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMR3RDUVVGQkxFMUJRVUVzUTBGQlFTeFRRVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeFRRVUZCTEVsQlFVRXNSMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxHTkJRVUVzU1VGQlFTeExRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRTFCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzU1VGQlFTeFpRVUZCTEUxQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRWRCUVVFc1RVRkJRU3hMUVVGQkxFbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1RVRkJRU3haUVVGQkxFMUJRVUU3UVVGQlFTeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEdkQ1FVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzUzBGQlFTeEpRVUZCTEVkQlFVRXNSMEZCUVN4alFVRkJMRU5CUVVFc1IwRkJRU3hQUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeEpRVUZCTEV0QlFVRXNSVUZCUVN4TFFVRkJMRVZCUVVFc1ZVRkJRU3hSUVVGQkxGbEJRVUVzVVVGQlFTeFJRVUZCTEc5Q1FVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUzBGQlFTeFhRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMR1ZCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzUjBGQlFTeFpRVUZCTEVOQlFVRXNSMEZCUVN3eVFrRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRVHRCUVVGQkxGTkJRVUVzWVVGQlFTeExRVUZCTEVWQlFVRXNTVUZCUVN4bFFVRkJMRXRCUVVFc2FVSkJRVUVzUzBGQlFTeHJRa0ZCUVN4TFFVRkJMRTFCUVVFc1NVRkJRU3hIUVVGQkxFdEJRVUVzUTBGQlFTeE5RVUZCTEVOQlFVRXNWMEZCUVN4UFFVRkJMRWxCUVVFc1MwRkJRU3hUUVVGQkxGRkJRVUVzUjBGQlFTeEhRVUZCTEVsQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1MwRkJRU3hGUVVGQkxFbEJRVUVzTWtKQlFVRXNSMEZCUVN4elFrRkJRU3hIUVVGQkxGbEJRVUVzVTBGQlFTdzBSRUZCUVN4SlFVRkJMR2RDUVVGQkxFMUJRVUVzUjBGQlFTeE5RVUZCTEVWQlFVRXNTMEZCUVR0QlFVVXhSU3hOUVVGTkxEaENRVUU0UWl4VFFVRlRMRzlDUVVGaExFTkJRVU03UlVGMVFuaEZMREJDUVVFd1FpeERRVUZCTEVWQlFVYzdTVUZETTBJc1RVRkJUVHROUVVGRkxHMUNRVUZ0UWp0TlFVRkZPMGxCUVdkQ0xFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3p0SlFVVXpSQ3h2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1RVRkJTeXhUUVVGVExFVkJRVU03U1VGQmJVUXNaMEpCUTJoRkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xEUVVGQkxFTkJRVUVzVDBGQlowTTdUVUZETDBJc1YwRkJWeXhGUVVGRkxHMUNRVUZ2UWp0TlFVTnFReXh4UWtGQmNVSXNSVUZCUlR0SlFVRm5RaXhEUVVONFF5eERRVU5GTEVOQlFVTTdSVUZGVmp0RlFVVkJMRzlDUVVGdlFpeERRVUZETEZkQlFWY3NSVUZCUlR0SlFVTm9ReXhOUVVGTk8wMUJRVVU3U1VGQmJVSXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTE8wbEJRM3BETEUxQlFVMDdUVUZCUlR0SlFVRkZMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR6dEpRVVV4UWl4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4UlFVRkJMRU5CUVVFc1QwRkJUenROUVVOT0xFZEJRVWNzUlVGQlF5dzJRa0ZCTmtJN1RVRkRha01zVVVGQlVTeEZRVUZETEZGQlFWRTdUVUZEYWtJc1owSkJRV2RDTEVWQlFVTXNiMFJCUVc5RU8wMUJRM0pGTEVsQlFVa3NaVUZEUml4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VVVGQlN5eExRVUZMTEVWQlFVVTdWVUZCUlN4UFFVRlBMRVZCUVVVc1RVRkJUVHRWUVVGRkxHRkJRV0VzUlVGQlJUdFJRVUZUTzAxQlFVVXNSMEZEZEVRc2EwSkJRV3RDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1MwRkJTeXhMUVVGTE8xRkJRM1pFTEc5Q1FVTkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdFZRVUZMTEVkQlFVY3NSVUZCUnl4dlFrRkJiVUlzUzBGQlRUdFJRVUZGTEVkQlEyNURMRkZCUVZFc1EwRkJReXhaUVVOUUxFTkJRVU03VFVGRlZpeERRVUZETEVOQlFVTXNSVUZEUkN4clFrRkJhMElzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4SFFVTXhRaXhEUVVGRExFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUXk5RExFbEJRMFE3U1VGRFRpeEhRVVZCTEZkQlEwMHNRMEZCUXp0RlFVVmtPMFZCUlVFc1VVRkJVU3hEUVVGQkxFVkJRVWM3U1VGQlFTeEpRVUZCTEc5Q1FVRkJPMGxCUTFRc1RVRkJUVHROUVVOS0xHVkJRV1U3VFVGRFppeHJRa0ZCYTBJN1RVRkRiRUlzY1VKQlFYRkNPMDFCUTNKQ08wbEJRMFlzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxPMGxCUTJRc1RVRkJUVHROUVVGRk8wbEJRVVVzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBPMGxCUlRGQ0xFbEJRVWtzWlVGQlpTeERRVUZETEZkQlFWY3NSVUZCUlR0TlFVTXZRaXhQUVVGUExFTkJRVU1zUTBGQlF5eHRRa0ZCYlVJc1JVRkJSU3hEUVVGRExHVkJRV1VzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0SlFVTTVSQ3hEUVVGRExFMUJRVTBzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExGbEJRVmtzUlVGQlJUdE5RVU0xUXl4UFFVRlBMRU5CUVVNc1EwRkJReXc0UWtGQk9FSXNRMEZCUXp0SlFVTXhReXhEUVVGRExFMUJRVTBzU1VGQlNTeHhRa0ZCY1VJc1JVRkJSVHROUVVOb1F5eFBRVUZQTEVOQlFVTXNRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkRka0lzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFTkJRVU1zUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXhEUVVGRExFTkJRM0pFTEVOQlFVTTdTVUZEU2l4RFFVRkRMRTFCUVUwc1NVRkJTU3hyUWtGQmEwSXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhGUVVGRk8wMUJRM2hETEU5QlFVOHNRMEZCUXl4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTEVOQlF6VkNMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZEZGtJc1EwRkJReXhEUVVGRExHMURRVUZ0UXl4RlFVRkZMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUTNCRkxFTkJRVU1zUTBGRFJpeERRVUZETzBsQlEwbzdTVUZEUVN4UFFVRlBMRU5CUVVNc1EwRkJReXhYUVVGWExFVkJRVVVzUlVGQlFTeHZRa0ZCUVN4SFFVRkRMR3RDUVVGclFpeERRVUZETEVOQlFVTXNRMEZCUXl4alFVRkJMRzlDUVVGQkxIVkNRVUZ5UWl4dlFrRkJRU3hEUVVGMVFpeFpRVUZaTEVOQlFVTXNRMEZCUXp0RlFVTTVSRHRGUVVWQkxFMUJRVTBzUTBGQlFTeEZRVUZITzBsQlExQXNUVUZCVFR0TlFVRkZPMGxCUVdkQ0xFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3p0SlFVTjBReXhOUVVGTk8wMUJRVVU3U1VGQlJTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4N1NVRkZNVUlzVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJSVGRDTEc5Q1FVTkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZMTEZOQlFWTXNSVUZCUXp0SlFVRjNReXhuUWtGRGNrUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFXdEVMR2RDUVVNdlJDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXg1UWtGQlFTeERRVUZCTEU5QlFYZENPMDFCUTNaQ0xFOUJRVThzUlVGQlJTeGxRVUZsTEVOQlFVTXNUMEZCVVR0TlFVTnFReXhSUVVGUkxFVkJRVVVzWlVGQlpTeERRVUZETEVsQlFVczdUVUZETDBJc1YwRkJWeXhGUVVGRkxFdEJRVTA3VFVGRGJrSXNWVUZCVlN4RlFVTlNMR1ZCUVdVc1EwRkJReXhYUVVGWExFZEJRM1pDTEVOQlFVTXNRMEZCUXl3d1FrRkJNRUlzUlVGQlJTeERRVUZETEdWQlFXVXNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhIUVVNMVJDeERRVUZETEVOQlFVTXNhVUpCUVdsQ0xFTkJRM2hDTzAxQlEwUXNWVUZCVlN4RlFVRkZMR1ZCUVdVc1EwRkJRenRKUVVGUExFTkJRM0JETEVOQlFVTXNaVUZEUml4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlV5eFRRVUZUTEVWQlFVTTdTVUZCYzBRc1IwRkRkRVVzU1VGQlNTeERRVUZETERCQ1FVRXdRaXhEUVVGRExFTkJRekZDTEVOQlEwNHNRMEZEUml4RFFVRkRPMFZCUlZZN1FVRkRSanRCUVVGRExFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNPRUpCUVVFN1FVRkJRU3hsUVVGQkxFTkJka2h2UWl3NFFrRkJPRUlzWlVGRE9VSTdSVUZEYWtJc1pVRkJaU3hGUVVGRkxHdENRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRPMGxCUXk5Q0xFbEJRVWtzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVk8wbEJRMnBETEUxQlFVMHNSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZWTzBsQlEyNURMRmRCUVZjc1JVRkJSU3hyUWtGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRlZPMGxCUTNoRExGZEJRVmNzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwN1NVRkROMElzVDBGQlR5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNN1JVRkRja0lzUTBGQlF5eERRVUZETzBWQlEwWXNiVUpCUVcxQ0xFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWVHRGUVVOb1JDeHJRa0ZCYTBJc1JVRkJSU3hyUWtGQlV5eERRVUZETEV0QlFVczdSVUZEYmtNc2NVSkJRWEZDTEVWQlFVVXNhMEpCUVZNc1EwRkJRenRCUVVOdVF5eERRVUZETzBGQlFVRXNaVUZCUVN4RFFWcHJRaXc0UWtGQk9FSXNhMEpCWXpOQ08wVkJRM0JDTEd0Q1FVRnJRaXhGUVVGRkxFVkJRVVU3UlVGRGRFSXNjVUpCUVhGQ0xFVkJRVVU3UVVGRGVrSXNRMEZCUXp0QlFVRkJMR1ZCUVVFc1EwRnFRbXRDTERoQ1FVRTRRaXhyUWtGdFFqTkNPMFZCUTNCQ0xFTkJRVU1zUlVGQlJTeHJRa0ZCVXl4RFFVRkRPMEZCUTJZc1EwRkJRenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVNelFrZ3NTVUZCUVN4VlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4TlFVRkJMRWRCUVVFc2RVSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzV1VGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR05CUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeDVRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNRMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkJiVVFzVTBGQlFTeDVRa0ZCUVN4WFFVRkJMR1ZCUVVFc1QwRkJRU3hyUTBGQlFTeHBRa0ZCUVN4UFFVRkJMRTlCUVVFc1VVRkJRU3huUWtGQlFTeFBRVUZCTEU5QlFVRXNXVUZCUVN4M1FrRkJRU3haUVVGQkxFTkJRVUVzVjBGQlFTeFhRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEV0QlFVRXNWMEZCUVR0QlFVRkJMRk5CUVVFc2QwSkJRVUVzUjBGQlFTeEZRVUZCTEZkQlFVRXNVMEZCUVN4WFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEZkQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2IwSkJRVUVzUjBGQlFTeDNRa0ZCUVN4SFFVRkJMRFJDUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTEZWQlFVRXNTMEZCUVN4SFFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzV1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxGZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHJRa0ZCUVN4TlFVRkJMRU5CUVVFc1UwRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1UwRkJRU3hKUVVGQkxFZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4alFVRkJMRWxCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRWxCUVVFc1dVRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEUxQlFVRXNXVUZCUVN4TlFVRkJPMEZCUVVFc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPMEZCUVVFc1UwRkJRU3huUWtGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRXRCUVVFc1NVRkJRU3hIUVVGQkxFZEJRVUVzWTBGQlFTeERRVUZCTEVkQlFVRXNUMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1NVRkJRU3hMUVVGQkxFVkJRVUVzUzBGQlFTeEZRVUZCTEZWQlFVRXNVVUZCUVN4WlFVRkJMRkZCUVVFc1VVRkJRU3h2UWtGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRXRCUVVFc1YwRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeGxRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMRWRCUVVFc1dVRkJRU3hEUVVGQkxFZEJRVUVzTWtKQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMR0ZCUVVFc1MwRkJRU3hGUVVGQkxFbEJRVUVzWlVGQlFTeExRVUZCTEdsQ1FVRkJMRXRCUVVFc2EwSkJRVUVzUzBGQlFTeE5RVUZCTEVsQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1RVRkJRU3hEUVVGQkxGZEJRVUVzVDBGQlFTeEpRVUZCTEV0QlFVRXNVMEZCUVN4UlFVRkJMRWRCUVVFc1IwRkJRU3hKUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZCTEV0QlFVRXNSVUZCUVN4SlFVRkJMREpDUVVGQkxFZEJRVUVzYzBKQlFVRXNSMEZCUVN4WlFVRkJMRk5CUVVFc05FUkJRVUVzU1VGQlFTeG5Ra0ZCUVN4TlFVRkJMRWRCUVVFc1RVRkJRU3hGUVVGQkxFdEJRVUU3UVVGRmNFTXNUVUZCVFN4MVFrRkJkVUlzVTBGQlV5eG5Ra0ZCVXl4RFFVRkRPMFZCUVVFc1dVRkJRU3hIUVVGQkxFbEJRVUU3U1VGQlFTeFRRVUZCTEVsQlFVRTdTVUZCUVN4bFFVRkJMR2RDUVRaQ2NrUTdUVUZEVGl4dFFrRkJiVUlzUlVGQlJTeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJReTlETEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVTjZRenRKUVVOR0xFTkJRVU03U1VGQlFTeGxRVUZCTEcxQ1FXOURWU3hOUVVGTk8wMUJRMllzVFVGQlRUdFJRVUZGTEU5QlFVODdVVUZCUlR0TlFVRjVRaXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVczdUVUZEZUVRc2QwSkJRWGRDTEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRkxFTkJRVU03U1VGREwwTXNRMEZCUXp0SlFVRkJMR1ZCUVVFc2JVSkJSVlVzVFVGQlRUdE5RVU5tTEUxQlFVMDdVVUZEU2l4UFFVRlBMRVZCUVVVc1VVRkJVVHRSUVVOcVFpeDVRa0ZCZVVJN1VVRkRla0lzZDBKQlFYZENPMUZCUTNoQ08wMUJRMFlzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxPMDFCUldRc1RVRkJUU3hQUVVGUExFZEJRVWM3VVVGRFpDeEhRVUZITEZGQlFWRTdVVUZEV0N4WFFVRlhMRVZCUVVVN1ZVRkJSU3hIUVVGSExGRkJRVkVzUTBGQlF6dFJRVUZaTEVOQlFVTTdVVUZEZUVNc1owSkJRV2RDTEVWQlFVVXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVU55UXl4blFrRkJaMElzU1VGQlN5eG5Ra0ZCWjBJc1EwRkJReXhQUVVONlF6dE5RVU5HTEVOQlFVTTdUVUZGUkN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVVXNSMEZCUnl4SlFVRkxPMUZCUXpORUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZPMVZCUTNoRExFOUJRVThzVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUXl4SFFVRkhMRU5CUVVNN1VVRkRha003VFVGRFJpeERRVUZETEVOQlFVTTdUVUZGUml4SlFVRkpMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFVkJRVVU3VVVGREwwTXNlVUpCUVhsQ0xFTkJRVU1zVDBGQlR5eERRVUZETzAxQlEzQkRMRU5CUVVNc1RVRkJUVHRSUVVOTUxIZENRVUYzUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQlJTeERRVUZETzAxQlF5OURPMGxCUTBZc1EwRkJRenRGUVVGQk8wVkJiRVZFTEd0Q1FVRnJRaXhEUVVGQkxFVkJRVWM3U1VGRGJrSXNUVUZCVFN4alFVRmpMRWRCUVVjc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU03U1VGRkwwUXNTVUZCU1N4RFFVRkRMRWxCUVVFc1pVRkJUeXhGUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RlFVRkZMR05CUVdNc1EwRkJReXhGUVVGRk8wMUJRM3BGTzAxQlEwRXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJRenRSUVVOYUxHMUNRVUZ0UWl4RlFVRkZMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4alFVRmpPMDFCUTJ4RkxFTkJRVU1zUTBGQlF6dEpRVU5LTzBWQlEwWTdSVUZGUVN4MVFrRkJkVUlzUTBGQlF5eFhRVUZYTEVWQlFVVTdTVUZEYmtNc1QwRkJUeXhYUVVGWExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRlZCUVZVc1MwRkJTenROUVVNM1F5eEhRVUZITEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1NVRkJTVHROUVVOMFFpeFBRVUZQTEVkQlFVYzdTVUZEV2l4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRFVqdEZRVWRCTEhWQ1FVRjFRaXhEUVVGRExFdEJRVXNzUlVGQlJUdEpRVU0zUWl4UFFVRlBMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRGNrUTdSVUZGUVN4cFFrRkJhVUlzUTBGQlFTeEZRVUZITzBsQlEyeENMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZTeERRVUZETzAxQlEzUkNMRkZCUVZFc1JVRkJSU3h4UTBGQmQwSXNRMEZCUXl4SlFVRkpPMDFCUTNaRExFdEJRVXNzUlVGQlJTeFpRVUZaTzAxQlEyNUNMRlZCUVZVc1JVRkJSVHRSUVVOV0xFMUJRVTBzUlVGQlJTeFRRVUZUTzFGQlEycENMRmxCUVZrc1JVRkJSVHROUVVOb1FqdEpRVU5HTEVOQlFVTXNRMEZCUXp0RlFVTktPMFZCYjBOQkxFMUJRVTBzUTBGQlFTeEZRVUZITzBsQlExQXNUVUZCVFR0TlFVTktMR1ZCUVdVN1RVRkRaaXh4UWtGQmNVSTdUVUZEY2tJc2EwSkJRV3RDTzAxQlEyeENPMGxCUTBZc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTzBsQlJXUXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlFVc3NVMEZCVXl4RlFVRkRPMGxCUVRoRExHZENRVU16UkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eERRVUZCTEVOQlFVRXNPRUpCUVRoQ08wMUJRemRDTEdWQlFXVXNSVUZCUlN4bFFVRm5RanROUVVOcVF5eGxRVUZsTEVWQlFVVXNjVUpCUVhOQ08wMUJRM1pETEcxQ1FVRnRRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNiVUpCUVc5Q08wMUJRM0JFTEd0Q1FVRnJRaXhGUVVGRkxHdENRVUZ0UWp0TlFVTjJReXh4UWtGQmNVSXNSVUZCUlR0SlFVRnpRaXhEUVVNNVF5eERRVUZETEdWQlEwWXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFYZERMR2RDUVVOeVJDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXg1UWtGQlFTeERRVUZCTEU5QlFYZENMRTFCUVVVc1EwRkJReXhsUVVNMVFpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhqUVVGQkxFTkJRVUVzYlVKQlFXMUNPMDFCUTJ4Q0xHZENRVUZuUWl4RlFVRkRMRk5CUVZNN1RVRkRNVUlzVVVGQlVTeEZRVUZGTEVOQlFVRXNTMEZCVFN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVVU3VFVGRGFFTXNWVUZCVlN4RlFVRkZMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUlR0TlFVTnlReXhSUVVGUkxFVkJRVVVzUTBGQlFTeExRVUZOTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJSVHROUVVOb1F5eFZRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zVTBGQlV5eERRVUZGTzAxQlEzUkRMR1ZCUVdVc1JVRkJSVHRKUVVGTkxFTkJRM2hDTEVOQlEwVXNRMEZEUml4RFFVRkRPMFZCUlZZN1FVRkRSanRCUVVGRExFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNkVUpCUVVFN1FVRkJRU3hsUVVGQkxFTkJkRWx2UWl4MVFrRkJkVUlzWlVGRGRrSTdSVUZEYWtJc2VVSkJRWGxDTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZUdEZRVU53UkN4M1FrRkJkMElzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVk8wVkJRMjVFTEd0Q1FVRnJRaXhGUVVGRkxHdENRVUZUTEVOQlFVTXNTMEZCU3p0RlFVTnVReXh4UWtGQmNVSXNSVUZCUlN4clFrRkJVeXhEUVVGRExFbEJRVWs3UlVGRGNrTXNUMEZCVHl4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRUdEZRVU42UWl4bFFVRmxMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTzBWQlEycERMSEZDUVVGeFFpeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRE8wbEJRM0pETEVsQlFVa3NSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTA3U1VGRGRFSXNUVUZCVFN4RlFVRkZMR3RDUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEZWQlFWVTdTVUZEYmtNc1YwRkJWeXhGUVVGRkxHdENRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVZVN1NVRkRlRU1zVjBGQlZ5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRKUVVNM1FpeFBRVUZQTEVWQlFVVXNhMEpCUVZNc1EwRkJRenRGUVVOeVFpeERRVUZETzBGQlEwZ3NRMEZCUXp0QlFVRkJMR1ZCUVVFc1EwRm1hMElzZFVKQlFYVkNMR3RDUVdsQ2NFSTdSVUZEY0VJc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF6dEZRVU5ZTEdWQlFXVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1JVRkRia0lzYTBKQlFXdENMRVZCUVVVc1JVRkJSVHRGUVVOMFFpeHhRa0ZCY1VJc1JVRkJSVHRCUVVONlFpeERRVUZETzBGQlFVRXNaVUZCUVN4RFFYUkNhMElzZFVKQlFYVkNMR3RDUVhkQ2NFSTdSVUZEY0VJc1EwRkJReXhGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1R0RlFVTnFRaXhWUVVGVkxFVkJRVVVzYTBKQlFWTXNRMEZCUXp0QlFVTjRRaXhEUVVGRE96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMjVEU0N4SlFVRkJMRmRCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFZRVUZCTEVkQlFVRXNUMEZCUVR0QlFVZEJMRWxCUVVFc2QwSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJORVVzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJSVFZGTEUxQlFVMHNaVUZCWlN4SFFVRkhMRU5CUVVNc1MwRkJTeXhGUVVGRkxGRkJRVkVzUzBGQlN6dEZRVU16UXl4TlFVRk5PMGxCUVVVN1JVRkJiVUlzUTBGQlF5eEhRVUZITEZGQlFWRTdSVUZEZGtNc1RVRkJUU3hoUVVGaExFZEJRVWNzU1VGQlFTeG5RMEZCY1VJc1JVRkJReXhMUVVGTExFTkJRVU03UlVGRGJFUXNUVUZCVFN4eFFrRkJjVUlzUjBGRGVrSXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkRMRTFCUVUwc1MwRkRjRU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJReXhOUVVGTkxFbEJRVWtzYTBKQlFXdENMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU03UlVGRmRFVXNUMEZCVHp0SlFVTk1PMFZCUTBZc1EwRkJRenRCUVVOSUxFTkJRVU03UVVGQlF5eEpRVUZCTEZGQlFVRXNSMEZGWVN4SlFVRkJMRzFDUVVGUExFVkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTXNaME5CUVhWQ0xFTkJRVU03UVVGQlFTeFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRkZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOc1FtaEZMRWxCUVVFc2VVSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJhVVVzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMEZxUlN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTFCUVVFc1IwRkJRU3gxUWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRmRCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZCYTBVc1UwRkJRU3g1UWtGQlFTeFhRVUZCTEdWQlFVRXNUMEZCUVN4clEwRkJRU3hwUWtGQlFTeFBRVUZCTEU5QlFVRXNVVUZCUVN4blFrRkJRU3hQUVVGQkxFOUJRVUVzV1VGQlFTeDNRa0ZCUVN4WlFVRkJMRU5CUVVFc1YwRkJRU3hYUVVGQkxGZEJRVUVzUjBGQlFTeG5Ra0ZCUVN4SFFVRkJMR2xDUVVGQkxFdEJRVUVzVjBGQlFUdEJRVUZCTEZOQlFVRXNkMEpCUVVFc1IwRkJRU3hGUVVGQkxGZEJRVUVzVTBGQlFTeFhRVUZCTEVsQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxGZEJRVUVzUjBGQlFTeFJRVUZCTEVkQlFVRXNiMEpCUVVFc1IwRkJRU3gzUWtGQlFTeEhRVUZCTERSQ1FVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQkxGVkJRVUVzUzBGQlFTeEhRVUZCTEhkQ1FVRkJMRU5CUVVFc1YwRkJRU3hQUVVGQkxFdEJRVUVzU1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1dVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNVMEZCUVN4TlFVRkJMRmRCUVVFc2NVSkJRVUVzUjBGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4SlFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3hyUWtGQlFTeE5RVUZCTEVOQlFVRXNVMEZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNVMEZCUVN4SlFVRkJMRWRCUVVFc2NVSkJRVUVzUjBGQlFTeE5RVUZCTEVOQlFVRXNkMEpCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeGpRVUZCTEVsQlFVRXNTMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hOUVVGQkxFVkJRVUVzUjBGQlFTeEZRVUZCTEVsQlFVRXNXVUZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEZOQlFVRXNUVUZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hIUVVGQkxFMUJRVUVzUzBGQlFTeEpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFMUJRVUVzV1VGQlFTeE5RVUZCTzBGQlFVRXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlFVRXNVMEZCUVN4blFrRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeEZRVUZCTEV0QlFVRXNTVUZCUVN4SFFVRkJMRWRCUVVFc1kwRkJRU3hEUVVGQkxFZEJRVUVzVDBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4SlFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNTVUZCUVN4TFFVRkJMRVZCUVVFc1MwRkJRU3hGUVVGQkxGVkJRVUVzVVVGQlFTeFpRVUZCTEZGQlFVRXNVVUZCUVN4dlFrRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEV0QlFVRXNWMEZCUVN4SFFVRkJPMEZCUVVFc1UwRkJRU3hsUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEVkQlFVRXNXVUZCUVN4RFFVRkJMRWRCUVVFc01rSkJRVUVzUjBGQlFTeG5Ra0ZCUVN4SFFVRkJMRWRCUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEdGQlFVRXNTMEZCUVN4RlFVRkJMRWxCUVVFc1pVRkJRU3hMUVVGQkxHbENRVUZCTEV0QlFVRXNhMEpCUVVFc1MwRkJRU3hOUVVGQkxFbEJRVUVzUjBGQlFTeExRVUZCTEVOQlFVRXNUVUZCUVN4RFFVRkJMRmRCUVVFc1QwRkJRU3hKUVVGQkxFdEJRVUVzVTBGQlFTeFJRVUZCTEVkQlFVRXNSMEZCUVN4SlFVRkJMRU5CUVVFc1NVRkJRU3hEUVVGQkxFdEJRVUVzUlVGQlFTeEpRVUZCTERKQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUjBGQlFTeFpRVUZCTEZOQlFVRXNORVJCUVVFc1NVRkJRU3huUWtGQlFTeE5RVUZCTEVkQlFVRXNUVUZCUVN4RlFVRkJMRXRCUVVFN1FVRkZia1FzVFVGQlRTeDNRa0ZCZDBJc1UwRkJVeXhuUWtGQlV5eERRVUZETzBWQlN6bEVMRTFCUVUwc1EwRkJRU3hGUVVGSE8wbEJRMUFzVFVGQlRUdE5RVUZGTzBsQlFVVXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUE8wbEJRekZDTEc5Q1FVTkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZMTEZOQlFWTXNSVUZCUXp0SlFVRTBRaXhuUWtGRGVrTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFXdERMR2RDUVVNdlF5eE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1kwRkJUU3hEUVVGRExFTkJRVU1zYTBKQlFXdENMRU5CUVU4c1EwRkJReXhsUVVOc1F5eE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1RVRkRSU3hUUVVGVExFVkJRVU1zZDBOQlFYZERPMDFCUTJ4RUxFOUJRVThzUlVGQlJTeERRVUZCTEV0QlFVMDdVVUZEWWl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF6dFZRVU4wUWl4SFFVRkhMRVZCUVVVc2JVSkJRVmtzUTBGQlF6dFJRVU53UWl4RFFVRkRMRU5CUVVNN1RVRkRTanRKUVVGRkxFZEJSVVFzUTBGQlF5eERRVUZETEc5Q1FVRnZRaXhEUVVOd1FpeERRVU5HTEVOQlEwWXNRMEZCUXp0RlFVVldPMEZCUTBZN1FVRkJReXhQUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEhkQ1FVRkJPMEZCUVVFc1pVRkJRU3hEUVhwQ2IwSXNkMEpCUVhkQ0xHdENRVU55UWp0RlFVTndRaXhEUVVGRExFVkJRVVVzYTBKQlFWTXNRMEZCUXp0QlFVTm1MRU5CUVVNN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOUVNDeEpRVUZCTEhsQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFXbEZMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTkJha1VzU1VGQlFTeFZRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeE5RVUZCTEVkQlFVRXNkVUpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFhRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFhRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeEpRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVZHJSQ3hUUVVGQkxIbENRVUZCTEZkQlFVRXNaVUZCUVN4UFFVRkJMR3REUVVGQkxHbENRVUZCTEU5QlFVRXNUMEZCUVN4UlFVRkJMR2RDUVVGQkxFOUJRVUVzVDBGQlFTeFpRVUZCTEhkQ1FVRkJMRmxCUVVFc1EwRkJRU3hYUVVGQkxGZEJRVUVzVjBGQlFTeEhRVUZCTEdkQ1FVRkJMRWRCUVVFc2FVSkJRVUVzUzBGQlFTeFhRVUZCTzBGQlFVRXNVMEZCUVN4M1FrRkJRU3hIUVVGQkxFVkJRVUVzVjBGQlFTeFRRVUZCTEZkQlFVRXNTVUZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzVjBGQlFTeEhRVUZCTEZGQlFVRXNSMEZCUVN4dlFrRkJRU3hIUVVGQkxIZENRVUZCTEVkQlFVRXNORUpCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUVzVlVGQlFTeExRVUZCTEVkQlFVRXNkMEpCUVVFc1EwRkJRU3hYUVVGQkxFOUJRVUVzUzBGQlFTeEpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3haUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1YwRkJRU3h4UWtGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRWxCUVVFc1RVRkJRU3hEUVVGQkxIZENRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1VVRkJRU3hIUVVGQkxHdENRVUZCTEUxQlFVRXNRMEZCUVN4VFFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4VFFVRkJMRWxCUVVFc1IwRkJRU3h4UWtGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4M1FrRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEdOQlFVRXNTVUZCUVN4TFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFMUJRVUVzUlVGQlFTeEhRVUZCTEVWQlFVRXNTVUZCUVN4WlFVRkJMRTFCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNVMEZCUVN4TlFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxFZEJRVUVzVFVGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzVFVGQlFTeFpRVUZCTEUxQlFVRTdRVUZCUVN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMRk5CUVVFc1NVRkJRU3hSUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEUxQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1RVRkJRU3hEUVVGQkxFbEJRVUVzWlVGQlFTeE5RVUZCTEdGQlFVRXNRMEZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFTkJRVUVzVFVGQlFTeEZRVUZCTEVOQlFVRXNWVUZCUVN4TlFVRkJMRWRCUVVFc1UwRkJRU3hEUVVGQkxFTkJRVUVzV1VGQlFTeEhRVUZCTEVsQlFVRXNUVUZCUVN4UlFVRkJMRTFCUVVFc1EwRkJRU3hUUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4TlFVRkJMRVZCUVVFc1IwRkJRU3hMUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMRWRCUVVFc1owSkJRVUVzVFVGQlFTeFpRVUZCTEZGQlFVRXNRMEZCUVN4TFFVRkJMRTlCUVVFc1UwRkJRVHRCUVVGQkxGTkJRVUVzWjBKQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1JVRkJRU3hMUVVGQkxFbEJRVUVzUjBGQlFTeEhRVUZCTEdOQlFVRXNRMEZCUVN4SFFVRkJMRTlCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzU1VGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxFbEJRVUVzUzBGQlFTeEZRVUZCTEV0QlFVRXNSVUZCUVN4VlFVRkJMRkZCUVVFc1dVRkJRU3hSUVVGQkxGRkJRVUVzYjBKQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hMUVVGQkxGZEJRVUVzUjBGQlFUdEJRVUZCTEZOQlFVRXNaVUZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3hIUVVGQkxGbEJRVUVzUTBGQlFTeEhRVUZCTERKQ1FVRkJMRWRCUVVFc1owSkJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4SFFVRkJPMEZCUVVFc1UwRkJRU3hoUVVGQkxFdEJRVUVzUlVGQlFTeEpRVUZCTEdWQlFVRXNTMEZCUVN4cFFrRkJRU3hMUVVGQkxHdENRVUZCTEV0QlFVRXNUVUZCUVN4SlFVRkJMRWRCUVVFc1MwRkJRU3hEUVVGQkxFMUJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTVUZCUVN4TFFVRkJMRk5CUVVFc1VVRkJRU3hIUVVGQkxFZEJRVUVzU1VGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4TFFVRkJMRVZCUVVFc1NVRkJRU3d5UWtGQlFTeEhRVUZCTEhOQ1FVRkJMRWRCUVVFc1dVRkJRU3hUUVVGQkxEUkVRVUZCTEVsQlFVRXNaMEpCUVVFc1RVRkJRU3hIUVVGQkxFMUJRVUVzUlVGQlFTeExRVUZCTzBGQlJXNURMRTFCUVUwc2QwSkJRWGRDTEZOQlFWTXNaMEpCUVZNc1EwRkJRenRGUVhGQ09VUXNaMEpCUVdkQ0xFTkJRVUVzUlVGQlJ6dEpRVU5xUWl4TlFVRk5PMDFCUTBvc1QwRkJUenROUVVOUUxGRkJRVkU3VFVGRFVpeFZRVUZWTzAxQlExWXNVVUZCVVR0TlFVTlNPMGxCUTBZc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTzBsQlIyUXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlFVc3NVMEZCVXl4RlFVRkRPMGxCUVd0RExHZENRVU12UXl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eFhRVUZCTEVOQlFVRXNUMEZCVlR0TlFVTlVMRWxCUVVrN1RVRkRTaXhWUVVGVkxFVkJRVVVzVlVGQlZ6dE5RVU4yUWl4TFFVRkxMRVZCUVVVc1ZVRkJWenROUVVOc1FpeFBRVUZQTEVWQlFVVXNUMEZCVVR0TlFVTnFRaXhKUVVGSkxFVkJRVVVzVVVGQlV6dE5RVU5tTEZGQlFWRXNSVUZCUlN4UlFVRlRPMDFCUTI1Q0xGTkJRVk1zUlVGQlJUdEpRVUZWTEVOQlEzUkNMRU5CUTBVc1EwRkJRenRGUVVWV08wVkJSVUVzVFVGQlRTeERRVUZCTEVWQlFVYzdTVUZEVUN4TlFVRk5PMDFCUTBvc1VVRkJVVHROUVVOU0xGTkJRVk03VFVGRFZDeFhRVUZYTzAxQlExZzdTVUZEUml4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXM3U1VGRFpDeHZRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eEpRVUZCTEVOQlFVRXNUMEZCUnl4RlFVRkJMRkZCUVVFN1RVRkRSaXhUUVVGVExFVkJRVVVzU1VGQlFTeHRRa0ZCVlN4RlFVRkRMRFJDUVVFMFFpeEZRVUZGTEZOQlFWTXNRMEZCUlR0TlFVTXZSQ3hoUVVGaExFVkJRVVVzTkVKQlFXTXNRMEZCUXl4TlFVRlBPMDFCUTNKRExHTkJRV01zUlVGQlJTdzBRa0ZCWXl4RFFVRkRPMGxCUVU4c1IwRkRiRU1zVVVGQlVTeEhRVVZZTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETEdWQlEzaENMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZMTEZOQlFWTXNSVUZCUXp0SlFVRnRReXhIUVVGRkxGZEJRV2xDTEVOQlFVTXNaVUZIZEVVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlFVc3NVMEZCVXl4RlFVRkRPMGxCUVhORExFZEJRVVVzVlVGQlowSXNRMEZEY0VVc1EwRkJRenRGUVVWV08wRkJRMFk3UVVGQlF5eFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMSGRDUVVGQk8wRkJRVUVzWlVGQlFTeERRWEJGYjBJc2QwSkJRWGRDTEdWQlJYaENPMFZCUTJwQ0xGTkJRVk1zUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwN1JVRkRNMElzVDBGQlR5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRGUVVONlFpeFJRVUZSTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZUdEZRVU55UXl4VlFVRlZMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlR0RlFVTjJReXhYUVVGWExFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpPMFZCUXpOQ0xGRkJRVkVzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRXRCUVVzc1EwRkJRenRKUVVGRkxFZEJRVWNzV1VGQlJ5eERRVUZETzBWQlFWVXNRMEZCUXl4RFFVRkRPMFZCUXk5RExGVkJRVlVzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwN1JVRkROVUlzVVVGQlVTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTVHRGUVVONFFpeFRRVUZUTEVWQlFVVXNhMEpCUVZNc1EwRkJRenRCUVVOMlFpeERRVUZETzBGQlFVRXNaVUZCUVN4RFFWcHJRaXgzUWtGQmQwSXNhMEpCWTNKQ08wVkJRM0JDTEU5QlFVOHNSVUZCUlN4SlFVRkpPMFZCUTJJc1YwRkJWeXhGUVVGRkxFVkJRVVU3UlVGRFppeFZRVUZWTEVWQlFVVXNSVUZCUlR0RlFVTmtMRkZCUVZFc1JVRkJSU3hEUVVGRE8wRkJRMklzUTBGQlF6czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF6ZENTQ3hKUVVGQkxHbERRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRV2RGTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5CYUVVc1NVRkJRU3hOUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hYUVVGQkxFZEJRVUVzVDBGQlFUdEJRVWxCTEVsQlFVRXNaVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkJLMFFzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJSUzlFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV5eHJRa0ZCYTBJc1EwRkJReXhWUVVGVkxFVkJRVVVzUzBGQlN5eEZRVUZGTzBWQlF6ZERMRTFCUVUwN1NVRkJSU3hMUVVGTE8wbEJRVVVzVVVGQlVUdEpRVUZGTzBWQlFXVXNRMEZCUXl4SFFVRkhMRlZCUVZVN1JVRkZkRVFzYjBKQlEwVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wbEJRVXNzVTBGQlV5eEZRVUZETEZsQlFWazdTVUZCUXl4SFFVRkhMRVZCUVVjc1IwRkJSU3hqUVVGbExFbEJRVWNzUzBGQlRUdEZRVUZGTEVkQlF6TkVMRTlCUVU4c1VVRkJVU3hMUVVGTExGRkJRVkVzWjBKQlFVY3NUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wbEJRVWNzVTBGQlV5eEZRVUZGTzBWQlFWTXNRMEZCUlN4RFFVRkRMRWRCUVVjc1VVRkJVU3hGUVVOd1JTeExRVUZMTEVWQlEwd3NTVUZCUVN4M1FrRkJXU3hGUVVGRExGVkJRVlVzUTBGRGNrSXNRMEZCUXp0QlFVVldPMEZCUldVc1UwRkJVeXhuUTBGQlowTXNRMEZCUXp0RlFVTjJSQ3hYUVVGWE8wVkJRMWc3UVVGRFJpeERRVUZETEVWQlFVVTdSVUZEUkN4TlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGQkxEaENRVUZqTEVWQlFVTXNRMEZCUXp0RlFVVXhRaXh2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1NVRkJTeXhUUVVGVExFVkJRVU03UlVGQmNVTXNSMEZEYWtRc1NVRkJRU3hyUTBGQmMwSXNSVUZCUXl4RFFVRkRMRVZCUVVVc1YwRkJWeXhGUVVGRkxIRkNRVUZ4UWl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVOb1JTeHJRa0ZEUml4RFFVTkhMRU5CUVVNN1FVRkZWanRCUVVWQkxHZERRVUZuUXl4RFFVRkRMRk5CUVZNc1IwRkJSenRGUVVNelF5eFhRVUZYTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZUdEZRVU40UXl4eFFrRkJjVUlzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwc1EwRkJRenRCUVVNeFF5eERRVUZET3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF6ZERSQ3hKUVVGQkxFMUJRVUVzUjBGQlFTeDFRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGTkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxFdEJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4TFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzU1VGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRmxCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRzlDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hsUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNTMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJLME1zVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeDVRa0ZCUVN4WFFVRkJMR1ZCUVVFc1QwRkJRU3hyUTBGQlFTeHBRa0ZCUVN4UFFVRkJMRTlCUVVFc1VVRkJRU3huUWtGQlFTeFBRVUZCTEU5QlFVRXNXVUZCUVN4M1FrRkJRU3haUVVGQkxFTkJRVUVzVjBGQlFTeFhRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEV0QlFVRXNWMEZCUVR0QlFVRkJMRk5CUVVFc2QwSkJRVUVzUjBGQlFTeEZRVUZCTEZkQlFVRXNVMEZCUVN4WFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEZkQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2IwSkJRVUVzUjBGQlFTeDNRa0ZCUVN4SFFVRkJMRFJDUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTEZWQlFVRXNTMEZCUVN4SFFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzV1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxGZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHJRa0ZCUVN4TlFVRkJMRU5CUVVFc1UwRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1UwRkJRU3hKUVVGQkxFZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4alFVRkJMRWxCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRWxCUVVFc1dVRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEUxQlFVRXNXVUZCUVN4TlFVRkJPMEZCUlM5RExFMUJRVTBzVjBGQlZ5eEhRVUZITzBWQlEyeENMR2RDUVVGblFpeEZRVUZGTEd0Q1FVRnJRanRGUVVOd1F5eHZRa0ZCYjBJc1JVRkJSU3h6UWtGQmMwSTdSVUZETlVNc1MwRkJTeXhGUVVGRk8wRkJRMVFzUTBGQlF6dEJRVVZFTEUxQlFVMHNWVUZCVlN4SFFVRkhMRU5CUVVNN1JVRkRiRUlzWlVGQlpUdEZRVU5tTEZsQlFWazdSVUZEV2l4aFFVRmhPMFZCUTJJN1FVRkRSaXhEUVVGRExFdEJRVXM3UlVGRFNpeE5RVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkJMRGhDUVVGakxFVkJRVU1zUTBGQlF6dEZRVU14UWl4TlFVRk5MRU5CUVVNc1MwRkJTeXhGUVVGRkxGRkJRVkVzUTBGQlF5eEhRVUZITEVsQlFVRXNaVUZCVVN4RlFVRkRMRmRCUVZjc1EwRkJReXhuUWtGQlowSXNRMEZCUXp0RlFVTm9SU3hOUVVGTkxFTkJRVU1zUzBGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4SFFVRkhMRWxCUVVFc1pVRkJVU3hGUVVGRExFbEJRVWtzUTBGQlF6dEZRVU40UXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhGUVVGRkxGbEJRVmtzUTBGQlF5eEhRVUZITEVsQlFVRXNaVUZCVVN4RlFVRkRMRWxCUVVrc1pVRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF6dEZRVVV6UkN4SlFVRkpMR2xDUVVGcFFpeEhRVUZITEVsQlFVazdSVUZETlVJc1RVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlFTeGhRVUZOTEVWQlFVTXNTMEZCU3l4RFFVRkRPMFZCUlRkQ0xFMUJRVTBzUzBGQlN5eEhRVUZITEVOQlFVRXNTMEZCVFR0SlFVTnNRaXhSUVVGUkxFTkJRVU1zVjBGQlZ5eERRVUZETEdkQ1FVRm5RaXhEUVVGRE8wbEJRM1JETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNN1NVRkRaQ3haUVVGWkxFTkJRVU1zU1VGQlNTeGxRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRPMFZCUXk5Q0xFTkJRVU03UlVGRlJDeE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExFMUJRVUVzUTBGQlFTeExRVUZaTzBsQlEyNURMRWxCUVVrN1RVRkRSaXhOUVVGTk8xRkJRVVU3VFVGQmFVSXNRMEZCUXl4SFFVRkhMRTFCUVUwc2IwSkJRVmNzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0TlFVTTFSQ3hKUVVORkxFTkJRVU1zWjBKQlFXZENMRWxCUTJwQ0xFbEJRVUVzZDBKQlFXdENMRVZCUVVNc1EwRkJReXhMUVVGTExHZERRVUV5UWl4RlFVTndSRHRSUVVOQkxFMUJRVTBzVlVGQlZTeEhRVUZITEVsQlFVa3NSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETzFGQlEyaEVMRTFCUVUwc1YwRkJWeXhIUVVGSExGVkJRVlVzUTBGQlF5eEpRVUZKTzFGQlEyNURMRTFCUVUwc1dVRkJXU3hIUVVGSExGZEJRVmNzUjBGQlJ5eFhRVUZYTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFbEJRVWs3VVVGRGJFVXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXh6UWtGQmMwSXNRMEZCUXl4WlFVRlpMRU5CUVVNN1RVRkRkRVE3U1VGRFJpeERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVN1RVRkRWaXhKUVVGSkxFOUJRVThzUTBGQlF5eFBRVUZQTEVWQlFVVTdVVUZEYmtJc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF6dE5RVU5pTzBsQlEwWTdTVUZEUVR0SlFVTkJPMGxCUTBFc1QwRkJUeXhWUVVGVkxFTkJRVU1zUTBGQlF6dEZRVU55UWl4RFFVRkRPMFZCUlVRc1RVRkJUU3huUWtGQlowSXNSMEZCUnl4TlFVRkJMRU5CUVVFc1MwRkJXVHRKUVVOdVF5eEpRVUZKTzAxQlEwWXNUVUZCVFR0UlFVRkZPMDFCUVZrc1EwRkJReXhIUVVGSExFMUJRVTBzYjBKQlFWY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenROUVVOMlJDeEpRVUZKTEZkQlFWY3NSVUZCUlR0UlFVTm1PMUZCUTBFc1RVRkJUU3hKUVVGSkxFOUJRVThzUTBGQlJTeFBRVUZQTEVsQlFVc3NWVUZCVlN4RFFVRkRMRTlCUVU4c1JVRkJSU3haUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZETDBRc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVWQlFVVTdWVUZEY0VJN1VVRkRSanRSUVVOQkxGRkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRPMDFCUXpkQ0xFTkJRVU1zVFVGQlRTeEpRVUZKTEU5QlFVOHNRMEZCUXl4UFFVRlBMRVZCUVVVN1VVRkRNVUk3VVVGRFFTeHBRa0ZCYVVJc1IwRkJSeXhWUVVGVkxFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1dVRkJUU3hEUVVGRE8xRkJRM2hFTEZGQlFWRXNRMEZCUXl4WFFVRlhMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTTdUVUZETlVNN1NVRkRSaXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFVVTdUVUZEVml4SlFVRkpMRTlCUVU4c1EwRkJReXhQUVVGUExFVkJRVVU3VVVGRGJrSXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJRenROUVVOaU8wbEJRMFk3UlVGRFJpeERRVUZETzBWQlJVUXNUVUZCVFN4VlFVRlZMRWRCUVVrc1NVRkJTU3hKUVVGTE8wbEJRek5DTEVsQlFVazdUVUZEUml4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRk8xRkJRMVE3VFVGRFJqdE5RVU5CTEZOQlFWTXNRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRE8wMUJRek5DTEVsQlFVa3NVMEZCVXl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExFVkJRVVU3VVVGRE1VSXNUVUZCVFN4TlFVRk5MRWRCUVVjc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzFGQlEyNURMR0ZCUVdFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRPMDFCUTNaRE8wbEJRMFlzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZPMDFCUTFZc1NVRkJTU3hsUVVGbExFVkJRVVU3VVVGRGJrSXNZVUZCWVN4RFFVRkRMRU5CUVVNc1EwRkJReXc0UWtGQk9FSXNRMEZCUXl4RFFVRkRPMDFCUTJ4RUxFTkJRVU1zVFVGQlRUdFJRVU5NTEdGQlFXRXNRMEZCUXl4RFFVRkRMRU5CUVVNc2JVTkJRVzFETEVOQlFVTXNRMEZCUXp0TlFVTjJSRHROUVVOQkxGRkJRVkVzUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU42UXp0RlFVTkdMRU5CUVVNN1JVRkZSQ3hOUVVGTkxGVkJRVlVzUjBGQlJ5eERRVUZCTEV0QlFVMDdTVUZEZGtJc1NVRkJTVHROUVVOR0xHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1NVRkRjRUlzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZPMDFCUTFZc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVWQlFVVTdVVUZEY0VJN1RVRkRSanROUVVOQkxFbEJRVWtzUTBGQlF5eERRVUZETEVsQlFVa3NTMEZCU3l4cFFrRkJhVUlzUlVGQlJUdFJRVU5vUXl4cFFrRkJSeXhEUVVGRExFbEJRVWtzUTBGQlJTeDFRa0ZCYzBJc1EwRkJSU3hIUVVGRkxFTkJRVU03VVVGRGNrTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1EwRkJReXh2UWtGQmIwSXNRMEZCUXp0TlFVTTFReXhEUVVGRExFMUJRVTA3VVVGRFRDeFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRPMDFCUTJJN1NVRkRSanRGUVVOR0xFTkJRVU03UlVGRlJDeEpRVUZCTEdkQ1FVRlRMRVZCUVVNc1RVRkJUVHRKUVVOa0xFOUJRVThzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1R0SlFVTjBRaXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPMGxCUTJ4Q0xFOUJRVThzVFVGQlRUdE5RVU5ZTEU5QlFVOHNRMEZCUXl4UFFVRlBMRWRCUVVjc1MwRkJTenROUVVOMlFpeFpRVUZaTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU03U1VGRGFrTXNRMEZCUXp0SlFVTkVPMFZCUTBZc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF6dEZRVVZPTEVsQlFVRXNaMEpCUVZNc1JVRkJReXhOUVVGTk8wbEJRMlFzU1VGQlNTeExRVUZMTEV0QlFVc3NWMEZCVnl4RFFVRkRMRXRCUVVzc1JVRkJSVHROUVVNdlFpeFZRVUZWTEVOQlFVTXNRMEZCUXp0SlFVTmtMRU5CUVVNc1RVRkJUU3hKUVVGSkxFdEJRVXNzUzBGQlN5eFhRVUZYTEVOQlFVTXNiMEpCUVc5Q0xFVkJRVVU3VFVGRGNrUXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dEpRVU53UWp0SlFVTkJPMFZCUTBZc1EwRkJReXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdSVUZGV0N4TlFVRk5MRkZCUVZFc1IwRkJSeXhEUVVGQkxFdEJRVTA3U1VGRGNrSXNXVUZCV1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETzBsQlF5OUNMRXRCUVVzc1EwRkJReXhEUVVGRE8wbEJRMUFzWjBKQlFXZENMRU5CUVVNc1EwRkJRenRGUVVOd1FpeERRVUZETzBWQlJVUXNUVUZCVFN4WFFVRlhMRWRCUVVjc1EwRkJRU3hMUVVGTk8wbEJRM2hDTEVsQlFVa3NTMEZCU3l4RlFVRkZMRWRCUVVjN1NVRkRaQ3hKUVVGSkxFdEJRVXNzUTBGQlF5eEpRVUZKTEV0QlFVc3NhVUpCUVdsQ0xFVkJRVVU3VFVGRGNFTXNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJReXh2UWtGQmIwSXNRMEZCUXp0TlFVTXZRaXhIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETEdWQlFXVXNRMEZCUXp0SlFVTXhRaXhEUVVGRExFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4TFFVRkxMRU5CUVVNc1EwRkJReXhsUVVGbExFTkJRVU1zUlVGQlJUdE5RVU12UXl4SlFVRkpMR1ZCUVdVc1JVRkJSVHRSUVVOdVFpeEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkRMQ3RDUVVFclFpeERRVUZETzAxQlF6RkRMRU5CUVVNc1RVRkJUVHRSUVVOTUxFZEJRVWNzUjBGQlJ5eERRVUZETEVOQlFVTXNaVUZCWlN4RFFVRkRPMDFCUXpGQ08wbEJRMFlzUTBGQlF5eE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1MwRkJTeXhEUVVGRExFTkJRVU1zTkVKQlFUUkNMRU5CUVVNc1JVRkJSVHROUVVNMVJDeEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkRMRFJDUVVFMFFpeERRVUZETzBsQlEzWkRMRU5CUVVNc1RVRkJUVHROUVVOTUxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU03VFVGRGNFTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1EwRkJReXh2UWtGQmIwSXNRMEZCUXp0SlFVTXZRanRKUVVWQkxHOUNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGQkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNVVUZCUVN4eFFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdUVUZCU3l4VFFVRlRMRVZCUVVNN1NVRkJiVUlzWjBKQlEyaERMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZMTEVkQlFVY3NSVUZCUXl4dFFrRkJiVUk3VFVGQlF5eExRVUZMTEVWQlFVTXNTVUZCU1R0TlFVRkRMRTFCUVUwc1JVRkJReXhKUVVGSk8wMUJRVU1zUjBGQlJ5eEZRVUZETzBsQlFVVXNRMEZCUlN4RFFVTjZSQ3hEUVVGRExFVkJRMHdzUzBGQlN5eG5Ra0ZCUnl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlN5eFRRVUZUTEVWQlFVTTdTVUZCYlVJc1IwRkJSU3hMUVVGWExFTkJRVU1zUjBGQlJ5eEpRVUZKTEdWQlEyaEZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZMTEZOQlFWTXNSVUZCUXp0SlFVRnRRaXhIUVVGRkxFZEJRVk1zUTBGQlF5eGxRVU01UXl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHZRa0ZCUVN4RFFVRkJMRTlCUVcxQ08wMUJRMnhDTEZGQlFWRXNSVUZCUlN4RFFVRkJMRXRCUVUwN1VVRkRaQ3hoUVVGaExFTkJRVU1zUlVGQlJTeERRVUZETzFGQlEycENMRmxCUVZrc1EwRkJReXhEUVVGRE8wMUJRMmhDTEVOQlFVVTdUVUZEUml4UlFVRlJMRVZCUVVVc1EwRkJRU3hMUVVGTk8xRkJRMlFzWVVGQllTeERRVUZETEVWQlFVVXNRMEZCUXp0UlFVTnFRaXhSUVVGUkxFTkJRVU1zUTBGQlF6dE5RVU5hTEVOQlFVVTdUVUZEUml4VlFVRlZMRVZCUVVVc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlJUdE5RVU40UWl4VlFVRlZMRVZCUVVVc1EwRkJReXhEUVVGRExGVkJRVlVzUTBGQlJUdE5RVU14UWl4blFrRkJaMElzUlVGQlF6dEpRVUZUTEVOQlF6TkNMRU5CUTBRc1EwRkJRenRGUVVWUUxFTkJRVU03UlVGRlJDeE5RVUZOTEZkQlFWY3NSMEZCUnl4RFFVRkJMRXRCUVUwN1NVRkRlRUlzU1VGQlNTeFBRVUZQTzBsQlExZ3NTVUZCU1N4TFFVRkxMRXRCUVVzc1YwRkJWeXhEUVVGRExHZENRVUZuUWl4RlFVRkZPMDFCUXpGRExFOUJRVThzUjBGQlJ5eERRVUZETEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU03U1VGRGNFTXNRMEZCUXl4TlFVRk5MRWxCUVVrc1MwRkJTeXhMUVVGTExGZEJRVmNzUTBGQlF5eExRVUZMTEVWQlFVVTdUVUZEZEVNc1QwRkJUeXhIUVVGSExFTkJRVU1zUTBGQlF5dzBRa0ZCTkVJc1EwRkJRenRKUVVNelF5eERRVUZETEUxQlFVMHNTVUZCU1N4TFFVRkxMRXRCUVVzc1YwRkJWeXhEUVVGRExHOUNRVUZ2UWl4RlFVRkZPMDFCUTNKRUxFOUJRVThzUjBGQlJ5eERRVUZETEVOQlFVTXNORUpCUVRSQ0xFTkJRVU03U1VGRE0wTTdTVUZEUVN4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUVN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxGRkJRVUVzY1VKQlEwVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wMUJRVXNzVTBGQlV5eEZRVUZETzBsQlFYRkNMR2RDUVVOc1F5eE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhsUVVGQkxFTkJRVUVzVDBGQll6dE5RVUZETEZWQlFWVXNSVUZCUlR0SlFVRlhMRU5CUVVVc1EwRkRkRU1zUTBGQlF5eEZRVU5NTEU5QlFVOHNhVUpCUVVrc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzAxQlFVc3NVMEZCVXl4RlFVRkRPMGxCUVc5Q0xFZEJRVVVzVDBGQllTeERRVU01UkN4RFFVRkRPMFZCUlZBc1EwRkJRenRGUVVWRUxHOUNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRKUVVGTExGTkJRVk1zUlVGQlF6dEZRVUZaTEVkQlFVVXNTMEZCU3l4SFFVRkhMRmRCUVZjc1EwRkJReXhEUVVGRExFZEJRVWNzVjBGQlZ5eERRVUZETEVOQlFVOHNRMEZCUXp0QlFVVTNSU3hEUVVGRE8wRkJSVVFzVlVGQlZTeERRVUZETEZOQlFWTXNSMEZCUnp0RlFVTnlRaXhsUVVGbExFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWVHRGUVVNeFF5eFpRVUZaTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZUdEZRVU4yUXl4aFFVRmhMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlR0RlFVTjRReXhoUVVGaExFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNN1FVRkRhRU1zUTBGQlF6dEJRVUZETEVsQlFVRXNVVUZCUVN4SFFVVmhMRlZCUVZVN1FVRkJRU3hQUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEZGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEZUU1NlFpeEpRVUZCTEUxQlFVRXNSMEZCUVN4MVFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZGQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hSUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNVMEZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNTMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGRkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJkVU1zVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeDVRa0ZCUVN4WFFVRkJMR1ZCUVVFc1QwRkJRU3hyUTBGQlFTeHBRa0ZCUVN4UFFVRkJMRTlCUVVFc1VVRkJRU3huUWtGQlFTeFBRVUZCTEU5QlFVRXNXVUZCUVN4M1FrRkJRU3haUVVGQkxFTkJRVUVzVjBGQlFTeFhRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEV0QlFVRXNWMEZCUVR0QlFVRkJMRk5CUVVFc2QwSkJRVUVzUjBGQlFTeEZRVUZCTEZkQlFVRXNVMEZCUVN4WFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEZkQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2IwSkJRVUVzUjBGQlFTeDNRa0ZCUVN4SFFVRkJMRFJDUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTEZWQlFVRXNTMEZCUVN4SFFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzV1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxGZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHJRa0ZCUVN4TlFVRkJMRU5CUVVFc1UwRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1UwRkJRU3hKUVVGQkxFZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4alFVRkJMRWxCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRWxCUVVFc1dVRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEUxQlFVRXNXVUZCUVN4TlFVRkJPMEZCUlhaRExFMUJRVTBzWTBGQll5eEhRVUZITEVOQlFVTTdSVUZCUlR0QlFVRlhMRU5CUVVNc1MwRkJTenRGUVVONlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RlFVRkZMRlZCUVZVc1EwRkJReXhIUVVGSExFbEJRVUVzWlVGQlVTeEZRVUZETEV0QlFVc3NRMEZCUXp0RlFVTTNReXhOUVVGTkxGVkJRVlVzUjBGQlJ5eEpRVUZCTEdOQlFVOHNSVUZCUXl4TlFVRk5PMGxCUXk5Q0xFMUJRVTBzU1VGQlNTeEhRVUZITEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRkRUlzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4MVFrRkJZeXhEUVVGRExHZENRVUZuUWl4RlFVRkZMRU5CUVVNc2MwSkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0SlFVTnNSU3hQUVVGUExFbEJRVWtzTkVKQlFXMUNMRU5CUVVNc1NVRkJTU3hGUVVGRk8wMUJRMjVETEhkQ1FVRjNRaXhGUVVGRkxHbENRVUZYTEVkQlFVY3NSMEZCUnp0TlFVTXpReXgxUWtGQmRVSXNSVUZCUlN4cFFrRkJWeXhIUVVGSE8wbEJRM3BETEVOQlFVTXNRMEZCUXp0RlFVTktMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU03UlVGRlRpeEpRVUZCTEdkQ1FVRlRMRVZCUVVNc1RVRkJUVHRKUVVOa0xFMUJRVTBzVTBGQlV5eEhRVUZITEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1QwRkJUeXhEUVVGRE8wbEJRMnhFTEUxQlFVMHNaVUZCWlN4SFFVRkhMRU5CUVVFc1MwRkJUVHROUVVNMVFpeFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRPMGxCUTJ4Q0xFTkJRVU03U1VGRFJDeFRRVUZUTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVTBGQlV5eEZRVUZGTEdWQlFXVXNRMEZCUXp0SlFVTjBSQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eFZRVUZWTEVOQlFVTXNjVUpCUVhGQ0xFTkJRemxETEZOQlFWTXNSVUZEVkN4UFFVRlBMRVZCUTA0c1RVRkJUU3hKUVVGTE8wMUJRMVlzU1VGQlNTeE5RVUZOTEVWQlFVVTdVVUZEVml4VlFVRlZMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTTdUVUZET1VJN1NVRkRSaXhEUVVOR0xFTkJRVU03U1VGRFJDeFBRVUZQTEUxQlFVMDdUVUZEV0N4VFFVRlRMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNVMEZCVXl4RlFVRkZMR1ZCUVdVc1EwRkJRenROUVVONlJDeFBRVUZQTEVOQlEwb3NTVUZCU1N4RFFVRkZMRkZCUVZFc1NVRkJTenRSUVVOc1FpeEpRVUZKTEZGQlFWRXNSVUZCUlR0VlFVTmFMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU5xUWp0TlFVTkdMRU5CUVVNc1EwRkJReXhEUVVORUxFdEJRVXNzUTBGQlF5eHBRa0ZCUnl4RFFVRkRMRWxCUVVrc1EwRkJRenRKUVVOd1FpeERRVUZETzBsQlEwUTdSVUZEUml4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRE8wVkJSVTRzYjBKQlEwVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wbEJRVXNzVTBGQlV5eEZRVUZETzBWQlFXOURMR2RDUVVOcVJDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFN1NVRkRSU3hGUVVGRkxFVkJRVU1zVDBGQlR6dEpRVU5XTEV0QlFVc3NSVUZCUlR0TlFVTk1MRTlCUVU4c1JVRkJSU3hQUVVGUExFZEJRVWNzVDBGQlR5eEhRVUZITEUxQlFVMDdUVUZEYmtNc1MwRkJTeXhGUVVGRkxFMUJRVTA3VFVGRFlpeE5RVUZOTEVWQlFVVTdTVUZEVmp0RlFVRkZMRU5CUTBnc1EwRkJReXhGUVVORUxFOUJRVThzUjBGQlJ5eEpRVUZKTEdkQ1FVRkhMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEZGQlFVRXNRMEZCUVN4UFFVRlBPMGxCUVVNc1MwRkJTeXhGUVVGRE8wVkJRVGhDTEVOQlFVVXNRMEZET1VRc1EwRkJRenRCUVVWV0xFTkJRVU03UVVGRlJDeGpRVUZqTEVOQlFVTXNVMEZCVXl4SFFVRkhPMFZCUTNwQ0xGVkJRVlVzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVNM1FpeERRVUZETzBGQlFVTXNTVUZCUVN4UlFVRkJMRWRCUldFc1kwRkJZenRCUVVGQkxFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNVVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnNSVGRDTEVsQlFVRXNhMEpCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZCYzBRc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPMEZCUVVFc1NVRkJRU3hSUVVGQkxFZEJSWFpETERCQ1FVRnBRanRCUVVGQkxFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNVVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTkdhRU1zU1VGQlFTeE5RVUZCTEVkQlFVRXNkVUpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1ZVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZGQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdWQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hSUVVGQkxFZEJRVUVzVDBGQlFUdEJRVkZCTEVsQlFVRXNTVUZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxIbENRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeHpRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVUVyUkN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMSGxDUVVGQkxGZEJRVUVzWlVGQlFTeFBRVUZCTEd0RFFVRkJMR2xDUVVGQkxFOUJRVUVzVDBGQlFTeFJRVUZCTEdkQ1FVRkJMRTlCUVVFc1QwRkJRU3haUVVGQkxIZENRVUZCTEZsQlFVRXNRMEZCUVN4WFFVRkJMRmRCUVVFc1YwRkJRU3hIUVVGQkxHZENRVUZCTEVkQlFVRXNhVUpCUVVFc1MwRkJRU3hYUVVGQk8wRkJRVUVzVTBGQlFTeDNRa0ZCUVN4SFFVRkJMRVZCUVVFc1YwRkJRU3hUUVVGQkxGZEJRVUVzU1VGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1YwRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHZRa0ZCUVN4SFFVRkJMSGRDUVVGQkxFZEJRVUVzTkVKQlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFc1ZVRkJRU3hMUVVGQkxFZEJRVUVzZDBKQlFVRXNRMEZCUVN4WFFVRkJMRTlCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4WlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFRRVUZCTEUxQlFVRXNWMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVsQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMR3RDUVVGQkxFMUJRVUVzUTBGQlFTeFRRVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeFRRVUZCTEVsQlFVRXNSMEZCUVN4eFFrRkJRU3hIUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hIUVVGQkxHTkJRVUVzU1VGQlFTeExRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUzBGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4RFFVRkJMRTFCUVVFc1JVRkJRU3hIUVVGQkxFVkJRVUVzU1VGQlFTeFpRVUZCTEUxQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRWRCUVVFc1RVRkJRU3hMUVVGQkxFbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1RVRkJRU3haUVVGQkxFMUJRVUU3UVVGRkwwUXNUVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eERRVUZCTEV0QlFVMDdSVUZCUVN4SlFVRkJMR0ZCUVVFN1JVRkRPVUlzVFVGQlRTeERRVUZETEVkQlFVY3NTVUZCUVN3NFFrRkJZeXhGUVVGRExFTkJRVU03UlVGRk1VSXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJRU3gxUWtGQlZ5eEZRVUZETEc5RFFVRjVRaXhEUVVGRE8wVkJRM3BFTEUxQlFVMDdTVUZCUlN4SlFVRkpPMGxCUVVVN1JVRkJTeXhEUVVGRExFZEJRVWNzVlVGQlZUdEZRVU5xUXl4TlFVRk5MR3RDUVVGclFpeEhRVUZITEVsQlFVa3NZVUZCU2l4SlFVRkpMSFZDUVVGS0xFbEJRVWtzUTBGQlJTeFBRVUZQTzBWQlEzaERMRTFCUVUwc1pVRkJaU3hIUVVGSExFbEJRVWtzWVVGQlNpeEpRVUZKTEhWQ1FVRktMRWxCUVVrc1EwRkJSU3hQUVVGUE8wVkJRM0pETEUxQlFVMHNWMEZCVnl4SFFVRkhMR3RDUVVGclFpeEpRVUZKTEdWQlFXVTdSVUZEZWtRc1RVRkJUU3hEUVVGRExGVkJRVlVzUlVGQlJTeGhRVUZoTEVOQlFVTXNSMEZCUnl4SlFVRkJMR1ZCUVZFc1JVRkJReXhGUVVGRkxFTkJRVU03UlVGRmFFUXNUVUZCVFR0SlFVRkZPMFZCUVU4c1EwRkJReXhIUVVGSExFbEJRVUVzZFVKQlFWY3NSVUZCUlN4TFFVRkxMRWxCUVVzN1NVRkRlRU1zVDBGQlR5eExRVUZMTEVOQlFVTXNhMEpCUVd0Q08wVkJRMnBETEVOQlFVTXNRMEZCUXp0RlFVTkdPMFZCUTBFN1JVRkRRVHRGUVVOQkxFMUJRVTBzVDBGQlR5eEhRVUZITEVsQlFVRXNZMEZCVHl4RlFVRkRMRTFCUVUwN1NVRkROVUlzVDBGQlR5eE5RVUZOTzBsQlEySTdSVUZEUml4RFFVRkRMRVZCUVVVc1EwRkJReXhKUVVGSkxHRkJRVW9zU1VGQlNTeDNRa0ZCUVN4aFFVRkJMRWRCUVVvc1NVRkJTU3hEUVVGRkxFOUJRVThzWTBGQlFTeGhRVUZCTEhWQ1FVRmlMR0ZCUVVFc1EwRkJaU3hUUVVGVExFTkJRVU1zUTBGQlF6dEZRVVU1UWl4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGQkxIVkNRVUZYTEVWQlFVTXNRMEZCUXp0RlFVTTVRaXhOUVVGTkxHOUNRVUZ2UWl4SFFVRkhMRWxCUVVFc2EwSkJRVmNzUlVGRGRFTXNUVUZCVFN4UlFVRlJMRU5CUVVNc1NVRkJRU3cyUWtGQk1FSXNSVUZCUXl4RFFVRkRMRU5CUVVNc1JVRkROVU1zUTBGQlF5eFJRVUZSTEVOQlExZ3NRMEZCUXp0RlFVVkVMRTFCUVUwc2FVSkJRV2xDTEVkQlFVY3NTVUZCUVN4clFrRkJWeXhGUVVGRExFMUJRVTA3U1VGRE1VTXNTVUZCU1N4TlFVRk5MRWRCUVVjc2FVSkJRVkU3U1VGRGNrSXNVVUZCVVN4UFFVRlBMRU5CUVVNc1NVRkJTVHROUVVOc1FpeExRVUZMTEdsQ1FVRlpMRU5CUVVNc1lVRkJZVHRSUVVGRk8xVkJReTlDTEUxQlFVMHNSMEZCUnl3d1FrRkJhVUk3VlVGRE1VSTdVVUZEUmp0TlFVTkJMRXRCUVVzc2FVSkJRVmtzUTBGQlF5eFJRVUZSTzFGQlFVVTdWVUZETVVJc1RVRkJUU3hIUVVGSExHdENRVUZUTzFWQlEyeENPMUZCUTBZN1RVRkRRU3hMUVVGTExHbENRVUZaTEVOQlFVTXNiVUpCUVcxQ08xRkJRVVU3VlVGRGNrTXNUVUZCVFN4SFFVRkhMSFZDUVVGak8xVkJRM1pDTzFGQlEwWTdUVUZEUVR0UlFVRlRPMVZCUTFBc1RVRkJUU3hIUVVGSExHbENRVUZSTzFGQlEyNUNPMGxCUTBZN1NVRkRRU3hSUVVGUkxFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMGxCUTNwQ0xGRkJRVkVzUTBGQlF5eEpRVUZCTEc5RFFVRnBReXhGUVVGRExFTkJRVU1zUTBGQlF6dEZRVU12UXl4RFFVRkRMRVZCUVVVc1EwRkJReXhSUVVGUkxFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdSVUZGZGtJc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlFTeGpRVUZQTEVWQlFVTXNUVUZCVFR0SlFVTXhRaXhKUVVGSkxFMUJRVTBzUjBGQlJ5eEZRVUZGTzBsQlEyWXNTVUZCU1N4bFFVRmxMRVZCUVVVN1RVRkRia0lzVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl3MFFrRkJORUlzUTBGQlF6dEpRVU14UXl4RFFVRkRMRTFCUVUwc1NVRkJTU3hyUWtGQmEwSXNSVUZCUlR0TlFVTTNRaXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEN0Q1FVRXJRaXhEUVVGRE8wbEJRemRETzBsQlEwRXNTVUZCU1N4VlFVRlZMRXRCUVVzc1JVRkJSU3hGUVVGRk8wMUJRM0pDTEUxQlFVMHNSMEZCUnl4VlFVRlZPMGxCUTNKQ08wbEJRMEVzVDBGQlR5eE5RVUZOTzBWQlEyWXNRMEZCUXl4RlFVRkZMRU5CUVVNc1pVRkJaU3hGUVVGRkxHdENRVUZyUWl4RlFVRkZMRU5CUVVNc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF6dEZRVU40UkN4UFFVRlBMRmRCUVZjc1owSkJRMmhDTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExGRkJRVUVzUTBGQlFTeFBRVUZQTzBsQlEwNHNTMEZCU3l4RlFVRkZMRXRCUVUwN1NVRkRZaXhQUVVGUExFVkJRVVVzYTBKQlFXdENMRWRCUVVjc2IwSkJRVzlDTEVkQlFVYzdSVUZCYTBJc1IwRkZkRVVzYTBKQlFXdENMR2xDUVVOcVFpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXg1UWtGQlFTeERRVUZCTEU5QlFYZENPMGxCUTNaQ0xGbEJRVmtzUlVGQlJTeHZRa0ZCY1VJN1NVRkRia01zWVVGQllTeEZRVUZGTzBWQlFXTXNRMEZET1VJc1EwRkRSaXhGUVVOQkxHVkJRV1VzYVVKQlEyUXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYzBKQlFVRXNRMEZCUVN4UFFVRnhRanRKUVVOd1FpeGhRVUZoTEVWQlFVVXNZVUZCWXp0SlFVTTNRaXhaUVVGWkxFVkJRVVVzYVVKQlFXdENPMGxCUTJoRExFOUJRVThzUlVGQlJTeEpRVUZKTEVOQlFVTTdSVUZCVVN4RFFVTjJRaXhEUVVWSkxFTkJRVU1zUjBGRFVpeEpRVUZKTzBGQlExWXNRMEZCUXp0QlFVRkRMRWxCUVVFc1VVRkJRU3hIUVVWaExHbENRVUZwUWp0QlFVRkJMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzVVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU55UjJoRExFbEJRVUVzYzBKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQmVVVXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlFVRXNTVUZCUVN4UlFVRkJMRWRCUlRGRUxEaENRVUZ4UWp0QlFVRkJMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzVVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEUm5CRExFbEJRVUVzVFVGQlFTeEhRVUZCTEhWQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVDBGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzUzBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVMUJMRWxCUVVFc1kwRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdsQ1FVRkJMRWRCUVVFc1QwRkJRVHRCUVVGclJDeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEhsQ1FVRkJMRmRCUVVFc1pVRkJRU3hQUVVGQkxHdERRVUZCTEdsQ1FVRkJMRTlCUVVFc1QwRkJRU3hSUVVGQkxHZENRVUZCTEU5QlFVRXNUMEZCUVN4WlFVRkJMSGRDUVVGQkxGbEJRVUVzUTBGQlFTeFhRVUZCTEZkQlFVRXNWMEZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzYVVKQlFVRXNTMEZCUVN4WFFVRkJPMEZCUVVFc1UwRkJRU3gzUWtGQlFTeEhRVUZCTEVWQlFVRXNWMEZCUVN4VFFVRkJMRmRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNWMEZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3h2UWtGQlFTeEhRVUZCTEhkQ1FVRkJMRWRCUVVFc05FSkJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRXNWVUZCUVN4TFFVRkJMRWRCUVVFc2QwSkJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzVjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEd0Q1FVRkJMRTFCUVVFc1EwRkJRU3hUUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hUUVVGQkxFbEJRVUVzUjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMR05CUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1NVRkJRU3haUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNUVUZCUVN4WlFVRkJMRTFCUVVFN1FVRkZiRVFzVFVGQlRTeE5RVUZOTEVkQlFVY3NRMEZCUXp0RlFVRkZMRWxCUVVrN1JVRkJSU3hKUVVGSk8wVkJRVVVzTWtKQlFUSkNPMFZCUVVVN1FVRkJUeXhEUVVGRExFdEJRVXM3UlVGRGRFVXNUVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJRU3c0UWtGQll5eEZRVUZETEVOQlFVTTdSVUZETVVJc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlFTeGpRVUZQTEVWQlEzWkNMRTFCUVUwc1NVRkJTU3hsUVVGVExFTkJRVU1zU1VGQlNTeFJRVUZGTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFVkJRMmhGTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkRZaXhEUVVGRE8wVkJRMFFzVFVGQlRTeERRVUZETEdGQlFXRXNSVUZCUlN4blFrRkJaMElzUTBGQlF5eEhRVUZITEVsQlFVRXNaVUZCVVN4RlFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETzBWQlEzaEZMRWxCUVVFc1owSkJRVk1zUlVGQlF5eE5RVUZOTzBsQlEyUXNUVUZCVFN4RlFVRkZMRWRCUVVjc1YwRkJWeXhEUVVGRExFMUJRVTA3VFVGRE0wSXNaMEpCUVdkQ0xFTkJRVU1zVTBGQlV5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRlRU1zUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXp0SlFVTlFMRTlCUVU4c1RVRkJUVHROUVVOWUxHRkJRV0VzUTBGQlF5eEZRVUZGTEVOQlFVTTdTVUZEYmtJc1EwRkJRenRGUVVOSUxFTkJRVU1zUlVGQlJTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMFZCUldZc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeFJRVUZCTEhGQ1FVTkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEVsQlFVRXNRMEZCUVN4UFFVRkhMSEZDUVVOR0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzU1VGQlNUdEpRVUZETEV0QlFVc3NSVUZCUlN4MVFrRkJVeXhEUVVGRE8wVkJRVThzUjBGRE0wSXNRMEZCUXl4RFFVRkRMQ3RDUVVFclFpeERRVU01UWl4RFFVTklMRU5CUVVNc1pVRkRUaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4SlFVRkJMRU5CUVVFc1QwRkJSenRKUVVOR0xGVkJRVlVzUlVGQlJTeERRVUZGTzBsQlEyUXNZVUZCWVN4RlFVRkZMRU5CUVVVN1NVRkRha0lzVDBGQlR5eEZRVUZGTEhGQ1FVRlBMRU5CUVVNc1NVRkJTenRKUVVOMFFpeFZRVUZWTEVWQlFVVXNkMEpCUVZVc1EwRkJReXhOUVVGUE8wbEJRemxDTEdGQlFXRXNSVUZCUlN3MFFrRkJZeXhEUVVGRE8wVkJRVThzWjBKQlJYSkRMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdEpRVU5GTEV0QlFVc3NSVUZCUlR0TlFVTk1MRTlCUVU4c1JVRkJSU3hGUVVGRk8wMUJRMWdzWlVGQlpTeEZRVUZGTzBsQlEyNUNPMFZCUVVVc1owSkJSVVlzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1QwRkJRU3hEUVVGQkxFOUJRVTA3U1VGQlF5eExRVUZMTEVWQlFVVXNZVUZCWVN4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRk8wbEJRVU1zU1VGQlNTeEZRVUZGTzBWQlFVa3NRMEZCUlN4RFFVTnlSQ3hEUVVOR0xFTkJRVU1zWlVGRFRpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhKUVVGQkxFTkJRVUVzVDBGQlJ6dEpRVUZETEdGQlFXRXNSVUZCUlN4RFFVRkZPMGxCUVVNc1YwRkJWeXhGUVVGRkxFTkJRVVU3U1VGQlF5eFpRVUZaTEVWQlFVVTdSVUZCUlN4blFrRkRja1FzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2FVSkJRVUVzUTBGQlFTeEpRVUZKTzBsQlFVTXNTMEZCU3l4RlFVRkZMSFZDUVVGVExFTkJRVU03UlVGQlR5eEhRVU16UWl4RFFVRkRMRU5CUVVNc2EwTkJRV3RETEVOQlEycERMRU5CUTBnc1EwRkJReXhsUVVOT0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR05CUVVFc1EwRkJRU3h0UWtGQmJVSTdTVUZEYkVJc1VVRkJVU3hGUVVGRkxESkNRVUUwUWp0SlFVTjBReXhSUVVGUkxFVkJRVVVzVFVGQlR6dEpRVU5xUWl4VlFVRlZMRVZCUVVVc1EwRkJReXhEUVVGRExEWkNRVUUyUWl4RFFVRkZPMGxCUXpkRExGVkJRVlVzUlVGQlJTeERRVUZETEVOQlFVTXNiVU5CUVcxRExFTkJRVVU3U1VGRGJrUXNaMEpCUVdkQ0xFVkJRVU03UlVGQlV5eERRVU16UWl4RFFVTkVMRU5CUVVNN1FVRkZVQ3hEUVVGRE8wRkJSVVFzVFVGQlRTeERRVUZETEZOQlFWTXNSMEZCUnp0RlFVTnFRaXhKUVVGSkxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWVHRGUVVOcVF5eEpRVUZKTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZUdEZRVU5xUXl3eVFrRkJNa0lzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVk8wVkJRM1JFTEUxQlFVMHNSVUZCUlN4clFrRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF6dEJRVU42UWl4RFFVRkRPMEZCUVVNc1NVRkJRU3hSUVVGQkxFZEJSV0VzVFVGQlRUdEJRVUZCTEU5QlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc1VVRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF6ZEZja0lzU1VGQlFTeE5RVUZCTEVkQlFVRXNkVUpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFZRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFJRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1QwRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1QwRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVRTRRaXhUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN1FVRkJRU3hUUVVGQkxIbENRVUZCTEZkQlFVRXNaVUZCUVN4UFFVRkJMR3REUVVGQkxHbENRVUZCTEU5QlFVRXNUMEZCUVN4UlFVRkJMR2RDUVVGQkxFOUJRVUVzVDBGQlFTeFpRVUZCTEhkQ1FVRkJMRmxCUVVFc1EwRkJRU3hYUVVGQkxGZEJRVUVzVjBGQlFTeEhRVUZCTEdkQ1FVRkJMRWRCUVVFc2FVSkJRVUVzUzBGQlFTeFhRVUZCTzBGQlFVRXNVMEZCUVN4M1FrRkJRU3hIUVVGQkxFVkJRVUVzVjBGQlFTeFRRVUZCTEZkQlFVRXNTVUZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzVjBGQlFTeEhRVUZCTEZGQlFVRXNSMEZCUVN4dlFrRkJRU3hIUVVGQkxIZENRVUZCTEVkQlFVRXNORUpCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUVzVlVGQlFTeExRVUZCTEVkQlFVRXNkMEpCUVVFc1EwRkJRU3hYUVVGQkxFOUJRVUVzUzBGQlFTeEpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3haUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1YwRkJRU3h4UWtGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRWxCUVVFc1RVRkJRU3hEUVVGQkxIZENRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1VVRkJRU3hIUVVGQkxHdENRVUZCTEUxQlFVRXNRMEZCUVN4VFFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4VFFVRkJMRWxCUVVFc1IwRkJRU3h4UWtGQlFTeEhRVUZCTEUxQlFVRXNRMEZCUVN4M1FrRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEdOQlFVRXNTVUZCUVN4TFFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNTMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFMUJRVUVzUlVGQlFTeEhRVUZCTEVWQlFVRXNTVUZCUVN4WlFVRkJMRTFCUVVFc1EwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNVMEZCUVN4TlFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxFZEJRVUVzVFVGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzVFVGQlFTeFpRVUZCTEUxQlFVRTdRVUZGT1VJc1RVRkJUU3h4UWtGQmNVSXNSMEZCUnl4RFFVRkRPMFZCUVVVc1QwRkJUenRGUVVGRkxGbEJRVms3UlVGQlJUdEJRVUZqTEVOQlFVTXNTMEZCU3p0RlFVTXhSU3hOUVVGTkxFTkJRVU1zVFVGQlRTeEZRVUZGTEZOQlFWTXNRMEZCUXl4SFFVRkhMRWxCUVVFc1pVRkJVU3hGUVVGRExFMUJRVTBzUTBGQlF6dEZRVVUxUXl4TlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGQkxHdENRVUZYTEVWQlFVTXNUVUZCVFN4VFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETzBWQlJYWkVMRTFCUVUwc1dVRkJXU3hIUVVGSExFTkJRVUVzUzBGQlRUdEpRVU42UWl4TlFVRk5PMDFCUVVVN1NVRkJVU3hEUVVGRExFZEJRVWNzVDBGQlR6dEpRVU16UWl4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4UFFVRkJMRU5CUVVFc1QwRkJUVHROUVVOTUxFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTXNTVUZCU3p0TlFVTnVRaXhKUVVGSkxFVkJRVVVzVDBGQlR5eERRVUZETEVsQlFVczdUVUZEYmtJc01rSkJRVEpDTEVWQlFVVXNXVUZCWVR0TlFVTXhReXhOUVVGTkxFVkJRVVU3U1VGQlR5eERRVU5vUWl4RFFVRkRPMFZCUlU0c1EwRkJRenRGUVVWRUxFMUJRVTBzV1VGQldTeEhRVUZITEVOQlFVRXNTMEZCVFR0SlFVTjZRaXh2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhQUVVGQkxFTkJRVUVzVDBGQlRUdE5RVU5NTERKQ1FVRXlRaXhGUVVGRkxGbEJRV0U3VFVGRE1VTXNlVUpCUVhsQ0xFVkJRVVVzYTBOQlFUQkNPMDFCUTNKRUxGTkJRVk1zUlVGQlJTeFBRVUZQTEVOQlFVTXNVMEZCVlR0TlFVTTNRaXhoUVVGaExFVkJRVVU3U1VGQll5eERRVU01UWl4RFFVRkRPMFZCUlU0c1EwRkJRenRGUVVWRUxFbEJRVWtzVFVGQlRTeExRVUZMTEUxQlFVMHNSVUZCUlR0SlFVTnlRaXhQUVVGUExGbEJRVmtzUTBGQlF5eERRVUZETzBWQlEzWkNPMFZCUTBFc1QwRkJUeXhaUVVGWkxFTkJRVU1zUTBGQlF6dEJRVU4yUWl4RFFVRkRPMEZCUlVRc2NVSkJRWEZDTEVOQlFVTXNVMEZCVXl4SFFVRkhPMFZCUTJoRExFOUJRVThzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVk8wVkJRM0JETEZsQlFWa3NSVUZCUlN4clFrRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTzBWQlEzWkRMR0ZCUVdFc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVa3NRMEZCUXp0QlFVTm9ReXhEUVVGRE8wRkJRVU1zU1VGQlFTeFJRVUZCTEVkQlJXRXNjVUpCUVhGQ08wRkJRVUVzVDBGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4UlFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenRCUXpsRGNFTXNTVUZCUVN4TlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4blFrRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEVsQlFVRXNSMEZCUVN4MVFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZkQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdWQlFVRXNSMEZCUVN4UFFVRkJPMEZCUVd0RkxGTkJRVUVzZVVKQlFVRXNWMEZCUVN4bFFVRkJMRTlCUVVFc2EwTkJRVUVzYVVKQlFVRXNUMEZCUVN4UFFVRkJMRkZCUVVFc1owSkJRVUVzVDBGQlFTeFBRVUZCTEZsQlFVRXNkMEpCUVVFc1dVRkJRU3hEUVVGQkxGZEJRVUVzVjBGQlFTeFhRVUZCTEVkQlFVRXNaMEpCUVVFc1IwRkJRU3hwUWtGQlFTeExRVUZCTEZkQlFVRTdRVUZCUVN4VFFVRkJMSGRDUVVGQkxFZEJRVUVzUlVGQlFTeFhRVUZCTEZOQlFVRXNWMEZCUVN4SlFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzVlVGQlFTeFhRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMRzlDUVVGQkxFZEJRVUVzZDBKQlFVRXNSMEZCUVN3MFFrRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFTeFZRVUZCTEV0QlFVRXNSMEZCUVN4M1FrRkJRU3hEUVVGQkxGZEJRVUVzVDBGQlFTeExRVUZCTEVsQlFVRXNTMEZCUVN4RFFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hYUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1NVRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYTBKQlFVRXNUVUZCUVN4RFFVRkJMRk5CUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRk5CUVVFc1NVRkJRU3hIUVVGQkxIRkNRVUZCTEVkQlFVRXNUVUZCUVN4RFFVRkJMSGRDUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNZMEZCUVN4SlFVRkJMRXRCUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4TFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFTkJRVUVzVFVGQlFTeEZRVUZCTEVkQlFVRXNSVUZCUVN4SlFVRkJMRmxCUVVFc1RVRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4VFFVRkJMRTFCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzUjBGQlFTeE5RVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeE5RVUZCTEZsQlFVRXNUVUZCUVR0QlFVRkJMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVVnNSU3hOUVVGTkxFMUJRVTBzUjBGQlJ5eERRVUZETzBWQlEyUXNlVUpCUVhsQ08wVkJRM3BDTERKQ1FVRXlRanRGUVVNelFpeFRRVUZUTzBWQlExUTdRVUZEUml4RFFVRkRMRXRCUVVzN1JVRkRTaXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZCTERoQ1FVRmpMRVZCUVVNc1EwRkJRenRGUVVNeFFpeE5RVUZOTEUxQlFVMHNSMEZCUnl4RFFVRkJMRXRCUVUwN1NVRkRia0lzTWtKQlFUSkNMRU5CUVVNc1EwRkJRenRGUVVNdlFpeERRVUZETzBWQlJVUXNUVUZCVFN4aFFVRmhMRWRCUVVjc1RVRkJUeXhGUVVGRkxFbEJRVXM3U1VGRGJFTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1NVRkJTU3hMUVVGTExHVkJRV1VzUlVGQlJUdE5RVU12UWl4TlFVRk5MRmxCUVZrc1IwRkJSeXcyUWtGQldTeERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRE8wMUJRMjVFTEUxQlFVMHNUVUZCVFN4SFFVRkhMRmxCUVZrc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dE5RVU14UXl4TlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXp0TlFVTnlReXhKUVVGSkxFMUJRVTBzUzBGQlN5eFRRVUZUTEVWQlFVVTdVVUZEZUVJc1QwRkJUeXhOUVVGTkxIbENRVUY1UWl4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenROUVVONlJUdE5RVU5CTEdGQlFXRXNRMEZCUXl4RFFVRkRMRU5CUVVNc2JVTkJRVzFETEVOQlFVTXNRMEZCUXp0TlFVTnlSQ3hOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl3MFFrRkJORUlzUTBGQlF5eERRVUZETzBsQlEyeEVMRU5CUVVNc1RVRkJUVHROUVVOTUxHRkJRV0VzUTBGQlF5eERRVUZETEVOQlFVTXNiVU5CUVcxRExFTkJRVU1zUTBGQlF6dE5RVU55UkN4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXp0SlFVTnlRenRGUVVOR0xFTkJRVU03UlVGRlJDeHZRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eFhRVUZCTEVOQlFVRXNUMEZCVlR0SlFVTlVMR1ZCUVdVc1JVRkJSU3hMUVVGTk8wbEJRM1pDTEZsQlFWa3NSVUZCUlN4TlFVRlBPMGxCUTNKQ0xHRkJRV0VzUlVGQlJTeGhRVUZqTzBsQlF6ZENMR0ZCUVdFc1JVRkJSVHRGUVVGakxFTkJRemxDTEVOQlFVTTdRVUZGVGl4RFFVRkRPMEZCUlVRc1RVRkJUU3hEUVVGRExGTkJRVk1zUjBGQlJ6dEZRVU5xUWl4NVFrRkJlVUlzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVk8wVkJRM0JFTERKQ1FVRXlRaXhGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVN1JVRkRkRVFzVTBGQlV5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVlU3UlVGRGRFTXNZVUZCWVN4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETzBGQlEyaERMRU5CUVVNN1FVRkJReXhKUVVGQkxGRkJRVUVzUjBGRllTeE5RVUZOTzBGQlFVRXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hSUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMjVFY2tJc1NVRkJRU3g1UWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVFclJTeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeEpRVUZCTEZGQlFVRXNSMEZGYUVVc2FVTkJRWGRDTzBGQlFVRXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hSUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMFoyUXl4SlFVRkJMRTFCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRkZCUVVFc1IwRkJRU3hQUVVGQk8wRkJTVUVzU1VGQlFTeFhRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGxRVUZCTEVkQlFVRXNUMEZCUVR0QlFVRnJSU3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN1FVRkZiRVVzVFVGQlRTeDNRa0ZCZDBJc1IwRkJSeXhEUVVGRE8wVkJRVVVzV1VGQldUdEZRVUZGTzBGQlFXTXNRMEZCUXl4TFFVRkxPMFZCUTNCRkxFMUJRVTBzUTBGQlF5eEhRVUZITEVsQlFVRXNPRUpCUVdNc1JVRkJReXhEUVVGRE8wVkJRekZDTEUxQlFVMHNZVUZCWVN4SFFVRkhMRTFCUVU4c1JVRkJSU3hKUVVGTE8wbEJRMnhETEVsQlFVa3NSVUZCUlN4RFFVRkRMRWxCUVVrc1MwRkJTeXhqUVVGakxFVkJRVVU3VFVGRE9VSXNUMEZCVHl4TlFVRk5MRWxCUVVFc2IwTkJRVEpDTEVWQlFVTXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdTVUZEYmtVc1EwRkJReXhOUVVGTkxFbEJRVWtzUlVGQlJTeERRVUZETEVsQlFVa3NTMEZCU3l4blFrRkJaMElzUlVGQlJUdE5RVU4yUXl4UFFVRlBMRTFCUVUwc1NVRkJRU3h6UTBGQk5rSXNSVUZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0SlFVTnlSVHRKUVVOQkxHRkJRV0VzUTBGQlF5eERRVUZETEVOQlFVTXNPRUpCUVRoQ0xFTkJRVU1zUTBGQlF6dEpRVU5vUkN4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXp0RlFVTnlReXhEUVVGRE8wVkJSVVFzYjBKQlEwVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVjBGQlFTeERRVUZCTEU5QlFWVTdTVUZEVkN4bFFVRmxPMGxCUTJZc1dVRkJXU3hGUVVGRkxGbEJRV0U3U1VGRE0wSXNZVUZCWVN4RlFVRkZMR0ZCUVdNN1NVRkROMElzWVVGQllTeEZRVUZGTzBWQlFXTXNRMEZET1VJc1EwRkJRenRCUVVWT0xFTkJRVU03UVVGRlJDeDNRa0ZCZDBJc1EwRkJReXhUUVVGVExFZEJRVWM3UlVGRGJrTXNXVUZCV1N4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVTdSVUZEZGtNc1lVRkJZU3hGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRPMEZCUTJoRExFTkJRVU03UVVGQlF5eEpRVUZCTEZGQlFVRXNSMEZGWVN4M1FrRkJkMEk3UVVGQlFTeFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRkZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOd1EzWkRMRWxCUVVFc2RVSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJjVVFzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMEZ5UkN4SlFVRkJMRTFCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRlZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGxRVUZCTEVkQlFVRXNUMEZCUVR0QlFVVkJMRWxCUVVFc1NVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1QwRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1VVRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVVkJMRWxCUVVFc1lVRkJRU3hIUVVGQkxFOUJRVUU3UVVGVFFTeEpRVUZCTEU5QlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hwUWtGQlFTeEhRVUZCTEU5QlFVRTdRVUZCSzBNc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPMEZCWmk5RE96dEJRVWxCT3p0QlFXRmxMRk5CUVZNc2MwSkJRWE5DTEVOQlFVTTdSVUZCUlN4VFFVRlRPMFZCUVVVN1FVRkJXU3hEUVVGRExFVkJRVVU3UlVGRGVrVXNUVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJRU3c0UWtGQll5eEZRVUZETEVOQlFVTTdSVUZETVVJc1RVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlFTd3dRa0ZCVlN4RlFVRkRMRU5CUVVNN1JVRkZOVUlzVFVGQlRTeFpRVUZaTEVkQlFVY3NRMEZCUVN4TFFVRk5PMGxCUTNwQ0xFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNLMEpCUVhWQ0xFTkJRVU03UlVGRGRrTXNRMEZCUXp0RlFVVkVMRzlDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRkZCUVVFc1EwRkJRU3hQUVVGUE8wbEJRVU1zVjBGQlZ6dEpRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUVVNc05rSkJRVFpDTzBWQlFVVXNaMEpCUXpORUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRWxCUVVFc1EwRkJRU3hQUVVGSE8wbEJRMFlzV1VGQldTeEZRVUZGTEVOQlFVVTdTVUZEYUVJc1lVRkJZU3hGUVVGRkxFTkJRVVU3U1VGRGFrSXNWMEZCVnl4RlFVRkZMRU5CUVVVN1NVRkRaaXhUUVVGVExFVkJRVU03UlVGQk1FSXNaMEpCUlhCRExFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzU1VGQlNUdEpRVU5JTEV0QlFVc3NSVUZCUlN4MVFrRkJVeXhEUVVGRExGZEJRVms3U1VGRE4wSXNTMEZCU3l4RlFVRkZMSFZDUVVGVExFTkJRVU1zVFVGQlR6dEpRVU40UWl4UFFVRlBMRVZCUVVVc2VVSkJRVmNzUTBGQlF5eE5RVUZQTzBsQlF6VkNMRmxCUVZrc1JVRkJSVHRGUVVGRkxFZEJSV1lzUTBGQlF5eERRVUZETEN0Q1FVRXJRaXhEUVVNNVFpeERRVUZETEdWQlExQXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zU1VGQlFTeERRVUZCTEU5QlFVYzdTVUZCUXl4VFFVRlRMRVZCUVVVc1EwRkJSVHRKUVVGRExGbEJRVmtzUlVGQlJUdEZRVUZGTEdkQ1FVTnFReXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdTVUZCU1N4VFFVRlRMRVZCUVVNN1JVRkJaME1zWjBKQlF6VkRMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHRKUVVOSUxFVkJRVVVzUlVGQlF5eEpRVUZKTzBsQlExQXNTMEZCU3l4RlFVRkZMSFZDUVVGVExFTkJRVU1zVjBGQldUdEpRVU0zUWl4VlFVRlZMRVZCUVVVc2QwSkJRVlVzUTBGQlF6dEZRVUZMTEVkQlJUTkNMRU5CUVVNc1EwRkJReXdyUWtGQkswSXNRMEZET1VJc1EwRkJReXhsUVVOUUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzU1VGQlNUdEpRVUZETEVWQlFVVXNSVUZCUXp0RlFVRkpMRWRCUVVVc1EwRkJReXhEUVVGRExDdENRVUVyUWl4RFFVRlJMRU5CUVVNc1pVRkRla1FzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2FVSkJRVUVzUTBGQlFTeEpRVUZKTzBsQlFVTXNSVUZCUlN4RlFVRkRPMFZCUVVrc1IwRkRWaXhYUVVGWExFZEJRMVlzUTBGQlF5eERRVUZETEcxRFFVRnRReXhEUVVGRExHZENRVVYwUXl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlFTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMRkZCUVVFc1VVRkRSeXhEUVVGRExFTkJRVU1zYzBOQlFYTkRMRU5CUVVNc1pVRkRNVU1zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1NVRkJRU3hEUVVGQkxFOUJRVWM3U1VGQlF5eFBRVUZQTEVWQlFVVXNjVUpCUVU4c1EwRkJReXhaUVVGaE8wbEJRVU1zVlVGQlZTeEZRVUZGTzBWQlFVVXNaMEpCUTJoRUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRTlCUVVFc1EwRkJRU3hQUVVGTk8wbEJRMHdzU1VGQlNTeEZRVUZETEUxQlFVMDdTVUZEV0N4UFFVRlBMRVZCUVVVc1dVRkJZVHRKUVVOMFFpeExRVUZMTEVWQlFVVTdUVUZEVEN4UlFVRlJMRVZCUVVVc1UwRkJVenROUVVOdVFpeFBRVUZQTEVWQlFVVTdTVUZEV0R0RlFVRkZMRWRCUlVRc1EwRkJReXhEUVVGRExHMURRVUZ0UXl4RFFVTm9ReXhEUVVOTUxFTkJRMHdzUTBGRlFTeERRVU5LTEVOQlEwUXNRMEZCUXl4bFFVTk9MRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEVsQlFVRXNRMEZCUVN4UFFVRkhPMGxCUVVNc1kwRkJZeXhGUVVGRkxEUkNRVUZqTEVOQlFVTTdSVUZCVHl4blFrRkRla01zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1NVRkJRU3hEUVVGQkxFOUJRVWM3U1VGQlF5eExRVUZMTEVWQlFVVXNlVUpCUVZjc1EwRkJRenRGUVVGWExHZENRVU5xUXl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eFBRVUZCTEVOQlFVRXNUMEZCVFR0SlFVRkRMRWxCUVVrc1JVRkJReXhUUVVGVE8wbEJRVU1zVDBGQlR5eEZRVUZGTzBWQlFWVXNSMEZEZGtNc1EwRkJReXhEUVVGRExDdENRVUVyUWl4RFFVTTFRaXhEUVVOTUxFTkJRMFlzUTBGRFJpeERRVU5GTEVOQlFVTTdRVUZGWkR0QlFVVkJMSE5DUVVGelFpeERRVUZETEZOQlFWTXNSMEZCUnp0RlFVTnFReXhYUVVGWExFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWVHRGUVVOMFF5eFRRVUZUTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRE5VSXNRMEZCUXpzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTTNSazBzVFVGQlRTeHZRMEZCYjBNc1IwRkJSenRGUVVOc1JDeGhRVUZoTEVWQlFVVXNRMEZCUXp0RlFVTm9RaXhUUVVGVExFVkJRVVVzUTBGQlF6dEZRVU5hTEZGQlFWRXNSVUZCUlR0QlFVTmFMRU5CUVVNN1FVRkJReXhQUVVGQkxFTkJRVUVzYjBOQlFVRXNSMEZCUVN4dlEwRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOS1JpeEpRVUZCTEUxQlFVRXNSMEZCUVN4MVFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZWQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdGQlFVRXNSMEZCUVN4UFFVRkJPMEZCVFVFc1NVRkJRU3hMUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNhVUpCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTdzRRa0ZCUVN4SFFVRkJMRTlCUVVFN1FVRkJiMGNzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeDVRa0ZCUVN4WFFVRkJMR1ZCUVVFc1QwRkJRU3hyUTBGQlFTeHBRa0ZCUVN4UFFVRkJMRTlCUVVFc1VVRkJRU3huUWtGQlFTeFBRVUZCTEU5QlFVRXNXVUZCUVN4M1FrRkJRU3haUVVGQkxFTkJRVUVzVjBGQlFTeFhRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEV0QlFVRXNWMEZCUVR0QlFVRkJMRk5CUVVFc2QwSkJRVUVzUjBGQlFTeEZRVUZCTEZkQlFVRXNVMEZCUVN4WFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEZkQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2IwSkJRVUVzUjBGQlFTeDNRa0ZCUVN4SFFVRkJMRFJDUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTEZWQlFVRXNTMEZCUVN4SFFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzV1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxGZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHJRa0ZCUVN4TlFVRkJMRU5CUVVFc1UwRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1UwRkJRU3hKUVVGQkxFZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4alFVRkJMRWxCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRWxCUVVFc1dVRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEUxQlFVRXNXVUZCUVN4TlFVRkJPMEZCUlhKR0xGTkJRVk1zTmtKQlFUWkNMRU5CUVVNN1JVRkRjRVE3UVVGRFJpeERRVUZETEVWQlFVVTdSVUZEUkN4TlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGQkxHbENRVUZWTEVWQlFVTXNhVUpCUVZjc1EwRkJRenRGUVVWcVF5eEpRVUZKTEZsQlFWazdSVUZEYUVJc1NVRkJTU3hYUVVGWE8wVkJRMllzU1VGQlNTeFJRVUZSTzBWQlJWb3NTVUZEUlN4M1FrRkJkMElzUTBGQlF5eGxRVUZsTEV0QlEzaERMRzFGUVVGdlF5eERRVUZETEZOQlFWTXNSVUZET1VNN1NVRkRRU3haUVVGWkxFZEJRMVlzZDBKQlFYZENMRU5CUVVNc1lVRkJZU3hMUVVGTExFVkJRVVVzUjBGRGVrTXNRMEZCUXl4RFFVRkRMR3RFUVVGclJDeERRVUZETEVkQlEzSkVMSGRDUVVGM1FpeERRVUZETEdGQlFXRTdTVUZETlVNc1YwRkJWeXhIUVVOVUxIZENRVUYzUWl4RFFVRkRMRTFCUVUwc1MwRkJTeXhGUVVGRkxFZEJRMnhETEVOQlFVTXNRMEZCUXl3MlEwRkJOa01zUTBGQlF5eEhRVU5vUkN4M1FrRkJkMElzUTBGQlF5eE5RVUZOTzBsQlEzSkRMRkZCUVZFc1IwRkJSeXgzUWtGQlZTeERRVUZETEUxQlFVMDdSVUZET1VJc1EwRkJReXhOUVVGTkxFbEJRMHdzZDBKQlFYZENMRU5CUVVNc1pVRkJaU3hMUVVONFF5eHRSVUZCYjBNc1EwRkJReXhSUVVGUkxFVkJRemRETzBsQlEwRXNXVUZCV1N4SFFVRkhMRU5CUVVNc1EwRkJReXh4UWtGQmNVSXNRMEZCUXp0SlFVTjJReXhYUVVGWExFZEJRVWNzUTBGQlF5eERRVUZETERCQ1FVRXdRaXhEUVVGRE8wbEJRek5ETEZGQlFWRXNSMEZCUnl4M1FrRkJWU3hEUVVGRExFOUJRVTg3UlVGREwwSXNRMEZCUXl4TlFVRk5PMGxCUTB3c1dVRkJXU3hIUVVGSExFTkJRVU1zUTBGQlF5eHZRa0ZCYjBJc1EwRkJRenRKUVVOMFF5eFhRVUZYTEVkQlFVY3NRMEZCUXl4RFFVRkRMSGxDUVVGNVFpeERRVUZETzBsQlF6RkRMRkZCUVZFc1IwRkJSeXgzUWtGQlZTeERRVUZETEU5QlFVODdSVUZETDBJN1JVRkZRU3h2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhwUWtGQlFTeERRVUZCTEZkQlFWYzdTVUZEVml4VFFVRlRMRVZCUVVVc1EwRkJSVHRKUVVOaUxGZEJRVmNzUlVGQlJTeERRVUZGTzBsQlEyWXNWVUZCVlN4RlFVRkZMRU5CUVVVN1NVRkRaQ3hMUVVGTExFVkJRVVVzV1VGQllUdEpRVU53UWl4UlFVRlJMRVZCUVVVN1JVRkJVeXhuUWtGRmJrSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4SlFVRkpPMGxCUVVNc1QwRkJUeXhGUVVGRkxIbENRVUZYTEVOQlFVTXNUVUZCVHp0SlFVRkRMRVZCUVVVc1JVRkJRenRGUVVGSkxFZEJRM1pETEZkQlEwY3NRMEZCUXl4bFFVTlFMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHRKUVVGRExFOUJRVThzUlVGQlJTeDVRa0ZCVnl4RFFVRkRMRTFCUVU4N1NVRkJReXhGUVVGRkxFVkJRVU1zU1VGQlNUdEpRVUZETEV0QlFVc3NSVUZCUlN4dFFrRkJTeXhEUVVGRE8wVkJRV2RDTEVkQlEzSkZMRU5CUVVNc1EwRkJReXhsUVVGbExFVkJRVVVzWTBGRGJFSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4VlFVRlZPMGxCUTFRc1IwRkJSeXhGUVVGRExHTkJRV003U1VGRGJFSXNTVUZCU1N4RlFVRkZMR3RDUVVGSkxFTkJRVU1zVDBGQlVUdEpRVU51UWl4SlFVRkpMRVZCUVVNc2NVSkJRWEZDTzBsQlF6RkNMRTFCUVUwc1JVRkJRenRGUVVGUkxFZEJSV1FzUTBGQlF5eERRVUZETEZsQlFWa3NRMEZEVEN4RFFVRkRMR1ZCUTJJc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNhVUpCUVVFc1EwRkJRU3hWUVVGVk8wbEJRMVFzUjBGQlJ5eEZRVUZETEdWQlFXVTdTVUZEYmtJc1NVRkJTU3hGUVVGRkxHdENRVUZKTEVOQlFVTXNUMEZCVVR0SlFVTnVRaXhKUVVGSkxFVkJRVU1zYzBKQlFYTkNPMGxCUXpOQ0xFMUJRVTBzUlVGQlF6dEZRVUZSTEVkQlJXUXNRMEZCUXl4RFFVRkRMRlZCUVZVc1EwRkRTQ3hEUVVGRExFTkJRMlFzUTBGRFJ5eERRVU5MTEVOQlFVTTdRVUZGYkVJN1FVRkZRU3cyUWtGQk5rSXNRMEZCUXl4VFFVRlRMRWRCUVVjN1JVRkRlRU1zZDBKQlFYZENMRVZCUVVVc2EwSkJRVk1zUTBGQlF6dEJRVU4wUXl4RFFVRkRPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNCR1JDeEpRVUZCTEdkQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFUSkVMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVRkJMRWxCUVVFc1VVRkJRU3hIUVVVMVF5eDNRa0ZCWlR0QlFVRkJMRTlCUVVFc1EwRkJRU3hQUVVGQkxFZEJRVUVzVVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5HT1VJc1NVRkJRU3hOUVVGQkxFZEJRVUVzZFVKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3huUWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzUzBGQlFTeEhRVUZCTEU5QlFVRTdRVUZGUVN4SlFVRkJMRkZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeExRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2FVSkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4aFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVGeFJTeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEhsQ1FVRkJMRmRCUVVFc1pVRkJRU3hQUVVGQkxHdERRVUZCTEdsQ1FVRkJMRTlCUVVFc1QwRkJRU3hSUVVGQkxHZENRVUZCTEU5QlFVRXNUMEZCUVN4WlFVRkJMSGRDUVVGQkxGbEJRVUVzUTBGQlFTeFhRVUZCTEZkQlFVRXNWMEZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzYVVKQlFVRXNTMEZCUVN4WFFVRkJPMEZCUVVFc1UwRkJRU3gzUWtGQlFTeEhRVUZCTEVWQlFVRXNWMEZCUVN4VFFVRkJMRmRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNWMEZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3h2UWtGQlFTeEhRVUZCTEhkQ1FVRkJMRWRCUVVFc05FSkJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRXNWVUZCUVN4TFFVRkJMRWRCUVVFc2QwSkJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzVjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEd0Q1FVRkJMRTFCUVVFc1EwRkJRU3hUUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hUUVVGQkxFbEJRVUVzUjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMR05CUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1NVRkJRU3haUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNUVUZCUVN4WlFVRkJMRTFCUVVFN1FVRkJRU3hUUVVGQkxHZENRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1MwRkJRU3hKUVVGQkxFZEJRVUVzUjBGQlFTeGpRVUZCTEVOQlFVRXNSMEZCUVN4UFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hKUVVGQkxFdEJRVUVzUlVGQlFTeExRVUZCTEVWQlFVRXNWVUZCUVN4UlFVRkJMRmxCUVVFc1VVRkJRU3hSUVVGQkxHOUNRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRWxCUVVFc1MwRkJRU3hYUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEdWQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc1IwRkJRU3haUVVGQkxFTkJRVUVzUjBGQlFTd3lRa0ZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzUjBGQlFTeE5RVUZCTEVOQlFVRXNSMEZCUVR0QlFVRkJMRk5CUVVFc1lVRkJRU3hMUVVGQkxFVkJRVUVzU1VGQlFTeGxRVUZCTEV0QlFVRXNhVUpCUVVFc1MwRkJRU3hyUWtGQlFTeExRVUZCTEUxQlFVRXNTVUZCUVN4SFFVRkJMRXRCUVVFc1EwRkJRU3hOUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEVsQlFVRXNTMEZCUVN4VFFVRkJMRkZCUVVFc1IwRkJRU3hIUVVGQkxFbEJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNTMEZCUVN4RlFVRkJMRWxCUVVFc01rSkJRVUVzUjBGQlFTeHpRa0ZCUVN4SFFVRkJMRmxCUVVFc1UwRkJRU3cwUkVGQlFTeEpRVUZCTEdkQ1FVRkJMRTFCUVVFc1IwRkJRU3hOUVVGQkxFVkJRVUVzUzBGQlFUdEJRVVZ5UlN4TlFVRk5MR1ZCUVdVc1UwRkJVeXhuUWtGQlV5eERRVUZETzBWQlFVRXNXVUZCUVN4SFFVRkJMRWxCUVVFN1NVRkJRU3hUUVVGQkxFbEJRVUU3U1VGQlFTeGxRVUZCTEdkQ1FVTTVRanROUVVOT0xFMUJRVTBzUlVGQlJUdEpRVU5XTEVOQlFVTTdSVUZCUVR0RlFWVkVMR2xDUVVGcFFpeERRVUZCTEVWQlFVYzdTVUZEYkVJc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTzBWQlEzcENPMFZCUlVFc2IwSkJRVzlDTEVOQlFVRXNSVUZCUnp0SlFVTnlRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlFVVTdUVUZEY0VJc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTTdUVUZET1VJc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTzBsQlEzcENPMFZCUTBZN1JVRkZRU3hOUVVGTkxFTkJRVUVzUlVGQlJ6dEpRVU5RTEUxQlFVMDdUVUZCUlR0SlFVRkZMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR6dEpRVU14UWl4TlFVRk5PMDFCUTBvN1NVRkRSaXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVczdTVUZGWkN4TlFVRk5MR3RDUVVGclFpeEhRVUZITEVsQlFVRXNiME5CUVc5Q0xFVkJRVU1zWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhEUVVGRE8wbEJSWHBGTEVsQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVU42UWl4RFFVRkRMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNSMEZEZEVJc1EwRkJReXhEUVVGRExHbENRVUZwUWl4RFFVRkRPMGxCUlhoQ0xFbEJRVWtzYlVKQlFXMUNMRWRCUVVjc1NVRkJTVHRKUVVjNVFpeHZRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VFVGQlN5eFRRVUZUTEVWQlFVTTdTVUZCYTBJc1owSkJReTlDTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExGRkJRVUVzUTBGQlFTeFBRVUZQTzAxQlEwNHNaMEpCUVdkQ0xFVkJRVU1zYlVOQlFXMURPMDFCUTNCRUxGRkJRVkVzUlVGQlF5eFJRVUZSTzAxQlEycENMRXRCUVVzc1JVRkJSVHRKUVVGTkxHZENRVVZpTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHROUVVORkxGTkJRVk1zUlVGQlF5dzJRa0ZCTmtJN1RVRkRka01zWlVGQldTeDNRa0ZCZDBJN1RVRkRjRU1zVDBGQlR5eEZRVUZGTEVOQlFVRXNTMEZCVFR0UlFVTmlMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU03VlVGQlJTeE5RVUZOTEVWQlFVVTdVVUZCU3l4RFFVRkRMRU5CUVVNN1VVRkRMMElzU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4VlFVRlZMRU5CUXpOQ0xFMUJRVTBzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXp0VlFVRkZMRTFCUVUwc1JVRkJSVHRSUVVGTkxFTkJRVU1zUTBGQlF5eEZRVU4wUXl4WlFVRk5MRWRCUVVjc1EwRkRXQ3hEUVVGRE8xRkJRMFFzU1VGQlFTeDNRa0ZCWlN4RlFVRkRMR3RDUVVGclFpeERRVUZETzAxQlEzSkRPMGxCUVVVc1owSkJSVVlzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMDFCUVVzc1UwRkJVeXhGUVVGRE8wbEJRWGRDTEVkQlEzQkRMR2RDUVVGblFpeERRVUZETEVsQlEyWXNRMEZCUXl4bFFVTk9MRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdE5RVUZMTEZOQlFWTXNSVUZCUXp0SlFVRXlRaXhIUVVkMlF5eEpRVUZCTEc5Q1FVRmpMRVZCUVVNc2EwSkJRV3RDTEVOQlFVTXNSVUZEYkVNc2JVSkJRVzFDTEdsQ1FVTnNRaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdUVUZCU3l4VFFVRlRMRVZCUVVNN1NVRkJkMElzWjBKQlEzSkRMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1NVRkJTVHROUVVOSUxFbEJRVWtzUlVGRFJpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1IwRkJSeXd3UWtGQlVTeERRVUZETEZkQlFWY3NSMEZCUnl3d1FrRkJVU3hEUVVGRExFbEJRM0pFTzAxQlEwUXNTVUZCU1N4RlFVRkZMREJDUVVGUkxFTkJRVU1zUlVGQlJ6dE5RVU5zUWl4TFFVRkxMRVZCUVVVc2RVSkJRVk1zUTBGQlF6dEpRVUZuUWl4RFFVTnNReXhEUVVORkxFTkJSVW9zUTBGRFF5eERRVU5FTEVOQlEwNHNRMEZCUXp0RlFVVldPMEZCUTBZN1FVRkJReXhsUVVGQkxFTkJiRVpMTEdWQlFXVXNhMEpCUzBjN1JVRkRjRUlzUTBGQlF5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNN1FVRkRaaXhEUVVGRE8wRkJRVUVzWlVGQlFTeERRVkJITEdWQlFXVXNaVUZUUVR0RlFVTnFRaXhuUWtGQlowSXNSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF6dEJRVU55UXl4RFFVRkRPMEZCUVVFc1NVRkJRU3hSUVVGQkxFZEJlVVZaTEdWQlFXVTdRVUZCUVN4UFFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxGRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3TzBGREwwWTVRaXhKUVVGQkxGZEJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VlFVRkJMRWRCUVVFc1QwRkJRVHRCUVVkQkxFbEJRVUVzWjBKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQk1rUXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlJUTkVMRTFCUVUwc1pVRkJaU3hIUVVGSkxFdEJRVXNzU1VGQlN6dEZRVU5xUXl4UFFVRlBPMGxCUTB3c1owSkJRV2RDTEVWQlFVVXNTVUZCUVN3NFFrRkJiVUlzUlVGQlF5eExRVUZMTzBWQlF6ZERMRU5CUVVNN1FVRkRTQ3hEUVVGRE8wRkJRVU1zU1VGQlFTeFJRVUZCTEVkQlJXRXNTVUZCUVN4dFFrRkJUeXhGUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETEhkQ1FVRmxMRU5CUVVNN1FVRkJRU3hQUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEZGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTmFlRVFzU1VGQlFTeDVRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVUY1UkN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEUVhwRUxFbEJRVUVzVFVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZGUVN4SlFVRkJMRkZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRWxCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZGUVN4SlFVRkJMR0ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJUVUVzU1VGQlFTeFZRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeExRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2FVSkJRVUVzUjBGQlFTeFBRVUZCTzBGQlRXbERMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVVnFReXhOUVVGTkxIVkNRVUYxUWl4SFFVRkhMRU5CUVVNN1JVRkRMMElzWTBGQll6dEZRVU5rTEdGQlFXRTdSVUZEWWl4SlFVRkpPMFZCUTBvc1MwRkJTenRGUVVOTUxGRkJRVkU3UlVGRFVpeFJRVUZSTzBWQlExSTdRVUZEUml4RFFVRkRMRXRCUVVzN1JVRkRTaXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZCTERoQ1FVRmpMRVZCUVVNc1EwRkJRenRGUVVVeFFpeE5RVUZOTEUxQlFVMHNaMEpCUTFZc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNTVUZCUVN4RFFVRkJMRTlCUVVjN1NVRkRSaXhQUVVGUExFVkJRVVVzY1VKQlFVOHNRMEZCUXl4SlFVRkxPMGxCUTNSQ0xHRkJRV0VzUlVGQlJTdzBRa0ZCWXl4RFFVRkRMRTFCUVU4N1NVRkRja01zWTBGQll5eEZRVUZGTERSQ1FVRmpMRU5CUVVNc1lVRkJZenRKUVVNM1F5eFRRVUZUTEVWQlFVTXNjME5CUVhORE8wbEJRMmhFTEVkQlFVY3NSVUZCUlR0RlFVRkZMR2RDUVVWUUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR2xDUVVGQkxFTkJRVUVzVFVGQlRUdEpRVU5NTEZOQlFWTXNSVUZCUXl4elJFRkJjMFE3U1VGRGFFVXNUMEZCVHl4RlFVRkZMR2REUVVGakxFTkJRVU1zVDBGQlVUdEpRVU5vUXl4TlFVRk5PMGxCUTA0c1QwRkJUeXhGUVVGRk8wVkJRVk1zUjBGRmFrSXNRMEZCUXl4RFFVRkRMRzFDUVVGdFFpeERRVU5vUWl4RFFVRkRMR1ZCUTFRc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNhVUpCUVVFc1EwRkJRU3hOUVVGTk8wbEJRMHdzVTBGQlV5eEZRVUZETEhGRVFVRnhSRHRKUVVNdlJDeFBRVUZQTEVWQlFVVXNaME5CUVdNc1EwRkJReXhUUVVGVk8wbEJRMnhETEU5QlFVOHNSVUZCUlR0RlFVRlRMRWRCUldwQ0xFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlEwd3NRMEZEVEN4RFFVTk9PMFZCUlVRc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1VVRkJRU3hEUVVGQkxFOUJRVTg3U1VGQlF5eFRRVUZUTEVWQlFVTXNkVU5CUVhWRE8wbEJRVU1zVFVGQlRTeEZRVUZGTzBWQlFVOHNaMEpCUTNoRkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRWxCUVVFc1EwRkJRU3hQUVVGSE8wbEJRMFlzVDBGQlR5eEZRVUZGTEhGQ1FVRlBMRU5CUVVNc1NVRkJTenRKUVVOMFFpeGhRVUZoTEVWQlFVVXNORUpCUVdNc1EwRkJReXhIUVVGSk8wbEJRMnhETEU5QlFVOHNSVUZCUlN4RFFVRkZPMGxCUTFnc1UwRkJVeXhGUVVGRE8wVkJRU3RETEdkQ1FVVjZSQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4cFFrRkJRU3hEUVVGQkxFbEJRVWs3U1VGRFNDeEpRVUZKTEVWQlFVVXNNRUpCUVZFc1EwRkJReXhOUVVGUE8wbEJRM1JDTEZOQlFWTXNSVUZCUXp0RlFVRTJSQ3hEUVVONFJTeERRVUZETEdWQlEwWXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zYVVKQlFVRXNRMEZCUVN4SlFVRkpPMGxCUVVNc1QwRkJUeXhGUVVGRkxIbENRVUZYTEVOQlFVTXNVMEZCVlR0SlFVRkRMRVZCUVVVc1JVRkJRenRGUVVGSkxFZEJRekZETEVOQlFVTXNRMEZCUXl4dlFrRkJiMElzUTBGRGJrSXNRMEZEU0N4RFFVRkRMR1ZCUTA0c1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNTVUZCUVN4RFFVRkJMRTlCUVVjN1NVRkRSaXhQUVVGUExFVkJRVVVzY1VKQlFVOHNRMEZCUXl4SlFVRkxPMGxCUTNSQ0xFOUJRVThzUlVGQlJTeERRVUZGTzBsQlExZ3NZMEZCWXl4RlFVRkZMRFJDUVVGakxFTkJRVU1zV1VGQllUdEpRVU0xUXl4VFFVRlRMRVZCUVVNN1JVRkJaMFFzWjBKQlJURkVMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEVsQlFVRXNRMEZCUVN4UFFVRkhPMGxCUVVNc1QwRkJUeXhGUVVGRkxIRkNRVUZQTEVOQlFVTTdSVUZCU3l4blFrRkRla0lzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1ZVRkJRU3hEUVVGQkxFOUJRVk03U1VGQlF5eFBRVUZQTEVWQlFVVXNZVUZCWXp0SlFVRkRMRkZCUVZFc1JVRkJSVHRGUVVGSExFTkJRVVVzUTBGQlF5eGxRVU51UkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRWxCUVVrN1NVRkRTQ3hQUVVGUExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4TlFVRlBPMGxCUXpWQ0xFVkJRVVVzUlVGQlF5eEpRVUZKTzBsQlExQXNWVUZCVlN4RlFVRkZMRU5CUVVVN1NVRkRaQ3hUUVVGVExFVkJRVU03UlVGQmNVUXNaMEpCUlM5RUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4cFFrRkJVeXhKUVVGaExFTkJRVU1zUzBGQlF5eEZRVUZGTEV0QlFVa3NTVUZCUVN4dlFrRkJZeXhGUVVGRExHRkJRV0VzUTBGQlJTeEhRVU40UkN4RFFVTklMRU5CUVVNc1JVRkRUQ3hSUVVGUkxFbEJRVWtzUzBGQlN5eHBRa0ZCU1N4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eHBRa0ZCUVN4RFFVRkJMRWxCUVVrc1VVRkJSeXhIUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVVXNTMEZCU1N4TFFVRk5MRVZCUVZFc1EwRkRNVVFzUTBGQlF5eGxRVVZPTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHbENRVUZCTEVOQlFVRXNTVUZCU1R0SlFVTklMRTFCUVUwc1JVRkJSU3hEUVVGRk8wbEJRMVlzVTBGQlV5eEZRVUZGTEVOQlFVVTdTVUZEWWl4WlFVRlpMRVZCUVVVc1EwRkJSVHRKUVVOb1FpeFBRVUZQTEVWQlFVVXNlVUpCUVZjc1EwRkJReXhOUVVGUE8wbEJRelZDTEVWQlFVVXNSVUZCUXp0RlFVRkpMRWRCUlU0c1EwRkJReXhEUVVGRExHMUNRVUZ0UWl4RlFVRkZMR05CUTNSQ0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVR0SlFVRlJMRWRCUVVjc1JVRkJRenRGUVVGdlFpeEhRVU0zUWl4RFFVRkRMRU5CUVVNc2RVSkJRWFZDTEVWQlFVVXNRMEZCUXl4alFVRmpMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRelZETEVOQlFVTXNaVUZEVkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3U1VGQlVTeEhRVUZITEVWQlFVTTdSVUZCYjBJc1IwRkROMElzUTBGQlF5eERRVUZETEhWQ1FVRjFRaXhEUVVOd1FpeERRVUZETEVOQlExWXNRMEZEUnl4RFFVTkRMRU5CUVVNN1FVRkZaQ3hEUVVGRE8wRkJSVVFzZFVKQlFYVkNMRU5CUVVNc1UwRkJVeXhIUVVGSE8wVkJRMnhETzBGQlEwWTdRVUZEUVR0RlFVTkZMR05CUVdNc1JVRkJSU3hyUWtGQlV5eERRVUZETEUxQlFVMDdSVUZEYUVNN1FVRkRSanRCUVVOQk8wVkJRMFVzWVVGQllTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRGUVVNdlFqdEJRVU5HTzBGQlEwRTdSVUZEUlN4SlFVRkpMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTzBWQlEzUkNPMEZCUTBZN1FVRkRRVHRGUVVORkxFdEJRVXNzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwN1JVRkRka0k3UVVGRFJqdEJRVU5CTzBWQlEwVXNVVUZCVVN4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNUdEZRVU40UWp0QlFVTkdPMEZCUTBFN1JVRkRSU3hSUVVGUkxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpPMFZCUTNoQ08wRkJRMFk3UVVGRFFUdEZRVU5GTEZGQlFWRXNSVUZCUlN4clFrRkJVeXhEUVVGRE8wRkJRM1JDTEVOQlFVTTdRVUZCUXl4SlFVRkJMRkZCUVVFc1IwRkZZU3gxUWtGQmRVSTdRVUZCUVN4UFFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxGRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU51U25SRExFbEJRVUVzZVVKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQmFVVXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEUVdwRkxFbEJRVUVzWjBOQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQkswUXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEwRXZSQ3hKUVVGQkxFMUJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHVkJRVUVzUjBGQlFTeFBRVUZCTzBGQlJVRXNTVUZCUVN4UlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4SlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4WFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4aFFVRkJMRWRCUVVFc1QwRkJRVHRCUVZOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzUzBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR2xDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVUUwUkN4VFFVRkJMSFZDUVVGQkxFZEJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRlZCUVVFc1IwRkJRU3hIUVVGQkxFdEJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRTdRVUZGTlVRc1RVRkJUU3dyUWtGQkswSXNSMEZCUnl4RFFVRkRPMFZCUTNaRExHRkJRV0U3UlVGRFlpeEpRVUZKTzBWQlEwb3NVVUZCVVR0RlFVTlNPMEZCUTBZc1EwRkJReXhMUVVGTE8wVkJRMG9zVFVGQlRTeERRVUZETEVkQlFVY3NTVUZCUVN3NFFrRkJZeXhGUVVGRExFTkJRVU03UlVGRk1VSXNiMEpCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNVVUZCUVN4RFFVRkJMRTlCUVU4N1NVRkJReXhUUVVGVExFVkJRVU03UlVGQmIwTXNaMEpCUTNKRUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRWxCUVVFc1EwRkJRU3hQUVVGSE8wbEJRMFlzVDBGQlR5eEZRVUZGTEhGQ1FVRlBMRU5CUVVNc1NVRkJTenRKUVVOMFFpeGhRVUZoTEVWQlFVVXNORUpCUVdNc1EwRkJReXhIUVVGSk8wbEJRMnhETEU5QlFVOHNSVUZCUlN4RFFVRkZPMGxCUTFnc1UwRkJVeXhGUVVGRE8wVkJRVFJETEdkQ1FVVjBSQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4cFFrRkJRU3hEUVVGQkxFbEJRVWs3U1VGRFNDeEpRVUZKTEVWQlFVVXNNRUpCUVZFc1EwRkJReXhOUVVGUE8wbEJRM1JDTEV0QlFVc3NSVUZCUlN4MVFrRkJVeXhEUVVGRExGbEJRV0U3U1VGRE9VSXNVMEZCVXl4RlFVRkRPMFZCUVRCRUxFTkJRM0pGTEVOQlFVTXNaVUZEUml4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eFhRVUZCTEVOQlFVRXNUMEZCVlR0SlFVTlVMRTlCUVU4c1JVRkJSU3dyUWtGQmFVSXNRMEZCUXl4RlFVRkhPMGxCUXpsQ0xGVkJRVlVzUlVGQlJTeDVRa0ZCVnl4RFFVRkRPMFZCUVVzc1IwRkZOVUlzUTBGQlF5eERRVUZETEhOQ1FVRnpRaXhEUVVObUxFTkJRMVFzUTBGQlF5eGxRVU5PTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExFbEJRVUVzUTBGQlFTeFBRVUZITzBsQlEwWXNUMEZCVHl4RlFVRkZMSEZDUVVGUExFTkJRVU1zU1VGQlN6dEpRVU4wUWl4UFFVRlBMRVZCUVVVc1EwRkJSVHRKUVVOWUxHTkJRV01zUlVGQlJTdzBRa0ZCWXl4RFFVRkRMRmxCUVdFN1NVRkROVU1zVTBGQlV5eEZRVUZETzBWQlFUWkRMR2RDUVVWMlJDeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhKUVVGQkxFTkJRVUVzVDBGQlJ6dEpRVUZETEU5QlFVOHNSVUZCUlN4eFFrRkJUeXhEUVVGRE8wVkJRVXNzWjBKQlEzcENMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEZWQlFVRXNRMEZCUVN4UFFVRlRPMGxCUVVNc1QwRkJUeXhGUVVGRkxHRkJRV003U1VGQlF5eFJRVUZSTEVWQlFVVTdSVUZCUnl4RFFVRkZMRU5CUVVNc1pVRkRia1FzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1YwRkJRU3hEUVVGQkxFOUJRVlU3U1VGRFZDeFBRVUZQTEVWQlFVVXNLMEpCUVdsQ0xFTkJRVU1zUlVGQlJ6dEpRVU01UWl4VlFVRlZMRVZCUVVVc1EwRkJSVHRKUVVOa0xGTkJRVk1zUlVGQlF6dEZRVUZyUkN4blFrRkZOVVFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRmxCUVVrc1NVRkJVU3hEUVVGRExFdEJRVU1zUlVGQlJTeExRVUZKTEVsQlFVRXNiMEpCUVdNc1JVRkJReXhoUVVGaExFTkJRVVVzUjBGRGVFTXNRMEZEVkN4RFFVTkdMRU5CUVVNc1pVRkZUaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4WFFVRkJMRU5CUVVFc1QwRkJWVHRKUVVOVUxFdEJRVXNzUlVGQlJTeDFRa0ZCVXl4RFFVRkRMR1ZCUVdkQ08wbEJRMnBETEUxQlFVMHNSVUZCUlN4RFFVRkZPMGxCUTFZc1UwRkJVeXhGUVVGRkxFTkJRVVU3U1VGRFlpeFpRVUZaTEVWQlFVVXNRMEZCUlR0SlFVTm9RaXhQUVVGUExFVkJRVVVzSzBKQlFXbENMRU5CUVVNN1JVRkJSeXhIUVVVM1FpeERRVUZETEVOQlFVTXNlVUpCUVhsQ0xFVkJRVVVzWTBGRE5VSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8wbEJRMFVzU1VGQlNTeEZRVUZETEc5SlFVRnZTVHRKUVVONlNTeE5RVUZOTEVWQlFVTXNVVUZCVVR0SlFVTm1MRWxCUVVrc1JVRkJReXhOUVVGTk8wbEJRMWdzUjBGQlJ5eEZRVUZETEc5Q1FVRnZRanRKUVVONFFpeEhRVUZITEVWQlFVTXNjVUpCUVhGQ08wbEJRM3BDTEV0QlFVc3NSVUZCUlR0TlFVRkZMRXRCUVVzc1JVRkJSVHRKUVVFclFqdEZRVUZGTEVkQlJXaEVMRU5CUVVNc1EwRkJReXh2UWtGQmIwSXNRMEZEZEVJc1EwRkJReXhEUVVOTUxFTkJRMU1zUTBGQlF5eGxRVVZpTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExFbEJRVUVzUTBGQlFTeFBRVUZITzBsQlEwWXNUMEZCVHl4RlFVRkZMSEZDUVVGUExFTkJRVU1zU1VGQlN6dEpRVU4wUWl4aFFVRmhMRVZCUVVVc05FSkJRV01zUTBGQlF5eE5RVUZQTzBsQlEzSkRMR05CUVdNc1JVRkJSU3cwUWtGQll5eERRVUZETEZsQlFXRTdTVUZETlVNc1QwRkJUeXhGUVVGRkxFTkJRVVU3U1VGRFdDeFRRVUZUTEVWQlFVTTdSVUZCYlVNc1owSkJSVGRETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExFOUJRVUVzUTBGQlFTeFBRVUZOTzBsQlEwd3NVMEZCVXl4RlFVRkRMR2RFUVVGblJEdEpRVU14UkN4SlFVRkpMRVZCUVVNc1owSkJRV2RDTzBsQlEzSkNMRTlCUVU4c1JVRkJSVHRGUVVGVExFZEJSV3BDTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUTBnc1EwRkJReXhsUVVOVUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRTlCUVVFc1EwRkJRU3hQUVVGTk8wbEJRMHdzVTBGQlV5eEZRVUZETEd0RVFVRnJSRHRKUVVNMVJDeEpRVUZKTEVWQlFVTXNWMEZCVnp0SlFVTm9RaXhQUVVGUExFVkJRVVU3UlVGQlV5eEhRVVZxUWl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVOTUxFTkJRMHdzUTBGRFJTeERRVUZETzBGQlJXUXNRMEZCUXp0QlFVVkVMQ3RDUVVFclFpeERRVUZETEZOQlFWTXNSMEZCUnp0RlFVTXhReXhoUVVGaExFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TlFVRk5PMFZCUXk5Q0xFbEJRVWtzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwN1JVRkRkRUlzVVVGQlVTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1NVRkJTVHRGUVVONFFpeFJRVUZSTEVWQlFVVXNhMEpCUVZNc1EwRkJRenRCUVVOMFFpeERRVUZETzBGQlFVTXNTVUZCUVN4UlFVRkJMRWRCUldFc0swSkJRU3RDTzBGQlFVRXNUMEZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hSUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdRVU42U0RsRExFbEJRVUVzVFVGQlFTeEhRVUZCTEhWQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVjBGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMSFZDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hKUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNTMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkxRU3hKUVVGQkxHVkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4WFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN3MFFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1YwRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1kwRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEdGQlFVRXNSMEZCUVN4UFFVRkJPMEZCVFVFc1NVRkJRU3hSUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNUMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxDdENRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTdzRRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNLMEpCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFZRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1YwRkJRU3hIUVVGQkxFOUJRVUU3UVVGRlFTeEpRVUZCTEdkRFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFXMUdMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVR0QlFVRkJMRk5CUVVFc2VVSkJRVUVzVjBGQlFTeGxRVUZCTEU5QlFVRXNhME5CUVVFc2FVSkJRVUVzVDBGQlFTeFBRVUZCTEZGQlFVRXNaMEpCUVVFc1QwRkJRU3hQUVVGQkxGbEJRVUVzZDBKQlFVRXNXVUZCUVN4RFFVRkJMRmRCUVVFc1YwRkJRU3hYUVVGQkxFZEJRVUVzWjBKQlFVRXNSMEZCUVN4cFFrRkJRU3hMUVVGQkxGZEJRVUU3UVVGQlFTeFRRVUZCTEhkQ1FVRkJMRWRCUVVFc1JVRkJRU3hYUVVGQkxGTkJRVUVzVjBGQlFTeEpRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hYUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEc5Q1FVRkJMRWRCUVVFc2QwSkJRVUVzUjBGQlFTdzBRa0ZCUVN4UFFVRkJMRVZCUVVFc1IwRkJRU3hWUVVGQkxFdEJRVUVzUjBGQlFTeDNRa0ZCUVN4RFFVRkJMRmRCUVVFc1QwRkJRU3hMUVVGQkxFbEJRVUVzUzBGQlFTeERRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRmxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEZOQlFVRXNUVUZCUVN4WFFVRkJMSEZDUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNTVUZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzVjBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2EwSkJRVUVzVFVGQlFTeERRVUZCTEZOQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1NVRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEZOQlFVRXNTVUZCUVN4SFFVRkJMSEZDUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzWTBGQlFTeEpRVUZCTEV0QlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeExRVUZCTEUxQlFVRXNRMEZCUVN4alFVRkJMRU5CUVVFc1RVRkJRU3hGUVVGQkxFZEJRVUVzUlVGQlFTeEpRVUZCTEZsQlFVRXNUVUZCUVN4RFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFRRVUZCTEUxQlFVRXNRMEZCUVN4UFFVRkJMRWRCUVVFc1IwRkJRU3hOUVVGQkxFdEJRVUVzU1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1JVRkJRU3hOUVVGQkxGbEJRVUVzVFVGQlFUdEJRVUZCTEZOQlFVRXNaMEpCUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzUlVGQlFTeExRVUZCTEVsQlFVRXNSMEZCUVN4SFFVRkJMR05CUVVFc1EwRkJRU3hIUVVGQkxFOUJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNTVUZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hEUVVGQkxFZEJRVUVzUlVGQlFTeEhRVUZCTEVsQlFVRXNTMEZCUVN4RlFVRkJMRXRCUVVFc1JVRkJRU3hWUVVGQkxGRkJRVUVzV1VGQlFTeFJRVUZCTEZGQlFVRXNiMEpCUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzU1VGQlFTeExRVUZCTEZkQlFVRXNSMEZCUVR0QlFVRkJMRk5CUVVFc1pVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeEhRVUZCTEZsQlFVRXNRMEZCUVN4SFFVRkJMREpDUVVGQkxFZEJRVUVzWjBKQlFVRXNSMEZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeGhRVUZCTEV0QlFVRXNSVUZCUVN4SlFVRkJMR1ZCUVVFc1MwRkJRU3hwUWtGQlFTeExRVUZCTEd0Q1FVRkJMRXRCUVVFc1RVRkJRU3hKUVVGQkxFZEJRVUVzUzBGQlFTeERRVUZCTEUxQlFVRXNRMEZCUVN4WFFVRkJMRTlCUVVFc1NVRkJRU3hMUVVGQkxGTkJRVUVzVVVGQlFTeEhRVUZCTEVkQlFVRXNTVUZCUVN4RFFVRkJMRWxCUVVFc1EwRkJRU3hMUVVGQkxFVkJRVUVzU1VGQlFTd3lRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFZEJRVUVzV1VGQlFTeFRRVUZCTERSRVFVRkJMRWxCUVVFc1owSkJRVUVzVFVGQlFTeEhRVUZCTEUxQlFVRXNSVUZCUVN4TFFVRkJPMEZCUlhCRkxFMUJRVTBzZDBKQlFYZENMRk5CUVZNc1owSkJRVk1zUTBGQlF6dEZRVUZCTEZsQlFVRXNSMEZCUVN4SlFVRkJPMGxCUVVFc1UwRkJRU3hKUVVGQk8wbEJRVUVzWlVGQlFTeG5Ra0UyUW5SRU8wMUJRMDRzTWtKQlFUSkNMRVZCUVVVN1NVRkRMMElzUTBGQlF6dEpRVUZCTEdWQlFVRXNkVUpCUldVc1IwRkJSeXhKUVVGTE8wMUJRM1JDTEVsQlFVazdVVUZEUml4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGQkxEaENRVUZqTEVWQlFVTXNSMEZCUnl4RFFVRkRPMUZCUTNCRExFMUJRVTBzU1VGQlNTeEhRVUZITEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFdEJRVXNzUTBGQlF6dFJRVU42UXl4UFFVRlBMRWxCUVVrc1EwRkJReXhOUVVGTkxFdEJRVXNzUlVGQlJTeEhRVUZITEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF6dE5RVU42UkN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3VVVGRFZpeFBRVUZQTEVkQlFVYzdUVUZEV2p0SlFVTkdMRU5CUVVNN1NVRkJRU3hsUVVGQkxEUkNRVVZ0UWl4TlFVRk5PMDFCUTNoQ0xHOUNRVU5GTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRSUVVGTExGTkJRVk1zUlVGQlF6dE5RVUZwUXl4SFFVTTNReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTXNSVUZEY0VJc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNc1JVRkRlRUlzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVTnFRaXhEUVVGRE8wbEJSVllzUTBGQlF6dEpRVUZCTEdWQlFVRXNNRUpCUld0Q0xFbEJRVWtzU1VGQlN6dE5RVU14UWl4TlFVRk5PMUZCUVVVN1RVRkJSU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVODdUVUZETVVJc1RVRkJUVHRSUVVGRkxFMUJRVTA3VVVGQlJUdE5RVUZSTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF6dE5RVU0xUXl4dlFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRTdVVUZCU3l4VFFVRlRMRVZCUVVNN1RVRkJiME1zUjBGRGFFUXNUVUZCVFN4blFrRkRUQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNNa0pCUTBVc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEdGQlFVc3NRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJUU3hEUVVGRExHVkJRM1JDTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHVkJRVUVzUTBGQlFTeGxRVUZsTzFGQlFVTXNTVUZCU1N4RlFVRkZMRTFCUVU4N1VVRkJReXhYUVVGWExFVkJRVVVzUTBGQlJUdFJRVUZETEVsQlFVa3NSVUZCUXp0TlFVRlJMRU5CUVVVc1EwRkRNMFFzUTBGQlF5eEhRVVZPTEVWQlEwUXNSVUZEUVN4UFFVRlBMR2RDUVVOT0xFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN3eVFrRkRSU3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNZVUZCU3l4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGTkxFTkJRVU1zWlVGRGRrSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zWlVGQlFTeERRVUZCTEdWQlFXVTdVVUZCUXl4SlFVRkpMRVZCUVVVc1QwRkJVVHRSUVVGRExGZEJRVmNzUlVGQlJTeERRVUZGTzFGQlFVTXNTVUZCU1N4RlFVRkRPMDFCUVZNc1EwRkJSU3hEUVVNM1JDeERRVUZETEVkQlJVNHNSVUZGUXl4RFFVRkRPMGxCUlZZc1EwRkJRenRKUVVGQkxHVkJRVUVzY1VKQlJWa3NUVUZCVFR0TlFVRkJMRWxCUVVFc2NVSkJRVUVzUlVGQlFTeHpRa0ZCUVR0TlFVTnFRaXhKUVVGSkxFbEJRVWs3VFVGRFVpeE5RVUZOTEUxQlFVMHNSMEZCU1N4SFFVRkZMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEZOQlFWTXNRMEZCUlN4SFFVRkZPMDFCUlRsRExFMUJRVTA3VVVGQlJTeE5RVUZOTzFGQlFVVTdUVUZCWjBJc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTzAxQlF6bERMRTFCUVUwN1VVRkRTaXhKUVVGSk8xRkJRMG9zVTBGQlV5eEZRVUZGTzFWQlFVVTdVVUZCU3p0TlFVTndRaXhEUVVGRExFZEJRVWNzVFVGQlRUdE5RVVZXTEVsQlFVa3NTVUZCU1N4TFFVRkxMR2xDUVVGWkxFTkJRVU1zWVVGQllTeEZRVUZGTzFGQlEzWkRMRWxCUVVrc1IwRkJSeXhEUVVOTU8xVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlF6dFZRVUZGTEV0QlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFbEJRVWs3VVVGQlJTeERRVUZETEVOQlEzQkZPMDFCUTBnc1EwRkJReXhOUVVGTkxFbEJRVWtzU1VGQlNTeExRVUZMTEdsQ1FVRlpMRU5CUVVNc2JVSkJRVzFDTEVWQlFVVTdVVUZEY0VRc1NVRkJTU3hIUVVGSExFbEJRVWs3VFVGRFlpeERRVUZETEUxQlFVMHNTVUZCU1N4SlFVRkpMRXRCUVVzc2FVSkJRVmtzUTBGQlF5eFJRVUZSTEVWQlFVVTdVVUZEZWtNc1NVRkJTU3hIUVVGSExFTkJRVU03VlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zVTBGQlV5eERRVUZETzFWQlFVVXNTMEZCU3l4RlFVRkZPMUZCUVVzc1EwRkJReXhEUVVGRE8wMUJRek5FTzAxQlJVRXNUVUZCVFN4eFFrRkJjVUlzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1IwRkRha1FzWlVGQlpTeGhRVUZtTEdWQlFXVXNkVUpCUVdZc1pVRkJaU3hEUVVGSExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUXpGRExFbEJRVWs3VFVGRlVpeHZRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VVVGQlN5eFRRVUZUTEVWQlFVTTdUVUZCZVVJc1IwRkRjRU1zUTBGQlFTeE5RVUZOTEdGQlFVNHNUVUZCVFN4M1FrRkJRU3h4UWtGQlFTeEhRVUZPTEUxQlFVMHNRMEZCUlN4M1FrRkJkMElzWTBGQlFTeHhRa0ZCUVN4MVFrRkJhRU1zY1VKQlFVRXNRMEZCYTBNc1pVRkJaU3hOUVVGTExGTkJRVk1zU1VGREwwUXNRMEZCUVN4TlFVRk5MR0ZCUVU0c1RVRkJUU3gzUWtGQlFTeHpRa0ZCUVN4SFFVRk9MRTFCUVUwc1EwRkJSU3gzUWtGQmQwSXNZMEZCUVN4elFrRkJRU3gxUWtGQmFFTXNjMEpCUVVFc1EwRkJhME1zWlVGQlpTeE5RVU12UXl4dlJVRkJiME1zUTBGQlF5eGhRVUZoTEVsQlEzSkVMRTFCUVUwc1lVRkJUaXhOUVVGTkxHVkJRVTRzVFVGQlRTeERRVUZGTEhkQ1FVRjNRaXhKUVVNdlFpeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4RFFVRkRMRTFCUVUwc1MwRkJTeXhEUVVGRkxHZENRVU14UkN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5dzRRa0ZCUVN4RFFVRkJMRTlCUVRaQ08xRkJRelZDTEhkQ1FVRjNRaXhGUVVGRkxFMUJRVTBzUTBGQlF6dE5RVUY1UWl4RFFVTXpSQ3hEUVVGRExFZEJRMEVzU1VGQlNTeGxRVXRTTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRSUVVGTExGTkJRVk1zUlVGQlF6dE5RVUV5UWl4blFrRkRlRU1zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1YwRkJRU3hEUVVGQkxFOUJRVlU3VVVGRFZDeExRVUZMTEVWQlFVVXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGUE8xRkJReTlDTEZWQlFWVXNSVUZCUlN4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTg3VVVGRGNFTXNUMEZCVHl4RlFVRkZMSEZDUVVGeFFpeGhRVUZ5UWl4eFFrRkJjVUlzZFVKQlFYSkNMSEZDUVVGeFFpeERRVUZGTEU5QlFWRTdVVUZEZUVNc1VVRkJVU3hGUVVOT0xFbEJRVUVzYjBKQlFXTXNSVUZCUXl4eFFrRkJjVUlzWVVGQmNrSXNjVUpCUVhGQ0xIVkNRVUZ5UWl4eFFrRkJjVUlzUTBGQlJTeE5RVUZOTEVOQlFVTXNTMEZETjBNc2NVSkJRWEZDTEdGQlFYSkNMSEZDUVVGeFFpeDFRa0ZCY2tJc2NVSkJRWEZDTEVOQlFVVXNUVUZCVFN4RFFVTTVRanRSUVVORUxFbEJRVWs3VFVGQlFTeERRVU5NTEVOQlEwVXNRMEZCUXl4bFFVVk9MRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEZkQlFVRXNRMEZCUVN4UFFVRlZPMUZCUTFRc1UwRkJVeXhGUVVGRExHMURRVUZ0UXp0UlFVTTNReXhQUVVGUExFVkJRVVVzSzBKQlFXbENMRU5CUVVNc1JVRkJSenRSUVVNNVFpeFZRVUZWTEVWQlFVVXNlVUpCUVZjc1EwRkJRenROUVVGTExFZEJSVFZDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExGbEJRVmtzUTBGRGJFSXNRMEZCUXl4bFFVTmlMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEZkQlFVRXNRMEZCUVN4UFFVRlZPMUZCUTFRc1UwRkJVeXhGUVVGRExITkRRVUZ6UXp0UlFVTm9SQ3hQUVVGUExFVkJRVVVzSzBKQlFXbENMRU5CUVVNc1JVRkJSenRSUVVNNVFpeExRVUZMTEVWQlFVVXNkVUpCUVZNc1EwRkJReXhsUVVGblFqdFJRVU5xUXl4TFFVRkxMRVZCUVVVc2QwSkJRVlVzUTBGQlF5eE5RVUZQTzFGQlEzcENMRTFCUVUwc1JVRkJSU3hGUVVGSE8xRkJRMWdzVTBGQlV5eEZRVUZGTzAxQlFVVXNSMEZGV2l4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5d3dRa0ZCTUVJc1EwRkRhRU1zUTBGQlF5eGxRVVZpTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRSUVVGTExGTkJRVk1zUlVGQlJTeEpRVUZCTEcxQ1FVRlZMRVZCUVVNc01rSkJRVEpDTzAxQlFVVXNSMEZCUlN4TlFVRlpMRU5CUVVNc1pVRkRka1VzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMUZCUVVzc1UwRkJVeXhGUVVGRE8wMUJRWGxDTEVkQlEzSkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVUZGTEVsQlFVazdVVUZCUlR0TlFVRk5MRU5CUVVNc1JVRkJSU3hMUVVGTExFdEJRVXM3VVVGRGNFTXNTVUZCU1N4UFFVRlBMRXRCUVVzc1MwRkJTeXhUUVVGVExFVkJRVVU3VlVGRE9VSTdWVUZEUVN4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzFGQlF6RkNPMUZCUTBFc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMVZCUTBVc1UwRkJVeXhGUVVGRExIZENRVUYzUWp0VlFVTnNReXhIUVVGSExFVkJRVWNzZVVKQlFYZENMRXRCUVUwN1VVRkJSU3huUWtGRmRFTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8xVkJRVXNzVTBGQlV5eEZRVUZETzFGQlFUaENMRWRCUXpGRExFbEJRVUVzYjBKQlFXTXNSVUZCUlN4SFFVRkZMRWxCUVVzc1IwRkJSU3hEUVVOMlFpeERRVUZETEdWQlEwNHNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8xVkJRVXNzVTBGQlV5eEZRVUZETzFGQlFUaENMRWRCUXpGRExFbEJRVUVzYjBKQlFXTXNSVUZCUXl4TFFVRkxMRU5CUTJ4Q0xFTkJRMFlzUTBGQlF6dE5RVVZXTEVOQlFVTXNRMEZEUlN4RFFVTkdMRU5CUVVNN1NVRkZWaXhEUVVGRE8wbEJRVUVzWlVGQlFTeHRRa0ZGVlN4TlFVRlBMRXRCUVVzc1NVRkJTenROUVVNeFFpeE5RVUZOTzFGQlFVVXNkVUpCUVhWQ08xRkJRVVVzVDBGQlR6dFJRVUZGTEhOQ1FVRnpRanRSUVVGRk8wMUJRVXNzUTBGQlF5eEhRVU4wUlN4SlFVRkpMRU5CUVVNc1MwRkJTenROUVVWYUxFMUJRVTBzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0TlFVTnFRaXgxUWtGQmRVSXNRMEZCUXl4RFFVRkRPMDFCUTNwQ0xFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU03U1VGRGRFTXNRMEZCUXp0SlFVRkJMR1ZCUVVFc2JVSkJSVlVzVFVGQlR5eExRVUZMTEVsQlFVczdUVUZETVVJc1RVRkJUVHRSUVVGRkxIVkNRVUYxUWp0UlFVRkZMRTlCUVU4N1VVRkJSU3h6UWtGQmMwSTdVVUZCUlR0TlFVRlBMRU5CUVVNc1IwRkRlRVVzU1VGQlNTeERRVUZETEV0QlFVczdUVUZGV2l4TlFVRk5MRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU03VFVGRGJrSXNkVUpCUVhWQ0xFTkJRVU1zUTBGQlF6dE5RVU42UWl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRPMGxCUTNSRExFTkJRVU03U1VGQlFTeGxRVUZCTEhWQ1FVVmpMRTFCUVUwN1RVRkRia0lzVFVGQlRUdFJRVU5LTEUxQlFVMDdVVUZEVGl4SlFVRkpPMUZCUTBvc2RVSkJRWFZDTzFGQlEzWkNMRTlCUVU4N1VVRkRVQ3h6UWtGQmMwSTdVVUZEZEVJc1RVRkJUU3hGUVVGRk8xVkJRVVU3VVVGQlN5eERRVUZETzFGQlEyaENPMDFCUTBZc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTzAxQlEyUXNUVUZCVFR0UlFVRkZPMDFCUVVVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTzAxQlJURkNMRzlDUVVORkxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMR05CUVVFc1EwRkJRU3h0UWtGQmJVSTdVVUZEYkVJc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVVTdVVUZEZUVJc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVVTdVVUZEZEVJc1VVRkJVU3hGUVVGRkxFMUJRVThzUzBGQlN5eEpRVUZMTzFWQlEzcENMRTFCUVUwc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF6dFZRVU51UWl4MVFrRkJkVUlzUTBGQlF5eERRVUZETzFWQlEzcENMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRU5CUVVNN1VVRkRkRU1zUTBGQlJUdFJRVU5HTEZGQlFWRXNSVUZCUlN4TlFVRlBMRXRCUVVzc1NVRkJTenRWUVVONlFpeEpRVUZKTEVsQlFVa3NTMEZCU3l4cFFrRkJXU3hEUVVGRExGRkJRVkVzUlVGQlJUdFpRVU5zUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRE8yTkJRVVVzTWtKQlFUSkNMRVZCUVVVN1dVRkJTeXhEUVVGRExFTkJRVU03VlVGRGRFUXNRMEZCUXl4TlFVRk5PMWxCUTB3c1RVRkJUU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzFsQlEycENMSFZDUVVGMVFpeERRVUZETEVOQlFVTTdXVUZEZWtJc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eHpRa0ZCYzBJc1EwRkJRenRWUVVOMFF6dFJRVU5HTEVOQlFVVTdVVUZEUml4UlFVRlJMRVZCUVVVN1RVRkJhVU1zUTBGRE5VTXNRMEZCUXp0SlFVVk9MRU5CUVVNN1NVRkJRU3hsUVVGQkxEQkNRVVZwUWl4TlFVRk5PMDFCUTNSQ0xFMUJRVTA3VVVGRFNpeFRRVUZUTzFGQlExUXNkVUpCUVhWQ08xRkJRM1pDTEU5QlFVODdVVUZEVUN4elFrRkJjMEk3VVVGRGRFSXNkVU5CUVhWRE8xRkJRM1pETzAxQlEwWXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTE8wMUJRMlFzVFVGQlRTeHBRa0ZCYVVJc1IwRkJSeXhoUVVGaE8wMUJSWFpETEhWRFFVRjFReXhEUVVGRE8xRkJRM1JETEdsQ1FVRnBRanRSUVVOcVFpeFJRVUZSTEVWQlFVVXNUVUZCUVN4RFFVRkJMRXRCUVZrN1ZVRkRjRUlzVFVGQlRTeFRRVUZUTEVOQlFVTXNRMEZCUXp0VlFVTnFRaXgxUWtGQmRVSXNRMEZCUXl4RFFVRkRPMVZCUTNwQ0xFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU03VVVGRGRFTTdUVUZEUml4RFFVRkRMRU5CUVVNN1NVRkRTaXhEUVVGRE8wbEJRVUVzWlVGQlFTeHBRa0ZGVVN4TlFVRk5PMDFCUTJJc1RVRkJUVHRSUVVOS0xHTkJRV003VVVGRFpDeGhRVUZoTzFGQlEySXNZMEZCWXp0UlFVTmtMR1ZCUVdVN1VVRkRaaXhYUVVGWExFVkJRVVU3VlVGQlJTeFBRVUZQTzFWQlFVVXNUMEZCVHp0VlFVRkZPMUZCUVVzc1EwRkJRenRSUVVOMlF6dE5RVU5HTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTenROUVVOa0xFMUJRVTA3VVVGQlJUdE5RVUUwUWl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXM3VFVGRGJFUXNUVUZCVFR0UlFVRkZPMDFCUVVVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTzAxQlJURkNMRTFCUVUwc1YwRkJWeXhIUVVGSExFTkJRVU1zUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETzAxQlEzcEVMRTFCUVUwc1YwRkJWeXhIUVVGSExFbEJRVUVzYjBOQlFUaENMRVZCUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF6dE5RVU4yUlN4TlFVRk5MR05CUVdNc1IwRkRiRUlzVjBGQlZ5eExRVUZMTEVWQlFVVXNSMEZEWkN4alFVRmpMRU5CUVVNc1VVRkJVU3hKUVVGSkxFTkJRVU1zUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhIUVVNNVF5eERRVUZETEVOQlFVTXNWMEZCVnl4RFFVRkRPMDFCUlhCQ0xFMUJRVTBzYTBKQlFXdENMRWRCUVVjc1kwRkJZeXhIUVVOeVF5eEpRVUZCTEhsQ1FVRmpMRVZCUTFvc1NVRkJRU3c0UWtGQmEwSXNSVUZCUXp0UlFVTnFRaXhMUVVGTExFVkJRVVVzVDBGQlR6dFJRVU5rTEZsQlFWa3NSVUZCUlN4alFVRmpPMUZCUXpWQ0xGVkJRVlVzUlVGQlJTeGxRVUZsTzFGQlF6TkNMR05CUVdNN1VVRkRaQ3huUWtGQlowSXNSVUZCUlN4RFFVRkRPMUZCUTI1Q0xHTkJRV01zUlVGQlJTeDVRa0ZCYVVJc1EwRkJRenROUVVOd1F5eERRVUZETEVOQlFVTXNSVUZEUml4bFFVTkdMRU5CUVVNc1IwRkRSQ3hKUVVGSkxHZENRVUZQTEVOQlFVTXNUMEZCVHl4RlFVRkZMRVZCUVVVc1JVRkJSU3g1UWtGQmFVSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkROVU1zWTBGQll5eERRVUZETEhsQ1FVRnBRaXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVU55UXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRMUlzVFVGQlRTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVTldMRkZCUVZFc1EwRkJReXhEUVVGRE8wMUJSV3BDTEc5Q1FVTkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdFJRVUZMTEZOQlFWTXNSVUZCUXp0TlFVRTRRaXhuUWtGRE0wTXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQk8xRkJRVXNzVTBGQlV5eEZRVUZETzAxQlFTdENMR2RDUVVNMVF5eE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXdyUWtGQlFTeERRVUZCTEU5QlFUaENMRTFCUVVVc1EwRkRPVUlzUTBGQlF5eGxRVU5PTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRVHRSUVVGTExGTkJRVk1zUlVGQlF6dE5RVUUwUWl4blFrRkRla01zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc05FSkJRVUVzUTBGQlFTeFBRVUV5UWp0UlFVTXhRaXhYUVVGWExFVkJRVVVzWTBGQlpUdFJRVU0xUWl4WFFVRlhMRVZCUVVVc1NVRkJTenRSUVVOc1FpeGpRVUZqTEVWQlFVVXNhMEpCUVcxQ08xRkJRMjVETEZOQlFWTXNSVUZEVUN4alFVRmpMRWRCUVVjc1pVRkJaU3hoUVVGbUxHVkJRV1VzZFVKQlFXWXNaVUZCWlN4RFFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRExFZEJRVWNzWTBGRGJrUTdVVUZEUkN4alFVRmpMRVZCUVVVN1RVRkJVU3hEUVVONlFpeERRVU5GTEVOQlFVTXNSVUZEVEN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUlVGRGFrSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhqUVVGakxHZENRVU40UWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3VVVGQlN5eFRRVUZUTEVWQlFVTTdUVUZCY1VRc1owSkJRMnhGTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExIVkNRVUZCTEVOQlFVRXNUMEZCYzBJN1VVRkJReXh0UWtGQmJVSTdUVUZCUVN4RFFVRkZMRU5CUXpGRExFTkJRVU1zUjBGRFNpeEpRVUZKTEVWQlExQXNNa0pCUVRKQ0xHbENRVU14UWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eG5RMEZCUVN4RFFVRkJMRTlCUVN0Q08xRkJRemxDTEdGQlFXRXNSVUZCUlN4UFFVRlJPMUZCUTNaQ0xFbEJRVWtzUlVGQlJTeEpRVUZMTzFGQlExZ3NVVUZCVVN4RlFVRkZMRTFCUVU4c1MwRkJTeXhKUVVGTExFMUJRVTBzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVVN1VVRkRkRVFzVVVGQlVTeEZRVUZGTEUxQlFVOHNTMEZCU3l4SlFVRkxMRTFCUVUwc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTzAxQlFVVXNRMEZEZGtRc1EwRkRSaXhGUVVOQkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXl4RlFVTnVRaXhoUVVGaExFZEJRVWNzUTBGQlF5eG5Ra0ZEYUVJc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNUMEZCUVN4RFFVRkJMRTlCUVUwN1VVRkRUQ3hKUVVGSkxFVkJRVU1zVFVGQlRUdFJRVU5ZTEZOQlFWTXNSVUZCUXl4elEwRkJjME03VVVGRGFFUXNUMEZCVHl4RlFVRkZMRU5CUVVFc1MwRkJUU3hKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETzAxQlFVVXNSMEZGY2tNc1YwRkRTeXhEUVVGRExFZEJRMUFzU1VGRFJDeERRVUZETzBsQlJWWXNRMEZCUXp0RlFVRkJPMEZCUTBnN1FVRkJReXhQUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEhkQ1FVRkJPMEZCUVVFc1pVRkJRU3hEUVhoVmIwSXNkMEpCUVhkQ0xHdENRVU55UWp0RlFVTndRaXhEUVVGRExFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNN1FVRkRjRUlzUTBGQlF6dEJRVUZCTEdWQlFVRXNRMEZJYTBJc2QwSkJRWGRDTEdWQlMzaENPMFZCUTJwQ0xGZEJRVmNzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRXRCUVVzc1EwRkJRenRKUVVNelFpeFBRVUZQTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZUdEpRVU53UXl4UFFVRlBMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTzBsQlEzcENMRWxCUVVrc1JVRkJSU3hyUWtGQlV5eERRVUZETzBWQlEyeENMRU5CUVVNc1EwRkJReXhEUVVGRExGVkJRVlU3UlVGRFlpeE5RVUZOTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZUdEZRVU5xUXl4MVFrRkJkVUlzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVk8wVkJRMnhFTEU5QlFVOHNSVUZCUlN4clFrRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZWTzBWQlEzQkRMSE5DUVVGelFpeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVlU3UlVGRGJrUXNTVUZCU1N4RlFVRkZMR3RDUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVTdSVUZETDBJc1RVRkJUU3hGUVVGRkxHdENRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVZVN1JVRkRia01zWlVGQlpTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRGUVVOcVF5eG5RMEZCWjBNc1JVRkJSU3hyUWtGQlV5eERRVUZETEVsQlFVazdSVUZEYUVRc1kwRkJZeXhGUVVGRkxHdENRVUZUTEVOQlFVTXNTVUZCU1R0RlFVTTVRaXhqUVVGakxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJWVHRGUVVNelF5eGxRVUZsTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZUdEZRVU0xUXl4alFVRmpMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eE5RVUZOTzBWQlEyaERMR0ZCUVdFc1JVRkJSU3hyUWtGQlV5eERRVUZETEUxQlFVMDdSVUZETDBJc2RVTkJRWFZETEVWQlFVVXNhMEpCUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZUdEZRVU5zUlN4VFFVRlRMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlR0RlFVTndReXhqUVVGakxFVkJRVVVzYTBKQlFWTXNRMEZCUXp0QlFVTTFRaXhEUVVGRE96czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZETlVSSUxFbEJRVUVzVjBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRTFCUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGxRVUZCTEVkQlFVRXNUMEZCUVR0QlFVVkJMRWxCUVVFc1NVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZGQlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hWUVVGQkxFZEJRVUVzVDBGQlFUdEJRVlZCTEVsQlFVRXNTMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHMUNRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc1VVRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEZOQlFVRXNSMEZCUVN4UFFVRkJPMEZCUzBFc1NVRkJRU3g1UWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVFNFJTeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGRk9VVXNVMEZCVXl4bFFVRmxMRU5CUVVNc1MwRkJTeXhGUVVGRkxGRkJRVkVzUlVGQlJUdEZRVU40UXl4TlFVRk5PMGxCUTBvc1UwRkJVeXhGUVVGRk8wMUJRVVU3U1VGQlN6dEZRVU53UWl4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExFMUJRVTA3UlVGRGJrSXNUVUZCVFN4alFVRmpMRWRCUVVjc1NVRkJRU3d5UWtGQmFVSXNSVUZCUXl4TFFVRkxMRU5CUVVNN1JVRkZMME1zVFVGQlRTeG5RMEZCWjBNc1IwRkRjRU1zU1VGQlFTeG5SRUZCY1VNc1JVRkJReXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETzBWQlEzQkVMRTFCUVUwc1kwRkJZeXhIUVVGSExFbEJRVUVzZVVKQlFXVXNSVUZCUXl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRE8wVkJRMjVFTEUxQlFVMHNXVUZCV1N4SFFVRkhMRWxCUVVFc01FTkJRU3RDTEVWQlFVTXNTMEZCU3l4RFFVRkRPMFZCUXpORUxFMUJRVTBzWVVGQllTeEhRVUZITEVsQlFVRXNNRU5CUVN0Q0xFVkJRVU1zUzBGQlN5eERRVUZETzBWQlF6VkVMRTFCUVUwN1NVRkJSVHRGUVVGdFF5eERRVUZETEVkQlFVY3NTVUZCUVN4NVFrRkJZeXhGUVVGRExFdEJRVXNzUTBGQlF6dEZRVVZ3UlN4UFFVRlBPMGxCUTB3c1UwRkJVeXhGUVVGRkxFbEJRVWs3U1VGRFppeG5Ra0ZCWjBJc1JVRkJSU3hKUVVGSk8wbEJRM1JDTEhOQ1FVRnpRaXhGUVVGRkxFbEJRVUVzYTBOQlFYbENMRVZCUVVNc1MwRkJTeXhEUVVGRE8wbEJRM2hFTEdkRFFVRm5RenRKUVVOb1F5eGpRVUZqTzBsQlEyUXNZMEZCWXl4RlFVRkZMRWxCUVVFc01rSkJRV2xDTEVWQlFVTXNTMEZCU3l4RFFVRkRPMGxCUTNoRExHVkJRV1VzUlVGQlJTeEpRVUZCTERaQ1FVRnJRaXhGUVVGRExFdEJRVXNzUTBGQlF6dEpRVU14UXl4alFVRmpMRVZCUVVVc2EwTkJRV3RETEVkQlF6bERMRWxCUVVrc1IwRkRTaXhKUVVGQkxHbERRVUZ6UWl4RlFVRkRMRXRCUVVzc1EwRkJRenRKUVVOcVF6dEpRVU5CTEZkQlFWY3NSVUZCUlN4SlFVRkJMRFJEUVVGcFF5eEZRVUZETEV0QlFVc3NRMEZCUXp0SlFVTnlSQ3hsUVVGbExFVkJRVVVzU1VGQlFTdzJRa0ZCYTBJc1JVRkJReXhMUVVGTExFTkJRVU03U1VGRE1VTXNXVUZCV1R0SlFVTmFMR0ZCUVdFN1NVRkRZanRGUVVOR0xFTkJRVU03UVVGRFNEdEJRVVZCTEZOQlFWTXNhMEpCUVd0Q0xFTkJRVU1zVVVGQlVTeEZRVUZGTzBWQlEzQkRMRTlCUVU4N1NVRkRUQ3hOUVVGTkxFVkJRVVVzUTBGQlFTeExRVUZOTEZGQlFWRXNRMEZCUXl4SlFVRkJMR1ZCUVUwc1JVRkJReXhEUVVGRExFTkJRVU03U1VGRGFFTXNkVUpCUVhWQ0xFVkJRVVVzUTBGQlFTeExRVUZOTEZGQlFWRXNRMEZCUXl4SlFVRkJMREpEUVVGMVFpeEZRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnNSU3gxUTBGQmRVTXNSVUZCUlN4RFFVRkRPMDFCUTNoRExGRkJRVkU3VFVGRFVpeHBRa0ZCYVVJc1JVRkJSVHRKUVVOeVFpeERRVUZETEV0QlFVczdUVUZEU2l4UFFVRlBMRkZCUVZFc1EwRkRZaXhKUVVGQkxHdENRVUZUTEVWQlFVTTdVVUZEVWl4SlFVRkpMRVZCUVVVc2NVSkJRWEZDTzFGQlF6TkNMRkZCUVZFN1VVRkRVaXhwUWtGQmFVSXNSVUZCUlN4aFFVRmhPMUZCUTJoRExHRkJRV0VzUlVGQlJUdE5RVU5xUWl4RFFVRkRMRU5CUTBnc1EwRkJRenRKUVVOSUxFTkJRVU03U1VGRFJDeFRRVUZUTEVWQlFVY3NXVUZCV1N4SlFVRkxMRkZCUVZFc1EwRkJReXhKUVVGQkxHMUNRVUZWTEVWQlFVTXNXVUZCV1N4RFFVRkRPMFZCUTJoRkxFTkJRVU03UVVGRFNEdEJRVVZCTEZOQlFWTXNWVUZCVlN4RFFVRkRMRlZCUVZVc1JVRkJSU3hoUVVGaExFVkJRVVVzVVVGQlVTeEZRVUZGTzBWQlEzWkVMRTFCUVUwN1NVRkRTaXh0UWtGQmJVSTdTVUZEYmtJc1owSkJRV2RDTzBsQlEyaENMSEZDUVVGeFFqdEpRVU55UWl4clFrRkJhMEk3U1VGRGJFSXNWMEZCVnp0SlFVTllMR0ZCUVdFN1NVRkRZanRGUVVOR0xFTkJRVU1zUjBGQlJ5eFJRVUZSTzBWQlJWb3NUVUZCVFR0SlFVRkZMRmRCUVZjN1NVRkJSU3haUVVGWk8wbEJRVVVzUjBGQlJ6dEZRVUZuUWl4RFFVRkRMRWRCUVVjc1ZVRkJWVHRGUVVWd1JTeE5RVUZOTzBsQlEwb3NTVUZCU1R0SlFVTktMRk5CUVZNc1JVRkJSVHROUVVGRk8wbEJRVXM3UlVGRGNFSXNRMEZCUXl4SFFVRkhMRTFCUVUwN1JVRkZWaXhOUVVGTkxGZEJRVmNzUjBGQlJ5eEpRVUZCTEhsQ1FVRnRRaXhGUVVGRExGZEJRVmNzUlVGQlJTeEpRVUZKTEVOQlFVTTdSVUZGTVVRc1RVRkJUVHRKUVVGRkxGTkJRVk1zUlVGQlJUdEZRVUZyUWl4RFFVRkRMRWRCUVVjc1lVRkJZVHRGUVVWMFJDeEpRVUZKTEUxQlFVMDdSVUZEVml4SlFVRkpMRWxCUVVrN1JVRkRVaXhKUVVGSkxFbEJRVWtzUzBGQlN5eHBRa0ZCV1N4RFFVRkRMR0ZCUVdFc1JVRkJSVHRKUVVOMlF5eE5RVUZOTEVkQlFVY3NjVUpCUVhGQ08wbEJRemxDTEVsQlFVa3NSMEZCUnl4dFFrRkJiVUk3UlVGRE5VSXNRMEZCUXl4TlFVRk5MRWxCUVVrc1NVRkJTU3hMUVVGTExHbENRVUZaTEVOQlFVTXNiVUpCUVcxQ0xFVkJRVVU3U1VGRGNFUXNUVUZCVFN4SFFVRkhMR3RDUVVGclFqdEpRVU16UWl4SlFVRkpMRWRCUVVjc1owSkJRV2RDTzBWQlEzcENMRU5CUVVNc1RVRkJUU3hKUVVGSkxFbEJRVWtzUzBGQlN5eHBRa0ZCV1N4RFFVRkRMRkZCUVZFc1JVRkJSVHRKUVVONlF5eE5RVUZOTEVkQlFVY3NZVUZCWVR0SlFVTjBRaXhKUVVGSkxFZEJRVWNzVjBGQlZ6dEZRVU53UWp0RlFVVkJMRTlCUVU4N1NVRkRUQ3hIUVVGSExGRkJRVkU3U1VGRFdDeEhRVUZITEdWQlFXVTdTVUZEYkVJc1IwRkJSeXhoUVVGaE8wbEJRMmhDTEZkQlFWYzdTVUZEV0N4TlFVRk5PMGxCUTA0c1RVRkJUVHRKUVVOT0xFbEJRVWs3U1VGRFNpeFRRVUZUTEVWQlFVVXNRMEZCUVN4TFFVRk5MR2xDUVVGcFFpeERRVUZETEVsQlFVRXNaVUZCVXl4RlFVRkRMRmxCUVZrc1EwRkJRenRGUVVNMVJDeERRVUZETzBGQlEwZzdRVUZCUXl4SlFVRkJMRkZCUVVFc1IwRkZZeXhKUVVGQkxHTkJRVThzUlVGRGNFSXNNRUpCUVZVc1JVRkRWaXhKUVVGQkxHMUNRVUZQTEVWQlFVTXNaVUZCWlN4RlFVRkZMR3RDUVVGclFpeEZRVUZGTEZWQlFWVXNRMEZEZWtRc1EwRkJReXhEUVVGRExHbERRVUYzUWl4RFFVRkRPMEZCUVVFc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeFJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEYkVrelFpeEpRVUZCTEhGQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFXMUVMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTBGdVJDeEpRVUZCTERKQ1FVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlFUQkVMRk5CUVVFc2RVSkJRVUVzUjBGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRU5CUVVFc1ZVRkJRU3hIUVVGQkxFZEJRVUVzUzBGQlFTeFBRVUZCTEVWQlFVRXNSMEZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTkJNVVFzU1VGQlFTeE5RVUZCTEVkQlFVRXNkVUpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFZRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeG5Ra0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNTMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxIbENRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeDVRa0ZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNkMEpCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRkZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZCTUVNc1UwRkJRU3gxUWtGQlFTeEhRVUZCTEZkQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxFZEJRVUVzUjBGQlFTeExRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJPMEZCUVVFc1UwRkJRU3g1UWtGQlFTeFhRVUZCTEdWQlFVRXNUMEZCUVN4clEwRkJRU3hwUWtGQlFTeFBRVUZCTEU5QlFVRXNVVUZCUVN4blFrRkJRU3hQUVVGQkxFOUJRVUVzV1VGQlFTeDNRa0ZCUVN4WlFVRkJMRU5CUVVFc1YwRkJRU3hYUVVGQkxGZEJRVUVzUjBGQlFTeG5Ra0ZCUVN4SFFVRkJMR2xDUVVGQkxFdEJRVUVzVjBGQlFUdEJRVUZCTEZOQlFVRXNkMEpCUVVFc1IwRkJRU3hGUVVGQkxGZEJRVUVzVTBGQlFTeFhRVUZCTEVsQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hWUVVGQkxGZEJRVUVzUjBGQlFTeFJRVUZCTEVkQlFVRXNiMEpCUVVFc1IwRkJRU3gzUWtGQlFTeEhRVUZCTERSQ1FVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQkxGVkJRVUVzUzBGQlFTeEhRVUZCTEhkQ1FVRkJMRU5CUVVFc1YwRkJRU3hQUVVGQkxFdEJRVUVzU1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1dVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNVMEZCUVN4TlFVRkJMRmRCUVVFc2NVSkJRVUVzUjBGQlFTeE5RVUZCTEVOQlFVRXNZMEZCUVN4SlFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeFhRVUZCTEVkQlFVRXNTVUZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3hyUWtGQlFTeE5RVUZCTEVOQlFVRXNVMEZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEVkQlFVRXNVMEZCUVN4SlFVRkJMRWRCUVVFc2NVSkJRVUVzUjBGQlFTeE5RVUZCTEVOQlFVRXNkMEpCUVVFc1EwRkJRU3hIUVVGQkxFVkJRVUVzUjBGQlFTeGpRVUZCTEVsQlFVRXNTMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEV0QlFVRXNUVUZCUVN4RFFVRkJMR05CUVVFc1EwRkJRU3hOUVVGQkxFVkJRVUVzUjBGQlFTeEZRVUZCTEVsQlFVRXNXVUZCUVN4TlFVRkJMRU5CUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEZOQlFVRXNUVUZCUVN4RFFVRkJMRTlCUVVFc1IwRkJRU3hIUVVGQkxFMUJRVUVzUzBGQlFTeEpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFMUJRVUVzV1VGQlFTeE5RVUZCTzBGQlJUTkNMRk5CUVZNc01FSkJRVEJDTEVOQlFVTTdSVUZEYWtRc1YwRkJWenRGUVVOWUxFMUJRVTA3UlVGRFRpeHBRa0ZCYVVJN1JVRkRha0k3UVVGRFJpeERRVUZETEVWQlFVVTdSVUZEUkN4TlFVRk5MRU5CUVVNc1IwRkJSeXhKUVVGQkxHbENRVUZWTEVWQlFVTXNhVUpCUVZjc1EwRkJRenRGUVVWcVF5eHZRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3U1VGQlN5eFRRVUZUTEVWQlFVTTdSVUZCSzBJc1owSkJRelZETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExIbENRVUZCTEVOQlFVRXNUMEZCZDBJN1NVRkRka0lzVDBGQlR5eEZRVUZGTEdWQlFXVXNRMEZCUXl4UFFVRlJPMGxCUTJwRExGRkJRVkVzUlVGQlJTeGxRVUZsTEVOQlFVTXNTVUZCU3p0SlFVTXZRaXhYUVVGWExFVkJRVVVzUTBGQlF5eERRVUZETEhOQ1FVRnpRaXhEUVVGRk8wbEJRM1pETEZWQlFWVXNSVUZCUlN4RFFVRkRMRU5CUVVNc2VVSkJRWGxDTEVOQlFVVTdTVUZEZWtNc1ZVRkJWU3hGUVVGRkxFMUJRVTg3U1VGRGJrSXNVMEZCVXl4RlFVRkZMR2xDUVVGcFFpeEhRVUZITEVWQlFVVXNSMEZCUnl4WlFVRmhPMGxCUTJwRUxGRkJRVkVzUlVGRFRpeERRVUZETEdsQ1FVRnBRaXhwUWtGRGFFSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVVVGQlFTeERRVUZCTEU5QlFVODdUVUZEVGl4UlFVRlJMRVZCUVVNc1VVRkJVVHROUVVOcVFpeEpRVUZKTEdWQlFVVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxGbEJRVWtzUTBGQlF5eERRVUZETEhWQ1FVRjFRaXhGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVczdTVUZCUlN4blFrRkZjRVFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2VVSkJRVUVzUTBGQlFTeFBRVUYzUWl4TlFVRkZMRU5CUTNCQ0xFTkJSVm83U1VGRFJDeFRRVUZUTEVWQlExQXNRMEZCUXl4cFFrRkJhVUlzYVVKQlEyaENMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEZGQlFVRXNRMEZCUVN4UFFVRlBPMDFCUTA0c1VVRkJVU3hGUVVGRExGRkJRVkU3VFVGRGFrSXNTVUZCU1N4bFFVRkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeFpRVUZKTEVOQlFVTXNRMEZCUXl4MVFrRkJkVUlzUlVGQlJTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkxPMGxCUVVVc1owSkJSWEJFTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExIZENRVUZCTEVOQlFVRXNUMEZCZFVJN1RVRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEhkQ1FVRjNRanRKUVVGRkxFTkJRVVVzUTBGRGRFUTdSVUZGV2l4RFFVTkdMRU5CUVVNc1JVRkRSQ3hYUVVGWExHbENRVU5XTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHZENRVUZCTEVOQlFVRXNUMEZCWlR0SlFVTmtMRTlCUVU4c1JVRkJSU3hYUVVGWk8wbEJRM0pDTEZOQlFWTXNSVUZCUXp0RlFVRnJSQ3hEUVVNM1JDeERRVVZCTEVOQlFVTTdRVUZGVmp0QlFVVkJMREJDUVVFd1FpeERRVUZETEZOQlFWTXNSMEZCUnp0RlFVTnlRenRCUVVOR08wRkJRMEU3UlVGRFJTeFhRVUZYTEVWQlFVVXNhMEpCUVZNc1EwRkJReXhOUVVGTk8wVkJRemRDTzBGQlEwWTdRVUZEUVR0RlFVTkZMRTFCUVUwc1JVRkJSU3hyUWtGQlV5eERRVUZETEUxQlFVMDdSVUZEZUVJN1FVRkRSanRCUVVOQk8wVkJRMFVzYVVKQlFXbENMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTzBWQlEycERPMEZCUTBZN1FVRkRRVHRCUVVOQk8wVkJRMFVzWlVGQlpTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNN1FVRkROMElzUTBGQlF6czdPenM3T3pzN096czdPenM3T3pzN096czdRVU16UlVRc1NVRkJRU3hOUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hoUVVGQkxFZEJRVUVzVDBGQlFUdEJRVTFCTEVsQlFVRXNTVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNhVUpCUVVFc1IwRkJRU3hQUVVGQk8wRkJRVFJFTEZOQlFVRXNkVUpCUVVFc1IwRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEVOQlFVRXNWVUZCUVN4SFFVRkJMRWRCUVVFc1MwRkJRU3hQUVVGQkxFVkJRVUVzUjBGQlFUdEJRVVUxUkN4TlFVRk5MSGRDUVVGM1FpeEhRVUZITEVOQlFVRXNTMEZCVFR0RlFVTnlReXh2UWtGRFJTeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhKUVVGQkxFTkJRVUVzVDBGQlJ6dEpRVU5HTEZOQlFWTXNSVUZCUXl3MlFrRkJOa0k3U1VGRGRrTXNUMEZCVHl4RlFVRkZMSEZDUVVGUExFTkJRVU1zVjBGQldUdEpRVU0zUWl4VlFVRlZMRVZCUVVVc2QwSkJRVlVzUTBGQlF5eE5RVUZQTzBsQlF6bENMR1ZCUVdVc1JVRkJSU3h0UWtGQlN5eERRVUZETEZsQlFXRTdTVUZEY0VNc1kwRkJZeXhGUVVGRkxEUkNRVUZqTEVOQlFVTTdSVUZCVHl4blFrRkZkRU1zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2FVSkJRVUVzUTBGQlFTeEpRVUZKTzBsQlFVTXNTVUZCU1N4RlFVRkZMREJDUVVGUkxFTkJRVU1zVFVGQlR6dEpRVUZETEV0QlFVc3NSVUZCUlN4dFFrRkJTeXhEUVVGRE8wVkJRV0VzUTBGQlJTeERRVU4wUkN4RFFVRkRPMEZCUlZZc1EwRkJRenRCUVVGRExFbEJRVUVzVVVGQlFTeEhRVVZoTEhkQ1FVRjNRanRCUVVGQkxFOUJRVUVzUTBGQlFTeFBRVUZCTEVkQlFVRXNVVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNoQ2RrTXNTVUZCUVN3MFFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVRXlSQ3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRRVE5FTEVsQlFVRXNUVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNTVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNhVUpCUVVFc1IwRkJRU3hQUVVGQk8wRkJSVUVzU1VGQlFTeGhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVbHhSQ3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN1FVRkZja1FzVFVGQlRTd3lRa0ZCTWtJc1IwRkJSeXhEUVVGRE8wVkJRVVU3UVVGQlN5eERRVUZETEV0QlFVczdSVUZEYUVRc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1NVRkJRU3hEUVVGQkxFOUJRVWM3U1VGQlF5eFRRVUZUTEVWQlFVTTdSVUZCWjBNc1owSkJRemRETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExFbEJRVUVzUTBGQlFTeFBRVUZITzBsQlFVTXNZVUZCWVN4RlFVRkZMRFJDUVVGakxFTkJRVU03UlVGQlR5eEhRVU4yUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGQlJTeExRVUZMTzBsQlFVVTdSVUZCVFN4RFFVRkRMRVZCUVVVc1EwRkJReXhyUWtGRE5VSXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zU1VGQlFTeERRVUZCTEU5QlFVYzdTVUZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZGTzBsQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVVN1NVRkJReXhaUVVGWkxFVkJRVVU3UlVGQlJTeG5Ra0ZEY0VRc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTEVOQlFVTXNhVUpCUVVFc1EwRkJRU3hKUVVGSk8wbEJRMGdzUlVGQlJTeEZRVUZETEVsQlFVazdTVUZEVUN4UFFVRlBMRVZCUVVVc2VVSkJRVmNzUTBGQlF5eFpRVUZoTzBsQlEyeERMRk5CUVZNc1JVRkJSU3hEUVVGRk8wbEJRMklzV1VGQldTeEZRVUZGTzBWQlFVVXNSMEZGWml4TFFVTkhMRU5CUVVNc1pVRkRVQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4cFFrRkJRU3hEUVVGQkxFbEJRVWs3U1VGRFNDeFRRVUZUTEVWQlFVTXNNRU5CUVRCRE8wbEJRM0JFTEZsQlFWa3NSVUZCUlN3eVFrRkJZU3hEUVVGRExGVkJRVmM3U1VGRGRrTXNVMEZCVXl4RlFVRkZMRU5CUVVVN1NVRkRZaXhaUVVGWkxFVkJRVVU3UlVGQlJTeEhRVVZtTEV0QlEwY3NRMEZEU0N4RFFVTk9MRU5CUTBVc1EwRkRSaXhEUVVGRE8wRkJSVllzUTBGQlF6dEJRVVZFTERKQ1FVRXlRaXhEUVVGRExGTkJRVk1zUjBGQlJ6dEZRVU4wUXp0QlFVTkdPMEZCUTBFN1JVRkRSU3hKUVVGSkxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4UFFVRlBMRU5CUTNKQ0xHdENRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRPMGxCUTJRN1FVRkRUanRCUVVOQk8wbEJRMDBzUzBGQlN5eEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1RVRkJUVHRKUVVOMlFqdEJRVU5PTzBGQlEwRTdTVUZEVFN4TFFVRkxMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4clFrRkJVeXhEUVVGRExFMUJRVTBzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRTFCUVUwc1EwRkJRenRGUVVOcVJTeERRVUZETEVOQlEwZzdRVUZEUml4RFFVRkRPMEZCUVVNc1NVRkJRU3hSUVVGQkxHZENRVVZoTEdOQlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc01rSkJRVEpDTEVOQlFVTTdRVUZCUVN4UFFVRkJMRU5CUVVFc1QwRkJRU3hIUVVGQkxGRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRE1VUjBSQ3hKUVVGQkxFMUJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGVkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHRkJRVUVzUjBGQlFTeFBRVUZCTzBGQlVVRXNTVUZCUVN4SlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4cFFrRkJRU3hIUVVGQkxFOUJRVUU3UVVGQmEwUXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlJXeEVMRTFCUVUwc2RVSkJRWFZDTEVkQlFVY3NRMEZCUXp0RlFVRkZPMEZCUVVzc1EwRkJReXhMUVVGTE8wVkJRelZETEc5Q1FVTkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEVsQlFVRXNRMEZCUVN4UFFVRkhPMGxCUTBZc1UwRkJVeXhGUVVGRExEUkNRVUUwUWp0SlFVTjBReXhYUVVGWExFVkJRVVVzUTBGQlJUdEpRVU5tTEU5QlFVOHNSVUZCUlN4eFFrRkJUeXhEUVVGRExGZEJRVms3U1VGRE4wSXNWVUZCVlN4RlFVRkZMSGRDUVVGVkxFTkJRVU1zVFVGQlR6dEpRVU01UWl4bFFVRmxMRVZCUVVVc05rSkJRV1VzUTBGQlF5eFpRVUZoTzBsQlF6bERMRmxCUVZrc1JVRkJSU3hyUWtGQlNTeERRVUZETEVWQlFVYzdTVUZEZEVJc1YwRkJWeXhGUVVGRkxFTkJRVVU3U1VGRFppeFpRVUZaTEVWQlFVVTdSVUZCUlN4blFrRkZhRUlzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc2FVSkJRVUVzUTBGQlFTeEpRVUZKTzBsQlEwZ3NUVUZCVFN4RlFVRkZMRU5CUVVVN1NVRkRWaXhQUVVGUExFVkJRVVVzZVVKQlFWY3NRMEZCUXl4VlFVRlhPMGxCUTJoRExFVkJRVVVzUlVGQlF5eEpRVUZKTzBsQlExQXNTMEZCU3l4RlFVRkZMSFZDUVVGVExFTkJRVU03UlVGQllTeEhRVVUzUWl4SlFVTkhMRU5CUTBnc1EwRkJRenRCUVVWV0xFTkJRVU03UVVGQlF5eEpRVUZCTEZGQlFVRXNSMEZGWVN4MVFrRkJkVUk3UVVGQlFTeFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRkZCUVVFN1FVRkZkRU1zZFVKQlFYVkNMRU5CUVVNc1UwRkJVeXhIUVVGSE8wVkJRMnhETzBGQlEwWTdRVUZEUVR0RlFVTkZMRWxCUVVrc1JVRkJSU3hyUWtGQlV5eERRVUZETzBGQlEyeENMRU5CUVVNN096czdPenM3T3pzN096czdPenM3T3pzN08wRkROVU5FTEVsQlFVRXNUVUZCUVN4SFFVRkJMSFZDUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGTkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxHZENRVUZCTEVkQlFVRXNUMEZCUVR0QlFVTkJMRWxCUVVFc2FVSkJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UlFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4VFFVRkJMRWRCUVVFc2MwSkJRVUVzUTBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4TFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzWTBGQlFTeEhRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMRk5CUVVFc1IwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFZRVUZCTEVkQlFVRXNUMEZCUVR0QlFVbEJMRWxCUVVFc1MwRkJRU3hIUVVGQkxFOUJRVUU3UVVGRFFTeEpRVUZCTEV0QlFVRXNSMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3hoUVVGQkxFZEJRVUVzVDBGQlFUdEJRVXRCTEVsQlFVRXNPRUpCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMQ3RDUVVGQkxFZEJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNkVUpCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMREpDUVVGQkxFZEJRVUVzYzBKQlFVRXNRMEZCUVN4UFFVRkJPMEZCUTBFc1NVRkJRU3cwUWtGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVGMVJDeFRRVUZCTEhWQ1FVRkJMRWRCUVVFc1YwRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNSMEZCUVN4SFFVRkJMRXRCUVVFc1QwRkJRU3hGUVVGQkxFZEJRVUU3UVVGQlFTeFRRVUZCTEhsQ1FVRkJMRmRCUVVFc1pVRkJRU3hQUVVGQkxHdERRVUZCTEdsQ1FVRkJMRTlCUVVFc1QwRkJRU3hSUVVGQkxHZENRVUZCTEU5QlFVRXNUMEZCUVN4WlFVRkJMSGRDUVVGQkxGbEJRVUVzUTBGQlFTeFhRVUZCTEZkQlFVRXNWMEZCUVN4SFFVRkJMR2RDUVVGQkxFZEJRVUVzYVVKQlFVRXNTMEZCUVN4WFFVRkJPMEZCUVVFc1UwRkJRU3gzUWtGQlFTeEhRVUZCTEVWQlFVRXNWMEZCUVN4VFFVRkJMRmRCUVVFc1NVRkJRU3hIUVVGQkxFbEJRVUVzUjBGQlFTeERRVUZCTEZWQlFVRXNWMEZCUVN4SFFVRkJMRkZCUVVFc1IwRkJRU3h2UWtGQlFTeEhRVUZCTEhkQ1FVRkJMRWRCUVVFc05FSkJRVUVzVDBGQlFTeEZRVUZCTEVkQlFVRXNWVUZCUVN4TFFVRkJMRWRCUVVFc2QwSkJRVUVzUTBGQlFTeFhRVUZCTEU5QlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeFpRVUZCTEV0QlFVRXNRMEZCUVN4SFFVRkJMRU5CUVVFc1IwRkJRU3hUUVVGQkxFMUJRVUVzVjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3hqUVVGQkxFbEJRVUVzVFVGQlFTeERRVUZCTEhkQ1FVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzVVVGQlFTeEhRVUZCTEd0Q1FVRkJMRTFCUVVFc1EwRkJRU3hUUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hUUVVGQkxFbEJRVUVzUjBGQlFTeHhRa0ZCUVN4SFFVRkJMRTFCUVVFc1EwRkJRU3gzUWtGQlFTeERRVUZCTEVkQlFVRXNSVUZCUVN4SFFVRkJMR05CUVVFc1NVRkJRU3hMUVVGQkxFbEJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNTVUZCUVN4RFFVRkJMRWRCUVVFc1MwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeERRVUZCTEUxQlFVRXNSVUZCUVN4SFFVRkJMRVZCUVVFc1NVRkJRU3haUVVGQkxFMUJRVUVzUTBGQlFTeEhRVUZCTEVsQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxFTkJRVUVzVDBGQlFTeEhRVUZCTEVkQlFVRXNUVUZCUVN4TFFVRkJMRWxCUVVFc1MwRkJRU3hEUVVGQkxFZEJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNUVUZCUVN4WlFVRkJMRTFCUVVFN1FVRkZlRU1zVTBGQlV5eHZRa0ZCYjBJc1EwRkJRenRGUVVNelF5eE5RVUZOTzBWQlEwNHNjVUpCUVhGQ08wVkJRM0pDTzBGQlEwWXNRMEZCUXl4RlFVRkZPMFZCUVVFc1NVRkJRU3h4UWtGQlFTeEZRVUZCTEhOQ1FVRkJPMFZCUTBRc1RVRkJUU3hYUVVGWExFZEJRVWNzU1VGQlFTeDFRa0ZCVnl4RlFVRkRMRFJEUVVGcFF5eERRVUZETzBWQlEyeEZMRTFCUVUwc1pVRkJaU3hIUVVGSExFbEJRVUVzZFVKQlFWY3NSVUZCUXl3MlFrRkJhMElzUTBGQlF6dEZRVVYyUkN4TlFVRk5PMGxCUTBvc1UwRkJVeXhGUVVGRk8wMUJRMVFzU1VGQlNUdE5RVU5LTEUxQlFVMDdUVUZEVGl4SlFVRkpMRVZCUVVVN1VVRkJSVHROUVVGak8wbEJRM2hDTzBWQlEwWXNRMEZCUXl4SFFVRkhMRTFCUVUwN1JVRkZWaXhOUVVGTkxHTkJRV01zUjBGQlJ5eEpRVUZCTEhWQ1FVRlhMRVZCUVVVc1MwRkJTeXhKUVVGTExFbEJRVUVzZVVKQlFXVXNSVUZCUXl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UlVGRk0wVXNUVUZCVFN4WFFVRlhMRWRCUVVjc1NVRkJRU3g1UWtGQmJVSXNSVUZCUXl4WFFVRlhMRVZCUVVVc1NVRkJTU3hEUVVGRE8wVkJRekZFTEUxQlFVMHNjVUpCUVhGQ0xFZEJRVWNzWlVGQlpTeERRVUZETEUxQlFVMHNRMEZCUXp0RlFVVnlSQ3hOUVVGTkxFTkJRVU1zUjBGQlJ5eEpRVUZCTEdsQ1FVRlZMRVZCUVVNc2FVSkJRVmNzUTBGQlF6dEZRVVZxUXl4TlFVRk5MR2xDUVVGcFFpeEhRVU55UWl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zUzBGQlN5eGhRVUZoTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8wVkJSVFZFTEUxQlFVMHNhVUpCUVdsQ0xFZEJRVWNzU1VGQlFTeHJRMEZCYVVJc1JVRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETzBWQlJUZEVMRTFCUVUwc1EwRkJReXh6UWtGQmMwSXNSVUZCUlN4NVFrRkJlVUlzUTBGQlF5eEhRVUZITEVsQlFVRXNaVUZCVVN4RlFVRkRMRXRCUVVzc1EwRkJRenRGUVVNelJTeE5RVUZOTEVOQlFVTXNkMEpCUVhkQ0xFVkJRVVVzTWtKQlFUSkNMRU5CUVVNc1IwRkRNMFFzU1VGQlFTeGxRVUZSTEVWQlFVTXNTMEZCU3l4RFFVRkRPMFZCUldwQ0xFMUJRVTBzTUVKQlFUQkNMRWRCUXpkQ0xFTkJRVUVzVFVGQlRTeGhRVUZPTEUxQlFVMHNkMEpCUVVFc2NVSkJRVUVzUjBGQlRpeE5RVUZOTEVOQlFVVXNkMEpCUVhkQ0xHTkJRVUVzY1VKQlFVRXNkVUpCUVdoRExIRkNRVUZCTEVOQlFXdERMR1ZCUVdVc1RVRkJTeXhUUVVGVExFbEJRemxFTEVOQlFVRXNUVUZCVFN4aFFVRk9MRTFCUVUwc2QwSkJRVUVzYzBKQlFVRXNSMEZCVGl4TlFVRk5MRU5CUVVVc2QwSkJRWGRDTEdOQlFVRXNjMEpCUVVFc2RVSkJRV2hETEhOQ1FVRkJMRU5CUVd0RExHVkJRV1VzVFVGREwwTXNiMFZCUVc5RExFTkJRVU1zWVVGQllTeEpRVU55UkN4RFFVRkJMRTFCUVUwc1lVRkJUaXhOUVVGTkxIVkNRVUZPTEUxQlFVMHNRMEZCUlN4M1FrRkJkMElzUzBGREwwSXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlJUdEZRVVU1UkN4TlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGQkxHdENRVUZYTEVWQlEzaENMRTFCUVU4c1MwRkJTeXhKUVVGTE8wbEJRMllzU1VGQlNUdE5RVU5HTEUxQlFVMHNiVUpCUVcxQ0xFTkJRVU1zUzBGQlN5eERRVUZETzBsQlEyeERMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJUdE5RVU5XTEdsQ1FVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5rTzBWQlEwWXNRMEZCUXl4RlFVTkVMRU5CUVVNc2JVSkJRVzFDTEVOQlEzUkNMRU5CUVVNN1JVRkZSQ3hOUVVGTkxGRkJRVkVzUjBGQlJ5eEpRVUZCTEd0Q1FVRlhMRVZCUXpGQ0xFMUJRVThzUzBGQlN5eEpRVUZMTzBsQlEyWXNTVUZCU1R0TlFVTkdMRTFCUVUwc2NVSkJRWEZDTEVOQlFVTXNTMEZCU3l4RFFVRkRPMGxCUTNCRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCUlR0TlFVTldMR2xDUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTmtPMFZCUTBZc1EwRkJReXhGUVVORUxFTkJRVU1zY1VKQlFYRkNMRU5CUTNoQ0xFTkJRVU03UlVGRlJDeHZRa0ZEUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUU3U1VGQlN5eFRRVUZUTEVWQlFVTTdSVUZCZDBJc1owSkJRM0pETEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExESkNRVUZCTEVOQlFVRXNUMEZCVFR0SlFVTk1MRmRCUVZjc1JVRkJSU3hYUVVGWk8wbEJRM3BDTEUxQlFVMHNSVUZCUlN4TlFVRlBPMGxCUTJZc2FVSkJRV2xDTEVWQlFVVXNhVUpCUVd0Q08wbEJRM0pETEdWQlFXVXNSVUZCUlR0RlFVRnpRaXhEUVVONFF5eERRVUZETEVWQlJVUXNNRUpCUVRCQ0xHbENRVU42UWl4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5dzRRa0ZCUVN4RFFVRkJMRTlCUVRaQ08wbEJRelZDTEhkQ1FVRjNRaXhGUVVGRkxFMUJRVTBzUTBGQlF6dEZRVUY1UWl4RFFVTXpSQ3hEUVVOR0xHVkJSVVFzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc05FSkJRVUVzUTBGQlFTeFBRVUZQTzBsQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVFc2VVSkJRVzFDTEVWQlFVTXNZVUZCWVN4RlFVRkZMRU5CUVVNN1JVRkJSU3hEUVVGRkxFTkJRVU1zUlVGRGRrUXNRMEZCUXl4cFFrRkJhVUlzYVVKQlEycENMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1YwRkJWenRKUVVOV0xGRkJRVkVzUlVGQlJTeDNRa0ZCVlN4RFFVRkRMRTlCUVZFN1NVRkROMElzVlVGQlZTeEZRVUZGTEVOQlFVVTdTVUZEWkN4WFFVRlhMRVZCUVVVc1EwRkJSVHRKUVVObUxGbEJRVmtzUlVGQlJUdEZRVUZGTEVkQlJXWXNRMEZCUXl4RFFVRkRMRzlDUVVGdlFpeEZRVUZGTEVOQlEzWkNMR0ZCUVdFc1EwRkJReXhQUVVGUExFVkJRM0pDTEZkQlFWY3NRMEZCUXl4UFFVRlBMRU5CUTNCQ0xFTkJRMVVzUTBGRFpDeEZRVVZCTEdOQlFXTXNhVUpCUTJJc1RVRkJRU3hEUVVGQkxFOUJRVUVzUTBGQlFTeGhRVUZCTzBsQlFVc3NVMEZCVXl4RlFVRkRPMFZCUVhGRUxHZENRVU5zUlN4TlFVRkJMRU5CUVVFc1QwRkJRU3hEUVVGQkxHRkJRVUVzUTBGQlF5eDFRa0ZCUVN4RFFVRkJMRTlCUVhOQ08wbEJRVU1zYlVKQlFXMUNPMFZCUVVFc1EwRkJSU3hEUVVNeFF5eERRVU5PTEVWQlJVRXNRMEZCUXl4cFFrRkJhVUlzYVVKQlEycENMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdsQ1FVRkJMRU5CUVVFc1YwRkJWenRKUVVOV0xGRkJRVkVzUlVGQlJTeDNRa0ZCVlN4RFFVRkRMRTFCUVU4N1NVRkROVUlzVlVGQlZTeEZRVUZGTEVOQlFVVTdTVUZEWkN4WFFVRlhMRVZCUVVVc1EwRkJSVHRKUVVObUxGbEJRVmtzUlVGQlJUdEZRVUZGTEdkQ1FVVm9RaXhOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4cFFrRkJRU3hEUVVGQkxFbEJRVWs3U1VGQlF5eFBRVUZQTEVWQlFVVXNlVUpCUVZjc1EwRkJRenRGUVVGWExFZEJRMjVETEVOQlFVTXNRMEZCUXl4M1FrRkJkMElzUTBGRGRrSXNRMEZCUXl4RlFVRkRMRWRCUVVjc1pVRkRXQ3hOUVVGQkxFTkJRVUVzVDBGQlFTeERRVUZCTEdGQlFVRXNRMEZCUXl4cFFrRkJRU3hEUVVGQkxFbEJRVWtzVVVGQlJTeERRVUZETEVOQlFVTXNkVUpCUVhWQ0xFTkJRVkVzUTBGRE4wSXNRMEZEWkN4bFFVTkVMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdOQlFVRXNRMEZCUVN4dFFrRkJiVUk3U1VGRGJFSXNaVUZCWlN4RlFVRkRMQ3REUVVFclF6dEpRVU12UkN4UlFVRlJMRVZCUVVVc1VVRkJVenRKUVVOdVFpeFJRVUZSTEVWQlEwNHNhVUpCUVdsQ0xFZEJRVWNzVFVGQlRTeEhRVUZITEUxQlFVMHNlVUpCUVhsQ0xFTkJRVU1zU1VGQlNTeERRVU5zUlR0SlFVTkVMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZGTzBsQlEzaENMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZGTzBsQlEzaENMR2RDUVVGblFpeEZRVUZGTEdsQ1FVRnBRaXhIUVVGSExGTkJRVk1zUjBGQlJ6dEZRVUZwUWl4RFFVTndSU3hEUVVGRExFVkJRMFFzYzBKQlFYTkNMR2xDUVVOeVFpeE5RVUZCTEVOQlFVRXNUMEZCUVN4RFFVRkJMR0ZCUVVFc1EwRkJReXhSUVVGQkxFTkJRVUVzVDBGQlR6dEpRVU5PTEU5QlFVOHNSVUZCUlN4RFFVRkJMRXRCUVUwc2VVSkJRWGxDTEVOQlFVTXNTMEZCU3l4RFFVRkZPMGxCUTJoRUxFdEJRVXNzUlVGQlJTeERRVUZETEVOQlFVTXNhMEpCUVd0Q0xFTkJRVVU3U1VGRE4wSXNVVUZCVVN4RlFVRkZMRU5CUVVNc1EwRkJReXh4UWtGQmNVSXNRMEZCUlR0SlFVTnVReXhUUVVGVExFVkJRVU1zZVVOQlFYbERPMGxCUTI1RUxHVkJRV1VzUlVGQlF5eHBSRUZCYVVRN1NVRkRha1VzVFVGQlRTeGxRVU5LTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExHTkJRVUVzUTBGQlFTeHRRa0ZCYlVJN1RVRkRiRUlzWlVGQlpTeEZRVUZETEdsRlFVRnBSVHROUVVOcVJpeFJRVUZSTEVWQlFVVXNRMEZCUVN4TFFVRk5MSGxDUVVGNVFpeERRVUZETEV0QlFVc3NRMEZCUlR0TlFVTnFSQ3hWUVVGVkxFVkJRVVVzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUlR0TlFVTjRRaXhuUWtGQlowSXNSVUZCUXl4VFFVRlRPMDFCUXpGQ0xGRkJRVkVzUlVGQlJTeE5RVUZQTzAxQlEycENMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVU1zVTBGQlV5eERRVUZGTzAxQlEzcENMR2RDUVVGblFpeEZRVUZETEdkQ1FVRm5RanROUVVOcVF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0SlFVRjVRaXhEUVVOeVF6dEZRVU5HTEdkQ1FVVkVMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFUdEpRVUZMTEZOQlFWTXNSVUZCUXp0RlFVRXlSQ3huUWtGRGVFVXNUVUZCUVN4RFFVRkJMRTlCUVVFc1EwRkJRU3hoUVVGQkxFTkJRVU1zVTBGQlFTeERRVUZCTEU5QlFWRTdTVUZEVUN4RlFVRkZMRVZCUVVNc2QwTkJRWGRETzBsQlF6TkRMRTlCUVU4c1JVRkJSU3gzUWtGQmVVSTdTVUZEYkVNc1UwRkJVeXhGUVVGRExIRkZRVUZ4UlR0SlFVTXZSU3hQUVVGUExFVkJRVVVzUTBGQlFTeExRVUZOTERKQ1FVRXlRaXhEUVVGRkxFOUJRVThzU1VGQlN5eERRVUZETEU5QlFVODdSVUZCUlN4RFFVTnVSU3hEUVVGRExHVkJRMFlzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJPMGxCUTBVc1UwRkJVeXhGUVVGRExHdEZRVUZyUlR0SlFVTTFSU3hQUVVGUExFVkJRVU03UlVGQmQwTXNSMEZGTDBNc1EwRkJReXhEUVVGRExIVkNRVUYxUWl4RlFVRkZMRU5CUVVNc1lVRkJZU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVU0zUXl4RFFVTktMRU5CUTBVc1EwRkZVaXhEUVVGRE8wRkJSVlk3UVVGRlFTeHZRa0ZCYjBJc1EwRkJReXhUUVVGVExFZEJRVWM3UlVGREwwSTdRVUZEUmp0QlFVTkJPMFZCUTBVc1RVRkJUU3hGUVVGRkxHdENRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVZVN1JVRkRia003UVVGRFJqdEJRVU5CTzBWQlEwVXNjVUpCUVhGQ0xFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWVHRGUVVOb1JEdEJRVU5HTzBGQlEwRTdSVUZEUlN4dFFrRkJiVUlzUlVGQlJTeHJRa0ZCVXl4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVOMFF5eERRVUZET3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEZWsxRUxFbEJRVUVzYVVKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQmQwUXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEUVhoRUxFbEJRVUVzY1VKQlFVRXNSMEZCUVN4elFrRkJRU3hEUVVGQkxFOUJRVUU3UVVGQmJVUXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEwRnVSQ3hKUVVGQkxFMUJRVUVzUjBGQlFTeDFRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkRRU3hKUVVGQkxGZEJRVUVzUjBGQlFTeFBRVUZCTzBGQlEwRXNTVUZCUVN4UFFVRkJMRWRCUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEhOQ1FVRkJMRU5CUVVFc1QwRkJRVHRCUVVOQkxFbEJRVUVzVlVGQlFTeEhRVUZCTEU5QlFVRTdRVUZKUVN4SlFVRkJMRkZCUVVFc1IwRkJRU3h6UWtGQlFTeERRVUZCTEU5QlFVRTdRVUZEUVN4SlFVRkJMR1ZCUVVFc1IwRkJRU3hQUVVGQk8wRkJTVUVzU1VGQlFTeEpRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeFhRVUZCTEVkQlFVRXNjMEpCUVVFc1EwRkJRU3hQUVVGQk8wRkJRMEVzU1VGQlFTeGhRVUZCTEVkQlFVRXNUMEZCUVR0QlFVMUJMRWxCUVVFc1MwRkJRU3hIUVVGQkxFOUJRVUU3UVVGQlowVXNVMEZCUVN4MVFrRkJRU3hIUVVGQkxGZEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRWRCUVVFc1IwRkJRU3hMUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTzBGQlFVRXNVMEZCUVN4NVFrRkJRU3hYUVVGQkxHVkJRVUVzVDBGQlFTeHJRMEZCUVN4cFFrRkJRU3hQUVVGQkxFOUJRVUVzVVVGQlFTeG5Ra0ZCUVN4UFFVRkJMRTlCUVVFc1dVRkJRU3gzUWtGQlFTeFpRVUZCTEVOQlFVRXNWMEZCUVN4WFFVRkJMRmRCUVVFc1IwRkJRU3huUWtGQlFTeEhRVUZCTEdsQ1FVRkJMRXRCUVVFc1YwRkJRVHRCUVVGQkxGTkJRVUVzZDBKQlFVRXNSMEZCUVN4RlFVRkJMRmRCUVVFc1UwRkJRU3hYUVVGQkxFbEJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4VlFVRkJMRmRCUVVFc1IwRkJRU3hSUVVGQkxFZEJRVUVzYjBKQlFVRXNSMEZCUVN4M1FrRkJRU3hIUVVGQkxEUkNRVUZCTEU5QlFVRXNSVUZCUVN4SFFVRkJMRlZCUVVFc1MwRkJRU3hIUVVGQkxIZENRVUZCTEVOQlFVRXNWMEZCUVN4UFFVRkJMRXRCUVVFc1NVRkJRU3hMUVVGQkxFTkJRVUVzUjBGQlFTeERRVUZCTEVkQlFVRXNXVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzVTBGQlFTeE5RVUZCTEZkQlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzWTBGQlFTeEpRVUZCTEUxQlFVRXNRMEZCUVN4M1FrRkJRU3hYUVVGQkxFZEJRVUVzU1VGQlFTeEhRVUZCTEZGQlFVRXNSMEZCUVN4clFrRkJRU3hOUVVGQkxFTkJRVUVzVTBGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4SlFVRkJMRU5CUVVFc1IwRkJRU3hGUVVGQkxFZEJRVUVzVTBGQlFTeEpRVUZCTEVkQlFVRXNjVUpCUVVFc1IwRkJRU3hOUVVGQkxFTkJRVUVzZDBKQlFVRXNRMEZCUVN4SFFVRkJMRVZCUVVFc1IwRkJRU3hqUVVGQkxFbEJRVUVzUzBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRWxCUVVFc1EwRkJRU3hIUVVGQkxFdEJRVUVzVFVGQlFTeERRVUZCTEdOQlFVRXNRMEZCUVN4TlFVRkJMRVZCUVVFc1IwRkJRU3hGUVVGQkxFbEJRVUVzV1VGQlFTeE5RVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRWRCUVVFc1EwRkJRU3hIUVVGQkxGTkJRVUVzVFVGQlFTeERRVUZCTEU5QlFVRXNSMEZCUVN4SFFVRkJMRTFCUVVFc1MwRkJRU3hKUVVGQkxFdEJRVUVzUTBGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRTFCUVVFc1dVRkJRU3hOUVVGQk8wRkJSV2hGTEZOQlFWTXNiMEpCUVc5Q0xFTkJRVU03UlVGQlJUdEJRVUZMTEVOQlFVTXNSVUZCUlR0RlFVTjBReXhOUVVGTkxGVkJRVlVzUjBGQlJ5eEpRVUZCTEhWQ1FVRlhMRVZCUVVNc2QwTkJRVFpDTEVOQlFVTTdSVUZGTjBRc2IwSkJRMFVzVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1NVRkJRU3hEUVVGQkxFOUJRVWM3U1VGQlF5eFRRVUZUTEVWQlFVTTdSVUZCT0VJc1IwRkRNVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlR0SlFVRkZMRXRCUVVzN1NVRkJSVHRGUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNhMEpCUTNCRUxFMUJRVUVzUTBGQlFTeFBRVUZCTEVOQlFVRXNZVUZCUVN4RFFVRkRMRWxCUVVFc1EwRkJRU3hQUVVGSE8wbEJRMFlzVTBGQlV5eEZRVUZETERoQ1FVRTRRanRKUVVONFF5eEhRVUZITEVWQlFVY3NSMEZCUlN4TFFVRk5MRWxCUVVjc1EwRkJSU3hGUVVGRk8wbEJRM0pDTEZkQlFWY3NSVUZCUlN4RFFVRkZPMGxCUTJZc1QwRkJUeXhGUVVOTUxFOUJRVThzUzBGQlN5eExRVUZMTEZGQlFWRXNTVUZCU1N4TFFVRkxMRXRCUVVzc1NVRkJTU3hIUVVGSExIRkNRVUZQTEVOQlFVTXNTVUZCU1N4SFFVRkhPMFZCUXpsRUxHZENRVVZFTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExGZEJRVUVzUTBGQlFTeFBRVUZWTzBsQlExUXNSVUZCUlN4RlFVRkRMRTFCUVUwN1NVRkRWQ3hMUVVGTExFVkJRVVVzZFVKQlFWTXNRMEZCUXl4WFFVRlpPMGxCUXpkQ0xGVkJRVlVzUlVGQlJTeERRVUZGTzBsQlEyUXNWVUZCVlN4RlFVTlNMRTlCUVU4c1MwRkJTeXhMUVVGTExGRkJRVkVzUjBGQlJ5eDVRa0ZCVnl4RFFVRkRMRWxCUVVrc1IwRkJSeXg1UWtGQlZ5eERRVUZETzBWQlF6VkVMRWRCUlVFc1NVRkJRU3h2UWtGQll5eEZRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVTXNSMEZCUXl4RlFVRkRMRWRCUTNoRUxFTkJRVU1zUlVGRFdpeFBRVUZQTEV0QlFVc3NTMEZCU3l4UlFVRlJMRWxCUVVrc1MwRkJTeXhMUVVGTExFbEJRVWtzWjBKQlF6RkRMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEc5Q1FVRnZRanRKUVVGRExFbEJRVWtzUlVGQlJUdEZRVUZOTEVOQlFVVXNRMEZCUXl4blFrRkZja01zVFVGQlFTeERRVUZCTEU5QlFVRXNRMEZCUVN4aFFVRkJMRU5CUVVNc1YwRkJRU3hEUVVGQkxFOUJRVlU3U1VGRFZDeEZRVUZGTEVWQlFVTXNUVUZCVFR0SlFVTlVMRXRCUVVzc1JVRkJSU3gxUWtGQlV5eERRVUZETEZkQlFWazdTVUZETjBJc1ZVRkJWU3hGUVVGRkxFTkJRVVU3U1VGRFpDeFRRVUZUTEVWQlFVTTdSVUZCY1VNc1IwRkZPVU1zU1VGQlNTeExRVUZMTEZOQlFWTXNTVUZEYmtJc1NVRkJRU3hwUTBGQmFVSXNSVUZCUXl4TFFVRkxMRVZCUVVVN1NVRkRka0lzYjBKQlFXOUNMRVZCUVVVN1JVRkRlRUlzUTBGQlF5eERRVUZETEdkQ1FVTkJMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEZkQlFVRXNRMEZCUVN4UFFVRlZPMGxCUTFRc1QwRkJUeXhGUVVGRkxDdENRVUZwUWl4RFFVRkRMRVZCUVVjN1NVRkRPVUlzUzBGQlN5eEZRVUZGTEhWQ1FVRlRMRU5CUVVNc1YwRkJXVHRKUVVNM1FpeFRRVUZUTEVWQlFVTTdSVUZCT0VNc1owSkJSWGhFTEUxQlFVRXNRMEZCUVN4UFFVRkJMRU5CUVVFc1lVRkJRU3hEUVVGRExGRkJRVUVzUTBGQlFTeFBRVUZQTzBsQlEwNHNWMEZCVnp0SlFVTllMREpDUVVFeVFpeEZRVUZGTEVsQlFVRXNiME5CUVc5Q0xFVkJRVU1zUzBGQlN5eERRVUZGTzBsQlEzcEVMR0ZCUVdFc1JVRkJSU3hKUVVGQkxIbENRVUZqTEVWQlFVTXNWVUZCVlN4RlFVRkZMRXRCUVVzN1JVRkJSU3hEUVVOc1JDeERRVU5UTEVOQlFVTXNSMEZGWWl4SlFVRkJMRzlDUVVGakxFVkJRVVVzUjBGQlJTeExRVUZOTEVWQlFVTXNRMEZGYWtJc1EwRkZXQ3hEUVVOT0xFTkJRMFVzUTBGQlF6dEJRVVZXTzBGQlJVRXNiMEpCUVc5Q0xFTkJRVU1zVTBGQlV5eEhRVUZITzBWQlF5OUNMRWxCUVVrc1JVRkJSU3hyUWtGQlV5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMR3RDUVVGVExFTkJRVU1zVFVGQlRTeEZRVUZGTEd0Q1FVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5xUlN4RFFVRkRPMEZCUVVNc1NVRkJRU3hSUVVGQkxHZENRVVZoTEVsQlFVRXNWMEZCU1N4RlFVRkRMRzlDUVVGdlFpeEZRVUZGTEVOQlFVTXNVMEZCVXl4RlFVRkZMRk5CUVZNc1MwRkJTenRGUVVOc1JTeFBRVUZQTEVsQlFVRXNaVUZCVHl4RlFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFVkJRVVVzVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXp0QlFVTm9SQ3hEUVVGRExFTkJRVU03UVVGQlFTeFBRVUZCTEVOQlFVRXNUMEZCUVN4SFFVRkJMRkZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVONFJrWXNTVUZCUVN4MVFrRkJRU3hIUVVGQkxITkNRVUZCTEVOQlFVRXNUMEZCUVR0QlFVRXJSQ3hUUVVGQkxIVkNRVUZCTEVkQlFVRXNWMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hEUVVGQkxGVkJRVUVzUjBGQlFTeEhRVUZCTEV0QlFVRXNUMEZCUVN4RlFVRkJMRWRCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRRUzlFTEVsQlFVRXNUVUZCUVN4SFFVRkJMSFZDUVVGQkxFTkJRVUVzVDBGQlFUdEJRVU5CTEVsQlFVRXNWVUZCUVN4SFFVRkJMSE5DUVVGQkxFTkJRVUVzVDBGQlFUdEJRVVZCTEVsQlFVRXNZMEZCUVN4SFFVRkJMRTlCUVVFN1FVRkJhVVVzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeDVRa0ZCUVN4WFFVRkJMR1ZCUVVFc1QwRkJRU3hyUTBGQlFTeHBRa0ZCUVN4UFFVRkJMRTlCUVVFc1VVRkJRU3huUWtGQlFTeFBRVUZCTEU5QlFVRXNXVUZCUVN4M1FrRkJRU3haUVVGQkxFTkJRVUVzVjBGQlFTeFhRVUZCTEZkQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxHbENRVUZCTEV0QlFVRXNWMEZCUVR0QlFVRkJMRk5CUVVFc2QwSkJRVUVzUjBGQlFTeEZRVUZCTEZkQlFVRXNVMEZCUVN4WFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEZkQlFVRXNSMEZCUVN4UlFVRkJMRWRCUVVFc2IwSkJRVUVzUjBGQlFTeDNRa0ZCUVN4SFFVRkJMRFJDUVVGQkxFOUJRVUVzUlVGQlFTeEhRVUZCTEZWQlFVRXNTMEZCUVN4SFFVRkJMSGRDUVVGQkxFTkJRVUVzVjBGQlFTeFBRVUZCTEV0QlFVRXNTVUZCUVN4TFFVRkJMRU5CUVVFc1IwRkJRU3hEUVVGQkxFZEJRVUVzV1VGQlFTeExRVUZCTEVOQlFVRXNSMEZCUVN4RFFVRkJMRWRCUVVFc1UwRkJRU3hOUVVGQkxGZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc1kwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeDNRa0ZCUVN4WFFVRkJMRWRCUVVFc1NVRkJRU3hIUVVGQkxGRkJRVUVzUjBGQlFTeHJRa0ZCUVN4TlFVRkJMRU5CUVVFc1UwRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeEpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1UwRkJRU3hKUVVGQkxFZEJRVUVzY1VKQlFVRXNSMEZCUVN4TlFVRkJMRU5CUVVFc2QwSkJRVUVzUTBGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4alFVRkJMRWxCUVVFc1MwRkJRU3hKUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVsQlFVRXNRMEZCUVN4SFFVRkJMRXRCUVVFc1RVRkJRU3hEUVVGQkxHTkJRVUVzUTBGQlFTeE5RVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRWxCUVVFc1dVRkJRU3hOUVVGQkxFTkJRVUVzUjBGQlFTeEpRVUZCTEVkQlFVRXNRMEZCUVN4SFFVRkJMRk5CUVVFc1RVRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeEhRVUZCTEUxQlFVRXNTMEZCUVN4SlFVRkJMRXRCUVVFc1EwRkJRU3hIUVVGQkxFTkJRVUVzUjBGQlFTeEZRVUZCTEUxQlFVRXNXVUZCUVN4TlFVRkJPMEZCUVVFc1UwRkJRU3huUWtGQlFTeEhRVUZCTEVWQlFVRXNSMEZCUVN4RlFVRkJMRXRCUVVFc1NVRkJRU3hIUVVGQkxFZEJRVUVzWTBGQlFTeERRVUZCTEVkQlFVRXNUMEZCUVN4SFFVRkJMRWxCUVVFc1IwRkJRU3hKUVVGQkxFMUJRVUVzUTBGQlFTeGpRVUZCTEVOQlFVRXNSMEZCUVN4RlFVRkJMRWRCUVVFc1NVRkJRU3hMUVVGQkxFVkJRVUVzUzBGQlFTeEZRVUZCTEZWQlFVRXNVVUZCUVN4WlFVRkJMRkZCUVVFc1VVRkJRU3h2UWtGQlFTeEhRVUZCTEVOQlFVRXNSMEZCUVN4SlFVRkJMRXRCUVVFc1YwRkJRU3hIUVVGQk8wRkJRVUVzVTBGQlFTeGxRVUZCTEVkQlFVRXNVVUZCUVN4SFFVRkJMRWRCUVVFc1dVRkJRU3hEUVVGQkxFZEJRVUVzTWtKQlFVRXNSMEZCUVN4blFrRkJRU3hIUVVGQkxFZEJRVUVzVFVGQlFTeERRVUZCTEVkQlFVRTdRVUZCUVN4VFFVRkJMR0ZCUVVFc1MwRkJRU3hGUVVGQkxFbEJRVUVzWlVGQlFTeExRVUZCTEdsQ1FVRkJMRXRCUVVFc2EwSkJRVUVzUzBGQlFTeE5RVUZCTEVsQlFVRXNSMEZCUVN4TFFVRkJMRU5CUVVFc1RVRkJRU3hEUVVGQkxGZEJRVUVzVDBGQlFTeEpRVUZCTEV0QlFVRXNVMEZCUVN4UlFVRkJMRWRCUVVFc1IwRkJRU3hKUVVGQkxFTkJRVUVzU1VGQlFTeERRVUZCTEV0QlFVRXNSVUZCUVN4SlFVRkJMREpDUVVGQkxFZEJRVUVzYzBKQlFVRXNSMEZCUVN4WlFVRkJMRk5CUVVFc05FUkJRVUVzU1VGQlFTeG5Ra0ZCUVN4TlFVRkJMRWRCUVVFc1RVRkJRU3hGUVVGQkxFdEJRVUU3UVVGRmJFUXNUVUZCVFN4elFrRkJjMElzVTBGQlV5eHZRa0ZCWVN4RFFVRkRPMFZCVjJoRkxFMUJRVTBzUTBGQlFTeEZRVUZITzBsQlExQXNUVUZCVFR0TlFVRkZMRmxCUVZrN1RVRkJSU3hWUVVGVk8wMUJRVVVzVVVGQlVTeEhRVUZITzBsQlFVMHNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTE8wbEJRMnBGTEc5Q1FVTkZMRTFCUVVFc1EwRkJRU3hQUVVGQkxFTkJRVUVzWVVGQlFTeERRVUZETEdOQlFVRXNRMEZCUVN4dFFrRkJiVUk3VFVGRGJFSXNWVUZCVlN4RlFVRkZMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUlR0TlFVTnlReXhWUVVGVkxFVkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRk8wMUJRMjVETEZGQlFWRXNSVUZCUlN4WlFVRmhPMDFCUTNaQ0xGRkJRVkVzUlVGQlJTeFZRVUZYTzAxQlEzSkNMRkZCUVZFc1JVRkJSVHRKUVVGVExFTkJRM0JDTEVOQlFVTTdSVUZGVGp0QlFVTkdPMEZCUVVNc1QwRkJRU3hEUVVGQkxFOUJRVUVzUjBGQlFTeHpRa0ZCUVR0QlFVRkJMR1ZCUVVFc1EwRjJRbTlDTEhOQ1FVRnpRaXhsUVVOMFFqdEZRVU5xUWl4WlFVRlpMRVZCUVVVc2EwSkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlR0RlFVTjJReXhWUVVGVkxFVkJRVVVzYTBKQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWVHRGUVVOeVF5eFJRVUZSTEVWQlFVVXNhMEpCUVZNc1EwRkJRenRCUVVOMFFpeERRVUZETzBGQlFVRXNaVUZCUVN4RFFVeHJRaXh6UWtGQmMwSXNhMEpCVDI1Q08wVkJRM0JDTEVOQlFVTXNSVUZCUlN4clFrRkJVeXhEUVVGRE8wRkJRMllzUTBGQlF6czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEyUklMRWxCUVVFc2QwSkJRVUVzUjBGQlFTeHpRa0ZCUVN4RFFVRkJMRTlCUVVFN1FVRkJjMFFzVTBGQlFTeDFRa0ZCUVN4SFFVRkJMRmRCUVVFc1IwRkJRU3hKUVVGQkxFZEJRVUVzUTBGQlFTeFZRVUZCTEVkQlFVRXNSMEZCUVN4TFFVRkJMRTlCUVVFc1JVRkJRU3hIUVVGQklpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdZMnhoYzNOdVlXMWxjeUJtY205dElDZGpiR0Z6YzI1aGJXVnpKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnVW1WaFkzUXNJSHNnVUhWeVpVTnZiWEJ2Ym1WdWRDQjlJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCSlpHVnVkR2xqYjI0Z1puSnZiU0FuTGk0dkxpNHZMaTR2ZFdrdmFXUmxiblJwWTI5dUp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1EyOXVibVZqZEdWa1FXTmpiM1Z1ZEhOTWFYTjBTWFJsYlNCbGVIUmxibVJ6SUZCMWNtVkRiMjF3YjI1bGJuUWdlMXh1SUNCemRHRjBhV01nWTI5dWRHVjRkRlI1Y0dWeklEMGdlMXh1SUNBZ0lIUTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxtbHpVbVZ4ZFdseVpXUXNYRzRnSUgwN1hHNWNiaUFnYzNSaGRHbGpJSEJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0JoWkdSeVpYTnpPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdZMnhoYzNOT1lXMWxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHNWhiV1U2SUZCeWIzQlVlWEJsY3k1dWIyUmxMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdjM1JoZEhWek9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUdGamRHbHZiam9nVUhKdmNGUjVjR1Z6TG01dlpHVXNYRzRnSUNBZ2IzQjBhVzl1Y3pvZ1VISnZjRlI1Y0dWekxtNXZaR1VzWEc0Z0lIMDdYRzVjYmlBZ2MzUmhkR2xqSUdSbFptRjFiSFJRY205d2N5QTlJSHRjYmlBZ0lDQmpiR0Z6YzA1aGJXVTZJRzUxYkd3c1hHNGdJQ0FnYjNCMGFXOXVjem9nYm5Wc2JDeGNiaUFnSUNCaFkzUnBiMjQ2SUc1MWJHd3NYRzRnSUgwN1hHNWNiaUFnY21WdVpHVnlLQ2tnZTF4dUlDQWdJR052Ym5OMElIc2dZV1JrY21WemN5d2dZMnhoYzNOT1lXMWxMQ0J1WVcxbExDQnpkR0YwZFhNc0lHRmpkR2x2Yml3Z2IzQjBhVzl1Y3lCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmx4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxN1kyeGhjM051WVcxbGN5Z25ZMjl1Ym1WamRHVmtMV0ZqWTI5MWJuUnpMV3hwYzNSZlgzSnZkeWNzSUdOc1lYTnpUbUZ0WlNsOVBseHVJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0ltTnZibTVsWTNSbFpDMWhZMk52ZFc1MGN5MXNhWE4wWDE5eWIzY3RZMjl1ZEdWdWRGd2lQbHh1SUNBZ0lDQWdJQ0FnSUR4SlpHVnVkR2xqYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW1OdmJtNWxZM1JsWkMxaFkyTnZkVzUwY3kxc2FYTjBYMTlwWkdWdWRHbGpiMjVjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdZV1JrY21WemN6MTdZV1JrY21WemMzMWNiaUFnSUNBZ0lDQWdJQ0FnSUdScFlXMWxkR1Z5UFhzek1uMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBZ0lEeGthWFkrWEc0Z0lDQWdJQ0FnSUNBZ0lDQThjQ0JqYkdGemMwNWhiV1U5WENKamIyNXVaV04wWldRdFlXTmpiM1Z1ZEhNdGJHbHpkRjlmWVdOamIzVnVkQzF1WVcxbFhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHpkSEp2Ym1jK2UyNWhiV1Y5UEM5emRISnZibWMrWEc0Z0lDQWdJQ0FnSUNBZ0lDQThMM0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdjM1JoZEhWeklEOGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThjQ0JqYkdGemMwNWhiV1U5WENKamIyNXVaV04wWldRdFlXTmpiM1Z1ZEhNdGJHbHpkRjlmWVdOamIzVnVkQzF6ZEdGMGRYTmNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FtYm1KemNEc21ibUp6Y0R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2MzUmhkSFZ6ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FwSURvZ2JuVnNiSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGhZM1JwYjI1OVhHNGdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNCN2IzQjBhVzl1YzMxY2JpQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDazdYRzRnSUgxY2JuMWNiaUlzSW1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnZlNCbWNtOXRJQ2N1TDJOdmJtNWxZM1JsWkMxaFkyTnZkVzUwY3kxc2FYTjBMV2wwWlcwdVkyOXRjRzl1Wlc1MEp6dGNiaUlzSW1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnVW1WaFkzUXNJSHNnZFhObFVtVm1JSDBnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElIc2dUV1Z1ZFNCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDNWcEwyMWxiblVuTzF4dWFXMXdiM0owSUhzZ1NXTnZiazVoYldVc0lFSjFkSFJ2YmtsamIyNGdmU0JtY205dElDY3VMaTh1TGk4dUxpOWpiMjF3YjI1bGJuUXRiR2xpY21GeWVTYzdYRzVwYlhCdmNuUWdleUIxYzJWSk1UaHVRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmh2YjJ0ekwzVnpaVWt4T0c1RGIyNTBaWGgwSnp0Y2JseHVZMjl1YzNRZ1EyOXVibVZqZEdWa1FXTmpiM1Z1ZEhOTWFYTjBUM0IwYVc5dWN5QTlJQ2g3WEc0Z0lHTm9hV3hrY21WdUxGeHVJQ0J2YmxOb2IzZFBjSFJwYjI1ekxGeHVJQ0J2YmtocFpHVlBjSFJwYjI1ekxGeHVJQ0J6YUc5M0xGeHVmU2tnUFQ0Z2UxeHVJQ0JqYjI1emRDQnlaV1lnUFNCMWMyVlNaV1lvWm1Gc2MyVXBPMXh1SUNCamIyNXpkQ0IwSUQwZ2RYTmxTVEU0YmtOdmJuUmxlSFFvS1R0Y2JseHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeGthWFlnY21WbVBYdHlaV1o5UGx4dUlDQWdJQ0FnUEVKMWRIUnZia2xqYjI1Y2JpQWdJQ0FnSUNBZ2FXTnZiazVoYldVOWUwbGpiMjVPWVcxbExrMXZjbVZXWlhKMGFXTmhiSDFjYmlBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aVkyOXVibVZqZEdWa0xXRmpZMjkxYm5SekxXOXdkR2x2Ym5OZlgySjFkSFJ2Ymx3aVhHNGdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWUyOXVVMmh2ZDA5d2RHbHZibk45WEc0Z0lDQWdJQ0FnSUdGeWFXRk1ZV0psYkQxN2RDZ25iM0IwYVc5dWN5Y3BmVnh1SUNBZ0lDQWdMejVjYmlBZ0lDQWdJSHR6YUc5M0lEOGdLRnh1SUNBZ0lDQWdJQ0E4VFdWdWRWeHVJQ0FnSUNBZ0lDQWdJR0Z1WTJodmNrVnNaVzFsYm5ROWUzSmxaaTVqZFhKeVpXNTBmVnh1SUNBZ0lDQWdJQ0FnSUc5dVNHbGtaVDE3YjI1SWFXUmxUM0IwYVc5dWMzMWNiaUFnSUNBZ0lDQWdJQ0J3YjNCd1pYSlBjSFJwYjI1elBYdDdYRzRnSUNBZ0lDQWdJQ0FnSUNCdGIyUnBabWxsY25NNklGdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2V5QnVZVzFsT2lBbmNISmxkbVZ1ZEU5MlpYSm1iRzkzSnl3Z2IzQjBhVzl1Y3pvZ2V5QmhiSFJDYjNWdVpHRnllVG9nZEhKMVpTQjlJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmRMRnh1SUNBZ0lDQWdJQ0FnSUgxOVhHNGdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0I3WTJocGJHUnlaVzU5WEc0Z0lDQWdJQ0FnSUR3dlRXVnVkVDVjYmlBZ0lDQWdJQ2tnT2lCdWRXeHNmVnh1SUNBZ0lEd3ZaR2wyUGx4dUlDQXBPMXh1ZlR0Y2JseHVRMjl1Ym1WamRHVmtRV05qYjNWdWRITk1hWE4wVDNCMGFXOXVjeTV3Y205d1ZIbHdaWE1nUFNCN1hHNGdJR05vYVd4a2NtVnVPaUJRY205d1ZIbHdaWE11Ym05a1pTNXBjMUpsY1hWcGNtVmtMRnh1SUNCdmJraHBaR1ZQY0hScGIyNXpPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNCdmJsTm9iM2RQY0hScGIyNXpPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNCemFHOTNPaUJRY205d1ZIbHdaWE11WW05dmJDNXBjMUpsY1hWcGNtVmtMRnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1EyOXVibVZqZEdWa1FXTmpiM1Z1ZEhOTWFYTjBUM0IwYVc5dWN6dGNiaUlzSW1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnZlNCbWNtOXRJQ2N1TDJOdmJtNWxZM1JsWkMxaFkyTnZkVzUwY3kxc2FYTjBMVzl3ZEdsdmJuTXVZMjl0Y0c5dVpXNTBKenRjYmlJc0ltbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ1VtVmhZM1FzSUhzZ1VIVnlaVU52YlhCdmJtVnVkQ0I5SUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQjdJRWxqYjI1T1lXMWxJSDBnWm5KdmJTQW5MaTR2TGk0dlkyOXRjRzl1Wlc1MExXeHBZbkpoY25rbk8xeHVhVzF3YjNKMElIc2dUV1Z1ZFVsMFpXMGdmU0JtY205dElDY3VMaTh1TGk5MWFTOXRaVzUxSnp0Y2JtbHRjRzl5ZENCRGIyNXVaV04wWldSQlkyTnZkVzUwYzB4cGMzUkpkR1Z0SUdaeWIyMGdKeTR2WTI5dWJtVmpkR1ZrTFdGalkyOTFiblJ6TFd4cGMzUXRhWFJsYlNjN1hHNXBiWEJ2Y25RZ1EyOXVibVZqZEdWa1FXTmpiM1Z1ZEhOTWFYTjBUM0IwYVc5dWN5Qm1jbTl0SUNjdUwyTnZibTVsWTNSbFpDMWhZMk52ZFc1MGN5MXNhWE4wTFc5d2RHbHZibk1uTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJEYjI1dVpXTjBaV1JCWTJOdmRXNTBjMHhwYzNRZ1pYaDBaVzVrY3lCUWRYSmxRMjl0Y0c5dVpXNTBJSHRjYmlBZ2MzUmhkR2xqSUdOdmJuUmxlSFJVZVhCbGN5QTlJSHRjYmlBZ0lDQjBPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNCOU8xeHVYRzRnSUhOMFlYUnBZeUJrWldaaGRXeDBVSEp2Y0hNZ1BTQjdYRzRnSUNBZ1lXTmpiM1Z1ZEZSdlEyOXVibVZqZERvZ2JuVnNiQ3hjYmlBZ2ZUdGNibHh1SUNCemRHRjBhV01nY0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUdGalkyOTFiblJVYjBOdmJtNWxZM1E2SUZCeWIzQlVlWEJsY3k1emFHRndaU2g3WEc0Z0lDQWdJQ0JoWkdSeVpYTnpPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdJQ0J1WVcxbE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ2ZTa3NYRzRnSUNBZ1kyOXVibVZqZEdWa1FXTmpiM1Z1ZEhNNklGQnliM0JVZVhCbGN5NWhjbkpoZVU5bUtGeHVJQ0FnSUNBZ1VISnZjRlI1Y0dWekxuTm9ZWEJsS0h0Y2JpQWdJQ0FnSUNBZ1lXUmtjbVZ6Y3pvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnk1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUNBZ0lDQnVZVzFsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnSUNBZ0lHeGhjM1JCWTNScGRtVTZJRkJ5YjNCVWVYQmxjeTV1ZFcxaVpYSXNYRzRnSUNBZ0lDQjlLU3hjYmlBZ0lDQXBMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdZMjl1Ym1WamRFRmpZMjkxYm5RNklGQnliM0JVZVhCbGN5NW1kVzVqTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnYzJWc1pXTjBaV1JCWkdSeVpYTnpPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdjbVZ0YjNabFVHVnliV2wwZEdWa1FXTmpiM1Z1ZERvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdjMlYwVTJWc1pXTjBaV1JCWkdSeVpYTnpPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lITm9iM1ZzWkZKbGJtUmxja3hwYzNSUGNIUnBiMjV6T2lBb2NISnZjSE1zSUhCeWIzQk9ZVzFsTENCamIyMXdiMjVsYm5ST1lXMWxLU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIQnliM0J6VzNCeWIzQk9ZVzFsWFNBaFBUMGdKMkp2YjJ4bFlXNG5LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1JYSnliM0lvWEc0Z0lDQWdJQ0FnSUNBZ1lGZGhjbTVwYm1jNklFWmhhV3hsWkNCd2NtOXdJSFI1Y0dVNklDY2tlM0J5YjNCT1lXMWxmU2NnYjJZZ1kyOXRjRzl1Wlc1MElDY2tlMk52YlhCdmJtVnVkRTVoYldWOUp5QnRkWE4wSUdKbElHRWdZbTl2YkdWaGJpNGdVbVZqWldsMlpXUTZJQ1I3ZEhsd1pXOW1JSEJ5YjNCelcxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNFNWhiV1ZjYmlBZ0lDQWdJQ0FnSUNCZGZXQXNYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hCeWIzQnpXM0J5YjNCT1lXMWxYU0FtSmlBaGNISnZjSE11Y21WdGIzWmxVR1Z5YldsMGRHVmtRV05qYjNWdWRDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FnSUdCWFlYSnVhVzVuT2lCR1lXbHNaV1FnY0hKdmNDQjBlWEJsT2lBbkpIdHdjbTl3VG1GdFpYMG5JRzltSUdOdmJYQnZibVZ1ZENBbkpIdGpiMjF3YjI1bGJuUk9ZVzFsZlNjZ2NtVnhkV2x5WlhNZ2NISnZjQ0FuY21WdGIzWmxVR1Z5YldsMGRHVmtRV05qYjNWdWRDY3VZQ3hjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdmU3hjYmlBZ2ZUdGNibHh1SUNCemRHRjBaU0E5SUh0Y2JpQWdJQ0JoWTJOdmRXNTBWMmwwYUU5d2RHbHZibk5UYUc5M2Jqb2diblZzYkN4Y2JpQWdmVHRjYmx4dUlDQmthWE5qYjI1dVpXTjBRV05qYjNWdWRDQTlJQ2dwSUQwK0lIdGNiaUFnSUNCMGFHbHpMbWhwWkdWQlkyTnZkVzUwVDNCMGFXOXVjeWdwTzF4dUlDQWdJSFJvYVhNdWNISnZjSE11Y21WdGIzWmxVR1Z5YldsMGRHVmtRV05qYjNWdWRDaDBhR2x6TG5OMFlYUmxMbUZqWTI5MWJuUlhhWFJvVDNCMGFXOXVjMU5vYjNkdUtUdGNiaUFnZlR0Y2JseHVJQ0J6ZDJsMFkyaEJZMk52ZFc1MElEMGdLR0ZrWkhKbGMzTXBJRDArSUh0Y2JpQWdJQ0IwYUdsekxtaHBaR1ZCWTJOdmRXNTBUM0IwYVc5dWN5Z3BPMXh1SUNBZ0lIUm9hWE11Y0hKdmNITXVjMlYwVTJWc1pXTjBaV1JCWkdSeVpYTnpLR0ZrWkhKbGMzTXBPMXh1SUNCOU8xeHVYRzRnSUdocFpHVkJZMk52ZFc1MFQzQjBhVzl1Y3lBOUlDZ3BJRDArSUh0Y2JpQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtIc2dZV05qYjNWdWRGZHBkR2hQY0hScGIyNXpVMmh2ZDI0NklHNTFiR3dnZlNrN1hHNGdJSDA3WEc1Y2JpQWdjMmh2ZDBGalkyOTFiblJQY0hScGIyNXpJRDBnS0dGa1pISmxjM01wSUQwK0lIdGNiaUFnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHNnWVdOamIzVnVkRmRwZEdoUGNIUnBiMjV6VTJodmQyNDZJR0ZrWkhKbGMzTWdmU2s3WEc0Z0lIMDdYRzVjYmlBZ2NtVnVaR1Z5Vlc1amIyNXVaV04wWldSQlkyTnZkVzUwS0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnWVdOamIzVnVkRlJ2UTI5dWJtVmpkQ3dnWTI5dWJtVmpkRUZqWTI5MWJuUWdmU0E5SUhSb2FYTXVjSEp2Y0hNN1hHNGdJQ0FnWTI5dWMzUWdleUIwSUgwZ1BTQjBhR2x6TG1OdmJuUmxlSFE3WEc1Y2JpQWdJQ0JwWmlBb0lXRmpZMjkxYm5SVWIwTnZibTVsWTNRcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUhzZ1lXUmtjbVZ6Y3l3Z2JtRnRaU0I5SUQwZ1lXTmpiM1Z1ZEZSdlEyOXVibVZqZER0Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQRU52Ym01bFkzUmxaRUZqWTI5MWJuUnpUR2x6ZEVsMFpXMWNiaUFnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQVndpWTI5dWJtVmpkR1ZrTFdGalkyOTFiblJ6TFd4cGMzUmZYM0p2ZHkwdGFHbG5hR3hwWjJoMFhDSmNiaUFnSUNBZ0lDQWdZV1JrY21WemN6MTdZV1JrY21WemMzMWNiaUFnSUNBZ0lDQWdibUZ0WlQxN1lDUjdibUZ0WlgwZ0tPS0FwaVI3WVdSa2NtVnpjeTV6ZFdKemRISW9MVFFzSURRcGZTbGdmVnh1SUNBZ0lDQWdJQ0J6ZEdGMGRYTTllM1FvSjNOMFlYUjFjMDV2ZEVOdmJtNWxZM1JsWkNjcGZWeHVJQ0FnSUNBZ0lDQmhZM1JwYjI0OWUxeHVJQ0FnSUNBZ0lDQWdJRHhoWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0pqYjI1dVpXTjBaV1F0WVdOamIzVnVkSE10YkdsemRGOWZZV05qYjNWdWRDMXpkR0YwZFhNdGJHbHVhMXdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYc29LU0E5UGlCamIyNXVaV04wUVdOamIzVnVkQ2hoWTJOdmRXNTBWRzlEYjI1dVpXTjBMbUZrWkhKbGMzTXBmVnh1SUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJSHQwS0NkamIyNXVaV04wSnlsOVhHNGdJQ0FnSUNBZ0lDQWdQQzloUGx4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBdlBseHVJQ0FnSUNrN1hHNGdJSDFjYmx4dUlDQnlaVzVrWlhKTWFYTjBTWFJsYlU5d2RHbHZibk1vWVdSa2NtVnpjeWtnZTF4dUlDQWdJR052Ym5OMElIc2dZV05qYjNWdWRGZHBkR2hQY0hScGIyNXpVMmh2ZDI0Z2ZTQTlJSFJvYVhNdWMzUmhkR1U3WEc0Z0lDQWdZMjl1YzNRZ2V5QjBJSDBnUFNCMGFHbHpMbU52Ym5SbGVIUTdYRzVjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ1BFTnZibTVsWTNSbFpFRmpZMjkxYm5SelRHbHpkRTl3ZEdsdmJuTmNiaUFnSUNBZ0lDQWdiMjVJYVdSbFQzQjBhVzl1Y3oxN2RHaHBjeTVvYVdSbFFXTmpiM1Z1ZEU5d2RHbHZibk45WEc0Z0lDQWdJQ0FnSUc5dVUyaHZkMDl3ZEdsdmJuTTllM1JvYVhNdWMyaHZkMEZqWTI5MWJuUlBjSFJwYjI1ekxtSnBibVFvYm5Wc2JDd2dZV1JrY21WemN5bDlYRzRnSUNBZ0lDQWdJSE5vYjNjOWUyRmpZMjkxYm5SWGFYUm9UM0IwYVc5dWMxTm9iM2R1SUQwOVBTQmhaR1J5WlhOemZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQThUV1Z1ZFVsMFpXMGdhV052Yms1aGJXVTllMGxqYjI1T1lXMWxMa3h2WjI5MWRIMGdiMjVEYkdsamF6MTdkR2hwY3k1a2FYTmpiMjV1WldOMFFXTmpiM1Z1ZEgwK1hHNGdJQ0FnSUNBZ0lDQWdlM1FvSjJScGMyTnZibTVsWTNSVWFHbHpRV05qYjNWdWRDY3BmVnh1SUNBZ0lDQWdJQ0E4TDAxbGJuVkpkR1Z0UGx4dUlDQWdJQ0FnUEM5RGIyNXVaV04wWldSQlkyTnZkVzUwYzB4cGMzUlBjSFJwYjI1elBseHVJQ0FnSUNrN1hHNGdJSDFjYmx4dUlDQnlaVzVrWlhKTWFYTjBTWFJsYlVGamRHbHZiaWhoWkdSeVpYTnpLU0I3WEc0Z0lDQWdZMjl1YzNRZ2V5QjBJSDBnUFNCMGFHbHpMbU52Ym5SbGVIUTdYRzVjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ1BHRmNiaUFnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQVndpWTI5dWJtVmpkR1ZrTFdGalkyOTFiblJ6TFd4cGMzUmZYMkZqWTI5MWJuUXRjM1JoZEhWekxXeHBibXRjSWx4dUlDQWdJQ0FnSUNCdmJrTnNhV05yUFhzb0tTQTlQaUIwYUdsekxuTjNhWFJqYUVGalkyOTFiblFvWVdSa2NtVnpjeWw5WEc0Z0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUh0MEtDZHpkMmwwWTJoVWIxUm9hWE5CWTJOdmRXNTBKeWw5WEc0Z0lDQWdJQ0E4TDJFK1hHNGdJQ0FnS1R0Y2JpQWdmVnh1WEc0Z0lISmxibVJsY2lncElIdGNiaUFnSUNCamIyNXpkQ0I3SUdOdmJtNWxZM1JsWkVGalkyOTFiblJ6TENCelpXeGxZM1JsWkVGa1pISmxjM01zSUhOb2IzVnNaRkpsYm1SbGNreHBjM1JQY0hScGIyNXpJSDBnUFZ4dUlDQWdJQ0FnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0JqYjI1emRDQjdJSFFnZlNBOUlIUm9hWE11WTI5dWRHVjRkRHRjYmx4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThQbHh1SUNBZ0lDQWdJQ0E4YldGcGJpQmpiR0Z6YzA1aGJXVTlYQ0pqYjI1dVpXTjBaV1F0WVdOamIzVnVkSE10YkdsemRGd2lQbHh1SUNBZ0lDQWdJQ0FnSUh0MGFHbHpMbkpsYm1SbGNsVnVZMjl1Ym1WamRHVmtRV05qYjNWdWRDZ3BmVnh1SUNBZ0lDQWdJQ0FnSUh0amIyNXVaV04wWldSQlkyTnZkVzUwY3k1dFlYQW9LSHNnWVdSa2NtVnpjeXdnYm1GdFpTQjlMQ0JwYm1SbGVDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BFTnZibTVsWTNSbFpFRmpZMjkxYm5SelRHbHpkRWwwWlcxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCclpYazllMkZrWkhKbGMzTjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1JrY21WemN6MTdZV1JrY21WemMzMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsUFh0Z0pIdHVZVzFsZlNBbzRvQ21KSHRoWkdSeVpYTnpMbk4xWW5OMGNpZ3ROQ3dnTkNsOUtXQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1JoZEhWelBYdHBibVJsZUNBOVBUMGdNQ0EvSUhRb0oyRmpkR2wyWlNjcElEb2diblZzYkgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6UFh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9iM1ZzWkZKbGJtUmxja3hwYzNSUGNIUnBiMjV6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEOGdkR2hwY3k1eVpXNWtaWEpNYVhOMFNYUmxiVTl3ZEdsdmJuTW9ZV1JrY21WemN5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lCdWRXeHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZqZEdsdmJqMTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWkdSeVpYTnpJRDA5UFNCelpXeGxZM1JsWkVGa1pISmxjM05jYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5QnVkV3hzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dkR2hwY3k1eVpXNWtaWEpNYVhOMFNYUmxiVUZqZEdsdmJpaGhaR1J5WlhOektWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdmU2w5WEc0Z0lDQWdJQ0FnSUR3dmJXRnBiajVjYmlBZ0lDQWdJRHd2UGx4dUlDQWdJQ2s3WEc0Z0lIMWNibjFjYmlJc0ltVjRjRzl5ZENCN0lHUmxabUYxYkhRZ2ZTQm1jbTl0SUNjdUwyTnZibTVsWTNSbFpDMWhZMk52ZFc1MGN5MXNhWE4wTG1OdmJYQnZibVZ1ZENjN1hHNGlMQ0pwYlhCdmNuUWdZMnhoYzNOdVlXMWxjeUJtY205dElDZGpiR0Z6YzI1aGJXVnpKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnVW1WaFkzUXNJSHNnZFhObFUzUmhkR1VnZlNCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdleUJtYkdGMGRHVnVJSDBnWm5KdmJTQW5iRzlrWVhOb0p6dGNibWx0Y0c5eWRDQkRhR1ZqYTBKdmVDQm1jbTl0SUNjdUxpOHVMaTkxYVM5amFHVmpheTFpYjNnbk8xeHVhVzF3YjNKMElIc2dkWE5sU1RFNGJrTnZiblJsZUhRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5b2IyOXJjeTkxYzJWSk1UaHVRMjl1ZEdWNGRDYzdYRzVwYlhCdmNuUWdleUJuWlhSUVpYSnRhWE56YVc5dVJHVnpZM0pwY0hScGIyNGdmU0JtY205dElDY3VMaTh1TGk4dUxpOW9aV3h3WlhKekwzVjBhV3h6TDNCbGNtMXBjM05wYjI0bk8xeHVYRzVqYjI1emRDQkRiMjV1WldOMFpXUkJZMk52ZFc1MGMxQmxjbTFwYzNOcGIyNXpJRDBnS0hzZ2NHVnliV2x6YzJsdmJuTWdmU2tnUFQ0Z2UxeHVJQ0JqYjI1emRDQjBJRDBnZFhObFNURTRia052Ym5SbGVIUW9LVHRjYmlBZ1kyOXVjM1FnVzJWNGNHRnVaR1ZrTENCelpYUkZlSEJoYm1SbFpGMGdQU0IxYzJWVGRHRjBaU2htWVd4elpTazdYRzVjYmlBZ1kyOXVjM1FnZEc5bloyeGxSWGh3WVc1a1pXUWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2MyVjBSWGh3WVc1a1pXUW9LRjlsZUhCaGJtUmxaQ2tnUFQ0Z0lWOWxlSEJoYm1SbFpDazdYRzRnSUgwN1hHNWNiaUFnYVdZZ0tDRndaWEp0YVhOemFXOXVjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ2ZWeHVYRzRnSUdOdmJuTjBJSEJsY20xcGMzTnBiMjVNWVdKbGJITWdQU0JtYkdGMGRHVnVLRnh1SUNBZ0lIQmxjbTFwYzNOcGIyNXpMbTFoY0Nnb2V5QnJaWGtzSUhaaGJIVmxJSDBwSUQwK1hHNGdJQ0FnSUNCblpYUlFaWEp0YVhOemFXOXVSR1Z6WTNKcGNIUnBiMjRvZTF4dUlDQWdJQ0FnSUNCMExGeHVJQ0FnSUNBZ0lDQndaWEp0YVhOemFXOXVUbUZ0WlRvZ2EyVjVMRnh1SUNBZ0lDQWdJQ0J3WlhKdGFYTnphVzl1Vm1Gc2RXVTZJSFpoYkhWbExGeHVJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0tTeGNiaUFnS1R0Y2JseHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aVkyOXVibVZqZEdWa0xXRmpZMjkxYm5SekxYQmxjbTFwYzNOcGIyNXpYQ0krWEc0Z0lDQWdJQ0E4Y0Z4dUlDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSmpiMjV1WldOMFpXUXRZV05qYjNWdWRITXRjR1Z5YldsemMybHZibk5mWDJobFlXUmxjbHdpWEc0Z0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZTNSdloyZHNaVVY0Y0dGdVpHVmtmVnh1SUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0E4YzNSeWIyNW5QbnQwS0Nkd1pYSnRhWE56YVc5dWN5Y3BmVHd2YzNSeWIyNW5QbHh1SUNBZ0lDQWdJQ0E4WW5WMGRHOXVYRzRnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFh0amJHRnpjMjVoYldWektDZG1ZWE1uTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuWm1FdFlXNW5iR1V0Wkc5M2JpYzZJQ0ZsZUhCaGJtUmxaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZG1ZUzFoYm1kc1pTMTFjQ2M2SUdWNGNHRnVaR1ZrTEZ4dUlDQWdJQ0FnSUNBZ0lIMHBmVnh1SUNBZ0lDQWdJQ0FnSUhScGRHeGxQWHQwS0NkemFHOTNVR1Z5YldsemMybHZibk1uS1gxY2JpQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lEd3ZjRDVjYmlBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGpiR0Z6YzI1aGJXVnpLRnh1SUNBZ0lDQWdJQ0FnSUNkamIyNXVaV04wWldRdFlXTmpiM1Z1ZEhNdGNHVnliV2x6YzJsdmJuTmZYMnhwYzNRdFkyOXVkR0ZwYm1WeUp5eGNiaUFnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQW5ZMjl1Ym1WamRHVmtMV0ZqWTI5MWJuUnpMWEJsY20xcGMzTnBiMjV6WDE5c2FYTjBMV052Ym5SaGFXNWxjaTB0Wlhod1lXNWtaV1FuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JsZUhCaGJtUmxaQ3hjYmlBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0E4Y0Q1N2RDZ25ZWFYwYUc5eWFYcGxaRkJsY20xcGMzTnBiMjV6SnlsOU9qd3ZjRDVjYmlBZ0lDQWdJQ0FnUEhWc0lHTnNZWE56VG1GdFpUMWNJbU52Ym01bFkzUmxaQzFoWTJOdmRXNTBjeTF3WlhKdGFYTnphVzl1YzE5ZmJHbHpkRndpUGx4dUlDQWdJQ0FnSUNBZ0lIdHdaWEp0YVhOemFXOXVUR0ZpWld4ekxtMWhjQ2dvZXlCc1lXSmxiQ0I5TENCcFpIZ3BJRDArSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJRHhzYVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhrOWUyQmpiMjV1WldOMFpXUXRjR1Z5YldsemMybHZiaTBrZTJsa2VIMWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0pqYjI1dVpXTjBaV1F0WVdOamIzVnVkSE10Y0dWeWJXbHpjMmx2Ym5OZlgyeHBjM1F0YVhSbGJWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR4RGFHVmphMEp2ZUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb1pXTnJaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhOaFlteGxaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xrUFh0Z1kyOXVibVZqZEdWa0xYQmxjbTFwYzNOcGIyNHRKSHRwWkhoOVlIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0pqYjI1dVpXTjBaV1F0WVdOamIzVnVkSE10Y0dWeWJXbHpjMmx2Ym5OZlgyTm9aV05yWW05NFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BHeGhZbVZzSUdoMGJXeEdiM0k5ZTJCamIyNXVaV04wWldRdGNHVnliV2x6YzJsdmJpMGtlMmxrZUgxZ2ZUNTdiR0ZpWld4OVBDOXNZV0psYkQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHd2YkdrK1hHNGdJQ0FnSUNBZ0lDQWdLU2w5WEc0Z0lDQWdJQ0FnSUR3dmRXdytYRzRnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0E4TDJScGRqNWNiaUFnS1R0Y2JuMDdYRzVjYmtOdmJtNWxZM1JsWkVGalkyOTFiblJ6VUdWeWJXbHpjMmx2Ym5NdWNISnZjRlI1Y0dWeklEMGdlMXh1SUNCd1pYSnRhWE56YVc5dWN6b2dVSEp2Y0ZSNWNHVnpMbUZ5Y21GNVQyWW9YRzRnSUNBZ1VISnZjRlI1Y0dWekxuTm9ZWEJsS0h0Y2JpQWdJQ0FnSUd0bGVUb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5NXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lIMHBMRnh1SUNBcExGeHVmVHRjYmx4dVEyOXVibVZqZEdWa1FXTmpiM1Z1ZEhOUVpYSnRhWE56YVc5dWN5NWtaV1poZFd4MFVISnZjSE1nUFNCN1hHNGdJSEJsY20xcGMzTnBiMjV6T2lCYlhTeGNibjA3WEc1Y2JrTnZibTVsWTNSbFpFRmpZMjkxYm5SelVHVnliV2x6YzJsdmJuTXVaR2x6Y0d4aGVVNWhiV1VnUFNBblEyOXVibVZqZEdWa1FXTmpiM1Z1ZEhOUVpYSnRhWE56YVc5dWN5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRkpsWVdOMExtMWxiVzhvUTI5dWJtVmpkR1ZrUVdOamIzVnVkSE5RWlhKdGFYTnphVzl1Y3lrN1hHNGlMQ0psZUhCdmNuUWdleUJrWldaaGRXeDBJSDBnWm5KdmJTQW5MaTlqYjI1dVpXTjBaV1F0WVdOamIzVnVkSE10Y0dWeWJXbHpjMmx2Ym5Nbk8xeHVJaXdpYVcxd2IzSjBJRkpsWVdOMExDQjdJRU52YlhCdmJtVnVkQ0I5SUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdRblYwZEc5dUlHWnliMjBnSnk0dUx5NHVMM1ZwTDJKMWRIUnZiaWM3WEc1cGJYQnZjblFnVTJsMFpVbGpiMjRnWm5KdmJTQW5MaTR2TGk0dmRXa3ZjMmwwWlMxcFkyOXVKenRjYm1sdGNHOXlkQ0I3SUhOMGNtbHdTSFIwY0hOVFkyaGxiV1ZYYVhSb2IzVjBVRzl5ZENCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJobGJIQmxjbk12ZFhScGJITXZkWFJwYkNjN1hHNXBiWEJ2Y25RZ1UybDBaVTl5YVdkcGJpQm1jbTl0SUNjdUxpOHVMaTkxYVM5emFYUmxMVzl5YVdkcGJpYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFTnZibTVsWTNSbFpGTnBkR1Z6VEdsemRDQmxlSFJsYm1SeklFTnZiWEJ2Ym1WdWRDQjdYRzRnSUhOMFlYUnBZeUJqYjI1MFpYaDBWSGx3WlhNZ1BTQjdYRzRnSUNBZ2REb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJSDA3WEc1Y2JpQWdjM1JoZEdsaklIQnliM0JVZVhCbGN5QTlJSHRjYmlBZ0lDQmpiMjV1WldOMFpXUlRkV0pxWldOMGN6b2dVSEp2Y0ZSNWNHVnpMbUZ5Y21GNVQyWW9YRzRnSUNBZ0lDQlFjbTl3Vkhsd1pYTXVjMmhoY0dVb2UxeHVJQ0FnSUNBZ0lDQnVZVzFsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJQ0FnSUNCcFkyOXVWWEpzT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJQ0FnSUNCdmNtbG5hVzQ2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdJQ0I5S1N4Y2JpQWdJQ0FwTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnYjI1RWFYTmpiMjV1WldOME9pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHTnZibTVsWTNSbFpGTjFZbXBsWTNSekxDQnZia1JwYzJOdmJtNWxZM1FnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzRnSUNBZ1kyOXVjM1FnZXlCMElIMGdQU0IwYUdsekxtTnZiblJsZUhRN1hHNWNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnUEcxaGFXNGdZMnhoYzNOT1lXMWxQVndpWTI5dWJtVmpkR1ZrTFhOcGRHVnpMV3hwYzNSZlgyTnZiblJsYm5RdGNtOTNjMXdpUGx4dUlDQWdJQ0FnSUNCN1kyOXVibVZqZEdWa1UzVmlhbVZqZEhNdWJXRndLQ2h6ZFdKcVpXTjBLU0E5UGlBb1hHNGdJQ0FnSUNBZ0lDQWdQR1JwZGx4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1UFh0emRXSnFaV04wTG05eWFXZHBibjFjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbU52Ym01bFkzUmxaQzF6YVhSbGN5MXNhWE4wWDE5amIyNTBaVzUwTFhKdmQxd2lYRzRnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSmpiMjV1WldOMFpXUXRjMmwwWlhNdGJHbHpkRjlmYzNWaWFtVmpkQzFwYm1adlhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeFRhWFJsU1dOdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbGpiMjQ5ZTNOMVltcGxZM1F1YVdOdmJsVnliSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbFBYdHpkV0pxWldOMExtNWhiV1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJsNlpUMTdNeko5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aVkyOXVibVZqZEdWa0xYTnBkR1Z6TFd4cGMzUmZYM04xWW1wbFkzUXRhV052Ymx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR4VGFYUmxUM0pwWjJsdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2lZMjl1Ym1WamRHVmtMWE5wZEdWekxXeHBjM1JmWDNOMVltcGxZM1F0Ym1GdFpWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2wwYkdVOWUzTjFZbXBsWTNRdVpYaDBaVzV6YVc5dVNXUWdmSHdnYzNWaWFtVmpkQzV2Y21sbmFXNTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmwwWlU5eWFXZHBiajE3ZEdocGN5NW5aWFJUZFdKcVpXTjBSR2x6Y0d4aGVVNWhiV1VvYzNWaWFtVmpkQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhDZFhSMGIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2lZMjl1Ym1WamRHVmtMWE5wZEdWekxXeHBjM1JmWDJOdmJuUmxiblF0Y205M0xXeHBibXN0WW5WMGRHOXVYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVEYkdsamF6MTdLQ2tnUFQ0Z2IyNUVhWE5qYjI1dVpXTjBLSE4xWW1wbFkzUXViM0pwWjJsdUtYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVDFjSW14cGJtdGNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2RDZ25aR2x6WTI5dWJtVmpkQ2NwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlDZFhSMGIyNCtYRzRnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJQ2twZlZ4dUlDQWdJQ0FnUEM5dFlXbHVQbHh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0JuWlhSVGRXSnFaV04wUkdsemNHeGhlVTVoYldVb2MzVmlhbVZqZENrZ2UxeHVJQ0FnSUdsbUlDaHpkV0pxWldOMExtVjRkR1Z1YzJsdmJrbGtLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amIyNTBaWGgwTG5Rb0oyVjRkR1Z5Ym1Gc1JYaDBaVzV6YVc5dUp5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdWMlVnYzNSeWFYQWdhSFIwY0hNZ2MyTm9aVzFsY3lCdmJteDVMQ0JoYm1RZ2IyNXNlU0JwWmlCMGFHVWdWVkpNSUdoaGN5QnVieUJ3YjNKMExseHVJQ0FnSUhKbGRIVnliaUJ6ZEhKcGNFaDBkSEJ6VTJOb1pXMWxWMmwwYUc5MWRGQnZjblFvYzNWaWFtVmpkQzV2Y21sbmFXNHBPMXh1SUNCOVhHNTlYRzRpTENKbGVIQnZjblFnZXlCa1pXWmhkV3gwSUgwZ1puSnZiU0FuTGk5amIyNXVaV04wWldRdGMybDBaWE10YkdsemRDNWpiMjF3YjI1bGJuUW5PMXh1SWl3aWFXMXdiM0owSUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ2V5QjFjMlZUWld4bFkzUnZjaUI5SUdaeWIyMGdKM0psWVdOMExYSmxaSFY0Snp0Y2JtbHRjRzl5ZENCN0lHWnBibVJMWlhrZ2ZTQm1jbTl0SUNkc2IyUmhjMmduTzF4dWFXMXdiM0owSUh0Y2JpQWdVMVJCVkZWVFgwTlBUazVGUTFSRlJDeGNiaUFnVTFSQlZGVlRYME5QVGs1RlExUkZSRjlVVDE5QlRrOVVTRVZTWDBGRFEwOVZUbFFzWEc0Z0lGTlVRVlJWVTE5T1QxUmZRMDlPVGtWRFZFVkVMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlvWld4d1pYSnpMMk52Ym5OMFlXNTBjeTlqYjI1dVpXTjBaV1F0YzJsMFpYTW5PMXh1YVcxd2IzSjBJRU52Ykc5eVNXNWthV05oZEc5eUlHWnliMjBnSnk0dUx5NHVMM1ZwTDJOdmJHOXlMV2x1WkdsallYUnZjaWM3WEc1cGJYQnZjblFnZTF4dUlDQkNZV05yWjNKdmRXNWtRMjlzYjNJc1hHNGdJRU52Ykc5eUxGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOW9aV3h3WlhKekwyTnZibk4wWVc1MGN5OWtaWE5wWjI0dGMzbHpkR1Z0Snp0Y2JtbHRjRzl5ZENCN0lIVnpaVWt4T0c1RGIyNTBaWGgwSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2YUc5dmEzTXZkWE5sU1RFNGJrTnZiblJsZUhRbk8xeHVhVzF3YjNKMElIdGNiaUFnWjJWMFFXUmtjbVZ6YzBOdmJtNWxZM1JsWkZOMVltcGxZM1JOWVhBc1hHNGdJR2RsZEU5eWFXZHBiazltUTNWeWNtVnVkRlJoWWl4Y2JpQWdaMlYwVTJWc1pXTjBaV1JCWkdSeVpYTnpMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6Wld4bFkzUnZjbk1uTzF4dWFXMXdiM0owSUhzZ1RYVnNkR2xqYUdGcGJrTnZibTVsWTNSbFpGTnBkR1ZOWlc1MUlIMGdabkp2YlNBbkxpNHZMaTR2YlhWc2RHbGphR0ZwYmljN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlFTnZibTVsWTNSbFpGTjBZWFIxYzBsdVpHbGpZWFJ2Y2loN0lHOXVRMnhwWTJzZ2ZTa2dlMXh1SUNCamIyNXpkQ0IwSUQwZ2RYTmxTVEU0YmtOdmJuUmxlSFFvS1R0Y2JseHVJQ0JqYjI1emRDQnpaV3hsWTNSbFpFRmtaSEpsYzNNZ1BTQjFjMlZUWld4bFkzUnZjaWhuWlhSVFpXeGxZM1JsWkVGa1pISmxjM01wTzF4dUlDQmpiMjV6ZENCaFpHUnlaWE56UTI5dWJtVmpkR1ZrVTNWaWFtVmpkRTFoY0NBOUlIVnpaVk5sYkdWamRHOXlLR2RsZEVGa1pISmxjM05EYjI1dVpXTjBaV1JUZFdKcVpXTjBUV0Z3S1R0Y2JpQWdZMjl1YzNRZ2IzSnBaMmx1VDJaRGRYSnlaVzUwVkdGaUlEMGdkWE5sVTJWc1pXTjBiM0lvWjJWMFQzSnBaMmx1VDJaRGRYSnlaVzUwVkdGaUtUdGNibHh1SUNCamIyNXpkQ0J6Wld4bFkzUmxaRUZrWkhKbGMzTlRkV0pxWldOMFRXRndJRDBnWVdSa2NtVnpjME52Ym01bFkzUmxaRk4xWW1wbFkzUk5ZWEJiYzJWc1pXTjBaV1JCWkdSeVpYTnpYVHRjYmlBZ1kyOXVjM1FnWTNWeWNtVnVkRlJoWWtselEyOXVibVZqZEdWa1ZHOVRaV3hsWTNSbFpFRmtaSEpsYzNNZ1BTQkNiMjlzWldGdUtGeHVJQ0FnSUhObGJHVmpkR1ZrUVdSa2NtVnpjMU4xWW1wbFkzUk5ZWEFnSmlZZ2MyVnNaV04wWldSQlpHUnlaWE56VTNWaWFtVmpkRTFoY0Z0dmNtbG5hVzVQWmtOMWNuSmxiblJVWVdKZExGeHVJQ0FwTzF4dUlDQnNaWFFnYzNSaGRIVnpPMXh1SUNCcFppQW9ZM1Z5Y21WdWRGUmhZa2x6UTI5dWJtVmpkR1ZrVkc5VFpXeGxZM1JsWkVGa1pISmxjM01wSUh0Y2JpQWdJQ0J6ZEdGMGRYTWdQU0JUVkVGVVZWTmZRMDlPVGtWRFZFVkVPMXh1SUNCOUlHVnNjMlVnYVdZZ0tHWnBibVJMWlhrb1lXUmtjbVZ6YzBOdmJtNWxZM1JsWkZOMVltcGxZM1JOWVhBc0lHOXlhV2RwYms5bVEzVnljbVZ1ZEZSaFlpa3BJSHRjYmlBZ0lDQnpkR0YwZFhNZ1BTQlRWRUZVVlZOZlEwOU9Ua1ZEVkVWRVgxUlBYMEZPVDFSSVJWSmZRVU5EVDFWT1ZEdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnpkR0YwZFhNZ1BTQlRWRUZVVlZOZlRrOVVYME5QVGs1RlExUkZSRHRjYmlBZ2ZWeHVYRzRnSUd4bGRDQnBibVJwWTJGMGIzSlVlWEJsSUQwZ1EyOXNiM0pKYm1ScFkyRjBiM0l1VkZsUVJWTXVUMVZVVEVsT1JUdGNiaUFnYkdWMElHbHVaR2xqWVhSdmNrTnZiRzl5SUQwZ1EyOXNiM0l1YVdOdmJrUmxabUYxYkhRN1hHNGdJR3hsZENCbmJHOWlZV3hOWlc1MVEyOXNiM0lnUFNCRGIyeHZjaTVwWTI5dVFXeDBaWEp1WVhScGRtVTdYRzVjYmlBZ2FXWWdLSE4wWVhSMWN5QTlQVDBnVTFSQlZGVlRYME5QVGs1RlExUkZSQ2tnZTF4dUlDQWdJR2x1WkdsallYUnZja052Ykc5eUlEMGdRMjlzYjNJdWMzVmpZMlZ6YzBSbFptRjFiSFE3WEc0Z0lDQWdhVzVrYVdOaGRHOXlWSGx3WlNBOUlFTnZiRzl5U1c1a2FXTmhkRzl5TGxSWlVFVlRMbEJCVWxSSlFVdzdYRzRnSUNBZ1oyeHZZbUZzVFdWdWRVTnZiRzl5SUQwZ1EyOXNiM0l1YzNWalkyVnpjMFJsWm1GMWJIUTdYRzRnSUgwZ1pXeHpaU0JwWmlBb2MzUmhkSFZ6SUQwOVBTQlRWRUZVVlZOZlEwOU9Ua1ZEVkVWRVgxUlBYMEZPVDFSSVJWSmZRVU5EVDFWT1ZDa2dlMXh1SUNBZ0lHbHVaR2xqWVhSdmNrTnZiRzl5SUQwZ1EyOXNiM0l1WlhKeWIzSkVaV1poZFd4ME8xeHVJQ0FnSUdkc2IySmhiRTFsYm5WRGIyeHZjaUE5SUVKaFkydG5jbTkxYm1SRGIyeHZjaTVpWVdOclozSnZkVzVrUkdWbVlYVnNkRHRjYmlBZ2ZWeHVYRzRnSUdOdmJuTjBJSFJsZUhRZ1BWeHVJQ0FnSUhOMFlYUjFjeUE5UFQwZ1UxUkJWRlZUWDBOUFRrNUZRMVJGUkZ4dUlDQWdJQ0FnUHlCMEtDZHpkR0YwZFhORGIyNXVaV04wWldRbktWeHVJQ0FnSUNBZ09pQjBLQ2R6ZEdGMGRYTk9iM1JEYjI1dVpXTjBaV1FuS1RzZ0x5OGdWRTlFVHpvZ1VtVnRiM1psSUhSbGVIUWdjMmx1WTJVZ2QyVWdiMjVzZVNCdVpXVmtJSFJvWlNCMGIyOXNkR2x3SUhSbGVIUWdabTl5SUc1bGR5QndaWEp0YVhOemFXOXVJR2xqYjI1Y2JpQWdZMjl1YzNRZ2RHOXZiSFJwY0ZSbGVIUWdQVnh1SUNBZ0lITjBZWFIxY3lBOVBUMGdVMVJCVkZWVFgwTlBUazVGUTFSRlJGeHVJQ0FnSUNBZ1B5QjBLQ2QwYjI5c2RHbHdVMkYwZFhORGIyNXVaV04wWldRbktWeHVJQ0FnSUNBZ09pQjBLQ2QwYjI5c2RHbHdVMkYwZFhOT2IzUkRiMjV1WldOMFpXUW5LVHRjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0E4UGx4dUlDQWdJQ0FnZTNCeWIyTmxjM011Wlc1MkxrMVZURlJKUTBoQlNVNGdQeUFvWEc0Z0lDQWdJQ0FnSUR4TmRXeDBhV05vWVdsdVEyOXVibVZqZEdWa1UybDBaVTFsYm5WY2JpQWdJQ0FnSUNBZ0lDQnpkR0YwZFhNOWUzTjBZWFIxYzMxY2JpQWdJQ0FnSUNBZ0lDQm5iRzlpWVd4TlpXNTFRMjlzYjNJOWUyZHNiMkpoYkUxbGJuVkRiMnh2Y24xY2JpQWdJQ0FnSUNBZ0lDQjBaWGgwUFh0MGIyOXNkR2x3VkdWNGRIMWNiaUFnSUNBZ0lDQWdJQ0JoY3oxY0ltSjFkSFJ2Ymx3aVhHNGdJQ0FnSUNBZ0lDQWdiMjVEYkdsamF6MTdiMjVEYkdsamEzMWNiaUFnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ2tnT2lBb1hHNGdJQ0FnSUNBZ0lEeGlkWFIwYjI0Z1kyeGhjM05PWVcxbFBWd2lZMjl1Ym1WamRHVmtMWE4wWVhSMWN5MXBibVJwWTJGMGIzSmNJaUJ2YmtOc2FXTnJQWHR2YmtOc2FXTnJmVDVjYmlBZ0lDQWdJQ0FnSUNBOFEyOXNiM0pKYm1ScFkyRjBiM0lnWTI5c2IzSTllMmx1WkdsallYUnZja052Ykc5eWZTQjBlWEJsUFh0cGJtUnBZMkYwYjNKVWVYQmxmU0F2UGx4dUlDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aVkyOXVibVZqZEdWa0xYTjBZWFIxY3kxcGJtUnBZMkYwYjNKZlgzUmxlSFJjSWo1N2RHVjRkSDA4TDJScGRqNWNiaUFnSUNBZ0lDQWdQQzlpZFhSMGIyNCtYRzRnSUNBZ0lDQXBmVnh1SUNBZ0lEd3ZQbHh1SUNBcE8xeHVmVnh1WEc1RGIyNXVaV04wWldSVGRHRjBkWE5KYm1ScFkyRjBiM0l1WkdWbVlYVnNkRkJ5YjNCeklEMGdlMXh1SUNCdmJrTnNhV05yT2lCMWJtUmxabWx1WldRc1hHNTlPMXh1WEc1RGIyNXVaV04wWldSVGRHRjBkWE5KYm1ScFkyRjBiM0l1Y0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0J2YmtOc2FXTnJPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNibjA3WEc0aUxDSmxlSEJ2Y25RZ2V5QmtaV1poZFd4MElIMGdabkp2YlNBbkxpOWpiMjV1WldOMFpXUXRjM1JoZEhWekxXbHVaR2xqWVhSdmNpYzdYRzRpTENKcGJYQnZjblFnVW1WaFkzUXNJSHNnVUhWeVpVTnZiWEJ2Ym1WdWRDQjlJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ2V5QnpiM0owUW5rZ2ZTQm1jbTl0SUNkc2IyUmhjMmduTzF4dWFXMXdiM0owSUVKMWRIUnZiaUJtY205dElDY3VMaTh1TGk5MWFTOWlkWFIwYjI0bk8xeHVhVzF3YjNKMElGSmxZMmx3YVdWdWRFZHliM1Z3SUdaeWIyMGdKeTR2Y21WamFYQnBaVzUwTFdkeWIzVndMM0psWTJsd2FXVnVkQzFuY205MWNDNWpiMjF3YjI1bGJuUW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QkRiMjUwWVdOMFRHbHpkQ0JsZUhSbGJtUnpJRkIxY21WRGIyMXdiMjVsYm5RZ2UxeHVJQ0J6ZEdGMGFXTWdjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQWdJSE5sWVhKamFFWnZja052Ym5SaFkzUnpPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCelpXRnlZMmhHYjNKU1pXTmxiblJ6T2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQnpaV0Z5WTJoR2IzSk5lVUZqWTI5MWJuUnpPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCelpXeGxZM1JTWldOcGNHbGxiblE2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lHTm9hV3hrY21WdU9pQlFjbTl3Vkhsd1pYTXVibTlrWlN4Y2JpQWdJQ0J6Wld4bFkzUmxaRUZrWkhKbGMzTTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUgwN1hHNWNiaUFnYzNSaGRHbGpJR052Ym5SbGVIUlVlWEJsY3lBOUlIdGNiaUFnSUNCME9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdmVHRjYmx4dUlDQnpkR0YwWlNBOUlIdGNiaUFnSUNCcGMxTm9iM2RwYm1kQmJHeFNaV05sYm5RNklHWmhiSE5sTEZ4dUlDQjlPMXh1WEc0Z0lISmxibVJsY2xKbFkyVnVkSE1vS1NCN1hHNGdJQ0FnWTI5dWMzUWdleUIwSUgwZ1BTQjBhR2x6TG1OdmJuUmxlSFE3WEc0Z0lDQWdZMjl1YzNRZ2V5QnBjMU5vYjNkcGJtZEJiR3hTWldObGJuUWdmU0E5SUhSb2FYTXVjM1JoZEdVN1hHNGdJQ0FnWTI5dWMzUWdibTl1UTI5dWRHRmpkSE1nUFNCMGFHbHpMbkJ5YjNCekxuTmxZWEpqYUVadmNsSmxZMlZ1ZEhNb0tUdGNibHh1SUNBZ0lHTnZibk4wSUhOb2IzZE1iMkZrVFc5eVpTQTlJQ0ZwYzFOb2IzZHBibWRCYkd4U1pXTmxiblFnSmlZZ2JtOXVRMjl1ZEdGamRITXViR1Z1WjNSb0lENGdNanRjYmx4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0luTmxibVJmWDNObGJHVmpkQzF5WldOcGNHbGxiblF0ZDNKaGNIQmxjbDlmY21WalpXNTBMV2R5YjNWd0xYZHlZWEJ3WlhKY0lqNWNiaUFnSUNBZ0lDQWdQRkpsWTJsd2FXVnVkRWR5YjNWd1hHNGdJQ0FnSUNBZ0lDQWdiR0ZpWld3OWUzUW9KM0psWTJWdWRITW5LWDFjYmlBZ0lDQWdJQ0FnSUNCcGRHVnRjejE3YzJodmQweHZZV1JOYjNKbElEOGdibTl1UTI5dWRHRmpkSE11YzJ4cFkyVW9NQ3dnTWlrZ09pQnViMjVEYjI1MFlXTjBjMzFjYmlBZ0lDQWdJQ0FnSUNCdmJsTmxiR1ZqZEQxN2RHaHBjeTV3Y205d2N5NXpaV3hsWTNSU1pXTnBjR2xsYm5SOVhHNGdJQ0FnSUNBZ0lDQWdjMlZzWldOMFpXUkJaR1J5WlhOelBYdDBhR2x6TG5CeWIzQnpMbk5sYkdWamRHVmtRV1JrY21WemMzMWNiaUFnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnZTNOb2IzZE1iMkZrVFc5eVpTQW1KaUFvWEc0Z0lDQWdJQ0FnSUNBZ1BFSjFkSFJ2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3WlQxY0lteHBibXRjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQVndpYzJWdVpGOWZjMlZzWldOMExYSmxZMmx3YVdWdWRDMTNjbUZ3Y0dWeVgxOXlaV05sYm5RdFozSnZkWEF0ZDNKaGNIQmxjbDlmYkc5aFpDMXRiM0psWENKY2JpQWdJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczlleWdwSUQwK0lIUm9hWE11YzJWMFUzUmhkR1VvZXlCcGMxTm9iM2RwYm1kQmJHeFNaV05sYm5RNklIUnlkV1VnZlNsOVhHNGdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2UzUW9KMnh2WVdSTmIzSmxKeWw5WEc0Z0lDQWdJQ0FnSUNBZ1BDOUNkWFIwYjI0K1hHNGdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FwTzF4dUlDQjlYRzVjYmlBZ2NtVnVaR1Z5UVdSa2NtVnpjMEp2YjJzb0tTQjdYRzRnSUNBZ1kyOXVjM1FnZFc1emIzSjBaV1JEYjI1MFlXTjBjMEo1VEdWMGRHVnlJRDBnZEdocGN5NXdjbTl3YzF4dUlDQWdJQ0FnTG5ObFlYSmphRVp2Y2tOdmJuUmhZM1J6S0NsY2JpQWdJQ0FnSUM1eVpXUjFZMlVvS0c5aWFpd2dZMjl1ZEdGamRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JtYVhKemRFeGxkSFJsY2lBOUlHTnZiblJoWTNRdWJtRnRaVnN3WFM1MGIxVndjR1Z5UTJGelpTZ3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUM0dUxtOWlhaXhjYmlBZ0lDQWdJQ0FnSUNCYlptbHljM1JNWlhSMFpYSmRPaUJiTGk0dUtHOWlhbHRtYVhKemRFeGxkSFJsY2wwZ2ZId2dXMTBwTENCamIyNTBZV04wWFN4Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lIMHNJSHQ5S1R0Y2JseHVJQ0FnSUdOdmJuTjBJR3hsZEhSbGNuTWdQU0JQWW1wbFkzUXVhMlY1Y3loMWJuTnZjblJsWkVOdmJuUmhZM1J6UW5sTVpYUjBaWElwTG5OdmNuUW9LVHRjYmx4dUlDQWdJR052Ym5OMElITnZjblJsWkVOdmJuUmhZM1JIY205MWNITWdQU0JzWlhSMFpYSnpMbTFoY0Nnb2JHVjBkR1Z5S1NBOVBpQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1cxeHVJQ0FnSUNBZ0lDQnNaWFIwWlhJc1hHNGdJQ0FnSUNBZ0lITnZjblJDZVNoMWJuTnZjblJsWkVOdmJuUmhZM1J6UW5sTVpYUjBaWEpiYkdWMGRHVnlYU3dnS0dOdmJuUmhZM1FwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1ZEdGamRDNXVZVzFsTG5SdlRHOTNaWEpEWVhObEtDazdYRzRnSUNBZ0lDQWdJSDBwTEZ4dUlDQWdJQ0FnWFR0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJ6YjNKMFpXUkRiMjUwWVdOMFIzSnZkWEJ6TG0xaGNDZ29XMnhsZEhSbGNpd2daM0p2ZFhCSmRHVnRjMTBwSUQwK0lDaGNiaUFnSUNBZ0lEeFNaV05wY0dsbGJuUkhjbTkxY0Z4dUlDQWdJQ0FnSUNCclpYazllMkFrZTJ4bGRIUmxjbjB0WTI5dWRHRmpkQzFuY205MWNHQjlYRzRnSUNBZ0lDQWdJR3hoWW1Wc1BYdHNaWFIwWlhKOVhHNGdJQ0FnSUNBZ0lHbDBaVzF6UFh0bmNtOTFjRWwwWlcxemZWeHVJQ0FnSUNBZ0lDQnZibE5sYkdWamREMTdkR2hwY3k1d2NtOXdjeTV6Wld4bFkzUlNaV05wY0dsbGJuUjlYRzRnSUNBZ0lDQWdJSE5sYkdWamRHVmtRV1JrY21WemN6MTdkR2hwY3k1d2NtOXdjeTV6Wld4bFkzUmxaRUZrWkhKbGMzTjlYRzRnSUNBZ0lDQXZQbHh1SUNBZ0lDa3BPMXh1SUNCOVhHNWNiaUFnY21WdVpHVnlUWGxCWTJOdmRXNTBjeWdwSUh0Y2JpQWdJQ0JqYjI1emRDQnRlVUZqWTI5MWJuUnpJRDBnZEdocGN5NXdjbTl3Y3k1elpXRnlZMmhHYjNKTmVVRmpZMjkxYm5SektDazdYRzVjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ1BGSmxZMmx3YVdWdWRFZHliM1Z3WEc0Z0lDQWdJQ0FnSUdsMFpXMXpQWHR0ZVVGalkyOTFiblJ6ZlZ4dUlDQWdJQ0FnSUNCdmJsTmxiR1ZqZEQxN2RHaHBjeTV3Y205d2N5NXpaV3hsWTNSU1pXTnBjR2xsYm5SOVhHNGdJQ0FnSUNBZ0lITmxiR1ZqZEdWa1FXUmtjbVZ6Y3oxN2RHaHBjeTV3Y205d2N5NXpaV3hsWTNSbFpFRmtaSEpsYzNOOVhHNGdJQ0FnSUNBdlBseHVJQ0FnSUNrN1hHNGdJSDFjYmx4dUlDQnlaVzVrWlhJb0tTQjdYRzRnSUNBZ1kyOXVjM1FnZTF4dUlDQWdJQ0FnWTJocGJHUnlaVzRzWEc0Z0lDQWdJQ0J6WldGeVkyaEdiM0pTWldObGJuUnpMRnh1SUNBZ0lDQWdjMlZoY21Ob1JtOXlRMjl1ZEdGamRITXNYRzRnSUNBZ0lDQnpaV0Z5WTJoR2IzSk5lVUZqWTI5MWJuUnpMRnh1SUNBZ0lIMGdQU0IwYUdsekxuQnliM0J6TzF4dVhHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2ljMlZ1WkY5ZmMyVnNaV04wTFhKbFkybHdhV1Z1ZEMxM2NtRndjR1Z5WDE5c2FYTjBYQ0krWEc0Z0lDQWdJQ0FnSUh0amFHbHNaSEpsYmlCOGZDQnVkV3hzZlZ4dUlDQWdJQ0FnSUNCN2MyVmhjbU5vUm05eVVtVmpaVzUwY3lBL0lIUm9hWE11Y21WdVpHVnlVbVZqWlc1MGN5Z3BJRG9nYm5Wc2JIMWNiaUFnSUNBZ0lDQWdlM05sWVhKamFFWnZja052Ym5SaFkzUnpJRDhnZEdocGN5NXlaVzVrWlhKQlpHUnlaWE56UW05dmF5Z3BJRG9nYm5Wc2JIMWNiaUFnSUNBZ0lDQWdlM05sWVhKamFFWnZjazE1UVdOamIzVnVkSE1nUHlCMGFHbHpMbkpsYm1SbGNrMTVRV05qYjNWdWRITW9LU0E2SUc1MWJHeDlYRzRnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FwTzF4dUlDQjlYRzU5WEc0aUxDSmxlSEJ2Y25RZ2V5QmtaV1poZFd4MElIMGdabkp2YlNBbkxpOWpiMjUwWVdOMExXeHBjM1F1WTI5dGNHOXVaVzUwSnp0Y2JpSXNJbWx0Y0c5eWRDQlNaV0ZqZENCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJR05zWVhOemJtRnRaWE1nWm5KdmJTQW5ZMnhoYzNOdVlXMWxjeWM3WEc1cGJYQnZjblFnU1dSbGJuUnBZMjl1SUdaeWIyMGdKeTR1THk0dUx5NHVMM1ZwTDJsa1pXNTBhV052YmljN1hHNXBiWEJ2Y25RZ2V5QmxiR3hwY0hOcFpua2dmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTl3WVdkbGN5OXpaVzVrTDNObGJtUXVkWFJwYkhNbk8xeHVYRzVtZFc1amRHbHZiaUJoWkdSeVpYTnpaWE5GY1hWaGJDaGhaR1J5WlhOek1Td2dZV1JrY21WemN6SXBJSHRjYmlBZ2NtVjBkWEp1SUZOMGNtbHVaeWhoWkdSeVpYTnpNU2t1ZEc5TWIzZGxja05oYzJVb0tTQTlQVDBnVTNSeWFXNW5LR0ZrWkhKbGMzTXlLUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJTWldOcGNHbGxiblJIY205MWNDaDdYRzRnSUd4aFltVnNMRnh1SUNCcGRHVnRjeXhjYmlBZ2IyNVRaV3hsWTNRc1hHNGdJSE5sYkdWamRHVmtRV1JrY21WemN5eGNibjBwSUh0Y2JpQWdhV1lnS0NGcGRHVnRjeUI4ZkNBaGFYUmxiWE11YkdWdVozUm9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhrYVhaY2JpQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0luTmxibVJmWDNObGJHVmpkQzF5WldOcGNHbGxiblF0ZDNKaGNIQmxjbDlmWjNKdmRYQmNJbHh1SUNBZ0lDQWdaR0YwWVMxMFpYTjBhV1E5WENKeVpXTnBjR2xsYm5RdFozSnZkWEJjSWx4dUlDQWdJRDVjYmlBZ0lDQWdJSHRzWVdKbGJDQW1KaUFvWEc0Z0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpYzJWdVpGOWZjMlZzWldOMExYSmxZMmx3YVdWdWRDMTNjbUZ3Y0dWeVgxOW5jbTkxY0Mxc1lXSmxiRndpUGx4dUlDQWdJQ0FnSUNBZ0lIdHNZV0psYkgxY2JpQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnZTJsMFpXMXpMbTFoY0Nnb2V5QmhaR1J5WlhOekxDQnVZVzFsSUgwcElEMCtJQ2hjYmlBZ0lDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQWdJR3RsZVQxN1lXUmtjbVZ6YzMxY2JpQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYc29LU0E5UGlCdmJsTmxiR1ZqZENoaFpHUnlaWE56TENCdVlXMWxLWDFjYmlBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUyTnNZWE56Ym1GdFpYTW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0ozTmxibVJmWDNObGJHVmpkQzF5WldOcGNHbGxiblF0ZDNKaGNIQmxjbDlmWjNKdmRYQXRhWFJsYlNjNklDRmhaR1J5WlhOelpYTkZjWFZoYkNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdSa2NtVnpjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZzWldOMFpXUkJaR1J5WlhOekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2R6Wlc1a1gxOXpaV3hsWTNRdGNtVmphWEJwWlc1MExYZHlZWEJ3WlhKZlgyZHliM1Z3TFdsMFpXMHRMWE5sYkdWamRHVmtKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1JrY21WemMyVnpSWEYxWVd3b1lXUmtjbVZ6Y3l3Z2MyVnNaV04wWldSQlpHUnlaWE56S1N4Y2JpQWdJQ0FnSUNBZ0lDQjlLWDFjYmlBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lEeEpaR1Z1ZEdsamIyNGdZV1JrY21WemN6MTdZV1JrY21WemMzMGdaR2xoYldWMFpYSTllekk0ZlNBdlBseHVJQ0FnSUNBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW5ObGJtUmZYM05sYkdWamRDMXlaV05wY0dsbGJuUXRkM0poY0hCbGNsOWZaM0p2ZFhBdGFYUmxiVjlmWTI5dWRHVnVkRndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoTFhSbGMzUnBaRDFjSW5KbFkybHdhV1Z1ZEZ3aVhHNGdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKelpXNWtYMTl6Wld4bFkzUXRjbVZqYVhCcFpXNTBMWGR5WVhCd1pYSmZYMmR5YjNWd0xXbDBaVzFmWDNScGRHeGxYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHR1WVcxbElIeDhJR1ZzYkdsd2MybG1lU2hoWkdSeVpYTnpLWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBZ0lDQWdlMjVoYldVZ0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0luTmxibVJmWDNObGJHVmpkQzF5WldOcGNHbGxiblF0ZDNKaGNIQmxjbDlmWjNKdmRYQXRhWFJsYlY5ZmMzVmlkR2wwYkdWY0lqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdaV3hzYVhCemFXWjVLR0ZrWkhKbGMzTXBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdLU2w5WEc0Z0lDQWdQQzlrYVhZK1hHNGdJQ2s3WEc1OVhHNWNibEpsWTJsd2FXVnVkRWR5YjNWd0xuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ2JHRmlaV3c2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lHbDBaVzF6T2lCUWNtOXdWSGx3WlhNdVlYSnlZWGxQWmloY2JpQWdJQ0JRY205d1ZIbHdaWE11YzJoaGNHVW9lMXh1SUNBZ0lDQWdZV1JrY21WemN6b2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5NXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lDQWdibUZ0WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0I5S1N4Y2JpQWdLU3hjYmlBZ2IyNVRaV3hsWTNRNklGQnliM0JVZVhCbGN5NW1kVzVqTG1selVtVnhkV2x5WldRc1hHNGdJSE5sYkdWamRHVmtRV1JrY21WemN6b2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNibjA3WEc0aUxDSnBiWEJ2Y25RZ1VtVmhZM1FzSUhzZ2RYTmxRMkZzYkdKaFkyc3NJSFZ6WlZOMFlYUmxJSDBnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQjdJSFZ6WlVreE9HNURiMjUwWlhoMElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dmFHOXZhM012ZFhObFNURTRia052Ym5SbGVIUW5PMXh1YVcxd2IzSjBJRlJsZUhSR2FXVnNaQ0JtY205dElDY3VMaTh1TGk5MWFTOTBaWGgwTFdacFpXeGtKenRjYm1sdGNHOXlkQ0JDZFhSMGIyNGdabkp2YlNBbkxpNHZMaTR2ZFdrdlluVjBkRzl1Snp0Y2JtbHRjRzl5ZENCRGFHVmphMEp2ZUNCbWNtOXRJQ2N1TGk4dUxpOTFhUzlqYUdWamF5MWliM2duTzF4dWFXMXdiM0owSUhzZ1ZHVjRkQ0I5SUdaeWIyMGdKeTR1THk0dUwyTnZiWEJ2Ym1WdWRDMXNhV0p5WVhKNUp6dGNibWx0Y0c5eWRDQlRjbkJKYm5CMWRDQm1jbTl0SUNjdUxpOXpjbkF0YVc1d2RYUW5PMXh1YVcxd2IzSjBJSHNnVUVGVFUxZFBVa1JmVFVsT1gweEZUa2RVU0NCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJobGJIQmxjbk12WTI5dWMzUmhiblJ6TDJOdmJXMXZiaWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUVOeVpXRjBaVTVsZDFaaGRXeDBLSHRjYmlBZ1pHbHpZV0pzWldRZ1BTQm1ZV3h6WlN4Y2JpQWdhVzVqYkhWa1pWUmxjbTF6SUQwZ1ptRnNjMlVzWEc0Z0lHOXVVM1ZpYldsMExGeHVJQ0J6ZFdKdGFYUlVaWGgwTEZ4dWZTa2dlMXh1SUNCamIyNXpkQ0JiWTI5dVptbHliVkJoYzNOM2IzSmtMQ0J6WlhSRGIyNW1hWEp0VUdGemMzZHZjbVJkSUQwZ2RYTmxVM1JoZEdVb0p5Y3BPMXh1SUNCamIyNXpkQ0JiWTI5dVptbHliVkJoYzNOM2IzSmtSWEp5YjNJc0lITmxkRU52Ym1acGNtMVFZWE56ZDI5eVpFVnljbTl5WFNBOUlIVnpaVk4wWVhSbEtDY25LVHRjYmlBZ1kyOXVjM1FnVzNCaGMzTjNiM0prTENCelpYUlFZWE56ZDI5eVpGMGdQU0IxYzJWVGRHRjBaU2duSnlrN1hHNGdJR052Ym5OMElGdHdZWE56ZDI5eVpFVnljbTl5TENCelpYUlFZWE56ZDI5eVpFVnljbTl5WFNBOUlIVnpaVk4wWVhSbEtDY25LVHRjYmlBZ1kyOXVjM1FnVzNObFpXUlFhSEpoYzJVc0lITmxkRk5sWldSUWFISmhjMlZkSUQwZ2RYTmxVM1JoZEdVb0p5Y3BPMXh1SUNCamIyNXpkQ0JiZEdWeWJYTkRhR1ZqYTJWa0xDQnpaWFJVWlhKdGMwTm9aV05yWldSZElEMGdkWE5sVTNSaGRHVW9abUZzYzJVcE8xeHVYRzRnSUdOdmJuTjBJSFFnUFNCMWMyVkpNVGh1UTI5dWRHVjRkQ2dwTzF4dVhHNGdJR052Ym5OMElHOXVVR0Z6YzNkdmNtUkRhR0Z1WjJVZ1BTQjFjMlZEWVd4c1ltRmpheWhjYmlBZ0lDQW9ibVYzVUdGemMzZHZjbVFwSUQwK0lIdGNiaUFnSUNBZ0lHeGxkQ0J1WlhkRGIyNW1hWEp0VUdGemMzZHZjbVJGY25KdmNpQTlJQ2NuTzF4dUlDQWdJQ0FnYkdWMElHNWxkMUJoYzNOM2IzSmtSWEp5YjNJZ1BTQW5KenRjYmx4dUlDQWdJQ0FnYVdZZ0tHNWxkMUJoYzNOM2IzSmtJQ1ltSUc1bGQxQmhjM04zYjNKa0xteGxibWQwYUNBOElGQkJVMU5YVDFKRVgwMUpUbDlNUlU1SFZFZ3BJSHRjYmlBZ0lDQWdJQ0FnYm1WM1VHRnpjM2R2Y21SRmNuSnZjaUE5SUhRb0ozQmhjM04zYjNKa1RtOTBURzl1WjBWdWIzVm5hQ2NwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9ZMjl1Wm1seWJWQmhjM04zYjNKa0lDWW1JRzVsZDFCaGMzTjNiM0prSUNFOVBTQmpiMjVtYVhKdFVHRnpjM2R2Y21RcElIdGNiaUFnSUNBZ0lDQWdibVYzUTI5dVptbHliVkJoYzNOM2IzSmtSWEp5YjNJZ1BTQjBLQ2R3WVhOemQyOXlaSE5FYjI1MFRXRjBZMmduS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2MyVjBVR0Z6YzNkdmNtUW9ibVYzVUdGemMzZHZjbVFwTzF4dUlDQWdJQ0FnYzJWMFVHRnpjM2R2Y21SRmNuSnZjaWh1WlhkUVlYTnpkMjl5WkVWeWNtOXlLVHRjYmlBZ0lDQWdJSE5sZEVOdmJtWnBjbTFRWVhOemQyOXlaRVZ5Y205eUtHNWxkME52Ym1acGNtMVFZWE56ZDI5eVpFVnljbTl5S1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJRnRqYjI1bWFYSnRVR0Z6YzNkdmNtUXNJSFJkTEZ4dUlDQXBPMXh1WEc0Z0lHTnZibk4wSUc5dVEyOXVabWx5YlZCaGMzTjNiM0prUTJoaGJtZGxJRDBnZFhObFEyRnNiR0poWTJzb1hHNGdJQ0FnS0c1bGQwTnZibVpwY20xUVlYTnpkMjl5WkNrZ1BUNGdlMXh1SUNBZ0lDQWdiR1YwSUc1bGQwTnZibVpwY20xUVlYTnpkMjl5WkVWeWNtOXlJRDBnSnljN1hHNWNiaUFnSUNBZ0lHbG1JQ2h3WVhOemQyOXlaQ0FoUFQwZ2JtVjNRMjl1Wm1seWJWQmhjM04zYjNKa0tTQjdYRzRnSUNBZ0lDQWdJRzVsZDBOdmJtWnBjbTFRWVhOemQyOXlaRVZ5Y205eUlEMGdkQ2duY0dGemMzZHZjbVJ6Ukc5dWRFMWhkR05vSnlrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lITmxkRU52Ym1acGNtMVFZWE56ZDI5eVpDaHVaWGREYjI1bWFYSnRVR0Z6YzNkdmNtUXBPMXh1SUNBZ0lDQWdjMlYwUTI5dVptbHliVkJoYzNOM2IzSmtSWEp5YjNJb2JtVjNRMjl1Wm1seWJWQmhjM04zYjNKa1JYSnliM0lwTzF4dUlDQWdJSDBzWEc0Z0lDQWdXM0JoYzNOM2IzSmtMQ0IwWFN4Y2JpQWdLVHRjYmx4dUlDQmpiMjV6ZENCcGMxWmhiR2xrSUQxY2JpQWdJQ0FoWkdsellXSnNaV1FnSmlaY2JpQWdJQ0J3WVhOemQyOXlaQ0FtSmx4dUlDQWdJR052Ym1acGNtMVFZWE56ZDI5eVpDQW1KbHh1SUNBZ0lIQmhjM04zYjNKa0lEMDlQU0JqYjI1bWFYSnRVR0Z6YzNkdmNtUWdKaVpjYmlBZ0lDQnpaV1ZrVUdoeVlYTmxJQ1ltWEc0Z0lDQWdLQ0ZwYm1Oc2RXUmxWR1Z5YlhNZ2ZId2dkR1Z5YlhORGFHVmphMlZrS1NBbUpseHVJQ0FnSUNGd1lYTnpkMjl5WkVWeWNtOXlJQ1ltWEc0Z0lDQWdJV052Ym1acGNtMVFZWE56ZDI5eVpFVnljbTl5TzF4dVhHNGdJR052Ym5OMElHOXVTVzF3YjNKMElEMGdkWE5sUTJGc2JHSmhZMnNvWEc0Z0lDQWdZWE41Ym1NZ0tHVjJaVzUwS1NBOVBpQjdYRzRnSUNBZ0lDQmxkbVZ1ZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dVhHNGdJQ0FnSUNCcFppQW9JV2x6Vm1Gc2FXUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JoZDJGcGRDQnZibE4xWW0xcGRDaHdZWE56ZDI5eVpDd2djMlZsWkZCb2NtRnpaU2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQmJhWE5XWVd4cFpDd2diMjVUZFdKdGFYUXNJSEJoYzNOM2IzSmtMQ0J6WldWa1VHaHlZWE5sWFN4Y2JpQWdLVHRjYmx4dUlDQmpiMjV6ZENCMGIyZG5iR1ZVWlhKdGMwTm9aV05ySUQwZ2RYTmxRMkZzYkdKaFkyc29LQ2tnUFQ0Z2UxeHVJQ0FnSUhObGRGUmxjbTF6UTJobFkydGxaQ2dvWTNWeWNtVnVkRlJsY20xelEyaGxZMnRsWkNrZ1BUNGdJV04xY25KbGJuUlVaWEp0YzBOb1pXTnJaV1FwTzF4dUlDQjlMQ0JiWFNrN1hHNWNiaUFnWTI5dWMzUWdkR1Z5YlhOUFpsVnpaU0E5SUhRb0oyRmpZMlZ3ZEZSbGNtMXpUMlpWYzJVbkxDQmJYRzRnSUNBZ1BHRmNiaUFnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbU55WldGMFpTMXVaWGN0ZG1GMWJIUmZYM1JsY20xekxXeHBibXRjSWx4dUlDQWdJQ0FnYTJWNVBWd2lZM0psWVhSbExXNWxkeTEyWVhWc2RGOWZiR2x1YXkxMFpYaDBYQ0pjYmlBZ0lDQWdJR2h5WldZOVhDSm9kSFJ3Y3pvdkwyMWxkR0Z0WVhOckxtbHZMM1JsY20xekxtaDBiV3hjSWx4dUlDQWdJQ0FnZEdGeVoyVjBQVndpWDJKc1lXNXJYQ0pjYmlBZ0lDQWdJSEpsYkQxY0ltNXZiM0JsYm1WeUlHNXZjbVZtWlhKeVpYSmNJbHh1SUNBZ0lENWNiaUFnSUNBZ0lIdDBLQ2QwWlhKdGN5Y3BmVnh1SUNBZ0lEd3ZZVDRzWEc0Z0lGMHBPMXh1WEc0Z0lISmxkSFZ5YmlBb1hHNGdJQ0FnUEdadmNtMGdZMnhoYzNOT1lXMWxQVndpWTNKbFlYUmxMVzVsZHkxMllYVnNkRjlmWm05eWJWd2lJRzl1VTNWaWJXbDBQWHR2YmtsdGNHOXlkSDArWEc0Z0lDQWdJQ0E4VTNKd1NXNXdkWFFnYjI1RGFHRnVaMlU5ZTNObGRGTmxaV1JRYUhKaGMyVjlJSE55Y0ZSbGVIUTllM1FvSjNObFkzSmxkRkpsWTI5MlpYSjVVR2h5WVhObEp5bDlJQzgrWEc0Z0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbU55WldGMFpTMXVaWGN0ZG1GMWJIUmZYMk55WldGMFpTMXdZWE56ZDI5eVpGd2lQbHh1SUNBZ0lDQWdJQ0E4VkdWNGRFWnBaV3hrWEc0Z0lDQWdJQ0FnSUNBZ1pHRjBZUzEwWlhOMGFXUTlYQ0pqY21WaGRHVXRkbUYxYkhRdGNHRnpjM2R2Y21SY0lseHVJQ0FnSUNBZ0lDQWdJR2xrUFZ3aWNHRnpjM2R2Y21SY0lseHVJQ0FnSUNBZ0lDQWdJR3hoWW1Wc1BYdDBLQ2R1WlhkUVlYTnpkMjl5WkNjcGZWeHVJQ0FnSUNBZ0lDQWdJSFI1Y0dVOVhDSndZWE56ZDI5eVpGd2lYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTllM0JoYzNOM2IzSmtmVnh1SUNBZ0lDQWdJQ0FnSUc5dVEyaGhibWRsUFhzb1pYWmxiblFwSUQwK0lHOXVVR0Z6YzNkdmNtUkRhR0Z1WjJVb1pYWmxiblF1ZEdGeVoyVjBMblpoYkhWbEtYMWNiaUFnSUNBZ0lDQWdJQ0JsY25KdmNqMTdjR0Z6YzNkdmNtUkZjbkp2Y24xY2JpQWdJQ0FnSUNBZ0lDQmhkWFJ2UTI5dGNHeGxkR1U5WENKdVpYY3RjR0Z6YzNkdmNtUmNJbHh1SUNBZ0lDQWdJQ0FnSUcxaGNtZHBiajFjSW01dmNtMWhiRndpWEc0Z0lDQWdJQ0FnSUNBZ2JHRnlaMlZNWVdKbGJGeHVJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0E4VkdWNGRFWnBaV3hrWEc0Z0lDQWdJQ0FnSUNBZ1pHRjBZUzEwWlhOMGFXUTlYQ0pqY21WaGRHVXRkbUYxYkhRdFkyOXVabWx5YlMxd1lYTnpkMjl5WkZ3aVhHNGdJQ0FnSUNBZ0lDQWdhV1E5WENKamIyNW1hWEp0TFhCaGMzTjNiM0prWENKY2JpQWdJQ0FnSUNBZ0lDQnNZV0psYkQxN2RDZ25ZMjl1Wm1seWJWQmhjM04zYjNKa0p5bDlYRzRnSUNBZ0lDQWdJQ0FnZEhsd1pUMWNJbkJoYzNOM2IzSmtYQ0pjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaVDE3WTI5dVptbHliVkJoYzNOM2IzSmtmVnh1SUNBZ0lDQWdJQ0FnSUc5dVEyaGhibWRsUFhzb1pYWmxiblFwSUQwK0lHOXVRMjl1Wm1seWJWQmhjM04zYjNKa1EyaGhibWRsS0dWMlpXNTBMblJoY21kbGRDNTJZV3gxWlNsOVhHNGdJQ0FnSUNBZ0lDQWdaWEp5YjNJOWUyTnZibVpwY20xUVlYTnpkMjl5WkVWeWNtOXlmVnh1SUNBZ0lDQWdJQ0FnSUdGMWRHOURiMjF3YkdWMFpUMWNJbTVsZHkxd1lYTnpkMjl5WkZ3aVhHNGdJQ0FnSUNBZ0lDQWdiV0Z5WjJsdVBWd2libTl5YldGc1hDSmNiaUFnSUNBZ0lDQWdJQ0JzWVhKblpVeGhZbVZzWEc0Z0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJSHRwYm1Oc2RXUmxWR1Z5YlhNZ1B5QW9YRzRnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2lZM0psWVhSbExXNWxkeTEyWVhWc2RGOWZkR1Z5YlhOY0lqNWNiaUFnSUNBZ0lDQWdJQ0E4UTJobFkydENiM2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtQVndpWTNKbFlYUmxMVzVsZHkxMllYVnNkRjlmZEdWeWJYTXRZMmhsWTJ0aWIzaGNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVlJsYzNSSlpEMWNJbU55WldGMFpTMXVaWGN0ZG1GMWJIUmZYM1JsY20xekxXTm9aV05yWW05NFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1pXTnJaV1E5ZTNSbGNtMXpRMmhsWTJ0bFpIMWNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZTNSdloyZHNaVlJsY20xelEyaGxZMnQ5WEc0Z0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0E4YkdGaVpXeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltTnlaV0YwWlMxdVpYY3RkbUYxYkhSZlgzUmxjbTF6TFd4aFltVnNYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHaDBiV3hHYjNJOVhDSmpjbVZoZEdVdGJtVjNMWFpoZFd4MFgxOTBaWEp0Y3kxamFHVmphMkp2ZUZ3aVhHNGdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BGUmxlSFFnWVhNOVhDSnpjR0Z1WENJK2UzUmxjbTF6VDJaVmMyVjlQQzlVWlhoMFBseHVJQ0FnSUNBZ0lDQWdJRHd2YkdGaVpXdytYRzRnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0tTQTZJRzUxYkd4OVhHNGdJQ0FnSUNBOFFuVjBkRzl1WEc0Z0lDQWdJQ0FnSUdSaGRHRXRkR1Z6ZEdsa1BWd2lZM0psWVhSbExXNWxkeTEyWVhWc2RDMXpkV0p0YVhRdFluVjBkRzl1WENKY2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2lZM0psWVhSbExXNWxkeTEyWVhWc2RGOWZjM1ZpYldsMExXSjFkSFJ2Ymx3aVhHNGdJQ0FnSUNBZ0lIUjVjR1U5WENKd2NtbHRZWEo1WENKY2JpQWdJQ0FnSUNBZ2MzVmliV2wwWEc0Z0lDQWdJQ0FnSUdScGMyRmliR1ZrUFhzaGFYTldZV3hwWkgxY2JpQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ2UzTjFZbTFwZEZSbGVIUjlYRzRnSUNBZ0lDQThMMEoxZEhSdmJqNWNiaUFnSUNBOEwyWnZjbTArWEc0Z0lDazdYRzU5WEc1Y2JrTnlaV0YwWlU1bGQxWmhkV3gwTG5CeWIzQlVlWEJsY3lBOUlIdGNiaUFnWkdsellXSnNaV1E2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNCcGJtTnNkV1JsVkdWeWJYTTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0J2YmxOMVltMXBkRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ2MzVmliV2wwVkdWNGREb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5NXBjMUpsY1hWcGNtVmtMRnh1ZlR0Y2JpSXNJbVY0Y0c5eWRDQjdJR1JsWm1GMWJIUWdmU0JtY205dElDY3VMMk55WldGMFpTMXVaWGN0ZG1GMWJIUW5PMXh1SWl3aWFXMXdiM0owSUZKbFlXTjBMQ0I3SUhWelpVTnZiblJsZUhRc0lIVnpaVVZtWm1WamRDd2dkWE5sVTNSaGRHVWdmU0JtY205dElDZHlaV0ZqZENjN1hHNXBiWEJ2Y25RZ1VISnZjRlI1Y0dWeklHWnliMjBnSjNCeWIzQXRkSGx3WlhNbk8xeHVhVzF3YjNKMElIc2dkWE5sVTJWc1pXTjBiM0lnZlNCbWNtOXRJQ2R5WldGamRDMXlaV1IxZUNjN1hHNXBiWEJ2Y25RZ1ZXNXBkRWx1Y0hWMElHWnliMjBnSnk0dUx5NHVMM1ZwTDNWdWFYUXRhVzV3ZFhRbk8xeHVhVzF3YjNKMElFTjFjbkpsYm1ONVJHbHpjR3hoZVNCbWNtOXRJQ2N1TGk4dUxpOTFhUzlqZFhKeVpXNWplUzFrYVhOd2JHRjVKenRjYm1sdGNHOXlkQ0I3SUVreE9HNURiMjUwWlhoMElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dlkyOXVkR1Y0ZEhNdmFURTRiaWM3WEc1cGJYQnZjblFnZTF4dUlDQm5aWFJEYjI1MlpYSnphVzl1VW1GMFpTeGNiaUFnWjJWMFRtRjBhWFpsUTNWeWNtVnVZM2tzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1TDJSMVkydHpMMjFsZEdGdFlYTnJMMjFsZEdGdFlYTnJKenRjYm1sdGNHOXlkQ0I3SUdkbGRFTjFjbkpsYm5SRGRYSnlaVzVqZVN3Z1oyVjBVMmh2ZFd4a1UyaHZkMFpwWVhRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5elpXeGxZM1J2Y25Nbk8xeHVhVzF3YjNKMElIdGNiaUFnWjJWMFZtRnNkV1ZHY205dFYyVnBTR1Y0TEZ4dUlDQm5aWFJYWldsSVpYaEdjbTl0UkdWamFXMWhiRlpoYkhWbExGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZiVzlrZFd4bGN5OWpiMjUyWlhKemFXOXVMblYwYVd4ekp6dGNibWx0Y0c5eWRDQjdJRVYwYUdWeVJHVnViMjFwYm1GMGFXOXVJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2YzJoaGNtVmtMMk52Ym5OMFlXNTBjeTlqYjIxdGIyNG5PMXh1WEc0dktpcGNiaUFxSUVOdmJYQnZibVZ1ZENCMGFHRjBJR0ZzYkc5M2N5QjFjMlZ5SUhSdklHVnVkR1Z5SUdOMWNuSmxibU41SUhaaGJIVmxjeUJoY3lCaElHNTFiV0psY2l3Z1lXNWtJSEJ5YjNCeklISmxZMlZwZG1VZ1lTQmpiMjUyWlhKMFpXUmNiaUFxSUdobGVDQjJZV3gxWlNCcGJpQlhSVWt1SUhCeWIzQnpMblpoYkhWbExDQjFjMlZrSUdGeklHRWdaR1ZtWVhWc2RDQnZjaUJtYjNKalpXUWdkbUZzZFdVc0lITm9iM1ZzWkNCaVpTQmhJR2hsZUNCMllXeDFaU3dnZDJocFkyaGNiaUFxSUdkbGRITWdZMjl1ZG1WeWRHVmtJR2x1ZEc4Z1lTQmtaV05wYldGc0lIWmhiSFZsSUdSbGNHVnVaR2x1WnlCdmJpQjBhR1VnWTNWeWNtVnVZM2tnS0VWVVNDQnZjaUJHYVdGMEtTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2IzQjBhVzl1Y3pCY2JpQXFJRUJ3WVhKaGJTQnZjSFJwYjI1ek1DNW9aWGhXWVd4MVpWeHVJQ29nUUhCaGNtRnRJRzl3ZEdsdmJuTXdMbVpsWVhSMWNtVlRaV052Ym1SaGNubGNiaUFxSUVCd1lYSmhiU0J2Y0hScGIyNXpNQzV2YmtOb1lXNW5aVnh1SUNvZ1FIQmhjbUZ0SUc5d2RHbHZibk13TG05dVVISmxabVZ5Wlc1alpWUnZaMmRzWlZ4dUlDb3ZYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQkRkWEp5Wlc1amVVbHVjSFYwS0h0Y2JpQWdhR1Y0Vm1Gc2RXVXNYRzRnSUdabFlYUjFjbVZUWldOdmJtUmhjbmtzWEc0Z0lHOXVRMmhoYm1kbExGeHVJQ0J2YmxCeVpXWmxjbVZ1WTJWVWIyZG5iR1VzWEc1OUtTQjdYRzRnSUdOdmJuTjBJSFFnUFNCMWMyVkRiMjUwWlhoMEtFa3hPRzVEYjI1MFpYaDBLVHRjYmx4dUlDQmpiMjV6ZENCd2NtVm1aWEp5WldSRGRYSnlaVzVqZVNBOUlIVnpaVk5sYkdWamRHOXlLR2RsZEU1aGRHbDJaVU4xY25KbGJtTjVLVHRjYmlBZ1kyOXVjM1FnYzJWamIyNWtZWEo1UTNWeWNtVnVZM2tnUFNCMWMyVlRaV3hsWTNSdmNpaG5aWFJEZFhKeVpXNTBRM1Z5Y21WdVkza3BPMXh1SUNCamIyNXpkQ0JqYjI1MlpYSnphVzl1VW1GMFpTQTlJSFZ6WlZObGJHVmpkRzl5S0dkbGRFTnZiblpsY25OcGIyNVNZWFJsS1R0Y2JpQWdZMjl1YzNRZ2MyaHZkMFpwWVhRZ1BTQjFjMlZUWld4bFkzUnZjaWhuWlhSVGFHOTFiR1JUYUc5M1JtbGhkQ2s3WEc0Z0lHTnZibk4wSUdocFpHVlRaV052Ym1SaGNua2dQU0FoYzJodmQwWnBZWFE3WEc0Z0lHTnZibk4wSUhCeWFXMWhjbmxUZFdabWFYZ2dQU0J3Y21WbVpYSnlaV1JEZFhKeVpXNWplU0I4ZkNCRmRHaGxja1JsYm05dGFXNWhkR2x2Ymk1RlZFZzdYRzRnSUdOdmJuTjBJSE5sWTI5dVpHRnllVk4xWm1acGVDQTlJSE5sWTI5dVpHRnllVU4xY25KbGJtTjVMblJ2VlhCd1pYSkRZWE5sS0NrN1hHNWNiaUFnWTI5dWMzUWdXMmx6VTNkaGNIQmxaQ3dnYzJWMFUzZGhjSEJsWkYwZ1BTQjFjMlZUZEdGMFpTaG1ZV3h6WlNrN1hHNGdJR052Ym5OMElGdHVaWGRJWlhoV1lXeDFaU3dnYzJWMFRtVjNTR1Y0Vm1Gc2RXVmRJRDBnZFhObFUzUmhkR1VvYUdWNFZtRnNkV1VwTzF4dUlDQmpiMjV6ZENCYmMyaHZkV3hrUkdsemNHeGhlVVpwWVhRc0lITmxkRk5vYjNWc1pFUnBjM0JzWVhsR2FXRjBYU0E5SUhWelpWTjBZWFJsS0dabFlYUjFjbVZUWldOdmJtUmhjbmtwTzF4dUlDQmpiMjV6ZENCemFHOTFiR1JWYzJWR2FXRjBJRDBnYUdsa1pWTmxZMjl1WkdGeWVTQS9JR1poYkhObElEb2dRbTl2YkdWaGJpaHphRzkxYkdSRWFYTndiR0Y1Um1saGRDazdYRzVjYmlBZ1kyOXVjM1FnWjJWMFJHVmphVzFoYkZaaGJIVmxJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUdSbFkybHRZV3hXWVd4MVpWTjBjbWx1WnlBOUlITm9iM1ZzWkZWelpVWnBZWFJjYmlBZ0lDQWdJRDhnWjJWMFZtRnNkV1ZHY205dFYyVnBTR1Y0S0h0Y2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2FHVjRWbUZzZFdVc1hHNGdJQ0FnSUNBZ0lDQWdkRzlEZFhKeVpXNWplVG9nYzJWamIyNWtZWEo1UTNWeWNtVnVZM2tzWEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkbVZ5YzJsdmJsSmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ2JuVnRZbVZ5VDJaRVpXTnBiV0ZzY3pvZ01peGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJRG9nWjJWMFZtRnNkV1ZHY205dFYyVnBTR1Y0S0h0Y2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2FHVjRWbUZzZFdVc1hHNGdJQ0FnSUNBZ0lDQWdkRzlEZFhKeVpXNWplVG9nUlhSb1pYSkVaVzV2YldsdVlYUnBiMjR1UlZSSUxGeHVJQ0FnSUNBZ0lDQWdJRzUxYldKbGNrOW1SR1ZqYVcxaGJITTZJRGdzWEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUU1MWJXSmxjaWhrWldOcGJXRnNWbUZzZFdWVGRISnBibWNwSUh4OElEQTdYRzRnSUgwN1hHNWNiaUFnWTI5dWMzUWdhVzVwZEdsaGJFUmxZMmx0WVd4V1lXeDFaU0E5SUdobGVGWmhiSFZsSUQ4Z1oyVjBSR1ZqYVcxaGJGWmhiSFZsS0NrZ09pQXdPMXh1WEc0Z0lHTnZibk4wSUhOM1lYQWdQU0JoYzNsdVl5QW9LU0E5UGlCN1hHNGdJQ0FnWVhkaGFYUWdiMjVRY21WbVpYSmxibU5sVkc5bloyeGxLQ2s3WEc0Z0lDQWdjMlYwVTNkaGNIQmxaQ2doYVhOVGQyRndjR1ZrS1R0Y2JpQWdJQ0J6WlhSVGFHOTFiR1JFYVhOd2JHRjVSbWxoZENnaGMyaHZkV3hrUkdsemNHeGhlVVpwWVhRcE8xeHVJQ0I5TzF4dVhHNGdJR052Ym5OMElHaGhibVJzWlVOb1lXNW5aU0E5SUNodVpYZEVaV05wYldGc1ZtRnNkV1VwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0JvWlhoV1lXeDFaVTVsZHlBOUlITm9iM1ZzWkZWelpVWnBZWFJjYmlBZ0lDQWdJRDhnWjJWMFYyVnBTR1Y0Um5KdmJVUmxZMmx0WVd4V1lXeDFaU2g3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1bGQwUmxZMmx0WVd4V1lXeDFaU3hjYmlBZ0lDQWdJQ0FnSUNCbWNtOXRRM1Z5Y21WdVkzazZJSE5sWTI5dVpHRnllVU4xY25KbGJtTjVMRnh1SUNBZ0lDQWdJQ0FnSUdOdmJuWmxjbk5wYjI1U1lYUmxMRnh1SUNBZ0lDQWdJQ0FnSUdsdWRtVnlkRU52Ym5abGNuTnBiMjVTWVhSbE9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ09pQm5aWFJYWldsSVpYaEdjbTl0UkdWamFXMWhiRlpoYkhWbEtIdGNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dibVYzUkdWamFXMWhiRlpoYkhWbExGeHVJQ0FnSUNBZ0lDQWdJR1p5YjIxRGRYSnlaVzVqZVRvZ1JYUm9aWEpFWlc1dmJXbHVZWFJwYjI0dVJWUklMRnh1SUNBZ0lDQWdJQ0FnSUdaeWIyMUVaVzV2YldsdVlYUnBiMjQ2SUVWMGFHVnlSR1Z1YjIxcGJtRjBhVzl1TGtWVVNDeGNiaUFnSUNBZ0lDQWdJQ0JqYjI1MlpYSnphVzl1VW1GMFpTeGNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0J6WlhST1pYZElaWGhXWVd4MVpTaG9aWGhXWVd4MVpVNWxkeWs3WEc0Z0lDQWdiMjVEYUdGdVoyVW9hR1Y0Vm1Gc2RXVk9aWGNwTzF4dUlDQWdJSE5sZEZOM1lYQndaV1FvSVdselUzZGhjSEJsWkNrN1hHNGdJSDA3WEc1Y2JpQWdkWE5sUldabVpXTjBLQ2dwSUQwK0lIdGNiaUFnSUNCelpYUk9aWGRJWlhoV1lXeDFaU2hvWlhoV1lXeDFaU2s3WEc0Z0lIMHNJRnRvWlhoV1lXeDFaVjBwTzF4dVhHNGdJSFZ6WlVWbVptVmpkQ2dvS1NBOVBpQjdYRzRnSUNBZ2FXWWdLR1psWVhSMWNtVlRaV052Ym1SaGNua3BJSHRjYmlBZ0lDQWdJR2hoYm1Sc1pVTm9ZVzVuWlNocGJtbDBhV0ZzUkdWamFXMWhiRlpoYkhWbEtUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUhKbFlXTjBMV2h2YjJ0ekwyVjRhR0YxYzNScGRtVXRaR1Z3YzF4dUlDQjlMQ0JiWm1WaGRIVnlaVk5sWTI5dVpHRnllU3dnYVc1cGRHbGhiRVJsWTJsdFlXeFdZV3gxWlYwcE8xeHVYRzRnSUdOdmJuTjBJSEpsYm1SbGNrTnZiblpsY25OcGIyNURiMjF3YjI1bGJuUWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2JHVjBJR04xY25KbGJtTjVMQ0J1ZFcxaVpYSlBaa1JsWTJsdFlXeHpPMXh1WEc0Z0lDQWdhV1lnS0docFpHVlRaV052Ym1SaGNua3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2lZM1Z5Y21WdVkza3RhVzV3ZFhSZlgyTnZiblpsY25OcGIyNHRZMjl0Y0c5dVpXNTBYQ0krWEc0Z0lDQWdJQ0FnSUNBZ2UzUW9KMjV2UTI5dWRtVnljMmx2YmxKaGRHVkJkbUZwYkdGaWJHVW5LWDFjYmlBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2h6YUc5MWJHUlZjMlZHYVdGMEtTQjdYRzRnSUNBZ0lDQXZMeUJFYVhOd2JHRjVJRVZVU0Z4dUlDQWdJQ0FnWTNWeWNtVnVZM2tnUFNCd2NtVm1aWEp5WldSRGRYSnlaVzVqZVNCOGZDQkZkR2hsY2tSbGJtOXRhVzVoZEdsdmJpNUZWRWc3WEc0Z0lDQWdJQ0J1ZFcxaVpYSlBaa1JsWTJsdFlXeHpJRDBnT0R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdMeThnUkdsemNHeGhlU0JHYVdGMFhHNGdJQ0FnSUNCamRYSnlaVzVqZVNBOUlITmxZMjl1WkdGeWVVTjFjbkpsYm1ONU8xeHVJQ0FnSUNBZ2JuVnRZbVZ5VDJaRVpXTnBiV0ZzY3lBOUlESTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUR4RGRYSnlaVzVqZVVScGMzQnNZWGxjYmlBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aVkzVnljbVZ1WTNrdGFXNXdkWFJmWDJOdmJuWmxjbk5wYjI0dFkyOXRjRzl1Wlc1MFhDSmNiaUFnSUNBZ0lDQWdZM1Z5Y21WdVkzazllMk4xY25KbGJtTjVmVnh1SUNBZ0lDQWdJQ0IyWVd4MVpUMTdibVYzU0dWNFZtRnNkV1Y5WEc0Z0lDQWdJQ0FnSUc1MWJXSmxjazltUkdWamFXMWhiSE05ZTI1MWJXSmxjazltUkdWamFXMWhiSE45WEc0Z0lDQWdJQ0F2UGx4dUlDQWdJQ2s3WEc0Z0lIMDdYRzVjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0E4Vlc1cGRFbHVjSFYwWEc0Z0lDQWdJQ0I3TGk0dWUxeHVJQ0FnSUNBZ0lDQm9aWGhXWVd4MVpTeGNiaUFnSUNBZ0lDQWdjSEpsWm1WeWNtVmtRM1Z5Y21WdVkza3NYRzRnSUNBZ0lDQWdJSE5sWTI5dVpHRnllVU4xY25KbGJtTjVMRnh1SUNBZ0lDQWdJQ0JvYVdSbFUyVmpiMjVrWVhKNUxGeHVJQ0FnSUNBZ0lDQm1aV0YwZFhKbFUyVmpiMjVrWVhKNUxGeHVJQ0FnSUNBZ0lDQmpiMjUyWlhKemFXOXVVbUYwWlN4Y2JpQWdJQ0FnSUNBZ2IyNURhR0Z1WjJVc1hHNGdJQ0FnSUNBZ0lHOXVVSEpsWm1WeVpXNWpaVlJ2WjJkc1pTeGNiaUFnSUNBZ0lIMTlYRzRnSUNBZ0lDQmtZWFJoVkdWemRFbGtQVndpWTNWeWNtVnVZM2t0YVc1d2RYUmNJbHh1SUNBZ0lDQWdjM1ZtWm1sNFBYdHphRzkxYkdSVmMyVkdhV0YwSUQ4Z2MyVmpiMjVrWVhKNVUzVm1abWw0SURvZ2NISnBiV0Z5ZVZOMVptWnBlSDFjYmlBZ0lDQWdJRzl1UTJoaGJtZGxQWHRvWVc1a2JHVkRhR0Z1WjJWOVhHNGdJQ0FnSUNCMllXeDFaVDE3YVc1cGRHbGhiRVJsWTJsdFlXeFdZV3gxWlgxY2JpQWdJQ0FnSUdGamRHbHZia052YlhCdmJtVnVkRDE3WEc0Z0lDQWdJQ0FnSUR4aWRYUjBiMjVjYmlBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSmpkWEp5Wlc1amVTMXBibkIxZEY5ZmMzZGhjQzFqYjIxd2IyNWxiblJjSWx4dUlDQWdJQ0FnSUNBZ0lHUmhkR0V0ZEdWemRHbGtQVndpWTNWeWNtVnVZM2t0YzNkaGNGd2lYRzRnSUNBZ0lDQWdJQ0FnYjI1RGJHbGphejE3YzNkaGNIMWNiaUFnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUR4cElHTnNZWE56VG1GdFpUMWNJbVpoSUdaaExYSmxkSGRsWlhRZ1ptRXRiR2RjSWlBdlBseHVJQ0FnSUNBZ0lDQThMMkoxZEhSdmJqNWNiaUFnSUNBZ0lIMWNiaUFnSUNBK1hHNGdJQ0FnSUNCN2NtVnVaR1Z5UTI5dWRtVnljMmx2YmtOdmJYQnZibVZ1ZENncGZWeHVJQ0FnSUR3dlZXNXBkRWx1Y0hWMFBseHVJQ0FwTzF4dWZWeHVYRzVEZFhKeVpXNWplVWx1Y0hWMExuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ2FHVjRWbUZzZFdVNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJR1psWVhSMWNtVlRaV052Ym1SaGNuazZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0J2YmtOb1lXNW5aVG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUc5dVVISmxabVZ5Wlc1alpWUnZaMmRzWlRvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc1OU8xeHVJaXdpWlhod2IzSjBJSHNnWkdWbVlYVnNkQ0I5SUdaeWIyMGdKeTR2WTNWeWNtVnVZM2t0YVc1d2RYUW5PMXh1SWl3aWFXMXdiM0owSUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ1FtOTRJR1p5YjIwZ0p5NHVMeTR1TDNWcEwySnZlQ2M3WEc1cGJYQnZjblFnVkc5dmJIUnBjQ0JtY205dElDY3VMaTh1TGk5MWFTOTBiMjlzZEdsd0p6dGNibWx0Y0c5eWRDQjdYRzRnSUZSbGVIUkRiMnh2Y2l4Y2JpQWdSRWxUVUV4QldTeGNiaUFnVkdWNGRGWmhjbWxoYm5Rc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyaGxiSEJsY25NdlkyOXVjM1JoYm5SekwyUmxjMmxuYmkxemVYTjBaVzBuTzF4dVhHNXBiWEJ2Y25RZ2V5QkpZMjl1TENCSlkyOXVUbUZ0WlN3Z1NXTnZibE5wZW1Vc0lGUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOWpiMjF3YjI1bGJuUXRiR2xpY21GeWVTYzdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQkRkWE4wYjIxVGNHVnVaR2x1WjBOaGNGUnZiMngwYVhBZ1BTQW9lMXh1SUNCMGIyOXNkR2x3UTI5dWRHVnVkRlJsZUhRc1hHNGdJSFJ2YjJ4MGFYQkpZMjl1TEZ4dWZTa2dQVDRnS0Z4dUlDQThRbTk0SUdScGMzQnNZWGs5ZTBSSlUxQk1RVmt1U1U1TVNVNUZYMEpNVDBOTGZUNWNiaUFnSUNBOFZHOXZiSFJwY0Z4dUlDQWdJQ0FnYVc1MFpYSmhZM1JwZG1WY2JpQWdJQ0FnSUhCdmMybDBhVzl1UFZ3aWRHOXdYQ0pjYmlBZ0lDQWdJR2gwYld3OWUxeHVJQ0FnSUNBZ0lDQThWR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lIWmhjbWxoYm5ROWUxUmxlSFJXWVhKcFlXNTBMbUp2WkhsVGJYMWNiaUFnSUNBZ0lDQWdJQ0JoY3oxY0ltZzJYQ0pjYmlBZ0lDQWdJQ0FnSUNCdFlYSm5hVzQ5ZXpOOVhHNGdJQ0FnSUNBZ0lDQWdZMjlzYjNJOWUxUmxlSFJEYjJ4dmNpNTBaWGgwUVd4MFpYSnVZWFJwZG1WOVhHNGdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQVndpWm05eWJTMW1hV1ZzWkY5ZmFHVmhaR2x1WnkxMGFYUnNaVjlmZEc5dmJIUnBjRndpWEc0Z0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQjdkRzl2YkhScGNFTnZiblJsYm5SVVpYaDBmVnh1SUNBZ0lDQWdJQ0E4TDFSbGVIUStYRzRnSUNBZ0lDQjlYRzRnSUNBZ1BseHVJQ0FnSUNBZ2UzUnZiMngwYVhCSlkyOXVJRDhnS0Z4dUlDQWdJQ0FnSUNBOFNXTnZibHh1SUNBZ0lDQWdJQ0FnSUc1aGJXVTllMGxqYjI1T1lXMWxMa1JoYm1kbGNuMWNiaUFnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKbWIzSnRMV1pwWld4a1gxOW9aV0ZrYVc1bkxYUnBkR3hsWDE5MGIyOXNkR2x3WDE5M1lYSnVhVzVuTFdsamIyNWNJbHh1SUNBZ0lDQWdJQ0FnSUhOcGVtVTllMGxqYjI1VGFYcGxMa2x1YUdWeWFYUjlYRzRnSUNBZ0lDQWdJQ0FnYzNSNWJHVTllM3NnSjNabGNuUnBZMkZzTFdGc2FXZHVKem9nSjJKdmRIUnZiU2NnZlgxY2JpQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDa2dPaUFvWEc0Z0lDQWdJQ0FnSUhSdmIyeDBhWEJKWTI5dUlDRTlQU0FuSnlBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnUEVsamIyNGdibUZ0WlQxN1NXTnZiazVoYldVdVVYVmxjM1JwYjI1OUlITnBlbVU5ZTBsamIyNVRhWHBsTGtsdWFHVnlhWFI5SUM4K1hHNGdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDbDlYRzRnSUNBZ1BDOVViMjlzZEdsd1BseHVJQ0E4TDBKdmVENWNiaWs3WEc1Y2JrTjFjM1J2YlZOd1pXNWthVzVuUTJGd1ZHOXZiSFJwY0M1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUhSdmIyeDBhWEJEYjI1MFpXNTBWR1Y0ZERvZ1VISnZjRlI1Y0dWekxtOXVaVTltVkhsd1pTaGJVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5d2dVSEp2Y0ZSNWNHVnpMbTV2WkdWZEtTeGNiaUFnZEc5dmJIUnBjRWxqYjI0NklGQnliM0JVZVhCbGN5NXZibVZQWmxSNWNHVW9XMUJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NJRkJ5YjNCVWVYQmxjeTVpYjI5c1hTa3NYRzU5TzF4dUlpd2lhVzF3YjNKMElGSmxZV04wTENCN0lIVnpaVk4wWVhSbExDQjFjMlZEYjI1MFpYaDBMQ0IxYzJWRlptWmxZM1FzSUhWelpWSmxaaUI5SUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQjdJSFZ6WlVScGMzQmhkR05vTENCMWMyVlRaV3hsWTNSdmNpQjlJR1p5YjIwZ0ozSmxZV04wTFhKbFpIVjRKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnWTJ4aGMzTnVZVzFsY3lCbWNtOXRJQ2RqYkdGemMyNWhiV1Z6Snp0Y2JtbHRjRzl5ZENCQ2FXZE9kVzFpWlhJZ1puSnZiU0FuWW1sbmJuVnRZbVZ5TG1wekp6dGNibWx0Y0c5eWRDQjdJR0ZrWkVobGVGQnlaV1pwZUNCOUlHWnliMjBnSjJWMGFHVnlaWFZ0YW5NdGRYUnBiQ2M3WEc1Y2JtbHRjRzl5ZENCN0lFa3hPRzVEYjI1MFpYaDBJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZZMjl1ZEdWNGRITXZhVEU0YmljN1hHNXBiWEJ2Y25RZ1FtOTRJR1p5YjIwZ0p5NHVMeTR1TDNWcEwySnZlQ2M3WEc1cGJYQnZjblFnUm05eWJVWnBaV3hrSUdaeWIyMGdKeTR1THk0dUwzVnBMMlp2Y20wdFptbGxiR1FuTzF4dWFXMXdiM0owSUhzZ1ZHVjRkQ3dnUW5WMGRHOXVUR2x1YXl3Z1NXTnZiaXdnU1dOdmJrNWhiV1VnZlNCbWNtOXRJQ2N1TGk4dUxpOWpiMjF3YjI1bGJuUXRiR2xpY21GeWVTYzdYRzVwYlhCdmNuUWdlMXh1SUNCQmJHbG5ia2wwWlcxekxGeHVJQ0JFU1ZOUVRFRlpMRnh1SUNCR1RFVllYMFJKVWtWRFZFbFBUaXhjYmlBZ1ZFVllWRjlCVEVsSFRpeGNiaUFnVkdWNGRGWmhjbWxoYm5Rc1hHNGdJRXAxYzNScFpubERiMjUwWlc1MExGeHVJQ0JUYVhwbExGeHVJQ0JDVEU5RFMxOVRTVnBGVXl4Y2JpQWdRbUZqYTJkeWIzVnVaRU52Ykc5eUxGeHVJQ0JVWlhoMFEyOXNiM0lzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1TDJobGJIQmxjbk12WTI5dWMzUmhiblJ6TDJSbGMybG5iaTF6ZVhOMFpXMG5PMXh1YVcxd2IzSjBJSHNnWjJWMFEzVnpkRzl0Vkc5clpXNUJiVzkxYm5RZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5elpXeGxZM1J2Y25Nbk8xeHVhVzF3YjNKMElIc2djMlYwUTNWemRHOXRWRzlyWlc1QmJXOTFiblFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlrZFdOcmN5OWhjSEF2WVhCd0p6dGNibWx0Y0c5eWRDQjdJR05oYkdOVWIydGxia0Z0YjNWdWRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOXNhV0l2ZEhKaGJuTmhZM1JwYjI1ekxXTnZiblJ5YjJ4c1pYSXRkWFJwYkhNbk8xeHVhVzF3YjNKMElIc2dhR1Y0Vkc5RVpXTnBiV0ZzSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmMyaGhjbVZrTDIxdlpIVnNaWE12WTI5dWRtVnljMmx2Ymk1MWRHbHNjeWM3WEc1cGJYQnZjblFnZTF4dUlDQk5RVmhmVkU5TFJVNWZRVXhNVDFkQlRrTkZYMEZOVDFWT1ZDeGNiaUFnVGxWTlgxZGZUMUJVWDBSRlEwbE5RVXhmUTA5TlRVRmZUMUpmUkU5VVgxSkZSMFZZTEZ4dUlDQkVSVU5KVFVGTVgxSkZSMFZZTEZ4dWZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwzUnZhMlZ1Y3ljN1hHNXBiWEJ2Y25RZ2V5Qk9kVzFsY21saklIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyMXZaSFZzWlhNdlRuVnRaWEpwWXljN1hHNXBiWEJ2Y25RZ2V5QmxjM1JwYldGMFpVZGhjeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMM04wYjNKbEwyRmpkR2x2Ym5Nbk8xeHVhVzF3YjNKMElIc2daMlYwUTNWemRHOXRWSGhRWVhKaGJYTkVZWFJoSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2Y0dGblpYTXZZMjl1Wm1seWJTMWhjSEJ5YjNabEwyTnZibVpwY20wdFlYQndjbTkyWlM1MWRHbHNKenRjYm1sdGNHOXlkQ0I3SUhWelpVZGhjMFpsWlVOdmJuUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlqYjI1MFpYaDBjeTluWVhOR1pXVW5PMXh1YVcxd2IzSjBJSHNnUTNWemRHOXRVM0JsYm1ScGJtZERZWEJVYjI5c2RHbHdJSDBnWm5KdmJTQW5MaTlqZFhOMGIyMHRjM0JsYm1ScGJtY3RZMkZ3TFhSdmIyeDBhWEFuTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCRGRYTjBiMjFUY0dWdVpHbHVaME5oY0NoN1hHNGdJSFI0VUdGeVlXMXpMRnh1SUNCMGIydGxiazVoYldVc1hHNGdJR04xY25KbGJuUlViMnRsYmtKaGJHRnVZMlVzWEc0Z0lHUmhjSEJRY205d2IzTmxaRlpoYkhWbExGeHVJQ0J6YVhSbFQzSnBaMmx1TEZ4dUlDQndZWE56VkdobFJYSnliM0pVWlhoMExGeHVJQ0JrWldOcGJXRnNjeXhjYmlBZ2MyVjBTVzV3ZFhSRGFHRnVaMlZKYmxCeWIyZHlaWE56TEZ4dWZTa2dlMXh1SUNCamIyNXpkQ0IwSUQwZ2RYTmxRMjl1ZEdWNGRDaEpNVGh1UTI5dWRHVjRkQ2s3WEc0Z0lHTnZibk4wSUdScGMzQmhkR05vSUQwZ2RYTmxSR2x6Y0dGMFkyZ29LVHRjYmlBZ1kyOXVjM1FnZXlCMWNHUmhkR1ZVY21GdWMyRmpkR2x2YmlCOUlEMGdkWE5sUjJGelJtVmxRMjl1ZEdWNGRDZ3BPMXh1SUNCamIyNXpkQ0JwYm5CMWRGSmxaaUE5SUhWelpWSmxaaWh1ZFd4c0tUdGNibHh1SUNCamIyNXpkQ0IyWVd4MVpTQTlJSFZ6WlZObGJHVmpkRzl5S0dkbGRFTjFjM1J2YlZSdmEyVnVRVzF2ZFc1MEtUdGNibHh1SUNCamIyNXpkQ0JiWlhKeWIzSXNJSE5sZEVWeWNtOXlYU0E5SUhWelpWTjBZWFJsS0NjbktUdGNiaUFnWTI5dWMzUWdXM05vYjNkVmMyVkVaV1poZFd4MFFuVjBkRzl1TENCelpYUlRhRzkzVlhObFJHVm1ZWFZzZEVKMWRIUnZibDBnUFNCMWMyVlRkR0YwWlNoY2JpQWdJQ0IyWVd4MVpTQWhQVDBnVTNSeWFXNW5LR1JoY0hCUWNtOXdiM05sWkZaaGJIVmxLU0FtSmlCMGNuVmxMRnh1SUNBcE8xeHVJQ0JqYjI1emRDQnBibkIxZEV4dloybGpSVzF3ZEhsVGRHRjBaVlJsZUhRZ1BTQjBLQ2RwYm5CMWRFeHZaMmxqUlcxd2RIbFRkR0YwWlNjcE8xeHVYRzRnSUdOdmJuTjBJSEpsY0d4aFkyVkRiMjF0WVZSdlJHOTBJRDBnS0dsdWNIVjBWbUZzZFdVcElEMCtJSHRjYmlBZ0lDQnlaWFIxY200Z2FXNXdkWFJXWVd4MVpTNXlaWEJzWVdObEtDOHNMMmQxTENBbkxpY3BPMXh1SUNCOU8xeHVYRzRnSUdOdmJuTjBJR1JsWTBOdmJuWmxjbk5wYjI1SGNtVmhkR1Z5VkdoaGJpQTlJQ2gwYjJ0bGJsWmhiSFZsTENCMGIydGxia0poYkdGdVkyVXBJRDArSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUU1MWJXVnlhV01vVG5WdFltVnlLSEpsY0d4aFkyVkRiMjF0WVZSdlJHOTBLSFJ2YTJWdVZtRnNkV1VwS1N3Z01UQXBMbWR5WldGMFpYSlVhR0Z1S0Z4dUlDQWdJQ0FnVG5WdFltVnlLSFJ2YTJWdVFtRnNZVzVqWlNrc1hHNGdJQ0FnSUNBeE1DeGNiaUFnSUNBcE8xeHVJQ0I5TzF4dVhHNGdJR052Ym5OMElHZGxkRWx1Y0hWMFZHVjRkRXh2WjJsaklEMGdLR2x1Y0hWMFRuVnRZbVZ5S1NBOVBpQjdYRzRnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdibVYzSUU1MWJXVnlhV01vVG5WdFltVnlLSEpsY0d4aFkyVkRiMjF0WVZSdlJHOTBLR2x1Y0hWMFRuVnRZbVZ5S1Nrc0lERXdLUzVzWlhOelZHaGhiazl5UlhGMVlXeFVieWhjYmlBZ0lDQWdJQ0FnYm1WM0lFNTFiV1Z5YVdNb1RuVnRZbVZ5S0dOMWNuSmxiblJVYjJ0bGJrSmhiR0Z1WTJVcExDQXhNQ2tzWEc0Z0lDQWdJQ0FwWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U2SUNkamRYTjBiMjB0YzNCbGJtUnBibWN0WTJGd1gxOXNiM2RsY2xaaGJIVmxKeXhjYmlBZ0lDQWdJQ0FnWkdWelkzSnBjSFJwYjI0NklIUW9KMmx1Y0hWMFRHOW5hV05GY1hWaGJFOXlVMjFoYkd4bGNrNTFiV0psY2ljc0lGdGNiaUFnSUNBZ0lDQWdJQ0E4VkdWNGRGeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNVBWd2lZM1Z6ZEc5dExYTndaVzVrYVc1bkxXTmhjRndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdFVaWGgwVm1GeWFXRnVkQzVpYjJSNVUyMUNiMnhrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZWE05WENKb05sd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSmpkWE4wYjIwdGMzQmxibVJwYm1jdFkyRndYMTlwYm5CMWRDMTJZV3gxWlMxaGJtUXRkRzlyWlc0dGJtRnRaVndpWEc0Z0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNKbGNHeGhZMlZEYjIxdFlWUnZSRzkwS0dsdWNIVjBUblZ0WW1WeUtYMGdlM1J2YTJWdVRtRnRaWDFjYmlBZ0lDQWdJQ0FnSUNBOEwxUmxlSFErTEZ4dUlDQWdJQ0FnSUNCZEtTeGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGtaV05EYjI1MlpYSnphVzl1UjNKbFlYUmxjbFJvWVc0b2FXNXdkWFJPZFcxaVpYSXNJR04xY25KbGJuUlViMnRsYmtKaGJHRnVZMlVwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCamJHRnpjMDVoYldVNklDZGpkWE4wYjIwdGMzQmxibVJwYm1jdFkyRndYMTlvYVdkb1pYSldZV3gxWlNjc1hHNGdJQ0FnSUNBZ0lHUmxjMk55YVhCMGFXOXVPaUIwS0NkcGJuQjFkRXh2WjJsalNHbG5hR1Z5VG5WdFltVnlKeWtzWEc0Z0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ1kyeGhjM05PWVcxbE9pQW5ZM1Z6ZEc5dExYTndaVzVrYVc1bkxXTmhjRjlmWlcxd2RIbFRkR0YwWlNjc1hHNGdJQ0FnSUNCa1pYTmpjbWx3ZEdsdmJqb2dkQ2duYVc1d2RYUk1iMmRwWTBWdGNIUjVVM1JoZEdVbktTeGNiaUFnSUNCOU8xeHVJQ0I5TzF4dVhHNGdJR052Ym5OMElGdGpkWE4wYjIxVGNHVnVaR2x1WjBOaGNGUmxlSFFzSUhObGRFTjFjM1J2YlZOd1pXNWthVzVuUTJGd1ZHVjRkRjBnUFNCMWMyVlRkR0YwWlNoY2JpQWdJQ0JuWlhSSmJuQjFkRlJsZUhSTWIyZHBZeWgyWVd4MVpTa3VaR1Z6WTNKcGNIUnBiMjRzWEc0Z0lDazdYRzVjYmlBZ1kyOXVjM1FnYUdGdVpHeGxRMmhoYm1kbElEMGdZWE41Ym1NZ0tIWmhiSFZsU1c1d2RYUXBJRDArSUh0Y2JpQWdJQ0JwWmlBb0lYUjRVR0Z5WVcxektTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJSE5sZEVsdWNIVjBRMmhoYm1kbFNXNVFjbTluY21WemN5aDBjblZsS1R0Y2JpQWdJQ0JzWlhRZ2MzQmxibVJwYm1kRFlYQkZjbkp2Y2lBOUlDY25PMXh1SUNBZ0lHTnZibk4wSUdsdWNIVjBWR1Y0ZEV4dloybGpJRDBnWjJWMFNXNXdkWFJVWlhoMFRHOW5hV01vZG1Gc2RXVkpibkIxZENrN1hHNGdJQ0FnWTI5dWMzUWdhVzV3ZFhSVVpYaDBURzluYVdORVpYTmpjbWx3ZEdsdmJpQTlJR2x1Y0hWMFZHVjRkRXh2WjJsakxtUmxjMk55YVhCMGFXOXVPMXh1SUNBZ0lHTnZibk4wSUcxaGRHTm9JRDBnUkVWRFNVMUJURjlTUlVkRldDNWxlR1ZqS0hKbGNHeGhZMlZEYjIxdFlWUnZSRzkwS0haaGJIVmxTVzV3ZFhRcEtUdGNiaUFnSUNCcFppQW9iV0YwWTJnL0xsc3hYVDh1YkdWdVozUm9JRDRnWkdWamFXMWhiSE1wSUh0Y2JpQWdJQ0FnSUhObGRFbHVjSFYwUTJoaGJtZGxTVzVRY205bmNtVnpjeWhtWVd4elpTazdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIWmhiSFZsU1c1d2RYUWdKaVlnSVU1VlRWOVhYMDlRVkY5RVJVTkpUVUZNWDBOUFRVMUJYMDlTWDBSUFZGOVNSVWRGV0M1MFpYTjBLSFpoYkhWbFNXNXdkWFFwS1NCN1hHNGdJQ0FnSUNCemNHVnVaR2x1WjBOaGNFVnljbTl5SUQwZ2RDZ25jM0JsYm1ScGJtZERZWEJGY25KdmNpY3BPMXh1SUNBZ0lDQWdjMlYwUTNWemRHOXRVM0JsYm1ScGJtZERZWEJVWlhoMEtIUW9KM053Wlc1a2FXNW5RMkZ3UlhKeWIzSkVaWE5qY21sd2RHbHZiaWNzSUZ0emFYUmxUM0pwWjJsdVhTa3BPMXh1SUNBZ0lDQWdjMlYwUlhKeWIzSW9jM0JsYm1ScGJtZERZWEJGY25KdmNpazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhObGRFTjFjM1J2YlZOd1pXNWthVzVuUTJGd1ZHVjRkQ2hwYm5CMWRGUmxlSFJNYjJkcFkwUmxjMk55YVhCMGFXOXVLVHRjYmlBZ0lDQWdJSE5sZEVWeWNtOXlLQ2NuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQnRZWGhVYjJ0bGJrRnRiM1Z1ZENBOUlHTmhiR05VYjJ0bGJrRnRiM1Z1ZENoY2JpQWdJQ0FnSUUxQldGOVVUMHRGVGw5QlRFeFBWMEZPUTBWZlFVMVBWVTVVTEZ4dUlDQWdJQ0FnWkdWamFXMWhiSE1zWEc0Z0lDQWdLVHRjYmlBZ0lDQnBaaUFvVG5WdFltVnlLSFpoYkhWbFNXNXdkWFF1YkdWdVozUm9LU0ErSURFZ0ppWWdUblZ0WW1WeUtIWmhiSFZsU1c1d2RYUXBLU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQmpkWE4wYjIxVGNHVnVaRXhwYldsMFRuVnRZbVZ5SUQwZ2JtVjNJRUpwWjA1MWJXSmxjaWgyWVd4MVpVbHVjSFYwS1R0Y2JpQWdJQ0FnSUdsbUlDaGpkWE4wYjIxVGNHVnVaRXhwYldsMFRuVnRZbVZ5TG1keVpXRjBaWEpVYUdGdUtHMWhlRlJ2YTJWdVFXMXZkVzUwS1NrZ2UxeHVJQ0FnSUNBZ0lDQnpjR1Z1WkdsdVowTmhjRVZ5Y205eUlEMGdkQ2duYzNCbGJtUk1hVzFwZEZSdmIweGhjbWRsSnlrN1hHNGdJQ0FnSUNBZ0lITmxkRVZ5Y205eUtITndaVzVrYVc1blEyRndSWEp5YjNJcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdScGMzQmhkR05vS0hObGRFTjFjM1J2YlZSdmEyVnVRVzF2ZFc1MEtGTjBjbWx1WnloMllXeDFaVWx1Y0hWMEtTa3BPMXh1WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdOdmJuTjBJRzVsZDBSaGRHRWdQU0JuWlhSRGRYTjBiMjFVZUZCaGNtRnRjMFJoZEdFb2RIaFFZWEpoYlhNdVpHRjBZU3dnZTF4dUlDQWdJQ0FnSUNCamRYTjBiMjFRWlhKdGFYTnphVzl1UVcxdmRXNTBPaUIyWVd4MVpVbHVjSFYwTEZ4dUlDQWdJQ0FnSUNCa1pXTnBiV0ZzY3l4Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ1kyOXVjM1FnZXlCbWNtOXRMQ0IwYnl3Z2RtRnNkV1U2SUhSNFZtRnNkV1VnZlNBOUlIUjRVR0Z5WVcxek8xeHVJQ0FnSUNBZ1kyOXVjM1FnWlhOMGFXMWhkR1ZrUjJGelRHbHRhWFFnUFNCaGQyRnBkQ0JsYzNScGJXRjBaVWRoY3loN1hHNGdJQ0FnSUNBZ0lHWnliMjBzWEc0Z0lDQWdJQ0FnSUhSdkxGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2RIaFdZV3gxWlN4Y2JpQWdJQ0FnSUNBZ1pHRjBZVG9nYm1WM1JHRjBZU3hjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnYVdZZ0tHVnpkR2x0WVhSbFpFZGhjMHhwYldsMEtTQjdYRzRnSUNBZ0lDQWdJR0YzWVdsMElIVndaR0YwWlZSeVlXNXpZV04wYVc5dUtIdGNiaUFnSUNBZ0lDQWdJQ0JuWVhOTWFXMXBkRG9nYUdWNFZHOUVaV05wYldGc0tHRmtaRWhsZUZCeVpXWnBlQ2hsYzNScGJXRjBaV1JIWVhOTWFXMXBkQ2twTEZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHTmhkR05vSUNobGVIQXBJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0owVnljbTl5SUdsdUlIUnllV2x1WnlCMGJ5QjFjR1JoZEdVZ1oyRnpJR3hwYldsMEp5d2daWGh3S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjMlYwU1c1d2RYUkRhR0Z1WjJWSmJsQnliMmR5WlhOektHWmhiSE5sS1R0Y2JpQWdmVHRjYmx4dUlDQjFjMlZGWm1abFkzUW9LQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDaDJZV3gxWlNBaFBUMGdVM1J5YVc1bktHUmhjSEJRY205d2IzTmxaRlpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdjMlYwVTJodmQxVnpaVVJsWm1GMWJIUkNkWFIwYjI0b2RISjFaU2s3WEc0Z0lDQWdmVnh1SUNCOUxDQmJkbUZzZFdVc0lHUmhjSEJRY205d2IzTmxaRlpoYkhWbFhTazdYRzVjYmlBZ2RYTmxSV1ptWldOMEtDZ3BJRDArSUh0Y2JpQWdJQ0J3WVhOelZHaGxSWEp5YjNKVVpYaDBLR1Z5Y205eUtUdGNiaUFnZlN3Z1cyVnljbTl5TENCd1lYTnpWR2hsUlhKeWIzSlVaWGgwWFNrN1hHNWNiaUFnZFhObFJXWm1aV04wS0NncElEMCtJSHRjYmlBZ0lDQnBaaUFvYVc1d2RYUlNaV1l1WTNWeWNtVnVkQ2tnZTF4dUlDQWdJQ0FnYVc1d2RYUlNaV1l1WTNWeWNtVnVkQzVtYjJOMWN5aDdYRzRnSUNBZ0lDQWdJSEJ5WlhabGJuUlRZM0p2Ykd3NklIUnlkV1VzWEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJSEpsWVdOMExXaHZiMnR6TDJWNGFHRjFjM1JwZG1VdFpHVndjMXh1SUNCOUxDQmJhVzV3ZFhSU1pXWXVZM1Z5Y21WdWRGMHBPMXh1WEc0Z0lHTnZibk4wSUdOb2IyOXpaVlJ2YjJ4MGFYQkRiMjUwWlc1MFZHVjRkQ0E5SUdSbFkwTnZiblpsY25OcGIyNUhjbVZoZEdWeVZHaGhiaWhjYmlBZ0lDQjJZV3gxWlN4Y2JpQWdJQ0JqZFhKeVpXNTBWRzlyWlc1Q1lXeGhibU5sTEZ4dUlDQXBYRzRnSUNBZ1B5QjBLQ2QzWVhKdWFXNW5WRzl2YkhScGNGUmxlSFFuTENCYlhHNGdJQ0FnSUNBZ0lEeFVaWGgwWEc0Z0lDQWdJQ0FnSUNBZ2EyVjVQVndpZEc5dmJIUnBjQzEwWlhoMFhDSmNiaUFnSUNBZ0lDQWdJQ0IyWVhKcFlXNTBQWHRVWlhoMFZtRnlhV0Z1ZEM1aWIyUjVVMjFDYjJ4a2ZWeHVJQ0FnSUNBZ0lDQWdJR0Z6UFZ3aWFEWmNJbHh1SUNBZ0lDQWdJQ0FnSUdOdmJHOXlQWHRVWlhoMFEyOXNiM0l1WlhKeWIzSkVaV1poZFd4MGZWeHVJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnUEVsamIyNGdibUZ0WlQxN1NXTnZiazVoYldVdVYyRnlibWx1WjMwZ0x6NGdlM1FvSjJKbFEyRnlaV1oxYkNjcGZWeHVJQ0FnSUNBZ0lDQThMMVJsZUhRK0xGeHVJQ0FnSUNBZ1hTbGNiaUFnSUNBNklIUW9KMmx1Y0hWMFRHOW5hV05GYlhCMGVWTjBZWFJsSnlrN1hHNWNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQThQbHh1SUNBZ0lDQWdQRUp2ZUZ4dUlDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSmpkWE4wYjIwdGMzQmxibVJwYm1jdFkyRndYQ0pjYmlBZ0lDQWdJQ0FnWW05eVpHVnlVbUZrYVhWelBYdFRhWHBsTGxOTmZWeHVJQ0FnSUNBZ0lDQndZV1JrYVc1blZHOXdQWHN5ZlZ4dUlDQWdJQ0FnSUNCd1lXUmthVzVuVW1sbmFIUTllelo5WEc0Z0lDQWdJQ0FnSUhCaFpHUnBibWRNWldaMFBYczJmVnh1SUNBZ0lDQWdJQ0JrYVhOd2JHRjVQWHRFU1ZOUVRFRlpMa1pNUlZoOVhHNGdJQ0FnSUNBZ0lHRnNhV2R1U1hSbGJYTTllMEZzYVdkdVNYUmxiWE11Wm14bGVGTjBZWEowZlZ4dUlDQWdJQ0FnSUNCbWJHVjRSR2x5WldOMGFXOXVQWHRHVEVWWVgwUkpVa1ZEVkVsUFRpNURUMHhWVFU1OVhHNGdJQ0FnSUNBZ0lHSmhZMnRuY205MWJtUkRiMnh2Y2oxN1FtRmphMmR5YjNWdVpFTnZiRzl5TG1KaFkydG5jbTkxYm1SQmJIUmxjbTVoZEdsMlpYMWNiaUFnSUNBZ0lDQWdaMkZ3UFhzeWZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQThRbTk0WEc0Z0lDQWdJQ0FnSUNBZ2FuVnpkR2xtZVVOdmJuUmxiblE5ZTBwMWMzUnBabmxEYjI1MFpXNTBMbU5sYm5SbGNuMWNiaUFnSUNBZ0lDQWdJQ0JrYVhOd2JHRjVQWHRFU1ZOUVRFRlpMa0pNVDBOTGZWeHVJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW1OMWMzUnZiUzF6Y0dWdVpHbHVaeTFqWVhCZlgybHVjSFYwWENKY2JpQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJRHhzWVdKbGJGeHVJQ0FnSUNBZ0lDQWdJQ0FnYUhSdGJFWnZjajE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWTBOdmJuWmxjbk5wYjI1SGNtVmhkR1Z5VkdoaGJpaDJZV3gxWlN3Z1kzVnljbVZ1ZEZSdmEyVnVRbUZzWVc1alpTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JQ2RqZFhOMGIyMHRjM0JsYm1ScGJtY3RZMkZ3TFdsdWNIVjBMWFpoYkhWbEoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dKMk4xYzNSdmJTMXpjR1Z1WkdsdVp5MWpZWEFuWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQRVp2Y20xR2FXVnNaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibkIxZEZKbFpqMTdhVzV3ZFhSU1pXWjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZVWlhOMFNXUTlYQ0pqZFhOMGIyMHRjM0JsYm1ScGJtY3RZMkZ3TFdsdWNIVjBYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkM0poY0hCcGJtZE1ZV0psYkZCeWIzQnpQWHQ3SUdGek9pQW5aR2wySnlCOWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFpEMTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZqUTI5dWRtVnljMmx2YmtkeVpXRjBaWEpVYUdGdUtIWmhiSFZsTENCamRYSnlaVzUwVkc5clpXNUNZV3hoYm1ObEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQeUFuWTNWemRHOXRMWE53Wlc1a2FXNW5MV05oY0MxcGJuQjFkQzEyWVd4MVpTZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nSjJOMWMzUnZiUzF6Y0dWdVpHbHVaeTFqWVhBblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnVkc5dmJIUnBjRU4xYzNSdmJVTnZiWEJ2Ym1WdWREMTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRU4xYzNSdmJWTndaVzVrYVc1blEyRndWRzl2YkhScGNGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzl2YkhScGNFTnZiblJsYm5SVVpYaDBQWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVndiR0ZqWlVOdmJXMWhWRzlFYjNRb2RtRnNkV1VwSUQ4Z1kyaHZiM05sVkc5dmJIUnBjRU52Ym5SbGJuUlVaWGgwSURvZ0p5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdmIyeDBhWEJKWTI5dVBYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21Wd2JHRmpaVU52YlcxaFZHOUViM1FvZG1Gc2RXVXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5QmtaV05EYjI1MlpYSnphVzl1UjNKbFlYUmxjbFJvWVc0b2RtRnNkV1VzSUdOMWNuSmxiblJVYjJ0bGJrSmhiR0Z1WTJVcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lBbkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVEYUdGdVoyVTllMmhoYm1Sc1pVTm9ZVzVuWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdsMGJHVlVaWGgwUFh0MEtDZGpkWE4wYjIxVGNHVnVaR2x1WjBOaGNDY3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQndiR0ZqWldodmJHUmxjajE3ZENnblpXNTBaWEpCVG5WdFltVnlKeWw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eVBYdGxjbkp2Y24xY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTllM1poYkhWbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFYUnNaVVJsZEdGcGJEMTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmh2ZDFWelpVUmxabUYxYkhSQ2RYUjBiMjRnSmlZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRUoxZEhSdmJreHBibXRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MybDZaVDE3VTJsNlpTNWhkWFJ2ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYc29aU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSVGFHOTNWWE5sUkdWbVlYVnNkRUoxZEhSdmJpaG1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxRMmhoYm1kbEtHUmhjSEJRY205d2IzTmxaRlpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0ozVnpaVVJsWm1GMWJIUW5LWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlFuVjBkRzl1VEdsdWF6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHbDBiR1ZFWlhSaGFXeFhjbUZ3Y0dWeVVISnZjSE05ZTNzZ2JXRnlaMmx1UW05MGRHOXRPaUF5TENCdFlYSm5hVzVTYVdkb2REb2dNQ0I5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeENiM2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmxrZEdnOWUwSk1UME5MWDFOSldrVlRMazFCV0gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGeVoybHVUR1ZtZEQxY0ltRjFkRzljSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVdSa2FXNW5VbWxuYUhROWV6UjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhaR1JwYm1kQ2IzUjBiMjA5ZXpKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUkJiR2xuYmoxN1ZFVllWRjlCVEVsSFRpNUZUa1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDE3WTJ4aGMzTnVZVzFsY3lnblkzVnpkRzl0TFhOd1pXNWthVzVuTFdOaGNGOWZiV0Y0Snl3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZGpkWE4wYjIwdGMzQmxibVJwYm1jdFkyRndYMTl0WVhndExYZHBkR2d0WlhKeWIzSXRiV1Z6YzJGblpTYzZJR1Z5Y205eUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtYMWNiaUFnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEVKMWRIUnZia3hwYm10Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFYcGxQWHRUYVhwbExtRjFkRzk5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjI1RGJHbGphejE3S0dVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJzWlVOb1lXNW5aU2hqZFhKeVpXNTBWRzlyWlc1Q1lXeGhibU5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UzUW9KMjFoZUNjcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymt4cGJtcytYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwwSnZlRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeENiM2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqYkdGemMyNWhiV1Z6S0NkamRYTjBiMjB0YzNCbGJtUnBibWN0WTJGd1gxOWtaWE5qY21sd2RHbHZiaWNzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblkzVnpkRzl0TFhOd1pXNWthVzVuTFdOaGNGOWZaR1Z6WTNKcGNIUnBiMjR0TFhkcGRHZ3RaWEp5YjNJdGJXVnpjMkZuWlNjNklHVnljbTl5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1gxY2JpQWdJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQRlJsZUhSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyeHZjajE3VkdWNGRFTnZiRzl5TG5SbGVIUkVaV1poZFd4MGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjbWxoYm5ROWUxUmxlSFJXWVhKcFlXNTBMbUp2WkhsVGJYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjejFjSW1nMlhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZV1JrYVc1blZHOXdQWHN5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaFpHUnBibWRDYjNSMGIyMDlleko5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3Y21Wd2JHRmpaVU52YlcxaFZHOUViM1FvZG1Gc2RXVXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUdOMWMzUnZiVk53Wlc1a2FXNW5RMkZ3VkdWNGRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJwYm5CMWRFeHZaMmxqUlcxd2RIbFRkR0YwWlZSbGVIUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZWR1Y0ZEQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ0lDQWdJRHd2YkdGaVpXdytYRzRnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdQQzgrWEc0Z0lDazdYRzU5WEc1Y2JrTjFjM1J2YlZOd1pXNWthVzVuUTJGd0xuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ0x5b3FYRzRnSUNBcUlGUnlZVzV6WVdOMGFXOXVJSEJoY21GdGMxeHVJQ0FnS2k5Y2JpQWdkSGhRWVhKaGJYTTZJRkJ5YjNCVWVYQmxjeTV2WW1wbFkzUXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ0x5b3FYRzRnSUNBcUlFUnBjM0JzWVhsbFpDQjBhR1VnZEc5clpXNGdibUZ0WlNCamRYSnlaVzUwYkhrZ2RISmhZMnRsWkNCcGJpQmtaWE5qY21sd2RHbHZiaUJ5Wld4aGRHVmtJSFJ2SUhSb1pTQnBibkIxZENCemRHRjBaVnh1SUNBZ0tpOWNiaUFnZEc5clpXNU9ZVzFsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUdOMWNuSmxiblFnZEc5clpXNGdZbUZzWVc1alpTQnZaaUIwYUdVZ2RHOXJaVzVjYmlBZ0lDb3ZYRzRnSUdOMWNuSmxiblJVYjJ0bGJrSmhiR0Z1WTJVNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ1pHRndjQ0J6ZFdkblpYTjBaV1FnWVcxdmRXNTBYRzRnSUNBcUwxeHVJQ0JrWVhCd1VISnZjRzl6WldSV1lXeDFaVG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0x5b3FYRzRnSUNBcUlGUm9aU0J2Y21sbmFXNGdiMllnZEdobElITnBkR1VnWjJWdVpYSmhiR3g1SUhSb1pTQlZVa3hjYmlBZ0lDb3ZYRzRnSUhOcGRHVlBjbWxuYVc0NklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQzhxS2x4dUlDQWdLaUJRWVhKbGJuUWdZMjl0Y0c5dVpXNTBKM01nWTJGc2JHSmhZMnNnWm5WdVkzUnBiMjRnY0dGemMyVmtJR2x1SUc5eVpHVnlJSFJ2SUdkbGRDQjBhR1VnWlhKeWIzSWdkR1Y0ZEZ4dUlDQWdLaTljYmlBZ2NHRnpjMVJvWlVWeWNtOXlWR1Y0ZERvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDOHFLbHh1SUNBZ0tpQk9kVzFpWlhJZ2IyWWdaR1ZqYVcxaGJITmNiaUFnSUNvdlhHNGdJR1JsWTJsdFlXeHpPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBdktpcGNiaUFnSUNvZ1ZYQmtZWFJwYm1jZ2FXNXdkWFFnYzNSaGRHVWdkRzhnWTJoaGJtZHBibWRjYmlBZ0lDb3ZYRzRnSUhObGRFbHVjSFYwUTJoaGJtZGxTVzVRY205bmNtVnpjem9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYm4wN1hHNGlMQ0pwYlhCdmNuUWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYmx4dWFXMXdiM0owSUhzZ2RYTmxTVEU0YmtOdmJuUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5b2IyOXJjeTkxYzJWSk1UaHVRMjl1ZEdWNGRDYzdYRzVwYlhCdmNuUWdleUIxYzJWRGIzQjVWRzlEYkdsd1ltOWhjbVFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5b2IyOXJjeTkxYzJWRGIzQjVWRzlEYkdsd1ltOWhjbVFuTzF4dVhHNXBiWEJ2Y25RZ1FtOTRJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMMkp2ZUNjN1hHNXBiWEJ2Y25RZ1FuVjBkRzl1SUdaeWIyMGdKeTR1THk0dUx5NHVMM1ZwTDJKMWRIUnZiaWM3WEc1cGJYQnZjblFnVkc5dmJIUnBjQ0JtY205dElDY3VMaTh1TGk4dUxpOTFhUzkwYjI5c2RHbHdKenRjYmx4dWFXMXdiM0owSUh0Y2JpQWdSRWxUVUV4QldTeGNiaUFnVkdWNGRFTnZiRzl5TEZ4dUlDQlVaWGgwVm1GeWFXRnVkQ3hjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5amIyNXpkR0Z1ZEhNdlpHVnphV2R1TFhONWMzUmxiU2M3WEc1Y2JtbHRjRzl5ZENCN0lITm9iM0owWlc1QlpHUnlaWE56SUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5MWRHbHNjeTkxZEdsc0p6dGNibWx0Y0c5eWRDQjdJRlJsZUhRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5amIyMXdiMjVsYm5RdGJHbGljbUZ5ZVNjN1hHNWNibU52Ym5OMElFUmxkR1ZqZEdWa1ZHOXJaVzVCWkdSeVpYTnpJRDBnS0hzZ2RHOXJaVzVCWkdSeVpYTnpJSDBwSUQwK0lIdGNiaUFnWTI5dWMzUWdkQ0E5SUhWelpVa3hPRzVEYjI1MFpYaDBLQ2s3WEc0Z0lHTnZibk4wSUZ0amIzQnBaV1FzSUdoaGJtUnNaVU52Y0hsZElEMGdkWE5sUTI5d2VWUnZRMnhwY0dKdllYSmtLQ2s3WEc1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFFtOTRJR1JwYzNCc1lYazllMFJKVTFCTVFWa3VTVTVNU1U1RlgwWk1SVmg5SUdOc1lYTnpUbUZ0WlQxY0ltUmxkR1ZqZEdWa0xYUnZhMlZ1TFdGa1pISmxjM05jSWo1Y2JpQWdJQ0FnSUR4VVpYaDBJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbFRiWDBnWVhNOVhDSm9ObHdpSUdOdmJHOXlQWHRVWlhoMFEyOXNiM0l1ZEdWNGRFUmxabUYxYkhSOVBseHVJQ0FnSUNBZ0lDQjdZQ1I3ZENnbmRHOXJaVzVCWkdSeVpYTnpKeWw5T21COVhHNGdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdJQ0E4VkdWNGRGeHVJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdFVaWGgwVm1GeWFXRnVkQzVpYjJSNVUyMTlYRzRnSUNBZ0lDQWdJR0Z6UFZ3aWFEWmNJbHh1SUNBZ0lDQWdJQ0JqYjJ4dmNqMTdWR1Y0ZEVOdmJHOXlMbkJ5YVcxaGNubEVaV1poZFd4MGZWeHVJQ0FnSUNBZ0lDQnRZWEpuYVc1TVpXWjBQWHN5ZlZ4dUlDQWdJQ0FnSUNCdFlYSm5hVzVTYVdkb2REMTdNbjFjYmlBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnZTNOb2IzSjBaVzVCWkdSeVpYTnpLSFJ2YTJWdVFXUmtjbVZ6Y3lsOVhHNGdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdJQ0E4Vkc5dmJIUnBjRnh1SUNBZ0lDQWdJQ0J3YjNOcGRHbHZiajFjSW1KdmRIUnZiVndpWEc0Z0lDQWdJQ0FnSUhScGRHeGxQWHRqYjNCcFpXUWdQeUIwS0NkamIzQnBaV1JGZUdOc1lXMWhkR2x2YmljcElEb2dkQ2duWTI5d2VWUnZRMnhwY0dKdllYSmtKeWw5WEc0Z0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUR4Q2RYUjBiMjVjYmlBZ0lDQWdJQ0FnSUNCMGVYQmxQVndpYkdsdWExd2lYRzRnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aVpHVjBaV04wWldRdGRHOXJaVzR0WVdSa2NtVnpjMTlmWTI5d2VTMXNhVzVyWENKY2JpQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYc29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a2JHVkRiM0I1S0hSdmEyVnVRV1JrY21WemN5azdYRzRnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJRHhwSUdOc1lYTnpUbUZ0WlQxY0ltWmhJR1poTFdOdmNIbGNJaUF2UGx4dUlDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JpQWdJQ0FnSUR3dlZHOXZiSFJwY0Q1Y2JpQWdJQ0E4TDBKdmVENWNiaUFnS1R0Y2JuMDdYRzVjYmtSbGRHVmpkR1ZrVkc5clpXNUJaR1J5WlhOekxuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ2RHOXJaVzVCWkdSeVpYTnpPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1JHVjBaV04wWldSVWIydGxia0ZrWkhKbGMzTTdYRzRpTENKcGJYQnZjblFnVW1WaFkzUXNJSHNnZFhObFUzUmhkR1VnZlNCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1WEc1cGJYQnZjblFnZXlCMWMyVkpNVGh1UTI5dWRHVjRkQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJodmIydHpMM1Z6WlVreE9HNURiMjUwWlhoMEp6dGNibHh1YVcxd2IzSjBJRUp2ZUNCbWNtOXRJQ2N1TGk4dUxpOHVMaTkxYVM5aWIzZ25PMXh1YVcxd2IzSjBJRUoxZEhSdmJpQm1jbTl0SUNjdUxpOHVMaTh1TGk5MWFTOWlkWFIwYjI0bk8xeHVhVzF3YjNKMElIdGNiaUFnUkVsVFVFeEJXU3hjYmlBZ1JtOXVkRmRsYVdkb2RDeGNiaUFnVkdWNGRGWmhjbWxoYm5Rc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZZMjl1YzNSaGJuUnpMMlJsYzJsbmJpMXplWE4wWlcwbk8xeHVhVzF3YjNKMElIc2dWR1Y0ZENCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJOdmJYQnZibVZ1ZEMxc2FXSnlZWEo1Snp0Y2JseHVZMjl1YzNRZ1RsVk5Ra1ZTWDA5R1gwRkhSMUpGUjBGVVQxSlRYMVJQWDBSSlUxQk1RVmtnUFNBeU8xeHVYRzVqYjI1emRDQkVaWFJsWTNSbFpGUnZhMlZ1UVdkbmNtVm5ZWFJ2Y25NZ1BTQW9leUJoWjJkeVpXZGhkRzl5Y3lCOUtTQTlQaUI3WEc0Z0lHTnZibk4wSUhRZ1BTQjFjMlZKTVRodVEyOXVkR1Y0ZENncE8xeHVJQ0JqYjI1emRDQnVkVzFQWmtocFpHUmxia0ZuWjNKbFoyRjBiM0p6SUQxY2JpQWdJQ0J3WVhKelpVbHVkQ2hoWjJkeVpXZGhkRzl5Y3k1c1pXNW5kR2dzSURFd0tTQXRJRTVWVFVKRlVsOVBSbDlCUjBkU1JVZEJWRTlTVTE5VVQxOUVTVk5RVEVGWk8xeHVJQ0JqYjI1emRDQmJaR2x6Y0d4aGVVMXZjbVVzSUhObGRFUnBjM0JzWVhsTmIzSmxYU0E5SUhWelpWTjBZWFJsS0daaGJITmxLVHRjYmx4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4Q2IzZ2daR2x6Y0d4aGVUMTdSRWxUVUV4QldTNUpUa3hKVGtWZlJreEZXSDBnWTJ4aGMzTk9ZVzFsUFZ3aVpHVjBaV04wWldRdGRHOXJaVzR0WVdkbmNtVm5ZWFJ2Y25OY0lqNWNiaUFnSUNBZ0lEeFVaWGgwSUhaaGNtbGhiblE5ZTFSbGVIUldZWEpwWVc1MExtSnZaSGxUYlgwZ1lYTTlYQ0pvTmx3aUlHWnZiblJYWldsbmFIUTllMFp2Ym5SWFpXbG5hSFF1VG05eWJXRnNmVDVjYmlBZ0lDQWdJQ0FnZTNRb0oyWnliMjFVYjJ0bGJreHBjM1J6Snl3Z1cxeHVJQ0FnSUNBZ0lDQWdJRzUxYlU5bVNHbGtaR1Z1UVdkbmNtVm5ZWFJ2Y25NZ1BpQXdJQ1ltSUNGa2FYTndiR0Y1VFc5eVpTQS9JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lEeFVaWGgwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbFRiWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZWE05WENKb05sd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZiblJYWldsbmFIUTllMFp2Ym5SWFpXbG5hSFF1VG05eWJXRnNmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnJaWGs5WENKa1pYUmxZM1JsWkMxMGIydGxiaTFoWjJkeVoyRjBiM0p6TFhkcGRHZ3RiVzl5WlZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHRnSkh0aFoyZHlaV2RoZEc5eWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNXpiR2xqWlNnd0xDQk9WVTFDUlZKZlQwWmZRVWRIVWtWSFFWUlBVbE5mVkU5ZlJFbFRVRXhCV1NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWFtOXBiaWduTENBbktYMWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThRblYwZEc5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVDFjSW14cGJtdGNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW1SbGRHVmpkR1ZrTFhSdmEyVnVMV0ZuWjNKbFoyRjBiM0p6WDE5c2FXNXJYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2YmtOc2FXTnJQWHNvS1NBOVBpQnpaWFJFYVhOd2JHRjVUVzl5WlNoMGNuVmxLWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhrOVhDSmtaWFJsWTNSbFpDMTBiMnRsYmkxaFoyZHlaMkYwYjNKekxXeHBibXRjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0ozQnNkWE5ZVFc5eVpTY3NJRnR1ZFcxUFpraHBaR1JsYmtGblozSmxaMkYwYjNKelhTbDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZRblYwZEc5dVBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5VVpYaDBQbHh1SUNBZ0lDQWdJQ0FnSUNrZ09pQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdFVaWGgwVm1GeWFXRnVkQzVpYjJSNVUyMTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnpQVndpYURaY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIyNTBWMlZwWjJoMFBYdEdiMjUwVjJWcFoyaDBMazV2Y20xaGJIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2EyVjVQVndpWkdWMFpXTjBaV1F0ZEc5clpXNHRZV2RuY21kaGRHOXljeTEzYVhSb2IzVjBMVzF2Y21WY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3WUNSN1lXZG5jbVZuWVhSdmNuTXVhbTlwYmlnbkxDQW5LWDB1WUgxY2JpQWdJQ0FnSUNBZ0lDQWdJRHd2VkdWNGRENWNiaUFnSUNBZ0lDQWdJQ0FwTEZ4dUlDQWdJQ0FnSUNCZEtYMWNiaUFnSUNBZ0lEd3ZWR1Y0ZEQ1Y2JpQWdJQ0E4TDBKdmVENWNiaUFnS1R0Y2JuMDdYRzVjYmtSbGRHVmpkR1ZrVkc5clpXNUJaMmR5WldkaGRHOXljeTV3Y205d1ZIbHdaWE1nUFNCN1hHNGdJR0ZuWjNKbFoyRjBiM0p6T2lCUWNtOXdWSGx3WlhNdVlYSnlZWGt1YVhOU1pYRjFhWEpsWkN4Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRVJsZEdWamRHVmtWRzlyWlc1QloyZHlaV2RoZEc5eWN6dGNiaUlzSW1sdGNHOXlkQ0JTWldGamRDQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUhzZ2RYTmxVMlZzWldOMGIzSWdmU0JtY205dElDZHlaV0ZqZEMxeVpXUjFlQ2M3WEc1Y2JtbHRjRzl5ZENCQ2IzZ2dabkp2YlNBbkxpNHZMaTR2TGk0dmRXa3ZZbTk0Snp0Y2JtbHRjRzl5ZENCSlpHVnVkR2xqYjI0Z1puSnZiU0FuTGk0dkxpNHZMaTR2ZFdrdmFXUmxiblJwWTI5dUp6dGNibWx0Y0c5eWRDQkVaWFJsWTNSbFpGUnZhMlZ1Vm1Gc2RXVnpJR1p5YjIwZ0p5NHVMMlJsZEdWamRHVmtMWFJ2YTJWdUxYWmhiSFZsY3k5a1pYUmxZM1JsWkMxMGIydGxiaTEyWVd4MVpYTW5PMXh1YVcxd2IzSjBJRVJsZEdWamRHVmtWRzlyWlc1QlpHUnlaWE56SUdaeWIyMGdKeTR1TDJSbGRHVmpkR1ZrTFhSdmEyVnVMV0ZrWkhKbGMzTXZaR1YwWldOMFpXUXRkRzlyWlc0dFlXUmtjbVZ6Y3ljN1hHNXBiWEJ2Y25RZ1JHVjBaV04wWldSVWIydGxia0ZuWjNKbFoyRjBiM0p6SUdaeWIyMGdKeTR1TDJSbGRHVmpkR1ZrTFhSdmEyVnVMV0ZuWjNKbFoyRjBiM0p6TDJSbGRHVmpkR1ZrTFhSdmEyVnVMV0ZuWjNKbFoyRjBiM0p6Snp0Y2JtbHRjRzl5ZENCN0lFUkpVMUJNUVZrZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOW9aV3h3WlhKekwyTnZibk4wWVc1MGN5OWtaWE5wWjI0dGMzbHpkR1Z0Snp0Y2JtbHRjRzl5ZENCN0lHZGxkRlJ2YTJWdVRHbHpkQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNObGJHVmpkRzl5Y3ljN1hHNWNibU52Ym5OMElFUmxkR1ZqZEdWa1ZHOXJaVzVFWlhSaGFXeHpJRDBnS0h0Y2JpQWdkRzlyWlc0c1hHNGdJR2hoYm1Sc1pWUnZhMlZ1VTJWc1pXTjBhVzl1TEZ4dUlDQjBiMnRsYm5OTWFYTjBSR1YwWldOMFpXUXNYRzU5S1NBOVBpQjdYRzRnSUdOdmJuTjBJSFJ2YTJWdVRHbHpkQ0E5SUhWelpWTmxiR1ZqZEc5eUtHZGxkRlJ2YTJWdVRHbHpkQ2s3WEc0Z0lHTnZibk4wSUhSdmEyVnVSR0YwWVNBOUlIUnZhMlZ1VEdsemRGdDBiMnRsYmk1aFpHUnlaWE56UHk1MGIweHZkMlZ5UTJGelpTZ3BYVHRjYmx4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4Q2IzaGNiaUFnSUNBZ0lHUnBjM0JzWVhrOWUwUkpVMUJNUVZrdVJreEZXSDFjYmlBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW1SbGRHVmpkR1ZrTFhSdmEyVnVMV1JsZEdGcGJITmNJbHh1SUNBZ0lDQWdiV0Z5WjJsdVFtOTBkRzl0UFhzMGZWeHVJQ0FnSUQ1Y2JpQWdJQ0FnSUR4SlpHVnVkR2xqYjI1Y2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2laR1YwWldOMFpXUXRkRzlyWlc0dFpHVjBZV2xzYzE5ZmFXUmxiblJwWTI5dVhDSmNiaUFnSUNBZ0lDQWdZV1JrY21WemN6MTdkRzlyWlc0dVlXUmtjbVZ6YzMxY2JpQWdJQ0FnSUNBZ1pHbGhiV1YwWlhJOWV6UXdmVnh1SUNBZ0lDQWdMejVjYmlBZ0lDQWdJRHhDYjNoY2JpQWdJQ0FnSUNBZ1pHbHpjR3hoZVQxN1JFbFRVRXhCV1M1SFVrbEVmVnh1SUNBZ0lDQWdJQ0J0WVhKbmFXNU1aV1owUFhzeWZWeHVJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0prWlhSbFkzUmxaQzEwYjJ0bGJpMWtaWFJoYVd4elgxOWtZWFJoWENKY2JpQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ1BFUmxkR1ZqZEdWa1ZHOXJaVzVXWVd4MVpYTmNiaUFnSUNBZ0lDQWdJQ0IwYjJ0bGJqMTdkRzlyWlc1OVhHNGdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bFZHOXJaVzVUWld4bFkzUnBiMjQ5ZTJoaGJtUnNaVlJ2YTJWdVUyVnNaV04wYVc5dWZWeHVJQ0FnSUNBZ0lDQWdJSFJ2YTJWdWMweHBjM1JFWlhSbFkzUmxaRDE3ZEc5clpXNXpUR2x6ZEVSbGRHVmpkR1ZrZlZ4dUlDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQThSR1YwWldOMFpXUlViMnRsYmtGa1pISmxjM01nZEc5clpXNUJaR1J5WlhOelBYdDBiMnRsYmk1aFpHUnlaWE56ZlNBdlBseHVJQ0FnSUNBZ0lDQjdkRzlyWlc1RVlYUmhQeTVoWjJkeVpXZGhkRzl5Y3k1c1pXNW5kR2dnUGlBd0lDWW1JQ2hjYmlBZ0lDQWdJQ0FnSUNBOFJHVjBaV04wWldSVWIydGxia0ZuWjNKbFoyRjBiM0p6SUdGblozSmxaMkYwYjNKelBYdDBiMnRsYmtSaGRHRS9MbUZuWjNKbFoyRjBiM0p6ZlNBdlBseHVJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnUEM5Q2IzZytYRzRnSUNrN1hHNTlPMXh1WEc1RVpYUmxZM1JsWkZSdmEyVnVSR1YwWVdsc2N5NXdjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lIUnZhMlZ1T2lCUWNtOXdWSGx3WlhNdWMyaGhjR1VvZTF4dUlDQWdJR0ZrWkhKbGMzTTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQmtaV05wYldGc2N6b2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpeGNiaUFnSUNCemVXMWliMnc2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdhV052YmxWeWJEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCaFoyZHlaV2RoZEc5eWN6b2dVSEp2Y0ZSNWNHVnpMbUZ5Y21GNUxGeHVJQ0I5S1N4Y2JpQWdhR0Z1Wkd4bFZHOXJaVzVUWld4bFkzUnBiMjQ2SUZCeWIzQlVlWEJsY3k1bWRXNWpMbWx6VW1WeGRXbHlaV1FzWEc0Z0lIUnZhMlZ1YzB4cGMzUkVaWFJsWTNSbFpEb2dVSEp2Y0ZSNWNHVnpMbTlpYW1WamRDeGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVSbGRHVmpkR1ZrVkc5clpXNUVaWFJoYVd4ek8xeHVJaXdpYVcxd2IzSjBJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnWTJ4aGMzTk9ZVzFsY3lCbWNtOXRJQ2RqYkdGemMyNWhiV1Z6Snp0Y2JtbHRjRzl5ZENCN0lIVnpaVWt4T0c1RGIyNTBaWGgwSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmFHOXZhM012ZFhObFNURTRia052Ym5SbGVIUW5PMXh1WEc1cGJYQnZjblFnVUc5d2IzWmxjaUJtY205dElDY3VMaTh1TGk4dUxpOTFhUzl3YjNCdmRtVnlKenRjYm1sdGNHOXlkQ0JDZFhSMGIyNGdabkp2YlNBbkxpNHZMaTR2TGk0dmRXa3ZZblYwZEc5dUp6dGNibWx0Y0c5eWRDQjdJRlJsZUhSV1lYSnBZVzUwSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5amIyNXpkR0Z1ZEhNdlpHVnphV2R1TFhONWMzUmxiU2M3WEc1cGJYQnZjblFnZXlCVVpYaDBJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZZMjl0Y0c5dVpXNTBMV3hwWW5KaGNua25PMXh1WEc1amIyNXpkQ0JFWlhSbFkzUmxaRlJ2YTJWdVNXZHViM0psWkZCdmNHOTJaWElnUFNBb2UxeHVJQ0J3WVhKMGFXRnNiSGxKWjI1dmNtVkVaWFJsWTNSbFpGUnZhMlZ1Y3l4Y2JpQWdiMjVEWVc1alpXeEpaMjV2Y21Vc1hHNGdJR2hoYm1Sc1pVTnNaV0Z5Vkc5clpXNXpVMlZzWldOMGFXOXVMRnh1ZlNrZ1BUNGdlMXh1SUNCamIyNXpkQ0IwSUQwZ2RYTmxTVEU0YmtOdmJuUmxlSFFvS1R0Y2JseHVJQ0JqYjI1emRDQm1iMjkwWlhJZ1BTQW9YRzRnSUNBZ1BENWNiaUFnSUNBZ0lEeENkWFIwYjI1Y2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2laR1YwWldOMFpXUXRkRzlyWlc0dGFXZHViM0psWkMxd2IzQnZkbVZ5WDE5cFoyNXZjbVV0WW5WMGRHOXVYQ0pjYmlBZ0lDQWdJQ0FnZEhsd1pUMWNJbk5sWTI5dVpHRnllVndpWEc0Z0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZTI5dVEyRnVZMlZzU1dkdWIzSmxmVnh1SUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0I3ZENnblkyRnVZMlZzSnlsOVhHNGdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JpQWdJQ0FnSUR4Q2RYUjBiMjVjYmlBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aVpHVjBaV04wWldRdGRHOXJaVzR0YVdkdWIzSmxaQzF3YjNCdmRtVnlYMTlwYlhCdmNuUXRZblYwZEc5dVhDSmNiaUFnSUNBZ0lDQWdkSGx3WlQxY0luQnlhVzFoY25sY0lseHVJQ0FnSUNBZ0lDQnZia05zYVdOclBYdG9ZVzVrYkdWRGJHVmhjbFJ2YTJWdWMxTmxiR1ZqZEdsdmJuMWNiaUFnSUNBZ0lENWNiaUFnSUNBZ0lDQWdlM1FvSjJOdmJtWnBjbTBuS1gxY2JpQWdJQ0FnSUR3dlFuVjBkRzl1UGx4dUlDQWdJRHd2UGx4dUlDQXBPMXh1WEc0Z0lISmxkSFZ5YmlBb1hHNGdJQ0FnUEZCdmNHOTJaWEpjYmlBZ0lDQWdJSFJwZEd4bFBYdGNiaUFnSUNBZ0lDQWdjR0Z5ZEdsaGJHeDVTV2R1YjNKbFJHVjBaV04wWldSVWIydGxibk5jYmlBZ0lDQWdJQ0FnSUNBL0lIUW9KMmx0Y0c5eWRGTmxiR1ZqZEdWa1ZHOXJaVzV6SnlsY2JpQWdJQ0FnSUNBZ0lDQTZJSFFvSjJGeVpWbHZkVk4xY21VbktWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGpiR0Z6YzA1aGJXVnpLQ2RrWlhSbFkzUmxaQzEwYjJ0bGJpMXBaMjV2Y21Wa0xYQnZjRzkyWlhJbkxDQjdYRzRnSUNBZ0lDQWdJQ2RrWlhSbFkzUmxaQzEwYjJ0bGJpMXBaMjV2Y21Wa0xYQnZjRzkyWlhJdExXbHRjRzl5ZENjNklIQmhjblJwWVd4c2VVbG5ibTl5WlVSbGRHVmpkR1ZrVkc5clpXNXpMRnh1SUNBZ0lDQWdJQ0FuWkdWMFpXTjBaV1F0ZEc5clpXNHRhV2R1YjNKbFpDMXdiM0J2ZG1WeUxTMXBaMjV2Y21Vbk9seHVJQ0FnSUNBZ0lDQWdJQ0Z3WVhKMGFXRnNiSGxKWjI1dmNtVkVaWFJsWTNSbFpGUnZhMlZ1Y3l4Y2JpQWdJQ0FnSUgwcGZWeHVJQ0FnSUNBZ1ptOXZkR1Z5UFh0bWIyOTBaWEo5WEc0Z0lDQWdQbHh1SUNBZ0lDQWdQRlJsZUhSY2JpQWdJQ0FnSUNBZ2RtRnlhV0Z1ZEQxN1ZHVjRkRlpoY21saGJuUXVZbTlrZVZOdGZWeHVJQ0FnSUNBZ0lDQmhjejFjSW1nMlhDSmNiaUFnSUNBZ0lDQWdiV0Z5WjJsdVZHOXdQWHN3ZlZ4dUlDQWdJQ0FnSUNCdFlYSm5hVzVTYVdkb2REMTdOWDFjYmlBZ0lDQWdJQ0FnYldGeVoybHVRbTkwZEc5dFBYczNmVnh1SUNBZ0lDQWdJQ0J0WVhKbmFXNU1aV1owUFhzMWZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQjdjR0Z5ZEdsaGJHeDVTV2R1YjNKbFJHVjBaV04wWldSVWIydGxibk5jYmlBZ0lDQWdJQ0FnSUNBL0lIUW9KMmx0Y0c5eWRGTmxiR1ZqZEdWa1ZHOXJaVzV6UkdWelkzSnBjSFJwYjI0bktWeHVJQ0FnSUNBZ0lDQWdJRG9nZENnbmFXZHViM0psVkc5clpXNVhZWEp1YVc1bkp5bDlYRzRnSUNBZ0lDQThMMVJsZUhRK1hHNGdJQ0FnUEM5UWIzQnZkbVZ5UGx4dUlDQXBPMXh1ZlR0Y2JseHVSR1YwWldOMFpXUlViMnRsYmtsbmJtOXlaV1JRYjNCdmRtVnlMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdjR0Z5ZEdsaGJHeDVTV2R1YjNKbFJHVjBaV04wWldSVWIydGxibk02SUZCeWIzQlVlWEJsY3k1aWIyOXNMbWx6VW1WeGRXbHlaV1FzWEc0Z0lHOXVRMkZ1WTJWc1NXZHViM0psT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQm9ZVzVrYkdWRGJHVmhjbFJ2YTJWdWMxTmxiR1ZqZEdsdmJqb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVSbGRHVmpkR1ZrVkc5clpXNUpaMjV2Y21Wa1VHOXdiM1psY2p0Y2JpSXNJbWx0Y0c5eWRDQlNaV0ZqZEN3Z2V5QjFjMlZEYjI1MFpYaDBJSDBnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQjdJSFZ6WlZObGJHVmpkRzl5SUgwZ1puSnZiU0FuY21WaFkzUXRjbVZrZFhnbk8xeHVYRzVwYlhCdmNuUWdleUIxYzJWSk1UaHVRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmh2YjJ0ekwzVnpaVWt4T0c1RGIyNTBaWGgwSnp0Y2JtbHRjRzl5ZENCN0lFMWxkR0ZOWlhSeWFXTnpRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMk52Ym5SbGVIUnpMMjFsZEdGdFpYUnlhV056Snp0Y2JtbHRjRzl5ZENCN1hHNGdJRTFsZEdGTlpYUnlhV056UlhabGJuUkRZWFJsWjI5eWVTeGNiaUFnVFdWMFlVMWxkSEpwWTNORmRtVnVkRTVoYldVc1hHNGdJRTFsZEdGTlpYUnlhV056Vkc5clpXNUZkbVZ1ZEZOdmRYSmpaU3hjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OXRaWFJoYldWMGNtbGpjeWM3WEc1cGJYQnZjblFnZTF4dUlDQm5aWFJEZFhKeVpXNTBRMmhoYVc1SlpDeGNiaUFnWjJWMFJHVjBaV04wWldSVWIydGxibk5KYmtOMWNuSmxiblJPWlhSM2IzSnJMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5elpXeGxZM1J2Y25Nbk8xeHVYRzVwYlhCdmNuUWdVRzl3YjNabGNpQm1jbTl0SUNjdUxpOHVMaTh1TGk5MWFTOXdiM0J2ZG1WeUp6dGNibWx0Y0c5eWRDQkNiM2dnWm5KdmJTQW5MaTR2TGk0dkxpNHZkV2t2WW05NEp6dGNibWx0Y0c5eWRDQkNkWFIwYjI0Z1puSnZiU0FuTGk0dkxpNHZMaTR2ZFdrdlluVjBkRzl1Snp0Y2JtbHRjRzl5ZENCRVpYUmxZM1JsWkZSdmEyVnVSR1YwWVdsc2N5Qm1jbTl0SUNjdUxpOWtaWFJsWTNSbFpDMTBiMnRsYmkxa1pYUmhhV3h6TDJSbGRHVmpkR1ZrTFhSdmEyVnVMV1JsZEdGcGJITW5PMXh1WEc1amIyNXpkQ0JFWlhSbFkzUmxaRlJ2YTJWdVUyVnNaV04wYVc5dVVHOXdiM1psY2lBOUlDaDdYRzRnSUhSdmEyVnVjMHhwYzNSRVpYUmxZM1JsWkN4Y2JpQWdhR0Z1Wkd4bFZHOXJaVzVUWld4bFkzUnBiMjRzWEc0Z0lHOXVTVzF3YjNKMExGeHVJQ0J2YmtsbmJtOXlaVUZzYkN4Y2JpQWdjMlYwVTJodmQwUmxkR1ZqZEdWa1ZHOXJaVzV6TEZ4dUlDQnpiM0owYVc1blFtRnpaV1JQYmxSdmEyVnVVMlZzWldOMGFXOXVMRnh1ZlNrZ1BUNGdlMXh1SUNCamIyNXpkQ0IwSUQwZ2RYTmxTVEU0YmtOdmJuUmxlSFFvS1R0Y2JpQWdZMjl1YzNRZ2RISmhZMnRGZG1WdWRDQTlJSFZ6WlVOdmJuUmxlSFFvVFdWMFlVMWxkSEpwWTNORGIyNTBaWGgwS1R0Y2JseHVJQ0JqYjI1emRDQmphR0ZwYmtsa0lEMGdkWE5sVTJWc1pXTjBiM0lvWjJWMFEzVnljbVZ1ZEVOb1lXbHVTV1FwTzF4dVhHNGdJR052Ym5OMElHUmxkR1ZqZEdWa1ZHOXJaVzV6SUQwZ2RYTmxVMlZzWldOMGIzSW9aMlYwUkdWMFpXTjBaV1JVYjJ0bGJuTkpia04xY25KbGJuUk9aWFIzYjNKcktUdGNiaUFnWTI5dWMzUWdleUJ6Wld4bFkzUmxaRG9nYzJWc1pXTjBaV1JVYjJ0bGJuTWdQU0JiWFNCOUlEMWNiaUFnSUNCemIzSjBhVzVuUW1GelpXUlBibFJ2YTJWdVUyVnNaV04wYVc5dUtIUnZhMlZ1YzB4cGMzUkVaWFJsWTNSbFpDazdYRzRnSUdOdmJuTjBJRzUxYlU5bVZHOXJaVzV6U1cxd2IzSjBhVzVuSUQxY2JpQWdJQ0J6Wld4bFkzUmxaRlJ2YTJWdWN5NXNaVzVuZEdnZ1BUMDlJR1JsZEdWamRHVmtWRzlyWlc1ekxteGxibWQwYUZ4dUlDQWdJQ0FnUHlCZ1FXeHNZRnh1SUNBZ0lDQWdPaUJnS0NSN2MyVnNaV04wWldSVWIydGxibk11YkdWdVozUm9mU2xnTzF4dVhHNGdJR052Ym5OMElHOXVRMnh2YzJVZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnYzJWMFUyaHZkMFJsZEdWamRHVmtWRzlyWlc1ektHWmhiSE5sS1R0Y2JpQWdJQ0JqYjI1emRDQmxkbVZ1ZEZSdmEyVnVjMFJsZEdGcGJITWdQU0JrWlhSbFkzUmxaRlJ2YTJWdWN5NXRZWEFvWEc0Z0lDQWdJQ0FvZXlCaFpHUnlaWE56TENCemVXMWliMndnZlNrZ1BUNGdZQ1I3YzNsdFltOXNmU0F0SUNSN1lXUmtjbVZ6YzMxZ0xGeHVJQ0FnSUNrN1hHNGdJQ0FnZEhKaFkydEZkbVZ1ZENoN1hHNGdJQ0FnSUNCbGRtVnVkRG9nVFdWMFlVMWxkSEpwWTNORmRtVnVkRTVoYldVdVZHOXJaVzVKYlhCdmNuUkRZVzVqWld4bFpDeGNiaUFnSUNBZ0lHTmhkR1ZuYjNKNU9pQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rdVYyRnNiR1YwTEZ4dUlDQWdJQ0FnY0hKdmNHVnlkR2xsY3pvZ2UxeHVJQ0FnSUNBZ0lDQnpiM1Z5WTJWZlkyOXVibVZqZEdsdmJsOXRaWFJvYjJRNklFMWxkR0ZOWlhSeWFXTnpWRzlyWlc1RmRtVnVkRk52ZFhKalpTNUVaWFJsWTNSbFpDeGNiaUFnSUNBZ0lDQWdZMmhoYVc1ZmFXUTZJR05vWVdsdVNXUXNYRzRnSUNBZ0lDQWdJSFJ2YTJWdWN6b2daWFpsYm5SVWIydGxibk5FWlhSaGFXeHpMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQjlLVHRjYmlBZ2ZUdGNibHh1SUNCamIyNXpkQ0JtYjI5MFpYSWdQU0FvWEc0Z0lDQWdQRDVjYmlBZ0lDQWdJRHhDZFhSMGIyNWNiaUFnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQVndpWkdWMFpXTjBaV1F0ZEc5clpXNHRjMlZzWldOMGFXOXVMWEJ2Y0c5MlpYSmZYMmxuYm05eVpTMWlkWFIwYjI1Y0lseHVJQ0FnSUNBZ0lDQjBlWEJsUFZ3aWMyVmpiMjVrWVhKNVhDSmNiaUFnSUNBZ0lDQWdiMjVEYkdsamF6MTdLQ2tnUFQ0Z2IyNUpaMjV2Y21WQmJHd29LWDFjYmlBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnZTNRb0oybG5ibTl5WlVGc2JDY3BmVnh1SUNBZ0lDQWdQQzlDZFhSMGIyNCtYRzRnSUNBZ0lDQThRblYwZEc5dVhHNGdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbVJsZEdWamRHVmtMWFJ2YTJWdUxYTmxiR1ZqZEdsdmJpMXdiM0J2ZG1WeVgxOXBiWEJ2Y25RdFluVjBkRzl1WENKY2JpQWdJQ0FnSUNBZ2RIbHdaVDFjSW5CeWFXMWhjbmxjSWx4dUlDQWdJQ0FnSUNCdmJrTnNhV05yUFh0dmJrbHRjRzl5ZEgxY2JpQWdJQ0FnSUNBZ1pHbHpZV0pzWldROWUzTmxiR1ZqZEdWa1ZHOXJaVzV6TG14bGJtZDBhQ0E5UFQwZ01IMWNiaUFnSUNBZ0lENWNiaUFnSUNBZ0lDQWdlM1FvSjJsdGNHOXlkRmRwZEdoRGIzVnVkQ2NzSUZ0dWRXMVBabFJ2YTJWdWMwbHRjRzl5ZEdsdVoxMHBmVnh1SUNBZ0lDQWdQQzlDZFhSMGIyNCtYRzRnSUNBZ1BDOCtYRzRnSUNrN1hHNWNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQThVRzl3YjNabGNseHVJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2laR1YwWldOMFpXUXRkRzlyWlc0dGMyVnNaV04wYVc5dUxYQnZjRzkyWlhKY0lseHVJQ0FnSUNBZ2RHbDBiR1U5ZTF4dUlDQWdJQ0FnSUNCa1pYUmxZM1JsWkZSdmEyVnVjeTVzWlc1bmRHZ2dQVDA5SURGY2JpQWdJQ0FnSUNBZ0lDQS9JSFFvSjNSdmEyVnVSbTkxYm1SVWFYUnNaU2NwWEc0Z0lDQWdJQ0FnSUNBZ09pQjBLQ2QwYjJ0bGJuTkdiM1Z1WkZScGRHeGxKeXdnVzJSbGRHVmpkR1ZrVkc5clpXNXpMbXhsYm1kMGFGMHBYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnZia05zYjNObFBYdHZia05zYjNObGZWeHVJQ0FnSUNBZ1ptOXZkR1Z5UFh0bWIyOTBaWEo5WEc0Z0lDQWdQbHh1SUNBZ0lDQWdQRUp2ZUNCdFlYSm5hVzQ5ZXpOOVBseHVJQ0FnSUNBZ0lDQjdaR1YwWldOMFpXUlViMnRsYm5NdWJXRndLQ2gwYjJ0bGJpd2dhVzVrWlhncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdQRVJsZEdWamRHVmtWRzlyWlc1RVpYUmhhV3h6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3RsZVQxN2FXNWtaWGg5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2YTJWdVBYdDBiMnRsYm4xY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxWRzlyWlc1VFpXeGxZM1JwYjI0OWUyaGhibVJzWlZSdmEyVnVVMlZzWldOMGFXOXVmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiMnRsYm5OTWFYTjBSR1YwWldOMFpXUTllM1J2YTJWdWMweHBjM1JFWlhSbFkzUmxaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZTbDlYRzRnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0E4TDFCdmNHOTJaWEkrWEc0Z0lDazdYRzU5TzF4dVhHNUVaWFJsWTNSbFpGUnZhMlZ1VTJWc1pXTjBhVzl1VUc5d2IzWmxjaTV3Y205d1ZIbHdaWE1nUFNCN1hHNGdJSFJ2YTJWdWMweHBjM1JFWlhSbFkzUmxaRG9nVUhKdmNGUjVjR1Z6TG05aWFtVmpkQ3hjYmlBZ2FHRnVaR3hsVkc5clpXNVRaV3hsWTNScGIyNDZJRkJ5YjNCVWVYQmxjeTVtZFc1akxtbHpVbVZ4ZFdseVpXUXNYRzRnSUc5dVNXZHViM0psUVd4c09pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0J2YmtsdGNHOXlkRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ2MyVjBVMmh2ZDBSbGRHVmpkR1ZrVkc5clpXNXpPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNCemIzSjBhVzVuUW1GelpXUlBibFJ2YTJWdVUyVnNaV04wYVc5dU9pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnUkdWMFpXTjBaV1JVYjJ0bGJsTmxiR1ZqZEdsdmJsQnZjRzkyWlhJN1hHNGlMQ0pwYlhCdmNuUWdVbVZoWTNRc0lIc2dkWE5sUldabVpXTjBMQ0IxYzJWVGRHRjBaU0I5SUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdleUIxYzJWVFpXeGxZM1J2Y2lCOUlHWnliMjBnSjNKbFlXTjBMWEpsWkhWNEp6dGNibHh1YVcxd2IzSjBJRUp2ZUNCbWNtOXRJQ2N1TGk4dUxpOHVMaTkxYVM5aWIzZ25PMXh1YVcxd2IzSjBJRU5vWldOclFtOTRJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMMk5vWldOckxXSnZlQ2M3WEc1Y2JtbHRjRzl5ZENCN1hHNGdJRVJKVTFCTVFWa3NYRzRnSUZSbGVIUkRiMnh2Y2l4Y2JpQWdWR1Y0ZEZaaGNtbGhiblFzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyaGxiSEJsY25NdlkyOXVjM1JoYm5SekwyUmxjMmxuYmkxemVYTjBaVzBuTzF4dWFXMXdiM0owSUhzZ2RYTmxWRzlyWlc1VWNtRmphMlZ5SUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmFHOXZhM012ZFhObFZHOXJaVzVVY21GamEyVnlKenRjYm1sdGNHOXlkQ0I3SUhWelpWUnZhMlZ1Um1saGRFRnRiM1Z1ZENCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyaHZiMnR6TDNWelpWUnZhMlZ1Um1saGRFRnRiM1Z1ZENjN1hHNXBiWEJ2Y25RZ2V5Qm5aWFJWYzJWRGRYSnlaVzVqZVZKaGRHVkRhR1ZqYXlCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzTmxiR1ZqZEc5eWN5YzdYRzVwYlhCdmNuUWdleUJVWlhoMElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dlkyOXRjRzl1Wlc1MExXeHBZbkpoY25rbk8xeHVYRzVqYjI1emRDQkVaWFJsWTNSbFpGUnZhMlZ1Vm1Gc2RXVnpJRDBnS0h0Y2JpQWdkRzlyWlc0c1hHNGdJR2hoYm1Sc1pWUnZhMlZ1VTJWc1pXTjBhVzl1TEZ4dUlDQjBiMnRsYm5OTWFYTjBSR1YwWldOMFpXUXNYRzU5S1NBOVBpQjdYRzRnSUdOdmJuTjBJRnQwYjJ0bGJsTmxiR1ZqZEdsdmJpd2djMlYwVkc5clpXNVRaV3hsWTNScGIyNWRJRDBnZFhObFUzUmhkR1VvS0NrZ1BUNGdlMXh1SUNBZ0lISmxkSFZ5YmlCMGIydGxibk5NYVhOMFJHVjBaV04wWldSYmRHOXJaVzR1WVdSa2NtVnpjMTAvTG5ObGJHVmpkR1ZrTzF4dUlDQjlLVHRjYmx4dUlDQmpiMjV6ZENCN0lIUnZhMlZ1YzFkcGRHaENZV3hoYm1ObGN5QjlJRDBnZFhObFZHOXJaVzVVY21GamEyVnlLRnQwYjJ0bGJsMHBPMXh1SUNCamIyNXpkQ0JpWVd4aGJtTmxVM1J5YVc1bklEMGdkRzlyWlc1elYybDBhRUpoYkdGdVkyVnpXekJkUHk1emRISnBibWM3WEc0Z0lHTnZibk4wSUdadmNtMWhkSFJsWkVacFlYUkNZV3hoYm1ObElEMGdkWE5sVkc5clpXNUdhV0YwUVcxdmRXNTBLRnh1SUNBZ0lIUnZhMlZ1TG1Ga1pISmxjM01zWEc0Z0lDQWdZbUZzWVc1alpWTjBjbWx1Wnl4Y2JpQWdJQ0IwYjJ0bGJpNXplVzFpYjJ3c1hHNGdJQ2s3WEc1Y2JpQWdZMjl1YzNRZ2RYTmxRM1Z5Y21WdVkzbFNZWFJsUTJobFkyc2dQU0IxYzJWVFpXeGxZM1J2Y2loblpYUlZjMlZEZFhKeVpXNWplVkpoZEdWRGFHVmpheWs3WEc1Y2JpQWdkWE5sUldabVpXTjBLQ2dwSUQwK0lIdGNiaUFnSUNCelpYUlViMnRsYmxObGJHVmpkR2x2YmloMGIydGxibk5NYVhOMFJHVjBaV04wWldSYmRHOXJaVzR1WVdSa2NtVnpjMTAvTG5ObGJHVmpkR1ZrS1R0Y2JpQWdmU3dnVzNSdmEyVnVjMHhwYzNSRVpYUmxZM1JsWkN3Z2RHOXJaVzR1WVdSa2NtVnpjeXdnZEc5clpXNVRaV3hsWTNScGIyNHNJSE5sZEZSdmEyVnVVMlZzWldOMGFXOXVYU2s3WEc1Y2JpQWdZMjl1YzNRZ2FHRnVaR3hsUTJobFkydENiM2hUWld4bFkzUnBiMjRnUFNBb0tTQTlQaUI3WEc0Z0lDQWdjMlYwVkc5clpXNVRaV3hsWTNScGIyNG9JWFJ2YTJWdVUyVnNaV04wYVc5dUtUdGNiaUFnSUNCb1lXNWtiR1ZVYjJ0bGJsTmxiR1ZqZEdsdmJpaDBiMnRsYmlrN1hHNGdJSDA3WEc1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFFtOTRJR1JwYzNCc1lYazllMFJKVTFCTVFWa3VTVTVNU1U1RlgwWk1SVmg5SUdOc1lYTnpUbUZ0WlQxY0ltUmxkR1ZqZEdWa0xYUnZhMlZ1TFhaaGJIVmxjMXdpUGx4dUlDQWdJQ0FnUEVKdmVDQnRZWEpuYVc1Q2IzUjBiMjA5ZXpGOVBseHVJQ0FnSUNBZ0lDQThWR1Y0ZENCMllYSnBZVzUwUFh0VVpYaDBWbUZ5YVdGdWRDNWliMlI1VEdkTlpXUnBkVzE5SUdGelBWd2lhRFJjSWo1Y2JpQWdJQ0FnSUNBZ0lDQjdZQ1I3WW1Gc1lXNWpaVk4wY21sdVp5QjhmQ0FuTUNkOUlDUjdkRzlyWlc0dWMzbHRZbTlzZldCOVhHNGdJQ0FnSUNBZ0lEd3ZWR1Y0ZEQ1Y2JpQWdJQ0FnSUNBZ1BGUmxlSFJjYmlBZ0lDQWdJQ0FnSUNCMllYSnBZVzUwUFh0VVpYaDBWbUZ5YVdGdWRDNWliMlI1VTIxOVhHNGdJQ0FnSUNBZ0lDQWdZWE05WENKb05sd2lYRzRnSUNBZ0lDQWdJQ0FnWTI5c2IzSTllMVJsZUhSRGIyeHZjaTUwWlhoMFFXeDBaWEp1WVhScGRtVjlYRzRnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNCN2RYTmxRM1Z5Y21WdVkzbFNZWFJsUTJobFkydGNiaUFnSUNBZ0lDQWdJQ0FnSUQ4Z1ptOXliV0YwZEdWa1JtbGhkRUpoYkdGdVkyVWdmSHdnSnlRd0p5QXZMeUJ6YVc1alpTQm1iM0p0WVhSMFpXUkdhV0YwUW1Gc1lXNWpaU0IzYVd4c0lHSmxJSGRvWlc0Z2RHVm9JR052Ym5abGNuTnBiMjRnY21GMFpTQnBjeUJ1YjNRZ2IySjBZV2x1WldRc0lITm9iM1ZzWkNCaVpTQnlaWEJzWVdObElIUm9aU0JnSkRCZ0lIZHBkR2dnWUU0dlFXQmNiaUFnSUNBZ0lDQWdJQ0FnSURvZ1ptOXliV0YwZEdWa1JtbGhkRUpoYkdGdVkyVjlYRzRnSUNBZ0lDQWdJRHd2VkdWNGRENWNiaUFnSUNBZ0lEd3ZRbTk0UGx4dUlDQWdJQ0FnUEVKdmVDQmpiR0Z6YzA1aGJXVTlYQ0prWlhSbFkzUmxaQzEwYjJ0bGJpMTJZV3gxWlhOZlgyTm9aV05yWW05NFhDSStYRzRnSUNBZ0lDQWdJRHhEYUdWamEwSnZlQ0JqYUdWamEyVmtQWHQwYjJ0bGJsTmxiR1ZqZEdsdmJuMGdiMjVEYkdsamF6MTdhR0Z1Wkd4bFEyaGxZMnRDYjNoVFpXeGxZM1JwYjI1OUlDOCtYRzRnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0E4TDBKdmVENWNiaUFnS1R0Y2JuMDdYRzVjYmtSbGRHVmpkR1ZrVkc5clpXNVdZV3gxWlhNdWNISnZjRlI1Y0dWeklEMGdlMXh1SUNCMGIydGxiam9nVUhKdmNGUjVjR1Z6TG5Ob1lYQmxLSHRjYmlBZ0lDQmhaR1J5WlhOek9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ1pHVmphVzFoYkhNNklGQnliM0JVZVhCbGN5NXVkVzFpWlhJc1hHNGdJQ0FnYzNsdFltOXNPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHbGpiMjVWY213NklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnWVdkbmNtVm5ZWFJ2Y25NNklGQnliM0JVZVhCbGN5NWhjbkpoZVN4Y2JpQWdmU2tzWEc0Z0lHaGhibVJzWlZSdmEyVnVVMlZzWldOMGFXOXVPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNCMGIydGxibk5NYVhOMFJHVjBaV04wWldRNklGQnliM0JVZVhCbGN5NXZZbXBsWTNRc1hHNTlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JFWlhSbFkzUmxaRlJ2YTJWdVZtRnNkV1Z6TzF4dUlpd2lhVzF3YjNKMElGSmxZV04wTENCN0lIVnpaVk4wWVhSbExDQjFjMlZEYjI1MFpYaDBJSDBnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQjdJSFZ6WlZObGJHVmpkRzl5TENCMWMyVkVhWE53WVhSamFDQjlJR1p5YjIwZ0ozSmxZV04wTFhKbFpIVjRKenRjYm1sdGNHOXlkQ0I3SUdOb1lXbHVJSDBnWm5KdmJTQW5iRzlrWVhOb0p6dGNibHh1YVcxd2IzSjBJSHRjYmlBZ1lXUmtTVzF3YjNKMFpXUlViMnRsYm5Nc1hHNGdJR2xuYm05eVpWUnZhMlZ1Y3l4Y2JpQWdjMlYwVG1WM1ZHOXJaVzV6U1cxd2IzSjBaV1FzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1TDNOMGIzSmxMMkZqZEdsdmJuTW5PMXh1YVcxd2IzSjBJSHRjYmlBZ1oyVjBRM1Z5Y21WdWRFTm9ZV2x1U1dRc1hHNGdJR2RsZEVSbGRHVmpkR1ZrVkc5clpXNXpTVzVEZFhKeVpXNTBUbVYwZDI5eWF5eGNibjBnWm5KdmJTQW5MaTR2TGk0dkxpNHZjMlZzWldOMGIzSnpKenRjYm1sdGNHOXlkQ0I3SUUxbGRHRk5aWFJ5YVdOelEyOXVkR1Y0ZENCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJOdmJuUmxlSFJ6TDIxbGRHRnRaWFJ5YVdOekp6dGNibHh1YVcxd2IzSjBJSHRjYmlBZ1FYTnpaWFJVZVhCbExGeHVJQ0JVYjJ0bGJsTjBZVzVrWVhKa0xGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMM1J5WVc1ellXTjBhVzl1Snp0Y2JtbHRjRzl5ZENCN1hHNGdJRTFsZEdGTlpYUnlhV056UlhabGJuUkRZWFJsWjI5eWVTeGNiaUFnVFdWMFlVMWxkSEpwWTNORmRtVnVkRXh2WTJGMGFXOXVMRnh1SUNCTlpYUmhUV1YwY21samMwVjJaVzUwVG1GdFpTeGNiaUFnVFdWMFlVMWxkSEpwWTNOVWIydGxia1YyWlc1MFUyOTFjbU5sTEZ4dWZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwyMWxkR0Z0WlhSeWFXTnpKenRjYm1sdGNHOXlkQ0JFWlhSbFkzUmxaRlJ2YTJWdVUyVnNaV04wYVc5dVVHOXdiM1psY2lCbWNtOXRJQ2N1TDJSbGRHVmpkR1ZrTFhSdmEyVnVMWE5sYkdWamRHbHZiaTF3YjNCdmRtVnlMMlJsZEdWamRHVmtMWFJ2YTJWdUxYTmxiR1ZqZEdsdmJpMXdiM0J2ZG1WeUp6dGNibWx0Y0c5eWRDQkVaWFJsWTNSbFpGUnZhMlZ1U1dkdWIzSmxaRkJ2Y0c5MlpYSWdabkp2YlNBbkxpOWtaWFJsWTNSbFpDMTBiMnRsYmkxcFoyNXZjbVZrTFhCdmNHOTJaWEl2WkdWMFpXTjBaV1F0ZEc5clpXNHRhV2R1YjNKbFpDMXdiM0J2ZG1WeUp6dGNibHh1WTI5dWMzUWdjMjl5ZEdsdVowSmhjMlZrVDI1VWIydGxibE5sYkdWamRHbHZiaUE5SUNoMGIydGxibk5FWlhSbFkzUmxaQ2tnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lHTm9ZV2x1S0hSdmEyVnVjMFJsZEdWamRHVmtLVnh1SUNBZ0lDQWdMeThnWjJWMElIUm9aU0IyWVd4MVpYTmNiaUFnSUNBZ0lDNTJZV3gxWlhNb0tWeHVJQ0FnSUNBZ0x5OGdZM0psWVhSbElHRWdibVYzSUc5aWFtVmpkQ0IzYVhSb0lHdGxlWE1nSjNObGJHVmpkR1ZrSnl3Z0oyUmxjMlZzWldOMFpXUW5JR0Z1WkNCbmNtOTFjQ0IwYUdVZ2RHOXJaVzV6WEc0Z0lDQWdJQ0F1WjNKdmRYQkNlU2dvZEc5clpXNHBJRDArSUNoMGIydGxiaTV6Wld4bFkzUmxaQ0EvSUNkelpXeGxZM1JsWkNjZ09pQW5aR1Z6Wld4bFkzUmxaQ2NwS1Z4dUlDQWdJQ0FnTHk4Z1pHbDBZMmdnZEdobElDZHpaV3hsWTNSbFpDY2djSEp2Y0dWeWRIa2dZVzVrSUdkbGRDQnFkWE4wSUhSb1pTQjBiMnRsYm5NblhHNGdJQ0FnSUNBdWJXRndWbUZzZFdWektDaG5jbTkxY0NrZ1BUNWNiaUFnSUNBZ0lDQWdaM0p2ZFhBdWJXRndLQ2g3SUhSdmEyVnVJSDBwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQjdJR0ZrWkhKbGMzTXNJSE41YldKdmJDd2daR1ZqYVcxaGJITXNJR0ZuWjNKbFoyRjBiM0p6SUgwZ1BTQjBiMnRsYmp0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2V5QmhaR1J5WlhOekxDQnplVzFpYjJ3c0lHUmxZMmx0WVd4ekxDQmhaMmR5WldkaGRHOXljeUI5TzF4dUlDQWdJQ0FnSUNCOUtTeGNiaUFnSUNBZ0lDbGNiaUFnSUNBZ0lDOHZJRVY0YVhRZ2RHaGxJR05vWVdsdUlHRnVaQ0JuWlhRZ2RHaGxJSFZ1WkdWeWJIbHBibWNnZG1Gc2RXVXNJR0Z1SUc5aWFtVmpkQzVjYmlBZ0lDQWdJQzUyWVd4MVpTZ3BYRzRnSUNrN1hHNTlPMXh1WEc1amIyNXpkQ0JFWlhSbFkzUmxaRlJ2YTJWdUlEMGdLSHNnYzJWMFUyaHZkMFJsZEdWamRHVmtWRzlyWlc1eklIMHBJRDArSUh0Y2JpQWdZMjl1YzNRZ1pHbHpjR0YwWTJnZ1BTQjFjMlZFYVhOd1lYUmphQ2dwTzF4dUlDQmpiMjV6ZENCMGNtRmphMFYyWlc1MElEMGdkWE5sUTI5dWRHVjRkQ2hOWlhSaFRXVjBjbWxqYzBOdmJuUmxlSFFwTzF4dVhHNGdJR052Ym5OMElHTm9ZV2x1U1dRZ1BTQjFjMlZUWld4bFkzUnZjaWhuWlhSRGRYSnlaVzUwUTJoaGFXNUpaQ2s3WEc0Z0lHTnZibk4wSUdSbGRHVmpkR1ZrVkc5clpXNXpJRDBnZFhObFUyVnNaV04wYjNJb1oyVjBSR1YwWldOMFpXUlViMnRsYm5OSmJrTjFjbkpsYm5ST1pYUjNiM0pyS1R0Y2JseHVJQ0JqYjI1emRDQmJkRzlyWlc1elRHbHpkRVJsZEdWamRHVmtMQ0J6WlhSVWIydGxibk5NYVhOMFJHVjBaV04wWldSZElEMGdkWE5sVTNSaGRHVW9LQ2tnUFQ1Y2JpQWdJQ0JrWlhSbFkzUmxaRlJ2YTJWdWN5NXlaV1IxWTJVb0tIUnZhMlZ1VDJKcUxDQjBiMnRsYmlrZ1BUNGdlMXh1SUNBZ0lDQWdkRzlyWlc1UFltcGJkRzlyWlc0dVlXUmtjbVZ6YzEwZ1BTQjdJSFJ2YTJWdUxDQnpaV3hsWTNSbFpEb2dkSEoxWlNCOU8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSdmEyVnVUMkpxTzF4dUlDQWdJSDBzSUh0OUtTeGNiaUFnS1R0Y2JpQWdZMjl1YzNRZ1czTm9iM2RFWlhSbFkzUmxaRlJ2YTJWdVNXZHViM0psWkZCdmNHOTJaWElzSUhObGRGTm9iM2RFWlhSbFkzUmxaRlJ2YTJWdVNXZHViM0psWkZCdmNHOTJaWEpkSUQxY2JpQWdJQ0IxYzJWVGRHRjBaU2htWVd4elpTazdYRzRnSUdOdmJuTjBJRnR3WVhKMGFXRnNiSGxKWjI1dmNtVkVaWFJsWTNSbFpGUnZhMlZ1Y3l3Z2MyVjBVR0Z5ZEdsaGJHeDVTV2R1YjNKbFJHVjBaV04wWldSVWIydGxibk5kSUQxY2JpQWdJQ0IxYzJWVGRHRjBaU2htWVd4elpTazdYRzVjYmlBZ1kyOXVjM1FnYVcxd2IzSjBVMlZzWldOMFpXUlViMnRsYm5NZ1BTQmhjM2x1WXlBb2MyVnNaV04wWldSVWIydGxibk1wSUQwK0lIdGNiaUFnSUNCelpXeGxZM1JsWkZSdmEyVnVjeTVtYjNKRllXTm9LQ2hwYlhCdmNuUmxaRlJ2YTJWdUtTQTlQaUI3WEc0Z0lDQWdJQ0IwY21GamEwVjJaVzUwS0h0Y2JpQWdJQ0FnSUNBZ1pYWmxiblE2SUUxbGRHRk5aWFJ5YVdOelJYWmxiblJPWVcxbExsUnZhMlZ1UVdSa1pXUXNYRzRnSUNBZ0lDQWdJR05oZEdWbmIzSjVPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBRMkYwWldkdmNua3VWMkZzYkdWMExGeHVJQ0FnSUNBZ0lDQnpaVzV6YVhScGRtVlFjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ2RHOXJaVzVmYzNsdFltOXNPaUJwYlhCdmNuUmxaRlJ2YTJWdUxuTjViV0p2YkN4Y2JpQWdJQ0FnSUNBZ0lDQjBiMnRsYmw5amIyNTBjbUZqZEY5aFpHUnlaWE56T2lCcGJYQnZjblJsWkZSdmEyVnVMbUZrWkhKbGMzTXNYRzRnSUNBZ0lDQWdJQ0FnZEc5clpXNWZaR1ZqYVcxaGJGOXdjbVZqYVhOcGIyNDZJR2x0Y0c5eWRHVmtWRzlyWlc0dVpHVmphVzFoYkhNc1hHNGdJQ0FnSUNBZ0lDQWdjMjkxY21ObFgyTnZibTVsWTNScGIyNWZiV1YwYUc5a09pQk5aWFJoVFdWMGNtbGpjMVJ2YTJWdVJYWmxiblJUYjNWeVkyVXVSR1YwWldOMFpXUXNYRzRnSUNBZ0lDQWdJQ0FnZEc5clpXNWZjM1JoYm1SaGNtUTZJRlJ2YTJWdVUzUmhibVJoY21RdVJWSkRNakFzWEc0Z0lDQWdJQ0FnSUNBZ1lYTnpaWFJmZEhsd1pUb2dRWE56WlhSVWVYQmxMblJ2YTJWdUxGeHVJQ0FnSUNBZ0lDQWdJSFJ2YTJWdVgyRmtaR1ZrWDNSNWNHVTZJQ2RrWlhSbFkzUmxaQ2NzWEc0Z0lDQWdJQ0FnSUNBZ1kyaGhhVzVmYVdRNklHTm9ZV2x1U1dRc1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ0lDQmhkMkZwZENCa2FYTndZWFJqYUNoaFpHUkpiWEJ2Y25SbFpGUnZhMlZ1Y3loelpXeGxZM1JsWkZSdmEyVnVjeWtwTzF4dUlDQWdJR052Ym5OMElIUnZhMlZ1VTNsdFltOXNjeUE5SUhObGJHVmpkR1ZrVkc5clpXNXpMbTFoY0Nnb2V5QnplVzFpYjJ3Z2ZTa2dQVDRnYzNsdFltOXNLVHRjYmlBZ0lDQmthWE53WVhSamFDaHpaWFJPWlhkVWIydGxibk5KYlhCdmNuUmxaQ2gwYjJ0bGJsTjViV0p2YkhNdWFtOXBiaWduTENBbktTa3BPMXh1SUNCOU8xeHVYRzRnSUdOdmJuTjBJR2hoYm1Sc1pVTnNaV0Z5Vkc5clpXNXpVMlZzWldOMGFXOXVJRDBnWVhONWJtTWdLQ2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnYzJWc1pXTjBaV1E2SUhObGJHVmpkR1ZrVkc5clpXNXpJRDBnVzEwc0lHUmxjMlZzWldOMFpXUTZJR1JsVTJWc1pXTjBaV1JVYjJ0bGJuTWdQU0JiWFNCOUlEMWNiaUFnSUNBZ0lITnZjblJwYm1kQ1lYTmxaRTl1Vkc5clpXNVRaV3hsWTNScGIyNG9kRzlyWlc1elRHbHpkRVJsZEdWamRHVmtLVHRjYmx4dUlDQWdJR2xtSUNoa1pWTmxiR1ZqZEdWa1ZHOXJaVzV6TG14bGJtZDBhQ0E4SUdSbGRHVmpkR1ZrVkc5clpXNXpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdZWGRoYVhRZ2FXMXdiM0owVTJWc1pXTjBaV1JVYjJ0bGJuTW9jMlZzWldOMFpXUlViMnRsYm5NcE8xeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1emRDQjBiMnRsYm5ORVpYUmhhV3h6VEdsemRDQTlJR1JsVTJWc1pXTjBaV1JVYjJ0bGJuTXViV0Z3S0Z4dUlDQWdJQ0FnS0hzZ2MzbHRZbTlzTENCaFpHUnlaWE56SUgwcElEMCtJR0FrZTNONWJXSnZiSDBnTFNBa2UyRmtaSEpsYzNOOVlDeGNiaUFnSUNBcE8xeHVJQ0FnSUhSeVlXTnJSWFpsYm5Rb2UxeHVJQ0FnSUNBZ1pYWmxiblE2SUUxbGRHRk5aWFJ5YVdOelJYWmxiblJPWVcxbExsUnZhMlZ1U0dsa1pHVnVMRnh1SUNBZ0lDQWdZMkYwWldkdmNuazZJRTFsZEdGTlpYUnlhV056UlhabGJuUkRZWFJsWjI5eWVTNVhZV3hzWlhRc1hHNGdJQ0FnSUNCelpXNXphWFJwZG1WUWNtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQWdJSFJ2YTJWdWN6b2dkRzlyWlc1elJHVjBZV2xzYzB4cGMzUXNYRzRnSUNBZ0lDQWdJR3h2WTJGMGFXOXVPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBURzlqWVhScGIyNHVWRzlyWlc1RVpYUmxZM1JwYjI0c1hHNGdJQ0FnSUNBZ0lIUnZhMlZ1WDNOMFlXNWtZWEprT2lCVWIydGxibE4wWVc1a1lYSmtMa1ZTUXpJd0xGeHVJQ0FnSUNBZ0lDQmhjM05sZEY5MGVYQmxPaUJCYzNObGRGUjVjR1V1ZEc5clpXNHNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lIMHBPMXh1SUNBZ0lHTnZibk4wSUdSbFUyVnNaV04wWldSVWIydGxibk5CWkdSeVpYTnpaWE1nUFNCa1pWTmxiR1ZqZEdWa1ZHOXJaVzV6TG0xaGNDaGNiaUFnSUNBZ0lDaDdJR0ZrWkhKbGMzTWdmU2tnUFQ0Z1lXUmtjbVZ6Y3l4Y2JpQWdJQ0FwTzF4dUlDQWdJR0YzWVdsMElHUnBjM0JoZEdOb0tGeHVJQ0FnSUNBZ2FXZHViM0psVkc5clpXNXpLSHRjYmlBZ0lDQWdJQ0FnZEc5clpXNXpWRzlKWjI1dmNtVTZJR1JsVTJWc1pXTjBaV1JVYjJ0bGJuTkJaR1J5WlhOelpYTXNYRzRnSUNBZ0lDQWdJR1J2Ym5SVGFHOTNURzloWkdsdVowbHVaR2xqWVhSdmNqb2dkSEoxWlN4Y2JpQWdJQ0FnSUgwcExGeHVJQ0FnSUNrN1hHNGdJQ0FnYzJWMFUyaHZkMFJsZEdWamRHVmtWRzlyWlc1ektHWmhiSE5sS1R0Y2JpQWdJQ0J6WlhSUVlYSjBhV0ZzYkhsSloyNXZjbVZFWlhSbFkzUmxaRlJ2YTJWdWN5aG1ZV3h6WlNrN1hHNGdJSDA3WEc1Y2JpQWdZMjl1YzNRZ2FHRnVaR3hsVkc5clpXNVRaV3hsWTNScGIyNGdQU0FvZEc5clpXNHBJRDArSUh0Y2JpQWdJQ0J6WlhSVWIydGxibk5NYVhOMFJHVjBaV04wWldRb0tIQnlaWFpUZEdGMFpTa2dQVDRnS0h0Y2JpQWdJQ0FnSUM0dUxuQnlaWFpUZEdGMFpTeGNiaUFnSUNBZ0lGdDBiMnRsYmk1aFpHUnlaWE56WFRvZ2UxeHVJQ0FnSUNBZ0lDQXVMaTV3Y21WMlUzUmhkR1ZiZEc5clpXNHVZV1JrY21WemMxMHNYRzRnSUNBZ0lDQWdJSE5sYkdWamRHVmtPaUFoY0hKbGRsTjBZWFJsVzNSdmEyVnVMbUZrWkhKbGMzTmRMbk5sYkdWamRHVmtMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQjlLU2s3WEc0Z0lIMDdYRzVjYmlBZ1kyOXVjM1FnYjI1SmJYQnZjblFnUFNCaGMzbHVZeUFvS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnZXlCelpXeGxZM1JsWkRvZ2MyVnNaV04wWldSVWIydGxibk1nUFNCYlhTQjlJRDFjYmlBZ0lDQWdJSE52Y25ScGJtZENZWE5sWkU5dVZHOXJaVzVUWld4bFkzUnBiMjRvZEc5clpXNXpUR2x6ZEVSbGRHVmpkR1ZrS1R0Y2JseHVJQ0FnSUdsbUlDaHpaV3hsWTNSbFpGUnZhMlZ1Y3k1c1pXNW5kR2dnUENCa1pYUmxZM1JsWkZSdmEyVnVjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJSE5sZEZOb2IzZEVaWFJsWTNSbFpGUnZhMlZ1U1dkdWIzSmxaRkJ2Y0c5MlpYSW9kSEoxWlNrN1hHNGdJQ0FnSUNCelpYUlFZWEowYVdGc2JIbEpaMjV2Y21WRVpYUmxZM1JsWkZSdmEyVnVjeWgwY25WbEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWVhkaGFYUWdhVzF3YjNKMFUyVnNaV04wWldSVWIydGxibk1vYzJWc1pXTjBaV1JVYjJ0bGJuTXBPMXh1SUNBZ0lDQWdjMlYwVTJodmQwUmxkR1ZqZEdWa1ZHOXJaVzV6S0daaGJITmxLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnWTI5dWMzUWdiMjVKWjI1dmNtVkJiR3dnUFNBb0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2JtVjNWRzlyWlc1elRHbHpkRVJsZEdWamRHVmtJRDBnZXlBdUxpNTBiMnRsYm5OTWFYTjBSR1YwWldOMFpXUWdmVHRjYmlBZ0lDQm1iM0lnS0dOdmJuTjBJSFJ2YTJWdVFXUmtjbVZ6Y3lCdlppQlBZbXBsWTNRdWEyVjVjeWgwYjJ0bGJuTk1hWE4wUkdWMFpXTjBaV1FwS1NCN1hHNGdJQ0FnSUNCdVpYZFViMnRsYm5OTWFYTjBSR1YwWldOMFpXUmJkRzlyWlc1QlpHUnlaWE56WFM1elpXeGxZM1JsWkNBOUlHWmhiSE5sTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE5sZEZSdmEyVnVjMHhwYzNSRVpYUmxZM1JsWkNodVpYZFViMnRsYm5OTWFYTjBSR1YwWldOMFpXUXBPMXh1SUNBZ0lITmxkRk5vYjNkRVpYUmxZM1JsWkZSdmEyVnVTV2R1YjNKbFpGQnZjRzkyWlhJb2RISjFaU2s3WEc0Z0lIMDdYRzVjYmlBZ1kyOXVjM1FnYjI1RFlXNWpaV3hKWjI1dmNtVWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2MyVjBVMmh2ZDBSbGRHVmpkR1ZrVkc5clpXNUpaMjV2Y21Wa1VHOXdiM1psY2lobVlXeHpaU2s3WEc0Z0lDQWdjMlYwVUdGeWRHbGhiR3g1U1dkdWIzSmxSR1YwWldOMFpXUlViMnRsYm5Nb1ptRnNjMlVwTzF4dUlDQjlPMXh1WEc0Z0lISmxkSFZ5YmlBb1hHNGdJQ0FnUEQ1Y2JpQWdJQ0FnSUh0emFHOTNSR1YwWldOMFpXUlViMnRsYmtsbmJtOXlaV1JRYjNCdmRtVnlJQ1ltSUNoY2JpQWdJQ0FnSUNBZ1BFUmxkR1ZqZEdWa1ZHOXJaVzVKWjI1dmNtVmtVRzl3YjNabGNseHVJQ0FnSUNBZ0lDQWdJRzl1UTJGdVkyVnNTV2R1YjNKbFBYdHZia05oYm1ObGJFbG5ibTl5WlgxY2JpQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWRGJHVmhjbFJ2YTJWdWMxTmxiR1ZqZEdsdmJqMTdhR0Z1Wkd4bFEyeGxZWEpVYjJ0bGJuTlRaV3hsWTNScGIyNTlYRzRnSUNBZ0lDQWdJQ0FnY0dGeWRHbGhiR3g1U1dkdWIzSmxSR1YwWldOMFpXUlViMnRsYm5NOWUzQmhjblJwWVd4c2VVbG5ibTl5WlVSbGRHVmpkR1ZrVkc5clpXNXpmVnh1SUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnS1gxY2JpQWdJQ0FnSUh0a1pYUmxZM1JsWkZSdmEyVnVjeTVzWlc1bmRHZ2dQaUF3SUNZbUlDaGNiaUFnSUNBZ0lDQWdQRVJsZEdWamRHVmtWRzlyWlc1VFpXeGxZM1JwYjI1UWIzQnZkbVZ5WEc0Z0lDQWdJQ0FnSUNBZ1pHVjBaV04wWldSVWIydGxibk05ZTJSbGRHVmpkR1ZrVkc5clpXNXpmVnh1SUNBZ0lDQWdJQ0FnSUhSdmEyVnVjMHhwYzNSRVpYUmxZM1JsWkQxN2RHOXJaVzV6VEdsemRFUmxkR1ZqZEdWa2ZWeHVJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pWUnZhMlZ1VTJWc1pXTjBhVzl1UFh0b1lXNWtiR1ZVYjJ0bGJsTmxiR1ZqZEdsdmJuMWNiaUFnSUNBZ0lDQWdJQ0J2YmtsdGNHOXlkRDE3YjI1SmJYQnZjblI5WEc0Z0lDQWdJQ0FnSUNBZ2IyNUpaMjV2Y21WQmJHdzllMjl1U1dkdWIzSmxRV3hzZlZ4dUlDQWdJQ0FnSUNBZ0lITmxkRk5vYjNkRVpYUmxZM1JsWkZSdmEyVnVjejE3YzJWMFUyaHZkMFJsZEdWamRHVmtWRzlyWlc1emZWeHVJQ0FnSUNBZ0lDQWdJSE52Y25ScGJtZENZWE5sWkU5dVZHOXJaVzVUWld4bFkzUnBiMjQ5ZTNOdmNuUnBibWRDWVhObFpFOXVWRzlyWlc1VFpXeGxZM1JwYjI1OVhHNGdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQXBmVnh1SUNBZ0lEd3ZQbHh1SUNBcE8xeHVmVHRjYmx4dVJHVjBaV04wWldSVWIydGxiaTV3Y205d1ZIbHdaWE1nUFNCN1hHNGdJSE5sZEZOb2IzZEVaWFJsWTNSbFpGUnZhMlZ1Y3pvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRVJsZEdWamRHVmtWRzlyWlc0N1hHNGlMQ0pwYlhCdmNuUWdVbVZoWTNRc0lIc2dRMjl0Y0c5dVpXNTBJSDBnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQk5aVzUxUkhKdmNIQnZJR1p5YjIwZ0p5NHVMMjFsYm5VdFpISnZjSEJ2Snp0Y2JseHVaWGh3YjNKMElHTnNZWE56SUVSeWIzQmtiM2R1SUdWNGRHVnVaSE1nUTI5dGNHOXVaVzUwSUh0Y2JpQWdjbVZ1WkdWeUtDa2dlMXh1SUNBZ0lHTnZibk4wSUh0Y2JpQWdJQ0FnSUdOdmJuUmhhVzVsY2tOc1lYTnpUbUZ0WlN4Y2JpQWdJQ0FnSUdselQzQmxiaXhjYmlBZ0lDQWdJRzl1UTJ4cFkydFBkWFJ6YVdSbExGeHVJQ0FnSUNBZ2MzUjViR1VzWEc0Z0lDQWdJQ0JwYm01bGNsTjBlV3hsTEZ4dUlDQWdJQ0FnWTJocGJHUnlaVzRzWEc0Z0lDQWdJQ0IxYzJWRGMzTlVjbUZ1YzJsMGFXOXVMRnh1SUNBZ0lIMGdQU0IwYUdsekxuQnliM0J6TzF4dVhHNGdJQ0FnWTI5dWMzUWdhVzV1WlhKVGRIbHNaVVJsWm1GMWJIUnpJRDBnZTF4dUlDQWdJQ0FnWW05eVpHVnlVbUZrYVhWek9pQW5OSEI0Snl4Y2JpQWdJQ0FnSUhCaFpHUnBibWM2SUNjNGNIZ2dNVFp3ZUNjc1hHNGdJQ0FnSUNCaVlXTnJaM0p2ZFc1a09pQW5kbUZ5S0MwdFkyOXNiM0l0WW1GamEyZHliM1Z1WkMxa1pXWmhkV3gwS1Njc1hHNGdJQ0FnSUNCaWIzaFRhR0ZrYjNjNklDZDJZWElvTFMxemFHRmtiM2N0YzJsNlpTMXpiU2tnZG1GeUtDMHRZMjlzYjNJdGMyaGhaRzkzTFdSbFptRjFiSFFwSnl4Y2JpQWdJQ0FnSUM0dUxtbHVibVZ5VTNSNWJHVXNYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBOFRXVnVkVVJ5YjNCd2IxeHVJQ0FnSUNBZ0lDQmpiMjUwWVdsdVpYSkRiR0Z6YzA1aGJXVTllMk52Ym5SaGFXNWxja05zWVhOelRtRnRaWDFjYmlBZ0lDQWdJQ0FnZFhObFEzTnpWSEpoYm5OcGRHbHZiajE3ZFhObFEzTnpWSEpoYm5OcGRHbHZibjFjYmlBZ0lDQWdJQ0FnYVhOUGNHVnVQWHRwYzA5d1pXNTlYRzRnSUNBZ0lDQWdJSHBKYm1SbGVEMTdOVFY5WEc0Z0lDQWdJQ0FnSUc5dVEyeHBZMnRQZFhSemFXUmxQWHR2YmtOc2FXTnJUM1YwYzJsa1pYMWNiaUFnSUNBZ0lDQWdjM1I1YkdVOWUzTjBlV3hsZlZ4dUlDQWdJQ0FnSUNCcGJtNWxjbE4wZVd4bFBYdHBibTVsY2xOMGVXeGxSR1ZtWVhWc2RITjlYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJRHh6ZEhsc1pUNWNiaUFnSUNBZ0lDQWdJQ0I3WUZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR2t1WkhKdmNHUnZkMjR0YldWdWRTMXBkR1Z0T21odmRtVnlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNJNmRtRnlLQzB0WTI5c2IzSXRkR1Y0ZEMxa1pXWmhkV3gwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GamEyZHliM1Z1WkMxamIyeHZjam9nZG1GeUtDMHRZMjlzYjNJdFltRmphMmR5YjNWdVpDMWtaV1poZFd4MExXaHZkbVZ5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWW05eVpHVnlMWEpoWkdsMWN6b2dOSEI0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUdCOVhHNGdJQ0FnSUNBZ0lEd3ZjM1I1YkdVK1hHNGdJQ0FnSUNBZ0lIdGphR2xzWkhKbGJuMWNiaUFnSUNBZ0lEd3ZUV1Z1ZFVSeWIzQndiejVjYmlBZ0lDQXBPMXh1SUNCOVhHNTlYRzVjYmtSeWIzQmtiM2R1TG1SbFptRjFiSFJRY205d2N5QTlJSHRjYmlBZ2RYTmxRM056VkhKaGJuTnBkR2x2YmpvZ1ptRnNjMlVzWEc1OU8xeHVYRzVFY205d1pHOTNiaTV3Y205d1ZIbHdaWE1nUFNCN1hHNGdJR2x6VDNCbGJqb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3dWFYTlNaWEYxYVhKbFpDeGNiaUFnWTJocGJHUnlaVzQ2SUZCeWIzQlVlWEJsY3k1dWIyUmxMRnh1SUNCemRIbHNaVG9nVUhKdmNGUjVjR1Z6TG05aWFtVmpkQzVwYzFKbGNYVnBjbVZrTEZ4dUlDQnZia05zYVdOclQzVjBjMmxrWlRvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lHbHVibVZ5VTNSNWJHVTZJRkJ5YjNCVWVYQmxjeTV2WW1wbFkzUXNYRzRnSUhWelpVTnpjMVJ5WVc1emFYUnBiMjQ2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNCamIyNTBZV2x1WlhKRGJHRnpjMDVoYldVNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNTlPMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdSSEp2Y0dSdmQyNU5aVzUxU1hSbGJTQmxlSFJsYm1SeklFTnZiWEJ2Ym1WdWRDQjdYRzRnSUhKbGJtUmxjaWdwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJRzl1UTJ4cFkyc3NJR05zYjNObFRXVnVkU3dnWTJocGJHUnlaVzRzSUhOMGVXeGxJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUR4c2FWeHVJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0prY205d1pHOTNiaTF0Wlc1MUxXbDBaVzFjSWx4dUlDQWdJQ0FnSUNCa1lYUmhMWFJsYzNScFpEMWNJbVJ5YjNCa2IzZHVMVzFsYm5VdGFYUmxiVndpWEc0Z0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZXlncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yS0NrN1hHNGdJQ0FnSUNBZ0lDQWdZMnh2YzJWTlpXNTFLQ2s3WEc0Z0lDQWdJQ0FnSUgxOVhHNGdJQ0FnSUNBZ0lHOXVTMlY1VUhKbGMzTTlleWhsZG1WdWRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hsZG1WdWRDNXJaWGtnUFQwOUlDZEZiblJsY2ljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVEyeHBZMnNvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05zYjNObFRXVnVkU2dwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnYzNSNWJHVTllM3RjYmlBZ0lDQWdJQ0FnSUNCc2FYTjBVM1I1YkdVNklDZHViMjVsSnl4Y2JpQWdJQ0FnSUNBZ0lDQndZV1JrYVc1bk9pQW5PSEI0SURCd2VDY3NYRzRnSUNBZ0lDQWdJQ0FnWm05dWRGTnBlbVU2SUNjeE9IQjRKeXhjYmlBZ0lDQWdJQ0FnSUNCbWIyNTBVM1I1YkdVNklDZHViM0p0WVd3bkxGeHVJQ0FnSUNBZ0lDQWdJR04xY25OdmNqb2dKM0J2YVc1MFpYSW5MRnh1SUNBZ0lDQWdJQ0FnSUdScGMzQnNZWGs2SUNkbWJHVjRKeXhjYmlBZ0lDQWdJQ0FnSUNCcWRYTjBhV1o1UTI5dWRHVnVkRG9nSjJac1pYZ3RjM1JoY25RbkxGeHVJQ0FnSUNBZ0lDQWdJR0ZzYVdkdVNYUmxiWE02SUNkalpXNTBaWEluTEZ4dUlDQWdJQ0FnSUNBZ0lDNHVMbk4wZVd4bExGeHVJQ0FnSUNBZ0lDQjlmVnh1SUNBZ0lDQWdJQ0IwWVdKSmJtUmxlRDFjSWpCY0lseHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQjdZMmhwYkdSeVpXNTlYRzRnSUNBZ0lDQThMMnhwUGx4dUlDQWdJQ2s3WEc0Z0lIMWNibjFjYmx4dVJISnZjR1J2ZDI1TlpXNTFTWFJsYlM1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUdOc2IzTmxUV1Z1ZFRvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdiMjVEYkdsamF6b2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnWTJocGJHUnlaVzQ2SUZCeWIzQlVlWEJsY3k1dWIyUmxMRnh1SUNCemRIbHNaVG9nVUhKdmNGUjVjR1Z6TG05aWFtVmpkQ3hjYm4wN1hHNGlMQ0pwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJRkpsWVdOMExDQjdJRU52YlhCdmJtVnVkQ0I5SUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQjdJR052Ym01bFkzUWdmU0JtY205dElDZHlaV0ZqZEMxeVpXUjFlQ2M3WEc1cGJYQnZjblFnZXlCM2FYUm9VbTkxZEdWeUlIMGdabkp2YlNBbmNtVmhZM1F0Y205MWRHVnlMV1J2YlNjN1hHNXBiWEJ2Y25RZ2V5QmpiMjF3YjNObElIMGdabkp2YlNBbmNtVmtkWGduTzF4dWFXMXdiM0owSUhzZ2NHbGphMEo1SUgwZ1puSnZiU0FuYkc5a1lYTm9KenRjYm1sdGNHOXlkQ0JDZFhSMGIyNGdabkp2YlNBbkxpNHZMaTR2ZFdrdlluVjBkRzl1Snp0Y2JtbHRjRzl5ZENBcUlHRnpJR0ZqZEdsdmJuTWdabkp2YlNBbkxpNHZMaTR2TGk0dmMzUnZjbVV2WVdOMGFXOXVjeWM3WEc1cGJYQnZjblFnZXlCdmNHVnVRV3hsY25RZ1lYTWdaR2x6Y0d4aGVVbHVkbUZzYVdSRGRYTjBiMjFPWlhSM2IzSnJRV3hsY25RZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5a2RXTnJjeTloYkdWeWRITXZhVzUyWVd4cFpDMWpkWE4wYjIwdGJtVjBkMjl5YXljN1hHNXBiWEJ2Y25RZ2V5Qm5aWFJRY205MmFXUmxja052Ym1acFp5QjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyUjFZMnR6TDIxbGRHRnRZWE5yTDIxbGRHRnRZWE5ySnp0Y2JtbHRjRzl5ZENCN1hHNGdJRUpWU1V4VVgwbE9YMDVGVkZkUFVrdFRMRnh1SUNCRFNFRkpUbDlKUkY5VVQxOVNVRU5mVlZKTVgwMUJVQ3hjYmlBZ1RFbE9SVUZmVkVWVFZFNUZWRjlTVUVOZlZWSk1MRnh1SUNCTVQwTkJURWhQVTFSZlVsQkRYMVZTVEN4Y2JpQWdUa1ZVVjA5U1MxOVVUMTlPUVUxRlgwMUJVQ3hjYmlBZ1RrVlVWMDlTUzE5VVdWQkZVeXhjYmlBZ1UwaFBWVXhFWDFOSVQxZGZURWxPUlVGZlZFVlRWRTVGVkY5T1JWUlhUMUpMTEZ4dWZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwyNWxkSGR2Y21zbk8xeHVhVzF3YjNKMElIc2dhWE5RY21WbWFYaGxaRVp2Y20xaGRIUmxaRWhsZUZOMGNtbHVaeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNOb1lYSmxaQzl0YjJSMWJHVnpMMjVsZEhkdmNtc3VkWFJwYkhNbk8xeHVYRzVwYlhCdmNuUWdRMjlzYjNKSmJtUnBZMkYwYjNJZ1puSnZiU0FuTGk0dkxpNHZkV2t2WTI5c2IzSXRhVzVrYVdOaGRHOXlKenRjYm1sdGNHOXlkQ0I3SUVsamIyNURiMnh2Y2l3Z1UybDZaU0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZZMjl1YzNSaGJuUnpMMlJsYzJsbmJpMXplWE4wWlcwbk8xeHVhVzF3YjNKMElIc2daMlYwVTJodmQxUmxjM1JPWlhSM2IzSnJjeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMM05sYkdWamRHOXljeWM3WEc1cGJYQnZjblFnZXlCblpYUkZiblpwY205dWJXVnVkRlI1Y0dVZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOWhjSEF2YzJOeWFYQjBjeTlzYVdJdmRYUnBiQ2M3WEc1cGJYQnZjblFnZXlCRlRsWkpVazlPVFVWT1ZGOVVXVkJGWDFCUFVGVlFJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2YzJoaGNtVmtMMk52Ym5OMFlXNTBjeTloY0hBbk8xeHVhVzF3YjNKMElIdGNiaUFnVFdWMFlVMWxkSEpwWTNORmRtVnVkRU5oZEdWbmIzSjVMRnh1SUNCTlpYUmhUV1YwY21samMwVjJaVzUwVG1GdFpTeGNiaUFnVFdWMFlVMWxkSEpwWTNOT1pYUjNiM0pyUlhabGJuUlRiM1Z5WTJVc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZiV1YwWVcxbGRISnBZM01uTzF4dWFXMXdiM0owSUh0Y2JpQWdRVVJFWDFCUFVGVk1RVkpmUTFWVFZFOU5YMDVGVkZkUFVrc3NYRzRnSUVGRVZrRk9RMFZFWDFKUFZWUkZMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlvWld4d1pYSnpMMk52Ym5OMFlXNTBjeTl5YjNWMFpYTW5PMXh1WEc1cGJYQnZjblFnZXlCSlkyOXVMQ0JKWTI5dVRtRnRaU3dnU1dOdmJsTnBlbVVzSUVKMWRIUnZia2xqYjI0Z2ZTQm1jbTl0SUNjdUxpOHVMaTlqYjIxd2IyNWxiblF0YkdsaWNtRnllU2M3WEc1Y2JtbHRjRzl5ZENCN0lFUnliM0JrYjNkdUxDQkVjbTl3Wkc5M2JrMWxiblZKZEdWdElIMGdabkp2YlNBbkxpOWtjbTl3Wkc5M2JpYzdYRzVjYmk4dklHTnNZWE56WlhNZ1puSnZiU0J1YjJSbGN5QnZaaUIwYUdVZ2RHOW5aMnhsSUdWc1pXMWxiblF1WEc1amIyNXpkQ0J1YjNSVWIyZG5iR1ZGYkdWdFpXNTBRMnhoYzNOdVlXMWxjeUE5SUZ0Y2JpQWdKMjFsYm5VdGFXTnZiaWNzWEc0Z0lDZHVaWFIzYjNKckxXNWhiV1VuTEZ4dUlDQW5ibVYwZDI5eWF5MXBibVJwWTJGMGIzSW5MRnh1SUNBbmJtVjBkMjl5YXkxallYSmxkQ2NzWEc0Z0lDZHVaWFIzYjNKckxXTnZiWEJ2Ym1WdWRDY3NYRzRnSUNkdGIyUmhiQzFqYjI1MFlXbHVaWEpmWDJadmIzUmxjaTFpZFhSMGIyNG5MRnh1WFR0Y2JseHVZMjl1YzNRZ1JGSlBVRjlFVDFkT1gwMUZUbFZmU1ZSRlRWOVRWRmxNUlNBOUlIdGNiaUFnWm05dWRGTnBlbVU2SUNjeE5uQjRKeXhjYmlBZ2JHbHVaVWhsYVdkb2REb2dKekl3Y0hnbkxGeHVJQ0J3WVdSa2FXNW5PaUFuTVRad2VDY3NYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQnRZWEJUZEdGMFpWUnZVSEp2Y0hNb2MzUmhkR1VwSUh0Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCd2NtOTJhV1JsY2tOdmJtWnBaem9nWjJWMFVISnZkbWxrWlhKRGIyNW1hV2NvYzNSaGRHVXBMRnh1SUNBZ0lITm9iM1ZzWkZOb2IzZFVaWE4wVG1WMGQyOXlhM002SUdkbGRGTm9iM2RVWlhOMFRtVjBkMjl5YTNNb2MzUmhkR1VwTEZ4dUlDQWdJRzVsZEhkdmNtdERiMjVtYVdkMWNtRjBhVzl1Y3pvZ2MzUmhkR1V1YldWMFlXMWhjMnN1Ym1WMGQyOXlhME52Ym1acFozVnlZWFJwYjI1ekxGeHVJQ0FnSUc1bGRIZHZjbXRFY205d1pHOTNiazl3Wlc0NklITjBZWFJsTG1Gd2NGTjBZWFJsTG01bGRIZHZjbXRFY205d1pHOTNiazl3Wlc0c1hHNGdJQ0FnYzJodmQxUmxjM1J1WlhSTlpYTnpZV2RsU1c1RWNtOXdaRzkzYmpvZ2MzUmhkR1V1YldWMFlXMWhjMnN1YzJodmQxUmxjM1J1WlhSTlpYTnpZV2RsU1c1RWNtOXdaRzkzYml4Y2JpQWdmVHRjYm4xY2JseHVablZ1WTNScGIyNGdiV0Z3UkdsemNHRjBZMmhVYjFCeWIzQnpLR1JwYzNCaGRHTm9LU0I3WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnYzJWMFVISnZkbWxrWlhKVWVYQmxPaUFvZEhsd1pTa2dQVDRnZTF4dUlDQWdJQ0FnWkdsemNHRjBZMmdvWVdOMGFXOXVjeTV6WlhSUWNtOTJhV1JsY2xSNWNHVW9kSGx3WlNrcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnYzJWMFFXTjBhWFpsVG1WMGQyOXlhem9nS0c1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dVNXUXBJRDArSUh0Y2JpQWdJQ0FnSUdScGMzQmhkR05vS0dGamRHbHZibk11YzJWMFFXTjBhWFpsVG1WMGQyOXlheWh1WlhSM2IzSnJRMjl1Wm1sbmRYSmhkR2x2Ymtsa0tTazdYRzRnSUNBZ2ZTeGNiaUFnSUNCMWNITmxjblJPWlhSM2IzSnJRMjl1Wm1sbmRYSmhkR2x2YmpvZ0tDNHVMbUZ5WjNNcElEMCtYRzRnSUNBZ0lDQmthWE53WVhSamFDaGhZM1JwYjI1ekxuVndjMlZ5ZEU1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dUtDNHVMbUZ5WjNNcEtTeGNiaUFnSUNCb2FXUmxUbVYwZDI5eWEwUnliM0JrYjNkdU9pQW9LU0E5UGlCa2FYTndZWFJqYUNoaFkzUnBiMjV6TG1ocFpHVk9aWFIzYjNKclJISnZjR1J2ZDI0b0tTa3NYRzRnSUNBZ1pHbHpjR3hoZVVsdWRtRnNhV1JEZFhOMGIyMU9aWFIzYjNKclFXeGxjblE2SUNodVpYUjNiM0pyVG1GdFpTa2dQVDRnZTF4dUlDQWdJQ0FnWkdsemNHRjBZMmdvWkdsemNHeGhlVWx1ZG1Gc2FXUkRkWE4wYjIxT1pYUjNiM0pyUVd4bGNuUW9ibVYwZDI5eWEwNWhiV1VwS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJSE5vYjNkRGIyNW1hWEp0UkdWc1pYUmxUbVYwZDI5eWEwMXZaR0ZzT2lBb2V5QjBZWEpuWlhRc0lHOXVRMjl1Wm1seWJTQjlLU0E5UGlCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWkdsemNHRjBZMmdvWEc0Z0lDQWdJQ0FnSUdGamRHbHZibk11YzJodmQwMXZaR0ZzS0h0Y2JpQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBblEwOU9Sa2xTVFY5RVJVeEZWRVZmVGtWVVYwOVNTeWNzWEc0Z0lDQWdJQ0FnSUNBZ2RHRnlaMlYwTEZ4dUlDQWdJQ0FnSUNBZ0lHOXVRMjl1Wm1seWJTeGNiaUFnSUNBZ0lDQWdmU2tzWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDBzWEc0Z0lDQWdhR2xrWlZSbGMzUk9aWFJOWlhOellXZGxPaUFvS1NBOVBpQmhZM1JwYjI1ekxtaHBaR1ZVWlhOMFRtVjBUV1Z6YzJGblpTZ3BMRnh1SUNCOU8xeHVmVnh1WEc1amJHRnpjeUJPWlhSM2IzSnJSSEp2Y0dSdmQyNGdaWGgwWlc1a2N5QkRiMjF3YjI1bGJuUWdlMXh1SUNCemRHRjBhV01nWTI5dWRHVjRkRlI1Y0dWeklEMGdlMXh1SUNBZ0lIUTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUhSeVlXTnJSWFpsYm5RNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQjlPMXh1WEc0Z0lITjBZWFJwWXlCd2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUNBZ2NISnZkbWxrWlhKRGIyNW1hV2M2SUZCeWIzQlVlWEJsY3k1emFHRndaU2g3WEc0Z0lDQWdJQ0J1YVdOcmJtRnRaVG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQWdJSEp3WTFWeWJEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNBZ0lIUjVjR1U2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdJQ0IwYVdOclpYSTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2ZTa3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQnpaWFJRY205MmFXUmxjbFI1Y0dVNklGQnliM0JVZVhCbGN5NW1kVzVqTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnYzJWMFFXTjBhWFpsVG1WMGQyOXlhem9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQm9hV1JsVG1WMGQyOXlhMFJ5YjNCa2IzZHVPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lHNWxkSGR2Y210RGIyNW1hV2QxY21GMGFXOXVjem9nVUhKdmNGUjVjR1Z6TG05aWFtVmpkQzVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJSE5vYjNWc1pGTm9iM2RVWlhOMFRtVjBkMjl5YTNNNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJRzVsZEhkdmNtdEVjbTl3Wkc5M2JrOXdaVzQ2SUZCeWIzQlVlWEJsY3k1aWIyOXNMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdaR2x6Y0d4aGVVbHVkbUZzYVdSRGRYTjBiMjFPWlhSM2IzSnJRV3hsY25RNklGQnliM0JVZVhCbGN5NW1kVzVqTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnYzJodmQwTnZibVpwY20xRVpXeGxkR1ZPWlhSM2IzSnJUVzlrWVd3NklGQnliM0JVZVhCbGN5NW1kVzVqTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnYzJodmQxUmxjM1J1WlhSTlpYTnpZV2RsU1c1RWNtOXdaRzkzYmpvZ1VISnZjRlI1Y0dWekxtSnZiMnd1YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0JvYVdSbFZHVnpkRTVsZEUxbGMzTmhaMlU2SUZCeWIzQlVlWEJsY3k1bWRXNWpMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdhR2x6ZEc5eWVUb2dVSEp2Y0ZSNWNHVnpMbTlpYW1WamRDeGNiaUFnSUNCa2NtOXdaRzkzYmxOMGVXeGxjem9nVUhKdmNGUjVjR1Z6TG05aWFtVmpkQ3hjYmlBZ0lDQm9hV1JsUld4bGJXVnVkSE5HYjNKUGJtSnZZWEprYVc1bk9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J2YmtGa1pFTnNhV05yT2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQjFjSE5sY25ST1pYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJqb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnZlR0Y2JseHVJQ0JvWVc1a2JHVkRiR2xqYXlodVpYZFFjbTkyYVdSbGNsUjVjR1VwSUh0Y2JpQWdJQ0JqYjI1emRDQjdYRzRnSUNBZ0lDQndjbTkyYVdSbGNrTnZibVpwWnpvZ2V5QjBlWEJsT2lCd2NtOTJhV1JsY2xSNWNHVWdmU3hjYmlBZ0lDQWdJSE5sZEZCeWIzWnBaR1Z5Vkhsd1pTeGNiaUFnSUNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQmpiMjV6ZENCN0lIUnlZV05yUlhabGJuUWdmU0E5SUhSb2FYTXVZMjl1ZEdWNGREdGNibHh1SUNBZ0lIUnlZV05yUlhabGJuUW9lMXh1SUNBZ0lDQWdZMkYwWldkdmNuazZJRTFsZEdGTlpYUnlhV056UlhabGJuUkRZWFJsWjI5eWVTNU9ZWFpwWjJGMGFXOXVMRnh1SUNBZ0lDQWdaWFpsYm5RNklFMWxkR0ZOWlhSeWFXTnpSWFpsYm5ST1lXMWxMazVoZGs1bGRIZHZjbXRUZDJsMFkyaGxaQ3hjYmlBZ0lDQWdJSEJ5YjNCbGNuUnBaWE02SUh0Y2JpQWdJQ0FnSUNBZ1puSnZiVjl1WlhSM2IzSnJPaUJ3Y205MmFXUmxjbFI1Y0dVc1hHNGdJQ0FnSUNBZ0lIUnZYMjVsZEhkdmNtczZJRzVsZDFCeWIzWnBaR1Z5Vkhsd1pTeGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ2ZTazdYRzRnSUNBZ2MyVjBVSEp2ZG1sa1pYSlVlWEJsS0c1bGQxQnliM1pwWkdWeVZIbHdaU2s3WEc0Z0lIMWNibHh1SUNCeVpXNWtaWEpCWkdSRGRYTjBiMjFDZFhSMGIyNG9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2V5QnZia0ZrWkVOc2FXTnJJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbTVsZEhkdmNtdGZYMkZrWkMxdVpYUjNiM0pyTFdKMWRIUnZibHdpUGx4dUlDQWdJQ0FnSUNBOFFuVjBkRzl1WEc0Z0lDQWdJQ0FnSUNBZ2RIbHdaVDFjSW5ObFkyOXVaR0Z5ZVZ3aVhHNGdJQ0FnSUNBZ0lDQWdiMjVEYkdsamF6MTdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOXVRV1JrUTJ4cFkyc3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVCWkdSRGJHbGpheWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1oyVjBSVzUyYVhKdmJtMWxiblJVZVhCbEtDa2dQVDA5SUVWT1ZrbFNUMDVOUlU1VVgxUlpVRVZmVUU5UVZWQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JR2RzYjJKaGJDNXdiR0YwWm05eWJTNXZjR1Z1UlhoMFpXNXphVzl1U1c1Q2NtOTNjMlZ5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkJSRVJmVUU5UVZVeEJVbDlEVlZOVVQwMWZUa1ZVVjA5U1N5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUhSb2FYTXVjSEp2Y0hNdWFHbHpkRzl5ZVM1d2RYTm9LRUZFUkY5UVQxQlZURUZTWDBOVlUxUlBUVjlPUlZSWFQxSkxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWFHbGtaVTVsZEhkdmNtdEVjbTl3Wkc5M2JpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUgxOVhHNGdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0I3ZEdocGN5NWpiMjUwWlhoMExuUW9KMkZrWkU1bGRIZHZjbXNuS1gxY2JpQWdJQ0FnSUNBZ1BDOUNkWFIwYjI0K1hHNGdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQXBPMXh1SUNCOVhHNWNiaUFnY21WdVpHVnlRM1Z6ZEc5dFVuQmpUR2x6ZENodVpYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJuTXNJSEJ5YjNacFpHVnlRMjl1Wm1sbkxDQnZjSFJ6SUQwZ2UzMHBJSHRjYmlBZ0lDQnlaWFIxY200Z1QySnFaV04wTG1WdWRISnBaWE1vYm1WMGQyOXlhME52Ym1acFozVnlZWFJwYjI1ektTNXRZWEFvWEc0Z0lDQWdJQ0FvVzI1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dVNXUXNJRzVsZEhkdmNtdERiMjVtYVdkMWNtRjBhVzl1WFNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdJSEp3WTFWeWJDd2dZMmhoYVc1SlpDd2dibWxqYTI1aGJXVWdQU0FuSnl3Z2FXUWdmU0E5SUc1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dU8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCcGMwTjFjbkpsYm5SU2NHTlVZWEpuWlhRZ1BWeHVJQ0FnSUNBZ0lDQWdJSEJ5YjNacFpHVnlRMjl1Wm1sbkxuUjVjR1VnUFQwOUlFNUZWRmRQVWt0ZlZGbFFSVk11VWxCRElDWW1YRzRnSUNBZ0lDQWdJQ0FnY25CalZYSnNJRDA5UFNCd2NtOTJhV1JsY2tOdmJtWnBaeTV5Y0dOVmNtdzdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJQ0FnUEVSeWIzQmtiM2R1VFdWdWRVbDBaVzFjYmlBZ0lDQWdJQ0FnSUNBZ0lHdGxlVDE3WUdOdmJXMXZiaVI3Y25CalZYSnNmV0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiRzl6WlUxbGJuVTlleWdwSUQwK0lIUm9hWE11Y0hKdmNITXVhR2xrWlU1bGRIZHZjbXRFY205d1pHOTNiaWdwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVEYkdsamF6MTdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hWE5RY21WbWFYaGxaRVp2Y20xaGRIUmxaRWhsZUZOMGNtbHVaeWhqYUdGcGJrbGtLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWMyVjBRV04wYVhabFRtVjBkMjl5YXlodVpYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJrbGtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeWIzQnpMbVJwYzNCc1lYbEpiblpoYkdsa1EzVnpkRzl0VG1WMGQyOXlhMEZzWlhKMEtHNXBZMnR1WVcxbElIeDhJSEp3WTFWeWJDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEhsc1pUMTdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iMjUwVTJsNlpUb2dKekUyY0hnbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FXNWxTR1ZwWjJoME9pQW5NakJ3ZUNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaFpHUnBibWM2SUNjeE5uQjRKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdlMmx6UTNWeWNtVnVkRkp3WTFSaGNtZGxkQ0EvSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEVsamIyNGdibUZ0WlQxN1NXTnZiazVoYldVdVEyaGxZMnQ5SUdOdmJHOXlQWHRKWTI5dVEyOXNiM0l1YzNWalkyVnpjMFJsWm1GMWJIUjlJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBJRG9nS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbTVsZEhkdmNtc3RZMmhsWTJ0ZlgzUnlZVzV6Y0dGeVpXNTBYQ0krNHB5VFBDOWthWFkrWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1BFTnZiRzl5U1c1a2FXTmhkRzl5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eVBYdHZjSFJ6TG1selRHOWpZV3hJYjNOMElEOGdKMnh2WTJGc2FHOXpkQ2NnT2lCSlkyOXVRMjlzYjNJdWFXTnZiazExZEdWa2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFYcGxQWHRUYVhwbExreEhmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsUFh0RGIyeHZja2x1WkdsallYUnZjaTVVV1ZCRlV5NUdTVXhNUlVSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdQSE53WVc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aWJtVjBkMjl5YXkxdVlXMWxMV2wwWlcxY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhMWFJsYzNScFpEMTdZQ1I3Ym1samEyNWhiV1Y5TFc1bGRIZHZjbXN0YVhSbGJXQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBlV3hsUFh0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k2SUdselEzVnljbVZ1ZEZKd1kxUmhjbWRsZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5QW5kbUZ5S0MwdFkyOXNiM0l0ZEdWNGRDMWtaV1poZFd4MEtTZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nSjNaaGNpZ3RMV052Ykc5eUxYUmxlSFF0WVd4MFpYSnVZWFJwZG1VcEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZTI1cFkydHVZVzFsSUh4OElISndZMVZ5YkgxY2JpQWdJQ0FnSUNBZ0lDQWdJRHd2YzNCaGJqNWNiaUFnSUNBZ0lDQWdJQ0FnSUh0cGMwTjFjbkpsYm5SU2NHTlVZWEpuWlhRZ1B5QnVkV3hzSURvZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFFuVjBkRzl1U1dOdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbVJsYkdWMFpWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV052Yms1aGJXVTllMGxqYjI1T1lXMWxMa05zYjNObGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnBlbVU5ZTBsamIyNVRhWHBsTGxOdGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnlhV0ZNWVdKbGJEMTdkR2hwY3k1amIyNTBaWGgwTG5Rb0oyUmxiR1YwWlNjcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWV5aGxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxMbk4wYjNCUWNtOXdZV2RoZEdsdmJpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1emFHOTNRMjl1Wm1seWJVUmxiR1YwWlU1bGRIZHZjbXROYjJSaGJDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSaGNtZGxkRG9nYVdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1UTI5dVptbHliVG9nS0NrZ1BUNGdkVzVrWldacGJtVmtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBZ0lDQWdQQzlFY205d1pHOTNiazFsYm5WSmRHVnRQbHh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FwTzF4dUlDQjlYRzVjYmlBZ2NtVnVaR1Z5VG1WMGQyOXlhMFZ1ZEhKNUtHNWxkSGR2Y21zcElIdGNiaUFnSUNCamIyNXpkQ0I3WEc0Z0lDQWdJQ0J3Y205MmFXUmxja052Ym1acFp6b2dleUIwZVhCbE9pQndjbTkyYVdSbGNsUjVjR1VnZlN4Y2JpQWdJQ0I5SUQwZ2RHaHBjeTV3Y205d2N6dGNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnUEVSeWIzQmtiM2R1VFdWdWRVbDBaVzFjYmlBZ0lDQWdJQ0FnYTJWNVBYdHVaWFIzYjNKcmZWeHVJQ0FnSUNBZ0lDQmpiRzl6WlUxbGJuVTllM1JvYVhNdWNISnZjSE11YUdsa1pVNWxkSGR2Y210RWNtOXdaRzkzYm4xY2JpQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN0tDa2dQVDRnZEdocGN5NW9ZVzVrYkdWRGJHbGpheWh1WlhSM2IzSnJLWDFjYmlBZ0lDQWdJQ0FnYzNSNWJHVTllMFJTVDFCZlJFOVhUbDlOUlU1VlgwbFVSVTFmVTFSWlRFVjlYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJSHR3Y205MmFXUmxjbFI1Y0dVZ1BUMDlJRzVsZEhkdmNtc2dQeUFvWEc0Z0lDQWdJQ0FnSUNBZ1BFbGpiMjRnYm1GdFpUMTdTV052Yms1aGJXVXVRMmhsWTJ0OUlHTnZiRzl5UFh0SlkyOXVRMjlzYjNJdWMzVmpZMlZ6YzBSbFptRjFiSFI5SUM4K1hHNGdJQ0FnSUNBZ0lDa2dPaUFvWEc0Z0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKdVpYUjNiM0pyTFdOb1pXTnJYMTkwY21GdWMzQmhjbVZ1ZEZ3aVB1S2Nrend2WkdsMlBseHVJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0E4UTI5c2IzSkpibVJwWTJGMGIzSmNiaUFnSUNBZ0lDQWdJQ0JqYjJ4dmNqMTdibVYwZDI5eWEzMWNiaUFnSUNBZ0lDQWdJQ0J6YVhwbFBYdFRhWHBsTGt4SGZWeHVJQ0FnSUNBZ0lDQWdJSFI1Y0dVOWUwTnZiRzl5U1c1a2FXTmhkRzl5TGxSWlVFVlRMa1pKVEV4RlJIMWNiaUFnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnUEhOd1lXNWNiaUFnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKdVpYUjNiM0pyTFc1aGJXVXRhWFJsYlZ3aVhHNGdJQ0FnSUNBZ0lDQWdaR0YwWVMxMFpYTjBhV1E5ZTJBa2UyNWxkSGR2Y210OUxXNWxkSGR2Y21zdGFYUmxiV0I5WEc0Z0lDQWdJQ0FnSUNBZ2MzUjViR1U5ZTN0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOTJhV1JsY2xSNWNHVWdQVDA5SUc1bGRIZHZjbXRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUNkMllYSW9MUzFqYjJ4dmNpMTBaWGgwTFdSbFptRjFiSFFwSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ0ozWmhjaWd0TFdOdmJHOXlMWFJsZUhRdFlXeDBaWEp1WVhScGRtVXBKeXhjYmlBZ0lDQWdJQ0FnSUNCOWZWeHVJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnZTNSb2FYTXVZMjl1ZEdWNGRDNTBLRzVsZEhkdmNtc3BmVnh1SUNBZ0lDQWdJQ0E4TDNOd1lXNCtYRzRnSUNBZ0lDQThMMFJ5YjNCa2IzZHVUV1Z1ZFVsMFpXMCtYRzRnSUNBZ0tUdGNiaUFnZlZ4dVhHNGdJSEpsYm1SbGNrNXZia2x1Wm5WeVlVUmxabUYxYkhST1pYUjNiM0pyS0c1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dWN5d2dibVYwZDI5eWF5a2dlMXh1SUNBZ0lHTnZibk4wSUhzZ2NISnZkbWxrWlhKRGIyNW1hV2NzSUhObGRFRmpkR2wyWlU1bGRIZHZjbXNzSUhWd2MyVnlkRTVsZEhkdmNtdERiMjVtYVdkMWNtRjBhVzl1SUgwZ1BWeHVJQ0FnSUNBZ2RHaHBjeTV3Y205d2N6dGNibHh1SUNBZ0lHTnZibk4wSUhzZ1kyaGhhVzVKWkN3Z2RHbGphMlZ5TENCaWJHOWphMFY0Y0d4dmNtVnlWWEpzSUgwZ1BTQkNWVWxNVkY5SlRsOU9SVlJYVDFKTFUxdHVaWFIzYjNKclhUdGNiaUFnSUNCamIyNXpkQ0J1WlhSM2IzSnJUbUZ0WlNBOUlFNUZWRmRQVWt0ZlZFOWZUa0ZOUlY5TlFWQmJibVYwZDI5eWExMDdYRzRnSUNBZ1kyOXVjM1FnY25CalZYSnNJRDBnUTBoQlNVNWZTVVJmVkU5ZlVsQkRYMVZTVEY5TlFWQmJZMmhoYVc1SlpGMDdYRzVjYmlBZ0lDQmpiMjV6ZENCcGMwTjFjbkpsYm5SU2NHTlVZWEpuWlhRZ1BWeHVJQ0FnSUNBZ2NISnZkbWxrWlhKRGIyNW1hV2N1ZEhsd1pTQTlQVDBnVGtWVVYwOVNTMTlVV1ZCRlV5NVNVRU1nSmlaY2JpQWdJQ0FnSUhKd1kxVnliQ0E5UFQwZ2NISnZkbWxrWlhKRGIyNW1hV2N1Y25CalZYSnNPMXh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBOFJISnZjR1J2ZDI1TlpXNTFTWFJsYlZ4dUlDQWdJQ0FnSUNCclpYazllMjVsZEhkdmNtdDlYRzRnSUNBZ0lDQWdJR05zYjNObFRXVnVkVDE3ZEdocGN5NXdjbTl3Y3k1b2FXUmxUbVYwZDI5eWEwUnliM0JrYjNkdWZWeHVJQ0FnSUNBZ0lDQnZia05zYVdOclBYdGhjM2x1WXlBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYm1WMGQyOXlhME52Ym1acFozVnlZWFJwYjI0Z1BTQndhV05yUW5rb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhSM2IzSnJRMjl1Wm1sbmRYSmhkR2x2Ym5Nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvWTI5dVptbG5LU0E5UGlCamIyNW1hV2N1Y25CalZYSnNJRDA5UFNCRFNFRkpUbDlKUkY5VVQxOVNVRU5mVlZKTVgwMUJVRnRqYUdGcGJrbGtYU3hjYmlBZ0lDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHTnZibVpwWjNWeVlYUnBiMjVKWkNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMV1Y0ZEhKaExXSnZiMnhsWVc0dFkyRnpkQ3dnYm04dGFXMXdiR2xqYVhRdFkyOWxjbU5wYjI1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVNGdVpYUjNiM0pyUTI5dVptbG5kWEpoZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaGRHbHZia2xrSUQwZ1lYZGhhWFFnZFhCelpYSjBUbVYwZDI5eWEwTnZibVpwWjNWeVlYUnBiMjRvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5Y0dOVmNtd3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2xqYTJWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTm9ZV2x1U1dRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtbGphMjVoYldVNklHNWxkSGR2Y210T1lXMWxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEp3WTFCeVpXWnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWJHOWphMFY0Y0d4dmNtVnlWWEpzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUkJZM1JwZG1VNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzI5MWNtTmxPaUJOWlhSaFRXVjBjbWxqYzA1bGRIZHZjbXRGZG1WdWRGTnZkWEpqWlM1RGRYTjBiMjFPWlhSM2IzSnJSbTl5YlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSE5sZEVGamRHbDJaVTVsZEhkdmNtc29ZMjl1Wm1sbmRYSmhkR2x2Ymtsa0tUdGNiaUFnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnYzNSNWJHVTllMFJTVDFCZlJFOVhUbDlOUlU1VlgwbFVSVTFmVTFSWlRFVjlYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJSHRwYzBOMWNuSmxiblJTY0dOVVlYSm5aWFFnUHlBb1hHNGdJQ0FnSUNBZ0lDQWdQRWxqYjI0Z2JtRnRaVDE3U1dOdmJrNWhiV1V1UTJobFkydDlJR052Ykc5eVBYdEpZMjl1UTI5c2IzSXVjM1ZqWTJWemMwUmxabUYxYkhSOUlDOCtYRzRnSUNBZ0lDQWdJQ2tnT2lBb1hHNGdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSnVaWFIzYjNKckxXTm9aV05yWDE5MGNtRnVjM0JoY21WdWRGd2lQdUtja3p3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBOFEyOXNiM0pKYm1ScFkyRjBiM0pjYmlBZ0lDQWdJQ0FnSUNCamIyeHZjajE3Ym1WMGQyOXlhMzFjYmlBZ0lDQWdJQ0FnSUNCemFYcGxQWHRUYVhwbExreEhmVnh1SUNBZ0lDQWdJQ0FnSUhSNWNHVTllME52Ykc5eVNXNWthV05oZEc5eUxsUlpVRVZUTGtaSlRFeEZSSDFjYmlBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ1BITndZVzVjYmlBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnVaWFIzYjNKckxXNWhiV1V0YVhSbGJWd2lYRzRnSUNBZ0lDQWdJQ0FnWkdGMFlTMTBaWE4wYVdROWUyQWtlMjVsZEhkdmNtdDlMVzVsZEhkdmNtc3RhWFJsYldCOVhHNGdJQ0FnSUNBZ0lDQWdjM1I1YkdVOWUzdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTkyYVdSbGNrTnZibVpwWnk1MGVYQmxJRDA5UFNCdVpYUjNiM0pyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlBbmRtRnlLQzB0WTI5c2IzSXRkR1Y0ZEMxa1pXWmhkV3gwS1NkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklDZDJZWElvTFMxamIyeHZjaTEwWlhoMExXRnNkR1Z5Ym1GMGFYWmxLU2NzWEc0Z0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUh0MGFHbHpMbU52Ym5SbGVIUXVkQ2h1WlhSM2IzSnJLWDFjYmlBZ0lDQWdJQ0FnUEM5emNHRnVQbHh1SUNBZ0lDQWdQQzlFY205d1pHOTNiazFsYm5WSmRHVnRQbHh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0J5Wlc1a1pYSW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2UxeHVJQ0FnSUNBZ2FHbHpkRzl5ZVN4Y2JpQWdJQ0FnSUdocFpHVkZiR1Z0Wlc1MGMwWnZjazl1WW05aGNtUnBibWNzWEc0Z0lDQWdJQ0JvYVdSbFRtVjBkMjl5YTBSeWIzQmtiM2R1TEZ4dUlDQWdJQ0FnYzJodmRXeGtVMmh2ZDFSbGMzUk9aWFIzYjNKcmN5eGNiaUFnSUNBZ0lITm9iM2RVWlhOMGJtVjBUV1Z6YzJGblpVbHVSSEp2Y0dSdmQyNHNYRzRnSUNBZ0lDQm9hV1JsVkdWemRFNWxkRTFsYzNOaFoyVXNYRzRnSUNBZ0lDQnVaWFIzYjNKclEyOXVabWxuZFhKaGRHbHZibk1zWEc0Z0lDQWdmU0E5SUhSb2FYTXVjSEp2Y0hNN1hHNWNiaUFnSUNCamIyNXpkQ0J5Y0dOTWFYTjBSR1YwWVdsc1YybDBhRzkxZEV4dlkyRnNTRzl6ZEVGdVpFeHBibVZoSUQwZ2NHbGphMEo1S0Z4dUlDQWdJQ0FnYm1WMGQyOXlhME52Ym1acFozVnlZWFJwYjI1ekxGeHVJQ0FnSUNBZ0tHTnZibVpwWnlrZ1BUNWNiaUFnSUNBZ0lDQWdZMjl1Wm1sbkxuSndZMVZ5YkNBaFBUMGdURTlEUVV4SVQxTlVYMUpRUTE5VlVrd2dKaVpjYmlBZ0lDQWdJQ0FnWTI5dVptbG5Mbkp3WTFWeWJDQWhQVDBnVEVsT1JVRmZWRVZUVkU1RlZGOVNVRU5mVlZKTUxGeHVJQ0FnSUNrN1hHNGdJQ0FnWTI5dWMzUWdjbkJqVEdsemRFUmxkR0ZwYkVadmNreHZZMkZzU0c5emRDQTlJSEJwWTJ0Q2VTaGNiaUFnSUNBZ0lHNWxkSGR2Y210RGIyNW1hV2QxY21GMGFXOXVjeXhjYmlBZ0lDQWdJQ2hqYjI1bWFXY3BJRDArSUdOdmJtWnBaeTV5Y0dOVmNtd2dQVDA5SUV4UFEwRk1TRTlUVkY5U1VFTmZWVkpNTEZ4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0JqYjI1emRDQnBjMDl3Wlc0Z1BTQjBhR2x6TG5CeWIzQnpMbTVsZEhkdmNtdEVjbTl3Wkc5M2JrOXdaVzQ3WEc0Z0lDQWdZMjl1YzNRZ2V5QjBJSDBnUFNCMGFHbHpMbU52Ym5SbGVIUTdYRzVjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ1BFUnliM0JrYjNkdVhHNGdJQ0FnSUNBZ0lHbHpUM0JsYmoxN2FYTlBjR1Z1ZlZ4dUlDQWdJQ0FnSUNCdmJrTnNhV05yVDNWMGMybGtaVDE3S0dWMlpXNTBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2V5QmpiR0Z6YzB4cGMzUWdmU0E5SUdWMlpXNTBMblJoY21kbGREdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQnBjMGx1UTJ4aGMzTk1hWE4wSUQwZ0tHTnNZWE56VG1GdFpTa2dQVDRnWTJ4aGMzTk1hWE4wTG1OdmJuUmhhVzV6S0dOc1lYTnpUbUZ0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JtOTBWRzluWjJ4bFJXeGxiV1Z1ZEVsdVpHVjRJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXZkRlJ2WjJkc1pVVnNaVzFsYm5SRGJHRnpjMjVoYldWekxtWnBibVJKYm1SbGVDaHBjMGx1UTJ4aGMzTk1hWE4wS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNodWIzUlViMmRuYkdWRmJHVnRaVzUwU1c1a1pYZ2dQVDA5SUMweEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkQzV6ZEc5d1VISnZjR0ZuWVhScGIyNG9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHaHBaR1ZPWlhSM2IzSnJSSEp2Y0dSdmQyNG9LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJR052Ym5SaGFXNWxja05zWVhOelRtRnRaVDFjSW01bGRIZHZjbXN0WkhKdmNIQnZYQ0pjYmlBZ0lDQWdJQ0FnZWtsdVpHVjRQWHMxTlgxY2JpQWdJQ0FnSUNBZ2MzUjViR1U5ZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11Y0hKdmNITXVaSEp2Y0dSdmQyNVRkSGxzWlhNZ2ZId2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOXphWFJwYjI0NklDZGhZbk52YkhWMFpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMGIzQTZJQ2MxT0hCNEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhkcFpIUm9PaUFuTXpBNWNIZ25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2VrbHVaR1Y0T2lBbk5UVW5MRnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBibTVsY2xOMGVXeGxQWHQ3WEc0Z0lDQWdJQ0FnSUNBZ2NHRmtaR2x1WnpvZ0p6RTJjSGdnTUNjc1hHNGdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2libVYwZDI5eWF5MWtjbTl3Wkc5M2JpMW9aV0ZrWlhKY0lqNWNiaUFnSUNBZ0lDQWdJQ0I3YUdsa1pVVnNaVzFsYm5SelJtOXlUMjVpYjJGeVpHbHVaeUEvSUc1MWJHd2dPaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0ltNWxkSGR2Y21zdFpISnZjR1J2ZDI0dGRHbDBiR1ZjSWo1N2RDZ25ibVYwZDI5eWEzTW5LWDA4TDJScGRqNWNiaUFnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBZ0lIdG9hV1JsUld4bGJXVnVkSE5HYjNKUGJtSnZZWEprYVc1bklEOGdiblZzYkNBNklDaGNiaUFnSUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpYm1WMGQyOXlheTFrY205d1pHOTNiaTFrYVhacFpHVnlYQ0lnTHo1Y2JpQWdJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0FnSUh0emFHOTNWR1Z6ZEc1bGRFMWxjM05oWjJWSmJrUnliM0JrYjNkdUlDWW1JQ0ZvYVdSbFJXeGxiV1Z1ZEhOR2IzSlBibUp2WVhKa2FXNW5JRDhnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSnVaWFIzYjNKckxXUnliM0JrYjNkdUxXTnZiblJsYm5SY0lqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2UzUW9KM1J2WjJkc1pWUmxjM1JPWlhSM2IzSnJjeWNzSUZ0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFlWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhSEpsWmoxY0lpTmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYTJWNVBWd2lZV1IyWVc1alpXUlRaWFIwYVc1bmMweHBibXRjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2libVYwZDI5eWF5MWtjbTl3Wkc5M2JpMWpiMjUwWlc1MExTMXNhVzVyWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWV5aGxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1V1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHbGtaVTVsZEhkdmNtdEVjbTl3Wkc5M2JpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb2FYTjBiM0o1TG5CMWMyZ29ZQ1I3UVVSV1FVNURSVVJmVWs5VlZFVjlJM05vYjNjdGRHVnpkRzVsZEhOZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UzUW9KM05vYjNkSWFXUmxKeWw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5aFBpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1hTbDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeENkWFIwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yUFh0b2FXUmxWR1Z6ZEU1bGRFMWxjM05oWjJWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2libVYwZDI5eWF5MWtjbTl3Wkc5M2JpMWpiMjUwWlc1MExTMWthWE50YVhOelhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdDBLQ2RrYVhOdGFYTnpKeWw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHd2UW5WMGRHOXVQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FnSUNBZ0tTQTZJRzUxYkd4OVhHNGdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dVhHNGdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWJtVjBkMjl5YXkxa2NtOXdaRzkzYmkxc2FYTjBYQ0krWEc0Z0lDQWdJQ0FnSUNBZ2UzUm9hWE11Y21WdVpHVnlUbVYwZDI5eWEwVnVkSEo1S0U1RlZGZFBVa3RmVkZsUVJWTXVUVUZKVGs1RlZDbDlYRzVjYmlBZ0lDQWdJQ0FnSUNCN2RHaHBjeTV5Wlc1a1pYSkRkWE4wYjIxU2NHTk1hWE4wS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbkJqVEdsemRFUmxkR0ZwYkZkcGRHaHZkWFJNYjJOaGJFaHZjM1JCYm1STWFXNWxZU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0hKdmNITXVjSEp2ZG1sa1pYSkRiMjVtYVdjc1hHNGdJQ0FnSUNBZ0lDQWdLWDFjYmx4dUlDQWdJQ0FnSUNBZ0lIdHphRzkxYkdSVGFHOTNWR1Z6ZEU1bGRIZHZjbXR6SUNZbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUR3K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUh0MGFHbHpMbkpsYm1SbGNrNWxkSGR2Y210RmJuUnllU2hPUlZSWFQxSkxYMVJaVUVWVExrZFBSVkpNU1NsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUh0MGFHbHpMbkpsYm1SbGNrNWxkSGR2Y210RmJuUnllU2hPUlZSWFQxSkxYMVJaVUVWVExsTkZVRTlNU1VFcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCN1UwaFBWVXhFWDFOSVQxZGZURWxPUlVGZlZFVlRWRTVGVkY5T1JWUlhUMUpMSUNZbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNSb2FYTXVjbVZ1WkdWeVRtOXVTVzVtZFhKaFJHVm1ZWFZzZEU1bGRIZHZjbXNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxkSGR2Y210RGIyNW1hV2QxY21GMGFXOXVjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RrVlVWMDlTUzE5VVdWQkZVeTVNU1U1RlFWOVVSVk5VVGtWVUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4THo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNSb2FYTXVjbVZ1WkdWeVEzVnpkRzl0VW5CalRHbHpkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5Y0dOTWFYTjBSR1YwWVdsc1JtOXlURzlqWVd4SWIzTjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNISnZjSE11Y0hKdmRtbGtaWEpEYjI1bWFXY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdleUJwYzB4dlkyRnNTRzl6ZERvZ2RISjFaU0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQQzgrWEc0Z0lDQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdQQzlrYVhZK1hHNWNiaUFnSUNBZ0lDQWdlM1JvYVhNdWNtVnVaR1Z5UVdSa1EzVnpkRzl0UW5WMGRHOXVLQ2w5WEc0Z0lDQWdJQ0E4TDBSeWIzQmtiM2R1UGx4dUlDQWdJQ2s3WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTI5dGNHOXpaU2hjYmlBZ2QybDBhRkp2ZFhSbGNpeGNiaUFnWTI5dWJtVmpkQ2h0WVhCVGRHRjBaVlJ2VUhKdmNITXNJRzFoY0VScGMzQmhkR05vVkc5UWNtOXdjeWtzWEc0cEtFNWxkSGR2Y210RWNtOXdaRzkzYmlrN1hHNGlMQ0pwYlhCdmNuUWdVbVZoWTNRc0lIc2dkWE5sUTI5dWRHVjRkQ3dnZFhObFVtVm1JSDBnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibHh1YVcxd2IzSjBJRUpwWjA1MWJXSmxjaUJtY205dElDZGlhV2R1ZFcxaVpYSXVhbk1uTzF4dWFXMXdiM0owSUhzZ1JXUnBkRWRoYzAxdlpHVnpJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2YzJoaGNtVmtMMk52Ym5OMFlXNTBjeTluWVhNbk8xeHVYRzVwYlhCdmNuUWdRblYwZEc5dUlHWnliMjBnSnk0dUx5NHVMM1ZwTDJKMWRIUnZiaWM3WEc1Y2JtbHRjRzl5ZENCN1hHNGdJRlJsZUhSQmJHbG5iaXhjYmlBZ1JtOXVkRmRsYVdkb2RDeGNiaUFnVkdWNGRFTnZiRzl5TEZ4dUlDQlVaWGgwVm1GeWFXRnVkQ3hjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2YUdWc2NHVnljeTlqYjI1emRHRnVkSE12WkdWemFXZHVMWE41YzNSbGJTYzdYRzVwYlhCdmNuUWdleUJVWlhoMElIMGdabkp2YlNBbkxpNHZMaTR2WTI5dGNHOXVaVzUwTFd4cFluSmhjbmtuTzF4dWFXMXdiM0owSUhzZ1lYSmxSR0Z3Y0ZOMVoyZGxjM1JsWkVGdVpGUjRVR0Z5WVcxSFlYTkdaV1Z6VkdobFUyRnRaU0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZkWFJwYkhNdlkyOXVabWx5YlMxMGVDNTFkR2xzSnp0Y2JseHVhVzF3YjNKMElFbHVabTlVYjI5c2RHbHdJR1p5YjIwZ0p5NHVMeTR1TDNWcEwybHVabTh0ZEc5dmJIUnBjQ2M3WEc1cGJYQnZjblFnUlhKeWIzSk5aWE56WVdkbElHWnliMjBnSnk0dUx5NHVMM1ZwTDJWeWNtOXlMVzFsYzNOaFoyVW5PMXh1YVcxd2IzSjBJRUZrZG1GdVkyVmtSMkZ6UTI5dWRISnZiSE1nWm5KdmJTQW5MaTR2WVdSMllXNWpaV1F0WjJGekxXTnZiblJ5YjJ4ekwyRmtkbUZ1WTJWa0xXZGhjeTFqYjI1MGNtOXNjeTVqYjIxd2IyNWxiblFuTzF4dWFXMXdiM0owSUVGamRHbHZibUZpYkdWTlpYTnpZV2RsSUdaeWIyMGdKeTR1THk0dUwzVnBMMkZqZEdsdmJtRmliR1V0YldWemMyRm5aUzloWTNScGIyNWhZbXhsTFcxbGMzTmhaMlVuTzF4dVhHNXBiWEJ2Y25RZ2V5QkpNVGh1UTI5dWRHVjRkQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMMk52Ym5SbGVIUnpMMmt4T0c0bk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQkZaR2wwUjJGelJHbHpjR3hoZVNoN1hHNGdJRzF2WkdVZ1BTQkZaR2wwUjJGelRXOWtaWE11Ylc5a2FXWjVTVzVRYkdGalpTeGNiaUFnWlhOMGFXMWhkR1ZrVFdsdWFXMTFiVTVoZEdsMlpTeGNiaUFnZEhKaGJuTmhZM1JwYjI0c1hHNGdJR2RoYzFCeWFXTmxMRnh1SUNCelpYUkhZWE5RY21salpTeGNiaUFnWjJGelRHbHRhWFFzWEc0Z0lITmxkRWRoYzB4cGJXbDBMRnh1SUNCd2NtOXdaWEpIWVhOTWFXMXBkQ3hjYmlBZ1pHRndjRk4xWjJkbGMzUmxaRWRoYzBabFpVRmphMjV2ZDJ4bFpHZGxaQ3hjYmlBZ2MyVjBSR0Z3Y0ZOMVoyZGxjM1JsWkVkaGMwWmxaVUZqYTI1dmQyeGxaR2RsWkN4Y2JpQWdiMjVOWVc1MVlXeERhR0Z1WjJVc1hHNGdJRzFwYm1sdGRXMUhZWE5NYVcxcGRDeGNiaUFnWW1Gc1lXNWpaVVZ5Y205eUxGeHVJQ0JuWVhORmNuSnZjbk1zWEc0Z0lIUjRVR0Z5WVcxelNHRjJaVUpsWlc1RGRYTjBiMjFwZW1Wa0xGeHVmU2tnZTF4dUlDQmpiMjV6ZENCMElEMGdkWE5sUTI5dWRHVjRkQ2hKTVRodVEyOXVkR1Y0ZENrN1hHNGdJR052Ym5OMElITmpjbTlzYkZKbFppQTlJSFZ6WlZKbFppaHVkV3hzS1R0Y2JseHVJQ0JqYjI1emRDQmtZWEJ3VTNWbloyVnpkR1ZrUVc1a1ZIaFFZWEpoYlVkaGMwWmxaWE5CY21WVWFHVlRZVzFsSUQxY2JpQWdJQ0JoY21WRVlYQndVM1ZuWjJWemRHVmtRVzVrVkhoUVlYSmhiVWRoYzBabFpYTlVhR1ZUWVcxbEtIUnlZVzV6WVdOMGFXOXVLVHRjYmx4dUlDQmpiMjV6ZENCeVpYRjFhWEpsUkdGd2NFRmphMjV2ZDJ4bFpHZGxiV1Z1ZENBOUlFSnZiMnhsWVc0b1hHNGdJQ0FnZEhKaGJuTmhZM1JwYjI0L0xtUmhjSEJUZFdkblpYTjBaV1JIWVhOR1pXVnpJQ1ltWEc0Z0lDQWdJQ0FoWkdGd2NGTjFaMmRsYzNSbFpFZGhjMFpsWlVGamEyNXZkMnhsWkdkbFpDQW1KbHh1SUNBZ0lDQWdaR0Z3Y0ZOMVoyZGxjM1JsWkVGdVpGUjRVR0Z5WVcxSFlYTkdaV1Z6UVhKbFZHaGxVMkZ0WlN4Y2JpQWdLVHRjYmx4dUlDQnNaWFFnZDJGeWJtbHVaMDFsYzNOaFoyVTdYRzRnSUdsbUlDaGNiaUFnSUNCbllYTk1hVzFwZENBaFBUMGdkVzVrWldacGJtVmtJQ1ltWEc0Z0lDQWdjSEp2Y0dWeVIyRnpUR2x0YVhRZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmx4dUlDQWdJRzVsZHlCQ2FXZE9kVzFpWlhJb1oyRnpUR2x0YVhRcExteGxjM05VYUdGdUtHNWxkeUJDYVdkT2RXMWlaWElvY0hKdmNHVnlSMkZ6VEdsdGFYUXBLVnh1SUNBcElIdGNiaUFnSUNCM1lYSnVhVzVuVFdWemMyRm5aU0E5SUhRb0oyZGhjMHhwYldsMFVtVmpiMjF0Wlc1a1pXUW5MQ0JiY0hKdmNHVnlSMkZ6VEdsdGFYUmRLVHRjYmlBZ2ZWeHVYRzRnSUdOdmJuTjBJSE5vYjNkVWIzQkZjbkp2Y2lBOUlHSmhiR0Z1WTJWRmNuSnZjaUFtSmlCMGVGQmhjbUZ0YzBoaGRtVkNaV1Z1UTNWemRHOXRhWHBsWkR0Y2JseHVJQ0JzWlhRZ1pYSnliM0pMWlhrN1hHNGdJR2xtSUNoaVlXeGhibU5sUlhKeWIzSXBJSHRjYmlBZ0lDQmxjbkp2Y2t0bGVTQTlJQ2RwYm5OMVptWnBZMmxsYm5SR2RXNWtjeWM3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2laV1JwZEMxbllYTXRaR2x6Y0d4aGVWd2lQbHh1SUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSmxaR2wwTFdkaGN5MWthWE53YkdGNVgxOWpiMjUwWlc1MFhDSStYRzRnSUNBZ0lDQWdJSHR6YUc5M1ZHOXdSWEp5YjNJZ0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpWldScGRDMW5ZWE10WkdsemNHeGhlVjlmZDJGeWJtbHVaMXdpUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQRVZ5Y205eVRXVnpjMkZuWlNCbGNuSnZja3RsZVQxN1pYSnliM0pMWlhsOUlDOCtYRzRnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUh0M1lYSnVhVzVuVFdWemMyRm5aU0FtSmlBb1hHNGdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSmxaR2wwTFdkaGN5MWthWE53YkdGNVgxOTNZWEp1YVc1blhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBOFFXTjBhVzl1WVdKc1pVMWxjM05oWjJWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aVlXTjBhVzl1WVdKc1pTMXRaWE56WVdkbExTMTNZWEp1YVc1blhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlQxN2QyRnlibWx1WjAxbGMzTmhaMlY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xqYjI1R2FXeHNRMjlzYjNJOVhDSjJZWElvTFMxamIyeHZjaTEzWVhKdWFXNW5MV1JsWm1GMWJIUXBYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sU1dOdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdlM0psY1hWcGNtVkVZWEJ3UVdOcmJtOTNiR1ZrWjJWdFpXNTBJQ1ltSUNoY2JpQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0ltVmthWFF0WjJGekxXUnBjM0JzWVhsZlgyUmhjSEF0WVdOcmJtOTNiR1ZrWjJWdFpXNTBMWGRoY201cGJtZGNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeEJZM1JwYjI1aFlteGxUV1Z6YzJGblpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSmhZM1JwYjI1aFlteGxMVzFsYzNOaFoyVXRMWGRoY201cGJtZGNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbFBYdDBLQ2RuWVhORWFYTndiR0Y1UkdGd2NGZGhjbTVwYm1jbkxDQmJkSEpoYm5OaFkzUnBiMjR1YjNKcFoybHVYU2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xqYjI1R2FXeHNRMjlzYjNJOVhDSjJZWElvTFMxamIyeHZjaTEzWVhKdWFXNW5MV1JsWm1GMWJIUXBYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sU1dOdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdlMjF2WkdVZ1BUMDlJRVZrYVhSSFlYTk5iMlJsY3k1emNHVmxaRlZ3SUNZbUlDaGNiaUFnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbVZrYVhRdFoyRnpMV1JwYzNCc1lYbGZYM1J2Y0MxMGIyOXNkR2x3WENJK1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4VkdWNGRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyeHZjajE3VkdWNGRFTnZiRzl5TG5SbGVIUkVaV1poZFd4MGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSnBZVzUwUFh0VVpYaDBWbUZ5YVdGdWRDNWliMlI1VTIxOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdGelBWd2lhRFpjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjI1MFYyVnBaMmgwUFh0R2IyNTBWMlZwWjJoMExrSnZiR1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIdDBLQ2R6Y0dWbFpGVndWRzl2YkhScGNGUmxlSFFuS1gxN0p5QW5mVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThTVzVtYjFSdmIyeDBhWEJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOcGRHbHZiajFjSW5SdmNGd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdWdWRGUmxlSFE5ZTNRb0ozTndaV1ZrVlhCRmVIQnNZVzVoZEdsdmJpY3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BDOVVaWGgwUGx4dUlDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQThWR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lHTnZiRzl5UFh0VVpYaDBRMjlzYjNJdWRHVjRkRVJsWm1GMWJIUjlYRzRnSUNBZ0lDQWdJQ0FnZG1GeWFXRnVkRDE3VkdWNGRGWmhjbWxoYm5RdVpHbHpjR3hoZVUxa2ZWeHVJQ0FnSUNBZ0lDQWdJR0Z6UFZ3aWFERmNJbHh1SUNBZ0lDQWdJQ0FnSUhSbGVIUkJiR2xuYmoxN1ZHVjRkRUZzYVdkdUxrTmxiblJsY24xY2JpQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJSHRsYzNScGJXRjBaV1JOYVc1cGJYVnRUbUYwYVhabGZWeHVJQ0FnSUNBZ0lDQThMMVJsZUhRK1hHNGdJQ0FnSUNBZ0lIdHlaWEYxYVhKbFJHRndjRUZqYTI1dmQyeGxaR2RsYldWdWRDQW1KaUFvWEc0Z0lDQWdJQ0FnSUNBZ1BFSjFkSFJ2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQVndpWldScGRDMW5ZWE10WkdsemNHeGhlVjlmWkdGd2NDMWhZMnR1YjNkc1pXUm5aVzFsYm5RdFluVjBkRzl1WENKY2JpQWdJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczlleWdwSUQwK0lITmxkRVJoY0hCVGRXZG5aWE4wWldSSFlYTkdaV1ZCWTJ0dWIzZHNaV1JuWldRb2RISjFaU2w5WEc0Z0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0oyZGhjMFJwYzNCc1lYbEJZMnR1YjNkc1pXUm5aVVJoY0hCQ2RYUjBiMjVVWlhoMEp5bDlYRzRnSUNBZ0lDQWdJQ0FnUEM5Q2RYUjBiMjQrWEc0Z0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBZ0lIc2hjbVZ4ZFdseVpVUmhjSEJCWTJ0dWIzZHNaV1JuWlcxbGJuUWdKaVlnS0Z4dUlDQWdJQ0FnSUNBZ0lEeEJaSFpoYm1ObFpFZGhjME52Ym5SeWIyeHpYRzRnSUNBZ0lDQWdJQ0FnSUNCbllYTk1hVzFwZEQxN1oyRnpUR2x0YVhSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6WlhSSFlYTk1hVzFwZEQxN2MyVjBSMkZ6VEdsdGFYUjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbllYTlFjbWxqWlQxN1oyRnpVSEpwWTJWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6WlhSSFlYTlFjbWxqWlQxN2MyVjBSMkZ6VUhKcFkyVjlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrMWhiblZoYkVOb1lXNW5aVDE3YjI1TllXNTFZV3hEYUdGdVoyVjlYRzRnSUNBZ0lDQWdJQ0FnSUNCdGFXNXBiWFZ0UjJGelRHbHRhWFE5ZTIxcGJtbHRkVzFIWVhOTWFXMXBkSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHZGhjMFZ5Y205eWN6MTdaMkZ6UlhKeWIzSnpmVnh1SUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUR4a2FYWWdjbVZtUFh0elkzSnZiR3hTWldaOUlHTnNZWE56VG1GdFpUMWNJbVZrYVhRdFoyRnpMV1JwYzNCc1lYbGZYM05qY205c2JDMWliM1IwYjIxY0lpQXZQbHh1SUNBZ0lEd3ZaR2wyUGx4dUlDQXBPMXh1ZlZ4dVhHNUZaR2wwUjJGelJHbHpjR3hoZVM1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUcxdlpHVTZJRkJ5YjNCVWVYQmxjeTV2Ym1WUFppaFBZbXBsWTNRdWRtRnNkV1Z6S0VWa2FYUkhZWE5OYjJSbGN5a3BMRnh1SUNCbGMzUnBiV0YwWldSTmFXNXBiWFZ0VG1GMGFYWmxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNCbllYTlFjbWxqWlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdjMlYwUjJGelVISnBZMlU2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNCbllYTk1hVzFwZERvZ1VISnZjRlI1Y0dWekxtNTFiV0psY2l4Y2JpQWdjMlYwUjJGelRHbHRhWFE2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNCd2NtOXdaWEpIWVhOTWFXMXBkRG9nVUhKdmNGUjVjR1Z6TG01MWJXSmxjaXhjYmlBZ1pHRndjRk4xWjJkbGMzUmxaRWRoYzBabFpVRmphMjV2ZDJ4bFpHZGxaRG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUhObGRFUmhjSEJUZFdkblpYTjBaV1JIWVhOR1pXVkJZMnR1YjNkc1pXUm5aV1E2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNCMGNtRnVjMkZqZEdsdmJqb2dVSEp2Y0ZSNWNHVnpMbTlpYW1WamRDeGNiaUFnYjI1TllXNTFZV3hEYUdGdVoyVTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0J0YVc1cGJYVnRSMkZ6VEdsdGFYUTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUdKaGJHRnVZMlZGY25KdmNqb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJR2RoYzBWeWNtOXljem9nVUhKdmNGUjVjR1Z6TG05aWFtVmpkQ3hjYmlBZ2RIaFFZWEpoYlhOSVlYWmxRbVZsYmtOMWMzUnZiV2w2WldRNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dWZUdGNiaUlzSW1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnZlNCbWNtOXRJQ2N1TDJWa2FYUXRaMkZ6TFdScGMzQnNZWGt1WTI5dGNHOXVaVzUwSnp0Y2JpSXNJbWx0Y0c5eWRDQlNaV0ZqZENCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1WEc1cGJYQnZjblFnZXlCRlpHbDBSMkZ6VFc5a1pYTXNJRkJ5YVc5eWFYUjVUR1YyWld4eklIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OW5ZWE1uTzF4dWFXMXdiM0owSUh0Y2JpQWdRMjlzYjNJc1hHNGdJRlJsZUhSRGIyeHZjaXhjYmlBZ1ZHVjRkRlpoY21saGJuUXNYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZZMjl1YzNSaGJuUnpMMlJsYzJsbmJpMXplWE4wWlcwbk8xeHVhVzF3YjNKMElIc2dVRkpKVDFKSlZGbGZURVZXUlV4ZlNVTlBUbDlOUVZBZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5b1pXeHdaWEp6TDJOdmJuTjBZVzUwY3k5bllYTW5PMXh1YVcxd2IzSjBJSHNnZFhObFIyRnpSbVZsUTI5dWRHVjRkQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMMk52Ym5SbGVIUnpMMmRoYzBabFpTYzdYRzVwYlhCdmNuUWdleUIxYzJWSk1UaHVRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyaHZiMnR6TDNWelpVa3hPRzVEYjI1MFpYaDBKenRjYm1sdGNHOXlkQ0I3SUhWelpWUnlZVzV6WVdOMGFXOXVSWFpsYm5SR2NtRm5iV1Z1ZENCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJodmIydHpMM1Z6WlZSeVlXNXpZV04wYVc5dVJYWmxiblJHY21GbmJXVnVkQ2M3WEc1cGJYQnZjblFnZXlCMWMyVlVjbUZ1YzJGamRHbHZiazF2WkdGc1EyOXVkR1Y0ZENCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJOdmJuUmxlSFJ6TDNSeVlXNXpZV04wYVc5dUxXMXZaR0ZzSnp0Y2JtbHRjRzl5ZENCSmJtWnZWRzl2YkhScGNDQm1jbTl0SUNjdUxpOHVMaTkxYVM5cGJtWnZMWFJ2YjJ4MGFYQXZhVzVtYnkxMGIyOXNkR2x3Snp0Y2JtbHRjRzl5ZENCN0lFbGpiMjRzSUVsamIyNU9ZVzFsTENCSlkyOXVVMmw2WlN3Z1ZHVjRkQ0I5SUdaeWIyMGdKeTR1THk0dUwyTnZiWEJ2Ym1WdWRDMXNhV0p5WVhKNUp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdSV1JwZEVkaGMwWmxaVUoxZEhSdmJpaDdJSFZ6WlhKQlkydHViM2RzWldSblpXUkhZWE5OYVhOemFXNW5JSDBwSUh0Y2JpQWdZMjl1YzNRZ2RDQTlJSFZ6WlVreE9HNURiMjUwWlhoMEtDazdYRzRnSUdOdmJuTjBJSHRjYmlBZ0lDQmxaR2wwUjJGelRXOWtaU3hjYmlBZ0lDQm5ZWE5NYVcxcGRDeGNiaUFnSUNCb1lYTlRhVzExYkdGMGFXOXVSWEp5YjNJc1hHNGdJQ0FnWlhOMGFXMWhkR1ZWYzJWa0xGeHVJQ0FnSUcxaGVFWmxaVkJsY2tkaGN5eGNiaUFnSUNCdFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN5eGNiaUFnSUNCemRYQndiM0owYzBWSlVERTFOVGtzWEc0Z0lDQWdkSEpoYm5OaFkzUnBiMjRzWEc0Z0lIMGdQU0IxYzJWSFlYTkdaV1ZEYjI1MFpYaDBLQ2s3WEc0Z0lHTnZibk4wSUhzZ2RYQmtZWFJsVkhKaGJuTmhZM1JwYjI1RmRtVnVkRVp5WVdkdFpXNTBJSDBnUFNCMWMyVlVjbUZ1YzJGamRHbHZia1YyWlc1MFJuSmhaMjFsYm5Rb0tUdGNiaUFnWTI5dWMzUWdleUJ2Y0dWdVRXOWtZV3dnZlNBOUlIVnpaVlJ5WVc1ellXTjBhVzl1VFc5a1lXeERiMjUwWlhoMEtDazdYRzRnSUdOdmJuTjBJR1ZrYVhSRmJtRmliR1ZrSUQxY2JpQWdJQ0FoYUdGelUybHRkV3hoZEdsdmJrVnljbTl5SUh4OElIVnpaWEpCWTJ0dWIzZHNaV1JuWldSSFlYTk5hWE56YVc1bklEMDlQU0IwY25WbE8xeHVYRzRnSUdsbUlDZ2hjM1Z3Y0c5eWRITkZTVkF4TlRVNUlIeDhJQ0ZsYzNScGJXRjBaVlZ6WldRZ2ZId2dJV1ZrYVhSRmJtRmliR1ZrS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJSDFjYmx4dUlDQnNaWFFnYVdOdmJpQTlJR1Z6ZEdsdFlYUmxWWE5sWkR0Y2JpQWdiR1YwSUhScGRHeGxJRDBnWlhOMGFXMWhkR1ZWYzJWa08xeHVJQ0JwWmlBb1hHNGdJQ0FnWlhOMGFXMWhkR1ZWYzJWa0lEMDlQU0JRY21sdmNtbDBlVXhsZG1Wc2N5NW9hV2RvSUNZbVhHNGdJQ0FnWldScGRFZGhjMDF2WkdVZ1BUMDlJRVZrYVhSSFlYTk5iMlJsY3k1emQyRndjMXh1SUNBcElIdGNiaUFnSUNCcFkyOXVJRDBnSjNOM1lYQlRkV2RuWlhOMFpXUW5PMXh1SUNBZ0lIUnBkR3hsSUQwZ0ozTjNZWEJUZFdkblpYTjBaV1FuTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLR1Z6ZEdsdFlYUmxWWE5sWkNBOVBUMGdVSEpwYjNKcGRIbE1aWFpsYkhNdWRHVnVVR1Z5WTJWdWRFbHVZM0psWVhObFpDa2dlMXh1SUNBZ0lHbGpiMjRnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnZEdsMGJHVWdQU0FuZEdWdVVHVnlZMlZ1ZEVsdVkzSmxZWE5sWkNjN1hHNGdJSDFjYmx4dUlDQmpiMjV6ZENCdmNHVnVSV1JwZEVkaGMwWmxaVTF2WkdGc0lEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUhWd1pHRjBaVlJ5WVc1ellXTjBhVzl1UlhabGJuUkdjbUZuYldWdWRDaDdYRzRnSUNBZ0lDQm5ZWE5mWldScGRGOWhkSFJsYlhCMFpXUTZJQ2RpWVhOcFl5Y3NYRzRnSUNBZ2ZTazdYRzRnSUNBZ2IzQmxiazF2WkdGc0tDZGxaR2wwUjJGelJtVmxKeWs3WEc0Z0lIMDdYRzVjYmlBZ1kyOXVjM1FnYjNCbGJrRmtkbUZ1WTJWa1IyRnpSbVZsVFc5a1lXd2dQU0FvS1NBOVBpQjdYRzRnSUNBZ2RYQmtZWFJsVkhKaGJuTmhZM1JwYjI1RmRtVnVkRVp5WVdkdFpXNTBLSHRjYmlBZ0lDQWdJR2RoYzE5bFpHbDBYMkYwZEdWdGNIUmxaRG9nSjJGa2RtRnVZMlZrSnl4Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0J2Y0dWdVRXOWtZV3dvSjJGa2RtRnVZMlZrUjJGelJtVmxKeWs3WEc0Z0lIMDdYRzVjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbVZrYVhRdFoyRnpMV1psWlMxaWRYUjBiMjVjSWo1Y2JpQWdJQ0FnSUR4aWRYUjBiMjRnYjI1RGJHbGphejE3YjNCbGJrVmthWFJIWVhOR1pXVk5iMlJoYkgwZ1pHRjBZUzEwWlhOMGFXUTlYQ0psWkdsMExXZGhjeTFtWldVdFluVjBkRzl1WENJK1hHNGdJQ0FnSUNBZ0lIdHBZMjl1SUNZbUlDaGNiaUFnSUNBZ0lDQWdJQ0E4YzNCaGJpQmpiR0Z6YzA1aGJXVTlYQ0psWkdsMExXZGhjeTFtWldVdFluVjBkRzl1WDE5cFkyOXVYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdVRkpKVDFKSlZGbGZURVZXUlV4ZlNVTlBUbDlOUVZCYmFXTnZibDE5WEc0Z0lDQWdJQ0FnSUNBZ1BDOXpjR0Z1UGx4dUlDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQThjM0JoYmlCamJHRnpjMDVoYldVOVhDSmxaR2wwTFdkaGN5MW1aV1V0WW5WMGRHOXVYMTlzWVdKbGJGd2lQbnQwS0hScGRHeGxLWDA4TDNOd1lXNCtYRzRnSUNBZ0lDQWdJRHhKWTI5dVhHNGdJQ0FnSUNBZ0lDQWdibUZ0WlQxN1NXTnZiazVoYldVdVFYSnliM2RTYVdkb2RIMWNiaUFnSUNBZ0lDQWdJQ0JqYjJ4dmNqMTdRMjlzYjNJdWNISnBiV0Z5ZVVSbFptRjFiSFI5WEc0Z0lDQWdJQ0FnSUNBZ2MybDZaVDE3U1dOdmJsTnBlbVV1V0hOOVhHNGdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQThMMkoxZEhSdmJqNWNiaUFnSUNBZ0lIdGxjM1JwYldGMFpWVnpaV1FnUFQwOUlDZGpkWE4wYjIwbklDWW1JQ2hjYmlBZ0lDQWdJQ0FnUEdKMWRIUnZiaUJ2YmtOc2FXTnJQWHR2Y0dWdVFXUjJZVzVqWldSSFlYTkdaV1ZOYjJSaGJIMCtlM1FvSjJWa2FYUW5LWDA4TDJKMWRIUnZiajVjYmlBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0I3WlhOMGFXMWhkR1ZWYzJWa0lEMDlQU0FuWkdGd2NGTjFaMmRsYzNSbFpDY2dKaVlnS0Z4dUlDQWdJQ0FnSUNBOFNXNW1iMVJ2YjJ4MGFYQmNiaUFnSUNBZ0lDQWdJQ0JqYjI1MFpXNTBWR1Y0ZEQxN1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbVZrYVhRdFoyRnpMV1psWlMxaWRYUjBiMjVmWDNSdmIyeDBhWEJjSWo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNSeVlXNXpZV04wYVc5dVB5NXZjbWxuYVc0Z0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhVWlhoMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdFVaWGgwVm1GeWFXRnVkQzVpYjJSNVUyMTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY3oxY0ltZzJYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlQWHRVWlhoMFEyOXNiM0l1ZEdWNGRFRnNkR1Z5Ym1GMGFYWmxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0MEtDZGtZWEJ3VTNWbloyVnpkR1ZrVkc5dmJIUnBjQ2NzSUZ0MGNtRnVjMkZqZEdsdmJpNXZjbWxuYVc1ZEtYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMVJsZUhRK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR4VVpYaDBJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbFRiWDBnWVhNOVhDSm9ObHdpUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4aVBudDBLQ2R0WVhoQ1lYTmxSbVZsSnlsOVBDOWlQaUI3YldGNFJtVmxVR1Z5UjJGemZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHhVWlhoMElIWmhjbWxoYm5ROWUxUmxlSFJXWVhKcFlXNTBMbUp2WkhsVGJYMGdZWE05WENKb05sd2lQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhpUG50MEtDZHRZWGhRY21sdmNtbDBlVVpsWlNjcGZUd3ZZajRnZTIxaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGemZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHhVWlhoMElIWmhjbWxoYm5ROWUxUmxlSFJXWVhKcFlXNTBMbUp2WkhsVGJYMGdZWE05WENKb05sd2lQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhpUG50MEtDZG5ZWE5NYVcxcGRDY3BmVHd2WWo0Z2UyZGhjMHhwYldsMGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnY0c5emFYUnBiMjQ5WENKMGIzQmNJbHh1SUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnS1gxY2JpQWdJQ0E4TDJScGRqNWNiaUFnS1R0Y2JuMWNibHh1UldScGRFZGhjMFpsWlVKMWRIUnZiaTV3Y205d1ZIbHdaWE1nUFNCN1hHNGdJSFZ6WlhKQlkydHViM2RzWldSblpXUkhZWE5OYVhOemFXNW5PaUJRY205d1ZIbHdaWE11WW05dmJDeGNibjA3WEc0aUxDSmxlSEJ2Y25RZ2V5QmtaV1poZFd4MElIMGdabkp2YlNBbkxpOWxaR2wwTFdkaGN5MW1aV1V0WW5WMGRHOXVKenRjYmlJc0ltbHRjRzl5ZENCU1pXRmpkQ0JtY205dElDZHlaV0ZqZENjN1hHNWNibWx0Y0c5eWRDQjdJRVZrYVhSSFlYTk5iMlJsY3l3Z1VISnBiM0pwZEhsTVpYWmxiSE1nZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2WTI5dWMzUmhiblJ6TDJkaGN5YzdYRzVwYlhCdmNuUWdleUIxYzJWSk1UaHVRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyaHZiMnR6TDNWelpVa3hPRzVEYjI1MFpYaDBKenRjYm1sdGNHOXlkQ0I3SUhWelpWUnlZVzV6WVdOMGFXOXVUVzlrWVd4RGIyNTBaWGgwSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2WTI5dWRHVjRkSE12ZEhKaGJuTmhZM1JwYjI0dGJXOWtZV3duTzF4dWFXMXdiM0owSUVKdmVDQm1jbTl0SUNjdUxpOHVMaTkxYVM5aWIzZ25PMXh1YVcxd2IzSjBJRVZ5Y205eVRXVnpjMkZuWlNCbWNtOXRJQ2N1TGk4dUxpOTFhUzlsY25KdmNpMXRaWE56WVdkbEp6dGNibWx0Y0c5eWRDQlFiM0J2ZG1WeUlHWnliMjBnSnk0dUx5NHVMM1ZwTDNCdmNHOTJaWEluTzF4dVhHNXBiWEJ2Y25RZ2UxeHVJQ0JVWlhoMFEyOXNiM0lzWEc0Z0lGUmxlSFJXWVhKcFlXNTBMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlvWld4d1pYSnpMMk52Ym5OMFlXNTBjeTlrWlhOcFoyNHRjM2x6ZEdWdEp6dGNibWx0Y0c5eWRDQjdJRWxPVTFWR1JrbERTVVZPVkY5R1ZVNUVVMTlGVWxKUFVsOUxSVmtnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlvWld4d1pYSnpMMk52Ym5OMFlXNTBjeTlsY25KdmNpMXJaWGx6Snp0Y2JtbHRjRzl5ZENCN0lIVnpaVWRoYzBabFpVTnZiblJsZUhRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5amIyNTBaWGgwY3k5bllYTkdaV1VuTzF4dWFXMXdiM0owSUVGd2NFeHZZV1JwYm1kVGNHbHVibVZ5SUdaeWIyMGdKeTR1TDJGd2NDMXNiMkZrYVc1bkxYTndhVzV1WlhJbk8xeHVhVzF3YjNKMElGcEZUa1JGVTB0ZlZWSk1VeUJtY205dElDY3VMaTh1TGk4dUxpOW9aV3h3WlhKekwyTnZibk4wWVc1MGN5OTZaVzVrWlhOckxYVnliQ2M3WEc1cGJYQnZjblFnZXlCVVpYaDBJSDBnWm5KdmJTQW5MaTR2TGk0dlkyOXRjRzl1Wlc1MExXeHBZbkpoY25rbk8xeHVhVzF3YjNKMElFVmthWFJIWVhOSmRHVnRJR1p5YjIwZ0p5NHZaV1JwZEMxbllYTXRhWFJsYlNjN1hHNXBiWEJ2Y25RZ1RtVjBkMjl5YTFOMFlYUnBjM1JwWTNNZ1puSnZiU0FuTGk5dVpYUjNiM0pyTFhOMFlYUnBjM1JwWTNNbk8xeHVYRzVqYjI1emRDQkZaR2wwUjJGelJtVmxVRzl3YjNabGNpQTlJQ2dwSUQwK0lIdGNiaUFnWTI5dWMzUWdleUJpWVd4aGJtTmxSWEp5YjNJc0lHVmthWFJIWVhOTmIyUmxJSDBnUFNCMWMyVkhZWE5HWldWRGIyNTBaWGgwS0NrN1hHNGdJR052Ym5OMElIUWdQU0IxYzJWSk1UaHVRMjl1ZEdWNGRDZ3BPMXh1SUNCamIyNXpkQ0I3SUdOc2IzTmxRV3hzVFc5a1lXeHpMQ0JqYkc5elpVMXZaR0ZzTENCamRYSnlaVzUwVFc5a1lXd3NJRzl3Wlc1TmIyUmhiRU52ZFc1MElIMGdQVnh1SUNBZ0lIVnpaVlJ5WVc1ellXTjBhVzl1VFc5a1lXeERiMjUwWlhoMEtDazdYRzVjYmlBZ2FXWWdLR04xY25KbGJuUk5iMlJoYkNBaFBUMGdKMlZrYVhSSFlYTkdaV1VuS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJSDFjYmx4dUlDQnNaWFFnY0c5d2RYQlVhWFJzWlNBOUlDZGxaR2wwUjJGelJtVmxUVzlrWVd4VWFYUnNaU2M3WEc0Z0lHbG1JQ2hsWkdsMFIyRnpUVzlrWlNBOVBUMGdSV1JwZEVkaGMwMXZaR1Z6TG1OaGJtTmxiQ2tnZTF4dUlDQWdJSEJ2Y0hWd1ZHbDBiR1VnUFNBblpXUnBkRU5oYm1ObGJHeGhkR2x2YmtkaGMwWmxaVTF2WkdGc1ZHbDBiR1VuTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLR1ZrYVhSSFlYTk5iMlJsSUQwOVBTQkZaR2wwUjJGelRXOWtaWE11YzNCbFpXUlZjQ2tnZTF4dUlDQWdJSEJ2Y0hWd1ZHbDBiR1VnUFNBblpXUnBkRk53WldWa1ZYQkZaR2wwUjJGelJtVmxUVzlrWVd4VWFYUnNaU2M3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhRYjNCdmRtVnlYRzRnSUNBZ0lDQjBhWFJzWlQxN2RDaHdiM0IxY0ZScGRHeGxLWDFjYmlBZ0lDQWdJQzh2SUdKbGJHOTNJR3h2WjJsaklHVnVjM1Z5WlhNZ2RHaGhkQ0JpWVdOcklHSjFkSFJ2YmlCcGN5QjJhWE5wWW14bElHOXViSGtnYVdZZ2RHaGxjbVVnWVhKbElHOTBhR1Z5SUcxdlpHRnNjeUJ2Y0dWdUlHSmxabTl5WlNCMGFHbHpMbHh1SUNBZ0lDQWdiMjVDWVdOclBYdGNiaUFnSUNBZ0lDQWdiM0JsYmsxdlpHRnNRMjkxYm5RZ1BUMDlJREVnUHlCMWJtUmxabWx1WldRZ09pQW9LU0E5UGlCamJHOXpaVTF2WkdGc0tGc25aV1JwZEVkaGMwWmxaU2RkS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYjI1RGJHOXpaVDE3WTJ4dmMyVkJiR3hOYjJSaGJITjlYRzRnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0psWkdsMExXZGhjeTFtWldVdGNHOXdiM1psY2x3aVhHNGdJQ0FnUGx4dUlDQWdJQ0FnUEQ1Y2JpQWdJQ0FnSUNBZ1BFRndjRXh2WVdScGJtZFRjR2x1Ym1WeUlDOCtYRzRnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2laV1JwZEMxbllYTXRabVZsTFhCdmNHOTJaWEpmWDNkeVlYQndaWEpjSWo1Y2JpQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0ltVmthWFF0WjJGekxXWmxaUzF3YjNCdmRtVnlYMTlqYjI1MFpXNTBYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQThRbTk0UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3WW1Gc1lXNWpaVVZ5Y205eUlDWW1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4UlhKeWIzSk5aWE56WVdkbElHVnljbTl5UzJWNVBYdEpUbE5WUmtaSlEwbEZUbFJmUmxWT1JGTmZSVkpTVDFKZlMwVlpmU0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbVZrYVhRdFoyRnpMV1psWlMxd2IzQnZkbVZ5WDE5amIyNTBaVzUwWDE5b1pXRmtaWEpjSWo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGMzQmhiaUJqYkdGemMwNWhiV1U5WENKbFpHbDBMV2RoY3kxbVpXVXRjRzl3YjNabGNsOWZZMjl1ZEdWdWRGOWZhR1ZoWkdWeUxXOXdkR2x2Ymx3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlM1FvSjJkaGMwOXdkR2x2YmljcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZjM0JoYmo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGMzQmhiaUJqYkdGemMwNWhiV1U5WENKbFpHbDBMV2RoY3kxbVpXVXRjRzl3YjNabGNsOWZZMjl1ZEdWdWRGOWZhR1ZoWkdWeUxYUnBiV1ZjSWo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGxaR2wwUjJGelRXOWtaU0FoUFQwZ1JXUnBkRWRoYzAxdlpHVnpMbk4zWVhCeklDWW1JSFFvSjNScGJXVW5LWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDNOd1lXNCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSE53WVc0Z1kyeGhjM05PWVcxbFBWd2laV1JwZEMxbllYTXRabVZsTFhCdmNHOTJaWEpmWDJOdmJuUmxiblJmWDJobFlXUmxjaTF0WVhndFptVmxYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2RDZ25iV0Y0Um1WbEp5bDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzl6Y0dGdVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdleWhsWkdsMFIyRnpUVzlrWlNBOVBUMGdSV1JwZEVkaGMwMXZaR1Z6TG1OaGJtTmxiQ0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWa2FYUkhZWE5OYjJSbElEMDlQU0JGWkdsMFIyRnpUVzlrWlhNdWMzQmxaV1JWY0NrZ0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhGWkdsMFIyRnpTWFJsYlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnBiM0pwZEhsTVpYWmxiRDE3VUhKcGIzSnBkSGxNWlhabGJITXVkR1Z1VUdWeVkyVnVkRWx1WTNKbFlYTmxaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3WldScGRFZGhjMDF2WkdVZ1BUMDlJRVZrYVhSSFlYTk5iMlJsY3k1dGIyUnBabmxKYmxCc1lXTmxJQ1ltSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFJXUnBkRWRoYzBsMFpXMGdjSEpwYjNKcGRIbE1aWFpsYkQxN1VISnBiM0pwZEhsTVpYWmxiSE11Ykc5M2ZTQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThSV1JwZEVkaGMwbDBaVzBnY0hKcGIzSnBkSGxNWlhabGJEMTdVSEpwYjNKcGRIbE1aWFpsYkhNdWJXVmthWFZ0ZlNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFJXUnBkRWRoYzBsMFpXMGdjSEpwYjNKcGRIbE1aWFpsYkQxN1VISnBiM0pwZEhsTVpYWmxiSE11YUdsbmFIMGdMejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSmxaR2wwTFdkaGN5MW1aV1V0Y0c5d2IzWmxjbDlmWTI5dWRHVnVkRjlmYzJWd1lYSmhkRzl5WENJZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2UyVmthWFJIWVhOTmIyUmxJRDA5UFNCRlpHbDBSMkZ6VFc5a1pYTXViVzlrYVdaNVNXNVFiR0ZqWlNBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRVZrYVhSSFlYTkpkR1Z0SUhCeWFXOXlhWFI1VEdWMlpXdzllMUJ5YVc5eWFYUjVUR1YyWld4ekxtUkJjSEJUZFdkblpYTjBaV1I5SUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR4RlpHbDBSMkZ6U1hSbGJTQndjbWx2Y21sMGVVeGxkbVZzUFh0UWNtbHZjbWwwZVV4bGRtVnNjeTVqZFhOMGIyMTlJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhDYjNnK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR4T1pYUjNiM0pyVTNSaGRHbHpkR2xqY3lBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW1Wa2FYUXRaMkZ6TFdabFpTMXdiM0J2ZG1WeVgxOXJibTkzTFcxdmNtVmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZzYVdkdVBWd2lZMlZ1ZEdWeVhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxN1ZHVjRkRU52Ykc5eUxuUmxlSFJCYkhSbGNtNWhkR2wyWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFlXYzllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbE5aSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhKcFlXNTBQWHRVWlhoMFZtRnlhV0Z1ZEM1aWIyUjVVMjE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhNOVhDSm9ObHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZENnbmJHVmhjbTVOYjNKbFFXSnZkWFJIWVhNbkxDQmJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJaWGs5WENKc1pXRnliazF2Y21WTWFXNXJYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwUFZ3aVgySnNZVzVyWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZzUFZ3aWJtOXZjR1Z1WlhJZ2JtOXlaV1psY25KbGNsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoeVpXWTllMXBGVGtSRlUwdGZWVkpNVXk1VlUwVlNYMGRWU1VSRlgwZEJVMzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlM1FvSjJ4bFlYSnVUVzl5WlNjcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzloUGl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZEtYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BDOVVaWGgwUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnUEM4K1hHNGdJQ0FnUEM5UWIzQnZkbVZ5UGx4dUlDQXBPMXh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1JXUnBkRWRoYzBabFpWQnZjRzkyWlhJN1hHNGlMQ0pwYlhCdmNuUWdZMnhoYzNOT1lXMWxjeUJtY205dElDZGpiR0Z6YzI1aGJXVnpKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnVW1WaFkzUWdabkp2YlNBbmNtVmhZM1FuTzF4dVhHNXBiWEJ2Y25RZ2UxeHVJQ0JGWkdsMFIyRnpUVzlrWlhNc1hHNGdJRkJ5YVc5eWFYUjVUR1YyWld4ekxGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2WTI5dWMzUmhiblJ6TDJkaGN5YzdYRzVwYlhCdmNuUWdleUJRVWtsUFVrbFVXVjlNUlZaRlRGOUpRMDlPWDAxQlVDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZZMjl1YzNSaGJuUnpMMmRoY3ljN1hHNXBiWEJ2Y25RZ2V5QlFVa2xOUVZKWklIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZhR1ZzY0dWeWN5OWpiMjV6ZEdGdWRITXZZMjl0Ylc5dUp6dGNibWx0Y0c5eWRDQjdJSFJ2U0hWdFlXNVNaV0ZrWVdKc1pWUnBiV1VnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5b1pXeHdaWEp6TDNWMGFXeHpMM1YwYVd3bk8xeHVhVzF3YjNKMElIc2dkWE5sUjJGelJtVmxRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMk52Ym5SbGVIUnpMMmRoYzBabFpTYzdYRzVwYlhCdmNuUWdleUIxYzJWSk1UaHVRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmh2YjJ0ekwzVnpaVWt4T0c1RGIyNTBaWGgwSnp0Y2JtbHRjRzl5ZENCN0lIVnpaVlJ5WVc1ellXTjBhVzl1UlhabGJuUkdjbUZuYldWdWRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmh2YjJ0ekwzVnpaVlJ5WVc1ellXTjBhVzl1UlhabGJuUkdjbUZuYldWdWRDYzdYRzVwYlhCdmNuUWdleUIxYzJWVWNtRnVjMkZqZEdsdmJrMXZaR0ZzUTI5dWRHVjRkQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJOdmJuUmxlSFJ6TDNSeVlXNXpZV04wYVc5dUxXMXZaR0ZzSnp0Y2JtbHRjRzl5ZENCSmJtWnZWRzl2YkhScGNDQm1jbTl0SUNjdUxpOHVMaTh1TGk5MWFTOXBibVp2TFhSdmIyeDBhWEFuTzF4dWFXMXdiM0owSUV4dllXUnBibWRJWldGeWRFSmxZWFFnWm5KdmJTQW5MaTR2TGk0dkxpNHZkV2t2Ykc5aFpHbHVaeTFvWldGeWRHSmxZWFFuTzF4dWFXMXdiM0owSUZWelpYSlFjbVZtWlhKbGJtTmxaRU4xY25KbGJtTjVSR2x6Y0d4aGVTQm1jbTl0SUNjdUxpOHVMaTkxYzJWeUxYQnlaV1psY21WdVkyVmtMV04xY25KbGJtTjVMV1JwYzNCc1lYa25PMXh1YVcxd2IzSjBJRVZrYVhSSFlYTlViMjlzVkdsd0lHWnliMjBnSnk0dUwyVmthWFF0WjJGekxYUnZiMngwYVhBdlpXUnBkQzFuWVhNdGRHOXZiSFJwY0NjN1hHNWNibWx0Y0c5eWRDQjdJSFZ6WlVkaGMwbDBaVzFHWldWRVpYUmhhV3h6SUgwZ1puSnZiU0FuTGk5MWMyVkhZWE5KZEdWdFJtVmxSR1YwWVdsc2N5YzdYRzVjYm1OdmJuTjBJR2RsZEZScGRHeGxRVzVrU1dOdmJpQTlJQ2h3Y21sdmNtbDBlVXhsZG1Wc0xDQmxaR2wwUjJGelRXOWtaU2tnUFQ0Z2UxeHVJQ0JzWlhRZ2FXTnZiaUE5SUhCeWFXOXlhWFI1VEdWMlpXdzdYRzRnSUd4bGRDQjBhWFJzWlNBOUlIQnlhVzl5YVhSNVRHVjJaV3c3WEc0Z0lHbG1JQ2h3Y21sdmNtbDBlVXhsZG1Wc0lEMDlQU0JRY21sdmNtbDBlVXhsZG1Wc2N5NWtRWEJ3VTNWbloyVnpkR1ZrS1NCN1hHNGdJQ0FnZEdsMGJHVWdQU0FuWkdGd2NGTjFaMmRsYzNSbFpGTm9iM0owVEdGaVpXd25PMXh1SUNCOUlHVnNjMlVnYVdZZ0tIQnlhVzl5YVhSNVRHVjJaV3dnUFQwOUlGQnlhVzl5YVhSNVRHVjJaV3h6TG5SbGJsQmxjbU5sYm5SSmJtTnlaV0Z6WldRcElIdGNiaUFnSUNCcFkyOXVJRDBnYm5Wc2JEdGNiaUFnSUNCMGFYUnNaU0E5SUNkMFpXNVFaWEpqWlc1MFNXNWpjbVZoYzJWa0p6dGNiaUFnZlNCbGJITmxJR2xtSUNoY2JpQWdJQ0J3Y21sdmNtbDBlVXhsZG1Wc0lEMDlQU0JRY21sdmNtbDBlVXhsZG1Wc2N5NW9hV2RvSUNZbVhHNGdJQ0FnWldScGRFZGhjMDF2WkdVZ1BUMDlJRVZrYVhSSFlYTk5iMlJsY3k1emQyRndjMXh1SUNBcElIdGNiaUFnSUNCcFkyOXVJRDBnSjNOM1lYQlRkV2RuWlhOMFpXUW5PMXh1SUNBZ0lIUnBkR3hsSUQwZ0ozTjNZWEJUZFdkblpYTjBaV1FuTzF4dUlDQjlYRzRnSUhKbGRIVnliaUI3SUhScGRHeGxMQ0JwWTI5dUlIMDdYRzU5TzF4dVhHNWpiMjV6ZENCRlpHbDBSMkZ6U1hSbGJTQTlJQ2g3SUhCeWFXOXlhWFI1VEdWMlpXd2dmU2tnUFQ0Z2UxeHVJQ0JqYjI1emRDQjdYRzRnSUNBZ1pXUnBkRWRoYzAxdlpHVXNYRzRnSUNBZ1pYTjBhVzFoZEdWVmMyVmtMRnh1SUNBZ0lHZGhjMHhwYldsMExGeHVJQ0FnSUhWd1pHRjBaVlJ5WVc1ellXTjBhVzl1Vkc5VVpXNVFaWEpqWlc1MFNXNWpjbVZoYzJWa1IyRnpSbVZsTEZ4dUlDQWdJSFZ3WkdGMFpWUnlZVzV6WVdOMGFXOXVWWE5wYm1kRVFWQlFVM1ZuWjJWemRHVmtWbUZzZFdWekxGeHVJQ0FnSUhWd1pHRjBaVlJ5WVc1ellXTjBhVzl1VlhOcGJtZEZjM1JwYldGMFpTeGNiaUFnSUNCMGNtRnVjMkZqZEdsdmJpeGNiaUFnZlNBOUlIVnpaVWRoYzBabFpVTnZiblJsZUhRb0tUdGNiaUFnWTI5dWMzUWdleUIxY0dSaGRHVlVjbUZ1YzJGamRHbHZia1YyWlc1MFJuSmhaMjFsYm5RZ2ZTQTlJSFZ6WlZSeVlXNXpZV04wYVc5dVJYWmxiblJHY21GbmJXVnVkQ2dwTzF4dUlDQmpiMjV6ZENCMElEMGdkWE5sU1RFNGJrTnZiblJsZUhRb0tUdGNiaUFnWTI5dWMzUWdleUJqYkc5elpVMXZaR0ZzTENCdmNHVnVUVzlrWVd3Z2ZTQTlJSFZ6WlZSeVlXNXpZV04wYVc5dVRXOWtZV3hEYjI1MFpYaDBLQ2s3WEc0Z0lHTnZibk4wSUhzZ1pHRndjRk4xWjJkbGMzUmxaRWRoYzBabFpYTWdmU0E5SUhSeVlXNXpZV04wYVc5dU8xeHVYRzRnSUdOdmJuTjBJSHRjYmlBZ0lDQXZMeUJtYjNJZ1kyRnVZMlZzSUc5eUlITndaV1ZrZFhBZ1pYTjBhVzFoZEdWSGNtVmhkR1Z5VkdoaFIyRnpWWE5sSUdseklIUnlkV1VnYVdZZ2NISmxkbWx2ZFhNZ1oyRnpJSFZ6WldSY2JpQWdJQ0F2THlCM1lYTWdiVzl5WlNCMGFHRnVJR1Z6ZEdsdFlYUmxJR1p2Y2lCMGFHVWdjSEpwYjNKcGRIbE1aWFpsYkZ4dUlDQWdJR1Z6ZEdsdFlYUmxSM0psWVhSbGNsUm9ZVzVIWVhOVmMyVXNYRzRnSUNBZ2FHVjRUV0Y0YVcxMWJWUnlZVzV6WVdOMGFXOXVSbVZsTEZ4dUlDQWdJRzFoZUVabFpWQmxja2RoY3l4Y2JpQWdJQ0J0WVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3l4Y2JpQWdJQ0J0YVc1WFlXbDBWR2x0WlN4Y2JpQWdmU0E5SUhWelpVZGhjMGwwWlcxR1pXVkVaWFJoYVd4ektIQnlhVzl5YVhSNVRHVjJaV3dwTzF4dVhHNGdJR2xtSUNoY2JpQWdJQ0J3Y21sdmNtbDBlVXhsZG1Wc0lEMDlQU0JRY21sdmNtbDBlVXhsZG1Wc2N5NWtRWEJ3VTNWbloyVnpkR1ZrSUNZbVhHNGdJQ0FnSVdSaGNIQlRkV2RuWlhOMFpXUkhZWE5HWldWelB5NXRZWGhHWldWUVpYSkhZWE1nSmlaY2JpQWdJQ0FoWkdGd2NGTjFaMmRsYzNSbFpFZGhjMFpsWlhNL0xtZGhjMUJ5YVdObFhHNGdJQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnYjI1UGNIUnBiMjVUWld4bFkzUWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2FXWWdLSEJ5YVc5eWFYUjVUR1YyWld3Z1BUMDlJRkJ5YVc5eWFYUjVUR1YyWld4ekxtTjFjM1J2YlNrZ2UxeHVJQ0FnSUNBZ2RYQmtZWFJsVkhKaGJuTmhZM1JwYjI1RmRtVnVkRVp5WVdkdFpXNTBLSHRjYmlBZ0lDQWdJQ0FnY0hKdmNHVnlkR2xsY3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJR2RoYzE5bFpHbDBYMkYwZEdWdGNIUmxaRG9nSjJGa2RtRnVZMlZrSnl4Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdiM0JsYmsxdlpHRnNLQ2RoWkhaaGJtTmxaRWRoYzBabFpTY3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMWNHUmhkR1ZVY21GdWMyRmpkR2x2YmtWMlpXNTBSbkpoWjIxbGJuUW9lMXh1SUNBZ0lDQWdJQ0J3Y205d1pYSjBhV1Z6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdaMkZ6WDJWa2FYUmZkSGx3WlRvZ0oySmhjMmxqSnl4Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0JqYkc5elpVMXZaR0ZzS0ZzblpXUnBkRWRoYzBabFpTZGRLVHRjYmx4dUlDQWdJQ0FnYVdZZ0tIQnlhVzl5YVhSNVRHVjJaV3dnUFQwOUlGQnlhVzl5YVhSNVRHVjJaV3h6TG5SbGJsQmxjbU5sYm5SSmJtTnlaV0Z6WldRcElIdGNiaUFnSUNBZ0lDQWdkWEJrWVhSbFZISmhibk5oWTNScGIyNVViMVJsYmxCbGNtTmxiblJKYm1OeVpXRnpaV1JIWVhOR1pXVW9LVHRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvY0hKcGIzSnBkSGxNWlhabGJDQTlQVDBnVUhKcGIzSnBkSGxNWlhabGJITXVaRUZ3Y0ZOMVoyZGxjM1JsWkNrZ2UxeHVJQ0FnSUNBZ0lDQjFjR1JoZEdWVWNtRnVjMkZqZEdsdmJsVnphVzVuUkVGUVVGTjFaMmRsYzNSbFpGWmhiSFZsY3lncE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RYQmtZWFJsVkhKaGJuTmhZM1JwYjI1VmMybHVaMFZ6ZEdsdFlYUmxLSEJ5YVc5eWFYUjVUR1YyWld3cE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQmpiMjV6ZENCN0lIUnBkR3hsTENCcFkyOXVJSDBnUFNCblpYUlVhWFJzWlVGdVpFbGpiMjRvY0hKcGIzSnBkSGxNWlhabGJDd2daV1JwZEVkaGMwMXZaR1VwTzF4dVhHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ1BHSjFkSFJ2Ymx4dUlDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFh0amJHRnpjMDVoYldWektDZGxaR2wwTFdkaGN5MXBkR1Z0Snl3Z2UxeHVJQ0FnSUNBZ0lDQW5aV1JwZEMxbllYTXRhWFJsYlMwdGMyVnNaV04wWldRbk9pQndjbWx2Y21sMGVVeGxkbVZzSUQwOVBTQmxjM1JwYldGMFpWVnpaV1FzWEc0Z0lDQWdJQ0FnSUNkbFpHbDBMV2RoY3kxcGRHVnRMUzFrYVhOaFlteGxaQ2M2SUdWemRHbHRZWFJsUjNKbFlYUmxjbFJvWVc1SFlYTlZjMlVzWEc0Z0lDQWdJQ0I5S1gxY2JpQWdJQ0FnSUc5dVEyeHBZMnM5ZTI5dVQzQjBhVzl1VTJWc1pXTjBmVnh1SUNBZ0lDQWdZWEpwWVMxc1lXSmxiRDE3Y0hKcGIzSnBkSGxNWlhabGJIMWNiaUFnSUNBZ0lHRjFkRzlHYjJOMWN6MTdjSEpwYjNKcGRIbE1aWFpsYkNBOVBUMGdaWE4wYVcxaGRHVlZjMlZrZlZ4dUlDQWdJQ0FnWkdsellXSnNaV1E5ZTJWemRHbHRZWFJsUjNKbFlYUmxjbFJvWVc1SFlYTlZjMlY5WEc0Z0lDQWdJQ0JrWVhSaExYUmxjM1JwWkQxN1lHVmthWFF0WjJGekxXWmxaUzFwZEdWdExTUjdjSEpwYjNKcGRIbE1aWFpsYkgxZ2ZWeHVJQ0FnSUQ1Y2JpQWdJQ0FnSUR4emNHRnVJR05zWVhOelRtRnRaVDFjSW1Wa2FYUXRaMkZ6TFdsMFpXMWZYMjVoYldWY0lqNWNiaUFnSUNBZ0lDQWdlMmxqYjI0Z0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUR4emNHRnVYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUyQmxaR2wwTFdkaGN5MXBkR1Z0WDE5cFkyOXVJR1ZrYVhRdFoyRnpMV2wwWlcxZlgybGpiMjR0Skh0d2NtbHZjbWwwZVV4bGRtVnNmV0I5WEc0Z0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnZTFCU1NVOVNTVlJaWDB4RlZrVk1YMGxEVDA1ZlRVRlFXMmxqYjI1ZGZWeHVJQ0FnSUNBZ0lDQWdJRHd2YzNCaGJqNWNiaUFnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnZTNRb2RHbDBiR1VwZlZ4dUlDQWdJQ0FnUEM5emNHRnVQbHh1SUNBZ0lDQWdQSE53WVc1Y2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGdaV1JwZEMxbllYTXRhWFJsYlY5ZmRHbHRaUzFsYzNScGJXRjBaU0JsWkdsMExXZGhjeTFwZEdWdFgxOTBhVzFsTFdWemRHbHRZWFJsTFNSN2NISnBiM0pwZEhsTVpYWmxiSDFnZlZ4dUlDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNCN1pXUnBkRWRoYzAxdlpHVWdJVDA5SUVWa2FYUkhZWE5OYjJSbGN5NXpkMkZ3Y3lBbUpseHVJQ0FnSUNBZ0lDQWdJQ2h0YVc1WFlXbDBWR2x0WlNBL0lIUnZTSFZ0WVc1U1pXRmtZV0pzWlZScGJXVW9kQ3dnYldsdVYyRnBkRlJwYldVcElEb2dKeTB0SnlsOVhHNGdJQ0FnSUNBOEwzTndZVzQrWEc0Z0lDQWdJQ0E4YzNCaGJseHVJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMkJsWkdsMExXZGhjeTFwZEdWdFgxOW1aV1V0WlhOMGFXMWhkR1VnWldScGRDMW5ZWE10YVhSbGJWOWZabVZsTFdWemRHbHRZWFJsTFNSN2NISnBiM0pwZEhsTVpYWmxiSDFnZlZ4dUlDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNCN2FHVjRUV0Y0YVcxMWJWUnlZVzV6WVdOMGFXOXVSbVZsSUQ4Z0tGeHVJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2laV1JwZEMxbllYTXRhWFJsYlY5ZmJXRjRabVZsWENJK1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4VEc5aFpHbHVaMGhsWVhKMFFtVmhkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZV05yWjNKdmRXNWtRMjlzYjNJOWUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnlhVzl5YVhSNVRHVjJaV3dnUFQwOUlHVnpkR2x0WVhSbFZYTmxaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlBbmRtRnlLQzB0WTI5c2IzSXRZbUZqYTJkeWIzVnVaQzFoYkhSbGNtNWhkR2wyWlNrblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJQ2QyWVhJb0xTMWpiMnh2Y2kxaVlXTnJaM0p2ZFc1a0xXUmxabUYxYkhRcEoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdWemRHbHRZWFJsVlhObFpEMTdjSEpwYjNKcGRIbE1aWFpsYkgxY2JpQWdJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQThWWE5sY2xCeVpXWmxjbVZ1WTJWa1EzVnljbVZ1WTNsRWFYTndiR0Y1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3RsZVQxY0ltVmthWFJIWVhOVGRXSlVaWGgwUm1WbFFXMXZkVzUwWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUMTdVRkpKVFVGU1dYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U5ZTJobGVFMWhlR2x0ZFcxVWNtRnVjMkZqZEdsdmJrWmxaWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJQ2tnT2lBb1hHNGdJQ0FnSUNBZ0lDQWdKeTB0SjF4dUlDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ1BDOXpjR0Z1UGx4dUlDQWdJQ0FnUEhOd1lXNGdZMnhoYzNOT1lXMWxQVndpWldScGRDMW5ZWE10YVhSbGJWOWZkRzl2YkhScGNGd2lJR1JoZEdFdGRHVnpkR2xrUFZ3aVoyRnpMWFJ2YjJ4MGFYQmNJajVjYmlBZ0lDQWdJQ0FnUEVsdVptOVViMjlzZEdsd1hHNGdJQ0FnSUNBZ0lDQWdZMjl1ZEdWdWRGUmxlSFE5ZTF4dUlDQWdJQ0FnSUNBZ0lDQWdQRVZrYVhSSFlYTlViMjlzVkdsd1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhROWUzUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnlhVzl5YVhSNVRHVjJaV3c5ZTNCeWFXOXlhWFI1VEdWMlpXeDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhlRVpsWlZCbGNrZGhjejE3YldGNFJtVmxVR1Z5UjJGemZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN6MTdiV0Y0VUhKcGIzSnBkSGxHWldWUVpYSkhZWE45WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1ZrYVhSSFlYTk5iMlJsUFh0bFpHbDBSMkZ6VFc5a1pYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1oyRnpUR2x0YVhROWUyZGhjMHhwYldsMGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMkZqZEdsdmJqMTdkSEpoYm5OaFkzUnBiMjU5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1Z6ZEdsdFlYUmxSM0psWVhSbGNsUm9ZVzVIWVhOVmMyVTllMlZ6ZEdsdFlYUmxSM0psWVhSbGNsUm9ZVzVIWVhOVmMyVjlYRzRnSUNBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCd2IzTnBkR2x2YmoxY0luUnZjRndpWEc0Z0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBOEwzTndZVzQrWEc0Z0lDQWdQQzlpZFhSMGIyNCtYRzRnSUNrN1hHNTlPMXh1WEc1RlpHbDBSMkZ6U1hSbGJTNXdjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lIQnlhVzl5YVhSNVRHVjJaV3c2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkZaR2wwUjJGelNYUmxiVHRjYmlJc0ltVjRjRzl5ZENCN0lHUmxabUYxYkhRZ2ZTQm1jbTl0SUNjdUwyVmthWFF0WjJGekxXbDBaVzBuTzF4dUlpd2lhVzF3YjNKMElIc2dkWE5sUldabVpXTjBMQ0IxYzJWVGRHRjBaU0I5SUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQjdJSFZ6WlZObGJHVmpkRzl5SUgwZ1puSnZiU0FuY21WaFkzUXRjbVZrZFhnbk8xeHVhVzF3YjNKMElFSnBaMDUxYldKbGNpQm1jbTl0SUNkaWFXZHVkVzFpWlhJdWFuTW5PMXh1WEc1cGJYQnZjblFnZXlCSFlYTkZjM1JwYldGMFpWUjVjR1Z6SUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OW5ZWE1uTzF4dWFXMXdiM0owSUh0Y2JpQWdaMlYwUjJGelJYTjBhVzFoZEdWVWVYQmxMRnh1SUNCblpYUkpjMGRoYzBWemRHbHRZWFJsYzB4dllXUnBibWNzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyUjFZMnR6TDIxbGRHRnRZWE5yTDIxbGRHRnRZWE5ySnp0Y2JtbHRjRzl5ZENCN0lHZGxkRWRoYzBabFpWUnBiV1ZGYzNScGJXRjBaU0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNOMGIzSmxMMkZqZEdsdmJuTW5PMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdkWE5sUTNWemRHOXRWR2x0WlVWemRHbHRZWFJsSUQwZ0tIdGNiaUFnWjJGelJtVmxSWE4wYVcxaGRHVnpMRnh1SUNCdFlYaEdaV1ZRWlhKSFlYTXNYRzRnSUcxaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGekxGeHVmU2tnUFQ0Z2UxeHVJQ0JqYjI1emRDQm5ZWE5GYzNScGJXRjBaVlI1Y0dVZ1BTQjFjMlZUWld4bFkzUnZjaWhuWlhSSFlYTkZjM1JwYldGMFpWUjVjR1VwTzF4dUlDQmpiMjV6ZENCcGMwZGhjMFZ6ZEdsdFlYUmxjMHh2WVdScGJtY2dQU0IxYzJWVFpXeGxZM1J2Y2loblpYUkpjMGRoYzBWemRHbHRZWFJsYzB4dllXUnBibWNwTzF4dVhHNGdJR052Ym5OMElGdGpkWE4wYjIxRmMzUnBiV0YwWldSVWFXMWxMQ0J6WlhSRGRYTjBiMjFGYzNScGJXRjBaV1JVYVcxbFhTQTlJSFZ6WlZOMFlYUmxLRzUxYkd3cE8xeHVYRzRnSUdOdmJuTjBJSEpsZEhWeWJrNXZSWE4wYVcxaGRHVnpJRDFjYmlBZ0lDQnBjMGRoYzBWemRHbHRZWFJsYzB4dllXUnBibWNnZkh4Y2JpQWdJQ0JuWVhORmMzUnBiV0YwWlZSNWNHVWdJVDA5SUVkaGMwVnpkR2x0WVhSbFZIbHdaWE11Wm1WbFRXRnlhMlYwSUh4OFhHNGdJQ0FnSVcxaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGek8xeHVYRzRnSUM4dklFbG1JSFJvWlNCMWMyVnlJR2hoY3lCamFHOXpaVzRnWVNCMllXeDFaU0JzYjNkbGNpQjBhR0Z1SUhSb1pTQnNiM2NnWjJGeklHWmxaU0JsYzNScGJXRjBaU3hjYmlBZ0x5OGdWMlVuYkd3Z2JtVmxaQ0IwYnlCMWMyVWdkR2hsSUhWelpVVm1abVZqZENCb2IyOXJJR0psYkc5M0lIUnZJRzFoYTJVZ1lTQmpZV3hzSUhSdklHTmhiR04xYkdGMFpWeHVJQ0F2THlCMGFHVWdkR2x0WlNCMGJ5QnphRzkzWEc0Z0lHTnZibk4wSUdselZXNXJibTkzYmt4dmR5QTlYRzRnSUNBZ1oyRnpSbVZsUlhOMGFXMWhkR1Z6UHk1c2IzY2dKaVpjYmlBZ0lDQk9kVzFpWlhJb2JXRjRVSEpwYjNKcGRIbEdaV1ZRWlhKSFlYTXBJRHhjYmlBZ0lDQWdJRTUxYldKbGNpaG5ZWE5HWldWRmMzUnBiV0YwWlhNdWJHOTNMbk4xWjJkbGMzUmxaRTFoZUZCeWFXOXlhWFI1Um1WbFVHVnlSMkZ6S1R0Y2JseHVJQ0IxYzJWRlptWmxZM1FvS0NrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJR2x6UjJGelJYTjBhVzFoZEdWelRHOWhaR2x1WnlCOGZGeHVJQ0FnSUNBZ1oyRnpSWE4wYVcxaGRHVlVlWEJsSUNFOVBTQkhZWE5GYzNScGJXRjBaVlI1Y0dWekxtWmxaVTFoY210bGRDQjhmRnh1SUNBZ0lDQWdJVzFoZUZCeWFXOXlhWFI1Um1WbFVHVnlSMkZ6WEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHBjMVZ1YTI1dmQyNU1iM2NwSUh0Y2JpQWdJQ0FnSUM4dklHZGxkRWRoYzBabFpWUnBiV1ZGYzNScGJXRjBaU0J5WlhGMWFYSmxjeUJ3WVhKaGJXVjBaWEp6SUdsdUlITjBjbWx1WnlCbWIzSnRZWFJjYmlBZ0lDQWdJR2RsZEVkaGMwWmxaVlJwYldWRmMzUnBiV0YwWlNoY2JpQWdJQ0FnSUNBZ2JtVjNJRUpwWjA1MWJXSmxjaWh0WVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3l3Z01UQXBMblJ2VTNSeWFXNW5LREV3S1N4Y2JpQWdJQ0FnSUNBZ2JtVjNJRUpwWjA1MWJXSmxjaWh0WVhoR1pXVlFaWEpIWVhNc0lERXdLUzUwYjFOMGNtbHVaeWd4TUNrc1hHNGdJQ0FnSUNBcExuUm9aVzRvS0hKbGMzVnNkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnpaWFJEZFhOMGIyMUZjM1JwYldGMFpXUlVhVzFsS0hKbGMzVnNkQ2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lIMHNJRnRjYmlBZ0lDQm5ZWE5GYzNScGJXRjBaVlI1Y0dVc1hHNGdJQ0FnYVhOVmJtdHViM2R1VEc5M0xGeHVJQ0FnSUdselIyRnpSWE4wYVcxaGRHVnpURzloWkdsdVp5eGNiaUFnSUNCdFlYaEdaV1ZRWlhKSFlYTXNYRzRnSUNBZ2JXRjRVSEpwYjNKcGRIbEdaV1ZRWlhKSFlYTXNYRzRnSUNBZ2NtVjBkWEp1VG05RmMzUnBiV0YwWlhNc1hHNGdJRjBwTzF4dVhHNGdJR2xtSUNoeVpYUjFjbTVPYjBWemRHbHRZWFJsY3lrZ2UxeHVJQ0FnSUhKbGRIVnliaUI3ZlR0Y2JpQWdmVnh1WEc0Z0lHTnZibk4wSUhzZ2JHOTNJRDBnZTMwc0lHMWxaR2wxYlNBOUlIdDlMQ0JvYVdkb0lEMGdlMzBnZlNBOUlHZGhjMFpsWlVWemRHbHRZWFJsY3p0Y2JpQWdiR1YwSUhkaGFYUlVhVzFsUlhOMGFXMWhkR1VnUFNBbkp6dGNibHh1SUNCcFppQW9YRzRnSUNBZ2FYTlZibXR1YjNkdVRHOTNJQ1ltWEc0Z0lDQWdZM1Z6ZEc5dFJYTjBhVzFoZEdWa1ZHbHRaU0FtSmx4dUlDQWdJR04xYzNSdmJVVnpkR2x0WVhSbFpGUnBiV1VnSVQwOUlDZDFibXR1YjNkdUp5QW1KbHh1SUNBZ0lHTjFjM1J2YlVWemRHbHRZWFJsWkZScGJXVS9MblZ3Y0dWeVZHbHRaVUp2ZFc1a0lDRTlQU0FuZFc1cmJtOTNiaWRjYmlBZ0tTQjdYRzRnSUNBZ2QyRnBkRlJwYldWRmMzUnBiV0YwWlNBOUlFNTFiV0psY2loamRYTjBiMjFGYzNScGJXRjBaV1JVYVcxbFB5NTFjSEJsY2xScGJXVkNiM1Z1WkNrN1hHNGdJSDBnWld4elpTQnBaaUFvWEc0Z0lDQWdUblZ0WW1WeUtHMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpLU0ErUFNCT2RXMWlaWElvYldWa2FYVnRMbk4xWjJkbGMzUmxaRTFoZUZCeWFXOXlhWFI1Um1WbFVHVnlSMkZ6S1Z4dUlDQXBJSHRjYmlBZ0lDQjNZV2wwVkdsdFpVVnpkR2x0WVhSbElEMGdhR2xuYUM1dGFXNVhZV2wwVkdsdFpVVnpkR2x0WVhSbE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIZGhhWFJVYVcxbFJYTjBhVzFoZEdVZ1BTQnNiM2N1YldGNFYyRnBkRlJwYldWRmMzUnBiV0YwWlR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCN0lIZGhhWFJVYVcxbFJYTjBhVzFoZEdVZ2ZUdGNibjA3WEc0aUxDSnBiWEJ2Y25RZ2V5QjFjMlZGWm1abFkzUXNJSFZ6WlZOMFlYUmxJSDBnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElIc2dkWE5sVTJWc1pXTjBiM0lnZlNCbWNtOXRJQ2R5WldGamRDMXlaV1IxZUNjN1hHNWNibWx0Y0c5eWRDQjdYRzRnSUVWa2FYUkhZWE5OYjJSbGN5eGNiaUFnVUhKcGIzSnBkSGxNWlhabGJITXNYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdloyRnpKenRjYm1sdGNHOXlkQ0I3SUdkbGRFMWhlR2x0ZFcxSFlYTlViM1JoYkVsdVNHVjRWMlZwSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyMXZaSFZzWlhNdloyRnpMblYwYVd4ekp6dGNibWx0Y0c5eWRDQjdYRzRnSUdGa1pGUmxibEJsY21ObGJuUkJibVJTYjNWdVpDeGNiaUFnWjJGelJYTjBhVzFoZEdWSGNtVmhkR1Z5VkdoaGJrZGhjMVZ6WldSUWJIVnpWR1Z1VUdWeVkyVnVkQ3hjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5MWRHbHNjeTluWVhNbk8xeHVhVzF3YjNKMElIc2daMlYwUVdSMllXNWpaV1JIWVhOR1pXVldZV3gxWlhNZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOXpaV3hsWTNSdmNuTW5PMXh1YVcxd2IzSjBJSHNnZFhObFIyRnpSbVZsUTI5dWRHVjRkQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJOdmJuUmxlSFJ6TDJkaGMwWmxaU2M3WEc1cGJYQnZjblFnZTF4dUlDQmtaV05IVjBWSlZHOUlaWGhYUlVrc1hHNGdJR1JsWTJsdFlXeFViMGhsZUN4Y2JpQWdhR1Y0VjBWSlZHOUVaV05IVjBWSkxGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2Ylc5a2RXeGxjeTlqYjI1MlpYSnphVzl1TG5WMGFXeHpKenRjYm1sdGNHOXlkQ0I3SUhWelpVTjFjM1J2YlZScGJXVkZjM1JwYldGMFpTQjlJR1p5YjIwZ0p5NHZkWE5sUTNWemRHOXRWR2x0WlVWemRHbHRZWFJsSnp0Y2JseHVaWGh3YjNKMElHTnZibk4wSUhWelpVZGhjMGwwWlcxR1pXVkVaWFJoYVd4eklEMGdLSEJ5YVc5eWFYUjVUR1YyWld3cElEMCtJSHRjYmlBZ1kyOXVjM1FnZTF4dUlDQWdJR1ZrYVhSSFlYTk5iMlJsTEZ4dUlDQWdJR1Z6ZEdsdFlYUmxWWE5sWkN4Y2JpQWdJQ0JuWVhOR1pXVkZjM1JwYldGMFpYTXNYRzRnSUNBZ1oyRnpUR2x0YVhRc1hHNGdJQ0FnYldGNFJtVmxVR1Z5UjJGek9pQnRZWGhHWldWUVpYSkhZWE5XWVd4MVpTeGNiaUFnSUNCdFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN6b2diV0Y0VUhKcGIzSnBkSGxHWldWUVpYSkhZWE5XWVd4MVpTeGNiaUFnSUNCMGNtRnVjMkZqZEdsdmJpeGNiaUFnZlNBOUlIVnpaVWRoYzBabFpVTnZiblJsZUhRb0tUdGNiaUFnWTI5dWMzUWdXMlZ6ZEdsdFlYUmxSM0psWVhSbGNsUm9ZVzVIWVhOVmMyVXNJSE5sZEVWemRHbHRZWFJsUjNKbFlYUmxjbFJvWVc1SFlYTlZjMlZkSUQxY2JpQWdJQ0IxYzJWVGRHRjBaU2htWVd4elpTazdYRzRnSUdOdmJuTjBJR0ZrZG1GdVkyVmtSMkZ6Um1WbFZtRnNkV1Z6SUQwZ2RYTmxVMlZzWldOMGIzSW9aMlYwUVdSMllXNWpaV1JIWVhOR1pXVldZV3gxWlhNcE8xeHVYRzRnSUd4bGRDQnRZWGhHWldWUVpYSkhZWE03WEc0Z0lHeGxkQ0J0WVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3p0Y2JpQWdiR1YwSUcxcGJsZGhhWFJVYVcxbE8xeHVYRzRnSUdOdmJuTjBJSHNnWkdGd2NGTjFaMmRsYzNSbFpFZGhjMFpsWlhNZ2ZTQTlJSFJ5WVc1ellXTjBhVzl1TzF4dVhHNGdJR2xtSUNobllYTkdaV1ZGYzNScGJXRjBaWE0vTGx0d2NtbHZjbWwwZVV4bGRtVnNYU2tnZTF4dUlDQWdJRzFoZUVabFpWQmxja2RoY3lBOUlHZGhjMFpsWlVWemRHbHRZWFJsYzF0d2NtbHZjbWwwZVV4bGRtVnNYUzV6ZFdkblpYTjBaV1JOWVhoR1pXVlFaWEpIWVhNN1hHNGdJQ0FnYldGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhNZ1BWeHVJQ0FnSUNBZ1oyRnpSbVZsUlhOMGFXMWhkR1Z6VzNCeWFXOXlhWFI1VEdWMlpXeGRMbk4xWjJkbGMzUmxaRTFoZUZCeWFXOXlhWFI1Um1WbFVHVnlSMkZ6TzF4dUlDQjlJR1ZzYzJVZ2FXWWdLRnh1SUNBZ0lIQnlhVzl5YVhSNVRHVjJaV3dnUFQwOUlGQnlhVzl5YVhSNVRHVjJaV3h6TG1SQmNIQlRkV2RuWlhOMFpXUWdKaVpjYmlBZ0lDQmtZWEJ3VTNWbloyVnpkR1ZrUjJGelJtVmxjMXh1SUNBcElIdGNiaUFnSUNCdFlYaEdaV1ZRWlhKSFlYTWdQU0JvWlhoWFJVbFViMFJsWTBkWFJVa29YRzRnSUNBZ0lDQmtZWEJ3VTNWbloyVnpkR1ZrUjJGelJtVmxjeTV0WVhoR1pXVlFaWEpIWVhNZ2ZId2daR0Z3Y0ZOMVoyZGxjM1JsWkVkaGMwWmxaWE11WjJGelVISnBZMlVzWEc0Z0lDQWdLVHRjYmlBZ0lDQnRZWGhRY21sdmNtbDBlVVpsWlZCbGNrZGhjeUE5SUdobGVGZEZTVlJ2UkdWalIxZEZTU2hjYmlBZ0lDQWdJR1JoY0hCVGRXZG5aWE4wWldSSFlYTkdaV1Z6TG0xaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGeklIeDhJRzFoZUVabFpWQmxja2RoY3l4Y2JpQWdJQ0FwTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLSEJ5YVc5eWFYUjVUR1YyWld3Z1BUMDlJRkJ5YVc5eWFYUjVUR1YyWld4ekxtTjFjM1J2YlNrZ2UxeHVJQ0FnSUdsbUlDaGxjM1JwYldGMFpWVnpaV1FnUFQwOUlGQnlhVzl5YVhSNVRHVjJaV3h6TG1OMWMzUnZiU2tnZTF4dUlDQWdJQ0FnYldGNFJtVmxVR1Z5UjJGeklEMGdiV0Y0Um1WbFVHVnlSMkZ6Vm1Gc2RXVTdYRzRnSUNBZ0lDQnRZWGhRY21sdmNtbDBlVVpsWlZCbGNrZGhjeUE5SUcxaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGelZtRnNkV1U3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hoWkhaaGJtTmxaRWRoYzBabFpWWmhiSFZsY3lBbUppQmxaR2wwUjJGelRXOWtaU0FoUFQwZ1JXUnBkRWRoYzAxdlpHVnpMbk4zWVhCektTQjdYRzRnSUNBZ0lDQnRZWGhHWldWUVpYSkhZWE1nUFNCaFpIWmhibU5sWkVkaGMwWmxaVlpoYkhWbGN5NXRZWGhDWVhObFJtVmxPMXh1SUNBZ0lDQWdiV0Y0VUhKcGIzSnBkSGxHWldWUVpYSkhZWE1nUFNCaFpIWmhibU5sWkVkaGMwWmxaVlpoYkhWbGN5NXdjbWx2Y21sMGVVWmxaVHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0JwWmlBb1hHNGdJQ0FnY0hKcGIzSnBkSGxNWlhabGJDQTlQVDBnVUhKcGIzSnBkSGxNWlhabGJITXVkR1Z1VUdWeVkyVnVkRWx1WTNKbFlYTmxaQ0FtSmx4dUlDQWdJSFJ5WVc1ellXTjBhVzl1TG5CeVpYWnBiM1Z6UjJGelhHNGdJQ2tnZTF4dUlDQWdJRzFoZUVabFpWQmxja2RoY3lBOUlHaGxlRmRGU1ZSdlJHVmpSMWRGU1NoY2JpQWdJQ0FnSUdGa1pGUmxibEJsY21ObGJuUkJibVJTYjNWdVpDaDBjbUZ1YzJGamRHbHZiaTV3Y21WMmFXOTFjMGRoY3o4dWJXRjRSbVZsVUdWeVIyRnpLU3hjYmlBZ0lDQXBPMXh1SUNBZ0lHMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpJRDBnYUdWNFYwVkpWRzlFWldOSFYwVkpLRnh1SUNBZ0lDQWdZV1JrVkdWdVVHVnlZMlZ1ZEVGdVpGSnZkVzVrS0hSeVlXNXpZV04wYVc5dUxuQnlaWFpwYjNWelIyRnpQeTV0WVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3lrc1hHNGdJQ0FnS1R0Y2JpQWdmVnh1WEc0Z0lHTnZibk4wSUhzZ2QyRnBkRlJwYldWRmMzUnBiV0YwWlNCOUlEMGdkWE5sUTNWemRHOXRWR2x0WlVWemRHbHRZWFJsS0h0Y2JpQWdJQ0JuWVhOR1pXVkZjM1JwYldGMFpYTXNYRzRnSUNBZ2JXRjRSbVZsVUdWeVIyRnpMRnh1SUNBZ0lHMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpMRnh1SUNCOUtUdGNibHh1SUNCcFppQW9aMkZ6Um1WbFJYTjBhVzFoZEdWelczQnlhVzl5YVhSNVRHVjJaV3hkS1NCN1hHNGdJQ0FnYldsdVYyRnBkRlJwYldVZ1BWeHVJQ0FnSUNBZ2NISnBiM0pwZEhsTVpYWmxiQ0E5UFQwZ1VISnBiM0pwZEhsTVpYWmxiSE11YUdsbmFGeHVJQ0FnSUNBZ0lDQS9JR2RoYzBabFpVVnpkR2x0WVhSbGN6OHVhR2xuYUM1dGFXNVhZV2wwVkdsdFpVVnpkR2x0WVhSbFhHNGdJQ0FnSUNBZ0lEb2daMkZ6Um1WbFJYTjBhVzFoZEdWelB5NXNiM2N1YldGNFYyRnBkRlJwYldWRmMzUnBiV0YwWlR0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCdGFXNVhZV2wwVkdsdFpTQTlJSGRoYVhSVWFXMWxSWE4wYVcxaGRHVTdYRzRnSUgxY2JseHVJQ0JqYjI1emRDQm9aWGhOWVhocGJYVnRWSEpoYm5OaFkzUnBiMjVHWldVZ1BTQnRZWGhHWldWUVpYSkhZWE5jYmlBZ0lDQS9JR2RsZEUxaGVHbHRkVzFIWVhOVWIzUmhiRWx1U0dWNFYyVnBLSHRjYmlBZ0lDQWdJQ0FnWjJGelRHbHRhWFE2SUdSbFkybHRZV3hVYjBobGVDaG5ZWE5NYVcxcGRDa3NYRzRnSUNBZ0lDQWdJRzFoZUVabFpWQmxja2RoY3pvZ1pHVmpSMWRGU1ZSdlNHVjRWMFZKS0cxaGVFWmxaVkJsY2tkaGN5a3NYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lEb2diblZzYkR0Y2JseHVJQ0IxYzJWRlptWmxZM1FvS0NrZ1BUNGdlMXh1SUNBZ0lDOHZJRVp2Y2lCallXNWpaV3dnWVc1a0lITndaV1ZrTFhWd0lHMWxaR2wxYlNBdklHaHBaMmdnYjNCMGFXOXVJR2x6SUdScGMyRmliR1ZrSUdsbVhHNGdJQ0FnTHk4Z1oyRnpJSFZ6WldRZ2FXNGdkSEpoYm5OaFkzUnBiMjRnS3lBeE1DVWdhWE1nWjNKbFlYUmxjaUIwYUdGdElHVnpkR2x0WVhSbFhHNGdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0tHVmthWFJIWVhOTmIyUmxJRDA5UFNCRlpHbDBSMkZ6VFc5a1pYTXVZMkZ1WTJWc0lIeDhYRzRnSUNBZ0lDQWdJR1ZrYVhSSFlYTk5iMlJsSUQwOVBTQkZaR2wwUjJGelRXOWtaWE11YzNCbFpXUlZjQ2tnSmlaY2JpQWdJQ0FnSUNod2NtbHZjbWwwZVV4bGRtVnNJRDA5UFNCUWNtbHZjbWwwZVV4bGRtVnNjeTV0WldScGRXMGdmSHhjYmlBZ0lDQWdJQ0FnY0hKcGIzSnBkSGxNWlhabGJDQTlQVDBnVUhKcGIzSnBkSGxNWlhabGJITXVhR2xuYUNsY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR1Z6ZEdsdFlYUmxSM0psWVhSbGNpQTlJQ0ZuWVhORmMzUnBiV0YwWlVkeVpXRjBaWEpVYUdGdVIyRnpWWE5sWkZCc2RYTlVaVzVRWlhKalpXNTBLRnh1SUNBZ0lDQWdJQ0IwY21GdWMyRmpkR2x2Ymk1d2NtVjJhVzkxYzBkaGN5QjhmQ0IwY21GdWMyRmpkR2x2Ymk1MGVGQmhjbUZ0Y3l4Y2JpQWdJQ0FnSUNBZ1oyRnpSbVZsUlhOMGFXMWhkR1Z6TEZ4dUlDQWdJQ0FnSUNCd2NtbHZjbWwwZVV4bGRtVnNMRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSE5sZEVWemRHbHRZWFJsUjNKbFlYUmxjbFJvWVc1SFlYTlZjMlVvWlhOMGFXMWhkR1ZIY21WaGRHVnlLVHRjYmlBZ0lDQjlYRzRnSUgwc0lGdGxaR2wwUjJGelRXOWtaU3dnWjJGelJtVmxSWE4wYVcxaGRHVnpMQ0J3Y21sdmNtbDBlVXhsZG1Wc0xDQjBjbUZ1YzJGamRHbHZibDBwTzF4dVhHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ1pYTjBhVzFoZEdWSGNtVmhkR1Z5VkdoaGJrZGhjMVZ6WlN4Y2JpQWdJQ0J0WVhoR1pXVlFaWEpIWVhNc1hHNGdJQ0FnYldGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhNc1hHNGdJQ0FnYldsdVYyRnBkRlJwYldVc1hHNGdJQ0FnYUdWNFRXRjRhVzExYlZSeVlXNXpZV04wYVc5dVJtVmxMRnh1SUNCOU8xeHVmVHRjYmlJc0ltbHRjRzl5ZENCU1pXRmpkQ3dnZXlCMWMyVk5aVzF2SUgwZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0I3WEc0Z0lFVmthWFJIWVhOTmIyUmxjeXhjYmlBZ1VISnBiM0pwZEhsTVpYWmxiSE1zWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZaMkZ6Snp0Y2JtbHRjRzl5ZENCN1hHNGdJRVp2Ym5SWFpXbG5hSFFzWEc0Z0lGUmxlSFJEYjJ4dmNpeGNiaUFnVkdWNGRGWmhjbWxoYm5Rc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZZMjl1YzNSaGJuUnpMMlJsYzJsbmJpMXplWE4wWlcwbk8xeHVhVzF3YjNKMElIc2dhWE5OWlhSaGJXRnphMU4xWjJkbGMzUmxaRWRoYzBWemRHbHRZWFJsSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5MWRHbHNjeTluWVhNbk8xeHVhVzF3YjNKMElIc2djbTkxYm1SVWIwUmxZMmx0WVd4UWJHRmpaWE5TWlcxdmRtbHVaMFY0ZEhKaFdtVnliMlZ6SUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5MWRHbHNjeTkxZEdsc0p6dGNibWx0Y0c5eWRDQjdJRlJsZUhRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5amIyMXdiMjVsYm5RdGJHbGljbUZ5ZVNjN1hHNWNibU52Ym5OMElFVmthWFJIWVhOVWIyOXNWR2x3SUQwZ0tIdGNiaUFnWldScGRFZGhjMDF2WkdVc1hHNGdJR1Z6ZEdsdFlYUmxSM0psWVhSbGNsUm9ZVzVIWVhOVmMyVXNYRzRnSUdkaGMweHBiV2wwTEZ4dUlDQndjbWx2Y21sMGVVeGxkbVZzTEZ4dUlDQXZMeUJ0WVhoR1pXVlFaWEpIWVhNZ0ppQnRZWGhRY21sdmNtbDBlVVpsWlZCbGNrZGhjeUJoY21VZ1pHVnlhWFpsWkNCbWNtOXRJR052Ym1ScGRHbHZibUZzSUd4dloybGpYRzRnSUM4dklISmxiR0YwWldRZ2RHOGdkR2hsSUhOdmRYSmpaU0J2WmlCMGFHVWdaWE4wYVcxaGRHVnpMaUJYWlNCd1lYTnpJSFJvWlhObElIWmhiSFZsY3lCbWNtOXRJSFJvWlZ4dUlDQXZMeUIwYUdVZ2NHRnlaVzUwSUdOdmJYQnZibVZ1ZENBb1pXUnBkQzFuWVhNdGFYUmxiU2tnY21GMGFHVnlJSFJvWVc0Z2NtVmpZV3hqZFd4aGRHVWdkR2hsYlZ4dUlDQnRZWGhHWldWUVpYSkhZWE1zWEc0Z0lHMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpMRnh1SUNCMGNtRnVjMkZqZEdsdmJpeGNiaUFnZEN4Y2JuMHBJRDArSUh0Y2JpQWdZMjl1YzNRZ2RHOXZiRlJwY0UxbGMzTmhaMlVnUFNCMWMyVk5aVzF2S0NncElEMCtJSHRjYmlBZ0lDQnpkMmwwWTJnZ0tIQnlhVzl5YVhSNVRHVjJaV3dwSUh0Y2JpQWdJQ0FnSUdOaGMyVWdVSEpwYjNKcGRIbE1aWFpsYkhNdWJHOTNPbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkQ2duYkc5M1IyRnpVMlYwZEdsdVoxUnZiMnhVYVhCTlpYTnpZV2RsSnl3Z1cxeHVJQ0FnSUNBZ0lDQWdJRHh6Y0dGdUlHdGxlVDE3Y0hKcGIzSnBkSGxNWlhabGJIMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBOFlqNTdkQ2duYkc5M0p5bDlQQzlpUGx4dUlDQWdJQ0FnSUNBZ0lEd3ZjM0JoYmo0c1hHNGdJQ0FnSUNBZ0lGMHBPMXh1SUNBZ0lDQWdZMkZ6WlNCUWNtbHZjbWwwZVV4bGRtVnNjeTV0WldScGRXMDZYRzRnSUNBZ0lDQWdJR2xtSUNobGMzUnBiV0YwWlVkeVpXRjBaWEpVYUdGdVIyRnpWWE5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUW9KMlJwYzJGaWJHVmtSMkZ6VDNCMGFXOXVWRzl2YkZScGNFMWxjM05oWjJVbkxDQmJYRzRnSUNBZ0lDQWdJQ0FnSUNBOGMzQmhiaUJyWlhrOWUyQmthWE5oWW14bFpDMXdjbWx2Y21sMGVTMXNaWFpsYkMwa2UzQnlhVzl5YVhSNVRHVjJaV3g5WUgwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUh0MEtIQnlhVzl5YVhSNVRHVjJaV3dwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQQzl6Y0dGdVBpeGNiaUFnSUNBZ0lDQWdJQ0JkS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDZ25iV1ZrYVhWdFIyRnpVMlYwZEdsdVoxUnZiMnhVYVhCTlpYTnpZV2RsSnl3Z1cxeHVJQ0FnSUNBZ0lDQWdJRHh6Y0dGdUlHdGxlVDE3Y0hKcGIzSnBkSGxNWlhabGJIMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBOFlqNTdkQ2duYldWa2FYVnRKeWw5UEM5aVBseHVJQ0FnSUNBZ0lDQWdJRHd2YzNCaGJqNHNYRzRnSUNBZ0lDQWdJRjBwTzF4dUlDQWdJQ0FnWTJGelpTQlFjbWx2Y21sMGVVeGxkbVZzY3k1b2FXZG9PbHh1SUNBZ0lDQWdJQ0JwWmlBb1pYTjBhVzFoZEdWSGNtVmhkR1Z5VkdoaGJrZGhjMVZ6WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBLQ2RrYVhOaFlteGxaRWRoYzA5d2RHbHZibFJ2YjJ4VWFYQk5aWE56WVdkbEp5d2dXMXh1SUNBZ0lDQWdJQ0FnSUNBZ1BITndZVzRnYTJWNVBYdGdaR2x6WVdKc1pXUXRjSEpwYjNKcGRIa3RiR1YyWld3dEpIdHdjbWx2Y21sMGVVeGxkbVZzZldCOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2RDaHdjbWx2Y21sMGVVeGxkbVZzS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJRHd2YzNCaGJqNHNYRzRnSUNBZ0lDQWdJQ0FnWFNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0dWa2FYUkhZWE5OYjJSbElEMDlQU0JGWkdsMFIyRnpUVzlrWlhNdWMzZGhjSE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDZ25jM2RoY0ZOMVoyZGxjM1JsWkVkaGMxTmxkSFJwYm1kVWIyOXNWR2x3VFdWemMyRm5aU2NwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMEtDZG9hV2RvUjJGelUyVjBkR2x1WjFSdmIyeFVhWEJOWlhOellXZGxKeXdnVzF4dUlDQWdJQ0FnSUNBZ0lEeHpjR0Z1SUd0bGVUMTdjSEpwYjNKcGRIbE1aWFpsYkgwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4WWo1N2RDZ25hR2xuYUNjcGZUd3ZZajVjYmlBZ0lDQWdJQ0FnSUNBOEwzTndZVzQrTEZ4dUlDQWdJQ0FnSUNCZEtUdGNiaUFnSUNBZ0lHTmhjMlVnVUhKcGIzSnBkSGxNWlhabGJITXVZM1Z6ZEc5dE9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDZ25ZM1Z6ZEc5dFIyRnpVMlYwZEdsdVoxUnZiMnhVYVhCTlpYTnpZV2RsSnl3Z1cxeHVJQ0FnSUNBZ0lDQWdJRHh6Y0dGdUlHdGxlVDE3Y0hKcGIzSnBkSGxNWlhabGJIMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBOFlqNTdkQ2duWTNWemRHOXRKeWw5UEM5aVBseHVJQ0FnSUNBZ0lDQWdJRHd2YzNCaGJqNHNYRzRnSUNBZ0lDQWdJRjBwTzF4dUlDQWdJQ0FnWTJGelpTQlFjbWx2Y21sMGVVeGxkbVZzY3k1a1FYQndVM1ZuWjJWemRHVmtPbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEpoYm5OaFkzUnBiMjQvTG05eWFXZHBibHh1SUNBZ0lDQWdJQ0FnSUQ4Z2RDZ25aR0Z3Y0ZOMVoyZGxjM1JsWkVkaGMxTmxkSFJwYm1kVWIyOXNWR2x3VFdWemMyRm5aU2NzSUZ0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOd1lXNGdhMlY1UFh0MGNtRnVjMkZqZEdsdmJqOHViM0pwWjJsdWZUNTdkSEpoYm5OaFkzUnBiMjQvTG05eWFXZHBibjA4TDNOd1lXNCtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hTbGNiaUFnSUNBZ0lDQWdJQ0E2SUc1MWJHdzdYRzRnSUNBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0p5YzdYRzRnSUNBZ2ZWeHVJQ0I5TENCYlpXUnBkRWRoYzAxdlpHVXNJR1Z6ZEdsdFlYUmxSM0psWVhSbGNsUm9ZVzVIWVhOVmMyVXNJSEJ5YVc5eWFYUjVUR1YyWld3c0lIUnlZVzV6WVdOMGFXOXVMQ0IwWFNrN1hHNWNiaUFnYkdWMElHbHRaMEZzZEZSbGVIUTdYRzRnSUdsbUlDaHdjbWx2Y21sMGVVeGxkbVZzSUQwOVBTQlFjbWx2Y21sMGVVeGxkbVZzY3k1c2IzY3BJSHRjYmlBZ0lDQnBiV2RCYkhSVVpYaDBJRDBnZENnblkzVnlkbVZNYjNkSFlYTkZjM1JwYldGMFpTY3BPMXh1SUNCOUlHVnNjMlVnYVdZZ0tIQnlhVzl5YVhSNVRHVjJaV3dnUFQwOUlGQnlhVzl5YVhSNVRHVjJaV3h6TG0xbFpHbDFiU2tnZTF4dUlDQWdJR2x0WjBGc2RGUmxlSFFnUFNCMEtDZGpkWEoyWlUxbFpHbDFiVWRoYzBWemRHbHRZWFJsSnlrN1hHNGdJSDBnWld4elpTQnBaaUFvY0hKcGIzSnBkSGxNWlhabGJDQTlQVDBnVUhKcGIzSnBkSGxNWlhabGJITXVhR2xuYUNrZ2UxeHVJQ0FnSUdsdFowRnNkRlJsZUhRZ1BTQjBLQ2RqZFhKMlpVaHBaMmhIWVhORmMzUnBiV0YwWlNjcE8xeHVJQ0I5WEc1Y2JpQWdMeThnUjJGeklHVnpkR2x0WVhSbElHTjFjblpsSUdseklIWnBjMmxpYkdVZ1ptOXlJR3h2ZHk5dFpXUnBkVzB2YUdsbmFDQm5ZWE1nWlhOMGFXMWhkR1Z6WEc0Z0lDOHZJSFJvWlNCamRYSjJaU0JwY3lCdWIzUWdkbWx6YVdKc1pTQm1iM0lnYUdsbmFDQmxjM1JwYldGMFpYTWdabTl5SUhOM1lYQnpYRzRnSUM4dklHRnNjMjhnYVhRZ2FYTWdibTkwSUhacGMybGliR1VnYVc0Z1kyRnpaU0J2WmlCallXNWpaV3d2YzNCbFpXUjFjQ0JwWmlCMGFHVWdiV1ZrYVhWdEwyaHBaMmdnYjNCMGFXOXVJR2x6SUdScGMyRmliR1ZrWEc0Z0lHTnZibk4wSUhOb2IzZEhZWE5GYzNScGJXRjBaVU4xY25abElEMWNiaUFnSUNCcGMwMWxkR0Z0WVhOclUzVm5aMlZ6ZEdWa1IyRnpSWE4wYVcxaGRHVW9jSEpwYjNKcGRIbE1aWFpsYkNrZ0ppWmNiaUFnSUNBaEtGeHVJQ0FnSUNBZ2NISnBiM0pwZEhsTVpYWmxiQ0E5UFQwZ1VISnBiM0pwZEhsTVpYWmxiSE11YUdsbmFDQW1KbHh1SUNBZ0lDQWdaV1JwZEVkaGMwMXZaR1VnUFQwOUlFVmthWFJIWVhOTmIyUmxjeTV6ZDJGd2MxeHVJQ0FnSUNrZ0ppWmNiaUFnSUNBaFpYTjBhVzFoZEdWSGNtVmhkR1Z5VkdoaGJrZGhjMVZ6WlR0Y2JseHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aVpXUnBkQzFuWVhNdGRHOXZiSFJwY0Y5ZlkyOXVkR0ZwYm1WeVhDSStYRzRnSUNBZ0lDQjdjMmh2ZDBkaGMwVnpkR2x0WVhSbFEzVnlkbVVnUHlBb1hHNGdJQ0FnSUNBZ0lEeHBiV2NnWVd4MFBYdHBiV2RCYkhSVVpYaDBmU0J6Y21NOWUyQXVMMmx0WVdkbGN5OWpkWEoyWlMwa2UzQnlhVzl5YVhSNVRHVjJaV3g5TG5OMloyQjlJQzgrWEc0Z0lDQWdJQ0FwSURvZ2JuVnNiSDFjYmlBZ0lDQWdJSHQwYjI5c1ZHbHdUV1Z6YzJGblpTQW1KaUFvWEc0Z0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpWldScGRDMW5ZWE10ZEc5dmJIUnBjRjlmWTI5dWRHRnBibVZ5WDE5dFpYTnpZV2RsWENJK1hHNGdJQ0FnSUNBZ0lDQWdQRlJsZUhRZ2RtRnlhV0Z1ZEQxN1ZHVjRkRlpoY21saGJuUXVZbTlrZVZOdGZTQmhjejFjSW1nMlhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNCN2RHOXZiRlJwY0UxbGMzTmhaMlY5WEc0Z0lDQWdJQ0FnSUNBZ1BDOVVaWGgwUGx4dUlDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0I3Y0hKcGIzSnBkSGxNWlhabGJDQTlQVDBnVUhKcGIzSnBkSGxNWlhabGJITXVZM1Z6ZEc5dElIeDhYRzRnSUNBZ0lDQmxjM1JwYldGMFpVZHlaV0YwWlhKVWFHRnVSMkZ6VlhObElEOGdiblZzYkNBNklDaGNiaUFnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSmxaR2wwTFdkaGN5MTBiMjlzZEdsd1gxOWpiMjUwWVdsdVpYSmZYM1poYkhWbGMxd2lQbHh1SUNBZ0lDQWdJQ0FnSUR4a2FYWStYRzRnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdFVaWGgwVm1GeWFXRnVkQzVpYjJSNVUyMTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnpQVndpYURaY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIyNTBWMlZwWjJoMFBYdEdiMjUwVjJWcFoyaDBMa0p2YkdSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltVmthWFF0WjJGekxYUnZiMngwYVhCZlgyTnZiblJoYVc1bGNsOWZiR0ZpWld4Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZENnbmJXRjRRbUZ6WlVabFpTY3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1BDOVVaWGgwUGx4dUlDQWdJQ0FnSUNBZ0lDQWdlMjFoZUVabFpWQmxja2RoY3lBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeFVaWGgwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeWFXRnVkRDE3VkdWNGRGWmhjbWxoYm5RdVltOWtlVk50ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGelBWd2lhRFpjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlQWHRVWlhoMFEyOXNiM0l1ZEdWNGRFRnNkR1Z5Ym1GMGFYWmxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW1Wa2FYUXRaMkZ6TFhSdmIyeDBhWEJmWDJOdmJuUmhhVzVsY2w5ZmRtRnNkV1ZjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNKdmRXNWtWRzlFWldOcGJXRnNVR3hoWTJWelVtVnRiM1pwYm1kRmVIUnlZVnBsY205bGN5aHRZWGhHWldWUVpYSkhZWE1zSURRcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUR4a2FYWStYRzRnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdFVaWGgwVm1GeWFXRnVkQzVpYjJSNVUyMTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnpQVndpYURaY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIyNTBWMlZwWjJoMFBYdEdiMjUwVjJWcFoyaDBMa0p2YkdSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltVmthWFF0WjJGekxYUnZiMngwYVhCZlgyTnZiblJoYVc1bGNsOWZiR0ZpWld4Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZENnbmNISnBiM0pwZEhsR1pXVlFjbTl3WlhKRFlYTmxKeWw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMVJsZUhRK1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3YldGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhNZ0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThWR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNtbGhiblE5ZTFSbGVIUldZWEpwWVc1MExtSnZaSGxUYlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGN6MWNJbWcyWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyeHZjajE3VkdWNGRFTnZiRzl5TG5SbGVIUkJiSFJsY201aGRHbDJaWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKbFpHbDBMV2RoY3kxMGIyOXNkR2x3WDE5amIyNTBZV2x1WlhKZlgzWmhiSFZsWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0eWIzVnVaRlJ2UkdWamFXMWhiRkJzWVdObGMxSmxiVzkyYVc1blJYaDBjbUZhWlhKdlpYTW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlVWlhoMFBseHVJQ0FnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQThaR2wyUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQRlJsZUhSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeWFXRnVkRDE3VkdWNGRGWmhjbWxoYm5RdVltOWtlVk50ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JoY3oxY0ltZzJYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl1ZEZkbGFXZG9kRDE3Um05dWRGZGxhV2RvZEM1Q2IyeGtmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0psWkdsMExXZGhjeTEwYjI5c2RHbHdYMTlqYjI1MFlXbHVaWEpmWDJ4aFltVnNYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2UzUW9KMmRoYzB4cGJXbDBKeWw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMVJsZUhRK1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3WjJGelRHbHRhWFFnSmlZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbFRiWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY3oxY0ltZzJYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNqMTdWR1Y0ZEVOdmJHOXlMblJsZUhSQmJIUmxjbTVoZEdsMlpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0psWkdsMExXZGhjeTEwYjI5c2RHbHdYMTlqYjI1MFlXbHVaWEpmWDNaaGJIVmxYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHR5YjNWdVpGUnZSR1ZqYVcxaGJGQnNZV05sYzFKbGJXOTJhVzVuUlhoMGNtRmFaWEp2WlhNb1oyRnpUR2x0YVhRc0lEUXBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMVJsZUhRK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ2w5WEc0Z0lDQWdQQzlrYVhZK1hHNGdJQ2s3WEc1OU8xeHVYRzVGWkdsMFIyRnpWRzl2YkZScGNDNXdjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lHVnpkR2x0WVhSbFIzSmxZWFJsY2xSb1lXNUhZWE5WYzJVNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQndjbWx2Y21sMGVVeGxkbVZzT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQnRZWGhHWldWUVpYSkhZWE02SUZCeWIzQlVlWEJsY3k1dmJtVlBabFI1Y0dVb1cxQnliM0JVZVhCbGN5NXVkVzFpWlhJc0lGQnliM0JVZVhCbGN5NXpkSEpwYm1kZEtTeGNiaUFnYldGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhNNklGQnliM0JVZVhCbGN5NXZibVZQWmxSNWNHVW9XMXh1SUNBZ0lGQnliM0JVZVhCbGN5NXVkVzFpWlhJc1hHNGdJQ0FnVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ1hTa3NYRzRnSUhRNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQmxaR2wwUjJGelRXOWtaVG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ1oyRnpUR2x0YVhRNklGQnliM0JVZVhCbGN5NXVkVzFpWlhJc1hHNGdJSFJ5WVc1ellXTjBhVzl1T2lCUWNtOXdWSGx3WlhNdWIySnFaV04wTEZ4dWZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdSV1JwZEVkaGMxUnZiMnhVYVhBN1hHNGlMQ0psZUhCdmNuUWdleUJrWldaaGRXeDBJSDBnWm5KdmJTQW5MaTlsWkdsMExXZGhjeTFtWldVdGNHOXdiM1psY2ljN1hHNGlMQ0psZUhCdmNuUWdleUJrWldaaGRXeDBJSDBnWm5KdmJTQW5MaTl1WlhSM2IzSnJMWE4wWVhScGMzUnBZM01uTzF4dUlpd2lhVzF3YjNKMElGSmxZV04wTENCN0lIVnpaVU52Ym5SbGVIUWdmU0JtY205dElDZHlaV0ZqZENjN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JHYjI1MFYyVnBaMmgwTEZ4dUlDQlVaWGgwUTI5c2IzSXNYRzRnSUZSbGVIUldZWEpwWVc1MExGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTlvWld4d1pYSnpMMk52Ym5OMFlXNTBjeTlrWlhOcFoyNHRjM2x6ZEdWdEp6dGNibWx0Y0c5eWRDQjdJR2x6VG5Wc2JHbHphQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJobGJIQmxjbk12ZFhScGJITXZkWFJwYkNjN1hHNXBiWEJ2Y25RZ2V5Qm1iM0p0WVhSSFlYTkdaV1ZQY2tabFpWSmhibWRsSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5MWRHbHNjeTluWVhNbk8xeHVhVzF3YjNKMElIc2dTVEU0YmtOdmJuUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5amIyNTBaWGgwY3k5cE1UaHVKenRjYm1sdGNHOXlkQ0I3SUhWelpVZGhjMFpsWlVOdmJuUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5amIyNTBaWGgwY3k5bllYTkdaV1VuTzF4dWFXMXdiM0owSUhzZ1ZHVjRkQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMMk52YlhCdmJtVnVkQzFzYVdKeVlYSjVKenRjYm1sdGNHOXlkQ0I3SUVKaGMyVkdaV1ZVYjI5c2RHbHdMQ0JRY21sdmNtbDBlVVpsWlZSdmIyeDBhWEFnZlNCbWNtOXRJQ2N1TDNSdmIyeDBhWEJ6Snp0Y2JtbHRjRzl5ZENCVGRHRjBkWE5UYkdsa1pYSWdabkp2YlNBbkxpOXpkR0YwZFhNdGMyeHBaR1Z5Snp0Y2JseHVZMjl1YzNRZ1RtVjBkMjl5YTFOMFlYUnBjM1JwWTNNZ1BTQW9LU0E5UGlCN1hHNGdJR052Ym5OMElIUWdQU0IxYzJWRGIyNTBaWGgwS0VreE9HNURiMjUwWlhoMEtUdGNiaUFnWTI5dWMzUWdleUJuWVhOR1pXVkZjM1JwYldGMFpYTWdmU0E5SUhWelpVZGhjMFpsWlVOdmJuUmxlSFFvS1R0Y2JpQWdZMjl1YzNRZ1ptOXliV0YwZEdWa1RHRjBaWE4wUW1GelpVWmxaU0E5SUdadmNtMWhkRWRoYzBabFpVOXlSbVZsVW1GdVoyVW9YRzRnSUNBZ1oyRnpSbVZsUlhOMGFXMWhkR1Z6UHk1bGMzUnBiV0YwWldSQ1lYTmxSbVZsTEZ4dUlDQWdJSHRjYmlBZ0lDQWdJSEJ5WldOcGMybHZiam9nTUN4Y2JpQWdJQ0I5TEZ4dUlDQXBPMXh1SUNCamIyNXpkQ0JtYjNKdFlYUjBaV1JNWVhSbGMzUlFjbWx2Y21sMGVVWmxaVkpoYm1kbElEMGdabTl5YldGMFIyRnpSbVZsVDNKR1pXVlNZVzVuWlNoY2JpQWdJQ0JuWVhOR1pXVkZjM1JwYldGMFpYTS9MbXhoZEdWemRGQnlhVzl5YVhSNVJtVmxVbUZ1WjJVc1hHNGdJQ0FnZXlCd2NtVmphWE5wYjI0NklGc3hMQ0F3WFNCOUxGeHVJQ0FwTzF4dUlDQmpiMjV6ZENCdVpYUjNiM0pyUTI5dVoyVnpkR2x2YmlBOUlHZGhjMFpsWlVWemRHbHRZWFJsY3o4dWJtVjBkMjl5YTBOdmJtZGxjM1JwYjI0N1hHNWNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0ltNWxkSGR2Y21zdGMzUmhkR2x6ZEdsamMxd2lQbHh1SUNBZ0lDQWdQRlJsZUhSY2JpQWdJQ0FnSUNBZ1kyOXNiM0k5ZTFSbGVIUkRiMnh2Y2k1MFpYaDBRV3gwWlhKdVlYUnBkbVY5WEc0Z0lDQWdJQ0FnSUdadmJuUlhaV2xuYUhROWUwWnZiblJYWldsbmFIUXVRbTlzWkgxY2JpQWdJQ0FnSUNBZ2JXRnlaMmx1Vkc5d1BYc3pmVnh1SUNBZ0lDQWdJQ0J0WVhKbmFXNUNiM1IwYjIwOWV6TjlYRzRnSUNBZ0lDQWdJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbFljMzFjYmlBZ0lDQWdJQ0FnWVhNOVhDSm9ObHdpWEc0Z0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUh0MEtDZHVaWFIzYjNKclUzUmhkSFZ6SnlsOVhHNGdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbTVsZEhkdmNtc3RjM1JoZEdsemRHbGpjMTlmYVc1bWIxd2lQbHh1SUNBZ0lDQWdJQ0I3YVhOT2RXeHNhWE5vS0dadmNtMWhkSFJsWkV4aGRHVnpkRUpoYzJWR1pXVXBJRDhnYm5Wc2JDQTZJQ2hjYmlBZ0lDQWdJQ0FnSUNBOFpHbDJYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnVaWFIzYjNKckxYTjBZWFJwYzNScFkzTmZYMlpwWld4a1hDSmNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRXRkR1Z6ZEdsa1BWd2labTl5YldGMGRHVmtMV3hoZEdWemRDMWlZWE5sTFdabFpWd2lYRzRnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQRUpoYzJWR1pXVlViMjlzZEdsd1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGMzQmhiaUJqYkdGemMwNWhiV1U5WENKdVpYUjNiM0pyTFhOMFlYUnBjM1JwWTNOZlgyWnBaV3hrTFdSaGRHRmNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3Wm05eWJXRjBkR1ZrVEdGMFpYTjBRbUZ6WlVabFpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BDOXpjR0Z1UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4YzNCaGJpQmpiR0Z6YzA1aGJXVTlYQ0p1WlhSM2IzSnJMWE4wWVhScGMzUnBZM05mWDJacFpXeGtMV3hoWW1Wc1hDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlM1FvSjJKaGMyVkdaV1VuS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5emNHRnVQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BDOUNZWE5sUm1WbFZHOXZiSFJwY0Q1Y2JpQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdlMmx6VG5Wc2JHbHphQ2htYjNKdFlYUjBaV1JNWVhSbGMzUlFjbWx2Y21sMGVVWmxaVkpoYm1kbEtTQS9JRzUxYkd3Z09pQW9YRzRnSUNBZ0lDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aWJtVjBkMjl5YXkxemRHRjBhWE4wYVdOelgxOW1hV1ZzWkZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaExYUmxjM1JwWkQxY0ltWnZjbTFoZEhSbFpDMXNZWFJsYzNRdGNISnBiM0pwZEhrdFptVmxMWEpoYm1kbFhDSmNiaUFnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQThVSEpwYjNKcGRIbEdaV1ZVYjI5c2RHbHdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThjM0JoYmlCamJHRnpjMDVoYldVOVhDSnVaWFIzYjNKckxYTjBZWFJwYzNScFkzTmZYMlpwWld4a0xXUmhkR0ZjSWo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN1ptOXliV0YwZEdWa1RHRjBaWE4wVUhKcGIzSnBkSGxHWldWU1lXNW5aWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzl6Y0dGdVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGMzQmhiaUJqYkdGemMwNWhiV1U5WENKdVpYUjNiM0pyTFhOMFlYUnBjM1JwWTNOZlgyWnBaV3hrTFd4aFltVnNYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0ozQnlhVzl5YVhSNVJtVmxKeWw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHd2YzNCaGJqNWNiaUFnSUNBZ0lDQWdJQ0FnSUR3dlVISnBiM0pwZEhsR1pXVlViMjlzZEdsd1BseHVJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0I3YVhOT2RXeHNhWE5vS0c1bGRIZHZjbXREYjI1blpYTjBhVzl1S1NBL0lHNTFiR3dnT2lBb1hHNGdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSnVaWFIzYjNKckxYTjBZWFJwYzNScFkzTmZYMlpwWld4a1hDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBOFUzUmhkSFZ6VTJ4cFpHVnlJQzgrWEc0Z0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQThMMlJwZGo1Y2JpQWdLVHRjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFNWxkSGR2Y210VGRHRjBhWE4wYVdOek8xeHVJaXdpWlhod2IzSjBJSHNnWkdWbVlYVnNkQ0I5SUdaeWIyMGdKeTR2YzNSaGRIVnpMWE5zYVdSbGNpYzdYRzRpTENKcGJYQnZjblFnVW1WaFkzUWdabkp2YlNBbmNtVmhZM1FuTzF4dVhHNXBiWEJ2Y25RZ2V5Qk9aWFIzYjNKclEyOXVaMlZ6ZEdsdmJsUm9jbVZ6YUc5c1pITWdmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwyZGhjeWM3WEc1cGJYQnZjblFnZXlCMWMyVkhZWE5HWldWRGIyNTBaWGgwSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dkxpNHZZMjl1ZEdWNGRITXZaMkZ6Um1WbEp6dGNibWx0Y0c5eWRDQjdJSFZ6WlVreE9HNURiMjUwWlhoMElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZMaTR2YUc5dmEzTXZkWE5sU1RFNGJrTnZiblJsZUhRbk8xeHVhVzF3YjNKMElIc2dUbVYwZDI5eWExTjBZV0pwYkdsMGVWUnZiMngwYVhBZ2ZTQm1jbTl0SUNjdUxpOTBiMjlzZEdsd2N5YzdYRzVjYm1OdmJuTjBJRWRTUVVSSlJVNVVYME5QVEU5U1V5QTlJRnRjYmlBZ0p5TXdNemRFUkRZbkxGeHVJQ0FuSXpFNE56WkRPQ2NzWEc0Z0lDY2pNa1EzTUVKQkp5eGNiaUFnSnlNME16WTVRVUluTEZ4dUlDQW5JelUzTmpJNVJTY3NYRzRnSUNjak5rRTFSRGt5Snl4Y2JpQWdKeU00TURVMk9ETW5MRnh1SUNBbkl6bEJORVEzTVNjc1hHNGdJQ2NqUWpRME5UWXhKeXhjYmlBZ0p5TkROVFF3TlRVbkxGeHVJQ0FuSTBRM00wRTBPU2NzWEc1ZE8xeHVYRzVqYjI1emRDQmtaWFJsY20xcGJtVlRkR0YwZFhOSmJtWnZJRDBnS0dkcGRtVnVUbVYwZDI5eWEwTnZibWRsYzNScGIyNHBJRDArSUh0Y2JpQWdZMjl1YzNRZ2JtVjBkMjl5YTBOdmJtZGxjM1JwYjI0Z1BTQm5hWFpsYms1bGRIZHZjbXREYjI1blpYTjBhVzl1SUQ4L0lEQXVOVHRjYmlBZ1kyOXVjM1FnWTI5c2IzSkpibVJsZUNBOUlFMWhkR2d1Y205MWJtUW9ibVYwZDI5eWEwTnZibWRsYzNScGIyNGdLaUF4TUNrN1hHNGdJR052Ym5OMElHTnZiRzl5SUQwZ1IxSkJSRWxGVGxSZlEwOU1UMUpUVzJOdmJHOXlTVzVrWlhoZE8xeHVJQ0JqYjI1emRDQnpiR2xrWlhKVWFXTnJWbUZzZFdVZ1BTQmpiMnh2Y2tsdVpHVjRJQ29nTVRBN1hHNWNiaUFnYVdZZ0tHNWxkSGR2Y210RGIyNW5aWE4wYVc5dUlENDlJRTVsZEhkdmNtdERiMjVuWlhOMGFXOXVWR2h5WlhOb2IyeGtjeTVpZFhONUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUhOMFlYUjFjMHhoWW1Wc09pQW5ZblZ6ZVNjc1hHNGdJQ0FnSUNCMGIyOXNkR2x3VEdGaVpXdzZJQ2RvYVdkb1RHOTNaWEpqWVhObEp5eGNiaUFnSUNBZ0lHTnZiRzl5TEZ4dUlDQWdJQ0FnYzJ4cFpHVnlWR2xqYTFaaGJIVmxMRnh1SUNBZ0lIMDdYRzRnSUgwZ1pXeHpaU0JwWmlBb2JtVjBkMjl5YTBOdmJtZGxjM1JwYjI0Z1BqMGdUbVYwZDI5eWEwTnZibWRsYzNScGIyNVVhSEpsYzJodmJHUnpMbk4wWVdKc1pTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNCemRHRjBkWE5NWVdKbGJEb2dKM04wWVdKc1pTY3NYRzRnSUNBZ0lDQjBiMjlzZEdsd1RHRmlaV3c2SUNkemRHRmliR1ZNYjNkbGNtTmhjMlVuTEZ4dUlDQWdJQ0FnWTI5c2IzSXNYRzRnSUNBZ0lDQnpiR2xrWlhKVWFXTnJWbUZzZFdVc1hHNGdJQ0FnZlR0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJSE4wWVhSMWMweGhZbVZzT2lBbmJtOTBRblZ6ZVNjc1hHNGdJQ0FnZEc5dmJIUnBjRXhoWW1Wc09pQW5iRzkzVEc5M1pYSmpZWE5sSnl4Y2JpQWdJQ0JqYjJ4dmNpeGNiaUFnSUNCemJHbGtaWEpVYVdOclZtRnNkV1VzWEc0Z0lIMDdYRzU5TzF4dVhHNWpiMjV6ZENCVGRHRjBkWE5UYkdsa1pYSWdQU0FvS1NBOVBpQjdYRzRnSUdOdmJuTjBJSFFnUFNCMWMyVkpNVGh1UTI5dWRHVjRkQ2dwTzF4dUlDQmpiMjV6ZENCN0lHZGhjMFpsWlVWemRHbHRZWFJsY3lCOUlEMGdkWE5sUjJGelJtVmxRMjl1ZEdWNGRDZ3BPMXh1SUNCamIyNXpkQ0J6ZEdGMGRYTkpibVp2SUQwZ1pHVjBaWEp0YVc1bFUzUmhkSFZ6U1c1bWJ5aG5ZWE5HWldWRmMzUnBiV0YwWlhNdWJtVjBkMjl5YTBOdmJtZGxjM1JwYjI0cE8xeHVYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdQRTVsZEhkdmNtdFRkR0ZpYVd4cGRIbFViMjlzZEdsd1hHNGdJQ0FnSUNCamIyeHZjajE3YzNSaGRIVnpTVzVtYnk1amIyeHZjbjFjYmlBZ0lDQWdJSFJ2YjJ4MGFYQk1ZV0psYkQxN2MzUmhkSFZ6U1c1bWJ5NTBiMjlzZEdsd1RHRmlaV3g5WEc0Z0lDQWdQbHh1SUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSnpkR0YwZFhNdGMyeHBaR1Z5WENJK1hHNGdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWMzUmhkSFZ6TFhOc2FXUmxjbDlmWVhKeWIzY3RZMjl1ZEdGcGJtVnlYQ0krWEc0Z0lDQWdJQ0FnSUNBZ1BHUnBkbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2ljM1JoZEhWekxYTnNhV1JsY2w5ZllYSnliM2N0WW05eVpHVnlYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBlV3hsUFh0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGNtZHBia3hsWm5RNklHQWtlM04wWVhSMWMwbHVabTh1YzJ4cFpHVnlWR2xqYTFaaGJIVmxmU1ZnTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0V0ZEdWemRHbGtQVndpYzNSaGRIVnpMWE5zYVdSbGNpMWhjbkp2ZHkxaWIzSmtaWEpjSWx4dUlDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUR4a2FYWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2ljM1JoZEhWekxYTnNhV1JsY2w5ZllYSnliM2RjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEhsc1pUMTdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p2Y21SbGNsUnZjRU52Ykc5eU9pQnpkR0YwZFhOSmJtWnZMbU52Ykc5eUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhMWFJsYzNScFpEMWNJbk4wWVhSMWN5MXpiR2xrWlhJdFlYSnliM2RjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2ljM1JoZEhWekxYTnNhV1JsY2w5ZmJHbHVaVndpSUM4K1hHNGdJQ0FnSUNBZ0lEeGthWFpjYmlBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnpkR0YwZFhNdGMyeHBaR1Z5WDE5c1lXSmxiRndpWEc0Z0lDQWdJQ0FnSUNBZ2MzUjViR1U5ZTNzZ1kyOXNiM0k2SUhOMFlYUjFjMGx1Wm04dVkyOXNiM0lnZlgxY2JpQWdJQ0FnSUNBZ0lDQmtZWFJoTFhSbGMzUnBaRDFjSW5OMFlYUjFjeTF6Ykdsa1pYSXRiR0ZpWld4Y0lseHVJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnZTNRb2MzUmhkSFZ6U1c1bWJ5NXpkR0YwZFhOTVlXSmxiQ2w5WEc0Z0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnUEM5T1pYUjNiM0pyVTNSaFltbHNhWFI1Vkc5dmJIUnBjRDVjYmlBZ0tUdGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZOMFlYUjFjMU5zYVdSbGNqdGNiaUlzSW1sdGNHOXlkQ0JTWldGamRDQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dVhHNXBiWEJ2Y25RZ2V5QjFjMlZKTVRodVEyOXVkR1Y0ZENCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyaHZiMnR6TDNWelpVa3hPRzVEYjI1MFpYaDBKenRjYm1sdGNHOXlkQ0JDYjNnZ1puSnZiU0FuTGk0dkxpNHZMaTR2ZFdrdlltOTRKenRjYm1sdGNHOXlkQ0JVYjI5c2RHbHdJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMM1J2YjJ4MGFYQW5PMXh1WEc1cGJYQnZjblFnZTF4dUlDQkVTVk5RVEVGWkxGeHVJQ0JHVEVWWVgwUkpVa1ZEVkVsUFRpeGNibjBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2YUdWc2NHVnljeTlqYjI1emRHRnVkSE12WkdWemFXZHVMWE41YzNSbGJTYzdYRzVjYm1OdmJuTjBJRTVsZEhkdmNtdFRkR0YwZFhOVWIyOXNkR2x3SUQwZ0tIc2dZMmhwYkdSeVpXNHNJR2gwYld3c0lIUnBkR3hsSUgwcElEMCtJQ2hjYmlBZ1BGUnZiMngwYVhBZ2NHOXphWFJwYjI0OVhDSjBiM0JjSWlCb2RHMXNQWHRvZEcxc2ZTQjBhWFJzWlQxN2RHbDBiR1Y5UGx4dUlDQWdJRHhDYjNnZ1pHbHpjR3hoZVQxN1JFbFRVRXhCV1M1R1RFVllmU0JtYkdWNFJHbHlaV04wYVc5dVBYdEdURVZZWDBSSlVrVkRWRWxQVGk1RFQweFZUVTU5UGx4dUlDQWdJQ0FnZTJOb2FXeGtjbVZ1ZlZ4dUlDQWdJRHd2UW05NFBseHVJQ0E4TDFSdmIyeDBhWEErWEc0cE8xeHVYRzVPWlhSM2IzSnJVM1JoZEhWelZHOXZiSFJwY0M1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUdOb2FXeGtjbVZ1T2lCUWNtOXdWSGx3WlhNdWJtOWtaUzVwYzFKbGNYVnBjbVZrTEZ4dUlDQm9kRzFzT2lCUWNtOXdWSGx3WlhNdWJtOWtaU3hjYmlBZ2RHbDBiR1U2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc1OU8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1FtRnpaVVpsWlZSdmIyeDBhWEFnUFNBb2V5QmphR2xzWkhKbGJpQjlLU0E5UGlCN1hHNGdJR052Ym5OMElIUWdQU0IxYzJWSk1UaHVRMjl1ZEdWNGRDZ3BPMXh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhPWlhSM2IzSnJVM1JoZEhWelZHOXZiSFJwY0Z4dUlDQWdJQ0FnYUhSdGJEMTdkQ2duYm1WMGQyOXlhMU4wWVhSMWMwSmhjMlZHWldWVWIyOXNkR2x3Snl3Z1cxeHVJQ0FnSUNBZ0lDQThjM1J5YjI1blhHNGdJQ0FnSUNBZ0lDQWdhMlY1UFZ3aVltRnpaVjltWldWZmJXVmthWFZ0WDJWemRHbHRZWFJsWENKY2JpQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0p1WlhSM2IzSnJMWE4wWVhSMWMxOWZkRzl2YkhScGNDMXNZV0psYkZ3aVhHNGdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0I3ZENnbmJXVmthWFZ0SnlsOVhHNGdJQ0FnSUNBZ0lEd3ZjM1J5YjI1blBpeGNiaUFnSUNBZ0lDQWdQSE4wY205dVoxeHVJQ0FnSUNBZ0lDQWdJR3RsZVQxY0ltSmhjMlZmWm1WbFgyaHBaMmhmWlhOMGFXMWhkR1ZjSWx4dUlDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbTVsZEhkdmNtc3RjM1JoZEhWelgxOTBiMjlzZEdsd0xXeGhZbVZzWENKY2JpQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJSHQwS0Nkb2FXZG9KeWw5WEc0Z0lDQWdJQ0FnSUR3dmMzUnliMjVuUGl4Y2JpQWdJQ0FnSUYwcGZWeHVJQ0FnSUQ1Y2JpQWdJQ0FnSUh0amFHbHNaSEpsYm4xY2JpQWdJQ0E4TDA1bGRIZHZjbXRUZEdGMGRYTlViMjlzZEdsd1BseHVJQ0FwTzF4dWZUdGNibHh1UW1GelpVWmxaVlJ2YjJ4MGFYQXVjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQmphR2xzWkhKbGJqb2dVSEp2Y0ZSNWNHVnpMbTV2WkdVdWFYTlNaWEYxYVhKbFpDeGNibjA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JRY21sdmNtbDBlVVpsWlZSdmIyeDBhWEFnUFNBb2V5QmphR2xzWkhKbGJpQjlLU0E5UGlCN1hHNGdJR052Ym5OMElIUWdQU0IxYzJWSk1UaHVRMjl1ZEdWNGRDZ3BPMXh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhPWlhSM2IzSnJVM1JoZEhWelZHOXZiSFJwY0NCMGFYUnNaVDE3ZENnbmJtVjBkMjl5YTFOMFlYUjFjMUJ5YVc5eWFYUjVSbVZsVkc5dmJIUnBjQ2NwZlQ1Y2JpQWdJQ0FnSUh0amFHbHNaSEpsYm4xY2JpQWdJQ0E4TDA1bGRIZHZjbXRUZEdGMGRYTlViMjlzZEdsd1BseHVJQ0FwTzF4dWZUdGNibHh1VUhKcGIzSnBkSGxHWldWVWIyOXNkR2x3TG5CeWIzQlVlWEJsY3lBOUlIdGNiaUFnWTJocGJHUnlaVzQ2SUZCeWIzQlVlWEJsY3k1dWIyUmxMbWx6VW1WeGRXbHlaV1FzWEc1OU8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1RtVjBkMjl5YTFOMFlXSnBiR2wwZVZSdmIyeDBhWEFnUFNBb2V5QmphR2xzWkhKbGJpd2dZMjlzYjNJc0lIUnZiMngwYVhCTVlXSmxiQ0I5S1NBOVBpQjdYRzRnSUdOdmJuTjBJSFFnUFNCMWMyVkpNVGh1UTI5dWRHVjRkQ2dwTzF4dVhHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ1BFNWxkSGR2Y210VGRHRjBkWE5VYjI5c2RHbHdYRzRnSUNBZ0lDQm9kRzFzUFh0MEtDZHVaWFIzYjNKclUzUmhkSFZ6VTNSaFltbHNhWFI1Um1WbFZHOXZiSFJwY0Njc0lGdGNiaUFnSUNBZ0lDQWdQSE4wY205dVoxeHVJQ0FnSUNBZ0lDQWdJR3RsZVQxY0ltNWxkSGR2Y21zdGMzUmhkSFZ6WDE5MGIyOXNkR2x3WENKY2JpQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0p1WlhSM2IzSnJMWE4wWVhSMWMxOWZkRzl2YkhScGNDMXNZV0psYkZ3aVhHNGdJQ0FnSUNBZ0lDQWdjM1I1YkdVOWUzc2dZMjlzYjNJZ2ZYMWNiaUFnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUh0MEtIUnZiMngwYVhCTVlXSmxiQ2w5WEc0Z0lDQWdJQ0FnSUR3dmMzUnliMjVuUGl4Y2JpQWdJQ0FnSUYwcGZWeHVJQ0FnSUQ1Y2JpQWdJQ0FnSUh0amFHbHNaSEpsYm4xY2JpQWdJQ0E4TDA1bGRIZHZjbXRUZEdGMGRYTlViMjlzZEdsd1BseHVJQ0FwTzF4dWZUdGNibHh1VG1WMGQyOXlhMU4wWVdKcGJHbDBlVlJ2YjJ4MGFYQXVjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQmphR2xzWkhKbGJqb2dVSEp2Y0ZSNWNHVnpMbTV2WkdVdWFYTlNaWEYxYVhKbFpDeGNiaUFnWTI5c2IzSTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ2RHOXZiSFJwY0V4aFltVnNPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MbWx6VW1WeGRXbHlaV1FzWEc1OU8xeHVJaXdpYVcxd2IzSjBJRkpsWVdOMExDQjdJSFZ6WlVOaGJHeGlZV05yTENCMWMyVkRiMjUwWlhoMExDQjFjMlZUZEdGMFpTQjlJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ2V5QjFjMlZFYVhOd1lYUmphQ0I5SUdaeWIyMGdKM0psWVdOMExYSmxaSFY0Snp0Y2JtbHRjRzl5ZENCN0lIVnpaVWRoYzBabFpVbHVjSFYwY3lCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJodmIydHpMMmRoYzBabFpVbHVjSFYwTDNWelpVZGhjMFpsWlVsdWNIVjBjeWM3WEc1cGJYQnZjblFnZXlCMGVGQmhjbUZ0YzBGeVpVUmhjSEJUZFdkblpYTjBaV1FnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2Ylc5a2RXeGxjeTkwY21GdWMyRmpkR2x2Ymk1MWRHbHNjeWM3WEc1cGJYQnZjblFnZTF4dUlDQkZaR2wwUjJGelRXOWtaWE1zWEc0Z0lFZEJVMTlNU1UxSlZGTXNYRzRnSUVOVlUxUlBUVjlIUVZOZlJWTlVTVTFCVkVVc1hHNGdJRWRoYzFKbFkyOXRiV1Z1WkdGMGFXOXVjeXhjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmMyaGhjbVZrTDJOdmJuTjBZVzUwY3k5bllYTW5PMXh1WEc1cGJYQnZjblFnVUc5d2IzWmxjaUJtY205dElDY3VMaTh1TGk5MWFTOXdiM0J2ZG1WeUp6dGNibWx0Y0c5eWRDQkNkWFIwYjI0Z1puSnZiU0FuTGk0dkxpNHZkV2t2WW5WMGRHOXVKenRjYm1sdGNHOXlkQ0JGWkdsMFIyRnpSR2x6Y0d4aGVTQm1jbTl0SUNjdUxpOWxaR2wwTFdkaGN5MWthWE53YkdGNUp6dGNibHh1YVcxd2IzSjBJSHNnU1RFNGJrTnZiblJsZUhRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5amIyNTBaWGgwY3k5cE1UaHVKenRjYm1sdGNHOXlkQ0I3WEc0Z0lHTnlaV0YwWlVOaGJtTmxiRlJ5WVc1ellXTjBhVzl1TEZ4dUlDQmpjbVZoZEdWVGNHVmxaRlZ3VkhKaGJuTmhZM1JwYjI0c1hHNGdJR2hwWkdWTmIyUmhiQ3hjYmlBZ2RYQmtZWFJsVkhKaGJuTmhZM1JwYjI1SFlYTkdaV1Z6TEZ4dUlDQm9hV1JsVEc5aFpHbHVaMGx1WkdsallYUnBiMjRzWEc0Z0lITm9iM2RNYjJGa2FXNW5TVzVrYVdOaGRHbHZiaXhjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2YzNSdmNtVXZZV04wYVc5dWN5YzdYRzVwYlhCdmNuUWdURzloWkdsdVowaGxZWEowUW1WaGRDQm1jbTl0SUNjdUxpOHVMaTkxYVM5c2IyRmthVzVuTFdobFlYSjBZbVZoZENjN1hHNXBiWEJ2Y25RZ2V5QjFjMlZKYm1OeVpXMWxiblJsWkVkaGMwWmxaWE1nZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlvYjI5cmN5OTFjMlZKYm1OeVpXMWxiblJsWkVkaGMwWmxaWE1uTzF4dWFXMXdiM0owSUh0Y2JpQWdaR1ZqUjFkRlNWUnZTR1Y0VjBWSkxGeHVJQ0JrWldOcGJXRnNWRzlJWlhnc1hHNGdJR2hsZUZSdlJHVmphVzFoYkN4Y2JuMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyMXZaSFZzWlhNdlkyOXVkbVZ5YzJsdmJpNTFkR2xzY3ljN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlFVmthWFJIWVhOUWIzQnZkbVZ5S0h0Y2JpQWdjRzl3YjNabGNsUnBkR3hsSUQwZ0p5Y3NYRzRnSUdOdmJtWnBjbTFDZFhSMGIyNVVaWGgwSUQwZ0p5Y3NYRzRnSUdWa2FYUkhZWE5FYVhOd2JHRjVVSEp2Y0hNZ1BTQjdmU3hjYmlBZ2RISmhibk5oWTNScGIyNHNYRzRnSUcxdlpHVXNYRzRnSUc5dVEyeHZjMlVzWEc0Z0lHMXBibWx0ZFcxSFlYTk1hVzFwZENBOUlFZEJVMTlNU1UxSlZGTXVVMGxOVUV4RkxGeHVmU2tnZTF4dUlDQmpiMjV6ZENCMElEMGdkWE5sUTI5dWRHVjRkQ2hKTVRodVEyOXVkR1Y0ZENrN1hHNGdJR052Ym5OMElHUnBjM0JoZEdOb0lEMGdkWE5sUkdsemNHRjBZMmdvS1R0Y2JseHVJQ0JqYjI1emRDQmJaR0Z3Y0ZOMVoyZGxjM1JsWkVkaGMwWmxaVUZqYTI1dmQyeGxaR2RsWkN3Z2MyVjBSR0Z3Y0ZOMVoyZGxjM1JsWkVkaGMwWmxaVUZqYTI1dmQyeGxaR2RsWkYwZ1BWeHVJQ0FnSUhWelpWTjBZWFJsS0daaGJITmxLVHRjYmx4dUlDQmpiMjV6ZENCdGFXNXBiWFZ0UjJGelRHbHRhWFJFWldNZ1BTQm9aWGhVYjBSbFkybHRZV3dvYldsdWFXMTFiVWRoYzB4cGJXbDBLVHRjYmlBZ1kyOXVjM1FnZFhCa1lYUmxaRU4xYzNSdmJVZGhjMU5sZEhScGJtZHpJRDBnZFhObFNXNWpjbVZ0Wlc1MFpXUkhZWE5HWldWektIUnlZVzV6WVdOMGFXOXVLVHRjYmx4dUlDQnNaWFFnZFhCa1lYUmxaRlJ5WVc1ellXTjBhVzl1SUQwZ2RISmhibk5oWTNScGIyNDdYRzRnSUdsbUlDaHRiMlJsSUQwOVBTQkZaR2wwUjJGelRXOWtaWE11YzNCbFpXUlZjQ0I4ZkNCdGIyUmxJRDA5UFNCRlpHbDBSMkZ6VFc5a1pYTXVZMkZ1WTJWc0tTQjdYRzRnSUNBZ2RYQmtZWFJsWkZSeVlXNXpZV04wYVc5dUlEMGdlMXh1SUNBZ0lDQWdMaTR1ZEhKaGJuTmhZM1JwYjI0c1hHNGdJQ0FnSUNCMWMyVnlSbVZsVEdWMlpXdzZJRU5WVTFSUFRWOUhRVk5mUlZOVVNVMUJWRVVzWEc0Z0lDQWdJQ0IwZUZCaGNtRnRjem9nZTF4dUlDQWdJQ0FnSUNBdUxpNTBjbUZ1YzJGamRHbHZiaTUwZUZCaGNtRnRjeXhjYmlBZ0lDQWdJQ0FnTGk0dWRYQmtZWFJsWkVOMWMzUnZiVWRoYzFObGRIUnBibWR6TEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnZTF4dUlDQWdJR1Z6ZEdsdFlYUmxaRTFwYm1sdGRXMU9ZWFJwZG1Vc1hHNGdJQ0FnWjJGelVISnBZMlVzWEc0Z0lDQWdjMlYwUjJGelVISnBZMlVzWEc0Z0lDQWdaMkZ6VEdsdGFYUXNYRzRnSUNBZ2MyVjBSMkZ6VEdsdGFYUXNYRzRnSUNBZ2NISnZjR1Z5UjJGelRHbHRhWFFzWEc0Z0lDQWdaWE4wYVcxaGRHVlViMVZ6WlN4Y2JpQWdJQ0JvWVhOSFlYTkZjbkp2Y25Nc1hHNGdJQ0FnWjJGelJYSnliM0p6TEZ4dUlDQWdJRzl1VFdGdWRXRnNRMmhoYm1kbExGeHVJQ0FnSUdKaGJHRnVZMlZGY25KdmNpeGNiaUFnZlNBOUlIVnpaVWRoYzBabFpVbHVjSFYwY3loY2JpQWdJQ0JIWVhOU1pXTnZiVzFsYm1SaGRHbHZibk11YldWa2FYVnRMRnh1SUNBZ0lIVndaR0YwWldSVWNtRnVjMkZqZEdsdmJpeGNiaUFnSUNCdGFXNXBiWFZ0UjJGelRHbHRhWFFzWEc0Z0lDQWdiVzlrWlN4Y2JpQWdLVHRjYmx4dUlDQmpiMjV6ZENCMGVGQmhjbUZ0YzBoaGRtVkNaV1Z1UTNWemRHOXRhWHBsWkNBOVhHNGdJQ0FnWlhOMGFXMWhkR1ZVYjFWelpTQTlQVDBnUTFWVFZFOU5YMGRCVTE5RlUxUkpUVUZVUlNCOGZGeHVJQ0FnSUhSNFVHRnlZVzF6UVhKbFJHRndjRk4xWjJkbGMzUmxaQ2gxY0dSaGRHVmtWSEpoYm5OaFkzUnBiMjRwTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJVWlcxd2IzSmhjbmtnY0d4aFkyVm9iMnhrWlhJc0lIUm9hWE1nYzJodmRXeGtJR0psSUcxaGJtRm5aV1FnWW5rZ2RHaGxJSEJoY21WdWRDQmpiMjF3YjI1bGJuUWdZblYwWEc0Z0lDQXFJSGRsSUhkcGJHd2dZbVVnWlhoMGNtRmpkR2x1WnlCMGFHbHpJR052YlhCdmJtVnVkQ0JtY205dElIUm9aU0JvWVhKa0lIUnZJRzFoYVc1MFlXbHVJRzF2WkdGc1hHNGdJQ0FxSUdOdmJYQnZibVZ1ZEM0Z1JtOXlJRzV2ZHlCMGFHbHpJR2x6SUdwMWMzUWdkRzhnWW1VZ1lXSnNaU0IwYnlCaGNIQnliM0J5YVdGMFpXeDVJR05zYjNObFhHNGdJQ0FxSUhSb1pTQnRiMlJoYkNCcGJpQjBaWE4wYVc1blhHNGdJQ0FxTDF4dUlDQmpiMjV6ZENCamJHOXpaVkJ2Y0c5MlpYSWdQU0IxYzJWRFlXeHNZbUZqYXlnb0tTQTlQaUI3WEc0Z0lDQWdhV1lnS0c5dVEyeHZjMlVwSUh0Y2JpQWdJQ0FnSUc5dVEyeHZjMlVvS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdaR2x6Y0dGMFkyZ29hR2xrWlUxdlpHRnNLQ2twTzF4dUlDQWdJSDFjYmlBZ2ZTd2dXMjl1UTJ4dmMyVXNJR1JwYzNCaGRHTm9YU2s3WEc1Y2JpQWdZMjl1YzNRZ2IyNVRkV0p0YVhRZ1BTQjFjMlZEWVd4c1ltRmpheWhoYzNsdVl5QW9LU0E5UGlCN1hHNGdJQ0FnYVdZZ0tDRjFjR1JoZEdWa1ZISmhibk5oWTNScGIyNGdmSHdnSVcxdlpHVXBJSHRjYmlBZ0lDQWdJR05zYjNObFVHOXdiM1psY2lncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJRzVsZDBkaGMxTmxkSFJwYm1keklEMGdlMXh1SUNBZ0lDQWdaMkZ6T2lCa1pXTnBiV0ZzVkc5SVpYZ29aMkZ6VEdsdGFYUXBMRnh1SUNBZ0lDQWdaMkZ6VEdsdGFYUTZJR1JsWTJsdFlXeFViMGhsZUNobllYTk1hVzFwZENrc1hHNGdJQ0FnSUNCbGMzUnBiV0YwWlZWelpXUTZJR1Z6ZEdsdFlYUmxWRzlWYzJVc1hHNGdJQ0FnSUNCbllYTlFjbWxqWlRvZ1pHVmpSMWRGU1ZSdlNHVjRWMFZKS0dkaGMxQnlhV05sS1N4Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWTI5dWMzUWdZMnhsWVc1VWNtRnVjMkZqZEdsdmJsQmhjbUZ0Y3lBOUlIc2dMaTR1ZFhCa1lYUmxaRlJ5WVc1ellXTjBhVzl1TG5SNFVHRnlZVzF6SUgwN1hHNWNiaUFnSUNCamIyNXpkQ0IxY0dSaGRHVmtWSGhOWlhSaElEMGdlMXh1SUNBZ0lDQWdMaTR1ZFhCa1lYUmxaRlJ5WVc1ellXTjBhVzl1TEZ4dUlDQWdJQ0FnZFhObGNrVmthWFJsWkVkaGMweHBiV2wwT2lCbllYTk1hVzFwZENBaFBUMGdUblZ0WW1WeUtIUnlZVzV6WVdOMGFXOXVMbTl5YVdkcGJtRnNSMkZ6UlhOMGFXMWhkR1VwTEZ4dUlDQWdJQ0FnZFhObGNrWmxaVXhsZG1Wc09pQmxjM1JwYldGMFpWUnZWWE5sSUh4OElFTlZVMVJQVFY5SFFWTmZSVk5VU1UxQlZFVXNYRzRnSUNBZ0lDQjBlRkJoY21GdGN6b2dlMXh1SUNBZ0lDQWdJQ0F1TGk1amJHVmhibFJ5WVc1ellXTjBhVzl1VUdGeVlXMXpMRnh1SUNBZ0lDQWdJQ0F1TGk1dVpYZEhZWE5UWlhSMGFXNW5jeXhjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdmVHRjYmx4dUlDQWdJSE4zYVhSamFDQW9iVzlrWlNrZ2UxeHVJQ0FnSUNBZ1kyRnpaU0JGWkdsMFIyRnpUVzlrWlhNdVkyRnVZMlZzT2x4dUlDQWdJQ0FnSUNCa2FYTndZWFJqYUNoY2JpQWdJQ0FnSUNBZ0lDQmpjbVZoZEdWRFlXNWpaV3hVY21GdWMyRmpkR2x2YmloMWNHUmhkR1ZrVkhKaGJuTmhZM1JwYjI0dWFXUXNJRzVsZDBkaGMxTmxkSFJwYm1kektTeGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmpZWE5sSUVWa2FYUkhZWE5OYjJSbGN5NXpjR1ZsWkZWd09seHVJQ0FnSUNBZ0lDQmthWE53WVhSamFDaGNiaUFnSUNBZ0lDQWdJQ0JqY21WaGRHVlRjR1ZsWkZWd1ZISmhibk5oWTNScGIyNG9kWEJrWVhSbFpGUnlZVzV6WVdOMGFXOXVMbWxrTENCdVpYZEhZWE5UWlhSMGFXNW5jeWtzWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnWTJGelpTQkZaR2wwUjJGelRXOWtaWE11Ylc5a2FXWjVTVzVRYkdGalpUcGNiaUFnSUNBZ0lDQWdibVYzUjJGelUyVjBkR2x1WjNNdWRYTmxja1ZrYVhSbFpFZGhjMHhwYldsMElEMGdkWEJrWVhSbFpGUjRUV1YwWVM1MWMyVnlSV1JwZEdWa1IyRnpUR2x0YVhRN1hHNGdJQ0FnSUNBZ0lHNWxkMGRoYzFObGRIUnBibWR6TG5WelpYSkdaV1ZNWlhabGJDQTlJSFZ3WkdGMFpXUlVlRTFsZEdFdWRYTmxja1psWlV4bGRtVnNPMXh1WEc0Z0lDQWdJQ0FnSUdScGMzQmhkR05vS0hOb2IzZE1iMkZrYVc1blNXNWthV05oZEdsdmJpZ3BLVHRjYmlBZ0lDQWdJQ0FnWVhkaGFYUWdaR2x6Y0dGMFkyZ29YRzRnSUNBZ0lDQWdJQ0FnZFhCa1lYUmxWSEpoYm5OaFkzUnBiMjVIWVhOR1pXVnpLSFZ3WkdGMFpXUlVlRTFsZEdFdWFXUXNJRzVsZDBkaGMxTmxkSFJwYm1kektTeGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWkdsemNHRjBZMmdvYUdsa1pVeHZZV1JwYm1kSmJtUnBZMkYwYVc5dUtDa3BPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJSDFjYmx4dUlDQWdJR05zYjNObFVHOXdiM1psY2lncE8xeHVJQ0I5TENCYlhHNGdJQ0FnZFhCa1lYUmxaRlJ5WVc1ellXTjBhVzl1TEZ4dUlDQWdJRzF2WkdVc1hHNGdJQ0FnWkdsemNHRjBZMmdzWEc0Z0lDQWdZMnh2YzJWUWIzQnZkbVZ5TEZ4dUlDQWdJR2RoYzB4cGJXbDBMRnh1SUNBZ0lHZGhjMUJ5YVdObExGeHVJQ0FnSUhSeVlXNXpZV04wYVc5dUxtOXlhV2RwYm1Gc1IyRnpSWE4wYVcxaGRHVXNYRzRnSUNBZ1pYTjBhVzFoZEdWVWIxVnpaU3hjYmlBZ1hTazdYRzVjYmlBZ2JHVjBJSFJwZEd4bElEMGdkQ2duWldScGRFZGhjMVJwZEd4bEp5azdYRzRnSUdsbUlDaHdiM0J2ZG1WeVZHbDBiR1VwSUh0Y2JpQWdJQ0IwYVhSc1pTQTlJSEJ2Y0c5MlpYSlVhWFJzWlR0Y2JpQWdmU0JsYkhObElHbG1JQ2h0YjJSbElEMDlQU0JGWkdsMFIyRnpUVzlrWlhNdWMzQmxaV1JWY0NrZ2UxeHVJQ0FnSUhScGRHeGxJRDBnZENnbmMzQmxaV1JWY0ZCdmNHOTJaWEpVYVhSc1pTY3BPMXh1SUNCOUlHVnNjMlVnYVdZZ0tHMXZaR1VnUFQwOUlFVmthWFJIWVhOTmIyUmxjeTVqWVc1alpXd3BJSHRjYmlBZ0lDQjBhWFJzWlNBOUlIUW9KMk5oYm1ObGJGQnZjRzkyWlhKVWFYUnNaU2NwTzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnWm05dmRHVnlRblYwZEc5dVZHVjRkQ0E5SUdOdmJtWnBjbTFDZFhSMGIyNVVaWGgwSUh4OElIUW9KM05oZG1VbktUdGNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQThVRzl3YjNabGNseHVJQ0FnSUNBZ2RHbDBiR1U5ZTNScGRHeGxmVnh1SUNBZ0lDQWdiMjVEYkc5elpUMTdZMnh2YzJWUWIzQnZkbVZ5ZlZ4dUlDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aVpXUnBkQzFuWVhNdGNHOXdiM1psY2w5ZmQzSmhjSEJsY2x3aVhHNGdJQ0FnSUNCbWIyOTBaWEk5ZTF4dUlDQWdJQ0FnSUNBOFFuVjBkRzl1WEc0Z0lDQWdJQ0FnSUNBZ2RIbHdaVDFjSW5CeWFXMWhjbmxjSWx4dUlDQWdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWUyOXVVM1ZpYldsMGZWeHVJQ0FnSUNBZ0lDQWdJR1JwYzJGaWJHVmtQWHRvWVhOSFlYTkZjbkp2Y25NZ2ZId2dZbUZzWVc1alpVVnljbTl5SUh4OElDRjBlRkJoY21GdGMwaGhkbVZDWldWdVEzVnpkRzl0YVhwbFpIMWNiaUFnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUh0bWIyOTBaWEpDZFhSMGIyNVVaWGgwZlZ4dUlDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JpQWdJQ0FnSUgxY2JpQWdJQ0ErWEc0Z0lDQWdJQ0E4WkdsMklITjBlV3hsUFh0N0lIQmhaR1JwYm1jNklDY3dJREl3Y0hnZ01qQndlQ0F5TUhCNEp5d2djRzl6YVhScGIyNDZJQ2R5Wld4aGRHbDJaU2NnZlgwK1hHNGdJQ0FnSUNBZ0lIdHdjbTlqWlhOekxtVnVkaTVKVGw5VVJWTlVJRDhnYm5Wc2JDQTZJRHhNYjJGa2FXNW5TR1ZoY25SQ1pXRjBJQzgrZlZ4dUlDQWdJQ0FnSUNBOFJXUnBkRWRoYzBScGMzQnNZWGxjYmlBZ0lDQWdJQ0FnSUNCa1lYQndVM1ZuWjJWemRHVmtSMkZ6Um1WbFFXTnJibTkzYkdWa1oyVmtQWHRrWVhCd1UzVm5aMlZ6ZEdWa1IyRnpSbVZsUVdOcmJtOTNiR1ZrWjJWa2ZWeHVJQ0FnSUNBZ0lDQWdJSE5sZEVSaGNIQlRkV2RuWlhOMFpXUkhZWE5HWldWQlkydHViM2RzWldSblpXUTllMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBSR0Z3Y0ZOMVoyZGxjM1JsWkVkaGMwWmxaVUZqYTI1dmQyeGxaR2RsWkZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JsYzNScGJXRjBaV1JOYVc1cGJYVnRUbUYwYVhabFBYdGxjM1JwYldGMFpXUk5hVzVwYlhWdFRtRjBhWFpsZlZ4dUlDQWdJQ0FnSUNBZ0lHZGhjMUJ5YVdObFBYdG5ZWE5RY21salpYMWNiaUFnSUNBZ0lDQWdJQ0J6WlhSSFlYTlFjbWxqWlQxN2MyVjBSMkZ6VUhKcFkyVjlYRzRnSUNBZ0lDQWdJQ0FnWjJGelRHbHRhWFE5ZTJkaGMweHBiV2wwZlZ4dUlDQWdJQ0FnSUNBZ0lITmxkRWRoYzB4cGJXbDBQWHR6WlhSSFlYTk1hVzFwZEgxY2JpQWdJQ0FnSUNBZ0lDQndjbTl3WlhKSFlYTk1hVzFwZEQxN2NISnZjR1Z5UjJGelRHbHRhWFI5WEc0Z0lDQWdJQ0FnSUNBZ2JXOWtaVDE3Ylc5a1pYMWNiaUFnSUNBZ0lDQWdJQ0IwY21GdWMyRmpkR2x2YmoxN2RYQmtZWFJsWkZSeVlXNXpZV04wYVc5dWZWeHVJQ0FnSUNBZ0lDQWdJRzl1VFdGdWRXRnNRMmhoYm1kbFBYdHZiazFoYm5WaGJFTm9ZVzVuWlgxY2JpQWdJQ0FnSUNBZ0lDQnRhVzVwYlhWdFIyRnpUR2x0YVhROWUyMXBibWx0ZFcxSFlYTk1hVzFwZEVSbFkzMWNiaUFnSUNBZ0lDQWdJQ0JpWVd4aGJtTmxSWEp5YjNJOWUySmhiR0Z1WTJWRmNuSnZjbjFjYmlBZ0lDQWdJQ0FnSUNCMGVGQmhjbUZ0YzBoaGRtVkNaV1Z1UTNWemRHOXRhWHBsWkQxN2RIaFFZWEpoYlhOSVlYWmxRbVZsYmtOMWMzUnZiV2w2WldSOVhHNGdJQ0FnSUNBZ0lDQWdaMkZ6UlhKeWIzSnpQWHRuWVhORmNuSnZjbk45WEc0Z0lDQWdJQ0FnSUNBZ2V5NHVMbVZrYVhSSFlYTkVhWE53YkdGNVVISnZjSE45WEc0Z0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQThMMUJ2Y0c5MlpYSStYRzRnSUNrN1hHNTlYRzVjYmtWa2FYUkhZWE5RYjNCdmRtVnlMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdjRzl3YjNabGNsUnBkR3hsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQmxaR2wwUjJGelJHbHpjR3hoZVZCeWIzQnpPaUJRY205d1ZIbHdaWE11YjJKcVpXTjBMRnh1SUNCamIyNW1hWEp0UW5WMGRHOXVWR1Y0ZERvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdiMjVEYkc5elpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJSFJ5WVc1ellXTjBhVzl1T2lCUWNtOXdWSGx3WlhNdWIySnFaV04wTEZ4dUlDQnRiMlJsT2lCUWNtOXdWSGx3WlhNdWIyNWxUMllvVDJKcVpXTjBMblpoYkhWbGN5aEZaR2wwUjJGelRXOWtaWE1wS1N4Y2JpQWdiV2x1YVcxMWJVZGhjMHhwYldsME9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVmVHRjYmlJc0ltVjRjRzl5ZENCN0lHUmxabUYxYkhRZ2ZTQm1jbTl0SUNjdUwyVmthWFF0WjJGekxYQnZjRzkyWlhJdVkyOXRjRzl1Wlc1MEp6dGNiaUlzSW1sdGNHOXlkQ0JTWldGamRDQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnZXlCMWMyVlRaV3hsWTNSdmNpQjlJR1p5YjIwZ0ozSmxZV04wTFhKbFpIVjRKenRjYmx4dWFXMXdiM0owSUhzZ1ZHVjRkRlpoY21saGJuUWdmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTlvWld4d1pYSnpMMk52Ym5OMFlXNTBjeTlrWlhOcFoyNHRjM2x6ZEdWdEp6dGNibWx0Y0c5eWRDQjdJSFZ6WlVreE9HNURiMjUwWlhoMElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZhRzl2YTNNdmRYTmxTVEU0YmtOdmJuUmxlSFFuTzF4dWFXMXdiM0owSUhzZ1oyVjBTWE5OWVdsdWJtVjBJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2YzJWc1pXTjBiM0p6Snp0Y2JtbHRjRzl5ZENCQ2IzZ2dabkp2YlNBbkxpNHZMaTR2TGk0dmRXa3ZZbTk0Snp0Y2JtbHRjRzl5ZENCSmJtWnZWRzl2YkhScGNDQm1jbTl0SUNjdUxpOHVMaTh1TGk5MWFTOXBibVp2TFhSdmIyeDBhWEF2YVc1bWJ5MTBiMjlzZEdsd0p6dGNibWx0Y0c5eWRDQjdJRlJsZUhRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5amIyMXdiMjVsYm5RdGJHbGljbUZ5ZVNjN1hHNWNibU52Ym5OMElFZGhjMFJsZEdGcGJITkpkR1Z0VkdsMGJHVWdQU0FvS1NBOVBpQjdYRzRnSUdOdmJuTjBJSFFnUFNCMWMyVkpNVGh1UTI5dWRHVjRkQ2dwTzF4dUlDQmpiMjV6ZENCcGMwMWhhVzV1WlhRZ1BTQjFjMlZUWld4bFkzUnZjaWhuWlhSSmMwMWhhVzV1WlhRcE8xeHVYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdQRUp2ZUNCa2FYTndiR0Y1UFZ3aVpteGxlRndpUGx4dUlDQWdJQ0FnUEVKdmVDQnRZWEpuYVc1U2FXZG9kRDE3TVgwK2UzUW9KMmRoY3ljcGZUd3ZRbTk0UGx4dUlDQWdJQ0FnUEhOd1lXNGdZMnhoYzNOT1lXMWxQVndpWjJGekxXUmxkR0ZwYkhNdGFYUmxiUzEwYVhSc1pWOWZaWE4wYVcxaGRHVmNJajVjYmlBZ0lDQWdJQ0FnS0h0MEtDZDBjbUZ1YzJGamRHbHZia1JsZEdGcGJFZGhjMGx1Wm05V01pY3BmU2xjYmlBZ0lDQWdJRHd2YzNCaGJqNWNiaUFnSUNBZ0lEeEpibVp2Vkc5dmJIUnBjRnh1SUNBZ0lDQWdJQ0JqYjI1MFpXNTBWR1Y0ZEQxN1hHNGdJQ0FnSUNBZ0lDQWdQRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeFVaWGgwSUhaaGNtbGhiblE5ZTFSbGVIUldZWEpwWVc1MExtSnZaSGxUYlgwZ1lYTTlYQ0pvTmx3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2RDZ25kSEpoYm5OaFkzUnBiMjVFWlhSaGFXeEhZWE5VYjI5c2RHbHdTVzUwY204bkxDQmJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWE5OWVdsdWJtVjBJRDhnZENnbmJtVjBkMjl5YTA1aGJXVkZkR2hsY21WMWJTY3BJRG9nSnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUYwcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5VVpYaDBQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BGUmxlSFFnZG1GeWFXRnVkRDE3VkdWNGRGWmhjbWxoYm5RdVltOWtlVk50ZlNCaGN6MWNJbWcyWENJK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUh0MEtDZDBjbUZ1YzJGamRHbHZia1JsZEdGcGJFZGhjMVJ2YjJ4MGFYQkZlSEJzWVc1aGRHbHZiaWNwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlVWlhoMFBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEZSbGVIUWdkbUZ5YVdGdWREMTdWR1Y0ZEZaaGNtbGhiblF1WW05a2VWTnRmU0JoY3oxY0ltZzJYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHhoWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUhKbFpqMWNJbWgwZEhCek9pOHZZMjl0YlhWdWFYUjVMbTFsZEdGdFlYTnJMbWx2TDNRdmQyaGhkQzFwY3kxbllYTXRkMmg1TFdSdkxYUnlZVzV6WVdOMGFXOXVjeTEwWVd0bExYTnZMV3h2Ym1jdk16RTNNbHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBQVndpWDJKc1lXNXJYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5Wld3OVhDSnViMjl3Wlc1bGNpQnViM0psWm1WeWNtVnlYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHQwS0NkMGNtRnVjMkZqZEdsdmJrUmxkR0ZwYkVkaGMxUnZiMngwYVhCRGIyNTJaWEp6YVc5dUp5bDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZZVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZWR1Y0ZEQ1Y2JpQWdJQ0FnSUNBZ0lDQThMejVjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCd2IzTnBkR2x2YmoxY0ltSnZkSFJ2YlZ3aVhHNGdJQ0FnSUNBdlBseHVJQ0FnSUR3dlFtOTRQbHh1SUNBcE8xeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnUjJGelJHVjBZV2xzYzBsMFpXMVVhWFJzWlR0Y2JpSXNJbVY0Y0c5eWRDQjdJR1JsWm1GMWJIUWdmU0JtY205dElDY3VMMmRoY3kxa1pYUmhhV3h6TFdsMFpXMHRkR2wwYkdVbk8xeHVJaXdpYVcxd2IzSjBJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnWTJ4aGMzTk9ZVzFsY3lCbWNtOXRJQ2RqYkdGemMyNWhiV1Z6Snp0Y2JtbHRjRzl5ZENCN0lIVnpaVk5sYkdWamRHOXlJSDBnWm5KdmJTQW5jbVZoWTNRdGNtVmtkWGduTzF4dVhHNXBiWEJ2Y25RZ2V5QlVaWGgwUTI5c2IzSWdmU0JtY205dElDY3VMaTh1TGk4dUxpOW9aV3h3WlhKekwyTnZibk4wWVc1MGN5OWtaWE5wWjI0dGMzbHpkR1Z0Snp0Y2JtbHRjRzl5ZENCN0lGQlNTVTFCVWxrc0lGTkZRMDlPUkVGU1dTQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyaGxiSEJsY25NdlkyOXVjM1JoYm5SekwyTnZiVzF2YmljN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JuWlhSUWNtVm1aWEpsYm1ObGN5eGNiaUFnWjJWMFZYTmxRM1Z5Y21WdVkzbFNZWFJsUTJobFkyc3NYRzRnSUhSeVlXNXpZV04wYVc5dVJtVmxVMlZzWldOMGIzSXNYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMM05sYkdWamRHOXljeWM3WEc1cGJYQnZjblFnZXlCblpYUkRkWEp5Wlc1MFJISmhablJVY21GdWMyRmpkR2x2YmlCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJSMVkydHpMM05sYm1Rbk8xeHVhVzF3YjNKMElIc2dkWE5sUjJGelJtVmxRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyTnZiblJsZUhSekwyZGhjMFpsWlNjN1hHNXBiWEJ2Y25RZ2V5QjFjMlZKTVRodVEyOXVkR1Y0ZENCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJodmIydHpMM1Z6WlVreE9HNURiMjUwWlhoMEp6dGNibHh1YVcxd2IzSjBJRUp2ZUNCbWNtOXRJQ2N1TGk4dUxpOTFhUzlpYjNnbk8xeHVhVzF3YjNKMElFeHZZV1JwYm1kSVpXRnlkRUpsWVhRZ1puSnZiU0FuTGk0dkxpNHZkV2t2Ykc5aFpHbHVaeTFvWldGeWRHSmxZWFFuTzF4dWFXMXdiM0owSUVkaGMxUnBiV2x1WnlCbWNtOXRJQ2N1TGk5bllYTXRkR2x0YVc1bkwyZGhjeTEwYVcxcGJtY3VZMjl0Y0c5dVpXNTBKenRjYm1sdGNHOXlkQ0JVY21GdWMyRmpkR2x2YmtSbGRHRnBiRWwwWlcwZ1puSnZiU0FuTGk0dmRISmhibk5oWTNScGIyNHRaR1YwWVdsc0xXbDBaVzB2ZEhKaGJuTmhZM1JwYjI0dFpHVjBZV2xzTFdsMFpXMHVZMjl0Y0c5dVpXNTBKenRjYm1sdGNHOXlkQ0JWYzJWeVVISmxabVZ5Wlc1alpXUkRkWEp5Wlc1amVVUnBjM0JzWVhrZ1puSnZiU0FuTGk0dmRYTmxjaTF3Y21WbVpYSmxibU5sWkMxamRYSnlaVzVqZVMxa2FYTndiR0Y1Snp0Y2JtbHRjRzl5ZENCN0lHaGxlRmRGU1ZSdlJHVmpSMWRGU1NCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5dGIyUjFiR1Z6TDJOdmJuWmxjbk5wYjI0dWRYUnBiSE1uTzF4dWFXMXdiM0owSUhzZ2RYTmxSSEpoWm5SVWNtRnVjMkZqZEdsdmJsZHBkR2hVZUZCaGNtRnRjeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMMmh2YjJ0ekwzVnpaVVJ5WVdaMFZISmhibk5oWTNScGIyNVhhWFJvVkhoUVlYSmhiWE1uTzF4dWFXMXdiM0owSUVkaGMwUmxkR0ZwYkhOSmRHVnRWR2wwYkdVZ1puSnZiU0FuTGk5bllYTXRaR1YwWVdsc2N5MXBkR1Z0TFhScGRHeGxKenRjYmx4dVkyOXVjM1FnUjJGelJHVjBZV2xzYzBsMFpXMGdQU0FvZXlCMWMyVnlRV05yYm05M2JHVmtaMlZrUjJGelRXbHpjMmx1WnlBOUlHWmhiSE5sSUgwcElEMCtJSHRjYmlBZ1kyOXVjM1FnZENBOUlIVnpaVWt4T0c1RGIyNTBaWGgwS0NrN1hHNGdJR052Ym5OMElHUnlZV1owVkhKaGJuTmhZM1JwYjI0Z1BTQjFjMlZUWld4bFkzUnZjaWhuWlhSRGRYSnlaVzUwUkhKaFpuUlVjbUZ1YzJGamRHbHZiaWs3WEc0Z0lHTnZibk4wSUhSeVlXNXpZV04wYVc5dVJHRjBZU0E5SUhWelpVUnlZV1owVkhKaGJuTmhZM1JwYjI1WGFYUm9WSGhRWVhKaGJYTW9LVHRjYmx4dUlDQmpiMjV6ZENCN1hHNGdJQ0FnYUdWNFRXbHVhVzExYlZSeVlXNXpZV04wYVc5dVJtVmxPaUJrY21GbWRFaGxlRTFwYm1sdGRXMVVjbUZ1YzJGamRHbHZia1psWlN4Y2JpQWdJQ0JvWlhoTllYaHBiWFZ0VkhKaGJuTmhZM1JwYjI1R1pXVTZJR1J5WVdaMFNHVjRUV0Y0YVcxMWJWUnlZVzV6WVdOMGFXOXVSbVZsTEZ4dUlDQjlJRDBnZFhObFUyVnNaV04wYjNJb0tITjBZWFJsS1NBOVBpQjBjbUZ1YzJGamRHbHZia1psWlZObGJHVmpkRzl5S0hOMFlYUmxMQ0IwY21GdWMyRmpkR2x2YmtSaGRHRXBLVHRjYmx4dUlDQmpiMjV6ZENCN1hHNGdJQ0FnWlhOMGFXMWhkR1ZWYzJWa0xGeHVJQ0FnSUdoaGMxTnBiWFZzWVhScGIyNUZjbkp2Y2l4Y2JpQWdJQ0J0WVhocGJYVnRRMjl6ZEVsdVNHVjRWMlZwT2lCb1pYaE5ZWGhwYlhWdFZISmhibk5oWTNScGIyNUdaV1VzWEc0Z0lDQWdiV2x1YVcxMWJVTnZjM1JKYmtobGVGZGxhVG9nYUdWNFRXbHVhVzExYlZSeVlXNXpZV04wYVc5dVJtVmxMRnh1SUNBZ0lHMWhlRkJ5YVc5eWFYUjVSbVZsVUdWeVIyRnpMRnh1SUNBZ0lHMWhlRVpsWlZCbGNrZGhjeXhjYmlBZ2ZTQTlJSFZ6WlVkaGMwWmxaVU52Ym5SbGVIUW9LVHRjYmx4dUlDQmpiMjV6ZENCN0lIVnpaVTVoZEdsMlpVTjFjbkpsYm1ONVFYTlFjbWx0WVhKNVEzVnljbVZ1WTNrZ2ZTQTlJSFZ6WlZObGJHVmpkRzl5S0dkbGRGQnlaV1psY21WdVkyVnpLVHRjYmx4dUlDQmpiMjV6ZENCMWMyVkRkWEp5Wlc1amVWSmhkR1ZEYUdWamF5QTlJSFZ6WlZObGJHVmpkRzl5S0dkbGRGVnpaVU4xY25KbGJtTjVVbUYwWlVOb1pXTnJLVHRjYmx4dUlDQnBaaUFvYUdGelUybHRkV3hoZEdsdmJrVnljbTl5SUNZbUlDRjFjMlZ5UVdOcmJtOTNiR1ZrWjJWa1IyRnpUV2x6YzJsdVp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNCOVhHNWNiaUFnWTI5dWMzUWdiV0Y0VUhKcGIzSnBkSGxHWldWUVpYSkhZWE5VYjFKbGJtUmxjaUE5SUNoY2JpQWdJQ0J0WVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3lBL1AxeHVJQ0FnSUdobGVGZEZTVlJ2UkdWalIxZEZTU2gwY21GdWMyRmpkR2x2YmtSaGRHRXVkSGhRWVhKaGJYTS9MbTFoZUZCeWFXOXlhWFI1Um1WbFVHVnlSMkZ6SUQ4L0lDY3dlREFuS1Z4dUlDQXBMblJ2VTNSeWFXNW5LQ2s3WEc1Y2JpQWdZMjl1YzNRZ2JXRjRSbVZsVUdWeVIyRnpWRzlTWlc1a1pYSWdQU0FvWEc0Z0lDQWdiV0Y0Um1WbFVHVnlSMkZ6SUQ4L1hHNGdJQ0FnYUdWNFYwVkpWRzlFWldOSFYwVkpLSFJ5WVc1ellXTjBhVzl1UkdGMFlTNTBlRkJoY21GdGN6OHViV0Y0Um1WbFVHVnlSMkZ6SUQ4L0lDY3dlREFuS1Z4dUlDQXBMblJ2VTNSeWFXNW5LQ2s3WEc1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFZISmhibk5oWTNScGIyNUVaWFJoYVd4SmRHVnRYRzRnSUNBZ0lDQnJaWGs5WENKbllYTXRaR1YwWVdsc2N5MXBkR1Z0WENKY2JpQWdJQ0FnSUdSbGRHRnBiRlJwZEd4bFBYczhSMkZ6UkdWMFlXbHNjMGwwWlcxVWFYUnNaU0F2UG4xY2JpQWdJQ0FnSUdSbGRHRnBiRlJwZEd4bFEyOXNiM0k5ZTFSbGVIUkRiMnh2Y2k1MFpYaDBSR1ZtWVhWc2RIMWNiaUFnSUNBZ0lHUmxkR0ZwYkZSbGVIUTllMXh1SUNBZ0lDQWdJQ0IxYzJWRGRYSnlaVzVqZVZKaGRHVkRhR1ZqYXlBbUpseHVJQ0FnSUNBZ0lDQlBZbXBsWTNRdWEyVjVjeWhrY21GbWRGUnlZVzV6WVdOMGFXOXVLUzVzWlc1bmRHZ2dQVDA5SURBZ0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpWjJGekxXUmxkR0ZwYkhNdGFYUmxiVjlmWTNWeWNtVnVZM2t0WTI5dWRHRnBibVZ5WENJK1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4VEc5aFpHbHVaMGhsWVhKMFFtVmhkQ0JsYzNScGJXRjBaVlZ6WldROWUyVnpkR2x0WVhSbFZYTmxaSDBnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhWYzJWeVVISmxabVZ5Wlc1alpXUkRkWEp5Wlc1amVVUnBjM0JzWVhsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUMTdVMFZEVDA1RVFWSlpmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlQxN2FHVjRUV2x1YVcxMWJWUnlZVzV6WVdOMGFXOXVSbVZsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JvYVdSbFRHRmlaV3c5ZTBKdmIyeGxZVzRvZFhObFRtRjBhWFpsUTNWeWNtVnVZM2xCYzFCeWFXMWhjbmxEZFhKeVpXNWplU2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JrWlhSaGFXeFViM1JoYkQxN1hHNGdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aVoyRnpMV1JsZEdGcGJITXRhWFJsYlY5ZlkzVnljbVZ1WTNrdFkyOXVkR0ZwYm1WeVhDSStYRzRnSUNBZ0lDQWdJQ0FnUEV4dllXUnBibWRJWldGeWRFSmxZWFFnWlhOMGFXMWhkR1ZWYzJWa1BYdGxjM1JwYldGMFpWVnpaV1I5SUM4K1hHNGdJQ0FnSUNBZ0lDQWdQRlZ6WlhKUWNtVm1aWEpsYm1ObFpFTjFjbkpsYm1ONVJHbHpjR3hoZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3WlQxN1VGSkpUVUZTV1gxY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbFBYdG9aWGhOYVc1cGJYVnRWSEpoYm5OaFkzUnBiMjVHWldVZ2ZId2daSEpoWm5SSVpYaE5hVzVwYlhWdFZISmhibk5oWTNScGIyNUdaV1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm9hV1JsVEdGaVpXdzlleUYxYzJWT1lYUnBkbVZEZFhKeVpXNWplVUZ6VUhKcGJXRnllVU4xY25KbGJtTjVmVnh1SUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYzNWaVZHVjRkRDE3WEc0Z0lDQWdJQ0FnSUR3K1hHNGdJQ0FnSUNBZ0lDQWdQRUp2ZUZ4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1UFZ3aVpXUnBkRWRoYzFOMVlsUmxlSFJHWldWTVlXSmxiRndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQmthWE53YkdGNVBWd2lhVzVzYVc1bExXWnNaWGhjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqYkdGemMwNWhiV1Z6S0NkbllYTXRaR1YwWVdsc2N5MXBkR1Z0WDE5bllYTm1aV1V0YkdGaVpXd25MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ2RuWVhNdFpHVjBZV2xzY3kxcGRHVnRYMTluWVhNdFptVmxMWGRoY201cGJtY25PaUJsYzNScGJXRjBaVlZ6WldRZ1BUMDlJQ2RvYVdkb0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcGZWeHVJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeE1iMkZrYVc1blNHVmhjblJDWldGMElHVnpkR2x0WVhSbFZYTmxaRDE3WlhOMGFXMWhkR1ZWYzJWa2ZTQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BFSnZlQ0J0WVhKbmFXNVNhV2RvZEQxN01YMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHpkSEp2Ym1jK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UyVnpkR2x0WVhSbFZYTmxaQ0E5UFQwZ0oyaHBaMmduSUNZbUlDZmltcUFnSjMxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2RDZ25aV1JwZEVkaGMxTjFZbFJsZUhSR1pXVk1ZV0psYkNjcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwzTjBjbTl1Wno1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCclpYazlYQ0psWkdsMFIyRnpVM1ZpVkdWNGRFWmxaVlpoYkhWbFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2laMkZ6TFdSbGRHRnBiSE10YVhSbGJWOWZZM1Z5Y21WdVkza3RZMjl1ZEdGcGJtVnlYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BFeHZZV1JwYm1kSVpXRnlkRUpsWVhRZ1pYTjBhVzFoZEdWVmMyVmtQWHRsYzNScGJXRjBaVlZ6WldSOUlDOCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeFZjMlZ5VUhKbFptVnlaVzVqWldSRGRYSnlaVzVqZVVScGMzQnNZWGxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhrOVhDSmxaR2wwUjJGelUzVmlWR1Y0ZEVabFpVRnRiM1Z1ZEZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVDE3VUZKSlRVRlNXWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUMTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWlhoTllYaHBiWFZ0VkhKaGJuTmhZM1JwYjI1R1pXVWdmSHdnWkhKaFpuUklaWGhOWVhocGJYVnRWSEpoYm5OaFkzUnBiMjVHWldWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHbGtaVXhoWW1Wc1BYc2hkWE5sVG1GMGFYWmxRM1Z5Y21WdVkzbEJjMUJ5YVcxaGNubERkWEp5Wlc1amVYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdJQ0E4THo1Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhOMVlsUnBkR3hsUFh0Y2JpQWdJQ0FnSUNBZ1BFZGhjMVJwYldsdVoxeHVJQ0FnSUNBZ0lDQWdJRzFoZUZCeWFXOXlhWFI1Um1WbFVHVnlSMkZ6UFh0dFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGMxUnZVbVZ1WkdWeWZWeHVJQ0FnSUNBZ0lDQWdJRzFoZUVabFpWQmxja2RoY3oxN2JXRjRSbVZsVUdWeVIyRnpWRzlTWlc1a1pYSjlYRzRnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdMejVjYmlBZ0tUdGNibjA3WEc1Y2JrZGhjMFJsZEdGcGJITkpkR1Z0TG5CeWIzQlVlWEJsY3lBOUlIdGNiaUFnZFhObGNrRmphMjV2ZDJ4bFpHZGxaRWRoYzAxcGMzTnBibWM2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1IyRnpSR1YwWVdsc2MwbDBaVzA3WEc0aUxDSmxlSEJ2Y25RZ2V5QmtaV1poZFd4MElIMGdabkp2YlNBbkxpOW5ZWE10WkdWMFlXbHNjeTFwZEdWdEp6dGNiaUlzSW1sdGNHOXlkQ0JTWldGamRDd2dleUIxYzJWRGIyNTBaWGgwTENCMWMyVkZabVpsWTNRc0lIVnpaVk4wWVhSbElIMGdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUhzZ2RYTmxVMlZzWldOMGIzSWdmU0JtY205dElDZHlaV0ZqZEMxeVpXUjFlQ2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUdOc1lYTnpUbUZ0WlhNZ1puSnZiU0FuWTJ4aGMzTnVZVzFsY3ljN1hHNXBiWEJ2Y25RZ1FtbG5UblZ0WW1WeUlHWnliMjBnSjJKcFoyNTFiV0psY2k1cWN5YzdYRzVjYm1sdGNHOXlkQ0I3SUVkaGMwVnpkR2x0WVhSbFZIbHdaWE1nZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2WTI5dWMzUmhiblJ6TDJkaGN5YzdYRzVjYm1sdGNHOXlkQ0I3SUhWelpWQnlaWFpwYjNWeklIMGdabkp2YlNBbkxpNHZMaTR2TGk0dmFHOXZhM012ZFhObFVISmxkbWx2ZFhNbk8xeHVhVzF3YjNKMElIc2dTVEU0YmtOdmJuUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlqYjI1MFpYaDBjeTlwTVRodUp6dGNibWx0Y0c5eWRDQjdJSFZ6WlVkaGMwWmxaVU52Ym5SbGVIUWdmU0JtY205dElDY3VMaTh1TGk4dUxpOWpiMjUwWlhoMGN5OW5ZWE5HWldVbk8xeHVYRzVwYlhCdmNuUWdlMXh1SUNCblpYUkhZWE5GYzNScGJXRjBaVlI1Y0dVc1hHNGdJR2RsZEVkaGMwWmxaVVZ6ZEdsdFlYUmxjeXhjYmlBZ1oyVjBTWE5IWVhORmMzUnBiV0YwWlhOTWIyRmthVzVuTEZ4dWZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5a2RXTnJjeTl0WlhSaGJXRnpheTl0WlhSaGJXRnpheWM3WEc1Y2JtbHRjRzl5ZENCVWVYQnZaM0poY0doNUlHWnliMjBnSnk0dUx5NHVMM1ZwTDNSNWNHOW5jbUZ3YUhrdmRIbHdiMmR5WVhCb2VTYzdYRzVwYlhCdmNuUWdlMXh1SUNCVWVYQnZaM0poY0doNVZtRnlhV0Z1ZEN4Y2JpQWdSazlPVkY5WFJVbEhTRlFzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1TDJobGJIQmxjbk12WTI5dWMzUmhiblJ6TDJSbGMybG5iaTF6ZVhOMFpXMG5PMXh1WEc1cGJYQnZjblFnZXlCblpYUkhZWE5HWldWVWFXMWxSWE4wYVcxaGRHVWdmU0JtY205dElDY3VMaTh1TGk4dUxpOXpkRzl5WlM5aFkzUnBiMjV6Snp0Y2JtbHRjRzl5ZENCN0lFZEJVMTlHVDFKTlgwVlNVazlTVXlCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJobGJIQmxjbk12WTI5dWMzUmhiblJ6TDJkaGN5YzdYRzVjYmk4dklFOXVZMlVnZDJVZ2NtVmhZMmdnZEdocGN5QnpaV052Ym1RZ2RHaHlaWE5vYjJ4a0xDQjNaU0J6ZDJsMFkyZ2dkRzhnYldsdWRYUmxjeUJoY3lCaElIVnVhWFJjYm1OdmJuTjBJRk5GUTA5T1JGOURWVlJQUmtZZ1BTQTVNRHRjYmx4dUx5OGdVMmh2ZDNNZ1hDSnpaV052Ym1SelhDSWdZWE1nZFc1cGRDQnZaaUIwYVcxbElHbG1JSFZ1WkdWeUlGTkZRMDlPUkY5RFZWUlBSa1lzSUc5MGFHVnlkMmx6WlNCY0ltMXBiblYwWlhOY0lseHVZMjl1YzNRZ2RHOUlkVzFoYmxKbFlXUmhZbXhsVkdsdFpTQTlJQ2h0YVd4c2FYTmxZMjl1WkhNZ1BTQXhMQ0IwS1NBOVBpQjdYRzRnSUdOdmJuTjBJSE5sWTI5dVpITWdQU0JOWVhSb0xtTmxhV3dvYldsc2JHbHpaV052Ym1SeklDOGdNVEF3TUNrN1hHNGdJR2xtSUNoelpXTnZibVJ6SUR3OUlGTkZRMDlPUkY5RFZWUlBSa1lwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkQ2duWjJGelZHbHRhVzVuVTJWamIyNWtjeWNzSUZ0elpXTnZibVJ6WFNrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhRb0oyZGhjMVJwYldsdVowMXBiblYwWlhNbkxDQmJUV0YwYUM1alpXbHNLSE5sWTI5dVpITWdMeUEyTUNsZEtUdGNibjA3WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJIWVhOVWFXMXBibWNvZTF4dUlDQnRZWGhHWldWUVpYSkhZWE1nUFNBd0xGeHVJQ0J0WVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3lBOUlEQXNYRzRnSUdkaGMxZGhjbTVwYm1kekxGeHVmU2tnZTF4dUlDQmpiMjV6ZENCbllYTkZjM1JwYldGMFpWUjVjR1VnUFNCMWMyVlRaV3hsWTNSdmNpaG5aWFJIWVhORmMzUnBiV0YwWlZSNWNHVXBPMXh1SUNCamIyNXpkQ0JuWVhOR1pXVkZjM1JwYldGMFpYTWdQU0IxYzJWVFpXeGxZM1J2Y2loblpYUkhZWE5HWldWRmMzUnBiV0YwWlhNcE8xeHVJQ0JqYjI1emRDQnBjMGRoYzBWemRHbHRZWFJsYzB4dllXUnBibWNnUFNCMWMyVlRaV3hsWTNSdmNpaG5aWFJKYzBkaGMwVnpkR2x0WVhSbGMweHZZV1JwYm1jcE8xeHVYRzRnSUdOdmJuTjBJRnRqZFhOMGIyMUZjM1JwYldGMFpXUlVhVzFsTENCelpYUkRkWE4wYjIxRmMzUnBiV0YwWldSVWFXMWxYU0E5SUhWelpWTjBZWFJsS0c1MWJHd3BPMXh1SUNCamIyNXpkQ0IwSUQwZ2RYTmxRMjl1ZEdWNGRDaEpNVGh1UTI5dWRHVjRkQ2s3WEc0Z0lHTnZibk4wSUhzZ1pYTjBhVzFoZEdWVmMyVmtJSDBnUFNCMWMyVkhZWE5HWldWRGIyNTBaWGgwS0NrN1hHNWNiaUFnTHk4Z1NXWWdkR2hsSUhWelpYSWdhR0Z6SUdOb2IzTmxiaUJoSUhaaGJIVmxJR3h2ZDJWeUlIUm9ZVzRnZEdobElHeHZkeUJuWVhNZ1ptVmxJR1Z6ZEdsdFlYUmxMRnh1SUNBdkx5QlhaU2RzYkNCdVpXVmtJSFJ2SUhWelpTQjBhR1VnZFhObFJXWm1aV04wSUdodmIyc2dZbVZzYjNjZ2RHOGdiV0ZyWlNCaElHTmhiR3dnZEc4Z1kyRnNZM1ZzWVhSbFhHNGdJQzh2SUhSb1pTQjBhVzFsSUhSdklITm9iM2RjYmlBZ1kyOXVjM1FnYVhOVmJtdHViM2R1VEc5M0lEMWNiaUFnSUNCbllYTkdaV1ZGYzNScGJXRjBaWE0vTG14dmR5QW1KbHh1SUNBZ0lFNTFiV0psY2lodFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN5a2dQRnh1SUNBZ0lDQWdUblZ0WW1WeUtHZGhjMFpsWlVWemRHbHRZWFJsY3k1c2IzY3VjM1ZuWjJWemRHVmtUV0Y0VUhKcGIzSnBkSGxHWldWUVpYSkhZWE1wTzF4dVhHNGdJR052Ym5OMElIQnlaWFpwYjNWelRXRjRSbVZsVUdWeVIyRnpJRDBnZFhObFVISmxkbWx2ZFhNb2JXRjRSbVZsVUdWeVIyRnpLVHRjYmlBZ1kyOXVjM1FnY0hKbGRtbHZkWE5OWVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3lBOUlIVnpaVkJ5WlhacGIzVnpLRzFoZUZCeWFXOXlhWFI1Um1WbFVHVnlSMkZ6S1R0Y2JpQWdZMjl1YzNRZ2NISmxkbWx2ZFhOSmMxVnVhMjV2ZDI1TWIzY2dQU0IxYzJWUWNtVjJhVzkxY3locGMxVnVhMjV2ZDI1TWIzY3BPMXh1WEc0Z0lIVnpaVVZtWm1WamRDZ29LU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdjSEpwYjNKcGRIa2dQU0J0WVhoUWNtbHZjbWwwZVVabFpWQmxja2RoY3p0Y2JpQWdJQ0JqYjI1emRDQm1aV1VnUFNCdFlYaEdaV1ZRWlhKSFlYTTdYRzVjYmlBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0JwYzFWdWEyNXZkMjVNYjNjZ2ZIeGNiaUFnSUNBZ0lDaHdjbWx2Y21sMGVTQW1KaUJ3Y21sdmNtbDBlU0FoUFQwZ2NISmxkbWx2ZFhOTllYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN5a2dmSHhjYmlBZ0lDQWdJQ2htWldVZ0ppWWdabVZsSUNFOVBTQndjbVYyYVc5MWMwMWhlRVpsWlZCbGNrZGhjeWxjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJQzh2SUdkbGRFZGhjMFpsWlZScGJXVkZjM1JwYldGMFpTQnlaWEYxYVhKbGN5QndZWEpoYldWMFpYSnpJR2x1SUhOMGNtbHVaeUJtYjNKdFlYUmNiaUFnSUNBZ0lHZGxkRWRoYzBabFpWUnBiV1ZGYzNScGJXRjBaU2hjYmlBZ0lDQWdJQ0FnYm1WM0lFSnBaMDUxYldKbGNpaHdjbWx2Y21sMGVTd2dNVEFwTG5SdlUzUnlhVzVuS0RFd0tTeGNiaUFnSUNBZ0lDQWdibVYzSUVKcFowNTFiV0psY2lobVpXVXNJREV3S1M1MGIxTjBjbWx1WnlneE1Da3NYRzRnSUNBZ0lDQXBMblJvWlc0b0tISmxjM1ZzZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2JXRjRSbVZsVUdWeVIyRnpJRDA5UFNCbVpXVWdKaVlnYldGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhNZ1BUMDlJSEJ5YVc5eWFYUjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MyVjBRM1Z6ZEc5dFJYTjBhVzFoZEdWa1ZHbHRaU2h5WlhOMWJIUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2FYTlZibXR1YjNkdVRHOTNJQ0U5UFNCbVlXeHpaU0FtSmlCd2NtVjJhVzkxYzBselZXNXJibTkzYmt4dmR5QTlQVDBnZEhKMVpTa2dlMXh1SUNBZ0lDQWdjMlYwUTNWemRHOXRSWE4wYVcxaGRHVmtWR2x0WlNodWRXeHNLVHRjYmlBZ0lDQjlYRzRnSUgwc0lGdGNiaUFnSUNCdFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN5eGNiaUFnSUNCdFlYaEdaV1ZRWlhKSFlYTXNYRzRnSUNBZ2FYTlZibXR1YjNkdVRHOTNMRnh1SUNBZ0lIQnlaWFpwYjNWelRXRjRSbVZsVUdWeVIyRnpMRnh1SUNBZ0lIQnlaWFpwYjNWelRXRjRVSEpwYjNKcGRIbEdaV1ZRWlhKSFlYTXNYRzRnSUNBZ2NISmxkbWx2ZFhOSmMxVnVhMjV2ZDI1TWIzY3NYRzRnSUYwcE8xeHVYRzRnSUdsbUlDaGNiaUFnSUNCbllYTlhZWEp1YVc1bmN6OHViV0Y0VUhKcGIzSnBkSGxHWldVZ1BUMDlJRWRCVTE5R1QxSk5YMFZTVWs5U1V5NU5RVmhmVUZKSlQxSkpWRmxmUmtWRlgxUlBUMTlNVDFjZ2ZIeGNiaUFnSUNCbllYTlhZWEp1YVc1bmN6OHViV0Y0Um1WbElEMDlQU0JIUVZOZlJrOVNUVjlGVWxKUFVsTXVUVUZZWDBaRlJWOVVUMDlmVEU5WFhHNGdJQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThWSGx3YjJkeVlYQm9lVnh1SUNBZ0lDQWdJQ0IyWVhKcFlXNTBQWHRVZVhCdlozSmhjR2g1Vm1GeWFXRnVkQzVJTjMxY2JpQWdJQ0FnSUNBZ1ptOXVkRmRsYVdkb2REMTdSazlPVkY5WFJVbEhTRlF1UWs5TVJIMWNiaUFnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqYkdGemMwNWhiV1Z6S0NkbllYTXRkR2x0YVc1bkp5d2dKMmRoY3kxMGFXMXBibWN0TFc1bFoyRjBhWFpsSnlsOVhHNGdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lIdDBLQ2RsWkdsMFIyRnpWRzl2VEc5M0p5bDlYRzRnSUNBZ0lDQThMMVI1Y0c5bmNtRndhSGsrWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVYRzRnSUM4dklFUnZiaWQwSUhOb2IzY2dZVzU1ZEdocGJtY2dhV1lnZDJVZ1pHOXVKM1FnYUdGMlpTQmxibTkxWjJnZ2FXNW1iM0p0WVhScGIyNWNiaUFnYVdZZ0tHbHpSMkZ6UlhOMGFXMWhkR1Z6VEc5aFpHbHVaeUI4ZkNCbllYTkZjM1JwYldGMFpWUjVjR1VnSVQwOUlFZGhjMFZ6ZEdsdFlYUmxWSGx3WlhNdVptVmxUV0Z5YTJWMEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0JqYjI1emRDQjdJR3h2ZHlBOUlIdDlMQ0J0WldScGRXMGdQU0I3ZlN3Z2FHbG5hQ0E5SUh0OUlIMGdQU0JuWVhOR1pXVkZjM1JwYldGMFpYTTdYRzVjYmlBZ2JHVjBJSFJsZUhRZ1BTQW5KenRjYmlBZ2JHVjBJR0YwZEdsMGRXUmxJRDBnSjNCdmMybDBhWFpsSnp0Y2JseHVJQ0F2THlCQmJubDBhR2x1WnlCdFpXUnBkVzBnYjNJZ1ptRnpkR1Z5SUdseklIQnZjMmwwYVhabFhHNGdJR2xtSUNoY2JpQWdJQ0JPZFcxaVpYSW9iV0Y0VUhKcGIzSnBkSGxHWldWUVpYSkhZWE1wSUQ0OUlFNTFiV0psY2lodFpXUnBkVzB1YzNWbloyVnpkR1ZrVFdGNFVISnBiM0pwZEhsR1pXVlFaWEpIWVhNcFhHNGdJQ2tnZTF4dUlDQWdJQzh2SUVocFoyZ3JJR2x6SUhabGNua2diR2xyWld4NUxDQnRaV1JwZFcwZ2FYTWdiR2xyWld4NVhHNGdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ1RuVnRZbVZ5S0cxaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGektTQThJRTUxYldKbGNpaG9hV2RvTG5OMVoyZGxjM1JsWkUxaGVGQnlhVzl5YVhSNVJtVmxVR1Z5UjJGektWeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0x5OGdUV1ZrYVhWdFhHNGdJQ0FnSUNCMFpYaDBJRDBnZENnbloyRnpWR2x0YVc1blVHOXphWFJwZG1VbkxDQmJYRzRnSUNBZ0lDQWdJSFJ2U0hWdFlXNVNaV0ZrWVdKc1pWUnBiV1VvYkc5M0xtMWhlRmRoYVhSVWFXMWxSWE4wYVcxaGRHVXNJSFFwTEZ4dUlDQWdJQ0FnWFNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQzh2SUVocFoyaGNiaUFnSUNBZ0lIUmxlSFFnUFNCMEtDZG5ZWE5VYVcxcGJtZFdaWEo1VUc5emFYUnBkbVVuTENCYlhHNGdJQ0FnSUNBZ0lIUnZTSFZ0WVc1U1pXRmtZV0pzWlZScGJXVW9hR2xuYUM1dGFXNVhZV2wwVkdsdFpVVnpkR2x0WVhSbExDQjBLU3hjYmlBZ0lDQWdJRjBwTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JwWmlBb1pYTjBhVzFoZEdWVmMyVmtJRDA5UFNBbmJHOTNKeWtnZTF4dUlDQWdJQ0FnWVhSMGFYUjFaR1VnUFNBbmJtVm5ZWFJwZG1Vbk8xeHVJQ0FnSUgxY2JpQWdJQ0F2THlCSlppQjBhR1VnZFhObGNpQm9ZWE1nWTJodmMyVnVJR0VnZG1Gc2RXVWdiR1Z6Y3lCMGFHRnVJRzkxY2lCc2IzY2daWE4wYVcxaGRHVXNYRzRnSUNBZ0x5OGdZMkZzWTNWc1lYUmxJR0VnY0c5MFpXNTBhV0ZzSUhkaGFYUWdkR2x0WlZ4dUlDQWdJR2xtSUNocGMxVnVhMjV2ZDI1TWIzY3BJSHRjYmlBZ0lDQWdJQzh2SUVsbUlIZGxJR1JwWkc0bmRDQm5aWFFnWVc1NUlIVnpaV1oxYkNCcGJtWnZjbTFoZEdsdmJpd2djMmh2ZHlCMGFHVmNiaUFnSUNBZ0lDOHZJRndpZFc1cmJtOTNiaUJ3Y205alpYTnphVzVuSUhScGJXVmNJaUJ0WlhOellXZGxYRzRnSUNBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FnSUNGamRYTjBiMjFGYzNScGJXRjBaV1JVYVcxbElIeDhYRzRnSUNBZ0lDQWdJR04xYzNSdmJVVnpkR2x0WVhSbFpGUnBiV1VnUFQwOUlDZDFibXR1YjNkdUp5QjhmRnh1SUNBZ0lDQWdJQ0JqZFhOMGIyMUZjM1JwYldGMFpXUlVhVzFsUHk1MWNIQmxjbFJwYldWQ2IzVnVaQ0E5UFQwZ0ozVnVhMjV2ZDI0blhHNGdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdkR1Y0ZENBOUlIUW9KMlZrYVhSSFlYTlViMjlNYjNjbktUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIUmxlSFFnUFNCMEtDZG5ZWE5VYVcxcGJtZE9aV2RoZEdsMlpTY3NJRnRjYmlBZ0lDQWdJQ0FnSUNCMGIwaDFiV0Z1VW1WaFpHRmliR1ZVYVcxbEtFNTFiV0psY2loamRYTjBiMjFGYzNScGJXRjBaV1JVYVcxbFB5NTFjSEJsY2xScGJXVkNiM1Z1WkNrc0lIUXBMRnh1SUNBZ0lDQWdJQ0JkS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkR1Y0ZENBOUlIUW9KMmRoYzFScGJXbHVaMDVsWjJGMGFYWmxKeXdnVzF4dUlDQWdJQ0FnSUNCMGIwaDFiV0Z1VW1WaFpHRmliR1ZVYVcxbEtHeHZkeTV0WVhoWFlXbDBWR2x0WlVWemRHbHRZWFJsTENCMEtTeGNiaUFnSUNBZ0lGMHBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ1BGUjVjRzluY21Gd2FIbGNiaUFnSUNBZ0lIWmhjbWxoYm5ROWUxUjVjRzluY21Gd2FIbFdZWEpwWVc1MExrZzNmVnh1SUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqYkdGemMwNWhiV1Z6S0NkbllYTXRkR2x0YVc1bkp5d2dlMXh1SUNBZ0lDQWdJQ0JiWUdkaGN5MTBhVzFwYm1jdExTUjdZWFIwYVhSMVpHVjlZRjA2SUdGMGRHbDBkV1JsTEZ4dUlDQWdJQ0FnZlNsOVhHNGdJQ0FnUGx4dUlDQWdJQ0FnZTNSbGVIUjlYRzRnSUNBZ1BDOVVlWEJ2WjNKaGNHaDVQbHh1SUNBcE8xeHVmVnh1WEc1SFlYTlVhVzFwYm1jdWNISnZjRlI1Y0dWeklEMGdlMXh1SUNCdFlYaFFjbWx2Y21sMGVVWmxaVkJsY2tkaGN6b2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnYldGNFJtVmxVR1Z5UjJGek9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0JuWVhOWFlYSnVhVzVuY3pvZ1VISnZjRlI1Y0dWekxtOWlhbVZqZEN4Y2JuMDdYRzRpTENKcGJYQnZjblFnVW1WaFkzUXNJSHNnZFhObFEyRnNiR0poWTJzc0lIVnpaVU52Ym5SbGVIUXNJSFZ6WlZKbFppd2dkWE5sVTNSaGRHVWdmU0JtY205dElDZHlaV0ZqZENjN1hHNXBiWEJ2Y25RZ1VISnZjRlI1Y0dWeklHWnliMjBnSjNCeWIzQXRkSGx3WlhNbk8xeHVhVzF3YjNKMElHTnNZWE56Ym1GdFpYTWdabkp2YlNBblkyeGhjM051WVcxbGN5YzdYRzVwYlhCdmNuUWdleUJKTVRodVEyOXVkR1Y0ZENCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJOdmJuUmxlSFJ6TDJreE9HNG5PMXh1YVcxd2IzSjBJSHNnUW5WMGRHOXVJSDBnWm5KdmJTQW5MaTR2TGk0dlkyOXRjRzl1Wlc1MExXeHBZbkpoY25rbk8xeHVhVzF3YjNKMElFSnZlQ0JtY205dElDY3VMaTh1TGk5MWFTOWliM2duTzF4dWFXMXdiM0owSUh0Y2JpQWdRV3hwWjI1SmRHVnRjeXhjYmlBZ1JFbFRVRXhCV1N4Y2JpQWdTblZ6ZEdsbWVVTnZiblJsYm5Rc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyaGxiSEJsY25NdlkyOXVjM1JoYm5SekwyUmxjMmxuYmkxemVYTjBaVzBuTzF4dWFXMXdiM0owSUhzZ1RXVjBZVTFsZEhKcFkzTkRiMjUwWlhoMElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dlkyOXVkR1Y0ZEhNdmJXVjBZVzFsZEhKcFkzTW5PMXh1YVcxd2IzSjBJSHRjYmlBZ1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEVOaGRHVm5iM0o1TEZ4dUlDQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFMyVjVWSGx3WlN4Y2JpQWdUV1YwWVUxbGRISnBZM05GZG1WdWRFNWhiV1VzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmJXVjBZVzFsZEhKcFkzTW5PMXh1WEc1amIyNXpkQ0J5WVdScGRYTWdQU0F4TkR0Y2JtTnZibk4wSUhOMGNtOXJaVmRwWkhSb0lEMGdNanRjYm1OdmJuTjBJSEpoWkdsMWMxZHBkR2hUZEhKdmEyVWdQU0J5WVdScGRYTWdMU0J6ZEhKdmEyVlhhV1IwYUNBdklESTdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJRWh2YkdSVWIxSmxkbVZoYkVKMWRIUnZiaWg3SUdKMWRIUnZibFJsZUhRc0lHOXVURzl1WjFCeVpYTnpaV1FnZlNrZ2UxeHVJQ0JqYjI1emRDQjBJRDBnZFhObFEyOXVkR1Y0ZENoSk1UaHVRMjl1ZEdWNGRDazdYRzRnSUdOdmJuTjBJR2x6VEc5dVoxQnlaWE56YVc1bklEMGdkWE5sVW1WbUtHWmhiSE5sS1R0Y2JpQWdZMjl1YzNRZ1cybHpWVzVzYjJOcmFXNW5MQ0J6WlhSSmMxVnViRzlqYTJsdVoxMGdQU0IxYzJWVGRHRjBaU2htWVd4elpTazdYRzRnSUdOdmJuTjBJRnRvWVhOVWNtbG5aMlZ5WldSVmJteHZZMnNzSUhObGRFaGhjMVJ5YVdkblpYSmxaRlZ1Ykc5amExMGdQU0IxYzJWVGRHRjBaU2htWVd4elpTazdYRzRnSUdOdmJuTjBJSFJ5WVdOclJYWmxiblFnUFNCMWMyVkRiMjUwWlhoMEtFMWxkR0ZOWlhSeWFXTnpRMjl1ZEdWNGRDazdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGQnlaWFpsYm5RZ1lXNXBiV0YwYVc5dUlHVjJaVzUwY3lCbWNtOXRJSEJ5YjNCdloyRjBhVzVuSUhWd1hHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQmxJQzBnVG1GMGFYWmxJR0Z1YVcxaGRHbHZiaUJsZG1WdWRDQXRJRkpsWVdOMExrRnVhVzFoZEdsdmJrVjJaVzUwUEVoVVRVeEVhWFpGYkdWdFpXNTBQbHh1SUNBZ0tpOWNiaUFnWTI5dWMzUWdjSEpsZG1WdWRGQnliM0J2WjJGMGFXOXVJRDBnS0dVcElEMCtJSHRjYmlBZ0lDQmxMbk4wYjNCUWNtOXdZV2RoZEdsdmJpZ3BPMXh1SUNCOU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCRmRtVnVkQ0JtYjNJZ2JXOTFjMlVnWTJ4cFkyc2daRzkzYmx4dUlDQWdLaTljYmlBZ1kyOXVjM1FnYjI1TmIzVnpaVVJ2ZDI0Z1BTQW9LU0E5UGlCN1hHNGdJQ0FnYVhOTWIyNW5VSEpsYzNOcGJtY3VZM1Z5Y21WdWRDQTlJSFJ5ZFdVN1hHNGdJQ0FnZEhKaFkydEZkbVZ1ZENoN1hHNGdJQ0FnSUNCallYUmxaMjl5ZVRvZ1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEVOaGRHVm5iM0o1TGt0bGVYTXNYRzRnSUNBZ0lDQmxkbVZ1ZERvZ1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEU1aGJXVXVVM0p3U0c5c1pGUnZVbVYyWldGc1EyeHBZMnRUZEdGeWRHVmtMRnh1SUNBZ0lDQWdjSEp2Y0dWeWRHbGxjem9nZTF4dUlDQWdJQ0FnSUNCclpYbGZkSGx3WlRvZ1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEV0bGVWUjVjR1V1VTNKd0xGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNCOUtUdGNiaUFnZlR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUlhabGJuUWdabTl5SUcxdmRYTmxJR05zYVdOcklIVndYRzRnSUNBcUwxeHVJQ0JqYjI1emRDQnZiazF2ZFhObFZYQWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2FYTk1iMjVuVUhKbGMzTnBibWN1WTNWeWNtVnVkQ0E5SUdaaGJITmxPMXh1SUNCOU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lBeExpQlFjbTluY21WemN5QmphWEpzWlNCamIyMXdiR1YwWldRdUlFSmxaMmx1SUc1bGVIUWdZVzVwYldGMGFXOXVJSEJvWVhObElDaFRhSEpwYm1zZ2FHRnNieUJoYm1RZ2MyaHZkeUIxYm14dlkydGxaQ0J3WVdSc2IyTnJLVnh1SUNBZ0tpOWNiaUFnWTI5dWMzUWdiMjVRY205bmNtVnpjME52YlhCc1pYUmxJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHbHpURzl1WjFCeVpYTnphVzVuTG1OMWNuSmxiblFnSmlZZ2MyVjBTWE5WYm14dlkydHBibWNvZEhKMVpTazdYRzRnSUgwN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSURJdUlGUnlhV2RuWlhJZ2IyNU1iMjVuVUhKbGMzTmxaQ0JqWVd4c1ltRmpheTRnUW1WbmFXNGdibVY0ZENCaGJtbHRZWFJwYjI0Z2NHaGhjMlVnS0ZOb2NtbHVheUIxYm14dlkydGxaQ0J3WVdSc2IyTnJJR0Z1WkNCbVlXUmxJR2x1SUc5eWFXZHBibUZzSUdOdmJuUmxiblFwWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCbElDMGdUbUYwYVhabElHRnVhVzFoZEdsdmJpQmxkbVZ1ZENBdElGSmxZV04wTGtGdWFXMWhkR2x2YmtWMlpXNTBQRWhVVFV4RWFYWkZiR1Z0Wlc1MFBseHVJQ0FnS2k5Y2JpQWdZMjl1YzNRZ2RISnBaMmRsY2s5dVRHOXVaMUJ5WlhOelpXUWdQU0IxYzJWRFlXeHNZbUZqYXloY2JpQWdJQ0FvWlNrZ1BUNGdlMXh1SUNBZ0lDQWdkSEpoWTJ0RmRtVnVkQ2g3WEc0Z0lDQWdJQ0FnSUdOaGRHVm5iM0o1T2lCTlpYUmhUV1YwY21samMwVjJaVzUwUTJGMFpXZHZjbmt1UzJWNWN5eGNiaUFnSUNBZ0lDQWdaWFpsYm5RNklFMWxkR0ZOWlhSeWFXTnpSWFpsYm5ST1lXMWxMbE55Y0VodmJHUlViMUpsZG1WaGJFTnZiWEJzWlhSbFpDeGNiaUFnSUNBZ0lDQWdjSEp2Y0dWeWRHbGxjem9nZTF4dUlDQWdJQ0FnSUNBZ0lHdGxlVjkwZVhCbE9pQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFMyVjVWSGx3WlM1VGNuQXNYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUhSeVlXTnJSWFpsYm5Rb2UxeHVJQ0FnSUNBZ0lDQmpZWFJsWjI5eWVUb2dUV1YwWVUxbGRISnBZM05GZG1WdWRFTmhkR1ZuYjNKNUxrdGxlWE1zWEc0Z0lDQWdJQ0FnSUdWMlpXNTBPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBUbUZ0WlM1VGNuQlNaWFpsWVd4V2FXVjNaV1FzWEc0Z0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0JyWlhsZmRIbHdaVG9nVFdWMFlVMWxkSEpwWTNORmRtVnVkRXRsZVZSNWNHVXVVM0p3TEZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQnZia3h2Ym1kUWNtVnpjMlZrS0NrN1hHNGdJQ0FnSUNCelpYUklZWE5VY21sbloyVnlaV1JWYm14dlkyc29kSEoxWlNrN1hHNGdJQ0FnSUNCd2NtVjJaVzUwVUhKdmNHOW5ZWFJwYjI0b1pTazdYRzRnSUNBZ2ZTeGNiaUFnSUNCYmIyNU1iMjVuVUhKbGMzTmxaRjBzWEc0Z0lDazdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlETXVJRkpsYzJWMElHRnVhVzFoZEdsdmJpQnpkR0YwWlhOY2JpQWdJQ292WEc0Z0lHTnZibk4wSUhKbGMyVjBRVzVwYldGMGFXOXVVM1JoZEdWeklEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUhObGRFbHpWVzVzYjJOcmFXNW5LR1poYkhObEtUdGNiaUFnSUNCelpYUklZWE5VY21sbloyVnlaV1JWYm14dlkyc29abUZzYzJVcE8xeHVJQ0I5TzF4dVhHNGdJR052Ym5OMElISmxibVJsY2xCeVpVTnZiWEJzWlhSbFEyOXVkR1Z1ZENBOUlIVnpaVU5oYkd4aVlXTnJLQ2dwSUQwK0lIdGNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnUEVKdmVGeHVJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMk5zWVhOemJtRnRaWE1vSjJodmJHUXRkRzh0Y21WMlpXRnNMV0oxZEhSdmJsOWZZV0p6YjJ4MWRHVXRabWxzYkNjc0lIdGNiaUFnSUNBZ0lDQWdJQ0FuYUc5c1pDMTBieTF5WlhabFlXd3RZblYwZEc5dVgxOWhZbk52YkhWMFpTMW1hV3hzSnpvZ2FYTlZibXh2WTJ0cGJtY3NYRzRnSUNBZ0lDQWdJQ0FnSjJodmJHUXRkRzh0Y21WMlpXRnNMV0oxZEhSdmJsOWZiV0ZwYmkxcFkyOXVMWE5vYjNjbk9pQm9ZWE5VY21sbloyVnlaV1JWYm14dlkyc3NYRzRnSUNBZ0lDQWdJSDBwZlZ4dUlDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBOFFtOTRJR05zWVhOelRtRnRaVDFjSW1odmJHUXRkRzh0Y21WMlpXRnNMV0oxZEhSdmJsOWZZV0p6YjJ4MWRHVXRabWxzYkZ3aVBseHVJQ0FnSUNBZ0lDQWdJRHh6ZG1jZ1kyeGhjM05PWVcxbFBWd2lhRzlzWkMxMGJ5MXlaWFpsWVd3dFluVjBkRzl1WDE5amFYSmpiR1V0YzNablhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBOFkybHlZMnhsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW1odmJHUXRkRzh0Y21WMlpXRnNMV0oxZEhSdmJsOWZZMmx5WTJ4bExXSmhZMnRuY205MWJtUmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmplRDE3Y21Ga2FYVnpmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmplVDE3Y21Ga2FYVnpmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlQWHR5WVdScGRYTlhhWFJvVTNSeWIydGxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0E4TDNOMlp6NWNiaUFnSUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnSUNBZ0lEeENiM2dnWTJ4aGMzTk9ZVzFsUFZ3aWFHOXNaQzEwYnkxeVpYWmxZV3d0WW5WMGRHOXVYMTloWW5OdmJIVjBaUzFtYVd4c1hDSStYRzRnSUNBZ0lDQWdJQ0FnUEhOMlp5QmpiR0Z6YzA1aGJXVTlYQ0pvYjJ4a0xYUnZMWEpsZG1WaGJDMWlkWFIwYjI1ZlgyTnBjbU5zWlMxemRtZGNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeGphWEpqYkdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKcFlTMXNZV0psYkQxN2RDZ25hRzlzWkZSdlVtVjJaV0ZzVEc5amEyVmtUR0ZpWld3bktYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2IyNVVjbUZ1YzJsMGFXOXVSVzVrUFh0dmJsQnliMmR5WlhOelEyOXRjR3hsZEdWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltaHZiR1F0ZEc4dGNtVjJaV0ZzTFdKMWRIUnZibDlmWTJseVkyeGxMV1p2Y21WbmNtOTFibVJjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqZUQxN2NtRmthWFZ6ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqZVQxN2NtRmthWFZ6ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5UFh0eVlXUnBkWE5YYVhSb1UzUnliMnRsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnSUNBOEwzTjJaejVjYmlBZ0lDQWdJQ0FnUEM5Q2IzZytYRzRnSUNBZ0lDQWdJRHhDYjNoY2JpQWdJQ0FnSUNBZ0lDQmthWE53YkdGNVBYdEVTVk5RVEVGWkxrWk1SVmg5WEc0Z0lDQWdJQ0FnSUNBZ1lXeHBaMjVKZEdWdGN6MTdRV3hwWjI1SmRHVnRjeTVqWlc1MFpYSjlYRzRnSUNBZ0lDQWdJQ0FnYW5WemRHbG1lVU52Ym5SbGJuUTllMHAxYzNScFpubERiMjUwWlc1MExtTmxiblJsY24xY2JpQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0pvYjJ4a0xYUnZMWEpsZG1WaGJDMWlkWFIwYjI1ZlgyeHZZMnN0YVdOdmJpMWpiMjUwWVdsdVpYSmNJbHh1SUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ1BHbHRaMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzSmpQVndpYVcxaFoyVnpMMnh2WTJzdGFXTnZiaTV6ZG1kY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnWVd4MFBYdDBLQ2R3WVdSc2IyTnJKeWw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0pvYjJ4a0xYUnZMWEpsZG1WaGJDMWlkWFIwYjI1ZlgyeHZZMnN0YVdOdmJsd2lYRzRnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdJQ0E4TDBKdmVENWNiaUFnSUNBcE8xeHVJQ0I5TENCYmFYTlZibXh2WTJ0cGJtY3NJR2hoYzFSeWFXZG5aWEpsWkZWdWJHOWpheXdnZEYwcE8xeHVYRzRnSUdOdmJuTjBJSEpsYm1SbGNsQnZjM1JEYjIxd2JHVjBaVU52Ym5SbGJuUWdQU0IxYzJWRFlXeHNZbUZqYXlnb0tTQTlQaUI3WEc0Z0lDQWdjbVYwZFhKdUlHbHpWVzVzYjJOcmFXNW5JRDhnS0Z4dUlDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMk5zWVhOemJtRnRaWE1vSjJodmJHUXRkRzh0Y21WMlpXRnNMV0oxZEhSdmJsOWZZV0p6YjJ4MWRHVXRabWxzYkNjc0lIdGNiaUFnSUNBZ0lDQWdJQ0FuYUc5c1pDMTBieTF5WlhabFlXd3RZblYwZEc5dVgxOTFibXh2WTJzdGFXTnZiaTFvYVdSbEp6b2dhR0Z6VkhKcFoyZGxjbVZrVlc1c2IyTnJMRnh1SUNBZ0lDQWdJQ0I5S1gxY2JpQWdJQ0FnSUNBZ2IyNUJibWx0WVhScGIyNUZibVE5ZTNKbGMyVjBRVzVwYldGMGFXOXVVM1JoZEdWemZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQThaR2wyWEc0Z0lDQWdJQ0FnSUNBZ2IyNUJibWx0WVhScGIyNUZibVE5ZTNCeVpYWmxiblJRY205d2IyZGhkR2x2Ym4xY2JpQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0pvYjJ4a0xYUnZMWEpsZG1WaGJDMWlkWFIwYjI1ZlgyRmljMjlzZFhSbExXWnBiR3dnYUc5c1pDMTBieTF5WlhabFlXd3RZblYwZEc5dVgxOWphWEpqYkdVdGMzUmhkR2xqTFc5MWRHVnlMV052Ym5SaGFXNWxjbHdpWEc0Z0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQThjM1puSUdOc1lYTnpUbUZ0WlQxY0ltaHZiR1F0ZEc4dGNtVjJaV0ZzTFdKMWRIUnZibDlmWTJseVkyeGxMWE4yWjF3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEdOcGNtTnNaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0pvYjJ4a0xYUnZMWEpsZG1WaGJDMWlkWFIwYjI1ZlgyTnBjbU5zWlMxemRHRjBhV010YjNWMFpYSmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmplRDE3TVRSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdONVBYc3hOSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjajE3TVRSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBZ0lEd3ZjM1puUGx4dUlDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQWdJRzl1UVc1cGJXRjBhVzl1Ulc1a1BYdHdjbVYyWlc1MFVISnZjRzluWVhScGIyNTlYRzRnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aWFHOXNaQzEwYnkxeVpYWmxZV3d0WW5WMGRHOXVYMTloWW5OdmJIVjBaUzFtYVd4c0lHaHZiR1F0ZEc4dGNtVjJaV0ZzTFdKMWRIUnZibDlmWTJseVkyeGxMWE4wWVhScFl5MXBibTVsY2kxamIyNTBZV2x1WlhKY0lseHVJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnUEhOMlp5QmpiR0Z6YzA1aGJXVTlYQ0pvYjJ4a0xYUnZMWEpsZG1WaGJDMWlkWFIwYjI1ZlgyTnBjbU5zWlMxemRtZGNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeGphWEpqYkdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aWFHOXNaQzEwYnkxeVpYWmxZV3d0WW5WMGRHOXVYMTlqYVhKamJHVXRjM1JoZEdsakxXbHVibVZ5WENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNnOWV6RTBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmplVDE3TVRSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhJOWV6RXlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0E4TDNOMlp6NWNiaUFnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lEeGthWFpjYmlBZ0lDQWdJQ0FnSUNCaGNtbGhMV3hoWW1Wc1BYdDBLQ2RvYjJ4a1ZHOVNaWFpsWVd4VmJteHZZMnRsWkV4aFltVnNKeWw5WEc0Z0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2lhRzlzWkMxMGJ5MXlaWFpsWVd3dFluVjBkRzl1WDE5MWJteHZZMnN0YVdOdmJpMWpiMjUwWVdsdVpYSmNJbHh1SUNBZ0lDQWdJQ0FnSUc5dVFXNXBiV0YwYVc5dVJXNWtQWHQwY21sbloyVnlUMjVNYjI1blVISmxjM05sWkgxY2JpQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJRHhwYldkY2JpQWdJQ0FnSUNBZ0lDQWdJSE55WXoxY0ltbHRZV2RsY3k5MWJteHZZMnN0YVdOdmJpNXpkbWRjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdZV3gwUFh0MEtDZHdZV1JzYjJOckp5bDlYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSm9iMnhrTFhSdkxYSmxkbVZoYkMxaWRYUjBiMjVmWDNWdWJHOWpheTFwWTI5dVhDSmNiaUFnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNrZ09pQnVkV3hzTzF4dUlDQjlMQ0JiYVhOVmJteHZZMnRwYm1jc0lHaGhjMVJ5YVdkblpYSmxaRlZ1Ykc5amF5d2dkSEpwWjJkbGNrOXVURzl1WjFCeVpYTnpaV1FzSUhSZEtUdGNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhDZFhSMGIyNWNiaUFnSUNBZ0lHOXVUVzkxYzJWRWIzZHVQWHR2YmsxdmRYTmxSRzkzYm4xY2JpQWdJQ0FnSUc5dVRXOTFjMlZWY0QxN2IyNU5iM1Z6WlZWd2ZWeHVJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2lhRzlzWkMxMGJ5MXlaWFpsWVd3dFluVjBkRzl1WDE5aWRYUjBiMjR0YUc5c1pGd2lYRzRnSUNBZ0lDQjBaWGgwVUhKdmNITTllM3NnWkdsemNHeGhlVG9nUkVsVFVFeEJXUzVHVEVWWUxDQmhiR2xuYmtsMFpXMXpPaUJCYkdsbmJrbDBaVzF6TG1ObGJuUmxjaUI5ZlZ4dUlDQWdJRDVjYmlBZ0lDQWdJRHhDYjNnZ1kyeGhjM05PWVcxbFBWd2lhRzlzWkMxMGJ5MXlaWFpsWVd3dFluVjBkRzl1WDE5cFkyOXVMV052Ym5SaGFXNWxjbHdpSUcxaGNtZHBibEpwWjJoMFBYc3lmVDVjYmlBZ0lDQWdJQ0FnZTNKbGJtUmxjbEJ5WlVOdmJYQnNaWFJsUTI5dWRHVnVkQ2dwZlZ4dUlDQWdJQ0FnSUNCN2NtVnVaR1Z5VUc5emRFTnZiWEJzWlhSbFEyOXVkR1Z1ZENncGZWeHVJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdJQ0I3WW5WMGRHOXVWR1Y0ZEgxY2JpQWdJQ0E4TDBKMWRIUnZiajVjYmlBZ0tUdGNibjFjYmx4dVNHOXNaRlJ2VW1WMlpXRnNRblYwZEc5dUxuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ0x5b3FYRzRnSUNBcUlGUmxlSFFnZEc4Z1ltVWdaR2x6Y0d4aGVXVmtJRzl1SUhSb1pTQmlkWFIwYjI1Y2JpQWdJQ292WEc0Z0lHSjFkSFJ2YmxSbGVIUTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ0x5b3FYRzRnSUNBcUlFWjFibU4wYVc5dUlIUnZJR0psSUdOaGJHeGxaQ0JoWm5SbGNpQjBhR1VnWVc1cGJXRjBhVzl1SUdseklHWnBibWx6YUdWa1hHNGdJQ0FxTDF4dUlDQnZia3h2Ym1kUWNtVnpjMlZrT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dWZUdGNiaUlzSW1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnZlNCbWNtOXRJQ2N1TDJodmJHUXRkRzh0Y21WMlpXRnNMV0oxZEhSdmJpYzdYRzRpTENKcGJYQnZjblFnVW1WaFkzUXNJSHNnZFhObFUzUmhkR1VnZlNCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdZMnhoYzNOdVlXMWxjeUJtY205dElDZGpiR0Z6YzI1aGJXVnpKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnUW5WMGRHOXVJR1p5YjIwZ0p5NHVMeTR1TDNWcEwySjFkSFJ2YmljN1hHNXBiWEJ2Y25RZ1EyaGxZMnRpYjNnZ1puSnZiU0FuTGk0dkxpNHZkV2t2WTJobFkyc3RZbTk0Snp0Y2JtbHRjRzl5ZENCVWIyOXNkR2x3SUdaeWIyMGdKeTR1THk0dUwzVnBMM1J2YjJ4MGFYQW5PMXh1YVcxd2IzSjBJSHNnU1dOdmJpd2dTV052Yms1aGJXVWdmU0JtY205dElDY3VMaTh1TGk5amIyMXdiMjVsYm5RdGJHbGljbUZ5ZVNjN1hHNXBiWEJ2Y25RZ2V5QkpZMjl1UTI5c2IzSWdmU0JtY205dElDY3VMaTh1TGk4dUxpOW9aV3h3WlhKekwyTnZibk4wWVc1MGN5OWtaWE5wWjI0dGMzbHpkR1Z0Snp0Y2JseHVZMjl1YzNRZ1NHOXRaVTV2ZEdsbWFXTmhkR2x2YmlBOUlDaDdYRzRnSUdGalkyVndkRlJsZUhRc1hHNGdJR05vWldOclltOTRWR1Y0ZEN4Y2JpQWdZMmhsWTJ0aWIzaFViMjlzZEdsd1ZHVjRkQ3hjYmlBZ1kyeGhjM05PWVcxbGN5QTlJRnRkTEZ4dUlDQmtaWE5qY21sd2RHbHZibFJsZUhRc1hHNGdJR2xuYm05eVpWUmxlSFFzWEc0Z0lHbHVabTlVWlhoMExGeHVJQ0J2YmtGalkyVndkQ3hjYmlBZ2IyNUpaMjV2Y21Vc1hHNTlLU0E5UGlCN1hHNGdJR052Ym5OMElGdGphR1ZqYTJKdmVGTjBZWFJsTENCelpYUkRhR1ZqYTBKdmVGTjBZWFJsWFNBOUlIVnpaVk4wWVhSbEtHWmhiSE5sS1R0Y2JseHVJQ0JqYjI1emRDQmphR1ZqYTJKdmVFVnNaVzFsYm5RZ1BTQmphR1ZqYTJKdmVGUmxlSFFnSmlZZ0tGeHVJQ0FnSUR4RGFHVmphMkp2ZUZ4dUlDQWdJQ0FnYVdROVhDSm9iMjFsVG05MGFXWnBZMkYwYVc5dVgyTm9aV05yWW05NFhDSmNiaUFnSUNBZ0lHTm9aV05yWldROWUyTm9aV05yWW05NFUzUmhkR1Y5WEc0Z0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKb2IyMWxMVzV2ZEdsbWFXTmhkR2x2Ymw5ZlkyaGxZMnRpYjNoY0lseHVJQ0FnSUNBZ2IyNURiR2xqYXoxN0tDa2dQVDRnYzJWMFEyaGxZMnRDYjNoVGRHRjBaU2dvWTJobFkydGxaQ2tnUFQ0Z0lXTm9aV05yWldRcGZWeHVJQ0FnSUM4K1hHNGdJQ2s3WEc1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFpHbDJJR05zWVhOelRtRnRaVDE3WTJ4aGMzTnVZVzFsY3lnbmFHOXRaUzF1YjNScFptbGpZWFJwYjI0bkxDQXVMaTVqYkdGemMwNWhiV1Z6S1gwK1hHNGdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW1odmJXVXRibTkwYVdacFkyRjBhVzl1WDE5amIyNTBaVzUwWENJK1hHNGdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWFHOXRaUzF1YjNScFptbGpZWFJwYjI1ZlgyTnZiblJsYm5RdFkyOXVkR0ZwYm1WeVhDSStYRzRnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6YzA1aGJXVTlYQ0pvYjIxbExXNXZkR2xtYVdOaGRHbHZibDlmZEdWNGRGd2lQbnRrWlhOamNtbHdkR2x2YmxSbGVIUjlQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNCN2FXNW1iMVJsZUhRZ1B5QW9YRzRnSUNBZ0lDQWdJQ0FnUEZSdmIyeDBhWEJjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dVBWd2lkRzl3WENKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJwZEd4bFBYdHBibVp2VkdWNGRIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhkeVlYQndaWEpEYkdGemMwNWhiV1U5WENKb2IyMWxMVzV2ZEdsbWFXTmhkR2x2Ymw5ZmRHOXZiSFJwY0MxM2NtRndjR1Z5WENKY2JpQWdJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnSUNBOFNXTnZiaUJ1WVcxbFBYdEpZMjl1VG1GdFpTNUpibVp2ZlNCamIyeHZjajE3U1dOdmJrTnZiRzl5TG1samIyNUVaV1poZFd4MGZTQXZQbHh1SUNBZ0lDQWdJQ0FnSUR3dlZHOXZiSFJwY0Q1Y2JpQWdJQ0FnSUNBZ0tTQTZJRzUxYkd4OVhHNGdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2lhRzl0WlMxdWIzUnBabWxqWVhScGIyNWZYMkoxZEhSdmJuTmNJajVjYmlBZ0lDQWdJQ0FnZTI5dVFXTmpaWEIwSUNZbUlHRmpZMlZ3ZEZSbGVIUWdQeUFvWEc0Z0lDQWdJQ0FnSUNBZ1BFSjFkSFJ2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3WlQxY0luQnlhVzFoY25sY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aWFHOXRaUzF1YjNScFptbGpZWFJwYjI1ZlgyRmpZMlZ3ZEMxaWRYUjBiMjVjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVEYkdsamF6MTdiMjVCWTJObGNIUjlYRzRnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdlMkZqWTJWd2RGUmxlSFI5WEc0Z0lDQWdJQ0FnSUNBZ1BDOUNkWFIwYjI0K1hHNGdJQ0FnSUNBZ0lDa2dPaUJ1ZFd4c2ZWeHVJQ0FnSUNBZ0lDQjdiMjVKWjI1dmNtVWdKaVlnYVdkdWIzSmxWR1Y0ZENBL0lDaGNiaUFnSUNBZ0lDQWdJQ0E4UW5WMGRHOXVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxQVndpYzJWamIyNWtZWEo1WENKY2JpQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW1odmJXVXRibTkwYVdacFkyRjBhVzl1WDE5cFoyNXZjbVV0WW5WMGRHOXVYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk52YldVZ2IyNUpaMjV2Y21VZ2FHRnVaR3hsY25NZ2RYTmxJSFJvWlNCamFHVmphMkp2ZUZOMFlYUmxJSFJ2SUdSbGRHVnliV2x1WlNCM2FHVjBhR1Z5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUIwYnlCa2FYTmhZbXhsSUhSb1pTQnViM1JwWm1sallYUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWV5Z3BJRDArSUc5dVNXZHViM0psS0dOb1pXTnJZbTk0VTNSaGRHVXBmVnh1SUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJSHRwWjI1dmNtVlVaWGgwZlZ4dUlDQWdJQ0FnSUNBZ0lEd3ZRblYwZEc5dVBseHVJQ0FnSUNBZ0lDQXBJRG9nYm5Wc2JIMWNiaUFnSUNBZ0lDQWdlMk5vWldOclltOTRWR1Y0ZENBL0lDaGNiaUFnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbWh2YldVdGJtOTBhV1pwWTJGMGFXOXVYMTlqYUdWamEySnZlQzEzY21Gd2NHVnlYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdZMmhsWTJ0aWIzaFViMjlzZEdsd1ZHVjRkQ0EvSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEZSdmIyeDBhWEJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOcGRHbHZiajFjSW5SdmNGd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2wwYkdVOWUyTm9aV05yWW05NFZHOXZiSFJwY0ZSbGVIUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkM0poY0hCbGNrTnNZWE56VG1GdFpUMWNJbWh2YldVdGJtOTBhV1pwWTJGMGFXOXVYMTlqYUdWamEySnZlQzFzWVdKbGJDMTBiMjlzZEdsd1hDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGphR1ZqYTJKdmVFVnNaVzFsYm5SOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlZHOXZiSFJwY0Q1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2tnT2lBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb1pXTnJZbTk0Uld4bGJXVnVkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdJQ0FnSUR4c1lXSmxiRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0pvYjIxbExXNXZkR2xtYVdOaGRHbHZibDlmWTJobFkydGliM2d0YkdGaVpXeGNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm9kRzFzUm05eVBWd2lhRzl0WlU1dmRHbG1hV05oZEdsdmJsOWphR1ZqYTJKdmVGd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUh0amFHVmphMkp2ZUZSbGVIUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwyeGhZbVZzUGx4dUlDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBcElEb2diblZzYkgxY2JpQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lEd3ZaR2wyUGx4dUlDQXBPMXh1ZlR0Y2JseHVTRzl0WlU1dmRHbG1hV05oZEdsdmJpNXdjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR1VnZEdWNGRDQm1iM0lnZEdobElGd2lRV05qWlhCMFhDSWdZblYwZEc5dUxpQlVhR2x6SUcxMWMzUWdZbVVnWVdOamIyMXdZVzVwWldRZ1lua2dkR2hsSUdCdmJrRmpZMlZ3ZEdBZ2NISnZjQzVjYmlBZ0lDcGNiaUFnSUNvZ1ZHaGxJRndpUVdOalpYQjBYQ0lnWW5WMGRHOXVJR2x6SUc5dWJIa2djbVZ1WkdWeVpXUWdhV1lnZEdocGN5QndjbTl3SUdseklITmxkQzVjYmlBZ0lDb3ZYRzRnSUdGalkyVndkRlJsZUhRNklGQnliM0JVZVhCbGN5NXViMlJsTEZ4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUhSbGVIUWdkRzhnWkdsemNHeGhlU0JoYkc5dVozTnBaR1VnZEdobElHTm9aV05yWW05NExseHVJQ0FnS2x4dUlDQWdLaUJVYUdVZ1kyaGxZMnRpYjNnZ2MzUmhkR1VnYVhNZ2NHRnpjMlZrSUhSdklIUm9aU0JnYjI1SloyNXZjbVZnSUdoaGJtUnNaWElzSUhOdklIUm9hWE1nYzJodmRXeGtJRzl1YkhrZ1ltVWdkWE5sWkNCcFppQjBhR1VnWUc5dVNXZHViM0psWUNCd2NtOXdJR2x6SUhObGRDNWNiaUFnSUNwY2JpQWdJQ29nVkdobElHTm9aV05yWW05NElHbHpJRzl1YkhrZ2NtVnVaR1Z5WldRZ2FXWWdkR2hwY3lCd2NtOXdJR2x6SUhObGRDNWNiaUFnSUNvdlhHNGdJR05vWldOclltOTRWR1Y0ZERvZ1VISnZjRlI1Y0dWekxtNXZaR1VzWEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR1VnZEdWNGRDQjBieUJrYVhOd2JHRjVJR2x1SUhSb1pTQmphR1ZqYTJKdmVDQjBiMjlzZEdsd0xseHVJQ0FnS2x4dUlDQWdLaUJVYUdVZ2RHOXZiSFJwY0NCcGN5QnZibXg1SUhKbGJtUmxjbVZrSUdsbUlIUm9hWE1nY0hKdmNDQnBjeUJ6WlhRdVhHNGdJQ0FxTDF4dUlDQmphR1ZqYTJKdmVGUnZiMngwYVhCVVpYaDBPaUJRY205d1ZIbHdaWE11Ym05a1pTeGNiaUFnTHlvcVhHNGdJQ0FxSUVOMWMzUnZiU0JqYkdGemN5QnVZVzFsY3k1Y2JpQWdJQ292WEc0Z0lHTnNZWE56VG1GdFpYTTZJRkJ5YjNCVWVYQmxjeTVoY25KaGVTeGNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pTQnViM1JwWm1sallYUnBiMjRnWkdWelkzSnBjSFJwYjI0dVhHNGdJQ0FxTDF4dUlDQmtaWE5qY21sd2RHbHZibFJsZUhRNklGQnliM0JVZVhCbGN5NXViMlJsTG1selVtVnhkV2x5WldRc1hHNGdJQzhxS2x4dUlDQWdLaUJVYUdVZ2RHVjRkQ0JtYjNJZ2RHaGxJRndpU1dkdWIzSmxYQ0lnWW5WMGRHOXVMaUJVYUdseklHMTFjM1FnWW1VZ1lXTmpiMjF3WVc1cFpXUWdZbmtnZEdobElHQnZia2xuYm05eVpXQWdjSEp2Y0M1Y2JpQWdJQ3BjYmlBZ0lDb2dWR2hsSUZ3aVNXZHViM0psWENJZ1luVjBkRzl1SUdseklHOXViSGtnY21WdVpHVnlaV1FnYVdZZ2RHaHBjeUJ3Y205d0lHbHpJSE5sZEM1Y2JpQWdJQ292WEc0Z0lHbG5ibTl5WlZSbGVIUTZJRkJ5YjNCVWVYQmxjeTV1YjJSbExGeHVJQ0F2S2lwY2JpQWdJQ29nVkdobElIUmxlSFFnWm05eUlIUm9aU0JwYm1adklHbGpiMjRnZEc5dmJIUnBjQ0JwYmlCMGFHVWdkRzl3TFhKcFoyaDBJRzltSUhSb1pTQnViM1JwWm1sallYUnBiMjR1WEc0Z0lDQXFYRzRnSUNBcUlGUm9aU0JwYm1adkxXbGpiMjRnYVhNZ2IyNXNlU0J5Wlc1a1pYSmxaQ0JwWmlCMGFHbHpJSEJ5YjNBZ2FYTWdjMlYwTGx4dUlDQWdLaTljYmlBZ2FXNW1iMVJsZUhRNklGQnliM0JVZVhCbGN5NXViMlJsTEZ4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUdoaGJtUnNaWElnWm05eUlIUm9aU0JjSWtGalkyVndkRndpSUdKMWRIUnZiaTRnVkdocGN5QnRkWE4wSUdKbElHRmpZMjl0Y0dGdWFXVmtJR0o1SUhSb1pTQmdZV05qWlhCMFZHVjRkR0FnY0hKdmNDNWNiaUFnSUNvdlhHNGdJRzl1UVdOalpYQjBPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pTQm9ZVzVrYkdWeUlHWnZjaUIwYUdVZ1hDSkpaMjV2Y21WY0lpQmlkWFIwYjI0dUlGUm9hWE1nYlhWemRDQmlaU0JoWTJOdmJYQmhibWxsWkNCaWVTQjBhR1VnWUdsbmJtOXlaVlJsZUhSZ0lIQnliM0F1WEc0Z0lDQXFYRzRnSUNBcUlFbG1JR0JqYUdWamEySnZlRlJsZUhSZ0lHbHpJSE5sZEN3Z2RHaGxJR05vWldOclltOTRJSE4wWVhSbElIZHBiR3dnWW1VZ2NHRnpjMlZrSUhSdklIUm9hWE1nWm5WdVkzUnBiMjRnWVhNZ1lTQmliMjlzWldGdUxseHVJQ0FnS2k5Y2JpQWdiMjVKWjI1dmNtVTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnU0c5dFpVNXZkR2xtYVdOaGRHbHZianRjYmlJc0ltVjRjRzl5ZENCN0lHUmxabUYxYkhRZ2ZTQm1jbTl0SUNjdUwyaHZiV1V0Ym05MGFXWnBZMkYwYVc5dUxtTnZiWEJ2Ym1WdWRDYzdYRzRpTENKcGJYQnZjblFnVW1WaFkzUXNJSHNnZFhObFEyOXVkR1Y0ZENCOUlHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0I3SUhWelpWTmxiR1ZqZEc5eUlIMGdabkp2YlNBbmNtVmhZM1F0Y21Wa2RYZ25PMXh1YVcxd2IzSjBJSHNnZFhObFNHbHpkRzl5ZVNCOUlHWnliMjBnSjNKbFlXTjBMWEp2ZFhSbGNpMWtiMjBuTzF4dWFXMXdiM0owSUhzZ2RYTmxTVEU0YmtOdmJuUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlvYjI5cmN5OTFjMlZKTVRodVEyOXVkR1Y0ZENjN1hHNXBiWEJ2Y25RZ2V5QkpUVkJQVWxSZlZFOUxSVTVmVWs5VlZFVWdmU0JtY205dElDY3VMaTh1TGk4dUxpOW9aV3h3WlhKekwyTnZibk4wWVc1MGN5OXliM1YwWlhNbk8xeHVhVzF3YjNKMElFSjFkSFJ2YmlCbWNtOXRJQ2N1TGk4dUxpOTFhUzlpZFhSMGIyNG5PMXh1YVcxd2IzSjBJRUp2ZUNCbWNtOXRJQ2N1TGk4dUxpOTFhUzlpYjNndlltOTRKenRjYm1sdGNHOXlkQ0I3SUZSRldGUmZRVXhKUjA0Z2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5b1pXeHdaWEp6TDJOdmJuTjBZVzUwY3k5a1pYTnBaMjR0YzNsemRHVnRKenRjYm1sdGNHOXlkQ0I3SUdSbGRHVmpkRTVsZDFSdmEyVnVjeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMM04wYjNKbEwyRmpkR2x2Ym5Nbk8xeHVhVzF3YjNKMElIc2dUV1YwWVUxbGRISnBZM05EYjI1MFpYaDBJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZZMjl1ZEdWNGRITXZiV1YwWVcxbGRISnBZM01uTzF4dWFXMXdiM0owSUh0Y2JpQWdUV1YwWVUxbGRISnBZM05GZG1WdWRFTmhkR1ZuYjNKNUxGeHVJQ0JOWlhSaFRXVjBjbWxqYzBWMlpXNTBUbUZ0WlN4Y2JuMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OXRaWFJoYldWMGNtbGpjeWM3WEc1cGJYQnZjblFnZTF4dUlDQm5aWFJKYzFSdmEyVnVSR1YwWldOMGFXOXVVM1Z3Y0c5eWRHVmtMRnh1SUNCblpYUkpjMVJ2YTJWdVJHVjBaV04wYVc5dVNXNWhZM1JwZG1WUGJrMWhhVzV1WlhRc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUwzTmxiR1ZqZEc5eWN5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJRWx0Y0c5eWRGUnZhMlZ1VEdsdWF5Z3BJSHRjYmlBZ1kyOXVjM1FnZEhKaFkydEZkbVZ1ZENBOUlIVnpaVU52Ym5SbGVIUW9UV1YwWVUxbGRISnBZM05EYjI1MFpYaDBLVHRjYmlBZ1kyOXVjM1FnZENBOUlIVnpaVWt4T0c1RGIyNTBaWGgwS0NrN1hHNGdJR052Ym5OMElHaHBjM1J2Y25rZ1BTQjFjMlZJYVhOMGIzSjVLQ2s3WEc1Y2JpQWdZMjl1YzNRZ2FYTlViMnRsYmtSbGRHVmpkR2x2YmxOMWNIQnZjblJsWkNBOUlIVnpaVk5sYkdWamRHOXlLR2RsZEVselZHOXJaVzVFWlhSbFkzUnBiMjVUZFhCd2IzSjBaV1FwTzF4dUlDQmpiMjV6ZENCcGMxUnZhMlZ1UkdWMFpXTjBhVzl1U1c1aFkzUnBkbVZQYmsxaGFXNXVaWFFnUFNCMWMyVlRaV3hsWTNSdmNpaGNiaUFnSUNCblpYUkpjMVJ2YTJWdVJHVjBaV04wYVc5dVNXNWhZM1JwZG1WUGJrMWhhVzV1WlhRc1hHNGdJQ2s3WEc1Y2JpQWdZMjl1YzNRZ2FYTlViMnRsYmtSbGRHVmpkR2x2YmtGMllXbHNZV0pzWlNBOVhHNGdJQ0FnYVhOVWIydGxia1JsZEdWamRHbHZibE4xY0hCdmNuUmxaQ0I4ZkZ4dUlDQWdJR2x6Vkc5clpXNUVaWFJsWTNScGIyNUpibUZqZEdsMlpVOXVUV0ZwYm01bGRDQjhmRnh1SUNBZ0lFSnZiMnhsWVc0b2NISnZZMlZ6Y3k1bGJuWXVTVTVmVkVWVFZDazdYRzVjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0E4UW05NElHTnNZWE56VG1GdFpUMWNJbWx0Y0c5eWRDMTBiMnRsYmkxc2FXNXJYQ0lnZEdWNGRFRnNhV2R1UFh0VVJWaFVYMEZNU1VkT0xrTkZUbFJGVW4wK1hHNGdJQ0FnSUNCN2FYTlViMnRsYmtSbGRHVmpkR2x2YmtGMllXbHNZV0pzWlNBbUppQW9YRzRnSUNBZ0lDQWdJRHcrWEc0Z0lDQWdJQ0FnSUNBZ1BFSjFkSFJ2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQVndpYVcxd2IzSjBMWFJ2YTJWdUxXeHBibXRmWDJ4cGJtdGNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZUzEwWlhOMGFXUTlYQ0p5WldaeVpYTm9MV3hwYzNRdFluVjBkRzl1WENKY2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVOVhDSnNhVzVyWENKY2JpQWdJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczlleWdwSUQwK0lHUmxkR1ZqZEU1bGQxUnZhMlZ1Y3lncGZWeHVJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lIdDBLQ2R5WldaeVpYTm9UR2x6ZENjcGZWeHVJQ0FnSUNBZ0lDQWdJRHd2UW5WMGRHOXVQbHh1SUNBZ0lDQWdJQ0FnSUh0MEtDZHZjaWNwZlZ4dUlDQWdJQ0FnSUNBOEx6NWNiaUFnSUNBZ0lDbDlYRzRnSUNBZ0lDQThRblYwZEc5dVhHNGdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbWx0Y0c5eWRDMTBiMnRsYmkxc2FXNXJYMTlzYVc1clhDSmNiaUFnSUNBZ0lDQWdaR0YwWVMxMFpYTjBhV1E5WENKcGJYQnZjblF0ZEc5clpXNHRZblYwZEc5dVhDSmNiaUFnSUNBZ0lDQWdkSGx3WlQxY0lteHBibXRjSWx4dUlDQWdJQ0FnSUNCdmJrTnNhV05yUFhzb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2FHbHpkRzl5ZVM1d2RYTm9LRWxOVUU5U1ZGOVVUMHRGVGw5U1QxVlVSU2s3WEc0Z0lDQWdJQ0FnSUNBZ2RISmhZMnRGZG1WdWRDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkRG9nVFdWMFlVMWxkSEpwWTNORmRtVnVkRTVoYldVdVZHOXJaVzVKYlhCdmNuUkNkWFIwYjI1RGJHbGphMlZrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMkYwWldkdmNuazZJRTFsZEdGTlpYUnlhV056UlhabGJuUkRZWFJsWjI5eWVTNU9ZWFpwWjJGMGFXOXVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnNiMk5oZEdsdmJqb2dKMGh2YldVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ2UybHpWRzlyWlc1RVpYUmxZM1JwYjI1QmRtRnBiR0ZpYkdWY2JpQWdJQ0FnSUNBZ0lDQS9JSFFvSjJsdGNHOXlkRlJ2YTJWdWN5Y3BYRzRnSUNBZ0lDQWdJQ0FnT2lCMEtDZHBiWEJ2Y25SVWIydGxibk1uS1M1amFHRnlRWFFvTUNrdWRHOVZjSEJsY2tOaGMyVW9LU0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBLQ2RwYlhCdmNuUlViMnRsYm5NbktTNXpiR2xqWlNneEtYMWNiaUFnSUNBZ0lEd3ZRblYwZEc5dVBseHVJQ0FnSUR3dlFtOTRQbHh1SUNBcE8xeHVmVnh1SWl3aVpYaHdiM0owSUhzZ1pHVm1ZWFZzZENCOUlHWnliMjBnSnk0dmFXMXdiM0owTFhSdmEyVnVMV3hwYm1zdVkyOXRjRzl1Wlc1MEp6dGNiaUlzSW1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnZlNCbWNtOXRJQ2N1TDJ4bFpHZGxjaTFwYm5OMGNuVmpkR2x2YmkxbWFXVnNaQ2M3WEc0aUxDSnBiWEJ2Y25RZ1VtVmhZM1FzSUhzZ2RYTmxSV1ptWldOMElIMGdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUhzZ2RYTmxSR2x6Y0dGMFkyZ3NJSFZ6WlZObGJHVmpkRzl5SUgwZ1puSnZiU0FuY21WaFkzUXRjbVZrZFhnbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQjdYRzRnSUV4bFpHZGxjbFJ5WVc1emNHOXlkRlI1Y0dWekxGeHVJQ0JYWldKSVNVUkRiMjV1WldOMFpXUlRkR0YwZFhObGN5eGNiaUFnU0dGeVpIZGhjbVZVY21GdWMzQnZjblJUZEdGMFpYTXNYRzRnSUV4RlJFZEZVbDlWVTBKZlZrVk9SRTlTWDBsRUxGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMMmhoY21SM1lYSmxMWGRoYkd4bGRITW5PMXh1YVcxd2IzSjBJSHRjYmlBZ1VFeEJWRVpQVWsxZlJrbFNSVVpQV0N4Y2JpQWdSVTVXU1ZKUFRrMUZUbFJmVkZsUVJWOUdWVXhNVTBOU1JVVk9MRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2WTI5dWMzUmhiblJ6TDJGd2NDYzdYRzVjYm1sdGNHOXlkQ0I3WEc0Z0lITmxkRXhsWkdkbGNsZGxZa2hwWkVOdmJtNWxZM1JsWkZOMFlYUjFjeXhjYmlBZ1oyVjBUR1ZrWjJWeVYyVmlTR2xrUTI5dWJtVmpkR1ZrVTNSaGRIVnpMRnh1SUNCelpYUk1aV1JuWlhKVWNtRnVjM0J2Y25SVGRHRjBkWE1zWEc0Z0lHZGxkRXhsWkdkbGNsUnlZVzV6Y0c5eWRGTjBZWFIxY3l4Y2JuMGdabkp2YlNBbkxpNHZMaTR2TGk0dlpIVmphM012WVhCd0wyRndjQ2M3WEc1Y2JtbHRjRzl5ZENCN0lFSmhibTVsY2tGc1pYSjBMQ0JDZFhSMGIyNU1hVzVyTENCVVpYaDBJSDBnWm5KdmJTQW5MaTR2TGk0dlkyOXRjRzl1Wlc1MExXeHBZbkpoY25rbk8xeHVhVzF3YjNKMElIc2dkWE5sU1RFNGJrTnZiblJsZUhRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5b2IyOXJjeTkxYzJWSk1UaHVRMjl1ZEdWNGRDYzdYRzVwYlhCdmNuUWdlMXh1SUNCVFJWWkZVa2xVU1VWVExGeHVJQ0JVUlZoVVgwRk1TVWRPTEZ4dUlDQlVaWGgwUTI5c2IzSXNYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZZMjl1YzNSaGJuUnpMMlJsYzJsbmJpMXplWE4wWlcwbk8xeHVhVzF3YjNKMElIdGNiaUFnWjJWMFVHeGhkR1p2Y20wc1hHNGdJR2RsZEVWdWRtbHliMjV0Wlc1MFZIbHdaU3hjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dllYQndMM05qY21sd2RITXZiR2xpTDNWMGFXd25PMXh1YVcxd2IzSjBJSHNnWjJWMFRHVmtaMlZ5VkhKaGJuTndiM0owVkhsd1pTQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyUjFZMnR6TDIxbGRHRnRZWE5yTDIxbGRHRnRZWE5ySnp0Y2JtbHRjRzl5ZENCN0lHRjBkR1Z0Y0hSTVpXUm5aWEpVY21GdWMzQnZjblJEY21WaGRHbHZiaUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMM04wYjNKbEwyRmpkR2x2Ym5Nbk8xeHVYRzVqYjI1emRDQnlaVzVrWlhKSmJuTjBjblZqZEdsdmJsTjBaWEFnUFNBb1hHNGdJSFJsZUhRc1hHNGdJSE5vYjNjZ1BTQjBjblZsTEZ4dUlDQmpiMnh2Y2lBOUlGUmxlSFJEYjJ4dmNpNTBaWGgwUkdWbVlYVnNkQ3hjYmlrZ1BUNGdlMXh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJSE5vYjNjZ0ppWWdLRnh1SUNBZ0lDQWdQRlJsZUhRZ1kyOXNiM0k5ZTJOdmJHOXlmU0JoY3oxY0ltZzJYQ0krWEc0Z0lDQWdJQ0FnSUh0MFpYaDBmVnh1SUNBZ0lDQWdQQzlVWlhoMFBseHVJQ0FnSUNsY2JpQWdLVHRjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlFeGxaR2RsY2tsdWMzUnlkV04wYVc5dVJtbGxiR1FvZXlCemFHOTNSR0YwWVVsdWMzUnlkV04wYVc5dUlIMHBJSHRjYmlBZ1kyOXVjM1FnZENBOUlIVnpaVWt4T0c1RGIyNTBaWGgwS0NrN1hHNGdJR052Ym5OMElHUnBjM0JoZEdOb0lEMGdkWE5sUkdsemNHRjBZMmdvS1R0Y2JseHVJQ0JqYjI1emRDQjNaV0pJYVdSRGIyNXVaV04wWldSVGRHRjBkWE1nUFNCMWMyVlRaV3hsWTNSdmNpaG5aWFJNWldSblpYSlhaV0pJYVdSRGIyNXVaV04wWldSVGRHRjBkWE1wTzF4dUlDQmpiMjV6ZENCc1pXUm5aWEpVY21GdWMzQnZjblJVZVhCbElEMGdkWE5sVTJWc1pXTjBiM0lvWjJWMFRHVmtaMlZ5VkhKaGJuTndiM0owVkhsd1pTazdYRzRnSUdOdmJuTjBJSFJ5WVc1emNHOXlkRk4wWVhSMWN5QTlJSFZ6WlZObGJHVmpkRzl5S0dkbGRFeGxaR2RsY2xSeVlXNXpjRzl5ZEZOMFlYUjFjeWs3WEc0Z0lHTnZibk4wSUdWdWRtbHliMjV0Wlc1MFZIbHdaU0E5SUdkbGRFVnVkbWx5YjI1dFpXNTBWSGx3WlNncE8xeHVJQ0JqYjI1emRDQmxiblpwY205dWJXVnVkRlI1Y0dWSmMwWjFiR3hUWTNKbFpXNGdQVnh1SUNBZ0lHVnVkbWx5YjI1dFpXNTBWSGx3WlNBOVBUMGdSVTVXU1ZKUFRrMUZUbFJmVkZsUVJWOUdWVXhNVTBOU1JVVk9PMXh1WEc0Z0lIVnpaVVZtWm1WamRDZ29LU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdhVzVwZEdsaGJFTnZibTVsWTNSbFpFUmxkbWxqWlVOb1pXTnJJRDBnWVhONWJtTWdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdJQ0JzWldSblpYSlVjbUZ1YzNCdmNuUlVlWEJsSUQwOVBTQk1aV1JuWlhKVWNtRnVjM0J2Y25SVWVYQmxjeTUzWldKb2FXUWdKaVpjYmlBZ0lDQWdJQ0FnZDJWaVNHbGtRMjl1Ym1WamRHVmtVM1JoZEhWeklDRTlQU0JYWldKSVNVUkRiMjV1WldOMFpXUlRkR0YwZFhObGN5NWpiMjV1WldOMFpXUmNiaUFnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmtaWFpwWTJWeklEMGdZWGRoYVhRZ2QybHVaRzkzTG01aGRtbG5ZWFJ2Y2o4dWFHbGtQeTVuWlhSRVpYWnBZMlZ6S0NrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhkbFlraHBaRWx6UTI5dWJtVmpkR1ZrSUQwZ1pHVjJhV05sY3o4dWMyOXRaU2hjYmlBZ0lDQWdJQ0FnSUNBb1pHVjJhV05sS1NBOVBpQmtaWFpwWTJVdWRtVnVaRzl5U1dRZ1BUMDlJRTUxYldKbGNpaE1SVVJIUlZKZlZWTkNYMVpGVGtSUFVsOUpSQ2tzWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lHUnBjM0JoZEdOb0tGeHVJQ0FnSUNBZ0lDQWdJSE5sZEV4bFpHZGxjbGRsWWtocFpFTnZibTVsWTNSbFpGTjBZWFIxY3loY2JpQWdJQ0FnSUNBZ0lDQWdJSGRsWWtocFpFbHpRMjl1Ym1WamRHVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEOGdWMlZpU0VsRVEyOXVibVZqZEdWa1UzUmhkSFZ6WlhNdVkyOXVibVZqZEdWa1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ1YyVmlTRWxFUTI5dWJtVmpkR1ZrVTNSaGRIVnpaWE11Ym05MFEyOXVibVZqZEdWa0xGeHVJQ0FnSUNBZ0lDQWdJQ2tzWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JpQWdJQ0JqYjI1emRDQmtaWFJsY20xcGJtVlVjbUZ1YzNCdmNuUlRkR0YwZFhNZ1BTQmhjM2x1WXlBb0tTQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lHeGxaR2RsY2xSeVlXNXpjRzl5ZEZSNWNHVWdQVDA5SUV4bFpHZGxjbFJ5WVc1emNHOXlkRlI1Y0dWekxuZGxZbWhwWkNBbUpseHVJQ0FnSUNBZ0lDQjNaV0pJYVdSRGIyNXVaV04wWldSVGRHRjBkWE1nUFQwOUlGZGxZa2hKUkVOdmJtNWxZM1JsWkZOMFlYUjFjMlZ6TG1OdmJtNWxZM1JsWkNBbUpseHVJQ0FnSUNBZ0lDQjBjbUZ1YzNCdmNuUlRkR0YwZFhNZ1BUMDlJRWhoY21SM1lYSmxWSEpoYm5Od2IzSjBVM1JoZEdWekxtNXZibVZjYmlBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFJ5WVc1emNHOXlkR1ZrUTNKbFlYUmxaQ0E5SUdGM1lXbDBJR0YwZEdWdGNIUk1aV1JuWlhKVWNtRnVjM0J2Y25SRGNtVmhkR2x2YmlncE8xeHVJQ0FnSUNBZ0lDQWdJR1JwYzNCaGRHTm9LRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBUR1ZrWjJWeVZISmhibk53YjNKMFUzUmhkSFZ6S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMzQnZjblJsWkVOeVpXRjBaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUVoaGNtUjNZWEpsVkhKaGJuTndiM0owVTNSaGRHVnpMblpsY21sbWFXVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJJWVhKa2QyRnlaVlJ5WVc1emNHOXlkRk4wWVhSbGN5NTFibXR1YjNkdVJtRnBiSFZ5WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hsTG0xbGMzTmhaMlV1YldGMFkyZ29KMFpoYVd4bFpDQjBieUJ2Y0dWdUlIUm9aU0JrWlhacFkyVW5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaR2x6Y0dGMFkyZ29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkRXhsWkdkbGNsUnlZVzV6Y0c5eWRGTjBZWFIxY3loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCSVlYSmtkMkZ5WlZSeVlXNXpjRzl5ZEZOMFlYUmxjeTVrWlhacFkyVlBjR1Z1Um1GcGJIVnlaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNobExtMWxjM05oWjJVdWJXRjBZMmdvSjNSb1pTQmtaWFpwWTJVZ2FYTWdZV3h5WldGa2VTQnZjR1Z1SnlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdScGMzQmhkR05vS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSTVpXUm5aWEpVY21GdWMzQnZjblJUZEdGMGRYTW9TR0Z5WkhkaGNtVlVjbUZ1YzNCdmNuUlRkR0YwWlhNdWRtVnlhV1pwWldRcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdsemNHRjBZMmdvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEV4bFpHZGxjbFJ5WVc1emNHOXlkRk4wWVhSMWN5aElZWEprZDJGeVpWUnlZVzV6Y0c5eWRGTjBZWFJsY3k1MWJtdHViM2R1Um1GcGJIVnlaU2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNGdJQ0FnWkdWMFpYSnRhVzVsVkhKaGJuTndiM0owVTNSaGRIVnpLQ2s3WEc0Z0lDQWdhVzVwZEdsaGJFTnZibTVsWTNSbFpFUmxkbWxqWlVOb1pXTnJLQ2s3WEc0Z0lIMHNJRnRrYVhOd1lYUmphQ3dnYkdWa1oyVnlWSEpoYm5Od2IzSjBWSGx3WlN3Z2QyVmlTR2xrUTI5dWJtVmpkR1ZrVTNSaGRIVnpMQ0IwY21GdWMzQnZjblJUZEdGMGRYTmRLVHRjYmx4dUlDQjFjMlZGWm1abFkzUW9LQ2tnUFQ0Z2UxeHVJQ0FnSUhKbGRIVnliaUFvS1NBOVBpQjdYRzRnSUNBZ0lDQmthWE53WVhSamFDaHpaWFJNWldSblpYSlVjbUZ1YzNCdmNuUlRkR0YwZFhNb1NHRnlaSGRoY21WVWNtRnVjM0J2Y25SVGRHRjBaWE11Ym05dVpTa3BPMXh1SUNBZ0lIMDdYRzRnSUgwc0lGdGthWE53WVhSamFGMHBPMXh1WEc0Z0lHTnZibk4wSUhWemFXNW5UR1ZrWjJWeVRHbDJaU0E5SUd4bFpHZGxjbFJ5WVc1emNHOXlkRlI1Y0dVZ1BUMDlJRXhsWkdkbGNsUnlZVzV6Y0c5eWRGUjVjR1Z6TG14cGRtVTdYRzRnSUdOdmJuTjBJSFZ6YVc1blYyVmlTRWxFSUQwZ2JHVmtaMlZ5VkhKaGJuTndiM0owVkhsd1pTQTlQVDBnVEdWa1oyVnlWSEpoYm5Od2IzSjBWSGx3WlhNdWQyVmlhR2xrTzF4dVhHNGdJR052Ym5OMElHbHpSbWx5WldadmVDQTlJR2RsZEZCc1lYUm1iM0p0S0NrZ1BUMDlJRkJNUVZSR1QxSk5YMFpKVWtWR1QxZzdYRzVjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0E4WkdsMlBseHVJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKamIyNW1hWEp0TFdSbGRHRnBiQzF5YjNkY0lqNWNiaUFnSUNBZ0lDQWdQRUpoYm01bGNrRnNaWEowSUhObGRtVnlhWFI1UFh0VFJWWkZVa2xVU1VWVExrbE9Sazk5UGx4dUlDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWJHVmtaMlZ5TFd4cGRtVXRaR2xoYkc5blhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNCN2NtVnVaR1Z5U1c1emRISjFZM1JwYjI1VGRHVndLSFFvSjJ4bFpHZGxja052Ym01bFkzUnBiMjVKYm5OMGNuVmpkR2x2YmtobFlXUmxjaWNwS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJSHR5Wlc1a1pYSkpibk4wY25WamRHbHZibE4wWlhBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdEaWdLSWdKSHQwS0Nkc1pXUm5aWEpEYjI1dVpXTjBhVzl1U1c1emRISjFZM1JwYjI1VGRHVndUMjVsSnlsOVlDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lXbHpSbWx5WldadmVDQW1KaUIxYzJsdVoweGxaR2RsY2t4cGRtVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZTNKbGJtUmxja2x1YzNSeWRXTjBhVzl1VTNSbGNDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1lPS0FvaUFrZTNRb0oyeGxaR2RsY2tOdmJtNWxZM1JwYjI1SmJuTjBjblZqZEdsdmJsTjBaWEJVZDI4bktYMWdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWhhWE5HYVhKbFptOTRJQ1ltSUhWemFXNW5UR1ZrWjJWeVRHbDJaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQWdJQ0FnSUNCN2NtVnVaR1Z5U1c1emRISjFZM1JwYjI1VGRHVndLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmc0b0NpSUNSN2RDZ25iR1ZrWjJWeVEyOXVibVZqZEdsdmJrbHVjM1J5ZFdOMGFXOXVVM1JsY0ZSb2NtVmxKeWw5WUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjdjbVZ1WkdWeVNXNXpkSEoxWTNScGIyNVRkR1Z3S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JnNG9DaUlDUjdkQ2duYkdWa1oyVnlRMjl1Ym1WamRHbHZia2x1YzNSeWRXTjBhVzl1VTNSbGNFWnZkWEluS1gxZ0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHOTNSR0YwWVVsdWMzUnlkV04wYVc5dUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJSHR5Wlc1a1pYSkpibk4wY25WamRHbHZibE4wWlhBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR4emNHRnVQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhDZFhSMGIyNU1hVzVyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBRV3hwWjI0OWUxUkZXRlJmUVV4SlIwNHVURVZHVkgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWUyRnplVzVqSUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Z1ZG1seWIyNXRaVzUwVkhsd1pVbHpSblZzYkZOamNtVmxiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRwYm1SdmR5NXNiMk5oZEdsdmJpNXlaV3h2WVdRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5iRzlpWVd3dWNHeGhkR1p2Y20wdWIzQmxia1Y0ZEdWdWMybHZia2x1UW5KdmQzTmxjaWh1ZFd4c0xDQnVkV3hzTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2RDZ25iR1ZrWjJWeVEyOXVibVZqZEdsdmJrbHVjM1J5ZFdOMGFXOXVRMnh2YzJWUGRHaGxja0Z3Y0hNbktYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMEoxZEhSdmJreHBibXMrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHd2YzNCaGJqNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6Y0c5eWRGTjBZWFIxY3lBOVBUMGdTR0Z5WkhkaGNtVlVjbUZ1YzNCdmNuUlRkR0YwWlhNdVpHVjJhV05sVDNCbGJrWmhhV3gxY21Vc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdlM0psYm1SbGNrbHVjM1J5ZFdOMGFXOXVVM1JsY0NoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOd1lXNCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRUoxZEhSdmJreHBibXRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGVIUkJiR2xuYmoxN1ZFVllWRjlCVEVsSFRpNU1SVVpVZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN1lYTjVibU1nS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aVzUyYVhKdmJtMWxiblJVZVhCbFNYTkdkV3hzVTJOeVpXVnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1kyOXVibVZqZEdWa1JHVjJhV05sY3lBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGQyRnBkQ0IzYVc1a2IzY3VibUYyYVdkaGRHOXlMbWhwWkM1eVpYRjFaWE4wUkdWMmFXTmxLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1sc2RHVnljem9nVzNzZ2RtVnVaRzl5U1dRNklFeEZSRWRGVWw5VlUwSmZWa1ZPUkU5U1gwbEVJSDFkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkMlZpU0dsa1NYTkRiMjV1WldOMFpXUWdQU0JqYjI1dVpXTjBaV1JFWlhacFkyVnpMbk52YldVb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1pHVjJhV05sS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaWFpwWTJVdWRtVnVaRzl5U1dRZ1BUMDlJRTUxYldKbGNpaE1SVVJIUlZKZlZWTkNYMVpGVGtSUFVsOUpSQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWE53WVhSamFDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkRXhsWkdkbGNsZGxZa2hwWkVOdmJtNWxZM1JsWkZOMFlYUjFjeWg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkbFlraHBaRU52Ym01bFkzUmxaRk4wWVhSMWN6b2dkMlZpU0dsa1NYTkRiMjV1WldOMFpXUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUZkbFlraEpSRU52Ym01bFkzUmxaRk4wWVhSMWMyVnpMbU52Ym01bFkzUmxaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ1YyVmlTRWxFUTI5dWJtVmpkR1ZrVTNSaGRIVnpaWE11Ym05MFEyOXVibVZqZEdWa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5iRzlpWVd3dWNHeGhkR1p2Y20wdWIzQmxia1Y0ZEdWdWMybHZia2x1UW5KdmQzTmxjaWh1ZFd4c0xDQnVkV3hzTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN1pXNTJhWEp2Ym0xbGJuUlVlWEJsU1hOR2RXeHNVMk55WldWdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDhnZENnblkyeHBZMnRVYjBOdmJtNWxZM1JNWldSblpYSldhV0ZYWldKSVNVUW5LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklIUW9KMjl3Wlc1R2RXeHNVMk55WldWdVJtOXlUR1ZrWjJWeVYyVmlTR2xrSnlsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOUNkWFIwYjI1TWFXNXJQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThMM053WVc0K0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMybHVaMWRsWWtoSlJDQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRsWWtocFpFTnZibTVsWTNSbFpGTjBZWFIxY3lBOVBUMGdWMlZpU0VsRVEyOXVibVZqZEdWa1UzUmhkSFZ6WlhNdWJtOTBRMjl1Ym1WamRHVmtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQlVaWGgwUTI5c2IzSXVWMEZTVGtsT1IxOUVSVVpCVlV4VUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ1BDOUNZVzV1WlhKQmJHVnlkRDVjYmlBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUR3dlpHbDJQbHh1SUNBcE8xeHVmVnh1WEc1TVpXUm5aWEpKYm5OMGNuVmpkR2x2YmtacFpXeGtMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdMeThnZDJobGRHaGxjaUJ2Y2lCdWIzUWdkRzhnYzJodmR5QjBhR1VnWkdGMFlTQnBibk4wY25WamRHbHZibHh1SUNCemFHOTNSR0YwWVVsdWMzUnlkV04wYVc5dU9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JuMDdYRzRpTENKbGVIQnZjblFnZXlCa1pXWmhkV3gwSUgwZ1puSnZiU0FuTGk5c2IyRmthVzVuTFc1bGRIZHZjbXN0YzJOeVpXVnVMbU52Ym5SaGFXNWxjaWM3WEc0aUxDSnBiWEJ2Y25RZ1VtVmhZM1FzSUhzZ1VIVnlaVU52YlhCdmJtVnVkQ0I5SUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdURzloWkdsdVoxTmpjbVZsYmlCbWNtOXRJQ2N1TGk4dUxpOTFhUzlzYjJGa2FXNW5MWE5qY21WbGJpYzdYRzVwYlhCdmNuUWdleUJUUlVOUFRrUWdmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMM1JwYldVbk8xeHVhVzF3YjNKMElIc2dUa1ZVVjA5U1MxOVVXVkJGVXlCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmJtVjBkMjl5YXljN1hHNXBiWEJ2Y25RZ1VHOXdiM1psY2lCbWNtOXRJQ2N1TGk4dUxpOTFhUzl3YjNCdmRtVnlMM0J2Y0c5MlpYSXVZMjl0Y0c5dVpXNTBKenRjYm1sdGNHOXlkQ0I3WEc0Z0lFSjFkSFJ2YmxCeWFXMWhjbmtzWEc0Z0lFSjFkSFJ2YmxObFkyOXVaR0Z5ZVN4Y2JpQWdTV052Yml4Y2JpQWdTV052Yms1aGJXVXNYRzRnSUVsamIyNVRhWHBsTEZ4dUlDQlVaWGgwTEZ4dWZTQm1jbTl0SUNjdUxpOHVMaTlqYjIxd2IyNWxiblF0YkdsaWNtRnllU2M3WEc1cGJYQnZjblFnZTF4dUlDQkVTVk5RVEVGWkxGeHVJQ0JKWTI5dVEyOXNiM0lzWEc0Z0lGUmxlSFJCYkdsbmJpeGNiaUFnVkdWNGRGWmhjbWxoYm5Rc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyaGxiSEJsY25NdlkyOXVjM1JoYm5SekwyUmxjMmxuYmkxemVYTjBaVzBuTzF4dWFXMXdiM0owSUVKdmVDQm1jbTl0SUNjdUxpOHVMaTkxYVM5aWIzZ3ZZbTk0Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nVEc5aFpHbHVaMDVsZEhkdmNtdFRZM0psWlc0Z1pYaDBaVzVrY3lCUWRYSmxRMjl0Y0c5dVpXNTBJSHRjYmlBZ2MzUmhkR1VnUFNCN1hHNGdJQ0FnYzJodmQwVnljbTl5VTJOeVpXVnVPaUJtWVd4elpTeGNiaUFnZlR0Y2JseHVJQ0J6ZEdGMGFXTWdZMjl1ZEdWNGRGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUhRNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQjlPMXh1WEc0Z0lITjBZWFJwWXlCd2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUNBZ2JHOWhaR2x1WjAxbGMzTmhaMlU2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdZMkZ1WTJWc1ZHbHRaVG9nVUhKdmNGUjVjR1Z6TG01MWJXSmxjaXhjYmlBZ0lDQndjbTkyYVdSbGNrTnZibVpwWnpvZ1VISnZjRlI1Y0dWekxtOWlhbVZqZEN4Y2JpQWdJQ0J3Y205MmFXUmxja2xrT2lCUWNtOXdWSGx3WlhNdWIyNWxUMlpVZVhCbEtGdFFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxDQlFjbTl3Vkhsd1pYTXViblZ0WW1WeVhTa3NYRzRnSUNBZ2MyaHZkMDVsZEhkdmNtdEVjbTl3Wkc5M2Jqb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnYzJWMFVISnZkbWxrWlhKQmNtZHpPaUJRY205d1ZIbHdaWE11WVhKeVlYa3NYRzRnSUNBZ2MyVjBVSEp2ZG1sa1pYSlVlWEJsT2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQnliMnhzWW1GamExUnZVSEpsZG1sdmRYTlFjbTkyYVdSbGNqb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnYVhOT1pYUjNiM0pyVEc5aFpHbHVaem9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2MyaHZkMFJsY0hKbFkyRjBaV1JTY0dOVmNteFhZWEp1YVc1bk9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdmVHRjYmx4dUlDQmpiMjF3YjI1bGJuUkVhV1JOYjNWdWRDQTlJQ2dwSUQwK0lIdGNiaUFnSUNCMGFHbHpMbU5oYm1ObGJFTmhiR3hVYVcxbGIzVjBJRDBnYzJWMFZHbHRaVzkxZENoY2JpQWdJQ0FnSUhSb2FYTXVZMkZ1WTJWc1EyRnNiQ3hjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11WTJGdVkyVnNWR2x0WlNCOGZDQlRSVU5QVGtRZ0tpQXhOU3hjYmlBZ0lDQXBPMXh1SUNCOU8xeHVYRzRnSUdkbGRFTnZibTVsWTNScGJtZE1ZV0psYkNBOUlHWjFibU4wYVc5dUlDaHNiMkZrYVc1blRXVnpjMkZuWlNrZ2UxeHVJQ0FnSUdsbUlDaHNiMkZrYVc1blRXVnpjMkZuWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUd4dllXUnBibWROWlhOellXZGxPMXh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0I3SUhCeWIzWnBaR1Z5UTI5dVptbG5MQ0J3Y205MmFXUmxja2xrSUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHTnZibk4wSUhCeWIzWnBaR1Z5VG1GdFpTQTlJSEJ5YjNacFpHVnlRMjl1Wm1sbkxuUjVjR1U3WEc0Z0lDQWdZMjl1YzNRZ2V5QjBJSDBnUFNCMGFHbHpMbU52Ym5SbGVIUTdYRzVjYmlBZ0lDQnpkMmwwWTJnZ0tIQnliM1pwWkdWeVRtRnRaU2tnZTF4dUlDQWdJQ0FnWTJGelpTQk9SVlJYVDFKTFgxUlpVRVZUTGsxQlNVNU9SVlE2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwS0NkamIyNXVaV04wYVc1blZHOU5ZV2x1Ym1WMEp5azdYRzRnSUNBZ0lDQmpZWE5sSUU1RlZGZFBVa3RmVkZsUVJWTXVSMDlGVWt4Sk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RDZ25ZMjl1Ym1WamRHbHVaMVJ2UjI5bGNteHBKeWs3WEc0Z0lDQWdJQ0JqWVhObElFNUZWRmRQVWt0ZlZGbFFSVk11VTBWUVQweEpRVHBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFFvSjJOdmJtNWxZM1JwYm1kVWIxTmxjRzlzYVdFbktUdGNiaUFnSUNBZ0lHTmhjMlVnVGtWVVYwOVNTMTlVV1ZCRlV5NU1TVTVGUVY5VVJWTlVUa1ZVT2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZENnblkyOXVibVZqZEdsdVoxUnZUR2x1WldGVVpYTjBibVYwSnlrN1hHNGdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZENnblkyOXVibVZqZEdsdVoxUnZKeXdnVzNCeWIzWnBaR1Z5U1dSZEtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdjbVZ1WkdWeVEyOXVibVZqZEdsdmJrWmhhV3gxY21WT2IzUnBabWxqWVhScGIyNGdQU0FvYldWemMyRm5aU3dnYzJodmQxUnllVUZuWVdsdUlEMGdabUZzYzJVcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lITm9iM2RPWlhSM2IzSnJSSEp2Y0dSdmQyNHNJSE5sZEZCeWIzWnBaR1Z5UVhKbmN5d2djMlYwVUhKdmRtbGtaWEpVZVhCbElIMGdQVnh1SUNBZ0lDQWdkR2hwY3k1d2NtOXdjenRjYmx4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThVRzl3YjNabGNseHVJQ0FnSUNBZ0lDQnZia05zYjNObFBYc29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdkMmx1Wkc5M0xtTnNaV0Z5VkdsdFpXOTFkQ2gwYUdsekxtTmhibU5sYkVOaGJHeFVhVzFsYjNWMEtUdGNiaUFnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnWTJWdWRHVnlWR2wwYkdWY2JpQWdJQ0FnSUNBZ2RHbDBiR1U5ZTF4dUlDQWdJQ0FnSUNBZ0lEeEpZMjl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVZVzFsUFh0SlkyOXVUbUZ0WlM1RVlXNW5aWEo5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnphWHBsUFh0SlkyOXVVMmw2WlM1WWJIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlQWHRKWTI5dVEyOXNiM0l1ZDJGeWJtbHVaMFJsWm1GMWJIUjlYRzRnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQThWR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lIWmhjbWxoYm5ROWUxUmxlSFJXWVhKcFlXNTBMbUp2WkhsTVowMWxaR2wxYlgxY2JpQWdJQ0FnSUNBZ0lDQjBaWGgwUVd4cFoyNDllMVJsZUhSQmJHbG5iaTVEWlc1MFpYSjlYRzRnSUNBZ0lDQWdJQ0FnYldGeVoybHVQWHRiTUN3Z05Dd2dOQ3dnTkYxOVhHNGdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0I3YldWemMyRm5aWDFjYmlBZ0lDQWdJQ0FnUEM5VVpYaDBQbHh1SUNBZ0lDQWdJQ0E4UW05NElHUnBjM0JzWVhrOWUwUkpVMUJNUVZrdVJreEZXSDBnY0dGa1pHbHVaejE3TkgwZ1oyRndQWHN5ZlQ1Y2JpQWdJQ0FnSUNBZ0lDQThRblYwZEc5dVUyVmpiMjVrWVhKNVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmtOc2FXTnJQWHNvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1amJHVmhjbFJwYldWdmRYUW9kR2hwY3k1allXNWpaV3hEWVd4c1ZHbHRaVzkxZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOb2IzZE9aWFIzYjNKclJISnZjR1J2ZDI0b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhKcFlXNTBQWHRVWlhoMFZtRnlhV0Z1ZEM1aWIyUjVVMjE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmliRzlqYTF4dUlDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUh0MGFHbHpMbU52Ym5SbGVIUXVkQ2duYzNkcGRHTm9UbVYwZDI5eWEzTW5LWDFjYmlBZ0lDQWdJQ0FnSUNBOEwwSjFkSFJ2YmxObFkyOXVaR0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ0lDQjdjMmh2ZDFSeWVVRm5ZV2x1SUQ4Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnUEVKMWRIUnZibEJ5YVcxaGNubGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwVTNSaGRHVW9leUJ6YUc5M1JYSnliM0pUWTNKbFpXNDZJR1poYkhObElIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEZCeWIzWnBaR1Z5Vkhsd1pTZ3VMaTV6WlhSUWNtOTJhV1JsY2tGeVozTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRwYm1SdmR5NWpiR1ZoY2xScGJXVnZkWFFvZEdocGN5NWpZVzVqWld4RFlXeHNWR2x0Wlc5MWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1allXNWpaV3hEWVd4c1ZHbHRaVzkxZENBOUlITmxkRlJwYldWdmRYUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTmhibU5sYkVOaGJHd3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG1OaGJtTmxiRlJwYldVZ2ZId2dVMFZEVDA1RUlDb2dNVFVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeWFXRnVkRDE3VkdWNGRGWmhjbWxoYm5RdVltOWtlVk50ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JpYkc5amExeHVJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZEdocGN5NWpiMjUwWlhoMExuUW9KM1J5ZVVGbllXbHVKeWw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMEoxZEhSdmJsQnlhVzFoY25rK1hHNGdJQ0FnSUNBZ0lDQWdLU0E2SUc1MWJHeDlYRzRnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ1BDOVFiM0J2ZG1WeVBseHVJQ0FnSUNrN1hHNGdJSDA3WEc1Y2JpQWdjbVZ1WkdWeVJHVndjbVZqWVhSbFpGSndZMVZ5YkZkaGNtNXBibWNnUFNBb0tTQTlQaUI3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WdVpHVnlRMjl1Ym1WamRHbHZia1poYVd4MWNtVk9iM1JwWm1sallYUnBiMjRvWEc0Z0lDQWdJQ0IwYUdsekxtTnZiblJsZUhRdWRDZ25ZM1Z5Y21WdWRGSndZMVZ5YkVSbGNISmxZMkYwWldRbktTeGNiaUFnSUNBZ0lHWmhiSE5sTEZ4dUlDQWdJQ2s3WEc0Z0lIMDdYRzVjYmlBZ2NtVnVaR1Z5UlhKeWIzSlRZM0psWlc1RGIyNTBaVzUwSUQwZ0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2djSEp2ZG1sa1pYSkRiMjVtYVdjZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WdVpHVnlRMjl1Ym1WamRHbHZia1poYVd4MWNtVk9iM1JwWm1sallYUnBiMjRvWEc0Z0lDQWdJQ0IwYUdsekxtTnZiblJsZUhRdWRDZ25ibVYwZDI5eWExTjNhWFJqYUVOdmJtNWxZM1JwYjI1RmNuSnZjaWNzSUZ0d2NtOTJhV1JsY2tOdmJtWnBaeTV1YVdOcmJtRnRaVjBwTEZ4dUlDQWdJQ0FnZEhKMVpTeGNiaUFnSUNBcE8xeHVJQ0I5TzF4dVhHNGdJR05oYm1ObGJFTmhiR3dnUFNBb0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2V5QnBjMDVsZEhkdmNtdE1iMkZrYVc1bklIMGdQU0IwYUdsekxuQnliM0J6TzF4dVhHNGdJQ0FnYVdZZ0tHbHpUbVYwZDI5eWEweHZZV1JwYm1jcElIdGNiaUFnSUNBZ0lIUm9hWE11YzJWMFUzUmhkR1VvZXlCemFHOTNSWEp5YjNKVFkzSmxaVzQ2SUhSeWRXVWdmU2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUdOdmJYQnZibVZ1ZEVScFpGVndaR0YwWlNBOUlDaHdjbVYyVUhKdmNITXBJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQjdJSEJ5YjNacFpHVnlRMjl1Wm1sbklIMGdQU0IwYUdsekxuQnliM0J6TzF4dUlDQWdJR052Ym5OMElIc2djSEp2ZG1sa1pYSkRiMjVtYVdjNklIQnlaWFpRY205MmFXUmxjaUI5SUQwZ2NISmxkbEJ5YjNCek8xeHVJQ0FnSUdsbUlDaHdjbTkyYVdSbGNrTnZibVpwWnk1MGVYQmxJQ0U5UFNCd2NtVjJVSEp2ZG1sa1pYSXVkSGx3WlNrZ2UxeHVJQ0FnSUNBZ2QybHVaRzkzTG1Oc1pXRnlWR2x0Wlc5MWRDaDBhR2x6TG1OaGJtTmxiRU5oYkd4VWFXMWxiM1YwS1R0Y2JpQWdJQ0FnSUhSb2FYTXVjMlYwVTNSaGRHVW9leUJ6YUc5M1JYSnliM0pUWTNKbFpXNDZJR1poYkhObElIMHBPMXh1SUNBZ0lDQWdkR2hwY3k1allXNWpaV3hEWVd4c1ZHbHRaVzkxZENBOUlITmxkRlJwYldWdmRYUW9YRzRnSUNBZ0lDQWdJSFJvYVhNdVkyRnVZMlZzUTJGc2JDeGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTVqWVc1alpXeFVhVzFsSUh4OElGTkZRMDlPUkNBcUlERTFMRnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnWTI5dGNHOXVaVzUwVjJsc2JGVnViVzkxYm5RZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnZDJsdVpHOTNMbU5zWldGeVZHbHRaVzkxZENoMGFHbHpMbU5oYm1ObGJFTmhiR3hVYVcxbGIzVjBLVHRjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWElvS1NCN1hHNGdJQ0FnWTI5dWMzUWdleUJ5YjJ4c1ltRmphMVJ2VUhKbGRtbHZkWE5RY205MmFXUmxjaXdnYzJodmQwUmxjSEpsWTJGMFpXUlNjR05WY214WFlYSnVhVzVuSUgwZ1BWeHVJQ0FnSUNBZ2RHaHBjeTV3Y205d2N6dGNibHh1SUNBZ0lHeGxkQ0JzYjJGa2FXNW5UV1Z6YzJGblpWUnZVbVZ1WkdWeU8xeHVJQ0FnSUdsbUlDaDBhR2x6TG5OMFlYUmxMbk5vYjNkRmNuSnZjbE5qY21WbGJpa2dlMXh1SUNBZ0lDQWdiRzloWkdsdVowMWxjM05oWjJWVWIxSmxibVJsY2lBOUlIUm9hWE11Y21WdVpHVnlSWEp5YjNKVFkzSmxaVzVEYjI1MFpXNTBLQ2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h6YUc5M1JHVndjbVZqWVhSbFpGSndZMVZ5YkZkaGNtNXBibWNwSUh0Y2JpQWdJQ0FnSUd4dllXUnBibWROWlhOellXZGxWRzlTWlc1a1pYSWdQU0IwYUdsekxuSmxibVJsY2tSbGNISmxZMkYwWldSU2NHTlZjbXhYWVhKdWFXNW5LQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHeHZZV1JwYm1kTlpYTnpZV2RsVkc5U1pXNWtaWElnUFNCMGFHbHpMbWRsZEVOdmJtNWxZM1JwYm1kTVlXSmxiQ2hjYmlBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1c2IyRmthVzVuVFdWemMyRm5aU3hjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lEeE1iMkZrYVc1blUyTnlaV1Z1WEc0Z0lDQWdJQ0FnSUdobFlXUmxjajE3WEc0Z0lDQWdJQ0FnSUNBZ1BHUnBkbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2ljR0ZuWlMxamIyNTBZV2x1WlhKZlgyaGxZV1JsY2kxamJHOXpaVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYdHliMnhzWW1GamExUnZVSEpsZG1sdmRYTlFjbTkyYVdSbGNuMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lITm9iM2RNYjJGa2FXNW5VM0JwYm01bGNqMTdJWFJvYVhNdWMzUmhkR1V1YzJodmQwVnljbTl5VTJOeVpXVnVmVnh1SUNBZ0lDQWdJQ0JzYjJGa2FXNW5UV1Z6YzJGblpUMTdiRzloWkdsdVowMWxjM05oWjJWVWIxSmxibVJsY24xY2JpQWdJQ0FnSUM4K1hHNGdJQ0FnS1R0Y2JpQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElIc2dZMjl1Ym1WamRDQjlJR1p5YjIwZ0ozSmxZV04wTFhKbFpIVjRKenRjYm1sdGNHOXlkQ0I3SUU1RlZGZFBVa3RmVkZsUVJWTWdmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMMjVsZEhkdmNtc25PMXh1YVcxd2IzSjBJQ29nWVhNZ1lXTjBhVzl1Y3lCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6ZEc5eVpTOWhZM1JwYjI1ekp6dGNibWx0Y0c5eWRDQjdYRzRnSUdkbGRFRnNiRVZ1WVdKc1pXUk9aWFIzYjNKcmN5eGNiaUFnWjJWMFRtVjBkMjl5YTBsa1pXNTBhV1pwWlhJc1hHNGdJR2x6VG1WMGQyOXlhMHh2WVdScGJtY3NYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMM05sYkdWamRHOXljeWM3WEc1cGJYQnZjblFnZXlCblpYUlFjbTkyYVdSbGNrTnZibVpwWnlCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJSMVkydHpMMjFsZEdGdFlYTnJMMjFsZEdGdFlYTnJKenRjYm1sdGNHOXlkQ0JNYjJGa2FXNW5UbVYwZDI5eWExTmpjbVZsYmlCbWNtOXRJQ2N1TDJ4dllXUnBibWN0Ym1WMGQyOXlheTF6WTNKbFpXNHVZMjl0Y0c5dVpXNTBKenRjYmx4dVkyOXVjM1FnUkVWUVVrVkRRVlJGUkY5VVJWTlVYMDVGVkY5RFNFRkpUa2xFVXlBOUlGc25NSGd6Snl3Z0p6QjRNbUVuTENBbk1IZzBKMTA3WEc1Y2JtTnZibk4wSUcxaGNGTjBZWFJsVkc5UWNtOXdjeUE5SUNoemRHRjBaU2tnUFQ0Z2UxeHVJQ0JqYjI1emRDQjdJR3h2WVdScGJtZE5aWE56WVdkbElIMGdQU0J6ZEdGMFpTNWhjSEJUZEdGMFpUdGNiaUFnWTI5dWMzUWdjSEp2ZG1sa1pYSkRiMjVtYVdjZ1BTQm5aWFJRY205MmFXUmxja052Ym1acFp5aHpkR0YwWlNrN1hHNGdJR052Ym5OMElIc2djbkJqVlhKc0xDQmphR0ZwYmtsa0xDQjBhV05yWlhJc0lHNXBZMnR1WVcxbExDQjBlWEJsSUgwZ1BTQndjbTkyYVdSbGNrTnZibVpwWnp0Y2JseHVJQ0JqYjI1emRDQnpaWFJRY205MmFXUmxja0Z5WjNNZ1BWeHVJQ0FnSUhSNWNHVWdQVDA5SUU1RlZGZFBVa3RmVkZsUVJWTXVVbEJESUQ4Z1czSndZMVZ5YkN3Z1kyaGhhVzVKWkN3Z2RHbGphMlZ5TENCdWFXTnJibUZ0WlYwZ09pQmJkSGx3WlYwN1hHNWNiaUFnWTI5dWMzUWdjSEp2ZG1sa1pYSkRhR0ZwYmtsa0lEMGdZMmhoYVc1SlpEdGNiaUFnWTI5dWMzUWdhWE5FWlhCeVpXTmhkR1ZrVG1WMGQyOXlheUE5WEc0Z0lDQWdSRVZRVWtWRFFWUkZSRjlVUlZOVVgwNUZWRjlEU0VGSlRrbEVVeTVwYm1Oc2RXUmxjeWh3Y205MmFXUmxja05vWVdsdVNXUXBPMXh1SUNCamIyNXpkQ0JwYzBsdVpuVnlZVkp3WTFWeWJDQTlJSEp3WTFWeWJDQW1KaUJ1WlhjZ1ZWSk1LSEp3WTFWeWJDa3VhRzl6ZEM1bGJtUnpWMmwwYUNnbkxtbHVablZ5WVM1cGJ5Y3BPMXh1SUNCamIyNXpkQ0J6YUc5M1JHVndjbVZqWVhSbFpGSndZMVZ5YkZkaGNtNXBibWNnUFNCcGMwUmxjSEpsWTJGMFpXUk9aWFIzYjNKcklDWW1JR2x6U1c1bWRYSmhVbkJqVlhKc08xeHVYRzRnSUM4dklFVnVjM1Z5WlNCM1pTQm9ZWFpsSUdFZ2JtbGphMjVoYldVZ2RHOGdjSEp2ZG1sa1pTQjBhR1VnZFhObGNseHVJQ0F2THlCcGJpQmpZWE5sSUc5bUlHTnZibTVsWTNScGIyNGdaWEp5YjNKY2JpQWdiR1YwSUc1bGRIZHZjbXRPWVcxbElEMGdibWxqYTI1aGJXVTdYRzRnSUdsbUlDaHVaWFIzYjNKclRtRnRaU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ1kyOXVjM1FnYm1WMGQyOXlhM01nUFNCblpYUkJiR3hGYm1GaWJHVmtUbVYwZDI5eWEzTW9jM1JoZEdVcE8xeHVJQ0FnSUdOdmJuTjBJR1JsYzJseVpXUk9aWFIzYjNKcklEMGdibVYwZDI5eWEzTXVabWx1WkNoY2JpQWdJQ0FnSUNodVpYUjNiM0pyS1NBOVBpQnVaWFIzYjNKckxtTm9ZV2x1U1dRZ1BUMDlJR05vWVdsdVNXUXNYRzRnSUNBZ0tUdGNiaUFnSUNCcFppQW9aR1Z6YVhKbFpFNWxkSGR2Y21zcElIdGNiaUFnSUNBZ0lHNWxkSGR2Y210T1lXMWxJRDBnWkdWemFYSmxaRTVsZEhkdmNtc3VibWxqYTI1aGJXVTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCcGMwNWxkSGR2Y210TWIyRmthVzVuT2lCcGMwNWxkSGR2Y210TWIyRmthVzVuS0hOMFlYUmxLU3hjYmlBZ0lDQnNiMkZrYVc1blRXVnpjMkZuWlN4Y2JpQWdJQ0J6WlhSUWNtOTJhV1JsY2tGeVozTXNYRzRnSUNBZ2NISnZkbWxrWlhKRGIyNW1hV2M2SUh0Y2JpQWdJQ0FnSUM0dUxuQnliM1pwWkdWeVEyOXVabWxuTEZ4dUlDQWdJQ0FnYm1samEyNWhiV1U2SUc1bGRIZHZjbXRPWVcxbExGeHVJQ0FnSUgwc1hHNGdJQ0FnY0hKdmRtbGtaWEpKWkRvZ1oyVjBUbVYwZDI5eWEwbGtaVzUwYVdacFpYSW9jM1JoZEdVcExGeHVJQ0FnSUhOb2IzZEVaWEJ5WldOaGRHVmtVbkJqVlhKc1YyRnlibWx1Wnl4Y2JpQWdmVHRjYm4wN1hHNWNibU52Ym5OMElHMWhjRVJwYzNCaGRHTm9WRzlRY205d2N5QTlJQ2hrYVhOd1lYUmphQ2tnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lITmxkRkJ5YjNacFpHVnlWSGx3WlRvZ0tIUjVjR1VwSUQwK0lIdGNiaUFnSUNBZ0lHUnBjM0JoZEdOb0tHRmpkR2x2Ym5NdWMyVjBVSEp2ZG1sa1pYSlVlWEJsS0hSNWNHVXBLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lISnZiR3hpWVdOclZHOVFjbVYyYVc5MWMxQnliM1pwWkdWeU9pQW9LU0E5UGx4dUlDQWdJQ0FnWkdsemNHRjBZMmdvWVdOMGFXOXVjeTV5YjJ4c1ltRmphMVJ2VUhKbGRtbHZkWE5RY205MmFXUmxjaWdwS1N4Y2JpQWdJQ0J6YUc5M1RtVjBkMjl5YTBSeWIzQmtiM2R1T2lBb0tTQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUVlZNVkVsRFNFRkpUaWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWkdsemNHRjBZMmdvWVdOMGFXOXVjeTUwYjJkbmJHVk9aWFIzYjNKclRXVnVkU2dwS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJrYVhOd1lYUmphQ2hoWTNScGIyNXpMbk5vYjNkT1pYUjNiM0pyUkhKdmNHUnZkMjRvS1NrN1hHNGdJQ0FnZlN4Y2JpQWdmVHRjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnZibTVsWTNRb1hHNGdJRzFoY0ZOMFlYUmxWRzlRY205d2N5eGNiaUFnYldGd1JHbHpjR0YwWTJoVWIxQnliM0J6TEZ4dUtTaE1iMkZrYVc1blRtVjBkMjl5YTFOamNtVmxiaWs3WEc0aUxDSnBiWEJ2Y25RZ1VtVmhZM1FzSUhzZ2RYTmxRMjl1ZEdWNGRDQjlJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ2V5QjFjMlZJYVhOMGIzSjVJSDBnWm5KdmJTQW5jbVZoWTNRdGNtOTFkR1Z5TFdSdmJTYzdYRzVwYlhCdmNuUWdleUIxYzJWRWFYTndZWFJqYUN3Z2RYTmxVMlZzWldOMGIzSWdmU0JtY205dElDZHlaV0ZqZEMxeVpXUjFlQ2M3WEc1cGJYQnZjblFnZXlCblpYUkJZMk52ZFc1MFRHbHVheUI5SUdaeWIyMGdKMEJ0WlhSaGJXRnpheTlsZEdobGNuTmpZVzR0YkdsdWF5YzdYRzVjYm1sdGNHOXlkQ0I3SUhOb2IzZE5iMlJoYkNCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDNOMGIzSmxMMkZqZEdsdmJuTW5PMXh1YVcxd2IzSjBJSHRjYmlBZ1EwOU9Ua1ZEVkVWRVgxSlBWVlJGTEZ4dUlDQk9SVlJYVDFKTFUxOVNUMVZVUlN4Y2JuMGdabkp2YlNBbkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5amIyNXpkR0Z1ZEhNdmNtOTFkR1Z6Snp0Y2JtbHRjRzl5ZENCN0lHZGxkRlZTVEVodmMzUk9ZVzFsSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2YUdWc2NHVnljeTkxZEdsc2N5OTFkR2xzSnp0Y2JtbHRjRzl5ZENCN0lFMWxiblVzSUUxbGJuVkpkR1Z0SUgwZ1puSnZiU0FuTGk0dkxpNHZkV2t2YldWdWRTYzdYRzVwYlhCdmNuUWdlMXh1SUNCblpYUkNiRzlqYTBWNGNHeHZjbVZ5VEdsdWExUmxlSFFzWEc0Z0lHZGxkRU4xY25KbGJuUkRhR0ZwYmtsa0xGeHVJQ0JuWlhSRGRYSnlaVzUwUzJWNWNtbHVaeXhjYmlBZ1oyVjBVbkJqVUhKbFpuTkdiM0pEZFhKeVpXNTBVSEp2ZG1sa1pYSXNYRzRnSUdkbGRGTmxiR1ZqZEdWa1NXUmxiblJwZEhrc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUwzTmxiR1ZqZEc5eWN5YzdYRzVwYlhCdmNuUWdleUIxYzJWSk1UaHVRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyaHZiMnR6TDNWelpVa3hPRzVEYjI1MFpYaDBKenRjYm1sdGNHOXlkQ0I3SUdkbGRFVnVkbWx5YjI1dFpXNTBWSGx3WlNCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyRndjQzl6WTNKcGNIUnpMMnhwWWk5MWRHbHNKenRjYm1sdGNHOXlkQ0I3SUVWT1ZrbFNUMDVOUlU1VVgxUlpVRVZmUmxWTVRGTkRVa1ZGVGlCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdllYQndKenRjYm1sdGNHOXlkQ0I3SUV0bGVYSnBibWRVZVhCbElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OXJaWGx5YVc1bkp6dGNibWx0Y0c5eWRDQjdYRzRnSUUxbGRHRk5aWFJ5YVdOelJYWmxiblJEWVhSbFoyOXllU3hjYmlBZ1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEV4cGJtdFVlWEJsTEZ4dUlDQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFRtRnRaU3hjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmMyaGhjbVZrTDJOdmJuTjBZVzUwY3k5dFpYUmhiV1YwY21samN5YzdYRzVwYlhCdmNuUWdleUJOWlhSaFRXVjBjbWxqYzBOdmJuUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlqYjI1MFpYaDBjeTl0WlhSaGJXVjBjbWxqY3ljN1hHNXBiWEJ2Y25RZ2V5QkpZMjl1VG1GdFpTQjlJR1p5YjIwZ0p5NHVMeTR1TDJOdmJYQnZibVZ1ZEMxc2FXSnlZWEo1Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1FXTmpiM1Z1ZEU5d2RHbHZibk5OWlc1MUtIc2dZVzVqYUc5eVJXeGxiV1Z1ZEN3Z2IyNURiRzl6WlNCOUtTQjdYRzRnSUdOdmJuTjBJSFFnUFNCMWMyVkpNVGh1UTI5dWRHVjRkQ2dwTzF4dUlDQmpiMjV6ZENCa2FYTndZWFJqYUNBOUlIVnpaVVJwYzNCaGRHTm9LQ2s3WEc0Z0lHTnZibk4wSUdocGMzUnZjbmtnUFNCMWMyVklhWE4wYjNKNUtDazdYRzVjYmlBZ1kyOXVjM1FnYTJWNWNtbHVaeUE5SUhWelpWTmxiR1ZqZEc5eUtHZGxkRU4xY25KbGJuUkxaWGx5YVc1bktUdGNiaUFnWTI5dWMzUWdZMmhoYVc1SlpDQTlJSFZ6WlZObGJHVmpkRzl5S0dkbGRFTjFjbkpsYm5SRGFHRnBia2xrS1R0Y2JpQWdZMjl1YzNRZ2NuQmpVSEpsWm5NZ1BTQjFjMlZUWld4bFkzUnZjaWhuWlhSU2NHTlFjbVZtYzBadmNrTjFjbkpsYm5SUWNtOTJhV1JsY2lrN1hHNGdJR052Ym5OMElITmxiR1ZqZEdWa1NXUmxiblJwZEhrZ1BTQjFjMlZUWld4bFkzUnZjaWhuWlhSVFpXeGxZM1JsWkVsa1pXNTBhWFI1S1R0Y2JpQWdZMjl1YzNRZ2V5QmhaR1J5WlhOeklIMGdQU0J6Wld4bFkzUmxaRWxrWlc1MGFYUjVPMXh1SUNCamIyNXpkQ0JoWkdSeVpYTnpUR2x1YXlBOUlHZGxkRUZqWTI5MWJuUk1hVzVyS0dGa1pISmxjM01zSUdOb1lXbHVTV1FzSUhKd1kxQnlaV1p6S1R0Y2JpQWdZMjl1YzNRZ2V5QmliRzlqYTBWNGNHeHZjbVZ5VlhKc0lIMGdQU0J5Y0dOUWNtVm1jenRjYmlBZ1kyOXVjM1FnWW14dlkydEZlSEJzYjNKbGNsVnliRk4xWWxScGRHeGxJRDBnWjJWMFZWSk1TRzl6ZEU1aGJXVW9ZbXh2WTJ0RmVIQnNiM0psY2xWeWJDazdYRzRnSUdOdmJuTjBJSFJ5WVdOclJYWmxiblFnUFNCMWMyVkRiMjUwWlhoMEtFMWxkR0ZOWlhSeWFXTnpRMjl1ZEdWNGRDazdYRzRnSUdOdmJuTjBJR0pzYjJOclJYaHdiRzl5WlhKTWFXNXJWR1Y0ZENBOUlIVnpaVk5sYkdWamRHOXlLR2RsZEVKc2IyTnJSWGh3Ykc5eVpYSk1hVzVyVkdWNGRDazdYRzVjYmlBZ1kyOXVjM1FnYVhOU1pXMXZkbUZpYkdVZ1BTQnJaWGx5YVc1bkxuUjVjR1VnSVQwOUlFdGxlWEpwYm1kVWVYQmxMbWhrUzJWNVZISmxaVHRjYmx4dUlDQmpiMjV6ZENCeWIzVjBaVlJ2UVdSa1FteHZZMnRGZUhCc2IzSmxjbFZ5YkNBOUlDZ3BJRDArSUh0Y2JpQWdJQ0JvYVhOMGIzSjVMbkIxYzJnb1lDUjdUa1ZVVjA5U1MxTmZVazlWVkVWOUkySnNiMk5yUlhod2JHOXlaWEpWY214Z0tUdGNiaUFnZlR0Y2JseHVJQ0JqYjI1emRDQnZjR1Z1UW14dlkydEZlSEJzYjNKbGNpQTlJQ2dwSUQwK0lIdGNiaUFnSUNCMGNtRmphMFYyWlc1MEtIdGNiaUFnSUNBZ0lHVjJaVzUwT2lCTlpYUmhUV1YwY21samMwVjJaVzUwVG1GdFpTNUZlSFJsY201aGJFeHBibXREYkdsamEyVmtMRnh1SUNBZ0lDQWdZMkYwWldkdmNuazZJRTFsZEdGTlpYUnlhV056UlhabGJuUkRZWFJsWjI5eWVTNU9ZWFpwWjJGMGFXOXVMRnh1SUNBZ0lDQWdjSEp2Y0dWeWRHbGxjem9nZTF4dUlDQWdJQ0FnSUNCc2FXNXJYM1I1Y0dVNklFMWxkR0ZOWlhSeWFXTnpSWFpsYm5STWFXNXJWSGx3WlM1QlkyTnZkVzUwVkhKaFkydGxjaXhjYmlBZ0lDQWdJQ0FnYkc5allYUnBiMjQ2SUNkQlkyTnZkVzUwSUU5d2RHbHZibk1uTEZ4dUlDQWdJQ0FnSUNCMWNteGZaRzl0WVdsdU9pQm5aWFJWVWt4SWIzTjBUbUZ0WlNoaFpHUnlaWE56VEdsdWF5a3NYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lIMHBPMXh1SUNBZ0lHZHNiMkpoYkM1d2JHRjBabTl5YlM1dmNHVnVWR0ZpS0h0Y2JpQWdJQ0FnSUhWeWJEb2dZV1JrY21WemMweHBibXNzWEc0Z0lDQWdmU2s3WEc0Z0lDQWdiMjVEYkc5elpTZ3BPMXh1SUNCOU8xeHVYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdQRTFsYm5WY2JpQWdJQ0FnSUdGdVkyaHZja1ZzWlcxbGJuUTllMkZ1WTJodmNrVnNaVzFsYm5SOVhHNGdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSmhZMk52ZFc1MExXOXdkR2x2Ym5NdGJXVnVkVndpWEc0Z0lDQWdJQ0J2YmtocFpHVTllMjl1UTJ4dmMyVjlYRzRnSUNBZ1BseHVJQ0FnSUNBZ1BFMWxiblZKZEdWdFhHNGdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWUxeHVJQ0FnSUNBZ0lDQWdJR0pzYjJOclJYaHdiRzl5WlhKTWFXNXJWR1Y0ZEM1bWFYSnpkRkJoY25RZ1BUMDlJQ2RoWkdSQ2JHOWphMFY0Y0d4dmNtVnlKMXh1SUNBZ0lDQWdJQ0FnSUNBZ1B5QnliM1YwWlZSdlFXUmtRbXh2WTJ0RmVIQnNiM0psY2xWeWJGeHVJQ0FnSUNBZ0lDQWdJQ0FnT2lCdmNHVnVRbXh2WTJ0RmVIQnNiM0psY2x4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lITjFZblJwZEd4bFBYdGNiaUFnSUNBZ0lDQWdJQ0JpYkc5amEwVjRjR3h2Y21WeVZYSnNVM1ZpVkdsMGJHVWdQeUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQThjM0JoYmlCamJHRnpjMDVoYldVOVhDSmhZMk52ZFc1MExXOXdkR2x2Ym5NdGJXVnVkVjlmWlhod2JHOXlaWEl0YjNKcFoybHVYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHRpYkc5amEwVjRjR3h2Y21WeVZYSnNVM1ZpVkdsMGJHVjlYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwzTndZVzQrWEc0Z0lDQWdJQ0FnSUNBZ0tTQTZJRzUxYkd4Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBZMjl1VG1GdFpUMTdTV052Yms1aGJXVXVSWGh3YjNKMGZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQjdkQ2hjYmlBZ0lDQWdJQ0FnSUNCaWJHOWphMFY0Y0d4dmNtVnlUR2x1YTFSbGVIUXVabWx5YzNSUVlYSjBMRnh1SUNBZ0lDQWdJQ0FnSUdKc2IyTnJSWGh3Ykc5eVpYSk1hVzVyVkdWNGRDNXpaV052Ym1SUVlYSjBJRDA5UFNBbkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnUHlCdWRXeHNYRzRnSUNBZ0lDQWdJQ0FnSUNBNklGdDBLR0pzYjJOclJYaHdiRzl5WlhKTWFXNXJWR1Y0ZEM1elpXTnZibVJRWVhKMEtWMHNYRzRnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0E4TDAxbGJuVkpkR1Z0UGx4dUlDQWdJQ0FnZTJkbGRFVnVkbWx5YjI1dFpXNTBWSGx3WlNncElEMDlQU0JGVGxaSlVrOU9UVVZPVkY5VVdWQkZYMFpWVEV4VFExSkZSVTRnUHlCdWRXeHNJRG9nS0Z4dUlDQWdJQ0FnSUNBOFRXVnVkVWwwWlcxY2JpQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYc29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwY21GamEwVjJaVzUwS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhabGJuUTZJRTFsZEdGTlpYUnlhV056UlhabGJuUk9ZVzFsTGtGd2NGZHBibVJ2ZDBWNGNHRnVaR1ZrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhSbFoyOXllVG9nVFdWMFlVMWxkSEpwWTNORmRtVnVkRU5oZEdWbmIzSjVMazVoZG1sbllYUnBiMjRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCbGNuUnBaWE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyTmhkR2x2YmpvZ0owRmpZMjkxYm5RZ1QzQjBhVzl1Y3ljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RzYjJKaGJDNXdiR0YwWm05eWJTNXZjR1Z1UlhoMFpXNXphVzl1U1c1Q2NtOTNjMlZ5S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmtOc2IzTmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0JwWTI5dVRtRnRaVDE3U1dOdmJrNWhiV1V1Ulhod1lXNWtmVnh1SUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ2UzUW9KMlY0Y0dGdVpGWnBaWGNuS1gxY2JpQWdJQ0FnSUNBZ1BDOU5aVzUxU1hSbGJUNWNiaUFnSUNBZ0lDbDlYRzRnSUNBZ0lDQThUV1Z1ZFVsMFpXMWNiaUFnSUNBZ0lDQWdaR0YwWVMxMFpYTjBhV1E5WENKaFkyTnZkVzUwTFc5d2RHbHZibk10YldWdWRWOWZZV05qYjNWdWRDMWtaWFJoYVd4elhDSmNiaUFnSUNBZ0lDQWdiMjVEYkdsamF6MTdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR1JwYzNCaGRHTm9LSE5vYjNkTmIyUmhiQ2g3SUc1aGJXVTZJQ2RCUTBOUFZVNVVYMFJGVkVGSlRGTW5JSDBwS1R0Y2JpQWdJQ0FnSUNBZ0lDQjBjbUZqYTBWMlpXNTBLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwT2lCTlpYUmhUV1YwY21samMwVjJaVzUwVG1GdFpTNU9ZWFpCWTJOdmRXNTBSR1YwWVdsc2MwOXdaVzVsWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oZEdWbmIzSjVPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBRMkYwWldkdmNua3VUbUYyYVdkaGRHbHZiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25ScFpYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiRzlqWVhScGIyNDZJQ2RCWTJOdmRXNTBJRTl3ZEdsdmJuTW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQnZia05zYjNObEtDazdYRzRnSUNBZ0lDQWdJSDE5WEc0Z0lDQWdJQ0FnSUdsamIyNU9ZVzFsUFh0SlkyOXVUbUZ0WlM1VFkyRnVRbUZ5WTI5a1pYMWNiaUFnSUNBZ0lENWNiaUFnSUNBZ0lDQWdlM1FvSjJGalkyOTFiblJFWlhSaGFXeHpKeWw5WEc0Z0lDQWdJQ0E4TDAxbGJuVkpkR1Z0UGx4dUlDQWdJQ0FnUEUxbGJuVkpkR1Z0WEc0Z0lDQWdJQ0FnSUdSaGRHRXRkR1Z6ZEdsa1BWd2lZV05qYjNWdWRDMXZjSFJwYjI1ekxXMWxiblZmWDJOdmJtNWxZM1JsWkMxemFYUmxjMXdpWEc0Z0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZXlncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCMGNtRmphMFYyWlc1MEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBUbUZ0WlM1T1lYWkRiMjV1WldOMFpXUlRhWFJsYzA5d1pXNWxaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhkR1ZuYjNKNU9pQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rdVRtRjJhV2RoZEdsdmJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JHOWpZWFJwYjI0NklDZEJZMk52ZFc1MElFOXdkR2x2Ym5NbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNCb2FYTjBiM0o1TG5CMWMyZ29RMDlPVGtWRFZFVkVYMUpQVlZSRktUdGNiaUFnSUNBZ0lDQWdJQ0J2YmtOc2IzTmxLQ2s3WEc0Z0lDQWdJQ0FnSUgxOVhHNGdJQ0FnSUNBZ0lHbGpiMjVPWVcxbFBYdEpZMjl1VG1GdFpTNURiMjV1WldOMGZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQjdkQ2duWTI5dWJtVmpkR1ZrVTJsMFpYTW5LWDFjYmlBZ0lDQWdJRHd2VFdWdWRVbDBaVzArWEc0Z0lDQWdJQ0I3YVhOU1pXMXZkbUZpYkdVZ1B5QW9YRzRnSUNBZ0lDQWdJRHhOWlc1MVNYUmxiVnh1SUNBZ0lDQWdJQ0FnSUdSaGRHRXRkR1Z6ZEdsa1BWd2lZV05qYjNWdWRDMXZjSFJwYjI1ekxXMWxiblZmWDNKbGJXOTJaUzFoWTJOdmRXNTBYQ0pjYmlBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yUFhzb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmthWE53WVhSamFDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyaHZkMDF2WkdGc0tIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBblEwOU9Sa2xTVFY5U1JVMVBWa1ZmUVVORFQxVk9WQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdSbGJuUnBkSGs2SUhObGJHVmpkR1ZrU1dSbGJuUnBkSGtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVRMnh2YzJVb0tUdGNiaUFnSUNBZ0lDQWdJQ0I5ZlZ4dUlDQWdJQ0FnSUNBZ0lHbGpiMjVPWVcxbFBYdEpZMjl1VG1GdFpTNVVjbUZ6YUgxY2JpQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJSHQwS0NkeVpXMXZkbVZCWTJOdmRXNTBKeWw5WEc0Z0lDQWdJQ0FnSUR3dlRXVnVkVWwwWlcwK1hHNGdJQ0FnSUNBcElEb2diblZzYkgxY2JpQWdJQ0E4TDAxbGJuVStYRzRnSUNrN1hHNTlYRzVjYmtGalkyOTFiblJQY0hScGIyNXpUV1Z1ZFM1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUdGdVkyaHZja1ZzWlcxbGJuUTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0hkcGJtUnZkeTVGYkdWdFpXNTBLU3hjYmlBZ2IyNURiRzl6WlRvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JuMDdYRzVjYmtGalkyOTFiblJQY0hScGIyNXpUV1Z1ZFM1a1pXWmhkV3gwVUhKdmNITWdQU0I3WEc0Z0lHRnVZMmh2Y2tWc1pXMWxiblE2SUhWdVpHVm1hVzVsWkN4Y2JuMDdYRzRpTENKbGVIQnZjblFnZXlCa1pXWmhkV3gwSUgwZ1puSnZiU0FuTGk5dFpXNTFMV0poY2ljN1hHNGlMQ0pwYlhCdmNuUWdVbVZoWTNRc0lIc2dkWE5sVTNSaGRHVXNJSFZ6WlVOdmJuUmxlSFFzSUhWelpWSmxaaUI5SUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQmljbTkzYzJWeUlHWnliMjBnSjNkbFltVjRkR1Z1YzJsdmJpMXdiMng1Wm1sc2JDYzdYRzVwYlhCdmNuUWdleUIxYzJWSWFYTjBiM0o1SUgwZ1puSnZiU0FuY21WaFkzUXRjbTkxZEdWeUxXUnZiU2M3WEc1cGJYQnZjblFnZXlCMWMyVlRaV3hsWTNSdmNpQjlJR1p5YjIwZ0ozSmxZV04wTFhKbFpIVjRKenRjYm1sdGNHOXlkQ0JUWld4bFkzUmxaRUZqWTI5MWJuUWdabkp2YlNBbkxpNHZjMlZzWldOMFpXUXRZV05qYjNWdWRDYzdYRzVwYlhCdmNuUWdRMjl1Ym1WamRHVmtVM1JoZEhWelNXNWthV05oZEc5eUlHWnliMjBnSnk0dUwyTnZibTVsWTNSbFpDMXpkR0YwZFhNdGFXNWthV05oZEc5eUp6dGNibWx0Y0c5eWRDQjdJR2RsZEVWdWRtbHliMjV0Wlc1MFZIbHdaU0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJGd2NDOXpZM0pwY0hSekwyeHBZaTkxZEdsc0p6dGNibWx0Y0c5eWRDQjdJRVZPVmtsU1QwNU5SVTVVWDFSWlVFVmZVRTlRVlZBZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwyRndjQ2M3WEc1cGJYQnZjblFnZTF4dUlDQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rc1hHNGdJRTFsZEdGTlpYUnlhV056UlhabGJuUk9ZVzFsTEZ4dWZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwyMWxkR0Z0WlhSeWFXTnpKenRjYm1sdGNHOXlkQ0I3SUVOUFRrNUZRMVJGUkY5QlEwTlBWVTVVVTE5U1QxVlVSU0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZZMjl1YzNSaGJuUnpMM0p2ZFhSbGN5YzdYRzVwYlhCdmNuUWdleUIxYzJWSk1UaHVRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyaHZiMnR6TDNWelpVa3hPRzVEYjI1MFpYaDBKenRjYm1sdGNHOXlkQ0I3SUdkbGRFOXlhV2RwYms5bVEzVnljbVZ1ZEZSaFlpQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwzTmxiR1ZqZEc5eWN5YzdYRzVwYlhCdmNuUWdleUJOWlhSaFRXVjBjbWxqYzBOdmJuUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlqYjI1MFpYaDBjeTl0WlhSaGJXVjBjbWxqY3ljN1hHNXBiWEJ2Y25RZ2V5QkNkWFIwYjI1SlkyOXVMQ0JKWTI5dVRtRnRaU0I5SUdaeWIyMGdKeTR1THk0dUwyTnZiWEJ2Ym1WdWRDMXNhV0p5WVhKNUp6dGNibWx0Y0c5eWRDQkJZMk52ZFc1MFQzQjBhVzl1YzAxbGJuVWdabkp2YlNBbkxpOWhZMk52ZFc1MExXOXdkR2x2Ym5NdGJXVnVkU2M3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUUxbGJuVkNZWElvS1NCN1hHNGdJR052Ym5OMElIUWdQU0IxYzJWSk1UaHVRMjl1ZEdWNGRDZ3BPMXh1SUNCamIyNXpkQ0IwY21GamEwVjJaVzUwSUQwZ2RYTmxRMjl1ZEdWNGRDaE5aWFJoVFdWMGNtbGpjME52Ym5SbGVIUXBPMXh1SUNCamIyNXpkQ0JvYVhOMGIzSjVJRDBnZFhObFNHbHpkRzl5ZVNncE8xeHVJQ0JqYjI1emRDQmJZV05qYjNWdWRFOXdkR2x2Ym5OTlpXNTFUM0JsYml3Z2MyVjBRV05qYjNWdWRFOXdkR2x2Ym5OTlpXNTFUM0JsYmwwZ1BTQjFjMlZUZEdGMFpTaG1ZV3h6WlNrN1hHNGdJR052Ym5OMElHOXlhV2RwYmlBOUlIVnpaVk5sYkdWamRHOXlLR2RsZEU5eWFXZHBiazltUTNWeWNtVnVkRlJoWWlrN1hHNGdJR052Ym5OMElISmxaaUE5SUhWelpWSmxaaWhtWVd4elpTazdYRzVjYmlBZ1kyOXVjM1FnYzJodmQxTjBZWFIxY3lBOVhHNGdJQ0FnWjJWMFJXNTJhWEp2Ym0xbGJuUlVlWEJsS0NrZ1BUMDlJRVZPVmtsU1QwNU5SVTVVWDFSWlVFVmZVRTlRVlZBZ0ppWmNiaUFnSUNCdmNtbG5hVzRnSmlaY2JpQWdJQ0J2Y21sbmFXNGdJVDA5SUdKeWIzZHpaWEl1Y25WdWRHbHRaUzVwWkR0Y2JseHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWJXVnVkUzFpWVhKY0lqNWNiaUFnSUNBZ0lIdHphRzkzVTNSaGRIVnpJRDhnS0Z4dUlDQWdJQ0FnSUNBOFEyOXVibVZqZEdWa1UzUmhkSFZ6U1c1a2FXTmhkRzl5WEc0Z0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN0tDa2dQVDRnYUdsemRHOXllUzV3ZFhOb0tFTlBUazVGUTFSRlJGOUJRME5QVlU1VVUxOVNUMVZVUlNsOVhHNGdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQXBJRG9nYm5Wc2JIMWNiaUFnSUNBZ0lEeFRaV3hsWTNSbFpFRmpZMjkxYm5RZ0x6NWNiaUFnSUNBZ0lEeHpjR0Z1SUhOMGVXeGxQWHQ3SUdScGMzQnNZWGs2SUNkcGJtaGxjbWwwSnlCOWZTQnlaV1k5ZTNKbFpuMCtYRzRnSUNBZ0lDQWdJRHhDZFhSMGIyNUpZMjl1WEc0Z0lDQWdJQ0FnSUNBZ2FXTnZiazVoYldVOWUwbGpiMjVPWVcxbExrMXZjbVZXWlhKMGFXTmhiSDFjYmlBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnRaVzUxTFdKaGNsOWZZV05qYjNWdWRDMXZjSFJwYjI1elhDSmNiaUFnSUNBZ0lDQWdJQ0JrWVhSaExYUmxjM1JwWkQxY0ltRmpZMjkxYm5RdGIzQjBhVzl1Y3kxdFpXNTFMV0oxZEhSdmJsd2lYRzRnSUNBZ0lDQWdJQ0FnWVhKcFlVeGhZbVZzUFh0MEtDZGhZMk52ZFc1MFQzQjBhVzl1Y3ljcGZWeHVJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczlleWdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSeVlXTnJSWFpsYm5Rb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkRG9nVFdWMFlVMWxkSEpwWTNORmRtVnVkRTVoYldVdVRtRjJRV05qYjNWdWRFMWxiblZQY0dWdVpXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhkR1ZuYjNKNU9pQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rdVRtRjJhV2RoZEdsdmJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3h2WTJGMGFXOXVPaUFuU0c5dFpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGRFRmpZMjkxYm5SUGNIUnBiMjV6VFdWdWRVOXdaVzRvZEhKMVpTazdYRzRnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lEd3ZjM0JoYmo1Y2JpQWdJQ0FnSUh0aFkyTnZkVzUwVDNCMGFXOXVjMDFsYm5WUGNHVnVJQ1ltSUNoY2JpQWdJQ0FnSUNBZ1BFRmpZMjkxYm5SUGNIUnBiMjV6VFdWdWRWeHVJQ0FnSUNBZ0lDQWdJR0Z1WTJodmNrVnNaVzFsYm5ROWUzSmxaaTVqZFhKeVpXNTBmVnh1SUNBZ0lDQWdJQ0FnSUc5dVEyeHZjMlU5ZXlncElEMCtJSE5sZEVGalkyOTFiblJQY0hScGIyNXpUV1Z1ZFU5d1pXNG9abUZzYzJVcGZWeHVJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdLWDFjYmlBZ0lDQThMMlJwZGo1Y2JpQWdLVHRjYm4xY2JpSXNJbWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdVbVZoWTNRc0lIc2dRMjl0Y0c5dVpXNTBJSDBnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElIc2dabWx1WkVSUFRVNXZaR1VnZlNCbWNtOXRJQ2R5WldGamRDMWtiMjBuTzF4dWFXMXdiM0owSUZKbFlXTjBRMU5UVkhKaGJuTnBkR2x2YmtkeWIzVndJR1p5YjIwZ0ozSmxZV04wTFhSeVlXNXphWFJwYjI0dFozSnZkWEF2UTFOVFZISmhibk5wZEdsdmJrZHliM1Z3Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nVFdWdWRVUnliM0J3YjBOdmJYQnZibVZ1ZENCbGVIUmxibVJ6SUVOdmJYQnZibVZ1ZENCN1hHNGdJSE4wWVhScFl5QndjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lDQWdhWE5QY0dWdU9pQlFjbTl3Vkhsd1pYTXVZbTl2YkM1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUdsdWJtVnlVM1I1YkdVNklGQnliM0JVZVhCbGN5NXZZbXBsWTNRc1hHNGdJQ0FnWTJocGJHUnlaVzQ2SUZCeWIzQlVlWEJsY3k1dWIyUmxMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdiMjVEYkdsamEwOTFkSE5wWkdVNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJR052Ym5SaGFXNWxja05zWVhOelRtRnRaVG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQjZTVzVrWlhnNklGQnliM0JVZVhCbGN5NXVkVzFpWlhJc1hHNGdJQ0FnYzNSNWJHVTZJRkJ5YjNCVWVYQmxjeTV2WW1wbFkzUXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQjFjMlZEYzNOVWNtRnVjMmwwYVc5dU9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J6Y0dWbFpEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnZlR0Y2JseHVJQ0J5Wlc1a1pYSlFjbWx0WVhKNUtDa2dlMXh1SUNBZ0lHTnZibk4wSUhzZ2FYTlBjR1Z1SUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHbG1JQ2doYVhOUGNHVnVLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQnBibTVsY2xOMGVXeGxJRDBnZEdocGN5NXdjbTl3Y3k1cGJtNWxjbE4wZVd4bElIeDhJSHQ5TzF4dVhHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2liV1Z1ZFMxa2NtOXdjRzljSWx4dUlDQWdJQ0FnSUNCclpYazlYQ0p0Wlc1MUxXUnliM0J3Ynkxa2NtRjNaWEpjSWx4dUlDQWdJQ0FnSUNCa1lYUmhMWFJsYzNScFpEMWNJbTFsYm5VdFpISnZjSEJ2WENKY2JpQWdJQ0FnSUNBZ2MzUjViR1U5ZTJsdWJtVnlVM1I1YkdWOVhHNGdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lIdDBhR2x6TG5CeWIzQnpMbU5vYVd4a2NtVnVmVnh1SUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnS1R0Y2JpQWdmVnh1WEc0Z0lHZHNiMkpoYkVOc2FXTnJUMk5qZFhKeVpXUWdQU0FvWlhabGJuUXBJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQjdJSFJoY21kbGRDQjlJRDBnWlhabGJuUTdYRzRnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElISmxZV04wTDI1dkxXWnBibVF0Wkc5dExXNXZaR1ZjYmlBZ0lDQmpiMjV6ZENCamIyNTBZV2x1WlhJZ1BTQm1hVzVrUkU5TlRtOWtaU2gwYUdsektUdGNibHh1SUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11YVhOUGNHVnVJQ1ltWEc0Z0lDQWdJQ0IwWVhKblpYUWdJVDA5SUdOdmJuUmhhVzVsY2lBbUpseHVJQ0FnSUNBZ0lYUm9hWE11WTI5dWRHRnBibVZ5TG1OdmJuUmhhVzV6S0dWMlpXNTBMblJoY21kbGRDbGNiaUFnSUNBcElIdGNiaUFnSUNBZ0lIUm9hWE11Y0hKdmNITXViMjVEYkdsamEwOTFkSE5wWkdVL0xpaGxkbVZ1ZENrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lHTnZiWEJ2Ym1WdWRFUnBaRTF2ZFc1MEtDa2dlMXh1SUNBZ0lHbG1JQ2gwYUdseklDWW1JR1J2WTNWdFpXNTBMbUp2WkhrcElIdGNiaUFnSUNBZ0lHUnZZM1Z0Wlc1MExtSnZaSGt1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0IwYUdsekxtZHNiMkpoYkVOc2FXTnJUMk5qZFhKeVpXUXBPMXh1SUNBZ0lDQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJSEpsWVdOMEwyNXZMV1pwYm1RdFpHOXRMVzV2WkdWY2JpQWdJQ0FnSUdOdmJuTjBJR052Ym5SaGFXNWxjaUE5SUdacGJtUkVUMDFPYjJSbEtIUm9hWE1wTzF4dUlDQWdJQ0FnZEdocGN5NWpiMjUwWVdsdVpYSWdQU0JqYjI1MFlXbHVaWEk3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWTI5dGNHOXVaVzUwVjJsc2JGVnViVzkxYm5Rb0tTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNZ0ppWWdaRzlqZFcxbGJuUXVZbTlrZVNrZ2UxeHVJQ0FnSUNBZ1pHOWpkVzFsYm5RdVltOWtlUzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUhSb2FYTXVaMnh2WW1Gc1EyeHBZMnRQWTJOMWNuSmxaQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WdVpHVnlLQ2tnZTF4dUlDQWdJR052Ym5OMElIc2dZMjl1ZEdGcGJtVnlRMnhoYzNOT1lXMWxJRDBnSnljc0lITjBlV3hsSUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHTnZibk4wSUhOd1pXVmtJRDBnZEdocGN5NXdjbTl3Y3k1emNHVmxaQ0I4ZkNBbk16QXdiWE1uTzF4dUlDQWdJR052Ym5OMElIc2dkWE5sUTNOelZISmhibk5wZEdsdmJpQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0JqYjI1emRDQjZTVzVrWlhnZ1BTQW5la2x1WkdWNEp5QnBiaUIwYUdsekxuQnliM0J6SUQ4Z2RHaHBjeTV3Y205d2N5NTZTVzVrWlhnZ09pQXdPMXh1WEc0Z0lDQWdZMjl1YzNRZ1ltRnpaVk4wZVd4bElEMGdlMXh1SUNBZ0lDQWdjRzl6YVhScGIyNDZJQ2RtYVhobFpDY3NYRzRnSUNBZ0lDQXVMaTV6ZEhsc1pTeGNiaUFnSUNBZ0lIcEpibVJsZUN4Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ2MzUjViR1U5ZTJKaGMyVlRkSGxzWlgxY2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGdiV1Z1ZFMxa2NtOXdjRzh0WTI5dWRHRnBibVZ5SUNSN1kyOXVkR0ZwYm1WeVEyeGhjM05PWVcxbGZXQjlYRzRnSUNBZ0lDQWdJR1JoZEdFdGRHVnpkR2xrUFh0amIyNTBZV2x1WlhKRGJHRnpjMDVoYldWOVhHNGdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lEeHpkSGxzWlQ1Y2JpQWdJQ0FnSUNBZ0lDQjdZRnh1SUNBZ0lDQWdJQ0FnSUM1dFpXNTFMV1J5YjNCd2J5MWxiblJsY2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMybDBhVzl1T2lCMGNtRnVjMlp2Y20wZ0pIdHpjR1ZsWkgwZ1pXRnpaUzFwYmkxdmRYUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpWa29MVEl3TUNVcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDNXRaVzUxTFdSeWIzQndieTFsYm5SbGNpNXRaVzUxTFdSeWIzQndieTFsYm5SbGNpMWhZM1JwZG1VZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTnBkR2x2YmpvZ2RISmhibk5tYjNKdElDUjdjM0JsWldSOUlHVmhjMlV0YVc0dGIzVjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVlpLREFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdWJXVnVkUzFrY205d2NHOHRiR1ZoZG1VZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTnBkR2x2YmpvZ2RISmhibk5tYjNKdElDUjdjM0JsWldSOUlHVmhjMlV0YVc0dGIzVjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVlpLREFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdWJXVnVkUzFrY205d2NHOHRiR1ZoZG1VdWJXVnVkUzFrY205d2NHOHRiR1ZoZG1VdFlXTjBhWFpsSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ5WVc1emFYUnBiMjQ2SUhSeVlXNXpabTl5YlNBa2UzTndaV1ZrZlNCbFlYTmxMV2x1TFc5MWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSeVlXNXpabTl5YlRvZ2RISmhibk5zWVhSbFdTZ3RNakF3SlNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JnZlZ4dUlDQWdJQ0FnSUNBOEwzTjBlV3hsUGx4dUlDQWdJQ0FnSUNCN2RYTmxRM056VkhKaGJuTnBkR2x2YmlBL0lDaGNiaUFnSUNBZ0lDQWdJQ0E4VW1WaFkzUkRVMU5VY21GdWMybDBhVzl1UjNKdmRYQmNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltTnpjeTEwY21GdWMybDBhVzl1TFdkeWIzVndYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6YVhScGIyNU9ZVzFsUFZ3aWJXVnVkUzFrY205d2NHOWNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5wZEdsdmJrVnVkR1Z5VkdsdFpXOTFkRDE3Y0dGeWMyVkpiblFvYzNCbFpXUXNJREV3S1gxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJ5WVc1emFYUnBiMjVNWldGMlpWUnBiV1Z2ZFhROWUzQmhjbk5sU1c1MEtITndaV1ZrTENBeE1DbDlYRzRnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdlM1JvYVhNdWNtVnVaR1Z5VUhKcGJXRnllU2dwZlZ4dUlDQWdJQ0FnSUNBZ0lEd3ZVbVZoWTNSRFUxTlVjbUZ1YzJsMGFXOXVSM0p2ZFhBK1hHNGdJQ0FnSUNBZ0lDa2dPaUFvWEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTV5Wlc1a1pYSlFjbWx0WVhKNUtDbGNiaUFnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNrN1hHNGdJSDFjYm4xY2JpSXNJbVY0Y0c5eWRDQjdJR1JsWm1GMWJIUWdmU0JtY205dElDY3VMMjFsZEdGdFlYTnJMWFJsYlhCc1lYUmxMWEpsYm1SbGNtVnlKenRjYm1WNGNHOXlkQ0I3SUZObFkzUnBiMjVUYUdGd1pTQjlJR1p5YjIwZ0p5NHZjMlZqZEdsdmJpMXphR0Z3WlNjN1hHNGlMQ0pwYlhCdmNuUWdVbVZoWTNRc0lIc2diV1Z0YnlCOUlHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0I3SUdselJYRjFZV3dnZlNCbWNtOXRJQ2RzYjJSaGMyZ25PMXh1YVcxd2IzSjBJSHNnYzJGbVpVTnZiWEJ2Ym1WdWRFeHBjM1FnZlNCbWNtOXRJQ2N1TDNOaFptVXRZMjl0Y0c5dVpXNTBMV3hwYzNRbk8xeHVhVzF3YjNKMElIc2dWbUZzYVdSRGFHbHNaSEpsYmlCOUlHWnliMjBnSnk0dmMyVmpkR2x2YmkxemFHRndaU2M3WEc1Y2JtWjFibU4wYVc5dUlHZGxkRVZzWlcxbGJuUW9jMlZqZEdsdmJpa2dlMXh1SUNCamIyNXpkQ0I3SUdWc1pXMWxiblFnZlNBOUlITmxZM1JwYjI0N1hHNGdJR052Ym5OMElFVnNaVzFsYm5RZ1BTQnpZV1psUTI5dGNHOXVaVzUwVEdsemRGdGxiR1Z0Wlc1MFhUdGNiaUFnYVdZZ0tDRkZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4dUlDQWdJQ0FnWUNSN1pXeGxiV1Z1ZEgwZ2FYTWdibTkwSUdsdUlIUm9aU0J6WVdabElHTnZiWEJ2Ym1WdWRDQnNhWE4wSUdadmNpQk5aWFJoVFdGemF5QjBaVzF3YkdGMFpTQnlaVzVrWlhKbGNtQXNYRzRnSUNBZ0tUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z1JXeGxiV1Z1ZER0Y2JuMWNibHh1WTI5dWMzUWdUV1YwWVUxaGMydFVaVzF3YkdGMFpWSmxibVJsY21WeUlEMGdLSHNnYzJWamRHbHZibk1nZlNrZ1BUNGdlMXh1SUNCcFppQW9JWE5sWTNScGIyNXpLU0I3WEc0Z0lDQWdMeThnU1dZZ2MyVmpkR2x2Ym5NZ2FYTWdiblZzYkNCbGFtVmpkQ0JsWVhKc2VTQmllU0J5WlhSMWNtNXBibWNnYm5Wc2JGeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJ6WldOMGFXOXVjeUE5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBdkx5QlNaV0ZqZENCallXNGdjbVZ1WkdWeUlITjBjbWx1WjNNZ1pHbHlaV04wYkhrc0lITnZJSEpsZEhWeWJpQjBhR1VnYzNSeWFXNW5YRzRnSUNBZ2NtVjBkWEp1SUhObFkzUnBiMjV6TzF4dUlDQjlJR1ZzYzJVZ2FXWWdLRnh1SUNBZ0lITmxZM1JwYjI1eklDWW1YRzRnSUNBZ2RIbHdaVzltSUhObFkzUnBiMjV6SUQwOVBTQW5iMkpxWldOMEp5QW1KbHh1SUNBZ0lDRkJjbkpoZVM1cGMwRnljbUY1S0hObFkzUnBiMjV6S1Z4dUlDQXBJSHRjYmlBZ0lDQXZMeUJKWmlCa1pXRnNhVzVuSUhkcGRHZ2dZU0J6YVc1bmJHVWdaVzUwY25rc0lIUm9aVzRnY21WdVpHVnlJR0VnYzJsdVoyeGxJRzlpYW1WamRDQjNhWFJvYjNWMElHdGxlVnh1SUNBZ0lHTnZibk4wSUVWc1pXMWxiblFnUFNCblpYUkZiR1Z0Wlc1MEtITmxZM1JwYjI1ektUdGNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnUEVWc1pXMWxiblFnZXk0dUxuTmxZM1JwYjI1ekxuQnliM0J6ZlQ1Y2JpQWdJQ0FnSUNBZ2UzUjVjR1Z2WmlCelpXTjBhVzl1Y3k1amFHbHNaSEpsYmlBOVBUMGdKMjlpYW1WamRDY2dQeUFvWEc0Z0lDQWdJQ0FnSUNBZ1BFMWxkR0ZOWVhOclZHVnRjR3hoZEdWU1pXNWtaWEpsY2lCelpXTjBhVzl1Y3oxN2MyVmpkR2x2Ym5NdVkyaHBiR1J5Wlc1OUlDOCtYRzRnSUNBZ0lDQWdJQ2tnT2lBb1hHNGdJQ0FnSUNBZ0lDQWdjMlZqZEdsdmJuTS9MbU5vYVd4a2NtVnVYRzRnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0E4TDBWc1pXMWxiblErWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVYRzRnSUM4dklGUm9aU0JzWVhOMElHTmhjMlVnYVhNZ1pHVmhiR2x1WnlCM2FYUm9JR0Z1SUdGeWNtRjVJRzltSUc5aWFtVmpkSE5jYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0E4UGx4dUlDQWdJQ0FnZTNObFkzUnBiMjV6TG5KbFpIVmpaU2dvWVd4c1EyaHBiR1J5Wlc0c0lHTm9hV3hrS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNoamFHbHNaRDh1YUdsa1pTQTlQVDBnZEhKMVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJoYkd4RGFHbHNaSEpsYmp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR05vYVd4a0lEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRkpsWVdOMElHTmhiaUJ5Wlc1a1pYSWdjM1J5YVc1bmN5QmthWEpsWTNSc2VTd2djMjhnY0hWemFDQjBhR1Z0SUdsdWRHOGdkR2hsSUdGalkzVnRkV3hoZEc5eVhHNGdJQ0FnSUNBZ0lDQWdZV3hzUTJocGJHUnlaVzR1Y0hWemFDaGphR2xzWkNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnU1dZZ2RHaGxJR1Z1ZEhKNUlHbHVJR0Z5Y21GNUlHbHpJRzV2ZENCaElITjBjbWx1Wnl3Z2RHaGxiaUJwZENCdGRYTjBJR0psSUdFZ1UyVmpkR2x2Ymk1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJUWldOMGFXOXVjeUJoY21VZ2FHRnVaR3hsWkNCaWVTQjBhR1VnYldGcGJpQm1kVzVqZEdsdmJpd2dZblYwSUcxMWMzUmNiaUFnSUNBZ0lDQWdJQ0F2THlCaVpTQndjbTkyYVdSbFpDQmhJR3RsZVNCM2FHVnVJR0VnY0dGeWRDQnZaaUJoYmlCaGNuSmhlUzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JV05vYVd4a0xtdGxlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBblYyaGxiaUIxYzJsdVp5QmhjbkpoZVNCemVXNTBZWGdnYVc0Z1RXVjBZVTFoYzJzZ1ZHVnRjR3hoZEdVZ1RHRnVaM1ZoWjJVc0lIbHZkU0J0ZFhOMElITndaV05wWm5rZ1lTQnJaWGtnWm05eUlHVmhZMmdnWTJocGJHUWdiMllnZEdobElHRnljbUY1Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWTJocGJHUS9MbU5vYVd4a2NtVnVJRDA5UFNBbmIySnFaV04wSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdkR2hwY3lCamFHbHNaQ0JvWVhNZ2FYUnpJRzkzYmlCamFHbHNaSEpsYml3Z1kyaGxZMnNnYVdZZ1kyaHBiR1J5Wlc0Z2FYTWdZVzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzlpYW1WamRDd2dZVzVrSUdsdUlIUm9ZWFFnWTJGelpTQjFjMlVnY21WamRYSnphVzl1SUhSdklISmxibVJsY2k1Y2JpQWdJQ0FnSUNBZ0lDQWdJR0ZzYkVOb2FXeGtjbVZ1TG5CMWMyZ29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeE5aWFJoVFdGemExUmxiWEJzWVhSbFVtVnVaR1Z5WlhJZ2MyVmpkR2x2Ym5NOWUyTm9hV3hrZlNCclpYazllMk5vYVd4a0xtdGxlWDBnTHo0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCUGRHaGxjbmRwYzJVZ2NtVnVaR1Z5SUhSb1pTQmxiR1Z0Wlc1MExseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdSV3hsYldWdWRDQTlJR2RsZEVWc1pXMWxiblFvWTJocGJHUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lXeHNRMmhwYkdSeVpXNHVjSFZ6YUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEVWc1pXMWxiblFnYTJWNVBYdGphR2xzWkM1clpYbDlJSHN1TGk1amFHbHNaQzV3Y205d2MzMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMk5vYVd4a1B5NWphR2xzWkhKbGJuMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BDOUZiR1Z0Wlc1MFBpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoYkd4RGFHbHNaSEpsYmp0Y2JpQWdJQ0FnSUgwc0lGdGRLWDFjYmlBZ0lDQThMejVjYmlBZ0tUdGNibjA3WEc1Y2JrMWxkR0ZOWVhOclZHVnRjR3hoZEdWU1pXNWtaWEpsY2k1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUhObFkzUnBiMjV6T2lCV1lXeHBaRU5vYVd4a2NtVnVMRnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ2JXVnRieWhOWlhSaFRXRnphMVJsYlhCc1lYUmxVbVZ1WkdWeVpYSXNJQ2h3Y21WMlVISnZjSE1zSUc1bGVIUlFjbTl3Y3lrZ1BUNGdlMXh1SUNCeVpYUjFjbTRnYVhORmNYVmhiQ2h3Y21WMlVISnZjSE11YzJWamRHbHZibk1zSUc1bGVIUlFjbTl3Y3k1elpXTjBhVzl1Y3lrN1hHNTlLVHRjYmlJc0ltbHRjRzl5ZENCQ2RYUjBiMjRnWm5KdmJTQW5MaTR2TGk0dmRXa3ZZblYwZEc5dUp6dGNibWx0Y0c5eWRDQkRhR2x3SUdaeWIyMGdKeTR1THk0dUwzVnBMMk5vYVhBbk8xeHVhVzF3YjNKMElFUmxabWx1YVhScGIyNU1hWE4wSUdaeWIyMGdKeTR1THk0dUwzVnBMMlJsWm1sdWFYUnBiMjR0YkdsemRDYzdYRzVwYlhCdmNuUWdWSEoxYm1OaGRHVmtSR1ZtYVc1cGRHbHZia3hwYzNRZ1puSnZiU0FuTGk0dkxpNHZkV2t2ZEhKMWJtTmhkR1ZrTFdSbFptbHVhWFJwYjI0dGJHbHpkQ2M3WEc1cGJYQnZjblFnVUc5d2IzWmxjaUJtY205dElDY3VMaTh1TGk5MWFTOXdiM0J2ZG1WeUp6dGNibWx0Y0c5eWRDQlVlWEJ2WjNKaGNHaDVJR1p5YjIwZ0p5NHVMeTR1TDNWcEwzUjVjRzluY21Gd2FIa25PMXh1YVcxd2IzSjBJRUp2ZUNCbWNtOXRJQ2N1TGk4dUxpOTFhUzlpYjNnbk8xeHVhVzF3YjNKMElFMWxkR0ZOWVhOclZISmhibk5zWVhScGIyNGdabkp2YlNBbkxpNHZiV1YwWVcxaGMyc3RkSEpoYm5Oc1lYUnBiMjRuTzF4dWFXMXdiM0owSUU1bGRIZHZjbXRFYVhOd2JHRjVJR1p5YjIwZ0p5NHVMMjVsZEhkdmNtc3RaR2x6Y0d4aGVTYzdYRzVwYlhCdmNuUWdWR1Y0ZEVGeVpXRWdabkp2YlNBbkxpNHZMaTR2ZFdrdmRHVjRkR0Z5WldFdmRHVjRkR0Z5WldFbk8xeHVhVzF3YjNKMElGUmxlSFJHYVdWc1pDQm1jbTl0SUNjdUxpOHVMaTkxYVM5MFpYaDBMV1pwWld4a0p6dGNibWx0Y0c5eWRDQkRiMjVtYVhKdFlYUnBiMjVPWlhSM2IzSnJVM2RwZEdOb0lHWnliMjBnSnk0dUx5NHVMeTR1TDNCaFoyVnpMMk52Ym1acGNtMWhkR2x2Ymk5amIyMXdiMjVsYm5SekwyTnZibVpwY20xaGRHbHZiaTF1WlhSM2IzSnJMWE4zYVhSamFDYzdYRzVwYlhCdmNuUWdWWEpzU1dOdmJpQm1jbTl0SUNjdUxpOHVMaTkxYVM5MWNtd3RhV052YmljN1hHNXBiWEJ2Y25RZ1ZHOXZiSFJwY0NCbWNtOXRJQ2N1TGk4dUxpOTFhUzkwYjI5c2RHbHdMM1J2YjJ4MGFYQW5PMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdjMkZtWlVOdmJYQnZibVZ1ZEV4cGMzUWdQU0I3WEc0Z0lHRTZJQ2RoSnl4Y2JpQWdZam9nSjJJbkxGeHVJQ0JwT2lBbmFTY3NYRzRnSUhBNklDZHdKeXhjYmlBZ1pHbDJPaUFuWkdsMkp5eGNiaUFnYzNCaGJqb2dKM053WVc0bkxGeHVJQ0JDYjNnc1hHNGdJRUoxZEhSdmJpeGNiaUFnUTJocGNDeGNiaUFnUTI5dVptbHliV0YwYVc5dVRtVjBkMjl5YTFOM2FYUmphQ3hjYmlBZ1JHVm1hVzVwZEdsdmJreHBjM1FzWEc0Z0lFMWxkR0ZOWVhOclZISmhibk5zWVhScGIyNHNYRzRnSUU1bGRIZHZjbXRFYVhOd2JHRjVMRnh1SUNCUWIzQnZkbVZ5TEZ4dUlDQlVaWGgwUVhKbFlTeGNiaUFnVkdWNGRFWnBaV3hrTEZ4dUlDQlViMjlzZEdsd0xGeHVJQ0JVY25WdVkyRjBaV1JFWldacGJtbDBhVzl1VEdsemRDeGNiaUFnVkhsd2IyZHlZWEJvZVN4Y2JpQWdWWEpzU1dOdmJpeGNibjA3WEc0aUxDSnBiWEJ2Y25RZ1VISnZjRlI1Y0dWeklHWnliMjBnSjNCeWIzQXRkSGx3WlhNbk8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1UyVmpkR2x2YmxOb1lYQmxJRDBnZTF4dUlDQndjbTl3Y3pvZ1VISnZjRlI1Y0dWekxtOWlhbVZqZEN4Y2JpQWdaV3hsYldWdWREb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnYTJWNU9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVmVHRjYmx4dVpYaHdiM0owSUdOdmJuTjBJRlpoYkdsa1EyaHBiR1J5Wlc0Z1BTQlFjbTl3Vkhsd1pYTXViMjVsVDJaVWVYQmxLRnRjYmlBZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdVSEp2Y0ZSNWNHVnpMbk5vWVhCbEtGTmxZM1JwYjI1VGFHRndaU2tzWEc0Z0lGQnliM0JVZVhCbGN5NWhjbkpoZVU5bUtGeHVJQ0FnSUZCeWIzQlVlWEJsY3k1dmJtVlBabFI1Y0dVb1cxQnliM0JVZVhCbGN5NXphR0Z3WlNoVFpXTjBhVzl1VTJoaGNHVXBMQ0JRY205d1ZIbHdaWE11YzNSeWFXNW5YU2tzWEc0Z0lDa3NYRzVkS1R0Y2JseHVVMlZqZEdsdmJsTm9ZWEJsTG1Ob2FXeGtjbVZ1SUQwZ1ZtRnNhV1JEYUdsc1pISmxianRjYmlJc0ltVjRjRzl5ZENCN0lHUmxabUYxYkhRZ2ZTQm1jbTl0SUNjdUwyMWxkR0Z0WVhOckxYUnlZVzV6YkdGMGFXOXVKenRjYmlJc0ltbHRjRzl5ZENCU1pXRmpkQ0JtY205dElDZHlaV0ZqZENjN1hHNXBiWEJ2Y25RZ1VISnZjRlI1Y0dWeklHWnliMjBnSjNCeWIzQXRkSGx3WlhNbk8xeHVhVzF3YjNKMElIc2dkWE5sU1RFNGJrTnZiblJsZUhRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5b2IyOXJjeTkxYzJWSk1UaHVRMjl1ZEdWNGRDYzdYRzVwYlhCdmNuUWdUV1YwWVUxaGMydFVaVzF3YkdGMFpWSmxibVJsY21WeUlHWnliMjBnSnk0dUwyMWxkR0Z0WVhOckxYUmxiWEJzWVhSbExYSmxibVJsY21WeUp6dGNibWx0Y0c5eWRDQjdJRk5sWTNScGIyNVRhR0Z3WlNCOUlHWnliMjBnSnk0dUwyMWxkR0Z0WVhOckxYUmxiWEJzWVhSbExYSmxibVJsY21WeUwzTmxZM1JwYjI0dGMyaGhjR1VuTzF4dVhHNHZLaXBjYmlBcUlFMWxkR0ZOWVhOclZISmhibk5zWVhScGIyNGdhWE1nWVNCemFXMXdiR1VnYUdWc2NHVnlJR052YlhCdmJtVnVkQ0JtYjNJZ1lXUmthVzVuSUdaMWJHd2dkSEpoYm5Oc1lYUnBiMjVjYmlBcUlITjFjSEJ2Y25RZ2RHOGdkR2hsSUhSbGJYQnNZWFJsSUhONWMzUmxiUzRnVjJVZ1pHOGdjR0Z6Y3lCMGFHVWdkSEpoYm5Oc1lYUnBiMjRnWm5WdVkzUnBiMjRnZEc4Z2RHaGxYRzRnS2lCMFpXMXdiR0YwWlNCblpYUldZV3gxWlhNZ1puVnVZM1JwYjI0c0lHSjFkQ0J3WVhOemFXNW5JR2wwSUZKbFlXTjBJR052YlhCdmJtVnVkSE1nWVhNZ2RtRnlhV0ZpYkdWelhHNGdLaUIzYjNWc1pDQnlaWEYxYVhKbElGSmxZV04wSUhSdklHSmxJR2x1SUhOamIzQmxMQ0JoYm1RZ1luSmxZV3R6SUhSb1pTQnZZbXBsWTNRZ2NHRjBkR1Z5YmlCd1lYSmhaR2xuYlM1Y2JpQXFYRzRnS2lCVWFHbHpJR052YlhCdmJtVnVkQ0JuWlhSeklHRnliM1Z1WkNCMGFHRjBJR0o1SUdOdmJuWmxjblJwYm1jZ2RtRnlhV0ZpYkdWeklIUm9ZWFFnWVhKbElIUmxiWEJzWVhSbGMxeHVJQ29nZEdobGJYTmxiSFpsY3lCcGJuUnZJSFJwYm5rZ1VtVmhZM1FnZEhKbFpYTXVJRlJvYVhNZ1kyOXRjRzl1Wlc1MElHUnZaWE1nWVdSa2FYUnBiMjVoYkNCMllXeHBaR0YwYVc5dVhHNGdLaUIwYnlCdFlXdGxJSE4xY21VZ2RHaGhkQ0IwYUdVZ2RISmxaU0JvWVhNZ1lTQnphVzVuYkdVZ2NtOXZkQ0J1YjJSbExDQjNhWFJvSUcxaGVHbHRkVzBnZEhkdklHeGxZWFpsY3k1Y2JpQXFJRVZoWTJnZ2MzVmlibTlrWlNCallXNGdhR0YyWlNCaElHMWhlR2x0ZFcwZ2IyWWdiMjVsSUdOb2FXeGtJSFJvWVhRZ2JYVnpkQ0JpWlNCaElITjBjbWx1Wnk1Y2JpQXFYRzRnS2lCVWFHbHpJR1Z1Wm05eVkyVnpJR0VnYldGNGFXMTFiU0J5WldOMWNuTnBiMjRnWkdWd2RHZ2diMllnTWl3Z2NISmxkbVZ1ZEdsdVp5QjBjbUZ1YzJ4aGRHbHZiaUJ6ZEhKcGJtZHpYRzRnS2lCbWNtOXRJR0psYVc1bklIQmxjbVp2Y20xaGJtTmxJR2h2WjNNdUlGZGxJR052ZFd4a0lHWjFjblJvWlhJZ2JHbHRhWFFnZEdocGN5d2dZVzVrSUdGc2MyOGdZWFIwWlc1MVlYUmxYRzRnS2lCMGFHVWdjMkZtWlVOdmJYQnZibVZ1ZEV4cGMzUWdabTl5SUhkb1lYUWdhMmx1WkNCdlppQmpiMjF3YjI1bGJuUnpJSGRsSUdGc2JHOTNJSFJvWlhObElITndaV05wWVd4Y2JpQXFJSFJ5WldWeklIUnZJR052Ym5SaGFXNHVYRzRnS2x4dUlDb2dRSEJoY21GdElHOXdkR2x2Ym5OY2JpQXFJRUJ3WVhKaGJTQnZjSFJwYjI1ekxuUnlZVzV6YkdGMGFXOXVTMlY1WEc0Z0tpQkFjR0Z5WVcwZ2IzQjBhVzl1Y3k1MllYSnBZV0pzWlhOY2JpQXFMMXh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdUV1YwWVUxaGMydFVjbUZ1YzJ4aGRHbHZiaWg3SUhSeVlXNXpiR0YwYVc5dVMyVjVMQ0IyWVhKcFlXSnNaWE1nZlNrZ2UxeHVJQ0JqYjI1emRDQjBJRDBnZFhObFNURTRia052Ym5SbGVIUW9LVHRjYmx4dUlDQnlaWFIxY200Z2RDaGNiaUFnSUNCMGNtRnVjMnhoZEdsdmJrdGxlU3hjYmlBZ0lDQjJZWEpwWVdKc1pYTS9MbTFoY0Nnb2RtRnlhV0ZpYkdVcElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ2RIbHdaVzltSUhaaGNtbGhZbXhsSUQwOVBTQW5iMkpxWldOMEp5QW1KbHh1SUNBZ0lDQWdJQ0FoUVhKeVlYa3VhWE5CY25KaGVTaDJZWEpwWVdKc1pTa2dKaVpjYmlBZ0lDQWdJQ0FnZG1GeWFXRmliR1V1Wld4bGJXVnVkRnh1SUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkbUZ5YVdGaWJHVXVhMlY1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnWUZkb1pXNGdkWE5wYm1jZ1RXVjBZVTFoYzJzZ1ZHVnRjR3hoZEdVZ1RHRnVaM1ZoWjJVZ2FXNGdZU0JOWlhSaFRXRnphMVJ5WVc1emJHRjBhVzl1SUhaaGNtbGhZbXhsTENCNWIzVWdiWFZ6ZENCd2NtOTJhV1JsSUdFZ2EyVjVJR1p2Y2lCMGFHVWdjMlZqZEdsdmJpQnlaV2RoY21Sc1pYTnpJRzltSUhONWJuUmhlQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lGTmxZM1JwYjI0Z2QybDBhQ0JsYkdWdFpXNTBJQ2NrZTNaaGNtbGhZbXhsTG1Wc1pXMWxiblI5SnlCbWIzSWdkSEpoYm5Oc1lYUnBiMjVMWlhrNklDY2tlM1J5WVc1emJHRjBhVzl1UzJWNWZTY2dhR0Z6SUc1dklHdGxlU0J3Y205d1pYSjBlV0FzWEc0Z0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5YVdGaWJHVXVZMmhwYkdSeVpXNGdKaVpjYmlBZ0lDQWdJQ0FnSUNCQmNuSmhlUzVwYzBGeWNtRjVLSFpoY21saFlteGxMbU5vYVd4a2NtVnVLU0FtSmx4dUlDQWdJQ0FnSUNBZ0lIWmhjbWxoWW14bExtTm9hV3hrY21WdUxteGxibWQwYUNBK0lESmNiaUFnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdKMDFsZEdGTllYTnJWSEpoYm5Oc1lYUnBiMjRnYjI1c2VTQnlaVzVrWlhKeklIUmxiWEJzWVhSbGN5QjNhWFJvSUdFZ2MybHVaMnhsSUhObFkzUnBiMjRnWVc1a0lHMWhlR2x0ZFcwZ2RIZHZJR05vYVd4a2NtVnVKeXhjYmlBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRnh1SUNBZ0lDQWdJQ0FnSUNoMllYSnBZV0pzWlM1amFHbHNaSEpsYmo4dVd6QmRQeTVqYUdsc1pISmxiaUFoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxiMllnZG1GeWFXRmliR1V1WTJocGJHUnlaVzViTUYwdVkyaHBiR1J5Wlc0Z0lUMDlJQ2R6ZEhKcGJtY25LU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDaDJZWEpwWVdKc1pTNWphR2xzWkhKbGJqOHVXekZkUHk1amFHbHNaSEpsYmlBaFBUMGdkVzVrWldacGJtVmtJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsYjJZZ2RtRnlhV0ZpYkdVdVkyaHBiR1J5Wlc1Yk1WMHVZMmhwYkdSeVpXNGdJVDA5SUNkemRISnBibWNuS1Z4dUlDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBblRXVjBZVTFoYzJ0VWNtRnVjMnhoZEdsdmJpQmtiMlZ6SUc1dmRDQmhiR3h2ZHlCbWIzSWdZMjl0Y0c5dVpXNTBJSFJ5WldWeklHOW1JRzV2YmlCMGNtbDJhV0ZzSUdSbGNIUm9KeXhjYmlBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJQ0FnUEUxbGRHRk5ZWE5yVkdWdGNHeGhkR1ZTWlc1a1pYSmxjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVQWHRnSkh0MGNtRnVjMnhoZEdsdmJrdGxlWDB0Skh0MllYSnBZV0pzWlM1clpYbDlZSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxZM1JwYjI1elBYdDJZWEpwWVdKc1pYMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhaaGNtbGhZbXhsTzF4dUlDQWdJSDBwTEZ4dUlDQXBPMXh1ZlZ4dVhHNU5aWFJoVFdGemExUnlZVzV6YkdGMGFXOXVMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdMeW9xWEc0Z0lDQXFJRlJ5WVc1emJHRjBhVzl1SUc5aWFtVmpkQ0JyWlhsY2JpQWdJQ292WEc0Z0lIUnlZVzV6YkdGMGFXOXVTMlY1T2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTG1selVtVnhkV2x5WldRc1hHNGdJQzhxS2x4dUlDQWdLaUJCY25KaGVTQnZaaUIyWVhKcFlXSnNaWE1nWm05eUlIUm9aU0JOWlhSaFRXRnphMVJ5WVc1emJHRjBhVzl1SUdOdmJYQnZibVZ1ZEZ4dUlDQWdLaTljYmlBZ2RtRnlhV0ZpYkdWek9pQlFjbTl3Vkhsd1pYTXVZWEp5WVhsUFppaGNiaUFnSUNCUWNtOXdWSGx3WlhNdWIyNWxUMlpVZVhCbEtGdGNiaUFnSUNBZ0lGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnSUNCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TEZ4dUlDQWdJQ0FnVUhKdmNGUjVjR1Z6TG5Ob1lYQmxLRk5sWTNScGIyNVRhR0Z3WlNrc1hHNGdJQ0FnWFNrc1hHNGdJQ2tzWEc1OU8xeHVJaXdpWlhod2IzSjBJSHNnWkdWbVlYVnNkQ0I5SUdaeWIyMGdKeTR2Ylc5a1lXd3VZMjl0Y0c5dVpXNTBKenRjYm1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnWVhNZ1RXOWtZV3hEYjI1MFpXNTBJSDBnWm5KdmJTQW5MaTl0YjJSaGJDMWpiMjUwWlc1MEp6dGNiaUlzSW1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnZlNCbWNtOXRJQ2N1TDIxdlpHRnNMV052Ym5SbGJuUXVZMjl0Y0c5dVpXNTBKenRjYmlJc0ltbHRjRzl5ZENCU1pXRmpkQ3dnZXlCUWRYSmxRMjl0Y0c5dVpXNTBJSDBnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1RXOWtZV3hEYjI1MFpXNTBJR1Y0ZEdWdVpITWdVSFZ5WlVOdmJYQnZibVZ1ZENCN1hHNGdJSE4wWVhScFl5QndjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lDQWdkR2wwYkdVNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnWkdWelkzSnBjSFJwYjI0NklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJSDA3WEc1Y2JpQWdjbVZ1WkdWeUtDa2dlMXh1SUNBZ0lHTnZibk4wSUhzZ2RHbDBiR1VzSUdSbGMyTnlhWEIwYVc5dUlIMGdQU0IwYUdsekxuQnliM0J6TzF4dVhHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2liVzlrWVd3dFkyOXVkR1Z1ZEZ3aVBseHVJQ0FnSUNBZ0lDQjdkR2wwYkdVZ1B5QThaR2wySUdOc1lYTnpUbUZ0WlQxY0ltMXZaR0ZzTFdOdmJuUmxiblJmWDNScGRHeGxYQ0krZTNScGRHeGxmVHd2WkdsMlBpQTZJRzUxYkd4OVhHNGdJQ0FnSUNBZ0lIdGtaWE5qY21sd2RHbHZiaUFtSmlBb1hHNGdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSnRiMlJoYkMxamIyNTBaVzUwWDE5a1pYTmpjbWx3ZEdsdmJsd2lQbnRrWlhOamNtbHdkR2x2Ym4wOEwyUnBkajVjYmlBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDazdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0JTWldGamRDd2dleUJRZFhKbFEyOXRjRzl1Wlc1MElIMGdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCamJHRnpjMjVoYldWeklHWnliMjBnSjJOc1lYTnpibUZ0WlhNbk8xeHVhVzF3YjNKMElFSjFkSFJ2YmlCbWNtOXRJQ2N1TGk4dUxpOTFhUzlpZFhSMGIyNG5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5Qk5iMlJoYkNCbGVIUmxibVJ6SUZCMWNtVkRiMjF3YjI1bGJuUWdlMXh1SUNCemRHRjBhV01nY0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUdOb2FXeGtjbVZ1T2lCUWNtOXdWSGx3WlhNdWJtOWtaU3hjYmlBZ0lDQmpiMjUwWlc1MFEyeGhjM002SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdZMjl1ZEdGcGJtVnlRMnhoYzNNNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnTHk4Z1NHVmhaR1Z5SUhSbGVIUmNiaUFnSUNCb1pXRmtaWEpVWlhoME9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUc5dVEyeHZjMlU2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lDOHZJRk4xWW0xcGRDQmlkWFIwYjI0Z0tISnBaMmgwSUdKMWRIUnZiaWxjYmlBZ0lDQnZibE4xWW0xcGREb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnYzNWaWJXbDBWSGx3WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0J6ZFdKdGFYUlVaWGgwT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJSE4xWW0xcGRFUnBjMkZpYkdWa09pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0JvYVdSbFJtOXZkR1Z5T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQXZMeUJEWVc1alpXd2dZblYwZEc5dUlDaHNaV1owSUdKMWRIUnZiaWxjYmlBZ0lDQnZia05oYm1ObGJEb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnWTJGdVkyVnNWSGx3WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JqWVc1alpXeFVaWGgwT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQjlPMXh1WEc0Z0lITjBZWFJwWXlCa1pXWmhkV3gwVUhKdmNITWdQU0I3WEc0Z0lDQWdjM1ZpYldsMFZIbHdaVG9nSjNCeWFXMWhjbmtuTEZ4dUlDQWdJR05oYm1ObGJGUjVjR1U2SUNkelpXTnZibVJoY25rbkxGeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNCamFHbHNaSEpsYml4Y2JpQWdJQ0FnSUdobFlXUmxjbFJsZUhRc1hHNGdJQ0FnSUNCdmJrTnNiM05sTEZ4dUlDQWdJQ0FnYjI1VGRXSnRhWFFzWEc0Z0lDQWdJQ0J6ZFdKdGFYUlVlWEJsTEZ4dUlDQWdJQ0FnYzNWaWJXbDBWR1Y0ZEN4Y2JpQWdJQ0FnSUhOMVltMXBkRVJwYzJGaWJHVmtMRnh1SUNBZ0lDQWdiMjVEWVc1alpXd3NYRzRnSUNBZ0lDQmpZVzVqWld4VWVYQmxMRnh1SUNBZ0lDQWdZMkZ1WTJWc1ZHVjRkQ3hjYmlBZ0lDQWdJR052Ym5SbGJuUkRiR0Z6Y3l4Y2JpQWdJQ0FnSUdOdmJuUmhhVzVsY2tOc1lYTnpMRnh1SUNBZ0lDQWdhR2xrWlVadmIzUmxjaXhjYmlBZ0lDQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JseHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMTdZMnhoYzNOdVlXMWxjeWduYlc5a1lXd3RZMjl1ZEdGcGJtVnlKeXdnWTI5dWRHRnBibVZ5UTJ4aGMzTXBmVDVjYmlBZ0lDQWdJQ0FnZTJobFlXUmxjbFJsZUhRZ0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpYlc5a1lXd3RZMjl1ZEdGcGJtVnlYMTlvWldGa1pYSmNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWJXOWtZV3d0WTI5dWRHRnBibVZ5WDE5b1pXRmtaWEl0ZEdWNGRGd2lQbnRvWldGa1pYSlVaWGgwZlR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0p0YjJSaGJDMWpiMjUwWVdsdVpYSmZYMmhsWVdSbGNpMWpiRzl6WlZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRXRkR1Z6ZEdsa1BWd2liVzlrWVd3dGFHVmhaR1Z5TFdOc2IzTmxYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVEYkdsamF6MTdiMjVEYkc5elpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBYdGpiR0Z6YzI1aGJXVnpLQ2R0YjJSaGJDMWpiMjUwWVdsdVpYSmZYMk52Ym5SbGJuUW5MQ0JqYjI1MFpXNTBRMnhoYzNNcGZUNWNiaUFnSUNBZ0lDQWdJQ0I3WTJocGJHUnlaVzU5WEc0Z0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0I3YUdsa1pVWnZiM1JsY2lBL0lHNTFiR3dnT2lBb1hHNGdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSnRiMlJoYkMxamIyNTBZV2x1WlhKZlgyWnZiM1JsY2x3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnZTI5dVEyRnVZMlZzSUNZbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BFSjFkSFJ2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTllMk5oYm1ObGJGUjVjR1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjI1RGJHbGphejE3YjI1RFlXNWpaV3g5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aWJXOWtZV3d0WTI5dWRHRnBibVZ5WDE5bWIyOTBaWEl0WW5WMGRHOXVYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRqWVc1alpXeFVaWGgwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDBKMWRIUnZiajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQWdJQ0FnSUNBOFFuVjBkRzl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVOWUzTjFZbTFwZEZSNWNHVjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWUyOXVVM1ZpYldsMGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTmhZbXhsWkQxN2MzVmliV2wwUkdsellXSnNaV1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW0xdlpHRnNMV052Ym5SaGFXNWxjbDlmWm05dmRHVnlMV0oxZEhSdmJsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUh0emRXSnRhWFJVWlhoMGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5Q2RYUjBiMjQrWEc0Z0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQXBPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnVW1WaFkzUXNJSHNnUTI5dGNHOXVaVzUwSUgwZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0I3SUdkbGRFRmpZMjkxYm5STWFXNXJJSDBnWm5KdmJTQW5RRzFsZEdGdFlYTnJMMlYwYUdWeWMyTmhiaTFzYVc1ckp6dGNibHh1YVcxd2IzSjBJRUZqWTI5MWJuUk5iMlJoYkVOdmJuUmhhVzVsY2lCbWNtOXRJQ2N1TGk5aFkyTnZkVzUwTFcxdlpHRnNMV052Ym5SaGFXNWxjaWM3WEc1cGJYQnZjblFnVVhKV2FXVjNJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMM0Z5TFdOdlpHVW5PMXh1YVcxd2IzSjBJRVZrYVhSaFlteGxUR0ZpWld3Z1puSnZiU0FuTGk0dkxpNHZMaTR2ZFdrdlpXUnBkR0ZpYkdVdGJHRmlaV3duTzF4dWFXMXdiM0owSUVKMWRIUnZiaUJtY205dElDY3VMaTh1TGk4dUxpOTFhUzlpZFhSMGIyNG5PMXh1YVcxd2IzSjBJSHNnWjJWMFZWSk1TRzl6ZEU1aGJXVWdmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTlvWld4d1pYSnpMM1YwYVd4ekwzVjBhV3duTzF4dWFXMXdiM0owSUhzZ2FYTklZWEprZDJGeVpVdGxlWEpwYm1jZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOW9aV3h3WlhKekwzVjBhV3h6TDJoaGNtUjNZWEpsSnp0Y2JtbHRjRzl5ZENCN1hHNGdJRTFsZEdGTlpYUnlhV056UlhabGJuUkRZWFJsWjI5eWVTeGNiaUFnVFdWMFlVMWxkSEpwWTNORmRtVnVkRXhwYm10VWVYQmxMRnh1SUNCTlpYUmhUV1YwY21samMwVjJaVzUwUzJWNVZIbHdaU3hjYmlBZ1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEU1aGJXVXNYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmJXVjBZVzFsZEhKcFkzTW5PMXh1YVcxd2IzSjBJSHNnVGtWVVYwOVNTMU5mVWs5VlZFVWdmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTlvWld4d1pYSnpMMk52Ym5OMFlXNTBjeTl5YjNWMFpYTW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QkJZMk52ZFc1MFJHVjBZV2xzYzAxdlpHRnNJR1Y0ZEdWdVpITWdRMjl0Y0c5dVpXNTBJSHRjYmlBZ2MzUmhkR2xqSUhCeWIzQlVlWEJsY3lBOUlIdGNiaUFnSUNCelpXeGxZM1JsWkVsa1pXNTBhWFI1T2lCUWNtOXdWSGx3WlhNdWIySnFaV04wTEZ4dUlDQWdJR05vWVdsdVNXUTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2MyaHZkMFY0Y0c5eWRGQnlhWFpoZEdWTFpYbE5iMlJoYkRvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdjMlYwUVdOamIzVnVkRXhoWW1Wc09pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0JyWlhseWFXNW5jem9nVUhKdmNGUjVjR1Z6TG1GeWNtRjVMRnh1SUNBZ0lISndZMUJ5Wldaek9pQlFjbTl3Vkhsd1pYTXViMkpxWldOMExGeHVJQ0FnSUdGalkyOTFiblJ6T2lCUWNtOXdWSGx3WlhNdVlYSnlZWGtzWEc0Z0lDQWdhR2x6ZEc5eWVUb2dVSEp2Y0ZSNWNHVnpMbTlpYW1WamRDeGNiaUFnSUNCb2FXUmxUVzlrWVd3NklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJR0pzYjJOclJYaHdiRzl5WlhKTWFXNXJWR1Y0ZERvZ1VISnZjRlI1Y0dWekxtOWlhbVZqZEN4Y2JpQWdmVHRjYmx4dUlDQnpkR0YwYVdNZ1kyOXVkR1Y0ZEZSNWNHVnpJRDBnZTF4dUlDQWdJSFE2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lIUnlZV05yUlhabGJuUTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNCelpXeGxZM1JsWkVsa1pXNTBhWFI1TEZ4dUlDQWdJQ0FnWTJoaGFXNUpaQ3hjYmlBZ0lDQWdJSE5vYjNkRmVIQnZjblJRY21sMllYUmxTMlY1VFc5a1lXd3NYRzRnSUNBZ0lDQnpaWFJCWTJOdmRXNTBUR0ZpWld3c1hHNGdJQ0FnSUNCclpYbHlhVzVuY3l4Y2JpQWdJQ0FnSUhKd1kxQnlaV1p6TEZ4dUlDQWdJQ0FnYUdsemRHOXllU3hjYmlBZ0lDQWdJR2hwWkdWTmIyUmhiQ3hjYmlBZ0lDQWdJR0pzYjJOclJYaHdiRzl5WlhKTWFXNXJWR1Y0ZEN4Y2JpQWdJQ0I5SUQwZ2RHaHBjeTV3Y205d2N6dGNiaUFnSUNCamIyNXpkQ0I3SUc1aGJXVXNJR0ZrWkhKbGMzTWdmU0E5SUhObGJHVmpkR1ZrU1dSbGJuUnBkSGs3WEc1Y2JpQWdJQ0JqYjI1emRDQnJaWGx5YVc1bklEMGdhMlY1Y21sdVozTXVabWx1WkNnb2EzSXBJRDArSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJyY2k1aFkyTnZkVzUwY3k1cGJtTnNkV1JsY3loaFpHUnlaWE56S1R0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUd4bGRDQmxlSEJ2Y25SUWNtbDJZWFJsUzJWNVJtVmhkSFZ5WlVWdVlXSnNaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDOHZJRlJvYVhNZ1ptVmhkSFZ5WlNCcGN5QmthWE5oWW14bFpDQm1iM0lnYUdGeVpIZGhjbVVnZDJGc2JHVjBjMXh1SUNBZ0lHbG1JQ2hwYzBoaGNtUjNZWEpsUzJWNWNtbHVaeWhyWlhseWFXNW5QeTUwZVhCbEtTa2dlMXh1SUNBZ0lDQWdaWGh3YjNKMFVISnBkbUYwWlV0bGVVWmxZWFIxY21WRmJtRmliR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdmVnh1WEc1Y2JpQWdJQ0JqYjI1emRDQnliM1YwWlZSdlFXUmtRbXh2WTJ0RmVIQnNiM0psY2xWeWJDQTlJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lHaHBaR1ZOYjJSaGJDZ3BPMXh1SUNBZ0lDQWdhR2x6ZEc5eWVTNXdkWE5vS0dBa2UwNUZWRmRQVWt0VFgxSlBWVlJGZlNOaWJHOWphMFY0Y0d4dmNtVnlWWEpzWUNrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdOdmJuTjBJRzl3Wlc1Q2JHOWphMFY0Y0d4dmNtVnlJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzNRZ1lXTmpiM1Z1ZEV4cGJtc2dQU0JuWlhSQlkyTnZkVzUwVEdsdWF5aGhaR1J5WlhOekxDQmphR0ZwYmtsa0xDQnljR05RY21WbWN5azdYRzRnSUNBZ0lDQjBhR2x6TG1OdmJuUmxlSFF1ZEhKaFkydEZkbVZ1ZENoN1hHNGdJQ0FnSUNBZ0lHTmhkR1ZuYjNKNU9pQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rdVRtRjJhV2RoZEdsdmJpeGNiaUFnSUNBZ0lDQWdaWFpsYm5RNklFMWxkR0ZOWlhSeWFXTnpSWFpsYm5ST1lXMWxMa1Y0ZEdWeWJtRnNUR2x1YTBOc2FXTnJaV1FzWEc0Z0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0JzYVc1clgzUjVjR1U2SUUxbGRHRk5aWFJ5YVdOelJYWmxiblJNYVc1clZIbHdaUzVCWTJOdmRXNTBWSEpoWTJ0bGNpeGNiaUFnSUNBZ0lDQWdJQ0JzYjJOaGRHbHZiam9nSjBGalkyOTFiblFnUkdWMFlXbHNjeUJOYjJSaGJDY3NYRzRnSUNBZ0lDQWdJQ0FnZFhKc1gyUnZiV0ZwYmpvZ1oyVjBWVkpNU0c5emRFNWhiV1VvWVdOamIzVnVkRXhwYm1zcExGeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0JuYkc5aVlXd3VjR3hoZEdadmNtMHViM0JsYmxSaFlpaDdYRzRnSUNBZ0lDQWdJSFZ5YkRvZ1lXTmpiM1Z1ZEV4cGJtc3NYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lEeEJZMk52ZFc1MFRXOWtZV3hEYjI1MFlXbHVaWElnWTJ4aGMzTk9ZVzFsUFZ3aVlXTmpiM1Z1ZEMxa1pYUmhhV3h6TFcxdlpHRnNYQ0krWEc0Z0lDQWdJQ0FnSUR4RlpHbDBZV0pzWlV4aFltVnNYRzRnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aVlXTmpiM1Z1ZEMxa1pYUmhhV3h6TFcxdlpHRnNYMTl1WVcxbFhDSmNiaUFnSUNBZ0lDQWdJQ0JrWldaaGRXeDBWbUZzZFdVOWUyNWhiV1Y5WEc0Z0lDQWdJQ0FnSUNBZ2IyNVRkV0p0YVhROWV5aHNZV0psYkNrZ1BUNGdjMlYwUVdOamIzVnVkRXhoWW1Wc0tHRmtaSEpsYzNNc0lHeGhZbVZzS1gxY2JpQWdJQ0FnSUNBZ0lDQmhZMk52ZFc1MGN6MTdkR2hwY3k1d2NtOXdjeTVoWTJOdmRXNTBjMzFjYmlBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRHhSY2xacFpYZGNiaUFnSUNBZ0lDQWdJQ0JSY2oxN2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlUb2dZV1JrY21WemN5eGNiaUFnSUNBZ0lDQWdJQ0I5ZlZ4dUlDQWdJQ0FnSUNBdlBseHVYRzRnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2lZV05qYjNWdWRDMWtaWFJoYVd4ekxXMXZaR0ZzWDE5a2FYWnBaR1Z5WENJZ0x6NWNibHh1SUNBZ0lDQWdJQ0E4UW5WMGRHOXVYRzRnSUNBZ0lDQWdJQ0FnZEhsd1pUMWNJbk5sWTI5dVpHRnllVndpWEc0Z0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2lZV05qYjNWdWRDMWtaWFJoYVd4ekxXMXZaR0ZzWDE5aWRYUjBiMjVjSWx4dUlDQWdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWUxeHVJQ0FnSUNBZ0lDQWdJQ0FnWW14dlkydEZlSEJzYjNKbGNreHBibXRVWlhoMExtWnBjbk4wVUdGeWRDQTlQVDBnSjJGa1pFSnNiMk5yUlhod2JHOXlaWEluWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRDhnY205MWRHVlViMEZrWkVKc2IyTnJSWGh3Ykc5eVpYSlZjbXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJ2Y0dWdVFteHZZMnRGZUhCc2IzSmxjbHh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJSHQwYUdsekxtTnZiblJsZUhRdWRDaGliRzlqYTBWNGNHeHZjbVZ5VEdsdWExUmxlSFF1Wm1seWMzUlFZWEowTENCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0JpYkc5amEwVjRjR3h2Y21WeVRHbHVhMVJsZUhRdWMyVmpiMjVrVUdGeWRDeGNiaUFnSUNBZ0lDQWdJQ0JkS1gxY2JpQWdJQ0FnSUNBZ1BDOUNkWFIwYjI0K1hHNWNiaUFnSUNBZ0lDQWdlMlY0Y0c5eWRGQnlhWFpoZEdWTFpYbEdaV0YwZFhKbFJXNWhZbXhsWkNBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnUEVKMWRIUnZibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVDFjSW5ObFkyOXVaR0Z5ZVZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKaFkyTnZkVzUwTFdSbGRHRnBiSE10Ylc5a1lXeGZYMkoxZEhSdmJsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yUFhzb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXVkR1Y0ZEM1MGNtRmphMFYyWlc1MEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWFJsWjI5eWVUb2dUV1YwWVUxbGRISnBZM05GZG1WdWRFTmhkR1ZuYjNKNUxrRmpZMjkxYm5SekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwT2lCTlpYUmhUV1YwY21samMwVjJaVzUwVG1GdFpTNUxaWGxGZUhCdmNuUlRaV3hsWTNSbFpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCclpYbGZkSGx3WlRvZ1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEV0bGVWUjVjR1V1VUd0bGVTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3h2WTJGMGFXOXVPaUFuUVdOamIzVnVkQ0JFWlhSaGFXeHpJRTF2WkdGc0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmh2ZDBWNGNHOXlkRkJ5YVhaaGRHVkxaWGxOYjJSaGJDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdkR2hwY3k1amIyNTBaWGgwTG5Rb0oyVjRjRzl5ZEZCeWFYWmhkR1ZMWlhrbktYMWNiaUFnSUNBZ0lDQWdJQ0E4TDBKMWRIUnZiajVjYmlBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUR3dlFXTmpiM1Z1ZEUxdlpHRnNRMjl1ZEdGcGJtVnlQbHh1SUNBZ0lDazdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0I3SUdOdmJtNWxZM1FnZlNCbWNtOXRJQ2R5WldGamRDMXlaV1IxZUNjN1hHNXBiWEJ2Y25RZ2V5QmpiMjF3YjNObElIMGdabkp2YlNBbmNtVmtkWGduTzF4dWFXMXdiM0owSUhzZ2QybDBhRkp2ZFhSbGNpQjlJR1p5YjIwZ0ozSmxZV04wTFhKdmRYUmxjaTFrYjIwbk8xeHVhVzF3YjNKMElIdGNiaUFnYzJodmQwMXZaR0ZzTEZ4dUlDQnpaWFJCWTJOdmRXNTBUR0ZpWld3c1hHNGdJR2hwWkdWTmIyUmhiQ3hjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmMzUnZjbVV2WVdOMGFXOXVjeWM3WEc1cGJYQnZjblFnZTF4dUlDQm5aWFJUWld4bFkzUmxaRWxrWlc1MGFYUjVMRnh1SUNCblpYUlNjR05RY21WbWMwWnZja04xY25KbGJuUlFjbTkyYVdSbGNpeGNiaUFnWjJWMFEzVnljbVZ1ZEVOb1lXbHVTV1FzWEc0Z0lHZGxkRTFsZEdGTllYTnJRV05qYjNWdWRITlBjbVJsY21Wa0xGeHVJQ0JuWlhSQ2JHOWphMFY0Y0d4dmNtVnlUR2x1YTFSbGVIUXNYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNObGJHVmpkRzl5Y3ljN1hHNXBiWEJ2Y25RZ1FXTmpiM1Z1ZEVSbGRHRnBiSE5OYjJSaGJDQm1jbTl0SUNjdUwyRmpZMjkxYm5RdFpHVjBZV2xzY3kxdGIyUmhiQzVqYjIxd2IyNWxiblFuTzF4dVhHNWpiMjV6ZENCdFlYQlRkR0YwWlZSdlVISnZjSE1nUFNBb2MzUmhkR1VwSUQwK0lIdGNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQmphR0ZwYmtsa09pQm5aWFJEZFhKeVpXNTBRMmhoYVc1SlpDaHpkR0YwWlNrc1hHNGdJQ0FnYzJWc1pXTjBaV1JKWkdWdWRHbDBlVG9nWjJWMFUyVnNaV04wWldSSlpHVnVkR2wwZVNoemRHRjBaU2tzWEc0Z0lDQWdhMlY1Y21sdVozTTZJSE4wWVhSbExtMWxkR0Z0WVhOckxtdGxlWEpwYm1kekxGeHVJQ0FnSUhKd1kxQnlaV1p6T2lCblpYUlNjR05RY21WbWMwWnZja04xY25KbGJuUlFjbTkyYVdSbGNpaHpkR0YwWlNrc1hHNGdJQ0FnWVdOamIzVnVkSE02SUdkbGRFMWxkR0ZOWVhOclFXTmpiM1Z1ZEhOUGNtUmxjbVZrS0hOMFlYUmxLU3hjYmlBZ0lDQmliRzlqYTBWNGNHeHZjbVZ5VEdsdWExUmxlSFE2SUdkbGRFSnNiMk5yUlhod2JHOXlaWEpNYVc1clZHVjRkQ2h6ZEdGMFpTd2dkSEoxWlNrc1hHNGdJSDA3WEc1OU8xeHVYRzVqYjI1emRDQnRZWEJFYVhOd1lYUmphRlJ2VUhKdmNITWdQU0FvWkdsemNHRjBZMmdwSUQwK0lIdGNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQnphRzkzUlhod2IzSjBVSEpwZG1GMFpVdGxlVTF2WkdGc09pQW9LU0E5UGx4dUlDQWdJQ0FnWkdsemNHRjBZMmdvYzJodmQwMXZaR0ZzS0hzZ2JtRnRaVG9nSjBWWVVFOVNWRjlRVWtsV1FWUkZYMHRGV1NjZ2ZTa3BMRnh1SUNBZ0lITmxkRUZqWTI5MWJuUk1ZV0psYkRvZ0tHRmtaSEpsYzNNc0lHeGhZbVZzS1NBOVBseHVJQ0FnSUNBZ1pHbHpjR0YwWTJnb2MyVjBRV05qYjNWdWRFeGhZbVZzS0dGa1pISmxjM01zSUd4aFltVnNLU2tzWEc0Z0lDQWdhR2xrWlUxdlpHRnNPaUFvS1NBOVBpQjdYRzRnSUNBZ0lDQmthWE53WVhSamFDaG9hV1JsVFc5a1lXd29LU2s3WEc0Z0lDQWdmU3hjYmlBZ2ZUdGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOdmJYQnZjMlVvWEc0Z0lIZHBkR2hTYjNWMFpYSXNYRzRnSUdOdmJtNWxZM1FvYldGd1UzUmhkR1ZVYjFCeWIzQnpMQ0J0WVhCRWFYTndZWFJqYUZSdlVISnZjSE1wTEZ4dUtTaEJZMk52ZFc1MFJHVjBZV2xzYzAxdlpHRnNLVHRjYmlJc0ltVjRjRzl5ZENCN0lHUmxabUYxYkhRZ2ZTQm1jbTl0SUNjdUwyRmpZMjkxYm5RdFpHVjBZV2xzY3kxdGIyUmhiQzVqYjI1MFlXbHVaWEluTzF4dUlpd2lhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQlNaV0ZqZENCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdZMnhoYzNOdVlXMWxjeUJtY205dElDZGpiR0Z6YzI1aGJXVnpKenRjYm1sdGNHOXlkQ0JKWkdWdWRHbGpiMjRnWm5KdmJTQW5MaTR2TGk0dkxpNHZkV2t2YVdSbGJuUnBZMjl1Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1FXTmpiM1Z1ZEUxdlpHRnNRMjl1ZEdGcGJtVnlLSEJ5YjNCekxDQmpiMjUwWlhoMEtTQjdYRzRnSUdOdmJuTjBJSHRjYmlBZ0lDQmpiR0Z6YzA1aGJXVXNYRzRnSUNBZ2MyVnNaV04wWldSSlpHVnVkR2wwZVN4Y2JpQWdJQ0J6YUc5M1FtRmphMEoxZEhSdmJpeGNiaUFnSUNCaVlXTnJRblYwZEc5dVFXTjBhVzl1TEZ4dUlDQWdJR2hwWkdWTmIyUmhiQ3hjYmlBZ0lDQmphR2xzWkhKbGJpeGNiaUFnZlNBOUlIQnliM0J6TzF4dVhHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ1BHUnBkbHh1SUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqYkdGemMyNWhiV1Z6S0dOc1lYTnpUbUZ0WlN3Z0oyRmpZMjkxYm5RdGJXOWtZV3duS1gxY2JpQWdJQ0FnSUhOMGVXeGxQWHQ3SUdKdmNtUmxjbEpoWkdsMWN6b2dKelJ3ZUNjZ2ZYMWNiaUFnSUNBK1hHNGdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW1GalkyOTFiblF0Ylc5a1lXeGZYMk52Ym5SaGFXNWxjbHdpUGx4dUlDQWdJQ0FnSUNBOFpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUR4SlpHVnVkR2xqYjI0Z1lXUmtjbVZ6Y3oxN2MyVnNaV04wWldSSlpHVnVkR2wwZVM1aFpHUnlaWE56ZlNCa2FXRnRaWFJsY2oxN05qUjlJQzgrWEc0Z0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0I3YzJodmQwSmhZMnRDZFhSMGIyNGdKaVlnS0Z4dUlDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aVlXTmpiM1Z1ZEMxdGIyUmhiRjlmWW1GamExd2lJRzl1UTJ4cFkyczllMkpoWTJ0Q2RYUjBiMjVCWTNScGIyNTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BHa2dZMnhoYzNOT1lXMWxQVndpWm1FZ1ptRXRZVzVuYkdVdGJHVm1kQ0JtWVMxc1oxd2lJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQThjM0JoYmlCamJHRnpjMDVoYldVOVhDSmhZMk52ZFc1MExXMXZaR0ZzWDE5aVlXTnJMWFJsZUhSY0lqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2UyTnZiblJsZUhRdWRDZ25ZbUZqYXljcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5emNHRnVQbHh1SUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBOFluVjBkRzl1SUdOc1lYTnpUbUZ0WlQxY0ltRmpZMjkxYm5RdGJXOWtZV3hmWDJOc2IzTmxYQ0lnYjI1RGJHbGphejE3YUdsa1pVMXZaR0ZzZlNBdlBseHVJQ0FnSUNBZ0lDQjdZMmhwYkdSeVpXNTlYRzRnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0E4TDJScGRqNWNiaUFnS1R0Y2JuMWNibHh1UVdOamIzVnVkRTF2WkdGc1EyOXVkR0ZwYm1WeUxtTnZiblJsZUhSVWVYQmxjeUE5SUh0Y2JpQWdkRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzU5TzF4dVhHNUJZMk52ZFc1MFRXOWtZV3hEYjI1MFlXbHVaWEl1WkdWbVlYVnNkRkJ5YjNCeklEMGdlMXh1SUNCemFHOTNRbUZqYTBKMWRIUnZiam9nWm1Gc2MyVXNYRzRnSUdOb2FXeGtjbVZ1T2lCdWRXeHNMRnh1SUNCaVlXTnJRblYwZEc5dVFXTjBhVzl1T2lCMWJtUmxabWx1WldRc1hHNTlPMXh1WEc1QlkyTnZkVzUwVFc5a1lXeERiMjUwWVdsdVpYSXVjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQmpiR0Z6YzA1aGJXVTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUhObGJHVmpkR1ZrU1dSbGJuUnBkSGs2SUZCeWIzQlVlWEJsY3k1dlltcGxZM1F1YVhOU1pYRjFhWEpsWkN4Y2JpQWdjMmh2ZDBKaFkydENkWFIwYjI0NklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQmlZV05yUW5WMGRHOXVRV04wYVc5dU9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdhR2xrWlUxdlpHRnNPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNCamFHbHNaSEpsYmpvZ1VISnZjRlI1Y0dWekxtNXZaR1VzWEc1OU8xeHVJaXdpYVcxd2IzSjBJSHNnWTI5dWJtVmpkQ0I5SUdaeWIyMGdKM0psWVdOMExYSmxaSFY0Snp0Y2JtbHRjRzl5ZENCN0lHaHBaR1ZOYjJSaGJDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM04wYjNKbEwyRmpkR2x2Ym5Nbk8xeHVhVzF3YjNKMElIc2daMlYwVTJWc1pXTjBaV1JKWkdWdWRHbDBlU0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNObGJHVmpkRzl5Y3ljN1hHNXBiWEJ2Y25RZ1FXTmpiM1Z1ZEUxdlpHRnNRMjl1ZEdGcGJtVnlJR1p5YjIwZ0p5NHZZV05qYjNWdWRDMXRiMlJoYkMxamIyNTBZV2x1WlhJdVkyOXRjRzl1Wlc1MEp6dGNibHh1Wm5WdVkzUnBiMjRnYldGd1UzUmhkR1ZVYjFCeWIzQnpLSE4wWVhSbExDQnZkMjVRY205d2N5a2dlMXh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJSE5sYkdWamRHVmtTV1JsYm5ScGRIazZJRzkzYmxCeWIzQnpMbk5sYkdWamRHVmtTV1JsYm5ScGRIa2dmSHdnWjJWMFUyVnNaV04wWldSSlpHVnVkR2wwZVNoemRHRjBaU2tzWEc0Z0lIMDdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHMWhjRVJwYzNCaGRHTm9WRzlRY205d2N5aGthWE53WVhSamFDa2dlMXh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJR2hwWkdWTmIyUmhiRG9nS0NrZ1BUNGdlMXh1SUNBZ0lDQWdaR2x6Y0dGMFkyZ29hR2xrWlUxdlpHRnNLQ2twTzF4dUlDQWdJSDBzWEc0Z0lIMDdYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOdmJtNWxZM1FvWEc0Z0lHMWhjRk4wWVhSbFZHOVFjbTl3Y3l4Y2JpQWdiV0Z3UkdsemNHRjBZMmhVYjFCeWIzQnpMRnh1S1NoQlkyTnZkVzUwVFc5a1lXeERiMjUwWVdsdVpYSXBPMXh1SWl3aVpYaHdiM0owSUhzZ1pHVm1ZWFZzZENCOUlHWnliMjBnSnk0dllXTmpiM1Z1ZEMxdGIyUmhiQzFqYjI1MFlXbHVaWEl1WTI5dWRHRnBibVZ5Snp0Y2JpSXNJbWx0Y0c5eWRDQlNaV0ZqZEN3Z2V5QlFkWEpsUTI5dGNHOXVaVzUwSUgwZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JOYjJSaGJDd2dleUJOYjJSaGJFTnZiblJsYm5RZ2ZTQm1jbTl0SUNjdUxpOHVMaTl0YjJSaGJDYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFTnZibVpwY20xRVpXeGxkR1ZPWlhSM2IzSnJJR1Y0ZEdWdVpITWdVSFZ5WlVOdmJYQnZibVZ1ZENCN1hHNGdJSE4wWVhScFl5QndjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lDQWdhR2xrWlUxdlpHRnNPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lISmxiVzkyWlU1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dU9pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUc5dVEyOXVabWx5YlRvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0IwWVhKblpYUTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ2ZUdGNibHh1SUNCemRHRjBhV01nWTI5dWRHVjRkRlI1Y0dWeklEMGdlMXh1SUNBZ0lIUTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0I5TzF4dVhHNGdJR2hoYm1Sc1pVUmxiR1YwWlNBOUlDZ3BJRDArSUh0Y2JpQWdJQ0IwYUdsekxuQnliM0J6TG5KbGJXOTJaVTVsZEhkdmNtdERiMjVtYVdkMWNtRjBhVzl1S0hSb2FYTXVjSEp2Y0hNdWRHRnlaMlYwS1M1MGFHVnVLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lIUm9hWE11Y0hKdmNITXViMjVEYjI1bWFYSnRLQ2s3WEc0Z0lDQWdJQ0IwYUdsekxuQnliM0J6TG1ocFpHVk5iMlJoYkNncE8xeHVJQ0FnSUgwcE8xeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCN0lIUWdmU0E5SUhSb2FYTXVZMjl1ZEdWNGREdGNibHh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBOFRXOWtZV3hjYmlBZ0lDQWdJQ0FnYjI1VGRXSnRhWFE5ZTNSb2FYTXVhR0Z1Wkd4bFJHVnNaWFJsZlZ4dUlDQWdJQ0FnSUNCdmJrTmhibU5sYkQxN0tDa2dQVDRnZEdocGN5NXdjbTl3Y3k1b2FXUmxUVzlrWVd3b0tYMWNiaUFnSUNBZ0lDQWdjM1ZpYldsMFZHVjRkRDE3ZENnblpHVnNaWFJsSnlsOVhHNGdJQ0FnSUNBZ0lHTmhibU5sYkZSbGVIUTllM1FvSjJOaGJtTmxiQ2NwZlZ4dUlDQWdJQ0FnSUNCemRXSnRhWFJVZVhCbFBWd2laR0Z1WjJWeUxYQnlhVzFoY25sY0lseHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQThUVzlrWVd4RGIyNTBaVzUwWEc0Z0lDQWdJQ0FnSUNBZ2RHbDBiR1U5ZTNRb0oyUmxiR1YwWlU1bGRIZHZjbXNuS1gxY2JpQWdJQ0FnSUNBZ0lDQmtaWE5qY21sd2RHbHZiajE3ZENnblpHVnNaWFJsVG1WMGQyOXlhMFJsYzJOeWFYQjBhVzl1SnlsOVhHNGdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQThMMDF2WkdGc1BseHVJQ0FnSUNrN1hHNGdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQjdJR052Ym01bFkzUWdmU0JtY205dElDZHlaV0ZqZEMxeVpXUjFlQ2M3WEc1cGJYQnZjblFnZXlCamIyMXdiM05sSUgwZ1puSnZiU0FuY21Wa2RYZ25PMXh1YVcxd2IzSjBJSGRwZEdoTmIyUmhiRkJ5YjNCeklHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyaGxiSEJsY25NdmFHbG5hR1Z5TFc5eVpHVnlMV052YlhCdmJtVnVkSE12ZDJsMGFDMXRiMlJoYkMxd2NtOXdjeWM3WEc1cGJYQnZjblFnZXlCeVpXMXZkbVZPWlhSM2IzSnJRMjl1Wm1sbmRYSmhkR2x2YmlCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzTjBiM0psTDJGamRHbHZibk1uTzF4dWFXMXdiM0owSUVOdmJtWnBjbTFFWld4bGRHVk9aWFIzYjNKcklHWnliMjBnSnk0dlkyOXVabWx5YlMxa1pXeGxkR1V0Ym1WMGQyOXlheTVqYjIxd2IyNWxiblFuTzF4dVhHNWpiMjV6ZENCdFlYQkVhWE53WVhSamFGUnZVSEp2Y0hNZ1BTQW9aR2x6Y0dGMFkyZ3BJRDArSUh0Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCeVpXMXZkbVZPWlhSM2IzSnJRMjl1Wm1sbmRYSmhkR2x2YmpvZ0tIUmhjbWRsZENrZ1BUNWNiaUFnSUNBZ0lHUnBjM0JoZEdOb0tISmxiVzkyWlU1bGRIZHZjbXREYjI1bWFXZDFjbUYwYVc5dUtIUmhjbWRsZENrcExGeHVJQ0I5TzF4dWZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMjl0Y0c5elpTaGNiaUFnZDJsMGFFMXZaR0ZzVUhKdmNITXNYRzRnSUdOdmJtNWxZM1FvYm5Wc2JDd2diV0Z3UkdsemNHRjBZMmhVYjFCeWIzQnpLU3hjYmlrb1EyOXVabWx5YlVSbGJHVjBaVTVsZEhkdmNtc3BPMXh1SWl3aVpYaHdiM0owSUhzZ1pHVm1ZWFZzZENCOUlHWnliMjBnSnk0dlkyOXVabWx5YlMxa1pXeGxkR1V0Ym1WMGQyOXlheTVqYjI1MFlXbHVaWEluTzF4dUlpd2lhVzF3YjNKMElGSmxZV04wTENCN0lFTnZiWEJ2Ym1WdWRDQjlJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ2V5Qm5aWFJCWTJOdmRXNTBUR2x1YXlCOUlHWnliMjBnSjBCdFpYUmhiV0Z6YXk5bGRHaGxjbk5qWVc0dGJHbHVheWM3WEc1cGJYQnZjblFnVFc5a1lXd2dabkp2YlNBbkxpNHZMaTR2Ylc5a1lXd25PMXh1YVcxd2IzSjBJSHNnWVdSa2NtVnpjMU4xYlcxaGNua3NJR2RsZEZWU1RFaHZjM1JPWVcxbElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZhR1ZzY0dWeWN5OTFkR2xzY3k5MWRHbHNKenRjYm1sdGNHOXlkQ0JKWkdWdWRHbGpiMjRnWm5KdmJTQW5MaTR2TGk0dkxpNHZkV2t2YVdSbGJuUnBZMjl1Snp0Y2JtbHRjRzl5ZENCN0lFMWxkR0ZOWlhSeWFXTnpSWFpsYm5SRFlYUmxaMjl5ZVNCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZiV1YwWVcxbGRISnBZM01uTzF4dWFXMXdiM0owSUZwRlRrUkZVMHRmVlZKTVV5Qm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOW9aV3h3WlhKekwyTnZibk4wWVc1MGN5OTZaVzVrWlhOckxYVnliQ2M3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRU52Ym1acGNtMVNaVzF2ZG1WQlkyTnZkVzUwSUdWNGRHVnVaSE1nUTI5dGNHOXVaVzUwSUh0Y2JpQWdjM1JoZEdsaklIQnliM0JVZVhCbGN5QTlJSHRjYmlBZ0lDQm9hV1JsVFc5a1lXdzZJRkJ5YjNCVWVYQmxjeTVtZFc1akxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ2NtVnRiM1psUVdOamIzVnVkRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQnBaR1Z1ZEdsMGVUb2dVSEp2Y0ZSNWNHVnpMbTlpYW1WamRDNXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lHTm9ZV2x1U1dRNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCeWNHTlFjbVZtY3pvZ1VISnZjRlI1Y0dWekxtOWlhbVZqZEM1cGMxSmxjWFZwY21Wa0xGeHVJQ0I5TzF4dVhHNGdJSE4wWVhScFl5QmpiMjUwWlhoMFZIbHdaWE1nUFNCN1hHNGdJQ0FnZERvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdkSEpoWTJ0RmRtVnVkRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUgwN1hHNWNiaUFnYUdGdVpHeGxVbVZ0YjNabElEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUhSb2FYTXVjSEp2Y0hOY2JpQWdJQ0FnSUM1eVpXMXZkbVZCWTJOdmRXNTBLSFJvYVhNdWNISnZjSE11YVdSbGJuUnBkSGt1WVdSa2NtVnpjeWxjYmlBZ0lDQWdJQzUwYUdWdUtDZ3BJRDArSUhSb2FYTXVjSEp2Y0hNdWFHbGtaVTF2WkdGc0tDa3BPMXh1SUNCOU8xeHVYRzRnSUdoaGJtUnNaVU5oYm1ObGJDQTlJQ2dwSUQwK0lIdGNiaUFnSUNCMGFHbHpMbkJ5YjNCekxtaHBaR1ZOYjJSaGJDZ3BPMXh1SUNCOU8xeHVYRzRnSUhKbGJtUmxjbE5sYkdWamRHVmtRV05qYjNWdWRDZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCN0lIUWdmU0E5SUhSb2FYTXVZMjl1ZEdWNGREdGNiaUFnSUNCamIyNXpkQ0I3SUdsa1pXNTBhWFI1TENCeWNHTlFjbVZtY3l3Z1kyaGhhVzVKWkNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKamIyNW1hWEp0TFhKbGJXOTJaUzFoWTJOdmRXNTBYMTloWTJOdmRXNTBYQ0krWEc0Z0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpWTI5dVptbHliUzF5WlcxdmRtVXRZV05qYjNWdWRGOWZZV05qYjNWdWRGOWZhV1JsYm5ScFkyOXVYQ0krWEc0Z0lDQWdJQ0FnSUNBZ1BFbGtaVzUwYVdOdmJpQmhaR1J5WlhOelBYdHBaR1Z1ZEdsMGVTNWhaR1J5WlhOemZTQmthV0Z0WlhSbGNqMTdNeko5SUM4K1hHNGdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW1OdmJtWnBjbTB0Y21WdGIzWmxMV0ZqWTI5MWJuUmZYMkZqWTI5MWJuUmZYMjVoYldWY0lqNWNiaUFnSUNBZ0lDQWdJQ0E4YzNCaGJpQmpiR0Z6YzA1aGJXVTlYQ0pqYjI1bWFYSnRMWEpsYlc5MlpTMWhZMk52ZFc1MFgxOWhZMk52ZFc1MFgxOXNZV0psYkZ3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0oyNWhiV1VuS1gxY2JpQWdJQ0FnSUNBZ0lDQThMM053WVc0K1hHNGdJQ0FnSUNBZ0lDQWdQSE53WVc0Z1kyeGhjM05PWVcxbFBWd2lZV05qYjNWdWRGOTJZV3gxWlZ3aVBudHBaR1Z1ZEdsMGVTNXVZVzFsZlR3dmMzQmhiajVjYmlBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2lZMjl1Wm1seWJTMXlaVzF2ZG1VdFlXTmpiM1Z1ZEY5ZllXTmpiM1Z1ZEY5ZllXUmtjbVZ6YzF3aVBseHVJQ0FnSUNBZ0lDQWdJRHh6Y0dGdUlHTnNZWE56VG1GdFpUMWNJbU52Ym1acGNtMHRjbVZ0YjNabExXRmpZMjkxYm5SZlgyRmpZMjkxYm5SZlgyeGhZbVZzWENJK1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3ZENnbmNIVmliR2xqUVdSa2NtVnpjeWNwZlZ4dUlDQWdJQ0FnSUNBZ0lEd3ZjM0JoYmo1Y2JpQWdJQ0FnSUNBZ0lDQThjM0JoYmlCamJHRnpjMDVoYldVOVhDSmhZMk52ZFc1MFgzWmhiSFZsWENJK1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3WVdSa2NtVnpjMU4xYlcxaGNua29hV1JsYm5ScGRIa3VZV1JrY21WemN5d2dOQ3dnTkNsOVhHNGdJQ0FnSUNBZ0lDQWdQQzl6Y0dGdVBseHVJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKamIyNW1hWEp0TFhKbGJXOTJaUzFoWTJOdmRXNTBYMTloWTJOdmRXNTBYMTlzYVc1clhDSStYRzRnSUNBZ0lDQWdJQ0FnUEdGY2JpQWdJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczlleWdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWVdOamIzVnVkRXhwYm1zZ1BTQm5aWFJCWTJOdmRXNTBUR2x1YXloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFpHVnVkR2wwZVM1aFpHUnlaWE56TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb1lXbHVTV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY25CalVISmxabk1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXVkR1Y0ZEM1MGNtRmphMFYyWlc1MEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWFJsWjI5eWVUb2dUV1YwWVUxbGRISnBZM05GZG1WdWRFTmhkR1ZuYjNKNUxrRmpZMjkxYm5SekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwT2lBblEyeHBZMnRsWkNCQ2JHOWpheUJGZUhCc2IzSmxjaUJNYVc1ckp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FXNXJYM1I1Y0dVNklDZEJZMk52ZFc1MElGUnlZV05yWlhJbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV04wYVc5dU9pQW5VbVZ0YjNabElFRmpZMjkxYm5RbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbXh2WTJ0ZlpYaHdiRzl5WlhKZlpHOXRZV2x1T2lCblpYUlZVa3hJYjNOMFRtRnRaU2hoWTJOdmRXNTBUR2x1YXlrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHZHNiMkpoYkM1d2JHRjBabTl5YlM1dmNHVnVWR0ZpS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWNtdzZJR0ZqWTI5MWJuUk1hVzVyTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhROVhDSmZZbXhoYm10Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnY21Wc1BWd2libTl2Y0dWdVpYSWdibTl5WldabGNuSmxjbHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhWFJzWlQxN2RDZ25aWFJvWlhKelkyRnVWbWxsZHljcGZWeHVJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbVpoSUdaaExYTm9ZWEpsTFhOeGRXRnlaVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bFBYdDdJR052Ykc5eU9pQW5kbUZ5S0MwdFkyOXNiM0l0YVdOdmJpMXRkWFJsWkNrbklIMTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnBkR3hsUFh0MEtDZGxkR2hsY25OallXNVdhV1YzSnlsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBZ0lEd3ZZVDVjYmlBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FwTzF4dUlDQjlYRzVjYmlBZ2NtVnVaR1Z5S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnZENCOUlEMGdkR2hwY3k1amIyNTBaWGgwTzF4dVhHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhOYjJSaGJGeHVJQ0FnSUNBZ0lDQm9aV0ZrWlhKVVpYaDBQWHRnSkh0MEtDZHlaVzF2ZG1WQlkyTnZkVzUwSnlsOVAyQjlYRzRnSUNBZ0lDQWdJRzl1UTJ4dmMyVTllM1JvYVhNdWFHRnVaR3hsUTJGdVkyVnNmVnh1SUNBZ0lDQWdJQ0J2YmxOMVltMXBkRDE3ZEdocGN5NW9ZVzVrYkdWU1pXMXZkbVY5WEc0Z0lDQWdJQ0FnSUc5dVEyRnVZMlZzUFh0MGFHbHpMbWhoYm1Sc1pVTmhibU5sYkgxY2JpQWdJQ0FnSUNBZ2MzVmliV2wwVkdWNGREMTdkQ2duY21WdGIzWmxKeWw5WEc0Z0lDQWdJQ0FnSUdOaGJtTmxiRlJsZUhROWUzUW9KMjVsZG1WeWJXbHVaQ2NwZlZ4dUlDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBOFpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUh0MGFHbHpMbkpsYm1SbGNsTmxiR1ZqZEdWa1FXTmpiM1Z1ZENncGZWeHVJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2lZMjl1Wm1seWJTMXlaVzF2ZG1VdFlXTmpiM1Z1ZEY5ZlpHVnpZM0pwY0hScGIyNWNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lIdDBLQ2R5WlcxdmRtVkJZMk52ZFc1MFJHVnpZM0pwY0hScGIyNG5LWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lEeGhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbU52Ym1acGNtMHRjbVZ0YjNabExXRmpZMjkxYm5SZlgyeHBibXRjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5Wld3OVhDSnViMjl3Wlc1bGNpQnViM0psWm1WeWNtVnlYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMFBWd2lYMkpzWVc1clhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FISmxaajE3V2tWT1JFVlRTMTlWVWt4VExrbE5VRTlTVkVWRVgwRkRRMDlWVGxSVGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZENnbmJHVmhjbTVOYjNKbEp5bDlYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwyRStYRzRnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ1BDOU5iMlJoYkQ1Y2JpQWdJQ0FwTzF4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ2V5QmpiMjV1WldOMElIMGdabkp2YlNBbmNtVmhZM1F0Y21Wa2RYZ25PMXh1YVcxd2IzSjBJSHNnWTI5dGNHOXpaU0I5SUdaeWIyMGdKM0psWkhWNEp6dGNibWx0Y0c5eWRDQjNhWFJvVFc5a1lXeFFjbTl3Y3lCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5b1pXeHdaWEp6TDJocFoyaGxjaTF2Y21SbGNpMWpiMjF3YjI1bGJuUnpMM2RwZEdndGJXOWtZV3d0Y0hKdmNITW5PMXh1YVcxd2IzSjBJSHRjYmlBZ1oyVjBRM1Z5Y21WdWRFTm9ZV2x1U1dRc1hHNGdJR2RsZEZKd1kxQnlaV1p6Um05eVEzVnljbVZ1ZEZCeWIzWnBaR1Z5TEZ4dWZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOXpaV3hsWTNSdmNuTW5PMXh1YVcxd2IzSjBJSHNnY21WdGIzWmxRV05qYjNWdWRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM04wYjNKbEwyRmpkR2x2Ym5Nbk8xeHVhVzF3YjNKMElFTnZibVpwY20xU1pXMXZkbVZCWTJOdmRXNTBJR1p5YjIwZ0p5NHZZMjl1Wm1seWJTMXlaVzF2ZG1VdFlXTmpiM1Z1ZEM1amIyMXdiMjVsYm5Rbk8xeHVYRzVqYjI1emRDQnRZWEJUZEdGMFpWUnZVSEp2Y0hNZ1BTQW9jM1JoZEdVcElEMCtJSHRjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0JqYUdGcGJrbGtPaUJuWlhSRGRYSnlaVzUwUTJoaGFXNUpaQ2h6ZEdGMFpTa3NYRzRnSUNBZ2NuQmpVSEpsWm5NNklHZGxkRkp3WTFCeVpXWnpSbTl5UTNWeWNtVnVkRkJ5YjNacFpHVnlLSE4wWVhSbEtTeGNiaUFnZlR0Y2JuMDdYRzVjYm1OdmJuTjBJRzFoY0VScGMzQmhkR05vVkc5UWNtOXdjeUE5SUNoa2FYTndZWFJqYUNrZ1BUNGdlMXh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJSEpsYlc5MlpVRmpZMjkxYm5RNklDaGhaR1J5WlhOektTQTlQaUJrYVhOd1lYUmphQ2h5WlcxdmRtVkJZMk52ZFc1MEtHRmtaSEpsYzNNcEtTeGNiaUFnZlR0Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR052YlhCdmMyVW9YRzRnSUhkcGRHaE5iMlJoYkZCeWIzQnpMRnh1SUNCamIyNXVaV04wS0cxaGNGTjBZWFJsVkc5UWNtOXdjeXdnYldGd1JHbHpjR0YwWTJoVWIxQnliM0J6S1N4Y2Jpa29RMjl1Wm1seWJWSmxiVzkyWlVGalkyOTFiblFwTzF4dUlpd2laWGh3YjNKMElIc2daR1ZtWVhWc2RDQjlJR1p5YjIwZ0p5NHZZMjl1Wm1seWJTMXlaVzF2ZG1VdFlXTmpiM1Z1ZEM1amIyNTBZV2x1WlhJbk8xeHVJaXdpYVcxd2IzSjBJRkpsWVdOMExDQjdJRkIxY21WRGIyMXdiMjVsYm5RZ2ZTQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUUxdlpHRnNMQ0I3SUUxdlpHRnNRMjl1ZEdWdWRDQjlJR1p5YjIwZ0p5NHVMeTR1TDIxdlpHRnNKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdRMjl1Wm1seWJWSmxjMlYwUVdOamIzVnVkQ0JsZUhSbGJtUnpJRkIxY21WRGIyMXdiMjVsYm5RZ2UxeHVJQ0J6ZEdGMGFXTWdjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQWdJR2hwWkdWTmIyUmhiRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQnlaWE5sZEVGalkyOTFiblE2SUZCeWIzQlVlWEJsY3k1bWRXNWpMbWx6VW1WeGRXbHlaV1FzWEc0Z0lIMDdYRzVjYmlBZ2MzUmhkR2xqSUdOdmJuUmxlSFJVZVhCbGN5QTlJSHRjYmlBZ0lDQjBPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnZlR0Y2JseHVJQ0JvWVc1a2JHVlNaWE5sZENBOUlDZ3BJRDArSUh0Y2JpQWdJQ0IwYUdsekxuQnliM0J6TG5KbGMyVjBRV05qYjNWdWRDZ3BMblJvWlc0b0tDa2dQVDRnZEdocGN5NXdjbTl3Y3k1b2FXUmxUVzlrWVd3b0tTazdYRzRnSUgwN1hHNWNiaUFnY21WdVpHVnlLQ2tnZTF4dUlDQWdJR052Ym5OMElIc2dkQ0I5SUQwZ2RHaHBjeTVqYjI1MFpYaDBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lEeE5iMlJoYkZ4dUlDQWdJQ0FnSUNCdmJsTjFZbTFwZEQxN2RHaHBjeTVvWVc1a2JHVlNaWE5sZEgxY2JpQWdJQ0FnSUNBZ2IyNURZVzVqWld3OWV5Z3BJRDArSUhSb2FYTXVjSEp2Y0hNdWFHbGtaVTF2WkdGc0tDbDlYRzRnSUNBZ0lDQWdJSE4xWW0xcGRGUmxlSFE5ZTNRb0oyTnNaV0Z5SnlsOVhHNGdJQ0FnSUNBZ0lHTmhibU5sYkZSbGVIUTllM1FvSjI1bGRtVnliV2x1WkNjcGZWeHVJQ0FnSUNBZ0lDQnpkV0p0YVhSVWVYQmxQVndpWkdGdVoyVnlMWEJ5YVcxaGNubGNJbHh1SUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0E4VFc5a1lXeERiMjUwWlc1MFhHNGdJQ0FnSUNBZ0lDQWdkR2wwYkdVOWUyQWtlM1FvSjJOc1pXRnlRV04wYVhacGRIa25LWDAvWUgxY2JpQWdJQ0FnSUNBZ0lDQmtaWE5qY21sd2RHbHZiajE3ZENnblkyeGxZWEpCWTNScGRtbDBlVVJsYzJOeWFYQjBhVzl1SnlsOVhHNGdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQThMMDF2WkdGc1BseHVJQ0FnSUNrN1hHNGdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQjdJR052Ym01bFkzUWdmU0JtY205dElDZHlaV0ZqZEMxeVpXUjFlQ2M3WEc1cGJYQnZjblFnZXlCamIyMXdiM05sSUgwZ1puSnZiU0FuY21Wa2RYZ25PMXh1YVcxd2IzSjBJSGRwZEdoTmIyUmhiRkJ5YjNCeklHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyaGxiSEJsY25NdmFHbG5hR1Z5TFc5eVpHVnlMV052YlhCdmJtVnVkSE12ZDJsMGFDMXRiMlJoYkMxd2NtOXdjeWM3WEc1cGJYQnZjblFnZXlCeVpYTmxkRUZqWTI5MWJuUWdmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTl6ZEc5eVpTOWhZM1JwYjI1ekp6dGNibWx0Y0c5eWRDQkRiMjVtYVhKdFVtVnpaWFJCWTJOdmRXNTBJR1p5YjIwZ0p5NHZZMjl1Wm1seWJTMXlaWE5sZEMxaFkyTnZkVzUwTG1OdmJYQnZibVZ1ZENjN1hHNWNibU52Ym5OMElHMWhjRVJwYzNCaGRHTm9WRzlRY205d2N5QTlJQ2hrYVhOd1lYUmphQ2tnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lISmxjMlYwUVdOamIzVnVkRG9nS0NrZ1BUNGdaR2x6Y0dGMFkyZ29jbVZ6WlhSQlkyTnZkVzUwS0NrcExGeHVJQ0I5TzF4dWZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMjl0Y0c5elpTaGNiaUFnZDJsMGFFMXZaR0ZzVUhKdmNITXNYRzRnSUdOdmJtNWxZM1FvYm5Wc2JDd2diV0Z3UkdsemNHRjBZMmhVYjFCeWIzQnpLU3hjYmlrb1EyOXVabWx5YlZKbGMyVjBRV05qYjNWdWRDazdYRzRpTENKbGVIQnZjblFnZXlCa1pXWmhkV3gwSUgwZ1puSnZiU0FuTGk5amIyNW1hWEp0TFhKbGMyVjBMV0ZqWTI5MWJuUXVZMjl1ZEdGcGJtVnlKenRjYmlJc0ltbHRjRzl5ZENCU1pXRmpkQ0JtY205dElDZHlaV0ZqZENjN1hHNXBiWEJ2Y25RZ1VISnZjRlI1Y0dWeklHWnliMjBnSjNCeWIzQXRkSGx3WlhNbk8xeHVhVzF3YjNKMElIc2daMlYwUVdOamIzVnVkRXhwYm1zZ2ZTQm1jbTl0SUNkQWJXVjBZVzFoYzJzdlpYUm9aWEp6WTJGdUxXeHBibXNuTzF4dWFXMXdiM0owSUhzZ2RYTmxVMlZzWldOMGIzSWdmU0JtY205dElDZHlaV0ZqZEMxeVpXUjFlQ2M3WEc1cGJYQnZjblFnUW05NElHWnliMjBnSnk0dUx5NHVMeTR1TDNWcEwySnZlQ2M3WEc1cGJYQnZjblFnUW5WMGRHOXVJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMMkoxZEhSdmJpOWlkWFIwYjI0dVkyOXRjRzl1Wlc1MEp6dGNibWx0Y0c5eWRDQlViMjlzZEdsd0lHWnliMjBnSnk0dUx5NHVMeTR1TDNWcEwzUnZiMngwYVhBdmRHOXZiSFJwY0NjN1hHNXBiWEJ2Y25RZ2V5QjFjMlZKTVRodVEyOXVkR1Y0ZENCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyaHZiMnR6TDNWelpVa3hPRzVEYjI1MFpYaDBKenRjYm1sdGNHOXlkQ0JKWkdWdWRHbGpiMjRnWm5KdmJTQW5MaTR2TGk0dkxpNHZkV2t2YVdSbGJuUnBZMjl1Snp0Y2JtbHRjRzl5ZENCN0lHVnNiR2x3YzJsbWVTQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM0JoWjJWekwzTmxibVF2YzJWdVpDNTFkR2xzY3ljN1hHNXBiWEJ2Y25RZ1VHOXdiM1psY2lCbWNtOXRJQ2N1TGk4dUxpOHVMaTkxYVM5d2IzQnZkbVZ5Snp0Y2JtbHRjRzl5ZENCN1hHNGdJRVp2Ym5SWFpXbG5hSFFzWEc0Z0lGUmxlSFJXWVhKcFlXNTBMRnh1SUNCRVNWTlFURUZaTEZ4dUlDQlRhWHBsTEZ4dUlDQkNiM0prWlhKVGRIbHNaU3hjYmlBZ1FtOXlaR1Z5UTI5c2IzSXNYRzRnSUZSbGVIUkRiMnh2Y2l4Y2JpQWdRMjlzYjNJc1hHNGdJRUZzYVdkdVNYUmxiWE1zWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyaGxiSEJsY25NdlkyOXVjM1JoYm5SekwyUmxjMmxuYmkxemVYTjBaVzBuTzF4dWFXMXdiM0owSUhzZ2RYTmxRMjl3ZVZSdlEyeHBjR0p2WVhKa0lIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZhRzl2YTNNdmRYTmxRMjl3ZVZSdlEyeHBjR0p2WVhKa0p6dGNibWx0Y0c5eWRDQjdJR2RsZEVGa1pISmxjM05DYjI5clJXNTBjbmtnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5elpXeGxZM1J2Y25Nbk8xeHVhVzF3YjNKMElIc2dWRzlyWlc1VGRHRnVaR0Z5WkNCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZkSEpoYm5OaFkzUnBiMjRuTzF4dWFXMXdiM0owSUU1bWRFTnZiR3hsWTNScGIyNUpiV0ZuWlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTkxYVM5dVpuUXRZMjlzYkdWamRHbHZiaTFwYldGblpTOXVablF0WTI5c2JHVmpkR2x2YmkxcGJXRm5aU2M3WEc1cGJYQnZjblFnZXlCQ2RYUjBiMjVKWTI5dUxDQkpZMjl1VG1GdFpTd2dWR1Y0ZENCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJOdmJYQnZibVZ1ZEMxc2FXSnlZWEo1Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1EyOXVkSEpoWTNSRVpYUmhhV3h6VFc5a1lXd29lMXh1SUNCdmJrTnNiM05sTEZ4dUlDQjBiMnRsYms1aGJXVXNYRzRnSUhSdmEyVnVRV1JrY21WemN5eGNiaUFnZEc5QlpHUnlaWE56TEZ4dUlDQmphR0ZwYmtsa0xGeHVJQ0J5Y0dOUWNtVm1jeXhjYmlBZ2RHOXJaVzVKWkN4Y2JpQWdZWE56WlhST1lXMWxMRnh1SUNCaGMzTmxkRk4wWVc1a1lYSmtMRnh1SUNCcGMwTnZiblJ5WVdOMFVtVnhkV1Z6ZEdsdVoxTnBaMjVoZEhWeVpTeGNibjBwSUh0Y2JpQWdZMjl1YzNRZ2RDQTlJSFZ6WlVreE9HNURiMjUwWlhoMEtDazdYRzRnSUdOdmJuTjBJRnRqYjNCcFpXUlViMnRsYmtGa1pISmxjM01zSUdoaGJtUnNaVU52Y0hsVWIydGxia0ZrWkhKbGMzTmRJRDBnZFhObFEyOXdlVlJ2UTJ4cGNHSnZZWEprS0NrN1hHNGdJR052Ym5OMElGdGpiM0JwWldSVWIwRmtaSEpsYzNNc0lHaGhibVJzWlVOdmNIbFViMEZrWkhKbGMzTmRJRDBnZFhObFEyOXdlVlJ2UTJ4cGNHSnZZWEprS0NrN1hHNWNiaUFnWTI5dWMzUWdZV1JrY21WemMwSnZiMnRGYm5SeWVTQTlJSFZ6WlZObGJHVmpkRzl5S0NoemRHRjBaU2tnUFQ0Z0tIdGNiaUFnSUNCa1lYUmhPaUJuWlhSQlpHUnlaWE56UW05dmEwVnVkSEo1S0hOMFlYUmxMQ0IwYjBGa1pISmxjM01wTEZ4dUlDQjlLU2s3WEc0Z0lHTnZibk4wSUc1bWRDQTlYRzRnSUNBZ1lYTnpaWFJUZEdGdVpHRnlaQ0E5UFQwZ1ZHOXJaVzVUZEdGdVpHRnlaQzVGVWtNM01qRWdmSHhjYmlBZ0lDQmhjM05sZEZOMFlXNWtZWEprSUQwOVBTQlViMnRsYmxOMFlXNWtZWEprTGtWU1F6RXhOVFVnZkh4Y2JpQWdJQ0F2THlCcFppQjNaU0JrYjI0bmRDQm9ZWFpsSUdGdUlHRnpjMlYwSUhOMFlXNWtZWEprSUdKMWRDQjNaU0JrYnlCb1lYWmxJR1ZwZEdobGNpQmliM1JvSUdGdUlHRnpjMlYwYm1GdFpTQmhibVFnWVNCMGIydGxia2xFSUc5eUlHSnZkR2dnWVNCMGIydGxiazVoYldVZ1lXNWtJSFJ2YTJWdVNXUWdkMlVnWVhOemRXMWxJR2wwY3lCaGJpQk9SbFJjYmlBZ0lDQW9ZWE56WlhST1lXMWxJQ1ltSUhSdmEyVnVTV1FwSUh4OFhHNGdJQ0FnS0hSdmEyVnVUbUZ0WlNBbUppQjBiMnRsYmtsa0tUdGNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhRYjNCdmRtVnlJR05zWVhOelRtRnRaVDFjSW1OdmJuUnlZV04wTFdSbGRHRnBiSE10Ylc5a1lXeGNJajVjYmlBZ0lDQWdJRHhDYjNoY2JpQWdJQ0FnSUNBZ2NHRmtaR2x1WjFSdmNEMTdObjFjYmlBZ0lDQWdJQ0FnY0dGa1pHbHVaMUpwWjJoMFBYczBmVnh1SUNBZ0lDQWdJQ0J3WVdSa2FXNW5RbTkwZEc5dFBYczRmVnh1SUNBZ0lDQWdJQ0J3WVdSa2FXNW5UR1ZtZEQxN05IMWNiaUFnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQVndpWTI5dWRISmhZM1F0WkdWMFlXbHNjeTF0YjJSaGJGOWZZMjl1ZEdWdWRGd2lYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJRHhVWlhoMFhHNGdJQ0FnSUNBZ0lDQWdabTl1ZEZkbGFXZG9kRDE3Um05dWRGZGxhV2RvZEM1Q2IyeGtmVnh1SUNBZ0lDQWdJQ0FnSUhaaGNtbGhiblE5ZTFSbGVIUldZWEpwWVc1MExtSnZaSGxOWkgxY2JpQWdJQ0FnSUNBZ0lDQmhjejFjSW1nMVhDSmNiaUFnSUNBZ0lDQWdJQ0JrYVhOd2JHRjVQWHRFU1ZOUVRFRlpMa1pNUlZoOVhHNGdJQ0FnSUNBZ0lDQWdZbTk0VUhKdmNITTllM3NnYldGeVoybHVWRzl3T2lBd0xDQnRZWEpuYVc1Q2IzUjBiMjA2SURBZ2ZYMWNiaUFnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUh0MEtDZGpiMjUwY21GamRGUnBkR3hsSnlsOVhHNGdJQ0FnSUNBZ0lEd3ZWR1Y0ZEQ1Y2JpQWdJQ0FnSUNBZ1BGUmxlSFJjYmlBZ0lDQWdJQ0FnSUNCMllYSnBZVzUwUFh0VVpYaDBWbUZ5YVdGdWRDNWliMlI1VTIxOVhHNGdJQ0FnSUNBZ0lDQWdZWE05WENKb05sd2lYRzRnSUNBZ0lDQWdJQ0FnWkdsemNHeGhlVDE3UkVsVFVFeEJXUzVHVEVWWWZWeHVJQ0FnSUNBZ0lDQWdJR052Ykc5eVBYdFVaWGgwUTI5c2IzSXVkR1Y0ZEVGc2RHVnlibUYwYVhabGZWeHVJQ0FnSUNBZ0lDQWdJR0p2ZUZCeWIzQnpQWHQ3SUcxaGNtZHBibFJ2Y0RvZ01pd2diV0Z5WjJsdVFtOTBkRzl0T2lBd0lIMTlYRzRnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNCN2RDZ25ZMjl1ZEhKaFkzUkVaWE5qY21sd2RHbHZiaWNwZlZ4dUlDQWdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdJQ0FnSUhzaGFYTkRiMjUwY21GamRGSmxjWFZsYzNScGJtZFRhV2R1WVhSMWNtVWdKaVlnS0Z4dUlDQWdJQ0FnSUNBZ0lEdytYRzRnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdFVaWGgwVm1GeWFXRnVkQzVpYjJSNVUyMTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnpQVndpYURaY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTndiR0Y1UFh0RVNWTlFURUZaTGtaTVJWaDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhjbWRwYmxSdmNEMTdOSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Z5WjJsdVFtOTBkRzl0UFhzeWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3Ym1aMElEOGdkQ2duWTI5dWRISmhZM1JPUmxRbktTQTZJSFFvSjJOdmJuUnlZV04wVkc5clpXNG5LWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZWR1Y0ZEQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhDYjNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdsemNHeGhlVDE3UkVsVFVFeEJXUzVHVEVWWWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWIzSmtaWEpTWVdScGRYTTllMU5wZW1VdVUwMTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnZjbVJsY2xOMGVXeGxQWHRDYjNKa1pYSlRkSGxzWlM1emIyeHBaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZbTl5WkdWeVEyOXNiM0k5ZTBKdmNtUmxja052Ykc5eUxtSnZjbVJsY2tSbFptRjFiSFI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW1OdmJuUnlZV04wTFdSbGRHRnBiSE10Ylc5a1lXeGZYMk52Ym5SbGJuUmZYMk52Ym5SeVlXTjBYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2UyNW1kQ0EvSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFFtOTRJRzFoY21kcGJqMTdOSDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFRtWjBRMjlzYkdWamRHbHZia2x0WVdkbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z6YzJWMFRtRnRaVDE3WVhOelpYUk9ZVzFsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiMnRsYmtGa1pISmxjM005ZTNSdmEyVnVRV1JrY21WemMzMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5Q2IzZytYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDa2dPaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEVsa1pXNTBhV052Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2lZMjl1ZEhKaFkzUXRaR1YwWVdsc2N5MXRiMlJoYkY5ZlkyOXVkR1Z1ZEY5ZlkyOXVkSEpoWTNSZlgybGtaVzUwYVdOdmJsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWkdSeVpYTnpQWHQwYjJ0bGJrRmtaSEpsYzNOOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmthV0Z0WlhSbGNqMTdNalI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEVKdmVDQmtZWFJoTFhSbGMzUnBaRDFjSW5KbFkybHdhV1Z1ZEZ3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeFVaWGgwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIyNTBWMlZwWjJoMFBYdEdiMjUwVjJWcFoyaDBMa0p2YkdSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdFVaWGgwVm1GeWFXRnVkQzVpYjJSNVRXUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY3oxY0ltZzFYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGNtZHBibFJ2Y0QxN05IMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZEc5clpXNU9ZVzFsSUh4OElHVnNiR2x3YzJsbWVTaDBiMnRsYmtGa1pISmxjM01wZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlZHVjRkRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZEc5clpXNU9ZVzFsSUNZbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhVWlhoMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbFRiWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYTTlYQ0pvTmx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwYzNCc1lYazllMFJKVTFCTVFWa3VSa3hGV0gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNJOWUxUmxlSFJEYjJ4dmNpNTBaWGgwUVd4MFpYSnVZWFJwZG1WOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFoY21kcGJsUnZjRDE3TUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Z5WjJsdVFtOTBkRzl0UFhzMGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN1pXeHNhWEJ6YVdaNUtIUnZhMlZ1UVdSa2NtVnpjeWw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5Q2IzZytYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeENiM2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoYkdsbmJrbDBaVzF6UFh0QmJHbG5ia2wwWlcxekxtTmxiblJsY24xY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYSm5hVzVNWldaMFBWd2lZWFYwYjF3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRnlaMmx1VW1sbmFIUTllelI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWjJGd1BYc3lmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRlJ2YjJ4MGFYQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ2YzJsMGFXOXVQVndpZEc5d1hDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJwZEd4bFBYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5d2FXVmtWRzlyWlc1QlpHUnlaWE56WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQeUIwS0NkamIzQnBaV1JGZUdOc1lXMWhkR2x2YmljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lCMEtDZGpiM0I1Vkc5RGJHbHdZbTloY21RbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4Q2RYUjBiMjVKWTI5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwYzNCc1lYazllMFJKVTFCTVFWa3VSa3hGV0gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV052Yms1aGJXVTllMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZjR2xsWkZSdmEyVnVRV1JrY21WemN5QS9JRWxqYjI1T1lXMWxMa052Y0hsVGRXTmpaWE56SURvZ1NXTnZiazVoYldVdVEyOXdlVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczlleWdwSUQwK0lHaGhibVJzWlVOdmNIbFViMnRsYmtGa1pISmxjM01vZEc5clpXNUJaR1J5WlhOektYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTllME52Ykc5eUxtbGpiMjVOZFhSbFpIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKcFlVeGhZbVZzUFh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjNCcFpXUlViMnRsYmtGa1pISmxjM05jYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDhnZENnblkyOXdhV1ZrUlhoamJHRnRZWFJwYjI0bktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQjBLQ2RqYjNCNVZHOURiR2x3WW05aGNtUW5LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2Vkc5dmJIUnBjRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Vkc5dmJIUnBjQ0J3YjNOcGRHbHZiajFjSW5SdmNGd2lJSFJwZEd4bFBYdDBLQ2R2Y0dWdVNXNUNiRzlqYTBWNGNHeHZjbVZ5SnlsOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRUoxZEhSdmJrbGpiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHpjR3hoZVQxN1JFbFRVRXhCV1M1R1RFVllmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFkyOXVUbUZ0WlQxN1NXTnZiazVoYldVdVJYaHdiM0owZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxN1EyOXNiM0l1YVdOdmJrMTFkR1ZrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYc29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZbXh2WTJ0RmVIQnNiM0psY2xSdmEyVnVUR2x1YXlBOUlHZGxkRUZqWTI5MWJuUk1hVzVyS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc5clpXNUJaR1J5WlhOekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyaGhhVzVKWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lteHZZMnRGZUhCc2IzSmxjbFZ5YkRvZ2NuQmpVSEpsWm5NL0xtSnNiMk5yUlhod2JHOXlaWEpWY213Z1B6OGdiblZzYkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWRXeHNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1oyeHZZbUZzTG5Cc1lYUm1iM0p0TG05d1pXNVVZV0lvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhKc09pQmliRzlqYTBWNGNHeHZjbVZ5Vkc5clpXNU1hVzVyTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtbGhUR0ZpWld3OWUzUW9KMjl3Wlc1SmJrSnNiMk5yUlhod2JHOXlaWEluS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlVYjI5c2RHbHdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ0lDQWdJRHd2UGx4dUlDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQThWR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lIWmhjbWxoYm5ROWUxUmxlSFJXWVhKcFlXNTBMbUp2WkhsVGJYMWNiaUFnSUNBZ0lDQWdJQ0JoY3oxY0ltZzJYQ0pjYmlBZ0lDQWdJQ0FnSUNCa2FYTndiR0Y1UFh0RVNWTlFURUZaTGtaTVJWaDlYRzRnSUNBZ0lDQWdJQ0FnYldGeVoybHVWRzl3UFhzMGZWeHVJQ0FnSUNBZ0lDQWdJRzFoY21kcGJrSnZkSFJ2YlQxN01uMWNiaUFnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUh0dVpuUWdKaVlnZENnblkyOXVkSEpoWTNSU1pYRjFaWE4wYVc1blFXTmpaWE56SnlsOVhHNGdJQ0FnSUNBZ0lDQWdlMmx6UTI5dWRISmhZM1JTWlhGMVpYTjBhVzVuVTJsbmJtRjBkWEpsSUNZbUlIUW9KMk52Ym5SeVlXTjBVbVZ4ZFdWemRHbHVaMU5wWjI1aGRIVnlaU2NwZlZ4dUlDQWdJQ0FnSUNBZ0lIc2hibVowSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FoYVhORGIyNTBjbUZqZEZKbGNYVmxjM1JwYm1kVGFXZHVZWFIxY21VZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUhRb0oyTnZiblJ5WVdOMFVtVnhkV1Z6ZEdsdVoxTndaVzVrYVc1blEyRndKeWw5WEc0Z0lDQWdJQ0FnSUR3dlZHVjRkRDVjYmlBZ0lDQWdJQ0FnUEVKdmVGeHVJQ0FnSUNBZ0lDQWdJR1JwYzNCc1lYazllMFJKVTFCTVFWa3VSa3hGV0gxY2JpQWdJQ0FnSUNBZ0lDQmliM0prWlhKU1lXUnBkWE05ZTFOcGVtVXVVMDE5WEc0Z0lDQWdJQ0FnSUNBZ1ltOXlaR1Z5VTNSNWJHVTllMEp2Y21SbGNsTjBlV3hsTG5OdmJHbGtmVnh1SUNBZ0lDQWdJQ0FnSUdKdmNtUmxja052Ykc5eVBYdENiM0prWlhKRGIyeHZjaTVpYjNKa1pYSkVaV1poZFd4MGZWeHVJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW1OdmJuUnlZV04wTFdSbGRHRnBiSE10Ylc5a1lXeGZYMk52Ym5SbGJuUmZYMk52Ym5SeVlXTjBYQ0pjYmlBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lEeEpaR1Z1ZEdsamIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltTnZiblJ5WVdOMExXUmxkR0ZwYkhNdGJXOWtZV3hmWDJOdmJuUmxiblJmWDJOdmJuUnlZV04wWDE5cFpHVnVkR2xqYjI1Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnWkdsaGJXVjBaWEk5ZXpJMGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdSa2NtVnpjejE3ZEc5QlpHUnlaWE56ZlZ4dUlDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ0FnUEVKdmVDQmtZWFJoTFhSbGMzUnBaRDFjSW5KbFkybHdhV1Z1ZEZ3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEZSbGVIUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXVkRmRsYVdkb2REMTdSbTl1ZEZkbGFXZG9kQzVDYjJ4a2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSnBZVzUwUFh0VVpYaDBWbUZ5YVdGdWRDNWliMlI1VFdSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdGelBWd2lhRFZjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhKbmFXNVViM0E5ZXpSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHRoWkdSeVpYTnpRbTl2YTBWdWRISjVQeTVrWVhSaFB5NXVZVzFsSUh4OElHVnNiR2x3YzJsbWVTaDBiMEZrWkhKbGMzTXBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1BDOVVaWGgwUGx4dUlDQWdJQ0FnSUNBZ0lDQWdlMkZrWkhKbGMzTkNiMjlyUlc1MGNuay9MbVJoZEdFL0xtNWhiV1VnSmlZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbFRiWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY3oxY0ltZzJYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhOd2JHRjVQWHRFU1ZOUVRFRlpMa1pNUlZoOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k5ZTFSbGVIUkRiMnh2Y2k1MFpYaDBRV3gwWlhKdVlYUnBkbVY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGeVoybHVWRzl3UFhzd2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhjbWRwYmtKdmRIUnZiVDE3TkgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0bGJHeHBjSE5wWm5rb2RHOUJaR1J5WlhOektYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BDOVVaWGgwUGx4dUlDQWdJQ0FnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnSUNBOEwwSnZlRDVjYmlBZ0lDQWdJQ0FnSUNBOFFtOTRYRzRnSUNBZ0lDQWdJQ0FnSUNCaGJHbG5ia2wwWlcxelBYdEJiR2xuYmtsMFpXMXpMbU5sYm5SbGNuMWNiaUFnSUNBZ0lDQWdJQ0FnSUcxaGNtZHBia3hsWm5ROVhDSmhkWFJ2WENKY2JpQWdJQ0FnSUNBZ0lDQWdJRzFoY21kcGJsSnBaMmgwUFhzMGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJGd1BYc3lmVnh1SUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhVYjI5c2RHbHdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dVBWd2lkRzl3WENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdsMGJHVTllMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Y0dsbFpGUnZRV1JrY21WemN5QS9JSFFvSjJOdmNHbGxaRVY0WTJ4aGJXRjBhVzl1SnlrZ09pQjBLQ2RqYjNCNVZHOURiR2x3WW05aGNtUW5LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR4Q2RYUjBiMjVKWTI5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHpjR3hoZVQxN1JFbFRVRXhCV1M1R1RFVllmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xqYjI1T1lXMWxQWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmNHbGxaRlJ2UVdSa2NtVnpjeUEvSUVsamIyNU9ZVzFsTGtOdmNIbFRkV05qWlhOeklEb2dTV052Yms1aGJXVXVRMjl3ZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yUFhzb0tTQTlQaUJvWVc1a2JHVkRiM0I1Vkc5QlpHUnlaWE56S0hSdlFXUmtjbVZ6Y3lsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k5ZTBOdmJHOXlMbWxqYjI1TmRYUmxaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21saFRHRmlaV3c5ZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXdhV1ZrVkc5clpXNUJaR1J5WlhOelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDhnZENnblkyOXdhV1ZrUlhoamJHRnRZWFJwYjI0bktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUhRb0oyTnZjSGxVYjBOc2FYQmliMkZ5WkNjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5VWIyOXNkR2x3UGx4dUlDQWdJQ0FnSUNBZ0lDQWdQRlJ2YjJ4MGFYQWdjRzl6YVhScGIyNDlYQ0owYjNCY0lpQjBhWFJzWlQxN2RDZ25iM0JsYmtsdVFteHZZMnRGZUhCc2IzSmxjaWNwZlQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEVKMWRIUnZia2xqYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTndiR0Y1UFh0RVNWTlFURUZaTGtaTVJWaDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV052Yms1aGJXVTllMGxqYjI1T1lXMWxMa1Y0Y0c5eWRIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxN1EyOXNiM0l1YVdOdmJrMTFkR1ZrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZXlncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR0pzYjJOclJYaHdiRzl5WlhKVWIydGxia3hwYm1zZ1BTQm5aWFJCWTJOdmRXNTBUR2x1YXloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzlCWkdSeVpYTnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamFHRnBia2xrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lteHZZMnRGZUhCc2IzSmxjbFZ5YkRvZ2NuQmpVSEpsWm5NL0xtSnNiMk5yUlhod2JHOXlaWEpWY213Z1B6OGdiblZzYkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JuVnNiQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5iRzlpWVd3dWNHeGhkR1p2Y20wdWIzQmxibFJoWWloN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ5YkRvZ1lteHZZMnRGZUhCc2IzSmxjbFJ2YTJWdVRHbHVheXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpwWVV4aFltVnNQWHQwS0NkdmNHVnVTVzVDYkc5amEwVjRjR3h2Y21WeUp5bDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwxUnZiMngwYVhBK1hHNGdJQ0FnSUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnSUNBZ0lEd3ZRbTk0UGx4dUlDQWdJQ0FnUEM5Q2IzZytYRzRnSUNBZ0lDQThRbTk0WEc0Z0lDQWdJQ0FnSUdScGMzQnNZWGs5ZTBSSlUxQk1RVmt1Umt4RldIMWNiaUFnSUNBZ0lDQWdjR0ZrWkdsdVoxUnZjRDE3Tm4xY2JpQWdJQ0FnSUNBZ2NHRmtaR2x1WjFKcFoyaDBQWHMwZlZ4dUlDQWdJQ0FnSUNCd1lXUmthVzVuUW05MGRHOXRQWHMyZlZ4dUlDQWdJQ0FnSUNCd1lXUmthVzVuVEdWbWREMTdOSDFjYmlBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnUEVKMWRIUnZiaUIwZVhCbFBWd2ljSEpwYldGeWVWd2lJRzl1UTJ4cFkyczlleWdwSUQwK0lHOXVRMnh2YzJVb0tYMCtYRzRnSUNBZ0lDQWdJQ0FnZTNRb0ozSmxZMjkyWlhKNVVHaHlZWE5sVW1WdGFXNWtaWEpEYjI1bWFYSnRKeWw5WEc0Z0lDQWdJQ0FnSUR3dlFuVjBkRzl1UGx4dUlDQWdJQ0FnUEM5Q2IzZytYRzRnSUNBZ1BDOVFiM0J2ZG1WeVBseHVJQ0FwTzF4dWZWeHVYRzVEYjI1MGNtRmpkRVJsZEdGcGJITk5iMlJoYkM1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUM4cUtseHVJQ0FnS2lCR2RXNWpkR2x2YmlCMGFHRjBJSE5vYjNWc1pDQmpiRzl6WlNCMGFHVWdiVzlrWVd4Y2JpQWdJQ292WEc0Z0lHOXVRMnh2YzJVNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQXZLaXBjYmlBZ0lDb2dUbUZ0WlNCdlppQjBhR1VnZEc5clpXNGdkR2hoZENCcGN5QjNZV2wwYVc1bklIUnZJR0psSUdGc2JHOTNaV1JjYmlBZ0lDb3ZYRzRnSUhSdmEyVnVUbUZ0WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdMeW9xWEc0Z0lDQXFJRUZrWkhKbGMzTWdiMllnZEdobElIUnZhMlZ1SUhSb1lYUWdhWE1nZDJGcGRHbHVaeUIwYnlCaVpTQmhiR3h2ZDJWa1hHNGdJQ0FxTDF4dUlDQjBiMnRsYmtGa1pISmxjM002SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDOHFLbHh1SUNBZ0tpQkRiMjUwY21GamRDQmhaR1J5WlhOeklISmxjWFZsYzNScGJtY2djM0JsYm1ScGJtY2dZMkZ3WEc0Z0lDQXFMMXh1SUNCMGIwRmtaSEpsYzNNNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQzhxS2x4dUlDQWdLaUJEZFhKeVpXNTBJRzVsZEhkdmNtc2dZMmhoYVc1SlpGeHVJQ0FnS2k5Y2JpQWdZMmhoYVc1SlpEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnTHlvcVhHNGdJQ0FxSUZKUVF5QndjbVZtY3lCdlppQjBhR1VnWTNWeWNtVnVkQ0J1WlhSM2IzSnJYRzRnSUNBcUwxeHVJQ0J5Y0dOUWNtVm1jem9nVUhKdmNGUjVjR1Z6TG05aWFtVmpkQ3hjYmlBZ0x5b3FYRzRnSUNBcUlGUm9aU0IwYjJ0bGJpQnBaQ0J2WmlCMGFHVWdUa1pVWEc0Z0lDQXFMMXh1SUNCMGIydGxia2xrT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQXZLaXBjYmlBZ0lDb2dWRzlyWlc0Z1UzUmhibVJoY21SY2JpQWdJQ292WEc0Z0lHRnpjMlYwVTNSaGJtUmhjbVE2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR1VnYm1GdFpTQnZaaUIwYUdVZ1kyOXNiR1ZqZEdsdmJseHVJQ0FnS2k5Y2JpQWdZWE56WlhST1lXMWxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBdktpcGNiaUFnSUNvZ1YyaGxkR2hsY2lCamIyNTBjbUZqZENCeVpYRjFaWE4wYVc1bklITnBaMjVoZEhWeVpTQm1iRzkzSUdoaGN5QnpkR0Z5ZEdWa1hHNGdJQ0FxTDF4dUlDQnBjME52Ym5SeVlXTjBVbVZ4ZFdWemRHbHVaMU5wWjI1aGRIVnlaVG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzU5TzF4dUlpd2lhVzF3YjNKMElGSmxZV04wSUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdleUIxYzJWSWFYTjBiM0o1SUgwZ1puSnZiU0FuY21WaFkzUXRjbTkxZEdWeUxXUnZiU2M3WEc1cGJYQnZjblFnZXlCMWMyVkVhWE53WVhSamFDd2dkWE5sVTJWc1pXTjBiM0lnZlNCbWNtOXRJQ2R5WldGamRDMXlaV1IxZUNjN1hHNXBiWEJ2Y25RZ1RXOWtZV3dnWm5KdmJTQW5MaTR2TGk0dmJXOWtZV3duTzF4dWFXMXdiM0owSUZSNWNHOW5jbUZ3YUhrZ1puSnZiU0FuTGk0dkxpNHZMaTR2ZFdrdmRIbHdiMmR5WVhCb2VTYzdYRzVwYlhCdmNuUWdleUJVZVhCdlozSmhjR2g1Vm1GeWFXRnVkQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJobGJIQmxjbk12WTI5dWMzUmhiblJ6TDJSbGMybG5iaTF6ZVhOMFpXMG5PMXh1YVcxd2IzSjBJSGRwZEdoTmIyUmhiRkJ5YjNCeklHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyaGxiSEJsY25NdmFHbG5hR1Z5TFc5eVpHVnlMV052YlhCdmJtVnVkSE12ZDJsMGFDMXRiMlJoYkMxd2NtOXdjeWM3WEc1cGJYQnZjblFnZXlCMWMyVkpNVGh1UTI5dWRHVjRkQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJodmIydHpMM1Z6WlVreE9HNURiMjUwWlhoMEp6dGNibWx0Y0c5eWRDQjdYRzRnSUVGRVJGOU9SbFJmVWs5VlZFVXNYRzRnSUVGVFUwVlVYMUpQVlZSRkxGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTlvWld4d1pYSnpMMk52Ym5OMFlXNTBjeTl5YjNWMFpYTW5PMXh1YVcxd2IzSjBJSHNnWjJWMFRtWjBjeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJSMVkydHpMMjFsZEdGdFlYTnJMMjFsZEdGdFlYTnJKenRjYm1sdGNHOXlkQ0I3SUdsbmJtOXlaVlJ2YTJWdWN5QjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM04wYjNKbEwyRmpkR2x2Ym5Nbk8xeHVhVzF3YjNKMElIc2dhWE5GY1hWaGJFTmhjMlZKYm5ObGJuTnBkR2wyWlNCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOXRiMlIxYkdWekwzTjBjbWx1WnkxMWRHbHNjeWM3WEc1Y2JtTnZibk4wSUVOdmJuWmxjblJVYjJ0bGJsUnZUa1pVVFc5a1lXd2dQU0FvZXlCb2FXUmxUVzlrWVd3c0lIUnZhMlZ1UVdSa2NtVnpjeUI5S1NBOVBpQjdYRzRnSUdOdmJuTjBJR2hwYzNSdmNua2dQU0IxYzJWSWFYTjBiM0o1S0NrN1hHNGdJR052Ym5OMElIUWdQU0IxYzJWSk1UaHVRMjl1ZEdWNGRDZ3BPMXh1SUNCamIyNXpkQ0JrYVhOd1lYUmphQ0E5SUhWelpVUnBjM0JoZEdOb0tDazdYRzRnSUdOdmJuTjBJR0ZzYkU1bWRITWdQU0IxYzJWVFpXeGxZM1J2Y2loblpYUk9ablJ6S1R0Y2JpQWdZMjl1YzNRZ2RHOXJaVzVCWkdSbFpFRnpUa1pVSUQwZ1lXeHNUbVowY3k1bWFXNWtLQ2g3SUdGa1pISmxjM01nZlNrZ1BUNWNiaUFnSUNCcGMwVnhkV0ZzUTJGelpVbHVjMlZ1YzJsMGFYWmxLR0ZrWkhKbGMzTXNJSFJ2YTJWdVFXUmtjbVZ6Y3lrc1hHNGdJQ2s3WEc1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFRXOWtZV3hjYmlBZ0lDQWdJRzl1VTNWaWJXbDBQWHRoYzNsdVl5QW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYjJ0bGJrRmtaR1ZrUVhOT1JsUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCaGQyRnBkQ0JrYVhOd1lYUmphQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG5ibTl5WlZSdmEyVnVjeWg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2YTJWdWMxUnZTV2R1YjNKbE9pQjBiMnRsYmtGa1pISmxjM01zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1J2Ym5SVGFHOTNURzloWkdsdVowbHVaR2xqWVhSdmNqb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTEZ4dUlDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdleUIwYjJ0bGJrbGtJSDBnUFNCMGIydGxia0ZrWkdWa1FYTk9SbFE3WEc0Z0lDQWdJQ0FnSUNBZ2FHbHpkRzl5ZVM1d2RYTm9LSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhkR2h1WVcxbE9pQmdKSHRCVTFORlZGOVNUMVZVUlgwdkpIdDBiMnRsYmtGa1pISmxjM045THlSN2RHOXJaVzVKWkgxZ0xGeHVJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lHaHBjM1J2Y25rdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWFJvYm1GdFpUb2dRVVJFWDA1R1ZGOVNUMVZVUlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4wWVhSbE9pQjdJSFJ2YTJWdVFXUmtjbVZ6Y3lCOUxGeHVJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHaHBaR1ZOYjJSaGJDZ3BPMXh1SUNBZ0lDQWdmWDFjYmlBZ0lDQWdJSE4xWW0xcGRGUmxlSFE5ZTNRb0ozbGxjeWNwZlZ4dUlDQWdJQ0FnYjI1RFlXNWpaV3c5ZXlncElEMCtJR2hwWkdWTmIyUmhiQ2dwZlZ4dUlDQWdJQ0FnWTJGdVkyVnNWR1Y0ZEQxN2RDZ25ZMkZ1WTJWc0p5bDlYRzRnSUNBZ1BseHVJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKamIyNTJaWEowTFhSdmEyVnVMWFJ2TFc1bWRDMXRiMlJoYkZ3aVBseHVJQ0FnSUNBZ0lDQThWSGx3YjJkeVlYQm9lVnh1SUNBZ0lDQWdJQ0FnSUhaaGNtbGhiblE5ZTFSNWNHOW5jbUZ3YUhsV1lYSnBZVzUwTGtnMmZWeHVJQ0FnSUNBZ0lDQWdJR0p2ZUZCeWIzQnpQWHQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRZWEpuYVc1VWIzQTZJRElzWEc0Z0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUh0MGIydGxia0ZrWkdWa1FYTk9SbFJjYmlBZ0lDQWdJQ0FnSUNBZ0lEOGdkQ2duWTI5dWRtVnlkRlJ2YTJWdVZHOU9SbFJGZUdsemRFUmxjMk55YVhCMGFXOXVKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lEb2dkQ2duWTI5dWRtVnlkRlJ2YTJWdVZHOU9SbFJFWlhOamNtbHdkR2x2YmljcGZWeHVJQ0FnSUNBZ0lDQThMMVI1Y0c5bmNtRndhSGsrWEc0Z0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBOEwwMXZaR0ZzUGx4dUlDQXBPMXh1ZlR0Y2JseHVRMjl1ZG1WeWRGUnZhMlZ1Vkc5T1JsUk5iMlJoYkM1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUdocFpHVk5iMlJoYkRvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdkRzlyWlc1QlpHUnlaWE56T2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dWZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdkMmwwYUUxdlpHRnNVSEp2Y0hNb1EyOXVkbVZ5ZEZSdmEyVnVWRzlPUmxSTmIyUmhiQ2s3WEc0aUxDSnBiWEJ2Y25RZ1VtVmhZM1FzSUhzZ2RYTmxVM1JoZEdVZ2ZTQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUUxdlpHRnNJR1p5YjIwZ0p5NHVMeTR1TDIxdlpHRnNKenRjYm1sdGNHOXlkQ0JVWlhoMFJtbGxiR1FnWm5KdmJTQW5MaTR2TGk0dkxpNHZkV2t2ZEdWNGRDMW1hV1ZzWkNjN1hHNXBiWEJ2Y25RZ1FuVjBkRzl1SUdaeWIyMGdKeTR1THk0dUx5NHVMM1ZwTDJKMWRIUnZiaWM3WEc1cGJYQnZjblFnZTF4dUlDQlVaWGgwVm1GeWFXRnVkQ3hjYmlBZ1JtOXVkRmRsYVdkb2RDeGNiaUFnUVd4cFoyNUpkR1Z0Y3l4Y2JpQWdRa3hQUTB0ZlUwbGFSVk1zWEc0Z0lFUkpVMUJNUVZrc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZZMjl1YzNSaGJuUnpMMlJsYzJsbmJpMXplWE4wWlcwbk8xeHVhVzF3YjNKMElFSnZlQ0JtY205dElDY3VMaTh1TGk4dUxpOTFhUzlpYjNnbk8xeHVhVzF3YjNKMElIZHBkR2hOYjJSaGJGQnliM0J6SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJobGJIQmxjbk12YUdsbmFHVnlMVzl5WkdWeUxXTnZiWEJ2Ym1WdWRITXZkMmwwYUMxdGIyUmhiQzF3Y205d2N5YzdYRzVwYlhCdmNuUWdleUIxYzJWSk1UaHVRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmh2YjJ0ekwzVnpaVWt4T0c1RGIyNTBaWGgwSnp0Y2JtbHRjRzl5ZENCYVJVNUVSVk5MWDFWU1RGTWdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZhR1ZzY0dWeWN5OWpiMjV6ZEdGdWRITXZlbVZ1WkdWemF5MTFjbXduTzF4dWFXMXdiM0owSUh0Y2JpQWdRblYwZEc5dVNXTnZiaXhjYmlBZ1FuVjBkRzl1U1dOdmJsTnBlbVVzWEc0Z0lFbGpiMjVPWVcxbExGeHVJQ0JVWlhoMExGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOWpiMjF3YjI1bGJuUXRiR2xpY21GeWVTYzdYRzVjYm1OdmJuTjBJRU4xYzNSdmJXbDZaVTV2Ym1ObElEMGdLSHRjYmlBZ2FHbGtaVTF2WkdGc0xGeHVJQ0JqZFhOMGIyMU9iMjVqWlZaaGJIVmxMRnh1SUNCdVpYaDBUbTl1WTJVc1hHNGdJSFZ3WkdGMFpVTjFjM1J2YlU1dmJtTmxMRnh1SUNCblpYUk9aWGgwVG05dVkyVXNYRzU5S1NBOVBpQjdYRzRnSUdOdmJuTjBJRnRqZFhOMGIyMU9iMjVqWlN3Z2MyVjBRM1Z6ZEc5dFRtOXVZMlZkSUQwZ2RYTmxVM1JoZEdVb0p5Y3BPMXh1SUNCamIyNXpkQ0IwSUQwZ2RYTmxTVEU0YmtOdmJuUmxlSFFvS1R0Y2JseHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeE5iMlJoYkZ4dUlDQWdJQ0FnYjI1VGRXSnRhWFE5ZXlncElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHTjFjM1J2YlU1dmJtTmxJRDA5UFNBbkp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhWd1pHRjBaVU4xYzNSdmJVNXZibU5sS0dOMWMzUnZiVTV2Ym1ObFZtRnNkV1VwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lIVndaR0YwWlVOMWMzUnZiVTV2Ym1ObEtHTjFjM1J2YlU1dmJtTmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCblpYUk9aWGgwVG05dVkyVW9LVHRjYmlBZ0lDQWdJQ0FnYUdsa1pVMXZaR0ZzS0NrN1hHNGdJQ0FnSUNCOWZWeHVJQ0FnSUNBZ2MzVmliV2wwVkdWNGREMTdkQ2duYzJGMlpTY3BmVnh1SUNBZ0lDQWdiMjVEWVc1alpXdzlleWdwSUQwK0lHaHBaR1ZOYjJSaGJDZ3BmVnh1SUNBZ0lDQWdZMkZ1WTJWc1ZHVjRkRDE3ZENnblkyRnVZMlZzSnlsOVhHNGdJQ0FnSUNCamIyNTBaVzUwUTJ4aGMzTTlYQ0pqZFhOMGIyMXBlbVV0Ym05dVkyVXRiVzlrWVd3dFkyOXVkR1Z1ZEZ3aVhHNGdJQ0FnSUNCamIyNTBZV2x1WlhKRGJHRnpjejFjSW1OMWMzUnZiV2w2WlMxdWIyNWpaUzF0YjJSaGJDMWpiMjUwWVdsdVpYSmNJbHh1SUNBZ0lENWNiaUFnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aVkzVnpkRzl0YVhwbExXNXZibU5sTFcxdlpHRnNYQ0krWEc0Z0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpWTNWemRHOXRhWHBsTFc1dmJtTmxMVzF2WkdGc1gxOXRZV2x1TFdobFlXUmxjbHdpUGx4dUlDQWdJQ0FnSUNBZ0lEeFVaWGgwWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0pqZFhOMGIyMXBlbVV0Ym05dVkyVXRiVzlrWVd4ZlgyMWhhVzR0ZEdsMGJHVmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlhV0Z1ZEQxN1ZHVjRkRlpoY21saGJuUXVhR1ZoWkdsdVoxTnRmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1lYTTlYQ0pvTkZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjI1MFYyVnBaMmgwUFh0R2IyNTBWMlZwWjJoMExrSnZiR1I5WEc0Z0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0oyVmthWFJPYjI1alpVWnBaV3hrSnlsOVhHNGdJQ0FnSUNBZ0lDQWdQQzlVWlhoMFBseHVJQ0FnSUNBZ0lDQWdJRHhDZFhSMGIyNUpZMjl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBZMjl1VG1GdFpUMTdTV052Yms1aGJXVXVRMnh2YzJWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKamRYTjBiMjFwZW1VdGJtOXVZMlV0Ylc5a1lXeGZYMk5zYjNObFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUhOcGVtVTllMEoxZEhSdmJrbGpiMjVUYVhwbExsTnRmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSnBZVXhoWW1Wc1BYdDBLQ2RqYkc5elpTY3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN2FHbGtaVTF2WkdGc2ZWeHVJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0E4UW05NFhHNGdJQ0FnSUNBZ0lDQWdiV0Z5WjJsdVZHOXdQWHN5ZlZ4dUlDQWdJQ0FnSUNBZ0lHUnBjM0JzWVhrOWUwUkpVMUJNUVZrdVNVNU1TVTVGWDBaTVJWaDlYRzRnSUNBZ0lDQWdJQ0FnWVd4cFoyNUpkR1Z0Y3oxN1FXeHBaMjVKZEdWdGN5NWpaVzUwWlhKOVhHNGdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0E4VkdWNGRGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeWFXRnVkRDE3VkdWNGRGWmhjbWxoYm5RdVltOWtlVk50ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZWE05WENKb05sd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIyNTBWMlZwWjJoMFBYdEdiMjUwVjJWcFoyaDBMazV2Y20xaGJIMWNiaUFnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdkQ2duWldScGRFNXZibU5sVFdWemMyRm5aU2NwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQRUoxZEhSdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxQVndpYkdsdWExd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbU4xYzNSdmJXbDZaUzF1YjI1alpTMXRiMlJoYkY5ZmJHbHVhMXdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYkQxY0ltNXZiM0JsYm1WeUlHNXZjbVZtWlhKeVpYSmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhROVhDSmZZbXhoYm10Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCb2NtVm1QWHRhUlU1RVJWTkxYMVZTVEZNdVExVlRWRTlOU1ZwRlgwNVBUa05GZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjdkQ2duYkdWaGNtNU5iM0psVlhCd1pYSkRZWE5sSnlsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0E4TDBKMWRIUnZiajVjYmlBZ0lDQWdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdJQ0E4UW05NElHMWhjbWRwYmxSdmNEMTdNMzArWEc0Z0lDQWdJQ0FnSUNBZ1BFSnZlQ0JoYkdsbmJrbDBaVzF6UFh0QmJHbG5ia2wwWlcxekxtTmxiblJsY24wZ1pHbHpjR3hoZVQxN1JFbFRVRXhCV1M1R1RFVllmVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeFVaWGgwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbFRiWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZWE05WENKb05sd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZiblJYWldsbmFIUTllMFp2Ym5SWFpXbG5hSFF1UW05c1pIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1ltOTRVSEp2Y0hNOWUzc2dkMmxrZEdnNklFSk1UME5MWDFOSldrVlRMa1pKVmtWZlUwbFlWRWhUSUgxOVhHNGdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHQwS0NkbFpHbDBUbTl1WTJWR2FXVnNaQ2NwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlVWlhoMFBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEVKdmVDQjNhV1IwYUQxN1FreFBRMHRmVTBsYVJWTXVUMDVGWDFOSldGUklmVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQRUoxZEhSdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U5WENKc2FXNXJYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKamRYTjBiMjFwZW1VdGJtOXVZMlV0Ylc5a1lXeGZYM0psYzJWMFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoTFhSbGMzUnBaRDFjSW1OMWMzUnZiV2w2WlMxdWIyNWpaUzF5WlhObGRGd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVEYkdsamF6MTdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwUTNWemRHOXRUbTl1WTJVb2JtVjRkRTV2Ym1ObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlM1FvSjNKbGMyVjBKeWw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHd2UW5WMGRHOXVQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKamRYTjBiMjFwZW1VdGJtOXVZMlV0Ylc5a1lXeGZYMmx1Y0hWMFhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkRVpwWld4a1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTlYQ0p1ZFcxaVpYSmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoTFhSbGMzUnBaRDFjSW1OMWMzUnZiUzF1YjI1alpTMXBibkIxZEZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUcxcGJqMWNJakJjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J3YkdGalpXaHZiR1JsY2oxN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnpkRzl0VG05dVkyVldZV3gxWlNCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaDBlWEJsYjJZZ2JtVjRkRTV2Ym1ObElEMDlQU0FuYm5WdFltVnlKeUFtSmlCdVpYaDBUbTl1WTJVdWRHOVRkSEpwYm1jb0tTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJrTm9ZVzVuWlQxN0tHVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUkRkWE4wYjIxT2IyNWpaU2hsTG5SaGNtZGxkQzUyWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHWjFiR3hYYVdSMGFGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYSm5hVzQ5WENKa1pXNXpaVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbFBYdGpkWE4wYjIxT2IyNWpaWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1E5WENKamRYTjBiMjB0Ym05dVkyVXRhV1JjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnUEM5Q2IzZytYRzRnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0E4TDAxdlpHRnNQbHh1SUNBcE8xeHVmVHRjYmx4dVEzVnpkRzl0YVhwbFRtOXVZMlV1Y0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0JvYVdSbFRXOWtZV3c2SUZCeWIzQlVlWEJsY3k1bWRXNWpMbWx6VW1WeGRXbHlaV1FzWEc0Z0lHTjFjM1J2YlU1dmJtTmxWbUZzZFdVNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJRzVsZUhST2IyNWpaVG9nVUhKdmNGUjVjR1Z6TG01MWJXSmxjaXhjYmlBZ2RYQmtZWFJsUTNWemRHOXRUbTl1WTJVNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQm5aWFJPWlhoMFRtOXVZMlU2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1ZlR0Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUhkcGRHaE5iMlJoYkZCeWIzQnpLRU4xYzNSdmJXbDZaVTV2Ym1ObEtUdGNiaUlzSW1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnZlNCbWNtOXRJQ2N1TDJOMWMzUnZiV2w2WlMxdWIyNWpaUzVqYjIxd2IyNWxiblFuTzF4dUlpd2lhVzF3YjNKMElGSmxZV04wTENCN0lGQjFjbVZEYjIxd2IyNWxiblFnZlNCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJR3h2WnlCbWNtOXRJQ2RzYjJkc1pYWmxiQ2M3WEc1cGJYQnZjblFnWTJ4aGMzTnVZVzFsY3lCbWNtOXRJQ2RqYkdGemMyNWhiV1Z6Snp0Y2JtbHRjRzl5ZENCQ2FXZE9kVzFpWlhJZ1puSnZiU0FuWW1sbmJuVnRZbVZ5TG1wekp6dGNibWx0Y0c5eWRDQk5iMlJoYkNCbWNtOXRJQ2N1TGk4dUxpOXRiMlJoYkNjN1hHNXBiWEJ2Y25RZ1NXUmxiblJwWTI5dUlHWnliMjBnSnk0dUx5NHVMeTR1TDNWcEwybGtaVzUwYVdOdmJpYzdYRzVwYlhCdmNuUWdWR1Y0ZEVacFpXeGtJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMM1JsZUhRdFptbGxiR1FuTzF4dWFXMXdiM0owSUh0Y2JpQWdZMkZzWTFSdmEyVnVRVzF2ZFc1MExGeHVJQ0IwYjFCeVpXTnBjMmx2YmxkcGRHaHZkWFJVY21GcGJHbHVaMXBsY205ekxGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2YkdsaUwzUnlZVzV6WVdOMGFXOXVjeTFqYjI1MGNtOXNiR1Z5TFhWMGFXeHpKenRjYm1sdGNHOXlkQ0I3WEc0Z0lFSjFkSFJ2YmtsamIyNHNYRzRnSUVKMWRIUnZia2xqYjI1VGFYcGxMRnh1SUNCSlkyOXVUbUZ0WlN4Y2JuMGdabkp2YlNBbkxpNHZMaTR2TGk0dlkyOXRjRzl1Wlc1MExXeHBZbkpoY25rbk8xeHVYRzVqYjI1emRDQk5RVmhmVlU1VFNVZE9SVVJmTWpVMlgwbE9WQ0E5SUc1bGR5QkNhV2RPZFcxaVpYSW9NaWt1Y0c5M0tESTFOaWt1YldsdWRYTW9NU2t1ZEc5VGRISnBibWNvTVRBcE8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCRlpHbDBRWEJ3Y205MllXeFFaWEp0YVhOemFXOXVJR1Y0ZEdWdVpITWdVSFZ5WlVOdmJYQnZibVZ1ZENCN1hHNGdJSE4wWVhScFl5QndjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lDQWdaR1ZqYVcxaGJITTZJRkJ5YjNCVWVYQmxjeTV1ZFcxaVpYSXNYRzRnSUNBZ2FHbGtaVTF2WkdGc09pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUhObGJHVmpkR1ZrU1dSbGJuUnBkSGs2SUZCeWIzQlVlWEJsY3k1dlltcGxZM1FzWEc0Z0lDQWdkRzlyWlc1QmJXOTFiblE2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdZM1Z6ZEc5dFZHOXJaVzVCYlc5MWJuUTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2RHOXJaVzVUZVcxaWIydzZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2RHOXJaVzVDWVd4aGJtTmxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lITmxkRU4xYzNSdmJVRnRiM1Z1ZERvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdiM0pwWjJsdU9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ2NtVnhkV2x5WldSTmFXNXBiWFZ0T2lCUWNtOXdWSGx3WlhNdWFXNXpkR0Z1WTJWUFppaENhV2RPZFcxaVpYSXBMRnh1SUNCOU8xeHVYRzRnSUhOMFlYUnBZeUJqYjI1MFpYaDBWSGx3WlhNZ1BTQjdYRzRnSUNBZ2REb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJSDA3WEc1Y2JpQWdjM1JoZEdVZ1BTQjdYRzRnSUNBZ0x5OGdWR2hwY3lCcGN5QjFjMlZrSUdGeklHRWdWR1Y0ZEVacFpXeGtJSFpoYkhWbExDQjNhR2xqYUNCemFHOTFiR1FnWW1VZ1lTQnpkSEpwYm1jdVhHNGdJQ0FnWTNWemRHOXRVM0JsYm1STWFXMXBkRG9nZEdocGN5NXdjbTl3Y3k1amRYTjBiMjFVYjJ0bGJrRnRiM1Z1ZENCOGZDQW5KeXhjYmlBZ0lDQnpaV3hsWTNSbFpFOXdkR2x2YmtselZXNXNhVzFwZEdWa09pQWhkR2hwY3k1d2NtOXdjeTVqZFhOMGIyMVViMnRsYmtGdGIzVnVkQ3hjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWEpOYjJSaGJFTnZiblJsYm5Rb1pYSnliM0lwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJSFFnZlNBOUlIUm9hWE11WTI5dWRHVjRkRHRjYmlBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNCb2FXUmxUVzlrWVd3c1hHNGdJQ0FnSUNCelpXeGxZM1JsWkVsa1pXNTBhWFI1TEZ4dUlDQWdJQ0FnZEc5clpXNUJiVzkxYm5Rc1hHNGdJQ0FnSUNCMGIydGxibE41YldKdmJDeGNiaUFnSUNBZ0lIUnZhMlZ1UW1Gc1lXNWpaU3hjYmlBZ0lDQWdJR04xYzNSdmJWUnZhMlZ1UVcxdmRXNTBMRnh1SUNBZ0lDQWdiM0pwWjJsdUxGeHVJQ0FnSUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHTnZibk4wSUhzZ2JtRnRaU3dnWVdSa2NtVnpjeUI5SUQwZ2MyVnNaV04wWldSSlpHVnVkR2wwZVNCOGZDQjdmVHRjYmlBZ0lDQmpiMjV6ZENCN0lITmxiR1ZqZEdWa1QzQjBhVzl1U1hOVmJteHBiV2wwWldRZ2ZTQTlJSFJvYVhNdWMzUmhkR1U3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSmxaR2wwTFdGd2NISnZkbUZzTFhCbGNtMXBjM05wYjI1Y0lqNWNiaUFnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSmxaR2wwTFdGd2NISnZkbUZzTFhCbGNtMXBjM05wYjI1ZlgyaGxZV1JsY2x3aVBseHVJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2laV1JwZEMxaGNIQnliM1poYkMxd1pYSnRhWE56YVc5dVgxOTBhWFJzWlZ3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0oyVmthWFJRWlhKdGFYTnphVzl1SnlsOVhHNGdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDQWdQRUoxZEhSdmJrbGpiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGpiMjVPWVcxbFBYdEpZMjl1VG1GdFpTNURiRzl6WlgxY2JpQWdJQ0FnSUNBZ0lDQWdJSE5wZW1VOWUwSjFkSFJ2YmtsamIyNVRhWHBsTGt4bmZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aVpXUnBkQzFoY0hCeWIzWmhiQzF3WlhKdGFYTnphVzl1WDE5b1pXRmtaWEpmWDJOc2IzTmxYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWUyaHBaR1ZOYjJSaGJIMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6YzA1aGJXVTlYQ0psWkdsMExXRndjSEp2ZG1Gc0xYQmxjbTFwYzNOcGIyNWZYMkZqWTI5MWJuUXRhVzVtYjF3aVBseHVJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2laV1JwZEMxaGNIQnliM1poYkMxd1pYSnRhWE56YVc5dVgxOWhZMk52ZFc1MExXbHVabTlmWDJGalkyOTFiblJjSWo1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhKWkdWdWRHbGpiMjRnWVdSa2NtVnpjejE3WVdSa2NtVnpjMzBnWkdsaGJXVjBaWEk5ZXpNeWZTQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKbFpHbDBMV0Z3Y0hKdmRtRnNMWEJsY20xcGMzTnBiMjVmWDI1aGJXVXRZVzVrTFdKaGJHRnVZMlV0WTI5dWRHRnBibVZ5WENJK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpWldScGRDMWhjSEJ5YjNaaGJDMXdaWEp0YVhOemFXOXVYMTloWTJOdmRXNTBMV2x1Wm05ZlgyNWhiV1ZjSWo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2JtRnRaWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR4a2FYWStlM1FvSjJKaGJHRnVZMlVuS1gwOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aVpXUnBkQzFoY0hCeWIzWmhiQzF3WlhKdGFYTnphVzl1WDE5aFkyTnZkVzUwTFdsdVptOWZYMkpoYkdGdVkyVmNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGdKSHQwYjFCeVpXTnBjMmx2YmxkcGRHaHZkWFJVY21GcGJHbHVaMXBsY205ektGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIydGxia0poYkdGdVkyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBcGZTQWtlM1J2YTJWdVUzbHRZbTlzZldCOVhHNGdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW1Wa2FYUXRZWEJ3Y205MllXd3RjR1Z5YldsemMybHZibDlmWldScGRDMXpaV04wYVc5dVhDSStYRzRnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6YzA1aGJXVTlYQ0psWkdsMExXRndjSEp2ZG1Gc0xYQmxjbTFwYzNOcGIyNWZYMlZrYVhRdGMyVmpkR2x2Ymw5ZmRHbDBiR1ZjSWo1Y2JpQWdJQ0FnSUNBZ0lDQWdJSHQwS0NkemNHVnVaRXhwYldsMFVHVnliV2x6YzJsdmJpY3BmVnh1SUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpWldScGRDMWhjSEJ5YjNaaGJDMXdaWEp0YVhOemFXOXVYMTlsWkdsMExYTmxZM1JwYjI1ZlgyUmxjMk55YVhCMGFXOXVYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdkQ2duWVd4c2IzZFhhWFJvWkhKaGQwRnVaRk53Wlc1a0p5d2dXMjl5YVdkcGJsMHBmVnh1SUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpWldScGRDMWhjSEJ5YjNaaGJDMXdaWEp0YVhOemFXOXVYMTlsWkdsMExYTmxZM1JwYjI1ZlgyOXdkR2x2Ymx3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSmxaR2wwTFdGd2NISnZkbUZzTFhCbGNtMXBjM05wYjI1ZlgyVmthWFF0YzJWamRHbHZibDlmY21Ga2FXOHRZblYwZEc5dVhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN0tDa2dQVDRnZEdocGN5NXpaWFJUZEdGMFpTaDdJSE5sYkdWamRHVmtUM0IwYVc5dVNYTlZibXhwYldsMFpXUTZJSFJ5ZFdVZ2ZTbDlYRzRnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR4a2FYWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMk5zWVhOemJtRnRaWE1vZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oyVmthWFF0WVhCd2NtOTJZV3d0Y0dWeWJXbHpjMmx2Ymw5ZlpXUnBkQzF6WldOMGFXOXVYMTl5WVdScGJ5MWlkWFIwYjI0dGIzVjBiR2x1WlNjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0Z6Wld4bFkzUmxaRTl3ZEdsdmJrbHpWVzVzYVcxcGRHVmtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJWa2FYUXRZWEJ3Y205MllXd3RjR1Z5YldsemMybHZibDlmWldScGRDMXpaV04wYVc5dVgxOXlZV1JwYnkxaWRYUjBiMjR0YjNWMGJHbHVaUzB0YzJWc1pXTjBaV1FuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaV3hsWTNSbFpFOXdkR2x2YmtselZXNXNhVzFwZEdWa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0ltVmthWFF0WVhCd2NtOTJZV3d0Y0dWeWJXbHpjMmx2Ymw5ZlpXUnBkQzF6WldOMGFXOXVYMTl5WVdScGJ5MWlkWFIwYjI0dFptbHNiRndpSUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUh0elpXeGxZM1JsWkU5d2RHbHZia2x6Vlc1c2FXMXBkR1ZrSUNZbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0ltVmthWFF0WVhCd2NtOTJZV3d0Y0dWeWJXbHpjMmx2Ymw5ZlpXUnBkQzF6WldOMGFXOXVYMTl5WVdScGJ5MWlkWFIwYjI0dFpHOTBYQ0lnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6YzA1aGJXVTlYQ0psWkdsMExXRndjSEp2ZG1Gc0xYQmxjbTFwYzNOcGIyNWZYMlZrYVhRdGMyVmpkR2x2Ymw5ZmIzQjBhVzl1TFhSbGVIUmNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN1kyeGhjM051WVcxbGN5aDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuWldScGRDMWhjSEJ5YjNaaGJDMXdaWEp0YVhOemFXOXVYMTlsWkdsMExYTmxZM1JwYjI1ZlgyOXdkR2x2Ymkxc1lXSmxiQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDRnpaV3hsWTNSbFpFOXdkR2x2YmtselZXNXNhVzFwZEdWa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMlZrYVhRdFlYQndjbTkyWVd3dGNHVnliV2x6YzJsdmJsOWZaV1JwZEMxelpXTjBhVzl1WDE5dmNIUnBiMjR0YkdGaVpXd3RMWE5sYkdWamRHVmtKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaV04wWldSUGNIUnBiMjVKYzFWdWJHbHRhWFJsWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdHVaWGNnUW1sblRuVnRZbVZ5S0hSdmEyVnVRVzF2ZFc1MEtTNWxjWFZoYkhNb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnUW1sblRuVnRZbVZ5S0UxQldGOVZUbE5KUjA1RlJGOHlOVFpmU1U1VUtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUhRb0ozVnViR2x0YVhSbFpDY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUhRb0ozQnliM0J2YzJWa1FYQndjbTkyWVd4TWFXMXBkQ2NwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKbFpHbDBMV0Z3Y0hKdmRtRnNMWEJsY20xcGMzTnBiMjVmWDJWa2FYUXRjMlZqZEdsdmJsOWZiM0IwYVc5dUxXUmxjMk55YVhCMGFXOXVYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0ozTndaVzVrVEdsdGFYUlNaWEYxWlhOMFpXUkNlU2NzSUZ0dmNtbG5hVzVkS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aVpXUnBkQzFoY0hCeWIzWmhiQzF3WlhKdGFYTnphVzl1WDE5bFpHbDBMWE5sWTNScGIyNWZYMjl3ZEdsdmJpMTJZV3gxWlZ3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGdKSHRPZFcxaVpYSW9kRzlyWlc1QmJXOTFiblFwZlNBa2UzUnZhMlZ1VTNsdFltOXNmV0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6YzA1aGJXVTlYQ0psWkdsMExXRndjSEp2ZG1Gc0xYQmxjbTFwYzNOcGIyNWZYMlZrYVhRdGMyVmpkR2x2Ymw5ZmIzQjBhVzl1WENJK1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltVmthWFF0WVhCd2NtOTJZV3d0Y0dWeWJXbHpjMmx2Ymw5ZlpXUnBkQzF6WldOMGFXOXVYMTl5WVdScGJ5MWlkWFIwYjI1Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yUFhzb0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2V5QnpaV3hsWTNSbFpFOXdkR2x2YmtselZXNXNhVzFwZEdWa09pQm1ZV3h6WlNCOUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUyTnNZWE56Ym1GdFpYTW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJWa2FYUXRZWEJ3Y205MllXd3RjR1Z5YldsemMybHZibDlmWldScGRDMXpaV04wYVc5dVgxOXlZV1JwYnkxaWRYUjBiMjR0YjNWMGJHbHVaU2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxiR1ZqZEdWa1QzQjBhVzl1U1hOVmJteHBiV2wwWldRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5aV1JwZEMxaGNIQnliM1poYkMxd1pYSnRhWE56YVc5dVgxOWxaR2wwTFhObFkzUnBiMjVmWDNKaFpHbHZMV0oxZEhSdmJpMXZkWFJzYVc1bExTMXpaV3hsWTNSbFpDYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNGelpXeGxZM1JsWkU5d2RHbHZia2x6Vlc1c2FXMXBkR1ZrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW1Wa2FYUXRZWEJ3Y205MllXd3RjR1Z5YldsemMybHZibDlmWldScGRDMXpaV04wYVc5dVgxOXlZV1JwYnkxaWRYUjBiMjR0Wm1sc2JGd2lJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHNoYzJWc1pXTjBaV1JQY0hScGIyNUpjMVZ1YkdsdGFYUmxaQ0FtSmlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKbFpHbDBMV0Z3Y0hKdmRtRnNMWEJsY20xcGMzTnBiMjVmWDJWa2FYUXRjMlZqZEdsdmJsOWZjbUZrYVc4dFluVjBkRzl1TFdSdmRGd2lJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2laV1JwZEMxaGNIQnliM1poYkMxd1pYSnRhWE56YVc5dVgxOWxaR2wwTFhObFkzUnBiMjVmWDI5d2RHbHZiaTEwWlhoMFhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGthWFpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5ZTJOc1lYTnpibUZ0WlhNb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMlZrYVhRdFlYQndjbTkyWVd3dGNHVnliV2x6YzJsdmJsOWZaV1JwZEMxelpXTjBhVzl1WDE5dmNIUnBiMjR0YkdGaVpXd25PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXeGxZM1JsWkU5d2RHbHZia2x6Vlc1c2FXMXBkR1ZrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oyVmthWFF0WVhCd2NtOTJZV3d0Y0dWeWJXbHpjMmx2Ymw5ZlpXUnBkQzF6WldOMGFXOXVYMTl2Y0hScGIyNHRiR0ZpWld3dExYTmxiR1ZqZEdWa0p6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSVhObGJHVmpkR1ZrVDNCMGFXOXVTWE5WYm14cGJXbDBaV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2RDZ25ZM1Z6ZEc5dFUzQmxibVJNYVcxcGRDY3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6YzA1aGJXVTlYQ0psWkdsMExXRndjSEp2ZG1Gc0xYQmxjbTFwYzNOcGIyNWZYMlZrYVhRdGMyVmpkR2x2Ymw5ZmIzQjBhVzl1TFdSbGMyTnlhWEIwYVc5dVhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlM1FvSjJWdWRHVnlUV0Y0VTNCbGJtUk1hVzFwZENjcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSmxaR2wwTFdGd2NISnZkbUZzTFhCbGNtMXBjM05wYjI1ZlgyVmthWFF0YzJWamRHbHZibDlmYjNCMGFXOXVMV2x1Y0hWMFhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRlJsZUhSR2FXVnNaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUMWNJbTUxYldKbGNsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YkdGalpXaHZiR1JsY2oxN1lDUjdUblZ0WW1WeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhOMGIyMVViMnRsYmtGdGIzVnVkQ0I4ZkNCMGIydGxia0Z0YjNWdWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2w5SUNSN2RHOXJaVzVUZVcxaWIyeDlZSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVEyaGhibWRsUFhzb1pYWmxiblFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJUZEdGMFpTaDdJR04xYzNSdmJWTndaVzVrVEdsdGFYUTZJR1YyWlc1MExuUmhjbWRsZEM1MllXeDFaU0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hObGJHVmpkR1ZrVDNCMGFXOXVTWE5WYm14cGJXbDBaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtIc2djMlZzWldOMFpXUlBjSFJwYjI1SmMxVnViR2x0YVhSbFpEb2dabUZzYzJVZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtZFd4c1YybGtkR2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGNtZHBiajFjSW1SbGJuTmxYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxQWHQwYUdsekxuTjBZWFJsTG1OMWMzUnZiVk53Wlc1a1RHbHRhWFI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGNuSnZjajE3WlhKeWIzSjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQXBPMXh1SUNCOVhHNWNiaUFnZG1Gc2FXUmhkR1ZUY0dWdVpFeHBiV2wwS0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnZENCOUlEMGdkR2hwY3k1amIyNTBaWGgwTzF4dUlDQWdJR052Ym5OMElIc2daR1ZqYVcxaGJITXNJSEpsY1hWcGNtVmtUV2x1YVcxMWJTQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0JqYjI1emRDQjdJSE5sYkdWamRHVmtUM0IwYVc5dVNYTlZibXhwYldsMFpXUXNJR04xYzNSdmJWTndaVzVrVEdsdGFYUWdmU0E5SUhSb2FYTXVjM1JoZEdVN1hHNWNiaUFnSUNCcFppQW9jMlZzWldOMFpXUlBjSFJwYjI1SmMxVnViR2x0YVhSbFpDQjhmQ0FoWTNWemRHOXRVM0JsYm1STWFXMXBkQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnWTNWemRHOXRVM0JsYm1STWFXMXBkRTUxYldKbGNqdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdZM1Z6ZEc5dFUzQmxibVJNYVcxcGRFNTFiV0psY2lBOUlHNWxkeUJDYVdkT2RXMWlaWElvWTNWemRHOXRVM0JsYm1STWFXMXBkQ2s3WEc0Z0lDQWdmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lHeHZaeTVrWldKMVp5aGdSWEp5YjNJZ1kyOXVkbVZ5ZEdsdVp5QW5KSHRqZFhOMGIyMVRjR1Z1WkV4cGJXbDBmU2NnZEc4Z1FtbG5UblZ0WW1WeU9tQXNJR1Z5Y205eUtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMEtDZHpjR1Z1WkV4cGJXbDBTVzUyWVd4cFpDY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hqZFhOMGIyMVRjR1Z1WkV4cGJXbDBUblZ0WW1WeUxtbHpUbVZuWVhScGRtVW9LU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFFvSjNOd1pXNWtUR2x0YVhSSmJuWmhiR2xrSnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdiV0Y0Vkc5clpXNUJiVzkxYm5RZ1BTQmpZV3hqVkc5clpXNUJiVzkxYm5Rb1RVRllYMVZPVTBsSFRrVkVYekkxTmw5SlRsUXNJR1JsWTJsdFlXeHpLVHRjYmlBZ0lDQnBaaUFvWTNWemRHOXRVM0JsYm1STWFXMXBkRTUxYldKbGNpNW5jbVZoZEdWeVZHaGhiaWh0WVhoVWIydGxia0Z0YjNWdWRDa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBLQ2R6Y0dWdVpFeHBiV2wwVkc5dlRHRnlaMlVuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1hHNGdJQ0FnSUNCeVpYRjFhWEpsWkUxcGJtbHRkVzBnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KbHh1SUNBZ0lDQWdZM1Z6ZEc5dFUzQmxibVJNYVcxcGRFNTFiV0psY2k1c1pYTnpWR2hoYmloeVpYRjFhWEpsWkUxcGJtbHRkVzBwWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkQ2duYzNCbGJtUk1hVzFwZEVsdWMzVm1abWxqYVdWdWRDY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCMWJtUmxabWx1WldRN1hHNGdJSDFjYmx4dUlDQnlaVzVrWlhJb0tTQjdYRzRnSUNBZ1kyOXVjM1FnZXlCMElIMGdQU0IwYUdsekxtTnZiblJsZUhRN1hHNGdJQ0FnWTI5dWMzUWdleUJ6WlhSRGRYTjBiMjFCYlc5MWJuUXNJR2hwWkdWTmIyUmhiQ3dnWTNWemRHOXRWRzlyWlc1QmJXOTFiblFnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzRnSUNBZ1kyOXVjM1FnZXlCelpXeGxZM1JsWkU5d2RHbHZia2x6Vlc1c2FXMXBkR1ZrTENCamRYTjBiMjFUY0dWdVpFeHBiV2wwSUgwZ1BTQjBhR2x6TG5OMFlYUmxPMXh1WEc0Z0lDQWdZMjl1YzNRZ1pYSnliM0lnUFNCMGFHbHpMblpoYkdsa1lYUmxVM0JsYm1STWFXMXBkQ2dwTzF4dUlDQWdJR052Ym5OMElHUnBjMkZpYkdWa0lEMGdRbTl2YkdWaGJpaGNiaUFnSUNBZ0lDaGpkWE4wYjIxVGNHVnVaRXhwYldsMElEMDlQU0JqZFhOMGIyMVViMnRsYmtGdGIzVnVkQ0FtSmlBaGMyVnNaV04wWldSUGNIUnBiMjVKYzFWdWJHbHRhWFJsWkNrZ2ZIeGNiaUFnSUNBZ0lDQWdaWEp5YjNJc1hHNGdJQ0FnS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4VFc5a1lXeGNiaUFnSUNBZ0lDQWdiMjVUZFdKdGFYUTlleWdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0J6WlhSRGRYTjBiMjFCYlc5MWJuUW9jMlZzWldOMFpXUlBjSFJwYjI1SmMxVnViR2x0YVhSbFpDQS9JQ2NuSURvZ1kzVnpkRzl0VTNCbGJtUk1hVzFwZENrN1hHNGdJQ0FnSUNBZ0lDQWdhR2xrWlUxdlpHRnNLQ2s3WEc0Z0lDQWdJQ0FnSUgxOVhHNGdJQ0FnSUNBZ0lITjFZbTFwZEZSbGVIUTllM1FvSjNOaGRtVW5LWDFjYmlBZ0lDQWdJQ0FnWTI5dWRHVnVkRU5zWVhOelBWd2laV1JwZEMxaGNIQnliM1poYkMxd1pYSnRhWE56YVc5dUxXMXZaR0ZzTFdOdmJuUmxiblJjSWx4dUlDQWdJQ0FnSUNCamIyNTBZV2x1WlhKRGJHRnpjejFjSW1Wa2FYUXRZWEJ3Y205MllXd3RjR1Z5YldsemMybHZiaTF0YjJSaGJDMWpiMjUwWVdsdVpYSmNJbHh1SUNBZ0lDQWdJQ0J6ZFdKdGFYUkVhWE5oWW14bFpEMTdaR2x6WVdKc1pXUjlYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJSHQwYUdsekxuSmxibVJsY2sxdlpHRnNRMjl1ZEdWdWRDaGxjbkp2Y2lsOVhHNGdJQ0FnSUNBOEwwMXZaR0ZzUGx4dUlDQWdJQ2s3WEc0Z0lIMWNibjFjYmlJc0ltbHRjRzl5ZENCN0lHTnZibTVsWTNRZ2ZTQm1jbTl0SUNkeVpXRmpkQzF5WldSMWVDYzdYRzVwYlhCdmNuUWdleUJqYjIxd2IzTmxJSDBnWm5KdmJTQW5jbVZrZFhnbk8xeHVhVzF3YjNKMElIZHBkR2hOYjJSaGJGQnliM0J6SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJobGJIQmxjbk12YUdsbmFHVnlMVzl5WkdWeUxXTnZiWEJ2Ym1WdWRITXZkMmwwYUMxdGIyUmhiQzF3Y205d2N5YzdYRzVwYlhCdmNuUWdleUJuWlhSVFpXeGxZM1JsWkVsa1pXNTBhWFI1SUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmMyVnNaV04wYjNKekp6dGNibWx0Y0c5eWRDQkZaR2wwUVhCd2NtOTJZV3hRWlhKdGFYTnphVzl1SUdaeWIyMGdKeTR2WldScGRDMWhjSEJ5YjNaaGJDMXdaWEp0YVhOemFXOXVMbU52YlhCdmJtVnVkQ2M3WEc1Y2JtTnZibk4wSUcxaGNGTjBZWFJsVkc5UWNtOXdjeUE5SUNoemRHRjBaU2tnUFQ0Z2UxeHVJQ0JqYjI1emRDQnRiMlJoYkZOMFlYUmxVSEp2Y0hNZ1BTQnpkR0YwWlM1aGNIQlRkR0YwWlM1dGIyUmhiQzV0YjJSaGJGTjBZWFJsTG5CeWIzQnpJSHg4SUh0OU8xeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lITmxiR1ZqZEdWa1NXUmxiblJwZEhrNklHZGxkRk5sYkdWamRHVmtTV1JsYm5ScGRIa29jM1JoZEdVcExGeHVJQ0FnSUM0dUxtMXZaR0ZzVTNSaGRHVlFjbTl3Y3l4Y2JpQWdmVHRjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnZiWEJ2YzJVb1hHNGdJSGRwZEdoTmIyUmhiRkJ5YjNCekxGeHVJQ0JqYjI1dVpXTjBLRzFoY0ZOMFlYUmxWRzlRY205d2N5a3NYRzRwS0VWa2FYUkJjSEJ5YjNaaGJGQmxjbTFwYzNOcGIyNHBPMXh1SWl3aVpYaHdiM0owSUhzZ1pHVm1ZWFZzZENCOUlHWnliMjBnSnk0dlpXUnBkQzFoY0hCeWIzWmhiQzF3WlhKdGFYTnphVzl1TG1OdmJuUmhhVzVsY2ljN1hHNGlMQ0pwYlhCdmNuUWdVbVZoWTNRc0lIc2dkWE5sUTI5dWRHVjRkQ3dnZFhObFUzUmhkR1VnZlNCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJSHNnZFhObFUyVnNaV04wYjNJc0lIVnpaVVJwYzNCaGRHTm9JSDBnWm5KdmJTQW5jbVZoWTNRdGNtVmtkWGduTzF4dWFXMXdiM0owSUhkcGRHaE5iMlJoYkZCeWIzQnpJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZhR2xuYUdWeUxXOXlaR1Z5TFdOdmJYQnZibVZ1ZEhNdmQybDBhQzF0YjJSaGJDMXdjbTl3Y3ljN1hHNXBiWEJ2Y25RZ1FtOTRJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMMkp2ZUNjN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JDWVc1dVpYSkJiR1Z5ZEN4Y2JpQWdRblYwZEc5dVNXTnZiaXhjYmlBZ1FuVjBkRzl1VEdsdWF5eGNiaUFnUW5WMGRHOXVVSEpwYldGeWVTeGNiaUFnUW5WMGRHOXVVMlZqYjI1a1lYSjVMRnh1SUNCR2IzSnRWR1Y0ZEVacFpXeGtMRnh1SUNCSlkyOXVMRnh1SUNCSlkyOXVUbUZ0WlN4Y2JpQWdTV052YmxOcGVtVXNYRzRnSUV4aFltVnNMRnh1SUNCVVpYaDBMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlqYjIxd2IyNWxiblF0YkdsaWNtRnllU2M3WEc1cGJYQnZjblFnZTF4dUlDQkJiR2xuYmtsMFpXMXpMRnh1SUNCRVNWTlFURUZaTEZ4dUlDQkdURVZZWDBSSlVrVkRWRWxQVGl4Y2JpQWdTV052YmtOdmJHOXlMRnh1SUNCS2RYTjBhV1o1UTI5dWRHVnVkQ3hjYmlBZ1UwVldSVkpKVkVsRlV5eGNiaUFnVTJsNlpTeGNiaUFnVkdWNGRFRnNhV2R1TEZ4dUlDQlVaWGgwVm1GeWFXRnVkQ3hjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5amIyNXpkR0Z1ZEhNdlpHVnphV2R1TFhONWMzUmxiU2M3WEc1cGJYQnZjblFnZXlCMWMyVkpNVGh1UTI5dWRHVjRkQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJodmIydHpMM1Z6WlVreE9HNURiMjUwWlhoMEp6dGNibWx0Y0c5eWRDQkRhR1ZqYTBKdmVDQm1jbTl0SUNjdUxpOHVMaTh1TGk5MWFTOWphR1ZqYXkxaWIzZ25PMXh1YVcxd2IzSjBJSHNnYzJWMFJHbHpZV0pzWldSU2NHTk5aWFJvYjJSUWNtVm1aWEpsYm1ObElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZjM1J2Y21VdllXTjBhVzl1Y3ljN1hHNXBiWEJ2Y25RZ2V5Qm5aWFJFYVhOaFlteGxaRkp3WTAxbGRHaHZaRkJ5WldabGNtVnVZMlZ6SUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmMyVnNaV04wYjNKekp6dGNibWx0Y0c5eWRDQjdYRzRnSUUxbGRHRk5aWFJ5YVdOelJYWmxiblJEWVhSbFoyOXllU3hjYmlBZ1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEU1aGJXVXNYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmJXVjBZVzFsZEhKcFkzTW5PMXh1YVcxd2IzSjBJSHNnVFdWMFlVMWxkSEpwWTNORGIyNTBaWGgwSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dlkyOXVkR1Y0ZEhNdmJXVjBZVzFsZEhKcFkzTW5PMXh1WEc1amIyNXpkQ0JGZEdoVGFXZHVUVzlrWVd3Z1BTQW9leUJvYVdSbFRXOWtZV3dnZlNrZ1BUNGdlMXh1SUNCamIyNXpkQ0JiYVhORmRHaFRhV2R1UTJobFkydGxaQ3dnYzJWMFNYTkZkR2hUYVdkdVEyaGxZMnRsWkYwZ1BTQjFjMlZUZEdGMFpTaG1ZV3h6WlNrN1hHNGdJR052Ym5OMElGdHphRzkzVkdWNGRFWnBaV3hrTENCelpYUlRhRzkzVkdWNGRFWnBaV3hrWFNBOUlIVnpaVk4wWVhSbEtHWmhiSE5sS1R0Y2JpQWdZMjl1YzNRZ1cybHVjSFYwUzJWNWQyOXlaQ3dnYzJWMFNXNXdkWFJMWlhsM2IzSmtYU0E5SUhWelpWTjBZWFJsS0NjbktUdGNiaUFnWTI5dWMzUWdaR2x6WVdKc1pXUlNjR05OWlhSb2IyUlFjbVZtWlhKbGJtTmxjeUE5SUhWelpWTmxiR1ZqZEc5eUtGeHVJQ0FnSUdkbGRFUnBjMkZpYkdWa1VuQmpUV1YwYUc5a1VISmxabVZ5Wlc1alpYTXNYRzRnSUNrN1hHNWNiaUFnWTI5dWMzUWdkQ0E5SUhWelpVa3hPRzVEYjI1MFpYaDBLQ2s3WEc0Z0lHTnZibk4wSUdScGMzQmhkR05vSUQwZ2RYTmxSR2x6Y0dGMFkyZ29LVHRjYmlBZ1kyOXVjM1FnZEhKaFkydEZkbVZ1ZENBOUlIVnpaVU52Ym5SbGVIUW9UV1YwWVUxbGRISnBZM05EYjI1MFpYaDBLVHRjYmx4dUlDQmpiMjV6ZENCb1lXNWtiR1ZUZFdKdGFYUWdQU0FvS1NBOVBpQjdYRzRnSUNBZ1pHbHpjR0YwWTJnb1hHNGdJQ0FnSUNCelpYUkVhWE5oWW14bFpGSndZMDFsZEdodlpGQnlaV1psY21WdVkyVW9YRzRnSUNBZ0lDQWdJQ2RsZEdoZmMybG5iaWNzWEc0Z0lDQWdJQ0FnSUNGa2FYTmhZbXhsWkZKd1kwMWxkR2h2WkZCeVpXWmxjbVZ1WTJWekxtVjBhRjl6YVdkdUxGeHVJQ0FnSUNBZ0tTeGNiaUFnSUNBcE8xeHVJQ0FnSUdocFpHVk5iMlJoYkNncE8xeHVJQ0I5TzF4dVhHNGdJR052Ym5OMElHbHpWbUZzYVdRZ1BTQnBibkIxZEV0bGVYZHZjbVFnUFQwOUlIUW9KM1J2WjJkc1pVVjBhRk5wWjI1TmIyUmhiRVp2Y20xV1lXeHBaR0YwYVc5dUp5azdYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdQRUp2ZUZ4dUlDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aVpYUm9MWE5wWjI0dGJXOWtZV3hjSWx4dUlDQWdJQ0FnWkdsemNHeGhlVDE3UkVsVFVFeEJXUzVHVEVWWWZWeHVJQ0FnSUNBZ1pteGxlRVJwY21WamRHbHZiajE3Umt4RldGOUVTVkpGUTFSSlQwNHVRMDlNVlUxT2ZWeHVJQ0FnSUNBZ2FuVnpkR2xtZVVOdmJuUmxiblE5ZTBwMWMzUnBabmxEYjI1MFpXNTBMbVpzWlhoVGRHRnlkSDFjYmlBZ0lDQWdJSEJoWkdScGJtYzllelI5WEc0Z0lDQWdQbHh1SUNBZ0lDQWdQRUp2ZUZ4dUlDQWdJQ0FnSUNCa2FYTndiR0Y1UFh0RVNWTlFURUZaTGtaTVJWaDlYRzRnSUNBZ0lDQWdJR1pzWlhoRWFYSmxZM1JwYjI0OWUwWk1SVmhmUkVsU1JVTlVTVTlPTGxKUFYzMWNiaUFnSUNBZ0lDQWdiV0Z5WjJsdVFtOTBkRzl0UFhzMGZWeHVJQ0FnSUNBZ0lDQnFkWE4wYVdaNVEyOXVkR1Z1ZEQxN1NuVnpkR2xtZVVOdmJuUmxiblF1WTJWdWRHVnlmVnh1SUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0E4U1dOdmJseHVJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW1WMGFDMXphV2R1TFcxdlpHRnNYMTkzWVhKdWFXNW5MV2xqYjI1Y0lseHVJQ0FnSUNBZ0lDQWdJRzVoYldVOWUwbGpiMjVPWVcxbExrUmhibWRsY24xY2JpQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxN1NXTnZia052Ykc5eUxtVnljbTl5UkdWbVlYVnNkSDFjYmlBZ0lDQWdJQ0FnSUNCemFYcGxQWHRKWTI5dVUybDZaUzVNWjMxY2JpQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdQRUoxZEhSdmJrbGpiMjVjYmlBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSmxkR2d0YzJsbmJpMXRiMlJoYkY5ZlkyeHZjMlZjSWx4dUlDQWdJQ0FnSUNBZ0lHbGpiMjVPWVcxbFBYdEpZMjl1VG1GdFpTNURiRzl6WlgxY2JpQWdJQ0FnSUNBZ0lDQnphWHBsUFh0VGFYcGxMbE5OZlZ4dUlDQWdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWV5Z3BJRDArSUdocFpHVk5iMlJoYkNncGZWeHVJQ0FnSUNBZ0lDQWdJR0Z5YVdGTVlXSmxiRDE3ZENnblkyeHZjMlVuS1gxY2JpQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lEd3ZRbTk0UGx4dVhHNGdJQ0FnSUNBOFZHVjRkRnh1SUNBZ0lDQWdJQ0IyWVhKcFlXNTBQWHRVWlhoMFZtRnlhV0Z1ZEM1b1pXRmthVzVuVFdSOVhHNGdJQ0FnSUNBZ0lIUmxlSFJCYkdsbmJqMTdWR1Y0ZEVGc2FXZHVMa05sYm5SbGNuMWNiaUFnSUNBZ0lDQWdiV0Z5WjJsdVFtOTBkRzl0UFhzMmZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQjdkQ2duZEc5bloyeGxSWFJvVTJsbmJrMXZaR0ZzVkdsMGJHVW5LWDFjYmlBZ0lDQWdJRHd2VkdWNGRENWNiaUFnSUNBZ0lEeFVaWGgwSUhaaGNtbGhiblE5ZTFSbGVIUldZWEpwWVc1MExtSnZaSGxOWkgwK1hHNGdJQ0FnSUNBZ0lIdDBLQ2QwYjJkbmJHVkZkR2hUYVdkdVRXOWtZV3hFWlhOamNtbHdkR2x2YmljcGZWeHVJQ0FnSUNBZ0lDQThRblYwZEc5dVRHbHVhMXh1SUNBZ0lDQWdJQ0FnSUdoeVpXWTlYQ0pvZEhSd2N6b3ZMM04xY0hCdmNuUXViV1YwWVcxaGMyc3VhVzh2YUdNdlpXNHRkWE12WVhKMGFXTnNaWE12TVRRM05qUXhOakUwTWpFME5qZGNJbHh1SUNBZ0lDQWdJQ0FnSUdWNGRHVnlibUZzVEdsdWExeHVJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnZTNRb0oyeGxZWEp1VFc5eVpWVndjR1Z5UTJGelpTY3BmVnh1SUNBZ0lDQWdJQ0E4TDBKMWRIUnZia3hwYm1zK1hHNGdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdJQ0E4UW1GdWJtVnlRV3hsY25RZ2MyVjJaWEpwZEhrOWUxTkZWa1ZTU1ZSSlJWTXVSRUZPUjBWU2ZTQnRZWEpuYVc1VWIzQTllelo5SUcxaGNtZHBia0p2ZEhSdmJUMTdObjArWEc0Z0lDQWdJQ0FnSUh0MEtDZDBiMmRuYkdWRmRHaFRhV2R1VFc5a1lXeENZVzV1WlhKVVpYaDBKeWw5WEc0Z0lDQWdJQ0FnSUh0MEtDZDBiMmRuYkdWRmRHaFRhV2R1VFc5a1lXeENZVzV1WlhKQ2IyeGtWR1Y0ZENjcGZWeHVJQ0FnSUNBZ1BDOUNZVzV1WlhKQmJHVnlkRDVjYmlBZ0lDQWdJSHR6YUc5M1ZHVjRkRVpwWld4a0lEOGdLRnh1SUNBZ0lDQWdJQ0E4Um05eWJWUmxlSFJHYVdWc1pGeHVJQ0FnSUNBZ0lDQWdJR2xrUFZ3aVpXNTBaWEl0WlhSb0xYTnBaMjR0ZEdWNGRGd2lYRzRnSUNBZ0lDQWdJQ0FnYkdGaVpXdzllM1FvSjNSdloyZHNaVVYwYUZOcFoyNU5iMlJoYkVadmNtMU1ZV0psYkNjcGZWeHVJQ0FnSUNBZ0lDQWdJR1Z5Y205eVBYdHBibkIxZEV0bGVYZHZjbVF1YkdWdVozUm9JRDRnTUNBbUppQWhhWE5XWVd4cFpIMWNiaUFnSUNBZ0lDQWdJQ0JvWld4d1ZHVjRkRDE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibkIxZEV0bGVYZHZjbVF1YkdWdVozUm9JRDRnTUNBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSVdselZtRnNhV1FnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJSFFvSjNSdloyZHNaVVYwYUZOcFoyNU5iMlJoYkVadmNtMUZjbkp2Y2ljcFhHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUc5dVEyaGhibWRsUFhzb1pYWmxiblFwSUQwK0lITmxkRWx1Y0hWMFMyVjVkMjl5WkNobGRtVnVkQzUwWVhKblpYUXVkbUZzZFdVcGZWeHVJQ0FnSUNBZ0lDQWdJSFpoYkhWbFBYdHBibkIxZEV0bGVYZHZjbVI5WEc0Z0lDQWdJQ0FnSUNBZ2IyNVFZWE4wWlQxN0tHVjJaVzUwS1NBOVBpQmxkbVZ1ZEM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwZlZ4dUlDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0tTQTZJQ2hjYmlBZ0lDQWdJQ0FnUEVKdmVGeHVJQ0FnSUNBZ0lDQWdJR1pzWlhoRWFYSmxZM1JwYjI0OWUwWk1SVmhmUkVsU1JVTlVTVTlPTGxKUFYzMWNiaUFnSUNBZ0lDQWdJQ0JoYkdsbmJrbDBaVzF6UFh0QmJHbG5ia2wwWlcxekxtWnNaWGhUZEdGeWRIMWNiaUFnSUNBZ0lDQWdJQ0JuWVhBOWV6SjlYRzRnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBOFEyaGxZMnRDYjNoY2JpQWdJQ0FnSUNBZ0lDQWdJR2xrUFZ3aVpYUm9MWE5wWjI1ZlgyTm9aV05yWW05NFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltVjBhQzF6YVdkdVgxOWphR1ZqYTJKdmVGd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhWR1Z6ZEVsa1BWd2laWFJvTFhOcFoyNWZYMk5vWldOclltOTRYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9aV05yWldROWUybHpSWFJvVTJsbmJrTm9aV05yWldSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmtOc2FXTnJQWHNvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkRWx6UlhSb1UybG5ia05vWldOclpXUW9JV2x6UlhSb1UybG5ia05vWldOclpXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBZ0lEeE1ZV0psYkNCb2RHMXNSbTl5UFZ3aVpYUm9MWE5wWjI1ZlgyTm9aV05yWW05NFhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkQ0IyWVhKcFlXNTBQWHRVWlhoMFZtRnlhV0Z1ZEM1aWIyUjVUV1I5SUdGelBWd2ljM0JoYmx3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2RDZ25kRzluWjJ4bFJYUm9VMmxuYmsxdlpHRnNRMmhsWTJ0Q2IzZ25LWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZWR1Y0ZEQ1Y2JpQWdJQ0FnSUNBZ0lDQThMMHhoWW1Wc1BseHVJQ0FnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBOFFtOTRYRzRnSUNBZ0lDQWdJR1JwYzNCc1lYazllMFJKVTFCTVFWa3VSa3hGV0gxY2JpQWdJQ0FnSUNBZ1pteGxlRVJwY21WamRHbHZiajE3Umt4RldGOUVTVkpGUTFSSlQwNHVVazlYZlZ4dUlDQWdJQ0FnSUNCcWRYTjBhV1o1UTI5dWRHVnVkRDE3U25WemRHbG1lVU52Ym5SbGJuUXVjM0JoWTJWQ1pYUjNaV1Z1ZlZ4dUlDQWdJQ0FnSUNCbllYQTllelI5WEc0Z0lDQWdJQ0FnSUcxaGNtZHBibFJ2Y0QxN05uMWNiaUFnSUNBZ0lENWNiaUFnSUNBZ0lDQWdQRUoxZEhSdmJsTmxZMjl1WkdGeWVTQnZia05zYVdOclBYc29LU0E5UGlCb2FXUmxUVzlrWVd3b0tYMGdjMmw2WlQxN1UybDZaUzVNUjMwZ1lteHZZMnMrWEc0Z0lDQWdJQ0FnSUNBZ2UzUW9KMk5oYm1ObGJDY3BmVnh1SUNBZ0lDQWdJQ0E4TDBKMWRIUnZibE5sWTI5dVpHRnllVDVjYmlBZ0lDQWdJQ0FnZTNOb2IzZFVaWGgwUm1sbGJHUWdQeUFvWEc0Z0lDQWdJQ0FnSUNBZ1BFSjFkSFJ2YmxCeWFXMWhjbmxjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhibWRsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZbXh2WTJ0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JwYzJGaWJHVmtQWHNoYVhOV1lXeHBaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWUyaGhibVJzWlZOMVltMXBkSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lITnBlbVU5ZTFOcGVtVXVURWQ5WEc0Z0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0oyVnVZV0pzWlZOdVlYQW5LWDFjYmlBZ0lDQWdJQ0FnSUNBOEwwSjFkSFJ2YmxCeWFXMWhjbmsrWEc0Z0lDQWdJQ0FnSUNrZ09pQW9YRzRnSUNBZ0lDQWdJQ0FnUEVKMWRIUnZibEJ5YVcxaGNubGNiaUFnSUNBZ0lDQWdJQ0FnSUdKc2IyTnJYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYTmhZbXhsWkQxN0lXbHpSWFJvVTJsbmJrTm9aV05yWldSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6YVhwbFBYdFRhWHBsTGt4SGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1RGJHbGphejE3S0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWFJUYUc5M1ZHVjRkRVpwWld4a0tIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwY21GamEwVjJaVzUwS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYUmxaMjl5ZVRvZ1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEVOaGRHVm5iM0o1TGxObGRIUnBibWR6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBUbUZ0WlM1UGJtSnZZWEprYVc1blYyRnNiR1YwUVdSMllXNWpaV1JUWlhSMGFXNW5jeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBhV1Z6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNiMk5oZEdsdmJqb2dKMU5sZEhScGJtZHpKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdVlXSnNaVjlsZEdoZmMybG5iam9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdlM1FvSjJOdmJuUnBiblZsSnlsOVhHNGdJQ0FnSUNBZ0lDQWdQQzlDZFhSMGIyNVFjbWx0WVhKNVBseHVJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnUEM5Q2IzZytYRzRnSUNrN1hHNTlPMXh1WEc1RmRHaFRhV2R1VFc5a1lXd3VjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQXZMeUJVYUdVZ1puVnVZM1JwYjI0Z2RHOGdZMnh2YzJVZ2RHaGxJRTF2WkdGc1hHNGdJR2hwWkdWTmIyUmhiRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzU5TzF4dVpYaHdiM0owSUdSbFptRjFiSFFnZDJsMGFFMXZaR0ZzVUhKdmNITW9SWFJvVTJsbmJrMXZaR0ZzS1R0Y2JpSXNJbWx0Y0c5eWRDQnNiMmNnWm5KdmJTQW5iRzluYkdWMlpXd25PMXh1YVcxd2IzSjBJRkpsWVdOMExDQjdJSFZ6WlVOdmJuUmxlSFFzSUhWelpVVm1abVZqZEN3Z2RYTmxVM1JoZEdVZ2ZTQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUhkcGRHaE5iMlJoYkZCeWIzQnpJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZhR2xuYUdWeUxXOXlaR1Z5TFdOdmJYQnZibVZ1ZEhNdmQybDBhQzF0YjJSaGJDMXdjbTl3Y3ljN1hHNXBiWEJ2Y25RZ1FtOTRJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMMkp2ZUNjN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JDVlZSVVQwNWZVMGxhUlZNc1hHNGdJRUpWVkZSUFRsOVdRVkpKUVU1VUxGeHVJQ0JDWVc1dVpYSkJiR1Z5ZEN4Y2JpQWdRblYwZEc5dUxGeHVJQ0JVWlhoMExGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOWpiMjF3YjI1bGJuUXRiR2xpY21GeWVTYzdYRzVwYlhCdmNuUWdRV05qYjNWdWRFMXZaR0ZzUTI5dWRHRnBibVZ5SUdaeWIyMGdKeTR1TDJGalkyOTFiblF0Ylc5a1lXd3RZMjl1ZEdGcGJtVnlKenRjYm1sdGNHOXlkQ0I3SUhSdlEyaGxZMnR6ZFcxSVpYaEJaR1J5WlhOeklIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZMaTR2YzJoaGNtVmtMMjF2WkhWc1pYTXZhR1Y0YzNSeWFXNW5MWFYwYVd4ekp6dGNibWx0Y0c5eWRDQjdYRzRnSUUxbGRHRk5aWFJ5YVdOelJYWmxiblJEWVhSbFoyOXllU3hjYmlBZ1RXVjBZVTFsZEhKcFkzTkZkbVZ1ZEV0bGVWUjVjR1VzWEc0Z0lFMWxkR0ZOWlhSeWFXTnpSWFpsYm5ST1lXMWxMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwyMWxkR0Z0WlhSeWFXTnpKenRjYm1sdGNHOXlkQ0JJYjJ4a1ZHOVNaWFpsWVd4TmIyUmhiQ0JtY205dElDY3VMaTlvYjJ4a0xYUnZMWEpsZG1WaGJDMXRiMlJoYkM5b2IyeGtMWFJ2TFhKbGRtVmhiQzF0YjJSaGJDYzdYRzVwYlhCdmNuUWdleUJOWlhSaFRXVjBjbWxqYzBOdmJuUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5amIyNTBaWGgwY3k5dFpYUmhiV1YwY21samN5YzdYRzVwYlhCdmNuUWdleUIxYzJWSk1UaHVRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmh2YjJ0ekwzVnpaVWt4T0c1RGIyNTBaWGgwSnp0Y2JtbHRjRzl5ZENCN1hHNGdJRUpNVDBOTFgxTkpXa1ZUTEZ4dUlDQkNiM0prWlhKRGIyeHZjaXhjYmlBZ1FtOXlaR1Z5VTNSNWJHVXNYRzRnSUVOdmJHOXlMRnh1SUNCRVNWTlFURUZaTEZ4dUlDQkdURVZZWDBSSlVrVkRWRWxQVGl4Y2JpQWdSazlPVkY5WFJVbEhTRlFzWEc0Z0lFcDFjM1JwWm5sRGIyNTBaVzUwTEZ4dUlDQlVaWGgwVm1GeWFXRnVkQ3hjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5amIyNXpkR0Z1ZEhNdlpHVnphV2R1TFhONWMzUmxiU2M3WEc1cGJYQnZjblFnVUhKcGRtRjBaVXRsZVVScGMzQnNZWGtnWm5KdmJTQW5MaTl3Y21sMllYUmxMV3RsZVNjN1hHNXBiWEJ2Y25RZ1VHRnpjM2R2Y21SSmJuQjFkQ0JtY205dElDY3VMM0JoYzNOM2IzSmtMV2x1Y0hWMEp6dGNibHh1WTI5dWMzUWdSWGh3YjNKMFVISnBkbUYwWlV0bGVVMXZaR0ZzSUQwZ0tIdGNiaUFnWTJ4bFlYSkJZMk52ZFc1MFJHVjBZV2xzY3l4Y2JpQWdhR2xrWlZkaGNtNXBibWNzWEc0Z0lHVjRjRzl5ZEVGalkyOTFiblFzWEc0Z0lITmxiR1ZqZEdWa1NXUmxiblJwZEhrc1hHNGdJSE5vYjNkQlkyTnZkVzUwUkdWMFlXbHNUVzlrWVd3c1hHNGdJR2hwWkdWTmIyUmhiQ3hjYmlBZ2QyRnlibWx1WnlBOUlHNTFiR3dzWEc0Z0lIQnlaWFpwYjNWelRXOWtZV3hUZEdGMFpTeGNibjBwSUQwK0lIdGNiaUFnWTI5dWMzUWdXM0JoYzNOM2IzSmtMQ0J6WlhSUVlYTnpkMjl5WkYwZ1BTQjFjMlZUZEdGMFpTZ25KeWs3WEc0Z0lHTnZibk4wSUZ0d2NtbDJZWFJsUzJWNUxDQnpaWFJRY21sMllYUmxTMlY1WFNBOUlIVnpaVk4wWVhSbEtHNTFiR3dwTzF4dUlDQmpiMjV6ZENCYmMyaHZkMWRoY201cGJtY3NJSE5sZEZOb2IzZFhZWEp1YVc1blhTQTlJSFZ6WlZOMFlYUmxLSFJ5ZFdVcE8xeHVJQ0JqYjI1emRDQmJjMmh2ZDBodmJHUlViMUpsZG1WaGJDd2djMlYwVTJodmQwaHZiR1JVYjFKbGRtVmhiRjBnUFNCMWMyVlRkR0YwWlNobVlXeHpaU2s3WEc0Z0lHTnZibk4wSUhSeVlXTnJSWFpsYm5RZ1BTQjFjMlZEYjI1MFpYaDBLRTFsZEdGTlpYUnlhV056UTI5dWRHVjRkQ2s3WEc0Z0lHTnZibk4wSUhRZ1BTQjFjMlZKTVRodVEyOXVkR1Y0ZENncE8xeHVYRzRnSUhWelpVVm1abVZqZENnb0tTQTlQaUI3WEc0Z0lDQWdjbVYwZFhKdUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUdOc1pXRnlRV05qYjNWdWRFUmxkR0ZwYkhNb0tUdGNiaUFnSUNBZ0lHaHBaR1ZYWVhKdWFXNW5LQ2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdjbVZoWTNRdGFHOXZhM012Wlhob1lYVnpkR2wyWlMxa1pYQnpYRzRnSUgwc0lGdGRLVHRjYmx4dUlDQmpiMjV6ZENCbGVIQnZjblJCWTJOdmRXNTBRVzVrUjJWMFVISnBkbUYwWlV0bGVTQTlJR0Z6ZVc1aklDaHdZWE56ZDI5eVpFbHVjSFYwTENCaFpHUnlaWE56S1NBOVBpQjdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR052Ym5OMElIQnlhWFpoZEdWTFpYbFNaWFJ5YVdWMlpXUWdQU0JoZDJGcGRDQmxlSEJ2Y25SQlkyTnZkVzUwS0hCaGMzTjNiM0prU1c1d2RYUXNJR0ZrWkhKbGMzTXBPMXh1SUNBZ0lDQWdkSEpoWTJ0RmRtVnVkQ2hjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lHTmhkR1ZuYjNKNU9pQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rdVMyVjVjeXhjYmlBZ0lDQWdJQ0FnSUNCbGRtVnVkRG9nVFdWMFlVMWxkSEpwWTNORmRtVnVkRTVoYldVdVMyVjVSWGh3YjNKMFVtVjJaV0ZzWldRc1hHNGdJQ0FnSUNBZ0lDQWdjSEp2Y0dWeWRHbGxjem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1WDNSNWNHVTZJRTFsZEdGTlpYUnlhV056UlhabGJuUkxaWGxVZVhCbExsQnJaWGtzWEc0Z0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnZTMwc1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2MyVjBVSEpwZG1GMFpVdGxlU2h3Y21sMllYUmxTMlY1VW1WMGNtbGxkbVZrS1R0Y2JpQWdJQ0FnSUhObGRGTm9iM2RYWVhKdWFXNW5LR1poYkhObEtUdGNiaUFnSUNBZ0lITmxkRk5vYjNkSWIyeGtWRzlTWlhabFlXd29kSEoxWlNrN1hHNGdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ2RISmhZMnRGZG1WdWRDaGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUdOaGRHVm5iM0o1T2lCTlpYUmhUV1YwY21samMwVjJaVzUwUTJGMFpXZHZjbmt1UzJWNWN5eGNiaUFnSUNBZ0lDQWdJQ0JsZG1WdWREb2dUV1YwWVUxbGRISnBZM05GZG1WdWRFNWhiV1V1UzJWNVJYaHdiM0owUm1GcGJHVmtMRnh1SUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVWOTBlWEJsT2lCTlpYUmhUV1YwY21samMwVjJaVzUwUzJWNVZIbHdaUzVRYTJWNUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WaGMyOXVPaUFuYVc1amIzSnlaV04wWDNCaGMzTjNiM0prSnl4Y2JpQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCN2ZTeGNiaUFnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJR3h2Wnk1bGNuSnZjaWhsS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ1kyOXVjM1FnZXlCdVlXMWxMQ0JoWkdSeVpYTnpJSDBnUFNCelpXeGxZM1JsWkVsa1pXNTBhWFI1TzF4dVhHNGdJR2xtSUNoemFHOTNTRzlzWkZSdlVtVjJaV0ZzS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhCWTJOdmRXNTBUVzlrWVd4RGIyNTBZV2x1WlhKY2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2laWGh3YjNKMExYQnlhWFpoZEdVdGEyVjVMVzF2WkdGc1hDSmNiaUFnSUNBZ0lDQWdjMlZzWldOMFpXUkpaR1Z1ZEdsMGVUMTdjMlZzWldOMFpXUkpaR1Z1ZEdsMGVYMWNiaUFnSUNBZ0lDQWdjMmh2ZDBKaFkydENkWFIwYjI0OWUzQnlaWFpwYjNWelRXOWtZV3hUZEdGMFpTQTlQVDBnSjBGRFEwOVZUbFJmUkVWVVFVbE1VeWQ5WEc0Z0lDQWdJQ0FnSUdKaFkydENkWFIwYjI1QlkzUnBiMjQ5ZXlncElEMCtJSE5vYjNkQlkyTnZkVzUwUkdWMFlXbHNUVzlrWVd3b0tYMWNiaUFnSUNBZ0lENWNiaUFnSUNBZ0lDQWdQRWh2YkdSVWIxSmxkbVZoYkUxdlpHRnNYRzRnSUNBZ0lDQWdJQ0FnYjI1TWIyNW5VSEpsYzNObFpEMTdLQ2tnUFQ0Z2MyVjBVMmh2ZDBodmJHUlViMUpsZG1WaGJDaG1ZV3h6WlNsOVhHNGdJQ0FnSUNBZ0lDQWdkMmxzYkVocFpHVTllMlpoYkhObGZWeHVJQ0FnSUNBZ0lDQWdJR2h2YkdSVWIxSmxkbVZoYkZSNWNHVTlYQ0pRY21sMllYUmxTMlY1WENKY2JpQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lEd3ZRV05qYjNWdWRFMXZaR0ZzUTI5dWRHRnBibVZ5UGx4dUlDQWdJQ2s3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhCWTJOdmRXNTBUVzlrWVd4RGIyNTBZV2x1WlhKY2JpQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltVjRjRzl5ZEMxd2NtbDJZWFJsTFd0bGVTMXRiMlJoYkZ3aVhHNGdJQ0FnSUNCelpXeGxZM1JsWkVsa1pXNTBhWFI1UFh0elpXeGxZM1JsWkVsa1pXNTBhWFI1ZlZ4dUlDQWdJQ0FnYzJodmQwSmhZMnRDZFhSMGIyNDllM0J5WlhacGIzVnpUVzlrWVd4VGRHRjBaU0E5UFQwZ0owRkRRMDlWVGxSZlJFVlVRVWxNVXlkOVhHNGdJQ0FnSUNCaVlXTnJRblYwZEc5dVFXTjBhVzl1UFhzb0tTQTlQaUJ6YUc5M1FXTmpiM1Z1ZEVSbGRHRnBiRTF2WkdGc0tDbDlYRzRnSUNBZ1BseHVJQ0FnSUNBZ1BGUmxlSFJjYmlBZ0lDQWdJQ0FnWVhNOVhDSnpjR0Z1WENKY2JpQWdJQ0FnSUNBZ2JXRnlaMmx1Vkc5d1BYc3lmVnh1SUNBZ0lDQWdJQ0IyWVhKcFlXNTBQWHRVWlhoMFZtRnlhV0Z1ZEM1aWIyUjVUR2ROWldScGRXMTlYRzRnSUNBZ0lDQWdJR1p2Ym5SWFpXbG5hSFE5ZTBaUFRsUmZWMFZKUjBoVUxrNVBVazFCVEgxY2JpQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ2UyNWhiV1Y5WEc0Z0lDQWdJQ0E4TDFSbGVIUStYRzRnSUNBZ0lDQThRbTk0WEc0Z0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltVnNiR2x3TFdGa1pISmxjM010ZDNKaGNIQmxjbHdpWEc0Z0lDQWdJQ0FnSUdKdmNtUmxjbE4wZVd4bFBYdENiM0prWlhKVGRIbHNaUzV6YjJ4cFpIMWNiaUFnSUNBZ0lDQWdZbTl5WkdWeVEyOXNiM0k5ZTBKdmNtUmxja052Ykc5eUxtSnZjbVJsY2tSbFptRjFiSFI5WEc0Z0lDQWdJQ0FnSUdKdmNtUmxjbGRwWkhSb1BYc3hmVnh1SUNBZ0lDQWdJQ0J0WVhKbmFXNVViM0E5ZXpKOVhHNGdJQ0FnSUNBZ0lIQmhaR1JwYm1jOWUxc3hMQ0F5TENBeExDQXlYWDFjYmlBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnZTNSdlEyaGxZMnR6ZFcxSVpYaEJaR1J5WlhOektHRmtaSEpsYzNNcGZWeHVJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdJQ0E4UW05NFhHNGdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbVY0Y0c5eWRDMXdjbWwyWVhSbExXdGxlUzF0YjJSaGJGOWZaR2wyYVdSbGNsd2lYRzRnSUNBZ0lDQWdJSGRwWkhSb1BYdENURTlEUzE5VFNWcEZVeTVHVlV4TWZWeHVJQ0FnSUNBZ0lDQnRZWEpuYVc0OWUxczFMQ0F3TENBekxDQXdYWDFjYmlBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0E4VkdWNGRGeHVJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdFVaWGgwVm1GeWFXRnVkQzVpYjJSNVRHZE5aV1JwZFcxOVhHNGdJQ0FnSUNBZ0lHMWhjbWRwYmoxN1d6UXNJREFzSURRc0lEQmRmVnh1SUNBZ0lDQWdJQ0JtYjI1MFYyVnBaMmgwUFh0R1QwNVVYMWRGU1VkSVZDNU9UMUpOUVV4OVhHNGdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lIdDBLQ2R6YUc5M1VISnBkbUYwWlV0bGVYTW5LWDFjYmlBZ0lDQWdJRHd2VkdWNGRENWNiaUFnSUNBZ0lIdHdjbWwyWVhSbFMyVjVJRDhnS0Z4dUlDQWdJQ0FnSUNBOFVISnBkbUYwWlV0bGVVUnBjM0JzWVhrZ2NISnBkbUYwWlV0bGVUMTdjSEpwZG1GMFpVdGxlWDBnTHo1Y2JpQWdJQ0FnSUNrZ09pQW9YRzRnSUNBZ0lDQWdJRHhRWVhOemQyOXlaRWx1Y0hWMElITmxkRkJoYzNOM2IzSmtQWHR6WlhSUVlYTnpkMjl5WkgwZ0x6NWNiaUFnSUNBZ0lDbDlYRzRnSUNBZ0lDQjdjMmh2ZDFkaGNtNXBibWNnSmlZZ0tGeHVJQ0FnSUNBZ0lDQThWR1Y0ZENCamIyeHZjajE3UTI5c2IzSXVaWEp5YjNKRVpXWmhkV3gwZlNCMllYSnBZVzUwUFh0VVpYaDBWbUZ5YVdGdWRDNWliMlI1VTIxOVBseHVJQ0FnSUNBZ0lDQWdJSHQzWVhKdWFXNW5mVnh1SUNBZ0lDQWdJQ0E4TDFSbGVIUStYRzRnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdQRUpoYm01bGNrRnNaWEowWEc0Z0lDQWdJQ0FnSUhCaFpHUnBibWM5ZTFzeExDQXpMQ0F3TENBelhYMWNiaUFnSUNBZ0lDQWdiV0Z5WjJsdVRHVm1kRDE3TlgxY2JpQWdJQ0FnSUNBZ2JXRnlaMmx1VW1sbmFIUTllelY5WEc0Z0lDQWdJQ0FnSUcxaGNtZHBibFJ2Y0QxN05IMWNiaUFnSUNBZ0lDQWdjMlYyWlhKcGRIazlYQ0prWVc1blpYSmNJbHh1SUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0I3ZENnbmNISnBkbUYwWlV0bGVWZGhjbTVwYm1jbktYMWNiaUFnSUNBZ0lEd3ZRbUZ1Ym1WeVFXeGxjblErWEc0Z0lDQWdJQ0E4UW05NFhHNGdJQ0FnSUNBZ0lHUnBjM0JzWVhrOWUwUkpVMUJNUVZrdVJreEZXSDFjYmlBZ0lDQWdJQ0FnWm14bGVFUnBjbVZqZEdsdmJqMTdSa3hGV0Y5RVNWSkZRMVJKVDA0dVVrOVhmVnh1SUNBZ0lDQWdJQ0IzYVdSMGFEMTdRa3hQUTB0ZlUwbGFSVk11UmxWTVRIMWNiaUFnSUNBZ0lDQWdhblZ6ZEdsbWVVTnZiblJsYm5ROWUwcDFjM1JwWm5sRGIyNTBaVzUwTG5Od1lXTmxRbVYwZDJWbGJuMWNiaUFnSUNBZ0lDQWdiV0Z5WjJsdVZHOXdQWHN6ZlZ4dUlDQWdJQ0FnSUNCd1lXUmthVzVuUFh0Yk5Td2dNQ3dnTlN3Z01GMTlYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJSHNoY0hKcGRtRjBaVXRsZVNBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnUEVKMWRIUnZibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVDE3UWxWVVZFOU9YMVpCVWtsQlRsUXVVMFZEVDA1RVFWSlpmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2MybDZaVDE3UWxWVVZFOU9YMU5KV2tWVExreEhmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2c5ZTBKTVQwTkxYMU5KV2tWVExraEJURVo5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRZWEpuYVc1U2FXZG9kRDE3TkgxY2JpQWdJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczlleWdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RISmhZMnRGZG1WdWRDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkYwWldkdmNuazZJRTFsZEdGTlpYUnlhV056UlhabGJuUkRZWFJsWjI5eWVTNUxaWGx6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWMlpXNTBPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBUbUZ0WlM1TFpYbEZlSEJ2Y25SRFlXNWpaV3hsWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhsZmRIbHdaVG9nVFdWMFlVMWxkSEpwWTNORmRtVnVkRXRsZVZSNWNHVXVVR3RsZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FHbGtaVTF2WkdGc0tDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOWZWeHVJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lIdDBLQ2RqWVc1alpXd25LWDFjYmlBZ0lDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JpQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdlM0J5YVhaaGRHVkxaWGtnUHlBb1hHNGdJQ0FnSUNBZ0lDQWdQRUoxZEhSdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUMTdRbFZVVkU5T1gxWkJVa2xCVGxRdVVGSkpUVUZTV1gxY2JpQWdJQ0FnSUNBZ0lDQWdJSE5wZW1VOWUwSlZWRlJQVGw5VFNWcEZVeTVNUjMxY2JpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb1BYdENURTlEUzE5VFNWcEZVeTVHVlV4TWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1RGJHbGphejE3S0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm9hV1JsVFc5a1lXd29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdlM1FvSjJSdmJtVW5LWDFjYmlBZ0lDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JpQWdJQ0FnSUNBZ0tTQTZJQ2hjYmlBZ0lDQWdJQ0FnSUNBOFFuVjBkRzl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsUFh0Q1ZWUlVUMDVmVmtGU1NVRk9WQzVRVWtsTlFWSlpmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2MybDZaVDE3UWxWVVZFOU9YMU5KV2tWVExreEhmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2c5ZTBKTVQwTkxYMU5KV2tWVExraEJURVo5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYc29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeVlXTnJSWFpsYm5Rb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhkR1ZuYjNKNU9pQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rdVMyVjVjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWREb2dUV1YwWVUxbGRISnBZM05GZG1WdWRFNWhiV1V1UzJWNVJYaHdiM0owVW1WeGRXVnpkR1ZrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3RsZVY5MGVYQmxPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBTMlY1Vkhsd1pTNVFhMlY1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjRjRzl5ZEVGalkyOTFiblJCYm1SSFpYUlFjbWwyWVhSbFMyVjVLSEJoYzNOM2IzSmtMQ0JoWkdSeVpYTnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYTmhZbXhsWkQxN0lYQmhjM04zYjNKa2ZWeHVJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lIdDBLQ2RqYjI1bWFYSnRKeWw5WEc0Z0lDQWdJQ0FnSUNBZ1BDOUNkWFIwYjI0K1hHNGdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0E4TDBGalkyOTFiblJOYjJSaGJFTnZiblJoYVc1bGNqNWNiaUFnS1R0Y2JuMDdYRzVjYmtWNGNHOXlkRkJ5YVhaaGRHVkxaWGxOYjJSaGJDNXdjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lHVjRjRzl5ZEVGalkyOTFiblE2SUZCeWIzQlVlWEJsY3k1bWRXNWpMbWx6VW1WeGRXbHlaV1FzWEc0Z0lITmxiR1ZqZEdWa1NXUmxiblJwZEhrNklGQnliM0JVZVhCbGN5NXZZbXBsWTNRdWFYTlNaWEYxYVhKbFpDeGNiaUFnZDJGeWJtbHVaem9nVUhKdmNGUjVjR1Z6TG01dlpHVXNYRzRnSUhOb2IzZEJZMk52ZFc1MFJHVjBZV2xzVFc5a1lXdzZJRkJ5YjNCVWVYQmxjeTVtZFc1akxtbHpVbVZ4ZFdseVpXUXNYRzRnSUdocFpHVk5iMlJoYkRvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdhR2xrWlZkaGNtNXBibWM2SUZCeWIzQlVlWEJsY3k1bWRXNWpMbWx6VW1WeGRXbHlaV1FzWEc0Z0lHTnNaV0Z5UVdOamIzVnVkRVJsZEdGcGJITTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxtbHpVbVZ4ZFdseVpXUXNYRzRnSUhCeVpYWnBiM1Z6VFc5a1lXeFRkR0YwWlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJSGRwZEdoTmIyUmhiRkJ5YjNCektFVjRjRzl5ZEZCeWFYWmhkR1ZMWlhsTmIyUmhiQ2s3WEc0aUxDSnBiWEJ2Y25RZ2V5QmpiMjV1WldOMElIMGdabkp2YlNBbmNtVmhZM1F0Y21Wa2RYZ25PMXh1YVcxd2IzSjBJSHRjYmlBZ1pYaHdiM0owUVdOamIzVnVkQ3hjYmlBZ2FHbGtaVmRoY201cGJtY3NYRzRnSUhOb2IzZE5iMlJoYkN4Y2JpQWdhR2xrWlUxdlpHRnNMRnh1SUNCamJHVmhja0ZqWTI5MWJuUkVaWFJoYVd4ekxGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTl6ZEc5eVpTOWhZM1JwYjI1ekp6dGNibWx0Y0c5eWRDQjdJR2RsZEZObGJHVmpkR1ZrU1dSbGJuUnBkSGtnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5elpXeGxZM1J2Y25Nbk8xeHVhVzF3YjNKMElFVjRjRzl5ZEZCeWFYWmhkR1ZMWlhsTmIyUmhiQ0JtY205dElDY3VMMlY0Y0c5eWRDMXdjbWwyWVhSbExXdGxlUzF0YjJSaGJDNWpiMjF3YjI1bGJuUW5PMXh1WEc1bWRXNWpkR2x2YmlCdFlYQlRkR0YwWlZSdlVISnZjSE5HWVdOMGIzSjVLQ2tnZTF4dUlDQnNaWFFnYzJWc1pXTjBaV1JKWkdWdWRHbDBlU0E5SUc1MWJHdzdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJ0WVhCVGRHRjBaVlJ2VUhKdmNITW9jM1JoZEdVcElIdGNiaUFnSUNBdkx5QlhaU0J6YUc5MWJHUWdLaXB1YjNRcUtpQmphR0Z1WjJVZ2RHaGxJR2xrWlc1MGFYUjVJR1JwYzNCc1lYbGxaQ0JvWlhKbElHVjJaVzRnYVdZZ2FYUWdZMmhoYm1kbGN5Qm1jbTl0SUhWdVpHVnlibVZoZEdnZ2RYTXVYRzRnSUNBZ0x5OGdTV1lnZDJVZ1pHOHNJSGRsSUhkcGJHd2dZbVVnYzJodmQybHVaeUIwYUdVZ2RYTmxjaUJ2Ym1VZ2NISnBkbUYwWlNCclpYa2dZVzVrSUdFZ0tpcGthV1ptWlhKbGJuUXFLaUJoWkdSeVpYTnpJR0Z1WkNCdVlXMWxMbHh1SUNBZ0lDOHZJRTV2ZEdVZ2RHaGhkQ0IwYUdVZ2MyVnNaV04wWldRZ2FXUmxiblJwZEhrZ0tpcDNhV3hzS2lvZ1kyaGhibWRsSUdaeWIyMGdkVzVrWlhKdVpXRjBhQ0IxY3lCM2FHVnVJSGRsSUhWdWJHOWpheUIwYUdVZ2EyVjVjbWx1WjF4dUlDQWdJQzh2SUhkb2FXTm9JR2x6SUhSb1pTQmxlSEJsWTNSbFpDQmlaV2hoZG1sdmNpQjBhR0YwSUhkbElHRnlaU0J6YVdSbExYTjBaWEJ3YVc1bkxseHVJQ0FnSUhObGJHVmpkR1ZrU1dSbGJuUnBkSGtnUFNCelpXeGxZM1JsWkVsa1pXNTBhWFI1SUh4OElHZGxkRk5sYkdWamRHVmtTV1JsYm5ScGRIa29jM1JoZEdVcE8xeHVJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0IzWVhKdWFXNW5PaUJ6ZEdGMFpTNWhjSEJUZEdGMFpTNTNZWEp1YVc1bkxGeHVJQ0FnSUNBZ2NISnBkbUYwWlV0bGVUb2djM1JoZEdVdVlYQndVM1JoZEdVdVlXTmpiM1Z1ZEVSbGRHRnBiQzV3Y21sMllYUmxTMlY1TEZ4dUlDQWdJQ0FnYzJWc1pXTjBaV1JKWkdWdWRHbDBlU3hjYmlBZ0lDQWdJSEJ5WlhacGIzVnpUVzlrWVd4VGRHRjBaVG9nYzNSaGRHVXVZWEJ3VTNSaGRHVXViVzlrWVd3dWNISmxkbWx2ZFhOTmIyUmhiRk4wWVhSbExtNWhiV1VzWEc0Z0lDQWdmVHRjYmlBZ2ZUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2JXRndSR2x6Y0dGMFkyaFViMUJ5YjNCektHUnBjM0JoZEdOb0tTQjdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdaWGh3YjNKMFFXTmpiM1Z1ZERvZ0tIQmhjM04zYjNKa0xDQmhaR1J5WlhOektTQTlQaUI3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaR2x6Y0dGMFkyZ29aWGh3YjNKMFFXTmpiM1Z1ZENod1lYTnpkMjl5WkN3Z1lXUmtjbVZ6Y3lrcExuUm9aVzRvS0hKbGN5a2dQVDRnZTF4dUlDQWdJQ0FnSUNCa2FYTndZWFJqYUNob2FXUmxWMkZ5Ym1sdVp5Z3BLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsY3p0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnYzJodmQwRmpZMjkxYm5SRVpYUmhhV3hOYjJSaGJEb2dLQ2tnUFQ1Y2JpQWdJQ0FnSUdScGMzQmhkR05vS0hOb2IzZE5iMlJoYkNoN0lHNWhiV1U2SUNkQlEwTlBWVTVVWDBSRlZFRkpURk1uSUgwcEtTeGNiaUFnSUNCb2FXUmxUVzlrWVd3NklDZ3BJRDArSUdScGMzQmhkR05vS0docFpHVk5iMlJoYkNncEtTeGNiaUFnSUNCb2FXUmxWMkZ5Ym1sdVp6b2dLQ2tnUFQ0Z1pHbHpjR0YwWTJnb2FHbGtaVmRoY201cGJtY29LU2tzWEc0Z0lDQWdZMnhsWVhKQlkyTnZkVzUwUkdWMFlXbHNjem9nS0NrZ1BUNGdaR2x6Y0dGMFkyZ29ZMnhsWVhKQlkyTnZkVzUwUkdWMFlXbHNjeWdwS1N4Y2JpQWdmVHRjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyOXVibVZqZENoY2JpQWdiV0Z3VTNSaGRHVlViMUJ5YjNCelJtRmpkRzl5ZVN4Y2JpQWdiV0Z3UkdsemNHRjBZMmhVYjFCeWIzQnpMRnh1S1NoRmVIQnZjblJRY21sMllYUmxTMlY1VFc5a1lXd3BPMXh1SWl3aVpYaHdiM0owSUhzZ1pHVm1ZWFZzZENCOUlHWnliMjBnSnk0dlpYaHdiM0owTFhCeWFYWmhkR1V0YTJWNUxXMXZaR0ZzTG1OdmJuUmhhVzVsY2ljN1hHNGlMQ0pwYlhCdmNuUWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0I3WEc0Z0lFSk1UME5MWDFOSldrVlRMRnh1SUNCR1RFVllYMFJKVWtWRFZFbFBUaXhjYmlBZ1JFbFRVRXhCV1N4Y2JpQWdRV3hwWjI1SmRHVnRjeXhjYmlBZ1EyOXNiM0lzWEc0Z0lGUmxlSFJXWVhKcFlXNTBMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5b1pXeHdaWEp6TDJOdmJuTjBZVzUwY3k5a1pYTnBaMjR0YzNsemRHVnRKenRjYm1sdGNHOXlkQ0JDYjNnZ1puSnZiU0FuTGk0dkxpNHZMaTR2ZFdrdlltOTRKenRjYm1sdGNHOXlkQ0I3SUhWelpVa3hPRzVEYjI1MFpYaDBJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2YUc5dmEzTXZkWE5sU1RFNGJrTnZiblJsZUhRbk8xeHVhVzF3YjNKMElIc2dUR0ZpWld3c0lGUkZXRlJmUmtsRlRFUmZWRmxRUlZNc0lGUmxlSFJHYVdWc1pDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyTnZiWEJ2Ym1WdWRDMXNhV0p5WVhKNUp6dGNibHh1WTI5dWMzUWdVR0Z6YzNkdmNtUkpibkIxZENBOUlDaDdJSE5sZEZCaGMzTjNiM0prSUgwcElEMCtJSHRjYmlBZ1kyOXVjM1FnZENBOUlIVnpaVWt4T0c1RGIyNTBaWGgwS0NrN1hHNWNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQThRbTk0WEc0Z0lDQWdJQ0IzYVdSMGFEMTdRa3hQUTB0ZlUwbGFSVk11UmxWTVRIMWNiaUFnSUNBZ0lHWnNaWGhFYVhKbFkzUnBiMjQ5ZTBaTVJWaGZSRWxTUlVOVVNVOU9Ma05QVEZWTlRuMWNiaUFnSUNBZ0lHUnBjM0JzWVhrOWUwUkpVMUJNUVZrdVJreEZXSDFjYmlBZ0lDQWdJR0ZzYVdkdVNYUmxiWE05ZTBGc2FXZHVTWFJsYlhNdVpteGxlRk4wWVhKMGZWeHVJQ0FnSUNBZ2NHRmtaR2x1WjB4bFpuUTllelY5WEc0Z0lDQWdJQ0J3WVdSa2FXNW5VbWxuYUhROWV6VjlYRzRnSUNBZ1BseHVJQ0FnSUNBZ1BFeGhZbVZzWEc0Z0lDQWdJQ0FnSUdOdmJHOXlQWHREYjJ4dmNpNTBaWGgwUkdWbVlYVnNkSDFjYmlBZ0lDQWdJQ0FnYldGeVoybHVRbTkwZEc5dFBYc3lmVnh1SUNBZ0lDQWdJQ0IyWVhKcFlXNTBQWHRVWlhoMFZtRnlhV0Z1ZEM1aWIyUjVVMjE5WEc0Z0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUh0MEtDZDBlWEJsVUdGemMzZHZjbVFuS1gxY2JpQWdJQ0FnSUR3dlRHRmlaV3crWEc0Z0lDQWdJQ0E4VkdWNGRFWnBaV3hrWEc0Z0lDQWdJQ0FnSUhkcFpIUm9QWHRDVEU5RFMxOVRTVnBGVXk1R1ZVeE1mVnh1SUNBZ0lDQWdJQ0J3YkdGalpXaHZiR1JsY2oxN2RDZ25aVzUwWlhKUVlYTnpkMjl5WkNjcGZWeHVJQ0FnSUNBZ0lDQjBlWEJsUFh0VVJWaFVYMFpKUlV4RVgxUlpVRVZUTGxCQlUxTlhUMUpFZlZ4dUlDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSmxlSEJ2Y25RdGNISnBkbUYwWlMxclpYa3RiVzlrWVd4ZlgzQmhjM04zYjNKa0xXbHVjSFYwWENKY2JpQWdJQ0FnSUNBZ2IyNURhR0Z1WjJVOWV5aGxkbVZ1ZENrZ1BUNGdjMlYwVUdGemMzZHZjbVFvWlhabGJuUXVkR0Z5WjJWMExuWmhiSFZsS1gxY2JpQWdJQ0FnSUNBZ1pHRjBZUzEwWlhOMGFXUTlYQ0p3WVhOemQyOXlaQzFwYm5CMWRGd2lYRzRnSUNBZ0lDQXZQbHh1SUNBZ0lEd3ZRbTk0UGx4dUlDQXBPMXh1ZlR0Y2JseHVVR0Z6YzNkdmNtUkpibkIxZEM1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUhObGRGQmhjM04zYjNKa09pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVUdGemMzZHZjbVJKYm5CMWREdGNiaUlzSW1sdGNHOXlkQ0JqYjNCNVZHOURiR2x3WW05aGNtUWdabkp2YlNBblkyOXdlUzEwYnkxamJHbHdZbTloY21Rbk8xeHVhVzF3YjNKMElIc2djM1J5YVhCSVpYaFFjbVZtYVhnZ2ZTQm1jbTl0SUNkbGRHaGxjbVYxYldwekxYVjBhV3duTzF4dWFXMXdiM0owSUZKbFlXTjBMQ0I3SUhWelpVTnZiblJsZUhRZ2ZTQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUVKdmVDQm1jbTl0SUNjdUxpOHVMaTh1TGk5MWFTOWliM2duTzF4dWFXMXdiM0owSUhzZ2RYTmxTVEU0YmtOdmJuUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5b2IyOXJjeTkxYzJWSk1UaHVRMjl1ZEdWNGRDYzdYRzVwYlhCdmNuUWdlMXh1SUNCTlpYUmhUV1YwY21samMwVjJaVzUwUTJGMFpXZHZjbmtzWEc0Z0lFMWxkR0ZOWlhSeWFXTnpSWFpsYm5ST1lXMWxMRnh1SUNCTlpYUmhUV1YwY21samMwVjJaVzUwUzJWNVZIbHdaU3hjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OXRaWFJoYldWMGNtbGpjeWM3WEc1cGJYQnZjblFnZXlCTlpYUmhUV1YwY21samMwTnZiblJsZUhRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOWpiMjUwWlhoMGN5OXRaWFJoYldWMGNtbGpjeWM3WEc1cGJYQnZjblFnZTF4dUlDQkNURTlEUzE5VFNWcEZVeXhjYmlBZ1FtOXlaR1Z5VTNSNWJHVXNYRzRnSUVKdmNtUmxja052Ykc5eUxGeHVJQ0JDYjNKa1pYSlNZV1JwZFhNc1hHNGdJRUZzYVdkdVNYUmxiWE1zWEc0Z0lFUkpVMUJNUVZrc1hHNGdJRU52Ykc5eUxGeHVJQ0JHVEVWWVgwUkpVa1ZEVkVsUFRpeGNiaUFnVkdWNGRGWmhjbWxoYm5Rc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZZMjl1YzNSaGJuUnpMMlJsYzJsbmJpMXplWE4wWlcwbk8xeHVhVzF3YjNKMElIc2dUR0ZpWld3Z2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5amIyMXdiMjVsYm5RdGJHbGljbUZ5ZVNjN1hHNWNibU52Ym5OMElGQnlhWFpoZEdWTFpYbEVhWE53YkdGNUlEMGdLSHNnY0hKcGRtRjBaVXRsZVNCOUtTQTlQaUI3WEc0Z0lHTnZibk4wSUhSeVlXTnJSWFpsYm5RZ1BTQjFjMlZEYjI1MFpYaDBLRTFsZEdGTlpYUnlhV056UTI5dWRHVjRkQ2s3WEc0Z0lHTnZibk4wSUhRZ1BTQjFjMlZKTVRodVEyOXVkR1Y0ZENncE8xeHVJQ0JqYjI1emRDQndiR0ZwYmt0bGVTQTlJSE4wY21sd1NHVjRVSEpsWm1sNEtIQnlhWFpoZEdWTFpYa3BPMXh1WEc0Z0lISmxkSFZ5YmlBb1hHNGdJQ0FnUEVKdmVGeHVJQ0FnSUNBZ2QybGtkR2c5ZTBKTVQwTkxYMU5KV2tWVExrWlZURXg5WEc0Z0lDQWdJQ0JtYkdWNFJHbHlaV04wYVc5dVBYdEdURVZZWDBSSlVrVkRWRWxQVGk1RFQweFZUVTU5WEc0Z0lDQWdJQ0JrYVhOd2JHRjVQWHRFU1ZOUVRFRlpMa1pNUlZoOVhHNGdJQ0FnSUNCaGJHbG5ia2wwWlcxelBYdEJiR2xuYmtsMFpXMXpMbVpzWlhoVGRHRnlkSDFjYmlBZ0lDQWdJSEJoWkdScGJtZE1aV1owUFhzMGZWeHVJQ0FnSUNBZ2NHRmtaR2x1WjFKcFoyaDBQWHMwZlZ4dUlDQWdJRDVjYmlBZ0lDQWdJRHhNWVdKbGJGeHVJQ0FnSUNBZ0lDQmpiMnh2Y2oxN1EyOXNiM0l1ZEdWNGRFUmxabUYxYkhSOVhHNGdJQ0FnSUNBZ0lHMWhjbWRwYmtKdmRIUnZiVDE3TW4xY2JpQWdJQ0FnSUNBZ2RtRnlhV0Z1ZEQxN1ZHVjRkRlpoY21saGJuUXVZbTlrZVZOdGZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQjdkQ2duWTI5d2VWQnlhWFpoZEdWTFpYa25LWDFjYmlBZ0lDQWdJRHd2VEdGaVpXdytYRzRnSUNBZ0lDQThRbTk0WEc0Z0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltVjRjRzl5ZEMxd2NtbDJZWFJsTFd0bGVTMXRiMlJoYkY5ZmNISnBkbUYwWlMxclpYa3RaR2x6Y0d4aGVWd2lYRzRnSUNBZ0lDQWdJSGRwWkhSb1BYdENURTlEUzE5VFNWcEZVeTVHVlV4TWZWeHVJQ0FnSUNBZ0lDQmliM0prWlhKVGRIbHNaVDE3UW05eVpHVnlVM1I1YkdVdWMyOXNhV1I5WEc0Z0lDQWdJQ0FnSUdKdmNtUmxja052Ykc5eVBYdENiM0prWlhKRGIyeHZjaTVpYjNKa1pYSkVaV1poZFd4MGZWeHVJQ0FnSUNBZ0lDQmliM0prWlhKU1lXUnBkWE05ZTBKdmNtUmxjbEpoWkdsMWN5NVlVMzFjYmlBZ0lDQWdJQ0FnWW05eVpHVnlWMmxrZEdnOWV6RjlYRzRnSUNBZ0lDQWdJSEJoWkdScGJtYzllMXN5TENBekxDQXlYWDFjYmlBZ0lDQWdJQ0FnWTI5c2IzSTllME52Ykc5eUxtVnljbTl5UkdWbVlYVnNkSDFjYmlBZ0lDQWdJQ0FnYjI1RGJHbGphejE3S0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUdOdmNIbFViME5zYVhCaWIyRnlaQ2h3YkdGcGJrdGxlU2s3WEc0Z0lDQWdJQ0FnSUNBZ2RISmhZMnRGZG1WdWRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGMFpXZHZjbms2SUUxbGRHRk5aWFJ5YVdOelJYWmxiblJEWVhSbFoyOXllUzVMWlhsekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkRG9nVFdWMFlVMWxkSEpwWTNORmRtVnVkRTVoYldVdVMyVjVSWGh3YjNKMFEyOXdhV1ZrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBhV1Z6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2EyVjVYM1I1Y0dVNklFMWxkR0ZOWlhSeWFXTnpSWFpsYm5STFpYbFVlWEJsTGxCclpYa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl3ZVY5dFpYUm9iMlE2SUNkamJHbHdZbTloY21RbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSHQ5TEZ4dUlDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDE5WEc0Z0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUh0d2JHRnBia3RsZVgxY2JpQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lEd3ZRbTk0UGx4dUlDQXBPMXh1ZlR0Y2JseHVVSEpwZG1GMFpVdGxlVVJwYzNCc1lYa3VjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQndjbWwyWVhSbFMyVjVPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MbWx6VW1WeGRXbHlaV1FzWEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlFjbWwyWVhSbFMyVjVSR2x6Y0d4aGVUdGNiaUlzSW1sdGNHOXlkQ0JTWldGamRDd2dleUJEYjIxd2IyNWxiblFnZlNCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1WEc1c1pYUWdhVzVrWlhnZ1BTQXdPMXh1YkdWMElHVjRkSEpoVTJobFpYUTdYRzVjYm1OdmJuTjBJR2x1YzJWeWRGSjFiR1VnUFNBb1kzTnpLU0E5UGlCN1hHNGdJR2xtSUNnaFpYaDBjbUZUYUdWbGRDa2dlMXh1SUNBZ0lDOHZJRVpwY25OMElIUnBiV1VzSUdOeVpXRjBaU0JoYmlCbGVIUnlZU0J6ZEhsc1pYTm9aV1YwSUdadmNpQmhaR1JwYm1jZ2NuVnNaWE5jYmlBZ0lDQmxlSFJ5WVZOb1pXVjBJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25jM1I1YkdVbktUdGNiaUFnSUNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MGMwSjVWR0ZuVG1GdFpTZ25hR1ZoWkNjcFd6QmRMbUZ3Y0dWdVpFTm9hV3hrS0dWNGRISmhVMmhsWlhRcE8xeHVJQ0FnSUM4dklFdGxaWEFnY21WbVpYSmxibU5sSUhSdklHRmpkSFZoYkNCVGRIbHNaVk5vWldWMElHOWlhbVZqZENBb1lITjBlV3hsVTJobFpYUmdJR1p2Y2lCSlJTQThJRGtwWEc0Z0lDQWdaWGgwY21GVGFHVmxkQ0E5SUdWNGRISmhVMmhsWlhRdWMyaGxaWFFnZkh3Z1pYaDBjbUZUYUdWbGRDNXpkSGxzWlZOb1pXVjBPMXh1SUNCOVhHNWNiaUFnWlhoMGNtRlRhR1ZsZEM1cGJuTmxjblJTZFd4bEtHTnpjeXdnS0dWNGRISmhVMmhsWlhRdVkzTnpVblZzWlhNZ2ZId2daWGgwY21GVGFHVmxkQzV5ZFd4bGN5a3ViR1Z1WjNSb0tUdGNibHh1SUNCeVpYUjFjbTRnWlhoMGNtRlRhR1ZsZER0Y2JuMDdYRzVjYm1OdmJuTjBJR2x1YzJWeWRFdGxlV1p5WVcxbGMxSjFiR1VnUFNBb2EyVjVabkpoYldWektTQTlQaUI3WEc0Z0lDOHZJSEpoYm1SdmJTQnVZVzFsWEc0Z0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTF3YkhWemNHeDFjMXh1SUNCamIyNXpkQ0J1WVcxbElEMGdZR0Z1YVcxZkpIc3JLMmx1WkdWNGZTUjdUblZ0WW1WeUtHNWxkeUJFWVhSbEtDa3BmV0E3WEc0Z0lHeGxkQ0JqYzNNZ1BTQmdRR3RsZVdaeVlXMWxjeUFrZTI1aGJXVjlJSHRnTzF4dVhHNGdJRTlpYW1WamRDNXJaWGx6S0d0bGVXWnlZVzFsY3lrdVptOXlSV0ZqYUNnb2EyVjVLU0E5UGlCN1hHNGdJQ0FnWTNOeklDczlJR0FrZTJ0bGVYMGdlMkE3WEc1Y2JpQWdJQ0JQWW1wbFkzUXVhMlY1Y3loclpYbG1jbUZ0WlhOYmEyVjVYU2t1Wm05eVJXRmphQ2dvY0hKdmNHVnlkSGtwSUQwK0lIdGNiaUFnSUNBZ0lHTnZibk4wSUhCaGNuUWdQU0JnT2lSN2EyVjVabkpoYldWelcydGxlVjFiY0hKdmNHVnlkSGxkZlR0Z08xeHVJQ0FnSUNBZ1kzTnpJQ3M5SUhCeWIzQmxjblI1SUNzZ2NHRnlkRHRjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJR056Y3lBclBTQW5mU2M3WEc0Z0lIMHBPMXh1WEc0Z0lHTnpjeUFyUFNBbmZTYzdYRzVjYmlBZ2FXNXpaWEowVW5Wc1pTaGpjM01wTzF4dVhHNGdJSEpsZEhWeWJpQnVZVzFsTzF4dWZUdGNibHh1WTI5dWMzUWdZVzVwYldGMGFXOXVJRDBnZTF4dUlDQnphRzkzT2lCN1hHNGdJQ0FnWVc1cGJXRjBhVzl1UkhWeVlYUnBiMjQ2SUNjd0xqTnpKeXhjYmlBZ0lDQmhibWx0WVhScGIyNVVhVzFwYm1kR2RXNWpkR2x2YmpvZ0oyVmhjMlV0YjNWMEp5eGNiaUFnZlN4Y2JpQWdhR2xrWlRvZ2UxeHVJQ0FnSUdGdWFXMWhkR2x2YmtSMWNtRjBhVzl1T2lBbk1DNHpjeWNzWEc0Z0lDQWdZVzVwYldGMGFXOXVWR2x0YVc1blJuVnVZM1JwYjI0NklDZGxZWE5sTFc5MWRDY3NYRzRnSUgwc1hHNGdJSE5vYjNkRGIyNTBaVzUwUVc1cGJXRjBhVzl1T2lCcGJuTmxjblJMWlhsbWNtRnRaWE5TZFd4bEtIdGNiaUFnSUNBbk1DVW5PaUI3WEc0Z0lDQWdJQ0J2Y0dGamFYUjVPaUF3TEZ4dUlDQWdJSDBzWEc0Z0lDQWdKekV3TUNVbk9pQjdYRzRnSUNBZ0lDQnZjR0ZqYVhSNU9pQXhMRnh1SUNBZ0lIMHNYRzRnSUgwcExGeHVJQ0JvYVdSbFEyOXVkR1Z1ZEVGdWFXMWhkR2x2YmpvZ2FXNXpaWEowUzJWNVpuSmhiV1Z6VW5Wc1pTaDdYRzRnSUNBZ0p6QWxKem9nZTF4dUlDQWdJQ0FnYjNCaFkybDBlVG9nTVN4Y2JpQWdJQ0I5TEZ4dUlDQWdJQ2N4TURBbEp6b2dlMXh1SUNBZ0lDQWdiM0JoWTJsMGVUb2dNQ3hjYmlBZ0lDQjlMRnh1SUNCOUtTeGNiaUFnYzJodmQwSmhZMnRrY205d1FXNXBiV0YwYVc5dU9pQnBibk5sY25STFpYbG1jbUZ0WlhOU2RXeGxLSHRjYmlBZ0lDQW5NQ1VuT2lCN1hHNGdJQ0FnSUNCdmNHRmphWFI1T2lBd0xGeHVJQ0FnSUgwc1hHNGdJQ0FnSnpFd01DVW5PaUI3WEc0Z0lDQWdJQ0J2Y0dGamFYUjVPaUF3TGprc1hHNGdJQ0FnZlN4Y2JpQWdmU2tzWEc0Z0lHaHBaR1ZDWVdOclpISnZjRUZ1YVcxaGRHbHZiam9nYVc1elpYSjBTMlY1Wm5KaGJXVnpVblZzWlNoN1hHNGdJQ0FnSnpBbEp6b2dlMXh1SUNBZ0lDQWdiM0JoWTJsMGVUb2dNQzQ1TEZ4dUlDQWdJSDBzWEc0Z0lDQWdKekV3TUNVbk9pQjdYRzRnSUNBZ0lDQnZjR0ZqYVhSNU9pQXdMRnh1SUNBZ0lIMHNYRzRnSUgwcExGeHVmVHRjYmx4dVkyOXVjM1FnWlc1a1JYWmxiblJ6SUQwZ1d5ZDBjbUZ1YzJsMGFXOXVaVzVrSnl3Z0oyRnVhVzFoZEdsdmJtVnVaQ2RkTzF4dVhHNW1kVzVqZEdsdmJpQmhaR1JGZG1WdWRFeHBjM1JsYm1WeUtHNXZaR1VzSUdWMlpXNTBUbUZ0WlN3Z1pYWmxiblJNYVhOMFpXNWxjaWtnZTF4dUlDQnViMlJsTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWlhabGJuUk9ZVzFsTENCbGRtVnVkRXhwYzNSbGJtVnlMQ0JtWVd4elpTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlISmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9ibTlrWlN3Z1pYWmxiblJPWVcxbExDQmxkbVZ1ZEV4cGMzUmxibVZ5S1NCN1hHNGdJRzV2WkdVdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaGxkbVZ1ZEU1aGJXVXNJR1YyWlc1MFRHbHpkR1Z1WlhJc0lHWmhiSE5sS1R0Y2JuMWNibHh1WTI5dWMzUWdjbVZ0YjNabFJXNWtSWFpsYm5STWFYTjBaVzVsY2lBOUlDaHViMlJsTENCbGRtVnVkRXhwYzNSbGJtVnlLU0E5UGlCN1hHNGdJR2xtSUNobGJtUkZkbVZ1ZEhNdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdjbVYwZFhKdU8xeHVJQ0I5WEc0Z0lHVnVaRVYyWlc1MGN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaGxibVJGZG1WdWRDa2dlMXh1SUNBZ0lISmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9ibTlrWlN3Z1pXNWtSWFpsYm5Rc0lHVjJaVzUwVEdsemRHVnVaWElwTzF4dUlDQjlLVHRjYm4wN1hHNWNibU52Ym5OMElHRmtaRVZ1WkVWMlpXNTBUR2x6ZEdWdVpYSWdQU0FvYm05a1pTd2daWFpsYm5STWFYTjBaVzVsY2lrZ1BUNGdlMXh1SUNCcFppQW9aVzVrUlhabGJuUnpMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHVJQ0FnSUM4dklFbG1JRU5UVXlCMGNtRnVjMmwwYVc5dWN5QmhjbVVnYm05MElITjFjSEJ2Y25SbFpDd2dkSEpwWjJkbGNpQmhiaUJjSW1WdVpDQmhibWx0WVhScGIyNWNJbHh1SUNBZ0lDOHZJR1YyWlc1MElHbHRiV1ZrYVdGMFpXeDVMbHh1SUNBZ0lIZHBibVJ2ZHk1elpYUlVhVzFsYjNWMEtHVjJaVzUwVEdsemRHVnVaWElzSURBcE8xeHVJQ0FnSUhKbGRIVnlianRjYmlBZ2ZWeHVJQ0JsYm1SRmRtVnVkSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvWlc1a1JYWmxiblFwSUh0Y2JpQWdJQ0JoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRzV2WkdVc0lHVnVaRVYyWlc1MExDQmxkbVZ1ZEV4cGMzUmxibVZ5S1R0Y2JpQWdmU2s3WEc1OU8xeHVYRzVqYkdGemN5QkdZV1JsVFc5a1lXd2daWGgwWlc1a2N5QkRiMjF3YjI1bGJuUWdlMXh1SUNCamIyNTBaVzUwSUQwZ2JuVnNiRHRjYmx4dUlDQnpkR0YwYVdNZ2NISnZjRlI1Y0dWeklEMGdlMXh1SUNBZ0lHSmhZMnRrY205d09pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0JpWVdOclpISnZjRk4wZVd4bE9pQlFjbTl3Vkhsd1pYTXViMkpxWldOMExGeHVJQ0FnSUdOc2IzTmxUMjVEYkdsamF6b2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnWTI5dWRHVnVkRk4wZVd4bE9pQlFjbTl3Vkhsd1pYTXViMkpxWldOMExGeHVJQ0FnSUd0bGVXSnZZWEprT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnRiMlJoYkZOMGVXeGxPaUJRY205d1ZIbHdaWE11YjJKcVpXTjBMRnh1SUNBZ0lHOXVVMmh2ZHpvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdiMjVJYVdSbE9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0JqYUdsc1pISmxiam9nVUhKdmNGUjVjR1Z6TG01dlpHVXNYRzRnSUgwN1hHNWNiaUFnYzNSaGRHbGpJR1JsWm1GMWJIUlFjbTl3Y3lBOUlIdGNiaUFnSUNCdmJsTm9iM2M2SUNncElEMCtJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQnZia2hwWkdVNklDZ3BJRDArSUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0JyWlhsaWIyRnlaRG9nZEhKMVpTeGNiaUFnSUNCaVlXTnJaSEp2Y0RvZ2RISjFaU3hjYmlBZ0lDQmpiRzl6WlU5dVEyeHBZMnM2SUhSeWRXVXNYRzRnSUNBZ2JXOWtZV3hUZEhsc1pUb2dlMzBzWEc0Z0lDQWdZbUZqYTJSeWIzQlRkSGxzWlRvZ2UzMHNYRzRnSUNBZ1kyOXVkR1Z1ZEZOMGVXeGxPaUI3ZlN4Y2JpQWdJQ0JqYUdsc1pISmxiam9nVzEwc1hHNGdJSDA3WEc1Y2JpQWdjM1JoZEdVZ1BTQjdYRzRnSUNBZ2QybHNiRWhwWkdVNklIUnlkV1VzWEc0Z0lDQWdhR2xrWkdWdU9pQjBjblZsTEZ4dUlDQjlPMXh1WEc0Z0lHRmtaRlJ5WVc1emFYUnBiMjVNYVhOMFpXNWxjaUE5SUNodWIyUmxMQ0JvWVc1a2JHVXBJRDArSUh0Y2JpQWdJQ0JwWmlBb2JtOWtaU2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdaVzVrVEdsemRHVnVaWElnUFNCbWRXNWpkR2x2YmlBb1pTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1pTQW1KaUJsTG5SaGNtZGxkQ0FoUFQwZ2JtOWtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaVzF2ZG1WRmJtUkZkbVZ1ZEV4cGMzUmxibVZ5S0c1dlpHVXNJR1Z1WkV4cGMzUmxibVZ5S1R0Y2JpQWdJQ0FnSUNBZ2FHRnVaR3hsS0NrN1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ1lXUmtSVzVrUlhabGJuUk1hWE4wWlc1bGNpaHViMlJsTENCbGJtUk1hWE4wWlc1bGNpazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJR2hoYm1Sc1pVSmhZMnRrY205d1EyeHBZMnNnUFNBb0tTQTlQaUI3WEc0Z0lDQWdhV1lnS0hSb2FYTXVjSEp2Y0hNdVkyeHZjMlZQYmtOc2FXTnJLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtaHBaR1VvS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ2FHRnpTR2xrWkdWdUlEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuTjBZWFJsTG1ocFpHUmxianRjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWElvS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YzNSaGRHVXVhR2xrWkdWdUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCN0lIZHBiR3hJYVdSbElIMGdQU0IwYUdsekxuTjBZWFJsTzF4dUlDQWdJR052Ym5OMElIc2diVzlrWVd4VGRIbHNaU0I5SUQwZ2RHaHBjeTV3Y205d2N6dGNiaUFnSUNCamIyNXpkQ0JpWVdOclpISnZjRk4wZVd4bElEMGdlMXh1SUNBZ0lDQWdZVzVwYldGMGFXOXVUbUZ0WlRvZ2QybHNiRWhwWkdWY2JpQWdJQ0FnSUNBZ1B5QmhibWx0WVhScGIyNHVhR2xrWlVKaFkydGtjbTl3UVc1cGJXRjBhVzl1WEc0Z0lDQWdJQ0FnSURvZ1lXNXBiV0YwYVc5dUxuTm9iM2RDWVdOclpISnZjRUZ1YVcxaGRHbHZiaXhjYmlBZ0lDQWdJR0Z1YVcxaGRHbHZibFJwYldsdVowWjFibU4wYVc5dU9pQW9kMmxzYkVocFpHVWdQeUJoYm1sdFlYUnBiMjR1YUdsa1pTQTZJR0Z1YVcxaGRHbHZiaTV6YUc5M0tWeHVJQ0FnSUNBZ0lDQXVZVzVwYldGMGFXOXVWR2x0YVc1blJuVnVZM1JwYjI0c1hHNGdJQ0FnSUNBdUxpNTBhR2x6TG5CeWIzQnpMbUpoWTJ0a2NtOXdVM1I1YkdVc1hHNGdJQ0FnZlR0Y2JpQWdJQ0JqYjI1emRDQmpiMjUwWlc1MFUzUjViR1VnUFNCN1hHNGdJQ0FnSUNCaGJtbHRZWFJwYjI1RWRYSmhkR2x2YmpvZ0tIZHBiR3hJYVdSbElEOGdZVzVwYldGMGFXOXVMbWhwWkdVZ09pQmhibWx0WVhScGIyNHVjMmh2ZHlsY2JpQWdJQ0FnSUNBZ0xtRnVhVzFoZEdsdmJrUjFjbUYwYVc5dUxGeHVJQ0FnSUNBZ1lXNXBiV0YwYVc5dVRtRnRaVG9nZDJsc2JFaHBaR1ZjYmlBZ0lDQWdJQ0FnUHlCaGJtbHRZWFJwYjI0dWFHbGtaVU52Ym5SbGJuUkJibWx0WVhScGIyNWNiaUFnSUNBZ0lDQWdPaUJoYm1sdFlYUnBiMjR1YzJodmQwTnZiblJsYm5SQmJtbHRZWFJwYjI0c1hHNGdJQ0FnSUNCaGJtbHRZWFJwYjI1VWFXMXBibWRHZFc1amRHbHZiam9nS0hkcGJHeElhV1JsSUQ4Z1lXNXBiV0YwYVc5dUxtaHBaR1VnT2lCaGJtbHRZWFJwYjI0dWMyaHZkeWxjYmlBZ0lDQWdJQ0FnTG1GdWFXMWhkR2x2YmxScGJXbHVaMFoxYm1OMGFXOXVMRnh1SUNBZ0lDQWdMaTR1ZEdocGN5NXdjbTl3Y3k1amIyNTBaVzUwVTNSNWJHVXNYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHTnZibk4wSUdKaFkydGtjbTl3SUQwZ2RHaHBjeTV3Y205d2N5NWlZV05yWkhKdmNDQS9JQ2hjYmlBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2liVzlrWVd4ZlgySmhZMnRrY205d1hDSmNiaUFnSUNBZ0lDQWdjM1I1YkdVOWUySmhZMnRrY205d1UzUjViR1Y5WEc0Z0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZTNSb2FYTXVjSEp2Y0hNdVkyeHZjMlZQYmtOc2FXTnJJRDhnZEdocGN5NW9ZVzVrYkdWQ1lXTnJaSEp2Y0VOc2FXTnJJRG9nYm5Wc2JIMWNiaUFnSUNBZ0lDOCtYRzRnSUNBZ0tTQTZJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQWdJR2xtSUNoM2FXeHNTR2xrWlNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVoWkdSVWNtRnVjMmwwYVc5dVRHbHpkR1Z1WlhJb2RHaHBjeTVqYjI1MFpXNTBMQ0IwYUdsekxteGxZWFpsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQSE53WVc0K1hHNGdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWJXOWtZV3hjSWlCemRIbHNaVDE3Ylc5a1lXeFRkSGxzWlgwK1hHNGdJQ0FnSUNBZ0lDQWdQR1JwZGx4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQVndpYlc5a1lXeGZYMk52Ym5SbGJuUmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVm1QWHNvWld3cElEMCtJQ2gwYUdsekxtTnZiblJsYm5RZ1BTQmxiQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBZV0pKYm1SbGVEMWNJaTB4WENKY2JpQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bFBYdGpiMjUwWlc1MFUzUjViR1Y5WEc0Z0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNSb2FYTXVjSEp2Y0hNdVkyaHBiR1J5Wlc1OVhHNGdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNCN1ltRmphMlJ5YjNCOVhHNGdJQ0FnSUNBOEwzTndZVzQrWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVYRzRnSUd4bFlYWmxJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lIUm9hWE11YzJWMFUzUmhkR1VvZTF4dUlDQWdJQ0FnYUdsa1pHVnVPaUIwY25WbExGeHVJQ0FnSUgwcE8xeHVJQ0FnSUhSb2FYTXVjSEp2Y0hNdWIyNUlhV1JsS0hSb2FYTXVjM1JoZEdVdWFHbGtaVk52ZFhKalpTazdYRzRnSUgwN1hHNWNiaUFnWlc1MFpYSWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2RHaHBjeTV3Y205d2N5NXZibE5vYjNjb0tUdGNiaUFnZlR0Y2JseHVJQ0J6YUc5M0lEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1emRHRjBaUzVvYVdSa1pXNHBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHRjYmlBZ0lDQWdJSGRwYkd4SWFXUmxPaUJtWVd4elpTeGNiaUFnSUNBZ0lHaHBaR1JsYmpvZ1ptRnNjMlVzWEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0J6WlhSVWFXMWxiM1YwS0Z4dUlDQWdJQ0FnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Ga1pGUnlZVzV6YVhScGIyNU1hWE4wWlc1bGNpaDBhR2x6TG1OdmJuUmxiblFzSUhSb2FYTXVaVzUwWlhJcE8xeHVJQ0FnSUNBZ2ZTNWlhVzVrS0hSb2FYTXBMRnh1SUNBZ0lDQWdNQ3hjYmlBZ0lDQXBPMXh1SUNCOU8xeHVYRzRnSUdocFpHVWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWFHRnpTR2xrWkdWdUtDa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHRjYmlBZ0lDQWdJSGRwYkd4SWFXUmxPaUIwY25WbExGeHVJQ0FnSUgwcE8xeHVJQ0I5TzF4dVhHNGdJR3hwYzNSbGJrdGxlV0p2WVhKa0lEMGdLR1YyWlc1MEtTQTlQaUI3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUIwYUdsekxuQnliM0J6TG10bGVXSnZZWEprSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0IwYUdsekxuQnliM0J6TG10bGVXSnZZWEprS0dWMlpXNTBLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVqYkc5elpVOXVSWE5qS0dWMlpXNTBLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnWTJ4dmMyVlBia1Z6WXlBOUlDaGxkbVZ1ZENrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJSFJvYVhNdWNISnZjSE11YTJWNVltOWhjbVFnSmlaY2JpQWdJQ0FnSUNobGRtVnVkQzVyWlhrZ1BUMDlJQ2RGYzJOaGNHVW5JSHg4SUdWMlpXNTBMbXRsZVVOdlpHVWdQVDA5SURJM0tWeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVvYVdSbEtDazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJRlZPVTBGR1JWOWpiMjF3YjI1bGJuUkVhV1JOYjNWdWRDQTlJQ2dwSUQwK0lIdGNiaUFnSUNCM2FXNWtiM2N1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduYTJWNVpHOTNiaWNzSUhSb2FYTXViR2x6ZEdWdVMyVjVZbTloY21Rc0lIUnlkV1VwTzF4dUlDQjlPMXh1WEc0Z0lGVk9VMEZHUlY5amIyMXdiMjVsYm5SWGFXeHNWVzV0YjNWdWRDQTlJQ2dwSUQwK0lIdGNiaUFnSUNCM2FXNWtiM2N1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbmEyVjVaRzkzYmljc0lIUm9hWE11YkdsemRHVnVTMlY1WW05aGNtUXNJSFJ5ZFdVcE8xeHVJQ0I5TzF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkdZV1JsVFc5a1lXdzdYRzRpTENKcGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUZKbFlXTjBMQ0I3SUVOdmJYQnZibVZ1ZENCOUlHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0I3SUdOdmJtNWxZM1FnZlNCbWNtOXRJQ2R5WldGamRDMXlaV1IxZUNjN1hHNXBiWEJ2Y25RZ0tpQmhjeUJoWTNScGIyNXpJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM04wYjNKbEwyRmpkR2x2Ym5Nbk8xeHVhVzF3YjNKMElFbGtaVzUwYVdOdmJpQm1jbTl0SUNjdUxpOHVMaTh1TGk5MWFTOXBaR1Z1ZEdsamIyNG5PMXh1YVcxd2IzSjBJRUoxZEhSdmJpQm1jbTl0SUNjdUxpOHVMaTh1TGk5MWFTOWlkWFIwYjI0bk8xeHVhVzF3YjNKMElIc2dSRVZHUVZWTVZGOVNUMVZVUlNCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyaGxiSEJsY25NdlkyOXVjM1JoYm5SekwzSnZkWFJsY3ljN1hHNWNibVoxYm1OMGFXOXVJRzFoY0ZOMFlYUmxWRzlRY205d2N5aHpkR0YwWlNrZ2UxeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lIUnZhMlZ1T2lCemRHRjBaUzVoY0hCVGRHRjBaUzV0YjJSaGJDNXRiMlJoYkZOMFlYUmxMbkJ5YjNCekxuUnZhMlZ1TEZ4dUlDQWdJR2hwYzNSdmNuazZJSE4wWVhSbExtRndjRk4wWVhSbExtMXZaR0ZzTG0xdlpHRnNVM1JoZEdVdWNISnZjSE11YUdsemRHOXllU3hjYmlBZ2ZUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2JXRndSR2x6Y0dGMFkyaFViMUJ5YjNCektHUnBjM0JoZEdOb0tTQjdYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdhR2xrWlUxdlpHRnNPaUFvS1NBOVBpQmthWE53WVhSamFDaGhZM1JwYjI1ekxtaHBaR1ZOYjJSaGJDZ3BLU3hjYmlBZ0lDQm9hV1JsVkc5clpXNDZJQ2hoWkdSeVpYTnpLU0E5UGlCN1hHNGdJQ0FnSUNCa2FYTndZWFJqYUNoY2JpQWdJQ0FnSUNBZ1lXTjBhVzl1Y3k1cFoyNXZjbVZVYjJ0bGJuTW9lMXh1SUNBZ0lDQWdJQ0FnSUhSdmEyVnVjMVJ2U1dkdWIzSmxPaUJoWkdSeVpYTnpMRnh1SUNBZ0lDQWdJQ0I5S1N4Y2JpQWdJQ0FnSUNrdWRHaGxiaWdvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR1JwYzNCaGRHTm9LR0ZqZEdsdmJuTXVhR2xrWlUxdlpHRnNLQ2twTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlN4Y2JpQWdmVHRjYm4xY2JseHVZMnhoYzNNZ1NHbGtaVlJ2YTJWdVEyOXVabWx5YldGMGFXOXVUVzlrWVd3Z1pYaDBaVzVrY3lCRGIyMXdiMjVsYm5RZ2UxeHVJQ0J6ZEdGMGFXTWdZMjl1ZEdWNGRGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUhRNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQjlPMXh1WEc0Z0lITjBZWFJwWXlCd2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUNBZ2FHbGtaVlJ2YTJWdU9pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUdocFpHVk5iMlJoYkRvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0IwYjJ0bGJqb2dVSEp2Y0ZSNWNHVnpMbk5vWVhCbEtIdGNiaUFnSUNBZ0lITjViV0p2YkRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0FnSUdGa1pISmxjM002SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdJQ0JwYldGblpUb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCOUtTeGNiaUFnSUNCb2FYTjBiM0o1T2lCUWNtOXdWSGx3WlhNdWIySnFaV04wTEZ4dUlDQjlPMXh1WEc0Z0lITjBZWFJsSUQwZ2UzMDdYRzVjYmlBZ2NtVnVaR1Z5S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnZEc5clpXNHNJR2hwWkdWVWIydGxiaXdnYUdsa1pVMXZaR0ZzTENCb2FYTjBiM0o1SUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHTnZibk4wSUhzZ2MzbHRZbTlzTENCaFpHUnlaWE56TENCcGJXRm5aU0I5SUQwZ2RHOXJaVzQ3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSm9hV1JsTFhSdmEyVnVMV052Ym1acGNtMWhkR2x2Ymx3aVBseHVJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0ltaHBaR1V0ZEc5clpXNHRZMjl1Wm1seWJXRjBhVzl1WDE5amIyNTBZV2x1WlhKY0lqNWNiaUFnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbWhwWkdVdGRHOXJaVzR0WTI5dVptbHliV0YwYVc5dVgxOTBhWFJzWlZ3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNSb2FYTXVZMjl1ZEdWNGRDNTBLQ2RvYVdSbFZHOXJaVzVRY205dGNIUW5LWDFjYmlBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBOFNXUmxiblJwWTI5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKb2FXUmxMWFJ2YTJWdUxXTnZibVpwY20xaGRHbHZibDlmYVdSbGJuUnBZMjl1WENKY2JpQWdJQ0FnSUNBZ0lDQWdJR1JwWVcxbGRHVnlQWHMwTlgxY2JpQWdJQ0FnSUNBZ0lDQWdJR0ZrWkhKbGMzTTllMkZrWkhKbGMzTjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJXRm5aVDE3YVcxaFoyVjlYRzRnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0ltaHBaR1V0ZEc5clpXNHRZMjl1Wm1seWJXRjBhVzl1WDE5emVXMWliMnhjSWo1N2MzbHRZbTlzZlR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpYUdsa1pTMTBiMnRsYmkxamIyNW1hWEp0WVhScGIyNWZYMk52Y0hsY0lqNWNiaUFnSUNBZ0lDQWdJQ0FnSUh0MGFHbHpMbU52Ym5SbGVIUXVkQ2duY21WaFpHUlViMnRsYmljcGZWeHVJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2lhR2xrWlMxMGIydGxiaTFqYjI1bWFYSnRZWFJwYjI1ZlgySjFkSFJ2Ym5OY0lqNWNiaUFnSUNBZ0lDQWdJQ0FnSUR4Q2RYUjBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlQxY0luTmxZMjl1WkdGeWVWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbWhwWkdVdGRHOXJaVzR0WTI5dVptbHliV0YwYVc5dVgxOWlkWFIwYjI1Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhMWFJsYzNScFpEMWNJbWhwWkdVdGRHOXJaVzR0WTI5dVptbHliV0YwYVc5dVgxOWpZVzVqWld4Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yUFhzb0tTQTlQaUJvYVdSbFRXOWtZV3dvS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdlM1JvYVhNdVkyOXVkR1Y0ZEM1MEtDZGpZVzVqWld3bktYMWNiaUFnSUNBZ0lDQWdJQ0FnSUR3dlFuVjBkRzl1UGx4dUlDQWdJQ0FnSUNBZ0lDQWdQRUoxZEhSdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxQVndpY0hKcGJXRnllVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW1ocFpHVXRkRzlyWlc0dFkyOXVabWx5YldGMGFXOXVYMTlpZFhSMGIyNWNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoTFhSbGMzUnBaRDFjSW1ocFpHVXRkRzlyWlc0dFkyOXVabWx5YldGMGFXOXVYMTlvYVdSbFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdocFpHVlViMnRsYmloaFpHUnlaWE56S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb2FYTjBiM0o1TG5CMWMyZ29SRVZHUVZWTVZGOVNUMVZVUlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxOVhHNGdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHQwYUdsekxtTnZiblJsZUhRdWRDZ25hR2xrWlNjcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5Q2RYUjBiMjQrWEc0Z0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnS1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamIyNXVaV04wS0Z4dUlDQnRZWEJUZEdGMFpWUnZVSEp2Y0hNc1hHNGdJRzFoY0VScGMzQmhkR05vVkc5UWNtOXdjeXhjYmlrb1NHbGtaVlJ2YTJWdVEyOXVabWx5YldGMGFXOXVUVzlrWVd3cE8xeHVJaXdpWlhod2IzSjBJSHNnWkdWbVlYVnNkQ0I5SUdaeWIyMGdKeTR2YUdsa1pTMTBiMnRsYmkxamIyNW1hWEp0WVhScGIyNHRiVzlrWVd3bk8xeHVJaXdpYVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JTWldGamRDd2dleUIxYzJWRGIyNTBaWGgwSUgwZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJSGRwZEdoTmIyUmhiRkJ5YjNCeklHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyaGxiSEJsY25NdmFHbG5hR1Z5TFc5eVpHVnlMV052YlhCdmJtVnVkSE12ZDJsMGFDMXRiMlJoYkMxd2NtOXdjeWM3WEc1cGJYQnZjblFnUW05NElHWnliMjBnSnk0dUx5NHVMeTR1TDNWcEwySnZlQ2M3WEc1cGJYQnZjblFnZTF4dUlDQlVaWGgwTEZ4dUlDQkNkWFIwYjI0c1hHNGdJRUpWVkZSUFRsOVRTVnBGVXl4Y2JpQWdRbFZVVkU5T1gxWkJVa2xCVGxRc1hHNGdJRUoxZEhSdmJrbGpiMjRzWEc0Z0lFbGpiMjVPWVcxbExGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOWpiMjF3YjI1bGJuUXRiR2xpY21GeWVTYzdYRzVwYlhCdmNuUWdlMXh1SUNCQmJHbG5ia2wwWlcxekxGeHVJQ0JFU1ZOUVRFRlpMRnh1SUNCR1RFVllYMFJKVWtWRFZFbFBUaXhjYmlBZ1NuVnpkR2xtZVVOdmJuUmxiblFzWEc0Z0lGTnBlbVVzWEc0Z0lGUmxlSFJXWVhKcFlXNTBMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5b1pXeHdaWEp6TDJOdmJuTjBZVzUwY3k5a1pYTnBaMjR0YzNsemRHVnRKenRjYm1sdGNHOXlkQ0JJYjJ4a1ZHOVNaWFpsWVd4Q2RYUjBiMjRnWm5KdmJTQW5MaTR2TGk0dmFHOXNaQzEwYnkxeVpYWmxZV3d0WW5WMGRHOXVKenRjYm1sdGNHOXlkQ0I3SUhWelpVa3hPRzVEYjI1MFpYaDBJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2YUc5dmEzTXZkWE5sU1RFNGJrTnZiblJsZUhRbk8xeHVhVzF3YjNKMElGcEZUa1JGVTB0ZlZWSk1VeUJtY205dElDY3VMaTh1TGk4dUxpOHVMaTlvWld4d1pYSnpMMk52Ym5OMFlXNTBjeTk2Wlc1a1pYTnJMWFZ5YkNjN1hHNXBiWEJ2Y25RZ2V5Qk5aWFJoVFdWMGNtbGpjME52Ym5SbGVIUWdmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTlqYjI1MFpYaDBjeTl0WlhSaGJXVjBjbWxqY3ljN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JOWlhSaFRXVjBjbWxqYzBWMlpXNTBRMkYwWldkdmNua3NYRzRnSUUxbGRHRk5aWFJ5YVdOelJYWmxiblJMWlhsVWVYQmxMRnh1SUNCTlpYUmhUV1YwY21samMwVjJaVzUwVG1GdFpTeGNibjBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2TGk0dmMyaGhjbVZrTDJOdmJuTjBZVzUwY3k5dFpYUmhiV1YwY21samN5YzdYRzVjYm1OdmJuTjBJRWh2YkdSVWIxSmxkbVZoYkUxdlpHRnNJRDBnS0h0Y2JpQWdiMjVNYjI1blVISmxjM05sWkN4Y2JpQWdhR2xrWlUxdlpHRnNMRnh1SUNCM2FXeHNTR2xrWlNBOUlIUnlkV1VzWEc0Z0lHaHZiR1JVYjFKbGRtVmhiRlI1Y0dVZ1BTQW5VMUpRSnl4Y2JuMHBJRDArSUh0Y2JpQWdZMjl1YzNRZ2RDQTlJSFZ6WlVreE9HNURiMjUwWlhoMEtDazdYRzRnSUdOdmJuTjBJR2h2YkdSVWIxSmxkbVZoYkZScGRHeGxJRDFjYmlBZ0lDQm9iMnhrVkc5U1pYWmxZV3hVZVhCbElEMDlQU0FuVTFKUUoxeHVJQ0FnSUNBZ1B5QW5hRzlzWkZSdlVtVjJaV0ZzVTFKUVZHbDBiR1VuWEc0Z0lDQWdJQ0E2SUNkb2IyeGtWRzlTWlhabFlXeFFjbWwyWVhSbFMyVjVWR2wwYkdVbk8xeHVYRzRnSUdOdmJuTjBJR2h2YkdSVWIxSmxkbVZoYkVKMWRIUnZiaUE5WEc0Z0lDQWdhRzlzWkZSdlVtVjJaV0ZzVkhsd1pTQTlQVDBnSjFOU1VDY2dQeUFuYUc5c1pGUnZVbVYyWldGc1UxSlFKeUE2SUNkb2IyeGtWRzlTWlhabFlXeFFjbWwyWVhSbFMyVjVKenRjYmlBZ1kyOXVjM1FnZEhKaFkydEZkbVZ1ZENBOUlIVnpaVU52Ym5SbGVIUW9UV1YwWVUxbGRISnBZM05EYjI1MFpYaDBLVHRjYmx4dUlDQmpiMjV6ZENCMWJteHZZMnNnUFNBb0tTQTlQaUI3WEc0Z0lDQWdiMjVNYjI1blVISmxjM05sWkNncE8xeHVJQ0FnSUdsbUlDaDNhV3hzU0dsa1pTa2dlMXh1SUNBZ0lDQWdhR2xrWlUxdlpHRnNLQ2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUdOdmJuTjBJR2hoYm1Sc1pVTmhibU5sYkNBOUlDZ3BJRDArSUh0Y2JpQWdJQ0JvYVdSbFRXOWtZV3dvS1R0Y2JpQWdmVHRjYmx4dUlDQmpiMjV6ZENCeVpXNWtaWEpJYjJ4a1ZHOVNaWFpsWVd4UWNtbDJZWFJsUzJWNVEyOXVkR1Z1ZENBOUlDZ3BJRDArSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQRUp2ZUZ4dUlDQWdJQ0FnSUNCa2FYTndiR0Y1UFh0RVNWTlFURUZaTGtaTVJWaDlYRzRnSUNBZ0lDQWdJR1pzWlhoRWFYSmxZM1JwYjI0OWUwWk1SVmhmUkVsU1JVTlVTVTlPTGtOUFRGVk5UbjFjYmlBZ0lDQWdJQ0FnWjJGd1BYczBmVnh1SUNBZ0lDQWdJQ0J0WVhKbmFXNUNiM1IwYjIwOWV6WjlYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJRHhVWlhoMElIWmhjbWxoYm5ROWUxUmxlSFJXWVhKcFlXNTBMbUp2WkhsTlpIMCtYRzRnSUNBZ0lDQWdJQ0FnZTNRb0oyaHZiR1JVYjFKbGRtVmhiRU52Ym5SbGJuUlFjbWwyWVhSbFMyVjVNU2NzSUZ0Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhVWlhoMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd0bGVUMWNJbWh2YkdRdGRHOHRjbVYyWldGc0xUSmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdFVaWGgwVm1GeWFXRnVkQzVpYjJSNVRXUkNiMnhrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JoY3oxY0luTndZVzVjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjdkQ2duYUc5c1pGUnZVbVYyWldGc1EyOXVkR1Z1ZEZCeWFYWmhkR1ZMWlhreUp5bDlYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwxUmxlSFErTEZ4dUlDQWdJQ0FnSUNBZ0lGMHBmVnh1SUNBZ0lDQWdJQ0E4TDFSbGVIUStYRzRnSUNBZ0lDQWdJRHhVWlhoMElIWmhjbWxoYm5ROWUxUmxlSFJXWVhKcFlXNTBMbUp2WkhsTlpFSnZiR1I5UGx4dUlDQWdJQ0FnSUNBZ0lIdDBLQ2RvYjJ4a1ZHOVNaWFpsWVd4RGIyNTBaVzUwTXljc0lGdGNiaUFnSUNBZ0lDQWdJQ0FnSUR4VVpYaDBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHdGxlVDFjSW1odmJHUXRkRzh0Y21WMlpXRnNMVFJjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhKcFlXNTBQWHRVWlhoMFZtRnlhV0Z1ZEM1aWIyUjVUV1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0Z6UFZ3aWMzQmhibHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1JwYzNCc1lYazllMFJKVTFCTVFWa3VTVTVNU1U1RmZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZENnbmFHOXNaRlJ2VW1WMlpXRnNRMjl1ZEdWdWREUW5LWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZWR1Y0ZEQ0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4UW5WMGRHOXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHdGxlVDFjSW1odmJHUXRkRzh0Y21WMlpXRnNMVFZjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhKcFlXNTBQWHRDVlZSVVQwNWZWa0ZTU1VGT1ZDNU1TVTVMZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6YVhwbFBYdENWVlJVVDA1ZlUwbGFSVk11U1U1SVJWSkpWSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhSEpsWmoxN1drVk9SRVZUUzE5VlVreFRMazVQVGw5RFZWTlVUMFJKUVV4ZlYwRk1URVZVZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUTlYQ0pmWW14aGJtdGNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV3c5WENKdWIyOXdaVzVsY2lCdWIzSmxabVZ5Y21WeVhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0oyaHZiR1JVYjFKbGRtVmhiRU52Ym5SbGJuUTFKeWw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMEoxZEhSdmJqNHNYRzRnSUNBZ0lDQWdJQ0FnWFNsOVhHNGdJQ0FnSUNBZ0lEd3ZWR1Y0ZEQ1Y2JpQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDazdYRzRnSUgwN1hHNWNiaUFnWTI5dWMzUWdjbVZ1WkdWeVNHOXNaRlJ2VW1WMlpXRnNVMUpRUTI5dWRHVnVkQ0E5SUNncElEMCtJSHRjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ1BFSnZlRnh1SUNBZ0lDQWdJQ0JrYVhOd2JHRjVQWHRFU1ZOUVRFRlpMa1pNUlZoOVhHNGdJQ0FnSUNBZ0lHWnNaWGhFYVhKbFkzUnBiMjQ5ZTBaTVJWaGZSRWxTUlVOVVNVOU9Ma05QVEZWTlRuMWNiaUFnSUNBZ0lDQWdaMkZ3UFhzMGZWeHVJQ0FnSUNBZ0lDQnRZWEpuYVc1Q2IzUjBiMjA5ZXpaOVhHNGdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lEeFVaWGgwSUhaaGNtbGhiblE5ZTFSbGVIUldZWEpwWVc1MExtSnZaSGxOWkgwK1hHNGdJQ0FnSUNBZ0lDQWdlM1FvSjJodmJHUlViMUpsZG1WaGJFTnZiblJsYm5ReEp5d2dXMXh1SUNBZ0lDQWdJQ0FnSUNBZ1BGUmxlSFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhMlY1UFZ3aWFHOXNaQzEwYnkxeVpYWmxZV3d0TWx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNtbGhiblE5ZTFSbGVIUldZWEpwWVc1MExtSnZaSGxOWkVKdmJHUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnpQVndpYzNCaGJsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUh0MEtDZG9iMnhrVkc5U1pYWmxZV3hEYjI1MFpXNTBNaWNwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlVWlhoMFBpeGNiaUFnSUNBZ0lDQWdJQ0JkS1gxY2JpQWdJQ0FnSUNBZ1BDOVVaWGgwUGx4dUlDQWdJQ0FnSUNBOFZHVjRkQ0IyWVhKcFlXNTBQWHRVWlhoMFZtRnlhV0Z1ZEM1aWIyUjVUV1JDYjJ4a2ZUNWNiaUFnSUNBZ0lDQWdJQ0I3ZENnbmFHOXNaRlJ2VW1WMlpXRnNRMjl1ZEdWdWRETW5MQ0JiWEc0Z0lDQWdJQ0FnSUNBZ0lDQThWR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhrOVhDSm9iMnhrTFhSdkxYSmxkbVZoYkMwMFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlhV0Z1ZEQxN1ZHVjRkRlpoY21saGJuUXVZbTlrZVUxa2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGN6MWNJbk53WVc1Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTndiR0Y1UFh0RVNWTlFURUZaTGtsT1RFbE9SWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2UzUW9KMmh2YkdSVWIxSmxkbVZoYkVOdmJuUmxiblEwSnlsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0E4TDFSbGVIUStMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1BFSjFkSFJ2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhrOVhDSm9iMnhrTFhSdkxYSmxkbVZoYkMwMVhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlhV0Z1ZEQxN1FsVlVWRTlPWDFaQlVrbEJUbFF1VEVsT1MzMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MybDZaVDE3VTJsNlpTNWhkWFJ2ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JvY21WbVBYdGFSVTVFUlZOTFgxVlNURk11VGs5T1gwTlZVMVJQUkVsQlRGOVhRVXhNUlZSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSaGNtZGxkRDFjSWw5aWJHRnVhMXdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYkQxY0ltNXZiM0JsYm1WeUlHNXZjbVZtWlhKeVpYSmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2RDZ25hRzlzWkZSdlVtVjJaV0ZzUTI5dWRHVnVkRFVuS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJRHd2UW5WMGRHOXVQaXhjYmlBZ0lDQWdJQ0FnSUNCZEtYMWNiaUFnSUNBZ0lDQWdQQzlVWlhoMFBseHVJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdLVHRjYmlBZ2ZUdGNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhDYjNoY2JpQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltaHZiR1F0ZEc4dGNtVjJaV0ZzTFcxdlpHRnNYQ0pjYmlBZ0lDQWdJR1JwYzNCc1lYazllMFJKVTFCTVFWa3VSa3hGV0gxY2JpQWdJQ0FnSUdac1pYaEVhWEpsWTNScGIyNDllMFpNUlZoZlJFbFNSVU5VU1U5T0xrTlBURlZOVG4xY2JpQWdJQ0FnSUdwMWMzUnBabmxEYjI1MFpXNTBQWHRLZFhOMGFXWjVRMjl1ZEdWdWRDNW1iR1Y0VTNSaGNuUjlYRzRnSUNBZ0lDQndZV1JrYVc1blBYczJmVnh1SUNBZ0lENWNiaUFnSUNBZ0lEeENiM2hjYmlBZ0lDQWdJQ0FnWkdsemNHeGhlVDE3UkVsVFVFeEJXUzVHVEVWWWZWeHVJQ0FnSUNBZ0lDQm1iR1Y0UkdseVpXTjBhVzl1UFh0R1RFVllYMFJKVWtWRFZFbFBUaTVTVDFkOVhHNGdJQ0FnSUNBZ0lHRnNhV2R1U1hSbGJYTTllMEZzYVdkdVNYUmxiWE11WTJWdWRHVnlmVnh1SUNBZ0lDQWdJQ0JxZFhOMGFXWjVRMjl1ZEdWdWREMTdTblZ6ZEdsbWVVTnZiblJsYm5RdWMzQmhZMlZDWlhSM1pXVnVmVnh1SUNBZ0lDQWdJQ0J0WVhKbmFXNUNiM1IwYjIwOWV6WjlYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJRHhVWlhoMElIWmhjbWxoYm5ROWUxUmxlSFJXWVhKcFlXNTBMbWhsWVdScGJtZFRiWDArZTNRb2FHOXNaRlJ2VW1WMlpXRnNWR2wwYkdVcGZUd3ZWR1Y0ZEQ1Y2JpQWdJQ0FnSUNBZ2UzZHBiR3hJYVdSbElDWW1JQ2hjYmlBZ0lDQWdJQ0FnSUNBOFFuVjBkRzl1U1dOdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aWFHOXNaQzEwYnkxeVpYWmxZV3d0Ylc5a1lXeGZYMk5zYjNObFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUdsamIyNU9ZVzFsUFh0SlkyOXVUbUZ0WlM1RGJHOXpaWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lITnBlbVU5ZTFOcGVtVXVVMDE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYc29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeVlXTnJSWFpsYm5Rb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhkR1ZuYjNKNU9pQk5aWFJoVFdWMGNtbGpjMFYyWlc1MFEyRjBaV2R2Y25rdVMyVjVjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWREb2dUV1YwWVUxbGRISnBZM05GZG1WdWRFNWhiV1V1VTNKd1NHOXNaRlJ2VW1WMlpXRnNRMnh2YzJWRGJHbGphMlZrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3RsZVY5MGVYQmxPaUJOWlhSaFRXVjBjbWxqYzBWMlpXNTBTMlY1Vkhsd1pTNVRjbkFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdoaGJtUnNaVU5oYm1ObGJDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0FnSUdGeWFXRk1ZV0psYkQxN2RDZ25ZMnh2YzJVbktYMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdJQ0I3YUc5c1pGUnZVbVYyWldGc1ZIbHdaU0E5UFQwZ0oxTlNVQ2RjYmlBZ0lDQWdJQ0FnUHlCeVpXNWtaWEpJYjJ4a1ZHOVNaWFpsWVd4VFVsQkRiMjUwWlc1MEtDbGNiaUFnSUNBZ0lDQWdPaUJ5Wlc1a1pYSkliMnhrVkc5U1pYWmxZV3hRY21sMllYUmxTMlY1UTI5dWRHVnVkQ2dwZlZ4dUlDQWdJQ0FnUEVodmJHUlViMUpsZG1WaGJFSjFkSFJ2Ymx4dUlDQWdJQ0FnSUNCaWRYUjBiMjVVWlhoMFBYdDBLR2h2YkdSVWIxSmxkbVZoYkVKMWRIUnZiaWw5WEc0Z0lDQWdJQ0FnSUc5dVRHOXVaMUJ5WlhOelpXUTllM1Z1Ykc5amEzMWNiaUFnSUNBZ0lDQWdiV0Z5WjJsdVRHVm1kRDFjSW1GMWRHOWNJbHh1SUNBZ0lDQWdJQ0J0WVhKbmFXNVNhV2RvZEQxY0ltRjFkRzljSWx4dUlDQWdJQ0FnTHo1Y2JpQWdJQ0E4TDBKdmVENWNiaUFnS1R0Y2JuMDdYRzVjYmtodmJHUlViMUpsZG1WaGJFMXZaR0ZzTG5CeWIzQlVlWEJsY3lBOUlIdGNiaUFnTHk4Z1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUdKbElHVjRaV04xZEdWa0lHRm1kR1Z5SUhSb1pTQm9iMnhrSUhSdklISmxkbVZoYkNCc2IyNW5JSEJ5WlhOeklHaGhjeUJpWldWdUlHTnZiWEJzWlhSbFpGeHVJQ0J2Ymt4dmJtZFFjbVZ6YzJWa09pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0JvYVdSbFRXOWtZV3c2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNCM2FXeHNTR2xrWlRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lHaHZiR1JVYjFKbGRtVmhiRlI1Y0dVNklGQnliM0JVZVhCbGN5NXZibVZQWmloYkoxTlNVQ2NzSUNkUWNtbDJZWFJsUzJWNUoxMHBMbWx6VW1WeGRXbHlaV1FzWEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjNhWFJvVFc5a1lXeFFjbTl3Y3loSWIyeGtWRzlTWlhabFlXeE5iMlJoYkNrN1hHNGlMQ0psZUhCdmNuUWdleUJrWldaaGRXeDBJSDBnWm5KdmJTQW5MaTlvYjJ4a0xYUnZMWEpsZG1WaGJDMXRiMlJoYkNjN1hHNGlMQ0pwYlhCdmNuUWdUVzlrWVd3Z1puSnZiU0FuTGk5dGIyUmhiQ2M3WEc1Y2JtVjRjRzl5ZENCN0lFMXZaR0ZzSUgwN1hHNGlMQ0pwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJRkpsWVdOMExDQjdJRU52YlhCdmJtVnVkQ0I5SUdaeWIyMGdKM0psWVdOMEp6dGNibHh1YVcxd2IzSjBJSHNnWTI5dWJtVmpkQ0I5SUdaeWIyMGdKM0psWVdOMExYSmxaSFY0Snp0Y2JtbHRjRzl5ZENBcUlHRnpJR0ZqZEdsdmJuTWdabkp2YlNBbkxpNHZMaTR2TGk0dmMzUnZjbVV2WVdOMGFXOXVjeWM3WEc1cGJYQnZjblFnYVhOTmIySnBiR1ZXYVdWM0lHWnliMjBnSnk0dUx5NHVMeTR1TDJobGJIQmxjbk12ZFhScGJITXZhWE10Ylc5aWFXeGxMWFpwWlhjbk8xeHVhVzF3YjNKMElIc2daMlYwUlc1MmFYSnZibTFsYm5SVWVYQmxJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2WVhCd0wzTmpjbWx3ZEhNdmJHbGlMM1YwYVd3bk8xeHVhVzF3YjNKMElIc2dSVTVXU1ZKUFRrMUZUbFJmVkZsUVJWOVFUMUJWVUNCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdllYQndKenRjYmx4dUx5OGdUVzlrWVd3Z1EyOXRjRzl1Wlc1MGMxeHVhVzF3YjNKMElFRmtaRTVsZEhkdmNtdE5iMlJoYkNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl3WVdkbGN5OXZibUp2WVhKa2FXNW5MV1pzYjNjdllXUmtMVzVsZEhkdmNtc3RiVzlrWVd3bk8xeHVhVzF3YjNKMElFRmpZMjkxYm5SRVpYUmhhV3h6VFc5a1lXd2dabkp2YlNBbkxpOWhZMk52ZFc1MExXUmxkR0ZwYkhNdGJXOWtZV3duTzF4dWFXMXdiM0owSUVWNGNHOXlkRkJ5YVhaaGRHVkxaWGxOYjJSaGJDQm1jbTl0SUNjdUwyVjRjRzl5ZEMxd2NtbDJZWFJsTFd0bGVTMXRiMlJoYkNjN1hHNXBiWEJ2Y25RZ1NHbGtaVlJ2YTJWdVEyOXVabWx5YldGMGFXOXVUVzlrWVd3Z1puSnZiU0FuTGk5b2FXUmxMWFJ2YTJWdUxXTnZibVpwY20xaGRHbHZiaTF0YjJSaGJDYzdYRzVwYlhCdmNuUWdVVkpUWTJGdWJtVnlJR1p5YjIwZ0p5NHZjWEl0YzJOaGJtNWxjaWM3WEc1Y2JtbHRjRzl5ZENCSWIyeGtWRzlTWlhabFlXeE5iMlJoYkNCbWNtOXRJQ2N1TDJodmJHUXRkRzh0Y21WMlpXRnNMVzF2WkdGc0p6dGNibWx0Y0c5eWRDQkRiMjVtYVhKdFVtVnRiM1psUVdOamIzVnVkQ0JtY205dElDY3VMMk52Ym1acGNtMHRjbVZ0YjNabExXRmpZMjkxYm5Rbk8xeHVhVzF3YjNKMElFTnZibVpwY20xU1pYTmxkRUZqWTI5MWJuUWdabkp2YlNBbkxpOWpiMjVtYVhKdExYSmxjMlYwTFdGalkyOTFiblFuTzF4dWFXMXdiM0owSUZSeVlXNXpZV04wYVc5dVEyOXVabWx5YldWa0lHWnliMjBnSnk0dmRISmhibk5oWTNScGIyNHRZMjl1Wm1seWJXVmtKenRjYmx4dWFXMXdiM0owSUVaaFpHVk5iMlJoYkNCbWNtOXRJQ2N1TDJaaFpHVXRiVzlrWVd3bk8xeHVhVzF3YjNKMElGSmxhbVZqZEZSeVlXNXpZV04wYVc5dWN5Qm1jbTl0SUNjdUwzSmxhbVZqZEMxMGNtRnVjMkZqZEdsdmJuTW5PMXh1YVcxd2IzSjBJRU52Ym1acGNtMUVaV3hsZEdWT1pYUjNiM0pySUdaeWIyMGdKeTR2WTI5dVptbHliUzFrWld4bGRHVXRibVYwZDI5eWF5YzdYRzVwYlhCdmNuUWdSV1JwZEVGd2NISnZkbUZzVUdWeWJXbHpjMmx2YmlCbWNtOXRJQ2N1TDJWa2FYUXRZWEJ3Y205MllXd3RjR1Z5YldsemMybHZiaWM3WEc1cGJYQnZjblFnVG1WM1FXTmpiM1Z1ZEUxdlpHRnNJR1p5YjIwZ0p5NHZibVYzTFdGalkyOTFiblF0Ylc5a1lXd25PMXh1YVcxd2IzSjBJRU4xYzNSdmJXbDZaVTV2Ym1ObFRXOWtZV3dnWm5KdmJTQW5MaTlqZFhOMGIyMXBlbVV0Ym05dVkyVW5PMXh1YVcxd2IzSjBJRU52Ym5abGNuUlViMnRsYmxSdlRtWjBUVzlrWVd3Z1puSnZiU0FuTGk5amIyNTJaWEowTFhSdmEyVnVMWFJ2TFc1bWRDMXRiMlJoYkM5amIyNTJaWEowTFhSdmEyVnVMWFJ2TFc1bWRDMXRiMlJoYkNjN1hHNXBiWEJ2Y25RZ1JYUm9VMmxuYmsxdlpHRnNJR1p5YjIwZ0p5NHZaWFJvTFhOcFoyNHRiVzlrWVd3dlpYUm9MWE5wWjI0dGJXOWtZV3duTzF4dVhHNWpiMjV6ZENCdGIyUmhiRU52Ym5SaGFXNWxja0poYzJWVGRIbHNaU0E5SUh0Y2JpQWdkSEpoYm5ObWIzSnRPaUFuZEhKaGJuTnNZWFJsTTJRb0xUVXdKU3dnTUN3Z01IQjRLU2NzWEc0Z0lHSnZjbVJsY2pvZ0p6RndlQ0J6YjJ4cFpDQjJZWElvTFMxamIyeHZjaTFpYjNKa1pYSXRaR1ZtWVhWc2RDa25MRnh1SUNCaWIzSmtaWEpTWVdScGRYTTZJQ2M0Y0hnbkxGeHVJQ0JpWVdOclozSnZkVzVrUTI5c2IzSTZJQ2QyWVhJb0xTMWpiMnh2Y2kxaVlXTnJaM0p2ZFc1a0xXUmxabUYxYkhRcEp5eGNiaUFnWW05NFUyaGhaRzkzT2lBbmRtRnlLQzB0YzJoaFpHOTNMWE5wZW1VdGMyMHBJSFpoY2lndExXTnZiRzl5TFhOb1lXUnZkeTFrWldaaGRXeDBLU2NzWEc1OU8xeHVYRzVqYjI1emRDQnRiMlJoYkVOdmJuUmhhVzVsY2t4aGNIUnZjRk4wZVd4bElEMGdlMXh1SUNBdUxpNXRiMlJoYkVOdmJuUmhhVzVsY2tKaGMyVlRkSGxzWlN4Y2JpQWdkMmxrZEdnNklDY3pORFJ3ZUNjc1hHNGdJSFJ2Y0RvZ0p6RTFKU2NzWEc1OU8xeHVYRzVqYjI1emRDQnRiMlJoYkVOdmJuUmhhVzVsY2sxdlltbHNaVk4wZVd4bElEMGdlMXh1SUNBdUxpNXRiMlJoYkVOdmJuUmhhVzVsY2tKaGMyVlRkSGxzWlN4Y2JpQWdkMmxrZEdnNklDY3pNRGx3ZUNjc1hHNGdJSFJ2Y0RvZ0p6RXlMalVsSnl4Y2JuMDdYRzVjYm1OdmJuTjBJR0ZqWTI5MWJuUk5iMlJoYkZOMGVXeGxJRDBnZTF4dUlDQnRiMkpwYkdWTmIyUmhiRk4wZVd4bE9pQjdYRzRnSUNBZ2QybGtkR2c2SUNjNU5TVW5MRnh1SUNBZ0lDOHZJSFJ2Y0RvZ2FYTlFiM0IxY0U5eVRtOTBhV1pwWTJGMGFXOXVLQ2tnUFQwOUlDZHdiM0IxY0NjZ1B5QW5OVEoyYUNjZ09pQW5Nell1Tlhab0p5eGNiaUFnSUNCaWIzaFRhR0ZrYjNjNklDZDJZWElvTFMxemFHRmtiM2N0YzJsNlpTMTRjeWtnZG1GeUtDMHRZMjlzYjNJdGMyaGhaRzkzTFdSbFptRjFiSFFwSnl4Y2JpQWdJQ0JpYjNKa1pYSlNZV1JwZFhNNklDYzBjSGduTEZ4dUlDQWdJSFJ2Y0RvZ0p6RXdKU2NzWEc0Z0lDQWdkSEpoYm5ObWIzSnRPaUFuYm05dVpTY3NYRzRnSUNBZ2JHVm1kRG9nSnpBbkxGeHVJQ0FnSUhKcFoyaDBPaUFuTUNjc1hHNGdJQ0FnYldGeVoybHVPaUFuTUNCaGRYUnZKeXhjYmlBZ2ZTeGNiaUFnYkdGd2RHOXdUVzlrWVd4VGRIbHNaVG9nZTF4dUlDQWdJSGRwWkhSb09pQW5Nek0xY0hnbkxGeHVJQ0FnSUM4dklIUnZjRG9nSjJOaGJHTW9Nek1sSUNzZ05EVndlQ2tuTEZ4dUlDQWdJR0p2ZUZOb1lXUnZkem9nSjNaaGNpZ3RMWE5vWVdSdmR5MXphWHBsTFhoektTQjJZWElvTFMxamIyeHZjaTF6YUdGa2IzY3RaR1ZtWVhWc2RDa25MRnh1SUNBZ0lHSnZjbVJsY2xKaFpHbDFjem9nSnpSd2VDY3NYRzRnSUNBZ2RHOXdPaUFuTVRBbEp5eGNiaUFnSUNCMGNtRnVjMlp2Y20wNklDZHViMjVsSnl4Y2JpQWdJQ0JzWldaME9pQW5NQ2NzWEc0Z0lDQWdjbWxuYUhRNklDY3dKeXhjYmlBZ0lDQnRZWEpuYVc0NklDY3dJR0YxZEc4bkxGeHVJQ0I5TEZ4dUlDQmpiMjUwWlc1MFUzUjViR1U2SUh0Y2JpQWdJQ0JpYjNKa1pYSlNZV1JwZFhNNklDYzBjSGduTEZ4dUlDQjlMRnh1ZlR0Y2JseHVYRzVqYjI1emRDQk5UMFJCVEZNZ1BTQjdYRzRnSUU5T1FrOUJVa1JKVGtkZlFVUkVYMDVGVkZkUFVrczZJSHRjYmlBZ0lDQmpiMjUwWlc1MGN6b2dQRUZrWkU1bGRIZHZjbXROYjJSaGJDQXZQaXhjYmlBZ0lDQXVMaTVoWTJOdmRXNTBUVzlrWVd4VGRIbHNaU3hjYmlBZ2ZTeGNiaUFnVGtWWFgwRkRRMDlWVGxRNklIdGNiaUFnSUNCamIyNTBaVzUwY3pvZ1BFNWxkMEZqWTI5MWJuUk5iMlJoYkNBdlBpeGNiaUFnSUNCdGIySnBiR1ZOYjJSaGJGTjBlV3hsT2lCN1hHNGdJQ0FnSUNCM2FXUjBhRG9nSnprMUpTY3NYRzRnSUNBZ0lDQjBiM0E2SUNjeE1DVW5MRnh1SUNBZ0lDQWdZbTk0VTJoaFpHOTNPaUFuZG1GeUtDMHRjMmhoWkc5M0xYTnBlbVV0ZUhNcElIWmhjaWd0TFdOdmJHOXlMWE5vWVdSdmR5MWtaV1poZFd4MEtTY3NYRzRnSUNBZ0lDQjBjbUZ1YzJadmNtMDZJQ2R1YjI1bEp5eGNiaUFnSUNBZ0lHeGxablE2SUNjd0p5eGNiaUFnSUNBZ0lISnBaMmgwT2lBbk1DY3NYRzRnSUNBZ0lDQnRZWEpuYVc0NklDY3dJR0YxZEc4bkxGeHVJQ0FnSUNBZ1ltOXlaR1Z5VW1Ga2FYVnpPaUFuTVRCd2VDY3NYRzRnSUNBZ2ZTeGNiaUFnSUNCc1lYQjBiM0JOYjJSaGJGTjBlV3hsT2lCN1hHNGdJQ0FnSUNCM2FXUjBhRG9nSnpNM05YQjRKeXhjYmlBZ0lDQWdJSFJ2Y0RvZ0p6RXdKU2NzWEc0Z0lDQWdJQ0JpYjNoVGFHRmtiM2M2SUNkMllYSW9MUzF6YUdGa2IzY3RjMmw2WlMxNGN5a2dkbUZ5S0MwdFkyOXNiM0l0YzJoaFpHOTNMV1JsWm1GMWJIUXBKeXhjYmlBZ0lDQWdJSFJ5WVc1elptOXliVG9nSjI1dmJtVW5MRnh1SUNBZ0lDQWdiR1ZtZERvZ0p6QW5MRnh1SUNBZ0lDQWdjbWxuYUhRNklDY3dKeXhjYmlBZ0lDQWdJRzFoY21kcGJqb2dKekFnWVhWMGJ5Y3NYRzRnSUNBZ0lDQmliM0prWlhKU1lXUnBkWE02SUNjeE1IQjRKeXhjYmlBZ0lDQjlMRnh1SUNBZ0lHTnZiblJsYm5SVGRIbHNaVG9nZTF4dUlDQWdJQ0FnWW05eVpHVnlVbUZrYVhWek9pQW5NVEJ3ZUNjc1hHNGdJQ0FnZlN4Y2JpQWdmU3hjYmx4dUlDQkJRME5QVlU1VVgwUkZWRUZKVEZNNklIdGNiaUFnSUNCamIyNTBaVzUwY3pvZ1BFRmpZMjkxYm5SRVpYUmhhV3h6VFc5a1lXd2dMejRzWEc0Z0lDQWdMaTR1WVdOamIzVnVkRTF2WkdGc1UzUjViR1VzWEc0Z0lIMHNYRzVjYmlBZ1JWaFFUMUpVWDFCU1NWWkJWRVZmUzBWWk9pQjdYRzRnSUNBZ1kyOXVkR1Z1ZEhNNklEeEZlSEJ2Y25SUWNtbDJZWFJsUzJWNVRXOWtZV3dnTHo0c1hHNGdJQ0FnTGk0dVlXTmpiM1Z1ZEUxdlpHRnNVM1I1YkdVc1hHNGdJSDBzWEc1Y2JpQWdTRTlNUkY5VVQxOVNSVlpGUVV4ZlUxSlFPaUI3WEc0Z0lDQWdZMjl1ZEdWdWRITTZJRHhJYjJ4a1ZHOVNaWFpsWVd4TmIyUmhiQ0F2UGl4Y2JpQWdJQ0J0YjJKcGJHVk5iMlJoYkZOMGVXeGxPaUI3WEc0Z0lDQWdJQ0F1TGk1dGIyUmhiRU52Ym5SaGFXNWxjazF2WW1sc1pWTjBlV3hsTEZ4dUlDQWdJSDBzWEc0Z0lDQWdiR0Z3ZEc5d1RXOWtZV3hUZEhsc1pUb2dlMXh1SUNBZ0lDQWdMaTR1Ylc5a1lXeERiMjUwWVdsdVpYSk1ZWEIwYjNCVGRIbHNaU3hjYmlBZ0lDQjlMRnh1SUNBZ0lHTnZiblJsYm5SVGRIbHNaVG9nZTF4dUlDQWdJQ0FnWW05eVpHVnlVbUZrYVhWek9pQW5PSEI0Snl4Y2JpQWdJQ0I5TEZ4dUlDQjlMRnh1WEc0Z0lFaEpSRVZmVkU5TFJVNWZRMDlPUmtsU1RVRlVTVTlPT2lCN1hHNGdJQ0FnWTI5dWRHVnVkSE02SUR4SWFXUmxWRzlyWlc1RGIyNW1hWEp0WVhScGIyNU5iMlJoYkNBdlBpeGNiaUFnSUNCdGIySnBiR1ZOYjJSaGJGTjBlV3hsT2lCN1hHNGdJQ0FnSUNCM2FXUjBhRG9nSnprMUpTY3NYRzRnSUNBZ0lDQjBiM0E2SUdkbGRFVnVkbWx5YjI1dFpXNTBWSGx3WlNncElEMDlQU0JGVGxaSlVrOU9UVVZPVkY5VVdWQkZYMUJQVUZWUUlEOGdKelV5ZG1nbklEb2dKek0yTGpWMmFDY3NYRzRnSUNBZ2ZTeGNiaUFnSUNCc1lYQjBiM0JOYjJSaGJGTjBlV3hsT2lCN1hHNGdJQ0FnSUNCM2FXUjBhRHBjYmlBZ0lDQWdJQ0FnWjJWMFJXNTJhWEp2Ym0xbGJuUlVlWEJsS0NrZ1BUMDlJRVZPVmtsU1QwNU5SVTVVWDFSWlVFVmZVRTlRVlZBZ1B5QW5NelUzY0hnbklEb2dKelEwT1hCNEp5eGNiaUFnSUNBZ0lIUnZjRG9nSjJOaGJHTW9Nek1sSUNzZ05EVndlQ2tuTEZ4dUlDQWdJQ0FnY0dGa1pHbHVaMHhsWm5RNlhHNGdJQ0FnSUNBZ0lHZGxkRVZ1ZG1seWIyNXRaVzUwVkhsd1pTZ3BJRDA5UFNCRlRsWkpVazlPVFVWT1ZGOVVXVkJGWDFCUFVGVlFJRDhnSnpFMmNIZ25JRG9nYm5Wc2JDeGNiaUFnSUNBZ0lIQmhaR1JwYm1kU2FXZG9kRHBjYmlBZ0lDQWdJQ0FnWjJWMFJXNTJhWEp2Ym0xbGJuUlVlWEJsS0NrZ1BUMDlJRVZPVmtsU1QwNU5SVTVVWDFSWlVFVmZVRTlRVlZBZ1B5QW5NVFp3ZUNjZ09pQnVkV3hzTEZ4dUlDQWdJSDBzWEc0Z0lIMHNYRzVjYmlBZ1EwOU9Sa2xTVFY5U1JWTkZWRjlCUTBOUFZVNVVPaUI3WEc0Z0lDQWdZMjl1ZEdWdWRITTZJRHhEYjI1bWFYSnRVbVZ6WlhSQlkyTnZkVzUwSUM4K0xGeHVJQ0FnSUcxdlltbHNaVTF2WkdGc1UzUjViR1U2SUh0Y2JpQWdJQ0FnSUM0dUxtMXZaR0ZzUTI5dWRHRnBibVZ5VFc5aWFXeGxVM1I1YkdVc1hHNGdJQ0FnZlN4Y2JpQWdJQ0JzWVhCMGIzQk5iMlJoYkZOMGVXeGxPaUI3WEc0Z0lDQWdJQ0F1TGk1dGIyUmhiRU52Ym5SaGFXNWxja3hoY0hSdmNGTjBlV3hsTEZ4dUlDQWdJSDBzWEc0Z0lDQWdZMjl1ZEdWdWRGTjBlV3hsT2lCN1hHNGdJQ0FnSUNCaWIzSmtaWEpTWVdScGRYTTZJQ2M0Y0hnbkxGeHVJQ0FnSUgwc1hHNGdJSDBzWEc1Y2JpQWdSVlJJWDFOSlIwNDZJSHRjYmlBZ0lDQmpiMjUwWlc1MGN6b2dQRVYwYUZOcFoyNU5iMlJoYkNBdlBpeGNiaUFnSUNCdGIySnBiR1ZOYjJSaGJGTjBlV3hsT2lCN1hHNGdJQ0FnSUNBdUxpNXRiMlJoYkVOdmJuUmhhVzVsY2sxdlltbHNaVk4wZVd4bExGeHVJQ0FnSUgwc1hHNGdJQ0FnYkdGd2RHOXdUVzlrWVd4VGRIbHNaVG9nZTF4dUlDQWdJQ0FnTGk0dWJXOWtZV3hEYjI1MFlXbHVaWEpNWVhCMGIzQlRkSGxzWlN4Y2JpQWdJQ0I5TEZ4dUlDQWdJR052Ym5SbGJuUlRkSGxzWlRvZ2UxeHVJQ0FnSUNBZ1ltOXlaR1Z5VW1Ga2FYVnpPaUFuT0hCNEp5eGNiaUFnSUNCOUxGeHVJQ0I5TEZ4dUlDQkRUMDVHU1ZKTlgxSkZUVTlXUlY5QlEwTlBWVTVVT2lCN1hHNGdJQ0FnWTI5dWRHVnVkSE02SUR4RGIyNW1hWEp0VW1WdGIzWmxRV05qYjNWdWRDQXZQaXhjYmlBZ0lDQnRiMkpwYkdWTmIyUmhiRk4wZVd4bE9pQjdYRzRnSUNBZ0lDQXVMaTV0YjJSaGJFTnZiblJoYVc1bGNrMXZZbWxzWlZOMGVXeGxMRnh1SUNBZ0lIMHNYRzRnSUNBZ2JHRndkRzl3VFc5a1lXeFRkSGxzWlRvZ2UxeHVJQ0FnSUNBZ0xpNHViVzlrWVd4RGIyNTBZV2x1WlhKTVlYQjBiM0JUZEhsc1pTeGNiaUFnSUNCOUxGeHVJQ0FnSUdOdmJuUmxiblJUZEhsc1pUb2dlMXh1SUNBZ0lDQWdZbTl5WkdWeVVtRmthWFZ6T2lBbk9IQjRKeXhjYmlBZ0lDQjlMRnh1SUNCOUxGeHVYRzRnSUVOUFRsWkZVbFJmVkU5TFJVNWZWRTlmVGtaVU9pQjdYRzRnSUNBZ1kyOXVkR1Z1ZEhNNklEeERiMjUyWlhKMFZHOXJaVzVVYjA1bWRFMXZaR0ZzSUM4K0xGeHVJQ0FnSUcxdlltbHNaVTF2WkdGc1UzUjViR1U2SUh0Y2JpQWdJQ0FnSUM0dUxtMXZaR0ZzUTI5dWRHRnBibVZ5VFc5aWFXeGxVM1I1YkdVc1hHNGdJQ0FnZlN4Y2JpQWdJQ0JzWVhCMGIzQk5iMlJoYkZOMGVXeGxPaUI3WEc0Z0lDQWdJQ0F1TGk1dGIyUmhiRU52Ym5SaGFXNWxja3hoY0hSdmNGTjBlV3hsTEZ4dUlDQWdJSDBzWEc0Z0lDQWdZMjl1ZEdWdWRGTjBlV3hsT2lCN1hHNGdJQ0FnSUNCaWIzSmtaWEpTWVdScGRYTTZJQ2M0Y0hnbkxGeHVJQ0FnSUgwc1hHNGdJSDBzWEc1Y2JpQWdRMDlPUmtsU1RWOUVSVXhGVkVWZlRrVlVWMDlTU3pvZ2UxeHVJQ0FnSUdOdmJuUmxiblJ6T2lBOFEyOXVabWx5YlVSbGJHVjBaVTVsZEhkdmNtc2dMejRzWEc0Z0lDQWdiVzlpYVd4bFRXOWtZV3hUZEhsc1pUb2dlMXh1SUNBZ0lDQWdMaTR1Ylc5a1lXeERiMjUwWVdsdVpYSk5iMkpwYkdWVGRIbHNaU3hjYmlBZ0lDQjlMRnh1SUNBZ0lHeGhjSFJ2Y0UxdlpHRnNVM1I1YkdVNklIdGNiaUFnSUNBZ0lDNHVMbTF2WkdGc1EyOXVkR0ZwYm1WeVRHRndkRzl3VTNSNWJHVXNYRzRnSUNBZ2ZTeGNiaUFnSUNCamIyNTBaVzUwVTNSNWJHVTZJSHRjYmlBZ0lDQWdJR0p2Y21SbGNsSmhaR2wxY3pvZ0p6aHdlQ2NzWEc0Z0lDQWdmU3hjYmlBZ2ZTeGNibHh1SUNCRlJFbFVYMEZRVUZKUFZrRk1YMUJGVWsxSlUxTkpUMDQ2SUh0Y2JpQWdJQ0JqYjI1MFpXNTBjem9nUEVWa2FYUkJjSEJ5YjNaaGJGQmxjbTFwYzNOcGIyNGdMejRzWEc0Z0lDQWdiVzlpYVd4bFRXOWtZV3hUZEhsc1pUb2dlMXh1SUNBZ0lDQWdkMmxrZEdnNklDYzVOWFozSnl4Y2JpQWdJQ0FnSUdobGFXZG9kRG9nSnpFd01IWm9KeXhjYmlBZ0lDQWdJSFJ2Y0RvZ0p6VXdjSGduTEZ4dUlDQWdJQ0FnZEhKaGJuTm1iM0p0T2lBbmJtOXVaU2NzWEc0Z0lDQWdJQ0JzWldaME9pQW5NQ2NzWEc0Z0lDQWdJQ0J5YVdkb2REb2dKekFuTEZ4dUlDQWdJQ0FnYldGeVoybHVPaUFuTUNCaGRYUnZKeXhjYmlBZ0lDQjlMRnh1SUNBZ0lHeGhjSFJ2Y0UxdlpHRnNVM1I1YkdVNklIdGNiaUFnSUNBZ0lIZHBaSFJvT2lBbllYVjBieWNzWEc0Z0lDQWdJQ0JvWldsbmFIUTZJQ2N3Y0hnbkxGeHVJQ0FnSUNBZ2RHOXdPaUFuT0RCd2VDY3NYRzRnSUNBZ0lDQnNaV1owT2lBbk1IQjRKeXhjYmlBZ0lDQWdJSFJ5WVc1elptOXliVG9nSjI1dmJtVW5MRnh1SUNBZ0lDQWdiV0Z5WjJsdU9pQW5NQ0JoZFhSdkp5eGNiaUFnSUNBZ0lIQnZjMmwwYVc5dU9pQW5jbVZzWVhScGRtVW5MRnh1SUNBZ0lIMHNYRzRnSUNBZ1kyOXVkR1Z1ZEZOMGVXeGxPaUI3WEc0Z0lDQWdJQ0JpYjNKa1pYSlNZV1JwZFhNNklDYzRjSGduTEZ4dUlDQWdJSDBzWEc0Z0lIMHNYRzVjYmlBZ1ZGSkJUbE5CUTFSSlQwNWZRMDlPUmtsU1RVVkVPaUI3WEc0Z0lDQWdaR2x6WVdKc1pVSmhZMnRrY205d1EyeHBZMnM2SUhSeWRXVXNYRzRnSUNBZ1kyOXVkR1Z1ZEhNNklEeFVjbUZ1YzJGamRHbHZia052Ym1acGNtMWxaQ0F2UGl4Y2JpQWdJQ0J0YjJKcGJHVk5iMlJoYkZOMGVXeGxPaUI3WEc0Z0lDQWdJQ0F1TGk1dGIyUmhiRU52Ym5SaGFXNWxjazF2WW1sc1pWTjBlV3hsTEZ4dUlDQWdJSDBzWEc0Z0lDQWdiR0Z3ZEc5d1RXOWtZV3hUZEhsc1pUb2dlMXh1SUNBZ0lDQWdMaTR1Ylc5a1lXeERiMjUwWVdsdVpYSk1ZWEIwYjNCVGRIbHNaU3hjYmlBZ0lDQjlMRnh1SUNBZ0lHTnZiblJsYm5SVGRIbHNaVG9nZTF4dUlDQWdJQ0FnWW05eVpHVnlVbUZrYVhWek9pQW5PSEI0Snl4Y2JpQWdJQ0I5TEZ4dUlDQjlMRnh1WEc0Z0lGRlNYMU5EUVU1T1JWSTZJSHRjYmlBZ0lDQmpiMjUwWlc1MGN6b2dQRkZTVTJOaGJtNWxjaUF2UGl4Y2JpQWdJQ0J0YjJKcGJHVk5iMlJoYkZOMGVXeGxPaUI3WEc0Z0lDQWdJQ0F1TGk1dGIyUmhiRU52Ym5SaGFXNWxjazF2WW1sc1pWTjBlV3hsTEZ4dUlDQWdJSDBzWEc0Z0lDQWdiR0Z3ZEc5d1RXOWtZV3hUZEhsc1pUb2dlMXh1SUNBZ0lDQWdMaTR1Ylc5a1lXeERiMjUwWVdsdVpYSk1ZWEIwYjNCVGRIbHNaU3hjYmlBZ0lDQjlMRnh1SUNBZ0lHTnZiblJsYm5SVGRIbHNaVG9nZTF4dUlDQWdJQ0FnWW05eVpHVnlVbUZrYVhWek9pQW5PSEI0Snl4Y2JpQWdJQ0I5TEZ4dUlDQjlMRnh1WEc0Z0lGSkZTa1ZEVkY5VVVrRk9VMEZEVkVsUFRsTTZJSHRjYmlBZ0lDQmpiMjUwWlc1MGN6b2dQRkpsYW1WamRGUnlZVzV6WVdOMGFXOXVjeUF2UGl4Y2JpQWdJQ0J0YjJKcGJHVk5iMlJoYkZOMGVXeGxPaUI3WEc0Z0lDQWdJQ0F1TGk1dGIyUmhiRU52Ym5SaGFXNWxjazF2WW1sc1pWTjBlV3hsTEZ4dUlDQWdJSDBzWEc0Z0lDQWdiR0Z3ZEc5d1RXOWtZV3hUZEhsc1pUb2dlMXh1SUNBZ0lDQWdMaTR1Ylc5a1lXeERiMjUwWVdsdVpYSk1ZWEIwYjNCVGRIbHNaU3hjYmlBZ0lDQjlMRnh1SUNBZ0lHTnZiblJsYm5SVGRIbHNaVG9nZTF4dUlDQWdJQ0FnWW05eVpHVnlVbUZrYVhWek9pQW5PSEI0Snl4Y2JpQWdJQ0I5TEZ4dUlDQjlMRnh1WEc0Z0lFTlZVMVJQVFVsYVJWOU9UMDVEUlRvZ2UxeHVJQ0FnSUdOdmJuUmxiblJ6T2lBOFEzVnpkRzl0YVhwbFRtOXVZMlZOYjJSaGJDQXZQaXhjYmlBZ0lDQnRiMkpwYkdWTmIyUmhiRk4wZVd4bE9pQjdYRzRnSUNBZ0lDQXVMaTV0YjJSaGJFTnZiblJoYVc1bGNrMXZZbWxzWlZOMGVXeGxMRnh1SUNBZ0lIMHNYRzRnSUNBZ2JHRndkRzl3VFc5a1lXeFRkSGxzWlRvZ2UxeHVJQ0FnSUNBZ0xpNHViVzlrWVd4RGIyNTBZV2x1WlhKTVlYQjBiM0JUZEhsc1pTeGNiaUFnSUNCOUxGeHVJQ0FnSUdOdmJuUmxiblJUZEhsc1pUb2dlMXh1SUNBZ0lDQWdZbTl5WkdWeVVtRmthWFZ6T2lBbk9IQjRKeXhjYmlBZ0lDQjlMRnh1SUNCOUxGeHVYRzVjYmlBZ1JFVkdRVlZNVkRvZ2UxeHVJQ0FnSUdOdmJuUmxiblJ6T2lCYlhTeGNiaUFnSUNCdGIySnBiR1ZOYjJSaGJGTjBlV3hsT2lCN2ZTeGNiaUFnSUNCc1lYQjBiM0JOYjJSaGJGTjBlV3hsT2lCN2ZTeGNiaUFnZlN4Y2JuMDdYRzVjYm1OdmJuTjBJRUpCUTB0RVVrOVFVMVJaVEVVZ1BTQjdYRzRnSUdKaFkydG5jbTkxYm1SRGIyeHZjam9nSjNaaGNpZ3RMV052Ykc5eUxXOTJaWEpzWVhrdFpHVm1ZWFZzZENrbkxGeHVmVHRjYmx4dVpuVnVZM1JwYjI0Z2JXRndVM1JoZEdWVWIxQnliM0J6S0hOMFlYUmxLU0I3WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnWVdOMGFYWmxPaUJ6ZEdGMFpTNWhjSEJUZEdGMFpTNXRiMlJoYkM1dmNHVnVMRnh1SUNBZ0lHMXZaR0ZzVTNSaGRHVTZJSE4wWVhSbExtRndjRk4wWVhSbExtMXZaR0ZzTG0xdlpHRnNVM1JoZEdVc1hHNGdJSDA3WEc1OVhHNWNibVoxYm1OMGFXOXVJRzFoY0VScGMzQmhkR05vVkc5UWNtOXdjeWhrYVhOd1lYUmphQ2tnZTF4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUdocFpHVk5iMlJoYkRvZ0tHTjFjM1J2YlU5dVNHbGtaVTl3ZEhNcElEMCtJSHRjYmlBZ0lDQWdJR1JwYzNCaGRHTm9LR0ZqZEdsdmJuTXVhR2xrWlUxdlpHRnNLQ2twTzF4dUlDQWdJQ0FnYVdZZ0tHTjFjM1J2YlU5dVNHbGtaVTl3ZEhNZ0ppWWdZM1Z6ZEc5dFQyNUlhV1JsVDNCMGN5NWhZM1JwYjI0cElIdGNiaUFnSUNBZ0lDQWdaR2x6Y0dGMFkyZ29ZM1Z6ZEc5dFQyNUlhV1JsVDNCMGN5NWhZM1JwYjI0b0xpNHVZM1Z6ZEc5dFQyNUlhV1JsVDNCMGN5NWhjbWR6S1NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JpQWdJQ0JvYVdSbFYyRnlibWx1WnpvZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnWkdsemNHRjBZMmdvWVdOMGFXOXVjeTVvYVdSbFYyRnlibWx1WnlncEtUdGNiaUFnSUNCOUxGeHVJQ0I5TzF4dWZWeHVYRzVqYkdGemN5Qk5iMlJoYkNCbGVIUmxibVJ6SUVOdmJYQnZibVZ1ZENCN1hHNGdJSE4wWVhScFl5QndjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lDQWdZV04wYVhabE9pQlFjbTl3Vkhsd1pYTXVZbTl2YkM1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUdocFpHVk5iMlJoYkRvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0JvYVdSbFYyRnlibWx1WnpvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0J0YjJSaGJGTjBZWFJsT2lCUWNtOXdWSGx3WlhNdWIySnFaV04wTG1selVtVnhkV2x5WldRc1hHNGdJSDA3WEc1Y2JpQWdhR2xrWlNncElIdGNiaUFnSUNCMGFHbHpMbTF2WkdGc1VtVm1MbWhwWkdVb0tUdGNiaUFnZlZ4dVhHNGdJSE5vYjNjb0tTQjdYRzRnSUNBZ2RHaHBjeTV0YjJSaGJGSmxaaTV6YUc5M0tDazdYRzRnSUgxY2JseHVJQ0JWVGxOQlJrVmZZMjl0Y0c5dVpXNTBWMmxzYkZKbFkyVnBkbVZRY205d2N5aHVaWGgwVUhKdmNITXNJRjhwSUh0Y2JpQWdJQ0JwWmlBb2JtVjRkRkJ5YjNCekxtRmpkR2wyWlNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV6YUc5M0tDazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TG5CeWIzQnpMbUZqZEdsMlpTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1b2FXUmxLQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WdVpHVnlLQ2tnZTF4dUlDQWdJR052Ym5OMElHMXZaR0ZzSUQwZ1RVOUVRVXhUVzNSb2FYTXVjSEp2Y0hNdWJXOWtZV3hUZEdGMFpTNXVZVzFsSUh4OElDZEVSVVpCVlV4VUoxMDdYRzRnSUNBZ1kyOXVjM1FnZXlCamIyNTBaVzUwY3pvZ1kyaHBiR1J5Wlc0c0lHUnBjMkZpYkdWQ1lXTnJaSEp2Y0VOc2FXTnJJRDBnWm1Gc2MyVWdmU0E5SUcxdlpHRnNPMXh1SUNBZ0lHTnZibk4wSUcxdlpHRnNVM1I1YkdVZ1BWeHVJQ0FnSUNBZ2JXOWtZV3hiYVhOTmIySnBiR1ZXYVdWM0tDa2dQeUFuYlc5aWFXeGxUVzlrWVd4VGRIbHNaU2NnT2lBbmJHRndkRzl3VFc5a1lXeFRkSGxzWlNkZE8xeHVJQ0FnSUdOdmJuTjBJR052Ym5SbGJuUlRkSGxzWlNBOUlHMXZaR0ZzTG1OdmJuUmxiblJUZEhsc1pTQjhmQ0I3ZlR0Y2JseHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4Um1Ga1pVMXZaR0ZzWEc0Z0lDQWdJQ0FnSUd0bGVXSnZZWEprUFh0bVlXeHpaWDFjYmlBZ0lDQWdJQ0FnYjI1SWFXUmxQWHNvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHMXZaR0ZzTG05dVNHbGtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiVzlrWVd3dWIyNUlhV1JsS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdsa1pWZGhjbTVwYm1jNklIUm9hWE11Y0hKdmNITXVhR2xrWlZkaGNtNXBibWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTVvYVdSbFRXOWtZV3dvYlc5a1lXd3VZM1Z6ZEc5dFQyNUlhV1JsVDNCMGN5azdYRzRnSUNBZ0lDQWdJSDE5WEc0Z0lDQWdJQ0FnSUhKbFpqMTdLSEpsWmlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXViVzlrWVd4U1pXWWdQU0J5WldZN1hHNGdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJRzF2WkdGc1UzUjViR1U5ZTIxdlpHRnNVM1I1YkdWOVhHNGdJQ0FnSUNBZ0lHTnZiblJsYm5SVGRIbHNaVDE3WTI5dWRHVnVkRk4wZVd4bGZWeHVJQ0FnSUNBZ0lDQmlZV05yWkhKdmNGTjBlV3hsUFh0Q1FVTkxSRkpQVUZOVVdVeEZmVnh1SUNBZ0lDQWdJQ0JqYkc5elpVOXVRMnhwWTJzOWV5RmthWE5oWW14bFFtRmphMlJ5YjNCRGJHbGphMzFjYmlBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnZTJOb2FXeGtjbVZ1ZlZ4dUlDQWdJQ0FnUEM5R1lXUmxUVzlrWVd3K1hHNGdJQ0FnS1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamIyNXVaV04wS0cxaGNGTjBZWFJsVkc5UWNtOXdjeXdnYldGd1JHbHpjR0YwWTJoVWIxQnliM0J6S1NoTmIyUmhiQ2s3WEc0aUxDSmxlSEJ2Y25RZ2V5QmtaV1poZFd4MElIMGdabkp2YlNBbkxpOXVaWGN0WVdOamIzVnVkQzF0YjJSaGJDNWpiMjUwWVdsdVpYSW5PMXh1SWl3aWFXMXdiM0owSUZKbFlXTjBMQ0I3SUVOdmJYQnZibVZ1ZENCOUlHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnUW5WMGRHOXVJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMMkoxZEhSdmJpOWlkWFIwYjI0dVkyOXRjRzl1Wlc1MEp6dGNibWx0Y0c5eWRDQjdJRUoxZEhSdmJrbGpiMjRzSUVsamIyNU9ZVzFsSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2WTI5dGNHOXVaVzUwTFd4cFluSmhjbmtuTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJPWlhkQlkyTnZkVzUwVFc5a1lXd2daWGgwWlc1a2N5QkRiMjF3YjI1bGJuUWdlMXh1SUNCemRHRjBhV01nWTI5dWRHVjRkRlI1Y0dWeklEMGdlMXh1SUNBZ0lIUTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0I5TzF4dVhHNGdJSE4wWVhScFl5QndjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lDQWdhR2xrWlUxdlpHRnNPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lHNWxkMEZqWTI5MWJuUk9kVzFpWlhJNklGQnliM0JVZVhCbGN5NXVkVzFpWlhJdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCdmJsTmhkbVU2SUZCeWIzQlVlWEJsY3k1bWRXNWpMbWx6VW1WeGRXbHlaV1FzWEc0Z0lIMDdYRzVjYmlBZ2MzUmhkR1VnUFNCN1hHNGdJQ0FnWVd4cFlYTTZJSFJvYVhNdVkyOXVkR1Y0ZEM1MEtDZHVaWGRCWTJOdmRXNTBUblZ0WW1WeVRtRnRaU2NzSUZ0Y2JpQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWJtVjNRV05qYjNWdWRFNTFiV0psY2l4Y2JpQWdJQ0JkS1N4Y2JpQWdmVHRjYmx4dUlDQnZia05vWVc1blpTQTlJQ2hsS1NBOVBpQjdYRzRnSUNBZ2RHaHBjeTV6WlhSVGRHRjBaU2g3WEc0Z0lDQWdJQ0JoYkdsaGN6b2daUzUwWVhKblpYUXVkbUZzZFdVc1hHNGdJQ0FnZlNrN1hHNGdJSDA3WEc1Y2JpQWdiMjVUZFdKdGFYUWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2RHaHBjeTV3Y205d2N5NXZibE5oZG1Vb2RHaHBjeTV6ZEdGMFpTNWhiR2xoY3lrdWRHaGxiaWgwYUdsekxuQnliM0J6TG1ocFpHVk5iMlJoYkNrN1hHNGdJSDA3WEc1Y2JpQWdiMjVMWlhsUWNtVnpjeUE5SUNobEtTQTlQaUI3WEc0Z0lDQWdhV1lnS0dVdWEyVjVJRDA5UFNBblJXNTBaWEluSUNZbUlIUm9hWE11YzNSaGRHVXVZV3hwWVhNcElIdGNiaUFnSUNBZ0lIUm9hWE11YjI1VGRXSnRhWFFvS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ2NtVnVaR1Z5S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnZENCOUlEMGdkR2hwY3k1amIyNTBaWGgwTzF4dVhHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2libVYzTFdGalkyOTFiblF0Ylc5a1lXeGNJajVjYmlBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6YzA1aGJXVTlYQ0p1WlhjdFlXTmpiM1Z1ZEMxdGIyUmhiRjlmWTI5dWRHVnVkRndpUGx4dUlDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWJtVjNMV0ZqWTI5MWJuUXRiVzlrWVd4ZlgyTnZiblJsYm5SZlgyaGxZV1JsY2x3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0oyNWxkMEZqWTI5MWJuUW5LWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lEeENkWFIwYjI1SlkyOXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbTVsZHkxaFkyTnZkVzUwTFcxdlpHRnNYMTlqYjI1MFpXNTBYMTlvWldGa1pYSXRZMnh2YzJWY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtbGhUR0ZpWld3OWUzUW9KMk5zYjNObEp5bDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWUzUm9hWE11Y0hKdmNITXVhR2xrWlUxdlpHRnNmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBZMjl1VG1GdFpUMTdTV052Yms1aGJXVXVRMnh2YzJWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWJtVjNMV0ZqWTI5MWJuUXRiVzlrWVd4ZlgybHVjSFYwTFd4aFltVnNYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdkQ2duWVdOamIzVnVkRTVoYldVbktYMWNiaUFnSUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lDQWdJQ0E4YVc1d2RYUmNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTlYQ0owWlhoMFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltNWxkeTFoWTJOdmRXNTBMVzF2WkdGc1gxOXBibkIxZEZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmtOb1lXNW5aVDE3ZEdocGN5NXZia05vWVc1blpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVMyVjVVSEpsYzNNOWUzUm9hWE11YjI1TFpYbFFjbVZ6YzMxY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbFBYdDBhR2x6TG5OMFlYUmxMbUZzYVdGemZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhWMGIwWnZZM1Z6WEc0Z0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWJtVjNMV0ZqWTI5MWJuUXRiVzlrWVd4ZlgyWnZiM1JsY2x3aVBseHVJQ0FnSUNBZ0lDQWdJRHhDZFhSMGIyNGdkSGx3WlQxY0luTmxZMjl1WkdGeWVWd2lJRzl1UTJ4cFkyczllM1JvYVhNdWNISnZjSE11YUdsa1pVMXZaR0ZzZlQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJSHQwS0NkallXNWpaV3duS1gxY2JpQWdJQ0FnSUNBZ0lDQThMMEoxZEhSdmJqNWNiaUFnSUNBZ0lDQWdJQ0E4UW5WMGRHOXVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxQVndpY0hKcGJXRnllVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYdDBhR2x6TG05dVUzVmliV2wwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR2x6WVdKc1pXUTlleUYwYUdsekxuTjBZWFJsTG1Gc2FXRnpmVnh1SUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJSHQwS0NkellYWmxKeWw5WEc0Z0lDQWdJQ0FnSUNBZ1BDOUNkWFIwYjI0K1hHNGdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0tUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSHNnWTI5dWJtVmpkQ0I5SUdaeWIyMGdKM0psWVdOMExYSmxaSFY0Snp0Y2JtbHRjRzl5ZENBcUlHRnpJR0ZqZEdsdmJuTWdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZjM1J2Y21VdllXTjBhVzl1Y3ljN1hHNXBiWEJ2Y25RZ1RtVjNRV05qYjNWdWRFMXZaR0ZzSUdaeWIyMGdKeTR2Ym1WM0xXRmpZMjkxYm5RdGJXOWtZV3d1WTI5dGNHOXVaVzUwSnp0Y2JseHVablZ1WTNScGIyNGdiV0Z3VTNSaGRHVlViMUJ5YjNCektITjBZWFJsS1NCN1hHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ0xpNHVLSE4wWVhSbExtRndjRk4wWVhSbExtMXZaR0ZzTG0xdlpHRnNVM1JoZEdVdWNISnZjSE1nZkh3Z2UzMHBMRnh1SUNCOU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCdFlYQkVhWE53WVhSamFGUnZVSEp2Y0hNb1pHbHpjR0YwWTJncElIdGNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQm9hV1JsVFc5a1lXdzZJQ2dwSUQwK0lHUnBjM0JoZEdOb0tHRmpkR2x2Ym5NdWFHbGtaVTF2WkdGc0tDa3BMRnh1SUNBZ0lHTnlaV0YwWlVGalkyOTFiblE2SUNodVpYZEJZMk52ZFc1MFRtRnRaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdScGMzQmhkR05vS0dGamRHbHZibk11WVdSa1RtVjNRV05qYjNWdWRDZ3BLUzUwYUdWdUtDaHVaWGRCWTJOdmRXNTBRV1JrY21WemN5a2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9ibVYzUVdOamIzVnVkRTVoYldVcElIdGNiaUFnSUNBZ0lDQWdJQ0JrYVhOd1lYUmphQ2hoWTNScGIyNXpMbk5sZEVGalkyOTFiblJNWVdKbGJDaHVaWGRCWTJOdmRXNTBRV1JrY21WemN5d2dibVYzUVdOamIzVnVkRTVoYldVcEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzUVdOamIzVnVkRUZrWkhKbGMzTTdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlMRnh1SUNCOU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCdFpYSm5aVkJ5YjNCektITjBZWFJsVUhKdmNITXNJR1JwYzNCaGRHTm9VSEp2Y0hNcElIdGNiaUFnWTI5dWMzUWdleUJ2YmtOeVpXRjBaVTVsZDBGalkyOTFiblFnZlNBOUlITjBZWFJsVUhKdmNITTdYRzRnSUdOdmJuTjBJSHNnWTNKbFlYUmxRV05qYjNWdWRDQjlJRDBnWkdsemNHRjBZMmhRY205d2N6dGNibHh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJQzR1TG5OMFlYUmxVSEp2Y0hNc1hHNGdJQ0FnTGk0dVpHbHpjR0YwWTJoUWNtOXdjeXhjYmlBZ0lDQnZibE5oZG1VNklDaHVaWGRCWTJOdmRXNTBUbUZ0WlNrZ1BUNGdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHTnlaV0YwWlVGalkyOTFiblFvYm1WM1FXTmpiM1Z1ZEU1aGJXVXBMblJvWlc0b0tHNWxkMEZqWTI5MWJuUkJaR1J5WlhOektTQTlQbHh1SUNBZ0lDQWdJQ0J2YmtOeVpXRjBaVTVsZDBGalkyOTFiblFvYm1WM1FXTmpiM1Z1ZEVGa1pISmxjM01wTEZ4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5TEZ4dUlDQjlPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamIyNXVaV04wS0Z4dUlDQnRZWEJUZEdGMFpWUnZVSEp2Y0hNc1hHNGdJRzFoY0VScGMzQmhkR05vVkc5UWNtOXdjeXhjYmlBZ2JXVnlaMlZRY205d2N5eGNiaWtvVG1WM1FXTmpiM1Z1ZEUxdlpHRnNLVHRjYmlJc0ltVjRjRzl5ZENCN0lHUmxabUYxYkhRZ2ZTQm1jbTl0SUNjdUwyNXBZMnR1WVcxbExYQnZjRzkyWlhKekxtTnZiWEJ2Ym1WdWRDYzdYRzRpTENKcGJYQnZjblFnVW1WaFkzUXNJSHNnZFhObFUzUmhkR1VnZlNCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdleUIxYzJWRWFYTndZWFJqYUN3Z2RYTmxVMlZzWldOMGIzSWdmU0JtY205dElDZHlaV0ZqZEMxeVpXUjFlQ2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUhzZ1oyVjBRV05qYjNWdWRFeHBibXNnZlNCbWNtOXRJQ2RBYldWMFlXMWhjMnN2WlhSb1pYSnpZMkZ1TFd4cGJtc25PMXh1YVcxd2IzSjBJSHNnWVdSa1ZHOUJaR1J5WlhOelFtOXZheUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNOMGIzSmxMMkZqZEdsdmJuTW5PMXh1YVcxd2IzSjBJSHRjYmlBZ1oyVjBVbkJqVUhKbFpuTkdiM0pEZFhKeVpXNTBVSEp2ZG1sa1pYSXNYRzRnSUdkbGRFTjFjbkpsYm5SRGFHRnBia2xrTEZ4dUlDQm5aWFJCWkdSeVpYTnpRbTl2YXl4Y2JuMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZjMlZzWldOMGIzSnpKenRjYm1sdGNHOXlkQ0JPYVdOcmJtRnRaVkJ2Y0c5MlpYSWdabkp2YlNBbkxpNHZMaTR2TGk0dmRXa3ZibWxqYTI1aGJXVXRjRzl3YjNabGNpYzdYRzVwYlhCdmNuUWdWWEJrWVhSbFRtbGphMjVoYldWUWIzQnZkbVZ5SUdaeWIyMGdKeTR1THk0dUx5NHVMM1ZwTDNWd1pHRjBaUzF1YVdOcmJtRnRaUzF3YjNCdmRtVnlMM1Z3WkdGMFpTMXVhV05yYm1GdFpTMXdiM0J2ZG1WeUp6dGNibHh1WTI5dWMzUWdVMGhQVjE5T1NVTkxUa0ZOUlY5UVQxQlBWa1ZTSUQwZ0oxTklUMWRmVGtsRFMwNUJUVVZmVUU5UVQxWkZVaWM3WEc1amIyNXpkQ0JCUkVSZlRrbERTMDVCVFVWZlVFOVFUMVpGVWlBOUlDZEJSRVJmVGtsRFMwNUJUVVZmVUU5UVQxWkZVaWM3WEc1Y2JtTnZibk4wSUU1cFkydHVZVzFsVUc5d2IzWmxjbk1nUFNBb2V5QmhaR1J5WlhOekxDQnZia05zYjNObElIMHBJRDArSUh0Y2JpQWdZMjl1YzNRZ1pHbHpjR0YwWTJnZ1BTQjFjMlZFYVhOd1lYUmphQ2dwTzF4dVhHNGdJR052Ym5OMElGdHdiM0J2ZG1WeVZHOUVhWE53YkdGNUxDQnpaWFJRYjNCdmRtVnlWRzlFYVhOd2JHRjVYU0E5SUhWelpWTjBZWFJsS0Z4dUlDQWdJRk5JVDFkZlRrbERTMDVCVFVWZlVFOVFUMVpGVWl4Y2JpQWdLVHRjYmx4dUlDQmpiMjV6ZENCaFpHUnlaWE56UW05dmF5QTlJSFZ6WlZObGJHVmpkRzl5S0dkbGRFRmtaSEpsYzNOQ2IyOXJLVHRjYmlBZ1kyOXVjM1FnWTJoaGFXNUpaQ0E5SUhWelpWTmxiR1ZqZEc5eUtHZGxkRU4xY25KbGJuUkRhR0ZwYmtsa0tUdGNibHh1SUNCamIyNXpkQ0JoWkdSeVpYTnpRbTl2YTBWdWRISjVUMkpxWldOMElEMGdZV1JrY21WemMwSnZiMnN1Wm1sdVpDaGNiaUFnSUNBb1pXNTBjbmtwSUQwK0lHVnVkSEo1TG1Ga1pISmxjM01nUFQwOUlHRmtaSEpsYzNNc1hHNGdJQ2s3WEc1Y2JpQWdZMjl1YzNRZ2NtVmphWEJwWlc1MFRtbGphMjVoYldVZ1BTQmhaR1J5WlhOelFtOXZhMFZ1ZEhKNVQySnFaV04wUHk1dVlXMWxPMXh1SUNCamIyNXpkQ0J5Y0dOUWNtVm1jeUE5SUhWelpWTmxiR1ZqZEc5eUtHZGxkRkp3WTFCeVpXWnpSbTl5UTNWeWNtVnVkRkJ5YjNacFpHVnlLVHRjYmx4dUlDQmpiMjV6ZENCbGVIQnNiM0psY2t4cGJtc2dQU0JuWlhSQlkyTnZkVzUwVEdsdWF5aGNiaUFnSUNCaFpHUnlaWE56TEZ4dUlDQWdJR05vWVdsdVNXUXNYRzRnSUNBZ2V5QmliRzlqYTBWNGNHeHZjbVZ5VlhKc09pQnljR05RY21WbWN6OHVZbXh2WTJ0RmVIQnNiM0psY2xWeWJDQS9QeUJ1ZFd4c0lIMHNYRzRnSUNBZ2JuVnNiQ3hjYmlBZ0tUdGNibHh1SUNCcFppQW9jRzl3YjNabGNsUnZSR2x6Y0d4aGVTQTlQVDBnUVVSRVgwNUpRMHRPUVUxRlgxQlBVRTlXUlZJcElIdGNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnUEZWd1pHRjBaVTVwWTJ0dVlXMWxVRzl3YjNabGNseHVJQ0FnSUNBZ0lDQmhaR1J5WlhOelBYdGhaR1J5WlhOemZWeHVJQ0FnSUNBZ0lDQnVhV05yYm1GdFpUMTdjbVZqYVhCcFpXNTBUbWxqYTI1aGJXVWdmSHdnYm5Wc2JIMWNiaUFnSUNBZ0lDQWdiV1Z0YnoxN1lXUmtjbVZ6YzBKdmIydEZiblJ5ZVU5aWFtVmpkRDh1YldWdGJ5QjhmQ0J1ZFd4c2ZWeHVJQ0FnSUNBZ0lDQnZia05zYjNObFBYc29LU0E5UGlCelpYUlFiM0J2ZG1WeVZHOUVhWE53YkdGNUtGTklUMWRmVGtsRFMwNUJUVVZmVUU5UVQxWkZVaWw5WEc0Z0lDQWdJQ0FnSUc5dVFXUmtQWHNvY21WamFYQnBaVzUwTENCdWFXTnJibUZ0WlN3Z2JXVnRieWtnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQmthWE53WVhSamFDaGhaR1JVYjBGa1pISmxjM05DYjI5cktISmxZMmx3YVdWdWRDd2dibWxqYTI1aGJXVXNJRzFsYlc4cEtWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQXZQbHh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0F2THlCVFNFOVhYMDVKUTB0T1FVMUZYMUJQVUU5V1JWSWdZMkZ6WlZ4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4T2FXTnJibUZ0WlZCdmNHOTJaWEpjYmlBZ0lDQWdJR0ZrWkhKbGMzTTllMkZrWkhKbGMzTjlYRzRnSUNBZ0lDQnVhV05yYm1GdFpUMTdjbVZqYVhCcFpXNTBUbWxqYTI1aGJXVWdmSHdnYm5Wc2JIMWNiaUFnSUNBZ0lHOXVRMnh2YzJVOWUyOXVRMnh2YzJWOVhHNGdJQ0FnSUNCdmJrRmtaRDE3S0NrZ1BUNGdjMlYwVUc5d2IzWmxjbFJ2UkdsemNHeGhlU2hCUkVSZlRrbERTMDVCVFVWZlVFOVFUMVpGVWlsOVhHNGdJQ0FnSUNCbGVIQnNiM0psY2t4cGJtczllMlY0Y0d4dmNtVnlUR2x1YTMxY2JpQWdJQ0F2UGx4dUlDQXBPMXh1ZlR0Y2JseHVUbWxqYTI1aGJXVlFiM0J2ZG1WeWN5NXdjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lHRmtaSEpsYzNNNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJRzl1UTJ4dmMyVTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVG1samEyNWhiV1ZRYjNCdmRtVnljenRjYmlJc0ltbHRjRzl5ZENCUmNsTmpZVzV1WlhJZ1puSnZiU0FuTGk5eGNpMXpZMkZ1Ym1WeUxtTnZiblJoYVc1bGNpYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRkZ5VTJOaGJtNWxjanRjYmlJc0ltbHRjRzl5ZENCU1pXRmpkQ3dnZXlCRGIyMXdiMjVsYm5RZ2ZTQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUd4dlp5Qm1jbTl0SUNkc2IyZHNaWFpsYkNjN1hHNXBiWEJ2Y25RZ2V5QkNjbTkzYzJWeVVWSkRiMlJsVW1WaFpHVnlJSDBnWm5KdmJTQW5RSHA0YVc1bkwyeHBZbkpoY25rbk8xeHVhVzF3YjNKMElIc2daMlYwUlc1MmFYSnZibTFsYm5SVWVYQmxJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2TGk0dllYQndMM05qY21sd2RITXZiR2xpTDNWMGFXd25PMXh1YVcxd2IzSjBJSHNnUlU1V1NWSlBUazFGVGxSZlZGbFFSVjlHVlV4TVUwTlNSVVZPSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OWhjSEFuTzF4dWFXMXdiM0owSUhzZ1UwVkRUMDVFSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyTnZibk4wWVc1MGN5OTBhVzFsSnp0Y2JtbHRjRzl5ZENCVGNHbHVibVZ5SUdaeWIyMGdKeTR1THk0dUx5NHVMM1ZwTDNOd2FXNXVaWEluTzF4dWFXMXdiM0owSUZkbFltTmhiVlYwYVd4eklHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyaGxiSEJsY25NdmRYUnBiSE12ZDJWaVkyRnRMWFYwYVd4ekp6dGNibWx0Y0c5eWRDQjdJR2RsZEZWU1RDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZkWFJwYkhNdmRYUnBiQ2M3WEc1cGJYQnZjblFnVUdGblpVTnZiblJoYVc1bGNrWnZiM1JsY2lCbWNtOXRJQ2N1TGk4dUxpOHVMaTkxYVM5d1lXZGxMV052Ym5SaGFXNWxjaTl3WVdkbExXTnZiblJoYVc1bGNpMW1iMjkwWlhJdmNHRm5aUzFqYjI1MFlXbHVaWEl0Wm05dmRHVnlMbU52YlhCdmJtVnVkQ2M3WEc1Y2JtTnZibk4wSUZKRlFVUlpYMU5VUVZSRklEMGdlMXh1SUNCQlEwTkZVMU5KVGtkZlEwRk5SVkpCT2lBblFVTkRSVk5UU1U1SFgwTkJUVVZTUVNjc1hHNGdJRTVGUlVSZlZFOWZRVXhNVDFkZlFVTkRSVk5UT2lBblRrVkZSRjlVVDE5QlRFeFBWMTlCUTBORlUxTW5MRnh1SUNCU1JVRkVXVG9nSjFKRlFVUlpKeXhjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZGeVUyTmhibTVsY2lCbGVIUmxibVJ6SUVOdmJYQnZibVZ1ZENCN1hHNGdJSE4wWVhScFl5QndjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lDQWdhR2xrWlUxdlpHRnNPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lIRnlRMjlrWlVSbGRHVmpkR1ZrT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQjlPMXh1WEc0Z0lITjBZWFJwWXlCamIyNTBaWGgwVkhsd1pYTWdQU0I3WEc0Z0lDQWdkRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUgwN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2NISnZjSE1wSUh0Y2JpQWdJQ0J6ZFhCbGNpaHdjbTl3Y3lrN1hHNWNiaUFnSUNCMGFHbHpMbk4wWVhSbElEMGdkR2hwY3k1blpYUkpibWwwYVdGc1UzUmhkR1VvS1R0Y2JpQWdJQ0IwYUdsekxtTnZaR1ZTWldGa1pYSWdQU0J1ZFd4c08xeHVJQ0FnSUhSb2FYTXVjR1Z5YldsemMybHZia05vWldOclpYSWdQU0J1ZFd4c08xeHVJQ0FnSUhSb2FYTXViVzkxYm5SbFpDQTlJR1poYkhObE8xeHVYRzRnSUNBZ0x5OGdRMnhsWVhJZ2NISmxMV1Y0YVhOMGFXNW5JSEZ5SUdOdlpHVWdaR0YwWVNCaVpXWnZjbVVnYzJOaGJtNXBibWRjYmlBZ0lDQjBhR2x6TG5CeWIzQnpMbkZ5UTI5a1pVUmxkR1ZqZEdWa0tHNTFiR3dwTzF4dUlDQjlYRzVjYmlBZ1kyOXRjRzl1Wlc1MFJHbGtUVzkxYm5Rb0tTQjdYRzRnSUNBZ2RHaHBjeTV0YjNWdWRHVmtJRDBnZEhKMVpUdGNiaUFnSUNCMGFHbHpMbU5vWldOclJXNTJhWEp2Ym0xbGJuUW9LVHRjYmlBZ2ZWeHVYRzRnSUdOdmJYQnZibVZ1ZEVScFpGVndaR0YwWlNoZkxDQndjbVYyVTNSaGRHVXBJSHRjYmlBZ0lDQmpiMjV6ZENCN0lISmxZV1I1SUgwZ1BTQjBhR2x6TG5OMFlYUmxPMXh1WEc0Z0lDQWdhV1lnS0hCeVpYWlRkR0YwWlM1eVpXRmtlU0FoUFQwZ2NtVmhaSGtwSUh0Y2JpQWdJQ0FnSUdsbUlDaHlaV0ZrZVNBOVBUMGdVa1ZCUkZsZlUxUkJWRVV1VWtWQlJGa3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXBibWwwUTJGdFpYSmhLQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hKbFlXUjVJRDA5UFNCU1JVRkVXVjlUVkVGVVJTNU9SVVZFWDFSUFgwRk1URTlYWDBGRFEwVlRVeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5vWldOclVHVnliV2x6YzJsdmJuTW9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JuWlhSSmJtbDBhV0ZzVTNSaGRHVW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lISmxZV1I1T2lCU1JVRkVXVjlUVkVGVVJTNUJRME5GVTFOSlRrZGZRMEZOUlZKQkxGeHVJQ0FnSUNBZ1pYSnliM0k2SUc1MWJHd3NYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJR05vWldOclJXNTJhWEp2Ym0xbGJuUWdQU0JoYzNsdVl5QW9LU0E5UGlCN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lHTnZibk4wSUhzZ1pXNTJhWEp2Ym0xbGJuUlNaV0ZrZVNCOUlEMGdZWGRoYVhRZ1YyVmlZMkZ0VlhScGJITXVZMmhsWTJ0VGRHRjBkWE1vS1R0Y2JpQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJV1Z1ZG1seWIyNXRaVzUwVW1WaFpIa2dKaVpjYmlBZ0lDQWdJQ0FnWjJWMFJXNTJhWEp2Ym0xbGJuUlVlWEJsS0NrZ0lUMDlJRVZPVmtsU1QwNU5SVTVVWDFSWlVFVmZSbFZNVEZORFVrVkZUbHh1SUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR04xY25KbGJuUlZjbXdnUFNCblpYUlZVa3dvZDJsdVpHOTNMbXh2WTJGMGFXOXVMbWh5WldZcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamRYSnlaVzUwU0dGemFDQTlJR04xY25KbGJuUlZjbXcvTG1oaGMyZzdYRzRnSUNBZ0lDQWdJR052Ym5OMElHTjFjbkpsYm5SU2IzVjBaU0E5SUdOMWNuSmxiblJJWVhOb0lEOGdZM1Z5Y21WdWRFaGhjMmd1YzNWaWMzUnlhVzVuS0RFcElEb2diblZzYkR0Y2JpQWdJQ0FnSUNBZ1oyeHZZbUZzTG5Cc1lYUm1iM0p0TG05d1pXNUZlSFJsYm5OcGIyNUpia0p5YjNkelpYSW9ZM1Z5Y21WdWRGSnZkWFJsS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdOaGRHTm9JQ2hsY25KdmNpa2dlMXh1SUNBZ0lDQWdhV1lnS0hSb2FYTXViVzkxYm5SbFpDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtIc2daWEp5YjNJZ2ZTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklHbHVhWFJwWVd3Z1lYUjBaVzF3ZENCcGN5QnlaWEYxYVhKbFpDQjBieUIwY21sbloyVnlJSEJsY20xcGMzTnBiMjRnY0hKdmJYQjBYRzRnSUNBZ2RHaHBjeTVwYm1sMFEyRnRaWEpoS0NrN1hHNGdJSDA3WEc1Y2JpQWdZMmhsWTJ0UVpYSnRhWE56YVc5dWN5QTlJR0Z6ZVc1aklDZ3BJRDArSUh0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnZXlCd1pYSnRhWE56YVc5dWN5QjlJRDBnWVhkaGFYUWdWMlZpWTJGdFZYUnBiSE11WTJobFkydFRkR0YwZFhNb0tUdGNiaUFnSUNBZ0lHbG1JQ2h3WlhKdGFYTnphVzl1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJNWlhRZ2RHaGxJSFpwWkdWdklITjBjbVZoYlNCc2IyRmtJR1pwY25OMExpNHVYRzRnSUNBZ0lDQWdJR0YzWVdsMElHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxLU0E5UGlCelpYUlVhVzFsYjNWMEtISmxjMjlzZG1Vc0lGTkZRMDlPUkNBcUlESXBLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG0xdmRXNTBaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUlRkR0YwWlNoN0lISmxZV1I1T2lCU1JVRkVXVjlUVkVGVVJTNVNSVUZFV1NCOUtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1dGIzVnVkR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRXRsWlhBZ1kyaGxZMnRwYm1jZ1ptOXlJSEJsY20xcGMzTnBiMjV6WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR1Z5YldsemMybHZia05vWldOclpYSWdQU0J6WlhSVWFXMWxiM1YwS0hSb2FYTXVZMmhsWTJ0UVpYSnRhWE56YVc5dWN5d2dVMFZEVDA1RUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11Ylc5MWJuUmxaQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHNnWlhKeWIzSWdmU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUdOdmJYQnZibVZ1ZEZkcGJHeFZibTF2ZFc1MEtDa2dlMXh1SUNBZ0lIUm9hWE11Ylc5MWJuUmxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lHTnNaV0Z5VkdsdFpXOTFkQ2gwYUdsekxuQmxjbTFwYzNOcGIyNURhR1ZqYTJWeUtUdGNiaUFnSUNCMGFHbHpMblJsWVhKa2IzZHVRMjlrWlZKbFlXUmxjaWdwTzF4dUlDQjlYRzVjYmlBZ2RHVmhjbVJ2ZDI1RGIyUmxVbVZoWkdWeUtDa2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxtTnZaR1ZTWldGa1pYSXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVkyOWtaVkpsWVdSbGNpNXlaWE5sZENncE8xeHVJQ0FnSUNBZ2RHaHBjeTVqYjJSbFVtVmhaR1Z5TG5OMGIzQW9LVHRjYmlBZ0lDQWdJSFJvYVhNdVkyOWtaVkpsWVdSbGNpQTlJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2FXNXBkRU5oYldWeVlTQTlJR0Z6ZVc1aklDZ3BJRDArSUh0Y2JpQWdJQ0F2THlCVWFHVWdZR1JsWTI5a1pVWnliMjFKYm5CMWRGWnBaR1Z2UkdWMmFXTmxZQ0JqWVd4c0lIQnliMjF3ZEhNZ2RHaGxJR0p5YjNkelpYSWdkRzhnYzJodmQxeHVJQ0FnSUM4dklIUm9aU0IxYzJWeUlIUm9aU0JqWVcxbGNtRWdjR1Z5YldsemMybHZiaUJ5WlhGMVpYTjBMaUFnVjJVZ2JYVnpkQ0IwYUdWdUlHTmhiR3dnYVhRZ1lXZGhhVzVjYmlBZ0lDQXZMeUJ2Ym1ObElIZGxJSEpsWTJWcGRtVWdjR1Z5YldsemMybHZiaUJ6YnlCMGFHRjBJSFJvWlNCMmFXUmxieUJrYVhOd2JHRjVjeTVjYmlBZ0lDQXZMeUJKZENkeklHbHRjRzl5ZEdGdWRDQjBieUJ3Y21WMlpXNTBJSFJvYVhNZ1kyOWtaVkpsWVdSbGNpQm1jbTl0SUdKbGFXNW5JR055WldGMFpXUWdkSGRwWTJVN1hHNGdJQ0FnTHk4Z1JtbHlaV1p2ZUNCdmRHaGxjbmRwYzJVZ2MzUmhjblJ6SURJZ2RtbGtaVzhnYzNSeVpXRnRjeXdnYjI1bElHOW1JSGRvYVdOb0lHTmhibTV2ZENCaVpTQnpkRzl3Y0dWa1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TG1OdlpHVlNaV0ZrWlhJcElIdGNiaUFnSUNBZ0lIUm9hWE11WTI5a1pWSmxZV1JsY2lBOUlHNWxkeUJDY205M2MyVnlVVkpEYjJSbFVtVmhaR1Z5S0NrN1hHNGdJQ0FnZlZ4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNCaGQyRnBkQ0IwYUdsekxtTnZaR1ZTWldGa1pYSXVaMlYwVm1sa1pXOUpibkIxZEVSbGRtbGpaWE1vS1R0Y2JpQWdJQ0FnSUhSb2FYTXVZMmhsWTJ0UVpYSnRhWE56YVc5dWN5Z3BPMXh1SUNBZ0lDQWdZMjl1YzNRZ1kyOXVkR1Z1ZENBOUlHRjNZV2wwSUhSb2FYTXVZMjlrWlZKbFlXUmxjaTVrWldOdlpHVkdjbTl0U1c1d2RYUldhV1JsYjBSbGRtbGpaU2hjYmlBZ0lDQWdJQ0FnZFc1a1pXWnBibVZrTEZ4dUlDQWdJQ0FnSUNBbmRtbGtaVzhuTEZ4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUdOdmJuTjBJSEpsYzNWc2RDQTlJSFJvYVhNdWNHRnljMlZEYjI1MFpXNTBLR052Ym5SbGJuUXVkR1Y0ZENrN1hHNGdJQ0FnSUNCcFppQW9JWFJvYVhNdWJXOTFiblJsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tISmxjM1ZzZEM1MGVYQmxJRDA5UFNBbmRXNXJibTkzYmljcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUlRkR0YwWlNoN0lHVnljbTl5T2lCdVpYY2dSWEp5YjNJb2RHaHBjeTVqYjI1MFpYaDBMblFvSjNWdWEyNXZkMjVSY2tOdlpHVW5LU2tnZlNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxuRnlRMjlrWlVSbGRHVmpkR1ZrS0hKbGMzVnNkQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J2Y0VGdVpFTnNiM05sS0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCallYUmphQ0FvWlhKeWIzSXBJSHRjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTV0YjNWdWRHVmtLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNobGNuSnZjaTV1WVcxbElEMDlQU0FuVG05MFFXeHNiM2RsWkVWeWNtOXlKeWtnZTF4dUlDQWdJQ0FnSUNCc2IyY3VhVzVtYnloZ1VHVnliV2x6YzJsdmJpQmtaVzVwWldRNklDY2tlMlZ5Y205eWZTZGdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJUZEdGMFpTaDdJSEpsWVdSNU9pQlNSVUZFV1Y5VFZFRlVSUzVPUlVWRVgxUlBYMEZNVEU5WFgwRkRRMFZUVXlCOUtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMFUzUmhkR1VvZXlCbGNuSnZjaUI5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ2NHRnljMlZEYjI1MFpXNTBLR052Ym5SbGJuUXBJSHRjYmlBZ0lDQnNaWFFnZEhsd1pTQTlJQ2QxYm10dWIzZHVKenRjYmlBZ0lDQnNaWFFnZG1Gc2RXVnpJRDBnZTMwN1hHNWNiaUFnSUNBdkx5QklaWEpsSUhkbElHTnZkV3hrSUdGa1pDQnRiM0psSUdOaGMyVnpYRzRnSUNBZ0x5OGdWRzhnY0dGeWMyVWdiM1JvWlhJZ2RIbHdaU0J2WmlCc2FXNXJjMXh1SUNBZ0lDOHZJRVp2Y2lCbGVDNGdSVWxRTFRZNE1TQW9hSFIwY0hNNkx5OWxhWEJ6TG1WMGFHVnlaWFZ0TG05eVp5OUZTVkJUTDJWcGNDMDJPREVwWEc1Y2JpQWdJQ0F2THlCRmRHaGxjbVYxYlNCaFpHUnlaWE56SUd4cGJtdHpJQzBnWm05NElHVjRMaUJsZEdobGNtVjFiVG93ZUM0dUxpNHVNVEV4TVZ4dUlDQWdJR2xtSUNoamIyNTBaVzUwTG5Od2JHbDBLQ2RsZEdobGNtVjFiVG9uS1M1c1pXNW5kR2dnUGlBeEtTQjdYRzRnSUNBZ0lDQjBlWEJsSUQwZ0oyRmtaSEpsYzNNbk8xeHVJQ0FnSUNBZ2RtRnNkV1Z6SUQwZ2V5QmhaR1J5WlhOek9pQmpiMjUwWlc1MExuTndiR2wwS0NkbGRHaGxjbVYxYlRvbktWc3hYU0I5TzF4dVhHNGdJQ0FnSUNBdkx5QlNaV2QxYkdGeUlHVjBhR1Z5WlhWdElHRmtaSEpsYzNObGN5QXRJR1p2ZUNCbGVDNGdNSGd1TGk0dUxqRXhNVEZjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR052Ym5SbGJuUXVjM1ZpYzNSeWFXNW5LREFzSURJcExuUnZURzkzWlhKRFlYTmxLQ2tnUFQwOUlDY3dlQ2NwSUh0Y2JpQWdJQ0FnSUhSNWNHVWdQU0FuWVdSa2NtVnpjeWM3WEc0Z0lDQWdJQ0IyWVd4MVpYTWdQU0I3SUdGa1pISmxjM002SUdOdmJuUmxiblFnZlR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIc2dkSGx3WlN3Z2RtRnNkV1Z6SUgwN1hHNGdJSDFjYmx4dUlDQnpkRzl3UVc1a1EyeHZjMlVnUFNBb0tTQTlQaUI3WEc0Z0lDQWdhV1lnS0hSb2FYTXVZMjlrWlZKbFlXUmxjaWtnZTF4dUlDQWdJQ0FnZEdocGN5NTBaV0Z5Wkc5M2JrTnZaR1ZTWldGa1pYSW9LVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTV3Y205d2N5NW9hV1JsVFc5a1lXd29LVHRjYmlBZ2ZUdGNibHh1SUNCMGNubEJaMkZwYmlBOUlDZ3BJRDArSUh0Y2JpQWdJQ0JqYkdWaGNsUnBiV1Z2ZFhRb2RHaHBjeTV3WlhKdGFYTnphVzl1UTJobFkydGxjaWs3WEc0Z0lDQWdhV1lnS0hSb2FYTXVZMjlrWlZKbFlXUmxjaWtnZTF4dUlDQWdJQ0FnZEdocGN5NTBaV0Z5Wkc5M2JrTnZaR1ZTWldGa1pYSW9LVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTV6WlhSVGRHRjBaU2gwYUdsekxtZGxkRWx1YVhScFlXeFRkR0YwWlNncExDQW9LU0E5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbU5vWldOclJXNTJhWEp2Ym0xbGJuUW9LVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWEpGY25KdmNpZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCN0lIUWdmU0E5SUhSb2FYTXVZMjl1ZEdWNGREdGNiaUFnSUNCamIyNXpkQ0I3SUdWeWNtOXlJSDBnUFNCMGFHbHpMbk4wWVhSbE8xeHVYRzRnSUNBZ2JHVjBJSFJwZEd4bExDQnRjMmM3WEc0Z0lDQWdhV1lnS0dWeWNtOXlMblI1Y0dVZ1BUMDlJQ2RPVDE5WFJVSkRRVTFmUms5VlRrUW5LU0I3WEc0Z0lDQWdJQ0IwYVhSc1pTQTlJSFFvSjI1dlYyVmlZMkZ0Um05MWJtUlVhWFJzWlNjcE8xeHVJQ0FnSUNBZ2JYTm5JRDBnZENnbmJtOVhaV0pqWVcxR2IzVnVaQ2NwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvWlhKeWIzSXViV1Z6YzJGblpTQTlQVDBnZENnbmRXNXJibTkzYmxGeVEyOWtaU2NwS1NCN1hHNGdJQ0FnSUNCdGMyY2dQU0IwS0NkMWJtdHViM2R1VVhKRGIyUmxKeWs3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUnBkR3hsSUQwZ2RDZ25kVzVyYm05M2JrTmhiV1Z5WVVWeWNtOXlWR2wwYkdVbktUdGNiaUFnSUNBZ0lHMXpaeUE5SUhRb0ozVnVhMjV2ZDI1RFlXMWxjbUZGY25KdmNpY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBOFBseHVJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0luRnlMWE5qWVc1dVpYSmZYMmx0WVdkbFhDSStYRzRnSUNBZ0lDQWdJQ0FnUEdsdFp5QnpjbU05WENKcGJXRm5aWE12ZDJWaVkyRnRMbk4yWjF3aUlIZHBaSFJvUFZ3aU56QmNJaUJvWldsbmFIUTlYQ0kzTUZ3aUlHRnNkRDFjSWx3aUlDOCtYRzRnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0lDQjdkR2wwYkdVZ1B5QThaR2wySUdOc1lYTnpUbUZ0WlQxY0luRnlMWE5qWVc1dVpYSmZYM1JwZEd4bFhDSStlM1JwZEd4bGZUd3ZaR2wyUGlBNklHNTFiR3g5WEc0Z0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpY1hJdGMyTmhibTVsY2w5ZlpYSnliM0pjSWo1N2JYTm5mVHd2WkdsMlBseHVJQ0FnSUNBZ0lDQThVR0ZuWlVOdmJuUmhhVzVsY2tadmIzUmxjbHh1SUNBZ0lDQWdJQ0FnSUc5dVEyRnVZMlZzUFh0MGFHbHpMbk4wYjNCQmJtUkRiRzl6WlgxY2JpQWdJQ0FnSUNBZ0lDQnZibE4xWW0xcGREMTdkR2hwY3k1MGNubEJaMkZwYm4xY2JpQWdJQ0FnSUNBZ0lDQmpZVzVqWld4VVpYaDBQWHQwS0NkallXNWpaV3duS1gxY2JpQWdJQ0FnSUNBZ0lDQnpkV0p0YVhSVVpYaDBQWHQwS0NkMGNubEJaMkZwYmljcGZWeHVJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdQQzgrWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVYRzRnSUhKbGJtUmxjbFpwWkdWdktDa2dlMXh1SUNBZ0lHTnZibk4wSUhzZ2RDQjlJRDBnZEdocGN5NWpiMjUwWlhoME8xeHVJQ0FnSUdOdmJuTjBJSHNnY21WaFpIa2dmU0E5SUhSb2FYTXVjM1JoZEdVN1hHNWNiaUFnSUNCc1pYUWdiV1Z6YzJGblpUdGNiaUFnSUNCcFppQW9jbVZoWkhrZ1BUMDlJRkpGUVVSWlgxTlVRVlJGTGtGRFEwVlRVMGxPUjE5RFFVMUZVa0VwSUh0Y2JpQWdJQ0FnSUcxbGMzTmhaMlVnUFNCMEtDZGhZMk5sYzNOcGJtZFpiM1Z5UTJGdFpYSmhKeWs3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h5WldGa2VTQTlQVDBnVWtWQlJGbGZVMVJCVkVVdVVrVkJSRmtwSUh0Y2JpQWdJQ0FnSUcxbGMzTmhaMlVnUFNCMEtDZHpZMkZ1U1c1emRISjFZM1JwYjI1ekp5azdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHlaV0ZrZVNBOVBUMGdVa1ZCUkZsZlUxUkJWRVV1VGtWRlJGOVVUMTlCVEV4UFYxOUJRME5GVTFNcElIdGNiaUFnSUNBZ0lHMWxjM05oWjJVZ1BTQjBLQ2Q1YjNWT1pXVmtWRzlCYkd4dmQwTmhiV1Z5WVVGalkyVnpjeWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThQbHh1SUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbkZ5TFhOallXNXVaWEpmWDNScGRHeGxYQ0krZTJBa2UzUW9KM05qWVc1UmNrTnZaR1VuS1gxZ2ZUd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW5GeUxYTmpZVzV1WlhKZlgyTnZiblJsYm5SY0lqNWNiaUFnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbkZ5TFhOallXNXVaWEpmWDJOdmJuUmxiblJmWDNacFpHVnZMWGR5WVhCd1pYSmNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeDJhV1JsYjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkQxY0luWnBaR1Z2WENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSNWJHVTllM3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhOd2JHRjVPaUJ5WldGa2VTQTlQVDBnVWtWQlJGbGZVMVJCVkVVdVVrVkJSRmtnUHlBbllteHZZMnNuSURvZ0oyNXZibVVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnSUNBZ0lIdHlaV0ZrZVNBOVBUMGdVa1ZCUkZsZlUxUkJWRVV1VWtWQlJGa2dQeUJ1ZFd4c0lEb2dLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThVM0JwYm01bGNpQmpiMnh2Y2oxY0luWmhjaWd0TFdOdmJHOXlMWGRoY201cGJtY3RaR1ZtWVhWc2RDbGNJaUF2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2ljWEl0YzJOaGJtNWxjbDlmYzNSaGRIVnpYQ0krZTIxbGMzTmhaMlY5UEM5a2FYWStYRzRnSUNBZ0lDQThMejVjYmlBZ0lDQXBPMXh1SUNCOVhHNWNiaUFnY21WdVpHVnlLQ2tnZTF4dUlDQWdJR052Ym5OMElIc2daWEp5YjNJZ2ZTQTlJSFJvYVhNdWMzUmhkR1U3WEc0Z0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWNYSXRjMk5oYm01bGNsd2lQbHh1SUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbkZ5TFhOallXNXVaWEpmWDJOc2IzTmxYQ0lnYjI1RGJHbGphejE3ZEdocGN5NXpkRzl3UVc1a1EyeHZjMlY5UGp3dlpHbDJQbHh1SUNBZ0lDQWdJQ0I3WlhKeWIzSWdQeUIwYUdsekxuSmxibVJsY2tWeWNtOXlLQ2tnT2lCMGFHbHpMbkpsYm1SbGNsWnBaR1Z2S0NsOVhHNGdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQXBPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnZXlCamIyNXVaV04wSUgwZ1puSnZiU0FuY21WaFkzUXRjbVZrZFhnbk8xeHVhVzF3YjNKMElIc2dhR2xrWlUxdlpHRnNMQ0J4Y2tOdlpHVkVaWFJsWTNSbFpDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM04wYjNKbEwyRmpkR2x2Ym5Nbk8xeHVhVzF3YjNKMElGRnlVMk5oYm01bGNpQm1jbTl0SUNjdUwzRnlMWE5qWVc1dVpYSXVZMjl0Y0c5dVpXNTBKenRjYmx4dVkyOXVjM1FnYldGd1JHbHpjR0YwWTJoVWIxQnliM0J6SUQwZ0tHUnBjM0JoZEdOb0tTQTlQaUI3WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnYUdsa1pVMXZaR0ZzT2lBb0tTQTlQaUJrYVhOd1lYUmphQ2hvYVdSbFRXOWtZV3dvS1Nrc1hHNGdJQ0FnY1hKRGIyUmxSR1YwWldOMFpXUTZJQ2hrWVhSaEtTQTlQaUJrYVhOd1lYUmphQ2h4Y2tOdlpHVkVaWFJsWTNSbFpDaGtZWFJoS1Nrc1hHNGdJSDA3WEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiMjV1WldOMEtHNTFiR3dzSUcxaGNFUnBjM0JoZEdOb1ZHOVFjbTl3Y3lrb1VYSlRZMkZ1Ym1WeUtUdGNiaUlzSW1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnZlNCbWNtOXRJQ2N1TDNKbGFtVmpkQzEwY21GdWMyRmpkR2x2Ym5NdVkyOXVkR0ZwYm1WeUp6dGNiaUlzSW1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnVW1WaFkzUXNJSHNnVUhWeVpVTnZiWEJ2Ym1WdWRDQjlJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCTmIyUmhiQ0JtY205dElDY3VMaTh1TGk5dGIyUmhiQ2M3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRkpsYW1WamRGUnlZVzV6WVdOMGFXOXVjMDF2WkdGc0lHVjRkR1Z1WkhNZ1VIVnlaVU52YlhCdmJtVnVkQ0I3WEc0Z0lITjBZWFJwWXlCamIyNTBaWGgwVkhsd1pYTWdQU0I3WEc0Z0lDQWdkRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ2ZUdGNibHh1SUNCemRHRjBhV01nY0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUc5dVUzVmliV2wwT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJR2hwWkdWTmIyUmhiRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQjFibUZ3Y0hKdmRtVmtWSGhEYjNWdWREb2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpNXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lHbHpVbVZ4ZFdWemRGUjVjR1U2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNCOU8xeHVYRzRnSUc5dVUzVmliV2wwSUQwZ1lYTjVibU1nS0NrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhzZ2IyNVRkV0p0YVhRc0lHaHBaR1ZOYjJSaGJDQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JseHVJQ0FnSUdGM1lXbDBJRzl1VTNWaWJXbDBLQ2s3WEc0Z0lDQWdhR2xrWlUxdlpHRnNLQ2s3WEc0Z0lIMDdYRzVjYmlBZ2NtVnVaR1Z5S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnZENCOUlEMGdkR2hwY3k1amIyNTBaWGgwTzF4dUlDQWdJR052Ym5OMElIc2dhR2xrWlUxdlpHRnNMQ0IxYm1Gd2NISnZkbVZrVkhoRGIzVnVkQ3dnYVhOU1pYRjFaWE4wVkhsd1pTQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JseHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4VFc5a1lXeGNiaUFnSUNBZ0lDQWdhR1ZoWkdWeVZHVjRkRDE3WEc0Z0lDQWdJQ0FnSUNBZ2FYTlNaWEYxWlhOMFZIbHdaVnh1SUNBZ0lDQWdJQ0FnSUNBZ1B5QjBLQ2R5WldwbFkzUlNaWEYxWlhOMGMwNG5MQ0JiZFc1aGNIQnliM1psWkZSNFEyOTFiblJkS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdPaUIwS0NkeVpXcGxZM1JVZUhOT0p5d2dXM1Z1WVhCd2NtOTJaV1JVZUVOdmRXNTBYU2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCdmJrTnNiM05sUFh0b2FXUmxUVzlrWVd4OVhHNGdJQ0FnSUNBZ0lHOXVVM1ZpYldsMFBYdDBhR2x6TG05dVUzVmliV2wwZlZ4dUlDQWdJQ0FnSUNCdmJrTmhibU5sYkQxN2FHbGtaVTF2WkdGc2ZWeHVJQ0FnSUNBZ0lDQnpkV0p0YVhSVVpYaDBQWHQwS0NkeVpXcGxZM1JCYkd3bktYMWNiaUFnSUNBZ0lDQWdZMkZ1WTJWc1ZHVjRkRDE3ZENnblkyRnVZMlZzSnlsOVhHNGdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lEeGthWFkrWEc0Z0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKeVpXcGxZM1F0ZEhKaGJuTmhZM1JwYjI1elgxOWtaWE5qY21sd2RHbHZibHdpUGx4dUlDQWdJQ0FnSUNBZ0lDQWdlMmx6VW1WeGRXVnpkRlI1Y0dWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlCMEtDZHlaV3BsWTNSU1pYRjFaWE4wYzBSbGMyTnlhWEIwYVc5dUp5d2dXM1Z1WVhCd2NtOTJaV1JVZUVOdmRXNTBYU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUIwS0NkeVpXcGxZM1JVZUhORVpYTmpjbWx3ZEdsdmJpY3NJRnQxYm1Gd2NISnZkbVZrVkhoRGIzVnVkRjBwZlZ4dUlDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJRHd2VFc5a1lXdytYRzRnSUNBZ0tUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSHNnWTI5dWJtVmpkQ0I5SUdaeWIyMGdKM0psWVdOMExYSmxaSFY0Snp0Y2JtbHRjRzl5ZENCN0lHTnZiWEJ2YzJVZ2ZTQm1jbTl0SUNkeVpXUjFlQ2M3WEc1cGJYQnZjblFnZDJsMGFFMXZaR0ZzVUhKdmNITWdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZhR1ZzY0dWeWN5OW9hV2RvWlhJdGIzSmtaWEl0WTI5dGNHOXVaVzUwY3k5M2FYUm9MVzF2WkdGc0xYQnliM0J6Snp0Y2JtbHRjRzl5ZENCU1pXcGxZM1JVY21GdWMyRmpkR2x2Ym5OTmIyUmhiQ0JtY205dElDY3VMM0psYW1WamRDMTBjbUZ1YzJGamRHbHZibk11WTI5dGNHOXVaVzUwSnp0Y2JseHVZMjl1YzNRZ2JXRndVM1JoZEdWVWIxQnliM0J6SUQwZ0tGOHNJRzkzYmxCeWIzQnpLU0E5UGlCN1hHNGdJR052Ym5OMElIc2dkVzVoY0hCeWIzWmxaRlI0UTI5MWJuUWdmU0E5SUc5M2JsQnliM0J6TzF4dVhHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ2RXNWhjSEJ5YjNabFpGUjRRMjkxYm5Rc1hHNGdJSDA3WEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiMjF3YjNObEtGeHVJQ0IzYVhSb1RXOWtZV3hRY205d2N5eGNiaUFnWTI5dWJtVmpkQ2h0WVhCVGRHRjBaVlJ2VUhKdmNITXBMRnh1S1NoU1pXcGxZM1JVY21GdWMyRmpkR2x2Ym5OTmIyUmhiQ2s3WEc0aUxDSmxlSEJ2Y25RZ2V5QmtaV1poZFd4MElIMGdabkp2YlNBbkxpOTBjbUZ1YzJGamRHbHZiaTFqYjI1bWFYSnRaV1F1WTI5dWRHRnBibVZ5Snp0Y2JpSXNJbWx0Y0c5eWRDQlNaV0ZqZEN3Z2V5QlFkWEpsUTI5dGNHOXVaVzUwSUgwZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JOYjJSaGJDQm1jbTl0SUNjdUxpOHVMaTl0YjJSaGJDYzdYRzVwYlhCdmNuUWdleUJKWTI5dUxDQkpZMjl1VG1GdFpTd2dTV052YmxOcGVtVWdmU0JtY205dElDY3VMaTh1TGk4dUxpOWpiMjF3YjI1bGJuUXRiR2xpY21GeWVTYzdYRzVwYlhCdmNuUWdleUJKWTI5dVEyOXNiM0lnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5b1pXeHdaWEp6TDJOdmJuTjBZVzUwY3k5a1pYTnBaMjR0YzNsemRHVnRKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdWSEpoYm5OaFkzUnBiMjVEYjI1bWFYSnRaV1FnWlhoMFpXNWtjeUJRZFhKbFEyOXRjRzl1Wlc1MElIdGNiaUFnYzNSaGRHbGpJR052Ym5SbGVIUlVlWEJsY3lBOUlIdGNiaUFnSUNCME9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdmVHRjYmx4dUlDQnpkR0YwYVdNZ2NISnZjRlI1Y0dWeklEMGdlMXh1SUNBZ0lHOXVVM1ZpYldsME9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0JvYVdSbFRXOWtZV3c2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNCOU8xeHVYRzRnSUdoaGJtUnNaVk4xWW0xcGRDQTlJQ2dwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3SUdocFpHVk5iMlJoYkN3Z2IyNVRkV0p0YVhRZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc1Y2JpQWdJQ0JvYVdSbFRXOWtZV3dvS1R0Y2JseHVJQ0FnSUdsbUlDaHZibE4xWW0xcGRDQW1KaUIwZVhCbGIyWWdiMjVUZFdKdGFYUWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lHOXVVM1ZpYldsMEtDazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCN0lIUWdmU0E5SUhSb2FYTXVZMjl1ZEdWNGREdGNibHh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBOFRXOWtZV3dnYjI1VGRXSnRhWFE5ZTNSb2FYTXVhR0Z1Wkd4bFUzVmliV2wwZlNCemRXSnRhWFJVWlhoMFBYdDBLQ2R2YXljcGZUNWNiaUFnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSjBjbUZ1YzJGamRHbHZiaTFqYjI1bWFYSnRaV1JmWDJOdmJuUmxiblJjSWo1Y2JpQWdJQ0FnSUNBZ0lDQThTV052Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdibUZ0WlQxN1NXTnZiazVoYldVdVEyaGxZMnQ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxN1NXTnZia052Ykc5eUxuTjFZMk5sYzNORVpXWmhkV3gwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMmw2WlQxN1NXTnZibE5wZW1VdVdHeDlYRzRnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0luUnlZVzV6WVdOMGFXOXVMV052Ym1acGNtMWxaRjlmZEdsMGJHVmNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGdKSHQwS0NkamIyNW1hWEp0WldRbktYMGhZSDFjYmlBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW5SeVlXNXpZV04wYVc5dUxXTnZibVpwY20xbFpGOWZaR1Z6WTNKcGNIUnBiMjVjSWo1Y2JpQWdJQ0FnSUNBZ0lDQWdJSHQwS0NkcGJtbDBhV0ZzVkhKaGJuTmhZM1JwYjI1RGIyNW1hWEp0WldRbktYMWNiaUFnSUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBOEwwMXZaR0ZzUGx4dUlDQWdJQ2s3WEc0Z0lIMWNibjFjYmlJc0ltbHRjRzl5ZENCM2FYUm9UVzlrWVd4UWNtOXdjeUJtY205dElDY3VMaTh1TGk4dUxpOHVMaTlvWld4d1pYSnpMMmhwWjJobGNpMXZjbVJsY2kxamIyMXdiMjVsYm5SekwzZHBkR2d0Ylc5a1lXd3RjSEp2Y0hNbk8xeHVhVzF3YjNKMElGUnlZVzV6WVdOMGFXOXVRMjl1Wm1seWJXVmtJR1p5YjIwZ0p5NHZkSEpoYm5OaFkzUnBiMjR0WTI5dVptbHliV1ZrTG1OdmJYQnZibVZ1ZENjN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElIZHBkR2hOYjJSaGJGQnliM0J6S0ZSeVlXNXpZV04wYVc5dVEyOXVabWx5YldWa0tUdGNiaUlzSW1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnZlNCbWNtOXRJQ2N1TDIxMWJIUnBMV3hoZVdWeUxXWmxaUzF0WlhOellXZGxKenRjYmlJc0ltbHRjRzl5ZENCU1pXRmpkQ3dnZXlCMWMyVkRiMjUwWlhoMExDQjFjMlZUZEdGMFpTd2dkWE5sUldabVpXTjBJSDBnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElIc2dkWE5sVTJWc1pXTjBiM0lnZlNCbWNtOXRJQ2R5WldGamRDMXlaV1IxZUNjN1hHNXBiWEJ2Y25RZ1VISnZjRlI1Y0dWeklHWnliMjBnSjNCeWIzQXRkSGx3WlhNbk8xeHVhVzF3YjNKMElIc2dZMkZ3ZEhWeVpVVjRZMlZ3ZEdsdmJpQjlJR1p5YjIwZ0owQnpaVzUwY25rdlluSnZkM05sY2ljN1hHNXBiWEJ2Y25RZ1ZISmhibk5oWTNScGIyNUVaWFJoYVd4SmRHVnRJR1p5YjIwZ0p5NHVMM1J5WVc1ellXTjBhVzl1TFdSbGRHRnBiQzFwZEdWdEwzUnlZVzV6WVdOMGFXOXVMV1JsZEdGcGJDMXBkR1Z0TG1OdmJYQnZibVZ1ZENjN1hHNXBiWEJ2Y25RZ1ZYTmxjbEJ5WldabGNtVnVZMlZrUTNWeWNtVnVZM2xFYVhOd2JHRjVJR1p5YjIwZ0p5NHVMM1Z6WlhJdGNISmxabVZ5Wlc1alpXUXRZM1Z5Y21WdVkza3RaR2x6Y0d4aGVTYzdYRzVwYlhCdmNuUWdabVYwWTJoRmMzUnBiV0YwWldSTU1VWmxaU0JtY205dElDY3VMaTh1TGk4dUxpOW9aV3h3WlhKekwzVjBhV3h6TDI5d2RHbHRhWE50TDJabGRHTm9SWE4wYVcxaGRHVmtUREZHWldVbk8xeHVhVzF3YjNKMElIc2dVMFZEVDA1RVFWSlpJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZhR1ZzY0dWeWN5OWpiMjV6ZEdGdWRITXZZMjl0Ylc5dUp6dGNibWx0Y0c5eWRDQjdJRWt4T0c1RGIyNTBaWGgwSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2WTI5dWRHVjRkSE12YVRFNGJpYzdYRzVwYlhCdmNuUWdleUJ6ZFcxSVpYaGxjeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNOb1lYSmxaQzl0YjJSMWJHVnpMMk52Ym5abGNuTnBiMjR1ZFhScGJITW5PMXh1YVcxd2IzSjBJSHNnUlhSb1pYSkVaVzV2YldsdVlYUnBiMjRnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2WTI5dWMzUmhiblJ6TDJOdmJXMXZiaWM3WEc1cGJYQnZjblFnZXlCT2RXMWxjbWxqSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmMyaGhjbVZrTDIxdlpIVnNaWE12VG5WdFpYSnBZeWM3WEc1cGJYQnZjblFnZXlCblpYUlZjMlZEZFhKeVpXNWplVkpoZEdWRGFHVmpheUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMM05sYkdWamRHOXljeWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUUxMWJIUnBiR0Y1WlhKR1pXVk5aWE56WVdkbEtIdGNiaUFnZEhKaGJuTmhZM1JwYjI0c1hHNGdJR3hoZVdWeU1tWmxaU3hjYmlBZ2JtRjBhWFpsUTNWeWNtVnVZM2tzWEc0Z0lIQnNZV2x1VTNSNWJHVXNYRzU5S1NCN1hHNGdJR052Ym5OMElIUWdQU0IxYzJWRGIyNTBaWGgwS0VreE9HNURiMjUwWlhoMEtUdGNiaUFnWTI5dWMzUWdXMlpsZEdOb1pXUk1ZWGxsY2pGVWIzUmhiQ3dnYzJWMFRHRjVaWEl4Vkc5MFlXeGRJRDBnZFhObFUzUmhkR1VvYm5Wc2JDazdYRzVjYmlBZ1kyOXVjM1FnZFhObFEzVnljbVZ1WTNsU1lYUmxRMmhsWTJzZ1BTQjFjMlZUWld4bFkzUnZjaWhuWlhSVmMyVkRkWEp5Wlc1amVWSmhkR1ZEYUdWamF5azdYRzVjYmlBZ2RYTmxSV1ptWldOMEtDZ3BJRDArSUh0Y2JpQWdJQ0JwWmlBb0lYUnlZVzV6WVdOMGFXOXVQeTUwZUZCaGNtRnRjeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0JuWlhSRmMzUnBiV0YwWldSTU1VWmxaU0E5SUdGemVXNWpJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEpsYzNWc2RDQTlJR0YzWVdsMElHWmxkR05vUlhOMGFXMWhkR1ZrVERGR1pXVW9YRzRnSUNBZ0lDQWdJQ0FnZEhKaGJuTmhZM1JwYjI0L0xtTm9ZV2x1U1dRc1hHNGdJQ0FnSUNBZ0lDQWdkSEpoYm5OaFkzUnBiMjRzWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lITmxkRXhoZVdWeU1WUnZkR0ZzS0hKbGMzVnNkQ2s3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lHTmhjSFIxY21WRmVHTmxjSFJwYjI0b1pTazdYRzRnSUNBZ0lDQWdJSE5sZEV4aGVXVnlNVlJ2ZEdGc0tHNTFiR3dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc0Z0lDQWdaMlYwUlhOMGFXMWhkR1ZrVERGR1pXVW9LVHRjYmlBZ2ZTd2dXM1J5WVc1ellXTjBhVzl1WFNrN1hHNWNiaUFnYVdZZ0tDRjBjbUZ1YzJGamRHbHZiajh1ZEhoUVlYSmhiWE1wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdmVnh1WEc0Z0lHeGxkQ0JzWVhsbGNqRlViM1JoYkNBOUlIUW9KM1Z1YTI1dmQyNG5LVHRjYmlBZ2JHVjBJR1psWlZSdmRHRnNTVzVHYVdGMElEMGdkQ2duZFc1cmJtOTNiaWNwTzF4dVhHNGdJR2xtSUNobVpYUmphR1ZrVEdGNVpYSXhWRzkwWVd3Z0lUMDlJRzUxYkd3cElIdGNiaUFnSUNCamIyNXpkQ0JzWVhsbGNqRlViM1JoYkVKT0lEMGdibVYzSUU1MWJXVnlhV01vWEc0Z0lDQWdJQ0JtWlhSamFHVmtUR0Y1WlhJeFZHOTBZV3dzWEc0Z0lDQWdJQ0F4Tml4Y2JpQWdJQ0FnSUVWMGFHVnlSR1Z1YjIxcGJtRjBhVzl1TGxkRlNTeGNiaUFnSUNBcE8xeHVJQ0FnSUd4aGVXVnlNVlJ2ZEdGc0lEMGdZQ1I3YkdGNVpYSXhWRzkwWVd4Q1RseHVJQ0FnSUNBZ0xuUnZSR1Z1YjIxcGJtRjBhVzl1S0VWMGFHVnlSR1Z1YjIxcGJtRjBhVzl1TGtWVVNDbGNiaUFnSUNBZ0lDNTBiMFpwZUdWa0tERXlLWDBnSkh0dVlYUnBkbVZEZFhKeVpXNWplWDFnTzF4dVhHNGdJQ0FnWm1WbFZHOTBZV3hKYmtacFlYUWdQU0IxYzJWRGRYSnlaVzVqZVZKaGRHVkRhR1ZqYXlBL0lDaGNiaUFnSUNBZ0lEeFZjMlZ5VUhKbFptVnlaVzVqWldSRGRYSnlaVzVqZVVScGMzQnNZWGxjYmlBZ0lDQWdJQ0FnZEhsd1pUMTdVMFZEVDA1RVFWSlpmVnh1SUNBZ0lDQWdJQ0IyWVd4MVpUMTdabVYwWTJobFpFeGhlV1Z5TVZSdmRHRnNmVnh1SUNBZ0lDQWdJQ0J6YUc5M1JtbGhkRnh1SUNBZ0lDQWdJQ0JvYVdSbFRHRmlaV3hjYmlBZ0lDQWdJQzgrWEc0Z0lDQWdLU0E2SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0JqYjI1emRDQjBiM1JoYkVsdVYyVnBTR1Y0SUQwZ2MzVnRTR1Y0WlhNb1hHNGdJQ0FnYkdGNVpYSXlabVZsSUh4OElDY3dlREFuTEZ4dUlDQWdJR1psZEdOb1pXUk1ZWGxsY2pGVWIzUmhiQ0I4ZkNBbk1IZ3dKeXhjYmlBZ0lDQjBjbUZ1YzJGamRHbHZiajh1ZEhoUVlYSmhiWE0vTG5aaGJIVmxJSHg4SUNjd2VEQW5MRnh1SUNBcE8xeHVYRzRnSUdOdmJuTjBJSFJ2ZEdGc1FrNGdQU0J1WlhjZ1RuVnRaWEpwWXloMGIzUmhiRWx1VjJWcFNHVjRMQ0F4Tml3Z1JYUm9aWEpFWlc1dmJXbHVZWFJwYjI0dVYwVkpLVHRjYmlBZ1kyOXVjM1FnZEc5MFlXeEpia1YwYUNBOUlHQWtlM1J2ZEdGc1FrNWNiaUFnSUNBdWRHOUVaVzV2YldsdVlYUnBiMjRvUlhSb1pYSkVaVzV2YldsdVlYUnBiMjR1UlZSSUtWeHVJQ0FnSUM1MGIwWnBlR1ZrS0RFeUtYMGdKSHR1WVhScGRtVkRkWEp5Wlc1amVYMWdPMXh1WEc0Z0lHTnZibk4wSUhSdmRHRnNTVzVHYVdGMElEMGdkWE5sUTNWeWNtVnVZM2xTWVhSbFEyaGxZMnNnUHlBb1hHNGdJQ0FnUEZWelpYSlFjbVZtWlhKbGJtTmxaRU4xY25KbGJtTjVSR2x6Y0d4aGVWeHVJQ0FnSUNBZ2RIbHdaVDE3VTBWRFQwNUVRVkpaZlZ4dUlDQWdJQ0FnZG1Gc2RXVTllM1J2ZEdGc1NXNVhaV2xJWlhoOVhHNGdJQ0FnSUNCemFHOTNSbWxoZEZ4dUlDQWdJQ0FnYUdsa1pVeGhZbVZzWEc0Z0lDQWdMejVjYmlBZ0tTQTZJRzUxYkd3N1hHNWNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0ltMTFiSFJwTFd4aGVXVnlMV1psWlMxdFpYTnpZV2RsWENJK1hHNGdJQ0FnSUNBOFZISmhibk5oWTNScGIyNUVaWFJoYVd4SmRHVnRYRzRnSUNBZ0lDQWdJR3RsZVQxY0ltMTFiSFJwTFd4aGVXVnlMV1psWlMxdFpYTnpZV2RsTFhSdmRHRnNMV2wwWlcwdFoyRnpMV1psWlZ3aVhHNGdJQ0FnSUNBZ0lHUmxkR0ZwYkZScGRHeGxQWHQwS0Nkc1lYbGxjakZHWldWekp5bDlYRzRnSUNBZ0lDQWdJR1JsZEdGcGJGUnZkR0ZzUFh0c1lYbGxjakZVYjNSaGJIMWNiaUFnSUNBZ0lDQWdaR1YwWVdsc1ZHVjRkRDE3ZFhObFEzVnljbVZ1WTNsU1lYUmxRMmhsWTJzZ0ppWWdabVZsVkc5MFlXeEpia1pwWVhSOVhHNGdJQ0FnSUNBZ0lHNXZRbTlzWkQxN2NHeGhhVzVUZEhsc1pYMWNiaUFnSUNBZ0lDQWdabXhsZUZkcFpIUm9WbUZzZFdWelBYdHdiR0ZwYmxOMGVXeGxmVnh1SUNBZ0lDQWdMejVjYmlBZ0lDQWdJRHhVY21GdWMyRmpkR2x2YmtSbGRHRnBiRWwwWlcxY2JpQWdJQ0FnSUNBZ2EyVjVQVndpYlhWc2RHa3RiR0Y1WlhJdFptVmxMVzFsYzNOaFoyVXRkRzkwWVd3dGFYUmxiUzEwYjNSaGJGd2lYRzRnSUNBZ0lDQWdJR1JsZEdGcGJGUnBkR3hsUFh0MEtDZDBiM1JoYkNjcGZWeHVJQ0FnSUNBZ0lDQmtaWFJoYVd4VWIzUmhiRDE3ZEc5MFlXeEpia1YwYUgxY2JpQWdJQ0FnSUNBZ1pHVjBZV2xzVkdWNGREMTdkRzkwWVd4SmJrWnBZWFI5WEc0Z0lDQWdJQ0FnSUhOMVlsUnBkR3hsUFh0MEtDZDBjbUZ1YzJGamRHbHZia1JsZEdGcGJFMTFiSFJwVEdGNVpYSlViM1JoYkZOMVluUnBkR3hsSnlsOVhHNGdJQ0FnSUNBZ0lHNXZRbTlzWkQxN2NHeGhhVzVUZEhsc1pYMWNiaUFnSUNBZ0lDQWdabXhsZUZkcFpIUm9WbUZzZFdWelBYdHdiR0ZwYmxOMGVXeGxmVnh1SUNBZ0lDQWdMejVjYmlBZ0lDQThMMlJwZGo1Y2JpQWdLVHRjYm4xY2JseHVUWFZzZEdsc1lYbGxja1psWlUxbGMzTmhaMlV1Y0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0IwY21GdWMyRmpkR2x2YmpvZ1VISnZjRlI1Y0dWekxtOWlhbVZqZEN4Y2JpQWdiR0Y1WlhJeVptVmxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNCdVlYUnBkbVZEZFhKeVpXNWplVG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ2NHeGhhVzVUZEhsc1pUb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNTlPMXh1SWl3aVpYaHdiM0owSUhzZ1pHVm1ZWFZzZENCOUlHWnliMjBnSnk0dmJYVnNkR2x3YkdVdGJtOTBhV1pwWTJGMGFXOXVjeTVqYjIxd2IyNWxiblFuTzF4dUlpd2lhVzF3YjNKMElGSmxZV04wTENCN0lGQjFjbVZEYjIxd2IyNWxiblFnZlNCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdZMnhoYzNOdVlXMWxjeUJtY205dElDZGpiR0Z6YzI1aGJXVnpKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRTExYkhScGNHeGxUbTkwYVdacFkyRjBhVzl1Y3lCbGVIUmxibVJ6SUZCMWNtVkRiMjF3YjI1bGJuUWdlMXh1SUNCemRHRjBhV01nWkdWbVlYVnNkRkJ5YjNCeklEMGdlMXh1SUNBZ0lHTm9hV3hrY21WdU9pQmJYU3hjYmlBZ0lDQmpiR0Z6YzA1aGJXVnpPaUJiWFN4Y2JpQWdmVHRjYmx4dUlDQnpkR0YwYVdNZ2NISnZjRlI1Y0dWeklEMGdlMXh1SUNBZ0lHTm9hV3hrY21WdU9pQlFjbTl3Vkhsd1pYTXVZWEp5WVhrc1hHNGdJQ0FnWTJ4aGMzTk9ZVzFsY3pvZ1VISnZjRlI1Y0dWekxtRnljbUY1TEZ4dUlDQjlPMXh1WEc0Z0lITjBZWFJsSUQwZ2UxeHVJQ0FnSUhOb2IzZEJiR3c2SUdaaGJITmxMRnh1SUNCOU8xeHVYRzRnSUhKbGJtUmxjaWdwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJSE5vYjNkQmJHd2dmU0E5SUhSb2FYTXVjM1JoZEdVN1hHNGdJQ0FnWTI5dWMzUWdleUJqYUdsc1pISmxiaXdnWTJ4aGMzTk9ZVzFsY3lCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmx4dUlDQWdJR052Ym5OMElHTm9hV3hrY21WdVZHOVNaVzVrWlhJZ1BTQmphR2xzWkhKbGJpNW1hV3gwWlhJb1FtOXZiR1ZoYmlrN1hHNGdJQ0FnYVdZZ0tHTm9hV3hrY21WdVZHOVNaVzVrWlhJdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQR1JwZGx4dUlDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUyTnNZWE56Ym1GdFpYTW9MaTR1WTJ4aGMzTk9ZVzFsY3l3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ2RvYjIxbExXNXZkR2xtYVdOaGRHbHZiaTEzY21Gd2NHVnlMUzF6YUc5M0xXRnNiQ2M2SUhOb2IzZEJiR3dzWEc0Z0lDQWdJQ0FnSUNBZ0oyaHZiV1V0Ym05MGFXWnBZMkYwYVc5dUxYZHlZWEJ3WlhJdExYTm9iM2N0Wm1seWMzUW5PaUFoYzJodmQwRnNiQ3hjYmlBZ0lDQWdJQ0FnZlNsOVhHNGdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lIdGphR2xzWkhKbGJsUnZVbVZ1WkdWeWZWeHVJQ0FnSUNBZ0lDQThaR2wyWEc0Z0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2lhRzl0WlMxdWIzUnBabWxqWVhScGIyNHRkM0poY0hCbGNsOWZhUzFqYjI1MFlXbHVaWEpjSWx4dUlDQWdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWV5Z3BJRDArSUhSb2FYTXVjMlYwVTNSaGRHVW9leUJ6YUc5M1FXeHNPaUFoYzJodmQwRnNiQ0I5S1gxY2JpQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJSHRqYUdsc1pISmxibFJ2VW1WdVpHVnlMbXhsYm1kMGFDQStJREVnUHlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4YVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5ZTJOc1lYTnpibUZ0WlhNb0oyWmhJR1poTFhOdElHWmhMWE52Y25RdFlXMXZkVzUwSnl3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnNhWEJ3WldRNklDRnphRzkzUVd4c0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtYMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDQWdLU0E2SUc1MWJHeDlYRzRnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1SWl3aVpYaHdiM0owSUhzZ1pHVm1ZWFZzZENCOUlHWnliMjBnSnk0dmJtVjBkMjl5YXkxaFkyTnZkVzUwTFdKaGJHRnVZMlV0YUdWaFpHVnlKenRjYmlJc0ltbHRjRzl5ZENCU1pXRmpkQ3dnZXlCMWMyVkRiMjUwWlhoMElIMGdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCSlkyOXVWMmwwYUVaaGJHeGlZV05ySUdaeWIyMGdKeTR1THk0dUwzVnBMMmxqYjI0dGQybDBhQzFtWVd4c1ltRmpheWM3WEc1cGJYQnZjblFnU1dSbGJuUnBZMjl1SUdaeWIyMGdKeTR1THk0dUwzVnBMMmxrWlc1MGFXTnZiaWM3WEc1cGJYQnZjblFnZTF4dUlDQkVTVk5RVEVGWkxGeHVJQ0JHVEVWWVgwUkpVa1ZEVkVsUFRpeGNiaUFnVkdWNGRGWmhjbWxoYm5Rc1hHNGdJRVp2Ym5SWFpXbG5hSFFzWEc0Z0lFRnNhV2R1U1hSbGJYTXNYRzRnSUVwMWMzUnBabmxEYjI1MFpXNTBMRnh1SUNCVVpYaDBRV3hwWjI0c1hHNGdJRlJsZUhSRGIyeHZjaXhjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2YUdWc2NHVnljeTlqYjI1emRHRnVkSE12WkdWemFXZHVMWE41YzNSbGJTYzdYRzVwYlhCdmNuUWdRbTk0SUdaeWIyMGdKeTR1THk0dUwzVnBMMkp2ZUM5aWIzZ25PMXh1YVcxd2IzSjBJSHNnU1RFNGJrTnZiblJsZUhRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5amIyNTBaWGgwY3k5cE1UaHVKenRjYm1sdGNHOXlkQ0I3SUVOSVFVbE9YMGxFWDFSUFgwNUZWRmRQVWt0ZlNVMUJSMFZmVlZKTVgwMUJVQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12Ym1WMGQyOXlheWM3WEc1cGJYQnZjblFnZXlCVVpYaDBJSDBnWm5KdmJTQW5MaTR2TGk0dlkyOXRjRzl1Wlc1MExXeHBZbkpoY25rbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQk9aWFIzYjNKclFXTmpiM1Z1ZEVKaGJHRnVZMlZJWldGa1pYSW9lMXh1SUNCdVpYUjNiM0pyVG1GdFpTeGNiaUFnWVdOamIzVnVkRTVoYldVc1hHNGdJR0ZqWTI5MWJuUkNZV3hoYm1ObExGeHVJQ0IwYjJ0bGJrNWhiV1VzSUM4dklFUmxjbWwyWldRZ1puSnZiU0J1WVhScGRtVkRkWEp5Wlc1amVWeHVJQ0JoWTJOdmRXNTBRV1JrY21WemN5eGNiaUFnWTJoaGFXNUpaQ3hjYm4wcElIdGNiaUFnWTI5dWMzUWdkQ0E5SUhWelpVTnZiblJsZUhRb1NURTRia052Ym5SbGVIUXBPMXh1SUNCamIyNXpkQ0J1WlhSM2IzSnJTV052YmlBOUlFTklRVWxPWDBsRVgxUlBYMDVGVkZkUFVrdGZTVTFCUjBWZlZWSk1YMDFCVUZ0amFHRnBia2xrWFR0Y2JpQWdZMjl1YzNRZ2JtVjBkMjl5YTBsamIyNVhjbUZ3Y0dWeVEyeGhjM01nUFNCdVpYUjNiM0pyU1dOdmJseHVJQ0FnSUQ4Z0oyNWxkSGR2Y21zdFlXTmpiM1Z1ZEMxaVlXeGhibU5sTFdobFlXUmxjbDlmYm1WMGQyOXlheTFoWTJOdmRXNTBYMTlwWkdWdWRDMXBZMjl1TFdWMGFHVnlaWFZ0SjF4dUlDQWdJRG9nSjI1bGRIZHZjbXN0WVdOamIzVnVkQzFpWVd4aGJtTmxMV2hsWVdSbGNsOWZibVYwZDI5eWF5MWhZMk52ZFc1MFgxOXBaR1Z1ZEMxcFkyOXVMV1YwYUdWeVpYVnRMUzFuY21GNUp6dGNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhDYjNoY2JpQWdJQ0FnSUdScGMzQnNZWGs5ZTBSSlUxQk1RVmt1Umt4RldIMWNiaUFnSUNBZ0lHWnNaWGhFYVhKbFkzUnBiMjQ5ZTBaTVJWaGZSRWxTUlVOVVNVOU9MbEpQVjMxY2JpQWdJQ0FnSUhCaFpHUnBibWM5ZXpSOVhHNGdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnVaWFIzYjNKckxXRmpZMjkxYm5RdFltRnNZVzVqWlMxb1pXRmtaWEpjSWx4dUlDQWdJQ0FnWVd4cFoyNUpkR1Z0Y3oxN1FXeHBaMjVKZEdWdGN5NWpaVzUwWlhKOVhHNGdJQ0FnSUNCcWRYTjBhV1o1UTI5dWRHVnVkRDE3U25WemRHbG1lVU52Ym5SbGJuUXVjM0JoWTJWQ1pYUjNaV1Z1ZlZ4dUlDQWdJRDVjYmlBZ0lDQWdJRHhDYjNoY2JpQWdJQ0FnSUNBZ1pHbHpjR3hoZVQxN1JFbFRVRXhCV1M1R1RFVllmVnh1SUNBZ0lDQWdJQ0JtYkdWNFJHbHlaV04wYVc5dVBYdEdURVZZWDBSSlVrVkRWRWxQVGk1U1QxZDlYRzRnSUNBZ0lDQWdJR0ZzYVdkdVNYUmxiWE05ZTBGc2FXZHVTWFJsYlhNdVkyVnVkR1Z5ZlZ4dUlDQWdJQ0FnSUNCbllYQTlleko5WEc0Z0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUR4Q2IzaGNiaUFnSUNBZ0lDQWdJQ0JrYVhOd2JHRjVQWHRFU1ZOUVRFRlpMa1pNUlZoOVhHNGdJQ0FnSUNBZ0lDQWdabXhsZUVScGNtVmpkR2x2YmoxN1JreEZXRjlFU1ZKRlExUkpUMDR1VWs5WGZWeHVJQ0FnSUNBZ0lDQWdJR0ZzYVdkdVNYUmxiWE05ZTBGc2FXZHVTWFJsYlhNdVkyVnVkR1Z5ZlZ4dUlDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdQRWxrWlc1MGFXTnZiaUJoWkdSeVpYTnpQWHRoWTJOdmRXNTBRV1JrY21WemMzMGdaR2xoYldWMFpYSTllek15ZlNBdlBseHVJQ0FnSUNBZ0lDQWdJRHhKWTI5dVYybDBhRVpoYkd4aVlXTnJYRzRnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxQWHR1WlhSM2IzSnJUbUZ0WlgxY2JpQWdJQ0FnSUNBZ0lDQWdJSE5wZW1VOWV6RTJmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXTnZiajE3Ym1WMGQyOXlhMGxqYjI1OVhHNGdJQ0FnSUNBZ0lDQWdJQ0IzY21Gd2NHVnlRMnhoYzNOT1lXMWxQWHR1WlhSM2IzSnJTV052YmxkeVlYQndaWEpEYkdGemMzMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBOEwwSnZlRDVjYmlBZ0lDQWdJQ0FnUEVKdmVGeHVJQ0FnSUNBZ0lDQWdJR1JwYzNCc1lYazllMFJKVTFCTVFWa3VSa3hGV0gxY2JpQWdJQ0FnSUNBZ0lDQmhiR2xuYmtsMFpXMXpQWHRCYkdsbmJrbDBaVzF6TG1ac1pYaFRkR0Z5ZEgxY2JpQWdJQ0FnSUNBZ0lDQm1iR1Y0UkdseVpXTjBhVzl1UFh0R1RFVllYMFJKVWtWRFZFbFBUaTVEVDB4VlRVNTlYRzRnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBOFZHVjRkRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlhV0Z1ZEQxN1ZHVjRkRlpoY21saGJuUXVZbTlrZVZOdGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhNOVhDSm9ObHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxN1ZHVjRkRU52Ykc5eUxuUmxlSFJCYkhSbGNtNWhkR2wyWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJRzFoY21kcGJrSnZkSFJ2YlQxN01IMWNiaUFnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdibVYwZDI5eWEwNWhiV1Y5WEc0Z0lDQWdJQ0FnSUNBZ1BDOVVaWGgwUGx4dVhHNGdJQ0FnSUNBZ0lDQWdQRlJsZUhSY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbFRiWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnpQVndpYURaY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTllMVJsZUhSRGIyeHZjaTUwWlhoMFJHVm1ZWFZzZEgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Ym5SWFpXbG5hSFE5ZTBadmJuUlhaV2xuYUhRdVFtOXNaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWhjbWRwYmxSdmNEMTdNSDFjYmlBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3WVdOamIzVnVkRTVoYldWOVhHNGdJQ0FnSUNBZ0lDQWdQQzlVWlhoMFBseHVJQ0FnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdQRUp2ZUZ4dUlDQWdJQ0FnSUNCa2FYTndiR0Y1UFh0RVNWTlFURUZaTGtaTVJWaDlYRzRnSUNBZ0lDQWdJR0ZzYVdkdVNYUmxiWE05ZTBGc2FXZHVTWFJsYlhNdVpteGxlRVZ1WkgxY2JpQWdJQ0FnSUNBZ1pteGxlRVJwY21WamRHbHZiajE3Umt4RldGOUVTVkpGUTFSSlQwNHVRMDlNVlUxT2ZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQThWR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lIWmhjbWxoYm5ROWUxUmxlSFJXWVhKcFlXNTBMbUp2WkhsVGJYMWNiaUFnSUNBZ0lDQWdJQ0JoY3oxY0ltZzJYQ0pjYmlBZ0lDQWdJQ0FnSUNCamIyeHZjajE3VkdWNGRFTnZiRzl5TG5SbGVIUkJiSFJsY201aGRHbDJaWDFjYmlBZ0lDQWdJQ0FnSUNCdFlYSm5hVzVDYjNSMGIyMDllekI5WEc0Z0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQjdkQ2duWW1Gc1lXNWpaU2NwZlZ4dUlDQWdJQ0FnSUNBOEwxUmxlSFErWEc1Y2JpQWdJQ0FnSUNBZ1BGUmxlSFJjYmlBZ0lDQWdJQ0FnSUNCMllYSnBZVzUwUFh0VVpYaDBWbUZ5YVdGdWRDNWliMlI1VTIxOVhHNGdJQ0FnSUNBZ0lDQWdZWE05WENKb05sd2lYRzRnSUNBZ0lDQWdJQ0FnWTI5c2IzSTllMVJsZUhSRGIyeHZjaTUwWlhoMFJHVm1ZWFZzZEgxY2JpQWdJQ0FnSUNBZ0lDQm1iMjUwVjJWcFoyaDBQWHRHYjI1MFYyVnBaMmgwTGtKdmJHUjlYRzRnSUNBZ0lDQWdJQ0FnYldGeVoybHVWRzl3UFhzd2ZWeHVJQ0FnSUNBZ0lDQWdJR0ZzYVdkdVBYdFVaWGgwUVd4cFoyNHVSVzVrZlZ4dUlDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdlMkZqWTI5MWJuUkNZV3hoYm1ObGZTQjdkRzlyWlc1T1lXMWxmVnh1SUNBZ0lDQWdJQ0E4TDFSbGVIUStYRzRnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0E4TDBKdmVENWNiaUFnS1R0Y2JuMWNibHh1VG1WMGQyOXlhMEZqWTI5MWJuUkNZV3hoYm1ObFNHVmhaR1Z5TG5CeWIzQlVlWEJsY3lBOUlIdGNiaUFnYm1WMGQyOXlhMDVoYldVNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJR0ZqWTI5MWJuUk9ZVzFsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQmhZMk52ZFc1MFFtRnNZVzVqWlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdkRzlyWlc1T1lXMWxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNCaFkyTnZkVzUwUVdSa2NtVnpjem9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ1kyaGhhVzVKWkRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JuMDdYRzRpTENKbGVIQnZjblFnZXlCa1pXWmhkV3gwSUgwZ1puSnZiU0FuTGk5dVpYUjNiM0pyTFdScGMzQnNZWGtuTzF4dUlpd2lhVzF3YjNKMElGSmxZV04wSUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdZMnhoYzNOdVlXMWxjeUJtY205dElDZGpiR0Z6YzI1aGJXVnpKenRjYm1sdGNHOXlkQ0I3SUhWelpWTmxiR1ZqZEc5eUlIMGdabkp2YlNBbmNtVmhZM1F0Y21Wa2RYZ25PMXh1YVcxd2IzSjBJSHRjYmlBZ1RrVlVWMDlTUzE5VVdWQkZVeXhjYmlBZ1FsVkpURlJmU1U1ZlRrVlVWMDlTUzFNc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZibVYwZDI5eWF5YzdYRzVjYm1sdGNHOXlkQ0JNYjJGa2FXNW5TVzVrYVdOaGRHOXlJR1p5YjIwZ0p5NHVMeTR1TDNWcEwyeHZZV1JwYm1jdGFXNWthV05oZEc5eUp6dGNibWx0Y0c5eWRDQkRiMnh2Y2tsdVpHbGpZWFJ2Y2lCbWNtOXRJQ2N1TGk4dUxpOTFhUzlqYjJ4dmNpMXBibVJwWTJGMGIzSW5PMXh1YVcxd2IzSjBJSHRjYmlBZ1FtOXlaR1Z5UTI5c2IzSXNYRzRnSUVsamIyNURiMnh2Y2l4Y2JpQWdVMmw2WlN4Y2JpQWdWSGx3YjJkeVlYQm9lVlpoY21saGJuUXNYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZZMjl1YzNSaGJuUnpMMlJsYzJsbmJpMXplWE4wWlcwbk8xeHVhVzF3YjNKMElFTm9hWEFnWm5KdmJTQW5MaTR2TGk0dmRXa3ZZMmhwY0M5amFHbHdKenRjYm1sdGNHOXlkQ0I3SUhWelpVa3hPRzVEYjI1MFpYaDBJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZhRzl2YTNNdmRYTmxTVEU0YmtOdmJuUmxlSFFuTzF4dWFXMXdiM0owSUhzZ2FYTk9aWFIzYjNKclRHOWhaR2x1WnlCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDNObGJHVmpkRzl5Y3ljN1hHNXBiWEJ2Y25RZ2V5QkpZMjl1TENCSlkyOXVUbUZ0WlN3Z1NXTnZibE5wZW1VZ2ZTQm1jbTl0SUNjdUxpOHVMaTlqYjIxd2IyNWxiblF0YkdsaWNtRnllU2M3WEc1cGJYQnZjblFnZXlCblpYUlFjbTkyYVdSbGNrTnZibVpwWnlCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJSMVkydHpMMjFsZEdGdFlYTnJMMjFsZEdGdFlYTnJKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnVG1WMGQyOXlhMFJwYzNCc1lYa29lMXh1SUNCcGJtUnBZMkYwYjNKVGFYcGxMRnh1SUNCa2FYTmhZbXhsWkN4Y2JpQWdiR0ZpWld4UWNtOXdjeXhjYmlBZ2RHRnlaMlYwVG1WMGQyOXlheXhjYmlBZ2IyNURiR2xqYXl4Y2JuMHBJSHRjYmlBZ1kyOXVjM1FnYm1WMGQyOXlhMGx6VEc5aFpHbHVaeUE5SUhWelpWTmxiR1ZqZEc5eUtHbHpUbVYwZDI5eWEweHZZV1JwYm1jcE8xeHVJQ0JqYjI1emRDQndjbTkyYVdSbGNrTnZibVpwWnlBOUlIVnpaVk5sYkdWamRHOXlLR2RsZEZCeWIzWnBaR1Z5UTI5dVptbG5LVHRjYmlBZ1kyOXVjM1FnZENBOUlIVnpaVWt4T0c1RGIyNTBaWGgwS0NrN1hHNWNiaUFnWTI5dWMzUWdleUJ1YVdOcmJtRnRaU3dnZEhsd1pUb2dibVYwZDI5eWExUjVjR1VnZlNBOUlIUmhjbWRsZEU1bGRIZHZjbXNnUHo4Z2NISnZkbWxrWlhKRGIyNW1hV2M3WEc1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFEyaHBjRnh1SUNBZ0lDQWdaR0YwWVZSbGMzUkpaRDFjSW01bGRIZHZjbXN0WkdsemNHeGhlVndpWEc0Z0lDQWdJQ0JpYjNKa1pYSkRiMnh2Y2oxN1hHNGdJQ0FnSUNBZ0lHOXVRMnhwWTJzZ1B5QkNiM0prWlhKRGIyeHZjaTVpYjNKa1pYSkVaV1poZFd4MElEb2dRbTl5WkdWeVEyOXNiM0l1WW05eVpHVnlUWFYwWldSY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUc5dVEyeHBZMnM5ZTI5dVEyeHBZMnQ5WEc0Z0lDQWdJQ0JzWldaMFNXTnZiajE3WEc0Z0lDQWdJQ0FnSUR4TWIyRmthVzVuU1c1a2FXTmhkRzl5WEc0Z0lDQWdJQ0FnSUNBZ1lXeDBQWHQwS0NkaGRIUmxiWEIwYVc1blEyOXVibVZqZENjcGZWeHVJQ0FnSUNBZ0lDQWdJSFJwZEd4bFBYdDBLQ2RoZEhSbGJYQjBhVzVuUTI5dWJtVmpkQ2NwZlZ4dUlDQWdJQ0FnSUNBZ0lHbHpURzloWkdsdVp6MTdibVYwZDI5eWEwbHpURzloWkdsdVozMWNiaUFnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUR4RGIyeHZja2x1WkdsallYUnZjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k5ZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhSM2IzSnJWSGx3WlNBOVBUMGdUa1ZVVjA5U1MxOVVXVkJGVXk1U1VFTmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JRWxqYjI1RGIyeHZjaTVwWTI5dVRYVjBaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUc1bGRIZHZjbXRVZVhCbFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnphWHBsUFh0cGJtUnBZMkYwYjNKVGFYcGxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVDE3UTI5c2IzSkpibVJwWTJGMGIzSXVWRmxRUlZNdVJrbE1URVZFZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV052YmtOc1lYTnpUbUZ0WlQxN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGRIZHZjbXRVZVhCbElEMDlQU0JPUlZSWFQxSkxYMVJaVUVWVExsSlFReUFtSmlCcGJtUnBZMkYwYjNKVGFYcGxJQ0U5UFNCVGFYcGxMbGhUWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlBblptRWdabUV0Y1hWbGMzUnBiMjRuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lCMWJtUmxabWx1WldSY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQThMMHh2WVdScGJtZEpibVJwWTJGMGIzSStYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlhV2RvZEVsamIyNDllMXh1SUNBZ0lDQWdJQ0J2YmtOc2FXTnJJRDhnUEVsamIyNGdibUZ0WlQxN1NXTnZiazVoYldVdVFYSnliM2RFYjNkdWZTQnphWHBsUFh0SlkyOXVVMmw2WlM1WWMzMGdMejRnT2lCdWRXeHNYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnNZV0psYkQxN1hHNGdJQ0FnSUNBZ0lHNWxkSGR2Y210VWVYQmxJRDA5UFNCT1JWUlhUMUpMWDFSWlVFVlRMbEpRUTF4dUlDQWdJQ0FnSUNBZ0lEOGdibWxqYTI1aGJXVWdQejhnZENnbmNISnBkbUYwWlU1bGRIZHZjbXNuS1Z4dUlDQWdJQ0FnSUNBZ0lEb2dkQ2h1WlhSM2IzSnJWSGx3WlNsY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN1kyeGhjM051WVcxbGN5Z25ibVYwZDI5eWF5MWthWE53YkdGNUp5d2dlMXh1SUNBZ0lDQWdJQ0FuYm1WMGQyOXlheTFrYVhOd2JHRjVMUzFrYVhOaFlteGxaQ2M2SUdScGMyRmliR1ZrTEZ4dUlDQWdJQ0FnSUNBbmJtVjBkMjl5YXkxa2FYTndiR0Y1TFMxamJHbGphMkZpYkdVbk9pQjBlWEJsYjJZZ2IyNURiR2xqYXlBOVBUMGdKMloxYm1OMGFXOXVKeXhjYmlBZ0lDQWdJSDBwZlZ4dUlDQWdJQ0FnYkdGaVpXeFFjbTl3Y3oxN2UxeHVJQ0FnSUNBZ0lDQjJZWEpwWVc1ME9pQlVlWEJ2WjNKaGNHaDVWbUZ5YVdGdWRDNUlOeXhjYmlBZ0lDQWdJQ0FnTGk0dWJHRmlaV3hRY205d2N5eGNiaUFnSUNBZ0lIMTlYRzRnSUNBZ0x6NWNiaUFnS1R0Y2JuMWNiazVsZEhkdmNtdEVhWE53YkdGNUxuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ0x5b3FYRzRnSUNBcUlGUm9aU0J6YVhwbElHOW1JSFJvWlNCcGJtUnBZMkYwYjNKY2JpQWdJQ292WEc0Z0lHbHVaR2xqWVhSdmNsTnBlbVU2SUZCeWIzQlVlWEJsY3k1dmJtVlBaaWhQWW1wbFkzUXVkbUZzZFdWektGTnBlbVVwS1N4Y2JpQWdMeW9xWEc0Z0lDQXFJRlJvWlNCc1lXSmxiQ0J3Y205d2N5QnZaaUIwYUdVZ2JHRmlaV3dnWTJGdUlIVnpaU0J0YjNOMElHOW1JSFJvWlNCVWVYQnZaM0poY0doNUlIQnliM0J6WEc0Z0lDQXFMMXh1SUNCc1lXSmxiRkJ5YjNCek9pQkRhR2x3TG5CeWIzQlVlWEJsY3k1c1lXSmxiRkJ5YjNCekxGeHVJQ0F2S2lwY2JpQWdJQ29nVkdobElIUmhjbWRsZENCdVpYUjNiM0pyWEc0Z0lDQXFMMXh1SUNCMFlYSm5aWFJPWlhSM2IzSnJPaUJRY205d1ZIbHdaWE11YzJoaGNHVW9lMXh1SUNBZ0lIUjVjR1U2SUZCeWIzQlVlWEJsY3k1dmJtVlBaaWhiWEc0Z0lDQWdJQ0F1TGk1UFltcGxZM1F1YTJWNWN5aENWVWxNVkY5SlRsOU9SVlJYVDFKTFV5a3NYRzRnSUNBZ0lDQk9SVlJYVDFKTFgxUlpVRVZUTGxKUVF5eGNiaUFnSUNCZEtTeGNiaUFnSUNCdWFXTnJibUZ0WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdmU2tzWEc0Z0lDOHFLbHh1SUNBZ0tpQlhhR1YwYUdWeUlIUm9aU0JPWlhSM2IzSnJSR2x6Y0d4aGVTQnBjeUJrYVhOaFlteGxaRnh1SUNBZ0tpOWNiaUFnWkdsellXSnNaV1E2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBdktpcGNiaUFnSUNvZ1ZHaGxJRzl1UTJ4cFkyc2daWFpsYm5RZ2FHRnVaR3hsY2lCdlppQjBhR1VnVG1WMGQyOXlhMFJwYzNCc1lYbGNiaUFnSUNvZ2FXWWdhWFFnYVhNZ2JtOTBJSEJoYzNObFpDQnBkQ0JwY3lCaGMzTjFiV1ZrSUhSb1lYUWdkR2hsSUU1bGRIZHZjbXRFYVhOd2JHRjVYRzRnSUNBcUlITm9iM1ZzWkNCdWIzUWdZbVVnYVc1MFpYSmhZM1JwZG1VZ1lXNWtJSEpsYlc5MlpYTWdkR2hsSUdOaGNtVjBJR0Z1WkNCamFHRnVaMlZ6SUhSb1pTQmliM0prWlhJZ1kyOXNiM0pjYmlBZ0lDb2diMllnZEdobElFNWxkSGR2Y210RWFYTndiR0Y1WEc0Z0lDQXFMMXh1SUNCdmJrTnNhV05yT2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYm4wN1hHNWNiazVsZEhkdmNtdEVhWE53YkdGNUxtUmxabUYxYkhSUWNtOXdjeUE5SUh0Y2JpQWdhVzVrYVdOaGRHOXlVMmw2WlRvZ1UybDZaUzVNUnl4Y2JuMDdYRzRpTENKbGVIQnZjblFnZXlCa1pXWmhkV3gwSUgwZ1puSnZiU0FuTGk5dVpuUXRaR1ZtWVhWc2RDMXBiV0ZuWlNjN1hHNGlMQ0pwYlhCdmNuUWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JqYkdGemMyNWhiV1Z6SUdaeWIyMGdKMk5zWVhOemJtRnRaWE1uTzF4dWFXMXdiM0owSUhzZ1ZHVjRkRlpoY21saGJuUWdmU0JtY205dElDY3VMaTh1TGk4dUxpOW9aV3h3WlhKekwyTnZibk4wWVc1MGN5OWtaWE5wWjI0dGMzbHpkR1Z0Snp0Y2JtbHRjRzl5ZENCN0lIVnpaVWt4T0c1RGIyNTBaWGgwSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2YUc5dmEzTXZkWE5sU1RFNGJrTnZiblJsZUhRbk8xeHVhVzF3YjNKMElIc2dWR1Y0ZENCOUlHWnliMjBnSnk0dUx5NHVMMk52YlhCdmJtVnVkQzFzYVdKeVlYSjVKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnVG1aMFJHVm1ZWFZzZEVsdFlXZGxLSHNnYm1GdFpTd2dkRzlyWlc1SlpDd2dhR0Z1Wkd4bFNXMWhaMlZEYkdsamF5QjlLU0I3WEc0Z0lHTnZibk4wSUhRZ1BTQjFjMlZKTVRodVEyOXVkR1Y0ZENncE8xeHVJQ0JqYjI1emRDQlVZV2NnUFNCb1lXNWtiR1ZKYldGblpVTnNhV05ySUQ4Z0oySjFkSFJ2YmljZ09pQW5aR2wySnp0Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFZHRm5YRzRnSUNBZ0lDQjBZV0pKYm1SbGVEMTdNSDFjYmlBZ0lDQWdJR1JoZEdFdGRHVnpkR2xrUFZ3aWJtWjBMV1JsWm1GMWJIUXRhVzFoWjJWY0lseHVJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGpiR0Z6YzI1aGJXVnpLQ2R1Wm5RdFpHVm1ZWFZzZENjc0lIdGNiaUFnSUNBZ0lDQWdKMjVtZEMxa1pXWmhkV3gwTFMxamJHbGphMkZpYkdVbk9pQm9ZVzVrYkdWSmJXRm5aVU5zYVdOckxGeHVJQ0FnSUNBZ2ZTbDlYRzRnSUNBZ0lDQnZia05zYVdOclBYdG9ZVzVrYkdWSmJXRm5aVU5zYVdOcmZWeHVJQ0FnSUQ1Y2JpQWdJQ0FnSUR4VVpYaDBJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbFRiWDBnWVhNOVhDSm9ObHdpSUdOc1lYTnpUbUZ0WlQxY0ltNW1kQzFrWldaaGRXeDBYMTkwWlhoMFhDSStYRzRnSUNBZ0lDQWdJSHR1WVcxbElEOC9JSFFvSjNWdWEyNXZkMjVEYjJ4c1pXTjBhVzl1SnlsOUlEeGljaUF2UGlBamUzUnZhMlZ1U1dSOVhHNGdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdQQzlVWVdjK1hHNGdJQ2s3WEc1OVhHNWNiazVtZEVSbFptRjFiSFJKYldGblpTNXdjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR1VnYm1GdFpTQnZaaUIwYUdVZ1RrWlVJR052Ykd4bFkzUnBiMjRnYVdZZ2JtOTBJSE4xY0hCc2FXVmtJSGRwYkd3Z1pHVm1ZWFZzZENCMGJ5QmNJbFZ1Ym1GdFpXUWdZMjlzYkdWamRHbHZibHdpWEc0Z0lDQXFMMXh1SUNCdVlXMWxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBdktpcGNiaUFnSUNvZ1ZHaGxJSFJ2YTJWdUlHbGtJRzltSUhSb1pTQnVablJjYmlBZ0lDb3ZYRzRnSUhSdmEyVnVTV1E2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR1VnWTJ4cFkyc2dhR0Z1Wkd4bGNpQm1iM0lnZEdobElFNUdWQ0JrWldaaGRXeDBJR2x0WVdkbFhHNGdJQ0FxTDF4dUlDQm9ZVzVrYkdWSmJXRm5aVU5zYVdOck9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JuMDdYRzRpTENKcGJYQnZjblFnVW1WaFkzUXNJSHNnZFhObFJXWm1aV04wSUgwZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0I3SUhWelpVUnBjM0JoZEdOb0xDQjFjMlZUWld4bFkzUnZjaUI5SUdaeWIyMGdKM0psWVdOMExYSmxaSFY0Snp0Y2JtbHRjRzl5ZENCN0lIVnpaVWhwYzNSdmNua2dmU0JtY205dElDZHlaV0ZqZEMxeWIzVjBaWEl0Wkc5dEp6dGNibWx0Y0c5eWRDQjdJR2x6UlhGMVlXd2dmU0JtY205dElDZHNiMlJoYzJnbk8xeHVhVzF3YjNKMElFSnZlQ0JtY205dElDY3VMaTh1TGk5MWFTOWliM2duTzF4dWFXMXdiM0owSUVOaGNtUWdabkp2YlNBbkxpNHZMaTR2ZFdrdlkyRnlaQ2M3WEc1cGJYQnZjblFnZTF4dUlDQlVaWGgwUTI5c2IzSXNYRzRnSUVsamIyNURiMnh2Y2l4Y2JpQWdWR1Y0ZEZaaGNtbGhiblFzWEc0Z0lFWnZiblJYWldsbmFIUXNYRzRnSUVwMWMzUnBabmxEYjI1MFpXNTBMRnh1SUNCR1RFVllYMFJKVWtWRFZFbFBUaXhjYmlBZ1QzWmxjbVpzYjNkWGNtRndMRnh1SUNCRVNWTlFURUZaTEZ4dUlDQkNURTlEUzE5VFNWcEZVeXhjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2YUdWc2NHVnljeTlqYjI1emRHRnVkSE12WkdWemFXZHVMWE41YzNSbGJTYzdYRzVwYlhCdmNuUWdleUIxYzJWSk1UaHVRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyaHZiMnR6TDNWelpVa3hPRzVEYjI1MFpYaDBKenRjYm1sdGNHOXlkQ0I3WEc0Z0lHWnZjbTFoZEVSaGRHVXNYRzRnSUdkbGRFRnpjMlYwU1cxaFoyVlZVa3dzWEc0Z0lITm9iM0owWlc1QlpHUnlaWE56TEZ4dWZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5b1pXeHdaWEp6TDNWMGFXeHpMM1YwYVd3bk8xeHVhVzF3YjNKMElIc2daMlYwVG1aMFNXMWhaMlZCYkhRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5b1pXeHdaWEp6TDNWMGFXeHpMMjVtZEhNbk8xeHVhVzF3YjNKMElIdGNiaUFnWjJWMFEzVnljbVZ1ZEVOb1lXbHVTV1FzWEc0Z0lHZGxkRWx3Wm5OSFlYUmxkMkY1TEZ4dUlDQm5aWFJUWld4bFkzUmxaRWxrWlc1MGFYUjVMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6Wld4bFkzUnZjbk1uTzF4dWFXMXdiM0owSUVGemMyVjBUbUYyYVdkaGRHbHZiaUJtY205dElDY3VMaTh1TGk4dUxpOXdZV2RsY3k5aGMzTmxkQzlqYjIxd2IyNWxiblJ6TDJGemMyVjBMVzVoZG1sbllYUnBiMjRuTzF4dWFXMXdiM0owSUhzZ1oyVjBUbVowUTI5dWRISmhZM1J6SUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2WkhWamEzTXZiV1YwWVcxaGMyc3ZiV1YwWVcxaGMyc25PMXh1YVcxd2IzSjBJSHNnUkVWR1FWVk1WRjlTVDFWVVJTd2dVMFZPUkY5U1QxVlVSU0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZZMjl1YzNSaGJuUnpMM0p2ZFhSbGN5YzdYRzVwYlhCdmNuUWdlMXh1SUNCamFHVmphMEZ1WkZWd1pHRjBaVk5wYm1kc1pVNW1kRTkzYm1WeWMyaHBjRk4wWVhSMWN5eGNiaUFnY21WdGIzWmxRVzVrU1dkdWIzSmxUbVowTEZ4dUlDQnpaWFJTWlcxdmRtVk9ablJOWlhOellXZGxMRnh1SUNCelpYUk9aWGRPWm5SQlpHUmxaRTFsYzNOaFoyVXNYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMM04wYjNKbEwyRmpkR2x2Ym5Nbk8xeHVhVzF3YjNKMElIc2dRMGhCU1U1ZlNVUlRJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2YzJoaGNtVmtMMk52Ym5OMFlXNTBjeTl1WlhSM2IzSnJKenRjYm1sdGNHOXlkQ0I3SUdkbGRFVnVkbWx5YjI1dFpXNTBWSGx3WlNCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyRndjQzl6WTNKcGNIUnpMMnhwWWk5MWRHbHNKenRjYm1sdGNHOXlkQ0I3SUVWT1ZrbFNUMDVOUlU1VVgxUlpVRVZmVUU5UVZWQWdmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMMkZ3Y0NjN1hHNXBiWEJ2Y25RZ1RtWjBUM0IwYVc5dWN5Qm1jbTl0SUNjdUxpOXVablF0YjNCMGFXOXVjeTl1Wm5RdGIzQjBhVzl1Y3ljN1hHNXBiWEJ2Y25RZ1FuVjBkRzl1SUdaeWIyMGdKeTR1THk0dUwzVnBMMkoxZEhSdmJpYzdYRzVwYlhCdmNuUWdleUJ6ZEdGeWRFNWxkMFJ5WVdaMFZISmhibk5oWTNScGIyNGdmU0JtY205dElDY3VMaTh1TGk4dUxpOWtkV05yY3k5elpXNWtKenRjYm1sdGNHOXlkQ0JKYm1adlZHOXZiSFJwY0NCbWNtOXRJQ2N1TGk4dUxpOTFhUzlwYm1adkxYUnZiMngwYVhBbk8xeHVhVzF3YjNKMElIc2dkWE5sVUhKbGRtbHZkWE1nZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlvYjI5cmN5OTFjMlZRY21WMmFXOTFjeWM3WEc1cGJYQnZjblFnZXlCMWMyVkRiM0I1Vkc5RGJHbHdZbTloY21RZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5b2IyOXJjeTkxYzJWRGIzQjVWRzlEYkdsd1ltOWhjbVFuTzF4dWFXMXdiM0owSUhzZ2FYTkZjWFZoYkVOaGMyVkpibk5sYm5OcGRHbDJaU0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNOb1lYSmxaQzl0YjJSMWJHVnpMM04wY21sdVp5MTFkR2xzY3ljN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JCYzNObGRGUjVjR1VzWEc0Z0lGUnZhMlZ1VTNSaGJtUmhjbVFzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmRISmhibk5oWTNScGIyNG5PMXh1YVcxd2IzSjBJRTVtZEVSbFptRjFiSFJKYldGblpTQm1jbTl0SUNjdUxpOXVablF0WkdWbVlYVnNkQzFwYldGblpTYzdYRzVwYlhCdmNuUWdleUJDZFhSMGIyNUpZMjl1TENCSlkyOXVUbUZ0WlN3Z1ZHVjRkQ0I5SUdaeWIyMGdKeTR1THk0dUwyTnZiWEJ2Ym1WdWRDMXNhV0p5WVhKNUp6dGNibWx0Y0c5eWRDQlViMjlzZEdsd0lHWnliMjBnSnk0dUx5NHVMM1ZwTDNSdmIyeDBhWEFuTzF4dWFXMXdiM0owSUhzZ1pHVmpWMFZKVkc5RVpXTkZWRWdnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2Ylc5a2RXeGxjeTlqYjI1MlpYSnphVzl1TG5WMGFXeHpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnVG1aMFJHVjBZV2xzY3loN0lHNW1kQ0I5S1NCN1hHNGdJR052Ym5OMElIdGNiaUFnSUNCcGJXRm5aU3hjYmlBZ0lDQnBiV0ZuWlU5eWFXZHBibUZzTEZ4dUlDQWdJRzVoYldVc1hHNGdJQ0FnWkdWelkzSnBjSFJwYjI0c1hHNGdJQ0FnWVdSa2NtVnpjeXhjYmlBZ0lDQjBiMnRsYmtsa0xGeHVJQ0FnSUhOMFlXNWtZWEprTEZ4dUlDQWdJR2x6UTNWeWNtVnVkR3g1VDNkdVpXUXNYRzRnSUNBZ2JHRnpkRk5oYkdVc1hHNGdJQ0FnYVcxaFoyVlVhSFZ0WW01aGFXd3NYRzRnSUgwZ1BTQnVablE3WEc0Z0lHTnZibk4wSUhRZ1BTQjFjMlZKTVRodVEyOXVkR1Y0ZENncE8xeHVJQ0JqYjI1emRDQm9hWE4wYjNKNUlEMGdkWE5sU0dsemRHOXllU2dwTzF4dUlDQmpiMjV6ZENCa2FYTndZWFJqYUNBOUlIVnpaVVJwYzNCaGRHTm9LQ2s3WEc0Z0lHTnZibk4wSUdsd1puTkhZWFJsZDJGNUlEMGdkWE5sVTJWc1pXTjBiM0lvWjJWMFNYQm1jMGRoZEdWM1lYa3BPMXh1SUNCamIyNXpkQ0J1Wm5SRGIyNTBjbUZqZEhNZ1BTQjFjMlZUWld4bFkzUnZjaWhuWlhST1puUkRiMjUwY21GamRITXBPMXh1SUNCamIyNXpkQ0JqZFhKeVpXNTBUbVYwZDI5eWF5QTlJSFZ6WlZObGJHVmpkRzl5S0dkbGRFTjFjbkpsYm5SRGFHRnBia2xrS1R0Y2JpQWdZMjl1YzNRZ1cyRmtaSEpsYzNORGIzQnBaV1FzSUdoaGJtUnNaVUZrWkhKbGMzTkRiM0I1WFNBOUlIVnpaVU52Y0hsVWIwTnNhWEJpYjJGeVpDZ3BPMXh1WEc0Z0lHTnZibk4wSUc1bWRFTnZiblJ5WVdOMFRtRnRaU0E5SUc1bWRFTnZiblJ5WVdOMGN5NW1hVzVrS0NoN0lHRmtaSEpsYzNNNklHTnZiblJ5WVdOMFFXUmtjbVZ6Y3lCOUtTQTlQbHh1SUNBZ0lHbHpSWEYxWVd4RFlYTmxTVzV6Wlc1emFYUnBkbVVvWTI5dWRISmhZM1JCWkdSeVpYTnpMQ0JoWkdSeVpYTnpLU3hjYmlBZ0tUOHVibUZ0WlR0Y2JpQWdZMjl1YzNRZ2MyVnNaV04wWldSQlkyTnZkVzUwVG1GdFpTQTlJSFZ6WlZObGJHVmpkRzl5S0Z4dUlDQWdJQ2h6ZEdGMFpTa2dQVDRnWjJWMFUyVnNaV04wWldSSlpHVnVkR2wwZVNoemRHRjBaU2t1Ym1GdFpTeGNiaUFnS1R0Y2JpQWdZMjl1YzNRZ2JtWjBTVzFoWjJWQmJIUWdQU0JuWlhST1puUkpiV0ZuWlVGc2RDaHVablFwTzF4dUlDQmpiMjV6ZENCdVpuUkpiV0ZuWlZWU1RDQTlJR2RsZEVGemMyVjBTVzFoWjJWVlVrd29hVzFoWjJWUGNtbG5hVzVoYkNBL1B5QnBiV0ZuWlN3Z2FYQm1jMGRoZEdWM1lYa3BPMXh1SUNCamIyNXpkQ0JwYzBSaGRHRlZVa2tnUFNCdVpuUkpiV0ZuWlZWU1RDNXpkR0Z5ZEhOWGFYUm9LQ2RrWVhSaE9pY3BPMXh1WEc0Z0lHTnZibk4wSUdadmNtMWhkSFJsWkZScGJXVnpkR0Z0Y0NBOUlHWnZjbTFoZEVSaGRHVW9YRzRnSUNBZ2JtVjNJRVJoZEdVb2JHRnpkRk5oYkdVL0xtVjJaVzUwWDNScGJXVnpkR0Z0Y0NrdVoyVjBWR2x0WlNncExGeHVJQ0FnSUNkTkwyUXZlU2NzWEc0Z0lDazdYRzVjYmlBZ1kyOXVjM1FnYjI1U1pXMXZkbVVnUFNBb0tTQTlQaUI3WEc0Z0lDQWdaR2x6Y0dGMFkyZ29jbVZ0YjNabFFXNWtTV2R1YjNKbFRtWjBLR0ZrWkhKbGMzTXNJSFJ2YTJWdVNXUXBLVHRjYmlBZ0lDQmthWE53WVhSamFDaHpaWFJPWlhkT1puUkJaR1JsWkUxbGMzTmhaMlVvSnljcEtUdGNiaUFnSUNCa2FYTndZWFJqYUNoelpYUlNaVzF2ZG1WT1puUk5aWE56WVdkbEtDZHpkV05qWlhOekp5a3BPMXh1SUNBZ0lHaHBjM1J2Y25rdWNIVnphQ2hFUlVaQlZVeFVYMUpQVlZSRktUdGNiaUFnZlR0Y2JseHVJQ0JqYjI1emRDQndjbVYyVG1aMElEMGdkWE5sVUhKbGRtbHZkWE1vYm1aMEtUdGNiaUFnZFhObFJXWm1aV04wS0NncElEMCtJSHRjYmlBZ0lDQnBaaUFvSVdselJYRjFZV3dvY0hKbGRrNW1kQ3dnYm1aMEtTa2dlMXh1SUNBZ0lDQWdZMmhsWTJ0QmJtUlZjR1JoZEdWVGFXNW5iR1ZPWm5SUGQyNWxjbk5vYVhCVGRHRjBkWE1vYm1aMEtUdGNiaUFnSUNCOVhHNGdJSDBzSUZ0dVpuUXNJSEJ5WlhaT1puUmRLVHRjYmx4dUlDQmpiMjV6ZENCblpYUlBjR1Z1VTJWaFRHbHVheUE5SUNncElEMCtJSHRjYmlBZ0lDQnpkMmwwWTJnZ0tHTjFjbkpsYm5ST1pYUjNiM0pyS1NCN1hHNGdJQ0FnSUNCallYTmxJRU5JUVVsT1gwbEVVeTVOUVVsT1RrVlVPbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZR2gwZEhCek9pOHZiM0JsYm5ObFlTNXBieTloYzNObGRITXZKSHRoWkdSeVpYTnpmUzhrZTNSdmEyVnVTV1I5WUR0Y2JpQWdJQ0FnSUdOaGMyVWdRMGhCU1U1ZlNVUlRMbEJQVEZsSFQwNDZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmdhSFIwY0hNNkx5OXZjR1Z1YzJWaExtbHZMMkZ6YzJWMGN5OXRZWFJwWXk4a2UyRmtaSEpsYzNOOUx5UjdkRzlyWlc1SlpIMWdPMXh1SUNBZ0lDQWdZMkZ6WlNCRFNFRkpUbDlKUkZNdVIwOUZVa3hKT2x4dUlDQWdJQ0FnWTJGelpTQkRTRUZKVGw5SlJGTXVVMFZRVDB4SlFUcGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHQm9kSFJ3Y3pvdkwzUmxjM1J1WlhSekxtOXdaVzV6WldFdWFXOHZZWE56WlhSekx5UjdZV1JrY21WemMzMHZKSHQwYjJ0bGJrbGtmV0E3WEc0Z0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ1kyOXVjM1FnYjNCbGJsTmxZVXhwYm1zZ1BTQm5aWFJQY0dWdVUyVmhUR2x1YXlncE8xeHVJQ0JqYjI1emRDQnpaVzVrUkdsellXSnNaV1FnUFNCemRHRnVaR0Z5WkNBaFBUMGdWRzlyWlc1VGRHRnVaR0Z5WkM1RlVrTTNNakU3WEc0Z0lHTnZibk4wSUdsdVVHOXdWWEFnUFNCblpYUkZiblpwY205dWJXVnVkRlI1Y0dVb0tTQTlQVDBnUlU1V1NWSlBUazFGVGxSZlZGbFFSVjlRVDFCVlVEdGNibHh1SUNCamIyNXpkQ0J2YmxObGJtUWdQU0JoYzNsdVl5QW9LU0E5UGlCN1hHNGdJQ0FnWVhkaGFYUWdaR2x6Y0dGMFkyZ29YRzRnSUNBZ0lDQnpkR0Z5ZEU1bGQwUnlZV1owVkhKaGJuTmhZM1JwYjI0b2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lCQmMzTmxkRlI1Y0dVdVRrWlVMRnh1SUNBZ0lDQWdJQ0JrWlhSaGFXeHpPaUJ1Wm5Rc1hHNGdJQ0FnSUNCOUtTeGNiaUFnSUNBcE8xeHVJQ0FnSUdocGMzUnZjbmt1Y0hWemFDaFRSVTVFWDFKUFZWUkZLVHRjYmlBZ2ZUdGNibHh1SUNCamIyNXpkQ0J5Wlc1a1pYSlRaVzVrUW5WMGRHOXVJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2hwYzBOMWNuSmxiblJzZVU5M2JtVmtJRDA5UFNCbVlXeHpaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRHhrYVhZZ2MzUjViR1U5ZTNzZ2FHVnBaMmgwT2lBbk16QndlQ2NnZlgwZ0x6NDdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4UW05NFhHNGdJQ0FnSUNBZ0lHUnBjM0JzWVhrOWUwUkpVMUJNUVZrdVJreEZXSDFjYmlBZ0lDQWdJQ0FnZDJsa2RHZzllMmx1VUc5d1ZYQWdQeUJDVEU5RFMxOVRTVnBGVXk1R1ZVeE1JRG9nUWt4UFEwdGZVMGxhUlZNdVNFRk1SbjFjYmlBZ0lDQWdJQ0FnYldGeVoybHVQWHRwYmxCdmNGVndJRDhnV3pRc0lEQmRJRG9nYm5Wc2JIMWNiaUFnSUNBZ0lENWNiaUFnSUNBZ0lDQWdQRUoxZEhSdmJseHVJQ0FnSUNBZ0lDQWdJSFI1Y0dVOVhDSndjbWx0WVhKNVhDSmNiaUFnSUNBZ0lDQWdJQ0J2YmtOc2FXTnJQWHR2YmxObGJtUjlYRzRnSUNBZ0lDQWdJQ0FnWkdsellXSnNaV1E5ZTNObGJtUkVhWE5oWW14bFpIMWNiaUFnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKdVpuUXRaR1YwWVdsc2MxOWZjMlZ1WkMxaWRYUjBiMjVjSWx4dUlDQWdJQ0FnSUNBZ0lHUmhkR0V0ZEdWemRHbGtQVndpYm1aMExYTmxibVF0WW5WMGRHOXVYQ0pjYmlBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lIdDBLQ2R6Wlc1a0p5bDlYRzRnSUNBZ0lDQWdJRHd2UW5WMGRHOXVQbHh1SUNBZ0lDQWdJQ0I3YzJWdVpFUnBjMkZpYkdWa0lEOGdLRnh1SUNBZ0lDQWdJQ0FnSUR4SmJtWnZWRzl2YkhScGNDQndiM05wZEdsdmJqMWNJblJ2Y0Z3aUlHTnZiblJsYm5SVVpYaDBQWHQwS0NkelpXNWthVzVuUkdsellXSnNaV1FuS1gwZ0x6NWNiaUFnSUNBZ0lDQWdLU0E2SUc1MWJHeDlYRzRnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0FwTzF4dUlDQjlPMXh1WEc0Z0lISmxkSFZ5YmlBb1hHNGdJQ0FnUEQ1Y2JpQWdJQ0FnSUR4QmMzTmxkRTVoZG1sbllYUnBiMjVjYmlBZ0lDQWdJQ0FnWVdOamIzVnVkRTVoYldVOWUzTmxiR1ZqZEdWa1FXTmpiM1Z1ZEU1aGJXVjlYRzRnSUNBZ0lDQWdJR0Z6YzJWMFRtRnRaVDE3Ym1aMFEyOXVkSEpoWTNST1lXMWxmVnh1SUNBZ0lDQWdJQ0J2YmtKaFkyczlleWdwSUQwK0lHaHBjM1J2Y25rdWNIVnphQ2hFUlVaQlZVeFVYMUpQVlZSRktYMWNiaUFnSUNBZ0lDQWdiM0IwYVc5dWMwSjFkSFJ2YmoxN1hHNGdJQ0FnSUNBZ0lDQWdQRTVtZEU5d2RHbHZibk5jYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVWbWxsZDA5dVQzQmxibk5sWVQxN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d1pXNVRaV0ZNYVc1clhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5QW9LU0E5UGlCbmJHOWlZV3d1Y0d4aGRHWnZjbTB1YjNCbGJsUmhZaWg3SUhWeWJEb2diM0JsYmxObFlVeHBibXNnZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklHNTFiR3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVVtVnRiM1psUFh0dmJsSmxiVzkyWlgxY2JpQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0F2UGx4dUlDQWdJQ0FnUEVKdmVDQmpiR0Z6YzA1aGJXVTlYQ0p1Wm5RdFpHVjBZV2xzYzF3aVBseHVJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0ltNW1kQzFrWlhSaGFXeHpYMTkwYjNBdGMyVmpkR2x2Ymx3aVBseHVJQ0FnSUNBZ0lDQWdJRHhEWVhKa1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3WVdSa2FXNW5QWHN3ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhblZ6ZEdsbWVVTnZiblJsYm5ROWUwcDFjM1JwWm5sRGIyNTBaVzUwTG1ObGJuUmxjbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbTVtZEMxa1pYUmhhV3h6WDE5allYSmtYQ0pjYmlBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3YVcxaFoyVWdQeUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHhwYldkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnVablF0WkdWMFlXbHNjMTlmYVcxaFoyVmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE55WXoxN2JtWjBTVzFoWjJWVlVreDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV3gwUFh0dVpuUkpiV0ZuWlVGc2RIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNrZ09pQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeE9ablJFWldaaGRXeDBTVzFoWjJVZ2JtRnRaVDE3Ym1GdFpYMGdkRzlyWlc1SlpEMTdkRzlyWlc1SlpIMGdMejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQWdJQ0FnUEM5RFlYSmtQbHh1SUNBZ0lDQWdJQ0FnSUR4Q2IzaGNiaUFnSUNBZ0lDQWdJQ0FnSUdac1pYaEVhWEpsWTNScGIyNDllMFpNUlZoZlJFbFNSVU5VU1U5T0xrTlBURlZOVG4xY2JpQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW01bWRDMWtaWFJoYVd4elgxOXBibVp2WENKY2JpQWdJQ0FnSUNBZ0lDQWdJR3AxYzNScFpubERiMjUwWlc1MFBYdEtkWE4wYVdaNVEyOXVkR1Z1ZEM1emNHRmpaVUpsZEhkbFpXNTlYRzRnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQR1JwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEZSbGVIUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxN1ZHVjRkRU52Ykc5eUxuUmxlSFJFWldaaGRXeDBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1obFlXUnBibWRUYlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGN6MWNJbWcwWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIyNTBWMlZwWjJoMFBYdEdiMjUwVjJWcFoyaDBMa0p2YkdSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRnlaMmx1UW05MGRHOXRQWHN5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTI1aGJXVjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZWR1Y0ZEQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEZSbGVIUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxN1ZHVjRkRU52Ykc5eUxuUmxlSFJOZFhSbFpIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdFVaWGgwVm1GeWFXRnVkQzVpYjJSNVRXUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWE05WENKb05Wd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Z5WjJsdVFtOTBkRzl0UFhzMGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOTJaWEptYkc5M1YzSmhjRDE3VDNabGNtWnNiM2RYY21Gd0xrSnlaV0ZyVjI5eVpIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDTjdkRzlyWlc1SlpIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BDOVVaWGgwUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3WkdWelkzSnBjSFJwYjI0Z1B5QW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGthWFkrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEZSbGVIUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eVBYdFVaWGgwUTI5c2IzSXVkR1Y0ZEVSbFptRjFiSFI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSnBZVzUwUFh0VVpYaDBWbUZ5YVdGdWRDNWliMlI1VTIxQ2IyeGtmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhNOVhDSm9ObHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYSm5hVzVDYjNSMGIyMDlleko5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnVablF0WkdWMFlXbHNjMTlmWkdWelkzSnBjSFJwYjI1Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHQwS0Nka1pYTmpjbWx3ZEdsdmJpY3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2VkdWNGRENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThWR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k5ZTFSbGVIUkRiMnh2Y2k1MFpYaDBRV3gwWlhKdVlYUnBkbVY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSnBZVzUwUFh0VVpYaDBWbUZ5YVdGdWRDNWliMlI1VTIxOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjejFjSW1nMlhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzkyWlhKbWJHOTNWM0poY0QxN1QzWmxjbVpzYjNkWGNtRndMa0p5WldGclYyOXlaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGNtZHBia0p2ZEhSdmJUMTdOSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN1pHVnpZM0pwY0hScGIyNTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlVWlhoMFBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDa2dPaUJ1ZFd4c2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZTJsdVVHOXdWWEFnUHlCdWRXeHNJRG9nY21WdVpHVnlVMlZ1WkVKMWRIUnZiaWdwZlZ4dUlDQWdJQ0FnSUNBZ0lEd3ZRbTk0UGx4dUlDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnUEVKdmVDQnRZWEpuYVc1Q2IzUjBiMjA5ZXpKOVBseHVJQ0FnSUNBZ0lDQWdJSHRzWVhOMFUyRnNaU0EvSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJRHcrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHhDYjNnZ1pHbHpjR3hoZVQxN1JFbFRVRXhCV1M1R1RFVllmU0JtYkdWNFJHbHlaV04wYVc5dVBYdEdURVZZWDBSSlVrVkRWRWxQVGk1U1QxZDlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhVWlhoMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxN1ZHVjRkRU52Ykc5eUxuUmxlSFJFWldaaGRXeDBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeWFXRnVkRDE3VkdWNGRGWmhjbWxoYm5RdVltOWtlVk50UW05c1pIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z6UFZ3aWFEWmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGeVoybHVRbTkwZEc5dFBYczBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGeVoybHVVbWxuYUhROWV6SjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKdVpuUXRaR1YwWVdsc2MxOWZiR2x1YXkxMGFYUnNaVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UzUW9KMnhoYzNSVGIyeGtKeWw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5VVpYaDBQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhDYjNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjM0JzWVhrOWUwUkpVMUJNUVZrdVJreEZXSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdac1pYaEVhWEpsWTNScGIyNDllMFpNUlZoZlJFbFNSVU5VU1U5T0xsSlBWMzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltNW1kQzFrWlhSaGFXeHpYMTlqYjI1MGNtRmpkQzEzY21Gd2NHVnlYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFZHVjRkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyeHZjajE3VkdWNGRFTnZiRzl5TG5SbGVIUkJiSFJsY201aGRHbDJaWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlhV0Z1ZEQxN1ZHVjRkRlpoY21saGJuUXVZbTlrZVZOdGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY3oxY0ltZzJYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzWmxjbVpzYjNkWGNtRndQWHRQZG1WeVpteHZkMWR5WVhBdVFuSmxZV3RYYjNKa2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhKbmFXNUNiM1IwYjIwOWV6UjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdG1iM0p0WVhSMFpXUlVhVzFsYzNSaGJYQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDFSbGVIUStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThRbTk0SUdScGMzQnNZWGs5ZTBSSlUxQk1RVmt1Umt4RldIMGdabXhsZUVScGNtVmpkR2x2YmoxN1JreEZXRjlFU1ZKRlExUkpUMDR1VWs5WGZUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThWR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k5ZTFSbGVIUkRiMnh2Y2k1MFpYaDBSR1ZtWVhWc2RIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbFRiVUp2YkdSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjejFjSW1nMlhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFoY21kcGJrSnZkSFJ2YlQxN05IMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFoY21kcGJsSnBaMmgwUFhzeWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQVndpYm1aMExXUmxkR0ZwYkhOZlgyeHBibXN0ZEdsMGJHVmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0MEtDZHNZWE4wVUhKcFkyVlRiMnhrSnlsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOVVaWGgwUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4Q2IzaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwYzNCc1lYazllMFJKVTFCTVFWa3VSa3hGV0gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnNaWGhFYVhKbFkzUnBiMjQ5ZTBaTVJWaGZSRWxTUlVOVVNVOU9MbEpQVjMxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbTVtZEMxa1pYUmhhV3h6WDE5amIyNTBjbUZqZEMxM2NtRndjR1Z5WENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThWR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxN1ZHVjRkRU52Ykc5eUxuUmxlSFJCYkhSbGNtNWhkR2wyWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5YVdGdWREMTdWR1Y0ZEZaaGNtbGhiblF1WW05a2VWTnRmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGN6MWNJbWcyWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM1psY21ac2IzZFhjbUZ3UFh0UGRtVnlabXh2ZDFkeVlYQXVRbkpsWVd0WGIzSmtmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYSm5hVzVDYjNSMGIyMDllelI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRnSkh0T2RXMWlaWElvWkdWalYwVkpWRzlFWldORlZFZ29iR0Z6ZEZOaGJHVXVkRzkwWVd4ZmNISnBZMlVwS1gwZ0pIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1lYTjBVMkZzWlM1d1lYbHRaVzUwWDNSdmEyVnVMbk41YldKdmJGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZWR1Y0ZEQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwwSnZlRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4THo1Y2JpQWdJQ0FnSUNBZ0lDQXBJRG9nYm5Wc2JIMWNiaUFnSUNBZ0lDQWdJQ0E4UW05NElHUnBjM0JzWVhrOWUwUkpVMUJNUVZrdVJreEZXSDBnWm14bGVFUnBjbVZqZEdsdmJqMTdSa3hGV0Y5RVNWSkZRMVJKVDA0dVVrOVhmVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeFVaWGgwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eVBYdFVaWGgwUTI5c2IzSXVkR1Y0ZEVSbFptRjFiSFI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbFRiVUp2YkdSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdGelBWd2lhRFpjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhKbmFXNUNiM1IwYjIwOWV6UjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhjbWRwYmxKcFoyaDBQWHN5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKdVpuUXRaR1YwWVdsc2MxOWZiR2x1YXkxMGFYUnNaVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIdDBLQ2R6YjNWeVkyVW5LWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZWR1Y0ZEQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhVWlhoMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNtbGhiblE5ZTFSbGVIUldZWEpwWVc1MExtSnZaSGxUYlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhNOVhDSm9ObHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzFoY21kcGJrSnZkSFJ2YlQxN05IMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2libVowTFdSbGRHRnBiSE5mWDJsdFlXZGxMWE52ZFhKalpWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5UFh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGMwUmhkR0ZWVWtrZ1B5QlVaWGgwUTI5c2IzSXVkR1Y0ZEVSbFptRjFiSFFnT2lCVVpYaDBRMjlzYjNJdWNISnBiV0Z5ZVVSbFptRjFiSFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2FYTkVZWFJoVlZKSklEOGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHcrZTI1bWRFbHRZV2RsVlZKTWZUd3ZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXBJRG9nS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4aFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhROVhDSmZZbXhoYm10Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZzUFZ3aWJtOXZjR1Z1WlhJZ2JtOXlaV1psY25KbGNsd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvY21WbVBYdHVablJKYldGblpWVlNUSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhScGRHeGxQWHR1Wm5SSmJXRm5aVlZTVEgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdibVowU1cxaFoyVlZVa3g5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5aFBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5VVpYaDBQbHh1SUNBZ0lDQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdJQ0FnSUh0cGJXRm5aVlJvZFcxaWJtRnBiQ0EvSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJRHhDYjNnZ1pHbHpjR3hoZVQxN1JFbFRVRXhCV1M1R1RFVllmU0JtYkdWNFJHbHlaV04wYVc5dVBYdEdURVZZWDBSSlVrVkRWRWxQVGk1U1QxZDlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThWR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlQWHRVWlhoMFEyOXNiM0l1ZEdWNGRFUmxabUYxYkhSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlhV0Z1ZEQxN1ZHVjRkRlpoY21saGJuUXVZbTlrZVZOdFFtOXNaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY3oxY0ltZzJYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhKbmFXNUNiM1IwYjIwOWV6UjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Z5WjJsdVVtbG5hSFE5ZXpKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2libVowTFdSbGRHRnBiSE5mWDJ4cGJtc3RkR2wwYkdWY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UzUW9KMnhwYm1zbktYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BDOVVaWGgwUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4VkdWNGRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjbWxoYm5ROWUxUmxlSFJXWVhKcFlXNTBMbUp2WkhsVGJYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjejFjSW1nMlhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWEpuYVc1Q2IzUjBiMjA5ZXpSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2libVowTFdSbGRHRnBiSE5mWDJsdFlXZGxMWE52ZFhKalpWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNJOWUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWE5FWVhSaFZWSkpJRDhnVkdWNGRFTnZiRzl5TG5SbGVIUkVaV1poZFd4MElEb2dWR1Y0ZEVOdmJHOXlMbkJ5YVcxaGNubEVaV1poZFd4MFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHRmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGREMWNJbDlpYkdGdWExd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5Wld3OVhDSnViMjl3Wlc1bGNpQnViM0psWm1WeWNtVnlYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoeVpXWTllMjVtZEVsdFlXZGxWVkpNZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHbDBiR1U5ZTI1bWRFbHRZV2RsVlZKTWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRwYldGblpWUm9kVzFpYm1GcGJIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMkUrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHd2VkdWNGRENWNiaUFnSUNBZ0lDQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdJQ0FnSUNrZ09pQnVkV3hzZlZ4dUlDQWdJQ0FnSUNBZ0lEeENiM2dnWkdsemNHeGhlVDE3UkVsVFVFeEJXUzVHVEVWWWZTQm1iR1Y0UkdseVpXTjBhVzl1UFh0R1RFVllYMFJKVWtWRFZFbFBUaTVTVDFkOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEZSbGVIUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k5ZTFSbGVIUkRiMnh2Y2k1MFpYaDBSR1ZtWVhWc2RIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlhV0Z1ZEQxN1ZHVjRkRlpoY21saGJuUXVZbTlrZVZOdFFtOXNaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZWE05WENKb05sd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhjbWRwYmtKdmRIUnZiVDE3TkgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGeVoybHVVbWxuYUhROWV6SjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbTVtZEMxa1pYUmhhV3h6WDE5c2FXNXJMWFJwZEd4bFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0oyTnZiblJ5WVdOMFFXUmtjbVZ6Y3ljcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5VVpYaDBQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BFSnZlRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmthWE53YkdGNVBYdEVTVk5RVEVGWkxrWk1SVmg5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1pzWlhoRWFYSmxZM1JwYjI0OWUwWk1SVmhmUkVsU1JVTlVTVTlPTGxKUFYzMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2libVowTFdSbGRHRnBiSE5mWDJOdmJuUnlZV04wTFhkeVlYQndaWEpjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThWR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlQWHRVWlhoMFEyOXNiM0l1ZEdWNGRFRnNkR1Z5Ym1GMGFYWmxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbFRiWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY3oxY0ltZzJYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2ZG1WeVpteHZkMWR5WVhBOWUwOTJaWEptYkc5M1YzSmhjQzVDY21WaGExZHZjbVI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGeVoybHVRbTkwZEc5dFBYczBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlM05vYjNKMFpXNUJaR1J5WlhOektHRmtaSEpsYzNNcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHhVYjI5c2RHbHdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkM0poY0hCbGNrTnNZWE56VG1GdFpUMWNJbTVtZEMxa1pYUmhhV3h6WDE5MGIyOXNkR2x3TFhkeVlYQndaWEpjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmMybDBhVzl1UFZ3aVltOTBkRzl0WENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFYUnNaVDE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFpHUnlaWE56UTI5d2FXVmtJRDhnZENnblkyOXdhV1ZrUlhoamJHRnRZWFJwYjI0bktTQTZJSFFvSjJOdmNIbFViME5zYVhCaWIyRnlaQ2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEVKMWRIUnZia2xqYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnlhV0ZNWVdKbGJEMWNJbU52Y0hsY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNJOWUwbGpiMjVEYjJ4dmNpNXBZMjl1UVd4MFpYSnVZWFJwZG1WOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0p1Wm5RdFpHVjBZV2xzYzE5ZlkyOXVkSEpoWTNRdFkyOXdlUzFpZFhSMGIyNWNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlTMTBaWE4wYVdROVhDSnVablF0WVdSa2NtVnpjeTFqYjNCNVhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczlleWdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxRV1JrY21WemMwTnZjSGtvWVdSa2NtVnpjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV052Yms1aGJXVTllMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFpHUnlaWE56UTI5d2FXVmtJRDhnU1dOdmJrNWhiV1V1UTI5d2VWTjFZMk5sYzNNZ09pQkpZMjl1VG1GdFpTNURiM0I1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BDOVViMjlzZEdsd1BseHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5Q2IzZytYRzRnSUNBZ0lDQWdJQ0FnUEM5Q2IzZytYRzRnSUNBZ0lDQWdJQ0FnZTJsdVVHOXdWWEFnUHlCeVpXNWtaWEpUWlc1a1FuVjBkRzl1S0NrZ09pQnVkV3hzZlZ4dUlDQWdJQ0FnSUNBZ0lEeFVaWGgwWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxN1ZHVjRkRU52Ykc5eUxuUmxlSFJCYkhSbGNtNWhkR2wyWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbFRiWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnpQVndpYURaY0lseHVJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lIdDBLQ2R1Wm5SRWFYTmpiR0ZwYldWeUp5bDlYRzRnSUNBZ0lDQWdJQ0FnUEM5VVpYaDBQbHh1SUNBZ0lDQWdJQ0E4TDBKdmVENWNiaUFnSUNBZ0lEd3ZRbTk0UGx4dUlDQWdJRHd2UGx4dUlDQXBPMXh1ZlZ4dVhHNU9ablJFWlhSaGFXeHpMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdibVowT2lCUWNtOXdWSGx3WlhNdWMyaGhjR1VvZTF4dUlDQWdJR0ZrWkhKbGMzTTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQjBiMnRsYmtsa09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ2FYTkRkWEp5Wlc1MGJIbFBkMjVsWkRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdibUZ0WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JrWlhOamNtbHdkR2x2YmpvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JwYldGblpUb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCemRHRnVaR0Z5WkRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JwYldGblpWUm9kVzFpYm1GcGJEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCcGJXRm5aVkJ5WlhacFpYYzZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2FXMWhaMlZQY21sbmFXNWhiRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQmpjbVZoZEc5eU9pQlFjbTl3Vkhsd1pYTXVjMmhoY0dVb2UxeHVJQ0FnSUNBZ1lXUmtjbVZ6Y3pvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0FnSUdOdmJtWnBaem9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQWdJSEJ5YjJacGJHVmZhVzFuWDNWeWJEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCOUtTeGNiaUFnSUNCc1lYTjBVMkZzWlRvZ1VISnZjRlI1Y0dWekxuTm9ZWEJsS0h0Y2JpQWdJQ0FnSUdWMlpXNTBYM1JwYldWemRHRnRjRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQWdJSFJ2ZEdGc1gzQnlhV05sT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJQ0FnY0dGNWJXVnVkRjkwYjJ0bGJqb2dVSEp2Y0ZSNWNHVnpMbk5vWVhCbEtIdGNiaUFnSUNBZ0lDQWdjM2x0WW05c09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ2ZTa3NYRzRnSUgwcExGeHVmVHRjYmlJc0ltbHRjRzl5ZENCU1pXRmpkQ3dnZXlCMWMyVkRiMjUwWlhoMExDQjFjMlZTWldZc0lIVnpaVk4wWVhSbElIMGdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JseHVhVzF3YjNKMElIc2dTVEU0YmtOdmJuUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlqYjI1MFpYaDBjeTlwTVRodUp6dGNibWx0Y0c5eWRDQjdJRTFsYm5Vc0lFMWxiblZKZEdWdElIMGdabkp2YlNBbkxpNHZMaTR2ZFdrdmJXVnVkU2M3WEc1cGJYQnZjblFnZXlCQ2RYUjBiMjVKWTI5dUxDQkpZMjl1VG1GdFpTQjlJR1p5YjIwZ0p5NHVMeTR1TDJOdmJYQnZibVZ1ZEMxc2FXSnlZWEo1Snp0Y2JtbHRjRzl5ZENCN0lFTnZiRzl5SUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2YUdWc2NHVnljeTlqYjI1emRHRnVkSE12WkdWemFXZHVMWE41YzNSbGJTYzdYRzVjYm1OdmJuTjBJRTVtZEU5d2RHbHZibk1nUFNBb2V5QnZibEpsYlc5MlpTd2diMjVXYVdWM1QyNVBjR1Z1YzJWaElIMHBJRDArSUh0Y2JpQWdZMjl1YzNRZ2RDQTlJSFZ6WlVOdmJuUmxlSFFvU1RFNGJrTnZiblJsZUhRcE8xeHVJQ0JqYjI1emRDQmJibVowVDNCMGFXOXVjMDl3Wlc0c0lITmxkRTVtZEU5d2RHbHZibk5QY0dWdVhTQTlJSFZ6WlZOMFlYUmxLR1poYkhObEtUdGNiaUFnWTI5dWMzUWdjbVZtSUQwZ2RYTmxVbVZtS0daaGJITmxLVHRjYmx4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4a2FYWWdjbVZtUFh0eVpXWjlQbHh1SUNBZ0lDQWdQRUoxZEhSdmJrbGpiMjVjYmlBZ0lDQWdJQ0FnYVdOdmJrNWhiV1U5ZTBsamIyNU9ZVzFsTGsxdmNtVldaWEowYVdOaGJIMWNiaUFnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQVndpYm1aMExXOXdkR2x2Ym5OZlgySjFkSFJ2Ymx3aVhHNGdJQ0FnSUNBZ0lHUmhkR0V0ZEdWemRHbGtQVndpYm1aMExXOXdkR2x2Ym5OZlgySjFkSFJ2Ymx3aVhHNGdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWV5Z3BJRDArSUhObGRFNW1kRTl3ZEdsdmJuTlBjR1Z1S0hSeWRXVXBmVnh1SUNBZ0lDQWdJQ0JqYjJ4dmNqMTdRMjlzYjNJdWRHVjRkRVJsWm1GMWJIUjlYRzRnSUNBZ0lDQWdJR0Z5YVdGTVlXSmxiRDE3ZENnbmJtWjBUM0IwYVc5dWN5Y3BmVnh1SUNBZ0lDQWdMejVjYmx4dUlDQWdJQ0FnZTI1bWRFOXdkR2x2Ym5OUGNHVnVJRDhnS0Z4dUlDQWdJQ0FnSUNBOFRXVnVkVnh1SUNBZ0lDQWdJQ0FnSUdSaGRHRXRkR1Z6ZEdsa1BWd2lZMnh2YzJVdGJtWjBMVzl3ZEdsdmJuTXRiV1Z1ZFZ3aVhHNGdJQ0FnSUNBZ0lDQWdZVzVqYUc5eVJXeGxiV1Z1ZEQxN2NtVm1MbU4xY25KbGJuUjlYRzRnSUNBZ0lDQWdJQ0FnYjI1SWFXUmxQWHNvS1NBOVBpQnpaWFJPWm5SUGNIUnBiMjV6VDNCbGJpaG1ZV3h6WlNsOVhHNGdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0I3YjI1V2FXVjNUMjVQY0dWdWMyVmhJRDhnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdQRTFsYm5WSmRHVnRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbGpiMjVPWVcxbFBYdEpZMjl1VG1GdFpTNUZlSEJ2Y25SOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRXRkR1Z6ZEdsa1BWd2libVowTFc5d2RHbHZibk5mWDNacFpYY3RiMjR0YjNCbGJuTmxZVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczlleWdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWFJPWm5SUGNIUnBiMjV6VDNCbGJpaG1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyNVdhV1YzVDI1UGNHVnVjMlZoS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxOVhHNGdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHQwS0NkMmFXVjNUMjVQY0dWdWMyVmhKeWw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMDFsYm5WSmRHVnRQbHh1SUNBZ0lDQWdJQ0FnSUNrZ09pQnVkV3hzZlZ4dUlDQWdJQ0FnSUNBZ0lEeE5aVzUxU1hSbGJWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdOdmJrNWhiV1U5ZTBsamIyNU9ZVzFsTGxSeVlYTm9mVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZUzEwWlhOMGFXUTlYQ0p1Wm5RdGFYUmxiUzF5WlcxdmRtVmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhST1puUlBjSFJwYjI1elQzQmxiaWhtWVd4elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVVbVZ0YjNabEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOWZWeHVJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lIdDBLQ2R5WlcxdmRtVk9SbFFuS1gxY2JpQWdJQ0FnSUNBZ0lDQThMMDFsYm5WSmRHVnRQbHh1SUNBZ0lDQWdJQ0E4TDAxbGJuVStYRzRnSUNBZ0lDQXBJRG9nYm5Wc2JIMWNiaUFnSUNBOEwyUnBkajVjYmlBZ0tUdGNibjA3WEc1Y2JrNW1kRTl3ZEdsdmJuTXVjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQnZibEpsYlc5MlpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnYjI1V2FXVjNUMjVQY0dWdWMyVmhPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUU1bWRFOXdkR2x2Ym5NN1hHNGlMQ0psZUhCdmNuUWdleUJrWldaaGRXeDBJSDBnWm5KdmJTQW5MaTl1Wm5SekxXUmxkR1ZqZEdsdmJpMXViM1JwWTJVbk8xeHVJaXdpYVcxd2IzSjBJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0I3SUhWelpVaHBjM1J2Y25rZ2ZTQm1jbTl0SUNkeVpXRmpkQzF5YjNWMFpYSXRaRzl0Snp0Y2JtbHRjRzl5ZENCQ2IzZ2dabkp2YlNBbkxpNHZMaTR2ZFdrdlltOTRKenRjYm1sdGNHOXlkQ0JFYVdGc2IyY2dabkp2YlNBbkxpNHZMaTR2ZFdrdlpHbGhiRzluSnp0Y2JtbHRjRzl5ZENCN0lFbGpiMjRzSUVsamIyNU9ZVzFsTENCVVpYaDBJSDBnWm5KdmJTQW5MaTR2TGk0dlkyOXRjRzl1Wlc1MExXeHBZbkpoY25rbk8xeHVhVzF3YjNKMElIdGNiaUFnVkdWNGRGWmhjbWxoYm5Rc1hHNGdJRlJsZUhSQmJHbG5iaXhjYmlBZ1JtOXVkRmRsYVdkb2RDeGNiaUFnUkVsVFVFeEJXU3hjYmlBZ1ZHVjRkRU52Ykc5eUxGeHVJQ0JKWTI5dVEyOXNiM0lzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1TDJobGJIQmxjbk12WTI5dWMzUmhiblJ6TDJSbGMybG5iaTF6ZVhOMFpXMG5PMXh1YVcxd2IzSjBJSHNnZFhObFNURTRia052Ym5SbGVIUWdmU0JtY205dElDY3VMaTh1TGk4dUxpOW9iMjlyY3k5MWMyVkpNVGh1UTI5dWRHVjRkQ2M3WEc1cGJYQnZjblFnUW5WMGRHOXVJR1p5YjIwZ0p5NHVMeTR1TDNWcEwySjFkSFJ2YmljN1hHNXBiWEJ2Y25RZ2V5QkZXRkJGVWtsTlJVNVVRVXhmVWs5VlZFVWdmU0JtY205dElDY3VMaTh1TGk4dUxpOW9aV3h3WlhKekwyTnZibk4wWVc1MGN5OXliM1YwWlhNbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQk9ablJ6UkdWMFpXTjBhVzl1VG05MGFXTmxLQ2tnZTF4dUlDQmpiMjV6ZENCMElEMGdkWE5sU1RFNGJrTnZiblJsZUhRb0tUdGNiaUFnWTI5dWMzUWdhR2x6ZEc5eWVTQTlJSFZ6WlVocGMzUnZjbmtvS1R0Y2JseHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeENiM2dnWTJ4aGMzTk9ZVzFsUFZ3aWJtWjBjeTFrWlhSbFkzUnBiMjR0Ym05MGFXTmxYQ0krWEc0Z0lDQWdJQ0E4UkdsaGJHOW5JSFI1Y0dVOVhDSnRaWE56WVdkbFhDSWdZMnhoYzNOT1lXMWxQVndpYm1aMGN5MWtaWFJsWTNScGIyNHRibTkwYVdObFgxOXRaWE56WVdkbFhDSStYRzRnSUNBZ0lDQWdJRHhDYjNnZ1pHbHpjR3hoZVQxN1JFbFRVRXhCV1M1R1RFVllmVDVjYmlBZ0lDQWdJQ0FnSUNBOFFtOTRJSEJoWkdScGJtZFViM0E5ZXpGOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEVsamIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVDE3U1dOdmJrNWhiV1V1U1c1bWIzMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2lhVzVtYnkxamFYSmpiR1ZjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNqMTdTV052YmtOdmJHOXlMbkJ5YVcxaGNubEVaV1poZFd4MGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0FnSUNBZ0lDQThRbTk0SUhCaFpHUnBibWRNWldaMFBYc3lmVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeFVaWGgwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eVBYdFVaWGgwUTI5c2IzSXVkR1Y0ZEVSbFptRjFiSFI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0ZzYVdkdVBYdFVaWGgwUVd4cFoyNHVUR1ZtZEgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeWFXRnVkRDE3VkdWNGRGWmhjbWxoYm5RdVltOWtlVk50ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JoY3oxY0ltZzJYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl1ZEZkbGFXZG9kRDE3Um05dWRGZGxhV2RvZEM1Q2IyeGtmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2RDZ25ibVYzVGtaVWMwUmxkR1ZqZEdWa0p5bDlYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdJQ0FnSUNBZ0lDQThWR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNqMTdWR1Y0ZEVOdmJHOXlMblJsZUhSRVpXWmhkV3gwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JoYkdsbmJqMTdWR1Y0ZEVGc2FXZHVMa3hsWm5SOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNtbGhiblE5ZTFSbGVIUldZWEpwWVc1MExtSnZaSGxUYlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhNOVhDSm9ObHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzFoY21kcGJrSnZkSFJ2YlQxN05IMWNiaUFnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0oyNWxkMDVHVkVSbGRHVmpkR1ZrVFdWemMyRm5aU2NwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlVWlhoMFBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEVKMWRIUnZibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsUFZ3aWJHbHVhMXdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczlleWhsS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaUzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hwYzNSdmNua3VjSFZ6YUNoZ0pIdEZXRkJGVWtsTlJVNVVRVXhmVWs5VlZFVjlJMkYxZEc5a1pYUmxZM1F0Ym1aMGMyQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0p1Wm5SekxXUmxkR1ZqZEdsdmJpMXViM1JwWTJWZlgyMWxjM05oWjJWZlgyeHBibXRjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjdkQ2duYzJWc1pXTjBUa1pVVUhKcGRtRmplVkJ5WldabGNtVnVZMlVuS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJRHd2UW5WMGRHOXVQbHh1SUNBZ0lDQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdJQ0E4TDBKdmVENWNiaUFnSUNBZ0lEd3ZSR2xoYkc5blBseHVJQ0FnSUR3dlFtOTRQbHh1SUNBcE8xeHVmVnh1SWl3aVpYaHdiM0owSUhzZ1pHVm1ZWFZzZENCOUlHWnliMjBnSnk0dmJtWjBjeTFwZEdWdGN5YzdYRzRpTENKcGJYQnZjblFnVW1WaFkzUXNJSHNnZFhObFJXWm1aV04wSUgwZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0I3SUhWelpVUnBjM0JoZEdOb0xDQjFjMlZUWld4bFkzUnZjaUI5SUdaeWIyMGdKM0psWVdOMExYSmxaSFY0Snp0Y2JtbHRjRzl5ZENCN0lIVnpaVWhwYzNSdmNua2dmU0JtY205dElDZHlaV0ZqZEMxeWIzVjBaWEl0Wkc5dEp6dGNibWx0Y0c5eWRDQjdJR2x6UlhGMVlXd2dmU0JtY205dElDZHNiMlJoYzJnbk8xeHVhVzF3YjNKMElFSnZlQ0JtY205dElDY3VMaTh1TGk5MWFTOWliM2duTzF4dWFXMXdiM0owSUZSNWNHOW5jbUZ3YUhrZ1puSnZiU0FuTGk0dkxpNHZkV2t2ZEhsd2IyZHlZWEJvZVM5MGVYQnZaM0poY0doNUp6dGNibWx0Y0c5eWRDQkRZWEprSUdaeWIyMGdKeTR1THk0dUwzVnBMMk5oY21Rbk8xeHVhVzF3YjNKMElIdGNiaUFnUTI5c2IzSXNYRzRnSUZSNWNHOW5jbUZ3YUhsV1lYSnBZVzUwTEZ4dUlDQktkWE4wYVdaNVEyOXVkR1Z1ZEN4Y2JpQWdSa3hGV0Y5RVNWSkZRMVJKVDA0c1hHNGdJRUZzYVdkdVNYUmxiWE1zWEc0Z0lFUkpVMUJNUVZrc1hHNGdJRUpNVDBOTFgxTkpXa1ZUTEZ4dUlDQkdURVZZWDFkU1FWQXNYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZZMjl1YzNSaGJuUnpMMlJsYzJsbmJpMXplWE4wWlcwbk8xeHVhVzF3YjNKMElIc2dSVTVXU1ZKUFRrMUZUbFJmVkZsUVJWOVFUMUJWVUNCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdllYQndKenRjYm1sdGNHOXlkQ0I3SUdkbGRFVnVkbWx5YjI1dFpXNTBWSGx3WlNCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyRndjQzl6WTNKcGNIUnpMMnhwWWk5MWRHbHNKenRjYm1sdGNHOXlkQ0I3WEc0Z0lHZGxkRU4xY25KbGJuUkRhR0ZwYmtsa0xGeHVJQ0JuWlhSSmNHWnpSMkYwWlhkaGVTeGNiaUFnWjJWMFUyVnNaV04wWldSQlpHUnlaWE56TEZ4dWZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5elpXeGxZM1J2Y25Nbk8xeHVhVzF3YjNKMElIc2dRVk5UUlZSZlVrOVZWRVVnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlvWld4d1pYSnpMMk52Ym5OMFlXNTBjeTl5YjNWMFpYTW5PMXh1YVcxd2IzSjBJSHNnWjJWMFFYTnpaWFJKYldGblpWVlNUQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZkWFJwYkhNdmRYUnBiQ2M3WEc1cGJYQnZjblFnZXlCblpYUk9ablJKYldGblpVRnNkQ0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZkWFJwYkhNdmJtWjBjeWM3WEc1cGJYQnZjblFnZXlCMWNHUmhkR1ZPWm5SRWNtOXdSRzkzYmxOMFlYUmxJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZjM1J2Y21VdllXTjBhVzl1Y3ljN1hHNXBiWEJ2Y25RZ2V5QjFjMlZRY21WMmFXOTFjeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMMmh2YjJ0ekwzVnpaVkJ5WlhacGIzVnpKenRjYm1sdGNHOXlkQ0I3SUdkbGRFNW1kSE5FY205d1pHOTNibE4wWVhSbElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dlpIVmphM012YldWMFlXMWhjMnN2YldWMFlXMWhjMnNuTzF4dWFXMXdiM0owSUhzZ2RYTmxTVEU0YmtOdmJuUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlvYjI5cmN5OTFjMlZKTVRodVEyOXVkR1Y0ZENjN1hHNXBiWEJ2Y25RZ2V5QkpZMjl1TENCSlkyOXVUbUZ0WlNCOUlHWnliMjBnSnk0dUx5NHVMMk52YlhCdmJtVnVkQzFzYVdKeVlYSjVKenRjYm1sdGNHOXlkQ0JPWm5SRVpXWmhkV3gwU1cxaFoyVWdabkp2YlNBbkxpNHZibVowTFdSbFptRjFiSFF0YVcxaFoyVW5PMXh1WEc1amIyNXpkQ0IzYVdSMGFDQTlYRzRnSUdkbGRFVnVkbWx5YjI1dFpXNTBWSGx3WlNncElEMDlQU0JGVGxaSlVrOU9UVVZPVkY5VVdWQkZYMUJQVUZWUVhHNGdJQ0FnUHlCQ1RFOURTMTlUU1ZwRlV5NVBUa1ZmVkVoSlVrUmNiaUFnSUNBNklFSk1UME5MWDFOSldrVlRMazlPUlY5VFNWaFVTRHRjYmx4dVkyOXVjM1FnVUZKRlZrbFBWVk5NV1Y5UFYwNUZSRjlMUlZrZ1BTQW5jSEpsZG1sdmRYTnNlVTkzYm1Wa0p6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdUbVowYzBsMFpXMXpLSHRjYmlBZ1kyOXNiR1ZqZEdsdmJuTWdQU0I3ZlN4Y2JpQWdjSEpsZG1sdmRYTnNlVTkzYm1Wa1EyOXNiR1ZqZEdsdmJpQTlJSHQ5TEZ4dWZTa2dlMXh1SUNCamIyNXpkQ0JrYVhOd1lYUmphQ0E5SUhWelpVUnBjM0JoZEdOb0tDazdYRzRnSUdOdmJuTjBJR052Ykd4bFkzUnBiMjV6UzJWNWN5QTlJRTlpYW1WamRDNXJaWGx6S0dOdmJHeGxZM1JwYjI1ektUdGNiaUFnWTI5dWMzUWdibVowYzBSeWIzQmtiM2R1VTNSaGRHVWdQU0IxYzJWVFpXeGxZM1J2Y2loblpYUk9ablJ6UkhKdmNHUnZkMjVUZEdGMFpTazdYRzRnSUdOdmJuTjBJSEJ5WlhacGIzVnpRMjlzYkdWamRHbHZia3RsZVhNZ1BTQjFjMlZRY21WMmFXOTFjeWhqYjJ4c1pXTjBhVzl1YzB0bGVYTXBPMXh1SUNCamIyNXpkQ0J6Wld4bFkzUmxaRUZrWkhKbGMzTWdQU0IxYzJWVFpXeGxZM1J2Y2loblpYUlRaV3hsWTNSbFpFRmtaSEpsYzNNcE8xeHVJQ0JqYjI1emRDQmphR0ZwYmtsa0lEMGdkWE5sVTJWc1pXTjBiM0lvWjJWMFEzVnljbVZ1ZEVOb1lXbHVTV1FwTzF4dUlDQmpiMjV6ZENCMElEMGdkWE5sU1RFNGJrTnZiblJsZUhRb0tUdGNibHh1SUNCMWMyVkZabVpsWTNRb0tDa2dQVDRnZTF4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUdOb1lXbHVTV1FnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KbHh1SUNBZ0lDQWdjMlZzWldOMFpXUkJaR1J5WlhOeklDRTlQU0IxYm1SbFptbHVaV1FnSmlaY2JpQWdJQ0FnSUNGcGMwVnhkV0ZzS0hCeVpYWnBiM1Z6UTI5c2JHVmpkR2x2Ymt0bGVYTXNJR052Ykd4bFkzUnBiMjV6UzJWNWN5a2dKaVpjYmlBZ0lDQWdJQ2h1Wm5SelJISnZjR1J2ZDI1VGRHRjBaVDh1VzNObGJHVmpkR1ZrUVdSa2NtVnpjMTAvTGx0amFHRnBia2xrWFNBOVBUMGdkVzVrWldacGJtVmtJSHg4WEc0Z0lDQWdJQ0FnSUU5aWFtVmpkQzVyWlhsektHNW1kSE5FY205d1pHOTNibE4wWVhSbFB5NWJjMlZzWldOMFpXUkJaR1J5WlhOelhUOHVXMk5vWVdsdVNXUmRLUzVzWlc1bmRHZ2dQVDA5WEc0Z0lDQWdJQ0FnSUNBZ01DbGNiaUFnSUNBcElIdGNiaUFnSUNBZ0lHTnZibk4wSUdsdWFYUlRkR0YwWlNBOUlIdDlPMXh1SUNBZ0lDQWdZMjlzYkdWamRHbHZibk5MWlhsekxtWnZja1ZoWTJnb0tHdGxlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBibWwwVTNSaGRHVmJhMlY1WFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ1kyOXVjM1FnYm1WM1RtWjBSSEp2Y0dSdmQyNVRkR0YwWlNBOUlIdGNiaUFnSUNBZ0lDQWdMaTR1Ym1aMGMwUnliM0JrYjNkdVUzUmhkR1VzWEc0Z0lDQWdJQ0FnSUZ0elpXeGxZM1JsWkVGa1pISmxjM05kT2lCN1hHNGdJQ0FnSUNBZ0lDQWdMaTR1Ym1aMGMwUnliM0JrYjNkdVUzUmhkR1UvTGx0elpXeGxZM1JsWkVGa1pISmxjM05kTEZ4dUlDQWdJQ0FnSUNBZ0lGdGphR0ZwYmtsa1hUb2dhVzVwZEZOMFlYUmxMRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ1pHbHpjR0YwWTJnb2RYQmtZWFJsVG1aMFJISnZjRVJ2ZDI1VGRHRjBaU2h1WlhkT1puUkVjbTl3Wkc5M2JsTjBZWFJsS1NrN1hHNGdJQ0FnZlZ4dUlDQjlMQ0JiWEc0Z0lDQWdZMjlzYkdWamRHbHZibk5MWlhsekxGeHVJQ0FnSUhCeVpYWnBiM1Z6UTI5c2JHVmpkR2x2Ymt0bGVYTXNYRzRnSUNBZ2JtWjBjMFJ5YjNCa2IzZHVVM1JoZEdVc1hHNGdJQ0FnYzJWc1pXTjBaV1JCWkdSeVpYTnpMRnh1SUNBZ0lHTm9ZV2x1U1dRc1hHNGdJQ0FnWkdsemNHRjBZMmdzWEc0Z0lGMHBPMXh1WEc0Z0lHTnZibk4wSUdsd1puTkhZWFJsZDJGNUlEMGdkWE5sVTJWc1pXTjBiM0lvWjJWMFNYQm1jMGRoZEdWM1lYa3BPMXh1SUNCamIyNXpkQ0JvYVhOMGIzSjVJRDBnZFhObFNHbHpkRzl5ZVNncE8xeHVYRzRnSUdOdmJuTjBJSEpsYm1SbGNrTnZiR3hsWTNScGIyNUpiV0ZuWlNBOUlDaGpiMnhzWldOMGFXOXVTVzFoWjJVc0lHTnZiR3hsWTNScGIyNU9ZVzFsS1NBOVBpQjdYRzRnSUNBZ2FXWWdLR052Ykd4bFkzUnBiMjVKYldGblpTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lDQWdQR2x0WjF4dUlDQWdJQ0FnSUNBZ0lHRnNkRDE3WTI5c2JHVmpkR2x2Yms1aGJXVjlYRzRnSUNBZ0lDQWdJQ0FnYzNKalBYdG5aWFJCYzNObGRFbHRZV2RsVlZKTUtHTnZiR3hsWTNScGIyNUpiV0ZuWlN3Z2FYQm1jMGRoZEdWM1lYa3BmVnh1SUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltNW1kSE10YVhSbGJYTmZYMk52Ykd4bFkzUnBiMjR0YVcxaFoyVmNJbHh1SUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWJtWjBjeTFwZEdWdGMxOWZZMjlzYkdWamRHbHZiaTFwYldGblpTMWhiSFJjSWo1Y2JpQWdJQ0FnSUNBZ2UyTnZiR3hsWTNScGIyNU9ZVzFsUHk1Yk1GMC9MblJ2VlhCd1pYSkRZWE5sS0NrZ1B6OGdiblZzYkgxY2JpQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDazdYRzRnSUgwN1hHNWNiaUFnWTI5dWMzUWdkWEJrWVhSbFRtWjBSSEp2Y0VSdmQyNVRkR0YwWlV0bGVTQTlJQ2hyWlhrc0lHbHpSWGh3WVc1a1pXUXBJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnVaWGREZFhKeVpXNTBRV05qYjNWdWRGTjBZWFJsSUQwZ2UxeHVJQ0FnSUNBZ0xpNHVibVowYzBSeWIzQmtiM2R1VTNSaGRHVmJjMlZzWldOMFpXUkJaR1J5WlhOelhWdGphR0ZwYmtsa1hTeGNiaUFnSUNBZ0lGdHJaWGxkT2lBaGFYTkZlSEJoYm1SbFpDeGNiaUFnSUNCOU8xeHVYRzRnSUNBZ1kyOXVjM1FnYm1WM1UzUmhkR1VnUFNCN1hHNGdJQ0FnSUNBdUxpNXVablJ6UkhKdmNHUnZkMjVUZEdGMFpTeGNiaUFnSUNBZ0lGdHpaV3hsWTNSbFpFRmtaSEpsYzNOZE9pQjdYRzRnSUNBZ0lDQWdJRnRqYUdGcGJrbGtYVG9nYm1WM1EzVnljbVZ1ZEVGalkyOTFiblJUZEdGMFpTeGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHUnBjM0JoZEdOb0tIVndaR0YwWlU1bWRFUnliM0JFYjNkdVUzUmhkR1VvYm1WM1UzUmhkR1VwS1R0Y2JpQWdmVHRjYmx4dUlDQmpiMjV6ZENCeVpXNWtaWEpEYjJ4c1pXTjBhVzl1SUQwZ0tIc2dibVowY3l3Z1kyOXNiR1ZqZEdsdmJrNWhiV1VzSUdOdmJHeGxZM1JwYjI1SmJXRm5aU3dnYTJWNUlIMHBJRDArSUh0Y2JpQWdJQ0JwWmlBb0lXNW1kSE11YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQnBjMFY0Y0dGdVpHVmtJRDBnYm1aMGMwUnliM0JrYjNkdVUzUmhkR1ZiYzJWc1pXTjBaV1JCWkdSeVpYTnpYVDh1VzJOb1lXbHVTV1JkUHk1YmEyVjVYVHRjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKdVpuUnpMV2wwWlcxelgxOWpiMnhzWldOMGFXOXVYQ0lnYTJWNVBYdGdZMjlzYkdWamRHbHZiaTBrZTJ0bGVYMWdmVDVjYmlBZ0lDQWdJQ0FnUEdKMWRIUnZibHh1SUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltNW1kSE10YVhSbGJYTmZYMk52Ykd4bFkzUnBiMjR0ZDNKaGNIQmxjbHdpWEc0Z0lDQWdJQ0FnSUNBZ1pHRjBZUzEwWlhOMGFXUTlYQ0pqYjJ4c1pXTjBhVzl1TFdWNGNHRnVaR1Z5TFdKMWRIUnZibHdpWEc0Z0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkWEJrWVhSbFRtWjBSSEp2Y0VSdmQyNVRkR0YwWlV0bGVTaHJaWGtzSUdselJYaHdZVzVrWldRcE8xeHVJQ0FnSUNBZ0lDQWdJSDE5WEc0Z0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQThRbTk0WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRZWEpuYVc1Q2IzUjBiMjA5ZXpKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrYVhOd2JHRjVQWHRFU1ZOUVRFRlpMa1pNUlZoOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoYkdsbmJrbDBaVzF6UFh0QmJHbG5ia2wwWlcxekxtTmxiblJsY24xY2JpQWdJQ0FnSUNBZ0lDQWdJR3AxYzNScFpubERiMjUwWlc1MFBYdEtkWE4wYVdaNVEyOXVkR1Z1ZEM1emNHRmpaVUpsZEhkbFpXNTlYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnVablJ6TFdsMFpXMXpYMTlqYjJ4c1pXTjBhVzl1TFdGalkyOXlaR2x2YmkxMGFYUnNaVndpWEc0Z0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnUEVKdmVGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGJHbG5ia2wwWlcxelBYdEJiR2xuYmtsMFpXMXpMbU5sYm5SbGNuMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2libVowY3kxcGRHVnRjMTlmWTI5c2JHVmpkR2x2Ymkxb1pXRmtaWEpjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjdjbVZ1WkdWeVEyOXNiR1ZqZEdsdmJrbHRZV2RsS0dOdmJHeGxZM1JwYjI1SmJXRm5aU3dnWTI5c2JHVmpkR2x2Yms1aGJXVXBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThWSGx3YjJkeVlYQm9lVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eVBYdERiMnh2Y2k1MFpYaDBSR1ZtWVhWc2RIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdFVlWEJ2WjNKaGNHaDVWbUZ5YVdGdWRDNUlOWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhKbmFXNDlleko5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WUNSN1kyOXNiR1ZqZEdsdmJrNWhiV1VnUHo4Z2RDZ25kVzVyYm05M2JrTnZiR3hsWTNScGIyNG5LWDBnS0NSN2JtWjBjeTVzWlc1bmRHaDlLV0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHd2Vkhsd2IyZHlZWEJvZVQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEVKdmVDQmhiR2xuYmtsMFpXMXpQWHRCYkdsbmJrbDBaVzF6TG1ac1pYaEZibVI5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4U1dOdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U5ZTJselJYaHdZVzVrWldRZ1B5QkpZMjl1VG1GdFpTNUJjbkp2ZDBSdmQyNGdPaUJKWTI5dVRtRnRaUzVCY25KdmQxSnBaMmgwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlQWHREYjJ4dmNpNXBZMjl1UkdWbVlYVnNkSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZRbTk0UGx4dUlDQWdJQ0FnSUNBZ0lEd3ZRbTk0UGx4dUlDQWdJQ0FnSUNBOEwySjFkSFJ2Ymo1Y2JseHVJQ0FnSUNBZ0lDQjdhWE5GZUhCaGJtUmxaQ0EvSUNoY2JpQWdJQ0FnSUNBZ0lDQThRbTk0SUdScGMzQnNZWGs5ZTBSSlUxQk1RVmt1Umt4RldIMGdabXhsZUZkeVlYQTllMFpNUlZoZlYxSkJVQzVYVWtGUWZTQm5ZWEE5ZXpSOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnZTI1bWRITXViV0Z3S0NodVpuUXNJR2twSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCcGJXRm5aU3dnWVdSa2NtVnpjeXdnZEc5clpXNUpaQ3dnWW1GamEyZHliM1Z1WkVOdmJHOXlMQ0J1WVcxbElIMGdQU0J1Wm5RN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzVtZEVsdFlXZGxJRDBnWjJWMFFYTnpaWFJKYldGblpWVlNUQ2hwYldGblpTd2dhWEJtYzBkaGRHVjNZWGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnVablJKYldGblpVRnNkQ0E5SUdkbGRFNW1kRWx0WVdkbFFXeDBLRzVtZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR2hoYm1Sc1pVbHRZV2RsUTJ4cFkyc2dQU0FvS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaHBjM1J2Y25rdWNIVnphQ2hnSkh0QlUxTkZWRjlTVDFWVVJYMHZKSHRoWkdSeVpYTnpmUzhrZTNSdmEyVnVTV1I5WUNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFFtOTRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaExYUmxjM1JwWkQxY0ltNW1kQzEzY21Gd2NHVnlYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkcFpIUm9QWHQzYVdSMGFIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3RsZVQxN1lHNW1kQzBrZTJsOVlIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW01bWRITXRhWFJsYlhOZlgybDBaVzB0ZDNKaGNIQmxjbHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BFTmhjbVJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRmtaR2x1WnoxN01IMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYW5WemRHbG1lVU52Ym5SbGJuUTllMHAxYzNScFpubERiMjUwWlc1MExtTmxiblJsY24xY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQVndpYm1aMGN5MXBkR1Z0YzE5ZmFYUmxiUzEzY21Gd2NHVnlYMTlqWVhKa1hDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UyNW1kRWx0WVdkbElEOGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGlkWFIwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0ltNW1kSE10YVhSbGJYTmZYMmwwWlcxY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1U5ZTN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltRmphMmR5YjNWdVpFTnZiRzl5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZTJoaGJtUnNaVWx0WVdkbFEyeHBZMnQ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR2x0WjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnVablJ6TFdsMFpXMXpYMTlwZEdWdExXbHRZV2RsWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZUzEwWlhOMGFXUTlYQ0p1Wm5RdGFXMWhaMlZjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemNtTTllMjVtZEVsdFlXZGxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoYkhROWUyNW1kRWx0WVdkbFFXeDBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMkoxZEhSdmJqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1NBNklDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFRtWjBSR1ZtWVhWc2RFbHRZV2RsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbFBYdHVZVzFsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc5clpXNUpaRDE3ZEc5clpXNUpaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pVbHRZV2RsUTJ4cFkyczllMmhoYm1Sc1pVbHRZV2RsUTJ4cFkydDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZRMkZ5WkQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwwSnZlRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBmVnh1SUNBZ0lDQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdJQ0FwSURvZ2JuVnNiSDFjYmlBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNrN1hHNGdJSDA3WEc1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW01bWRITXRhWFJsYlhOY0lqNWNiaUFnSUNBZ0lEeENiM2hjYmlBZ0lDQWdJQ0FnY0dGa1pHbHVaMVJ2Y0QxN05uMWNiaUFnSUNBZ0lDQWdjR0ZrWkdsdVowSnZkSFJ2YlQxN05uMWNiaUFnSUNBZ0lDQWdjR0ZrWkdsdVoweGxablE5ZXpSOVhHNGdJQ0FnSUNBZ0lIQmhaR1JwYm1kU2FXZG9kRDE3TkgxY2JpQWdJQ0FnSUNBZ1pteGxlRVJwY21WamRHbHZiajE3Umt4RldGOUVTVkpGUTFSSlQwNHVRMDlNVlUxT2ZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQThQbHh1SUNBZ0lDQWdJQ0FnSUh0amIyeHNaV04wYVc5dWMwdGxlWE11YldGd0tDaHJaWGtwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSHNnYm1aMGN5d2dZMjlzYkdWamRHbHZiazVoYldVc0lHTnZiR3hsWTNScGIyNUpiV0ZuWlNCOUlEMGdZMjlzYkdWamRHbHZibk5iYTJWNVhUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGJtUmxja052Ykd4bFkzUnBiMjRvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1Wm5SekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyeHNaV04wYVc5dVRtRnRaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYkdWamRHbHZia2x0WVdkbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCclpYa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHpVSEpsZG1sdmRYTnNlVTkzYm1Wa1EyOXNiR1ZqZEdsdmJqb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLWDFjYmlBZ0lDQWdJQ0FnSUNCN2NtVnVaR1Z5UTI5c2JHVmpkR2x2YmloN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1Wm5Sek9pQndjbVYyYVc5MWMyeDVUM2R1WldSRGIyeHNaV04wYVc5dUxtNW1kSE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMnhzWldOMGFXOXVUbUZ0WlRvZ2NISmxkbWx2ZFhOc2VVOTNibVZrUTI5c2JHVmpkR2x2Ymk1amIyeHNaV04wYVc5dVRtRnRaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiR3hsWTNScGIyNUpiV0ZuWlRvZ2NISmxkbWx2ZFhOc2VVOTNibVZrUTI5c2JHVmpkR2x2Ymk1dVpuUnpXekJkUHk1cGJXRm5aU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpVSEpsZG1sdmRYTnNlVTkzYm1Wa1EyOXNiR1ZqZEdsdmJqb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVRvZ1VGSkZWa2xQVlZOTVdWOVBWMDVGUkY5TFJWa3NYRzRnSUNBZ0lDQWdJQ0FnZlNsOVhHNGdJQ0FnSUNBZ0lEd3ZQbHh1SUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnUEM5a2FYWStYRzRnSUNrN1hHNTlYRzVjYms1bWRITkpkR1Z0Y3k1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUhCeVpYWnBiM1Z6YkhsUGQyNWxaRU52Ykd4bFkzUnBiMjQ2SUZCeWIzQlVlWEJsY3k1emFHRndaU2g3WEc0Z0lDQWdibVowY3pvZ1VISnZjRlI1Y0dWekxtRnljbUY1VDJZb1hHNGdJQ0FnSUNCUWNtOXdWSGx3WlhNdWMyaGhjR1VvZTF4dUlDQWdJQ0FnSUNCaFpHUnlaWE56T2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnSUNBZ0lIUnZhMlZ1U1dRNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNBZ0lDQWdibUZ0WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ1pHVnpZM0pwY0hScGIyNDZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ0lDQWdJR2x0WVdkbE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUNBZ0lDQnpkR0Z1WkdGeVpEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNBZ0lDQWdhVzFoWjJWVWFIVnRZbTVoYVd3NklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lHbHRZV2RsVUhKbGRtbGxkem9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQWdJQ0FnWTNKbFlYUnZjam9nVUhKdmNGUjVjR1Z6TG5Ob1lYQmxLSHRjYmlBZ0lDQWdJQ0FnSUNCaFpHUnlaWE56T2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJQ0FnSUNBZ0lHTnZibVpwWnpvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ0lDQndjbTltYVd4bFgybHRaMTkxY213NklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lIMHBMRnh1SUNBZ0lDQWdmU2tzWEc0Z0lDQWdLU3hjYmlBZ0lDQmpiMnhzWldOMGFXOXVUbUZ0WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JqYjJ4c1pXTjBhVzl1U1cxaFoyVTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUgwcExGeHVJQ0JqYjJ4c1pXTjBhVzl1Y3pvZ1VISnZjRlI1Y0dWekxuTm9ZWEJsS0h0Y2JpQWdJQ0J1Wm5Sek9pQlFjbTl3Vkhsd1pYTXVZWEp5WVhsUFppaGNiaUFnSUNBZ0lGQnliM0JVZVhCbGN5NXphR0Z3WlNoN1hHNGdJQ0FnSUNBZ0lHRmtaSEpsYzNNNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNBZ0lDQWdkRzlyWlc1SlpEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5NXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lDQWdJQ0J1WVcxbE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUNBZ0lDQmtaWE5qY21sd2RHbHZiam9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQWdJQ0FnYVcxaFoyVTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ0lDQWdJSE4wWVc1a1lYSmtPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lDQWdJQ0JwYldGblpWUm9kVzFpYm1GcGJEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNBZ0lDQWdhVzFoWjJWUWNtVjJhV1YzT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJQ0FnSUNCamNtVmhkRzl5T2lCUWNtOXdWSGx3WlhNdWMyaGhjR1VvZTF4dUlDQWdJQ0FnSUNBZ0lHRmtaSEpsYzNNNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lDQWdZMjl1Wm1sbk9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUNBZ0lDQWdJSEJ5YjJacGJHVmZhVzFuWDNWeWJEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNBZ0lDQWdmU2tzWEc0Z0lDQWdJQ0I5S1N4Y2JpQWdJQ0FwTEZ4dUlDQWdJR052Ykd4bFkzUnBiMjVKYldGblpUb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCamIyeHNaV04wYVc5dVRtRnRaVG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ2ZTa3NYRzU5TzF4dUlpd2laWGh3YjNKMElIc2daR1ZtWVhWc2RDQjlJR1p5YjIwZ0p5NHZibVowY3kxMFlXSW5PMXh1SWl3aWFXMXdiM0owSUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ2V5QjFjMlZFYVhOd1lYUmphQ3dnZFhObFUyVnNaV04wYjNJZ2ZTQm1jbTl0SUNkeVpXRmpkQzF5WldSMWVDYzdYRzVwYlhCdmNuUWdleUIxYzJWSWFYTjBiM0o1SUgwZ1puSnZiU0FuY21WaFkzUXRjbTkxZEdWeUxXUnZiU2M3WEc1cGJYQnZjblFnUW05NElHWnliMjBnSnk0dUx5NHVMM1ZwTDJKdmVDYzdYRzVwYlhCdmNuUWdRblYwZEc5dUlHWnliMjBnSnk0dUx5NHVMM1ZwTDJKMWRIUnZiaWM3WEc1cGJYQnZjblFnVkhsd2IyZHlZWEJvZVNCbWNtOXRJQ2N1TGk4dUxpOTFhUzkwZVhCdlozSmhjR2g1TDNSNWNHOW5jbUZ3YUhrbk8xeHVhVzF3YjNKMElFNW1kSE5FWlhSbFkzUnBiMjVPYjNScFkyVWdabkp2YlNBbkxpNHZibVowY3kxa1pYUmxZM1JwYjI0dGJtOTBhV05sSnp0Y2JtbHRjRzl5ZENCT1puUnpTWFJsYlhNZ1puSnZiU0FuTGk0dmJtWjBjeTFwZEdWdGN5YzdYRzVwYlhCdmNuUWdlMXh1SUNCVWVYQnZaM0poY0doNVZtRnlhV0Z1ZEN4Y2JpQWdWRVZZVkY5QlRFbEhUaXhjYmlBZ1NuVnpkR2xtZVVOdmJuUmxiblFzWEc0Z0lFWk1SVmhmUkVsU1JVTlVTVTlPTEZ4dUlDQkdUMDVVWDFkRlNVZElWQ3hjYmlBZ1FXeHBaMjVKZEdWdGN5eGNiaUFnVkdWNGRFTnZiRzl5TEZ4dWZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5b1pXeHdaWEp6TDJOdmJuTjBZVzUwY3k5a1pYTnBaMjR0YzNsemRHVnRKenRjYm1sdGNHOXlkQ0I3SUhWelpVa3hPRzVEYjI1MFpYaDBJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZhRzl2YTNNdmRYTmxTVEU0YmtOdmJuUmxlSFFuTzF4dWFXMXdiM0owSUhzZ1oyVjBTWE5OWVdsdWJtVjBMQ0JuWlhSVmMyVk9ablJFWlhSbFkzUnBiMjRnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTl6Wld4bFkzUnZjbk1uTzF4dWFXMXdiM0owSUhzZ1JWaFFSVkpKVFVWT1ZFRk1YMUpQVlZSRklIMGdabkp2YlNBbkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5amIyNXpkR0Z1ZEhNdmNtOTFkR1Z6Snp0Y2JtbHRjRzl5ZENCN1hHNGdJR05vWldOclFXNWtWWEJrWVhSbFFXeHNUbVowYzA5M2JtVnljMmhwY0ZOMFlYUjFjeXhjYmlBZ1pHVjBaV04wVG1aMGN5eGNibjBnWm5KdmJTQW5MaTR2TGk0dkxpNHZjM1J2Y21VdllXTjBhVzl1Y3ljN1hHNXBiWEJ2Y25RZ2V5QjFjMlZPWm5SelEyOXNiR1ZqZEdsdmJuTWdmU0JtY205dElDY3VMaTh1TGk4dUxpOW9iMjlyY3k5MWMyVk9ablJ6UTI5c2JHVmpkR2x2Ym5Nbk8xeHVhVzF3YjNKMElGcEZUa1JGVTB0ZlZWSk1VeUJtY205dElDY3VMaTh1TGk4dUxpOW9aV3h3WlhKekwyTnZibk4wWVc1MGN5OTZaVzVrWlhOckxYVnliQ2M3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUU1bWRITlVZV0lvZXlCdmJrRmtaRTVHVkNCOUtTQjdYRzRnSUdOdmJuTjBJSFZ6WlU1bWRFUmxkR1ZqZEdsdmJpQTlJSFZ6WlZObGJHVmpkRzl5S0dkbGRGVnpaVTVtZEVSbGRHVmpkR2x2YmlrN1hHNGdJR052Ym5OMElHbHpUV0ZwYm01bGRDQTlJSFZ6WlZObGJHVmpkRzl5S0dkbGRFbHpUV0ZwYm01bGRDazdYRzRnSUdOdmJuTjBJR2hwYzNSdmNua2dQU0IxYzJWSWFYTjBiM0o1S0NrN1hHNGdJR052Ym5OMElIUWdQU0IxYzJWSk1UaHVRMjl1ZEdWNGRDZ3BPMXh1SUNCamIyNXpkQ0JrYVhOd1lYUmphQ0E5SUhWelpVUnBjM0JoZEdOb0tDazdYRzVjYmlBZ1kyOXVjM1FnZXlCdVpuUnpURzloWkdsdVp5d2dZMjlzYkdWamRHbHZibk1zSUhCeVpYWnBiM1Z6YkhsUGQyNWxaRU52Ykd4bFkzUnBiMjRnZlNBOVhHNGdJQ0FnZFhObFRtWjBjME52Ykd4bFkzUnBiMjV6S0NrN1hHNWNiaUFnWTI5dWMzUWdiMjVGYm1GaWJHVkJkWFJ2UkdWMFpXTjBJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHaHBjM1J2Y25rdWNIVnphQ2hGV0ZCRlVrbE5SVTVVUVV4ZlVrOVZWRVVwTzF4dUlDQjlPMXh1WEc0Z0lHTnZibk4wSUc5dVVtVm1jbVZ6YUNBOUlDZ3BJRDArSUh0Y2JpQWdJQ0JwWmlBb2FYTk5ZV2x1Ym1WMEtTQjdYRzRnSUNBZ0lDQmthWE53WVhSamFDaGtaWFJsWTNST1puUnpLQ2twTzF4dUlDQWdJSDFjYmlBZ0lDQmphR1ZqYTBGdVpGVndaR0YwWlVGc2JFNW1kSE5QZDI1bGNuTm9hWEJUZEdGMGRYTW9LVHRjYmlBZ2ZUdGNibHh1SUNCcFppQW9ibVowYzB4dllXUnBibWNwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdQR1JwZGlCamJHRnpjMDVoYldVOVhDSnVablJ6TFhSaFlsOWZiRzloWkdsdVoxd2lQbnQwS0Nkc2IyRmthVzVuVGtaVWN5Y3BmVHd2WkdsMlBqdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ1BFSnZlQ0JqYkdGemMwNWhiV1U5WENKdVpuUnpMWFJoWWx3aVBseHVJQ0FnSUNBZ2UwOWlhbVZqZEM1clpYbHpLR052Ykd4bFkzUnBiMjV6S1M1c1pXNW5kR2dnUGlBd0lIeDhYRzRnSUNBZ0lDQndjbVYyYVc5MWMyeDVUM2R1WldSRGIyeHNaV04wYVc5dUxtNW1kSE11YkdWdVozUm9JRDRnTUNBL0lDaGNiaUFnSUNBZ0lDQWdQRTVtZEhOSmRHVnRjMXh1SUNBZ0lDQWdJQ0FnSUdOdmJHeGxZM1JwYjI1elBYdGpiMnhzWldOMGFXOXVjMzFjYmlBZ0lDQWdJQ0FnSUNCd2NtVjJhVzkxYzJ4NVQzZHVaV1JEYjJ4c1pXTjBhVzl1UFh0d2NtVjJhVzkxYzJ4NVQzZHVaV1JEYjJ4c1pXTjBhVzl1ZlZ4dUlDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0tTQTZJQ2hjYmlBZ0lDQWdJQ0FnUEQ1Y2JpQWdJQ0FnSUNBZ0lDQjdhWE5OWVdsdWJtVjBJQ1ltSUNGMWMyVk9ablJFWlhSbFkzUnBiMjRnUHlBOFRtWjBjMFJsZEdWamRHbHZiazV2ZEdsalpTQXZQaUE2SUc1MWJHeDlYRzRnSUNBZ0lDQWdJQ0FnUEVKdmVDQndZV1JrYVc1blBYc3hNbjArWEc0Z0lDQWdJQ0FnSUNBZ0lDQThRbTk0SUdwMWMzUnBabmxEYjI1MFpXNTBQWHRLZFhOMGFXWjVRMjl1ZEdWdWRDNWpaVzUwWlhKOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGFXMW5JSE55WXoxY0lpNHZhVzFoWjJWekwyNXZMVzVtZEhNdWMzWm5YQ0lnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEVKdmVGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYSm5hVzVVYjNBOWV6UjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhjbWRwYmtKdmRIUnZiVDE3TVRKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdwMWMzUnBabmxEYjI1MFpXNTBQWHRLZFhOMGFXWjVRMjl1ZEdWdWRDNWpaVzUwWlhKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdac1pYaEVhWEpsWTNScGIyNDllMFpNUlZoZlJFbFNSVU5VU1U5T0xrTlBURlZOVG4xY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFZ3aWJtWjBjeTEwWVdKZlgyeHBibXRjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThWSGx3YjJkeVlYQm9lVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eVBYdFVaWGgwUTI5c2IzSXVkR1Y0ZEUxMWRHVmtmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTllMVI1Y0c5bmNtRndhSGxXWVhKcFlXNTBMa2cwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGc2FXZHVQWHRVUlZoVVgwRk1TVWRPTGtORlRsUkZVbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjI1MFYyVnBaMmgwUFh0R1QwNVVYMWRGU1VkSVZDNUNUMHhFZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0oyNXZUa1pVY3ljcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwxUjVjRzluY21Gd2FIaytYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeENkWFIwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxQVndpYkdsdWExd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMFBWd2lYMkpzWVc1clhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV3c5WENKdWIyOXdaVzVsY2lCdWIzSmxabVZ5Y21WeVhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9jbVZtUFh0YVJVNUVSVk5MWDFWU1RGTXVUa1pVWDFSUFMwVk9VMzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHQwS0Nkc1pXRnliazF2Y21WVmNIQmxja05oYzJVbktYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BDOUNkWFIwYjI0K1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4TDBKdmVENWNiaUFnSUNBZ0lDQWdJQ0E4TDBKdmVENWNiaUFnSUNBZ0lDQWdQQzgrWEc0Z0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnUEVKdmVGeHVJQ0FnSUNBZ0lDQnRZWEpuYVc1Q2IzUjBiMjA5ZXpSOVhHNGdJQ0FnSUNBZ0lHcDFjM1JwWm5sRGIyNTBaVzUwUFh0S2RYTjBhV1o1UTI5dWRHVnVkQzVqWlc1MFpYSjlYRzRnSUNBZ0lDQWdJR1pzWlhoRWFYSmxZM1JwYjI0OWUwWk1SVmhmUkVsU1JVTlVTVTlPTGtOUFRGVk5UbjFjYmlBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnUEZSNWNHOW5jbUZ3YUhsY2JpQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxN1ZHVjRkRU52Ykc5eUxuUmxlSFJOZFhSbFpIMWNiaUFnSUNBZ0lDQWdJQ0IyWVhKcFlXNTBQWHRVZVhCdlozSmhjR2g1Vm1GeWFXRnVkQzVJTlgxY2JpQWdJQ0FnSUNBZ0lDQmhiR2xuYmoxN1ZFVllWRjlCVEVsSFRpNURSVTVVUlZKOVhHNGdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0I3ZENnbmJXbHpjMmx1WjA1R1ZDY3BmVnh1SUNBZ0lDQWdJQ0E4TDFSNWNHOW5jbUZ3YUhrK1hHNGdJQ0FnSUNBZ0lEeENiM2hjYmlBZ0lDQWdJQ0FnSUNCaGJHbG5ia2wwWlcxelBYdEJiR2xuYmtsMFpXMXpMbU5sYm5SbGNuMWNiaUFnSUNBZ0lDQWdJQ0JxZFhOMGFXWjVRMjl1ZEdWdWREMTdTblZ6ZEdsbWVVTnZiblJsYm5RdVkyVnVkR1Z5ZlZ4dUlDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdleUZwYzAxaGFXNXVaWFFnSmlZZ1QySnFaV04wTG10bGVYTW9ZMjlzYkdWamRHbHZibk1wTG14bGJtZDBhQ0E4SURFZ1B5QnVkV3hzSURvZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnUEQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUEVKdmVGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbTVtZEhNdGRHRmlYMTlzYVc1clhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnFkWE4wYVdaNVEyOXVkR1Z1ZEQxN1NuVnpkR2xtZVVOdmJuUmxiblF1Wm14bGVFVnVaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRwYzAxaGFXNXVaWFFnSmlZZ0lYVnpaVTVtZEVSbGRHVmpkR2x2YmlBL0lDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhDZFhSMGIyNGdkSGx3WlQxY0lteHBibXRjSWlCdmJrTnNhV05yUFh0dmJrVnVZV0pzWlVGMWRHOUVaWFJsWTNSOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3ZENnblpXNWhZbXhsUVhWMGIwUmxkR1ZqZENjcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlDZFhSMGIyNCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLU0E2SUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeENkWFIwYjI0Z2RIbHdaVDFjSW14cGJtdGNJaUJ2YmtOc2FXTnJQWHR2YmxKbFpuSmxjMmg5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdkQ2duY21WbWNtVnphRXhwYzNRbktYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2UW5WMGRHOXVQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFZIbHdiMmR5WVhCb2VWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5UFh0VVpYaDBRMjlzYjNJdWRHVjRkRTExZEdWa2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjbWxoYm5ROWUxUjVjRzluY21Gd2FIbFdZWEpwWVc1MExrZzJmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZzYVdkdVBYdFVSVmhVWDBGTVNVZE9Ma05GVGxSRlVuMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdDBLQ2R2Y2ljcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwxUjVjRzluY21Gd2FIaytYRzRnSUNBZ0lDQWdJQ0FnSUNBOEx6NWNiaUFnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBZ0lEeENiM2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHcDFjM1JwWm5sRGIyNTBaVzUwUFh0S2RYTjBhV1o1UTI5dWRHVnVkQzVtYkdWNFUzUmhjblI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0p1Wm5SekxYUmhZbDlmYkdsdWExd2lYRzRnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQRUoxZEhSdmJpQjBlWEJsUFZ3aWJHbHVhMXdpSUc5dVEyeHBZMnM5ZTI5dVFXUmtUa1pVZlQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0oybHRjRzl5ZEU1R1ZITW5LWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZRblYwZEc5dVBseHVJQ0FnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lEd3ZRbTk0UGx4dUlDQXBPMXh1ZlZ4dVhHNU9ablJ6VkdGaUxuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ2IyNUJaR1JPUmxRNklGQnliM0JVZVhCbGN5NW1kVzVqTG1selVtVnhkV2x5WldRc1hHNTlPMXh1SWl3aVpYaHdiM0owSUhzZ1pHVm1ZWFZzZENCOUlHWnliMjBnSnk0dmNHVnliV2x6YzJsdmJpMXdZV2RsTFdOdmJuUmhhVzVsY2k1amIyNTBZV2x1WlhJbk8xeHVaWGh3YjNKMElIc2daR1ZtWVhWc2RDQmhjeUJRWlhKdGFYTnphVzl1VUdGblpVTnZiblJoYVc1bGNrTnZiblJsYm5RZ2ZTQm1jbTl0SUNjdUwzQmxjbTFwYzNOcGIyNHRjR0ZuWlMxamIyNTBZV2x1WlhJdFkyOXVkR1Z1ZENjN1hHNGlMQ0psZUhCdmNuUWdleUJrWldaaGRXeDBJSDBnWm5KdmJTQW5MaTl3WlhKdGFYTnphVzl1TFhCaFoyVXRZMjl1ZEdGcGJtVnlMV052Ym5SbGJuUXVZMjl0Y0c5dVpXNTBKenRjYmlJc0ltbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ1VtVmhZM1FzSUhzZ1VIVnlaVU52YlhCdmJtVnVkQ0I5SUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQlFaWEp0YVhOemFXOXVjME52Ym01bFkzUklaV0ZrWlhJZ1puSnZiU0FuTGk0dkxpNHZjR1Z5YldsemMybHZibk10WTI5dWJtVmpkQzFvWldGa1pYSW5PMXh1YVcxd2IzSjBJRlJ2YjJ4MGFYQWdabkp2YlNBbkxpNHZMaTR2TGk0dmRXa3ZkRzl2YkhScGNDYzdYRzVwYlhCdmNuUWdVR1Z5YldsemMybHZibk5EYjI1dVpXTjBVR1Z5YldsemMybHZia3hwYzNRZ1puSnZiU0FuTGk0dkxpNHZjR1Z5YldsemMybHZibk10WTI5dWJtVmpkQzF3WlhKdGFYTnphVzl1TFd4cGMzUW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlFaWEp0YVhOemFXOXVVR0ZuWlVOdmJuUmhhVzVsY2tOdmJuUmxiblFnWlhoMFpXNWtjeUJRZFhKbFEyOXRjRzl1Wlc1MElIdGNiaUFnYzNSaGRHbGpJSEJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0J6ZFdKcVpXTjBUV1YwWVdSaGRHRTZJRkJ5YjNCVWVYQmxjeTV6YUdGd1pTaDdYRzRnSUNBZ0lDQnVZVzFsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnSUNCdmNtbG5hVzQ2SUZCeWIzQlVlWEJsY3k1emRISnBibWN1YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0FnSUhOMVltcGxZM1JVZVhCbE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ0lDQmxlSFJsYm5OcGIyNUpaRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQWdJR2xqYjI1VmNtdzZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2ZTa3NYRzRnSUNBZ2MyVnNaV04wWldSUVpYSnRhWE56YVc5dWN6b2dVSEp2Y0ZSNWNHVnpMbTlpYW1WamRDNXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lITmxiR1ZqZEdWa1NXUmxiblJwZEdsbGN6b2dVSEp2Y0ZSNWNHVnpMbUZ5Y21GNUxGeHVJQ0FnSUdGc2JFbGtaVzUwYVhScFpYTlRaV3hsWTNSbFpEb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJSDA3WEc1Y2JpQWdjM1JoZEdsaklHUmxabUYxYkhSUWNtOXdjeUE5SUh0Y2JpQWdJQ0J6Wld4bFkzUmxaRWxrWlc1MGFYUnBaWE02SUZ0ZExGeHVJQ0FnSUdGc2JFbGtaVzUwYVhScFpYTlRaV3hsWTNSbFpEb2dabUZzYzJVc1hHNGdJSDA3WEc1Y2JpQWdjM1JoZEdsaklHTnZiblJsZUhSVWVYQmxjeUE5SUh0Y2JpQWdJQ0IwT2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWEpTWlhGMVpYTjBaV1JRWlhKdGFYTnphVzl1Y3lncElIdGNiaUFnSUNCamIyNXpkQ0I3SUhObGJHVmpkR1ZrVUdWeWJXbHpjMmx2Ym5Nc0lITjFZbXBsWTNSTlpYUmhaR0YwWVNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmx4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0luQmxjbTFwYzNOcGIyNHRZWEJ3Y205MllXd3RZMjl1ZEdGcGJtVnlYMTlqYjI1MFpXNTBYMTl5WlhGMVpYTjBaV1JjSWo1Y2JpQWdJQ0FnSUNBZ1BGQmxjbTFwYzNOcGIyNXpRMjl1Ym1WamRGQmxjbTFwYzNOcGIyNU1hWE4wWEc0Z0lDQWdJQ0FnSUNBZ2NHVnliV2x6YzJsdmJuTTllM05sYkdWamRHVmtVR1Z5YldsemMybHZibk45WEc0Z0lDQWdJQ0FnSUNBZ2RHRnlaMlYwVTNWaWFtVmpkRTFsZEdGa1lYUmhQWHR6ZFdKcVpXTjBUV1YwWVdSaGRHRjlYRzRnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBcE8xeHVJQ0I5WEc1Y2JpQWdjbVZ1WkdWeVFXTmpiM1Z1ZEZSdmIyeDBhWEFvZEdWNGRFTnZiblJsYm5RcElIdGNiaUFnSUNCamIyNXpkQ0I3SUhObGJHVmpkR1ZrU1dSbGJuUnBkR2xsY3lCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQmpiMjV6ZENCN0lIUWdmU0E5SUhSb2FYTXVZMjl1ZEdWNGREdGNibHh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBOFZHOXZiSFJwY0Z4dUlDQWdJQ0FnSUNCclpYazlYQ0poYkd3dFlXTmpiM1Z1ZEMxamIyNXVaV04wTFhSdmIyeDBhWEJjSWx4dUlDQWdJQ0FnSUNCd2IzTnBkR2x2YmoxY0ltSnZkSFJ2YlZ3aVhHNGdJQ0FnSUNBZ0lIZHlZWEJ3WlhKRGJHRnpjMDVoYldVOVhDSndaWEp0YVhOemFXOXVMV0Z3Y0hKdmRtRnNMV052Ym5SaGFXNWxjbDlmWW05c1pDMTBhWFJzWlMxbGJHVnRaVzUwYzF3aVhHNGdJQ0FnSUNBZ0lHaDBiV3c5ZTF4dUlDQWdJQ0FnSUNBZ0lEeGthWFlnYzNSNWJHVTllM3NnWkdsemNHeGhlVG9nSjJac1pYZ25MQ0JtYkdWNFJHbHlaV04wYVc5dU9pQW5ZMjlzZFcxdUp5QjlmVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lIdHpaV3hsWTNSbFpFbGtaVzUwYVhScFpYTXVjMnhwWTJVb01Dd2dOaWt1YldGd0tDaHBaR1Z1ZEdsMGVTd2dhVzVrWlhncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThaR2wySUd0bGVUMTdZSFJ2YjJ4MGFYQXRhV1JsYm5ScGRIa3RKSHRwYm1SbGVIMWdmVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0cFpHVnVkR2wwZVM1aFpHUnlaWE56VEdGaVpXeDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1gxY2JpQWdJQ0FnSUNBZ0lDQWdJSHR6Wld4bFkzUmxaRWxrWlc1MGFYUnBaWE11YkdWdVozUm9JRDRnTmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUhRb0ozQnNkWE5ZVFc5eVpTY3NJRnR6Wld4bFkzUmxaRWxrWlc1MGFYUnBaWE11YkdWdVozUm9JQzBnTmwwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2JuVnNiSDFjYmlBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNCN2RHVjRkRU52Ym5SbGJuUjlYRzRnSUNBZ0lDQThMMVJ2YjJ4MGFYQStYRzRnSUNBZ0tUdGNiaUFnZlZ4dVhHNGdJR2RsZEZScGRHeGxLQ2tnZTF4dUlDQWdJR052Ym5OMElIdGNiaUFnSUNBZ0lITjFZbXBsWTNSTlpYUmhaR0YwWVN4Y2JpQWdJQ0FnSUhObGJHVmpkR1ZrU1dSbGJuUnBkR2xsY3l4Y2JpQWdJQ0FnSUdGc2JFbGtaVzUwYVhScFpYTlRaV3hsWTNSbFpDeGNiaUFnSUNBZ0lITmxiR1ZqZEdWa1VHVnliV2x6YzJsdmJuTXNYRzRnSUNBZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc0Z0lDQWdZMjl1YzNRZ2V5QjBJSDBnUFNCMGFHbHpMbU52Ym5SbGVIUTdYRzVjYmlBZ0lDQnBaaUFvYzNWaWFtVmpkRTFsZEdGa1lYUmhMbVY0ZEdWdWMybHZia2xrS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZENnblpYaDBaWEp1WVd4RmVIUmxibk5wYjI0bkxDQmJjM1ZpYW1WamRFMWxkR0ZrWVhSaExtVjRkR1Z1YzJsdmJrbGtYU2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2doYzJWc1pXTjBaV1JRWlhKdGFYTnphVzl1Y3k1bGRHaGZZV05qYjNWdWRITXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBLQ2R3WlhKdGFYTnphVzl1VW1WeGRXVnpkRU5oY0dsMFlXeHBlbVZrSnlrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoaGJHeEpaR1Z1ZEdsMGFXVnpVMlZzWldOMFpXUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBLQ2RqYjI1dVpXTjBWRzlCYkd3bkxDQmJYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnVaR1Z5UVdOamIzVnVkRlJ2YjJ4MGFYQW9kQ2duWTI5dWJtVmpkRlJ2UVd4c1FXTmpiM1Z1ZEhNbktTa3NYRzRnSUNBZ0lDQmRLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE5sYkdWamRHVmtTV1JsYm5ScGRHbGxjeTVzWlc1bmRHZ2dQaUF4S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZENnblkyOXVibVZqZEZSdlRYVnNkR2x3YkdVbkxDQmJYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnVaR1Z5UVdOamIzVnVkRlJ2YjJ4MGFYQW9YRzRnSUNBZ0lDQWdJQ0FnZENnblkyOXVibVZqZEZSdlRYVnNkR2x3YkdWT2RXMWlaWEpQWmtGalkyOTFiblJ6Snl3Z1czTmxiR1ZqZEdWa1NXUmxiblJwZEdsbGN5NXNaVzVuZEdoZEtTeGNiaUFnSUNBZ0lDQWdLU3hjYmlBZ0lDQWdJRjBwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RDZ25ZMjl1Ym1WamRGUnZKeXdnVzNObGJHVmpkR1ZrU1dSbGJuUnBkR2xsYzFzd1hUOHVZV1JrY21WemMweGhZbVZzWFNrN1hHNGdJSDFjYmx4dUlDQnlaVzVrWlhJb0tTQjdYRzRnSUNBZ1kyOXVjM1FnZXlCemRXSnFaV04wVFdWMFlXUmhkR0VnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzRnSUNBZ1kyOXVjM1FnZXlCMElIMGdQU0IwYUdsekxtTnZiblJsZUhRN1hHNWNiaUFnSUNCamIyNXpkQ0IwYVhSc1pTQTlJSFJvYVhNdVoyVjBWR2wwYkdVb0tUdGNibHh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW5CbGNtMXBjM05wYjI0dFlYQndjbTkyWVd3dFkyOXVkR0ZwYm1WeVgxOWpiMjUwWlc1MFhDSStYRzRnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2ljR1Z5YldsemMybHZiaTFoY0hCeWIzWmhiQzFqYjI1MFlXbHVaWEpmWDJOdmJuUmxiblF0WTI5dWRHRnBibVZ5WENJK1hHNGdJQ0FnSUNBZ0lDQWdQRkJsY20xcGMzTnBiMjV6UTI5dWJtVmpkRWhsWVdSbGNseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdOdmJsVnliRDE3YzNWaWFtVmpkRTFsZEdGa1lYUmhMbWxqYjI1VmNteDlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFkyOXVUbUZ0WlQxN2MzVmlhbVZqZEUxbGRHRmtZWFJoTG01aGJXVjlYRzRnSUNBZ0lDQWdJQ0FnSUNCb1pXRmtaWEpVYVhSc1pUMTdkR2wwYkdWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JvWldGa1pYSlVaWGgwUFh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNWaWFtVmpkRTFsZEdGa1lYUmhMbVY0ZEdWdWMybHZia2xrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlCMEtDZGhiR3h2ZDBWNGRHVnlibUZzUlhoMFpXNXphVzl1Vkc4bkxDQmJjM1ZpYW1WamRFMWxkR0ZrWVhSaExtVjRkR1Z1YzJsdmJrbGtYU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUhRb0oyRnNiRzkzVkdocGMxTnBkR1ZVYnljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnphWFJsVDNKcFoybHVQWHR6ZFdKcVpXTjBUV1YwWVdSaGRHRXViM0pwWjJsdWZWeHVJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNBZ1BITmxZM1JwYjI0Z1kyeGhjM05PWVcxbFBWd2ljR1Z5YldsemMybHZiaTFoY0hCeWIzWmhiQzFqYjI1MFlXbHVaWEpmWDNCbGNtMXBjM05wYjI1ekxXTnZiblJoYVc1bGNsd2lQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2UzUm9hWE11Y21WdVpHVnlVbVZ4ZFdWemRHVmtVR1Z5YldsemMybHZibk1vS1gxY2JpQWdJQ0FnSUNBZ0lDQThMM05sWTNScGIyNCtYRzRnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCU1pXRmpkQ3dnZXlCRGIyMXdiMjVsYm5RZ2ZTQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnZXlCcGMwVnhkV0ZzSUgwZ1puSnZiU0FuYkc5a1lYTm9KenRjYm1sdGNHOXlkQ0I3SUUxbGRHRk5aWFJ5YVdOelJYWmxiblJEWVhSbFoyOXllU0I5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDNOb1lYSmxaQzlqYjI1emRHRnVkSE12YldWMFlXMWxkSEpwWTNNbk8xeHVhVzF3YjNKMElIc2dVR0ZuWlVOdmJuUmhhVzVsY2tadmIzUmxjaUI5SUdaeWIyMGdKeTR1THk0dUwzVnBMM0JoWjJVdFkyOXVkR0ZwYm1WeUp6dGNibWx0Y0c5eWRDQlFaWEp0YVhOemFXOXVjME52Ym01bFkzUkdiMjkwWlhJZ1puSnZiU0FuTGk0dmNHVnliV2x6YzJsdmJuTXRZMjl1Ym1WamRDMW1iMjkwWlhJbk8xeHVhVzF3YjNKMElIc2dVR1Z5YldsemMybHZibEJoWjJWRGIyNTBZV2x1WlhKRGIyNTBaVzUwSUgwZ1puSnZiU0FuTGljN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZCbGNtMXBjM05wYjI1UVlXZGxRMjl1ZEdGcGJtVnlJR1Y0ZEdWdVpITWdRMjl0Y0c5dVpXNTBJSHRjYmlBZ2MzUmhkR2xqSUhCeWIzQlVlWEJsY3lBOUlIdGNiaUFnSUNCaGNIQnliM1psVUdWeWJXbHpjMmx2Ym5OU1pYRjFaWE4wT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJSEpsYW1WamRGQmxjbTFwYzNOcGIyNXpVbVZ4ZFdWemREb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCelpXeGxZM1JsWkVsa1pXNTBhWFJwWlhNNklGQnliM0JVZVhCbGN5NWhjbkpoZVN4Y2JpQWdJQ0JoYkd4SlpHVnVkR2wwYVdWelUyVnNaV04wWldRNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJSEpsY1hWbGMzUTZJRkJ5YjNCVWVYQmxjeTV2WW1wbFkzUXNYRzRnSUNBZ2NtVnhkV1Z6ZEUxbGRHRmtZWFJoT2lCUWNtOXdWSGx3WlhNdWIySnFaV04wTEZ4dUlDQWdJSFJoY21kbGRGTjFZbXBsWTNSTlpYUmhaR0YwWVRvZ1VISnZjRlI1Y0dWekxuTm9ZWEJsS0h0Y2JpQWdJQ0FnSUc1aGJXVTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ0lDQnZjbWxuYVc0NklGQnliM0JVZVhCbGN5NXpkSEpwYm1jdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNBZ0lITjFZbXBsWTNSVWVYQmxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdJQ0JsZUhSbGJuTnBiMjVKWkRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0FnSUdsamIyNVZjbXc2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdmU2tzWEc0Z0lIMDdYRzVjYmlBZ2MzUmhkR2xqSUdSbFptRjFiSFJRY205d2N5QTlJSHRjYmlBZ0lDQnlaWEYxWlhOME9pQjdmU3hjYmlBZ0lDQnlaWEYxWlhOMFRXVjBZV1JoZEdFNklIdDlMRnh1SUNBZ0lITmxiR1ZqZEdWa1NXUmxiblJwZEdsbGN6b2dXMTBzWEc0Z0lDQWdZV3hzU1dSbGJuUnBkR2xsYzFObGJHVmpkR1ZrT2lCbVlXeHpaU3hjYmlBZ2ZUdGNibHh1SUNCemRHRjBhV01nWTI5dWRHVjRkRlI1Y0dWeklEMGdlMXh1SUNBZ0lIUTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUhSeVlXTnJSWFpsYm5RNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQjlPMXh1WEc0Z0lITjBZWFJsSUQwZ2UxeHVJQ0FnSUhObGJHVmpkR1ZrVUdWeWJXbHpjMmx2Ym5NNklIUm9hWE11WjJWMFVtVnhkV1Z6ZEdWa1RXVjBhRzlrVTNSaGRHVW9YRzRnSUNBZ0lDQjBhR2x6TG1kbGRGSmxjWFZsYzNSbFpFMWxkR2h2WkU1aGJXVnpLSFJvYVhNdWNISnZjSE1wTEZ4dUlDQWdJQ2tzWEc0Z0lIMDdYRzVjYmlBZ1kyOXRjRzl1Wlc1MFJHbGtWWEJrWVhSbEtDa2dlMXh1SUNBZ0lHTnZibk4wSUc1bGQwMWxkR2h2WkU1aGJXVnpJRDBnZEdocGN5NW5aWFJTWlhGMVpYTjBaV1JOWlhSb2IyUk9ZVzFsY3loMGFHbHpMbkJ5YjNCektUdGNibHh1SUNBZ0lHbG1JQ2doYVhORmNYVmhiQ2hQWW1wbFkzUXVhMlY1Y3loMGFHbHpMbk4wWVhSbExuTmxiR1ZqZEdWa1VHVnliV2x6YzJsdmJuTXBMQ0J1WlhkTlpYUm9iMlJPWVcxbGN5a3BJSHRjYmlBZ0lDQWdJQzh2SUhSb2FYTWdjMmh2ZFd4a0lHSmxJR0VnYm1WM0lISmxjWFZsYzNRc0lITnZJR3AxYzNRZ2IzWmxjbmR5YVhSbFhHNGdJQ0FnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHRjYmlBZ0lDQWdJQ0FnYzJWc1pXTjBaV1JRWlhKdGFYTnphVzl1Y3pvZ2RHaHBjeTVuWlhSU1pYRjFaWE4wWldSTlpYUm9iMlJUZEdGMFpTaHVaWGROWlhSb2IyUk9ZVzFsY3lrc1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQm5aWFJTWlhGMVpYTjBaV1JOWlhSb2IyUlRkR0YwWlNodFpYUm9iMlJPWVcxbGN5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCdFpYUm9iMlJPWVcxbGN5NXlaV1IxWTJVb0tHRmpZeXdnYldWMGFHOWtUbUZ0WlNrZ1BUNGdlMXh1SUNBZ0lDQWdZV05qVzIxbGRHaHZaRTVoYldWZElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUhKbGRIVnliaUJoWTJNN1hHNGdJQ0FnZlN3Z2UzMHBPMXh1SUNCOVhHNWNibHh1SUNCblpYUlNaWEYxWlhOMFpXUk5aWFJvYjJST1lXMWxjeWh3Y205d2N5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCUFltcGxZM1F1YTJWNWN5aHdjbTl3Y3k1eVpYRjFaWE4wTG5CbGNtMXBjM05wYjI1eklIeDhJSHQ5S1R0Y2JpQWdmVnh1WEc0Z0lHTnZiWEJ2Ym1WdWRFUnBaRTF2ZFc1MEtDa2dlMXh1SUNBZ0lIUm9hWE11WTI5dWRHVjRkQzUwY21GamEwVjJaVzUwS0h0Y2JpQWdJQ0FnSUdOaGRHVm5iM0o1T2lCTlpYUmhUV1YwY21samMwVjJaVzUwUTJGMFpXZHZjbmt1UVhWMGFDeGNiaUFnSUNBZ0lHVjJaVzUwT2lBblZHRmlJRTl3Wlc1bFpDY3NYRzRnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUdGamRHbHZiam9nSjBOdmJtNWxZM1FuTEZ4dUlDQWdJQ0FnSUNCc1pXZGhZM2xmWlhabGJuUTZJSFJ5ZFdVc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdiMjVEWVc1alpXd2dQU0FvS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnZXlCeVpYRjFaWE4wTENCeVpXcGxZM1JRWlhKdGFYTnphVzl1YzFKbGNYVmxjM1FnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzRnSUNBZ2NtVnFaV04wVUdWeWJXbHpjMmx2Ym5OU1pYRjFaWE4wS0hKbGNYVmxjM1F1YldWMFlXUmhkR0V1YVdRcE8xeHVJQ0I5TzF4dVhHNGdJRzl1VTNWaWJXbDBJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUh0Y2JpQWdJQ0FnSUhKbGNYVmxjM1E2SUY5eVpYRjFaWE4wTEZ4dUlDQWdJQ0FnWVhCd2NtOTJaVkJsY20xcGMzTnBiMjV6VW1WeGRXVnpkQ3hjYmlBZ0lDQWdJSEpsYW1WamRGQmxjbTFwYzNOcGIyNXpVbVZ4ZFdWemRDeGNiaUFnSUNBZ0lITmxiR1ZqZEdWa1NXUmxiblJwZEdsbGN5eGNiaUFnSUNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmx4dUlDQWdJR052Ym5OMElISmxjWFZsYzNRZ1BTQjdYRzRnSUNBZ0lDQXVMaTVmY21WeGRXVnpkQ3hjYmlBZ0lDQWdJSEJsY20xcGMzTnBiMjV6T2lCN0lDNHVMbDl5WlhGMVpYTjBMbkJsY20xcGMzTnBiMjV6SUgwc1hHNGdJQ0FnSUNCaGNIQnliM1psWkVGalkyOTFiblJ6T2lCelpXeGxZM1JsWkVsa1pXNTBhWFJwWlhNdWJXRndLRnh1SUNBZ0lDQWdJQ0FvYzJWc1pXTjBaV1JKWkdWdWRHbDBlU2tnUFQ0Z2MyVnNaV04wWldSSlpHVnVkR2wwZVM1aFpHUnlaWE56TEZ4dUlDQWdJQ0FnS1N4Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnVDJKcVpXTjBMbXRsZVhNb2RHaHBjeTV6ZEdGMFpTNXpaV3hsWTNSbFpGQmxjbTFwYzNOcGIyNXpLUzVtYjNKRllXTm9LQ2hyWlhrcElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTV6ZEdGMFpTNXpaV3hsWTNSbFpGQmxjbTFwYzNOcGIyNXpXMnRsZVYwcElIdGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElISmxjWFZsYzNRdWNHVnliV2x6YzJsdmJuTmJhMlY1WFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUdsbUlDaFBZbXBsWTNRdWEyVjVjeWh5WlhGMVpYTjBMbkJsY20xcGMzTnBiMjV6S1M1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQmhjSEJ5YjNabFVHVnliV2x6YzJsdmJuTlNaWEYxWlhOMEtISmxjWFZsYzNRcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WldwbFkzUlFaWEp0YVhOemFXOXVjMUpsY1hWbGMzUW9jbVZ4ZFdWemRDNXRaWFJoWkdGMFlTNXBaQ2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUhKbGJtUmxjaWdwSUh0Y2JpQWdJQ0JqYjI1emRDQjdYRzRnSUNBZ0lDQnlaWEYxWlhOMFRXVjBZV1JoZEdFc1hHNGdJQ0FnSUNCMFlYSm5aWFJUZFdKcVpXTjBUV1YwWVdSaGRHRXNYRzRnSUNBZ0lDQnpaV3hsWTNSbFpFbGtaVzUwYVhScFpYTXNYRzRnSUNBZ0lDQmhiR3hKWkdWdWRHbDBhV1Z6VTJWc1pXTjBaV1FzWEc0Z0lDQWdmU0E5SUhSb2FYTXVjSEp2Y0hNN1hHNWNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnUEdScGRpQmpiR0Z6YzA1aGJXVTlYQ0p3WVdkbExXTnZiblJoYVc1bGNpQndaWEp0YVhOemFXOXVMV0Z3Y0hKdmRtRnNMV052Ym5SaGFXNWxjbHdpUGx4dUlDQWdJQ0FnSUNBOFVHVnliV2x6YzJsdmJsQmhaMlZEYjI1MFlXbHVaWEpEYjI1MFpXNTBYRzRnSUNBZ0lDQWdJQ0FnY21WeGRXVnpkRTFsZEdGa1lYUmhQWHR5WlhGMVpYTjBUV1YwWVdSaGRHRjlYRzRnSUNBZ0lDQWdJQ0FnYzNWaWFtVmpkRTFsZEdGa1lYUmhQWHQwWVhKblpYUlRkV0pxWldOMFRXVjBZV1JoZEdGOVhHNGdJQ0FnSUNBZ0lDQWdjMlZzWldOMFpXUlFaWEp0YVhOemFXOXVjejE3ZEdocGN5NXpkR0YwWlM1elpXeGxZM1JsWkZCbGNtMXBjM05wYjI1emZWeHVJQ0FnSUNBZ0lDQWdJSE5sYkdWamRHVmtTV1JsYm5ScGRHbGxjejE3YzJWc1pXTjBaV1JKWkdWdWRHbDBhV1Z6ZlZ4dUlDQWdJQ0FnSUNBZ0lHRnNiRWxrWlc1MGFYUnBaWE5UWld4bFkzUmxaRDE3WVd4c1NXUmxiblJwZEdsbGMxTmxiR1ZqZEdWa2ZWeHVJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbkJsY20xcGMzTnBiMjR0WVhCd2NtOTJZV3d0WTI5dWRHRnBibVZ5WDE5bWIyOTBaWEp6WENJK1hHNGdJQ0FnSUNBZ0lDQWdQRkJsY20xcGMzTnBiMjV6UTI5dWJtVmpkRVp2YjNSbGNpQXZQbHh1SUNBZ0lDQWdJQ0FnSUR4UVlXZGxRMjl1ZEdGcGJtVnlSbTl2ZEdWeVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVc1alpXeENkWFIwYjI1VWVYQmxQVndpWkdWbVlYVnNkRndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia05oYm1ObGJEMTdLQ2tnUFQ0Z2RHaHBjeTV2YmtOaGJtTmxiQ2dwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ1WTJWc1ZHVjRkRDE3ZEdocGN5NWpiMjUwWlhoMExuUW9KMk5oYm1ObGJDY3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNVRkV0p0YVhROWV5Z3BJRDArSUhSb2FYTXViMjVUZFdKdGFYUW9LWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lITjFZbTFwZEZSbGVIUTllM1JvYVhNdVkyOXVkR1Y0ZEM1MEtDZGpiMjV1WldOMEp5bDlYRzRnSUNBZ0lDQWdJQ0FnSUNCaWRYUjBiMjVUYVhwbFRHRnlaMlU5ZTJaaGJITmxmVnh1SUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0tUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSHNnWTI5dWJtVmpkQ0I5SUdaeWIyMGdKM0psWVdOMExYSmxaSFY0Snp0Y2JtbHRjRzl5ZENCN1hHNGdJR2RsZEUxbGRHRk5ZWE5yU1dSbGJuUnBkR2xsY3l4Y2JuMGdabkp2YlNBbkxpNHZMaTR2TGk0dmMyVnNaV04wYjNKekp6dGNibWx0Y0c5eWRDQlFaWEp0YVhOemFXOXVVR0ZuWlVOdmJuUmhhVzVsY2lCbWNtOXRJQ2N1TDNCbGNtMXBjM05wYjI0dGNHRm5aUzFqYjI1MFlXbHVaWEl1WTI5dGNHOXVaVzUwSnp0Y2JseHVZMjl1YzNRZ2JXRndVM1JoZEdWVWIxQnliM0J6SUQwZ0tITjBZWFJsTENCdmQyNVFjbTl3Y3lrZ1BUNGdlMXh1SUNCamIyNXpkQ0I3SUhObGJHVmpkR1ZrU1dSbGJuUnBkR2xsY3lCOUlEMGdiM2R1VUhKdmNITTdYRzRnSUdOdmJuTjBJR0ZzYkVsa1pXNTBhWFJwWlhNZ1BTQm5aWFJOWlhSaFRXRnphMGxrWlc1MGFYUnBaWE1vYzNSaGRHVXBPMXh1SUNCamIyNXpkQ0JoYkd4SlpHVnVkR2wwYVdWelUyVnNaV04wWldRZ1BWeHVJQ0FnSUU5aWFtVmpkQzVyWlhsektITmxiR1ZqZEdWa1NXUmxiblJwZEdsbGN5a3ViR1Z1WjNSb0lEMDlQVnh1SUNBZ0lDQWdUMkpxWldOMExtdGxlWE1vWVd4c1NXUmxiblJwZEdsbGN5a3ViR1Z1WjNSb0lDWW1JSE5sYkdWamRHVmtTV1JsYm5ScGRHbGxjeTVzWlc1bmRHZ2dQaUF4TzF4dVhHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ1lXeHNTV1JsYm5ScGRHbGxjMU5sYkdWamRHVmtMRnh1SUNCOU8xeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTI5dWJtVmpkQ2h0WVhCVGRHRjBaVlJ2VUhKdmNITXBLRkJsY20xcGMzTnBiMjVRWVdkbFEyOXVkR0ZwYm1WeUtUdGNiaUlzSW1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnZlNCbWNtOXRJQ2N1TDNCbGNtMXBjM05wYjI1ekxXTnZibTVsWTNRdFptOXZkR1Z5TG1OdmJYQnZibVZ1ZENjN1hHNGlMQ0pwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJRkpsWVdOMExDQjdJRU52YlhCdmJtVnVkQ0I5SUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQmFSVTVFUlZOTFgxVlNURk1nWm5KdmJTQW5MaTR2TGk0dkxpNHZhR1ZzY0dWeWN5OWpiMjV6ZEdGdWRITXZlbVZ1WkdWemF5MTFjbXduTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJRWlhKdGFYTnphVzl1YzBOdmJtNWxZM1JHYjI5MFpYSWdaWGgwWlc1a2N5QkRiMjF3YjI1bGJuUWdlMXh1SUNCemRHRjBhV01nWTI5dWRHVjRkRlI1Y0dWeklEMGdlMXh1SUNBZ0lIUTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCN0lIUWdmU0E5SUhSb2FYTXVZMjl1ZEdWNGREdGNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnUEdScGRpQmpiR0Z6YzA1aGJXVTlYQ0p3WlhKdGFYTnphVzl1Y3kxamIyNXVaV04wTFdadmIzUmxjbHdpUGx4dUlDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW5CbGNtMXBjM05wYjI1ekxXTnZibTVsWTNRdFptOXZkR1Z5WDE5MFpYaDBYQ0krWEc0Z0lDQWdJQ0FnSUNBZ1BHUnBkajU3ZENnbmIyNXNlVU52Ym01bFkzUlVjblZ6ZENjcGZUd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBZ0lEeGthWFpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbkJsY20xcGMzTnBiMjV6TFdOdmJtNWxZM1F0Wm05dmRHVnlYMTkwWlhoMExTMXNhVzVyWENKY2JpQWdJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczlleWdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1oyeHZZbUZzTG5Cc1lYUm1iM0p0TG05d1pXNVVZV0lvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWeWJEb2dXa1ZPUkVWVFMxOVZVa3hUTGxWVFJWSmZSMVZKUkVWZlJFRlFVRk1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3ZENnbmJHVmhjbTVOYjNKbFZYQndaWEpEWVhObEp5bDlYRzRnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1SWl3aVpYaHdiM0owSUhzZ1pHVm1ZWFZzZENCOUlHWnliMjBnSnk0dmNHVnliV2x6YzJsdmJuTXRZMjl1Ym1WamRDMW9aV0ZrWlhJdVkyOXRjRzl1Wlc1MEp6dGNiaUlzSW1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnVW1WaFkzUXNJSHNnUTI5dGNHOXVaVzUwSUgwZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJR05zWVhOemJtRnRaWE1nWm5KdmJTQW5ZMnhoYzNOdVlXMWxjeWM3WEc1cGJYQnZjblFnVTJsMFpVOXlhV2RwYmlCbWNtOXRJQ2N1TGk4dUxpOTFhUzl6YVhSbExXOXlhV2RwYmljN1hHNXBiWEJ2Y25RZ1FtOTRJR1p5YjIwZ0p5NHVMeTR1TDNWcEwySnZlQ2M3WEc1cGJYQnZjblFnZTF4dUlDQkdURVZZWDBSSlVrVkRWRWxQVGl4Y2JpQWdTblZ6ZEdsbWVVTnZiblJsYm5Rc1hHNTlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyaGxiSEJsY25NdlkyOXVjM1JoYm5SekwyUmxjMmxuYmkxemVYTjBaVzBuTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJRWlhKdGFYTnphVzl1YzBOdmJtNWxZM1JJWldGa1pYSWdaWGgwWlc1a2N5QkRiMjF3YjI1bGJuUWdlMXh1WEc0Z0lITjBZWFJwWXlCd2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUNBZ1kyeGhjM05PWVcxbE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUdsamIyNVZjbXc2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdhV052Yms1aGJXVTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQnphWFJsVDNKcFoybHVPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdhR1ZoWkdWeVZHbDBiR1U2SUZCeWIzQlVlWEJsY3k1dWIyUmxMRnh1SUNBZ0lHSnZlRkJ5YjNCek9pQlFjbTl3Vkhsd1pYTXVjMmhoY0dVb2V5QXVMaTVDYjNndWNISnZjRlI1Y0dWeklIMHBMRnh1SUNBZ0lHaGxZV1JsY2xSbGVIUTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2JHVm1kRWxqYjI0NklGQnliM0JVZVhCbGN5NXViMlJsTEZ4dUlDQWdJSEpwWjJoMFNXTnZiam9nVUhKdmNGUjVjR1Z6TG01dlpHVXNYRzRnSUgwN1hHNWNiaUFnYzNSaGRHbGpJR1JsWm1GMWJIUlFjbTl3Y3lBOUlIdGNiaUFnSUNCcFkyOXVWWEpzT2lCdWRXeHNMRnh1SUNBZ0lHaGxZV1JsY2xScGRHeGxPaUFuSnl4Y2JpQWdJQ0JvWldGa1pYSlVaWGgwT2lBbkp5eGNiaUFnSUNCaWIzaFFjbTl3Y3pvZ2UzMHNYRzRnSUgwN1hHNWNiaUFnY21WdVpHVnlTR1ZoWkdWeVNXTnZiaWdwSUh0Y2JpQWdJQ0JqYjI1emRDQjdYRzRnSUNBZ0lDQnBZMjl1VlhKc0xGeHVJQ0FnSUNBZ2FXTnZiazVoYldVc1hHNGdJQ0FnSUNCemFYUmxUM0pwWjJsdUxGeHVJQ0FnSUNBZ2JHVm1kRWxqYjI0c1hHNGdJQ0FnSUNCeWFXZG9kRWxqYjI0c1hHNGdJQ0FnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzVjYmx4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0luQmxjbTFwYzNOcGIyNXpMV052Ym01bFkzUXRhR1ZoWkdWeVgxOXBZMjl1WENJK1hHNGdJQ0FnSUNBZ0lEeFRhWFJsVDNKcFoybHVYRzRnSUNBZ0lDQWdJQ0FnWTJocGNGeHVJQ0FnSUNBZ0lDQWdJSE5wZEdWUGNtbG5hVzQ5ZTNOcGRHVlBjbWxuYVc1OVhHNGdJQ0FnSUNBZ0lDQWdkR2wwYkdVOWUzTnBkR1ZQY21sbmFXNTlYRzRnSUNBZ0lDQWdJQ0FnYVdOdmJsTnlZejE3YVdOdmJsVnliSDFjYmlBZ0lDQWdJQ0FnSUNCdVlXMWxQWHRwWTI5dVRtRnRaWDFjYmlBZ0lDQWdJQ0FnSUNCc1pXWjBTV052YmoxN2JHVm1kRWxqYjI1OVhHNGdJQ0FnSUNBZ0lDQWdjbWxuYUhSSlkyOXVQWHR5YVdkb2RFbGpiMjU5WEc0Z0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQXBPMXh1SUNCOVhHNWNiaUFnY21WdVpHVnlLQ2tnZTF4dUlDQWdJR052Ym5OMElIdGNiaUFnSUNBZ0lHSnZlRkJ5YjNCekxGeHVJQ0FnSUNBZ1kyeGhjM05PWVcxbExGeHVJQ0FnSUNBZ2FHVmhaR1Z5VkdsMGJHVXNYRzRnSUNBZ0lDQm9aV0ZrWlhKVVpYaDBMRnh1SUNBZ0lIMGdQU0IwYUdsekxuQnliM0J6TzF4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThRbTk0WEc0Z0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN1kyeGhjM051WVcxbGN5Z25jR1Z5YldsemMybHZibk10WTI5dWJtVmpkQzFvWldGa1pYSW5MQ0JqYkdGemMwNWhiV1VwZlZ4dUlDQWdJQ0FnSUNCbWJHVjRSR2x5WldOMGFXOXVQWHRHVEVWWVgwUkpVa1ZEVkVsUFRpNURUMHhWVFU1OVhHNGdJQ0FnSUNBZ0lHcDFjM1JwWm5sRGIyNTBaVzUwUFh0S2RYTjBhV1o1UTI5dWRHVnVkQzVqWlc1MFpYSjlYRzRnSUNBZ0lDQWdJSHN1TGk1aWIzaFFjbTl3YzMxY2JpQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ2UzUm9hWE11Y21WdVpHVnlTR1ZoWkdWeVNXTnZiaWdwZlZ4dUlDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW5CbGNtMXBjM05wYjI1ekxXTnZibTVsWTNRdGFHVmhaR1Z5WDE5MGFYUnNaVndpUG50b1pXRmtaWEpVYVhSc1pYMDhMMlJwZGo1Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2ljR1Z5YldsemMybHZibk10WTI5dWJtVmpkQzFvWldGa1pYSmZYM04xWW5ScGRHeGxYQ0krZTJobFlXUmxjbFJsZUhSOVBDOWthWFkrWEc0Z0lDQWdJQ0E4TDBKdmVENWNiaUFnSUNBcE8xeHVJQ0I5WEc1OVhHNGlMQ0psZUhCdmNuUWdleUJrWldaaGRXeDBJSDBnWm5KdmJTQW5MaTl3WlhKdGFYTnphVzl1Y3kxamIyNXVaV04wTFhCbGNtMXBjM05wYjI0dGJHbHpkQ2M3WEc0aUxDSnBiWEJ2Y25RZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQjdYRzRnSUdkbGRGSnBaMmgwU1dOdmJpeGNiaUFnWjJWMFYyVnBaMmgwWldSUVpYSnRhWE56YVc5dWN5eGNibjBnWm5KdmJTQW5MaTR2TGk0dkxpNHZhR1ZzY0dWeWN5OTFkR2xzY3k5d1pYSnRhWE56YVc5dUp6dGNibWx0Y0c5eWRDQjdJSFZ6WlVreE9HNURiMjUwWlhoMElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dmFHOXZhM012ZFhObFNURTRia052Ym5SbGVIUW5PMXh1WEc0dktpcGNiaUFxSUVkbGRDQnZibVVnYjNJZ2JXOXlaU0J3WlhKdGFYTnphVzl1SUdSbGMyTnlhWEIwYVc5dWN5Qm1iM0lnWVNCd1pYSnRhWE56YVc5dUlHNWhiV1V1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSEJsY20xcGMzTnBiMjRnTFNCVWFHVWdjR1Z5YldsemMybHZiaUIwYnlCeVpXNWtaWEl1WEc0Z0tpQkFjR0Z5WVcwZ2FXNWtaWGdnTFNCVWFHVWdhVzVrWlhnZ2IyWWdkR2hsSUhCbGNtMXBjM05wYjI0dVhHNGdLaUJBY21WMGRYSnVjeUI3U2xOWUxrVnNaVzFsYm5SOUlFRWdjR1Z5YldsemMybHZiaUJrWlhOamNtbHdkR2x2YmlCdWIyUmxMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQm5aWFJFWlhOamNtbHdkR2x2Yms1dlpHVW9jR1Z5YldsemMybHZiaXdnYVc1a1pYZ3BJSHRjYmlBZ1kyOXVjM1FnZXlCc1lXSmxiQ3dnYkdWbWRFbGpiMjRzSUhCbGNtMXBjM05wYjI1T1lXMWxJSDBnUFNCd1pYSnRhWE56YVc5dU8xeHVYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSndaWEp0YVhOemFXOXVYQ0lnYTJWNVBYdGdKSHR3WlhKdGFYTnphVzl1VG1GdFpYMHRKSHRwYm1SbGVIMWdmVDVjYmlBZ0lDQWdJSHQwZVhCbGIyWWdiR1ZtZEVsamIyNGdQVDA5SUNkemRISnBibWNuSUQ4Z1BHa2dZMnhoYzNOT1lXMWxQWHRzWldaMFNXTnZibjBnTHo0Z09pQnNaV1owU1dOdmJuMWNiaUFnSUNBZ0lIdHNZV0psYkgxY2JpQWdJQ0FnSUh0blpYUlNhV2RvZEVsamIyNG9jR1Z5YldsemMybHZiaWw5WEc0Z0lDQWdQQzlrYVhZK1hHNGdJQ2s3WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlGQmxjbTFwYzNOcGIyNXpRMjl1Ym1WamRGQmxjbTFwYzNOcGIyNU1hWE4wS0h0Y2JpQWdjR1Z5YldsemMybHZibk1zWEc0Z0lIUmhjbWRsZEZOMVltcGxZM1JOWlhSaFpHRjBZU3hjYm4wcElIdGNiaUFnWTI5dWMzUWdkQ0E5SUhWelpVa3hPRzVEYjI1MFpYaDBLQ2s3WEc1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW5CbGNtMXBjM05wYjI1ekxXTnZibTVsWTNRdGNHVnliV2x6YzJsdmJpMXNhWE4wWENJK1hHNGdJQ0FnSUNCN1oyVjBWMlZwWjJoMFpXUlFaWEp0YVhOemFXOXVjeWgwTENCd1pYSnRhWE56YVc5dWN5d2dkR0Z5WjJWMFUzVmlhbVZqZEUxbGRHRmtZWFJoS1M1dFlYQW9YRzRnSUNBZ0lDQWdJR2RsZEVSbGMyTnlhWEIwYVc5dVRtOWtaU3hjYmlBZ0lDQWdJQ2w5WEc0Z0lDQWdQQzlrYVhZK1hHNGdJQ2s3WEc1OVhHNWNibEJsY20xcGMzTnBiMjV6UTI5dWJtVmpkRkJsY20xcGMzTnBiMjVNYVhOMExuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ2NHVnliV2x6YzJsdmJuTTZJRkJ5YjNCVWVYQmxjeTV2WW1wbFkzUXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ2RHRnlaMlYwVTNWaWFtVmpkRTFsZEdGa1lYUmhPaUJRY205d1ZIbHdaWE11YjJKcVpXTjBMbWx6VW1WeGRXbHlaV1FzWEc1OU8xeHVJaXdpYVcxd2IzSjBJRkpsWVdOMExDQjdJSFZ6WlVWbVptVmpkQ3dnZFhObFVtVm1MQ0IxYzJWVGRHRjBaU0I5SUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQnNiMmNnWm5KdmJTQW5iRzluYkdWMlpXd25PMXh1YVcxd2IzSjBJSHNnVlZKRVpXTnZaR1Z5SUgwZ1puSnZiU0FuUUc1bmNtRjJaV2x2TDJKakxYVnlKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnZXlCblpYUkZiblpwY205dWJXVnVkRlI1Y0dVZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOWhjSEF2YzJOeWFYQjBjeTlzYVdJdmRYUnBiQ2M3WEc1cGJYQnZjblFnZXlCRlRsWkpVazlPVFVWT1ZGOVVXVkJGWDBaVlRFeFRRMUpGUlU0Z2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwyRndjQ2M3WEc1cGJYQnZjblFnVjJWaVkyRnRWWFJwYkhNZ1puSnZiU0FuTGk0dkxpNHZMaTR2YUdWc2NHVnljeTkxZEdsc2N5OTNaV0pqWVcwdGRYUnBiSE1uTzF4dWFXMXdiM0owSUZCaFoyVkRiMjUwWVdsdVpYSkdiMjkwWlhJZ1puSnZiU0FuTGk0dkxpNHZkV2t2Y0dGblpTMWpiMjUwWVdsdVpYSXZjR0ZuWlMxamIyNTBZV2x1WlhJdFptOXZkR1Z5TDNCaFoyVXRZMjl1ZEdGcGJtVnlMV1p2YjNSbGNpNWpiMjF3YjI1bGJuUW5PMXh1YVcxd2IzSjBJSHNnZFhObFNURTRia052Ym5SbGVIUWdmU0JtY205dElDY3VMaTh1TGk4dUxpOW9iMjlyY3k5MWMyVkpNVGh1UTI5dWRHVjRkQ2M3WEc1cGJYQnZjblFnZXlCVFJVTlBUa1FnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2WTI5dWMzUmhiblJ6TDNScGJXVW5PMXh1YVcxd2IzSjBJRVZ1YUdGdVkyVmtVbVZoWkdWeUlHWnliMjBnSnk0dlpXNW9ZVzVqWldRdGNtVmhaR1Z5Snp0Y2JseHVZMjl1YzNRZ1VrVkJSRmxmVTFSQlZFVWdQU0I3WEc0Z0lFRkRRMFZUVTBsT1IxOURRVTFGVWtFNklDZEJRME5GVTFOSlRrZGZRMEZOUlZKQkp5eGNiaUFnVGtWRlJGOVVUMTlCVEV4UFYxOUJRME5GVTFNNklDZE9SVVZFWDFSUFgwRk1URTlYWDBGRFEwVlRVeWNzWEc0Z0lGSkZRVVJaT2lBblVrVkJSRmtuTEZ4dWZUdGNibHh1WTI5dWMzUWdRbUZ6WlZKbFlXUmxjaUE5SUNoN1hHNGdJR2x6VW1WaFpHbHVaMWRoYkd4bGRDeGNiaUFnYUdGdVpHeGxRMkZ1WTJWc0xGeHVJQ0JvWVc1a2JHVlRkV05qWlhOekxGeHVJQ0J6WlhSRmNuSnZjbFJwZEd4bExGeHVmU2tnUFQ0Z2UxeHVJQ0JqYjI1emRDQjBJRDBnZFhObFNURTRia052Ym5SbGVIUW9LVHRjYmlBZ1kyOXVjM1FnVzNKbFlXUjVMQ0J6WlhSU1pXRmtlVjBnUFNCMWMyVlRkR0YwWlNoU1JVRkVXVjlUVkVGVVJTNUJRME5GVTFOSlRrZGZRMEZOUlZKQktUdGNiaUFnWTI5dWMzUWdXMlZ5Y205eUxDQnpaWFJGY25KdmNsMGdQU0IxYzJWVGRHRjBaU2h1ZFd4c0tUdGNiaUFnWTI5dWMzUWdXM1Z5UkdWamIyUmxjaXdnYzJWMFZWSkVaV052WkdWeVhTQTlJSFZ6WlZOMFlYUmxLRzVsZHlCVlVrUmxZMjlrWlhJb0tTazdYRzVjYmlBZ2JHVjBJSEJsY20xcGMzTnBiMjVEYUdWamEyVnlJRDBnYm5Wc2JEdGNiaUFnWTI5dWMzUWdiVzkxYm5SbFpDQTlJSFZ6WlZKbFppaG1ZV3h6WlNrN1hHNWNiaUFnWTI5dWMzUWdjbVZ6WlhRZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnYzJWMFVtVmhaSGtvVWtWQlJGbGZVMVJCVkVVdVFVTkRSVk5UU1U1SFgwTkJUVVZTUVNrN1hHNGdJQ0FnYzJWMFJYSnliM0lvYm5Wc2JDazdYRzRnSUNBZ2MyVjBWVkpFWldOdlpHVnlLRzVsZHlCVlVrUmxZMjlrWlhJb0tTazdYRzRnSUgwN1hHNWNiaUFnWTI5dWMzUWdZMmhsWTJ0RmJuWnBjbTl1YldWdWRDQTlJR0Z6ZVc1aklDZ3BJRDArSUh0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnZXlCbGJuWnBjbTl1YldWdWRGSmxZV1I1SUgwZ1BTQmhkMkZwZENCWFpXSmpZVzFWZEdsc2N5NWphR1ZqYTFOMFlYUjFjeWdwTzF4dUlDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWhaVzUyYVhKdmJtMWxiblJTWldGa2VTQW1KbHh1SUNBZ0lDQWdJQ0JuWlhSRmJuWnBjbTl1YldWdWRGUjVjR1VvS1NBaFBUMGdSVTVXU1ZKUFRrMUZUbFJmVkZsUVJWOUdWVXhNVTBOU1JVVk9YRzRnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZM1Z5Y21WdWRGVnliQ0E5SUc1bGR5QlZVa3dvZDJsdVpHOTNMbXh2WTJGMGFXOXVMbWh5WldZcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamRYSnlaVzUwU0dGemFDQTlJR04xY25KbGJuUlZjbXd1YUdGemFEdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kzVnljbVZ1ZEZKdmRYUmxJRDBnWTNWeWNtVnVkRWhoYzJnZ1B5QmpkWEp5Wlc1MFNHRnphQzV6ZFdKemRISnBibWNvTVNrZ09pQnVkV3hzTzF4dUlDQWdJQ0FnSUNCbmJHOWlZV3d1Y0d4aGRHWnZjbTB1YjNCbGJrVjRkR1Z1YzJsdmJrbHVRbkp2ZDNObGNpaGpkWEp5Wlc1MFVtOTFkR1VwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUdsbUlDaHRiM1Z1ZEdWa0xtTjFjbkpsYm5RcElIdGNiaUFnSUNBZ0lDQWdjMlYwUlhKeWIzSW9aU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJR2x1YVhScFlXd2dZWFIwWlcxd2RDQnBjeUJ5WlhGMWFYSmxaQ0IwYnlCMGNtbG5aMlZ5SUhCbGNtMXBjM05wYjI0Z2NISnZiWEIwWEc0Z0lDQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRzV2TFhWelpTMWlaV1p2Y21VdFpHVm1hVzVsWEc0Z0lDQWdjbVYwZFhKdUlHbHVhWFJEWVcxbGNtRW9LVHRjYmlBZ2ZUdGNibHh1SUNCamIyNXpkQ0JqYUdWamExQmxjbTFwYzNOcGIyNXpJRDBnWVhONWJtTWdLQ2tnUFQ0Z2UxeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCN0lIQmxjbTFwYzNOcGIyNXpJSDBnUFNCaGQyRnBkQ0JYWldKallXMVZkR2xzY3k1amFHVmphMU4wWVhSMWN5Z3BPMXh1SUNBZ0lDQWdhV1lnS0hCbGNtMXBjM05wYjI1ektTQjdYRzRnSUNBZ0lDQWdJQzh2SUV4bGRDQjBhR1VnZG1sa1pXOGdjM1J5WldGdElHeHZZV1FnWm1seWMzUXVMaTVjYmlBZ0lDQWdJQ0FnWVhkaGFYUWdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVwSUQwK0lITmxkRlJwYldWdmRYUW9jbVZ6YjJ4MlpTd2dVMFZEVDA1RUlDb2dNaWtwTzF4dUlDQWdJQ0FnSUNCcFppQW9JVzF2ZFc1MFpXUXVZM1Z5Y21WdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCelpYUlNaV0ZrZVNoU1JVRkVXVjlUVkVGVVJTNVNSVUZFV1NrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHMXZkVzUwWldRdVkzVnljbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJMWldWd0lHTm9aV05yYVc1bklHWnZjaUJ3WlhKdGFYTnphVzl1YzF4dUlDQWdJQ0FnSUNCd1pYSnRhWE56YVc5dVEyaGxZMnRsY2lBOUlITmxkRlJwYldWdmRYUW9ZMmhsWTJ0UVpYSnRhWE56YVc5dWN5d2dVMFZEVDA1RUtUdGNiaUFnSUNBZ0lDQWdjMlYwVW1WaFpIa29Va1ZCUkZsZlUxUkJWRVV1VGtWRlJGOVVUMTlCVEV4UFYxOUJRME5GVTFNcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lHbG1JQ2h0YjNWdWRHVmtMbU4xY25KbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnYzJWMFJYSnliM0lvWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lHTnZibk4wSUdoaGJtUnNaVk5qWVc0Z1BTQW9aR0YwWVNrZ1BUNGdlMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0JwWmlBb0lXUmhkR0VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZFhKRVpXTnZaR1Z5TG5KbFkyVnBkbVZRWVhKMEtHUmhkR0VwTzF4dUlDQWdJQ0FnYVdZZ0tIVnlSR1ZqYjJSbGNpNXBjME52YlhCc1pYUmxLQ2twSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY21WemRXeDBJRDBnZFhKRVpXTnZaR1Z5TG5KbGMzVnNkRlZTS0NrN1hHNGdJQ0FnSUNBZ0lHaGhibVJzWlZOMVkyTmxjM01vY21WemRXeDBLUzVqWVhSamFDaHpaWFJGY25KdmNpazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdhV1lnS0dselVtVmhaR2x1WjFkaGJHeGxkQ2tnZTF4dUlDQWdJQ0FnSUNCelpYUkZjbkp2Y2xScGRHeGxLSFFvSjFGU1NHRnlaSGRoY21WVmJtdHViM2R1VVZKRGIyUmxWR2wwYkdVbktTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnpaWFJGY25KdmNsUnBkR3hsS0hRb0oxRlNTR0Z5WkhkaGNtVkpiblpoYkdsa1ZISmhibk5oWTNScGIyNVVhWFJzWlNjcEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lITmxkRVZ5Y205eUtHNWxkeUJGY25KdmNpaDBLQ2QxYm10dWIzZHVVWEpEYjJSbEp5a3BLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnWTI5dWMzUWdhVzVwZEVOaGJXVnlZU0E5SUNncElEMCtJSHRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnWTJobFkydFFaWEp0YVhOemFXOXVjeWdwTzF4dUlDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hiVzkxYm5SbFpDNWpkWEp5Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2hsTG01aGJXVWdQVDA5SUNkT2IzUkJiR3h2ZDJWa1JYSnliM0luS1NCN1hHNGdJQ0FnSUNBZ0lHeHZaeTVwYm1adktHQlFaWEp0YVhOemFXOXVJR1JsYm1sbFpEb2dKeVI3WlgwbllDazdYRzRnSUNBZ0lDQWdJSE5sZEZKbFlXUjVLRkpGUVVSWlgxTlVRVlJGTGs1RlJVUmZWRTlmUVV4TVQxZGZRVU5EUlZOVEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lITmxkRVZ5Y205eUtHVXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0IxYzJWRlptWmxZM1FvS0NrZ1BUNGdlMXh1SUNBZ0lHMXZkVzUwWldRdVkzVnljbVZ1ZENBOUlIUnlkV1U3WEc0Z0lDQWdZMmhsWTJ0RmJuWnBjbTl1YldWdWRDZ3BPMXh1SUNBZ0lISmxkSFZ5YmlBb0tTQTlQaUI3WEc0Z0lDQWdJQ0J0YjNWdWRHVmtMbU4xY25KbGJuUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lHTnNaV0Z5VkdsdFpXOTFkQ2h3WlhKdGFYTnphVzl1UTJobFkydGxjaWs3WEc0Z0lDQWdmVHRjYmlBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdjbVZoWTNRdGFHOXZhM012Wlhob1lYVnpkR2wyWlMxa1pYQnpYRzRnSUgwc0lGdGRLVHRjYmx4dUlDQjFjMlZGWm1abFkzUW9LQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDaHlaV0ZrZVNBOVBUMGdVa1ZCUkZsZlUxUkJWRVV1VWtWQlJGa3BJSHRjYmlBZ0lDQWdJR2x1YVhSRFlXMWxjbUVvS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hKbFlXUjVJRDA5UFNCU1JVRkVXVjlUVkVGVVJTNU9SVVZFWDFSUFgwRk1URTlYWDBGRFEwVlRVeWtnZTF4dUlDQWdJQ0FnWTJobFkydFFaWEp0YVhOemFXOXVjeWdwTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdjbVZoWTNRdGFHOXZhM012Wlhob1lYVnpkR2wyWlMxa1pYQnpYRzRnSUgwc0lGdHlaV0ZrZVYwcE8xeHVYRzRnSUdOdmJuTjBJSFJ5ZVVGbllXbHVJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHTnNaV0Z5VkdsdFpXOTFkQ2h3WlhKdGFYTnphVzl1UTJobFkydGxjaWs3WEc0Z0lDQWdjbVZ6WlhRb0tUdGNiaUFnSUNCamFHVmphMFZ1ZG1seWIyNXRaVzUwS0NrN1hHNGdJSDA3WEc1Y2JpQWdZMjl1YzNRZ2NtVnVaR1Z5UlhKeWIzSWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2JHVjBJSFJwZEd4bExDQnRjMmM3WEc0Z0lDQWdhV1lnS0dWeWNtOXlMblI1Y0dVZ1BUMDlJQ2RPVDE5WFJVSkRRVTFmUms5VlRrUW5LU0I3WEc0Z0lDQWdJQ0IwYVhSc1pTQTlJSFFvSjI1dlYyVmlZMkZ0Um05MWJtUlVhWFJzWlNjcE8xeHVJQ0FnSUNBZ2JYTm5JRDBnZENnbmJtOVhaV0pqWVcxR2IzVnVaQ2NwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvWlhKeWIzSXViV1Z6YzJGblpTQTlQVDBnZENnbmRXNXJibTkzYmxGeVEyOWtaU2NwS1NCN1hHNGdJQ0FnSUNCcFppQW9hWE5TWldGa2FXNW5WMkZzYkdWMEtTQjdYRzRnSUNBZ0lDQWdJRzF6WnlBOUlIUW9KMUZTU0dGeVpIZGhjbVZWYm10dWIzZHVWMkZzYkdWMFVWSkRiMlJsSnlrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCdGMyY2dQU0IwS0NkMWJtdHViM2R1VVhKRGIyUmxKeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hsY25KdmNpNXRaWE56WVdkbElEMDlQU0IwS0NkUlVraGhjbVIzWVhKbFRXbHpiV0YwWTJobFpGTnBaMjVKWkNjcEtTQjdYRzRnSUNBZ0lDQnRjMmNnUFNCMEtDZFJVa2hoY21SM1lYSmxUV2x6YldGMFkyaGxaRk5wWjI1SlpDY3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFYUnNaU0E5SUhRb0ozVnVhMjV2ZDI1RFlXMWxjbUZGY25KdmNsUnBkR3hsSnlrN1hHNGdJQ0FnSUNCdGMyY2dQU0IwS0NkMWJtdHViM2R1UTJGdFpYSmhSWEp5YjNJbktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnUEQ1Y2JpQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKeGNpMXpZMkZ1Ym1WeVgxOXBiV0ZuWlZ3aVBseHVJQ0FnSUNBZ0lDQWdJRHhwYldjZ2MzSmpQVndpYVcxaFoyVnpMM2RsWW1OaGJTNXpkbWRjSWlCM2FXUjBhRDFjSWpjd1hDSWdhR1ZwWjJoMFBWd2lOekJjSWlCaGJIUTlYQ0pjSWlBdlBseHVJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ2UzUnBkR3hsSUQ4Z1BHUnBkaUJqYkdGemMwNWhiV1U5WENKeGNpMXpZMkZ1Ym1WeVgxOTBhWFJzWlZ3aVBudDBhWFJzWlgwOEwyUnBkajRnT2lCdWRXeHNmVnh1SUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbkZ5TFhOallXNXVaWEpmWDJWeWNtOXlYQ0krZTIxelozMDhMMlJwZGo1Y2JpQWdJQ0FnSUNBZ1BGQmhaMlZEYjI1MFlXbHVaWEpHYjI5MFpYSmNiaUFnSUNBZ0lDQWdJQ0J2YmtOaGJtTmxiRDE3S0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBSWEp5YjNKVWFYUnNaU2duSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a2JHVkRZVzVqWld3b0tUdGNiaUFnSUNBZ0lDQWdJQ0I5ZlZ4dUlDQWdJQ0FnSUNBZ0lHOXVVM1ZpYldsMFBYc29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WlhSRmNuSnZjbFJwZEd4bEtDY25LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnllVUZuWVdsdUtDazdYRzRnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0lDQmpZVzVqWld4VVpYaDBQWHQwS0NkallXNWpaV3duS1gxY2JpQWdJQ0FnSUNBZ0lDQnpkV0p0YVhSVVpYaDBQWHQwS0NkMGNubEJaMkZwYmljcGZWeHVJQ0FnSUNBZ0lDQWdJSE4xWW0xcGRFSjFkSFJ2YmxSNWNHVTlYQ0pqYjI1bWFYSnRYQ0pjYmlBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUR3dlBseHVJQ0FnSUNrN1hHNGdJSDA3WEc1Y2JpQWdZMjl1YzNRZ2NtVnVaR1Z5Vm1sa1pXOGdQU0FvS1NBOVBpQjdYRzRnSUNBZ2JHVjBJRzFsYzNOaFoyVTdYRzRnSUNBZ2FXWWdLSEpsWVdSNUlEMDlQU0JTUlVGRVdWOVRWRUZVUlM1QlEwTkZVMU5KVGtkZlEwRk5SVkpCS1NCN1hHNGdJQ0FnSUNCdFpYTnpZV2RsSUQwZ2RDZ25ZV05qWlhOemFXNW5XVzkxY2tOaGJXVnlZU2NwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvY21WaFpIa2dQVDA5SUZKRlFVUlpYMU5VUVZSRkxsSkZRVVJaS1NCN1hHNGdJQ0FnSUNCdFpYTnpZV2RsSUQwZ2RDZ25VVkpJWVhKa2QyRnlaVk5qWVc1SmJuTjBjblZqZEdsdmJuTW5LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEpsWVdSNUlEMDlQU0JTUlVGRVdWOVRWRUZVUlM1T1JVVkVYMVJQWDBGTVRFOVhYMEZEUTBWVFV5a2dlMXh1SUNBZ0lDQWdiV1Z6YzJGblpTQTlJSFFvSjNsdmRVNWxaV1JVYjBGc2JHOTNRMkZ0WlhKaFFXTmpaWE56SnlrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThQbHh1SUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbkZ5TFhOallXNXVaWEpmWDJOdmJuUmxiblJjSWo1Y2JpQWdJQ0FnSUNBZ0lDQThSVzVvWVc1alpXUlNaV0ZrWlhJZ2FHRnVaR3hsVTJOaGJqMTdhR0Z1Wkd4bFUyTmhibjBnTHo1Y2JpQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FnSUh0dFpYTnpZV2RsSUNZbUlEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWNYSXRjMk5oYm01bGNsOWZjM1JoZEhWelhDSStlMjFsYzNOaFoyVjlQQzlrYVhZK2ZWeHVJQ0FnSUNBZ1BDOCtYRzRnSUNBZ0tUdGNiaUFnZlR0Y2JseHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWNYSXRjMk5oYm01bGNsd2lQbnRsY25KdmNpQS9JSEpsYm1SbGNrVnljbTl5S0NrZ09pQnlaVzVrWlhKV2FXUmxieWdwZlR3dlpHbDJQbHh1SUNBcE8xeHVmVHRjYmx4dVFtRnpaVkpsWVdSbGNpNXdjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lHbHpVbVZoWkdsdVoxZGhiR3hsZERvZ1VISnZjRlI1Y0dWekxtSnZiMnd1YVhOU1pYRjFhWEpsWkN4Y2JpQWdhR0Z1Wkd4bFEyRnVZMlZzT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQm9ZVzVrYkdWVGRXTmpaWE56T2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQnpaWFJGY25KdmNsUnBkR3hsT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dWZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdRbUZ6WlZKbFlXUmxjanRjYmlJc0ltbHRjRzl5ZENCU1pXRmpkQ3dnZXlCMWMyVkZabVpsWTNRc0lIVnpaVTFsYlc4c0lIVnpaVk4wWVhSbElIMGdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUhzZ1FtRnlZMjlrWlVadmNtMWhkQ3dnUkdWamIyUmxTR2x1ZEZSNWNHVWdmU0JtY205dElDZEFlbmhwYm1jdmJHbGljbUZ5ZVNjN1hHNXBiWEJ2Y25RZ2V5QkNjbTkzYzJWeVVWSkRiMlJsVW1WaFpHVnlJSDBnWm5KdmJTQW5RSHA0YVc1bkwySnliM2R6WlhJbk8xeHVhVzF3YjNKMElHeHZaeUJtY205dElDZHNiMmRzWlhabGJDYzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJSHNnVFVsTVRFbFRSVU5QVGtRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwzUnBiV1VuTzF4dWFXMXdiM0owSUZOd2FXNXVaWElnWm5KdmJTQW5MaTR2TGk0dmRXa3ZjM0JwYm01bGNpYzdYRzVjYm1OdmJuTjBJRVZ1YUdGdVkyVmtVbVZoWkdWeUlEMGdLSHNnYUdGdVpHeGxVMk5oYmlCOUtTQTlQaUI3WEc0Z0lHTnZibk4wSUZ0allXNXdiR0Y1TENCelpYUkRZVzV3YkdGNVhTQTlJSFZ6WlZOMFlYUmxLR1poYkhObEtUdGNiaUFnWTI5dWMzUWdZMjlrWlZKbFlXUmxjaUE5SUhWelpVMWxiVzhvS0NrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUdocGJuUWdQU0J1WlhjZ1RXRndLQ2s3WEc0Z0lDQWdhR2x1ZEM1elpYUW9SR1ZqYjJSbFNHbHVkRlI1Y0dVdVVFOVRVMGxDVEVWZlJrOVNUVUZVVXl3Z1cwSmhjbU52WkdWR2IzSnRZWFF1VVZKZlEwOUVSVjBwTzF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnUW5KdmQzTmxjbEZTUTI5a1pWSmxZV1JsY2lob2FXNTBMQ0I3WEc0Z0lDQWdJQ0JrWld4aGVVSmxkSGRsWlc1VFkyRnVRWFIwWlcxd2RITTZJRTFKVEV4SlUwVkRUMDVFSUNvZ01UQXdMRnh1SUNBZ0lDQWdaR1ZzWVhsQ1pYUjNaV1Z1VTJOaGJsTjFZMk5sYzNNNklFMUpURXhKVTBWRFQwNUVJQ29nTVRBd0xGeHVJQ0FnSUgwcE8xeHVJQ0I5TENCYlhTazdYRzVjYmlBZ2RYTmxSV1ptWldOMEtDZ3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQjJhV1JsYjBWc1pXMGdQU0JrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDZ25kbWxrWlc4bktUdGNiaUFnSUNCamIyNXpkQ0JqWVc1d2JHRjVUR2x6ZEdWdVpYSWdQU0FvS1NBOVBpQjdYRzRnSUNBZ0lDQnpaWFJEWVc1d2JHRjVLSFJ5ZFdVcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnZG1sa1pXOUZiR1Z0TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOaGJuQnNZWGtuTENCallXNXdiR0Y1VEdsemRHVnVaWElwTzF4dUlDQWdJR052Ym5OMElIQnliMjFwYzJVZ1BTQmpiMlJsVW1WaFpHVnlMbVJsWTI5a1pVWnliMjFXYVdSbGIwUmxkbWxqWlNoY2JpQWdJQ0FnSUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0FnSUNkMmFXUmxieWNzWEc0Z0lDQWdJQ0FvY21WemRXeDBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WlhOMWJIUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCb1lXNWtiR1ZUWTJGdUtISmxjM1ZzZEM1blpYUlVaWGgwS0NrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDazdYRzRnSUNBZ2NtVjBkWEp1SUNncElEMCtJSHRjYmlBZ0lDQWdJSFpwWkdWdlJXeGxiUzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkallXNXdiR0Y1Snl3Z1kyRnVjR3hoZVV4cGMzUmxibVZ5S1R0Y2JpQWdJQ0FnSUhCeWIyMXBjMlZjYmlBZ0lDQWdJQ0FnTG5Sb1pXNG9LR052Ym5SeWIyeHpLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dOdmJuUnliMnh6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGNtOXNjeTV6ZEc5d0tDazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQXVZMkYwWTJnb2JHOW5MbWx1Wm04cE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUhKbFlXTjBMV2h2YjJ0ekwyVjRhR0YxYzNScGRtVXRaR1Z3YzF4dUlDQjlMQ0JiWFNrN1hHNWNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0luRnlMWE5qWVc1dVpYSmZYMk52Ym5SbGJuUmZYM1pwWkdWdkxYZHlZWEJ3WlhKY0lqNWNiaUFnSUNBZ0lEeDJhV1JsYjF4dUlDQWdJQ0FnSUNCcFpEMWNJblpwWkdWdlhDSmNiaUFnSUNBZ0lDQWdjM1I1YkdVOWUzdGNiaUFnSUNBZ0lDQWdJQ0JrYVhOd2JHRjVPaUJqWVc1d2JHRjVJRDhnSjJKc2IyTnJKeUE2SUNkdWIyNWxKeXhjYmlBZ0lDQWdJQ0FnSUNCM2FXUjBhRG9nSnpFd01DVW5MRnh1SUNBZ0lDQWdJQ0FnSUdacGJIUmxjam9nSjJKc2RYSW9OSEI0S1Njc1hHNGdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdlMk5oYm5Cc1lYa2dQeUJ1ZFd4c0lEb2dQRk53YVc1dVpYSWdZMjlzYjNJOVhDSjJZWElvTFMxamIyeHZjaTEzWVhKdWFXNW5MV1JsWm1GMWJIUXBYQ0lnTHo1OVhHNGdJQ0FnUEM5a2FYWStYRzRnSUNrN1hHNTlPMXh1WEc1RmJtaGhibU5sWkZKbFlXUmxjaTV3Y205d1ZIbHdaWE1nUFNCN1hHNGdJR2hoYm1Sc1pWTmpZVzQ2SUZCeWIzQlVlWEJsY3k1bWRXNWpMbWx6VW1WeGRXbHlaV1FzWEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkZibWhoYm1ObFpGSmxZV1JsY2p0Y2JpSXNJbWx0Y0c5eWRDQlJVa2hoY21SM1lYSmxVRzl3YjNabGNpQm1jbTl0SUNjdUwzRnlMV2hoY21SM1lYSmxMWEJ2Y0c5MlpYSW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JSVWtoaGNtUjNZWEpsVUc5d2IzWmxjanRjYmlJc0ltbHRjRzl5ZENCU1pXRmpkQ3dnZXlCMWMyVkRZV3hzWW1GamF5d2dkWE5sVFdWdGJ5d2dkWE5sVTNSaGRHVWdmU0JtY205dElDZHlaV0ZqZENjN1hHNXBiWEJ2Y25RZ2V5QjFjMlZFYVhOd1lYUmphQ3dnZFhObFUyVnNaV04wYjNJZ2ZTQm1jbTl0SUNkeVpXRmpkQzF5WldSMWVDYzdYRzVwYlhCdmNuUWdleUJuWlhSRGRYSnlaVzUwVVZKSVlYSmtkMkZ5WlZOMFlYUmxJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZjMlZzWldOMGIzSnpKenRjYm1sdGNHOXlkQ0JRYjNCdmRtVnlJR1p5YjIwZ0p5NHVMeTR1TDNWcEwzQnZjRzkyWlhJbk8xeHVhVzF3YjNKMElIc2dkWE5sU1RFNGJrTnZiblJsZUhRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5b2IyOXJjeTkxYzJWSk1UaHVRMjl1ZEdWNGRDYzdYRzVwYlhCdmNuUWdlMXh1SUNCallXNWpaV3hUZVc1alVWSklZWEprZDJGeVpTQmhjeUJqWVc1alpXeFRlVzVqVVZKSVlYSmtkMkZ5WlVGamRHbHZiaXhjYmlBZ1kyRnVZMlZzVVZKSVlYSmtkMkZ5WlZOcFoyNVNaWEYxWlhOMElHRnpJR05oYm1ObGJGRlNTR0Z5WkhkaGNtVlRhV2R1VW1WeGRXVnpkRUZqZEdsdmJpeGNiaUFnWTJGdVkyVnNWSGdzWEc0Z0lHTmhibU5sYkZCbGNuTnZibUZzVFhObkxGeHVJQ0JqWVc1alpXeE5jMmNzWEc0Z0lHTmhibU5sYkZSNWNHVmtUWE5uTEZ4dWZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5emRHOXlaUzloWTNScGIyNXpKenRjYm1sdGNHOXlkQ0I3SUUxRlUxTkJSMFZmVkZsUVJTQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZZWEJ3Snp0Y2JtbHRjRzl5ZENCUlVraGhjbVIzWVhKbFYyRnNiR1YwU1cxd2IzSjBaWElnWm5KdmJTQW5MaTl4Y2kxb1lYSmtkMkZ5WlMxM1lXeHNaWFF0YVcxd2IzSjBaWEluTzF4dWFXMXdiM0owSUZGU1NHRnlaSGRoY21WVGFXZHVVbVZ4ZFdWemRDQm1jbTl0SUNjdUwzRnlMV2hoY21SM1lYSmxMWE5wWjI0dGNtVnhkV1Z6ZENjN1hHNWNibU52Ym5OMElGRlNTR0Z5WkhkaGNtVlFiM0J2ZG1WeUlEMGdLQ2tnUFQ0Z2UxeHVJQ0JqYjI1emRDQjBJRDBnZFhObFNURTRia052Ym5SbGVIUW9LVHRjYmx4dUlDQmpiMjV6ZENCeGNraGhjbVIzWVhKbElEMGdkWE5sVTJWc1pXTjBiM0lvWjJWMFEzVnljbVZ1ZEZGU1NHRnlaSGRoY21WVGRHRjBaU2s3WEc0Z0lHTnZibk4wSUhzZ2MzbHVZeXdnYzJsbmJpQjlJRDBnY1hKSVlYSmtkMkZ5WlR0Y2JpQWdZMjl1YzNRZ2MyaHZkMWRoYkd4bGRFbHRjRzl5ZEdWeUlEMGdjM2x1WXo4dWNtVmhaR2x1Wnp0Y2JpQWdZMjl1YzNRZ2MyaHZkMU5wWjI1U1pYRjFaWE4wSUQwZ2MybG5iajh1Y21WeGRXVnpkRHRjYmlBZ1kyOXVjM1FnYzJodmQxQnZjRzkyWlhJZ1BTQnphRzkzVjJGc2JHVjBTVzF3YjNKMFpYSWdmSHdnYzJodmQxTnBaMjVTWlhGMVpYTjBPMXh1SUNCamIyNXpkQ0JiWlhKeWIzSlVhWFJzWlN3Z2MyVjBSWEp5YjNKVWFYUnNaVjBnUFNCMWMyVlRkR0YwWlNnbkp5azdYRzVjYmlBZ1kyOXVjM1FnZXlCMGVFUmhkR0VnZlNBOUlIVnpaVk5sYkdWamRHOXlLQ2h6ZEdGMFpTa2dQVDRnZTF4dUlDQWdJSEpsZEhWeWJpQnpkR0YwWlM1amIyNW1hWEp0VkhKaGJuTmhZM1JwYjI0N1hHNGdJSDBwTzF4dUlDQXZMeUIwYUdVZ1kyOXVabWx5YlZSeVlXNXpZV04wYVc5dUozTWdiR2xtWlNCamVXTnNaU0JwY3lCdWIzUWdZMjl1YzJsemRHVnVkQ0IzYVhSb0lGRlNJR2hoY21SM1lYSmxJSGRoYkd4bGREdGNiaUFnTHk4Z2RHaGxJR052Ym1acGNtMVVjbUZ1YzJGamRHbHZiaUIzYVd4c0lHTm9ZVzVuWlNCaFpuUmxjaUIwYUdVZ2NISmxkbWx2ZFhNZ2RIZ2dhWE1nWTI5dVptbHliV1ZrSUc5eUlHTmhibU5sYkN4Y2JpQWdMeThnZDJVZ2QyRnVkQ0IwYnlCaWJHOWpheUIwYUdVZ1kyaGhibWRwYm1jZ1lua2djMmxuYmlCeVpYRjFaWE4wSUdsa08xeHVJQ0JqYjI1emRDQmZkSGhFWVhSaElEMGdkWE5sVFdWdGJ5Z29LU0E5UGlCN1hHNGdJQ0FnY21WMGRYSnVJSFI0UkdGMFlUdGNiaUFnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ2NtVmhZM1F0YUc5dmEzTXZaWGhvWVhWemRHbDJaUzFrWlhCelhHNGdJSDBzSUZ0emFXZHVQeTV5WlhGMVpYTjBQeTV5WlhGMVpYTjBTV1JkS1R0Y2JseHVJQ0JqYjI1emRDQmthWE53WVhSamFDQTlJSFZ6WlVScGMzQmhkR05vS0NrN1hHNGdJR052Ym5OMElIZGhiR3hsZEVsdGNHOXlkR1Z5UTJGdVkyVnNJRDBnZFhObFEyRnNiR0poWTJzb1hHNGdJQ0FnS0NrZ1BUNGdaR2x6Y0dGMFkyZ29ZMkZ1WTJWc1UzbHVZMUZTU0dGeVpIZGhjbVZCWTNScGIyNG9LU2tzWEc0Z0lDQWdXMlJwYzNCaGRHTm9YU3hjYmlBZ0tUdGNibHh1SUNCamIyNXpkQ0J6YVdkdVVtVnhkV1Z6ZEVOaGJtTmxiQ0E5SUhWelpVTmhiR3hpWVdOcktDZ3BJRDArSUh0Y2JpQWdJQ0JzWlhRZ1lXTjBhVzl1SUQwZ1kyRnVZMlZzVkhnN1hHNGdJQ0FnYzNkcGRHTm9JQ2hmZEhoRVlYUmhMblI1Y0dVcElIdGNiaUFnSUNBZ0lHTmhjMlVnVFVWVFUwRkhSVjlVV1ZCRkxsQkZVbE5QVGtGTVgxTkpSMDQ2SUh0Y2JpQWdJQ0FnSUNBZ1lXTjBhVzl1SUQwZ1kyRnVZMlZzVUdWeWMyOXVZV3hOYzJjN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTJGelpTQk5SVk5UUVVkRlgxUlpVRVV1UlZSSVgxTkpSMDQ2SUh0Y2JpQWdJQ0FnSUNBZ1lXTjBhVzl1SUQwZ1kyRnVZMlZzVFhObk8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdOaGMyVWdUVVZUVTBGSFJWOVVXVkJGTGtWVVNGOVRTVWRPWDFSWlVFVkVYMFJCVkVFNklIdGNiaUFnSUNBZ0lDQWdZV04wYVc5dUlEMGdZMkZ1WTJWc1ZIbHdaV1JOYzJjN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWkdWbVlYVnNkRG9nZTF4dUlDQWdJQ0FnSUNCaFkzUnBiMjRnUFNCallXNWpaV3hVZUR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdaR2x6Y0dGMFkyZ29ZV04wYVc5dUtGOTBlRVJoZEdFcEtUdGNiaUFnSUNCa2FYTndZWFJqYUNoallXNWpaV3hSVWtoaGNtUjNZWEpsVTJsbmJsSmxjWFZsYzNSQlkzUnBiMjRvS1NrN1hHNGdJSDBzSUZ0a2FYTndZWFJqYUN3Z1gzUjRSR0YwWVYwcE8xeHVYRzRnSUdOdmJuTjBJSFJwZEd4bElEMGdkWE5sVFdWdGJ5Z29LU0E5UGlCN1hHNGdJQ0FnYkdWMElGOTBhWFJzWlNBOUlDY25PMXh1SUNBZ0lHbG1JQ2h6YUc5M1UybG5ibEpsY1hWbGMzUXBJSHRjYmlBZ0lDQWdJRjkwYVhSc1pTQTlJSFFvSjFGU1NHRnlaSGRoY21WVGFXZHVVbVZ4ZFdWemRGUnBkR3hsSnlrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoemFHOTNWMkZzYkdWMFNXMXdiM0owWlhJcElIdGNiaUFnSUNBZ0lGOTBhWFJzWlNBOUlIUW9KMUZTU0dGeVpIZGhjbVZYWVd4c1pYUkpiWEJ2Y25SbGNsUnBkR3hsSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNobGNuSnZjbFJwZEd4bElDRTlQU0FuSnlrZ2UxeHVJQ0FnSUNBZ1gzUnBkR3hsSUQwZ1pYSnliM0pVYVhSc1pUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRjkwYVhSc1pUdGNiaUFnZlN3Z1czTm9iM2RUYVdkdVVtVnhkV1Z6ZEN3Z2MyaHZkMWRoYkd4bGRFbHRjRzl5ZEdWeUxDQjBMQ0JsY25KdmNsUnBkR3hsWFNrN1hHNGdJSEpsZEhWeWJpQnphRzkzVUc5d2IzWmxjaUEvSUNoY2JpQWdJQ0E4VUc5d2IzWmxjbHh1SUNBZ0lDQWdkR2wwYkdVOWUzUnBkR3hsZlZ4dUlDQWdJQ0FnYjI1RGJHOXpaVDE3YzJodmQxZGhiR3hsZEVsdGNHOXlkR1Z5SUQ4Z2QyRnNiR1YwU1cxd2IzSjBaWEpEWVc1alpXd2dPaUJ6YVdkdVVtVnhkV1Z6ZEVOaGJtTmxiSDFjYmlBZ0lDQStYRzRnSUNBZ0lDQjdjMmh2ZDFkaGJHeGxkRWx0Y0c5eWRHVnlJQ1ltSUNoY2JpQWdJQ0FnSUNBZ1BGRlNTR0Z5WkhkaGNtVlhZV3hzWlhSSmJYQnZjblJsY2x4dUlDQWdJQ0FnSUNBZ0lHaGhibVJzWlVOaGJtTmxiRDE3ZDJGc2JHVjBTVzF3YjNKMFpYSkRZVzVqWld4OVhHNGdJQ0FnSUNBZ0lDQWdjMlYwUlhKeWIzSlVhWFJzWlQxN2MyVjBSWEp5YjNKVWFYUnNaWDFjYmlBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNsOVhHNGdJQ0FnSUNCN2MyaHZkMU5wWjI1U1pYRjFaWE4wSUNZbUlDaGNiaUFnSUNBZ0lDQWdQRkZTU0dGeVpIZGhjbVZUYVdkdVVtVnhkV1Z6ZEZ4dUlDQWdJQ0FnSUNBZ0lITmxkRVZ5Y205eVZHbDBiR1U5ZTNObGRFVnljbTl5VkdsMGJHVjlYRzRnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxRMkZ1WTJWc1BYdHphV2R1VW1WeGRXVnpkRU5oYm1ObGJIMWNiaUFnSUNBZ0lDQWdJQ0J5WlhGMVpYTjBQWHR6YVdkdUxuSmxjWFZsYzNSOVhHNGdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQXBmVnh1SUNBZ0lEd3ZVRzl3YjNabGNqNWNiaUFnS1NBNklHNTFiR3c3WEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlJVa2hoY21SM1lYSmxVRzl3YjNabGNqdGNiaUlzSW1sdGNHOXlkQ0JSVWtoaGNtUjNZWEpsVTJsbmJsSmxjWFZsYzNRZ1puSnZiU0FuTGk5eGNpMW9ZWEprZDJGeVpTMXphV2R1TFhKbGNYVmxjM1F1WTI5dGNHOXVaVzUwSnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1VWSklZWEprZDJGeVpWTnBaMjVTWlhGMVpYTjBPMXh1SWl3aWFXMXdiM0owSUZKbFlXTjBMQ0I3SUhWelpVVm1abVZqZEN3Z2RYTmxUV1Z0Ynl3Z2RYTmxVM1JoZEdVZ2ZTQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnVVZKRGIyUmxJR1p5YjIwZ0ozRnlZMjlrWlM1eVpXRmpkQ2M3WEc1cGJYQnZjblFnZXlCVlVpd2dWVkpGYm1OdlpHVnlJSDBnWm5KdmJTQW5RRzVuY21GMlpXbHZMMkpqTFhWeUp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdRbTk0SUdaeWIyMGdKeTR1THk0dUx5NHVMM1ZwTDJKdmVDYzdYRzVwYlhCdmNuUWdleUIxYzJWSk1UaHVRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmh2YjJ0ekwzVnpaVWt4T0c1RGIyNTBaWGgwSnp0Y2JtbHRjRzl5ZENCN1hHNGdJRUZzYVdkdVNYUmxiWE1zWEc0Z0lFUkpVMUJNUVZrc1hHNGdJRVpNUlZoZlJFbFNSVU5VU1U5T0xGeHVJQ0JVWlhoMFFXeHBaMjRzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyaGxiSEJsY25NdlkyOXVjM1JoYm5SekwyUmxjMmxuYmkxemVYTjBaVzBuTzF4dWFXMXdiM0owSUhzZ1VHRm5aVU52Ym5SaGFXNWxja1p2YjNSbGNpQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMM0JoWjJVdFkyOXVkR0ZwYm1WeUp6dGNibWx0Y0c5eWRDQjdJRlJsZUhRZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5amIyMXdiMjVsYm5RdGJHbGljbUZ5ZVNjN1hHNWNibU52Ym5OMElGQnNZWGxsY2lBOUlDaDdJSFI1Y0dVc0lHTmliM0lzSUdOaGJtTmxiRkZTU0dGeVpIZGhjbVZUYVdkdVVtVnhkV1Z6ZEN3Z2RHOVNaV0ZrSUgwcElEMCtJSHRjYmlBZ1kyOXVjM1FnZENBOUlIVnpaVWt4T0c1RGIyNTBaWGgwS0NrN1hHNGdJR052Ym5OMElIVnlSVzVqYjJSbGNpQTlJSFZ6WlUxbGJXOG9YRzRnSUNBZ0tDa2dQVDRnYm1WM0lGVlNSVzVqYjJSbGNpaHVaWGNnVlZJb1FuVm1abVZ5TG1aeWIyMG9ZMkp2Y2l3Z0oyaGxlQ2NwTENCMGVYQmxLU3dnTkRBd0tTeGNiaUFnSUNCYlkySnZjaXdnZEhsd1pWMHNYRzRnSUNrN1hHNGdJR052Ym5OMElGdGpkWEp5Wlc1MFVWSkRiMlJsTENCelpYUkRkWEp5Wlc1MFVWSkRiMlJsWFNBOUlIVnpaVk4wWVhSbEtIVnlSVzVqYjJSbGNpNXVaWGgwVUdGeWRDZ3BLVHRjYmlBZ2RYTmxSV1ptWldOMEtDZ3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnBaQ0E5SUhObGRFbHVkR1Z5ZG1Gc0tDZ3BJRDArSUh0Y2JpQWdJQ0FnSUhObGRFTjFjbkpsYm5SUlVrTnZaR1VvZFhKRmJtTnZaR1Z5TG01bGVIUlFZWEowS0NrcE8xeHVJQ0FnSUgwc0lERXdNQ2s3WEc0Z0lDQWdjbVYwZFhKdUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUdOc1pXRnlTVzUwWlhKMllXd29hV1FwTzF4dUlDQWdJSDA3WEc0Z0lIMHNJRnQxY2tWdVkyOWtaWEpkS1R0Y2JseHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEdytYRzRnSUNBZ0lDQThRbTk0UGx4dUlDQWdJQ0FnSUNBOFZHVjRkQ0JoYkdsbmJqMTdWR1Y0ZEVGc2FXZHVMa05sYm5SbGNuMCtYRzRnSUNBZ0lDQWdJQ0FnZTNRb0oxRlNTR0Z5WkhkaGNtVlRhV2R1VW1WeGRXVnpkRk4xWW5ScGRHeGxKeWw5WEc0Z0lDQWdJQ0FnSUR3dlZHVjRkRDVjYmlBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ1BFSnZlRnh1SUNBZ0lDQWdJQ0J3WVdSa2FXNW5WRzl3UFhzMGZWeHVJQ0FnSUNBZ0lDQndZV1JrYVc1blFtOTBkRzl0UFhzMGZWeHVJQ0FnSUNBZ0lDQmthWE53YkdGNVBYdEVTVk5RVEVGWkxrWk1SVmg5WEc0Z0lDQWdJQ0FnSUdGc2FXZHVTWFJsYlhNOWUwRnNhV2R1U1hSbGJYTXVZMlZ1ZEdWeWZWeHVJQ0FnSUNBZ0lDQm1iR1Y0UkdseVpXTjBhVzl1UFh0R1RFVllYMFJKVWtWRFZFbFBUaTVEVDB4VlRVNTlYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ0lDQnpkSGxzWlQxN2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGa1pHbHVaem9nTWpBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpWVdOclozSnZkVzVrUTI5c2IzSTZJQ2QyWVhJb0xTMXhjaTFqYjJSbExYZG9hWFJsTFdKaFkydG5jbTkxYm1RcEp5eGNiaUFnSUNBZ0lDQWdJQ0I5ZlZ4dUlDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdQRkZTUTI5a1pTQjJZV3gxWlQxN1kzVnljbVZ1ZEZGU1EyOWtaUzUwYjFWd2NHVnlRMkZ6WlNncGZTQnphWHBsUFhzeU5UQjlJQzgrWEc0Z0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnSUNBOFFtOTRJSEJoWkdScGJtZENiM1IwYjIwOWV6UjlJSEJoWkdScGJtZE1aV1owUFhzMGZTQndZV1JrYVc1blVtbG5hSFE5ZXpSOVBseHVJQ0FnSUNBZ0lDQThWR1Y0ZENCaGJHbG5iajE3VkdWNGRFRnNhV2R1TGtObGJuUmxjbjArWEc0Z0lDQWdJQ0FnSUNBZ2UzUW9KMUZTU0dGeVpIZGhjbVZUYVdkdVVtVnhkV1Z6ZEVSbGMyTnlhWEIwYVc5dUp5bDlYRzRnSUNBZ0lDQWdJRHd2VkdWNGRENWNiaUFnSUNBZ0lEd3ZRbTk0UGx4dUlDQWdJQ0FnUEZCaFoyVkRiMjUwWVdsdVpYSkdiMjkwWlhKY2JpQWdJQ0FnSUNBZ2IyNURZVzVqWld3OWUyTmhibU5sYkZGU1NHRnlaSGRoY21WVGFXZHVVbVZ4ZFdWemRIMWNiaUFnSUNBZ0lDQWdiMjVUZFdKdGFYUTllM1J2VW1WaFpIMWNiaUFnSUNBZ0lDQWdZMkZ1WTJWc1ZHVjRkRDE3ZENnblVWSklZWEprZDJGeVpWTnBaMjVTWlhGMVpYTjBRMkZ1WTJWc0p5bDlYRzRnSUNBZ0lDQWdJSE4xWW0xcGRGUmxlSFE5ZTNRb0oxRlNTR0Z5WkhkaGNtVlRhV2R1VW1WeGRXVnpkRWRsZEZOcFoyNWhkSFZ5WlNjcGZWeHVJQ0FnSUNBZ0lDQnpkV0p0YVhSQ2RYUjBiMjVVZVhCbFBWd2lZMjl1Wm1seWJWd2lYRzRnSUNBZ0lDQXZQbHh1SUNBZ0lEd3ZQbHh1SUNBcE8xeHVmVHRjYmx4dVVHeGhlV1Z5TG5CeWIzQlVlWEJsY3lBOUlIdGNiaUFnZEhsd1pUb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5NXBjMUpsY1hWcGNtVmtMRnh1SUNCalltOXlPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MbWx6VW1WeGRXbHlaV1FzWEc0Z0lHTmhibU5sYkZGU1NHRnlaSGRoY21WVGFXZHVVbVZ4ZFdWemREb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnZEc5U1pXRmtPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1VHeGhlV1Z5TzF4dUlpd2lhVzF3YjNKMElGSmxZV04wTENCN0lIVnpaVU5oYkd4aVlXTnJMQ0IxYzJWVGRHRjBaU0I5SUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdleUJ6ZFdKdGFYUlJVa2hoY21SM1lYSmxVMmxuYm1GMGRYSmxJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2YzNSdmNtVXZZV04wYVc5dWN5YzdYRzVwYlhCdmNuUWdVR3hoZVdWeUlHWnliMjBnSnk0dmNHeGhlV1Z5Snp0Y2JtbHRjRzl5ZENCU1pXRmtaWElnWm5KdmJTQW5MaTl5WldGa1pYSW5PMXh1WEc1amIyNXpkQ0JSVWtoaGNtUjNZWEpsVTJsbmJsSmxjWFZsYzNRZ1BTQW9leUJ5WlhGMVpYTjBMQ0JvWVc1a2JHVkRZVzVqWld3c0lITmxkRVZ5Y205eVZHbDBiR1VnZlNrZ1BUNGdlMXh1SUNCamIyNXpkQ0JiYzNSaGRIVnpMQ0J6WlhSVGRHRjBkWE5kSUQwZ2RYTmxVM1JoZEdVb0ozQnNZWGtuS1R0Y2JseHVJQ0JqYjI1emRDQjBiMUpsWVdRZ1BTQjFjMlZEWVd4c1ltRmpheWdvS1NBOVBpQnpaWFJUZEdGMGRYTW9KM0psWVdRbktTd2dXMTBwTzF4dVhHNGdJR052Ym5OMElISmxibVJsY2xCc1lYbGxjaUE5SUNncElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lIQmhlV3h2WVdRZ2ZTQTlJSEpsY1hWbGMzUTdYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUR4UWJHRjVaWEpjYmlBZ0lDQWdJQ0FnZEhsd1pUMTdjR0Y1Ykc5aFpDNTBlWEJsZlZ4dUlDQWdJQ0FnSUNCalltOXlQWHR3WVhsc2IyRmtMbU5pYjNKOVhHNGdJQ0FnSUNBZ0lHTmhibU5sYkZGU1NHRnlaSGRoY21WVGFXZHVVbVZ4ZFdWemREMTdhR0Z1Wkd4bFEyRnVZMlZzZlZ4dUlDQWdJQ0FnSUNCMGIxSmxZV1E5ZTNSdlVtVmhaSDFjYmlBZ0lDQWdJQzgrWEc0Z0lDQWdLVHRjYmlBZ2ZUdGNibHh1SUNCamIyNXpkQ0J5Wlc1a1pYSlNaV0ZrWlhJZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhTWldGa1pYSmNiaUFnSUNBZ0lDQWdZMkZ1WTJWc1VWSklZWEprZDJGeVpWTnBaMjVTWlhGMVpYTjBQWHRvWVc1a2JHVkRZVzVqWld4OVhHNGdJQ0FnSUNBZ0lITjFZbTFwZEZGU1NHRnlaSGRoY21WVGFXZHVZWFIxY21VOWUzTjFZbTFwZEZGU1NHRnlaSGRoY21WVGFXZHVZWFIxY21WOVhHNGdJQ0FnSUNBZ0lISmxjWFZsYzNSSlpEMTdjbVZ4ZFdWemRDNXlaWEYxWlhOMFNXUjlYRzRnSUNBZ0lDQWdJSE5sZEVWeWNtOXlWR2wwYkdVOWUzTmxkRVZ5Y205eVZHbDBiR1Y5WEc0Z0lDQWdJQ0F2UGx4dUlDQWdJQ2s3WEc0Z0lIMDdYRzVjYmlBZ2FXWWdLSE4wWVhSMWN5QTlQVDBnSjNCc1lYa25LU0I3WEc0Z0lDQWdjbVYwZFhKdUlISmxibVJsY2xCc1lYbGxjaWdwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ5Wlc1a1pYSlNaV0ZrWlhJb0tUdGNibjA3WEc1Y2JsRlNTR0Z5WkhkaGNtVlRhV2R1VW1WeGRXVnpkQzV3Y205d1ZIbHdaWE1nUFNCN1hHNGdJSEpsY1hWbGMzUTZJRkJ5YjNCVWVYQmxjeTV2WW1wbFkzUXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ2FHRnVaR3hsUTJGdVkyVnNPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNCelpYUkZjbkp2Y2xScGRHeGxPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1VWSklZWEprZDJGeVpWTnBaMjVTWlhGMVpYTjBPMXh1SWl3aWFXMXdiM0owSUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCN0lFVlVTRk5wWjI1aGRIVnlaU0I5SUdaeWIyMGdKMEJyWlhsemRHOXVaV2h4TDJKakxYVnlMWEpsWjJsemRISjVMV1YwYUNjN1hHNXBiWEJ2Y25RZ0tpQmhjeUIxZFdsa0lHWnliMjBnSjNWMWFXUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JDWVhObFVtVmhaR1Z5SUdaeWIyMGdKeTR1TDJKaGMyVXRjbVZoWkdWeUp6dGNibWx0Y0c5eWRDQjdJSFZ6WlVreE9HNURiMjUwWlhoMElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZhRzl2YTNNdmRYTmxTVEU0YmtOdmJuUmxlSFFuTzF4dVhHNWpiMjV6ZENCU1pXRmtaWElnUFNBb2UxeHVJQ0J6ZFdKdGFYUlJVa2hoY21SM1lYSmxVMmxuYm1GMGRYSmxMRnh1SUNCallXNWpaV3hSVWtoaGNtUjNZWEpsVTJsbmJsSmxjWFZsYzNRc1hHNGdJSEpsY1hWbGMzUkpaQ3hjYmlBZ2MyVjBSWEp5YjNKVWFYUnNaU3hjYm4wcElEMCtJSHRjYmlBZ1kyOXVjM1FnZENBOUlIVnpaVWt4T0c1RGIyNTBaWGgwS0NrN1hHNGdJR052Ym5OMElHTmhibU5sYkNBOUlDZ3BJRDArSUh0Y2JpQWdJQ0JqWVc1alpXeFJVa2hoY21SM1lYSmxVMmxuYmxKbGNYVmxjM1FvS1R0Y2JpQWdmVHRjYmx4dUlDQmpiMjV6ZENCb1lXNWtiR1ZUZFdOalpYTnpJRDBnWVhONWJtTWdLSFZ5S1NBOVBpQjdYRzRnSUNBZ2FXWWdLSFZ5TG5SNWNHVWdQVDA5SUNkbGRHZ3RjMmxuYm1GMGRYSmxKeWtnZTF4dUlDQWdJQ0FnWTI5dWMzUWdaWFJvVTJsbmJtRjBkWEpsSUQwZ1JWUklVMmxuYm1GMGRYSmxMbVp5YjIxRFFrOVNLSFZ5TG1OaWIzSXBPMXh1SUNBZ0lDQWdZMjl1YzNRZ1luVm1abVZ5SUQwZ1pYUm9VMmxuYm1GMGRYSmxMbWRsZEZKbGNYVmxjM1JKWkNncE8xeHVJQ0FnSUNBZ1kyOXVjM1FnYzJsbmJrbGtJRDBnZFhWcFpDNXpkSEpwYm1kcFpua29ZblZtWm1WeUtUdGNiaUFnSUNBZ0lHbG1JQ2h6YVdkdVNXUWdQVDA5SUhKbGNYVmxjM1JKWkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lYZGhhWFFnYzNWaWJXbDBVVkpJWVhKa2QyRnlaVk5wWjI1aGRIVnlaU2h6YVdkdVNXUXNJSFZ5TG1OaWIzSXVkRzlUZEhKcGJtY29KMmhsZUNjcEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lITmxkRVZ5Y205eVZHbDBiR1VvZENnblVWSklZWEprZDJGeVpVbHVkbUZzYVdSVWNtRnVjMkZqZEdsdmJsUnBkR3hsSnlrcE8xeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0hRb0oxRlNTR0Z5WkhkaGNtVk5hWE50WVhSamFHVmtVMmxuYmtsa0p5a3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCelpYUkZjbkp2Y2xScGRHeGxLSFFvSjFGU1NHRnlaSGRoY21WSmJuWmhiR2xrVkhKaGJuTmhZM1JwYjI1VWFYUnNaU2NwS1R0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWgwS0NkMWJtdHViM2R1VVhKRGIyUmxKeWtwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhDWVhObFVtVmhaR1Z5WEc0Z0lDQWdJQ0JwYzFKbFlXUnBibWRYWVd4c1pYUTllMlpoYkhObGZWeHVJQ0FnSUNBZ2FHRnVaR3hsUTJGdVkyVnNQWHRqWVc1alpXeDlYRzRnSUNBZ0lDQm9ZVzVrYkdWVGRXTmpaWE56UFh0b1lXNWtiR1ZUZFdOalpYTnpmVnh1SUNBZ0lDQWdjMlYwUlhKeWIzSlVhWFJzWlQxN2MyVjBSWEp5YjNKVWFYUnNaWDFjYmlBZ0lDQXZQbHh1SUNBcE8xeHVmVHRjYmx4dVVtVmhaR1Z5TG5CeWIzQlVlWEJsY3lBOUlIdGNiaUFnYzNWaWJXbDBVVkpJWVhKa2QyRnlaVk5wWjI1aGRIVnlaVG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ1kyRnVZMlZzVVZKSVlYSmtkMkZ5WlZOcFoyNVNaWEYxWlhOME9pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0J5WlhGMVpYTjBTV1E2SUZCeWIzQlVlWEJsY3k1emRISnBibWN1YVhOU1pYRjFhWEpsWkN4Y2JpQWdjMlYwUlhKeWIzSlVhWFJzWlRvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRkpsWVdSbGNqdGNiaUlzSW1sdGNHOXlkQ0JSVWtoaGNtUjNZWEpsVjJGc2JHVjBTVzF3YjNKMFpYSWdabkp2YlNBbkxpOXhjaTFvWVhKa2QyRnlaUzEzWVd4c1pYUXRhVzF3YjNKMFpYSXVZMjl0Y0c5dVpXNTBKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVVZKSVlYSmtkMkZ5WlZkaGJHeGxkRWx0Y0c5eWRHVnlPMXh1SWl3aWFXMXdiM0owSUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ2UxeHVJQ0J6ZFdKdGFYUlJVa2hoY21SM1lYSmxRM0o1Y0hSdlFXTmpiM1Z1ZEN4Y2JpQWdjM1ZpYldsMFVWSklZWEprZDJGeVpVTnllWEIwYjBoRVMyVjVMRnh1ZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5emRHOXlaUzloWTNScGIyNXpKenRjYm1sdGNHOXlkQ0JDWVhObFVtVmhaR1Z5SUdaeWIyMGdKeTR1TDJKaGMyVXRjbVZoWkdWeUp6dGNibWx0Y0c5eWRDQjdJSFZ6WlVreE9HNURiMjUwWlhoMElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZhRzl2YTNNdmRYTmxTVEU0YmtOdmJuUmxlSFFuTzF4dVhHNWpiMjV6ZENCUlVraGhjbVIzWVhKbFYyRnNiR1YwU1cxd2IzSjBaWElnUFNBb2V5Qm9ZVzVrYkdWRFlXNWpaV3dzSUhObGRFVnljbTl5VkdsMGJHVWdmU2tnUFQ0Z2UxeHVJQ0JqYjI1emRDQjBJRDBnZFhObFNURTRia052Ym5SbGVIUW9LVHRjYmlBZ1kyOXVjM1FnYUdGdVpHeGxVM1ZqWTJWemN5QTlJR0Z6ZVc1aklDaDFjaWtnUFQ0Z2UxeHVJQ0FnSUdsbUlDaDFjaTUwZVhCbElEMDlQU0FuWTNKNWNIUnZMV2hrYTJWNUp5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRjNZV2wwSUhOMVltMXBkRkZTU0dGeVpIZGhjbVZEY25sd2RHOUlSRXRsZVNoMWNpNWpZbTl5TG5SdlUzUnlhVzVuS0Nkb1pYZ25LU2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2gxY2k1MGVYQmxJRDA5UFNBblkzSjVjSFJ2TFdGalkyOTFiblFuS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWVhkaGFYUWdjM1ZpYldsMFVWSklZWEprZDJGeVpVTnllWEIwYjBGalkyOTFiblFvZFhJdVkySnZjaTUwYjFOMGNtbHVaeWduYUdWNEp5a3BPMXh1SUNBZ0lIMWNiaUFnSUNCelpYUkZjbkp2Y2xScGRHeGxLSFFvSjFGU1NHRnlaSGRoY21WVmJtdHViM2R1VVZKRGIyUmxWR2wwYkdVbktTazdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0hRb0ozVnVhMjV2ZDI1UmNrTnZaR1VuS1NrN1hHNGdJSDA3WEc1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFFtRnpaVkpsWVdSbGNseHVJQ0FnSUNBZ2FYTlNaV0ZrYVc1blYyRnNiR1YwWEc0Z0lDQWdJQ0JvWVc1a2JHVkRZVzVqWld3OWUyaGhibVJzWlVOaGJtTmxiSDFjYmlBZ0lDQWdJR2hoYm1Sc1pWTjFZMk5sYzNNOWUyaGhibVJzWlZOMVkyTmxjM045WEc0Z0lDQWdJQ0J6WlhSRmNuSnZjbFJwZEd4bFBYdHpaWFJGY25KdmNsUnBkR3hsZlZ4dUlDQWdJQzgrWEc0Z0lDazdYRzU5TzF4dVhHNVJVa2hoY21SM1lYSmxWMkZzYkdWMFNXMXdiM0owWlhJdWNISnZjRlI1Y0dWeklEMGdlMXh1SUNCb1lXNWtiR1ZEWVc1alpXdzZJRkJ5YjNCVWVYQmxjeTVtZFc1akxtbHpVbVZ4ZFdseVpXUXNYRzRnSUhObGRFVnljbTl5VkdsMGJHVTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxtbHpVbVZ4ZFdseVpXUXNYRzU5TzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCUlVraGhjbVIzWVhKbFYyRnNiR1YwU1cxd2IzSjBaWEk3WEc0aUxDSmxlSEJ2Y25RZ2V5QmtaV1poZFd4MElIMGdabkp2YlNBbkxpOXlaV052ZG1WeWVTMXdhSEpoYzJVdGNtVnRhVzVrWlhJbk8xeHVJaXdpYVcxd2IzSjBJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnZXlCMWMyVklhWE4wYjNKNUlIMGdabkp2YlNBbmNtVmhZM1F0Y205MWRHVnlMV1J2YlNjN1hHNXBiWEJ2Y25RZ2V5QjFjMlZKTVRodVEyOXVkR1Y0ZENCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJodmIydHpMM1Z6WlVreE9HNURiMjUwWlhoMEp6dGNiaTh2SUVOdmJYQnZibVZ1ZEhOY2JtbHRjRzl5ZENCQ2IzZ2dabkp2YlNBbkxpNHZMaTR2ZFdrdlltOTRKenRjYm1sdGNHOXlkQ0JDZFhSMGIyNGdabkp2YlNBbkxpNHZMaTR2ZFdrdlluVjBkRzl1Snp0Y2JtbHRjRzl5ZENCUWIzQnZkbVZ5SUdaeWIyMGdKeTR1THk0dUwzVnBMM0J2Y0c5MlpYSW5PMXh1THk4Z1NHVnNjR1Z5YzF4dWFXMXdiM0owSUh0Y2JpQWdSRWxUVUV4QldTeGNiaUFnVkdWNGRFRnNhV2R1TEZ4dUlDQlVaWGgwVm1GeWFXRnVkQ3hjYmlBZ1FreFBRMHRmVTBsYVJWTXNYRzRnSUVadmJuUlhaV2xuYUhRc1hHNGdJRXAxYzNScFpubERiMjUwWlc1MExGeHVJQ0JVWlhoMFEyOXNiM0lzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1TDJobGJIQmxjbk12WTI5dWMzUmhiblJ6TDJSbGMybG5iaTF6ZVhOMFpXMG5PMXh1YVcxd2IzSjBJSHNnVDA1Q1QwRlNSRWxPUjE5VlRreFBRMHRmVWs5VlZFVWdmU0JtY205dElDY3VMaTh1TGk4dUxpOW9aV3h3WlhKekwyTnZibk4wWVc1MGN5OXliM1YwWlhNbk8xeHVhVzF3YjNKMElIc2dWR1Y0ZENCOUlHWnliMjBnSnk0dUx5NHVMMk52YlhCdmJtVnVkQzFzYVdKeVlYSjVKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnVW1WamIzWmxjbmxRYUhKaGMyVlNaVzFwYm1SbGNpaDdJRzl1UTI5dVptbHliU3dnYUdGelFtRmphMlZrVlhBZ2ZTa2dlMXh1SUNCamIyNXpkQ0IwSUQwZ2RYTmxTVEU0YmtOdmJuUmxlSFFvS1R0Y2JpQWdZMjl1YzNRZ2FHbHpkRzl5ZVNBOUlIVnpaVWhwYzNSdmNua29LVHRjYmx4dUlDQmpiMjV6ZENCb1lXNWtiR1ZDWVdOclZYQWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2FHbHpkRzl5ZVM1d2RYTm9LRTlPUWs5QlVrUkpUa2RmVlU1TVQwTkxYMUpQVlZSRktUdGNiaUFnZlR0Y2JseHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeFFiM0J2ZG1WeUlHTmxiblJsY2xScGRHeGxJSFJwZEd4bFBYdDBLQ2R5WldOdmRtVnllVkJvY21GelpWSmxiV2x1WkdWeVZHbDBiR1VuS1gwK1hHNGdJQ0FnSUNBOFFtOTRYRzRnSUNBZ0lDQWdJSEJoWkdScGJtZFNhV2RvZEQxN05IMWNiaUFnSUNBZ0lDQWdjR0ZrWkdsdVowSnZkSFJ2YlQxN05uMWNiaUFnSUNBZ0lDQWdjR0ZrWkdsdVoweGxablE5ZXpSOVhHNGdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbkpsWTI5MlpYSjVMWEJvY21GelpTMXlaVzFwYm1SbGNsd2lYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJRHhVWlhoMFhHNGdJQ0FnSUNBZ0lDQWdZMjlzYjNJOWUxUmxlSFJEYjJ4dmNpNTBaWGgwUkdWbVlYVnNkSDFjYmlBZ0lDQWdJQ0FnSUNCaGJHbG5iajE3VkdWNGRFRnNhV2R1TGtObGJuUmxjbjFjYmlBZ0lDQWdJQ0FnSUNCMllYSnBZVzUwUFh0VVpYaDBWbUZ5YVdGdWRDNWliMlI1VFdSOVhHNGdJQ0FnSUNBZ0lDQWdiV0Z5WjJsdVFtOTBkRzl0UFhzMGZWeHVJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnZTNRb0ozSmxZMjkyWlhKNVVHaHlZWE5sVW1WdGFXNWtaWEpUZFdKVVpYaDBKeWw5WEc0Z0lDQWdJQ0FnSUR3dlZHVjRkRDVjYmlBZ0lDQWdJQ0FnUEVKdmVDQnRZWEpuYVc1VWIzQTllelI5SUcxaGNtZHBia0p2ZEhSdmJUMTdPSDArWEc0Z0lDQWdJQ0FnSUNBZ1BIVnNJR05zWVhOelRtRnRaVDFjSW5KbFkyOTJaWEo1TFhCb2NtRnpaUzF5WlcxcGJtUmxjbDlmYkdsemRGd2lQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BGUmxlSFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZWE05WENKc2FWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5UFh0VVpYaDBRMjlzYjNJdWRHVjRkRVJsWm1GMWJIUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZiblJYWldsbmFIUTllMFp2Ym5SWFpXbG5hSFF1UW05c1pIMWNiaUFnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0ozSmxZMjkyWlhKNVVHaHlZWE5sVW1WdGFXNWtaWEpKZEdWdFQyNWxKeWw5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMVJsZUhRK1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4VkdWNGRDQmhjejFjSW14cFhDSStlM1FvSjNKbFkyOTJaWEo1VUdoeVlYTmxVbVZ0YVc1a1pYSkpkR1Z0Vkhkdkp5bDlQQzlVWlhoMFBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEZSbGVIUWdZWE05WENKc2FWd2lQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjdhR0Z6UW1GamEyVmtWWEFnUHlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RDZ25jbVZqYjNabGNubFFhSEpoYzJWU1pXMXBibVJsY2toaGMwSmhZMnRsWkZWd0p5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0tTQTZJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UzUW9KM0psWTI5MlpYSjVVR2h5WVhObFVtVnRhVzVrWlhKSVlYTk9iM1JDWVdOclpXUlZjQ2NwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BFSnZlQ0JrYVhOd2JHRjVQWHRFU1ZOUVRFRlpMa2xPVEVsT1JWOUNURTlEUzMwZ2JXRnlaMmx1VEdWbWREMTdNWDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeENkWFIwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbFBWd2liR2x1YTF3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjI1RGJHbGphejE3YUdGdVpHeGxRbUZqYTFWd2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMGVXeGxQWHQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjI1MFUybDZaVG9nSjJsdWFHVnlhWFFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGa1pHbHVaem9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UzUW9KM0psWTI5MlpYSjVVR2h5WVhObFVtVnRhVzVrWlhKQ1lXTnJkWEJUZEdGeWRDY3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZRbTk0UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5VVpYaDBQbHh1SUNBZ0lDQWdJQ0FnSUR3dmRXdytYRzRnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ0lDQThRbTk0SUdwMWMzUnBabmxEYjI1MFpXNTBQWHRLZFhOMGFXWjVRMjl1ZEdWdWRDNWpaVzUwWlhKOVBseHVJQ0FnSUNBZ0lDQWdJRHhDYjNnZ2QybGtkR2c5ZTBKTVQwTkxYMU5KV2tWVExsUlhUMTlHU1VaVVNGTjlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BFSjFkSFJ2YmlCMGVYQmxQVndpY0hKcGJXRnllVndpSUc5dVEyeHBZMnM5ZTI5dVEyOXVabWx5YlgwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUh0MEtDZHlaV052ZG1WeWVWQm9jbUZ6WlZKbGJXbHVaR1Z5UTI5dVptbHliU2NwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlDZFhSMGIyNCtYRzRnSUNBZ0lDQWdJQ0FnUEM5Q2IzZytYRzRnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdQQzlRYjNCdmRtVnlQbHh1SUNBcE8xeHVmVnh1WEc1U1pXTnZkbVZ5ZVZCb2NtRnpaVkpsYldsdVpHVnlMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdhR0Z6UW1GamEyVmtWWEE2SUZCeWIzQlVlWEJsY3k1aWIyOXNMbWx6VW1WeGRXbHlaV1FzWEc0Z0lHOXVRMjl1Wm1seWJUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNibjA3WEc0aUxDSmxlSEJ2Y25RZ1kyOXVjM1FnVTBWRFZWSkpWRmxmVUZKUFZrbEVSVkpmVFVWVFUwRkhSVjlUUlZaRlVrbFVTVVZUSUQwZ2UxeHVJQ0JPVDFSZlRVRk1TVU5KVDFWVE9pQXdMRnh1SUNCTlFVeEpRMGxQVlZNNklERXNYRzRnSUU1UFZGOVRRVVpGT2lBeUxGeHVmVHRjYmlJc0ltbHRjRzl5ZENCU1pXRmpkQ3dnZXlCMWMyVkRiMjUwWlhoMElIMGdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCN1hHNGdJRU52Ykc5eUxGeHVJQ0JUUlZaRlVrbFVTVVZUTEZ4dUlDQlRhWHBsTEZ4dUlDQlVaWGgwVm1GeWFXRnVkQ3hjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2YUdWc2NHVnljeTlqYjI1emRHRnVkSE12WkdWemFXZHVMWE41YzNSbGJTYzdYRzVwYlhCdmNuUWdleUJKTVRodVEyOXVkR1Y0ZENCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUx5NXpkRzl5ZVdKdmIyc3ZhVEU0YmljN1hHNXBiWEJ2Y25RZ2V5QkNZVzV1WlhKQmJHVnlkQ3dnUW5WMGRHOXVUR2x1YXl3Z1ZHVjRkQ0I5SUdaeWIyMGdKeTR1THk0dUwyTnZiWEJ2Ym1WdWRDMXNhV0p5WVhKNUp6dGNibWx0Y0c5eWRDQjdJRk5GUTFWU1NWUlpYMUJTVDFaSlJFVlNYMDFGVTFOQlIwVmZVMFZXUlZKSlZFbEZVeUI5SUdaeWIyMGdKeTR2YzJWamRYSnBkSGt0Y0hKdmRtbGtaWEl0WW1GdWJtVnlMVzFsYzNOaFoyVXVZMjl1YzNSaGJuUnpKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnVTJWamRYSnBkSGxRY205MmFXUmxja0poYm01bGNrMWxjM05oWjJVb2UxeHVJQ0J6WldOMWNtbDBlVkJ5YjNacFpHVnlVbVZ6Y0c5dWMyVXNYRzU5S1NCN1hHNGdJR052Ym5OMElIUWdQU0IxYzJWRGIyNTBaWGgwS0VreE9HNURiMjUwWlhoMEtUdGNibHh1SUNCc1pYUWdiV1Z6YzJGblpWUnBkR3hsTzF4dUlDQnNaWFFnYldWemMyRm5aVlJsZUhRN1hHNGdJR3hsZENCelpYWmxjbWwwZVR0Y2JseHVJQ0JwWmlBb1hHNGdJQ0FnYzJWamRYSnBkSGxRY205MmFXUmxjbEpsYzNCdmJuTmxMbVpzWVdkQmMwUmhibWRsY205MWN5QTlQVDFjYmlBZ0lDQlRSVU5WVWtsVVdWOVFVazlXU1VSRlVsOU5SVk5UUVVkRlgxTkZWa1ZTU1ZSSlJWTXVUVUZNU1VOSlQxVlRYRzRnSUNrZ2UxeHVJQ0FnSUcxbGMzTmhaMlZVYVhSc1pTQTlYRzRnSUNBZ0lDQnpaV04xY21sMGVWQnliM1pwWkdWeVVtVnpjRzl1YzJVdWNtVmhjMjl1WDJobFlXUmxjaUE5UFQwZ0p5ZGNiaUFnSUNBZ0lDQWdQeUIwS0NkeVpYRjFaWE4wUm14aFoyZGxaRUZ6VFdGc2FXTnBiM1Z6Um1Gc2JHSmhZMnREYjNCNVVtVmhjMjl1VkdsMGJHVW5LVnh1SUNBZ0lDQWdJQ0E2SUhObFkzVnlhWFI1VUhKdmRtbGtaWEpTWlhOd2IyNXpaUzV5WldGemIyNWZhR1ZoWkdWeU8xeHVJQ0FnSUcxbGMzTmhaMlZVWlhoMElEMWNiaUFnSUNBZ0lITmxZM1Z5YVhSNVVISnZkbWxrWlhKU1pYTndiMjV6WlM1eVpXRnpiMjRnUFQwOUlDY25YRzRnSUNBZ0lDQWdJRDhnZENnbmNtVnhkV1Z6ZEVac1lXZG5aV1JCYzAxaGJHbGphVzkxYzBaaGJHeGlZV05yUTI5d2VWSmxZWE52YmljcFhHNGdJQ0FnSUNBZ0lEb2djMlZqZFhKcGRIbFFjbTkyYVdSbGNsSmxjM0J2Ym5ObExuSmxZWE52Ymp0Y2JpQWdJQ0J6WlhabGNtbDBlU0E5SUZORlZrVlNTVlJKUlZNdVJFRk9SMFZTTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLRnh1SUNBZ0lITmxZM1Z5YVhSNVVISnZkbWxrWlhKU1pYTndiMjV6WlM1bWJHRm5RWE5FWVc1blpYSnZkWE1nUFQwOVhHNGdJQ0FnVTBWRFZWSkpWRmxmVUZKUFZrbEVSVkpmVFVWVFUwRkhSVjlUUlZaRlVrbFVTVVZUTGs1UFZGOVRRVVpGWEc0Z0lDa2dlMXh1SUNBZ0lHMWxjM05oWjJWVWFYUnNaU0E5SUhRb0ozSmxjWFZsYzNSTllYbE9iM1JDWlZOaFptVW5LVHRjYmlBZ0lDQnRaWE56WVdkbFZHVjRkQ0E5SUhRb0ozSmxjWFZsYzNSTllYbE9iM1JDWlZOaFptVkZjbkp2Y2ljcE8xeHVJQ0FnSUhObGRtVnlhWFI1SUQwZ1UwVldSVkpKVkVsRlV5NVhRVkpPU1U1SE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHMWxjM05oWjJWVWFYUnNaU0E5SUhRb0ozSmxjWFZsYzNST2IzUldaWEpwWm1sbFpDY3BPMXh1SUNBZ0lHMWxjM05oWjJWVVpYaDBJRDBnZENnbmNtVnhkV1Z6ZEU1dmRGWmxjbWxtYVdWa1JYSnliM0luS1R0Y2JpQWdJQ0J6WlhabGNtbDBlU0E5SUZORlZrVlNTVlJKUlZNdVYwRlNUa2xPUnp0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlBb1hHNGdJQ0FnUEVKaGJtNWxja0ZzWlhKMFhHNGdJQ0FnSUNCdFlYSm5hVzVVYjNBOWV6UjlYRzRnSUNBZ0lDQnRZWEpuYVc1U2FXZG9kRDE3TkgxY2JpQWdJQ0FnSUcxaGNtZHBia3hsWm5ROWV6UjlYRzRnSUNBZ0lDQjBhWFJzWlQxN2JXVnpjMkZuWlZScGRHeGxmVnh1SUNBZ0lDQWdjMlYyWlhKcGRIazllM05sZG1WeWFYUjVmVnh1SUNBZ0lENWNiaUFnSUNBZ0lEeFVaWGgwSUhaaGNtbGhiblE5ZTFSbGVIUldZWEpwWVc1MExtSnZaSGxUYlgwZ1lYTTlYQ0pvTmx3aVBseHVJQ0FnSUNBZ0lDQjdiV1Z6YzJGblpWUmxlSFI5WEc0Z0lDQWdJQ0E4TDFSbGVIUStYRzRnSUNBZ0lDQThWR1Y0ZENCMllYSnBZVzUwUFh0VVpYaDBWbUZ5YVdGdWRDNWliMlI1VTIxOUlHRnpQVndpYURaY0lpQmpiMnh2Y2oxN1EyOXNiM0l1ZEdWNGRFRnNkR1Z5Ym1GMGFYWmxmVDVjYmlBZ0lDQWdJQ0FnZTNRb0ozTmxZM1Z5YVhSNVFXeGxjblFuTENCYlhHNGdJQ0FnSUNBZ0lDQWdQRUoxZEhSdmJreHBibXRjYmlBZ0lDQWdJQ0FnSUNBZ0lHdGxlVDFjSW05d1pXNXpaV0ZmYkdsdWExd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCemFYcGxQWHRUYVhwbExtbHVhR1Z5YVhSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JvY21WbVBWd2lhSFIwY0hNNkx5OXZjR1Z1YzJWaExtbHZMMXdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhROVhDSmZZbXhoYm10Y0lseHVJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lIdDBLQ2R2Y0dWdVUyVmhUbVYzSnlsOVhHNGdJQ0FnSUNBZ0lDQWdQQzlDZFhSMGIyNU1hVzVyUGl4Y2JpQWdJQ0FnSUNBZ0lDQThRblYwZEc5dVRHbHVhMXh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVQVndpWW14dlkydGhhV1JmYkdsdWExd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCemFYcGxQWHRUYVhwbExtbHVhR1Z5YVhSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JvY21WbVBWd2lhSFIwY0hNNkx5OWliRzlqYTJGcFpDNXBieTljSWx4dUlDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMFBWd2lYMkpzWVc1clhDSmNiaUFnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdkQ2duWW14dlkydGhhV1FuS1gxY2JpQWdJQ0FnSUNBZ0lDQThMMEoxZEhSdmJreHBibXMrTEZ4dUlDQWdJQ0FnSUNCZEtYMWNiaUFnSUNBZ0lEd3ZWR1Y0ZEQ1Y2JpQWdJQ0E4TDBKaGJtNWxja0ZzWlhKMFBseHVJQ0FwTzF4dWZWeHVYRzVUWldOMWNtbDBlVkJ5YjNacFpHVnlRbUZ1Ym1WeVRXVnpjMkZuWlM1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUhObFkzVnlhWFI1VUhKdmRtbGtaWEpTWlhOd2IyNXpaVG9nVUhKdmNGUjVjR1Z6TG05aWFtVmpkQ3hjYm4wN1hHNGlMQ0pwYlhCdmNuUWdVMlZzWldOMFpXUkJZMk52ZFc1MElHWnliMjBnSnk0dmMyVnNaV04wWldRdFlXTmpiM1Z1ZEM1amIyNTBZV2x1WlhJbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlRaV3hsWTNSbFpFRmpZMjkxYm5RN1hHNGlMQ0pwYlhCdmNuUWdVbVZoWTNRc0lIc2dRMjl0Y0c5dVpXNTBJSDBnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQmpiM0I1Vkc5RGJHbHdZbTloY21RZ1puSnZiU0FuWTI5d2VTMTBieTFqYkdsd1ltOWhjbVFuTzF4dWFXMXdiM0owSUhzZ2MyaHZjblJsYmtGa1pISmxjM01nZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlvWld4d1pYSnpMM1YwYVd4ekwzVjBhV3duTzF4dVhHNXBiWEJ2Y25RZ1ZHOXZiSFJwY0NCbWNtOXRJQ2N1TGk4dUxpOTFhUzkwYjI5c2RHbHdKenRjYm1sdGNHOXlkQ0I3SUhSdlEyaGxZMnR6ZFcxSVpYaEJaR1J5WlhOeklIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyMXZaSFZzWlhNdmFHVjRjM1J5YVc1bkxYVjBhV3h6Snp0Y2JtbHRjRzl5ZENCN0lGTkZRMDlPUkNCOUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwzTm9ZWEpsWkM5amIyNXpkR0Z1ZEhNdmRHbHRaU2M3WEc1cGJYQnZjblFnZXlCSlkyOXVMQ0JKWTI5dVRtRnRaU3dnU1dOdmJsTnBlbVVnZlNCbWNtOXRJQ2N1TGk4dUxpOWpiMjF3YjI1bGJuUXRiR2xpY21GeWVTYzdYRzVwYlhCdmNuUWdleUJKWTI5dVEyOXNiM0lnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlvWld4d1pYSnpMMk52Ym5OMFlXNTBjeTlrWlhOcFoyNHRjM2x6ZEdWdEp6dGNibHh1WTJ4aGMzTWdVMlZzWldOMFpXUkJZMk52ZFc1MElHVjRkR1Z1WkhNZ1EyOXRjRzl1Wlc1MElIdGNiaUFnYzNSaGRHVWdQU0I3WEc0Z0lDQWdZMjl3YVdWa09pQm1ZV3h6WlN4Y2JpQWdmVHRjYmx4dUlDQnpkR0YwYVdNZ1kyOXVkR1Y0ZEZSNWNHVnpJRDBnZTF4dUlDQWdJSFE2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNCOU8xeHVYRzRnSUhOMFlYUnBZeUJ3Y205d1ZIbHdaWE1nUFNCN1hHNGdJQ0FnYzJWc1pXTjBaV1JKWkdWdWRHbDBlVG9nVUhKdmNGUjVjR1Z6TG05aWFtVmpkQzVwYzFKbGNYVnBjbVZrTEZ4dUlDQjlPMXh1WEc0Z0lHTnZiWEJ2Ym1WdWRFUnBaRTF2ZFc1MEtDa2dlMXh1SUNBZ0lIUm9hWE11WTI5d2VWUnBiV1Z2ZFhRZ1BTQnVkV3hzTzF4dUlDQjlYRzVjYmlBZ1kyOXRjRzl1Wlc1MFYybHNiRlZ1Ylc5MWJuUW9LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVZMjl3ZVZScGJXVnZkWFFwSUh0Y2JpQWdJQ0FnSUdOc1pXRnlWR2x0Wlc5MWRDaDBhR2x6TG1OdmNIbFVhVzFsYjNWMEtUdGNiaUFnSUNBZ0lIUm9hWE11WTI5d2VWUnBiV1Z2ZFhRZ1BTQnVkV3hzTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhKbGJtUmxjaWdwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJSFFnZlNBOUlIUm9hWE11WTI5dWRHVjRkRHRjYmlBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNCelpXeGxZM1JsWkVsa1pXNTBhWFI1TEZ4dUlDQWdJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVYRzRnSUNBZ1kyOXVjM1FnWTJobFkydHpkVzF0WldSQlpHUnlaWE56SUQwZ2RHOURhR1ZqYTNOMWJVaGxlRUZrWkhKbGMzTW9jMlZzWldOMFpXUkpaR1Z1ZEdsMGVTNWhaR1J5WlhOektUdGNibHh1SUNBZ0lHeGxkQ0IwYVhSc1pTQTlJSFJvYVhNdWMzUmhkR1V1WTI5d2FXVmtYRzRnSUNBZ0lDQS9JSFFvSjJOdmNHbGxaRVY0WTJ4aGJXRjBhVzl1SnlsY2JpQWdJQ0FnSURvZ2RDZ25ZMjl3ZVZSdlEyeHBjR0p2WVhKa0p5azdYRzVjYmlBZ0lDQnNaWFFnYzJodmQwRmpZMjkxYm5SRGIzQjVTV052YmlBOUlIUnlkV1U3WEc1Y2JseHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbk5sYkdWamRHVmtMV0ZqWTI5MWJuUmNJajVjYmlBZ0lDQWdJQ0FnUEZSdmIyeDBhWEJjYmlBZ0lDQWdJQ0FnSUNCM2NtRndjR1Z5UTJ4aGMzTk9ZVzFsUFZ3aWMyVnNaV04wWldRdFlXTmpiM1Z1ZEY5ZmRHOXZiSFJwY0MxM2NtRndjR1Z5WENKY2JpQWdJQ0FnSUNBZ0lDQndiM05wZEdsdmJqMWNJbUp2ZEhSdmJWd2lYRzRnSUNBZ0lDQWdJQ0FnZEdsMGJHVTllM1JwZEd4bGZWeHVJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnUEdKMWRIUnZibHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2ljMlZzWldOMFpXUXRZV05qYjNWdWRGOWZZMnhwWTJ0aFlteGxYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0V0ZEdWemRHbGtQVndpYzJWc1pXTjBaV1F0WVdOamIzVnVkQzFqYkdsamExd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yUFhzb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2V5QmpiM0JwWldRNklIUnlkV1VnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMjl3ZVZScGJXVnZkWFFnUFNCelpYUlVhVzFsYjNWMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUhSb2FYTXVjMlYwVTNSaGRHVW9leUJqYjNCcFpXUTZJR1poYkhObElIMHBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRk5GUTA5T1JDQXFJRE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Y0hsVWIwTnNhWEJpYjJGeVpDaGphR1ZqYTNOMWJXMWxaRUZrWkhKbGMzTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0luTmxiR1ZqZEdWa0xXRmpZMjkxYm5SZlgyNWhiV1ZjSWo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNObGJHVmpkR1ZrU1dSbGJuUnBkSGt1Ym1GdFpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKelpXeGxZM1JsWkMxaFkyTnZkVzUwWDE5aFpHUnlaWE56WENJK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3YzJodmNuUmxia0ZrWkhKbGMzTW9ZMmhsWTJ0emRXMXRaV1JCWkdSeVpYTnpLWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdlM05vYjNkQlkyTnZkVzUwUTI5d2VVbGpiMjRnSmlZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWMyVnNaV04wWldRdFlXTmpiM1Z1ZEY5ZlkyOXdlVndpUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BFbGpiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVDE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emRHRjBaUzVqYjNCcFpXUWdQeUJKWTI5dVRtRnRaUzVEYjNCNVUzVmpZMlZ6Y3lBNklFbGpiMjVPWVcxbExrTnZjSGxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YVhwbFBYdEpZMjl1VTJsNlpTNVRiWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k5ZTBsamIyNURiMnh2Y2k1cFkyOXVRV3gwWlhKdVlYUnBkbVY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDQWdQQzlpZFhSMGIyNCtYRzRnSUNBZ0lDQWdJRHd2Vkc5dmJIUnBjRDVjYmlBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNrN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1UyVnNaV04wWldSQlkyTnZkVzUwTzF4dUlpd2lhVzF3YjNKMElIc2dZMjl1Ym1WamRDQjlJR1p5YjIwZ0ozSmxZV04wTFhKbFpIVjRKenRjYm1sdGNHOXlkQ0I3WEc0Z0lHZGxkRk5sYkdWamRHVmtTV1JsYm5ScGRIa3NYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMM05sYkdWamRHOXljeWM3WEc1cGJYQnZjblFnVTJWc1pXTjBaV1JCWTJOdmRXNTBJR1p5YjIwZ0p5NHZjMlZzWldOMFpXUXRZV05qYjNWdWRDNWpiMjF3YjI1bGJuUW5PMXh1WEc1amIyNXpkQ0J0WVhCVGRHRjBaVlJ2VUhKdmNITWdQU0FvYzNSaGRHVXBJRDArSUh0Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCelpXeGxZM1JsWkVsa1pXNTBhWFI1T2lCblpYUlRaV3hsWTNSbFpFbGtaVzUwYVhSNUtITjBZWFJsS1N4Y2JpQWdmVHRjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnZibTVsWTNRb2JXRndVM1JoZEdWVWIxQnliM0J6S1NoVFpXeGxZM1JsWkVGalkyOTFiblFwTzF4dUlpd2laWGh3YjNKMElIc2daR1ZtWVhWc2RDQjlJR1p5YjIwZ0p5NHZjMlYwTFdGd2NISnZkbUZzTFdadmNpMWhiR3d0ZDJGeWJtbHVaeWM3WEc0aUxDSnBiWEJ2Y25RZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQjdJSFZ6WlVreE9HNURiMjUwWlhoMElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dmFHOXZhM012ZFhObFNURTRia052Ym5SbGVIUW5PMXh1WEc1cGJYQnZjblFnVUc5d2IzWmxjaUJtY205dElDY3VMaTh1TGk5MWFTOXdiM0J2ZG1WeUp6dGNibWx0Y0c5eWRDQkNiM2dnWm5KdmJTQW5MaTR2TGk0dmRXa3ZZbTk0Snp0Y2JseHVhVzF3YjNKMElIdGNiaUFnUkVsVFVFeEJXU3hjYmlBZ1JreEZXRjlFU1ZKRlExUkpUMDRzWEc0Z0lFcDFjM1JwWm5sRGIyNTBaVzUwTEZ4dUlDQlVaWGgwVm1GeWFXRnVkQ3hjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2YUdWc2NHVnljeTlqYjI1emRHRnVkSE12WkdWemFXZHVMWE41YzNSbGJTYzdYRzVwYlhCdmNuUWdTV1JsYm5ScFkyOXVJR1p5YjIwZ0p5NHVMeTR1TDNWcEwybGtaVzUwYVdOdmJpYzdYRzVwYlhCdmNuUWdleUJ6YUc5eWRHVnVRV1JrY21WemN5QjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyaGxiSEJsY25NdmRYUnBiSE12ZFhScGJDYzdYRzVwYlhCdmNuUWdlMXh1SUNCSlkyOXVMRnh1SUNCSlkyOXVUbUZ0WlN4Y2JpQWdWR1Y0ZEN4Y2JpQWdRblYwZEc5dUxGeHVJQ0JDVlZSVVQwNWZWa0ZTU1VGT1ZDeGNibjBnWm5KdmJTQW5MaTR2TGk0dlkyOXRjRzl1Wlc1MExXeHBZbkpoY25rbk8xeHVYRzVqYjI1emRDQlRaWFJCY0hCeWIzWmxSbTl5UVd4c1YyRnlibWx1WnlBOUlDaDdYRzRnSUdOdmJHeGxZM1JwYjI1T1lXMWxMRnh1SUNCelpXNWtaWEpCWkdSeVpYTnpMRnh1SUNCdVlXMWxMRnh1SUNCMGIzUmhiQ3hjYmlBZ2FYTkZVa00zTWpFc1hHNGdJRzl1VTNWaWJXbDBMRnh1SUNCdmJrTmhibU5sYkN4Y2JuMHBJRDArSUh0Y2JpQWdZMjl1YzNRZ2RDQTlJSFZ6WlVreE9HNURiMjUwWlhoMEtDazdYRzVjYmlBZ1kyOXVjM1FnWm05dmRHVnlJRDBnS0Z4dUlDQWdJRHhDYjNoY2JpQWdJQ0FnSUdScGMzQnNZWGs5ZTBSSlUxQk1RVmt1Umt4RldIMWNiaUFnSUNBZ0lHWnNaWGhFYVhKbFkzUnBiMjQ5ZTBaTVJWaGZSRWxTUlVOVVNVOU9Ma05QVEZWTlRuMWNiaUFnSUNBZ0lHcDFjM1JwWm5sRGIyNTBaVzUwUFh0S2RYTjBhV1o1UTI5dWRHVnVkQzVUVUVGRFJWOUNSVlJYUlVWT2ZWeHVJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2ljMlYwTFdGd2NISnZkbUZzTFdadmNpMWhiR3d0ZDJGeWJtbHVaMTlmWm05dmRHVnlYQ0pjYmlBZ0lDQWdJR2RoY0QxN05IMWNiaUFnSUNBK1hHNGdJQ0FnSUNBOFFuVjBkRzl1WEc0Z0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0luTmxkQzFoY0hCeWIzWmhiQzFtYjNJdFlXeHNMWGRoY201cGJtZGZYMlp2YjNSbGNsOWZZWEJ3Y205MlpTMWlkWFIwYjI1Y0lseHVJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdENWVlJVVDA1ZlZrRlNTVUZPVkM1UVVrbE5RVkpaZlZ4dUlDQWdJQ0FnSUNCa1lXNW5aWEpjYmlBZ0lDQWdJQ0FnYjI1RGJHbGphejE3YjI1VGRXSnRhWFI5WEc0Z0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUh0MEtDZGhjSEJ5YjNabFFuVjBkRzl1VkdWNGRDY3BmVnh1SUNBZ0lDQWdQQzlDZFhSMGIyNCtYRzRnSUNBZ0lDQThRblYwZEc5dVhHNGdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbk5sZEMxaGNIQnliM1poYkMxbWIzSXRZV3hzTFhkaGNtNXBibWRmWDJadmIzUmxjbDlmWTJGdVkyVnNMV0oxZEhSdmJsd2lYRzRnSUNBZ0lDQWdJSFpoY21saGJuUTllMEpWVkZSUFRsOVdRVkpKUVU1VUxsTkZRMDlPUkVGU1dYMWNiaUFnSUNBZ0lDQWdiMjVEYkdsamF6MTdiMjVEWVc1alpXeDlYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJSHQwS0NkeVpXcGxZM1FuS1gxY2JpQWdJQ0FnSUR3dlFuVjBkRzl1UGx4dUlDQWdJRHd2UW05NFBseHVJQ0FwTzF4dVhHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ1BGQnZjRzkyWlhJZ1kyeGhjM05PWVcxbFBWd2ljMlYwTFdGd2NISnZkbUZzTFdadmNpMWhiR3d0ZDJGeWJtbHVaMTlmWTI5dWRHVnVkRndpSUdadmIzUmxjajE3Wm05dmRHVnlmVDVjYmlBZ0lDQWdJRHhDYjNoY2JpQWdJQ0FnSUNBZ1pHbHpjR3hoZVQxN1JFbFRVRXhCV1M1R1RFVllmVnh1SUNBZ0lDQWdJQ0JtYkdWNFJHbHlaV04wYVc5dVBYdEdURVZZWDBSSlVrVkRWRWxQVGk1U1QxZDlYRzRnSUNBZ0lDQWdJSEJoWkdScGJtYzllelI5WEc0Z0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0luTmxkQzFoY0hCeWIzWmhiQzFtYjNJdFlXeHNMWGRoY201cGJtZGZYMk52Ym5SbGJuUmZYMmhsWVdSbGNsd2lYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJRHhKWTI5dVhHNGdJQ0FnSUNBZ0lDQWdibUZ0WlQxN1NXTnZiazVoYldVdVJHRnVaMlZ5ZlZ4dUlDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbk5sZEMxaGNIQnliM1poYkMxbWIzSXRZV3hzTFhkaGNtNXBibWRmWDJOdmJuUmxiblJmWDJobFlXUmxjbDlmZDJGeWJtbHVaeTFwWTI5dVhDSmNiaUFnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnUEZSbGVIUWdkbUZ5YVdGdWREMTdWR1Y0ZEZaaGNtbGhiblF1YUdWaFpHbHVaMU50ZlNCaGN6MWNJbWcwWENJK1hHNGdJQ0FnSUNBZ0lDQWdlM1FvSjNsdmRYSk9SbFJ0WVhsQ1pVRjBVbWx6YXljcGZWeHVJQ0FnSUNBZ0lDQThMMVJsZUhRK1hHNGdJQ0FnSUNBOEwwSnZlRDVjYmlBZ0lDQWdJRHhDYjNoY2JpQWdJQ0FnSUNBZ1pHbHpjR3hoZVQxN1JFbFRVRXhCV1M1R1RFVllmVnh1SUNBZ0lDQWdJQ0J3WVdSa2FXNW5QWHMwZlZ4dUlDQWdJQ0FnSUNCcWRYTjBhV1o1UTI5dWRHVnVkRDE3U25WemRHbG1lVU52Ym5SbGJuUXVjM0JoWTJWQ1pYUjNaV1Z1ZlZ4dUlDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnpaWFF0WVhCd2NtOTJZV3d0Wm05eUxXRnNiQzEzWVhKdWFXNW5YMTlqYjI1MFpXNTBYMTloWTJOdmRXNTBYQ0pjYmlBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnUEVKdmVDQmthWE53YkdGNVBYdEVTVk5RVEVGWkxrWk1SVmg5UGx4dUlDQWdJQ0FnSUNBZ0lEeEpaR1Z1ZEdsamIyNGdZV1JrY21WemN6MTdjMlZ1WkdWeVFXUmtjbVZ6YzMwZ1pHbGhiV1YwWlhJOWV6TXlmU0F2UGx4dUlDQWdJQ0FnSUNBZ0lEeFVaWGgwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdFVaWGgwVm1GeWFXRnVkQzVpYjJSNVRXUjlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGN6MWNJbWcxWENKY2JpQWdJQ0FnSUNBZ0lDQWdJRzFoY21kcGJreGxablE5ZXpKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKelpYUXRZWEJ3Y205MllXd3RabTl5TFdGc2JDMTNZWEp1YVc1blgxOWpiMjUwWlc1MFgxOWhZMk52ZFc1MExXNWhiV1ZjSWx4dUlDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUR4emRISnZibWMrZTI1aGJXVjlQQzl6ZEhKdmJtYytJSHRnSUNna2UzTm9iM0owWlc1QlpHUnlaWE56S0hObGJtUmxja0ZrWkhKbGMzTXBmU2xnZlZ4dUlDQWdJQ0FnSUNBZ0lEd3ZWR1Y0ZEQ1Y2JpQWdJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdJQ0FnSUh0cGMwVlNRemN5TVNBbUppQjBiM1JoYkNBbUppQThWR1Y0ZEQ1N1lDUjdkQ2duZEc5MFlXd25LWDA2SUNSN2RHOTBZV3g5WUgwOEwxUmxlSFErZlZ4dUlDQWdJQ0FnUEM5Q2IzZytYRzVjYmlBZ0lDQWdJRHhVWlhoMFhHNGdJQ0FnSUNBZ0lHMWhjbWRwYmoxN05IMWNiaUFnSUNBZ0lDQWdiV0Z5WjJsdVZHOXdQWHMwZlZ4dUlDQWdJQ0FnSUNCdFlYSm5hVzVDYjNSMGIyMDllelI5WEc0Z0lDQWdJQ0FnSUhaaGNtbGhiblE5ZTFSbGVIUldZWEpwWVc1MExtSnZaSGxUYlgxY2JpQWdJQ0FnSUNBZ1lYTTlYQ0pvTmx3aVhHNGdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lIdDBLQ2R1Wm5SWFlYSnVhVzVuUTI5dWRHVnVkQ2NzSUZ0Y2JpQWdJQ0FnSUNBZ0lDQThjM1J5YjI1bklHdGxlVDFjSW01dmJsOWpkWE4wYjJScFlXeGZZbTlzWkZ3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0oyNW1kRmRoY201cGJtZERiMjUwWlc1MFFtOXNaQ2NzSUZ0amIyeHNaV04wYVc5dVRtRnRaU0I4ZkNBbkoxMHBmVnh1SUNBZ0lDQWdJQ0FnSUR3dmMzUnliMjVuUGl4Y2JpQWdJQ0FnSUNBZ0lDQThjM1J5YjI1bklHdGxlVDFjSW01dmJsOWpkWE4wYjJScFlXeGZaM0psZVZ3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0oyNW1kRmRoY201cGJtZERiMjUwWlc1MFIzSmxlU2NwZlZ4dUlDQWdJQ0FnSUNBZ0lEd3ZjM1J5YjI1blBpeGNiaUFnSUNBZ0lDQWdYU2w5WEc0Z0lDQWdJQ0E4TDFSbGVIUStYRzRnSUNBZ1BDOVFiM0J2ZG1WeVBseHVJQ0FwTzF4dWZUdGNibHh1VTJWMFFYQndjbTkyWlVadmNrRnNiRmRoY201cGJtY3VjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQXZLaXBjYmlBZ0lDb2dUa1pVSUdOdmJHeGxZM1JwYjI0Z2JtRnRaU0IwYUdGMElHbHpJR0psYVc1bklHRndjSEp2ZG1Wa1hHNGdJQ0FxTDF4dUlDQmpiMnhzWldOMGFXOXVUbUZ0WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdMeW9xWEc0Z0lDQXFJRUZrWkhKbGMzTWdiMllnWVNCamRYSnlaVzUwSUhWelpYSWdkR2hoZENCcGN5QmhjSEJ5YjNacGJtY2dZMjlzYkdWamRHbHZibHh1SUNBZ0tpOWNiaUFnYzJWdVpHVnlRV1JrY21WemN6b2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnTHlvcVhHNGdJQ0FxSUU1aGJXVWdiMllnWVNCamRYSnlaVzUwSUhWelpYSWdkR2hoZENCcGN5QmhjSEJ5YjNacGJtY2dZMjlzYkdWamRHbHZibHh1SUNBZ0tpOWNiaUFnYm1GdFpUb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnTHlvcVhHNGdJQ0FxSUZSdmRHRnNJRzUxYldKbGNpQnZaaUJwZEdWdGN5QjBhR0YwSUdGeVpTQmlaV2x1WnlCaGNIQnliM1psWkZ4dUlDQWdLaTljYmlBZ2RHOTBZV3c2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDOHFLbHh1SUNBZ0tpQkpjeUJoYzNObGRDQnpkR0Z1WkdGeVpDQkZVa00zTWpGY2JpQWdJQ292WEc0Z0lHbHpSVkpETnpJeE9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdMeW9xWEc0Z0lDQXFJRVoxYm1OMGFXOXVJSFJvWVhRZ1lYQndjbTkyWlhNZ1kyOXNiR1ZqZEdsdmJseHVJQ0FnS2k5Y2JpQWdiMjVUZFdKdGFYUTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0F2S2lwY2JpQWdJQ29nUm5WdVkzUnBiMjRnZEdoaGRDQnlaV3BsWTNSeklHTnZiR3hsWTNScGIyNWNiaUFnSUNvdlhHNGdJRzl1UTJGdVkyVnNPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZObGRFRndjSEp2ZG1WR2IzSkJiR3hYWVhKdWFXNW5PMXh1SWl3aVpYaHdiM0owSUhzZ1pHVm1ZWFZzZENCOUlHWnliMjBnSnk0dmMybG5ibUYwZFhKbExYSmxjWFZsYzNRdGIzSnBaMmx1WVd3dVkyOXVkR0ZwYm1WeUp6dGNiaUlzSW1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnZlNCbWNtOXRJQ2N1TDNOcFoyNWhkSFZ5WlMxeVpYRjFaWE4wTFc5eWFXZHBibUZzTFhkaGNtNXBibWNuTzF4dUlpd2lhVzF3YjNKMElGSmxZV04wSUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdleUIxYzJWSk1UaHVRMjl1ZEdWNGRDQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMMmh2YjJ0ekwzVnpaVWt4T0c1RGIyNTBaWGgwSnp0Y2JseHVhVzF3YjNKMElGQnZjRzkyWlhJZ1puSnZiU0FuTGk0dkxpNHZMaTR2ZFdrdmNHOXdiM1psY2ljN1hHNXBiWEJ2Y25RZ1FtOTRJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMMkp2ZUNjN1hHNXBiWEJ2Y25RZ1FuVjBkRzl1SUdaeWIyMGdKeTR1THk0dUx5NHVMM1ZwTDJKMWRIUnZiaWM3WEc1cGJYQnZjblFnVkhsd2IyZHlZWEJvZVNCbWNtOXRJQ2N1TGk4dUxpOHVMaTkxYVM5MGVYQnZaM0poY0doNUp6dGNibWx0Y0c5eWRDQjdYRzRnSUVsamIyNURiMnh2Y2l4Y2JpQWdSRWxUVUV4QldTeGNiaUFnUmt4RldGOUVTVkpGUTFSSlQwNHNYRzRnSUVaUFRsUmZWMFZKUjBoVUxGeHVJQ0JLZFhOMGFXWjVRMjl1ZEdWdWRDeGNiaUFnVkdWNGRFTnZiRzl5TEZ4dUlDQlVlWEJ2WjNKaGNHaDVWbUZ5YVdGdWRDeGNibjBnWm5KdmJTQW5MaTR2TGk0dkxpNHZMaTR2YUdWc2NHVnljeTlqYjI1emRHRnVkSE12WkdWemFXZHVMWE41YzNSbGJTYzdYRzVwYlhCdmNuUWdTV1JsYm5ScFkyOXVJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMMmxrWlc1MGFXTnZiaWM3WEc1cGJYQnZjblFnZXlCemFHOXlkR1Z1UVdSa2NtVnpjeUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMeTR1TDJobGJIQmxjbk12ZFhScGJITXZkWFJwYkNjN1hHNXBiWEJ2Y25RZ2V5QkpZMjl1TENCSlkyOXVUbUZ0WlNCOUlHWnliMjBnSnk0dUx5NHVMeTR1TDJOdmJYQnZibVZ1ZEMxc2FXSnlZWEo1Snp0Y2JseHVZMjl1YzNRZ1UybG5ibUYwZFhKbFVtVnhkV1Z6ZEU5eWFXZHBibUZzVjJGeWJtbHVaeUE5SUNoN1hHNGdJSE5sYm1SbGNrRmtaSEpsYzNNc1hHNGdJRzVoYldVc1hHNGdJRzl1VTNWaWJXbDBMRnh1SUNCdmJrTmhibU5sYkN4Y2JuMHBJRDArSUh0Y2JpQWdZMjl1YzNRZ2RDQTlJSFZ6WlVreE9HNURiMjUwWlhoMEtDazdYRzVjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0E4VUc5d2IzWmxjaUJqYkdGemMwNWhiV1U5WENKemFXZHVZWFIxY21VdGNtVnhkV1Z6ZEMxM1lYSnVhVzVuWDE5amIyNTBaVzUwWENJK1hHNGdJQ0FnSUNBOFFtOTRYRzRnSUNBZ0lDQWdJR1JwYzNCc1lYazllMFJKVTFCTVFWa3VSa3hGV0gxY2JpQWdJQ0FnSUNBZ1pteGxlRVJwY21WamRHbHZiajE3Umt4RldGOUVTVkpGUTFSSlQwNHVVazlYZlZ4dUlDQWdJQ0FnSUNCd1lXUmthVzVuUFhzMGZWeHVJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0p6YVdkdVlYUjFjbVV0Y21WeGRXVnpkQzEzWVhKdWFXNW5YMTlqYjI1MFpXNTBYMTlvWldGa1pYSmNJbHh1SUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0E4U1dOdmJseHVJQ0FnSUNBZ0lDQWdJRzVoYldVOWUwbGpiMjVPWVcxbExrUmhibWRsY24xY2JpQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxN1NXTnZia052Ykc5eUxtVnljbTl5UkdWbVlYVnNkSDFjYmlBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMTNZWEp1YVc1blgxOWpiMjUwWlc1MFgxOW9aV0ZrWlhKZlgzZGhjbTVwYm1jdGFXTnZibHdpWEc0Z0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lEeFVlWEJ2WjNKaGNHaDVYRzRnSUNBZ0lDQWdJQ0FnZG1GeWFXRnVkRDE3Vkhsd2IyZHlZWEJvZVZaaGNtbGhiblF1U0RSOVhHNGdJQ0FnSUNBZ0lDQWdabTl1ZEZkbGFXZG9kRDE3Ums5T1ZGOVhSVWxIU0ZRdVFrOU1SSDFjYmlBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lIdDBLQ2Q1YjNWeVJuVnVaSE5OWVhsQ1pVRjBVbWx6YXljcGZWeHVJQ0FnSUNBZ0lDQThMMVI1Y0c5bmNtRndhSGsrWEc0Z0lDQWdJQ0E4TDBKdmVENWNiaUFnSUNBZ0lEeENiM2hjYmlBZ0lDQWdJQ0FnWkdsemNHeGhlVDE3UkVsVFVFeEJXUzVHVEVWWWZWeHVJQ0FnSUNBZ0lDQndZV1JrYVc1blBYczBmVnh1SUNBZ0lDQWdJQ0JxZFhOMGFXWjVRMjl1ZEdWdWREMTdTblZ6ZEdsbWVVTnZiblJsYm5RdWMzQmhZMlZDWlhSM1pXVnVmVnh1SUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKemFXZHVZWFIxY21VdGNtVnhkV1Z6ZEMxM1lYSnVhVzVuWDE5amIyNTBaVzUwWDE5aFkyTnZkVzUwWENKY2JpQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ1BFSnZlQ0JrYVhOd2JHRjVQWHRFU1ZOUVRFRlpMa1pNUlZoOVBseHVJQ0FnSUNBZ0lDQWdJRHhKWkdWdWRHbGpiMjRnWVdSa2NtVnpjejE3YzJWdVpHVnlRV1JrY21WemMzMGdaR2xoYldWMFpYSTllek15ZlNBdlBseHVJQ0FnSUNBZ0lDQWdJRHhVZVhCdlozSmhjR2g1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWEpwWVc1MFBYdFVlWEJ2WjNKaGNHaDVWbUZ5YVdGdWRDNUlOWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWhjbWRwYmt4bFpuUTlleko5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0p6YVdkdVlYUjFjbVV0Y21WeGRXVnpkQzEzWVhKdWFXNW5YMTlqYjI1MFpXNTBYMTloWTJOdmRXNTBMVzVoYldWY0lseHVJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeGlQbnR1WVcxbGZUd3ZZajRnZTJBZ0tDUjdjMmh2Y25SbGJrRmtaSEpsYzNNb2MyVnVaR1Z5UVdSa2NtVnpjeWw5S1dCOVhHNGdJQ0FnSUNBZ0lDQWdQQzlVZVhCdlozSmhjR2g1UGx4dUlDQWdJQ0FnSUNBOEwwSnZlRDVjYmlBZ0lDQWdJRHd2UW05NFBseHVYRzRnSUNBZ0lDQThWSGx3YjJkeVlYQm9lVnh1SUNBZ0lDQWdJQ0JqYjJ4dmNqMTdWR1Y0ZEVOdmJHOXlMblJsZUhSQmJIUmxjbTVoZEdsMlpYMWNiaUFnSUNBZ0lDQWdiV0Z5WjJsdVBYczBmVnh1SUNBZ0lDQWdJQ0J0WVhKbmFXNVViM0E5ZXpSOVhHNGdJQ0FnSUNBZ0lHMWhjbWRwYmtKdmRIUnZiVDE3TkgxY2JpQWdJQ0FnSUNBZ2RtRnlhV0Z1ZEQxN1ZIbHdiMmR5WVhCb2VWWmhjbWxoYm5RdVNEWjlYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJSHQwS0NkemFXZHVZWFIxY21WU1pYRjFaWE4wVjJGeWJtbHVaeWNzSUZ0Y2JpQWdJQ0FnSUNBZ0lDQThZVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FISmxaajFjSW1oMGRIQnpPaTh2WTI5dWMyVnVjM2x6TG01bGRDOWliRzluTDIxbGRHRnRZWE5yTDNSb1pTMXpaV0ZzTFc5bUxXRndjSEp2ZG1Gc0xXdHViM2N0ZDJoaGRDMTViM1Z5WlMxamIyNXpaVzUwYVc1bkxYUnZMWGRwZEdndGNHVnliV2x6YzJsdmJuTXRZVzVrTFdGd2NISnZkbUZzY3kxcGJpMXRaWFJoYldGemF5OWNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwUFZ3aVgySnNZVzVyWENKY2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVOVhDSnNhVzVyWENKY2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVQxY0ltNXZibDlqZFhOMGIyUnBZV3hmYkdsdWExd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXdzlYQ0p1YjI5d1pXNWxjaUJ1YjNKbFptVnljbVZ5WENKY2JpQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bFBYdDdJR052Ykc5eU9pQW5kbUZ5S0MwdFkyOXNiM0l0Y0hKcGJXRnllUzFrWldaaGRXeDBLU2NnZlgxY2JpQWdJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnSUNCN2RDZ25iR1ZoY201TmIzSmxWWEJ3WlhKRFlYTmxKeWw5WEc0Z0lDQWdJQ0FnSUNBZ1BDOWhQaXhjYmlBZ0lDQWdJQ0FnWFNsOVhHNGdJQ0FnSUNBOEwxUjVjRzluY21Gd2FIaytYRzVjYmlBZ0lDQWdJRHhDYjNoY2JpQWdJQ0FnSUNBZ1pHbHpjR3hoZVQxN1JFbFRVRXhCV1M1R1RFVllmVnh1SUNBZ0lDQWdJQ0JtYkdWNFJHbHlaV04wYVc5dVBYdEdURVZZWDBSSlVrVkRWRWxQVGk1RFQweFZUVTU5WEc0Z0lDQWdJQ0FnSUdwMWMzUnBabmxEYjI1MFpXNTBQWHRLZFhOMGFXWjVRMjl1ZEdWdWRDNXpjR0ZqWlVKbGRIZGxaVzU5WEc0Z0lDQWdJQ0FnSUhCaFpHUnBibWM5ZXpSOVhHNGdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbk5wWjI1aGRIVnlaUzF5WlhGMVpYTjBMWGRoY201cGJtZGZYMlp2YjNSbGNsd2lYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJRHhDZFhSMGIyNWNiaUFnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKemFXZHVZWFIxY21VdGNtVnhkV1Z6ZEMxM1lYSnVhVzVuWDE5bWIyOTBaWEpmWDNOcFoyNHRZblYwZEc5dVhDSmNiaUFnSUNBZ0lDQWdJQ0IwZVhCbFBWd2laR0Z1WjJWeUxYQnlhVzFoY25sY0lseHVJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczllMjl1VTNWaWJXbDBmVnh1SUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ2UzUW9KM05wWjI0bktYMWNiaUFnSUNBZ0lDQWdQQzlDZFhSMGIyNCtYRzRnSUNBZ0lDQWdJRHhDZFhSMGIyNWNiaUFnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKemFXZHVZWFIxY21VdGNtVnhkV1Z6ZEMxM1lYSnVhVzVuWDE5bWIyOTBaWEpmWDNKbGFtVmpkQzFpZFhSMGIyNWNJbHh1SUNBZ0lDQWdJQ0FnSUhSNWNHVTlYQ0p6WldOdmJtUmhjbmxjSWx4dUlDQWdJQ0FnSUNBZ0lHOXVRMnhwWTJzOWUyOXVRMkZ1WTJWc2ZWeHVJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnZTNRb0ozSmxhbVZqZENjcGZWeHVJQ0FnSUNBZ0lDQThMMEoxZEhSdmJqNWNiaUFnSUNBZ0lEd3ZRbTk0UGx4dUlDQWdJRHd2VUc5d2IzWmxjajVjYmlBZ0tUdGNibjA3WEc1Y2JsTnBaMjVoZEhWeVpWSmxjWFZsYzNSUGNtbG5hVzVoYkZkaGNtNXBibWN1Y0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0J6Wlc1a1pYSkJaR1J5WlhOek9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0J1WVcxbE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0J2YmxOMVltMXBkRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUc5dVEyRnVZMlZzT2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGTnBaMjVoZEhWeVpWSmxjWFZsYzNSUGNtbG5hVzVoYkZkaGNtNXBibWM3WEc0aUxDSnBiWEJ2Y25RZ1VtVmhZM1FzSUhzZ1EyOXRjRzl1Wlc1MElIMGdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCamJHRnpjMjVoYldWeklHWnliMjBnSjJOc1lYTnpibUZ0WlhNbk8xeHVhVzF3YjNKMElIc2dUMkpxWldOMFNXNXpjR1ZqZEc5eUlIMGdabkp2YlNBbmNtVmhZM1F0YVc1emNHVmpkRzl5Snp0Y2JtbHRjRzl5ZENCTVpXUm5aWEpKYm5OMGNuVmpkR2x2YmtacFpXeGtJR1p5YjIwZ0p5NHVMMnhsWkdkbGNpMXBibk4wY25WamRHbHZiaTFtYVdWc1pDYzdYRzVwYlhCdmNuUWdleUJOUlZOVFFVZEZYMVJaVUVVZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdlkyOXVjM1JoYm5SekwyRndjQ2M3WEc1cGJYQnZjblFnZTF4dUlDQm5aWFJPWlhSM2IzSnJUbUZ0WlVaeWIyMVFjbTkyYVdSbGNsUjVjR1VzWEc0Z0lHZGxkRlZTVEVodmMzUk9ZVzFsTEZ4dUlDQnpZVzVwZEdsNlpWTjBjbWx1Wnl4Y2JuMGdabkp2YlNBbkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5MWRHbHNjeTkxZEdsc0p6dGNibWx0Y0c5eWRDQjdJSE4wY21sd1NHVjRVSEpsWm1sNElIMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZjMmhoY21Wa0wyMXZaSFZzWlhNdmFHVjRjM1J5YVc1bkxYVjBhV3h6Snp0Y2JtbHRjRzl5ZENCQ2RYUjBiMjRnWm5KdmJTQW5MaTR2TGk0dmRXa3ZZblYwZEc5dUp6dGNibWx0Y0c5eWRDQlRhWFJsVDNKcFoybHVJR1p5YjIwZ0p5NHVMeTR1TDNWcEwzTnBkR1V0YjNKcFoybHVKenRjYm1sdGNHOXlkQ0JPWlhSM2IzSnJRV05qYjNWdWRFSmhiR0Z1WTJWSVpXRmtaWElnWm5KdmJTQW5MaTR2Ym1WMGQyOXlheTFoWTJOdmRXNTBMV0poYkdGdVkyVXRhR1ZoWkdWeUp6dGNibWx0Y0c5eWRDQlVlWEJ2WjNKaGNHaDVJR1p5YjIwZ0p5NHVMeTR1TDNWcEwzUjVjRzluY21Gd2FIa3ZkSGx3YjJkeVlYQm9lU2M3WEc1cGJYQnZjblFnZXlCUVlXZGxRMjl1ZEdGcGJtVnlSbTl2ZEdWeUlIMGdabkp2YlNBbkxpNHZMaTR2ZFdrdmNHRm5aUzFqYjI1MFlXbHVaWEluTzF4dWFXMXdiM0owSUh0Y2JpQWdWSGx3YjJkeVlYQm9lVlpoY21saGJuUXNYRzRnSUVaUFRsUmZWMFZKUjBoVUxGeHVJQ0JVUlZoVVgwRk1TVWRPTEZ4dUlDQlVaWGgwUTI5c2IzSXNYRzU5SUdaeWIyMGdKeTR1THk0dUx5NHVMMmhsYkhCbGNuTXZZMjl1YzNSaGJuUnpMMlJsYzJsbmJpMXplWE4wWlcwbk8xeHVhVzF3YjNKMElIc2dUblZ0WlhKcFl5QjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOXRiMlIxYkdWekwwNTFiV1Z5YVdNbk8xeHVhVzF3YjNKMElIc2dSWFJvWlhKRVpXNXZiV2x1WVhScGIyNGdmU0JtY205dElDY3VMaTh1TGk4dUxpOHVMaTl6YUdGeVpXUXZZMjl1YzNSaGJuUnpMMk52YlcxdmJpYzdYRzVwYlhCdmNuUWdRMjl1Wm1seWJWQmhaMlZEYjI1MFlXbHVaWEpPWVhacFoyRjBhVzl1SUdaeWIyMGdKeTR1TDJOdmJtWnBjbTB0Y0dGblpTMWpiMjUwWVdsdVpYSXZZMjl1Wm1seWJTMXdZV2RsTFdOdmJuUmhhVzVsY2kxdVlYWnBaMkYwYVc5dUp6dGNibWx0Y0c5eWRDQlRaV04xY21sMGVWQnliM1pwWkdWeVFtRnVibVZ5VFdWemMyRm5aU0JtY205dElDY3VMaTl6WldOMWNtbDBlUzF3Y205MmFXUmxjaTFpWVc1dVpYSXRiV1Z6YzJGblpTOXpaV04xY21sMGVTMXdjbTkyYVdSbGNpMWlZVzV1WlhJdGJXVnpjMkZuWlNjN1hHNXBiWEJ2Y25RZ2V5QlRSVU5WVWtsVVdWOVFVazlXU1VSRlVsOU5SVk5UUVVkRlgxTkZWa1ZTU1ZSSlJWTWdmU0JtY205dElDY3VMaTl6WldOMWNtbDBlUzF3Y205MmFXUmxjaTFpWVc1dVpYSXRiV1Z6YzJGblpTOXpaV04xY21sMGVTMXdjbTkyYVdSbGNpMWlZVzV1WlhJdGJXVnpjMkZuWlM1amIyNXpkR0Z1ZEhNbk8xeHVhVzF3YjNKMElIc2dabTl5YldGMFEzVnljbVZ1WTNrZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5b1pXeHdaWEp6TDNWMGFXeHpMMk52Ym1acGNtMHRkSGd1ZFhScGJDYzdYRzVwYlhCdmNuUWdleUJuWlhSV1lXeDFaVVp5YjIxWFpXbElaWGdnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5emFHRnlaV1F2Ylc5a2RXeGxjeTlqYjI1MlpYSnphVzl1TG5WMGFXeHpKenRjYmx4dWFXMXdiM0owSUZOcFoyNWhkSFZ5WlZKbGNYVmxjM1JQY21sbmFXNWhiRmRoY201cGJtY2dabkp2YlNBbkxpOXphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMXZjbWxuYVc1aGJDMTNZWEp1YVc1bkp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1UybG5ibUYwZFhKbFVtVnhkV1Z6ZEU5eWFXZHBibUZzSUdWNGRHVnVaSE1nUTI5dGNHOXVaVzUwSUh0Y2JpQWdjM1JoZEdsaklHTnZiblJsZUhSVWVYQmxjeUE5SUh0Y2JpQWdJQ0IwT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQjlPMXh1WEc0Z0lITjBZWFJwWXlCd2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUNBZ1puSnZiVUZqWTI5MWJuUTZJRkJ5YjNCVWVYQmxjeTV6YUdGd1pTaDdYRzRnSUNBZ0lDQmhaR1J5WlhOek9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ0lDQmlZV3hoYm1ObE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUNBZ2JtRnRaVG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQjlLUzVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJR05oYm1ObGJEb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCamJHVmhja052Ym1acGNtMVVjbUZ1YzJGamRHbHZiam9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQm9hWE4wYjNKNU9pQlFjbTl3Vkhsd1pYTXViMkpxWldOMExtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ2JXOXpkRkpsWTJWdWRFOTJaWEoyYVdWM1VHRm5aVG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJSE5wWjI0NklGQnliM0JVZVhCbGN5NW1kVzVqTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnZEhoRVlYUmhPaUJRY205d1ZIbHdaWE11YjJKcVpXTjBMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdjM1ZpYW1WamRFMWxkR0ZrWVhSaE9pQlFjbTl3Vkhsd1pYTXViMkpxWldOMExGeHVJQ0FnSUdoaGNtUjNZWEpsVjJGc2JHVjBVbVZ4ZFdseVpYTkRiMjV1WldOMGFXOXVPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCcGMweGxaR2RsY2xkaGJHeGxkRG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2JtRjBhWFpsUTNWeWNtVnVZM2s2SUZCeWIzQlVlWEJsY3k1emRISnBibWN1YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0JqZFhKeVpXNTBRM1Z5Y21WdVkzazZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQmpiMjUyWlhKemFXOXVVbUYwWlRvZ1VISnZjRlI1Y0dWekxtNTFiV0psY2l4Y2JpQWdJQ0J0WlhOellXZGxjME52ZFc1ME9pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxGeHVJQ0FnSUhOb2IzZFNaV3BsWTNSVWNtRnVjMkZqZEdsdmJuTkRiMjVtYVhKdFlYUnBiMjVOYjJSaGJEb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCallXNWpaV3hCYkd3NklGQnliM0JVZVhCbGN5NW1kVzVqTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnY0hKdmRtbGtaWEpEYjI1bWFXYzZJRkJ5YjNCVWVYQmxjeTV2WW1wbFkzUXNYRzRnSUgwN1hHNWNiaUFnYzNSaGRHVWdQU0I3WEc0Z0lDQWdjMmh2ZDFOcFoyNWhkSFZ5WlZKbGNYVmxjM1JYWVhKdWFXNW5PaUJtWVd4elpTeGNiaUFnZlR0Y2JseHVJQ0J0YzJkSVpYaFViMVJsZUhRZ1BTQW9hR1Y0S1NBOVBpQjdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR052Ym5OMElITjBjbWx3Y0dWa0lEMGdjM1J5YVhCSVpYaFFjbVZtYVhnb2FHVjRLVHRjYmlBZ0lDQWdJR052Ym5OMElHSjFabVlnUFNCQ2RXWm1aWEl1Wm5KdmJTaHpkSEpwY0hCbFpDd2dKMmhsZUNjcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUdKMVptWXViR1Z1WjNSb0lEMDlQU0F6TWlBL0lHaGxlQ0E2SUdKMVptWXVkRzlUZEhKcGJtY29KM1YwWmpnbktUdGNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2FHVjRPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0J5Wlc1a1pYSkJZMk52ZFc1MFNXNW1ieUE5SUNncElEMCtJSHRjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKeVpYRjFaWE4wTFhOcFoyNWhkSFZ5WlY5ZllXTmpiM1Z1ZEMxcGJtWnZYQ0krWEc0Z0lDQWdJQ0FnSUh0MGFHbHpMbkpsYm1SbGNrRmpZMjkxYm5Rb0tYMWNiaUFnSUNBZ0lDQWdlM1JvYVhNdWNtVnVaR1Z5VW1WeGRXVnpkRWxqYjI0b0tYMWNiaUFnSUNBZ0lDQWdlM1JvYVhNdWNtVnVaR1Z5UW1Gc1lXNWpaU2dwZlZ4dUlDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0tUdGNiaUFnZlR0Y2JseHVJQ0J5Wlc1a1pYSlVlWEJsWkVSaGRHRWdQU0FvWkdGMFlTa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2dkQ0I5SUQwZ2RHaHBjeTVqYjI1MFpYaDBPMXh1SUNBZ0lHTnZibk4wSUhzZ1pHOXRZV2x1TENCdFpYTnpZV2RsSUgwZ1BTQktVMDlPTG5CaGNuTmxLR1JoZEdFcE8xeHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbkpsY1hWbGMzUXRjMmxuYm1GMGRYSmxYMTkwZVhCbFpDMWpiMjUwWVdsdVpYSmNJajVjYmlBZ0lDQWdJQ0FnZTJSdmJXRnBiaUEvSUNoY2JpQWdJQ0FnSUNBZ0lDQThaR2wyUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQR2d4UG50MEtDZGtiMjFoYVc0bktYMDhMMmd4UGx4dUlDQWdJQ0FnSUNBZ0lDQWdQRTlpYW1WamRFbHVjM0JsWTNSdmNpQmtZWFJoUFh0a2IyMWhhVzU5SUdWNGNHRnVaRXhsZG1Wc1BYc3hmU0J1WVcxbFBWd2laRzl0WVdsdVhDSWdMejVjYmlBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnS1NBNklDaGNiaUFnSUNBZ0lDQWdJQ0FuSjF4dUlDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQjdiV1Z6YzJGblpTQS9JQ2hjYmlBZ0lDQWdJQ0FnSUNBOFpHbDJQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BHZ3hQbnQwS0NkdFpYTnpZV2RsSnlsOVBDOW9NVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeFBZbXBsWTNSSmJuTndaV04wYjNJZ1pHRjBZVDE3YldWemMyRm5aWDBnWlhod1lXNWtUR1YyWld3OWV6RjlJRzVoYldVOVhDSnRaWE56WVdkbFhDSWdMejVjYmlBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnS1NBNklDaGNiaUFnSUNBZ0lDQWdJQ0FuSjF4dUlDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdLVHRjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWEpDYjJSNUlEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUd4bGRDQnliM2R6TzF4dUlDQWdJR052Ym5OMElHNXZkR2xqWlNBOUlHQWtlM1JvYVhNdVkyOXVkR1Y0ZEM1MEtDZDViM1ZUYVdkdUp5bDlPbUE3WEc1Y2JpQWdJQ0JqYjI1emRDQjdJSFI0UkdGMFlTd2djM1ZpYW1WamRFMWxkR0ZrWVhSaElIMGdQU0IwYUdsekxuQnliM0J6TzF4dUlDQWdJR052Ym5OMElIdGNiaUFnSUNBZ0lIUjVjR1VzWEc0Z0lDQWdJQ0J0YzJkUVlYSmhiWE02SUhzZ1pHRjBZU0I5TEZ4dUlDQWdJSDBnUFNCMGVFUmhkR0U3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaU0E5UFQwZ1RVVlRVMEZIUlY5VVdWQkZMbEJGVWxOUFRrRk1YMU5KUjA0cElIdGNiaUFnSUNBZ0lISnZkM01nUFNCYlhHNGdJQ0FnSUNBZ0lIc2dibUZ0WlRvZ2RHaHBjeTVqYjI1MFpYaDBMblFvSjIxbGMzTmhaMlVuS1N3Z2RtRnNkV1U2SUhSb2FYTXViWE5uU0dWNFZHOVVaWGgwS0dSaGRHRXBJSDBzWEc0Z0lDQWdJQ0JkTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pTQTlQVDBnVFVWVFUwRkhSVjlVV1ZCRkxrVlVTRjlUU1VkT1gxUlpVRVZFWDBSQlZFRXBJSHRjYmlBZ0lDQWdJSEp2ZDNNZ1BTQmtZWFJoTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pTQTlQVDBnVFVWVFUwRkhSVjlVV1ZCRkxrVlVTRjlUU1VkT0tTQjdYRzRnSUNBZ0lDQnliM2R6SUQwZ1czc2dibUZ0WlRvZ2RHaHBjeTVqYjI1MFpYaDBMblFvSjIxbGMzTmhaMlVuS1N3Z2RtRnNkV1U2SUdSaGRHRWdmVjA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2RHRnlaMlYwVTNWaWFtVmpkRTFsZEdGa1lYUmhJRDBnZEhoRVlYUmhMbTF6WjFCaGNtRnRjeTV2Y21sbmFXNWNiaUFnSUNBZ0lEOGdjM1ZpYW1WamRFMWxkR0ZrWVhSaFB5NWJkSGhFWVhSaExtMXpaMUJoY21GdGN5NXZjbWxuYVc1ZFhHNGdJQ0FnSUNBNklHNTFiR3c3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSnlaWEYxWlhOMExYTnBaMjVoZEhWeVpWOWZZbTlrZVZ3aVBseHVJQ0FnSUNBZ0lDQjdLSFI0UkdGMFlUOHVjMlZqZFhKcGRIbFFjbTkyYVdSbGNsSmxjM0J2Ym5ObFB5NW1iR0ZuUVhORVlXNW5aWEp2ZFhNZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lIUjRSR0YwWVQ4dWMyVmpkWEpwZEhsUWNtOTJhV1JsY2xKbGMzQnZibk5sUHk1bWJHRm5RWE5FWVc1blpYSnZkWE1nSVQwOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JUUlVOVlVrbFVXVjlRVWs5V1NVUkZVbDlOUlZOVFFVZEZYMU5GVmtWU1NWUkpSVk11VGs5VVgwMUJURWxEU1U5VlV5a2dmSHhjYmlBZ0lDQWdJQ0FnS0hSNFJHRjBZVDh1YzJWamRYSnBkSGxRY205MmFXUmxjbEpsYzNCdmJuTmxJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ1QySnFaV04wTG10bGVYTW9kSGhFWVhSaExuTmxZM1Z5YVhSNVVISnZkbWxrWlhKU1pYTndiMjV6WlNrdWJHVnVaM1JvSUQwOVBTQXdLU0EvSUNoY2JpQWdJQ0FnSUNBZ0lDQThVMlZqZFhKcGRIbFFjbTkyYVdSbGNrSmhibTVsY2sxbGMzTmhaMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxZM1Z5YVhSNVVISnZkbWxrWlhKU1pYTndiMjV6WlQxN2RIaEVZWFJoTG5ObFkzVnlhWFI1VUhKdmRtbGtaWEpTWlhOd2IyNXpaWDFjYmlBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQXBJRG9nYm5Wc2JIMWNibHh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0luSmxjWFZsYzNRdGMybG5ibUYwZFhKbFgxOXZjbWxuYVc1Y0lqNWNiaUFnSUNBZ0lDQWdJQ0E4VTJsMFpVOXlhV2RwYmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2wwYkdVOWUzUjRSR0YwWVM1dGMyZFFZWEpoYlhNdWIzSnBaMmx1ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMmwwWlU5eWFXZHBiajE3ZEhoRVlYUmhMbTF6WjFCaGNtRnRjeTV2Y21sbmFXNTlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFkyOXVVM0pqUFh0MFlYSm5aWFJUZFdKcVpXTjBUV1YwWVdSaGRHRS9MbWxqYjI1VmNteDlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFkyOXVUbUZ0WlQxN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdkbGRGVlNURWh2YzNST1lXMWxLSFJoY21kbGRGTjFZbXBsWTNSTlpYUmhaR0YwWVQ4dWIzSnBaMmx1S1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFlYSm5aWFJUZFdKcVpXTjBUV1YwWVdSaGRHRS9MbTl5YVdkcGJseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhwY0Z4dUlDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJRHd2WkdsMlBseHVYRzRnSUNBZ0lDQWdJRHhVZVhCdlozSmhjR2g1WEc0Z0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2ljbVZ4ZFdWemRDMXphV2R1WVhSMWNtVmZYMk52Ym5SbGJuUmZYM1JwZEd4bFhDSmNiaUFnSUNBZ0lDQWdJQ0IyWVhKcFlXNTBQWHRVZVhCdlozSmhjR2g1Vm1GeWFXRnVkQzVJTTMxY2JpQWdJQ0FnSUNBZ0lDQm1iMjUwVjJWcFoyaDBQWHRHVDA1VVgxZEZTVWRJVkM1Q1QweEVmVnh1SUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ2UzUm9hWE11WTI5dWRHVjRkQzUwS0NkemFXZFNaWEYxWlhOMEp5bDlYRzRnSUNBZ0lDQWdJRHd2Vkhsd2IyZHlZWEJvZVQ1Y2JpQWdJQ0FnSUNBZ1BGUjVjRzluY21Gd2FIbGNiaUFnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKeVpYRjFaWE4wTFhOcFoyNWhkSFZ5WlY5ZlkyOXVkR1Z1ZEY5ZmMzVmlkR2wwYkdWY0lseHVJQ0FnSUNBZ0lDQWdJSFpoY21saGJuUTllMVI1Y0c5bmNtRndhSGxXWVhKcFlXNTBMa2czZlZ4dUlDQWdJQ0FnSUNBZ0lHTnZiRzl5UFh0VVpYaDBRMjlzYjNJdWRHVjRkRUZzZEdWeWJtRjBhWFpsZlZ4dUlDQWdJQ0FnSUNBZ0lHRnNhV2R1UFh0VVJWaFVYMEZNU1VkT0xrTkZUbFJGVW4xY2JpQWdJQ0FnSUNBZ0lDQnRZWEpuYVc0OWV6RXlmVnh1SUNBZ0lDQWdJQ0FnSUcxaGNtZHBibFJ2Y0QxN00zMWNiaUFnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUh0MGFHbHpMbU52Ym5SbGVIUXVkQ2duYzJsbmJtRjBkWEpsVW1WeGRXVnpkRWQxYVdSaGJtTmxKeWw5WEc0Z0lDQWdJQ0FnSUR3dlZIbHdiMmR5WVhCb2VUNWNibHh1SUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMTdZMnhoYzNOdVlXMWxjeWduY21WeGRXVnpkQzF6YVdkdVlYUjFjbVZmWDI1dmRHbGpaU2NwZlQ1N2JtOTBhV05sZlR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMWNJbkpsY1hWbGMzUXRjMmxuYm1GMGRYSmxYMTl5YjNkelhDSStYRzRnSUNBZ0lDQWdJQ0FnZTNKdmQzTXViV0Z3S0NoN0lHNWhiV1VzSUhaaGJIVmxJSDBzSUdsdVpHVjRLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBblltOXZiR1ZoYmljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMWEJoY21GdExYSmxZWE56YVdkdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxJRDBnZG1Gc2RXVXVkRzlUZEhKcGJtY29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnlaWEYxWlhOMExYTnBaMjVoZEhWeVpWOWZjbTkzWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCclpYazllMkJ5WlhGMVpYTjBMWE5wWjI1aGRIVnlaUzF5YjNjdEpIdHBibVJsZUgxZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5WENKeVpYRjFaWE4wTFhOcFoyNWhkSFZ5WlY5ZmNtOTNMWFJwZEd4bFhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3YzJGdWFYUnBlbVZUZEhKcGJtY29ZQ1I3Ym1GdFpYMDZZQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSnlaWEYxWlhOMExYTnBaMjVoZEhWeVpWOWZjbTkzTFhaaGJIVmxYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2MyRnVhWFJwZW1WVGRISnBibWNvZG1Gc2RXVXBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnZlNsOVhHNGdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0tUdGNiaUFnZlR0Y2JseHVJQ0J2YmxOMVltMXBkQ0E5SUdGemVXNWpJQ2hsZG1WdWRDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2dZMnhsWVhKRGIyNW1hWEp0VkhKaGJuTmhZM1JwYjI0c0lHaHBjM1J2Y25rc0lHMXZjM1JTWldObGJuUlBkbVZ5ZG1sbGQxQmhaMlVzSUhOcFoyNGdmU0E5WEc0Z0lDQWdJQ0IwYUdsekxuQnliM0J6TzF4dVhHNGdJQ0FnWVhkaGFYUWdjMmxuYmlobGRtVnVkQ2s3WEc0Z0lDQWdZMnhsWVhKRGIyNW1hWEp0VkhKaGJuTmhZM1JwYjI0b0tUdGNiaUFnSUNCb2FYTjBiM0o1TG5CMWMyZ29iVzl6ZEZKbFkyVnVkRTkyWlhKMmFXVjNVR0ZuWlNrN1hHNGdJSDA3WEc1Y2JpQWdiMjVEWVc1alpXd2dQU0JoYzNsdVl5QW9aWFpsYm5RcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHTnNaV0Z5UTI5dVptbHliVlJ5WVc1ellXTjBhVzl1TENCb2FYTjBiM0o1TENCdGIzTjBVbVZqWlc1MFQzWmxjblpwWlhkUVlXZGxMQ0JqWVc1alpXd2dmU0E5WEc0Z0lDQWdJQ0IwYUdsekxuQnliM0J6TzF4dVhHNGdJQ0FnWVhkaGFYUWdZMkZ1WTJWc0tHVjJaVzUwS1R0Y2JpQWdJQ0JqYkdWaGNrTnZibVpwY20xVWNtRnVjMkZqZEdsdmJpZ3BPMXh1SUNBZ0lHaHBjM1J2Y25rdWNIVnphQ2h0YjNOMFVtVmpaVzUwVDNabGNuWnBaWGRRWVdkbEtUdGNiaUFnZlR0Y2JseHVJQ0J5Wlc1a1pYSkdiMjkwWlhJZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdlMXh1SUNBZ0lDQWdZMkZ1WTJWc0xGeHVJQ0FnSUNBZ2MybG5iaXhjYmlBZ0lDQWdJR05zWldGeVEyOXVabWx5YlZSeVlXNXpZV04wYVc5dUxGeHVJQ0FnSUNBZ2FHbHpkRzl5ZVN4Y2JpQWdJQ0FnSUcxdmMzUlNaV05sYm5SUGRtVnlkbWxsZDFCaFoyVXNYRzRnSUNBZ0lDQjBlRVJoZEdFNklIc2dkSGx3WlNCOUxGeHVJQ0FnSUNBZ2FHRnlaSGRoY21WWFlXeHNaWFJTWlhGMWFYSmxjME52Ym01bFkzUnBiMjRzWEc0Z0lDQWdmU0E5SUhSb2FYTXVjSEp2Y0hNN1hHNGdJQ0FnWTI5dWMzUWdleUIwSUgwZ1BTQjBhR2x6TG1OdmJuUmxlSFE3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQRkJoWjJWRGIyNTBZV2x1WlhKR2IyOTBaWEpjYmlBZ0lDQWdJQ0FnWTJGdVkyVnNWR1Y0ZEQxN2RDZ25jbVZxWldOMEp5bDlYRzRnSUNBZ0lDQWdJSE4xWW0xcGRGUmxlSFE5ZTNRb0ozTnBaMjRuS1gxY2JpQWdJQ0FnSUNBZ2IyNURZVzVqWld3OWUyRnplVzVqSUNobGRtVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR0YzWVdsMElHTmhibU5sYkNobGRtVnVkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1kyeGxZWEpEYjI1bWFYSnRWSEpoYm5OaFkzUnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQm9hWE4wYjNKNUxuQjFjMmdvYlc5emRGSmxZMlZ1ZEU5MlpYSjJhV1YzVUdGblpTazdYRzRnSUNBZ0lDQWdJSDE5WEc0Z0lDQWdJQ0FnSUc5dVUzVmliV2wwUFh0aGMzbHVZeUFvWlhabGJuUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pTQTlQVDBnVFVWVFUwRkhSVjlVV1ZCRkxrVlVTRjlUU1VkT0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHNnYzJodmQxTnBaMjVoZEhWeVpWSmxjWFZsYzNSWFlYSnVhVzVuT2lCMGNuVmxJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoZDJGcGRDQnphV2R1S0dWMlpXNTBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnNaV0Z5UTI5dVptbHliVlJ5WVc1ellXTjBhVzl1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvYVhOMGIzSjVMbkIxYzJnb2JXOXpkRkpsWTJWdWRFOTJaWEoyYVdWM1VHRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlmVnh1SUNBZ0lDQWdJQ0JrYVhOaFlteGxaRDE3YUdGeVpIZGhjbVZYWVd4c1pYUlNaWEYxYVhKbGMwTnZibTVsWTNScGIyNTlYRzRnSUNBZ0lDQXZQbHh1SUNBZ0lDazdYRzRnSUgwN1hHNWNiaUFnYUdGdVpHeGxRMkZ1WTJWc1FXeHNJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUh0Y2JpQWdJQ0FnSUdOaGJtTmxiRUZzYkN4Y2JpQWdJQ0FnSUdOc1pXRnlRMjl1Wm1seWJWUnlZVzV6WVdOMGFXOXVMRnh1SUNBZ0lDQWdhR2x6ZEc5eWVTeGNiaUFnSUNBZ0lHMXZjM1JTWldObGJuUlBkbVZ5ZG1sbGQxQmhaMlVzWEc0Z0lDQWdJQ0J6YUc5M1VtVnFaV04wVkhKaGJuTmhZM1JwYjI1elEyOXVabWx5YldGMGFXOXVUVzlrWVd3c1hHNGdJQ0FnSUNCdFpYTnpZV2RsYzBOdmRXNTBMRnh1SUNBZ0lIMGdQU0IwYUdsekxuQnliM0J6TzF4dUlDQWdJR052Ym5OMElIVnVZWEJ3Y205MlpXUlVlRU52ZFc1MElEMGdiV1Z6YzJGblpYTkRiM1Z1ZER0Y2JseHVJQ0FnSUhOb2IzZFNaV3BsWTNSVWNtRnVjMkZqZEdsdmJuTkRiMjVtYVhKdFlYUnBiMjVOYjJSaGJDaDdYRzRnSUNBZ0lDQjFibUZ3Y0hKdmRtVmtWSGhEYjNWdWRDeGNiaUFnSUNBZ0lHOXVVM1ZpYldsME9pQmhjM2x1WXlBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdGM1lXbDBJR05oYm1ObGJFRnNiQ2dwTzF4dUlDQWdJQ0FnSUNCamJHVmhja052Ym1acGNtMVVjbUZ1YzJGamRHbHZiaWdwTzF4dUlDQWdJQ0FnSUNCb2FYTjBiM0o1TG5CMWMyZ29iVzl6ZEZKbFkyVnVkRTkyWlhKMmFXVjNVR0ZuWlNrN1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUgwcE8xeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNpQTlJQ2dwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3WEc0Z0lDQWdJQ0J3Y205MmFXUmxja052Ym1acFp5eGNiaUFnSUNBZ0lHMWxjM05oWjJWelEyOTFiblFzWEc0Z0lDQWdJQ0J1WVhScGRtVkRkWEp5Wlc1amVTeGNiaUFnSUNBZ0lHTjFjbkpsYm5SRGRYSnlaVzVqZVN4Y2JpQWdJQ0FnSUdaeWIyMUJZMk52ZFc1ME9pQjdJR0ZrWkhKbGMzTXNJR0poYkdGdVkyVXNJRzVoYldVZ2ZTeGNiaUFnSUNBZ0lHTnZiblpsY25OcGIyNVNZWFJsTEZ4dUlDQWdJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVJQ0FnSUdOdmJuTjBJSHNnYzJodmQxTnBaMjVoZEhWeVpWSmxjWFZsYzNSWFlYSnVhVzVuSUgwZ1BTQjBhR2x6TG5OMFlYUmxPMXh1SUNBZ0lHTnZibk4wSUhzZ2RDQjlJRDBnZEdocGN5NWpiMjUwWlhoME8xeHVYRzRnSUNBZ1kyOXVjM1FnY21WcVpXTjBUbFJsZUhRZ1BTQjBLQ2R5WldwbFkzUlNaWEYxWlhOMGMwNG5MQ0JiYldWemMyRm5aWE5EYjNWdWRGMHBPMXh1SUNBZ0lHTnZibk4wSUc1bGRIZHZjbXRPWVcxbElEMGdaMlYwVG1WMGQyOXlhMDVoYldWR2NtOXRVSEp2ZG1sa1pYSlVlWEJsS0hCeWIzWnBaR1Z5UTI5dVptbG5MblI1Y0dVcE8xeHVJQ0FnSUdOdmJuTjBJR04xY25KbGJuUk9aWFIzYjNKcklEMWNiaUFnSUNBZ0lHNWxkSGR2Y210T1lXMWxJRDA5UFNBbkoxeHVJQ0FnSUNBZ0lDQS9JSEJ5YjNacFpHVnlRMjl1Wm1sbkxtNXBZMnR1WVcxbElIeDhJSFFvSjNWdWEyNXZkMjVPWlhSM2IzSnJKeWxjYmlBZ0lDQWdJQ0FnT2lCMEtHNWxkSGR2Y210T1lXMWxLVHRjYmx4dUlDQWdJR052Ym5OMElHSmhiR0Z1WTJWSmJrSmhjMlZCYzNObGRDQTlJR052Ym5abGNuTnBiMjVTWVhSbFhHNGdJQ0FnSUNBL0lHWnZjbTFoZEVOMWNuSmxibU41S0Z4dUlDQWdJQ0FnSUNBZ0lHZGxkRlpoYkhWbFJuSnZiVmRsYVVobGVDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWW1Gc1lXNWpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnliMjFEZFhKeVpXNWplVG9nYm1GMGFYWmxRM1Z5Y21WdVkza3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMGIwTjFjbkpsYm1ONU9pQmpkWEp5Wlc1MFEzVnljbVZ1WTNrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MlpYSnphVzl1VW1GMFpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUc1MWJXSmxjazltUkdWamFXMWhiSE02SURZc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjBSbGJtOXRhVzVoZEdsdmJqb2dSWFJvWlhKRVpXNXZiV2x1WVhScGIyNHVSVlJJTEZ4dUlDQWdJQ0FnSUNBZ0lIMHBMRnh1SUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJEZFhKeVpXNWplU3hjYmlBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnT2lCdVpYY2dUblZ0WlhKcFl5aGlZV3hoYm1ObExDQXhOaXdnUlhSb1pYSkVaVzV2YldsdVlYUnBiMjR1VjBWSktWeHVJQ0FnSUNBZ0lDQWdJQzUwYjBSbGJtOXRhVzVoZEdsdmJpaEZkR2hsY2tSbGJtOXRhVzVoZEdsdmJpNUZWRWdwWEc0Z0lDQWdJQ0FnSUNBZ0xuSnZkVzVrS0RZcFhHNGdJQ0FnSUNBZ0lDQWdMblJ2UW1GelpTZ3hNQ2xjYmlBZ0lDQWdJQ0FnSUNBdWRHOVRkSEpwYm1jb0tUdGNibHh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW5KbGNYVmxjM1F0YzJsbmJtRjBkWEpsWDE5amIyNTBZV2x1WlhKY0lqNWNiaUFnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSnlaWEYxWlhOMExYTnBaMjVoZEhWeVpWOWZibUYyYVdkaGRHbHZibHdpUGx4dUlDQWdJQ0FnSUNBZ0lEeERiMjVtYVhKdFVHRm5aVU52Ym5SaGFXNWxjazVoZG1sbllYUnBiMjRnTHo1Y2JpQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpY21WeGRXVnpkQzF6YVdkdVlYUjFjbVZmWDJGalkyOTFiblJjSWo1Y2JpQWdJQ0FnSUNBZ0lDQThUbVYwZDI5eWEwRmpZMjkxYm5SQ1lXeGhibU5sU0dWaFpHVnlYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYUjNiM0pyVG1GdFpUMTdZM1Z5Y21WdWRFNWxkSGR2Y210OVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoWTJOdmRXNTBUbUZ0WlQxN2JtRnRaWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmpZMjkxYm5SQ1lXeGhibU5sUFh0aVlXeGhibU5sU1c1Q1lYTmxRWE56WlhSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYjJ0bGJrNWhiV1U5ZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MlpYSnphVzl1VW1GMFpTQS9JR04xY25KbGJuUkRkWEp5Wlc1amVUOHVkRzlWY0hCbGNrTmhjMlVvS1NBNklHNWhkR2wyWlVOMWNuSmxibU41WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCaFkyTnZkVzUwUVdSa2NtVnpjejE3WVdSa2NtVnpjMzFjYmlBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ2UzUm9hWE11Y21WdVpHVnlRbTlrZVNncGZWeHVJQ0FnSUNBZ0lDQjdkR2hwY3k1d2NtOXdjeTVwYzB4bFpHZGxjbGRoYkd4bGRDQS9JQ2hjYmlBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW1OdmJtWnBjbTB0WVhCd2NtOTJaUzFqYjI1MFpXNTBYMTlzWldSblpYSXRhVzV6ZEhKMVkzUnBiMjR0ZDNKaGNIQmxjbHdpUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQRXhsWkdkbGNrbHVjM1J5ZFdOMGFXOXVSbWxsYkdRZ2MyaHZkMFJoZEdGSmJuTjBjblZqZEdsdmJpQXZQbHh1SUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FwSURvZ2JuVnNiSDFjYmlBZ0lDQWdJQ0FnZTNOb2IzZFRhV2R1WVhSMWNtVlNaWEYxWlhOMFYyRnlibWx1WnlBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnUEZOcFoyNWhkSFZ5WlZKbGNYVmxjM1JQY21sbmFXNWhiRmRoY201cGJtZGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGJtUmxja0ZrWkhKbGMzTTllMkZrWkhKbGMzTjlYRzRnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxQWHR1WVcxbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1VGRXSnRhWFE5ZTJGemVXNWpJQ2hsZG1WdWRDa2dQVDRnWVhkaGFYUWdkR2hwY3k1dmJsTjFZbTFwZENobGRtVnVkQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia05oYm1ObGJEMTdZWE41Ym1NZ0tHVjJaVzUwS1NBOVBpQmhkMkZwZENCMGFHbHpMbTl1UTJGdVkyVnNLR1YyWlc1MEtYMWNiaUFnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQjdkR2hwY3k1eVpXNWtaWEpHYjI5MFpYSW9LWDFjYmlBZ0lDQWdJQ0FnZTIxbGMzTmhaMlZ6UTI5MWJuUWdQaUF4SUQ4Z0tGeHVJQ0FnSUNBZ0lDQWdJRHhDZFhSMGIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTlYQ0pzYVc1clhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0luSmxjWFZsYzNRdGMybG5ibUYwZFhKbFgxOWpiMjUwWVdsdVpYSmZYM0psYW1WamRGd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrTnNhV05yUFhzb0tTQTlQaUIwYUdsekxtaGhibVJzWlVOaGJtTmxiRUZzYkNncGZWeHVJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lIdHlaV3BsWTNST1ZHVjRkSDFjYmlBZ0lDQWdJQ0FnSUNBOEwwSjFkSFJ2Ymo1Y2JpQWdJQ0FnSUNBZ0tTQTZJRzUxYkd4OVhHNGdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQXBPMXh1SUNCOU8xeHVmVnh1SWl3aWFXMXdiM0owSUhzZ1kyOXVibVZqZENCOUlHWnliMjBnSjNKbFlXTjBMWEpsWkhWNEp6dGNibWx0Y0c5eWRDQjdJR052YlhCdmMyVWdmU0JtY205dElDZHlaV1IxZUNjN1hHNXBiWEJ2Y25RZ2V5QjNhWFJvVW05MWRHVnlJSDBnWm5KdmJTQW5jbVZoWTNRdGNtOTFkR1Z5TFdSdmJTYzdYRzVjYm1sdGNHOXlkQ0I3SUUxRlUxTkJSMFZmVkZsUVJTQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOWpiMjV6ZEdGdWRITXZZWEJ3Snp0Y2JtbHRjRzl5ZENCN0lHZHZTRzl0WlN3Z1kyRnVZMlZzVFhObmN5d2djMmh2ZDAxdlpHRnNJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZjM1J2Y21VdllXTjBhVzl1Y3ljN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JoWTJOdmRXNTBjMWRwZEdoVFpXNWtSWFJvWlhKSmJtWnZVMlZzWldOMGIzSXNYRzRnSUdOdmJuWmxjbk5wYjI1U1lYUmxVMlZzWldOMGIzSXNYRzRnSUdkbGRGTjFZbXBsWTNSTlpYUmhaR0YwWVN4Y2JpQWdaRzlsYzBGa1pISmxjM05TWlhGMWFYSmxUR1ZrWjJWeVNHbGtRMjl1Ym1WamRHbHZiaXhjYmlBZ2RXNWpiMjVtYVhKdFpXUk5aWE56WVdkbGMwaGhjMmhUWld4bFkzUnZjaXhjYmlBZ1oyVjBWRzkwWVd4VmJtRndjSEp2ZG1Wa1RXVnpjMkZuWlhORGIzVnVkQ3hjYmlBZ1oyVjBVSEpsWm1WeVpXNWpaWE1zWEc0Z0lHZGxkRU4xY25KbGJuUkRkWEp5Wlc1amVTeGNibjBnWm5KdmJTQW5MaTR2TGk0dkxpNHZjMlZzWldOMGIzSnpKenRjYm1sdGNHOXlkQ0I3SUdkbGRFRmpZMjkxYm5SQ2VVRmtaSEpsYzNNc0lIWmhiSFZsYzBadmNpQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyaGxiSEJsY25NdmRYUnBiSE12ZFhScGJDYzdYRzVwYlhCdmNuUWdleUJqYkdWaGNrTnZibVpwY20xVWNtRnVjMkZqZEdsdmJpQjlJR1p5YjIwZ0p5NHVMeTR1THk0dUwyUjFZMnR6TDJOdmJtWnBjbTB0ZEhKaGJuTmhZM1JwYjI0dlkyOXVabWx5YlMxMGNtRnVjMkZqZEdsdmJpNWtkV05ySnp0Y2JtbHRjRzl5ZENCN0lHZGxkRTF2YzNSU1pXTmxiblJQZG1WeWRtbGxkMUJoWjJVZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk5a2RXTnJjeTlvYVhOMGIzSjVMMmhwYzNSdmNua25PMXh1YVcxd2IzSjBJSHRjYmlBZ2FYTkJaR1J5WlhOelRHVmtaMlZ5TEZ4dUlDQm5aWFJPWVhScGRtVkRkWEp5Wlc1amVTeGNiaUFnWjJWMFVISnZkbWxrWlhKRGIyNW1hV2NzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1TDJSMVkydHpMMjFsZEdGdFlYTnJMMjFsZEdGdFlYTnJKenRjYm1sdGNHOXlkQ0JUYVdkdVlYUjFjbVZTWlhGMVpYTjBUM0pwWjJsdVlXd2dabkp2YlNBbkxpOXphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMXZjbWxuYVc1aGJDNWpiMjF3YjI1bGJuUW5PMXh1WEc1bWRXNWpkR2x2YmlCdFlYQlRkR0YwWlZSdlVISnZjSE1vYzNSaGRHVXNJRzkzYmxCeWIzQnpLU0I3WEc0Z0lHTnZibk4wSUh0Y2JpQWdJQ0J0YzJkUVlYSmhiWE02SUhzZ1puSnZiU0I5TEZ4dUlDQjlJRDBnYjNkdVVISnZjSE11ZEhoRVlYUmhPMXh1SUNCamIyNXpkQ0J3Y205MmFXUmxja052Ym1acFp5QTlJR2RsZEZCeWIzWnBaR1Z5UTI5dVptbG5LSE4wWVhSbEtUdGNibHh1SUNCamIyNXpkQ0JvWVhKa2QyRnlaVmRoYkd4bGRGSmxjWFZwY21WelEyOXVibVZqZEdsdmJpQTlYRzRnSUNBZ1pHOWxjMEZrWkhKbGMzTlNaWEYxYVhKbFRHVmtaMlZ5U0dsa1EyOXVibVZqZEdsdmJpaHpkR0YwWlN3Z1puSnZiU2s3WEc0Z0lHTnZibk4wSUdselRHVmtaMlZ5VjJGc2JHVjBJRDBnYVhOQlpHUnlaWE56VEdWa1oyVnlLSE4wWVhSbExDQm1jbTl0S1R0Y2JpQWdZMjl1YzNRZ2JXVnpjMkZuWlhOTWFYTjBJRDBnZFc1amIyNW1hWEp0WldSTlpYTnpZV2RsYzBoaGMyaFRaV3hsWTNSdmNpaHpkR0YwWlNrN1hHNGdJR052Ym5OMElHMWxjM05oWjJWelEyOTFiblFnUFNCblpYUlViM1JoYkZWdVlYQndjbTkyWldSTlpYTnpZV2RsYzBOdmRXNTBLSE4wWVhSbEtUdGNiaUFnWTI5dWMzUWdleUIxYzJWT1lYUnBkbVZEZFhKeVpXNWplVUZ6VUhKcGJXRnllVU4xY25KbGJtTjVJSDBnUFNCblpYUlFjbVZtWlhKbGJtTmxjeWh6ZEdGMFpTazdYRzVjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0J5WlhGMVpYTjBaWEk2SUc1MWJHd3NYRzRnSUNBZ2NtVnhkV1Z6ZEdWeVFXUmtjbVZ6Y3pvZ2JuVnNiQ3hjYmlBZ0lDQnRiM04wVW1WalpXNTBUM1psY25acFpYZFFZV2RsT2lCblpYUk5iM04wVW1WalpXNTBUM1psY25acFpYZFFZV2RsS0hOMFlYUmxLU3hjYmlBZ0lDQm9ZWEprZDJGeVpWZGhiR3hsZEZKbGNYVnBjbVZ6UTI5dWJtVmpkR2x2Yml4Y2JpQWdJQ0JwYzB4bFpHZGxjbGRoYkd4bGRDeGNiaUFnSUNCdVlYUnBkbVZEZFhKeVpXNWplVG9nWjJWMFRtRjBhWFpsUTNWeWNtVnVZM2tvYzNSaGRHVXBMRnh1SUNBZ0lHTjFjbkpsYm5SRGRYSnlaVzVqZVRvZ1oyVjBRM1Z5Y21WdWRFTjFjbkpsYm1ONUtITjBZWFJsS1N4Y2JpQWdJQ0JqYjI1MlpYSnphVzl1VW1GMFpUb2dkWE5sVG1GMGFYWmxRM1Z5Y21WdVkzbEJjMUJ5YVcxaGNubERkWEp5Wlc1amVWeHVJQ0FnSUNBZ1B5QnVkV3hzWEc0Z0lDQWdJQ0E2SUdOdmJuWmxjbk5wYjI1U1lYUmxVMlZzWldOMGIzSW9jM1JoZEdVcExGeHVJQ0FnSUM4dklHNXZkQ0J3WVhOelpXUWdkRzhnWTI5dGNHOXVaVzUwWEc0Z0lDQWdZV3hzUVdOamIzVnVkSE02SUdGalkyOTFiblJ6VjJsMGFGTmxibVJGZEdobGNrbHVabTlUWld4bFkzUnZjaWh6ZEdGMFpTa3NYRzRnSUNBZ2MzVmlhbVZqZEUxbGRHRmtZWFJoT2lCblpYUlRkV0pxWldOMFRXVjBZV1JoZEdFb2MzUmhkR1VwTEZ4dUlDQWdJRzFsYzNOaFoyVnpUR2x6ZEN4Y2JpQWdJQ0J0WlhOellXZGxjME52ZFc1MExGeHVJQ0FnSUhCeWIzWnBaR1Z5UTI5dVptbG5MRnh1SUNCOU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCdFlYQkVhWE53WVhSamFGUnZVSEp2Y0hNb1pHbHpjR0YwWTJncElIdGNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQm5iMGh2YldVNklDZ3BJRDArSUdScGMzQmhkR05vS0dkdlNHOXRaU2dwS1N4Y2JpQWdJQ0JqYkdWaGNrTnZibVpwY20xVWNtRnVjMkZqZEdsdmJqb2dLQ2tnUFQ0Z1pHbHpjR0YwWTJnb1kyeGxZWEpEYjI1bWFYSnRWSEpoYm5OaFkzUnBiMjRvS1Nrc1hHNGdJQ0FnYzJodmQxSmxhbVZqZEZSeVlXNXpZV04wYVc5dWMwTnZibVpwY20xaGRHbHZiazF2WkdGc09pQW9lMXh1SUNBZ0lDQWdiMjVUZFdKdGFYUXNYRzRnSUNBZ0lDQjFibUZ3Y0hKdmRtVmtWSGhEYjNWdWREb2diV1Z6YzJGblpYTkRiM1Z1ZEN4Y2JpQWdJQ0I5S1NBOVBpQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1pHbHpjR0YwWTJnb1hHNGdJQ0FnSUNBZ0lITm9iM2ROYjJSaGJDaDdYRzRnSUNBZ0lDQWdJQ0FnYm1GdFpUb2dKMUpGU2tWRFZGOVVVa0ZPVTBGRFZFbFBUbE1uTEZ4dUlDQWdJQ0FnSUNBZ0lHOXVVM1ZpYldsMExGeHVJQ0FnSUNBZ0lDQWdJSFZ1WVhCd2NtOTJaV1JVZUVOdmRXNTBPaUJ0WlhOellXZGxjME52ZFc1MExGeHVJQ0FnSUNBZ0lDQWdJR2x6VW1WeGRXVnpkRlI1Y0dVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUgwcExGeHVJQ0FnSUNBZ0tUdGNiaUFnSUNCOUxGeHVJQ0FnSUdOaGJtTmxiRUZzYkRvZ0tHMWxjM05oWjJWelRHbHpkQ2tnUFQ0Z1pHbHpjR0YwWTJnb1kyRnVZMlZzVFhObmN5aHRaWE56WVdkbGMweHBjM1FwS1N4Y2JpQWdmVHRjYm4xY2JseHVablZ1WTNScGIyNGdiV1Z5WjJWUWNtOXdjeWh6ZEdGMFpWQnliM0J6TENCa2FYTndZWFJqYUZCeWIzQnpMQ0J2ZDI1UWNtOXdjeWtnZTF4dUlDQmpiMjV6ZENCN1hHNGdJQ0FnYzJsbmJsQmxjbk52Ym1Gc1RXVnpjMkZuWlN4Y2JpQWdJQ0J6YVdkdVZIbHdaV1JOWlhOellXZGxMRnh1SUNBZ0lHTmhibU5sYkZCbGNuTnZibUZzVFdWemMyRm5aU3hjYmlBZ0lDQmpZVzVqWld4VWVYQmxaRTFsYzNOaFoyVXNYRzRnSUNBZ2MybG5iazFsYzNOaFoyVXNYRzRnSUNBZ1kyRnVZMlZzVFdWemMyRm5aU3hjYmlBZ0lDQjBlRVJoZEdFc1hHNGdJSDBnUFNCdmQyNVFjbTl3Y3p0Y2JseHVJQ0JqYjI1emRDQjdJR0ZzYkVGalkyOTFiblJ6TENCdFpYTnpZV2RsYzB4cGMzUXNJQzR1TG05MGFHVnlVM1JoZEdWUWNtOXdjeUI5SUQwZ2MzUmhkR1ZRY205d2N6dGNibHh1SUNCamIyNXpkQ0I3WEc0Z0lDQWdkSGx3WlN4Y2JpQWdJQ0J0YzJkUVlYSmhiWE02SUhzZ1puSnZiU0I5TEZ4dUlDQjlJRDBnZEhoRVlYUmhPMXh1WEc0Z0lHTnZibk4wSUdaeWIyMUJZMk52ZFc1MElEMGdaMlYwUVdOamIzVnVkRUo1UVdSa2NtVnpjeWhoYkd4QlkyTnZkVzUwY3l3Z1puSnZiU2s3WEc1Y2JpQWdZMjl1YzNRZ2V5QmpZVzVqWld4QmJHdzZJR1JwYzNCaGRHTm9RMkZ1WTJWc1FXeHNJSDBnUFNCa2FYTndZWFJqYUZCeWIzQnpPMXh1WEc0Z0lHeGxkQ0JqWVc1alpXdzdYRzRnSUd4bGRDQnphV2R1TzF4dUlDQnBaaUFvZEhsd1pTQTlQVDBnVFVWVFUwRkhSVjlVV1ZCRkxsQkZVbE5QVGtGTVgxTkpSMDRwSUh0Y2JpQWdJQ0JqWVc1alpXd2dQU0JqWVc1alpXeFFaWEp6YjI1aGJFMWxjM05oWjJVN1hHNGdJQ0FnYzJsbmJpQTlJSE5wWjI1UVpYSnpiMjVoYkUxbGMzTmhaMlU3WEc0Z0lIMGdaV3h6WlNCcFppQW9kSGx3WlNBOVBUMGdUVVZUVTBGSFJWOVVXVkJGTGtWVVNGOVRTVWRPWDFSWlVFVkVYMFJCVkVFcElIdGNiaUFnSUNCallXNWpaV3dnUFNCallXNWpaV3hVZVhCbFpFMWxjM05oWjJVN1hHNGdJQ0FnYzJsbmJpQTlJSE5wWjI1VWVYQmxaRTFsYzNOaFoyVTdYRzRnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaU0E5UFQwZ1RVVlRVMEZIUlY5VVdWQkZMa1ZVU0Y5VFNVZE9LU0I3WEc0Z0lDQWdZMkZ1WTJWc0lEMGdZMkZ1WTJWc1RXVnpjMkZuWlR0Y2JpQWdJQ0J6YVdkdUlEMGdjMmxuYmsxbGMzTmhaMlU3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJQzR1TG05M2JsQnliM0J6TEZ4dUlDQWdJQzR1TG05MGFHVnlVM1JoZEdWUWNtOXdjeXhjYmlBZ0lDQXVMaTVrYVhOd1lYUmphRkJ5YjNCekxGeHVJQ0FnSUdaeWIyMUJZMk52ZFc1MExGeHVJQ0FnSUhSNFJHRjBZU3hjYmlBZ0lDQmpZVzVqWld3c1hHNGdJQ0FnYzJsbmJpeGNiaUFnSUNCallXNWpaV3hCYkd3NklDZ3BJRDArSUdScGMzQmhkR05vUTJGdVkyVnNRV3hzS0haaGJIVmxjMFp2Y2lodFpYTnpZV2RsYzB4cGMzUXBLU3hjYmlBZ2ZUdGNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTI5dGNHOXpaU2hjYmlBZ2QybDBhRkp2ZFhSbGNpeGNiaUFnWTI5dWJtVmpkQ2h0WVhCVGRHRjBaVlJ2VUhKdmNITXNJRzFoY0VScGMzQmhkR05vVkc5UWNtOXdjeXdnYldWeVoyVlFjbTl3Y3lrc1hHNHBLRk5wWjI1aGRIVnlaVkpsY1hWbGMzUlBjbWxuYVc1aGJDazdYRzRpTENKbGVIQnZjblFnZXlCa1pXWmhkV3gwSUgwZ1puSnZiU0FuTGk5emFXZHVZWFIxY21VdGNtVnhkV1Z6ZEMxemFYZGxKenRjYmlJc0ltVjRjRzl5ZENCN0lHUmxabUYxYkhRZ2ZTQm1jbTl0SUNjdUwzTnBaMjVoZEhWeVpTMXlaWEYxWlhOMExYTnBkMlV0YUdWaFpHVnlKenRjYmlJc0ltbHRjRzl5ZENCU1pXRmpkQ3dnZXlCMWMyVkRiMjUwWlhoMElIMGdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCQlkyTnZkVzUwVEdsemRFbDBaVzBnWm5KdmJTQW5MaTR2TGk0dllXTmpiM1Z1ZEMxc2FYTjBMV2wwWlcwbk8xeHVhVzF3YjNKMElIc2dTVEU0YmtOdmJuUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTh1TGk5amIyNTBaWGgwY3k5cE1UaHVKenRjYm1sdGNHOXlkQ0JRWlhKdGFYTnphVzl1YzBOdmJtNWxZM1JJWldGa1pYSWdabkp2YlNBbkxpNHZMaTR2Y0dWeWJXbHpjMmx2Ym5NdFkyOXVibVZqZEMxb1pXRmtaWEluTzF4dWFXMXdiM0owSUZOcFoyNWhkSFZ5WlZKbGNYVmxjM1JUU1ZkRlNXTnZiaUJtY205dElDY3VMaTl6YVdkdVlYUjFjbVV0Y21WeGRXVnpkQzF6YVhkbExXbGpiMjRuTzF4dWFXMXdiM0owSUZOcFoyNWhkSFZ5WlZKbGNYVmxjM1JUU1ZkRlZHRm5JR1p5YjIwZ0p5NHVMM05wWjI1aGRIVnlaUzF5WlhGMVpYTjBMWE5wZDJVdGRHRm5KenRjYm1sdGNHOXlkQ0JVYjI5c2RHbHdJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMM1J2YjJ4MGFYQW5PMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJUYVdkdVlYUjFjbVZTWlhGMVpYTjBVMGxYUlVobFlXUmxjaWg3WEc0Z0lHWnliMjFCWTJOdmRXNTBMRnh1SUNCa2IyMWhhVzRzWEc0Z0lHbHpVMGxYUlVSdmJXRnBibFpoYkdsa0xGeHVJQ0J6ZFdKcVpXTjBUV1YwWVdSaGRHRXNYRzU5S1NCN1hHNGdJR052Ym5OMElIUWdQU0IxYzJWRGIyNTBaWGgwS0VreE9HNURiMjUwWlhoMEtUdGNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBWd2ljMmxuYm1GMGRYSmxMWEpsY1hWbGMzUXRjMmwzWlMxb1pXRmtaWEpjSWo1Y2JpQWdJQ0FnSUR4UVpYSnRhWE56YVc5dWMwTnZibTVsWTNSSVpXRmtaWEpjYmlBZ0lDQWdJQ0FnYVdOdmJsVnliRDE3YzNWaWFtVmpkRTFsZEdGa1lYUmhMbWxqYjI1VmNteDlYRzRnSUNBZ0lDQWdJR2xqYjI1T1lXMWxQWHR6ZFdKcVpXTjBUV1YwWVdSaGRHRXVibUZ0WlgxY2JpQWdJQ0FnSUNBZ2FHVmhaR1Z5VkdsMGJHVTllM1FvSjFOSlYwVlRhWFJsVW1WeGRXVnpkRlJwZEd4bEp5bDlYRzRnSUNBZ0lDQWdJR2hsWVdSbGNsUmxlSFE5ZTNRb0oxTkpWMFZUYVhSbFVtVnhkV1Z6ZEZOMVluUnBkR3hsSnlsOVhHNGdJQ0FnSUNBZ0lITnBkR1ZQY21sbmFXNDllMlJ2YldGcGJuMWNiaUFnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRwYzFOSlYwVkViMjFoYVc1V1lXeHBaQ0EvSUNjbklEb2dKMkpoWkMxa2IyMWhhVzRuZlZ4dUlDQWdJQ0FnSUNCc1pXWjBTV052YmoxN1hHNGdJQ0FnSUNBZ0lDQWdJV2x6VTBsWFJVUnZiV0ZwYmxaaGJHbGtJQ1ltSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJRHhVYjI5c2RHbHdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dVBWd2lZbTkwZEc5dFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FIUnRiRDE3UEhBK2UzUW9KMU5KVjBWRWIyMWhhVzVYWVhKdWFXNW5RbTlrZVNjc0lGdGtiMjFoYVc1ZEtYMDhMM0ErZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThVMmxuYm1GMGRYSmxVbVZ4ZFdWemRGTkpWMFZKWTI5dUlDOCtYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwxUnZiMngwYVhBK1hHNGdJQ0FnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKcFoyaDBTV052YmoxN1hHNGdJQ0FnSUNBZ0lDQWdJV2x6VTBsWFJVUnZiV0ZwYmxaaGJHbGtJQ1ltSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJRHhVYjI5c2RHbHdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dVBWd2lZbTkwZEc5dFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FIUnRiRDE3UEhBK2UzUW9KMU5KVjBWRWIyMWhhVzVYWVhKdWFXNW5RbTlrZVNjc0lGdGtiMjFoYVc1ZEtYMDhMM0ErZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThVMmxuYm1GMGRYSmxVbVZ4ZFdWemRGTkpWMFZVWVdjZ2RHVjRkRDE3ZENnblUwbFhSVVJ2YldGcGJsZGhjbTVwYm1kTVlXSmxiQ2NwZlNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5VWIyOXNkR2x3UGx4dUlDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdMejVjYmlBZ0lDQWdJSHRtY205dFFXTmpiM1Z1ZENBbUppQW9YRzRnSUNBZ0lDQWdJRHhCWTJOdmRXNTBUR2x6ZEVsMFpXMWNiaUFnSUNBZ0lDQWdJQ0JoWTJOdmRXNTBQWHRtY205dFFXTmpiM1Z1ZEgxY2JpQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlYQ0p6YVdkdVlYUjFjbVV0Y21WeGRXVnpkQzF6YVhkbExXaGxZV1JsY2w5ZllXTmpiM1Z1ZEMxc2FYTjBMV2wwWlcxY0lseHVJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdLWDFjYmlBZ0lDQThMMlJwZGo1Y2JpQWdLVHRjYm4xY2JseHVVMmxuYm1GMGRYSmxVbVZ4ZFdWemRGTkpWMFZJWldGa1pYSXVjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQXZLaXBjYmlBZ0lDb2dWR2hsSUdGalkyOTFiblFnZEdoaGRDQnBjeUJ5WlhGMVpYTjBhVzVuSUhCbGNtMXBjM05wYjI1elhHNGdJQ0FxTDF4dUlDQm1jbTl0UVdOamIzVnVkRG9nVUhKdmNGUjVjR1Z6TG05aWFtVmpkQ3hjYmlBZ0x5b3FYRzRnSUNBcUlGUm9aU0JrYjIxaGFXNGdkR2hoZENCMGFHVWdjbVZ4ZFdWemRDQnBjeUJtYjNKY2JpQWdJQ292WEc0Z0lHUnZiV0ZwYmpvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdMeW9xWEc0Z0lDQXFJRmRvWlhSb1pYSWdkR2hsSUdSdmJXRnBiaUJwY3lCMllXeHBaRnh1SUNBZ0tpOWNiaUFnYVhOVFNWZEZSRzl0WVdsdVZtRnNhV1E2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBdktpcGNiaUFnSUNvZ1ZHaGxJRzFsZEdGa1lYUmhJR1p2Y2lCMGFHVWdjM1ZpYW1WamRDNGdWR2hwY3lCcGN5QjFjMlZrSUhSdklHUnBjM0JzWVhrZ2RHaGxJR2xqYjI0Z1lXNWtJRzVoYldWY2JpQWdJQ29nWVc1a0lHbHpJSE5sYkdWamRHVmtJR1p5YjIwZ2RHaGxJR1J2YldGcGJpQnBiaUIwYUdVZ1UwbFhSU0J5WlhGMVpYTjBMbHh1SUNBZ0tpOWNiaUFnYzNWaWFtVmpkRTFsZEdGa1lYUmhPaUJRY205d1ZIbHdaWE11YjJKcVpXTjBMRnh1ZlR0Y2JpSXNJbWx0Y0c5eWRDQlNaV0ZqZENCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdlMXh1SUNCRVNWTlFURUZaTEZ4dUlDQkJiR2xuYmtsMFpXMXpMRnh1SUNCRGIyeHZjaXhjYmlBZ1NuVnpkR2xtZVVOdmJuUmxiblFzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUwyaGxiSEJsY25NdlkyOXVjM1JoYm5SekwyUmxjMmxuYmkxemVYTjBaVzBuTzF4dWFXMXdiM0owSUVKdmVDQm1jbTl0SUNjdUxpOHVMaTh1TGk5MWFTOWliM2duTzF4dWFXMXdiM0owSUhzZ1NXTnZiaXdnU1dOdmJrNWhiV1VnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlqYjIxd2IyNWxiblF0YkdsaWNtRnllU2M3WEc1Y2JtTnZibk4wSUZOcFoyNWhkSFZ5WlZKbGNYVmxjM1JUU1ZkRlNXTnZiaUE5SUNncElEMCtJSHRjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0E4UW05NFhHNGdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMXphWGRsTFdsamIyNWNJbHh1SUNBZ0lDQWdaR2x6Y0d4aGVUMTdSRWxUVUV4QldTNUpUa3hKVGtWZlJreEZXSDFjYmlBZ0lDQWdJR0ZzYVdkdVNYUmxiWE05ZTBGc2FXZHVTWFJsYlhNdVkyVnVkR1Z5ZlZ4dUlDQWdJQ0FnWW1GamEyZHliM1Z1WkVOdmJHOXlQWHREYjJ4dmNpNWxjbkp2Y2tSbFptRjFiSFI5WEc0Z0lDQWdJQ0JxZFhOMGFXWjVRMjl1ZEdWdWREMTdTblZ6ZEdsbWVVTnZiblJsYm5RdVkyVnVkR1Z5ZlZ4dUlDQWdJRDVjYmlBZ0lDQWdJRHhKWTI5dUlHNWhiV1U5ZTBsamIyNU9ZVzFsTGtSaGJtZGxjbjBnWTI5c2IzSTllME52Ykc5eUxtVnljbTl5U1c1MlpYSnpaWDBnTHo1Y2JpQWdJQ0E4TDBKdmVENWNiaUFnS1R0Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRk5wWjI1aGRIVnlaVkpsY1hWbGMzUlRTVmRGU1dOdmJqdGNiaUlzSW1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnZlNCbWNtOXRJQ2N1TDNOcFoyNWhkSFZ5WlMxeVpYRjFaWE4wTFhOcGQyVXRiV1Z6YzJGblpTYzdYRzRpTENKcGJYQnZjblFnVW1WaFkzUWdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCQ2IzZ2dabkp2YlNBbkxpNHZMaTR2TGk0dmRXa3ZZbTk0Snp0Y2JtbHRjRzl5ZENCN0lGUmxlSFFnZlNCbWNtOXRJQ2N1TGk4dUxpOHVMaTlqYjIxd2IyNWxiblF0YkdsaWNtRnllU2M3WEc1Y2JtbHRjRzl5ZENCN1hHNGdJRVpNUlZoZlJFbFNSVU5VU1U5T0xGeHVJQ0JQVmtWU1JreFBWMTlYVWtGUUxGeHVJQ0JVWlhoMFZtRnlhV0Z1ZEN4Y2JuMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZhR1ZzY0dWeWN5OWpiMjV6ZEdGdWRITXZaR1Z6YVdkdUxYTjVjM1JsYlNjN1hHNWNibU52Ym5OMElGTnBaMjVoZEhWeVpWSmxjWFZsYzNSVFNWZEZUV1Z6YzJGblpTQTlJQ2g3SUdSaGRHRWdmU2tnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeENiM2dnWTJ4aGMzTk9ZVzFsUFZ3aWMybG5ibUYwZFhKbExYSmxjWFZsYzNRdGMybDNaUzF0WlhOellXZGxYQ0krWEc0Z0lDQWdJQ0E4UW05NElHWnNaWGhFYVhKbFkzUnBiMjQ5ZTBaTVJWaGZSRWxTUlVOVVNVOU9Ma05QVEZWTlRuMCtYRzRnSUNBZ0lDQWdJSHRrWVhSaExtMWhjQ2dvZXlCc1lXSmxiQ3dnZG1Gc2RXVWdmU3dnYVNrZ1BUNGdLRnh1SUNBZ0lDQWdJQ0FnSUR4Q2IzZ2dhMlY1UFh0cExuUnZVM1J5YVc1bktDbDlJRzFoY21kcGJsUnZjRDE3TW4wZ2JXRnlaMmx1UW05MGRHOXRQWHN5ZlQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhVWlhoMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdGelBWd2lhRFJjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhKcFlXNTBQWHRVWlhoMFZtRnlhV0Z1ZEM1aWIyUjVUR2ROWldScGRXMTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhjbWRwYmxSdmNEMTdNbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Z5WjJsdVFtOTBkRzl0UFhzeWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I3YkdGaVpXeDlYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwxUmxlSFErWEc0Z0lDQWdJQ0FnSUNBZ0lDQThWR1Y0ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKemFXZHVZWFIxY21VdGNtVnhkV1Z6ZEMxemFYZGxMVzFsYzNOaFoyVmZYM04xWWkxMFpYaDBYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiM1psY21ac2IzZFhjbUZ3UFh0UFZrVlNSa3hQVjE5WFVrRlFMa0pTUlVGTFgxZFBVa1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzFoY21kcGJsUnZjRDE3TW4xY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGeVoybHVRbTkwZEc5dFBYc3lmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2RtRnNkV1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMVJsZUhRK1hHNGdJQ0FnSUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnSUNBZ0lDa3BmVnh1SUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnUEM5Q2IzZytYRzRnSUNrN1hHNTlPMXh1WEc1VGFXZHVZWFIxY21WU1pYRjFaWE4wVTBsWFJVMWxjM05oWjJVdWNISnZjRlI1Y0dWeklEMGdlMXh1SUNBdktpcGNiaUFnSUNvZ1ZHaGxJR1JoZEdFZ1lYSnlZWGtnZEdoaGRDQmpiMjUwWVdsdWN5QnZZbXBsWTNSeklHOW1JR1JoZEdFZ1lXSnZkWFFnZEdobElHMWxjM05oWjJWY2JpQWdJQ292WEc0Z0lHUmhkR0U2SUZCeWIzQlVlWEJsY3k1aGNuSmhlVTltS0Z4dUlDQWdJRkJ5YjNCVWVYQmxjeTV6YUdGd1pTaDdYRzRnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FxSUZSb1pTQnNZV0psYkNCdmNpQjBhWFJzWlNCdlppQjBhR1VnZG1Gc2RXVWdaR0YwWVZ4dUlDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNCc1lXSmxiRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNvZ1ZHaGxJSFpoYkhWbElHOW1JSFJvWlNCa1lYUmhYRzRnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJSFpoYkhWbE9pQlFjbTl3Vkhsd1pYTXViMjVsVDJaVWVYQmxLRnRRY205d1ZIbHdaWE11YzNSeWFXNW5MQ0JRY205d1ZIbHdaWE11Ym5WdFltVnlYU2tzWEc0Z0lDQWdmU2tzWEc0Z0lDa3NYRzU5TzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCU1pXRmpkQzV0WlcxdktGTnBaMjVoZEhWeVpWSmxjWFZsYzNSVFNWZEZUV1Z6YzJGblpTazdYRzRpTENKcGJYQnZjblFnVW1WaFkzUWdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCN1hHNGdJRlJsZUhSV1lYSnBZVzUwTEZ4dUlDQlRhWHBsTEZ4dUlDQkVTVk5RVEVGWkxGeHVJQ0JCYkdsbmJrbDBaVzF6TEZ4dUlDQkNZV05yWjNKdmRXNWtRMjlzYjNJc1hHNGdJRlJsZUhSRGIyeHZjaXhjYm4wZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5amIyNXpkR0Z1ZEhNdlpHVnphV2R1TFhONWMzUmxiU2M3WEc1cGJYQnZjblFnUW05NElHWnliMjBnSnk0dUx5NHVMeTR1TDNWcEwySnZlQ2M3WEc1cGJYQnZjblFnZXlCVVpYaDBJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZZMjl0Y0c5dVpXNTBMV3hwWW5KaGNua25PMXh1WEc1amIyNXpkQ0JUYVdkdVlYUjFjbVZTWlhGMVpYTjBVMGxYUlZSaFp5QTlJQ2g3SUhSbGVIUWdmU2tnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeENiM2hjYmlBZ0lDQWdJR05zWVhOelRtRnRaVDFjSW5OcFoyNWhkSFZ5WlMxeVpYRjFaWE4wTFhOcGQyVXRkR0ZuWENKY2JpQWdJQ0FnSUcxaGNtZHBibEpwWjJoMFBYc3hmVnh1SUNBZ0lDQWdaR2x6Y0d4aGVUMTdSRWxUVUV4QldTNUpUa3hKVGtWZlJreEZXSDFjYmlBZ0lDQWdJR0ZzYVdkdVNYUmxiWE05ZTBGc2FXZHVTWFJsYlhNdVkyVnVkR1Z5ZlZ4dUlDQWdJQ0FnWW1GamEyZHliM1Z1WkVOdmJHOXlQWHRDWVdOclozSnZkVzVrUTI5c2IzSXVaWEp5YjNKRVpXWmhkV3gwZlZ4dUlDQWdJQ0FnWW05eVpHVnlVbUZrYVhWelBYdFRhWHBsTGxoTWZWeHVJQ0FnSUNBZ2NHRmtaR2x1WjB4bFpuUTllelI5WEc0Z0lDQWdJQ0J3WVdSa2FXNW5VbWxuYUhROWV6UjlYRzRnSUNBZ1BseHVJQ0FnSUNBZ1BGUmxlSFJjYmlBZ0lDQWdJQ0FnYldGeVoybHVQWHN3ZlZ4dUlDQWdJQ0FnSUNCMllYSnBZVzUwUFh0VVpYaDBWbUZ5YVdGdWRDNWliMlI1VTIxQ2IyeGtmVnh1SUNBZ0lDQWdJQ0JoY3oxY0ltZzJYQ0pjYmlBZ0lDQWdJQ0FnWTI5c2IzSTllMVJsZUhSRGIyeHZjaTVsY25KdmNrbHVkbVZ5YzJWOVhHNGdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lIdDBaWGgwZlZ4dUlDQWdJQ0FnUEM5VVpYaDBQbHh1SUNBZ0lEd3ZRbTk0UGx4dUlDQXBPMXh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1UybG5ibUYwZFhKbFVtVnhkV1Z6ZEZOSlYwVlVZV2M3WEc1Y2JsTnBaMjVoZEhWeVpWSmxjWFZsYzNSVFNWZEZWR0ZuTG5CeWIzQlVlWEJsY3lBOUlIdGNiaUFnTHlvcVhHNGdJQ0FxSUZSb1pTQjBaWGgwSUhSdklHUnBjM0JzWVhrZ2FXNGdkR2hsSUhSaFoxeHVJQ0FnS2k5Y2JpQWdkR1Y0ZERvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JuMDdYRzRpTENKcGJYQnZjblFnVW1WaFkzUXNJSHNnZFhObFEyRnNiR0poWTJzc0lIVnpaVU52Ym5SbGVIUXNJSFZ6WlZOMFlYUmxJSDBnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQjdJSFZ6WlZObGJHVmpkRzl5SUgwZ1puSnZiU0FuY21WaFkzUXRjbVZrZFhnbk8xeHVhVzF3YjNKMElHeHZaeUJtY205dElDZHNiMmRzWlhabGJDYzdYRzVwYlhCdmNuUWdleUJwYzFaaGJHbGtVMGxYUlU5eWFXZHBiaUI5SUdaeWIyMGdKMEJ0WlhSaGJXRnpheTlqYjI1MGNtOXNiR1Z5TFhWMGFXeHpKenRjYm1sdGNHOXlkQ0I3SUVKaGJtNWxja0ZzWlhKMExDQlVaWGgwSUgwZ1puSnZiU0FuTGk0dkxpNHZZMjl0Y0c5dVpXNTBMV3hwWW5KaGNua25PMXh1YVcxd2IzSjBJRkJ2Y0c5MlpYSWdabkp2YlNBbkxpNHZMaTR2ZFdrdmNHOXdiM1psY2ljN1hHNXBiWEJ2Y25RZ1EyaGxZMnRpYjNnZ1puSnZiU0FuTGk0dkxpNHZkV2t2WTJobFkyc3RZbTk0Snp0Y2JtbHRjRzl5ZENCN0lFa3hPRzVEYjI1MFpYaDBJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZZMjl1ZEdWNGRITXZhVEU0YmljN1hHNXBiWEJ2Y25RZ2V5QlFZV2RsUTI5dWRHRnBibVZ5Um05dmRHVnlJSDBnWm5KdmJTQW5MaTR2TGk0dmRXa3ZjR0ZuWlMxamIyNTBZV2x1WlhJbk8xeHVhVzF3YjNKMElIc2dhWE5CWkdSeVpYTnpUR1ZrWjJWeUlIMGdabkp2YlNBbkxpNHZMaTR2TGk0dlpIVmphM012YldWMFlXMWhjMnN2YldWMFlXMWhjMnNuTzF4dWFXMXdiM0owSUh0Y2JpQWdZV05qYjNWdWRITlhhWFJvVTJWdVpFVjBhR1Z5U1c1bWIxTmxiR1ZqZEc5eUxGeHVJQ0JuWlhSVGRXSnFaV04wVFdWMFlXUmhkR0VzWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1TDNObGJHVmpkRzl5Y3ljN1hHNXBiWEJ2Y25RZ2V5Qm5aWFJCWTJOdmRXNTBRbmxCWkdSeVpYTnpJSDBnWm5KdmJTQW5MaTR2TGk0dkxpNHZhR1ZzY0dWeWN5OTFkR2xzY3k5MWRHbHNKenRjYm1sdGNHOXlkQ0I3SUdadmNtMWhkRTFsYzNOaFoyVlFZWEpoYlhNZ2ZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOXphR0Z5WldRdmJXOWtkV3hsY3k5emFYZGxKenRjYm1sdGNHOXlkQ0I3WEc0Z0lGTkZWa1ZTU1ZSSlJWTXNYRzRnSUZSbGVIUldZWEpwWVc1MExGeHVmU0JtY205dElDY3VMaTh1TGk4dUxpOW9aV3h3WlhKekwyTnZibk4wWVc1MGN5OWtaWE5wWjI0dGMzbHpkR1Z0Snp0Y2JseHVhVzF3YjNKMElGTmxZM1Z5YVhSNVVISnZkbWxrWlhKQ1lXNXVaWEpOWlhOellXZGxJR1p5YjIwZ0p5NHVMM05sWTNWeWFYUjVMWEJ5YjNacFpHVnlMV0poYm01bGNpMXRaWE56WVdkbEwzTmxZM1Z5YVhSNUxYQnliM1pwWkdWeUxXSmhibTVsY2kxdFpYTnpZV2RsSnp0Y2JtbHRjRzl5ZENCN0lGTkZRMVZTU1ZSWlgxQlNUMVpKUkVWU1gwMUZVMU5CUjBWZlUwVldSVkpKVkVsRlV5QjlJR1p5YjIwZ0p5NHVMM05sWTNWeWFYUjVMWEJ5YjNacFpHVnlMV0poYm01bGNpMXRaWE56WVdkbEwzTmxZM1Z5YVhSNUxYQnliM1pwWkdWeUxXSmhibTVsY2kxdFpYTnpZV2RsTG1OdmJuTjBZVzUwY3ljN1hHNXBiWEJ2Y25RZ1RHVmtaMlZ5U1c1emRISjFZM1JwYjI1R2FXVnNaQ0JtY205dElDY3VMaTlzWldSblpYSXRhVzV6ZEhKMVkzUnBiMjR0Wm1sbGJHUW5PMXh1YVcxd2IzSjBJRWhsWVdSbGNpQm1jbTl0SUNjdUwzTnBaMjVoZEhWeVpTMXlaWEYxWlhOMExYTnBkMlV0YUdWaFpHVnlKenRjYm1sdGNHOXlkQ0JOWlhOellXZGxJR1p5YjIwZ0p5NHZjMmxuYm1GMGRYSmxMWEpsY1hWbGMzUXRjMmwzWlMxdFpYTnpZV2RsSnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1UybG5ibUYwZFhKbFVtVnhkV1Z6ZEZOSlYwVW9lMXh1SUNCMGVFUmhkR0VzWEc0Z0lHTmhibU5sYkZCbGNuTnZibUZzVFdWemMyRm5aU3hjYmlBZ2MybG5ibEJsY25OdmJtRnNUV1Z6YzJGblpTeGNibjBwSUh0Y2JpQWdZMjl1YzNRZ1lXeHNRV05qYjNWdWRITWdQU0IxYzJWVFpXeGxZM1J2Y2loaFkyTnZkVzUwYzFkcGRHaFRaVzVrUlhSb1pYSkpibVp2VTJWc1pXTjBiM0lwTzF4dUlDQmpiMjV6ZENCemRXSnFaV04wVFdWMFlXUmhkR0VnUFNCMWMyVlRaV3hsWTNSdmNpaG5aWFJUZFdKcVpXTjBUV1YwWVdSaGRHRXBPMXh1WEc0Z0lHTnZibk4wSUh0Y2JpQWdJQ0J0YzJkUVlYSmhiWE02SUh0Y2JpQWdJQ0FnSUdaeWIyMHNYRzRnSUNBZ0lDQnZjbWxuYVc0c1hHNGdJQ0FnSUNCemFYZGxPaUI3SUhCaGNuTmxaRTFsYzNOaFoyVWdmU3hjYmlBZ0lDQjlMRnh1SUNCOUlEMGdkSGhFWVhSaE8xeHVYRzRnSUdOdmJuTjBJR2x6VEdWa1oyVnlWMkZzYkdWMElEMGdkWE5sVTJWc1pXTjBiM0lvS0hOMFlYUmxLU0E5UGlCcGMwRmtaSEpsYzNOTVpXUm5aWElvYzNSaGRHVXNJR1p5YjIwcEtUdGNibHh1SUNCamIyNXpkQ0JtY205dFFXTmpiM1Z1ZENBOUlHZGxkRUZqWTI5MWJuUkNlVUZrWkhKbGMzTW9ZV3hzUVdOamIzVnVkSE1zSUdaeWIyMHBPMXh1SUNCamIyNXpkQ0IwWVhKblpYUlRkV0pxWldOMFRXVjBZV1JoZEdFZ1BTQnpkV0pxWldOMFRXVjBZV1JoZEdGYmIzSnBaMmx1WFR0Y2JseHVJQ0JqYjI1emRDQjBJRDBnZFhObFEyOXVkR1Y0ZENoSk1UaHVRMjl1ZEdWNGRDazdYRzVjYmlBZ1kyOXVjM1FnYVhOTllYUmphR2x1WjBGa1pISmxjM01nUFZ4dUlDQWdJR1p5YjIwdWRHOU1iM2RsY2tOaGMyVW9LU0E5UFQwZ2NHRnljMlZrVFdWemMyRm5aUzVoWkdSeVpYTnpMblJ2VEc5M1pYSkRZWE5sS0NrN1hHNWNiaUFnWTI5dWMzUWdhWE5UU1ZkRlJHOXRZV2x1Vm1Gc2FXUWdQU0JwYzFaaGJHbGtVMGxYUlU5eWFXZHBiaWgwZUVSaGRHRXViWE5uVUdGeVlXMXpLVHRjYmx4dUlDQmpiMjV6ZENCYmFYTlRhRzkzYVc1blJHOXRZV2x1VjJGeWJtbHVaeXdnYzJWMFNYTlRhRzkzYVc1blJHOXRZV2x1VjJGeWJtbHVaMTBnUFNCMWMyVlRkR0YwWlNobVlXeHpaU2s3WEc0Z0lHTnZibk4wSUZ0b1lYTkJaM0psWldSVWIwUnZiV0ZwYmxkaGNtNXBibWNzSUhObGRFaGhjMEZuY21WbFpGUnZSRzl0WVdsdVYyRnlibWx1WjEwZ1BWeHVJQ0FnSUhWelpWTjBZWFJsS0daaGJITmxLVHRjYmx4dUlDQmpiMjV6ZENCemFHOTNVMlZqZFhKcGRIbFFjbTkyYVdSbGNrSmhibTVsY2lBOVhHNGdJQ0FnS0hSNFJHRjBZVDh1YzJWamRYSnBkSGxRY205MmFXUmxjbEpsYzNCdmJuTmxQeTVtYkdGblFYTkVZVzVuWlhKdmRYTWdJVDA5SUhWdVpHVm1hVzVsWkNBbUpseHVJQ0FnSUNBZ2RIaEVZWFJoUHk1elpXTjFjbWwwZVZCeWIzWnBaR1Z5VW1WemNHOXVjMlUvTG1ac1lXZEJjMFJoYm1kbGNtOTFjeUFoUFQxY2JpQWdJQ0FnSUNBZ1UwVkRWVkpKVkZsZlVGSlBWa2xFUlZKZlRVVlRVMEZIUlY5VFJWWkZVa2xVU1VWVExrNVBWRjlOUVV4SlEwbFBWVk1wSUh4OFhHNGdJQ0FnS0hSNFJHRjBZVDh1YzJWamRYSnBkSGxRY205MmFXUmxjbEpsYzNCdmJuTmxJQ1ltWEc0Z0lDQWdJQ0JQWW1wbFkzUXVhMlY1Y3loMGVFUmhkR0V1YzJWamRYSnBkSGxRY205MmFXUmxjbEpsYzNCdmJuTmxLUzVzWlc1bmRHZ2dQVDA5SURBcE8xeHVYRzRnSUdOdmJuTjBJRzl1VTJsbmJpQTlJSFZ6WlVOaGJHeGlZV05yS0Z4dUlDQWdJR0Z6ZVc1aklDaGxkbVZ1ZENrZ1BUNGdlMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1lYZGhhWFFnYzJsbmJsQmxjbk52Ym1Gc1RXVnpjMkZuWlNobGRtVnVkQ2s3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lHeHZaeTVsY25KdmNpaGxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1SUNBZ0lGdHphV2R1VUdWeWMyOXVZV3hOWlhOellXZGxYU3hjYmlBZ0tUdGNibHh1SUNCamIyNXpkQ0J2YmtOaGJtTmxiQ0E5SUhWelpVTmhiR3hpWVdOcktGeHVJQ0FnSUdGemVXNWpJQ2hsZG1WdWRDa2dQVDRnZTF4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdZWGRoYVhRZ1kyRnVZMlZzVUdWeWMyOXVZV3hOWlhOellXZGxLR1YyWlc1MEtUdGNiaUFnSUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnYkc5bkxtVnljbTl5S0dVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNGdJQ0FnVzJOaGJtTmxiRkJsY25OdmJtRnNUV1Z6YzJGblpWMHNYRzRnSUNrN1hHNWNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0luTnBaMjVoZEhWeVpTMXlaWEYxWlhOMExYTnBkMlZjSWo1Y2JpQWdJQ0FnSUR4SVpXRmtaWEpjYmlBZ0lDQWdJQ0FnWm5KdmJVRmpZMjkxYm5ROWUyWnliMjFCWTJOdmRXNTBmVnh1SUNBZ0lDQWdJQ0JrYjIxaGFXNDllMjl5YVdkcGJuMWNiaUFnSUNBZ0lDQWdhWE5UU1ZkRlJHOXRZV2x1Vm1Gc2FXUTllMmx6VTBsWFJVUnZiV0ZwYmxaaGJHbGtmVnh1SUNBZ0lDQWdJQ0J6ZFdKcVpXTjBUV1YwWVdSaGRHRTllM1JoY21kbGRGTjFZbXBsWTNSTlpYUmhaR0YwWVgxY2JpQWdJQ0FnSUM4K1hHNWNiaUFnSUNBZ0lIdHphRzkzVTJWamRYSnBkSGxRY205MmFXUmxja0poYm01bGNpQW1KaUFvWEc0Z0lDQWdJQ0FnSUR4VFpXTjFjbWwwZVZCeWIzWnBaR1Z5UW1GdWJtVnlUV1Z6YzJGblpWeHVJQ0FnSUNBZ0lDQWdJSE5sWTNWeWFYUjVVSEp2ZG1sa1pYSlNaWE53YjI1elpUMTdkSGhFWVhSaExuTmxZM1Z5YVhSNVVISnZkbWxrWlhKU1pYTndiMjV6WlgxY2JpQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDbDlYRzVjYmlBZ0lDQWdJRHhOWlhOellXZGxJR1JoZEdFOWUyWnZjbTFoZEUxbGMzTmhaMlZRWVhKaGJYTW9jR0Z5YzJWa1RXVnpjMkZuWlN3Z2RDbDlJQzgrWEc0Z0lDQWdJQ0I3SVdselRXRjBZMmhwYm1kQlpHUnlaWE56SUNZbUlDaGNiaUFnSUNBZ0lDQWdQRUpoYm01bGNrRnNaWEowWEc0Z0lDQWdJQ0FnSUNBZ2MyVjJaWEpwZEhrOWUxTkZWa1ZTU1ZSSlJWTXVWMEZTVGtsT1IzMWNiaUFnSUNBZ0lDQWdJQ0J0WVhKbmFXNU1aV1owUFhzMGZWeHVJQ0FnSUNBZ0lDQWdJRzFoY21kcGJsSnBaMmgwUFhzMGZWeHVJQ0FnSUNBZ0lDQWdJRzFoY21kcGJrSnZkSFJ2YlQxN05IMWNiaUFnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUh0MEtDZFRTVmRGUVdSa2NtVnpjMGx1ZG1Gc2FXUW5MQ0JiWEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWEp6WldSTlpYTnpZV2RsTG1Ga1pISmxjM01zWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1jbTl0UVdOamIzVnVkQzVoWkdSeVpYTnpMRnh1SUNBZ0lDQWdJQ0FnSUYwcGZWeHVJQ0FnSUNBZ0lDQThMMEpoYm01bGNrRnNaWEowUGx4dUlDQWdJQ0FnS1gxY2JseHVJQ0FnSUNBZ2UybHpUR1ZrWjJWeVYyRnNiR1YwSUNZbUlDaGNiaUFnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOVhDSmpiMjVtYVhKdExXRndjSEp2ZG1VdFkyOXVkR1Z1ZEY5ZmJHVmtaMlZ5TFdsdWMzUnlkV04wYVc5dUxYZHlZWEJ3WlhKY0lqNWNiaUFnSUNBZ0lDQWdJQ0E4VEdWa1oyVnlTVzV6ZEhKMVkzUnBiMjVHYVdWc1pDQnphRzkzUkdGMFlVbHVjM1J5ZFdOMGFXOXVJQzgrWEc0Z0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdLWDFjYmx4dUlDQWdJQ0FnZXlGcGMxTkpWMFZFYjIxaGFXNVdZV3hwWkNBbUppQW9YRzRnSUNBZ0lDQWdJRHhDWVc1dVpYSkJiR1Z5ZEZ4dUlDQWdJQ0FnSUNBZ0lITmxkbVZ5YVhSNVBYdFRSVlpGVWtsVVNVVlRMa1JCVGtkRlVuMWNiaUFnSUNBZ0lDQWdJQ0J0WVhKbmFXNU1aV1owUFhzMGZWeHVJQ0FnSUNBZ0lDQWdJRzFoY21kcGJsSnBaMmgwUFhzMGZWeHVJQ0FnSUNBZ0lDQWdJRzFoY21kcGJrSnZkSFJ2YlQxN05IMWNiaUFnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUR4VVpYaDBJSFpoY21saGJuUTllMVJsZUhSV1lYSnBZVzUwTG1KdlpIbE5aRUp2YkdSOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNRb0oxTkpWMFZFYjIxaGFXNUpiblpoYkdsa1ZHbDBiR1VuS1gxY2JpQWdJQ0FnSUNBZ0lDQThMMVJsZUhRK2V5Y2dKMzFjYmlBZ0lDQWdJQ0FnSUNBOFZHVjRkRDU3ZENnblUwbFhSVVJ2YldGcGJrbHVkbUZzYVdSVVpYaDBKeWw5UEM5VVpYaDBQbHh1SUNBZ0lDQWdJQ0E4TDBKaGJtNWxja0ZzWlhKMFBseHVJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lEeFFZV2RsUTI5dWRHRnBibVZ5Um05dmRHVnlYRzRnSUNBZ0lDQWdJR1p2YjNSbGNrTnNZWE56VG1GdFpUMWNJbk5wWjI1aGRIVnlaUzF5WlhGMVpYTjBMWE5wZDJWZlgzQmhaMlV0WTI5dWRHRnBibVZ5TFdadmIzUmxjbHdpWEc0Z0lDQWdJQ0FnSUc5dVEyRnVZMlZzUFh0dmJrTmhibU5sYkgxY2JpQWdJQ0FnSUNBZ2IyNVRkV0p0YVhROWUxeHVJQ0FnSUNBZ0lDQWdJR2x6VTBsWFJVUnZiV0ZwYmxaaGJHbGtJRDhnYjI1VGFXZHVJRG9nS0NrZ1BUNGdjMlYwU1hOVGFHOTNhVzVuUkc5dFlXbHVWMkZ5Ym1sdVp5aDBjblZsS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTmhibU5sYkZSbGVIUTllM1FvSjJOaGJtTmxiQ2NwZlZ4dUlDQWdJQ0FnSUNCemRXSnRhWFJVWlhoMFBYdDBLQ2R6YVdkdWFXNG5LWDFjYmlBZ0lDQWdJQ0FnYzNWaWJXbDBRblYwZEc5dVZIbHdaVDE3YVhOVFNWZEZSRzl0WVdsdVZtRnNhV1FnUHlBbmNISnBiV0Z5ZVNjZ09pQW5aR0Z1WjJWeUxYQnlhVzFoY25rbmZWeHVJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lIdHBjMU5vYjNkcGJtZEViMjFoYVc1WFlYSnVhVzVuSUNZbUlDaGNiaUFnSUNBZ0lDQWdQRkJ2Y0c5MlpYSmNiaUFnSUNBZ0lDQWdJQ0J2YmtOc2IzTmxQWHNvS1NBOVBpQnpaWFJKYzFOb2IzZHBibWRFYjIxaGFXNVhZWEp1YVc1bktHWmhiSE5sS1gxY2JpQWdJQ0FnSUNBZ0lDQjBhWFJzWlQxN2RDZ25VMGxYUlZkaGNtNXBibWRVYVhSc1pTY3BmVnh1SUNBZ0lDQWdJQ0FnSUhOMVluUnBkR3hsUFh0MEtDZFRTVmRGVjJGeWJtbHVaMU4xWW5ScGRHeGxKeWw5WEc0Z0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2ljMmxuYm1GMGRYSmxMWEpsY1hWbGMzUXRjMmwzWlY5ZmQyRnlibWx1Wnkxd2IzQnZkbVZ5WENKY2JpQWdJQ0FnSUNBZ0lDQm1iMjkwWlhKRGJHRnpjMDVoYldVOVhDSnphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMXphWGRsWDE5M1lYSnVhVzVuTFhCdmNHOTJaWEpmWDJadmIzUmxjbHdpWEc0Z0lDQWdJQ0FnSUNBZ1ptOXZkR1Z5UFh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhRWVdkbFEyOXVkR0ZwYm1WeVJtOXZkR1Z5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1p2YjNSbGNrTnNZWE56VG1GdFpUMWNJbk5wWjI1aGRIVnlaUzF5WlhGMVpYTjBMWE5wZDJWZlgzZGhjbTVwYm1jdGNHOXdiM1psY2w5ZlptOXZkR1Z5WDE5M1lYSnVhVzVuTFdadmIzUmxjbHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzl1UTJGdVkyVnNQWHNvS1NBOVBpQnpaWFJKYzFOb2IzZHBibWRFYjIxaGFXNVhZWEp1YVc1bktHWmhiSE5sS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGdVkyVnNWR1Y0ZEQxN2RDZ25ZMkZ1WTJWc0p5bDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhibU5sYkVKMWRIUnZibFI1Y0dVOVhDSmtaV1poZFd4MFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2IyNVRkV0p0YVhROWUyOXVVMmxuYm4xY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNWaWJXbDBWR1Y0ZEQxN2RDZ25ZMjl1Wm1seWJTY3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkV0p0YVhSQ2RYUjBiMjVVZVhCbFBWd2laR0Z1WjJWeUxYQnlhVzFoY25sY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTmhZbXhsWkQxN0lXaGhjMEZuY21WbFpGUnZSRzl0WVdsdVYyRnlibWx1WjMxY2JpQWdJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6YzA1aGJXVTlYQ0p6YVdkdVlYUjFjbVV0Y21WeGRXVnpkQzF6YVhkbFgxOTNZWEp1YVc1bkxYQnZjRzkyWlhKZlgyTm9aV05yWW05NExYZHlZWEJ3WlhKY0lqNWNiaUFnSUNBZ0lDQWdJQ0FnSUR4RGFHVmphMkp2ZUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkQxY0luTnBaMjVoZEhWeVpTMXlaWEYxWlhOMExYTnBkMlZmWkc5dFlXbHVMV05vWldOclltOTRYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMmhsWTJ0bFpEMTdhR0Z6UVdkeVpXVmtWRzlFYjIxaGFXNVhZWEp1YVc1bmZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMXphWGRsWDE5M1lYSnVhVzVuTFhCdmNHOTJaWEpmWDJOb1pXTnJZbTk0TFhkeVlYQndaWEpmWDJOb1pXTnJZbTk0WENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYjI1RGJHbGphejE3S0NrZ1BUNGdjMlYwU0dGelFXZHlaV1ZrVkc5RWIyMWhhVzVYWVhKdWFXNW5LQ2hqYUdWamEyVmtLU0E5UGlBaFkyaGxZMnRsWkNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdQR3hoWW1Wc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxY0luTnBaMjVoZEhWeVpTMXlaWEYxWlhOMExYTnBkMlZmWDNkaGNtNXBibWN0Y0c5d2IzWmxjbDlmWTJobFkydGliM2d0ZDNKaGNIQmxjbDlmYkdGaVpXeGNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm9kRzFzUm05eVBWd2ljMmxuYm1GMGRYSmxMWEpsY1hWbGMzUXRjMmwzWlY5a2IyMWhhVzR0WTJobFkydGliM2hjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjdkQ2duVTBsWFJVUnZiV0ZwYmxkaGNtNXBibWRDYjJSNUp5d2dXM0JoY25ObFpFMWxjM05oWjJVdVpHOXRZV2x1WFNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0E4TDJ4aFltVnNQbHh1SUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0E4TDFCdmNHOTJaWEkrWEc0Z0lDQWdJQ0FwZlZ4dUlDQWdJRHd2WkdsMlBseHVJQ0FwTzF4dWZWeHVYRzVUYVdkdVlYUjFjbVZTWlhGMVpYTjBVMGxYUlM1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVWdaR2x6Y0d4aGVTQmpiMjUwWlc1MElHOW1JSFJ5WVc1ellXTjBhVzl1SUdSaGRHRmNiaUFnSUNvdlhHNGdJSFI0UkdGMFlUb2dVSEp2Y0ZSNWNHVnpMbTlpYW1WamRDNXBjMUpsY1hWcGNtVmtMRnh1SUNBdktpcGNiaUFnSUNvZ1NHRnVaR3hsY2lCbWIzSWdZMkZ1WTJWc0lHSjFkSFJ2Ymx4dUlDQWdLaTljYmlBZ1kyRnVZMlZzVUdWeWMyOXVZV3hOWlhOellXZGxPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNBdktpcGNiaUFnSUNvZ1NHRnVaR3hsY2lCbWIzSWdjMmxuYmlCaWRYUjBiMjVjYmlBZ0lDb3ZYRzRnSUhOcFoyNVFaWEp6YjI1aGJFMWxjM05oWjJVNklGQnliM0JVZVhCbGN5NW1kVzVqTG1selVtVnhkV2x5WldRc1hHNTlPMXh1SWl3aVpYaHdiM0owSUhzZ1pHVm1ZWFZzZENCOUlHWnliMjBnSnk0dmMybG5ibUYwZFhKbExYSmxjWFZsYzNRdVkyOXVkR0ZwYm1WeUp6dGNiaUlzSW1WNGNHOXlkQ0I3SUdSbFptRjFiSFFnZlNCbWNtOXRJQ2N1TDNOcFoyNWhkSFZ5WlMxeVpYRjFaWE4wTFdSaGRHRW5PMXh1SWl3aWFXMXdiM0owSUZKbFlXTjBMQ0I3SUcxbGJXOGdmU0JtY205dElDZHlaV0ZqZENjN1hHNXBiWEJ2Y25RZ2V5QjFjMlZUWld4bFkzUnZjaUI5SUdaeWIyMGdKM0psWVdOMExYSmxaSFY0Snp0Y2JtbHRjRzl5ZENCN0lHbHpSWEYxWVd3Z2ZTQm1jbTl0SUNkc2IyUmhjMmduTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCN1hHNGdJR2RsZEUxbGJXOXBlbVZrVFdWMFlVMWhjMnRKWkdWdWRHbDBhV1Z6TEZ4dUlDQm5aWFJCWTJOdmRXNTBUbUZ0WlN4Y2JuMGdabkp2YlNBbkxpNHZMaTR2TGk0dkxpNHZjMlZzWldOMGIzSnpKenRjYm1sdGNHOXlkQ0JCWkdSeVpYTnpJR1p5YjIwZ0p5NHVMeTR1TDNSeVlXNXpZV04wYVc5dUxXUmxZMjlrYVc1bkwyTnZiWEJ2Ym1WdWRITXZaR1ZqYjJScGJtY3ZZV1JrY21WemN5YzdYRzVwYlhCdmNuUWdlMXh1SUNCcGMxWmhiR2xrU0dWNFFXUmtjbVZ6Y3l4Y2JpQWdkRzlEYUdWamEzTjFiVWhsZUVGa1pISmxjM01zWEc1OUlHWnliMjBnSnk0dUx5NHVMeTR1THk0dUx5NHVMM05vWVhKbFpDOXRiMlIxYkdWekwyaGxlSE4wY21sdVp5MTFkR2xzY3ljN1hHNXBiWEJ2Y25RZ1FtOTRJR1p5YjIwZ0p5NHVMeTR1THk0dUwzVnBMMkp2ZUNjN1hHNXBiWEJ2Y25RZ1ZIbHdiMmR5WVhCb2VTQm1jbTl0SUNjdUxpOHVMaTh1TGk5MWFTOTBlWEJ2WjNKaGNHaDVKenRjYm1sdGNHOXlkQ0I3WEc0Z0lFUkpVMUJNUVZrc1hHNGdJRVpQVGxSZlYwVkpSMGhVTEZ4dUlDQlVlWEJ2WjNKaGNHaDVWbUZ5YVdGdWRDeGNiaUFnVkdWNGRFTnZiRzl5TEZ4dWZTQm1jbTl0SUNjdUxpOHVMaTh1TGk4dUxpOW9aV3h3WlhKekwyTnZibk4wWVc1MGN5OWtaWE5wWjI0dGMzbHpkR1Z0Snp0Y2JtbHRjRzl5ZENCN0lITmhibWwwYVhwbFUzUnlhVzVuSUgwZ1puSnZiU0FuTGk0dkxpNHZMaTR2TGk0dmFHVnNjR1Z5Y3k5MWRHbHNjeTkxZEdsc0p6dGNibHh1Wm5WdVkzUnBiMjRnVTJsbmJtRjBkWEpsVW1WeGRXVnpkRVJoZEdFb2V5QmtZWFJoSUgwcElIdGNiaUFnWTI5dWMzUWdhV1JsYm5ScGRHbGxjeUE5SUhWelpWTmxiR1ZqZEc5eUtHZGxkRTFsYlc5cGVtVmtUV1YwWVUxaGMydEpaR1Z1ZEdsMGFXVnpLVHRjYmx4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4Q2IzZ2dZMnhoYzNOT1lXMWxQVndpYzJsbmJtRjBkWEpsTFhKbGNYVmxjM1F0WkdGMFlWOWZibTlrWlZ3aVBseHVJQ0FnSUNBZ2UwOWlhbVZqZEM1bGJuUnlhV1Z6S0dSaGRHRXBMbTFoY0Nnb1cyeGhZbVZzTENCN0lIWmhiSFZsTENCMGVYQmxJSDFkTENCcEtTQTlQaUFvWEc0Z0lDQWdJQ0FnSUR4Q2IzaGNiaUFnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5WENKemFXZHVZWFIxY21VdGNtVnhkV1Z6ZEMxa1lYUmhYMTl1YjJSbFhDSmNiaUFnSUNBZ0lDQWdJQ0JyWlhrOWUyQWtlMnhoWW1Wc2ZTMGtlMmw5WUgxY2JpQWdJQ0FnSUNBZ0lDQndZV1JrYVc1blRHVm1kRDE3TW4xY2JpQWdJQ0FnSUNBZ0lDQmthWE53YkdGNVBYdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVnZaaUIyWVd4MVpTQWhQVDBnSjI5aWFtVmpkQ2NnZkh3Z2RtRnNkV1VnUFQwOUlHNTFiR3dnUHlCRVNWTlFURUZaTGtaTVJWZ2dPaUJ1ZFd4c1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ1BGUjVjRzluY21Gd2FIbGNiaUFnSUNBZ0lDQWdJQ0FnSUdGelBWd2ljM0JoYmx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNqMTdWR1Y0ZEVOdmJHOXlMblJsZUhSRVpXWmhkV3gwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiV0Z5WjJsdVRHVm1kRDE3TkgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Ym5SWFpXbG5hSFE5ZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbGIyWWdkbUZzZFdVZ1BUMDlJQ2R2WW1wbFkzUW5JRDhnUms5T1ZGOVhSVWxIU0ZRdVFrOU1SQ0E2SUVaUFRsUmZWMFZKUjBoVUxrNVBVazFCVEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJSHR6WVc1cGRHbDZaVk4wY21sdVp5aHNZV0psYkM1amFHRnlRWFFvTUNrdWRHOVZjSEJsY2tOaGMyVW9LU0FySUd4aFltVnNMbk5zYVdObEtERXBLWDA2ZXljZ0ozMWNiaUFnSUNBZ0lDQWdJQ0E4TDFSNWNHOW5jbUZ3YUhrK1hHNGdJQ0FnSUNBZ0lDQWdlM1I1Y0dWdlppQjJZV3gxWlNBOVBUMGdKMjlpYW1WamRDY2dKaVlnZG1Gc2RXVWdJVDA5SUc1MWJHd2dQeUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQThVMmxuYm1GMGRYSmxVbVZ4ZFdWemRFUmhkR0VnWkdGMFlUMTdkbUZzZFdWOUlDOCtYRzRnSUNBZ0lDQWdJQ0FnS1NBNklDaGNiaUFnSUNBZ0lDQWdJQ0FnSUR4VWVYQnZaM0poY0doNVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdGelBWd2ljM0JoYmx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlQWHRVWlhoMFEyOXNiM0l1ZEdWNGRFUmxabUYxYkhSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGNtZHBia3hsWm5ROWV6UjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMWNJbk5wWjI1aGRIVnlaUzF5WlhGMVpYTjBMV1JoZEdGZlgyNXZaR1ZmWDNaaGJIVmxYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2UzUjVjR1VnUFQwOUlDZGhaR1J5WlhOekp5QW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBjMVpoYkdsa1NHVjRRV1JrY21WemN5aDJZV3gxWlN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXBlR1ZrUTJGelpWVnpaVU5vWldOcmMzVnRPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtTQS9JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Vkhsd2IyZHlZWEJvZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlhV0Z1ZEQxN1ZIbHdiMmR5WVhCb2VWWmhjbWxoYm5RdVNEZDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNqMTdWR1Y0ZEVOdmJHOXlMbWx1Wm05RVpXWmhkV3gwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBWd2ljMmxuYm1GMGRYSmxMWEpsY1hWbGMzUXRaR0YwWVY5ZmJtOWtaVjlmZG1Gc2RXVmZYMkZrWkhKbGMzTmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4QlpHUnlaWE56WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmtaSEpsYzNOUGJteDVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb1pXTnJjM1Z0YldWa1VtVmphWEJwWlc1MFFXUmtjbVZ6Y3oxN2RHOURhR1ZqYTNOMWJVaGxlRUZrWkhKbGMzTW9kbUZzZFdVcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldOcGNHbGxiblJPWVcxbFBYdG5aWFJCWTJOdmRXNTBUbUZ0WlNocFpHVnVkR2wwYVdWekxDQjJZV3gxWlNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2Vkhsd2IyZHlZWEJvZVQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnS1NBNklDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZVzVwZEdsNlpWTjBjbWx1WnloZ0pIdDJZV3gxWlgxZ0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5VWVYQnZaM0poY0doNVBseHVJQ0FnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdLU2w5WEc0Z0lDQWdQQzlDYjNnK1hHNGdJQ2s3WEc1OVhHNWNibE5wWjI1aGRIVnlaVkpsY1hWbGMzUkVZWFJoTG5CeWIzQlVlWEJsY3lBOUlIdGNiaUFnWkdGMFlUb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiVUhKdmNGUjVjR1Z6TG05aWFtVmpkQ3dnVUhKdmNGUjVjR1Z6TG1GeWNtRjVYU2t1YVhOU1pYRjFhWEpsWkN4Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRzFsYlc4b1UybG5ibUYwZFhKbFVtVnhkV1Z6ZEVSaGRHRXNJQ2h3Y21WMlVISnZjSE1zSUc1bGVIUlFjbTl3Y3lrZ1BUNGdlMXh1SUNCeVpYUjFjbTRnYVhORmNYVmhiQ2h3Y21WMlVISnZjSE11WkdGMFlTd2dibVY0ZEZCeWIzQnpMbVJoZEdFcE8xeHVmU2s3WEc0aUxDSmxlSEJ2Y25RZ2V5QmtaV1poZFd4MElIMGdabkp2YlNBbkxpOXphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMW1iMjkwWlhJdVkyOXRjRzl1Wlc1MEp6dGNiaUlzSW1sdGNHOXlkQ0JTWldGamRDd2dleUJRZFhKbFEyOXRjRzl1Wlc1MElIMGdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JseHVhVzF3YjNKMElIc2dVR0ZuWlVOdmJuUmhhVzVsY2tadmIzUmxjaUI5SUdaeWIyMGdKeTR1THk0dUx5NHVMM1ZwTDNCaFoyVXRZMjl1ZEdGcGJtVnlKenRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVMmxuYm1GMGRYSmxVbVZ4ZFdWemRFWnZiM1JsY2lCbGVIUmxibVJ6SUZCMWNtVkRiMjF3YjI1bGJuUWdlMXh1SUNCemRHRjBhV01nY0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUdOaGJtTmxiRUZqZEdsdmJqb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCemFXZHVRV04wYVc5dU9pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUdScGMyRmliR1ZrT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ2ZUdGNibHh1SUNCemRHRjBhV01nWTI5dWRHVjRkRlI1Y0dWeklEMGdlMXh1SUNBZ0lIUTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHTmhibU5sYkVGamRHbHZiaXdnYzJsbmJrRmpkR2x2Yml3Z1pHbHpZV0pzWldRZ1BTQm1ZV3h6WlNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ1BGQmhaMlZEYjI1MFlXbHVaWEpHYjI5MFpYSmNiaUFnSUNBZ0lDQWdZMkZ1WTJWc1ZHVjRkRDE3ZEdocGN5NWpiMjUwWlhoMExuUW9KM0psYW1WamRDY3BmVnh1SUNBZ0lDQWdJQ0J6ZFdKdGFYUlVaWGgwUFh0MGFHbHpMbU52Ym5SbGVIUXVkQ2duYzJsbmJpY3BmVnh1SUNBZ0lDQWdJQ0J2YmtOaGJtTmxiRDE3WTJGdVkyVnNRV04wYVc5dWZWeHVJQ0FnSUNBZ0lDQnZibE4xWW0xcGREMTdjMmxuYmtGamRHbHZibjFjYmlBZ0lDQWdJQ0FnWkdsellXSnNaV1E5ZTJScGMyRmliR1ZrZlZ4dUlDQWdJQ0FnTHo1Y2JpQWdJQ0FwTzF4dUlDQjlYRzU5WEc0aUxDSmxlSEJ2Y25RZ2V5QmtaV1poZFd4MElIMGdabkp2YlNBbkxpOXphV2R1WVhSMWNtVXRjbVZ4ZFdWemRDMXRaWE56WVdkbEp6dGNiaUpkZlE9PSJ9
