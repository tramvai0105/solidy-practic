LavaPack.loadBundle([
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\action-queue\\index.ts", {"../../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../../shared/modules/mv3.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\mv3.utils.js","../actions":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts","pify":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\pify\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Cstore%5Caction-queue%5Cindex.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._setBackgroundConnection = _setBackgroundConnection;
exports.callBackgroundMethod = void 0;
exports.dropQueue = dropQueue;
exports.generateActionId = void 0;
exports.submitRequestToBackground = submitRequestToBackground;
var _pify = _interopRequireDefault(require("pify"));
var _metametrics = require("../../../shared/constants/metametrics");
var _mv = require("../../../shared/modules/mv3.utils");
var _actions = require("../actions");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// // A simplified pify maybe?
// function pify(apiObject) {
//   return Object.keys(apiObject).reduce((promisifiedAPI, key) => {
//     if (apiObject[key].apply) { // depending on our browser support we might use a nicer check for functions here
//       promisifiedAPI[key] = function (...args) {
//         return new Promise((resolve, reject) => {
//           return apiObject[key](
//             ...args,
//             (err, result) => {
//               if (err) {
//                 reject(err);
//               } else {
//                 resolve(result);
//               }
//             },
//           );
//         });
//       };
//     }
//     return promisifiedAPI;
//   }, {});
// }
let background = null;
let promisifiedBackground = null;
const actionRetryQueue = [];
const generateActionId = () => Date.now() + Math.random();
exports.generateActionId = generateActionId;
function failQueue() {
  actionRetryQueue.forEach(({
    reject
  }) => reject(Error('Background operation cancelled while waiting for connection.')));
}

/**
 * Drops the entire actions queue. Rejects all actions in the queue unless silently==true
 * Does not affect the single action that is currently being processed.
 *
 * @param [silently]
 */
function dropQueue(silently) {
  if (!silently) {
    failQueue();
  }
  actionRetryQueue.length = 0;
}

// add action to queue
const executeActionOrAddToRetryQueue = item => {
  var _background;
  if (actionRetryQueue.some(act => act.actionId === item.actionId)) {
    return;
  }
  if ((_background = background) !== null && _background !== void 0 && _background.connectionStream.readable) {
    executeAction({
      action: item,
      disconnectSideeffect: () => actionRetryQueue.push(item)
    });
  } else {
    actionRetryQueue.push(item);
  }
};

/**
 * Promise-style call to background method
 * In MV2: invokes promisifiedBackground method directly.
 * In MV3: action is added to retry queue, along with resolve handler to be executed on completion,
 * the queue is then immediately processed if background connection is available.
 * On completion (successful or error) the action is removed from the retry queue.
 *
 * @param method - name of the background method
 * @param [args] - arguments to that method, if any
 * @param [actionId] - if an action with the === same id is submitted, it'll be ignored if already in queue waiting for a retry.
 * @returns
 */
function submitRequestToBackground(method, args, actionId = generateActionId() // current date is not guaranteed to be unique
) {
  var _promisifiedBackgroun;
  if (_mv.isManifestV3) {
    return new Promise((resolve, reject) => {
      executeActionOrAddToRetryQueue({
        actionId,
        request: {
          method,
          args: args ?? []
        },
        resolve,
        reject
      });
    });
  }
  return (_promisifiedBackgroun = promisifiedBackground) === null || _promisifiedBackgroun === void 0 ? void 0 : _promisifiedBackgroun[method](...(args ?? []));
}
/**
 * [Deprecated] Callback-style call to background method
 * In MV2: invokes promisifiedBackground method directly.
 * In MV3: action is added to retry queue, along with resolve handler to be executed on completion,
 * the queue is then immediately processed if background connection is available.
 * On completion (successful or error) the action is removed from the retry queue.
 *
 * @deprecated Use async `submitRequestToBackground` function instead.
 * @param method - name of the background method
 * @param [args] - arguments to that method, if any
 * @param callback - Node style (error, result) callback for finishing the operation
 * @param [actionId] - if an action with the === same id is submitted, it'll be ignored if already in queue.
 */
const callBackgroundMethod = (method, args, callback, actionId = generateActionId() // current date is not guaranteed to be unique
) => {
  if (_mv.isManifestV3) {
    const resolve = value => callback(undefined, value);
    const reject = err => callback(err, undefined);
    executeActionOrAddToRetryQueue({
      actionId,
      request: {
        method,
        args: args ?? []
      },
      resolve,
      reject
    });
  } else {
    var _background2;
    (_background2 = background) === null || _background2 === void 0 ? void 0 : _background2[method](...args, callback);
  }
};
exports.callBackgroundMethod = callBackgroundMethod;
async function executeAction({
  action,
  disconnectSideeffect
}) {
  const {
    request: {
      method,
      args
    },
    resolve,
    reject
  } = action;
  try {
    var _promisifiedBackgroun2;
    resolve(await ((_promisifiedBackgroun2 = promisifiedBackground) === null || _promisifiedBackgroun2 === void 0 ? void 0 : _promisifiedBackgroun2[method](...args)));
  } catch (err) {
    var _background3;
    if ((_background3 = background) !== null && _background3 !== void 0 && _background3.DisconnectError &&
    // necessary to not break compatibility with background stubs or non-default implementations
    err instanceof background.DisconnectError) {
      disconnectSideeffect(action);
    } else {
      reject(err);
    }
  }
}
let processingQueue = false;

// Clears list of pending action in actionRetryQueue
// The results of background calls are wired up to the original promises that's been returned
// The first method on the queue gets called synchronously to make testing and reasoning about
//  a single request to an open connection easier.
async function processActionRetryQueue() {
  if (processingQueue) {
    return;
  }
  processingQueue = true;
  try {
    if (actionRetryQueue.length > 0) {
      const metametricsPayload = {
        category: _metametrics.MetaMetricsEventCategory.ServiceWorkers,
        event: _metametrics.MetaMetricsEventName.ServiceWorkerRestarted,
        properties: {
          service_worker_action_queue_methods: actionRetryQueue.map(action => action.request.method)
        }
      };
      (0, _actions.trackMetaMetricsEvent)(metametricsPayload);
    }
    while ((_background4 = background) !== null && _background4 !== void 0 && _background4.connectionStream.readable && actionRetryQueue.length > 0) {
      var _background4;
      // If background disconnects and fails the action, the next one will not be taken off the queue.
      // Retrying an action that failed because of connection loss while it was processing is not supported.
      const item = actionRetryQueue.shift();
      await executeAction({
        action: item,
        disconnectSideeffect: () => actionRetryQueue.unshift(item)
      });
    }
  } catch (e) {
    // error in the queue mechanism itself, the action was malformed
    console.error(e);
  }
  processingQueue = false;
}

/**
 * Sets/replaces the background connection reference
 * Under MV3 it also triggers queue processing if the new background is connected
 *
 * @param backgroundConnection
 */
async function _setBackgroundConnection(backgroundConnection) {
  background = backgroundConnection;
  promisifiedBackground = (0, _pify.default)(background);
  if (_mv.isManifestV3) {
    if (processingQueue) {
      console.warn('_setBackgroundConnection called while a queue was processing and not disconnected yet');
    }
    // Process all actions collected while connection stream was not available.
    processActionRetryQueue();
  }
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\store\\action-queue\\index.ts",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actionConstants.ts", {}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Cstore%5CactionConstants.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UPDATE_TRANSACTION_PARAMS = exports.UPDATE_METAMASK_STATE = exports.UPDATE_CUSTOM_NONCE = exports.UNLOCK_SUCCEEDED = exports.UNLOCK_IN_PROGRESS = exports.UNLOCK_FAILED = exports.TRANSACTION_ERROR = exports.TOGGLE_NETWORK_MENU = exports.TOGGLE_GAS_LOADING_ANIMATION = exports.TOGGLE_CURRENCY_INPUT_SWITCH = exports.TOGGLE_ACCOUNT_MENU = exports.SHOW_SEND_TOKEN_PAGE = exports.SHOW_PRIVATE_KEY = exports.SHOW_LOADING = exports.SHOW_CONF_TX_PAGE = exports.SHOW_ACCOUNTS_PAGE = exports.SET_WEBHID_CONNECTED_STATUS = exports.SET_SMART_TRANSACTIONS_ERROR = exports.SET_SELECTED_NETWORK_CONFIGURATION_ID = exports.SET_REQUEST_ACCOUNT_TABS = exports.SET_REMOVE_NFT_MESSAGE = exports.SET_PENDING_TOKENS = exports.SET_PARTICIPATE_IN_METAMETRICS = exports.SET_OPEN_METAMASK_TAB_IDS = exports.SET_NEXT_NONCE = exports.SET_NEW_TOKENS_IMPORTED = exports.SET_NEW_NFT_ADDED_MESSAGE = exports.SET_NEW_NETWORK_ADDED = exports.SET_MOUSE_USER_STATE = exports.SET_LEDGER_TRANSPORT_STATUS = exports.SET_HARDWARE_WALLET_DEFAULT_HD_PATH = exports.SET_FIRST_TIME_FLOW_TYPE = exports.SET_CUSTOM_TOKEN_AMOUNT = exports.SET_CURRENT_LOCALE = exports.SET_ACCOUNT_LABEL = exports.SET_ACCOUNT_DETAILS_ADDRESS = exports.SELECTED_ADDRESS_CHANGED = exports.SELECTED_ACCOUNT_CHANGED = exports.QR_CODE_DETECTED = exports.ONBOARDED_IN_THIS_UI_SESSION = exports.NETWORK_DROPDOWN_OPEN = exports.NETWORK_DROPDOWN_CLOSE = exports.MODAL_OPEN = exports.MODAL_CLOSE = exports.LOCK_METAMASK = exports.LOADING_METHOD_DATA_STARTED = exports.LOADING_METHOD_DATA_FINISHED = exports.HIDE_WHATS_NEW_POPUP = exports.HIDE_WARNING = exports.HIDE_LOADING = exports.GO_HOME = exports.GAS_FEE_ESTIMATES_UPDATED = exports.DISPLAY_WARNING = exports.DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE = exports.COMPLETE_ONBOARDING = exports.COMPLETED_TX = exports.CLOSE_WELCOME_SCREEN = exports.CLEAR_PENDING_TOKENS = exports.CLEAR_ACCOUNT_DETAILS = exports.CHAIN_CHANGED = exports.CAPTURE_SINGLE_EXCEPTION = exports.ALERT_OPEN = exports.ALERT_CLOSE = exports.ADDRESS_BOOK_UPDATED = exports.ACCOUNT_CHANGED = void 0;
const GO_HOME = 'GO_HOME';
// modal state
exports.GO_HOME = GO_HOME;
const MODAL_OPEN = 'UI_MODAL_OPEN';
exports.MODAL_OPEN = MODAL_OPEN;
const MODAL_CLOSE = 'UI_MODAL_CLOSE';
// alert state
exports.MODAL_CLOSE = MODAL_CLOSE;
const ALERT_OPEN = 'UI_ALERT_OPEN';
exports.ALERT_OPEN = ALERT_OPEN;
const ALERT_CLOSE = 'UI_ALERT_CLOSE';
exports.ALERT_CLOSE = ALERT_CLOSE;
const QR_CODE_DETECTED = 'UI_QR_CODE_DETECTED';
// network dropdown open
exports.QR_CODE_DETECTED = QR_CODE_DETECTED;
const NETWORK_DROPDOWN_OPEN = 'UI_NETWORK_DROPDOWN_OPEN';
exports.NETWORK_DROPDOWN_OPEN = NETWORK_DROPDOWN_OPEN;
const NETWORK_DROPDOWN_CLOSE = 'UI_NETWORK_DROPDOWN_CLOSE';
// remote state
exports.NETWORK_DROPDOWN_CLOSE = NETWORK_DROPDOWN_CLOSE;
const UPDATE_METAMASK_STATE = 'UPDATE_METAMASK_STATE';
exports.UPDATE_METAMASK_STATE = UPDATE_METAMASK_STATE;
const SELECTED_ADDRESS_CHANGED = 'SELECTED_ADDRESS_CHANGED';
exports.SELECTED_ADDRESS_CHANGED = SELECTED_ADDRESS_CHANGED;
const SELECTED_ACCOUNT_CHANGED = 'SELECTED_ACCOUNT_CHANGED';
exports.SELECTED_ACCOUNT_CHANGED = SELECTED_ACCOUNT_CHANGED;
const ACCOUNT_CHANGED = 'ACCOUNT_CHANGED';
exports.ACCOUNT_CHANGED = ACCOUNT_CHANGED;
const CHAIN_CHANGED = 'CHAIN_CHANGED';
exports.CHAIN_CHANGED = CHAIN_CHANGED;
const ADDRESS_BOOK_UPDATED = 'ADDRESS_BOOK_UPDATED';
exports.ADDRESS_BOOK_UPDATED = ADDRESS_BOOK_UPDATED;
const GAS_FEE_ESTIMATES_UPDATED = 'GAS_FEE_ESTIMATES_UPDATED';
exports.GAS_FEE_ESTIMATES_UPDATED = GAS_FEE_ESTIMATES_UPDATED;
const CLOSE_WELCOME_SCREEN = 'CLOSE_WELCOME_SCREEN';
// unlock screen
exports.CLOSE_WELCOME_SCREEN = CLOSE_WELCOME_SCREEN;
const UNLOCK_IN_PROGRESS = 'UNLOCK_IN_PROGRESS';
exports.UNLOCK_IN_PROGRESS = UNLOCK_IN_PROGRESS;
const UNLOCK_FAILED = 'UNLOCK_FAILED';
exports.UNLOCK_FAILED = UNLOCK_FAILED;
const UNLOCK_SUCCEEDED = 'UNLOCK_SUCCEEDED';
exports.UNLOCK_SUCCEEDED = UNLOCK_SUCCEEDED;
const LOCK_METAMASK = 'LOCK_METAMASK';
// error handling
exports.LOCK_METAMASK = LOCK_METAMASK;
const DISPLAY_WARNING = 'DISPLAY_WARNING';
exports.DISPLAY_WARNING = DISPLAY_WARNING;
const HIDE_WARNING = 'HIDE_WARNING';
exports.HIDE_WARNING = HIDE_WARNING;
const CAPTURE_SINGLE_EXCEPTION = 'CAPTURE_SINGLE_EXCEPTION';
// accounts screen
exports.CAPTURE_SINGLE_EXCEPTION = CAPTURE_SINGLE_EXCEPTION;
const SHOW_ACCOUNTS_PAGE = 'SHOW_ACCOUNTS_PAGE';
exports.SHOW_ACCOUNTS_PAGE = SHOW_ACCOUNTS_PAGE;
const SHOW_CONF_TX_PAGE = 'SHOW_CONF_TX_PAGE';
// account detail screen
exports.SHOW_CONF_TX_PAGE = SHOW_CONF_TX_PAGE;
const SHOW_SEND_TOKEN_PAGE = 'SHOW_SEND_TOKEN_PAGE';
exports.SHOW_SEND_TOKEN_PAGE = SHOW_SEND_TOKEN_PAGE;
const SHOW_PRIVATE_KEY = 'SHOW_PRIVATE_KEY';
exports.SHOW_PRIVATE_KEY = SHOW_PRIVATE_KEY;
const SET_ACCOUNT_LABEL = 'SET_ACCOUNT_LABEL';
exports.SET_ACCOUNT_LABEL = SET_ACCOUNT_LABEL;
const CLEAR_ACCOUNT_DETAILS = 'CLEAR_ACCOUNT_DETAILS';
exports.CLEAR_ACCOUNT_DETAILS = CLEAR_ACCOUNT_DETAILS;
const SET_ACCOUNT_DETAILS_ADDRESS = 'SET_ACCOUNT_DETAILS_ADDRESS';
// tx conf screen
exports.SET_ACCOUNT_DETAILS_ADDRESS = SET_ACCOUNT_DETAILS_ADDRESS;
const COMPLETED_TX = 'COMPLETED_TX';
exports.COMPLETED_TX = COMPLETED_TX;
const TRANSACTION_ERROR = 'TRANSACTION_ERROR';
exports.TRANSACTION_ERROR = TRANSACTION_ERROR;
const UPDATE_TRANSACTION_PARAMS = 'UPDATE_TRANSACTION_PARAMS';
exports.UPDATE_TRANSACTION_PARAMS = UPDATE_TRANSACTION_PARAMS;
const SET_NEXT_NONCE = 'SET_NEXT_NONCE';
// config screen
exports.SET_NEXT_NONCE = SET_NEXT_NONCE;
const SET_HARDWARE_WALLET_DEFAULT_HD_PATH = 'SET_HARDWARE_WALLET_DEFAULT_HD_PATH';
// loading overlay
exports.SET_HARDWARE_WALLET_DEFAULT_HD_PATH = SET_HARDWARE_WALLET_DEFAULT_HD_PATH;
const SHOW_LOADING = 'SHOW_LOADING_INDICATION';
exports.SHOW_LOADING = SHOW_LOADING;
const HIDE_LOADING = 'HIDE_LOADING_INDICATION';
exports.HIDE_LOADING = HIDE_LOADING;
const TOGGLE_ACCOUNT_MENU = 'TOGGLE_ACCOUNT_MENU';
exports.TOGGLE_ACCOUNT_MENU = TOGGLE_ACCOUNT_MENU;
const TOGGLE_NETWORK_MENU = 'TOGGLE_NETWORK_MENU';

// preferences
exports.TOGGLE_NETWORK_MENU = TOGGLE_NETWORK_MENU;
const UPDATE_CUSTOM_NONCE = 'UPDATE_CUSTOM_NONCE';
exports.UPDATE_CUSTOM_NONCE = UPDATE_CUSTOM_NONCE;
const SET_PARTICIPATE_IN_METAMETRICS = 'SET_PARTICIPATE_IN_METAMETRICS';

// locale
exports.SET_PARTICIPATE_IN_METAMETRICS = SET_PARTICIPATE_IN_METAMETRICS;
const SET_CURRENT_LOCALE = 'SET_CURRENT_LOCALE';

// Onboarding
exports.SET_CURRENT_LOCALE = SET_CURRENT_LOCALE;
const COMPLETE_ONBOARDING = 'COMPLETE_ONBOARDING';
exports.COMPLETE_ONBOARDING = COMPLETE_ONBOARDING;
const ONBOARDED_IN_THIS_UI_SESSION = 'ONBOARDED_IN_THIS_UI_SESSION';
exports.ONBOARDED_IN_THIS_UI_SESSION = ONBOARDED_IN_THIS_UI_SESSION;
const SET_MOUSE_USER_STATE = 'SET_MOUSE_USER_STATE';

// Ledger
exports.SET_MOUSE_USER_STATE = SET_MOUSE_USER_STATE;
const SET_WEBHID_CONNECTED_STATUS = 'SET_WEBHID_CONNECTED_STATUS';
exports.SET_WEBHID_CONNECTED_STATUS = SET_WEBHID_CONNECTED_STATUS;
const SET_LEDGER_TRANSPORT_STATUS = 'SET_LEDGER_TRANSPORT_STATUS';

// Network
exports.SET_LEDGER_TRANSPORT_STATUS = SET_LEDGER_TRANSPORT_STATUS;
const SET_PENDING_TOKENS = 'SET_PENDING_TOKENS';
exports.SET_PENDING_TOKENS = SET_PENDING_TOKENS;
const CLEAR_PENDING_TOKENS = 'CLEAR_PENDING_TOKENS';
exports.CLEAR_PENDING_TOKENS = CLEAR_PENDING_TOKENS;
const SET_FIRST_TIME_FLOW_TYPE = 'SET_FIRST_TIME_FLOW_TYPE';
exports.SET_FIRST_TIME_FLOW_TYPE = SET_FIRST_TIME_FLOW_TYPE;
const SET_SELECTED_NETWORK_CONFIGURATION_ID = 'SET_SELECTED_NETWORK_CONFIGURATION_ID';
exports.SET_SELECTED_NETWORK_CONFIGURATION_ID = SET_SELECTED_NETWORK_CONFIGURATION_ID;
const SET_NEW_NETWORK_ADDED = 'SET_NEW_NETWORK_ADDED';
exports.SET_NEW_NETWORK_ADDED = SET_NEW_NETWORK_ADDED;
const SET_NEW_NFT_ADDED_MESSAGE = 'SET_NEW_NFT_ADDED_MESSAGE';
exports.SET_NEW_NFT_ADDED_MESSAGE = SET_NEW_NFT_ADDED_MESSAGE;
const SET_REMOVE_NFT_MESSAGE = 'SET_REMOVE_NFT_MESSAGE';
exports.SET_REMOVE_NFT_MESSAGE = SET_REMOVE_NFT_MESSAGE;
const LOADING_METHOD_DATA_STARTED = 'LOADING_METHOD_DATA_STARTED';
exports.LOADING_METHOD_DATA_STARTED = LOADING_METHOD_DATA_STARTED;
const LOADING_METHOD_DATA_FINISHED = 'LOADING_METHOD_DATA_FINISHED';
exports.LOADING_METHOD_DATA_FINISHED = LOADING_METHOD_DATA_FINISHED;
const SET_REQUEST_ACCOUNT_TABS = 'SET_REQUEST_ACCOUNT_TABS';
exports.SET_REQUEST_ACCOUNT_TABS = SET_REQUEST_ACCOUNT_TABS;
const SET_OPEN_METAMASK_TAB_IDS = 'SET_OPEN_METAMASK_TAB_IDS';

// Home Screen
exports.SET_OPEN_METAMASK_TAB_IDS = SET_OPEN_METAMASK_TAB_IDS;
const HIDE_WHATS_NEW_POPUP = 'HIDE_WHATS_NEW_POPUP';
exports.HIDE_WHATS_NEW_POPUP = HIDE_WHATS_NEW_POPUP;
const TOGGLE_GAS_LOADING_ANIMATION = 'TOGGLE_GAS_LOADING_ANIMATION';

// Smart Transactions
exports.TOGGLE_GAS_LOADING_ANIMATION = TOGGLE_GAS_LOADING_ANIMATION;
const SET_SMART_TRANSACTIONS_ERROR = 'SET_SMART_TRANSACTIONS_ERROR';
exports.SET_SMART_TRANSACTIONS_ERROR = SET_SMART_TRANSACTIONS_ERROR;
const DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE = 'DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE';
exports.DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE = DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE;
const TOGGLE_CURRENCY_INPUT_SWITCH = 'TOGGLE_CURRENCY_INPUT_SWITCH';

// Token detection v2
exports.TOGGLE_CURRENCY_INPUT_SWITCH = TOGGLE_CURRENCY_INPUT_SWITCH;
const SET_NEW_TOKENS_IMPORTED = 'SET_NEW_TOKENS_IMPORTED';

// Token allowance
exports.SET_NEW_TOKENS_IMPORTED = SET_NEW_TOKENS_IMPORTED;
const SET_CUSTOM_TOKEN_AMOUNT = 'SET_CUSTOM_TOKEN_AMOUNT';
exports.SET_CUSTOM_TOKEN_AMOUNT = SET_CUSTOM_TOKEN_AMOUNT;

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\store\\actionConstants.ts",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actions.ts", {"../../app/scripts/lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../shared/constants/common":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\common.ts","../../shared/constants/hardware-wallets":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\hardware-wallets.ts","../../shared/constants/metametrics":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\metametrics.ts","../../shared/lib/switch-direction":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\lib\\switch-direction.js","../../shared/modules/conversion.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\conversion.utils.ts","../../shared/modules/error":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\error.ts","../../shared/modules/hexstring-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\hexstring-utils.ts","../../shared/modules/string-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\string-utils.ts","../ducks/alerts/unconnected-account":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\alerts\\unconnected-account.js","../ducks/metamask/metamask":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\metamask\\metamask.js","../ducks/send":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\send\\index.js","../helpers/utils/i18n-helper":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\i18n-helper.tsx","../helpers/utils/transactions.util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\helpers\\utils\\transactions.util.js","../pages/swaps/swaps.util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\pages\\swaps\\swaps.util.ts","../selectors":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\selectors\\index.js","./action-queue":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\action-queue\\index.ts","./actionConstants":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\actionConstants.ts","@sentry/browser":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@sentry\\browser\\dist\\index.js","buffer":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\browserify\\node_modules\\buffer\\index.js","lodash":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\lodash\\lodash.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Cstore%5Cactions.ts
      return function (require, module, exports) {
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.acceptWatchAsset = acceptWatchAsset;
exports.addImportedTokens = addImportedTokens;
exports.addNewAccount = addNewAccount;
exports.addNft = addNft;
exports.addNftVerifyOwnership = addNftVerifyOwnership;
exports.addPermittedAccount = addPermittedAccount;
exports.addPollingTokenToAppState = addPollingTokenToAppState;
exports.addToAddressBook = addToAddressBook;
exports.addToken = addToken;
exports.addTokens = addTokens;
exports.addUnapprovedTransaction = addUnapprovedTransaction;
exports.addUnapprovedTransactionAndRouteToConfirmationPage = addUnapprovedTransactionAndRouteToConfirmationPage;
exports.approvePermissionsRequest = approvePermissionsRequest;
exports.attemptLedgerTransportCreation = attemptLedgerTransportCreation;
exports.backupUserData = backupUserData;
exports.cancelDecryptMsg = cancelDecryptMsg;
exports.cancelEncryptionPublicKeyMsg = cancelEncryptionPublicKeyMsg;
exports.cancelMsg = cancelMsg;
exports.cancelMsgs = cancelMsgs;
exports.cancelPersonalMsg = cancelPersonalMsg;
exports.cancelQRHardwareSignRequest = cancelQRHardwareSignRequest;
exports.cancelSmartTransaction = cancelSmartTransaction;
exports.cancelSyncQRHardware = cancelSyncQRHardware;
exports.cancelTx = cancelTx;
exports.cancelTxs = cancelTxs;
exports.cancelTypedMsg = cancelTypedMsg;
exports.captureSingleException = captureSingleException;
exports.checkAndUpdateAllNftsOwnershipStatus = checkAndUpdateAllNftsOwnershipStatus;
exports.checkAndUpdateSingleNftOwnershipStatus = checkAndUpdateSingleNftOwnershipStatus;
exports.checkHardwareStatus = checkHardwareStatus;
exports.clearAccountDetails = clearAccountDetails;
exports.clearPendingTokens = clearPendingTokens;
exports.clearSmartTransactionFees = clearSmartTransactionFees;
exports.clearSwapsQuotes = clearSwapsQuotes;
exports.closeCurrentNotificationWindow = closeCurrentNotificationWindow;
exports.closeNotificationPopup = closeNotificationPopup;
exports.closeWelcomeScreen = closeWelcomeScreen;
exports.completeOnboarding = completeOnboarding;
exports.completedTx = completedTx;
exports.connectHardware = connectHardware;
exports.createCancelTransaction = createCancelTransaction;
exports.createEventFragment = createEventFragment;
exports.createNewVault = createNewVault;
exports.createNewVaultAndGetSeedPhrase = createNewVaultAndGetSeedPhrase;
exports.createNewVaultAndRestore = createNewVaultAndRestore;
exports.createRetryTransaction = createRetryTransaction;
exports.createSpeedUpTransaction = createSpeedUpTransaction;
exports.createTransactionEventFragment = createTransactionEventFragment;
exports.decryptMsg = decryptMsg;
exports.decryptMsgInline = decryptMsgInline;
exports.detectNewTokens = detectNewTokens;
exports.detectNfts = detectNfts;
exports.disconnectGasFeeEstimatePoller = disconnectGasFeeEstimatePoller;
exports.dismissSmartTransactionsErrorMessage = dismissSmartTransactionsErrorMessage;
exports.displayWarning = displayWarning;
exports.editAndSetNetworkConfiguration = editAndSetNetworkConfiguration;
exports.encryptionPublicKeyMsg = encryptionPublicKeyMsg;
exports.estimateGas = estimateGas;
exports.exportAccount = exportAccount;
exports.exportAccounts = exportAccounts;
exports.fetchAndSetQuotes = fetchAndSetQuotes;
exports.fetchSmartTransactionFees = fetchSmartTransactionFees;
exports.fetchSmartTransactionsLiveness = fetchSmartTransactionsLiveness;
exports.finalizeEventFragment = finalizeEventFragment;
exports.forceUpdateMetamaskState = forceUpdateMetamaskState;
exports.forgetDevice = forgetDevice;
exports.getBalancesInSingleCall = getBalancesInSingleCall;
exports.getContractMethodData = getContractMethodData;
exports.getCurrentNetworkEIP1559Compatibility = getCurrentNetworkEIP1559Compatibility;
exports.getGasFeeEstimatesAndStartPolling = getGasFeeEstimatesAndStartPolling;
exports.getGasFeeTimeEstimate = getGasFeeTimeEstimate;
exports.getNextNonce = getNextNonce;
exports.getOpenMetamaskTabsIds = getOpenMetamaskTabsIds;
exports.getRequestAccountTabIds = getRequestAccountTabIds;
exports.getRpcMethodPreferences = getRpcMethodPreferences;
exports.getTokenStandardAndDetails = getTokenStandardAndDetails;
exports.getTransactions = getTransactions;
exports.goHome = goHome;
exports.hideAlert = hideAlert;
exports.hideBetaHeader = hideBetaHeader;
exports.hideLoadingIndication = hideLoadingIndication;
exports.hideModal = hideModal;
exports.hideNetworkDropdown = hideNetworkDropdown;
exports.hideProductTour = hideProductTour;
exports.hideTestNetMessage = hideTestNetMessage;
exports.hideWarning = hideWarning;
exports.ignoreTokens = ignoreTokens;
exports.importNewAccount = importNewAccount;
exports.isNftOwner = isNftOwner;
exports.lockMetamask = lockMetamask;
exports.markPasswordForgotten = markPasswordForgotten;
exports.qrCodeDetected = qrCodeDetected;
exports.rejectPendingApproval = rejectPendingApproval;
exports.rejectPermissionsRequest = rejectPermissionsRequest;
exports.rejectWatchAsset = rejectWatchAsset;
exports.removeAccount = removeAccount;
exports.removeAndIgnoreNft = removeAndIgnoreNft;
exports.removeFromAddressBook = removeFromAddressBook;
exports.removeNetworkConfiguration = removeNetworkConfiguration;
exports.removeNft = removeNft;
exports.removePermissionsFor = removePermissionsFor;
exports.removePermittedAccount = removePermittedAccount;
exports.removePollingTokenFromAppState = removePollingTokenFromAppState;
exports.requestAccountsPermissionWithId = requestAccountsPermissionWithId;
exports.requestRevealSeedWords = requestRevealSeedWords;
exports.requestUserApproval = requestUserApproval;
exports.resetAccount = resetAccount;
exports.resetBackgroundSwapsState = resetBackgroundSwapsState;
exports.resetSwapsPostFetchState = resetSwapsPostFetchState;
exports.resolvePendingApproval = resolvePendingApproval;
exports.restoreUserData = restoreUserData;
exports.rollbackToPreviousProvider = rollbackToPreviousProvider;
exports.safeRefetchQuotes = safeRefetchQuotes;
exports.setAccountDetailsAddress = setAccountDetailsAddress;
exports.setAccountLabel = setAccountLabel;
exports.setActiveNetwork = setActiveNetwork;
exports.setAdvancedGasFee = setAdvancedGasFee;
exports.setAlertEnabledness = setAlertEnabledness;
exports.setApproveTxId = setApproveTxId;
exports.setAutoLockTimeLimit = setAutoLockTimeLimit;
exports.setBackgroundSwapRouteState = setBackgroundSwapRouteState;
exports.setCompletedOnboarding = setCompletedOnboarding;
exports.setConnectedStatusPopoverHasBeenShown = setConnectedStatusPopoverHasBeenShown;
exports.setCurrentCurrency = setCurrentCurrency;
exports.setCurrentLocale = setCurrentLocale;
exports.setCustomApproveTxData = setCustomApproveTxData;
exports.setDefaultHomeActiveTabName = setDefaultHomeActiveTabName;
exports.setDisabledRpcMethodPreference = setDisabledRpcMethodPreference;
exports.setDismissSeedBackUpReminder = setDismissSeedBackUpReminder;
exports.setFeatureFlag = setFeatureFlag;
exports.setFirstTimeFlowType = setFirstTimeFlowType;
exports.setFirstTimeUsedNetwork = setFirstTimeUsedNetwork;
exports.setHardwareWalletDefaultHdPath = setHardwareWalletDefaultHdPath;
exports.setHideZeroBalanceTokens = setHideZeroBalanceTokens;
exports.setInitialGasEstimate = setInitialGasEstimate;
exports.setIpfsGateway = setIpfsGateway;
exports.setLastActiveTime = setLastActiveTime;
exports.setLedgerTransportPreference = setLedgerTransportPreference;
exports.setMouseUserState = setMouseUserState;
exports.setNewNetworkAdded = setNewNetworkAdded;
exports.setNewNftAddedMessage = setNewNftAddedMessage;
exports.setNewTokensImported = setNewTokensImported;
exports.setNextNonce = setNextNonce;
exports.setOpenMetamaskTabsIDs = setOpenMetamaskTabsIDs;
exports.setOpenSeaEnabled = setOpenSeaEnabled;
exports.setOutdatedBrowserWarningLastShown = setOutdatedBrowserWarningLastShown;
exports.setParticipateInMetaMetrics = setParticipateInMetaMetrics;
exports.setPendingTokens = setPendingTokens;
exports.setPreference = setPreference;
exports.setProviderType = setProviderType;
exports.setRecoveryPhraseReminderHasBeenShown = setRecoveryPhraseReminderHasBeenShown;
exports.setRecoveryPhraseReminderLastShown = setRecoveryPhraseReminderLastShown;
exports.setRemoveNftMessage = setRemoveNftMessage;
exports.setRequestAccountTabIds = setRequestAccountTabIds;
exports.setSeedPhraseBackedUp = setSeedPhraseBackedUp;
exports.setSelectedAccount = setSelectedAccount;
exports.setSelectedAddress = setSelectedAddress;
exports.setSelectedNetworkConfigurationId = setSelectedNetworkConfigurationId;
exports.setSelectedQuoteAggId = setSelectedQuoteAggId;
exports.setShowFiatConversionOnTestnetsPreference = setShowFiatConversionOnTestnetsPreference;
exports.setShowTestNetworks = setShowTestNetworks;
exports.setSmartTransactionsOptInStatus = setSmartTransactionsOptInStatus;
exports.setSmartTransactionsRefreshInterval = setSmartTransactionsRefreshInterval;
exports.setSwapsErrorKey = setSwapsErrorKey;
exports.setSwapsFeatureFlags = setSwapsFeatureFlags;
exports.setSwapsLiveness = setSwapsLiveness;
exports.setSwapsQuotesPollingLimitEnabled = setSwapsQuotesPollingLimitEnabled;
exports.setSwapsTokens = setSwapsTokens;
exports.setSwapsTxGasLimit = setSwapsTxGasLimit;
exports.setSwapsTxGasPrice = setSwapsTxGasPrice;
exports.setTermsOfUseLastAgreed = setTermsOfUseLastAgreed;
exports.setTheme = setTheme;
exports.setTradeTxId = setTradeTxId;
exports.setTransactionSecurityCheckEnabled = setTransactionSecurityCheckEnabled;
exports.setUnconnectedAccountAlertShown = setUnconnectedAccountAlertShown;
exports.setUseBlockie = setUseBlockie;
exports.setUseCurrencyRateCheck = setUseCurrencyRateCheck;
exports.setUseMultiAccountBalanceChecker = setUseMultiAccountBalanceChecker;
exports.setUseNativeCurrencyAsPrimaryCurrencyPreference = setUseNativeCurrencyAsPrimaryCurrencyPreference;
exports.setUseNftDetection = setUseNftDetection;
exports.setUseNonceField = setUseNonceField;
exports.setUsePhishDetect = setUsePhishDetect;
exports.setUseTokenDetection = setUseTokenDetection;
exports.setWeb3ShimUsageAlertDismissed = setWeb3ShimUsageAlertDismissed;
exports.showAccountsPage = showAccountsPage;
exports.showAlert = showAlert;
exports.showConfTxPage = showConfTxPage;
exports.showLoadingIndication = showLoadingIndication;
exports.showModal = showModal;
exports.showNetworkDropdown = showNetworkDropdown;
exports.showPrivateKey = showPrivateKey;
exports.showQrScanner = showQrScanner;
exports.showSendTokenPage = showSendTokenPage;
exports.signAndSendSmartTransaction = signAndSendSmartTransaction;
exports.signMsg = signMsg;
exports.signPersonalMsg = signPersonalMsg;
exports.signTypedMsg = signTypedMsg;
exports.stopPollingForQuotes = stopPollingForQuotes;
exports.submitPassword = submitPassword;
exports.submitQRHardwareCryptoAccount = submitQRHardwareCryptoAccount;
exports.submitQRHardwareCryptoHDKey = submitQRHardwareCryptoHDKey;
exports.submitQRHardwareSignature = submitQRHardwareSignature;
exports.toggleAccountMenu = toggleAccountMenu;
exports.toggleNetworkMenu = toggleNetworkMenu;
exports.trackMetaMetricsEvent = trackMetaMetricsEvent;
exports.trackMetaMetricsPage = trackMetaMetricsPage;
exports.tryReverseResolveAddress = tryReverseResolveAddress;
exports.tryUnlockMetamask = tryUnlockMetamask;
exports.unMarkPasswordForgotten = unMarkPasswordForgotten;
exports.unlockAndGetSeedPhrase = unlockAndGetSeedPhrase;
exports.unlockFailed = unlockFailed;
exports.unlockHardwareWalletAccounts = unlockHardwareWalletAccounts;
exports.unlockInProgress = unlockInProgress;
exports.unlockSucceeded = unlockSucceeded;
exports.updateAndApproveTx = updateAndApproveTx;
exports.updateCurrentLocale = updateCurrentLocale;
exports.updateCustomNonce = updateCustomNonce;
exports.updateCustomSwapsEIP1559GasParams = updateCustomSwapsEIP1559GasParams;
exports.updateEditableParams = updateEditableParams;
exports.updateEventFragment = updateEventFragment;
exports.updateMetamaskState = updateMetamaskState;
exports.updateNftDropDownState = updateNftDropDownState;
exports.updatePreviousGasParams = updatePreviousGasParams;
exports.updateSmartTransaction = updateSmartTransaction;
exports.updateSwapApprovalTransaction = updateSwapApprovalTransaction;
exports.updateSwapTransaction = updateSwapTransaction;
exports.updateSwapsUserFeeLevel = updateSwapsUserFeeLevel;
exports.updateTokenType = updateTokenType;
exports.updateTransaction = updateTransaction;
exports.updateTransactionGasFees = updateTransactionGasFees;
exports.updateTransactionParams = updateTransactionParams;
exports.updateTransactionSendFlowHistory = updateTransactionSendFlowHistory;
exports.updateViewedNotifications = updateViewedNotifications;
exports.upsertNetworkConfiguration = upsertNetworkConfiguration;
exports.verifyPassword = verifyPassword;
exports.verifySeedPhrase = verifySeedPhrase;
var _loglevel = _interopRequireDefault(require("loglevel"));
var _browser = require("@sentry/browser");
var _lodash = require("lodash");
var _transactions = require("../helpers/utils/transactions.util");
var _switchDirection = _interopRequireDefault(require("../../shared/lib/switch-direction"));
var _app = require("../../shared/constants/app");
var _util = require("../../app/scripts/lib/util");
var _selectors = require("../selectors");
var _send = require("../ducks/send");
var _unconnectedAccount = require("../ducks/alerts/unconnected-account");
var _metamask = require("../ducks/metamask/metamask");
var _hexstringUtils = require("../../shared/modules/hexstring-utils");
var _hardwareWallets = require("../../shared/constants/hardware-wallets");
var _metametrics = require("../../shared/constants/metametrics");
var _swaps = require("../pages/swaps/swaps.util");
var _stringUtils = require("../../shared/modules/string-utils");
var _i18nHelper = require("../helpers/utils/i18n-helper");
var _conversion = require("../../shared/modules/conversion.utils");
var _common = require("../../shared/constants/common");
var _error = require("../../shared/modules/error");
var actionConstants = _interopRequireWildcard(require("./actionConstants"));
var _actionQueue = require("./action-queue");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function goHome() {
  return {
    type: actionConstants.GO_HOME
  };
}
// async actions

function tryUnlockMetamask(password) {
  return dispatch => {
    dispatch(showLoadingIndication());
    dispatch(unlockInProgress());
    _loglevel.default.debug(`background.submitPassword`);
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('submitPassword', [password], error => {
        if (error) {
          reject(error);
          return;
        }
        resolve();
      });
    }).then(() => {
      dispatch(unlockSucceeded());
      return forceUpdateMetamaskState(dispatch);
    }).then(() => {
      dispatch(hideLoadingIndication());
    }).catch(err => {
      dispatch(unlockFailed(err.message));
      dispatch(hideLoadingIndication());
      return Promise.reject(err);
    });
  };
}

/**
 * Adds a new account where all data is encrypted using the given password and
 * where all addresses are generated from a given seed phrase.
 *
 * @param password - The password.
 * @param seedPhrase - The seed phrase.
 * @returns The updated state of the keyring controller.
 */
function createNewVaultAndRestore(password, seedPhrase) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.createNewVaultAndRestore`);

    // Encode the secret recovery phrase as an array of integers so that it is
    // serialized as JSON properly.
    const encodedSeedPhrase = Array.from(Buffer.from(seedPhrase, 'utf8').values());

    // TODO: Add types for vault
    let vault;
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('createNewVaultAndRestore', [password, encodedSeedPhrase], (err, _vault) => {
        if (err) {
          reject(err);
          return;
        }
        vault = _vault;
        resolve();
      });
    }).then(() => dispatch(unMarkPasswordForgotten())).then(() => {
      dispatch(showAccountsPage());
      dispatch(hideLoadingIndication());
      return vault;
    }).catch(err => {
      dispatch(displayWarning(err.message));
      dispatch(hideLoadingIndication());
      return Promise.reject(err);
    });
  };
}
function createNewVaultAndGetSeedPhrase(password) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      await createNewVault(password);
      const seedPhrase = await verifySeedPhrase();
      return seedPhrase;
    } catch (error) {
      dispatch(displayWarning(error));
      if ((0, _error.isErrorWithMessage)(error)) {
        throw new Error(error.message);
      } else {
        throw error;
      }
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function unlockAndGetSeedPhrase(password) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      await submitPassword(password);
      const seedPhrase = await verifySeedPhrase();
      await forceUpdateMetamaskState(dispatch);
      return seedPhrase;
    } catch (error) {
      dispatch(displayWarning(error));
      if ((0, _error.isErrorWithMessage)(error)) {
        throw new Error(error.message);
      } else {
        throw error;
      }
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function submitPassword(password) {
  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('submitPassword', [password], error => {
      if (error) {
        reject(error);
        return;
      }
      resolve();
    });
  });
}
function createNewVault(password) {
  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('createNewVaultAndKeychain', [password], error => {
      if (error) {
        reject(error);
        return;
      }
      resolve(true);
    });
  });
}
function verifyPassword(password) {
  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('verifyPassword', [password], error => {
      if (error) {
        reject(error);
        return;
      }
      resolve(true);
    });
  });
}
async function verifySeedPhrase() {
  const encodedSeedPhrase = await (0, _actionQueue.submitRequestToBackground)('verifySeedPhrase');
  return Buffer.from(encodedSeedPhrase).toString('utf8');
}
function requestRevealSeedWords(password) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.verifyPassword`);
    try {
      await verifyPassword(password);
      const seedPhrase = await verifySeedPhrase();
      return seedPhrase;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function tryReverseResolveAddress(address) {
  return () => {
    return new Promise(resolve => {
      (0, _actionQueue.callBackgroundMethod)('tryReverseResolveAddress', [address], err => {
        if (err) {
          (0, _error.logErrorWithMessage)(err);
        }
        resolve();
      });
    });
  };
}
function resetAccount() {
  return dispatch => {
    dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('resetAccount', [], (err, account) => {
        dispatch(hideLoadingIndication());
        if (err) {
          if ((0, _error.isErrorWithMessage)(err)) {
            dispatch(displayWarning(err.message));
          }
          reject(err);
          return;
        }
        _loglevel.default.info(`Transaction history reset for ${account}`);
        dispatch(showAccountsPage());
        resolve(account);
      });
    });
  };
}
function removeAccount(address) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      await new Promise((resolve, reject) => {
        (0, _actionQueue.callBackgroundMethod)('removeAccount', [address], (error, account) => {
          if (error) {
            reject(error);
            return;
          }
          resolve(account);
        });
      });
      await forceUpdateMetamaskState(dispatch);
    } catch (error) {
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    _loglevel.default.info(`Account removed: ${address}`);
    dispatch(showAccountsPage());
  };
}
function importNewAccount(strategy, args, loadingMessage) {
  return async dispatch => {
    let newState;
    dispatch(showLoadingIndication(loadingMessage));
    try {
      _loglevel.default.debug(`background.importAccountWithStrategy`);
      await (0, _actionQueue.submitRequestToBackground)('importAccountWithStrategy', [strategy, args]);
      _loglevel.default.debug(`background.getState`);
      newState = await (0, _actionQueue.submitRequestToBackground)('getState');
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    return newState;
  };
}
function addNewAccount() {
  _loglevel.default.debug(`background.addNewAccount`);
  return async (dispatch, getState) => {
    const oldIdentities = getState().metamask.identities;
    dispatch(showLoadingIndication());
    let newIdentities;
    try {
      const {
        identities
      } = await (0, _actionQueue.submitRequestToBackground)('addNewAccount', [Object.keys(oldIdentities).length]);
      newIdentities = identities;
    } catch (error) {
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    const newAccountAddress = Object.keys(newIdentities).find(address => !oldIdentities[address]);
    await forceUpdateMetamaskState(dispatch);
    return newAccountAddress;
  };
}
function checkHardwareStatus(deviceName, hdPath) {
  _loglevel.default.debug(`background.checkHardwareStatus`, deviceName, hdPath);
  return async dispatch => {
    dispatch(showLoadingIndication());
    let unlocked = false;
    try {
      unlocked = await (0, _actionQueue.submitRequestToBackground)('checkHardwareStatus', [deviceName, hdPath]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    await forceUpdateMetamaskState(dispatch);
    return unlocked;
  };
}
function forgetDevice(deviceName) {
  _loglevel.default.debug(`background.forgetDevice`, deviceName);
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      await (0, _actionQueue.submitRequestToBackground)('forgetDevice', [deviceName]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    await forceUpdateMetamaskState(dispatch);
  };
}

// TODO: Define an Account Type for the return type of this method and anywhere
// else dealing with accounts.
function connectHardware(deviceName, page, hdPath, t) {
  _loglevel.default.debug(`background.connectHardware`, deviceName, page, hdPath);
  return async (dispatch, getState) => {
    const {
      ledgerTransportType
    } = getState().metamask;
    dispatch(showLoadingIndication(`Looking for your ${(0, _lodash.capitalize)(deviceName)}...`));
    let accounts;
    try {
      if (deviceName === _hardwareWallets.HardwareDeviceNames.ledger) {
        await (0, _actionQueue.submitRequestToBackground)('establishLedgerTransportPreference');
      }
      if (deviceName === _hardwareWallets.HardwareDeviceNames.ledger && ledgerTransportType === _hardwareWallets.LedgerTransportTypes.webhid) {
        const connectedDevices = await window.navigator.hid.requestDevice({
          // The types for web hid were provided by @types/w3c-web-hid and may
          // not be fully formed or correct, because LEDGER_USB_VENDOR_ID is a
          // string and this integration with Navigator.hid works before
          // TypeScript. As a note, on the next declaration we convert the
          // LEDGER_USB_VENDOR_ID to a number for a different API so....
          // TODO: Get David Walsh's opinion here
          filters: [{
            vendorId: _hardwareWallets.LEDGER_USB_VENDOR_ID
          }]
        });
        const userApprovedWebHidConnection = connectedDevices.some(device => device.vendorId === Number(_hardwareWallets.LEDGER_USB_VENDOR_ID));
        if (!userApprovedWebHidConnection) {
          throw new Error(t('ledgerWebHIDNotConnectedErrorMessage'));
        }
      }
      accounts = await (0, _actionQueue.submitRequestToBackground)('connectHardware', [deviceName, page, hdPath]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      if (deviceName === _hardwareWallets.HardwareDeviceNames.ledger && ledgerTransportType === _hardwareWallets.LedgerTransportTypes.webhid && (0, _error.isErrorWithMessage)(error) && error.message.match('Failed to open the device')) {
        dispatch(displayWarning(t('ledgerDeviceOpenFailureMessage')));
        throw new Error(t('ledgerDeviceOpenFailureMessage'));
      } else {
        if (deviceName !== _hardwareWallets.HardwareDeviceNames.qr) {
          dispatch(displayWarning(error));
        }
        throw error;
      }
    } finally {
      dispatch(hideLoadingIndication());
    }
    await forceUpdateMetamaskState(dispatch);
    return accounts;
  };
}
function unlockHardwareWalletAccounts(indexes, deviceName, hdPath, hdPathDescription) {
  _loglevel.default.debug(`background.unlockHardwareWalletAccount`, indexes, deviceName, hdPath, hdPathDescription);
  return async dispatch => {
    dispatch(showLoadingIndication());
    for (const index of indexes) {
      try {
        await (0, _actionQueue.submitRequestToBackground)('unlockHardwareWalletAccount', [index, deviceName, hdPath, hdPathDescription]);
      } catch (err) {
        (0, _error.logErrorWithMessage)(err);
        dispatch(displayWarning(err));
        dispatch(hideLoadingIndication());
        throw err;
      }
    }
    dispatch(hideLoadingIndication());
    return undefined;
  };
}
function showQrScanner() {
  return dispatch => {
    dispatch(showModal({
      name: 'QR_SCANNER'
    }));
  };
}
function setCurrentCurrency(currencyCode) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setCurrentCurrency`);
    try {
      await (0, _actionQueue.submitRequestToBackground)('setCurrentCurrency', [currencyCode]);
      await forceUpdateMetamaskState(dispatch);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function signMsg(msgData) {
  _loglevel.default.debug('action - signMsg');
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`actions calling background.signMessage`);
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('signMessage', [msgData]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.metamaskId));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}
function signPersonalMsg(msgData) {
  _loglevel.default.debug('action - signPersonalMsg');
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`actions calling background.signPersonalMessage`);
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('signPersonalMessage', [msgData]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.metamaskId));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}
function decryptMsgInline(decryptedMsgData) {
  _loglevel.default.debug('action - decryptMsgInline');
  return async dispatch => {
    _loglevel.default.debug(`actions calling background.decryptMessageInline`);
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('decryptMessageInline', [decryptedMsgData]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      throw error;
    }
    dispatch(updateMetamaskState(newState));
    return newState.unapprovedDecryptMsgs[decryptedMsgData.metamaskId];
  };
}
function decryptMsg(decryptedMsgData) {
  _loglevel.default.debug('action - decryptMsg');
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`actions calling background.decryptMessage`);
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('decryptMessage', [decryptedMsgData]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(decryptedMsgData.metamaskId));
    dispatch(closeCurrentNotificationWindow());
    return decryptedMsgData;
  };
}
function encryptionPublicKeyMsg(msgData) {
  _loglevel.default.debug('action - encryptionPublicKeyMsg');
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`actions calling background.encryptionPublicKey`);
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('encryptionPublicKey', [msgData]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.metamaskId));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}
function signTypedMsg(msgData) {
  _loglevel.default.debug('action - signTypedMsg');
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`actions calling background.signTypedMessage`);
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('signTypedMessage', [msgData]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      throw error;
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.metamaskId));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}
function updateCustomNonce(value) {
  return {
    type: actionConstants.UPDATE_CUSTOM_NONCE,
    value
  };
}
const updateMetamaskStateFromBackground = () => {
  _loglevel.default.debug(`background.getState`);
  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('getState', [], (error, newState) => {
      if (error) {
        reject(error);
        return;
      }
      resolve(newState);
    });
  });
};

/**
 * TODO: update previousGasParams to use typed gas params object
 * TODO: codeword: NOT_A_THUNK @brad-decker
 *
 * @param txId - MetaMask internal transaction id
 * @param previousGasParams - Object of gas params to set as previous
 */
function updatePreviousGasParams(txId, previousGasParams) {
  return async () => {
    let updatedTransaction;
    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updatePreviousGasParams', [txId, previousGasParams]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      throw error;
    }
    return updatedTransaction;
  };
}

// TODO: codeword: NOT_A_THUNK @brad-decker
function updateSwapApprovalTransaction(txId, txSwapApproval) {
  return async () => {
    let updatedTransaction;
    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updateSwapApprovalTransaction', [txId, txSwapApproval]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      throw error;
    }
    return updatedTransaction;
  };
}
function updateEditableParams(txId, editableParams) {
  return async dispatch => {
    let updatedTransaction;
    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updateEditableParams', [txId, editableParams]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      throw error;
    }
    await forceUpdateMetamaskState(dispatch);
    return updatedTransaction;
  };
}

/**
 * Appends new send flow history to a transaction
 * TODO: codeword: NOT_A_THUNK @brad-decker
 *
 * @param txId - the id of the transaction to update
 * @param currentSendFlowHistoryLength - sendFlowHistory entries currently
 * @param sendFlowHistory - the new send flow history to append to the
 * transaction
 * @returns
 */
function updateTransactionSendFlowHistory(txId, currentSendFlowHistoryLength, sendFlowHistory) {
  return async () => {
    let updatedTransaction;
    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updateTransactionSendFlowHistory', [txId, currentSendFlowHistoryLength, sendFlowHistory]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      throw error;
    }
    return updatedTransaction;
  };
}
async function backupUserData() {
  let backedupData;
  try {
    backedupData = await (0, _actionQueue.submitRequestToBackground)('backupUserData');
  } catch (error) {
    (0, _error.logErrorWithMessage)(error);
    throw error;
  }
  return backedupData;
}
async function restoreUserData(jsonString) {
  try {
    await (0, _actionQueue.submitRequestToBackground)('restoreUserData', [jsonString]);
  } catch (error) {
    (0, _error.logErrorWithMessage)(error);
    throw error;
  }
  return true;
}

// TODO: codeword: NOT_A_THUNK @brad-decker
function updateTransactionGasFees(txId, txGasFees) {
  return async () => {
    let updatedTransaction;
    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updateTransactionGasFees', [txId, txGasFees]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      throw error;
    }
    return updatedTransaction;
  };
}

// TODO: codeword: NOT_A_THUNK @brad-decker
function updateSwapTransaction(txId, txSwap) {
  return async () => {
    let updatedTransaction;
    try {
      updatedTransaction = await (0, _actionQueue.submitRequestToBackground)('updateSwapTransaction', [txId, txSwap]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      throw error;
    }
    return updatedTransaction;
  };
}
function updateTransaction(txMeta, dontShowLoadingIndicator) {
  return async dispatch => {
    !dontShowLoadingIndicator && dispatch(showLoadingIndication());
    try {
      await (0, _actionQueue.submitRequestToBackground)('updateTransaction', [txMeta]);
    } catch (error) {
      dispatch(updateTransactionParams(txMeta.id, txMeta.txParams));
      dispatch(hideLoadingIndication());
      dispatch(goHome());
      (0, _error.logErrorWithMessage)(error);
      throw error;
    }
    try {
      dispatch(updateTransactionParams(txMeta.id, txMeta.txParams));
      const newState = await updateMetamaskStateFromBackground();
      dispatch(updateMetamaskState(newState));
      dispatch(showConfTxPage({
        id: txMeta.id
      }));
      return txMeta;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}

/**
 * Action to create a new transaction in the controller and route to the
 * confirmation page. Returns the newly created txMeta in case additional logic
 * should be applied to the transaction after creation.
 *
 * @param method
 * @param txParams - The transaction parameters
 * @param type - The type of the transaction being added.
 * @param sendFlowHistory - The history of the send flow at time of creation.
 * @returns
 */
function addUnapprovedTransactionAndRouteToConfirmationPage(method, txParams, type, sendFlowHistory) {
  return async dispatch => {
    const actionId = (0, _actionQueue.generateActionId)();
    try {
      _loglevel.default.debug('background.addUnapprovedTransaction');
      const txMeta = await (0, _actionQueue.submitRequestToBackground)('addUnapprovedTransaction', [method, txParams, _app.ORIGIN_METAMASK, type, sendFlowHistory, actionId], actionId);
      dispatch(showConfTxPage());
      return txMeta;
    } catch (error) {
      dispatch(hideLoadingIndication());
      dispatch(displayWarning(error));
    }
    return null;
  };
}

/**
 * Wrapper around the promisifedBackground to create a new unapproved
 * transaction in the background and return the newly created txMeta.
 * This method does not show errors or route to a confirmation page and is
 * used primarily for swaps functionality.
 *
 * @param method
 * @param txParams - the transaction parameters
 * @param type - The type of the transaction being added.
 * @returns
 */
async function addUnapprovedTransaction(method, txParams, type) {
  _loglevel.default.debug('background.addUnapprovedTransaction');
  const actionId = (0, _actionQueue.generateActionId)();
  const txMeta = await (0, _actionQueue.submitRequestToBackground)('addUnapprovedTransaction', [method, txParams, _app.ORIGIN_METAMASK, type, undefined, actionId], actionId);
  return txMeta;
}
function updateAndApproveTx(txMeta, dontShowLoadingIndicator) {
  return dispatch => {
    !dontShowLoadingIndicator && dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      const actionId = (0, _actionQueue.generateActionId)();
      (0, _actionQueue.callBackgroundMethod)('updateAndApproveTransaction', [txMeta, actionId], err => {
        dispatch(updateTransactionParams(txMeta.id, txMeta.txParams));
        dispatch((0, _send.resetSendState)());
        if (err) {
          dispatch(goHome());
          (0, _error.logErrorWithMessage)(err);
          reject(err);
          return;
        }
        resolve(txMeta);
      });
    }).then(() => updateMetamaskStateFromBackground()).then(newState => dispatch(updateMetamaskState(newState))).then(() => {
      dispatch((0, _send.resetSendState)());
      dispatch(completedTx(txMeta.id));
      dispatch(hideLoadingIndication());
      dispatch(updateCustomNonce(''));
      dispatch(closeCurrentNotificationWindow());
      return txMeta;
    }).catch(err => {
      dispatch(hideLoadingIndication());
      return Promise.reject(err);
    });
  };
}
async function getTransactions(filters = {}) {
  return await (0, _actionQueue.submitRequestToBackground)('getTransactions', [filters]);
}
function completedTx(txId) {
  return dispatch => {
    dispatch({
      type: actionConstants.COMPLETED_TX,
      value: {
        id: txId
      }
    });
  };
}
function updateTransactionParams(txId, txParams) {
  return {
    type: actionConstants.UPDATE_TRANSACTION_PARAMS,
    id: txId,
    value: txParams
  };
}
function cancelMsg(msgData) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('cancelMessage', [msgData.id]);
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.id));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}

/**
 * Cancels all of the given messages
 *
 * @param msgDataList - a list of msg data objects
 * @returns
 */
function cancelMsgs(msgDataList) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      const msgIds = msgDataList.map(({
        id
      }) => id);
      const cancellations = msgDataList.map(({
        id,
        type
      }) => new Promise((resolve, reject) => {
        switch (type) {
          case _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA:
            (0, _actionQueue.callBackgroundMethod)('cancelTypedMessage', [id], err => {
              if (err) {
                reject(err);
                return;
              }
              resolve();
            });
            return;
          case _app.MESSAGE_TYPE.PERSONAL_SIGN:
            (0, _actionQueue.callBackgroundMethod)('cancelPersonalMessage', [id], err => {
              if (err) {
                reject(err);
                return;
              }
              resolve();
            });
            return;
          case _app.MESSAGE_TYPE.ETH_DECRYPT:
            (0, _actionQueue.callBackgroundMethod)('cancelDecryptMessage', [id], err => {
              if (err) {
                reject(err);
                return;
              }
              resolve();
            });
            return;
          case _app.MESSAGE_TYPE.ETH_GET_ENCRYPTION_PUBLIC_KEY:
            (0, _actionQueue.callBackgroundMethod)('cancelEncryptionPublicKey', [id], err => {
              if (err) {
                reject(err);
                return;
              }
              resolve();
            });
            return;
          case _app.MESSAGE_TYPE.ETH_SIGN:
            (0, _actionQueue.callBackgroundMethod)('cancelMessage', [id], err => {
              if (err) {
                reject(err);
                return;
              }
              resolve();
            });
            return;
          default:
            reject(new Error(`MetaMask Message Signature: Unknown message type: ${id}`));
        }
      }));
      await Promise.all(cancellations);
      const newState = await updateMetamaskStateFromBackground();
      dispatch(updateMetamaskState(newState));
      msgIds.forEach(id => {
        dispatch(completedTx(id));
      });
    } catch (err) {
      (0, _error.logErrorWithMessage)(err);
    } finally {
      if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_NOTIFICATION) {
        closeNotificationPopup();
      } else {
        dispatch(hideLoadingIndication());
      }
    }
  };
}
function cancelPersonalMsg(msgData) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('cancelPersonalMessage', [msgData.id]);
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.id));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}
function cancelDecryptMsg(msgData) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('cancelDecryptMessage', [msgData.id]);
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.id));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}
function cancelEncryptionPublicKeyMsg(msgData) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('cancelEncryptionPublicKey', [msgData.id]);
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.id));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}
function cancelTypedMsg(msgData) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    let newState;
    try {
      newState = await (0, _actionQueue.submitRequestToBackground)('cancelTypedMessage', [msgData.id]);
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(updateMetamaskState(newState));
    dispatch(completedTx(msgData.id));
    dispatch(closeCurrentNotificationWindow());
    return msgData;
  };
}
function cancelTx(txMeta, _showLoadingIndication = true) {
  return dispatch => {
    _showLoadingIndication && dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      const actionId = (0, _actionQueue.generateActionId)();
      (0, _actionQueue.callBackgroundMethod)('cancelTransaction', [txMeta.id, actionId], error => {
        if (error) {
          reject(error);
          return;
        }
        resolve();
      });
    }).then(() => updateMetamaskStateFromBackground()).then(newState => dispatch(updateMetamaskState(newState))).then(() => {
      dispatch((0, _send.resetSendState)());
      dispatch(completedTx(txMeta.id));
      dispatch(hideLoadingIndication());
      dispatch(closeCurrentNotificationWindow());
      return txMeta;
    }).catch(error => {
      dispatch(hideLoadingIndication());
      throw error;
    });
  };
}

/**
 * Cancels all of the given transactions
 *
 * @param txMetaList
 * @returns
 */
function cancelTxs(txMetaList) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      const txIds = txMetaList.map(({
        id
      }) => id);
      const cancellations = txIds.map(id => new Promise((resolve, reject) => {
        const actionId = (0, _actionQueue.generateActionId)();
        (0, _actionQueue.callBackgroundMethod)('cancelTransaction', [id, actionId], err => {
          if (err) {
            reject(err);
            return;
          }
          resolve();
        });
      }));
      await Promise.all(cancellations);
      const newState = await updateMetamaskStateFromBackground();
      dispatch(updateMetamaskState(newState));
      dispatch((0, _send.resetSendState)());
      txIds.forEach(id => {
        dispatch(completedTx(id));
      });
    } finally {
      if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_NOTIFICATION) {
        closeNotificationPopup();
      } else {
        dispatch(hideLoadingIndication());
      }
    }
  };
}
function markPasswordForgotten() {
  return async dispatch => {
    try {
      await new Promise((resolve, reject) => {
        (0, _actionQueue.callBackgroundMethod)('markPasswordForgotten', [], error => {
          if (error) {
            reject(error);
            return;
          }
          resolve();
        });
      });
    } finally {
      // TODO: handle errors
      dispatch(hideLoadingIndication());
      await forceUpdateMetamaskState(dispatch);
    }
  };
}
function unMarkPasswordForgotten() {
  return dispatch => {
    return new Promise(resolve => {
      (0, _actionQueue.callBackgroundMethod)('unMarkPasswordForgotten', [], () => {
        resolve();
      });
    }).then(() => forceUpdateMetamaskState(dispatch));
  };
}
function closeWelcomeScreen() {
  return {
    type: actionConstants.CLOSE_WELCOME_SCREEN
  };
}

//
// unlock screen
//

function unlockInProgress() {
  return {
    type: actionConstants.UNLOCK_IN_PROGRESS
  };
}
function unlockFailed(message) {
  return {
    type: actionConstants.UNLOCK_FAILED,
    value: message
  };
}
function unlockSucceeded(message) {
  return {
    type: actionConstants.UNLOCK_SUCCEEDED,
    value: message
  };
}
function updateMetamaskState(newState) {
  return (dispatch, getState) => {
    var _newState$addressBook, _currentState$address;
    const state = getState();
    const providerConfig = (0, _metamask.getProviderConfig)(state);
    const {
      metamask: currentState
    } = state;
    const {
      currentLocale,
      selectedAddress
    } = currentState;
    const {
      currentLocale: newLocale,
      selectedAddress: newSelectedAddress,
      providerConfig: newProviderConfig
    } = newState;
    if (currentLocale && newLocale && currentLocale !== newLocale) {
      dispatch(updateCurrentLocale(newLocale));
    }
    if (selectedAddress !== newSelectedAddress) {
      dispatch({
        type: actionConstants.SELECTED_ADDRESS_CHANGED
      });
    }
    const newAddressBook = ((_newState$addressBook = newState.addressBook) === null || _newState$addressBook === void 0 ? void 0 : _newState$addressBook[newProviderConfig === null || newProviderConfig === void 0 ? void 0 : newProviderConfig.chainId]) ?? {};
    const oldAddressBook = ((_currentState$address = currentState.addressBook) === null || _currentState$address === void 0 ? void 0 : _currentState$address[providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.chainId]) ?? {};
    const newAccounts = (0, _selectors.getMetaMaskAccounts)({
      metamask: newState
    });
    const oldAccounts = (0, _selectors.getMetaMaskAccounts)({
      metamask: currentState
    });
    const newSelectedAccount = newAccounts[newSelectedAddress];
    const oldSelectedAccount = newAccounts[selectedAddress];
    // dispatch an ACCOUNT_CHANGED for any account whose balance or other
    // properties changed in this update
    Object.entries(oldAccounts).forEach(([address, oldAccount]) => {
      if (!(0, _lodash.isEqual)(oldAccount, newAccounts[address])) {
        dispatch({
          type: actionConstants.ACCOUNT_CHANGED,
          payload: {
            account: newAccounts[address]
          }
        });
      }
    });
    // Also emit an event for the selected account changing, either due to a
    // property update or if the entire account changes.
    if ((0, _lodash.isEqual)(oldSelectedAccount, newSelectedAccount) === false) {
      dispatch({
        type: actionConstants.SELECTED_ACCOUNT_CHANGED,
        payload: {
          account: newSelectedAccount
        }
      });
    }
    // We need to keep track of changing address book entries
    if ((0, _lodash.isEqual)(oldAddressBook, newAddressBook) === false) {
      dispatch({
        type: actionConstants.ADDRESS_BOOK_UPDATED,
        payload: {
          addressBook: newAddressBook
        }
      });
    }

    // track when gasFeeEstimates change
    if ((0, _lodash.isEqual)(currentState.gasFeeEstimates, newState.gasFeeEstimates) === false) {
      dispatch({
        type: actionConstants.GAS_FEE_ESTIMATES_UPDATED,
        payload: {
          gasFeeEstimates: newState.gasFeeEstimates,
          gasEstimateType: newState.gasEstimateType
        }
      });
    }
    dispatch({
      type: actionConstants.UPDATE_METAMASK_STATE,
      value: newState
    });
    if (providerConfig.chainId !== newProviderConfig.chainId) {
      dispatch({
        type: actionConstants.CHAIN_CHANGED,
        payload: newProviderConfig.chainId
      });
      // We dispatch this action to ensure that the send state stays up to date
      // after the chain changes. This async thunk will fail gracefully in the
      // event that we are not yet on the send flow with a draftTransaction in
      // progress.

      dispatch((0, _send.initializeSendState)({
        chainHasChanged: true
      }));
    }
  };
}
const backgroundSetLocked = () => {
  return new Promise((resolve, reject) => {
    (0, _actionQueue.callBackgroundMethod)('setLocked', [], error => {
      if (error) {
        reject(error);
        return;
      }
      resolve();
    });
  });
};
function lockMetamask() {
  _loglevel.default.debug(`background.setLocked`);
  return dispatch => {
    dispatch(showLoadingIndication());
    return backgroundSetLocked().then(() => updateMetamaskStateFromBackground()).catch(error => {
      dispatch(displayWarning(error.message));
      return Promise.reject(error);
    }).then(newState => {
      dispatch(updateMetamaskState(newState));
      dispatch(hideLoadingIndication());
      dispatch({
        type: actionConstants.LOCK_METAMASK
      });
    }).catch(() => {
      dispatch(hideLoadingIndication());
      dispatch({
        type: actionConstants.LOCK_METAMASK
      });
    });
  };
}
async function _setSelectedAddress(address) {
  _loglevel.default.debug(`background.setSelectedAddress`);
  await (0, _actionQueue.submitRequestToBackground)('setSelectedAddress', [address]);
}
function setSelectedAddress(address) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setSelectedAddress`);
    try {
      await _setSelectedAddress(address);
    } catch (error) {
      dispatch(displayWarning(error));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function setSelectedAccount(address) {
  return async (dispatch, getState) => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setSelectedAddress`);
    const state = getState();
    const unconnectedAccountAccountAlertIsEnabled = (0, _metamask.getUnconnectedAccountAlertEnabledness)(state);
    const activeTabOrigin = state.activeTab.origin;
    const selectedAddress = (0, _selectors.getSelectedAddress)(state);
    const permittedAccountsForCurrentTab = (0, _selectors.getPermittedAccountsForCurrentTab)(state);
    const currentTabIsConnectedToPreviousAddress = Boolean(activeTabOrigin) && permittedAccountsForCurrentTab.includes(selectedAddress);
    const currentTabIsConnectedToNextAddress = Boolean(activeTabOrigin) && permittedAccountsForCurrentTab.includes(address);
    const switchingToUnconnectedAddress = currentTabIsConnectedToPreviousAddress && !currentTabIsConnectedToNextAddress;
    try {
      await _setSelectedAddress(address);
      await forceUpdateMetamaskState(dispatch);
    } catch (error) {
      dispatch(displayWarning(error));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }
    if (unconnectedAccountAccountAlertIsEnabled && switchingToUnconnectedAddress) {
      dispatch((0, _unconnectedAccount.switchedToUnconnectedAccount)());
      await setUnconnectedAccountAlertShown(activeTabOrigin);
    }
  };
}
function addPermittedAccount(origin, address) {
  return async dispatch => {
    await new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('addPermittedAccount', [origin, address], error => {
        if (error) {
          reject(error);
          return;
        }
        resolve();
      });
    });
    await forceUpdateMetamaskState(dispatch);
  };
}
function removePermittedAccount(origin, address) {
  return async dispatch => {
    await new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('removePermittedAccount', [origin, address], error => {
        if (error) {
          reject(error);
          return;
        }
        resolve();
      });
    });
    await forceUpdateMetamaskState(dispatch);
  };
}
function showAccountsPage() {
  return {
    type: actionConstants.SHOW_ACCOUNTS_PAGE
  };
}
function showConfTxPage({
  id
} = {}) {
  return {
    type: actionConstants.SHOW_CONF_TX_PAGE,
    id
  };
}
function addToken(address, symbol, decimals, image, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot add token without address');
    }
    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }
    try {
      await (0, _actionQueue.submitRequestToBackground)('addToken', [address, symbol, decimals, image]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}

/**
 * To add the tokens user selected to state
 *
 * @param tokensToImport
 */
function addImportedTokens(tokensToImport) {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('addImportedTokens', [tokensToImport]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
    } finally {
      await forceUpdateMetamaskState(dispatch);
    }
  };
}

/**
 * To add ignored token addresses to state
 *
 * @param options
 * @param options.tokensToIgnore
 * @param options.dontShowLoadingIndicator
 */
function ignoreTokens({
  tokensToIgnore,
  dontShowLoadingIndicator = false
}) {
  const _tokensToIgnore = Array.isArray(tokensToIgnore) ? tokensToIgnore : [tokensToIgnore];
  return async dispatch => {
    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }
    try {
      await (0, _actionQueue.submitRequestToBackground)('ignoreTokens', [_tokensToIgnore]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}

/**
 * To fetch the ERC20 tokens with non-zero balance in a single call
 *
 * @param tokens
 */
async function getBalancesInSingleCall(tokens) {
  return await (0, _actionQueue.submitRequestToBackground)('getBalancesInSingleCall', [tokens]);
}
function addNft(address, tokenID, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot add NFT without address');
    }
    if (!tokenID) {
      throw new Error('MetaMask - Cannot add NFT without tokenID');
    }
    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }
    try {
      await (0, _actionQueue.submitRequestToBackground)('addNft', [address, tokenID]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}
function addNftVerifyOwnership(address, tokenID, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot add NFT without address');
    }
    if (!tokenID) {
      throw new Error('MetaMask - Cannot add NFT without tokenID');
    }
    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }
    try {
      await (0, _actionQueue.submitRequestToBackground)('addNftVerifyOwnership', [address, tokenID]);
    } catch (error) {
      if ((0, _error.isErrorWithMessage)(error) && (error.message.includes('This NFT is not owned by the user') || error.message.includes('Unable to verify ownership'))) {
        throw error;
      } else {
        (0, _error.logErrorWithMessage)(error);
        dispatch(displayWarning(error));
      }
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}
function removeAndIgnoreNft(address, tokenID, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot ignore NFT without address');
    }
    if (!tokenID) {
      throw new Error('MetaMask - Cannot ignore NFT without tokenID');
    }
    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }
    try {
      await (0, _actionQueue.submitRequestToBackground)('removeAndIgnoreNft', [address, tokenID]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}
function removeNft(address, tokenID, dontShowLoadingIndicator) {
  return async dispatch => {
    if (!address) {
      throw new Error('MetaMask - Cannot remove NFT without address');
    }
    if (!tokenID) {
      throw new Error('MetaMask - Cannot remove NFT without tokenID');
    }
    if (!dontShowLoadingIndicator) {
      dispatch(showLoadingIndication());
    }
    try {
      await (0, _actionQueue.submitRequestToBackground)('removeNft', [address, tokenID]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
    } finally {
      await forceUpdateMetamaskState(dispatch);
      dispatch(hideLoadingIndication());
    }
  };
}
async function checkAndUpdateAllNftsOwnershipStatus() {
  await (0, _actionQueue.submitRequestToBackground)('checkAndUpdateAllNftsOwnershipStatus');
}
async function isNftOwner(ownerAddress, nftAddress, nftId) {
  return await (0, _actionQueue.submitRequestToBackground)('isNftOwner', [ownerAddress, nftAddress, nftId]);
}
async function checkAndUpdateSingleNftOwnershipStatus(nft) {
  await (0, _actionQueue.submitRequestToBackground)('checkAndUpdateSingleNftOwnershipStatus', [nft, false]);
}
// When we upgrade to TypeScript 4.5 this is part of the language. It will get
// the underlying type of a Promise generic type. So Awaited<Promise<void>> is
// void.

async function getTokenStandardAndDetails(address, userAddress, tokenId) {
  return await (0, _actionQueue.submitRequestToBackground)('getTokenStandardAndDetails', [address, userAddress, tokenId]);
}
function addTokens(tokens) {
  return dispatch => {
    if (Array.isArray(tokens)) {
      return Promise.all(tokens.map(({
        address,
        symbol,
        decimals
      }) => dispatch(addToken(address, symbol, decimals))));
    }
    return Promise.all(Object.entries(tokens).map(([_, {
      address,
      symbol,
      decimals
    }]) => dispatch(addToken(address, symbol, decimals))));
  };
}
function rejectWatchAsset(suggestedAssetID) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      await (0, _actionQueue.submitRequestToBackground)('rejectWatchAsset', [suggestedAssetID]);
      await forceUpdateMetamaskState(dispatch);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(closeCurrentNotificationWindow());
  };
}
function acceptWatchAsset(suggestedAssetID) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      await (0, _actionQueue.submitRequestToBackground)('acceptWatchAsset', [suggestedAssetID]);
      await forceUpdateMetamaskState(dispatch);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning(error));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }
    dispatch(closeCurrentNotificationWindow());
  };
}
function clearPendingTokens() {
  return {
    type: actionConstants.CLEAR_PENDING_TOKENS
  };
}
function createCancelTransaction(txId, customGasSettings, options = {}) {
  _loglevel.default.debug('background.cancelTransaction');
  let newTxId;
  return dispatch => {
    const actionId = (0, _actionQueue.generateActionId)();
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('createCancelTransaction', [txId, customGasSettings, {
        ...options,
        actionId
      }], (err, newState) => {
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        if (newState) {
          const {
            currentNetworkTxList
          } = newState;
          const {
            id
          } = currentNetworkTxList[currentNetworkTxList.length - 1];
          newTxId = id;
          resolve(newState);
        }
      }, actionId);
    }).then(newState => dispatch(updateMetamaskState(newState))).then(() => newTxId);
  };
}
function createSpeedUpTransaction(txId, customGasSettings, options = {}) {
  _loglevel.default.debug('background.createSpeedUpTransaction');
  let newTx;
  return dispatch => {
    const actionId = (0, _actionQueue.generateActionId)();
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('createSpeedUpTransaction', [txId, customGasSettings, {
        ...options,
        actionId
      }], (err, newState) => {
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        if (newState) {
          const {
            currentNetworkTxList
          } = newState;
          newTx = currentNetworkTxList[currentNetworkTxList.length - 1];
          resolve(newState);
        }
      }, actionId);
    }).then(newState => dispatch(updateMetamaskState(newState))).then(() => newTx);
  };
}
function createRetryTransaction(txId, customGasSettings) {
  let newTx;
  return dispatch => {
    return new Promise((resolve, reject) => {
      const actionId = (0, _actionQueue.generateActionId)();
      (0, _actionQueue.callBackgroundMethod)('createSpeedUpTransaction', [txId, customGasSettings, {
        actionId
      }], (err, newState) => {
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        if (newState) {
          const {
            currentNetworkTxList
          } = newState;
          newTx = currentNetworkTxList[currentNetworkTxList.length - 1];
          resolve(newState);
        }
      });
    }).then(newState => dispatch(updateMetamaskState(newState))).then(() => newTx);
  };
}

//
// config
//

function setProviderType(type) {
  return async dispatch => {
    _loglevel.default.debug(`background.setProviderType`, type);
    try {
      await (0, _actionQueue.submitRequestToBackground)('setProviderType', [type]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning('Had a problem changing networks!'));
    }
  };
}
function upsertNetworkConfiguration({
  rpcUrl,
  chainId,
  nickname,
  rpcPrefs,
  ticker = _common.EtherDenomination.ETH
}, {
  setActive,
  source
}) {
  return async dispatch => {
    _loglevel.default.debug(`background.upsertNetworkConfiguration: ${rpcUrl} ${chainId} ${ticker} ${nickname}`);
    let networkConfigurationId;
    try {
      networkConfigurationId = await (0, _actionQueue.submitRequestToBackground)('upsertNetworkConfiguration', [{
        rpcUrl,
        chainId,
        ticker,
        nickname: nickname || rpcUrl,
        rpcPrefs
      }, {
        setActive,
        source,
        referrer: _app.ORIGIN_METAMASK
      }]);
    } catch (error) {
      _loglevel.default.error(error);
      dispatch(displayWarning('Had a problem adding network!'));
    }
    return networkConfigurationId;
  };
}
function editAndSetNetworkConfiguration({
  networkConfigurationId,
  rpcUrl,
  chainId,
  nickname,
  rpcPrefs,
  ticker = _common.EtherDenomination.ETH
}, {
  source
}) {
  return async dispatch => {
    _loglevel.default.debug(`background.removeNetworkConfiguration: ${networkConfigurationId}`);
    try {
      await (0, _actionQueue.submitRequestToBackground)('removeNetworkConfiguration', [networkConfigurationId]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning('Had a problem removing network!'));
      return;
    }
    try {
      await (0, _actionQueue.submitRequestToBackground)('upsertNetworkConfiguration', [{
        rpcUrl,
        chainId,
        ticker,
        nickname: nickname || rpcUrl,
        rpcPrefs
      }, {
        setActive: true,
        referrer: _app.ORIGIN_METAMASK,
        source
      }]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning('Had a problem changing networks!'));
    }
  };
}
function setActiveNetwork(networkConfigurationId) {
  return async dispatch => {
    _loglevel.default.debug(`background.setActiveNetwork: ${networkConfigurationId}`);
    try {
      await (0, _actionQueue.submitRequestToBackground)('setActiveNetwork', [networkConfigurationId]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning('Had a problem changing networks!'));
    }
  };
}
function rollbackToPreviousProvider() {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('rollbackToPreviousProvider');
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning('Had a problem changing networks!'));
    }
  };
}
function removeNetworkConfiguration(networkConfigurationId) {
  return dispatch => {
    _loglevel.default.debug(`background.removeNetworkConfiguration: ${networkConfigurationId}`);
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('removeNetworkConfiguration', [networkConfigurationId], err => {
        if (err) {
          (0, _error.logErrorWithMessage)(err);
          dispatch(displayWarning('Had a problem removing network!'));
          reject(err);
          return;
        }
        resolve();
      });
    });
  };
}

// Calls the addressBookController to add a new address.
function addToAddressBook(recipient, nickname = '', memo = '') {
  _loglevel.default.debug(`background.addToAddressBook`);
  return async (dispatch, getState) => {
    const {
      chainId
    } = (0, _metamask.getProviderConfig)(getState());
    let set;
    try {
      set = await (0, _actionQueue.submitRequestToBackground)('setAddressBook', [(0, _hexstringUtils.toChecksumHexAddress)(recipient), nickname, chainId, memo]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning('Address book failed to update'));
      throw error;
    }
    if (!set) {
      dispatch(displayWarning('Address book failed to update'));
    }
  };
}

/**
 * @description Calls the addressBookController to remove an existing address.
 * @param chainId
 * @param addressToRemove - Address of the entry to remove from the address book
 */
function removeFromAddressBook(chainId, addressToRemove) {
  _loglevel.default.debug(`background.removeFromAddressBook`);
  return async () => {
    await (0, _actionQueue.submitRequestToBackground)('removeFromAddressBook', [chainId, (0, _hexstringUtils.toChecksumHexAddress)(addressToRemove)]);
  };
}
function showNetworkDropdown() {
  return {
    type: actionConstants.NETWORK_DROPDOWN_OPEN
  };
}
function hideNetworkDropdown() {
  return {
    type: actionConstants.NETWORK_DROPDOWN_CLOSE
  };
}
function showModal(payload) {
  return {
    type: actionConstants.MODAL_OPEN,
    payload
  };
}
function hideModal() {
  return {
    type: actionConstants.MODAL_CLOSE
  };
}
function closeCurrentNotificationWindow() {
  return (_, getState) => {
    if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_NOTIFICATION && !(0, _selectors.hasTransactionPendingApprovals)(getState())) {
      closeNotificationPopup();
    }
  };
}
function showAlert(msg) {
  return {
    type: actionConstants.ALERT_OPEN,
    payload: msg
  };
}
function hideAlert() {
  return {
    type: actionConstants.ALERT_CLOSE
  };
}

/**
 * TODO: this should be moved somewhere else when it makese sense to do so
 */

function updateNftDropDownState(value) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('updateNftDropDownState', [value]);
    await forceUpdateMetamaskState(dispatch);
  };
}
/**
 * This action will receive two types of values via qrCodeData
 * an object with the following structure {type, values}
 * or null (used to clear the previous value)
 *
 * @param qrCodeData
 */
function qrCodeDetected(qrCodeData) {
  return async dispatch => {
    await dispatch({
      type: actionConstants.QR_CODE_DETECTED,
      value: qrCodeData
    });

    // If on the send page, the send slice will listen for the QR_CODE_DETECTED
    // action and update its state. Address changes need to recompute gasLimit
    // so we fire this method so that the send page gasLimit can be recomputed
    dispatch((0, _send.computeEstimatedGasLimit)());
  };
}
function showLoadingIndication(message) {
  return {
    type: actionConstants.SHOW_LOADING,
    payload: message
  };
}
function setHardwareWalletDefaultHdPath({
  device,
  path
}) {
  return {
    type: actionConstants.SET_HARDWARE_WALLET_DEFAULT_HD_PATH,
    payload: {
      device,
      path
    }
  };
}
function hideLoadingIndication() {
  return {
    type: actionConstants.HIDE_LOADING
  };
}
function displayWarning(payload) {
  if ((0, _error.isErrorWithMessage)(payload)) {
    return {
      type: actionConstants.DISPLAY_WARNING,
      payload: payload.message
    };
  } else if (typeof payload === 'string') {
    return {
      type: actionConstants.DISPLAY_WARNING,
      payload
    };
  }
  return {
    type: actionConstants.DISPLAY_WARNING,
    payload: `${payload}`
  };
}
function hideWarning() {
  return {
    type: actionConstants.HIDE_WARNING
  };
}
function exportAccount(password, address) {
  return function (dispatch) {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.verifyPassword`);
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('verifyPassword', [password], function (err) {
        if (err) {
          _loglevel.default.error('Error in verifying password.');
          dispatch(hideLoadingIndication());
          dispatch(displayWarning('Incorrect Password.'));
          reject(err);
          return;
        }
        _loglevel.default.debug(`background.exportAccount`);
        (0, _actionQueue.callBackgroundMethod)('exportAccount', [address, password], function (err2, result) {
          dispatch(hideLoadingIndication());
          if (err2) {
            (0, _error.logErrorWithMessage)(err2);
            dispatch(displayWarning('Had a problem exporting the account.'));
            reject(err2);
            return;
          }
          dispatch(showPrivateKey(result));
          resolve(result);
        });
      });
    });
  };
}
function exportAccounts(password, addresses) {
  return function (dispatch) {
    _loglevel.default.debug(`background.verifyPassword`);
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('verifyPassword', [password], function (err) {
        if (err) {
          _loglevel.default.error('Error in submitting password.');
          reject(err);
          return;
        }
        _loglevel.default.debug(`background.exportAccounts`);
        const accountPromises = addresses.map(address => new Promise((resolve2, reject2) => (0, _actionQueue.callBackgroundMethod)('exportAccount', [address, password], function (err2, result) {
          if (err2) {
            (0, _error.logErrorWithMessage)(err2);
            dispatch(displayWarning('Had a problem exporting the account.'));
            reject2(err2);
            return;
          }
          resolve2(result);
        })));
        resolve(Promise.all(accountPromises));
      });
    });
  };
}
function showPrivateKey(key) {
  return {
    type: actionConstants.SHOW_PRIVATE_KEY,
    payload: key
  };
}
function setAccountLabel(account, label) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setAccountLabel`);
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setAccountLabel', [account, label], err => {
        dispatch(hideLoadingIndication());
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        dispatch({
          type: actionConstants.SET_ACCOUNT_LABEL,
          value: {
            account,
            label
          }
        });
        resolve(account);
      });
    });
  };
}
function clearAccountDetails() {
  return {
    type: actionConstants.CLEAR_ACCOUNT_DETAILS
  };
}
function showSendTokenPage() {
  return {
    type: actionConstants.SHOW_SEND_TOKEN_PAGE
  };
}

// TODO: Lift to shared folder when it makes sense

function setFeatureFlag(feature, activated, notificationType) {
  return dispatch => {
    dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setFeatureFlag', [feature, activated], (err, updatedFeatureFlags) => {
        dispatch(hideLoadingIndication());
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        notificationType && dispatch(showModal({
          name: notificationType
        }));
        resolve(updatedFeatureFlags);
      });
    });
  };
}
function setPreference(preference, value) {
  return dispatch => {
    dispatch(showLoadingIndication());
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setPreference', [preference, value], (err, updatedPreferences) => {
        dispatch(hideLoadingIndication());
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        resolve(updatedPreferences);
      });
    });
  };
}
function setDefaultHomeActiveTabName(value) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setDefaultHomeActiveTabName', [value]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setUseNativeCurrencyAsPrimaryCurrencyPreference(value) {
  return setPreference('useNativeCurrencyAsPrimaryCurrency', value);
}
function setHideZeroBalanceTokens(value) {
  return setPreference('hideZeroBalanceTokens', value);
}
function setShowFiatConversionOnTestnetsPreference(value) {
  return setPreference('showFiatInTestnets', value);
}
function setShowTestNetworks(value) {
  return setPreference('showTestNetworks', value);
}
function setAutoLockTimeLimit(value) {
  return setPreference('autoLockTimeLimit', value);
}
function setCompletedOnboarding() {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      await (0, _actionQueue.submitRequestToBackground)('completeOnboarding');
      dispatch(completeOnboarding());
    } catch (err) {
      dispatch(displayWarning(err));
      throw err;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function completeOnboarding() {
  return {
    type: actionConstants.COMPLETE_ONBOARDING
  };
}
function setMouseUserState(isMouseUser) {
  return {
    type: actionConstants.SET_MOUSE_USER_STATE,
    payload: isMouseUser
  };
}
async function forceUpdateMetamaskState(dispatch) {
  _loglevel.default.debug(`background.getState`);
  let newState;
  try {
    newState = await (0, _actionQueue.submitRequestToBackground)('getState');
  } catch (error) {
    dispatch(displayWarning(error));
    throw error;
  }
  dispatch(updateMetamaskState(newState));
  return newState;
}
function toggleAccountMenu() {
  return {
    type: actionConstants.TOGGLE_ACCOUNT_MENU
  };
}
function toggleNetworkMenu() {
  return {
    type: actionConstants.TOGGLE_NETWORK_MENU
  };
}
function setAccountDetailsAddress(address) {
  return {
    type: actionConstants.SET_ACCOUNT_DETAILS_ADDRESS,
    payload: address
  };
}
function setParticipateInMetaMetrics(participationPreference) {
  return dispatch => {
    _loglevel.default.debug(`background.setParticipateInMetaMetrics`);
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setParticipateInMetaMetrics', [participationPreference], (err, metaMetricsId) => {
        _loglevel.default.debug(err);
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        dispatch({
          type: actionConstants.SET_PARTICIPATE_IN_METAMETRICS,
          value: participationPreference
        });
        resolve([participationPreference, metaMetricsId]);
      });
    });
  };
}
function setUseBlockie(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setUseBlockie`);
    (0, _actionQueue.callBackgroundMethod)('setUseBlockie', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setUseNonceField(val) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setUseNonceField`);
    try {
      await (0, _actionQueue.submitRequestToBackground)('setUseNonceField', [val]);
    } catch (error) {
      dispatch(displayWarning(error));
    }
    dispatch(hideLoadingIndication());
  };
}
function setUsePhishDetect(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setUsePhishDetect`);
    (0, _actionQueue.callBackgroundMethod)('setUsePhishDetect', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setUseMultiAccountBalanceChecker(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setUseMultiAccountBalanceChecker`);
    (0, _actionQueue.callBackgroundMethod)('setUseMultiAccountBalanceChecker', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setUseTokenDetection(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setUseTokenDetection`);
    (0, _actionQueue.callBackgroundMethod)('setUseTokenDetection', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setUseNftDetection(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setUseNftDetection`);
    (0, _actionQueue.callBackgroundMethod)('setUseNftDetection', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setUseCurrencyRateCheck(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setUseCurrencyRateCheck`);
    (0, _actionQueue.callBackgroundMethod)('setUseCurrencyRateCheck', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setOpenSeaEnabled(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setOpenSeaEnabled`);
    (0, _actionQueue.callBackgroundMethod)('setOpenSeaEnabled', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function detectNfts() {
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.detectNfts`);
    await (0, _actionQueue.submitRequestToBackground)('detectNfts');
    dispatch(hideLoadingIndication());
    await forceUpdateMetamaskState(dispatch);
  };
}
function setAdvancedGasFee(val) {
  return dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setAdvancedGasFee`);
    (0, _actionQueue.callBackgroundMethod)('setAdvancedGasFee', [val], err => {
      dispatch(hideLoadingIndication());
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setTheme(val) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    _loglevel.default.debug(`background.setTheme`);
    try {
      await (0, _actionQueue.submitRequestToBackground)('setTheme', [val]);
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function setIpfsGateway(val) {
  return dispatch => {
    _loglevel.default.debug(`background.setIpfsGateway`);
    (0, _actionQueue.callBackgroundMethod)('setIpfsGateway', [val], err => {
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function updateCurrentLocale(key) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    try {
      await (0, _i18nHelper.loadRelativeTimeFormatLocaleData)(key);
      const localeMessages = await (0, _i18nHelper.fetchLocale)(key);
      const textDirection = await (0, _actionQueue.submitRequestToBackground)('setCurrentLocale', [key]);
      await (0, _switchDirection.default)(textDirection);
      dispatch(setCurrentLocale(key, localeMessages));
    } catch (error) {
      dispatch(displayWarning(error));
      return;
    } finally {
      dispatch(hideLoadingIndication());
    }
  };
}
function setCurrentLocale(locale, messages) {
  return {
    type: actionConstants.SET_CURRENT_LOCALE,
    payload: {
      locale,
      messages
    }
  };
}
function setPendingTokens(pendingTokens) {
  const {
    customToken,
    selectedTokens = {},
    tokenAddressList = []
  } = pendingTokens;
  const tokens = customToken !== null && customToken !== void 0 && customToken.address && customToken !== null && customToken !== void 0 && customToken.symbol && Boolean((customToken === null || customToken === void 0 ? void 0 : customToken.decimals) >= 0 && (customToken === null || customToken === void 0 ? void 0 : customToken.decimals) <= 36) ? {
    ...selectedTokens,
    [customToken.address]: {
      ...customToken,
      isCustom: true
    }
  } : selectedTokens;
  Object.keys(tokens).forEach(tokenAddress => {
    tokens[tokenAddress].unlisted = !tokenAddressList.find(addr => (0, _stringUtils.isEqualCaseInsensitive)(addr, tokenAddress));
  });
  return {
    type: actionConstants.SET_PENDING_TOKENS,
    payload: tokens
  };
}

// Swaps

function setSwapsLiveness(swapsLiveness) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsLiveness', [swapsLiveness]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setSwapsFeatureFlags(featureFlags) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsFeatureFlags', [featureFlags]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function fetchAndSetQuotes(fetchParams, fetchParamsMetaData) {
  return async dispatch => {
    const [quotes, selectedAggId] = await (0, _actionQueue.submitRequestToBackground)('fetchAndSetQuotes', [fetchParams, fetchParamsMetaData]);
    await forceUpdateMetamaskState(dispatch);
    return [quotes, selectedAggId];
  };
}
function setSelectedQuoteAggId(aggId) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSelectedQuoteAggId', [aggId]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setSwapsTokens(tokens) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsTokens', [tokens]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function clearSwapsQuotes() {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('clearSwapsQuotes');
    await forceUpdateMetamaskState(dispatch);
  };
}
function resetBackgroundSwapsState() {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('resetSwapsState');
    await forceUpdateMetamaskState(dispatch);
  };
}
function setCustomApproveTxData(data) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setCustomApproveTxData', [data]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setSwapsTxGasPrice(gasPrice) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsTxGasPrice', [gasPrice]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setSwapsTxGasLimit(gasLimit) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsTxGasLimit', [gasLimit, true]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function updateCustomSwapsEIP1559GasParams({
  gasLimit,
  maxFeePerGas,
  maxPriorityFeePerGas
}) {
  return async dispatch => {
    await Promise.all([(0, _actionQueue.submitRequestToBackground)('setSwapsTxGasLimit', [gasLimit]), (0, _actionQueue.submitRequestToBackground)('setSwapsTxMaxFeePerGas', [maxFeePerGas]), (0, _actionQueue.submitRequestToBackground)('setSwapsTxMaxFeePriorityPerGas', [maxPriorityFeePerGas])]);
    await forceUpdateMetamaskState(dispatch);
  };
}

// Note that the type widening happening below will resolve when we switch gas
// constants to TypeScript, at which point we'll get better type safety.
// TODO: Remove this comment when gas constants is typescript
function updateSwapsUserFeeLevel(swapsCustomUserFeeLevel) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsUserFeeLevel', [swapsCustomUserFeeLevel]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setSwapsQuotesPollingLimitEnabled(quotesPollingLimitEnabled) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsQuotesPollingLimitEnabled', [quotesPollingLimitEnabled]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setTradeTxId(tradeTxId) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setTradeTxId', [tradeTxId]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setApproveTxId(approveTxId) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setApproveTxId', [approveTxId]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function safeRefetchQuotes() {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('safeRefetchQuotes');
    await forceUpdateMetamaskState(dispatch);
  };
}
function stopPollingForQuotes() {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('stopPollingForQuotes');
    await forceUpdateMetamaskState(dispatch);
  };
}
function setBackgroundSwapRouteState(routeState) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setBackgroundSwapRouteState', [routeState]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function resetSwapsPostFetchState() {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('resetPostFetchState');
    await forceUpdateMetamaskState(dispatch);
  };
}
function setSwapsErrorKey(errorKey) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setSwapsErrorKey', [errorKey]);
    await forceUpdateMetamaskState(dispatch);
  };
}
function setInitialGasEstimate(initialAggId) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('setInitialGasEstimate', [initialAggId]);
    await forceUpdateMetamaskState(dispatch);
  };
}

// Permissions

function requestAccountsPermissionWithId(origin) {
  return async dispatch => {
    const id = await (0, _actionQueue.submitRequestToBackground)('requestAccountsPermissionWithId', [origin]);
    await forceUpdateMetamaskState(dispatch);
    return id;
  };
}

/**
 * Approves the permissions request.
 *
 * @param request - The permissions request to approve.
 */
function approvePermissionsRequest(request) {
  return dispatch => {
    (0, _actionQueue.callBackgroundMethod)('approvePermissionsRequest', [request], err => {
      if (err) {
        dispatch(displayWarning(err));
      }
      forceUpdateMetamaskState(dispatch);
    });
  };
}

/**
 * Rejects the permissions request with the given ID.
 *
 * @param requestId - The id of the request to be rejected
 */
function rejectPermissionsRequest(requestId) {
  return dispatch => {
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('rejectPermissionsRequest', [requestId], err => {
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        forceUpdateMetamaskState(dispatch).then(resolve).catch(reject);
      });
    });
  };
}

/**
 * Clears the given permissions for the given origin.
 *
 * @param subjects
 */
function removePermissionsFor(subjects) {
  return dispatch => {
    (0, _actionQueue.callBackgroundMethod)('removePermissionsFor', [subjects], err => {
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}

// Pending Approvals

/**
 * Resolves a pending approval and closes the current notification window if no
 * further approvals are pending after the background state updates.
 *
 * @param id - The pending approval id
 * @param [value] - The value required to confirm a pending approval
 */
function resolvePendingApproval(id, value) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('resolvePendingApproval', [id, value]);
    // Before closing the current window, check if any additional confirmations
    // are added as a result of this confirmation being accepted
    const {
      pendingApprovals
    } = await forceUpdateMetamaskState(dispatch);
    if (Object.values(pendingApprovals).length === 0) {
      dispatch(closeCurrentNotificationWindow());
    }
  };
}

/**
 * Rejects a pending approval and closes the current notification window if no
 * further approvals are pending after the background state updates.
 *
 * @param id - The pending approval id
 * @param [error] - The error to throw when rejecting the approval
 */
function rejectPendingApproval(id, error) {
  return async dispatch => {
    await (0, _actionQueue.submitRequestToBackground)('rejectPendingApproval', [id, error]);
    // Before closing the current window, check if any additional confirmations
    // are added as a result of this confirmation being rejected
    const {
      pendingApprovals
    } = await forceUpdateMetamaskState(dispatch);
    if (Object.values(pendingApprovals).length === 0) {
      dispatch(closeCurrentNotificationWindow());
    }
  };
}
function setFirstTimeFlowType(type) {
  return dispatch => {
    _loglevel.default.debug(`background.setFirstTimeFlowType`);
    (0, _actionQueue.callBackgroundMethod)('setFirstTimeFlowType', [type], err => {
      if (err) {
        dispatch(displayWarning(err));
      }
    });
    dispatch({
      type: actionConstants.SET_FIRST_TIME_FLOW_TYPE,
      value: type
    });
  };
}
function setSelectedNetworkConfigurationId(networkConfigurationId) {
  return {
    type: actionConstants.SET_SELECTED_NETWORK_CONFIGURATION_ID,
    payload: networkConfigurationId
  };
}
function setNewNetworkAdded({
  networkConfigurationId,
  nickname
}) {
  return {
    type: actionConstants.SET_NEW_NETWORK_ADDED,
    payload: {
      networkConfigurationId,
      nickname
    }
  };
}
function setNewNftAddedMessage(newNftAddedMessage) {
  return {
    type: actionConstants.SET_NEW_NFT_ADDED_MESSAGE,
    payload: newNftAddedMessage
  };
}
function setRemoveNftMessage(removeNftMessage) {
  return {
    type: actionConstants.SET_REMOVE_NFT_MESSAGE,
    payload: removeNftMessage
  };
}
function setNewTokensImported(newTokensImported) {
  return {
    type: actionConstants.SET_NEW_TOKENS_IMPORTED,
    payload: newTokensImported
  };
}
function setLastActiveTime() {
  return dispatch => {
    (0, _actionQueue.callBackgroundMethod)('setLastActiveTime', [], err => {
      if (err) {
        dispatch(displayWarning(err));
      }
    });
  };
}
function setDismissSeedBackUpReminder(value) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('setDismissSeedBackUpReminder', [value]);
    dispatch(hideLoadingIndication());
  };
}
function setDisabledRpcMethodPreference(methodName, value) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('setDisabledRpcMethodPreference', [methodName, value]);
    dispatch(hideLoadingIndication());
  };
}
function getRpcMethodPreferences() {
  return async dispatch => {
    dispatch(showLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('getRpcMethodPreferences', []);
    dispatch(hideLoadingIndication());
  };
}
function setConnectedStatusPopoverHasBeenShown() {
  return () => {
    (0, _actionQueue.callBackgroundMethod)('setConnectedStatusPopoverHasBeenShown', [], err => {
      if ((0, _error.isErrorWithMessage)(err)) {
        throw new Error(err.message);
      }
    });
  };
}
function setRecoveryPhraseReminderHasBeenShown() {
  return () => {
    (0, _actionQueue.callBackgroundMethod)('setRecoveryPhraseReminderHasBeenShown', [], err => {
      if ((0, _error.isErrorWithMessage)(err)) {
        throw new Error(err.message);
      }
    });
  };
}
function setRecoveryPhraseReminderLastShown(lastShown) {
  return () => {
    (0, _actionQueue.callBackgroundMethod)('setRecoveryPhraseReminderLastShown', [lastShown], err => {
      if ((0, _error.isErrorWithMessage)(err)) {
        throw new Error(err.message);
      }
    });
  };
}
function setTermsOfUseLastAgreed(lastAgreed) {
  return async () => {
    await (0, _actionQueue.submitRequestToBackground)('setTermsOfUseLastAgreed', [lastAgreed]);
  };
}
function setOutdatedBrowserWarningLastShown(lastShown) {
  return async () => {
    await (0, _actionQueue.submitRequestToBackground)('setOutdatedBrowserWarningLastShown', [lastShown]);
  };
}
function getContractMethodData(data = '') {
  return async (dispatch, getState) => {
    const prefixedData = (0, _util.addHexPrefix)(data);
    const fourBytePrefix = prefixedData.slice(0, 10);
    if (fourBytePrefix.length < 10) {
      return {};
    }
    const {
      knownMethodData
    } = getState().metamask;
    if (knownMethodData !== null && knownMethodData !== void 0 && knownMethodData[fourBytePrefix] && Object.keys(knownMethodData[fourBytePrefix]).length !== 0) {
      return knownMethodData[fourBytePrefix];
    }
    _loglevel.default.debug(`loadingMethodData`);
    const {
      name,
      params
    } = await (0, _transactions.getMethodDataAsync)(fourBytePrefix);
    (0, _actionQueue.callBackgroundMethod)('addKnownMethodData', [fourBytePrefix, {
      name,
      params
    }], err => {
      if (err) {
        dispatch(displayWarning(err));
      }
    });
    return {
      name,
      params
    };
  };
}
function setSeedPhraseBackedUp(seedPhraseBackupState) {
  return dispatch => {
    _loglevel.default.debug(`background.setSeedPhraseBackedUp`);
    return new Promise((resolve, reject) => {
      (0, _actionQueue.callBackgroundMethod)('setSeedPhraseBackedUp', [seedPhraseBackupState], err => {
        if (err) {
          dispatch(displayWarning(err));
          reject(err);
          return;
        }
        forceUpdateMetamaskState(dispatch).then(resolve).catch(reject);
      });
    });
  };
}
function setNextNonce(nextNonce) {
  return {
    type: actionConstants.SET_NEXT_NONCE,
    payload: nextNonce
  };
}

/**
 * This function initiates the nonceLock in the background for the given
 * address, and returns the next nonce to use. It then calls setNextNonce which
 * sets the nonce in state on the nextNonce key. NOTE: The nextNonce key is
 * actually ephemeral application state. It does not appear to be part of the
 * background state.
 *
 * TODO: move this to a different slice, MetaMask slice will eventually be
 * deprecated because it should not contain any ephemeral/app state but just
 * background state. In addition we should key nextNonce by address to prevent
 * accidental usage of a stale nonce as the call to getNextNonce only works for
 * the currently selected address.
 *
 * @returns
 */
function getNextNonce() {
  return async (dispatch, getState) => {
    const address = getState().metamask.selectedAddress;
    let nextNonce;
    try {
      nextNonce = await (0, _actionQueue.submitRequestToBackground)('getNextNonce', [address]);
    } catch (error) {
      dispatch(displayWarning(error));
      throw error;
    }
    dispatch(setNextNonce(nextNonce));
    return nextNonce;
  };
}
function setRequestAccountTabIds(requestAccountTabIds) {
  return {
    type: actionConstants.SET_REQUEST_ACCOUNT_TABS,
    payload: requestAccountTabIds
  };
}
function getRequestAccountTabIds() {
  return async dispatch => {
    const requestAccountTabIds = await (0, _actionQueue.submitRequestToBackground)('getRequestAccountTabIds');
    dispatch(setRequestAccountTabIds(requestAccountTabIds));
  };
}
function setOpenMetamaskTabsIDs(openMetaMaskTabIDs) {
  return {
    type: actionConstants.SET_OPEN_METAMASK_TAB_IDS,
    payload: openMetaMaskTabIDs
  };
}
function getOpenMetamaskTabsIds() {
  return async dispatch => {
    const openMetaMaskTabIDs = await (0, _actionQueue.submitRequestToBackground)('getOpenMetamaskTabsIds');
    dispatch(setOpenMetamaskTabsIDs(openMetaMaskTabIDs));
  };
}
function setLedgerTransportPreference(value) {
  return async dispatch => {
    dispatch(showLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('setLedgerTransportPreference', [value]);
    dispatch(hideLoadingIndication());
  };
}
async function attemptLedgerTransportCreation() {
  return await (0, _actionQueue.submitRequestToBackground)('attemptLedgerTransportCreation');
}

/**
 * This method deduplicates error reports to sentry by maintaining a state
 * object 'singleExceptions' in the app slice. The only place this state object
 * is accessed from is within this method, to check if it has already seen and
 * therefore tracked this error. This is to avoid overloading sentry with lots
 * of duplicate errors.
 *
 * @param error
 * @returns
 */
function captureSingleException(error) {
  return async (dispatch, getState) => {
    const {
      singleExceptions
    } = getState().appState;
    if (!(error in singleExceptions)) {
      dispatch({
        type: actionConstants.CAPTURE_SINGLE_EXCEPTION,
        value: error
      });
      (0, _browser.captureException)(Error(error));
    }
  };
}

// Wrappers around promisifedBackground
/**
 * The "actions" below are not actions nor action creators. They cannot use
 * dispatch nor should they be dispatched when used. Instead they can be
 * called directly. These wrappers will be moved into their location at some
 * point in the future.
 */

function estimateGas(params) {
  return (0, _actionQueue.submitRequestToBackground)('estimateGas', [params]);
}
async function updateTokenType(tokenAddress) {
  try {
    return await (0, _actionQueue.submitRequestToBackground)('updateTokenType', [tokenAddress]);
  } catch (error) {
    (0, _error.logErrorWithMessage)(error);
  }
  return undefined;
}

/**
 * initiates polling for gas fee estimates.
 *
 * @returns a unique identify of the polling request that can be used
 * to remove that request from consideration of whether polling needs to
 * continue.
 */
function getGasFeeEstimatesAndStartPolling() {
  return (0, _actionQueue.submitRequestToBackground)('getGasFeeEstimatesAndStartPolling');
}

/**
 * Informs the GasFeeController that a specific token is no longer requiring
 * gas fee estimates. If all tokens unsubscribe the controller stops polling.
 *
 * @param pollToken - Poll token received from calling
 * `getGasFeeEstimatesAndStartPolling`.
 */
function disconnectGasFeeEstimatePoller(pollToken) {
  return (0, _actionQueue.submitRequestToBackground)('disconnectGasFeeEstimatePoller', [pollToken]);
}
async function addPollingTokenToAppState(pollingToken) {
  return (0, _actionQueue.submitRequestToBackground)('addPollingTokenToAppState', [pollingToken, _app.POLLING_TOKEN_ENVIRONMENT_TYPES[(0, _util.getEnvironmentType)()]]);
}
async function removePollingTokenFromAppState(pollingToken) {
  return (0, _actionQueue.submitRequestToBackground)('removePollingTokenFromAppState', [pollingToken, _app.POLLING_TOKEN_ENVIRONMENT_TYPES[(0, _util.getEnvironmentType)()]]);
}
function getGasFeeTimeEstimate(maxPriorityFeePerGas, maxFeePerGas) {
  return (0, _actionQueue.submitRequestToBackground)('getGasFeeTimeEstimate', [maxPriorityFeePerGas, maxFeePerGas]);
}
async function closeNotificationPopup() {
  await (0, _actionQueue.submitRequestToBackground)('markNotificationPopupAsAutomaticallyClosed');
  global.platform.closeCurrentWindow();
}

/**
 * @param payload - details of the event to track
 * @param options - options for routing/handling of event
 * @returns
 */
function trackMetaMetricsEvent(payload, options) {
  return (0, _actionQueue.submitRequestToBackground)('trackMetaMetricsEvent', [{
    ...payload,
    actionId: (0, _actionQueue.generateActionId)()
  }, options]);
}
function createEventFragment(options) {
  const actionId = (0, _actionQueue.generateActionId)();
  return (0, _actionQueue.submitRequestToBackground)('createEventFragment', [{
    ...options,
    actionId
  }]);
}
function createTransactionEventFragment(transactionId, event) {
  const actionId = (0, _actionQueue.generateActionId)();
  return (0, _actionQueue.submitRequestToBackground)('createTransactionEventFragment', [transactionId, event, actionId]);
}
function updateEventFragment(id, payload) {
  return (0, _actionQueue.submitRequestToBackground)('updateEventFragment', [id, payload]);
}
function finalizeEventFragment(id, options) {
  return (0, _actionQueue.submitRequestToBackground)('finalizeEventFragment', [id, options]);
}

/**
 * @param payload - details of the page viewed
 * @param options - options for handling the page view
 */
function trackMetaMetricsPage(payload, options) {
  return (0, _actionQueue.submitRequestToBackground)('trackMetaMetricsPage', [{
    ...payload,
    actionId: (0, _actionQueue.generateActionId)()
  }, options]);
}
function updateViewedNotifications(notificationIdViewedStatusMap) {
  return (0, _actionQueue.submitRequestToBackground)('updateViewedNotifications', [notificationIdViewedStatusMap]);
}
async function setAlertEnabledness(alertId, enabledness) {
  await (0, _actionQueue.submitRequestToBackground)('setAlertEnabledness', [alertId, enabledness]);
}
async function setUnconnectedAccountAlertShown(origin) {
  await (0, _actionQueue.submitRequestToBackground)('setUnconnectedAccountAlertShown', [origin]);
}
async function setWeb3ShimUsageAlertDismissed(origin) {
  await (0, _actionQueue.submitRequestToBackground)('setWeb3ShimUsageAlertDismissed', [origin]);
}

// Smart Transactions Controller
async function setSmartTransactionsOptInStatus(optInState, prevOptInState) {
  trackMetaMetricsEvent({
    actionId: (0, _actionQueue.generateActionId)(),
    event: 'STX OptIn',
    category: _metametrics.MetaMetricsEventCategory.Swaps,
    sensitiveProperties: {
      stx_enabled: true,
      current_stx_enabled: true,
      stx_user_opt_in: optInState,
      stx_prev_user_opt_in: prevOptInState
    }
  });
  await (0, _actionQueue.submitRequestToBackground)('setSmartTransactionsOptInStatus', [optInState]);
}
function clearSmartTransactionFees() {
  (0, _actionQueue.submitRequestToBackground)('clearSmartTransactionFees');
}
function fetchSmartTransactionFees(unsignedTransaction, approveTxParams) {
  return async dispatch => {
    if (approveTxParams) {
      approveTxParams.value = '0x0';
    }
    try {
      const smartTransactionFees = await await (0, _actionQueue.submitRequestToBackground)('fetchSmartTransactionFees', [unsignedTransaction, approveTxParams]);
      dispatch({
        type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
        payload: null
      });
      return smartTransactionFees;
    } catch (err) {
      (0, _error.logErrorWithMessage)(err);
      if ((0, _error.isErrorWithMessage)(err) && err.message.startsWith('Fetch error:')) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(err.message);
        dispatch({
          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
          payload: errorObj
        });
      }
      throw err;
    }
  };
}
const createSignedTransactions = async (unsignedTransaction, fees, areCancelTransactions) => {
  const unsignedTransactionsWithFees = fees.map(fee => {
    const unsignedTransactionWithFees = {
      ...unsignedTransaction,
      maxFeePerGas: (0, _conversion.decimalToHex)(fee.maxFeePerGas),
      maxPriorityFeePerGas: (0, _conversion.decimalToHex)(fee.maxPriorityFeePerGas),
      gas: areCancelTransactions ? (0, _conversion.decimalToHex)(21000) // It has to be 21000 for cancel transactions, otherwise the API would reject it.
      : unsignedTransaction.gas,
      value: unsignedTransaction.value
    };
    if (areCancelTransactions) {
      unsignedTransactionWithFees.to = unsignedTransactionWithFees.from;
      unsignedTransactionWithFees.data = '0x';
    }
    return unsignedTransactionWithFees;
  });
  const signedTransactions = await (0, _actionQueue.submitRequestToBackground)('approveTransactionsWithSameNonce', [unsignedTransactionsWithFees]);
  return signedTransactions;
};
function signAndSendSmartTransaction({
  unsignedTransaction,
  smartTransactionFees
}) {
  return async dispatch => {
    const signedTransactions = await createSignedTransactions(unsignedTransaction, smartTransactionFees.fees);
    const signedCanceledTransactions = await createSignedTransactions(unsignedTransaction, smartTransactionFees.cancelFees, true);
    try {
      const response = await (0, _actionQueue.submitRequestToBackground)('submitSignedTransactions', [{
        signedTransactions,
        signedCanceledTransactions,
        txParams: unsignedTransaction
      }]); // Returns e.g.: { uuid: 'dP23W7c2kt4FK9TmXOkz1UM2F20' }
      return response.uuid;
    } catch (err) {
      (0, _error.logErrorWithMessage)(err);
      if ((0, _error.isErrorWithMessage)(err) && err.message.startsWith('Fetch error:')) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(err.message);
        dispatch({
          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
          payload: errorObj
        });
      }
      throw err;
    }
  };
}
function updateSmartTransaction(uuid, txMeta) {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('updateSmartTransaction', [{
        uuid,
        ...txMeta
      }]);
    } catch (err) {
      (0, _error.logErrorWithMessage)(err);
      if ((0, _error.isErrorWithMessage)(err) && err.message.startsWith('Fetch error:')) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(err.message);
        dispatch({
          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
          payload: errorObj
        });
      }
      throw err;
    }
  };
}
function setSmartTransactionsRefreshInterval(refreshInterval) {
  return async () => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('setStatusRefreshInterval', [refreshInterval]);
    } catch (err) {
      (0, _error.logErrorWithMessage)(err);
    }
  };
}
function cancelSmartTransaction(uuid) {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('cancelSmartTransaction', [uuid]);
    } catch (err) {
      (0, _error.logErrorWithMessage)(err);
      if ((0, _error.isErrorWithMessage)(err) && err.message.startsWith('Fetch error:')) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(err.message);
        dispatch({
          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,
          payload: errorObj
        });
      }
      throw err;
    }
  };
}

// TODO: codeword NOT_A_THUNK @brad-decker
function fetchSmartTransactionsLiveness() {
  return async () => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('fetchSmartTransactionsLiveness');
    } catch (err) {
      (0, _error.logErrorWithMessage)(err);
    }
  };
}
function dismissSmartTransactionsErrorMessage() {
  return {
    type: actionConstants.DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE
  };
}

// DetectTokenController
async function detectNewTokens() {
  return (0, _actionQueue.submitRequestToBackground)('detectNewTokens');
}

// App state
function hideTestNetMessage() {
  return (0, _actionQueue.submitRequestToBackground)('setShowTestnetMessageInDropdown', [false]);
}
function hideBetaHeader() {
  return (0, _actionQueue.submitRequestToBackground)('setShowBetaHeader', [false]);
}
function hideProductTour() {
  return (0, _actionQueue.submitRequestToBackground)('setShowProductTour', [false]);
}

// TODO: codeword NOT_A_THUNK @brad-decker
function setTransactionSecurityCheckEnabled(transactionSecurityCheckEnabled) {
  return async () => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('setTransactionSecurityCheckEnabled', [transactionSecurityCheckEnabled]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
    }
  };
}
function setFirstTimeUsedNetwork(chainId) {
  return (0, _actionQueue.submitRequestToBackground)('setFirstTimeUsedNetwork', [chainId]);
}

// QR Hardware Wallets
async function submitQRHardwareCryptoHDKey(cbor) {
  await (0, _actionQueue.submitRequestToBackground)('submitQRHardwareCryptoHDKey', [cbor]);
}
async function submitQRHardwareCryptoAccount(cbor) {
  await (0, _actionQueue.submitRequestToBackground)('submitQRHardwareCryptoAccount', [cbor]);
}
function cancelSyncQRHardware() {
  return async dispatch => {
    dispatch(hideLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('cancelSyncQRHardware');
  };
}
async function submitQRHardwareSignature(requestId, cbor) {
  await (0, _actionQueue.submitRequestToBackground)('submitQRHardwareSignature', [requestId, cbor]);
}
function cancelQRHardwareSignRequest() {
  return async dispatch => {
    dispatch(hideLoadingIndication());
    await (0, _actionQueue.submitRequestToBackground)('cancelQRHardwareSignRequest');
  };
}
function requestUserApproval({
  origin,
  type,
  requestData
}) {
  return async dispatch => {
    try {
      await (0, _actionQueue.submitRequestToBackground)('requestUserApproval', [{
        origin,
        type,
        requestData
      }]);
    } catch (error) {
      (0, _error.logErrorWithMessage)(error);
      dispatch(displayWarning('Had trouble requesting user approval'));
    }
  };
}
async function getCurrentNetworkEIP1559Compatibility() {
  let networkEIP1559Compatibility;
  try {
    networkEIP1559Compatibility = await (0, _actionQueue.submitRequestToBackground)('getCurrentNetworkEIP1559Compatibility');
  } catch (error) {
    console.error(error);
  }
  return networkEIP1559Compatibility;
}


}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\store\\actions.ts",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\store\\store.ts", {"../ducks":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\ducks\\index.js","@reduxjs/toolkit":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@reduxjs\\toolkit\\dist\\index.js","remote-redux-devtools":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\remote-redux-devtools\\lib\\index.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Cui%5Cstore%5Cstore.ts
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = configureStore;
var _toolkit = require("@reduxjs/toolkit");
var _remoteReduxDevtools = _interopRequireDefault(require("remote-redux-devtools"));
var _ducks = _interopRequireDefault(require("../ducks"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * This interface is temporary and is copied from the message-manager.js file
 * and is the 'msgParams' key of the interface declared there. We should get a
 * universal Message type to use for this, the Message manager and all
 * the other types of messages.
 *
 * TODO: Replace this
 */

/**
 * This interface is a temporary interface to describe the state tree that is
 * sent from the background. Ideally we can build this using Types in the
 * backend when we compose the stores, then we can import it here and use it.
 *
 * Some of this is duplicated in the metamask redux duck. In *most* cases the
 * state received from the background takes precedence over anything in the
 * metamask reducer.
 */

function configureStore(preloadedState) {
  const debugModeEnabled = Boolean(true);
  const isDev = debugModeEnabled && !false;
  const enhancers = [];
  if (isDev) {
    enhancers.push((0, _remoteReduxDevtools.default)({
      name: 'MetaMask',
      hostname: 'localhost',
      port: 8000,
      realtime: true
    }));
  }
  return (0, _toolkit.configureStore)({
    reducer: _ducks.default,
    middleware: getDefaultMiddleware => getDefaultMiddleware({
      /**
       * We do not persist the redux tree for rehydration, so checking for
       * serializable state keys is not relevant for now. Any state that persists
       * is managed in the background. We may at some point want this, but we can
       * gradually implement by using the ignore options to ignore those actions
       * and state keys that are not serializable, preventing us from adding new
       * actions and state that would violate our ability to persist state keys.
       * NOTE: redux-thunk is included by default in the middleware below.
       */
      serializableCheck: false,
      /**
       * immutableCheck controls whether we get warnings about mutation of
       * state, which will be true in dev. However in test lavamoat complains
       * about something the middleware is doing. It would be good to figure
       * that out and enable this in test environments so that mutation
       * causes E2E failures.
       */
      immutableCheck: isDev ? {
        warnAfter: 100
      } : false
    }),
    devTools: false,
    enhancers,
    preloadedState
  });
}

      };
    };
  }
  }
}, {package:"$root$",file:"ui\\store\\store.ts",}],
["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\ui.js", {"../../shared/constants/app":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\constants\\app.ts","../../shared/lib/error-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\lib\\error-utils.js","../../shared/lib/ui-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\lib\\ui-utils.js","../../shared/modules/browser-runtime.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\browser-runtime.utils.js","../../shared/modules/mv3.utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\shared\\modules\\mv3.utils.js","../../ui":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\ui\\index.js","./lib/metaRPCClientFactory":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\metaRPCClientFactory.js","./lib/stream-utils":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\stream-utils.js","./lib/util":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\lib\\util.ts","./platforms/extension":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\platforms\\extension.js","@formatjs/intl-relativetimeformat/polyfill":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\@formatjs\\intl-relativetimeformat\\polyfill.js","eth-query":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\eth-query\\index.js","ethjs":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\ethjs\\lib\\index.js","extension-port-stream":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\extension-port-stream\\dist\\index.js","loglevel":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\loglevel\\lib\\loglevel.js","react-devtools":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\react-devtools\\index.js","web3-stream-provider":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\web3-stream-provider\\index.js","webextension-polyfill":"C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\node_modules\\webextension-polyfill\\dist\\browser-polyfill.js"}, function(){
  with (this.scopeTerminator) {
  with (this.globalThis) {
    return function() {
      'use strict';
      // source: C:%5CUsers%5Cforth%5CDesktop%5Cmetamaskclone%5Cmetamask-extension-develop%5Capp%5Cscripts%5Cui.js
      return function (require, module, exports) {
"use strict";

require("@formatjs/intl-relativetimeformat/polyfill");
require("react-devtools");
var _extensionPortStream = _interopRequireDefault(require("extension-port-stream"));
var _webextensionPolyfill = _interopRequireDefault(require("webextension-polyfill"));
var _ethjs = _interopRequireDefault(require("ethjs"));
var _ethQuery = _interopRequireDefault(require("eth-query"));
var _web3StreamProvider = _interopRequireDefault(require("web3-stream-provider"));
var _loglevel = _interopRequireDefault(require("loglevel"));
var _ui = _interopRequireWildcard(require("../../ui"));
var _app = require("../../shared/constants/app");
var _mv = require("../../shared/modules/mv3.utils");
var _browserRuntime = require("../../shared/modules/browser-runtime.utils");
var _uiUtils = require("../../shared/lib/ui-utils");
var _errorUtils = require("../../shared/lib/error-utils");
var _extension = _interopRequireDefault(require("./platforms/extension"));
var _streamUtils = require("./lib/stream-utils");
var _util = require("./lib/util");
var _metaRPCClientFactory = _interopRequireDefault(require("./lib/metaRPCClientFactory"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// polyfills

// dev only, "react-devtools" import is skipped in prod builds

const container = document.getElementById('app-content');
const ONE_SECOND_IN_MILLISECONDS = 1_000;

// Service Worker Keep Alive Message Constants
const WORKER_KEEP_ALIVE_INTERVAL = ONE_SECOND_IN_MILLISECONDS;
const WORKER_KEEP_ALIVE_MESSAGE = 'WORKER_KEEP_ALIVE_MESSAGE';
const ACK_KEEP_ALIVE_WAIT_TIME = 60_000; // 1 minute
const ACK_KEEP_ALIVE_MESSAGE = 'ACK_KEEP_ALIVE_MESSAGE';

// Timeout for initializing phishing warning page.
const PHISHING_WARNING_PAGE_TIMEOUT = ONE_SECOND_IN_MILLISECONDS;
const PHISHING_WARNING_SW_STORAGE_KEY = 'phishing-warning-sw-registered';
let lastMessageReceivedTimestamp = Date.now();
let extensionPort;
let ackTimeoutToDisplayError;

/*
 * As long as UI is open it will keep sending messages to service worker
 * In service worker as this message is received
 * if service worker is inactive it is reactivated and script re-loaded
 * Time has been kept to 1000ms but can be reduced for even faster re-activation of service worker
 */
if (_mv.isManifestV3) {
  // Checking for SW aliveness (or stuckness) flow
  // 1. Check if we have an extensionPort, if yes
  // 2a. Send a keep alive message to the background via extensionPort
  // 2b. Add a listener to it (if not already added)
  // 3a. Set a timeout to check if we have received an ACK from background
  // 3b. If we have not received an ACK within ACK_KEEP_ALIVE_WAIT_TIME,
  //     we know the background is stuck or dead
  // 4. If we recieve an ACK_KEEP_ALIVE_MESSAGE from the service worker, we know it is alive

  const ackKeepAliveListener = message => {
    if (message.name === ACK_KEEP_ALIVE_MESSAGE) {
      lastMessageReceivedTimestamp = Date.now();
      clearTimeout(ackTimeoutToDisplayError);
    }
  };
  const keepAliveInterval = setInterval(() => {
    _webextensionPolyfill.default.runtime.sendMessage({
      name: WORKER_KEEP_ALIVE_MESSAGE
    });
    if (extensionPort !== null && extensionPort !== undefined) {
      extensionPort.postMessage({
        name: WORKER_KEEP_ALIVE_MESSAGE
      });
      if (extensionPort.onMessage.hasListener(ackKeepAliveListener) === false) {
        extensionPort.onMessage.addListener(ackKeepAliveListener);
      }
    }
    ackTimeoutToDisplayError = setTimeout(() => {
      if (Date.now() - lastMessageReceivedTimestamp > ACK_KEEP_ALIVE_WAIT_TIME) {
        clearInterval(keepAliveInterval);
        displayCriticalError('somethingIsWrong', new Error("Something's gone wrong. Try reloading the page."));
      }
    }, ACK_KEEP_ALIVE_WAIT_TIME);
  }, WORKER_KEEP_ALIVE_INTERVAL);
}
start().catch(_loglevel.default.error);
async function start() {
  // create platform global
  global.platform = new _extension.default();

  // identify window type (popup, notification)
  const windowType = (0, _util.getEnvironmentType)();
  let isUIInitialised = false;

  // setup stream to background
  extensionPort = _webextensionPolyfill.default.runtime.connect({
    name: windowType
  });
  let connectionStream = new _extensionPortStream.default(extensionPort);
  const activeTab = await queryCurrentActiveTab(windowType);
  let loadPhishingWarningPage;
  if (_mv.isManifestV3) {
    /*
     * In case of MV3 the issue of blank screen was very frequent, it is caused by UI initialising before background is ready to send state.
     * Code below ensures that UI is rendered only after "CONNECTION_READY" or "startUISync"
     * messages are received thus the background is ready, and ensures that streams and
     * phishing warning page load only after the "startUISync" message is received.
     * In case the UI is already rendered, only update the streams.
     */
    const messageListener = async message => {
      var _message$data;
      if ((message === null || message === void 0 ? void 0 : (_message$data = message.data) === null || _message$data === void 0 ? void 0 : _message$data.method) === 'startUISync') {
        if (isUIInitialised) {
          // Currently when service worker is revived we create new streams
          // in later version we might try to improve it by reviving same streams.
          updateUiStreams();
        } else {
          initializeUiWithTab(activeTab);
        }
        await loadPhishingWarningPage();
      }
    };

    /**
     * An error thrown if the phishing warning page takes too long to load.
     */
    class PhishingWarningPageTimeoutError extends Error {
      constructor() {
        super('Timeout failed');
      }
    }

    /**
     * Load the phishing warning page temporarily to ensure the service
     * worker has been registered, so that the warning page works offline.
     */
    loadPhishingWarningPage = async function () {
      // Check session storage for whether we've already initialized the phishing warning
      // service worker in this browser session and do not attempt to re-initialize if so.
      const phishingSWMemoryFetch = await _webextensionPolyfill.default.storage.session.get(PHISHING_WARNING_SW_STORAGE_KEY);
      if (phishingSWMemoryFetch[PHISHING_WARNING_SW_STORAGE_KEY]) {
        return;
      }
      const currentPlatform = (0, _util.getPlatform)();
      let iframe;
      try {
        const extensionStartupPhishingPageUrl = new URL("https://metamask.github.io/phishing-warning/v2.1.0/");
        // The `extensionStartup` hash signals to the phishing warning page that it should not bother
        // setting up streams for user interaction. Otherwise this page load would cause a console
        // error.
        extensionStartupPhishingPageUrl.hash = '#extensionStartup';
        iframe = window.document.createElement('iframe');
        iframe.setAttribute('src', extensionStartupPhishingPageUrl.href);
        iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');

        // Create "deferred Promise" to allow passing resolve/reject to event handlers
        let deferredResolve;
        let deferredReject;
        const loadComplete = new Promise((resolve, reject) => {
          deferredResolve = resolve;
          deferredReject = reject;
        });

        // The load event is emitted once loading has completed, even if the loading failed.
        // If loading failed we can't do anything about it, so we don't need to check.
        iframe.addEventListener('load', deferredResolve);

        // This step initiates the page loading.
        window.document.body.appendChild(iframe);

        // This timeout ensures that this iframe gets cleaned up in a reasonable
        // timeframe, and ensures that the "initialization complete" message
        // doesn't get delayed too long.
        setTimeout(() => deferredReject(new PhishingWarningPageTimeoutError()), PHISHING_WARNING_PAGE_TIMEOUT);
        await loadComplete;

        // store a flag in sessions storage that we've already loaded the service worker
        // and don't need to try again
        if (currentPlatform === _app.PLATFORM_FIREFOX) {
          // Firefox does not yet support the storage.session API introduced in MV3
          // Tracked here: https://bugzilla.mozilla.org/show_bug.cgi?id=1687778
          console.error('Firefox does not support required MV3 APIs: Phishing warning page iframe and service worker will reload each page refresh');
        } else {
          _webextensionPolyfill.default.storage.session.set({
            [PHISHING_WARNING_SW_STORAGE_KEY]: true
          });
        }
      } catch (error) {
        if (error instanceof PhishingWarningPageTimeoutError) {
          console.warn('Phishing warning page timeout; page not guaranteed to work offline.');
        } else {
          console.error('Failed to initialize phishing warning page', error);
        }
      } finally {
        if (iframe) {
          iframe.remove();
        }
      }
    };

    // resetExtensionStreamAndListeners takes care to remove listeners from closed streams
    // it also creates new streams and attaches event listeners to them
    const resetExtensionStreamAndListeners = () => {
      extensionPort.onMessage.removeListener(messageListener);
      extensionPort.onDisconnect.removeListener(resetExtensionStreamAndListeners);

      // message below will try to activate service worker
      // in MV3 is likely that reason of stream closing is service worker going in-active
      _webextensionPolyfill.default.runtime.sendMessage({
        name: WORKER_KEEP_ALIVE_MESSAGE
      });
      extensionPort = _webextensionPolyfill.default.runtime.connect({
        name: windowType
      });
      connectionStream = new _extensionPortStream.default(extensionPort);
      extensionPort.onMessage.addListener(messageListener);
      extensionPort.onDisconnect.addListener(resetExtensionStreamAndListeners);
    };
    extensionPort.onMessage.addListener(messageListener);
    extensionPort.onDisconnect.addListener(resetExtensionStreamAndListeners);
  } else {
    initializeUiWithTab(activeTab);
  }
  function initializeUiWithTab(tab) {
    initializeUi(tab, connectionStream, (err, store) => {
      if (err) {
        // if there's an error, store will be = metamaskState
        displayCriticalError('troubleStarting', err, store);
        return;
      }
      isUIInitialised = true;
      const state = store.getState();
      const {
        metamask: {
          completedOnboarding
        } = {}
      } = state;
      if (!completedOnboarding && windowType !== _app.ENVIRONMENT_TYPE_FULLSCREEN) {
        global.platform.openExtensionInBrowser();
      }
    });
  }

  // Function to update new backgroundConnection in the UI
  function updateUiStreams() {
    connectToAccountManager(connectionStream, (err, backgroundConnection) => {
      if (err) {
        displayCriticalError('troubleStarting', err);
        return;
      }
      (0, _ui.updateBackgroundConnection)(backgroundConnection);
    });
  }
}
async function queryCurrentActiveTab(windowType) {
  // At the time of writing we only have the `activeTab` permission which means
  // that this query will only succeed in the popup context (i.e. after a "browserAction")
  if (windowType !== _app.ENVIRONMENT_TYPE_POPUP) {
    return {};
  }
  const tabs = await _webextensionPolyfill.default.tabs.query({
    active: true,
    currentWindow: true
  }).catch(e => {
    (0, _browserRuntime.checkForLastErrorAndLog)() || _loglevel.default.error(e);
  });
  const [activeTab] = tabs;
  const {
    id,
    title,
    url
  } = activeTab;
  const {
    origin,
    protocol
  } = url ? new URL(url) : {};
  if (!origin || origin === 'null') {
    return {};
  }
  return {
    id,
    title,
    origin,
    protocol,
    url
  };
}
function initializeUi(activeTab, connectionStream, cb) {
  connectToAccountManager(connectionStream, (err, backgroundConnection) => {
    if (err) {
      cb(err, null);
      return;
    }
    (0, _ui.default)({
      activeTab,
      container,
      backgroundConnection
    }, cb);
  });
}
async function displayCriticalError(errorKey, err, metamaskState) {
  const html = await (0, _errorUtils.getErrorHtml)(errorKey, _uiUtils.SUPPORT_LINK, metamaskState);
  container.innerHTML = html;
  const button = document.getElementById('critical-error-button');
  button === null || button === void 0 ? void 0 : button.addEventListener('click', _ => {
    _webextensionPolyfill.default.runtime.reload();
  });
  _loglevel.default.error(err.stack);
  throw err;
}

/**
 * Establishes a connection to the background and a Web3 provider
 *
 * @param {PortDuplexStream} connectionStream - PortStream instance establishing a background connection
 * @param {Function} cb - Called when controller connection is established
 */
function connectToAccountManager(connectionStream, cb) {
  const mx = (0, _streamUtils.setupMultiplex)(connectionStream);
  const controllerConnectionStream = mx.createStream('controller');
  setupControllerConnection(controllerConnectionStream, cb);
  setupWeb3Connection(mx.createStream('provider'));
}

/**
 * Establishes a streamed connection to a Web3 provider
 *
 * @param {PortDuplexStream} connectionStream - PortStream instance establishing a background connection
 */
function setupWeb3Connection(connectionStream) {
  const providerStream = new _web3StreamProvider.default();
  providerStream.pipe(connectionStream).pipe(providerStream);
  connectionStream.on('error', console.error.bind(console));
  providerStream.on('error', console.error.bind(console));
  global.ethereumProvider = providerStream;
  global.ethQuery = new _ethQuery.default(providerStream);
  global.eth = new _ethjs.default(providerStream);
}

/**
 * Establishes a streamed connection to the background account manager
 *
 * @param {PortDuplexStream} controllerConnectionStream - PortStream instance establishing a background connection
 * @param {Function} cb - Called when the remote account manager connection is established
 */
function setupControllerConnection(controllerConnectionStream, cb) {
  const backgroundRPC = (0, _metaRPCClientFactory.default)(controllerConnectionStream);
  cb(null, backgroundRPC);
}

      };
    };
  }
  }
}, {package:"$root$",file:"app\\scripts\\ui.js",}]],["C:\\Users\\forth\\Desktop\\metamaskclone\\metamask-extension-develop\\app\\scripts\\ui.js"],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
